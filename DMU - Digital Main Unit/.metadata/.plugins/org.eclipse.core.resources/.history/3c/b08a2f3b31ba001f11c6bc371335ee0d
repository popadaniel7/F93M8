#include "Ain.h"
#include "adc.h"

__attribute__((section(".ccmram"))) uint32 Ain_MainCounter = 0;
__attribute__((section(".ccmram"))) uint32 Ain_Status = 0;
__attribute__((section(".ccmram"))) uint32 Ain_ErrArr[3] = {0};
uint32 Ain_MeasValues[3] = {0};
__attribute__((section(".ccmram"))) uint32 Ain_DmaErrArr[7] = {0};
__attribute__((section(".ccmram"))) uint8 Ain_ErrorFlag = 0;
__attribute__((section(".ccmram"))) float Ain_VrefInt = 0;
__attribute__((section(".ccmram"))) float Ain_McuTemp = 0;
__attribute__((section(".ccmram"))) float Ain_Vbat = 0;
extern ADC_HandleTypeDef hadc1;
extern DMA_HandleTypeDef hdma_adc1;

void Ain_MainFunction(void);

void Ain_MainFunction(void)
{
	Ain_Status = HAL_ADC_GetState(&hadc1);
	if(0 == Ain_MainCounter) HAL_ADC_Start_DMA(&hadc1, Ain_MeasValues, 3);
	else
	{
		/* Do nothing. */
	}
	Ain_Vbat = (Ain_MeasValues[0] / 4095) * 1.21 * 2;
	//Ain_McuTemp = 357.558 - 0.187364 * Ain_MeasValues[1];
	Ain_VrefInt = 1.21 * 4095 / Ain_MeasValues[2];
	Ain_McuTemp = ((float)(Ain_MeasValue[1] / 4095) * Ain_VrefInt) - 0.76;
	switch(hdma_adc1.ErrorCode)
	{
	case HAL_DMA_ERROR_TE:
		Ain_DmaErrArr[0]++;
		Ain_ErrorFlag = 1;
		break;
	case HAL_DMA_ERROR_FE:
		Ain_DmaErrArr[1]++;
		Ain_ErrorFlag = 1;
		break;
	case HAL_DMA_ERROR_DME:
		Ain_DmaErrArr[2]++;
		Ain_ErrorFlag = 1;
		break;
	case HAL_DMA_ERROR_TIMEOUT:
		Ain_DmaErrArr[3]++;
		Ain_ErrorFlag = 1;
		break;
	case HAL_DMA_ERROR_PARAM:
		Ain_DmaErrArr[4]++;
		Ain_ErrorFlag = 1;
		break;
	case HAL_DMA_ERROR_NO_XFER:
		Ain_DmaErrArr[5]++;
		Ain_ErrorFlag = 1;
		break;
	case HAL_DMA_ERROR_NOT_SUPPORTED:
		Ain_DmaErrArr[6]++;
		Ain_ErrorFlag = 1;
		break;
	default:
		Ain_ErrorFlag = 0;
		break;
	}
	if(1 == Ain_ErrorFlag) for(uint8 i = 0; i < 3; i++) Ain_MeasValues[i] = 0;
	else
	{
		/* Do nothing. */
	}
	Ain_MainCounter++;
}

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
	switch(hadc->ErrorCode)
	{
	case HAL_ADC_ERROR_INTERNAL:
		Ain_ErrArr[0]++;
		break;
	case HAL_ADC_ERROR_OVR:
		Ain_ErrArr[1]++;
		break;
	case HAL_ADC_ERROR_DMA:
		Ain_ErrArr[2]++;
		break;
	default:
		break;
	}
}
