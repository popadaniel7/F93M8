#include "Nvm.h"

__attribute__((section(".ccmram"))) uint32 Nvm_MainCounter = 0;
__attribute__((section(".ccmram"))) uint8 Nvm_WriteAllPending = 0;
__attribute__((section(".ccmram"))) uint8 Nvm_ReadAllPending = 0;
__attribute__((section(".ccmram"))) uint8 Nvm_DataRecorder_CommonBlock[10] = {0};
extern __attribute__((section(".ccmram"))) uint8 DataRecorder_CcmCounter[39];
extern __attribute__((section(".ccmram"))) uint8 DataRecorder_AvgLowVoltageBattery;
extern __attribute__((section(".ccmram"))) uint8 DataRecorder_KilometerTotal;
extern __attribute__((section(".ccmram"))) uint8 DataRecorder_KilometerPerDcy;
extern __attribute__((section(".ccmram"))) uint8 DataRecorder_NumberOfDcy;
extern __attribute__((section(".ccmram"))) uint8 DataRecorder_MaxCurrentConsumptionLV;
extern __attribute__((section(".ccmram"))) uint8 DataRecorder_MinCurrentConsumptionLV;
extern __attribute__((section(".ccmram"))) uint8 DataRecorder_AvgCurrentConsumptionLV;
extern __attribute__((section(".ccmram"))) uint8 DataRecorder_DisplaySelfTestStatus;
extern __attribute__((section(".ccmram"))) uint8 DataRecorder_ReverseCameraStatus;
extern __attribute__((section(".ccmram"))) uint8 DataRecorder_McuTemperature;
extern __attribute__((section(".ccmram"))) uint8 DataRecorder_BackupBatteryStatus;
extern __attribute__((section(".ccmram"))) uint8 DataRecorder_ResetCounter[20];

void Nvm_MainFunction(void);
void Nvm_ReadAll();
void Nvm_WriteAll();

void Nvm_ReadAll()
{
	Nvm_W25Q16_ReadBlock(DataRecorder_CcmCounter,0x000000,0,39);
	Nvm_W25Q16_ReadBlock(DataRecorder_ResetCounter,0x010000,0,13);
	Nvm_W25Q16_ReadBlock(Nvm_DataRecorder_CommonBlock,0x020000,0,10);
	DataRecorder_AvgLowVoltageBattery = Nvm_DataRecorder_CommonBlock[0];
	DataRecorder_KilometerTotal = Nvm_DataRecorder_CommonBlock[1];
	DataRecorder_KilometerPerDcy = Nvm_DataRecorder_CommonBlock[2];
	DataRecorder_NumberOfDcy = Nvm_DataRecorder_CommonBlock[3];
	DataRecorder_MaxCurrentConsumptionLV = Nvm_DataRecorder_CommonBlock[4];
	DataRecorder_MinCurrentConsumptionLV = Nvm_DataRecorder_CommonBlock[5];
	DataRecorder_AvgCurrentConsumptionLV = Nvm_DataRecorder_CommonBlock[6];
	DataRecorder_ReverseCameraStatus = Nvm_DataRecorder_CommonBlock[7];
	DataRecorder_McuTemperature = Nvm_DataRecorder_CommonBlock[8];
	DataRecorder_BackupBatteryStatus = Nvm_DataRecorder_CommonBlock[9];
}
void Nvm_WriteAll()
{
	Nvm_DataRecorder_CommonBlock[0] = DataRecorder_AvgLowVoltageBattery;
	Nvm_DataRecorder_CommonBlock[1] = DataRecorder_KilometerTotal;
	Nvm_DataRecorder_CommonBlock[2] = DataRecorder_KilometerPerDcy;
	Nvm_DataRecorder_CommonBlock[3] = DataRecorder_NumberOfDcy;
	Nvm_DataRecorder_CommonBlock[4] = DataRecorder_MaxCurrentConsumptionLV;
	Nvm_DataRecorder_CommonBlock[5] = DataRecorder_MinCurrentConsumptionLV;
	Nvm_DataRecorder_CommonBlock[6] = DataRecorder_AvgCurrentConsumptionLV;
	Nvm_DataRecorder_CommonBlock[7] = DataRecorder_ReverseCameraStatus;
	Nvm_DataRecorder_CommonBlock[8] = DataRecorder_McuTemperature;
	Nvm_DataRecorder_CommonBlock[9] = DataRecorder_BackupBatteryStatus;
	Nvm_W25Q16_EraseBlock(0x000000);
	Nvm_W25Q16_EraseBlock(0x010000);
	Nvm_W25Q16_EraseBlock(0x020000);
	Nvm_W25Q16_WriteBlock(DataRecorder_CcmCounter,0x000000,0,39);
	Nvm_W25Q16_WriteBlock(DataRecorder_ResetCounter,0x010000,0,13);
	Nvm_W25Q16_WriteBlock(Nvm_DataRecorder_CommonBlock,0x020000,0,10);
}
void Nvm_MainFunction(void)
{
	if(0 == Nvm_MainCounter) Nvm_Init_Status = Nvm_W25Q16_Init();
	else
	{
		/* Do nothing. */
	}
	if(0 == Nvm_SpiStatus)
	{
		if(1 == Nvm_ReadAllPending)
		{
			Nvm_ReadAll();
			Nvm_ReadAllPending = 2;
		}
		else if(1 == Nvm_WriteAllPending)
		{
			Nvm_WriteAll();
			Nvm_WriteAllPending = 2;
		}
		else
		{
			/* Do nothing. */
		}
	}
	else
	{
		Nvm_ReadAllPending = 2;
		Nvm_WriteAllPending = 2;
	}
	Nvm_MainCounter++;
}
static uint32 NvM_FlashWriteData(uint32 StartSectorAddress, uint32 *Data, uint16 numberofwords, uint32 Sector)
{
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32 SECTORError;
	uint32 sofar=0;
	uint32 StartSector = Sector;
	uint32 EndSector = Sector;
	HAL_FLASH_Unlock();
	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
	EraseInitStruct.Sector        = StartSector;
	EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK) return HAL_FLASH_GetError ();
	else
	{
		/* Do nothing. */
	}

	while (sofar<numberofwords)
	{
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, Data[sofar]) == HAL_OK)
		{
			StartSectorAddress += 4;
			sofar++;
		}
		else return HAL_FLASH_GetError ();
	}
	HAL_FLASH_Lock();
	return 0;
}
void NvM_FlashReadData(uint32 StartSectorAddress, uint32 *RxBuf, uint16 numberofwords)
{
	for (uint16 i = 0; i < numberofwords; i++) RxBuf[i] = *(__IO uint32 *)(StartSectorAddress + (i * 4));
}
