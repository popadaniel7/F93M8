/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * File Name          : freertos.c
  * Description        : Code for freertos applications
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under Ultimate Liberty license
  * SLA0044, the "License"; You may not use this file except in compliance with
  * the License. You may obtain a copy of the License at:
  *                             www.st.com/SLA0044
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "FreeRTOS.h"
#include "task.h"
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */
/* Definitions for ASILA_APPL */
osThreadId_t ASILA_APPLHandle;
const osThreadAttr_t ASILA_APPL_attributes = {
  .name = "ASILA_APPL",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityRealtime,
};
/* Definitions for ASILB_APPL */
osThreadId_t ASILB_APPLHandle;
const osThreadAttr_t ASILB_APPL_attributes = {
  .name = "ASILB_APPL",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityRealtime1,
};
/* Definitions for ASILC_APPL */
osThreadId_t ASILC_APPLHandle;
const osThreadAttr_t ASILC_APPL_attributes = {
  .name = "ASILC_APPL",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityRealtime3,
};
/* Definitions for QM_APPL */
osThreadId_t QM_APPLHandle;
const osThreadAttr_t QM_APPL_attributes = {
  .name = "QM_APPL",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityAboveNormal,
};
/* Definitions for ASILA_BSW */
osThreadId_t ASILA_BSWHandle;
const osThreadAttr_t ASILA_BSW_attributes = {
  .name = "ASILA_BSW",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityRealtime3,
};
/* Definitions for ASILB_BSW */
osThreadId_t ASILB_BSWHandle;
const osThreadAttr_t ASILB_BSW_attributes = {
  .name = "ASILB_BSW",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityRealtime4,
};
/* Definitions for ASILC_BSW */
osThreadId_t ASILC_BSWHandle;
const osThreadAttr_t ASILC_BSW_attributes = {
  .name = "ASILC_BSW",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityRealtime5,
};
/* Definitions for QM_BSW */
osThreadId_t QM_BSWHandle;
const osThreadAttr_t QM_BSW_attributes = {
  .name = "QM_BSW",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityHigh,
};
/* Definitions for OS_RuntimeMonitor */
osThreadId_t OS_RuntimeMonitorHandle;
const osThreadAttr_t OS_RuntimeMonitor_attributes = {
  .name = "OS_RuntimeMonitor",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityRealtime6,
};
/* Definitions for Alarm5ms_ASILA_APPL */
osTimerId_t Alarm5ms_ASILA_APPLHandle;
const osTimerAttr_t Alarm5ms_ASILA_APPL_attributes = {
  .name = "Alarm5ms_ASILA_APPL"
};
/* Definitions for Alarm5ms_ASILB_APPL */
osTimerId_t Alarm5ms_ASILB_APPLHandle;
const osTimerAttr_t Alarm5ms_ASILB_APPL_attributes = {
  .name = "Alarm5ms_ASILB_APPL"
};
/* Definitions for Alarm5ms_ASILC_APPL */
osTimerId_t Alarm5ms_ASILC_APPLHandle;
const osTimerAttr_t Alarm5ms_ASILC_APPL_attributes = {
  .name = "Alarm5ms_ASILC_APPL"
};
/* Definitions for Alarm5ms_QM_APPL */
osTimerId_t Alarm5ms_QM_APPLHandle;
const osTimerAttr_t Alarm5ms_QM_APPL_attributes = {
  .name = "Alarm5ms_QM_APPL"
};
/* Definitions for Alarm5ms_ASILA_BSW */
osTimerId_t Alarm5ms_ASILA_BSWHandle;
const osTimerAttr_t Alarm5ms_ASILA_BSW_attributes = {
  .name = "Alarm5ms_ASILA_BSW"
};
/* Definitions for Alarm5ms_ASILB_BSW */
osTimerId_t Alarm5ms_ASILB_BSWHandle;
const osTimerAttr_t Alarm5ms_ASILB_BSW_attributes = {
  .name = "Alarm5ms_ASILB_BSW"
};
/* Definitions for Alarm5ms_ASILC_BSW */
osTimerId_t Alarm5ms_ASILC_BSWHandle;
const osTimerAttr_t Alarm5ms_ASILC_BSW_attributes = {
  .name = "Alarm5ms_ASILC_BSW"
};
/* Definitions for Alarm5ms_QM_BSW */
osTimerId_t Alarm5ms_QM_BSWHandle;
const osTimerAttr_t Alarm5ms_QM_BSW_attributes = {
  .name = "Alarm5ms_QM_BSW"
};
/* Definitions for Alarm10ms_ASILA_APPL */
osTimerId_t Alarm10ms_ASILA_APPLHandle;
const osTimerAttr_t Alarm10ms_ASILA_APPL_attributes = {
  .name = "Alarm10ms_ASILA_APPL"
};
/* Definitions for Alarm10ms_ASILB_APPL */
osTimerId_t Alarm10ms_ASILB_APPLHandle;
const osTimerAttr_t Alarm10ms_ASILB_APPL_attributes = {
  .name = "Alarm10ms_ASILB_APPL"
};
/* Definitions for Alarm10ms_ASILC_APPL */
osTimerId_t Alarm10ms_ASILC_APPLHandle;
const osTimerAttr_t Alarm10ms_ASILC_APPL_attributes = {
  .name = "Alarm10ms_ASILC_APPL"
};
/* Definitions for Alarm10ms_QM_APPL */
osTimerId_t Alarm10ms_QM_APPLHandle;
const osTimerAttr_t Alarm10ms_QM_APPL_attributes = {
  .name = "Alarm10ms_QM_APPL"
};
/* Definitions for Alarm10ms_QM_BSW */
osTimerId_t Alarm10ms_QM_BSWHandle;
const osTimerAttr_t Alarm10ms_QM_BSW_attributes = {
  .name = "Alarm10ms_QM_BSW"
};
/* Definitions for Alarm10ms_ASILA_BSW */
osTimerId_t Alarm10ms_ASILA_BSWHandle;
const osTimerAttr_t Alarm10ms_ASILA_BSW_attributes = {
  .name = "Alarm10ms_ASILA_BSW"
};
/* Definitions for Alarm10ms_ASILB_BSW */
osTimerId_t Alarm10ms_ASILB_BSWHandle;
const osTimerAttr_t Alarm10ms_ASILB_BSW_attributes = {
  .name = "Alarm10ms_ASILB_BSW"
};
/* Definitions for Alarm10ms_ASILC_BSW */
osTimerId_t Alarm10ms_ASILC_BSWHandle;
const osTimerAttr_t Alarm10ms_ASILC_BSW_attributes = {
  .name = "Alarm10ms_ASILC_BSW"
};
/* Definitions for Alarm100ms_QM_APPL */
osTimerId_t Alarm100ms_QM_APPLHandle;
const osTimerAttr_t Alarm100ms_QM_APPL_attributes = {
  .name = "Alarm100ms_QM_APPL"
};
/* Definitions for Alarm100ms_QM_BSW */
osTimerId_t Alarm100ms_QM_BSWHandle;
const osTimerAttr_t Alarm100ms_QM_BSW_attributes = {
  .name = "Alarm100ms_QM_BSW"
};

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */

/* USER CODE END FunctionPrototypes */

void ASILA_APPL_OS_TASK(void *argument);
void ASILB_APPL_OS_TASK(void *argument);
void ASILC_APPL_OS_TASK(void *argument);
void QM_APPL_OS_TASK(void *argument);
void ASILA_BSW_OS_TASK(void *argument);
void ASILB_BSW_OS_TASK(void *argument);
void ASILC_BSW_OS_TASK(void *argument);
void QM_BSW_OS_TASK(void *argument);
void OS_RuntimeMonitor_OS_TASK(void *argument);
void Alarm5ms_ASILA_APPL_Callback(void *argument);
void Alarm5ms_ASILB_APPL_Callback(void *argument);
void Alarm5ms_ASILC_APPL_Callback(void *argument);
void Alarm5ms_QM_APPL_Callback(void *argument);
void Alarm5ms_ASILA_BSW_Callback(void *argument);
void Alarm5ms_ASILB_BSW_Callback(void *argument);
void Alarm5ms_ASILC_BSW_Callback(void *argument);
void Alarm5ms_QM_BSW_Callback(void *argument);
void Alarm10ms_ASILA_APPL_Callback(void *argument);
void Alarm10ms_ASILB_APPL_Callback(void *argument);
void Alarm10ms_ASILC_APPL_Callback(void *argument);
void Alarm10ms_QM_APPL_Callback(void *argument);
void Alarm10ms_QM_BSW_Callback(void *argument);
void Alarm10ms_ASILA_BSW_Callback(void *argument);
void Alarm10ms_ASILB_BSW_Callback(void *argument);
void Alarm10ms_ASILC_BSW_Callback(void *argument);
void Alarm100ms_QM_APPL_Callback(void *argument);
void Alarm100ms_QM_BSW_Callback(void *argument);

extern void MX_LWIP_Init(void);
void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

/* Hook prototypes */
void configureTimerForRunTimeStats(void);
unsigned long getRunTimeCounterValue(void);
void vApplicationIdleHook(void);
void vApplicationTickHook(void);
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
void configureTimerForRunTimeStats(void)
{

}

unsigned long getRunTimeCounterValue(void)
{
return 0;
}
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
   /* vApplicationIdleHook() will only be called if configUSE_IDLE_HOOK is set
   to 1 in FreeRTOSConfig.h. It will be called on each iteration of the idle
   task. It is essential that code added to this hook function never attempts
   to block in any way (for example, call xQueueReceive() with a block time
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
   /* vApplicationMallocFailedHook() will only be called if
   configUSE_MALLOC_FAILED_HOOK is set to 1 in FreeRTOSConfig.h. It is a hook
   function that will get called if a call to pvPortMalloc() fails.
   pvPortMalloc() is called internally by the kernel whenever a task, queue,
   timer or semaphore is created. It is also called by various parts of the
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
/* USER CODE END 5 */

/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of Alarm5ms_ASILA_APPL */
  Alarm5ms_ASILA_APPLHandle = osTimerNew(Alarm5ms_ASILA_APPL_Callback, osTimerPeriodic, NULL, &Alarm5ms_ASILA_APPL_attributes);

  /* creation of Alarm5ms_ASILB_APPL */
  Alarm5ms_ASILB_APPLHandle = osTimerNew(Alarm5ms_ASILB_APPL_Callback, osTimerPeriodic, NULL, &Alarm5ms_ASILB_APPL_attributes);

  /* creation of Alarm5ms_ASILC_APPL */
  Alarm5ms_ASILC_APPLHandle = osTimerNew(Alarm5ms_ASILC_APPL_Callback, osTimerPeriodic, NULL, &Alarm5ms_ASILC_APPL_attributes);

  /* creation of Alarm5ms_QM_APPL */
  Alarm5ms_QM_APPLHandle = osTimerNew(Alarm5ms_QM_APPL_Callback, osTimerPeriodic, NULL, &Alarm5ms_QM_APPL_attributes);

  /* creation of Alarm5ms_ASILA_BSW */
  Alarm5ms_ASILA_BSWHandle = osTimerNew(Alarm5ms_ASILA_BSW_Callback, osTimerPeriodic, NULL, &Alarm5ms_ASILA_BSW_attributes);

  /* creation of Alarm5ms_ASILB_BSW */
  Alarm5ms_ASILB_BSWHandle = osTimerNew(Alarm5ms_ASILB_BSW_Callback, osTimerPeriodic, NULL, &Alarm5ms_ASILB_BSW_attributes);

  /* creation of Alarm5ms_ASILC_BSW */
  Alarm5ms_ASILC_BSWHandle = osTimerNew(Alarm5ms_ASILC_BSW_Callback, osTimerPeriodic, NULL, &Alarm5ms_ASILC_BSW_attributes);

  /* creation of Alarm5ms_QM_BSW */
  Alarm5ms_QM_BSWHandle = osTimerNew(Alarm5ms_QM_BSW_Callback, osTimerPeriodic, NULL, &Alarm5ms_QM_BSW_attributes);

  /* creation of Alarm10ms_ASILA_APPL */
  Alarm10ms_ASILA_APPLHandle = osTimerNew(Alarm10ms_ASILA_APPL_Callback, osTimerPeriodic, NULL, &Alarm10ms_ASILA_APPL_attributes);

  /* creation of Alarm10ms_ASILB_APPL */
  Alarm10ms_ASILB_APPLHandle = osTimerNew(Alarm10ms_ASILB_APPL_Callback, osTimerPeriodic, NULL, &Alarm10ms_ASILB_APPL_attributes);

  /* creation of Alarm10ms_ASILC_APPL */
  Alarm10ms_ASILC_APPLHandle = osTimerNew(Alarm10ms_ASILC_APPL_Callback, osTimerPeriodic, NULL, &Alarm10ms_ASILC_APPL_attributes);

  /* creation of Alarm10ms_QM_APPL */
  Alarm10ms_QM_APPLHandle = osTimerNew(Alarm10ms_QM_APPL_Callback, osTimerPeriodic, NULL, &Alarm10ms_QM_APPL_attributes);

  /* creation of Alarm10ms_QM_BSW */
  Alarm10ms_QM_BSWHandle = osTimerNew(Alarm10ms_QM_BSW_Callback, osTimerPeriodic, NULL, &Alarm10ms_QM_BSW_attributes);

  /* creation of Alarm10ms_ASILA_BSW */
  Alarm10ms_ASILA_BSWHandle = osTimerNew(Alarm10ms_ASILA_BSW_Callback, osTimerPeriodic, NULL, &Alarm10ms_ASILA_BSW_attributes);

  /* creation of Alarm10ms_ASILB_BSW */
  Alarm10ms_ASILB_BSWHandle = osTimerNew(Alarm10ms_ASILB_BSW_Callback, osTimerPeriodic, NULL, &Alarm10ms_ASILB_BSW_attributes);

  /* creation of Alarm10ms_ASILC_BSW */
  Alarm10ms_ASILC_BSWHandle = osTimerNew(Alarm10ms_ASILC_BSW_Callback, osTimerPeriodic, NULL, &Alarm10ms_ASILC_BSW_attributes);

  /* creation of Alarm100ms_QM_APPL */
  Alarm100ms_QM_APPLHandle = osTimerNew(Alarm100ms_QM_APPL_Callback, osTimerPeriodic, NULL, &Alarm100ms_QM_APPL_attributes);

  /* creation of Alarm100ms_QM_BSW */
  Alarm100ms_QM_BSWHandle = osTimerNew(Alarm100ms_QM_BSW_Callback, osTimerPeriodic, NULL, &Alarm100ms_QM_BSW_attributes);

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ASILA_APPL */
  ASILA_APPLHandle = osThreadNew(ASILA_APPL_OS_TASK, NULL, &ASILA_APPL_attributes);

  /* creation of ASILB_APPL */
  ASILB_APPLHandle = osThreadNew(ASILB_APPL_OS_TASK, NULL, &ASILB_APPL_attributes);

  /* creation of ASILC_APPL */
  ASILC_APPLHandle = osThreadNew(ASILC_APPL_OS_TASK, NULL, &ASILC_APPL_attributes);

  /* creation of QM_APPL */
  QM_APPLHandle = osThreadNew(QM_APPL_OS_TASK, NULL, &QM_APPL_attributes);

  /* creation of ASILA_BSW */
  ASILA_BSWHandle = osThreadNew(ASILA_BSW_OS_TASK, NULL, &ASILA_BSW_attributes);

  /* creation of ASILB_BSW */
  ASILB_BSWHandle = osThreadNew(ASILB_BSW_OS_TASK, NULL, &ASILB_BSW_attributes);

  /* creation of ASILC_BSW */
  ASILC_BSWHandle = osThreadNew(ASILC_BSW_OS_TASK, NULL, &ASILC_BSW_attributes);

  /* creation of QM_BSW */
  QM_BSWHandle = osThreadNew(QM_BSW_OS_TASK, NULL, &QM_BSW_attributes);

  /* creation of OS_RuntimeMonitor */
  OS_RuntimeMonitorHandle = osThreadNew(OS_RuntimeMonitor_OS_TASK, NULL, &OS_RuntimeMonitor_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}

/* USER CODE BEGIN Header_ASILA_APPL_OS_TASK */
/**
  * @brief  Function implementing the ASILA_APPL thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ASILA_APPL_OS_TASK */
void ASILA_APPL_OS_TASK(void *argument)
{
  /* USER CODE BEGIN ASILA_APPL_OS_TASK */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
  }
  /* USER CODE END ASILA_APPL_OS_TASK */
}

/* USER CODE BEGIN Header_ASILB_APPL_OS_TASK */
/**
* @brief Function implementing the ASILB_APPL thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ASILB_APPL_OS_TASK */
void ASILB_APPL_OS_TASK(void *argument)
{
  /* USER CODE BEGIN ASILB_APPL_OS_TASK */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
  }
  /* USER CODE END ASILB_APPL_OS_TASK */
}

/* USER CODE BEGIN Header_ASILC_APPL_OS_TASK */
/**
* @brief Function implementing the ASILC_APPL thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ASILC_APPL_OS_TASK */
void ASILC_APPL_OS_TASK(void *argument)
{
  /* USER CODE BEGIN ASILC_APPL_OS_TASK */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
  }
  /* USER CODE END ASILC_APPL_OS_TASK */
}

/* USER CODE BEGIN Header_QM_APPL_OS_TASK */
/**
* @brief Function implementing the QM_APPL thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_QM_APPL_OS_TASK */
void QM_APPL_OS_TASK(void *argument)
{
  /* USER CODE BEGIN QM_APPL_OS_TASK */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
  }
  /* USER CODE END QM_APPL_OS_TASK */
}

/* USER CODE BEGIN Header_ASILA_BSW_OS_TASK */
/**
* @brief Function implementing the ASILA_BSW thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ASILA_BSW_OS_TASK */
void ASILA_BSW_OS_TASK(void *argument)
{
  /* USER CODE BEGIN ASILA_BSW_OS_TASK */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
  }
  /* USER CODE END ASILA_BSW_OS_TASK */
}

/* USER CODE BEGIN Header_ASILB_BSW_OS_TASK */
/**
* @brief Function implementing the ASILB_BSW thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ASILB_BSW_OS_TASK */
void ASILB_BSW_OS_TASK(void *argument)
{
  /* USER CODE BEGIN ASILB_BSW_OS_TASK */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
  }
  /* USER CODE END ASILB_BSW_OS_TASK */
}

/* USER CODE BEGIN Header_ASILC_BSW_OS_TASK */
/**
* @brief Function implementing the ASILC_BSW thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ASILC_BSW_OS_TASK */
void ASILC_BSW_OS_TASK(void *argument)
{
  /* USER CODE BEGIN ASILC_BSW_OS_TASK */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
  }
  /* USER CODE END ASILC_BSW_OS_TASK */
}

/* USER CODE BEGIN Header_QM_BSW_OS_TASK */
/**
* @brief Function implementing the QM_BSW thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_QM_BSW_OS_TASK */
void QM_BSW_OS_TASK(void *argument)
{
  /* USER CODE BEGIN QM_BSW_OS_TASK */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
  }
  /* USER CODE END QM_BSW_OS_TASK */
}

/* USER CODE BEGIN Header_OS_RuntimeMonitor_OS_TASK */
/**
* @brief Function implementing the OS_RuntimeMonitor thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_OS_RuntimeMonitor_OS_TASK */
void OS_RuntimeMonitor_OS_TASK(void *argument)
{
  /* USER CODE BEGIN OS_RuntimeMonitor_OS_TASK */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
  }
  /* USER CODE END OS_RuntimeMonitor_OS_TASK */
}

/* Alarm5ms_ASILA_APPL_Callback function */
void Alarm5ms_ASILA_APPL_Callback(void *argument)
{
  /* USER CODE BEGIN Alarm5ms_ASILA_APPL_Callback */

  /* USER CODE END Alarm5ms_ASILA_APPL_Callback */
}

/* Alarm5ms_ASILB_APPL_Callback function */
void Alarm5ms_ASILB_APPL_Callback(void *argument)
{
  /* USER CODE BEGIN Alarm5ms_ASILB_APPL_Callback */

  /* USER CODE END Alarm5ms_ASILB_APPL_Callback */
}

/* Alarm5ms_ASILC_APPL_Callback function */
void Alarm5ms_ASILC_APPL_Callback(void *argument)
{
  /* USER CODE BEGIN Alarm5ms_ASILC_APPL_Callback */

  /* USER CODE END Alarm5ms_ASILC_APPL_Callback */
}

/* Alarm5ms_QM_APPL_Callback function */
void Alarm5ms_QM_APPL_Callback(void *argument)
{
  /* USER CODE BEGIN Alarm5ms_QM_APPL_Callback */

  /* USER CODE END Alarm5ms_QM_APPL_Callback */
}

/* Alarm5ms_ASILA_BSW_Callback function */
void Alarm5ms_ASILA_BSW_Callback(void *argument)
{
  /* USER CODE BEGIN Alarm5ms_ASILA_BSW_Callback */

  /* USER CODE END Alarm5ms_ASILA_BSW_Callback */
}

/* Alarm5ms_ASILB_BSW_Callback function */
void Alarm5ms_ASILB_BSW_Callback(void *argument)
{
  /* USER CODE BEGIN Alarm5ms_ASILB_BSW_Callback */

  /* USER CODE END Alarm5ms_ASILB_BSW_Callback */
}

/* Alarm5ms_ASILC_BSW_Callback function */
void Alarm5ms_ASILC_BSW_Callback(void *argument)
{
  /* USER CODE BEGIN Alarm5ms_ASILC_BSW_Callback */

  /* USER CODE END Alarm5ms_ASILC_BSW_Callback */
}

/* Alarm5ms_QM_BSW_Callback function */
void Alarm5ms_QM_BSW_Callback(void *argument)
{
  /* USER CODE BEGIN Alarm5ms_QM_BSW_Callback */

  /* USER CODE END Alarm5ms_QM_BSW_Callback */
}

/* Alarm10ms_ASILA_APPL_Callback function */
void Alarm10ms_ASILA_APPL_Callback(void *argument)
{
  /* USER CODE BEGIN Alarm10ms_ASILA_APPL_Callback */

  /* USER CODE END Alarm10ms_ASILA_APPL_Callback */
}

/* Alarm10ms_ASILB_APPL_Callback function */
void Alarm10ms_ASILB_APPL_Callback(void *argument)
{
  /* USER CODE BEGIN Alarm10ms_ASILB_APPL_Callback */

  /* USER CODE END Alarm10ms_ASILB_APPL_Callback */
}

/* Alarm10ms_ASILC_APPL_Callback function */
void Alarm10ms_ASILC_APPL_Callback(void *argument)
{
  /* USER CODE BEGIN Alarm10ms_ASILC_APPL_Callback */

  /* USER CODE END Alarm10ms_ASILC_APPL_Callback */
}

/* Alarm10ms_QM_APPL_Callback function */
void Alarm10ms_QM_APPL_Callback(void *argument)
{
  /* USER CODE BEGIN Alarm10ms_QM_APPL_Callback */

  /* USER CODE END Alarm10ms_QM_APPL_Callback */
}

/* Alarm10ms_QM_BSW_Callback function */
void Alarm10ms_QM_BSW_Callback(void *argument)
{
  /* USER CODE BEGIN Alarm10ms_QM_BSW_Callback */

  /* USER CODE END Alarm10ms_QM_BSW_Callback */
}

/* Alarm10ms_ASILA_BSW_Callback function */
void Alarm10ms_ASILA_BSW_Callback(void *argument)
{
  /* USER CODE BEGIN Alarm10ms_ASILA_BSW_Callback */

  /* USER CODE END Alarm10ms_ASILA_BSW_Callback */
}

/* Alarm10ms_ASILB_BSW_Callback function */
void Alarm10ms_ASILB_BSW_Callback(void *argument)
{
  /* USER CODE BEGIN Alarm10ms_ASILB_BSW_Callback */

  /* USER CODE END Alarm10ms_ASILB_BSW_Callback */
}

/* Alarm10ms_ASILC_BSW_Callback function */
void Alarm10ms_ASILC_BSW_Callback(void *argument)
{
  /* USER CODE BEGIN Alarm10ms_ASILC_BSW_Callback */

  /* USER CODE END Alarm10ms_ASILC_BSW_Callback */
}

/* Alarm100ms_QM_APPL_Callback function */
void Alarm100ms_QM_APPL_Callback(void *argument)
{
  /* USER CODE BEGIN Alarm100ms_QM_APPL_Callback */

  /* USER CODE END Alarm100ms_QM_APPL_Callback */
}

/* Alarm100ms_QM_BSW_Callback function */
void Alarm100ms_QM_BSW_Callback(void *argument)
{
  /* USER CODE BEGIN Alarm100ms_QM_BSW_Callback */

  /* USER CODE END Alarm100ms_QM_BSW_Callback */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

/* USER CODE END Application */

