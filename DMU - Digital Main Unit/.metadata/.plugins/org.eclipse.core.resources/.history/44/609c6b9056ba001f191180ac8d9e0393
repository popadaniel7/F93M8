#include "Nvm.h"
#include "cmsis_os.h"
#include <stdbool.h>
#include "spi.h"

void HAL_Delay_Callout(uint32 delay);
void HAL_Delay_Callout(uint32 delay)
{
	HAL_Delay(delay);
}
#define Nvm_W25Q16_DUMMY_BYTE 0xA5
#define Nvm_W25Q16_Delay(delay) HAL_Delay_Callout(delay)
#define Nvm_W25Q16_SPI hspi1
#define Nvm_W25Q16_CS_GPIO NVMWQ2516_CHIPSELECT_GPIO_Port
#define Nvm_W25Q16_CS_PIN NVMWQ2516_CHIPSELECT_Pin
__attribute__((section(".ccmram"))) Nvm_W25Q16_t Nvm_W25Q16;
__attribute__((section(".ccmram"))) uint32 Nvm_MainCounter = 0;
__attribute__((section(".ccmram"))) uint8 Nvm_WriteAllPending = 0;
__attribute__((section(".ccmram"))) uint8 Nvm_ReadAllPending = 0;
__attribute__((section(".ccmram"))) uint8 Nvm_DataRecorder_CommonBlock[10] = {0};
__attribute__((section(".ccmram"))) uint32 Nvm_SpiStatus = 0;;
__attribute__((section(".ccmram"))) bool Nvm_Init_Status = 0;
__attribute__((section(".ccmram"))) uint8 Nvm_CodingData_GTEDisplay = 0;
__attribute__((section(".ccmram"))) uint8 Nvm_CodingData_VehicleType = 0;
__attribute__((section(".ccmram"))) uint8 Nvm_CodingData_RefreshRate = 0;
__attribute__((section(".ccmram"))) uint8 Nvm_CodingData[2] = {0};
extern __attribute__((section(".ccmram"))) uint8 DigitalCluster_CodingData_GTEDisplay;
extern __attribute__((section(".ccmram"))) uint8 DataRecorder_CcmCounter[39];
extern __attribute__((section(".ccmram"))) uint8 DataRecorder_AvgLowVoltageBattery;
extern __attribute__((section(".ccmram"))) uint8 DataRecorder_KilometerTotal;
extern __attribute__((section(".ccmram"))) uint8 DataRecorder_KilometerPerDcy;
extern __attribute__((section(".ccmram"))) uint8 DataRecorder_NumberOfDcy;
extern __attribute__((section(".ccmram"))) uint8 DataRecorder_MaxCurrentConsumptionLV;
extern __attribute__((section(".ccmram"))) uint8 DataRecorder_MinCurrentConsumptionLV;
extern __attribute__((section(".ccmram"))) uint8 DataRecorder_AvgCurrentConsumptionLV;
extern __attribute__((section(".ccmram"))) uint8 DataRecorder_DisplaySelfTestStatus;
extern __attribute__((section(".ccmram"))) uint8 DataRecorder_ReverseCameraStatus;
extern __attribute__((section(".ccmram"))) uint8 DataRecorder_McuTemperature;
extern __attribute__((section(".ccmram"))) uint8 DataRecorder_BackupBatteryStatus;
extern __attribute__((section(".ccmram"))) uint8 DataRecorder_ResetCounter[20];
extern SPI_HandleTypeDef hspi1;

void Nvm_MainFunction(void);
bool Nvm_W25Q16_Init(void);
void Nvm_W25Q16_EraseChip(void);
void Nvm_W25Q16_EraseSector(uint32 SectorAddr);
void Nvm_W25Q16_EraseBlock(uint32 BlockAddr);
uint32 Nvm_W25Q16_PageToSector(uint32 PageAddress);
uint32 Nvm_W25Q16_PageToBlock(uint32 PageAddress);
uint32 Nvm_W25Q16_SectorToBlock(uint32 SectorAddress);
uint32 Nvm_W25Q16_SectorToPage(uint32 SectorAddress);
uint32 Nvm_W25Q16_BlockToPage(uint32 BlockAddress);
bool Nvm_W25Q16_IsEmptyPage(uint32 Page_Address, uint32 OffsetInByte, uint32 NumByteToCheck_up_to_PageSize);
bool Nvm_W25Q16_IsEmptySector(uint32 Sector_Address, uint32 OffsetInByte, uint32 NumByteToCheck_up_to_SectorSize);
bool Nvm_W25Q16_IsEmptyBlock(uint32 Block_Address, uint32 OffsetInByte, uint32 NumByteToCheck_up_to_BlockSize);
void Nvm_W25Q16_WriteByte(uint8 pBuffer, uint32 Bytes_Address);
void Nvm_W25Q16_WritePage(uint8 * pBuffer, uint32 Page_Address, uint32 OffsetInByte, uint32 NumByteToWrite_up_to_PageSize);
void Nvm_W25Q16_WriteSector(uint8 * pBuffer, uint32 Sector_Address, uint32 OffsetInByte, uint32 NumByteToWrite_up_to_SectorSize);
void Nvm_W25Q16_WriteBlock(uint8 * pBuffer, uint32 Block_Address, uint32 OffsetInByte, uint32 NumByteToWrite_up_to_BlockSize);
void Nvm_W25Q16_ReadByte(uint8 * pBuffer, uint32 Bytes_Address);
void Nvm_W25Q16_ReadBytes(uint8 * pBuffer, uint32 ReadAddr, uint32 NumByteToRead);
void Nvm_W25Q16_ReadPage(uint8 * pBuffer, uint32 Page_Address, uint32 OffsetInByte, uint32 NumByteToRead_up_to_PageSize);
void Nvm_W25Q16_ReadSector(uint8 * pBuffer, uint32 Sector_Address, uint32 OffsetInByte, uint32 NumByteToRead_up_to_SectorSize);
void Nvm_W25Q16_ReadBlock(uint8 * pBuffer, uint32 Block_Address, uint32 OffsetInByte, uint32 NumByteToRead_up_to_BlockSize);

uint8 Nvm_W25Q16_Spi(uint8 Data)
{
	uint8 ret = 0;
	HAL_SPI_TransmitReceive(&Nvm_W25Q16_SPI, &Data, &ret, 1, 7000);
	return ret;
}
uint32 Nvm_W25Q16_ReadID(void)
{
	uint32 Temp = 0;
	uint32 Temp0 = 0;
	uint32 Temp1 = 0;
	uint32 Temp2 = 0;
	HAL_GPIO_WritePin(Nvm_W25Q16_CS_GPIO, Nvm_W25Q16_CS_PIN, GPIO_PIN_RESET);
	Nvm_W25Q16_Spi(0x9F);
	Temp0 = Nvm_W25Q16_Spi(Nvm_W25Q16_DUMMY_BYTE);
	Temp1 = Nvm_W25Q16_Spi(Nvm_W25Q16_DUMMY_BYTE);
	Temp2 = Nvm_W25Q16_Spi(Nvm_W25Q16_DUMMY_BYTE);
	HAL_GPIO_WritePin(Nvm_W25Q16_CS_GPIO, Nvm_W25Q16_CS_PIN, GPIO_PIN_SET);
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
	return Temp;
}
void Nvm_W25Q16_ReadUniqID(void)
{
	HAL_GPIO_WritePin(Nvm_W25Q16_CS_GPIO, Nvm_W25Q16_CS_PIN, GPIO_PIN_RESET);
	Nvm_W25Q16_Spi(0x4B);
	for (uint8 i = 0; i < 4; i++) Nvm_W25Q16_Spi(Nvm_W25Q16_DUMMY_BYTE);
	for (uint8 i = 0; i < 8; i++) Nvm_W25Q16.UniqID[i] = Nvm_W25Q16_Spi(Nvm_W25Q16_DUMMY_BYTE);
	HAL_GPIO_WritePin(Nvm_W25Q16_CS_GPIO, Nvm_W25Q16_CS_PIN, GPIO_PIN_SET);
}
void Nvm_W25Q16_WriteEnable(void)
{
	HAL_GPIO_WritePin(Nvm_W25Q16_CS_GPIO, Nvm_W25Q16_CS_PIN, GPIO_PIN_RESET);
	Nvm_W25Q16_Spi(0x06);
	HAL_GPIO_WritePin(Nvm_W25Q16_CS_GPIO, Nvm_W25Q16_CS_PIN, GPIO_PIN_SET);
	Nvm_W25Q16_Delay(1);
}
void Nvm_W25Q16_WriteDisable(void)
{
	HAL_GPIO_WritePin(Nvm_W25Q16_CS_GPIO, Nvm_W25Q16_CS_PIN, GPIO_PIN_RESET);
	Nvm_W25Q16_Spi(0x04);
	HAL_GPIO_WritePin(Nvm_W25Q16_CS_GPIO, Nvm_W25Q16_CS_PIN, GPIO_PIN_SET);
	Nvm_W25Q16_Delay(1);
}
uint8 Nvm_W25Q16_ReadStatusRegister(uint8 SelectStatusRegister_1_2_3)
{
	uint8 status = 0;
	HAL_GPIO_WritePin(Nvm_W25Q16_CS_GPIO, Nvm_W25Q16_CS_PIN, GPIO_PIN_RESET);
	if(1 == SelectStatusRegister_1_2_3)
	{
		Nvm_W25Q16_Spi(0x05);
		status = Nvm_W25Q16_Spi(Nvm_W25Q16_DUMMY_BYTE);
		Nvm_W25Q16.StatusRegister1 = status;
	}
	else if(2 == SelectStatusRegister_1_2_3)
	{
		Nvm_W25Q16_Spi(0x35);
		status = Nvm_W25Q16_Spi(Nvm_W25Q16_DUMMY_BYTE);
		Nvm_W25Q16.StatusRegister2 = status;
	}
	else
	{
		Nvm_W25Q16_Spi(0x15);
		status = Nvm_W25Q16_Spi(Nvm_W25Q16_DUMMY_BYTE);
		Nvm_W25Q16.StatusRegister3 = status;
	}
	HAL_GPIO_WritePin(Nvm_W25Q16_CS_GPIO, Nvm_W25Q16_CS_PIN, GPIO_PIN_SET);
	return status;
}
void Nvm_W25Q16_WriteStatusRegister(uint8 SelectStatusRegister_1_2_3, uint8 Data)
{
	HAL_GPIO_WritePin(Nvm_W25Q16_CS_GPIO, Nvm_W25Q16_CS_PIN, GPIO_PIN_RESET);
	if(SelectStatusRegister_1_2_3 == 1)
	{
		Nvm_W25Q16_Spi(0x01);
		Nvm_W25Q16.StatusRegister1 = Data;
	}
	else if(SelectStatusRegister_1_2_3 == 2)
	{
		Nvm_W25Q16_Spi(0x31);
		Nvm_W25Q16.StatusRegister2 = Data;
	}
	else
	{
		Nvm_W25Q16_Spi(0x11);
		Nvm_W25Q16.StatusRegister3 = Data;
	}
	Nvm_W25Q16_Spi(Data);
	HAL_GPIO_WritePin(Nvm_W25Q16_CS_GPIO, Nvm_W25Q16_CS_PIN, GPIO_PIN_SET);
}
void Nvm_W25Q16_WaitForWriteEnd(void)
{
	Nvm_W25Q16_Delay(1);
	HAL_GPIO_WritePin(Nvm_W25Q16_CS_GPIO, Nvm_W25Q16_CS_PIN, GPIO_PIN_RESET);
	Nvm_W25Q16_Spi(0x05);
	do
	{
		Nvm_W25Q16.StatusRegister1 = Nvm_W25Q16_Spi(Nvm_W25Q16_DUMMY_BYTE);
		Nvm_W25Q16_Delay(1);
	} while ((Nvm_W25Q16.StatusRegister1 & 0x01) == 0x01);
	HAL_GPIO_WritePin(Nvm_W25Q16_CS_GPIO, Nvm_W25Q16_CS_PIN, GPIO_PIN_SET);
}
bool Nvm_W25Q16_Init(void)
{
	uint32 id = 0;
	Nvm_W25Q16.Lock = 1;
	HAL_GPIO_WritePin(Nvm_W25Q16_CS_GPIO, Nvm_W25Q16_CS_PIN, GPIO_PIN_SET);
	Nvm_W25Q16_Delay(100);
	id = Nvm_W25Q16_ReadID();
	switch (id & 0x0000FFFF)
	{
	case 0x401A: // 	w25q512
		Nvm_W25Q16.ID = NVM_W25Q512;
		Nvm_W25Q16.BlockCount = 1024;
		break;
	case 0x4019: // 	w25q256
		Nvm_W25Q16.ID = NVM_W25Q256;
		Nvm_W25Q16.BlockCount = 512;
		break;
	case 0x4018: // 	w25q128
		Nvm_W25Q16.ID = NVM_W25Q128;
		Nvm_W25Q16.BlockCount = 256;
		break;
	case 0x4017: //	w25q64
		Nvm_W25Q16.ID = NVM_W25Q64;
		Nvm_W25Q16.BlockCount = 128;
		break;
	case 0x4016: //	w25q32
		Nvm_W25Q16.ID = NVM_W25Q32;
		Nvm_W25Q16.BlockCount = 64;
		break;
	case 0x4015: //	w25q16
		Nvm_W25Q16.ID = NVM_W25Q16;
		Nvm_W25Q16.BlockCount = 32;
		break;
	case 0x4014: //	w25q80
		Nvm_W25Q16.ID = NVM_W25Q80;
		Nvm_W25Q16.BlockCount = 16;
		break;
	case 0x4013: //	w25q40
		Nvm_W25Q16.ID = NVM_W25Q40;
		Nvm_W25Q16.BlockCount = 8;
		break;
	case 0x4012: //	w25q20
		Nvm_W25Q16.ID = NVM_W25Q20;
		Nvm_W25Q16.BlockCount = 4;
		break;
	case 0x4011: //	w25q10
		Nvm_W25Q16.ID = NVM_W25Q10;
		Nvm_W25Q16.BlockCount = 2;
		break;
	default:
		Nvm_W25Q16.Lock = 0;
		return false;
	}
	Nvm_W25Q16.PageSize = 256;
	Nvm_W25Q16.SectorSize = 0x1000;
	Nvm_W25Q16.SectorCount = Nvm_W25Q16.BlockCount * 16;
	Nvm_W25Q16.PageCount = (Nvm_W25Q16.SectorCount * Nvm_W25Q16.SectorSize) / Nvm_W25Q16.PageSize;
	Nvm_W25Q16.BlockSize = Nvm_W25Q16.SectorSize * 16;
	Nvm_W25Q16.CapacityInKiloByte = (Nvm_W25Q16.SectorCount * Nvm_W25Q16.SectorSize) / 1024;
	Nvm_W25Q16_ReadUniqID();
	Nvm_W25Q16_ReadStatusRegister(1);
	Nvm_W25Q16_ReadStatusRegister(2);
	Nvm_W25Q16_ReadStatusRegister(3);
	Nvm_W25Q16.Lock = 0;
	return true;
}
void Nvm_W25Q16_EraseChip(void)
{
	while (Nvm_W25Q16.Lock == 1) Nvm_W25Q16_Delay(1);
	Nvm_W25Q16.Lock = 1;
	Nvm_W25Q16_WriteEnable();
	HAL_GPIO_WritePin(Nvm_W25Q16_CS_GPIO, Nvm_W25Q16_CS_PIN, GPIO_PIN_RESET);
	Nvm_W25Q16_Spi(0xC7);
	HAL_GPIO_WritePin(Nvm_W25Q16_CS_GPIO, Nvm_W25Q16_CS_PIN, GPIO_PIN_SET);
	Nvm_W25Q16_WaitForWriteEnd();
	Nvm_W25Q16_Delay(10);
	Nvm_W25Q16.Lock = 0;
}
void Nvm_W25Q16_EraseSector(uint32 SectorAddr)
{
	while (Nvm_W25Q16.Lock == 1) Nvm_W25Q16_Delay(1);
	Nvm_W25Q16.Lock = 1;
	Nvm_W25Q16_WaitForWriteEnd();
	SectorAddr = SectorAddr * Nvm_W25Q16.SectorSize;
	Nvm_W25Q16_WriteEnable();
	HAL_GPIO_WritePin(Nvm_W25Q16_CS_GPIO, Nvm_W25Q16_CS_PIN, GPIO_PIN_RESET);
	Nvm_W25Q16_Spi(0x20);
	if (Nvm_W25Q16.ID >= NVM_W25Q256)Nvm_W25Q16_Spi((SectorAddr & 0xFF000000) >> 24);
	else
	{
		/* Do nothing. */
	}
	Nvm_W25Q16_Spi((SectorAddr & 0xFF0000) >> 16);
	Nvm_W25Q16_Spi((SectorAddr & 0xFF00) >> 8);
	Nvm_W25Q16_Spi(SectorAddr & 0xFF);
	HAL_GPIO_WritePin(Nvm_W25Q16_CS_GPIO, Nvm_W25Q16_CS_PIN, GPIO_PIN_SET);
	Nvm_W25Q16_WaitForWriteEnd();
	Nvm_W25Q16_Delay(1);
	Nvm_W25Q16.Lock = 0;
}
void Nvm_W25Q16_EraseBlock(uint32 BlockAddr)
{
	while (Nvm_W25Q16.Lock == 1) Nvm_W25Q16_Delay(1);
	Nvm_W25Q16.Lock = 1;
	Nvm_W25Q16_WaitForWriteEnd();
	BlockAddr = BlockAddr * Nvm_W25Q16.SectorSize * 16;
	Nvm_W25Q16_WriteEnable();
	HAL_GPIO_WritePin(Nvm_W25Q16_CS_GPIO, Nvm_W25Q16_CS_PIN, GPIO_PIN_RESET);
	Nvm_W25Q16_Spi(0xD8);
	if (Nvm_W25Q16.ID >= NVM_W25Q256) Nvm_W25Q16_Spi((BlockAddr & 0xFF000000) >> 24);
	else
	{
		/* Do nothing. */
	}
	Nvm_W25Q16_Spi((BlockAddr & 0xFF0000) >> 16);
	Nvm_W25Q16_Spi((BlockAddr & 0xFF00) >> 8);
	Nvm_W25Q16_Spi(BlockAddr & 0xFF);
	HAL_GPIO_WritePin(Nvm_W25Q16_CS_GPIO, Nvm_W25Q16_CS_PIN, GPIO_PIN_SET);
	Nvm_W25Q16_WaitForWriteEnd();
	Nvm_W25Q16_Delay(1);
	Nvm_W25Q16.Lock = 0;
}
uint32 Nvm_W25Q16_PageToSector(uint32 PageAddress)
{
	return ((PageAddress * Nvm_W25Q16.PageSize) / Nvm_W25Q16.SectorSize);
}
uint32 Nvm_W25Q16_PageToBlock(uint32 PageAddress)
{
	return ((PageAddress * Nvm_W25Q16.PageSize) / Nvm_W25Q16.BlockSize);
}
uint32 Nvm_W25Q16_SectorToBlock(uint32 SectorAddress)
{
	return ((SectorAddress * Nvm_W25Q16.SectorSize) / Nvm_W25Q16.BlockSize);
}
uint32 Nvm_W25Q16_SectorToPage(uint32 SectorAddress)
{
	return (SectorAddress * Nvm_W25Q16.SectorSize) / Nvm_W25Q16.PageSize;
}
uint32 Nvm_W25Q16_BlockToPage(uint32 BlockAddress)
{
	return (BlockAddress * Nvm_W25Q16.BlockSize) / Nvm_W25Q16.PageSize;
}
bool Nvm_W25Q16_IsEmptyPage(uint32 Page_Address, uint32 OffsetInByte, uint32 NumByteToCheck_up_to_PageSize)
{
	uint8 pBuffer[32] = {0};
	uint32 WorkAddress = 0;
	uint32 i = 0;
	while (Nvm_W25Q16.Lock == 1) Nvm_W25Q16_Delay(1);
	Nvm_W25Q16.Lock = 1;
	if (((NumByteToCheck_up_to_PageSize + OffsetInByte) > Nvm_W25Q16.PageSize) || (NumByteToCheck_up_to_PageSize == 0)) NumByteToCheck_up_to_PageSize = Nvm_W25Q16.PageSize - OffsetInByte;
	else
	{
		/* Do nothing. */
	}

	for (i = OffsetInByte; i < Nvm_W25Q16.PageSize; i += sizeof(pBuffer))
	{
		HAL_GPIO_WritePin(Nvm_W25Q16_CS_GPIO, Nvm_W25Q16_CS_PIN, GPIO_PIN_RESET);
		WorkAddress = (i + Page_Address * Nvm_W25Q16.PageSize);
		Nvm_W25Q16_Spi(0x0B);
		if (Nvm_W25Q16.ID >= NVM_W25Q256) Nvm_W25Q16_Spi((WorkAddress & 0xFF000000) >> 24);
		else
		{
			/* Do nothing. */
		}
		Nvm_W25Q16_Spi((WorkAddress & 0xFF0000) >> 16);
		Nvm_W25Q16_Spi((WorkAddress & 0xFF00) >> 8);
		Nvm_W25Q16_Spi(WorkAddress & 0xFF);
		Nvm_W25Q16_Spi(0);
		HAL_SPI_Receive( & Nvm_W25Q16_SPI, pBuffer, sizeof(pBuffer), 100);
		HAL_GPIO_WritePin(Nvm_W25Q16_CS_GPIO, Nvm_W25Q16_CS_PIN, GPIO_PIN_SET);
		for (uint8 x = 0; x < sizeof(pBuffer); x++)
		{
			if (pBuffer[x] != 0xFF)
			{
				Nvm_W25Q16.Lock = 0;
				return false;
			}
			else
			{
				/* Do nothing. */
			}
		}
	}
	if ((Nvm_W25Q16.PageSize + OffsetInByte) % sizeof(pBuffer) != 0)
	{
		i -= sizeof(pBuffer);
		for (; i < Nvm_W25Q16.PageSize; i++)
		{
			HAL_GPIO_WritePin(Nvm_W25Q16_CS_GPIO, Nvm_W25Q16_CS_PIN, GPIO_PIN_RESET);
			WorkAddress = (i + Page_Address * Nvm_W25Q16.PageSize);
			Nvm_W25Q16_Spi(0x0B);
			if (Nvm_W25Q16.ID >= NVM_W25Q256) Nvm_W25Q16_Spi((WorkAddress & 0xFF000000) >> 24);
			else
			{
				/* Do nothing. */
			}
			Nvm_W25Q16_Spi((WorkAddress & 0xFF0000) >> 16);
			Nvm_W25Q16_Spi((WorkAddress & 0xFF00) >> 8);
			Nvm_W25Q16_Spi(WorkAddress & 0xFF);
			Nvm_W25Q16_Spi(0);
			HAL_SPI_Receive(&Nvm_W25Q16_SPI, pBuffer, 1, 100);
			HAL_GPIO_WritePin(Nvm_W25Q16_CS_GPIO, Nvm_W25Q16_CS_PIN, GPIO_PIN_SET);
			if (pBuffer[0] != 0xFF)
			{
				Nvm_W25Q16.Lock = 0;
				return false;
			}
			else
			{
				/* Do nothing. */
			}
		}
	}
	else
	{
		/* Do nothing. */
	}
	Nvm_W25Q16.Lock = 0;
	return true;
}
bool Nvm_W25Q16_IsEmptySector(uint32 Sector_Address, uint32 OffsetInByte, uint32 NumByteToCheck_up_to_SectorSize)
{
	uint8 pBuffer[32] = {0};
	uint32 WorkAddress = 0;
	uint32 i = 0;
	while (Nvm_W25Q16.Lock == 1) Nvm_W25Q16_Delay(1);
	Nvm_W25Q16.Lock = 1;
	if ((NumByteToCheck_up_to_SectorSize > Nvm_W25Q16.SectorSize) || (NumByteToCheck_up_to_SectorSize == 0)) NumByteToCheck_up_to_SectorSize = Nvm_W25Q16.SectorSize;
	else
	{
		/* Do nothing. */
	}
	for (i = OffsetInByte; i < Nvm_W25Q16.SectorSize; i += sizeof(pBuffer))
	{
		HAL_GPIO_WritePin(Nvm_W25Q16_CS_GPIO, Nvm_W25Q16_CS_PIN, GPIO_PIN_RESET);
		WorkAddress = (i + Sector_Address * Nvm_W25Q16.SectorSize);
		Nvm_W25Q16_Spi(0x0B);
		if (Nvm_W25Q16.ID >= NVM_W25Q256) Nvm_W25Q16_Spi((WorkAddress & 0xFF000000) >> 24);
		else
		{
			/* Do nothing. */
		}
		Nvm_W25Q16_Spi((WorkAddress & 0xFF0000) >> 16);
		Nvm_W25Q16_Spi((WorkAddress & 0xFF00) >> 8);
		Nvm_W25Q16_Spi(WorkAddress & 0xFF);
		Nvm_W25Q16_Spi(0);
		HAL_SPI_Receive(&Nvm_W25Q16_SPI, pBuffer, sizeof(pBuffer), 100);
		HAL_GPIO_WritePin(Nvm_W25Q16_CS_GPIO, Nvm_W25Q16_CS_PIN, GPIO_PIN_SET);
		for (uint8_t x = 0; x < sizeof(pBuffer); x++)
		{
			if (pBuffer[x] != 0xFF)
			{
				Nvm_W25Q16.Lock = 0;
				return false;
			}
			else
			{
				/* Do nothing. */
			}
		}
	}
	if ((Nvm_W25Q16.SectorSize + OffsetInByte) % sizeof(pBuffer) != 0)
	{
		i -= sizeof(pBuffer);
		for (; i < Nvm_W25Q16.SectorSize; i++)
		{
			HAL_GPIO_WritePin(Nvm_W25Q16_CS_GPIO, Nvm_W25Q16_CS_PIN, GPIO_PIN_RESET);
			WorkAddress = (i + Sector_Address * Nvm_W25Q16.SectorSize);
			Nvm_W25Q16_Spi(0x0B);
			if (Nvm_W25Q16.ID >= NVM_W25Q256) Nvm_W25Q16_Spi((WorkAddress & 0xFF000000) >> 24);
			else
			{
				/* Do nothing. */
			}
			Nvm_W25Q16_Spi((WorkAddress & 0xFF0000) >> 16);
			Nvm_W25Q16_Spi((WorkAddress & 0xFF00) >> 8);
			Nvm_W25Q16_Spi(WorkAddress & 0xFF);
			Nvm_W25Q16_Spi(0);
			HAL_SPI_Receive(&Nvm_W25Q16_SPI, pBuffer, 1, 100);
			HAL_GPIO_WritePin(Nvm_W25Q16_CS_GPIO, Nvm_W25Q16_CS_PIN, GPIO_PIN_SET);
			if (pBuffer[0] != 0xFF)
			{
				Nvm_W25Q16.Lock = 0;
				return false;
			}
			else
			{
				/* Do nothing. */
			}
		}
	}
	else
	{
		/* Do nothing. */
	}
	Nvm_W25Q16.Lock = 0;
	return true;
}
bool Nvm_W25Q16_IsEmptyBlock(uint32 Block_Address, uint32 OffsetInByte, uint32 NumByteToCheck_up_to_BlockSize)
{
	uint8 pBuffer[32] = {0};
	uint32 WorkAddress = 0;
	uint32 i = 0;
	while (Nvm_W25Q16.Lock == 1) Nvm_W25Q16_Delay(1);
	Nvm_W25Q16.Lock = 1;
	if((NumByteToCheck_up_to_BlockSize > Nvm_W25Q16.BlockSize) || (NumByteToCheck_up_to_BlockSize == 0)) NumByteToCheck_up_to_BlockSize = Nvm_W25Q16.BlockSize;
	else
	{
		/* Do nothing. */
	}
	for (i = OffsetInByte; i < Nvm_W25Q16.BlockSize; i += sizeof(pBuffer))
	{
		HAL_GPIO_WritePin(Nvm_W25Q16_CS_GPIO, Nvm_W25Q16_CS_PIN, GPIO_PIN_RESET);
		WorkAddress = (i + Block_Address * Nvm_W25Q16.BlockSize);
		Nvm_W25Q16_Spi(0x0B);
		if (Nvm_W25Q16.ID >= NVM_W25Q256) Nvm_W25Q16_Spi((WorkAddress & 0xFF000000) >> 24);
		else
		{
			/* Do nothing. */
		}
		Nvm_W25Q16_Spi((WorkAddress & 0xFF0000) >> 16);
		Nvm_W25Q16_Spi((WorkAddress & 0xFF00) >> 8);
		Nvm_W25Q16_Spi(WorkAddress & 0xFF);
		Nvm_W25Q16_Spi(0);
		HAL_SPI_Receive(&Nvm_W25Q16_SPI, pBuffer, sizeof(pBuffer), 100);
		HAL_GPIO_WritePin(Nvm_W25Q16_CS_GPIO, Nvm_W25Q16_CS_PIN, GPIO_PIN_SET);
		for (uint8 x = 0; x < sizeof(pBuffer); x++)
		{
			if (pBuffer[x] != 0xFF)
			{
				Nvm_W25Q16.Lock = 0;
				return false;
			}
			else
			{
				/* Do nothing. */
			}
		}
	}
	if ((Nvm_W25Q16.BlockSize + OffsetInByte) % sizeof(pBuffer) != 0)
	{
		i -= sizeof(pBuffer);
		for (; i < Nvm_W25Q16.BlockSize; i++)
		{
			HAL_GPIO_WritePin(Nvm_W25Q16_CS_GPIO, Nvm_W25Q16_CS_PIN, GPIO_PIN_RESET);
			WorkAddress = (i + Block_Address * Nvm_W25Q16.BlockSize);
			Nvm_W25Q16_Spi(0x0B);
			if (Nvm_W25Q16.ID >= NVM_W25Q256) Nvm_W25Q16_Spi((WorkAddress & 0xFF000000) >> 24);
			else
			{
				/* Do nothing. */
			}
			Nvm_W25Q16_Spi((WorkAddress & 0xFF0000) >> 16);
			Nvm_W25Q16_Spi((WorkAddress & 0xFF00) >> 8);
			Nvm_W25Q16_Spi(WorkAddress & 0xFF);
			Nvm_W25Q16_Spi(0);
			HAL_SPI_Receive(&Nvm_W25Q16_SPI, pBuffer, 1, 100);
			HAL_GPIO_WritePin(Nvm_W25Q16_CS_GPIO, Nvm_W25Q16_CS_PIN, GPIO_PIN_SET);
			if (pBuffer[0] != 0xFF)
			{
				Nvm_W25Q16.Lock = 0;
				return false;
			}
			else
			{
				/* Do nothing. */
			}
		}
	}
	else
	{
		/* Do nothing. */
	}
	Nvm_W25Q16.Lock = 0;
	return true;
}

void Nvm_W25Q16_WriteByte(uint8 pBuffer, uint32 WriteAddr_inBytes)
{
	while (Nvm_W25Q16.Lock == 1) Nvm_W25Q16_Delay(1);
	Nvm_W25Q16.Lock = 1;
	Nvm_W25Q16_WaitForWriteEnd();
	Nvm_W25Q16_WriteEnable();
	HAL_GPIO_WritePin(Nvm_W25Q16_CS_GPIO, Nvm_W25Q16_CS_PIN, GPIO_PIN_RESET);
	Nvm_W25Q16_Spi(0x02);
	if (Nvm_W25Q16.ID >= NVM_W25Q256) Nvm_W25Q16_Spi((WriteAddr_inBytes & 0xFF000000) >> 24);
	else
	{
		/* Do nothing. */
	}
	Nvm_W25Q16_Spi((WriteAddr_inBytes & 0xFF0000) >> 16);
	Nvm_W25Q16_Spi((WriteAddr_inBytes & 0xFF00) >> 8);
	Nvm_W25Q16_Spi(WriteAddr_inBytes & 0xFF);
	Nvm_W25Q16_Spi(pBuffer);
	HAL_GPIO_WritePin(Nvm_W25Q16_CS_GPIO, Nvm_W25Q16_CS_PIN, GPIO_PIN_SET);
	Nvm_W25Q16_WaitForWriteEnd();
	Nvm_W25Q16.Lock = 0;
}
void Nvm_W25Q16_WritePage(uint8* pBuffer, uint32 Page_Address, uint32 OffsetInByte, uint32 NumByteToWrite_up_to_PageSize)
{
	while (Nvm_W25Q16.Lock == 1) Nvm_W25Q16_Delay(1);
	Nvm_W25Q16.Lock = 1;
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > Nvm_W25Q16.PageSize) || (NumByteToWrite_up_to_PageSize == 0)) NumByteToWrite_up_to_PageSize = Nvm_W25Q16.PageSize - OffsetInByte;
	else
	{
		/* Do nothing. */
	}
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > Nvm_W25Q16.PageSize) NumByteToWrite_up_to_PageSize = Nvm_W25Q16.PageSize - OffsetInByte;
	else
	{
		/* Do nothing. */
	}
	Nvm_W25Q16_WaitForWriteEnd();
	Nvm_W25Q16_WriteEnable();
	HAL_GPIO_WritePin(Nvm_W25Q16_CS_GPIO, Nvm_W25Q16_CS_PIN, GPIO_PIN_RESET);
	Nvm_W25Q16_Spi(0x02);
	Page_Address = (Page_Address * Nvm_W25Q16.PageSize) + OffsetInByte;
	if (Nvm_W25Q16.ID >= NVM_W25Q256) Nvm_W25Q16_Spi((Page_Address & 0xFF000000) >> 24);
	else
	{
		/* Do nothing. */
	}
	Nvm_W25Q16_Spi((Page_Address & 0xFF0000) >> 16);
	Nvm_W25Q16_Spi((Page_Address & 0xFF00) >> 8);
	Nvm_W25Q16_Spi(Page_Address & 0xFF);
	HAL_SPI_Transmit(&Nvm_W25Q16_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
	HAL_GPIO_WritePin(Nvm_W25Q16_CS_GPIO, Nvm_W25Q16_CS_PIN, GPIO_PIN_SET);
	Nvm_W25Q16_WaitForWriteEnd();
	Nvm_W25Q16_Delay(1);
	Nvm_W25Q16.Lock = 0;
}
void Nvm_W25Q16_WriteSector(uint8* pBuffer, uint32 Sector_Address, uint32 OffsetInByte, uint32 NumByteToWrite_up_to_SectorSize)
{
	uint32 StartPage = 0;
	uint32 BytesToWrite = 0;
	uint32 LocalOffset = 0;
	if((NumByteToWrite_up_to_SectorSize > Nvm_W25Q16.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0)) NumByteToWrite_up_to_SectorSize = Nvm_W25Q16.SectorSize;
	else
	{
		/* Do nothing. */
	}
	if(OffsetInByte >= Nvm_W25Q16.SectorSize) return;
	else
	{
		/* Do nothing. */
	}
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > Nvm_W25Q16.SectorSize) BytesToWrite = Nvm_W25Q16.SectorSize - OffsetInByte;
	else BytesToWrite = NumByteToWrite_up_to_SectorSize;
	StartPage = Nvm_W25Q16_SectorToPage(Sector_Address) + (OffsetInByte / Nvm_W25Q16.PageSize);
	LocalOffset = OffsetInByte % Nvm_W25Q16.PageSize;
	do
	{
		Nvm_W25Q16_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
		StartPage++;
		BytesToWrite -= Nvm_W25Q16.PageSize - LocalOffset;
		pBuffer += Nvm_W25Q16.PageSize - LocalOffset;
		LocalOffset = 0;
	}while(BytesToWrite > 0);
}
void Nvm_W25Q16_WriteBlock(uint8* pBuffer, uint32 Block_Address, uint32 OffsetInByte, uint32 NumByteToWrite_up_to_BlockSize)
{
	uint32 StartPage = 0;
	uint32 BytesToWrite = 0;
	uint32 LocalOffset = 0;
	if ((NumByteToWrite_up_to_BlockSize > Nvm_W25Q16.BlockSize) || (NumByteToWrite_up_to_BlockSize == 0)) NumByteToWrite_up_to_BlockSize = Nvm_W25Q16.BlockSize;
	else
	{
		/* Do nothing. */
	}
	if (OffsetInByte >= Nvm_W25Q16.BlockSize) return;
	else
	{
		/* Do nothing. */
	}
	if ((OffsetInByte + NumByteToWrite_up_to_BlockSize) > Nvm_W25Q16.BlockSize) BytesToWrite = Nvm_W25Q16.BlockSize - OffsetInByte;
	else BytesToWrite = NumByteToWrite_up_to_BlockSize;
	StartPage = Nvm_W25Q16_BlockToPage(Block_Address) + (OffsetInByte / Nvm_W25Q16.PageSize);
	LocalOffset = OffsetInByte % Nvm_W25Q16.PageSize;
	//	do
	//	{
	Nvm_W25Q16_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
	//		StartPage++;
	//		BytesToWrite -= Nvm_W25Q16.PageSize - LocalOffset;
	//		pBuffer += Nvm_W25Q16.PageSize - LocalOffset;
	//		LocalOffset = 0;
	//	}while(BytesToWrite > 0);
	/* Above lines were commented.
	 * Because code logic was reading too much than actually given as input.
	 * */
}
void Nvm_W25Q16_ReadByte(uint8* pBuffer, uint32 Bytes_Address)
{
	while (Nvm_W25Q16.Lock == 1) Nvm_W25Q16_Delay(1);
	Nvm_W25Q16.Lock = 1;
	HAL_GPIO_WritePin(Nvm_W25Q16_CS_GPIO, Nvm_W25Q16_CS_PIN, GPIO_PIN_RESET);
	Nvm_W25Q16_Spi(0x0B);
	if (Nvm_W25Q16.ID >= NVM_W25Q256) Nvm_W25Q16_Spi((Bytes_Address & 0xFF000000) >> 24);
	else
	{
		/* Do nothing. */
	}
	Nvm_W25Q16_Spi((Bytes_Address & 0xFF0000) >> 16);
	Nvm_W25Q16_Spi((Bytes_Address & 0xFF00) >> 8);
	Nvm_W25Q16_Spi(Bytes_Address & 0xFF);
	Nvm_W25Q16_Spi(0);
	*pBuffer = Nvm_W25Q16_Spi(Nvm_W25Q16_DUMMY_BYTE);
	HAL_GPIO_WritePin(Nvm_W25Q16_CS_GPIO, Nvm_W25Q16_CS_PIN, GPIO_PIN_SET);
	Nvm_W25Q16.Lock = 0;
}
void Nvm_W25Q16_ReadBytes(uint8* pBuffer, uint32 ReadAddr, uint32 NumByteToRead)
{
	while (Nvm_W25Q16.Lock == 1) Nvm_W25Q16_Delay(1);
	Nvm_W25Q16.Lock = 1;
	HAL_GPIO_WritePin(Nvm_W25Q16_CS_GPIO, Nvm_W25Q16_CS_PIN, GPIO_PIN_RESET);
	Nvm_W25Q16_Spi(0x0B);
	if (Nvm_W25Q16.ID >= NVM_W25Q256) Nvm_W25Q16_Spi((ReadAddr & 0xFF000000) >> 24);
	else
	{
		/* Do nothing. */
	}
	Nvm_W25Q16_Spi((ReadAddr & 0xFF0000) >> 16);
	Nvm_W25Q16_Spi((ReadAddr & 0xFF00) >> 8);
	Nvm_W25Q16_Spi(ReadAddr & 0xFF);
	Nvm_W25Q16_Spi(0);
	HAL_SPI_Receive(&Nvm_W25Q16_SPI, pBuffer, NumByteToRead, 2000);
	HAL_GPIO_WritePin(Nvm_W25Q16_CS_GPIO, Nvm_W25Q16_CS_PIN, GPIO_PIN_SET);
	Nvm_W25Q16_Delay(1);
	Nvm_W25Q16.Lock = 0;
}
void Nvm_W25Q16_ReadPage(uint8* pBuffer, uint32 Page_Address, uint32 OffsetInByte, uint32 NumByteToRead_up_to_PageSize)
{
	while (Nvm_W25Q16.Lock == 1) 	Nvm_W25Q16_Delay(1);
	Nvm_W25Q16.Lock = 1;
	if ((NumByteToRead_up_to_PageSize > Nvm_W25Q16.PageSize) || (NumByteToRead_up_to_PageSize == 0)) NumByteToRead_up_to_PageSize = Nvm_W25Q16.PageSize;
	else
	{
		/* Do nothing. */
	}
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > Nvm_W25Q16.PageSize)NumByteToRead_up_to_PageSize = Nvm_W25Q16.PageSize - OffsetInByte;
	else
	{
		/* Do nothing. */
	}
	Page_Address = Page_Address * Nvm_W25Q16.PageSize + OffsetInByte;
	HAL_GPIO_WritePin(Nvm_W25Q16_CS_GPIO, Nvm_W25Q16_CS_PIN, GPIO_PIN_RESET);
	Nvm_W25Q16_Spi(0x0B);
	if (Nvm_W25Q16.ID >= NVM_W25Q256) Nvm_W25Q16_Spi((Page_Address & 0xFF000000) >> 24);
	else
	{
		/* Do nothing. */
	}
	Nvm_W25Q16_Spi((Page_Address & 0xFF0000) >> 16);
	Nvm_W25Q16_Spi((Page_Address & 0xFF00) >> 8);
	Nvm_W25Q16_Spi(Page_Address & 0xFF);
	Nvm_W25Q16_Spi(0);
	HAL_SPI_Receive(&Nvm_W25Q16_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
	HAL_GPIO_WritePin(Nvm_W25Q16_CS_GPIO, Nvm_W25Q16_CS_PIN, GPIO_PIN_SET);
	Nvm_W25Q16_Delay(1);
	Nvm_W25Q16.Lock = 0;
}
void Nvm_W25Q16_ReadSector(uint8* pBuffer, uint32 Sector_Address, uint32 OffsetInByte, uint32 NumByteToRead_up_to_SectorSize)
{
	uint32 StartPage = 0;
	uint32 BytesToRead = 0;
	uint32 LocalOffset = 0;
	if ((NumByteToRead_up_to_SectorSize > Nvm_W25Q16.SectorSize) || (NumByteToRead_up_to_SectorSize == 0)) NumByteToRead_up_to_SectorSize = Nvm_W25Q16.SectorSize;
	else
	{
		/* Do nothing. */
	}
	if (OffsetInByte >= Nvm_W25Q16.SectorSize) return;
	else
	{
		/* Do nothing. */
	}
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > Nvm_W25Q16.SectorSize) BytesToRead = Nvm_W25Q16.SectorSize - OffsetInByte;
	else BytesToRead = NumByteToRead_up_to_SectorSize;
	StartPage = Nvm_W25Q16_SectorToPage(Sector_Address) + (OffsetInByte / Nvm_W25Q16.PageSize);
	LocalOffset = OffsetInByte % Nvm_W25Q16.PageSize;
	do
	{
		Nvm_W25Q16_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
		StartPage++;
		BytesToRead -= Nvm_W25Q16.PageSize - LocalOffset;
		pBuffer += Nvm_W25Q16.PageSize - LocalOffset;
		LocalOffset = 0;
	}while(BytesToRead > 0);
}
void Nvm_W25Q16_ReadBlock(uint8* pBuffer, uint32 Block_Address, uint32 OffsetInByte, uint32 NumByteToRead_up_to_BlockSize)
{
	uint32 StartPage = 0;
	uint32 BytesToRead = 0;
	uint32 LocalOffset = 0;
	if ((NumByteToRead_up_to_BlockSize > Nvm_W25Q16.BlockSize) || (NumByteToRead_up_to_BlockSize == 0)) NumByteToRead_up_to_BlockSize = Nvm_W25Q16.BlockSize;
	else
	{
		/* Do nothing. */
	}
	if (OffsetInByte >= Nvm_W25Q16.BlockSize) while(1);
	else
	{
		/* Do nothing. */
	}
	if ((OffsetInByte + NumByteToRead_up_to_BlockSize) > Nvm_W25Q16.BlockSize) BytesToRead = Nvm_W25Q16.BlockSize - OffsetInByte;
	else BytesToRead = NumByteToRead_up_to_BlockSize;
	StartPage = Nvm_W25Q16_BlockToPage(Block_Address) + (OffsetInByte / Nvm_W25Q16.PageSize);
	LocalOffset = OffsetInByte % Nvm_W25Q16.PageSize;
	//	do
	//	{
	Nvm_W25Q16_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
	//		StartPage++;
	//		BytesToRead -= Nvm_W25Q16.PageSize - LocalOffset;
	//		pBuffer += Nvm_W25Q16.PageSize - LocalOffset;
	//		LocalOffset = 0;
	//	}while (BytesToRead > 0);
	/* Above lines were commented.
	 * Because code logic was reading too much than actually given as input.
	 * */
}
void Nvm_MainFunction(void)
{
	if(0 == Nvm_MainCounter) Nvm_Init_Status = Nvm_W25Q16_Init();
	else
	{
		/* Do nothing. */
	}
	if(0 == Nvm_SpiStatus)
	{
		if(1 == Nvm_ReadAllPending)
		{
			Nvm_W25Q16_ReadBlock(DataRecorder_CcmCounter,0x000000,0,39);
			Nvm_W25Q16_ReadBlock(DataRecorder_ResetCounter,0x010000,0,13);
			Nvm_W25Q16_ReadBlock(Nvm_DataRecorder_CommonBlock,0x020000,0,10);
			DataRecorder_AvgLowVoltageBattery = Nvm_DataRecorder_CommonBlock[0];
			DataRecorder_KilometerTotal = Nvm_DataRecorder_CommonBlock[1];
			DataRecorder_KilometerPerDcy = Nvm_DataRecorder_CommonBlock[2];
			DataRecorder_NumberOfDcy = Nvm_DataRecorder_CommonBlock[3];
			DataRecorder_MaxCurrentConsumptionLV = Nvm_DataRecorder_CommonBlock[4];
			DataRecorder_MinCurrentConsumptionLV = Nvm_DataRecorder_CommonBlock[5];
			DataRecorder_AvgCurrentConsumptionLV = Nvm_DataRecorder_CommonBlock[6];
			DataRecorder_ReverseCameraStatus = Nvm_DataRecorder_CommonBlock[7];
			DataRecorder_McuTemperature = Nvm_DataRecorder_CommonBlock[8];
			DataRecorder_BackupBatteryStatus = Nvm_DataRecorder_CommonBlock[9];
			Nvm_ReadAllPending = 2;
		}
		else if(1 == Nvm_WriteAllPending)
		{
			Nvm_DataRecorder_CommonBlock[0] = DataRecorder_AvgLowVoltageBattery;
			Nvm_DataRecorder_CommonBlock[1] = DataRecorder_KilometerTotal;
			Nvm_DataRecorder_CommonBlock[2] = DataRecorder_KilometerPerDcy;
			Nvm_DataRecorder_CommonBlock[3] = DataRecorder_NumberOfDcy;
			Nvm_DataRecorder_CommonBlock[4] = DataRecorder_MaxCurrentConsumptionLV;
			Nvm_DataRecorder_CommonBlock[5] = DataRecorder_MinCurrentConsumptionLV;
			Nvm_DataRecorder_CommonBlock[6] = DataRecorder_AvgCurrentConsumptionLV;
			Nvm_DataRecorder_CommonBlock[7] = DataRecorder_ReverseCameraStatus;
			Nvm_DataRecorder_CommonBlock[8] = DataRecorder_McuTemperature;
			Nvm_DataRecorder_CommonBlock[9] = DataRecorder_BackupBatteryStatus;
			Nvm_W25Q16_EraseBlock(0x000000);
			Nvm_W25Q16_EraseBlock(0x010000);
			Nvm_W25Q16_EraseBlock(0x020000);
			Nvm_W25Q16_WriteBlock(DataRecorder_CcmCounter,0x000000,0,39);
			Nvm_W25Q16_WriteBlock(DataRecorder_ResetCounter,0x010000,0,13);
			Nvm_W25Q16_WriteBlock(Nvm_DataRecorder_CommonBlock,0x020000,0,10);
			Nvm_W25Q16_ReadBlock(DataRecorder_CcmCounter,0x000000,0,39);
			Nvm_W25Q16_ReadBlock(DataRecorder_ResetCounter,0x010000,0,13);
			Nvm_W25Q16_ReadBlock(Nvm_DataRecorder_CommonBlock,0x020000,0,10);
			Nvm_WriteAllPending = 2;
		}
		else
		{
			/* Do nothing. */
		}
	}
	else
	{
		Nvm_ReadAllPending = 2;
		Nvm_WriteAllPending = 2;
	}
	Nvm_MainCounter++;
}
