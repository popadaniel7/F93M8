/**
  ******************************************************************************
  * @file    autonomousdrivingsystem_network.c
  * @author  AST Embedded Analytics Research Platform
  * @date    Sun Jun  9 20:31:21 2024
  * @brief   AI Tool Automatic Code Generator for Embedded NN computing
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  ******************************************************************************
  */


#include "autonomousdrivingsystem_network.h"
#include "autonomousdrivingsystem_network_data.h"

#include "ai_platform.h"
#include "ai_platform_interface.h"
#include "ai_math_helpers.h"

#include "core_common.h"
#include "core_convert.h"

#include "layers.h"



#undef AI_NET_OBJ_INSTANCE
#define AI_NET_OBJ_INSTANCE g_autonomousdrivingsystem_network
 
#undef AI_AUTONOMOUSDRIVINGSYSTEM_NETWORK_MODEL_SIGNATURE
#define AI_AUTONOMOUSDRIVINGSYSTEM_NETWORK_MODEL_SIGNATURE     "56fb4a29ec9f39293666b86d62424bab"

#ifndef AI_TOOLS_REVISION_ID
#define AI_TOOLS_REVISION_ID     ""
#endif

#undef AI_TOOLS_DATE_TIME
#define AI_TOOLS_DATE_TIME   "Sun Jun  9 20:31:21 2024"

#undef AI_TOOLS_COMPILE_TIME
#define AI_TOOLS_COMPILE_TIME    __DATE__ " " __TIME__

#undef AI_AUTONOMOUSDRIVINGSYSTEM_NETWORK_N_BATCHES
#define AI_AUTONOMOUSDRIVINGSYSTEM_NETWORK_N_BATCHES         (1)

static ai_ptr g_autonomousdrivingsystem_network_activations_map[1] = AI_C_ARRAY_INIT;
static ai_ptr g_autonomousdrivingsystem_network_weights_map[1] = AI_C_ARRAY_INIT;



/**  Array declarations section  **********************************************/
/* Array#0 */
AI_ARRAY_OBJ_DECLARE(
  conv2d_4_weights_array, AI_ARRAY_FORMAT_S8,
  NULL, NULL, 73728, AI_STATIC)
/* Array#1 */
AI_ARRAY_OBJ_DECLARE(
  conv2d_11_scratch0_array, AI_ARRAY_FORMAT_S8,
  NULL, NULL, 2304, AI_STATIC)
/* Array#2 */
AI_ARRAY_OBJ_DECLARE(
  conv2d_4_bias_array, AI_ARRAY_FORMAT_S32,
  NULL, NULL, 128, AI_STATIC)
/* Array#3 */
AI_ARRAY_OBJ_DECLARE(
  conv2d_5_weights_array, AI_ARRAY_FORMAT_S8,
  NULL, NULL, 1152, AI_STATIC)
/* Array#4 */
AI_ARRAY_OBJ_DECLARE(
  conv2d_12_scratch0_array, AI_ARRAY_FORMAT_S8,
  NULL, NULL, 4737, AI_STATIC)
/* Array#5 */
AI_ARRAY_OBJ_DECLARE(
  conv2d_4_pad_before_output_array, AI_ARRAY_FORMAT_S8,
  NULL, NULL, 43264, AI_STATIC)
/* Array#6 */
AI_ARRAY_OBJ_DECLARE(
  conv2d_5_bias_array, AI_ARRAY_FORMAT_S32,
  NULL, NULL, 128, AI_STATIC)
/* Array#7 */
AI_ARRAY_OBJ_DECLARE(
  conv2d_13_scratch0_array, AI_ARRAY_FORMAT_S8,
  NULL, NULL, 3072, AI_STATIC)
/* Array#8 */
AI_ARRAY_OBJ_DECLARE(
  conv2d_3_pad_before_output_array, AI_ARRAY_FORMAT_S8,
  NULL, NULL, 80000, AI_STATIC)
/* Array#9 */
AI_ARRAY_OBJ_DECLARE(
  conv2d_6_weights_array, AI_ARRAY_FORMAT_S8,
  NULL, NULL, 32768, AI_STATIC)
/* Array#10 */
AI_ARRAY_OBJ_DECLARE(
  conv2d_14_scratch0_array, AI_ARRAY_FORMAT_S8,
  NULL, NULL, 1324, AI_STATIC)
/* Array#11 */
AI_ARRAY_OBJ_DECLARE(
  conv2d_6_bias_array, AI_ARRAY_FORMAT_S32,
  NULL, NULL, 256, AI_STATIC)
/* Array#12 */
AI_ARRAY_OBJ_DECLARE(
  conv2d_7_weights_array, AI_ARRAY_FORMAT_S8,
  NULL, NULL, 2304, AI_STATIC)
/* Array#13 */
AI_ARRAY_OBJ_DECLARE(
  conv2d_7_bias_array, AI_ARRAY_FORMAT_S32,
  NULL, NULL, 256, AI_STATIC)
/* Array#14 */
AI_ARRAY_OBJ_DECLARE(
  conv2d_8_weights_array, AI_ARRAY_FORMAT_S8,
  NULL, NULL, 65536, AI_STATIC)
/* Array#15 */
AI_ARRAY_OBJ_DECLARE(
  conv2d_8_bias_array, AI_ARRAY_FORMAT_S32,
  NULL, NULL, 256, AI_STATIC)
/* Array#16 */
AI_ARRAY_OBJ_DECLARE(
  conv2d_10_weights_array, AI_ARRAY_FORMAT_S8,
  NULL, NULL, 2304, AI_STATIC)
/* Array#17 */
AI_ARRAY_OBJ_DECLARE(
  serving_default_image_input0_output_array, AI_ARRAY_FORMAT_U8|AI_FMT_FLAG_IS_IO,
  NULL, NULL, 110592, AI_STATIC)
/* Array#18 */
AI_ARRAY_OBJ_DECLARE(
  conv2d_10_bias_array, AI_ARRAY_FORMAT_S32,
  NULL, NULL, 256, AI_STATIC)
/* Array#19 */
AI_ARRAY_OBJ_DECLARE(
  conversion_0_output_array, AI_ARRAY_FORMAT_S8,
  NULL, NULL, 110593, AI_STATIC)
/* Array#20 */
AI_ARRAY_OBJ_DECLARE(
  conv2d_1_output_array, AI_ARRAY_FORMAT_S8,
  NULL, NULL, 147456, AI_STATIC)
/* Array#21 */
AI_ARRAY_OBJ_DECLARE(
  conv2d_11_weights_array, AI_ARRAY_FORMAT_S8,
  NULL, NULL, 32768, AI_STATIC)
/* Array#22 */
AI_ARRAY_OBJ_DECLARE(
  conv2d_2_output_array, AI_ARRAY_FORMAT_S8,
  NULL, NULL, 73728, AI_STATIC)
/* Array#23 */
AI_ARRAY_OBJ_DECLARE(
  conv2d_3_output_array, AI_ARRAY_FORMAT_S8,
  NULL, NULL, 36864, AI_STATIC)
/* Array#24 */
AI_ARRAY_OBJ_DECLARE(
  conv2d_11_bias_array, AI_ARRAY_FORMAT_S32,
  NULL, NULL, 128, AI_STATIC)
/* Array#25 */
AI_ARRAY_OBJ_DECLARE(
  conv2d_4_output_array, AI_ARRAY_FORMAT_S8,
  NULL, NULL, 18432, AI_STATIC)
/* Array#26 */
AI_ARRAY_OBJ_DECLARE(
  conv2d_5_output_array, AI_ARRAY_FORMAT_S8,
  NULL, NULL, 18432, AI_STATIC)
/* Array#27 */
AI_ARRAY_OBJ_DECLARE(
  conv2d_12_weights_array, AI_ARRAY_FORMAT_S8,
  NULL, NULL, 1152, AI_STATIC)
/* Array#28 */
AI_ARRAY_OBJ_DECLARE(
  conv2d_6_output_array, AI_ARRAY_FORMAT_S8,
  NULL, NULL, 36864, AI_STATIC)
/* Array#29 */
AI_ARRAY_OBJ_DECLARE(
  conv2d_7_output_array, AI_ARRAY_FORMAT_S8,
  NULL, NULL, 36864, AI_STATIC)
/* Array#30 */
AI_ARRAY_OBJ_DECLARE(
  conv2d_12_bias_array, AI_ARRAY_FORMAT_S32,
  NULL, NULL, 128, AI_STATIC)
/* Array#31 */
AI_ARRAY_OBJ_DECLARE(
  conv2d_8_output_array, AI_ARRAY_FORMAT_S8,
  NULL, NULL, 36864, AI_STATIC)
/* Array#32 */
AI_ARRAY_OBJ_DECLARE(
  conv2d_10_output_array, AI_ARRAY_FORMAT_S8,
  NULL, NULL, 36864, AI_STATIC)
/* Array#33 */
AI_ARRAY_OBJ_DECLARE(
  conv2d_13_weights_array, AI_ARRAY_FORMAT_S8,
  NULL, NULL, 32768, AI_STATIC)
/* Array#34 */
AI_ARRAY_OBJ_DECLARE(
  conv2d_11_output_array, AI_ARRAY_FORMAT_S8,
  NULL, NULL, 18432, AI_STATIC)
/* Array#35 */
AI_ARRAY_OBJ_DECLARE(
  conv2d_12_output_array, AI_ARRAY_FORMAT_S8,
  NULL, NULL, 18432, AI_STATIC)
/* Array#36 */
AI_ARRAY_OBJ_DECLARE(
  conv2d_13_bias_array, AI_ARRAY_FORMAT_S32,
  NULL, NULL, 256, AI_STATIC)
/* Array#37 */
AI_ARRAY_OBJ_DECLARE(
  conv2d_13_output_array, AI_ARRAY_FORMAT_S8,
  NULL, NULL, 36864, AI_STATIC)
/* Array#38 */
AI_ARRAY_OBJ_DECLARE(
  conv2d_14_output_array, AI_ARRAY_FORMAT_S8,
  NULL, NULL, 4320, AI_STATIC)
/* Array#39 */
AI_ARRAY_OBJ_DECLARE(
  conv2d_14_weights_array, AI_ARRAY_FORMAT_S8,
  NULL, NULL, 7680, AI_STATIC)
/* Array#40 */
AI_ARRAY_OBJ_DECLARE(
  conversion_15_output_array, AI_ARRAY_FORMAT_FLOAT|AI_FMT_FLAG_IS_IO,
  NULL, NULL, 4320, AI_STATIC)
/* Array#41 */
AI_ARRAY_OBJ_DECLARE(
  conv2d_14_bias_array, AI_ARRAY_FORMAT_S32,
  NULL, NULL, 30, AI_STATIC)
/* Array#42 */
AI_ARRAY_OBJ_DECLARE(
  conv2d_1_scratch0_array, AI_ARRAY_FORMAT_S8,
  NULL, NULL, 1196, AI_STATIC)
/* Array#43 */
AI_ARRAY_OBJ_DECLARE(
  conv2d_2_scratch0_array, AI_ARRAY_FORMAT_S8,
  NULL, NULL, 6016, AI_STATIC)
/* Array#44 */
AI_ARRAY_OBJ_DECLARE(
  conv2d_3_scratch0_array, AI_ARRAY_FORMAT_S8,
  NULL, NULL, 6912, AI_STATIC)
/* Array#45 */
AI_ARRAY_OBJ_DECLARE(
  conv2d_4_scratch0_array, AI_ARRAY_FORMAT_S8,
  NULL, NULL, 8704, AI_STATIC)
/* Array#46 */
AI_ARRAY_OBJ_DECLARE(
  conv2d_5_scratch0_array, AI_ARRAY_FORMAT_S8,
  NULL, NULL, 4737, AI_STATIC)
/* Array#47 */
AI_ARRAY_OBJ_DECLARE(
  conv2d_1_weights_array, AI_ARRAY_FORMAT_S8,
  NULL, NULL, 432, AI_STATIC)
/* Array#48 */
AI_ARRAY_OBJ_DECLARE(
  conv2d_6_scratch0_array, AI_ARRAY_FORMAT_S8,
  NULL, NULL, 3072, AI_STATIC)
/* Array#49 */
AI_ARRAY_OBJ_DECLARE(
  conv2d_1_bias_array, AI_ARRAY_FORMAT_S32,
  NULL, NULL, 16, AI_STATIC)
/* Array#50 */
AI_ARRAY_OBJ_DECLARE(
  conv2d_7_scratch0_array, AI_ARRAY_FORMAT_S8,
  NULL, NULL, 9473, AI_STATIC)
/* Array#51 */
AI_ARRAY_OBJ_DECLARE(
  conv2d_2_weights_array, AI_ARRAY_FORMAT_S8,
  NULL, NULL, 4608, AI_STATIC)
/* Array#52 */
AI_ARRAY_OBJ_DECLARE(
  conv2d_2_bias_array, AI_ARRAY_FORMAT_S32,
  NULL, NULL, 32, AI_STATIC)
/* Array#53 */
AI_ARRAY_OBJ_DECLARE(
  conv2d_8_scratch0_array, AI_ARRAY_FORMAT_S8,
  NULL, NULL, 3584, AI_STATIC)
/* Array#54 */
AI_ARRAY_OBJ_DECLARE(
  conv2d_3_weights_array, AI_ARRAY_FORMAT_S8,
  NULL, NULL, 18432, AI_STATIC)
/* Array#55 */
AI_ARRAY_OBJ_DECLARE(
  conv2d_8_scratch1_array, AI_ARRAY_FORMAT_S8,
  NULL, NULL, 6144, AI_STATIC)
/* Array#56 */
AI_ARRAY_OBJ_DECLARE(
  conv2d_3_bias_array, AI_ARRAY_FORMAT_S32,
  NULL, NULL, 64, AI_STATIC)
/* Array#57 */
AI_ARRAY_OBJ_DECLARE(
  conv2d_10_scratch0_array, AI_ARRAY_FORMAT_S8,
  NULL, NULL, 9473, AI_STATIC)
/**  Array metadata declarations section  *************************************/
/* Int quant #0 */
AI_INTQ_INFO_LIST_OBJ_DECLARE(conv2d_4_weights_array_intq, AI_STATIC_CONST,
  AI_BUFFER_META_FLAG_SCALE_FLOAT|AI_BUFFER_META_FLAG_ZEROPOINT_S8, 128,
  AI_PACK_INTQ_INFO(
    AI_PACK_INTQ_SCALE(0.003255012445151806f, 0.004546338692307472f, 0.003097251756116748f, 0.0019433766137808561f, 0.0030427572783082724f, 0.0017727187369018793f, 0.00912623479962349f, 0.0011385638499632478f, 0.0021064665634185076f, 0.006682542618364096f, 0.0030581417959183455f, 0.0024753566831350327f, 0.0022328540217131376f, 2.8086489692213945e-05f, 0.000465178833110258f, 0.003005547681823373f, 0.0021725313272327185f, 0.0032002110965549946f, 0.0035016844049096107f, 1.6062933354987763e-05f, 2.0843244783463888e-05f, 0.0007884311489760876f, 0.003478892846032977f, 0.004778703674674034f, 0.0013329460052773356f, 0.0036510752979665995f, 2.4280103389173746e-05f, 0.0037877552676945925f, 0.0026718236040323973f, 0.002695355797186494f, 0.007782704196870327f, 0.0010562114184722304f, 1.9523777154972777e-05f, 0.0011279473546892405f, 0.0028419350273907185f, 0.0022243100684136152f, 0.004266418516635895f, 0.0008287001983262599f, 0.0019813471008092165f, 0.008595033548772335f, 0.005426870658993721f, 0.002811040496453643f, 8.976864592113998e-06f, 0.002533696824684739f, 0.0025683369021862745f, 2.7415949261921924e-06f, 0.0020798270124942064f, 0.004564533941447735f, 0.004774556960910559f, 0.0008150605717673898f, 0.0015858523547649384f, 0.0015439821872860193f, 0.0032457923516631126f, 0.0021568259689956903f, 1.678497574175708e-05f, 0.0031110327690839767f, 0.005008892621845007f, 3.628098738772678e-06f, 0.0007048673578538001f, 0.0036269344855099916f, 0.0009252220042981207f, 0.0014641796005889773f, 0.0037580823991447687f, 0.0030410876497626305f, 6.907187344040722e-05f, 0.0020544466096907854f, 0.0013845489593222737f, 0.0031650441233068705f, 0.0007395883440040052f, 2.653110641404055e-05f, 0.0008669108501635492f, 0.0032140586990863085f, 3.719243750310852e-06f, 0.00081195670645684f, 0.0024525297340005636f, 0.0019250672776252031f, 0.003073684172704816f, 0.0010804448975250125f, 0.0008919351384975016f, 0.0037917299196124077f, 0.00351877068169415f, 0.0006565444055013359f, 0.003968898672610521f, 0.0025703287683427334f, 9.622477591619827e-06f, 0.0041731176897883415f, 0.0029758720193058252f, 0.002132647205144167f, 5.609870640910231e-06f, 0.0018833279609680176f, 8.59548345033545e-06f, 0.005134631413966417f, 0.004213565960526466f, 2.0906029021716677e-05f, 0.001531310728751123f, 0.0027701035141944885f, 0.0017371207941323519f, 0.000846893060952425f, 0.0020128085743635893f, 0.0016924079973250628f, 1.2481550584197976e-06f, 0.005865612532943487f, 0.0050046867690980434f, 0.003554427996277809f, 0.004386547487229109f, 0.0023978061508387327f, 3.7803847590112127e-06f, 0.001150492113083601f, 0.006203341763466597f, 1.1229204574192408e-05f, 0.001727061695419252f, 0.003903171746060252f, 0.0032314457930624485f, 1.0360452506574802e-05f, 0.0008617516723461449f, 0.002737560076639056f, 0.0018415467347949743f, 0.0008162239682860672f, 0.0008952843490988016f, 0.0007990715675987303f, 0.002272469224408269f, 0.003510915208607912f, 1.513732331659412e-05f, 0.001941037829965353f, 0.0007794213015586138f, 0.0034848512150347233f, 0.0021618951577693224f, 0.0024493185337632895f),
    AI_PACK_INTQ_ZP(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)))

/* Int quant #1 */
AI_INTQ_INFO_LIST_OBJ_DECLARE(conv2d_5_weights_array_intq, AI_STATIC_CONST,
  AI_BUFFER_META_FLAG_SCALE_FLOAT|AI_BUFFER_META_FLAG_ZEROPOINT_S8, 128,
  AI_PACK_INTQ_INFO(
    AI_PACK_INTQ_SCALE(0.003792846342548728f, 0.0033331774175167084f, 0.014589536003768444f, 0.004515745211392641f, 0.002447870559990406f, 0.004096630495041609f, 0.0023059279192239046f, 0.0255275946110487f, 0.00882193073630333f, 0.0034618389327079058f, 0.009605785831809044f, 0.010534134693443775f, 0.012905153445899487f, 0.042153485119342804f, 0.01649896241724491f, 0.009037029929459095f, 0.005363190080970526f, 0.005544919054955244f, 0.002501242095604539f, 0.10780398547649384f, 0.009505937807261944f, 0.01558451447635889f, 0.006106915883719921f, 0.002672134665772319f, 0.012155943550169468f, 0.0042699845507740974f, 0.1696026623249054f, 0.0032928569708019495f, 0.007141305133700371f, 0.006575746461749077f, 0.0006865431787446141f, 0.01693194918334484f, 0.07205773890018463f, 0.011177708394825459f, 0.005889343097805977f, 0.006444680504500866f, 0.006242242641746998f, 0.012305151671171188f, 0.008444608189165592f, 0.003573906607925892f, 0.012500972487032413f, 0.0055768764577806f, 0.11036074906587601f, 0.011185936629772186f, 0.010970118455588818f, 0.19909945130348206f, 0.005747293587774038f, 0.003222694853320718f, 0.008549150079488754f, 0.005561234429478645f, 0.01748811826109886f, 0.012620777823030949f, 0.0067443703301250935f, 0.004236441571265459f, 0.0911114439368248f, 0.005708231590688229f, 0.00407059071585536f, 0.1708814650774002f, 0.012084217742085457f, 0.014004685916006565f, 0.009005595929920673f, 0.013747124001383781f, 0.0039331004954874516f, 0.006470011081546545f, 0.308141827583313f, 0.01036257017403841f, 0.014639953151345253f, 0.004332026932388544f, 0.01502580288797617f, 0.14259393513202667f, 0.00926925241947174f, 0.004333725199103355f, 0.01603860594332218f, 0.012191089801490307f, 0.007420805282890797f, 0.012181665748357773f, 0.00448628980666399f, 0.017075687646865845f, 0.008599086664617062f, 0.006171903572976589f, 0.010031403973698616f, 0.010829628445208073f, 0.004313264507800341f, 0.013152281753718853f, 0.00022926788369659334f, 0.006979529745876789f, 0.00919277872890234f, 0.006518067326396704f, 0.050146348774433136f, 0.0042543900199234486f, 0.10320825129747391f, 0.006133349612355232f, 0.005647281184792519f, 0.013052267953753471f, 0.02314719557762146f, 0.011291392147541046f, 0.007030487526208162f, 0.015793975442647934f, 0.008709372952580452f, 0.00597212091088295f, 0.3013914227485657f, 0.0026960731483995914f, 0.0035914364270865917f, 0.010815628804266453f, 0.009303768165409565f, 0.008622962981462479f, 0.1313418596982956f, 0.01171933114528656f, 0.003454433521255851f, 0.24560008943080902f, 0.006154411938041449f, 0.007481161970645189f, 0.00537265045568347f, 0.06383219361305237f, 0.011352667585015297f, 0.006235906388610601f, 0.00939924642443657f, 0.012142453342676163f, 0.009728703647851944f, 0.01318158209323883f, 0.0035833599977195263f, 0.010526654310524464f, 0.11311833560466766f, 0.008838284760713577f, 0.020732363685965538f, 0.0029623722657561302f, 0.004127185326069593f, 0.01004335843026638f),
    AI_PACK_INTQ_ZP(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)))

/* Int quant #2 */
AI_INTQ_INFO_LIST_OBJ_DECLARE(conv2d_4_pad_before_output_array_intq, AI_STATIC_CONST,
  AI_BUFFER_META_FLAG_SCALE_FLOAT|AI_BUFFER_META_FLAG_ZEROPOINT_S8, 1,
  AI_PACK_INTQ_INFO(
    AI_PACK_INTQ_SCALE(0.2400805801153183f),
    AI_PACK_INTQ_ZP(-128)))

/* Int quant #3 */
AI_INTQ_INFO_LIST_OBJ_DECLARE(conv2d_3_pad_before_output_array_intq, AI_STATIC_CONST,
  AI_BUFFER_META_FLAG_SCALE_FLOAT|AI_BUFFER_META_FLAG_ZEROPOINT_S8, 1,
  AI_PACK_INTQ_INFO(
    AI_PACK_INTQ_SCALE(0.467665433883667f),
    AI_PACK_INTQ_ZP(-128)))

/* Int quant #4 */
AI_INTQ_INFO_LIST_OBJ_DECLARE(conv2d_6_weights_array_intq, AI_STATIC_CONST,
  AI_BUFFER_META_FLAG_SCALE_FLOAT|AI_BUFFER_META_FLAG_ZEROPOINT_S8, 256,
  AI_PACK_INTQ_INFO(
    AI_PACK_INTQ_SCALE(0.0016795056872069836f, 0.0035082788672298193f, 0.0018301410600543022f, 0.002491264371201396f, 0.0028156028129160404f, 0.0008422529208473861f, 0.006486620754003525f, 0.0040991962887346745f, 0.002994050970301032f, 0.0012005232274532318f, 0.0012034187093377113f, 0.0018034301465377212f, 0.0014827944105491042f, 0.0038158392999321222f, 3.2244653993984684e-05f, 0.0019366167252883315f, 0.0026354037690907717f, 0.006592202000319958f, 2.6258583602611907e-05f, 0.006696026306599379f, 0.002142510609701276f, 0.0014965367736294866f, 0.0009115808643400669f, 0.00522108469158411f, 8.195677946787328e-05f, 7.657951937289909e-05f, 0.0010677115060389042f, 0.0023117573000490665f, 0.003774267388507724f, 0.000845727976411581f, 0.001668388256803155f, 0.0024819497484713793f, 0.0006042175809852779f, 0.0025087373796850443f, 0.0028664127457886934f, 0.0042792875319719315f, 0.008962910622358322f, 0.005302978679537773f, 0.003639911999925971f, 0.0023533895146101713f, 0.01019810326397419f, 0.0031386276241391897f, 0.0022609494626522064f, 0.004252001643180847f, 0.0024794817436486483f, 0.001813614508137107f, 5.890962711418979e-05f, 0.007725976407527924f, 0.007194486912339926f, 0.003862128360196948f, 0.00255651050247252f, 0.0019713740330189466f, 0.0011530888732522726f, 0.007391232531517744f, 0.004180888645350933f, 7.136045041988837e-06f, 0.001522045349702239f, 2.287471761519555e-05f, 0.0026442152447998524f, 0.003443334251642227f, 0.002451586537063122f, 3.545522122294642e-05f, 0.0025171071756631136f, 0.0015862210420891643f, 0.0022448445670306683f, 0.0022993842139840126f, 1.1132139661640394e-05f, 0.0017098751850426197f, 0.0020040080416947603f, 0.0019246406154707074f, 0.002087515080347657f, 0.0020548985339701176f, 0.0034756911918520927f, 2.909048635046929e-05f, 0.002199322683736682f, 0.008866114541888237f, 0.0037120934575796127f, 0.004931522998958826f, 0.0019497182220220566f, 0.004085054621100426f, 0.0017705324571579695f, 2.95294557872694e-05f, 0.00013229032629169524f, 0.0029873948078602552f, 0.0028223181143403053f, 2.51334386121016e-05f, 0.002170224441215396f, 0.0037840784061700106f, 0.0012752669863402843f, 0.002809567842632532f, 0.0030535419937223196f, 0.0026054875925183296f, 1.007986156764673e-05f, 0.0030781093519181013f, 0.00359345437027514f, 0.0021978600416332483f, 0.0024495823308825493f, 0.0021377080120146275f, 0.0015466260956600308f, 0.006236005108803511f, 0.0006483910256065428f, 0.0023423258680850267f, 0.002689175307750702f, 0.0023259820882230997f, 0.002550627337768674f, 0.0026986966840922832f, 0.003475097706541419f, 0.0078293951228261f, 0.0025254657957702875f, 0.0012621296336874366f, 0.00499724643304944f, 1.3622888218378648e-05f, 0.009396483190357685f, 0.002056086203083396f, 2.7540849259821698e-05f, 0.0023636191617697477f, 0.002274897415190935f, 0.005013938061892986f, 0.002019932260736823f, 0.0041455235332250595f, 0.0019869483076035976f, 0.0013158523943275213f, 0.0019698829855769873f, 0.0015572647098451853f, 0.0063353427685797215f, 0.007350601721554995f, 0.002381607424467802f, 6.435452814912423e-05f, 2.4638718969072215e-05f, 2.573654091975186e-05f, 0.0035277444403618574f, 0.0012717783683910966f, 0.0023546041920781136f, 0.0022728873882442713f, 0.0023174453526735306f, 0.002652162918820977f, 0.0032693329267203808f, 6.534645308420295e-06f, 0.0029694908298552036f, 0.00477404473349452f, 0.003143258159980178f, 0.0026625117752701044f, 0.008065815083682537f, 0.0022863480262458324f, 0.0009794157231226563f, 0.0019607041031122208f, 0.002760108793154359f, 1.6893931388040073e-05f, 6.45352847641334e-05f, 5.4814681789139286e-05f, 0.0026075118221342564f, 0.002070474438369274f, 0.00203327601775527f, 0.002296578837558627f, 0.0024111480452120304f, 0.0031029486563056707f, 0.001964770257472992f, 0.003072060877457261f, 0.0019406566862016916f, 0.0028165956027805805f, 4.0217280911747366e-05f, 0.0067932200618088245f, 0.0006426324835047126f, 0.0021363755222409964f, 0.005151740275323391f, 9.723396942717955e-06f, 0.0029817246831953526f, 9.982450137613341e-07f, 0.003684665309265256f, 0.012845419347286224f, 0.0026038330979645252f, 0.002241946756839752f, 0.0018852524226531386f, 0.0013425955548882484f, 0.002949383109807968f, 0.0025063510984182358f, 0.0015024595195427537f, 0.0026496436912566423f, 0.006289530545473099f, 0.001208583707921207f, 0.0016414962010458112f, 0.00190293591003865f, 0.00440831296145916f, 4.149878805037588e-05f, 0.0019442825578153133f, 0.003130820579826832f, 0.0024649270344525576f, 4.756693670060486e-06f, 0.005407781805843115f, 0.002590883057564497f, 0.0019375134725123644f, 0.0018082231981679797f, 0.0025263831485062838f, 0.0026455281767994165f, 3.431112418184057e-05f, 0.0024286536499857903f, 3.740028842003085e-05f, 0.003589554689824581f, 4.8543028242420405e-05f, 0.00820919033139944f, 0.004072214476764202f, 0.002015214180573821f, 0.0034223294351249933f, 3.443140667513944e-05f, 3.021003612957429e-05f, 0.004718766547739506f, 0.0028691517654806376f, 0.00010997221397701651f, 0.009844743646681309f, 0.0021665426902472973f, 0.0036860592663288116f, 0.002030779607594013f, 0.0018081431044265628f, 0.0027002613060176373f, 0.004600927233695984f, 8.558916306355968e-05f, 0.0031320599373430014f, 0.0017301937332376838f, 0.005604736041277647f, 0.002914588199928403f, 0.003535892115905881f, 0.003064693184569478f, 1.074198826245265e-05f, 0.0030294584576040506f, 8.439013981842436e-06f, 0.0016883568605408072f, 0.00427908543497324f, 0.002447807928547263f, 0.0031397598795592785f, 0.0030600717291235924f, 0.0019836858846247196f, 0.003044914687052369f, 0.003073535393923521f, 0.00444385502487421f, 0.002673665527254343f, 0.0038486341945827007f, 0.0018208414549008012f, 0.001735159894451499f, 6.848750217613997e-06f, 0.003099545370787382f, 2.5365601686644368e-05f, 0.00500101875513792f, 0.0017429966246709228f, 0.006978420540690422f, 0.002125222235918045f, 0.0038712103851139545f, 1.428028099326184e-05f, 9.82318160822615e-05f, 0.00438158493489027f, 0.0025749339256435633f, 0.003043551929295063f, 0.0018931541126221418f, 6.909968215040863e-05f, 0.0028542133513838053f, 0.002567849587649107f, 0.0036941065918654203f),
    AI_PACK_INTQ_ZP(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)))

/* Int quant #5 */
AI_INTQ_INFO_LIST_OBJ_DECLARE(conv2d_7_weights_array_intq, AI_STATIC_CONST,
  AI_BUFFER_META_FLAG_SCALE_FLOAT|AI_BUFFER_META_FLAG_ZEROPOINT_S8, 256,
  AI_PACK_INTQ_INFO(
    AI_PACK_INTQ_SCALE(0.012850557453930378f, 0.008010712452232838f, 0.006092412397265434f, 0.007423693314194679f, 0.006400458514690399f, 0.012479052878916264f, 0.0013153651962056756f, 0.007422847673296928f, 0.007501259446144104f, 0.013884634710848331f, 0.009941901080310345f, 0.009939311072230339f, 0.009699014946818352f, 0.004880188498646021f, 0.0002907555317506194f, 0.007008705288171768f, 0.0055639552883803844f, 0.0018194526201114058f, 0.29751530289649963f, 0.003951331600546837f, 0.007792762480676174f, 0.015164224430918694f, 0.008341522887349129f, 0.008896849118173122f, 0.11604449152946472f, 0.08437110483646393f, 0.07886422425508499f, 0.013505326583981514f, 0.006036120001226664f, 0.01227371022105217f, 0.0075481063686311245f, 0.005808329209685326f, 0.016344260424375534f, 0.0070779332891106606f, 0.005268133711069822f, 0.005271608009934425f, 0.002298791194334626f, 0.00330085726454854f, 0.006572706624865532f, 0.008687077090144157f, 0.00162101024761796f, 0.010888409800827503f, 0.009633312001824379f, 0.007167737931013107f, 0.02274487540125847f, 0.011539025232195854f, 0.2596651017665863f, 0.0031729666516184807f, 0.002003127010539174f, 0.0037607895210385323f, 0.015204021707177162f, 0.007571622729301453f, 0.07446824014186859f, 0.0026832602452486753f, 0.005477060563862324f, 0.09254194796085358f, 0.010426691733300686f, 0.023045619949698448f, 0.014086727052927017f, 0.007326890714466572f, 0.008869552053511143f, 0.27223682403564453f, 0.007709610275924206f, 0.009958085604012012f, 0.00833995919674635f, 0.010470377281308174f, 0.215087890625f, 0.007523638661950827f, 0.00797535851597786f, 0.020694296807050705f, 0.014614881947636604f, 0.00944272056221962f, 0.005949495360255241f, 0.12158816307783127f, 0.013864540494978428f, 0.0032234578393399715f, 0.005425385199487209f, 0.0028133734595030546f, 0.011314337141811848f, 0.006888534873723984f, 0.016226503998041153f, 0.0664006844162941f, 0.28641510009765625f, 0.006931941956281662f, 0.009231215342879295f, 0.16068118810653687f, 0.009233146905899048f, 0.003898337949067354f, 0.0098956860601902f, 0.010092598386108875f, 0.005961733404546976f, 0.010656248778104782f, 0.18322089314460754f, 0.00570818642154336f, 0.005773800425231457f, 0.01267713587731123f, 0.013766740448772907f, 0.004622714128345251f, 0.014326207339763641f, 0.004300665110349655f, 0.015427148900926113f, 0.011802911758422852f, 0.00639494089409709f, 0.010660435073077679f, 0.008144833147525787f, 0.004390253219753504f, 0.005277000367641449f, 0.0030504208989441395f, 0.006011430639773607f, 0.0113137848675251f, 0.0042519220151007175f, 0.12220461666584015f, 0.0018795343348756433f, 0.010596436448395252f, 0.23111897706985474f, 0.006829739082604647f, 0.007188786286860704f, 0.0045292251743376255f, 0.006447937339544296f, 0.006148918066173792f, 0.010948583483695984f, 0.008990996517241001f, 0.006277123931795359f, 0.013451779261231422f, 0.004301471170037985f, 0.002956603653728962f, 0.0069635785184800625f, 0.49896374344825745f, 0.1607416868209839f, 0.1800932139158249f, 0.006979892961680889f, 0.008320275694131851f, 0.007603101897984743f, 0.0069428700953722f, 0.013403971679508686f, 0.00644328398630023f, 0.011549021117389202f, 0.1875542402267456f, 0.010182281024754047f, 0.004520901478827f, 0.005907763727009296f, 0.007093692664057016f, 0.0017983714351430535f, 0.009705263189971447f, 0.015474761836230755f, 0.008533462882041931f, 0.010020378977060318f, 0.06164100021123886f, 0.10209932178258896f, 0.08181353658437729f, 0.0030729130376130342f, 0.022287745028734207f, 0.015064743347465992f, 0.006985403597354889f, 0.005173680372536182f, 0.005945331417024136f, 0.00981355831027031f, 0.019425969570875168f, 0.01936246268451214f, 0.004166383296251297f, 0.19629468023777008f, 0.002065112115815282f, 0.010764675214886665f, 0.015529646538197994f, 0.00548350065946579f, 0.08758942037820816f, 0.02023204416036606f, 0.09821365028619766f, 0.005470516160130501f, 0.002564965048804879f, 0.009033747017383575f, 0.009540088474750519f, 0.012053579092025757f, 0.006873009260743856f, 0.005766570568084717f, 0.01026255264878273f, 0.008261485956609249f, 0.008614344522356987f, 0.0067001101560890675f, 0.012717503122985363f, 0.016328630968928337f, 0.010081179440021515f, 0.004703231155872345f, 0.20698611438274384f, 0.025753095746040344f, 0.00549007672816515f, 0.006282674614340067f, 0.15416733920574188f, 0.0035181273706257343f, 0.008532842621207237f, 0.005787556990981102f, 0.011611085385084152f, 0.0060198367573320866f, 0.010606030002236366f, 0.02121548354625702f, 0.015743587166070938f, 0.10338037461042404f, 0.0057842181995511055f, 0.275417298078537f, 0.0018391329795122147f, 0.011126244440674782f, 0.009458419866859913f, 0.005479731597006321f, 0.061056848615407944f, 0.04131398722529411f, 0.00650081317871809f, 0.0053823115304112434f, 0.5894729495048523f, 0.0021670639980584383f, 0.014219936914741993f, 0.008546935394406319f, 0.013614010997116566f, 0.008642912842333317f, 0.01283035334199667f, 0.008344292640686035f, 0.14701782166957855f, 0.007995456457138062f, 0.009138715453445911f, 0.005735168699175119f, 0.004188898019492626f, 0.006301588378846645f, 0.007224403787404299f, 0.11833825707435608f, 0.013353997841477394f, 0.0877595916390419f, 0.00879176240414381f, 0.0027237057220190763f, 0.011059306561946869f, 0.006038443651050329f, 0.005710253957659006f, 0.014365991577506065f, 0.006909514311701059f, 0.006483810022473335f, 0.0034187843557447195f, 0.007493182085454464f, 0.005115165375173092f, 0.011102638207376003f, 0.008573582395911217f, 0.22977951169013977f, 0.0042418139055371284f, 0.08639129251241684f, 0.007599305361509323f, 0.011536583304405212f, 0.00174332270398736f, 0.015080966055393219f, 0.008150448091328144f, 0.015148535370826721f, 0.14887885749340057f, 0.0035601980052888393f, 0.004321727901697159f, 0.00892326794564724f, 0.008351673372089863f, 0.05465904250741005f, 0.007734633516520262f, 0.018106767907738686f, 0.004275497980415821f),
    AI_PACK_INTQ_ZP(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)))

/* Int quant #6 */
AI_INTQ_INFO_LIST_OBJ_DECLARE(conv2d_8_weights_array_intq, AI_STATIC_CONST,
  AI_BUFFER_META_FLAG_SCALE_FLOAT|AI_BUFFER_META_FLAG_ZEROPOINT_S8, 256,
  AI_PACK_INTQ_INFO(
    AI_PACK_INTQ_SCALE(0.0017627148190513253f, 0.0014720152830705047f, 0.002903058659285307f, 0.0016524585662409663f, 0.0011664583580568433f, 0.0023643269669264555f, 1.5344845451181754e-05f, 0.0010074697202071548f, 1.158411214419175e-05f, 4.250572237651795e-05f, 2.579065585450735e-05f, 0.006402747239917517f, 0.002229093573987484f, 0.0024649957194924355f, 0.004014624282717705f, 0.0019964983221143484f, 3.698162799992133e-06f, 3.922844916814938e-05f, 0.0019099615747109056f, 0.0016222083941102028f, 0.003306377213448286f, 0.002582479966804385f, 0.00356514984741807f, 3.8176887755980715e-05f, 6.079103968659183e-06f, 4.12730332755018e-06f, 0.0013774450635537505f, 0.001908006495796144f, 0.0026855485048145056f, 0.002051048679277301f, 0.001398371416144073f, 0.0011942590354010463f, 3.5150082112522796e-05f, 0.0012884654570370913f, 2.678902717434539e-07f, 0.001377758220769465f, 0.001467179274186492f, 1.0189734211962787e-06f, 0.0069678593426942825f, 2.8668542654486373e-05f, 0.0014545669546350837f, 0.0012801808770745993f, 0.0020534428767859936f, 0.001291128108277917f, 0.001243197824805975f, 0.0019422626355662942f, 0.001245007966645062f, 0.005381003022193909f, 3.7775107557536103e-06f, 0.0015572892734780908f, 0.0019147224957123399f, 0.000882117310538888f, 0.009596377611160278f, 0.0033200548496097326f, 0.0015254964819177985f, 4.8029873141786084e-05f, 0.0014828764833509922f, 0.00088144326582551f, 6.199513154570013e-05f, 0.0021650916896760464f, 0.0015691054286435246f, 0.0008747673127800226f, 0.004008795600384474f, 0.0014782976359128952f, 3.9621078030904755e-05f, 0.0013129326980561018f, 0.004534700885415077f, 0.002572499681264162f, 1.073466228262987e-05f, 4.109444489586167e-05f, 0.001536620780825615f, 9.659318038757192e-07f, 0.001497133169323206f, 6.143121936474927e-06f, 0.0011081484844908118f, 0.0019622123800218105f, 0.0011619101278483868f, 0.0014803060330450535f, 3.184495653840713e-05f, 1.893644548545126e-05f, 0.003761260537430644f, 0.0016868510283529758f, 0.0019747724290937185f, 0.001852291519753635f, 6.323984962364193e-06f, 1.394175342284143e-05f, 2.399519144091755e-05f, 0.0032871870789676905f, 0.0017316746525466442f, 0.001925633754581213f, 0.0016987856943160295f, 0.0027104979380965233f, 1.6228515960392542e-05f, 0.002203620970249176f, 0.0012515501584857702f, 0.0022866488434374332f, 5.6167868024203926e-05f, 0.0008878505905158818f, 0.0011510309996083379f, 2.578359817562159e-05f, 0.001534496434032917f, 0.0032097126822918653f, 0.002111058449372649f, 0.001555376104079187f, 0.004843289498239756f, 0.0016218303935602307f, 0.0033365332055836916f, 0.0013288564514368773f, 0.001674949424341321f, 0.0035961251705884933f, 0.0026281445752829313f, 0.0009411172359250486f, 0.003598411101847887f, 0.001623464748263359f, 0.0015545804053544998f, 0.0028722984716296196f, 0.0034443282056599855f, 0.0018526817439123988f, 0.00455416040495038f, 0.0066175214014947414f, 0.0027615719009190798f, 2.5217170332325622e-05f, 0.006448534317314625f, 9.542212865198962e-06f, 0.00111783214379102f, 0.0014935981016606092f, 0.0020242715254426003f, 1.4436798210226698e-06f, 0.0012994988355785608f, 0.0009674213360995054f, 0.0035676066763699055f, 1.590913234394975e-05f, 0.0016524927923455834f, 0.0011955410009250045f, 0.0007304315804503858f, 0.0011040953686460853f, 0.004478928167372942f, 0.0011911396868526936f, 5.678064553649165e-05f, 0.0033943839371204376f, 4.1539158701198176e-05f, 0.0011713400017470121f, 0.0014024768024682999f, 4.127689317101613e-05f, 0.0019911443814635277f, 0.0017459702212363482f, 0.0003558319294825196f, 0.0014652588870376348f, 0.0015159074682742357f, 2.3632879674551077e-05f, 0.0015363766578957438f, 5.739023981732316e-05f, 2.322980981261935e-05f, 0.0018688603304326534f, 0.0016805442282930017f, 0.002033381024375558f, 2.6052708562929183e-05f, 0.013474435545504093f, 0.0018242159858345985f, 0.006559786852449179f, 0.0016654457431286573f, 0.004378372337669134f, 0.0021673068404197693f, 0.0023536731023341417f, 0.0019637809600681067f, 0.0011736451415345073f, 0.007871436886489391f, 7.192697921709623e-06f, 0.003611532738432288f, 0.00301351142115891f, 0.001140490872785449f, 0.002086328575387597f, 9.246023182640783e-06f, 0.001017710193991661f, 0.0013626012951135635f, 1.487622193963034e-05f, 0.0010201047407463193f, 3.161141285090707e-05f, 0.004972984082996845f, 0.0011320372577756643f, 1.841962671278452e-06f, 0.006580226588994265f, 0.005444410722702742f, 1.85712688107742e-05f, 0.0012200626078993082f, 2.3415692339767702e-05f, 1.0592239959805738e-05f, 0.0016284346347674727f, 0.006551661528646946f, 0.002102617407217622f, 0.003619760973379016f, 0.0010846485383808613f, 0.0020082711707800627f, 0.0015977817820385098f, 2.094750016112812e-05f, 1.0306330295861699e-05f, 0.0014910469762980938f, 0.0018748888978734612f, 0.01494903676211834f, 1.960660665645264e-05f, 0.002199003007262945f, 1.9852033801726066e-05f, 0.0009566753869876266f, 0.0014712662668898702f, 0.001157886115834117f, 0.0026430925354361534f, 0.0031983032822608948f, 0.0025878064334392548f, 0.0015063568716868758f, 0.0011633939575403929f, 0.004106772597879171f, 0.002066956367343664f, 1.089777242668788e-06f, 8.095101293292828e-06f, 0.0013051850255578756f, 0.0015167065430432558f, 2.8152830054750666e-05f, 0.006279967725276947f, 0.0012920156586915255f, 7.667731551919132e-05f, 0.004713652655482292f, 0.0037154285237193108f, 0.004852713085711002f, 0.0012854895321652293f, 0.0017749102553352714f, 0.00011777705367421731f, 2.2047850507078692e-05f, 4.961770537192933e-05f, 0.0021351855248212814f, 0.0024085682816803455f, 0.0007563750841654837f, 0.0014552249340340495f, 0.0008915524231269956f, 0.004318897146731615f, 1.1398212336644065e-05f, 0.003229268593713641f, 2.7786651116912253e-05f, 0.0008826717385090888f, 0.002269415883347392f, 0.0021354893688112497f, 0.003050402505323291f, 0.002437303774058819f, 0.001057380810379982f, 0.001616998459212482f, 0.0029073755722492933f, 0.0012940337182953954f, 4.9489110097056255e-05f, 1.1105529665655922e-05f, 0.0015666375402361155f, 0.002551388693973422f, 2.2680746951664332e-06f, 2.182560092478525e-05f, 1.5423913282575086e-05f, 0.0013578610960394144f, 0.0016314024105668068f, 0.0020793424919247627f),
    AI_PACK_INTQ_ZP(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)))

/* Int quant #7 */
AI_INTQ_INFO_LIST_OBJ_DECLARE(conv2d_10_weights_array_intq, AI_STATIC_CONST,
  AI_BUFFER_META_FLAG_SCALE_FLOAT|AI_BUFFER_META_FLAG_ZEROPOINT_S8, 256,
  AI_PACK_INTQ_INFO(
    AI_PACK_INTQ_SCALE(0.014620713889598846f, 0.014870424754917622f, 0.0037952156271785498f, 0.008176584728062153f, 0.021555829793214798f, 0.013235708698630333f, 0.2046748548746109f, 0.008812245912849903f, 0.24174395203590393f, 0.08842205256223679f, 0.15861940383911133f, 0.002423556987196207f, 0.004290468525141478f, 0.010069839656352997f, 0.003059262642636895f, 0.010096010752022266f, 0.0939672514796257f, 0.11376862972974777f, 0.003608540166169405f, 0.0037799749989062548f, 0.0036895459052175283f, 0.018685584887862206f, 0.0024721259251236916f, 0.04954976215958595f, 0.14770196378231049f, 0.11428148299455643f, 0.016945529729127884f, 0.0036479977425187826f, 0.003984768874943256f, 0.016960307955741882f, 0.004326777532696724f, 0.005139675457030535f, 0.03177081421017647f, 0.014904888346791267f, 0.1162981316447258f, 0.02078165113925934f, 0.012224569916725159f, 0.05889103189110756f, 0.0030620372854173183f, 0.07985634356737137f, 0.027128806337714195f, 0.013275680132210255f, 0.005838674958795309f, 0.01635797880589962f, 0.006880468223243952f, 0.030417753383517265f, 0.020673351362347603f, 0.002267976989969611f, 0.06633210927248001f, 0.010131771676242352f, 0.0058585177175700665f, 0.0109920809045434f, 0.002189828082919121f, 0.0016101457877084613f, 0.01039903610944748f, 0.6904934644699097f, 0.007165855728089809f, 0.012092790566384792f, 0.246703639626503f, 0.0052355085499584675f, 0.007149215787649155f, 0.011029633693397045f, 0.003616727190092206f, 0.011992446146905422f, 0.0443694181740284f, 0.01263919472694397f, 0.00567416800186038f, 0.005705142393708229f, 0.25047430396080017f, 0.05545099824666977f, 0.0052759163081645966f, 0.07146033644676208f, 0.006665525492280722f, 0.048006393015384674f, 0.012820265255868435f, 0.009075015783309937f, 0.006725620944052935f, 0.004260392393916845f, 0.17288172245025635f, 0.07863251119852066f, 0.0020418157801032066f, 0.0040594846941530704f, 0.004715918097645044f, 0.006936150602996349f, 0.1955341100692749f, 0.11725284159183502f, 0.14167554676532745f, 0.0017793512670323253f, 0.005625151563435793f, 0.01770787686109543f, 0.010095012374222279f, 0.005537283141165972f, 0.26531946659088135f, 0.01071466039866209f, 0.008249495178461075f, 0.013113387860357761f, 0.11093537509441376f, 0.00917249359190464f, 0.022400734946131706f, 0.07292790710926056f, 0.004178278148174286f, 0.015512573532760143f, 0.008137911558151245f, 0.009848542511463165f, 0.0013496206374838948f, 0.009379246272146702f, 0.0037524630315601826f, 0.05185438320040703f, 0.015059455297887325f, 0.006482770200818777f, 0.0031461836770176888f, 0.014938936568796635f, 0.002270040800794959f, 0.011724975891411304f, 0.011112662963569164f, 0.00430381391197443f, 0.0022761188447475433f, 0.004707316868007183f, 0.00472436286509037f, 0.0026614791713654995f, 0.009715840220451355f, 0.053685255348682404f, 0.0019159995717927814f, 0.07631099224090576f, 0.012278907001018524f, 0.005289263557642698f, 0.010174012742936611f, 0.07108435779809952f, 0.008241338655352592f, 0.021574215963482857f, 0.010661207139492035f, 0.15167342126369476f, 0.013316713273525238f, 0.013773886486887932f, 0.014659516513347626f, 0.021649617701768875f, 0.0022914616856724024f, 0.010650931857526302f, 0.052531223744153976f, 0.0039030960761010647f, 0.10762785375118256f, 0.0037235801573842764f, 0.006260530557483435f, 0.07805472612380981f, 0.00497455894947052f, 0.01027810201048851f, 0.016818733885884285f, 0.015231559984385967f, 0.008976331911981106f, 0.07771068066358566f, 0.013670445419847965f, 0.13631662726402283f, 0.21434694528579712f, 0.009953076019883156f, 0.01743772253394127f, 0.006267805118113756f, 0.492147833108902f, 0.005016932729631662f, 0.00402822345495224f, 0.0035955861676484346f, 0.019924072548747063f, 0.0026362393982708454f, 0.004310625605285168f, 0.005481488071382046f, 0.013675464317202568f, 0.022290077060461044f, 0.0023389984853565693f, 0.248016819357872f, 0.0028651459142565727f, 0.005675104912370443f, 0.009685559198260307f, 0.012071195058524609f, 0.10229393094778061f, 0.0082942433655262f, 0.009631015360355377f, 0.11489976197481155f, 0.02615007385611534f, 0.20349328219890594f, 0.005266318563371897f, 0.09359980374574661f, 0.05731206759810448f, 0.0011272333795204759f, 0.004178961738944054f, 0.20394432544708252f, 0.018370773643255234f, 0.031087571755051613f, 0.04015018418431282f, 0.003949317149817944f, 0.005548020824790001f, 0.004822435788810253f, 0.00885316077619791f, 0.03495234251022339f, 0.004719654563814402f, 0.015244054608047009f, 0.1985718160867691f, 0.07166054099798203f, 0.007757073268294334f, 0.008245640434324741f, 0.0014566913014277816f, 0.008039887063205242f, 0.00507217925041914f, 0.06227952614426613f, 0.01596091315150261f, 0.014682035893201828f, 0.02186969295144081f, 0.009803441353142262f, 0.0054205055348575115f, 0.007262290921062231f, 0.015565787442028522f, 0.021357527002692223f, 0.004105031490325928f, 0.03530620411038399f, 0.09654537588357925f, 0.17258447408676147f, 0.005202316213399172f, 0.0053998311050236225f, 0.04801580309867859f, 0.0017812119331210852f, 0.013191280886530876f, 0.35510388016700745f, 0.0021121343597769737f, 0.0048116594552993774f, 0.0020570673514157534f, 0.007470120210200548f, 0.013708787970244884f, 0.34201109409332275f, 0.11116578429937363f, 0.03716886416077614f, 0.005706997588276863f, 0.006513150874525309f, 0.025504881516098976f, 0.00453327177092433f, 0.010779098607599735f, 0.0017190543003380299f, 0.09273447096347809f, 0.002211250364780426f, 0.26774516701698303f, 0.021394025534391403f, 0.026726575568318367f, 0.013081683777272701f, 0.003698838409036398f, 0.010522291995584965f, 0.012507476843893528f, 0.005147531628608704f, 0.0036212587729096413f, 0.007385117467492819f, 0.6537857055664062f, 0.1470498889684677f, 0.006410741247236729f, 0.004824482835829258f, 0.13277922570705414f, 0.11609447747468948f, 0.0859665647149086f, 0.012698189355432987f, 0.006636038888245821f, 0.011676862835884094f),
    AI_PACK_INTQ_ZP(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)))

/* Int quant #8 */
AI_INTQ_INFO_LIST_OBJ_DECLARE(serving_default_image_input0_output_array_intq, AI_STATIC_CONST,
  AI_BUFFER_META_FLAG_SCALE_FLOAT|AI_BUFFER_META_FLAG_ZEROPOINT_U8, 1,
  AI_PACK_INTQ_INFO(
    AI_PACK_INTQ_SCALE(0.003921568859368563f),
    AI_PACK_UINTQ_ZP(0)))

/* Int quant #9 */
AI_INTQ_INFO_LIST_OBJ_DECLARE(conversion_0_output_array_intq, AI_STATIC_CONST,
  AI_BUFFER_META_FLAG_SCALE_FLOAT|AI_BUFFER_META_FLAG_ZEROPOINT_S8, 1,
  AI_PACK_INTQ_INFO(
    AI_PACK_INTQ_SCALE(0.003921568859368563f),
    AI_PACK_INTQ_ZP(-128)))

/* Int quant #10 */
AI_INTQ_INFO_LIST_OBJ_DECLARE(conv2d_1_output_array_intq, AI_STATIC_CONST,
  AI_BUFFER_META_FLAG_SCALE_FLOAT|AI_BUFFER_META_FLAG_ZEROPOINT_S8, 1,
  AI_PACK_INTQ_INFO(
    AI_PACK_INTQ_SCALE(0.3023799955844879f),
    AI_PACK_INTQ_ZP(-128)))

/* Int quant #11 */
AI_INTQ_INFO_LIST_OBJ_DECLARE(conv2d_11_weights_array_intq, AI_STATIC_CONST,
  AI_BUFFER_META_FLAG_SCALE_FLOAT|AI_BUFFER_META_FLAG_ZEROPOINT_S8, 128,
  AI_PACK_INTQ_INFO(
    AI_PACK_INTQ_SCALE(0.0007153429323807359f, 1.3940008102508727e-05f, 0.005804498679935932f, 0.00287912180647254f, 0.001280174357816577f, 0.0012310234596952796f, 3.258211290813051e-05f, 0.00011099446419393644f, 0.002283430891111493f, 0.006438009440898895f, 0.003050707746297121f, 3.1018869776744395e-05f, 2.3225167751661502e-05f, 4.691476351581514e-05f, 0.0009178487816825509f, 7.416105745505774e-06f, 0.0025408051442354918f, 9.32254406507127e-05f, 0.004312175326049328f, 0.0033000921830534935f, 0.0014504013815894723f, 4.859547334490344e-05f, 0.002718978328630328f, 0.0009514041012153029f, 0.0013343082973733544f, 0.0024481879081577063f, 0.0008082530694082379f, 8.901495789359615e-07f, 0.002165822545066476f, 1.6489158952026628e-05f, 0.0103233577683568f, 0.0010559398215264082f, 0.0013351421803236008f, 0.0018431255593895912f, 0.0029570278711616993f, 0.0019626948051154613f, 0.0034648331347852945f, 0.0019757903646677732f, 0.0020856405608356f, 0.0009948036167770624f, 0.0022034726571291685f, 0.0010493500158190727f, 3.0202148991520517e-05f, 0.007712677586823702f, 4.0967046516016126e-05f, 0.009090978652238846f, 2.8862034014309756e-05f, 0.006220211274921894f, 0.0019244372379034758f, 0.001409909687936306f, 0.004411970265209675f, 0.003059127600863576f, 0.0016023016069084406f, 0.0004790481470990926f, 1.2947519280714914e-05f, 0.0012355929939076304f, 0.0007665446610189974f, 0.005319236312061548f, 0.003400379791855812f, 0.004538200795650482f, 0.0076329829171299934f, 0.0009669209248386323f, 1.779684907887713e-06f, 0.0008909990428946912f, 1.1984994671365712e-05f, 0.0012054246617481112f, 0.0020283665508031845f, 0.0010342831956222653f, 0.0010217084782198071f, 0.0022401732858270407f, 0.004546662326902151f, 0.001229614019393921f, 8.808468555798754e-05f, 0.00807003304362297f, 0.0009096847497858107f, 3.268830187153071e-05f, 2.6066174541483633e-05f, 2.31335980060976e-05f, 3.2351566915167496e-05f, 0.0015543807530775666f, 0.0017319401958957314f, 0.0017345104133710265f, 1.043398128786066e-06f, 0.0019122695084661245f, 0.0016586313722655177f, 0.0019414398120716214f, 4.2781030060723424e-05f, 0.0011605196632444859f, 0.00326347048394382f, 1.5742152754683048e-05f, 0.0028050567489117384f, 0.0007568225264549255f, 5.011124812881462e-05f, 2.213002517237328e-05f, 2.6748288291855715e-05f, 0.002342076040804386f, 0.0025522049982100725f, 5.550921196117997e-05f, 0.0020817937329411507f, 1.727908238535747e-05f, 0.0017087796004489064f, 2.3901593522168696e-05f, 0.0036833349149674177f, 4.241546776029281e-06f, 0.001684655318967998f, 0.00913497619330883f, 0.0008040133980102837f, 0.0008371181320399046f, 0.0026701316237449646f, 0.0067685507237911224f, 0.002307177521288395f, 0.0006327984156087041f, 4.481870564632118e-05f, 0.001275360118597746f, 0.00011567497858777642f, 1.0580484740785323e-05f, 0.000910708389710635f, 0.0001238637778442353f, 3.755898796953261e-05f, 0.004670005291700363f, 3.1017782021081075e-05f, 0.0014744186773896217f, 0.0024815509095788f, 3.325953730382025e-05f, 0.00467470521107316f, 1.1644528058241121e-05f, 0.0007417136803269386f, 2.824956209224183e-05f),
    AI_PACK_INTQ_ZP(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)))

/* Int quant #12 */
AI_INTQ_INFO_LIST_OBJ_DECLARE(conv2d_2_output_array_intq, AI_STATIC_CONST,
  AI_BUFFER_META_FLAG_SCALE_FLOAT|AI_BUFFER_META_FLAG_ZEROPOINT_S8, 1,
  AI_PACK_INTQ_INFO(
    AI_PACK_INTQ_SCALE(0.467665433883667f),
    AI_PACK_INTQ_ZP(-128)))

/* Int quant #13 */
AI_INTQ_INFO_LIST_OBJ_DECLARE(conv2d_3_output_array_intq, AI_STATIC_CONST,
  AI_BUFFER_META_FLAG_SCALE_FLOAT|AI_BUFFER_META_FLAG_ZEROPOINT_S8, 1,
  AI_PACK_INTQ_INFO(
    AI_PACK_INTQ_SCALE(0.2400805801153183f),
    AI_PACK_INTQ_ZP(-128)))

/* Int quant #14 */
AI_INTQ_INFO_LIST_OBJ_DECLARE(conv2d_4_output_array_intq, AI_STATIC_CONST,
  AI_BUFFER_META_FLAG_SCALE_FLOAT|AI_BUFFER_META_FLAG_ZEROPOINT_S8, 1,
  AI_PACK_INTQ_INFO(
    AI_PACK_INTQ_SCALE(0.47005903720855713f),
    AI_PACK_INTQ_ZP(-128)))

/* Int quant #15 */
AI_INTQ_INFO_LIST_OBJ_DECLARE(conv2d_5_output_array_intq, AI_STATIC_CONST,
  AI_BUFFER_META_FLAG_SCALE_FLOAT|AI_BUFFER_META_FLAG_ZEROPOINT_S8, 1,
  AI_PACK_INTQ_INFO(
    AI_PACK_INTQ_SCALE(0.6989559531211853f),
    AI_PACK_INTQ_ZP(-18)))

/* Int quant #16 */
AI_INTQ_INFO_LIST_OBJ_DECLARE(conv2d_12_weights_array_intq, AI_STATIC_CONST,
  AI_BUFFER_META_FLAG_SCALE_FLOAT|AI_BUFFER_META_FLAG_ZEROPOINT_S8, 128,
  AI_PACK_INTQ_INFO(
    AI_PACK_INTQ_SCALE(0.008106390945613384f, 0.7027102112770081f, 0.0014468521112576127f, 0.003090782556682825f, 0.005495684687048197f, 0.006175065413117409f, 0.05017661675810814f, 0.09852027148008347f, 0.003854595823213458f, 0.001987180905416608f, 0.0032851481810212135f, 0.3042233884334564f, 0.042353421449661255f, 0.0018334108171984553f, 0.00416693277657032f, 0.02428310364484787f, 0.0026673264801502228f, 0.11729442328214645f, 0.001480846549384296f, 0.002600888255983591f, 0.006525619886815548f, 0.22383622825145721f, 0.0036361373495310545f, 0.00309192668646574f, 0.08634007722139359f, 0.0034985297825187445f, 0.008569961413741112f, 0.05085350200533867f, 0.0017834313912317157f, 0.1255272626876831f, 0.0006107866647653282f, 0.004067264962941408f, 0.006623155437409878f, 0.010649474337697029f, 0.0032263898756355047f, 0.002079937607049942f, 0.0020247451029717922f, 0.0025474519934505224f, 0.003485065419226885f, 0.12226840108633041f, 0.006390934810042381f, 0.16669762134552002f, 0.029489291831851006f, 0.0012247079284861684f, 0.1869741678237915f, 0.002740918193012476f, 0.022332103922963142f, 0.0005524996668100357f, 0.006061906460672617f, 0.007193965837359428f, 0.001474681543186307f, 0.0020849944557994604f, 0.003989742137491703f, 0.005689017940312624f, 0.07015467435121536f, 0.06123703345656395f, 0.0031773934606462717f, 0.0019478070316836238f, 0.0015861004358157516f, 0.0020718069281429052f, 0.0012357893865555525f, 0.004269413184374571f, 0.0195018220692873f, 0.007212049327790737f, 0.0025318812113255262f, 0.00399440061300993f, 0.0018153315177187324f, 0.013929967768490314f, 0.0030502823647111654f, 0.0029177351389080286f, 0.0019856414292007685f, 0.00777480099350214f, 0.12241638451814651f, 0.0006141430931165814f, 0.0076601821929216385f, 0.1562938392162323f, 0.36204737424850464f, 0.04386128857731819f, 0.14751392602920532f, 0.0023981137201189995f, 0.002880724845454097f, 0.004531802609562874f, 0.07420464605093002f, 0.007119054440408945f, 0.002685094950720668f, 0.004575565457344055f, 0.07915186136960983f, 0.005277042277157307f, 0.0014799351338297129f, 0.05000811442732811f, 0.002111596753820777f, 0.6832271814346313f, 0.31787770986557007f, 0.17521396279335022f, 0.2675751745700836f, 0.003450461197644472f, 0.0027789620216935873f, 0.3096756935119629f, 0.004412013106048107f, 0.07764329761266708f, 0.00274130841717124f, 0.23056620359420776f, 0.0008696013828739524f, 0.24402695894241333f, 0.004654899705201387f, 0.0014394193422049284f, 0.011346551589667797f, 0.008966293185949326f, 0.0016967997653409839f, 0.0009679742506705225f, 0.0038670015055686235f, 0.012111613526940346f, 0.03762759640812874f, 0.0038056732155382633f, 0.2288447916507721f, 0.024985767900943756f, 0.00946085900068283f, 0.4657804071903229f, 0.12401130795478821f, 0.0011233376571908593f, 0.10927419364452362f, 0.0033874621149152517f, 0.0014979070983827114f, 0.2145107090473175f, 0.001605598023161292f, 0.01005728729069233f, 0.012183274142444134f, 0.19235101342201233f),
    AI_PACK_INTQ_ZP(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)))

/* Int quant #17 */
AI_INTQ_INFO_LIST_OBJ_DECLARE(conv2d_6_output_array_intq, AI_STATIC_CONST,
  AI_BUFFER_META_FLAG_SCALE_FLOAT|AI_BUFFER_META_FLAG_ZEROPOINT_S8, 1,
  AI_PACK_INTQ_INFO(
    AI_PACK_INTQ_SCALE(0.47861212491989136f),
    AI_PACK_INTQ_ZP(-128)))

/* Int quant #18 */
AI_INTQ_INFO_LIST_OBJ_DECLARE(conv2d_7_output_array_intq, AI_STATIC_CONST,
  AI_BUFFER_META_FLAG_SCALE_FLOAT|AI_BUFFER_META_FLAG_ZEROPOINT_S8, 1,
  AI_PACK_INTQ_INFO(
    AI_PACK_INTQ_SCALE(0.643443763256073f),
    AI_PACK_INTQ_ZP(7)))

/* Int quant #19 */
AI_INTQ_INFO_LIST_OBJ_DECLARE(conv2d_8_output_array_intq, AI_STATIC_CONST,
  AI_BUFFER_META_FLAG_SCALE_FLOAT|AI_BUFFER_META_FLAG_ZEROPOINT_S8, 1,
  AI_PACK_INTQ_INFO(
    AI_PACK_INTQ_SCALE(0.5537903904914856f),
    AI_PACK_INTQ_ZP(-128)))

/* Int quant #20 */
AI_INTQ_INFO_LIST_OBJ_DECLARE(conv2d_10_output_array_intq, AI_STATIC_CONST,
  AI_BUFFER_META_FLAG_SCALE_FLOAT|AI_BUFFER_META_FLAG_ZEROPOINT_S8, 1,
  AI_PACK_INTQ_INFO(
    AI_PACK_INTQ_SCALE(0.9004228115081787f),
    AI_PACK_INTQ_ZP(-7)))

/* Int quant #21 */
AI_INTQ_INFO_LIST_OBJ_DECLARE(conv2d_13_weights_array_intq, AI_STATIC_CONST,
  AI_BUFFER_META_FLAG_SCALE_FLOAT|AI_BUFFER_META_FLAG_ZEROPOINT_S8, 256,
  AI_PACK_INTQ_INFO(
    AI_PACK_INTQ_SCALE(0.002305401489138603f, 0.00013688206672668457f, 0.0021645992528647184f, 0.0029677546117454767f, 0.0013559689978137612f, 5.208633228903636e-05f, 0.0011936633381992579f, 5.480152594827814e-06f, 0.0025047515518963337f, 0.001826656167395413f, 1.436774073226843e-05f, 0.00316934403963387f, 4.3789881601696834e-05f, 4.655506927520037e-05f, 2.363450676057255e-06f, 0.001477269222959876f, 0.0007446243544109166f, 1.7118742334787385e-07f, 0.0018685307586565614f, 0.003062670584768057f, 0.0010407959343865514f, 0.0022137982305139303f, 6.283216498559341e-05f, 3.059113078052178e-05f, 7.590105815324932e-05f, 2.7473051886772737e-06f, 0.0031501378398388624f, 0.0038677214179188013f, 4.6599539018643554e-06f, 0.002213675295934081f, 0.0037040223833173513f, 0.0021942509338259697f, 0.0026449027936905622f, 9.041243174578995e-06f, 0.0028464486822485924f, 1.1931092558370437e-06f, 0.0015537948347628117f, 0.0028656988870352507f, 0.0024506100453436375f, 4.66171059088083e-06f, 0.0011588361812755466f, 0.004086561035364866f, 0.002071578986942768f, 1.717600753181614e-05f, 1.0459997611178551e-05f, 0.002633206080645323f, 0.002064501168206334f, 0.002085702959448099f, 0.0019488425459712744f, 0.00139586441218853f, 0.0025016574654728174f, 1.9597015125327744e-05f, 4.8500542106921785e-06f, 4.316827835282311e-05f, 0.003141594585031271f, 0.0013684870209544897f, 0.0015150114195421338f, 0.0023151927161961794f, 0.0016747370827943087f, 9.360292460769415e-05f, 2.523207149351947e-05f, 6.702051177853718e-05f, 6.264539820222126e-07f, 0.0011772455181926489f, 0.0020750004332512617f, 0.0014639698201790452f, 5.8131859987042844e-05f, 4.3743359128711745e-05f, 2.2522992367157713e-05f, 6.7367031988396775e-06f, 0.0019546435214579105f, 0.00198829616419971f, 5.593268360826187e-05f, 5.044532736064866e-05f, 0.004071648232638836f, 0.002192340325564146f, 5.34853779754485e-06f, 5.735919785365695e-06f, 3.8119495002320036e-05f, 2.4187022063415498e-05f, 0.0018312196480110288f, 0.005418910179287195f, 4.272001660865499e-06f, 0.0024905605241656303f, 0.00202861987054348f, 0.001950774691067636f, 0.001481201034039259f, 4.0282517147716135e-05f, 0.0025227623991668224f, 0.0029606034513562918f, 2.738791772571858e-05f, 0.0025549528654664755f, 7.184726769082772e-07f, 0.003618986578658223f, 0.0024311223533004522f, 0.0031053489074110985f, 4.2385971028124914e-05f, 5.668598896590993e-05f, 3.066280987695791e-05f, 0.0016062407521530986f, 0.0019143682438880205f, 5.95845231146086e-05f, 4.834201899939217e-05f, 9.06814238987863e-06f, 8.889250602805987e-05f, 1.89147667697398e-05f, 5.1499206165317446e-05f, 0.0013825667556375265f, 0.00328680663369596f, 1.5190057638392318e-05f, 0.002648548223078251f, 0.001570681226439774f, 9.293992479797453e-05f, 5.9488862461876124e-05f, 5.945346856606193e-05f, 1.161300406238297e-05f, 4.5933036744827405e-05f, 8.868032637110446e-06f, 0.0019852565601468086f, 3.724332054844126e-05f, 2.3117945602280088e-05f, 0.0029980449471622705f, 0.001381341484375298f, 5.1061579142697155e-05f, 0.002068206435069442f, 7.680305861867964e-05f, 0.001694139908067882f, 0.004637144971638918f, 0.0011358472984284163f, 0.002117681549862027f, 0.00011230643576709554f, 0.0019639134407043457f, 0.0016473953146487474f, 0.003844664664939046f, 0.002295371377840638f, 0.002388716908171773f, 0.00046568713150918484f, 1.5099604752322193e-05f, 0.0019196870271116495f, 5.407435310189612e-05f, 1.6032447092584334e-05f, 0.0020075810607522726f, 0.0019370169611647725f, 0.0026747160591185093f, 7.548747817054391e-05f, 0.0017808086704462767f, 4.1872714064083993e-05f, 0.0014571537030860782f, 5.376941408030689e-05f, 0.0031175825279206038f, 0.0008984927553683519f, 3.5289660445414484e-05f, 0.00279908231459558f, 9.430804311705288e-06f, 0.0032100011594593525f, 4.226543751428835e-05f, 0.0019456774462014437f, 1.3529977877624333e-05f, 6.482509343186393e-05f, 0.0024148081429302692f, 2.4021608624025248e-05f, 3.6303288652561605e-05f, 0.0011780484346672893f, 2.2434138372773305e-05f, 2.516277163522318e-05f, 7.717450898780953e-06f, 0.0019489462720230222f, 4.416372757987119e-05f, 0.0026910481974482536f, 4.1100844100583345e-05f, 4.89074554934632e-05f, 4.9090172979049385e-05f, 0.002272943267598748f, 1.4609538993681781e-05f, 2.8047331852576463e-06f, 0.0026940808165818453f, 2.3635022444068454e-05f, 3.286580613348633e-05f, 9.800536645343527e-06f, 5.574608439928852e-05f, 5.769317067461088e-05f, 1.1546907217052649e-06f, 0.001580249285325408f, 5.320218770066276e-05f, 1.1321429155941587e-05f, 0.0022914018481969833f, 3.834124800050631e-05f, 2.000936547119636e-06f, 0.002968037035316229f, 1.0053294317913242e-05f, 2.109804881911259e-05f, 2.231178223155439e-05f, 2.7349383344699163e-06f, 0.001142835826613009f, 0.00265809940174222f, 2.653996489243582e-05f, 7.12061591912061e-05f, 1.0962155101879034e-05f, 0.0012387397000566125f, 5.33168622496305e-06f, 0.0031313637737184763f, 8.886682394404488e-07f, 0.0020690064411610365f, 5.8059893490280956e-05f, 0.0015227638650685549f, 3.136082568744314e-06f, 5.085486009193119e-06f, 0.0029672894161194563f, 9.726681309984997e-05f, 5.205986963119358e-05f, 6.171046698000282e-05f, 0.0014980545965954661f, 1.4873208783683367e-05f, 2.7442434657132253e-05f, 6.241120718186721e-05f, 0.0027448309119790792f, 9.585166480974294e-06f, 0.001711833174340427f, 0.002564244670793414f, 0.001130568445660174f, 1.3960573596705217e-05f, 2.606691123219207e-05f, 0.0024326846469193697f, 0.0022284192964434624f, 6.220234354259446e-05f, 0.0011926740407943726f, 4.1224197047995403e-05f, 3.3053661354642827e-06f, 8.031254310481017e-07f, 0.0031229956075549126f, 0.0026926989667117596f, 0.002894103992730379f, 6.492519787570927e-06f, 0.0013467277167364955f, 4.5606600906467065e-05f, 0.0013960693031549454f, 1.6473137293360196e-05f, 4.7858329708105884e-06f, 6.64817271172069e-05f, 5.750884520239197e-05f, 1.5071464076754637e-05f, 0.0025614723563194275f, 0.00321099441498518f, 0.001416538842022419f, 4.804091531696031e-06f, 5.9322239394532517e-05f, 0.0012280307710170746f, 4.2418068915139884e-05f, 2.5820972950896248e-05f, 0.0001388885866617784f, 2.5094628654187545e-05f, 0.004394242540001869f, 6.10756324022077e-05f, 0.001625492819584906f, 0.0019264479633420706f, 0.0013940866338089108f),
    AI_PACK_INTQ_ZP(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)))

/* Int quant #22 */
AI_INTQ_INFO_LIST_OBJ_DECLARE(conv2d_11_output_array_intq, AI_STATIC_CONST,
  AI_BUFFER_META_FLAG_SCALE_FLOAT|AI_BUFFER_META_FLAG_ZEROPOINT_S8, 1,
  AI_PACK_INTQ_INFO(
    AI_PACK_INTQ_SCALE(0.5382390022277832f),
    AI_PACK_INTQ_ZP(-128)))

/* Int quant #23 */
AI_INTQ_INFO_LIST_OBJ_DECLARE(conv2d_12_output_array_intq, AI_STATIC_CONST,
  AI_BUFFER_META_FLAG_SCALE_FLOAT|AI_BUFFER_META_FLAG_ZEROPOINT_S8, 1,
  AI_PACK_INTQ_INFO(
    AI_PACK_INTQ_SCALE(1.1393173933029175f),
    AI_PACK_INTQ_ZP(-9)))

/* Int quant #24 */
AI_INTQ_INFO_LIST_OBJ_DECLARE(conv2d_13_output_array_intq, AI_STATIC_CONST,
  AI_BUFFER_META_FLAG_SCALE_FLOAT|AI_BUFFER_META_FLAG_ZEROPOINT_S8, 1,
  AI_PACK_INTQ_INFO(
    AI_PACK_INTQ_SCALE(0.42826321721076965f),
    AI_PACK_INTQ_ZP(-128)))

/* Int quant #25 */
AI_INTQ_INFO_LIST_OBJ_DECLARE(conv2d_14_output_array_intq, AI_STATIC_CONST,
  AI_BUFFER_META_FLAG_SCALE_FLOAT|AI_BUFFER_META_FLAG_ZEROPOINT_S8, 1,
  AI_PACK_INTQ_INFO(
    AI_PACK_INTQ_SCALE(0.40108391642570496f),
    AI_PACK_INTQ_ZP(93)))

/* Int quant #26 */
AI_INTQ_INFO_LIST_OBJ_DECLARE(conv2d_14_weights_array_intq, AI_STATIC_CONST,
  AI_BUFFER_META_FLAG_SCALE_FLOAT|AI_BUFFER_META_FLAG_ZEROPOINT_S8, 30,
  AI_PACK_INTQ_INFO(
    AI_PACK_INTQ_SCALE(0.0016212379559874535f, 0.0019804604817181826f, 0.000911989773157984f, 0.0006883225287310779f, 0.005869165062904358f, 0.0005155777907930315f, 0.0021870331838726997f, 0.0018907078774645925f, 0.0005851235473528504f, 0.0005781349027529359f, 0.003911399282515049f, 0.0008208455401472747f, 0.002365309512242675f, 0.0026487307623028755f, 0.0007700699497945607f, 0.0005574573879130185f, 0.002485642908141017f, 0.0009880544384941459f, 0.0019838926382362843f, 0.0018746453570201993f, 0.00024817330995574594f, 0.0008179261931218207f, 0.001949029741808772f, 0.0007918881601653993f, 0.0013426176737993956f, 0.0021068216301500797f, 0.0013028995599597692f, 0.0019403479527682066f, 0.003209423739463091f, 0.0007163761183619499f),
    AI_PACK_INTQ_ZP(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)))

/* Int quant #27 */
AI_INTQ_INFO_LIST_OBJ_DECLARE(conv2d_1_weights_array_intq, AI_STATIC_CONST,
  AI_BUFFER_META_FLAG_SCALE_FLOAT|AI_BUFFER_META_FLAG_ZEROPOINT_S8, 16,
  AI_PACK_INTQ_INFO(
    AI_PACK_INTQ_SCALE(0.05269309878349304f, 0.030839625746011734f, 0.09625233709812164f, 0.02835976704955101f, 0.076607346534729f, 0.10714225471019745f, 0.07663627713918686f, 0.03854849934577942f, 0.024398431181907654f, 0.1007375419139862f, 0.05714157968759537f, 0.049341656267642975f, 0.04394785314798355f, 0.05239645764231682f, 0.1562049686908722f, 0.056869521737098694f),
    AI_PACK_INTQ_ZP(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)))

/* Int quant #28 */
AI_INTQ_INFO_LIST_OBJ_DECLARE(conv2d_2_weights_array_intq, AI_STATIC_CONST,
  AI_BUFFER_META_FLAG_SCALE_FLOAT|AI_BUFFER_META_FLAG_ZEROPOINT_S8, 32,
  AI_PACK_INTQ_INFO(
    AI_PACK_INTQ_SCALE(0.004800759721547365f, 0.005684948526322842f, 0.004108210559934378f, 0.004515446722507477f, 0.007786314003169537f, 0.002190855098888278f, 0.006532204803079367f, 0.00616425322368741f, 0.006059077102690935f, 0.003193061100319028f, 0.002105285879224539f, 1.818421333155129e-05f, 0.00469240453094244f, 0.003946645185351372f, 0.0045750876888632774f, 0.0011848824797198176f, 0.01133535522967577f, 6.732439214829355e-05f, 0.008399332873523235f, 0.009662174619734287f, 0.005786094814538956f, 0.00821487233042717f, 0.006611504592001438f, 0.002703205682337284f, 0.003230838803574443f, 0.005081061273813248f, 0.0017944970168173313f, 8.82206586538814e-06f, 0.0034957060124725103f, 0.0018249665154144168f, 0.0057786600664258f, 0.002376711694523692f),
    AI_PACK_INTQ_ZP(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)))

/* Int quant #29 */
AI_INTQ_INFO_LIST_OBJ_DECLARE(conv2d_3_weights_array_intq, AI_STATIC_CONST,
  AI_BUFFER_META_FLAG_SCALE_FLOAT|AI_BUFFER_META_FLAG_ZEROPOINT_S8, 64,
  AI_PACK_INTQ_INFO(
    AI_PACK_INTQ_SCALE(1.126530423789518e-05f, 0.00169167120475322f, 3.092553743044846e-05f, 0.003973078913986683f, 0.0013906612293794751f, 0.003029518062248826f, 0.0024599782191216946f, 0.0015799474203959107f, 0.0013198020169511437f, 0.004982441198080778f, 0.001962637295946479f, 0.003902131225913763f, 0.0018931167433038354f, 0.0030480900313705206f, 0.0032727483194321394f, 0.003977417480200529f, 0.002511529019102454f, 0.004462813027203083f, 0.0019217799417674541f, 0.005884240381419659f, 0.0022924821823835373f, 0.0038080671802163124f, 0.004367423709481955f, 0.004421009216457605f, 6.990878318902105e-05f, 0.0014225231716409326f, 0.0035710614174604416f, 2.6310046450817026e-05f, 0.00263041234575212f, 0.002018761821091175f, 0.0010757911950349808f, 1.9307103684695903e-06f, 2.1391280824900605e-05f, 0.002483100164681673f, 0.0018841249402612448f, 0.0035176645033061504f, 0.002851261990144849f, 0.004095774609595537f, 0.0018264241516590118f, 0.004841110669076443f, 0.0016425874782726169f, 0.002330121584236622f, 0.0041801040060818195f, 0.0019471636041998863f, 0.0017438651993870735f, 0.0012463503517210484f, 0.0037241564132273197f, 0.001265058177523315f, 0.0013217461528256536f, 0.0031453771516680717f, 2.879017665691208e-05f, 0.0027624601498246193f, 0.0022596295457333326f, 0.0035344308707863092f, 0.006446074694395065f, 0.001067055156454444f, 0.005443232599645853f, 0.005515739321708679f, 0.0024917731061577797f, 0.0032096137292683125f, 3.0567283829441294e-05f, 0.002692648209631443f, 0.0035295530688017607f, 0.002938200021162629f),
    AI_PACK_INTQ_ZP(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)))

/* Int quant #30 */
AI_INTQ_INFO_LIST_OBJ_DECLARE(conv2d_8_scratch1_array_intq, AI_STATIC_CONST,
  AI_BUFFER_META_FLAG_SCALE_FLOAT|AI_BUFFER_META_FLAG_ZEROPOINT_S8, 1,
  AI_PACK_INTQ_INFO(
    AI_PACK_INTQ_SCALE(0.5537903904914856f),
    AI_PACK_INTQ_ZP(-128)))

/**  Tensor declarations section  *********************************************/
/* Tensor #0 */
AI_TENSOR_OBJ_DECLARE(
  conv2d_4_weights, AI_STATIC,
  0, 0x1,
  AI_SHAPE_INIT(4, 64, 3, 3, 128), AI_STRIDE_INIT(4, 1, 64, 192, 576),
  1, &conv2d_4_weights_array, &conv2d_4_weights_array_intq)

/* Tensor #1 */
AI_TENSOR_OBJ_DECLARE(
  conv2d_11_scratch0, AI_STATIC,
  1, 0x0,
  AI_SHAPE_INIT(4, 1, 2304, 1, 1), AI_STRIDE_INIT(4, 1, 1, 2304, 2304),
  1, &conv2d_11_scratch0_array, NULL)

/* Tensor #2 */
AI_TENSOR_OBJ_DECLARE(
  conv2d_4_bias, AI_STATIC,
  2, 0x0,
  AI_SHAPE_INIT(4, 1, 128, 1, 1), AI_STRIDE_INIT(4, 4, 4, 512, 512),
  1, &conv2d_4_bias_array, NULL)

/* Tensor #3 */
AI_TENSOR_OBJ_DECLARE(
  conv2d_5_weights, AI_STATIC,
  3, 0x1,
  AI_SHAPE_INIT(4, 128, 3, 3, 1), AI_STRIDE_INIT(4, 1, 1, 128, 384),
  1, &conv2d_5_weights_array, &conv2d_5_weights_array_intq)

/* Tensor #4 */
AI_TENSOR_OBJ_DECLARE(
  conv2d_12_scratch0, AI_STATIC,
  4, 0x0,
  AI_SHAPE_INIT(4, 1, 4737, 1, 1), AI_STRIDE_INIT(4, 1, 1, 4737, 4737),
  1, &conv2d_12_scratch0_array, NULL)

/* Tensor #5 */
AI_TENSOR_OBJ_DECLARE(
  conv2d_4_pad_before_output, AI_STATIC,
  5, 0x1,
  AI_SHAPE_INIT(4, 1, 64, 26, 26), AI_STRIDE_INIT(4, 1, 1, 64, 1664),
  1, &conv2d_4_pad_before_output_array, &conv2d_4_pad_before_output_array_intq)

/* Tensor #6 */
AI_TENSOR_OBJ_DECLARE(
  conv2d_5_bias, AI_STATIC,
  6, 0x0,
  AI_SHAPE_INIT(4, 1, 128, 1, 1), AI_STRIDE_INIT(4, 4, 4, 512, 512),
  1, &conv2d_5_bias_array, NULL)

/* Tensor #7 */
AI_TENSOR_OBJ_DECLARE(
  conv2d_13_scratch0, AI_STATIC,
  7, 0x0,
  AI_SHAPE_INIT(4, 1, 3072, 1, 1), AI_STRIDE_INIT(4, 1, 1, 3072, 3072),
  1, &conv2d_13_scratch0_array, NULL)

/* Tensor #8 */
AI_TENSOR_OBJ_DECLARE(
  conv2d_3_pad_before_output, AI_STATIC,
  8, 0x1,
  AI_SHAPE_INIT(4, 1, 32, 50, 50), AI_STRIDE_INIT(4, 1, 1, 32, 1600),
  1, &conv2d_3_pad_before_output_array, &conv2d_3_pad_before_output_array_intq)

/* Tensor #9 */
AI_TENSOR_OBJ_DECLARE(
  conv2d_6_weights, AI_STATIC,
  9, 0x1,
  AI_SHAPE_INIT(4, 128, 1, 1, 256), AI_STRIDE_INIT(4, 1, 128, 128, 128),
  1, &conv2d_6_weights_array, &conv2d_6_weights_array_intq)

/* Tensor #10 */
AI_TENSOR_OBJ_DECLARE(
  conv2d_14_scratch0, AI_STATIC,
  10, 0x0,
  AI_SHAPE_INIT(4, 1, 1324, 1, 1), AI_STRIDE_INIT(4, 1, 1, 1324, 1324),
  1, &conv2d_14_scratch0_array, NULL)

/* Tensor #11 */
AI_TENSOR_OBJ_DECLARE(
  conv2d_6_bias, AI_STATIC,
  11, 0x0,
  AI_SHAPE_INIT(4, 1, 256, 1, 1), AI_STRIDE_INIT(4, 4, 4, 1024, 1024),
  1, &conv2d_6_bias_array, NULL)

/* Tensor #12 */
AI_TENSOR_OBJ_DECLARE(
  conv2d_7_weights, AI_STATIC,
  12, 0x1,
  AI_SHAPE_INIT(4, 256, 3, 3, 1), AI_STRIDE_INIT(4, 1, 1, 256, 768),
  1, &conv2d_7_weights_array, &conv2d_7_weights_array_intq)

/* Tensor #13 */
AI_TENSOR_OBJ_DECLARE(
  conv2d_7_bias, AI_STATIC,
  13, 0x0,
  AI_SHAPE_INIT(4, 1, 256, 1, 1), AI_STRIDE_INIT(4, 4, 4, 1024, 1024),
  1, &conv2d_7_bias_array, NULL)

/* Tensor #14 */
AI_TENSOR_OBJ_DECLARE(
  conv2d_8_weights, AI_STATIC,
  14, 0x1,
  AI_SHAPE_INIT(4, 256, 1, 1, 256), AI_STRIDE_INIT(4, 1, 256, 256, 256),
  1, &conv2d_8_weights_array, &conv2d_8_weights_array_intq)

/* Tensor #15 */
AI_TENSOR_OBJ_DECLARE(
  conv2d_8_bias, AI_STATIC,
  15, 0x0,
  AI_SHAPE_INIT(4, 1, 256, 1, 1), AI_STRIDE_INIT(4, 4, 4, 1024, 1024),
  1, &conv2d_8_bias_array, NULL)

/* Tensor #16 */
AI_TENSOR_OBJ_DECLARE(
  conv2d_10_weights, AI_STATIC,
  16, 0x1,
  AI_SHAPE_INIT(4, 256, 3, 3, 1), AI_STRIDE_INIT(4, 1, 1, 256, 768),
  1, &conv2d_10_weights_array, &conv2d_10_weights_array_intq)

/* Tensor #17 */
AI_TENSOR_OBJ_DECLARE(
  serving_default_image_input0_output, AI_STATIC,
  17, 0x1,
  AI_SHAPE_INIT(4, 1, 3, 192, 192), AI_STRIDE_INIT(4, 1, 1, 3, 576),
  1, &serving_default_image_input0_output_array, &serving_default_image_input0_output_array_intq)

/* Tensor #18 */
AI_TENSOR_OBJ_DECLARE(
  conv2d_10_bias, AI_STATIC,
  18, 0x0,
  AI_SHAPE_INIT(4, 1, 256, 1, 1), AI_STRIDE_INIT(4, 4, 4, 1024, 1024),
  1, &conv2d_10_bias_array, NULL)

/* Tensor #19 */
AI_TENSOR_OBJ_DECLARE(
  conversion_0_output, AI_STATIC,
  19, 0x1,
  AI_SHAPE_INIT(4, 1, 3, 192, 192), AI_STRIDE_INIT(4, 1, 1, 3, 576),
  1, &conversion_0_output_array, &conversion_0_output_array_intq)

/* Tensor #20 */
AI_TENSOR_OBJ_DECLARE(
  conv2d_1_output, AI_STATIC,
  20, 0x1,
  AI_SHAPE_INIT(4, 1, 16, 96, 96), AI_STRIDE_INIT(4, 1, 1, 16, 1536),
  1, &conv2d_1_output_array, &conv2d_1_output_array_intq)

/* Tensor #21 */
AI_TENSOR_OBJ_DECLARE(
  conv2d_11_weights, AI_STATIC,
  21, 0x1,
  AI_SHAPE_INIT(4, 256, 1, 1, 128), AI_STRIDE_INIT(4, 1, 256, 256, 256),
  1, &conv2d_11_weights_array, &conv2d_11_weights_array_intq)

/* Tensor #22 */
AI_TENSOR_OBJ_DECLARE(
  conv2d_2_output, AI_STATIC,
  22, 0x1,
  AI_SHAPE_INIT(4, 1, 32, 48, 48), AI_STRIDE_INIT(4, 1, 1, 32, 1536),
  1, &conv2d_2_output_array, &conv2d_2_output_array_intq)

/* Tensor #23 */
AI_TENSOR_OBJ_DECLARE(
  conv2d_3_output, AI_STATIC,
  23, 0x1,
  AI_SHAPE_INIT(4, 1, 64, 24, 24), AI_STRIDE_INIT(4, 1, 1, 64, 1536),
  1, &conv2d_3_output_array, &conv2d_3_output_array_intq)

/* Tensor #24 */
AI_TENSOR_OBJ_DECLARE(
  conv2d_11_bias, AI_STATIC,
  24, 0x0,
  AI_SHAPE_INIT(4, 1, 128, 1, 1), AI_STRIDE_INIT(4, 4, 4, 512, 512),
  1, &conv2d_11_bias_array, NULL)

/* Tensor #25 */
AI_TENSOR_OBJ_DECLARE(
  conv2d_4_output, AI_STATIC,
  25, 0x1,
  AI_SHAPE_INIT(4, 1, 128, 12, 12), AI_STRIDE_INIT(4, 1, 1, 128, 1536),
  1, &conv2d_4_output_array, &conv2d_4_output_array_intq)

/* Tensor #26 */
AI_TENSOR_OBJ_DECLARE(
  conv2d_5_output, AI_STATIC,
  26, 0x1,
  AI_SHAPE_INIT(4, 1, 128, 12, 12), AI_STRIDE_INIT(4, 1, 1, 128, 1536),
  1, &conv2d_5_output_array, &conv2d_5_output_array_intq)

/* Tensor #27 */
AI_TENSOR_OBJ_DECLARE(
  conv2d_12_weights, AI_STATIC,
  27, 0x1,
  AI_SHAPE_INIT(4, 128, 3, 3, 1), AI_STRIDE_INIT(4, 1, 1, 128, 384),
  1, &conv2d_12_weights_array, &conv2d_12_weights_array_intq)

/* Tensor #28 */
AI_TENSOR_OBJ_DECLARE(
  conv2d_6_output, AI_STATIC,
  28, 0x1,
  AI_SHAPE_INIT(4, 1, 256, 12, 12), AI_STRIDE_INIT(4, 1, 1, 256, 3072),
  1, &conv2d_6_output_array, &conv2d_6_output_array_intq)

/* Tensor #29 */
AI_TENSOR_OBJ_DECLARE(
  conv2d_7_output, AI_STATIC,
  29, 0x1,
  AI_SHAPE_INIT(4, 1, 256, 12, 12), AI_STRIDE_INIT(4, 1, 1, 256, 3072),
  1, &conv2d_7_output_array, &conv2d_7_output_array_intq)

/* Tensor #30 */
AI_TENSOR_OBJ_DECLARE(
  conv2d_12_bias, AI_STATIC,
  30, 0x0,
  AI_SHAPE_INIT(4, 1, 128, 1, 1), AI_STRIDE_INIT(4, 4, 4, 512, 512),
  1, &conv2d_12_bias_array, NULL)

/* Tensor #31 */
AI_TENSOR_OBJ_DECLARE(
  conv2d_8_output, AI_STATIC,
  31, 0x1,
  AI_SHAPE_INIT(4, 1, 256, 12, 12), AI_STRIDE_INIT(4, 1, 1, 256, 3072),
  1, &conv2d_8_output_array, &conv2d_8_output_array_intq)

/* Tensor #32 */
AI_TENSOR_OBJ_DECLARE(
  conv2d_10_output, AI_STATIC,
  32, 0x1,
  AI_SHAPE_INIT(4, 1, 256, 12, 12), AI_STRIDE_INIT(4, 1, 1, 256, 3072),
  1, &conv2d_10_output_array, &conv2d_10_output_array_intq)

/* Tensor #33 */
AI_TENSOR_OBJ_DECLARE(
  conv2d_13_weights, AI_STATIC,
  33, 0x1,
  AI_SHAPE_INIT(4, 128, 1, 1, 256), AI_STRIDE_INIT(4, 1, 128, 128, 128),
  1, &conv2d_13_weights_array, &conv2d_13_weights_array_intq)

/* Tensor #34 */
AI_TENSOR_OBJ_DECLARE(
  conv2d_11_output, AI_STATIC,
  34, 0x1,
  AI_SHAPE_INIT(4, 1, 128, 12, 12), AI_STRIDE_INIT(4, 1, 1, 128, 1536),
  1, &conv2d_11_output_array, &conv2d_11_output_array_intq)

/* Tensor #35 */
AI_TENSOR_OBJ_DECLARE(
  conv2d_12_output, AI_STATIC,
  35, 0x1,
  AI_SHAPE_INIT(4, 1, 128, 12, 12), AI_STRIDE_INIT(4, 1, 1, 128, 1536),
  1, &conv2d_12_output_array, &conv2d_12_output_array_intq)

/* Tensor #36 */
AI_TENSOR_OBJ_DECLARE(
  conv2d_13_bias, AI_STATIC,
  36, 0x0,
  AI_SHAPE_INIT(4, 1, 256, 1, 1), AI_STRIDE_INIT(4, 4, 4, 1024, 1024),
  1, &conv2d_13_bias_array, NULL)

/* Tensor #37 */
AI_TENSOR_OBJ_DECLARE(
  conv2d_13_output, AI_STATIC,
  37, 0x1,
  AI_SHAPE_INIT(4, 1, 256, 12, 12), AI_STRIDE_INIT(4, 1, 1, 256, 3072),
  1, &conv2d_13_output_array, &conv2d_13_output_array_intq)

/* Tensor #38 */
AI_TENSOR_OBJ_DECLARE(
  conv2d_14_output, AI_STATIC,
  38, 0x1,
  AI_SHAPE_INIT(4, 1, 30, 12, 12), AI_STRIDE_INIT(4, 1, 1, 30, 360),
  1, &conv2d_14_output_array, &conv2d_14_output_array_intq)

/* Tensor #39 */
AI_TENSOR_OBJ_DECLARE(
  conv2d_14_weights, AI_STATIC,
  39, 0x1,
  AI_SHAPE_INIT(4, 256, 1, 1, 30), AI_STRIDE_INIT(4, 1, 256, 256, 256),
  1, &conv2d_14_weights_array, &conv2d_14_weights_array_intq)

/* Tensor #40 */
AI_TENSOR_OBJ_DECLARE(
  conversion_15_output, AI_STATIC,
  40, 0x0,
  AI_SHAPE_INIT(4, 1, 30, 12, 12), AI_STRIDE_INIT(4, 4, 4, 120, 1440),
  1, &conversion_15_output_array, NULL)

/* Tensor #41 */
AI_TENSOR_OBJ_DECLARE(
  conv2d_14_bias, AI_STATIC,
  41, 0x0,
  AI_SHAPE_INIT(4, 1, 30, 1, 1), AI_STRIDE_INIT(4, 4, 4, 120, 120),
  1, &conv2d_14_bias_array, NULL)

/* Tensor #42 */
AI_TENSOR_OBJ_DECLARE(
  conv2d_1_scratch0, AI_STATIC,
  42, 0x0,
  AI_SHAPE_INIT(4, 1, 1196, 1, 1), AI_STRIDE_INIT(4, 1, 1, 1196, 1196),
  1, &conv2d_1_scratch0_array, NULL)

/* Tensor #43 */
AI_TENSOR_OBJ_DECLARE(
  conv2d_2_scratch0, AI_STATIC,
  43, 0x0,
  AI_SHAPE_INIT(4, 1, 6016, 1, 1), AI_STRIDE_INIT(4, 1, 1, 6016, 6016),
  1, &conv2d_2_scratch0_array, NULL)

/* Tensor #44 */
AI_TENSOR_OBJ_DECLARE(
  conv2d_3_scratch0, AI_STATIC,
  44, 0x0,
  AI_SHAPE_INIT(4, 1, 6912, 1, 1), AI_STRIDE_INIT(4, 1, 1, 6912, 6912),
  1, &conv2d_3_scratch0_array, NULL)

/* Tensor #45 */
AI_TENSOR_OBJ_DECLARE(
  conv2d_4_scratch0, AI_STATIC,
  45, 0x0,
  AI_SHAPE_INIT(4, 1, 8704, 1, 1), AI_STRIDE_INIT(4, 1, 1, 8704, 8704),
  1, &conv2d_4_scratch0_array, NULL)

/* Tensor #46 */
AI_TENSOR_OBJ_DECLARE(
  conv2d_5_scratch0, AI_STATIC,
  46, 0x0,
  AI_SHAPE_INIT(4, 1, 4737, 1, 1), AI_STRIDE_INIT(4, 1, 1, 4737, 4737),
  1, &conv2d_5_scratch0_array, NULL)

/* Tensor #47 */
AI_TENSOR_OBJ_DECLARE(
  conv2d_1_weights, AI_STATIC,
  47, 0x1,
  AI_SHAPE_INIT(4, 3, 3, 3, 16), AI_STRIDE_INIT(4, 1, 3, 9, 27),
  1, &conv2d_1_weights_array, &conv2d_1_weights_array_intq)

/* Tensor #48 */
AI_TENSOR_OBJ_DECLARE(
  conv2d_6_scratch0, AI_STATIC,
  48, 0x0,
  AI_SHAPE_INIT(4, 1, 3072, 1, 1), AI_STRIDE_INIT(4, 1, 1, 3072, 3072),
  1, &conv2d_6_scratch0_array, NULL)

/* Tensor #49 */
AI_TENSOR_OBJ_DECLARE(
  conv2d_1_bias, AI_STATIC,
  49, 0x0,
  AI_SHAPE_INIT(4, 1, 16, 1, 1), AI_STRIDE_INIT(4, 4, 4, 64, 64),
  1, &conv2d_1_bias_array, NULL)

/* Tensor #50 */
AI_TENSOR_OBJ_DECLARE(
  conv2d_7_scratch0, AI_STATIC,
  50, 0x0,
  AI_SHAPE_INIT(4, 1, 9473, 1, 1), AI_STRIDE_INIT(4, 1, 1, 9473, 9473),
  1, &conv2d_7_scratch0_array, NULL)

/* Tensor #51 */
AI_TENSOR_OBJ_DECLARE(
  conv2d_2_weights, AI_STATIC,
  51, 0x1,
  AI_SHAPE_INIT(4, 16, 3, 3, 32), AI_STRIDE_INIT(4, 1, 16, 48, 144),
  1, &conv2d_2_weights_array, &conv2d_2_weights_array_intq)

/* Tensor #52 */
AI_TENSOR_OBJ_DECLARE(
  conv2d_2_bias, AI_STATIC,
  52, 0x0,
  AI_SHAPE_INIT(4, 1, 32, 1, 1), AI_STRIDE_INIT(4, 4, 4, 128, 128),
  1, &conv2d_2_bias_array, NULL)

/* Tensor #53 */
AI_TENSOR_OBJ_DECLARE(
  conv2d_8_scratch0, AI_STATIC,
  53, 0x0,
  AI_SHAPE_INIT(4, 1, 3584, 1, 1), AI_STRIDE_INIT(4, 1, 1, 3584, 3584),
  1, &conv2d_8_scratch0_array, NULL)

/* Tensor #54 */
AI_TENSOR_OBJ_DECLARE(
  conv2d_3_weights, AI_STATIC,
  54, 0x1,
  AI_SHAPE_INIT(4, 32, 3, 3, 64), AI_STRIDE_INIT(4, 1, 32, 96, 288),
  1, &conv2d_3_weights_array, &conv2d_3_weights_array_intq)

/* Tensor #55 */
AI_TENSOR_OBJ_DECLARE(
  conv2d_8_scratch1, AI_STATIC,
  55, 0x1,
  AI_SHAPE_INIT(4, 1, 256, 12, 2), AI_STRIDE_INIT(4, 1, 1, 256, 3072),
  1, &conv2d_8_scratch1_array, &conv2d_8_scratch1_array_intq)

/* Tensor #56 */
AI_TENSOR_OBJ_DECLARE(
  conv2d_3_bias, AI_STATIC,
  56, 0x0,
  AI_SHAPE_INIT(4, 1, 64, 1, 1), AI_STRIDE_INIT(4, 4, 4, 256, 256),
  1, &conv2d_3_bias_array, NULL)

/* Tensor #57 */
AI_TENSOR_OBJ_DECLARE(
  conv2d_10_scratch0, AI_STATIC,
  57, 0x0,
  AI_SHAPE_INIT(4, 1, 9473, 1, 1), AI_STRIDE_INIT(4, 1, 1, 9473, 9473),
  1, &conv2d_10_scratch0_array, NULL)



/**  Layer declarations section  **********************************************/


AI_TENSOR_CHAIN_OBJ_DECLARE(
  conversion_15_chain, AI_STATIC_CONST, 4,
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, &conv2d_14_output),
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, &conversion_15_output),
  AI_TENSOR_LIST_OBJ_EMPTY,
  AI_TENSOR_LIST_OBJ_EMPTY
)

AI_LAYER_OBJ_DECLARE(
  conversion_15_layer, 15,
  NL_TYPE, 0x0, NULL,
  nl, node_convert,
  &conversion_15_chain,
  NULL, &conversion_15_layer, AI_STATIC, 
)

AI_TENSOR_CHAIN_OBJ_DECLARE(
  conv2d_14_chain, AI_STATIC_CONST, 4,
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, &conv2d_13_output),
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, &conv2d_14_output),
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 3, &conv2d_14_weights, &conv2d_14_bias, NULL),
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, &conv2d_14_scratch0)
)

AI_LAYER_OBJ_DECLARE(
  conv2d_14_layer, 14,
  CONV2D_TYPE, 0x0, NULL,
  conv2d, forward_pw_sssa8_ch,
  &conv2d_14_chain,
  NULL, &conversion_15_layer, AI_STATIC, 
  .groups = 1, 
  .nl_func = NULL, 
  .filter_stride = AI_SHAPE_2D_INIT(1, 1), 
  .dilation = AI_SHAPE_2D_INIT(1, 1), 
  .filter_pad = AI_SHAPE_INIT(4, 0, 0, 0, 0), 
)

AI_TENSOR_CHAIN_OBJ_DECLARE(
  conv2d_13_chain, AI_STATIC_CONST, 4,
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, &conv2d_12_output),
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, &conv2d_13_output),
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 3, &conv2d_13_weights, &conv2d_13_bias, NULL),
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, &conv2d_13_scratch0)
)

AI_LAYER_OBJ_DECLARE(
  conv2d_13_layer, 13,
  CONV2D_TYPE, 0x0, NULL,
  conv2d, forward_pw_sssa8_ch,
  &conv2d_13_chain,
  NULL, &conv2d_14_layer, AI_STATIC, 
  .groups = 1, 
  .nl_func = NULL, 
  .filter_stride = AI_SHAPE_2D_INIT(1, 1), 
  .dilation = AI_SHAPE_2D_INIT(1, 1), 
  .filter_pad = AI_SHAPE_INIT(4, 0, 0, 0, 0), 
)

AI_TENSOR_CHAIN_OBJ_DECLARE(
  conv2d_12_chain, AI_STATIC_CONST, 4,
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, &conv2d_11_output),
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, &conv2d_12_output),
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 3, &conv2d_12_weights, &conv2d_12_bias, NULL),
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, &conv2d_12_scratch0)
)

AI_LAYER_OBJ_DECLARE(
  conv2d_12_layer, 12,
  CONV2D_TYPE, 0x0, NULL,
  conv2d, forward_dw_sssa8_ch,
  &conv2d_12_chain,
  NULL, &conv2d_13_layer, AI_STATIC, 
  .groups = 128, 
  .nl_func = NULL, 
  .filter_stride = AI_SHAPE_2D_INIT(1, 1), 
  .dilation = AI_SHAPE_2D_INIT(1, 1), 
  .filter_pad = AI_SHAPE_INIT(4, 1, 1, 1, 1), 
)

AI_TENSOR_CHAIN_OBJ_DECLARE(
  conv2d_11_chain, AI_STATIC_CONST, 4,
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, &conv2d_10_output),
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, &conv2d_11_output),
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 3, &conv2d_11_weights, &conv2d_11_bias, NULL),
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, &conv2d_11_scratch0)
)

AI_LAYER_OBJ_DECLARE(
  conv2d_11_layer, 11,
  CONV2D_TYPE, 0x0, NULL,
  conv2d, forward_pw_sssa8_ch,
  &conv2d_11_chain,
  NULL, &conv2d_12_layer, AI_STATIC, 
  .groups = 1, 
  .nl_func = NULL, 
  .filter_stride = AI_SHAPE_2D_INIT(1, 1), 
  .dilation = AI_SHAPE_2D_INIT(1, 1), 
  .filter_pad = AI_SHAPE_INIT(4, 0, 0, 0, 0), 
)

AI_TENSOR_CHAIN_OBJ_DECLARE(
  conv2d_10_chain, AI_STATIC_CONST, 4,
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, &conv2d_8_output),
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, &conv2d_10_output),
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 3, &conv2d_10_weights, &conv2d_10_bias, NULL),
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, &conv2d_10_scratch0)
)

AI_LAYER_OBJ_DECLARE(
  conv2d_10_layer, 10,
  CONV2D_TYPE, 0x0, NULL,
  conv2d, forward_dw_sssa8_ch,
  &conv2d_10_chain,
  NULL, &conv2d_11_layer, AI_STATIC, 
  .groups = 256, 
  .nl_func = NULL, 
  .filter_stride = AI_SHAPE_2D_INIT(1, 1), 
  .dilation = AI_SHAPE_2D_INIT(1, 1), 
  .filter_pad = AI_SHAPE_INIT(4, 1, 1, 1, 1), 
)

AI_TENSOR_CHAIN_OBJ_DECLARE(
  conv2d_8_chain, AI_STATIC_CONST, 4,
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, &conv2d_7_output),
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, &conv2d_8_output),
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 3, &conv2d_8_weights, &conv2d_8_bias, NULL),
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 2, &conv2d_8_scratch0, &conv2d_8_scratch1)
)

AI_LAYER_OBJ_DECLARE(
  conv2d_8_layer, 9,
  OPTIMIZED_CONV2D_TYPE, 0x0, NULL,
  conv2d_nl_pool, forward_pw_sssa8_ch_nl_pool,
  &conv2d_8_chain,
  NULL, &conv2d_10_layer, AI_STATIC, 
  .groups = 1, 
  .nl_func = NULL, 
  .filter_stride = AI_SHAPE_2D_INIT(1, 1), 
  .dilation = AI_SHAPE_2D_INIT(1, 1), 
  .filter_pad = AI_SHAPE_INIT(4, 0, 0, 0, 0), 
  .pool_size = AI_SHAPE_2D_INIT(2, 2), 
  .pool_stride = AI_SHAPE_2D_INIT(1, 1), 
  .pool_pad = AI_SHAPE_INIT(4, 0, 0, 1, 1), 
  .pool_func = pool_func_mp_array_integer_INT8, 
)

AI_TENSOR_CHAIN_OBJ_DECLARE(
  conv2d_7_chain, AI_STATIC_CONST, 4,
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, &conv2d_6_output),
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, &conv2d_7_output),
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 3, &conv2d_7_weights, &conv2d_7_bias, NULL),
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, &conv2d_7_scratch0)
)

AI_LAYER_OBJ_DECLARE(
  conv2d_7_layer, 7,
  CONV2D_TYPE, 0x0, NULL,
  conv2d, forward_dw_sssa8_ch,
  &conv2d_7_chain,
  NULL, &conv2d_8_layer, AI_STATIC, 
  .groups = 256, 
  .nl_func = NULL, 
  .filter_stride = AI_SHAPE_2D_INIT(1, 1), 
  .dilation = AI_SHAPE_2D_INIT(1, 1), 
  .filter_pad = AI_SHAPE_INIT(4, 1, 1, 1, 1), 
)

AI_TENSOR_CHAIN_OBJ_DECLARE(
  conv2d_6_chain, AI_STATIC_CONST, 4,
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, &conv2d_5_output),
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, &conv2d_6_output),
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 3, &conv2d_6_weights, &conv2d_6_bias, NULL),
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, &conv2d_6_scratch0)
)

AI_LAYER_OBJ_DECLARE(
  conv2d_6_layer, 6,
  CONV2D_TYPE, 0x0, NULL,
  conv2d, forward_pw_sssa8_ch,
  &conv2d_6_chain,
  NULL, &conv2d_7_layer, AI_STATIC, 
  .groups = 1, 
  .nl_func = NULL, 
  .filter_stride = AI_SHAPE_2D_INIT(1, 1), 
  .dilation = AI_SHAPE_2D_INIT(1, 1), 
  .filter_pad = AI_SHAPE_INIT(4, 0, 0, 0, 0), 
)

AI_TENSOR_CHAIN_OBJ_DECLARE(
  conv2d_5_chain, AI_STATIC_CONST, 4,
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, &conv2d_4_output),
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, &conv2d_5_output),
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 3, &conv2d_5_weights, &conv2d_5_bias, NULL),
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, &conv2d_5_scratch0)
)

AI_LAYER_OBJ_DECLARE(
  conv2d_5_layer, 5,
  CONV2D_TYPE, 0x0, NULL,
  conv2d, forward_dw_sssa8_ch,
  &conv2d_5_chain,
  NULL, &conv2d_6_layer, AI_STATIC, 
  .groups = 128, 
  .nl_func = NULL, 
  .filter_stride = AI_SHAPE_2D_INIT(1, 1), 
  .dilation = AI_SHAPE_2D_INIT(1, 1), 
  .filter_pad = AI_SHAPE_INIT(4, 1, 1, 1, 1), 
)

AI_TENSOR_CHAIN_OBJ_DECLARE(
  conv2d_4_chain, AI_STATIC_CONST, 4,
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, &conv2d_4_pad_before_output),
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, &conv2d_4_output),
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 3, &conv2d_4_weights, &conv2d_4_bias, NULL),
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, &conv2d_4_scratch0)
)

AI_LAYER_OBJ_DECLARE(
  conv2d_4_layer, 4,
  CONV2D_TYPE, 0x0, NULL,
  conv2d, forward_conv2d_deep_sssa8_ch,
  &conv2d_4_chain,
  NULL, &conv2d_5_layer, AI_STATIC, 
  .groups = 1, 
  .nl_func = NULL, 
  .filter_stride = AI_SHAPE_2D_INIT(2, 2), 
  .dilation = AI_SHAPE_2D_INIT(1, 1), 
  .filter_pad = AI_SHAPE_INIT(4, 0, 0, 0, 0), 
)


AI_STATIC_CONST ai_i8 conv2d_4_pad_before_value_data[] = { -128 };
AI_ARRAY_OBJ_DECLARE(
    conv2d_4_pad_before_value, AI_ARRAY_FORMAT_S8,
    conv2d_4_pad_before_value_data, conv2d_4_pad_before_value_data, 1, AI_STATIC_CONST)
AI_TENSOR_CHAIN_OBJ_DECLARE(
  conv2d_4_pad_before_chain, AI_STATIC_CONST, 4,
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, &conv2d_3_output),
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, &conv2d_4_pad_before_output),
  AI_TENSOR_LIST_OBJ_EMPTY,
  AI_TENSOR_LIST_OBJ_EMPTY
)

AI_LAYER_OBJ_DECLARE(
  conv2d_4_pad_before_layer, 4,
  PAD_TYPE, 0x0, NULL,
  pad, forward_pad,
  &conv2d_4_pad_before_chain,
  NULL, &conv2d_4_layer, AI_STATIC, 
  .value = &conv2d_4_pad_before_value, 
  .mode = AI_PAD_CONSTANT, 
  .pads = AI_SHAPE_INIT(4, 0, 0, 2, 2), 
)

AI_TENSOR_CHAIN_OBJ_DECLARE(
  conv2d_3_chain, AI_STATIC_CONST, 4,
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, &conv2d_3_pad_before_output),
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, &conv2d_3_output),
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 3, &conv2d_3_weights, &conv2d_3_bias, NULL),
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, &conv2d_3_scratch0)
)

AI_LAYER_OBJ_DECLARE(
  conv2d_3_layer, 3,
  CONV2D_TYPE, 0x0, NULL,
  conv2d, forward_conv2d_deep_sssa8_ch,
  &conv2d_3_chain,
  NULL, &conv2d_4_pad_before_layer, AI_STATIC, 
  .groups = 1, 
  .nl_func = NULL, 
  .filter_stride = AI_SHAPE_2D_INIT(2, 2), 
  .dilation = AI_SHAPE_2D_INIT(1, 1), 
  .filter_pad = AI_SHAPE_INIT(4, 0, 0, 0, 0), 
)


AI_STATIC_CONST ai_i8 conv2d_3_pad_before_value_data[] = { -128 };
AI_ARRAY_OBJ_DECLARE(
    conv2d_3_pad_before_value, AI_ARRAY_FORMAT_S8,
    conv2d_3_pad_before_value_data, conv2d_3_pad_before_value_data, 1, AI_STATIC_CONST)
AI_TENSOR_CHAIN_OBJ_DECLARE(
  conv2d_3_pad_before_chain, AI_STATIC_CONST, 4,
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, &conv2d_2_output),
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, &conv2d_3_pad_before_output),
  AI_TENSOR_LIST_OBJ_EMPTY,
  AI_TENSOR_LIST_OBJ_EMPTY
)

AI_LAYER_OBJ_DECLARE(
  conv2d_3_pad_before_layer, 3,
  PAD_TYPE, 0x0, NULL,
  pad, forward_pad,
  &conv2d_3_pad_before_chain,
  NULL, &conv2d_3_layer, AI_STATIC, 
  .value = &conv2d_3_pad_before_value, 
  .mode = AI_PAD_CONSTANT, 
  .pads = AI_SHAPE_INIT(4, 0, 0, 2, 2), 
)

AI_TENSOR_CHAIN_OBJ_DECLARE(
  conv2d_2_chain, AI_STATIC_CONST, 4,
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, &conv2d_1_output),
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, &conv2d_2_output),
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 3, &conv2d_2_weights, &conv2d_2_bias, NULL),
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, &conv2d_2_scratch0)
)

AI_LAYER_OBJ_DECLARE(
  conv2d_2_layer, 2,
  CONV2D_TYPE, 0x0, NULL,
  conv2d, forward_conv2d_sssa8_ch,
  &conv2d_2_chain,
  NULL, &conv2d_3_pad_before_layer, AI_STATIC, 
  .groups = 1, 
  .nl_func = NULL, 
  .filter_stride = AI_SHAPE_2D_INIT(2, 2), 
  .dilation = AI_SHAPE_2D_INIT(1, 1), 
  .filter_pad = AI_SHAPE_INIT(4, 0, 0, 2, 2), 
)

AI_TENSOR_CHAIN_OBJ_DECLARE(
  conv2d_1_chain, AI_STATIC_CONST, 4,
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, &conversion_0_output),
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, &conv2d_1_output),
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 3, &conv2d_1_weights, &conv2d_1_bias, NULL),
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, &conv2d_1_scratch0)
)

AI_LAYER_OBJ_DECLARE(
  conv2d_1_layer, 1,
  OPTIMIZED_CONV2D_TYPE, 0x0, NULL,
  conv2d, forward_conv2d_rgb_sssa8_ch,
  &conv2d_1_chain,
  NULL, &conv2d_2_layer, AI_STATIC, 
  .groups = 1, 
  .nl_func = NULL, 
  .filter_stride = AI_SHAPE_2D_INIT(2, 2), 
  .dilation = AI_SHAPE_2D_INIT(1, 1), 
  .filter_pad = AI_SHAPE_INIT(4, 0, 0, 2, 2), 
)

AI_TENSOR_CHAIN_OBJ_DECLARE(
  conversion_0_chain, AI_STATIC_CONST, 4,
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, &serving_default_image_input0_output),
  AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, &conversion_0_output),
  AI_TENSOR_LIST_OBJ_EMPTY,
  AI_TENSOR_LIST_OBJ_EMPTY
)

AI_LAYER_OBJ_DECLARE(
  conversion_0_layer, 0,
  NL_TYPE, 0x0, NULL,
  nl, node_convert_integer,
  &conversion_0_chain,
  NULL, &conv2d_1_layer, AI_STATIC, 
)


#if (AI_TOOLS_API_VERSION < AI_TOOLS_API_VERSION_1_5)

AI_NETWORK_OBJ_DECLARE(
  AI_NET_OBJ_INSTANCE, AI_STATIC,
  AI_BUFFER_INIT(AI_FLAG_NONE,  AI_BUFFER_FORMAT_U8,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, 283368, 1, 1),
    283368, NULL, NULL),
  AI_BUFFER_INIT(AI_FLAG_NONE,  AI_BUFFER_FORMAT_U8,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, 155040, 1, 1),
    155040, NULL, NULL),
  AI_TENSOR_LIST_IO_OBJ_INIT(AI_FLAG_NONE, AI_AUTONOMOUSDRIVINGSYSTEM_NETWORK_IN_NUM, &serving_default_image_input0_output),
  AI_TENSOR_LIST_IO_OBJ_INIT(AI_FLAG_NONE, AI_AUTONOMOUSDRIVINGSYSTEM_NETWORK_OUT_NUM, &conversion_15_output),
  &conversion_0_layer, 0, NULL)

#else

AI_NETWORK_OBJ_DECLARE(
  AI_NET_OBJ_INSTANCE, AI_STATIC,
  AI_BUFFER_ARRAY_OBJ_INIT_STATIC(
  	AI_FLAG_NONE, 1,
    AI_BUFFER_INIT(AI_FLAG_NONE,  AI_BUFFER_FORMAT_U8,
      AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, 283368, 1, 1),
      283368, NULL, NULL)
  ),
  AI_BUFFER_ARRAY_OBJ_INIT_STATIC(
  	AI_FLAG_NONE, 1,
    AI_BUFFER_INIT(AI_FLAG_NONE,  AI_BUFFER_FORMAT_U8,
      AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, 155040, 1, 1),
      155040, NULL, NULL)
  ),
  AI_TENSOR_LIST_IO_OBJ_INIT(AI_FLAG_NONE, AI_AUTONOMOUSDRIVINGSYSTEM_NETWORK_IN_NUM, &serving_default_image_input0_output),
  AI_TENSOR_LIST_IO_OBJ_INIT(AI_FLAG_NONE, AI_AUTONOMOUSDRIVINGSYSTEM_NETWORK_OUT_NUM, &conversion_15_output),
  &conversion_0_layer, 0, NULL)

#endif	/*(AI_TOOLS_API_VERSION < AI_TOOLS_API_VERSION_1_5)*/


/******************************************************************************/
AI_DECLARE_STATIC
ai_bool autonomousdrivingsystem_network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_autonomousdrivingsystem_network_activations_map, 1, params)) {
    /* Updating activations (byte) offsets */
    
    serving_default_image_input0_output_array.data = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 39980);
    serving_default_image_input0_output_array.data_start = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 39980);
    
    conversion_0_output_array.data = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 39980);
    conversion_0_output_array.data_start = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 39980);
    
    conv2d_1_scratch0_array.data = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 150576);
    conv2d_1_scratch0_array.data_start = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 150576);
    
    conv2d_1_output_array.data = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 1568);
    conv2d_1_output_array.data_start = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 1568);
    
    conv2d_2_scratch0_array.data = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 149024);
    conv2d_2_scratch0_array.data_start = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 149024);
    
    conv2d_2_output_array.data = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 0);
    conv2d_2_output_array.data_start = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 0);
    
    conv2d_3_pad_before_output_array.data = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 73728);
    conv2d_3_pad_before_output_array.data_start = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 73728);
    
    conv2d_3_scratch0_array.data = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 0);
    conv2d_3_scratch0_array.data_start = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 0);
    
    conv2d_3_output_array.data = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 6912);
    conv2d_3_output_array.data_start = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 6912);
    
    conv2d_4_pad_before_output_array.data = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 43776);
    conv2d_4_pad_before_output_array.data_start = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 43776);
    
    conv2d_4_scratch0_array.data = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 0);
    conv2d_4_scratch0_array.data_start = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 0);
    
    conv2d_4_output_array.data = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 8704);
    conv2d_4_output_array.data_start = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 8704);
    
    conv2d_5_scratch0_array.data = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 0);
    conv2d_5_scratch0_array.data_start = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 0);
    
    conv2d_5_output_array.data = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 27136);
    conv2d_5_output_array.data_start = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 27136);
    
    conv2d_6_scratch0_array.data = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 0);
    conv2d_6_scratch0_array.data_start = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 0);
    
    conv2d_6_output_array.data = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 45568);
    conv2d_6_output_array.data_start = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 45568);
    
    conv2d_7_scratch0_array.data = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 0);
    conv2d_7_scratch0_array.data_start = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 0);
    
    conv2d_7_output_array.data = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 82432);
    conv2d_7_output_array.data_start = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 82432);
    
    conv2d_8_scratch0_array.data = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 0);
    conv2d_8_scratch0_array.data_start = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 0);
    
    conv2d_8_scratch1_array.data = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 3584);
    conv2d_8_scratch1_array.data_start = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 3584);
    
    conv2d_8_output_array.data = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 9728);
    conv2d_8_output_array.data_start = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 9728);
    
    conv2d_10_scratch0_array.data = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 0);
    conv2d_10_scratch0_array.data_start = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 0);
    
    conv2d_10_output_array.data = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 46592);
    conv2d_10_output_array.data_start = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 46592);
    
    conv2d_11_scratch0_array.data = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 0);
    conv2d_11_scratch0_array.data_start = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 0);
    
    conv2d_11_output_array.data = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 2304);
    conv2d_11_output_array.data_start = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 2304);
    
    conv2d_12_scratch0_array.data = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 20736);
    conv2d_12_scratch0_array.data_start = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 20736);
    
    conv2d_12_output_array.data = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 25476);
    conv2d_12_output_array.data_start = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 25476);
    
    conv2d_13_scratch0_array.data = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 0);
    conv2d_13_scratch0_array.data_start = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 0);
    
    conv2d_13_output_array.data = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 43908);
    conv2d_13_output_array.data_start = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 43908);
    
    conv2d_14_scratch0_array.data = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 0);
    conv2d_14_scratch0_array.data_start = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 0);
    
    conv2d_14_output_array.data = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 1324);
    conv2d_14_output_array.data_start = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 1324);
    
    conversion_15_output_array.data = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 5644);
    conversion_15_output_array.data_start = AI_PTR(g_autonomousdrivingsystem_network_activations_map[0] + 5644);
    
    return true;
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
  return false;
}



/******************************************************************************/
AI_DECLARE_STATIC
ai_bool autonomousdrivingsystem_network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_autonomousdrivingsystem_network_weights_map, 1, params)) {
    /* Updating weights (byte) offsets */
    
    conv2d_4_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_4_weights_array.data = AI_PTR(g_autonomousdrivingsystem_network_weights_map[0] + 0);
    conv2d_4_weights_array.data_start = AI_PTR(g_autonomousdrivingsystem_network_weights_map[0] + 0);
    
    conv2d_4_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_4_bias_array.data = AI_PTR(g_autonomousdrivingsystem_network_weights_map[0] + 73728);
    conv2d_4_bias_array.data_start = AI_PTR(g_autonomousdrivingsystem_network_weights_map[0] + 73728);
    
    conv2d_5_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_5_weights_array.data = AI_PTR(g_autonomousdrivingsystem_network_weights_map[0] + 74240);
    conv2d_5_weights_array.data_start = AI_PTR(g_autonomousdrivingsystem_network_weights_map[0] + 74240);
    
    conv2d_5_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_5_bias_array.data = AI_PTR(g_autonomousdrivingsystem_network_weights_map[0] + 75392);
    conv2d_5_bias_array.data_start = AI_PTR(g_autonomousdrivingsystem_network_weights_map[0] + 75392);
    
    conv2d_6_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_6_weights_array.data = AI_PTR(g_autonomousdrivingsystem_network_weights_map[0] + 75904);
    conv2d_6_weights_array.data_start = AI_PTR(g_autonomousdrivingsystem_network_weights_map[0] + 75904);
    
    conv2d_6_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_6_bias_array.data = AI_PTR(g_autonomousdrivingsystem_network_weights_map[0] + 108672);
    conv2d_6_bias_array.data_start = AI_PTR(g_autonomousdrivingsystem_network_weights_map[0] + 108672);
    
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_7_weights_array.data = AI_PTR(g_autonomousdrivingsystem_network_weights_map[0] + 109696);
    conv2d_7_weights_array.data_start = AI_PTR(g_autonomousdrivingsystem_network_weights_map[0] + 109696);
    
    conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_7_bias_array.data = AI_PTR(g_autonomousdrivingsystem_network_weights_map[0] + 112000);
    conv2d_7_bias_array.data_start = AI_PTR(g_autonomousdrivingsystem_network_weights_map[0] + 112000);
    
    conv2d_8_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_8_weights_array.data = AI_PTR(g_autonomousdrivingsystem_network_weights_map[0] + 113024);
    conv2d_8_weights_array.data_start = AI_PTR(g_autonomousdrivingsystem_network_weights_map[0] + 113024);
    
    conv2d_8_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_8_bias_array.data = AI_PTR(g_autonomousdrivingsystem_network_weights_map[0] + 178560);
    conv2d_8_bias_array.data_start = AI_PTR(g_autonomousdrivingsystem_network_weights_map[0] + 178560);
    
    conv2d_10_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_10_weights_array.data = AI_PTR(g_autonomousdrivingsystem_network_weights_map[0] + 179584);
    conv2d_10_weights_array.data_start = AI_PTR(g_autonomousdrivingsystem_network_weights_map[0] + 179584);
    
    conv2d_10_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_10_bias_array.data = AI_PTR(g_autonomousdrivingsystem_network_weights_map[0] + 181888);
    conv2d_10_bias_array.data_start = AI_PTR(g_autonomousdrivingsystem_network_weights_map[0] + 181888);
    
    conv2d_11_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_11_weights_array.data = AI_PTR(g_autonomousdrivingsystem_network_weights_map[0] + 182912);
    conv2d_11_weights_array.data_start = AI_PTR(g_autonomousdrivingsystem_network_weights_map[0] + 182912);
    
    conv2d_11_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_11_bias_array.data = AI_PTR(g_autonomousdrivingsystem_network_weights_map[0] + 215680);
    conv2d_11_bias_array.data_start = AI_PTR(g_autonomousdrivingsystem_network_weights_map[0] + 215680);
    
    conv2d_12_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_12_weights_array.data = AI_PTR(g_autonomousdrivingsystem_network_weights_map[0] + 216192);
    conv2d_12_weights_array.data_start = AI_PTR(g_autonomousdrivingsystem_network_weights_map[0] + 216192);
    
    conv2d_12_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_12_bias_array.data = AI_PTR(g_autonomousdrivingsystem_network_weights_map[0] + 217344);
    conv2d_12_bias_array.data_start = AI_PTR(g_autonomousdrivingsystem_network_weights_map[0] + 217344);
    
    conv2d_13_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_13_weights_array.data = AI_PTR(g_autonomousdrivingsystem_network_weights_map[0] + 217856);
    conv2d_13_weights_array.data_start = AI_PTR(g_autonomousdrivingsystem_network_weights_map[0] + 217856);
    
    conv2d_13_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_13_bias_array.data = AI_PTR(g_autonomousdrivingsystem_network_weights_map[0] + 250624);
    conv2d_13_bias_array.data_start = AI_PTR(g_autonomousdrivingsystem_network_weights_map[0] + 250624);
    
    conv2d_14_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_14_weights_array.data = AI_PTR(g_autonomousdrivingsystem_network_weights_map[0] + 251648);
    conv2d_14_weights_array.data_start = AI_PTR(g_autonomousdrivingsystem_network_weights_map[0] + 251648);
    
    conv2d_14_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_14_bias_array.data = AI_PTR(g_autonomousdrivingsystem_network_weights_map[0] + 259328);
    conv2d_14_bias_array.data_start = AI_PTR(g_autonomousdrivingsystem_network_weights_map[0] + 259328);
    
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_1_weights_array.data = AI_PTR(g_autonomousdrivingsystem_network_weights_map[0] + 259448);
    conv2d_1_weights_array.data_start = AI_PTR(g_autonomousdrivingsystem_network_weights_map[0] + 259448);
    
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_1_bias_array.data = AI_PTR(g_autonomousdrivingsystem_network_weights_map[0] + 259880);
    conv2d_1_bias_array.data_start = AI_PTR(g_autonomousdrivingsystem_network_weights_map[0] + 259880);
    
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_2_weights_array.data = AI_PTR(g_autonomousdrivingsystem_network_weights_map[0] + 259944);
    conv2d_2_weights_array.data_start = AI_PTR(g_autonomousdrivingsystem_network_weights_map[0] + 259944);
    
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_2_bias_array.data = AI_PTR(g_autonomousdrivingsystem_network_weights_map[0] + 264552);
    conv2d_2_bias_array.data_start = AI_PTR(g_autonomousdrivingsystem_network_weights_map[0] + 264552);
    
    conv2d_3_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_3_weights_array.data = AI_PTR(g_autonomousdrivingsystem_network_weights_map[0] + 264680);
    conv2d_3_weights_array.data_start = AI_PTR(g_autonomousdrivingsystem_network_weights_map[0] + 264680);
    
    conv2d_3_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_3_bias_array.data = AI_PTR(g_autonomousdrivingsystem_network_weights_map[0] + 283112);
    conv2d_3_bias_array.data_start = AI_PTR(g_autonomousdrivingsystem_network_weights_map[0] + 283112);
    
    return true;
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
  return false;
}


/**  PUBLIC APIs SECTION  *****************************************************/


AI_DEPRECATED
AI_API_ENTRY
ai_bool ai_autonomousdrivingsystem_network_get_info(
  ai_handle network, ai_network_report* report)
{
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);

  if (report && net_ctx)
  {
    ai_network_report r = {
      .model_name        = AI_AUTONOMOUSDRIVINGSYSTEM_NETWORK_MODEL_NAME,
      .model_signature   = AI_AUTONOMOUSDRIVINGSYSTEM_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
      .runtime_version   = ai_platform_runtime_get_version(),

      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
      .interface_api_version  = ai_platform_interface_api_get_version(),
      
      .n_macc            = 61905230,
      .n_inputs          = 0,
      .inputs            = NULL,
      .n_outputs         = 0,
      .outputs           = NULL,
      .params            = AI_STRUCT_INIT,
      .activations       = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;

    *report = r;
    return true;
  }
  return false;
}


AI_API_ENTRY
ai_bool ai_autonomousdrivingsystem_network_get_report(
  ai_handle network, ai_network_report* report)
{
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);

  if (report && net_ctx)
  {
    ai_network_report r = {
      .model_name        = AI_AUTONOMOUSDRIVINGSYSTEM_NETWORK_MODEL_NAME,
      .model_signature   = AI_AUTONOMOUSDRIVINGSYSTEM_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
      .runtime_version   = ai_platform_runtime_get_version(),

      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
      .interface_api_version  = ai_platform_interface_api_get_version(),
      
      .n_macc            = 61905230,
      .n_inputs          = 0,
      .inputs            = NULL,
      .n_outputs         = 0,
      .outputs           = NULL,
      .map_signature     = AI_MAGIC_SIGNATURE,
      .map_weights       = AI_STRUCT_INIT,
      .map_activations   = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;

    *report = r;
    return true;
  }
  return false;
}

AI_API_ENTRY
ai_error ai_autonomousdrivingsystem_network_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
}

AI_API_ENTRY
ai_error ai_autonomousdrivingsystem_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
  return ai_platform_network_create(
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}

AI_API_ENTRY
ai_error ai_autonomousdrivingsystem_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
    ai_error err;
    ai_network_params params;

    err = ai_autonomousdrivingsystem_network_create(network, AI_AUTONOMOUSDRIVINGSYSTEM_NETWORK_DATA_CONFIG);
    if (err.type != AI_ERROR_NONE)
        return err;
    if (ai_autonomousdrivingsystem_network_data_params_get(&params) != true) {
        err = ai_autonomousdrivingsystem_network_get_error(*network);
        return err;
    }
#if defined(AI_AUTONOMOUSDRIVINGSYSTEM_NETWORK_DATA_ACTIVATIONS_COUNT)
    if (activations) {
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
    }
#endif
#if defined(AI_AUTONOMOUSDRIVINGSYSTEM_NETWORK_DATA_WEIGHTS_COUNT)
    if (weights) {
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
    }
#endif
    if (ai_autonomousdrivingsystem_network_init(*network, &params) != true) {
        err = ai_autonomousdrivingsystem_network_get_error(*network);
    }
    return err;
}

AI_API_ENTRY
ai_buffer* ai_autonomousdrivingsystem_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
  }
  return ai_platform_inputs_get(network, n_buffer);
}

AI_API_ENTRY
ai_buffer* ai_autonomousdrivingsystem_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
  }
  return ai_platform_outputs_get(network, n_buffer);
}

AI_API_ENTRY
ai_handle ai_autonomousdrivingsystem_network_destroy(ai_handle network)
{
  return ai_platform_network_destroy(network);
}

AI_API_ENTRY
ai_bool ai_autonomousdrivingsystem_network_init(
  ai_handle network, const ai_network_params* params)
{
  ai_network* net_ctx = ai_platform_network_init(network, params);
  if (!net_ctx) return false;

  ai_bool ok = true;
  ok &= autonomousdrivingsystem_network_configure_weights(net_ctx, params);
  ok &= autonomousdrivingsystem_network_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);

  return ok;
}


AI_API_ENTRY
ai_i32 ai_autonomousdrivingsystem_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
}

AI_API_ENTRY
ai_i32 ai_autonomousdrivingsystem_network_forward(ai_handle network, const ai_buffer* input)
{
  return ai_platform_network_process(network, input, NULL);
}



#undef AI_AUTONOMOUSDRIVINGSYSTEM_NETWORK_MODEL_SIGNATURE
#undef AI_NET_OBJ_INSTANCE
#undef AI_TOOLS_DATE_TIME
#undef AI_TOOLS_COMPILE_TIME

