
DMU_APPL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .ncr          00000070  1000fc00  1000fc00  0001ec00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .isr_vector   00000188  08020000  08020000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00017e38  08020190  08020190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000288c  08037fc8  08037fc8  00018fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0803a854  0803a854  0001ec70  2**0
                  CONTENTS
  5 .ARM          00000008  0803a854  0803a854  0001b854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0803a85c  0803a85c  0001ec70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0803a85c  0803a85c  0001b85c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  0803a860  0803a860  0001b860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         0000007c  20000000  0803a864  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ccmram       00000c88  10000000  0803a8e0  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000451c  20000080  20000080  0001f080  2**3
                  ALLOC
 12 ._user_heap_stack 00000404  2000459c  2000459c  0001f080  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0001ec70  2**0
                  CONTENTS, READONLY
 14 .debug_info   000320c9  00000000  00000000  0001eca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007f60  00000000  00000000  00050d69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002688  00000000  00000000  00058cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001d9c  00000000  00000000  0005b358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002ced8  00000000  00000000  0005d0f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003fd6c  00000000  00000000  00089fcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f99e8  00000000  00000000  000c9d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001c3720  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000a0bc  00000000  00000000  001c3764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000075  00000000  00000000  001cd820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08020190 <__do_global_dtors_aux>:
 8020190:	b510      	push	{r4, lr}
 8020192:	4c05      	ldr	r4, [pc, #20]	@ (80201a8 <__do_global_dtors_aux+0x18>)
 8020194:	7823      	ldrb	r3, [r4, #0]
 8020196:	b933      	cbnz	r3, 80201a6 <__do_global_dtors_aux+0x16>
 8020198:	4b04      	ldr	r3, [pc, #16]	@ (80201ac <__do_global_dtors_aux+0x1c>)
 802019a:	b113      	cbz	r3, 80201a2 <__do_global_dtors_aux+0x12>
 802019c:	4804      	ldr	r0, [pc, #16]	@ (80201b0 <__do_global_dtors_aux+0x20>)
 802019e:	f3af 8000 	nop.w
 80201a2:	2301      	movs	r3, #1
 80201a4:	7023      	strb	r3, [r4, #0]
 80201a6:	bd10      	pop	{r4, pc}
 80201a8:	20000080 	.word	0x20000080
 80201ac:	00000000 	.word	0x00000000
 80201b0:	08037fb0 	.word	0x08037fb0

080201b4 <frame_dummy>:
 80201b4:	b508      	push	{r3, lr}
 80201b6:	4b03      	ldr	r3, [pc, #12]	@ (80201c4 <frame_dummy+0x10>)
 80201b8:	b11b      	cbz	r3, 80201c2 <frame_dummy+0xe>
 80201ba:	4903      	ldr	r1, [pc, #12]	@ (80201c8 <frame_dummy+0x14>)
 80201bc:	4803      	ldr	r0, [pc, #12]	@ (80201cc <frame_dummy+0x18>)
 80201be:	f3af 8000 	nop.w
 80201c2:	bd08      	pop	{r3, pc}
 80201c4:	00000000 	.word	0x00000000
 80201c8:	20000084 	.word	0x20000084
 80201cc:	08037fb0 	.word	0x08037fb0

080201d0 <memchr>:
 80201d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80201d4:	2a10      	cmp	r2, #16
 80201d6:	db2b      	blt.n	8020230 <memchr+0x60>
 80201d8:	f010 0f07 	tst.w	r0, #7
 80201dc:	d008      	beq.n	80201f0 <memchr+0x20>
 80201de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80201e2:	3a01      	subs	r2, #1
 80201e4:	428b      	cmp	r3, r1
 80201e6:	d02d      	beq.n	8020244 <memchr+0x74>
 80201e8:	f010 0f07 	tst.w	r0, #7
 80201ec:	b342      	cbz	r2, 8020240 <memchr+0x70>
 80201ee:	d1f6      	bne.n	80201de <memchr+0xe>
 80201f0:	b4f0      	push	{r4, r5, r6, r7}
 80201f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80201f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80201fa:	f022 0407 	bic.w	r4, r2, #7
 80201fe:	f07f 0700 	mvns.w	r7, #0
 8020202:	2300      	movs	r3, #0
 8020204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020208:	3c08      	subs	r4, #8
 802020a:	ea85 0501 	eor.w	r5, r5, r1
 802020e:	ea86 0601 	eor.w	r6, r6, r1
 8020212:	fa85 f547 	uadd8	r5, r5, r7
 8020216:	faa3 f587 	sel	r5, r3, r7
 802021a:	fa86 f647 	uadd8	r6, r6, r7
 802021e:	faa5 f687 	sel	r6, r5, r7
 8020222:	b98e      	cbnz	r6, 8020248 <memchr+0x78>
 8020224:	d1ee      	bne.n	8020204 <memchr+0x34>
 8020226:	bcf0      	pop	{r4, r5, r6, r7}
 8020228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 802022c:	f002 0207 	and.w	r2, r2, #7
 8020230:	b132      	cbz	r2, 8020240 <memchr+0x70>
 8020232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020236:	3a01      	subs	r2, #1
 8020238:	ea83 0301 	eor.w	r3, r3, r1
 802023c:	b113      	cbz	r3, 8020244 <memchr+0x74>
 802023e:	d1f8      	bne.n	8020232 <memchr+0x62>
 8020240:	2000      	movs	r0, #0
 8020242:	4770      	bx	lr
 8020244:	3801      	subs	r0, #1
 8020246:	4770      	bx	lr
 8020248:	2d00      	cmp	r5, #0
 802024a:	bf06      	itte	eq
 802024c:	4635      	moveq	r5, r6
 802024e:	3803      	subeq	r0, #3
 8020250:	3807      	subne	r0, #7
 8020252:	f015 0f01 	tst.w	r5, #1
 8020256:	d107      	bne.n	8020268 <memchr+0x98>
 8020258:	3001      	adds	r0, #1
 802025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 802025e:	bf02      	ittt	eq
 8020260:	3001      	addeq	r0, #1
 8020262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8020266:	3001      	addeq	r0, #1
 8020268:	bcf0      	pop	{r4, r5, r6, r7}
 802026a:	3801      	subs	r0, #1
 802026c:	4770      	bx	lr
 802026e:	bf00      	nop

08020270 <__aeabi_drsub>:
 8020270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8020274:	e002      	b.n	802027c <__adddf3>
 8020276:	bf00      	nop

08020278 <__aeabi_dsub>:
 8020278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0802027c <__adddf3>:
 802027c:	b530      	push	{r4, r5, lr}
 802027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8020282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8020286:	ea94 0f05 	teq	r4, r5
 802028a:	bf08      	it	eq
 802028c:	ea90 0f02 	teqeq	r0, r2
 8020290:	bf1f      	itttt	ne
 8020292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8020296:	ea55 0c02 	orrsne.w	ip, r5, r2
 802029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 802029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80202a2:	f000 80e2 	beq.w	802046a <__adddf3+0x1ee>
 80202a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80202aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80202ae:	bfb8      	it	lt
 80202b0:	426d      	neglt	r5, r5
 80202b2:	dd0c      	ble.n	80202ce <__adddf3+0x52>
 80202b4:	442c      	add	r4, r5
 80202b6:	ea80 0202 	eor.w	r2, r0, r2
 80202ba:	ea81 0303 	eor.w	r3, r1, r3
 80202be:	ea82 0000 	eor.w	r0, r2, r0
 80202c2:	ea83 0101 	eor.w	r1, r3, r1
 80202c6:	ea80 0202 	eor.w	r2, r0, r2
 80202ca:	ea81 0303 	eor.w	r3, r1, r3
 80202ce:	2d36      	cmp	r5, #54	@ 0x36
 80202d0:	bf88      	it	hi
 80202d2:	bd30      	pophi	{r4, r5, pc}
 80202d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80202d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80202dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80202e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80202e4:	d002      	beq.n	80202ec <__adddf3+0x70>
 80202e6:	4240      	negs	r0, r0
 80202e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80202ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80202f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80202f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80202f8:	d002      	beq.n	8020300 <__adddf3+0x84>
 80202fa:	4252      	negs	r2, r2
 80202fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8020300:	ea94 0f05 	teq	r4, r5
 8020304:	f000 80a7 	beq.w	8020456 <__adddf3+0x1da>
 8020308:	f1a4 0401 	sub.w	r4, r4, #1
 802030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8020310:	db0d      	blt.n	802032e <__adddf3+0xb2>
 8020312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8020316:	fa22 f205 	lsr.w	r2, r2, r5
 802031a:	1880      	adds	r0, r0, r2
 802031c:	f141 0100 	adc.w	r1, r1, #0
 8020320:	fa03 f20e 	lsl.w	r2, r3, lr
 8020324:	1880      	adds	r0, r0, r2
 8020326:	fa43 f305 	asr.w	r3, r3, r5
 802032a:	4159      	adcs	r1, r3
 802032c:	e00e      	b.n	802034c <__adddf3+0xd0>
 802032e:	f1a5 0520 	sub.w	r5, r5, #32
 8020332:	f10e 0e20 	add.w	lr, lr, #32
 8020336:	2a01      	cmp	r2, #1
 8020338:	fa03 fc0e 	lsl.w	ip, r3, lr
 802033c:	bf28      	it	cs
 802033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8020342:	fa43 f305 	asr.w	r3, r3, r5
 8020346:	18c0      	adds	r0, r0, r3
 8020348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 802034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8020350:	d507      	bpl.n	8020362 <__adddf3+0xe6>
 8020352:	f04f 0e00 	mov.w	lr, #0
 8020356:	f1dc 0c00 	rsbs	ip, ip, #0
 802035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 802035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8020362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8020366:	d31b      	bcc.n	80203a0 <__adddf3+0x124>
 8020368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 802036c:	d30c      	bcc.n	8020388 <__adddf3+0x10c>
 802036e:	0849      	lsrs	r1, r1, #1
 8020370:	ea5f 0030 	movs.w	r0, r0, rrx
 8020374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8020378:	f104 0401 	add.w	r4, r4, #1
 802037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8020380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8020384:	f080 809a 	bcs.w	80204bc <__adddf3+0x240>
 8020388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 802038c:	bf08      	it	eq
 802038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8020392:	f150 0000 	adcs.w	r0, r0, #0
 8020396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802039a:	ea41 0105 	orr.w	r1, r1, r5
 802039e:	bd30      	pop	{r4, r5, pc}
 80203a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80203a4:	4140      	adcs	r0, r0
 80203a6:	eb41 0101 	adc.w	r1, r1, r1
 80203aa:	3c01      	subs	r4, #1
 80203ac:	bf28      	it	cs
 80203ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80203b2:	d2e9      	bcs.n	8020388 <__adddf3+0x10c>
 80203b4:	f091 0f00 	teq	r1, #0
 80203b8:	bf04      	itt	eq
 80203ba:	4601      	moveq	r1, r0
 80203bc:	2000      	moveq	r0, #0
 80203be:	fab1 f381 	clz	r3, r1
 80203c2:	bf08      	it	eq
 80203c4:	3320      	addeq	r3, #32
 80203c6:	f1a3 030b 	sub.w	r3, r3, #11
 80203ca:	f1b3 0220 	subs.w	r2, r3, #32
 80203ce:	da0c      	bge.n	80203ea <__adddf3+0x16e>
 80203d0:	320c      	adds	r2, #12
 80203d2:	dd08      	ble.n	80203e6 <__adddf3+0x16a>
 80203d4:	f102 0c14 	add.w	ip, r2, #20
 80203d8:	f1c2 020c 	rsb	r2, r2, #12
 80203dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80203e0:	fa21 f102 	lsr.w	r1, r1, r2
 80203e4:	e00c      	b.n	8020400 <__adddf3+0x184>
 80203e6:	f102 0214 	add.w	r2, r2, #20
 80203ea:	bfd8      	it	le
 80203ec:	f1c2 0c20 	rsble	ip, r2, #32
 80203f0:	fa01 f102 	lsl.w	r1, r1, r2
 80203f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80203f8:	bfdc      	itt	le
 80203fa:	ea41 010c 	orrle.w	r1, r1, ip
 80203fe:	4090      	lslle	r0, r2
 8020400:	1ae4      	subs	r4, r4, r3
 8020402:	bfa2      	ittt	ge
 8020404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8020408:	4329      	orrge	r1, r5
 802040a:	bd30      	popge	{r4, r5, pc}
 802040c:	ea6f 0404 	mvn.w	r4, r4
 8020410:	3c1f      	subs	r4, #31
 8020412:	da1c      	bge.n	802044e <__adddf3+0x1d2>
 8020414:	340c      	adds	r4, #12
 8020416:	dc0e      	bgt.n	8020436 <__adddf3+0x1ba>
 8020418:	f104 0414 	add.w	r4, r4, #20
 802041c:	f1c4 0220 	rsb	r2, r4, #32
 8020420:	fa20 f004 	lsr.w	r0, r0, r4
 8020424:	fa01 f302 	lsl.w	r3, r1, r2
 8020428:	ea40 0003 	orr.w	r0, r0, r3
 802042c:	fa21 f304 	lsr.w	r3, r1, r4
 8020430:	ea45 0103 	orr.w	r1, r5, r3
 8020434:	bd30      	pop	{r4, r5, pc}
 8020436:	f1c4 040c 	rsb	r4, r4, #12
 802043a:	f1c4 0220 	rsb	r2, r4, #32
 802043e:	fa20 f002 	lsr.w	r0, r0, r2
 8020442:	fa01 f304 	lsl.w	r3, r1, r4
 8020446:	ea40 0003 	orr.w	r0, r0, r3
 802044a:	4629      	mov	r1, r5
 802044c:	bd30      	pop	{r4, r5, pc}
 802044e:	fa21 f004 	lsr.w	r0, r1, r4
 8020452:	4629      	mov	r1, r5
 8020454:	bd30      	pop	{r4, r5, pc}
 8020456:	f094 0f00 	teq	r4, #0
 802045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 802045e:	bf06      	itte	eq
 8020460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8020464:	3401      	addeq	r4, #1
 8020466:	3d01      	subne	r5, #1
 8020468:	e74e      	b.n	8020308 <__adddf3+0x8c>
 802046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 802046e:	bf18      	it	ne
 8020470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8020474:	d029      	beq.n	80204ca <__adddf3+0x24e>
 8020476:	ea94 0f05 	teq	r4, r5
 802047a:	bf08      	it	eq
 802047c:	ea90 0f02 	teqeq	r0, r2
 8020480:	d005      	beq.n	802048e <__adddf3+0x212>
 8020482:	ea54 0c00 	orrs.w	ip, r4, r0
 8020486:	bf04      	itt	eq
 8020488:	4619      	moveq	r1, r3
 802048a:	4610      	moveq	r0, r2
 802048c:	bd30      	pop	{r4, r5, pc}
 802048e:	ea91 0f03 	teq	r1, r3
 8020492:	bf1e      	ittt	ne
 8020494:	2100      	movne	r1, #0
 8020496:	2000      	movne	r0, #0
 8020498:	bd30      	popne	{r4, r5, pc}
 802049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 802049e:	d105      	bne.n	80204ac <__adddf3+0x230>
 80204a0:	0040      	lsls	r0, r0, #1
 80204a2:	4149      	adcs	r1, r1
 80204a4:	bf28      	it	cs
 80204a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80204aa:	bd30      	pop	{r4, r5, pc}
 80204ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80204b0:	bf3c      	itt	cc
 80204b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80204b6:	bd30      	popcc	{r4, r5, pc}
 80204b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80204bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80204c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80204c4:	f04f 0000 	mov.w	r0, #0
 80204c8:	bd30      	pop	{r4, r5, pc}
 80204ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80204ce:	bf1a      	itte	ne
 80204d0:	4619      	movne	r1, r3
 80204d2:	4610      	movne	r0, r2
 80204d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80204d8:	bf1c      	itt	ne
 80204da:	460b      	movne	r3, r1
 80204dc:	4602      	movne	r2, r0
 80204de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80204e2:	bf06      	itte	eq
 80204e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80204e8:	ea91 0f03 	teqeq	r1, r3
 80204ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80204f0:	bd30      	pop	{r4, r5, pc}
 80204f2:	bf00      	nop

080204f4 <__aeabi_ui2d>:
 80204f4:	f090 0f00 	teq	r0, #0
 80204f8:	bf04      	itt	eq
 80204fa:	2100      	moveq	r1, #0
 80204fc:	4770      	bxeq	lr
 80204fe:	b530      	push	{r4, r5, lr}
 8020500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8020504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8020508:	f04f 0500 	mov.w	r5, #0
 802050c:	f04f 0100 	mov.w	r1, #0
 8020510:	e750      	b.n	80203b4 <__adddf3+0x138>
 8020512:	bf00      	nop

08020514 <__aeabi_i2d>:
 8020514:	f090 0f00 	teq	r0, #0
 8020518:	bf04      	itt	eq
 802051a:	2100      	moveq	r1, #0
 802051c:	4770      	bxeq	lr
 802051e:	b530      	push	{r4, r5, lr}
 8020520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8020524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8020528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 802052c:	bf48      	it	mi
 802052e:	4240      	negmi	r0, r0
 8020530:	f04f 0100 	mov.w	r1, #0
 8020534:	e73e      	b.n	80203b4 <__adddf3+0x138>
 8020536:	bf00      	nop

08020538 <__aeabi_f2d>:
 8020538:	0042      	lsls	r2, r0, #1
 802053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 802053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8020542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8020546:	bf1f      	itttt	ne
 8020548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 802054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8020550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8020554:	4770      	bxne	lr
 8020556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 802055a:	bf08      	it	eq
 802055c:	4770      	bxeq	lr
 802055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8020562:	bf04      	itt	eq
 8020564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8020568:	4770      	bxeq	lr
 802056a:	b530      	push	{r4, r5, lr}
 802056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8020570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8020574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8020578:	e71c      	b.n	80203b4 <__adddf3+0x138>
 802057a:	bf00      	nop

0802057c <__aeabi_ul2d>:
 802057c:	ea50 0201 	orrs.w	r2, r0, r1
 8020580:	bf08      	it	eq
 8020582:	4770      	bxeq	lr
 8020584:	b530      	push	{r4, r5, lr}
 8020586:	f04f 0500 	mov.w	r5, #0
 802058a:	e00a      	b.n	80205a2 <__aeabi_l2d+0x16>

0802058c <__aeabi_l2d>:
 802058c:	ea50 0201 	orrs.w	r2, r0, r1
 8020590:	bf08      	it	eq
 8020592:	4770      	bxeq	lr
 8020594:	b530      	push	{r4, r5, lr}
 8020596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 802059a:	d502      	bpl.n	80205a2 <__aeabi_l2d+0x16>
 802059c:	4240      	negs	r0, r0
 802059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80205a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80205a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80205aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80205ae:	f43f aed8 	beq.w	8020362 <__adddf3+0xe6>
 80205b2:	f04f 0203 	mov.w	r2, #3
 80205b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80205ba:	bf18      	it	ne
 80205bc:	3203      	addne	r2, #3
 80205be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80205c2:	bf18      	it	ne
 80205c4:	3203      	addne	r2, #3
 80205c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80205ca:	f1c2 0320 	rsb	r3, r2, #32
 80205ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80205d2:	fa20 f002 	lsr.w	r0, r0, r2
 80205d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80205da:	ea40 000e 	orr.w	r0, r0, lr
 80205de:	fa21 f102 	lsr.w	r1, r1, r2
 80205e2:	4414      	add	r4, r2
 80205e4:	e6bd      	b.n	8020362 <__adddf3+0xe6>
 80205e6:	bf00      	nop

080205e8 <__aeabi_dmul>:
 80205e8:	b570      	push	{r4, r5, r6, lr}
 80205ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80205ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80205f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80205f6:	bf1d      	ittte	ne
 80205f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80205fc:	ea94 0f0c 	teqne	r4, ip
 8020600:	ea95 0f0c 	teqne	r5, ip
 8020604:	f000 f8de 	bleq	80207c4 <__aeabi_dmul+0x1dc>
 8020608:	442c      	add	r4, r5
 802060a:	ea81 0603 	eor.w	r6, r1, r3
 802060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8020612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8020616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 802061a:	bf18      	it	ne
 802061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8020620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8020624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8020628:	d038      	beq.n	802069c <__aeabi_dmul+0xb4>
 802062a:	fba0 ce02 	umull	ip, lr, r0, r2
 802062e:	f04f 0500 	mov.w	r5, #0
 8020632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8020636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 802063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 802063e:	f04f 0600 	mov.w	r6, #0
 8020642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8020646:	f09c 0f00 	teq	ip, #0
 802064a:	bf18      	it	ne
 802064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8020650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8020654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8020658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 802065c:	d204      	bcs.n	8020668 <__aeabi_dmul+0x80>
 802065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8020662:	416d      	adcs	r5, r5
 8020664:	eb46 0606 	adc.w	r6, r6, r6
 8020668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 802066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8020670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8020674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8020678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 802067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8020680:	bf88      	it	hi
 8020682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8020686:	d81e      	bhi.n	80206c6 <__aeabi_dmul+0xde>
 8020688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 802068c:	bf08      	it	eq
 802068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8020692:	f150 0000 	adcs.w	r0, r0, #0
 8020696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802069a:	bd70      	pop	{r4, r5, r6, pc}
 802069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80206a0:	ea46 0101 	orr.w	r1, r6, r1
 80206a4:	ea40 0002 	orr.w	r0, r0, r2
 80206a8:	ea81 0103 	eor.w	r1, r1, r3
 80206ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80206b0:	bfc2      	ittt	gt
 80206b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80206b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80206ba:	bd70      	popgt	{r4, r5, r6, pc}
 80206bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80206c0:	f04f 0e00 	mov.w	lr, #0
 80206c4:	3c01      	subs	r4, #1
 80206c6:	f300 80ab 	bgt.w	8020820 <__aeabi_dmul+0x238>
 80206ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80206ce:	bfde      	ittt	le
 80206d0:	2000      	movle	r0, #0
 80206d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80206d6:	bd70      	pople	{r4, r5, r6, pc}
 80206d8:	f1c4 0400 	rsb	r4, r4, #0
 80206dc:	3c20      	subs	r4, #32
 80206de:	da35      	bge.n	802074c <__aeabi_dmul+0x164>
 80206e0:	340c      	adds	r4, #12
 80206e2:	dc1b      	bgt.n	802071c <__aeabi_dmul+0x134>
 80206e4:	f104 0414 	add.w	r4, r4, #20
 80206e8:	f1c4 0520 	rsb	r5, r4, #32
 80206ec:	fa00 f305 	lsl.w	r3, r0, r5
 80206f0:	fa20 f004 	lsr.w	r0, r0, r4
 80206f4:	fa01 f205 	lsl.w	r2, r1, r5
 80206f8:	ea40 0002 	orr.w	r0, r0, r2
 80206fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8020700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8020704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8020708:	fa21 f604 	lsr.w	r6, r1, r4
 802070c:	eb42 0106 	adc.w	r1, r2, r6
 8020710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8020714:	bf08      	it	eq
 8020716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802071a:	bd70      	pop	{r4, r5, r6, pc}
 802071c:	f1c4 040c 	rsb	r4, r4, #12
 8020720:	f1c4 0520 	rsb	r5, r4, #32
 8020724:	fa00 f304 	lsl.w	r3, r0, r4
 8020728:	fa20 f005 	lsr.w	r0, r0, r5
 802072c:	fa01 f204 	lsl.w	r2, r1, r4
 8020730:	ea40 0002 	orr.w	r0, r0, r2
 8020734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8020738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 802073c:	f141 0100 	adc.w	r1, r1, #0
 8020740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8020744:	bf08      	it	eq
 8020746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802074a:	bd70      	pop	{r4, r5, r6, pc}
 802074c:	f1c4 0520 	rsb	r5, r4, #32
 8020750:	fa00 f205 	lsl.w	r2, r0, r5
 8020754:	ea4e 0e02 	orr.w	lr, lr, r2
 8020758:	fa20 f304 	lsr.w	r3, r0, r4
 802075c:	fa01 f205 	lsl.w	r2, r1, r5
 8020760:	ea43 0302 	orr.w	r3, r3, r2
 8020764:	fa21 f004 	lsr.w	r0, r1, r4
 8020768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 802076c:	fa21 f204 	lsr.w	r2, r1, r4
 8020770:	ea20 0002 	bic.w	r0, r0, r2
 8020774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8020778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 802077c:	bf08      	it	eq
 802077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8020782:	bd70      	pop	{r4, r5, r6, pc}
 8020784:	f094 0f00 	teq	r4, #0
 8020788:	d10f      	bne.n	80207aa <__aeabi_dmul+0x1c2>
 802078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 802078e:	0040      	lsls	r0, r0, #1
 8020790:	eb41 0101 	adc.w	r1, r1, r1
 8020794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8020798:	bf08      	it	eq
 802079a:	3c01      	subeq	r4, #1
 802079c:	d0f7      	beq.n	802078e <__aeabi_dmul+0x1a6>
 802079e:	ea41 0106 	orr.w	r1, r1, r6
 80207a2:	f095 0f00 	teq	r5, #0
 80207a6:	bf18      	it	ne
 80207a8:	4770      	bxne	lr
 80207aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80207ae:	0052      	lsls	r2, r2, #1
 80207b0:	eb43 0303 	adc.w	r3, r3, r3
 80207b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80207b8:	bf08      	it	eq
 80207ba:	3d01      	subeq	r5, #1
 80207bc:	d0f7      	beq.n	80207ae <__aeabi_dmul+0x1c6>
 80207be:	ea43 0306 	orr.w	r3, r3, r6
 80207c2:	4770      	bx	lr
 80207c4:	ea94 0f0c 	teq	r4, ip
 80207c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80207cc:	bf18      	it	ne
 80207ce:	ea95 0f0c 	teqne	r5, ip
 80207d2:	d00c      	beq.n	80207ee <__aeabi_dmul+0x206>
 80207d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80207d8:	bf18      	it	ne
 80207da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80207de:	d1d1      	bne.n	8020784 <__aeabi_dmul+0x19c>
 80207e0:	ea81 0103 	eor.w	r1, r1, r3
 80207e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80207e8:	f04f 0000 	mov.w	r0, #0
 80207ec:	bd70      	pop	{r4, r5, r6, pc}
 80207ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80207f2:	bf06      	itte	eq
 80207f4:	4610      	moveq	r0, r2
 80207f6:	4619      	moveq	r1, r3
 80207f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80207fc:	d019      	beq.n	8020832 <__aeabi_dmul+0x24a>
 80207fe:	ea94 0f0c 	teq	r4, ip
 8020802:	d102      	bne.n	802080a <__aeabi_dmul+0x222>
 8020804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8020808:	d113      	bne.n	8020832 <__aeabi_dmul+0x24a>
 802080a:	ea95 0f0c 	teq	r5, ip
 802080e:	d105      	bne.n	802081c <__aeabi_dmul+0x234>
 8020810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8020814:	bf1c      	itt	ne
 8020816:	4610      	movne	r0, r2
 8020818:	4619      	movne	r1, r3
 802081a:	d10a      	bne.n	8020832 <__aeabi_dmul+0x24a>
 802081c:	ea81 0103 	eor.w	r1, r1, r3
 8020820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8020824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8020828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 802082c:	f04f 0000 	mov.w	r0, #0
 8020830:	bd70      	pop	{r4, r5, r6, pc}
 8020832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8020836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 802083a:	bd70      	pop	{r4, r5, r6, pc}

0802083c <__aeabi_ddiv>:
 802083c:	b570      	push	{r4, r5, r6, lr}
 802083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8020842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8020846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 802084a:	bf1d      	ittte	ne
 802084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8020850:	ea94 0f0c 	teqne	r4, ip
 8020854:	ea95 0f0c 	teqne	r5, ip
 8020858:	f000 f8a7 	bleq	80209aa <__aeabi_ddiv+0x16e>
 802085c:	eba4 0405 	sub.w	r4, r4, r5
 8020860:	ea81 0e03 	eor.w	lr, r1, r3
 8020864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8020868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 802086c:	f000 8088 	beq.w	8020980 <__aeabi_ddiv+0x144>
 8020870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8020874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8020878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 802087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8020880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8020884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8020888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 802088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8020890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8020894:	429d      	cmp	r5, r3
 8020896:	bf08      	it	eq
 8020898:	4296      	cmpeq	r6, r2
 802089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 802089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80208a2:	d202      	bcs.n	80208aa <__aeabi_ddiv+0x6e>
 80208a4:	085b      	lsrs	r3, r3, #1
 80208a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80208aa:	1ab6      	subs	r6, r6, r2
 80208ac:	eb65 0503 	sbc.w	r5, r5, r3
 80208b0:	085b      	lsrs	r3, r3, #1
 80208b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80208b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80208ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80208be:	ebb6 0e02 	subs.w	lr, r6, r2
 80208c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80208c6:	bf22      	ittt	cs
 80208c8:	1ab6      	subcs	r6, r6, r2
 80208ca:	4675      	movcs	r5, lr
 80208cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80208d0:	085b      	lsrs	r3, r3, #1
 80208d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80208d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80208da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80208de:	bf22      	ittt	cs
 80208e0:	1ab6      	subcs	r6, r6, r2
 80208e2:	4675      	movcs	r5, lr
 80208e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80208e8:	085b      	lsrs	r3, r3, #1
 80208ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80208ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80208f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80208f6:	bf22      	ittt	cs
 80208f8:	1ab6      	subcs	r6, r6, r2
 80208fa:	4675      	movcs	r5, lr
 80208fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8020900:	085b      	lsrs	r3, r3, #1
 8020902:	ea4f 0232 	mov.w	r2, r2, rrx
 8020906:	ebb6 0e02 	subs.w	lr, r6, r2
 802090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 802090e:	bf22      	ittt	cs
 8020910:	1ab6      	subcs	r6, r6, r2
 8020912:	4675      	movcs	r5, lr
 8020914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8020918:	ea55 0e06 	orrs.w	lr, r5, r6
 802091c:	d018      	beq.n	8020950 <__aeabi_ddiv+0x114>
 802091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8020922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8020926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 802092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 802092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8020932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8020936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 802093a:	d1c0      	bne.n	80208be <__aeabi_ddiv+0x82>
 802093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8020940:	d10b      	bne.n	802095a <__aeabi_ddiv+0x11e>
 8020942:	ea41 0100 	orr.w	r1, r1, r0
 8020946:	f04f 0000 	mov.w	r0, #0
 802094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 802094e:	e7b6      	b.n	80208be <__aeabi_ddiv+0x82>
 8020950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8020954:	bf04      	itt	eq
 8020956:	4301      	orreq	r1, r0
 8020958:	2000      	moveq	r0, #0
 802095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 802095e:	bf88      	it	hi
 8020960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8020964:	f63f aeaf 	bhi.w	80206c6 <__aeabi_dmul+0xde>
 8020968:	ebb5 0c03 	subs.w	ip, r5, r3
 802096c:	bf04      	itt	eq
 802096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8020972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8020976:	f150 0000 	adcs.w	r0, r0, #0
 802097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802097e:	bd70      	pop	{r4, r5, r6, pc}
 8020980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8020984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8020988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 802098c:	bfc2      	ittt	gt
 802098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8020992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8020996:	bd70      	popgt	{r4, r5, r6, pc}
 8020998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 802099c:	f04f 0e00 	mov.w	lr, #0
 80209a0:	3c01      	subs	r4, #1
 80209a2:	e690      	b.n	80206c6 <__aeabi_dmul+0xde>
 80209a4:	ea45 0e06 	orr.w	lr, r5, r6
 80209a8:	e68d      	b.n	80206c6 <__aeabi_dmul+0xde>
 80209aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80209ae:	ea94 0f0c 	teq	r4, ip
 80209b2:	bf08      	it	eq
 80209b4:	ea95 0f0c 	teqeq	r5, ip
 80209b8:	f43f af3b 	beq.w	8020832 <__aeabi_dmul+0x24a>
 80209bc:	ea94 0f0c 	teq	r4, ip
 80209c0:	d10a      	bne.n	80209d8 <__aeabi_ddiv+0x19c>
 80209c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80209c6:	f47f af34 	bne.w	8020832 <__aeabi_dmul+0x24a>
 80209ca:	ea95 0f0c 	teq	r5, ip
 80209ce:	f47f af25 	bne.w	802081c <__aeabi_dmul+0x234>
 80209d2:	4610      	mov	r0, r2
 80209d4:	4619      	mov	r1, r3
 80209d6:	e72c      	b.n	8020832 <__aeabi_dmul+0x24a>
 80209d8:	ea95 0f0c 	teq	r5, ip
 80209dc:	d106      	bne.n	80209ec <__aeabi_ddiv+0x1b0>
 80209de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80209e2:	f43f aefd 	beq.w	80207e0 <__aeabi_dmul+0x1f8>
 80209e6:	4610      	mov	r0, r2
 80209e8:	4619      	mov	r1, r3
 80209ea:	e722      	b.n	8020832 <__aeabi_dmul+0x24a>
 80209ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80209f0:	bf18      	it	ne
 80209f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80209f6:	f47f aec5 	bne.w	8020784 <__aeabi_dmul+0x19c>
 80209fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80209fe:	f47f af0d 	bne.w	802081c <__aeabi_dmul+0x234>
 8020a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8020a06:	f47f aeeb 	bne.w	80207e0 <__aeabi_dmul+0x1f8>
 8020a0a:	e712      	b.n	8020832 <__aeabi_dmul+0x24a>

08020a0c <__aeabi_d2f>:
 8020a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8020a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8020a14:	bf24      	itt	cs
 8020a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8020a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8020a1e:	d90d      	bls.n	8020a3c <__aeabi_d2f+0x30>
 8020a20:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8020a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8020a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8020a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8020a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8020a34:	bf08      	it	eq
 8020a36:	f020 0001 	biceq.w	r0, r0, #1
 8020a3a:	4770      	bx	lr
 8020a3c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8020a40:	d121      	bne.n	8020a86 <__aeabi_d2f+0x7a>
 8020a42:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8020a46:	bfbc      	itt	lt
 8020a48:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8020a4c:	4770      	bxlt	lr
 8020a4e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8020a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8020a56:	f1c2 0218 	rsb	r2, r2, #24
 8020a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8020a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8020a62:	fa20 f002 	lsr.w	r0, r0, r2
 8020a66:	bf18      	it	ne
 8020a68:	f040 0001 	orrne.w	r0, r0, #1
 8020a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8020a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8020a78:	ea40 000c 	orr.w	r0, r0, ip
 8020a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8020a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8020a84:	e7cc      	b.n	8020a20 <__aeabi_d2f+0x14>
 8020a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8020a8a:	d107      	bne.n	8020a9c <__aeabi_d2f+0x90>
 8020a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8020a90:	bf1e      	ittt	ne
 8020a92:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8020a96:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8020a9a:	4770      	bxne	lr
 8020a9c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8020aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8020aa4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8020aa8:	4770      	bx	lr
 8020aaa:	bf00      	nop

08020aac <__aeabi_uldivmod>:
 8020aac:	b953      	cbnz	r3, 8020ac4 <__aeabi_uldivmod+0x18>
 8020aae:	b94a      	cbnz	r2, 8020ac4 <__aeabi_uldivmod+0x18>
 8020ab0:	2900      	cmp	r1, #0
 8020ab2:	bf08      	it	eq
 8020ab4:	2800      	cmpeq	r0, #0
 8020ab6:	bf1c      	itt	ne
 8020ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8020abc:	f04f 30ff 	movne.w	r0, #4294967295
 8020ac0:	f000 b96a 	b.w	8020d98 <__aeabi_idiv0>
 8020ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8020ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8020acc:	f000 f806 	bl	8020adc <__udivmoddi4>
 8020ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8020ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020ad8:	b004      	add	sp, #16
 8020ada:	4770      	bx	lr

08020adc <__udivmoddi4>:
 8020adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020ae0:	9d08      	ldr	r5, [sp, #32]
 8020ae2:	460c      	mov	r4, r1
 8020ae4:	2b00      	cmp	r3, #0
 8020ae6:	d14e      	bne.n	8020b86 <__udivmoddi4+0xaa>
 8020ae8:	4694      	mov	ip, r2
 8020aea:	458c      	cmp	ip, r1
 8020aec:	4686      	mov	lr, r0
 8020aee:	fab2 f282 	clz	r2, r2
 8020af2:	d962      	bls.n	8020bba <__udivmoddi4+0xde>
 8020af4:	b14a      	cbz	r2, 8020b0a <__udivmoddi4+0x2e>
 8020af6:	f1c2 0320 	rsb	r3, r2, #32
 8020afa:	4091      	lsls	r1, r2
 8020afc:	fa20 f303 	lsr.w	r3, r0, r3
 8020b00:	fa0c fc02 	lsl.w	ip, ip, r2
 8020b04:	4319      	orrs	r1, r3
 8020b06:	fa00 fe02 	lsl.w	lr, r0, r2
 8020b0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8020b0e:	fa1f f68c 	uxth.w	r6, ip
 8020b12:	fbb1 f4f7 	udiv	r4, r1, r7
 8020b16:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8020b1a:	fb07 1114 	mls	r1, r7, r4, r1
 8020b1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8020b22:	fb04 f106 	mul.w	r1, r4, r6
 8020b26:	4299      	cmp	r1, r3
 8020b28:	d90a      	bls.n	8020b40 <__udivmoddi4+0x64>
 8020b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8020b2e:	f104 30ff 	add.w	r0, r4, #4294967295
 8020b32:	f080 8112 	bcs.w	8020d5a <__udivmoddi4+0x27e>
 8020b36:	4299      	cmp	r1, r3
 8020b38:	f240 810f 	bls.w	8020d5a <__udivmoddi4+0x27e>
 8020b3c:	3c02      	subs	r4, #2
 8020b3e:	4463      	add	r3, ip
 8020b40:	1a59      	subs	r1, r3, r1
 8020b42:	fa1f f38e 	uxth.w	r3, lr
 8020b46:	fbb1 f0f7 	udiv	r0, r1, r7
 8020b4a:	fb07 1110 	mls	r1, r7, r0, r1
 8020b4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8020b52:	fb00 f606 	mul.w	r6, r0, r6
 8020b56:	429e      	cmp	r6, r3
 8020b58:	d90a      	bls.n	8020b70 <__udivmoddi4+0x94>
 8020b5a:	eb1c 0303 	adds.w	r3, ip, r3
 8020b5e:	f100 31ff 	add.w	r1, r0, #4294967295
 8020b62:	f080 80fc 	bcs.w	8020d5e <__udivmoddi4+0x282>
 8020b66:	429e      	cmp	r6, r3
 8020b68:	f240 80f9 	bls.w	8020d5e <__udivmoddi4+0x282>
 8020b6c:	4463      	add	r3, ip
 8020b6e:	3802      	subs	r0, #2
 8020b70:	1b9b      	subs	r3, r3, r6
 8020b72:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8020b76:	2100      	movs	r1, #0
 8020b78:	b11d      	cbz	r5, 8020b82 <__udivmoddi4+0xa6>
 8020b7a:	40d3      	lsrs	r3, r2
 8020b7c:	2200      	movs	r2, #0
 8020b7e:	e9c5 3200 	strd	r3, r2, [r5]
 8020b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020b86:	428b      	cmp	r3, r1
 8020b88:	d905      	bls.n	8020b96 <__udivmoddi4+0xba>
 8020b8a:	b10d      	cbz	r5, 8020b90 <__udivmoddi4+0xb4>
 8020b8c:	e9c5 0100 	strd	r0, r1, [r5]
 8020b90:	2100      	movs	r1, #0
 8020b92:	4608      	mov	r0, r1
 8020b94:	e7f5      	b.n	8020b82 <__udivmoddi4+0xa6>
 8020b96:	fab3 f183 	clz	r1, r3
 8020b9a:	2900      	cmp	r1, #0
 8020b9c:	d146      	bne.n	8020c2c <__udivmoddi4+0x150>
 8020b9e:	42a3      	cmp	r3, r4
 8020ba0:	d302      	bcc.n	8020ba8 <__udivmoddi4+0xcc>
 8020ba2:	4290      	cmp	r0, r2
 8020ba4:	f0c0 80f0 	bcc.w	8020d88 <__udivmoddi4+0x2ac>
 8020ba8:	1a86      	subs	r6, r0, r2
 8020baa:	eb64 0303 	sbc.w	r3, r4, r3
 8020bae:	2001      	movs	r0, #1
 8020bb0:	2d00      	cmp	r5, #0
 8020bb2:	d0e6      	beq.n	8020b82 <__udivmoddi4+0xa6>
 8020bb4:	e9c5 6300 	strd	r6, r3, [r5]
 8020bb8:	e7e3      	b.n	8020b82 <__udivmoddi4+0xa6>
 8020bba:	2a00      	cmp	r2, #0
 8020bbc:	f040 8090 	bne.w	8020ce0 <__udivmoddi4+0x204>
 8020bc0:	eba1 040c 	sub.w	r4, r1, ip
 8020bc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8020bc8:	fa1f f78c 	uxth.w	r7, ip
 8020bcc:	2101      	movs	r1, #1
 8020bce:	fbb4 f6f8 	udiv	r6, r4, r8
 8020bd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8020bd6:	fb08 4416 	mls	r4, r8, r6, r4
 8020bda:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8020bde:	fb07 f006 	mul.w	r0, r7, r6
 8020be2:	4298      	cmp	r0, r3
 8020be4:	d908      	bls.n	8020bf8 <__udivmoddi4+0x11c>
 8020be6:	eb1c 0303 	adds.w	r3, ip, r3
 8020bea:	f106 34ff 	add.w	r4, r6, #4294967295
 8020bee:	d202      	bcs.n	8020bf6 <__udivmoddi4+0x11a>
 8020bf0:	4298      	cmp	r0, r3
 8020bf2:	f200 80cd 	bhi.w	8020d90 <__udivmoddi4+0x2b4>
 8020bf6:	4626      	mov	r6, r4
 8020bf8:	1a1c      	subs	r4, r3, r0
 8020bfa:	fa1f f38e 	uxth.w	r3, lr
 8020bfe:	fbb4 f0f8 	udiv	r0, r4, r8
 8020c02:	fb08 4410 	mls	r4, r8, r0, r4
 8020c06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8020c0a:	fb00 f707 	mul.w	r7, r0, r7
 8020c0e:	429f      	cmp	r7, r3
 8020c10:	d908      	bls.n	8020c24 <__udivmoddi4+0x148>
 8020c12:	eb1c 0303 	adds.w	r3, ip, r3
 8020c16:	f100 34ff 	add.w	r4, r0, #4294967295
 8020c1a:	d202      	bcs.n	8020c22 <__udivmoddi4+0x146>
 8020c1c:	429f      	cmp	r7, r3
 8020c1e:	f200 80b0 	bhi.w	8020d82 <__udivmoddi4+0x2a6>
 8020c22:	4620      	mov	r0, r4
 8020c24:	1bdb      	subs	r3, r3, r7
 8020c26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8020c2a:	e7a5      	b.n	8020b78 <__udivmoddi4+0x9c>
 8020c2c:	f1c1 0620 	rsb	r6, r1, #32
 8020c30:	408b      	lsls	r3, r1
 8020c32:	fa22 f706 	lsr.w	r7, r2, r6
 8020c36:	431f      	orrs	r7, r3
 8020c38:	fa20 fc06 	lsr.w	ip, r0, r6
 8020c3c:	fa04 f301 	lsl.w	r3, r4, r1
 8020c40:	ea43 030c 	orr.w	r3, r3, ip
 8020c44:	40f4      	lsrs	r4, r6
 8020c46:	fa00 f801 	lsl.w	r8, r0, r1
 8020c4a:	0c38      	lsrs	r0, r7, #16
 8020c4c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8020c50:	fbb4 fef0 	udiv	lr, r4, r0
 8020c54:	fa1f fc87 	uxth.w	ip, r7
 8020c58:	fb00 441e 	mls	r4, r0, lr, r4
 8020c5c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8020c60:	fb0e f90c 	mul.w	r9, lr, ip
 8020c64:	45a1      	cmp	r9, r4
 8020c66:	fa02 f201 	lsl.w	r2, r2, r1
 8020c6a:	d90a      	bls.n	8020c82 <__udivmoddi4+0x1a6>
 8020c6c:	193c      	adds	r4, r7, r4
 8020c6e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8020c72:	f080 8084 	bcs.w	8020d7e <__udivmoddi4+0x2a2>
 8020c76:	45a1      	cmp	r9, r4
 8020c78:	f240 8081 	bls.w	8020d7e <__udivmoddi4+0x2a2>
 8020c7c:	f1ae 0e02 	sub.w	lr, lr, #2
 8020c80:	443c      	add	r4, r7
 8020c82:	eba4 0409 	sub.w	r4, r4, r9
 8020c86:	fa1f f983 	uxth.w	r9, r3
 8020c8a:	fbb4 f3f0 	udiv	r3, r4, r0
 8020c8e:	fb00 4413 	mls	r4, r0, r3, r4
 8020c92:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8020c96:	fb03 fc0c 	mul.w	ip, r3, ip
 8020c9a:	45a4      	cmp	ip, r4
 8020c9c:	d907      	bls.n	8020cae <__udivmoddi4+0x1d2>
 8020c9e:	193c      	adds	r4, r7, r4
 8020ca0:	f103 30ff 	add.w	r0, r3, #4294967295
 8020ca4:	d267      	bcs.n	8020d76 <__udivmoddi4+0x29a>
 8020ca6:	45a4      	cmp	ip, r4
 8020ca8:	d965      	bls.n	8020d76 <__udivmoddi4+0x29a>
 8020caa:	3b02      	subs	r3, #2
 8020cac:	443c      	add	r4, r7
 8020cae:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8020cb2:	fba0 9302 	umull	r9, r3, r0, r2
 8020cb6:	eba4 040c 	sub.w	r4, r4, ip
 8020cba:	429c      	cmp	r4, r3
 8020cbc:	46ce      	mov	lr, r9
 8020cbe:	469c      	mov	ip, r3
 8020cc0:	d351      	bcc.n	8020d66 <__udivmoddi4+0x28a>
 8020cc2:	d04e      	beq.n	8020d62 <__udivmoddi4+0x286>
 8020cc4:	b155      	cbz	r5, 8020cdc <__udivmoddi4+0x200>
 8020cc6:	ebb8 030e 	subs.w	r3, r8, lr
 8020cca:	eb64 040c 	sbc.w	r4, r4, ip
 8020cce:	fa04 f606 	lsl.w	r6, r4, r6
 8020cd2:	40cb      	lsrs	r3, r1
 8020cd4:	431e      	orrs	r6, r3
 8020cd6:	40cc      	lsrs	r4, r1
 8020cd8:	e9c5 6400 	strd	r6, r4, [r5]
 8020cdc:	2100      	movs	r1, #0
 8020cde:	e750      	b.n	8020b82 <__udivmoddi4+0xa6>
 8020ce0:	f1c2 0320 	rsb	r3, r2, #32
 8020ce4:	fa20 f103 	lsr.w	r1, r0, r3
 8020ce8:	fa0c fc02 	lsl.w	ip, ip, r2
 8020cec:	fa24 f303 	lsr.w	r3, r4, r3
 8020cf0:	4094      	lsls	r4, r2
 8020cf2:	430c      	orrs	r4, r1
 8020cf4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8020cf8:	fa00 fe02 	lsl.w	lr, r0, r2
 8020cfc:	fa1f f78c 	uxth.w	r7, ip
 8020d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8020d04:	fb08 3110 	mls	r1, r8, r0, r3
 8020d08:	0c23      	lsrs	r3, r4, #16
 8020d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8020d0e:	fb00 f107 	mul.w	r1, r0, r7
 8020d12:	4299      	cmp	r1, r3
 8020d14:	d908      	bls.n	8020d28 <__udivmoddi4+0x24c>
 8020d16:	eb1c 0303 	adds.w	r3, ip, r3
 8020d1a:	f100 36ff 	add.w	r6, r0, #4294967295
 8020d1e:	d22c      	bcs.n	8020d7a <__udivmoddi4+0x29e>
 8020d20:	4299      	cmp	r1, r3
 8020d22:	d92a      	bls.n	8020d7a <__udivmoddi4+0x29e>
 8020d24:	3802      	subs	r0, #2
 8020d26:	4463      	add	r3, ip
 8020d28:	1a5b      	subs	r3, r3, r1
 8020d2a:	b2a4      	uxth	r4, r4
 8020d2c:	fbb3 f1f8 	udiv	r1, r3, r8
 8020d30:	fb08 3311 	mls	r3, r8, r1, r3
 8020d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020d38:	fb01 f307 	mul.w	r3, r1, r7
 8020d3c:	42a3      	cmp	r3, r4
 8020d3e:	d908      	bls.n	8020d52 <__udivmoddi4+0x276>
 8020d40:	eb1c 0404 	adds.w	r4, ip, r4
 8020d44:	f101 36ff 	add.w	r6, r1, #4294967295
 8020d48:	d213      	bcs.n	8020d72 <__udivmoddi4+0x296>
 8020d4a:	42a3      	cmp	r3, r4
 8020d4c:	d911      	bls.n	8020d72 <__udivmoddi4+0x296>
 8020d4e:	3902      	subs	r1, #2
 8020d50:	4464      	add	r4, ip
 8020d52:	1ae4      	subs	r4, r4, r3
 8020d54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8020d58:	e739      	b.n	8020bce <__udivmoddi4+0xf2>
 8020d5a:	4604      	mov	r4, r0
 8020d5c:	e6f0      	b.n	8020b40 <__udivmoddi4+0x64>
 8020d5e:	4608      	mov	r0, r1
 8020d60:	e706      	b.n	8020b70 <__udivmoddi4+0x94>
 8020d62:	45c8      	cmp	r8, r9
 8020d64:	d2ae      	bcs.n	8020cc4 <__udivmoddi4+0x1e8>
 8020d66:	ebb9 0e02 	subs.w	lr, r9, r2
 8020d6a:	eb63 0c07 	sbc.w	ip, r3, r7
 8020d6e:	3801      	subs	r0, #1
 8020d70:	e7a8      	b.n	8020cc4 <__udivmoddi4+0x1e8>
 8020d72:	4631      	mov	r1, r6
 8020d74:	e7ed      	b.n	8020d52 <__udivmoddi4+0x276>
 8020d76:	4603      	mov	r3, r0
 8020d78:	e799      	b.n	8020cae <__udivmoddi4+0x1d2>
 8020d7a:	4630      	mov	r0, r6
 8020d7c:	e7d4      	b.n	8020d28 <__udivmoddi4+0x24c>
 8020d7e:	46d6      	mov	lr, sl
 8020d80:	e77f      	b.n	8020c82 <__udivmoddi4+0x1a6>
 8020d82:	4463      	add	r3, ip
 8020d84:	3802      	subs	r0, #2
 8020d86:	e74d      	b.n	8020c24 <__udivmoddi4+0x148>
 8020d88:	4606      	mov	r6, r0
 8020d8a:	4623      	mov	r3, r4
 8020d8c:	4608      	mov	r0, r1
 8020d8e:	e70f      	b.n	8020bb0 <__udivmoddi4+0xd4>
 8020d90:	3e02      	subs	r6, #2
 8020d92:	4463      	add	r3, ip
 8020d94:	e730      	b.n	8020bf8 <__udivmoddi4+0x11c>
 8020d96:	bf00      	nop

08020d98 <__aeabi_idiv0>:
 8020d98:	4770      	bx	lr
 8020d9a:	bf00      	nop

08020d9c <DataRecorder_MainFunction>:
extern __attribute__((section(".ccmram"))) float Ain_McuTemp;
extern __attribute__((section(".ccmram"))) float Ain_Vbat;
extern __attribute__((section(".ccmram"))) uint32 vehSpeedConv;
void DataRecorder_MainFunction(void);
void DataRecorder_MainFunction(void)
{
 8020d9c:	b480      	push	{r7}
 8020d9e:	af00      	add	r7, sp, #0
	/* Retrieve saved calculated kilometers. */
	if(0 == DataRecorder_MainCounter)
 8020da0:	4b4f      	ldr	r3, [pc, #316]	@ (8020ee0 <DataRecorder_MainFunction+0x144>)
 8020da2:	681b      	ldr	r3, [r3, #0]
 8020da4:	2b00      	cmp	r3, #0
 8020da6:	d111      	bne.n	8020dcc <DataRecorder_MainFunction+0x30>
	{
		fin_aux_km1 = DataRecorder_KilometerPerDcy;
 8020da8:	4b4e      	ldr	r3, [pc, #312]	@ (8020ee4 <DataRecorder_MainFunction+0x148>)
 8020daa:	681b      	ldr	r3, [r3, #0]
 8020dac:	ee07 3a90 	vmov	s15, r3
 8020db0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020db4:	4b4c      	ldr	r3, [pc, #304]	@ (8020ee8 <DataRecorder_MainFunction+0x14c>)
 8020db6:	edc3 7a00 	vstr	s15, [r3]
		fin_aux_km2 = DataRecorder_KilometerTotal;
 8020dba:	4b4c      	ldr	r3, [pc, #304]	@ (8020eec <DataRecorder_MainFunction+0x150>)
 8020dbc:	681b      	ldr	r3, [r3, #0]
 8020dbe:	ee07 3a90 	vmov	s15, r3
 8020dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020dc6:	4b4a      	ldr	r3, [pc, #296]	@ (8020ef0 <DataRecorder_MainFunction+0x154>)
 8020dc8:	edc3 7a00 	vstr	s15, [r3]
		/* Do nothing. */
	}
	/* Value END == 0x03 is not send so often... depends on the user!
	 * It simulates a kilometer reset from the traditional infocluster button.
	 * */
	if(DATARECORDER_DCY_END == DataRecorder_RxSig_DriveCycleStatus) DataRecorder_KilometerPerDcy = 0;
 8020dcc:	4b49      	ldr	r3, [pc, #292]	@ (8020ef4 <DataRecorder_MainFunction+0x158>)
 8020dce:	781b      	ldrb	r3, [r3, #0]
 8020dd0:	2b03      	cmp	r3, #3
 8020dd2:	d102      	bne.n	8020dda <DataRecorder_MainFunction+0x3e>
 8020dd4:	4b43      	ldr	r3, [pc, #268]	@ (8020ee4 <DataRecorder_MainFunction+0x148>)
 8020dd6:	2200      	movs	r2, #0
 8020dd8:	601a      	str	r2, [r3, #0]
	else
	{
		/* Do nothing. */
	}
	/* Start counting kilometers. */
	if(DATARECORDER_DCY_START == DataRecorder_RxSig_DriveCycleStatus)
 8020dda:	4b46      	ldr	r3, [pc, #280]	@ (8020ef4 <DataRecorder_MainFunction+0x158>)
 8020ddc:	781b      	ldrb	r3, [r3, #0]
 8020dde:	2b02      	cmp	r3, #2
 8020de0:	d173      	bne.n	8020eca <DataRecorder_MainFunction+0x12e>
	{
		/* If vehicle is not stationary. */
		if(0x00 != DataRecorder_RxSig_VehicleSpeed)
 8020de2:	4b45      	ldr	r3, [pc, #276]	@ (8020ef8 <DataRecorder_MainFunction+0x15c>)
 8020de4:	681b      	ldr	r3, [r3, #0]
 8020de6:	2b00      	cmp	r3, #0
 8020de8:	d06f      	beq.n	8020eca <DataRecorder_MainFunction+0x12e>
		{
			/* Count 10 milliseconds each function call to the timer. */
			DataRecorder_SpeedCounterActive += 10;
 8020dea:	4b44      	ldr	r3, [pc, #272]	@ (8020efc <DataRecorder_MainFunction+0x160>)
 8020dec:	681b      	ldr	r3, [r3, #0]
 8020dee:	330a      	adds	r3, #10
 8020df0:	4a42      	ldr	r2, [pc, #264]	@ (8020efc <DataRecorder_MainFunction+0x160>)
 8020df2:	6013      	str	r3, [r2, #0]
			/* Convert KM/H into KM/S. */
			DataRecorder_SpeedInKmS = (float)vehSpeedConv / (float)3600;
 8020df4:	4b42      	ldr	r3, [pc, #264]	@ (8020f00 <DataRecorder_MainFunction+0x164>)
 8020df6:	681b      	ldr	r3, [r3, #0]
 8020df8:	ee07 3a90 	vmov	s15, r3
 8020dfc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8020e00:	eddf 6a40 	vldr	s13, [pc, #256]	@ 8020f04 <DataRecorder_MainFunction+0x168>
 8020e04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8020e08:	4b3f      	ldr	r3, [pc, #252]	@ (8020f08 <DataRecorder_MainFunction+0x16c>)
 8020e0a:	edc3 7a00 	vstr	s15, [r3]
			/* Add up into auxiliary variables. */
			aux_km1 += (float)DataRecorder_SpeedInKmS;
 8020e0e:	4b3f      	ldr	r3, [pc, #252]	@ (8020f0c <DataRecorder_MainFunction+0x170>)
 8020e10:	ed93 7a00 	vldr	s14, [r3]
 8020e14:	4b3c      	ldr	r3, [pc, #240]	@ (8020f08 <DataRecorder_MainFunction+0x16c>)
 8020e16:	edd3 7a00 	vldr	s15, [r3]
 8020e1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8020e1e:	4b3b      	ldr	r3, [pc, #236]	@ (8020f0c <DataRecorder_MainFunction+0x170>)
 8020e20:	edc3 7a00 	vstr	s15, [r3]
			aux_km2 += (float)DataRecorder_SpeedInKmS;
 8020e24:	4b3a      	ldr	r3, [pc, #232]	@ (8020f10 <DataRecorder_MainFunction+0x174>)
 8020e26:	ed93 7a00 	vldr	s14, [r3]
 8020e2a:	4b37      	ldr	r3, [pc, #220]	@ (8020f08 <DataRecorder_MainFunction+0x16c>)
 8020e2c:	edd3 7a00 	vldr	s15, [r3]
 8020e30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8020e34:	4b36      	ldr	r3, [pc, #216]	@ (8020f10 <DataRecorder_MainFunction+0x174>)
 8020e36:	edc3 7a00 	vstr	s15, [r3]
			/* Every second update the kilometer status. */
			if(DataRecorder_SpeedCounterActive % 100 == 0 && DataRecorder_SpeedCounterActive != 0)
 8020e3a:	4b30      	ldr	r3, [pc, #192]	@ (8020efc <DataRecorder_MainFunction+0x160>)
 8020e3c:	681a      	ldr	r2, [r3, #0]
 8020e3e:	4b35      	ldr	r3, [pc, #212]	@ (8020f14 <DataRecorder_MainFunction+0x178>)
 8020e40:	fba3 1302 	umull	r1, r3, r3, r2
 8020e44:	095b      	lsrs	r3, r3, #5
 8020e46:	2164      	movs	r1, #100	@ 0x64
 8020e48:	fb01 f303 	mul.w	r3, r1, r3
 8020e4c:	1ad3      	subs	r3, r2, r3
 8020e4e:	2b00      	cmp	r3, #0
 8020e50:	d13b      	bne.n	8020eca <DataRecorder_MainFunction+0x12e>
 8020e52:	4b2a      	ldr	r3, [pc, #168]	@ (8020efc <DataRecorder_MainFunction+0x160>)
 8020e54:	681b      	ldr	r3, [r3, #0]
 8020e56:	2b00      	cmp	r3, #0
 8020e58:	d037      	beq.n	8020eca <DataRecorder_MainFunction+0x12e>
			{
				/* Displayed value is uint32 and not float. */
				fin_aux_km1 += (float)aux_km1 / (float)100;
 8020e5a:	4b2c      	ldr	r3, [pc, #176]	@ (8020f0c <DataRecorder_MainFunction+0x170>)
 8020e5c:	edd3 7a00 	vldr	s15, [r3]
 8020e60:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 8020f18 <DataRecorder_MainFunction+0x17c>
 8020e64:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8020e68:	4b1f      	ldr	r3, [pc, #124]	@ (8020ee8 <DataRecorder_MainFunction+0x14c>)
 8020e6a:	edd3 7a00 	vldr	s15, [r3]
 8020e6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8020e72:	4b1d      	ldr	r3, [pc, #116]	@ (8020ee8 <DataRecorder_MainFunction+0x14c>)
 8020e74:	edc3 7a00 	vstr	s15, [r3]
				fin_aux_km2 += (float)aux_km2 / (float)100;
 8020e78:	4b25      	ldr	r3, [pc, #148]	@ (8020f10 <DataRecorder_MainFunction+0x174>)
 8020e7a:	edd3 7a00 	vldr	s15, [r3]
 8020e7e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8020f18 <DataRecorder_MainFunction+0x17c>
 8020e82:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8020e86:	4b1a      	ldr	r3, [pc, #104]	@ (8020ef0 <DataRecorder_MainFunction+0x154>)
 8020e88:	edd3 7a00 	vldr	s15, [r3]
 8020e8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8020e90:	4b17      	ldr	r3, [pc, #92]	@ (8020ef0 <DataRecorder_MainFunction+0x154>)
 8020e92:	edc3 7a00 	vstr	s15, [r3]
				DataRecorder_KilometerPerDcy = (uint32)fin_aux_km1;
 8020e96:	4b14      	ldr	r3, [pc, #80]	@ (8020ee8 <DataRecorder_MainFunction+0x14c>)
 8020e98:	edd3 7a00 	vldr	s15, [r3]
 8020e9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8020ea0:	ee17 2a90 	vmov	r2, s15
 8020ea4:	4b0f      	ldr	r3, [pc, #60]	@ (8020ee4 <DataRecorder_MainFunction+0x148>)
 8020ea6:	601a      	str	r2, [r3, #0]
				DataRecorder_KilometerTotal  = (uint32)fin_aux_km2;
 8020ea8:	4b11      	ldr	r3, [pc, #68]	@ (8020ef0 <DataRecorder_MainFunction+0x154>)
 8020eaa:	edd3 7a00 	vldr	s15, [r3]
 8020eae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8020eb2:	ee17 2a90 	vmov	r2, s15
 8020eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8020eec <DataRecorder_MainFunction+0x150>)
 8020eb8:	601a      	str	r2, [r3, #0]
				aux_km1 = 0;
 8020eba:	4b14      	ldr	r3, [pc, #80]	@ (8020f0c <DataRecorder_MainFunction+0x170>)
 8020ebc:	f04f 0200 	mov.w	r2, #0
 8020ec0:	601a      	str	r2, [r3, #0]
				aux_km2 = 0;
 8020ec2:	4b13      	ldr	r3, [pc, #76]	@ (8020f10 <DataRecorder_MainFunction+0x174>)
 8020ec4:	f04f 0200 	mov.w	r2, #0
 8020ec8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		/* Do nothing. */
	}
	DataRecorder_MainCounter++;
 8020eca:	4b05      	ldr	r3, [pc, #20]	@ (8020ee0 <DataRecorder_MainFunction+0x144>)
 8020ecc:	681b      	ldr	r3, [r3, #0]
 8020ece:	3301      	adds	r3, #1
 8020ed0:	4a03      	ldr	r2, [pc, #12]	@ (8020ee0 <DataRecorder_MainFunction+0x144>)
 8020ed2:	6013      	str	r3, [r2, #0]
}
 8020ed4:	bf00      	nop
 8020ed6:	46bd      	mov	sp, r7
 8020ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020edc:	4770      	bx	lr
 8020ede:	bf00      	nop
 8020ee0:	10000008 	.word	0x10000008
 8020ee4:	100000b4 	.word	0x100000b4
 8020ee8:	100000f4 	.word	0x100000f4
 8020eec:	100000b0 	.word	0x100000b0
 8020ef0:	100000f8 	.word	0x100000f8
 8020ef4:	10000004 	.word	0x10000004
 8020ef8:	10000000 	.word	0x10000000
 8020efc:	10000010 	.word	0x10000010
 8020f00:	10000780 	.word	0x10000780
 8020f04:	45610000 	.word	0x45610000
 8020f08:	1000000c 	.word	0x1000000c
 8020f0c:	100000ec 	.word	0x100000ec
 8020f10:	100000f0 	.word	0x100000f0
 8020f14:	51eb851f 	.word	0x51eb851f
 8020f18:	42c80000 	.word	0x42c80000

08020f1c <DigitalCluster_Init>:
void DigitalCluster_DisplaySideSpeedRpm(DigitalCluster_DisplayMode_t *displayType);
void DigitalCluster_DisplayKMTotalDcy(DigitalCluster_DisplayMode_t *displayType);
void DigitalCluster_InitMemory(void);

void DigitalCluster_Init(void)
{
 8020f1c:	b580      	push	{r7, lr}
 8020f1e:	b082      	sub	sp, #8
 8020f20:	af02      	add	r7, sp, #8
	/* Re-init the variables with a known value.
	 * Useful for when the switching between different states
	 * of the LCD is done
	 * and we want to go back to previous state.
	 * */
	speedBarHeight = 180;
 8020f22:	4b63      	ldr	r3, [pc, #396]	@ (80210b0 <DigitalCluster_Init+0x194>)
 8020f24:	22b4      	movs	r2, #180	@ 0xb4
 8020f26:	801a      	strh	r2, [r3, #0]
	rpmBarHeight = 180;
 8020f28:	4b62      	ldr	r3, [pc, #392]	@ (80210b4 <DigitalCluster_Init+0x198>)
 8020f2a:	22b4      	movs	r2, #180	@ 0xb4
 8020f2c:	801a      	strh	r2, [r3, #0]
	pSpeedBarHeight = 180;
 8020f2e:	4b62      	ldr	r3, [pc, #392]	@ (80210b8 <DigitalCluster_Init+0x19c>)
 8020f30:	22b4      	movs	r2, #180	@ 0xb4
 8020f32:	801a      	strh	r2, [r3, #0]
	pRpmBarHeight = 180;
 8020f34:	4b61      	ldr	r3, [pc, #388]	@ (80210bc <DigitalCluster_Init+0x1a0>)
 8020f36:	22b4      	movs	r2, #180	@ 0xb4
 8020f38:	801a      	strh	r2, [r3, #0]
	maxBarHeight = 180;
 8020f3a:	4b61      	ldr	r3, [pc, #388]	@ (80210c0 <DigitalCluster_Init+0x1a4>)
 8020f3c:	22b4      	movs	r2, #180	@ 0xb4
 8020f3e:	801a      	strh	r2, [r3, #0]
	hasTimeHChanged = 99;
 8020f40:	4b60      	ldr	r3, [pc, #384]	@ (80210c4 <DigitalCluster_Init+0x1a8>)
 8020f42:	2263      	movs	r2, #99	@ 0x63
 8020f44:	701a      	strb	r2, [r3, #0]
	hasTimeMChanged = 99;
 8020f46:	4b60      	ldr	r3, [pc, #384]	@ (80210c8 <DigitalCluster_Init+0x1ac>)
 8020f48:	2263      	movs	r2, #99	@ 0x63
 8020f4a:	701a      	strb	r2, [r3, #0]
	hbPrevState = 99;
 8020f4c:	4b5f      	ldr	r3, [pc, #380]	@ (80210cc <DigitalCluster_Init+0x1b0>)
 8020f4e:	2263      	movs	r2, #99	@ 0x63
 8020f50:	701a      	strb	r2, [r3, #0]
	psPrevState = 99;
 8020f52:	4b5f      	ldr	r3, [pc, #380]	@ (80210d0 <DigitalCluster_Init+0x1b4>)
 8020f54:	2263      	movs	r2, #99	@ 0x63
 8020f56:	701a      	strb	r2, [r3, #0]
	tPrevState = 100;
 8020f58:	4b5e      	ldr	r3, [pc, #376]	@ (80210d4 <DigitalCluster_Init+0x1b8>)
 8020f5a:	2264      	movs	r2, #100	@ 0x64
 8020f5c:	701a      	strb	r2, [r3, #0]
	gPrevState = 5;
 8020f5e:	4b5e      	ldr	r3, [pc, #376]	@ (80210d8 <DigitalCluster_Init+0x1bc>)
 8020f60:	2205      	movs	r2, #5
 8020f62:	701a      	strb	r2, [r3, #0]
	dmPrevState = 180;
 8020f64:	4b5d      	ldr	r3, [pc, #372]	@ (80210dc <DigitalCluster_Init+0x1c0>)
 8020f66:	22b4      	movs	r2, #180	@ 0xb4
 8020f68:	701a      	strb	r2, [r3, #0]
	pVehSpeed = 331;
 8020f6a:	4b5d      	ldr	r3, [pc, #372]	@ (80210e0 <DigitalCluster_Init+0x1c4>)
 8020f6c:	f240 124b 	movw	r2, #331	@ 0x14b
 8020f70:	801a      	strh	r2, [r3, #0]
	pRpm = 10000;
 8020f72:	4b5c      	ldr	r3, [pc, #368]	@ (80210e4 <DigitalCluster_Init+0x1c8>)
 8020f74:	f242 7210 	movw	r2, #10000	@ 0x2710
 8020f78:	801a      	strh	r2, [r3, #0]
	timestamp = 0;
 8020f7a:	4b5b      	ldr	r3, [pc, #364]	@ (80210e8 <DigitalCluster_Init+0x1cc>)
 8020f7c:	2200      	movs	r2, #0
 8020f7e:	601a      	str	r2, [r3, #0]
	collisionFlag = 0;
 8020f80:	4b5a      	ldr	r3, [pc, #360]	@ (80210ec <DigitalCluster_Init+0x1d0>)
 8020f82:	2200      	movs	r2, #0
 8020f84:	701a      	strb	r2, [r3, #0]
	collisionFlagClear = 0;
 8020f86:	4b5a      	ldr	r3, [pc, #360]	@ (80210f0 <DigitalCluster_Init+0x1d4>)
 8020f88:	2200      	movs	r2, #0
 8020f8a:	701a      	strb	r2, [r3, #0]
	ccmFlag = 0;
 8020f8c:	4b59      	ldr	r3, [pc, #356]	@ (80210f4 <DigitalCluster_Init+0x1d8>)
 8020f8e:	2200      	movs	r2, #0
 8020f90:	701a      	strb	r2, [r3, #0]
	vehSpeedConv = 340;
 8020f92:	4b59      	ldr	r3, [pc, #356]	@ (80210f8 <DigitalCluster_Init+0x1dc>)
 8020f94:	f44f 72aa 	mov.w	r2, #340	@ 0x154
 8020f98:	601a      	str	r2, [r3, #0]
	rpmConv = 10000;
 8020f9a:	4b58      	ldr	r3, [pc, #352]	@ (80210fc <DigitalCluster_Init+0x1e0>)
 8020f9c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8020fa0:	601a      	str	r2, [r3, #0]
	localDM1 = 99;
 8020fa2:	4b57      	ldr	r3, [pc, #348]	@ (8021100 <DigitalCluster_Init+0x1e4>)
 8020fa4:	2263      	movs	r2, #99	@ 0x63
 8020fa6:	701a      	strb	r2, [r3, #0]
	localDM2 = 99;
 8020fa8:	4b56      	ldr	r3, [pc, #344]	@ (8021104 <DigitalCluster_Init+0x1e8>)
 8020faa:	2263      	movs	r2, #99	@ 0x63
 8020fac:	701a      	strb	r2, [r3, #0]
	localDM3 = 99;
 8020fae:	4b56      	ldr	r3, [pc, #344]	@ (8021108 <DigitalCluster_Init+0x1ec>)
 8020fb0:	2263      	movs	r2, #99	@ 0x63
 8020fb2:	701a      	strb	r2, [r3, #0]
	localDM4 = 99;
 8020fb4:	4b55      	ldr	r3, [pc, #340]	@ (802110c <DigitalCluster_Init+0x1f0>)
 8020fb6:	2263      	movs	r2, #99	@ 0x63
 8020fb8:	701a      	strb	r2, [r3, #0]
	DigitalCluster_WelcomeAnimationCounter = 0x00;
 8020fba:	4b55      	ldr	r3, [pc, #340]	@ (8021110 <DigitalCluster_Init+0x1f4>)
 8020fbc:	2200      	movs	r2, #0
 8020fbe:	701a      	strb	r2, [r3, #0]
	DigitalCluster_LeavingAnimationCounter = 0x00;
 8020fc0:	4b54      	ldr	r3, [pc, #336]	@ (8021114 <DigitalCluster_Init+0x1f8>)
 8020fc2:	2200      	movs	r2, #0
 8020fc4:	701a      	strb	r2, [r3, #0]
	DigitalCluster_WelcomeAuxColor = 0x00;
 8020fc6:	4b54      	ldr	r3, [pc, #336]	@ (8021118 <DigitalCluster_Init+0x1fc>)
 8020fc8:	2200      	movs	r2, #0
 8020fca:	801a      	strh	r2, [r3, #0]
	DigitalCluster_LeavingAuxColor = 0xFFFF;
 8020fcc:	4b53      	ldr	r3, [pc, #332]	@ (802111c <DigitalCluster_Init+0x200>)
 8020fce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8020fd2:	801a      	strh	r2, [r3, #0]
	DigitalCluster_PreviousIgnStat = 0x00;
 8020fd4:	4b52      	ldr	r3, [pc, #328]	@ (8021120 <DigitalCluster_Init+0x204>)
 8020fd6:	2200      	movs	r2, #0
 8020fd8:	701a      	strb	r2, [r3, #0]
	CCM_Counter = 0x00;
 8020fda:	4b52      	ldr	r3, [pc, #328]	@ (8021124 <DigitalCluster_Init+0x208>)
 8020fdc:	2200      	movs	r2, #0
 8020fde:	601a      	str	r2, [r3, #0]
	TS_Counter = 0x00;
 8020fe0:	4b51      	ldr	r3, [pc, #324]	@ (8021128 <DigitalCluster_Init+0x20c>)
 8020fe2:	2200      	movs	r2, #0
 8020fe4:	601a      	str	r2, [r3, #0]
	CAW_Counter = 0x00;
 8020fe6:	4b51      	ldr	r3, [pc, #324]	@ (802112c <DigitalCluster_Init+0x210>)
 8020fe8:	2200      	movs	r2, #0
 8020fea:	601a      	str	r2, [r3, #0]
	clearBeforeLeave = 0;
 8020fec:	4b50      	ldr	r3, [pc, #320]	@ (8021130 <DigitalCluster_Init+0x214>)
 8020fee:	2200      	movs	r2, #0
 8020ff0:	701a      	strb	r2, [r3, #0]
	clearBeforeWelcome = 0;
 8020ff2:	4b50      	ldr	r3, [pc, #320]	@ (8021134 <DigitalCluster_Init+0x218>)
 8020ff4:	2200      	movs	r2, #0
 8020ff6:	701a      	strb	r2, [r3, #0]
	pKmTot = 0xFFFFFFFF;
 8020ff8:	4b4f      	ldr	r3, [pc, #316]	@ (8021138 <DigitalCluster_Init+0x21c>)
 8020ffa:	f04f 32ff 	mov.w	r2, #4294967295
 8020ffe:	601a      	str	r2, [r3, #0]
	pKmDcy = 0xFFFFFFFF;
 8021000:	4b4e      	ldr	r3, [pc, #312]	@ (802113c <DigitalCluster_Init+0x220>)
 8021002:	f04f 32ff 	mov.w	r2, #4294967295
 8021006:	601a      	str	r2, [r3, #0]
	pFogLightFront = 99;
 8021008:	4b4d      	ldr	r3, [pc, #308]	@ (8021140 <DigitalCluster_Init+0x224>)
 802100a:	2263      	movs	r2, #99	@ 0x63
 802100c:	701a      	strb	r2, [r3, #0]
	pFogLightRear = 99;
 802100e:	4b4d      	ldr	r3, [pc, #308]	@ (8021144 <DigitalCluster_Init+0x228>)
 8021010:	2263      	movs	r2, #99	@ 0x63
 8021012:	701a      	strb	r2, [r3, #0]
	pRls = 99;
 8021014:	4b4c      	ldr	r3, [pc, #304]	@ (8021148 <DigitalCluster_Init+0x22c>)
 8021016:	2263      	movs	r2, #99	@ 0x63
 8021018:	701a      	strb	r2, [r3, #0]
	pRecirculation = 99;
 802101a:	4b4c      	ldr	r3, [pc, #304]	@ (802114c <DigitalCluster_Init+0x230>)
 802101c:	2263      	movs	r2, #99	@ 0x63
 802101e:	701a      	strb	r2, [r3, #0]
	pRequestedTemperature = 99;
 8021020:	4b4b      	ldr	r3, [pc, #300]	@ (8021150 <DigitalCluster_Init+0x234>)
 8021022:	2263      	movs	r2, #99	@ 0x63
 8021024:	701a      	strb	r2, [r3, #0]
	pAutoClimate = 99;
 8021026:	4b4b      	ldr	r3, [pc, #300]	@ (8021154 <DigitalCluster_Init+0x238>)
 8021028:	2263      	movs	r2, #99	@ 0x63
 802102a:	701a      	strb	r2, [r3, #0]
	pFanValue = 9;
 802102c:	4b4a      	ldr	r3, [pc, #296]	@ (8021158 <DigitalCluster_Init+0x23c>)
 802102e:	2209      	movs	r2, #9
 8021030:	701a      	strb	r2, [r3, #0]
	pCheckControlMessageId = 99;
 8021032:	4b4a      	ldr	r3, [pc, #296]	@ (802115c <DigitalCluster_Init+0x240>)
 8021034:	2263      	movs	r2, #99	@ 0x63
 8021036:	701a      	strb	r2, [r3, #0]
	/* Initialize the ILI9341 via FSMC. */
	DigitalCluster_RetValInit = FsmcH_LcdInit();
 8021038:	f005 fbb8 	bl	80267ac <FsmcH_LcdInit>
 802103c:	4603      	mov	r3, r0
 802103e:	461a      	mov	r2, r3
 8021040:	4b47      	ldr	r3, [pc, #284]	@ (8021160 <DigitalCluster_Init+0x244>)
 8021042:	701a      	strb	r2, [r3, #0]
	/* Delay to prevent wrong initialization. */
	HAL_Delay(10);
 8021044:	200a      	movs	r0, #10
 8021046:	f007 fa55 	bl	80284f4 <HAL_Delay>
	/* If all good. */
	if(0x00 == DigitalCluster_RetValInit)
 802104a:	4b45      	ldr	r3, [pc, #276]	@ (8021160 <DigitalCluster_Init+0x244>)
 802104c:	781b      	ldrb	r3, [r3, #0]
 802104e:	2b00      	cmp	r3, #0
 8021050:	d12a      	bne.n	80210a8 <DigitalCluster_Init+0x18c>
	{
		/* Read LCD register values to make sure the initialization sequence was done properly. */
		FsmcH_WriteCommand(DIGITALCLUSTER_READDISPLAYSTATUS_CMD);
 8021052:	2009      	movs	r0, #9
 8021054:	f005 fb06 	bl	8026664 <FsmcH_WriteCommand>
		DigitalCluster_ReadDisplayStatus_RegisterValue = (uint16)FsmcH_ReadData();
 8021058:	f005 fc5e 	bl	8026918 <FsmcH_ReadData>
 802105c:	4603      	mov	r3, r0
 802105e:	b29a      	uxth	r2, r3
 8021060:	4b40      	ldr	r3, [pc, #256]	@ (8021164 <DigitalCluster_Init+0x248>)
 8021062:	801a      	strh	r2, [r3, #0]
		FsmcH_WriteCommand(DIGITALCLUSTER_READDISPLAYPOWERMODE_CMD);
 8021064:	200a      	movs	r0, #10
 8021066:	f005 fafd 	bl	8026664 <FsmcH_WriteCommand>
		DigitalCluster_ReadDisplayPowerMode_RegisterValue = (uint16)FsmcH_ReadData();
 802106a:	f005 fc55 	bl	8026918 <FsmcH_ReadData>
 802106e:	4603      	mov	r3, r0
 8021070:	b2da      	uxtb	r2, r3
 8021072:	4b3d      	ldr	r3, [pc, #244]	@ (8021168 <DigitalCluster_Init+0x24c>)
 8021074:	701a      	strb	r2, [r3, #0]
		if(DIGITALCLUSTER_LCD_DISPLAYSTATUS_REGISTERVALUE == DigitalCluster_ReadDisplayStatus_RegisterValue && DIGITALCLUSTER_LCD_POWERMODE_REGISTERVALUE == DigitalCluster_ReadDisplayPowerMode_RegisterValue)
 8021076:	4b3b      	ldr	r3, [pc, #236]	@ (8021164 <DigitalCluster_Init+0x248>)
 8021078:	881b      	ldrh	r3, [r3, #0]
 802107a:	2b9c      	cmp	r3, #156	@ 0x9c
 802107c:	d114      	bne.n	80210a8 <DigitalCluster_Init+0x18c>
 802107e:	4b3a      	ldr	r3, [pc, #232]	@ (8021168 <DigitalCluster_Init+0x24c>)
 8021080:	781b      	ldrb	r3, [r3, #0]
 8021082:	2bb4      	cmp	r3, #180	@ 0xb4
 8021084:	d110      	bne.n	80210a8 <DigitalCluster_Init+0x18c>
		{
			/* State that the LCD is initialized.
			 * Switch back-light on.
			 * Set background color to black. */
			DigitalCluster_LcdInit = 0x01;
 8021086:	4b39      	ldr	r3, [pc, #228]	@ (802116c <DigitalCluster_Init+0x250>)
 8021088:	2201      	movs	r2, #1
 802108a:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(DIGITALCLUSTER_BACKLIGHT_GPIO_Port, DIGITALCLUSTER_BACKLIGHT_Pin, 1);
 802108c:	2201      	movs	r2, #1
 802108e:	2102      	movs	r1, #2
 8021090:	4837      	ldr	r0, [pc, #220]	@ (8021170 <DigitalCluster_Init+0x254>)
 8021092:	f00d f959 	bl	802e348 <HAL_GPIO_WritePin>
			FsmcH_FillRectangle(0, 0, 320, 240, TFT_BLACK);
 8021096:	2300      	movs	r3, #0
 8021098:	9300      	str	r3, [sp, #0]
 802109a:	23f0      	movs	r3, #240	@ 0xf0
 802109c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80210a0:	2100      	movs	r1, #0
 80210a2:	2000      	movs	r0, #0
 80210a4:	f005 fb3a 	bl	802671c <FsmcH_FillRectangle>
		else
		{
			/* Do nothing. */
		}
	}
}
 80210a8:	bf00      	nop
 80210aa:	46bd      	mov	sp, r7
 80210ac:	bd80      	pop	{r7, pc}
 80210ae:	bf00      	nop
 80210b0:	10000760 	.word	0x10000760
 80210b4:	10000762 	.word	0x10000762
 80210b8:	10000764 	.word	0x10000764
 80210bc:	10000766 	.word	0x10000766
 80210c0:	10000768 	.word	0x10000768
 80210c4:	1000076a 	.word	0x1000076a
 80210c8:	1000076b 	.word	0x1000076b
 80210cc:	1000076c 	.word	0x1000076c
 80210d0:	1000076d 	.word	0x1000076d
 80210d4:	1000076e 	.word	0x1000076e
 80210d8:	1000076f 	.word	0x1000076f
 80210dc:	10000770 	.word	0x10000770
 80210e0:	10000772 	.word	0x10000772
 80210e4:	10000774 	.word	0x10000774
 80210e8:	10000778 	.word	0x10000778
 80210ec:	1000077c 	.word	0x1000077c
 80210f0:	1000077d 	.word	0x1000077d
 80210f4:	1000077e 	.word	0x1000077e
 80210f8:	10000780 	.word	0x10000780
 80210fc:	10000784 	.word	0x10000784
 8021100:	10000788 	.word	0x10000788
 8021104:	10000789 	.word	0x10000789
 8021108:	1000078a 	.word	0x1000078a
 802110c:	1000078b 	.word	0x1000078b
 8021110:	10000720 	.word	0x10000720
 8021114:	10000721 	.word	0x10000721
 8021118:	10000722 	.word	0x10000722
 802111c:	10000724 	.word	0x10000724
 8021120:	10000726 	.word	0x10000726
 8021124:	10000754 	.word	0x10000754
 8021128:	10000758 	.word	0x10000758
 802112c:	1000075c 	.word	0x1000075c
 8021130:	1000078c 	.word	0x1000078c
 8021134:	1000078d 	.word	0x1000078d
 8021138:	10000790 	.word	0x10000790
 802113c:	10000794 	.word	0x10000794
 8021140:	10000799 	.word	0x10000799
 8021144:	1000079a 	.word	0x1000079a
 8021148:	1000079b 	.word	0x1000079b
 802114c:	1000079c 	.word	0x1000079c
 8021150:	1000079d 	.word	0x1000079d
 8021154:	1000079e 	.word	0x1000079e
 8021158:	1000079f 	.word	0x1000079f
 802115c:	1000070e 	.word	0x1000070e
 8021160:	10000701 	.word	0x10000701
 8021164:	10000718 	.word	0x10000718
 8021168:	100006ff 	.word	0x100006ff
 802116c:	10000700 	.word	0x10000700
 8021170:	40020400 	.word	0x40020400

08021174 <DigitalCluster_InitHandler>:
void DigitalCluster_InitHandler(void)
{
 8021174:	b580      	push	{r7, lr}
 8021176:	af00      	add	r7, sp, #0
	if(0x00 == DigitalCluster_LcdInit && 0x01 != DigitalCluster_FsmcDmaErrorFlag)
 8021178:	4b08      	ldr	r3, [pc, #32]	@ (802119c <DigitalCluster_InitHandler+0x28>)
 802117a:	781b      	ldrb	r3, [r3, #0]
 802117c:	2b00      	cmp	r3, #0
 802117e:	d10a      	bne.n	8021196 <DigitalCluster_InitHandler+0x22>
 8021180:	4b07      	ldr	r3, [pc, #28]	@ (80211a0 <DigitalCluster_InitHandler+0x2c>)
 8021182:	781b      	ldrb	r3, [r3, #0]
 8021184:	2b01      	cmp	r3, #1
 8021186:	d006      	beq.n	8021196 <DigitalCluster_InitHandler+0x22>
	{
		DigitalCluster_InitRetry++;
 8021188:	4b06      	ldr	r3, [pc, #24]	@ (80211a4 <DigitalCluster_InitHandler+0x30>)
 802118a:	681b      	ldr	r3, [r3, #0]
 802118c:	3301      	adds	r3, #1
 802118e:	4a05      	ldr	r2, [pc, #20]	@ (80211a4 <DigitalCluster_InitHandler+0x30>)
 8021190:	6013      	str	r3, [r2, #0]
		DigitalCluster_Init();
 8021192:	f7ff fec3 	bl	8020f1c <DigitalCluster_Init>
	}
	else
	{
		/* Do nothing. */
	}
}
 8021196:	bf00      	nop
 8021198:	bd80      	pop	{r7, pc}
 802119a:	bf00      	nop
 802119c:	10000700 	.word	0x10000700
 80211a0:	10000727 	.word	0x10000727
 80211a4:	1000072c 	.word	0x1000072c

080211a8 <DigitalCluster_DisplayKMTotalDcy>:
void DigitalCluster_DisplayKMTotalDcy(DigitalCluster_DisplayMode_t *displayType)
{
 80211a8:	b590      	push	{r4, r7, lr}
 80211aa:	b085      	sub	sp, #20
 80211ac:	af02      	add	r7, sp, #8
 80211ae:	6078      	str	r0, [r7, #4]
	if(pKmTot != DataRecorder_KilometerTotal)
 80211b0:	4b89      	ldr	r3, [pc, #548]	@ (80213d8 <DigitalCluster_DisplayKMTotalDcy+0x230>)
 80211b2:	681a      	ldr	r2, [r3, #0]
 80211b4:	4b89      	ldr	r3, [pc, #548]	@ (80213dc <DigitalCluster_DisplayKMTotalDcy+0x234>)
 80211b6:	681b      	ldr	r3, [r3, #0]
 80211b8:	429a      	cmp	r2, r3
 80211ba:	f000 8140 	beq.w	802143e <DigitalCluster_DisplayKMTotalDcy+0x296>
	{
		pKmTot = DataRecorder_KilometerTotal;
 80211be:	4b87      	ldr	r3, [pc, #540]	@ (80213dc <DigitalCluster_DisplayKMTotalDcy+0x234>)
 80211c0:	681b      	ldr	r3, [r3, #0]
 80211c2:	4a85      	ldr	r2, [pc, #532]	@ (80213d8 <DigitalCluster_DisplayKMTotalDcy+0x230>)
 80211c4:	6013      	str	r3, [r2, #0]

		if(10 > DataRecorder_KilometerTotal)
 80211c6:	4b85      	ldr	r3, [pc, #532]	@ (80213dc <DigitalCluster_DisplayKMTotalDcy+0x234>)
 80211c8:	681b      	ldr	r3, [r3, #0]
 80211ca:	2b09      	cmp	r3, #9
 80211cc:	d82f      	bhi.n	802122e <DigitalCluster_DisplayKMTotalDcy+0x86>
		{
			FsmcH_FillRectangle(displayType->KmTot.KMTOTBox.position_x,
 80211ce:	687b      	ldr	r3, [r7, #4]
 80211d0:	f8b3 00f0 	ldrh.w	r0, [r3, #240]	@ 0xf0
 80211d4:	687b      	ldr	r3, [r7, #4]
 80211d6:	f8b3 10f2 	ldrh.w	r1, [r3, #242]	@ 0xf2
 80211da:	687b      	ldr	r3, [r7, #4]
 80211dc:	f8b3 20f4 	ldrh.w	r2, [r3, #244]	@ 0xf4
 80211e0:	687b      	ldr	r3, [r7, #4]
 80211e2:	f8b3 30f6 	ldrh.w	r3, [r3, #246]	@ 0xf6
 80211e6:	2400      	movs	r4, #0
 80211e8:	9400      	str	r4, [sp, #0]
 80211ea:	f005 fa97 	bl	802671c <FsmcH_FillRectangle>
					displayType->KmTot.KMTOTBox.position_y,
					displayType->KmTot.KMTOTBox.width,
					displayType->KmTot.KMTOTBox.height,
					TFT_BLACK);
			FsmcH_DrawInteger(displayType->KmTot.KMTOT_Text.position_x,
 80211ee:	687b      	ldr	r3, [r7, #4]
 80211f0:	f8b3 00f8 	ldrh.w	r0, [r3, #248]	@ 0xf8
 80211f4:	687b      	ldr	r3, [r7, #4]
 80211f6:	f8b3 10fa 	ldrh.w	r1, [r3, #250]	@ 0xfa
 80211fa:	4b78      	ldr	r3, [pc, #480]	@ (80213dc <DigitalCluster_DisplayKMTotalDcy+0x234>)
 80211fc:	681a      	ldr	r2, [r3, #0]
 80211fe:	2300      	movs	r3, #0
 8021200:	9300      	str	r3, [sp, #0]
 8021202:	f24d 53b1 	movw	r3, #54705	@ 0xd5b1
 8021206:	f005 f9fb 	bl	8026600 <FsmcH_DrawInteger>
					displayType->KmTot.KMTOT_Text.position_y,
					DataRecorder_KilometerTotal,
					TFT_TAN,
					TFT_BLACK);
			FsmcH_DrawString8(displayType->KmTot.KMTOTStat_Text.position_x - 85,
 802120a:	687b      	ldr	r3, [r7, #4]
 802120c:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8021210:	3b55      	subs	r3, #85	@ 0x55
 8021212:	b298      	uxth	r0, r3
 8021214:	687b      	ldr	r3, [r7, #4]
 8021216:	f8b3 1102 	ldrh.w	r1, [r3, #258]	@ 0x102
 802121a:	687b      	ldr	r3, [r7, #4]
 802121c:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8021220:	2300      	movs	r3, #0
 8021222:	9300      	str	r3, [sp, #0]
 8021224:	f24d 53b1 	movw	r3, #54705	@ 0xd5b1
 8021228:	f005 f99a 	bl	8026560 <FsmcH_DrawString8>
 802122c:	e107      	b.n	802143e <DigitalCluster_DisplayKMTotalDcy+0x296>
					displayType->KmTot.KMTOTStat_Text.position_y,
					displayType->KmTot.KMTOTStat_Text.text,
					TFT_TAN,
					TFT_BLACK);
		}
		else if(100 > DataRecorder_KilometerTotal)
 802122e:	4b6b      	ldr	r3, [pc, #428]	@ (80213dc <DigitalCluster_DisplayKMTotalDcy+0x234>)
 8021230:	681b      	ldr	r3, [r3, #0]
 8021232:	2b63      	cmp	r3, #99	@ 0x63
 8021234:	d82f      	bhi.n	8021296 <DigitalCluster_DisplayKMTotalDcy+0xee>
		{
			FsmcH_FillRectangle(displayType->KmTot.KMTOTBox.position_x,
 8021236:	687b      	ldr	r3, [r7, #4]
 8021238:	f8b3 00f0 	ldrh.w	r0, [r3, #240]	@ 0xf0
 802123c:	687b      	ldr	r3, [r7, #4]
 802123e:	f8b3 10f2 	ldrh.w	r1, [r3, #242]	@ 0xf2
 8021242:	687b      	ldr	r3, [r7, #4]
 8021244:	f8b3 20f4 	ldrh.w	r2, [r3, #244]	@ 0xf4
 8021248:	687b      	ldr	r3, [r7, #4]
 802124a:	f8b3 30f6 	ldrh.w	r3, [r3, #246]	@ 0xf6
 802124e:	2400      	movs	r4, #0
 8021250:	9400      	str	r4, [sp, #0]
 8021252:	f005 fa63 	bl	802671c <FsmcH_FillRectangle>
					displayType->KmTot.KMTOTBox.position_y,
					displayType->KmTot.KMTOTBox.width,
					displayType->KmTot.KMTOTBox.height,
					TFT_BLACK);
			FsmcH_DrawInteger(displayType->KmTot.KMTOT_Text.position_x,
 8021256:	687b      	ldr	r3, [r7, #4]
 8021258:	f8b3 00f8 	ldrh.w	r0, [r3, #248]	@ 0xf8
 802125c:	687b      	ldr	r3, [r7, #4]
 802125e:	f8b3 10fa 	ldrh.w	r1, [r3, #250]	@ 0xfa
 8021262:	4b5e      	ldr	r3, [pc, #376]	@ (80213dc <DigitalCluster_DisplayKMTotalDcy+0x234>)
 8021264:	681a      	ldr	r2, [r3, #0]
 8021266:	2300      	movs	r3, #0
 8021268:	9300      	str	r3, [sp, #0]
 802126a:	f24d 53b1 	movw	r3, #54705	@ 0xd5b1
 802126e:	f005 f9c7 	bl	8026600 <FsmcH_DrawInteger>
					displayType->KmTot.KMTOT_Text.position_y,
					DataRecorder_KilometerTotal,
					TFT_TAN,
					TFT_BLACK);
			FsmcH_DrawString8(displayType->KmTot.KMTOTStat_Text.position_x - 68,
 8021272:	687b      	ldr	r3, [r7, #4]
 8021274:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8021278:	3b44      	subs	r3, #68	@ 0x44
 802127a:	b298      	uxth	r0, r3
 802127c:	687b      	ldr	r3, [r7, #4]
 802127e:	f8b3 1102 	ldrh.w	r1, [r3, #258]	@ 0x102
 8021282:	687b      	ldr	r3, [r7, #4]
 8021284:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8021288:	2300      	movs	r3, #0
 802128a:	9300      	str	r3, [sp, #0]
 802128c:	f24d 53b1 	movw	r3, #54705	@ 0xd5b1
 8021290:	f005 f966 	bl	8026560 <FsmcH_DrawString8>
 8021294:	e0d3      	b.n	802143e <DigitalCluster_DisplayKMTotalDcy+0x296>
					displayType->KmTot.KMTOTStat_Text.position_y,
					displayType->KmTot.KMTOTStat_Text.text,
					TFT_TAN,
					TFT_BLACK);
		}
		else if(1000 > DataRecorder_KilometerTotal)
 8021296:	4b51      	ldr	r3, [pc, #324]	@ (80213dc <DigitalCluster_DisplayKMTotalDcy+0x234>)
 8021298:	681b      	ldr	r3, [r3, #0]
 802129a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 802129e:	d22f      	bcs.n	8021300 <DigitalCluster_DisplayKMTotalDcy+0x158>
		{
			FsmcH_FillRectangle(displayType->KmTot.KMTOTBox.position_x,
 80212a0:	687b      	ldr	r3, [r7, #4]
 80212a2:	f8b3 00f0 	ldrh.w	r0, [r3, #240]	@ 0xf0
 80212a6:	687b      	ldr	r3, [r7, #4]
 80212a8:	f8b3 10f2 	ldrh.w	r1, [r3, #242]	@ 0xf2
 80212ac:	687b      	ldr	r3, [r7, #4]
 80212ae:	f8b3 20f4 	ldrh.w	r2, [r3, #244]	@ 0xf4
 80212b2:	687b      	ldr	r3, [r7, #4]
 80212b4:	f8b3 30f6 	ldrh.w	r3, [r3, #246]	@ 0xf6
 80212b8:	2400      	movs	r4, #0
 80212ba:	9400      	str	r4, [sp, #0]
 80212bc:	f005 fa2e 	bl	802671c <FsmcH_FillRectangle>
					displayType->KmTot.KMTOTBox.position_y,
					displayType->KmTot.KMTOTBox.width,
					displayType->KmTot.KMTOTBox.height,
					TFT_BLACK);
			FsmcH_DrawInteger(displayType->KmTot.KMTOT_Text.position_x,
 80212c0:	687b      	ldr	r3, [r7, #4]
 80212c2:	f8b3 00f8 	ldrh.w	r0, [r3, #248]	@ 0xf8
 80212c6:	687b      	ldr	r3, [r7, #4]
 80212c8:	f8b3 10fa 	ldrh.w	r1, [r3, #250]	@ 0xfa
 80212cc:	4b43      	ldr	r3, [pc, #268]	@ (80213dc <DigitalCluster_DisplayKMTotalDcy+0x234>)
 80212ce:	681a      	ldr	r2, [r3, #0]
 80212d0:	2300      	movs	r3, #0
 80212d2:	9300      	str	r3, [sp, #0]
 80212d4:	f24d 53b1 	movw	r3, #54705	@ 0xd5b1
 80212d8:	f005 f992 	bl	8026600 <FsmcH_DrawInteger>
					displayType->KmTot.KMTOT_Text.position_y,
					DataRecorder_KilometerTotal,
					TFT_TAN,
					TFT_BLACK);
			FsmcH_DrawString8(displayType->KmTot.KMTOTStat_Text.position_x - 51,
 80212dc:	687b      	ldr	r3, [r7, #4]
 80212de:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 80212e2:	3b33      	subs	r3, #51	@ 0x33
 80212e4:	b298      	uxth	r0, r3
 80212e6:	687b      	ldr	r3, [r7, #4]
 80212e8:	f8b3 1102 	ldrh.w	r1, [r3, #258]	@ 0x102
 80212ec:	687b      	ldr	r3, [r7, #4]
 80212ee:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 80212f2:	2300      	movs	r3, #0
 80212f4:	9300      	str	r3, [sp, #0]
 80212f6:	f24d 53b1 	movw	r3, #54705	@ 0xd5b1
 80212fa:	f005 f931 	bl	8026560 <FsmcH_DrawString8>
 80212fe:	e09e      	b.n	802143e <DigitalCluster_DisplayKMTotalDcy+0x296>
					displayType->KmTot.KMTOTStat_Text.position_y,
					displayType->KmTot.KMTOTStat_Text.text,
					TFT_TAN,
					TFT_BLACK);
		}
		else if(10000 > DataRecorder_KilometerTotal)
 8021300:	4b36      	ldr	r3, [pc, #216]	@ (80213dc <DigitalCluster_DisplayKMTotalDcy+0x234>)
 8021302:	681b      	ldr	r3, [r3, #0]
 8021304:	f242 720f 	movw	r2, #9999	@ 0x270f
 8021308:	4293      	cmp	r3, r2
 802130a:	d82f      	bhi.n	802136c <DigitalCluster_DisplayKMTotalDcy+0x1c4>
		{
			FsmcH_FillRectangle(displayType->KmTot.KMTOTBox.position_x,
 802130c:	687b      	ldr	r3, [r7, #4]
 802130e:	f8b3 00f0 	ldrh.w	r0, [r3, #240]	@ 0xf0
 8021312:	687b      	ldr	r3, [r7, #4]
 8021314:	f8b3 10f2 	ldrh.w	r1, [r3, #242]	@ 0xf2
 8021318:	687b      	ldr	r3, [r7, #4]
 802131a:	f8b3 20f4 	ldrh.w	r2, [r3, #244]	@ 0xf4
 802131e:	687b      	ldr	r3, [r7, #4]
 8021320:	f8b3 30f6 	ldrh.w	r3, [r3, #246]	@ 0xf6
 8021324:	2400      	movs	r4, #0
 8021326:	9400      	str	r4, [sp, #0]
 8021328:	f005 f9f8 	bl	802671c <FsmcH_FillRectangle>
					displayType->KmTot.KMTOTBox.position_y,
					displayType->KmTot.KMTOTBox.width,
					displayType->KmTot.KMTOTBox.height,
					TFT_BLACK);
			FsmcH_DrawInteger(displayType->KmTot.KMTOT_Text.position_x,
 802132c:	687b      	ldr	r3, [r7, #4]
 802132e:	f8b3 00f8 	ldrh.w	r0, [r3, #248]	@ 0xf8
 8021332:	687b      	ldr	r3, [r7, #4]
 8021334:	f8b3 10fa 	ldrh.w	r1, [r3, #250]	@ 0xfa
 8021338:	4b28      	ldr	r3, [pc, #160]	@ (80213dc <DigitalCluster_DisplayKMTotalDcy+0x234>)
 802133a:	681a      	ldr	r2, [r3, #0]
 802133c:	2300      	movs	r3, #0
 802133e:	9300      	str	r3, [sp, #0]
 8021340:	f24d 53b1 	movw	r3, #54705	@ 0xd5b1
 8021344:	f005 f95c 	bl	8026600 <FsmcH_DrawInteger>
					displayType->KmTot.KMTOT_Text.position_y,
					DataRecorder_KilometerTotal,
					TFT_TAN,
					TFT_BLACK);
			FsmcH_DrawString8(displayType->KmTot.KMTOTStat_Text.position_x - 34,
 8021348:	687b      	ldr	r3, [r7, #4]
 802134a:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 802134e:	3b22      	subs	r3, #34	@ 0x22
 8021350:	b298      	uxth	r0, r3
 8021352:	687b      	ldr	r3, [r7, #4]
 8021354:	f8b3 1102 	ldrh.w	r1, [r3, #258]	@ 0x102
 8021358:	687b      	ldr	r3, [r7, #4]
 802135a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 802135e:	2300      	movs	r3, #0
 8021360:	9300      	str	r3, [sp, #0]
 8021362:	f24d 53b1 	movw	r3, #54705	@ 0xd5b1
 8021366:	f005 f8fb 	bl	8026560 <FsmcH_DrawString8>
 802136a:	e068      	b.n	802143e <DigitalCluster_DisplayKMTotalDcy+0x296>
					displayType->KmTot.KMTOTStat_Text.position_y,
					displayType->KmTot.KMTOTStat_Text.text,
					TFT_TAN,
					TFT_BLACK);
		}
		else if(100000 > DataRecorder_KilometerTotal)
 802136c:	4b1b      	ldr	r3, [pc, #108]	@ (80213dc <DigitalCluster_DisplayKMTotalDcy+0x234>)
 802136e:	681b      	ldr	r3, [r3, #0]
 8021370:	4a1b      	ldr	r2, [pc, #108]	@ (80213e0 <DigitalCluster_DisplayKMTotalDcy+0x238>)
 8021372:	4293      	cmp	r3, r2
 8021374:	d836      	bhi.n	80213e4 <DigitalCluster_DisplayKMTotalDcy+0x23c>
		{
			FsmcH_FillRectangle(displayType->KmTot.KMTOTBox.position_x,
 8021376:	687b      	ldr	r3, [r7, #4]
 8021378:	f8b3 00f0 	ldrh.w	r0, [r3, #240]	@ 0xf0
 802137c:	687b      	ldr	r3, [r7, #4]
 802137e:	f8b3 10f2 	ldrh.w	r1, [r3, #242]	@ 0xf2
 8021382:	687b      	ldr	r3, [r7, #4]
 8021384:	f8b3 20f4 	ldrh.w	r2, [r3, #244]	@ 0xf4
 8021388:	687b      	ldr	r3, [r7, #4]
 802138a:	f8b3 30f6 	ldrh.w	r3, [r3, #246]	@ 0xf6
 802138e:	2400      	movs	r4, #0
 8021390:	9400      	str	r4, [sp, #0]
 8021392:	f005 f9c3 	bl	802671c <FsmcH_FillRectangle>
					displayType->KmTot.KMTOTBox.position_y,
					displayType->KmTot.KMTOTBox.width,
					displayType->KmTot.KMTOTBox.height,
					TFT_BLACK);
			FsmcH_DrawInteger(displayType->KmTot.KMTOT_Text.position_x,
 8021396:	687b      	ldr	r3, [r7, #4]
 8021398:	f8b3 00f8 	ldrh.w	r0, [r3, #248]	@ 0xf8
 802139c:	687b      	ldr	r3, [r7, #4]
 802139e:	f8b3 10fa 	ldrh.w	r1, [r3, #250]	@ 0xfa
 80213a2:	4b0e      	ldr	r3, [pc, #56]	@ (80213dc <DigitalCluster_DisplayKMTotalDcy+0x234>)
 80213a4:	681a      	ldr	r2, [r3, #0]
 80213a6:	2300      	movs	r3, #0
 80213a8:	9300      	str	r3, [sp, #0]
 80213aa:	f24d 53b1 	movw	r3, #54705	@ 0xd5b1
 80213ae:	f005 f927 	bl	8026600 <FsmcH_DrawInteger>
					displayType->KmTot.KMTOT_Text.position_y,
					DataRecorder_KilometerTotal,
					TFT_TAN,
					TFT_BLACK);
			FsmcH_DrawString8(displayType->KmTot.KMTOTStat_Text.position_x - 17,
 80213b2:	687b      	ldr	r3, [r7, #4]
 80213b4:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 80213b8:	3b11      	subs	r3, #17
 80213ba:	b298      	uxth	r0, r3
 80213bc:	687b      	ldr	r3, [r7, #4]
 80213be:	f8b3 1102 	ldrh.w	r1, [r3, #258]	@ 0x102
 80213c2:	687b      	ldr	r3, [r7, #4]
 80213c4:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 80213c8:	2300      	movs	r3, #0
 80213ca:	9300      	str	r3, [sp, #0]
 80213cc:	f24d 53b1 	movw	r3, #54705	@ 0xd5b1
 80213d0:	f005 f8c6 	bl	8026560 <FsmcH_DrawString8>
 80213d4:	e033      	b.n	802143e <DigitalCluster_DisplayKMTotalDcy+0x296>
 80213d6:	bf00      	nop
 80213d8:	10000790 	.word	0x10000790
 80213dc:	100000b0 	.word	0x100000b0
 80213e0:	0001869f 	.word	0x0001869f
					TFT_TAN,
					TFT_BLACK);
		}
		else
		{
			FsmcH_FillRectangle(displayType->KmTot.KMTOTBox.position_x,
 80213e4:	687b      	ldr	r3, [r7, #4]
 80213e6:	f8b3 00f0 	ldrh.w	r0, [r3, #240]	@ 0xf0
 80213ea:	687b      	ldr	r3, [r7, #4]
 80213ec:	f8b3 10f2 	ldrh.w	r1, [r3, #242]	@ 0xf2
 80213f0:	687b      	ldr	r3, [r7, #4]
 80213f2:	f8b3 20f4 	ldrh.w	r2, [r3, #244]	@ 0xf4
 80213f6:	687b      	ldr	r3, [r7, #4]
 80213f8:	f8b3 30f6 	ldrh.w	r3, [r3, #246]	@ 0xf6
 80213fc:	2400      	movs	r4, #0
 80213fe:	9400      	str	r4, [sp, #0]
 8021400:	f005 f98c 	bl	802671c <FsmcH_FillRectangle>
					displayType->KmTot.KMTOTBox.position_y,
					displayType->KmTot.KMTOTBox.width,
					displayType->KmTot.KMTOTBox.height,
					TFT_BLACK);
			FsmcH_DrawInteger(displayType->KmTot.KMTOT_Text.position_x,
 8021404:	687b      	ldr	r3, [r7, #4]
 8021406:	f8b3 00f8 	ldrh.w	r0, [r3, #248]	@ 0xf8
 802140a:	687b      	ldr	r3, [r7, #4]
 802140c:	f8b3 10fa 	ldrh.w	r1, [r3, #250]	@ 0xfa
 8021410:	4b6c      	ldr	r3, [pc, #432]	@ (80215c4 <DigitalCluster_DisplayKMTotalDcy+0x41c>)
 8021412:	681a      	ldr	r2, [r3, #0]
 8021414:	2300      	movs	r3, #0
 8021416:	9300      	str	r3, [sp, #0]
 8021418:	f24d 53b1 	movw	r3, #54705	@ 0xd5b1
 802141c:	f005 f8f0 	bl	8026600 <FsmcH_DrawInteger>
					displayType->KmTot.KMTOT_Text.position_y,
					DataRecorder_KilometerTotal,
					TFT_TAN,
					TFT_BLACK);
			FsmcH_DrawString8(displayType->KmTot.KMTOTStat_Text.position_x,
 8021420:	687b      	ldr	r3, [r7, #4]
 8021422:	f8b3 0100 	ldrh.w	r0, [r3, #256]	@ 0x100
 8021426:	687b      	ldr	r3, [r7, #4]
 8021428:	f8b3 1102 	ldrh.w	r1, [r3, #258]	@ 0x102
 802142c:	687b      	ldr	r3, [r7, #4]
 802142e:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8021432:	2300      	movs	r3, #0
 8021434:	9300      	str	r3, [sp, #0]
 8021436:	f24d 53b1 	movw	r3, #54705	@ 0xd5b1
 802143a:	f005 f891 	bl	8026560 <FsmcH_DrawString8>
	}
	else
	{
		/* Do nothing. */
	}
	if(pKmDcy != DataRecorder_KilometerPerDcy)
 802143e:	4b62      	ldr	r3, [pc, #392]	@ (80215c8 <DigitalCluster_DisplayKMTotalDcy+0x420>)
 8021440:	681a      	ldr	r2, [r3, #0]
 8021442:	4b62      	ldr	r3, [pc, #392]	@ (80215cc <DigitalCluster_DisplayKMTotalDcy+0x424>)
 8021444:	681b      	ldr	r3, [r3, #0]
 8021446:	429a      	cmp	r2, r3
 8021448:	f000 80b8 	beq.w	80215bc <DigitalCluster_DisplayKMTotalDcy+0x414>
	{
		pKmDcy = DataRecorder_KilometerPerDcy;
 802144c:	4b5f      	ldr	r3, [pc, #380]	@ (80215cc <DigitalCluster_DisplayKMTotalDcy+0x424>)
 802144e:	681b      	ldr	r3, [r3, #0]
 8021450:	4a5d      	ldr	r2, [pc, #372]	@ (80215c8 <DigitalCluster_DisplayKMTotalDcy+0x420>)
 8021452:	6013      	str	r3, [r2, #0]
		if(10 > DataRecorder_KilometerPerDcy)
 8021454:	4b5d      	ldr	r3, [pc, #372]	@ (80215cc <DigitalCluster_DisplayKMTotalDcy+0x424>)
 8021456:	681b      	ldr	r3, [r3, #0]
 8021458:	2b09      	cmp	r3, #9
 802145a:	d829      	bhi.n	80214b0 <DigitalCluster_DisplayKMTotalDcy+0x308>
		{
			FsmcH_FillRectangle(displayType->KmDcy.KMDCYBox.position_x,
 802145c:	687b      	ldr	r3, [r7, #4]
 802145e:	f8b3 0108 	ldrh.w	r0, [r3, #264]	@ 0x108
 8021462:	687b      	ldr	r3, [r7, #4]
 8021464:	f8b3 110a 	ldrh.w	r1, [r3, #266]	@ 0x10a
 8021468:	687b      	ldr	r3, [r7, #4]
 802146a:	f8b3 210c 	ldrh.w	r2, [r3, #268]	@ 0x10c
 802146e:	687b      	ldr	r3, [r7, #4]
 8021470:	f8b3 310e 	ldrh.w	r3, [r3, #270]	@ 0x10e
 8021474:	2400      	movs	r4, #0
 8021476:	9400      	str	r4, [sp, #0]
 8021478:	f005 f950 	bl	802671c <FsmcH_FillRectangle>
					displayType->KmDcy.KMDCYBox.position_y,
					displayType->KmDcy.KMDCYBox.width,
					displayType->KmDcy.KMDCYBox.height,
					TFT_BLACK);
			FsmcH_DrawInteger(displayType->KmDcy.KMDCY_Text.position_x,
 802147c:	687b      	ldr	r3, [r7, #4]
 802147e:	f8b3 0110 	ldrh.w	r0, [r3, #272]	@ 0x110
 8021482:	687b      	ldr	r3, [r7, #4]
 8021484:	f8b3 1112 	ldrh.w	r1, [r3, #274]	@ 0x112
 8021488:	4b50      	ldr	r3, [pc, #320]	@ (80215cc <DigitalCluster_DisplayKMTotalDcy+0x424>)
 802148a:	681a      	ldr	r2, [r3, #0]
 802148c:	2300      	movs	r3, #0
 802148e:	9300      	str	r3, [sp, #0]
 8021490:	f24d 53b1 	movw	r3, #54705	@ 0xd5b1
 8021494:	f005 f8b4 	bl	8026600 <FsmcH_DrawInteger>
					displayType->KmDcy.KMDCY_Text.position_y,
					DataRecorder_KilometerPerDcy,
					TFT_TAN,
					TFT_BLACK);
			FsmcH_DrawString8(203,
 8021498:	687b      	ldr	r3, [r7, #4]
 802149a:	f8b3 1112 	ldrh.w	r1, [r3, #274]	@ 0x112
 802149e:	2300      	movs	r3, #0
 80214a0:	9300      	str	r3, [sp, #0]
 80214a2:	f24d 53b1 	movw	r3, #54705	@ 0xd5b1
 80214a6:	4a4a      	ldr	r2, [pc, #296]	@ (80215d0 <DigitalCluster_DisplayKMTotalDcy+0x428>)
 80214a8:	20cb      	movs	r0, #203	@ 0xcb
 80214aa:	f005 f859 	bl	8026560 <FsmcH_DrawString8>
	}
	else
	{
		/* Do nothing. */
	}
}
 80214ae:	e085      	b.n	80215bc <DigitalCluster_DisplayKMTotalDcy+0x414>
		else if(100 > DataRecorder_KilometerPerDcy)
 80214b0:	4b46      	ldr	r3, [pc, #280]	@ (80215cc <DigitalCluster_DisplayKMTotalDcy+0x424>)
 80214b2:	681b      	ldr	r3, [r3, #0]
 80214b4:	2b63      	cmp	r3, #99	@ 0x63
 80214b6:	d829      	bhi.n	802150c <DigitalCluster_DisplayKMTotalDcy+0x364>
			FsmcH_FillRectangle(displayType->KmDcy.KMDCYBox.position_x,
 80214b8:	687b      	ldr	r3, [r7, #4]
 80214ba:	f8b3 0108 	ldrh.w	r0, [r3, #264]	@ 0x108
 80214be:	687b      	ldr	r3, [r7, #4]
 80214c0:	f8b3 110a 	ldrh.w	r1, [r3, #266]	@ 0x10a
 80214c4:	687b      	ldr	r3, [r7, #4]
 80214c6:	f8b3 210c 	ldrh.w	r2, [r3, #268]	@ 0x10c
 80214ca:	687b      	ldr	r3, [r7, #4]
 80214cc:	f8b3 310e 	ldrh.w	r3, [r3, #270]	@ 0x10e
 80214d0:	2400      	movs	r4, #0
 80214d2:	9400      	str	r4, [sp, #0]
 80214d4:	f005 f922 	bl	802671c <FsmcH_FillRectangle>
			FsmcH_DrawInteger(displayType->KmDcy.KMDCY_Text.position_x,
 80214d8:	687b      	ldr	r3, [r7, #4]
 80214da:	f8b3 0110 	ldrh.w	r0, [r3, #272]	@ 0x110
 80214de:	687b      	ldr	r3, [r7, #4]
 80214e0:	f8b3 1112 	ldrh.w	r1, [r3, #274]	@ 0x112
 80214e4:	4b39      	ldr	r3, [pc, #228]	@ (80215cc <DigitalCluster_DisplayKMTotalDcy+0x424>)
 80214e6:	681a      	ldr	r2, [r3, #0]
 80214e8:	2300      	movs	r3, #0
 80214ea:	9300      	str	r3, [sp, #0]
 80214ec:	f24d 53b1 	movw	r3, #54705	@ 0xd5b1
 80214f0:	f005 f886 	bl	8026600 <FsmcH_DrawInteger>
			FsmcH_DrawString8(220,
 80214f4:	687b      	ldr	r3, [r7, #4]
 80214f6:	f8b3 1112 	ldrh.w	r1, [r3, #274]	@ 0x112
 80214fa:	2300      	movs	r3, #0
 80214fc:	9300      	str	r3, [sp, #0]
 80214fe:	f24d 53b1 	movw	r3, #54705	@ 0xd5b1
 8021502:	4a33      	ldr	r2, [pc, #204]	@ (80215d0 <DigitalCluster_DisplayKMTotalDcy+0x428>)
 8021504:	20dc      	movs	r0, #220	@ 0xdc
 8021506:	f005 f82b 	bl	8026560 <FsmcH_DrawString8>
}
 802150a:	e057      	b.n	80215bc <DigitalCluster_DisplayKMTotalDcy+0x414>
		else if(1000 > DataRecorder_KilometerPerDcy)
 802150c:	4b2f      	ldr	r3, [pc, #188]	@ (80215cc <DigitalCluster_DisplayKMTotalDcy+0x424>)
 802150e:	681b      	ldr	r3, [r3, #0]
 8021510:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8021514:	d229      	bcs.n	802156a <DigitalCluster_DisplayKMTotalDcy+0x3c2>
			FsmcH_FillRectangle(displayType->KmDcy.KMDCYBox.position_x,
 8021516:	687b      	ldr	r3, [r7, #4]
 8021518:	f8b3 0108 	ldrh.w	r0, [r3, #264]	@ 0x108
 802151c:	687b      	ldr	r3, [r7, #4]
 802151e:	f8b3 110a 	ldrh.w	r1, [r3, #266]	@ 0x10a
 8021522:	687b      	ldr	r3, [r7, #4]
 8021524:	f8b3 210c 	ldrh.w	r2, [r3, #268]	@ 0x10c
 8021528:	687b      	ldr	r3, [r7, #4]
 802152a:	f8b3 310e 	ldrh.w	r3, [r3, #270]	@ 0x10e
 802152e:	2400      	movs	r4, #0
 8021530:	9400      	str	r4, [sp, #0]
 8021532:	f005 f8f3 	bl	802671c <FsmcH_FillRectangle>
			FsmcH_DrawInteger(displayType->KmDcy.KMDCY_Text.position_x,
 8021536:	687b      	ldr	r3, [r7, #4]
 8021538:	f8b3 0110 	ldrh.w	r0, [r3, #272]	@ 0x110
 802153c:	687b      	ldr	r3, [r7, #4]
 802153e:	f8b3 1112 	ldrh.w	r1, [r3, #274]	@ 0x112
 8021542:	4b22      	ldr	r3, [pc, #136]	@ (80215cc <DigitalCluster_DisplayKMTotalDcy+0x424>)
 8021544:	681a      	ldr	r2, [r3, #0]
 8021546:	2300      	movs	r3, #0
 8021548:	9300      	str	r3, [sp, #0]
 802154a:	f24d 53b1 	movw	r3, #54705	@ 0xd5b1
 802154e:	f005 f857 	bl	8026600 <FsmcH_DrawInteger>
			FsmcH_DrawString8(237,
 8021552:	687b      	ldr	r3, [r7, #4]
 8021554:	f8b3 1112 	ldrh.w	r1, [r3, #274]	@ 0x112
 8021558:	2300      	movs	r3, #0
 802155a:	9300      	str	r3, [sp, #0]
 802155c:	f24d 53b1 	movw	r3, #54705	@ 0xd5b1
 8021560:	4a1b      	ldr	r2, [pc, #108]	@ (80215d0 <DigitalCluster_DisplayKMTotalDcy+0x428>)
 8021562:	20ed      	movs	r0, #237	@ 0xed
 8021564:	f004 fffc 	bl	8026560 <FsmcH_DrawString8>
}
 8021568:	e028      	b.n	80215bc <DigitalCluster_DisplayKMTotalDcy+0x414>
			FsmcH_FillRectangle(displayType->KmDcy.KMDCYBox.position_x,
 802156a:	687b      	ldr	r3, [r7, #4]
 802156c:	f8b3 0108 	ldrh.w	r0, [r3, #264]	@ 0x108
 8021570:	687b      	ldr	r3, [r7, #4]
 8021572:	f8b3 110a 	ldrh.w	r1, [r3, #266]	@ 0x10a
 8021576:	687b      	ldr	r3, [r7, #4]
 8021578:	f8b3 210c 	ldrh.w	r2, [r3, #268]	@ 0x10c
 802157c:	687b      	ldr	r3, [r7, #4]
 802157e:	f8b3 310e 	ldrh.w	r3, [r3, #270]	@ 0x10e
 8021582:	2400      	movs	r4, #0
 8021584:	9400      	str	r4, [sp, #0]
 8021586:	f005 f8c9 	bl	802671c <FsmcH_FillRectangle>
			FsmcH_DrawInteger(displayType->KmDcy.KMDCY_Text.position_x,
 802158a:	687b      	ldr	r3, [r7, #4]
 802158c:	f8b3 0110 	ldrh.w	r0, [r3, #272]	@ 0x110
 8021590:	687b      	ldr	r3, [r7, #4]
 8021592:	f8b3 1112 	ldrh.w	r1, [r3, #274]	@ 0x112
 8021596:	4b0d      	ldr	r3, [pc, #52]	@ (80215cc <DigitalCluster_DisplayKMTotalDcy+0x424>)
 8021598:	681a      	ldr	r2, [r3, #0]
 802159a:	2300      	movs	r3, #0
 802159c:	9300      	str	r3, [sp, #0]
 802159e:	f24d 53b1 	movw	r3, #54705	@ 0xd5b1
 80215a2:	f005 f82d 	bl	8026600 <FsmcH_DrawInteger>
			FsmcH_DrawString8(254,
 80215a6:	687b      	ldr	r3, [r7, #4]
 80215a8:	f8b3 1112 	ldrh.w	r1, [r3, #274]	@ 0x112
 80215ac:	2300      	movs	r3, #0
 80215ae:	9300      	str	r3, [sp, #0]
 80215b0:	f24d 53b1 	movw	r3, #54705	@ 0xd5b1
 80215b4:	4a06      	ldr	r2, [pc, #24]	@ (80215d0 <DigitalCluster_DisplayKMTotalDcy+0x428>)
 80215b6:	20fe      	movs	r0, #254	@ 0xfe
 80215b8:	f004 ffd2 	bl	8026560 <FsmcH_DrawString8>
}
 80215bc:	bf00      	nop
 80215be:	370c      	adds	r7, #12
 80215c0:	46bd      	mov	sp, r7
 80215c2:	bd90      	pop	{r4, r7, pc}
 80215c4:	100000b0 	.word	0x100000b0
 80215c8:	10000794 	.word	0x10000794
 80215cc:	100000b4 	.word	0x100000b4
 80215d0:	08038028 	.word	0x08038028

080215d4 <DigitalCluster_CalculateTime>:
void DigitalCluster_CalculateTime(DigitalCluster_DisplayMode_t *displayType)
{
 80215d4:	b590      	push	{r4, r7, lr}
 80215d6:	b085      	sub	sp, #20
 80215d8:	af02      	add	r7, sp, #8
 80215da:	6078      	str	r0, [r7, #4]
	HAL_RTC_GetTime(&hrtc, &getCurrentTime, RTC_FORMAT_BIN);
 80215dc:	2200      	movs	r2, #0
 80215de:	495d      	ldr	r1, [pc, #372]	@ (8021754 <DigitalCluster_CalculateTime+0x180>)
 80215e0:	485d      	ldr	r0, [pc, #372]	@ (8021758 <DigitalCluster_CalculateTime+0x184>)
 80215e2:	f010 fdb3 	bl	803214c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &getCurrentDate, RTC_FORMAT_BIN);
 80215e6:	2200      	movs	r2, #0
 80215e8:	495c      	ldr	r1, [pc, #368]	@ (802175c <DigitalCluster_CalculateTime+0x188>)
 80215ea:	485b      	ldr	r0, [pc, #364]	@ (8021758 <DigitalCluster_CalculateTime+0x184>)
 80215ec:	f010 ff26 	bl	803243c <HAL_RTC_GetDate>
	DigitalCluster_CalculatedHour = getCurrentTime.Hours;
 80215f0:	4b58      	ldr	r3, [pc, #352]	@ (8021754 <DigitalCluster_CalculateTime+0x180>)
 80215f2:	781a      	ldrb	r2, [r3, #0]
 80215f4:	4b5a      	ldr	r3, [pc, #360]	@ (8021760 <DigitalCluster_CalculateTime+0x18c>)
 80215f6:	701a      	strb	r2, [r3, #0]
	DigitalCluster_CalculatedMinutes = getCurrentTime.Minutes;
 80215f8:	4b56      	ldr	r3, [pc, #344]	@ (8021754 <DigitalCluster_CalculateTime+0x180>)
 80215fa:	785a      	ldrb	r2, [r3, #1]
 80215fc:	4b59      	ldr	r3, [pc, #356]	@ (8021764 <DigitalCluster_CalculateTime+0x190>)
 80215fe:	701a      	strb	r2, [r3, #0]
	DigitalCluster_CalculatedSeconds = getCurrentTime.Seconds;
 8021600:	4b54      	ldr	r3, [pc, #336]	@ (8021754 <DigitalCluster_CalculateTime+0x180>)
 8021602:	789a      	ldrb	r2, [r3, #2]
 8021604:	4b58      	ldr	r3, [pc, #352]	@ (8021768 <DigitalCluster_CalculateTime+0x194>)
 8021606:	701a      	strb	r2, [r3, #0]
	DigitalCluster_CalculatedDay = getCurrentDate.Date;
 8021608:	4b54      	ldr	r3, [pc, #336]	@ (802175c <DigitalCluster_CalculateTime+0x188>)
 802160a:	789a      	ldrb	r2, [r3, #2]
 802160c:	4b57      	ldr	r3, [pc, #348]	@ (802176c <DigitalCluster_CalculateTime+0x198>)
 802160e:	701a      	strb	r2, [r3, #0]
	DigitalCluster_CalculatedMonth = getCurrentDate.Month;
 8021610:	4b52      	ldr	r3, [pc, #328]	@ (802175c <DigitalCluster_CalculateTime+0x188>)
 8021612:	785a      	ldrb	r2, [r3, #1]
 8021614:	4b56      	ldr	r3, [pc, #344]	@ (8021770 <DigitalCluster_CalculateTime+0x19c>)
 8021616:	701a      	strb	r2, [r3, #0]
	DigitalCluster_CalculatedYear = getCurrentDate.Year;
 8021618:	4b50      	ldr	r3, [pc, #320]	@ (802175c <DigitalCluster_CalculateTime+0x188>)
 802161a:	78da      	ldrb	r2, [r3, #3]
 802161c:	4b55      	ldr	r3, [pc, #340]	@ (8021774 <DigitalCluster_CalculateTime+0x1a0>)
 802161e:	701a      	strb	r2, [r3, #0]
	DigitalCluster_CalculatedWeekDay = getCurrentDate.WeekDay;
 8021620:	4b4e      	ldr	r3, [pc, #312]	@ (802175c <DigitalCluster_CalculateTime+0x188>)
 8021622:	781a      	ldrb	r2, [r3, #0]
 8021624:	4b54      	ldr	r3, [pc, #336]	@ (8021778 <DigitalCluster_CalculateTime+0x1a4>)
 8021626:	701a      	strb	r2, [r3, #0]
	if(hasTimeHChanged != DigitalCluster_CalculatedHour ||
 8021628:	4b54      	ldr	r3, [pc, #336]	@ (802177c <DigitalCluster_CalculateTime+0x1a8>)
 802162a:	781a      	ldrb	r2, [r3, #0]
 802162c:	4b4c      	ldr	r3, [pc, #304]	@ (8021760 <DigitalCluster_CalculateTime+0x18c>)
 802162e:	781b      	ldrb	r3, [r3, #0]
 8021630:	429a      	cmp	r2, r3
 8021632:	d106      	bne.n	8021642 <DigitalCluster_CalculateTime+0x6e>
			hasTimeMChanged != DigitalCluster_CalculatedMinutes)
 8021634:	4b52      	ldr	r3, [pc, #328]	@ (8021780 <DigitalCluster_CalculateTime+0x1ac>)
 8021636:	781a      	ldrb	r2, [r3, #0]
 8021638:	4b4a      	ldr	r3, [pc, #296]	@ (8021764 <DigitalCluster_CalculateTime+0x190>)
 802163a:	781b      	ldrb	r3, [r3, #0]
	if(hasTimeHChanged != DigitalCluster_CalculatedHour ||
 802163c:	429a      	cmp	r2, r3
 802163e:	f000 8085 	beq.w	802174c <DigitalCluster_CalculateTime+0x178>
	{
		hasTimeHChanged = DigitalCluster_CalculatedHour;
 8021642:	4b47      	ldr	r3, [pc, #284]	@ (8021760 <DigitalCluster_CalculateTime+0x18c>)
 8021644:	781a      	ldrb	r2, [r3, #0]
 8021646:	4b4d      	ldr	r3, [pc, #308]	@ (802177c <DigitalCluster_CalculateTime+0x1a8>)
 8021648:	701a      	strb	r2, [r3, #0]
		hasTimeMChanged = DigitalCluster_CalculatedMinutes;
 802164a:	4b46      	ldr	r3, [pc, #280]	@ (8021764 <DigitalCluster_CalculateTime+0x190>)
 802164c:	781a      	ldrb	r2, [r3, #0]
 802164e:	4b4c      	ldr	r3, [pc, #304]	@ (8021780 <DigitalCluster_CalculateTime+0x1ac>)
 8021650:	701a      	strb	r2, [r3, #0]

		if(10 > DigitalCluster_CalculatedHour)
 8021652:	4b43      	ldr	r3, [pc, #268]	@ (8021760 <DigitalCluster_CalculateTime+0x18c>)
 8021654:	781b      	ldrb	r3, [r3, #0]
 8021656:	2b09      	cmp	r3, #9
 8021658:	d827      	bhi.n	80216aa <DigitalCluster_CalculateTime+0xd6>
		{
			FsmcH_FillRectangle(displayType->Time.TimeBox.position_x,
 802165a:	687b      	ldr	r3, [r7, #4]
 802165c:	8818      	ldrh	r0, [r3, #0]
 802165e:	687b      	ldr	r3, [r7, #4]
 8021660:	8859      	ldrh	r1, [r3, #2]
 8021662:	687b      	ldr	r3, [r7, #4]
 8021664:	889a      	ldrh	r2, [r3, #4]
 8021666:	687b      	ldr	r3, [r7, #4]
 8021668:	88db      	ldrh	r3, [r3, #6]
 802166a:	2400      	movs	r4, #0
 802166c:	9400      	str	r4, [sp, #0]
 802166e:	f005 f855 	bl	802671c <FsmcH_FillRectangle>
					displayType->Time.TimeBox.position_y,
					displayType->Time.TimeBox.width,
					displayType->Time.TimeBox.height,
					TFT_BLACK);
			FsmcH_DrawInteger(displayType->Time.T_HourText.position_x - 17,
 8021672:	687b      	ldr	r3, [r7, #4]
 8021674:	891b      	ldrh	r3, [r3, #8]
 8021676:	3b11      	subs	r3, #17
 8021678:	b298      	uxth	r0, r3
 802167a:	687b      	ldr	r3, [r7, #4]
 802167c:	8959      	ldrh	r1, [r3, #10]
 802167e:	4b38      	ldr	r3, [pc, #224]	@ (8021760 <DigitalCluster_CalculateTime+0x18c>)
 8021680:	781b      	ldrb	r3, [r3, #0]
 8021682:	461a      	mov	r2, r3
 8021684:	2300      	movs	r3, #0
 8021686:	9300      	str	r3, [sp, #0]
 8021688:	f24d 53b1 	movw	r3, #54705	@ 0xd5b1
 802168c:	f004 ffb8 	bl	8026600 <FsmcH_DrawInteger>
					displayType->Time.T_HourText.position_y,
					DigitalCluster_CalculatedHour,
					TFT_TAN,
					TFT_BLACK);
			FsmcH_DrawString(displayType->Time.T_DotDotText.position_x,
 8021690:	687b      	ldr	r3, [r7, #4]
 8021692:	8a18      	ldrh	r0, [r3, #16]
 8021694:	687b      	ldr	r3, [r7, #4]
 8021696:	8a59      	ldrh	r1, [r3, #18]
 8021698:	687b      	ldr	r3, [r7, #4]
 802169a:	695a      	ldr	r2, [r3, #20]
 802169c:	2300      	movs	r3, #0
 802169e:	9300      	str	r3, [sp, #0]
 80216a0:	f24d 53b1 	movw	r3, #54705	@ 0xd5b1
 80216a4:	f004 ff86 	bl	80265b4 <FsmcH_DrawString>
 80216a8:	e024      	b.n	80216f4 <DigitalCluster_CalculateTime+0x120>
					TFT_TAN,
					TFT_BLACK);
		}
		else
		{
			FsmcH_FillRectangle(displayType->Time.TimeBox.position_x,
 80216aa:	687b      	ldr	r3, [r7, #4]
 80216ac:	8818      	ldrh	r0, [r3, #0]
 80216ae:	687b      	ldr	r3, [r7, #4]
 80216b0:	8859      	ldrh	r1, [r3, #2]
 80216b2:	687b      	ldr	r3, [r7, #4]
 80216b4:	889a      	ldrh	r2, [r3, #4]
 80216b6:	687b      	ldr	r3, [r7, #4]
 80216b8:	88db      	ldrh	r3, [r3, #6]
 80216ba:	2400      	movs	r4, #0
 80216bc:	9400      	str	r4, [sp, #0]
 80216be:	f005 f82d 	bl	802671c <FsmcH_FillRectangle>
					displayType->Time.TimeBox.position_y,
					displayType->Time.TimeBox.width,
					displayType->Time.TimeBox.height,
					TFT_BLACK);
			FsmcH_DrawInteger(displayType->Time.T_HourText.position_x,
 80216c2:	687b      	ldr	r3, [r7, #4]
 80216c4:	8918      	ldrh	r0, [r3, #8]
 80216c6:	687b      	ldr	r3, [r7, #4]
 80216c8:	8959      	ldrh	r1, [r3, #10]
 80216ca:	4b25      	ldr	r3, [pc, #148]	@ (8021760 <DigitalCluster_CalculateTime+0x18c>)
 80216cc:	781b      	ldrb	r3, [r3, #0]
 80216ce:	461a      	mov	r2, r3
 80216d0:	2300      	movs	r3, #0
 80216d2:	9300      	str	r3, [sp, #0]
 80216d4:	f24d 53b1 	movw	r3, #54705	@ 0xd5b1
 80216d8:	f004 ff92 	bl	8026600 <FsmcH_DrawInteger>
					displayType->Time.T_HourText.position_y,
					DigitalCluster_CalculatedHour,
					TFT_TAN,
					TFT_BLACK);
			FsmcH_DrawString(displayType->Time.T_DotDotText.position_x,
 80216dc:	687b      	ldr	r3, [r7, #4]
 80216de:	8a18      	ldrh	r0, [r3, #16]
 80216e0:	687b      	ldr	r3, [r7, #4]
 80216e2:	8a59      	ldrh	r1, [r3, #18]
 80216e4:	687b      	ldr	r3, [r7, #4]
 80216e6:	695a      	ldr	r2, [r3, #20]
 80216e8:	2300      	movs	r3, #0
 80216ea:	9300      	str	r3, [sp, #0]
 80216ec:	f24d 53b1 	movw	r3, #54705	@ 0xd5b1
 80216f0:	f004 ff60 	bl	80265b4 <FsmcH_DrawString>
					displayType->Time.T_DotDotText.position_y,
					displayType->Time.T_DotDotText.text,
					TFT_TAN,
					TFT_BLACK);
		}
		if(10 > DigitalCluster_CalculatedMinutes)
 80216f4:	4b1b      	ldr	r3, [pc, #108]	@ (8021764 <DigitalCluster_CalculateTime+0x190>)
 80216f6:	781b      	ldrb	r3, [r3, #0]
 80216f8:	2b09      	cmp	r3, #9
 80216fa:	d81a      	bhi.n	8021732 <DigitalCluster_CalculateTime+0x15e>
		{
			FsmcH_DrawInteger(displayType->Time.T_MinuteText.position_x,
 80216fc:	687b      	ldr	r3, [r7, #4]
 80216fe:	8b18      	ldrh	r0, [r3, #24]
 8021700:	687b      	ldr	r3, [r7, #4]
 8021702:	8b59      	ldrh	r1, [r3, #26]
 8021704:	2300      	movs	r3, #0
 8021706:	9300      	str	r3, [sp, #0]
 8021708:	f24d 53b1 	movw	r3, #54705	@ 0xd5b1
 802170c:	2200      	movs	r2, #0
 802170e:	f004 ff77 	bl	8026600 <FsmcH_DrawInteger>
					displayType->Time.T_MinuteText.position_y,
					0,
					TFT_TAN,
					TFT_BLACK);
			FsmcH_DrawInteger(displayType->Time.T_MinuteText.position_x + 17,
 8021712:	687b      	ldr	r3, [r7, #4]
 8021714:	8b1b      	ldrh	r3, [r3, #24]
 8021716:	3311      	adds	r3, #17
 8021718:	b298      	uxth	r0, r3
 802171a:	687b      	ldr	r3, [r7, #4]
 802171c:	8b59      	ldrh	r1, [r3, #26]
 802171e:	4b11      	ldr	r3, [pc, #68]	@ (8021764 <DigitalCluster_CalculateTime+0x190>)
 8021720:	781b      	ldrb	r3, [r3, #0]
 8021722:	461a      	mov	r2, r3
 8021724:	2300      	movs	r3, #0
 8021726:	9300      	str	r3, [sp, #0]
 8021728:	f24d 53b1 	movw	r3, #54705	@ 0xd5b1
 802172c:	f004 ff68 	bl	8026600 <FsmcH_DrawInteger>
	}
	else
	{
		/* Do nothing. */
	}
}
 8021730:	e00c      	b.n	802174c <DigitalCluster_CalculateTime+0x178>
			FsmcH_DrawInteger(displayType->Time.T_MinuteText.position_x,
 8021732:	687b      	ldr	r3, [r7, #4]
 8021734:	8b18      	ldrh	r0, [r3, #24]
 8021736:	687b      	ldr	r3, [r7, #4]
 8021738:	8b59      	ldrh	r1, [r3, #26]
 802173a:	4b0a      	ldr	r3, [pc, #40]	@ (8021764 <DigitalCluster_CalculateTime+0x190>)
 802173c:	781b      	ldrb	r3, [r3, #0]
 802173e:	461a      	mov	r2, r3
 8021740:	2300      	movs	r3, #0
 8021742:	9300      	str	r3, [sp, #0]
 8021744:	f24d 53b1 	movw	r3, #54705	@ 0xd5b1
 8021748:	f004 ff5a 	bl	8026600 <FsmcH_DrawInteger>
}
 802174c:	bf00      	nop
 802174e:	370c      	adds	r7, #12
 8021750:	46bd      	mov	sp, r7
 8021752:	bd90      	pop	{r4, r7, pc}
 8021754:	1000073c 	.word	0x1000073c
 8021758:	200005c0 	.word	0x200005c0
 802175c:	10000750 	.word	0x10000750
 8021760:	10000710 	.word	0x10000710
 8021764:	10000711 	.word	0x10000711
 8021768:	10000712 	.word	0x10000712
 802176c:	10000713 	.word	0x10000713
 8021770:	10000714 	.word	0x10000714
 8021774:	10000715 	.word	0x10000715
 8021778:	10000716 	.word	0x10000716
 802177c:	1000076a 	.word	0x1000076a
 8021780:	1000076b 	.word	0x1000076b

08021784 <DigitalCluster_DisplayCheckControl>:
void DigitalCluster_DisplayCheckControl(DigitalCluster_DisplayMode_t *displayType)
{
 8021784:	b590      	push	{r4, r7, lr}
 8021786:	b085      	sub	sp, #20
 8021788:	af02      	add	r7, sp, #8
 802178a:	6078      	str	r0, [r7, #4]
	if(0 != DigitalCluster_RxSig_CheckControlMessageId)
 802178c:	4b3e      	ldr	r3, [pc, #248]	@ (8021888 <DigitalCluster_DisplayCheckControl+0x104>)
 802178e:	781b      	ldrb	r3, [r3, #0]
 8021790:	2b00      	cmp	r3, #0
 8021792:	d072      	beq.n	802187a <DigitalCluster_DisplayCheckControl+0xf6>
	{
		if(12 > CCM_Counter)
 8021794:	4b3d      	ldr	r3, [pc, #244]	@ (802188c <DigitalCluster_DisplayCheckControl+0x108>)
 8021796:	681b      	ldr	r3, [r3, #0]
 8021798:	2b0b      	cmp	r3, #11
 802179a:	d847      	bhi.n	802182c <DigitalCluster_DisplayCheckControl+0xa8>
		{
			if(2 > CCM_Counter && pCheckControlMessageId != DigitalCluster_RxSig_CheckControlMessageId) DigitalCluster_BuzzerState = 1;
 802179c:	4b3b      	ldr	r3, [pc, #236]	@ (802188c <DigitalCluster_DisplayCheckControl+0x108>)
 802179e:	681b      	ldr	r3, [r3, #0]
 80217a0:	2b01      	cmp	r3, #1
 80217a2:	d809      	bhi.n	80217b8 <DigitalCluster_DisplayCheckControl+0x34>
 80217a4:	4b3a      	ldr	r3, [pc, #232]	@ (8021890 <DigitalCluster_DisplayCheckControl+0x10c>)
 80217a6:	781a      	ldrb	r2, [r3, #0]
 80217a8:	4b37      	ldr	r3, [pc, #220]	@ (8021888 <DigitalCluster_DisplayCheckControl+0x104>)
 80217aa:	781b      	ldrb	r3, [r3, #0]
 80217ac:	429a      	cmp	r2, r3
 80217ae:	d003      	beq.n	80217b8 <DigitalCluster_DisplayCheckControl+0x34>
 80217b0:	4b38      	ldr	r3, [pc, #224]	@ (8021894 <DigitalCluster_DisplayCheckControl+0x110>)
 80217b2:	2201      	movs	r2, #1
 80217b4:	701a      	strb	r2, [r3, #0]
 80217b6:	e006      	b.n	80217c6 <DigitalCluster_DisplayCheckControl+0x42>
			else if(DigitalCluster_RxSig_CollisionWarning != 2) DigitalCluster_BuzzerState = 0;
 80217b8:	4b37      	ldr	r3, [pc, #220]	@ (8021898 <DigitalCluster_DisplayCheckControl+0x114>)
 80217ba:	781b      	ldrb	r3, [r3, #0]
 80217bc:	2b02      	cmp	r3, #2
 80217be:	d002      	beq.n	80217c6 <DigitalCluster_DisplayCheckControl+0x42>
 80217c0:	4b34      	ldr	r3, [pc, #208]	@ (8021894 <DigitalCluster_DisplayCheckControl+0x110>)
 80217c2:	2200      	movs	r2, #0
 80217c4:	701a      	strb	r2, [r3, #0]
			else
			{
				/* Do nothing. */
			}
			CCM_Counter++;
 80217c6:	4b31      	ldr	r3, [pc, #196]	@ (802188c <DigitalCluster_DisplayCheckControl+0x108>)
 80217c8:	681b      	ldr	r3, [r3, #0]
 80217ca:	3301      	adds	r3, #1
 80217cc:	4a2f      	ldr	r2, [pc, #188]	@ (802188c <DigitalCluster_DisplayCheckControl+0x108>)
 80217ce:	6013      	str	r3, [r2, #0]
			if(0 == ccmFlag)
 80217d0:	4b32      	ldr	r3, [pc, #200]	@ (802189c <DigitalCluster_DisplayCheckControl+0x118>)
 80217d2:	781b      	ldrb	r3, [r3, #0]
 80217d4:	2b00      	cmp	r3, #0
 80217d6:	d153      	bne.n	8021880 <DigitalCluster_DisplayCheckControl+0xfc>
			{
				ccmFlag = 1;
 80217d8:	4b30      	ldr	r3, [pc, #192]	@ (802189c <DigitalCluster_DisplayCheckControl+0x118>)
 80217da:	2201      	movs	r2, #1
 80217dc:	701a      	strb	r2, [r3, #0]
				FsmcH_FillRectangle(displayType->CheckControlMessage.CheckControlMsgBox.position_x,
 80217de:	687b      	ldr	r3, [r7, #4]
 80217e0:	f8b3 0040 	ldrh.w	r0, [r3, #64]	@ 0x40
 80217e4:	687b      	ldr	r3, [r7, #4]
 80217e6:	f8b3 1042 	ldrh.w	r1, [r3, #66]	@ 0x42
 80217ea:	687b      	ldr	r3, [r7, #4]
 80217ec:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 80217f0:	687b      	ldr	r3, [r7, #4]
 80217f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80217f6:	f248 4410 	movw	r4, #33808	@ 0x8410
 80217fa:	9400      	str	r4, [sp, #0]
 80217fc:	f004 ff8e 	bl	802671c <FsmcH_FillRectangle>
						displayType->CheckControlMessage.CheckControlMsgBox.position_y,
						displayType->CheckControlMessage.CheckControlMsgBox.width,
						displayType->CheckControlMessage.CheckControlMsgBox.height,
						TFT_GRAY);
				displayType->CheckControlMessage.CCM_Text.text = DigitalCluster_CheckControlMessage_String[DigitalCluster_RxSig_CheckControlMessageId];
 8021800:	4b21      	ldr	r3, [pc, #132]	@ (8021888 <DigitalCluster_DisplayCheckControl+0x104>)
 8021802:	781b      	ldrb	r3, [r3, #0]
 8021804:	015b      	lsls	r3, r3, #5
 8021806:	4a26      	ldr	r2, [pc, #152]	@ (80218a0 <DigitalCluster_DisplayCheckControl+0x11c>)
 8021808:	441a      	add	r2, r3
 802180a:	687b      	ldr	r3, [r7, #4]
 802180c:	64da      	str	r2, [r3, #76]	@ 0x4c
				FsmcH_DrawString8(displayType->CheckControlMessage.CCM_Text.position_x,
 802180e:	687b      	ldr	r3, [r7, #4]
 8021810:	f8b3 0048 	ldrh.w	r0, [r3, #72]	@ 0x48
 8021814:	687b      	ldr	r3, [r7, #4]
 8021816:	f8b3 104a 	ldrh.w	r1, [r3, #74]	@ 0x4a
 802181a:	687b      	ldr	r3, [r7, #4]
 802181c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 802181e:	2300      	movs	r3, #0
 8021820:	9300      	str	r3, [sp, #0]
 8021822:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8021826:	f004 fe9b 	bl	8026560 <FsmcH_DrawString8>
	}
	else
	{
		CCM_Counter = 0;
	}
}
 802182a:	e029      	b.n	8021880 <DigitalCluster_DisplayCheckControl+0xfc>
			pCheckControlMessageId = DigitalCluster_RxSig_CheckControlMessageId;
 802182c:	4b16      	ldr	r3, [pc, #88]	@ (8021888 <DigitalCluster_DisplayCheckControl+0x104>)
 802182e:	781a      	ldrb	r2, [r3, #0]
 8021830:	4b17      	ldr	r3, [pc, #92]	@ (8021890 <DigitalCluster_DisplayCheckControl+0x10c>)
 8021832:	701a      	strb	r2, [r3, #0]
			DataRecorder_CcmCounter[DigitalCluster_RxSig_CheckControlMessageId]++;
 8021834:	4b14      	ldr	r3, [pc, #80]	@ (8021888 <DigitalCluster_DisplayCheckControl+0x104>)
 8021836:	781b      	ldrb	r3, [r3, #0]
 8021838:	4a1a      	ldr	r2, [pc, #104]	@ (80218a4 <DigitalCluster_DisplayCheckControl+0x120>)
 802183a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 802183e:	3201      	adds	r2, #1
 8021840:	4918      	ldr	r1, [pc, #96]	@ (80218a4 <DigitalCluster_DisplayCheckControl+0x120>)
 8021842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			DigitalCluster_RxSig_CheckControlMessageId = 0;
 8021846:	4b10      	ldr	r3, [pc, #64]	@ (8021888 <DigitalCluster_DisplayCheckControl+0x104>)
 8021848:	2200      	movs	r2, #0
 802184a:	701a      	strb	r2, [r3, #0]
			CCM_Counter = 0;
 802184c:	4b0f      	ldr	r3, [pc, #60]	@ (802188c <DigitalCluster_DisplayCheckControl+0x108>)
 802184e:	2200      	movs	r2, #0
 8021850:	601a      	str	r2, [r3, #0]
			ccmFlag = 0;
 8021852:	4b12      	ldr	r3, [pc, #72]	@ (802189c <DigitalCluster_DisplayCheckControl+0x118>)
 8021854:	2200      	movs	r2, #0
 8021856:	701a      	strb	r2, [r3, #0]
			FsmcH_FillRectangle(displayType->CheckControlMessage.CheckControlMsgBox.position_x,
 8021858:	687b      	ldr	r3, [r7, #4]
 802185a:	f8b3 0040 	ldrh.w	r0, [r3, #64]	@ 0x40
 802185e:	687b      	ldr	r3, [r7, #4]
 8021860:	f8b3 1042 	ldrh.w	r1, [r3, #66]	@ 0x42
 8021864:	687b      	ldr	r3, [r7, #4]
 8021866:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 802186a:	687b      	ldr	r3, [r7, #4]
 802186c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8021870:	2400      	movs	r4, #0
 8021872:	9400      	str	r4, [sp, #0]
 8021874:	f004 ff52 	bl	802671c <FsmcH_FillRectangle>
}
 8021878:	e002      	b.n	8021880 <DigitalCluster_DisplayCheckControl+0xfc>
		CCM_Counter = 0;
 802187a:	4b04      	ldr	r3, [pc, #16]	@ (802188c <DigitalCluster_DisplayCheckControl+0x108>)
 802187c:	2200      	movs	r2, #0
 802187e:	601a      	str	r2, [r3, #0]
}
 8021880:	bf00      	nop
 8021882:	370c      	adds	r7, #12
 8021884:	46bd      	mov	sp, r7
 8021886:	bd90      	pop	{r4, r7, pc}
 8021888:	1000070d 	.word	0x1000070d
 802188c:	10000754 	.word	0x10000754
 8021890:	1000070e 	.word	0x1000070e
 8021894:	10000738 	.word	0x10000738
 8021898:	1000070b 	.word	0x1000070b
 802189c:	1000077e 	.word	0x1000077e
 80218a0:	100000fc 	.word	0x100000fc
 80218a4:	10000014 	.word	0x10000014

080218a8 <DigitalCluster_HandleTurnSignal>:
void DigitalCluster_HandleTurnSignal(DigitalCluster_DisplayMode_t *displayType)
{
 80218a8:	b590      	push	{r4, r7, lr}
 80218aa:	b085      	sub	sp, #20
 80218ac:	af02      	add	r7, sp, #8
 80218ae:	6078      	str	r0, [r7, #4]
	if(1 == DigitalCluster_RxSig_TurnSignals)
 80218b0:	4b6b      	ldr	r3, [pc, #428]	@ (8021a60 <DigitalCluster_HandleTurnSignal+0x1b8>)
 80218b2:	781b      	ldrb	r3, [r3, #0]
 80218b4:	2b01      	cmp	r3, #1
 80218b6:	d13b      	bne.n	8021930 <DigitalCluster_HandleTurnSignal+0x88>
	{
		if(TS_Counter % 2 == 0 && TS_Counter != 0)
 80218b8:	4b6a      	ldr	r3, [pc, #424]	@ (8021a64 <DigitalCluster_HandleTurnSignal+0x1bc>)
 80218ba:	681b      	ldr	r3, [r3, #0]
 80218bc:	f003 0301 	and.w	r3, r3, #1
 80218c0:	2b00      	cmp	r3, #0
 80218c2:	d11f      	bne.n	8021904 <DigitalCluster_HandleTurnSignal+0x5c>
 80218c4:	4b67      	ldr	r3, [pc, #412]	@ (8021a64 <DigitalCluster_HandleTurnSignal+0x1bc>)
 80218c6:	681b      	ldr	r3, [r3, #0]
 80218c8:	2b00      	cmp	r3, #0
 80218ca:	d01b      	beq.n	8021904 <DigitalCluster_HandleTurnSignal+0x5c>
		{
			FsmcH_FillRectangle(displayType->TurnSignalsBox.TSBox.position_x,
 80218cc:	687b      	ldr	r3, [r7, #4]
 80218ce:	f8b3 00c8 	ldrh.w	r0, [r3, #200]	@ 0xc8
 80218d2:	687b      	ldr	r3, [r7, #4]
 80218d4:	f8b3 10ca 	ldrh.w	r1, [r3, #202]	@ 0xca
					displayType->TurnSignalsBox.TSBox.position_y,
					displayType->TurnSignalsBox.TSBox.width - displayType->TurnSignalsBox.TSBox.width / 2,
 80218d8:	687b      	ldr	r3, [r7, #4]
 80218da:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	@ 0xcc
 80218de:	687b      	ldr	r3, [r7, #4]
 80218e0:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	@ 0xcc
			FsmcH_FillRectangle(displayType->TurnSignalsBox.TSBox.position_x,
 80218e4:	085b      	lsrs	r3, r3, #1
 80218e6:	b29b      	uxth	r3, r3
 80218e8:	1ad3      	subs	r3, r2, r3
 80218ea:	b29a      	uxth	r2, r3
 80218ec:	687b      	ldr	r3, [r7, #4]
 80218ee:	f8b3 30ce 	ldrh.w	r3, [r3, #206]	@ 0xce
 80218f2:	f44f 64fc 	mov.w	r4, #2016	@ 0x7e0
 80218f6:	9400      	str	r4, [sp, #0]
 80218f8:	f004 ff10 	bl	802671c <FsmcH_FillRectangle>
					displayType->TurnSignalsBox.TSBox.height,
					TFT_GREEN);
			TS_Counter = 0;
 80218fc:	4b59      	ldr	r3, [pc, #356]	@ (8021a64 <DigitalCluster_HandleTurnSignal+0x1bc>)
 80218fe:	2200      	movs	r2, #0
 8021900:	601a      	str	r2, [r3, #0]
 8021902:	e0a8      	b.n	8021a56 <DigitalCluster_HandleTurnSignal+0x1ae>
		}
		else
		{
			TS_Counter++;
 8021904:	4b57      	ldr	r3, [pc, #348]	@ (8021a64 <DigitalCluster_HandleTurnSignal+0x1bc>)
 8021906:	681b      	ldr	r3, [r3, #0]
 8021908:	3301      	adds	r3, #1
 802190a:	4a56      	ldr	r2, [pc, #344]	@ (8021a64 <DigitalCluster_HandleTurnSignal+0x1bc>)
 802190c:	6013      	str	r3, [r2, #0]
			FsmcH_FillRectangle(displayType->TurnSignalsBox.TSBox.position_x,
 802190e:	687b      	ldr	r3, [r7, #4]
 8021910:	f8b3 00c8 	ldrh.w	r0, [r3, #200]	@ 0xc8
 8021914:	687b      	ldr	r3, [r7, #4]
 8021916:	f8b3 10ca 	ldrh.w	r1, [r3, #202]	@ 0xca
 802191a:	687b      	ldr	r3, [r7, #4]
 802191c:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	@ 0xcc
 8021920:	687b      	ldr	r3, [r7, #4]
 8021922:	f8b3 30ce 	ldrh.w	r3, [r3, #206]	@ 0xce
 8021926:	2400      	movs	r4, #0
 8021928:	9400      	str	r4, [sp, #0]
 802192a:	f004 fef7 	bl	802671c <FsmcH_FillRectangle>
		{
			/* Do nothing. */
		}
		TS_Counter = 0;
	}
}
 802192e:	e092      	b.n	8021a56 <DigitalCluster_HandleTurnSignal+0x1ae>
	else if(2 == DigitalCluster_RxSig_TurnSignals)
 8021930:	4b4b      	ldr	r3, [pc, #300]	@ (8021a60 <DigitalCluster_HandleTurnSignal+0x1b8>)
 8021932:	781b      	ldrb	r3, [r3, #0]
 8021934:	2b02      	cmp	r3, #2
 8021936:	d13d      	bne.n	80219b4 <DigitalCluster_HandleTurnSignal+0x10c>
		if(TS_Counter % 2 == 0  && TS_Counter != 0)
 8021938:	4b4a      	ldr	r3, [pc, #296]	@ (8021a64 <DigitalCluster_HandleTurnSignal+0x1bc>)
 802193a:	681b      	ldr	r3, [r3, #0]
 802193c:	f003 0301 	and.w	r3, r3, #1
 8021940:	2b00      	cmp	r3, #0
 8021942:	d121      	bne.n	8021988 <DigitalCluster_HandleTurnSignal+0xe0>
 8021944:	4b47      	ldr	r3, [pc, #284]	@ (8021a64 <DigitalCluster_HandleTurnSignal+0x1bc>)
 8021946:	681b      	ldr	r3, [r3, #0]
 8021948:	2b00      	cmp	r3, #0
 802194a:	d01d      	beq.n	8021988 <DigitalCluster_HandleTurnSignal+0xe0>
			FsmcH_FillRectangle(displayType->TurnSignalsBox.TSBox.position_x + displayType->TurnSignalsBox.TSBox.width / 2,
 802194c:	687b      	ldr	r3, [r7, #4]
 802194e:	f8b3 20c8 	ldrh.w	r2, [r3, #200]	@ 0xc8
 8021952:	687b      	ldr	r3, [r7, #4]
 8021954:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	@ 0xcc
 8021958:	085b      	lsrs	r3, r3, #1
 802195a:	b29b      	uxth	r3, r3
 802195c:	4413      	add	r3, r2
 802195e:	b298      	uxth	r0, r3
 8021960:	687b      	ldr	r3, [r7, #4]
 8021962:	f8b3 10ca 	ldrh.w	r1, [r3, #202]	@ 0xca
					displayType->TurnSignalsBox.TSBox.width / 2,
 8021966:	687b      	ldr	r3, [r7, #4]
 8021968:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	@ 0xcc
			FsmcH_FillRectangle(displayType->TurnSignalsBox.TSBox.position_x + displayType->TurnSignalsBox.TSBox.width / 2,
 802196c:	085b      	lsrs	r3, r3, #1
 802196e:	b29a      	uxth	r2, r3
 8021970:	687b      	ldr	r3, [r7, #4]
 8021972:	f8b3 30ce 	ldrh.w	r3, [r3, #206]	@ 0xce
 8021976:	f44f 64fc 	mov.w	r4, #2016	@ 0x7e0
 802197a:	9400      	str	r4, [sp, #0]
 802197c:	f004 fece 	bl	802671c <FsmcH_FillRectangle>
			TS_Counter = 0;
 8021980:	4b38      	ldr	r3, [pc, #224]	@ (8021a64 <DigitalCluster_HandleTurnSignal+0x1bc>)
 8021982:	2200      	movs	r2, #0
 8021984:	601a      	str	r2, [r3, #0]
 8021986:	e066      	b.n	8021a56 <DigitalCluster_HandleTurnSignal+0x1ae>
			TS_Counter++;
 8021988:	4b36      	ldr	r3, [pc, #216]	@ (8021a64 <DigitalCluster_HandleTurnSignal+0x1bc>)
 802198a:	681b      	ldr	r3, [r3, #0]
 802198c:	3301      	adds	r3, #1
 802198e:	4a35      	ldr	r2, [pc, #212]	@ (8021a64 <DigitalCluster_HandleTurnSignal+0x1bc>)
 8021990:	6013      	str	r3, [r2, #0]
			FsmcH_FillRectangle(displayType->TurnSignalsBox.TSBox.position_x,
 8021992:	687b      	ldr	r3, [r7, #4]
 8021994:	f8b3 00c8 	ldrh.w	r0, [r3, #200]	@ 0xc8
 8021998:	687b      	ldr	r3, [r7, #4]
 802199a:	f8b3 10ca 	ldrh.w	r1, [r3, #202]	@ 0xca
 802199e:	687b      	ldr	r3, [r7, #4]
 80219a0:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	@ 0xcc
 80219a4:	687b      	ldr	r3, [r7, #4]
 80219a6:	f8b3 30ce 	ldrh.w	r3, [r3, #206]	@ 0xce
 80219aa:	2400      	movs	r4, #0
 80219ac:	9400      	str	r4, [sp, #0]
 80219ae:	f004 feb5 	bl	802671c <FsmcH_FillRectangle>
}
 80219b2:	e050      	b.n	8021a56 <DigitalCluster_HandleTurnSignal+0x1ae>
	else if(3 == DigitalCluster_RxSig_TurnSignals)
 80219b4:	4b2a      	ldr	r3, [pc, #168]	@ (8021a60 <DigitalCluster_HandleTurnSignal+0x1b8>)
 80219b6:	781b      	ldrb	r3, [r3, #0]
 80219b8:	2b03      	cmp	r3, #3
 80219ba:	d134      	bne.n	8021a26 <DigitalCluster_HandleTurnSignal+0x17e>
		if(TS_Counter % 2 == 0  && TS_Counter != 0)
 80219bc:	4b29      	ldr	r3, [pc, #164]	@ (8021a64 <DigitalCluster_HandleTurnSignal+0x1bc>)
 80219be:	681b      	ldr	r3, [r3, #0]
 80219c0:	f003 0301 	and.w	r3, r3, #1
 80219c4:	2b00      	cmp	r3, #0
 80219c6:	d118      	bne.n	80219fa <DigitalCluster_HandleTurnSignal+0x152>
 80219c8:	4b26      	ldr	r3, [pc, #152]	@ (8021a64 <DigitalCluster_HandleTurnSignal+0x1bc>)
 80219ca:	681b      	ldr	r3, [r3, #0]
 80219cc:	2b00      	cmp	r3, #0
 80219ce:	d014      	beq.n	80219fa <DigitalCluster_HandleTurnSignal+0x152>
			FsmcH_FillRectangle(displayType->TurnSignalsBox.TSBox.position_x,
 80219d0:	687b      	ldr	r3, [r7, #4]
 80219d2:	f8b3 00c8 	ldrh.w	r0, [r3, #200]	@ 0xc8
 80219d6:	687b      	ldr	r3, [r7, #4]
 80219d8:	f8b3 10ca 	ldrh.w	r1, [r3, #202]	@ 0xca
 80219dc:	687b      	ldr	r3, [r7, #4]
 80219de:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	@ 0xcc
 80219e2:	687b      	ldr	r3, [r7, #4]
 80219e4:	f8b3 30ce 	ldrh.w	r3, [r3, #206]	@ 0xce
 80219e8:	f44f 64fc 	mov.w	r4, #2016	@ 0x7e0
 80219ec:	9400      	str	r4, [sp, #0]
 80219ee:	f004 fe95 	bl	802671c <FsmcH_FillRectangle>
			TS_Counter = 0;
 80219f2:	4b1c      	ldr	r3, [pc, #112]	@ (8021a64 <DigitalCluster_HandleTurnSignal+0x1bc>)
 80219f4:	2200      	movs	r2, #0
 80219f6:	601a      	str	r2, [r3, #0]
 80219f8:	e02d      	b.n	8021a56 <DigitalCluster_HandleTurnSignal+0x1ae>
			TS_Counter++;
 80219fa:	4b1a      	ldr	r3, [pc, #104]	@ (8021a64 <DigitalCluster_HandleTurnSignal+0x1bc>)
 80219fc:	681b      	ldr	r3, [r3, #0]
 80219fe:	3301      	adds	r3, #1
 8021a00:	4a18      	ldr	r2, [pc, #96]	@ (8021a64 <DigitalCluster_HandleTurnSignal+0x1bc>)
 8021a02:	6013      	str	r3, [r2, #0]
			FsmcH_FillRectangle(displayType->TurnSignalsBox.TSBox.position_x,
 8021a04:	687b      	ldr	r3, [r7, #4]
 8021a06:	f8b3 00c8 	ldrh.w	r0, [r3, #200]	@ 0xc8
 8021a0a:	687b      	ldr	r3, [r7, #4]
 8021a0c:	f8b3 10ca 	ldrh.w	r1, [r3, #202]	@ 0xca
 8021a10:	687b      	ldr	r3, [r7, #4]
 8021a12:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	@ 0xcc
 8021a16:	687b      	ldr	r3, [r7, #4]
 8021a18:	f8b3 30ce 	ldrh.w	r3, [r3, #206]	@ 0xce
 8021a1c:	2400      	movs	r4, #0
 8021a1e:	9400      	str	r4, [sp, #0]
 8021a20:	f004 fe7c 	bl	802671c <FsmcH_FillRectangle>
}
 8021a24:	e017      	b.n	8021a56 <DigitalCluster_HandleTurnSignal+0x1ae>
		if(TS_Counter != 0)
 8021a26:	4b0f      	ldr	r3, [pc, #60]	@ (8021a64 <DigitalCluster_HandleTurnSignal+0x1bc>)
 8021a28:	681b      	ldr	r3, [r3, #0]
 8021a2a:	2b00      	cmp	r3, #0
 8021a2c:	d00f      	beq.n	8021a4e <DigitalCluster_HandleTurnSignal+0x1a6>
			FsmcH_FillRectangle(displayType->TurnSignalsBox.TSBox.position_x,
 8021a2e:	687b      	ldr	r3, [r7, #4]
 8021a30:	f8b3 00c8 	ldrh.w	r0, [r3, #200]	@ 0xc8
 8021a34:	687b      	ldr	r3, [r7, #4]
 8021a36:	f8b3 10ca 	ldrh.w	r1, [r3, #202]	@ 0xca
 8021a3a:	687b      	ldr	r3, [r7, #4]
 8021a3c:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	@ 0xcc
 8021a40:	687b      	ldr	r3, [r7, #4]
 8021a42:	f8b3 30ce 	ldrh.w	r3, [r3, #206]	@ 0xce
 8021a46:	2400      	movs	r4, #0
 8021a48:	9400      	str	r4, [sp, #0]
 8021a4a:	f004 fe67 	bl	802671c <FsmcH_FillRectangle>
		TS_Counter = 0;
 8021a4e:	4b05      	ldr	r3, [pc, #20]	@ (8021a64 <DigitalCluster_HandleTurnSignal+0x1bc>)
 8021a50:	2200      	movs	r2, #0
 8021a52:	601a      	str	r2, [r3, #0]
}
 8021a54:	e7ff      	b.n	8021a56 <DigitalCluster_HandleTurnSignal+0x1ae>
 8021a56:	bf00      	nop
 8021a58:	370c      	adds	r7, #12
 8021a5a:	46bd      	mov	sp, r7
 8021a5c:	bd90      	pop	{r4, r7, pc}
 8021a5e:	bf00      	nop
 8021a60:	10000709 	.word	0x10000709
 8021a64:	10000758 	.word	0x10000758

08021a68 <DigitalCluster_HandleCollisionWarning>:
void DigitalCluster_HandleCollisionWarning(DigitalCluster_DisplayMode_t *displayType)
{
 8021a68:	b590      	push	{r4, r7, lr}
 8021a6a:	b085      	sub	sp, #20
 8021a6c:	af02      	add	r7, sp, #8
 8021a6e:	6078      	str	r0, [r7, #4]
	if(1 == DigitalCluster_RxSig_CollisionWarning)
 8021a70:	4b4f      	ldr	r3, [pc, #316]	@ (8021bb0 <DigitalCluster_HandleCollisionWarning+0x148>)
 8021a72:	781b      	ldrb	r3, [r3, #0]
 8021a74:	2b01      	cmp	r3, #1
 8021a76:	d12a      	bne.n	8021ace <DigitalCluster_HandleCollisionWarning+0x66>
	{
		if(0 == collisionFlag)
 8021a78:	4b4e      	ldr	r3, [pc, #312]	@ (8021bb4 <DigitalCluster_HandleCollisionWarning+0x14c>)
 8021a7a:	781b      	ldrb	r3, [r3, #0]
 8021a7c:	2b00      	cmp	r3, #0
 8021a7e:	f040 8093 	bne.w	8021ba8 <DigitalCluster_HandleCollisionWarning+0x140>
		{
			collisionFlag = 1;
 8021a82:	4b4c      	ldr	r3, [pc, #304]	@ (8021bb4 <DigitalCluster_HandleCollisionWarning+0x14c>)
 8021a84:	2201      	movs	r2, #1
 8021a86:	701a      	strb	r2, [r3, #0]
			collisionFlagClear = 0;
 8021a88:	4b4b      	ldr	r3, [pc, #300]	@ (8021bb8 <DigitalCluster_HandleCollisionWarning+0x150>)
 8021a8a:	2200      	movs	r2, #0
 8021a8c:	701a      	strb	r2, [r3, #0]
			FsmcH_FillRectangle(displayType->DriverAssistanceMessage.DASBox.position_x,
 8021a8e:	687b      	ldr	r3, [r7, #4]
 8021a90:	f8b3 0050 	ldrh.w	r0, [r3, #80]	@ 0x50
 8021a94:	687b      	ldr	r3, [r7, #4]
 8021a96:	f8b3 1052 	ldrh.w	r1, [r3, #82]	@ 0x52
 8021a9a:	687b      	ldr	r3, [r7, #4]
 8021a9c:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 8021aa0:	687b      	ldr	r3, [r7, #4]
 8021aa2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8021aa6:	f44f 4478 	mov.w	r4, #63488	@ 0xf800
 8021aaa:	9400      	str	r4, [sp, #0]
 8021aac:	f004 fe36 	bl	802671c <FsmcH_FillRectangle>
					displayType->DriverAssistanceMessage.DASBox.position_y,
					displayType->DriverAssistanceMessage.DASBox.width,
					displayType->DriverAssistanceMessage.DASBox.height,
					TFT_RED);
			FsmcH_DrawString(displayType->DriverAssistanceMessage.DAS_Text.position_x,
 8021ab0:	687b      	ldr	r3, [r7, #4]
 8021ab2:	f8b3 0058 	ldrh.w	r0, [r3, #88]	@ 0x58
 8021ab6:	687b      	ldr	r3, [r7, #4]
 8021ab8:	f8b3 105a 	ldrh.w	r1, [r3, #90]	@ 0x5a
 8021abc:	687b      	ldr	r3, [r7, #4]
 8021abe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8021ac0:	2300      	movs	r3, #0
 8021ac2:	9300      	str	r3, [sp, #0]
 8021ac4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8021ac8:	f004 fd74 	bl	80265b4 <FsmcH_DrawString>
			/* Do nothing. */
		}
		CAW_Counter = 0;
		collisionFlag = 0;
	}
}
 8021acc:	e06c      	b.n	8021ba8 <DigitalCluster_HandleCollisionWarning+0x140>
	else if(2 == DigitalCluster_RxSig_CollisionWarning)
 8021ace:	4b38      	ldr	r3, [pc, #224]	@ (8021bb0 <DigitalCluster_HandleCollisionWarning+0x148>)
 8021ad0:	781b      	ldrb	r3, [r3, #0]
 8021ad2:	2b02      	cmp	r3, #2
 8021ad4:	d14b      	bne.n	8021b6e <DigitalCluster_HandleCollisionWarning+0x106>
		collisionFlagClear = 0;
 8021ad6:	4b38      	ldr	r3, [pc, #224]	@ (8021bb8 <DigitalCluster_HandleCollisionWarning+0x150>)
 8021ad8:	2200      	movs	r2, #0
 8021ada:	701a      	strb	r2, [r3, #0]
		if(CAW_Counter % 2 == 0 && CAW_Counter != 0)
 8021adc:	4b37      	ldr	r3, [pc, #220]	@ (8021bbc <DigitalCluster_HandleCollisionWarning+0x154>)
 8021ade:	681b      	ldr	r3, [r3, #0]
 8021ae0:	f003 0301 	and.w	r3, r3, #1
 8021ae4:	2b00      	cmp	r3, #0
 8021ae6:	d129      	bne.n	8021b3c <DigitalCluster_HandleCollisionWarning+0xd4>
 8021ae8:	4b34      	ldr	r3, [pc, #208]	@ (8021bbc <DigitalCluster_HandleCollisionWarning+0x154>)
 8021aea:	681b      	ldr	r3, [r3, #0]
 8021aec:	2b00      	cmp	r3, #0
 8021aee:	d025      	beq.n	8021b3c <DigitalCluster_HandleCollisionWarning+0xd4>
			FsmcH_FillRectangle(displayType->DriverAssistanceMessage.DASBox.position_x,
 8021af0:	687b      	ldr	r3, [r7, #4]
 8021af2:	f8b3 0050 	ldrh.w	r0, [r3, #80]	@ 0x50
 8021af6:	687b      	ldr	r3, [r7, #4]
 8021af8:	f8b3 1052 	ldrh.w	r1, [r3, #82]	@ 0x52
 8021afc:	687b      	ldr	r3, [r7, #4]
 8021afe:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 8021b02:	687b      	ldr	r3, [r7, #4]
 8021b04:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8021b08:	f44f 4478 	mov.w	r4, #63488	@ 0xf800
 8021b0c:	9400      	str	r4, [sp, #0]
 8021b0e:	f004 fe05 	bl	802671c <FsmcH_FillRectangle>
			FsmcH_DrawString(displayType->DriverAssistanceMessage.DAS_Text.position_x,
 8021b12:	687b      	ldr	r3, [r7, #4]
 8021b14:	f8b3 0058 	ldrh.w	r0, [r3, #88]	@ 0x58
 8021b18:	687b      	ldr	r3, [r7, #4]
 8021b1a:	f8b3 105a 	ldrh.w	r1, [r3, #90]	@ 0x5a
 8021b1e:	687b      	ldr	r3, [r7, #4]
 8021b20:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8021b22:	2300      	movs	r3, #0
 8021b24:	9300      	str	r3, [sp, #0]
 8021b26:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8021b2a:	f004 fd43 	bl	80265b4 <FsmcH_DrawString>
			CAW_Counter = 0;
 8021b2e:	4b23      	ldr	r3, [pc, #140]	@ (8021bbc <DigitalCluster_HandleCollisionWarning+0x154>)
 8021b30:	2200      	movs	r2, #0
 8021b32:	601a      	str	r2, [r3, #0]
			DigitalCluster_BuzzerState = 1;
 8021b34:	4b22      	ldr	r3, [pc, #136]	@ (8021bc0 <DigitalCluster_HandleCollisionWarning+0x158>)
 8021b36:	2201      	movs	r2, #1
 8021b38:	701a      	strb	r2, [r3, #0]
}
 8021b3a:	e035      	b.n	8021ba8 <DigitalCluster_HandleCollisionWarning+0x140>
			CAW_Counter++;
 8021b3c:	4b1f      	ldr	r3, [pc, #124]	@ (8021bbc <DigitalCluster_HandleCollisionWarning+0x154>)
 8021b3e:	681b      	ldr	r3, [r3, #0]
 8021b40:	3301      	adds	r3, #1
 8021b42:	4a1e      	ldr	r2, [pc, #120]	@ (8021bbc <DigitalCluster_HandleCollisionWarning+0x154>)
 8021b44:	6013      	str	r3, [r2, #0]
			FsmcH_FillRectangle(displayType->DriverAssistanceMessage.DASBox.position_x,
 8021b46:	687b      	ldr	r3, [r7, #4]
 8021b48:	f8b3 0050 	ldrh.w	r0, [r3, #80]	@ 0x50
 8021b4c:	687b      	ldr	r3, [r7, #4]
 8021b4e:	f8b3 1052 	ldrh.w	r1, [r3, #82]	@ 0x52
 8021b52:	687b      	ldr	r3, [r7, #4]
 8021b54:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 8021b58:	687b      	ldr	r3, [r7, #4]
 8021b5a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8021b5e:	2400      	movs	r4, #0
 8021b60:	9400      	str	r4, [sp, #0]
 8021b62:	f004 fddb 	bl	802671c <FsmcH_FillRectangle>
			DigitalCluster_BuzzerState = 0;
 8021b66:	4b16      	ldr	r3, [pc, #88]	@ (8021bc0 <DigitalCluster_HandleCollisionWarning+0x158>)
 8021b68:	2200      	movs	r2, #0
 8021b6a:	701a      	strb	r2, [r3, #0]
}
 8021b6c:	e01c      	b.n	8021ba8 <DigitalCluster_HandleCollisionWarning+0x140>
		if(0 == collisionFlagClear)
 8021b6e:	4b12      	ldr	r3, [pc, #72]	@ (8021bb8 <DigitalCluster_HandleCollisionWarning+0x150>)
 8021b70:	781b      	ldrb	r3, [r3, #0]
 8021b72:	2b00      	cmp	r3, #0
 8021b74:	d112      	bne.n	8021b9c <DigitalCluster_HandleCollisionWarning+0x134>
			collisionFlagClear = 1;
 8021b76:	4b10      	ldr	r3, [pc, #64]	@ (8021bb8 <DigitalCluster_HandleCollisionWarning+0x150>)
 8021b78:	2201      	movs	r2, #1
 8021b7a:	701a      	strb	r2, [r3, #0]
			FsmcH_FillRectangle(displayType->DriverAssistanceMessage.DASBox.position_x,
 8021b7c:	687b      	ldr	r3, [r7, #4]
 8021b7e:	f8b3 0050 	ldrh.w	r0, [r3, #80]	@ 0x50
 8021b82:	687b      	ldr	r3, [r7, #4]
 8021b84:	f8b3 1052 	ldrh.w	r1, [r3, #82]	@ 0x52
 8021b88:	687b      	ldr	r3, [r7, #4]
 8021b8a:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 8021b8e:	687b      	ldr	r3, [r7, #4]
 8021b90:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8021b94:	2400      	movs	r4, #0
 8021b96:	9400      	str	r4, [sp, #0]
 8021b98:	f004 fdc0 	bl	802671c <FsmcH_FillRectangle>
		CAW_Counter = 0;
 8021b9c:	4b07      	ldr	r3, [pc, #28]	@ (8021bbc <DigitalCluster_HandleCollisionWarning+0x154>)
 8021b9e:	2200      	movs	r2, #0
 8021ba0:	601a      	str	r2, [r3, #0]
		collisionFlag = 0;
 8021ba2:	4b04      	ldr	r3, [pc, #16]	@ (8021bb4 <DigitalCluster_HandleCollisionWarning+0x14c>)
 8021ba4:	2200      	movs	r2, #0
 8021ba6:	701a      	strb	r2, [r3, #0]
}
 8021ba8:	bf00      	nop
 8021baa:	370c      	adds	r7, #12
 8021bac:	46bd      	mov	sp, r7
 8021bae:	bd90      	pop	{r4, r7, pc}
 8021bb0:	1000070b 	.word	0x1000070b
 8021bb4:	1000077c 	.word	0x1000077c
 8021bb8:	1000077d 	.word	0x1000077d
 8021bbc:	1000075c 	.word	0x1000075c
 8021bc0:	10000738 	.word	0x10000738

08021bc4 <DigitalCluster_DisplayInfoLights>:
void DigitalCluster_DisplayInfoLights(DigitalCluster_DisplayMode_t *displayType)
{
 8021bc4:	b590      	push	{r4, r7, lr}
 8021bc6:	b085      	sub	sp, #20
 8021bc8:	af02      	add	r7, sp, #8
 8021bca:	6078      	str	r0, [r7, #4]
	if(pFogLightFront != DigitalCluster_RxSig_FogLightFront)
 8021bcc:	4baa      	ldr	r3, [pc, #680]	@ (8021e78 <DigitalCluster_DisplayInfoLights+0x2b4>)
 8021bce:	781a      	ldrb	r2, [r3, #0]
 8021bd0:	4baa      	ldr	r3, [pc, #680]	@ (8021e7c <DigitalCluster_DisplayInfoLights+0x2b8>)
 8021bd2:	781b      	ldrb	r3, [r3, #0]
 8021bd4:	429a      	cmp	r2, r3
 8021bd6:	d022      	beq.n	8021c1e <DigitalCluster_DisplayInfoLights+0x5a>
	{
		pFogLightFront = DigitalCluster_RxSig_FogLightFront;
 8021bd8:	4ba8      	ldr	r3, [pc, #672]	@ (8021e7c <DigitalCluster_DisplayInfoLights+0x2b8>)
 8021bda:	781a      	ldrb	r2, [r3, #0]
 8021bdc:	4ba6      	ldr	r3, [pc, #664]	@ (8021e78 <DigitalCluster_DisplayInfoLights+0x2b4>)
 8021bde:	701a      	strb	r2, [r3, #0]
		FsmcH_FillRectangle(displayType->DashboardLights2.DashboardLightsBox2.position_x,
 8021be0:	687b      	ldr	r3, [r7, #4]
 8021be2:	f8b3 0078 	ldrh.w	r0, [r3, #120]	@ 0x78
 8021be6:	687b      	ldr	r3, [r7, #4]
 8021be8:	f8b3 107a 	ldrh.w	r1, [r3, #122]	@ 0x7a
 8021bec:	2300      	movs	r3, #0
 8021bee:	9300      	str	r3, [sp, #0]
 8021bf0:	2311      	movs	r3, #17
 8021bf2:	2233      	movs	r2, #51	@ 0x33
 8021bf4:	f004 fd92 	bl	802671c <FsmcH_FillRectangle>
				displayType->DashboardLights2.DashboardLightsBox2.position_y,
				51,
				17,
				TFT_BLACK);
		if(1 == DigitalCluster_RxSig_FogLightFront)
 8021bf8:	4ba0      	ldr	r3, [pc, #640]	@ (8021e7c <DigitalCluster_DisplayInfoLights+0x2b8>)
 8021bfa:	781b      	ldrb	r3, [r3, #0]
 8021bfc:	2b01      	cmp	r3, #1
 8021bfe:	d10e      	bne.n	8021c1e <DigitalCluster_DisplayInfoLights+0x5a>
		{
			FsmcH_DrawString(displayType->DashboardLights2.DL2_FLF.position_x,
 8021c00:	687b      	ldr	r3, [r7, #4]
 8021c02:	f8b3 0080 	ldrh.w	r0, [r3, #128]	@ 0x80
 8021c06:	687b      	ldr	r3, [r7, #4]
 8021c08:	f8b3 1082 	ldrh.w	r1, [r3, #130]	@ 0x82
 8021c0c:	687b      	ldr	r3, [r7, #4]
 8021c0e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8021c12:	2300      	movs	r3, #0
 8021c14:	9300      	str	r3, [sp, #0]
 8021c16:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8021c1a:	f004 fccb 	bl	80265b4 <FsmcH_DrawString>
	}
	else
	{
		/* Do nothing. */
	}
	if(pFogLightRear != DigitalCluster_RxSig_FogLightRear)
 8021c1e:	4b98      	ldr	r3, [pc, #608]	@ (8021e80 <DigitalCluster_DisplayInfoLights+0x2bc>)
 8021c20:	781a      	ldrb	r2, [r3, #0]
 8021c22:	4b98      	ldr	r3, [pc, #608]	@ (8021e84 <DigitalCluster_DisplayInfoLights+0x2c0>)
 8021c24:	781b      	ldrb	r3, [r3, #0]
 8021c26:	429a      	cmp	r2, r3
 8021c28:	d024      	beq.n	8021c74 <DigitalCluster_DisplayInfoLights+0xb0>
	{
		pFogLightRear = DigitalCluster_RxSig_FogLightRear;
 8021c2a:	4b96      	ldr	r3, [pc, #600]	@ (8021e84 <DigitalCluster_DisplayInfoLights+0x2c0>)
 8021c2c:	781a      	ldrb	r2, [r3, #0]
 8021c2e:	4b94      	ldr	r3, [pc, #592]	@ (8021e80 <DigitalCluster_DisplayInfoLights+0x2bc>)
 8021c30:	701a      	strb	r2, [r3, #0]
		FsmcH_FillRectangle(displayType->DashboardLights2.DashboardLightsBox2.position_x + 60,
 8021c32:	687b      	ldr	r3, [r7, #4]
 8021c34:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 8021c38:	333c      	adds	r3, #60	@ 0x3c
 8021c3a:	b298      	uxth	r0, r3
 8021c3c:	687b      	ldr	r3, [r7, #4]
 8021c3e:	f8b3 107a 	ldrh.w	r1, [r3, #122]	@ 0x7a
 8021c42:	2300      	movs	r3, #0
 8021c44:	9300      	str	r3, [sp, #0]
 8021c46:	2311      	movs	r3, #17
 8021c48:	2233      	movs	r2, #51	@ 0x33
 8021c4a:	f004 fd67 	bl	802671c <FsmcH_FillRectangle>
				displayType->DashboardLights2.DashboardLightsBox2.position_y,
				51,
				17,
				TFT_BLACK);
		if(1 == DigitalCluster_RxSig_FogLightRear)
 8021c4e:	4b8d      	ldr	r3, [pc, #564]	@ (8021e84 <DigitalCluster_DisplayInfoLights+0x2c0>)
 8021c50:	781b      	ldrb	r3, [r3, #0]
 8021c52:	2b01      	cmp	r3, #1
 8021c54:	d10e      	bne.n	8021c74 <DigitalCluster_DisplayInfoLights+0xb0>
		{
			FsmcH_DrawString(displayType->DashboardLights2.DL2_FLR.position_x,
 8021c56:	687b      	ldr	r3, [r7, #4]
 8021c58:	f8b3 0088 	ldrh.w	r0, [r3, #136]	@ 0x88
 8021c5c:	687b      	ldr	r3, [r7, #4]
 8021c5e:	f8b3 108a 	ldrh.w	r1, [r3, #138]	@ 0x8a
 8021c62:	687b      	ldr	r3, [r7, #4]
 8021c64:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8021c68:	2300      	movs	r3, #0
 8021c6a:	9300      	str	r3, [sp, #0]
 8021c6c:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8021c70:	f004 fca0 	bl	80265b4 <FsmcH_DrawString>
	}
	else
	{
		/* Do nothing. */
	}
	if(pRls != DigitalCluster_RxSig_Rls)
 8021c74:	4b84      	ldr	r3, [pc, #528]	@ (8021e88 <DigitalCluster_DisplayInfoLights+0x2c4>)
 8021c76:	781a      	ldrb	r2, [r3, #0]
 8021c78:	4b84      	ldr	r3, [pc, #528]	@ (8021e8c <DigitalCluster_DisplayInfoLights+0x2c8>)
 8021c7a:	781b      	ldrb	r3, [r3, #0]
 8021c7c:	429a      	cmp	r2, r3
 8021c7e:	d024      	beq.n	8021cca <DigitalCluster_DisplayInfoLights+0x106>
	{
		pRls = DigitalCluster_RxSig_Rls;
 8021c80:	4b82      	ldr	r3, [pc, #520]	@ (8021e8c <DigitalCluster_DisplayInfoLights+0x2c8>)
 8021c82:	781a      	ldrb	r2, [r3, #0]
 8021c84:	4b80      	ldr	r3, [pc, #512]	@ (8021e88 <DigitalCluster_DisplayInfoLights+0x2c4>)
 8021c86:	701a      	strb	r2, [r3, #0]
		FsmcH_FillRectangle(displayType->DashboardLights2.DashboardLightsBox2.position_x + 120,
 8021c88:	687b      	ldr	r3, [r7, #4]
 8021c8a:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 8021c8e:	3378      	adds	r3, #120	@ 0x78
 8021c90:	b298      	uxth	r0, r3
 8021c92:	687b      	ldr	r3, [r7, #4]
 8021c94:	f8b3 107a 	ldrh.w	r1, [r3, #122]	@ 0x7a
 8021c98:	2300      	movs	r3, #0
 8021c9a:	9300      	str	r3, [sp, #0]
 8021c9c:	2311      	movs	r3, #17
 8021c9e:	2233      	movs	r2, #51	@ 0x33
 8021ca0:	f004 fd3c 	bl	802671c <FsmcH_FillRectangle>
				displayType->DashboardLights2.DashboardLightsBox2.position_y,
				51,
				17,
				TFT_BLACK);
		if(1 == DigitalCluster_RxSig_Rls)
 8021ca4:	4b79      	ldr	r3, [pc, #484]	@ (8021e8c <DigitalCluster_DisplayInfoLights+0x2c8>)
 8021ca6:	781b      	ldrb	r3, [r3, #0]
 8021ca8:	2b01      	cmp	r3, #1
 8021caa:	d10e      	bne.n	8021cca <DigitalCluster_DisplayInfoLights+0x106>
		{
			FsmcH_DrawString(displayType->DashboardLights2.DL2_RLS.position_x,
 8021cac:	687b      	ldr	r3, [r7, #4]
 8021cae:	f8b3 0090 	ldrh.w	r0, [r3, #144]	@ 0x90
 8021cb2:	687b      	ldr	r3, [r7, #4]
 8021cb4:	f8b3 1092 	ldrh.w	r1, [r3, #146]	@ 0x92
 8021cb8:	687b      	ldr	r3, [r7, #4]
 8021cba:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8021cbe:	2300      	movs	r3, #0
 8021cc0:	9300      	str	r3, [sp, #0]
 8021cc2:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8021cc6:	f004 fc75 	bl	80265b4 <FsmcH_DrawString>
	}
	else
	{
		/* Do nothing. */
	}
	if(pRecirculation != DigitalCluster_RxSig_Recirculation)
 8021cca:	4b71      	ldr	r3, [pc, #452]	@ (8021e90 <DigitalCluster_DisplayInfoLights+0x2cc>)
 8021ccc:	781a      	ldrb	r2, [r3, #0]
 8021cce:	4b71      	ldr	r3, [pc, #452]	@ (8021e94 <DigitalCluster_DisplayInfoLights+0x2d0>)
 8021cd0:	781b      	ldrb	r3, [r3, #0]
 8021cd2:	429a      	cmp	r2, r3
 8021cd4:	d024      	beq.n	8021d20 <DigitalCluster_DisplayInfoLights+0x15c>
	{
		pRecirculation = DigitalCluster_RxSig_Recirculation;
 8021cd6:	4b6f      	ldr	r3, [pc, #444]	@ (8021e94 <DigitalCluster_DisplayInfoLights+0x2d0>)
 8021cd8:	781a      	ldrb	r2, [r3, #0]
 8021cda:	4b6d      	ldr	r3, [pc, #436]	@ (8021e90 <DigitalCluster_DisplayInfoLights+0x2cc>)
 8021cdc:	701a      	strb	r2, [r3, #0]
		FsmcH_FillRectangle(displayType->DashboardLights2.DashboardLightsBox2.position_x + 180,
 8021cde:	687b      	ldr	r3, [r7, #4]
 8021ce0:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 8021ce4:	33b4      	adds	r3, #180	@ 0xb4
 8021ce6:	b298      	uxth	r0, r3
 8021ce8:	687b      	ldr	r3, [r7, #4]
 8021cea:	f8b3 107a 	ldrh.w	r1, [r3, #122]	@ 0x7a
 8021cee:	2300      	movs	r3, #0
 8021cf0:	9300      	str	r3, [sp, #0]
 8021cf2:	2311      	movs	r3, #17
 8021cf4:	2211      	movs	r2, #17
 8021cf6:	f004 fd11 	bl	802671c <FsmcH_FillRectangle>
				displayType->DashboardLights2.DashboardLightsBox2.position_y,
				17,
				17,
				TFT_BLACK);
		if(2 == DigitalCluster_RxSig_Recirculation)
 8021cfa:	4b66      	ldr	r3, [pc, #408]	@ (8021e94 <DigitalCluster_DisplayInfoLights+0x2d0>)
 8021cfc:	781b      	ldrb	r3, [r3, #0]
 8021cfe:	2b02      	cmp	r3, #2
 8021d00:	d10e      	bne.n	8021d20 <DigitalCluster_DisplayInfoLights+0x15c>
		{
			FsmcH_DrawString(displayType->DashboardLights2.DL2_C.position_x,
 8021d02:	687b      	ldr	r3, [r7, #4]
 8021d04:	f8b3 0098 	ldrh.w	r0, [r3, #152]	@ 0x98
 8021d08:	687b      	ldr	r3, [r7, #4]
 8021d0a:	f8b3 109a 	ldrh.w	r1, [r3, #154]	@ 0x9a
 8021d0e:	687b      	ldr	r3, [r7, #4]
 8021d10:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8021d14:	2300      	movs	r3, #0
 8021d16:	9300      	str	r3, [sp, #0]
 8021d18:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8021d1c:	f004 fc4a 	bl	80265b4 <FsmcH_DrawString>
	}
	else
	{
		/* Do nothing. */
	}
	if(pAutoClimate != DigitalCluster_RxSig_AutoClimate)
 8021d20:	4b5d      	ldr	r3, [pc, #372]	@ (8021e98 <DigitalCluster_DisplayInfoLights+0x2d4>)
 8021d22:	781a      	ldrb	r2, [r3, #0]
 8021d24:	4b5d      	ldr	r3, [pc, #372]	@ (8021e9c <DigitalCluster_DisplayInfoLights+0x2d8>)
 8021d26:	781b      	ldrb	r3, [r3, #0]
 8021d28:	429a      	cmp	r2, r3
 8021d2a:	d024      	beq.n	8021d76 <DigitalCluster_DisplayInfoLights+0x1b2>
	{
		pAutoClimate = DigitalCluster_RxSig_AutoClimate;
 8021d2c:	4b5b      	ldr	r3, [pc, #364]	@ (8021e9c <DigitalCluster_DisplayInfoLights+0x2d8>)
 8021d2e:	781a      	ldrb	r2, [r3, #0]
 8021d30:	4b59      	ldr	r3, [pc, #356]	@ (8021e98 <DigitalCluster_DisplayInfoLights+0x2d4>)
 8021d32:	701a      	strb	r2, [r3, #0]
		FsmcH_FillRectangle(displayType->DashboardLights2.DashboardLightsBox2.position_x,
 8021d34:	687b      	ldr	r3, [r7, #4]
 8021d36:	f8b3 0078 	ldrh.w	r0, [r3, #120]	@ 0x78
				displayType->DashboardLights2.DashboardLightsBox2.position_y + 30,
 8021d3a:	687b      	ldr	r3, [r7, #4]
 8021d3c:	f8b3 307a 	ldrh.w	r3, [r3, #122]	@ 0x7a
		FsmcH_FillRectangle(displayType->DashboardLights2.DashboardLightsBox2.position_x,
 8021d40:	331e      	adds	r3, #30
 8021d42:	b299      	uxth	r1, r3
 8021d44:	2300      	movs	r3, #0
 8021d46:	9300      	str	r3, [sp, #0]
 8021d48:	2311      	movs	r3, #17
 8021d4a:	2244      	movs	r2, #68	@ 0x44
 8021d4c:	f004 fce6 	bl	802671c <FsmcH_FillRectangle>
				68,
				17,
				TFT_BLACK);
		if(1 == DigitalCluster_RxSig_AutoClimate)
 8021d50:	4b52      	ldr	r3, [pc, #328]	@ (8021e9c <DigitalCluster_DisplayInfoLights+0x2d8>)
 8021d52:	781b      	ldrb	r3, [r3, #0]
 8021d54:	2b01      	cmp	r3, #1
 8021d56:	d10e      	bne.n	8021d76 <DigitalCluster_DisplayInfoLights+0x1b2>
		{
			FsmcH_DrawString(displayType->DashboardLights2.DL2_AUTO.position_x,
 8021d58:	687b      	ldr	r3, [r7, #4]
 8021d5a:	f8b3 00b0 	ldrh.w	r0, [r3, #176]	@ 0xb0
 8021d5e:	687b      	ldr	r3, [r7, #4]
 8021d60:	f8b3 10b2 	ldrh.w	r1, [r3, #178]	@ 0xb2
 8021d64:	687b      	ldr	r3, [r7, #4]
 8021d66:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8021d6a:	2300      	movs	r3, #0
 8021d6c:	9300      	str	r3, [sp, #0]
 8021d6e:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8021d72:	f004 fc1f 	bl	80265b4 <FsmcH_DrawString>
	}
	else
	{
		/* Do nothing. */
	}
	if(pRequestedTemperature != DigitalCluster_RxSig_RequestedTemperature)
 8021d76:	4b4a      	ldr	r3, [pc, #296]	@ (8021ea0 <DigitalCluster_DisplayInfoLights+0x2dc>)
 8021d78:	781a      	ldrb	r2, [r3, #0]
 8021d7a:	4b4a      	ldr	r3, [pc, #296]	@ (8021ea4 <DigitalCluster_DisplayInfoLights+0x2e0>)
 8021d7c:	781b      	ldrb	r3, [r3, #0]
 8021d7e:	429a      	cmp	r2, r3
 8021d80:	d030      	beq.n	8021de4 <DigitalCluster_DisplayInfoLights+0x220>
	{
		pRequestedTemperature = DigitalCluster_RxSig_RequestedTemperature;
 8021d82:	4b48      	ldr	r3, [pc, #288]	@ (8021ea4 <DigitalCluster_DisplayInfoLights+0x2e0>)
 8021d84:	781a      	ldrb	r2, [r3, #0]
 8021d86:	4b46      	ldr	r3, [pc, #280]	@ (8021ea0 <DigitalCluster_DisplayInfoLights+0x2dc>)
 8021d88:	701a      	strb	r2, [r3, #0]
		FsmcH_FillRectangle(displayType->DashboardLights2.DashboardLightsBox2.position_x,
 8021d8a:	687b      	ldr	r3, [r7, #4]
 8021d8c:	f8b3 0078 	ldrh.w	r0, [r3, #120]	@ 0x78
				displayType->DashboardLights2.DashboardLightsBox2.position_y + 60,
 8021d90:	687b      	ldr	r3, [r7, #4]
 8021d92:	f8b3 307a 	ldrh.w	r3, [r3, #122]	@ 0x7a
		FsmcH_FillRectangle(displayType->DashboardLights2.DashboardLightsBox2.position_x,
 8021d96:	333c      	adds	r3, #60	@ 0x3c
 8021d98:	b299      	uxth	r1, r3
 8021d9a:	2300      	movs	r3, #0
 8021d9c:	9300      	str	r3, [sp, #0]
 8021d9e:	2311      	movs	r3, #17
 8021da0:	2233      	movs	r2, #51	@ 0x33
 8021da2:	f004 fcbb 	bl	802671c <FsmcH_FillRectangle>
				51,
				17,
				TFT_BLACK);

		FsmcH_DrawInteger(displayType->DashboardLights2.DL2_RTN.position_x,
 8021da6:	687b      	ldr	r3, [r7, #4]
 8021da8:	f8b3 00a8 	ldrh.w	r0, [r3, #168]	@ 0xa8
 8021dac:	687b      	ldr	r3, [r7, #4]
 8021dae:	f8b3 10aa 	ldrh.w	r1, [r3, #170]	@ 0xaa
				displayType->DashboardLights2.DL2_RTN.position_y,
				DigitalCluster_RxSig_RequestedTemperature + 16,
 8021db2:	4b3c      	ldr	r3, [pc, #240]	@ (8021ea4 <DigitalCluster_DisplayInfoLights+0x2e0>)
 8021db4:	781b      	ldrb	r3, [r3, #0]
 8021db6:	3310      	adds	r3, #16
		FsmcH_DrawInteger(displayType->DashboardLights2.DL2_RTN.position_x,
 8021db8:	461a      	mov	r2, r3
 8021dba:	2300      	movs	r3, #0
 8021dbc:	9300      	str	r3, [sp, #0]
 8021dbe:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8021dc2:	f004 fc1d 	bl	8026600 <FsmcH_DrawInteger>
				TFT_ORANGE,
				TFT_BLACK);

		FsmcH_DrawString(displayType->DashboardLights2.DL2_RT.position_x,
 8021dc6:	687b      	ldr	r3, [r7, #4]
 8021dc8:	f8b3 00a0 	ldrh.w	r0, [r3, #160]	@ 0xa0
 8021dcc:	687b      	ldr	r3, [r7, #4]
 8021dce:	f8b3 10a2 	ldrh.w	r1, [r3, #162]	@ 0xa2
 8021dd2:	687b      	ldr	r3, [r7, #4]
 8021dd4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8021dd8:	2300      	movs	r3, #0
 8021dda:	9300      	str	r3, [sp, #0]
 8021ddc:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8021de0:	f004 fbe8 	bl	80265b4 <FsmcH_DrawString>
	}
	else
	{
		/* Do nothing. */
	}
	if(pFanValue != DigitalCluster_RxSig_FanValue)
 8021de4:	4b30      	ldr	r3, [pc, #192]	@ (8021ea8 <DigitalCluster_DisplayInfoLights+0x2e4>)
 8021de6:	781a      	ldrb	r2, [r3, #0]
 8021de8:	4b30      	ldr	r3, [pc, #192]	@ (8021eac <DigitalCluster_DisplayInfoLights+0x2e8>)
 8021dea:	781b      	ldrb	r3, [r3, #0]
 8021dec:	429a      	cmp	r2, r3
 8021dee:	d031      	beq.n	8021e54 <DigitalCluster_DisplayInfoLights+0x290>
	{
		pFanValue = DigitalCluster_RxSig_FanValue;
 8021df0:	4b2e      	ldr	r3, [pc, #184]	@ (8021eac <DigitalCluster_DisplayInfoLights+0x2e8>)
 8021df2:	781a      	ldrb	r2, [r3, #0]
 8021df4:	4b2c      	ldr	r3, [pc, #176]	@ (8021ea8 <DigitalCluster_DisplayInfoLights+0x2e4>)
 8021df6:	701a      	strb	r2, [r3, #0]
		FsmcH_FillRectangle(displayType->DashboardLights2.DashboardLightsBox2.position_x + 80,
 8021df8:	687b      	ldr	r3, [r7, #4]
 8021dfa:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 8021dfe:	3350      	adds	r3, #80	@ 0x50
 8021e00:	b298      	uxth	r0, r3
				displayType->DashboardLights2.DashboardLightsBox2.position_y + 30,
 8021e02:	687b      	ldr	r3, [r7, #4]
 8021e04:	f8b3 307a 	ldrh.w	r3, [r3, #122]	@ 0x7a
		FsmcH_FillRectangle(displayType->DashboardLights2.DashboardLightsBox2.position_x + 80,
 8021e08:	331e      	adds	r3, #30
 8021e0a:	b299      	uxth	r1, r3
 8021e0c:	2300      	movs	r3, #0
 8021e0e:	9300      	str	r3, [sp, #0]
 8021e10:	2311      	movs	r3, #17
 8021e12:	2233      	movs	r2, #51	@ 0x33
 8021e14:	f004 fc82 	bl	802671c <FsmcH_FillRectangle>
				51,
				17,
				TFT_BLACK);

		FsmcH_DrawInteger(displayType->DashboardLights2.DL2_FVN.position_x,
 8021e18:	687b      	ldr	r3, [r7, #4]
 8021e1a:	f8b3 00c0 	ldrh.w	r0, [r3, #192]	@ 0xc0
 8021e1e:	687b      	ldr	r3, [r7, #4]
 8021e20:	f8b3 10c2 	ldrh.w	r1, [r3, #194]	@ 0xc2
 8021e24:	4b21      	ldr	r3, [pc, #132]	@ (8021eac <DigitalCluster_DisplayInfoLights+0x2e8>)
 8021e26:	781b      	ldrb	r3, [r3, #0]
 8021e28:	461a      	mov	r2, r3
 8021e2a:	2300      	movs	r3, #0
 8021e2c:	9300      	str	r3, [sp, #0]
 8021e2e:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8021e32:	f004 fbe5 	bl	8026600 <FsmcH_DrawInteger>
				displayType->DashboardLights2.DL2_FVN.position_y,
				DigitalCluster_RxSig_FanValue,
				TFT_ORANGE,
				TFT_BLACK);

		FsmcH_DrawString(displayType->DashboardLights2.DL2_FV.position_x,
 8021e36:	687b      	ldr	r3, [r7, #4]
 8021e38:	f8b3 00b8 	ldrh.w	r0, [r3, #184]	@ 0xb8
 8021e3c:	687b      	ldr	r3, [r7, #4]
 8021e3e:	f8b3 10ba 	ldrh.w	r1, [r3, #186]	@ 0xba
 8021e42:	687b      	ldr	r3, [r7, #4]
 8021e44:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8021e48:	2300      	movs	r3, #0
 8021e4a:	9300      	str	r3, [sp, #0]
 8021e4c:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8021e50:	f004 fbb0 	bl	80265b4 <FsmcH_DrawString>
	}
	else
	{
		/* Do nothing. */
	}
	if(tPrevState != DigitalCluster_RxSig_OutsideTemperature)
 8021e54:	4b16      	ldr	r3, [pc, #88]	@ (8021eb0 <DigitalCluster_DisplayInfoLights+0x2ec>)
 8021e56:	781a      	ldrb	r2, [r3, #0]
 8021e58:	4b16      	ldr	r3, [pc, #88]	@ (8021eb4 <DigitalCluster_DisplayInfoLights+0x2f0>)
 8021e5a:	781b      	ldrb	r3, [r3, #0]
 8021e5c:	429a      	cmp	r2, r3
 8021e5e:	d065      	beq.n	8021f2c <DigitalCluster_DisplayInfoLights+0x368>
	{
		tPrevState = DigitalCluster_RxSig_OutsideTemperature;
 8021e60:	4b14      	ldr	r3, [pc, #80]	@ (8021eb4 <DigitalCluster_DisplayInfoLights+0x2f0>)
 8021e62:	781a      	ldrb	r2, [r3, #0]
 8021e64:	4b12      	ldr	r3, [pc, #72]	@ (8021eb0 <DigitalCluster_DisplayInfoLights+0x2ec>)
 8021e66:	701a      	strb	r2, [r3, #0]
		if(100 <= DigitalCluster_RxSig_OutsideTemperature) DigitalCluster_RxSig_OutsideTemperature = 99;
 8021e68:	4b12      	ldr	r3, [pc, #72]	@ (8021eb4 <DigitalCluster_DisplayInfoLights+0x2f0>)
 8021e6a:	781b      	ldrb	r3, [r3, #0]
 8021e6c:	2b63      	cmp	r3, #99	@ 0x63
 8021e6e:	d923      	bls.n	8021eb8 <DigitalCluster_DisplayInfoLights+0x2f4>
 8021e70:	4b10      	ldr	r3, [pc, #64]	@ (8021eb4 <DigitalCluster_DisplayInfoLights+0x2f0>)
 8021e72:	2263      	movs	r2, #99	@ 0x63
 8021e74:	701a      	strb	r2, [r3, #0]
 8021e76:	e01f      	b.n	8021eb8 <DigitalCluster_DisplayInfoLights+0x2f4>
 8021e78:	10000799 	.word	0x10000799
 8021e7c:	10000730 	.word	0x10000730
 8021e80:	1000079a 	.word	0x1000079a
 8021e84:	10000731 	.word	0x10000731
 8021e88:	1000079b 	.word	0x1000079b
 8021e8c:	10000732 	.word	0x10000732
 8021e90:	1000079c 	.word	0x1000079c
 8021e94:	10000733 	.word	0x10000733
 8021e98:	1000079e 	.word	0x1000079e
 8021e9c:	10000735 	.word	0x10000735
 8021ea0:	1000079d 	.word	0x1000079d
 8021ea4:	10000734 	.word	0x10000734
 8021ea8:	1000079f 	.word	0x1000079f
 8021eac:	10000736 	.word	0x10000736
 8021eb0:	1000076e 	.word	0x1000076e
 8021eb4:	1000070f 	.word	0x1000070f
		else
		{
			/* Do nothing. */
		}
		FsmcH_FillRectangle(displayType->Temperature.TemperatureBox.position_x,
 8021eb8:	687b      	ldr	r3, [r7, #4]
 8021eba:	8c18      	ldrh	r0, [r3, #32]
 8021ebc:	687b      	ldr	r3, [r7, #4]
 8021ebe:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 8021ec0:	687b      	ldr	r3, [r7, #4]
 8021ec2:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 8021ec4:	687b      	ldr	r3, [r7, #4]
 8021ec6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8021ec8:	2400      	movs	r4, #0
 8021eca:	9400      	str	r4, [sp, #0]
 8021ecc:	f004 fc26 	bl	802671c <FsmcH_FillRectangle>
				displayType->Temperature.TemperatureBox.position_y,
				displayType->Temperature.TemperatureBox.width,
				displayType->Temperature.TemperatureBox.height,
				TFT_BLACK);
		if(10 > DigitalCluster_RxSig_OutsideTemperature)
 8021ed0:	4b82      	ldr	r3, [pc, #520]	@ (80220dc <DigitalCluster_DisplayInfoLights+0x518>)
 8021ed2:	781b      	ldrb	r3, [r3, #0]
 8021ed4:	2b09      	cmp	r3, #9
 8021ed6:	d80f      	bhi.n	8021ef8 <DigitalCluster_DisplayInfoLights+0x334>
		{
			FsmcH_DrawInteger(displayType->Temperature.T_TempText.position_x + 17,
 8021ed8:	687b      	ldr	r3, [r7, #4]
 8021eda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8021edc:	3311      	adds	r3, #17
 8021ede:	b298      	uxth	r0, r3
 8021ee0:	687b      	ldr	r3, [r7, #4]
 8021ee2:	8d59      	ldrh	r1, [r3, #42]	@ 0x2a
 8021ee4:	4b7d      	ldr	r3, [pc, #500]	@ (80220dc <DigitalCluster_DisplayInfoLights+0x518>)
 8021ee6:	781b      	ldrb	r3, [r3, #0]
 8021ee8:	461a      	mov	r2, r3
 8021eea:	2300      	movs	r3, #0
 8021eec:	9300      	str	r3, [sp, #0]
 8021eee:	f24d 53b1 	movw	r3, #54705	@ 0xd5b1
 8021ef2:	f004 fb85 	bl	8026600 <FsmcH_DrawInteger>
 8021ef6:	e00c      	b.n	8021f12 <DigitalCluster_DisplayInfoLights+0x34e>
					TFT_TAN,
					TFT_BLACK);
		}
		else
		{
			FsmcH_DrawInteger(displayType->Temperature.T_TempText.position_x,
 8021ef8:	687b      	ldr	r3, [r7, #4]
 8021efa:	8d18      	ldrh	r0, [r3, #40]	@ 0x28
 8021efc:	687b      	ldr	r3, [r7, #4]
 8021efe:	8d59      	ldrh	r1, [r3, #42]	@ 0x2a
 8021f00:	4b76      	ldr	r3, [pc, #472]	@ (80220dc <DigitalCluster_DisplayInfoLights+0x518>)
 8021f02:	781b      	ldrb	r3, [r3, #0]
 8021f04:	461a      	mov	r2, r3
 8021f06:	2300      	movs	r3, #0
 8021f08:	9300      	str	r3, [sp, #0]
 8021f0a:	f24d 53b1 	movw	r3, #54705	@ 0xd5b1
 8021f0e:	f004 fb77 	bl	8026600 <FsmcH_DrawInteger>
					displayType->Temperature.T_TempText.position_y,
					DigitalCluster_RxSig_OutsideTemperature,
					TFT_TAN,
					TFT_BLACK);
		}
		FsmcH_DrawString(displayType->Temperature.T_TempText.position_x + 34,
 8021f12:	687b      	ldr	r3, [r7, #4]
 8021f14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8021f16:	3322      	adds	r3, #34	@ 0x22
 8021f18:	b298      	uxth	r0, r3
 8021f1a:	687b      	ldr	r3, [r7, #4]
 8021f1c:	8d59      	ldrh	r1, [r3, #42]	@ 0x2a
 8021f1e:	2300      	movs	r3, #0
 8021f20:	9300      	str	r3, [sp, #0]
 8021f22:	f24d 53b1 	movw	r3, #54705	@ 0xd5b1
 8021f26:	4a6e      	ldr	r2, [pc, #440]	@ (80220e0 <DigitalCluster_DisplayInfoLights+0x51c>)
 8021f28:	f004 fb44 	bl	80265b4 <FsmcH_DrawString>
	}
	else
	{
		/* Do nothing. */
	}
	if(gPrevState != DigitalCluster_RxSig_Gear || dmPrevState != DigitalCluster_RxSig_DisplayMode)
 8021f2c:	4b6d      	ldr	r3, [pc, #436]	@ (80220e4 <DigitalCluster_DisplayInfoLights+0x520>)
 8021f2e:	781a      	ldrb	r2, [r3, #0]
 8021f30:	4b6d      	ldr	r3, [pc, #436]	@ (80220e8 <DigitalCluster_DisplayInfoLights+0x524>)
 8021f32:	781b      	ldrb	r3, [r3, #0]
 8021f34:	429a      	cmp	r2, r3
 8021f36:	d105      	bne.n	8021f44 <DigitalCluster_DisplayInfoLights+0x380>
 8021f38:	4b6c      	ldr	r3, [pc, #432]	@ (80220ec <DigitalCluster_DisplayInfoLights+0x528>)
 8021f3a:	781a      	ldrb	r2, [r3, #0]
 8021f3c:	4b6c      	ldr	r3, [pc, #432]	@ (80220f0 <DigitalCluster_DisplayInfoLights+0x52c>)
 8021f3e:	781b      	ldrb	r3, [r3, #0]
 8021f40:	429a      	cmp	r2, r3
 8021f42:	d05c      	beq.n	8021ffe <DigitalCluster_DisplayInfoLights+0x43a>
	{
		gPrevState = DigitalCluster_RxSig_Gear;
 8021f44:	4b68      	ldr	r3, [pc, #416]	@ (80220e8 <DigitalCluster_DisplayInfoLights+0x524>)
 8021f46:	781a      	ldrb	r2, [r3, #0]
 8021f48:	4b66      	ldr	r3, [pc, #408]	@ (80220e4 <DigitalCluster_DisplayInfoLights+0x520>)
 8021f4a:	701a      	strb	r2, [r3, #0]
		dmPrevState = DigitalCluster_RxSig_DisplayMode;
 8021f4c:	4b68      	ldr	r3, [pc, #416]	@ (80220f0 <DigitalCluster_DisplayInfoLights+0x52c>)
 8021f4e:	781a      	ldrb	r2, [r3, #0]
 8021f50:	4b66      	ldr	r3, [pc, #408]	@ (80220ec <DigitalCluster_DisplayInfoLights+0x528>)
 8021f52:	701a      	strb	r2, [r3, #0]
		FsmcH_DrawRectangle(displayType->DashboardLights.DashboardLightsBox.position_x,
 8021f54:	687b      	ldr	r3, [r7, #4]
 8021f56:	f8b3 0060 	ldrh.w	r0, [r3, #96]	@ 0x60
 8021f5a:	687b      	ldr	r3, [r7, #4]
 8021f5c:	f8b3 1062 	ldrh.w	r1, [r3, #98]	@ 0x62
 8021f60:	687b      	ldr	r3, [r7, #4]
 8021f62:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8021f66:	687b      	ldr	r3, [r7, #4]
 8021f68:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8021f6c:	2400      	movs	r4, #0
 8021f6e:	9400      	str	r4, [sp, #0]
 8021f70:	f004 f9be 	bl	80262f0 <FsmcH_DrawRectangle>
				displayType->DashboardLights.DashboardLightsBox.position_y,
				displayType->DashboardLights.DashboardLightsBox.width,
				displayType->DashboardLights.DashboardLightsBox.height,
				TFT_BLACK);

		switch(DigitalCluster_RxSig_Gear)
 8021f74:	4b5c      	ldr	r3, [pc, #368]	@ (80220e8 <DigitalCluster_DisplayInfoLights+0x524>)
 8021f76:	781b      	ldrb	r3, [r3, #0]
 8021f78:	2b03      	cmp	r3, #3
 8021f7a:	d83f      	bhi.n	8021ffc <DigitalCluster_DisplayInfoLights+0x438>
 8021f7c:	a201      	add	r2, pc, #4	@ (adr r2, 8021f84 <DigitalCluster_DisplayInfoLights+0x3c0>)
 8021f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021f82:	bf00      	nop
 8021f84:	08021f95 	.word	0x08021f95
 8021f88:	08021faf 	.word	0x08021faf
 8021f8c:	08021fc9 	.word	0x08021fc9
 8021f90:	08021fe3 	.word	0x08021fe3
		{
		case 0:
			FsmcH_DrawString(displayType->Gear.G_GselText.position_x,
 8021f94:	687b      	ldr	r3, [r7, #4]
 8021f96:	8f18      	ldrh	r0, [r3, #56]	@ 0x38
 8021f98:	687b      	ldr	r3, [r7, #4]
 8021f9a:	8f59      	ldrh	r1, [r3, #58]	@ 0x3a
 8021f9c:	687b      	ldr	r3, [r7, #4]
 8021f9e:	f8b3 311a 	ldrh.w	r3, [r3, #282]	@ 0x11a
 8021fa2:	2200      	movs	r2, #0
 8021fa4:	9200      	str	r2, [sp, #0]
 8021fa6:	4a53      	ldr	r2, [pc, #332]	@ (80220f4 <DigitalCluster_DisplayInfoLights+0x530>)
 8021fa8:	f004 fb04 	bl	80265b4 <FsmcH_DrawString>
					displayType->Gear.G_GselText.position_y,
					"P",
					displayType->DisplayColor,
					TFT_BLACK);
			break;
 8021fac:	e027      	b.n	8021ffe <DigitalCluster_DisplayInfoLights+0x43a>
		case 1:
			FsmcH_DrawString(displayType->Gear.G_GselText.position_x,
 8021fae:	687b      	ldr	r3, [r7, #4]
 8021fb0:	8f18      	ldrh	r0, [r3, #56]	@ 0x38
 8021fb2:	687b      	ldr	r3, [r7, #4]
 8021fb4:	8f59      	ldrh	r1, [r3, #58]	@ 0x3a
 8021fb6:	687b      	ldr	r3, [r7, #4]
 8021fb8:	f8b3 311a 	ldrh.w	r3, [r3, #282]	@ 0x11a
 8021fbc:	2200      	movs	r2, #0
 8021fbe:	9200      	str	r2, [sp, #0]
 8021fc0:	4a4d      	ldr	r2, [pc, #308]	@ (80220f8 <DigitalCluster_DisplayInfoLights+0x534>)
 8021fc2:	f004 faf7 	bl	80265b4 <FsmcH_DrawString>
					displayType->Gear.G_GselText.position_y,
					"N",
					displayType->DisplayColor,
					TFT_BLACK);
			break;
 8021fc6:	e01a      	b.n	8021ffe <DigitalCluster_DisplayInfoLights+0x43a>
		case 2:
			FsmcH_DrawString(displayType->Gear.G_GselText.position_x,
 8021fc8:	687b      	ldr	r3, [r7, #4]
 8021fca:	8f18      	ldrh	r0, [r3, #56]	@ 0x38
 8021fcc:	687b      	ldr	r3, [r7, #4]
 8021fce:	8f59      	ldrh	r1, [r3, #58]	@ 0x3a
 8021fd0:	687b      	ldr	r3, [r7, #4]
 8021fd2:	f8b3 311a 	ldrh.w	r3, [r3, #282]	@ 0x11a
 8021fd6:	2200      	movs	r2, #0
 8021fd8:	9200      	str	r2, [sp, #0]
 8021fda:	4a48      	ldr	r2, [pc, #288]	@ (80220fc <DigitalCluster_DisplayInfoLights+0x538>)
 8021fdc:	f004 faea 	bl	80265b4 <FsmcH_DrawString>
					displayType->Gear.G_GselText.position_y,
					"D",
					displayType->DisplayColor,
					TFT_BLACK);
			break;
 8021fe0:	e00d      	b.n	8021ffe <DigitalCluster_DisplayInfoLights+0x43a>
		case 3:
			FsmcH_DrawString(displayType->Gear.G_GselText.position_x,
 8021fe2:	687b      	ldr	r3, [r7, #4]
 8021fe4:	8f18      	ldrh	r0, [r3, #56]	@ 0x38
 8021fe6:	687b      	ldr	r3, [r7, #4]
 8021fe8:	8f59      	ldrh	r1, [r3, #58]	@ 0x3a
 8021fea:	687b      	ldr	r3, [r7, #4]
 8021fec:	f8b3 311a 	ldrh.w	r3, [r3, #282]	@ 0x11a
 8021ff0:	2200      	movs	r2, #0
 8021ff2:	9200      	str	r2, [sp, #0]
 8021ff4:	4a42      	ldr	r2, [pc, #264]	@ (8022100 <DigitalCluster_DisplayInfoLights+0x53c>)
 8021ff6:	f004 fadd 	bl	80265b4 <FsmcH_DrawString>
					displayType->Gear.G_GselText.position_y,
					"R",
					displayType->DisplayColor,
					TFT_BLACK);
			break;
 8021ffa:	e000      	b.n	8021ffe <DigitalCluster_DisplayInfoLights+0x43a>
		default:
			break;
 8021ffc:	bf00      	nop
	}
	else
	{
		/* Do nothing. */
	}
	if(DigitalCluster_RxSig_HighBeamStatus == 1 && hbPrevState == 0)
 8021ffe:	4b41      	ldr	r3, [pc, #260]	@ (8022104 <DigitalCluster_DisplayInfoLights+0x540>)
 8022000:	781b      	ldrb	r3, [r3, #0]
 8022002:	2b01      	cmp	r3, #1
 8022004:	d115      	bne.n	8022032 <DigitalCluster_DisplayInfoLights+0x46e>
 8022006:	4b40      	ldr	r3, [pc, #256]	@ (8022108 <DigitalCluster_DisplayInfoLights+0x544>)
 8022008:	781b      	ldrb	r3, [r3, #0]
 802200a:	2b00      	cmp	r3, #0
 802200c:	d111      	bne.n	8022032 <DigitalCluster_DisplayInfoLights+0x46e>
	{
		hbPrevState = DigitalCluster_RxSig_HighBeamStatus;
 802200e:	4b3d      	ldr	r3, [pc, #244]	@ (8022104 <DigitalCluster_DisplayInfoLights+0x540>)
 8022010:	781a      	ldrb	r2, [r3, #0]
 8022012:	4b3d      	ldr	r3, [pc, #244]	@ (8022108 <DigitalCluster_DisplayInfoLights+0x544>)
 8022014:	701a      	strb	r2, [r3, #0]
		FsmcH_DrawString(displayType->DashboardLights.DL_HB.position_x,
 8022016:	687b      	ldr	r3, [r7, #4]
 8022018:	f8b3 0068 	ldrh.w	r0, [r3, #104]	@ 0x68
 802201c:	687b      	ldr	r3, [r7, #4]
 802201e:	f8b3 106a 	ldrh.w	r1, [r3, #106]	@ 0x6a
 8022022:	687b      	ldr	r3, [r7, #4]
 8022024:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8022026:	2300      	movs	r3, #0
 8022028:	9300      	str	r3, [sp, #0]
 802202a:	231f      	movs	r3, #31
 802202c:	f004 fac2 	bl	80265b4 <FsmcH_DrawString>
 8022030:	e017      	b.n	8022062 <DigitalCluster_DisplayInfoLights+0x49e>
				displayType->DashboardLights.DL_HB.position_y,
				displayType->DashboardLights.DL_HB.text,
				TFT_BLUE,
				TFT_BLACK);
	}
	else if(DigitalCluster_RxSig_HighBeamStatus == 0 && hbPrevState == 1)
 8022032:	4b34      	ldr	r3, [pc, #208]	@ (8022104 <DigitalCluster_DisplayInfoLights+0x540>)
 8022034:	781b      	ldrb	r3, [r3, #0]
 8022036:	2b00      	cmp	r3, #0
 8022038:	d113      	bne.n	8022062 <DigitalCluster_DisplayInfoLights+0x49e>
 802203a:	4b33      	ldr	r3, [pc, #204]	@ (8022108 <DigitalCluster_DisplayInfoLights+0x544>)
 802203c:	781b      	ldrb	r3, [r3, #0]
 802203e:	2b01      	cmp	r3, #1
 8022040:	d10f      	bne.n	8022062 <DigitalCluster_DisplayInfoLights+0x49e>
	{
		hbPrevState = DigitalCluster_RxSig_HighBeamStatus;
 8022042:	4b30      	ldr	r3, [pc, #192]	@ (8022104 <DigitalCluster_DisplayInfoLights+0x540>)
 8022044:	781a      	ldrb	r2, [r3, #0]
 8022046:	4b30      	ldr	r3, [pc, #192]	@ (8022108 <DigitalCluster_DisplayInfoLights+0x544>)
 8022048:	701a      	strb	r2, [r3, #0]
		FsmcH_DrawString(displayType->DashboardLights.DL_HB.position_x,
 802204a:	687b      	ldr	r3, [r7, #4]
 802204c:	f8b3 0068 	ldrh.w	r0, [r3, #104]	@ 0x68
 8022050:	687b      	ldr	r3, [r7, #4]
 8022052:	f8b3 106a 	ldrh.w	r1, [r3, #106]	@ 0x6a
 8022056:	2300      	movs	r3, #0
 8022058:	9300      	str	r3, [sp, #0]
 802205a:	231f      	movs	r3, #31
 802205c:	4a2b      	ldr	r2, [pc, #172]	@ (802210c <DigitalCluster_DisplayInfoLights+0x548>)
 802205e:	f004 faa9 	bl	80265b4 <FsmcH_DrawString>
	}
	else
	{
		/* Do nothing. */
	}
	if(DigitalCluster_RxSig_PowerSteeringStatus == 1 && psPrevState == 0)
 8022062:	4b2b      	ldr	r3, [pc, #172]	@ (8022110 <DigitalCluster_DisplayInfoLights+0x54c>)
 8022064:	781b      	ldrb	r3, [r3, #0]
 8022066:	2b01      	cmp	r3, #1
 8022068:	d116      	bne.n	8022098 <DigitalCluster_DisplayInfoLights+0x4d4>
 802206a:	4b2a      	ldr	r3, [pc, #168]	@ (8022114 <DigitalCluster_DisplayInfoLights+0x550>)
 802206c:	781b      	ldrb	r3, [r3, #0]
 802206e:	2b00      	cmp	r3, #0
 8022070:	d112      	bne.n	8022098 <DigitalCluster_DisplayInfoLights+0x4d4>
	{
		psPrevState = DigitalCluster_RxSig_PowerSteeringStatus;
 8022072:	4b27      	ldr	r3, [pc, #156]	@ (8022110 <DigitalCluster_DisplayInfoLights+0x54c>)
 8022074:	781a      	ldrb	r2, [r3, #0]
 8022076:	4b27      	ldr	r3, [pc, #156]	@ (8022114 <DigitalCluster_DisplayInfoLights+0x550>)
 8022078:	701a      	strb	r2, [r3, #0]
		FsmcH_DrawString(displayType->DashboardLights.DL_PS.position_x,
 802207a:	687b      	ldr	r3, [r7, #4]
 802207c:	f8b3 0070 	ldrh.w	r0, [r3, #112]	@ 0x70
 8022080:	687b      	ldr	r3, [r7, #4]
 8022082:	f8b3 1072 	ldrh.w	r1, [r3, #114]	@ 0x72
 8022086:	687b      	ldr	r3, [r7, #4]
 8022088:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 802208a:	2300      	movs	r3, #0
 802208c:	9300      	str	r3, [sp, #0]
 802208e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8022092:	f004 fa8f 	bl	80265b4 <FsmcH_DrawString>
	}
	else
	{
		/* Do nothing. */
	}
}
 8022096:	e01c      	b.n	80220d2 <DigitalCluster_DisplayInfoLights+0x50e>
	else if(DigitalCluster_RxSig_PowerSteeringStatus == 0 && psPrevState == 1)
 8022098:	4b1d      	ldr	r3, [pc, #116]	@ (8022110 <DigitalCluster_DisplayInfoLights+0x54c>)
 802209a:	781b      	ldrb	r3, [r3, #0]
 802209c:	2b00      	cmp	r3, #0
 802209e:	d118      	bne.n	80220d2 <DigitalCluster_DisplayInfoLights+0x50e>
 80220a0:	4b1c      	ldr	r3, [pc, #112]	@ (8022114 <DigitalCluster_DisplayInfoLights+0x550>)
 80220a2:	781b      	ldrb	r3, [r3, #0]
 80220a4:	2b01      	cmp	r3, #1
 80220a6:	d114      	bne.n	80220d2 <DigitalCluster_DisplayInfoLights+0x50e>
		psPrevState = DigitalCluster_RxSig_PowerSteeringStatus;
 80220a8:	4b19      	ldr	r3, [pc, #100]	@ (8022110 <DigitalCluster_DisplayInfoLights+0x54c>)
 80220aa:	781a      	ldrb	r2, [r3, #0]
 80220ac:	4b19      	ldr	r3, [pc, #100]	@ (8022114 <DigitalCluster_DisplayInfoLights+0x550>)
 80220ae:	701a      	strb	r2, [r3, #0]
		psPrevState = DigitalCluster_RxSig_PowerSteeringStatus;
 80220b0:	4b17      	ldr	r3, [pc, #92]	@ (8022110 <DigitalCluster_DisplayInfoLights+0x54c>)
 80220b2:	781a      	ldrb	r2, [r3, #0]
 80220b4:	4b17      	ldr	r3, [pc, #92]	@ (8022114 <DigitalCluster_DisplayInfoLights+0x550>)
 80220b6:	701a      	strb	r2, [r3, #0]
		FsmcH_DrawString(displayType->DashboardLights.DL_PS.position_x,
 80220b8:	687b      	ldr	r3, [r7, #4]
 80220ba:	f8b3 0070 	ldrh.w	r0, [r3, #112]	@ 0x70
 80220be:	687b      	ldr	r3, [r7, #4]
 80220c0:	f8b3 1072 	ldrh.w	r1, [r3, #114]	@ 0x72
 80220c4:	2300      	movs	r3, #0
 80220c6:	9300      	str	r3, [sp, #0]
 80220c8:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80220cc:	4a0f      	ldr	r2, [pc, #60]	@ (802210c <DigitalCluster_DisplayInfoLights+0x548>)
 80220ce:	f004 fa71 	bl	80265b4 <FsmcH_DrawString>
}
 80220d2:	bf00      	nop
 80220d4:	370c      	adds	r7, #12
 80220d6:	46bd      	mov	sp, r7
 80220d8:	bd90      	pop	{r4, r7, pc}
 80220da:	bf00      	nop
 80220dc:	1000070f 	.word	0x1000070f
 80220e0:	08038000 	.word	0x08038000
 80220e4:	1000076f 	.word	0x1000076f
 80220e8:	10000704 	.word	0x10000704
 80220ec:	10000770 	.word	0x10000770
 80220f0:	1000070a 	.word	0x1000070a
 80220f4:	08038034 	.word	0x08038034
 80220f8:	08038038 	.word	0x08038038
 80220fc:	0803803c 	.word	0x0803803c
 8022100:	08038040 	.word	0x08038040
 8022104:	10000705 	.word	0x10000705
 8022108:	1000076c 	.word	0x1000076c
 802210c:	08038044 	.word	0x08038044
 8022110:	10000706 	.word	0x10000706
 8022114:	1000076d 	.word	0x1000076d

08022118 <DigitalCluster_DisplayCenterSpeedRpm>:
void DigitalCluster_DisplayCenterSpeedRpm(DigitalCluster_DisplayMode_t *displayType)
{
 8022118:	b590      	push	{r4, r7, lr}
 802211a:	b085      	sub	sp, #20
 802211c:	af02      	add	r7, sp, #8
 802211e:	6078      	str	r0, [r7, #4]
	if(pVehSpeed != DigitalCluster_RxSig_VehicleSpeed || localDM1 != DigitalCluster_RxSig_DisplayMode)
 8022120:	4b9d      	ldr	r3, [pc, #628]	@ (8022398 <DigitalCluster_DisplayCenterSpeedRpm+0x280>)
 8022122:	781b      	ldrb	r3, [r3, #0]
 8022124:	461a      	mov	r2, r3
 8022126:	4b9d      	ldr	r3, [pc, #628]	@ (802239c <DigitalCluster_DisplayCenterSpeedRpm+0x284>)
 8022128:	881b      	ldrh	r3, [r3, #0]
 802212a:	429a      	cmp	r2, r3
 802212c:	d106      	bne.n	802213c <DigitalCluster_DisplayCenterSpeedRpm+0x24>
 802212e:	4b9c      	ldr	r3, [pc, #624]	@ (80223a0 <DigitalCluster_DisplayCenterSpeedRpm+0x288>)
 8022130:	781a      	ldrb	r2, [r3, #0]
 8022132:	4b9c      	ldr	r3, [pc, #624]	@ (80223a4 <DigitalCluster_DisplayCenterSpeedRpm+0x28c>)
 8022134:	781b      	ldrb	r3, [r3, #0]
 8022136:	429a      	cmp	r2, r3
 8022138:	f000 80a5 	beq.w	8022286 <DigitalCluster_DisplayCenterSpeedRpm+0x16e>
	{
		localDM1 = DigitalCluster_RxSig_DisplayMode;
 802213c:	4b99      	ldr	r3, [pc, #612]	@ (80223a4 <DigitalCluster_DisplayCenterSpeedRpm+0x28c>)
 802213e:	781a      	ldrb	r2, [r3, #0]
 8022140:	4b97      	ldr	r3, [pc, #604]	@ (80223a0 <DigitalCluster_DisplayCenterSpeedRpm+0x288>)
 8022142:	701a      	strb	r2, [r3, #0]
		pVehSpeed = DigitalCluster_RxSig_VehicleSpeed;
 8022144:	4b94      	ldr	r3, [pc, #592]	@ (8022398 <DigitalCluster_DisplayCenterSpeedRpm+0x280>)
 8022146:	781b      	ldrb	r3, [r3, #0]
 8022148:	461a      	mov	r2, r3
 802214a:	4b94      	ldr	r3, [pc, #592]	@ (802239c <DigitalCluster_DisplayCenterSpeedRpm+0x284>)
 802214c:	801a      	strh	r2, [r3, #0]
		vehSpeedConv = DigitalCluster_RxSig_VehicleSpeed;
 802214e:	4b92      	ldr	r3, [pc, #584]	@ (8022398 <DigitalCluster_DisplayCenterSpeedRpm+0x280>)
 8022150:	781b      	ldrb	r3, [r3, #0]
 8022152:	461a      	mov	r2, r3
 8022154:	4b94      	ldr	r3, [pc, #592]	@ (80223a8 <DigitalCluster_DisplayCenterSpeedRpm+0x290>)
 8022156:	601a      	str	r2, [r3, #0]
		vehSpeedConv = vehSpeedConv * 330 / 255;
 8022158:	4b93      	ldr	r3, [pc, #588]	@ (80223a8 <DigitalCluster_DisplayCenterSpeedRpm+0x290>)
 802215a:	681b      	ldr	r3, [r3, #0]
 802215c:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8022160:	fb02 f303 	mul.w	r3, r2, r3
 8022164:	4a91      	ldr	r2, [pc, #580]	@ (80223ac <DigitalCluster_DisplayCenterSpeedRpm+0x294>)
 8022166:	fba2 2303 	umull	r2, r3, r2, r3
 802216a:	09db      	lsrs	r3, r3, #7
 802216c:	4a8e      	ldr	r2, [pc, #568]	@ (80223a8 <DigitalCluster_DisplayCenterSpeedRpm+0x290>)
 802216e:	6013      	str	r3, [r2, #0]

		if(10 > vehSpeedConv)
 8022170:	4b8d      	ldr	r3, [pc, #564]	@ (80223a8 <DigitalCluster_DisplayCenterSpeedRpm+0x290>)
 8022172:	681b      	ldr	r3, [r3, #0]
 8022174:	2b09      	cmp	r3, #9
 8022176:	d82b      	bhi.n	80221d0 <DigitalCluster_DisplayCenterSpeedRpm+0xb8>
		{
			FsmcH_FillRectangle(0,
 8022178:	687b      	ldr	r3, [r7, #4]
 802217a:	f8b3 10d2 	ldrh.w	r1, [r3, #210]	@ 0xd2
 802217e:	2300      	movs	r3, #0
 8022180:	9300      	str	r3, [sp, #0]
 8022182:	2314      	movs	r3, #20
 8022184:	2266      	movs	r2, #102	@ 0x66
 8022186:	2000      	movs	r0, #0
 8022188:	f004 fac8 	bl	802671c <FsmcH_FillRectangle>
					displayType->CenterScreenInformation.SL_KMH.position_y,
					102,
					20,
					TFT_BLACK);
			FsmcH_DrawString(displayType->CenterScreenInformation.SL_KMH.position_x,
 802218c:	687b      	ldr	r3, [r7, #4]
 802218e:	f8b3 00d0 	ldrh.w	r0, [r3, #208]	@ 0xd0
 8022192:	687b      	ldr	r3, [r7, #4]
 8022194:	f8b3 10d2 	ldrh.w	r1, [r3, #210]	@ 0xd2
 8022198:	687b      	ldr	r3, [r7, #4]
 802219a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 802219e:	687b      	ldr	r3, [r7, #4]
 80221a0:	f8b3 311a 	ldrh.w	r3, [r3, #282]	@ 0x11a
 80221a4:	2400      	movs	r4, #0
 80221a6:	9400      	str	r4, [sp, #0]
 80221a8:	f004 fa04 	bl	80265b4 <FsmcH_DrawString>
					displayType->CenterScreenInformation.SL_KMH.position_y,
					displayType->CenterScreenInformation.SL_KMH.text,
					displayType->DisplayColor,
					TFT_BLACK);
			FsmcH_DrawInteger(displayType->CenterScreenInformation.SL_KMH.position_x - 24,
 80221ac:	687b      	ldr	r3, [r7, #4]
 80221ae:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	@ 0xd0
 80221b2:	3b18      	subs	r3, #24
 80221b4:	b298      	uxth	r0, r3
 80221b6:	687b      	ldr	r3, [r7, #4]
 80221b8:	f8b3 10d2 	ldrh.w	r1, [r3, #210]	@ 0xd2
 80221bc:	4b7a      	ldr	r3, [pc, #488]	@ (80223a8 <DigitalCluster_DisplayCenterSpeedRpm+0x290>)
 80221be:	681a      	ldr	r2, [r3, #0]
 80221c0:	687b      	ldr	r3, [r7, #4]
 80221c2:	f8b3 311a 	ldrh.w	r3, [r3, #282]	@ 0x11a
 80221c6:	2400      	movs	r4, #0
 80221c8:	9400      	str	r4, [sp, #0]
 80221ca:	f004 fa19 	bl	8026600 <FsmcH_DrawInteger>
 80221ce:	e05a      	b.n	8022286 <DigitalCluster_DisplayCenterSpeedRpm+0x16e>
					displayType->CenterScreenInformation.SL_KMH.position_y,
					vehSpeedConv,
					displayType->DisplayColor,
					TFT_BLACK);
		}
		else if(100 > vehSpeedConv)
 80221d0:	4b75      	ldr	r3, [pc, #468]	@ (80223a8 <DigitalCluster_DisplayCenterSpeedRpm+0x290>)
 80221d2:	681b      	ldr	r3, [r3, #0]
 80221d4:	2b63      	cmp	r3, #99	@ 0x63
 80221d6:	d82b      	bhi.n	8022230 <DigitalCluster_DisplayCenterSpeedRpm+0x118>
		{
			FsmcH_FillRectangle(0,
 80221d8:	687b      	ldr	r3, [r7, #4]
 80221da:	f8b3 10d2 	ldrh.w	r1, [r3, #210]	@ 0xd2
 80221de:	2300      	movs	r3, #0
 80221e0:	9300      	str	r3, [sp, #0]
 80221e2:	2314      	movs	r3, #20
 80221e4:	2266      	movs	r2, #102	@ 0x66
 80221e6:	2000      	movs	r0, #0
 80221e8:	f004 fa98 	bl	802671c <FsmcH_FillRectangle>
					displayType->CenterScreenInformation.SL_KMH.position_y,
					102,
					20,
					TFT_BLACK);
			FsmcH_DrawString(displayType->CenterScreenInformation.SL_KMH.position_x,
 80221ec:	687b      	ldr	r3, [r7, #4]
 80221ee:	f8b3 00d0 	ldrh.w	r0, [r3, #208]	@ 0xd0
 80221f2:	687b      	ldr	r3, [r7, #4]
 80221f4:	f8b3 10d2 	ldrh.w	r1, [r3, #210]	@ 0xd2
 80221f8:	687b      	ldr	r3, [r7, #4]
 80221fa:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80221fe:	687b      	ldr	r3, [r7, #4]
 8022200:	f8b3 311a 	ldrh.w	r3, [r3, #282]	@ 0x11a
 8022204:	2400      	movs	r4, #0
 8022206:	9400      	str	r4, [sp, #0]
 8022208:	f004 f9d4 	bl	80265b4 <FsmcH_DrawString>
					displayType->CenterScreenInformation.SL_KMH.position_y,
					displayType->CenterScreenInformation.SL_KMH.text,
					displayType->DisplayColor,
					TFT_BLACK);
			FsmcH_DrawInteger(displayType->CenterScreenInformation.SL_KMH.position_x - 40,
 802220c:	687b      	ldr	r3, [r7, #4]
 802220e:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	@ 0xd0
 8022212:	3b28      	subs	r3, #40	@ 0x28
 8022214:	b298      	uxth	r0, r3
 8022216:	687b      	ldr	r3, [r7, #4]
 8022218:	f8b3 10d2 	ldrh.w	r1, [r3, #210]	@ 0xd2
 802221c:	4b62      	ldr	r3, [pc, #392]	@ (80223a8 <DigitalCluster_DisplayCenterSpeedRpm+0x290>)
 802221e:	681a      	ldr	r2, [r3, #0]
 8022220:	687b      	ldr	r3, [r7, #4]
 8022222:	f8b3 311a 	ldrh.w	r3, [r3, #282]	@ 0x11a
 8022226:	2400      	movs	r4, #0
 8022228:	9400      	str	r4, [sp, #0]
 802222a:	f004 f9e9 	bl	8026600 <FsmcH_DrawInteger>
 802222e:	e02a      	b.n	8022286 <DigitalCluster_DisplayCenterSpeedRpm+0x16e>
					displayType->DisplayColor,
					TFT_BLACK);
		}
		else
		{
			FsmcH_FillRectangle(0,
 8022230:	687b      	ldr	r3, [r7, #4]
 8022232:	f8b3 10d2 	ldrh.w	r1, [r3, #210]	@ 0xd2
 8022236:	2300      	movs	r3, #0
 8022238:	9300      	str	r3, [sp, #0]
 802223a:	2314      	movs	r3, #20
 802223c:	2266      	movs	r2, #102	@ 0x66
 802223e:	2000      	movs	r0, #0
 8022240:	f004 fa6c 	bl	802671c <FsmcH_FillRectangle>
					displayType->CenterScreenInformation.SL_KMH.position_y,
					102,
					20,
					TFT_BLACK);
			FsmcH_DrawString(displayType->CenterScreenInformation.SL_KMH.position_x,
 8022244:	687b      	ldr	r3, [r7, #4]
 8022246:	f8b3 00d0 	ldrh.w	r0, [r3, #208]	@ 0xd0
 802224a:	687b      	ldr	r3, [r7, #4]
 802224c:	f8b3 10d2 	ldrh.w	r1, [r3, #210]	@ 0xd2
 8022250:	687b      	ldr	r3, [r7, #4]
 8022252:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8022256:	687b      	ldr	r3, [r7, #4]
 8022258:	f8b3 311a 	ldrh.w	r3, [r3, #282]	@ 0x11a
 802225c:	2400      	movs	r4, #0
 802225e:	9400      	str	r4, [sp, #0]
 8022260:	f004 f9a8 	bl	80265b4 <FsmcH_DrawString>
					displayType->CenterScreenInformation.SL_KMH.position_y,
					displayType->CenterScreenInformation.SL_KMH.text,
					displayType->DisplayColor,
					TFT_BLACK);
			FsmcH_DrawInteger(displayType->CenterScreenInformation.SL_KMH.position_x - 60,
 8022264:	687b      	ldr	r3, [r7, #4]
 8022266:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	@ 0xd0
 802226a:	3b3c      	subs	r3, #60	@ 0x3c
 802226c:	b298      	uxth	r0, r3
 802226e:	687b      	ldr	r3, [r7, #4]
 8022270:	f8b3 10d2 	ldrh.w	r1, [r3, #210]	@ 0xd2
 8022274:	4b4c      	ldr	r3, [pc, #304]	@ (80223a8 <DigitalCluster_DisplayCenterSpeedRpm+0x290>)
 8022276:	681a      	ldr	r2, [r3, #0]
 8022278:	687b      	ldr	r3, [r7, #4]
 802227a:	f8b3 311a 	ldrh.w	r3, [r3, #282]	@ 0x11a
 802227e:	2400      	movs	r4, #0
 8022280:	9400      	str	r4, [sp, #0]
 8022282:	f004 f9bd 	bl	8026600 <FsmcH_DrawInteger>
	}
	else
	{
		/* Do nothing. */
	}
	if(pRpm != DigitalCluster_RxSig_MotorRpm || localDM2 != DigitalCluster_RxSig_DisplayMode)
 8022286:	4b4a      	ldr	r3, [pc, #296]	@ (80223b0 <DigitalCluster_DisplayCenterSpeedRpm+0x298>)
 8022288:	781b      	ldrb	r3, [r3, #0]
 802228a:	461a      	mov	r2, r3
 802228c:	4b49      	ldr	r3, [pc, #292]	@ (80223b4 <DigitalCluster_DisplayCenterSpeedRpm+0x29c>)
 802228e:	881b      	ldrh	r3, [r3, #0]
 8022290:	429a      	cmp	r2, r3
 8022292:	d106      	bne.n	80222a2 <DigitalCluster_DisplayCenterSpeedRpm+0x18a>
 8022294:	4b48      	ldr	r3, [pc, #288]	@ (80223b8 <DigitalCluster_DisplayCenterSpeedRpm+0x2a0>)
 8022296:	781a      	ldrb	r2, [r3, #0]
 8022298:	4b42      	ldr	r3, [pc, #264]	@ (80223a4 <DigitalCluster_DisplayCenterSpeedRpm+0x28c>)
 802229a:	781b      	ldrb	r3, [r3, #0]
 802229c:	429a      	cmp	r2, r3
 802229e:	f000 80eb 	beq.w	8022478 <DigitalCluster_DisplayCenterSpeedRpm+0x360>
	{
		pRpm = DigitalCluster_RxSig_MotorRpm;
 80222a2:	4b43      	ldr	r3, [pc, #268]	@ (80223b0 <DigitalCluster_DisplayCenterSpeedRpm+0x298>)
 80222a4:	781b      	ldrb	r3, [r3, #0]
 80222a6:	461a      	mov	r2, r3
 80222a8:	4b42      	ldr	r3, [pc, #264]	@ (80223b4 <DigitalCluster_DisplayCenterSpeedRpm+0x29c>)
 80222aa:	801a      	strh	r2, [r3, #0]
		rpmConv = DigitalCluster_RxSig_MotorRpm;
 80222ac:	4b40      	ldr	r3, [pc, #256]	@ (80223b0 <DigitalCluster_DisplayCenterSpeedRpm+0x298>)
 80222ae:	781b      	ldrb	r3, [r3, #0]
 80222b0:	461a      	mov	r2, r3
 80222b2:	4b42      	ldr	r3, [pc, #264]	@ (80223bc <DigitalCluster_DisplayCenterSpeedRpm+0x2a4>)
 80222b4:	601a      	str	r2, [r3, #0]
		rpmConv = rpmConv * 9999 / 255;
 80222b6:	4b41      	ldr	r3, [pc, #260]	@ (80223bc <DigitalCluster_DisplayCenterSpeedRpm+0x2a4>)
 80222b8:	681b      	ldr	r3, [r3, #0]
 80222ba:	f242 720f 	movw	r2, #9999	@ 0x270f
 80222be:	fb02 f303 	mul.w	r3, r2, r3
 80222c2:	4a3a      	ldr	r2, [pc, #232]	@ (80223ac <DigitalCluster_DisplayCenterSpeedRpm+0x294>)
 80222c4:	fba2 2303 	umull	r2, r3, r2, r3
 80222c8:	09db      	lsrs	r3, r3, #7
 80222ca:	4a3c      	ldr	r2, [pc, #240]	@ (80223bc <DigitalCluster_DisplayCenterSpeedRpm+0x2a4>)
 80222cc:	6013      	str	r3, [r2, #0]
		localDM2 = DigitalCluster_RxSig_DisplayMode;
 80222ce:	4b35      	ldr	r3, [pc, #212]	@ (80223a4 <DigitalCluster_DisplayCenterSpeedRpm+0x28c>)
 80222d0:	781a      	ldrb	r2, [r3, #0]
 80222d2:	4b39      	ldr	r3, [pc, #228]	@ (80223b8 <DigitalCluster_DisplayCenterSpeedRpm+0x2a0>)
 80222d4:	701a      	strb	r2, [r3, #0]
		if(10 > rpmConv)
 80222d6:	4b39      	ldr	r3, [pc, #228]	@ (80223bc <DigitalCluster_DisplayCenterSpeedRpm+0x2a4>)
 80222d8:	681b      	ldr	r3, [r3, #0]
 80222da:	2b09      	cmp	r3, #9
 80222dc:	d82b      	bhi.n	8022336 <DigitalCluster_DisplayCenterSpeedRpm+0x21e>
		{
			FsmcH_FillRectangle(190,
 80222de:	687b      	ldr	r3, [r7, #4]
 80222e0:	f8b3 10da 	ldrh.w	r1, [r3, #218]	@ 0xda
 80222e4:	2300      	movs	r3, #0
 80222e6:	9300      	str	r3, [sp, #0]
 80222e8:	2314      	movs	r3, #20
 80222ea:	22be      	movs	r2, #190	@ 0xbe
 80222ec:	20be      	movs	r0, #190	@ 0xbe
 80222ee:	f004 fa15 	bl	802671c <FsmcH_FillRectangle>
					displayType->CenterScreenInformation.SL_RPM.position_y,
					190,
					20,
					TFT_BLACK);
			FsmcH_DrawString(displayType->CenterScreenInformation.SL_RPM.position_x,
 80222f2:	687b      	ldr	r3, [r7, #4]
 80222f4:	f8b3 00d8 	ldrh.w	r0, [r3, #216]	@ 0xd8
 80222f8:	687b      	ldr	r3, [r7, #4]
 80222fa:	f8b3 10da 	ldrh.w	r1, [r3, #218]	@ 0xda
 80222fe:	687b      	ldr	r3, [r7, #4]
 8022300:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 8022304:	687b      	ldr	r3, [r7, #4]
 8022306:	f8b3 311a 	ldrh.w	r3, [r3, #282]	@ 0x11a
 802230a:	2400      	movs	r4, #0
 802230c:	9400      	str	r4, [sp, #0]
 802230e:	f004 f951 	bl	80265b4 <FsmcH_DrawString>
					displayType->CenterScreenInformation.SL_RPM.position_y,
					displayType->CenterScreenInformation.SL_RPM.text,
					displayType->DisplayColor,
					TFT_BLACK);
			FsmcH_DrawInteger(displayType->CenterScreenInformation.SL_RPM.position_x - 24,
 8022312:	687b      	ldr	r3, [r7, #4]
 8022314:	f8b3 30d8 	ldrh.w	r3, [r3, #216]	@ 0xd8
 8022318:	3b18      	subs	r3, #24
 802231a:	b298      	uxth	r0, r3
 802231c:	687b      	ldr	r3, [r7, #4]
 802231e:	f8b3 10da 	ldrh.w	r1, [r3, #218]	@ 0xda
 8022322:	4b26      	ldr	r3, [pc, #152]	@ (80223bc <DigitalCluster_DisplayCenterSpeedRpm+0x2a4>)
 8022324:	681a      	ldr	r2, [r3, #0]
 8022326:	687b      	ldr	r3, [r7, #4]
 8022328:	f8b3 311a 	ldrh.w	r3, [r3, #282]	@ 0x11a
 802232c:	2400      	movs	r4, #0
 802232e:	9400      	str	r4, [sp, #0]
 8022330:	f004 f966 	bl	8026600 <FsmcH_DrawInteger>
	}
	else
	{
		/* Do nothing. */
	}
}
 8022334:	e0a0      	b.n	8022478 <DigitalCluster_DisplayCenterSpeedRpm+0x360>
		else if(100 > rpmConv)
 8022336:	4b21      	ldr	r3, [pc, #132]	@ (80223bc <DigitalCluster_DisplayCenterSpeedRpm+0x2a4>)
 8022338:	681b      	ldr	r3, [r3, #0]
 802233a:	2b63      	cmp	r3, #99	@ 0x63
 802233c:	d840      	bhi.n	80223c0 <DigitalCluster_DisplayCenterSpeedRpm+0x2a8>
			FsmcH_FillRectangle(190,
 802233e:	687b      	ldr	r3, [r7, #4]
 8022340:	f8b3 10da 	ldrh.w	r1, [r3, #218]	@ 0xda
 8022344:	2300      	movs	r3, #0
 8022346:	9300      	str	r3, [sp, #0]
 8022348:	2314      	movs	r3, #20
 802234a:	22be      	movs	r2, #190	@ 0xbe
 802234c:	20be      	movs	r0, #190	@ 0xbe
 802234e:	f004 f9e5 	bl	802671c <FsmcH_FillRectangle>
			FsmcH_DrawString(displayType->CenterScreenInformation.SL_RPM.position_x,
 8022352:	687b      	ldr	r3, [r7, #4]
 8022354:	f8b3 00d8 	ldrh.w	r0, [r3, #216]	@ 0xd8
 8022358:	687b      	ldr	r3, [r7, #4]
 802235a:	f8b3 10da 	ldrh.w	r1, [r3, #218]	@ 0xda
 802235e:	687b      	ldr	r3, [r7, #4]
 8022360:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 8022364:	687b      	ldr	r3, [r7, #4]
 8022366:	f8b3 311a 	ldrh.w	r3, [r3, #282]	@ 0x11a
 802236a:	2400      	movs	r4, #0
 802236c:	9400      	str	r4, [sp, #0]
 802236e:	f004 f921 	bl	80265b4 <FsmcH_DrawString>
			FsmcH_DrawInteger(displayType->CenterScreenInformation.SL_RPM.position_x - 40,
 8022372:	687b      	ldr	r3, [r7, #4]
 8022374:	f8b3 30d8 	ldrh.w	r3, [r3, #216]	@ 0xd8
 8022378:	3b28      	subs	r3, #40	@ 0x28
 802237a:	b298      	uxth	r0, r3
 802237c:	687b      	ldr	r3, [r7, #4]
 802237e:	f8b3 10da 	ldrh.w	r1, [r3, #218]	@ 0xda
 8022382:	4b0e      	ldr	r3, [pc, #56]	@ (80223bc <DigitalCluster_DisplayCenterSpeedRpm+0x2a4>)
 8022384:	681a      	ldr	r2, [r3, #0]
 8022386:	687b      	ldr	r3, [r7, #4]
 8022388:	f8b3 311a 	ldrh.w	r3, [r3, #282]	@ 0x11a
 802238c:	2400      	movs	r4, #0
 802238e:	9400      	str	r4, [sp, #0]
 8022390:	f004 f936 	bl	8026600 <FsmcH_DrawInteger>
}
 8022394:	e070      	b.n	8022478 <DigitalCluster_DisplayCenterSpeedRpm+0x360>
 8022396:	bf00      	nop
 8022398:	10000707 	.word	0x10000707
 802239c:	10000772 	.word	0x10000772
 80223a0:	10000788 	.word	0x10000788
 80223a4:	1000070a 	.word	0x1000070a
 80223a8:	10000780 	.word	0x10000780
 80223ac:	80808081 	.word	0x80808081
 80223b0:	10000708 	.word	0x10000708
 80223b4:	10000774 	.word	0x10000774
 80223b8:	10000789 	.word	0x10000789
 80223bc:	10000784 	.word	0x10000784
		else if(1000 > rpmConv)
 80223c0:	4b2f      	ldr	r3, [pc, #188]	@ (8022480 <DigitalCluster_DisplayCenterSpeedRpm+0x368>)
 80223c2:	681b      	ldr	r3, [r3, #0]
 80223c4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80223c8:	d22b      	bcs.n	8022422 <DigitalCluster_DisplayCenterSpeedRpm+0x30a>
			FsmcH_FillRectangle(190,
 80223ca:	687b      	ldr	r3, [r7, #4]
 80223cc:	f8b3 10da 	ldrh.w	r1, [r3, #218]	@ 0xda
 80223d0:	2300      	movs	r3, #0
 80223d2:	9300      	str	r3, [sp, #0]
 80223d4:	2314      	movs	r3, #20
 80223d6:	22be      	movs	r2, #190	@ 0xbe
 80223d8:	20be      	movs	r0, #190	@ 0xbe
 80223da:	f004 f99f 	bl	802671c <FsmcH_FillRectangle>
			FsmcH_DrawString(displayType->CenterScreenInformation.SL_RPM.position_x,
 80223de:	687b      	ldr	r3, [r7, #4]
 80223e0:	f8b3 00d8 	ldrh.w	r0, [r3, #216]	@ 0xd8
 80223e4:	687b      	ldr	r3, [r7, #4]
 80223e6:	f8b3 10da 	ldrh.w	r1, [r3, #218]	@ 0xda
 80223ea:	687b      	ldr	r3, [r7, #4]
 80223ec:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 80223f0:	687b      	ldr	r3, [r7, #4]
 80223f2:	f8b3 311a 	ldrh.w	r3, [r3, #282]	@ 0x11a
 80223f6:	2400      	movs	r4, #0
 80223f8:	9400      	str	r4, [sp, #0]
 80223fa:	f004 f8db 	bl	80265b4 <FsmcH_DrawString>
			FsmcH_DrawInteger(displayType->CenterScreenInformation.SL_RPM.position_x - 60,
 80223fe:	687b      	ldr	r3, [r7, #4]
 8022400:	f8b3 30d8 	ldrh.w	r3, [r3, #216]	@ 0xd8
 8022404:	3b3c      	subs	r3, #60	@ 0x3c
 8022406:	b298      	uxth	r0, r3
 8022408:	687b      	ldr	r3, [r7, #4]
 802240a:	f8b3 10da 	ldrh.w	r1, [r3, #218]	@ 0xda
 802240e:	4b1c      	ldr	r3, [pc, #112]	@ (8022480 <DigitalCluster_DisplayCenterSpeedRpm+0x368>)
 8022410:	681a      	ldr	r2, [r3, #0]
 8022412:	687b      	ldr	r3, [r7, #4]
 8022414:	f8b3 311a 	ldrh.w	r3, [r3, #282]	@ 0x11a
 8022418:	2400      	movs	r4, #0
 802241a:	9400      	str	r4, [sp, #0]
 802241c:	f004 f8f0 	bl	8026600 <FsmcH_DrawInteger>
}
 8022420:	e02a      	b.n	8022478 <DigitalCluster_DisplayCenterSpeedRpm+0x360>
			FsmcH_FillRectangle(190,
 8022422:	687b      	ldr	r3, [r7, #4]
 8022424:	f8b3 10da 	ldrh.w	r1, [r3, #218]	@ 0xda
 8022428:	2300      	movs	r3, #0
 802242a:	9300      	str	r3, [sp, #0]
 802242c:	2314      	movs	r3, #20
 802242e:	22be      	movs	r2, #190	@ 0xbe
 8022430:	20be      	movs	r0, #190	@ 0xbe
 8022432:	f004 f973 	bl	802671c <FsmcH_FillRectangle>
			FsmcH_DrawString(displayType->CenterScreenInformation.SL_RPM.position_x,
 8022436:	687b      	ldr	r3, [r7, #4]
 8022438:	f8b3 00d8 	ldrh.w	r0, [r3, #216]	@ 0xd8
 802243c:	687b      	ldr	r3, [r7, #4]
 802243e:	f8b3 10da 	ldrh.w	r1, [r3, #218]	@ 0xda
 8022442:	687b      	ldr	r3, [r7, #4]
 8022444:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 8022448:	687b      	ldr	r3, [r7, #4]
 802244a:	f8b3 311a 	ldrh.w	r3, [r3, #282]	@ 0x11a
 802244e:	2400      	movs	r4, #0
 8022450:	9400      	str	r4, [sp, #0]
 8022452:	f004 f8af 	bl	80265b4 <FsmcH_DrawString>
			FsmcH_DrawInteger(displayType->CenterScreenInformation.SL_RPM.position_x - 77,
 8022456:	687b      	ldr	r3, [r7, #4]
 8022458:	f8b3 30d8 	ldrh.w	r3, [r3, #216]	@ 0xd8
 802245c:	3b4d      	subs	r3, #77	@ 0x4d
 802245e:	b298      	uxth	r0, r3
 8022460:	687b      	ldr	r3, [r7, #4]
 8022462:	f8b3 10da 	ldrh.w	r1, [r3, #218]	@ 0xda
 8022466:	4b06      	ldr	r3, [pc, #24]	@ (8022480 <DigitalCluster_DisplayCenterSpeedRpm+0x368>)
 8022468:	681a      	ldr	r2, [r3, #0]
 802246a:	687b      	ldr	r3, [r7, #4]
 802246c:	f8b3 311a 	ldrh.w	r3, [r3, #282]	@ 0x11a
 8022470:	2400      	movs	r4, #0
 8022472:	9400      	str	r4, [sp, #0]
 8022474:	f004 f8c4 	bl	8026600 <FsmcH_DrawInteger>
}
 8022478:	bf00      	nop
 802247a:	370c      	adds	r7, #12
 802247c:	46bd      	mov	sp, r7
 802247e:	bd90      	pop	{r4, r7, pc}
 8022480:	10000784 	.word	0x10000784

08022484 <DigitalCluster_DisplaySideSpeedRpm>:
void DigitalCluster_DisplaySideSpeedRpm(DigitalCluster_DisplayMode_t *displayType)
{
 8022484:	b590      	push	{r4, r7, lr}
 8022486:	b085      	sub	sp, #20
 8022488:	af02      	add	r7, sp, #8
 802248a:	6078      	str	r0, [r7, #4]
	speedBarHeight = (DigitalCluster_RxSig_VehicleSpeed * maxBarHeight) / 255;
 802248c:	4b5e      	ldr	r3, [pc, #376]	@ (8022608 <DigitalCluster_DisplaySideSpeedRpm+0x184>)
 802248e:	781b      	ldrb	r3, [r3, #0]
 8022490:	461a      	mov	r2, r3
 8022492:	4b5e      	ldr	r3, [pc, #376]	@ (802260c <DigitalCluster_DisplaySideSpeedRpm+0x188>)
 8022494:	881b      	ldrh	r3, [r3, #0]
 8022496:	fb02 f303 	mul.w	r3, r2, r3
 802249a:	4a5d      	ldr	r2, [pc, #372]	@ (8022610 <DigitalCluster_DisplaySideSpeedRpm+0x18c>)
 802249c:	fb82 1203 	smull	r1, r2, r2, r3
 80224a0:	441a      	add	r2, r3
 80224a2:	11d2      	asrs	r2, r2, #7
 80224a4:	17db      	asrs	r3, r3, #31
 80224a6:	1ad3      	subs	r3, r2, r3
 80224a8:	b29a      	uxth	r2, r3
 80224aa:	4b5a      	ldr	r3, [pc, #360]	@ (8022614 <DigitalCluster_DisplaySideSpeedRpm+0x190>)
 80224ac:	801a      	strh	r2, [r3, #0]
	rpmBarHeight = (DigitalCluster_RxSig_MotorRpm * maxBarHeight) / 255;
 80224ae:	4b5a      	ldr	r3, [pc, #360]	@ (8022618 <DigitalCluster_DisplaySideSpeedRpm+0x194>)
 80224b0:	781b      	ldrb	r3, [r3, #0]
 80224b2:	461a      	mov	r2, r3
 80224b4:	4b55      	ldr	r3, [pc, #340]	@ (802260c <DigitalCluster_DisplaySideSpeedRpm+0x188>)
 80224b6:	881b      	ldrh	r3, [r3, #0]
 80224b8:	fb02 f303 	mul.w	r3, r2, r3
 80224bc:	4a54      	ldr	r2, [pc, #336]	@ (8022610 <DigitalCluster_DisplaySideSpeedRpm+0x18c>)
 80224be:	fb82 1203 	smull	r1, r2, r2, r3
 80224c2:	441a      	add	r2, r3
 80224c4:	11d2      	asrs	r2, r2, #7
 80224c6:	17db      	asrs	r3, r3, #31
 80224c8:	1ad3      	subs	r3, r2, r3
 80224ca:	b29a      	uxth	r2, r3
 80224cc:	4b53      	ldr	r3, [pc, #332]	@ (802261c <DigitalCluster_DisplaySideSpeedRpm+0x198>)
 80224ce:	801a      	strh	r2, [r3, #0]
	if (pSpeedBarHeight != speedBarHeight || localDM3 != DigitalCluster_RxSig_DisplayMode)
 80224d0:	4b53      	ldr	r3, [pc, #332]	@ (8022620 <DigitalCluster_DisplaySideSpeedRpm+0x19c>)
 80224d2:	881a      	ldrh	r2, [r3, #0]
 80224d4:	4b4f      	ldr	r3, [pc, #316]	@ (8022614 <DigitalCluster_DisplaySideSpeedRpm+0x190>)
 80224d6:	881b      	ldrh	r3, [r3, #0]
 80224d8:	429a      	cmp	r2, r3
 80224da:	d105      	bne.n	80224e8 <DigitalCluster_DisplaySideSpeedRpm+0x64>
 80224dc:	4b51      	ldr	r3, [pc, #324]	@ (8022624 <DigitalCluster_DisplaySideSpeedRpm+0x1a0>)
 80224de:	781a      	ldrb	r2, [r3, #0]
 80224e0:	4b51      	ldr	r3, [pc, #324]	@ (8022628 <DigitalCluster_DisplaySideSpeedRpm+0x1a4>)
 80224e2:	781b      	ldrb	r3, [r3, #0]
 80224e4:	429a      	cmp	r2, r3
 80224e6:	d03f      	beq.n	8022568 <DigitalCluster_DisplaySideSpeedRpm+0xe4>
	{
		localDM3 = DigitalCluster_RxSig_DisplayMode;
 80224e8:	4b4f      	ldr	r3, [pc, #316]	@ (8022628 <DigitalCluster_DisplaySideSpeedRpm+0x1a4>)
 80224ea:	781a      	ldrb	r2, [r3, #0]
 80224ec:	4b4d      	ldr	r3, [pc, #308]	@ (8022624 <DigitalCluster_DisplaySideSpeedRpm+0x1a0>)
 80224ee:	701a      	strb	r2, [r3, #0]
		pSpeedBarHeight = speedBarHeight;
 80224f0:	4b48      	ldr	r3, [pc, #288]	@ (8022614 <DigitalCluster_DisplaySideSpeedRpm+0x190>)
 80224f2:	881a      	ldrh	r2, [r3, #0]
 80224f4:	4b4a      	ldr	r3, [pc, #296]	@ (8022620 <DigitalCluster_DisplaySideSpeedRpm+0x19c>)
 80224f6:	801a      	strh	r2, [r3, #0]
		FsmcH_FillRectangle(displayType->SpeedBar.SpeedQuarter.position_x1,
 80224f8:	687b      	ldr	r3, [r7, #4]
 80224fa:	f8b3 00e0 	ldrh.w	r0, [r3, #224]	@ 0xe0
				displayType->SpeedBar.SpeedQuarter.position_y2 - maxBarHeight,
 80224fe:	687b      	ldr	r3, [r7, #4]
 8022500:	f8b3 20e6 	ldrh.w	r2, [r3, #230]	@ 0xe6
		FsmcH_FillRectangle(displayType->SpeedBar.SpeedQuarter.position_x1,
 8022504:	4b41      	ldr	r3, [pc, #260]	@ (802260c <DigitalCluster_DisplaySideSpeedRpm+0x188>)
 8022506:	881b      	ldrh	r3, [r3, #0]
 8022508:	1ad3      	subs	r3, r2, r3
 802250a:	b299      	uxth	r1, r3
				displayType->SpeedBar.SpeedQuarter.position_x2 - displayType->SpeedBar.SpeedQuarter.position_x1,
 802250c:	687b      	ldr	r3, [r7, #4]
 802250e:	f8b3 20e4 	ldrh.w	r2, [r3, #228]	@ 0xe4
 8022512:	687b      	ldr	r3, [r7, #4]
 8022514:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	@ 0xe0
		FsmcH_FillRectangle(displayType->SpeedBar.SpeedQuarter.position_x1,
 8022518:	1ad3      	subs	r3, r2, r3
 802251a:	b29c      	uxth	r4, r3
 802251c:	4b3b      	ldr	r3, [pc, #236]	@ (802260c <DigitalCluster_DisplaySideSpeedRpm+0x188>)
 802251e:	881a      	ldrh	r2, [r3, #0]
 8022520:	4b3c      	ldr	r3, [pc, #240]	@ (8022614 <DigitalCluster_DisplaySideSpeedRpm+0x190>)
 8022522:	881b      	ldrh	r3, [r3, #0]
 8022524:	1ad3      	subs	r3, r2, r3
 8022526:	b29b      	uxth	r3, r3
 8022528:	2200      	movs	r2, #0
 802252a:	9200      	str	r2, [sp, #0]
 802252c:	4622      	mov	r2, r4
 802252e:	f004 f8f5 	bl	802671c <FsmcH_FillRectangle>
				maxBarHeight - speedBarHeight,
				TFT_BLACK);
		FsmcH_FillRectangle(displayType->SpeedBar.SpeedQuarter.position_x1,
 8022532:	687b      	ldr	r3, [r7, #4]
 8022534:	f8b3 00e0 	ldrh.w	r0, [r3, #224]	@ 0xe0
				displayType->SpeedBar.SpeedQuarter.position_y2 - speedBarHeight,
 8022538:	687b      	ldr	r3, [r7, #4]
 802253a:	f8b3 20e6 	ldrh.w	r2, [r3, #230]	@ 0xe6
		FsmcH_FillRectangle(displayType->SpeedBar.SpeedQuarter.position_x1,
 802253e:	4b35      	ldr	r3, [pc, #212]	@ (8022614 <DigitalCluster_DisplaySideSpeedRpm+0x190>)
 8022540:	881b      	ldrh	r3, [r3, #0]
 8022542:	1ad3      	subs	r3, r2, r3
 8022544:	b299      	uxth	r1, r3
				displayType->SpeedBar.SpeedQuarter.position_x2 - displayType->SpeedBar.SpeedQuarter.position_x1,
 8022546:	687b      	ldr	r3, [r7, #4]
 8022548:	f8b3 20e4 	ldrh.w	r2, [r3, #228]	@ 0xe4
 802254c:	687b      	ldr	r3, [r7, #4]
 802254e:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	@ 0xe0
		FsmcH_FillRectangle(displayType->SpeedBar.SpeedQuarter.position_x1,
 8022552:	1ad3      	subs	r3, r2, r3
 8022554:	b29a      	uxth	r2, r3
 8022556:	4b2f      	ldr	r3, [pc, #188]	@ (8022614 <DigitalCluster_DisplaySideSpeedRpm+0x190>)
 8022558:	881c      	ldrh	r4, [r3, #0]
 802255a:	687b      	ldr	r3, [r7, #4]
 802255c:	f8b3 311e 	ldrh.w	r3, [r3, #286]	@ 0x11e
 8022560:	9300      	str	r3, [sp, #0]
 8022562:	4623      	mov	r3, r4
 8022564:	f004 f8da 	bl	802671c <FsmcH_FillRectangle>
	}
	else
	{
		/* Do nothing. */
	}
	if (pRpmBarHeight != rpmBarHeight || localDM4 != DigitalCluster_RxSig_DisplayMode)
 8022568:	4b30      	ldr	r3, [pc, #192]	@ (802262c <DigitalCluster_DisplaySideSpeedRpm+0x1a8>)
 802256a:	881a      	ldrh	r2, [r3, #0]
 802256c:	4b2b      	ldr	r3, [pc, #172]	@ (802261c <DigitalCluster_DisplaySideSpeedRpm+0x198>)
 802256e:	881b      	ldrh	r3, [r3, #0]
 8022570:	429a      	cmp	r2, r3
 8022572:	d105      	bne.n	8022580 <DigitalCluster_DisplaySideSpeedRpm+0xfc>
 8022574:	4b2e      	ldr	r3, [pc, #184]	@ (8022630 <DigitalCluster_DisplaySideSpeedRpm+0x1ac>)
 8022576:	781a      	ldrb	r2, [r3, #0]
 8022578:	4b2b      	ldr	r3, [pc, #172]	@ (8022628 <DigitalCluster_DisplaySideSpeedRpm+0x1a4>)
 802257a:	781b      	ldrb	r3, [r3, #0]
 802257c:	429a      	cmp	r2, r3
 802257e:	d03f      	beq.n	8022600 <DigitalCluster_DisplaySideSpeedRpm+0x17c>
	{
		localDM4 = DigitalCluster_RxSig_DisplayMode;
 8022580:	4b29      	ldr	r3, [pc, #164]	@ (8022628 <DigitalCluster_DisplaySideSpeedRpm+0x1a4>)
 8022582:	781a      	ldrb	r2, [r3, #0]
 8022584:	4b2a      	ldr	r3, [pc, #168]	@ (8022630 <DigitalCluster_DisplaySideSpeedRpm+0x1ac>)
 8022586:	701a      	strb	r2, [r3, #0]
		pRpmBarHeight = rpmBarHeight;
 8022588:	4b24      	ldr	r3, [pc, #144]	@ (802261c <DigitalCluster_DisplaySideSpeedRpm+0x198>)
 802258a:	881a      	ldrh	r2, [r3, #0]
 802258c:	4b27      	ldr	r3, [pc, #156]	@ (802262c <DigitalCluster_DisplaySideSpeedRpm+0x1a8>)
 802258e:	801a      	strh	r2, [r3, #0]
		FsmcH_FillRectangle(displayType->RpmBar.RpmQuarter.position_x1,
 8022590:	687b      	ldr	r3, [r7, #4]
 8022592:	f8b3 00e8 	ldrh.w	r0, [r3, #232]	@ 0xe8
				displayType->RpmBar.RpmQuarter.position_y2 - maxBarHeight,
 8022596:	687b      	ldr	r3, [r7, #4]
 8022598:	f8b3 20ee 	ldrh.w	r2, [r3, #238]	@ 0xee
		FsmcH_FillRectangle(displayType->RpmBar.RpmQuarter.position_x1,
 802259c:	4b1b      	ldr	r3, [pc, #108]	@ (802260c <DigitalCluster_DisplaySideSpeedRpm+0x188>)
 802259e:	881b      	ldrh	r3, [r3, #0]
 80225a0:	1ad3      	subs	r3, r2, r3
 80225a2:	b299      	uxth	r1, r3
				displayType->RpmBar.RpmQuarter.position_x2 - displayType->RpmBar.RpmQuarter.position_x1,
 80225a4:	687b      	ldr	r3, [r7, #4]
 80225a6:	f8b3 20ec 	ldrh.w	r2, [r3, #236]	@ 0xec
 80225aa:	687b      	ldr	r3, [r7, #4]
 80225ac:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	@ 0xe8
		FsmcH_FillRectangle(displayType->RpmBar.RpmQuarter.position_x1,
 80225b0:	1ad3      	subs	r3, r2, r3
 80225b2:	b29c      	uxth	r4, r3
 80225b4:	4b15      	ldr	r3, [pc, #84]	@ (802260c <DigitalCluster_DisplaySideSpeedRpm+0x188>)
 80225b6:	881a      	ldrh	r2, [r3, #0]
 80225b8:	4b18      	ldr	r3, [pc, #96]	@ (802261c <DigitalCluster_DisplaySideSpeedRpm+0x198>)
 80225ba:	881b      	ldrh	r3, [r3, #0]
 80225bc:	1ad3      	subs	r3, r2, r3
 80225be:	b29b      	uxth	r3, r3
 80225c0:	2200      	movs	r2, #0
 80225c2:	9200      	str	r2, [sp, #0]
 80225c4:	4622      	mov	r2, r4
 80225c6:	f004 f8a9 	bl	802671c <FsmcH_FillRectangle>
				maxBarHeight - rpmBarHeight,
				TFT_BLACK);
		FsmcH_FillRectangle(displayType->RpmBar.RpmQuarter.position_x1,
 80225ca:	687b      	ldr	r3, [r7, #4]
 80225cc:	f8b3 00e8 	ldrh.w	r0, [r3, #232]	@ 0xe8
				displayType->RpmBar.RpmQuarter.position_y2 - rpmBarHeight,
 80225d0:	687b      	ldr	r3, [r7, #4]
 80225d2:	f8b3 20ee 	ldrh.w	r2, [r3, #238]	@ 0xee
		FsmcH_FillRectangle(displayType->RpmBar.RpmQuarter.position_x1,
 80225d6:	4b11      	ldr	r3, [pc, #68]	@ (802261c <DigitalCluster_DisplaySideSpeedRpm+0x198>)
 80225d8:	881b      	ldrh	r3, [r3, #0]
 80225da:	1ad3      	subs	r3, r2, r3
 80225dc:	b299      	uxth	r1, r3
				displayType->RpmBar.RpmQuarter.position_x2 - displayType->RpmBar.RpmQuarter.position_x1,
 80225de:	687b      	ldr	r3, [r7, #4]
 80225e0:	f8b3 20ec 	ldrh.w	r2, [r3, #236]	@ 0xec
 80225e4:	687b      	ldr	r3, [r7, #4]
 80225e6:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	@ 0xe8
		FsmcH_FillRectangle(displayType->RpmBar.RpmQuarter.position_x1,
 80225ea:	1ad3      	subs	r3, r2, r3
 80225ec:	b29a      	uxth	r2, r3
 80225ee:	4b0b      	ldr	r3, [pc, #44]	@ (802261c <DigitalCluster_DisplaySideSpeedRpm+0x198>)
 80225f0:	881c      	ldrh	r4, [r3, #0]
 80225f2:	687b      	ldr	r3, [r7, #4]
 80225f4:	f8b3 311c 	ldrh.w	r3, [r3, #284]	@ 0x11c
 80225f8:	9300      	str	r3, [sp, #0]
 80225fa:	4623      	mov	r3, r4
 80225fc:	f004 f88e 	bl	802671c <FsmcH_FillRectangle>
	}
	else
	{
		/* Do nothing. */
	}
}
 8022600:	bf00      	nop
 8022602:	370c      	adds	r7, #12
 8022604:	46bd      	mov	sp, r7
 8022606:	bd90      	pop	{r4, r7, pc}
 8022608:	10000707 	.word	0x10000707
 802260c:	10000768 	.word	0x10000768
 8022610:	80808081 	.word	0x80808081
 8022614:	10000760 	.word	0x10000760
 8022618:	10000708 	.word	0x10000708
 802261c:	10000762 	.word	0x10000762
 8022620:	10000764 	.word	0x10000764
 8022624:	1000078a 	.word	0x1000078a
 8022628:	1000070a 	.word	0x1000070a
 802262c:	10000766 	.word	0x10000766
 8022630:	1000078b 	.word	0x1000078b

08022634 <DigitalCluster_CSEHandler>:
void DigitalCluster_CSEHandler(void)
{
 8022634:	b580      	push	{r7, lr}
 8022636:	af00      	add	r7, sp, #0
	/* Display collision warning. */
	DigitalCluster_HandleCollisionWarning(&DigitalCluster_Display_ComfortEcoSport);
 8022638:	4810      	ldr	r0, [pc, #64]	@ (802267c <DigitalCluster_CSEHandler+0x48>)
 802263a:	f7ff fa15 	bl	8021a68 <DigitalCluster_HandleCollisionWarning>
	/* Display info-cluster warnings. */
	DigitalCluster_DisplayCheckControl(&DigitalCluster_Display_ComfortEcoSport);
 802263e:	480f      	ldr	r0, [pc, #60]	@ (802267c <DigitalCluster_CSEHandler+0x48>)
 8022640:	f7ff f8a0 	bl	8021784 <DigitalCluster_DisplayCheckControl>
	/* Display speed and RPM values. */
	DigitalCluster_DisplayCenterSpeedRpm(&DigitalCluster_Display_ComfortEcoSport);
 8022644:	480d      	ldr	r0, [pc, #52]	@ (802267c <DigitalCluster_CSEHandler+0x48>)
 8022646:	f7ff fd67 	bl	8022118 <DigitalCluster_DisplayCenterSpeedRpm>
	/* Display fill-bars for speed and RPM values. */
	DigitalCluster_DisplaySideSpeedRpm(&DigitalCluster_Display_ComfortEcoSport);
 802264a:	480c      	ldr	r0, [pc, #48]	@ (802267c <DigitalCluster_CSEHandler+0x48>)
 802264c:	f7ff ff1a 	bl	8022484 <DigitalCluster_DisplaySideSpeedRpm>
	 * high beam
	 * RLS
	 * fog lights
	 * requested temperature
	 * fan value */
	DigitalCluster_DisplayInfoLights(&DigitalCluster_Display_ComfortEcoSport);
 8022650:	480a      	ldr	r0, [pc, #40]	@ (802267c <DigitalCluster_CSEHandler+0x48>)
 8022652:	f7ff fab7 	bl	8021bc4 <DigitalCluster_DisplayInfoLights>
	/* Display turn signals and hazard lights. */
	DigitalCluster_HandleTurnSignal(&DigitalCluster_Display_ComfortEcoSport);
 8022656:	4809      	ldr	r0, [pc, #36]	@ (802267c <DigitalCluster_CSEHandler+0x48>)
 8022658:	f7ff f926 	bl	80218a8 <DigitalCluster_HandleTurnSignal>
	/* Display time with RTC. */
	DigitalCluster_CalculateTime(&DigitalCluster_Display_ComfortEcoSport);
 802265c:	4807      	ldr	r0, [pc, #28]	@ (802267c <DigitalCluster_CSEHandler+0x48>)
 802265e:	f7fe ffb9 	bl	80215d4 <DigitalCluster_CalculateTime>
	/* Display total KM and DCY KM. */
	DigitalCluster_DisplayKMTotalDcy(&DigitalCluster_Display_ComfortEcoSport);
 8022662:	4806      	ldr	r0, [pc, #24]	@ (802267c <DigitalCluster_CSEHandler+0x48>)
 8022664:	f7fe fda0 	bl	80211a8 <DigitalCluster_DisplayKMTotalDcy>
	/* Buzzer will beep on CAW or on ICM. */
	HAL_GPIO_WritePin(BUZOUT_GPIO_Port, BUZOUT_Pin, DigitalCluster_BuzzerState);
 8022668:	4b05      	ldr	r3, [pc, #20]	@ (8022680 <DigitalCluster_CSEHandler+0x4c>)
 802266a:	781b      	ldrb	r3, [r3, #0]
 802266c:	461a      	mov	r2, r3
 802266e:	2101      	movs	r1, #1
 8022670:	4804      	ldr	r0, [pc, #16]	@ (8022684 <DigitalCluster_CSEHandler+0x50>)
 8022672:	f00b fe69 	bl	802e348 <HAL_GPIO_WritePin>
}
 8022676:	bf00      	nop
 8022678:	bd80      	pop	{r7, pc}
 802267a:	bf00      	nop
 802267c:	100005dc 	.word	0x100005dc
 8022680:	10000738 	.word	0x10000738
 8022684:	40020800 	.word	0x40020800

08022688 <DigitalCluster_ShutOffDisplay>:
void DigitalCluster_ShutOffDisplay(void)
{
 8022688:	b580      	push	{r7, lr}
 802268a:	b082      	sub	sp, #8
 802268c:	af02      	add	r7, sp, #8
	/* Shutdown sequence. */
	DigitalCluster_ShutOffDisplayFlag = 0x01;
 802268e:	4b0e      	ldr	r3, [pc, #56]	@ (80226c8 <DigitalCluster_ShutOffDisplay+0x40>)
 8022690:	2201      	movs	r2, #1
 8022692:	701a      	strb	r2, [r3, #0]
	FsmcH_FillRectangle(0, 0, 320, 240 ,0);
 8022694:	2300      	movs	r3, #0
 8022696:	9300      	str	r3, [sp, #0]
 8022698:	23f0      	movs	r3, #240	@ 0xf0
 802269a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 802269e:	2100      	movs	r1, #0
 80226a0:	2000      	movs	r0, #0
 80226a2:	f004 f83b 	bl	802671c <FsmcH_FillRectangle>
	HAL_GPIO_WritePin(DIGITALCLUSTER_BACKLIGHT_GPIO_Port, DIGITALCLUSTER_BACKLIGHT_Pin, 0);
 80226a6:	2200      	movs	r2, #0
 80226a8:	2102      	movs	r1, #2
 80226aa:	4808      	ldr	r0, [pc, #32]	@ (80226cc <DigitalCluster_ShutOffDisplay+0x44>)
 80226ac:	f00b fe4c 	bl	802e348 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BUZOUT_GPIO_Port, BUZOUT_Pin, 0);
 80226b0:	2200      	movs	r2, #0
 80226b2:	2101      	movs	r1, #1
 80226b4:	4806      	ldr	r0, [pc, #24]	@ (80226d0 <DigitalCluster_ShutOffDisplay+0x48>)
 80226b6:	f00b fe47 	bl	802e348 <HAL_GPIO_WritePin>
	FsmcH_WriteCommand(0x28);
 80226ba:	2028      	movs	r0, #40	@ 0x28
 80226bc:	f003 ffd2 	bl	8026664 <FsmcH_WriteCommand>
}
 80226c0:	bf00      	nop
 80226c2:	46bd      	mov	sp, r7
 80226c4:	bd80      	pop	{r7, pc}
 80226c6:	bf00      	nop
 80226c8:	100006fc 	.word	0x100006fc
 80226cc:	40020400 	.word	0x40020400
 80226d0:	40020800 	.word	0x40020800

080226d4 <DigitalCluster_WelcomeAnimationHandler>:
void DigitalCluster_WelcomeAnimationHandler(void)
{
 80226d4:	b580      	push	{r7, lr}
 80226d6:	b082      	sub	sp, #8
 80226d8:	af02      	add	r7, sp, #8
	if(0 == clearBeforeWelcome)
 80226da:	4b28      	ldr	r3, [pc, #160]	@ (802277c <DigitalCluster_WelcomeAnimationHandler+0xa8>)
 80226dc:	781b      	ldrb	r3, [r3, #0]
 80226de:	2b00      	cmp	r3, #0
 80226e0:	d10b      	bne.n	80226fa <DigitalCluster_WelcomeAnimationHandler+0x26>
	{
		clearBeforeWelcome = 1;
 80226e2:	4b26      	ldr	r3, [pc, #152]	@ (802277c <DigitalCluster_WelcomeAnimationHandler+0xa8>)
 80226e4:	2201      	movs	r2, #1
 80226e6:	701a      	strb	r2, [r3, #0]
		FsmcH_FillRectangle(0, 0, 320, 240, TFT_BLACK);
 80226e8:	2300      	movs	r3, #0
 80226ea:	9300      	str	r3, [sp, #0]
 80226ec:	23f0      	movs	r3, #240	@ 0xf0
 80226ee:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80226f2:	2100      	movs	r1, #0
 80226f4:	2000      	movs	r0, #0
 80226f6:	f004 f811 	bl	802671c <FsmcH_FillRectangle>
	}
	else
	{
		/* Do nothing. */
	}
	if(DIGITALCLUSTER_WELCOMELEAVINGANIMATIONCOUNTER_VALUE > DigitalCluster_WelcomeAnimationCounter)
 80226fa:	4b21      	ldr	r3, [pc, #132]	@ (8022780 <DigitalCluster_WelcomeAnimationHandler+0xac>)
 80226fc:	781b      	ldrb	r3, [r3, #0]
 80226fe:	2b05      	cmp	r3, #5
 8022700:	d826      	bhi.n	8022750 <DigitalCluster_WelcomeAnimationHandler+0x7c>
	{
		DigitalCluster_WelcomeAnimationCounter++;
 8022702:	4b1f      	ldr	r3, [pc, #124]	@ (8022780 <DigitalCluster_WelcomeAnimationHandler+0xac>)
 8022704:	781b      	ldrb	r3, [r3, #0]
 8022706:	3301      	adds	r3, #1
 8022708:	b2da      	uxtb	r2, r3
 802270a:	4b1d      	ldr	r3, [pc, #116]	@ (8022780 <DigitalCluster_WelcomeAnimationHandler+0xac>)
 802270c:	701a      	strb	r2, [r3, #0]
		if(0xFFFF - 11000 > DigitalCluster_WelcomeAuxColor) DigitalCluster_WelcomeAuxColor += 11000;
 802270e:	4b1d      	ldr	r3, [pc, #116]	@ (8022784 <DigitalCluster_WelcomeAnimationHandler+0xb0>)
 8022710:	881b      	ldrh	r3, [r3, #0]
 8022712:	f24d 5206 	movw	r2, #54534	@ 0xd506
 8022716:	4293      	cmp	r3, r2
 8022718:	d807      	bhi.n	802272a <DigitalCluster_WelcomeAnimationHandler+0x56>
 802271a:	4b1a      	ldr	r3, [pc, #104]	@ (8022784 <DigitalCluster_WelcomeAnimationHandler+0xb0>)
 802271c:	881b      	ldrh	r3, [r3, #0]
 802271e:	f503 532b 	add.w	r3, r3, #10944	@ 0x2ac0
 8022722:	3338      	adds	r3, #56	@ 0x38
 8022724:	b29a      	uxth	r2, r3
 8022726:	4b17      	ldr	r3, [pc, #92]	@ (8022784 <DigitalCluster_WelcomeAnimationHandler+0xb0>)
 8022728:	801a      	strh	r2, [r3, #0]
		else
		{
			/* Do nothing. */
		}
		FsmcH_DrawString(100, 100, "WELCOME\0", DigitalCluster_WelcomeAuxColor, TFT_BLACK);
 802272a:	4b16      	ldr	r3, [pc, #88]	@ (8022784 <DigitalCluster_WelcomeAnimationHandler+0xb0>)
 802272c:	881b      	ldrh	r3, [r3, #0]
 802272e:	2200      	movs	r2, #0
 8022730:	9200      	str	r2, [sp, #0]
 8022732:	4a15      	ldr	r2, [pc, #84]	@ (8022788 <DigitalCluster_WelcomeAnimationHandler+0xb4>)
 8022734:	2164      	movs	r1, #100	@ 0x64
 8022736:	2064      	movs	r0, #100	@ 0x64
 8022738:	f003 ff3c 	bl	80265b4 <FsmcH_DrawString>
		FsmcH_DrawString(125, 125, "USER\0", DigitalCluster_WelcomeAuxColor, TFT_BLACK);
 802273c:	4b11      	ldr	r3, [pc, #68]	@ (8022784 <DigitalCluster_WelcomeAnimationHandler+0xb0>)
 802273e:	881b      	ldrh	r3, [r3, #0]
 8022740:	2200      	movs	r2, #0
 8022742:	9200      	str	r2, [sp, #0]
 8022744:	4a11      	ldr	r2, [pc, #68]	@ (802278c <DigitalCluster_WelcomeAnimationHandler+0xb8>)
 8022746:	217d      	movs	r1, #125	@ 0x7d
 8022748:	207d      	movs	r0, #125	@ 0x7d
 802274a:	f003 ff33 	bl	80265b4 <FsmcH_DrawString>
	{
		FsmcH_FillRectangle(100, 100, 140, 20, TFT_BLACK);
		FsmcH_FillRectangle(125, 125, 80, 20, TFT_BLACK);
		DigitalCluster_WelcomeAnimationFlag = 0x01;
	}
}
 802274e:	e012      	b.n	8022776 <DigitalCluster_WelcomeAnimationHandler+0xa2>
		FsmcH_FillRectangle(100, 100, 140, 20, TFT_BLACK);
 8022750:	2300      	movs	r3, #0
 8022752:	9300      	str	r3, [sp, #0]
 8022754:	2314      	movs	r3, #20
 8022756:	228c      	movs	r2, #140	@ 0x8c
 8022758:	2164      	movs	r1, #100	@ 0x64
 802275a:	2064      	movs	r0, #100	@ 0x64
 802275c:	f003 ffde 	bl	802671c <FsmcH_FillRectangle>
		FsmcH_FillRectangle(125, 125, 80, 20, TFT_BLACK);
 8022760:	2300      	movs	r3, #0
 8022762:	9300      	str	r3, [sp, #0]
 8022764:	2314      	movs	r3, #20
 8022766:	2250      	movs	r2, #80	@ 0x50
 8022768:	217d      	movs	r1, #125	@ 0x7d
 802276a:	207d      	movs	r0, #125	@ 0x7d
 802276c:	f003 ffd6 	bl	802671c <FsmcH_FillRectangle>
		DigitalCluster_WelcomeAnimationFlag = 0x01;
 8022770:	4b07      	ldr	r3, [pc, #28]	@ (8022790 <DigitalCluster_WelcomeAnimationHandler+0xbc>)
 8022772:	2201      	movs	r2, #1
 8022774:	701a      	strb	r2, [r3, #0]
}
 8022776:	bf00      	nop
 8022778:	46bd      	mov	sp, r7
 802277a:	bd80      	pop	{r7, pc}
 802277c:	1000078d 	.word	0x1000078d
 8022780:	10000720 	.word	0x10000720
 8022784:	10000722 	.word	0x10000722
 8022788:	08038048 	.word	0x08038048
 802278c:	08038054 	.word	0x08038054
 8022790:	100006fd 	.word	0x100006fd

08022794 <DigitalCluster_LeavingAnimationHandler>:
void DigitalCluster_LeavingAnimationHandler(void)
{
 8022794:	b580      	push	{r7, lr}
 8022796:	b082      	sub	sp, #8
 8022798:	af02      	add	r7, sp, #8
	DigitalCluster_WelcomeAnimationFlag = 0;
 802279a:	4b63      	ldr	r3, [pc, #396]	@ (8022928 <DigitalCluster_LeavingAnimationHandler+0x194>)
 802279c:	2200      	movs	r2, #0
 802279e:	701a      	strb	r2, [r3, #0]

	if(0 == clearBeforeLeave)
 80227a0:	4b62      	ldr	r3, [pc, #392]	@ (802292c <DigitalCluster_LeavingAnimationHandler+0x198>)
 80227a2:	781b      	ldrb	r3, [r3, #0]
 80227a4:	2b00      	cmp	r3, #0
 80227a6:	f040 8094 	bne.w	80228d2 <DigitalCluster_LeavingAnimationHandler+0x13e>
	{
		/* Set variables to a known state for potential transition to run state. */
		clearBeforeLeave = 1;
 80227aa:	4b60      	ldr	r3, [pc, #384]	@ (802292c <DigitalCluster_LeavingAnimationHandler+0x198>)
 80227ac:	2201      	movs	r2, #1
 80227ae:	701a      	strb	r2, [r3, #0]
		FsmcH_FillRectangle(0, 0, 320, 240, TFT_BLACK);
 80227b0:	2300      	movs	r3, #0
 80227b2:	9300      	str	r3, [sp, #0]
 80227b4:	23f0      	movs	r3, #240	@ 0xf0
 80227b6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80227ba:	2100      	movs	r1, #0
 80227bc:	2000      	movs	r0, #0
 80227be:	f003 ffad 	bl	802671c <FsmcH_FillRectangle>
		speedBarHeight = 180;
 80227c2:	4b5b      	ldr	r3, [pc, #364]	@ (8022930 <DigitalCluster_LeavingAnimationHandler+0x19c>)
 80227c4:	22b4      	movs	r2, #180	@ 0xb4
 80227c6:	801a      	strh	r2, [r3, #0]
		rpmBarHeight = 180;
 80227c8:	4b5a      	ldr	r3, [pc, #360]	@ (8022934 <DigitalCluster_LeavingAnimationHandler+0x1a0>)
 80227ca:	22b4      	movs	r2, #180	@ 0xb4
 80227cc:	801a      	strh	r2, [r3, #0]
		pSpeedBarHeight = 180;
 80227ce:	4b5a      	ldr	r3, [pc, #360]	@ (8022938 <DigitalCluster_LeavingAnimationHandler+0x1a4>)
 80227d0:	22b4      	movs	r2, #180	@ 0xb4
 80227d2:	801a      	strh	r2, [r3, #0]
		pRpmBarHeight = 180;
 80227d4:	4b59      	ldr	r3, [pc, #356]	@ (802293c <DigitalCluster_LeavingAnimationHandler+0x1a8>)
 80227d6:	22b4      	movs	r2, #180	@ 0xb4
 80227d8:	801a      	strh	r2, [r3, #0]
		maxBarHeight = 180;
 80227da:	4b59      	ldr	r3, [pc, #356]	@ (8022940 <DigitalCluster_LeavingAnimationHandler+0x1ac>)
 80227dc:	22b4      	movs	r2, #180	@ 0xb4
 80227de:	801a      	strh	r2, [r3, #0]
		hasTimeHChanged = 180;
 80227e0:	4b58      	ldr	r3, [pc, #352]	@ (8022944 <DigitalCluster_LeavingAnimationHandler+0x1b0>)
 80227e2:	22b4      	movs	r2, #180	@ 0xb4
 80227e4:	701a      	strb	r2, [r3, #0]
		hasTimeMChanged = 180;
 80227e6:	4b58      	ldr	r3, [pc, #352]	@ (8022948 <DigitalCluster_LeavingAnimationHandler+0x1b4>)
 80227e8:	22b4      	movs	r2, #180	@ 0xb4
 80227ea:	701a      	strb	r2, [r3, #0]
		hbPrevState = 180;
 80227ec:	4b57      	ldr	r3, [pc, #348]	@ (802294c <DigitalCluster_LeavingAnimationHandler+0x1b8>)
 80227ee:	22b4      	movs	r2, #180	@ 0xb4
 80227f0:	701a      	strb	r2, [r3, #0]
		psPrevState = 180;
 80227f2:	4b57      	ldr	r3, [pc, #348]	@ (8022950 <DigitalCluster_LeavingAnimationHandler+0x1bc>)
 80227f4:	22b4      	movs	r2, #180	@ 0xb4
 80227f6:	701a      	strb	r2, [r3, #0]
		tPrevState = 100;
 80227f8:	4b56      	ldr	r3, [pc, #344]	@ (8022954 <DigitalCluster_LeavingAnimationHandler+0x1c0>)
 80227fa:	2264      	movs	r2, #100	@ 0x64
 80227fc:	701a      	strb	r2, [r3, #0]
		gPrevState = 5;
 80227fe:	4b56      	ldr	r3, [pc, #344]	@ (8022958 <DigitalCluster_LeavingAnimationHandler+0x1c4>)
 8022800:	2205      	movs	r2, #5
 8022802:	701a      	strb	r2, [r3, #0]
		dmPrevState = 180;
 8022804:	4b55      	ldr	r3, [pc, #340]	@ (802295c <DigitalCluster_LeavingAnimationHandler+0x1c8>)
 8022806:	22b4      	movs	r2, #180	@ 0xb4
 8022808:	701a      	strb	r2, [r3, #0]
		pVehSpeed = 331;
 802280a:	4b55      	ldr	r3, [pc, #340]	@ (8022960 <DigitalCluster_LeavingAnimationHandler+0x1cc>)
 802280c:	f240 124b 	movw	r2, #331	@ 0x14b
 8022810:	801a      	strh	r2, [r3, #0]
		pRpm = 10000;
 8022812:	4b54      	ldr	r3, [pc, #336]	@ (8022964 <DigitalCluster_LeavingAnimationHandler+0x1d0>)
 8022814:	f242 7210 	movw	r2, #10000	@ 0x2710
 8022818:	801a      	strh	r2, [r3, #0]
		timestamp = 0;
 802281a:	4b53      	ldr	r3, [pc, #332]	@ (8022968 <DigitalCluster_LeavingAnimationHandler+0x1d4>)
 802281c:	2200      	movs	r2, #0
 802281e:	601a      	str	r2, [r3, #0]
		collisionFlag = 0;
 8022820:	4b52      	ldr	r3, [pc, #328]	@ (802296c <DigitalCluster_LeavingAnimationHandler+0x1d8>)
 8022822:	2200      	movs	r2, #0
 8022824:	701a      	strb	r2, [r3, #0]
		collisionFlagClear = 0;
 8022826:	4b52      	ldr	r3, [pc, #328]	@ (8022970 <DigitalCluster_LeavingAnimationHandler+0x1dc>)
 8022828:	2200      	movs	r2, #0
 802282a:	701a      	strb	r2, [r3, #0]
		ccmFlag = 0;
 802282c:	4b51      	ldr	r3, [pc, #324]	@ (8022974 <DigitalCluster_LeavingAnimationHandler+0x1e0>)
 802282e:	2200      	movs	r2, #0
 8022830:	701a      	strb	r2, [r3, #0]
		vehSpeedConv = 331;
 8022832:	4b51      	ldr	r3, [pc, #324]	@ (8022978 <DigitalCluster_LeavingAnimationHandler+0x1e4>)
 8022834:	f240 124b 	movw	r2, #331	@ 0x14b
 8022838:	601a      	str	r2, [r3, #0]
		rpmConv = 10000;
 802283a:	4b50      	ldr	r3, [pc, #320]	@ (802297c <DigitalCluster_LeavingAnimationHandler+0x1e8>)
 802283c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8022840:	601a      	str	r2, [r3, #0]
		localDM1 = 180;
 8022842:	4b4f      	ldr	r3, [pc, #316]	@ (8022980 <DigitalCluster_LeavingAnimationHandler+0x1ec>)
 8022844:	22b4      	movs	r2, #180	@ 0xb4
 8022846:	701a      	strb	r2, [r3, #0]
		localDM2 = 180;
 8022848:	4b4e      	ldr	r3, [pc, #312]	@ (8022984 <DigitalCluster_LeavingAnimationHandler+0x1f0>)
 802284a:	22b4      	movs	r2, #180	@ 0xb4
 802284c:	701a      	strb	r2, [r3, #0]
		localDM3 = 180;
 802284e:	4b4e      	ldr	r3, [pc, #312]	@ (8022988 <DigitalCluster_LeavingAnimationHandler+0x1f4>)
 8022850:	22b4      	movs	r2, #180	@ 0xb4
 8022852:	701a      	strb	r2, [r3, #0]
		localDM4 = 180;
 8022854:	4b4d      	ldr	r3, [pc, #308]	@ (802298c <DigitalCluster_LeavingAnimationHandler+0x1f8>)
 8022856:	22b4      	movs	r2, #180	@ 0xb4
 8022858:	701a      	strb	r2, [r3, #0]
		DigitalCluster_WelcomeAnimationCounter = 0x00;
 802285a:	4b4d      	ldr	r3, [pc, #308]	@ (8022990 <DigitalCluster_LeavingAnimationHandler+0x1fc>)
 802285c:	2200      	movs	r2, #0
 802285e:	701a      	strb	r2, [r3, #0]
		DigitalCluster_LeavingAnimationCounter = 0x00;
 8022860:	4b4c      	ldr	r3, [pc, #304]	@ (8022994 <DigitalCluster_LeavingAnimationHandler+0x200>)
 8022862:	2200      	movs	r2, #0
 8022864:	701a      	strb	r2, [r3, #0]
		DigitalCluster_WelcomeAuxColor = 0x00;
 8022866:	4b4c      	ldr	r3, [pc, #304]	@ (8022998 <DigitalCluster_LeavingAnimationHandler+0x204>)
 8022868:	2200      	movs	r2, #0
 802286a:	801a      	strh	r2, [r3, #0]
		DigitalCluster_LeavingAuxColor = 0xFFFF;
 802286c:	4b4b      	ldr	r3, [pc, #300]	@ (802299c <DigitalCluster_LeavingAnimationHandler+0x208>)
 802286e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8022872:	801a      	strh	r2, [r3, #0]
		CCM_Counter = 0x00;
 8022874:	4b4a      	ldr	r3, [pc, #296]	@ (80229a0 <DigitalCluster_LeavingAnimationHandler+0x20c>)
 8022876:	2200      	movs	r2, #0
 8022878:	601a      	str	r2, [r3, #0]
		TS_Counter = 0x00;
 802287a:	4b4a      	ldr	r3, [pc, #296]	@ (80229a4 <DigitalCluster_LeavingAnimationHandler+0x210>)
 802287c:	2200      	movs	r2, #0
 802287e:	601a      	str	r2, [r3, #0]
		CAW_Counter = 0x00;
 8022880:	4b49      	ldr	r3, [pc, #292]	@ (80229a8 <DigitalCluster_LeavingAnimationHandler+0x214>)
 8022882:	2200      	movs	r2, #0
 8022884:	601a      	str	r2, [r3, #0]
		clearBeforeWelcome = 0;
 8022886:	4b49      	ldr	r3, [pc, #292]	@ (80229ac <DigitalCluster_LeavingAnimationHandler+0x218>)
 8022888:	2200      	movs	r2, #0
 802288a:	701a      	strb	r2, [r3, #0]
		pKmTot = 0xFFFFFFFF;
 802288c:	4b48      	ldr	r3, [pc, #288]	@ (80229b0 <DigitalCluster_LeavingAnimationHandler+0x21c>)
 802288e:	f04f 32ff 	mov.w	r2, #4294967295
 8022892:	601a      	str	r2, [r3, #0]
		pKmDcy = 0xFFFFFFFF;
 8022894:	4b47      	ldr	r3, [pc, #284]	@ (80229b4 <DigitalCluster_LeavingAnimationHandler+0x220>)
 8022896:	f04f 32ff 	mov.w	r2, #4294967295
 802289a:	601a      	str	r2, [r3, #0]
		pFogLightFront = 99;
 802289c:	4b46      	ldr	r3, [pc, #280]	@ (80229b8 <DigitalCluster_LeavingAnimationHandler+0x224>)
 802289e:	2263      	movs	r2, #99	@ 0x63
 80228a0:	701a      	strb	r2, [r3, #0]
		pFogLightRear = 99;
 80228a2:	4b46      	ldr	r3, [pc, #280]	@ (80229bc <DigitalCluster_LeavingAnimationHandler+0x228>)
 80228a4:	2263      	movs	r2, #99	@ 0x63
 80228a6:	701a      	strb	r2, [r3, #0]
		pRls = 99;
 80228a8:	4b45      	ldr	r3, [pc, #276]	@ (80229c0 <DigitalCluster_LeavingAnimationHandler+0x22c>)
 80228aa:	2263      	movs	r2, #99	@ 0x63
 80228ac:	701a      	strb	r2, [r3, #0]
		pFogLightFront = 99;
 80228ae:	4b42      	ldr	r3, [pc, #264]	@ (80229b8 <DigitalCluster_LeavingAnimationHandler+0x224>)
 80228b0:	2263      	movs	r2, #99	@ 0x63
 80228b2:	701a      	strb	r2, [r3, #0]
		pRecirculation = 99;
 80228b4:	4b43      	ldr	r3, [pc, #268]	@ (80229c4 <DigitalCluster_LeavingAnimationHandler+0x230>)
 80228b6:	2263      	movs	r2, #99	@ 0x63
 80228b8:	701a      	strb	r2, [r3, #0]
		pRequestedTemperature = 99;
 80228ba:	4b43      	ldr	r3, [pc, #268]	@ (80229c8 <DigitalCluster_LeavingAnimationHandler+0x234>)
 80228bc:	2263      	movs	r2, #99	@ 0x63
 80228be:	701a      	strb	r2, [r3, #0]
		pAutoClimate = 99;
 80228c0:	4b42      	ldr	r3, [pc, #264]	@ (80229cc <DigitalCluster_LeavingAnimationHandler+0x238>)
 80228c2:	2263      	movs	r2, #99	@ 0x63
 80228c4:	701a      	strb	r2, [r3, #0]
		pFanValue = 9;
 80228c6:	4b42      	ldr	r3, [pc, #264]	@ (80229d0 <DigitalCluster_LeavingAnimationHandler+0x23c>)
 80228c8:	2209      	movs	r2, #9
 80228ca:	701a      	strb	r2, [r3, #0]
		pCheckControlMessageId = 0;
 80228cc:	4b41      	ldr	r3, [pc, #260]	@ (80229d4 <DigitalCluster_LeavingAnimationHandler+0x240>)
 80228ce:	2200      	movs	r2, #0
 80228d0:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* Do nothing. */
	}
	if(DIGITALCLUSTER_WELCOMELEAVINGANIMATIONCOUNTER_VALUE > DigitalCluster_LeavingAnimationCounter)
 80228d2:	4b30      	ldr	r3, [pc, #192]	@ (8022994 <DigitalCluster_LeavingAnimationHandler+0x200>)
 80228d4:	781b      	ldrb	r3, [r3, #0]
 80228d6:	2b05      	cmp	r3, #5
 80228d8:	d81d      	bhi.n	8022916 <DigitalCluster_LeavingAnimationHandler+0x182>
	{
		DigitalCluster_LeavingAnimationCounter++;
 80228da:	4b2e      	ldr	r3, [pc, #184]	@ (8022994 <DigitalCluster_LeavingAnimationHandler+0x200>)
 80228dc:	781b      	ldrb	r3, [r3, #0]
 80228de:	3301      	adds	r3, #1
 80228e0:	b2da      	uxtb	r2, r3
 80228e2:	4b2c      	ldr	r3, [pc, #176]	@ (8022994 <DigitalCluster_LeavingAnimationHandler+0x200>)
 80228e4:	701a      	strb	r2, [r3, #0]
		if(11000 < DigitalCluster_LeavingAuxColor) DigitalCluster_LeavingAuxColor -= 11000;
 80228e6:	4b2d      	ldr	r3, [pc, #180]	@ (802299c <DigitalCluster_LeavingAnimationHandler+0x208>)
 80228e8:	881b      	ldrh	r3, [r3, #0]
 80228ea:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 80228ee:	4293      	cmp	r3, r2
 80228f0:	d907      	bls.n	8022902 <DigitalCluster_LeavingAnimationHandler+0x16e>
 80228f2:	4b2a      	ldr	r3, [pc, #168]	@ (802299c <DigitalCluster_LeavingAnimationHandler+0x208>)
 80228f4:	881b      	ldrh	r3, [r3, #0]
 80228f6:	f5a3 532b 	sub.w	r3, r3, #10944	@ 0x2ac0
 80228fa:	3b38      	subs	r3, #56	@ 0x38
 80228fc:	b29a      	uxth	r2, r3
 80228fe:	4b27      	ldr	r3, [pc, #156]	@ (802299c <DigitalCluster_LeavingAnimationHandler+0x208>)
 8022900:	801a      	strh	r2, [r3, #0]
		else
		{
			/* Do nothing. */
		}
		FsmcH_DrawString(100,100,"Leaving\0",DigitalCluster_LeavingAuxColor,TFT_BLACK);
 8022902:	4b26      	ldr	r3, [pc, #152]	@ (802299c <DigitalCluster_LeavingAnimationHandler+0x208>)
 8022904:	881b      	ldrh	r3, [r3, #0]
 8022906:	2200      	movs	r2, #0
 8022908:	9200      	str	r2, [sp, #0]
 802290a:	4a33      	ldr	r2, [pc, #204]	@ (80229d8 <DigitalCluster_LeavingAnimationHandler+0x244>)
 802290c:	2164      	movs	r1, #100	@ 0x64
 802290e:	2064      	movs	r0, #100	@ 0x64
 8022910:	f003 fe50 	bl	80265b4 <FsmcH_DrawString>
	else
	{
		DigitalCluster_LeavingAnimationFlag = 0x02;
		DigitalCluster_ShutOffDisplay();
	}
}
 8022914:	e004      	b.n	8022920 <DigitalCluster_LeavingAnimationHandler+0x18c>
		DigitalCluster_LeavingAnimationFlag = 0x02;
 8022916:	4b31      	ldr	r3, [pc, #196]	@ (80229dc <DigitalCluster_LeavingAnimationHandler+0x248>)
 8022918:	2202      	movs	r2, #2
 802291a:	701a      	strb	r2, [r3, #0]
		DigitalCluster_ShutOffDisplay();
 802291c:	f7ff feb4 	bl	8022688 <DigitalCluster_ShutOffDisplay>
}
 8022920:	bf00      	nop
 8022922:	46bd      	mov	sp, r7
 8022924:	bd80      	pop	{r7, pc}
 8022926:	bf00      	nop
 8022928:	100006fd 	.word	0x100006fd
 802292c:	1000078c 	.word	0x1000078c
 8022930:	10000760 	.word	0x10000760
 8022934:	10000762 	.word	0x10000762
 8022938:	10000764 	.word	0x10000764
 802293c:	10000766 	.word	0x10000766
 8022940:	10000768 	.word	0x10000768
 8022944:	1000076a 	.word	0x1000076a
 8022948:	1000076b 	.word	0x1000076b
 802294c:	1000076c 	.word	0x1000076c
 8022950:	1000076d 	.word	0x1000076d
 8022954:	1000076e 	.word	0x1000076e
 8022958:	1000076f 	.word	0x1000076f
 802295c:	10000770 	.word	0x10000770
 8022960:	10000772 	.word	0x10000772
 8022964:	10000774 	.word	0x10000774
 8022968:	10000778 	.word	0x10000778
 802296c:	1000077c 	.word	0x1000077c
 8022970:	1000077d 	.word	0x1000077d
 8022974:	1000077e 	.word	0x1000077e
 8022978:	10000780 	.word	0x10000780
 802297c:	10000784 	.word	0x10000784
 8022980:	10000788 	.word	0x10000788
 8022984:	10000789 	.word	0x10000789
 8022988:	1000078a 	.word	0x1000078a
 802298c:	1000078b 	.word	0x1000078b
 8022990:	10000720 	.word	0x10000720
 8022994:	10000721 	.word	0x10000721
 8022998:	10000722 	.word	0x10000722
 802299c:	10000724 	.word	0x10000724
 80229a0:	10000754 	.word	0x10000754
 80229a4:	10000758 	.word	0x10000758
 80229a8:	1000075c 	.word	0x1000075c
 80229ac:	1000078d 	.word	0x1000078d
 80229b0:	10000790 	.word	0x10000790
 80229b4:	10000794 	.word	0x10000794
 80229b8:	10000799 	.word	0x10000799
 80229bc:	1000079a 	.word	0x1000079a
 80229c0:	1000079b 	.word	0x1000079b
 80229c4:	1000079c 	.word	0x1000079c
 80229c8:	1000079d 	.word	0x1000079d
 80229cc:	1000079e 	.word	0x1000079e
 80229d0:	1000079f 	.word	0x1000079f
 80229d4:	1000070e 	.word	0x1000070e
 80229d8:	0803805c 	.word	0x0803805c
 80229dc:	100006fe 	.word	0x100006fe

080229e0 <DigitalCluster_SelfTest>:
void DigitalCluster_SelfTest(void)
{
 80229e0:	b580      	push	{r7, lr}
 80229e2:	b082      	sub	sp, #8
 80229e4:	af02      	add	r7, sp, #8
	/* Traditional RGB LCD self-test. */
	if(0 == timestamp)
 80229e6:	4b2d      	ldr	r3, [pc, #180]	@ (8022a9c <DigitalCluster_SelfTest+0xbc>)
 80229e8:	681b      	ldr	r3, [r3, #0]
 80229ea:	2b00      	cmp	r3, #0
 80229ec:	d116      	bne.n	8022a1c <DigitalCluster_SelfTest+0x3c>
	{
		timestamp = DigitalCluster_MainCounter;
 80229ee:	4b2c      	ldr	r3, [pc, #176]	@ (8022aa0 <DigitalCluster_SelfTest+0xc0>)
 80229f0:	681b      	ldr	r3, [r3, #0]
 80229f2:	4a2a      	ldr	r2, [pc, #168]	@ (8022a9c <DigitalCluster_SelfTest+0xbc>)
 80229f4:	6013      	str	r3, [r2, #0]
		FsmcH_FillRectangle(0, 0, 320, 240, TFT_BLACK);
 80229f6:	2300      	movs	r3, #0
 80229f8:	9300      	str	r3, [sp, #0]
 80229fa:	23f0      	movs	r3, #240	@ 0xf0
 80229fc:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8022a00:	2100      	movs	r1, #0
 8022a02:	2000      	movs	r0, #0
 8022a04:	f003 fe8a 	bl	802671c <FsmcH_FillRectangle>
		FsmcH_FillRectangle(0, 0, 320, 240, TFT_RED);
 8022a08:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8022a0c:	9300      	str	r3, [sp, #0]
 8022a0e:	23f0      	movs	r3, #240	@ 0xf0
 8022a10:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8022a14:	2100      	movs	r1, #0
 8022a16:	2000      	movs	r0, #0
 8022a18:	f003 fe80 	bl	802671c <FsmcH_FillRectangle>
	}
	else
	{
		/* Do nothing. */
	}
	if((DigitalCluster_MainCounter - timestamp) == 200) FsmcH_FillRectangle(0, 0, 320, 240, TFT_GREEN);
 8022a1c:	4b20      	ldr	r3, [pc, #128]	@ (8022aa0 <DigitalCluster_SelfTest+0xc0>)
 8022a1e:	681a      	ldr	r2, [r3, #0]
 8022a20:	4b1e      	ldr	r3, [pc, #120]	@ (8022a9c <DigitalCluster_SelfTest+0xbc>)
 8022a22:	681b      	ldr	r3, [r3, #0]
 8022a24:	1ad3      	subs	r3, r2, r3
 8022a26:	2bc8      	cmp	r3, #200	@ 0xc8
 8022a28:	d10a      	bne.n	8022a40 <DigitalCluster_SelfTest+0x60>
 8022a2a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8022a2e:	9300      	str	r3, [sp, #0]
 8022a30:	23f0      	movs	r3, #240	@ 0xf0
 8022a32:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8022a36:	2100      	movs	r1, #0
 8022a38:	2000      	movs	r0, #0
 8022a3a:	f003 fe6f 	bl	802671c <FsmcH_FillRectangle>
 8022a3e:	e010      	b.n	8022a62 <DigitalCluster_SelfTest+0x82>
	else if((DigitalCluster_MainCounter - timestamp) == 400) FsmcH_FillRectangle(0, 0, 320, 240, TFT_BLUE);
 8022a40:	4b17      	ldr	r3, [pc, #92]	@ (8022aa0 <DigitalCluster_SelfTest+0xc0>)
 8022a42:	681a      	ldr	r2, [r3, #0]
 8022a44:	4b15      	ldr	r3, [pc, #84]	@ (8022a9c <DigitalCluster_SelfTest+0xbc>)
 8022a46:	681b      	ldr	r3, [r3, #0]
 8022a48:	1ad3      	subs	r3, r2, r3
 8022a4a:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8022a4e:	d108      	bne.n	8022a62 <DigitalCluster_SelfTest+0x82>
 8022a50:	231f      	movs	r3, #31
 8022a52:	9300      	str	r3, [sp, #0]
 8022a54:	23f0      	movs	r3, #240	@ 0xf0
 8022a56:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8022a5a:	2100      	movs	r1, #0
 8022a5c:	2000      	movs	r0, #0
 8022a5e:	f003 fe5d 	bl	802671c <FsmcH_FillRectangle>
	else
	{
		/* Do nothing. */
	}
	if(DigitalCluster_MainCounter - timestamp > 600)
 8022a62:	4b0f      	ldr	r3, [pc, #60]	@ (8022aa0 <DigitalCluster_SelfTest+0xc0>)
 8022a64:	681a      	ldr	r2, [r3, #0]
 8022a66:	4b0d      	ldr	r3, [pc, #52]	@ (8022a9c <DigitalCluster_SelfTest+0xbc>)
 8022a68:	681b      	ldr	r3, [r3, #0]
 8022a6a:	1ad3      	subs	r3, r2, r3
 8022a6c:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8022a70:	d910      	bls.n	8022a94 <DigitalCluster_SelfTest+0xb4>
	{
		/* Restore LCD to previous state. */
		FsmcH_FillRectangle(0, 0, 320, 240, TFT_BLACK);
 8022a72:	2300      	movs	r3, #0
 8022a74:	9300      	str	r3, [sp, #0]
 8022a76:	23f0      	movs	r3, #240	@ 0xf0
 8022a78:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8022a7c:	2100      	movs	r1, #0
 8022a7e:	2000      	movs	r0, #0
 8022a80:	f003 fe4c 	bl	802671c <FsmcH_FillRectangle>
		DigitalCluster_IsSelfTestRequested = 0;
 8022a84:	4b07      	ldr	r3, [pc, #28]	@ (8022aa4 <DigitalCluster_SelfTest+0xc4>)
 8022a86:	2200      	movs	r2, #0
 8022a88:	701a      	strb	r2, [r3, #0]
		timestamp = 0;
 8022a8a:	4b04      	ldr	r3, [pc, #16]	@ (8022a9c <DigitalCluster_SelfTest+0xbc>)
 8022a8c:	2200      	movs	r2, #0
 8022a8e:	601a      	str	r2, [r3, #0]
		DigitalCluster_InitMemory();
 8022a90:	f000 f80a 	bl	8022aa8 <DigitalCluster_InitMemory>
	}
	else
	{
		/* Do nothing. */
	}
}
 8022a94:	bf00      	nop
 8022a96:	46bd      	mov	sp, r7
 8022a98:	bd80      	pop	{r7, pc}
 8022a9a:	bf00      	nop
 8022a9c:	10000778 	.word	0x10000778
 8022aa0:	1000071c 	.word	0x1000071c
 8022aa4:	10000728 	.word	0x10000728

08022aa8 <DigitalCluster_InitMemory>:
void DigitalCluster_InitMemory(void)
{
 8022aa8:	b480      	push	{r7}
 8022aaa:	af00      	add	r7, sp, #0
	CCM_Counter = 0x00;
 8022aac:	4b3f      	ldr	r3, [pc, #252]	@ (8022bac <DigitalCluster_InitMemory+0x104>)
 8022aae:	2200      	movs	r2, #0
 8022ab0:	601a      	str	r2, [r3, #0]
	TS_Counter = 0x00;
 8022ab2:	4b3f      	ldr	r3, [pc, #252]	@ (8022bb0 <DigitalCluster_InitMemory+0x108>)
 8022ab4:	2200      	movs	r2, #0
 8022ab6:	601a      	str	r2, [r3, #0]
	CAW_Counter = 0x00;
 8022ab8:	4b3e      	ldr	r3, [pc, #248]	@ (8022bb4 <DigitalCluster_InitMemory+0x10c>)
 8022aba:	2200      	movs	r2, #0
 8022abc:	601a      	str	r2, [r3, #0]
	speedBarHeight = 180;
 8022abe:	4b3e      	ldr	r3, [pc, #248]	@ (8022bb8 <DigitalCluster_InitMemory+0x110>)
 8022ac0:	22b4      	movs	r2, #180	@ 0xb4
 8022ac2:	801a      	strh	r2, [r3, #0]
	rpmBarHeight = 180;
 8022ac4:	4b3d      	ldr	r3, [pc, #244]	@ (8022bbc <DigitalCluster_InitMemory+0x114>)
 8022ac6:	22b4      	movs	r2, #180	@ 0xb4
 8022ac8:	801a      	strh	r2, [r3, #0]
	pSpeedBarHeight = 180;
 8022aca:	4b3d      	ldr	r3, [pc, #244]	@ (8022bc0 <DigitalCluster_InitMemory+0x118>)
 8022acc:	22b4      	movs	r2, #180	@ 0xb4
 8022ace:	801a      	strh	r2, [r3, #0]
	pRpmBarHeight = 180;
 8022ad0:	4b3c      	ldr	r3, [pc, #240]	@ (8022bc4 <DigitalCluster_InitMemory+0x11c>)
 8022ad2:	22b4      	movs	r2, #180	@ 0xb4
 8022ad4:	801a      	strh	r2, [r3, #0]
	maxBarHeight = 180;
 8022ad6:	4b3c      	ldr	r3, [pc, #240]	@ (8022bc8 <DigitalCluster_InitMemory+0x120>)
 8022ad8:	22b4      	movs	r2, #180	@ 0xb4
 8022ada:	801a      	strh	r2, [r3, #0]
	hasTimeHChanged = 99;
 8022adc:	4b3b      	ldr	r3, [pc, #236]	@ (8022bcc <DigitalCluster_InitMemory+0x124>)
 8022ade:	2263      	movs	r2, #99	@ 0x63
 8022ae0:	701a      	strb	r2, [r3, #0]
	hasTimeMChanged = 99;
 8022ae2:	4b3b      	ldr	r3, [pc, #236]	@ (8022bd0 <DigitalCluster_InitMemory+0x128>)
 8022ae4:	2263      	movs	r2, #99	@ 0x63
 8022ae6:	701a      	strb	r2, [r3, #0]
	hbPrevState = 99;
 8022ae8:	4b3a      	ldr	r3, [pc, #232]	@ (8022bd4 <DigitalCluster_InitMemory+0x12c>)
 8022aea:	2263      	movs	r2, #99	@ 0x63
 8022aec:	701a      	strb	r2, [r3, #0]
	psPrevState = 99;
 8022aee:	4b3a      	ldr	r3, [pc, #232]	@ (8022bd8 <DigitalCluster_InitMemory+0x130>)
 8022af0:	2263      	movs	r2, #99	@ 0x63
 8022af2:	701a      	strb	r2, [r3, #0]
	tPrevState = 100;
 8022af4:	4b39      	ldr	r3, [pc, #228]	@ (8022bdc <DigitalCluster_InitMemory+0x134>)
 8022af6:	2264      	movs	r2, #100	@ 0x64
 8022af8:	701a      	strb	r2, [r3, #0]
	gPrevState = 5;
 8022afa:	4b39      	ldr	r3, [pc, #228]	@ (8022be0 <DigitalCluster_InitMemory+0x138>)
 8022afc:	2205      	movs	r2, #5
 8022afe:	701a      	strb	r2, [r3, #0]
	dmPrevState = 99;
 8022b00:	4b38      	ldr	r3, [pc, #224]	@ (8022be4 <DigitalCluster_InitMemory+0x13c>)
 8022b02:	2263      	movs	r2, #99	@ 0x63
 8022b04:	701a      	strb	r2, [r3, #0]
	pVehSpeed = 331;
 8022b06:	4b38      	ldr	r3, [pc, #224]	@ (8022be8 <DigitalCluster_InitMemory+0x140>)
 8022b08:	f240 124b 	movw	r2, #331	@ 0x14b
 8022b0c:	801a      	strh	r2, [r3, #0]
	pRpm = 10000;
 8022b0e:	4b37      	ldr	r3, [pc, #220]	@ (8022bec <DigitalCluster_InitMemory+0x144>)
 8022b10:	f242 7210 	movw	r2, #10000	@ 0x2710
 8022b14:	801a      	strh	r2, [r3, #0]
	timestamp = 0;
 8022b16:	4b36      	ldr	r3, [pc, #216]	@ (8022bf0 <DigitalCluster_InitMemory+0x148>)
 8022b18:	2200      	movs	r2, #0
 8022b1a:	601a      	str	r2, [r3, #0]
	collisionFlag = 0;
 8022b1c:	4b35      	ldr	r3, [pc, #212]	@ (8022bf4 <DigitalCluster_InitMemory+0x14c>)
 8022b1e:	2200      	movs	r2, #0
 8022b20:	701a      	strb	r2, [r3, #0]
	collisionFlagClear = 0;
 8022b22:	4b35      	ldr	r3, [pc, #212]	@ (8022bf8 <DigitalCluster_InitMemory+0x150>)
 8022b24:	2200      	movs	r2, #0
 8022b26:	701a      	strb	r2, [r3, #0]
	ccmFlag = 0;
 8022b28:	4b34      	ldr	r3, [pc, #208]	@ (8022bfc <DigitalCluster_InitMemory+0x154>)
 8022b2a:	2200      	movs	r2, #0
 8022b2c:	701a      	strb	r2, [r3, #0]
	vehSpeedConv = 340;
 8022b2e:	4b34      	ldr	r3, [pc, #208]	@ (8022c00 <DigitalCluster_InitMemory+0x158>)
 8022b30:	f44f 72aa 	mov.w	r2, #340	@ 0x154
 8022b34:	601a      	str	r2, [r3, #0]
	rpmConv = 10000;
 8022b36:	4b33      	ldr	r3, [pc, #204]	@ (8022c04 <DigitalCluster_InitMemory+0x15c>)
 8022b38:	f242 7210 	movw	r2, #10000	@ 0x2710
 8022b3c:	601a      	str	r2, [r3, #0]
	localDM1 = 99;
 8022b3e:	4b32      	ldr	r3, [pc, #200]	@ (8022c08 <DigitalCluster_InitMemory+0x160>)
 8022b40:	2263      	movs	r2, #99	@ 0x63
 8022b42:	701a      	strb	r2, [r3, #0]
	localDM2 = 99;
 8022b44:	4b31      	ldr	r3, [pc, #196]	@ (8022c0c <DigitalCluster_InitMemory+0x164>)
 8022b46:	2263      	movs	r2, #99	@ 0x63
 8022b48:	701a      	strb	r2, [r3, #0]
	localDM3 = 99;
 8022b4a:	4b31      	ldr	r3, [pc, #196]	@ (8022c10 <DigitalCluster_InitMemory+0x168>)
 8022b4c:	2263      	movs	r2, #99	@ 0x63
 8022b4e:	701a      	strb	r2, [r3, #0]
	localDM4 = 99;
 8022b50:	4b30      	ldr	r3, [pc, #192]	@ (8022c14 <DigitalCluster_InitMemory+0x16c>)
 8022b52:	2263      	movs	r2, #99	@ 0x63
 8022b54:	701a      	strb	r2, [r3, #0]
	clearBeforeLeave = 0;
 8022b56:	4b30      	ldr	r3, [pc, #192]	@ (8022c18 <DigitalCluster_InitMemory+0x170>)
 8022b58:	2200      	movs	r2, #0
 8022b5a:	701a      	strb	r2, [r3, #0]
	clearBeforeWelcome = 0;
 8022b5c:	4b2f      	ldr	r3, [pc, #188]	@ (8022c1c <DigitalCluster_InitMemory+0x174>)
 8022b5e:	2200      	movs	r2, #0
 8022b60:	701a      	strb	r2, [r3, #0]
	pKmTot = 0xFFFFFFFF;
 8022b62:	4b2f      	ldr	r3, [pc, #188]	@ (8022c20 <DigitalCluster_InitMemory+0x178>)
 8022b64:	f04f 32ff 	mov.w	r2, #4294967295
 8022b68:	601a      	str	r2, [r3, #0]
	pKmDcy = 0xFFFFFFFF;
 8022b6a:	4b2e      	ldr	r3, [pc, #184]	@ (8022c24 <DigitalCluster_InitMemory+0x17c>)
 8022b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8022b70:	601a      	str	r2, [r3, #0]
	pFogLightFront = 99;
 8022b72:	4b2d      	ldr	r3, [pc, #180]	@ (8022c28 <DigitalCluster_InitMemory+0x180>)
 8022b74:	2263      	movs	r2, #99	@ 0x63
 8022b76:	701a      	strb	r2, [r3, #0]
	pFogLightRear = 99;
 8022b78:	4b2c      	ldr	r3, [pc, #176]	@ (8022c2c <DigitalCluster_InitMemory+0x184>)
 8022b7a:	2263      	movs	r2, #99	@ 0x63
 8022b7c:	701a      	strb	r2, [r3, #0]
	pRls = 99;
 8022b7e:	4b2c      	ldr	r3, [pc, #176]	@ (8022c30 <DigitalCluster_InitMemory+0x188>)
 8022b80:	2263      	movs	r2, #99	@ 0x63
 8022b82:	701a      	strb	r2, [r3, #0]
	pRecirculation = 99;
 8022b84:	4b2b      	ldr	r3, [pc, #172]	@ (8022c34 <DigitalCluster_InitMemory+0x18c>)
 8022b86:	2263      	movs	r2, #99	@ 0x63
 8022b88:	701a      	strb	r2, [r3, #0]
	pRequestedTemperature = 99;
 8022b8a:	4b2b      	ldr	r3, [pc, #172]	@ (8022c38 <DigitalCluster_InitMemory+0x190>)
 8022b8c:	2263      	movs	r2, #99	@ 0x63
 8022b8e:	701a      	strb	r2, [r3, #0]
	pAutoClimate = 99;
 8022b90:	4b2a      	ldr	r3, [pc, #168]	@ (8022c3c <DigitalCluster_InitMemory+0x194>)
 8022b92:	2263      	movs	r2, #99	@ 0x63
 8022b94:	701a      	strb	r2, [r3, #0]
	pFanValue = 99;
 8022b96:	4b2a      	ldr	r3, [pc, #168]	@ (8022c40 <DigitalCluster_InitMemory+0x198>)
 8022b98:	2263      	movs	r2, #99	@ 0x63
 8022b9a:	701a      	strb	r2, [r3, #0]
	pCheckControlMessageId = 0;
 8022b9c:	4b29      	ldr	r3, [pc, #164]	@ (8022c44 <DigitalCluster_InitMemory+0x19c>)
 8022b9e:	2200      	movs	r2, #0
 8022ba0:	701a      	strb	r2, [r3, #0]
}
 8022ba2:	bf00      	nop
 8022ba4:	46bd      	mov	sp, r7
 8022ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022baa:	4770      	bx	lr
 8022bac:	10000754 	.word	0x10000754
 8022bb0:	10000758 	.word	0x10000758
 8022bb4:	1000075c 	.word	0x1000075c
 8022bb8:	10000760 	.word	0x10000760
 8022bbc:	10000762 	.word	0x10000762
 8022bc0:	10000764 	.word	0x10000764
 8022bc4:	10000766 	.word	0x10000766
 8022bc8:	10000768 	.word	0x10000768
 8022bcc:	1000076a 	.word	0x1000076a
 8022bd0:	1000076b 	.word	0x1000076b
 8022bd4:	1000076c 	.word	0x1000076c
 8022bd8:	1000076d 	.word	0x1000076d
 8022bdc:	1000076e 	.word	0x1000076e
 8022be0:	1000076f 	.word	0x1000076f
 8022be4:	10000770 	.word	0x10000770
 8022be8:	10000772 	.word	0x10000772
 8022bec:	10000774 	.word	0x10000774
 8022bf0:	10000778 	.word	0x10000778
 8022bf4:	1000077c 	.word	0x1000077c
 8022bf8:	1000077d 	.word	0x1000077d
 8022bfc:	1000077e 	.word	0x1000077e
 8022c00:	10000780 	.word	0x10000780
 8022c04:	10000784 	.word	0x10000784
 8022c08:	10000788 	.word	0x10000788
 8022c0c:	10000789 	.word	0x10000789
 8022c10:	1000078a 	.word	0x1000078a
 8022c14:	1000078b 	.word	0x1000078b
 8022c18:	1000078c 	.word	0x1000078c
 8022c1c:	1000078d 	.word	0x1000078d
 8022c20:	10000790 	.word	0x10000790
 8022c24:	10000794 	.word	0x10000794
 8022c28:	10000799 	.word	0x10000799
 8022c2c:	1000079a 	.word	0x1000079a
 8022c30:	1000079b 	.word	0x1000079b
 8022c34:	1000079c 	.word	0x1000079c
 8022c38:	1000079d 	.word	0x1000079d
 8022c3c:	1000079e 	.word	0x1000079e
 8022c40:	1000079f 	.word	0x1000079f
 8022c44:	1000070e 	.word	0x1000070e

08022c48 <DigitalCluster_MainFunction>:
void DigitalCluster_MainFunction(void)
{
 8022c48:	b580      	push	{r7, lr}
 8022c4a:	b082      	sub	sp, #8
 8022c4c:	af02      	add	r7, sp, #8
	/* Make sure to keep buzzer low when needed. */
	if(DigitalCluster_RxSig_CheckControlMessageId == 0 && DigitalCluster_RxSig_CollisionWarning != 2)
 8022c4e:	4b90      	ldr	r3, [pc, #576]	@ (8022e90 <DigitalCluster_MainFunction+0x248>)
 8022c50:	781b      	ldrb	r3, [r3, #0]
 8022c52:	2b00      	cmp	r3, #0
 8022c54:	d10b      	bne.n	8022c6e <DigitalCluster_MainFunction+0x26>
 8022c56:	4b8f      	ldr	r3, [pc, #572]	@ (8022e94 <DigitalCluster_MainFunction+0x24c>)
 8022c58:	781b      	ldrb	r3, [r3, #0]
 8022c5a:	2b02      	cmp	r3, #2
 8022c5c:	d007      	beq.n	8022c6e <DigitalCluster_MainFunction+0x26>
	{
		HAL_GPIO_WritePin(BUZOUT_GPIO_Port, BUZOUT_Pin, 0);
 8022c5e:	2200      	movs	r2, #0
 8022c60:	2101      	movs	r1, #1
 8022c62:	488d      	ldr	r0, [pc, #564]	@ (8022e98 <DigitalCluster_MainFunction+0x250>)
 8022c64:	f00b fb70 	bl	802e348 <HAL_GPIO_WritePin>
		DigitalCluster_BuzzerState = 0;
 8022c68:	4b8c      	ldr	r3, [pc, #560]	@ (8022e9c <DigitalCluster_MainFunction+0x254>)
 8022c6a:	2200      	movs	r2, #0
 8022c6c:	701a      	strb	r2, [r3, #0]
	else
	{
		/* Do nothing. */
	}
	/* Execute logic only when initialization is succesful. */
	if(0x01 == DigitalCluster_LcdInit)
 8022c6e:	4b8c      	ldr	r3, [pc, #560]	@ (8022ea0 <DigitalCluster_MainFunction+0x258>)
 8022c70:	781b      	ldrb	r3, [r3, #0]
 8022c72:	2b01      	cmp	r3, #1
 8022c74:	f040 8101 	bne.w	8022e7a <DigitalCluster_MainFunction+0x232>
	{
		/* Voltage supply is above 3V. */
		if(29 < DigitalCluster_RxSig_VBat)
 8022c78:	4b8a      	ldr	r3, [pc, #552]	@ (8022ea4 <DigitalCluster_MainFunction+0x25c>)
 8022c7a:	781b      	ldrb	r3, [r3, #0]
 8022c7c:	2b1d      	cmp	r3, #29
 8022c7e:	f240 80f5 	bls.w	8022e6c <DigitalCluster_MainFunction+0x224>
		{
			/* Ignition is above 1. */
			if(0x01 <= DigitalCluster_RxSig_IgnitionStatus)
 8022c82:	4b89      	ldr	r3, [pc, #548]	@ (8022ea8 <DigitalCluster_MainFunction+0x260>)
 8022c84:	781b      	ldrb	r3, [r3, #0]
 8022c86:	2b00      	cmp	r3, #0
 8022c88:	f000 80c3 	beq.w	8022e12 <DigitalCluster_MainFunction+0x1ca>
			{
				DigitalCluster_PreviousIgnStat = DigitalCluster_RxSig_IgnitionStatus;
 8022c8c:	4b86      	ldr	r3, [pc, #536]	@ (8022ea8 <DigitalCluster_MainFunction+0x260>)
 8022c8e:	781a      	ldrb	r2, [r3, #0]
 8022c90:	4b86      	ldr	r3, [pc, #536]	@ (8022eac <DigitalCluster_MainFunction+0x264>)
 8022c92:	701a      	strb	r2, [r3, #0]
				/* Execute reverse camera functionality only after welcoming animation is executed. */
				if(0x01 == DigitalCluster_WelcomeAnimationFlag) RevCam_MainFunction();
 8022c94:	4b86      	ldr	r3, [pc, #536]	@ (8022eb0 <DigitalCluster_MainFunction+0x268>)
 8022c96:	781b      	ldrb	r3, [r3, #0]
 8022c98:	2b01      	cmp	r3, #1
 8022c9a:	d101      	bne.n	8022ca0 <DigitalCluster_MainFunction+0x58>
 8022c9c:	f000 f91c 	bl	8022ed8 <RevCam_MainFunction>
				else
				{
					/* Do nothing. */
				}
				if(0 == DigitalCluster_IsReverseCameraActive)
 8022ca0:	4b84      	ldr	r3, [pc, #528]	@ (8022eb4 <DigitalCluster_MainFunction+0x26c>)
 8022ca2:	781b      	ldrb	r3, [r3, #0]
 8022ca4:	2b00      	cmp	r3, #0
 8022ca6:	f040 80a0 	bne.w	8022dea <DigitalCluster_MainFunction+0x1a2>
				{
					if(pIsReverseCameraActive != DigitalCluster_IsReverseCameraActive)
 8022caa:	4b83      	ldr	r3, [pc, #524]	@ (8022eb8 <DigitalCluster_MainFunction+0x270>)
 8022cac:	781a      	ldrb	r2, [r3, #0]
 8022cae:	4b81      	ldr	r3, [pc, #516]	@ (8022eb4 <DigitalCluster_MainFunction+0x26c>)
 8022cb0:	781b      	ldrb	r3, [r3, #0]
 8022cb2:	429a      	cmp	r2, r3
 8022cb4:	d00e      	beq.n	8022cd4 <DigitalCluster_MainFunction+0x8c>
					{
						/* Restore previous state after reverse camera. */
						pIsReverseCameraActive = DigitalCluster_IsReverseCameraActive;
 8022cb6:	4b7f      	ldr	r3, [pc, #508]	@ (8022eb4 <DigitalCluster_MainFunction+0x26c>)
 8022cb8:	781a      	ldrb	r2, [r3, #0]
 8022cba:	4b7f      	ldr	r3, [pc, #508]	@ (8022eb8 <DigitalCluster_MainFunction+0x270>)
 8022cbc:	701a      	strb	r2, [r3, #0]
						DigitalCluster_InitMemory();
 8022cbe:	f7ff fef3 	bl	8022aa8 <DigitalCluster_InitMemory>
						FsmcH_FillRectangle(0, 0, 320, 240 ,0);
 8022cc2:	2300      	movs	r3, #0
 8022cc4:	9300      	str	r3, [sp, #0]
 8022cc6:	23f0      	movs	r3, #240	@ 0xf0
 8022cc8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8022ccc:	2100      	movs	r1, #0
 8022cce:	2000      	movs	r0, #0
 8022cd0:	f003 fd24 	bl	802671c <FsmcH_FillRectangle>
					else
					{
						/* Do nothing. */
					}
					/* If shutdown was executed, re-initialize. */
					if(0x01 == DigitalCluster_ShutOffDisplayFlag)
 8022cd4:	4b79      	ldr	r3, [pc, #484]	@ (8022ebc <DigitalCluster_MainFunction+0x274>)
 8022cd6:	781b      	ldrb	r3, [r3, #0]
 8022cd8:	2b01      	cmp	r3, #1
 8022cda:	d10d      	bne.n	8022cf8 <DigitalCluster_MainFunction+0xb0>
					{
						DigitalCluster_ShutOffDisplayFlag = 0x00;
 8022cdc:	4b77      	ldr	r3, [pc, #476]	@ (8022ebc <DigitalCluster_MainFunction+0x274>)
 8022cde:	2200      	movs	r2, #0
 8022ce0:	701a      	strb	r2, [r3, #0]
						DigitalCluster_WelcomeAnimationFlag = 0x00;
 8022ce2:	4b73      	ldr	r3, [pc, #460]	@ (8022eb0 <DigitalCluster_MainFunction+0x268>)
 8022ce4:	2200      	movs	r2, #0
 8022ce6:	701a      	strb	r2, [r3, #0]
						DigitalCluster_LeavingAnimationFlag = 0x01;
 8022ce8:	4b75      	ldr	r3, [pc, #468]	@ (8022ec0 <DigitalCluster_MainFunction+0x278>)
 8022cea:	2201      	movs	r2, #1
 8022cec:	701a      	strb	r2, [r3, #0]
						DigitalCluster_LcdInit = 0x00;
 8022cee:	4b6c      	ldr	r3, [pc, #432]	@ (8022ea0 <DigitalCluster_MainFunction+0x258>)
 8022cf0:	2200      	movs	r2, #0
 8022cf2:	701a      	strb	r2, [r3, #0]
						DigitalCluster_InitHandler();
 8022cf4:	f7fe fa3e 	bl	8021174 <DigitalCluster_InitHandler>
					else
					{
						/* Do nothing. */
					}
					/* Execute welcoming animation. */
					if(0x00 == DigitalCluster_WelcomeAnimationFlag)
 8022cf8:	4b6d      	ldr	r3, [pc, #436]	@ (8022eb0 <DigitalCluster_MainFunction+0x268>)
 8022cfa:	781b      	ldrb	r3, [r3, #0]
 8022cfc:	2b00      	cmp	r3, #0
 8022cfe:	d117      	bne.n	8022d30 <DigitalCluster_MainFunction+0xe8>
					{
						/* 4 times per second refresh rate. */
						if(DigitalCluster_MainCounter % 50 == 0 && DigitalCluster_MainCounter != 0)
 8022d00:	4b70      	ldr	r3, [pc, #448]	@ (8022ec4 <DigitalCluster_MainFunction+0x27c>)
 8022d02:	681a      	ldr	r2, [r3, #0]
 8022d04:	4b70      	ldr	r3, [pc, #448]	@ (8022ec8 <DigitalCluster_MainFunction+0x280>)
 8022d06:	fba3 1302 	umull	r1, r3, r3, r2
 8022d0a:	091b      	lsrs	r3, r3, #4
 8022d0c:	2132      	movs	r1, #50	@ 0x32
 8022d0e:	fb01 f303 	mul.w	r3, r1, r3
 8022d12:	1ad3      	subs	r3, r2, r3
 8022d14:	2b00      	cmp	r3, #0
 8022d16:	f040 80b2 	bne.w	8022e7e <DigitalCluster_MainFunction+0x236>
 8022d1a:	4b6a      	ldr	r3, [pc, #424]	@ (8022ec4 <DigitalCluster_MainFunction+0x27c>)
 8022d1c:	681b      	ldr	r3, [r3, #0]
 8022d1e:	2b00      	cmp	r3, #0
 8022d20:	f000 80ad 	beq.w	8022e7e <DigitalCluster_MainFunction+0x236>
						{
							DigitalCluster_WelcomeAnimationHandler();
 8022d24:	f7ff fcd6 	bl	80226d4 <DigitalCluster_WelcomeAnimationHandler>
							DigitalCluster_LeavingAnimationFlag = 0x01;
 8022d28:	4b65      	ldr	r3, [pc, #404]	@ (8022ec0 <DigitalCluster_MainFunction+0x278>)
 8022d2a:	2201      	movs	r2, #1
 8022d2c:	701a      	strb	r2, [r3, #0]
 8022d2e:	e0a6      	b.n	8022e7e <DigitalCluster_MainFunction+0x236>
					}
					else
					{
						/* If no self test is requested and the welcoming animation is finished.
						 * Update display mode. */
						if(0 == DigitalCluster_IsSelfTestRequested)
 8022d30:	4b66      	ldr	r3, [pc, #408]	@ (8022ecc <DigitalCluster_MainFunction+0x284>)
 8022d32:	781b      	ldrb	r3, [r3, #0]
 8022d34:	2b00      	cmp	r3, #0
 8022d36:	d155      	bne.n	8022de4 <DigitalCluster_MainFunction+0x19c>
						{
							DigitalCluster_Display_ComfortEcoSport.DisplayType = DigitalCluster_RxSig_DisplayMode;
 8022d38:	4b65      	ldr	r3, [pc, #404]	@ (8022ed0 <DigitalCluster_MainFunction+0x288>)
 8022d3a:	781a      	ldrb	r2, [r3, #0]
 8022d3c:	4b65      	ldr	r3, [pc, #404]	@ (8022ed4 <DigitalCluster_MainFunction+0x28c>)
 8022d3e:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
							if(0 == DigitalCluster_Display_ComfortEcoSport.DisplayType)
 8022d42:	4b64      	ldr	r3, [pc, #400]	@ (8022ed4 <DigitalCluster_MainFunction+0x28c>)
 8022d44:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8022d48:	2b00      	cmp	r3, #0
 8022d4a:	d10f      	bne.n	8022d6c <DigitalCluster_MainFunction+0x124>
							{
								DigitalCluster_Display_ComfortEcoSport.DisplayColor = TFT_IVORY;
 8022d4c:	4b61      	ldr	r3, [pc, #388]	@ (8022ed4 <DigitalCluster_MainFunction+0x28c>)
 8022d4e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8022d52:	f8a3 211a 	strh.w	r2, [r3, #282]	@ 0x11a
								DigitalCluster_Display_ComfortEcoSport.DisplayVehSpeedColor = TFT_FIREBRICK;
 8022d56:	4b5f      	ldr	r3, [pc, #380]	@ (8022ed4 <DigitalCluster_MainFunction+0x28c>)
 8022d58:	f24b 1204 	movw	r2, #45316	@ 0xb104
 8022d5c:	f8a3 211e 	strh.w	r2, [r3, #286]	@ 0x11e
								DigitalCluster_Display_ComfortEcoSport.DisplayRPMColor = TFT_PALEGOLDENROD;
 8022d60:	4b5c      	ldr	r3, [pc, #368]	@ (8022ed4 <DigitalCluster_MainFunction+0x28c>)
 8022d62:	f64e 7255 	movw	r2, #61269	@ 0xef55
 8022d66:	f8a3 211c 	strh.w	r2, [r3, #284]	@ 0x11c
 8022d6a:	e028      	b.n	8022dbe <DigitalCluster_MainFunction+0x176>
							}
							else if(1 == DigitalCluster_Display_ComfortEcoSport.DisplayType)
 8022d6c:	4b59      	ldr	r3, [pc, #356]	@ (8022ed4 <DigitalCluster_MainFunction+0x28c>)
 8022d6e:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8022d72:	2b01      	cmp	r3, #1
 8022d74:	d10f      	bne.n	8022d96 <DigitalCluster_MainFunction+0x14e>
							{
								DigitalCluster_Display_ComfortEcoSport.DisplayColor = TFT_WHITESMOKE;
 8022d76:	4b57      	ldr	r3, [pc, #348]	@ (8022ed4 <DigitalCluster_MainFunction+0x28c>)
 8022d78:	f24f 72be 	movw	r2, #63422	@ 0xf7be
 8022d7c:	f8a3 211a 	strh.w	r2, [r3, #282]	@ 0x11a
								DigitalCluster_Display_ComfortEcoSport.DisplayVehSpeedColor = TFT_ORANGE;
 8022d80:	4b54      	ldr	r3, [pc, #336]	@ (8022ed4 <DigitalCluster_MainFunction+0x28c>)
 8022d82:	f64f 5220 	movw	r2, #64800	@ 0xfd20
 8022d86:	f8a3 211e 	strh.w	r2, [r3, #286]	@ 0x11e
								DigitalCluster_Display_ComfortEcoSport.DisplayRPMColor = TFT_RED;
 8022d8a:	4b52      	ldr	r3, [pc, #328]	@ (8022ed4 <DigitalCluster_MainFunction+0x28c>)
 8022d8c:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8022d90:	f8a3 211c 	strh.w	r2, [r3, #284]	@ 0x11c
 8022d94:	e013      	b.n	8022dbe <DigitalCluster_MainFunction+0x176>
							}
							else if(2 == DigitalCluster_Display_ComfortEcoSport.DisplayType)
 8022d96:	4b4f      	ldr	r3, [pc, #316]	@ (8022ed4 <DigitalCluster_MainFunction+0x28c>)
 8022d98:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8022d9c:	2b02      	cmp	r3, #2
 8022d9e:	d10e      	bne.n	8022dbe <DigitalCluster_MainFunction+0x176>
							{
								DigitalCluster_Display_ComfortEcoSport.DisplayColor = TFT_ALICEBLUE;
 8022da0:	4b4c      	ldr	r3, [pc, #304]	@ (8022ed4 <DigitalCluster_MainFunction+0x28c>)
 8022da2:	f24f 72df 	movw	r2, #63455	@ 0xf7df
 8022da6:	f8a3 211a 	strh.w	r2, [r3, #282]	@ 0x11a
								DigitalCluster_Display_ComfortEcoSport.DisplayVehSpeedColor = TFT_SKYBLUE;
 8022daa:	4b4a      	ldr	r3, [pc, #296]	@ (8022ed4 <DigitalCluster_MainFunction+0x28c>)
 8022dac:	f248 627d 	movw	r2, #34429	@ 0x867d
 8022db0:	f8a3 211e 	strh.w	r2, [r3, #286]	@ 0x11e
								DigitalCluster_Display_ComfortEcoSport.DisplayRPMColor = TFT_AQUA;
 8022db4:	4b47      	ldr	r3, [pc, #284]	@ (8022ed4 <DigitalCluster_MainFunction+0x28c>)
 8022db6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8022dba:	f8a3 211c 	strh.w	r2, [r3, #284]	@ 0x11c
							else
							{
								/* Do nothing. */
							}
							/* 4 times per second refresh displayable information. */
							if(DigitalCluster_MainCounter % 50 == 0 && DigitalCluster_MainCounter != 0) DigitalCluster_CSEHandler();
 8022dbe:	4b41      	ldr	r3, [pc, #260]	@ (8022ec4 <DigitalCluster_MainFunction+0x27c>)
 8022dc0:	681a      	ldr	r2, [r3, #0]
 8022dc2:	4b41      	ldr	r3, [pc, #260]	@ (8022ec8 <DigitalCluster_MainFunction+0x280>)
 8022dc4:	fba3 1302 	umull	r1, r3, r3, r2
 8022dc8:	091b      	lsrs	r3, r3, #4
 8022dca:	2132      	movs	r1, #50	@ 0x32
 8022dcc:	fb01 f303 	mul.w	r3, r1, r3
 8022dd0:	1ad3      	subs	r3, r2, r3
 8022dd2:	2b00      	cmp	r3, #0
 8022dd4:	d153      	bne.n	8022e7e <DigitalCluster_MainFunction+0x236>
 8022dd6:	4b3b      	ldr	r3, [pc, #236]	@ (8022ec4 <DigitalCluster_MainFunction+0x27c>)
 8022dd8:	681b      	ldr	r3, [r3, #0]
 8022dda:	2b00      	cmp	r3, #0
 8022ddc:	d04f      	beq.n	8022e7e <DigitalCluster_MainFunction+0x236>
 8022dde:	f7ff fc29 	bl	8022634 <DigitalCluster_CSEHandler>
 8022de2:	e04c      	b.n	8022e7e <DigitalCluster_MainFunction+0x236>
							else
							{
								/* Do nothing. */
							}
						}
						else DigitalCluster_SelfTest();
 8022de4:	f7ff fdfc 	bl	80229e0 <DigitalCluster_SelfTest>
 8022de8:	e049      	b.n	8022e7e <DigitalCluster_MainFunction+0x236>
					}
				}
				else
				{
					/* Keep track of previous reverse camera state. */
					if(pIsReverseCameraActive != DigitalCluster_IsReverseCameraActive)
 8022dea:	4b33      	ldr	r3, [pc, #204]	@ (8022eb8 <DigitalCluster_MainFunction+0x270>)
 8022dec:	781a      	ldrb	r2, [r3, #0]
 8022dee:	4b31      	ldr	r3, [pc, #196]	@ (8022eb4 <DigitalCluster_MainFunction+0x26c>)
 8022df0:	781b      	ldrb	r3, [r3, #0]
 8022df2:	429a      	cmp	r2, r3
 8022df4:	d043      	beq.n	8022e7e <DigitalCluster_MainFunction+0x236>
					{
						pIsReverseCameraActive = DigitalCluster_IsReverseCameraActive;
 8022df6:	4b2f      	ldr	r3, [pc, #188]	@ (8022eb4 <DigitalCluster_MainFunction+0x26c>)
 8022df8:	781a      	ldrb	r2, [r3, #0]
 8022dfa:	4b2f      	ldr	r3, [pc, #188]	@ (8022eb8 <DigitalCluster_MainFunction+0x270>)
 8022dfc:	701a      	strb	r2, [r3, #0]
						FsmcH_FillRectangle(0, 0, 320, 240 ,0);
 8022dfe:	2300      	movs	r3, #0
 8022e00:	9300      	str	r3, [sp, #0]
 8022e02:	23f0      	movs	r3, #240	@ 0xf0
 8022e04:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8022e08:	2100      	movs	r1, #0
 8022e0a:	2000      	movs	r0, #0
 8022e0c:	f003 fc86 	bl	802671c <FsmcH_FillRectangle>
 8022e10:	e035      	b.n	8022e7e <DigitalCluster_MainFunction+0x236>
					{
						/* Do nothing. */
					}
				}
			}/* Prepare for shutdown and leaving animation. */
			else if(0x00 == DigitalCluster_RxSig_IgnitionStatus && 0x00 != DigitalCluster_PreviousIgnStat)
 8022e12:	4b25      	ldr	r3, [pc, #148]	@ (8022ea8 <DigitalCluster_MainFunction+0x260>)
 8022e14:	781b      	ldrb	r3, [r3, #0]
 8022e16:	2b00      	cmp	r3, #0
 8022e18:	d131      	bne.n	8022e7e <DigitalCluster_MainFunction+0x236>
 8022e1a:	4b24      	ldr	r3, [pc, #144]	@ (8022eac <DigitalCluster_MainFunction+0x264>)
 8022e1c:	781b      	ldrb	r3, [r3, #0]
 8022e1e:	2b00      	cmp	r3, #0
 8022e20:	d02d      	beq.n	8022e7e <DigitalCluster_MainFunction+0x236>
			{
				DigitalCluster_IsReverseCameraActive = 0;
 8022e22:	4b24      	ldr	r3, [pc, #144]	@ (8022eb4 <DigitalCluster_MainFunction+0x26c>)
 8022e24:	2200      	movs	r2, #0
 8022e26:	701a      	strb	r2, [r3, #0]
				if(0x01 == DigitalCluster_LeavingAnimationFlag)
 8022e28:	4b25      	ldr	r3, [pc, #148]	@ (8022ec0 <DigitalCluster_MainFunction+0x278>)
 8022e2a:	781b      	ldrb	r3, [r3, #0]
 8022e2c:	2b01      	cmp	r3, #1
 8022e2e:	d112      	bne.n	8022e56 <DigitalCluster_MainFunction+0x20e>
				{
					if(DigitalCluster_MainCounter % 50 == 0 && DigitalCluster_MainCounter != 0) DigitalCluster_LeavingAnimationHandler();
 8022e30:	4b24      	ldr	r3, [pc, #144]	@ (8022ec4 <DigitalCluster_MainFunction+0x27c>)
 8022e32:	681a      	ldr	r2, [r3, #0]
 8022e34:	4b24      	ldr	r3, [pc, #144]	@ (8022ec8 <DigitalCluster_MainFunction+0x280>)
 8022e36:	fba3 1302 	umull	r1, r3, r3, r2
 8022e3a:	091b      	lsrs	r3, r3, #4
 8022e3c:	2132      	movs	r1, #50	@ 0x32
 8022e3e:	fb01 f303 	mul.w	r3, r1, r3
 8022e42:	1ad3      	subs	r3, r2, r3
 8022e44:	2b00      	cmp	r3, #0
 8022e46:	d11a      	bne.n	8022e7e <DigitalCluster_MainFunction+0x236>
 8022e48:	4b1e      	ldr	r3, [pc, #120]	@ (8022ec4 <DigitalCluster_MainFunction+0x27c>)
 8022e4a:	681b      	ldr	r3, [r3, #0]
 8022e4c:	2b00      	cmp	r3, #0
 8022e4e:	d016      	beq.n	8022e7e <DigitalCluster_MainFunction+0x236>
 8022e50:	f7ff fca0 	bl	8022794 <DigitalCluster_LeavingAnimationHandler>
 8022e54:	e013      	b.n	8022e7e <DigitalCluster_MainFunction+0x236>
					else
					{
						/* Do nothing. */
					}
				}
				else  if(0x02 == DigitalCluster_LeavingAnimationFlag)
 8022e56:	4b1a      	ldr	r3, [pc, #104]	@ (8022ec0 <DigitalCluster_MainFunction+0x278>)
 8022e58:	781b      	ldrb	r3, [r3, #0]
 8022e5a:	2b02      	cmp	r3, #2
 8022e5c:	d10f      	bne.n	8022e7e <DigitalCluster_MainFunction+0x236>
				{
					if(0x00 == DigitalCluster_ShutOffDisplayFlag) DigitalCluster_ShutOffDisplay();
 8022e5e:	4b17      	ldr	r3, [pc, #92]	@ (8022ebc <DigitalCluster_MainFunction+0x274>)
 8022e60:	781b      	ldrb	r3, [r3, #0]
 8022e62:	2b00      	cmp	r3, #0
 8022e64:	d10b      	bne.n	8022e7e <DigitalCluster_MainFunction+0x236>
 8022e66:	f7ff fc0f 	bl	8022688 <DigitalCluster_ShutOffDisplay>
 8022e6a:	e008      	b.n	8022e7e <DigitalCluster_MainFunction+0x236>
				/* Do nothing. */
			}
		}
		else
		{
			if(0x00 == DigitalCluster_ShutOffDisplayFlag) DigitalCluster_ShutOffDisplay();
 8022e6c:	4b13      	ldr	r3, [pc, #76]	@ (8022ebc <DigitalCluster_MainFunction+0x274>)
 8022e6e:	781b      	ldrb	r3, [r3, #0]
 8022e70:	2b00      	cmp	r3, #0
 8022e72:	d104      	bne.n	8022e7e <DigitalCluster_MainFunction+0x236>
 8022e74:	f7ff fc08 	bl	8022688 <DigitalCluster_ShutOffDisplay>
 8022e78:	e001      	b.n	8022e7e <DigitalCluster_MainFunction+0x236>
			{
				/* Do nothing. */
			}
		}
	}
	else DigitalCluster_InitHandler();
 8022e7a:	f7fe f97b 	bl	8021174 <DigitalCluster_InitHandler>
	DigitalCluster_MainCounter++;
 8022e7e:	4b11      	ldr	r3, [pc, #68]	@ (8022ec4 <DigitalCluster_MainFunction+0x27c>)
 8022e80:	681b      	ldr	r3, [r3, #0]
 8022e82:	3301      	adds	r3, #1
 8022e84:	4a0f      	ldr	r2, [pc, #60]	@ (8022ec4 <DigitalCluster_MainFunction+0x27c>)
 8022e86:	6013      	str	r3, [r2, #0]
}
 8022e88:	bf00      	nop
 8022e8a:	46bd      	mov	sp, r7
 8022e8c:	bd80      	pop	{r7, pc}
 8022e8e:	bf00      	nop
 8022e90:	1000070d 	.word	0x1000070d
 8022e94:	1000070b 	.word	0x1000070b
 8022e98:	40020800 	.word	0x40020800
 8022e9c:	10000738 	.word	0x10000738
 8022ea0:	10000700 	.word	0x10000700
 8022ea4:	10000703 	.word	0x10000703
 8022ea8:	10000702 	.word	0x10000702
 8022eac:	10000726 	.word	0x10000726
 8022eb0:	100006fd 	.word	0x100006fd
 8022eb4:	10000737 	.word	0x10000737
 8022eb8:	10000798 	.word	0x10000798
 8022ebc:	100006fc 	.word	0x100006fc
 8022ec0:	100006fe 	.word	0x100006fe
 8022ec4:	1000071c 	.word	0x1000071c
 8022ec8:	51eb851f 	.word	0x51eb851f
 8022ecc:	10000728 	.word	0x10000728
 8022ed0:	1000070a 	.word	0x1000070a
 8022ed4:	100005dc 	.word	0x100005dc

08022ed8 <RevCam_MainFunction>:
extern uint8 DcmiH_OV7670_Start(uint32 capMode, uint32 destAddress);
extern uint8 DcmiH_OV7670_Stop();
extern uint8 DcmiH_OV7670_InitHandler();

void RevCam_MainFunction(void)
{
 8022ed8:	b580      	push	{r7, lr}
 8022eda:	af00      	add	r7, sp, #0
	static uint16* drawAddr = NULL;
	static uint8 firstCall = 0;
	/* Initialize at first call of main function to speed up the process. */
	if(0 == RevCam_MainCounter) RevCam_InitStatus = DcmiH_OV7670_InitHandler();
 8022edc:	4b27      	ldr	r3, [pc, #156]	@ (8022f7c <RevCam_MainFunction+0xa4>)
 8022ede:	681b      	ldr	r3, [r3, #0]
 8022ee0:	2b00      	cmp	r3, #0
 8022ee2:	d105      	bne.n	8022ef0 <RevCam_MainFunction+0x18>
 8022ee4:	f002 fe6c 	bl	8025bc0 <DcmiH_OV7670_InitHandler>
 8022ee8:	4603      	mov	r3, r0
 8022eea:	461a      	mov	r2, r3
 8022eec:	4b24      	ldr	r3, [pc, #144]	@ (8022f80 <RevCam_MainFunction+0xa8>)
 8022eee:	701a      	strb	r2, [r3, #0]
	else
	{
		/* Do nothing. */
	}
	/* If initialization is successful. */
	if(0 == RevCam_InitStatus && 0 == RevCam_DcmiStatus && 4 != RevCam_I2cStatus)
 8022ef0:	4b23      	ldr	r3, [pc, #140]	@ (8022f80 <RevCam_MainFunction+0xa8>)
 8022ef2:	781b      	ldrb	r3, [r3, #0]
 8022ef4:	2b00      	cmp	r3, #0
 8022ef6:	d134      	bne.n	8022f62 <RevCam_MainFunction+0x8a>
 8022ef8:	4b22      	ldr	r3, [pc, #136]	@ (8022f84 <RevCam_MainFunction+0xac>)
 8022efa:	681b      	ldr	r3, [r3, #0]
 8022efc:	2b00      	cmp	r3, #0
 8022efe:	d130      	bne.n	8022f62 <RevCam_MainFunction+0x8a>
 8022f00:	4b21      	ldr	r3, [pc, #132]	@ (8022f88 <RevCam_MainFunction+0xb0>)
 8022f02:	681b      	ldr	r3, [r3, #0]
 8022f04:	2b04      	cmp	r3, #4
 8022f06:	d02c      	beq.n	8022f62 <RevCam_MainFunction+0x8a>
	{
		/* Get address of ILI9341. */
		if(0 == firstCall)
 8022f08:	4b20      	ldr	r3, [pc, #128]	@ (8022f8c <RevCam_MainFunction+0xb4>)
 8022f0a:	781b      	ldrb	r3, [r3, #0]
 8022f0c:	2b00      	cmp	r3, #0
 8022f0e:	d107      	bne.n	8022f20 <RevCam_MainFunction+0x48>
		{
			drawAddr = FsmcH_GetDrawAddress();
 8022f10:	f003 fc42 	bl	8026798 <FsmcH_GetDrawAddress>
 8022f14:	4603      	mov	r3, r0
 8022f16:	4a1e      	ldr	r2, [pc, #120]	@ (8022f90 <RevCam_MainFunction+0xb8>)
 8022f18:	6013      	str	r3, [r2, #0]
			firstCall = 1;
 8022f1a:	4b1c      	ldr	r3, [pc, #112]	@ (8022f8c <RevCam_MainFunction+0xb4>)
 8022f1c:	2201      	movs	r2, #1
 8022f1e:	701a      	strb	r2, [r3, #0]
		else
		{
			/* Do nothing. */
		}
		/* Display reverse camera if requested. */
		if((0x01 == RevCam_RxSig_ReverseCameraRequest || 0x03 == DigitalCluster_RxSig_Gear) && 0x01 <= DigitalCluster_RxSig_IgnitionStatus)
 8022f20:	4b1c      	ldr	r3, [pc, #112]	@ (8022f94 <RevCam_MainFunction+0xbc>)
 8022f22:	781b      	ldrb	r3, [r3, #0]
 8022f24:	2b01      	cmp	r3, #1
 8022f26:	d003      	beq.n	8022f30 <RevCam_MainFunction+0x58>
 8022f28:	4b1b      	ldr	r3, [pc, #108]	@ (8022f98 <RevCam_MainFunction+0xc0>)
 8022f2a:	781b      	ldrb	r3, [r3, #0]
 8022f2c:	2b03      	cmp	r3, #3
 8022f2e:	d111      	bne.n	8022f54 <RevCam_MainFunction+0x7c>
 8022f30:	4b1a      	ldr	r3, [pc, #104]	@ (8022f9c <RevCam_MainFunction+0xc4>)
 8022f32:	781b      	ldrb	r3, [r3, #0]
 8022f34:	2b00      	cmp	r3, #0
 8022f36:	d00d      	beq.n	8022f54 <RevCam_MainFunction+0x7c>
		{
			if(0 == DigitalCluster_IsReverseCameraActive)
 8022f38:	4b19      	ldr	r3, [pc, #100]	@ (8022fa0 <RevCam_MainFunction+0xc8>)
 8022f3a:	781b      	ldrb	r3, [r3, #0]
 8022f3c:	2b00      	cmp	r3, #0
 8022f3e:	d10f      	bne.n	8022f60 <RevCam_MainFunction+0x88>
			{
				DigitalCluster_IsReverseCameraActive = 1;
 8022f40:	4b17      	ldr	r3, [pc, #92]	@ (8022fa0 <RevCam_MainFunction+0xc8>)
 8022f42:	2201      	movs	r2, #1
 8022f44:	701a      	strb	r2, [r3, #0]
				DcmiH_OV7670_Start(0, (uint32)drawAddr);
 8022f46:	4b12      	ldr	r3, [pc, #72]	@ (8022f90 <RevCam_MainFunction+0xb8>)
 8022f48:	681b      	ldr	r3, [r3, #0]
 8022f4a:	4619      	mov	r1, r3
 8022f4c:	2000      	movs	r0, #0
 8022f4e:	f002 fee9 	bl	8025d24 <DcmiH_OV7670_Start>
			if(0 == DigitalCluster_IsReverseCameraActive)
 8022f52:	e005      	b.n	8022f60 <RevCam_MainFunction+0x88>
				/* Do nothing. */
			}
		}
		else
		{
			DigitalCluster_IsReverseCameraActive = 0;
 8022f54:	4b12      	ldr	r3, [pc, #72]	@ (8022fa0 <RevCam_MainFunction+0xc8>)
 8022f56:	2200      	movs	r2, #0
 8022f58:	701a      	strb	r2, [r3, #0]
			DcmiH_OV7670_Stop();
 8022f5a:	f002 ff11 	bl	8025d80 <DcmiH_OV7670_Stop>
		if((0x01 == RevCam_RxSig_ReverseCameraRequest || 0x03 == DigitalCluster_RxSig_Gear) && 0x01 <= DigitalCluster_RxSig_IgnitionStatus)
 8022f5e:	e006      	b.n	8022f6e <RevCam_MainFunction+0x96>
 8022f60:	e005      	b.n	8022f6e <RevCam_MainFunction+0x96>
		}
	}/* Initialization retries in case of failure. */
	else RevCam_InitStatus = DcmiH_OV7670_InitHandler();
 8022f62:	f002 fe2d 	bl	8025bc0 <DcmiH_OV7670_InitHandler>
 8022f66:	4603      	mov	r3, r0
 8022f68:	461a      	mov	r2, r3
 8022f6a:	4b05      	ldr	r3, [pc, #20]	@ (8022f80 <RevCam_MainFunction+0xa8>)
 8022f6c:	701a      	strb	r2, [r3, #0]
	 * God knows what noise goes near the pin-out of the OV7670 and the STM32F407VET6 MCU board.
	 * I2C is bad in general
	 * DCMI is not great either
	 * */

	RevCam_MainCounter++;
 8022f6e:	4b03      	ldr	r3, [pc, #12]	@ (8022f7c <RevCam_MainFunction+0xa4>)
 8022f70:	681b      	ldr	r3, [r3, #0]
 8022f72:	3301      	adds	r3, #1
 8022f74:	4a01      	ldr	r2, [pc, #4]	@ (8022f7c <RevCam_MainFunction+0xa4>)
 8022f76:	6013      	str	r3, [r2, #0]
}
 8022f78:	bf00      	nop
 8022f7a:	bd80      	pop	{r7, pc}
 8022f7c:	100007a0 	.word	0x100007a0
 8022f80:	100007b0 	.word	0x100007b0
 8022f84:	100007a8 	.word	0x100007a8
 8022f88:	100007ac 	.word	0x100007ac
 8022f8c:	2000009c 	.word	0x2000009c
 8022f90:	200000a0 	.word	0x200000a0
 8022f94:	100007a4 	.word	0x100007a4
 8022f98:	10000704 	.word	0x10000704
 8022f9c:	10000702 	.word	0x10000702
 8022fa0:	10000737 	.word	0x10000737

08022fa4 <CanH_MainFunction>:
void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan);
void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan);
void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan);

void CanH_MainFunction(void)
{
 8022fa4:	b580      	push	{r7, lr}
 8022fa6:	b084      	sub	sp, #16
 8022fa8:	af00      	add	r7, sp, #0
	static uint32 notificationLocal = 0;
	CanH_Status = HAL_CAN_GetState(&hcan1);
 8022faa:	48a3      	ldr	r0, [pc, #652]	@ (8023238 <CanH_MainFunction+0x294>)
 8022fac:	f007 fc05 	bl	802a7ba <HAL_CAN_GetState>
 8022fb0:	4603      	mov	r3, r0
 8022fb2:	461a      	mov	r2, r3
 8022fb4:	4ba1      	ldr	r3, [pc, #644]	@ (802323c <CanH_MainFunction+0x298>)
 8022fb6:	601a      	str	r2, [r3, #0]
	if(0x00 == CanH_MainCounter)
 8022fb8:	4ba1      	ldr	r3, [pc, #644]	@ (8023240 <CanH_MainFunction+0x29c>)
 8022fba:	681b      	ldr	r3, [r3, #0]
 8022fbc:	2b00      	cmp	r3, #0
 8022fbe:	d10e      	bne.n	8022fde <CanH_MainFunction+0x3a>
	{
		HAL_CAN_Start(&hcan1);
 8022fc0:	489d      	ldr	r0, [pc, #628]	@ (8023238 <CanH_MainFunction+0x294>)
 8022fc2:	f006 fe85 	bl	8029cd0 <HAL_CAN_Start>
		notificationLocal = CAN_IT_RX_FIFO0_MSG_PENDING |
 8022fc6:	4b9f      	ldr	r3, [pc, #636]	@ (8023244 <CanH_MainFunction+0x2a0>)
 8022fc8:	4a9f      	ldr	r2, [pc, #636]	@ (8023248 <CanH_MainFunction+0x2a4>)
 8022fca:	601a      	str	r2, [r3, #0]
				CAN_IT_ERROR_WARNING |
				CAN_IT_ERROR_PASSIVE |
				CAN_IT_BUSOFF |
				CAN_IT_LAST_ERROR_CODE |
				CAN_IT_ERROR;
		HAL_CAN_ActivateNotification(&hcan1, notificationLocal);
 8022fcc:	4b9d      	ldr	r3, [pc, #628]	@ (8023244 <CanH_MainFunction+0x2a0>)
 8022fce:	681b      	ldr	r3, [r3, #0]
 8022fd0:	4619      	mov	r1, r3
 8022fd2:	4899      	ldr	r0, [pc, #612]	@ (8023238 <CanH_MainFunction+0x294>)
 8022fd4:	f007 f996 	bl	802a304 <HAL_CAN_ActivateNotification>
		CanH_CommunicationState = PARTIAL_COMMUNICATION;
 8022fd8:	4b9c      	ldr	r3, [pc, #624]	@ (802324c <CanH_MainFunction+0x2a8>)
 8022fda:	2203      	movs	r2, #3
 8022fdc:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* Do nothing. */
	}
	if(0x04 != HAL_CAN_GetError(&hcan1) && (FULL_COMMUNICATION == CanH_CommunicationState || PARTIAL_COMMUNICATION == CanH_CommunicationState) && CC_ACTIVE != CanH_CommunicationState)
 8022fde:	4896      	ldr	r0, [pc, #600]	@ (8023238 <CanH_MainFunction+0x294>)
 8022fe0:	f007 fc13 	bl	802a80a <HAL_CAN_GetError>
 8022fe4:	4603      	mov	r3, r0
 8022fe6:	2b04      	cmp	r3, #4
 8022fe8:	f000 80fd 	beq.w	80231e6 <CanH_MainFunction+0x242>
 8022fec:	4b97      	ldr	r3, [pc, #604]	@ (802324c <CanH_MainFunction+0x2a8>)
 8022fee:	781b      	ldrb	r3, [r3, #0]
 8022ff0:	2b02      	cmp	r3, #2
 8022ff2:	d004      	beq.n	8022ffe <CanH_MainFunction+0x5a>
 8022ff4:	4b95      	ldr	r3, [pc, #596]	@ (802324c <CanH_MainFunction+0x2a8>)
 8022ff6:	781b      	ldrb	r3, [r3, #0]
 8022ff8:	2b03      	cmp	r3, #3
 8022ffa:	f040 80f4 	bne.w	80231e6 <CanH_MainFunction+0x242>
 8022ffe:	4b93      	ldr	r3, [pc, #588]	@ (802324c <CanH_MainFunction+0x2a8>)
 8023000:	781b      	ldrb	r3, [r3, #0]
 8023002:	2b04      	cmp	r3, #4
 8023004:	f000 80ef 	beq.w	80231e6 <CanH_MainFunction+0x242>
	{
		for(uint8 i = 0; i < 21; i++) CanH_ErrArr[i] = 0;
 8023008:	2300      	movs	r3, #0
 802300a:	73fb      	strb	r3, [r7, #15]
 802300c:	e007      	b.n	802301e <CanH_MainFunction+0x7a>
 802300e:	7bfb      	ldrb	r3, [r7, #15]
 8023010:	4a8f      	ldr	r2, [pc, #572]	@ (8023250 <CanH_MainFunction+0x2ac>)
 8023012:	2100      	movs	r1, #0
 8023014:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8023018:	7bfb      	ldrb	r3, [r7, #15]
 802301a:	3301      	adds	r3, #1
 802301c:	73fb      	strb	r3, [r7, #15]
 802301e:	7bfb      	ldrb	r3, [r7, #15]
 8023020:	2b14      	cmp	r3, #20
 8023022:	d9f4      	bls.n	802300e <CanH_MainFunction+0x6a>
		CanH_BodyState_MissCnt++;
 8023024:	4b8b      	ldr	r3, [pc, #556]	@ (8023254 <CanH_MainFunction+0x2b0>)
 8023026:	681b      	ldr	r3, [r3, #0]
 8023028:	3301      	adds	r3, #1
 802302a:	4a8a      	ldr	r2, [pc, #552]	@ (8023254 <CanH_MainFunction+0x2b0>)
 802302c:	6013      	str	r3, [r2, #0]
		CanH_VehState_MissCnt++;
 802302e:	4b8a      	ldr	r3, [pc, #552]	@ (8023258 <CanH_MainFunction+0x2b4>)
 8023030:	681b      	ldr	r3, [r3, #0]
 8023032:	3301      	adds	r3, #1
 8023034:	4a88      	ldr	r2, [pc, #544]	@ (8023258 <CanH_MainFunction+0x2b4>)
 8023036:	6013      	str	r3, [r2, #0]
		CanH_DataRecorder_MissCnt++;
 8023038:	4b88      	ldr	r3, [pc, #544]	@ (802325c <CanH_MainFunction+0x2b8>)
 802303a:	681b      	ldr	r3, [r3, #0]
 802303c:	3301      	adds	r3, #1
 802303e:	4a87      	ldr	r2, [pc, #540]	@ (802325c <CanH_MainFunction+0x2b8>)
 8023040:	6013      	str	r3, [r2, #0]
		CanH_BodyState2_MissCnt++;
 8023042:	4b87      	ldr	r3, [pc, #540]	@ (8023260 <CanH_MainFunction+0x2bc>)
 8023044:	681b      	ldr	r3, [r3, #0]
 8023046:	3301      	adds	r3, #1
 8023048:	4a85      	ldr	r2, [pc, #532]	@ (8023260 <CanH_MainFunction+0x2bc>)
 802304a:	6013      	str	r3, [r2, #0]
		if(200 < CanH_BodyState_MissCnt) Dem_SetDtc(DEM_BODYSTATE_MESSAGEMISSING_ID, 1, 1);
 802304c:	4b81      	ldr	r3, [pc, #516]	@ (8023254 <CanH_MainFunction+0x2b0>)
 802304e:	681b      	ldr	r3, [r3, #0]
 8023050:	2bc8      	cmp	r3, #200	@ 0xc8
 8023052:	d905      	bls.n	8023060 <CanH_MainFunction+0xbc>
 8023054:	2201      	movs	r2, #1
 8023056:	2101      	movs	r1, #1
 8023058:	2006      	movs	r0, #6
 802305a:	f001 ff6f 	bl	8024f3c <Dem_SetDtc>
 802305e:	e004      	b.n	802306a <CanH_MainFunction+0xc6>
		else Dem_SetDtc(DEM_BODYSTATE_MESSAGEMISSING_ID, 1, 0);
 8023060:	2200      	movs	r2, #0
 8023062:	2101      	movs	r1, #1
 8023064:	2006      	movs	r0, #6
 8023066:	f001 ff69 	bl	8024f3c <Dem_SetDtc>
		if(200 < CanH_VehState_MissCnt) Dem_SetDtc(DEM_VEHSTATE_MESSAGEMISSING_ID, 1, 1);
 802306a:	4b7b      	ldr	r3, [pc, #492]	@ (8023258 <CanH_MainFunction+0x2b4>)
 802306c:	681b      	ldr	r3, [r3, #0]
 802306e:	2bc8      	cmp	r3, #200	@ 0xc8
 8023070:	d905      	bls.n	802307e <CanH_MainFunction+0xda>
 8023072:	2201      	movs	r2, #1
 8023074:	2101      	movs	r1, #1
 8023076:	2005      	movs	r0, #5
 8023078:	f001 ff60 	bl	8024f3c <Dem_SetDtc>
 802307c:	e004      	b.n	8023088 <CanH_MainFunction+0xe4>
		else Dem_SetDtc(DEM_VEHSTATE_MESSAGEMISSING_ID, 1, 0);
 802307e:	2200      	movs	r2, #0
 8023080:	2101      	movs	r1, #1
 8023082:	2005      	movs	r0, #5
 8023084:	f001 ff5a 	bl	8024f3c <Dem_SetDtc>
		if(200 < CanH_DataRecorder_MissCnt) Dem_SetDtc(DEM_DATARECORDER_MESSAGEMISSING_ID, 1, 1);
 8023088:	4b74      	ldr	r3, [pc, #464]	@ (802325c <CanH_MainFunction+0x2b8>)
 802308a:	681b      	ldr	r3, [r3, #0]
 802308c:	2bc8      	cmp	r3, #200	@ 0xc8
 802308e:	d905      	bls.n	802309c <CanH_MainFunction+0xf8>
 8023090:	2201      	movs	r2, #1
 8023092:	2101      	movs	r1, #1
 8023094:	2007      	movs	r0, #7
 8023096:	f001 ff51 	bl	8024f3c <Dem_SetDtc>
 802309a:	e004      	b.n	80230a6 <CanH_MainFunction+0x102>
		else Dem_SetDtc(DEM_DATARECORDER_MESSAGEMISSING_ID, 1, 0);
 802309c:	2200      	movs	r2, #0
 802309e:	2101      	movs	r1, #1
 80230a0:	2007      	movs	r0, #7
 80230a2:	f001 ff4b 	bl	8024f3c <Dem_SetDtc>
		if(200 < CanH_BodyState2_MissCnt) Dem_SetDtc(DEM_BODYSTATE2_MESSAGEMISSING_ID, 1, 1);
 80230a6:	4b6e      	ldr	r3, [pc, #440]	@ (8023260 <CanH_MainFunction+0x2bc>)
 80230a8:	681b      	ldr	r3, [r3, #0]
 80230aa:	2bc8      	cmp	r3, #200	@ 0xc8
 80230ac:	d905      	bls.n	80230ba <CanH_MainFunction+0x116>
 80230ae:	2201      	movs	r2, #1
 80230b0:	2101      	movs	r1, #1
 80230b2:	2008      	movs	r0, #8
 80230b4:	f001 ff42 	bl	8024f3c <Dem_SetDtc>
 80230b8:	e004      	b.n	80230c4 <CanH_MainFunction+0x120>
		else Dem_SetDtc(DEM_BODYSTATE2_MESSAGEMISSING_ID, 1, 0);
 80230ba:	2200      	movs	r2, #0
 80230bc:	2101      	movs	r1, #1
 80230be:	2008      	movs	r0, #8
 80230c0:	f001 ff3c 	bl	8024f3c <Dem_SetDtc>
		/* StatusMcuDMU */
		if(0 == CanH_MainCounter % 200)
 80230c4:	4b5e      	ldr	r3, [pc, #376]	@ (8023240 <CanH_MainFunction+0x29c>)
 80230c6:	681a      	ldr	r2, [r3, #0]
 80230c8:	4b66      	ldr	r3, [pc, #408]	@ (8023264 <CanH_MainFunction+0x2c0>)
 80230ca:	fba3 1302 	umull	r1, r3, r3, r2
 80230ce:	099b      	lsrs	r3, r3, #6
 80230d0:	21c8      	movs	r1, #200	@ 0xc8
 80230d2:	fb01 f303 	mul.w	r3, r1, r3
 80230d6:	1ad3      	subs	r3, r2, r3
 80230d8:	2b00      	cmp	r3, #0
 80230da:	d135      	bne.n	8023148 <CanH_MainFunction+0x1a4>
		{
			CanH_TxData[0] = Ain_Vbat * 10;
 80230dc:	4b62      	ldr	r3, [pc, #392]	@ (8023268 <CanH_MainFunction+0x2c4>)
 80230de:	edd3 7a00 	vldr	s15, [r3]
 80230e2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80230e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80230ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80230ee:	edc7 7a01 	vstr	s15, [r7, #4]
 80230f2:	793b      	ldrb	r3, [r7, #4]
 80230f4:	b2da      	uxtb	r2, r3
 80230f6:	4b5d      	ldr	r3, [pc, #372]	@ (802326c <CanH_MainFunction+0x2c8>)
 80230f8:	701a      	strb	r2, [r3, #0]
			CanH_TxData[1] = Ain_McuTemp;
 80230fa:	4b5d      	ldr	r3, [pc, #372]	@ (8023270 <CanH_MainFunction+0x2cc>)
 80230fc:	edd3 7a00 	vldr	s15, [r3]
 8023100:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8023104:	edc7 7a01 	vstr	s15, [r7, #4]
 8023108:	793b      	ldrb	r3, [r7, #4]
 802310a:	b2da      	uxtb	r2, r3
 802310c:	4b57      	ldr	r3, [pc, #348]	@ (802326c <CanH_MainFunction+0x2c8>)
 802310e:	705a      	strb	r2, [r3, #1]
			CanH_TxData[2] = Ain_VrefInt * 10;
 8023110:	4b58      	ldr	r3, [pc, #352]	@ (8023274 <CanH_MainFunction+0x2d0>)
 8023112:	edd3 7a00 	vldr	s15, [r3]
 8023116:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 802311a:	ee67 7a87 	vmul.f32	s15, s15, s14
 802311e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8023122:	edc7 7a01 	vstr	s15, [r7, #4]
 8023126:	793b      	ldrb	r3, [r7, #4]
 8023128:	b2da      	uxtb	r2, r3
 802312a:	4b50      	ldr	r3, [pc, #320]	@ (802326c <CanH_MainFunction+0x2c8>)
 802312c:	709a      	strb	r2, [r3, #2]
			CanH_TxHeader.DLC = 3;
 802312e:	4b52      	ldr	r3, [pc, #328]	@ (8023278 <CanH_MainFunction+0x2d4>)
 8023130:	2203      	movs	r2, #3
 8023132:	611a      	str	r2, [r3, #16]
			CanH_TxHeader.StdId = 0x110;
 8023134:	4b50      	ldr	r3, [pc, #320]	@ (8023278 <CanH_MainFunction+0x2d4>)
 8023136:	f44f 7288 	mov.w	r2, #272	@ 0x110
 802313a:	601a      	str	r2, [r3, #0]
			HAL_CAN_AddTxMessage(&hcan1, &CanH_TxHeader, CanH_TxData, &CanH_TxMailbox);
 802313c:	4b4f      	ldr	r3, [pc, #316]	@ (802327c <CanH_MainFunction+0x2d8>)
 802313e:	4a4b      	ldr	r2, [pc, #300]	@ (802326c <CanH_MainFunction+0x2c8>)
 8023140:	494d      	ldr	r1, [pc, #308]	@ (8023278 <CanH_MainFunction+0x2d4>)
 8023142:	483d      	ldr	r0, [pc, #244]	@ (8023238 <CanH_MainFunction+0x294>)
 8023144:	f006 fe96 	bl	8029e74 <HAL_CAN_AddTxMessage>
		else
		{
			/* Do nothing. */
		}
		/* StatusDigitalCluster */
		if(0 == CanH_MainCounter % 10)
 8023148:	4b3d      	ldr	r3, [pc, #244]	@ (8023240 <CanH_MainFunction+0x29c>)
 802314a:	6819      	ldr	r1, [r3, #0]
 802314c:	4b4c      	ldr	r3, [pc, #304]	@ (8023280 <CanH_MainFunction+0x2dc>)
 802314e:	fba3 2301 	umull	r2, r3, r3, r1
 8023152:	08da      	lsrs	r2, r3, #3
 8023154:	4613      	mov	r3, r2
 8023156:	009b      	lsls	r3, r3, #2
 8023158:	4413      	add	r3, r2
 802315a:	005b      	lsls	r3, r3, #1
 802315c:	1aca      	subs	r2, r1, r3
 802315e:	2a00      	cmp	r2, #0
 8023160:	d119      	bne.n	8023196 <CanH_MainFunction+0x1f2>
		{
			CanH_TxData[0] = DigitalCluster_ReadDisplayPowerMode_RegisterValue;
 8023162:	4b48      	ldr	r3, [pc, #288]	@ (8023284 <CanH_MainFunction+0x2e0>)
 8023164:	781a      	ldrb	r2, [r3, #0]
 8023166:	4b41      	ldr	r3, [pc, #260]	@ (802326c <CanH_MainFunction+0x2c8>)
 8023168:	701a      	strb	r2, [r3, #0]
			CanH_TxData[1] = DigitalCluster_LcdInit;
 802316a:	4b47      	ldr	r3, [pc, #284]	@ (8023288 <CanH_MainFunction+0x2e4>)
 802316c:	781a      	ldrb	r2, [r3, #0]
 802316e:	4b3f      	ldr	r3, [pc, #252]	@ (802326c <CanH_MainFunction+0x2c8>)
 8023170:	705a      	strb	r2, [r3, #1]
			CanH_TxData[2] = DigitalCluster_ReadDisplayStatus_RegisterValue;
 8023172:	4b46      	ldr	r3, [pc, #280]	@ (802328c <CanH_MainFunction+0x2e8>)
 8023174:	881b      	ldrh	r3, [r3, #0]
 8023176:	b2da      	uxtb	r2, r3
 8023178:	4b3c      	ldr	r3, [pc, #240]	@ (802326c <CanH_MainFunction+0x2c8>)
 802317a:	709a      	strb	r2, [r3, #2]
			CanH_TxHeader.DLC = 3;
 802317c:	4b3e      	ldr	r3, [pc, #248]	@ (8023278 <CanH_MainFunction+0x2d4>)
 802317e:	2203      	movs	r2, #3
 8023180:	611a      	str	r2, [r3, #16]
			CanH_TxHeader.StdId = 0x105;
 8023182:	4b3d      	ldr	r3, [pc, #244]	@ (8023278 <CanH_MainFunction+0x2d4>)
 8023184:	f240 1205 	movw	r2, #261	@ 0x105
 8023188:	601a      	str	r2, [r3, #0]
			HAL_CAN_AddTxMessage(&hcan1, &CanH_TxHeader, CanH_TxData, &CanH_TxMailbox);
 802318a:	4b3c      	ldr	r3, [pc, #240]	@ (802327c <CanH_MainFunction+0x2d8>)
 802318c:	4a37      	ldr	r2, [pc, #220]	@ (802326c <CanH_MainFunction+0x2c8>)
 802318e:	493a      	ldr	r1, [pc, #232]	@ (8023278 <CanH_MainFunction+0x2d4>)
 8023190:	4829      	ldr	r0, [pc, #164]	@ (8023238 <CanH_MainFunction+0x294>)
 8023192:	f006 fe6f 	bl	8029e74 <HAL_CAN_AddTxMessage>
		else
		{
			/* Do nothing. */
		}
		/* StatusReverseCamera */
		if(0 == CanH_MainCounter % 20)
 8023196:	4b2a      	ldr	r3, [pc, #168]	@ (8023240 <CanH_MainFunction+0x29c>)
 8023198:	6819      	ldr	r1, [r3, #0]
 802319a:	4b39      	ldr	r3, [pc, #228]	@ (8023280 <CanH_MainFunction+0x2dc>)
 802319c:	fba3 2301 	umull	r2, r3, r3, r1
 80231a0:	091a      	lsrs	r2, r3, #4
 80231a2:	4613      	mov	r3, r2
 80231a4:	009b      	lsls	r3, r3, #2
 80231a6:	4413      	add	r3, r2
 80231a8:	009b      	lsls	r3, r3, #2
 80231aa:	1aca      	subs	r2, r1, r3
 80231ac:	2a00      	cmp	r2, #0
 80231ae:	d11a      	bne.n	80231e6 <CanH_MainFunction+0x242>
		{
			CanH_TxData[0] = (uint8)RevCam_DcmiStatus;
 80231b0:	4b37      	ldr	r3, [pc, #220]	@ (8023290 <CanH_MainFunction+0x2ec>)
 80231b2:	681b      	ldr	r3, [r3, #0]
 80231b4:	b2da      	uxtb	r2, r3
 80231b6:	4b2d      	ldr	r3, [pc, #180]	@ (802326c <CanH_MainFunction+0x2c8>)
 80231b8:	701a      	strb	r2, [r3, #0]
			CanH_TxData[1] = (uint8)RevCam_I2cStatus;
 80231ba:	4b36      	ldr	r3, [pc, #216]	@ (8023294 <CanH_MainFunction+0x2f0>)
 80231bc:	681b      	ldr	r3, [r3, #0]
 80231be:	b2da      	uxtb	r2, r3
 80231c0:	4b2a      	ldr	r3, [pc, #168]	@ (802326c <CanH_MainFunction+0x2c8>)
 80231c2:	705a      	strb	r2, [r3, #1]
			CanH_TxData[2] = RevCam_InitStatus;
 80231c4:	4b34      	ldr	r3, [pc, #208]	@ (8023298 <CanH_MainFunction+0x2f4>)
 80231c6:	781a      	ldrb	r2, [r3, #0]
 80231c8:	4b28      	ldr	r3, [pc, #160]	@ (802326c <CanH_MainFunction+0x2c8>)
 80231ca:	709a      	strb	r2, [r3, #2]
			CanH_TxHeader.DLC = 3;
 80231cc:	4b2a      	ldr	r3, [pc, #168]	@ (8023278 <CanH_MainFunction+0x2d4>)
 80231ce:	2203      	movs	r2, #3
 80231d0:	611a      	str	r2, [r3, #16]
			CanH_TxHeader.StdId = 0x106;
 80231d2:	4b29      	ldr	r3, [pc, #164]	@ (8023278 <CanH_MainFunction+0x2d4>)
 80231d4:	f44f 7283 	mov.w	r2, #262	@ 0x106
 80231d8:	601a      	str	r2, [r3, #0]
			HAL_CAN_AddTxMessage(&hcan1, &CanH_TxHeader, CanH_TxData, &CanH_TxMailbox);
 80231da:	4b28      	ldr	r3, [pc, #160]	@ (802327c <CanH_MainFunction+0x2d8>)
 80231dc:	4a23      	ldr	r2, [pc, #140]	@ (802326c <CanH_MainFunction+0x2c8>)
 80231de:	4926      	ldr	r1, [pc, #152]	@ (8023278 <CanH_MainFunction+0x2d4>)
 80231e0:	4815      	ldr	r0, [pc, #84]	@ (8023238 <CanH_MainFunction+0x294>)
 80231e2:	f006 fe47 	bl	8029e74 <HAL_CAN_AddTxMessage>
	}
	else
	{
		/* Do nothing. */
	}
	if(1000 <= CanH_NoCommCounter) CanH_CommunicationState = NO_COMMUNICATION;
 80231e6:	4b2d      	ldr	r3, [pc, #180]	@ (802329c <CanH_MainFunction+0x2f8>)
 80231e8:	681b      	ldr	r3, [r3, #0]
 80231ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80231ee:	d302      	bcc.n	80231f6 <CanH_MainFunction+0x252>
 80231f0:	4b16      	ldr	r3, [pc, #88]	@ (802324c <CanH_MainFunction+0x2a8>)
 80231f2:	2201      	movs	r2, #1
 80231f4:	701a      	strb	r2, [r3, #0]
	else
	{
		/* Do nothing. */
	}
	if(NO_COMMUNICATION == CanH_CommunicationState) CanH_RequestBusSleep = 1;
 80231f6:	4b15      	ldr	r3, [pc, #84]	@ (802324c <CanH_MainFunction+0x2a8>)
 80231f8:	781b      	ldrb	r3, [r3, #0]
 80231fa:	2b01      	cmp	r3, #1
 80231fc:	d102      	bne.n	8023204 <CanH_MainFunction+0x260>
 80231fe:	4b28      	ldr	r3, [pc, #160]	@ (80232a0 <CanH_MainFunction+0x2fc>)
 8023200:	2201      	movs	r2, #1
 8023202:	701a      	strb	r2, [r3, #0]
	else
	{
		/* Do nothing.  */
	}
	if(1 == CanH_RequestBusSleep && 0 == HAL_CAN_IsSleepActive(&hcan1)) HAL_CAN_RequestSleep(&hcan1);
 8023204:	4b26      	ldr	r3, [pc, #152]	@ (80232a0 <CanH_MainFunction+0x2fc>)
 8023206:	781b      	ldrb	r3, [r3, #0]
 8023208:	2b01      	cmp	r3, #1
 802320a:	d108      	bne.n	802321e <CanH_MainFunction+0x27a>
 802320c:	480a      	ldr	r0, [pc, #40]	@ (8023238 <CanH_MainFunction+0x294>)
 802320e:	f006 fe11 	bl	8029e34 <HAL_CAN_IsSleepActive>
 8023212:	4603      	mov	r3, r0
 8023214:	2b00      	cmp	r3, #0
 8023216:	d102      	bne.n	802321e <CanH_MainFunction+0x27a>
 8023218:	4807      	ldr	r0, [pc, #28]	@ (8023238 <CanH_MainFunction+0x294>)
 802321a:	f006 fde6 	bl	8029dea <HAL_CAN_RequestSleep>
	else
	{
		/* Do nothing. */
	}
	CanH_NoCommCounter++;
 802321e:	4b1f      	ldr	r3, [pc, #124]	@ (802329c <CanH_MainFunction+0x2f8>)
 8023220:	681b      	ldr	r3, [r3, #0]
 8023222:	3301      	adds	r3, #1
 8023224:	4a1d      	ldr	r2, [pc, #116]	@ (802329c <CanH_MainFunction+0x2f8>)
 8023226:	6013      	str	r3, [r2, #0]
	CanH_MainCounter++;
 8023228:	4b05      	ldr	r3, [pc, #20]	@ (8023240 <CanH_MainFunction+0x29c>)
 802322a:	681b      	ldr	r3, [r3, #0]
 802322c:	3301      	adds	r3, #1
 802322e:	4a04      	ldr	r2, [pc, #16]	@ (8023240 <CanH_MainFunction+0x29c>)
 8023230:	6013      	str	r3, [r2, #0]
	for(uint8 i = 0; i < 8; i++) CanH_TxData[i] = 0;
 8023232:	2300      	movs	r3, #0
 8023234:	73bb      	strb	r3, [r7, #14]
 8023236:	e03c      	b.n	80232b2 <CanH_MainFunction+0x30e>
 8023238:	200001a8 	.word	0x200001a8
 802323c:	100007c4 	.word	0x100007c4
 8023240:	100007c0 	.word	0x100007c0
 8023244:	200000a4 	.word	0x200000a4
 8023248:	00038f06 	.word	0x00038f06
 802324c:	10000874 	.word	0x10000874
 8023250:	100007c8 	.word	0x100007c8
 8023254:	100008d8 	.word	0x100008d8
 8023258:	100008d4 	.word	0x100008d4
 802325c:	100008e0 	.word	0x100008e0
 8023260:	100008dc 	.word	0x100008dc
 8023264:	51eb851f 	.word	0x51eb851f
 8023268:	10000b08 	.word	0x10000b08
 802326c:	10000860 	.word	0x10000860
 8023270:	10000b04 	.word	0x10000b04
 8023274:	10000b00 	.word	0x10000b00
 8023278:	10000848 	.word	0x10000848
 802327c:	10000868 	.word	0x10000868
 8023280:	cccccccd 	.word	0xcccccccd
 8023284:	100006ff 	.word	0x100006ff
 8023288:	10000700 	.word	0x10000700
 802328c:	10000718 	.word	0x10000718
 8023290:	100007a8 	.word	0x100007a8
 8023294:	100007ac 	.word	0x100007ac
 8023298:	100007b0 	.word	0x100007b0
 802329c:	10000870 	.word	0x10000870
 80232a0:	1000086c 	.word	0x1000086c
 80232a4:	7bbb      	ldrb	r3, [r7, #14]
 80232a6:	4a07      	ldr	r2, [pc, #28]	@ (80232c4 <CanH_MainFunction+0x320>)
 80232a8:	2100      	movs	r1, #0
 80232aa:	54d1      	strb	r1, [r2, r3]
 80232ac:	7bbb      	ldrb	r3, [r7, #14]
 80232ae:	3301      	adds	r3, #1
 80232b0:	73bb      	strb	r3, [r7, #14]
 80232b2:	7bbb      	ldrb	r3, [r7, #14]
 80232b4:	2b07      	cmp	r3, #7
 80232b6:	d9f5      	bls.n	80232a4 <CanH_MainFunction+0x300>
}
 80232b8:	bf00      	nop
 80232ba:	bf00      	nop
 80232bc:	3710      	adds	r7, #16
 80232be:	46bd      	mov	sp, r7
 80232c0:	bd80      	pop	{r7, pc}
 80232c2:	bf00      	nop
 80232c4:	10000860 	.word	0x10000860

080232c8 <HAL_CAN_ErrorCallback>:
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80232c8:	b580      	push	{r7, lr}
 80232ca:	b082      	sub	sp, #8
 80232cc:	af00      	add	r7, sp, #0
 80232ce:	6078      	str	r0, [r7, #4]
	switch(hcan->ErrorCode)
 80232d0:	687b      	ldr	r3, [r7, #4]
 80232d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80232d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80232d8:	f000 813f 	beq.w	802355a <HAL_CAN_ErrorCallback+0x292>
 80232dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80232e0:	f200 8142 	bhi.w	8023568 <HAL_CAN_ErrorCallback+0x2a0>
 80232e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80232e8:	f000 8130 	beq.w	802354c <HAL_CAN_ErrorCallback+0x284>
 80232ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80232f0:	f200 813a 	bhi.w	8023568 <HAL_CAN_ErrorCallback+0x2a0>
 80232f4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80232f8:	f000 8121 	beq.w	802353e <HAL_CAN_ErrorCallback+0x276>
 80232fc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8023300:	f200 8132 	bhi.w	8023568 <HAL_CAN_ErrorCallback+0x2a0>
 8023304:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8023308:	f000 8112 	beq.w	8023530 <HAL_CAN_ErrorCallback+0x268>
 802330c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8023310:	f200 812a 	bhi.w	8023568 <HAL_CAN_ErrorCallback+0x2a0>
 8023314:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8023318:	f000 8103 	beq.w	8023522 <HAL_CAN_ErrorCallback+0x25a>
 802331c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8023320:	f200 8122 	bhi.w	8023568 <HAL_CAN_ErrorCallback+0x2a0>
 8023324:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8023328:	f000 80f7 	beq.w	802351a <HAL_CAN_ErrorCallback+0x252>
 802332c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8023330:	f200 811a 	bhi.w	8023568 <HAL_CAN_ErrorCallback+0x2a0>
 8023334:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8023338:	f000 80e8 	beq.w	802350c <HAL_CAN_ErrorCallback+0x244>
 802333c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8023340:	f200 8112 	bhi.w	8023568 <HAL_CAN_ErrorCallback+0x2a0>
 8023344:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8023348:	f000 80d9 	beq.w	80234fe <HAL_CAN_ErrorCallback+0x236>
 802334c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8023350:	f200 810a 	bhi.w	8023568 <HAL_CAN_ErrorCallback+0x2a0>
 8023354:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8023358:	f000 80ca 	beq.w	80234f0 <HAL_CAN_ErrorCallback+0x228>
 802335c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8023360:	f200 8102 	bhi.w	8023568 <HAL_CAN_ErrorCallback+0x2a0>
 8023364:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8023368:	f000 80bb 	beq.w	80234e2 <HAL_CAN_ErrorCallback+0x21a>
 802336c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8023370:	f200 80fa 	bhi.w	8023568 <HAL_CAN_ErrorCallback+0x2a0>
 8023374:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8023378:	f000 80ac 	beq.w	80234d4 <HAL_CAN_ErrorCallback+0x20c>
 802337c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8023380:	f200 80f2 	bhi.w	8023568 <HAL_CAN_ErrorCallback+0x2a0>
 8023384:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8023388:	f000 809d 	beq.w	80234c6 <HAL_CAN_ErrorCallback+0x1fe>
 802338c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8023390:	f200 80ea 	bhi.w	8023568 <HAL_CAN_ErrorCallback+0x2a0>
 8023394:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8023398:	f000 808e 	beq.w	80234b8 <HAL_CAN_ErrorCallback+0x1f0>
 802339c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80233a0:	f200 80e2 	bhi.w	8023568 <HAL_CAN_ErrorCallback+0x2a0>
 80233a4:	2b80      	cmp	r3, #128	@ 0x80
 80233a6:	f000 8080 	beq.w	80234aa <HAL_CAN_ErrorCallback+0x1e2>
 80233aa:	2b80      	cmp	r3, #128	@ 0x80
 80233ac:	f200 80dc 	bhi.w	8023568 <HAL_CAN_ErrorCallback+0x2a0>
 80233b0:	2b20      	cmp	r3, #32
 80233b2:	d849      	bhi.n	8023448 <HAL_CAN_ErrorCallback+0x180>
 80233b4:	2b00      	cmp	r3, #0
 80233b6:	f000 80d7 	beq.w	8023568 <HAL_CAN_ErrorCallback+0x2a0>
 80233ba:	3b01      	subs	r3, #1
 80233bc:	2b1f      	cmp	r3, #31
 80233be:	f200 80d3 	bhi.w	8023568 <HAL_CAN_ErrorCallback+0x2a0>
 80233c2:	a201      	add	r2, pc, #4	@ (adr r2, 80233c8 <HAL_CAN_ErrorCallback+0x100>)
 80233c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80233c8:	0802344f 	.word	0x0802344f
 80233cc:	0802345d 	.word	0x0802345d
 80233d0:	08023569 	.word	0x08023569
 80233d4:	0802346b 	.word	0x0802346b
 80233d8:	08023569 	.word	0x08023569
 80233dc:	08023569 	.word	0x08023569
 80233e0:	08023569 	.word	0x08023569
 80233e4:	08023479 	.word	0x08023479
 80233e8:	08023569 	.word	0x08023569
 80233ec:	08023569 	.word	0x08023569
 80233f0:	08023569 	.word	0x08023569
 80233f4:	08023569 	.word	0x08023569
 80233f8:	08023569 	.word	0x08023569
 80233fc:	08023569 	.word	0x08023569
 8023400:	08023569 	.word	0x08023569
 8023404:	08023481 	.word	0x08023481
 8023408:	08023569 	.word	0x08023569
 802340c:	08023569 	.word	0x08023569
 8023410:	08023569 	.word	0x08023569
 8023414:	08023569 	.word	0x08023569
 8023418:	08023569 	.word	0x08023569
 802341c:	08023569 	.word	0x08023569
 8023420:	08023569 	.word	0x08023569
 8023424:	08023569 	.word	0x08023569
 8023428:	08023569 	.word	0x08023569
 802342c:	08023569 	.word	0x08023569
 8023430:	08023569 	.word	0x08023569
 8023434:	08023569 	.word	0x08023569
 8023438:	08023569 	.word	0x08023569
 802343c:	08023569 	.word	0x08023569
 8023440:	08023569 	.word	0x08023569
 8023444:	0802348f 	.word	0x0802348f
 8023448:	2b40      	cmp	r3, #64	@ 0x40
 802344a:	d027      	beq.n	802349c <HAL_CAN_ErrorCallback+0x1d4>
	case HAL_CAN_ERROR_PARAM:
		CanH_ErrArr[21] = 22;
		HAL_CAN_ResetError(hcan);
		break;
	default:
		break;
 802344c:	e08c      	b.n	8023568 <HAL_CAN_ErrorCallback+0x2a0>
		CanH_ErrArr[0] = 1;
 802344e:	4b49      	ldr	r3, [pc, #292]	@ (8023574 <HAL_CAN_ErrorCallback+0x2ac>)
 8023450:	2201      	movs	r2, #1
 8023452:	601a      	str	r2, [r3, #0]
		HAL_CAN_ResetError(hcan);
 8023454:	6878      	ldr	r0, [r7, #4]
 8023456:	f007 f9e4 	bl	802a822 <HAL_CAN_ResetError>
		break;
 802345a:	e086      	b.n	802356a <HAL_CAN_ErrorCallback+0x2a2>
		CanH_ErrArr[1] = 2;
 802345c:	4b45      	ldr	r3, [pc, #276]	@ (8023574 <HAL_CAN_ErrorCallback+0x2ac>)
 802345e:	2202      	movs	r2, #2
 8023460:	605a      	str	r2, [r3, #4]
		HAL_CAN_ResetError(hcan);
 8023462:	6878      	ldr	r0, [r7, #4]
 8023464:	f007 f9dd 	bl	802a822 <HAL_CAN_ResetError>
		break;
 8023468:	e07f      	b.n	802356a <HAL_CAN_ErrorCallback+0x2a2>
		CanH_ErrArr[2] = 3;
 802346a:	4b42      	ldr	r3, [pc, #264]	@ (8023574 <HAL_CAN_ErrorCallback+0x2ac>)
 802346c:	2203      	movs	r2, #3
 802346e:	609a      	str	r2, [r3, #8]
		HAL_CAN_ResetError(hcan);
 8023470:	6878      	ldr	r0, [r7, #4]
 8023472:	f007 f9d6 	bl	802a822 <HAL_CAN_ResetError>
		break;
 8023476:	e078      	b.n	802356a <HAL_CAN_ErrorCallback+0x2a2>
		HAL_CAN_ResetError(hcan);
 8023478:	6878      	ldr	r0, [r7, #4]
 802347a:	f007 f9d2 	bl	802a822 <HAL_CAN_ResetError>
		break;
 802347e:	e074      	b.n	802356a <HAL_CAN_ErrorCallback+0x2a2>
		CanH_ErrArr[4] = 5;
 8023480:	4b3c      	ldr	r3, [pc, #240]	@ (8023574 <HAL_CAN_ErrorCallback+0x2ac>)
 8023482:	2205      	movs	r2, #5
 8023484:	611a      	str	r2, [r3, #16]
		HAL_CAN_ResetError(hcan);
 8023486:	6878      	ldr	r0, [r7, #4]
 8023488:	f007 f9cb 	bl	802a822 <HAL_CAN_ResetError>
		break;
 802348c:	e06d      	b.n	802356a <HAL_CAN_ErrorCallback+0x2a2>
		CanH_ErrArr[5] = 6;
 802348e:	4b39      	ldr	r3, [pc, #228]	@ (8023574 <HAL_CAN_ErrorCallback+0x2ac>)
 8023490:	2206      	movs	r2, #6
 8023492:	615a      	str	r2, [r3, #20]
		HAL_CAN_ResetError(hcan);
 8023494:	6878      	ldr	r0, [r7, #4]
 8023496:	f007 f9c4 	bl	802a822 <HAL_CAN_ResetError>
		break;
 802349a:	e066      	b.n	802356a <HAL_CAN_ErrorCallback+0x2a2>
		CanH_ErrArr[6] = 7;
 802349c:	4b35      	ldr	r3, [pc, #212]	@ (8023574 <HAL_CAN_ErrorCallback+0x2ac>)
 802349e:	2207      	movs	r2, #7
 80234a0:	619a      	str	r2, [r3, #24]
		HAL_CAN_ResetError(hcan);
 80234a2:	6878      	ldr	r0, [r7, #4]
 80234a4:	f007 f9bd 	bl	802a822 <HAL_CAN_ResetError>
		break;
 80234a8:	e05f      	b.n	802356a <HAL_CAN_ErrorCallback+0x2a2>
		CanH_ErrArr[7] = 8;
 80234aa:	4b32      	ldr	r3, [pc, #200]	@ (8023574 <HAL_CAN_ErrorCallback+0x2ac>)
 80234ac:	2208      	movs	r2, #8
 80234ae:	61da      	str	r2, [r3, #28]
		HAL_CAN_ResetError(hcan);
 80234b0:	6878      	ldr	r0, [r7, #4]
 80234b2:	f007 f9b6 	bl	802a822 <HAL_CAN_ResetError>
		break;
 80234b6:	e058      	b.n	802356a <HAL_CAN_ErrorCallback+0x2a2>
		CanH_ErrArr[8] = 9;
 80234b8:	4b2e      	ldr	r3, [pc, #184]	@ (8023574 <HAL_CAN_ErrorCallback+0x2ac>)
 80234ba:	2209      	movs	r2, #9
 80234bc:	621a      	str	r2, [r3, #32]
		HAL_CAN_ResetError(hcan);
 80234be:	6878      	ldr	r0, [r7, #4]
 80234c0:	f007 f9af 	bl	802a822 <HAL_CAN_ResetError>
		break;
 80234c4:	e051      	b.n	802356a <HAL_CAN_ErrorCallback+0x2a2>
		CanH_ErrArr[9] = 10;
 80234c6:	4b2b      	ldr	r3, [pc, #172]	@ (8023574 <HAL_CAN_ErrorCallback+0x2ac>)
 80234c8:	220a      	movs	r2, #10
 80234ca:	625a      	str	r2, [r3, #36]	@ 0x24
		HAL_CAN_ResetError(hcan);
 80234cc:	6878      	ldr	r0, [r7, #4]
 80234ce:	f007 f9a8 	bl	802a822 <HAL_CAN_ResetError>
		break;
 80234d2:	e04a      	b.n	802356a <HAL_CAN_ErrorCallback+0x2a2>
		CanH_ErrArr[10] = 11;
 80234d4:	4b27      	ldr	r3, [pc, #156]	@ (8023574 <HAL_CAN_ErrorCallback+0x2ac>)
 80234d6:	220b      	movs	r2, #11
 80234d8:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_CAN_ResetError(hcan);
 80234da:	6878      	ldr	r0, [r7, #4]
 80234dc:	f007 f9a1 	bl	802a822 <HAL_CAN_ResetError>
		break;
 80234e0:	e043      	b.n	802356a <HAL_CAN_ErrorCallback+0x2a2>
		CanH_ErrArr[11] = 12;
 80234e2:	4b24      	ldr	r3, [pc, #144]	@ (8023574 <HAL_CAN_ErrorCallback+0x2ac>)
 80234e4:	220c      	movs	r2, #12
 80234e6:	62da      	str	r2, [r3, #44]	@ 0x2c
		HAL_CAN_ResetError(hcan);
 80234e8:	6878      	ldr	r0, [r7, #4]
 80234ea:	f007 f99a 	bl	802a822 <HAL_CAN_ResetError>
		break;
 80234ee:	e03c      	b.n	802356a <HAL_CAN_ErrorCallback+0x2a2>
		CanH_ErrArr[12] = 13;
 80234f0:	4b20      	ldr	r3, [pc, #128]	@ (8023574 <HAL_CAN_ErrorCallback+0x2ac>)
 80234f2:	220d      	movs	r2, #13
 80234f4:	631a      	str	r2, [r3, #48]	@ 0x30
		HAL_CAN_ResetError(hcan);
 80234f6:	6878      	ldr	r0, [r7, #4]
 80234f8:	f007 f993 	bl	802a822 <HAL_CAN_ResetError>
		break;
 80234fc:	e035      	b.n	802356a <HAL_CAN_ErrorCallback+0x2a2>
		CanH_ErrArr[13] = 14;
 80234fe:	4b1d      	ldr	r3, [pc, #116]	@ (8023574 <HAL_CAN_ErrorCallback+0x2ac>)
 8023500:	220e      	movs	r2, #14
 8023502:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_CAN_ResetError(hcan);
 8023504:	6878      	ldr	r0, [r7, #4]
 8023506:	f007 f98c 	bl	802a822 <HAL_CAN_ResetError>
		break;
 802350a:	e02e      	b.n	802356a <HAL_CAN_ErrorCallback+0x2a2>
		CanH_ErrArr[14] = 15;
 802350c:	4b19      	ldr	r3, [pc, #100]	@ (8023574 <HAL_CAN_ErrorCallback+0x2ac>)
 802350e:	220f      	movs	r2, #15
 8023510:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_CAN_ResetError(hcan);
 8023512:	6878      	ldr	r0, [r7, #4]
 8023514:	f007 f985 	bl	802a822 <HAL_CAN_ResetError>
		break;
 8023518:	e027      	b.n	802356a <HAL_CAN_ErrorCallback+0x2a2>
		CanH_ErrArr[16] = 17;
 802351a:	4b16      	ldr	r3, [pc, #88]	@ (8023574 <HAL_CAN_ErrorCallback+0x2ac>)
 802351c:	2211      	movs	r2, #17
 802351e:	641a      	str	r2, [r3, #64]	@ 0x40
		break;
 8023520:	e023      	b.n	802356a <HAL_CAN_ErrorCallback+0x2a2>
		CanH_ErrArr[17] = 18;
 8023522:	4b14      	ldr	r3, [pc, #80]	@ (8023574 <HAL_CAN_ErrorCallback+0x2ac>)
 8023524:	2212      	movs	r2, #18
 8023526:	645a      	str	r2, [r3, #68]	@ 0x44
		HAL_CAN_ResetError(hcan);
 8023528:	6878      	ldr	r0, [r7, #4]
 802352a:	f007 f97a 	bl	802a822 <HAL_CAN_ResetError>
		break;
 802352e:	e01c      	b.n	802356a <HAL_CAN_ErrorCallback+0x2a2>
		CanH_ErrArr[18] = 19;
 8023530:	4b10      	ldr	r3, [pc, #64]	@ (8023574 <HAL_CAN_ErrorCallback+0x2ac>)
 8023532:	2213      	movs	r2, #19
 8023534:	649a      	str	r2, [r3, #72]	@ 0x48
		HAL_CAN_ResetError(hcan);
 8023536:	6878      	ldr	r0, [r7, #4]
 8023538:	f007 f973 	bl	802a822 <HAL_CAN_ResetError>
		break;
 802353c:	e015      	b.n	802356a <HAL_CAN_ErrorCallback+0x2a2>
		CanH_ErrArr[19] = 20;
 802353e:	4b0d      	ldr	r3, [pc, #52]	@ (8023574 <HAL_CAN_ErrorCallback+0x2ac>)
 8023540:	2214      	movs	r2, #20
 8023542:	64da      	str	r2, [r3, #76]	@ 0x4c
		HAL_CAN_ResetError(hcan);
 8023544:	6878      	ldr	r0, [r7, #4]
 8023546:	f007 f96c 	bl	802a822 <HAL_CAN_ResetError>
		break;
 802354a:	e00e      	b.n	802356a <HAL_CAN_ErrorCallback+0x2a2>
		CanH_ErrArr[20] = 21;
 802354c:	4b09      	ldr	r3, [pc, #36]	@ (8023574 <HAL_CAN_ErrorCallback+0x2ac>)
 802354e:	2215      	movs	r2, #21
 8023550:	651a      	str	r2, [r3, #80]	@ 0x50
		HAL_CAN_ResetError(hcan);
 8023552:	6878      	ldr	r0, [r7, #4]
 8023554:	f007 f965 	bl	802a822 <HAL_CAN_ResetError>
		break;
 8023558:	e007      	b.n	802356a <HAL_CAN_ErrorCallback+0x2a2>
		CanH_ErrArr[21] = 22;
 802355a:	4b06      	ldr	r3, [pc, #24]	@ (8023574 <HAL_CAN_ErrorCallback+0x2ac>)
 802355c:	2216      	movs	r2, #22
 802355e:	655a      	str	r2, [r3, #84]	@ 0x54
		HAL_CAN_ResetError(hcan);
 8023560:	6878      	ldr	r0, [r7, #4]
 8023562:	f007 f95e 	bl	802a822 <HAL_CAN_ResetError>
		break;
 8023566:	e000      	b.n	802356a <HAL_CAN_ErrorCallback+0x2a2>
		break;
 8023568:	bf00      	nop
	}
}
 802356a:	bf00      	nop
 802356c:	3708      	adds	r7, #8
 802356e:	46bd      	mov	sp, r7
 8023570:	bd80      	pop	{r7, pc}
 8023572:	bf00      	nop
 8023574:	100007c8 	.word	0x100007c8

08023578 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8023578:	b580      	push	{r7, lr}
 802357a:	b084      	sub	sp, #16
 802357c:	af00      	add	r7, sp, #0
 802357e:	6078      	str	r0, [r7, #4]
	CanH_RxFifo0MsgPendingCnt++;
 8023580:	4b87      	ldr	r3, [pc, #540]	@ (80237a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 8023582:	681b      	ldr	r3, [r3, #0]
 8023584:	3301      	adds	r3, #1
 8023586:	4a86      	ldr	r2, [pc, #536]	@ (80237a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 8023588:	6013      	str	r3, [r2, #0]
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &CanH_RxHeader, CanH_RxData);
 802358a:	4b86      	ldr	r3, [pc, #536]	@ (80237a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 802358c:	4a86      	ldr	r2, [pc, #536]	@ (80237a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 802358e:	2100      	movs	r1, #0
 8023590:	4886      	ldr	r0, [pc, #536]	@ (80237ac <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8023592:	f006 fd89 	bl	802a0a8 <HAL_CAN_GetRxMessage>
	/* NM3 */
	if(0x510 == CanH_RxHeader.StdId)
 8023596:	4b84      	ldr	r3, [pc, #528]	@ (80237a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8023598:	681b      	ldr	r3, [r3, #0]
 802359a:	f5b3 6fa2 	cmp.w	r3, #1296	@ 0x510
 802359e:	d114      	bne.n	80235ca <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
	{
		CanH_RxSig_Networkmanagement3 = CanH_RxData[0];
 80235a0:	4b80      	ldr	r3, [pc, #512]	@ (80237a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 80235a2:	781a      	ldrb	r2, [r3, #0]
 80235a4:	4b82      	ldr	r3, [pc, #520]	@ (80237b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 80235a6:	701a      	strb	r2, [r3, #0]
		if(0x10 == CanH_RxData[0])
 80235a8:	4b7e      	ldr	r3, [pc, #504]	@ (80237a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 80235aa:	781b      	ldrb	r3, [r3, #0]
 80235ac:	2b10      	cmp	r3, #16
 80235ae:	d10c      	bne.n	80235ca <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
		{
			CanH_RequestBusSleep = 0;
 80235b0:	4b80      	ldr	r3, [pc, #512]	@ (80237b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x23c>)
 80235b2:	2200      	movs	r2, #0
 80235b4:	701a      	strb	r2, [r3, #0]
			if(CC_ACTIVE != CanH_CommunicationState) CanH_CommunicationState = FULL_COMMUNICATION;
 80235b6:	4b80      	ldr	r3, [pc, #512]	@ (80237b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 80235b8:	781b      	ldrb	r3, [r3, #0]
 80235ba:	2b04      	cmp	r3, #4
 80235bc:	d002      	beq.n	80235c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>
 80235be:	4b7e      	ldr	r3, [pc, #504]	@ (80237b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 80235c0:	2202      	movs	r2, #2
 80235c2:	701a      	strb	r2, [r3, #0]
			else
			{
				/* Do nothing. */
			}
			CanH_NoCommCounter = 0;
 80235c4:	4b7d      	ldr	r3, [pc, #500]	@ (80237bc <HAL_CAN_RxFifo0MsgPendingCallback+0x244>)
 80235c6:	2200      	movs	r2, #0
 80235c8:	601a      	str	r2, [r3, #0]
	else
	{
		/* Do nothing. */
	}
	/* VehicleState */
	if(0x97 == CanH_RxHeader.StdId)
 80235ca:	4b77      	ldr	r3, [pc, #476]	@ (80237a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 80235cc:	681b      	ldr	r3, [r3, #0]
 80235ce:	2b97      	cmp	r3, #151	@ 0x97
 80235d0:	d11a      	bne.n	8023608 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>
	{
		CanH_RxSig_Ignition = CanH_RxData[2];
 80235d2:	4b74      	ldr	r3, [pc, #464]	@ (80237a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 80235d4:	789a      	ldrb	r2, [r3, #2]
 80235d6:	4b7a      	ldr	r3, [pc, #488]	@ (80237c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 80235d8:	701a      	strb	r2, [r3, #0]
		CanH_RxSig_Speed = CanH_RxData[7];
 80235da:	4b72      	ldr	r3, [pc, #456]	@ (80237a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 80235dc:	79da      	ldrb	r2, [r3, #7]
 80235de:	4b79      	ldr	r3, [pc, #484]	@ (80237c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>)
 80235e0:	701a      	strb	r2, [r3, #0]
		CanH_RxSig_Rpm = CanH_RxData[6];
 80235e2:	4b70      	ldr	r3, [pc, #448]	@ (80237a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 80235e4:	799a      	ldrb	r2, [r3, #6]
 80235e6:	4b78      	ldr	r3, [pc, #480]	@ (80237c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 80235e8:	701a      	strb	r2, [r3, #0]
		CanH_RxSig_Gear = CanH_RxData[3];
 80235ea:	4b6e      	ldr	r3, [pc, #440]	@ (80237a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 80235ec:	78da      	ldrb	r2, [r3, #3]
 80235ee:	4b77      	ldr	r3, [pc, #476]	@ (80237cc <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 80235f0:	701a      	strb	r2, [r3, #0]
		CanH_RxSig_PowerSteeringStatus = CanH_RxData[4];
 80235f2:	4b6c      	ldr	r3, [pc, #432]	@ (80237a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 80235f4:	791a      	ldrb	r2, [r3, #4]
 80235f6:	4b76      	ldr	r3, [pc, #472]	@ (80237d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x258>)
 80235f8:	701a      	strb	r2, [r3, #0]
		CanH_RxSig_IrSensStat = CanH_RxData[5];
 80235fa:	4b6a      	ldr	r3, [pc, #424]	@ (80237a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 80235fc:	795a      	ldrb	r2, [r3, #5]
 80235fe:	4b75      	ldr	r3, [pc, #468]	@ (80237d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8023600:	701a      	strb	r2, [r3, #0]
		CanH_VehState_MissCnt = 0;
 8023602:	4b75      	ldr	r3, [pc, #468]	@ (80237d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x260>)
 8023604:	2200      	movs	r2, #0
 8023606:	601a      	str	r2, [r3, #0]
	else
	{
		/* Do nothing. */
	}
	/* StatusBodyControl */
	if(0x98 == CanH_RxHeader.StdId)
 8023608:	4b67      	ldr	r3, [pc, #412]	@ (80237a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 802360a:	681b      	ldr	r3, [r3, #0]
 802360c:	2b98      	cmp	r3, #152	@ 0x98
 802360e:	d11a      	bne.n	8023646 <HAL_CAN_RxFifo0MsgPendingCallback+0xce>
	{
		CanH_RxSig_Recirculation = CanH_RxData[0];
 8023610:	4b64      	ldr	r3, [pc, #400]	@ (80237a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 8023612:	781a      	ldrb	r2, [r3, #0]
 8023614:	4b71      	ldr	r3, [pc, #452]	@ (80237dc <HAL_CAN_RxFifo0MsgPendingCallback+0x264>)
 8023616:	701a      	strb	r2, [r3, #0]
		CanH_RxSig_FogLights = CanH_RxData[3];
 8023618:	4b62      	ldr	r3, [pc, #392]	@ (80237a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 802361a:	78da      	ldrb	r2, [r3, #3]
 802361c:	4b70      	ldr	r3, [pc, #448]	@ (80237e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>)
 802361e:	701a      	strb	r2, [r3, #0]
		CanH_RxSig_HighBeam = CanH_RxData[4];
 8023620:	4b60      	ldr	r3, [pc, #384]	@ (80237a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 8023622:	791a      	ldrb	r2, [r3, #4]
 8023624:	4b6f      	ldr	r3, [pc, #444]	@ (80237e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x26c>)
 8023626:	701a      	strb	r2, [r3, #0]
		CanH_RxSig_TemperatureSensor = CanH_RxData[5];
 8023628:	4b5e      	ldr	r3, [pc, #376]	@ (80237a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 802362a:	795a      	ldrb	r2, [r3, #5]
 802362c:	4b6e      	ldr	r3, [pc, #440]	@ (80237e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x270>)
 802362e:	701a      	strb	r2, [r3, #0]
		CanH_RxSig_TurnSignal = CanH_RxData[6];
 8023630:	4b5c      	ldr	r3, [pc, #368]	@ (80237a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 8023632:	799a      	ldrb	r2, [r3, #6]
 8023634:	4b6d      	ldr	r3, [pc, #436]	@ (80237ec <HAL_CAN_RxFifo0MsgPendingCallback+0x274>)
 8023636:	701a      	strb	r2, [r3, #0]
		CanH_RxSig_AutoClimate = CanH_RxData[7];
 8023638:	4b5a      	ldr	r3, [pc, #360]	@ (80237a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 802363a:	79da      	ldrb	r2, [r3, #7]
 802363c:	4b6c      	ldr	r3, [pc, #432]	@ (80237f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 802363e:	701a      	strb	r2, [r3, #0]
		CanH_BodyState_MissCnt = 0;
 8023640:	4b6c      	ldr	r3, [pc, #432]	@ (80237f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 8023642:	2200      	movs	r2, #0
 8023644:	601a      	str	r2, [r3, #0]
	else
	{
		/* Do nothing. */
	}
	/* StatusBodyControl2 */
	if(0x99 == CanH_RxHeader.StdId)
 8023646:	4b58      	ldr	r3, [pc, #352]	@ (80237a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8023648:	681b      	ldr	r3, [r3, #0]
 802364a:	2b99      	cmp	r3, #153	@ 0x99
 802364c:	d112      	bne.n	8023674 <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>
	{
		CanH_RxSig_FanValue = CanH_RxData[0];
 802364e:	4b55      	ldr	r3, [pc, #340]	@ (80237a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 8023650:	781a      	ldrb	r2, [r3, #0]
 8023652:	4b69      	ldr	r3, [pc, #420]	@ (80237f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x280>)
 8023654:	701a      	strb	r2, [r3, #0]
		CanH_RxSig_DisplayMode = CanH_RxData[1];
 8023656:	4b53      	ldr	r3, [pc, #332]	@ (80237a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 8023658:	785a      	ldrb	r2, [r3, #1]
 802365a:	4b68      	ldr	r3, [pc, #416]	@ (80237fc <HAL_CAN_RxFifo0MsgPendingCallback+0x284>)
 802365c:	701a      	strb	r2, [r3, #0]
		CanH_RxSig_ClimaTemp = CanH_RxData[2];
 802365e:	4b51      	ldr	r3, [pc, #324]	@ (80237a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 8023660:	789a      	ldrb	r2, [r3, #2]
 8023662:	4b67      	ldr	r3, [pc, #412]	@ (8023800 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 8023664:	701a      	strb	r2, [r3, #0]
		CanH_RxSig_RotaryLightSwitch = CanH_RxData[3];
 8023666:	4b4f      	ldr	r3, [pc, #316]	@ (80237a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 8023668:	78da      	ldrb	r2, [r3, #3]
 802366a:	4b66      	ldr	r3, [pc, #408]	@ (8023804 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 802366c:	701a      	strb	r2, [r3, #0]
		CanH_BodyState2_MissCnt = 0;
 802366e:	4b66      	ldr	r3, [pc, #408]	@ (8023808 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 8023670:	2200      	movs	r2, #0
 8023672:	601a      	str	r2, [r3, #0]
	}
	else
	{
		/* Do nothing. */
	}
	if(0x10b == CanH_RxHeader.StdId)CanH_RxSig_CcmId = CanH_RxData[0];
 8023674:	4b4c      	ldr	r3, [pc, #304]	@ (80237a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8023676:	681b      	ldr	r3, [r3, #0]
 8023678:	f240 120b 	movw	r2, #267	@ 0x10b
 802367c:	4293      	cmp	r3, r2
 802367e:	d103      	bne.n	8023688 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>
 8023680:	4b48      	ldr	r3, [pc, #288]	@ (80237a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 8023682:	781a      	ldrb	r2, [r3, #0]
 8023684:	4b61      	ldr	r3, [pc, #388]	@ (802380c <HAL_CAN_RxFifo0MsgPendingCallback+0x294>)
 8023686:	701a      	strb	r2, [r3, #0]
	else
	{
		/* Do nothing. */
	}
	/* DataRecorder */
	if(0x10f == CanH_RxHeader.StdId)
 8023688:	4b47      	ldr	r3, [pc, #284]	@ (80237a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 802368a:	681b      	ldr	r3, [r3, #0]
 802368c:	f240 120f 	movw	r2, #271	@ 0x10f
 8023690:	4293      	cmp	r3, r2
 8023692:	d10a      	bne.n	80236aa <HAL_CAN_RxFifo0MsgPendingCallback+0x132>
	{
		CanH_RxSig_VBat = CanH_RxData[1];
 8023694:	4b43      	ldr	r3, [pc, #268]	@ (80237a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 8023696:	785a      	ldrb	r2, [r3, #1]
 8023698:	4b5d      	ldr	r3, [pc, #372]	@ (8023810 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 802369a:	701a      	strb	r2, [r3, #0]
		CanH_RxSig_DrivecycleStatus = CanH_RxData[2];
 802369c:	4b41      	ldr	r3, [pc, #260]	@ (80237a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 802369e:	789a      	ldrb	r2, [r3, #2]
 80236a0:	4b5c      	ldr	r3, [pc, #368]	@ (8023814 <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>)
 80236a2:	701a      	strb	r2, [r3, #0]
		CanH_DataRecorder_MissCnt = 0;
 80236a4:	4b5c      	ldr	r3, [pc, #368]	@ (8023818 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 80236a6:	2200      	movs	r2, #0
 80236a8:	601a      	str	r2, [r3, #0]
	else
	{
		/* Do nothing. */
	}
	/* Diagnosis */
	if(0x704 == CanH_RxHeader.StdId)
 80236aa:	4b3f      	ldr	r3, [pc, #252]	@ (80237a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 80236ac:	681b      	ldr	r3, [r3, #0]
 80236ae:	f240 7204 	movw	r2, #1796	@ 0x704
 80236b2:	4293      	cmp	r3, r2
 80236b4:	d12a      	bne.n	802370c <HAL_CAN_RxFifo0MsgPendingCallback+0x194>
	{
		CanH_DiagRxHeader.DLC = CanH_RxHeader.DLC;
 80236b6:	4b3c      	ldr	r3, [pc, #240]	@ (80237a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 80236b8:	691b      	ldr	r3, [r3, #16]
 80236ba:	4a58      	ldr	r2, [pc, #352]	@ (802381c <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 80236bc:	6113      	str	r3, [r2, #16]
		CanH_DiagRxHeader.ExtId = CanH_RxHeader.ExtId;
 80236be:	4b3a      	ldr	r3, [pc, #232]	@ (80237a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 80236c0:	685b      	ldr	r3, [r3, #4]
 80236c2:	4a56      	ldr	r2, [pc, #344]	@ (802381c <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 80236c4:	6053      	str	r3, [r2, #4]
		CanH_DiagRxHeader.FilterMatchIndex = CanH_RxHeader.FilterMatchIndex;
 80236c6:	4b38      	ldr	r3, [pc, #224]	@ (80237a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 80236c8:	699b      	ldr	r3, [r3, #24]
 80236ca:	4a54      	ldr	r2, [pc, #336]	@ (802381c <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 80236cc:	6193      	str	r3, [r2, #24]
		CanH_DiagRxHeader.IDE = CanH_RxHeader.IDE;
 80236ce:	4b36      	ldr	r3, [pc, #216]	@ (80237a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 80236d0:	689b      	ldr	r3, [r3, #8]
 80236d2:	4a52      	ldr	r2, [pc, #328]	@ (802381c <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 80236d4:	6093      	str	r3, [r2, #8]
		CanH_DiagRxHeader.RTR = CanH_RxHeader.RTR;
 80236d6:	4b34      	ldr	r3, [pc, #208]	@ (80237a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 80236d8:	68db      	ldr	r3, [r3, #12]
 80236da:	4a50      	ldr	r2, [pc, #320]	@ (802381c <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 80236dc:	60d3      	str	r3, [r2, #12]
		CanH_DiagRxHeader.StdId = CanH_RxHeader.StdId;
 80236de:	4b32      	ldr	r3, [pc, #200]	@ (80237a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 80236e0:	681b      	ldr	r3, [r3, #0]
 80236e2:	4a4e      	ldr	r2, [pc, #312]	@ (802381c <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 80236e4:	6013      	str	r3, [r2, #0]
		CanH_DiagRxHeader.Timestamp = CanH_RxHeader.Timestamp;
 80236e6:	4b30      	ldr	r3, [pc, #192]	@ (80237a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 80236e8:	695b      	ldr	r3, [r3, #20]
 80236ea:	4a4c      	ldr	r2, [pc, #304]	@ (802381c <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 80236ec:	6153      	str	r3, [r2, #20]
		for(uint8 i = 0; i < 8; i++) CanH_DiagArray[i] = CanH_RxData[i];
 80236ee:	2300      	movs	r3, #0
 80236f0:	73fb      	strb	r3, [r7, #15]
 80236f2:	e008      	b.n	8023706 <HAL_CAN_RxFifo0MsgPendingCallback+0x18e>
 80236f4:	7bfa      	ldrb	r2, [r7, #15]
 80236f6:	7bfb      	ldrb	r3, [r7, #15]
 80236f8:	492a      	ldr	r1, [pc, #168]	@ (80237a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 80236fa:	5c89      	ldrb	r1, [r1, r2]
 80236fc:	4a48      	ldr	r2, [pc, #288]	@ (8023820 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 80236fe:	54d1      	strb	r1, [r2, r3]
 8023700:	7bfb      	ldrb	r3, [r7, #15]
 8023702:	3301      	adds	r3, #1
 8023704:	73fb      	strb	r3, [r7, #15]
 8023706:	7bfb      	ldrb	r3, [r7, #15]
 8023708:	2b07      	cmp	r3, #7
 802370a:	d9f3      	bls.n	80236f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>
	else
	{
		/* Do nothing. */
	}
	/* XCP */
	if(0x604 == CanH_RxHeader.StdId)
 802370c:	4b26      	ldr	r3, [pc, #152]	@ (80237a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 802370e:	681b      	ldr	r3, [r3, #0]
 8023710:	f240 6204 	movw	r2, #1540	@ 0x604
 8023714:	4293      	cmp	r3, r2
 8023716:	d12a      	bne.n	802376e <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>
	{
		CanH_XcpRxHeader.DLC = CanH_RxHeader.DLC;
 8023718:	4b23      	ldr	r3, [pc, #140]	@ (80237a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 802371a:	691b      	ldr	r3, [r3, #16]
 802371c:	4a41      	ldr	r2, [pc, #260]	@ (8023824 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 802371e:	6113      	str	r3, [r2, #16]
		CanH_XcpRxHeader.ExtId = CanH_RxHeader.ExtId;
 8023720:	4b21      	ldr	r3, [pc, #132]	@ (80237a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8023722:	685b      	ldr	r3, [r3, #4]
 8023724:	4a3f      	ldr	r2, [pc, #252]	@ (8023824 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 8023726:	6053      	str	r3, [r2, #4]
		CanH_XcpRxHeader.FilterMatchIndex = CanH_RxHeader.FilterMatchIndex;
 8023728:	4b1f      	ldr	r3, [pc, #124]	@ (80237a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 802372a:	699b      	ldr	r3, [r3, #24]
 802372c:	4a3d      	ldr	r2, [pc, #244]	@ (8023824 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 802372e:	6193      	str	r3, [r2, #24]
		CanH_XcpRxHeader.IDE = CanH_RxHeader.IDE;
 8023730:	4b1d      	ldr	r3, [pc, #116]	@ (80237a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8023732:	689b      	ldr	r3, [r3, #8]
 8023734:	4a3b      	ldr	r2, [pc, #236]	@ (8023824 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 8023736:	6093      	str	r3, [r2, #8]
		CanH_XcpRxHeader.RTR = CanH_RxHeader.RTR;
 8023738:	4b1b      	ldr	r3, [pc, #108]	@ (80237a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 802373a:	68db      	ldr	r3, [r3, #12]
 802373c:	4a39      	ldr	r2, [pc, #228]	@ (8023824 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 802373e:	60d3      	str	r3, [r2, #12]
		CanH_XcpRxHeader.StdId = CanH_RxHeader.StdId;
 8023740:	4b19      	ldr	r3, [pc, #100]	@ (80237a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8023742:	681b      	ldr	r3, [r3, #0]
 8023744:	4a37      	ldr	r2, [pc, #220]	@ (8023824 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 8023746:	6013      	str	r3, [r2, #0]
		CanH_XcpRxHeader.Timestamp = CanH_RxHeader.Timestamp;
 8023748:	4b17      	ldr	r3, [pc, #92]	@ (80237a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 802374a:	695b      	ldr	r3, [r3, #20]
 802374c:	4a35      	ldr	r2, [pc, #212]	@ (8023824 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 802374e:	6153      	str	r3, [r2, #20]
		for(uint8 i = 0; i < 8; i++) CanH_XcpArray[i] = CanH_RxData[i];
 8023750:	2300      	movs	r3, #0
 8023752:	73bb      	strb	r3, [r7, #14]
 8023754:	e008      	b.n	8023768 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>
 8023756:	7bba      	ldrb	r2, [r7, #14]
 8023758:	7bbb      	ldrb	r3, [r7, #14]
 802375a:	4912      	ldr	r1, [pc, #72]	@ (80237a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 802375c:	5c89      	ldrb	r1, [r1, r2]
 802375e:	4a32      	ldr	r2, [pc, #200]	@ (8023828 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b0>)
 8023760:	54d1      	strb	r1, [r2, r3]
 8023762:	7bbb      	ldrb	r3, [r7, #14]
 8023764:	3301      	adds	r3, #1
 8023766:	73bb      	strb	r3, [r7, #14]
 8023768:	7bbb      	ldrb	r3, [r7, #14]
 802376a:	2b07      	cmp	r3, #7
 802376c:	d9f3      	bls.n	8023756 <HAL_CAN_RxFifo0MsgPendingCallback+0x1de>
	}
	else
	{
		/* Do nothing. */
	}
	CanH_RxHeader.DLC = 0;
 802376e:	4b0e      	ldr	r3, [pc, #56]	@ (80237a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8023770:	2200      	movs	r2, #0
 8023772:	611a      	str	r2, [r3, #16]
	CanH_RxHeader.ExtId = 0;
 8023774:	4b0c      	ldr	r3, [pc, #48]	@ (80237a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8023776:	2200      	movs	r2, #0
 8023778:	605a      	str	r2, [r3, #4]
	CanH_RxHeader.FilterMatchIndex = 0;
 802377a:	4b0b      	ldr	r3, [pc, #44]	@ (80237a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 802377c:	2200      	movs	r2, #0
 802377e:	619a      	str	r2, [r3, #24]
	CanH_RxHeader.IDE = 0;
 8023780:	4b09      	ldr	r3, [pc, #36]	@ (80237a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8023782:	2200      	movs	r2, #0
 8023784:	609a      	str	r2, [r3, #8]
	CanH_RxHeader.RTR = 0;
 8023786:	4b08      	ldr	r3, [pc, #32]	@ (80237a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8023788:	2200      	movs	r2, #0
 802378a:	60da      	str	r2, [r3, #12]
	CanH_RxHeader.StdId = 0;
 802378c:	4b06      	ldr	r3, [pc, #24]	@ (80237a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 802378e:	2200      	movs	r2, #0
 8023790:	601a      	str	r2, [r3, #0]
	CanH_RxHeader.Timestamp = 0;
 8023792:	4b05      	ldr	r3, [pc, #20]	@ (80237a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8023794:	2200      	movs	r2, #0
 8023796:	615a      	str	r2, [r3, #20]
	for(uint8 i = 0; i < 8; i++) CanH_RxData[i] = 0;
 8023798:	2300      	movs	r3, #0
 802379a:	737b      	strb	r3, [r7, #13]
 802379c:	e04d      	b.n	802383a <HAL_CAN_RxFifo0MsgPendingCallback+0x2c2>
 802379e:	bf00      	nop
 80237a0:	1000081c 	.word	0x1000081c
 80237a4:	10000840 	.word	0x10000840
 80237a8:	10000824 	.word	0x10000824
 80237ac:	200001a8 	.word	0x200001a8
 80237b0:	10000875 	.word	0x10000875
 80237b4:	1000086c 	.word	0x1000086c
 80237b8:	10000874 	.word	0x10000874
 80237bc:	10000870 	.word	0x10000870
 80237c0:	10000876 	.word	0x10000876
 80237c4:	10000877 	.word	0x10000877
 80237c8:	10000878 	.word	0x10000878
 80237cc:	1000087b 	.word	0x1000087b
 80237d0:	1000087c 	.word	0x1000087c
 80237d4:	10000883 	.word	0x10000883
 80237d8:	100008d4 	.word	0x100008d4
 80237dc:	10000886 	.word	0x10000886
 80237e0:	10000885 	.word	0x10000885
 80237e4:	10000881 	.word	0x10000881
 80237e8:	1000087d 	.word	0x1000087d
 80237ec:	10000880 	.word	0x10000880
 80237f0:	10000889 	.word	0x10000889
 80237f4:	100008d8 	.word	0x100008d8
 80237f8:	10000887 	.word	0x10000887
 80237fc:	1000087e 	.word	0x1000087e
 8023800:	10000888 	.word	0x10000888
 8023804:	1000087f 	.word	0x1000087f
 8023808:	100008dc 	.word	0x100008dc
 802380c:	10000882 	.word	0x10000882
 8023810:	10000879 	.word	0x10000879
 8023814:	10000884 	.word	0x10000884
 8023818:	100008e0 	.word	0x100008e0
 802381c:	1000089c 	.word	0x1000089c
 8023820:	10000894 	.word	0x10000894
 8023824:	100008b8 	.word	0x100008b8
 8023828:	1000088c 	.word	0x1000088c
 802382c:	7b7b      	ldrb	r3, [r7, #13]
 802382e:	4a42      	ldr	r2, [pc, #264]	@ (8023938 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c0>)
 8023830:	2100      	movs	r1, #0
 8023832:	54d1      	strb	r1, [r2, r3]
 8023834:	7b7b      	ldrb	r3, [r7, #13]
 8023836:	3301      	adds	r3, #1
 8023838:	737b      	strb	r3, [r7, #13]
 802383a:	7b7b      	ldrb	r3, [r7, #13]
 802383c:	2b07      	cmp	r3, #7
 802383e:	d9f5      	bls.n	802382c <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>
	DataRecorder_RxSig_VehicleSpeed = CanH_RxSig_Speed;
 8023840:	4b3e      	ldr	r3, [pc, #248]	@ (802393c <HAL_CAN_RxFifo0MsgPendingCallback+0x3c4>)
 8023842:	781b      	ldrb	r3, [r3, #0]
 8023844:	461a      	mov	r2, r3
 8023846:	4b3e      	ldr	r3, [pc, #248]	@ (8023940 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c8>)
 8023848:	601a      	str	r2, [r3, #0]
	DataRecorder_RxSig_DriveCycleStatus = CanH_RxSig_DrivecycleStatus;
 802384a:	4b3e      	ldr	r3, [pc, #248]	@ (8023944 <HAL_CAN_RxFifo0MsgPendingCallback+0x3cc>)
 802384c:	781a      	ldrb	r2, [r3, #0]
 802384e:	4b3e      	ldr	r3, [pc, #248]	@ (8023948 <HAL_CAN_RxFifo0MsgPendingCallback+0x3d0>)
 8023850:	701a      	strb	r2, [r3, #0]
	DigitalCluster_RxSig_IgnitionStatus = CanH_RxSig_Ignition;
 8023852:	4b3e      	ldr	r3, [pc, #248]	@ (802394c <HAL_CAN_RxFifo0MsgPendingCallback+0x3d4>)
 8023854:	781a      	ldrb	r2, [r3, #0]
 8023856:	4b3e      	ldr	r3, [pc, #248]	@ (8023950 <HAL_CAN_RxFifo0MsgPendingCallback+0x3d8>)
 8023858:	701a      	strb	r2, [r3, #0]
	DigitalCluster_RxSig_VBat = CanH_RxSig_VBat;
 802385a:	4b3e      	ldr	r3, [pc, #248]	@ (8023954 <HAL_CAN_RxFifo0MsgPendingCallback+0x3dc>)
 802385c:	781a      	ldrb	r2, [r3, #0]
 802385e:	4b3e      	ldr	r3, [pc, #248]	@ (8023958 <HAL_CAN_RxFifo0MsgPendingCallback+0x3e0>)
 8023860:	701a      	strb	r2, [r3, #0]
	DigitalCluster_RxSig_Gear = CanH_RxSig_Gear;
 8023862:	4b3e      	ldr	r3, [pc, #248]	@ (802395c <HAL_CAN_RxFifo0MsgPendingCallback+0x3e4>)
 8023864:	781a      	ldrb	r2, [r3, #0]
 8023866:	4b3e      	ldr	r3, [pc, #248]	@ (8023960 <HAL_CAN_RxFifo0MsgPendingCallback+0x3e8>)
 8023868:	701a      	strb	r2, [r3, #0]
	DigitalCluster_RxSig_HighBeamStatus = CanH_RxSig_HighBeam;
 802386a:	4b3e      	ldr	r3, [pc, #248]	@ (8023964 <HAL_CAN_RxFifo0MsgPendingCallback+0x3ec>)
 802386c:	781a      	ldrb	r2, [r3, #0]
 802386e:	4b3e      	ldr	r3, [pc, #248]	@ (8023968 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f0>)
 8023870:	701a      	strb	r2, [r3, #0]
	DigitalCluster_RxSig_PowerSteeringStatus = CanH_RxSig_PowerSteeringStatus;
 8023872:	4b3e      	ldr	r3, [pc, #248]	@ (802396c <HAL_CAN_RxFifo0MsgPendingCallback+0x3f4>)
 8023874:	781a      	ldrb	r2, [r3, #0]
 8023876:	4b3e      	ldr	r3, [pc, #248]	@ (8023970 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f8>)
 8023878:	701a      	strb	r2, [r3, #0]
	DigitalCluster_RxSig_VehicleSpeed = CanH_RxSig_Speed;
 802387a:	4b30      	ldr	r3, [pc, #192]	@ (802393c <HAL_CAN_RxFifo0MsgPendingCallback+0x3c4>)
 802387c:	781a      	ldrb	r2, [r3, #0]
 802387e:	4b3d      	ldr	r3, [pc, #244]	@ (8023974 <HAL_CAN_RxFifo0MsgPendingCallback+0x3fc>)
 8023880:	701a      	strb	r2, [r3, #0]
	DigitalCluster_RxSig_MotorRpm = CanH_RxSig_Rpm;
 8023882:	4b3d      	ldr	r3, [pc, #244]	@ (8023978 <HAL_CAN_RxFifo0MsgPendingCallback+0x400>)
 8023884:	781a      	ldrb	r2, [r3, #0]
 8023886:	4b3d      	ldr	r3, [pc, #244]	@ (802397c <HAL_CAN_RxFifo0MsgPendingCallback+0x404>)
 8023888:	701a      	strb	r2, [r3, #0]
	DigitalCluster_RxSig_TurnSignals = CanH_RxSig_TurnSignal;
 802388a:	4b3d      	ldr	r3, [pc, #244]	@ (8023980 <HAL_CAN_RxFifo0MsgPendingCallback+0x408>)
 802388c:	781a      	ldrb	r2, [r3, #0]
 802388e:	4b3d      	ldr	r3, [pc, #244]	@ (8023984 <HAL_CAN_RxFifo0MsgPendingCallback+0x40c>)
 8023890:	701a      	strb	r2, [r3, #0]
	DigitalCluster_RxSig_DisplayMode = CanH_RxSig_DisplayMode;
 8023892:	4b3d      	ldr	r3, [pc, #244]	@ (8023988 <HAL_CAN_RxFifo0MsgPendingCallback+0x410>)
 8023894:	781a      	ldrb	r2, [r3, #0]
 8023896:	4b3d      	ldr	r3, [pc, #244]	@ (802398c <HAL_CAN_RxFifo0MsgPendingCallback+0x414>)
 8023898:	701a      	strb	r2, [r3, #0]
	DigitalCluster_RxSig_CollisionWarning = CanH_RxSig_IrSensStat;
 802389a:	4b3d      	ldr	r3, [pc, #244]	@ (8023990 <HAL_CAN_RxFifo0MsgPendingCallback+0x418>)
 802389c:	781a      	ldrb	r2, [r3, #0]
 802389e:	4b3d      	ldr	r3, [pc, #244]	@ (8023994 <HAL_CAN_RxFifo0MsgPendingCallback+0x41c>)
 80238a0:	701a      	strb	r2, [r3, #0]
	if(0 != CanH_RxSig_CcmId) DigitalCluster_RxSig_CheckControlMessageId = CanH_RxSig_CcmId;
 80238a2:	4b3d      	ldr	r3, [pc, #244]	@ (8023998 <HAL_CAN_RxFifo0MsgPendingCallback+0x420>)
 80238a4:	781b      	ldrb	r3, [r3, #0]
 80238a6:	2b00      	cmp	r3, #0
 80238a8:	d003      	beq.n	80238b2 <HAL_CAN_RxFifo0MsgPendingCallback+0x33a>
 80238aa:	4b3b      	ldr	r3, [pc, #236]	@ (8023998 <HAL_CAN_RxFifo0MsgPendingCallback+0x420>)
 80238ac:	781a      	ldrb	r2, [r3, #0]
 80238ae:	4b3b      	ldr	r3, [pc, #236]	@ (802399c <HAL_CAN_RxFifo0MsgPendingCallback+0x424>)
 80238b0:	701a      	strb	r2, [r3, #0]
	else
	{
		/* Do nothing. */
	}
	DigitalCluster_RxSig_OutsideTemperature = CanH_RxSig_TemperatureSensor;
 80238b2:	4b3b      	ldr	r3, [pc, #236]	@ (80239a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x428>)
 80238b4:	781a      	ldrb	r2, [r3, #0]
 80238b6:	4b3b      	ldr	r3, [pc, #236]	@ (80239a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x42c>)
 80238b8:	701a      	strb	r2, [r3, #0]
	DigitalCluster_RxSig_FanValue = CanH_RxSig_FanValue;
 80238ba:	4b3b      	ldr	r3, [pc, #236]	@ (80239a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x430>)
 80238bc:	781a      	ldrb	r2, [r3, #0]
 80238be:	4b3b      	ldr	r3, [pc, #236]	@ (80239ac <HAL_CAN_RxFifo0MsgPendingCallback+0x434>)
 80238c0:	701a      	strb	r2, [r3, #0]
	DigitalCluster_RxSig_RequestedTemperature = CanH_RxSig_ClimaTemp;
 80238c2:	4b3b      	ldr	r3, [pc, #236]	@ (80239b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x438>)
 80238c4:	781a      	ldrb	r2, [r3, #0]
 80238c6:	4b3b      	ldr	r3, [pc, #236]	@ (80239b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x43c>)
 80238c8:	701a      	strb	r2, [r3, #0]
	DigitalCluster_RxSig_Recirculation = CanH_RxSig_Recirculation;
 80238ca:	4b3b      	ldr	r3, [pc, #236]	@ (80239b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x440>)
 80238cc:	781a      	ldrb	r2, [r3, #0]
 80238ce:	4b3b      	ldr	r3, [pc, #236]	@ (80239bc <HAL_CAN_RxFifo0MsgPendingCallback+0x444>)
 80238d0:	701a      	strb	r2, [r3, #0]
	DigitalCluster_RxSig_AutoClimate = CanH_RxSig_AutoClimate;
 80238d2:	4b3b      	ldr	r3, [pc, #236]	@ (80239c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x448>)
 80238d4:	781a      	ldrb	r2, [r3, #0]
 80238d6:	4b3b      	ldr	r3, [pc, #236]	@ (80239c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x44c>)
 80238d8:	701a      	strb	r2, [r3, #0]
	DigitalCluster_RxSig_Rls = CanH_RxSig_RotaryLightSwitch;
 80238da:	4b3b      	ldr	r3, [pc, #236]	@ (80239c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x450>)
 80238dc:	781a      	ldrb	r2, [r3, #0]
 80238de:	4b3b      	ldr	r3, [pc, #236]	@ (80239cc <HAL_CAN_RxFifo0MsgPendingCallback+0x454>)
 80238e0:	701a      	strb	r2, [r3, #0]
	switch(CanH_RxSig_FogLights)
 80238e2:	4b3b      	ldr	r3, [pc, #236]	@ (80239d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x458>)
 80238e4:	781b      	ldrb	r3, [r3, #0]
 80238e6:	2b03      	cmp	r3, #3
 80238e8:	d014      	beq.n	8023914 <HAL_CAN_RxFifo0MsgPendingCallback+0x39c>
 80238ea:	2b03      	cmp	r3, #3
 80238ec:	dc19      	bgt.n	8023922 <HAL_CAN_RxFifo0MsgPendingCallback+0x3aa>
 80238ee:	2b01      	cmp	r3, #1
 80238f0:	d002      	beq.n	80238f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x380>
 80238f2:	2b02      	cmp	r3, #2
 80238f4:	d007      	beq.n	8023906 <HAL_CAN_RxFifo0MsgPendingCallback+0x38e>
 80238f6:	e014      	b.n	8023922 <HAL_CAN_RxFifo0MsgPendingCallback+0x3aa>
	{
	case 1:
		DigitalCluster_RxSig_FogLightFront = 1;
 80238f8:	4b36      	ldr	r3, [pc, #216]	@ (80239d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x45c>)
 80238fa:	2201      	movs	r2, #1
 80238fc:	701a      	strb	r2, [r3, #0]
		DigitalCluster_RxSig_FogLightRear = 0;
 80238fe:	4b36      	ldr	r3, [pc, #216]	@ (80239d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x460>)
 8023900:	2200      	movs	r2, #0
 8023902:	701a      	strb	r2, [r3, #0]
		break;
 8023904:	e014      	b.n	8023930 <HAL_CAN_RxFifo0MsgPendingCallback+0x3b8>
	case 2:
		DigitalCluster_RxSig_FogLightFront = 0;
 8023906:	4b33      	ldr	r3, [pc, #204]	@ (80239d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x45c>)
 8023908:	2200      	movs	r2, #0
 802390a:	701a      	strb	r2, [r3, #0]
		DigitalCluster_RxSig_FogLightRear = 1;
 802390c:	4b32      	ldr	r3, [pc, #200]	@ (80239d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x460>)
 802390e:	2201      	movs	r2, #1
 8023910:	701a      	strb	r2, [r3, #0]
		break;
 8023912:	e00d      	b.n	8023930 <HAL_CAN_RxFifo0MsgPendingCallback+0x3b8>
	case 3:
		DigitalCluster_RxSig_FogLightFront = 1;
 8023914:	4b2f      	ldr	r3, [pc, #188]	@ (80239d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x45c>)
 8023916:	2201      	movs	r2, #1
 8023918:	701a      	strb	r2, [r3, #0]
		DigitalCluster_RxSig_FogLightRear = 1;
 802391a:	4b2f      	ldr	r3, [pc, #188]	@ (80239d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x460>)
 802391c:	2201      	movs	r2, #1
 802391e:	701a      	strb	r2, [r3, #0]
		break;
 8023920:	e006      	b.n	8023930 <HAL_CAN_RxFifo0MsgPendingCallback+0x3b8>
	default:
		DigitalCluster_RxSig_FogLightFront = 0;
 8023922:	4b2c      	ldr	r3, [pc, #176]	@ (80239d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x45c>)
 8023924:	2200      	movs	r2, #0
 8023926:	701a      	strb	r2, [r3, #0]
		DigitalCluster_RxSig_FogLightRear = 0;
 8023928:	4b2b      	ldr	r3, [pc, #172]	@ (80239d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x460>)
 802392a:	2200      	movs	r2, #0
 802392c:	701a      	strb	r2, [r3, #0]
		break;
 802392e:	bf00      	nop
	}
}
 8023930:	bf00      	nop
 8023932:	3710      	adds	r7, #16
 8023934:	46bd      	mov	sp, r7
 8023936:	bd80      	pop	{r7, pc}
 8023938:	10000840 	.word	0x10000840
 802393c:	10000877 	.word	0x10000877
 8023940:	10000000 	.word	0x10000000
 8023944:	10000884 	.word	0x10000884
 8023948:	10000004 	.word	0x10000004
 802394c:	10000876 	.word	0x10000876
 8023950:	10000702 	.word	0x10000702
 8023954:	10000879 	.word	0x10000879
 8023958:	10000703 	.word	0x10000703
 802395c:	1000087b 	.word	0x1000087b
 8023960:	10000704 	.word	0x10000704
 8023964:	10000881 	.word	0x10000881
 8023968:	10000705 	.word	0x10000705
 802396c:	1000087c 	.word	0x1000087c
 8023970:	10000706 	.word	0x10000706
 8023974:	10000707 	.word	0x10000707
 8023978:	10000878 	.word	0x10000878
 802397c:	10000708 	.word	0x10000708
 8023980:	10000880 	.word	0x10000880
 8023984:	10000709 	.word	0x10000709
 8023988:	1000087e 	.word	0x1000087e
 802398c:	1000070a 	.word	0x1000070a
 8023990:	10000883 	.word	0x10000883
 8023994:	1000070b 	.word	0x1000070b
 8023998:	10000882 	.word	0x10000882
 802399c:	1000070d 	.word	0x1000070d
 80239a0:	1000087d 	.word	0x1000087d
 80239a4:	1000070f 	.word	0x1000070f
 80239a8:	10000887 	.word	0x10000887
 80239ac:	10000736 	.word	0x10000736
 80239b0:	10000888 	.word	0x10000888
 80239b4:	10000734 	.word	0x10000734
 80239b8:	10000886 	.word	0x10000886
 80239bc:	10000733 	.word	0x10000733
 80239c0:	10000889 	.word	0x10000889
 80239c4:	10000735 	.word	0x10000735
 80239c8:	1000087f 	.word	0x1000087f
 80239cc:	10000732 	.word	0x10000732
 80239d0:	10000885 	.word	0x10000885
 80239d4:	10000730 	.word	0x10000730
 80239d8:	10000731 	.word	0x10000731

080239dc <HAL_CAN_RxFifo0FullCallback>:
void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80239dc:	b480      	push	{r7}
 80239de:	b085      	sub	sp, #20
 80239e0:	af00      	add	r7, sp, #0
 80239e2:	6078      	str	r0, [r7, #4]
	CanH_RxFifo0FullCnt++;
 80239e4:	4b84      	ldr	r3, [pc, #528]	@ (8023bf8 <HAL_CAN_RxFifo0FullCallback+0x21c>)
 80239e6:	681b      	ldr	r3, [r3, #0]
 80239e8:	3301      	adds	r3, #1
 80239ea:	4a83      	ldr	r2, [pc, #524]	@ (8023bf8 <HAL_CAN_RxFifo0FullCallback+0x21c>)
 80239ec:	6013      	str	r3, [r2, #0]
	/* NM3 */
	if(0x510 == CanH_RxHeader.StdId)
 80239ee:	4b83      	ldr	r3, [pc, #524]	@ (8023bfc <HAL_CAN_RxFifo0FullCallback+0x220>)
 80239f0:	681b      	ldr	r3, [r3, #0]
 80239f2:	f5b3 6fa2 	cmp.w	r3, #1296	@ 0x510
 80239f6:	d114      	bne.n	8023a22 <HAL_CAN_RxFifo0FullCallback+0x46>
	{
		CanH_RxSig_Networkmanagement3 = CanH_RxData[0];
 80239f8:	4b81      	ldr	r3, [pc, #516]	@ (8023c00 <HAL_CAN_RxFifo0FullCallback+0x224>)
 80239fa:	781a      	ldrb	r2, [r3, #0]
 80239fc:	4b81      	ldr	r3, [pc, #516]	@ (8023c04 <HAL_CAN_RxFifo0FullCallback+0x228>)
 80239fe:	701a      	strb	r2, [r3, #0]
		if(0x10 == CanH_RxData[0])
 8023a00:	4b7f      	ldr	r3, [pc, #508]	@ (8023c00 <HAL_CAN_RxFifo0FullCallback+0x224>)
 8023a02:	781b      	ldrb	r3, [r3, #0]
 8023a04:	2b10      	cmp	r3, #16
 8023a06:	d10c      	bne.n	8023a22 <HAL_CAN_RxFifo0FullCallback+0x46>
		{
			CanH_RequestBusSleep = 0;
 8023a08:	4b7f      	ldr	r3, [pc, #508]	@ (8023c08 <HAL_CAN_RxFifo0FullCallback+0x22c>)
 8023a0a:	2200      	movs	r2, #0
 8023a0c:	701a      	strb	r2, [r3, #0]
			if(CC_ACTIVE != CanH_CommunicationState) CanH_CommunicationState = FULL_COMMUNICATION;
 8023a0e:	4b7f      	ldr	r3, [pc, #508]	@ (8023c0c <HAL_CAN_RxFifo0FullCallback+0x230>)
 8023a10:	781b      	ldrb	r3, [r3, #0]
 8023a12:	2b04      	cmp	r3, #4
 8023a14:	d002      	beq.n	8023a1c <HAL_CAN_RxFifo0FullCallback+0x40>
 8023a16:	4b7d      	ldr	r3, [pc, #500]	@ (8023c0c <HAL_CAN_RxFifo0FullCallback+0x230>)
 8023a18:	2202      	movs	r2, #2
 8023a1a:	701a      	strb	r2, [r3, #0]
			else
			{
				/* Do nothing. */
			}
			CanH_NoCommCounter = 0;
 8023a1c:	4b7c      	ldr	r3, [pc, #496]	@ (8023c10 <HAL_CAN_RxFifo0FullCallback+0x234>)
 8023a1e:	2200      	movs	r2, #0
 8023a20:	601a      	str	r2, [r3, #0]
	else
	{
		/* Do nothing. */
	}
	/* VehicleState */
	if(0x97 == CanH_RxHeader.StdId)
 8023a22:	4b76      	ldr	r3, [pc, #472]	@ (8023bfc <HAL_CAN_RxFifo0FullCallback+0x220>)
 8023a24:	681b      	ldr	r3, [r3, #0]
 8023a26:	2b97      	cmp	r3, #151	@ 0x97
 8023a28:	d11a      	bne.n	8023a60 <HAL_CAN_RxFifo0FullCallback+0x84>
	{
		CanH_RxSig_Ignition = CanH_RxData[2];
 8023a2a:	4b75      	ldr	r3, [pc, #468]	@ (8023c00 <HAL_CAN_RxFifo0FullCallback+0x224>)
 8023a2c:	789a      	ldrb	r2, [r3, #2]
 8023a2e:	4b79      	ldr	r3, [pc, #484]	@ (8023c14 <HAL_CAN_RxFifo0FullCallback+0x238>)
 8023a30:	701a      	strb	r2, [r3, #0]
		CanH_RxSig_Speed = CanH_RxData[7];
 8023a32:	4b73      	ldr	r3, [pc, #460]	@ (8023c00 <HAL_CAN_RxFifo0FullCallback+0x224>)
 8023a34:	79da      	ldrb	r2, [r3, #7]
 8023a36:	4b78      	ldr	r3, [pc, #480]	@ (8023c18 <HAL_CAN_RxFifo0FullCallback+0x23c>)
 8023a38:	701a      	strb	r2, [r3, #0]
		CanH_RxSig_Rpm = CanH_RxData[6];
 8023a3a:	4b71      	ldr	r3, [pc, #452]	@ (8023c00 <HAL_CAN_RxFifo0FullCallback+0x224>)
 8023a3c:	799a      	ldrb	r2, [r3, #6]
 8023a3e:	4b77      	ldr	r3, [pc, #476]	@ (8023c1c <HAL_CAN_RxFifo0FullCallback+0x240>)
 8023a40:	701a      	strb	r2, [r3, #0]
		CanH_RxSig_Gear = CanH_RxData[3];
 8023a42:	4b6f      	ldr	r3, [pc, #444]	@ (8023c00 <HAL_CAN_RxFifo0FullCallback+0x224>)
 8023a44:	78da      	ldrb	r2, [r3, #3]
 8023a46:	4b76      	ldr	r3, [pc, #472]	@ (8023c20 <HAL_CAN_RxFifo0FullCallback+0x244>)
 8023a48:	701a      	strb	r2, [r3, #0]
		CanH_RxSig_PowerSteeringStatus = CanH_RxData[4];
 8023a4a:	4b6d      	ldr	r3, [pc, #436]	@ (8023c00 <HAL_CAN_RxFifo0FullCallback+0x224>)
 8023a4c:	791a      	ldrb	r2, [r3, #4]
 8023a4e:	4b75      	ldr	r3, [pc, #468]	@ (8023c24 <HAL_CAN_RxFifo0FullCallback+0x248>)
 8023a50:	701a      	strb	r2, [r3, #0]
		CanH_RxSig_IrSensStat = CanH_RxData[5];
 8023a52:	4b6b      	ldr	r3, [pc, #428]	@ (8023c00 <HAL_CAN_RxFifo0FullCallback+0x224>)
 8023a54:	795a      	ldrb	r2, [r3, #5]
 8023a56:	4b74      	ldr	r3, [pc, #464]	@ (8023c28 <HAL_CAN_RxFifo0FullCallback+0x24c>)
 8023a58:	701a      	strb	r2, [r3, #0]
		CanH_VehState_MissCnt = 0;
 8023a5a:	4b74      	ldr	r3, [pc, #464]	@ (8023c2c <HAL_CAN_RxFifo0FullCallback+0x250>)
 8023a5c:	2200      	movs	r2, #0
 8023a5e:	601a      	str	r2, [r3, #0]
	else
	{
		/* Do nothing. */
	}
	/* StatusBodyControl */
	if(0x98 == CanH_RxHeader.StdId)
 8023a60:	4b66      	ldr	r3, [pc, #408]	@ (8023bfc <HAL_CAN_RxFifo0FullCallback+0x220>)
 8023a62:	681b      	ldr	r3, [r3, #0]
 8023a64:	2b98      	cmp	r3, #152	@ 0x98
 8023a66:	d11a      	bne.n	8023a9e <HAL_CAN_RxFifo0FullCallback+0xc2>
	{
		CanH_RxSig_Recirculation = CanH_RxData[0];
 8023a68:	4b65      	ldr	r3, [pc, #404]	@ (8023c00 <HAL_CAN_RxFifo0FullCallback+0x224>)
 8023a6a:	781a      	ldrb	r2, [r3, #0]
 8023a6c:	4b70      	ldr	r3, [pc, #448]	@ (8023c30 <HAL_CAN_RxFifo0FullCallback+0x254>)
 8023a6e:	701a      	strb	r2, [r3, #0]
		CanH_RxSig_FogLights = CanH_RxData[3];
 8023a70:	4b63      	ldr	r3, [pc, #396]	@ (8023c00 <HAL_CAN_RxFifo0FullCallback+0x224>)
 8023a72:	78da      	ldrb	r2, [r3, #3]
 8023a74:	4b6f      	ldr	r3, [pc, #444]	@ (8023c34 <HAL_CAN_RxFifo0FullCallback+0x258>)
 8023a76:	701a      	strb	r2, [r3, #0]
		CanH_RxSig_HighBeam = CanH_RxData[4];
 8023a78:	4b61      	ldr	r3, [pc, #388]	@ (8023c00 <HAL_CAN_RxFifo0FullCallback+0x224>)
 8023a7a:	791a      	ldrb	r2, [r3, #4]
 8023a7c:	4b6e      	ldr	r3, [pc, #440]	@ (8023c38 <HAL_CAN_RxFifo0FullCallback+0x25c>)
 8023a7e:	701a      	strb	r2, [r3, #0]
		CanH_RxSig_TemperatureSensor = CanH_RxData[5];
 8023a80:	4b5f      	ldr	r3, [pc, #380]	@ (8023c00 <HAL_CAN_RxFifo0FullCallback+0x224>)
 8023a82:	795a      	ldrb	r2, [r3, #5]
 8023a84:	4b6d      	ldr	r3, [pc, #436]	@ (8023c3c <HAL_CAN_RxFifo0FullCallback+0x260>)
 8023a86:	701a      	strb	r2, [r3, #0]
		CanH_RxSig_TurnSignal = CanH_RxData[6];
 8023a88:	4b5d      	ldr	r3, [pc, #372]	@ (8023c00 <HAL_CAN_RxFifo0FullCallback+0x224>)
 8023a8a:	799a      	ldrb	r2, [r3, #6]
 8023a8c:	4b6c      	ldr	r3, [pc, #432]	@ (8023c40 <HAL_CAN_RxFifo0FullCallback+0x264>)
 8023a8e:	701a      	strb	r2, [r3, #0]
		CanH_RxSig_AutoClimate = CanH_RxData[7];
 8023a90:	4b5b      	ldr	r3, [pc, #364]	@ (8023c00 <HAL_CAN_RxFifo0FullCallback+0x224>)
 8023a92:	79da      	ldrb	r2, [r3, #7]
 8023a94:	4b6b      	ldr	r3, [pc, #428]	@ (8023c44 <HAL_CAN_RxFifo0FullCallback+0x268>)
 8023a96:	701a      	strb	r2, [r3, #0]
		CanH_BodyState_MissCnt = 0;
 8023a98:	4b6b      	ldr	r3, [pc, #428]	@ (8023c48 <HAL_CAN_RxFifo0FullCallback+0x26c>)
 8023a9a:	2200      	movs	r2, #0
 8023a9c:	601a      	str	r2, [r3, #0]
	else
	{
		/* Do nothing. */
	}
	/* StatusBodyControl2 */
	if(0x99 == CanH_RxHeader.StdId)
 8023a9e:	4b57      	ldr	r3, [pc, #348]	@ (8023bfc <HAL_CAN_RxFifo0FullCallback+0x220>)
 8023aa0:	681b      	ldr	r3, [r3, #0]
 8023aa2:	2b99      	cmp	r3, #153	@ 0x99
 8023aa4:	d112      	bne.n	8023acc <HAL_CAN_RxFifo0FullCallback+0xf0>
	{
		CanH_RxSig_FanValue = CanH_RxData[0];
 8023aa6:	4b56      	ldr	r3, [pc, #344]	@ (8023c00 <HAL_CAN_RxFifo0FullCallback+0x224>)
 8023aa8:	781a      	ldrb	r2, [r3, #0]
 8023aaa:	4b68      	ldr	r3, [pc, #416]	@ (8023c4c <HAL_CAN_RxFifo0FullCallback+0x270>)
 8023aac:	701a      	strb	r2, [r3, #0]
		CanH_RxSig_DisplayMode = CanH_RxData[1];
 8023aae:	4b54      	ldr	r3, [pc, #336]	@ (8023c00 <HAL_CAN_RxFifo0FullCallback+0x224>)
 8023ab0:	785a      	ldrb	r2, [r3, #1]
 8023ab2:	4b67      	ldr	r3, [pc, #412]	@ (8023c50 <HAL_CAN_RxFifo0FullCallback+0x274>)
 8023ab4:	701a      	strb	r2, [r3, #0]
		CanH_RxSig_ClimaTemp = CanH_RxData[2];
 8023ab6:	4b52      	ldr	r3, [pc, #328]	@ (8023c00 <HAL_CAN_RxFifo0FullCallback+0x224>)
 8023ab8:	789a      	ldrb	r2, [r3, #2]
 8023aba:	4b66      	ldr	r3, [pc, #408]	@ (8023c54 <HAL_CAN_RxFifo0FullCallback+0x278>)
 8023abc:	701a      	strb	r2, [r3, #0]
		CanH_RxSig_RotaryLightSwitch = CanH_RxData[3];
 8023abe:	4b50      	ldr	r3, [pc, #320]	@ (8023c00 <HAL_CAN_RxFifo0FullCallback+0x224>)
 8023ac0:	78da      	ldrb	r2, [r3, #3]
 8023ac2:	4b65      	ldr	r3, [pc, #404]	@ (8023c58 <HAL_CAN_RxFifo0FullCallback+0x27c>)
 8023ac4:	701a      	strb	r2, [r3, #0]
		CanH_BodyState2_MissCnt = 0;
 8023ac6:	4b65      	ldr	r3, [pc, #404]	@ (8023c5c <HAL_CAN_RxFifo0FullCallback+0x280>)
 8023ac8:	2200      	movs	r2, #0
 8023aca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		/* Do nothing. */
	}
	if(0x10b == CanH_RxHeader.StdId)CanH_RxSig_CcmId = CanH_RxData[0];
 8023acc:	4b4b      	ldr	r3, [pc, #300]	@ (8023bfc <HAL_CAN_RxFifo0FullCallback+0x220>)
 8023ace:	681b      	ldr	r3, [r3, #0]
 8023ad0:	f240 120b 	movw	r2, #267	@ 0x10b
 8023ad4:	4293      	cmp	r3, r2
 8023ad6:	d103      	bne.n	8023ae0 <HAL_CAN_RxFifo0FullCallback+0x104>
 8023ad8:	4b49      	ldr	r3, [pc, #292]	@ (8023c00 <HAL_CAN_RxFifo0FullCallback+0x224>)
 8023ada:	781a      	ldrb	r2, [r3, #0]
 8023adc:	4b60      	ldr	r3, [pc, #384]	@ (8023c60 <HAL_CAN_RxFifo0FullCallback+0x284>)
 8023ade:	701a      	strb	r2, [r3, #0]
	else
	{
		/* Do nothing. */
	}
	/* DataRecorder */
	if(0x10f == CanH_RxHeader.StdId)
 8023ae0:	4b46      	ldr	r3, [pc, #280]	@ (8023bfc <HAL_CAN_RxFifo0FullCallback+0x220>)
 8023ae2:	681b      	ldr	r3, [r3, #0]
 8023ae4:	f240 120f 	movw	r2, #271	@ 0x10f
 8023ae8:	4293      	cmp	r3, r2
 8023aea:	d10a      	bne.n	8023b02 <HAL_CAN_RxFifo0FullCallback+0x126>
	{
		CanH_RxSig_VBat = CanH_RxData[1];
 8023aec:	4b44      	ldr	r3, [pc, #272]	@ (8023c00 <HAL_CAN_RxFifo0FullCallback+0x224>)
 8023aee:	785a      	ldrb	r2, [r3, #1]
 8023af0:	4b5c      	ldr	r3, [pc, #368]	@ (8023c64 <HAL_CAN_RxFifo0FullCallback+0x288>)
 8023af2:	701a      	strb	r2, [r3, #0]
		CanH_RxSig_DrivecycleStatus = CanH_RxData[2];
 8023af4:	4b42      	ldr	r3, [pc, #264]	@ (8023c00 <HAL_CAN_RxFifo0FullCallback+0x224>)
 8023af6:	789a      	ldrb	r2, [r3, #2]
 8023af8:	4b5b      	ldr	r3, [pc, #364]	@ (8023c68 <HAL_CAN_RxFifo0FullCallback+0x28c>)
 8023afa:	701a      	strb	r2, [r3, #0]
		CanH_DataRecorder_MissCnt = 0;
 8023afc:	4b5b      	ldr	r3, [pc, #364]	@ (8023c6c <HAL_CAN_RxFifo0FullCallback+0x290>)
 8023afe:	2200      	movs	r2, #0
 8023b00:	601a      	str	r2, [r3, #0]
	else
	{
		/* Do nothing. */
	}
	/* Diagnosis */
	if(0x704 == CanH_RxHeader.StdId)
 8023b02:	4b3e      	ldr	r3, [pc, #248]	@ (8023bfc <HAL_CAN_RxFifo0FullCallback+0x220>)
 8023b04:	681b      	ldr	r3, [r3, #0]
 8023b06:	f240 7204 	movw	r2, #1796	@ 0x704
 8023b0a:	4293      	cmp	r3, r2
 8023b0c:	d12a      	bne.n	8023b64 <HAL_CAN_RxFifo0FullCallback+0x188>
	{
		CanH_DiagRxHeader.DLC = CanH_RxHeader.DLC;
 8023b0e:	4b3b      	ldr	r3, [pc, #236]	@ (8023bfc <HAL_CAN_RxFifo0FullCallback+0x220>)
 8023b10:	691b      	ldr	r3, [r3, #16]
 8023b12:	4a57      	ldr	r2, [pc, #348]	@ (8023c70 <HAL_CAN_RxFifo0FullCallback+0x294>)
 8023b14:	6113      	str	r3, [r2, #16]
		CanH_DiagRxHeader.ExtId = CanH_RxHeader.ExtId;
 8023b16:	4b39      	ldr	r3, [pc, #228]	@ (8023bfc <HAL_CAN_RxFifo0FullCallback+0x220>)
 8023b18:	685b      	ldr	r3, [r3, #4]
 8023b1a:	4a55      	ldr	r2, [pc, #340]	@ (8023c70 <HAL_CAN_RxFifo0FullCallback+0x294>)
 8023b1c:	6053      	str	r3, [r2, #4]
		CanH_DiagRxHeader.FilterMatchIndex = CanH_RxHeader.FilterMatchIndex;
 8023b1e:	4b37      	ldr	r3, [pc, #220]	@ (8023bfc <HAL_CAN_RxFifo0FullCallback+0x220>)
 8023b20:	699b      	ldr	r3, [r3, #24]
 8023b22:	4a53      	ldr	r2, [pc, #332]	@ (8023c70 <HAL_CAN_RxFifo0FullCallback+0x294>)
 8023b24:	6193      	str	r3, [r2, #24]
		CanH_DiagRxHeader.IDE = CanH_RxHeader.IDE;
 8023b26:	4b35      	ldr	r3, [pc, #212]	@ (8023bfc <HAL_CAN_RxFifo0FullCallback+0x220>)
 8023b28:	689b      	ldr	r3, [r3, #8]
 8023b2a:	4a51      	ldr	r2, [pc, #324]	@ (8023c70 <HAL_CAN_RxFifo0FullCallback+0x294>)
 8023b2c:	6093      	str	r3, [r2, #8]
		CanH_DiagRxHeader.RTR = CanH_RxHeader.RTR;
 8023b2e:	4b33      	ldr	r3, [pc, #204]	@ (8023bfc <HAL_CAN_RxFifo0FullCallback+0x220>)
 8023b30:	68db      	ldr	r3, [r3, #12]
 8023b32:	4a4f      	ldr	r2, [pc, #316]	@ (8023c70 <HAL_CAN_RxFifo0FullCallback+0x294>)
 8023b34:	60d3      	str	r3, [r2, #12]
		CanH_DiagRxHeader.StdId = CanH_RxHeader.StdId;
 8023b36:	4b31      	ldr	r3, [pc, #196]	@ (8023bfc <HAL_CAN_RxFifo0FullCallback+0x220>)
 8023b38:	681b      	ldr	r3, [r3, #0]
 8023b3a:	4a4d      	ldr	r2, [pc, #308]	@ (8023c70 <HAL_CAN_RxFifo0FullCallback+0x294>)
 8023b3c:	6013      	str	r3, [r2, #0]
		CanH_DiagRxHeader.Timestamp = CanH_RxHeader.Timestamp;
 8023b3e:	4b2f      	ldr	r3, [pc, #188]	@ (8023bfc <HAL_CAN_RxFifo0FullCallback+0x220>)
 8023b40:	695b      	ldr	r3, [r3, #20]
 8023b42:	4a4b      	ldr	r2, [pc, #300]	@ (8023c70 <HAL_CAN_RxFifo0FullCallback+0x294>)
 8023b44:	6153      	str	r3, [r2, #20]
		for(uint8 i = 0; i < 8; i++) CanH_DiagArray[i] = CanH_RxData[i];
 8023b46:	2300      	movs	r3, #0
 8023b48:	73fb      	strb	r3, [r7, #15]
 8023b4a:	e008      	b.n	8023b5e <HAL_CAN_RxFifo0FullCallback+0x182>
 8023b4c:	7bfa      	ldrb	r2, [r7, #15]
 8023b4e:	7bfb      	ldrb	r3, [r7, #15]
 8023b50:	492b      	ldr	r1, [pc, #172]	@ (8023c00 <HAL_CAN_RxFifo0FullCallback+0x224>)
 8023b52:	5c89      	ldrb	r1, [r1, r2]
 8023b54:	4a47      	ldr	r2, [pc, #284]	@ (8023c74 <HAL_CAN_RxFifo0FullCallback+0x298>)
 8023b56:	54d1      	strb	r1, [r2, r3]
 8023b58:	7bfb      	ldrb	r3, [r7, #15]
 8023b5a:	3301      	adds	r3, #1
 8023b5c:	73fb      	strb	r3, [r7, #15]
 8023b5e:	7bfb      	ldrb	r3, [r7, #15]
 8023b60:	2b07      	cmp	r3, #7
 8023b62:	d9f3      	bls.n	8023b4c <HAL_CAN_RxFifo0FullCallback+0x170>
	else
	{
		/* Do nothing. */
	}
	/* XCP */
	if(0x604 == CanH_RxHeader.StdId)
 8023b64:	4b25      	ldr	r3, [pc, #148]	@ (8023bfc <HAL_CAN_RxFifo0FullCallback+0x220>)
 8023b66:	681b      	ldr	r3, [r3, #0]
 8023b68:	f240 6204 	movw	r2, #1540	@ 0x604
 8023b6c:	4293      	cmp	r3, r2
 8023b6e:	d12a      	bne.n	8023bc6 <HAL_CAN_RxFifo0FullCallback+0x1ea>
	{
		CanH_XcpRxHeader.DLC = CanH_RxHeader.DLC;
 8023b70:	4b22      	ldr	r3, [pc, #136]	@ (8023bfc <HAL_CAN_RxFifo0FullCallback+0x220>)
 8023b72:	691b      	ldr	r3, [r3, #16]
 8023b74:	4a40      	ldr	r2, [pc, #256]	@ (8023c78 <HAL_CAN_RxFifo0FullCallback+0x29c>)
 8023b76:	6113      	str	r3, [r2, #16]
		CanH_XcpRxHeader.ExtId = CanH_RxHeader.ExtId;
 8023b78:	4b20      	ldr	r3, [pc, #128]	@ (8023bfc <HAL_CAN_RxFifo0FullCallback+0x220>)
 8023b7a:	685b      	ldr	r3, [r3, #4]
 8023b7c:	4a3e      	ldr	r2, [pc, #248]	@ (8023c78 <HAL_CAN_RxFifo0FullCallback+0x29c>)
 8023b7e:	6053      	str	r3, [r2, #4]
		CanH_XcpRxHeader.FilterMatchIndex = CanH_RxHeader.FilterMatchIndex;
 8023b80:	4b1e      	ldr	r3, [pc, #120]	@ (8023bfc <HAL_CAN_RxFifo0FullCallback+0x220>)
 8023b82:	699b      	ldr	r3, [r3, #24]
 8023b84:	4a3c      	ldr	r2, [pc, #240]	@ (8023c78 <HAL_CAN_RxFifo0FullCallback+0x29c>)
 8023b86:	6193      	str	r3, [r2, #24]
		CanH_XcpRxHeader.IDE = CanH_RxHeader.IDE;
 8023b88:	4b1c      	ldr	r3, [pc, #112]	@ (8023bfc <HAL_CAN_RxFifo0FullCallback+0x220>)
 8023b8a:	689b      	ldr	r3, [r3, #8]
 8023b8c:	4a3a      	ldr	r2, [pc, #232]	@ (8023c78 <HAL_CAN_RxFifo0FullCallback+0x29c>)
 8023b8e:	6093      	str	r3, [r2, #8]
		CanH_XcpRxHeader.RTR = CanH_RxHeader.RTR;
 8023b90:	4b1a      	ldr	r3, [pc, #104]	@ (8023bfc <HAL_CAN_RxFifo0FullCallback+0x220>)
 8023b92:	68db      	ldr	r3, [r3, #12]
 8023b94:	4a38      	ldr	r2, [pc, #224]	@ (8023c78 <HAL_CAN_RxFifo0FullCallback+0x29c>)
 8023b96:	60d3      	str	r3, [r2, #12]
		CanH_XcpRxHeader.StdId = CanH_RxHeader.StdId;
 8023b98:	4b18      	ldr	r3, [pc, #96]	@ (8023bfc <HAL_CAN_RxFifo0FullCallback+0x220>)
 8023b9a:	681b      	ldr	r3, [r3, #0]
 8023b9c:	4a36      	ldr	r2, [pc, #216]	@ (8023c78 <HAL_CAN_RxFifo0FullCallback+0x29c>)
 8023b9e:	6013      	str	r3, [r2, #0]
		CanH_XcpRxHeader.Timestamp = CanH_RxHeader.Timestamp;
 8023ba0:	4b16      	ldr	r3, [pc, #88]	@ (8023bfc <HAL_CAN_RxFifo0FullCallback+0x220>)
 8023ba2:	695b      	ldr	r3, [r3, #20]
 8023ba4:	4a34      	ldr	r2, [pc, #208]	@ (8023c78 <HAL_CAN_RxFifo0FullCallback+0x29c>)
 8023ba6:	6153      	str	r3, [r2, #20]
		for(uint8 i = 0; i < 8; i++) CanH_XcpArray[i] = CanH_RxData[i];
 8023ba8:	2300      	movs	r3, #0
 8023baa:	73bb      	strb	r3, [r7, #14]
 8023bac:	e008      	b.n	8023bc0 <HAL_CAN_RxFifo0FullCallback+0x1e4>
 8023bae:	7bba      	ldrb	r2, [r7, #14]
 8023bb0:	7bbb      	ldrb	r3, [r7, #14]
 8023bb2:	4913      	ldr	r1, [pc, #76]	@ (8023c00 <HAL_CAN_RxFifo0FullCallback+0x224>)
 8023bb4:	5c89      	ldrb	r1, [r1, r2]
 8023bb6:	4a31      	ldr	r2, [pc, #196]	@ (8023c7c <HAL_CAN_RxFifo0FullCallback+0x2a0>)
 8023bb8:	54d1      	strb	r1, [r2, r3]
 8023bba:	7bbb      	ldrb	r3, [r7, #14]
 8023bbc:	3301      	adds	r3, #1
 8023bbe:	73bb      	strb	r3, [r7, #14]
 8023bc0:	7bbb      	ldrb	r3, [r7, #14]
 8023bc2:	2b07      	cmp	r3, #7
 8023bc4:	d9f3      	bls.n	8023bae <HAL_CAN_RxFifo0FullCallback+0x1d2>
	}
	else
	{
		/* Do nothing. */
	}
	CanH_RxHeader.DLC = 0;
 8023bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8023bfc <HAL_CAN_RxFifo0FullCallback+0x220>)
 8023bc8:	2200      	movs	r2, #0
 8023bca:	611a      	str	r2, [r3, #16]
	CanH_RxHeader.ExtId = 0;
 8023bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8023bfc <HAL_CAN_RxFifo0FullCallback+0x220>)
 8023bce:	2200      	movs	r2, #0
 8023bd0:	605a      	str	r2, [r3, #4]
	CanH_RxHeader.FilterMatchIndex = 0;
 8023bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8023bfc <HAL_CAN_RxFifo0FullCallback+0x220>)
 8023bd4:	2200      	movs	r2, #0
 8023bd6:	619a      	str	r2, [r3, #24]
	CanH_RxHeader.IDE = 0;
 8023bd8:	4b08      	ldr	r3, [pc, #32]	@ (8023bfc <HAL_CAN_RxFifo0FullCallback+0x220>)
 8023bda:	2200      	movs	r2, #0
 8023bdc:	609a      	str	r2, [r3, #8]
	CanH_RxHeader.RTR = 0;
 8023bde:	4b07      	ldr	r3, [pc, #28]	@ (8023bfc <HAL_CAN_RxFifo0FullCallback+0x220>)
 8023be0:	2200      	movs	r2, #0
 8023be2:	60da      	str	r2, [r3, #12]
	CanH_RxHeader.StdId = 0;
 8023be4:	4b05      	ldr	r3, [pc, #20]	@ (8023bfc <HAL_CAN_RxFifo0FullCallback+0x220>)
 8023be6:	2200      	movs	r2, #0
 8023be8:	601a      	str	r2, [r3, #0]
	CanH_RxHeader.Timestamp = 0;
 8023bea:	4b04      	ldr	r3, [pc, #16]	@ (8023bfc <HAL_CAN_RxFifo0FullCallback+0x220>)
 8023bec:	2200      	movs	r2, #0
 8023bee:	615a      	str	r2, [r3, #20]
	for(uint8 i = 0; i < 8; i++) CanH_RxData[i] = 0;
 8023bf0:	2300      	movs	r3, #0
 8023bf2:	737b      	strb	r3, [r7, #13]
 8023bf4:	e04b      	b.n	8023c8e <HAL_CAN_RxFifo0FullCallback+0x2b2>
 8023bf6:	bf00      	nop
 8023bf8:	10000820 	.word	0x10000820
 8023bfc:	10000824 	.word	0x10000824
 8023c00:	10000840 	.word	0x10000840
 8023c04:	10000875 	.word	0x10000875
 8023c08:	1000086c 	.word	0x1000086c
 8023c0c:	10000874 	.word	0x10000874
 8023c10:	10000870 	.word	0x10000870
 8023c14:	10000876 	.word	0x10000876
 8023c18:	10000877 	.word	0x10000877
 8023c1c:	10000878 	.word	0x10000878
 8023c20:	1000087b 	.word	0x1000087b
 8023c24:	1000087c 	.word	0x1000087c
 8023c28:	10000883 	.word	0x10000883
 8023c2c:	100008d4 	.word	0x100008d4
 8023c30:	10000886 	.word	0x10000886
 8023c34:	10000885 	.word	0x10000885
 8023c38:	10000881 	.word	0x10000881
 8023c3c:	1000087d 	.word	0x1000087d
 8023c40:	10000880 	.word	0x10000880
 8023c44:	10000889 	.word	0x10000889
 8023c48:	100008d8 	.word	0x100008d8
 8023c4c:	10000887 	.word	0x10000887
 8023c50:	1000087e 	.word	0x1000087e
 8023c54:	10000888 	.word	0x10000888
 8023c58:	1000087f 	.word	0x1000087f
 8023c5c:	100008dc 	.word	0x100008dc
 8023c60:	10000882 	.word	0x10000882
 8023c64:	10000879 	.word	0x10000879
 8023c68:	10000884 	.word	0x10000884
 8023c6c:	100008e0 	.word	0x100008e0
 8023c70:	1000089c 	.word	0x1000089c
 8023c74:	10000894 	.word	0x10000894
 8023c78:	100008b8 	.word	0x100008b8
 8023c7c:	1000088c 	.word	0x1000088c
 8023c80:	7b7b      	ldrb	r3, [r7, #13]
 8023c82:	4a43      	ldr	r2, [pc, #268]	@ (8023d90 <HAL_CAN_RxFifo0FullCallback+0x3b4>)
 8023c84:	2100      	movs	r1, #0
 8023c86:	54d1      	strb	r1, [r2, r3]
 8023c88:	7b7b      	ldrb	r3, [r7, #13]
 8023c8a:	3301      	adds	r3, #1
 8023c8c:	737b      	strb	r3, [r7, #13]
 8023c8e:	7b7b      	ldrb	r3, [r7, #13]
 8023c90:	2b07      	cmp	r3, #7
 8023c92:	d9f5      	bls.n	8023c80 <HAL_CAN_RxFifo0FullCallback+0x2a4>
	DataRecorder_RxSig_VehicleSpeed = CanH_RxSig_Speed;
 8023c94:	4b3f      	ldr	r3, [pc, #252]	@ (8023d94 <HAL_CAN_RxFifo0FullCallback+0x3b8>)
 8023c96:	781b      	ldrb	r3, [r3, #0]
 8023c98:	461a      	mov	r2, r3
 8023c9a:	4b3f      	ldr	r3, [pc, #252]	@ (8023d98 <HAL_CAN_RxFifo0FullCallback+0x3bc>)
 8023c9c:	601a      	str	r2, [r3, #0]
	DataRecorder_RxSig_DriveCycleStatus = CanH_RxSig_DrivecycleStatus;
 8023c9e:	4b3f      	ldr	r3, [pc, #252]	@ (8023d9c <HAL_CAN_RxFifo0FullCallback+0x3c0>)
 8023ca0:	781a      	ldrb	r2, [r3, #0]
 8023ca2:	4b3f      	ldr	r3, [pc, #252]	@ (8023da0 <HAL_CAN_RxFifo0FullCallback+0x3c4>)
 8023ca4:	701a      	strb	r2, [r3, #0]
	DigitalCluster_RxSig_IgnitionStatus = CanH_RxSig_Ignition;
 8023ca6:	4b3f      	ldr	r3, [pc, #252]	@ (8023da4 <HAL_CAN_RxFifo0FullCallback+0x3c8>)
 8023ca8:	781a      	ldrb	r2, [r3, #0]
 8023caa:	4b3f      	ldr	r3, [pc, #252]	@ (8023da8 <HAL_CAN_RxFifo0FullCallback+0x3cc>)
 8023cac:	701a      	strb	r2, [r3, #0]
	DigitalCluster_RxSig_VBat = CanH_RxSig_VBat;
 8023cae:	4b3f      	ldr	r3, [pc, #252]	@ (8023dac <HAL_CAN_RxFifo0FullCallback+0x3d0>)
 8023cb0:	781a      	ldrb	r2, [r3, #0]
 8023cb2:	4b3f      	ldr	r3, [pc, #252]	@ (8023db0 <HAL_CAN_RxFifo0FullCallback+0x3d4>)
 8023cb4:	701a      	strb	r2, [r3, #0]
	DigitalCluster_RxSig_Gear = CanH_RxSig_Gear;
 8023cb6:	4b3f      	ldr	r3, [pc, #252]	@ (8023db4 <HAL_CAN_RxFifo0FullCallback+0x3d8>)
 8023cb8:	781a      	ldrb	r2, [r3, #0]
 8023cba:	4b3f      	ldr	r3, [pc, #252]	@ (8023db8 <HAL_CAN_RxFifo0FullCallback+0x3dc>)
 8023cbc:	701a      	strb	r2, [r3, #0]
	DigitalCluster_RxSig_HighBeamStatus = CanH_RxSig_HighBeam;
 8023cbe:	4b3f      	ldr	r3, [pc, #252]	@ (8023dbc <HAL_CAN_RxFifo0FullCallback+0x3e0>)
 8023cc0:	781a      	ldrb	r2, [r3, #0]
 8023cc2:	4b3f      	ldr	r3, [pc, #252]	@ (8023dc0 <HAL_CAN_RxFifo0FullCallback+0x3e4>)
 8023cc4:	701a      	strb	r2, [r3, #0]
	DigitalCluster_RxSig_PowerSteeringStatus = CanH_RxSig_PowerSteeringStatus;
 8023cc6:	4b3f      	ldr	r3, [pc, #252]	@ (8023dc4 <HAL_CAN_RxFifo0FullCallback+0x3e8>)
 8023cc8:	781a      	ldrb	r2, [r3, #0]
 8023cca:	4b3f      	ldr	r3, [pc, #252]	@ (8023dc8 <HAL_CAN_RxFifo0FullCallback+0x3ec>)
 8023ccc:	701a      	strb	r2, [r3, #0]
	DigitalCluster_RxSig_VehicleSpeed = CanH_RxSig_Speed;
 8023cce:	4b31      	ldr	r3, [pc, #196]	@ (8023d94 <HAL_CAN_RxFifo0FullCallback+0x3b8>)
 8023cd0:	781a      	ldrb	r2, [r3, #0]
 8023cd2:	4b3e      	ldr	r3, [pc, #248]	@ (8023dcc <HAL_CAN_RxFifo0FullCallback+0x3f0>)
 8023cd4:	701a      	strb	r2, [r3, #0]
	DigitalCluster_RxSig_MotorRpm = CanH_RxSig_Rpm;
 8023cd6:	4b3e      	ldr	r3, [pc, #248]	@ (8023dd0 <HAL_CAN_RxFifo0FullCallback+0x3f4>)
 8023cd8:	781a      	ldrb	r2, [r3, #0]
 8023cda:	4b3e      	ldr	r3, [pc, #248]	@ (8023dd4 <HAL_CAN_RxFifo0FullCallback+0x3f8>)
 8023cdc:	701a      	strb	r2, [r3, #0]
	DigitalCluster_RxSig_TurnSignals = CanH_RxSig_TurnSignal;
 8023cde:	4b3e      	ldr	r3, [pc, #248]	@ (8023dd8 <HAL_CAN_RxFifo0FullCallback+0x3fc>)
 8023ce0:	781a      	ldrb	r2, [r3, #0]
 8023ce2:	4b3e      	ldr	r3, [pc, #248]	@ (8023ddc <HAL_CAN_RxFifo0FullCallback+0x400>)
 8023ce4:	701a      	strb	r2, [r3, #0]
	DigitalCluster_RxSig_DisplayMode = CanH_RxSig_DisplayMode;
 8023ce6:	4b3e      	ldr	r3, [pc, #248]	@ (8023de0 <HAL_CAN_RxFifo0FullCallback+0x404>)
 8023ce8:	781a      	ldrb	r2, [r3, #0]
 8023cea:	4b3e      	ldr	r3, [pc, #248]	@ (8023de4 <HAL_CAN_RxFifo0FullCallback+0x408>)
 8023cec:	701a      	strb	r2, [r3, #0]
	DigitalCluster_RxSig_CollisionWarning = CanH_RxSig_IrSensStat;
 8023cee:	4b3e      	ldr	r3, [pc, #248]	@ (8023de8 <HAL_CAN_RxFifo0FullCallback+0x40c>)
 8023cf0:	781a      	ldrb	r2, [r3, #0]
 8023cf2:	4b3e      	ldr	r3, [pc, #248]	@ (8023dec <HAL_CAN_RxFifo0FullCallback+0x410>)
 8023cf4:	701a      	strb	r2, [r3, #0]
	if(0 != CanH_RxSig_CcmId) DigitalCluster_RxSig_CheckControlMessageId = CanH_RxSig_CcmId;
 8023cf6:	4b3e      	ldr	r3, [pc, #248]	@ (8023df0 <HAL_CAN_RxFifo0FullCallback+0x414>)
 8023cf8:	781b      	ldrb	r3, [r3, #0]
 8023cfa:	2b00      	cmp	r3, #0
 8023cfc:	d003      	beq.n	8023d06 <HAL_CAN_RxFifo0FullCallback+0x32a>
 8023cfe:	4b3c      	ldr	r3, [pc, #240]	@ (8023df0 <HAL_CAN_RxFifo0FullCallback+0x414>)
 8023d00:	781a      	ldrb	r2, [r3, #0]
 8023d02:	4b3c      	ldr	r3, [pc, #240]	@ (8023df4 <HAL_CAN_RxFifo0FullCallback+0x418>)
 8023d04:	701a      	strb	r2, [r3, #0]
	else
	{
		/* Do nothing. */
	}
	DigitalCluster_RxSig_OutsideTemperature = CanH_RxSig_TemperatureSensor;
 8023d06:	4b3c      	ldr	r3, [pc, #240]	@ (8023df8 <HAL_CAN_RxFifo0FullCallback+0x41c>)
 8023d08:	781a      	ldrb	r2, [r3, #0]
 8023d0a:	4b3c      	ldr	r3, [pc, #240]	@ (8023dfc <HAL_CAN_RxFifo0FullCallback+0x420>)
 8023d0c:	701a      	strb	r2, [r3, #0]
	DigitalCluster_RxSig_FanValue = CanH_RxSig_FanValue;
 8023d0e:	4b3c      	ldr	r3, [pc, #240]	@ (8023e00 <HAL_CAN_RxFifo0FullCallback+0x424>)
 8023d10:	781a      	ldrb	r2, [r3, #0]
 8023d12:	4b3c      	ldr	r3, [pc, #240]	@ (8023e04 <HAL_CAN_RxFifo0FullCallback+0x428>)
 8023d14:	701a      	strb	r2, [r3, #0]
	DigitalCluster_RxSig_RequestedTemperature = CanH_RxSig_ClimaTemp;
 8023d16:	4b3c      	ldr	r3, [pc, #240]	@ (8023e08 <HAL_CAN_RxFifo0FullCallback+0x42c>)
 8023d18:	781a      	ldrb	r2, [r3, #0]
 8023d1a:	4b3c      	ldr	r3, [pc, #240]	@ (8023e0c <HAL_CAN_RxFifo0FullCallback+0x430>)
 8023d1c:	701a      	strb	r2, [r3, #0]
	DigitalCluster_RxSig_Recirculation = CanH_RxSig_Recirculation;
 8023d1e:	4b3c      	ldr	r3, [pc, #240]	@ (8023e10 <HAL_CAN_RxFifo0FullCallback+0x434>)
 8023d20:	781a      	ldrb	r2, [r3, #0]
 8023d22:	4b3c      	ldr	r3, [pc, #240]	@ (8023e14 <HAL_CAN_RxFifo0FullCallback+0x438>)
 8023d24:	701a      	strb	r2, [r3, #0]
	DigitalCluster_RxSig_AutoClimate = CanH_RxSig_AutoClimate;
 8023d26:	4b3c      	ldr	r3, [pc, #240]	@ (8023e18 <HAL_CAN_RxFifo0FullCallback+0x43c>)
 8023d28:	781a      	ldrb	r2, [r3, #0]
 8023d2a:	4b3c      	ldr	r3, [pc, #240]	@ (8023e1c <HAL_CAN_RxFifo0FullCallback+0x440>)
 8023d2c:	701a      	strb	r2, [r3, #0]
	DigitalCluster_RxSig_Rls = CanH_RxSig_RotaryLightSwitch;
 8023d2e:	4b3c      	ldr	r3, [pc, #240]	@ (8023e20 <HAL_CAN_RxFifo0FullCallback+0x444>)
 8023d30:	781a      	ldrb	r2, [r3, #0]
 8023d32:	4b3c      	ldr	r3, [pc, #240]	@ (8023e24 <HAL_CAN_RxFifo0FullCallback+0x448>)
 8023d34:	701a      	strb	r2, [r3, #0]
	switch(CanH_RxSig_FogLights)
 8023d36:	4b3c      	ldr	r3, [pc, #240]	@ (8023e28 <HAL_CAN_RxFifo0FullCallback+0x44c>)
 8023d38:	781b      	ldrb	r3, [r3, #0]
 8023d3a:	2b03      	cmp	r3, #3
 8023d3c:	d014      	beq.n	8023d68 <HAL_CAN_RxFifo0FullCallback+0x38c>
 8023d3e:	2b03      	cmp	r3, #3
 8023d40:	dc19      	bgt.n	8023d76 <HAL_CAN_RxFifo0FullCallback+0x39a>
 8023d42:	2b01      	cmp	r3, #1
 8023d44:	d002      	beq.n	8023d4c <HAL_CAN_RxFifo0FullCallback+0x370>
 8023d46:	2b02      	cmp	r3, #2
 8023d48:	d007      	beq.n	8023d5a <HAL_CAN_RxFifo0FullCallback+0x37e>
 8023d4a:	e014      	b.n	8023d76 <HAL_CAN_RxFifo0FullCallback+0x39a>
	{
	case 1:
		DigitalCluster_RxSig_FogLightFront = 1;
 8023d4c:	4b37      	ldr	r3, [pc, #220]	@ (8023e2c <HAL_CAN_RxFifo0FullCallback+0x450>)
 8023d4e:	2201      	movs	r2, #1
 8023d50:	701a      	strb	r2, [r3, #0]
		DigitalCluster_RxSig_FogLightRear = 0;
 8023d52:	4b37      	ldr	r3, [pc, #220]	@ (8023e30 <HAL_CAN_RxFifo0FullCallback+0x454>)
 8023d54:	2200      	movs	r2, #0
 8023d56:	701a      	strb	r2, [r3, #0]
		break;
 8023d58:	e014      	b.n	8023d84 <HAL_CAN_RxFifo0FullCallback+0x3a8>
	case 2:
		DigitalCluster_RxSig_FogLightFront = 0;
 8023d5a:	4b34      	ldr	r3, [pc, #208]	@ (8023e2c <HAL_CAN_RxFifo0FullCallback+0x450>)
 8023d5c:	2200      	movs	r2, #0
 8023d5e:	701a      	strb	r2, [r3, #0]
		DigitalCluster_RxSig_FogLightRear = 1;
 8023d60:	4b33      	ldr	r3, [pc, #204]	@ (8023e30 <HAL_CAN_RxFifo0FullCallback+0x454>)
 8023d62:	2201      	movs	r2, #1
 8023d64:	701a      	strb	r2, [r3, #0]
		break;
 8023d66:	e00d      	b.n	8023d84 <HAL_CAN_RxFifo0FullCallback+0x3a8>
	case 3:
		DigitalCluster_RxSig_FogLightFront = 1;
 8023d68:	4b30      	ldr	r3, [pc, #192]	@ (8023e2c <HAL_CAN_RxFifo0FullCallback+0x450>)
 8023d6a:	2201      	movs	r2, #1
 8023d6c:	701a      	strb	r2, [r3, #0]
		DigitalCluster_RxSig_FogLightRear = 1;
 8023d6e:	4b30      	ldr	r3, [pc, #192]	@ (8023e30 <HAL_CAN_RxFifo0FullCallback+0x454>)
 8023d70:	2201      	movs	r2, #1
 8023d72:	701a      	strb	r2, [r3, #0]
		break;
 8023d74:	e006      	b.n	8023d84 <HAL_CAN_RxFifo0FullCallback+0x3a8>
	default:
		DigitalCluster_RxSig_FogLightFront = 0;
 8023d76:	4b2d      	ldr	r3, [pc, #180]	@ (8023e2c <HAL_CAN_RxFifo0FullCallback+0x450>)
 8023d78:	2200      	movs	r2, #0
 8023d7a:	701a      	strb	r2, [r3, #0]
		DigitalCluster_RxSig_FogLightRear = 0;
 8023d7c:	4b2c      	ldr	r3, [pc, #176]	@ (8023e30 <HAL_CAN_RxFifo0FullCallback+0x454>)
 8023d7e:	2200      	movs	r2, #0
 8023d80:	701a      	strb	r2, [r3, #0]
		break;
 8023d82:	bf00      	nop
	}
}
 8023d84:	bf00      	nop
 8023d86:	3714      	adds	r7, #20
 8023d88:	46bd      	mov	sp, r7
 8023d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023d8e:	4770      	bx	lr
 8023d90:	10000840 	.word	0x10000840
 8023d94:	10000877 	.word	0x10000877
 8023d98:	10000000 	.word	0x10000000
 8023d9c:	10000884 	.word	0x10000884
 8023da0:	10000004 	.word	0x10000004
 8023da4:	10000876 	.word	0x10000876
 8023da8:	10000702 	.word	0x10000702
 8023dac:	10000879 	.word	0x10000879
 8023db0:	10000703 	.word	0x10000703
 8023db4:	1000087b 	.word	0x1000087b
 8023db8:	10000704 	.word	0x10000704
 8023dbc:	10000881 	.word	0x10000881
 8023dc0:	10000705 	.word	0x10000705
 8023dc4:	1000087c 	.word	0x1000087c
 8023dc8:	10000706 	.word	0x10000706
 8023dcc:	10000707 	.word	0x10000707
 8023dd0:	10000878 	.word	0x10000878
 8023dd4:	10000708 	.word	0x10000708
 8023dd8:	10000880 	.word	0x10000880
 8023ddc:	10000709 	.word	0x10000709
 8023de0:	1000087e 	.word	0x1000087e
 8023de4:	1000070a 	.word	0x1000070a
 8023de8:	10000883 	.word	0x10000883
 8023dec:	1000070b 	.word	0x1000070b
 8023df0:	10000882 	.word	0x10000882
 8023df4:	1000070d 	.word	0x1000070d
 8023df8:	1000087d 	.word	0x1000087d
 8023dfc:	1000070f 	.word	0x1000070f
 8023e00:	10000887 	.word	0x10000887
 8023e04:	10000736 	.word	0x10000736
 8023e08:	10000888 	.word	0x10000888
 8023e0c:	10000734 	.word	0x10000734
 8023e10:	10000886 	.word	0x10000886
 8023e14:	10000733 	.word	0x10000733
 8023e18:	10000889 	.word	0x10000889
 8023e1c:	10000735 	.word	0x10000735
 8023e20:	1000087f 	.word	0x1000087f
 8023e24:	10000732 	.word	0x10000732
 8023e28:	10000885 	.word	0x10000885
 8023e2c:	10000730 	.word	0x10000730
 8023e30:	10000731 	.word	0x10000731

08023e34 <I2cH_MainFunction>:
void I2cH_MainFunction(void);
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c);
extern void MX_I2C2_Init(void);

void I2cH_MainFunction(void)
{
 8023e34:	b580      	push	{r7, lr}
 8023e36:	b082      	sub	sp, #8
 8023e38:	af00      	add	r7, sp, #0
	I2cH_Status = HAL_I2C_GetState(&hi2c2);
 8023e3a:	4819      	ldr	r0, [pc, #100]	@ (8023ea0 <I2cH_MainFunction+0x6c>)
 8023e3c:	f00b f87c 	bl	802ef38 <HAL_I2C_GetState>
 8023e40:	4603      	mov	r3, r0
 8023e42:	461a      	mov	r2, r3
 8023e44:	4b17      	ldr	r3, [pc, #92]	@ (8023ea4 <I2cH_MainFunction+0x70>)
 8023e46:	601a      	str	r2, [r3, #0]
	RevCam_I2cStatus = HAL_I2C_GetError(&hi2c2);
 8023e48:	4815      	ldr	r0, [pc, #84]	@ (8023ea0 <I2cH_MainFunction+0x6c>)
 8023e4a:	f00b f883 	bl	802ef54 <HAL_I2C_GetError>
 8023e4e:	4603      	mov	r3, r0
 8023e50:	4a15      	ldr	r2, [pc, #84]	@ (8023ea8 <I2cH_MainFunction+0x74>)
 8023e52:	6013      	str	r3, [r2, #0]
	if(4 == RevCam_I2cStatus)
 8023e54:	4b14      	ldr	r3, [pc, #80]	@ (8023ea8 <I2cH_MainFunction+0x74>)
 8023e56:	681b      	ldr	r3, [r3, #0]
 8023e58:	2b04      	cmp	r3, #4
 8023e5a:	d10a      	bne.n	8023e72 <I2cH_MainFunction+0x3e>
	{
		/* Retry initialization. */
		MX_I2C2_Init();
 8023e5c:	f003 fd7a 	bl	8027954 <MX_I2C2_Init>
		RevCam_I2cStatus = 0;
 8023e60:	4b11      	ldr	r3, [pc, #68]	@ (8023ea8 <I2cH_MainFunction+0x74>)
 8023e62:	2200      	movs	r2, #0
 8023e64:	601a      	str	r2, [r3, #0]
		RevCam_I2cInitRetry++;
 8023e66:	4b11      	ldr	r3, [pc, #68]	@ (8023eac <I2cH_MainFunction+0x78>)
 8023e68:	681b      	ldr	r3, [r3, #0]
 8023e6a:	3301      	adds	r3, #1
 8023e6c:	4a0f      	ldr	r2, [pc, #60]	@ (8023eac <I2cH_MainFunction+0x78>)
 8023e6e:	6013      	str	r3, [r2, #0]
 8023e70:	e00d      	b.n	8023e8e <I2cH_MainFunction+0x5a>
	}/* Error reset. */
	else for(uint8 i = 0; i < 8; i++) I2cH_ErrArr[i] = 0;
 8023e72:	2300      	movs	r3, #0
 8023e74:	71fb      	strb	r3, [r7, #7]
 8023e76:	e007      	b.n	8023e88 <I2cH_MainFunction+0x54>
 8023e78:	79fb      	ldrb	r3, [r7, #7]
 8023e7a:	4a0d      	ldr	r2, [pc, #52]	@ (8023eb0 <I2cH_MainFunction+0x7c>)
 8023e7c:	2100      	movs	r1, #0
 8023e7e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8023e82:	79fb      	ldrb	r3, [r7, #7]
 8023e84:	3301      	adds	r3, #1
 8023e86:	71fb      	strb	r3, [r7, #7]
 8023e88:	79fb      	ldrb	r3, [r7, #7]
 8023e8a:	2b07      	cmp	r3, #7
 8023e8c:	d9f4      	bls.n	8023e78 <I2cH_MainFunction+0x44>
	I2cH_MainCounter++;
 8023e8e:	4b09      	ldr	r3, [pc, #36]	@ (8023eb4 <I2cH_MainFunction+0x80>)
 8023e90:	681b      	ldr	r3, [r3, #0]
 8023e92:	3301      	adds	r3, #1
 8023e94:	4a07      	ldr	r2, [pc, #28]	@ (8023eb4 <I2cH_MainFunction+0x80>)
 8023e96:	6013      	str	r3, [r2, #0]
}
 8023e98:	bf00      	nop
 8023e9a:	3708      	adds	r7, #8
 8023e9c:	46bd      	mov	sp, r7
 8023e9e:	bd80      	pop	{r7, pc}
 8023ea0:	2000053c 	.word	0x2000053c
 8023ea4:	100008e8 	.word	0x100008e8
 8023ea8:	100007ac 	.word	0x100007ac
 8023eac:	100007b4 	.word	0x100007b4
 8023eb0:	100008ec 	.word	0x100008ec
 8023eb4:	100008e4 	.word	0x100008e4

08023eb8 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8023eb8:	b480      	push	{r7}
 8023eba:	b083      	sub	sp, #12
 8023ebc:	af00      	add	r7, sp, #0
 8023ebe:	6078      	str	r0, [r7, #4]
	/* Error detection. */
	switch(hi2c->ErrorCode)
 8023ec0:	687b      	ldr	r3, [r7, #4]
 8023ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8023ec4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8023ec8:	f000 8087 	beq.w	8023fda <HAL_I2C_ErrorCallback+0x122>
 8023ecc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8023ed0:	f200 8089 	bhi.w	8023fe6 <HAL_I2C_ErrorCallback+0x12e>
 8023ed4:	2b80      	cmp	r3, #128	@ 0x80
 8023ed6:	d07a      	beq.n	8023fce <HAL_I2C_ErrorCallback+0x116>
 8023ed8:	2b80      	cmp	r3, #128	@ 0x80
 8023eda:	f200 8084 	bhi.w	8023fe6 <HAL_I2C_ErrorCallback+0x12e>
 8023ede:	2b20      	cmp	r3, #32
 8023ee0:	d848      	bhi.n	8023f74 <HAL_I2C_ErrorCallback+0xbc>
 8023ee2:	2b00      	cmp	r3, #0
 8023ee4:	d07f      	beq.n	8023fe6 <HAL_I2C_ErrorCallback+0x12e>
 8023ee6:	3b01      	subs	r3, #1
 8023ee8:	2b1f      	cmp	r3, #31
 8023eea:	d87c      	bhi.n	8023fe6 <HAL_I2C_ErrorCallback+0x12e>
 8023eec:	a201      	add	r2, pc, #4	@ (adr r2, 8023ef4 <HAL_I2C_ErrorCallback+0x3c>)
 8023eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023ef2:	bf00      	nop
 8023ef4:	08023f7b 	.word	0x08023f7b
 8023ef8:	08023f87 	.word	0x08023f87
 8023efc:	08023fe7 	.word	0x08023fe7
 8023f00:	08023f93 	.word	0x08023f93
 8023f04:	08023fe7 	.word	0x08023fe7
 8023f08:	08023fe7 	.word	0x08023fe7
 8023f0c:	08023fe7 	.word	0x08023fe7
 8023f10:	08023f9f 	.word	0x08023f9f
 8023f14:	08023fe7 	.word	0x08023fe7
 8023f18:	08023fe7 	.word	0x08023fe7
 8023f1c:	08023fe7 	.word	0x08023fe7
 8023f20:	08023fe7 	.word	0x08023fe7
 8023f24:	08023fe7 	.word	0x08023fe7
 8023f28:	08023fe7 	.word	0x08023fe7
 8023f2c:	08023fe7 	.word	0x08023fe7
 8023f30:	08023fab 	.word	0x08023fab
 8023f34:	08023fe7 	.word	0x08023fe7
 8023f38:	08023fe7 	.word	0x08023fe7
 8023f3c:	08023fe7 	.word	0x08023fe7
 8023f40:	08023fe7 	.word	0x08023fe7
 8023f44:	08023fe7 	.word	0x08023fe7
 8023f48:	08023fe7 	.word	0x08023fe7
 8023f4c:	08023fe7 	.word	0x08023fe7
 8023f50:	08023fe7 	.word	0x08023fe7
 8023f54:	08023fe7 	.word	0x08023fe7
 8023f58:	08023fe7 	.word	0x08023fe7
 8023f5c:	08023fe7 	.word	0x08023fe7
 8023f60:	08023fe7 	.word	0x08023fe7
 8023f64:	08023fe7 	.word	0x08023fe7
 8023f68:	08023fe7 	.word	0x08023fe7
 8023f6c:	08023fe7 	.word	0x08023fe7
 8023f70:	08023fb7 	.word	0x08023fb7
 8023f74:	2b40      	cmp	r3, #64	@ 0x40
 8023f76:	d024      	beq.n	8023fc2 <HAL_I2C_ErrorCallback+0x10a>
		break;
	case HAL_I2C_WRONG_START:
		I2cH_ErrArr[8]++;
		break;
	default:
		break;
 8023f78:	e035      	b.n	8023fe6 <HAL_I2C_ErrorCallback+0x12e>
		I2cH_ErrArr[0]++;
 8023f7a:	4b1e      	ldr	r3, [pc, #120]	@ (8023ff4 <HAL_I2C_ErrorCallback+0x13c>)
 8023f7c:	681b      	ldr	r3, [r3, #0]
 8023f7e:	3301      	adds	r3, #1
 8023f80:	4a1c      	ldr	r2, [pc, #112]	@ (8023ff4 <HAL_I2C_ErrorCallback+0x13c>)
 8023f82:	6013      	str	r3, [r2, #0]
		break;
 8023f84:	e030      	b.n	8023fe8 <HAL_I2C_ErrorCallback+0x130>
		I2cH_ErrArr[1]++;
 8023f86:	4b1b      	ldr	r3, [pc, #108]	@ (8023ff4 <HAL_I2C_ErrorCallback+0x13c>)
 8023f88:	685b      	ldr	r3, [r3, #4]
 8023f8a:	3301      	adds	r3, #1
 8023f8c:	4a19      	ldr	r2, [pc, #100]	@ (8023ff4 <HAL_I2C_ErrorCallback+0x13c>)
 8023f8e:	6053      	str	r3, [r2, #4]
		break;
 8023f90:	e02a      	b.n	8023fe8 <HAL_I2C_ErrorCallback+0x130>
		I2cH_ErrArr[2]++;
 8023f92:	4b18      	ldr	r3, [pc, #96]	@ (8023ff4 <HAL_I2C_ErrorCallback+0x13c>)
 8023f94:	689b      	ldr	r3, [r3, #8]
 8023f96:	3301      	adds	r3, #1
 8023f98:	4a16      	ldr	r2, [pc, #88]	@ (8023ff4 <HAL_I2C_ErrorCallback+0x13c>)
 8023f9a:	6093      	str	r3, [r2, #8]
		break;
 8023f9c:	e024      	b.n	8023fe8 <HAL_I2C_ErrorCallback+0x130>
		I2cH_ErrArr[3]++;
 8023f9e:	4b15      	ldr	r3, [pc, #84]	@ (8023ff4 <HAL_I2C_ErrorCallback+0x13c>)
 8023fa0:	68db      	ldr	r3, [r3, #12]
 8023fa2:	3301      	adds	r3, #1
 8023fa4:	4a13      	ldr	r2, [pc, #76]	@ (8023ff4 <HAL_I2C_ErrorCallback+0x13c>)
 8023fa6:	60d3      	str	r3, [r2, #12]
		break;
 8023fa8:	e01e      	b.n	8023fe8 <HAL_I2C_ErrorCallback+0x130>
		I2cH_ErrArr[4]++;
 8023faa:	4b12      	ldr	r3, [pc, #72]	@ (8023ff4 <HAL_I2C_ErrorCallback+0x13c>)
 8023fac:	691b      	ldr	r3, [r3, #16]
 8023fae:	3301      	adds	r3, #1
 8023fb0:	4a10      	ldr	r2, [pc, #64]	@ (8023ff4 <HAL_I2C_ErrorCallback+0x13c>)
 8023fb2:	6113      	str	r3, [r2, #16]
		break;
 8023fb4:	e018      	b.n	8023fe8 <HAL_I2C_ErrorCallback+0x130>
		I2cH_ErrArr[5]++;
 8023fb6:	4b0f      	ldr	r3, [pc, #60]	@ (8023ff4 <HAL_I2C_ErrorCallback+0x13c>)
 8023fb8:	695b      	ldr	r3, [r3, #20]
 8023fba:	3301      	adds	r3, #1
 8023fbc:	4a0d      	ldr	r2, [pc, #52]	@ (8023ff4 <HAL_I2C_ErrorCallback+0x13c>)
 8023fbe:	6153      	str	r3, [r2, #20]
		break;
 8023fc0:	e012      	b.n	8023fe8 <HAL_I2C_ErrorCallback+0x130>
		I2cH_ErrArr[6]++;
 8023fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8023ff4 <HAL_I2C_ErrorCallback+0x13c>)
 8023fc4:	699b      	ldr	r3, [r3, #24]
 8023fc6:	3301      	adds	r3, #1
 8023fc8:	4a0a      	ldr	r2, [pc, #40]	@ (8023ff4 <HAL_I2C_ErrorCallback+0x13c>)
 8023fca:	6193      	str	r3, [r2, #24]
		break;
 8023fcc:	e00c      	b.n	8023fe8 <HAL_I2C_ErrorCallback+0x130>
		I2cH_ErrArr[7]++;
 8023fce:	4b09      	ldr	r3, [pc, #36]	@ (8023ff4 <HAL_I2C_ErrorCallback+0x13c>)
 8023fd0:	69db      	ldr	r3, [r3, #28]
 8023fd2:	3301      	adds	r3, #1
 8023fd4:	4a07      	ldr	r2, [pc, #28]	@ (8023ff4 <HAL_I2C_ErrorCallback+0x13c>)
 8023fd6:	61d3      	str	r3, [r2, #28]
		break;
 8023fd8:	e006      	b.n	8023fe8 <HAL_I2C_ErrorCallback+0x130>
		I2cH_ErrArr[8]++;
 8023fda:	4b06      	ldr	r3, [pc, #24]	@ (8023ff4 <HAL_I2C_ErrorCallback+0x13c>)
 8023fdc:	6a1b      	ldr	r3, [r3, #32]
 8023fde:	3301      	adds	r3, #1
 8023fe0:	4a04      	ldr	r2, [pc, #16]	@ (8023ff4 <HAL_I2C_ErrorCallback+0x13c>)
 8023fe2:	6213      	str	r3, [r2, #32]
		break;
 8023fe4:	e000      	b.n	8023fe8 <HAL_I2C_ErrorCallback+0x130>
		break;
 8023fe6:	bf00      	nop
	}
}
 8023fe8:	bf00      	nop
 8023fea:	370c      	adds	r7, #12
 8023fec:	46bd      	mov	sp, r7
 8023fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023ff2:	4770      	bx	lr
 8023ff4:	100008ec 	.word	0x100008ec

08023ff8 <Dcm_MainFunction>:
{
		{0x00, 0x04, 0x00, DiagRoutine_RDBPI_ReadCameraStatus},
		{0x00, 0x04, 0x00, DiagRoutine_RDBPI_ReadDisplayStatus},
};
void Dcm_MainFunction(void)
{
 8023ff8:	b580      	push	{r7, lr}
 8023ffa:	b082      	sub	sp, #8
 8023ffc:	af00      	add	r7, sp, #0
	Dcm_AliveCounter++;
 8023ffe:	4b83      	ldr	r3, [pc, #524]	@ (802420c <Dcm_MainFunction+0x214>)
 8024000:	681b      	ldr	r3, [r3, #0]
 8024002:	3301      	adds	r3, #1
 8024004:	4a81      	ldr	r2, [pc, #516]	@ (802420c <Dcm_MainFunction+0x214>)
 8024006:	6013      	str	r3, [r2, #0]
	if(Dcm_MainCounter == 0) Dcm_DiagnosticSession = DEFAULT;
 8024008:	4b81      	ldr	r3, [pc, #516]	@ (8024210 <Dcm_MainFunction+0x218>)
 802400a:	681b      	ldr	r3, [r3, #0]
 802400c:	2b00      	cmp	r3, #0
 802400e:	d102      	bne.n	8024016 <Dcm_MainFunction+0x1e>
 8024010:	4b80      	ldr	r3, [pc, #512]	@ (8024214 <Dcm_MainFunction+0x21c>)
 8024012:	2200      	movs	r2, #0
 8024014:	701a      	strb	r2, [r3, #0]
	else
	{
		/* Do nothing. */
	}
	if(0x3E == CanH_DiagArray[1]) DiagRoutine_TP_TesterPresent();
 8024016:	4b80      	ldr	r3, [pc, #512]	@ (8024218 <Dcm_MainFunction+0x220>)
 8024018:	785b      	ldrb	r3, [r3, #1]
 802401a:	2b3e      	cmp	r3, #62	@ 0x3e
 802401c:	d101      	bne.n	8024022 <Dcm_MainFunction+0x2a>
 802401e:	f000 fb81 	bl	8024724 <DiagRoutine_TP_TesterPresent>
	else
	{
		/* Do nothing. */
	}
	if(0x28 == CanH_DiagArray[1]) DiagRoutine_CC_CommunicationControl();
 8024022:	4b7d      	ldr	r3, [pc, #500]	@ (8024218 <Dcm_MainFunction+0x220>)
 8024024:	785b      	ldrb	r3, [r3, #1]
 8024026:	2b28      	cmp	r3, #40	@ 0x28
 8024028:	d101      	bne.n	802402e <Dcm_MainFunction+0x36>
 802402a:	f000 fdcd 	bl	8024bc8 <DiagRoutine_CC_CommunicationControl>
	else
	{
		/* Do nothing. */
	}
	if(0x85 == CanH_DiagArray[1]) DiagRoutine_CDTCS_ControlDTCSetting();
 802402e:	4b7a      	ldr	r3, [pc, #488]	@ (8024218 <Dcm_MainFunction+0x220>)
 8024030:	785b      	ldrb	r3, [r3, #1]
 8024032:	2b85      	cmp	r3, #133	@ 0x85
 8024034:	d101      	bne.n	802403a <Dcm_MainFunction+0x42>
 8024036:	f000 fe05 	bl	8024c44 <DiagRoutine_CDTCS_ControlDTCSetting>
	else
	{
		/* Do nothing. */
	}
	if(CanH_DiagArray[1] == 0x10)
 802403a:	4b77      	ldr	r3, [pc, #476]	@ (8024218 <Dcm_MainFunction+0x220>)
 802403c:	785b      	ldrb	r3, [r3, #1]
 802403e:	2b10      	cmp	r3, #16
 8024040:	d115      	bne.n	802406e <Dcm_MainFunction+0x76>
	{
		/* DEFAULT */
		if(CanH_DiagArray[2] == 0x01) DiagRoutine_DSC_DefaultSession();
 8024042:	4b75      	ldr	r3, [pc, #468]	@ (8024218 <Dcm_MainFunction+0x220>)
 8024044:	789b      	ldrb	r3, [r3, #2]
 8024046:	2b01      	cmp	r3, #1
 8024048:	d101      	bne.n	802404e <Dcm_MainFunction+0x56>
 802404a:	f000 fa0f 	bl	802446c <DiagRoutine_DSC_DefaultSession>
		else
		{
			/* Do nothing. */
		}
		/* EXTENDED */
		if(CanH_DiagArray[2] == 0x03) DiagRoutine_DSC_ExtendedSession();
 802404e:	4b72      	ldr	r3, [pc, #456]	@ (8024218 <Dcm_MainFunction+0x220>)
 8024050:	789b      	ldrb	r3, [r3, #2]
 8024052:	2b03      	cmp	r3, #3
 8024054:	d101      	bne.n	802405a <Dcm_MainFunction+0x62>
 8024056:	f000 fa4d 	bl	80244f4 <DiagRoutine_DSC_ExtendedSession>
		else
		{
			/* Do nothing. */
		}
		/* PROGRAMMING */
		if(CanH_DiagArray[2] == 0x02 && Dcm_DiagnosticSession == EXTENDED) DiagRoutine_DSC_ProgrammingSession();
 802405a:	4b6f      	ldr	r3, [pc, #444]	@ (8024218 <Dcm_MainFunction+0x220>)
 802405c:	789b      	ldrb	r3, [r3, #2]
 802405e:	2b02      	cmp	r3, #2
 8024060:	d105      	bne.n	802406e <Dcm_MainFunction+0x76>
 8024062:	4b6c      	ldr	r3, [pc, #432]	@ (8024214 <Dcm_MainFunction+0x21c>)
 8024064:	781b      	ldrb	r3, [r3, #0]
 8024066:	2b01      	cmp	r3, #1
 8024068:	d101      	bne.n	802406e <Dcm_MainFunction+0x76>
 802406a:	f000 fa87 	bl	802457c <DiagRoutine_DSC_ProgrammingSession>
	}
	else
	{
		/* Do nothing. */
	}
	if(CanH_DiagArray[3] == 0x86 && CanH_DiagArray[2] == 0xF1 && CanH_DiagArray[1] == 0x22) DiagRoutine_RDBI_ReadActiveDiagnosticSession();
 802406e:	4b6a      	ldr	r3, [pc, #424]	@ (8024218 <Dcm_MainFunction+0x220>)
 8024070:	78db      	ldrb	r3, [r3, #3]
 8024072:	2b86      	cmp	r3, #134	@ 0x86
 8024074:	d109      	bne.n	802408a <Dcm_MainFunction+0x92>
 8024076:	4b68      	ldr	r3, [pc, #416]	@ (8024218 <Dcm_MainFunction+0x220>)
 8024078:	789b      	ldrb	r3, [r3, #2]
 802407a:	2bf1      	cmp	r3, #241	@ 0xf1
 802407c:	d105      	bne.n	802408a <Dcm_MainFunction+0x92>
 802407e:	4b66      	ldr	r3, [pc, #408]	@ (8024218 <Dcm_MainFunction+0x220>)
 8024080:	785b      	ldrb	r3, [r3, #1]
 8024082:	2b22      	cmp	r3, #34	@ 0x22
 8024084:	d101      	bne.n	802408a <Dcm_MainFunction+0x92>
 8024086:	f000 fd0d 	bl	8024aa4 <DiagRoutine_RDBI_ReadActiveDiagnosticSession>
	else
	{
		/* Do nothing. */
	}
	/* Execute hard reset. */
	if(CanH_DiagArray[1] == 0x11 && CanH_DiagArray[2] == 0x01) DiagRoutine_ER_HardReset();
 802408a:	4b63      	ldr	r3, [pc, #396]	@ (8024218 <Dcm_MainFunction+0x220>)
 802408c:	785b      	ldrb	r3, [r3, #1]
 802408e:	2b11      	cmp	r3, #17
 8024090:	d105      	bne.n	802409e <Dcm_MainFunction+0xa6>
 8024092:	4b61      	ldr	r3, [pc, #388]	@ (8024218 <Dcm_MainFunction+0x220>)
 8024094:	789b      	ldrb	r3, [r3, #2]
 8024096:	2b01      	cmp	r3, #1
 8024098:	d101      	bne.n	802409e <Dcm_MainFunction+0xa6>
 802409a:	f000 fabf 	bl	802461c <DiagRoutine_ER_HardReset>
	else
	{
		/* Do nothing. */
	}
	/* Execute soft reset. */
	if(CanH_DiagArray[1] == 0x11 && CanH_DiagArray[2] == 0x03) DiagRoutine_ER_SoftReset();
 802409e:	4b5e      	ldr	r3, [pc, #376]	@ (8024218 <Dcm_MainFunction+0x220>)
 80240a0:	785b      	ldrb	r3, [r3, #1]
 80240a2:	2b11      	cmp	r3, #17
 80240a4:	d105      	bne.n	80240b2 <Dcm_MainFunction+0xba>
 80240a6:	4b5c      	ldr	r3, [pc, #368]	@ (8024218 <Dcm_MainFunction+0x220>)
 80240a8:	789b      	ldrb	r3, [r3, #2]
 80240aa:	2b03      	cmp	r3, #3
 80240ac:	d101      	bne.n	80240b2 <Dcm_MainFunction+0xba>
 80240ae:	f000 faf7 	bl	80246a0 <DiagRoutine_ER_SoftReset>
	else
	{
		/* Do nothing. */
	}
	/* Execute clear DTC. */
	if(CanH_DiagArray[1] == 0x14) DiagRoutine_CDTCI_ClearDiagnosticInformation();
 80240b2:	4b59      	ldr	r3, [pc, #356]	@ (8024218 <Dcm_MainFunction+0x220>)
 80240b4:	785b      	ldrb	r3, [r3, #1]
 80240b6:	2b14      	cmp	r3, #20
 80240b8:	d101      	bne.n	80240be <Dcm_MainFunction+0xc6>
 80240ba:	f000 fb85 	bl	80247c8 <DiagRoutine_CDTCI_ClearDiagnosticInformation>
	else
	{
		/* Do nothing. */
	}
	/* Execute read DTC. */
	if(CanH_DiagArray[1] == 0x19) DiagRoutine_RDTCI_ReadDTCInformationSupportedDtc();
 80240be:	4b56      	ldr	r3, [pc, #344]	@ (8024218 <Dcm_MainFunction+0x220>)
 80240c0:	785b      	ldrb	r3, [r3, #1]
 80240c2:	2b19      	cmp	r3, #25
 80240c4:	d101      	bne.n	80240ca <Dcm_MainFunction+0xd2>
 80240c6:	f000 fc6d 	bl	80249a4 <DiagRoutine_RDTCI_ReadDTCInformationSupportedDtc>
	else
	{
		/* Do nothing. */
	}
	/* Extended session routines. */
	if(Dcm_DiagnosticSession == EXTENDED)
 80240ca:	4b52      	ldr	r3, [pc, #328]	@ (8024214 <Dcm_MainFunction+0x21c>)
 80240cc:	781b      	ldrb	r3, [r3, #0]
 80240ce:	2b01      	cmp	r3, #1
 80240d0:	f040 80f8 	bne.w	80242c4 <Dcm_MainFunction+0x2cc>
	{
		if(CanH_DiagArray[1] == 0x31)
 80240d4:	4b50      	ldr	r3, [pc, #320]	@ (8024218 <Dcm_MainFunction+0x220>)
 80240d6:	785b      	ldrb	r3, [r3, #1]
 80240d8:	2b31      	cmp	r3, #49	@ 0x31
 80240da:	d117      	bne.n	802410c <Dcm_MainFunction+0x114>
		{
			if(CanH_DiagArray[2] == 0x01)
 80240dc:	4b4e      	ldr	r3, [pc, #312]	@ (8024218 <Dcm_MainFunction+0x220>)
 80240de:	789b      	ldrb	r3, [r3, #2]
 80240e0:	2b01      	cmp	r3, #1
 80240e2:	d113      	bne.n	802410c <Dcm_MainFunction+0x114>
			{
				if(CanH_DiagArray[3] == 0x3E && CanH_DiagArray[4] == 0x3E) DiagRoutine_RC_DisplaySelfTest();
 80240e4:	4b4c      	ldr	r3, [pc, #304]	@ (8024218 <Dcm_MainFunction+0x220>)
 80240e6:	78db      	ldrb	r3, [r3, #3]
 80240e8:	2b3e      	cmp	r3, #62	@ 0x3e
 80240ea:	d105      	bne.n	80240f8 <Dcm_MainFunction+0x100>
 80240ec:	4b4a      	ldr	r3, [pc, #296]	@ (8024218 <Dcm_MainFunction+0x220>)
 80240ee:	791b      	ldrb	r3, [r3, #4]
 80240f0:	2b3e      	cmp	r3, #62	@ 0x3e
 80240f2:	d101      	bne.n	80240f8 <Dcm_MainFunction+0x100>
 80240f4:	f000 fde4 	bl	8024cc0 <DiagRoutine_RC_DisplaySelfTest>
				else
				{
					/* Do nothing. */
				}
				if(CanH_DiagArray[3] == 0x3F && CanH_DiagArray[4] == 0x3F) DiagRoutine_RC_CameraDisplay();
 80240f8:	4b47      	ldr	r3, [pc, #284]	@ (8024218 <Dcm_MainFunction+0x220>)
 80240fa:	78db      	ldrb	r3, [r3, #3]
 80240fc:	2b3f      	cmp	r3, #63	@ 0x3f
 80240fe:	d105      	bne.n	802410c <Dcm_MainFunction+0x114>
 8024100:	4b45      	ldr	r3, [pc, #276]	@ (8024218 <Dcm_MainFunction+0x220>)
 8024102:	791b      	ldrb	r3, [r3, #4]
 8024104:	2b3f      	cmp	r3, #63	@ 0x3f
 8024106:	d101      	bne.n	802410c <Dcm_MainFunction+0x114>
 8024108:	f000 fe10 	bl	8024d2c <DiagRoutine_RC_CameraDisplay>
					/* Do nothing. */
				}
			}
		}

		for(uint8 i = 0; i < 2; i++)
 802410c:	2300      	movs	r3, #0
 802410e:	71fb      	strb	r3, [r7, #7]
 8024110:	e03d      	b.n	802418e <Dcm_MainFunction+0x196>
		{
			if(Dcm_RDBPI_Table[i].IsFunctionActive == 0x01)
 8024112:	79fa      	ldrb	r2, [r7, #7]
 8024114:	4941      	ldr	r1, [pc, #260]	@ (802421c <Dcm_MainFunction+0x224>)
 8024116:	4613      	mov	r3, r2
 8024118:	005b      	lsls	r3, r3, #1
 802411a:	4413      	add	r3, r2
 802411c:	009b      	lsls	r3, r3, #2
 802411e:	440b      	add	r3, r1
 8024120:	781b      	ldrb	r3, [r3, #0]
 8024122:	2b01      	cmp	r3, #1
 8024124:	d130      	bne.n	8024188 <Dcm_MainFunction+0x190>
			{
				if((Dcm_MainCounter - Dcm_RDBPI_Table[i].Timestamp) > ((250) / Dcm_RDBPI_Table[i].TransmissionMode))
 8024126:	4b3a      	ldr	r3, [pc, #232]	@ (8024210 <Dcm_MainFunction+0x218>)
 8024128:	6819      	ldr	r1, [r3, #0]
 802412a:	79fa      	ldrb	r2, [r7, #7]
 802412c:	483b      	ldr	r0, [pc, #236]	@ (802421c <Dcm_MainFunction+0x224>)
 802412e:	4613      	mov	r3, r2
 8024130:	005b      	lsls	r3, r3, #1
 8024132:	4413      	add	r3, r2
 8024134:	009b      	lsls	r3, r3, #2
 8024136:	4403      	add	r3, r0
 8024138:	3304      	adds	r3, #4
 802413a:	681b      	ldr	r3, [r3, #0]
 802413c:	1ac9      	subs	r1, r1, r3
 802413e:	79fa      	ldrb	r2, [r7, #7]
 8024140:	4836      	ldr	r0, [pc, #216]	@ (802421c <Dcm_MainFunction+0x224>)
 8024142:	4613      	mov	r3, r2
 8024144:	005b      	lsls	r3, r3, #1
 8024146:	4413      	add	r3, r2
 8024148:	009b      	lsls	r3, r3, #2
 802414a:	4403      	add	r3, r0
 802414c:	3301      	adds	r3, #1
 802414e:	781b      	ldrb	r3, [r3, #0]
 8024150:	461a      	mov	r2, r3
 8024152:	23fa      	movs	r3, #250	@ 0xfa
 8024154:	fb93 f3f2 	sdiv	r3, r3, r2
 8024158:	4299      	cmp	r1, r3
 802415a:	d915      	bls.n	8024188 <Dcm_MainFunction+0x190>
				{
					Dcm_RDBPI_Table[i].FuncPtr();
 802415c:	79fa      	ldrb	r2, [r7, #7]
 802415e:	492f      	ldr	r1, [pc, #188]	@ (802421c <Dcm_MainFunction+0x224>)
 8024160:	4613      	mov	r3, r2
 8024162:	005b      	lsls	r3, r3, #1
 8024164:	4413      	add	r3, r2
 8024166:	009b      	lsls	r3, r3, #2
 8024168:	440b      	add	r3, r1
 802416a:	3308      	adds	r3, #8
 802416c:	681b      	ldr	r3, [r3, #0]
 802416e:	4798      	blx	r3
					Dcm_RDBPI_Table[i].Timestamp = Dcm_MainCounter;
 8024170:	79fa      	ldrb	r2, [r7, #7]
 8024172:	4b27      	ldr	r3, [pc, #156]	@ (8024210 <Dcm_MainFunction+0x218>)
 8024174:	6819      	ldr	r1, [r3, #0]
 8024176:	4829      	ldr	r0, [pc, #164]	@ (802421c <Dcm_MainFunction+0x224>)
 8024178:	4613      	mov	r3, r2
 802417a:	005b      	lsls	r3, r3, #1
 802417c:	4413      	add	r3, r2
 802417e:	009b      	lsls	r3, r3, #2
 8024180:	4403      	add	r3, r0
 8024182:	3304      	adds	r3, #4
 8024184:	6019      	str	r1, [r3, #0]
					break;
 8024186:	e005      	b.n	8024194 <Dcm_MainFunction+0x19c>
		for(uint8 i = 0; i < 2; i++)
 8024188:	79fb      	ldrb	r3, [r7, #7]
 802418a:	3301      	adds	r3, #1
 802418c:	71fb      	strb	r3, [r7, #7]
 802418e:	79fb      	ldrb	r3, [r7, #7]
 8024190:	2b01      	cmp	r3, #1
 8024192:	d9be      	bls.n	8024112 <Dcm_MainFunction+0x11a>
			{
				/* Do nothing. */
			}
		}
		/* Read data routines. */
		if(CanH_DiagArray[1] == 0x2A)
 8024194:	4b20      	ldr	r3, [pc, #128]	@ (8024218 <Dcm_MainFunction+0x220>)
 8024196:	785b      	ldrb	r3, [r3, #1]
 8024198:	2b2a      	cmp	r3, #42	@ 0x2a
 802419a:	d17b      	bne.n	8024294 <Dcm_MainFunction+0x29c>
		{
			if(CanH_DiagArray[2] == 0x04)
 802419c:	4b1e      	ldr	r3, [pc, #120]	@ (8024218 <Dcm_MainFunction+0x220>)
 802419e:	789b      	ldrb	r3, [r3, #2]
 80241a0:	2b04      	cmp	r3, #4
 80241a2:	d13d      	bne.n	8024220 <Dcm_MainFunction+0x228>
			{
				Dcm_RDBPI_Table[CanH_DiagArray[3] - 12].IsFunctionActive = 0;
 80241a4:	4b1c      	ldr	r3, [pc, #112]	@ (8024218 <Dcm_MainFunction+0x220>)
 80241a6:	78db      	ldrb	r3, [r3, #3]
 80241a8:	f1a3 020c 	sub.w	r2, r3, #12
 80241ac:	491b      	ldr	r1, [pc, #108]	@ (802421c <Dcm_MainFunction+0x224>)
 80241ae:	4613      	mov	r3, r2
 80241b0:	005b      	lsls	r3, r3, #1
 80241b2:	4413      	add	r3, r2
 80241b4:	009b      	lsls	r3, r3, #2
 80241b6:	440b      	add	r3, r1
 80241b8:	2200      	movs	r2, #0
 80241ba:	701a      	strb	r2, [r3, #0]
				Dcm_RDBPI_Table[CanH_DiagArray[3] - 12].Timestamp = 0;
 80241bc:	4b16      	ldr	r3, [pc, #88]	@ (8024218 <Dcm_MainFunction+0x220>)
 80241be:	78db      	ldrb	r3, [r3, #3]
 80241c0:	f1a3 020c 	sub.w	r2, r3, #12
 80241c4:	4915      	ldr	r1, [pc, #84]	@ (802421c <Dcm_MainFunction+0x224>)
 80241c6:	4613      	mov	r3, r2
 80241c8:	005b      	lsls	r3, r3, #1
 80241ca:	4413      	add	r3, r2
 80241cc:	009b      	lsls	r3, r3, #2
 80241ce:	440b      	add	r3, r1
 80241d0:	3304      	adds	r3, #4
 80241d2:	2200      	movs	r2, #0
 80241d4:	601a      	str	r2, [r3, #0]
				Dcm_RDBPI_Table[CanH_DiagArray[3] - 12].TransmissionMode = 0x04;
 80241d6:	4b10      	ldr	r3, [pc, #64]	@ (8024218 <Dcm_MainFunction+0x220>)
 80241d8:	78db      	ldrb	r3, [r3, #3]
 80241da:	f1a3 020c 	sub.w	r2, r3, #12
 80241de:	490f      	ldr	r1, [pc, #60]	@ (802421c <Dcm_MainFunction+0x224>)
 80241e0:	4613      	mov	r3, r2
 80241e2:	005b      	lsls	r3, r3, #1
 80241e4:	4413      	add	r3, r2
 80241e6:	009b      	lsls	r3, r3, #2
 80241e8:	440b      	add	r3, r1
 80241ea:	3301      	adds	r3, #1
 80241ec:	2204      	movs	r2, #4
 80241ee:	701a      	strb	r2, [r3, #0]
				Dcm_RDBPI_Table[CanH_DiagArray[3] - 12].FuncPtr();
 80241f0:	4b09      	ldr	r3, [pc, #36]	@ (8024218 <Dcm_MainFunction+0x220>)
 80241f2:	78db      	ldrb	r3, [r3, #3]
 80241f4:	f1a3 020c 	sub.w	r2, r3, #12
 80241f8:	4908      	ldr	r1, [pc, #32]	@ (802421c <Dcm_MainFunction+0x224>)
 80241fa:	4613      	mov	r3, r2
 80241fc:	005b      	lsls	r3, r3, #1
 80241fe:	4413      	add	r3, r2
 8024200:	009b      	lsls	r3, r3, #2
 8024202:	440b      	add	r3, r1
 8024204:	3308      	adds	r3, #8
 8024206:	681b      	ldr	r3, [r3, #0]
 8024208:	4798      	blx	r3
 802420a:	e043      	b.n	8024294 <Dcm_MainFunction+0x29c>
 802420c:	1000fc04 	.word	0x1000fc04
 8024210:	10000910 	.word	0x10000910
 8024214:	1000fc00 	.word	0x1000fc00
 8024218:	10000894 	.word	0x10000894
 802421c:	20000004 	.word	0x20000004
			}
			else if(CanH_DiagArray[2] != 0x04)
 8024220:	4b47      	ldr	r3, [pc, #284]	@ (8024340 <Dcm_MainFunction+0x348>)
 8024222:	789b      	ldrb	r3, [r3, #2]
 8024224:	2b04      	cmp	r3, #4
 8024226:	d035      	beq.n	8024294 <Dcm_MainFunction+0x29c>
			{
				Dcm_RDBPI_Table[CanH_DiagArray[3] - 12].IsFunctionActive = 1;
 8024228:	4b45      	ldr	r3, [pc, #276]	@ (8024340 <Dcm_MainFunction+0x348>)
 802422a:	78db      	ldrb	r3, [r3, #3]
 802422c:	f1a3 020c 	sub.w	r2, r3, #12
 8024230:	4944      	ldr	r1, [pc, #272]	@ (8024344 <Dcm_MainFunction+0x34c>)
 8024232:	4613      	mov	r3, r2
 8024234:	005b      	lsls	r3, r3, #1
 8024236:	4413      	add	r3, r2
 8024238:	009b      	lsls	r3, r3, #2
 802423a:	440b      	add	r3, r1
 802423c:	2201      	movs	r2, #1
 802423e:	701a      	strb	r2, [r3, #0]
				Dcm_RDBPI_Table[CanH_DiagArray[3] - 12].TransmissionMode = CanH_DiagArray[2];
 8024240:	4b3f      	ldr	r3, [pc, #252]	@ (8024340 <Dcm_MainFunction+0x348>)
 8024242:	78db      	ldrb	r3, [r3, #3]
 8024244:	f1a3 020c 	sub.w	r2, r3, #12
 8024248:	4b3d      	ldr	r3, [pc, #244]	@ (8024340 <Dcm_MainFunction+0x348>)
 802424a:	7898      	ldrb	r0, [r3, #2]
 802424c:	493d      	ldr	r1, [pc, #244]	@ (8024344 <Dcm_MainFunction+0x34c>)
 802424e:	4613      	mov	r3, r2
 8024250:	005b      	lsls	r3, r3, #1
 8024252:	4413      	add	r3, r2
 8024254:	009b      	lsls	r3, r3, #2
 8024256:	440b      	add	r3, r1
 8024258:	3301      	adds	r3, #1
 802425a:	4602      	mov	r2, r0
 802425c:	701a      	strb	r2, [r3, #0]
				Dcm_RDBPI_Table[CanH_DiagArray[3] - 12].Timestamp = Dcm_MainCounter;
 802425e:	4b38      	ldr	r3, [pc, #224]	@ (8024340 <Dcm_MainFunction+0x348>)
 8024260:	78db      	ldrb	r3, [r3, #3]
 8024262:	f1a3 020c 	sub.w	r2, r3, #12
 8024266:	4b38      	ldr	r3, [pc, #224]	@ (8024348 <Dcm_MainFunction+0x350>)
 8024268:	6819      	ldr	r1, [r3, #0]
 802426a:	4836      	ldr	r0, [pc, #216]	@ (8024344 <Dcm_MainFunction+0x34c>)
 802426c:	4613      	mov	r3, r2
 802426e:	005b      	lsls	r3, r3, #1
 8024270:	4413      	add	r3, r2
 8024272:	009b      	lsls	r3, r3, #2
 8024274:	4403      	add	r3, r0
 8024276:	3304      	adds	r3, #4
 8024278:	6019      	str	r1, [r3, #0]
				Dcm_RDBPI_Table[CanH_DiagArray[3] - 12].FuncPtr();
 802427a:	4b31      	ldr	r3, [pc, #196]	@ (8024340 <Dcm_MainFunction+0x348>)
 802427c:	78db      	ldrb	r3, [r3, #3]
 802427e:	f1a3 020c 	sub.w	r2, r3, #12
 8024282:	4930      	ldr	r1, [pc, #192]	@ (8024344 <Dcm_MainFunction+0x34c>)
 8024284:	4613      	mov	r3, r2
 8024286:	005b      	lsls	r3, r3, #1
 8024288:	4413      	add	r3, r2
 802428a:	009b      	lsls	r3, r3, #2
 802428c:	440b      	add	r3, r1
 802428e:	3308      	adds	r3, #8
 8024290:	681b      	ldr	r3, [r3, #0]
 8024292:	4798      	blx	r3
		}
		else
		{
			/* Do nothing. */
		}
		if(CanH_DiagArray[1] == 0x22)
 8024294:	4b2a      	ldr	r3, [pc, #168]	@ (8024340 <Dcm_MainFunction+0x348>)
 8024296:	785b      	ldrb	r3, [r3, #1]
 8024298:	2b22      	cmp	r3, #34	@ 0x22
 802429a:	d113      	bne.n	80242c4 <Dcm_MainFunction+0x2cc>
		{
			if(CanH_DiagArray[2] == 0x00)
 802429c:	4b28      	ldr	r3, [pc, #160]	@ (8024340 <Dcm_MainFunction+0x348>)
 802429e:	789b      	ldrb	r3, [r3, #2]
 80242a0:	2b00      	cmp	r3, #0
 80242a2:	d105      	bne.n	80242b0 <Dcm_MainFunction+0x2b8>
			{
				if(CanH_DiagArray[3] == 0x05) DiagRoutine_RDBI_ReadAliveTime();
 80242a4:	4b26      	ldr	r3, [pc, #152]	@ (8024340 <Dcm_MainFunction+0x348>)
 80242a6:	78db      	ldrb	r3, [r3, #3]
 80242a8:	2b05      	cmp	r3, #5
 80242aa:	d101      	bne.n	80242b0 <Dcm_MainFunction+0x2b8>
 80242ac:	f000 fc3e 	bl	8024b2c <DiagRoutine_RDBI_ReadAliveTime>
			}
			else
			{
				/* Do nothing. */
			}
			if(CanH_DiagArray[2] == 0xF1 && CanH_DiagArray[3] == 0x80) DiagRoutine_RDBI_ReadSWData();
 80242b0:	4b23      	ldr	r3, [pc, #140]	@ (8024340 <Dcm_MainFunction+0x348>)
 80242b2:	789b      	ldrb	r3, [r3, #2]
 80242b4:	2bf1      	cmp	r3, #241	@ 0xf1
 80242b6:	d105      	bne.n	80242c4 <Dcm_MainFunction+0x2cc>
 80242b8:	4b21      	ldr	r3, [pc, #132]	@ (8024340 <Dcm_MainFunction+0x348>)
 80242ba:	78db      	ldrb	r3, [r3, #3]
 80242bc:	2b80      	cmp	r3, #128	@ 0x80
 80242be:	d101      	bne.n	80242c4 <Dcm_MainFunction+0x2cc>
 80242c0:	f000 fbb0 	bl	8024a24 <DiagRoutine_RDBI_ReadSWData>
	}
	else
	{
		/* Do nothing. */
	}
	Dcm_TxHeader.DLC = 0;
 80242c4:	4b21      	ldr	r3, [pc, #132]	@ (802434c <Dcm_MainFunction+0x354>)
 80242c6:	2200      	movs	r2, #0
 80242c8:	611a      	str	r2, [r3, #16]
	Dcm_TxHeader.ExtId = 0;
 80242ca:	4b20      	ldr	r3, [pc, #128]	@ (802434c <Dcm_MainFunction+0x354>)
 80242cc:	2200      	movs	r2, #0
 80242ce:	605a      	str	r2, [r3, #4]
	Dcm_TxHeader.IDE = 0;
 80242d0:	4b1e      	ldr	r3, [pc, #120]	@ (802434c <Dcm_MainFunction+0x354>)
 80242d2:	2200      	movs	r2, #0
 80242d4:	609a      	str	r2, [r3, #8]
	Dcm_TxHeader.RTR = 0;
 80242d6:	4b1d      	ldr	r3, [pc, #116]	@ (802434c <Dcm_MainFunction+0x354>)
 80242d8:	2200      	movs	r2, #0
 80242da:	60da      	str	r2, [r3, #12]
	Dcm_TxHeader.StdId = 0;
 80242dc:	4b1b      	ldr	r3, [pc, #108]	@ (802434c <Dcm_MainFunction+0x354>)
 80242de:	2200      	movs	r2, #0
 80242e0:	601a      	str	r2, [r3, #0]
	CanH_DiagRxHeader.DLC = 0;
 80242e2:	4b1b      	ldr	r3, [pc, #108]	@ (8024350 <Dcm_MainFunction+0x358>)
 80242e4:	2200      	movs	r2, #0
 80242e6:	611a      	str	r2, [r3, #16]
	CanH_DiagRxHeader.ExtId = 0;
 80242e8:	4b19      	ldr	r3, [pc, #100]	@ (8024350 <Dcm_MainFunction+0x358>)
 80242ea:	2200      	movs	r2, #0
 80242ec:	605a      	str	r2, [r3, #4]
	CanH_DiagRxHeader.FilterMatchIndex = 0;
 80242ee:	4b18      	ldr	r3, [pc, #96]	@ (8024350 <Dcm_MainFunction+0x358>)
 80242f0:	2200      	movs	r2, #0
 80242f2:	619a      	str	r2, [r3, #24]
	CanH_DiagRxHeader.IDE = 0;
 80242f4:	4b16      	ldr	r3, [pc, #88]	@ (8024350 <Dcm_MainFunction+0x358>)
 80242f6:	2200      	movs	r2, #0
 80242f8:	609a      	str	r2, [r3, #8]
	CanH_DiagRxHeader.RTR = 0;
 80242fa:	4b15      	ldr	r3, [pc, #84]	@ (8024350 <Dcm_MainFunction+0x358>)
 80242fc:	2200      	movs	r2, #0
 80242fe:	60da      	str	r2, [r3, #12]
	CanH_DiagRxHeader.StdId = 0;
 8024300:	4b13      	ldr	r3, [pc, #76]	@ (8024350 <Dcm_MainFunction+0x358>)
 8024302:	2200      	movs	r2, #0
 8024304:	601a      	str	r2, [r3, #0]
	CanH_DiagRxHeader.Timestamp = 0;
 8024306:	4b12      	ldr	r3, [pc, #72]	@ (8024350 <Dcm_MainFunction+0x358>)
 8024308:	2200      	movs	r2, #0
 802430a:	615a      	str	r2, [r3, #20]
	for(uint8 i = 0; i < 8; i++)
 802430c:	2300      	movs	r3, #0
 802430e:	71bb      	strb	r3, [r7, #6]
 8024310:	e00a      	b.n	8024328 <Dcm_MainFunction+0x330>
	{
		Dcm_TxData[i] = 0;
 8024312:	79bb      	ldrb	r3, [r7, #6]
 8024314:	4a0f      	ldr	r2, [pc, #60]	@ (8024354 <Dcm_MainFunction+0x35c>)
 8024316:	2100      	movs	r1, #0
 8024318:	54d1      	strb	r1, [r2, r3]
		CanH_DiagArray[i] = 0;
 802431a:	79bb      	ldrb	r3, [r7, #6]
 802431c:	4a08      	ldr	r2, [pc, #32]	@ (8024340 <Dcm_MainFunction+0x348>)
 802431e:	2100      	movs	r1, #0
 8024320:	54d1      	strb	r1, [r2, r3]
	for(uint8 i = 0; i < 8; i++)
 8024322:	79bb      	ldrb	r3, [r7, #6]
 8024324:	3301      	adds	r3, #1
 8024326:	71bb      	strb	r3, [r7, #6]
 8024328:	79bb      	ldrb	r3, [r7, #6]
 802432a:	2b07      	cmp	r3, #7
 802432c:	d9f1      	bls.n	8024312 <Dcm_MainFunction+0x31a>
	}
	Dcm_MainCounter++;
 802432e:	4b06      	ldr	r3, [pc, #24]	@ (8024348 <Dcm_MainFunction+0x350>)
 8024330:	681b      	ldr	r3, [r3, #0]
 8024332:	3301      	adds	r3, #1
 8024334:	4a04      	ldr	r2, [pc, #16]	@ (8024348 <Dcm_MainFunction+0x350>)
 8024336:	6013      	str	r3, [r2, #0]
}
 8024338:	bf00      	nop
 802433a:	3708      	adds	r7, #8
 802433c:	46bd      	mov	sp, r7
 802433e:	bd80      	pop	{r7, pc}
 8024340:	10000894 	.word	0x10000894
 8024344:	20000004 	.word	0x20000004
 8024348:	10000910 	.word	0x10000910
 802434c:	10000914 	.word	0x10000914
 8024350:	1000089c 	.word	0x1000089c
 8024354:	1000092c 	.word	0x1000092c

08024358 <DiagRoutine_RDBPI_ReadCameraStatus>:
void DiagRoutine_RDBPI_ReadCameraStatus(void)
{
 8024358:	b580      	push	{r7, lr}
 802435a:	af00      	add	r7, sp, #0
	Dcm_TxHeader.DLC = 8;
 802435c:	4b18      	ldr	r3, [pc, #96]	@ (80243c0 <DiagRoutine_RDBPI_ReadCameraStatus+0x68>)
 802435e:	2208      	movs	r2, #8
 8024360:	611a      	str	r2, [r3, #16]
	Dcm_TxHeader.StdId = 0x705;
 8024362:	4b17      	ldr	r3, [pc, #92]	@ (80243c0 <DiagRoutine_RDBPI_ReadCameraStatus+0x68>)
 8024364:	f240 7205 	movw	r2, #1797	@ 0x705
 8024368:	601a      	str	r2, [r3, #0]
	Dcm_TxData[0] = 7;
 802436a:	4b16      	ldr	r3, [pc, #88]	@ (80243c4 <DiagRoutine_RDBPI_ReadCameraStatus+0x6c>)
 802436c:	2207      	movs	r2, #7
 802436e:	701a      	strb	r2, [r3, #0]
	Dcm_TxData[1] = CanH_DiagArray[1] + 0x40;
 8024370:	4b15      	ldr	r3, [pc, #84]	@ (80243c8 <DiagRoutine_RDBPI_ReadCameraStatus+0x70>)
 8024372:	785b      	ldrb	r3, [r3, #1]
 8024374:	3340      	adds	r3, #64	@ 0x40
 8024376:	b2da      	uxtb	r2, r3
 8024378:	4b12      	ldr	r3, [pc, #72]	@ (80243c4 <DiagRoutine_RDBPI_ReadCameraStatus+0x6c>)
 802437a:	705a      	strb	r2, [r3, #1]
	Dcm_TxData[2] = CanH_DiagArray[2];
 802437c:	4b12      	ldr	r3, [pc, #72]	@ (80243c8 <DiagRoutine_RDBPI_ReadCameraStatus+0x70>)
 802437e:	789a      	ldrb	r2, [r3, #2]
 8024380:	4b10      	ldr	r3, [pc, #64]	@ (80243c4 <DiagRoutine_RDBPI_ReadCameraStatus+0x6c>)
 8024382:	709a      	strb	r2, [r3, #2]
	Dcm_TxData[3] = CanH_DiagArray[3];
 8024384:	4b10      	ldr	r3, [pc, #64]	@ (80243c8 <DiagRoutine_RDBPI_ReadCameraStatus+0x70>)
 8024386:	78da      	ldrb	r2, [r3, #3]
 8024388:	4b0e      	ldr	r3, [pc, #56]	@ (80243c4 <DiagRoutine_RDBPI_ReadCameraStatus+0x6c>)
 802438a:	70da      	strb	r2, [r3, #3]
	Dcm_TxData[4] = RevCam_DcmiStatus;
 802438c:	4b0f      	ldr	r3, [pc, #60]	@ (80243cc <DiagRoutine_RDBPI_ReadCameraStatus+0x74>)
 802438e:	681b      	ldr	r3, [r3, #0]
 8024390:	b2da      	uxtb	r2, r3
 8024392:	4b0c      	ldr	r3, [pc, #48]	@ (80243c4 <DiagRoutine_RDBPI_ReadCameraStatus+0x6c>)
 8024394:	711a      	strb	r2, [r3, #4]
	Dcm_TxData[5] = RevCam_I2cStatus;
 8024396:	4b0e      	ldr	r3, [pc, #56]	@ (80243d0 <DiagRoutine_RDBPI_ReadCameraStatus+0x78>)
 8024398:	681b      	ldr	r3, [r3, #0]
 802439a:	b2da      	uxtb	r2, r3
 802439c:	4b09      	ldr	r3, [pc, #36]	@ (80243c4 <DiagRoutine_RDBPI_ReadCameraStatus+0x6c>)
 802439e:	715a      	strb	r2, [r3, #5]
	Dcm_TxData[6] = RevCam_InitStatus;
 80243a0:	4b0c      	ldr	r3, [pc, #48]	@ (80243d4 <DiagRoutine_RDBPI_ReadCameraStatus+0x7c>)
 80243a2:	781a      	ldrb	r2, [r3, #0]
 80243a4:	4b07      	ldr	r3, [pc, #28]	@ (80243c4 <DiagRoutine_RDBPI_ReadCameraStatus+0x6c>)
 80243a6:	719a      	strb	r2, [r3, #6]
	Dcm_TxData[7] = RevCam_RxSig_ReverseCameraRequest;
 80243a8:	4b0b      	ldr	r3, [pc, #44]	@ (80243d8 <DiagRoutine_RDBPI_ReadCameraStatus+0x80>)
 80243aa:	781a      	ldrb	r2, [r3, #0]
 80243ac:	4b05      	ldr	r3, [pc, #20]	@ (80243c4 <DiagRoutine_RDBPI_ReadCameraStatus+0x6c>)
 80243ae:	71da      	strb	r2, [r3, #7]
	HAL_CAN_AddTxMessage(&hcan1, &Dcm_TxHeader, Dcm_TxData, &Dcm_TxMailbox);
 80243b0:	4b0a      	ldr	r3, [pc, #40]	@ (80243dc <DiagRoutine_RDBPI_ReadCameraStatus+0x84>)
 80243b2:	4a04      	ldr	r2, [pc, #16]	@ (80243c4 <DiagRoutine_RDBPI_ReadCameraStatus+0x6c>)
 80243b4:	4902      	ldr	r1, [pc, #8]	@ (80243c0 <DiagRoutine_RDBPI_ReadCameraStatus+0x68>)
 80243b6:	480a      	ldr	r0, [pc, #40]	@ (80243e0 <DiagRoutine_RDBPI_ReadCameraStatus+0x88>)
 80243b8:	f005 fd5c 	bl	8029e74 <HAL_CAN_AddTxMessage>
}
 80243bc:	bf00      	nop
 80243be:	bd80      	pop	{r7, pc}
 80243c0:	10000914 	.word	0x10000914
 80243c4:	1000092c 	.word	0x1000092c
 80243c8:	10000894 	.word	0x10000894
 80243cc:	100007a8 	.word	0x100007a8
 80243d0:	100007ac 	.word	0x100007ac
 80243d4:	100007b0 	.word	0x100007b0
 80243d8:	100007a4 	.word	0x100007a4
 80243dc:	10000934 	.word	0x10000934
 80243e0:	200001a8 	.word	0x200001a8

080243e4 <DiagRoutine_RDBPI_ReadDisplayStatus>:
void DiagRoutine_RDBPI_ReadDisplayStatus(void)
{
 80243e4:	b580      	push	{r7, lr}
 80243e6:	af00      	add	r7, sp, #0
	Dcm_TxHeader.DLC = 8;
 80243e8:	4b17      	ldr	r3, [pc, #92]	@ (8024448 <DiagRoutine_RDBPI_ReadDisplayStatus+0x64>)
 80243ea:	2208      	movs	r2, #8
 80243ec:	611a      	str	r2, [r3, #16]
	Dcm_TxHeader.StdId = 0x705;
 80243ee:	4b16      	ldr	r3, [pc, #88]	@ (8024448 <DiagRoutine_RDBPI_ReadDisplayStatus+0x64>)
 80243f0:	f240 7205 	movw	r2, #1797	@ 0x705
 80243f4:	601a      	str	r2, [r3, #0]
	Dcm_TxData[0] = 7;
 80243f6:	4b15      	ldr	r3, [pc, #84]	@ (802444c <DiagRoutine_RDBPI_ReadDisplayStatus+0x68>)
 80243f8:	2207      	movs	r2, #7
 80243fa:	701a      	strb	r2, [r3, #0]
	Dcm_TxData[1] = CanH_DiagArray[1] + 0x40;
 80243fc:	4b14      	ldr	r3, [pc, #80]	@ (8024450 <DiagRoutine_RDBPI_ReadDisplayStatus+0x6c>)
 80243fe:	785b      	ldrb	r3, [r3, #1]
 8024400:	3340      	adds	r3, #64	@ 0x40
 8024402:	b2da      	uxtb	r2, r3
 8024404:	4b11      	ldr	r3, [pc, #68]	@ (802444c <DiagRoutine_RDBPI_ReadDisplayStatus+0x68>)
 8024406:	705a      	strb	r2, [r3, #1]
	Dcm_TxData[2] = CanH_DiagArray[2];
 8024408:	4b11      	ldr	r3, [pc, #68]	@ (8024450 <DiagRoutine_RDBPI_ReadDisplayStatus+0x6c>)
 802440a:	789a      	ldrb	r2, [r3, #2]
 802440c:	4b0f      	ldr	r3, [pc, #60]	@ (802444c <DiagRoutine_RDBPI_ReadDisplayStatus+0x68>)
 802440e:	709a      	strb	r2, [r3, #2]
	Dcm_TxData[3] = CanH_DiagArray[3];
 8024410:	4b0f      	ldr	r3, [pc, #60]	@ (8024450 <DiagRoutine_RDBPI_ReadDisplayStatus+0x6c>)
 8024412:	78da      	ldrb	r2, [r3, #3]
 8024414:	4b0d      	ldr	r3, [pc, #52]	@ (802444c <DiagRoutine_RDBPI_ReadDisplayStatus+0x68>)
 8024416:	70da      	strb	r2, [r3, #3]
	Dcm_TxData[4] = DigitalCluster_FsmcDmaErrorFlag;
 8024418:	4b0e      	ldr	r3, [pc, #56]	@ (8024454 <DiagRoutine_RDBPI_ReadDisplayStatus+0x70>)
 802441a:	781a      	ldrb	r2, [r3, #0]
 802441c:	4b0b      	ldr	r3, [pc, #44]	@ (802444c <DiagRoutine_RDBPI_ReadDisplayStatus+0x68>)
 802441e:	711a      	strb	r2, [r3, #4]
	Dcm_TxData[5] = DigitalCluster_IsSelfTestRequested;
 8024420:	4b0d      	ldr	r3, [pc, #52]	@ (8024458 <DiagRoutine_RDBPI_ReadDisplayStatus+0x74>)
 8024422:	781a      	ldrb	r2, [r3, #0]
 8024424:	4b09      	ldr	r3, [pc, #36]	@ (802444c <DiagRoutine_RDBPI_ReadDisplayStatus+0x68>)
 8024426:	715a      	strb	r2, [r3, #5]
	Dcm_TxData[6] = DigitalCluster_LcdInit;
 8024428:	4b0c      	ldr	r3, [pc, #48]	@ (802445c <DiagRoutine_RDBPI_ReadDisplayStatus+0x78>)
 802442a:	781a      	ldrb	r2, [r3, #0]
 802442c:	4b07      	ldr	r3, [pc, #28]	@ (802444c <DiagRoutine_RDBPI_ReadDisplayStatus+0x68>)
 802442e:	719a      	strb	r2, [r3, #6]
	Dcm_TxData[7] = DigitalCluster_ShutOffDisplayFlag;
 8024430:	4b0b      	ldr	r3, [pc, #44]	@ (8024460 <DiagRoutine_RDBPI_ReadDisplayStatus+0x7c>)
 8024432:	781a      	ldrb	r2, [r3, #0]
 8024434:	4b05      	ldr	r3, [pc, #20]	@ (802444c <DiagRoutine_RDBPI_ReadDisplayStatus+0x68>)
 8024436:	71da      	strb	r2, [r3, #7]
	HAL_CAN_AddTxMessage(&hcan1, &Dcm_TxHeader, Dcm_TxData, &Dcm_TxMailbox);
 8024438:	4b0a      	ldr	r3, [pc, #40]	@ (8024464 <DiagRoutine_RDBPI_ReadDisplayStatus+0x80>)
 802443a:	4a04      	ldr	r2, [pc, #16]	@ (802444c <DiagRoutine_RDBPI_ReadDisplayStatus+0x68>)
 802443c:	4902      	ldr	r1, [pc, #8]	@ (8024448 <DiagRoutine_RDBPI_ReadDisplayStatus+0x64>)
 802443e:	480a      	ldr	r0, [pc, #40]	@ (8024468 <DiagRoutine_RDBPI_ReadDisplayStatus+0x84>)
 8024440:	f005 fd18 	bl	8029e74 <HAL_CAN_AddTxMessage>
}
 8024444:	bf00      	nop
 8024446:	bd80      	pop	{r7, pc}
 8024448:	10000914 	.word	0x10000914
 802444c:	1000092c 	.word	0x1000092c
 8024450:	10000894 	.word	0x10000894
 8024454:	10000727 	.word	0x10000727
 8024458:	10000728 	.word	0x10000728
 802445c:	10000700 	.word	0x10000700
 8024460:	100006fc 	.word	0x100006fc
 8024464:	10000934 	.word	0x10000934
 8024468:	200001a8 	.word	0x200001a8

0802446c <DiagRoutine_DSC_DefaultSession>:
void DiagRoutine_DSC_DefaultSession(void)
{
 802446c:	b580      	push	{r7, lr}
 802446e:	af00      	add	r7, sp, #0
	Dcm_TxHeader.DLC = CanH_DiagRxHeader.DLC;
 8024470:	4b19      	ldr	r3, [pc, #100]	@ (80244d8 <DiagRoutine_DSC_DefaultSession+0x6c>)
 8024472:	691b      	ldr	r3, [r3, #16]
 8024474:	4a19      	ldr	r2, [pc, #100]	@ (80244dc <DiagRoutine_DSC_DefaultSession+0x70>)
 8024476:	6113      	str	r3, [r2, #16]
	Dcm_TxHeader.StdId = 0x705;
 8024478:	4b18      	ldr	r3, [pc, #96]	@ (80244dc <DiagRoutine_DSC_DefaultSession+0x70>)
 802447a:	f240 7205 	movw	r2, #1797	@ 0x705
 802447e:	601a      	str	r2, [r3, #0]
	Dcm_TxData[0] = CanH_DiagRxHeader.DLC - 1;
 8024480:	4b15      	ldr	r3, [pc, #84]	@ (80244d8 <DiagRoutine_DSC_DefaultSession+0x6c>)
 8024482:	691b      	ldr	r3, [r3, #16]
 8024484:	b2db      	uxtb	r3, r3
 8024486:	3b01      	subs	r3, #1
 8024488:	b2da      	uxtb	r2, r3
 802448a:	4b15      	ldr	r3, [pc, #84]	@ (80244e0 <DiagRoutine_DSC_DefaultSession+0x74>)
 802448c:	701a      	strb	r2, [r3, #0]
	Dcm_TxData[1] = CanH_DiagArray[1] + 0x40;
 802448e:	4b15      	ldr	r3, [pc, #84]	@ (80244e4 <DiagRoutine_DSC_DefaultSession+0x78>)
 8024490:	785b      	ldrb	r3, [r3, #1]
 8024492:	3340      	adds	r3, #64	@ 0x40
 8024494:	b2da      	uxtb	r2, r3
 8024496:	4b12      	ldr	r3, [pc, #72]	@ (80244e0 <DiagRoutine_DSC_DefaultSession+0x74>)
 8024498:	705a      	strb	r2, [r3, #1]
	Dcm_TxData[2] = CanH_DiagArray[2];
 802449a:	4b12      	ldr	r3, [pc, #72]	@ (80244e4 <DiagRoutine_DSC_DefaultSession+0x78>)
 802449c:	789a      	ldrb	r2, [r3, #2]
 802449e:	4b10      	ldr	r3, [pc, #64]	@ (80244e0 <DiagRoutine_DSC_DefaultSession+0x74>)
 80244a0:	709a      	strb	r2, [r3, #2]
	Dcm_TxData[3] = 0;
 80244a2:	4b0f      	ldr	r3, [pc, #60]	@ (80244e0 <DiagRoutine_DSC_DefaultSession+0x74>)
 80244a4:	2200      	movs	r2, #0
 80244a6:	70da      	strb	r2, [r3, #3]
	Dcm_TxData[4] = 0;
 80244a8:	4b0d      	ldr	r3, [pc, #52]	@ (80244e0 <DiagRoutine_DSC_DefaultSession+0x74>)
 80244aa:	2200      	movs	r2, #0
 80244ac:	711a      	strb	r2, [r3, #4]
	Dcm_TxData[5] = 0;
 80244ae:	4b0c      	ldr	r3, [pc, #48]	@ (80244e0 <DiagRoutine_DSC_DefaultSession+0x74>)
 80244b0:	2200      	movs	r2, #0
 80244b2:	715a      	strb	r2, [r3, #5]
	Dcm_TxData[6] = 0;
 80244b4:	4b0a      	ldr	r3, [pc, #40]	@ (80244e0 <DiagRoutine_DSC_DefaultSession+0x74>)
 80244b6:	2200      	movs	r2, #0
 80244b8:	719a      	strb	r2, [r3, #6]
	Dcm_TxData[7] = 0;
 80244ba:	4b09      	ldr	r3, [pc, #36]	@ (80244e0 <DiagRoutine_DSC_DefaultSession+0x74>)
 80244bc:	2200      	movs	r2, #0
 80244be:	71da      	strb	r2, [r3, #7]
	Dcm_DiagnosticSession = DEFAULT;
 80244c0:	4b09      	ldr	r3, [pc, #36]	@ (80244e8 <DiagRoutine_DSC_DefaultSession+0x7c>)
 80244c2:	2200      	movs	r2, #0
 80244c4:	701a      	strb	r2, [r3, #0]
	HAL_CAN_AddTxMessage(&hcan1, &Dcm_TxHeader, Dcm_TxData, &Dcm_TxMailbox);
 80244c6:	4b09      	ldr	r3, [pc, #36]	@ (80244ec <DiagRoutine_DSC_DefaultSession+0x80>)
 80244c8:	4a05      	ldr	r2, [pc, #20]	@ (80244e0 <DiagRoutine_DSC_DefaultSession+0x74>)
 80244ca:	4904      	ldr	r1, [pc, #16]	@ (80244dc <DiagRoutine_DSC_DefaultSession+0x70>)
 80244cc:	4808      	ldr	r0, [pc, #32]	@ (80244f0 <DiagRoutine_DSC_DefaultSession+0x84>)
 80244ce:	f005 fcd1 	bl	8029e74 <HAL_CAN_AddTxMessage>
}
 80244d2:	bf00      	nop
 80244d4:	bd80      	pop	{r7, pc}
 80244d6:	bf00      	nop
 80244d8:	1000089c 	.word	0x1000089c
 80244dc:	10000914 	.word	0x10000914
 80244e0:	1000092c 	.word	0x1000092c
 80244e4:	10000894 	.word	0x10000894
 80244e8:	1000fc00 	.word	0x1000fc00
 80244ec:	10000934 	.word	0x10000934
 80244f0:	200001a8 	.word	0x200001a8

080244f4 <DiagRoutine_DSC_ExtendedSession>:
void DiagRoutine_DSC_ExtendedSession(void)
{
 80244f4:	b580      	push	{r7, lr}
 80244f6:	af00      	add	r7, sp, #0
	Dcm_TxHeader.DLC = CanH_DiagRxHeader.DLC;
 80244f8:	4b19      	ldr	r3, [pc, #100]	@ (8024560 <DiagRoutine_DSC_ExtendedSession+0x6c>)
 80244fa:	691b      	ldr	r3, [r3, #16]
 80244fc:	4a19      	ldr	r2, [pc, #100]	@ (8024564 <DiagRoutine_DSC_ExtendedSession+0x70>)
 80244fe:	6113      	str	r3, [r2, #16]
	Dcm_TxHeader.StdId = CanH_DiagRxHeader.StdId + 1;
 8024500:	4b17      	ldr	r3, [pc, #92]	@ (8024560 <DiagRoutine_DSC_ExtendedSession+0x6c>)
 8024502:	681b      	ldr	r3, [r3, #0]
 8024504:	3301      	adds	r3, #1
 8024506:	4a17      	ldr	r2, [pc, #92]	@ (8024564 <DiagRoutine_DSC_ExtendedSession+0x70>)
 8024508:	6013      	str	r3, [r2, #0]
	Dcm_TxData[0] = CanH_DiagRxHeader.DLC - 1;
 802450a:	4b15      	ldr	r3, [pc, #84]	@ (8024560 <DiagRoutine_DSC_ExtendedSession+0x6c>)
 802450c:	691b      	ldr	r3, [r3, #16]
 802450e:	b2db      	uxtb	r3, r3
 8024510:	3b01      	subs	r3, #1
 8024512:	b2da      	uxtb	r2, r3
 8024514:	4b14      	ldr	r3, [pc, #80]	@ (8024568 <DiagRoutine_DSC_ExtendedSession+0x74>)
 8024516:	701a      	strb	r2, [r3, #0]
	Dcm_TxData[1] = CanH_DiagArray[1] + 0x40;
 8024518:	4b14      	ldr	r3, [pc, #80]	@ (802456c <DiagRoutine_DSC_ExtendedSession+0x78>)
 802451a:	785b      	ldrb	r3, [r3, #1]
 802451c:	3340      	adds	r3, #64	@ 0x40
 802451e:	b2da      	uxtb	r2, r3
 8024520:	4b11      	ldr	r3, [pc, #68]	@ (8024568 <DiagRoutine_DSC_ExtendedSession+0x74>)
 8024522:	705a      	strb	r2, [r3, #1]
	Dcm_TxData[2] = CanH_DiagArray[2];
 8024524:	4b11      	ldr	r3, [pc, #68]	@ (802456c <DiagRoutine_DSC_ExtendedSession+0x78>)
 8024526:	789a      	ldrb	r2, [r3, #2]
 8024528:	4b0f      	ldr	r3, [pc, #60]	@ (8024568 <DiagRoutine_DSC_ExtendedSession+0x74>)
 802452a:	709a      	strb	r2, [r3, #2]
	Dcm_TxData[3] = 0;
 802452c:	4b0e      	ldr	r3, [pc, #56]	@ (8024568 <DiagRoutine_DSC_ExtendedSession+0x74>)
 802452e:	2200      	movs	r2, #0
 8024530:	70da      	strb	r2, [r3, #3]
	Dcm_TxData[4] = 0;
 8024532:	4b0d      	ldr	r3, [pc, #52]	@ (8024568 <DiagRoutine_DSC_ExtendedSession+0x74>)
 8024534:	2200      	movs	r2, #0
 8024536:	711a      	strb	r2, [r3, #4]
	Dcm_TxData[5] = 0;
 8024538:	4b0b      	ldr	r3, [pc, #44]	@ (8024568 <DiagRoutine_DSC_ExtendedSession+0x74>)
 802453a:	2200      	movs	r2, #0
 802453c:	715a      	strb	r2, [r3, #5]
	Dcm_TxData[6] = 0;
 802453e:	4b0a      	ldr	r3, [pc, #40]	@ (8024568 <DiagRoutine_DSC_ExtendedSession+0x74>)
 8024540:	2200      	movs	r2, #0
 8024542:	719a      	strb	r2, [r3, #6]
	Dcm_TxData[7] = 0;
 8024544:	4b08      	ldr	r3, [pc, #32]	@ (8024568 <DiagRoutine_DSC_ExtendedSession+0x74>)
 8024546:	2200      	movs	r2, #0
 8024548:	71da      	strb	r2, [r3, #7]
	Dcm_DiagnosticSession = EXTENDED;
 802454a:	4b09      	ldr	r3, [pc, #36]	@ (8024570 <DiagRoutine_DSC_ExtendedSession+0x7c>)
 802454c:	2201      	movs	r2, #1
 802454e:	701a      	strb	r2, [r3, #0]
	HAL_CAN_AddTxMessage(&hcan1, &Dcm_TxHeader, Dcm_TxData, &Dcm_TxMailbox);
 8024550:	4b08      	ldr	r3, [pc, #32]	@ (8024574 <DiagRoutine_DSC_ExtendedSession+0x80>)
 8024552:	4a05      	ldr	r2, [pc, #20]	@ (8024568 <DiagRoutine_DSC_ExtendedSession+0x74>)
 8024554:	4903      	ldr	r1, [pc, #12]	@ (8024564 <DiagRoutine_DSC_ExtendedSession+0x70>)
 8024556:	4808      	ldr	r0, [pc, #32]	@ (8024578 <DiagRoutine_DSC_ExtendedSession+0x84>)
 8024558:	f005 fc8c 	bl	8029e74 <HAL_CAN_AddTxMessage>
}
 802455c:	bf00      	nop
 802455e:	bd80      	pop	{r7, pc}
 8024560:	1000089c 	.word	0x1000089c
 8024564:	10000914 	.word	0x10000914
 8024568:	1000092c 	.word	0x1000092c
 802456c:	10000894 	.word	0x10000894
 8024570:	1000fc00 	.word	0x1000fc00
 8024574:	10000934 	.word	0x10000934
 8024578:	200001a8 	.word	0x200001a8

0802457c <DiagRoutine_DSC_ProgrammingSession>:
void DiagRoutine_DSC_ProgrammingSession(void)
{
 802457c:	b580      	push	{r7, lr}
 802457e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8024580:	b672      	cpsid	i
}
 8024582:	bf00      	nop
	__disable_irq();
	Dcm_TxHeader.DLC = CanH_DiagRxHeader.DLC;
 8024584:	4b1e      	ldr	r3, [pc, #120]	@ (8024600 <DiagRoutine_DSC_ProgrammingSession+0x84>)
 8024586:	691b      	ldr	r3, [r3, #16]
 8024588:	4a1e      	ldr	r2, [pc, #120]	@ (8024604 <DiagRoutine_DSC_ProgrammingSession+0x88>)
 802458a:	6113      	str	r3, [r2, #16]
	Dcm_TxHeader.StdId = CanH_DiagRxHeader.StdId + 1;
 802458c:	4b1c      	ldr	r3, [pc, #112]	@ (8024600 <DiagRoutine_DSC_ProgrammingSession+0x84>)
 802458e:	681b      	ldr	r3, [r3, #0]
 8024590:	3301      	adds	r3, #1
 8024592:	4a1c      	ldr	r2, [pc, #112]	@ (8024604 <DiagRoutine_DSC_ProgrammingSession+0x88>)
 8024594:	6013      	str	r3, [r2, #0]
	Dcm_TxData[0] = CanH_DiagRxHeader.DLC - 1;
 8024596:	4b1a      	ldr	r3, [pc, #104]	@ (8024600 <DiagRoutine_DSC_ProgrammingSession+0x84>)
 8024598:	691b      	ldr	r3, [r3, #16]
 802459a:	b2db      	uxtb	r3, r3
 802459c:	3b01      	subs	r3, #1
 802459e:	b2da      	uxtb	r2, r3
 80245a0:	4b19      	ldr	r3, [pc, #100]	@ (8024608 <DiagRoutine_DSC_ProgrammingSession+0x8c>)
 80245a2:	701a      	strb	r2, [r3, #0]
	Dcm_TxData[1] = CanH_DiagArray[1] + 0x40;
 80245a4:	4b19      	ldr	r3, [pc, #100]	@ (802460c <DiagRoutine_DSC_ProgrammingSession+0x90>)
 80245a6:	785b      	ldrb	r3, [r3, #1]
 80245a8:	3340      	adds	r3, #64	@ 0x40
 80245aa:	b2da      	uxtb	r2, r3
 80245ac:	4b16      	ldr	r3, [pc, #88]	@ (8024608 <DiagRoutine_DSC_ProgrammingSession+0x8c>)
 80245ae:	705a      	strb	r2, [r3, #1]
	Dcm_TxData[2] = CanH_DiagArray[2];
 80245b0:	4b16      	ldr	r3, [pc, #88]	@ (802460c <DiagRoutine_DSC_ProgrammingSession+0x90>)
 80245b2:	789a      	ldrb	r2, [r3, #2]
 80245b4:	4b14      	ldr	r3, [pc, #80]	@ (8024608 <DiagRoutine_DSC_ProgrammingSession+0x8c>)
 80245b6:	709a      	strb	r2, [r3, #2]
	Dcm_TxData[3] = 0;
 80245b8:	4b13      	ldr	r3, [pc, #76]	@ (8024608 <DiagRoutine_DSC_ProgrammingSession+0x8c>)
 80245ba:	2200      	movs	r2, #0
 80245bc:	70da      	strb	r2, [r3, #3]
	Dcm_TxData[4] = 0;
 80245be:	4b12      	ldr	r3, [pc, #72]	@ (8024608 <DiagRoutine_DSC_ProgrammingSession+0x8c>)
 80245c0:	2200      	movs	r2, #0
 80245c2:	711a      	strb	r2, [r3, #4]
	Dcm_TxData[5] = 0;
 80245c4:	4b10      	ldr	r3, [pc, #64]	@ (8024608 <DiagRoutine_DSC_ProgrammingSession+0x8c>)
 80245c6:	2200      	movs	r2, #0
 80245c8:	715a      	strb	r2, [r3, #5]
	Dcm_TxData[6] = 0;
 80245ca:	4b0f      	ldr	r3, [pc, #60]	@ (8024608 <DiagRoutine_DSC_ProgrammingSession+0x8c>)
 80245cc:	2200      	movs	r2, #0
 80245ce:	719a      	strb	r2, [r3, #6]
	Dcm_TxData[7] = 0;
 80245d0:	4b0d      	ldr	r3, [pc, #52]	@ (8024608 <DiagRoutine_DSC_ProgrammingSession+0x8c>)
 80245d2:	2200      	movs	r2, #0
 80245d4:	71da      	strb	r2, [r3, #7]
	Dcm_DiagnosticSession = PROGRAMMING;
 80245d6:	4b0e      	ldr	r3, [pc, #56]	@ (8024610 <DiagRoutine_DSC_ProgrammingSession+0x94>)
 80245d8:	2202      	movs	r2, #2
 80245da:	701a      	strb	r2, [r3, #0]
	Nvm_WriteAll();
 80245dc:	f001 f8cc 	bl	8025778 <Nvm_WriteAll>
  __ASM volatile ("cpsie i" : : : "memory");
 80245e0:	b662      	cpsie	i
}
 80245e2:	bf00      	nop
	__enable_irq();
	HAL_CAN_AddTxMessage(&hcan1, &Dcm_TxHeader, Dcm_TxData, &Dcm_TxMailbox);
 80245e4:	4b0b      	ldr	r3, [pc, #44]	@ (8024614 <DiagRoutine_DSC_ProgrammingSession+0x98>)
 80245e6:	4a08      	ldr	r2, [pc, #32]	@ (8024608 <DiagRoutine_DSC_ProgrammingSession+0x8c>)
 80245e8:	4906      	ldr	r1, [pc, #24]	@ (8024604 <DiagRoutine_DSC_ProgrammingSession+0x88>)
 80245ea:	480b      	ldr	r0, [pc, #44]	@ (8024618 <DiagRoutine_DSC_ProgrammingSession+0x9c>)
 80245ec:	f005 fc42 	bl	8029e74 <HAL_CAN_AddTxMessage>
	HAL_Delay(1);
 80245f0:	2001      	movs	r0, #1
 80245f2:	f003 ff7f 	bl	80284f4 <HAL_Delay>
	EcuM_PerformReset(0);
 80245f6:	2000      	movs	r0, #0
 80245f8:	f001 fc38 	bl	8025e6c <EcuM_PerformReset>
}
 80245fc:	bf00      	nop
 80245fe:	bd80      	pop	{r7, pc}
 8024600:	1000089c 	.word	0x1000089c
 8024604:	10000914 	.word	0x10000914
 8024608:	1000092c 	.word	0x1000092c
 802460c:	10000894 	.word	0x10000894
 8024610:	1000fc00 	.word	0x1000fc00
 8024614:	10000934 	.word	0x10000934
 8024618:	200001a8 	.word	0x200001a8

0802461c <DiagRoutine_ER_HardReset>:
void DiagRoutine_ER_HardReset(void)
{
 802461c:	b580      	push	{r7, lr}
 802461e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8024620:	b672      	cpsid	i
}
 8024622:	bf00      	nop
	__disable_irq();
	Dcm_TxHeader.DLC = 3;
 8024624:	4b19      	ldr	r3, [pc, #100]	@ (802468c <DiagRoutine_ER_HardReset+0x70>)
 8024626:	2203      	movs	r2, #3
 8024628:	611a      	str	r2, [r3, #16]
	Dcm_TxHeader.StdId = 0x705;
 802462a:	4b18      	ldr	r3, [pc, #96]	@ (802468c <DiagRoutine_ER_HardReset+0x70>)
 802462c:	f240 7205 	movw	r2, #1797	@ 0x705
 8024630:	601a      	str	r2, [r3, #0]
	Dcm_TxData[0] = 2;
 8024632:	4b17      	ldr	r3, [pc, #92]	@ (8024690 <DiagRoutine_ER_HardReset+0x74>)
 8024634:	2202      	movs	r2, #2
 8024636:	701a      	strb	r2, [r3, #0]
	Dcm_TxData[1] = 0x51;
 8024638:	4b15      	ldr	r3, [pc, #84]	@ (8024690 <DiagRoutine_ER_HardReset+0x74>)
 802463a:	2251      	movs	r2, #81	@ 0x51
 802463c:	705a      	strb	r2, [r3, #1]
	Dcm_TxData[2] = 0x01;
 802463e:	4b14      	ldr	r3, [pc, #80]	@ (8024690 <DiagRoutine_ER_HardReset+0x74>)
 8024640:	2201      	movs	r2, #1
 8024642:	709a      	strb	r2, [r3, #2]
	Dcm_TxData[3] = 0;
 8024644:	4b12      	ldr	r3, [pc, #72]	@ (8024690 <DiagRoutine_ER_HardReset+0x74>)
 8024646:	2200      	movs	r2, #0
 8024648:	70da      	strb	r2, [r3, #3]
	Dcm_TxData[4] = 0;
 802464a:	4b11      	ldr	r3, [pc, #68]	@ (8024690 <DiagRoutine_ER_HardReset+0x74>)
 802464c:	2200      	movs	r2, #0
 802464e:	711a      	strb	r2, [r3, #4]
	Dcm_TxData[5] = 0;
 8024650:	4b0f      	ldr	r3, [pc, #60]	@ (8024690 <DiagRoutine_ER_HardReset+0x74>)
 8024652:	2200      	movs	r2, #0
 8024654:	715a      	strb	r2, [r3, #5]
	Dcm_TxData[6] = 0;
 8024656:	4b0e      	ldr	r3, [pc, #56]	@ (8024690 <DiagRoutine_ER_HardReset+0x74>)
 8024658:	2200      	movs	r2, #0
 802465a:	719a      	strb	r2, [r3, #6]
	Dcm_TxData[7] = 0;
 802465c:	4b0c      	ldr	r3, [pc, #48]	@ (8024690 <DiagRoutine_ER_HardReset+0x74>)
 802465e:	2200      	movs	r2, #0
 8024660:	71da      	strb	r2, [r3, #7]
	Dcm_DiagnosticSession = HARDRESET;
 8024662:	4b0c      	ldr	r3, [pc, #48]	@ (8024694 <DiagRoutine_ER_HardReset+0x78>)
 8024664:	2205      	movs	r2, #5
 8024666:	701a      	strb	r2, [r3, #0]
	Nvm_WriteAll();
 8024668:	f001 f886 	bl	8025778 <Nvm_WriteAll>
  __ASM volatile ("cpsie i" : : : "memory");
 802466c:	b662      	cpsie	i
}
 802466e:	bf00      	nop
	__enable_irq();
	HAL_CAN_AddTxMessage(&hcan1, &Dcm_TxHeader, Dcm_TxData, &Dcm_TxMailbox);
 8024670:	4b09      	ldr	r3, [pc, #36]	@ (8024698 <DiagRoutine_ER_HardReset+0x7c>)
 8024672:	4a07      	ldr	r2, [pc, #28]	@ (8024690 <DiagRoutine_ER_HardReset+0x74>)
 8024674:	4905      	ldr	r1, [pc, #20]	@ (802468c <DiagRoutine_ER_HardReset+0x70>)
 8024676:	4809      	ldr	r0, [pc, #36]	@ (802469c <DiagRoutine_ER_HardReset+0x80>)
 8024678:	f005 fbfc 	bl	8029e74 <HAL_CAN_AddTxMessage>
	HAL_Delay(1);
 802467c:	2001      	movs	r0, #1
 802467e:	f003 ff39 	bl	80284f4 <HAL_Delay>
	EcuM_PerformReset(0);
 8024682:	2000      	movs	r0, #0
 8024684:	f001 fbf2 	bl	8025e6c <EcuM_PerformReset>
}
 8024688:	bf00      	nop
 802468a:	bd80      	pop	{r7, pc}
 802468c:	10000914 	.word	0x10000914
 8024690:	1000092c 	.word	0x1000092c
 8024694:	1000fc00 	.word	0x1000fc00
 8024698:	10000934 	.word	0x10000934
 802469c:	200001a8 	.word	0x200001a8

080246a0 <DiagRoutine_ER_SoftReset>:
void DiagRoutine_ER_SoftReset(void)
{
 80246a0:	b580      	push	{r7, lr}
 80246a2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80246a4:	b672      	cpsid	i
}
 80246a6:	bf00      	nop
	__disable_irq();
	Dcm_TxHeader.DLC = 3;
 80246a8:	4b19      	ldr	r3, [pc, #100]	@ (8024710 <DiagRoutine_ER_SoftReset+0x70>)
 80246aa:	2203      	movs	r2, #3
 80246ac:	611a      	str	r2, [r3, #16]
	Dcm_TxHeader.StdId = 0x705;
 80246ae:	4b18      	ldr	r3, [pc, #96]	@ (8024710 <DiagRoutine_ER_SoftReset+0x70>)
 80246b0:	f240 7205 	movw	r2, #1797	@ 0x705
 80246b4:	601a      	str	r2, [r3, #0]
	Dcm_TxData[0] = 2;
 80246b6:	4b17      	ldr	r3, [pc, #92]	@ (8024714 <DiagRoutine_ER_SoftReset+0x74>)
 80246b8:	2202      	movs	r2, #2
 80246ba:	701a      	strb	r2, [r3, #0]
	Dcm_TxData[1] = 0x51;
 80246bc:	4b15      	ldr	r3, [pc, #84]	@ (8024714 <DiagRoutine_ER_SoftReset+0x74>)
 80246be:	2251      	movs	r2, #81	@ 0x51
 80246c0:	705a      	strb	r2, [r3, #1]
	Dcm_TxData[2] = 3;
 80246c2:	4b14      	ldr	r3, [pc, #80]	@ (8024714 <DiagRoutine_ER_SoftReset+0x74>)
 80246c4:	2203      	movs	r2, #3
 80246c6:	709a      	strb	r2, [r3, #2]
	Dcm_TxData[3] = 0;
 80246c8:	4b12      	ldr	r3, [pc, #72]	@ (8024714 <DiagRoutine_ER_SoftReset+0x74>)
 80246ca:	2200      	movs	r2, #0
 80246cc:	70da      	strb	r2, [r3, #3]
	Dcm_TxData[4] = 0;
 80246ce:	4b11      	ldr	r3, [pc, #68]	@ (8024714 <DiagRoutine_ER_SoftReset+0x74>)
 80246d0:	2200      	movs	r2, #0
 80246d2:	711a      	strb	r2, [r3, #4]
	Dcm_TxData[5] = 0;
 80246d4:	4b0f      	ldr	r3, [pc, #60]	@ (8024714 <DiagRoutine_ER_SoftReset+0x74>)
 80246d6:	2200      	movs	r2, #0
 80246d8:	715a      	strb	r2, [r3, #5]
	Dcm_TxData[6] = 0;
 80246da:	4b0e      	ldr	r3, [pc, #56]	@ (8024714 <DiagRoutine_ER_SoftReset+0x74>)
 80246dc:	2200      	movs	r2, #0
 80246de:	719a      	strb	r2, [r3, #6]
	Dcm_TxData[7] = 0;
 80246e0:	4b0c      	ldr	r3, [pc, #48]	@ (8024714 <DiagRoutine_ER_SoftReset+0x74>)
 80246e2:	2200      	movs	r2, #0
 80246e4:	71da      	strb	r2, [r3, #7]
	Dcm_DiagnosticSession = SOFTRESET;
 80246e6:	4b0c      	ldr	r3, [pc, #48]	@ (8024718 <DiagRoutine_ER_SoftReset+0x78>)
 80246e8:	2206      	movs	r2, #6
 80246ea:	701a      	strb	r2, [r3, #0]
	Nvm_WriteAll();
 80246ec:	f001 f844 	bl	8025778 <Nvm_WriteAll>
  __ASM volatile ("cpsie i" : : : "memory");
 80246f0:	b662      	cpsie	i
}
 80246f2:	bf00      	nop
	__enable_irq();
	HAL_CAN_AddTxMessage(&hcan1, &Dcm_TxHeader, Dcm_TxData, &Dcm_TxMailbox);
 80246f4:	4b09      	ldr	r3, [pc, #36]	@ (802471c <DiagRoutine_ER_SoftReset+0x7c>)
 80246f6:	4a07      	ldr	r2, [pc, #28]	@ (8024714 <DiagRoutine_ER_SoftReset+0x74>)
 80246f8:	4905      	ldr	r1, [pc, #20]	@ (8024710 <DiagRoutine_ER_SoftReset+0x70>)
 80246fa:	4809      	ldr	r0, [pc, #36]	@ (8024720 <DiagRoutine_ER_SoftReset+0x80>)
 80246fc:	f005 fbba 	bl	8029e74 <HAL_CAN_AddTxMessage>
	HAL_Delay(1);
 8024700:	2001      	movs	r0, #1
 8024702:	f003 fef7 	bl	80284f4 <HAL_Delay>
	EcuM_PerformReset(0);
 8024706:	2000      	movs	r0, #0
 8024708:	f001 fbb0 	bl	8025e6c <EcuM_PerformReset>
}
 802470c:	bf00      	nop
 802470e:	bd80      	pop	{r7, pc}
 8024710:	10000914 	.word	0x10000914
 8024714:	1000092c 	.word	0x1000092c
 8024718:	1000fc00 	.word	0x1000fc00
 802471c:	10000934 	.word	0x10000934
 8024720:	200001a8 	.word	0x200001a8

08024724 <DiagRoutine_TP_TesterPresent>:
void DiagRoutine_TP_TesterPresent(void)
{
 8024724:	b580      	push	{r7, lr}
 8024726:	af00      	add	r7, sp, #0
	Dcm_TxHeader.DLC = CanH_DiagRxHeader.DLC;
 8024728:	4b1e      	ldr	r3, [pc, #120]	@ (80247a4 <DiagRoutine_TP_TesterPresent+0x80>)
 802472a:	691b      	ldr	r3, [r3, #16]
 802472c:	4a1e      	ldr	r2, [pc, #120]	@ (80247a8 <DiagRoutine_TP_TesterPresent+0x84>)
 802472e:	6113      	str	r3, [r2, #16]
	Dcm_TxHeader.StdId = CanH_DiagRxHeader.StdId + 1;
 8024730:	4b1c      	ldr	r3, [pc, #112]	@ (80247a4 <DiagRoutine_TP_TesterPresent+0x80>)
 8024732:	681b      	ldr	r3, [r3, #0]
 8024734:	3301      	adds	r3, #1
 8024736:	4a1c      	ldr	r2, [pc, #112]	@ (80247a8 <DiagRoutine_TP_TesterPresent+0x84>)
 8024738:	6013      	str	r3, [r2, #0]
	Dcm_TxData[0] = CanH_DiagRxHeader.DLC - 1;
 802473a:	4b1a      	ldr	r3, [pc, #104]	@ (80247a4 <DiagRoutine_TP_TesterPresent+0x80>)
 802473c:	691b      	ldr	r3, [r3, #16]
 802473e:	b2db      	uxtb	r3, r3
 8024740:	3b01      	subs	r3, #1
 8024742:	b2da      	uxtb	r2, r3
 8024744:	4b19      	ldr	r3, [pc, #100]	@ (80247ac <DiagRoutine_TP_TesterPresent+0x88>)
 8024746:	701a      	strb	r2, [r3, #0]
	Dcm_TxData[1] = CanH_DiagArray[1] + 0x40;
 8024748:	4b19      	ldr	r3, [pc, #100]	@ (80247b0 <DiagRoutine_TP_TesterPresent+0x8c>)
 802474a:	785b      	ldrb	r3, [r3, #1]
 802474c:	3340      	adds	r3, #64	@ 0x40
 802474e:	b2da      	uxtb	r2, r3
 8024750:	4b16      	ldr	r3, [pc, #88]	@ (80247ac <DiagRoutine_TP_TesterPresent+0x88>)
 8024752:	705a      	strb	r2, [r3, #1]
	Dcm_TxData[2] = CanH_DiagArray[2];
 8024754:	4b16      	ldr	r3, [pc, #88]	@ (80247b0 <DiagRoutine_TP_TesterPresent+0x8c>)
 8024756:	789a      	ldrb	r2, [r3, #2]
 8024758:	4b14      	ldr	r3, [pc, #80]	@ (80247ac <DiagRoutine_TP_TesterPresent+0x88>)
 802475a:	709a      	strb	r2, [r3, #2]
	Dcm_TxData[3] = 0;
 802475c:	4b13      	ldr	r3, [pc, #76]	@ (80247ac <DiagRoutine_TP_TesterPresent+0x88>)
 802475e:	2200      	movs	r2, #0
 8024760:	70da      	strb	r2, [r3, #3]
	Dcm_TxData[4] = 0;
 8024762:	4b12      	ldr	r3, [pc, #72]	@ (80247ac <DiagRoutine_TP_TesterPresent+0x88>)
 8024764:	2200      	movs	r2, #0
 8024766:	711a      	strb	r2, [r3, #4]
	Dcm_TxData[5] = 0;
 8024768:	4b10      	ldr	r3, [pc, #64]	@ (80247ac <DiagRoutine_TP_TesterPresent+0x88>)
 802476a:	2200      	movs	r2, #0
 802476c:	715a      	strb	r2, [r3, #5]
	Dcm_TxData[6] = 0;
 802476e:	4b0f      	ldr	r3, [pc, #60]	@ (80247ac <DiagRoutine_TP_TesterPresent+0x88>)
 8024770:	2200      	movs	r2, #0
 8024772:	719a      	strb	r2, [r3, #6]
	Dcm_TxData[7] = 0;
 8024774:	4b0d      	ldr	r3, [pc, #52]	@ (80247ac <DiagRoutine_TP_TesterPresent+0x88>)
 8024776:	2200      	movs	r2, #0
 8024778:	71da      	strb	r2, [r3, #7]
	CanH_RequestBusSleep = 0;
 802477a:	4b0e      	ldr	r3, [pc, #56]	@ (80247b4 <DiagRoutine_TP_TesterPresent+0x90>)
 802477c:	2200      	movs	r2, #0
 802477e:	701a      	strb	r2, [r3, #0]
	if(CanH_CommunicationState != CC_ACTIVE) CanH_CommunicationState = FULL_COMMUNICATION;
 8024780:	4b0d      	ldr	r3, [pc, #52]	@ (80247b8 <DiagRoutine_TP_TesterPresent+0x94>)
 8024782:	781b      	ldrb	r3, [r3, #0]
 8024784:	2b04      	cmp	r3, #4
 8024786:	d002      	beq.n	802478e <DiagRoutine_TP_TesterPresent+0x6a>
 8024788:	4b0b      	ldr	r3, [pc, #44]	@ (80247b8 <DiagRoutine_TP_TesterPresent+0x94>)
 802478a:	2202      	movs	r2, #2
 802478c:	701a      	strb	r2, [r3, #0]
	else
	{
		/* Do nothing. */
	}
	CanH_NoCommCounter = 0;
 802478e:	4b0b      	ldr	r3, [pc, #44]	@ (80247bc <DiagRoutine_TP_TesterPresent+0x98>)
 8024790:	2200      	movs	r2, #0
 8024792:	701a      	strb	r2, [r3, #0]
	HAL_CAN_AddTxMessage(&hcan1, &Dcm_TxHeader, Dcm_TxData, &Dcm_TxMailbox);
 8024794:	4b0a      	ldr	r3, [pc, #40]	@ (80247c0 <DiagRoutine_TP_TesterPresent+0x9c>)
 8024796:	4a05      	ldr	r2, [pc, #20]	@ (80247ac <DiagRoutine_TP_TesterPresent+0x88>)
 8024798:	4903      	ldr	r1, [pc, #12]	@ (80247a8 <DiagRoutine_TP_TesterPresent+0x84>)
 802479a:	480a      	ldr	r0, [pc, #40]	@ (80247c4 <DiagRoutine_TP_TesterPresent+0xa0>)
 802479c:	f005 fb6a 	bl	8029e74 <HAL_CAN_AddTxMessage>
}
 80247a0:	bf00      	nop
 80247a2:	bd80      	pop	{r7, pc}
 80247a4:	1000089c 	.word	0x1000089c
 80247a8:	10000914 	.word	0x10000914
 80247ac:	1000092c 	.word	0x1000092c
 80247b0:	10000894 	.word	0x10000894
 80247b4:	1000086c 	.word	0x1000086c
 80247b8:	10000874 	.word	0x10000874
 80247bc:	10000870 	.word	0x10000870
 80247c0:	10000934 	.word	0x10000934
 80247c4:	200001a8 	.word	0x200001a8

080247c8 <DiagRoutine_CDTCI_ClearDiagnosticInformation>:
void DiagRoutine_CDTCI_ClearDiagnosticInformation(void)
{
 80247c8:	b580      	push	{r7, lr}
 80247ca:	af00      	add	r7, sp, #0
	Dcm_TxHeader.DLC = CanH_DiagRxHeader.DLC;
 80247cc:	4b18      	ldr	r3, [pc, #96]	@ (8024830 <DiagRoutine_CDTCI_ClearDiagnosticInformation+0x68>)
 80247ce:	691b      	ldr	r3, [r3, #16]
 80247d0:	4a18      	ldr	r2, [pc, #96]	@ (8024834 <DiagRoutine_CDTCI_ClearDiagnosticInformation+0x6c>)
 80247d2:	6113      	str	r3, [r2, #16]
	Dcm_TxHeader.StdId = CanH_DiagRxHeader.StdId + 1;
 80247d4:	4b16      	ldr	r3, [pc, #88]	@ (8024830 <DiagRoutine_CDTCI_ClearDiagnosticInformation+0x68>)
 80247d6:	681b      	ldr	r3, [r3, #0]
 80247d8:	3301      	adds	r3, #1
 80247da:	4a16      	ldr	r2, [pc, #88]	@ (8024834 <DiagRoutine_CDTCI_ClearDiagnosticInformation+0x6c>)
 80247dc:	6013      	str	r3, [r2, #0]
	Dcm_TxData[0] = CanH_DiagRxHeader.DLC - 1;
 80247de:	4b14      	ldr	r3, [pc, #80]	@ (8024830 <DiagRoutine_CDTCI_ClearDiagnosticInformation+0x68>)
 80247e0:	691b      	ldr	r3, [r3, #16]
 80247e2:	b2db      	uxtb	r3, r3
 80247e4:	3b01      	subs	r3, #1
 80247e6:	b2da      	uxtb	r2, r3
 80247e8:	4b13      	ldr	r3, [pc, #76]	@ (8024838 <DiagRoutine_CDTCI_ClearDiagnosticInformation+0x70>)
 80247ea:	701a      	strb	r2, [r3, #0]
	Dcm_TxData[1] = CanH_DiagArray[1] + 0x40;
 80247ec:	4b13      	ldr	r3, [pc, #76]	@ (802483c <DiagRoutine_CDTCI_ClearDiagnosticInformation+0x74>)
 80247ee:	785b      	ldrb	r3, [r3, #1]
 80247f0:	3340      	adds	r3, #64	@ 0x40
 80247f2:	b2da      	uxtb	r2, r3
 80247f4:	4b10      	ldr	r3, [pc, #64]	@ (8024838 <DiagRoutine_CDTCI_ClearDiagnosticInformation+0x70>)
 80247f6:	705a      	strb	r2, [r3, #1]
	Dcm_TxData[2] = 0;
 80247f8:	4b0f      	ldr	r3, [pc, #60]	@ (8024838 <DiagRoutine_CDTCI_ClearDiagnosticInformation+0x70>)
 80247fa:	2200      	movs	r2, #0
 80247fc:	709a      	strb	r2, [r3, #2]
	Dcm_TxData[3] = 0;
 80247fe:	4b0e      	ldr	r3, [pc, #56]	@ (8024838 <DiagRoutine_CDTCI_ClearDiagnosticInformation+0x70>)
 8024800:	2200      	movs	r2, #0
 8024802:	70da      	strb	r2, [r3, #3]
	Dcm_TxData[4] = 0;
 8024804:	4b0c      	ldr	r3, [pc, #48]	@ (8024838 <DiagRoutine_CDTCI_ClearDiagnosticInformation+0x70>)
 8024806:	2200      	movs	r2, #0
 8024808:	711a      	strb	r2, [r3, #4]
	Dcm_TxData[5] = 0;
 802480a:	4b0b      	ldr	r3, [pc, #44]	@ (8024838 <DiagRoutine_CDTCI_ClearDiagnosticInformation+0x70>)
 802480c:	2200      	movs	r2, #0
 802480e:	715a      	strb	r2, [r3, #5]
	Dcm_TxData[6] = 0;
 8024810:	4b09      	ldr	r3, [pc, #36]	@ (8024838 <DiagRoutine_CDTCI_ClearDiagnosticInformation+0x70>)
 8024812:	2200      	movs	r2, #0
 8024814:	719a      	strb	r2, [r3, #6]
	Dcm_TxData[7] = 0;
 8024816:	4b08      	ldr	r3, [pc, #32]	@ (8024838 <DiagRoutine_CDTCI_ClearDiagnosticInformation+0x70>)
 8024818:	2200      	movs	r2, #0
 802481a:	71da      	strb	r2, [r3, #7]
	Dem_ClearDtc();
 802481c:	f000 fac6 	bl	8024dac <Dem_ClearDtc>
	HAL_CAN_AddTxMessage(&hcan1, &Dcm_TxHeader, Dcm_TxData, &Dcm_TxMailbox);
 8024820:	4b07      	ldr	r3, [pc, #28]	@ (8024840 <DiagRoutine_CDTCI_ClearDiagnosticInformation+0x78>)
 8024822:	4a05      	ldr	r2, [pc, #20]	@ (8024838 <DiagRoutine_CDTCI_ClearDiagnosticInformation+0x70>)
 8024824:	4903      	ldr	r1, [pc, #12]	@ (8024834 <DiagRoutine_CDTCI_ClearDiagnosticInformation+0x6c>)
 8024826:	4807      	ldr	r0, [pc, #28]	@ (8024844 <DiagRoutine_CDTCI_ClearDiagnosticInformation+0x7c>)
 8024828:	f005 fb24 	bl	8029e74 <HAL_CAN_AddTxMessage>
}
 802482c:	bf00      	nop
 802482e:	bd80      	pop	{r7, pc}
 8024830:	1000089c 	.word	0x1000089c
 8024834:	10000914 	.word	0x10000914
 8024838:	1000092c 	.word	0x1000092c
 802483c:	10000894 	.word	0x10000894
 8024840:	10000934 	.word	0x10000934
 8024844:	200001a8 	.word	0x200001a8

08024848 <Dcm_TxIsoTp>:
void Dcm_TxIsoTp(uint8 *data, uint16 size)
{
 8024848:	b580      	push	{r7, lr}
 802484a:	b08e      	sub	sp, #56	@ 0x38
 802484c:	af00      	add	r7, sp, #0
 802484e:	6078      	str	r0, [r7, #4]
 8024850:	460b      	mov	r3, r1
 8024852:	807b      	strh	r3, [r7, #2]
	CAN_TxHeaderTypeDef localTxHeader = {0, 0, 0, 0, 0, 0};
 8024854:	f107 0318 	add.w	r3, r7, #24
 8024858:	2200      	movs	r2, #0
 802485a:	601a      	str	r2, [r3, #0]
 802485c:	605a      	str	r2, [r3, #4]
 802485e:	609a      	str	r2, [r3, #8]
 8024860:	60da      	str	r2, [r3, #12]
 8024862:	611a      	str	r2, [r3, #16]
 8024864:	615a      	str	r2, [r3, #20]
	uint32 localTxMailbox = 0;
 8024866:	2300      	movs	r3, #0
 8024868:	617b      	str	r3, [r7, #20]
	uint16 localRemainingData = size;
 802486a:	887b      	ldrh	r3, [r7, #2]
 802486c:	86fb      	strh	r3, [r7, #54]	@ 0x36
	uint16 localOffset = 0;
 802486e:	2300      	movs	r3, #0
 8024870:	86bb      	strh	r3, [r7, #52]	@ 0x34
	uint8 localCANData[DCM_MAX_CAN_DATA_LEN];
	uint8 localSeqNum = 1;
 8024872:	2301      	movs	r3, #1
 8024874:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	localTxHeader.StdId = DCM_CAN_ID_TX;
 8024878:	f240 7304 	movw	r3, #1796	@ 0x704
 802487c:	61bb      	str	r3, [r7, #24]
	localTxHeader.RTR = CAN_RTR_DATA;
 802487e:	2300      	movs	r3, #0
 8024880:	627b      	str	r3, [r7, #36]	@ 0x24
	localTxHeader.IDE = CAN_ID_STD;
 8024882:	2300      	movs	r3, #0
 8024884:	623b      	str	r3, [r7, #32]
	localTxHeader.DLC = DCM_MAX_CAN_DATA_LEN;
 8024886:	2308      	movs	r3, #8
 8024888:	62bb      	str	r3, [r7, #40]	@ 0x28
	localTxHeader.TransmitGlobalTime = DISABLE;
 802488a:	2300      	movs	r3, #0
 802488c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	if (7 < size)
 8024890:	887b      	ldrh	r3, [r7, #2]
 8024892:	2b07      	cmp	r3, #7
 8024894:	d925      	bls.n	80248e2 <Dcm_TxIsoTp+0x9a>
	{
		localCANData[0] = 0x10 | ((size >> 8) & 0x0F);
 8024896:	887b      	ldrh	r3, [r7, #2]
 8024898:	0a1b      	lsrs	r3, r3, #8
 802489a:	b29b      	uxth	r3, r3
 802489c:	b25b      	sxtb	r3, r3
 802489e:	f003 030f 	and.w	r3, r3, #15
 80248a2:	b25b      	sxtb	r3, r3
 80248a4:	f043 0310 	orr.w	r3, r3, #16
 80248a8:	b25b      	sxtb	r3, r3
 80248aa:	b2db      	uxtb	r3, r3
 80248ac:	733b      	strb	r3, [r7, #12]
		localCANData[1] = (size & 0xFF);
 80248ae:	887b      	ldrh	r3, [r7, #2]
 80248b0:	b2db      	uxtb	r3, r3
 80248b2:	737b      	strb	r3, [r7, #13]
		memcpy(&localCANData[2], &data[0], 6);
 80248b4:	f107 030c 	add.w	r3, r7, #12
 80248b8:	3302      	adds	r3, #2
 80248ba:	2206      	movs	r2, #6
 80248bc:	6879      	ldr	r1, [r7, #4]
 80248be:	4618      	mov	r0, r3
 80248c0:	f012 ffe8 	bl	8037894 <memcpy>
		localOffset = 6;
 80248c4:	2306      	movs	r3, #6
 80248c6:	86bb      	strh	r3, [r7, #52]	@ 0x34
		localRemainingData -= 6;
 80248c8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80248ca:	3b06      	subs	r3, #6
 80248cc:	86fb      	strh	r3, [r7, #54]	@ 0x36
		HAL_CAN_AddTxMessage(&hcan1, &localTxHeader, localCANData, &localTxMailbox);
 80248ce:	f107 0314 	add.w	r3, r7, #20
 80248d2:	f107 020c 	add.w	r2, r7, #12
 80248d6:	f107 0118 	add.w	r1, r7, #24
 80248da:	4831      	ldr	r0, [pc, #196]	@ (80249a0 <Dcm_TxIsoTp+0x158>)
 80248dc:	f005 faca 	bl	8029e74 <HAL_CAN_AddTxMessage>
 80248e0:	e056      	b.n	8024990 <Dcm_TxIsoTp+0x148>
	}
	else
	{
		localCANData[0] = size & 0x0F;
 80248e2:	887b      	ldrh	r3, [r7, #2]
 80248e4:	b2db      	uxtb	r3, r3
 80248e6:	f003 030f 	and.w	r3, r3, #15
 80248ea:	b2db      	uxtb	r3, r3
 80248ec:	733b      	strb	r3, [r7, #12]
		memcpy(&localCANData[1], &data[0], size);
 80248ee:	887a      	ldrh	r2, [r7, #2]
 80248f0:	f107 030c 	add.w	r3, r7, #12
 80248f4:	3301      	adds	r3, #1
 80248f6:	6879      	ldr	r1, [r7, #4]
 80248f8:	4618      	mov	r0, r3
 80248fa:	f012 ffcb 	bl	8037894 <memcpy>
		HAL_CAN_AddTxMessage(&hcan1, &localTxHeader, localCANData, &localTxMailbox);
 80248fe:	f107 0314 	add.w	r3, r7, #20
 8024902:	f107 020c 	add.w	r2, r7, #12
 8024906:	f107 0118 	add.w	r1, r7, #24
 802490a:	4825      	ldr	r0, [pc, #148]	@ (80249a0 <Dcm_TxIsoTp+0x158>)
 802490c:	f005 fab2 	bl	8029e74 <HAL_CAN_AddTxMessage>
	}
	while(localRemainingData > 0)
 8024910:	e03e      	b.n	8024990 <Dcm_TxIsoTp+0x148>
	{
		localCANData[0] = 0x20 | (localSeqNum & 0x0F);
 8024912:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8024916:	f003 030f 	and.w	r3, r3, #15
 802491a:	b25b      	sxtb	r3, r3
 802491c:	f043 0320 	orr.w	r3, r3, #32
 8024920:	b25b      	sxtb	r3, r3
 8024922:	b2db      	uxtb	r3, r3
 8024924:	733b      	strb	r3, [r7, #12]
		if (localRemainingData >= 7)
 8024926:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8024928:	2b06      	cmp	r3, #6
 802492a:	d910      	bls.n	802494e <Dcm_TxIsoTp+0x106>
		{
			memcpy(&localCANData[1], &data[localOffset], 7);
 802492c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 802492e:	687a      	ldr	r2, [r7, #4]
 8024930:	18d1      	adds	r1, r2, r3
 8024932:	f107 030c 	add.w	r3, r7, #12
 8024936:	3301      	adds	r3, #1
 8024938:	2207      	movs	r2, #7
 802493a:	4618      	mov	r0, r3
 802493c:	f012 ffaa 	bl	8037894 <memcpy>
			localOffset += 7;
 8024940:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8024942:	3307      	adds	r3, #7
 8024944:	86bb      	strh	r3, [r7, #52]	@ 0x34
			localRemainingData -= 7;
 8024946:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8024948:	3b07      	subs	r3, #7
 802494a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 802494c:	e00f      	b.n	802496e <Dcm_TxIsoTp+0x126>
		}
		else
		{
			memcpy(&localCANData[1], &data[localOffset], localRemainingData);
 802494e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8024950:	687a      	ldr	r2, [r7, #4]
 8024952:	18d1      	adds	r1, r2, r3
 8024954:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8024956:	f107 030c 	add.w	r3, r7, #12
 802495a:	3301      	adds	r3, #1
 802495c:	4618      	mov	r0, r3
 802495e:	f012 ff99 	bl	8037894 <memcpy>
			localOffset += localRemainingData;
 8024962:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8024964:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8024966:	4413      	add	r3, r2
 8024968:	86bb      	strh	r3, [r7, #52]	@ 0x34
			localRemainingData = 0;
 802496a:	2300      	movs	r3, #0
 802496c:	86fb      	strh	r3, [r7, #54]	@ 0x36
		}
		HAL_CAN_AddTxMessage(&hcan1, &localTxHeader, localCANData, &localTxMailbox);
 802496e:	f107 0314 	add.w	r3, r7, #20
 8024972:	f107 020c 	add.w	r2, r7, #12
 8024976:	f107 0118 	add.w	r1, r7, #24
 802497a:	4809      	ldr	r0, [pc, #36]	@ (80249a0 <Dcm_TxIsoTp+0x158>)
 802497c:	f005 fa7a 	bl	8029e74 <HAL_CAN_AddTxMessage>
		HAL_Delay(1);
 8024980:	2001      	movs	r0, #1
 8024982:	f003 fdb7 	bl	80284f4 <HAL_Delay>
		localSeqNum++;
 8024986:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 802498a:	3301      	adds	r3, #1
 802498c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	while(localRemainingData > 0)
 8024990:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8024992:	2b00      	cmp	r3, #0
 8024994:	d1bd      	bne.n	8024912 <Dcm_TxIsoTp+0xca>
	}
}
 8024996:	bf00      	nop
 8024998:	bf00      	nop
 802499a:	3738      	adds	r7, #56	@ 0x38
 802499c:	46bd      	mov	sp, r7
 802499e:	bd80      	pop	{r7, pc}
 80249a0:	200001a8 	.word	0x200001a8

080249a4 <DiagRoutine_RDTCI_ReadDTCInformationSupportedDtc>:
void DiagRoutine_RDTCI_ReadDTCInformationSupportedDtc(void)
{
 80249a4:	b580      	push	{r7, lr}
 80249a6:	b082      	sub	sp, #8
 80249a8:	af00      	add	r7, sp, #0
	uint8 *data = (uint8*)Dem_DTCArray;
 80249aa:	4b19      	ldr	r3, [pc, #100]	@ (8024a10 <DiagRoutine_RDTCI_ReadDTCInformationSupportedDtc+0x6c>)
 80249ac:	607b      	str	r3, [r7, #4]
	uint16 total_size = DEM_NUMBER_OF_DTCS * sizeof(Dem_DTC_t);
 80249ae:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 80249b2:	807b      	strh	r3, [r7, #2]
	Dcm_TxHeader.DLC = 3;
 80249b4:	4b17      	ldr	r3, [pc, #92]	@ (8024a14 <DiagRoutine_RDTCI_ReadDTCInformationSupportedDtc+0x70>)
 80249b6:	2203      	movs	r2, #3
 80249b8:	611a      	str	r2, [r3, #16]
	Dcm_TxHeader.StdId = 0x705;
 80249ba:	4b16      	ldr	r3, [pc, #88]	@ (8024a14 <DiagRoutine_RDTCI_ReadDTCInformationSupportedDtc+0x70>)
 80249bc:	f240 7205 	movw	r2, #1797	@ 0x705
 80249c0:	601a      	str	r2, [r3, #0]
	Dcm_TxData[0] = 2;
 80249c2:	4b15      	ldr	r3, [pc, #84]	@ (8024a18 <DiagRoutine_RDTCI_ReadDTCInformationSupportedDtc+0x74>)
 80249c4:	2202      	movs	r2, #2
 80249c6:	701a      	strb	r2, [r3, #0]
	Dcm_TxData[1] = 0x59;
 80249c8:	4b13      	ldr	r3, [pc, #76]	@ (8024a18 <DiagRoutine_RDTCI_ReadDTCInformationSupportedDtc+0x74>)
 80249ca:	2259      	movs	r2, #89	@ 0x59
 80249cc:	705a      	strb	r2, [r3, #1]
	Dcm_TxData[2] = 0x0A;
 80249ce:	4b12      	ldr	r3, [pc, #72]	@ (8024a18 <DiagRoutine_RDTCI_ReadDTCInformationSupportedDtc+0x74>)
 80249d0:	220a      	movs	r2, #10
 80249d2:	709a      	strb	r2, [r3, #2]
	Dcm_TxData[3] = 0;
 80249d4:	4b10      	ldr	r3, [pc, #64]	@ (8024a18 <DiagRoutine_RDTCI_ReadDTCInformationSupportedDtc+0x74>)
 80249d6:	2200      	movs	r2, #0
 80249d8:	70da      	strb	r2, [r3, #3]
	Dcm_TxData[4] = 0;
 80249da:	4b0f      	ldr	r3, [pc, #60]	@ (8024a18 <DiagRoutine_RDTCI_ReadDTCInformationSupportedDtc+0x74>)
 80249dc:	2200      	movs	r2, #0
 80249de:	711a      	strb	r2, [r3, #4]
	Dcm_TxData[5] = 0;
 80249e0:	4b0d      	ldr	r3, [pc, #52]	@ (8024a18 <DiagRoutine_RDTCI_ReadDTCInformationSupportedDtc+0x74>)
 80249e2:	2200      	movs	r2, #0
 80249e4:	715a      	strb	r2, [r3, #5]
	Dcm_TxData[6] = 0;
 80249e6:	4b0c      	ldr	r3, [pc, #48]	@ (8024a18 <DiagRoutine_RDTCI_ReadDTCInformationSupportedDtc+0x74>)
 80249e8:	2200      	movs	r2, #0
 80249ea:	719a      	strb	r2, [r3, #6]
	Dcm_TxData[7] = 0;
 80249ec:	4b0a      	ldr	r3, [pc, #40]	@ (8024a18 <DiagRoutine_RDTCI_ReadDTCInformationSupportedDtc+0x74>)
 80249ee:	2200      	movs	r2, #0
 80249f0:	71da      	strb	r2, [r3, #7]
	HAL_CAN_AddTxMessage(&hcan1, &Dcm_TxHeader, Dcm_TxData, &Dcm_TxMailbox);
 80249f2:	4b0a      	ldr	r3, [pc, #40]	@ (8024a1c <DiagRoutine_RDTCI_ReadDTCInformationSupportedDtc+0x78>)
 80249f4:	4a08      	ldr	r2, [pc, #32]	@ (8024a18 <DiagRoutine_RDTCI_ReadDTCInformationSupportedDtc+0x74>)
 80249f6:	4907      	ldr	r1, [pc, #28]	@ (8024a14 <DiagRoutine_RDTCI_ReadDTCInformationSupportedDtc+0x70>)
 80249f8:	4809      	ldr	r0, [pc, #36]	@ (8024a20 <DiagRoutine_RDTCI_ReadDTCInformationSupportedDtc+0x7c>)
 80249fa:	f005 fa3b 	bl	8029e74 <HAL_CAN_AddTxMessage>
	Dcm_TxIsoTp(data, total_size);
 80249fe:	887b      	ldrh	r3, [r7, #2]
 8024a00:	4619      	mov	r1, r3
 8024a02:	6878      	ldr	r0, [r7, #4]
 8024a04:	f7ff ff20 	bl	8024848 <Dcm_TxIsoTp>
}
 8024a08:	bf00      	nop
 8024a0a:	3708      	adds	r7, #8
 8024a0c:	46bd      	mov	sp, r7
 8024a0e:	bd80      	pop	{r7, pc}
 8024a10:	1000093c 	.word	0x1000093c
 8024a14:	10000914 	.word	0x10000914
 8024a18:	1000092c 	.word	0x1000092c
 8024a1c:	10000934 	.word	0x10000934
 8024a20:	200001a8 	.word	0x200001a8

08024a24 <DiagRoutine_RDBI_ReadSWData>:
void DiagRoutine_RDBI_ReadSWData(void)
{
 8024a24:	b580      	push	{r7, lr}
 8024a26:	af00      	add	r7, sp, #0
	Dcm_TxHeader.DLC = 6;
 8024a28:	4b17      	ldr	r3, [pc, #92]	@ (8024a88 <DiagRoutine_RDBI_ReadSWData+0x64>)
 8024a2a:	2206      	movs	r2, #6
 8024a2c:	611a      	str	r2, [r3, #16]
	Dcm_TxHeader.StdId = CanH_DiagRxHeader.StdId + 1;
 8024a2e:	4b17      	ldr	r3, [pc, #92]	@ (8024a8c <DiagRoutine_RDBI_ReadSWData+0x68>)
 8024a30:	681b      	ldr	r3, [r3, #0]
 8024a32:	3301      	adds	r3, #1
 8024a34:	4a14      	ldr	r2, [pc, #80]	@ (8024a88 <DiagRoutine_RDBI_ReadSWData+0x64>)
 8024a36:	6013      	str	r3, [r2, #0]
	Dcm_TxData[0] = 5;
 8024a38:	4b15      	ldr	r3, [pc, #84]	@ (8024a90 <DiagRoutine_RDBI_ReadSWData+0x6c>)
 8024a3a:	2205      	movs	r2, #5
 8024a3c:	701a      	strb	r2, [r3, #0]
	Dcm_TxData[1] = CanH_DiagArray[1] + 0x40;
 8024a3e:	4b15      	ldr	r3, [pc, #84]	@ (8024a94 <DiagRoutine_RDBI_ReadSWData+0x70>)
 8024a40:	785b      	ldrb	r3, [r3, #1]
 8024a42:	3340      	adds	r3, #64	@ 0x40
 8024a44:	b2da      	uxtb	r2, r3
 8024a46:	4b12      	ldr	r3, [pc, #72]	@ (8024a90 <DiagRoutine_RDBI_ReadSWData+0x6c>)
 8024a48:	705a      	strb	r2, [r3, #1]
	Dcm_TxData[2] = CanH_DiagArray[2];
 8024a4a:	4b12      	ldr	r3, [pc, #72]	@ (8024a94 <DiagRoutine_RDBI_ReadSWData+0x70>)
 8024a4c:	789a      	ldrb	r2, [r3, #2]
 8024a4e:	4b10      	ldr	r3, [pc, #64]	@ (8024a90 <DiagRoutine_RDBI_ReadSWData+0x6c>)
 8024a50:	709a      	strb	r2, [r3, #2]
	Dcm_TxData[3] = CanH_DiagArray[3];
 8024a52:	4b10      	ldr	r3, [pc, #64]	@ (8024a94 <DiagRoutine_RDBI_ReadSWData+0x70>)
 8024a54:	78da      	ldrb	r2, [r3, #3]
 8024a56:	4b0e      	ldr	r3, [pc, #56]	@ (8024a90 <DiagRoutine_RDBI_ReadSWData+0x6c>)
 8024a58:	70da      	strb	r2, [r3, #3]
	Dcm_TxData[4] = Dcm_SWVersion.FlashBootLoaderVersion;
 8024a5a:	4b0f      	ldr	r3, [pc, #60]	@ (8024a98 <DiagRoutine_RDBI_ReadSWData+0x74>)
 8024a5c:	785a      	ldrb	r2, [r3, #1]
 8024a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8024a90 <DiagRoutine_RDBI_ReadSWData+0x6c>)
 8024a60:	711a      	strb	r2, [r3, #4]
	Dcm_TxData[5] = Dcm_SWVersion.SoftwareVersion;
 8024a62:	4b0d      	ldr	r3, [pc, #52]	@ (8024a98 <DiagRoutine_RDBI_ReadSWData+0x74>)
 8024a64:	781a      	ldrb	r2, [r3, #0]
 8024a66:	4b0a      	ldr	r3, [pc, #40]	@ (8024a90 <DiagRoutine_RDBI_ReadSWData+0x6c>)
 8024a68:	715a      	strb	r2, [r3, #5]
	Dcm_TxData[6] = 0;
 8024a6a:	4b09      	ldr	r3, [pc, #36]	@ (8024a90 <DiagRoutine_RDBI_ReadSWData+0x6c>)
 8024a6c:	2200      	movs	r2, #0
 8024a6e:	719a      	strb	r2, [r3, #6]
	Dcm_TxData[7] = 0;
 8024a70:	4b07      	ldr	r3, [pc, #28]	@ (8024a90 <DiagRoutine_RDBI_ReadSWData+0x6c>)
 8024a72:	2200      	movs	r2, #0
 8024a74:	71da      	strb	r2, [r3, #7]
	HAL_CAN_AddTxMessage(&hcan1, &Dcm_TxHeader, Dcm_TxData, &Dcm_TxMailbox);
 8024a76:	4b09      	ldr	r3, [pc, #36]	@ (8024a9c <DiagRoutine_RDBI_ReadSWData+0x78>)
 8024a78:	4a05      	ldr	r2, [pc, #20]	@ (8024a90 <DiagRoutine_RDBI_ReadSWData+0x6c>)
 8024a7a:	4903      	ldr	r1, [pc, #12]	@ (8024a88 <DiagRoutine_RDBI_ReadSWData+0x64>)
 8024a7c:	4808      	ldr	r0, [pc, #32]	@ (8024aa0 <DiagRoutine_RDBI_ReadSWData+0x7c>)
 8024a7e:	f005 f9f9 	bl	8029e74 <HAL_CAN_AddTxMessage>
}
 8024a82:	bf00      	nop
 8024a84:	bd80      	pop	{r7, pc}
 8024a86:	bf00      	nop
 8024a88:	10000914 	.word	0x10000914
 8024a8c:	1000089c 	.word	0x1000089c
 8024a90:	1000092c 	.word	0x1000092c
 8024a94:	10000894 	.word	0x10000894
 8024a98:	20000000 	.word	0x20000000
 8024a9c:	10000934 	.word	0x10000934
 8024aa0:	200001a8 	.word	0x200001a8

08024aa4 <DiagRoutine_RDBI_ReadActiveDiagnosticSession>:
void DiagRoutine_RDBI_ReadActiveDiagnosticSession(void)
{
 8024aa4:	b580      	push	{r7, lr}
 8024aa6:	af00      	add	r7, sp, #0
	Dcm_TxHeader.DLC = CanH_DiagRxHeader.DLC;
 8024aa8:	4b19      	ldr	r3, [pc, #100]	@ (8024b10 <DiagRoutine_RDBI_ReadActiveDiagnosticSession+0x6c>)
 8024aaa:	691b      	ldr	r3, [r3, #16]
 8024aac:	4a19      	ldr	r2, [pc, #100]	@ (8024b14 <DiagRoutine_RDBI_ReadActiveDiagnosticSession+0x70>)
 8024aae:	6113      	str	r3, [r2, #16]
	Dcm_TxHeader.StdId = CanH_DiagRxHeader.StdId + 1;
 8024ab0:	4b17      	ldr	r3, [pc, #92]	@ (8024b10 <DiagRoutine_RDBI_ReadActiveDiagnosticSession+0x6c>)
 8024ab2:	681b      	ldr	r3, [r3, #0]
 8024ab4:	3301      	adds	r3, #1
 8024ab6:	4a17      	ldr	r2, [pc, #92]	@ (8024b14 <DiagRoutine_RDBI_ReadActiveDiagnosticSession+0x70>)
 8024ab8:	6013      	str	r3, [r2, #0]
	Dcm_TxData[0] = CanH_DiagRxHeader.DLC - 1;
 8024aba:	4b15      	ldr	r3, [pc, #84]	@ (8024b10 <DiagRoutine_RDBI_ReadActiveDiagnosticSession+0x6c>)
 8024abc:	691b      	ldr	r3, [r3, #16]
 8024abe:	b2db      	uxtb	r3, r3
 8024ac0:	3b01      	subs	r3, #1
 8024ac2:	b2da      	uxtb	r2, r3
 8024ac4:	4b14      	ldr	r3, [pc, #80]	@ (8024b18 <DiagRoutine_RDBI_ReadActiveDiagnosticSession+0x74>)
 8024ac6:	701a      	strb	r2, [r3, #0]
	Dcm_TxData[1] = CanH_DiagArray[1] + 0x40;
 8024ac8:	4b14      	ldr	r3, [pc, #80]	@ (8024b1c <DiagRoutine_RDBI_ReadActiveDiagnosticSession+0x78>)
 8024aca:	785b      	ldrb	r3, [r3, #1]
 8024acc:	3340      	adds	r3, #64	@ 0x40
 8024ace:	b2da      	uxtb	r2, r3
 8024ad0:	4b11      	ldr	r3, [pc, #68]	@ (8024b18 <DiagRoutine_RDBI_ReadActiveDiagnosticSession+0x74>)
 8024ad2:	705a      	strb	r2, [r3, #1]
	Dcm_TxData[2] = CanH_DiagArray[2];
 8024ad4:	4b11      	ldr	r3, [pc, #68]	@ (8024b1c <DiagRoutine_RDBI_ReadActiveDiagnosticSession+0x78>)
 8024ad6:	789a      	ldrb	r2, [r3, #2]
 8024ad8:	4b0f      	ldr	r3, [pc, #60]	@ (8024b18 <DiagRoutine_RDBI_ReadActiveDiagnosticSession+0x74>)
 8024ada:	709a      	strb	r2, [r3, #2]
	Dcm_TxData[3] = CanH_DiagArray[3];
 8024adc:	4b0f      	ldr	r3, [pc, #60]	@ (8024b1c <DiagRoutine_RDBI_ReadActiveDiagnosticSession+0x78>)
 8024ade:	78da      	ldrb	r2, [r3, #3]
 8024ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8024b18 <DiagRoutine_RDBI_ReadActiveDiagnosticSession+0x74>)
 8024ae2:	70da      	strb	r2, [r3, #3]
	Dcm_TxData[4] = CanH_DiagArray[4];
 8024ae4:	4b0d      	ldr	r3, [pc, #52]	@ (8024b1c <DiagRoutine_RDBI_ReadActiveDiagnosticSession+0x78>)
 8024ae6:	791a      	ldrb	r2, [r3, #4]
 8024ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8024b18 <DiagRoutine_RDBI_ReadActiveDiagnosticSession+0x74>)
 8024aea:	711a      	strb	r2, [r3, #4]
	Dcm_TxData[5] = Dcm_DiagnosticSession;
 8024aec:	4b0c      	ldr	r3, [pc, #48]	@ (8024b20 <DiagRoutine_RDBI_ReadActiveDiagnosticSession+0x7c>)
 8024aee:	781a      	ldrb	r2, [r3, #0]
 8024af0:	4b09      	ldr	r3, [pc, #36]	@ (8024b18 <DiagRoutine_RDBI_ReadActiveDiagnosticSession+0x74>)
 8024af2:	715a      	strb	r2, [r3, #5]
	Dcm_TxData[6] = 0;
 8024af4:	4b08      	ldr	r3, [pc, #32]	@ (8024b18 <DiagRoutine_RDBI_ReadActiveDiagnosticSession+0x74>)
 8024af6:	2200      	movs	r2, #0
 8024af8:	719a      	strb	r2, [r3, #6]
	Dcm_TxData[7] = 0;
 8024afa:	4b07      	ldr	r3, [pc, #28]	@ (8024b18 <DiagRoutine_RDBI_ReadActiveDiagnosticSession+0x74>)
 8024afc:	2200      	movs	r2, #0
 8024afe:	71da      	strb	r2, [r3, #7]
	HAL_CAN_AddTxMessage(&hcan1, &Dcm_TxHeader, Dcm_TxData, &Dcm_TxMailbox);
 8024b00:	4b08      	ldr	r3, [pc, #32]	@ (8024b24 <DiagRoutine_RDBI_ReadActiveDiagnosticSession+0x80>)
 8024b02:	4a05      	ldr	r2, [pc, #20]	@ (8024b18 <DiagRoutine_RDBI_ReadActiveDiagnosticSession+0x74>)
 8024b04:	4903      	ldr	r1, [pc, #12]	@ (8024b14 <DiagRoutine_RDBI_ReadActiveDiagnosticSession+0x70>)
 8024b06:	4808      	ldr	r0, [pc, #32]	@ (8024b28 <DiagRoutine_RDBI_ReadActiveDiagnosticSession+0x84>)
 8024b08:	f005 f9b4 	bl	8029e74 <HAL_CAN_AddTxMessage>
}
 8024b0c:	bf00      	nop
 8024b0e:	bd80      	pop	{r7, pc}
 8024b10:	1000089c 	.word	0x1000089c
 8024b14:	10000914 	.word	0x10000914
 8024b18:	1000092c 	.word	0x1000092c
 8024b1c:	10000894 	.word	0x10000894
 8024b20:	1000fc00 	.word	0x1000fc00
 8024b24:	10000934 	.word	0x10000934
 8024b28:	200001a8 	.word	0x200001a8

08024b2c <DiagRoutine_RDBI_ReadAliveTime>:
void DiagRoutine_RDBI_ReadAliveTime(void)
{
 8024b2c:	b580      	push	{r7, lr}
 8024b2e:	af00      	add	r7, sp, #0
	Dcm_TxHeader.DLC = CanH_DiagRxHeader.DLC;
 8024b30:	4b1d      	ldr	r3, [pc, #116]	@ (8024ba8 <DiagRoutine_RDBI_ReadAliveTime+0x7c>)
 8024b32:	691b      	ldr	r3, [r3, #16]
 8024b34:	4a1d      	ldr	r2, [pc, #116]	@ (8024bac <DiagRoutine_RDBI_ReadAliveTime+0x80>)
 8024b36:	6113      	str	r3, [r2, #16]
	Dcm_TxHeader.StdId = CanH_DiagRxHeader.StdId + 1;
 8024b38:	4b1b      	ldr	r3, [pc, #108]	@ (8024ba8 <DiagRoutine_RDBI_ReadAliveTime+0x7c>)
 8024b3a:	681b      	ldr	r3, [r3, #0]
 8024b3c:	3301      	adds	r3, #1
 8024b3e:	4a1b      	ldr	r2, [pc, #108]	@ (8024bac <DiagRoutine_RDBI_ReadAliveTime+0x80>)
 8024b40:	6013      	str	r3, [r2, #0]
	Dcm_TxData[0] = CanH_DiagRxHeader.DLC - 1;
 8024b42:	4b19      	ldr	r3, [pc, #100]	@ (8024ba8 <DiagRoutine_RDBI_ReadAliveTime+0x7c>)
 8024b44:	691b      	ldr	r3, [r3, #16]
 8024b46:	b2db      	uxtb	r3, r3
 8024b48:	3b01      	subs	r3, #1
 8024b4a:	b2da      	uxtb	r2, r3
 8024b4c:	4b18      	ldr	r3, [pc, #96]	@ (8024bb0 <DiagRoutine_RDBI_ReadAliveTime+0x84>)
 8024b4e:	701a      	strb	r2, [r3, #0]
	Dcm_TxData[1] = CanH_DiagArray[1] + 0x40;
 8024b50:	4b18      	ldr	r3, [pc, #96]	@ (8024bb4 <DiagRoutine_RDBI_ReadAliveTime+0x88>)
 8024b52:	785b      	ldrb	r3, [r3, #1]
 8024b54:	3340      	adds	r3, #64	@ 0x40
 8024b56:	b2da      	uxtb	r2, r3
 8024b58:	4b15      	ldr	r3, [pc, #84]	@ (8024bb0 <DiagRoutine_RDBI_ReadAliveTime+0x84>)
 8024b5a:	705a      	strb	r2, [r3, #1]
	Dcm_TxData[2] = CanH_DiagArray[2];
 8024b5c:	4b15      	ldr	r3, [pc, #84]	@ (8024bb4 <DiagRoutine_RDBI_ReadAliveTime+0x88>)
 8024b5e:	789a      	ldrb	r2, [r3, #2]
 8024b60:	4b13      	ldr	r3, [pc, #76]	@ (8024bb0 <DiagRoutine_RDBI_ReadAliveTime+0x84>)
 8024b62:	709a      	strb	r2, [r3, #2]
	Dcm_TxData[3] = CanH_DiagArray[3];
 8024b64:	4b13      	ldr	r3, [pc, #76]	@ (8024bb4 <DiagRoutine_RDBI_ReadAliveTime+0x88>)
 8024b66:	78da      	ldrb	r2, [r3, #3]
 8024b68:	4b11      	ldr	r3, [pc, #68]	@ (8024bb0 <DiagRoutine_RDBI_ReadAliveTime+0x84>)
 8024b6a:	70da      	strb	r2, [r3, #3]
	Dcm_TxData[4] = CanH_DiagArray[4];
 8024b6c:	4b11      	ldr	r3, [pc, #68]	@ (8024bb4 <DiagRoutine_RDBI_ReadAliveTime+0x88>)
 8024b6e:	791a      	ldrb	r2, [r3, #4]
 8024b70:	4b0f      	ldr	r3, [pc, #60]	@ (8024bb0 <DiagRoutine_RDBI_ReadAliveTime+0x84>)
 8024b72:	711a      	strb	r2, [r3, #4]
	Dcm_TxData[5] = (uint8)(Dcm_AliveCounter * 5 / 60000);
 8024b74:	4b10      	ldr	r3, [pc, #64]	@ (8024bb8 <DiagRoutine_RDBI_ReadAliveTime+0x8c>)
 8024b76:	681a      	ldr	r2, [r3, #0]
 8024b78:	4613      	mov	r3, r2
 8024b7a:	009b      	lsls	r3, r3, #2
 8024b7c:	4413      	add	r3, r2
 8024b7e:	4a0f      	ldr	r2, [pc, #60]	@ (8024bbc <DiagRoutine_RDBI_ReadAliveTime+0x90>)
 8024b80:	fba2 2303 	umull	r2, r3, r2, r3
 8024b84:	0b9b      	lsrs	r3, r3, #14
 8024b86:	b2da      	uxtb	r2, r3
 8024b88:	4b09      	ldr	r3, [pc, #36]	@ (8024bb0 <DiagRoutine_RDBI_ReadAliveTime+0x84>)
 8024b8a:	715a      	strb	r2, [r3, #5]
	Dcm_TxData[6] = 0;
 8024b8c:	4b08      	ldr	r3, [pc, #32]	@ (8024bb0 <DiagRoutine_RDBI_ReadAliveTime+0x84>)
 8024b8e:	2200      	movs	r2, #0
 8024b90:	719a      	strb	r2, [r3, #6]
	Dcm_TxData[7] = 0;
 8024b92:	4b07      	ldr	r3, [pc, #28]	@ (8024bb0 <DiagRoutine_RDBI_ReadAliveTime+0x84>)
 8024b94:	2200      	movs	r2, #0
 8024b96:	71da      	strb	r2, [r3, #7]
	HAL_CAN_AddTxMessage(&hcan1, &Dcm_TxHeader, Dcm_TxData, &Dcm_TxMailbox);
 8024b98:	4b09      	ldr	r3, [pc, #36]	@ (8024bc0 <DiagRoutine_RDBI_ReadAliveTime+0x94>)
 8024b9a:	4a05      	ldr	r2, [pc, #20]	@ (8024bb0 <DiagRoutine_RDBI_ReadAliveTime+0x84>)
 8024b9c:	4903      	ldr	r1, [pc, #12]	@ (8024bac <DiagRoutine_RDBI_ReadAliveTime+0x80>)
 8024b9e:	4809      	ldr	r0, [pc, #36]	@ (8024bc4 <DiagRoutine_RDBI_ReadAliveTime+0x98>)
 8024ba0:	f005 f968 	bl	8029e74 <HAL_CAN_AddTxMessage>
}
 8024ba4:	bf00      	nop
 8024ba6:	bd80      	pop	{r7, pc}
 8024ba8:	1000089c 	.word	0x1000089c
 8024bac:	10000914 	.word	0x10000914
 8024bb0:	1000092c 	.word	0x1000092c
 8024bb4:	10000894 	.word	0x10000894
 8024bb8:	1000fc04 	.word	0x1000fc04
 8024bbc:	45e7b273 	.word	0x45e7b273
 8024bc0:	10000934 	.word	0x10000934
 8024bc4:	200001a8 	.word	0x200001a8

08024bc8 <DiagRoutine_CC_CommunicationControl>:
void DiagRoutine_CC_CommunicationControl(void)
{
 8024bc8:	b580      	push	{r7, lr}
 8024bca:	af00      	add	r7, sp, #0
	Dcm_TxHeader.DLC = CanH_DiagRxHeader.DLC;
 8024bcc:	4b16      	ldr	r3, [pc, #88]	@ (8024c28 <DiagRoutine_CC_CommunicationControl+0x60>)
 8024bce:	691b      	ldr	r3, [r3, #16]
 8024bd0:	4a16      	ldr	r2, [pc, #88]	@ (8024c2c <DiagRoutine_CC_CommunicationControl+0x64>)
 8024bd2:	6113      	str	r3, [r2, #16]
	Dcm_TxHeader.StdId = CanH_DiagRxHeader.StdId + 1;
 8024bd4:	4b14      	ldr	r3, [pc, #80]	@ (8024c28 <DiagRoutine_CC_CommunicationControl+0x60>)
 8024bd6:	681b      	ldr	r3, [r3, #0]
 8024bd8:	3301      	adds	r3, #1
 8024bda:	4a14      	ldr	r2, [pc, #80]	@ (8024c2c <DiagRoutine_CC_CommunicationControl+0x64>)
 8024bdc:	6013      	str	r3, [r2, #0]
	Dcm_TxData[0] = 0x02;
 8024bde:	4b14      	ldr	r3, [pc, #80]	@ (8024c30 <DiagRoutine_CC_CommunicationControl+0x68>)
 8024be0:	2202      	movs	r2, #2
 8024be2:	701a      	strb	r2, [r3, #0]
	Dcm_TxData[1] = CanH_DiagArray[1] + 0x40;
 8024be4:	4b13      	ldr	r3, [pc, #76]	@ (8024c34 <DiagRoutine_CC_CommunicationControl+0x6c>)
 8024be6:	785b      	ldrb	r3, [r3, #1]
 8024be8:	3340      	adds	r3, #64	@ 0x40
 8024bea:	b2da      	uxtb	r2, r3
 8024bec:	4b10      	ldr	r3, [pc, #64]	@ (8024c30 <DiagRoutine_CC_CommunicationControl+0x68>)
 8024bee:	705a      	strb	r2, [r3, #1]
	Dcm_TxData[2] = CanH_DiagArray[2];
 8024bf0:	4b10      	ldr	r3, [pc, #64]	@ (8024c34 <DiagRoutine_CC_CommunicationControl+0x6c>)
 8024bf2:	789a      	ldrb	r2, [r3, #2]
 8024bf4:	4b0e      	ldr	r3, [pc, #56]	@ (8024c30 <DiagRoutine_CC_CommunicationControl+0x68>)
 8024bf6:	709a      	strb	r2, [r3, #2]
	if(CanH_DiagArray[2] == 0) CanH_CommunicationState = FULL_COMMUNICATION;
 8024bf8:	4b0e      	ldr	r3, [pc, #56]	@ (8024c34 <DiagRoutine_CC_CommunicationControl+0x6c>)
 8024bfa:	789b      	ldrb	r3, [r3, #2]
 8024bfc:	2b00      	cmp	r3, #0
 8024bfe:	d103      	bne.n	8024c08 <DiagRoutine_CC_CommunicationControl+0x40>
 8024c00:	4b0d      	ldr	r3, [pc, #52]	@ (8024c38 <DiagRoutine_CC_CommunicationControl+0x70>)
 8024c02:	2202      	movs	r2, #2
 8024c04:	701a      	strb	r2, [r3, #0]
 8024c06:	e006      	b.n	8024c16 <DiagRoutine_CC_CommunicationControl+0x4e>
	else if(CanH_DiagArray[2] == 1) CanH_CommunicationState = CC_ACTIVE;
 8024c08:	4b0a      	ldr	r3, [pc, #40]	@ (8024c34 <DiagRoutine_CC_CommunicationControl+0x6c>)
 8024c0a:	789b      	ldrb	r3, [r3, #2]
 8024c0c:	2b01      	cmp	r3, #1
 8024c0e:	d102      	bne.n	8024c16 <DiagRoutine_CC_CommunicationControl+0x4e>
 8024c10:	4b09      	ldr	r3, [pc, #36]	@ (8024c38 <DiagRoutine_CC_CommunicationControl+0x70>)
 8024c12:	2204      	movs	r2, #4
 8024c14:	701a      	strb	r2, [r3, #0]
	else
	{
		/* Do nothing. */
	}
	HAL_CAN_AddTxMessage(&hcan1, &Dcm_TxHeader, Dcm_TxData, &Dcm_TxMailbox);
 8024c16:	4b09      	ldr	r3, [pc, #36]	@ (8024c3c <DiagRoutine_CC_CommunicationControl+0x74>)
 8024c18:	4a05      	ldr	r2, [pc, #20]	@ (8024c30 <DiagRoutine_CC_CommunicationControl+0x68>)
 8024c1a:	4904      	ldr	r1, [pc, #16]	@ (8024c2c <DiagRoutine_CC_CommunicationControl+0x64>)
 8024c1c:	4808      	ldr	r0, [pc, #32]	@ (8024c40 <DiagRoutine_CC_CommunicationControl+0x78>)
 8024c1e:	f005 f929 	bl	8029e74 <HAL_CAN_AddTxMessage>
}
 8024c22:	bf00      	nop
 8024c24:	bd80      	pop	{r7, pc}
 8024c26:	bf00      	nop
 8024c28:	1000089c 	.word	0x1000089c
 8024c2c:	10000914 	.word	0x10000914
 8024c30:	1000092c 	.word	0x1000092c
 8024c34:	10000894 	.word	0x10000894
 8024c38:	10000874 	.word	0x10000874
 8024c3c:	10000934 	.word	0x10000934
 8024c40:	200001a8 	.word	0x200001a8

08024c44 <DiagRoutine_CDTCS_ControlDTCSetting>:
void DiagRoutine_CDTCS_ControlDTCSetting(void)
{
 8024c44:	b580      	push	{r7, lr}
 8024c46:	af00      	add	r7, sp, #0
	Dcm_TxHeader.DLC = CanH_DiagRxHeader.DLC;
 8024c48:	4b16      	ldr	r3, [pc, #88]	@ (8024ca4 <DiagRoutine_CDTCS_ControlDTCSetting+0x60>)
 8024c4a:	691b      	ldr	r3, [r3, #16]
 8024c4c:	4a16      	ldr	r2, [pc, #88]	@ (8024ca8 <DiagRoutine_CDTCS_ControlDTCSetting+0x64>)
 8024c4e:	6113      	str	r3, [r2, #16]
	Dcm_TxHeader.StdId = CanH_DiagRxHeader.StdId + 1;
 8024c50:	4b14      	ldr	r3, [pc, #80]	@ (8024ca4 <DiagRoutine_CDTCS_ControlDTCSetting+0x60>)
 8024c52:	681b      	ldr	r3, [r3, #0]
 8024c54:	3301      	adds	r3, #1
 8024c56:	4a14      	ldr	r2, [pc, #80]	@ (8024ca8 <DiagRoutine_CDTCS_ControlDTCSetting+0x64>)
 8024c58:	6013      	str	r3, [r2, #0]
	Dcm_TxData[0] = CanH_DiagArray[0];
 8024c5a:	4b14      	ldr	r3, [pc, #80]	@ (8024cac <DiagRoutine_CDTCS_ControlDTCSetting+0x68>)
 8024c5c:	781a      	ldrb	r2, [r3, #0]
 8024c5e:	4b14      	ldr	r3, [pc, #80]	@ (8024cb0 <DiagRoutine_CDTCS_ControlDTCSetting+0x6c>)
 8024c60:	701a      	strb	r2, [r3, #0]
	Dcm_TxData[1] = CanH_DiagArray[1] + 0x40;
 8024c62:	4b12      	ldr	r3, [pc, #72]	@ (8024cac <DiagRoutine_CDTCS_ControlDTCSetting+0x68>)
 8024c64:	785b      	ldrb	r3, [r3, #1]
 8024c66:	3340      	adds	r3, #64	@ 0x40
 8024c68:	b2da      	uxtb	r2, r3
 8024c6a:	4b11      	ldr	r3, [pc, #68]	@ (8024cb0 <DiagRoutine_CDTCS_ControlDTCSetting+0x6c>)
 8024c6c:	705a      	strb	r2, [r3, #1]
	Dcm_TxData[2] = CanH_DiagArray[2];
 8024c6e:	4b0f      	ldr	r3, [pc, #60]	@ (8024cac <DiagRoutine_CDTCS_ControlDTCSetting+0x68>)
 8024c70:	789a      	ldrb	r2, [r3, #2]
 8024c72:	4b0f      	ldr	r3, [pc, #60]	@ (8024cb0 <DiagRoutine_CDTCS_ControlDTCSetting+0x6c>)
 8024c74:	709a      	strb	r2, [r3, #2]
	if(CanH_DiagArray[2] == 1) Dem_DTCSettingDeactivated = 0;
 8024c76:	4b0d      	ldr	r3, [pc, #52]	@ (8024cac <DiagRoutine_CDTCS_ControlDTCSetting+0x68>)
 8024c78:	789b      	ldrb	r3, [r3, #2]
 8024c7a:	2b01      	cmp	r3, #1
 8024c7c:	d103      	bne.n	8024c86 <DiagRoutine_CDTCS_ControlDTCSetting+0x42>
 8024c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8024cb4 <DiagRoutine_CDTCS_ControlDTCSetting+0x70>)
 8024c80:	2200      	movs	r2, #0
 8024c82:	701a      	strb	r2, [r3, #0]
 8024c84:	e006      	b.n	8024c94 <DiagRoutine_CDTCS_ControlDTCSetting+0x50>
	else if(CanH_DiagArray[2] == 2) Dem_DTCSettingDeactivated = 1;
 8024c86:	4b09      	ldr	r3, [pc, #36]	@ (8024cac <DiagRoutine_CDTCS_ControlDTCSetting+0x68>)
 8024c88:	789b      	ldrb	r3, [r3, #2]
 8024c8a:	2b02      	cmp	r3, #2
 8024c8c:	d102      	bne.n	8024c94 <DiagRoutine_CDTCS_ControlDTCSetting+0x50>
 8024c8e:	4b09      	ldr	r3, [pc, #36]	@ (8024cb4 <DiagRoutine_CDTCS_ControlDTCSetting+0x70>)
 8024c90:	2201      	movs	r2, #1
 8024c92:	701a      	strb	r2, [r3, #0]
	else
	{
		/* Do nothing. */
	}
	HAL_CAN_AddTxMessage(&hcan1, &Dcm_TxHeader, Dcm_TxData, &Dcm_TxMailbox);
 8024c94:	4b08      	ldr	r3, [pc, #32]	@ (8024cb8 <DiagRoutine_CDTCS_ControlDTCSetting+0x74>)
 8024c96:	4a06      	ldr	r2, [pc, #24]	@ (8024cb0 <DiagRoutine_CDTCS_ControlDTCSetting+0x6c>)
 8024c98:	4903      	ldr	r1, [pc, #12]	@ (8024ca8 <DiagRoutine_CDTCS_ControlDTCSetting+0x64>)
 8024c9a:	4808      	ldr	r0, [pc, #32]	@ (8024cbc <DiagRoutine_CDTCS_ControlDTCSetting+0x78>)
 8024c9c:	f005 f8ea 	bl	8029e74 <HAL_CAN_AddTxMessage>
}
 8024ca0:	bf00      	nop
 8024ca2:	bd80      	pop	{r7, pc}
 8024ca4:	1000089c 	.word	0x1000089c
 8024ca8:	10000914 	.word	0x10000914
 8024cac:	10000894 	.word	0x10000894
 8024cb0:	1000092c 	.word	0x1000092c
 8024cb4:	10000aa4 	.word	0x10000aa4
 8024cb8:	10000934 	.word	0x10000934
 8024cbc:	200001a8 	.word	0x200001a8

08024cc0 <DiagRoutine_RC_DisplaySelfTest>:
void DiagRoutine_RC_DisplaySelfTest(void)
{
 8024cc0:	b580      	push	{r7, lr}
 8024cc2:	af00      	add	r7, sp, #0
	Dcm_TxHeader.DLC = 5;
 8024cc4:	4b14      	ldr	r3, [pc, #80]	@ (8024d18 <DiagRoutine_RC_DisplaySelfTest+0x58>)
 8024cc6:	2205      	movs	r2, #5
 8024cc8:	611a      	str	r2, [r3, #16]
	Dcm_TxHeader.StdId = 0x705;
 8024cca:	4b13      	ldr	r3, [pc, #76]	@ (8024d18 <DiagRoutine_RC_DisplaySelfTest+0x58>)
 8024ccc:	f240 7205 	movw	r2, #1797	@ 0x705
 8024cd0:	601a      	str	r2, [r3, #0]
	Dcm_TxData[0] = 4;
 8024cd2:	4b12      	ldr	r3, [pc, #72]	@ (8024d1c <DiagRoutine_RC_DisplaySelfTest+0x5c>)
 8024cd4:	2204      	movs	r2, #4
 8024cd6:	701a      	strb	r2, [r3, #0]
	Dcm_TxData[1] = 0x71;
 8024cd8:	4b10      	ldr	r3, [pc, #64]	@ (8024d1c <DiagRoutine_RC_DisplaySelfTest+0x5c>)
 8024cda:	2271      	movs	r2, #113	@ 0x71
 8024cdc:	705a      	strb	r2, [r3, #1]
	Dcm_TxData[2] = 0x01;
 8024cde:	4b0f      	ldr	r3, [pc, #60]	@ (8024d1c <DiagRoutine_RC_DisplaySelfTest+0x5c>)
 8024ce0:	2201      	movs	r2, #1
 8024ce2:	709a      	strb	r2, [r3, #2]
	Dcm_TxData[3] = 0x3E;
 8024ce4:	4b0d      	ldr	r3, [pc, #52]	@ (8024d1c <DiagRoutine_RC_DisplaySelfTest+0x5c>)
 8024ce6:	223e      	movs	r2, #62	@ 0x3e
 8024ce8:	70da      	strb	r2, [r3, #3]
	Dcm_TxData[4] =	0x3E;
 8024cea:	4b0c      	ldr	r3, [pc, #48]	@ (8024d1c <DiagRoutine_RC_DisplaySelfTest+0x5c>)
 8024cec:	223e      	movs	r2, #62	@ 0x3e
 8024cee:	711a      	strb	r2, [r3, #4]
	Dcm_TxData[5] = 0;
 8024cf0:	4b0a      	ldr	r3, [pc, #40]	@ (8024d1c <DiagRoutine_RC_DisplaySelfTest+0x5c>)
 8024cf2:	2200      	movs	r2, #0
 8024cf4:	715a      	strb	r2, [r3, #5]
	Dcm_TxData[6] = 0;
 8024cf6:	4b09      	ldr	r3, [pc, #36]	@ (8024d1c <DiagRoutine_RC_DisplaySelfTest+0x5c>)
 8024cf8:	2200      	movs	r2, #0
 8024cfa:	719a      	strb	r2, [r3, #6]
	Dcm_TxData[7] = 0;
 8024cfc:	4b07      	ldr	r3, [pc, #28]	@ (8024d1c <DiagRoutine_RC_DisplaySelfTest+0x5c>)
 8024cfe:	2200      	movs	r2, #0
 8024d00:	71da      	strb	r2, [r3, #7]
	DigitalCluster_IsSelfTestRequested = 1;
 8024d02:	4b07      	ldr	r3, [pc, #28]	@ (8024d20 <DiagRoutine_RC_DisplaySelfTest+0x60>)
 8024d04:	2201      	movs	r2, #1
 8024d06:	701a      	strb	r2, [r3, #0]
	HAL_CAN_AddTxMessage(&hcan1, &Dcm_TxHeader, Dcm_TxData, &Dcm_TxMailbox);
 8024d08:	4b06      	ldr	r3, [pc, #24]	@ (8024d24 <DiagRoutine_RC_DisplaySelfTest+0x64>)
 8024d0a:	4a04      	ldr	r2, [pc, #16]	@ (8024d1c <DiagRoutine_RC_DisplaySelfTest+0x5c>)
 8024d0c:	4902      	ldr	r1, [pc, #8]	@ (8024d18 <DiagRoutine_RC_DisplaySelfTest+0x58>)
 8024d0e:	4806      	ldr	r0, [pc, #24]	@ (8024d28 <DiagRoutine_RC_DisplaySelfTest+0x68>)
 8024d10:	f005 f8b0 	bl	8029e74 <HAL_CAN_AddTxMessage>
}
 8024d14:	bf00      	nop
 8024d16:	bd80      	pop	{r7, pc}
 8024d18:	10000914 	.word	0x10000914
 8024d1c:	1000092c 	.word	0x1000092c
 8024d20:	10000728 	.word	0x10000728
 8024d24:	10000934 	.word	0x10000934
 8024d28:	200001a8 	.word	0x200001a8

08024d2c <DiagRoutine_RC_CameraDisplay>:
void DiagRoutine_RC_CameraDisplay(void)
{
 8024d2c:	b580      	push	{r7, lr}
 8024d2e:	af00      	add	r7, sp, #0
	Dcm_TxHeader.DLC = 5;
 8024d30:	4b17      	ldr	r3, [pc, #92]	@ (8024d90 <DiagRoutine_RC_CameraDisplay+0x64>)
 8024d32:	2205      	movs	r2, #5
 8024d34:	611a      	str	r2, [r3, #16]
	Dcm_TxHeader.StdId = 0x705;
 8024d36:	4b16      	ldr	r3, [pc, #88]	@ (8024d90 <DiagRoutine_RC_CameraDisplay+0x64>)
 8024d38:	f240 7205 	movw	r2, #1797	@ 0x705
 8024d3c:	601a      	str	r2, [r3, #0]
	Dcm_TxData[0] = 4;
 8024d3e:	4b15      	ldr	r3, [pc, #84]	@ (8024d94 <DiagRoutine_RC_CameraDisplay+0x68>)
 8024d40:	2204      	movs	r2, #4
 8024d42:	701a      	strb	r2, [r3, #0]
	Dcm_TxData[1] = 0x71;
 8024d44:	4b13      	ldr	r3, [pc, #76]	@ (8024d94 <DiagRoutine_RC_CameraDisplay+0x68>)
 8024d46:	2271      	movs	r2, #113	@ 0x71
 8024d48:	705a      	strb	r2, [r3, #1]
	Dcm_TxData[2] = 0x01;
 8024d4a:	4b12      	ldr	r3, [pc, #72]	@ (8024d94 <DiagRoutine_RC_CameraDisplay+0x68>)
 8024d4c:	2201      	movs	r2, #1
 8024d4e:	709a      	strb	r2, [r3, #2]
	Dcm_TxData[3] = 0x3F;
 8024d50:	4b10      	ldr	r3, [pc, #64]	@ (8024d94 <DiagRoutine_RC_CameraDisplay+0x68>)
 8024d52:	223f      	movs	r2, #63	@ 0x3f
 8024d54:	70da      	strb	r2, [r3, #3]
	Dcm_TxData[4] =	0x3F;
 8024d56:	4b0f      	ldr	r3, [pc, #60]	@ (8024d94 <DiagRoutine_RC_CameraDisplay+0x68>)
 8024d58:	223f      	movs	r2, #63	@ 0x3f
 8024d5a:	711a      	strb	r2, [r3, #4]
	Dcm_TxData[5] = 0;
 8024d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8024d94 <DiagRoutine_RC_CameraDisplay+0x68>)
 8024d5e:	2200      	movs	r2, #0
 8024d60:	715a      	strb	r2, [r3, #5]
	Dcm_TxData[6] = 0;
 8024d62:	4b0c      	ldr	r3, [pc, #48]	@ (8024d94 <DiagRoutine_RC_CameraDisplay+0x68>)
 8024d64:	2200      	movs	r2, #0
 8024d66:	719a      	strb	r2, [r3, #6]
	Dcm_TxData[7] = 0;
 8024d68:	4b0a      	ldr	r3, [pc, #40]	@ (8024d94 <DiagRoutine_RC_CameraDisplay+0x68>)
 8024d6a:	2200      	movs	r2, #0
 8024d6c:	71da      	strb	r2, [r3, #7]
	RevCam_RxSig_ReverseCameraRequest = CanH_DiagArray[5];
 8024d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8024d98 <DiagRoutine_RC_CameraDisplay+0x6c>)
 8024d70:	795a      	ldrb	r2, [r3, #5]
 8024d72:	4b0a      	ldr	r3, [pc, #40]	@ (8024d9c <DiagRoutine_RC_CameraDisplay+0x70>)
 8024d74:	701a      	strb	r2, [r3, #0]
	DigitalCluster_RxSig_ReverseCameraRequest = CanH_DiagArray[5];
 8024d76:	4b08      	ldr	r3, [pc, #32]	@ (8024d98 <DiagRoutine_RC_CameraDisplay+0x6c>)
 8024d78:	795a      	ldrb	r2, [r3, #5]
 8024d7a:	4b09      	ldr	r3, [pc, #36]	@ (8024da0 <DiagRoutine_RC_CameraDisplay+0x74>)
 8024d7c:	701a      	strb	r2, [r3, #0]
	HAL_CAN_AddTxMessage(&hcan1, &Dcm_TxHeader, Dcm_TxData, &Dcm_TxMailbox);
 8024d7e:	4b09      	ldr	r3, [pc, #36]	@ (8024da4 <DiagRoutine_RC_CameraDisplay+0x78>)
 8024d80:	4a04      	ldr	r2, [pc, #16]	@ (8024d94 <DiagRoutine_RC_CameraDisplay+0x68>)
 8024d82:	4903      	ldr	r1, [pc, #12]	@ (8024d90 <DiagRoutine_RC_CameraDisplay+0x64>)
 8024d84:	4808      	ldr	r0, [pc, #32]	@ (8024da8 <DiagRoutine_RC_CameraDisplay+0x7c>)
 8024d86:	f005 f875 	bl	8029e74 <HAL_CAN_AddTxMessage>
}
 8024d8a:	bf00      	nop
 8024d8c:	bd80      	pop	{r7, pc}
 8024d8e:	bf00      	nop
 8024d90:	10000914 	.word	0x10000914
 8024d94:	1000092c 	.word	0x1000092c
 8024d98:	10000894 	.word	0x10000894
 8024d9c:	100007a4 	.word	0x100007a4
 8024da0:	1000070c 	.word	0x1000070c
 8024da4:	10000934 	.word	0x10000934
 8024da8:	200001a8 	.word	0x200001a8

08024dac <Dem_ClearDtc>:
void Dem_MainFunction(void);
void Dem_SetDtc(uint8 IDPrimary, uint32 Reason, uint8 Status);
void Dem_ClearDtc(void);

void Dem_ClearDtc(void)
{
 8024dac:	b480      	push	{r7}
 8024dae:	b083      	sub	sp, #12
 8024db0:	af00      	add	r7, sp, #0
	for(uint8 i = 0; i < 21; i++)
 8024db2:	2300      	movs	r3, #0
 8024db4:	71fb      	strb	r3, [r7, #7]
 8024db6:	e0a5      	b.n	8024f04 <Dem_ClearDtc+0x158>
	{
		CanH_ErrArr[i] = 0;
 8024db8:	79fb      	ldrb	r3, [r7, #7]
 8024dba:	4a58      	ldr	r2, [pc, #352]	@ (8024f1c <Dem_ClearDtc+0x170>)
 8024dbc:	2100      	movs	r1, #0
 8024dbe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if(i < 7)
 8024dc2:	79fb      	ldrb	r3, [r7, #7]
 8024dc4:	2b06      	cmp	r3, #6
 8024dc6:	d80e      	bhi.n	8024de6 <Dem_ClearDtc+0x3a>
		{
			Ain_DmaErrArr[i] = 0;
 8024dc8:	79fb      	ldrb	r3, [r7, #7]
 8024dca:	4a55      	ldr	r2, [pc, #340]	@ (8024f20 <Dem_ClearDtc+0x174>)
 8024dcc:	2100      	movs	r1, #0
 8024dce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			DcmiH_DmaErrArr[i] = 0;
 8024dd2:	79fb      	ldrb	r3, [r7, #7]
 8024dd4:	4a53      	ldr	r2, [pc, #332]	@ (8024f24 <Dem_ClearDtc+0x178>)
 8024dd6:	2100      	movs	r1, #0
 8024dd8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			FsmcH_DmaErrArr[i] = 0;
 8024ddc:	79fb      	ldrb	r3, [r7, #7]
 8024dde:	4a52      	ldr	r2, [pc, #328]	@ (8024f28 <Dem_ClearDtc+0x17c>)
 8024de0:	2100      	movs	r1, #0
 8024de2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
		else
		{
			/* Do nothing. */
		}
		if (i < 4) DcmiH_ErrArr[i] = 0;
 8024de6:	79fb      	ldrb	r3, [r7, #7]
 8024de8:	2b03      	cmp	r3, #3
 8024dea:	d804      	bhi.n	8024df6 <Dem_ClearDtc+0x4a>
 8024dec:	79fb      	ldrb	r3, [r7, #7]
 8024dee:	4a4f      	ldr	r2, [pc, #316]	@ (8024f2c <Dem_ClearDtc+0x180>)
 8024df0:	2100      	movs	r1, #0
 8024df2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		else
		{
			/* Do nothing. */
		}
		if(i < 3) Ain_ErrArr[i] = 0;
 8024df6:	79fb      	ldrb	r3, [r7, #7]
 8024df8:	2b02      	cmp	r3, #2
 8024dfa:	d804      	bhi.n	8024e06 <Dem_ClearDtc+0x5a>
 8024dfc:	79fb      	ldrb	r3, [r7, #7]
 8024dfe:	4a4c      	ldr	r2, [pc, #304]	@ (8024f30 <Dem_ClearDtc+0x184>)
 8024e00:	2100      	movs	r1, #0
 8024e02:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		else
		{
			/* Do nothing. */
		}
		if(i < 9) I2cH_ErrArr[i] = 0;
 8024e06:	79fb      	ldrb	r3, [r7, #7]
 8024e08:	2b08      	cmp	r3, #8
 8024e0a:	d804      	bhi.n	8024e16 <Dem_ClearDtc+0x6a>
 8024e0c:	79fb      	ldrb	r3, [r7, #7]
 8024e0e:	4a49      	ldr	r2, [pc, #292]	@ (8024f34 <Dem_ClearDtc+0x188>)
 8024e10:	2100      	movs	r1, #0
 8024e12:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		else
		{
			/* Do nothing. */
		}
		if(i < 5)
 8024e16:	79fb      	ldrb	r3, [r7, #7]
 8024e18:	2b04      	cmp	r3, #4
 8024e1a:	d870      	bhi.n	8024efe <Dem_ClearDtc+0x152>
		{
			Dem_DTCArray[i].counter = 0;
 8024e1c:	79fa      	ldrb	r2, [r7, #7]
 8024e1e:	4946      	ldr	r1, [pc, #280]	@ (8024f38 <Dem_ClearDtc+0x18c>)
 8024e20:	4613      	mov	r3, r2
 8024e22:	009b      	lsls	r3, r3, #2
 8024e24:	4413      	add	r3, r2
 8024e26:	00db      	lsls	r3, r3, #3
 8024e28:	440b      	add	r3, r1
 8024e2a:	2200      	movs	r2, #0
 8024e2c:	601a      	str	r2, [r3, #0]
			Dem_DTCArray[i].isActiveNow = 0;
 8024e2e:	79fa      	ldrb	r2, [r7, #7]
 8024e30:	4941      	ldr	r1, [pc, #260]	@ (8024f38 <Dem_ClearDtc+0x18c>)
 8024e32:	4613      	mov	r3, r2
 8024e34:	009b      	lsls	r3, r3, #2
 8024e36:	4413      	add	r3, r2
 8024e38:	00db      	lsls	r3, r3, #3
 8024e3a:	440b      	add	r3, r1
 8024e3c:	3304      	adds	r3, #4
 8024e3e:	2200      	movs	r2, #0
 8024e40:	601a      	str	r2, [r3, #0]
			for(uint8 j = 0; j < 3; j++)
 8024e42:	2300      	movs	r3, #0
 8024e44:	71bb      	strb	r3, [r7, #6]
 8024e46:	e057      	b.n	8024ef8 <Dem_ClearDtc+0x14c>
			{
				Dem_DTCArray[i].GearFF[i] = 0;
 8024e48:	79fa      	ldrb	r2, [r7, #7]
 8024e4a:	79f9      	ldrb	r1, [r7, #7]
 8024e4c:	483a      	ldr	r0, [pc, #232]	@ (8024f38 <Dem_ClearDtc+0x18c>)
 8024e4e:	4613      	mov	r3, r2
 8024e50:	009b      	lsls	r3, r3, #2
 8024e52:	4413      	add	r3, r2
 8024e54:	00db      	lsls	r3, r3, #3
 8024e56:	4403      	add	r3, r0
 8024e58:	440b      	add	r3, r1
 8024e5a:	3317      	adds	r3, #23
 8024e5c:	2200      	movs	r2, #0
 8024e5e:	701a      	strb	r2, [r3, #0]
				Dem_DTCArray[i].IgnFF[i] = 0;
 8024e60:	79fa      	ldrb	r2, [r7, #7]
 8024e62:	79f9      	ldrb	r1, [r7, #7]
 8024e64:	4834      	ldr	r0, [pc, #208]	@ (8024f38 <Dem_ClearDtc+0x18c>)
 8024e66:	4613      	mov	r3, r2
 8024e68:	009b      	lsls	r3, r3, #2
 8024e6a:	4413      	add	r3, r2
 8024e6c:	00db      	lsls	r3, r3, #3
 8024e6e:	4403      	add	r3, r0
 8024e70:	440b      	add	r3, r1
 8024e72:	3314      	adds	r3, #20
 8024e74:	2200      	movs	r2, #0
 8024e76:	701a      	strb	r2, [r3, #0]
				Dem_DTCArray[i].RpmFF[i] = 0;
 8024e78:	79fa      	ldrb	r2, [r7, #7]
 8024e7a:	79f9      	ldrb	r1, [r7, #7]
 8024e7c:	482e      	ldr	r0, [pc, #184]	@ (8024f38 <Dem_ClearDtc+0x18c>)
 8024e7e:	4613      	mov	r3, r2
 8024e80:	009b      	lsls	r3, r3, #2
 8024e82:	4413      	add	r3, r2
 8024e84:	00db      	lsls	r3, r3, #3
 8024e86:	4403      	add	r3, r0
 8024e88:	440b      	add	r3, r1
 8024e8a:	330e      	adds	r3, #14
 8024e8c:	2200      	movs	r2, #0
 8024e8e:	701a      	strb	r2, [r3, #0]
				Dem_DTCArray[i].ReasonFF[i] = 0;
 8024e90:	79fa      	ldrb	r2, [r7, #7]
 8024e92:	79f9      	ldrb	r1, [r7, #7]
 8024e94:	4828      	ldr	r0, [pc, #160]	@ (8024f38 <Dem_ClearDtc+0x18c>)
 8024e96:	4613      	mov	r3, r2
 8024e98:	009b      	lsls	r3, r3, #2
 8024e9a:	4413      	add	r3, r2
 8024e9c:	005b      	lsls	r3, r3, #1
 8024e9e:	440b      	add	r3, r1
 8024ea0:	3306      	adds	r3, #6
 8024ea2:	009b      	lsls	r3, r3, #2
 8024ea4:	4403      	add	r3, r0
 8024ea6:	2200      	movs	r2, #0
 8024ea8:	605a      	str	r2, [r3, #4]
				Dem_DTCArray[i].SpeedFF[i] = 0;
 8024eaa:	79fa      	ldrb	r2, [r7, #7]
 8024eac:	79f9      	ldrb	r1, [r7, #7]
 8024eae:	4822      	ldr	r0, [pc, #136]	@ (8024f38 <Dem_ClearDtc+0x18c>)
 8024eb0:	4613      	mov	r3, r2
 8024eb2:	009b      	lsls	r3, r3, #2
 8024eb4:	4413      	add	r3, r2
 8024eb6:	00db      	lsls	r3, r3, #3
 8024eb8:	4403      	add	r3, r0
 8024eba:	440b      	add	r3, r1
 8024ebc:	330b      	adds	r3, #11
 8024ebe:	2200      	movs	r2, #0
 8024ec0:	701a      	strb	r2, [r3, #0]
				Dem_DTCArray[i].TimeFF[i] = 0;
 8024ec2:	79fa      	ldrb	r2, [r7, #7]
 8024ec4:	79f9      	ldrb	r1, [r7, #7]
 8024ec6:	481c      	ldr	r0, [pc, #112]	@ (8024f38 <Dem_ClearDtc+0x18c>)
 8024ec8:	4613      	mov	r3, r2
 8024eca:	009b      	lsls	r3, r3, #2
 8024ecc:	4413      	add	r3, r2
 8024ece:	00db      	lsls	r3, r3, #3
 8024ed0:	4403      	add	r3, r0
 8024ed2:	440b      	add	r3, r1
 8024ed4:	3311      	adds	r3, #17
 8024ed6:	2200      	movs	r2, #0
 8024ed8:	701a      	strb	r2, [r3, #0]
				Dem_DTCArray[i].VoltageFF[i] = 0;
 8024eda:	79fa      	ldrb	r2, [r7, #7]
 8024edc:	79f9      	ldrb	r1, [r7, #7]
 8024ede:	4816      	ldr	r0, [pc, #88]	@ (8024f38 <Dem_ClearDtc+0x18c>)
 8024ee0:	4613      	mov	r3, r2
 8024ee2:	009b      	lsls	r3, r3, #2
 8024ee4:	4413      	add	r3, r2
 8024ee6:	00db      	lsls	r3, r3, #3
 8024ee8:	4403      	add	r3, r0
 8024eea:	440b      	add	r3, r1
 8024eec:	3308      	adds	r3, #8
 8024eee:	2200      	movs	r2, #0
 8024ef0:	701a      	strb	r2, [r3, #0]
			for(uint8 j = 0; j < 3; j++)
 8024ef2:	79bb      	ldrb	r3, [r7, #6]
 8024ef4:	3301      	adds	r3, #1
 8024ef6:	71bb      	strb	r3, [r7, #6]
 8024ef8:	79bb      	ldrb	r3, [r7, #6]
 8024efa:	2b02      	cmp	r3, #2
 8024efc:	d9a4      	bls.n	8024e48 <Dem_ClearDtc+0x9c>
	for(uint8 i = 0; i < 21; i++)
 8024efe:	79fb      	ldrb	r3, [r7, #7]
 8024f00:	3301      	adds	r3, #1
 8024f02:	71fb      	strb	r3, [r7, #7]
 8024f04:	79fb      	ldrb	r3, [r7, #7]
 8024f06:	2b14      	cmp	r3, #20
 8024f08:	f67f af56 	bls.w	8024db8 <Dem_ClearDtc+0xc>
		else
		{
			/* Do nothing. */
		}
	}
}
 8024f0c:	bf00      	nop
 8024f0e:	bf00      	nop
 8024f10:	370c      	adds	r7, #12
 8024f12:	46bd      	mov	sp, r7
 8024f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024f18:	4770      	bx	lr
 8024f1a:	bf00      	nop
 8024f1c:	100007c8 	.word	0x100007c8
 8024f20:	10000ae0 	.word	0x10000ae0
 8024f24:	10000c30 	.word	0x10000c30
 8024f28:	10000c60 	.word	0x10000c60
 8024f2c:	10000c1c 	.word	0x10000c1c
 8024f30:	10000ad4 	.word	0x10000ad4
 8024f34:	100008ec 	.word	0x100008ec
 8024f38:	1000093c 	.word	0x1000093c

08024f3c <Dem_SetDtc>:
void Dem_SetDtc(uint8 IDPrimary, uint32 Reason, uint8 Status)
{
 8024f3c:	b590      	push	{r4, r7, lr}
 8024f3e:	b085      	sub	sp, #20
 8024f40:	af00      	add	r7, sp, #0
 8024f42:	4603      	mov	r3, r0
 8024f44:	6039      	str	r1, [r7, #0]
 8024f46:	71fb      	strb	r3, [r7, #7]
 8024f48:	4613      	mov	r3, r2
 8024f4a:	71bb      	strb	r3, [r7, #6]
	uint8 i = 0;
 8024f4c:	2300      	movs	r3, #0
 8024f4e:	73fb      	strb	r3, [r7, #15]
	if(0 == Dem_DTCSettingDeactivated)
 8024f50:	4b63      	ldr	r3, [pc, #396]	@ (80250e0 <Dem_SetDtc+0x1a4>)
 8024f52:	781b      	ldrb	r3, [r3, #0]
 8024f54:	2b00      	cmp	r3, #0
 8024f56:	f040 80be 	bne.w	80250d6 <Dem_SetDtc+0x19a>
	{
		if(1 == Status && Dem_DTCArray[IDPrimary].counter < 4)
 8024f5a:	79bb      	ldrb	r3, [r7, #6]
 8024f5c:	2b01      	cmp	r3, #1
 8024f5e:	f040 80b0 	bne.w	80250c2 <Dem_SetDtc+0x186>
 8024f62:	79fa      	ldrb	r2, [r7, #7]
 8024f64:	495f      	ldr	r1, [pc, #380]	@ (80250e4 <Dem_SetDtc+0x1a8>)
 8024f66:	4613      	mov	r3, r2
 8024f68:	009b      	lsls	r3, r3, #2
 8024f6a:	4413      	add	r3, r2
 8024f6c:	00db      	lsls	r3, r3, #3
 8024f6e:	440b      	add	r3, r1
 8024f70:	681b      	ldr	r3, [r3, #0]
 8024f72:	2b03      	cmp	r3, #3
 8024f74:	f200 80a5 	bhi.w	80250c2 <Dem_SetDtc+0x186>
		{
			Dem_TxHeader.DLC = 1;
 8024f78:	4b5b      	ldr	r3, [pc, #364]	@ (80250e8 <Dem_SetDtc+0x1ac>)
 8024f7a:	2201      	movs	r2, #1
 8024f7c:	611a      	str	r2, [r3, #16]
			Dem_TxHeader.StdId = 0x10D;
 8024f7e:	4b5a      	ldr	r3, [pc, #360]	@ (80250e8 <Dem_SetDtc+0x1ac>)
 8024f80:	f240 120d 	movw	r2, #269	@ 0x10d
 8024f84:	601a      	str	r2, [r3, #0]
			Dem_TxData[0] = IDPrimary;
 8024f86:	4a59      	ldr	r2, [pc, #356]	@ (80250ec <Dem_SetDtc+0x1b0>)
 8024f88:	79fb      	ldrb	r3, [r7, #7]
 8024f8a:	7013      	strb	r3, [r2, #0]
			HAL_CAN_AddTxMessage(&hcan1, &Dem_TxHeader, Dem_TxData, &Dem_TxMailbox);
 8024f8c:	4b58      	ldr	r3, [pc, #352]	@ (80250f0 <Dem_SetDtc+0x1b4>)
 8024f8e:	4a57      	ldr	r2, [pc, #348]	@ (80250ec <Dem_SetDtc+0x1b0>)
 8024f90:	4955      	ldr	r1, [pc, #340]	@ (80250e8 <Dem_SetDtc+0x1ac>)
 8024f92:	4858      	ldr	r0, [pc, #352]	@ (80250f4 <Dem_SetDtc+0x1b8>)
 8024f94:	f004 ff6e 	bl	8029e74 <HAL_CAN_AddTxMessage>
			for(i = 0; i < 3; i++)
 8024f98:	2300      	movs	r3, #0
 8024f9a:	73fb      	strb	r3, [r7, #15]
 8024f9c:	e00f      	b.n	8024fbe <Dem_SetDtc+0x82>
			{
				if(0 != Dem_DTCArray[IDPrimary].GearFF[i]) break;
 8024f9e:	79fa      	ldrb	r2, [r7, #7]
 8024fa0:	7bf9      	ldrb	r1, [r7, #15]
 8024fa2:	4850      	ldr	r0, [pc, #320]	@ (80250e4 <Dem_SetDtc+0x1a8>)
 8024fa4:	4613      	mov	r3, r2
 8024fa6:	009b      	lsls	r3, r3, #2
 8024fa8:	4413      	add	r3, r2
 8024faa:	00db      	lsls	r3, r3, #3
 8024fac:	4403      	add	r3, r0
 8024fae:	440b      	add	r3, r1
 8024fb0:	3317      	adds	r3, #23
 8024fb2:	781b      	ldrb	r3, [r3, #0]
 8024fb4:	2b00      	cmp	r3, #0
 8024fb6:	d106      	bne.n	8024fc6 <Dem_SetDtc+0x8a>
			for(i = 0; i < 3; i++)
 8024fb8:	7bfb      	ldrb	r3, [r7, #15]
 8024fba:	3301      	adds	r3, #1
 8024fbc:	73fb      	strb	r3, [r7, #15]
 8024fbe:	7bfb      	ldrb	r3, [r7, #15]
 8024fc0:	2b02      	cmp	r3, #2
 8024fc2:	d9ec      	bls.n	8024f9e <Dem_SetDtc+0x62>
 8024fc4:	e000      	b.n	8024fc8 <Dem_SetDtc+0x8c>
				if(0 != Dem_DTCArray[IDPrimary].GearFF[i]) break;
 8024fc6:	bf00      	nop
				else
				{
					/* Do nothing. */
				}
			}
			Dem_DTCArray[IDPrimary].counter++;
 8024fc8:	79fa      	ldrb	r2, [r7, #7]
 8024fca:	4946      	ldr	r1, [pc, #280]	@ (80250e4 <Dem_SetDtc+0x1a8>)
 8024fcc:	4613      	mov	r3, r2
 8024fce:	009b      	lsls	r3, r3, #2
 8024fd0:	4413      	add	r3, r2
 8024fd2:	00db      	lsls	r3, r3, #3
 8024fd4:	440b      	add	r3, r1
 8024fd6:	681b      	ldr	r3, [r3, #0]
 8024fd8:	1c59      	adds	r1, r3, #1
 8024fda:	4842      	ldr	r0, [pc, #264]	@ (80250e4 <Dem_SetDtc+0x1a8>)
 8024fdc:	4613      	mov	r3, r2
 8024fde:	009b      	lsls	r3, r3, #2
 8024fe0:	4413      	add	r3, r2
 8024fe2:	00db      	lsls	r3, r3, #3
 8024fe4:	4403      	add	r3, r0
 8024fe6:	6019      	str	r1, [r3, #0]
			Dem_DTCArray[IDPrimary].isActiveNow = 1;
 8024fe8:	79fa      	ldrb	r2, [r7, #7]
 8024fea:	493e      	ldr	r1, [pc, #248]	@ (80250e4 <Dem_SetDtc+0x1a8>)
 8024fec:	4613      	mov	r3, r2
 8024fee:	009b      	lsls	r3, r3, #2
 8024ff0:	4413      	add	r3, r2
 8024ff2:	00db      	lsls	r3, r3, #3
 8024ff4:	440b      	add	r3, r1
 8024ff6:	3304      	adds	r3, #4
 8024ff8:	2201      	movs	r2, #1
 8024ffa:	601a      	str	r2, [r3, #0]
			Dem_DTCArray[IDPrimary].GearFF[i] = CanH_RxSig_Gear;
 8024ffc:	79fa      	ldrb	r2, [r7, #7]
 8024ffe:	7bf9      	ldrb	r1, [r7, #15]
 8025000:	4b3d      	ldr	r3, [pc, #244]	@ (80250f8 <Dem_SetDtc+0x1bc>)
 8025002:	781c      	ldrb	r4, [r3, #0]
 8025004:	4837      	ldr	r0, [pc, #220]	@ (80250e4 <Dem_SetDtc+0x1a8>)
 8025006:	4613      	mov	r3, r2
 8025008:	009b      	lsls	r3, r3, #2
 802500a:	4413      	add	r3, r2
 802500c:	00db      	lsls	r3, r3, #3
 802500e:	4403      	add	r3, r0
 8025010:	440b      	add	r3, r1
 8025012:	3317      	adds	r3, #23
 8025014:	4622      	mov	r2, r4
 8025016:	701a      	strb	r2, [r3, #0]
			Dem_DTCArray[IDPrimary].IgnFF[i] = CanH_RxSig_Ignition;
 8025018:	79fa      	ldrb	r2, [r7, #7]
 802501a:	7bf9      	ldrb	r1, [r7, #15]
 802501c:	4b37      	ldr	r3, [pc, #220]	@ (80250fc <Dem_SetDtc+0x1c0>)
 802501e:	781c      	ldrb	r4, [r3, #0]
 8025020:	4830      	ldr	r0, [pc, #192]	@ (80250e4 <Dem_SetDtc+0x1a8>)
 8025022:	4613      	mov	r3, r2
 8025024:	009b      	lsls	r3, r3, #2
 8025026:	4413      	add	r3, r2
 8025028:	00db      	lsls	r3, r3, #3
 802502a:	4403      	add	r3, r0
 802502c:	440b      	add	r3, r1
 802502e:	3314      	adds	r3, #20
 8025030:	4622      	mov	r2, r4
 8025032:	701a      	strb	r2, [r3, #0]
			Dem_DTCArray[IDPrimary].RpmFF[i] = CanH_RxSig_Rpm;
 8025034:	79fa      	ldrb	r2, [r7, #7]
 8025036:	7bf9      	ldrb	r1, [r7, #15]
 8025038:	4b31      	ldr	r3, [pc, #196]	@ (8025100 <Dem_SetDtc+0x1c4>)
 802503a:	781c      	ldrb	r4, [r3, #0]
 802503c:	4829      	ldr	r0, [pc, #164]	@ (80250e4 <Dem_SetDtc+0x1a8>)
 802503e:	4613      	mov	r3, r2
 8025040:	009b      	lsls	r3, r3, #2
 8025042:	4413      	add	r3, r2
 8025044:	00db      	lsls	r3, r3, #3
 8025046:	4403      	add	r3, r0
 8025048:	440b      	add	r3, r1
 802504a:	330e      	adds	r3, #14
 802504c:	4622      	mov	r2, r4
 802504e:	701a      	strb	r2, [r3, #0]
			Dem_DTCArray[IDPrimary].ReasonFF[i] = Reason;
 8025050:	79fa      	ldrb	r2, [r7, #7]
 8025052:	7bf9      	ldrb	r1, [r7, #15]
 8025054:	4823      	ldr	r0, [pc, #140]	@ (80250e4 <Dem_SetDtc+0x1a8>)
 8025056:	4613      	mov	r3, r2
 8025058:	009b      	lsls	r3, r3, #2
 802505a:	4413      	add	r3, r2
 802505c:	005b      	lsls	r3, r3, #1
 802505e:	440b      	add	r3, r1
 8025060:	3306      	adds	r3, #6
 8025062:	009b      	lsls	r3, r3, #2
 8025064:	4403      	add	r3, r0
 8025066:	683a      	ldr	r2, [r7, #0]
 8025068:	605a      	str	r2, [r3, #4]
			Dem_DTCArray[IDPrimary].SpeedFF[i] = CanH_RxSig_Speed;
 802506a:	79fa      	ldrb	r2, [r7, #7]
 802506c:	7bf9      	ldrb	r1, [r7, #15]
 802506e:	4b25      	ldr	r3, [pc, #148]	@ (8025104 <Dem_SetDtc+0x1c8>)
 8025070:	781c      	ldrb	r4, [r3, #0]
 8025072:	481c      	ldr	r0, [pc, #112]	@ (80250e4 <Dem_SetDtc+0x1a8>)
 8025074:	4613      	mov	r3, r2
 8025076:	009b      	lsls	r3, r3, #2
 8025078:	4413      	add	r3, r2
 802507a:	00db      	lsls	r3, r3, #3
 802507c:	4403      	add	r3, r0
 802507e:	440b      	add	r3, r1
 8025080:	330b      	adds	r3, #11
 8025082:	4622      	mov	r2, r4
 8025084:	701a      	strb	r2, [r3, #0]
			Dem_DTCArray[IDPrimary].TimeFF[i] = Dcm_AliveCounter;
 8025086:	4b20      	ldr	r3, [pc, #128]	@ (8025108 <Dem_SetDtc+0x1cc>)
 8025088:	681b      	ldr	r3, [r3, #0]
 802508a:	79fa      	ldrb	r2, [r7, #7]
 802508c:	7bf9      	ldrb	r1, [r7, #15]
 802508e:	b2dc      	uxtb	r4, r3
 8025090:	4814      	ldr	r0, [pc, #80]	@ (80250e4 <Dem_SetDtc+0x1a8>)
 8025092:	4613      	mov	r3, r2
 8025094:	009b      	lsls	r3, r3, #2
 8025096:	4413      	add	r3, r2
 8025098:	00db      	lsls	r3, r3, #3
 802509a:	4403      	add	r3, r0
 802509c:	440b      	add	r3, r1
 802509e:	3311      	adds	r3, #17
 80250a0:	4622      	mov	r2, r4
 80250a2:	701a      	strb	r2, [r3, #0]
			Dem_DTCArray[IDPrimary].VoltageFF[i] = CanH_RxSig_VBat;
 80250a4:	79fa      	ldrb	r2, [r7, #7]
 80250a6:	7bf9      	ldrb	r1, [r7, #15]
 80250a8:	4b18      	ldr	r3, [pc, #96]	@ (802510c <Dem_SetDtc+0x1d0>)
 80250aa:	781c      	ldrb	r4, [r3, #0]
 80250ac:	480d      	ldr	r0, [pc, #52]	@ (80250e4 <Dem_SetDtc+0x1a8>)
 80250ae:	4613      	mov	r3, r2
 80250b0:	009b      	lsls	r3, r3, #2
 80250b2:	4413      	add	r3, r2
 80250b4:	00db      	lsls	r3, r3, #3
 80250b6:	4403      	add	r3, r0
 80250b8:	440b      	add	r3, r1
 80250ba:	3308      	adds	r3, #8
 80250bc:	4622      	mov	r2, r4
 80250be:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* Do nothing. */
	}
}
 80250c0:	e009      	b.n	80250d6 <Dem_SetDtc+0x19a>
		else Dem_DTCArray[IDPrimary].isActiveNow = 0;
 80250c2:	79fa      	ldrb	r2, [r7, #7]
 80250c4:	4907      	ldr	r1, [pc, #28]	@ (80250e4 <Dem_SetDtc+0x1a8>)
 80250c6:	4613      	mov	r3, r2
 80250c8:	009b      	lsls	r3, r3, #2
 80250ca:	4413      	add	r3, r2
 80250cc:	00db      	lsls	r3, r3, #3
 80250ce:	440b      	add	r3, r1
 80250d0:	3304      	adds	r3, #4
 80250d2:	2200      	movs	r2, #0
 80250d4:	601a      	str	r2, [r3, #0]
}
 80250d6:	bf00      	nop
 80250d8:	3714      	adds	r7, #20
 80250da:	46bd      	mov	sp, r7
 80250dc:	bd90      	pop	{r4, r7, pc}
 80250de:	bf00      	nop
 80250e0:	10000aa4 	.word	0x10000aa4
 80250e4:	1000093c 	.word	0x1000093c
 80250e8:	10000aa8 	.word	0x10000aa8
 80250ec:	10000ac0 	.word	0x10000ac0
 80250f0:	10000ac8 	.word	0x10000ac8
 80250f4:	200001a8 	.word	0x200001a8
 80250f8:	1000087b 	.word	0x1000087b
 80250fc:	10000876 	.word	0x10000876
 8025100:	10000878 	.word	0x10000878
 8025104:	10000877 	.word	0x10000877
 8025108:	1000fc04 	.word	0x1000fc04
 802510c:	10000879 	.word	0x10000879

08025110 <Dem_MainFunction>:
void Dem_MainFunction(void)
{
 8025110:	b580      	push	{r7, lr}
 8025112:	b082      	sub	sp, #8
 8025114:	af00      	add	r7, sp, #0
	if(0 == Dem_MainCounter) for(uint8 i = 0; i < 5; i++) Dem_DTCArray[i].isActiveNow = 0;
 8025116:	4b72      	ldr	r3, [pc, #456]	@ (80252e0 <Dem_MainFunction+0x1d0>)
 8025118:	681b      	ldr	r3, [r3, #0]
 802511a:	2b00      	cmp	r3, #0
 802511c:	d112      	bne.n	8025144 <Dem_MainFunction+0x34>
 802511e:	2300      	movs	r3, #0
 8025120:	71fb      	strb	r3, [r7, #7]
 8025122:	e00c      	b.n	802513e <Dem_MainFunction+0x2e>
 8025124:	79fa      	ldrb	r2, [r7, #7]
 8025126:	496f      	ldr	r1, [pc, #444]	@ (80252e4 <Dem_MainFunction+0x1d4>)
 8025128:	4613      	mov	r3, r2
 802512a:	009b      	lsls	r3, r3, #2
 802512c:	4413      	add	r3, r2
 802512e:	00db      	lsls	r3, r3, #3
 8025130:	440b      	add	r3, r1
 8025132:	3304      	adds	r3, #4
 8025134:	2200      	movs	r2, #0
 8025136:	601a      	str	r2, [r3, #0]
 8025138:	79fb      	ldrb	r3, [r7, #7]
 802513a:	3301      	adds	r3, #1
 802513c:	71fb      	strb	r3, [r7, #7]
 802513e:	79fb      	ldrb	r3, [r7, #7]
 8025140:	2b04      	cmp	r3, #4
 8025142:	d9ef      	bls.n	8025124 <Dem_MainFunction+0x14>
	else
	{
		/* Do nothing. */
	}
	for(uint8 i = 0; i < 21; i++)
 8025144:	2300      	movs	r3, #0
 8025146:	71bb      	strb	r3, [r7, #6]
 8025148:	e0bd      	b.n	80252c6 <Dem_MainFunction+0x1b6>
	{
		if(0 != CanH_ErrArr[i]) Dem_SetDtc(DEM_COMMUNICATION_ERROR_ID, CanH_ErrArr[i], 1);
 802514a:	79bb      	ldrb	r3, [r7, #6]
 802514c:	4a66      	ldr	r2, [pc, #408]	@ (80252e8 <Dem_MainFunction+0x1d8>)
 802514e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8025152:	2b00      	cmp	r3, #0
 8025154:	d009      	beq.n	802516a <Dem_MainFunction+0x5a>
 8025156:	79bb      	ldrb	r3, [r7, #6]
 8025158:	4a63      	ldr	r2, [pc, #396]	@ (80252e8 <Dem_MainFunction+0x1d8>)
 802515a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802515e:	2201      	movs	r2, #1
 8025160:	4619      	mov	r1, r3
 8025162:	2001      	movs	r0, #1
 8025164:	f7ff feea 	bl	8024f3c <Dem_SetDtc>
 8025168:	e008      	b.n	802517c <Dem_MainFunction+0x6c>
		else Dem_SetDtc(DEM_COMMUNICATION_ERROR_ID, CanH_ErrArr[i], 0);
 802516a:	79bb      	ldrb	r3, [r7, #6]
 802516c:	4a5e      	ldr	r2, [pc, #376]	@ (80252e8 <Dem_MainFunction+0x1d8>)
 802516e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8025172:	2200      	movs	r2, #0
 8025174:	4619      	mov	r1, r3
 8025176:	2001      	movs	r0, #1
 8025178:	f7ff fee0 	bl	8024f3c <Dem_SetDtc>
		if(i < 7)
 802517c:	79bb      	ldrb	r3, [r7, #6]
 802517e:	2b06      	cmp	r3, #6
 8025180:	d84a      	bhi.n	8025218 <Dem_MainFunction+0x108>
		{
			if(0 != Ain_DmaErrArr[i]) Dem_SetDtc(DEM_CONTROLLER_INTERNALFAULT_ID, Ain_DmaErrArr[i], 1);
 8025182:	79bb      	ldrb	r3, [r7, #6]
 8025184:	4a59      	ldr	r2, [pc, #356]	@ (80252ec <Dem_MainFunction+0x1dc>)
 8025186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802518a:	2b00      	cmp	r3, #0
 802518c:	d009      	beq.n	80251a2 <Dem_MainFunction+0x92>
 802518e:	79bb      	ldrb	r3, [r7, #6]
 8025190:	4a56      	ldr	r2, [pc, #344]	@ (80252ec <Dem_MainFunction+0x1dc>)
 8025192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8025196:	2201      	movs	r2, #1
 8025198:	4619      	mov	r1, r3
 802519a:	2000      	movs	r0, #0
 802519c:	f7ff fece 	bl	8024f3c <Dem_SetDtc>
 80251a0:	e008      	b.n	80251b4 <Dem_MainFunction+0xa4>
			else Dem_SetDtc(DEM_CONTROLLER_INTERNALFAULT_ID, Ain_DmaErrArr[i], 0);
 80251a2:	79bb      	ldrb	r3, [r7, #6]
 80251a4:	4a51      	ldr	r2, [pc, #324]	@ (80252ec <Dem_MainFunction+0x1dc>)
 80251a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80251aa:	2200      	movs	r2, #0
 80251ac:	4619      	mov	r1, r3
 80251ae:	2000      	movs	r0, #0
 80251b0:	f7ff fec4 	bl	8024f3c <Dem_SetDtc>
			if(0 != DcmiH_DmaErrArr[i]) Dem_SetDtc(DEM_REVERSECAMERA_DCMIINTERFACE_MALFUNCTION_ID, DcmiH_DmaErrArr[i], 1);
 80251b4:	79bb      	ldrb	r3, [r7, #6]
 80251b6:	4a4e      	ldr	r2, [pc, #312]	@ (80252f0 <Dem_MainFunction+0x1e0>)
 80251b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80251bc:	2b00      	cmp	r3, #0
 80251be:	d009      	beq.n	80251d4 <Dem_MainFunction+0xc4>
 80251c0:	79bb      	ldrb	r3, [r7, #6]
 80251c2:	4a4b      	ldr	r2, [pc, #300]	@ (80252f0 <Dem_MainFunction+0x1e0>)
 80251c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80251c8:	2201      	movs	r2, #1
 80251ca:	4619      	mov	r1, r3
 80251cc:	2003      	movs	r0, #3
 80251ce:	f7ff feb5 	bl	8024f3c <Dem_SetDtc>
 80251d2:	e008      	b.n	80251e6 <Dem_MainFunction+0xd6>
			else Dem_SetDtc(DEM_REVERSECAMERA_DCMIINTERFACE_MALFUNCTION_ID, DcmiH_DmaErrArr[i], 0);
 80251d4:	79bb      	ldrb	r3, [r7, #6]
 80251d6:	4a46      	ldr	r2, [pc, #280]	@ (80252f0 <Dem_MainFunction+0x1e0>)
 80251d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80251dc:	2200      	movs	r2, #0
 80251de:	4619      	mov	r1, r3
 80251e0:	2003      	movs	r0, #3
 80251e2:	f7ff feab 	bl	8024f3c <Dem_SetDtc>
			if(0 != FsmcH_DmaErrArr[i]) Dem_SetDtc(DEM_DIGITALCLUSTER_CONTROLINTERFACE_MALFUNCTION_ID, FsmcH_DmaErrArr[i], 1);
 80251e6:	79bb      	ldrb	r3, [r7, #6]
 80251e8:	4a42      	ldr	r2, [pc, #264]	@ (80252f4 <Dem_MainFunction+0x1e4>)
 80251ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80251ee:	2b00      	cmp	r3, #0
 80251f0:	d009      	beq.n	8025206 <Dem_MainFunction+0xf6>
 80251f2:	79bb      	ldrb	r3, [r7, #6]
 80251f4:	4a3f      	ldr	r2, [pc, #252]	@ (80252f4 <Dem_MainFunction+0x1e4>)
 80251f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80251fa:	2201      	movs	r2, #1
 80251fc:	4619      	mov	r1, r3
 80251fe:	2004      	movs	r0, #4
 8025200:	f7ff fe9c 	bl	8024f3c <Dem_SetDtc>
 8025204:	e008      	b.n	8025218 <Dem_MainFunction+0x108>
			else Dem_SetDtc(DEM_DIGITALCLUSTER_CONTROLINTERFACE_MALFUNCTION_ID, FsmcH_DmaErrArr[i], 0);
 8025206:	79bb      	ldrb	r3, [r7, #6]
 8025208:	4a3a      	ldr	r2, [pc, #232]	@ (80252f4 <Dem_MainFunction+0x1e4>)
 802520a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802520e:	2200      	movs	r2, #0
 8025210:	4619      	mov	r1, r3
 8025212:	2004      	movs	r0, #4
 8025214:	f7ff fe92 	bl	8024f3c <Dem_SetDtc>
		}
		if (i < 4)
 8025218:	79bb      	ldrb	r3, [r7, #6]
 802521a:	2b03      	cmp	r3, #3
 802521c:	d818      	bhi.n	8025250 <Dem_MainFunction+0x140>
		{
			if(0 != DcmiH_ErrArr[i]) Dem_SetDtc(DEM_REVERSECAMERA_DCMIINTERFACE_MALFUNCTION_ID, DcmiH_ErrArr[i], 1);
 802521e:	79bb      	ldrb	r3, [r7, #6]
 8025220:	4a35      	ldr	r2, [pc, #212]	@ (80252f8 <Dem_MainFunction+0x1e8>)
 8025222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8025226:	2b00      	cmp	r3, #0
 8025228:	d009      	beq.n	802523e <Dem_MainFunction+0x12e>
 802522a:	79bb      	ldrb	r3, [r7, #6]
 802522c:	4a32      	ldr	r2, [pc, #200]	@ (80252f8 <Dem_MainFunction+0x1e8>)
 802522e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8025232:	2201      	movs	r2, #1
 8025234:	4619      	mov	r1, r3
 8025236:	2003      	movs	r0, #3
 8025238:	f7ff fe80 	bl	8024f3c <Dem_SetDtc>
 802523c:	e008      	b.n	8025250 <Dem_MainFunction+0x140>
			else Dem_SetDtc(DEM_REVERSECAMERA_DCMIINTERFACE_MALFUNCTION_ID, DcmiH_ErrArr[i], 0);
 802523e:	79bb      	ldrb	r3, [r7, #6]
 8025240:	4a2d      	ldr	r2, [pc, #180]	@ (80252f8 <Dem_MainFunction+0x1e8>)
 8025242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8025246:	2200      	movs	r2, #0
 8025248:	4619      	mov	r1, r3
 802524a:	2003      	movs	r0, #3
 802524c:	f7ff fe76 	bl	8024f3c <Dem_SetDtc>
		}
		else
		{
			/* Do nothing. */
		}
		if(i < 3)
 8025250:	79bb      	ldrb	r3, [r7, #6]
 8025252:	2b02      	cmp	r3, #2
 8025254:	d818      	bhi.n	8025288 <Dem_MainFunction+0x178>
		{
			if(0 != Ain_ErrArr[i])Dem_SetDtc(DEM_CONTROLLER_INTERNALFAULT_ID, Ain_ErrArr[i], 1);
 8025256:	79bb      	ldrb	r3, [r7, #6]
 8025258:	4a28      	ldr	r2, [pc, #160]	@ (80252fc <Dem_MainFunction+0x1ec>)
 802525a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802525e:	2b00      	cmp	r3, #0
 8025260:	d009      	beq.n	8025276 <Dem_MainFunction+0x166>
 8025262:	79bb      	ldrb	r3, [r7, #6]
 8025264:	4a25      	ldr	r2, [pc, #148]	@ (80252fc <Dem_MainFunction+0x1ec>)
 8025266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802526a:	2201      	movs	r2, #1
 802526c:	4619      	mov	r1, r3
 802526e:	2000      	movs	r0, #0
 8025270:	f7ff fe64 	bl	8024f3c <Dem_SetDtc>
 8025274:	e008      	b.n	8025288 <Dem_MainFunction+0x178>
			else Dem_SetDtc(DEM_CONTROLLER_INTERNALFAULT_ID, Ain_ErrArr[i], 0);
 8025276:	79bb      	ldrb	r3, [r7, #6]
 8025278:	4a20      	ldr	r2, [pc, #128]	@ (80252fc <Dem_MainFunction+0x1ec>)
 802527a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802527e:	2200      	movs	r2, #0
 8025280:	4619      	mov	r1, r3
 8025282:	2000      	movs	r0, #0
 8025284:	f7ff fe5a 	bl	8024f3c <Dem_SetDtc>
		}
		else
		{
			/* Do nothing. */
		}
		if(i < 9)
 8025288:	79bb      	ldrb	r3, [r7, #6]
 802528a:	2b08      	cmp	r3, #8
 802528c:	d818      	bhi.n	80252c0 <Dem_MainFunction+0x1b0>
		{
			if(0 != I2cH_ErrArr[i]) Dem_SetDtc(DEM_REVERSECAMERA_CONTROLINTERFACE_MALFUNCTION_ID, I2cH_ErrArr[i], 1);
 802528e:	79bb      	ldrb	r3, [r7, #6]
 8025290:	4a1b      	ldr	r2, [pc, #108]	@ (8025300 <Dem_MainFunction+0x1f0>)
 8025292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8025296:	2b00      	cmp	r3, #0
 8025298:	d009      	beq.n	80252ae <Dem_MainFunction+0x19e>
 802529a:	79bb      	ldrb	r3, [r7, #6]
 802529c:	4a18      	ldr	r2, [pc, #96]	@ (8025300 <Dem_MainFunction+0x1f0>)
 802529e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80252a2:	2201      	movs	r2, #1
 80252a4:	4619      	mov	r1, r3
 80252a6:	2002      	movs	r0, #2
 80252a8:	f7ff fe48 	bl	8024f3c <Dem_SetDtc>
 80252ac:	e008      	b.n	80252c0 <Dem_MainFunction+0x1b0>
			else Dem_SetDtc(DEM_REVERSECAMERA_CONTROLINTERFACE_MALFUNCTION_ID, I2cH_ErrArr[i], 0);
 80252ae:	79bb      	ldrb	r3, [r7, #6]
 80252b0:	4a13      	ldr	r2, [pc, #76]	@ (8025300 <Dem_MainFunction+0x1f0>)
 80252b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80252b6:	2200      	movs	r2, #0
 80252b8:	4619      	mov	r1, r3
 80252ba:	2002      	movs	r0, #2
 80252bc:	f7ff fe3e 	bl	8024f3c <Dem_SetDtc>
	for(uint8 i = 0; i < 21; i++)
 80252c0:	79bb      	ldrb	r3, [r7, #6]
 80252c2:	3301      	adds	r3, #1
 80252c4:	71bb      	strb	r3, [r7, #6]
 80252c6:	79bb      	ldrb	r3, [r7, #6]
 80252c8:	2b14      	cmp	r3, #20
 80252ca:	f67f af3e 	bls.w	802514a <Dem_MainFunction+0x3a>
		else
		{
			/* Do nothing. */
		}
	}
	Dem_MainCounter++;
 80252ce:	4b04      	ldr	r3, [pc, #16]	@ (80252e0 <Dem_MainFunction+0x1d0>)
 80252d0:	681b      	ldr	r3, [r3, #0]
 80252d2:	3301      	adds	r3, #1
 80252d4:	4a02      	ldr	r2, [pc, #8]	@ (80252e0 <Dem_MainFunction+0x1d0>)
 80252d6:	6013      	str	r3, [r2, #0]
}
 80252d8:	bf00      	nop
 80252da:	3708      	adds	r7, #8
 80252dc:	46bd      	mov	sp, r7
 80252de:	bd80      	pop	{r7, pc}
 80252e0:	10000938 	.word	0x10000938
 80252e4:	1000093c 	.word	0x1000093c
 80252e8:	100007c8 	.word	0x100007c8
 80252ec:	10000ae0 	.word	0x10000ae0
 80252f0:	10000c30 	.word	0x10000c30
 80252f4:	10000c60 	.word	0x10000c60
 80252f8:	10000c1c 	.word	0x10000c1c
 80252fc:	10000ad4 	.word	0x10000ad4
 8025300:	100008ec 	.word	0x100008ec
 8025304:	00000000 	.word	0x00000000

08025308 <Ain_MainFunction>:
extern DMA_HandleTypeDef hdma_adc1;

void Ain_MainFunction(void);

void Ain_MainFunction(void)
{
 8025308:	b580      	push	{r7, lr}
 802530a:	b082      	sub	sp, #8
 802530c:	af00      	add	r7, sp, #0
	Ain_Status = HAL_ADC_GetState(&hadc1);
 802530e:	48b2      	ldr	r0, [pc, #712]	@ (80255d8 <Ain_MainFunction+0x2d0>)
 8025310:	f003 ff3e 	bl	8029190 <HAL_ADC_GetState>
 8025314:	4603      	mov	r3, r0
 8025316:	4ab1      	ldr	r2, [pc, #708]	@ (80255dc <Ain_MainFunction+0x2d4>)
 8025318:	6013      	str	r3, [r2, #0]
	if(0 == Ain_MainCounter) HAL_ADC_Start_DMA(&hadc1, Ain_MeasValues, 3);
 802531a:	4bb1      	ldr	r3, [pc, #708]	@ (80255e0 <Ain_MainFunction+0x2d8>)
 802531c:	681b      	ldr	r3, [r3, #0]
 802531e:	2b00      	cmp	r3, #0
 8025320:	d104      	bne.n	802532c <Ain_MainFunction+0x24>
 8025322:	2203      	movs	r2, #3
 8025324:	49af      	ldr	r1, [pc, #700]	@ (80255e4 <Ain_MainFunction+0x2dc>)
 8025326:	48ac      	ldr	r0, [pc, #688]	@ (80255d8 <Ain_MainFunction+0x2d0>)
 8025328:	f003 fc80 	bl	8028c2c <HAL_ADC_Start_DMA>
	else
	{
		/* Do nothing. */
	}
	if(Ain_MeasValues[0] > 0) Ain_Vbat = (Ain_MeasValues[0] * 1.21 * 2) / 4095;
 802532c:	4bad      	ldr	r3, [pc, #692]	@ (80255e4 <Ain_MainFunction+0x2dc>)
 802532e:	681b      	ldr	r3, [r3, #0]
 8025330:	2b00      	cmp	r3, #0
 8025332:	d023      	beq.n	802537c <Ain_MainFunction+0x74>
 8025334:	4bab      	ldr	r3, [pc, #684]	@ (80255e4 <Ain_MainFunction+0x2dc>)
 8025336:	681b      	ldr	r3, [r3, #0]
 8025338:	4618      	mov	r0, r3
 802533a:	f7fb f8db 	bl	80204f4 <__aeabi_ui2d>
 802533e:	a39c      	add	r3, pc, #624	@ (adr r3, 80255b0 <Ain_MainFunction+0x2a8>)
 8025340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025344:	f7fb f950 	bl	80205e8 <__aeabi_dmul>
 8025348:	4602      	mov	r2, r0
 802534a:	460b      	mov	r3, r1
 802534c:	4610      	mov	r0, r2
 802534e:	4619      	mov	r1, r3
 8025350:	4602      	mov	r2, r0
 8025352:	460b      	mov	r3, r1
 8025354:	f7fa ff92 	bl	802027c <__adddf3>
 8025358:	4602      	mov	r2, r0
 802535a:	460b      	mov	r3, r1
 802535c:	4610      	mov	r0, r2
 802535e:	4619      	mov	r1, r3
 8025360:	a395      	add	r3, pc, #596	@ (adr r3, 80255b8 <Ain_MainFunction+0x2b0>)
 8025362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025366:	f7fb fa69 	bl	802083c <__aeabi_ddiv>
 802536a:	4602      	mov	r2, r0
 802536c:	460b      	mov	r3, r1
 802536e:	4610      	mov	r0, r2
 8025370:	4619      	mov	r1, r3
 8025372:	f7fb fb4b 	bl	8020a0c <__aeabi_d2f>
 8025376:	4603      	mov	r3, r0
 8025378:	4a9b      	ldr	r2, [pc, #620]	@ (80255e8 <Ain_MainFunction+0x2e0>)
 802537a:	6013      	str	r3, [r2, #0]
	else
	{
		/* Do nothing. */
	}
	if(Ain_MeasValues[2] > 0) Ain_VrefInt = 1.21 * 4095 / Ain_MeasValues[2];
 802537c:	4b99      	ldr	r3, [pc, #612]	@ (80255e4 <Ain_MainFunction+0x2dc>)
 802537e:	689b      	ldr	r3, [r3, #8]
 8025380:	2b00      	cmp	r3, #0
 8025382:	d014      	beq.n	80253ae <Ain_MainFunction+0xa6>
 8025384:	4b97      	ldr	r3, [pc, #604]	@ (80255e4 <Ain_MainFunction+0x2dc>)
 8025386:	689b      	ldr	r3, [r3, #8]
 8025388:	4618      	mov	r0, r3
 802538a:	f7fb f8b3 	bl	80204f4 <__aeabi_ui2d>
 802538e:	4602      	mov	r2, r0
 8025390:	460b      	mov	r3, r1
 8025392:	a18b      	add	r1, pc, #556	@ (adr r1, 80255c0 <Ain_MainFunction+0x2b8>)
 8025394:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025398:	f7fb fa50 	bl	802083c <__aeabi_ddiv>
 802539c:	4602      	mov	r2, r0
 802539e:	460b      	mov	r3, r1
 80253a0:	4610      	mov	r0, r2
 80253a2:	4619      	mov	r1, r3
 80253a4:	f7fb fb32 	bl	8020a0c <__aeabi_d2f>
 80253a8:	4603      	mov	r3, r0
 80253aa:	4a90      	ldr	r2, [pc, #576]	@ (80255ec <Ain_MainFunction+0x2e4>)
 80253ac:	6013      	str	r3, [r2, #0]
	else
	{
		/* Do nothing. */
	}
	if(Ain_MeasValues[1] > 0 && Ain_VrefInt > 0)
 80253ae:	4b8d      	ldr	r3, [pc, #564]	@ (80255e4 <Ain_MainFunction+0x2dc>)
 80253b0:	685b      	ldr	r3, [r3, #4]
 80253b2:	2b00      	cmp	r3, #0
 80253b4:	d03e      	beq.n	8025434 <Ain_MainFunction+0x12c>
 80253b6:	4b8d      	ldr	r3, [pc, #564]	@ (80255ec <Ain_MainFunction+0x2e4>)
 80253b8:	edd3 7a00 	vldr	s15, [r3]
 80253bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80253c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80253c4:	dd36      	ble.n	8025434 <Ain_MainFunction+0x12c>
	{
		aux1 = Ain_VrefInt * Ain_MeasValues[1] / 4095;
 80253c6:	4b87      	ldr	r3, [pc, #540]	@ (80255e4 <Ain_MainFunction+0x2dc>)
 80253c8:	685b      	ldr	r3, [r3, #4]
 80253ca:	ee07 3a90 	vmov	s15, r3
 80253ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80253d2:	4b86      	ldr	r3, [pc, #536]	@ (80255ec <Ain_MainFunction+0x2e4>)
 80253d4:	edd3 7a00 	vldr	s15, [r3]
 80253d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80253dc:	eddf 6a84 	vldr	s13, [pc, #528]	@ 80255f0 <Ain_MainFunction+0x2e8>
 80253e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80253e4:	4b83      	ldr	r3, [pc, #524]	@ (80255f4 <Ain_MainFunction+0x2ec>)
 80253e6:	edc3 7a00 	vstr	s15, [r3]
		Ain_McuTemp = ((aux1 - 0.76) / 0.0025) + 25;
 80253ea:	4b82      	ldr	r3, [pc, #520]	@ (80255f4 <Ain_MainFunction+0x2ec>)
 80253ec:	681b      	ldr	r3, [r3, #0]
 80253ee:	4618      	mov	r0, r3
 80253f0:	f7fb f8a2 	bl	8020538 <__aeabi_f2d>
 80253f4:	a374      	add	r3, pc, #464	@ (adr r3, 80255c8 <Ain_MainFunction+0x2c0>)
 80253f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80253fa:	f7fa ff3d 	bl	8020278 <__aeabi_dsub>
 80253fe:	4602      	mov	r2, r0
 8025400:	460b      	mov	r3, r1
 8025402:	4610      	mov	r0, r2
 8025404:	4619      	mov	r1, r3
 8025406:	a372      	add	r3, pc, #456	@ (adr r3, 80255d0 <Ain_MainFunction+0x2c8>)
 8025408:	e9d3 2300 	ldrd	r2, r3, [r3]
 802540c:	f7fb fa16 	bl	802083c <__aeabi_ddiv>
 8025410:	4602      	mov	r2, r0
 8025412:	460b      	mov	r3, r1
 8025414:	4610      	mov	r0, r2
 8025416:	4619      	mov	r1, r3
 8025418:	f04f 0200 	mov.w	r2, #0
 802541c:	4b76      	ldr	r3, [pc, #472]	@ (80255f8 <Ain_MainFunction+0x2f0>)
 802541e:	f7fa ff2d 	bl	802027c <__adddf3>
 8025422:	4602      	mov	r2, r0
 8025424:	460b      	mov	r3, r1
 8025426:	4610      	mov	r0, r2
 8025428:	4619      	mov	r1, r3
 802542a:	f7fb faef 	bl	8020a0c <__aeabi_d2f>
 802542e:	4603      	mov	r3, r0
 8025430:	4a72      	ldr	r2, [pc, #456]	@ (80255fc <Ain_MainFunction+0x2f4>)
 8025432:	6013      	str	r3, [r2, #0]
	}
	else
	{
		/* Do nothing. */
	}
	switch(hdma_adc1.ErrorCode)
 8025434:	4b72      	ldr	r3, [pc, #456]	@ (8025600 <Ain_MainFunction+0x2f8>)
 8025436:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8025438:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 802543c:	f000 8084 	beq.w	8025548 <Ain_MainFunction+0x240>
 8025440:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8025444:	f200 8089 	bhi.w	802555a <Ain_MainFunction+0x252>
 8025448:	2b80      	cmp	r3, #128	@ 0x80
 802544a:	d074      	beq.n	8025536 <Ain_MainFunction+0x22e>
 802544c:	2b80      	cmp	r3, #128	@ 0x80
 802544e:	f200 8084 	bhi.w	802555a <Ain_MainFunction+0x252>
 8025452:	2b20      	cmp	r3, #32
 8025454:	d848      	bhi.n	80254e8 <Ain_MainFunction+0x1e0>
 8025456:	2b00      	cmp	r3, #0
 8025458:	d07f      	beq.n	802555a <Ain_MainFunction+0x252>
 802545a:	3b01      	subs	r3, #1
 802545c:	2b1f      	cmp	r3, #31
 802545e:	d87c      	bhi.n	802555a <Ain_MainFunction+0x252>
 8025460:	a201      	add	r2, pc, #4	@ (adr r2, 8025468 <Ain_MainFunction+0x160>)
 8025462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8025466:	bf00      	nop
 8025468:	0802557f 	.word	0x0802557f
 802546c:	080254ef 	.word	0x080254ef
 8025470:	0802555b 	.word	0x0802555b
 8025474:	08025501 	.word	0x08025501
 8025478:	0802555b 	.word	0x0802555b
 802547c:	0802555b 	.word	0x0802555b
 8025480:	0802555b 	.word	0x0802555b
 8025484:	0802555b 	.word	0x0802555b
 8025488:	0802555b 	.word	0x0802555b
 802548c:	0802555b 	.word	0x0802555b
 8025490:	0802555b 	.word	0x0802555b
 8025494:	0802555b 	.word	0x0802555b
 8025498:	0802555b 	.word	0x0802555b
 802549c:	0802555b 	.word	0x0802555b
 80254a0:	0802555b 	.word	0x0802555b
 80254a4:	0802555b 	.word	0x0802555b
 80254a8:	0802555b 	.word	0x0802555b
 80254ac:	0802555b 	.word	0x0802555b
 80254b0:	0802555b 	.word	0x0802555b
 80254b4:	0802555b 	.word	0x0802555b
 80254b8:	0802555b 	.word	0x0802555b
 80254bc:	0802555b 	.word	0x0802555b
 80254c0:	0802555b 	.word	0x0802555b
 80254c4:	0802555b 	.word	0x0802555b
 80254c8:	0802555b 	.word	0x0802555b
 80254cc:	0802555b 	.word	0x0802555b
 80254d0:	0802555b 	.word	0x0802555b
 80254d4:	0802555b 	.word	0x0802555b
 80254d8:	0802555b 	.word	0x0802555b
 80254dc:	0802555b 	.word	0x0802555b
 80254e0:	0802555b 	.word	0x0802555b
 80254e4:	08025513 	.word	0x08025513
 80254e8:	2b40      	cmp	r3, #64	@ 0x40
 80254ea:	d01b      	beq.n	8025524 <Ain_MainFunction+0x21c>
 80254ec:	e035      	b.n	802555a <Ain_MainFunction+0x252>
	case HAL_DMA_ERROR_TE:
//		Ain_DmaErrArr[0]++;
//		Ain_ErrorFlag = 1;
		break;
	case HAL_DMA_ERROR_FE:
		Ain_DmaErrArr[1]++;
 80254ee:	4b45      	ldr	r3, [pc, #276]	@ (8025604 <Ain_MainFunction+0x2fc>)
 80254f0:	685b      	ldr	r3, [r3, #4]
 80254f2:	3301      	adds	r3, #1
 80254f4:	4a43      	ldr	r2, [pc, #268]	@ (8025604 <Ain_MainFunction+0x2fc>)
 80254f6:	6053      	str	r3, [r2, #4]
		Ain_ErrorFlag = 1;
 80254f8:	4b43      	ldr	r3, [pc, #268]	@ (8025608 <Ain_MainFunction+0x300>)
 80254fa:	2201      	movs	r2, #1
 80254fc:	701a      	strb	r2, [r3, #0]
		break;
 80254fe:	e03f      	b.n	8025580 <Ain_MainFunction+0x278>
	case HAL_DMA_ERROR_DME:
		Ain_DmaErrArr[2]++;
 8025500:	4b40      	ldr	r3, [pc, #256]	@ (8025604 <Ain_MainFunction+0x2fc>)
 8025502:	689b      	ldr	r3, [r3, #8]
 8025504:	3301      	adds	r3, #1
 8025506:	4a3f      	ldr	r2, [pc, #252]	@ (8025604 <Ain_MainFunction+0x2fc>)
 8025508:	6093      	str	r3, [r2, #8]
		Ain_ErrorFlag = 1;
 802550a:	4b3f      	ldr	r3, [pc, #252]	@ (8025608 <Ain_MainFunction+0x300>)
 802550c:	2201      	movs	r2, #1
 802550e:	701a      	strb	r2, [r3, #0]
		break;
 8025510:	e036      	b.n	8025580 <Ain_MainFunction+0x278>
	case HAL_DMA_ERROR_TIMEOUT:
		Ain_DmaErrArr[3]++;
 8025512:	4b3c      	ldr	r3, [pc, #240]	@ (8025604 <Ain_MainFunction+0x2fc>)
 8025514:	68db      	ldr	r3, [r3, #12]
 8025516:	3301      	adds	r3, #1
 8025518:	4a3a      	ldr	r2, [pc, #232]	@ (8025604 <Ain_MainFunction+0x2fc>)
 802551a:	60d3      	str	r3, [r2, #12]
		Ain_ErrorFlag = 1;
 802551c:	4b3a      	ldr	r3, [pc, #232]	@ (8025608 <Ain_MainFunction+0x300>)
 802551e:	2201      	movs	r2, #1
 8025520:	701a      	strb	r2, [r3, #0]
		break;
 8025522:	e02d      	b.n	8025580 <Ain_MainFunction+0x278>
	case HAL_DMA_ERROR_PARAM:
		Ain_DmaErrArr[4]++;
 8025524:	4b37      	ldr	r3, [pc, #220]	@ (8025604 <Ain_MainFunction+0x2fc>)
 8025526:	691b      	ldr	r3, [r3, #16]
 8025528:	3301      	adds	r3, #1
 802552a:	4a36      	ldr	r2, [pc, #216]	@ (8025604 <Ain_MainFunction+0x2fc>)
 802552c:	6113      	str	r3, [r2, #16]
		Ain_ErrorFlag = 1;
 802552e:	4b36      	ldr	r3, [pc, #216]	@ (8025608 <Ain_MainFunction+0x300>)
 8025530:	2201      	movs	r2, #1
 8025532:	701a      	strb	r2, [r3, #0]
		break;
 8025534:	e024      	b.n	8025580 <Ain_MainFunction+0x278>
	case HAL_DMA_ERROR_NO_XFER:
		Ain_DmaErrArr[5]++;
 8025536:	4b33      	ldr	r3, [pc, #204]	@ (8025604 <Ain_MainFunction+0x2fc>)
 8025538:	695b      	ldr	r3, [r3, #20]
 802553a:	3301      	adds	r3, #1
 802553c:	4a31      	ldr	r2, [pc, #196]	@ (8025604 <Ain_MainFunction+0x2fc>)
 802553e:	6153      	str	r3, [r2, #20]
		Ain_ErrorFlag = 1;
 8025540:	4b31      	ldr	r3, [pc, #196]	@ (8025608 <Ain_MainFunction+0x300>)
 8025542:	2201      	movs	r2, #1
 8025544:	701a      	strb	r2, [r3, #0]
		break;
 8025546:	e01b      	b.n	8025580 <Ain_MainFunction+0x278>
	case HAL_DMA_ERROR_NOT_SUPPORTED:
		Ain_DmaErrArr[6]++;
 8025548:	4b2e      	ldr	r3, [pc, #184]	@ (8025604 <Ain_MainFunction+0x2fc>)
 802554a:	699b      	ldr	r3, [r3, #24]
 802554c:	3301      	adds	r3, #1
 802554e:	4a2d      	ldr	r2, [pc, #180]	@ (8025604 <Ain_MainFunction+0x2fc>)
 8025550:	6193      	str	r3, [r2, #24]
		Ain_ErrorFlag = 1;
 8025552:	4b2d      	ldr	r3, [pc, #180]	@ (8025608 <Ain_MainFunction+0x300>)
 8025554:	2201      	movs	r2, #1
 8025556:	701a      	strb	r2, [r3, #0]
		break;
 8025558:	e012      	b.n	8025580 <Ain_MainFunction+0x278>
	default:
		for(uint8 i = 0; i < 6; i++) Ain_DmaErrArr[i] = 0;
 802555a:	2300      	movs	r3, #0
 802555c:	71fb      	strb	r3, [r7, #7]
 802555e:	e007      	b.n	8025570 <Ain_MainFunction+0x268>
 8025560:	79fb      	ldrb	r3, [r7, #7]
 8025562:	4a28      	ldr	r2, [pc, #160]	@ (8025604 <Ain_MainFunction+0x2fc>)
 8025564:	2100      	movs	r1, #0
 8025566:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 802556a:	79fb      	ldrb	r3, [r7, #7]
 802556c:	3301      	adds	r3, #1
 802556e:	71fb      	strb	r3, [r7, #7]
 8025570:	79fb      	ldrb	r3, [r7, #7]
 8025572:	2b05      	cmp	r3, #5
 8025574:	d9f4      	bls.n	8025560 <Ain_MainFunction+0x258>
		Ain_ErrorFlag = 0;
 8025576:	4b24      	ldr	r3, [pc, #144]	@ (8025608 <Ain_MainFunction+0x300>)
 8025578:	2200      	movs	r2, #0
 802557a:	701a      	strb	r2, [r3, #0]
		break;
 802557c:	e000      	b.n	8025580 <Ain_MainFunction+0x278>
		break;
 802557e:	bf00      	nop
	}
	/* Invalidate measurements in case of errors. */
	if(1 == Ain_ErrorFlag) for(uint8 i = 0; i < 3; i++) Ain_MeasValues[i] = 0;
 8025580:	4b21      	ldr	r3, [pc, #132]	@ (8025608 <Ain_MainFunction+0x300>)
 8025582:	781b      	ldrb	r3, [r3, #0]
 8025584:	2b01      	cmp	r3, #1
 8025586:	d10e      	bne.n	80255a6 <Ain_MainFunction+0x29e>
 8025588:	2300      	movs	r3, #0
 802558a:	71bb      	strb	r3, [r7, #6]
 802558c:	e007      	b.n	802559e <Ain_MainFunction+0x296>
 802558e:	79bb      	ldrb	r3, [r7, #6]
 8025590:	4a14      	ldr	r2, [pc, #80]	@ (80255e4 <Ain_MainFunction+0x2dc>)
 8025592:	2100      	movs	r1, #0
 8025594:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8025598:	79bb      	ldrb	r3, [r7, #6]
 802559a:	3301      	adds	r3, #1
 802559c:	71bb      	strb	r3, [r7, #6]
 802559e:	79bb      	ldrb	r3, [r7, #6]
 80255a0:	2b02      	cmp	r3, #2
 80255a2:	d9f4      	bls.n	802558e <Ain_MainFunction+0x286>
 80255a4:	e03d      	b.n	8025622 <Ain_MainFunction+0x31a>
	else for(uint8 i = 0; i < 3; i++) Ain_ErrArr[i] = 0;
 80255a6:	2300      	movs	r3, #0
 80255a8:	717b      	strb	r3, [r7, #5]
 80255aa:	e037      	b.n	802561c <Ain_MainFunction+0x314>
 80255ac:	f3af 8000 	nop.w
 80255b0:	f5c28f5c 	.word	0xf5c28f5c
 80255b4:	3ff35c28 	.word	0x3ff35c28
 80255b8:	00000000 	.word	0x00000000
 80255bc:	40affe00 	.word	0x40affe00
 80255c0:	33333333 	.word	0x33333333
 80255c4:	40b35af3 	.word	0x40b35af3
 80255c8:	851eb852 	.word	0x851eb852
 80255cc:	3fe851eb 	.word	0x3fe851eb
 80255d0:	47ae147b 	.word	0x47ae147b
 80255d4:	3f647ae1 	.word	0x3f647ae1
 80255d8:	200000e4 	.word	0x200000e4
 80255dc:	10000ad0 	.word	0x10000ad0
 80255e0:	10000acc 	.word	0x10000acc
 80255e4:	200000a8 	.word	0x200000a8
 80255e8:	10000b08 	.word	0x10000b08
 80255ec:	10000b00 	.word	0x10000b00
 80255f0:	457ff000 	.word	0x457ff000
 80255f4:	10000b0c 	.word	0x10000b0c
 80255f8:	40390000 	.word	0x40390000
 80255fc:	10000b04 	.word	0x10000b04
 8025600:	20000148 	.word	0x20000148
 8025604:	10000ae0 	.word	0x10000ae0
 8025608:	10000afc 	.word	0x10000afc
 802560c:	797b      	ldrb	r3, [r7, #5]
 802560e:	4a09      	ldr	r2, [pc, #36]	@ (8025634 <Ain_MainFunction+0x32c>)
 8025610:	2100      	movs	r1, #0
 8025612:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8025616:	797b      	ldrb	r3, [r7, #5]
 8025618:	3301      	adds	r3, #1
 802561a:	717b      	strb	r3, [r7, #5]
 802561c:	797b      	ldrb	r3, [r7, #5]
 802561e:	2b02      	cmp	r3, #2
 8025620:	d9f4      	bls.n	802560c <Ain_MainFunction+0x304>
	Ain_MainCounter++;
 8025622:	4b05      	ldr	r3, [pc, #20]	@ (8025638 <Ain_MainFunction+0x330>)
 8025624:	681b      	ldr	r3, [r3, #0]
 8025626:	3301      	adds	r3, #1
 8025628:	4a03      	ldr	r2, [pc, #12]	@ (8025638 <Ain_MainFunction+0x330>)
 802562a:	6013      	str	r3, [r2, #0]
}
 802562c:	bf00      	nop
 802562e:	3708      	adds	r7, #8
 8025630:	46bd      	mov	sp, r7
 8025632:	bd80      	pop	{r7, pc}
 8025634:	10000ad4 	.word	0x10000ad4
 8025638:	10000acc 	.word	0x10000acc

0802563c <HAL_ADC_ErrorCallback>:

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 802563c:	b480      	push	{r7}
 802563e:	b083      	sub	sp, #12
 8025640:	af00      	add	r7, sp, #0
 8025642:	6078      	str	r0, [r7, #4]
	switch(hadc->ErrorCode)
 8025644:	687b      	ldr	r3, [r7, #4]
 8025646:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8025648:	2b04      	cmp	r3, #4
 802564a:	d012      	beq.n	8025672 <HAL_ADC_ErrorCallback+0x36>
 802564c:	2b04      	cmp	r3, #4
 802564e:	d816      	bhi.n	802567e <HAL_ADC_ErrorCallback+0x42>
 8025650:	2b01      	cmp	r3, #1
 8025652:	d002      	beq.n	802565a <HAL_ADC_ErrorCallback+0x1e>
 8025654:	2b02      	cmp	r3, #2
 8025656:	d006      	beq.n	8025666 <HAL_ADC_ErrorCallback+0x2a>
		break;
	case HAL_ADC_ERROR_DMA:
		Ain_ErrArr[2]++;
		break;
	default:
		break;
 8025658:	e011      	b.n	802567e <HAL_ADC_ErrorCallback+0x42>
		Ain_ErrArr[0]++;
 802565a:	4b0c      	ldr	r3, [pc, #48]	@ (802568c <HAL_ADC_ErrorCallback+0x50>)
 802565c:	681b      	ldr	r3, [r3, #0]
 802565e:	3301      	adds	r3, #1
 8025660:	4a0a      	ldr	r2, [pc, #40]	@ (802568c <HAL_ADC_ErrorCallback+0x50>)
 8025662:	6013      	str	r3, [r2, #0]
		break;
 8025664:	e00c      	b.n	8025680 <HAL_ADC_ErrorCallback+0x44>
		Ain_ErrArr[1]++;
 8025666:	4b09      	ldr	r3, [pc, #36]	@ (802568c <HAL_ADC_ErrorCallback+0x50>)
 8025668:	685b      	ldr	r3, [r3, #4]
 802566a:	3301      	adds	r3, #1
 802566c:	4a07      	ldr	r2, [pc, #28]	@ (802568c <HAL_ADC_ErrorCallback+0x50>)
 802566e:	6053      	str	r3, [r2, #4]
		break;
 8025670:	e006      	b.n	8025680 <HAL_ADC_ErrorCallback+0x44>
		Ain_ErrArr[2]++;
 8025672:	4b06      	ldr	r3, [pc, #24]	@ (802568c <HAL_ADC_ErrorCallback+0x50>)
 8025674:	689b      	ldr	r3, [r3, #8]
 8025676:	3301      	adds	r3, #1
 8025678:	4a04      	ldr	r2, [pc, #16]	@ (802568c <HAL_ADC_ErrorCallback+0x50>)
 802567a:	6093      	str	r3, [r2, #8]
		break;
 802567c:	e000      	b.n	8025680 <HAL_ADC_ErrorCallback+0x44>
		break;
 802567e:	bf00      	nop
	}
}
 8025680:	bf00      	nop
 8025682:	370c      	adds	r7, #12
 8025684:	46bd      	mov	sp, r7
 8025686:	f85d 7b04 	ldr.w	r7, [sp], #4
 802568a:	4770      	bx	lr
 802568c:	10000ad4 	.word	0x10000ad4

08025690 <Nvm_ReadAll>:
void Nvm_ReadAll(void);
void Nvm_WriteAll(void);
void NvM_FlashReadData(uint32 StartSectorAddress, uint32 *RxBuf, uint16 numberofwords);
uint32 NvM_FlashWriteData(uint32 StartSectorAddress, uint32 *Data, uint16 numberofwords, uint32 Sector);
void Nvm_ReadAll(void)
{
 8025690:	b580      	push	{r7, lr}
 8025692:	b082      	sub	sp, #8
 8025694:	af00      	add	r7, sp, #0
	NvM_FlashReadData(0x0800C000, (uint32*)Dem_DTCArray, sizeof(Dem_DTC_t) / 4);
 8025696:	220a      	movs	r2, #10
 8025698:	492f      	ldr	r1, [pc, #188]	@ (8025758 <Nvm_ReadAll+0xc8>)
 802569a:	4830      	ldr	r0, [pc, #192]	@ (802575c <Nvm_ReadAll+0xcc>)
 802569c:	f000 f936 	bl	802590c <NvM_FlashReadData>
	if(Dem_DTCArray[0].isActiveNow >= 255) memset(Dem_DTCArray, 0, sizeof(Dem_DTC_t));
 80256a0:	4b2d      	ldr	r3, [pc, #180]	@ (8025758 <Nvm_ReadAll+0xc8>)
 80256a2:	685b      	ldr	r3, [r3, #4]
 80256a4:	2bfe      	cmp	r3, #254	@ 0xfe
 80256a6:	d904      	bls.n	80256b2 <Nvm_ReadAll+0x22>
 80256a8:	2228      	movs	r2, #40	@ 0x28
 80256aa:	2100      	movs	r1, #0
 80256ac:	482a      	ldr	r0, [pc, #168]	@ (8025758 <Nvm_ReadAll+0xc8>)
 80256ae:	f012 f859 	bl	8037764 <memset>
	else
	{
		/* Do nothing. */
	}
	NvM_FlashReadData(0x08008000, Nvm_DataRecorder_CommonBlock, 54);
 80256b2:	2236      	movs	r2, #54	@ 0x36
 80256b4:	492a      	ldr	r1, [pc, #168]	@ (8025760 <Nvm_ReadAll+0xd0>)
 80256b6:	482b      	ldr	r0, [pc, #172]	@ (8025764 <Nvm_ReadAll+0xd4>)
 80256b8:	f000 f928 	bl	802590c <NvM_FlashReadData>
	if(Nvm_DataRecorder_CommonBlock[53] >= 0xffff)
 80256bc:	4b28      	ldr	r3, [pc, #160]	@ (8025760 <Nvm_ReadAll+0xd0>)
 80256be:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80256c2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80256c6:	4293      	cmp	r3, r2
 80256c8:	d914      	bls.n	80256f4 <Nvm_ReadAll+0x64>
	{
		for(uint8 i = 0; i < 54; i++) Nvm_DataRecorder_CommonBlock[i] = 0;
 80256ca:	2300      	movs	r3, #0
 80256cc:	71fb      	strb	r3, [r7, #7]
 80256ce:	e007      	b.n	80256e0 <Nvm_ReadAll+0x50>
 80256d0:	79fb      	ldrb	r3, [r7, #7]
 80256d2:	4a23      	ldr	r2, [pc, #140]	@ (8025760 <Nvm_ReadAll+0xd0>)
 80256d4:	2100      	movs	r1, #0
 80256d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80256da:	79fb      	ldrb	r3, [r7, #7]
 80256dc:	3301      	adds	r3, #1
 80256de:	71fb      	strb	r3, [r7, #7]
 80256e0:	79fb      	ldrb	r3, [r7, #7]
 80256e2:	2b35      	cmp	r3, #53	@ 0x35
 80256e4:	d9f4      	bls.n	80256d0 <Nvm_ReadAll+0x40>
		NvM_FlashWriteData(0x08008000, Nvm_DataRecorder_CommonBlock, 54, 2);
 80256e6:	2302      	movs	r3, #2
 80256e8:	2236      	movs	r2, #54	@ 0x36
 80256ea:	491d      	ldr	r1, [pc, #116]	@ (8025760 <Nvm_ReadAll+0xd0>)
 80256ec:	481d      	ldr	r0, [pc, #116]	@ (8025764 <Nvm_ReadAll+0xd4>)
 80256ee:	f000 f8b7 	bl	8025860 <NvM_FlashWriteData>
		DataRecorder_KilometerTotal = Nvm_DataRecorder_CommonBlock[0];
		DataRecorder_KilometerPerDcy = Nvm_DataRecorder_CommonBlock[1];
		for(uint8 i = 2; i < 41; i++) DataRecorder_CcmCounter[i - 2] = Nvm_DataRecorder_CommonBlock[i];
		for(uint8 i = 41; i < 54; i++) DataRecorder_ResetCounter[i - 41] = Nvm_DataRecorder_CommonBlock[i];
	}
}
 80256f2:	e02d      	b.n	8025750 <Nvm_ReadAll+0xc0>
		DataRecorder_KilometerTotal = Nvm_DataRecorder_CommonBlock[0];
 80256f4:	4b1a      	ldr	r3, [pc, #104]	@ (8025760 <Nvm_ReadAll+0xd0>)
 80256f6:	681b      	ldr	r3, [r3, #0]
 80256f8:	b2da      	uxtb	r2, r3
 80256fa:	4b1b      	ldr	r3, [pc, #108]	@ (8025768 <Nvm_ReadAll+0xd8>)
 80256fc:	701a      	strb	r2, [r3, #0]
		DataRecorder_KilometerPerDcy = Nvm_DataRecorder_CommonBlock[1];
 80256fe:	4b18      	ldr	r3, [pc, #96]	@ (8025760 <Nvm_ReadAll+0xd0>)
 8025700:	685b      	ldr	r3, [r3, #4]
 8025702:	b2da      	uxtb	r2, r3
 8025704:	4b19      	ldr	r3, [pc, #100]	@ (802576c <Nvm_ReadAll+0xdc>)
 8025706:	701a      	strb	r2, [r3, #0]
		for(uint8 i = 2; i < 41; i++) DataRecorder_CcmCounter[i - 2] = Nvm_DataRecorder_CommonBlock[i];
 8025708:	2302      	movs	r3, #2
 802570a:	71bb      	strb	r3, [r7, #6]
 802570c:	e00b      	b.n	8025726 <Nvm_ReadAll+0x96>
 802570e:	79ba      	ldrb	r2, [r7, #6]
 8025710:	79bb      	ldrb	r3, [r7, #6]
 8025712:	3b02      	subs	r3, #2
 8025714:	4912      	ldr	r1, [pc, #72]	@ (8025760 <Nvm_ReadAll+0xd0>)
 8025716:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 802571a:	4915      	ldr	r1, [pc, #84]	@ (8025770 <Nvm_ReadAll+0xe0>)
 802571c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8025720:	79bb      	ldrb	r3, [r7, #6]
 8025722:	3301      	adds	r3, #1
 8025724:	71bb      	strb	r3, [r7, #6]
 8025726:	79bb      	ldrb	r3, [r7, #6]
 8025728:	2b28      	cmp	r3, #40	@ 0x28
 802572a:	d9f0      	bls.n	802570e <Nvm_ReadAll+0x7e>
		for(uint8 i = 41; i < 54; i++) DataRecorder_ResetCounter[i - 41] = Nvm_DataRecorder_CommonBlock[i];
 802572c:	2329      	movs	r3, #41	@ 0x29
 802572e:	717b      	strb	r3, [r7, #5]
 8025730:	e00b      	b.n	802574a <Nvm_ReadAll+0xba>
 8025732:	797a      	ldrb	r2, [r7, #5]
 8025734:	797b      	ldrb	r3, [r7, #5]
 8025736:	3b29      	subs	r3, #41	@ 0x29
 8025738:	4909      	ldr	r1, [pc, #36]	@ (8025760 <Nvm_ReadAll+0xd0>)
 802573a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 802573e:	490d      	ldr	r1, [pc, #52]	@ (8025774 <Nvm_ReadAll+0xe4>)
 8025740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8025744:	797b      	ldrb	r3, [r7, #5]
 8025746:	3301      	adds	r3, #1
 8025748:	717b      	strb	r3, [r7, #5]
 802574a:	797b      	ldrb	r3, [r7, #5]
 802574c:	2b35      	cmp	r3, #53	@ 0x35
 802574e:	d9f0      	bls.n	8025732 <Nvm_ReadAll+0xa2>
}
 8025750:	bf00      	nop
 8025752:	3708      	adds	r7, #8
 8025754:	46bd      	mov	sp, r7
 8025756:	bd80      	pop	{r7, pc}
 8025758:	1000093c 	.word	0x1000093c
 802575c:	0800c000 	.word	0x0800c000
 8025760:	10000b18 	.word	0x10000b18
 8025764:	08008000 	.word	0x08008000
 8025768:	100000b0 	.word	0x100000b0
 802576c:	100000b4 	.word	0x100000b4
 8025770:	10000014 	.word	0x10000014
 8025774:	100000b8 	.word	0x100000b8

08025778 <Nvm_WriteAll>:
void Nvm_WriteAll(void)
{
 8025778:	b580      	push	{r7, lr}
 802577a:	b082      	sub	sp, #8
 802577c:	af00      	add	r7, sp, #0
	Nvm_DataRecorder_CommonBlock[0] = DataRecorder_KilometerTotal;
 802577e:	4b1f      	ldr	r3, [pc, #124]	@ (80257fc <Nvm_WriteAll+0x84>)
 8025780:	781b      	ldrb	r3, [r3, #0]
 8025782:	461a      	mov	r2, r3
 8025784:	4b1e      	ldr	r3, [pc, #120]	@ (8025800 <Nvm_WriteAll+0x88>)
 8025786:	601a      	str	r2, [r3, #0]
	Nvm_DataRecorder_CommonBlock[1] = DataRecorder_KilometerPerDcy;
 8025788:	4b1e      	ldr	r3, [pc, #120]	@ (8025804 <Nvm_WriteAll+0x8c>)
 802578a:	781b      	ldrb	r3, [r3, #0]
 802578c:	461a      	mov	r2, r3
 802578e:	4b1c      	ldr	r3, [pc, #112]	@ (8025800 <Nvm_WriteAll+0x88>)
 8025790:	605a      	str	r2, [r3, #4]
	for(uint8 i = 2; i < 41; i++) Nvm_DataRecorder_CommonBlock[i] = DataRecorder_CcmCounter[i - 2];
 8025792:	2302      	movs	r3, #2
 8025794:	71fb      	strb	r3, [r7, #7]
 8025796:	e00b      	b.n	80257b0 <Nvm_WriteAll+0x38>
 8025798:	79fb      	ldrb	r3, [r7, #7]
 802579a:	1e9a      	subs	r2, r3, #2
 802579c:	79fb      	ldrb	r3, [r7, #7]
 802579e:	491a      	ldr	r1, [pc, #104]	@ (8025808 <Nvm_WriteAll+0x90>)
 80257a0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80257a4:	4916      	ldr	r1, [pc, #88]	@ (8025800 <Nvm_WriteAll+0x88>)
 80257a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80257aa:	79fb      	ldrb	r3, [r7, #7]
 80257ac:	3301      	adds	r3, #1
 80257ae:	71fb      	strb	r3, [r7, #7]
 80257b0:	79fb      	ldrb	r3, [r7, #7]
 80257b2:	2b28      	cmp	r3, #40	@ 0x28
 80257b4:	d9f0      	bls.n	8025798 <Nvm_WriteAll+0x20>
	for(uint8 i = 41; i < 54; i++) Nvm_DataRecorder_CommonBlock[i] = DataRecorder_ResetCounter[i - 41];
 80257b6:	2329      	movs	r3, #41	@ 0x29
 80257b8:	71bb      	strb	r3, [r7, #6]
 80257ba:	e00c      	b.n	80257d6 <Nvm_WriteAll+0x5e>
 80257bc:	79bb      	ldrb	r3, [r7, #6]
 80257be:	f1a3 0229 	sub.w	r2, r3, #41	@ 0x29
 80257c2:	79bb      	ldrb	r3, [r7, #6]
 80257c4:	4911      	ldr	r1, [pc, #68]	@ (802580c <Nvm_WriteAll+0x94>)
 80257c6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80257ca:	490d      	ldr	r1, [pc, #52]	@ (8025800 <Nvm_WriteAll+0x88>)
 80257cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80257d0:	79bb      	ldrb	r3, [r7, #6]
 80257d2:	3301      	adds	r3, #1
 80257d4:	71bb      	strb	r3, [r7, #6]
 80257d6:	79bb      	ldrb	r3, [r7, #6]
 80257d8:	2b35      	cmp	r3, #53	@ 0x35
 80257da:	d9ef      	bls.n	80257bc <Nvm_WriteAll+0x44>
	NvM_FlashWriteData(0x08008000, Nvm_DataRecorder_CommonBlock, 54, 2);
 80257dc:	2302      	movs	r3, #2
 80257de:	2236      	movs	r2, #54	@ 0x36
 80257e0:	4907      	ldr	r1, [pc, #28]	@ (8025800 <Nvm_WriteAll+0x88>)
 80257e2:	480b      	ldr	r0, [pc, #44]	@ (8025810 <Nvm_WriteAll+0x98>)
 80257e4:	f000 f83c 	bl	8025860 <NvM_FlashWriteData>
	NvM_FlashWriteData(0x0800C000, (uint32*)Dem_DTCArray, sizeof(Dem_DTC_t) / 4, 3);
 80257e8:	2303      	movs	r3, #3
 80257ea:	220a      	movs	r2, #10
 80257ec:	4909      	ldr	r1, [pc, #36]	@ (8025814 <Nvm_WriteAll+0x9c>)
 80257ee:	480a      	ldr	r0, [pc, #40]	@ (8025818 <Nvm_WriteAll+0xa0>)
 80257f0:	f000 f836 	bl	8025860 <NvM_FlashWriteData>
}
 80257f4:	bf00      	nop
 80257f6:	3708      	adds	r7, #8
 80257f8:	46bd      	mov	sp, r7
 80257fa:	bd80      	pop	{r7, pc}
 80257fc:	100000b0 	.word	0x100000b0
 8025800:	10000b18 	.word	0x10000b18
 8025804:	100000b4 	.word	0x100000b4
 8025808:	10000014 	.word	0x10000014
 802580c:	100000b8 	.word	0x100000b8
 8025810:	08008000 	.word	0x08008000
 8025814:	1000093c 	.word	0x1000093c
 8025818:	0800c000 	.word	0x0800c000

0802581c <Nvm_MainFunction>:
void Nvm_MainFunction(void)
{
 802581c:	b580      	push	{r7, lr}
 802581e:	af00      	add	r7, sp, #0
	if(1 == Nvm_ReadAllPending)
 8025820:	4b0c      	ldr	r3, [pc, #48]	@ (8025854 <Nvm_MainFunction+0x38>)
 8025822:	781b      	ldrb	r3, [r3, #0]
 8025824:	2b01      	cmp	r3, #1
 8025826:	d105      	bne.n	8025834 <Nvm_MainFunction+0x18>
	{
		Nvm_ReadAll();
 8025828:	f7ff ff32 	bl	8025690 <Nvm_ReadAll>
		Nvm_ReadAllPending = 2;
 802582c:	4b09      	ldr	r3, [pc, #36]	@ (8025854 <Nvm_MainFunction+0x38>)
 802582e:	2202      	movs	r2, #2
 8025830:	701a      	strb	r2, [r3, #0]
 8025832:	e008      	b.n	8025846 <Nvm_MainFunction+0x2a>
	}
	else if(1 == Nvm_WriteAllPending)
 8025834:	4b08      	ldr	r3, [pc, #32]	@ (8025858 <Nvm_MainFunction+0x3c>)
 8025836:	781b      	ldrb	r3, [r3, #0]
 8025838:	2b01      	cmp	r3, #1
 802583a:	d104      	bne.n	8025846 <Nvm_MainFunction+0x2a>
	{
		Nvm_WriteAll();
 802583c:	f7ff ff9c 	bl	8025778 <Nvm_WriteAll>
		Nvm_WriteAllPending = 2;
 8025840:	4b05      	ldr	r3, [pc, #20]	@ (8025858 <Nvm_MainFunction+0x3c>)
 8025842:	2202      	movs	r2, #2
 8025844:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* Do nothing. */
	}
	Nvm_MainCounter++;
 8025846:	4b05      	ldr	r3, [pc, #20]	@ (802585c <Nvm_MainFunction+0x40>)
 8025848:	681b      	ldr	r3, [r3, #0]
 802584a:	3301      	adds	r3, #1
 802584c:	4a03      	ldr	r2, [pc, #12]	@ (802585c <Nvm_MainFunction+0x40>)
 802584e:	6013      	str	r3, [r2, #0]
}
 8025850:	bf00      	nop
 8025852:	bd80      	pop	{r7, pc}
 8025854:	10000b15 	.word	0x10000b15
 8025858:	10000b14 	.word	0x10000b14
 802585c:	10000b10 	.word	0x10000b10

08025860 <NvM_FlashWriteData>:
uint32 NvM_FlashWriteData(uint32 StartSectorAddress, uint32 *Data, uint16 numberofwords, uint32 Sector)
{
 8025860:	b5b0      	push	{r4, r5, r7, lr}
 8025862:	b088      	sub	sp, #32
 8025864:	af00      	add	r7, sp, #0
 8025866:	60f8      	str	r0, [r7, #12]
 8025868:	60b9      	str	r1, [r7, #8]
 802586a:	603b      	str	r3, [r7, #0]
 802586c:	4613      	mov	r3, r2
 802586e:	80fb      	strh	r3, [r7, #6]
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32 SECTORError;
	uint32 sofar=0;
 8025870:	2300      	movs	r3, #0
 8025872:	61fb      	str	r3, [r7, #28]
	uint32 StartSector = Sector;
 8025874:	683b      	ldr	r3, [r7, #0]
 8025876:	61bb      	str	r3, [r7, #24]
	uint32 EndSector = Sector;
 8025878:	683b      	ldr	r3, [r7, #0]
 802587a:	617b      	str	r3, [r7, #20]
	HAL_FLASH_Unlock();
 802587c:	f007 fdf8 	bl	802d470 <HAL_FLASH_Unlock>
	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8025880:	4b21      	ldr	r3, [pc, #132]	@ (8025908 <NvM_FlashWriteData+0xa8>)
 8025882:	2200      	movs	r2, #0
 8025884:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8025886:	4b20      	ldr	r3, [pc, #128]	@ (8025908 <NvM_FlashWriteData+0xa8>)
 8025888:	2202      	movs	r2, #2
 802588a:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Sector        = StartSector;
 802588c:	4a1e      	ldr	r2, [pc, #120]	@ (8025908 <NvM_FlashWriteData+0xa8>)
 802588e:	69bb      	ldr	r3, [r7, #24]
 8025890:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 8025892:	697a      	ldr	r2, [r7, #20]
 8025894:	69bb      	ldr	r3, [r7, #24]
 8025896:	1ad3      	subs	r3, r2, r3
 8025898:	3301      	adds	r3, #1
 802589a:	4a1b      	ldr	r2, [pc, #108]	@ (8025908 <NvM_FlashWriteData+0xa8>)
 802589c:	60d3      	str	r3, [r2, #12]
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK) return HAL_FLASH_GetError ();
 802589e:	f107 0310 	add.w	r3, r7, #16
 80258a2:	4619      	mov	r1, r3
 80258a4:	4818      	ldr	r0, [pc, #96]	@ (8025908 <NvM_FlashWriteData+0xa8>)
 80258a6:	f007 ffb5 	bl	802d814 <HAL_FLASHEx_Erase>
 80258aa:	4603      	mov	r3, r0
 80258ac:	2b00      	cmp	r3, #0
 80258ae:	d01f      	beq.n	80258f0 <NvM_FlashWriteData+0x90>
 80258b0:	f007 fe10 	bl	802d4d4 <HAL_FLASH_GetError>
 80258b4:	4603      	mov	r3, r0
 80258b6:	e022      	b.n	80258fe <NvM_FlashWriteData+0x9e>
	{
		/* Do nothing. */
	}
	while (sofar<numberofwords)
	{
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, Data[sofar]) == HAL_OK)
 80258b8:	69fb      	ldr	r3, [r7, #28]
 80258ba:	009b      	lsls	r3, r3, #2
 80258bc:	68ba      	ldr	r2, [r7, #8]
 80258be:	4413      	add	r3, r2
 80258c0:	681b      	ldr	r3, [r3, #0]
 80258c2:	2200      	movs	r2, #0
 80258c4:	461c      	mov	r4, r3
 80258c6:	4615      	mov	r5, r2
 80258c8:	4622      	mov	r2, r4
 80258ca:	462b      	mov	r3, r5
 80258cc:	68f9      	ldr	r1, [r7, #12]
 80258ce:	2002      	movs	r0, #2
 80258d0:	f007 fcb8 	bl	802d244 <HAL_FLASH_Program>
 80258d4:	4603      	mov	r3, r0
 80258d6:	2b00      	cmp	r3, #0
 80258d8:	d106      	bne.n	80258e8 <NvM_FlashWriteData+0x88>
		{
			StartSectorAddress += 4;
 80258da:	68fb      	ldr	r3, [r7, #12]
 80258dc:	3304      	adds	r3, #4
 80258de:	60fb      	str	r3, [r7, #12]
			sofar++;
 80258e0:	69fb      	ldr	r3, [r7, #28]
 80258e2:	3301      	adds	r3, #1
 80258e4:	61fb      	str	r3, [r7, #28]
 80258e6:	e003      	b.n	80258f0 <NvM_FlashWriteData+0x90>
		}
		else return HAL_FLASH_GetError ();
 80258e8:	f007 fdf4 	bl	802d4d4 <HAL_FLASH_GetError>
 80258ec:	4603      	mov	r3, r0
 80258ee:	e006      	b.n	80258fe <NvM_FlashWriteData+0x9e>
	while (sofar<numberofwords)
 80258f0:	88fb      	ldrh	r3, [r7, #6]
 80258f2:	69fa      	ldr	r2, [r7, #28]
 80258f4:	429a      	cmp	r2, r3
 80258f6:	d3df      	bcc.n	80258b8 <NvM_FlashWriteData+0x58>
	}
	HAL_FLASH_Lock();
 80258f8:	f007 fddc 	bl	802d4b4 <HAL_FLASH_Lock>
	return 0;
 80258fc:	2300      	movs	r3, #0
}
 80258fe:	4618      	mov	r0, r3
 8025900:	3720      	adds	r7, #32
 8025902:	46bd      	mov	sp, r7
 8025904:	bdb0      	pop	{r4, r5, r7, pc}
 8025906:	bf00      	nop
 8025908:	200000b4 	.word	0x200000b4

0802590c <NvM_FlashReadData>:
void NvM_FlashReadData(uint32 StartSectorAddress, uint32 *RxBuf, uint16 numberofwords)
{
 802590c:	b480      	push	{r7}
 802590e:	b087      	sub	sp, #28
 8025910:	af00      	add	r7, sp, #0
 8025912:	60f8      	str	r0, [r7, #12]
 8025914:	60b9      	str	r1, [r7, #8]
 8025916:	4613      	mov	r3, r2
 8025918:	80fb      	strh	r3, [r7, #6]
	for (uint16 i = 0; i < numberofwords; i++) RxBuf[i] = *(__IO uint32 *)(StartSectorAddress + (i * 4));
 802591a:	2300      	movs	r3, #0
 802591c:	82fb      	strh	r3, [r7, #22]
 802591e:	e00e      	b.n	802593e <NvM_FlashReadData+0x32>
 8025920:	8afb      	ldrh	r3, [r7, #22]
 8025922:	009b      	lsls	r3, r3, #2
 8025924:	461a      	mov	r2, r3
 8025926:	68fb      	ldr	r3, [r7, #12]
 8025928:	4413      	add	r3, r2
 802592a:	4619      	mov	r1, r3
 802592c:	8afb      	ldrh	r3, [r7, #22]
 802592e:	009b      	lsls	r3, r3, #2
 8025930:	68ba      	ldr	r2, [r7, #8]
 8025932:	4413      	add	r3, r2
 8025934:	680a      	ldr	r2, [r1, #0]
 8025936:	601a      	str	r2, [r3, #0]
 8025938:	8afb      	ldrh	r3, [r7, #22]
 802593a:	3301      	adds	r3, #1
 802593c:	82fb      	strh	r3, [r7, #22]
 802593e:	8afa      	ldrh	r2, [r7, #22]
 8025940:	88fb      	ldrh	r3, [r7, #6]
 8025942:	429a      	cmp	r2, r3
 8025944:	d3ec      	bcc.n	8025920 <NvM_FlashReadData+0x14>
}
 8025946:	bf00      	nop
 8025948:	bf00      	nop
 802594a:	371c      	adds	r7, #28
 802594c:	46bd      	mov	sp, r7
 802594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025952:	4770      	bx	lr

08025954 <DcmiH_MainFunction>:
void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi);
uint8 DcmiH_OV7670_InitHandler();
void DcmiH_MainFunction(void);

void DcmiH_MainFunction(void)
{
 8025954:	b580      	push	{r7, lr}
 8025956:	b082      	sub	sp, #8
 8025958:	af00      	add	r7, sp, #0
	DcmiH_Status = HAL_DCMI_GetState(&hdcmi);
 802595a:	486d      	ldr	r0, [pc, #436]	@ (8025b10 <DcmiH_MainFunction+0x1bc>)
 802595c:	f005 fac8 	bl	802aef0 <HAL_DCMI_GetState>
 8025960:	4603      	mov	r3, r0
 8025962:	461a      	mov	r2, r3
 8025964:	4b6b      	ldr	r3, [pc, #428]	@ (8025b14 <DcmiH_MainFunction+0x1c0>)
 8025966:	601a      	str	r2, [r3, #0]
	DcmiH_DmaStatus = HAL_DMA_GetState(&hdma_dcmi);
 8025968:	486b      	ldr	r0, [pc, #428]	@ (8025b18 <DcmiH_MainFunction+0x1c4>)
 802596a:	f006 f9ed 	bl	802bd48 <HAL_DMA_GetState>
 802596e:	4603      	mov	r3, r0
 8025970:	461a      	mov	r2, r3
 8025972:	4b6a      	ldr	r3, [pc, #424]	@ (8025b1c <DcmiH_MainFunction+0x1c8>)
 8025974:	601a      	str	r2, [r3, #0]
	/* Error reseting. */
	if(4 != DcmiH_Status || 4 != DcmiH_DmaStatus)
 8025976:	4b67      	ldr	r3, [pc, #412]	@ (8025b14 <DcmiH_MainFunction+0x1c0>)
 8025978:	681b      	ldr	r3, [r3, #0]
 802597a:	2b04      	cmp	r3, #4
 802597c:	d103      	bne.n	8025986 <DcmiH_MainFunction+0x32>
 802597e:	4b67      	ldr	r3, [pc, #412]	@ (8025b1c <DcmiH_MainFunction+0x1c8>)
 8025980:	681b      	ldr	r3, [r3, #0]
 8025982:	2b04      	cmp	r3, #4
 8025984:	d011      	beq.n	80259aa <DcmiH_MainFunction+0x56>
	{
		RevCam_DcmiStatus = 0;
 8025986:	4b66      	ldr	r3, [pc, #408]	@ (8025b20 <DcmiH_MainFunction+0x1cc>)
 8025988:	2200      	movs	r2, #0
 802598a:	601a      	str	r2, [r3, #0]
		for(uint8 i = 0; i < 4; i++) DcmiH_ErrArr[i] = 0;
 802598c:	2300      	movs	r3, #0
 802598e:	71fb      	strb	r3, [r7, #7]
 8025990:	e007      	b.n	80259a2 <DcmiH_MainFunction+0x4e>
 8025992:	79fb      	ldrb	r3, [r7, #7]
 8025994:	4a63      	ldr	r2, [pc, #396]	@ (8025b24 <DcmiH_MainFunction+0x1d0>)
 8025996:	2100      	movs	r1, #0
 8025998:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 802599c:	79fb      	ldrb	r3, [r7, #7]
 802599e:	3301      	adds	r3, #1
 80259a0:	71fb      	strb	r3, [r7, #7]
 80259a2:	79fb      	ldrb	r3, [r7, #7]
 80259a4:	2b03      	cmp	r3, #3
 80259a6:	d9f4      	bls.n	8025992 <DcmiH_MainFunction+0x3e>
 80259a8:	e009      	b.n	80259be <DcmiH_MainFunction+0x6a>
	}
	else
	{
		/* Retry initialization. */
		MX_DCMI_Init();
 80259aa:	f001 fa35 	bl	8026e18 <MX_DCMI_Init>
		RevCam_DcmiInitRetry++;
 80259ae:	4b5e      	ldr	r3, [pc, #376]	@ (8025b28 <DcmiH_MainFunction+0x1d4>)
 80259b0:	681b      	ldr	r3, [r3, #0]
 80259b2:	3301      	adds	r3, #1
 80259b4:	4a5c      	ldr	r2, [pc, #368]	@ (8025b28 <DcmiH_MainFunction+0x1d4>)
 80259b6:	6013      	str	r3, [r2, #0]
		RevCam_DcmiStatus = 0;
 80259b8:	4b59      	ldr	r3, [pc, #356]	@ (8025b20 <DcmiH_MainFunction+0x1cc>)
 80259ba:	2200      	movs	r2, #0
 80259bc:	601a      	str	r2, [r3, #0]
	}
	/* Error detection. */
	switch(hdma_dcmi.ErrorCode)
 80259be:	4b56      	ldr	r3, [pc, #344]	@ (8025b18 <DcmiH_MainFunction+0x1c4>)
 80259c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80259c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80259c6:	d07d      	beq.n	8025ac4 <DcmiH_MainFunction+0x170>
 80259c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80259cc:	f200 8084 	bhi.w	8025ad8 <DcmiH_MainFunction+0x184>
 80259d0:	2b20      	cmp	r3, #32
 80259d2:	d847      	bhi.n	8025a64 <DcmiH_MainFunction+0x110>
 80259d4:	2b00      	cmp	r3, #0
 80259d6:	d07f      	beq.n	8025ad8 <DcmiH_MainFunction+0x184>
 80259d8:	3b01      	subs	r3, #1
 80259da:	2b1f      	cmp	r3, #31
 80259dc:	d87c      	bhi.n	8025ad8 <DcmiH_MainFunction+0x184>
 80259de:	a201      	add	r2, pc, #4	@ (adr r2, 80259e4 <DcmiH_MainFunction+0x90>)
 80259e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80259e4:	08025a6b 	.word	0x08025a6b
 80259e8:	08025a7d 	.word	0x08025a7d
 80259ec:	08025ad9 	.word	0x08025ad9
 80259f0:	08025a8f 	.word	0x08025a8f
 80259f4:	08025ad9 	.word	0x08025ad9
 80259f8:	08025ad9 	.word	0x08025ad9
 80259fc:	08025ad9 	.word	0x08025ad9
 8025a00:	08025ad9 	.word	0x08025ad9
 8025a04:	08025ad9 	.word	0x08025ad9
 8025a08:	08025ad9 	.word	0x08025ad9
 8025a0c:	08025ad9 	.word	0x08025ad9
 8025a10:	08025ad9 	.word	0x08025ad9
 8025a14:	08025ad9 	.word	0x08025ad9
 8025a18:	08025ad9 	.word	0x08025ad9
 8025a1c:	08025ad9 	.word	0x08025ad9
 8025a20:	08025ad9 	.word	0x08025ad9
 8025a24:	08025ad9 	.word	0x08025ad9
 8025a28:	08025ad9 	.word	0x08025ad9
 8025a2c:	08025ad9 	.word	0x08025ad9
 8025a30:	08025ad9 	.word	0x08025ad9
 8025a34:	08025ad9 	.word	0x08025ad9
 8025a38:	08025ad9 	.word	0x08025ad9
 8025a3c:	08025ad9 	.word	0x08025ad9
 8025a40:	08025ad9 	.word	0x08025ad9
 8025a44:	08025ad9 	.word	0x08025ad9
 8025a48:	08025ad9 	.word	0x08025ad9
 8025a4c:	08025ad9 	.word	0x08025ad9
 8025a50:	08025ad9 	.word	0x08025ad9
 8025a54:	08025ad9 	.word	0x08025ad9
 8025a58:	08025ad9 	.word	0x08025ad9
 8025a5c:	08025ad9 	.word	0x08025ad9
 8025a60:	08025aa1 	.word	0x08025aa1
 8025a64:	2b40      	cmp	r3, #64	@ 0x40
 8025a66:	d024      	beq.n	8025ab2 <DcmiH_MainFunction+0x15e>
 8025a68:	e036      	b.n	8025ad8 <DcmiH_MainFunction+0x184>
	{
	case HAL_DMA_ERROR_TE:
		DcmiH_DmaErrArr[0]++;
 8025a6a:	4b30      	ldr	r3, [pc, #192]	@ (8025b2c <DcmiH_MainFunction+0x1d8>)
 8025a6c:	681b      	ldr	r3, [r3, #0]
 8025a6e:	3301      	adds	r3, #1
 8025a70:	4a2e      	ldr	r2, [pc, #184]	@ (8025b2c <DcmiH_MainFunction+0x1d8>)
 8025a72:	6013      	str	r3, [r2, #0]
		RevCam_DcmiStatus = HAL_DMA_ERROR_TE;
 8025a74:	4b2a      	ldr	r3, [pc, #168]	@ (8025b20 <DcmiH_MainFunction+0x1cc>)
 8025a76:	2201      	movs	r2, #1
 8025a78:	601a      	str	r2, [r3, #0]
		break;
 8025a7a:	e03f      	b.n	8025afc <DcmiH_MainFunction+0x1a8>
	case HAL_DMA_ERROR_FE:
		DcmiH_DmaErrArr[1]++;
 8025a7c:	4b2b      	ldr	r3, [pc, #172]	@ (8025b2c <DcmiH_MainFunction+0x1d8>)
 8025a7e:	685b      	ldr	r3, [r3, #4]
 8025a80:	3301      	adds	r3, #1
 8025a82:	4a2a      	ldr	r2, [pc, #168]	@ (8025b2c <DcmiH_MainFunction+0x1d8>)
 8025a84:	6053      	str	r3, [r2, #4]
		RevCam_DcmiStatus = HAL_DMA_ERROR_FE;
 8025a86:	4b26      	ldr	r3, [pc, #152]	@ (8025b20 <DcmiH_MainFunction+0x1cc>)
 8025a88:	2202      	movs	r2, #2
 8025a8a:	601a      	str	r2, [r3, #0]
		break;
 8025a8c:	e036      	b.n	8025afc <DcmiH_MainFunction+0x1a8>
	case HAL_DMA_ERROR_DME:
		DcmiH_DmaErrArr[2]++;
 8025a8e:	4b27      	ldr	r3, [pc, #156]	@ (8025b2c <DcmiH_MainFunction+0x1d8>)
 8025a90:	689b      	ldr	r3, [r3, #8]
 8025a92:	3301      	adds	r3, #1
 8025a94:	4a25      	ldr	r2, [pc, #148]	@ (8025b2c <DcmiH_MainFunction+0x1d8>)
 8025a96:	6093      	str	r3, [r2, #8]
		RevCam_DcmiStatus = HAL_DMA_ERROR_DME;
 8025a98:	4b21      	ldr	r3, [pc, #132]	@ (8025b20 <DcmiH_MainFunction+0x1cc>)
 8025a9a:	2204      	movs	r2, #4
 8025a9c:	601a      	str	r2, [r3, #0]
		break;
 8025a9e:	e02d      	b.n	8025afc <DcmiH_MainFunction+0x1a8>
	case HAL_DMA_ERROR_TIMEOUT:
		DcmiH_DmaErrArr[3]++;
 8025aa0:	4b22      	ldr	r3, [pc, #136]	@ (8025b2c <DcmiH_MainFunction+0x1d8>)
 8025aa2:	68db      	ldr	r3, [r3, #12]
 8025aa4:	3301      	adds	r3, #1
 8025aa6:	4a21      	ldr	r2, [pc, #132]	@ (8025b2c <DcmiH_MainFunction+0x1d8>)
 8025aa8:	60d3      	str	r3, [r2, #12]
		RevCam_DcmiStatus = HAL_DMA_ERROR_TIMEOUT;
 8025aaa:	4b1d      	ldr	r3, [pc, #116]	@ (8025b20 <DcmiH_MainFunction+0x1cc>)
 8025aac:	2220      	movs	r2, #32
 8025aae:	601a      	str	r2, [r3, #0]
		break;
 8025ab0:	e024      	b.n	8025afc <DcmiH_MainFunction+0x1a8>
	case HAL_DMA_ERROR_PARAM:
		DcmiH_DmaErrArr[4]++;
 8025ab2:	4b1e      	ldr	r3, [pc, #120]	@ (8025b2c <DcmiH_MainFunction+0x1d8>)
 8025ab4:	691b      	ldr	r3, [r3, #16]
 8025ab6:	3301      	adds	r3, #1
 8025ab8:	4a1c      	ldr	r2, [pc, #112]	@ (8025b2c <DcmiH_MainFunction+0x1d8>)
 8025aba:	6113      	str	r3, [r2, #16]
		RevCam_DcmiStatus = HAL_DMA_ERROR_PARAM;
 8025abc:	4b18      	ldr	r3, [pc, #96]	@ (8025b20 <DcmiH_MainFunction+0x1cc>)
 8025abe:	2240      	movs	r2, #64	@ 0x40
 8025ac0:	601a      	str	r2, [r3, #0]
		break;
 8025ac2:	e01b      	b.n	8025afc <DcmiH_MainFunction+0x1a8>
	case HAL_DMA_ERROR_NOT_SUPPORTED:
		DcmiH_DmaErrArr[6]++;
 8025ac4:	4b19      	ldr	r3, [pc, #100]	@ (8025b2c <DcmiH_MainFunction+0x1d8>)
 8025ac6:	699b      	ldr	r3, [r3, #24]
 8025ac8:	3301      	adds	r3, #1
 8025aca:	4a18      	ldr	r2, [pc, #96]	@ (8025b2c <DcmiH_MainFunction+0x1d8>)
 8025acc:	6193      	str	r3, [r2, #24]
		RevCam_DcmiStatus = HAL_DMA_ERROR_NOT_SUPPORTED;
 8025ace:	4b14      	ldr	r3, [pc, #80]	@ (8025b20 <DcmiH_MainFunction+0x1cc>)
 8025ad0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8025ad4:	601a      	str	r2, [r3, #0]
		break;
 8025ad6:	e011      	b.n	8025afc <DcmiH_MainFunction+0x1a8>
	default:
		RevCam_DcmiStatus = 0;
 8025ad8:	4b11      	ldr	r3, [pc, #68]	@ (8025b20 <DcmiH_MainFunction+0x1cc>)
 8025ada:	2200      	movs	r2, #0
 8025adc:	601a      	str	r2, [r3, #0]
		for(uint8 i = 0; i < 6; i++) DcmiH_DmaErrArr[i] = 0;
 8025ade:	2300      	movs	r3, #0
 8025ae0:	71bb      	strb	r3, [r7, #6]
 8025ae2:	e007      	b.n	8025af4 <DcmiH_MainFunction+0x1a0>
 8025ae4:	79bb      	ldrb	r3, [r7, #6]
 8025ae6:	4a11      	ldr	r2, [pc, #68]	@ (8025b2c <DcmiH_MainFunction+0x1d8>)
 8025ae8:	2100      	movs	r1, #0
 8025aea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8025aee:	79bb      	ldrb	r3, [r7, #6]
 8025af0:	3301      	adds	r3, #1
 8025af2:	71bb      	strb	r3, [r7, #6]
 8025af4:	79bb      	ldrb	r3, [r7, #6]
 8025af6:	2b05      	cmp	r3, #5
 8025af8:	d9f4      	bls.n	8025ae4 <DcmiH_MainFunction+0x190>
		break;
 8025afa:	bf00      	nop
	}
	DcmiH_MainCounter++;
 8025afc:	4b0c      	ldr	r3, [pc, #48]	@ (8025b30 <DcmiH_MainFunction+0x1dc>)
 8025afe:	681b      	ldr	r3, [r3, #0]
 8025b00:	3301      	adds	r3, #1
 8025b02:	4a0b      	ldr	r2, [pc, #44]	@ (8025b30 <DcmiH_MainFunction+0x1dc>)
 8025b04:	6013      	str	r3, [r2, #0]
}
 8025b06:	bf00      	nop
 8025b08:	3708      	adds	r7, #8
 8025b0a:	46bd      	mov	sp, r7
 8025b0c:	bd80      	pop	{r7, pc}
 8025b0e:	bf00      	nop
 8025b10:	2000020c 	.word	0x2000020c
 8025b14:	10000c18 	.word	0x10000c18
 8025b18:	20000264 	.word	0x20000264
 8025b1c:	10000c2c 	.word	0x10000c2c
 8025b20:	100007a8 	.word	0x100007a8
 8025b24:	10000c1c 	.word	0x10000c1c
 8025b28:	100007b8 	.word	0x100007b8
 8025b2c:	10000c30 	.word	0x10000c30
 8025b30:	10000c14 	.word	0x10000c14

08025b34 <HAL_DCMI_ErrorCallback>:
void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8025b34:	b480      	push	{r7}
 8025b36:	b083      	sub	sp, #12
 8025b38:	af00      	add	r7, sp, #0
 8025b3a:	6078      	str	r0, [r7, #4]
	/* Error detection. */
	switch(hdcmi->ErrorCode)
 8025b3c:	687b      	ldr	r3, [r7, #4]
 8025b3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8025b40:	2b40      	cmp	r3, #64	@ 0x40
 8025b42:	d025      	beq.n	8025b90 <HAL_DCMI_ErrorCallback+0x5c>
 8025b44:	2b40      	cmp	r3, #64	@ 0x40
 8025b46:	d82c      	bhi.n	8025ba2 <HAL_DCMI_ErrorCallback+0x6e>
 8025b48:	2b20      	cmp	r3, #32
 8025b4a:	d018      	beq.n	8025b7e <HAL_DCMI_ErrorCallback+0x4a>
 8025b4c:	2b20      	cmp	r3, #32
 8025b4e:	d828      	bhi.n	8025ba2 <HAL_DCMI_ErrorCallback+0x6e>
 8025b50:	2b01      	cmp	r3, #1
 8025b52:	d002      	beq.n	8025b5a <HAL_DCMI_ErrorCallback+0x26>
 8025b54:	2b02      	cmp	r3, #2
 8025b56:	d009      	beq.n	8025b6c <HAL_DCMI_ErrorCallback+0x38>
 8025b58:	e023      	b.n	8025ba2 <HAL_DCMI_ErrorCallback+0x6e>
	{
	case HAL_DCMI_ERROR_OVR:
		DcmiH_ErrArr[0]++;
 8025b5a:	4b17      	ldr	r3, [pc, #92]	@ (8025bb8 <HAL_DCMI_ErrorCallback+0x84>)
 8025b5c:	681b      	ldr	r3, [r3, #0]
 8025b5e:	3301      	adds	r3, #1
 8025b60:	4a15      	ldr	r2, [pc, #84]	@ (8025bb8 <HAL_DCMI_ErrorCallback+0x84>)
 8025b62:	6013      	str	r3, [r2, #0]
		RevCam_DcmiStatus = HAL_DCMI_ERROR_OVR;
 8025b64:	4b15      	ldr	r3, [pc, #84]	@ (8025bbc <HAL_DCMI_ErrorCallback+0x88>)
 8025b66:	2201      	movs	r2, #1
 8025b68:	601a      	str	r2, [r3, #0]
		break;
 8025b6a:	e01e      	b.n	8025baa <HAL_DCMI_ErrorCallback+0x76>
	case HAL_DCMI_ERROR_SYNC:
		DcmiH_ErrArr[1]++;
 8025b6c:	4b12      	ldr	r3, [pc, #72]	@ (8025bb8 <HAL_DCMI_ErrorCallback+0x84>)
 8025b6e:	685b      	ldr	r3, [r3, #4]
 8025b70:	3301      	adds	r3, #1
 8025b72:	4a11      	ldr	r2, [pc, #68]	@ (8025bb8 <HAL_DCMI_ErrorCallback+0x84>)
 8025b74:	6053      	str	r3, [r2, #4]
		RevCam_DcmiStatus = HAL_DCMI_ERROR_SYNC;
 8025b76:	4b11      	ldr	r3, [pc, #68]	@ (8025bbc <HAL_DCMI_ErrorCallback+0x88>)
 8025b78:	2202      	movs	r2, #2
 8025b7a:	601a      	str	r2, [r3, #0]
		break;
 8025b7c:	e015      	b.n	8025baa <HAL_DCMI_ErrorCallback+0x76>
	case HAL_DCMI_ERROR_TIMEOUT:
		DcmiH_ErrArr[2]++;
 8025b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8025bb8 <HAL_DCMI_ErrorCallback+0x84>)
 8025b80:	689b      	ldr	r3, [r3, #8]
 8025b82:	3301      	adds	r3, #1
 8025b84:	4a0c      	ldr	r2, [pc, #48]	@ (8025bb8 <HAL_DCMI_ErrorCallback+0x84>)
 8025b86:	6093      	str	r3, [r2, #8]
		RevCam_DcmiStatus = HAL_DCMI_ERROR_TIMEOUT;
 8025b88:	4b0c      	ldr	r3, [pc, #48]	@ (8025bbc <HAL_DCMI_ErrorCallback+0x88>)
 8025b8a:	2220      	movs	r2, #32
 8025b8c:	601a      	str	r2, [r3, #0]
		break;
 8025b8e:	e00c      	b.n	8025baa <HAL_DCMI_ErrorCallback+0x76>
	case HAL_DCMI_ERROR_DMA:
		DcmiH_ErrArr[3]++;
 8025b90:	4b09      	ldr	r3, [pc, #36]	@ (8025bb8 <HAL_DCMI_ErrorCallback+0x84>)
 8025b92:	68db      	ldr	r3, [r3, #12]
 8025b94:	3301      	adds	r3, #1
 8025b96:	4a08      	ldr	r2, [pc, #32]	@ (8025bb8 <HAL_DCMI_ErrorCallback+0x84>)
 8025b98:	60d3      	str	r3, [r2, #12]
		RevCam_DcmiStatus = HAL_DCMI_ERROR_DMA;
 8025b9a:	4b08      	ldr	r3, [pc, #32]	@ (8025bbc <HAL_DCMI_ErrorCallback+0x88>)
 8025b9c:	2240      	movs	r2, #64	@ 0x40
 8025b9e:	601a      	str	r2, [r3, #0]
		break;
 8025ba0:	e003      	b.n	8025baa <HAL_DCMI_ErrorCallback+0x76>
	default:
		RevCam_DcmiStatus = 0;
 8025ba2:	4b06      	ldr	r3, [pc, #24]	@ (8025bbc <HAL_DCMI_ErrorCallback+0x88>)
 8025ba4:	2200      	movs	r2, #0
 8025ba6:	601a      	str	r2, [r3, #0]
		break;
 8025ba8:	bf00      	nop
	}
}
 8025baa:	bf00      	nop
 8025bac:	370c      	adds	r7, #12
 8025bae:	46bd      	mov	sp, r7
 8025bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025bb4:	4770      	bx	lr
 8025bb6:	bf00      	nop
 8025bb8:	10000c1c 	.word	0x10000c1c
 8025bbc:	100007a8 	.word	0x100007a8

08025bc0 <DcmiH_OV7670_InitHandler>:
uint8 DcmiH_OV7670_InitHandler()
{
 8025bc0:	b580      	push	{r7, lr}
 8025bc2:	af00      	add	r7, sp, #0
	static uint8 retVal = 0;
	retVal = DcmiH_OV7670_Init(&hdcmi, &hdma_dcmi, &hi2c2);
 8025bc4:	4a06      	ldr	r2, [pc, #24]	@ (8025be0 <DcmiH_OV7670_InitHandler+0x20>)
 8025bc6:	4907      	ldr	r1, [pc, #28]	@ (8025be4 <DcmiH_OV7670_InitHandler+0x24>)
 8025bc8:	4807      	ldr	r0, [pc, #28]	@ (8025be8 <DcmiH_OV7670_InitHandler+0x28>)
 8025bca:	f000 f811 	bl	8025bf0 <DcmiH_OV7670_Init>
 8025bce:	4603      	mov	r3, r0
 8025bd0:	461a      	mov	r2, r3
 8025bd2:	4b06      	ldr	r3, [pc, #24]	@ (8025bec <DcmiH_OV7670_InitHandler+0x2c>)
 8025bd4:	701a      	strb	r2, [r3, #0]
	return retVal;
 8025bd6:	4b05      	ldr	r3, [pc, #20]	@ (8025bec <DcmiH_OV7670_InitHandler+0x2c>)
 8025bd8:	781b      	ldrb	r3, [r3, #0]
}
 8025bda:	4618      	mov	r0, r3
 8025bdc:	bd80      	pop	{r7, pc}
 8025bde:	bf00      	nop
 8025be0:	2000053c 	.word	0x2000053c
 8025be4:	20000264 	.word	0x20000264
 8025be8:	2000020c 	.word	0x2000020c
 8025bec:	200000e0 	.word	0x200000e0

08025bf0 <DcmiH_OV7670_Init>:
uint8 DcmiH_OV7670_Init(DCMI_HandleTypeDef *p_hdcmi, DMA_HandleTypeDef *p_hdma_dcmi, I2C_HandleTypeDef *p_hi2c)
{
 8025bf0:	b580      	push	{r7, lr}
 8025bf2:	b084      	sub	sp, #16
 8025bf4:	af00      	add	r7, sp, #0
 8025bf6:	60f8      	str	r0, [r7, #12]
 8025bf8:	60b9      	str	r1, [r7, #8]
 8025bfa:	607a      	str	r2, [r7, #4]
	static uint8 retVal = 0;
	sp_hdcmi     = p_hdcmi;
 8025bfc:	4a26      	ldr	r2, [pc, #152]	@ (8025c98 <DcmiH_OV7670_Init+0xa8>)
 8025bfe:	68fb      	ldr	r3, [r7, #12]
 8025c00:	6013      	str	r3, [r2, #0]
	sp_hdma_dcmi = p_hdma_dcmi;
 8025c02:	4a26      	ldr	r2, [pc, #152]	@ (8025c9c <DcmiH_OV7670_Init+0xac>)
 8025c04:	68bb      	ldr	r3, [r7, #8]
 8025c06:	6013      	str	r3, [r2, #0]
	sp_hi2c      = p_hi2c;
 8025c08:	4a25      	ldr	r2, [pc, #148]	@ (8025ca0 <DcmiH_OV7670_Init+0xb0>)
 8025c0a:	687b      	ldr	r3, [r7, #4]
 8025c0c:	6013      	str	r3, [r2, #0]
	s_destAddressForContiuousMode = 0;
 8025c0e:	4b25      	ldr	r3, [pc, #148]	@ (8025ca4 <DcmiH_OV7670_Init+0xb4>)
 8025c10:	2200      	movs	r2, #0
 8025c12:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8025c14:	2200      	movs	r2, #0
 8025c16:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8025c1a:	4823      	ldr	r0, [pc, #140]	@ (8025ca8 <DcmiH_OV7670_Init+0xb8>)
 8025c1c:	f008 fb94 	bl	802e348 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8025c20:	2200      	movs	r2, #0
 8025c22:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8025c26:	4820      	ldr	r0, [pc, #128]	@ (8025ca8 <DcmiH_OV7670_Init+0xb8>)
 8025c28:	f008 fb8e 	bl	802e348 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8025c2c:	2201      	movs	r2, #1
 8025c2e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8025c32:	481d      	ldr	r0, [pc, #116]	@ (8025ca8 <DcmiH_OV7670_Init+0xb8>)
 8025c34:	f008 fb88 	bl	802e348 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8025c38:	2001      	movs	r0, #1
 8025c3a:	f002 fc5b 	bl	80284f4 <HAL_Delay>
	retVal = DcmiH_OV7670_Write(0x12, 0x80);
 8025c3e:	2180      	movs	r1, #128	@ 0x80
 8025c40:	2012      	movs	r0, #18
 8025c42:	f000 f8db 	bl	8025dfc <DcmiH_OV7670_Write>
 8025c46:	4603      	mov	r3, r0
 8025c48:	461a      	mov	r2, r3
 8025c4a:	4b18      	ldr	r3, [pc, #96]	@ (8025cac <DcmiH_OV7670_Init+0xbc>)
 8025c4c:	701a      	strb	r2, [r3, #0]
	while(retVal != 0)
 8025c4e:	e00f      	b.n	8025c70 <DcmiH_OV7670_Init+0x80>
	{
		/* Retry initialization. */
		HAL_Delay(1);
 8025c50:	2001      	movs	r0, #1
 8025c52:	f002 fc4f 	bl	80284f4 <HAL_Delay>
		retVal = DcmiH_OV7670_Write(0x12, 0x80);
 8025c56:	2180      	movs	r1, #128	@ 0x80
 8025c58:	2012      	movs	r0, #18
 8025c5a:	f000 f8cf 	bl	8025dfc <DcmiH_OV7670_Write>
 8025c5e:	4603      	mov	r3, r0
 8025c60:	461a      	mov	r2, r3
 8025c62:	4b12      	ldr	r3, [pc, #72]	@ (8025cac <DcmiH_OV7670_Init+0xbc>)
 8025c64:	701a      	strb	r2, [r3, #0]
		RevCam_OV7670InitRetry++;
 8025c66:	4b12      	ldr	r3, [pc, #72]	@ (8025cb0 <DcmiH_OV7670_Init+0xc0>)
 8025c68:	681b      	ldr	r3, [r3, #0]
 8025c6a:	3301      	adds	r3, #1
 8025c6c:	4a10      	ldr	r2, [pc, #64]	@ (8025cb0 <DcmiH_OV7670_Init+0xc0>)
 8025c6e:	6013      	str	r3, [r2, #0]
	while(retVal != 0)
 8025c70:	4b0e      	ldr	r3, [pc, #56]	@ (8025cac <DcmiH_OV7670_Init+0xbc>)
 8025c72:	781b      	ldrb	r3, [r3, #0]
 8025c74:	2b00      	cmp	r3, #0
 8025c76:	d1eb      	bne.n	8025c50 <DcmiH_OV7670_Init+0x60>
	}
	HAL_Delay(1);
 8025c78:	2001      	movs	r0, #1
 8025c7a:	f002 fc3b 	bl	80284f4 <HAL_Delay>
	retVal = DcmiH_OV7670_Config(OV7670_MODE_QVGA_RGB565);
 8025c7e:	2000      	movs	r0, #0
 8025c80:	f000 f818 	bl	8025cb4 <DcmiH_OV7670_Config>
 8025c84:	4603      	mov	r3, r0
 8025c86:	461a      	mov	r2, r3
 8025c88:	4b08      	ldr	r3, [pc, #32]	@ (8025cac <DcmiH_OV7670_Init+0xbc>)
 8025c8a:	701a      	strb	r2, [r3, #0]
	return retVal;
 8025c8c:	4b07      	ldr	r3, [pc, #28]	@ (8025cac <DcmiH_OV7670_Init+0xbc>)
 8025c8e:	781b      	ldrb	r3, [r3, #0]
}
 8025c90:	4618      	mov	r0, r3
 8025c92:	3710      	adds	r7, #16
 8025c94:	46bd      	mov	sp, r7
 8025c96:	bd80      	pop	{r7, pc}
 8025c98:	200000c8 	.word	0x200000c8
 8025c9c:	200000cc 	.word	0x200000cc
 8025ca0:	10000c10 	.word	0x10000c10
 8025ca4:	200000d0 	.word	0x200000d0
 8025ca8:	40020c00 	.word	0x40020c00
 8025cac:	200000e1 	.word	0x200000e1
 8025cb0:	100007bc 	.word	0x100007bc

08025cb4 <DcmiH_OV7670_Config>:
uint8 DcmiH_OV7670_Config(uint32 mode)
{
 8025cb4:	b580      	push	{r7, lr}
 8025cb6:	b084      	sub	sp, #16
 8025cb8:	af00      	add	r7, sp, #0
 8025cba:	6078      	str	r0, [r7, #4]
	static uint8 retVal = 0;
	for(uint32 i = 0; OV7670_reg[i][0] != REG_BATT; i++)
 8025cbc:	2300      	movs	r3, #0
 8025cbe:	60fb      	str	r3, [r7, #12]
 8025cc0:	e01e      	b.n	8025d00 <DcmiH_OV7670_Config+0x4c>
	{
		retVal = DcmiH_OV7670_Write(OV7670_reg[i][0], OV7670_reg[i][1]);
 8025cc2:	4a15      	ldr	r2, [pc, #84]	@ (8025d18 <DcmiH_OV7670_Config+0x64>)
 8025cc4:	68fb      	ldr	r3, [r7, #12]
 8025cc6:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8025cca:	4913      	ldr	r1, [pc, #76]	@ (8025d18 <DcmiH_OV7670_Config+0x64>)
 8025ccc:	68fb      	ldr	r3, [r7, #12]
 8025cce:	005b      	lsls	r3, r3, #1
 8025cd0:	440b      	add	r3, r1
 8025cd2:	785b      	ldrb	r3, [r3, #1]
 8025cd4:	4619      	mov	r1, r3
 8025cd6:	4610      	mov	r0, r2
 8025cd8:	f000 f890 	bl	8025dfc <DcmiH_OV7670_Write>
 8025cdc:	4603      	mov	r3, r0
 8025cde:	461a      	mov	r2, r3
 8025ce0:	4b0e      	ldr	r3, [pc, #56]	@ (8025d1c <DcmiH_OV7670_Config+0x68>)
 8025ce2:	701a      	strb	r2, [r3, #0]
		if(0 != retVal)
 8025ce4:	4b0d      	ldr	r3, [pc, #52]	@ (8025d1c <DcmiH_OV7670_Config+0x68>)
 8025ce6:	781b      	ldrb	r3, [r3, #0]
 8025ce8:	2b00      	cmp	r3, #0
 8025cea:	d006      	beq.n	8025cfa <DcmiH_OV7670_Config+0x46>
		{
			/* Retry initialization. */
			i = 0;
 8025cec:	2300      	movs	r3, #0
 8025cee:	60fb      	str	r3, [r7, #12]
			RevCam_OV7670InitRetry++;
 8025cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8025d20 <DcmiH_OV7670_Config+0x6c>)
 8025cf2:	681b      	ldr	r3, [r3, #0]
 8025cf4:	3301      	adds	r3, #1
 8025cf6:	4a0a      	ldr	r2, [pc, #40]	@ (8025d20 <DcmiH_OV7670_Config+0x6c>)
 8025cf8:	6013      	str	r3, [r2, #0]
	for(uint32 i = 0; OV7670_reg[i][0] != REG_BATT; i++)
 8025cfa:	68fb      	ldr	r3, [r7, #12]
 8025cfc:	3301      	adds	r3, #1
 8025cfe:	60fb      	str	r3, [r7, #12]
 8025d00:	4a05      	ldr	r2, [pc, #20]	@ (8025d18 <DcmiH_OV7670_Config+0x64>)
 8025d02:	68fb      	ldr	r3, [r7, #12]
 8025d04:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8025d08:	2bff      	cmp	r3, #255	@ 0xff
 8025d0a:	d1da      	bne.n	8025cc2 <DcmiH_OV7670_Config+0xe>
		else
		{
			/* Do nothing. */
		}
	}
	return retVal;
 8025d0c:	4b03      	ldr	r3, [pc, #12]	@ (8025d1c <DcmiH_OV7670_Config+0x68>)
 8025d0e:	781b      	ldrb	r3, [r3, #0]
}
 8025d10:	4618      	mov	r0, r3
 8025d12:	3710      	adds	r7, #16
 8025d14:	46bd      	mov	sp, r7
 8025d16:	bd80      	pop	{r7, pc}
 8025d18:	08038900 	.word	0x08038900
 8025d1c:	200000e2 	.word	0x200000e2
 8025d20:	100007bc 	.word	0x100007bc

08025d24 <DcmiH_OV7670_Start>:

uint8 DcmiH_OV7670_Start(uint32 capMode, uint32 destAddress)
{
 8025d24:	b580      	push	{r7, lr}
 8025d26:	b082      	sub	sp, #8
 8025d28:	af00      	add	r7, sp, #0
 8025d2a:	6078      	str	r0, [r7, #4]
 8025d2c:	6039      	str	r1, [r7, #0]
	DcmiH_OV7670_Stop();
 8025d2e:	f000 f827 	bl	8025d80 <DcmiH_OV7670_Stop>
	if(capMode == OV7670_CAP_CONTINUOUS)
 8025d32:	687b      	ldr	r3, [r7, #4]
 8025d34:	2b00      	cmp	r3, #0
 8025d36:	d10b      	bne.n	8025d50 <DcmiH_OV7670_Start+0x2c>
	{
		s_destAddressForContiuousMode = destAddress;
 8025d38:	4a0f      	ldr	r2, [pc, #60]	@ (8025d78 <DcmiH_OV7670_Start+0x54>)
 8025d3a:	683b      	ldr	r3, [r7, #0]
 8025d3c:	6013      	str	r3, [r2, #0]
		HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_CONTINUOUS, destAddress, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT / 2);
 8025d3e:	4b0f      	ldr	r3, [pc, #60]	@ (8025d7c <DcmiH_OV7670_Start+0x58>)
 8025d40:	6818      	ldr	r0, [r3, #0]
 8025d42:	f247 5330 	movw	r3, #30000	@ 0x7530
 8025d46:	683a      	ldr	r2, [r7, #0]
 8025d48:	2100      	movs	r1, #0
 8025d4a:	f004 ff35 	bl	802abb8 <HAL_DCMI_Start_DMA>
 8025d4e:	e00d      	b.n	8025d6c <DcmiH_OV7670_Start+0x48>
	}
	else if(capMode == OV7670_CAP_SINGLE_FRAME)
 8025d50:	687b      	ldr	r3, [r7, #4]
 8025d52:	2b01      	cmp	r3, #1
 8025d54:	d10a      	bne.n	8025d6c <DcmiH_OV7670_Start+0x48>
	{
		s_destAddressForContiuousMode = 0;
 8025d56:	4b08      	ldr	r3, [pc, #32]	@ (8025d78 <DcmiH_OV7670_Start+0x54>)
 8025d58:	2200      	movs	r2, #0
 8025d5a:	601a      	str	r2, [r3, #0]
		HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_SNAPSHOT, destAddress, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT / 2);
 8025d5c:	4b07      	ldr	r3, [pc, #28]	@ (8025d7c <DcmiH_OV7670_Start+0x58>)
 8025d5e:	6818      	ldr	r0, [r3, #0]
 8025d60:	f247 5330 	movw	r3, #30000	@ 0x7530
 8025d64:	683a      	ldr	r2, [r7, #0]
 8025d66:	2102      	movs	r1, #2
 8025d68:	f004 ff26 	bl	802abb8 <HAL_DCMI_Start_DMA>
	}
	else
	{
		/* Do nothing. */
	}
	return 0;
 8025d6c:	2300      	movs	r3, #0
}
 8025d6e:	4618      	mov	r0, r3
 8025d70:	3708      	adds	r7, #8
 8025d72:	46bd      	mov	sp, r7
 8025d74:	bd80      	pop	{r7, pc}
 8025d76:	bf00      	nop
 8025d78:	200000d0 	.word	0x200000d0
 8025d7c:	200000c8 	.word	0x200000c8

08025d80 <DcmiH_OV7670_Stop>:
uint8 DcmiH_OV7670_Stop()
{
 8025d80:	b580      	push	{r7, lr}
 8025d82:	af00      	add	r7, sp, #0
	HAL_DCMI_Stop(sp_hdcmi);
 8025d84:	4b03      	ldr	r3, [pc, #12]	@ (8025d94 <DcmiH_OV7670_Stop+0x14>)
 8025d86:	681b      	ldr	r3, [r3, #0]
 8025d88:	4618      	mov	r0, r3
 8025d8a:	f004 ffc1 	bl	802ad10 <HAL_DCMI_Stop>
	return 0;
 8025d8e:	2300      	movs	r3, #0
}
 8025d90:	4618      	mov	r0, r3
 8025d92:	bd80      	pop	{r7, pc}
 8025d94:	200000c8 	.word	0x200000c8

08025d98 <HAL_DCMI_FrameEventCallback>:
{
	s_cbHsync = cbHsync;
	s_cbVsync = cbVsync;
}
void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8025d98:	b580      	push	{r7, lr}
 8025d9a:	b082      	sub	sp, #8
 8025d9c:	af00      	add	r7, sp, #0
 8025d9e:	6078      	str	r0, [r7, #4]
	if(s_cbVsync) s_cbVsync(s_currentV);
 8025da0:	4b12      	ldr	r3, [pc, #72]	@ (8025dec <HAL_DCMI_FrameEventCallback+0x54>)
 8025da2:	681b      	ldr	r3, [r3, #0]
 8025da4:	2b00      	cmp	r3, #0
 8025da6:	d005      	beq.n	8025db4 <HAL_DCMI_FrameEventCallback+0x1c>
 8025da8:	4b10      	ldr	r3, [pc, #64]	@ (8025dec <HAL_DCMI_FrameEventCallback+0x54>)
 8025daa:	681b      	ldr	r3, [r3, #0]
 8025dac:	4a10      	ldr	r2, [pc, #64]	@ (8025df0 <HAL_DCMI_FrameEventCallback+0x58>)
 8025dae:	6812      	ldr	r2, [r2, #0]
 8025db0:	4610      	mov	r0, r2
 8025db2:	4798      	blx	r3
	else
	{
		/* Do nothing. */
	}
	if(s_destAddressForContiuousMode != 0) HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32)&hdcmi->Instance->DR, s_destAddressForContiuousMode, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT / 2);
 8025db4:	4b0f      	ldr	r3, [pc, #60]	@ (8025df4 <HAL_DCMI_FrameEventCallback+0x5c>)
 8025db6:	681b      	ldr	r3, [r3, #0]
 8025db8:	2b00      	cmp	r3, #0
 8025dba:	d00b      	beq.n	8025dd4 <HAL_DCMI_FrameEventCallback+0x3c>
 8025dbc:	687b      	ldr	r3, [r7, #4]
 8025dbe:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8025dc0:	687b      	ldr	r3, [r7, #4]
 8025dc2:	681b      	ldr	r3, [r3, #0]
 8025dc4:	3328      	adds	r3, #40	@ 0x28
 8025dc6:	4619      	mov	r1, r3
 8025dc8:	4b0a      	ldr	r3, [pc, #40]	@ (8025df4 <HAL_DCMI_FrameEventCallback+0x5c>)
 8025dca:	681a      	ldr	r2, [r3, #0]
 8025dcc:	f247 5330 	movw	r3, #30000	@ 0x7530
 8025dd0:	f005 fd38 	bl	802b844 <HAL_DMA_Start_IT>
	else
	{
		/* Do nothing. */
	}
	s_currentV++;
 8025dd4:	4b06      	ldr	r3, [pc, #24]	@ (8025df0 <HAL_DCMI_FrameEventCallback+0x58>)
 8025dd6:	681b      	ldr	r3, [r3, #0]
 8025dd8:	3301      	adds	r3, #1
 8025dda:	4a05      	ldr	r2, [pc, #20]	@ (8025df0 <HAL_DCMI_FrameEventCallback+0x58>)
 8025ddc:	6013      	str	r3, [r2, #0]
	s_currentH = 0;
 8025dde:	4b06      	ldr	r3, [pc, #24]	@ (8025df8 <HAL_DCMI_FrameEventCallback+0x60>)
 8025de0:	2200      	movs	r2, #0
 8025de2:	601a      	str	r2, [r3, #0]
}
 8025de4:	bf00      	nop
 8025de6:	3708      	adds	r7, #8
 8025de8:	46bd      	mov	sp, r7
 8025dea:	bd80      	pop	{r7, pc}
 8025dec:	200000dc 	.word	0x200000dc
 8025df0:	200000d8 	.word	0x200000d8
 8025df4:	200000d0 	.word	0x200000d0
 8025df8:	200000d4 	.word	0x200000d4

08025dfc <DcmiH_OV7670_Write>:
uint8 DcmiH_OV7670_Write(uint8 regAddr, uint8 data)
{
 8025dfc:	b580      	push	{r7, lr}
 8025dfe:	b088      	sub	sp, #32
 8025e00:	af04      	add	r7, sp, #16
 8025e02:	4603      	mov	r3, r0
 8025e04:	460a      	mov	r2, r1
 8025e06:	71fb      	strb	r3, [r7, #7]
 8025e08:	4613      	mov	r3, r2
 8025e0a:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef ret = HAL_ERROR;
 8025e0c:	2301      	movs	r3, #1
 8025e0e:	73fb      	strb	r3, [r7, #15]
	do
	{
		ret = HAL_I2C_Mem_Write(sp_hi2c, SLAVE_ADDR, regAddr, I2C_MEMADD_SIZE_8BIT, &data, 1, 1);
 8025e10:	4b0a      	ldr	r3, [pc, #40]	@ (8025e3c <DcmiH_OV7670_Write+0x40>)
 8025e12:	6818      	ldr	r0, [r3, #0]
 8025e14:	79fb      	ldrb	r3, [r7, #7]
 8025e16:	b29a      	uxth	r2, r3
 8025e18:	2301      	movs	r3, #1
 8025e1a:	9302      	str	r3, [sp, #8]
 8025e1c:	2301      	movs	r3, #1
 8025e1e:	9301      	str	r3, [sp, #4]
 8025e20:	1dbb      	adds	r3, r7, #6
 8025e22:	9300      	str	r3, [sp, #0]
 8025e24:	2301      	movs	r3, #1
 8025e26:	2142      	movs	r1, #66	@ 0x42
 8025e28:	f008 fd30 	bl	802e88c <HAL_I2C_Mem_Write>
 8025e2c:	4603      	mov	r3, r0
 8025e2e:	73fb      	strb	r3, [r7, #15]
	}while(ret != HAL_OK && 0);
	return ret;
 8025e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8025e32:	4618      	mov	r0, r3
 8025e34:	3710      	adds	r7, #16
 8025e36:	46bd      	mov	sp, r7
 8025e38:	bd80      	pop	{r7, pc}
 8025e3a:	bf00      	nop
 8025e3c:	10000c10 	.word	0x10000c10

08025e40 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8025e40:	b480      	push	{r7}
 8025e42:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8025e44:	f3bf 8f4f 	dsb	sy
}
 8025e48:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8025e4a:	4b06      	ldr	r3, [pc, #24]	@ (8025e64 <__NVIC_SystemReset+0x24>)
 8025e4c:	68db      	ldr	r3, [r3, #12]
 8025e4e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8025e52:	4904      	ldr	r1, [pc, #16]	@ (8025e64 <__NVIC_SystemReset+0x24>)
 8025e54:	4b04      	ldr	r3, [pc, #16]	@ (8025e68 <__NVIC_SystemReset+0x28>)
 8025e56:	4313      	orrs	r3, r2
 8025e58:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8025e5a:	f3bf 8f4f 	dsb	sy
}
 8025e5e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8025e60:	bf00      	nop
 8025e62:	e7fd      	b.n	8025e60 <__NVIC_SystemReset+0x20>
 8025e64:	e000ed00 	.word	0xe000ed00
 8025e68:	05fa0004 	.word	0x05fa0004

08025e6c <EcuM_PerformReset>:
void EcuM_DeInitGpio(void);
void EcuM_PerformReset(uint8 param);
extern void Dem_SetDtc(uint8 IDPrimary, uint32 Reason, uint8 Status);

void EcuM_PerformReset(uint8 param)
{
 8025e6c:	b580      	push	{r7, lr}
 8025e6e:	b082      	sub	sp, #8
 8025e70:	af00      	add	r7, sp, #0
 8025e72:	4603      	mov	r3, r0
 8025e74:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8025e76:	b672      	cpsid	i
}
 8025e78:	bf00      	nop
	__disable_irq();
	if(0 != param)
 8025e7a:	79fb      	ldrb	r3, [r7, #7]
 8025e7c:	2b00      	cmp	r3, #0
 8025e7e:	d00c      	beq.n	8025e9a <EcuM_PerformReset+0x2e>
	{
		EcuM_ResetCounter[param]++;
 8025e80:	79fb      	ldrb	r3, [r7, #7]
 8025e82:	4a07      	ldr	r2, [pc, #28]	@ (8025ea0 <EcuM_PerformReset+0x34>)
 8025e84:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8025e88:	3201      	adds	r2, #1
 8025e8a:	4905      	ldr	r1, [pc, #20]	@ (8025ea0 <EcuM_PerformReset+0x34>)
 8025e8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		EcuM_ResetFlag[param] = 1;
 8025e90:	79fb      	ldrb	r3, [r7, #7]
 8025e92:	4a04      	ldr	r2, [pc, #16]	@ (8025ea4 <EcuM_PerformReset+0x38>)
 8025e94:	2101      	movs	r1, #1
 8025e96:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	else
	{
		/* Do nothing. */
	}
	__NVIC_SystemReset();
 8025e9a:	f7ff ffd1 	bl	8025e40 <__NVIC_SystemReset>
 8025e9e:	bf00      	nop
 8025ea0:	1000fc08 	.word	0x1000fc08
 8025ea4:	1000fc3c 	.word	0x1000fc3c

08025ea8 <EcuM_MainFunction>:
}
void EcuM_MainFunction(void)
{
 8025ea8:	b580      	push	{r7, lr}
 8025eaa:	b082      	sub	sp, #8
 8025eac:	af00      	add	r7, sp, #0
	if(0 == EcuM_MainCounter)
 8025eae:	4b39      	ldr	r3, [pc, #228]	@ (8025f94 <EcuM_MainFunction+0xec>)
 8025eb0:	681b      	ldr	r3, [r3, #0]
 8025eb2:	2b00      	cmp	r3, #0
 8025eb4:	d128      	bne.n	8025f08 <EcuM_MainFunction+0x60>
	{
		for(uint8 i = 0; i < 13; i++)
 8025eb6:	2300      	movs	r3, #0
 8025eb8:	71fb      	strb	r3, [r7, #7]
 8025eba:	e022      	b.n	8025f02 <EcuM_MainFunction+0x5a>
		{
			if(0 != EcuM_ResetFlag[i])
 8025ebc:	79fb      	ldrb	r3, [r7, #7]
 8025ebe:	4a36      	ldr	r2, [pc, #216]	@ (8025f98 <EcuM_MainFunction+0xf0>)
 8025ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8025ec4:	2b00      	cmp	r3, #0
 8025ec6:	d013      	beq.n	8025ef0 <EcuM_MainFunction+0x48>
			{
				Dem_SetDtc(0x11, i, 1);
 8025ec8:	79fb      	ldrb	r3, [r7, #7]
 8025eca:	2201      	movs	r2, #1
 8025ecc:	4619      	mov	r1, r3
 8025ece:	2011      	movs	r0, #17
 8025ed0:	f7ff f834 	bl	8024f3c <Dem_SetDtc>
				EcuM_ResetFlag[i] = 0;
 8025ed4:	79fb      	ldrb	r3, [r7, #7]
 8025ed6:	4a30      	ldr	r2, [pc, #192]	@ (8025f98 <EcuM_MainFunction+0xf0>)
 8025ed8:	2100      	movs	r1, #0
 8025eda:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				DataRecorder_ResetCounter[i]++;
 8025ede:	79fb      	ldrb	r3, [r7, #7]
 8025ee0:	4a2e      	ldr	r2, [pc, #184]	@ (8025f9c <EcuM_MainFunction+0xf4>)
 8025ee2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8025ee6:	3201      	adds	r2, #1
 8025ee8:	492c      	ldr	r1, [pc, #176]	@ (8025f9c <EcuM_MainFunction+0xf4>)
 8025eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8025eee:	e005      	b.n	8025efc <EcuM_MainFunction+0x54>
			}
			else Dem_SetDtc(0x11, i, 0);
 8025ef0:	79fb      	ldrb	r3, [r7, #7]
 8025ef2:	2200      	movs	r2, #0
 8025ef4:	4619      	mov	r1, r3
 8025ef6:	2011      	movs	r0, #17
 8025ef8:	f7ff f820 	bl	8024f3c <Dem_SetDtc>
		for(uint8 i = 0; i < 13; i++)
 8025efc:	79fb      	ldrb	r3, [r7, #7]
 8025efe:	3301      	adds	r3, #1
 8025f00:	71fb      	strb	r3, [r7, #7]
 8025f02:	79fb      	ldrb	r3, [r7, #7]
 8025f04:	2b0c      	cmp	r3, #12
 8025f06:	d9d9      	bls.n	8025ebc <EcuM_MainFunction+0x14>
	}
	else
	{
		/* Do nothing. */
	}
	if(0 == Nvm_ReadAllPending)
 8025f08:	4b25      	ldr	r3, [pc, #148]	@ (8025fa0 <EcuM_MainFunction+0xf8>)
 8025f0a:	781b      	ldrb	r3, [r3, #0]
 8025f0c:	2b00      	cmp	r3, #0
 8025f0e:	d103      	bne.n	8025f18 <EcuM_MainFunction+0x70>
	{
		Nvm_ReadAllPending = 1;
 8025f10:	4b23      	ldr	r3, [pc, #140]	@ (8025fa0 <EcuM_MainFunction+0xf8>)
 8025f12:	2201      	movs	r2, #1
 8025f14:	701a      	strb	r2, [r3, #0]
 8025f16:	e033      	b.n	8025f80 <EcuM_MainFunction+0xd8>
	}
	else if(2 == Nvm_ReadAllPending)
 8025f18:	4b21      	ldr	r3, [pc, #132]	@ (8025fa0 <EcuM_MainFunction+0xf8>)
 8025f1a:	781b      	ldrb	r3, [r3, #0]
 8025f1c:	2b02      	cmp	r3, #2
 8025f1e:	d12f      	bne.n	8025f80 <EcuM_MainFunction+0xd8>
	{
		if(2000 > EcuM_MainCounter) EcuM_State = 1;
 8025f20:	4b1c      	ldr	r3, [pc, #112]	@ (8025f94 <EcuM_MainFunction+0xec>)
 8025f22:	681b      	ldr	r3, [r3, #0]
 8025f24:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8025f28:	d203      	bcs.n	8025f32 <EcuM_MainFunction+0x8a>
 8025f2a:	4b1e      	ldr	r3, [pc, #120]	@ (8025fa4 <EcuM_MainFunction+0xfc>)
 8025f2c:	2201      	movs	r2, #1
 8025f2e:	701a      	strb	r2, [r3, #0]
 8025f30:	e026      	b.n	8025f80 <EcuM_MainFunction+0xd8>
		else
		{
			if(1 == CanH_RequestBusSleep)
 8025f32:	4b1d      	ldr	r3, [pc, #116]	@ (8025fa8 <EcuM_MainFunction+0x100>)
 8025f34:	781b      	ldrb	r3, [r3, #0]
 8025f36:	2b01      	cmp	r3, #1
 8025f38:	d10e      	bne.n	8025f58 <EcuM_MainFunction+0xb0>
			{
				EcuM_State = 2;
 8025f3a:	4b1a      	ldr	r3, [pc, #104]	@ (8025fa4 <EcuM_MainFunction+0xfc>)
 8025f3c:	2202      	movs	r2, #2
 8025f3e:	701a      	strb	r2, [r3, #0]
				if(0 == Nvm_WriteAllPending && 2 != Nvm_WriteAllPending) Nvm_WriteAllPending = 1;
 8025f40:	4b1a      	ldr	r3, [pc, #104]	@ (8025fac <EcuM_MainFunction+0x104>)
 8025f42:	781b      	ldrb	r3, [r3, #0]
 8025f44:	2b00      	cmp	r3, #0
 8025f46:	d10a      	bne.n	8025f5e <EcuM_MainFunction+0xb6>
 8025f48:	4b18      	ldr	r3, [pc, #96]	@ (8025fac <EcuM_MainFunction+0x104>)
 8025f4a:	781b      	ldrb	r3, [r3, #0]
 8025f4c:	2b02      	cmp	r3, #2
 8025f4e:	d006      	beq.n	8025f5e <EcuM_MainFunction+0xb6>
 8025f50:	4b16      	ldr	r3, [pc, #88]	@ (8025fac <EcuM_MainFunction+0x104>)
 8025f52:	2201      	movs	r2, #1
 8025f54:	701a      	strb	r2, [r3, #0]
 8025f56:	e002      	b.n	8025f5e <EcuM_MainFunction+0xb6>
				else
				{
					/* Do nothing. */
				}
			}
			else EcuM_State = 1;
 8025f58:	4b12      	ldr	r3, [pc, #72]	@ (8025fa4 <EcuM_MainFunction+0xfc>)
 8025f5a:	2201      	movs	r2, #1
 8025f5c:	701a      	strb	r2, [r3, #0]
			if(2 == EcuM_State && 2 == Nvm_WriteAllPending) EcuM_State = 3;
 8025f5e:	4b11      	ldr	r3, [pc, #68]	@ (8025fa4 <EcuM_MainFunction+0xfc>)
 8025f60:	781b      	ldrb	r3, [r3, #0]
 8025f62:	2b02      	cmp	r3, #2
 8025f64:	d106      	bne.n	8025f74 <EcuM_MainFunction+0xcc>
 8025f66:	4b11      	ldr	r3, [pc, #68]	@ (8025fac <EcuM_MainFunction+0x104>)
 8025f68:	781b      	ldrb	r3, [r3, #0]
 8025f6a:	2b02      	cmp	r3, #2
 8025f6c:	d102      	bne.n	8025f74 <EcuM_MainFunction+0xcc>
 8025f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8025fa4 <EcuM_MainFunction+0xfc>)
 8025f70:	2203      	movs	r2, #3
 8025f72:	701a      	strb	r2, [r3, #0]
			else
			{
				/* Do nothing. */
			}
			if(3 == EcuM_State) EcuM_GoToSleep();
 8025f74:	4b0b      	ldr	r3, [pc, #44]	@ (8025fa4 <EcuM_MainFunction+0xfc>)
 8025f76:	781b      	ldrb	r3, [r3, #0]
 8025f78:	2b03      	cmp	r3, #3
 8025f7a:	d101      	bne.n	8025f80 <EcuM_MainFunction+0xd8>
 8025f7c:	f000 f8e2 	bl	8026144 <EcuM_GoToSleep>
	}
	else
	{
		/* Do nothing. */
	}
	EcuM_MainCounter++;
 8025f80:	4b04      	ldr	r3, [pc, #16]	@ (8025f94 <EcuM_MainFunction+0xec>)
 8025f82:	681b      	ldr	r3, [r3, #0]
 8025f84:	3301      	adds	r3, #1
 8025f86:	4a03      	ldr	r2, [pc, #12]	@ (8025f94 <EcuM_MainFunction+0xec>)
 8025f88:	6013      	str	r3, [r2, #0]
}
 8025f8a:	bf00      	nop
 8025f8c:	3708      	adds	r7, #8
 8025f8e:	46bd      	mov	sp, r7
 8025f90:	bd80      	pop	{r7, pc}
 8025f92:	bf00      	nop
 8025f94:	10000c50 	.word	0x10000c50
 8025f98:	1000fc3c 	.word	0x1000fc3c
 8025f9c:	100000b8 	.word	0x100000b8
 8025fa0:	10000b15 	.word	0x10000b15
 8025fa4:	10000c4c 	.word	0x10000c4c
 8025fa8:	1000086c 	.word	0x1000086c
 8025fac:	10000b14 	.word	0x10000b14

08025fb0 <EcuM_DeInitGpio>:
void EcuM_DeInitGpio(void)
{
 8025fb0:	b580      	push	{r7, lr}
 8025fb2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BUZOUT_GPIO_Port, BUZOUT_Pin, GPIO_PIN_RESET);
 8025fb4:	2200      	movs	r2, #0
 8025fb6:	2101      	movs	r1, #1
 8025fb8:	485c      	ldr	r0, [pc, #368]	@ (802612c <EcuM_DeInitGpio+0x17c>)
 8025fba:	f008 f9c5 	bl	802e348 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, REVERSECAMERA_RESET_Pin|REVERSECAMERA_POWERDOWN_Pin, GPIO_PIN_RESET);
 8025fbe:	2200      	movs	r2, #0
 8025fc0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8025fc4:	485a      	ldr	r0, [pc, #360]	@ (8026130 <EcuM_DeInitGpio+0x180>)
 8025fc6:	f008 f9bf 	bl	802e348 <HAL_GPIO_WritePin>
	HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 8025fca:	2104      	movs	r1, #4
 8025fcc:	4859      	ldr	r0, [pc, #356]	@ (8026134 <EcuM_DeInitGpio+0x184>)
 8025fce:	f008 f895 	bl	802e0fc <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOE, GPIO_PIN_3);
 8025fd2:	2108      	movs	r1, #8
 8025fd4:	4857      	ldr	r0, [pc, #348]	@ (8026134 <EcuM_DeInitGpio+0x184>)
 8025fd6:	f008 f891 	bl	802e0fc <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOE, GPIO_PIN_4);
 8025fda:	2110      	movs	r1, #16
 8025fdc:	4855      	ldr	r0, [pc, #340]	@ (8026134 <EcuM_DeInitGpio+0x184>)
 8025fde:	f008 f88d 	bl	802e0fc <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOE, GPIO_PIN_5);
 8025fe2:	2120      	movs	r1, #32
 8025fe4:	4853      	ldr	r0, [pc, #332]	@ (8026134 <EcuM_DeInitGpio+0x184>)
 8025fe6:	f008 f889 	bl	802e0fc <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOE, GPIO_PIN_6);
 8025fea:	2140      	movs	r1, #64	@ 0x40
 8025fec:	4851      	ldr	r0, [pc, #324]	@ (8026134 <EcuM_DeInitGpio+0x184>)
 8025fee:	f008 f885 	bl	802e0fc <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOE, GPIO_PIN_0);
 8025ff2:	2101      	movs	r1, #1
 8025ff4:	484f      	ldr	r0, [pc, #316]	@ (8026134 <EcuM_DeInitGpio+0x184>)
 8025ff6:	f008 f881 	bl	802e0fc <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1);
 8025ffa:	2102      	movs	r1, #2
 8025ffc:	484d      	ldr	r0, [pc, #308]	@ (8026134 <EcuM_DeInitGpio+0x184>)
 8025ffe:	f008 f87d 	bl	802e0fc <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOC, GPIO_PIN_13);
 8026002:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8026006:	4849      	ldr	r0, [pc, #292]	@ (802612c <EcuM_DeInitGpio+0x17c>)
 8026008:	f008 f878 	bl	802e0fc <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOC, GPIO_PIN_14);
 802600c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8026010:	4846      	ldr	r0, [pc, #280]	@ (802612c <EcuM_DeInitGpio+0x17c>)
 8026012:	f008 f873 	bl	802e0fc <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOC, GPIO_PIN_15);
 8026016:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 802601a:	4844      	ldr	r0, [pc, #272]	@ (802612c <EcuM_DeInitGpio+0x17c>)
 802601c:	f008 f86e 	bl	802e0fc <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOC, GPIO_PIN_1);
 8026020:	2102      	movs	r1, #2
 8026022:	4842      	ldr	r0, [pc, #264]	@ (802612c <EcuM_DeInitGpio+0x17c>)
 8026024:	f008 f86a 	bl	802e0fc <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOC, GPIO_PIN_2);
 8026028:	2104      	movs	r1, #4
 802602a:	4840      	ldr	r0, [pc, #256]	@ (802612c <EcuM_DeInitGpio+0x17c>)
 802602c:	f008 f866 	bl	802e0fc <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOC, GPIO_PIN_3);
 8026030:	2108      	movs	r1, #8
 8026032:	483e      	ldr	r0, [pc, #248]	@ (802612c <EcuM_DeInitGpio+0x17c>)
 8026034:	f008 f862 	bl	802e0fc <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOC, GPIO_PIN_4);
 8026038:	2110      	movs	r1, #16
 802603a:	483c      	ldr	r0, [pc, #240]	@ (802612c <EcuM_DeInitGpio+0x17c>)
 802603c:	f008 f85e 	bl	802e0fc <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOC, GPIO_PIN_5);
 8026040:	2120      	movs	r1, #32
 8026042:	483a      	ldr	r0, [pc, #232]	@ (802612c <EcuM_DeInitGpio+0x17c>)
 8026044:	f008 f85a 	bl	802e0fc <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10);
 8026048:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 802604c:	4837      	ldr	r0, [pc, #220]	@ (802612c <EcuM_DeInitGpio+0x17c>)
 802604e:	f008 f855 	bl	802e0fc <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
 8026052:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8026056:	4835      	ldr	r0, [pc, #212]	@ (802612c <EcuM_DeInitGpio+0x17c>)
 8026058:	f008 f850 	bl	802e0fc <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(BUZOUT_GPIO_Port, BUZOUT_Pin);
 802605c:	2101      	movs	r1, #1
 802605e:	4833      	ldr	r0, [pc, #204]	@ (802612c <EcuM_DeInitGpio+0x17c>)
 8026060:	f008 f84c 	bl	802e0fc <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOA, GPIO_PIN_1);
 8026064:	2102      	movs	r1, #2
 8026066:	4834      	ldr	r0, [pc, #208]	@ (8026138 <EcuM_DeInitGpio+0x188>)
 8026068:	f008 f848 	bl	802e0fc <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2);
 802606c:	2104      	movs	r1, #4
 802606e:	4832      	ldr	r0, [pc, #200]	@ (8026138 <EcuM_DeInitGpio+0x188>)
 8026070:	f008 f844 	bl	802e0fc <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3);
 8026074:	2108      	movs	r1, #8
 8026076:	4830      	ldr	r0, [pc, #192]	@ (8026138 <EcuM_DeInitGpio+0x188>)
 8026078:	f008 f840 	bl	802e0fc <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5);
 802607c:	2120      	movs	r1, #32
 802607e:	482e      	ldr	r0, [pc, #184]	@ (8026138 <EcuM_DeInitGpio+0x188>)
 8026080:	f008 f83c 	bl	802e0fc <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOA, GPIO_PIN_7);
 8026084:	2180      	movs	r1, #128	@ 0x80
 8026086:	482c      	ldr	r0, [pc, #176]	@ (8026138 <EcuM_DeInitGpio+0x188>)
 8026088:	f008 f838 	bl	802e0fc <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9);
 802608c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8026090:	4829      	ldr	r0, [pc, #164]	@ (8026138 <EcuM_DeInitGpio+0x188>)
 8026092:	f008 f833 	bl	802e0fc <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOA, GPIO_PIN_10);
 8026096:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 802609a:	4827      	ldr	r0, [pc, #156]	@ (8026138 <EcuM_DeInitGpio+0x188>)
 802609c:	f008 f82e 	bl	802e0fc <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOA, GPIO_PIN_15);
 80260a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80260a4:	4824      	ldr	r0, [pc, #144]	@ (8026138 <EcuM_DeInitGpio+0x188>)
 80260a6:	f008 f829 	bl	802e0fc <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2);
 80260aa:	2104      	movs	r1, #4
 80260ac:	4823      	ldr	r0, [pc, #140]	@ (802613c <EcuM_DeInitGpio+0x18c>)
 80260ae:	f008 f825 	bl	802e0fc <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12);
 80260b2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80260b6:	4821      	ldr	r0, [pc, #132]	@ (802613c <EcuM_DeInitGpio+0x18c>)
 80260b8:	f008 f820 	bl	802e0fc <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13);
 80260bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80260c0:	481e      	ldr	r0, [pc, #120]	@ (802613c <EcuM_DeInitGpio+0x18c>)
 80260c2:	f008 f81b 	bl	802e0fc <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOB, GPIO_PIN_14);
 80260c6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80260ca:	481c      	ldr	r0, [pc, #112]	@ (802613c <EcuM_DeInitGpio+0x18c>)
 80260cc:	f008 f816 	bl	802e0fc <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOB, GPIO_PIN_15);
 80260d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80260d4:	4819      	ldr	r0, [pc, #100]	@ (802613c <EcuM_DeInitGpio+0x18c>)
 80260d6:	f008 f811 	bl	802e0fc <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOD, REVERSECAMERA_RESET_Pin);
 80260da:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80260de:	4814      	ldr	r0, [pc, #80]	@ (8026130 <EcuM_DeInitGpio+0x180>)
 80260e0:	f008 f80c 	bl	802e0fc <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOD, REVERSECAMERA_POWERDOWN_Pin);
 80260e4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80260e8:	4811      	ldr	r0, [pc, #68]	@ (8026130 <EcuM_DeInitGpio+0x180>)
 80260ea:	f008 f807 	bl	802e0fc <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 80260ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80260f2:	4811      	ldr	r0, [pc, #68]	@ (8026138 <EcuM_DeInitGpio+0x188>)
 80260f4:	f008 f802 	bl	802e0fc <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 80260f8:	2104      	movs	r1, #4
 80260fa:	480d      	ldr	r0, [pc, #52]	@ (8026130 <EcuM_DeInitGpio+0x180>)
 80260fc:	f007 fffe 	bl	802e0fc <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOD, GPIO_PIN_3);
 8026100:	2108      	movs	r1, #8
 8026102:	480b      	ldr	r0, [pc, #44]	@ (8026130 <EcuM_DeInitGpio+0x180>)
 8026104:	f007 fffa 	bl	802e0fc <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOD, GPIO_PIN_6);
 8026108:	2140      	movs	r1, #64	@ 0x40
 802610a:	4809      	ldr	r0, [pc, #36]	@ (8026130 <EcuM_DeInitGpio+0x180>)
 802610c:	f007 fff6 	bl	802e0fc <HAL_GPIO_DeInit>
	__HAL_RCC_GPIOC_CLK_DISABLE();
 8026110:	4b0b      	ldr	r3, [pc, #44]	@ (8026140 <EcuM_DeInitGpio+0x190>)
 8026112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8026114:	4a0a      	ldr	r2, [pc, #40]	@ (8026140 <EcuM_DeInitGpio+0x190>)
 8026116:	f023 0304 	bic.w	r3, r3, #4
 802611a:	6313      	str	r3, [r2, #48]	@ 0x30
	__HAL_RCC_GPIOH_CLK_DISABLE();
 802611c:	4b08      	ldr	r3, [pc, #32]	@ (8026140 <EcuM_DeInitGpio+0x190>)
 802611e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8026120:	4a07      	ldr	r2, [pc, #28]	@ (8026140 <EcuM_DeInitGpio+0x190>)
 8026122:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8026126:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8026128:	bf00      	nop
 802612a:	bd80      	pop	{r7, pc}
 802612c:	40020800 	.word	0x40020800
 8026130:	40020c00 	.word	0x40020c00
 8026134:	40021000 	.word	0x40021000
 8026138:	40020000 	.word	0x40020000
 802613c:	40020400 	.word	0x40020400
 8026140:	40023800 	.word	0x40023800

08026144 <EcuM_GoToSleep>:
void EcuM_GoToSleep(void)
{
 8026144:	b580      	push	{r7, lr}
 8026146:	b082      	sub	sp, #8
 8026148:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 802614a:	b672      	cpsid	i
}
 802614c:	bf00      	nop
	__disable_irq();
	HAL_SuspendTick();
 802614e:	f001 ff35 	bl	8027fbc <HAL_SuspendTick>
	HAL_ADC_Stop(&hadc1);
 8026152:	4825      	ldr	r0, [pc, #148]	@ (80261e8 <EcuM_GoToSleep+0xa4>)
 8026154:	f002 fbda 	bl	802890c <HAL_ADC_Stop>
	HAL_CAN_Stop(&hcan1);
 8026158:	4824      	ldr	r0, [pc, #144]	@ (80261ec <EcuM_GoToSleep+0xa8>)
 802615a:	f003 fdfd 	bl	8029d58 <HAL_CAN_Stop>
	HAL_DCMI_Stop(&hdcmi);
 802615e:	4824      	ldr	r0, [pc, #144]	@ (80261f0 <EcuM_GoToSleep+0xac>)
 8026160:	f004 fdd6 	bl	802ad10 <HAL_DCMI_Stop>
	HAL_TIM_Base_Stop(&htim9);
 8026164:	4823      	ldr	r0, [pc, #140]	@ (80261f4 <EcuM_GoToSleep+0xb0>)
 8026166:	f00c fd27 	bl	8032bb8 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop(&htim1);
 802616a:	4823      	ldr	r0, [pc, #140]	@ (80261f8 <EcuM_GoToSleep+0xb4>)
 802616c:	f00c fd24 	bl	8032bb8 <HAL_TIM_Base_Stop>
	HAL_I2C_DeInit(&hi2c2);
 8026170:	4822      	ldr	r0, [pc, #136]	@ (80261fc <EcuM_GoToSleep+0xb8>)
 8026172:	f008 fb1d 	bl	802e7b0 <HAL_I2C_DeInit>
	HAL_TIM_Base_DeInit(&htim9);
 8026176:	481f      	ldr	r0, [pc, #124]	@ (80261f4 <EcuM_GoToSleep+0xb0>)
 8026178:	f00c fc58 	bl	8032a2c <HAL_TIM_Base_DeInit>
	HAL_DCMI_DeInit(&hdcmi);
 802617c:	481c      	ldr	r0, [pc, #112]	@ (80261f0 <EcuM_GoToSleep+0xac>)
 802617e:	f004 fcf9 	bl	802ab74 <HAL_DCMI_DeInit>
	HAL_CAN_DeInit(&hcan1);
 8026182:	481a      	ldr	r0, [pc, #104]	@ (80261ec <EcuM_GoToSleep+0xa8>)
 8026184:	f003 fc14 	bl	80299b0 <HAL_CAN_DeInit>
	HAL_ADC_DeInit(&hadc1);
 8026188:	4817      	ldr	r0, [pc, #92]	@ (80261e8 <EcuM_GoToSleep+0xa4>)
 802618a:	f002 fb67 	bl	802885c <HAL_ADC_DeInit>
	for(uint8 i = 0; i < 82; i++) HAL_NVIC_ClearPendingIRQ(i);
 802618e:	2300      	movs	r3, #0
 8026190:	71fb      	strb	r3, [r7, #7]
 8026192:	e007      	b.n	80261a4 <EcuM_GoToSleep+0x60>
 8026194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8026198:	4618      	mov	r0, r3
 802619a:	f004 fcd1 	bl	802ab40 <HAL_NVIC_ClearPendingIRQ>
 802619e:	79fb      	ldrb	r3, [r7, #7]
 80261a0:	3301      	adds	r3, #1
 80261a2:	71fb      	strb	r3, [r7, #7]
 80261a4:	79fb      	ldrb	r3, [r7, #7]
 80261a6:	2b51      	cmp	r3, #81	@ 0x51
 80261a8:	d9f4      	bls.n	8026194 <EcuM_GoToSleep+0x50>
	EcuM_DeInitGpio();
 80261aa:	f7ff ff01 	bl	8025fb0 <EcuM_DeInitGpio>
	__HAL_RCC_DMA2_CLK_DISABLE();
 80261ae:	4b14      	ldr	r3, [pc, #80]	@ (8026200 <EcuM_GoToSleep+0xbc>)
 80261b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80261b2:	4a13      	ldr	r2, [pc, #76]	@ (8026200 <EcuM_GoToSleep+0xbc>)
 80261b4:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80261b8:	6313      	str	r3, [r2, #48]	@ 0x30
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 80261ba:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80261be:	f00a fbed 	bl	803099c <HAL_PWR_EnableWakeUpPin>
	SysTick->CTRL &= ~(SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk);
 80261c2:	4b10      	ldr	r3, [pc, #64]	@ (8026204 <EcuM_GoToSleep+0xc0>)
 80261c4:	681b      	ldr	r3, [r3, #0]
 80261c6:	4a0f      	ldr	r2, [pc, #60]	@ (8026204 <EcuM_GoToSleep+0xc0>)
 80261c8:	f023 0305 	bic.w	r3, r3, #5
 80261cc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80261ce:	b662      	cpsie	i
}
 80261d0:	bf00      	nop
	__enable_irq();
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFE);
 80261d2:	2102      	movs	r1, #2
 80261d4:	2001      	movs	r0, #1
 80261d6:	f00a fbfd 	bl	80309d4 <HAL_PWR_EnterSTOPMode>
	EcuM_PerformReset(0);
 80261da:	2000      	movs	r0, #0
 80261dc:	f7ff fe46 	bl	8025e6c <EcuM_PerformReset>
}
 80261e0:	bf00      	nop
 80261e2:	3708      	adds	r7, #8
 80261e4:	46bd      	mov	sp, r7
 80261e6:	bd80      	pop	{r7, pc}
 80261e8:	200000e4 	.word	0x200000e4
 80261ec:	200001a8 	.word	0x200001a8
 80261f0:	2000020c 	.word	0x2000020c
 80261f4:	200006b8 	.word	0x200006b8
 80261f8:	20000600 	.word	0x20000600
 80261fc:	2000053c 	.word	0x2000053c
 8026200:	40023800 	.word	0x40023800
 8026204:	e000e010 	.word	0xe000e010

08026208 <FsmcH_MainFunction>:
uint8 FsmcH_LcdInit(void);
void FsmcH_MainFunction(void);
extern void MX_FSMC_Init(void);

void FsmcH_MainFunction(void)
{
 8026208:	b580      	push	{r7, lr}
 802620a:	af00      	add	r7, sp, #0
	FsmcH_Status = HAL_SRAM_GetState(&hsram1);
 802620c:	480f      	ldr	r0, [pc, #60]	@ (802624c <FsmcH_MainFunction+0x44>)
 802620e:	f00c fadb 	bl	80327c8 <HAL_SRAM_GetState>
 8026212:	4603      	mov	r3, r0
 8026214:	461a      	mov	r2, r3
 8026216:	4b0e      	ldr	r3, [pc, #56]	@ (8026250 <FsmcH_MainFunction+0x48>)
 8026218:	601a      	str	r2, [r3, #0]
	if(4 == FsmcH_Status)
 802621a:	4b0d      	ldr	r3, [pc, #52]	@ (8026250 <FsmcH_MainFunction+0x48>)
 802621c:	681b      	ldr	r3, [r3, #0]
 802621e:	2b04      	cmp	r3, #4
 8026220:	d10a      	bne.n	8026238 <FsmcH_MainFunction+0x30>
	{
		DigitalCluster_FsmcDmaErrorFlag = 1;
 8026222:	4b0c      	ldr	r3, [pc, #48]	@ (8026254 <FsmcH_MainFunction+0x4c>)
 8026224:	2201      	movs	r2, #1
 8026226:	701a      	strb	r2, [r3, #0]
		FsmcH_InitRetry++;
 8026228:	4b0b      	ldr	r3, [pc, #44]	@ (8026258 <FsmcH_MainFunction+0x50>)
 802622a:	681b      	ldr	r3, [r3, #0]
 802622c:	3301      	adds	r3, #1
 802622e:	4a0a      	ldr	r2, [pc, #40]	@ (8026258 <FsmcH_MainFunction+0x50>)
 8026230:	6013      	str	r3, [r2, #0]
		MX_FSMC_Init();
 8026232:	f001 f9cf 	bl	80275d4 <MX_FSMC_Init>
 8026236:	e002      	b.n	802623e <FsmcH_MainFunction+0x36>
	}
	else DigitalCluster_FsmcDmaErrorFlag = 0;
 8026238:	4b06      	ldr	r3, [pc, #24]	@ (8026254 <FsmcH_MainFunction+0x4c>)
 802623a:	2200      	movs	r2, #0
 802623c:	701a      	strb	r2, [r3, #0]
	FsmcH_MainCounter++;
 802623e:	4b07      	ldr	r3, [pc, #28]	@ (802625c <FsmcH_MainFunction+0x54>)
 8026240:	681b      	ldr	r3, [r3, #0]
 8026242:	3301      	adds	r3, #1
 8026244:	4a05      	ldr	r2, [pc, #20]	@ (802625c <FsmcH_MainFunction+0x54>)
 8026246:	6013      	str	r3, [r2, #0]
}
 8026248:	bf00      	nop
 802624a:	bd80      	pop	{r7, pc}
 802624c:	200004d8 	.word	0x200004d8
 8026250:	10000c58 	.word	0x10000c58
 8026254:	10000727 	.word	0x10000727
 8026258:	10000c7c 	.word	0x10000c7c
 802625c:	10000c54 	.word	0x10000c54

08026260 <FsmcH_DrawHLine>:
		0x00, //
		0x00, //
};

void FsmcH_DrawHLine(uint16 x, uint16 y, uint16 width, uint16 color)
{
 8026260:	b590      	push	{r4, r7, lr}
 8026262:	b085      	sub	sp, #20
 8026264:	af00      	add	r7, sp, #0
 8026266:	4604      	mov	r4, r0
 8026268:	4608      	mov	r0, r1
 802626a:	4611      	mov	r1, r2
 802626c:	461a      	mov	r2, r3
 802626e:	4623      	mov	r3, r4
 8026270:	80fb      	strh	r3, [r7, #6]
 8026272:	4603      	mov	r3, r0
 8026274:	80bb      	strh	r3, [r7, #4]
 8026276:	460b      	mov	r3, r1
 8026278:	807b      	strh	r3, [r7, #2]
 802627a:	4613      	mov	r3, r2
 802627c:	803b      	strh	r3, [r7, #0]
	for(uint16 i = 0; i < width; i++) FsmcH_DrawPixel(x, y, color);
 802627e:	2300      	movs	r3, #0
 8026280:	81fb      	strh	r3, [r7, #14]
 8026282:	e008      	b.n	8026296 <FsmcH_DrawHLine+0x36>
 8026284:	883a      	ldrh	r2, [r7, #0]
 8026286:	88b9      	ldrh	r1, [r7, #4]
 8026288:	88fb      	ldrh	r3, [r7, #6]
 802628a:	4618      	mov	r0, r3
 802628c:	f000 f866 	bl	802635c <FsmcH_DrawPixel>
 8026290:	89fb      	ldrh	r3, [r7, #14]
 8026292:	3301      	adds	r3, #1
 8026294:	81fb      	strh	r3, [r7, #14]
 8026296:	89fa      	ldrh	r2, [r7, #14]
 8026298:	887b      	ldrh	r3, [r7, #2]
 802629a:	429a      	cmp	r2, r3
 802629c:	d3f2      	bcc.n	8026284 <FsmcH_DrawHLine+0x24>
}
 802629e:	bf00      	nop
 80262a0:	bf00      	nop
 80262a2:	3714      	adds	r7, #20
 80262a4:	46bd      	mov	sp, r7
 80262a6:	bd90      	pop	{r4, r7, pc}

080262a8 <FsmcH_DrawVLine>:
void FsmcH_DrawVLine(uint16 x, uint16 y, uint16 height, uint16 color)
{
 80262a8:	b590      	push	{r4, r7, lr}
 80262aa:	b085      	sub	sp, #20
 80262ac:	af00      	add	r7, sp, #0
 80262ae:	4604      	mov	r4, r0
 80262b0:	4608      	mov	r0, r1
 80262b2:	4611      	mov	r1, r2
 80262b4:	461a      	mov	r2, r3
 80262b6:	4623      	mov	r3, r4
 80262b8:	80fb      	strh	r3, [r7, #6]
 80262ba:	4603      	mov	r3, r0
 80262bc:	80bb      	strh	r3, [r7, #4]
 80262be:	460b      	mov	r3, r1
 80262c0:	807b      	strh	r3, [r7, #2]
 80262c2:	4613      	mov	r3, r2
 80262c4:	803b      	strh	r3, [r7, #0]
	for(uint16 i = 0; i < height; i++) FsmcH_DrawPixel(x, y, color);
 80262c6:	2300      	movs	r3, #0
 80262c8:	81fb      	strh	r3, [r7, #14]
 80262ca:	e008      	b.n	80262de <FsmcH_DrawVLine+0x36>
 80262cc:	883a      	ldrh	r2, [r7, #0]
 80262ce:	88b9      	ldrh	r1, [r7, #4]
 80262d0:	88fb      	ldrh	r3, [r7, #6]
 80262d2:	4618      	mov	r0, r3
 80262d4:	f000 f842 	bl	802635c <FsmcH_DrawPixel>
 80262d8:	89fb      	ldrh	r3, [r7, #14]
 80262da:	3301      	adds	r3, #1
 80262dc:	81fb      	strh	r3, [r7, #14]
 80262de:	89fa      	ldrh	r2, [r7, #14]
 80262e0:	887b      	ldrh	r3, [r7, #2]
 80262e2:	429a      	cmp	r2, r3
 80262e4:	d3f2      	bcc.n	80262cc <FsmcH_DrawVLine+0x24>
}
 80262e6:	bf00      	nop
 80262e8:	bf00      	nop
 80262ea:	3714      	adds	r7, #20
 80262ec:	46bd      	mov	sp, r7
 80262ee:	bd90      	pop	{r4, r7, pc}

080262f0 <FsmcH_DrawRectangle>:
void FsmcH_DrawRectangle(uint16 x, uint16 y, uint16 width, uint16 height, uint16 color)
{
 80262f0:	b590      	push	{r4, r7, lr}
 80262f2:	b083      	sub	sp, #12
 80262f4:	af00      	add	r7, sp, #0
 80262f6:	4604      	mov	r4, r0
 80262f8:	4608      	mov	r0, r1
 80262fa:	4611      	mov	r1, r2
 80262fc:	461a      	mov	r2, r3
 80262fe:	4623      	mov	r3, r4
 8026300:	80fb      	strh	r3, [r7, #6]
 8026302:	4603      	mov	r3, r0
 8026304:	80bb      	strh	r3, [r7, #4]
 8026306:	460b      	mov	r3, r1
 8026308:	807b      	strh	r3, [r7, #2]
 802630a:	4613      	mov	r3, r2
 802630c:	803b      	strh	r3, [r7, #0]
	FsmcH_DrawHLine(x, y, width, color);
 802630e:	8b3b      	ldrh	r3, [r7, #24]
 8026310:	887a      	ldrh	r2, [r7, #2]
 8026312:	88b9      	ldrh	r1, [r7, #4]
 8026314:	88f8      	ldrh	r0, [r7, #6]
 8026316:	f7ff ffa3 	bl	8026260 <FsmcH_DrawHLine>
	FsmcH_DrawHLine(x, y + height - 1, width, color);
 802631a:	88ba      	ldrh	r2, [r7, #4]
 802631c:	883b      	ldrh	r3, [r7, #0]
 802631e:	4413      	add	r3, r2
 8026320:	b29b      	uxth	r3, r3
 8026322:	3b01      	subs	r3, #1
 8026324:	b299      	uxth	r1, r3
 8026326:	8b3b      	ldrh	r3, [r7, #24]
 8026328:	887a      	ldrh	r2, [r7, #2]
 802632a:	88f8      	ldrh	r0, [r7, #6]
 802632c:	f7ff ff98 	bl	8026260 <FsmcH_DrawHLine>
	FsmcH_DrawVLine(x, y, height, color);
 8026330:	8b3b      	ldrh	r3, [r7, #24]
 8026332:	883a      	ldrh	r2, [r7, #0]
 8026334:	88b9      	ldrh	r1, [r7, #4]
 8026336:	88f8      	ldrh	r0, [r7, #6]
 8026338:	f7ff ffb6 	bl	80262a8 <FsmcH_DrawVLine>
	FsmcH_DrawVLine(x + width - 1, y, height, color);
 802633c:	88fa      	ldrh	r2, [r7, #6]
 802633e:	887b      	ldrh	r3, [r7, #2]
 8026340:	4413      	add	r3, r2
 8026342:	b29b      	uxth	r3, r3
 8026344:	3b01      	subs	r3, #1
 8026346:	b298      	uxth	r0, r3
 8026348:	8b3b      	ldrh	r3, [r7, #24]
 802634a:	883a      	ldrh	r2, [r7, #0]
 802634c:	88b9      	ldrh	r1, [r7, #4]
 802634e:	f7ff ffab 	bl	80262a8 <FsmcH_DrawVLine>
}
 8026352:	bf00      	nop
 8026354:	370c      	adds	r7, #12
 8026356:	46bd      	mov	sp, r7
 8026358:	bd90      	pop	{r4, r7, pc}
	...

0802635c <FsmcH_DrawPixel>:
void FsmcH_DrawPixel(uint16 x, uint16 y, uint16 color)
{
 802635c:	b580      	push	{r7, lr}
 802635e:	b082      	sub	sp, #8
 8026360:	af00      	add	r7, sp, #0
 8026362:	4603      	mov	r3, r0
 8026364:	80fb      	strh	r3, [r7, #6]
 8026366:	460b      	mov	r3, r1
 8026368:	80bb      	strh	r3, [r7, #4]
 802636a:	4613      	mov	r3, r2
 802636c:	807b      	strh	r3, [r7, #2]
	FsmcH_SetArea(x, y, x + 1, y + 1);
 802636e:	88fb      	ldrh	r3, [r7, #6]
 8026370:	3301      	adds	r3, #1
 8026372:	b29a      	uxth	r2, r3
 8026374:	88bb      	ldrh	r3, [r7, #4]
 8026376:	3301      	adds	r3, #1
 8026378:	b29b      	uxth	r3, r3
 802637a:	88b9      	ldrh	r1, [r7, #4]
 802637c:	88f8      	ldrh	r0, [r7, #6]
 802637e:	f000 f980 	bl	8026682 <FsmcH_SetArea>
	FSMCH_LCD_DATA = color;
 8026382:	4a03      	ldr	r2, [pc, #12]	@ (8026390 <FsmcH_DrawPixel+0x34>)
 8026384:	887b      	ldrh	r3, [r7, #2]
 8026386:	8013      	strh	r3, [r2, #0]
}
 8026388:	bf00      	nop
 802638a:	3708      	adds	r7, #8
 802638c:	46bd      	mov	sp, r7
 802638e:	bd80      	pop	{r7, pc}
 8026390:	60080000 	.word	0x60080000

08026394 <FsmcH_DrawChar>:
void FsmcH_DrawChar(uint16 x, uint16 y, char c, uint16 color, uint16 bgcolor)
{
 8026394:	b590      	push	{r4, r7, lr}
 8026396:	b085      	sub	sp, #20
 8026398:	af00      	add	r7, sp, #0
 802639a:	4604      	mov	r4, r0
 802639c:	4608      	mov	r0, r1
 802639e:	4611      	mov	r1, r2
 80263a0:	461a      	mov	r2, r3
 80263a2:	4623      	mov	r3, r4
 80263a4:	80fb      	strh	r3, [r7, #6]
 80263a6:	4603      	mov	r3, r0
 80263a8:	80bb      	strh	r3, [r7, #4]
 80263aa:	460b      	mov	r3, r1
 80263ac:	70fb      	strb	r3, [r7, #3]
 80263ae:	4613      	mov	r3, r2
 80263b0:	803b      	strh	r3, [r7, #0]
	uint8 fontCoeff = 24 / 8;
 80263b2:	2303      	movs	r3, #3
 80263b4:	72bb      	strb	r3, [r7, #10]
	uint8 xP = 0;
 80263b6:	2300      	movs	r3, #0
 80263b8:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < 24; i++)
 80263ba:	2300      	movs	r3, #0
 80263bc:	73bb      	strb	r3, [r7, #14]
 80263be:	e05e      	b.n	802647e <FsmcH_DrawChar+0xea>
	{
		uint8 line;
		for(uint8 k = 0; k < fontCoeff; k++)
 80263c0:	2300      	movs	r3, #0
 80263c2:	733b      	strb	r3, [r7, #12]
 80263c4:	e052      	b.n	802646c <FsmcH_DrawChar+0xd8>
		{
			line = Font24_Table[((c - 0x20) * 24 * fontCoeff) + (i * fontCoeff) + k];
 80263c6:	78fb      	ldrb	r3, [r7, #3]
 80263c8:	3b20      	subs	r3, #32
 80263ca:	7aba      	ldrb	r2, [r7, #10]
 80263cc:	fb03 f202 	mul.w	r2, r3, r2
 80263d0:	4613      	mov	r3, r2
 80263d2:	005b      	lsls	r3, r3, #1
 80263d4:	4413      	add	r3, r2
 80263d6:	00db      	lsls	r3, r3, #3
 80263d8:	4619      	mov	r1, r3
 80263da:	7bbb      	ldrb	r3, [r7, #14]
 80263dc:	7aba      	ldrb	r2, [r7, #10]
 80263de:	fb02 f303 	mul.w	r3, r2, r3
 80263e2:	18ca      	adds	r2, r1, r3
 80263e4:	7b3b      	ldrb	r3, [r7, #12]
 80263e6:	4413      	add	r3, r2
 80263e8:	4a29      	ldr	r2, [pc, #164]	@ (8026490 <FsmcH_DrawChar+0xfc>)
 80263ea:	5cd3      	ldrb	r3, [r2, r3]
 80263ec:	737b      	strb	r3, [r7, #13]
			for(uint8 j = 0; j < 8; j++)
 80263ee:	2300      	movs	r3, #0
 80263f0:	72fb      	strb	r3, [r7, #11]
 80263f2:	e032      	b.n	802645a <FsmcH_DrawChar+0xc6>
			{
				if((line & 0x80) == 0x80) FsmcH_DrawPixel(x + j + xP, y + i, color);
 80263f4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80263f8:	2b00      	cmp	r3, #0
 80263fa:	da12      	bge.n	8026422 <FsmcH_DrawChar+0x8e>
 80263fc:	7afb      	ldrb	r3, [r7, #11]
 80263fe:	b29a      	uxth	r2, r3
 8026400:	88fb      	ldrh	r3, [r7, #6]
 8026402:	4413      	add	r3, r2
 8026404:	b29a      	uxth	r2, r3
 8026406:	7bfb      	ldrb	r3, [r7, #15]
 8026408:	b29b      	uxth	r3, r3
 802640a:	4413      	add	r3, r2
 802640c:	b298      	uxth	r0, r3
 802640e:	7bbb      	ldrb	r3, [r7, #14]
 8026410:	b29a      	uxth	r2, r3
 8026412:	88bb      	ldrh	r3, [r7, #4]
 8026414:	4413      	add	r3, r2
 8026416:	b29b      	uxth	r3, r3
 8026418:	883a      	ldrh	r2, [r7, #0]
 802641a:	4619      	mov	r1, r3
 802641c:	f7ff ff9e 	bl	802635c <FsmcH_DrawPixel>
 8026420:	e015      	b.n	802644e <FsmcH_DrawChar+0xba>
				else if (bgcolor != color) FsmcH_DrawPixel(x + j + xP, y + i, bgcolor);
 8026422:	8c3a      	ldrh	r2, [r7, #32]
 8026424:	883b      	ldrh	r3, [r7, #0]
 8026426:	429a      	cmp	r2, r3
 8026428:	d011      	beq.n	802644e <FsmcH_DrawChar+0xba>
 802642a:	7afb      	ldrb	r3, [r7, #11]
 802642c:	b29a      	uxth	r2, r3
 802642e:	88fb      	ldrh	r3, [r7, #6]
 8026430:	4413      	add	r3, r2
 8026432:	b29a      	uxth	r2, r3
 8026434:	7bfb      	ldrb	r3, [r7, #15]
 8026436:	b29b      	uxth	r3, r3
 8026438:	4413      	add	r3, r2
 802643a:	b298      	uxth	r0, r3
 802643c:	7bbb      	ldrb	r3, [r7, #14]
 802643e:	b29a      	uxth	r2, r3
 8026440:	88bb      	ldrh	r3, [r7, #4]
 8026442:	4413      	add	r3, r2
 8026444:	b29b      	uxth	r3, r3
 8026446:	8c3a      	ldrh	r2, [r7, #32]
 8026448:	4619      	mov	r1, r3
 802644a:	f7ff ff87 	bl	802635c <FsmcH_DrawPixel>
				else
				{
					/* Do nothing. */
				}
				line <<= 1;
 802644e:	7b7b      	ldrb	r3, [r7, #13]
 8026450:	005b      	lsls	r3, r3, #1
 8026452:	737b      	strb	r3, [r7, #13]
			for(uint8 j = 0; j < 8; j++)
 8026454:	7afb      	ldrb	r3, [r7, #11]
 8026456:	3301      	adds	r3, #1
 8026458:	72fb      	strb	r3, [r7, #11]
 802645a:	7afb      	ldrb	r3, [r7, #11]
 802645c:	2b07      	cmp	r3, #7
 802645e:	d9c9      	bls.n	80263f4 <FsmcH_DrawChar+0x60>
			}
			xP += 8;
 8026460:	7bfb      	ldrb	r3, [r7, #15]
 8026462:	3308      	adds	r3, #8
 8026464:	73fb      	strb	r3, [r7, #15]
		for(uint8 k = 0; k < fontCoeff; k++)
 8026466:	7b3b      	ldrb	r3, [r7, #12]
 8026468:	3301      	adds	r3, #1
 802646a:	733b      	strb	r3, [r7, #12]
 802646c:	7b3a      	ldrb	r2, [r7, #12]
 802646e:	7abb      	ldrb	r3, [r7, #10]
 8026470:	429a      	cmp	r2, r3
 8026472:	d3a8      	bcc.n	80263c6 <FsmcH_DrawChar+0x32>
		}
		xP = 0;
 8026474:	2300      	movs	r3, #0
 8026476:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < 24; i++)
 8026478:	7bbb      	ldrb	r3, [r7, #14]
 802647a:	3301      	adds	r3, #1
 802647c:	73bb      	strb	r3, [r7, #14]
 802647e:	7bbb      	ldrb	r3, [r7, #14]
 8026480:	2b17      	cmp	r3, #23
 8026482:	d99d      	bls.n	80263c0 <FsmcH_DrawChar+0x2c>
	}
}
 8026484:	bf00      	nop
 8026486:	bf00      	nop
 8026488:	3714      	adds	r7, #20
 802648a:	46bd      	mov	sp, r7
 802648c:	bd90      	pop	{r4, r7, pc}
 802648e:	bf00      	nop
 8026490:	0803895c 	.word	0x0803895c

08026494 <FsmcH_DrawChar8>:
void FsmcH_DrawChar8(uint16 x, uint16 y, char c, uint16 color, uint16 bgcolor)
{
 8026494:	b590      	push	{r4, r7, lr}
 8026496:	b087      	sub	sp, #28
 8026498:	af00      	add	r7, sp, #0
 802649a:	4604      	mov	r4, r0
 802649c:	4608      	mov	r0, r1
 802649e:	4611      	mov	r1, r2
 80264a0:	461a      	mov	r2, r3
 80264a2:	4623      	mov	r3, r4
 80264a4:	80fb      	strh	r3, [r7, #6]
 80264a6:	4603      	mov	r3, r0
 80264a8:	80bb      	strh	r3, [r7, #4]
 80264aa:	460b      	mov	r3, r1
 80264ac:	70fb      	strb	r3, [r7, #3]
 80264ae:	4613      	mov	r3, r2
 80264b0:	803b      	strh	r3, [r7, #0]
	uint16 fontWidth = 5;
 80264b2:	2305      	movs	r3, #5
 80264b4:	827b      	strh	r3, [r7, #18]
	uint16 fontHeight = 8;
 80264b6:	2308      	movs	r3, #8
 80264b8:	823b      	strh	r3, [r7, #16]
	uint16 charIndex = (c - 0x20) * fontHeight;
 80264ba:	78fb      	ldrb	r3, [r7, #3]
 80264bc:	3b20      	subs	r3, #32
 80264be:	b29b      	uxth	r3, r3
 80264c0:	8a3a      	ldrh	r2, [r7, #16]
 80264c2:	fb12 f303 	smulbb	r3, r2, r3
 80264c6:	81fb      	strh	r3, [r7, #14]
	for (uint8 row = 0; row < fontHeight; row++)
 80264c8:	2300      	movs	r3, #0
 80264ca:	75fb      	strb	r3, [r7, #23]
 80264cc:	e03b      	b.n	8026546 <FsmcH_DrawChar8+0xb2>
	{
		uint8 line = Font8_Table[charIndex + row];
 80264ce:	89fa      	ldrh	r2, [r7, #14]
 80264d0:	7dfb      	ldrb	r3, [r7, #23]
 80264d2:	4413      	add	r3, r2
 80264d4:	4a21      	ldr	r2, [pc, #132]	@ (802655c <FsmcH_DrawChar8+0xc8>)
 80264d6:	5cd3      	ldrb	r3, [r2, r3]
 80264d8:	75bb      	strb	r3, [r7, #22]
		for (uint8 col = 0; col < fontWidth; col++)
 80264da:	2300      	movs	r3, #0
 80264dc:	757b      	strb	r3, [r7, #21]
 80264de:	e02a      	b.n	8026536 <FsmcH_DrawChar8+0xa2>
		{
			if (line & 0x80) FsmcH_DrawPixel(x + col, y + row, color);
 80264e0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80264e4:	2b00      	cmp	r3, #0
 80264e6:	da0e      	bge.n	8026506 <FsmcH_DrawChar8+0x72>
 80264e8:	7d7b      	ldrb	r3, [r7, #21]
 80264ea:	b29a      	uxth	r2, r3
 80264ec:	88fb      	ldrh	r3, [r7, #6]
 80264ee:	4413      	add	r3, r2
 80264f0:	b298      	uxth	r0, r3
 80264f2:	7dfb      	ldrb	r3, [r7, #23]
 80264f4:	b29a      	uxth	r2, r3
 80264f6:	88bb      	ldrh	r3, [r7, #4]
 80264f8:	4413      	add	r3, r2
 80264fa:	b29b      	uxth	r3, r3
 80264fc:	883a      	ldrh	r2, [r7, #0]
 80264fe:	4619      	mov	r1, r3
 8026500:	f7ff ff2c 	bl	802635c <FsmcH_DrawPixel>
 8026504:	e011      	b.n	802652a <FsmcH_DrawChar8+0x96>
			else if (bgcolor != color) FsmcH_DrawPixel(x + col, y + row, bgcolor);
 8026506:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8026508:	883b      	ldrh	r3, [r7, #0]
 802650a:	429a      	cmp	r2, r3
 802650c:	d00d      	beq.n	802652a <FsmcH_DrawChar8+0x96>
 802650e:	7d7b      	ldrb	r3, [r7, #21]
 8026510:	b29a      	uxth	r2, r3
 8026512:	88fb      	ldrh	r3, [r7, #6]
 8026514:	4413      	add	r3, r2
 8026516:	b298      	uxth	r0, r3
 8026518:	7dfb      	ldrb	r3, [r7, #23]
 802651a:	b29a      	uxth	r2, r3
 802651c:	88bb      	ldrh	r3, [r7, #4]
 802651e:	4413      	add	r3, r2
 8026520:	b29b      	uxth	r3, r3
 8026522:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8026524:	4619      	mov	r1, r3
 8026526:	f7ff ff19 	bl	802635c <FsmcH_DrawPixel>
			else
			{
				/* Do nothing. */
			}
			line <<= 1;
 802652a:	7dbb      	ldrb	r3, [r7, #22]
 802652c:	005b      	lsls	r3, r3, #1
 802652e:	75bb      	strb	r3, [r7, #22]
		for (uint8 col = 0; col < fontWidth; col++)
 8026530:	7d7b      	ldrb	r3, [r7, #21]
 8026532:	3301      	adds	r3, #1
 8026534:	757b      	strb	r3, [r7, #21]
 8026536:	7d7b      	ldrb	r3, [r7, #21]
 8026538:	b29b      	uxth	r3, r3
 802653a:	8a7a      	ldrh	r2, [r7, #18]
 802653c:	429a      	cmp	r2, r3
 802653e:	d8cf      	bhi.n	80264e0 <FsmcH_DrawChar8+0x4c>
	for (uint8 row = 0; row < fontHeight; row++)
 8026540:	7dfb      	ldrb	r3, [r7, #23]
 8026542:	3301      	adds	r3, #1
 8026544:	75fb      	strb	r3, [r7, #23]
 8026546:	7dfb      	ldrb	r3, [r7, #23]
 8026548:	b29b      	uxth	r3, r3
 802654a:	8a3a      	ldrh	r2, [r7, #16]
 802654c:	429a      	cmp	r2, r3
 802654e:	d8be      	bhi.n	80264ce <FsmcH_DrawChar8+0x3a>
		}
	}
}
 8026550:	bf00      	nop
 8026552:	bf00      	nop
 8026554:	371c      	adds	r7, #28
 8026556:	46bd      	mov	sp, r7
 8026558:	bd90      	pop	{r4, r7, pc}
 802655a:	bf00      	nop
 802655c:	0803a414 	.word	0x0803a414

08026560 <FsmcH_DrawString8>:
void FsmcH_DrawString8(uint16 x, uint16 y, char* str, uint16 color, uint16 bgcolor)
{
 8026560:	b590      	push	{r4, r7, lr}
 8026562:	b089      	sub	sp, #36	@ 0x24
 8026564:	af02      	add	r7, sp, #8
 8026566:	60ba      	str	r2, [r7, #8]
 8026568:	461a      	mov	r2, r3
 802656a:	4603      	mov	r3, r0
 802656c:	81fb      	strh	r3, [r7, #14]
 802656e:	460b      	mov	r3, r1
 8026570:	81bb      	strh	r3, [r7, #12]
 8026572:	4613      	mov	r3, r2
 8026574:	80fb      	strh	r3, [r7, #6]
	uint16 fontWidth = 5;
 8026576:	2305      	movs	r3, #5
 8026578:	82fb      	strh	r3, [r7, #22]
	while (*str)
 802657a:	e012      	b.n	80265a2 <FsmcH_DrawString8+0x42>
	{
		FsmcH_DrawChar8(x, y, *str, color, bgcolor);
 802657c:	68bb      	ldr	r3, [r7, #8]
 802657e:	781a      	ldrb	r2, [r3, #0]
 8026580:	88fc      	ldrh	r4, [r7, #6]
 8026582:	89b9      	ldrh	r1, [r7, #12]
 8026584:	89f8      	ldrh	r0, [r7, #14]
 8026586:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8026588:	9300      	str	r3, [sp, #0]
 802658a:	4623      	mov	r3, r4
 802658c:	f7ff ff82 	bl	8026494 <FsmcH_DrawChar8>
		x += fontWidth + 1;
 8026590:	8afa      	ldrh	r2, [r7, #22]
 8026592:	89fb      	ldrh	r3, [r7, #14]
 8026594:	4413      	add	r3, r2
 8026596:	b29b      	uxth	r3, r3
 8026598:	3301      	adds	r3, #1
 802659a:	81fb      	strh	r3, [r7, #14]
		str++;
 802659c:	68bb      	ldr	r3, [r7, #8]
 802659e:	3301      	adds	r3, #1
 80265a0:	60bb      	str	r3, [r7, #8]
	while (*str)
 80265a2:	68bb      	ldr	r3, [r7, #8]
 80265a4:	781b      	ldrb	r3, [r3, #0]
 80265a6:	2b00      	cmp	r3, #0
 80265a8:	d1e8      	bne.n	802657c <FsmcH_DrawString8+0x1c>
	}
}
 80265aa:	bf00      	nop
 80265ac:	bf00      	nop
 80265ae:	371c      	adds	r7, #28
 80265b0:	46bd      	mov	sp, r7
 80265b2:	bd90      	pop	{r4, r7, pc}

080265b4 <FsmcH_DrawString>:
void FsmcH_DrawString(uint16 x, uint16 y, char* str, uint16 color, uint16 bgcolor)
{
 80265b4:	b590      	push	{r4, r7, lr}
 80265b6:	b087      	sub	sp, #28
 80265b8:	af02      	add	r7, sp, #8
 80265ba:	60ba      	str	r2, [r7, #8]
 80265bc:	461a      	mov	r2, r3
 80265be:	4603      	mov	r3, r0
 80265c0:	81fb      	strh	r3, [r7, #14]
 80265c2:	460b      	mov	r3, r1
 80265c4:	81bb      	strh	r3, [r7, #12]
 80265c6:	4613      	mov	r3, r2
 80265c8:	80fb      	strh	r3, [r7, #6]
	while(*str)
 80265ca:	e00f      	b.n	80265ec <FsmcH_DrawString+0x38>
	{
		FsmcH_DrawChar(x, y, *str, color, bgcolor);
 80265cc:	68bb      	ldr	r3, [r7, #8]
 80265ce:	781a      	ldrb	r2, [r3, #0]
 80265d0:	88fc      	ldrh	r4, [r7, #6]
 80265d2:	89b9      	ldrh	r1, [r7, #12]
 80265d4:	89f8      	ldrh	r0, [r7, #14]
 80265d6:	8c3b      	ldrh	r3, [r7, #32]
 80265d8:	9300      	str	r3, [sp, #0]
 80265da:	4623      	mov	r3, r4
 80265dc:	f7ff feda 	bl	8026394 <FsmcH_DrawChar>
		x += 17;
 80265e0:	89fb      	ldrh	r3, [r7, #14]
 80265e2:	3311      	adds	r3, #17
 80265e4:	81fb      	strh	r3, [r7, #14]
		str++;
 80265e6:	68bb      	ldr	r3, [r7, #8]
 80265e8:	3301      	adds	r3, #1
 80265ea:	60bb      	str	r3, [r7, #8]
	while(*str)
 80265ec:	68bb      	ldr	r3, [r7, #8]
 80265ee:	781b      	ldrb	r3, [r3, #0]
 80265f0:	2b00      	cmp	r3, #0
 80265f2:	d1eb      	bne.n	80265cc <FsmcH_DrawString+0x18>
	}
}
 80265f4:	bf00      	nop
 80265f6:	bf00      	nop
 80265f8:	3714      	adds	r7, #20
 80265fa:	46bd      	mov	sp, r7
 80265fc:	bd90      	pop	{r4, r7, pc}
	...

08026600 <FsmcH_DrawInteger>:
void FsmcH_DrawInteger(uint16 x, uint16 y, uint32 num, uint16 color, uint16 bgcolor)
{
 8026600:	b590      	push	{r4, r7, lr}
 8026602:	b08b      	sub	sp, #44	@ 0x2c
 8026604:	af02      	add	r7, sp, #8
 8026606:	60ba      	str	r2, [r7, #8]
 8026608:	461a      	mov	r2, r3
 802660a:	4603      	mov	r3, r0
 802660c:	81fb      	strh	r3, [r7, #14]
 802660e:	460b      	mov	r3, r1
 8026610:	81bb      	strh	r3, [r7, #12]
 8026612:	4613      	mov	r3, r2
 8026614:	80fb      	strh	r3, [r7, #6]
	char buffer[12];
	sprintf(buffer, "%lu", num);
 8026616:	f107 0314 	add.w	r3, r7, #20
 802661a:	68ba      	ldr	r2, [r7, #8]
 802661c:	4908      	ldr	r1, [pc, #32]	@ (8026640 <FsmcH_DrawInteger+0x40>)
 802661e:	4618      	mov	r0, r3
 8026620:	f011 f880 	bl	8037724 <siprintf>
	FsmcH_DrawString(x, y, buffer, color, bgcolor);
 8026624:	88fc      	ldrh	r4, [r7, #6]
 8026626:	f107 0214 	add.w	r2, r7, #20
 802662a:	89b9      	ldrh	r1, [r7, #12]
 802662c:	89f8      	ldrh	r0, [r7, #14]
 802662e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8026630:	9300      	str	r3, [sp, #0]
 8026632:	4623      	mov	r3, r4
 8026634:	f7ff ffbe 	bl	80265b4 <FsmcH_DrawString>
}
 8026638:	bf00      	nop
 802663a:	3724      	adds	r7, #36	@ 0x24
 802663c:	46bd      	mov	sp, r7
 802663e:	bd90      	pop	{r4, r7, pc}
 8026640:	08038068 	.word	0x08038068

08026644 <FsmcH_WriteData>:
void FsmcH_WriteData(uint16 data)
{
 8026644:	b480      	push	{r7}
 8026646:	b083      	sub	sp, #12
 8026648:	af00      	add	r7, sp, #0
 802664a:	4603      	mov	r3, r0
 802664c:	80fb      	strh	r3, [r7, #6]
	FSMCH_LCD_DATA = data;
 802664e:	4a04      	ldr	r2, [pc, #16]	@ (8026660 <FsmcH_WriteData+0x1c>)
 8026650:	88fb      	ldrh	r3, [r7, #6]
 8026652:	8013      	strh	r3, [r2, #0]
}
 8026654:	bf00      	nop
 8026656:	370c      	adds	r7, #12
 8026658:	46bd      	mov	sp, r7
 802665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802665e:	4770      	bx	lr
 8026660:	60080000 	.word	0x60080000

08026664 <FsmcH_WriteCommand>:
void FsmcH_WriteCommand(uint16 command)
{
 8026664:	b480      	push	{r7}
 8026666:	b083      	sub	sp, #12
 8026668:	af00      	add	r7, sp, #0
 802666a:	4603      	mov	r3, r0
 802666c:	80fb      	strh	r3, [r7, #6]
	FSMCH_LCD_CMD = command;
 802666e:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8026672:	88fb      	ldrh	r3, [r7, #6]
 8026674:	8013      	strh	r3, [r2, #0]
}
 8026676:	bf00      	nop
 8026678:	370c      	adds	r7, #12
 802667a:	46bd      	mov	sp, r7
 802667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026680:	4770      	bx	lr

08026682 <FsmcH_SetArea>:
void FsmcH_SetArea(uint16 xStart, uint16 yStart, uint16 xEnd, uint16 yEnd)
{
 8026682:	b590      	push	{r4, r7, lr}
 8026684:	b083      	sub	sp, #12
 8026686:	af00      	add	r7, sp, #0
 8026688:	4604      	mov	r4, r0
 802668a:	4608      	mov	r0, r1
 802668c:	4611      	mov	r1, r2
 802668e:	461a      	mov	r2, r3
 8026690:	4623      	mov	r3, r4
 8026692:	80fb      	strh	r3, [r7, #6]
 8026694:	4603      	mov	r3, r0
 8026696:	80bb      	strh	r3, [r7, #4]
 8026698:	460b      	mov	r3, r1
 802669a:	807b      	strh	r3, [r7, #2]
 802669c:	4613      	mov	r3, r2
 802669e:	803b      	strh	r3, [r7, #0]
	FsmcH_WriteCommand(0x2a);
 80266a0:	202a      	movs	r0, #42	@ 0x2a
 80266a2:	f7ff ffdf 	bl	8026664 <FsmcH_WriteCommand>
	FsmcH_WriteData(xStart >> 8);
 80266a6:	88fb      	ldrh	r3, [r7, #6]
 80266a8:	0a1b      	lsrs	r3, r3, #8
 80266aa:	b29b      	uxth	r3, r3
 80266ac:	4618      	mov	r0, r3
 80266ae:	f7ff ffc9 	bl	8026644 <FsmcH_WriteData>
	FsmcH_WriteData(xStart & 0xff);
 80266b2:	88fb      	ldrh	r3, [r7, #6]
 80266b4:	b2db      	uxtb	r3, r3
 80266b6:	b29b      	uxth	r3, r3
 80266b8:	4618      	mov	r0, r3
 80266ba:	f7ff ffc3 	bl	8026644 <FsmcH_WriteData>
	FsmcH_WriteData(xEnd >> 8);
 80266be:	887b      	ldrh	r3, [r7, #2]
 80266c0:	0a1b      	lsrs	r3, r3, #8
 80266c2:	b29b      	uxth	r3, r3
 80266c4:	4618      	mov	r0, r3
 80266c6:	f7ff ffbd 	bl	8026644 <FsmcH_WriteData>
	FsmcH_WriteData(xEnd & 0xff);
 80266ca:	887b      	ldrh	r3, [r7, #2]
 80266cc:	b2db      	uxtb	r3, r3
 80266ce:	b29b      	uxth	r3, r3
 80266d0:	4618      	mov	r0, r3
 80266d2:	f7ff ffb7 	bl	8026644 <FsmcH_WriteData>
	FsmcH_WriteCommand(0x2b);
 80266d6:	202b      	movs	r0, #43	@ 0x2b
 80266d8:	f7ff ffc4 	bl	8026664 <FsmcH_WriteCommand>
	FsmcH_WriteData(yStart >> 8);
 80266dc:	88bb      	ldrh	r3, [r7, #4]
 80266de:	0a1b      	lsrs	r3, r3, #8
 80266e0:	b29b      	uxth	r3, r3
 80266e2:	4618      	mov	r0, r3
 80266e4:	f7ff ffae 	bl	8026644 <FsmcH_WriteData>
	FsmcH_WriteData(yStart & 0xff);
 80266e8:	88bb      	ldrh	r3, [r7, #4]
 80266ea:	b2db      	uxtb	r3, r3
 80266ec:	b29b      	uxth	r3, r3
 80266ee:	4618      	mov	r0, r3
 80266f0:	f7ff ffa8 	bl	8026644 <FsmcH_WriteData>
	FsmcH_WriteData(yEnd >> 8);
 80266f4:	883b      	ldrh	r3, [r7, #0]
 80266f6:	0a1b      	lsrs	r3, r3, #8
 80266f8:	b29b      	uxth	r3, r3
 80266fa:	4618      	mov	r0, r3
 80266fc:	f7ff ffa2 	bl	8026644 <FsmcH_WriteData>
	FsmcH_WriteData(yEnd & 0xff);
 8026700:	883b      	ldrh	r3, [r7, #0]
 8026702:	b2db      	uxtb	r3, r3
 8026704:	b29b      	uxth	r3, r3
 8026706:	4618      	mov	r0, r3
 8026708:	f7ff ff9c 	bl	8026644 <FsmcH_WriteData>
	FsmcH_WriteCommand(0x2c);
 802670c:	202c      	movs	r0, #44	@ 0x2c
 802670e:	f7ff ffa9 	bl	8026664 <FsmcH_WriteCommand>
}
 8026712:	bf00      	nop
 8026714:	370c      	adds	r7, #12
 8026716:	46bd      	mov	sp, r7
 8026718:	bd90      	pop	{r4, r7, pc}
	...

0802671c <FsmcH_FillRectangle>:
void FsmcH_FillRectangle(uint16 xStart, uint16 yStart, uint16 width, uint16 height, uint16 color)
{
 802671c:	b590      	push	{r4, r7, lr}
 802671e:	b085      	sub	sp, #20
 8026720:	af00      	add	r7, sp, #0
 8026722:	4604      	mov	r4, r0
 8026724:	4608      	mov	r0, r1
 8026726:	4611      	mov	r1, r2
 8026728:	461a      	mov	r2, r3
 802672a:	4623      	mov	r3, r4
 802672c:	80fb      	strh	r3, [r7, #6]
 802672e:	4603      	mov	r3, r0
 8026730:	80bb      	strh	r3, [r7, #4]
 8026732:	460b      	mov	r3, r1
 8026734:	807b      	strh	r3, [r7, #2]
 8026736:	4613      	mov	r3, r2
 8026738:	803b      	strh	r3, [r7, #0]
	FsmcH_SetArea(xStart, yStart, xStart + width - 1, yStart + height - 1);
 802673a:	88fa      	ldrh	r2, [r7, #6]
 802673c:	887b      	ldrh	r3, [r7, #2]
 802673e:	4413      	add	r3, r2
 8026740:	b29b      	uxth	r3, r3
 8026742:	3b01      	subs	r3, #1
 8026744:	b29c      	uxth	r4, r3
 8026746:	88ba      	ldrh	r2, [r7, #4]
 8026748:	883b      	ldrh	r3, [r7, #0]
 802674a:	4413      	add	r3, r2
 802674c:	b29b      	uxth	r3, r3
 802674e:	3b01      	subs	r3, #1
 8026750:	b29b      	uxth	r3, r3
 8026752:	88b9      	ldrh	r1, [r7, #4]
 8026754:	88f8      	ldrh	r0, [r7, #6]
 8026756:	4622      	mov	r2, r4
 8026758:	f7ff ff93 	bl	8026682 <FsmcH_SetArea>
	for(uint16 y = 0; y < height; y++ ) for(uint16 x = 0; x < width; x++ ) FSMCH_LCD_DATA = color;
 802675c:	2300      	movs	r3, #0
 802675e:	81fb      	strh	r3, [r7, #14]
 8026760:	e00f      	b.n	8026782 <FsmcH_FillRectangle+0x66>
 8026762:	2300      	movs	r3, #0
 8026764:	81bb      	strh	r3, [r7, #12]
 8026766:	e005      	b.n	8026774 <FsmcH_FillRectangle+0x58>
 8026768:	4a0a      	ldr	r2, [pc, #40]	@ (8026794 <FsmcH_FillRectangle+0x78>)
 802676a:	8c3b      	ldrh	r3, [r7, #32]
 802676c:	8013      	strh	r3, [r2, #0]
 802676e:	89bb      	ldrh	r3, [r7, #12]
 8026770:	3301      	adds	r3, #1
 8026772:	81bb      	strh	r3, [r7, #12]
 8026774:	89ba      	ldrh	r2, [r7, #12]
 8026776:	887b      	ldrh	r3, [r7, #2]
 8026778:	429a      	cmp	r2, r3
 802677a:	d3f5      	bcc.n	8026768 <FsmcH_FillRectangle+0x4c>
 802677c:	89fb      	ldrh	r3, [r7, #14]
 802677e:	3301      	adds	r3, #1
 8026780:	81fb      	strh	r3, [r7, #14]
 8026782:	89fa      	ldrh	r2, [r7, #14]
 8026784:	883b      	ldrh	r3, [r7, #0]
 8026786:	429a      	cmp	r2, r3
 8026788:	d3eb      	bcc.n	8026762 <FsmcH_FillRectangle+0x46>
}
 802678a:	bf00      	nop
 802678c:	bf00      	nop
 802678e:	3714      	adds	r7, #20
 8026790:	46bd      	mov	sp, r7
 8026792:	bd90      	pop	{r4, r7, pc}
 8026794:	60080000 	.word	0x60080000

08026798 <FsmcH_GetDrawAddress>:
uint16* FsmcH_GetDrawAddress(void)
{
 8026798:	b480      	push	{r7}
 802679a:	af00      	add	r7, sp, #0
	return (uint16*)FSMCH_LCD_DATA_ADDR;
 802679c:	4b02      	ldr	r3, [pc, #8]	@ (80267a8 <FsmcH_GetDrawAddress+0x10>)
}
 802679e:	4618      	mov	r0, r3
 80267a0:	46bd      	mov	sp, r7
 80267a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80267a6:	4770      	bx	lr
 80267a8:	60080000 	.word	0x60080000

080267ac <FsmcH_LcdInit>:
uint8 FsmcH_LcdInit(void)
{
 80267ac:	b580      	push	{r7, lr}
 80267ae:	b082      	sub	sp, #8
 80267b0:	af02      	add	r7, sp, #8
	FsmcH_WriteCommand(0x01);
 80267b2:	2001      	movs	r0, #1
 80267b4:	f7ff ff56 	bl	8026664 <FsmcH_WriteCommand>
	FsmcH_WriteCommand(0x11);
 80267b8:	2011      	movs	r0, #17
 80267ba:	f7ff ff53 	bl	8026664 <FsmcH_WriteCommand>
	FsmcH_WriteCommand(0xB6);
 80267be:	20b6      	movs	r0, #182	@ 0xb6
 80267c0:	f7ff ff50 	bl	8026664 <FsmcH_WriteCommand>
	FsmcH_WriteData(0x0A);
 80267c4:	200a      	movs	r0, #10
 80267c6:	f7ff ff3d 	bl	8026644 <FsmcH_WriteData>
	FsmcH_WriteData(0xC2);
 80267ca:	20c2      	movs	r0, #194	@ 0xc2
 80267cc:	f7ff ff3a 	bl	8026644 <FsmcH_WriteData>
	FsmcH_WriteCommand(0x36);
 80267d0:	2036      	movs	r0, #54	@ 0x36
 80267d2:	f7ff ff47 	bl	8026664 <FsmcH_WriteCommand>
	FsmcH_WriteData(0x68);
 80267d6:	2068      	movs	r0, #104	@ 0x68
 80267d8:	f7ff ff34 	bl	8026644 <FsmcH_WriteData>
	FsmcH_WriteCommand(0x3A);
 80267dc:	203a      	movs	r0, #58	@ 0x3a
 80267de:	f7ff ff41 	bl	8026664 <FsmcH_WriteCommand>
	FsmcH_WriteData(0x55);
 80267e2:	2055      	movs	r0, #85	@ 0x55
 80267e4:	f7ff ff2e 	bl	8026644 <FsmcH_WriteData>
	FsmcH_WriteCommand(0xE0);
 80267e8:	20e0      	movs	r0, #224	@ 0xe0
 80267ea:	f7ff ff3b 	bl	8026664 <FsmcH_WriteCommand>
	FsmcH_WriteData(0x10);
 80267ee:	2010      	movs	r0, #16
 80267f0:	f7ff ff28 	bl	8026644 <FsmcH_WriteData>
	FsmcH_WriteData(0x10);
 80267f4:	2010      	movs	r0, #16
 80267f6:	f7ff ff25 	bl	8026644 <FsmcH_WriteData>
	FsmcH_WriteData(0x10);
 80267fa:	2010      	movs	r0, #16
 80267fc:	f7ff ff22 	bl	8026644 <FsmcH_WriteData>
	FsmcH_WriteData(0x08);
 8026800:	2008      	movs	r0, #8
 8026802:	f7ff ff1f 	bl	8026644 <FsmcH_WriteData>
	FsmcH_WriteData(0x0E);
 8026806:	200e      	movs	r0, #14
 8026808:	f7ff ff1c 	bl	8026644 <FsmcH_WriteData>
	FsmcH_WriteData(0x06);
 802680c:	2006      	movs	r0, #6
 802680e:	f7ff ff19 	bl	8026644 <FsmcH_WriteData>
	FsmcH_WriteData(0x42);
 8026812:	2042      	movs	r0, #66	@ 0x42
 8026814:	f7ff ff16 	bl	8026644 <FsmcH_WriteData>
	FsmcH_WriteData(0x28);
 8026818:	2028      	movs	r0, #40	@ 0x28
 802681a:	f7ff ff13 	bl	8026644 <FsmcH_WriteData>
	FsmcH_WriteData(0x36);
 802681e:	2036      	movs	r0, #54	@ 0x36
 8026820:	f7ff ff10 	bl	8026644 <FsmcH_WriteData>
	FsmcH_WriteData(0x03);
 8026824:	2003      	movs	r0, #3
 8026826:	f7ff ff0d 	bl	8026644 <FsmcH_WriteData>
	FsmcH_WriteData(0x0E);
 802682a:	200e      	movs	r0, #14
 802682c:	f7ff ff0a 	bl	8026644 <FsmcH_WriteData>
	FsmcH_WriteData(0x04);
 8026830:	2004      	movs	r0, #4
 8026832:	f7ff ff07 	bl	8026644 <FsmcH_WriteData>
	FsmcH_WriteData(0x13);
 8026836:	2013      	movs	r0, #19
 8026838:	f7ff ff04 	bl	8026644 <FsmcH_WriteData>
	FsmcH_WriteData(0x0E);
 802683c:	200e      	movs	r0, #14
 802683e:	f7ff ff01 	bl	8026644 <FsmcH_WriteData>
	FsmcH_WriteData(0x0C);
 8026842:	200c      	movs	r0, #12
 8026844:	f7ff fefe 	bl	8026644 <FsmcH_WriteData>
	FsmcH_WriteCommand(0XE1);
 8026848:	20e1      	movs	r0, #225	@ 0xe1
 802684a:	f7ff ff0b 	bl	8026664 <FsmcH_WriteCommand>
	FsmcH_WriteData(0x0C);
 802684e:	200c      	movs	r0, #12
 8026850:	f7ff fef8 	bl	8026644 <FsmcH_WriteData>
	FsmcH_WriteData(0x23);
 8026854:	2023      	movs	r0, #35	@ 0x23
 8026856:	f7ff fef5 	bl	8026644 <FsmcH_WriteData>
	FsmcH_WriteData(0x26);
 802685a:	2026      	movs	r0, #38	@ 0x26
 802685c:	f7ff fef2 	bl	8026644 <FsmcH_WriteData>
	FsmcH_WriteData(0x04);
 8026860:	2004      	movs	r0, #4
 8026862:	f7ff feef 	bl	8026644 <FsmcH_WriteData>
	FsmcH_WriteData(0x0C);
 8026866:	200c      	movs	r0, #12
 8026868:	f7ff feec 	bl	8026644 <FsmcH_WriteData>
	FsmcH_WriteData(0x04);
 802686c:	2004      	movs	r0, #4
 802686e:	f7ff fee9 	bl	8026644 <FsmcH_WriteData>
	FsmcH_WriteData(0x39);
 8026872:	2039      	movs	r0, #57	@ 0x39
 8026874:	f7ff fee6 	bl	8026644 <FsmcH_WriteData>
	FsmcH_WriteData(0x24);
 8026878:	2024      	movs	r0, #36	@ 0x24
 802687a:	f7ff fee3 	bl	8026644 <FsmcH_WriteData>
	FsmcH_WriteData(0x4B);
 802687e:	204b      	movs	r0, #75	@ 0x4b
 8026880:	f7ff fee0 	bl	8026644 <FsmcH_WriteData>
	FsmcH_WriteData(0x03);
 8026884:	2003      	movs	r0, #3
 8026886:	f7ff fedd 	bl	8026644 <FsmcH_WriteData>
	FsmcH_WriteData(0x0B);
 802688a:	200b      	movs	r0, #11
 802688c:	f7ff feda 	bl	8026644 <FsmcH_WriteData>
	FsmcH_WriteData(0x0B);
 8026890:	200b      	movs	r0, #11
 8026892:	f7ff fed7 	bl	8026644 <FsmcH_WriteData>
	FsmcH_WriteData(0x33);
 8026896:	2033      	movs	r0, #51	@ 0x33
 8026898:	f7ff fed4 	bl	8026644 <FsmcH_WriteData>
	FsmcH_WriteData(0x37);
 802689c:	2037      	movs	r0, #55	@ 0x37
 802689e:	f7ff fed1 	bl	8026644 <FsmcH_WriteData>
	FsmcH_WriteData(0x0F);
 80268a2:	200f      	movs	r0, #15
 80268a4:	f7ff fece 	bl	8026644 <FsmcH_WriteData>
	FsmcH_WriteCommand(0x2a);
 80268a8:	202a      	movs	r0, #42	@ 0x2a
 80268aa:	f7ff fedb 	bl	8026664 <FsmcH_WriteCommand>
	FsmcH_WriteData(0x00);
 80268ae:	2000      	movs	r0, #0
 80268b0:	f7ff fec8 	bl	8026644 <FsmcH_WriteData>
	FsmcH_WriteData(0x00);
 80268b4:	2000      	movs	r0, #0
 80268b6:	f7ff fec5 	bl	8026644 <FsmcH_WriteData>
	FsmcH_WriteData(0x00);
 80268ba:	2000      	movs	r0, #0
 80268bc:	f7ff fec2 	bl	8026644 <FsmcH_WriteData>
	FsmcH_WriteData(0xef);
 80268c0:	20ef      	movs	r0, #239	@ 0xef
 80268c2:	f7ff febf 	bl	8026644 <FsmcH_WriteData>
	FsmcH_WriteCommand(0x2b);
 80268c6:	202b      	movs	r0, #43	@ 0x2b
 80268c8:	f7ff fecc 	bl	8026664 <FsmcH_WriteCommand>
	FsmcH_WriteData(0x00);
 80268cc:	2000      	movs	r0, #0
 80268ce:	f7ff feb9 	bl	8026644 <FsmcH_WriteData>
	FsmcH_WriteData(0x00);
 80268d2:	2000      	movs	r0, #0
 80268d4:	f7ff feb6 	bl	8026644 <FsmcH_WriteData>
	FsmcH_WriteData(0x01);
 80268d8:	2001      	movs	r0, #1
 80268da:	f7ff feb3 	bl	8026644 <FsmcH_WriteData>
	FsmcH_WriteData(0x3f);
 80268de:	203f      	movs	r0, #63	@ 0x3f
 80268e0:	f7ff feb0 	bl	8026644 <FsmcH_WriteData>
	FsmcH_WriteCommand(0x29);
 80268e4:	2029      	movs	r0, #41	@ 0x29
 80268e6:	f7ff febd 	bl	8026664 <FsmcH_WriteCommand>
	FsmcH_WriteCommand(0x2C);
 80268ea:	202c      	movs	r0, #44	@ 0x2c
 80268ec:	f7ff feba 	bl	8026664 <FsmcH_WriteCommand>
	FsmcH_DrawRectangle(0, 0, FSMCH_LCD_WIDTH, FSMCH_LCD_HEIGHT, 0x0000);
 80268f0:	2300      	movs	r3, #0
 80268f2:	9300      	str	r3, [sp, #0]
 80268f4:	23f0      	movs	r3, #240	@ 0xf0
 80268f6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80268fa:	2100      	movs	r1, #0
 80268fc:	2000      	movs	r0, #0
 80268fe:	f7ff fcf7 	bl	80262f0 <FsmcH_DrawRectangle>
	FsmcH_SetArea(0, 0, FSMCH_LCD_WIDTH - 1, FSMCH_LCD_HEIGHT - 1);
 8026902:	23ef      	movs	r3, #239	@ 0xef
 8026904:	f240 123f 	movw	r2, #319	@ 0x13f
 8026908:	2100      	movs	r1, #0
 802690a:	2000      	movs	r0, #0
 802690c:	f7ff feb9 	bl	8026682 <FsmcH_SetArea>
	return 0;
 8026910:	2300      	movs	r3, #0
}
 8026912:	4618      	mov	r0, r3
 8026914:	46bd      	mov	sp, r7
 8026916:	bd80      	pop	{r7, pc}

08026918 <FsmcH_ReadData>:
uint32 FsmcH_ReadData(void)
{
 8026918:	b480      	push	{r7}
 802691a:	af00      	add	r7, sp, #0
	return FSMCH_LCD_DATA;
 802691c:	4b03      	ldr	r3, [pc, #12]	@ (802692c <FsmcH_ReadData+0x14>)
 802691e:	881b      	ldrh	r3, [r3, #0]
 8026920:	b29b      	uxth	r3, r3
}
 8026922:	4618      	mov	r0, r3
 8026924:	46bd      	mov	sp, r7
 8026926:	f85d 7b04 	ldr.w	r7, [sp], #4
 802692a:	4770      	bx	lr
 802692c:	60080000 	.word	0x60080000

08026930 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8026930:	b580      	push	{r7, lr}
 8026932:	b084      	sub	sp, #16
 8026934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8026936:	463b      	mov	r3, r7
 8026938:	2200      	movs	r2, #0
 802693a:	601a      	str	r2, [r3, #0]
 802693c:	605a      	str	r2, [r3, #4]
 802693e:	609a      	str	r2, [r3, #8]
 8026940:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */
  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8026942:	4b31      	ldr	r3, [pc, #196]	@ (8026a08 <MX_ADC1_Init+0xd8>)
 8026944:	4a31      	ldr	r2, [pc, #196]	@ (8026a0c <MX_ADC1_Init+0xdc>)
 8026946:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8026948:	4b2f      	ldr	r3, [pc, #188]	@ (8026a08 <MX_ADC1_Init+0xd8>)
 802694a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 802694e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8026950:	4b2d      	ldr	r3, [pc, #180]	@ (8026a08 <MX_ADC1_Init+0xd8>)
 8026952:	2200      	movs	r2, #0
 8026954:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8026956:	4b2c      	ldr	r3, [pc, #176]	@ (8026a08 <MX_ADC1_Init+0xd8>)
 8026958:	2201      	movs	r2, #1
 802695a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 802695c:	4b2a      	ldr	r3, [pc, #168]	@ (8026a08 <MX_ADC1_Init+0xd8>)
 802695e:	2201      	movs	r2, #1
 8026960:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8026962:	4b29      	ldr	r3, [pc, #164]	@ (8026a08 <MX_ADC1_Init+0xd8>)
 8026964:	2200      	movs	r2, #0
 8026966:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 802696a:	4b27      	ldr	r3, [pc, #156]	@ (8026a08 <MX_ADC1_Init+0xd8>)
 802696c:	2200      	movs	r2, #0
 802696e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8026970:	4b25      	ldr	r3, [pc, #148]	@ (8026a08 <MX_ADC1_Init+0xd8>)
 8026972:	4a27      	ldr	r2, [pc, #156]	@ (8026a10 <MX_ADC1_Init+0xe0>)
 8026974:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8026976:	4b24      	ldr	r3, [pc, #144]	@ (8026a08 <MX_ADC1_Init+0xd8>)
 8026978:	2200      	movs	r2, #0
 802697a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 802697c:	4b22      	ldr	r3, [pc, #136]	@ (8026a08 <MX_ADC1_Init+0xd8>)
 802697e:	2203      	movs	r2, #3
 8026980:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8026982:	4b21      	ldr	r3, [pc, #132]	@ (8026a08 <MX_ADC1_Init+0xd8>)
 8026984:	2201      	movs	r2, #1
 8026986:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 802698a:	4b1f      	ldr	r3, [pc, #124]	@ (8026a08 <MX_ADC1_Init+0xd8>)
 802698c:	2201      	movs	r2, #1
 802698e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8026990:	481d      	ldr	r0, [pc, #116]	@ (8026a08 <MX_ADC1_Init+0xd8>)
 8026992:	f001 fdd3 	bl	802853c <HAL_ADC_Init>
 8026996:	4603      	mov	r3, r0
 8026998:	2b00      	cmp	r3, #0
 802699a:	d001      	beq.n	80269a0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 802699c:	f001 f9a4 	bl	8027ce8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 80269a0:	2312      	movs	r3, #18
 80269a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80269a4:	2301      	movs	r3, #1
 80269a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80269a8:	2307      	movs	r3, #7
 80269aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80269ac:	463b      	mov	r3, r7
 80269ae:	4619      	mov	r1, r3
 80269b0:	4815      	ldr	r0, [pc, #84]	@ (8026a08 <MX_ADC1_Init+0xd8>)
 80269b2:	f002 fa8f 	bl	8028ed4 <HAL_ADC_ConfigChannel>
 80269b6:	4603      	mov	r3, r0
 80269b8:	2b00      	cmp	r3, #0
 80269ba:	d001      	beq.n	80269c0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80269bc:	f001 f994 	bl	8027ce8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80269c0:	2310      	movs	r3, #16
 80269c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80269c4:	2302      	movs	r3, #2
 80269c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 80269c8:	2305      	movs	r3, #5
 80269ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80269cc:	463b      	mov	r3, r7
 80269ce:	4619      	mov	r1, r3
 80269d0:	480d      	ldr	r0, [pc, #52]	@ (8026a08 <MX_ADC1_Init+0xd8>)
 80269d2:	f002 fa7f 	bl	8028ed4 <HAL_ADC_ConfigChannel>
 80269d6:	4603      	mov	r3, r0
 80269d8:	2b00      	cmp	r3, #0
 80269da:	d001      	beq.n	80269e0 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80269dc:	f001 f984 	bl	8027ce8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80269e0:	2311      	movs	r3, #17
 80269e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80269e4:	2303      	movs	r3, #3
 80269e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80269e8:	2307      	movs	r3, #7
 80269ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80269ec:	463b      	mov	r3, r7
 80269ee:	4619      	mov	r1, r3
 80269f0:	4805      	ldr	r0, [pc, #20]	@ (8026a08 <MX_ADC1_Init+0xd8>)
 80269f2:	f002 fa6f 	bl	8028ed4 <HAL_ADC_ConfigChannel>
 80269f6:	4603      	mov	r3, r0
 80269f8:	2b00      	cmp	r3, #0
 80269fa:	d001      	beq.n	8026a00 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 80269fc:	f001 f974 	bl	8027ce8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  /* USER CODE END ADC1_Init 2 */

}
 8026a00:	bf00      	nop
 8026a02:	3710      	adds	r7, #16
 8026a04:	46bd      	mov	sp, r7
 8026a06:	bd80      	pop	{r7, pc}
 8026a08:	200000e4 	.word	0x200000e4
 8026a0c:	40012000 	.word	0x40012000
 8026a10:	0f000001 	.word	0x0f000001

08026a14 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8026a14:	b580      	push	{r7, lr}
 8026a16:	b084      	sub	sp, #16
 8026a18:	af00      	add	r7, sp, #0
 8026a1a:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8026a1c:	687b      	ldr	r3, [r7, #4]
 8026a1e:	681b      	ldr	r3, [r3, #0]
 8026a20:	4a26      	ldr	r2, [pc, #152]	@ (8026abc <HAL_ADC_MspInit+0xa8>)
 8026a22:	4293      	cmp	r3, r2
 8026a24:	d146      	bne.n	8026ab4 <HAL_ADC_MspInit+0xa0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */
  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8026a26:	2300      	movs	r3, #0
 8026a28:	60fb      	str	r3, [r7, #12]
 8026a2a:	4b25      	ldr	r3, [pc, #148]	@ (8026ac0 <HAL_ADC_MspInit+0xac>)
 8026a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8026a2e:	4a24      	ldr	r2, [pc, #144]	@ (8026ac0 <HAL_ADC_MspInit+0xac>)
 8026a30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8026a34:	6453      	str	r3, [r2, #68]	@ 0x44
 8026a36:	4b22      	ldr	r3, [pc, #136]	@ (8026ac0 <HAL_ADC_MspInit+0xac>)
 8026a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8026a3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8026a3e:	60fb      	str	r3, [r7, #12]
 8026a40:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8026a42:	4b20      	ldr	r3, [pc, #128]	@ (8026ac4 <HAL_ADC_MspInit+0xb0>)
 8026a44:	4a20      	ldr	r2, [pc, #128]	@ (8026ac8 <HAL_ADC_MspInit+0xb4>)
 8026a46:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8026a48:	4b1e      	ldr	r3, [pc, #120]	@ (8026ac4 <HAL_ADC_MspInit+0xb0>)
 8026a4a:	2200      	movs	r2, #0
 8026a4c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8026a4e:	4b1d      	ldr	r3, [pc, #116]	@ (8026ac4 <HAL_ADC_MspInit+0xb0>)
 8026a50:	2200      	movs	r2, #0
 8026a52:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8026a54:	4b1b      	ldr	r3, [pc, #108]	@ (8026ac4 <HAL_ADC_MspInit+0xb0>)
 8026a56:	2200      	movs	r2, #0
 8026a58:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8026a5a:	4b1a      	ldr	r3, [pc, #104]	@ (8026ac4 <HAL_ADC_MspInit+0xb0>)
 8026a5c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8026a60:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8026a62:	4b18      	ldr	r3, [pc, #96]	@ (8026ac4 <HAL_ADC_MspInit+0xb0>)
 8026a64:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8026a68:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8026a6a:	4b16      	ldr	r3, [pc, #88]	@ (8026ac4 <HAL_ADC_MspInit+0xb0>)
 8026a6c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8026a70:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8026a72:	4b14      	ldr	r3, [pc, #80]	@ (8026ac4 <HAL_ADC_MspInit+0xb0>)
 8026a74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8026a78:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8026a7a:	4b12      	ldr	r3, [pc, #72]	@ (8026ac4 <HAL_ADC_MspInit+0xb0>)
 8026a7c:	2200      	movs	r2, #0
 8026a7e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8026a80:	4b10      	ldr	r3, [pc, #64]	@ (8026ac4 <HAL_ADC_MspInit+0xb0>)
 8026a82:	2204      	movs	r2, #4
 8026a84:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8026a86:	4b0f      	ldr	r3, [pc, #60]	@ (8026ac4 <HAL_ADC_MspInit+0xb0>)
 8026a88:	2203      	movs	r2, #3
 8026a8a:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8026a8c:	4b0d      	ldr	r3, [pc, #52]	@ (8026ac4 <HAL_ADC_MspInit+0xb0>)
 8026a8e:	2200      	movs	r2, #0
 8026a90:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8026a92:	4b0c      	ldr	r3, [pc, #48]	@ (8026ac4 <HAL_ADC_MspInit+0xb0>)
 8026a94:	2200      	movs	r2, #0
 8026a96:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8026a98:	480a      	ldr	r0, [pc, #40]	@ (8026ac4 <HAL_ADC_MspInit+0xb0>)
 8026a9a:	f004 fbe3 	bl	802b264 <HAL_DMA_Init>
 8026a9e:	4603      	mov	r3, r0
 8026aa0:	2b00      	cmp	r3, #0
 8026aa2:	d001      	beq.n	8026aa8 <HAL_ADC_MspInit+0x94>
    {
      Error_Handler();
 8026aa4:	f001 f920 	bl	8027ce8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8026aa8:	687b      	ldr	r3, [r7, #4]
 8026aaa:	4a06      	ldr	r2, [pc, #24]	@ (8026ac4 <HAL_ADC_MspInit+0xb0>)
 8026aac:	639a      	str	r2, [r3, #56]	@ 0x38
 8026aae:	4a05      	ldr	r2, [pc, #20]	@ (8026ac4 <HAL_ADC_MspInit+0xb0>)
 8026ab0:	687b      	ldr	r3, [r7, #4]
 8026ab2:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */
  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8026ab4:	bf00      	nop
 8026ab6:	3710      	adds	r7, #16
 8026ab8:	46bd      	mov	sp, r7
 8026aba:	bd80      	pop	{r7, pc}
 8026abc:	40012000 	.word	0x40012000
 8026ac0:	40023800 	.word	0x40023800
 8026ac4:	20000148 	.word	0x20000148
 8026ac8:	40026410 	.word	0x40026410

08026acc <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8026acc:	b580      	push	{r7, lr}
 8026ace:	b082      	sub	sp, #8
 8026ad0:	af00      	add	r7, sp, #0
 8026ad2:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8026ad4:	687b      	ldr	r3, [r7, #4]
 8026ad6:	681b      	ldr	r3, [r3, #0]
 8026ad8:	4a0a      	ldr	r2, [pc, #40]	@ (8026b04 <HAL_ADC_MspDeInit+0x38>)
 8026ada:	4293      	cmp	r3, r2
 8026adc:	d10d      	bne.n	8026afa <HAL_ADC_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */
  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 8026ade:	4b0a      	ldr	r3, [pc, #40]	@ (8026b08 <HAL_ADC_MspDeInit+0x3c>)
 8026ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8026ae2:	4a09      	ldr	r2, [pc, #36]	@ (8026b08 <HAL_ADC_MspDeInit+0x3c>)
 8026ae4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8026ae8:	6453      	str	r3, [r2, #68]	@ 0x44

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(adcHandle->DMA_Handle);
 8026aea:	687b      	ldr	r3, [r7, #4]
 8026aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8026aee:	4618      	mov	r0, r3
 8026af0:	f004 fdd2 	bl	802b698 <HAL_DMA_DeInit>

    /* ADC1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(ADC_IRQn);
 8026af4:	2012      	movs	r0, #18
 8026af6:	f004 f80b 	bl	802ab10 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}
 8026afa:	bf00      	nop
 8026afc:	3708      	adds	r7, #8
 8026afe:	46bd      	mov	sp, r7
 8026b00:	bd80      	pop	{r7, pc}
 8026b02:	bf00      	nop
 8026b04:	40012000 	.word	0x40012000
 8026b08:	40023800 	.word	0x40023800

08026b0c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8026b0c:	b580      	push	{r7, lr}
 8026b0e:	b08a      	sub	sp, #40	@ 0x28
 8026b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_Init 0 */
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */
  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8026b12:	4b7d      	ldr	r3, [pc, #500]	@ (8026d08 <MX_CAN1_Init+0x1fc>)
 8026b14:	4a7d      	ldr	r2, [pc, #500]	@ (8026d0c <MX_CAN1_Init+0x200>)
 8026b16:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8026b18:	4b7b      	ldr	r3, [pc, #492]	@ (8026d08 <MX_CAN1_Init+0x1fc>)
 8026b1a:	2204      	movs	r2, #4
 8026b1c:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8026b1e:	4b7a      	ldr	r3, [pc, #488]	@ (8026d08 <MX_CAN1_Init+0x1fc>)
 8026b20:	2200      	movs	r2, #0
 8026b22:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8026b24:	4b78      	ldr	r3, [pc, #480]	@ (8026d08 <MX_CAN1_Init+0x1fc>)
 8026b26:	2200      	movs	r2, #0
 8026b28:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_16TQ;
 8026b2a:	4b77      	ldr	r3, [pc, #476]	@ (8026d08 <MX_CAN1_Init+0x1fc>)
 8026b2c:	f44f 2270 	mov.w	r2, #983040	@ 0xf0000
 8026b30:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8026b32:	4b75      	ldr	r3, [pc, #468]	@ (8026d08 <MX_CAN1_Init+0x1fc>)
 8026b34:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8026b38:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = ENABLE;
 8026b3a:	4b73      	ldr	r3, [pc, #460]	@ (8026d08 <MX_CAN1_Init+0x1fc>)
 8026b3c:	2201      	movs	r2, #1
 8026b3e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8026b40:	4b71      	ldr	r3, [pc, #452]	@ (8026d08 <MX_CAN1_Init+0x1fc>)
 8026b42:	2201      	movs	r2, #1
 8026b44:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 8026b46:	4b70      	ldr	r3, [pc, #448]	@ (8026d08 <MX_CAN1_Init+0x1fc>)
 8026b48:	2201      	movs	r2, #1
 8026b4a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8026b4c:	4b6e      	ldr	r3, [pc, #440]	@ (8026d08 <MX_CAN1_Init+0x1fc>)
 8026b4e:	2201      	movs	r2, #1
 8026b50:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = ENABLE;
 8026b52:	4b6d      	ldr	r3, [pc, #436]	@ (8026d08 <MX_CAN1_Init+0x1fc>)
 8026b54:	2201      	movs	r2, #1
 8026b56:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8026b58:	4b6b      	ldr	r3, [pc, #428]	@ (8026d08 <MX_CAN1_Init+0x1fc>)
 8026b5a:	2201      	movs	r2, #1
 8026b5c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8026b5e:	486a      	ldr	r0, [pc, #424]	@ (8026d08 <MX_CAN1_Init+0x1fc>)
 8026b60:	f002 fcbc 	bl	80294dc <HAL_CAN_Init>
 8026b64:	4603      	mov	r3, r0
 8026b66:	2b00      	cmp	r3, #0
 8026b68:	d001      	beq.n	8026b6e <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8026b6a:	f001 f8bd 	bl	8027ce8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
	CAN_FilterTypeDef filterConfig;
	filterConfig.FilterBank = 6;
 8026b6e:	2306      	movs	r3, #6
 8026b70:	617b      	str	r3, [r7, #20]
		filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8026b72:	2300      	movs	r3, #0
 8026b74:	61bb      	str	r3, [r7, #24]
		filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8026b76:	2301      	movs	r3, #1
 8026b78:	61fb      	str	r3, [r7, #28]
		filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8026b7a:	2300      	movs	r3, #0
 8026b7c:	613b      	str	r3, [r7, #16]
		filterConfig.FilterActivation = ENABLE;
 8026b7e:	2301      	movs	r3, #1
 8026b80:	623b      	str	r3, [r7, #32]
		filterConfig.FilterIdHigh = (0x99 << 5) & 0xFFFF;
 8026b82:	f44f 5399 	mov.w	r3, #4896	@ 0x1320
 8026b86:	603b      	str	r3, [r7, #0]
		filterConfig.FilterIdLow = 0x0000;
 8026b88:	2300      	movs	r3, #0
 8026b8a:	607b      	str	r3, [r7, #4]
		filterConfig.FilterMaskIdHigh = (0x7FF << 5);
 8026b8c:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8026b90:	60bb      	str	r3, [r7, #8]
		filterConfig.FilterMaskIdLow = 0x0000;
 8026b92:	2300      	movs	r3, #0
 8026b94:	60fb      	str	r3, [r7, #12]
		HAL_CAN_ConfigFilter(&hcan1, &filterConfig);
 8026b96:	463b      	mov	r3, r7
 8026b98:	4619      	mov	r1, r3
 8026b9a:	485b      	ldr	r0, [pc, #364]	@ (8026d08 <MX_CAN1_Init+0x1fc>)
 8026b9c:	f002 ff4a 	bl	8029a34 <HAL_CAN_ConfigFilter>
	filterConfig.FilterBank = 7;
 8026ba0:	2307      	movs	r3, #7
 8026ba2:	617b      	str	r3, [r7, #20]
	filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8026ba4:	2300      	movs	r3, #0
 8026ba6:	61bb      	str	r3, [r7, #24]
	filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8026ba8:	2301      	movs	r3, #1
 8026baa:	61fb      	str	r3, [r7, #28]
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8026bac:	2300      	movs	r3, #0
 8026bae:	613b      	str	r3, [r7, #16]
	filterConfig.FilterActivation = ENABLE;
 8026bb0:	2301      	movs	r3, #1
 8026bb2:	623b      	str	r3, [r7, #32]
	filterConfig.FilterIdHigh = (0x97 << 5) & 0xFFFF;
 8026bb4:	f44f 5397 	mov.w	r3, #4832	@ 0x12e0
 8026bb8:	603b      	str	r3, [r7, #0]
	filterConfig.FilterIdLow = 0x0000;
 8026bba:	2300      	movs	r3, #0
 8026bbc:	607b      	str	r3, [r7, #4]
	filterConfig.FilterMaskIdHigh = (0x7FF << 5);
 8026bbe:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8026bc2:	60bb      	str	r3, [r7, #8]
	filterConfig.FilterMaskIdLow = 0x0000;
 8026bc4:	2300      	movs	r3, #0
 8026bc6:	60fb      	str	r3, [r7, #12]
	HAL_CAN_ConfigFilter(&hcan1, &filterConfig);
 8026bc8:	463b      	mov	r3, r7
 8026bca:	4619      	mov	r1, r3
 8026bcc:	484e      	ldr	r0, [pc, #312]	@ (8026d08 <MX_CAN1_Init+0x1fc>)
 8026bce:	f002 ff31 	bl	8029a34 <HAL_CAN_ConfigFilter>
	filterConfig.FilterBank = 8;
 8026bd2:	2308      	movs	r3, #8
 8026bd4:	617b      	str	r3, [r7, #20]
	filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8026bd6:	2300      	movs	r3, #0
 8026bd8:	61bb      	str	r3, [r7, #24]
	filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8026bda:	2301      	movs	r3, #1
 8026bdc:	61fb      	str	r3, [r7, #28]
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8026bde:	2300      	movs	r3, #0
 8026be0:	613b      	str	r3, [r7, #16]
	filterConfig.FilterActivation = ENABLE;
 8026be2:	2301      	movs	r3, #1
 8026be4:	623b      	str	r3, [r7, #32]
	filterConfig.FilterIdHigh = (0x98 << 5) & 0xFFFF;
 8026be6:	f44f 5398 	mov.w	r3, #4864	@ 0x1300
 8026bea:	603b      	str	r3, [r7, #0]
	filterConfig.FilterIdLow = 0x0000;
 8026bec:	2300      	movs	r3, #0
 8026bee:	607b      	str	r3, [r7, #4]
	filterConfig.FilterMaskIdHigh = (0x7FF << 5);
 8026bf0:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8026bf4:	60bb      	str	r3, [r7, #8]
	filterConfig.FilterMaskIdLow = 0x0000;
 8026bf6:	2300      	movs	r3, #0
 8026bf8:	60fb      	str	r3, [r7, #12]
	HAL_CAN_ConfigFilter(&hcan1, &filterConfig);
 8026bfa:	463b      	mov	r3, r7
 8026bfc:	4619      	mov	r1, r3
 8026bfe:	4842      	ldr	r0, [pc, #264]	@ (8026d08 <MX_CAN1_Init+0x1fc>)
 8026c00:	f002 ff18 	bl	8029a34 <HAL_CAN_ConfigFilter>
	filterConfig.FilterBank = 9;
 8026c04:	2309      	movs	r3, #9
 8026c06:	617b      	str	r3, [r7, #20]
	filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8026c08:	2300      	movs	r3, #0
 8026c0a:	61bb      	str	r3, [r7, #24]
	filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8026c0c:	2301      	movs	r3, #1
 8026c0e:	61fb      	str	r3, [r7, #28]
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8026c10:	2300      	movs	r3, #0
 8026c12:	613b      	str	r3, [r7, #16]
	filterConfig.FilterActivation = ENABLE;
 8026c14:	2301      	movs	r3, #1
 8026c16:	623b      	str	r3, [r7, #32]
	filterConfig.FilterIdHigh = (0x10B << 5) & 0xFFFF;
 8026c18:	f242 1360 	movw	r3, #8544	@ 0x2160
 8026c1c:	603b      	str	r3, [r7, #0]
	filterConfig.FilterIdLow = 0x0000;
 8026c1e:	2300      	movs	r3, #0
 8026c20:	607b      	str	r3, [r7, #4]
	filterConfig.FilterMaskIdHigh = (0x7FF << 5);
 8026c22:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8026c26:	60bb      	str	r3, [r7, #8]
	filterConfig.FilterMaskIdLow = 0x0000;
 8026c28:	2300      	movs	r3, #0
 8026c2a:	60fb      	str	r3, [r7, #12]
	HAL_CAN_ConfigFilter(&hcan1, &filterConfig);
 8026c2c:	463b      	mov	r3, r7
 8026c2e:	4619      	mov	r1, r3
 8026c30:	4835      	ldr	r0, [pc, #212]	@ (8026d08 <MX_CAN1_Init+0x1fc>)
 8026c32:	f002 feff 	bl	8029a34 <HAL_CAN_ConfigFilter>
	filterConfig.FilterBank = 10;
 8026c36:	230a      	movs	r3, #10
 8026c38:	617b      	str	r3, [r7, #20]
	filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8026c3a:	2300      	movs	r3, #0
 8026c3c:	61bb      	str	r3, [r7, #24]
	filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8026c3e:	2301      	movs	r3, #1
 8026c40:	61fb      	str	r3, [r7, #28]
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8026c42:	2300      	movs	r3, #0
 8026c44:	613b      	str	r3, [r7, #16]
	filterConfig.FilterActivation = ENABLE;
 8026c46:	2301      	movs	r3, #1
 8026c48:	623b      	str	r3, [r7, #32]
	filterConfig.FilterIdHigh = (0x10F << 5) & 0xFFFF;
 8026c4a:	f242 13e0 	movw	r3, #8672	@ 0x21e0
 8026c4e:	603b      	str	r3, [r7, #0]
	filterConfig.FilterIdLow = 0x0000;
 8026c50:	2300      	movs	r3, #0
 8026c52:	607b      	str	r3, [r7, #4]
	filterConfig.FilterMaskIdHigh = (0x7FF << 5);
 8026c54:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8026c58:	60bb      	str	r3, [r7, #8]
	filterConfig.FilterMaskIdLow = 0x0000;
 8026c5a:	2300      	movs	r3, #0
 8026c5c:	60fb      	str	r3, [r7, #12]
	HAL_CAN_ConfigFilter(&hcan1, &filterConfig);
 8026c5e:	463b      	mov	r3, r7
 8026c60:	4619      	mov	r1, r3
 8026c62:	4829      	ldr	r0, [pc, #164]	@ (8026d08 <MX_CAN1_Init+0x1fc>)
 8026c64:	f002 fee6 	bl	8029a34 <HAL_CAN_ConfigFilter>
	filterConfig.FilterBank = 11;
 8026c68:	230b      	movs	r3, #11
 8026c6a:	617b      	str	r3, [r7, #20]
	filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8026c6c:	2300      	movs	r3, #0
 8026c6e:	61bb      	str	r3, [r7, #24]
	filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8026c70:	2301      	movs	r3, #1
 8026c72:	61fb      	str	r3, [r7, #28]
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8026c74:	2300      	movs	r3, #0
 8026c76:	613b      	str	r3, [r7, #16]
	filterConfig.FilterActivation = ENABLE;
 8026c78:	2301      	movs	r3, #1
 8026c7a:	623b      	str	r3, [r7, #32]
	filterConfig.FilterIdHigh = (0x510 << 5) & 0xFFFF;
 8026c7c:	f44f 4322 	mov.w	r3, #41472	@ 0xa200
 8026c80:	603b      	str	r3, [r7, #0]
	filterConfig.FilterIdLow = 0x0000;
 8026c82:	2300      	movs	r3, #0
 8026c84:	607b      	str	r3, [r7, #4]
	filterConfig.FilterMaskIdHigh = (0x7FF << 5);
 8026c86:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8026c8a:	60bb      	str	r3, [r7, #8]
	filterConfig.FilterMaskIdLow = 0x0000;
 8026c8c:	2300      	movs	r3, #0
 8026c8e:	60fb      	str	r3, [r7, #12]
	HAL_CAN_ConfigFilter(&hcan1, &filterConfig);
 8026c90:	463b      	mov	r3, r7
 8026c92:	4619      	mov	r1, r3
 8026c94:	481c      	ldr	r0, [pc, #112]	@ (8026d08 <MX_CAN1_Init+0x1fc>)
 8026c96:	f002 fecd 	bl	8029a34 <HAL_CAN_ConfigFilter>
	filterConfig.FilterBank = 12;
 8026c9a:	230c      	movs	r3, #12
 8026c9c:	617b      	str	r3, [r7, #20]
	filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8026c9e:	2300      	movs	r3, #0
 8026ca0:	61bb      	str	r3, [r7, #24]
	filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8026ca2:	2301      	movs	r3, #1
 8026ca4:	61fb      	str	r3, [r7, #28]
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8026ca6:	2300      	movs	r3, #0
 8026ca8:	613b      	str	r3, [r7, #16]
	filterConfig.FilterActivation = ENABLE;
 8026caa:	2301      	movs	r3, #1
 8026cac:	623b      	str	r3, [r7, #32]
	filterConfig.FilterIdHigh = (0x604 << 5) & 0xFFFF;
 8026cae:	f24c 0380 	movw	r3, #49280	@ 0xc080
 8026cb2:	603b      	str	r3, [r7, #0]
	filterConfig.FilterIdLow = 0x0000;
 8026cb4:	2300      	movs	r3, #0
 8026cb6:	607b      	str	r3, [r7, #4]
	filterConfig.FilterMaskIdHigh = (0x7FF << 5);
 8026cb8:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8026cbc:	60bb      	str	r3, [r7, #8]
	filterConfig.FilterMaskIdLow = 0x0000;
 8026cbe:	2300      	movs	r3, #0
 8026cc0:	60fb      	str	r3, [r7, #12]
	HAL_CAN_ConfigFilter(&hcan1, &filterConfig);
 8026cc2:	463b      	mov	r3, r7
 8026cc4:	4619      	mov	r1, r3
 8026cc6:	4810      	ldr	r0, [pc, #64]	@ (8026d08 <MX_CAN1_Init+0x1fc>)
 8026cc8:	f002 feb4 	bl	8029a34 <HAL_CAN_ConfigFilter>
	filterConfig.FilterBank = 13;
 8026ccc:	230d      	movs	r3, #13
 8026cce:	617b      	str	r3, [r7, #20]
	filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8026cd0:	2300      	movs	r3, #0
 8026cd2:	61bb      	str	r3, [r7, #24]
	filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8026cd4:	2301      	movs	r3, #1
 8026cd6:	61fb      	str	r3, [r7, #28]
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8026cd8:	2300      	movs	r3, #0
 8026cda:	613b      	str	r3, [r7, #16]
	filterConfig.FilterActivation = ENABLE;
 8026cdc:	2301      	movs	r3, #1
 8026cde:	623b      	str	r3, [r7, #32]
	filterConfig.FilterIdHigh = (0x704 << 5) & 0xFFFF;
 8026ce0:	f24e 0380 	movw	r3, #57472	@ 0xe080
 8026ce4:	603b      	str	r3, [r7, #0]
	filterConfig.FilterIdLow = 0x0000;
 8026ce6:	2300      	movs	r3, #0
 8026ce8:	607b      	str	r3, [r7, #4]
	filterConfig.FilterMaskIdHigh = (0x7FF << 5);
 8026cea:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8026cee:	60bb      	str	r3, [r7, #8]
	filterConfig.FilterMaskIdLow = 0x0000;
 8026cf0:	2300      	movs	r3, #0
 8026cf2:	60fb      	str	r3, [r7, #12]
	HAL_CAN_ConfigFilter(&hcan1, &filterConfig);
 8026cf4:	463b      	mov	r3, r7
 8026cf6:	4619      	mov	r1, r3
 8026cf8:	4803      	ldr	r0, [pc, #12]	@ (8026d08 <MX_CAN1_Init+0x1fc>)
 8026cfa:	f002 fe9b 	bl	8029a34 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8026cfe:	bf00      	nop
 8026d00:	3728      	adds	r7, #40	@ 0x28
 8026d02:	46bd      	mov	sp, r7
 8026d04:	bd80      	pop	{r7, pc}
 8026d06:	bf00      	nop
 8026d08:	200001a8 	.word	0x200001a8
 8026d0c:	40006400 	.word	0x40006400

08026d10 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8026d10:	b580      	push	{r7, lr}
 8026d12:	b08a      	sub	sp, #40	@ 0x28
 8026d14:	af00      	add	r7, sp, #0
 8026d16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8026d18:	f107 0314 	add.w	r3, r7, #20
 8026d1c:	2200      	movs	r2, #0
 8026d1e:	601a      	str	r2, [r3, #0]
 8026d20:	605a      	str	r2, [r3, #4]
 8026d22:	609a      	str	r2, [r3, #8]
 8026d24:	60da      	str	r2, [r3, #12]
 8026d26:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8026d28:	687b      	ldr	r3, [r7, #4]
 8026d2a:	681b      	ldr	r3, [r3, #0]
 8026d2c:	4a22      	ldr	r2, [pc, #136]	@ (8026db8 <HAL_CAN_MspInit+0xa8>)
 8026d2e:	4293      	cmp	r3, r2
 8026d30:	d13d      	bne.n	8026dae <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */
  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8026d32:	2300      	movs	r3, #0
 8026d34:	613b      	str	r3, [r7, #16]
 8026d36:	4b21      	ldr	r3, [pc, #132]	@ (8026dbc <HAL_CAN_MspInit+0xac>)
 8026d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8026d3a:	4a20      	ldr	r2, [pc, #128]	@ (8026dbc <HAL_CAN_MspInit+0xac>)
 8026d3c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8026d40:	6413      	str	r3, [r2, #64]	@ 0x40
 8026d42:	4b1e      	ldr	r3, [pc, #120]	@ (8026dbc <HAL_CAN_MspInit+0xac>)
 8026d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8026d46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8026d4a:	613b      	str	r3, [r7, #16]
 8026d4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8026d4e:	2300      	movs	r3, #0
 8026d50:	60fb      	str	r3, [r7, #12]
 8026d52:	4b1a      	ldr	r3, [pc, #104]	@ (8026dbc <HAL_CAN_MspInit+0xac>)
 8026d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8026d56:	4a19      	ldr	r2, [pc, #100]	@ (8026dbc <HAL_CAN_MspInit+0xac>)
 8026d58:	f043 0301 	orr.w	r3, r3, #1
 8026d5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8026d5e:	4b17      	ldr	r3, [pc, #92]	@ (8026dbc <HAL_CAN_MspInit+0xac>)
 8026d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8026d62:	f003 0301 	and.w	r3, r3, #1
 8026d66:	60fb      	str	r3, [r7, #12]
 8026d68:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8026d6a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8026d6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8026d70:	2302      	movs	r3, #2
 8026d72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8026d74:	2300      	movs	r3, #0
 8026d76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8026d78:	2303      	movs	r3, #3
 8026d7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8026d7c:	2309      	movs	r3, #9
 8026d7e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8026d80:	f107 0314 	add.w	r3, r7, #20
 8026d84:	4619      	mov	r1, r3
 8026d86:	480e      	ldr	r0, [pc, #56]	@ (8026dc0 <HAL_CAN_MspInit+0xb0>)
 8026d88:	f006 fed8 	bl	802db3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8026d8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8026d90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8026d92:	2302      	movs	r3, #2
 8026d94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8026d96:	2301      	movs	r3, #1
 8026d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8026d9a:	2303      	movs	r3, #3
 8026d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8026d9e:	2309      	movs	r3, #9
 8026da0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8026da2:	f107 0314 	add.w	r3, r7, #20
 8026da6:	4619      	mov	r1, r3
 8026da8:	4805      	ldr	r0, [pc, #20]	@ (8026dc0 <HAL_CAN_MspInit+0xb0>)
 8026daa:	f006 fec7 	bl	802db3c <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */
  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8026dae:	bf00      	nop
 8026db0:	3728      	adds	r7, #40	@ 0x28
 8026db2:	46bd      	mov	sp, r7
 8026db4:	bd80      	pop	{r7, pc}
 8026db6:	bf00      	nop
 8026db8:	40006400 	.word	0x40006400
 8026dbc:	40023800 	.word	0x40023800
 8026dc0:	40020000 	.word	0x40020000

08026dc4 <HAL_CAN_MspDeInit>:

void HAL_CAN_MspDeInit(CAN_HandleTypeDef* canHandle)
{
 8026dc4:	b580      	push	{r7, lr}
 8026dc6:	b082      	sub	sp, #8
 8026dc8:	af00      	add	r7, sp, #0
 8026dca:	6078      	str	r0, [r7, #4]

  if(canHandle->Instance==CAN1)
 8026dcc:	687b      	ldr	r3, [r7, #4]
 8026dce:	681b      	ldr	r3, [r3, #0]
 8026dd0:	4a0e      	ldr	r2, [pc, #56]	@ (8026e0c <HAL_CAN_MspDeInit+0x48>)
 8026dd2:	4293      	cmp	r3, r2
 8026dd4:	d116      	bne.n	8026e04 <HAL_CAN_MspDeInit+0x40>
  {
  /* USER CODE BEGIN CAN1_MspDeInit 0 */
  /* USER CODE END CAN1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CAN1_CLK_DISABLE();
 8026dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8026e10 <HAL_CAN_MspDeInit+0x4c>)
 8026dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8026dda:	4a0d      	ldr	r2, [pc, #52]	@ (8026e10 <HAL_CAN_MspDeInit+0x4c>)
 8026ddc:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8026de0:	6413      	str	r3, [r2, #64]	@ 0x40

    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 8026de2:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8026de6:	480b      	ldr	r0, [pc, #44]	@ (8026e14 <HAL_CAN_MspDeInit+0x50>)
 8026de8:	f007 f988 	bl	802e0fc <HAL_GPIO_DeInit>

    /* CAN1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(CAN1_TX_IRQn);
 8026dec:	2013      	movs	r0, #19
 8026dee:	f003 fe8f 	bl	802ab10 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN1_RX0_IRQn);
 8026df2:	2014      	movs	r0, #20
 8026df4:	f003 fe8c 	bl	802ab10 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN1_RX1_IRQn);
 8026df8:	2015      	movs	r0, #21
 8026dfa:	f003 fe89 	bl	802ab10 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN1_SCE_IRQn);
 8026dfe:	2016      	movs	r0, #22
 8026e00:	f003 fe86 	bl	802ab10 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN CAN1_MspDeInit 1 */
  /* USER CODE END CAN1_MspDeInit 1 */
  }
}
 8026e04:	bf00      	nop
 8026e06:	3708      	adds	r7, #8
 8026e08:	46bd      	mov	sp, r7
 8026e0a:	bd80      	pop	{r7, pc}
 8026e0c:	40006400 	.word	0x40006400
 8026e10:	40023800 	.word	0x40023800
 8026e14:	40020000 	.word	0x40020000

08026e18 <MX_DCMI_Init>:
DCMI_HandleTypeDef hdcmi;
DMA_HandleTypeDef hdma_dcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 8026e18:	b580      	push	{r7, lr}
 8026e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_Init 0 */
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */
  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8026e1c:	4b10      	ldr	r3, [pc, #64]	@ (8026e60 <MX_DCMI_Init+0x48>)
 8026e1e:	4a11      	ldr	r2, [pc, #68]	@ (8026e64 <MX_DCMI_Init+0x4c>)
 8026e20:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8026e22:	4b0f      	ldr	r3, [pc, #60]	@ (8026e60 <MX_DCMI_Init+0x48>)
 8026e24:	2200      	movs	r2, #0
 8026e26:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8026e28:	4b0d      	ldr	r3, [pc, #52]	@ (8026e60 <MX_DCMI_Init+0x48>)
 8026e2a:	2220      	movs	r2, #32
 8026e2c:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8026e2e:	4b0c      	ldr	r3, [pc, #48]	@ (8026e60 <MX_DCMI_Init+0x48>)
 8026e30:	2280      	movs	r2, #128	@ 0x80
 8026e32:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8026e34:	4b0a      	ldr	r3, [pc, #40]	@ (8026e60 <MX_DCMI_Init+0x48>)
 8026e36:	2200      	movs	r2, #0
 8026e38:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8026e3a:	4b09      	ldr	r3, [pc, #36]	@ (8026e60 <MX_DCMI_Init+0x48>)
 8026e3c:	2200      	movs	r2, #0
 8026e3e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8026e40:	4b07      	ldr	r3, [pc, #28]	@ (8026e60 <MX_DCMI_Init+0x48>)
 8026e42:	2200      	movs	r2, #0
 8026e44:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8026e46:	4b06      	ldr	r3, [pc, #24]	@ (8026e60 <MX_DCMI_Init+0x48>)
 8026e48:	2200      	movs	r2, #0
 8026e4a:	621a      	str	r2, [r3, #32]
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8026e4c:	4804      	ldr	r0, [pc, #16]	@ (8026e60 <MX_DCMI_Init+0x48>)
 8026e4e:	f004 f90b 	bl	802b068 <HAL_DCMI_Init>
 8026e52:	4603      	mov	r3, r0
 8026e54:	2b00      	cmp	r3, #0
 8026e56:	d001      	beq.n	8026e5c <MX_DCMI_Init+0x44>
  {
    Error_Handler();
 8026e58:	f000 ff46 	bl	8027ce8 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */
  /* USER CODE END DCMI_Init 2 */

}
 8026e5c:	bf00      	nop
 8026e5e:	bd80      	pop	{r7, pc}
 8026e60:	2000020c 	.word	0x2000020c
 8026e64:	50050000 	.word	0x50050000

08026e68 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8026e68:	b580      	push	{r7, lr}
 8026e6a:	b08c      	sub	sp, #48	@ 0x30
 8026e6c:	af00      	add	r7, sp, #0
 8026e6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8026e70:	f107 031c 	add.w	r3, r7, #28
 8026e74:	2200      	movs	r2, #0
 8026e76:	601a      	str	r2, [r3, #0]
 8026e78:	605a      	str	r2, [r3, #4]
 8026e7a:	609a      	str	r2, [r3, #8]
 8026e7c:	60da      	str	r2, [r3, #12]
 8026e7e:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8026e80:	687b      	ldr	r3, [r7, #4]
 8026e82:	681b      	ldr	r3, [r3, #0]
 8026e84:	4a51      	ldr	r2, [pc, #324]	@ (8026fcc <HAL_DCMI_MspInit+0x164>)
 8026e86:	4293      	cmp	r3, r2
 8026e88:	f040 809c 	bne.w	8026fc4 <HAL_DCMI_MspInit+0x15c>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */
  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8026e8c:	2300      	movs	r3, #0
 8026e8e:	61bb      	str	r3, [r7, #24]
 8026e90:	4b4f      	ldr	r3, [pc, #316]	@ (8026fd0 <HAL_DCMI_MspInit+0x168>)
 8026e92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8026e94:	4a4e      	ldr	r2, [pc, #312]	@ (8026fd0 <HAL_DCMI_MspInit+0x168>)
 8026e96:	f043 0301 	orr.w	r3, r3, #1
 8026e9a:	6353      	str	r3, [r2, #52]	@ 0x34
 8026e9c:	4b4c      	ldr	r3, [pc, #304]	@ (8026fd0 <HAL_DCMI_MspInit+0x168>)
 8026e9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8026ea0:	f003 0301 	and.w	r3, r3, #1
 8026ea4:	61bb      	str	r3, [r7, #24]
 8026ea6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8026ea8:	2300      	movs	r3, #0
 8026eaa:	617b      	str	r3, [r7, #20]
 8026eac:	4b48      	ldr	r3, [pc, #288]	@ (8026fd0 <HAL_DCMI_MspInit+0x168>)
 8026eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8026eb0:	4a47      	ldr	r2, [pc, #284]	@ (8026fd0 <HAL_DCMI_MspInit+0x168>)
 8026eb2:	f043 0301 	orr.w	r3, r3, #1
 8026eb6:	6313      	str	r3, [r2, #48]	@ 0x30
 8026eb8:	4b45      	ldr	r3, [pc, #276]	@ (8026fd0 <HAL_DCMI_MspInit+0x168>)
 8026eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8026ebc:	f003 0301 	and.w	r3, r3, #1
 8026ec0:	617b      	str	r3, [r7, #20]
 8026ec2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8026ec4:	2300      	movs	r3, #0
 8026ec6:	613b      	str	r3, [r7, #16]
 8026ec8:	4b41      	ldr	r3, [pc, #260]	@ (8026fd0 <HAL_DCMI_MspInit+0x168>)
 8026eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8026ecc:	4a40      	ldr	r2, [pc, #256]	@ (8026fd0 <HAL_DCMI_MspInit+0x168>)
 8026ece:	f043 0304 	orr.w	r3, r3, #4
 8026ed2:	6313      	str	r3, [r2, #48]	@ 0x30
 8026ed4:	4b3e      	ldr	r3, [pc, #248]	@ (8026fd0 <HAL_DCMI_MspInit+0x168>)
 8026ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8026ed8:	f003 0304 	and.w	r3, r3, #4
 8026edc:	613b      	str	r3, [r7, #16]
 8026ede:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8026ee0:	2300      	movs	r3, #0
 8026ee2:	60fb      	str	r3, [r7, #12]
 8026ee4:	4b3a      	ldr	r3, [pc, #232]	@ (8026fd0 <HAL_DCMI_MspInit+0x168>)
 8026ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8026ee8:	4a39      	ldr	r2, [pc, #228]	@ (8026fd0 <HAL_DCMI_MspInit+0x168>)
 8026eea:	f043 0302 	orr.w	r3, r3, #2
 8026eee:	6313      	str	r3, [r2, #48]	@ 0x30
 8026ef0:	4b37      	ldr	r3, [pc, #220]	@ (8026fd0 <HAL_DCMI_MspInit+0x168>)
 8026ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8026ef4:	f003 0302 	and.w	r3, r3, #2
 8026ef8:	60fb      	str	r3, [r7, #12]
 8026efa:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PB8     ------> DCMI_D6
    PB9     ------> DCMI_D7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8026efc:	2350      	movs	r3, #80	@ 0x50
 8026efe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8026f00:	2302      	movs	r3, #2
 8026f02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8026f04:	2302      	movs	r3, #2
 8026f06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8026f08:	2303      	movs	r3, #3
 8026f0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8026f0c:	230d      	movs	r3, #13
 8026f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8026f10:	f107 031c 	add.w	r3, r7, #28
 8026f14:	4619      	mov	r1, r3
 8026f16:	482f      	ldr	r0, [pc, #188]	@ (8026fd4 <HAL_DCMI_MspInit+0x16c>)
 8026f18:	f006 fe10 	bl	802db3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8026f1c:	f44f 633c 	mov.w	r3, #3008	@ 0xbc0
 8026f20:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8026f22:	2302      	movs	r3, #2
 8026f24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8026f26:	2302      	movs	r3, #2
 8026f28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8026f2a:	2303      	movs	r3, #3
 8026f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8026f2e:	230d      	movs	r3, #13
 8026f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8026f32:	f107 031c 	add.w	r3, r7, #28
 8026f36:	4619      	mov	r1, r3
 8026f38:	4827      	ldr	r0, [pc, #156]	@ (8026fd8 <HAL_DCMI_MspInit+0x170>)
 8026f3a:	f006 fdff 	bl	802db3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8026f3e:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8026f42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8026f44:	2302      	movs	r3, #2
 8026f46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8026f48:	2302      	movs	r3, #2
 8026f4a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8026f4c:	2303      	movs	r3, #3
 8026f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8026f50:	230d      	movs	r3, #13
 8026f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8026f54:	f107 031c 	add.w	r3, r7, #28
 8026f58:	4619      	mov	r1, r3
 8026f5a:	4820      	ldr	r0, [pc, #128]	@ (8026fdc <HAL_DCMI_MspInit+0x174>)
 8026f5c:	f006 fdee 	bl	802db3c <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream7;
 8026f60:	4b1f      	ldr	r3, [pc, #124]	@ (8026fe0 <HAL_DCMI_MspInit+0x178>)
 8026f62:	4a20      	ldr	r2, [pc, #128]	@ (8026fe4 <HAL_DCMI_MspInit+0x17c>)
 8026f64:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8026f66:	4b1e      	ldr	r3, [pc, #120]	@ (8026fe0 <HAL_DCMI_MspInit+0x178>)
 8026f68:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8026f6c:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8026f6e:	4b1c      	ldr	r3, [pc, #112]	@ (8026fe0 <HAL_DCMI_MspInit+0x178>)
 8026f70:	2200      	movs	r2, #0
 8026f72:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8026f74:	4b1a      	ldr	r3, [pc, #104]	@ (8026fe0 <HAL_DCMI_MspInit+0x178>)
 8026f76:	2200      	movs	r2, #0
 8026f78:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8026f7a:	4b19      	ldr	r3, [pc, #100]	@ (8026fe0 <HAL_DCMI_MspInit+0x178>)
 8026f7c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8026f80:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8026f82:	4b17      	ldr	r3, [pc, #92]	@ (8026fe0 <HAL_DCMI_MspInit+0x178>)
 8026f84:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8026f88:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8026f8a:	4b15      	ldr	r3, [pc, #84]	@ (8026fe0 <HAL_DCMI_MspInit+0x178>)
 8026f8c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8026f90:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 8026f92:	4b13      	ldr	r3, [pc, #76]	@ (8026fe0 <HAL_DCMI_MspInit+0x178>)
 8026f94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8026f98:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8026f9a:	4b11      	ldr	r3, [pc, #68]	@ (8026fe0 <HAL_DCMI_MspInit+0x178>)
 8026f9c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8026fa0:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8026fa2:	4b0f      	ldr	r3, [pc, #60]	@ (8026fe0 <HAL_DCMI_MspInit+0x178>)
 8026fa4:	2200      	movs	r2, #0
 8026fa6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8026fa8:	480d      	ldr	r0, [pc, #52]	@ (8026fe0 <HAL_DCMI_MspInit+0x178>)
 8026faa:	f004 f95b 	bl	802b264 <HAL_DMA_Init>
 8026fae:	4603      	mov	r3, r0
 8026fb0:	2b00      	cmp	r3, #0
 8026fb2:	d001      	beq.n	8026fb8 <HAL_DCMI_MspInit+0x150>
    {
      Error_Handler();
 8026fb4:	f000 fe98 	bl	8027ce8 <Error_Handler>
    }

    __HAL_LINKDMA(dcmiHandle,DMA_Handle,hdma_dcmi);
 8026fb8:	687b      	ldr	r3, [r7, #4]
 8026fba:	4a09      	ldr	r2, [pc, #36]	@ (8026fe0 <HAL_DCMI_MspInit+0x178>)
 8026fbc:	639a      	str	r2, [r3, #56]	@ 0x38
 8026fbe:	4a08      	ldr	r2, [pc, #32]	@ (8026fe0 <HAL_DCMI_MspInit+0x178>)
 8026fc0:	687b      	ldr	r3, [r7, #4]
 8026fc2:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN DCMI_MspInit 1 */
  /* USER CODE END DCMI_MspInit 1 */
  }
}
 8026fc4:	bf00      	nop
 8026fc6:	3730      	adds	r7, #48	@ 0x30
 8026fc8:	46bd      	mov	sp, r7
 8026fca:	bd80      	pop	{r7, pc}
 8026fcc:	50050000 	.word	0x50050000
 8026fd0:	40023800 	.word	0x40023800
 8026fd4:	40020000 	.word	0x40020000
 8026fd8:	40020800 	.word	0x40020800
 8026fdc:	40020400 	.word	0x40020400
 8026fe0:	20000264 	.word	0x20000264
 8026fe4:	400264b8 	.word	0x400264b8

08026fe8 <HAL_DCMI_MspDeInit>:

void HAL_DCMI_MspDeInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8026fe8:	b580      	push	{r7, lr}
 8026fea:	b082      	sub	sp, #8
 8026fec:	af00      	add	r7, sp, #0
 8026fee:	6078      	str	r0, [r7, #4]

  if(dcmiHandle->Instance==DCMI)
 8026ff0:	687b      	ldr	r3, [r7, #4]
 8026ff2:	681b      	ldr	r3, [r3, #0]
 8026ff4:	4a11      	ldr	r2, [pc, #68]	@ (802703c <HAL_DCMI_MspDeInit+0x54>)
 8026ff6:	4293      	cmp	r3, r2
 8026ff8:	d11b      	bne.n	8027032 <HAL_DCMI_MspDeInit+0x4a>
  {
  /* USER CODE BEGIN DCMI_MspDeInit 0 */
  /* USER CODE END DCMI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DCMI_CLK_DISABLE();
 8026ffa:	4b11      	ldr	r3, [pc, #68]	@ (8027040 <HAL_DCMI_MspDeInit+0x58>)
 8026ffc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8026ffe:	4a10      	ldr	r2, [pc, #64]	@ (8027040 <HAL_DCMI_MspDeInit+0x58>)
 8027000:	f023 0301 	bic.w	r3, r3, #1
 8027004:	6353      	str	r3, [r2, #52]	@ 0x34
    PB6     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PB8     ------> DCMI_D6
    PB9     ------> DCMI_D7
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4|GPIO_PIN_6);
 8027006:	2150      	movs	r1, #80	@ 0x50
 8027008:	480e      	ldr	r0, [pc, #56]	@ (8027044 <HAL_DCMI_MspDeInit+0x5c>)
 802700a:	f007 f877 	bl	802e0fc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 802700e:	f44f 613c 	mov.w	r1, #3008	@ 0xbc0
 8027012:	480d      	ldr	r0, [pc, #52]	@ (8027048 <HAL_DCMI_MspDeInit+0x60>)
 8027014:	f007 f872 	bl	802e0fc <HAL_GPIO_DeInit>
                          |GPIO_PIN_11);

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 8027018:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 802701c:	480b      	ldr	r0, [pc, #44]	@ (802704c <HAL_DCMI_MspDeInit+0x64>)
 802701e:	f007 f86d 	bl	802e0fc <HAL_GPIO_DeInit>

    /* DCMI DMA DeInit */
    HAL_DMA_DeInit(dcmiHandle->DMA_Handle);
 8027022:	687b      	ldr	r3, [r7, #4]
 8027024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8027026:	4618      	mov	r0, r3
 8027028:	f004 fb36 	bl	802b698 <HAL_DMA_DeInit>

    /* DCMI interrupt Deinit */
    HAL_NVIC_DisableIRQ(DCMI_IRQn);
 802702c:	204e      	movs	r0, #78	@ 0x4e
 802702e:	f003 fd6f 	bl	802ab10 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DCMI_MspDeInit 1 */
  /* USER CODE END DCMI_MspDeInit 1 */
  }
}
 8027032:	bf00      	nop
 8027034:	3708      	adds	r7, #8
 8027036:	46bd      	mov	sp, r7
 8027038:	bd80      	pop	{r7, pc}
 802703a:	bf00      	nop
 802703c:	50050000 	.word	0x50050000
 8027040:	40023800 	.word	0x40023800
 8027044:	40020000 	.word	0x40020000
 8027048:	40020800 	.word	0x40020800
 802704c:	40020400 	.word	0x40020400

08027050 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8027050:	b480      	push	{r7}
 8027052:	b083      	sub	sp, #12
 8027054:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8027056:	2300      	movs	r3, #0
 8027058:	607b      	str	r3, [r7, #4]
 802705a:	4b09      	ldr	r3, [pc, #36]	@ (8027080 <MX_DMA_Init+0x30>)
 802705c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802705e:	4a08      	ldr	r2, [pc, #32]	@ (8027080 <MX_DMA_Init+0x30>)
 8027060:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8027064:	6313      	str	r3, [r2, #48]	@ 0x30
 8027066:	4b06      	ldr	r3, [pc, #24]	@ (8027080 <MX_DMA_Init+0x30>)
 8027068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802706a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 802706e:	607b      	str	r3, [r7, #4]
 8027070:	687b      	ldr	r3, [r7, #4]

}
 8027072:	bf00      	nop
 8027074:	370c      	adds	r7, #12
 8027076:	46bd      	mov	sp, r7
 8027078:	f85d 7b04 	ldr.w	r7, [sp], #4
 802707c:	4770      	bx	lr
 802707e:	bf00      	nop
 8027080:	40023800 	.word	0x40023800

08027084 <configureTimerForRunTimeStats>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 1 */
void configureTimerForRunTimeStats(void)
{
 8027084:	b580      	push	{r7, lr}
 8027086:	af00      	add	r7, sp, #0
	ulHighFrequencyTimerTicks = 0;
 8027088:	4b03      	ldr	r3, [pc, #12]	@ (8027098 <configureTimerForRunTimeStats+0x14>)
 802708a:	2200      	movs	r2, #0
 802708c:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim9);
 802708e:	4803      	ldr	r0, [pc, #12]	@ (802709c <configureTimerForRunTimeStats+0x18>)
 8027090:	f00b fe1e 	bl	8032cd0 <HAL_TIM_Base_Start_IT>
}
 8027094:	bf00      	nop
 8027096:	bd80      	pop	{r7, pc}
 8027098:	200004ac 	.word	0x200004ac
 802709c:	200006b8 	.word	0x200006b8

080270a0 <getRunTimeCounterValue>:

unsigned long getRunTimeCounterValue(void)
{
 80270a0:	b480      	push	{r7}
 80270a2:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 80270a4:	4b03      	ldr	r3, [pc, #12]	@ (80270b4 <getRunTimeCounterValue+0x14>)
 80270a6:	681b      	ldr	r3, [r3, #0]
}
 80270a8:	4618      	mov	r0, r3
 80270aa:	46bd      	mov	sp, r7
 80270ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80270b0:	4770      	bx	lr
 80270b2:	bf00      	nop
 80270b4:	200004ac 	.word	0x200004ac

080270b8 <vApplicationIdleHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 80270b8:	b580      	push	{r7, lr}
 80270ba:	af00      	add	r7, sp, #0
	IDLE_Counter++;
 80270bc:	4b0b      	ldr	r3, [pc, #44]	@ (80270ec <vApplicationIdleHook+0x34>)
 80270be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80270c2:	1c50      	adds	r0, r2, #1
 80270c4:	f143 0100 	adc.w	r1, r3, #0
 80270c8:	4b08      	ldr	r3, [pc, #32]	@ (80270ec <vApplicationIdleHook+0x34>)
 80270ca:	e9c3 0100 	strd	r0, r1, [r3]
	uxArraySize = uxTaskGetSystemState(xTaskStatusArray, 12, &ulTotalRunTime);
 80270ce:	4a08      	ldr	r2, [pc, #32]	@ (80270f0 <vApplicationIdleHook+0x38>)
 80270d0:	210c      	movs	r1, #12
 80270d2:	4808      	ldr	r0, [pc, #32]	@ (80270f4 <vApplicationIdleHook+0x3c>)
 80270d4:	f00f f87a 	bl	80361cc <uxTaskGetSystemState>
 80270d8:	4603      	mov	r3, r0
 80270da:	4a07      	ldr	r2, [pc, #28]	@ (80270f8 <vApplicationIdleHook+0x40>)
 80270dc:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 80270de:	2200      	movs	r2, #0
 80270e0:	2108      	movs	r1, #8
 80270e2:	4806      	ldr	r0, [pc, #24]	@ (80270fc <vApplicationIdleHook+0x44>)
 80270e4:	f007 f930 	bl	802e348 <HAL_GPIO_WritePin>

}
 80270e8:	bf00      	nop
 80270ea:	bd80      	pop	{r7, pc}
 80270ec:	200002d0 	.word	0x200002d0
 80270f0:	2000048c 	.word	0x2000048c
 80270f4:	200002d8 	.word	0x200002d8
 80270f8:	20000488 	.word	0x20000488
 80270fc:	40020800 	.word	0x40020800

08027100 <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 8027100:	b480      	push	{r7}
 8027102:	af00      	add	r7, sp, #0
	OS_Counter++;
 8027104:	4b06      	ldr	r3, [pc, #24]	@ (8027120 <vApplicationTickHook+0x20>)
 8027106:	e9d3 2300 	ldrd	r2, r3, [r3]
 802710a:	1c50      	adds	r0, r2, #1
 802710c:	f143 0100 	adc.w	r1, r3, #0
 8027110:	4b03      	ldr	r3, [pc, #12]	@ (8027120 <vApplicationTickHook+0x20>)
 8027112:	e9c3 0100 	strd	r0, r1, [r3]
}
 8027116:	bf00      	nop
 8027118:	46bd      	mov	sp, r7
 802711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802711e:	4770      	bx	lr
 8027120:	200002c8 	.word	0x200002c8

08027124 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8027124:	b580      	push	{r7, lr}
 8027126:	b082      	sub	sp, #8
 8027128:	af00      	add	r7, sp, #0
 802712a:	6078      	str	r0, [r7, #4]
 802712c:	6039      	str	r1, [r7, #0]
	EcuM_PerformReset(12);
 802712e:	200c      	movs	r0, #12
 8027130:	f7fe fe9c 	bl	8025e6c <EcuM_PerformReset>
}
 8027134:	bf00      	nop
 8027136:	3708      	adds	r7, #8
 8027138:	46bd      	mov	sp, r7
 802713a:	bd80      	pop	{r7, pc}

0802713c <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 802713c:	b580      	push	{r7, lr}
 802713e:	af00      	add	r7, sp, #0
	EcuM_PerformReset(11);
 8027140:	200b      	movs	r0, #11
 8027142:	f7fe fe93 	bl	8025e6c <EcuM_PerformReset>
}
 8027146:	bf00      	nop
 8027148:	bd80      	pop	{r7, pc}
	...

0802714c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 802714c:	b580      	push	{r7, lr}
 802714e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of Alarm5ms_QM_APPL */
  Alarm5ms_QM_APPLHandle = osTimerNew(Alarm5ms_QM_APPL_Callback, osTimerPeriodic, NULL, &Alarm5ms_QM_APPL_attributes);
 8027150:	4b32      	ldr	r3, [pc, #200]	@ (802721c <MX_FREERTOS_Init+0xd0>)
 8027152:	2200      	movs	r2, #0
 8027154:	2101      	movs	r1, #1
 8027156:	4832      	ldr	r0, [pc, #200]	@ (8027220 <MX_FREERTOS_Init+0xd4>)
 8027158:	f00d f8f2 	bl	8034340 <osTimerNew>
 802715c:	4603      	mov	r3, r0
 802715e:	4a31      	ldr	r2, [pc, #196]	@ (8027224 <MX_FREERTOS_Init+0xd8>)
 8027160:	6013      	str	r3, [r2, #0]

  /* creation of Alarm5ms_QM_BSW */
  Alarm5ms_QM_BSWHandle = osTimerNew(Alarm5ms_QM_BSW_Callback, osTimerPeriodic, NULL, &Alarm5ms_QM_BSW_attributes);
 8027162:	4b31      	ldr	r3, [pc, #196]	@ (8027228 <MX_FREERTOS_Init+0xdc>)
 8027164:	2200      	movs	r2, #0
 8027166:	2101      	movs	r1, #1
 8027168:	4830      	ldr	r0, [pc, #192]	@ (802722c <MX_FREERTOS_Init+0xe0>)
 802716a:	f00d f8e9 	bl	8034340 <osTimerNew>
 802716e:	4603      	mov	r3, r0
 8027170:	4a2f      	ldr	r2, [pc, #188]	@ (8027230 <MX_FREERTOS_Init+0xe4>)
 8027172:	6013      	str	r3, [r2, #0]

  /* creation of Alarm10ms_QM_APPL */
  Alarm10ms_QM_APPLHandle = osTimerNew(Alarm10ms_QM_APPL_Callback, osTimerPeriodic, NULL, &Alarm10ms_QM_APPL_attributes);
 8027174:	4b2f      	ldr	r3, [pc, #188]	@ (8027234 <MX_FREERTOS_Init+0xe8>)
 8027176:	2200      	movs	r2, #0
 8027178:	2101      	movs	r1, #1
 802717a:	482f      	ldr	r0, [pc, #188]	@ (8027238 <MX_FREERTOS_Init+0xec>)
 802717c:	f00d f8e0 	bl	8034340 <osTimerNew>
 8027180:	4603      	mov	r3, r0
 8027182:	4a2e      	ldr	r2, [pc, #184]	@ (802723c <MX_FREERTOS_Init+0xf0>)
 8027184:	6013      	str	r3, [r2, #0]

  /* creation of Alarm10ms_QM_BSW */
  Alarm10ms_QM_BSWHandle = osTimerNew(Alarm10ms_QM_BSW_Callback, osTimerPeriodic, NULL, &Alarm10ms_QM_BSW_attributes);
 8027186:	4b2e      	ldr	r3, [pc, #184]	@ (8027240 <MX_FREERTOS_Init+0xf4>)
 8027188:	2200      	movs	r2, #0
 802718a:	2101      	movs	r1, #1
 802718c:	482d      	ldr	r0, [pc, #180]	@ (8027244 <MX_FREERTOS_Init+0xf8>)
 802718e:	f00d f8d7 	bl	8034340 <osTimerNew>
 8027192:	4603      	mov	r3, r0
 8027194:	4a2c      	ldr	r2, [pc, #176]	@ (8027248 <MX_FREERTOS_Init+0xfc>)
 8027196:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_QUEUES */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of QM_APPL */
  QM_APPLHandle = osThreadNew(QM_APPL_OS_TASK, NULL, &QM_APPL_attributes);
 8027198:	4a2c      	ldr	r2, [pc, #176]	@ (802724c <MX_FREERTOS_Init+0x100>)
 802719a:	2100      	movs	r1, #0
 802719c:	482c      	ldr	r0, [pc, #176]	@ (8027250 <MX_FREERTOS_Init+0x104>)
 802719e:	f00d f827 	bl	80341f0 <osThreadNew>
 80271a2:	4603      	mov	r3, r0
 80271a4:	4a2b      	ldr	r2, [pc, #172]	@ (8027254 <MX_FREERTOS_Init+0x108>)
 80271a6:	6013      	str	r3, [r2, #0]

  /* creation of QM_BSW */
  QM_BSWHandle = osThreadNew(QM_BSW_OS_TASK, NULL, &QM_BSW_attributes);
 80271a8:	4a2b      	ldr	r2, [pc, #172]	@ (8027258 <MX_FREERTOS_Init+0x10c>)
 80271aa:	2100      	movs	r1, #0
 80271ac:	482b      	ldr	r0, [pc, #172]	@ (802725c <MX_FREERTOS_Init+0x110>)
 80271ae:	f00d f81f 	bl	80341f0 <osThreadNew>
 80271b2:	4603      	mov	r3, r0
 80271b4:	4a2a      	ldr	r2, [pc, #168]	@ (8027260 <MX_FREERTOS_Init+0x114>)
 80271b6:	6013      	str	r3, [r2, #0]

  /* creation of OS_CPULOAD_MONITORING */
  OS_CPULOAD_MONITORINGHandle = osThreadNew(OS_CPULOAD_MONITORING_TASK, NULL, &OS_CPULOAD_MONITORING_attributes);
 80271b8:	4a2a      	ldr	r2, [pc, #168]	@ (8027264 <MX_FREERTOS_Init+0x118>)
 80271ba:	2100      	movs	r1, #0
 80271bc:	482a      	ldr	r0, [pc, #168]	@ (8027268 <MX_FREERTOS_Init+0x11c>)
 80271be:	f00d f817 	bl	80341f0 <osThreadNew>
 80271c2:	4603      	mov	r3, r0
 80271c4:	4a29      	ldr	r2, [pc, #164]	@ (802726c <MX_FREERTOS_Init+0x120>)
 80271c6:	6013      	str	r3, [r2, #0]

  /* creation of NVM_HANDLING */
  NVM_HANDLINGHandle = osThreadNew(NVM_HANDLING_OS_TASK, NULL, &NVM_HANDLING_attributes);
 80271c8:	4a29      	ldr	r2, [pc, #164]	@ (8027270 <MX_FREERTOS_Init+0x124>)
 80271ca:	2100      	movs	r1, #0
 80271cc:	4829      	ldr	r0, [pc, #164]	@ (8027274 <MX_FREERTOS_Init+0x128>)
 80271ce:	f00d f80f 	bl	80341f0 <osThreadNew>
 80271d2:	4603      	mov	r3, r0
 80271d4:	4a28      	ldr	r2, [pc, #160]	@ (8027278 <MX_FREERTOS_Init+0x12c>)
 80271d6:	6013      	str	r3, [r2, #0]

  /* creation of QM_DCM */
  QM_DCMHandle = osThreadNew(OS_TASK_QM_DCM, NULL, &QM_DCM_attributes);
 80271d8:	4a28      	ldr	r2, [pc, #160]	@ (802727c <MX_FREERTOS_Init+0x130>)
 80271da:	2100      	movs	r1, #0
 80271dc:	4828      	ldr	r0, [pc, #160]	@ (8027280 <MX_FREERTOS_Init+0x134>)
 80271de:	f00d f807 	bl	80341f0 <osThreadNew>
 80271e2:	4603      	mov	r3, r0
 80271e4:	4a27      	ldr	r2, [pc, #156]	@ (8027284 <MX_FREERTOS_Init+0x138>)
 80271e6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	osTimerStart(Alarm10ms_QM_BSWHandle, 10);
 80271e8:	4b17      	ldr	r3, [pc, #92]	@ (8027248 <MX_FREERTOS_Init+0xfc>)
 80271ea:	681b      	ldr	r3, [r3, #0]
 80271ec:	210a      	movs	r1, #10
 80271ee:	4618      	mov	r0, r3
 80271f0:	f00d f922 	bl	8034438 <osTimerStart>
	osTimerStart(Alarm5ms_QM_BSWHandle, 5);
 80271f4:	4b0e      	ldr	r3, [pc, #56]	@ (8027230 <MX_FREERTOS_Init+0xe4>)
 80271f6:	681b      	ldr	r3, [r3, #0]
 80271f8:	2105      	movs	r1, #5
 80271fa:	4618      	mov	r0, r3
 80271fc:	f00d f91c 	bl	8034438 <osTimerStart>
	osTimerStart(Alarm10ms_QM_APPLHandle, 10);
 8027200:	4b0e      	ldr	r3, [pc, #56]	@ (802723c <MX_FREERTOS_Init+0xf0>)
 8027202:	681b      	ldr	r3, [r3, #0]
 8027204:	210a      	movs	r1, #10
 8027206:	4618      	mov	r0, r3
 8027208:	f00d f916 	bl	8034438 <osTimerStart>
	osTimerStart(Alarm5ms_QM_APPLHandle, 5);
 802720c:	4b05      	ldr	r3, [pc, #20]	@ (8027224 <MX_FREERTOS_Init+0xd8>)
 802720e:	681b      	ldr	r3, [r3, #0]
 8027210:	2105      	movs	r1, #5
 8027212:	4618      	mov	r0, r3
 8027214:	f00d f910 	bl	8034438 <osTimerStart>
  /* USER CODE END RTOS_EVENTS */

}
 8027218:	bf00      	nop
 802721a:	bd80      	pop	{r7, pc}
 802721c:	0803a7c0 	.word	0x0803a7c0
 8027220:	080274d5 	.word	0x080274d5
 8027224:	200004c4 	.word	0x200004c4
 8027228:	0803a7d0 	.word	0x0803a7d0
 802722c:	080274fd 	.word	0x080274fd
 8027230:	200004c8 	.word	0x200004c8
 8027234:	0803a7e0 	.word	0x0803a7e0
 8027238:	08027555 	.word	0x08027555
 802723c:	200004cc 	.word	0x200004cc
 8027240:	0803a7f0 	.word	0x0803a7f0
 8027244:	0802757d 	.word	0x0802757d
 8027248:	200004d0 	.word	0x200004d0
 802724c:	0803a70c 	.word	0x0803a70c
 8027250:	08027289 	.word	0x08027289
 8027254:	200004b0 	.word	0x200004b0
 8027258:	0803a730 	.word	0x0803a730
 802725c:	080272e5 	.word	0x080272e5
 8027260:	200004b4 	.word	0x200004b4
 8027264:	0803a754 	.word	0x0803a754
 8027268:	08027341 	.word	0x08027341
 802726c:	200004b8 	.word	0x200004b8
 8027270:	0803a778 	.word	0x0803a778
 8027274:	08027479 	.word	0x08027479
 8027278:	200004bc 	.word	0x200004bc
 802727c:	0803a79c 	.word	0x0803a79c
 8027280:	080274a1 	.word	0x080274a1
 8027284:	200004c0 	.word	0x200004c0

08027288 <QM_APPL_OS_TASK>:

/* USER CODE BEGIN Header_QM_APPL_OS_TASK */
/* USER CODE END Header_QM_APPL_OS_TASK */
void QM_APPL_OS_TASK(void *argument)
{
 8027288:	b580      	push	{r7, lr}
 802728a:	b082      	sub	sp, #8
 802728c:	af00      	add	r7, sp, #0
 802728e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN QM_APPL_OS_TASK */
	for(;;)
	{
		if(1 == Alarm5ms_QM_APPL)
 8027290:	4b10      	ldr	r3, [pc, #64]	@ (80272d4 <QM_APPL_OS_TASK+0x4c>)
 8027292:	781b      	ldrb	r3, [r3, #0]
 8027294:	2b01      	cmp	r3, #1
 8027296:	d10c      	bne.n	80272b2 <QM_APPL_OS_TASK+0x2a>
		{
			if(1 == EcuM_State && 2 == Nvm_ReadAllPending) DigitalCluster_MainFunction();
 8027298:	4b0f      	ldr	r3, [pc, #60]	@ (80272d8 <QM_APPL_OS_TASK+0x50>)
 802729a:	781b      	ldrb	r3, [r3, #0]
 802729c:	2b01      	cmp	r3, #1
 802729e:	d105      	bne.n	80272ac <QM_APPL_OS_TASK+0x24>
 80272a0:	4b0e      	ldr	r3, [pc, #56]	@ (80272dc <QM_APPL_OS_TASK+0x54>)
 80272a2:	781b      	ldrb	r3, [r3, #0]
 80272a4:	2b02      	cmp	r3, #2
 80272a6:	d101      	bne.n	80272ac <QM_APPL_OS_TASK+0x24>
 80272a8:	f7fb fcce 	bl	8022c48 <DigitalCluster_MainFunction>
			else
			{
				/* Do nothing. */
			}
			Alarm5ms_QM_APPL = 0;
 80272ac:	4b09      	ldr	r3, [pc, #36]	@ (80272d4 <QM_APPL_OS_TASK+0x4c>)
 80272ae:	2200      	movs	r2, #0
 80272b0:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* Do nothing.  */
		}
		if(1 == Alarm10ms_QM_APPL && 2 == Nvm_ReadAllPending)
 80272b2:	4b0b      	ldr	r3, [pc, #44]	@ (80272e0 <QM_APPL_OS_TASK+0x58>)
 80272b4:	781b      	ldrb	r3, [r3, #0]
 80272b6:	2b01      	cmp	r3, #1
 80272b8:	d108      	bne.n	80272cc <QM_APPL_OS_TASK+0x44>
 80272ba:	4b08      	ldr	r3, [pc, #32]	@ (80272dc <QM_APPL_OS_TASK+0x54>)
 80272bc:	781b      	ldrb	r3, [r3, #0]
 80272be:	2b02      	cmp	r3, #2
 80272c0:	d104      	bne.n	80272cc <QM_APPL_OS_TASK+0x44>
		{
			DataRecorder_MainFunction();
 80272c2:	f7f9 fd6b 	bl	8020d9c <DataRecorder_MainFunction>
			Alarm10ms_QM_APPL = 0;
 80272c6:	4b06      	ldr	r3, [pc, #24]	@ (80272e0 <QM_APPL_OS_TASK+0x58>)
 80272c8:	2200      	movs	r2, #0
 80272ca:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* Do nothing.  */
		}
		vTaskSuspend(NULL);
 80272cc:	2000      	movs	r0, #0
 80272ce:	f00e fd45 	bl	8035d5c <vTaskSuspend>
		if(1 == Alarm5ms_QM_APPL)
 80272d2:	e7dd      	b.n	8027290 <QM_APPL_OS_TASK+0x8>
 80272d4:	10000c81 	.word	0x10000c81
 80272d8:	10000c4c 	.word	0x10000c4c
 80272dc:	10000b15 	.word	0x10000b15
 80272e0:	10000c84 	.word	0x10000c84

080272e4 <QM_BSW_OS_TASK>:
}

/* USER CODE BEGIN Header_QM_BSW_OS_TASK */
/* USER CODE END Header_QM_BSW_OS_TASK */
void QM_BSW_OS_TASK(void *argument)
{
 80272e4:	b580      	push	{r7, lr}
 80272e6:	b082      	sub	sp, #8
 80272e8:	af00      	add	r7, sp, #0
 80272ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN QM_BSW_OS_TASK */
	for(;;)
	{
		if(1 == Alarm5ms_QM_BSW)
 80272ec:	4b11      	ldr	r3, [pc, #68]	@ (8027334 <QM_BSW_OS_TASK+0x50>)
 80272ee:	781b      	ldrb	r3, [r3, #0]
 80272f0:	2b01      	cmp	r3, #1
 80272f2:	d106      	bne.n	8027302 <QM_BSW_OS_TASK+0x1e>
		{
			EcuM_MainFunction();
 80272f4:	f7fe fdd8 	bl	8025ea8 <EcuM_MainFunction>
			CanH_MainFunction();
 80272f8:	f7fb fe54 	bl	8022fa4 <CanH_MainFunction>
			Alarm5ms_QM_BSW = 0;
 80272fc:	4b0d      	ldr	r3, [pc, #52]	@ (8027334 <QM_BSW_OS_TASK+0x50>)
 80272fe:	2200      	movs	r2, #0
 8027300:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* Do nothing.  */
		}
		if(1 == Alarm10ms_QM_BSW)
 8027302:	4b0d      	ldr	r3, [pc, #52]	@ (8027338 <QM_BSW_OS_TASK+0x54>)
 8027304:	781b      	ldrb	r3, [r3, #0]
 8027306:	2b01      	cmp	r3, #1
 8027308:	d110      	bne.n	802732c <QM_BSW_OS_TASK+0x48>
		{
			Ain_MainFunction();
 802730a:	f7fd fffd 	bl	8025308 <Ain_MainFunction>
			I2cH_MainFunction();
 802730e:	f7fc fd91 	bl	8023e34 <I2cH_MainFunction>
			DcmiH_MainFunction();
 8027312:	f7fe fb1f 	bl	8025954 <DcmiH_MainFunction>
			FsmcH_MainFunction();
 8027316:	f7fe ff77 	bl	8026208 <FsmcH_MainFunction>
			if(1 == EcuM_State) Dem_MainFunction();
 802731a:	4b08      	ldr	r3, [pc, #32]	@ (802733c <QM_BSW_OS_TASK+0x58>)
 802731c:	781b      	ldrb	r3, [r3, #0]
 802731e:	2b01      	cmp	r3, #1
 8027320:	d101      	bne.n	8027326 <QM_BSW_OS_TASK+0x42>
 8027322:	f7fd fef5 	bl	8025110 <Dem_MainFunction>
			else
			{
				/* Do nothing. */
			}
			Alarm10ms_QM_BSW = 0;
 8027326:	4b04      	ldr	r3, [pc, #16]	@ (8027338 <QM_BSW_OS_TASK+0x54>)
 8027328:	2200      	movs	r2, #0
 802732a:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* Do nothing.  */
		}
		vTaskSuspend(NULL);
 802732c:	2000      	movs	r0, #0
 802732e:	f00e fd15 	bl	8035d5c <vTaskSuspend>
		if(1 == Alarm5ms_QM_BSW)
 8027332:	e7db      	b.n	80272ec <QM_BSW_OS_TASK+0x8>
 8027334:	10000c82 	.word	0x10000c82
 8027338:	10000c85 	.word	0x10000c85
 802733c:	10000c4c 	.word	0x10000c4c

08027340 <OS_CPULOAD_MONITORING_TASK>:
}

/* USER CODE BEGIN Header_OS_CPULOAD_MONITORING_TASK */
/* USER CODE END Header_OS_CPULOAD_MONITORING_TASK */
void OS_CPULOAD_MONITORING_TASK(void *argument)
{
 8027340:	b580      	push	{r7, lr}
 8027342:	b082      	sub	sp, #8
 8027344:	af00      	add	r7, sp, #0
 8027346:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_CPULOAD_MONITORING_TASK */
	for(;;)
	{
		localTaskCounter++;
 8027348:	4b40      	ldr	r3, [pc, #256]	@ (802744c <OS_CPULOAD_MONITORING_TASK+0x10c>)
 802734a:	681b      	ldr	r3, [r3, #0]
 802734c:	3301      	adds	r3, #1
 802734e:	4a3f      	ldr	r2, [pc, #252]	@ (802744c <OS_CPULOAD_MONITORING_TASK+0x10c>)
 8027350:	6013      	str	r3, [r2, #0]
		OS_DeltaIdleRunTime = xTaskStatusArray[OS_IdleIndex].ulRunTimeCounter - OS_IdleRunTime;
 8027352:	4b3f      	ldr	r3, [pc, #252]	@ (8027450 <OS_CPULOAD_MONITORING_TASK+0x110>)
 8027354:	781b      	ldrb	r3, [r3, #0]
 8027356:	4619      	mov	r1, r3
 8027358:	4a3e      	ldr	r2, [pc, #248]	@ (8027454 <OS_CPULOAD_MONITORING_TASK+0x114>)
 802735a:	460b      	mov	r3, r1
 802735c:	00db      	lsls	r3, r3, #3
 802735e:	440b      	add	r3, r1
 8027360:	009b      	lsls	r3, r3, #2
 8027362:	4413      	add	r3, r2
 8027364:	3318      	adds	r3, #24
 8027366:	681b      	ldr	r3, [r3, #0]
 8027368:	ee07 3a90 	vmov	s15, r3
 802736c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8027370:	4b39      	ldr	r3, [pc, #228]	@ (8027458 <OS_CPULOAD_MONITORING_TASK+0x118>)
 8027372:	edd3 7a00 	vldr	s15, [r3]
 8027376:	ee77 7a67 	vsub.f32	s15, s14, s15
 802737a:	4b38      	ldr	r3, [pc, #224]	@ (802745c <OS_CPULOAD_MONITORING_TASK+0x11c>)
 802737c:	edc3 7a00 	vstr	s15, [r3]
		if(0 != ulHighFrequencyTimerTicks) OS_CpuLoad = 100 - (OS_DeltaIdleRunTime / ulHighFrequencyTimerTicks) * 100;
 8027380:	4b37      	ldr	r3, [pc, #220]	@ (8027460 <OS_CPULOAD_MONITORING_TASK+0x120>)
 8027382:	681b      	ldr	r3, [r3, #0]
 8027384:	2b00      	cmp	r3, #0
 8027386:	d015      	beq.n	80273b4 <OS_CPULOAD_MONITORING_TASK+0x74>
 8027388:	4b34      	ldr	r3, [pc, #208]	@ (802745c <OS_CPULOAD_MONITORING_TASK+0x11c>)
 802738a:	edd3 6a00 	vldr	s13, [r3]
 802738e:	4b34      	ldr	r3, [pc, #208]	@ (8027460 <OS_CPULOAD_MONITORING_TASK+0x120>)
 8027390:	681b      	ldr	r3, [r3, #0]
 8027392:	ee07 3a90 	vmov	s15, r3
 8027396:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 802739a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802739e:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8027464 <OS_CPULOAD_MONITORING_TASK+0x124>
 80273a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80273a6:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8027464 <OS_CPULOAD_MONITORING_TASK+0x124>
 80273aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80273ae:	4b2e      	ldr	r3, [pc, #184]	@ (8027468 <OS_CPULOAD_MONITORING_TASK+0x128>)
 80273b0:	edc3 7a00 	vstr	s15, [r3]
		else
		{
			/* Do nothing. */
		}
		if(0 < OS_CpuLoad) OS_AverageCpuLoad += OS_CpuLoad;
 80273b4:	4b2c      	ldr	r3, [pc, #176]	@ (8027468 <OS_CPULOAD_MONITORING_TASK+0x128>)
 80273b6:	edd3 7a00 	vldr	s15, [r3]
 80273ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80273be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80273c2:	dd10      	ble.n	80273e6 <OS_CPULOAD_MONITORING_TASK+0xa6>
 80273c4:	4b29      	ldr	r3, [pc, #164]	@ (802746c <OS_CPULOAD_MONITORING_TASK+0x12c>)
 80273c6:	681b      	ldr	r3, [r3, #0]
 80273c8:	ee07 3a90 	vmov	s15, r3
 80273cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80273d0:	4b25      	ldr	r3, [pc, #148]	@ (8027468 <OS_CPULOAD_MONITORING_TASK+0x128>)
 80273d2:	edd3 7a00 	vldr	s15, [r3]
 80273d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80273da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80273de:	ee17 2a90 	vmov	r2, s15
 80273e2:	4b22      	ldr	r3, [pc, #136]	@ (802746c <OS_CPULOAD_MONITORING_TASK+0x12c>)
 80273e4:	601a      	str	r2, [r3, #0]
		else
		{
			/* Do nothing. */
		}
		ulHighFrequencyTimerTicks = 0;
 80273e6:	4b1e      	ldr	r3, [pc, #120]	@ (8027460 <OS_CPULOAD_MONITORING_TASK+0x120>)
 80273e8:	2200      	movs	r2, #0
 80273ea:	601a      	str	r2, [r3, #0]
		OS_IdleRunTime = xTaskStatusArray[OS_IdleIndex].ulRunTimeCounter;
 80273ec:	4b18      	ldr	r3, [pc, #96]	@ (8027450 <OS_CPULOAD_MONITORING_TASK+0x110>)
 80273ee:	781b      	ldrb	r3, [r3, #0]
 80273f0:	4619      	mov	r1, r3
 80273f2:	4a18      	ldr	r2, [pc, #96]	@ (8027454 <OS_CPULOAD_MONITORING_TASK+0x114>)
 80273f4:	460b      	mov	r3, r1
 80273f6:	00db      	lsls	r3, r3, #3
 80273f8:	440b      	add	r3, r1
 80273fa:	009b      	lsls	r3, r3, #2
 80273fc:	4413      	add	r3, r2
 80273fe:	3318      	adds	r3, #24
 8027400:	681b      	ldr	r3, [r3, #0]
 8027402:	ee07 3a90 	vmov	s15, r3
 8027406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802740a:	4b13      	ldr	r3, [pc, #76]	@ (8027458 <OS_CPULOAD_MONITORING_TASK+0x118>)
 802740c:	edc3 7a00 	vstr	s15, [r3]
		if(localTaskCounter % 40 == 0)
 8027410:	4b0e      	ldr	r3, [pc, #56]	@ (802744c <OS_CPULOAD_MONITORING_TASK+0x10c>)
 8027412:	6819      	ldr	r1, [r3, #0]
 8027414:	4b16      	ldr	r3, [pc, #88]	@ (8027470 <OS_CPULOAD_MONITORING_TASK+0x130>)
 8027416:	fba3 2301 	umull	r2, r3, r3, r1
 802741a:	095a      	lsrs	r2, r3, #5
 802741c:	4613      	mov	r3, r2
 802741e:	009b      	lsls	r3, r3, #2
 8027420:	4413      	add	r3, r2
 8027422:	00db      	lsls	r3, r3, #3
 8027424:	1aca      	subs	r2, r1, r3
 8027426:	2a00      	cmp	r2, #0
 8027428:	d10b      	bne.n	8027442 <OS_CPULOAD_MONITORING_TASK+0x102>
		{
			OS_XCP_CpuLoad = OS_AverageCpuLoad / 40;
 802742a:	4b10      	ldr	r3, [pc, #64]	@ (802746c <OS_CPULOAD_MONITORING_TASK+0x12c>)
 802742c:	681b      	ldr	r3, [r3, #0]
 802742e:	4a10      	ldr	r2, [pc, #64]	@ (8027470 <OS_CPULOAD_MONITORING_TASK+0x130>)
 8027430:	fba2 2303 	umull	r2, r3, r2, r3
 8027434:	095b      	lsrs	r3, r3, #5
 8027436:	b2da      	uxtb	r2, r3
 8027438:	4b0e      	ldr	r3, [pc, #56]	@ (8027474 <OS_CPULOAD_MONITORING_TASK+0x134>)
 802743a:	701a      	strb	r2, [r3, #0]
			OS_AverageCpuLoad = 0;
 802743c:	4b0b      	ldr	r3, [pc, #44]	@ (802746c <OS_CPULOAD_MONITORING_TASK+0x12c>)
 802743e:	2200      	movs	r2, #0
 8027440:	601a      	str	r2, [r3, #0]
		}
		else
		{
			/* Do nothing. */
		}
		vTaskSuspend(NULL);
 8027442:	2000      	movs	r0, #0
 8027444:	f00e fc8a 	bl	8035d5c <vTaskSuspend>
		localTaskCounter++;
 8027448:	e77e      	b.n	8027348 <OS_CPULOAD_MONITORING_TASK+0x8>
 802744a:	bf00      	nop
 802744c:	200004a8 	.word	0x200004a8
 8027450:	20000490 	.word	0x20000490
 8027454:	200002d8 	.word	0x200002d8
 8027458:	20000494 	.word	0x20000494
 802745c:	20000498 	.word	0x20000498
 8027460:	200004ac 	.word	0x200004ac
 8027464:	42c80000 	.word	0x42c80000
 8027468:	2000049c 	.word	0x2000049c
 802746c:	200004a0 	.word	0x200004a0
 8027470:	cccccccd 	.word	0xcccccccd
 8027474:	200004a4 	.word	0x200004a4

08027478 <NVM_HANDLING_OS_TASK>:
}

/* USER CODE BEGIN Header_NVM_HANDLING_OS_TASK */
/* USER CODE END Header_NVM_HANDLING_OS_TASK */
void NVM_HANDLING_OS_TASK(void *argument)
{
 8027478:	b580      	push	{r7, lr}
 802747a:	b082      	sub	sp, #8
 802747c:	af00      	add	r7, sp, #0
 802747e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NVM_HANDLING_OS_TASK */
	for(;;)
	{
		if(1 == Alarm5ms_QM_NVM)
 8027480:	4b06      	ldr	r3, [pc, #24]	@ (802749c <NVM_HANDLING_OS_TASK+0x24>)
 8027482:	781b      	ldrb	r3, [r3, #0]
 8027484:	2b01      	cmp	r3, #1
 8027486:	d104      	bne.n	8027492 <NVM_HANDLING_OS_TASK+0x1a>
		{
			Nvm_MainFunction();
 8027488:	f7fe f9c8 	bl	802581c <Nvm_MainFunction>
			Alarm5ms_QM_NVM = 0;
 802748c:	4b03      	ldr	r3, [pc, #12]	@ (802749c <NVM_HANDLING_OS_TASK+0x24>)
 802748e:	2200      	movs	r2, #0
 8027490:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* Do nothing.  */
		}
		vTaskSuspend(NULL);
 8027492:	2000      	movs	r0, #0
 8027494:	f00e fc62 	bl	8035d5c <vTaskSuspend>
		if(1 == Alarm5ms_QM_NVM)
 8027498:	e7f2      	b.n	8027480 <NVM_HANDLING_OS_TASK+0x8>
 802749a:	bf00      	nop
 802749c:	10000c80 	.word	0x10000c80

080274a0 <OS_TASK_QM_DCM>:
}

/* USER CODE BEGIN Header_OS_TASK_QM_DCM */
/* USER CODE END Header_OS_TASK_QM_DCM */
void OS_TASK_QM_DCM(void *argument)
{
 80274a0:	b580      	push	{r7, lr}
 80274a2:	b082      	sub	sp, #8
 80274a4:	af00      	add	r7, sp, #0
 80274a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_QM_DCM */
	for(;;)
	{
		if(1 == Alarm5ms_QM_DCM)
 80274a8:	4b08      	ldr	r3, [pc, #32]	@ (80274cc <OS_TASK_QM_DCM+0x2c>)
 80274aa:	781b      	ldrb	r3, [r3, #0]
 80274ac:	2b01      	cmp	r3, #1
 80274ae:	d108      	bne.n	80274c2 <OS_TASK_QM_DCM+0x22>
		{
			if(1 == EcuM_State) Dcm_MainFunction();
 80274b0:	4b07      	ldr	r3, [pc, #28]	@ (80274d0 <OS_TASK_QM_DCM+0x30>)
 80274b2:	781b      	ldrb	r3, [r3, #0]
 80274b4:	2b01      	cmp	r3, #1
 80274b6:	d101      	bne.n	80274bc <OS_TASK_QM_DCM+0x1c>
 80274b8:	f7fc fd9e 	bl	8023ff8 <Dcm_MainFunction>
			else
			{
				/* Do nothing. */
			}
			Alarm5ms_QM_DCM = 0;
 80274bc:	4b03      	ldr	r3, [pc, #12]	@ (80274cc <OS_TASK_QM_DCM+0x2c>)
 80274be:	2200      	movs	r2, #0
 80274c0:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* Do nothing. */
		}
		vTaskSuspend(NULL);
 80274c2:	2000      	movs	r0, #0
 80274c4:	f00e fc4a 	bl	8035d5c <vTaskSuspend>
		if(1 == Alarm5ms_QM_DCM)
 80274c8:	e7ee      	b.n	80274a8 <OS_TASK_QM_DCM+0x8>
 80274ca:	bf00      	nop
 80274cc:	10000c83 	.word	0x10000c83
 80274d0:	10000c4c 	.word	0x10000c4c

080274d4 <Alarm5ms_QM_APPL_Callback>:
  /* USER CODE END OS_TASK_QM_DCM */
}

/* Alarm5ms_QM_APPL_Callback function */
void Alarm5ms_QM_APPL_Callback(void *argument)
{
 80274d4:	b580      	push	{r7, lr}
 80274d6:	b082      	sub	sp, #8
 80274d8:	af00      	add	r7, sp, #0
 80274da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Alarm5ms_QM_APPL_Callback */
	vTaskResume(QM_APPLHandle);
 80274dc:	4b05      	ldr	r3, [pc, #20]	@ (80274f4 <Alarm5ms_QM_APPL_Callback+0x20>)
 80274de:	681b      	ldr	r3, [r3, #0]
 80274e0:	4618      	mov	r0, r3
 80274e2:	f00e fce3 	bl	8035eac <vTaskResume>
	Alarm5ms_QM_APPL = 1;
 80274e6:	4b04      	ldr	r3, [pc, #16]	@ (80274f8 <Alarm5ms_QM_APPL_Callback+0x24>)
 80274e8:	2201      	movs	r2, #1
 80274ea:	701a      	strb	r2, [r3, #0]
  /* USER CODE END Alarm5ms_QM_APPL_Callback */
}
 80274ec:	bf00      	nop
 80274ee:	3708      	adds	r7, #8
 80274f0:	46bd      	mov	sp, r7
 80274f2:	bd80      	pop	{r7, pc}
 80274f4:	200004b0 	.word	0x200004b0
 80274f8:	10000c81 	.word	0x10000c81

080274fc <Alarm5ms_QM_BSW_Callback>:

/* Alarm5ms_QM_BSW_Callback function */
void Alarm5ms_QM_BSW_Callback(void *argument)
{
 80274fc:	b580      	push	{r7, lr}
 80274fe:	b082      	sub	sp, #8
 8027500:	af00      	add	r7, sp, #0
 8027502:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Alarm5ms_QM_BSW_Callback */
	Alarm5ms_QM_BSW = 1;
 8027504:	4b0d      	ldr	r3, [pc, #52]	@ (802753c <Alarm5ms_QM_BSW_Callback+0x40>)
 8027506:	2201      	movs	r2, #1
 8027508:	701a      	strb	r2, [r3, #0]
	Alarm5ms_QM_DCM = 1;
 802750a:	4b0d      	ldr	r3, [pc, #52]	@ (8027540 <Alarm5ms_QM_BSW_Callback+0x44>)
 802750c:	2201      	movs	r2, #1
 802750e:	701a      	strb	r2, [r3, #0]
	Alarm5ms_QM_NVM = 1;
 8027510:	4b0c      	ldr	r3, [pc, #48]	@ (8027544 <Alarm5ms_QM_BSW_Callback+0x48>)
 8027512:	2201      	movs	r2, #1
 8027514:	701a      	strb	r2, [r3, #0]
	vTaskResume(QM_BSWHandle);
 8027516:	4b0c      	ldr	r3, [pc, #48]	@ (8027548 <Alarm5ms_QM_BSW_Callback+0x4c>)
 8027518:	681b      	ldr	r3, [r3, #0]
 802751a:	4618      	mov	r0, r3
 802751c:	f00e fcc6 	bl	8035eac <vTaskResume>
	vTaskResume(QM_DCMHandle);
 8027520:	4b0a      	ldr	r3, [pc, #40]	@ (802754c <Alarm5ms_QM_BSW_Callback+0x50>)
 8027522:	681b      	ldr	r3, [r3, #0]
 8027524:	4618      	mov	r0, r3
 8027526:	f00e fcc1 	bl	8035eac <vTaskResume>
	vTaskResume(NVM_HANDLINGHandle);
 802752a:	4b09      	ldr	r3, [pc, #36]	@ (8027550 <Alarm5ms_QM_BSW_Callback+0x54>)
 802752c:	681b      	ldr	r3, [r3, #0]
 802752e:	4618      	mov	r0, r3
 8027530:	f00e fcbc 	bl	8035eac <vTaskResume>
  /* USER CODE END Alarm5ms_QM_BSW_Callback */
}
 8027534:	bf00      	nop
 8027536:	3708      	adds	r7, #8
 8027538:	46bd      	mov	sp, r7
 802753a:	bd80      	pop	{r7, pc}
 802753c:	10000c82 	.word	0x10000c82
 8027540:	10000c83 	.word	0x10000c83
 8027544:	10000c80 	.word	0x10000c80
 8027548:	200004b4 	.word	0x200004b4
 802754c:	200004c0 	.word	0x200004c0
 8027550:	200004bc 	.word	0x200004bc

08027554 <Alarm10ms_QM_APPL_Callback>:

/* Alarm10ms_QM_APPL_Callback function */
void Alarm10ms_QM_APPL_Callback(void *argument)
{
 8027554:	b580      	push	{r7, lr}
 8027556:	b082      	sub	sp, #8
 8027558:	af00      	add	r7, sp, #0
 802755a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Alarm10ms_QM_APPL_Callback */
	Alarm10ms_QM_APPL = 1;
 802755c:	4b05      	ldr	r3, [pc, #20]	@ (8027574 <Alarm10ms_QM_APPL_Callback+0x20>)
 802755e:	2201      	movs	r2, #1
 8027560:	701a      	strb	r2, [r3, #0]
	vTaskResume(QM_APPLHandle);
 8027562:	4b05      	ldr	r3, [pc, #20]	@ (8027578 <Alarm10ms_QM_APPL_Callback+0x24>)
 8027564:	681b      	ldr	r3, [r3, #0]
 8027566:	4618      	mov	r0, r3
 8027568:	f00e fca0 	bl	8035eac <vTaskResume>
  /* USER CODE END Alarm10ms_QM_APPL_Callback */
}
 802756c:	bf00      	nop
 802756e:	3708      	adds	r7, #8
 8027570:	46bd      	mov	sp, r7
 8027572:	bd80      	pop	{r7, pc}
 8027574:	10000c84 	.word	0x10000c84
 8027578:	200004b0 	.word	0x200004b0

0802757c <Alarm10ms_QM_BSW_Callback>:

/* Alarm10ms_QM_BSW_Callback function */
void Alarm10ms_QM_BSW_Callback(void *argument)
{
 802757c:	b580      	push	{r7, lr}
 802757e:	b082      	sub	sp, #8
 8027580:	af00      	add	r7, sp, #0
 8027582:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Alarm10ms_QM_BSW_Callback */
	static uint32 localCounter = 0;
	Alarm10ms_QM_BSW = 1;
 8027584:	4b0f      	ldr	r3, [pc, #60]	@ (80275c4 <Alarm10ms_QM_BSW_Callback+0x48>)
 8027586:	2201      	movs	r2, #1
 8027588:	701a      	strb	r2, [r3, #0]
	localCounter++;
 802758a:	4b0f      	ldr	r3, [pc, #60]	@ (80275c8 <Alarm10ms_QM_BSW_Callback+0x4c>)
 802758c:	681b      	ldr	r3, [r3, #0]
 802758e:	3301      	adds	r3, #1
 8027590:	4a0d      	ldr	r2, [pc, #52]	@ (80275c8 <Alarm10ms_QM_BSW_Callback+0x4c>)
 8027592:	6013      	str	r3, [r2, #0]
	if(localCounter != 0 && localCounter % 4 == 0) vTaskResume(OS_CPULOAD_MONITORINGHandle);
 8027594:	4b0c      	ldr	r3, [pc, #48]	@ (80275c8 <Alarm10ms_QM_BSW_Callback+0x4c>)
 8027596:	681b      	ldr	r3, [r3, #0]
 8027598:	2b00      	cmp	r3, #0
 802759a:	d00a      	beq.n	80275b2 <Alarm10ms_QM_BSW_Callback+0x36>
 802759c:	4b0a      	ldr	r3, [pc, #40]	@ (80275c8 <Alarm10ms_QM_BSW_Callback+0x4c>)
 802759e:	681b      	ldr	r3, [r3, #0]
 80275a0:	f003 0303 	and.w	r3, r3, #3
 80275a4:	2b00      	cmp	r3, #0
 80275a6:	d104      	bne.n	80275b2 <Alarm10ms_QM_BSW_Callback+0x36>
 80275a8:	4b08      	ldr	r3, [pc, #32]	@ (80275cc <Alarm10ms_QM_BSW_Callback+0x50>)
 80275aa:	681b      	ldr	r3, [r3, #0]
 80275ac:	4618      	mov	r0, r3
 80275ae:	f00e fc7d 	bl	8035eac <vTaskResume>
	else
	{
		/* Do nothing. */
	}
	vTaskResume(QM_BSWHandle);
 80275b2:	4b07      	ldr	r3, [pc, #28]	@ (80275d0 <Alarm10ms_QM_BSW_Callback+0x54>)
 80275b4:	681b      	ldr	r3, [r3, #0]
 80275b6:	4618      	mov	r0, r3
 80275b8:	f00e fc78 	bl	8035eac <vTaskResume>
  /* USER CODE END Alarm10ms_QM_BSW_Callback */
}
 80275bc:	bf00      	nop
 80275be:	3708      	adds	r7, #8
 80275c0:	46bd      	mov	sp, r7
 80275c2:	bd80      	pop	{r7, pc}
 80275c4:	10000c85 	.word	0x10000c85
 80275c8:	200004d4 	.word	0x200004d4
 80275cc:	200004b8 	.word	0x200004b8
 80275d0:	200004b4 	.word	0x200004b4

080275d4 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80275d4:	b580      	push	{r7, lr}
 80275d6:	b088      	sub	sp, #32
 80275d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */
  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80275da:	1d3b      	adds	r3, r7, #4
 80275dc:	2200      	movs	r2, #0
 80275de:	601a      	str	r2, [r3, #0]
 80275e0:	605a      	str	r2, [r3, #4]
 80275e2:	609a      	str	r2, [r3, #8]
 80275e4:	60da      	str	r2, [r3, #12]
 80275e6:	611a      	str	r2, [r3, #16]
 80275e8:	615a      	str	r2, [r3, #20]
 80275ea:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN FSMC_Init 1 */
  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80275ec:	4b27      	ldr	r3, [pc, #156]	@ (802768c <MX_FSMC_Init+0xb8>)
 80275ee:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 80275f2:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80275f4:	4b25      	ldr	r3, [pc, #148]	@ (802768c <MX_FSMC_Init+0xb8>)
 80275f6:	4a26      	ldr	r2, [pc, #152]	@ (8027690 <MX_FSMC_Init+0xbc>)
 80275f8:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80275fa:	4b24      	ldr	r3, [pc, #144]	@ (802768c <MX_FSMC_Init+0xb8>)
 80275fc:	2200      	movs	r2, #0
 80275fe:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8027600:	4b22      	ldr	r3, [pc, #136]	@ (802768c <MX_FSMC_Init+0xb8>)
 8027602:	2200      	movs	r2, #0
 8027604:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8027606:	4b21      	ldr	r3, [pc, #132]	@ (802768c <MX_FSMC_Init+0xb8>)
 8027608:	2200      	movs	r2, #0
 802760a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 802760c:	4b1f      	ldr	r3, [pc, #124]	@ (802768c <MX_FSMC_Init+0xb8>)
 802760e:	2210      	movs	r2, #16
 8027610:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8027612:	4b1e      	ldr	r3, [pc, #120]	@ (802768c <MX_FSMC_Init+0xb8>)
 8027614:	2200      	movs	r2, #0
 8027616:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8027618:	4b1c      	ldr	r3, [pc, #112]	@ (802768c <MX_FSMC_Init+0xb8>)
 802761a:	2200      	movs	r2, #0
 802761c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 802761e:	4b1b      	ldr	r3, [pc, #108]	@ (802768c <MX_FSMC_Init+0xb8>)
 8027620:	2200      	movs	r2, #0
 8027622:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8027624:	4b19      	ldr	r3, [pc, #100]	@ (802768c <MX_FSMC_Init+0xb8>)
 8027626:	2200      	movs	r2, #0
 8027628:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 802762a:	4b18      	ldr	r3, [pc, #96]	@ (802768c <MX_FSMC_Init+0xb8>)
 802762c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8027630:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8027632:	4b16      	ldr	r3, [pc, #88]	@ (802768c <MX_FSMC_Init+0xb8>)
 8027634:	2200      	movs	r2, #0
 8027636:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8027638:	4b14      	ldr	r3, [pc, #80]	@ (802768c <MX_FSMC_Init+0xb8>)
 802763a:	2200      	movs	r2, #0
 802763c:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 802763e:	4b13      	ldr	r3, [pc, #76]	@ (802768c <MX_FSMC_Init+0xb8>)
 8027640:	2200      	movs	r2, #0
 8027642:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8027644:	4b11      	ldr	r3, [pc, #68]	@ (802768c <MX_FSMC_Init+0xb8>)
 8027646:	2200      	movs	r2, #0
 8027648:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 802764a:	4b10      	ldr	r3, [pc, #64]	@ (802768c <MX_FSMC_Init+0xb8>)
 802764c:	2200      	movs	r2, #0
 802764e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 1;
 8027650:	2301      	movs	r3, #1
 8027652:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8027654:	230f      	movs	r3, #15
 8027656:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 5;
 8027658:	2305      	movs	r3, #5
 802765a:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 802765c:	2300      	movs	r3, #0
 802765e:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8027660:	2310      	movs	r3, #16
 8027662:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8027664:	2311      	movs	r3, #17
 8027666:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8027668:	2300      	movs	r3, #0
 802766a:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 802766c:	1d3b      	adds	r3, r7, #4
 802766e:	2200      	movs	r2, #0
 8027670:	4619      	mov	r1, r3
 8027672:	4806      	ldr	r0, [pc, #24]	@ (802768c <MX_FSMC_Init+0xb8>)
 8027674:	f00b f838 	bl	80326e8 <HAL_SRAM_Init>
 8027678:	4603      	mov	r3, r0
 802767a:	2b00      	cmp	r3, #0
 802767c:	d001      	beq.n	8027682 <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 802767e:	f000 fb33 	bl	8027ce8 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */
  /* USER CODE END FSMC_Init 2 */
}
 8027682:	bf00      	nop
 8027684:	3720      	adds	r7, #32
 8027686:	46bd      	mov	sp, r7
 8027688:	bd80      	pop	{r7, pc}
 802768a:	bf00      	nop
 802768c:	200004d8 	.word	0x200004d8
 8027690:	a0000104 	.word	0xa0000104

08027694 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8027694:	b580      	push	{r7, lr}
 8027696:	b086      	sub	sp, #24
 8027698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */
  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802769a:	1d3b      	adds	r3, r7, #4
 802769c:	2200      	movs	r2, #0
 802769e:	601a      	str	r2, [r3, #0]
 80276a0:	605a      	str	r2, [r3, #4]
 80276a2:	609a      	str	r2, [r3, #8]
 80276a4:	60da      	str	r2, [r3, #12]
 80276a6:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80276a8:	4b24      	ldr	r3, [pc, #144]	@ (802773c <HAL_FSMC_MspInit+0xa8>)
 80276aa:	681b      	ldr	r3, [r3, #0]
 80276ac:	2b00      	cmp	r3, #0
 80276ae:	d140      	bne.n	8027732 <HAL_FSMC_MspInit+0x9e>
    return;
  }
  FSMC_Initialized = 1;
 80276b0:	4b22      	ldr	r3, [pc, #136]	@ (802773c <HAL_FSMC_MspInit+0xa8>)
 80276b2:	2201      	movs	r2, #1
 80276b4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80276b6:	2300      	movs	r3, #0
 80276b8:	603b      	str	r3, [r7, #0]
 80276ba:	4b21      	ldr	r3, [pc, #132]	@ (8027740 <HAL_FSMC_MspInit+0xac>)
 80276bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80276be:	4a20      	ldr	r2, [pc, #128]	@ (8027740 <HAL_FSMC_MspInit+0xac>)
 80276c0:	f043 0301 	orr.w	r3, r3, #1
 80276c4:	6393      	str	r3, [r2, #56]	@ 0x38
 80276c6:	4b1e      	ldr	r3, [pc, #120]	@ (8027740 <HAL_FSMC_MspInit+0xac>)
 80276c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80276ca:	f003 0301 	and.w	r3, r3, #1
 80276ce:	603b      	str	r3, [r7, #0]
 80276d0:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80276d2:	f64f 7380 	movw	r3, #65408	@ 0xff80
 80276d6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80276d8:	2302      	movs	r3, #2
 80276da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80276dc:	2300      	movs	r3, #0
 80276de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80276e0:	2303      	movs	r3, #3
 80276e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80276e4:	230c      	movs	r3, #12
 80276e6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80276e8:	1d3b      	adds	r3, r7, #4
 80276ea:	4619      	mov	r1, r3
 80276ec:	4815      	ldr	r0, [pc, #84]	@ (8027744 <HAL_FSMC_MspInit+0xb0>)
 80276ee:	f006 fa25 	bl	802db3c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 80276f2:	f24e 7303 	movw	r3, #59139	@ 0xe703
 80276f6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80276f8:	2302      	movs	r3, #2
 80276fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80276fc:	2300      	movs	r3, #0
 80276fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8027700:	2303      	movs	r3, #3
 8027702:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8027704:	230c      	movs	r3, #12
 8027706:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8027708:	1d3b      	adds	r3, r7, #4
 802770a:	4619      	mov	r1, r3
 802770c:	480e      	ldr	r0, [pc, #56]	@ (8027748 <HAL_FSMC_MspInit+0xb4>)
 802770e:	f006 fa15 	bl	802db3c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8027712:	23b0      	movs	r3, #176	@ 0xb0
 8027714:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8027716:	2302      	movs	r3, #2
 8027718:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 802771a:	2301      	movs	r3, #1
 802771c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802771e:	2303      	movs	r3, #3
 8027720:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8027722:	230c      	movs	r3, #12
 8027724:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8027726:	1d3b      	adds	r3, r7, #4
 8027728:	4619      	mov	r1, r3
 802772a:	4807      	ldr	r0, [pc, #28]	@ (8027748 <HAL_FSMC_MspInit+0xb4>)
 802772c:	f006 fa06 	bl	802db3c <HAL_GPIO_Init>
 8027730:	e000      	b.n	8027734 <HAL_FSMC_MspInit+0xa0>
    return;
 8027732:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */
  /* USER CODE END FSMC_MspInit 1 */
}
 8027734:	3718      	adds	r7, #24
 8027736:	46bd      	mov	sp, r7
 8027738:	bd80      	pop	{r7, pc}
 802773a:	bf00      	nop
 802773c:	20000538 	.word	0x20000538
 8027740:	40023800 	.word	0x40023800
 8027744:	40021000 	.word	0x40021000
 8027748:	40020c00 	.word	0x40020c00

0802774c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 802774c:	b580      	push	{r7, lr}
 802774e:	b082      	sub	sp, #8
 8027750:	af00      	add	r7, sp, #0
 8027752:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */
  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8027754:	f7ff ff9e 	bl	8027694 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */
  /* USER CODE END SRAM_MspInit 1 */
}
 8027758:	bf00      	nop
 802775a:	3708      	adds	r7, #8
 802775c:	46bd      	mov	sp, r7
 802775e:	bd80      	pop	{r7, pc}

08027760 <MX_GPIO_Init>:
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
     PA8   ------> RCC_MCO_1
*/
void MX_GPIO_Init(void)
{
 8027760:	b580      	push	{r7, lr}
 8027762:	b08c      	sub	sp, #48	@ 0x30
 8027764:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8027766:	f107 031c 	add.w	r3, r7, #28
 802776a:	2200      	movs	r2, #0
 802776c:	601a      	str	r2, [r3, #0]
 802776e:	605a      	str	r2, [r3, #4]
 8027770:	609a      	str	r2, [r3, #8]
 8027772:	60da      	str	r2, [r3, #12]
 8027774:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8027776:	2300      	movs	r3, #0
 8027778:	61bb      	str	r3, [r7, #24]
 802777a:	4b70      	ldr	r3, [pc, #448]	@ (802793c <MX_GPIO_Init+0x1dc>)
 802777c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802777e:	4a6f      	ldr	r2, [pc, #444]	@ (802793c <MX_GPIO_Init+0x1dc>)
 8027780:	f043 0310 	orr.w	r3, r3, #16
 8027784:	6313      	str	r3, [r2, #48]	@ 0x30
 8027786:	4b6d      	ldr	r3, [pc, #436]	@ (802793c <MX_GPIO_Init+0x1dc>)
 8027788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802778a:	f003 0310 	and.w	r3, r3, #16
 802778e:	61bb      	str	r3, [r7, #24]
 8027790:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8027792:	2300      	movs	r3, #0
 8027794:	617b      	str	r3, [r7, #20]
 8027796:	4b69      	ldr	r3, [pc, #420]	@ (802793c <MX_GPIO_Init+0x1dc>)
 8027798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802779a:	4a68      	ldr	r2, [pc, #416]	@ (802793c <MX_GPIO_Init+0x1dc>)
 802779c:	f043 0304 	orr.w	r3, r3, #4
 80277a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80277a2:	4b66      	ldr	r3, [pc, #408]	@ (802793c <MX_GPIO_Init+0x1dc>)
 80277a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80277a6:	f003 0304 	and.w	r3, r3, #4
 80277aa:	617b      	str	r3, [r7, #20]
 80277ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80277ae:	2300      	movs	r3, #0
 80277b0:	613b      	str	r3, [r7, #16]
 80277b2:	4b62      	ldr	r3, [pc, #392]	@ (802793c <MX_GPIO_Init+0x1dc>)
 80277b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80277b6:	4a61      	ldr	r2, [pc, #388]	@ (802793c <MX_GPIO_Init+0x1dc>)
 80277b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80277bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80277be:	4b5f      	ldr	r3, [pc, #380]	@ (802793c <MX_GPIO_Init+0x1dc>)
 80277c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80277c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80277c6:	613b      	str	r3, [r7, #16]
 80277c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80277ca:	2300      	movs	r3, #0
 80277cc:	60fb      	str	r3, [r7, #12]
 80277ce:	4b5b      	ldr	r3, [pc, #364]	@ (802793c <MX_GPIO_Init+0x1dc>)
 80277d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80277d2:	4a5a      	ldr	r2, [pc, #360]	@ (802793c <MX_GPIO_Init+0x1dc>)
 80277d4:	f043 0301 	orr.w	r3, r3, #1
 80277d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80277da:	4b58      	ldr	r3, [pc, #352]	@ (802793c <MX_GPIO_Init+0x1dc>)
 80277dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80277de:	f003 0301 	and.w	r3, r3, #1
 80277e2:	60fb      	str	r3, [r7, #12]
 80277e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80277e6:	2300      	movs	r3, #0
 80277e8:	60bb      	str	r3, [r7, #8]
 80277ea:	4b54      	ldr	r3, [pc, #336]	@ (802793c <MX_GPIO_Init+0x1dc>)
 80277ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80277ee:	4a53      	ldr	r2, [pc, #332]	@ (802793c <MX_GPIO_Init+0x1dc>)
 80277f0:	f043 0302 	orr.w	r3, r3, #2
 80277f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80277f6:	4b51      	ldr	r3, [pc, #324]	@ (802793c <MX_GPIO_Init+0x1dc>)
 80277f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80277fa:	f003 0302 	and.w	r3, r3, #2
 80277fe:	60bb      	str	r3, [r7, #8]
 8027800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8027802:	2300      	movs	r3, #0
 8027804:	607b      	str	r3, [r7, #4]
 8027806:	4b4d      	ldr	r3, [pc, #308]	@ (802793c <MX_GPIO_Init+0x1dc>)
 8027808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802780a:	4a4c      	ldr	r2, [pc, #304]	@ (802793c <MX_GPIO_Init+0x1dc>)
 802780c:	f043 0308 	orr.w	r3, r3, #8
 8027810:	6313      	str	r3, [r2, #48]	@ 0x30
 8027812:	4b4a      	ldr	r3, [pc, #296]	@ (802793c <MX_GPIO_Init+0x1dc>)
 8027814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8027816:	f003 0308 	and.w	r3, r3, #8
 802781a:	607b      	str	r3, [r7, #4]
 802781c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZOUT_GPIO_Port, BUZOUT_Pin, GPIO_PIN_RESET);
 802781e:	2200      	movs	r2, #0
 8027820:	2101      	movs	r1, #1
 8027822:	4847      	ldr	r0, [pc, #284]	@ (8027940 <MX_GPIO_Init+0x1e0>)
 8027824:	f006 fd90 	bl	802e348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIGITALCLUSTER_BACKLIGHT_GPIO_Port, DIGITALCLUSTER_BACKLIGHT_Pin, GPIO_PIN_RESET);
 8027828:	2200      	movs	r2, #0
 802782a:	2102      	movs	r1, #2
 802782c:	4845      	ldr	r0, [pc, #276]	@ (8027944 <MX_GPIO_Init+0x1e4>)
 802782e:	f006 fd8b 	bl	802e348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, REVERSECAMERA_RESET_Pin|REVERSECAMERA_POWERDOWN_Pin, GPIO_PIN_RESET);
 8027832:	2200      	movs	r2, #0
 8027834:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8027838:	4843      	ldr	r0, [pc, #268]	@ (8027948 <MX_GPIO_Init+0x1e8>)
 802783a:	f006 fd85 	bl	802e348 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 802783e:	237f      	movs	r3, #127	@ 0x7f
 8027840:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8027842:	2303      	movs	r3, #3
 8027844:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8027846:	2300      	movs	r3, #0
 8027848:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 802784a:	f107 031c 	add.w	r3, r7, #28
 802784e:	4619      	mov	r1, r3
 8027850:	483e      	ldr	r0, [pc, #248]	@ (802794c <MX_GPIO_Init+0x1ec>)
 8027852:	f006 f973 	bl	802db3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC1
                           PC2 PC3 PC4 PC5
                           PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1
 8027856:	f24f 433e 	movw	r3, #62526	@ 0xf43e
 802785a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_10|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 802785c:	2303      	movs	r3, #3
 802785e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8027860:	2300      	movs	r3, #0
 8027862:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8027864:	f107 031c 	add.w	r3, r7, #28
 8027868:	4619      	mov	r1, r3
 802786a:	4835      	ldr	r0, [pc, #212]	@ (8027940 <MX_GPIO_Init+0x1e0>)
 802786c:	f006 f966 	bl	802db3c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZOUT_Pin */
  GPIO_InitStruct.Pin = BUZOUT_Pin;
 8027870:	2301      	movs	r3, #1
 8027872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8027874:	2301      	movs	r3, #1
 8027876:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8027878:	2302      	movs	r3, #2
 802787a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802787c:	2303      	movs	r3, #3
 802787e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BUZOUT_GPIO_Port, &GPIO_InitStruct);
 8027880:	f107 031c 	add.w	r3, r7, #28
 8027884:	4619      	mov	r1, r3
 8027886:	482e      	ldr	r0, [pc, #184]	@ (8027940 <MX_GPIO_Init+0x1e0>)
 8027888:	f006 f958 	bl	802db3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA5
                           PA7 PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
 802788c:	f248 63ae 	movw	r3, #34478	@ 0x86ae
 8027890:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8027892:	2303      	movs	r3, #3
 8027894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8027896:	2300      	movs	r3, #0
 8027898:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802789a:	f107 031c 	add.w	r3, r7, #28
 802789e:	4619      	mov	r1, r3
 80278a0:	482b      	ldr	r0, [pc, #172]	@ (8027950 <MX_GPIO_Init+0x1f0>)
 80278a2:	f006 f94b 	bl	802db3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB12 PB13
                           PB14 PB15 PB3 PB4
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 80278a6:	f24f 033d 	movw	r3, #61501	@ 0xf03d
 80278aa:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80278ac:	2303      	movs	r3, #3
 80278ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80278b0:	2300      	movs	r3, #0
 80278b2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80278b4:	f107 031c 	add.w	r3, r7, #28
 80278b8:	4619      	mov	r1, r3
 80278ba:	4822      	ldr	r0, [pc, #136]	@ (8027944 <MX_GPIO_Init+0x1e4>)
 80278bc:	f006 f93e 	bl	802db3c <HAL_GPIO_Init>

  /*Configure GPIO pin : DIGITALCLUSTER_BACKLIGHT_Pin */
  GPIO_InitStruct.Pin = DIGITALCLUSTER_BACKLIGHT_Pin;
 80278c0:	2302      	movs	r3, #2
 80278c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80278c4:	2301      	movs	r3, #1
 80278c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80278c8:	2300      	movs	r3, #0
 80278ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80278cc:	2303      	movs	r3, #3
 80278ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(DIGITALCLUSTER_BACKLIGHT_GPIO_Port, &GPIO_InitStruct);
 80278d0:	f107 031c 	add.w	r3, r7, #28
 80278d4:	4619      	mov	r1, r3
 80278d6:	481b      	ldr	r0, [pc, #108]	@ (8027944 <MX_GPIO_Init+0x1e4>)
 80278d8:	f006 f930 	bl	802db3c <HAL_GPIO_Init>

  /*Configure GPIO pins : REVERSECAMERA_RESET_Pin REVERSECAMERA_POWERDOWN_Pin */
  GPIO_InitStruct.Pin = REVERSECAMERA_RESET_Pin|REVERSECAMERA_POWERDOWN_Pin;
 80278dc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80278e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80278e2:	2301      	movs	r3, #1
 80278e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80278e6:	2300      	movs	r3, #0
 80278e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80278ea:	2300      	movs	r3, #0
 80278ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80278ee:	f107 031c 	add.w	r3, r7, #28
 80278f2:	4619      	mov	r1, r3
 80278f4:	4814      	ldr	r0, [pc, #80]	@ (8027948 <MX_GPIO_Init+0x1e8>)
 80278f6:	f006 f921 	bl	802db3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80278fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80278fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8027900:	2302      	movs	r3, #2
 8027902:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8027904:	2300      	movs	r3, #0
 8027906:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8027908:	2303      	movs	r3, #3
 802790a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 802790c:	2300      	movs	r3, #0
 802790e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8027910:	f107 031c 	add.w	r3, r7, #28
 8027914:	4619      	mov	r1, r3
 8027916:	480e      	ldr	r0, [pc, #56]	@ (8027950 <MX_GPIO_Init+0x1f0>)
 8027918:	f006 f910 	bl	802db3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD2 PD3 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6;
 802791c:	234c      	movs	r3, #76	@ 0x4c
 802791e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8027920:	2303      	movs	r3, #3
 8027922:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8027924:	2300      	movs	r3, #0
 8027926:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8027928:	f107 031c 	add.w	r3, r7, #28
 802792c:	4619      	mov	r1, r3
 802792e:	4806      	ldr	r0, [pc, #24]	@ (8027948 <MX_GPIO_Init+0x1e8>)
 8027930:	f006 f904 	bl	802db3c <HAL_GPIO_Init>

}
 8027934:	bf00      	nop
 8027936:	3730      	adds	r7, #48	@ 0x30
 8027938:	46bd      	mov	sp, r7
 802793a:	bd80      	pop	{r7, pc}
 802793c:	40023800 	.word	0x40023800
 8027940:	40020800 	.word	0x40020800
 8027944:	40020400 	.word	0x40020400
 8027948:	40020c00 	.word	0x40020c00
 802794c:	40021000 	.word	0x40021000
 8027950:	40020000 	.word	0x40020000

08027954 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8027954:	b580      	push	{r7, lr}
 8027956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_Init 0 */
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */
  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8027958:	4b12      	ldr	r3, [pc, #72]	@ (80279a4 <MX_I2C2_Init+0x50>)
 802795a:	4a13      	ldr	r2, [pc, #76]	@ (80279a8 <MX_I2C2_Init+0x54>)
 802795c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 802795e:	4b11      	ldr	r3, [pc, #68]	@ (80279a4 <MX_I2C2_Init+0x50>)
 8027960:	4a12      	ldr	r2, [pc, #72]	@ (80279ac <MX_I2C2_Init+0x58>)
 8027962:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8027964:	4b0f      	ldr	r3, [pc, #60]	@ (80279a4 <MX_I2C2_Init+0x50>)
 8027966:	2200      	movs	r2, #0
 8027968:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 802796a:	4b0e      	ldr	r3, [pc, #56]	@ (80279a4 <MX_I2C2_Init+0x50>)
 802796c:	2200      	movs	r2, #0
 802796e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8027970:	4b0c      	ldr	r3, [pc, #48]	@ (80279a4 <MX_I2C2_Init+0x50>)
 8027972:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8027976:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8027978:	4b0a      	ldr	r3, [pc, #40]	@ (80279a4 <MX_I2C2_Init+0x50>)
 802797a:	2200      	movs	r2, #0
 802797c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 802797e:	4b09      	ldr	r3, [pc, #36]	@ (80279a4 <MX_I2C2_Init+0x50>)
 8027980:	2200      	movs	r2, #0
 8027982:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8027984:	4b07      	ldr	r3, [pc, #28]	@ (80279a4 <MX_I2C2_Init+0x50>)
 8027986:	2200      	movs	r2, #0
 8027988:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 802798a:	4b06      	ldr	r3, [pc, #24]	@ (80279a4 <MX_I2C2_Init+0x50>)
 802798c:	2200      	movs	r2, #0
 802798e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8027990:	4804      	ldr	r0, [pc, #16]	@ (80279a4 <MX_I2C2_Init+0x50>)
 8027992:	f006 fd05 	bl	802e3a0 <HAL_I2C_Init>
 8027996:	4603      	mov	r3, r0
 8027998:	2b00      	cmp	r3, #0
 802799a:	d001      	beq.n	80279a0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 802799c:	f000 f9a4 	bl	8027ce8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */
  /* USER CODE END I2C2_Init 2 */

}
 80279a0:	bf00      	nop
 80279a2:	bd80      	pop	{r7, pc}
 80279a4:	2000053c 	.word	0x2000053c
 80279a8:	40005800 	.word	0x40005800
 80279ac:	00061a80 	.word	0x00061a80

080279b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80279b0:	b580      	push	{r7, lr}
 80279b2:	b08a      	sub	sp, #40	@ 0x28
 80279b4:	af00      	add	r7, sp, #0
 80279b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80279b8:	f107 0314 	add.w	r3, r7, #20
 80279bc:	2200      	movs	r2, #0
 80279be:	601a      	str	r2, [r3, #0]
 80279c0:	605a      	str	r2, [r3, #4]
 80279c2:	609a      	str	r2, [r3, #8]
 80279c4:	60da      	str	r2, [r3, #12]
 80279c6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 80279c8:	687b      	ldr	r3, [r7, #4]
 80279ca:	681b      	ldr	r3, [r3, #0]
 80279cc:	4a19      	ldr	r2, [pc, #100]	@ (8027a34 <HAL_I2C_MspInit+0x84>)
 80279ce:	4293      	cmp	r3, r2
 80279d0:	d12c      	bne.n	8027a2c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */
  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80279d2:	2300      	movs	r3, #0
 80279d4:	613b      	str	r3, [r7, #16]
 80279d6:	4b18      	ldr	r3, [pc, #96]	@ (8027a38 <HAL_I2C_MspInit+0x88>)
 80279d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80279da:	4a17      	ldr	r2, [pc, #92]	@ (8027a38 <HAL_I2C_MspInit+0x88>)
 80279dc:	f043 0302 	orr.w	r3, r3, #2
 80279e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80279e2:	4b15      	ldr	r3, [pc, #84]	@ (8027a38 <HAL_I2C_MspInit+0x88>)
 80279e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80279e6:	f003 0302 	and.w	r3, r3, #2
 80279ea:	613b      	str	r3, [r7, #16]
 80279ec:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80279ee:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80279f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80279f4:	2312      	movs	r3, #18
 80279f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80279f8:	2301      	movs	r3, #1
 80279fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80279fc:	2303      	movs	r3, #3
 80279fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8027a00:	2304      	movs	r3, #4
 8027a02:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8027a04:	f107 0314 	add.w	r3, r7, #20
 8027a08:	4619      	mov	r1, r3
 8027a0a:	480c      	ldr	r0, [pc, #48]	@ (8027a3c <HAL_I2C_MspInit+0x8c>)
 8027a0c:	f006 f896 	bl	802db3c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8027a10:	2300      	movs	r3, #0
 8027a12:	60fb      	str	r3, [r7, #12]
 8027a14:	4b08      	ldr	r3, [pc, #32]	@ (8027a38 <HAL_I2C_MspInit+0x88>)
 8027a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8027a18:	4a07      	ldr	r2, [pc, #28]	@ (8027a38 <HAL_I2C_MspInit+0x88>)
 8027a1a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8027a1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8027a20:	4b05      	ldr	r3, [pc, #20]	@ (8027a38 <HAL_I2C_MspInit+0x88>)
 8027a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8027a24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8027a28:	60fb      	str	r3, [r7, #12]
 8027a2a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */
  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8027a2c:	bf00      	nop
 8027a2e:	3728      	adds	r7, #40	@ 0x28
 8027a30:	46bd      	mov	sp, r7
 8027a32:	bd80      	pop	{r7, pc}
 8027a34:	40005800 	.word	0x40005800
 8027a38:	40023800 	.word	0x40023800
 8027a3c:	40020400 	.word	0x40020400

08027a40 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8027a40:	b580      	push	{r7, lr}
 8027a42:	b082      	sub	sp, #8
 8027a44:	af00      	add	r7, sp, #0
 8027a46:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C2)
 8027a48:	687b      	ldr	r3, [r7, #4]
 8027a4a:	681b      	ldr	r3, [r3, #0]
 8027a4c:	4a0e      	ldr	r2, [pc, #56]	@ (8027a88 <HAL_I2C_MspDeInit+0x48>)
 8027a4e:	4293      	cmp	r3, r2
 8027a50:	d115      	bne.n	8027a7e <HAL_I2C_MspDeInit+0x3e>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */
  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8027a52:	4b0e      	ldr	r3, [pc, #56]	@ (8027a8c <HAL_I2C_MspDeInit+0x4c>)
 8027a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8027a56:	4a0d      	ldr	r2, [pc, #52]	@ (8027a8c <HAL_I2C_MspDeInit+0x4c>)
 8027a58:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8027a5c:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8027a5e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8027a62:	480b      	ldr	r0, [pc, #44]	@ (8027a90 <HAL_I2C_MspDeInit+0x50>)
 8027a64:	f006 fb4a 	bl	802e0fc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8027a68:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8027a6c:	4808      	ldr	r0, [pc, #32]	@ (8027a90 <HAL_I2C_MspDeInit+0x50>)
 8027a6e:	f006 fb45 	bl	802e0fc <HAL_GPIO_DeInit>

    /* I2C2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 8027a72:	2021      	movs	r0, #33	@ 0x21
 8027a74:	f003 f84c 	bl	802ab10 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 8027a78:	2022      	movs	r0, #34	@ 0x22
 8027a7a:	f003 f849 	bl	802ab10 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */
  /* USER CODE END I2C2_MspDeInit 1 */
  }
}
 8027a7e:	bf00      	nop
 8027a80:	3708      	adds	r7, #8
 8027a82:	46bd      	mov	sp, r7
 8027a84:	bd80      	pop	{r7, pc}
 8027a86:	bf00      	nop
 8027a88:	40005800 	.word	0x40005800
 8027a8c:	40023800 	.word	0x40023800
 8027a90:	40020400 	.word	0x40020400

08027a94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8027a94:	b580      	push	{r7, lr}
 8027a96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8027a98:	f000 fcea 	bl	8028470 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8027a9c:	f000 f822 	bl	8027ae4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	HAL_PWR_EnableBkUpAccess();
 8027aa0:	f008 ff68 	bl	8030974 <HAL_PWR_EnableBkUpAccess>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 8027aa4:	f7ff fad4 	bl	8027050 <MX_DMA_Init>
  MX_GPIO_Init();
 8027aa8:	f7ff fe5a 	bl	8027760 <MX_GPIO_Init>
  MX_ADC1_Init();
 8027aac:	f7fe ff40 	bl	8026930 <MX_ADC1_Init>
  MX_CAN1_Init();
 8027ab0:	f7ff f82c 	bl	8026b0c <MX_CAN1_Init>
  MX_DCMI_Init();
 8027ab4:	f7ff f9b0 	bl	8026e18 <MX_DCMI_Init>
  MX_FSMC_Init();
 8027ab8:	f7ff fd8c 	bl	80275d4 <MX_FSMC_Init>
  MX_RTC_Init();
 8027abc:	f000 f926 	bl	8027d0c <MX_RTC_Init>
  MX_TIM9_Init();
 8027ac0:	f000 fb9c 	bl	80281fc <MX_TIM9_Init>
  MX_I2C2_Init();
 8027ac4:	f7ff ff46 	bl	8027954 <MX_I2C2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8027ac8:	f000 f880 	bl	8027bcc <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8027acc:	f00c fb46 	bl	803415c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8027ad0:	f7ff fb3c 	bl	802714c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8027ad4:	f00c fb66 	bl	80341a4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	EcuM_PerformReset(4);
 8027ad8:	2004      	movs	r0, #4
 8027ada:	f7fe f9c7 	bl	8025e6c <EcuM_PerformReset>
	while (1)
 8027ade:	bf00      	nop
 8027ae0:	e7fd      	b.n	8027ade <main+0x4a>
	...

08027ae4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8027ae4:	b580      	push	{r7, lr}
 8027ae6:	b094      	sub	sp, #80	@ 0x50
 8027ae8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8027aea:	f107 0320 	add.w	r3, r7, #32
 8027aee:	2230      	movs	r2, #48	@ 0x30
 8027af0:	2100      	movs	r1, #0
 8027af2:	4618      	mov	r0, r3
 8027af4:	f00f fe36 	bl	8037764 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8027af8:	f107 030c 	add.w	r3, r7, #12
 8027afc:	2200      	movs	r2, #0
 8027afe:	601a      	str	r2, [r3, #0]
 8027b00:	605a      	str	r2, [r3, #4]
 8027b02:	609a      	str	r2, [r3, #8]
 8027b04:	60da      	str	r2, [r3, #12]
 8027b06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8027b08:	2300      	movs	r3, #0
 8027b0a:	60bb      	str	r3, [r7, #8]
 8027b0c:	4b2d      	ldr	r3, [pc, #180]	@ (8027bc4 <SystemClock_Config+0xe0>)
 8027b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8027b10:	4a2c      	ldr	r2, [pc, #176]	@ (8027bc4 <SystemClock_Config+0xe0>)
 8027b12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8027b16:	6413      	str	r3, [r2, #64]	@ 0x40
 8027b18:	4b2a      	ldr	r3, [pc, #168]	@ (8027bc4 <SystemClock_Config+0xe0>)
 8027b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8027b1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8027b20:	60bb      	str	r3, [r7, #8]
 8027b22:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8027b24:	2300      	movs	r3, #0
 8027b26:	607b      	str	r3, [r7, #4]
 8027b28:	4b27      	ldr	r3, [pc, #156]	@ (8027bc8 <SystemClock_Config+0xe4>)
 8027b2a:	681b      	ldr	r3, [r3, #0]
 8027b2c:	4a26      	ldr	r2, [pc, #152]	@ (8027bc8 <SystemClock_Config+0xe4>)
 8027b2e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8027b32:	6013      	str	r3, [r2, #0]
 8027b34:	4b24      	ldr	r3, [pc, #144]	@ (8027bc8 <SystemClock_Config+0xe4>)
 8027b36:	681b      	ldr	r3, [r3, #0]
 8027b38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8027b3c:	607b      	str	r3, [r7, #4]
 8027b3e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8027b40:	2309      	movs	r3, #9
 8027b42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8027b44:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8027b48:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8027b4a:	2301      	movs	r3, #1
 8027b4c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8027b4e:	2302      	movs	r3, #2
 8027b50:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8027b52:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8027b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8027b58:	2304      	movs	r3, #4
 8027b5a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8027b5c:	23a8      	movs	r3, #168	@ 0xa8
 8027b5e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8027b60:	2302      	movs	r3, #2
 8027b62:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8027b64:	2304      	movs	r3, #4
 8027b66:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8027b68:	f107 0320 	add.w	r3, r7, #32
 8027b6c:	4618      	mov	r0, r3
 8027b6e:	f008 ff93 	bl	8030a98 <HAL_RCC_OscConfig>
 8027b72:	4603      	mov	r3, r0
 8027b74:	2b00      	cmp	r3, #0
 8027b76:	d001      	beq.n	8027b7c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8027b78:	f000 f8b6 	bl	8027ce8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8027b7c:	230f      	movs	r3, #15
 8027b7e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8027b80:	2302      	movs	r3, #2
 8027b82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8027b84:	2300      	movs	r3, #0
 8027b86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8027b88:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8027b8c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8027b8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8027b92:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8027b94:	f107 030c 	add.w	r3, r7, #12
 8027b98:	2105      	movs	r1, #5
 8027b9a:	4618      	mov	r0, r3
 8027b9c:	f009 faa8 	bl	80310f0 <HAL_RCC_ClockConfig>
 8027ba0:	4603      	mov	r3, r0
 8027ba2:	2b00      	cmp	r3, #0
 8027ba4:	d001      	beq.n	8027baa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8027ba6:	f000 f89f 	bl	8027ce8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_5);
 8027baa:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 8027bae:	f44f 01c0 	mov.w	r1, #6291456	@ 0x600000
 8027bb2:	2000      	movs	r0, #0
 8027bb4:	f009 fc2a 	bl	803140c <HAL_RCC_MCOConfig>

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8027bb8:	f009 fcdc 	bl	8031574 <HAL_RCC_EnableCSS>
}
 8027bbc:	bf00      	nop
 8027bbe:	3750      	adds	r7, #80	@ 0x50
 8027bc0:	46bd      	mov	sp, r7
 8027bc2:	bd80      	pop	{r7, pc}
 8027bc4:	40023800 	.word	0x40023800
 8027bc8:	40007000 	.word	0x40007000

08027bcc <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8027bcc:	b580      	push	{r7, lr}
 8027bce:	af00      	add	r7, sp, #0
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 3, 0);
 8027bd0:	2200      	movs	r2, #0
 8027bd2:	2103      	movs	r1, #3
 8027bd4:	2004      	movs	r0, #4
 8027bd6:	f002 ff57 	bl	802aa88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8027bda:	2004      	movs	r0, #4
 8027bdc:	f002 ff80 	bl	802aae0 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 15, 0);
 8027be0:	2200      	movs	r2, #0
 8027be2:	210f      	movs	r1, #15
 8027be4:	2051      	movs	r0, #81	@ 0x51
 8027be6:	f002 ff4f 	bl	802aa88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8027bea:	2051      	movs	r0, #81	@ 0x51
 8027bec:	f002 ff78 	bl	802aae0 <HAL_NVIC_EnableIRQ>
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 15, 0);
 8027bf0:	2200      	movs	r2, #0
 8027bf2:	210f      	movs	r1, #15
 8027bf4:	2001      	movs	r0, #1
 8027bf6:	f002 ff47 	bl	802aa88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8027bfa:	2001      	movs	r0, #1
 8027bfc:	f002 ff70 	bl	802aae0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 15, 0);
 8027c00:	2200      	movs	r2, #0
 8027c02:	210f      	movs	r1, #15
 8027c04:	2038      	movs	r0, #56	@ 0x38
 8027c06:	f002 ff3f 	bl	802aa88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8027c0a:	2038      	movs	r0, #56	@ 0x38
 8027c0c:	f002 ff68 	bl	802aae0 <HAL_NVIC_EnableIRQ>
  /* DCMI_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DCMI_IRQn, 7, 0);
 8027c10:	2200      	movs	r2, #0
 8027c12:	2107      	movs	r1, #7
 8027c14:	204e      	movs	r0, #78	@ 0x4e
 8027c16:	f002 ff37 	bl	802aa88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8027c1a:	204e      	movs	r0, #78	@ 0x4e
 8027c1c:	f002 ff60 	bl	802aae0 <HAL_NVIC_EnableIRQ>
  /* CAN1_RX0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 8, 0);
 8027c20:	2200      	movs	r2, #0
 8027c22:	2108      	movs	r1, #8
 8027c24:	2014      	movs	r0, #20
 8027c26:	f002 ff2f 	bl	802aa88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8027c2a:	2014      	movs	r0, #20
 8027c2c:	f002 ff58 	bl	802aae0 <HAL_NVIC_EnableIRQ>
  /* CAN1_RX1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 9, 0);
 8027c30:	2200      	movs	r2, #0
 8027c32:	2109      	movs	r1, #9
 8027c34:	2015      	movs	r0, #21
 8027c36:	f002 ff27 	bl	802aa88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8027c3a:	2015      	movs	r0, #21
 8027c3c:	f002 ff50 	bl	802aae0 <HAL_NVIC_EnableIRQ>
  /* CAN1_TX_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN1_TX_IRQn, 10, 0);
 8027c40:	2200      	movs	r2, #0
 8027c42:	210a      	movs	r1, #10
 8027c44:	2013      	movs	r0, #19
 8027c46:	f002 ff1f 	bl	802aa88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8027c4a:	2013      	movs	r0, #19
 8027c4c:	f002 ff48 	bl	802aae0 <HAL_NVIC_EnableIRQ>
  /* CAN1_SCE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 12, 0);
 8027c50:	2200      	movs	r2, #0
 8027c52:	210c      	movs	r1, #12
 8027c54:	2016      	movs	r0, #22
 8027c56:	f002 ff17 	bl	802aa88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8027c5a:	2016      	movs	r0, #22
 8027c5c:	f002 ff40 	bl	802aae0 <HAL_NVIC_EnableIRQ>
  /* ADC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC_IRQn, 15, 0);
 8027c60:	2200      	movs	r2, #0
 8027c62:	210f      	movs	r1, #15
 8027c64:	2012      	movs	r0, #18
 8027c66:	f002 ff0f 	bl	802aa88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 8027c6a:	2012      	movs	r0, #18
 8027c6c:	f002 ff38 	bl	802aae0 <HAL_NVIC_EnableIRQ>
  /* TIM1_BRK_TIM9_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 1, 0);
 8027c70:	2200      	movs	r2, #0
 8027c72:	2101      	movs	r1, #1
 8027c74:	2018      	movs	r0, #24
 8027c76:	f002 ff07 	bl	802aa88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8027c7a:	2018      	movs	r0, #24
 8027c7c:	f002 ff30 	bl	802aae0 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 1, 0);
 8027c80:	2200      	movs	r2, #0
 8027c82:	2101      	movs	r1, #1
 8027c84:	2005      	movs	r0, #5
 8027c86:	f002 feff 	bl	802aa88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8027c8a:	2005      	movs	r0, #5
 8027c8c:	f002 ff28 	bl	802aae0 <HAL_NVIC_EnableIRQ>
  /* I2C2_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 8027c90:	2200      	movs	r2, #0
 8027c92:	2101      	movs	r1, #1
 8027c94:	2021      	movs	r0, #33	@ 0x21
 8027c96:	f002 fef7 	bl	802aa88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8027c9a:	2021      	movs	r0, #33	@ 0x21
 8027c9c:	f002 ff20 	bl	802aae0 <HAL_NVIC_EnableIRQ>
  /* I2C2_ER_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C2_ER_IRQn, 1, 0);
 8027ca0:	2200      	movs	r2, #0
 8027ca2:	2101      	movs	r1, #1
 8027ca4:	2022      	movs	r0, #34	@ 0x22
 8027ca6:	f002 feef 	bl	802aa88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8027caa:	2022      	movs	r0, #34	@ 0x22
 8027cac:	f002 ff18 	bl	802aae0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 1, 0);
 8027cb0:	2200      	movs	r2, #0
 8027cb2:	2101      	movs	r1, #1
 8027cb4:	2046      	movs	r0, #70	@ 0x46
 8027cb6:	f002 fee7 	bl	802aa88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8027cba:	2046      	movs	r0, #70	@ 0x46
 8027cbc:	f002 ff10 	bl	802aae0 <HAL_NVIC_EnableIRQ>
}
 8027cc0:	bf00      	nop
 8027cc2:	bd80      	pop	{r7, pc}

08027cc4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8027cc4:	b580      	push	{r7, lr}
 8027cc6:	b082      	sub	sp, #8
 8027cc8:	af00      	add	r7, sp, #0
 8027cca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8027ccc:	687b      	ldr	r3, [r7, #4]
 8027cce:	681b      	ldr	r3, [r3, #0]
 8027cd0:	4a04      	ldr	r2, [pc, #16]	@ (8027ce4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8027cd2:	4293      	cmp	r3, r2
 8027cd4:	d101      	bne.n	8027cda <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8027cd6:	f000 fbed 	bl	80284b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 8027cda:	bf00      	nop
 8027cdc:	3708      	adds	r7, #8
 8027cde:	46bd      	mov	sp, r7
 8027ce0:	bd80      	pop	{r7, pc}
 8027ce2:	bf00      	nop
 8027ce4:	40010000 	.word	0x40010000

08027ce8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8027ce8:	b580      	push	{r7, lr}
 8027cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	EcuM_PerformReset(3);
 8027cec:	2003      	movs	r0, #3
 8027cee:	f7fe f8bd 	bl	8025e6c <EcuM_PerformReset>
  /* USER CODE END Error_Handler_Debug */
}
 8027cf2:	bf00      	nop
 8027cf4:	bd80      	pop	{r7, pc}

08027cf6 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8027cf6:	b480      	push	{r7}
 8027cf8:	b083      	sub	sp, #12
 8027cfa:	af00      	add	r7, sp, #0
 8027cfc:	6078      	str	r0, [r7, #4]
 8027cfe:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* USER CODE END 6 */
}
 8027d00:	bf00      	nop
 8027d02:	370c      	adds	r7, #12
 8027d04:	46bd      	mov	sp, r7
 8027d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027d0a:	4770      	bx	lr

08027d0c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8027d0c:	b580      	push	{r7, lr}
 8027d0e:	b086      	sub	sp, #24
 8027d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */
  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8027d12:	1d3b      	adds	r3, r7, #4
 8027d14:	2200      	movs	r2, #0
 8027d16:	601a      	str	r2, [r3, #0]
 8027d18:	605a      	str	r2, [r3, #4]
 8027d1a:	609a      	str	r2, [r3, #8]
 8027d1c:	60da      	str	r2, [r3, #12]
 8027d1e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8027d20:	2300      	movs	r3, #0
 8027d22:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */
  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8027d24:	4b24      	ldr	r3, [pc, #144]	@ (8027db8 <MX_RTC_Init+0xac>)
 8027d26:	4a25      	ldr	r2, [pc, #148]	@ (8027dbc <MX_RTC_Init+0xb0>)
 8027d28:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8027d2a:	4b23      	ldr	r3, [pc, #140]	@ (8027db8 <MX_RTC_Init+0xac>)
 8027d2c:	2200      	movs	r2, #0
 8027d2e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8027d30:	4b21      	ldr	r3, [pc, #132]	@ (8027db8 <MX_RTC_Init+0xac>)
 8027d32:	227f      	movs	r2, #127	@ 0x7f
 8027d34:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8027d36:	4b20      	ldr	r3, [pc, #128]	@ (8027db8 <MX_RTC_Init+0xac>)
 8027d38:	22ff      	movs	r2, #255	@ 0xff
 8027d3a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8027d3c:	4b1e      	ldr	r3, [pc, #120]	@ (8027db8 <MX_RTC_Init+0xac>)
 8027d3e:	2200      	movs	r2, #0
 8027d40:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8027d42:	4b1d      	ldr	r3, [pc, #116]	@ (8027db8 <MX_RTC_Init+0xac>)
 8027d44:	2200      	movs	r2, #0
 8027d46:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8027d48:	4b1b      	ldr	r3, [pc, #108]	@ (8027db8 <MX_RTC_Init+0xac>)
 8027d4a:	2200      	movs	r2, #0
 8027d4c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8027d4e:	481a      	ldr	r0, [pc, #104]	@ (8027db8 <MX_RTC_Init+0xac>)
 8027d50:	f009 ff9e 	bl	8031c90 <HAL_RTC_Init>
 8027d54:	4603      	mov	r3, r0
 8027d56:	2b00      	cmp	r3, #0
 8027d58:	d001      	beq.n	8027d5e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8027d5a:	f7ff ffc5 	bl	8027ce8 <Error_Handler>
  /* USER CODE BEGIN Check_RTC_BKUP */
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 8027d5e:	2312      	movs	r3, #18
 8027d60:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8027d62:	2300      	movs	r3, #0
 8027d64:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8027d66:	2300      	movs	r3, #0
 8027d68:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8027d6a:	2300      	movs	r3, #0
 8027d6c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_SET;
 8027d6e:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8027d72:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8027d74:	1d3b      	adds	r3, r7, #4
 8027d76:	2201      	movs	r2, #1
 8027d78:	4619      	mov	r1, r3
 8027d7a:	480f      	ldr	r0, [pc, #60]	@ (8027db8 <MX_RTC_Init+0xac>)
 8027d7c:	f00a f89e 	bl	8031ebc <HAL_RTC_SetTime>
 8027d80:	4603      	mov	r3, r0
 8027d82:	2b00      	cmp	r3, #0
 8027d84:	d001      	beq.n	8027d8a <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 8027d86:	f7ff ffaf 	bl	8027ce8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8027d8a:	2301      	movs	r3, #1
 8027d8c:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_SEPTEMBER;
 8027d8e:	2309      	movs	r3, #9
 8027d90:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x11;
 8027d92:	2311      	movs	r3, #17
 8027d94:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8027d96:	2300      	movs	r3, #0
 8027d98:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8027d9a:	463b      	mov	r3, r7
 8027d9c:	2201      	movs	r2, #1
 8027d9e:	4619      	mov	r1, r3
 8027da0:	4805      	ldr	r0, [pc, #20]	@ (8027db8 <MX_RTC_Init+0xac>)
 8027da2:	f00a fa3f 	bl	8032224 <HAL_RTC_SetDate>
 8027da6:	4603      	mov	r3, r0
 8027da8:	2b00      	cmp	r3, #0
 8027daa:	d001      	beq.n	8027db0 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8027dac:	f7ff ff9c 	bl	8027ce8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  /* USER CODE END RTC_Init 2 */

}
 8027db0:	bf00      	nop
 8027db2:	3718      	adds	r7, #24
 8027db4:	46bd      	mov	sp, r7
 8027db6:	bd80      	pop	{r7, pc}
 8027db8:	200005c0 	.word	0x200005c0
 8027dbc:	40002800 	.word	0x40002800

08027dc0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8027dc0:	b580      	push	{r7, lr}
 8027dc2:	b086      	sub	sp, #24
 8027dc4:	af00      	add	r7, sp, #0
 8027dc6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8027dc8:	f107 0308 	add.w	r3, r7, #8
 8027dcc:	2200      	movs	r2, #0
 8027dce:	601a      	str	r2, [r3, #0]
 8027dd0:	605a      	str	r2, [r3, #4]
 8027dd2:	609a      	str	r2, [r3, #8]
 8027dd4:	60da      	str	r2, [r3, #12]
  if(rtcHandle->Instance==RTC)
 8027dd6:	687b      	ldr	r3, [r7, #4]
 8027dd8:	681b      	ldr	r3, [r3, #0]
 8027dda:	4a0c      	ldr	r2, [pc, #48]	@ (8027e0c <HAL_RTC_MspInit+0x4c>)
 8027ddc:	4293      	cmp	r3, r2
 8027dde:	d111      	bne.n	8027e04 <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */
  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8027de0:	2302      	movs	r3, #2
 8027de2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8027de4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8027de8:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8027dea:	f107 0308 	add.w	r3, r7, #8
 8027dee:	4618      	mov	r0, r3
 8027df0:	f009 fd54 	bl	803189c <HAL_RCCEx_PeriphCLKConfig>
 8027df4:	4603      	mov	r3, r0
 8027df6:	2b00      	cmp	r3, #0
 8027df8:	d001      	beq.n	8027dfe <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8027dfa:	f7ff ff75 	bl	8027ce8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8027dfe:	4b04      	ldr	r3, [pc, #16]	@ (8027e10 <HAL_RTC_MspInit+0x50>)
 8027e00:	2201      	movs	r2, #1
 8027e02:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */
  /* USER CODE END RTC_MspInit 1 */
  }
}
 8027e04:	bf00      	nop
 8027e06:	3718      	adds	r7, #24
 8027e08:	46bd      	mov	sp, r7
 8027e0a:	bd80      	pop	{r7, pc}
 8027e0c:	40002800 	.word	0x40002800
 8027e10:	42470e3c 	.word	0x42470e3c

08027e14 <HAL_RTC_MspDeInit>:

void HAL_RTC_MspDeInit(RTC_HandleTypeDef* rtcHandle)
{
 8027e14:	b480      	push	{r7}
 8027e16:	b083      	sub	sp, #12
 8027e18:	af00      	add	r7, sp, #0
 8027e1a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8027e1c:	687b      	ldr	r3, [r7, #4]
 8027e1e:	681b      	ldr	r3, [r3, #0]
 8027e20:	4a05      	ldr	r2, [pc, #20]	@ (8027e38 <HAL_RTC_MspDeInit+0x24>)
 8027e22:	4293      	cmp	r3, r2
 8027e24:	d102      	bne.n	8027e2c <HAL_RTC_MspDeInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspDeInit 0 */

  /* USER CODE END RTC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RTC_DISABLE();
 8027e26:	4b05      	ldr	r3, [pc, #20]	@ (8027e3c <HAL_RTC_MspDeInit+0x28>)
 8027e28:	2200      	movs	r2, #0
 8027e2a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspDeInit 1 */

  /* USER CODE END RTC_MspDeInit 1 */
  }
}
 8027e2c:	bf00      	nop
 8027e2e:	370c      	adds	r7, #12
 8027e30:	46bd      	mov	sp, r7
 8027e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027e36:	4770      	bx	lr
 8027e38:	40002800 	.word	0x40002800
 8027e3c:	42470e3c 	.word	0x42470e3c

08027e40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8027e40:	b580      	push	{r7, lr}
 8027e42:	b082      	sub	sp, #8
 8027e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */
  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8027e46:	2300      	movs	r3, #0
 8027e48:	607b      	str	r3, [r7, #4]
 8027e4a:	4b21      	ldr	r3, [pc, #132]	@ (8027ed0 <HAL_MspInit+0x90>)
 8027e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8027e4e:	4a20      	ldr	r2, [pc, #128]	@ (8027ed0 <HAL_MspInit+0x90>)
 8027e50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8027e54:	6453      	str	r3, [r2, #68]	@ 0x44
 8027e56:	4b1e      	ldr	r3, [pc, #120]	@ (8027ed0 <HAL_MspInit+0x90>)
 8027e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8027e5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8027e5e:	607b      	str	r3, [r7, #4]
 8027e60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8027e62:	2300      	movs	r3, #0
 8027e64:	603b      	str	r3, [r7, #0]
 8027e66:	4b1a      	ldr	r3, [pc, #104]	@ (8027ed0 <HAL_MspInit+0x90>)
 8027e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8027e6a:	4a19      	ldr	r2, [pc, #100]	@ (8027ed0 <HAL_MspInit+0x90>)
 8027e6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8027e70:	6413      	str	r3, [r2, #64]	@ 0x40
 8027e72:	4b17      	ldr	r3, [pc, #92]	@ (8027ed0 <HAL_MspInit+0x90>)
 8027e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8027e76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8027e7a:	603b      	str	r3, [r7, #0]
 8027e7c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 8027e7e:	2200      	movs	r2, #0
 8027e80:	2101      	movs	r1, #1
 8027e82:	f06f 000b 	mvn.w	r0, #11
 8027e86:	f002 fdff 	bl	802aa88 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 8027e8a:	2200      	movs	r2, #0
 8027e8c:	2101      	movs	r1, #1
 8027e8e:	f06f 000a 	mvn.w	r0, #10
 8027e92:	f002 fdf9 	bl	802aa88 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 8027e96:	2200      	movs	r2, #0
 8027e98:	2101      	movs	r1, #1
 8027e9a:	f06f 0009 	mvn.w	r0, #9
 8027e9e:	f002 fdf3 	bl	802aa88 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 8027ea2:	2200      	movs	r2, #0
 8027ea4:	2101      	movs	r1, #1
 8027ea6:	f06f 0004 	mvn.w	r0, #4
 8027eaa:	f002 fded 	bl	802aa88 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 8027eae:	2200      	movs	r2, #0
 8027eb0:	2101      	movs	r1, #1
 8027eb2:	f06f 0003 	mvn.w	r0, #3
 8027eb6:	f002 fde7 	bl	802aa88 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8027eba:	2200      	movs	r2, #0
 8027ebc:	210f      	movs	r1, #15
 8027ebe:	f06f 0001 	mvn.w	r0, #1
 8027ec2:	f002 fde1 	bl	802aa88 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */

  /* USER CODE BEGIN MspInit 1 */
  /* USER CODE END MspInit 1 */
}
 8027ec6:	bf00      	nop
 8027ec8:	3708      	adds	r7, #8
 8027eca:	46bd      	mov	sp, r7
 8027ecc:	bd80      	pop	{r7, pc}
 8027ece:	bf00      	nop
 8027ed0:	40023800 	.word	0x40023800

08027ed4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8027ed4:	b580      	push	{r7, lr}
 8027ed6:	b08c      	sub	sp, #48	@ 0x30
 8027ed8:	af00      	add	r7, sp, #0
 8027eda:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8027edc:	2300      	movs	r3, #0
 8027ede:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8027ee0:	2300      	movs	r3, #0
 8027ee2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8027ee4:	2300      	movs	r3, #0
 8027ee6:	60bb      	str	r3, [r7, #8]
 8027ee8:	4b2f      	ldr	r3, [pc, #188]	@ (8027fa8 <HAL_InitTick+0xd4>)
 8027eea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8027eec:	4a2e      	ldr	r2, [pc, #184]	@ (8027fa8 <HAL_InitTick+0xd4>)
 8027eee:	f043 0301 	orr.w	r3, r3, #1
 8027ef2:	6453      	str	r3, [r2, #68]	@ 0x44
 8027ef4:	4b2c      	ldr	r3, [pc, #176]	@ (8027fa8 <HAL_InitTick+0xd4>)
 8027ef6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8027ef8:	f003 0301 	and.w	r3, r3, #1
 8027efc:	60bb      	str	r3, [r7, #8]
 8027efe:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8027f00:	f107 020c 	add.w	r2, r7, #12
 8027f04:	f107 0310 	add.w	r3, r7, #16
 8027f08:	4611      	mov	r1, r2
 8027f0a:	4618      	mov	r0, r3
 8027f0c:	f009 fc78 	bl	8031800 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8027f10:	f009 fc62 	bl	80317d8 <HAL_RCC_GetPCLK2Freq>
 8027f14:	4603      	mov	r3, r0
 8027f16:	005b      	lsls	r3, r3, #1
 8027f18:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8027f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027f1c:	4a23      	ldr	r2, [pc, #140]	@ (8027fac <HAL_InitTick+0xd8>)
 8027f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8027f22:	0c9b      	lsrs	r3, r3, #18
 8027f24:	3b01      	subs	r3, #1
 8027f26:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8027f28:	4b21      	ldr	r3, [pc, #132]	@ (8027fb0 <HAL_InitTick+0xdc>)
 8027f2a:	4a22      	ldr	r2, [pc, #136]	@ (8027fb4 <HAL_InitTick+0xe0>)
 8027f2c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8027f2e:	4b20      	ldr	r3, [pc, #128]	@ (8027fb0 <HAL_InitTick+0xdc>)
 8027f30:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8027f34:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8027f36:	4a1e      	ldr	r2, [pc, #120]	@ (8027fb0 <HAL_InitTick+0xdc>)
 8027f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027f3a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8027f3c:	4b1c      	ldr	r3, [pc, #112]	@ (8027fb0 <HAL_InitTick+0xdc>)
 8027f3e:	2200      	movs	r2, #0
 8027f40:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8027f42:	4b1b      	ldr	r3, [pc, #108]	@ (8027fb0 <HAL_InitTick+0xdc>)
 8027f44:	2200      	movs	r2, #0
 8027f46:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8027f48:	4b19      	ldr	r3, [pc, #100]	@ (8027fb0 <HAL_InitTick+0xdc>)
 8027f4a:	2200      	movs	r2, #0
 8027f4c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8027f4e:	4818      	ldr	r0, [pc, #96]	@ (8027fb0 <HAL_InitTick+0xdc>)
 8027f50:	f00a fc48 	bl	80327e4 <HAL_TIM_Base_Init>
 8027f54:	4603      	mov	r3, r0
 8027f56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8027f5a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8027f5e:	2b00      	cmp	r3, #0
 8027f60:	d11b      	bne.n	8027f9a <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8027f62:	4813      	ldr	r0, [pc, #76]	@ (8027fb0 <HAL_InitTick+0xdc>)
 8027f64:	f00a feb4 	bl	8032cd0 <HAL_TIM_Base_Start_IT>
 8027f68:	4603      	mov	r3, r0
 8027f6a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8027f6e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8027f72:	2b00      	cmp	r3, #0
 8027f74:	d111      	bne.n	8027f9a <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8027f76:	2019      	movs	r0, #25
 8027f78:	f002 fdb2 	bl	802aae0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8027f7c:	687b      	ldr	r3, [r7, #4]
 8027f7e:	2b0f      	cmp	r3, #15
 8027f80:	d808      	bhi.n	8027f94 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8027f82:	2200      	movs	r2, #0
 8027f84:	6879      	ldr	r1, [r7, #4]
 8027f86:	2019      	movs	r0, #25
 8027f88:	f002 fd7e 	bl	802aa88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8027f8c:	4a0a      	ldr	r2, [pc, #40]	@ (8027fb8 <HAL_InitTick+0xe4>)
 8027f8e:	687b      	ldr	r3, [r7, #4]
 8027f90:	6013      	str	r3, [r2, #0]
 8027f92:	e002      	b.n	8027f9a <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8027f94:	2301      	movs	r3, #1
 8027f96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8027f9a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8027f9e:	4618      	mov	r0, r3
 8027fa0:	3730      	adds	r7, #48	@ 0x30
 8027fa2:	46bd      	mov	sp, r7
 8027fa4:	bd80      	pop	{r7, pc}
 8027fa6:	bf00      	nop
 8027fa8:	40023800 	.word	0x40023800
 8027fac:	431bde83 	.word	0x431bde83
 8027fb0:	20000600 	.word	0x20000600
 8027fb4:	40010000 	.word	0x40010000
 8027fb8:	20000020 	.word	0x20000020

08027fbc <HAL_SuspendTick>:
  * @note   Disable the tick increment by disabling TIM1 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_SuspendTick(void)
{
 8027fbc:	b480      	push	{r7}
 8027fbe:	af00      	add	r7, sp, #0
  /* Disable TIM1 update Interrupt */
  __HAL_TIM_DISABLE_IT(&htim1, TIM_IT_UPDATE);
 8027fc0:	4b06      	ldr	r3, [pc, #24]	@ (8027fdc <HAL_SuspendTick+0x20>)
 8027fc2:	681b      	ldr	r3, [r3, #0]
 8027fc4:	68da      	ldr	r2, [r3, #12]
 8027fc6:	4b05      	ldr	r3, [pc, #20]	@ (8027fdc <HAL_SuspendTick+0x20>)
 8027fc8:	681b      	ldr	r3, [r3, #0]
 8027fca:	f022 0201 	bic.w	r2, r2, #1
 8027fce:	60da      	str	r2, [r3, #12]
}
 8027fd0:	bf00      	nop
 8027fd2:	46bd      	mov	sp, r7
 8027fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027fd8:	4770      	bx	lr
 8027fda:	bf00      	nop
 8027fdc:	20000600 	.word	0x20000600

08027fe0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8027fe0:	b580      	push	{r7, lr}
 8027fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8027fe4:	f009 fc3e 	bl	8031864 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	EcuM_PerformReset(5);
 8027fe8:	2005      	movs	r0, #5
 8027fea:	f7fd ff3f 	bl	8025e6c <EcuM_PerformReset>
   while (1)
 8027fee:	bf00      	nop
 8027ff0:	e7fd      	b.n	8027fee <NMI_Handler+0xe>

08027ff2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8027ff2:	b580      	push	{r7, lr}
 8027ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	EcuM_PerformReset(6);
 8027ff6:	2006      	movs	r0, #6
 8027ff8:	f7fd ff38 	bl	8025e6c <EcuM_PerformReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8027ffc:	bf00      	nop
 8027ffe:	e7fd      	b.n	8027ffc <HardFault_Handler+0xa>

08028000 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8028000:	b580      	push	{r7, lr}
 8028002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	EcuM_PerformReset(7);
 8028004:	2007      	movs	r0, #7
 8028006:	f7fd ff31 	bl	8025e6c <EcuM_PerformReset>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 802800a:	bf00      	nop
 802800c:	e7fd      	b.n	802800a <MemManage_Handler+0xa>

0802800e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 802800e:	b580      	push	{r7, lr}
 8028010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	EcuM_PerformReset(8);
 8028012:	2008      	movs	r0, #8
 8028014:	f7fd ff2a 	bl	8025e6c <EcuM_PerformReset>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8028018:	bf00      	nop
 802801a:	e7fd      	b.n	8028018 <BusFault_Handler+0xa>

0802801c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 802801c:	b580      	push	{r7, lr}
 802801e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	EcuM_PerformReset(9);
 8028020:	2009      	movs	r0, #9
 8028022:	f7fd ff23 	bl	8025e6c <EcuM_PerformReset>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8028026:	bf00      	nop
 8028028:	e7fd      	b.n	8028026 <UsageFault_Handler+0xa>

0802802a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 802802a:	b480      	push	{r7}
 802802c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */
  /* USER CODE END DebugMonitor_IRQn 1 */
}
 802802e:	bf00      	nop
 8028030:	46bd      	mov	sp, r7
 8028032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028036:	4770      	bx	lr

08028038 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8028038:	b580      	push	{r7, lr}
 802803a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */
  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 802803c:	f008 fd12 	bl	8030a64 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */
  /* USER CODE END PVD_IRQn 1 */
}
 8028040:	bf00      	nop
 8028042:	bd80      	pop	{r7, pc}

08028044 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8028044:	b580      	push	{r7, lr}
 8028046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */
  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8028048:	f005 f962 	bl	802d310 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */
  /* USER CODE END FLASH_IRQn 1 */
}
 802804c:	bf00      	nop
 802804e:	bd80      	pop	{r7, pc}

08028050 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8028050:	b480      	push	{r7}
 8028052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RCC_IRQn 0 */
  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */
  /* USER CODE END RCC_IRQn 1 */
}
 8028054:	bf00      	nop
 8028056:	46bd      	mov	sp, r7
 8028058:	f85d 7b04 	ldr.w	r7, [sp], #4
 802805c:	4770      	bx	lr
	...

08028060 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8028060:	b580      	push	{r7, lr}
 8028062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */
  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8028064:	4802      	ldr	r0, [pc, #8]	@ (8028070 <ADC_IRQHandler+0x10>)
 8028066:	f000 fc9f 	bl	80289a8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */
  /* USER CODE END ADC_IRQn 1 */
}
 802806a:	bf00      	nop
 802806c:	bd80      	pop	{r7, pc}
 802806e:	bf00      	nop
 8028070:	200000e4 	.word	0x200000e4

08028074 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8028074:	b580      	push	{r7, lr}
 8028076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */
  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8028078:	4802      	ldr	r0, [pc, #8]	@ (8028084 <CAN1_TX_IRQHandler+0x10>)
 802807a:	f002 f975 	bl	802a368 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */
  /* USER CODE END CAN1_TX_IRQn 1 */
}
 802807e:	bf00      	nop
 8028080:	bd80      	pop	{r7, pc}
 8028082:	bf00      	nop
 8028084:	200001a8 	.word	0x200001a8

08028088 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8028088:	b580      	push	{r7, lr}
 802808a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 802808c:	4802      	ldr	r0, [pc, #8]	@ (8028098 <CAN1_RX0_IRQHandler+0x10>)
 802808e:	f002 f96b 	bl	802a368 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8028092:	bf00      	nop
 8028094:	bd80      	pop	{r7, pc}
 8028096:	bf00      	nop
 8028098:	200001a8 	.word	0x200001a8

0802809c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 802809c:	b580      	push	{r7, lr}
 802809e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */
  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80280a0:	4802      	ldr	r0, [pc, #8]	@ (80280ac <CAN1_RX1_IRQHandler+0x10>)
 80280a2:	f002 f961 	bl	802a368 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */
  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80280a6:	bf00      	nop
 80280a8:	bd80      	pop	{r7, pc}
 80280aa:	bf00      	nop
 80280ac:	200001a8 	.word	0x200001a8

080280b0 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80280b0:	b580      	push	{r7, lr}
 80280b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */
  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80280b4:	4802      	ldr	r0, [pc, #8]	@ (80280c0 <CAN1_SCE_IRQHandler+0x10>)
 80280b6:	f002 f957 	bl	802a368 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */
  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80280ba:	bf00      	nop
 80280bc:	bd80      	pop	{r7, pc}
 80280be:	bf00      	nop
 80280c0:	200001a8 	.word	0x200001a8

080280c4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80280c4:	b580      	push	{r7, lr}
 80280c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */
	ulHighFrequencyTimerTicks++;
 80280c8:	4b04      	ldr	r3, [pc, #16]	@ (80280dc <TIM1_BRK_TIM9_IRQHandler+0x18>)
 80280ca:	681b      	ldr	r3, [r3, #0]
 80280cc:	3301      	adds	r3, #1
 80280ce:	4a03      	ldr	r2, [pc, #12]	@ (80280dc <TIM1_BRK_TIM9_IRQHandler+0x18>)
 80280d0:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80280d2:	4803      	ldr	r0, [pc, #12]	@ (80280e0 <TIM1_BRK_TIM9_IRQHandler+0x1c>)
 80280d4:	f00a fec2 	bl	8032e5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */
  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80280d8:	bf00      	nop
 80280da:	bd80      	pop	{r7, pc}
 80280dc:	200004ac 	.word	0x200004ac
 80280e0:	200006b8 	.word	0x200006b8

080280e4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80280e4:	b580      	push	{r7, lr}
 80280e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80280e8:	4802      	ldr	r0, [pc, #8]	@ (80280f4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80280ea:	f00a feb7 	bl	8032e5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80280ee:	bf00      	nop
 80280f0:	bd80      	pop	{r7, pc}
 80280f2:	bf00      	nop
 80280f4:	20000600 	.word	0x20000600

080280f8 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80280f8:	b580      	push	{r7, lr}
 80280fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */
  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80280fc:	4802      	ldr	r0, [pc, #8]	@ (8028108 <I2C2_EV_IRQHandler+0x10>)
 80280fe:	f006 fccb 	bl	802ea98 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */
  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8028102:	bf00      	nop
 8028104:	bd80      	pop	{r7, pc}
 8028106:	bf00      	nop
 8028108:	2000053c 	.word	0x2000053c

0802810c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 802810c:	b580      	push	{r7, lr}
 802810e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */
  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8028110:	4802      	ldr	r0, [pc, #8]	@ (802811c <I2C2_ER_IRQHandler+0x10>)
 8028112:	f006 fe14 	bl	802ed3e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */
  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8028116:	bf00      	nop
 8028118:	bd80      	pop	{r7, pc}
 802811a:	bf00      	nop
 802811c:	2000053c 	.word	0x2000053c

08028120 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8028120:	b580      	push	{r7, lr}
 8028122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */
  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8028124:	4802      	ldr	r0, [pc, #8]	@ (8028130 <DMA2_Stream0_IRQHandler+0x10>)
 8028126:	f003 fc85 	bl	802ba34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */
  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 802812a:	bf00      	nop
 802812c:	bd80      	pop	{r7, pc}
 802812e:	bf00      	nop
 8028130:	20000148 	.word	0x20000148

08028134 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8028134:	b580      	push	{r7, lr}
 8028136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */
  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8028138:	4802      	ldr	r0, [pc, #8]	@ (8028144 <DMA2_Stream7_IRQHandler+0x10>)
 802813a:	f003 fc7b 	bl	802ba34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */
  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 802813e:	bf00      	nop
 8028140:	bd80      	pop	{r7, pc}
 8028142:	bf00      	nop
 8028144:	20000264 	.word	0x20000264

08028148 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8028148:	b580      	push	{r7, lr}
 802814a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */
  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 802814c:	4802      	ldr	r0, [pc, #8]	@ (8028158 <DCMI_IRQHandler+0x10>)
 802814e:	f002 fe3b 	bl	802adc8 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */
  /* USER CODE END DCMI_IRQn 1 */
}
 8028152:	bf00      	nop
 8028154:	bd80      	pop	{r7, pc}
 8028156:	bf00      	nop
 8028158:	2000020c 	.word	0x2000020c

0802815c <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 802815c:	b580      	push	{r7, lr}
 802815e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FPU_IRQn 0 */
	EcuM_PerformReset(10);
 8028160:	200a      	movs	r0, #10
 8028162:	f7fd fe83 	bl	8025e6c <EcuM_PerformReset>
  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8028166:	bf00      	nop
 8028168:	bd80      	pop	{r7, pc}
	...

0802816c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 802816c:	b580      	push	{r7, lr}
 802816e:	b086      	sub	sp, #24
 8028170:	af00      	add	r7, sp, #0
 8028172:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8028174:	4a14      	ldr	r2, [pc, #80]	@ (80281c8 <_sbrk+0x5c>)
 8028176:	4b15      	ldr	r3, [pc, #84]	@ (80281cc <_sbrk+0x60>)
 8028178:	1ad3      	subs	r3, r2, r3
 802817a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 802817c:	697b      	ldr	r3, [r7, #20]
 802817e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8028180:	4b13      	ldr	r3, [pc, #76]	@ (80281d0 <_sbrk+0x64>)
 8028182:	681b      	ldr	r3, [r3, #0]
 8028184:	2b00      	cmp	r3, #0
 8028186:	d102      	bne.n	802818e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8028188:	4b11      	ldr	r3, [pc, #68]	@ (80281d0 <_sbrk+0x64>)
 802818a:	4a12      	ldr	r2, [pc, #72]	@ (80281d4 <_sbrk+0x68>)
 802818c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 802818e:	4b10      	ldr	r3, [pc, #64]	@ (80281d0 <_sbrk+0x64>)
 8028190:	681a      	ldr	r2, [r3, #0]
 8028192:	687b      	ldr	r3, [r7, #4]
 8028194:	4413      	add	r3, r2
 8028196:	693a      	ldr	r2, [r7, #16]
 8028198:	429a      	cmp	r2, r3
 802819a:	d207      	bcs.n	80281ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 802819c:	f00f fb50 	bl	8037840 <__errno>
 80281a0:	4603      	mov	r3, r0
 80281a2:	220c      	movs	r2, #12
 80281a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80281a6:	f04f 33ff 	mov.w	r3, #4294967295
 80281aa:	e009      	b.n	80281c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80281ac:	4b08      	ldr	r3, [pc, #32]	@ (80281d0 <_sbrk+0x64>)
 80281ae:	681b      	ldr	r3, [r3, #0]
 80281b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80281b2:	4b07      	ldr	r3, [pc, #28]	@ (80281d0 <_sbrk+0x64>)
 80281b4:	681a      	ldr	r2, [r3, #0]
 80281b6:	687b      	ldr	r3, [r7, #4]
 80281b8:	4413      	add	r3, r2
 80281ba:	4a05      	ldr	r2, [pc, #20]	@ (80281d0 <_sbrk+0x64>)
 80281bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80281be:	68fb      	ldr	r3, [r7, #12]
}
 80281c0:	4618      	mov	r0, r3
 80281c2:	3718      	adds	r7, #24
 80281c4:	46bd      	mov	sp, r7
 80281c6:	bd80      	pop	{r7, pc}
 80281c8:	20020000 	.word	0x20020000
 80281cc:	00000200 	.word	0x00000200
 80281d0:	200006b4 	.word	0x200006b4
 80281d4:	200045a0 	.word	0x200045a0

080281d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80281d8:	b480      	push	{r7}
 80281da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80281dc:	4b06      	ldr	r3, [pc, #24]	@ (80281f8 <SystemInit+0x20>)
 80281de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80281e2:	4a05      	ldr	r2, [pc, #20]	@ (80281f8 <SystemInit+0x20>)
 80281e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80281e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80281ec:	bf00      	nop
 80281ee:	46bd      	mov	sp, r7
 80281f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80281f4:	4770      	bx	lr
 80281f6:	bf00      	nop
 80281f8:	e000ed00 	.word	0xe000ed00

080281fc <MX_TIM9_Init>:

TIM_HandleTypeDef htim9;

/* TIM9 init function */
void MX_TIM9_Init(void)
{
 80281fc:	b580      	push	{r7, lr}
 80281fe:	b084      	sub	sp, #16
 8028200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */
  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8028202:	463b      	mov	r3, r7
 8028204:	2200      	movs	r2, #0
 8028206:	601a      	str	r2, [r3, #0]
 8028208:	605a      	str	r2, [r3, #4]
 802820a:	609a      	str	r2, [r3, #8]
 802820c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */
  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 802820e:	4b16      	ldr	r3, [pc, #88]	@ (8028268 <MX_TIM9_Init+0x6c>)
 8028210:	4a16      	ldr	r2, [pc, #88]	@ (802826c <MX_TIM9_Init+0x70>)
 8028212:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 99;
 8028214:	4b14      	ldr	r3, [pc, #80]	@ (8028268 <MX_TIM9_Init+0x6c>)
 8028216:	2263      	movs	r2, #99	@ 0x63
 8028218:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 802821a:	4b13      	ldr	r3, [pc, #76]	@ (8028268 <MX_TIM9_Init+0x6c>)
 802821c:	2200      	movs	r2, #0
 802821e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 8028220:	4b11      	ldr	r3, [pc, #68]	@ (8028268 <MX_TIM9_Init+0x6c>)
 8028222:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8028226:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8028228:	4b0f      	ldr	r3, [pc, #60]	@ (8028268 <MX_TIM9_Init+0x6c>)
 802822a:	2200      	movs	r2, #0
 802822c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 802822e:	4b0e      	ldr	r3, [pc, #56]	@ (8028268 <MX_TIM9_Init+0x6c>)
 8028230:	2200      	movs	r2, #0
 8028232:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8028234:	480c      	ldr	r0, [pc, #48]	@ (8028268 <MX_TIM9_Init+0x6c>)
 8028236:	f00a fad5 	bl	80327e4 <HAL_TIM_Base_Init>
 802823a:	4603      	mov	r3, r0
 802823c:	2b00      	cmp	r3, #0
 802823e:	d001      	beq.n	8028244 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8028240:	f7ff fd52 	bl	8027ce8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8028244:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8028248:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 802824a:	463b      	mov	r3, r7
 802824c:	4619      	mov	r1, r3
 802824e:	4806      	ldr	r0, [pc, #24]	@ (8028268 <MX_TIM9_Init+0x6c>)
 8028250:	f00a ff14 	bl	803307c <HAL_TIM_ConfigClockSource>
 8028254:	4603      	mov	r3, r0
 8028256:	2b00      	cmp	r3, #0
 8028258:	d001      	beq.n	802825e <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 802825a:	f7ff fd45 	bl	8027ce8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */
  /* USER CODE END TIM9_Init 2 */

}
 802825e:	bf00      	nop
 8028260:	3710      	adds	r7, #16
 8028262:	46bd      	mov	sp, r7
 8028264:	bd80      	pop	{r7, pc}
 8028266:	bf00      	nop
 8028268:	200006b8 	.word	0x200006b8
 802826c:	40014000 	.word	0x40014000

08028270 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8028270:	b480      	push	{r7}
 8028272:	b085      	sub	sp, #20
 8028274:	af00      	add	r7, sp, #0
 8028276:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM9)
 8028278:	687b      	ldr	r3, [r7, #4]
 802827a:	681b      	ldr	r3, [r3, #0]
 802827c:	4a0b      	ldr	r2, [pc, #44]	@ (80282ac <HAL_TIM_Base_MspInit+0x3c>)
 802827e:	4293      	cmp	r3, r2
 8028280:	d10d      	bne.n	802829e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */
  /* USER CODE END TIM9_MspInit 0 */
    /* TIM9 clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8028282:	2300      	movs	r3, #0
 8028284:	60fb      	str	r3, [r7, #12]
 8028286:	4b0a      	ldr	r3, [pc, #40]	@ (80282b0 <HAL_TIM_Base_MspInit+0x40>)
 8028288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802828a:	4a09      	ldr	r2, [pc, #36]	@ (80282b0 <HAL_TIM_Base_MspInit+0x40>)
 802828c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8028290:	6453      	str	r3, [r2, #68]	@ 0x44
 8028292:	4b07      	ldr	r3, [pc, #28]	@ (80282b0 <HAL_TIM_Base_MspInit+0x40>)
 8028294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8028296:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 802829a:	60fb      	str	r3, [r7, #12]
 802829c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */
  /* USER CODE END TIM9_MspInit 1 */
  }
}
 802829e:	bf00      	nop
 80282a0:	3714      	adds	r7, #20
 80282a2:	46bd      	mov	sp, r7
 80282a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80282a8:	4770      	bx	lr
 80282aa:	bf00      	nop
 80282ac:	40014000 	.word	0x40014000
 80282b0:	40023800 	.word	0x40023800

080282b4 <HAL_TIM_Base_MspDeInit>:

void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80282b4:	b580      	push	{r7, lr}
 80282b6:	b082      	sub	sp, #8
 80282b8:	af00      	add	r7, sp, #0
 80282ba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM9)
 80282bc:	687b      	ldr	r3, [r7, #4]
 80282be:	681b      	ldr	r3, [r3, #0]
 80282c0:	4a07      	ldr	r2, [pc, #28]	@ (80282e0 <HAL_TIM_Base_MspDeInit+0x2c>)
 80282c2:	4293      	cmp	r3, r2
 80282c4:	d108      	bne.n	80282d8 <HAL_TIM_Base_MspDeInit+0x24>
  {
  /* USER CODE BEGIN TIM9_MspDeInit 0 */
  /* USER CODE END TIM9_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM9_CLK_DISABLE();
 80282c6:	4b07      	ldr	r3, [pc, #28]	@ (80282e4 <HAL_TIM_Base_MspDeInit+0x30>)
 80282c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80282ca:	4a06      	ldr	r2, [pc, #24]	@ (80282e4 <HAL_TIM_Base_MspDeInit+0x30>)
 80282cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80282d0:	6453      	str	r3, [r2, #68]	@ 0x44

    /* TIM9 interrupt Deinit */
    HAL_NVIC_DisableIRQ(TIM1_BRK_TIM9_IRQn);
 80282d2:	2018      	movs	r0, #24
 80282d4:	f002 fc1c 	bl	802ab10 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN TIM9_MspDeInit 1 */
  /* USER CODE END TIM9_MspDeInit 1 */
  }
}
 80282d8:	bf00      	nop
 80282da:	3708      	adds	r7, #8
 80282dc:	46bd      	mov	sp, r7
 80282de:	bd80      	pop	{r7, pc}
 80282e0:	40014000 	.word	0x40014000
 80282e4:	40023800 	.word	0x40023800

080282e8 <Reset_Handler>:

.section  .text.Reset_Handler
.weak  Reset_Handler
.type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack     /* set stack pointer */
 80282e8:	f8df d04c 	ldr.w	sp, [pc, #76]	@ 8028338 <LoopFillZerobss+0x10>
  
  /* Call the clock system initialization function. */
  bl  SystemInit  
 80282ec:	f7ff ff74 	bl	80281d8 <SystemInit>

  /* Copy the data segment initializers from Flash to SRAM */
  ldr r0, =_sdata         /* SRAM data start */
 80282f0:	4812      	ldr	r0, [pc, #72]	@ (802833c <LoopFillZerobss+0x14>)
  ldr r1, =_edata         /* SRAM data end */
 80282f2:	4913      	ldr	r1, [pc, #76]	@ (8028340 <LoopFillZerobss+0x18>)
  ldr r2, =_sidata        /* Flash data start */
 80282f4:	4a13      	ldr	r2, [pc, #76]	@ (8028344 <LoopFillZerobss+0x1c>)
  movs r3, #0             /* Zero offset */
 80282f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80282f8:	e002      	b.n	8028300 <LoopCopyDataInit>

080282fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]        /* Load word from Flash */
 80282fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]        /* Store word to SRAM */
 80282fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4         /* Increment by 4 bytes (word size) */
 80282fe:	3304      	adds	r3, #4

08028300 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3         /* Calculate address in SRAM */
 8028300:	18c4      	adds	r4, r0, r3
  cmp r4, r1              /* Compare with end of data section */
 8028302:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8028304:	d3f9      	bcc.n	80282fa <CopyDataInit>

  /* Copy the CCMRAM data segment initializers from Flash to CCMRAM */
  ldr r0, =_sccmram       /* CCMRAM start */
 8028306:	4810      	ldr	r0, [pc, #64]	@ (8028348 <LoopFillZerobss+0x20>)
  ldr r1, =_eccmram       /* CCMRAM end */
 8028308:	4910      	ldr	r1, [pc, #64]	@ (802834c <LoopFillZerobss+0x24>)
  ldr r2, =_siccmram      /* Flash CCMRAM data start */
 802830a:	4a11      	ldr	r2, [pc, #68]	@ (8028350 <LoopFillZerobss+0x28>)
  movs r3, #0             /* Zero offset */
 802830c:	2300      	movs	r3, #0
  b LoopCopyCCMRAMInit
 802830e:	e002      	b.n	8028316 <LoopCopyCCMRAMInit>

08028310 <CopyCCMRAMInit>:

CopyCCMRAMInit:
  ldr r4, [r2, r3]        /* Load word from Flash */
 8028310:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]        /* Store word to CCMRAM */
 8028312:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4         /* Increment by 4 bytes */
 8028314:	3304      	adds	r3, #4

08028316 <LoopCopyCCMRAMInit>:

LoopCopyCCMRAMInit:
  adds r4, r0, r3         /* Calculate address in CCMRAM */
 8028316:	18c4      	adds	r4, r0, r3
  cmp r4, r1              /* Compare with end of CCMRAM section */
 8028318:	428c      	cmp	r4, r1
  bcc CopyCCMRAMInit
 802831a:	d3f9      	bcc.n	8028310 <CopyCCMRAMInit>

  /* Zero fill the BSS segment. */
  ldr r2, =_sbss          /* BSS start */
 802831c:	4a0d      	ldr	r2, [pc, #52]	@ (8028354 <LoopFillZerobss+0x2c>)
  ldr r4, =_ebss          /* BSS end */
 802831e:	4c0e      	ldr	r4, [pc, #56]	@ (8028358 <LoopFillZerobss+0x30>)
  movs r3, #0             /* Zero value */
 8028320:	2300      	movs	r3, #0
  b LoopFillZerobss
 8028322:	e001      	b.n	8028328 <LoopFillZerobss>

08028324 <FillZerobss>:

FillZerobss:
  str  r3, [r2]           /* Store zero to BSS */
 8028324:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4         /* Increment by 4 bytes */
 8028326:	3204      	adds	r2, #4

08028328 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4              /* Compare with end of BSS section */
 8028328:	42a2      	cmp	r2, r4
  bcc FillZerobss
 802832a:	d3fb      	bcc.n	8028324 <FillZerobss>

  /* Call static constructors */
  bl __libc_init_array
 802832c:	f00f fa8e 	bl	803784c <__libc_init_array>

  /* Call the application's entry point. */
  bl  main
 8028330:	f7ff fbb0 	bl	8027a94 <main>

  /* Infinite loop */
  bx  lr    
 8028334:	4770      	bx	lr
 8028336:	0000      	.short	0x0000
  ldr   sp, =_estack     /* set stack pointer */
 8028338:	20020000 	.word	0x20020000
  ldr r0, =_sdata         /* SRAM data start */
 802833c:	20000000 	.word	0x20000000
  ldr r1, =_edata         /* SRAM data end */
 8028340:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata        /* Flash data start */
 8028344:	0803a864 	.word	0x0803a864
  ldr r0, =_sccmram       /* CCMRAM start */
 8028348:	10000000 	.word	0x10000000
  ldr r1, =_eccmram       /* CCMRAM end */
 802834c:	10000c88 	.word	0x10000c88
  ldr r2, =_siccmram      /* Flash CCMRAM data start */
 8028350:	0803a8e0 	.word	0x0803a8e0
  ldr r2, =_sbss          /* BSS start */
 8028354:	20000080 	.word	0x20000080
  ldr r4, =_ebss          /* BSS end */
 8028358:	2000459c 	.word	0x2000459c

0802835c <CAN2_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 802835c:	e7fe      	b.n	802835c <CAN2_RX0_IRQHandler>

0802835e <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 802835e:	b580      	push	{r7, lr}
 8028360:	b084      	sub	sp, #16
 8028362:	af00      	add	r7, sp, #0
 8028364:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8028366:	687b      	ldr	r3, [r7, #4]
 8028368:	2b00      	cmp	r3, #0
 802836a:	d105      	bne.n	8028378 <stm32_lock_acquire+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 802836c:	b672      	cpsid	i
}
 802836e:	bf00      	nop
 8028370:	f7ff fcba 	bl	8027ce8 <Error_Handler>
 8028374:	bf00      	nop
 8028376:	e7fd      	b.n	8028374 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8028378:	687b      	ldr	r3, [r7, #4]
 802837a:	7a1b      	ldrb	r3, [r3, #8]
 802837c:	2b01      	cmp	r3, #1
 802837e:	d905      	bls.n	802838c <stm32_lock_acquire+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 8028380:	b672      	cpsid	i
}
 8028382:	bf00      	nop
 8028384:	f7ff fcb0 	bl	8027ce8 <Error_Handler>
 8028388:	bf00      	nop
 802838a:	e7fd      	b.n	8028388 <stm32_lock_acquire+0x2a>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 802838c:	687b      	ldr	r3, [r7, #4]
 802838e:	7a1b      	ldrb	r3, [r3, #8]
 8028390:	1c5a      	adds	r2, r3, #1
 8028392:	b2d1      	uxtb	r1, r2
 8028394:	687a      	ldr	r2, [r7, #4]
 8028396:	7211      	strb	r1, [r2, #8]
 8028398:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 802839a:	f3ef 8211 	mrs	r2, BASEPRI
 802839e:	f04f 0310 	mov.w	r3, #16
 80283a2:	f383 8811 	msr	BASEPRI, r3
 80283a6:	f3bf 8f6f 	isb	sy
 80283aa:	f3bf 8f4f 	dsb	sy
 80283ae:	60fa      	str	r2, [r7, #12]
 80283b0:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80283b2:	68fa      	ldr	r2, [r7, #12]
 80283b4:	687b      	ldr	r3, [r7, #4]
 80283b6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 80283ba:	bf00      	nop
 80283bc:	3710      	adds	r7, #16
 80283be:	46bd      	mov	sp, r7
 80283c0:	bd80      	pop	{r7, pc}

080283c2 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 80283c2:	b580      	push	{r7, lr}
 80283c4:	b084      	sub	sp, #16
 80283c6:	af00      	add	r7, sp, #0
 80283c8:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80283ca:	687b      	ldr	r3, [r7, #4]
 80283cc:	2b00      	cmp	r3, #0
 80283ce:	d105      	bne.n	80283dc <stm32_lock_release+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 80283d0:	b672      	cpsid	i
}
 80283d2:	bf00      	nop
 80283d4:	f7ff fc88 	bl	8027ce8 <Error_Handler>
 80283d8:	bf00      	nop
 80283da:	e7fd      	b.n	80283d8 <stm32_lock_release+0x16>
  lock->nesting_level--;
 80283dc:	687b      	ldr	r3, [r7, #4]
 80283de:	7a1b      	ldrb	r3, [r3, #8]
 80283e0:	3b01      	subs	r3, #1
 80283e2:	b2da      	uxtb	r2, r3
 80283e4:	687b      	ldr	r3, [r7, #4]
 80283e6:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80283e8:	687b      	ldr	r3, [r7, #4]
 80283ea:	7a1b      	ldrb	r3, [r3, #8]
 80283ec:	2b01      	cmp	r3, #1
 80283ee:	d905      	bls.n	80283fc <stm32_lock_release+0x3a>
  __ASM volatile ("cpsid i" : : : "memory");
 80283f0:	b672      	cpsid	i
}
 80283f2:	bf00      	nop
 80283f4:	f7ff fc78 	bl	8027ce8 <Error_Handler>
 80283f8:	bf00      	nop
 80283fa:	e7fd      	b.n	80283f8 <stm32_lock_release+0x36>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 80283fc:	687b      	ldr	r3, [r7, #4]
 80283fe:	7a1b      	ldrb	r3, [r3, #8]
 8028400:	461a      	mov	r2, r3
 8028402:	687b      	ldr	r3, [r7, #4]
 8028404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8028408:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 802840a:	68fb      	ldr	r3, [r7, #12]
 802840c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8028410:	bf00      	nop
}
 8028412:	bf00      	nop
 8028414:	3710      	adds	r7, #16
 8028416:	46bd      	mov	sp, r7
 8028418:	bd80      	pop	{r7, pc}

0802841a <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 802841a:	b580      	push	{r7, lr}
 802841c:	b082      	sub	sp, #8
 802841e:	af00      	add	r7, sp, #0
 8028420:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8028422:	687b      	ldr	r3, [r7, #4]
 8028424:	2b00      	cmp	r3, #0
 8028426:	d105      	bne.n	8028434 <__retarget_lock_acquire_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8028428:	b672      	cpsid	i
}
 802842a:	bf00      	nop
 802842c:	f7ff fc5c 	bl	8027ce8 <Error_Handler>
 8028430:	bf00      	nop
 8028432:	e7fd      	b.n	8028430 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8028434:	687b      	ldr	r3, [r7, #4]
 8028436:	4618      	mov	r0, r3
 8028438:	f7ff ff91 	bl	802835e <stm32_lock_acquire>
}
 802843c:	bf00      	nop
 802843e:	3708      	adds	r7, #8
 8028440:	46bd      	mov	sp, r7
 8028442:	bd80      	pop	{r7, pc}

08028444 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8028444:	b580      	push	{r7, lr}
 8028446:	b082      	sub	sp, #8
 8028448:	af00      	add	r7, sp, #0
 802844a:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 802844c:	687b      	ldr	r3, [r7, #4]
 802844e:	2b00      	cmp	r3, #0
 8028450:	d105      	bne.n	802845e <__retarget_lock_release_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8028452:	b672      	cpsid	i
}
 8028454:	bf00      	nop
 8028456:	f7ff fc47 	bl	8027ce8 <Error_Handler>
 802845a:	bf00      	nop
 802845c:	e7fd      	b.n	802845a <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 802845e:	687b      	ldr	r3, [r7, #4]
 8028460:	4618      	mov	r0, r3
 8028462:	f7ff ffae 	bl	80283c2 <stm32_lock_release>
}
 8028466:	bf00      	nop
 8028468:	3708      	adds	r7, #8
 802846a:	46bd      	mov	sp, r7
 802846c:	bd80      	pop	{r7, pc}
	...

08028470 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8028470:	b580      	push	{r7, lr}
 8028472:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8028474:	4b0e      	ldr	r3, [pc, #56]	@ (80284b0 <HAL_Init+0x40>)
 8028476:	681b      	ldr	r3, [r3, #0]
 8028478:	4a0d      	ldr	r2, [pc, #52]	@ (80284b0 <HAL_Init+0x40>)
 802847a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 802847e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8028480:	4b0b      	ldr	r3, [pc, #44]	@ (80284b0 <HAL_Init+0x40>)
 8028482:	681b      	ldr	r3, [r3, #0]
 8028484:	4a0a      	ldr	r2, [pc, #40]	@ (80284b0 <HAL_Init+0x40>)
 8028486:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 802848a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 802848c:	4b08      	ldr	r3, [pc, #32]	@ (80284b0 <HAL_Init+0x40>)
 802848e:	681b      	ldr	r3, [r3, #0]
 8028490:	4a07      	ldr	r2, [pc, #28]	@ (80284b0 <HAL_Init+0x40>)
 8028492:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8028496:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8028498:	2003      	movs	r0, #3
 802849a:	f002 fad5 	bl	802aa48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 802849e:	200f      	movs	r0, #15
 80284a0:	f7ff fd18 	bl	8027ed4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80284a4:	f7ff fccc 	bl	8027e40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80284a8:	2300      	movs	r3, #0
}
 80284aa:	4618      	mov	r0, r3
 80284ac:	bd80      	pop	{r7, pc}
 80284ae:	bf00      	nop
 80284b0:	40023c00 	.word	0x40023c00

080284b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80284b4:	b480      	push	{r7}
 80284b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80284b8:	4b06      	ldr	r3, [pc, #24]	@ (80284d4 <HAL_IncTick+0x20>)
 80284ba:	781b      	ldrb	r3, [r3, #0]
 80284bc:	461a      	mov	r2, r3
 80284be:	4b06      	ldr	r3, [pc, #24]	@ (80284d8 <HAL_IncTick+0x24>)
 80284c0:	681b      	ldr	r3, [r3, #0]
 80284c2:	4413      	add	r3, r2
 80284c4:	4a04      	ldr	r2, [pc, #16]	@ (80284d8 <HAL_IncTick+0x24>)
 80284c6:	6013      	str	r3, [r2, #0]
}
 80284c8:	bf00      	nop
 80284ca:	46bd      	mov	sp, r7
 80284cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80284d0:	4770      	bx	lr
 80284d2:	bf00      	nop
 80284d4:	20000024 	.word	0x20000024
 80284d8:	20000778 	.word	0x20000778

080284dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80284dc:	b480      	push	{r7}
 80284de:	af00      	add	r7, sp, #0
  return uwTick;
 80284e0:	4b03      	ldr	r3, [pc, #12]	@ (80284f0 <HAL_GetTick+0x14>)
 80284e2:	681b      	ldr	r3, [r3, #0]
}
 80284e4:	4618      	mov	r0, r3
 80284e6:	46bd      	mov	sp, r7
 80284e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80284ec:	4770      	bx	lr
 80284ee:	bf00      	nop
 80284f0:	20000778 	.word	0x20000778

080284f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80284f4:	b580      	push	{r7, lr}
 80284f6:	b084      	sub	sp, #16
 80284f8:	af00      	add	r7, sp, #0
 80284fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80284fc:	f7ff ffee 	bl	80284dc <HAL_GetTick>
 8028500:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8028502:	687b      	ldr	r3, [r7, #4]
 8028504:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8028506:	68fb      	ldr	r3, [r7, #12]
 8028508:	f1b3 3fff 	cmp.w	r3, #4294967295
 802850c:	d005      	beq.n	802851a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 802850e:	4b0a      	ldr	r3, [pc, #40]	@ (8028538 <HAL_Delay+0x44>)
 8028510:	781b      	ldrb	r3, [r3, #0]
 8028512:	461a      	mov	r2, r3
 8028514:	68fb      	ldr	r3, [r7, #12]
 8028516:	4413      	add	r3, r2
 8028518:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 802851a:	bf00      	nop
 802851c:	f7ff ffde 	bl	80284dc <HAL_GetTick>
 8028520:	4602      	mov	r2, r0
 8028522:	68bb      	ldr	r3, [r7, #8]
 8028524:	1ad3      	subs	r3, r2, r3
 8028526:	68fa      	ldr	r2, [r7, #12]
 8028528:	429a      	cmp	r2, r3
 802852a:	d8f7      	bhi.n	802851c <HAL_Delay+0x28>
  {
  }
}
 802852c:	bf00      	nop
 802852e:	bf00      	nop
 8028530:	3710      	adds	r7, #16
 8028532:	46bd      	mov	sp, r7
 8028534:	bd80      	pop	{r7, pc}
 8028536:	bf00      	nop
 8028538:	20000024 	.word	0x20000024

0802853c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 802853c:	b580      	push	{r7, lr}
 802853e:	b084      	sub	sp, #16
 8028540:	af00      	add	r7, sp, #0
 8028542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8028544:	2300      	movs	r3, #0
 8028546:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8028548:	687b      	ldr	r3, [r7, #4]
 802854a:	2b00      	cmp	r3, #0
 802854c:	d101      	bne.n	8028552 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 802854e:	2301      	movs	r3, #1
 8028550:	e177      	b.n	8028842 <HAL_ADC_Init+0x306>
  }

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8028552:	687b      	ldr	r3, [r7, #4]
 8028554:	681b      	ldr	r3, [r3, #0]
 8028556:	4a93      	ldr	r2, [pc, #588]	@ (80287a4 <HAL_ADC_Init+0x268>)
 8028558:	4293      	cmp	r3, r2
 802855a:	d00e      	beq.n	802857a <HAL_ADC_Init+0x3e>
 802855c:	687b      	ldr	r3, [r7, #4]
 802855e:	681b      	ldr	r3, [r3, #0]
 8028560:	4a91      	ldr	r2, [pc, #580]	@ (80287a8 <HAL_ADC_Init+0x26c>)
 8028562:	4293      	cmp	r3, r2
 8028564:	d009      	beq.n	802857a <HAL_ADC_Init+0x3e>
 8028566:	687b      	ldr	r3, [r7, #4]
 8028568:	681b      	ldr	r3, [r3, #0]
 802856a:	4a90      	ldr	r2, [pc, #576]	@ (80287ac <HAL_ADC_Init+0x270>)
 802856c:	4293      	cmp	r3, r2
 802856e:	d004      	beq.n	802857a <HAL_ADC_Init+0x3e>
 8028570:	f44f 71a1 	mov.w	r1, #322	@ 0x142
 8028574:	488e      	ldr	r0, [pc, #568]	@ (80287b0 <HAL_ADC_Init+0x274>)
 8028576:	f7ff fbbe 	bl	8027cf6 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 802857a:	687b      	ldr	r3, [r7, #4]
 802857c:	685b      	ldr	r3, [r3, #4]
 802857e:	2b00      	cmp	r3, #0
 8028580:	d013      	beq.n	80285aa <HAL_ADC_Init+0x6e>
 8028582:	687b      	ldr	r3, [r7, #4]
 8028584:	685b      	ldr	r3, [r3, #4]
 8028586:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 802858a:	d00e      	beq.n	80285aa <HAL_ADC_Init+0x6e>
 802858c:	687b      	ldr	r3, [r7, #4]
 802858e:	685b      	ldr	r3, [r3, #4]
 8028590:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8028594:	d009      	beq.n	80285aa <HAL_ADC_Init+0x6e>
 8028596:	687b      	ldr	r3, [r7, #4]
 8028598:	685b      	ldr	r3, [r3, #4]
 802859a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 802859e:	d004      	beq.n	80285aa <HAL_ADC_Init+0x6e>
 80285a0:	f240 1143 	movw	r1, #323	@ 0x143
 80285a4:	4882      	ldr	r0, [pc, #520]	@ (80287b0 <HAL_ADC_Init+0x274>)
 80285a6:	f7ff fba6 	bl	8027cf6 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 80285aa:	687b      	ldr	r3, [r7, #4]
 80285ac:	689b      	ldr	r3, [r3, #8]
 80285ae:	2b00      	cmp	r3, #0
 80285b0:	d013      	beq.n	80285da <HAL_ADC_Init+0x9e>
 80285b2:	687b      	ldr	r3, [r7, #4]
 80285b4:	689b      	ldr	r3, [r3, #8]
 80285b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80285ba:	d00e      	beq.n	80285da <HAL_ADC_Init+0x9e>
 80285bc:	687b      	ldr	r3, [r7, #4]
 80285be:	689b      	ldr	r3, [r3, #8]
 80285c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80285c4:	d009      	beq.n	80285da <HAL_ADC_Init+0x9e>
 80285c6:	687b      	ldr	r3, [r7, #4]
 80285c8:	689b      	ldr	r3, [r3, #8]
 80285ca:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80285ce:	d004      	beq.n	80285da <HAL_ADC_Init+0x9e>
 80285d0:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 80285d4:	4876      	ldr	r0, [pc, #472]	@ (80287b0 <HAL_ADC_Init+0x274>)
 80285d6:	f7ff fb8e 	bl	8027cf6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 80285da:	687b      	ldr	r3, [r7, #4]
 80285dc:	691b      	ldr	r3, [r3, #16]
 80285de:	2b00      	cmp	r3, #0
 80285e0:	d008      	beq.n	80285f4 <HAL_ADC_Init+0xb8>
 80285e2:	687b      	ldr	r3, [r7, #4]
 80285e4:	691b      	ldr	r3, [r3, #16]
 80285e6:	2b01      	cmp	r3, #1
 80285e8:	d004      	beq.n	80285f4 <HAL_ADC_Init+0xb8>
 80285ea:	f240 1145 	movw	r1, #325	@ 0x145
 80285ee:	4870      	ldr	r0, [pc, #448]	@ (80287b0 <HAL_ADC_Init+0x274>)
 80285f0:	f7ff fb81 	bl	8027cf6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80285f4:	687b      	ldr	r3, [r7, #4]
 80285f6:	7e1b      	ldrb	r3, [r3, #24]
 80285f8:	2b00      	cmp	r3, #0
 80285fa:	d008      	beq.n	802860e <HAL_ADC_Init+0xd2>
 80285fc:	687b      	ldr	r3, [r7, #4]
 80285fe:	7e1b      	ldrb	r3, [r3, #24]
 8028600:	2b01      	cmp	r3, #1
 8028602:	d004      	beq.n	802860e <HAL_ADC_Init+0xd2>
 8028604:	f44f 71a3 	mov.w	r1, #326	@ 0x146
 8028608:	4869      	ldr	r0, [pc, #420]	@ (80287b0 <HAL_ADC_Init+0x274>)
 802860a:	f7ff fb74 	bl	8027cf6 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 802860e:	687b      	ldr	r3, [r7, #4]
 8028610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8028612:	2b00      	cmp	r3, #0
 8028614:	d054      	beq.n	80286c0 <HAL_ADC_Init+0x184>
 8028616:	687b      	ldr	r3, [r7, #4]
 8028618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802861a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 802861e:	d04f      	beq.n	80286c0 <HAL_ADC_Init+0x184>
 8028620:	687b      	ldr	r3, [r7, #4]
 8028622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8028624:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8028628:	d04a      	beq.n	80286c0 <HAL_ADC_Init+0x184>
 802862a:	687b      	ldr	r3, [r7, #4]
 802862c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802862e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8028632:	d045      	beq.n	80286c0 <HAL_ADC_Init+0x184>
 8028634:	687b      	ldr	r3, [r7, #4]
 8028636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8028638:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 802863c:	d040      	beq.n	80286c0 <HAL_ADC_Init+0x184>
 802863e:	687b      	ldr	r3, [r7, #4]
 8028640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8028642:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8028646:	d03b      	beq.n	80286c0 <HAL_ADC_Init+0x184>
 8028648:	687b      	ldr	r3, [r7, #4]
 802864a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802864c:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 8028650:	d036      	beq.n	80286c0 <HAL_ADC_Init+0x184>
 8028652:	687b      	ldr	r3, [r7, #4]
 8028654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8028656:	f1b3 6fe0 	cmp.w	r3, #117440512	@ 0x7000000
 802865a:	d031      	beq.n	80286c0 <HAL_ADC_Init+0x184>
 802865c:	687b      	ldr	r3, [r7, #4]
 802865e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8028660:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8028664:	d02c      	beq.n	80286c0 <HAL_ADC_Init+0x184>
 8028666:	687b      	ldr	r3, [r7, #4]
 8028668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802866a:	f1b3 6f10 	cmp.w	r3, #150994944	@ 0x9000000
 802866e:	d027      	beq.n	80286c0 <HAL_ADC_Init+0x184>
 8028670:	687b      	ldr	r3, [r7, #4]
 8028672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8028674:	f1b3 6f20 	cmp.w	r3, #167772160	@ 0xa000000
 8028678:	d022      	beq.n	80286c0 <HAL_ADC_Init+0x184>
 802867a:	687b      	ldr	r3, [r7, #4]
 802867c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802867e:	f1b3 6f30 	cmp.w	r3, #184549376	@ 0xb000000
 8028682:	d01d      	beq.n	80286c0 <HAL_ADC_Init+0x184>
 8028684:	687b      	ldr	r3, [r7, #4]
 8028686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8028688:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 802868c:	d018      	beq.n	80286c0 <HAL_ADC_Init+0x184>
 802868e:	687b      	ldr	r3, [r7, #4]
 8028690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8028692:	f1b3 6f50 	cmp.w	r3, #218103808	@ 0xd000000
 8028696:	d013      	beq.n	80286c0 <HAL_ADC_Init+0x184>
 8028698:	687b      	ldr	r3, [r7, #4]
 802869a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802869c:	f1b3 6f60 	cmp.w	r3, #234881024	@ 0xe000000
 80286a0:	d00e      	beq.n	80286c0 <HAL_ADC_Init+0x184>
 80286a2:	687b      	ldr	r3, [r7, #4]
 80286a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80286a6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80286aa:	d009      	beq.n	80286c0 <HAL_ADC_Init+0x184>
 80286ac:	687b      	ldr	r3, [r7, #4]
 80286ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80286b0:	4a40      	ldr	r2, [pc, #256]	@ (80287b4 <HAL_ADC_Init+0x278>)
 80286b2:	4293      	cmp	r3, r2
 80286b4:	d004      	beq.n	80286c0 <HAL_ADC_Init+0x184>
 80286b6:	f240 1147 	movw	r1, #327	@ 0x147
 80286ba:	483d      	ldr	r0, [pc, #244]	@ (80287b0 <HAL_ADC_Init+0x274>)
 80286bc:	f7ff fb1b 	bl	8027cf6 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 80286c0:	687b      	ldr	r3, [r7, #4]
 80286c2:	68db      	ldr	r3, [r3, #12]
 80286c4:	2b00      	cmp	r3, #0
 80286c6:	d009      	beq.n	80286dc <HAL_ADC_Init+0x1a0>
 80286c8:	687b      	ldr	r3, [r7, #4]
 80286ca:	68db      	ldr	r3, [r3, #12]
 80286cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80286d0:	d004      	beq.n	80286dc <HAL_ADC_Init+0x1a0>
 80286d2:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 80286d6:	4836      	ldr	r0, [pc, #216]	@ (80287b0 <HAL_ADC_Init+0x274>)
 80286d8:	f7ff fb0d 	bl	8027cf6 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80286dc:	687b      	ldr	r3, [r7, #4]
 80286de:	69db      	ldr	r3, [r3, #28]
 80286e0:	2b00      	cmp	r3, #0
 80286e2:	d003      	beq.n	80286ec <HAL_ADC_Init+0x1b0>
 80286e4:	687b      	ldr	r3, [r7, #4]
 80286e6:	69db      	ldr	r3, [r3, #28]
 80286e8:	2b10      	cmp	r3, #16
 80286ea:	d904      	bls.n	80286f6 <HAL_ADC_Init+0x1ba>
 80286ec:	f240 1149 	movw	r1, #329	@ 0x149
 80286f0:	482f      	ldr	r0, [pc, #188]	@ (80287b0 <HAL_ADC_Init+0x274>)
 80286f2:	f7ff fb00 	bl	8027cf6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80286f6:	687b      	ldr	r3, [r7, #4]
 80286f8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80286fc:	2b00      	cmp	r3, #0
 80286fe:	d009      	beq.n	8028714 <HAL_ADC_Init+0x1d8>
 8028700:	687b      	ldr	r3, [r7, #4]
 8028702:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8028706:	2b01      	cmp	r3, #1
 8028708:	d004      	beq.n	8028714 <HAL_ADC_Init+0x1d8>
 802870a:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 802870e:	4828      	ldr	r0, [pc, #160]	@ (80287b0 <HAL_ADC_Init+0x274>)
 8028710:	f7ff faf1 	bl	8027cf6 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8028714:	687b      	ldr	r3, [r7, #4]
 8028716:	695b      	ldr	r3, [r3, #20]
 8028718:	2b01      	cmp	r3, #1
 802871a:	d00c      	beq.n	8028736 <HAL_ADC_Init+0x1fa>
 802871c:	687b      	ldr	r3, [r7, #4]
 802871e:	695b      	ldr	r3, [r3, #20]
 8028720:	2b00      	cmp	r3, #0
 8028722:	d008      	beq.n	8028736 <HAL_ADC_Init+0x1fa>
 8028724:	687b      	ldr	r3, [r7, #4]
 8028726:	695b      	ldr	r3, [r3, #20]
 8028728:	2b02      	cmp	r3, #2
 802872a:	d004      	beq.n	8028736 <HAL_ADC_Init+0x1fa>
 802872c:	f240 114b 	movw	r1, #331	@ 0x14b
 8028730:	481f      	ldr	r0, [pc, #124]	@ (80287b0 <HAL_ADC_Init+0x274>)
 8028732:	f7ff fae0 	bl	8027cf6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8028736:	687b      	ldr	r3, [r7, #4]
 8028738:	f893 3020 	ldrb.w	r3, [r3, #32]
 802873c:	2b00      	cmp	r3, #0
 802873e:	d009      	beq.n	8028754 <HAL_ADC_Init+0x218>
 8028740:	687b      	ldr	r3, [r7, #4]
 8028742:	f893 3020 	ldrb.w	r3, [r3, #32]
 8028746:	2b01      	cmp	r3, #1
 8028748:	d004      	beq.n	8028754 <HAL_ADC_Init+0x218>
 802874a:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 802874e:	4818      	ldr	r0, [pc, #96]	@ (80287b0 <HAL_ADC_Init+0x274>)
 8028750:	f7ff fad1 	bl	8027cf6 <assert_failed>

  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8028754:	687b      	ldr	r3, [r7, #4]
 8028756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8028758:	4a16      	ldr	r2, [pc, #88]	@ (80287b4 <HAL_ADC_Init+0x278>)
 802875a:	4293      	cmp	r3, r2
 802875c:	d017      	beq.n	802878e <HAL_ADC_Init+0x252>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 802875e:	687b      	ldr	r3, [r7, #4]
 8028760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028762:	2b00      	cmp	r3, #0
 8028764:	d013      	beq.n	802878e <HAL_ADC_Init+0x252>
 8028766:	687b      	ldr	r3, [r7, #4]
 8028768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802876a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 802876e:	d00e      	beq.n	802878e <HAL_ADC_Init+0x252>
 8028770:	687b      	ldr	r3, [r7, #4]
 8028772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028774:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8028778:	d009      	beq.n	802878e <HAL_ADC_Init+0x252>
 802877a:	687b      	ldr	r3, [r7, #4]
 802877c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802877e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8028782:	d004      	beq.n	802878e <HAL_ADC_Init+0x252>
 8028784:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 8028788:	4809      	ldr	r0, [pc, #36]	@ (80287b0 <HAL_ADC_Init+0x274>)
 802878a:	f7ff fab4 	bl	8027cf6 <assert_failed>
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 802878e:	687b      	ldr	r3, [r7, #4]
 8028790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8028792:	2b00      	cmp	r3, #0
 8028794:	d12f      	bne.n	80287f6 <HAL_ADC_Init+0x2ba>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8028796:	687b      	ldr	r3, [r7, #4]
 8028798:	4a07      	ldr	r2, [pc, #28]	@ (80287b8 <HAL_ADC_Init+0x27c>)
 802879a:	649a      	str	r2, [r3, #72]	@ 0x48
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 802879c:	687b      	ldr	r3, [r7, #4]
 802879e:	4a07      	ldr	r2, [pc, #28]	@ (80287bc <HAL_ADC_Init+0x280>)
 80287a0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80287a2:	e00d      	b.n	80287c0 <HAL_ADC_Init+0x284>
 80287a4:	40012000 	.word	0x40012000
 80287a8:	40012100 	.word	0x40012100
 80287ac:	40012200 	.word	0x40012200
 80287b0:	080380f8 	.word	0x080380f8
 80287b4:	0f000001 	.word	0x0f000001
 80287b8:	08028e99 	.word	0x08028e99
 80287bc:	08028ead 	.word	0x08028ead
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 80287c0:	687b      	ldr	r3, [r7, #4]
 80287c2:	4a22      	ldr	r2, [pc, #136]	@ (802884c <HAL_ADC_Init+0x310>)
 80287c4:	651a      	str	r2, [r3, #80]	@ 0x50
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 80287c6:	687b      	ldr	r3, [r7, #4]
 80287c8:	4a21      	ldr	r2, [pc, #132]	@ (8028850 <HAL_ADC_Init+0x314>)
 80287ca:	655a      	str	r2, [r3, #84]	@ 0x54
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 80287cc:	687b      	ldr	r3, [r7, #4]
 80287ce:	4a21      	ldr	r2, [pc, #132]	@ (8028854 <HAL_ADC_Init+0x318>)
 80287d0:	659a      	str	r2, [r3, #88]	@ 0x58
    if (hadc->MspInitCallback == NULL)
 80287d2:	687b      	ldr	r3, [r7, #4]
 80287d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80287d6:	2b00      	cmp	r3, #0
 80287d8:	d102      	bne.n	80287e0 <HAL_ADC_Init+0x2a4>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 80287da:	687b      	ldr	r3, [r7, #4]
 80287dc:	4a1e      	ldr	r2, [pc, #120]	@ (8028858 <HAL_ADC_Init+0x31c>)
 80287de:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 80287e0:	687b      	ldr	r3, [r7, #4]
 80287e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80287e4:	6878      	ldr	r0, [r7, #4]
 80287e6:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80287e8:	687b      	ldr	r3, [r7, #4]
 80287ea:	2200      	movs	r2, #0
 80287ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80287ee:	687b      	ldr	r3, [r7, #4]
 80287f0:	2200      	movs	r2, #0
 80287f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80287f6:	687b      	ldr	r3, [r7, #4]
 80287f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80287fa:	f003 0310 	and.w	r3, r3, #16
 80287fe:	2b00      	cmp	r3, #0
 8028800:	d118      	bne.n	8028834 <HAL_ADC_Init+0x2f8>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8028802:	687b      	ldr	r3, [r7, #4]
 8028804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8028806:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 802880a:	f023 0302 	bic.w	r3, r3, #2
 802880e:	f043 0202 	orr.w	r2, r3, #2
 8028812:	687b      	ldr	r3, [r7, #4]
 8028814:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8028816:	6878      	ldr	r0, [r7, #4]
 8028818:	f000 fcc6 	bl	80291a8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 802881c:	687b      	ldr	r3, [r7, #4]
 802881e:	2200      	movs	r2, #0
 8028820:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8028822:	687b      	ldr	r3, [r7, #4]
 8028824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8028826:	f023 0303 	bic.w	r3, r3, #3
 802882a:	f043 0201 	orr.w	r2, r3, #1
 802882e:	687b      	ldr	r3, [r7, #4]
 8028830:	641a      	str	r2, [r3, #64]	@ 0x40
 8028832:	e001      	b.n	8028838 <HAL_ADC_Init+0x2fc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8028834:	2301      	movs	r3, #1
 8028836:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8028838:	687b      	ldr	r3, [r7, #4]
 802883a:	2200      	movs	r2, #0
 802883c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8028840:	7bfb      	ldrb	r3, [r7, #15]
}
 8028842:	4618      	mov	r0, r3
 8028844:	3710      	adds	r7, #16
 8028846:	46bd      	mov	sp, r7
 8028848:	bd80      	pop	{r7, pc}
 802884a:	bf00      	nop
 802884c:	08028ec1 	.word	0x08028ec1
 8028850:	0802563d 	.word	0x0802563d
 8028854:	080294c9 	.word	0x080294c9
 8028858:	08026a15 	.word	0x08026a15

0802885c <HAL_ADC_DeInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 802885c:	b580      	push	{r7, lr}
 802885e:	b084      	sub	sp, #16
 8028860:	af00      	add	r7, sp, #0
 8028862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8028864:	2300      	movs	r3, #0
 8028866:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8028868:	687b      	ldr	r3, [r7, #4]
 802886a:	2b00      	cmp	r3, #0
 802886c:	d101      	bne.n	8028872 <HAL_ADC_DeInit+0x16>
  {
    return HAL_ERROR;
 802886e:	2301      	movs	r3, #1
 8028870:	e03e      	b.n	80288f0 <HAL_ADC_DeInit+0x94>
  }

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8028872:	687b      	ldr	r3, [r7, #4]
 8028874:	681b      	ldr	r3, [r3, #0]
 8028876:	4a20      	ldr	r2, [pc, #128]	@ (80288f8 <HAL_ADC_DeInit+0x9c>)
 8028878:	4293      	cmp	r3, r2
 802887a:	d00e      	beq.n	802889a <HAL_ADC_DeInit+0x3e>
 802887c:	687b      	ldr	r3, [r7, #4]
 802887e:	681b      	ldr	r3, [r3, #0]
 8028880:	4a1e      	ldr	r2, [pc, #120]	@ (80288fc <HAL_ADC_DeInit+0xa0>)
 8028882:	4293      	cmp	r3, r2
 8028884:	d009      	beq.n	802889a <HAL_ADC_DeInit+0x3e>
 8028886:	687b      	ldr	r3, [r7, #4]
 8028888:	681b      	ldr	r3, [r3, #0]
 802888a:	4a1d      	ldr	r2, [pc, #116]	@ (8028900 <HAL_ADC_DeInit+0xa4>)
 802888c:	4293      	cmp	r3, r2
 802888e:	d004      	beq.n	802889a <HAL_ADC_DeInit+0x3e>
 8028890:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
 8028894:	481b      	ldr	r0, [pc, #108]	@ (8028904 <HAL_ADC_DeInit+0xa8>)
 8028896:	f7ff fa2e 	bl	8027cf6 <assert_failed>

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 802889a:	687b      	ldr	r3, [r7, #4]
 802889c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802889e:	f043 0202 	orr.w	r2, r3, #2
 80288a2:	687b      	ldr	r3, [r7, #4]
 80288a4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80288a6:	687b      	ldr	r3, [r7, #4]
 80288a8:	681b      	ldr	r3, [r3, #0]
 80288aa:	689a      	ldr	r2, [r3, #8]
 80288ac:	687b      	ldr	r3, [r7, #4]
 80288ae:	681b      	ldr	r3, [r3, #0]
 80288b0:	f022 0201 	bic.w	r2, r2, #1
 80288b4:	609a      	str	r2, [r3, #8]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80288b6:	687b      	ldr	r3, [r7, #4]
 80288b8:	681b      	ldr	r3, [r3, #0]
 80288ba:	689b      	ldr	r3, [r3, #8]
 80288bc:	f003 0301 	and.w	r3, r3, #1
 80288c0:	2b00      	cmp	r3, #0
 80288c2:	d110      	bne.n	80288e6 <HAL_ADC_DeInit+0x8a>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    if (hadc->MspDeInitCallback == NULL)
 80288c4:	687b      	ldr	r3, [r7, #4]
 80288c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80288c8:	2b00      	cmp	r3, #0
 80288ca:	d102      	bne.n	80288d2 <HAL_ADC_DeInit+0x76>
    {
      hadc->MspDeInitCallback = HAL_ADC_MspDeInit; /* Legacy weak MspDeInit  */
 80288cc:	687b      	ldr	r3, [r7, #4]
 80288ce:	4a0e      	ldr	r2, [pc, #56]	@ (8028908 <HAL_ADC_DeInit+0xac>)
 80288d0:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* DeInit the low level hardware: RCC clock, NVIC */
    hadc->MspDeInitCallback(hadc);
 80288d2:	687b      	ldr	r3, [r7, #4]
 80288d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80288d6:	6878      	ldr	r0, [r7, #4]
 80288d8:	4798      	blx	r3
    /* DeInit the low level hardware: RCC clock, NVIC */
    HAL_ADC_MspDeInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80288da:	687b      	ldr	r3, [r7, #4]
 80288dc:	2200      	movs	r2, #0
 80288de:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 80288e0:	687b      	ldr	r3, [r7, #4]
 80288e2:	2200      	movs	r2, #0
 80288e4:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80288e6:	687b      	ldr	r3, [r7, #4]
 80288e8:	2200      	movs	r2, #0
 80288ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80288ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80288f0:	4618      	mov	r0, r3
 80288f2:	3710      	adds	r7, #16
 80288f4:	46bd      	mov	sp, r7
 80288f6:	bd80      	pop	{r7, pc}
 80288f8:	40012000 	.word	0x40012000
 80288fc:	40012100 	.word	0x40012100
 8028900:	40012200 	.word	0x40012200
 8028904:	080380f8 	.word	0x080380f8
 8028908:	08026acd 	.word	0x08026acd

0802890c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 802890c:	b580      	push	{r7, lr}
 802890e:	b082      	sub	sp, #8
 8028910:	af00      	add	r7, sp, #0
 8028912:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8028914:	687b      	ldr	r3, [r7, #4]
 8028916:	681b      	ldr	r3, [r3, #0]
 8028918:	4a1f      	ldr	r2, [pc, #124]	@ (8028998 <HAL_ADC_Stop+0x8c>)
 802891a:	4293      	cmp	r3, r2
 802891c:	d00e      	beq.n	802893c <HAL_ADC_Stop+0x30>
 802891e:	687b      	ldr	r3, [r7, #4]
 8028920:	681b      	ldr	r3, [r3, #0]
 8028922:	4a1e      	ldr	r2, [pc, #120]	@ (802899c <HAL_ADC_Stop+0x90>)
 8028924:	4293      	cmp	r3, r2
 8028926:	d009      	beq.n	802893c <HAL_ADC_Stop+0x30>
 8028928:	687b      	ldr	r3, [r7, #4]
 802892a:	681b      	ldr	r3, [r3, #0]
 802892c:	4a1c      	ldr	r2, [pc, #112]	@ (80289a0 <HAL_ADC_Stop+0x94>)
 802892e:	4293      	cmp	r3, r2
 8028930:	d004      	beq.n	802893c <HAL_ADC_Stop+0x30>
 8028932:	f240 314a 	movw	r1, #842	@ 0x34a
 8028936:	481b      	ldr	r0, [pc, #108]	@ (80289a4 <HAL_ADC_Stop+0x98>)
 8028938:	f7ff f9dd 	bl	8027cf6 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hadc);
 802893c:	687b      	ldr	r3, [r7, #4]
 802893e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8028942:	2b01      	cmp	r3, #1
 8028944:	d101      	bne.n	802894a <HAL_ADC_Stop+0x3e>
 8028946:	2302      	movs	r3, #2
 8028948:	e021      	b.n	802898e <HAL_ADC_Stop+0x82>
 802894a:	687b      	ldr	r3, [r7, #4]
 802894c:	2201      	movs	r2, #1
 802894e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8028952:	687b      	ldr	r3, [r7, #4]
 8028954:	681b      	ldr	r3, [r3, #0]
 8028956:	689a      	ldr	r2, [r3, #8]
 8028958:	687b      	ldr	r3, [r7, #4]
 802895a:	681b      	ldr	r3, [r3, #0]
 802895c:	f022 0201 	bic.w	r2, r2, #1
 8028960:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8028962:	687b      	ldr	r3, [r7, #4]
 8028964:	681b      	ldr	r3, [r3, #0]
 8028966:	689b      	ldr	r3, [r3, #8]
 8028968:	f003 0301 	and.w	r3, r3, #1
 802896c:	2b00      	cmp	r3, #0
 802896e:	d109      	bne.n	8028984 <HAL_ADC_Stop+0x78>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8028970:	687b      	ldr	r3, [r7, #4]
 8028972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8028974:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8028978:	f023 0301 	bic.w	r3, r3, #1
 802897c:	f043 0201 	orr.w	r2, r3, #1
 8028980:	687b      	ldr	r3, [r7, #4]
 8028982:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8028984:	687b      	ldr	r3, [r7, #4]
 8028986:	2200      	movs	r2, #0
 8028988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 802898c:	2300      	movs	r3, #0
}
 802898e:	4618      	mov	r0, r3
 8028990:	3708      	adds	r7, #8
 8028992:	46bd      	mov	sp, r7
 8028994:	bd80      	pop	{r7, pc}
 8028996:	bf00      	nop
 8028998:	40012000 	.word	0x40012000
 802899c:	40012100 	.word	0x40012100
 80289a0:	40012200 	.word	0x40012200
 80289a4:	080380f8 	.word	0x080380f8

080289a8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80289a8:	b580      	push	{r7, lr}
 80289aa:	b086      	sub	sp, #24
 80289ac:	af00      	add	r7, sp, #0
 80289ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80289b0:	2300      	movs	r3, #0
 80289b2:	617b      	str	r3, [r7, #20]
 80289b4:	2300      	movs	r3, #0
 80289b6:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80289b8:	687b      	ldr	r3, [r7, #4]
 80289ba:	681b      	ldr	r3, [r3, #0]
 80289bc:	681b      	ldr	r3, [r3, #0]
 80289be:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80289c0:	687b      	ldr	r3, [r7, #4]
 80289c2:	681b      	ldr	r3, [r3, #0]
 80289c4:	685b      	ldr	r3, [r3, #4]
 80289c6:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80289c8:	687b      	ldr	r3, [r7, #4]
 80289ca:	7e1b      	ldrb	r3, [r3, #24]
 80289cc:	2b00      	cmp	r3, #0
 80289ce:	d008      	beq.n	80289e2 <HAL_ADC_IRQHandler+0x3a>
 80289d0:	687b      	ldr	r3, [r7, #4]
 80289d2:	7e1b      	ldrb	r3, [r3, #24]
 80289d4:	2b01      	cmp	r3, #1
 80289d6:	d004      	beq.n	80289e2 <HAL_ADC_IRQHandler+0x3a>
 80289d8:	f240 41b7 	movw	r1, #1207	@ 0x4b7
 80289dc:	4892      	ldr	r0, [pc, #584]	@ (8028c28 <HAL_ADC_IRQHandler+0x280>)
 80289de:	f7ff f98a 	bl	8027cf6 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80289e2:	687b      	ldr	r3, [r7, #4]
 80289e4:	69db      	ldr	r3, [r3, #28]
 80289e6:	2b00      	cmp	r3, #0
 80289e8:	d003      	beq.n	80289f2 <HAL_ADC_IRQHandler+0x4a>
 80289ea:	687b      	ldr	r3, [r7, #4]
 80289ec:	69db      	ldr	r3, [r3, #28]
 80289ee:	2b10      	cmp	r3, #16
 80289f0:	d904      	bls.n	80289fc <HAL_ADC_IRQHandler+0x54>
 80289f2:	f44f 6197 	mov.w	r1, #1208	@ 0x4b8
 80289f6:	488c      	ldr	r0, [pc, #560]	@ (8028c28 <HAL_ADC_IRQHandler+0x280>)
 80289f8:	f7ff f97d 	bl	8027cf6 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 80289fc:	687b      	ldr	r3, [r7, #4]
 80289fe:	695b      	ldr	r3, [r3, #20]
 8028a00:	2b01      	cmp	r3, #1
 8028a02:	d00c      	beq.n	8028a1e <HAL_ADC_IRQHandler+0x76>
 8028a04:	687b      	ldr	r3, [r7, #4]
 8028a06:	695b      	ldr	r3, [r3, #20]
 8028a08:	2b00      	cmp	r3, #0
 8028a0a:	d008      	beq.n	8028a1e <HAL_ADC_IRQHandler+0x76>
 8028a0c:	687b      	ldr	r3, [r7, #4]
 8028a0e:	695b      	ldr	r3, [r3, #20]
 8028a10:	2b02      	cmp	r3, #2
 8028a12:	d004      	beq.n	8028a1e <HAL_ADC_IRQHandler+0x76>
 8028a14:	f240 41b9 	movw	r1, #1209	@ 0x4b9
 8028a18:	4883      	ldr	r0, [pc, #524]	@ (8028c28 <HAL_ADC_IRQHandler+0x280>)
 8028a1a:	f7ff f96c 	bl	8027cf6 <assert_failed>

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8028a1e:	68fb      	ldr	r3, [r7, #12]
 8028a20:	f003 0302 	and.w	r3, r3, #2
 8028a24:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8028a26:	68bb      	ldr	r3, [r7, #8]
 8028a28:	f003 0320 	and.w	r3, r3, #32
 8028a2c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8028a2e:	697b      	ldr	r3, [r7, #20]
 8028a30:	2b00      	cmp	r3, #0
 8028a32:	d04a      	beq.n	8028aca <HAL_ADC_IRQHandler+0x122>
 8028a34:	693b      	ldr	r3, [r7, #16]
 8028a36:	2b00      	cmp	r3, #0
 8028a38:	d047      	beq.n	8028aca <HAL_ADC_IRQHandler+0x122>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8028a3a:	687b      	ldr	r3, [r7, #4]
 8028a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8028a3e:	f003 0310 	and.w	r3, r3, #16
 8028a42:	2b00      	cmp	r3, #0
 8028a44:	d105      	bne.n	8028a52 <HAL_ADC_IRQHandler+0xaa>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8028a46:	687b      	ldr	r3, [r7, #4]
 8028a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8028a4a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8028a4e:	687b      	ldr	r3, [r7, #4]
 8028a50:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8028a52:	687b      	ldr	r3, [r7, #4]
 8028a54:	681b      	ldr	r3, [r3, #0]
 8028a56:	689b      	ldr	r3, [r3, #8]
 8028a58:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8028a5c:	2b00      	cmp	r3, #0
 8028a5e:	d12b      	bne.n	8028ab8 <HAL_ADC_IRQHandler+0x110>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8028a60:	687b      	ldr	r3, [r7, #4]
 8028a62:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8028a64:	2b00      	cmp	r3, #0
 8028a66:	d127      	bne.n	8028ab8 <HAL_ADC_IRQHandler+0x110>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8028a68:	687b      	ldr	r3, [r7, #4]
 8028a6a:	681b      	ldr	r3, [r3, #0]
 8028a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028a6e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8028a72:	2b00      	cmp	r3, #0
 8028a74:	d006      	beq.n	8028a84 <HAL_ADC_IRQHandler+0xdc>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8028a76:	687b      	ldr	r3, [r7, #4]
 8028a78:	681b      	ldr	r3, [r3, #0]
 8028a7a:	689b      	ldr	r3, [r3, #8]
 8028a7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8028a80:	2b00      	cmp	r3, #0
 8028a82:	d119      	bne.n	8028ab8 <HAL_ADC_IRQHandler+0x110>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8028a84:	687b      	ldr	r3, [r7, #4]
 8028a86:	681b      	ldr	r3, [r3, #0]
 8028a88:	685a      	ldr	r2, [r3, #4]
 8028a8a:	687b      	ldr	r3, [r7, #4]
 8028a8c:	681b      	ldr	r3, [r3, #0]
 8028a8e:	f022 0220 	bic.w	r2, r2, #32
 8028a92:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8028a94:	687b      	ldr	r3, [r7, #4]
 8028a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8028a98:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8028a9c:	687b      	ldr	r3, [r7, #4]
 8028a9e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8028aa0:	687b      	ldr	r3, [r7, #4]
 8028aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8028aa4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8028aa8:	2b00      	cmp	r3, #0
 8028aaa:	d105      	bne.n	8028ab8 <HAL_ADC_IRQHandler+0x110>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8028aac:	687b      	ldr	r3, [r7, #4]
 8028aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8028ab0:	f043 0201 	orr.w	r2, r3, #1
 8028ab4:	687b      	ldr	r3, [r7, #4]
 8028ab6:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8028ab8:	687b      	ldr	r3, [r7, #4]
 8028aba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8028abc:	6878      	ldr	r0, [r7, #4]
 8028abe:	4798      	blx	r3
#else
    HAL_ADC_ConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8028ac0:	687b      	ldr	r3, [r7, #4]
 8028ac2:	681b      	ldr	r3, [r3, #0]
 8028ac4:	f06f 0212 	mvn.w	r2, #18
 8028ac8:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8028aca:	68fb      	ldr	r3, [r7, #12]
 8028acc:	f003 0304 	and.w	r3, r3, #4
 8028ad0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8028ad2:	68bb      	ldr	r3, [r7, #8]
 8028ad4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8028ad8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8028ada:	697b      	ldr	r3, [r7, #20]
 8028adc:	2b00      	cmp	r3, #0
 8028ade:	d058      	beq.n	8028b92 <HAL_ADC_IRQHandler+0x1ea>
 8028ae0:	693b      	ldr	r3, [r7, #16]
 8028ae2:	2b00      	cmp	r3, #0
 8028ae4:	d055      	beq.n	8028b92 <HAL_ADC_IRQHandler+0x1ea>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8028ae6:	687b      	ldr	r3, [r7, #4]
 8028ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8028aea:	f003 0310 	and.w	r3, r3, #16
 8028aee:	2b00      	cmp	r3, #0
 8028af0:	d105      	bne.n	8028afe <HAL_ADC_IRQHandler+0x156>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8028af2:	687b      	ldr	r3, [r7, #4]
 8028af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8028af6:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8028afa:	687b      	ldr	r3, [r7, #4]
 8028afc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8028afe:	687b      	ldr	r3, [r7, #4]
 8028b00:	681b      	ldr	r3, [r3, #0]
 8028b02:	689b      	ldr	r3, [r3, #8]
 8028b04:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8028b08:	2b00      	cmp	r3, #0
 8028b0a:	d139      	bne.n	8028b80 <HAL_ADC_IRQHandler+0x1d8>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8028b0c:	687b      	ldr	r3, [r7, #4]
 8028b0e:	681b      	ldr	r3, [r3, #0]
 8028b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8028b12:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8028b16:	2b00      	cmp	r3, #0
 8028b18:	d006      	beq.n	8028b28 <HAL_ADC_IRQHandler+0x180>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8028b1a:	687b      	ldr	r3, [r7, #4]
 8028b1c:	681b      	ldr	r3, [r3, #0]
 8028b1e:	689b      	ldr	r3, [r3, #8]
 8028b20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8028b24:	2b00      	cmp	r3, #0
 8028b26:	d12b      	bne.n	8028b80 <HAL_ADC_IRQHandler+0x1d8>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8028b28:	687b      	ldr	r3, [r7, #4]
 8028b2a:	681b      	ldr	r3, [r3, #0]
 8028b2c:	685b      	ldr	r3, [r3, #4]
 8028b2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8028b32:	2b00      	cmp	r3, #0
 8028b34:	d124      	bne.n	8028b80 <HAL_ADC_IRQHandler+0x1d8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8028b36:	687b      	ldr	r3, [r7, #4]
 8028b38:	681b      	ldr	r3, [r3, #0]
 8028b3a:	689b      	ldr	r3, [r3, #8]
 8028b3c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8028b40:	2b00      	cmp	r3, #0
 8028b42:	d11d      	bne.n	8028b80 <HAL_ADC_IRQHandler+0x1d8>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8028b44:	687b      	ldr	r3, [r7, #4]
 8028b46:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8028b48:	2b00      	cmp	r3, #0
 8028b4a:	d119      	bne.n	8028b80 <HAL_ADC_IRQHandler+0x1d8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8028b4c:	687b      	ldr	r3, [r7, #4]
 8028b4e:	681b      	ldr	r3, [r3, #0]
 8028b50:	685a      	ldr	r2, [r3, #4]
 8028b52:	687b      	ldr	r3, [r7, #4]
 8028b54:	681b      	ldr	r3, [r3, #0]
 8028b56:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8028b5a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8028b5c:	687b      	ldr	r3, [r7, #4]
 8028b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8028b60:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8028b64:	687b      	ldr	r3, [r7, #4]
 8028b66:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8028b68:	687b      	ldr	r3, [r7, #4]
 8028b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8028b6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8028b70:	2b00      	cmp	r3, #0
 8028b72:	d105      	bne.n	8028b80 <HAL_ADC_IRQHandler+0x1d8>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8028b74:	687b      	ldr	r3, [r7, #4]
 8028b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8028b78:	f043 0201 	orr.w	r2, r3, #1
 8028b7c:	687b      	ldr	r3, [r7, #4]
 8028b7e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
 8028b80:	687b      	ldr	r3, [r7, #4]
 8028b82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8028b84:	6878      	ldr	r0, [r7, #4]
 8028b86:	4798      	blx	r3
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8028b88:	687b      	ldr	r3, [r7, #4]
 8028b8a:	681b      	ldr	r3, [r3, #0]
 8028b8c:	f06f 020c 	mvn.w	r2, #12
 8028b90:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8028b92:	68fb      	ldr	r3, [r7, #12]
 8028b94:	f003 0301 	and.w	r3, r3, #1
 8028b98:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8028b9a:	68bb      	ldr	r3, [r7, #8]
 8028b9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8028ba0:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8028ba2:	697b      	ldr	r3, [r7, #20]
 8028ba4:	2b00      	cmp	r3, #0
 8028ba6:	d018      	beq.n	8028bda <HAL_ADC_IRQHandler+0x232>
 8028ba8:	693b      	ldr	r3, [r7, #16]
 8028baa:	2b00      	cmp	r3, #0
 8028bac:	d015      	beq.n	8028bda <HAL_ADC_IRQHandler+0x232>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8028bae:	687b      	ldr	r3, [r7, #4]
 8028bb0:	681b      	ldr	r3, [r3, #0]
 8028bb2:	681b      	ldr	r3, [r3, #0]
 8028bb4:	f003 0301 	and.w	r3, r3, #1
 8028bb8:	2b01      	cmp	r3, #1
 8028bba:	d10e      	bne.n	8028bda <HAL_ADC_IRQHandler+0x232>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8028bbc:	687b      	ldr	r3, [r7, #4]
 8028bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8028bc0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8028bc4:	687b      	ldr	r3, [r7, #4]
 8028bc6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
 8028bc8:	687b      	ldr	r3, [r7, #4]
 8028bca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8028bcc:	6878      	ldr	r0, [r7, #4]
 8028bce:	4798      	blx	r3
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8028bd0:	687b      	ldr	r3, [r7, #4]
 8028bd2:	681b      	ldr	r3, [r3, #0]
 8028bd4:	f06f 0201 	mvn.w	r2, #1
 8028bd8:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8028bda:	68fb      	ldr	r3, [r7, #12]
 8028bdc:	f003 0320 	and.w	r3, r3, #32
 8028be0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8028be2:	68bb      	ldr	r3, [r7, #8]
 8028be4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8028be8:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8028bea:	697b      	ldr	r3, [r7, #20]
 8028bec:	2b00      	cmp	r3, #0
 8028bee:	d016      	beq.n	8028c1e <HAL_ADC_IRQHandler+0x276>
 8028bf0:	693b      	ldr	r3, [r7, #16]
 8028bf2:	2b00      	cmp	r3, #0
 8028bf4:	d013      	beq.n	8028c1e <HAL_ADC_IRQHandler+0x276>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8028bf6:	687b      	ldr	r3, [r7, #4]
 8028bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8028bfa:	f043 0202 	orr.w	r2, r3, #2
 8028bfe:	687b      	ldr	r3, [r7, #4]
 8028c00:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8028c02:	687b      	ldr	r3, [r7, #4]
 8028c04:	681b      	ldr	r3, [r3, #0]
 8028c06:	f06f 0220 	mvn.w	r2, #32
 8028c0a:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
 8028c0c:	687b      	ldr	r3, [r7, #4]
 8028c0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8028c10:	6878      	ldr	r0, [r7, #4]
 8028c12:	4798      	blx	r3
#else
    HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8028c14:	687b      	ldr	r3, [r7, #4]
 8028c16:	681b      	ldr	r3, [r3, #0]
 8028c18:	f06f 0220 	mvn.w	r2, #32
 8028c1c:	601a      	str	r2, [r3, #0]
  }
}
 8028c1e:	bf00      	nop
 8028c20:	3718      	adds	r7, #24
 8028c22:	46bd      	mov	sp, r7
 8028c24:	bd80      	pop	{r7, pc}
 8028c26:	bf00      	nop
 8028c28:	080380f8 	.word	0x080380f8

08028c2c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8028c2c:	b580      	push	{r7, lr}
 8028c2e:	b086      	sub	sp, #24
 8028c30:	af00      	add	r7, sp, #0
 8028c32:	60f8      	str	r0, [r7, #12]
 8028c34:	60b9      	str	r1, [r7, #8]
 8028c36:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8028c38:	2300      	movs	r3, #0
 8028c3a:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;

  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8028c3c:	68fb      	ldr	r3, [r7, #12]
 8028c3e:	7e1b      	ldrb	r3, [r3, #24]
 8028c40:	2b00      	cmp	r3, #0
 8028c42:	d008      	beq.n	8028c56 <HAL_ADC_Start_DMA+0x2a>
 8028c44:	68fb      	ldr	r3, [r7, #12]
 8028c46:	7e1b      	ldrb	r3, [r3, #24]
 8028c48:	2b01      	cmp	r3, #1
 8028c4a:	d004      	beq.n	8028c56 <HAL_ADC_Start_DMA+0x2a>
 8028c4c:	f240 515a 	movw	r1, #1370	@ 0x55a
 8028c50:	4887      	ldr	r0, [pc, #540]	@ (8028e70 <HAL_ADC_Start_DMA+0x244>)
 8028c52:	f7ff f850 	bl	8027cf6 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8028c56:	68fb      	ldr	r3, [r7, #12]
 8028c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028c5a:	2b00      	cmp	r3, #0
 8028c5c:	d013      	beq.n	8028c86 <HAL_ADC_Start_DMA+0x5a>
 8028c5e:	68fb      	ldr	r3, [r7, #12]
 8028c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028c62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8028c66:	d00e      	beq.n	8028c86 <HAL_ADC_Start_DMA+0x5a>
 8028c68:	68fb      	ldr	r3, [r7, #12]
 8028c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028c6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8028c70:	d009      	beq.n	8028c86 <HAL_ADC_Start_DMA+0x5a>
 8028c72:	68fb      	ldr	r3, [r7, #12]
 8028c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028c76:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8028c7a:	d004      	beq.n	8028c86 <HAL_ADC_Start_DMA+0x5a>
 8028c7c:	f240 515b 	movw	r1, #1371	@ 0x55b
 8028c80:	487b      	ldr	r0, [pc, #492]	@ (8028e70 <HAL_ADC_Start_DMA+0x244>)
 8028c82:	f7ff f838 	bl	8027cf6 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hadc);
 8028c86:	68fb      	ldr	r3, [r7, #12]
 8028c88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8028c8c:	2b01      	cmp	r3, #1
 8028c8e:	d101      	bne.n	8028c94 <HAL_ADC_Start_DMA+0x68>
 8028c90:	2302      	movs	r3, #2
 8028c92:	e0e9      	b.n	8028e68 <HAL_ADC_Start_DMA+0x23c>
 8028c94:	68fb      	ldr	r3, [r7, #12]
 8028c96:	2201      	movs	r2, #1
 8028c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8028c9c:	68fb      	ldr	r3, [r7, #12]
 8028c9e:	681b      	ldr	r3, [r3, #0]
 8028ca0:	689b      	ldr	r3, [r3, #8]
 8028ca2:	f003 0301 	and.w	r3, r3, #1
 8028ca6:	2b01      	cmp	r3, #1
 8028ca8:	d018      	beq.n	8028cdc <HAL_ADC_Start_DMA+0xb0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8028caa:	68fb      	ldr	r3, [r7, #12]
 8028cac:	681b      	ldr	r3, [r3, #0]
 8028cae:	689a      	ldr	r2, [r3, #8]
 8028cb0:	68fb      	ldr	r3, [r7, #12]
 8028cb2:	681b      	ldr	r3, [r3, #0]
 8028cb4:	f042 0201 	orr.w	r2, r2, #1
 8028cb8:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8028cba:	4b6e      	ldr	r3, [pc, #440]	@ (8028e74 <HAL_ADC_Start_DMA+0x248>)
 8028cbc:	681b      	ldr	r3, [r3, #0]
 8028cbe:	4a6e      	ldr	r2, [pc, #440]	@ (8028e78 <HAL_ADC_Start_DMA+0x24c>)
 8028cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8028cc4:	0c9a      	lsrs	r2, r3, #18
 8028cc6:	4613      	mov	r3, r2
 8028cc8:	005b      	lsls	r3, r3, #1
 8028cca:	4413      	add	r3, r2
 8028ccc:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8028cce:	e002      	b.n	8028cd6 <HAL_ADC_Start_DMA+0xaa>
    {
      counter--;
 8028cd0:	693b      	ldr	r3, [r7, #16]
 8028cd2:	3b01      	subs	r3, #1
 8028cd4:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8028cd6:	693b      	ldr	r3, [r7, #16]
 8028cd8:	2b00      	cmp	r3, #0
 8028cda:	d1f9      	bne.n	8028cd0 <HAL_ADC_Start_DMA+0xa4>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8028cdc:	68fb      	ldr	r3, [r7, #12]
 8028cde:	681b      	ldr	r3, [r3, #0]
 8028ce0:	689b      	ldr	r3, [r3, #8]
 8028ce2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8028ce6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8028cea:	d107      	bne.n	8028cfc <HAL_ADC_Start_DMA+0xd0>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8028cec:	68fb      	ldr	r3, [r7, #12]
 8028cee:	681b      	ldr	r3, [r3, #0]
 8028cf0:	689a      	ldr	r2, [r3, #8]
 8028cf2:	68fb      	ldr	r3, [r7, #12]
 8028cf4:	681b      	ldr	r3, [r3, #0]
 8028cf6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8028cfa:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8028cfc:	68fb      	ldr	r3, [r7, #12]
 8028cfe:	681b      	ldr	r3, [r3, #0]
 8028d00:	689b      	ldr	r3, [r3, #8]
 8028d02:	f003 0301 	and.w	r3, r3, #1
 8028d06:	2b01      	cmp	r3, #1
 8028d08:	f040 80a1 	bne.w	8028e4e <HAL_ADC_Start_DMA+0x222>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8028d0c:	68fb      	ldr	r3, [r7, #12]
 8028d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8028d10:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8028d14:	f023 0301 	bic.w	r3, r3, #1
 8028d18:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8028d1c:	68fb      	ldr	r3, [r7, #12]
 8028d1e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8028d20:	68fb      	ldr	r3, [r7, #12]
 8028d22:	681b      	ldr	r3, [r3, #0]
 8028d24:	685b      	ldr	r3, [r3, #4]
 8028d26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8028d2a:	2b00      	cmp	r3, #0
 8028d2c:	d007      	beq.n	8028d3e <HAL_ADC_Start_DMA+0x112>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8028d2e:	68fb      	ldr	r3, [r7, #12]
 8028d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8028d32:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8028d36:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8028d3a:	68fb      	ldr	r3, [r7, #12]
 8028d3c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8028d3e:	68fb      	ldr	r3, [r7, #12]
 8028d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8028d42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8028d46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8028d4a:	d106      	bne.n	8028d5a <HAL_ADC_Start_DMA+0x12e>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8028d4c:	68fb      	ldr	r3, [r7, #12]
 8028d4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8028d50:	f023 0206 	bic.w	r2, r3, #6
 8028d54:	68fb      	ldr	r3, [r7, #12]
 8028d56:	645a      	str	r2, [r3, #68]	@ 0x44
 8028d58:	e002      	b.n	8028d60 <HAL_ADC_Start_DMA+0x134>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8028d5a:	68fb      	ldr	r3, [r7, #12]
 8028d5c:	2200      	movs	r2, #0
 8028d5e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8028d60:	68fb      	ldr	r3, [r7, #12]
 8028d62:	2200      	movs	r2, #0
 8028d64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8028d68:	4b44      	ldr	r3, [pc, #272]	@ (8028e7c <HAL_ADC_Start_DMA+0x250>)
 8028d6a:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8028d6c:	68fb      	ldr	r3, [r7, #12]
 8028d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8028d70:	4a43      	ldr	r2, [pc, #268]	@ (8028e80 <HAL_ADC_Start_DMA+0x254>)
 8028d72:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8028d74:	68fb      	ldr	r3, [r7, #12]
 8028d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8028d78:	4a42      	ldr	r2, [pc, #264]	@ (8028e84 <HAL_ADC_Start_DMA+0x258>)
 8028d7a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8028d7c:	68fb      	ldr	r3, [r7, #12]
 8028d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8028d80:	4a41      	ldr	r2, [pc, #260]	@ (8028e88 <HAL_ADC_Start_DMA+0x25c>)
 8028d82:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8028d84:	68fb      	ldr	r3, [r7, #12]
 8028d86:	681b      	ldr	r3, [r3, #0]
 8028d88:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8028d8c:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8028d8e:	68fb      	ldr	r3, [r7, #12]
 8028d90:	681b      	ldr	r3, [r3, #0]
 8028d92:	685a      	ldr	r2, [r3, #4]
 8028d94:	68fb      	ldr	r3, [r7, #12]
 8028d96:	681b      	ldr	r3, [r3, #0]
 8028d98:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8028d9c:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8028d9e:	68fb      	ldr	r3, [r7, #12]
 8028da0:	681b      	ldr	r3, [r3, #0]
 8028da2:	689a      	ldr	r2, [r3, #8]
 8028da4:	68fb      	ldr	r3, [r7, #12]
 8028da6:	681b      	ldr	r3, [r3, #0]
 8028da8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8028dac:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8028dae:	68fb      	ldr	r3, [r7, #12]
 8028db0:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8028db2:	68fb      	ldr	r3, [r7, #12]
 8028db4:	681b      	ldr	r3, [r3, #0]
 8028db6:	334c      	adds	r3, #76	@ 0x4c
 8028db8:	4619      	mov	r1, r3
 8028dba:	68ba      	ldr	r2, [r7, #8]
 8028dbc:	687b      	ldr	r3, [r7, #4]
 8028dbe:	f002 fd41 	bl	802b844 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8028dc2:	697b      	ldr	r3, [r7, #20]
 8028dc4:	685b      	ldr	r3, [r3, #4]
 8028dc6:	f003 031f 	and.w	r3, r3, #31
 8028dca:	2b00      	cmp	r3, #0
 8028dcc:	d12a      	bne.n	8028e24 <HAL_ADC_Start_DMA+0x1f8>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8028dce:	68fb      	ldr	r3, [r7, #12]
 8028dd0:	681b      	ldr	r3, [r3, #0]
 8028dd2:	4a2e      	ldr	r2, [pc, #184]	@ (8028e8c <HAL_ADC_Start_DMA+0x260>)
 8028dd4:	4293      	cmp	r3, r2
 8028dd6:	d015      	beq.n	8028e04 <HAL_ADC_Start_DMA+0x1d8>
 8028dd8:	68fb      	ldr	r3, [r7, #12]
 8028dda:	681b      	ldr	r3, [r3, #0]
 8028ddc:	4a2c      	ldr	r2, [pc, #176]	@ (8028e90 <HAL_ADC_Start_DMA+0x264>)
 8028dde:	4293      	cmp	r3, r2
 8028de0:	d105      	bne.n	8028dee <HAL_ADC_Start_DMA+0x1c2>
 8028de2:	4b26      	ldr	r3, [pc, #152]	@ (8028e7c <HAL_ADC_Start_DMA+0x250>)
 8028de4:	685b      	ldr	r3, [r3, #4]
 8028de6:	f003 031f 	and.w	r3, r3, #31
 8028dea:	2b00      	cmp	r3, #0
 8028dec:	d00a      	beq.n	8028e04 <HAL_ADC_Start_DMA+0x1d8>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8028dee:	68fb      	ldr	r3, [r7, #12]
 8028df0:	681b      	ldr	r3, [r3, #0]
 8028df2:	4a28      	ldr	r2, [pc, #160]	@ (8028e94 <HAL_ADC_Start_DMA+0x268>)
 8028df4:	4293      	cmp	r3, r2
 8028df6:	d136      	bne.n	8028e66 <HAL_ADC_Start_DMA+0x23a>
 8028df8:	4b20      	ldr	r3, [pc, #128]	@ (8028e7c <HAL_ADC_Start_DMA+0x250>)
 8028dfa:	685b      	ldr	r3, [r3, #4]
 8028dfc:	f003 0310 	and.w	r3, r3, #16
 8028e00:	2b00      	cmp	r3, #0
 8028e02:	d130      	bne.n	8028e66 <HAL_ADC_Start_DMA+0x23a>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8028e04:	68fb      	ldr	r3, [r7, #12]
 8028e06:	681b      	ldr	r3, [r3, #0]
 8028e08:	689b      	ldr	r3, [r3, #8]
 8028e0a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8028e0e:	2b00      	cmp	r3, #0
 8028e10:	d129      	bne.n	8028e66 <HAL_ADC_Start_DMA+0x23a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8028e12:	68fb      	ldr	r3, [r7, #12]
 8028e14:	681b      	ldr	r3, [r3, #0]
 8028e16:	689a      	ldr	r2, [r3, #8]
 8028e18:	68fb      	ldr	r3, [r7, #12]
 8028e1a:	681b      	ldr	r3, [r3, #0]
 8028e1c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8028e20:	609a      	str	r2, [r3, #8]
 8028e22:	e020      	b.n	8028e66 <HAL_ADC_Start_DMA+0x23a>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8028e24:	68fb      	ldr	r3, [r7, #12]
 8028e26:	681b      	ldr	r3, [r3, #0]
 8028e28:	4a18      	ldr	r2, [pc, #96]	@ (8028e8c <HAL_ADC_Start_DMA+0x260>)
 8028e2a:	4293      	cmp	r3, r2
 8028e2c:	d11b      	bne.n	8028e66 <HAL_ADC_Start_DMA+0x23a>
 8028e2e:	68fb      	ldr	r3, [r7, #12]
 8028e30:	681b      	ldr	r3, [r3, #0]
 8028e32:	689b      	ldr	r3, [r3, #8]
 8028e34:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8028e38:	2b00      	cmp	r3, #0
 8028e3a:	d114      	bne.n	8028e66 <HAL_ADC_Start_DMA+0x23a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8028e3c:	68fb      	ldr	r3, [r7, #12]
 8028e3e:	681b      	ldr	r3, [r3, #0]
 8028e40:	689a      	ldr	r2, [r3, #8]
 8028e42:	68fb      	ldr	r3, [r7, #12]
 8028e44:	681b      	ldr	r3, [r3, #0]
 8028e46:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8028e4a:	609a      	str	r2, [r3, #8]
 8028e4c:	e00b      	b.n	8028e66 <HAL_ADC_Start_DMA+0x23a>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8028e4e:	68fb      	ldr	r3, [r7, #12]
 8028e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8028e52:	f043 0210 	orr.w	r2, r3, #16
 8028e56:	68fb      	ldr	r3, [r7, #12]
 8028e58:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8028e5a:	68fb      	ldr	r3, [r7, #12]
 8028e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8028e5e:	f043 0201 	orr.w	r2, r3, #1
 8028e62:	68fb      	ldr	r3, [r7, #12]
 8028e64:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8028e66:	2300      	movs	r3, #0
}
 8028e68:	4618      	mov	r0, r3
 8028e6a:	3718      	adds	r7, #24
 8028e6c:	46bd      	mov	sp, r7
 8028e6e:	bd80      	pop	{r7, pc}
 8028e70:	080380f8 	.word	0x080380f8
 8028e74:	2000001c 	.word	0x2000001c
 8028e78:	431bde83 	.word	0x431bde83
 8028e7c:	40012300 	.word	0x40012300
 8028e80:	080293bd 	.word	0x080293bd
 8028e84:	0802947b 	.word	0x0802947b
 8028e88:	08029499 	.word	0x08029499
 8028e8c:	40012000 	.word	0x40012000
 8028e90:	40012100 	.word	0x40012100
 8028e94:	40012200 	.word	0x40012200

08028e98 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8028e98:	b480      	push	{r7}
 8028e9a:	b083      	sub	sp, #12
 8028e9c:	af00      	add	r7, sp, #0
 8028e9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8028ea0:	bf00      	nop
 8028ea2:	370c      	adds	r7, #12
 8028ea4:	46bd      	mov	sp, r7
 8028ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028eaa:	4770      	bx	lr

08028eac <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8028eac:	b480      	push	{r7}
 8028eae:	b083      	sub	sp, #12
 8028eb0:	af00      	add	r7, sp, #0
 8028eb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8028eb4:	bf00      	nop
 8028eb6:	370c      	adds	r7, #12
 8028eb8:	46bd      	mov	sp, r7
 8028eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028ebe:	4770      	bx	lr

08028ec0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8028ec0:	b480      	push	{r7}
 8028ec2:	b083      	sub	sp, #12
 8028ec4:	af00      	add	r7, sp, #0
 8028ec6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8028ec8:	bf00      	nop
 8028eca:	370c      	adds	r7, #12
 8028ecc:	46bd      	mov	sp, r7
 8028ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028ed2:	4770      	bx	lr

08028ed4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8028ed4:	b580      	push	{r7, lr}
 8028ed6:	b084      	sub	sp, #16
 8028ed8:	af00      	add	r7, sp, #0
 8028eda:	6078      	str	r0, [r7, #4]
 8028edc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8028ede:	2300      	movs	r3, #0
 8028ee0:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;

  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8028ee2:	683b      	ldr	r3, [r7, #0]
 8028ee4:	681b      	ldr	r3, [r3, #0]
 8028ee6:	2b12      	cmp	r3, #18
 8028ee8:	d904      	bls.n	8028ef4 <HAL_ADC_ConfigChannel+0x20>
 8028eea:	f240 618b 	movw	r1, #1675	@ 0x68b
 8028eee:	486f      	ldr	r0, [pc, #444]	@ (80290ac <HAL_ADC_ConfigChannel+0x1d8>)
 8028ef0:	f7fe ff01 	bl	8027cf6 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8028ef4:	683b      	ldr	r3, [r7, #0]
 8028ef6:	685b      	ldr	r3, [r3, #4]
 8028ef8:	2b00      	cmp	r3, #0
 8028efa:	d003      	beq.n	8028f04 <HAL_ADC_ConfigChannel+0x30>
 8028efc:	683b      	ldr	r3, [r7, #0]
 8028efe:	685b      	ldr	r3, [r3, #4]
 8028f00:	2b10      	cmp	r3, #16
 8028f02:	d904      	bls.n	8028f0e <HAL_ADC_ConfigChannel+0x3a>
 8028f04:	f240 618c 	movw	r1, #1676	@ 0x68c
 8028f08:	4868      	ldr	r0, [pc, #416]	@ (80290ac <HAL_ADC_ConfigChannel+0x1d8>)
 8028f0a:	f7fe fef4 	bl	8027cf6 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8028f0e:	683b      	ldr	r3, [r7, #0]
 8028f10:	689b      	ldr	r3, [r3, #8]
 8028f12:	2b00      	cmp	r3, #0
 8028f14:	d020      	beq.n	8028f58 <HAL_ADC_ConfigChannel+0x84>
 8028f16:	683b      	ldr	r3, [r7, #0]
 8028f18:	689b      	ldr	r3, [r3, #8]
 8028f1a:	2b01      	cmp	r3, #1
 8028f1c:	d01c      	beq.n	8028f58 <HAL_ADC_ConfigChannel+0x84>
 8028f1e:	683b      	ldr	r3, [r7, #0]
 8028f20:	689b      	ldr	r3, [r3, #8]
 8028f22:	2b02      	cmp	r3, #2
 8028f24:	d018      	beq.n	8028f58 <HAL_ADC_ConfigChannel+0x84>
 8028f26:	683b      	ldr	r3, [r7, #0]
 8028f28:	689b      	ldr	r3, [r3, #8]
 8028f2a:	2b03      	cmp	r3, #3
 8028f2c:	d014      	beq.n	8028f58 <HAL_ADC_ConfigChannel+0x84>
 8028f2e:	683b      	ldr	r3, [r7, #0]
 8028f30:	689b      	ldr	r3, [r3, #8]
 8028f32:	2b04      	cmp	r3, #4
 8028f34:	d010      	beq.n	8028f58 <HAL_ADC_ConfigChannel+0x84>
 8028f36:	683b      	ldr	r3, [r7, #0]
 8028f38:	689b      	ldr	r3, [r3, #8]
 8028f3a:	2b05      	cmp	r3, #5
 8028f3c:	d00c      	beq.n	8028f58 <HAL_ADC_ConfigChannel+0x84>
 8028f3e:	683b      	ldr	r3, [r7, #0]
 8028f40:	689b      	ldr	r3, [r3, #8]
 8028f42:	2b06      	cmp	r3, #6
 8028f44:	d008      	beq.n	8028f58 <HAL_ADC_ConfigChannel+0x84>
 8028f46:	683b      	ldr	r3, [r7, #0]
 8028f48:	689b      	ldr	r3, [r3, #8]
 8028f4a:	2b07      	cmp	r3, #7
 8028f4c:	d004      	beq.n	8028f58 <HAL_ADC_ConfigChannel+0x84>
 8028f4e:	f240 618d 	movw	r1, #1677	@ 0x68d
 8028f52:	4856      	ldr	r0, [pc, #344]	@ (80290ac <HAL_ADC_ConfigChannel+0x1d8>)
 8028f54:	f7fe fecf 	bl	8027cf6 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hadc);
 8028f58:	687b      	ldr	r3, [r7, #4]
 8028f5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8028f5e:	2b01      	cmp	r3, #1
 8028f60:	d101      	bne.n	8028f66 <HAL_ADC_ConfigChannel+0x92>
 8028f62:	2302      	movs	r3, #2
 8028f64:	e107      	b.n	8029176 <HAL_ADC_ConfigChannel+0x2a2>
 8028f66:	687b      	ldr	r3, [r7, #4]
 8028f68:	2201      	movs	r2, #1
 8028f6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8028f6e:	683b      	ldr	r3, [r7, #0]
 8028f70:	681b      	ldr	r3, [r3, #0]
 8028f72:	2b09      	cmp	r3, #9
 8028f74:	d925      	bls.n	8028fc2 <HAL_ADC_ConfigChannel+0xee>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8028f76:	687b      	ldr	r3, [r7, #4]
 8028f78:	681b      	ldr	r3, [r3, #0]
 8028f7a:	68d9      	ldr	r1, [r3, #12]
 8028f7c:	683b      	ldr	r3, [r7, #0]
 8028f7e:	681b      	ldr	r3, [r3, #0]
 8028f80:	b29b      	uxth	r3, r3
 8028f82:	461a      	mov	r2, r3
 8028f84:	4613      	mov	r3, r2
 8028f86:	005b      	lsls	r3, r3, #1
 8028f88:	4413      	add	r3, r2
 8028f8a:	3b1e      	subs	r3, #30
 8028f8c:	2207      	movs	r2, #7
 8028f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8028f92:	43da      	mvns	r2, r3
 8028f94:	687b      	ldr	r3, [r7, #4]
 8028f96:	681b      	ldr	r3, [r3, #0]
 8028f98:	400a      	ands	r2, r1
 8028f9a:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8028f9c:	687b      	ldr	r3, [r7, #4]
 8028f9e:	681b      	ldr	r3, [r3, #0]
 8028fa0:	68d9      	ldr	r1, [r3, #12]
 8028fa2:	683b      	ldr	r3, [r7, #0]
 8028fa4:	689a      	ldr	r2, [r3, #8]
 8028fa6:	683b      	ldr	r3, [r7, #0]
 8028fa8:	681b      	ldr	r3, [r3, #0]
 8028faa:	b29b      	uxth	r3, r3
 8028fac:	4618      	mov	r0, r3
 8028fae:	4603      	mov	r3, r0
 8028fb0:	005b      	lsls	r3, r3, #1
 8028fb2:	4403      	add	r3, r0
 8028fb4:	3b1e      	subs	r3, #30
 8028fb6:	409a      	lsls	r2, r3
 8028fb8:	687b      	ldr	r3, [r7, #4]
 8028fba:	681b      	ldr	r3, [r3, #0]
 8028fbc:	430a      	orrs	r2, r1
 8028fbe:	60da      	str	r2, [r3, #12]
 8028fc0:	e022      	b.n	8029008 <HAL_ADC_ConfigChannel+0x134>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8028fc2:	687b      	ldr	r3, [r7, #4]
 8028fc4:	681b      	ldr	r3, [r3, #0]
 8028fc6:	6919      	ldr	r1, [r3, #16]
 8028fc8:	683b      	ldr	r3, [r7, #0]
 8028fca:	681b      	ldr	r3, [r3, #0]
 8028fcc:	b29b      	uxth	r3, r3
 8028fce:	461a      	mov	r2, r3
 8028fd0:	4613      	mov	r3, r2
 8028fd2:	005b      	lsls	r3, r3, #1
 8028fd4:	4413      	add	r3, r2
 8028fd6:	2207      	movs	r2, #7
 8028fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8028fdc:	43da      	mvns	r2, r3
 8028fde:	687b      	ldr	r3, [r7, #4]
 8028fe0:	681b      	ldr	r3, [r3, #0]
 8028fe2:	400a      	ands	r2, r1
 8028fe4:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8028fe6:	687b      	ldr	r3, [r7, #4]
 8028fe8:	681b      	ldr	r3, [r3, #0]
 8028fea:	6919      	ldr	r1, [r3, #16]
 8028fec:	683b      	ldr	r3, [r7, #0]
 8028fee:	689a      	ldr	r2, [r3, #8]
 8028ff0:	683b      	ldr	r3, [r7, #0]
 8028ff2:	681b      	ldr	r3, [r3, #0]
 8028ff4:	b29b      	uxth	r3, r3
 8028ff6:	4618      	mov	r0, r3
 8028ff8:	4603      	mov	r3, r0
 8028ffa:	005b      	lsls	r3, r3, #1
 8028ffc:	4403      	add	r3, r0
 8028ffe:	409a      	lsls	r2, r3
 8029000:	687b      	ldr	r3, [r7, #4]
 8029002:	681b      	ldr	r3, [r3, #0]
 8029004:	430a      	orrs	r2, r1
 8029006:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8029008:	683b      	ldr	r3, [r7, #0]
 802900a:	685b      	ldr	r3, [r3, #4]
 802900c:	2b06      	cmp	r3, #6
 802900e:	d824      	bhi.n	802905a <HAL_ADC_ConfigChannel+0x186>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8029010:	687b      	ldr	r3, [r7, #4]
 8029012:	681b      	ldr	r3, [r3, #0]
 8029014:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8029016:	683b      	ldr	r3, [r7, #0]
 8029018:	685a      	ldr	r2, [r3, #4]
 802901a:	4613      	mov	r3, r2
 802901c:	009b      	lsls	r3, r3, #2
 802901e:	4413      	add	r3, r2
 8029020:	3b05      	subs	r3, #5
 8029022:	221f      	movs	r2, #31
 8029024:	fa02 f303 	lsl.w	r3, r2, r3
 8029028:	43da      	mvns	r2, r3
 802902a:	687b      	ldr	r3, [r7, #4]
 802902c:	681b      	ldr	r3, [r3, #0]
 802902e:	400a      	ands	r2, r1
 8029030:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8029032:	687b      	ldr	r3, [r7, #4]
 8029034:	681b      	ldr	r3, [r3, #0]
 8029036:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8029038:	683b      	ldr	r3, [r7, #0]
 802903a:	681b      	ldr	r3, [r3, #0]
 802903c:	b29b      	uxth	r3, r3
 802903e:	4618      	mov	r0, r3
 8029040:	683b      	ldr	r3, [r7, #0]
 8029042:	685a      	ldr	r2, [r3, #4]
 8029044:	4613      	mov	r3, r2
 8029046:	009b      	lsls	r3, r3, #2
 8029048:	4413      	add	r3, r2
 802904a:	3b05      	subs	r3, #5
 802904c:	fa00 f203 	lsl.w	r2, r0, r3
 8029050:	687b      	ldr	r3, [r7, #4]
 8029052:	681b      	ldr	r3, [r3, #0]
 8029054:	430a      	orrs	r2, r1
 8029056:	635a      	str	r2, [r3, #52]	@ 0x34
 8029058:	e04e      	b.n	80290f8 <HAL_ADC_ConfigChannel+0x224>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 802905a:	683b      	ldr	r3, [r7, #0]
 802905c:	685b      	ldr	r3, [r3, #4]
 802905e:	2b0c      	cmp	r3, #12
 8029060:	d826      	bhi.n	80290b0 <HAL_ADC_ConfigChannel+0x1dc>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8029062:	687b      	ldr	r3, [r7, #4]
 8029064:	681b      	ldr	r3, [r3, #0]
 8029066:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8029068:	683b      	ldr	r3, [r7, #0]
 802906a:	685a      	ldr	r2, [r3, #4]
 802906c:	4613      	mov	r3, r2
 802906e:	009b      	lsls	r3, r3, #2
 8029070:	4413      	add	r3, r2
 8029072:	3b23      	subs	r3, #35	@ 0x23
 8029074:	221f      	movs	r2, #31
 8029076:	fa02 f303 	lsl.w	r3, r2, r3
 802907a:	43da      	mvns	r2, r3
 802907c:	687b      	ldr	r3, [r7, #4]
 802907e:	681b      	ldr	r3, [r3, #0]
 8029080:	400a      	ands	r2, r1
 8029082:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8029084:	687b      	ldr	r3, [r7, #4]
 8029086:	681b      	ldr	r3, [r3, #0]
 8029088:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 802908a:	683b      	ldr	r3, [r7, #0]
 802908c:	681b      	ldr	r3, [r3, #0]
 802908e:	b29b      	uxth	r3, r3
 8029090:	4618      	mov	r0, r3
 8029092:	683b      	ldr	r3, [r7, #0]
 8029094:	685a      	ldr	r2, [r3, #4]
 8029096:	4613      	mov	r3, r2
 8029098:	009b      	lsls	r3, r3, #2
 802909a:	4413      	add	r3, r2
 802909c:	3b23      	subs	r3, #35	@ 0x23
 802909e:	fa00 f203 	lsl.w	r2, r0, r3
 80290a2:	687b      	ldr	r3, [r7, #4]
 80290a4:	681b      	ldr	r3, [r3, #0]
 80290a6:	430a      	orrs	r2, r1
 80290a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80290aa:	e025      	b.n	80290f8 <HAL_ADC_ConfigChannel+0x224>
 80290ac:	080380f8 	.word	0x080380f8
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80290b0:	687b      	ldr	r3, [r7, #4]
 80290b2:	681b      	ldr	r3, [r3, #0]
 80290b4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80290b6:	683b      	ldr	r3, [r7, #0]
 80290b8:	685a      	ldr	r2, [r3, #4]
 80290ba:	4613      	mov	r3, r2
 80290bc:	009b      	lsls	r3, r3, #2
 80290be:	4413      	add	r3, r2
 80290c0:	3b41      	subs	r3, #65	@ 0x41
 80290c2:	221f      	movs	r2, #31
 80290c4:	fa02 f303 	lsl.w	r3, r2, r3
 80290c8:	43da      	mvns	r2, r3
 80290ca:	687b      	ldr	r3, [r7, #4]
 80290cc:	681b      	ldr	r3, [r3, #0]
 80290ce:	400a      	ands	r2, r1
 80290d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80290d2:	687b      	ldr	r3, [r7, #4]
 80290d4:	681b      	ldr	r3, [r3, #0]
 80290d6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80290d8:	683b      	ldr	r3, [r7, #0]
 80290da:	681b      	ldr	r3, [r3, #0]
 80290dc:	b29b      	uxth	r3, r3
 80290de:	4618      	mov	r0, r3
 80290e0:	683b      	ldr	r3, [r7, #0]
 80290e2:	685a      	ldr	r2, [r3, #4]
 80290e4:	4613      	mov	r3, r2
 80290e6:	009b      	lsls	r3, r3, #2
 80290e8:	4413      	add	r3, r2
 80290ea:	3b41      	subs	r3, #65	@ 0x41
 80290ec:	fa00 f203 	lsl.w	r2, r0, r3
 80290f0:	687b      	ldr	r3, [r7, #4]
 80290f2:	681b      	ldr	r3, [r3, #0]
 80290f4:	430a      	orrs	r2, r1
 80290f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80290f8:	4b21      	ldr	r3, [pc, #132]	@ (8029180 <HAL_ADC_ConfigChannel+0x2ac>)
 80290fa:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80290fc:	687b      	ldr	r3, [r7, #4]
 80290fe:	681b      	ldr	r3, [r3, #0]
 8029100:	4a20      	ldr	r2, [pc, #128]	@ (8029184 <HAL_ADC_ConfigChannel+0x2b0>)
 8029102:	4293      	cmp	r3, r2
 8029104:	d109      	bne.n	802911a <HAL_ADC_ConfigChannel+0x246>
 8029106:	683b      	ldr	r3, [r7, #0]
 8029108:	681b      	ldr	r3, [r3, #0]
 802910a:	2b12      	cmp	r3, #18
 802910c:	d105      	bne.n	802911a <HAL_ADC_ConfigChannel+0x246>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 802910e:	68fb      	ldr	r3, [r7, #12]
 8029110:	685b      	ldr	r3, [r3, #4]
 8029112:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8029116:	68fb      	ldr	r3, [r7, #12]
 8029118:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 802911a:	687b      	ldr	r3, [r7, #4]
 802911c:	681b      	ldr	r3, [r3, #0]
 802911e:	4a19      	ldr	r2, [pc, #100]	@ (8029184 <HAL_ADC_ConfigChannel+0x2b0>)
 8029120:	4293      	cmp	r3, r2
 8029122:	d123      	bne.n	802916c <HAL_ADC_ConfigChannel+0x298>
 8029124:	683b      	ldr	r3, [r7, #0]
 8029126:	681b      	ldr	r3, [r3, #0]
 8029128:	2b10      	cmp	r3, #16
 802912a:	d003      	beq.n	8029134 <HAL_ADC_ConfigChannel+0x260>
 802912c:	683b      	ldr	r3, [r7, #0]
 802912e:	681b      	ldr	r3, [r3, #0]
 8029130:	2b11      	cmp	r3, #17
 8029132:	d11b      	bne.n	802916c <HAL_ADC_ConfigChannel+0x298>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8029134:	68fb      	ldr	r3, [r7, #12]
 8029136:	685b      	ldr	r3, [r3, #4]
 8029138:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 802913c:	68fb      	ldr	r3, [r7, #12]
 802913e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8029140:	683b      	ldr	r3, [r7, #0]
 8029142:	681b      	ldr	r3, [r3, #0]
 8029144:	2b10      	cmp	r3, #16
 8029146:	d111      	bne.n	802916c <HAL_ADC_ConfigChannel+0x298>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8029148:	4b0f      	ldr	r3, [pc, #60]	@ (8029188 <HAL_ADC_ConfigChannel+0x2b4>)
 802914a:	681b      	ldr	r3, [r3, #0]
 802914c:	4a0f      	ldr	r2, [pc, #60]	@ (802918c <HAL_ADC_ConfigChannel+0x2b8>)
 802914e:	fba2 2303 	umull	r2, r3, r2, r3
 8029152:	0c9a      	lsrs	r2, r3, #18
 8029154:	4613      	mov	r3, r2
 8029156:	009b      	lsls	r3, r3, #2
 8029158:	4413      	add	r3, r2
 802915a:	005b      	lsls	r3, r3, #1
 802915c:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 802915e:	e002      	b.n	8029166 <HAL_ADC_ConfigChannel+0x292>
      {
        counter--;
 8029160:	68bb      	ldr	r3, [r7, #8]
 8029162:	3b01      	subs	r3, #1
 8029164:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8029166:	68bb      	ldr	r3, [r7, #8]
 8029168:	2b00      	cmp	r3, #0
 802916a:	d1f9      	bne.n	8029160 <HAL_ADC_ConfigChannel+0x28c>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 802916c:	687b      	ldr	r3, [r7, #4]
 802916e:	2200      	movs	r2, #0
 8029170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8029174:	2300      	movs	r3, #0
}
 8029176:	4618      	mov	r0, r3
 8029178:	3710      	adds	r7, #16
 802917a:	46bd      	mov	sp, r7
 802917c:	bd80      	pop	{r7, pc}
 802917e:	bf00      	nop
 8029180:	40012300 	.word	0x40012300
 8029184:	40012000 	.word	0x40012000
 8029188:	2000001c 	.word	0x2000001c
 802918c:	431bde83 	.word	0x431bde83

08029190 <HAL_ADC_GetState>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef *hadc)
{
 8029190:	b480      	push	{r7}
 8029192:	b083      	sub	sp, #12
 8029194:	af00      	add	r7, sp, #0
 8029196:	6078      	str	r0, [r7, #4]
  /* Return ADC state */
  return hadc->State;
 8029198:	687b      	ldr	r3, [r7, #4]
 802919a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 802919c:	4618      	mov	r0, r3
 802919e:	370c      	adds	r7, #12
 80291a0:	46bd      	mov	sp, r7
 80291a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80291a6:	4770      	bx	lr

080291a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80291a8:	b580      	push	{r7, lr}
 80291aa:	b084      	sub	sp, #16
 80291ac:	af00      	add	r7, sp, #0
 80291ae:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80291b0:	4b7f      	ldr	r3, [pc, #508]	@ (80293b0 <ADC_Init+0x208>)
 80291b2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80291b4:	68fb      	ldr	r3, [r7, #12]
 80291b6:	685b      	ldr	r3, [r3, #4]
 80291b8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80291bc:	68fb      	ldr	r3, [r7, #12]
 80291be:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80291c0:	68fb      	ldr	r3, [r7, #12]
 80291c2:	685a      	ldr	r2, [r3, #4]
 80291c4:	687b      	ldr	r3, [r7, #4]
 80291c6:	685b      	ldr	r3, [r3, #4]
 80291c8:	431a      	orrs	r2, r3
 80291ca:	68fb      	ldr	r3, [r7, #12]
 80291cc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80291ce:	687b      	ldr	r3, [r7, #4]
 80291d0:	681b      	ldr	r3, [r3, #0]
 80291d2:	685a      	ldr	r2, [r3, #4]
 80291d4:	687b      	ldr	r3, [r7, #4]
 80291d6:	681b      	ldr	r3, [r3, #0]
 80291d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80291dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80291de:	687b      	ldr	r3, [r7, #4]
 80291e0:	681b      	ldr	r3, [r3, #0]
 80291e2:	6859      	ldr	r1, [r3, #4]
 80291e4:	687b      	ldr	r3, [r7, #4]
 80291e6:	691b      	ldr	r3, [r3, #16]
 80291e8:	021a      	lsls	r2, r3, #8
 80291ea:	687b      	ldr	r3, [r7, #4]
 80291ec:	681b      	ldr	r3, [r3, #0]
 80291ee:	430a      	orrs	r2, r1
 80291f0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80291f2:	687b      	ldr	r3, [r7, #4]
 80291f4:	681b      	ldr	r3, [r3, #0]
 80291f6:	685a      	ldr	r2, [r3, #4]
 80291f8:	687b      	ldr	r3, [r7, #4]
 80291fa:	681b      	ldr	r3, [r3, #0]
 80291fc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8029200:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8029202:	687b      	ldr	r3, [r7, #4]
 8029204:	681b      	ldr	r3, [r3, #0]
 8029206:	6859      	ldr	r1, [r3, #4]
 8029208:	687b      	ldr	r3, [r7, #4]
 802920a:	689a      	ldr	r2, [r3, #8]
 802920c:	687b      	ldr	r3, [r7, #4]
 802920e:	681b      	ldr	r3, [r3, #0]
 8029210:	430a      	orrs	r2, r1
 8029212:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8029214:	687b      	ldr	r3, [r7, #4]
 8029216:	681b      	ldr	r3, [r3, #0]
 8029218:	689a      	ldr	r2, [r3, #8]
 802921a:	687b      	ldr	r3, [r7, #4]
 802921c:	681b      	ldr	r3, [r3, #0]
 802921e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8029222:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8029224:	687b      	ldr	r3, [r7, #4]
 8029226:	681b      	ldr	r3, [r3, #0]
 8029228:	6899      	ldr	r1, [r3, #8]
 802922a:	687b      	ldr	r3, [r7, #4]
 802922c:	68da      	ldr	r2, [r3, #12]
 802922e:	687b      	ldr	r3, [r7, #4]
 8029230:	681b      	ldr	r3, [r3, #0]
 8029232:	430a      	orrs	r2, r1
 8029234:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8029236:	687b      	ldr	r3, [r7, #4]
 8029238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802923a:	4a5e      	ldr	r2, [pc, #376]	@ (80293b4 <ADC_Init+0x20c>)
 802923c:	4293      	cmp	r3, r2
 802923e:	d022      	beq.n	8029286 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8029240:	687b      	ldr	r3, [r7, #4]
 8029242:	681b      	ldr	r3, [r3, #0]
 8029244:	689a      	ldr	r2, [r3, #8]
 8029246:	687b      	ldr	r3, [r7, #4]
 8029248:	681b      	ldr	r3, [r3, #0]
 802924a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 802924e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8029250:	687b      	ldr	r3, [r7, #4]
 8029252:	681b      	ldr	r3, [r3, #0]
 8029254:	6899      	ldr	r1, [r3, #8]
 8029256:	687b      	ldr	r3, [r7, #4]
 8029258:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 802925a:	687b      	ldr	r3, [r7, #4]
 802925c:	681b      	ldr	r3, [r3, #0]
 802925e:	430a      	orrs	r2, r1
 8029260:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8029262:	687b      	ldr	r3, [r7, #4]
 8029264:	681b      	ldr	r3, [r3, #0]
 8029266:	689a      	ldr	r2, [r3, #8]
 8029268:	687b      	ldr	r3, [r7, #4]
 802926a:	681b      	ldr	r3, [r3, #0]
 802926c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8029270:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8029272:	687b      	ldr	r3, [r7, #4]
 8029274:	681b      	ldr	r3, [r3, #0]
 8029276:	6899      	ldr	r1, [r3, #8]
 8029278:	687b      	ldr	r3, [r7, #4]
 802927a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 802927c:	687b      	ldr	r3, [r7, #4]
 802927e:	681b      	ldr	r3, [r3, #0]
 8029280:	430a      	orrs	r2, r1
 8029282:	609a      	str	r2, [r3, #8]
 8029284:	e00f      	b.n	80292a6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8029286:	687b      	ldr	r3, [r7, #4]
 8029288:	681b      	ldr	r3, [r3, #0]
 802928a:	689a      	ldr	r2, [r3, #8]
 802928c:	687b      	ldr	r3, [r7, #4]
 802928e:	681b      	ldr	r3, [r3, #0]
 8029290:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8029294:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8029296:	687b      	ldr	r3, [r7, #4]
 8029298:	681b      	ldr	r3, [r3, #0]
 802929a:	689a      	ldr	r2, [r3, #8]
 802929c:	687b      	ldr	r3, [r7, #4]
 802929e:	681b      	ldr	r3, [r3, #0]
 80292a0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80292a4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80292a6:	687b      	ldr	r3, [r7, #4]
 80292a8:	681b      	ldr	r3, [r3, #0]
 80292aa:	689a      	ldr	r2, [r3, #8]
 80292ac:	687b      	ldr	r3, [r7, #4]
 80292ae:	681b      	ldr	r3, [r3, #0]
 80292b0:	f022 0202 	bic.w	r2, r2, #2
 80292b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80292b6:	687b      	ldr	r3, [r7, #4]
 80292b8:	681b      	ldr	r3, [r3, #0]
 80292ba:	6899      	ldr	r1, [r3, #8]
 80292bc:	687b      	ldr	r3, [r7, #4]
 80292be:	7e1b      	ldrb	r3, [r3, #24]
 80292c0:	005a      	lsls	r2, r3, #1
 80292c2:	687b      	ldr	r3, [r7, #4]
 80292c4:	681b      	ldr	r3, [r3, #0]
 80292c6:	430a      	orrs	r2, r1
 80292c8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80292ca:	687b      	ldr	r3, [r7, #4]
 80292cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80292d0:	2b00      	cmp	r3, #0
 80292d2:	d028      	beq.n	8029326 <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 80292d4:	687b      	ldr	r3, [r7, #4]
 80292d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80292d8:	2b00      	cmp	r3, #0
 80292da:	d003      	beq.n	80292e4 <ADC_Init+0x13c>
 80292dc:	687b      	ldr	r3, [r7, #4]
 80292de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80292e0:	2b08      	cmp	r3, #8
 80292e2:	d904      	bls.n	80292ee <ADC_Init+0x146>
 80292e4:	f44f 61f5 	mov.w	r1, #1960	@ 0x7a8
 80292e8:	4833      	ldr	r0, [pc, #204]	@ (80293b8 <ADC_Init+0x210>)
 80292ea:	f7fe fd04 	bl	8027cf6 <assert_failed>

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80292ee:	687b      	ldr	r3, [r7, #4]
 80292f0:	681b      	ldr	r3, [r3, #0]
 80292f2:	685a      	ldr	r2, [r3, #4]
 80292f4:	687b      	ldr	r3, [r7, #4]
 80292f6:	681b      	ldr	r3, [r3, #0]
 80292f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80292fc:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80292fe:	687b      	ldr	r3, [r7, #4]
 8029300:	681b      	ldr	r3, [r3, #0]
 8029302:	685a      	ldr	r2, [r3, #4]
 8029304:	687b      	ldr	r3, [r7, #4]
 8029306:	681b      	ldr	r3, [r3, #0]
 8029308:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 802930c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 802930e:	687b      	ldr	r3, [r7, #4]
 8029310:	681b      	ldr	r3, [r3, #0]
 8029312:	6859      	ldr	r1, [r3, #4]
 8029314:	687b      	ldr	r3, [r7, #4]
 8029316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8029318:	3b01      	subs	r3, #1
 802931a:	035a      	lsls	r2, r3, #13
 802931c:	687b      	ldr	r3, [r7, #4]
 802931e:	681b      	ldr	r3, [r3, #0]
 8029320:	430a      	orrs	r2, r1
 8029322:	605a      	str	r2, [r3, #4]
 8029324:	e007      	b.n	8029336 <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8029326:	687b      	ldr	r3, [r7, #4]
 8029328:	681b      	ldr	r3, [r3, #0]
 802932a:	685a      	ldr	r2, [r3, #4]
 802932c:	687b      	ldr	r3, [r7, #4]
 802932e:	681b      	ldr	r3, [r3, #0]
 8029330:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8029334:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8029336:	687b      	ldr	r3, [r7, #4]
 8029338:	681b      	ldr	r3, [r3, #0]
 802933a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 802933c:	687b      	ldr	r3, [r7, #4]
 802933e:	681b      	ldr	r3, [r3, #0]
 8029340:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8029344:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8029346:	687b      	ldr	r3, [r7, #4]
 8029348:	681b      	ldr	r3, [r3, #0]
 802934a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 802934c:	687b      	ldr	r3, [r7, #4]
 802934e:	69db      	ldr	r3, [r3, #28]
 8029350:	3b01      	subs	r3, #1
 8029352:	051a      	lsls	r2, r3, #20
 8029354:	687b      	ldr	r3, [r7, #4]
 8029356:	681b      	ldr	r3, [r3, #0]
 8029358:	430a      	orrs	r2, r1
 802935a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 802935c:	687b      	ldr	r3, [r7, #4]
 802935e:	681b      	ldr	r3, [r3, #0]
 8029360:	689a      	ldr	r2, [r3, #8]
 8029362:	687b      	ldr	r3, [r7, #4]
 8029364:	681b      	ldr	r3, [r3, #0]
 8029366:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 802936a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 802936c:	687b      	ldr	r3, [r7, #4]
 802936e:	681b      	ldr	r3, [r3, #0]
 8029370:	6899      	ldr	r1, [r3, #8]
 8029372:	687b      	ldr	r3, [r7, #4]
 8029374:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8029378:	025a      	lsls	r2, r3, #9
 802937a:	687b      	ldr	r3, [r7, #4]
 802937c:	681b      	ldr	r3, [r3, #0]
 802937e:	430a      	orrs	r2, r1
 8029380:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8029382:	687b      	ldr	r3, [r7, #4]
 8029384:	681b      	ldr	r3, [r3, #0]
 8029386:	689a      	ldr	r2, [r3, #8]
 8029388:	687b      	ldr	r3, [r7, #4]
 802938a:	681b      	ldr	r3, [r3, #0]
 802938c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8029390:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8029392:	687b      	ldr	r3, [r7, #4]
 8029394:	681b      	ldr	r3, [r3, #0]
 8029396:	6899      	ldr	r1, [r3, #8]
 8029398:	687b      	ldr	r3, [r7, #4]
 802939a:	695b      	ldr	r3, [r3, #20]
 802939c:	029a      	lsls	r2, r3, #10
 802939e:	687b      	ldr	r3, [r7, #4]
 80293a0:	681b      	ldr	r3, [r3, #0]
 80293a2:	430a      	orrs	r2, r1
 80293a4:	609a      	str	r2, [r3, #8]
}
 80293a6:	bf00      	nop
 80293a8:	3710      	adds	r7, #16
 80293aa:	46bd      	mov	sp, r7
 80293ac:	bd80      	pop	{r7, pc}
 80293ae:	bf00      	nop
 80293b0:	40012300 	.word	0x40012300
 80293b4:	0f000001 	.word	0x0f000001
 80293b8:	080380f8 	.word	0x080380f8

080293bc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80293bc:	b580      	push	{r7, lr}
 80293be:	b084      	sub	sp, #16
 80293c0:	af00      	add	r7, sp, #0
 80293c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80293c4:	687b      	ldr	r3, [r7, #4]
 80293c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80293c8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80293ca:	68fb      	ldr	r3, [r7, #12]
 80293cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80293ce:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80293d2:	2b00      	cmp	r3, #0
 80293d4:	d13d      	bne.n	8029452 <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80293d6:	68fb      	ldr	r3, [r7, #12]
 80293d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80293da:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80293de:	68fb      	ldr	r3, [r7, #12]
 80293e0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80293e2:	68fb      	ldr	r3, [r7, #12]
 80293e4:	681b      	ldr	r3, [r3, #0]
 80293e6:	689b      	ldr	r3, [r3, #8]
 80293e8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80293ec:	2b00      	cmp	r3, #0
 80293ee:	d12b      	bne.n	8029448 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80293f0:	68fb      	ldr	r3, [r7, #12]
 80293f2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80293f4:	2b00      	cmp	r3, #0
 80293f6:	d127      	bne.n	8029448 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80293f8:	68fb      	ldr	r3, [r7, #12]
 80293fa:	681b      	ldr	r3, [r3, #0]
 80293fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80293fe:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8029402:	2b00      	cmp	r3, #0
 8029404:	d006      	beq.n	8029414 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8029406:	68fb      	ldr	r3, [r7, #12]
 8029408:	681b      	ldr	r3, [r3, #0]
 802940a:	689b      	ldr	r3, [r3, #8]
 802940c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8029410:	2b00      	cmp	r3, #0
 8029412:	d119      	bne.n	8029448 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8029414:	68fb      	ldr	r3, [r7, #12]
 8029416:	681b      	ldr	r3, [r3, #0]
 8029418:	685a      	ldr	r2, [r3, #4]
 802941a:	68fb      	ldr	r3, [r7, #12]
 802941c:	681b      	ldr	r3, [r3, #0]
 802941e:	f022 0220 	bic.w	r2, r2, #32
 8029422:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8029424:	68fb      	ldr	r3, [r7, #12]
 8029426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8029428:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 802942c:	68fb      	ldr	r3, [r7, #12]
 802942e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8029430:	68fb      	ldr	r3, [r7, #12]
 8029432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8029434:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8029438:	2b00      	cmp	r3, #0
 802943a:	d105      	bne.n	8029448 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 802943c:	68fb      	ldr	r3, [r7, #12]
 802943e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8029440:	f043 0201 	orr.w	r2, r3, #1
 8029444:	68fb      	ldr	r3, [r7, #12]
 8029446:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8029448:	68fb      	ldr	r3, [r7, #12]
 802944a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 802944c:	68f8      	ldr	r0, [r7, #12]
 802944e:	4798      	blx	r3
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8029450:	e00f      	b.n	8029472 <ADC_DMAConvCplt+0xb6>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8029452:	68fb      	ldr	r3, [r7, #12]
 8029454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8029456:	f003 0310 	and.w	r3, r3, #16
 802945a:	2b00      	cmp	r3, #0
 802945c:	d004      	beq.n	8029468 <ADC_DMAConvCplt+0xac>
      hadc->ErrorCallback(hadc);
 802945e:	68fb      	ldr	r3, [r7, #12]
 8029460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8029462:	68f8      	ldr	r0, [r7, #12]
 8029464:	4798      	blx	r3
}
 8029466:	e004      	b.n	8029472 <ADC_DMAConvCplt+0xb6>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8029468:	68fb      	ldr	r3, [r7, #12]
 802946a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802946c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 802946e:	6878      	ldr	r0, [r7, #4]
 8029470:	4798      	blx	r3
}
 8029472:	bf00      	nop
 8029474:	3710      	adds	r7, #16
 8029476:	46bd      	mov	sp, r7
 8029478:	bd80      	pop	{r7, pc}

0802947a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 802947a:	b580      	push	{r7, lr}
 802947c:	b084      	sub	sp, #16
 802947e:	af00      	add	r7, sp, #0
 8029480:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8029482:	687b      	ldr	r3, [r7, #4]
 8029484:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8029486:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 8029488:	68fb      	ldr	r3, [r7, #12]
 802948a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 802948c:	68f8      	ldr	r0, [r7, #12]
 802948e:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8029490:	bf00      	nop
 8029492:	3710      	adds	r7, #16
 8029494:	46bd      	mov	sp, r7
 8029496:	bd80      	pop	{r7, pc}

08029498 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8029498:	b580      	push	{r7, lr}
 802949a:	b084      	sub	sp, #16
 802949c:	af00      	add	r7, sp, #0
 802949e:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80294a0:	687b      	ldr	r3, [r7, #4]
 80294a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80294a4:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80294a6:	68fb      	ldr	r3, [r7, #12]
 80294a8:	2240      	movs	r2, #64	@ 0x40
 80294aa:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80294ac:	68fb      	ldr	r3, [r7, #12]
 80294ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80294b0:	f043 0204 	orr.w	r2, r3, #4
 80294b4:	68fb      	ldr	r3, [r7, #12]
 80294b6:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 80294b8:	68fb      	ldr	r3, [r7, #12]
 80294ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80294bc:	68f8      	ldr	r0, [r7, #12]
 80294be:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80294c0:	bf00      	nop
 80294c2:	3710      	adds	r7, #16
 80294c4:	46bd      	mov	sp, r7
 80294c6:	bd80      	pop	{r7, pc}

080294c8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80294c8:	b480      	push	{r7}
 80294ca:	b083      	sub	sp, #12
 80294cc:	af00      	add	r7, sp, #0
 80294ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80294d0:	bf00      	nop
 80294d2:	370c      	adds	r7, #12
 80294d4:	46bd      	mov	sp, r7
 80294d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80294da:	4770      	bx	lr

080294dc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80294dc:	b580      	push	{r7, lr}
 80294de:	b084      	sub	sp, #16
 80294e0:	af00      	add	r7, sp, #0
 80294e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80294e4:	687b      	ldr	r3, [r7, #4]
 80294e6:	2b00      	cmp	r3, #0
 80294e8:	d101      	bne.n	80294ee <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80294ea:	2301      	movs	r3, #1
 80294ec:	e243      	b.n	8029976 <HAL_CAN_Init+0x49a>
  }

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 80294ee:	687b      	ldr	r3, [r7, #4]
 80294f0:	681b      	ldr	r3, [r3, #0]
 80294f2:	4a93      	ldr	r2, [pc, #588]	@ (8029740 <HAL_CAN_Init+0x264>)
 80294f4:	4293      	cmp	r3, r2
 80294f6:	d009      	beq.n	802950c <HAL_CAN_Init+0x30>
 80294f8:	687b      	ldr	r3, [r7, #4]
 80294fa:	681b      	ldr	r3, [r3, #0]
 80294fc:	4a91      	ldr	r2, [pc, #580]	@ (8029744 <HAL_CAN_Init+0x268>)
 80294fe:	4293      	cmp	r3, r2
 8029500:	d004      	beq.n	802950c <HAL_CAN_Init+0x30>
 8029502:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 8029506:	4890      	ldr	r0, [pc, #576]	@ (8029748 <HAL_CAN_Init+0x26c>)
 8029508:	f7fe fbf5 	bl	8027cf6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
 802950c:	687b      	ldr	r3, [r7, #4]
 802950e:	7e1b      	ldrb	r3, [r3, #24]
 8029510:	2b00      	cmp	r3, #0
 8029512:	d008      	beq.n	8029526 <HAL_CAN_Init+0x4a>
 8029514:	687b      	ldr	r3, [r7, #4]
 8029516:	7e1b      	ldrb	r3, [r3, #24]
 8029518:	2b01      	cmp	r3, #1
 802951a:	d004      	beq.n	8029526 <HAL_CAN_Init+0x4a>
 802951c:	f240 111f 	movw	r1, #287	@ 0x11f
 8029520:	4889      	ldr	r0, [pc, #548]	@ (8029748 <HAL_CAN_Init+0x26c>)
 8029522:	f7fe fbe8 	bl	8027cf6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
 8029526:	687b      	ldr	r3, [r7, #4]
 8029528:	7e5b      	ldrb	r3, [r3, #25]
 802952a:	2b00      	cmp	r3, #0
 802952c:	d008      	beq.n	8029540 <HAL_CAN_Init+0x64>
 802952e:	687b      	ldr	r3, [r7, #4]
 8029530:	7e5b      	ldrb	r3, [r3, #25]
 8029532:	2b01      	cmp	r3, #1
 8029534:	d004      	beq.n	8029540 <HAL_CAN_Init+0x64>
 8029536:	f44f 7190 	mov.w	r1, #288	@ 0x120
 802953a:	4883      	ldr	r0, [pc, #524]	@ (8029748 <HAL_CAN_Init+0x26c>)
 802953c:	f7fe fbdb 	bl	8027cf6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
 8029540:	687b      	ldr	r3, [r7, #4]
 8029542:	7e9b      	ldrb	r3, [r3, #26]
 8029544:	2b00      	cmp	r3, #0
 8029546:	d008      	beq.n	802955a <HAL_CAN_Init+0x7e>
 8029548:	687b      	ldr	r3, [r7, #4]
 802954a:	7e9b      	ldrb	r3, [r3, #26]
 802954c:	2b01      	cmp	r3, #1
 802954e:	d004      	beq.n	802955a <HAL_CAN_Init+0x7e>
 8029550:	f240 1121 	movw	r1, #289	@ 0x121
 8029554:	487c      	ldr	r0, [pc, #496]	@ (8029748 <HAL_CAN_Init+0x26c>)
 8029556:	f7fe fbce 	bl	8027cf6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
 802955a:	687b      	ldr	r3, [r7, #4]
 802955c:	7edb      	ldrb	r3, [r3, #27]
 802955e:	2b00      	cmp	r3, #0
 8029560:	d008      	beq.n	8029574 <HAL_CAN_Init+0x98>
 8029562:	687b      	ldr	r3, [r7, #4]
 8029564:	7edb      	ldrb	r3, [r3, #27]
 8029566:	2b01      	cmp	r3, #1
 8029568:	d004      	beq.n	8029574 <HAL_CAN_Init+0x98>
 802956a:	f44f 7191 	mov.w	r1, #290	@ 0x122
 802956e:	4876      	ldr	r0, [pc, #472]	@ (8029748 <HAL_CAN_Init+0x26c>)
 8029570:	f7fe fbc1 	bl	8027cf6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
 8029574:	687b      	ldr	r3, [r7, #4]
 8029576:	7f1b      	ldrb	r3, [r3, #28]
 8029578:	2b00      	cmp	r3, #0
 802957a:	d008      	beq.n	802958e <HAL_CAN_Init+0xb2>
 802957c:	687b      	ldr	r3, [r7, #4]
 802957e:	7f1b      	ldrb	r3, [r3, #28]
 8029580:	2b01      	cmp	r3, #1
 8029582:	d004      	beq.n	802958e <HAL_CAN_Init+0xb2>
 8029584:	f240 1123 	movw	r1, #291	@ 0x123
 8029588:	486f      	ldr	r0, [pc, #444]	@ (8029748 <HAL_CAN_Init+0x26c>)
 802958a:	f7fe fbb4 	bl	8027cf6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
 802958e:	687b      	ldr	r3, [r7, #4]
 8029590:	7f5b      	ldrb	r3, [r3, #29]
 8029592:	2b00      	cmp	r3, #0
 8029594:	d008      	beq.n	80295a8 <HAL_CAN_Init+0xcc>
 8029596:	687b      	ldr	r3, [r7, #4]
 8029598:	7f5b      	ldrb	r3, [r3, #29]
 802959a:	2b01      	cmp	r3, #1
 802959c:	d004      	beq.n	80295a8 <HAL_CAN_Init+0xcc>
 802959e:	f44f 7192 	mov.w	r1, #292	@ 0x124
 80295a2:	4869      	ldr	r0, [pc, #420]	@ (8029748 <HAL_CAN_Init+0x26c>)
 80295a4:	f7fe fba7 	bl	8027cf6 <assert_failed>
  assert_param(IS_CAN_MODE(hcan->Init.Mode));
 80295a8:	687b      	ldr	r3, [r7, #4]
 80295aa:	689b      	ldr	r3, [r3, #8]
 80295ac:	2b00      	cmp	r3, #0
 80295ae:	d013      	beq.n	80295d8 <HAL_CAN_Init+0xfc>
 80295b0:	687b      	ldr	r3, [r7, #4]
 80295b2:	689b      	ldr	r3, [r3, #8]
 80295b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80295b8:	d00e      	beq.n	80295d8 <HAL_CAN_Init+0xfc>
 80295ba:	687b      	ldr	r3, [r7, #4]
 80295bc:	689b      	ldr	r3, [r3, #8]
 80295be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80295c2:	d009      	beq.n	80295d8 <HAL_CAN_Init+0xfc>
 80295c4:	687b      	ldr	r3, [r7, #4]
 80295c6:	689b      	ldr	r3, [r3, #8]
 80295c8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80295cc:	d004      	beq.n	80295d8 <HAL_CAN_Init+0xfc>
 80295ce:	f240 1125 	movw	r1, #293	@ 0x125
 80295d2:	485d      	ldr	r0, [pc, #372]	@ (8029748 <HAL_CAN_Init+0x26c>)
 80295d4:	f7fe fb8f 	bl	8027cf6 <assert_failed>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
 80295d8:	687b      	ldr	r3, [r7, #4]
 80295da:	68db      	ldr	r3, [r3, #12]
 80295dc:	2b00      	cmp	r3, #0
 80295de:	d013      	beq.n	8029608 <HAL_CAN_Init+0x12c>
 80295e0:	687b      	ldr	r3, [r7, #4]
 80295e2:	68db      	ldr	r3, [r3, #12]
 80295e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80295e8:	d00e      	beq.n	8029608 <HAL_CAN_Init+0x12c>
 80295ea:	687b      	ldr	r3, [r7, #4]
 80295ec:	68db      	ldr	r3, [r3, #12]
 80295ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80295f2:	d009      	beq.n	8029608 <HAL_CAN_Init+0x12c>
 80295f4:	687b      	ldr	r3, [r7, #4]
 80295f6:	68db      	ldr	r3, [r3, #12]
 80295f8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80295fc:	d004      	beq.n	8029608 <HAL_CAN_Init+0x12c>
 80295fe:	f44f 7193 	mov.w	r1, #294	@ 0x126
 8029602:	4851      	ldr	r0, [pc, #324]	@ (8029748 <HAL_CAN_Init+0x26c>)
 8029604:	f7fe fb77 	bl	8027cf6 <assert_failed>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
 8029608:	687b      	ldr	r3, [r7, #4]
 802960a:	691b      	ldr	r3, [r3, #16]
 802960c:	2b00      	cmp	r3, #0
 802960e:	d04f      	beq.n	80296b0 <HAL_CAN_Init+0x1d4>
 8029610:	687b      	ldr	r3, [r7, #4]
 8029612:	691b      	ldr	r3, [r3, #16]
 8029614:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8029618:	d04a      	beq.n	80296b0 <HAL_CAN_Init+0x1d4>
 802961a:	687b      	ldr	r3, [r7, #4]
 802961c:	691b      	ldr	r3, [r3, #16]
 802961e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8029622:	d045      	beq.n	80296b0 <HAL_CAN_Init+0x1d4>
 8029624:	687b      	ldr	r3, [r7, #4]
 8029626:	691b      	ldr	r3, [r3, #16]
 8029628:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 802962c:	d040      	beq.n	80296b0 <HAL_CAN_Init+0x1d4>
 802962e:	687b      	ldr	r3, [r7, #4]
 8029630:	691b      	ldr	r3, [r3, #16]
 8029632:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8029636:	d03b      	beq.n	80296b0 <HAL_CAN_Init+0x1d4>
 8029638:	687b      	ldr	r3, [r7, #4]
 802963a:	691b      	ldr	r3, [r3, #16]
 802963c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8029640:	d036      	beq.n	80296b0 <HAL_CAN_Init+0x1d4>
 8029642:	687b      	ldr	r3, [r7, #4]
 8029644:	691b      	ldr	r3, [r3, #16]
 8029646:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 802964a:	d031      	beq.n	80296b0 <HAL_CAN_Init+0x1d4>
 802964c:	687b      	ldr	r3, [r7, #4]
 802964e:	691b      	ldr	r3, [r3, #16]
 8029650:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
 8029654:	d02c      	beq.n	80296b0 <HAL_CAN_Init+0x1d4>
 8029656:	687b      	ldr	r3, [r7, #4]
 8029658:	691b      	ldr	r3, [r3, #16]
 802965a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 802965e:	d027      	beq.n	80296b0 <HAL_CAN_Init+0x1d4>
 8029660:	687b      	ldr	r3, [r7, #4]
 8029662:	691b      	ldr	r3, [r3, #16]
 8029664:	f5b3 2f10 	cmp.w	r3, #589824	@ 0x90000
 8029668:	d022      	beq.n	80296b0 <HAL_CAN_Init+0x1d4>
 802966a:	687b      	ldr	r3, [r7, #4]
 802966c:	691b      	ldr	r3, [r3, #16]
 802966e:	f5b3 2f20 	cmp.w	r3, #655360	@ 0xa0000
 8029672:	d01d      	beq.n	80296b0 <HAL_CAN_Init+0x1d4>
 8029674:	687b      	ldr	r3, [r7, #4]
 8029676:	691b      	ldr	r3, [r3, #16]
 8029678:	f5b3 2f30 	cmp.w	r3, #720896	@ 0xb0000
 802967c:	d018      	beq.n	80296b0 <HAL_CAN_Init+0x1d4>
 802967e:	687b      	ldr	r3, [r7, #4]
 8029680:	691b      	ldr	r3, [r3, #16]
 8029682:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8029686:	d013      	beq.n	80296b0 <HAL_CAN_Init+0x1d4>
 8029688:	687b      	ldr	r3, [r7, #4]
 802968a:	691b      	ldr	r3, [r3, #16]
 802968c:	f5b3 2f50 	cmp.w	r3, #851968	@ 0xd0000
 8029690:	d00e      	beq.n	80296b0 <HAL_CAN_Init+0x1d4>
 8029692:	687b      	ldr	r3, [r7, #4]
 8029694:	691b      	ldr	r3, [r3, #16]
 8029696:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 802969a:	d009      	beq.n	80296b0 <HAL_CAN_Init+0x1d4>
 802969c:	687b      	ldr	r3, [r7, #4]
 802969e:	691b      	ldr	r3, [r3, #16]
 80296a0:	f5b3 2f70 	cmp.w	r3, #983040	@ 0xf0000
 80296a4:	d004      	beq.n	80296b0 <HAL_CAN_Init+0x1d4>
 80296a6:	f240 1127 	movw	r1, #295	@ 0x127
 80296aa:	4827      	ldr	r0, [pc, #156]	@ (8029748 <HAL_CAN_Init+0x26c>)
 80296ac:	f7fe fb23 	bl	8027cf6 <assert_failed>
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
 80296b0:	687b      	ldr	r3, [r7, #4]
 80296b2:	695b      	ldr	r3, [r3, #20]
 80296b4:	2b00      	cmp	r3, #0
 80296b6:	d027      	beq.n	8029708 <HAL_CAN_Init+0x22c>
 80296b8:	687b      	ldr	r3, [r7, #4]
 80296ba:	695b      	ldr	r3, [r3, #20]
 80296bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80296c0:	d022      	beq.n	8029708 <HAL_CAN_Init+0x22c>
 80296c2:	687b      	ldr	r3, [r7, #4]
 80296c4:	695b      	ldr	r3, [r3, #20]
 80296c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80296ca:	d01d      	beq.n	8029708 <HAL_CAN_Init+0x22c>
 80296cc:	687b      	ldr	r3, [r7, #4]
 80296ce:	695b      	ldr	r3, [r3, #20]
 80296d0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80296d4:	d018      	beq.n	8029708 <HAL_CAN_Init+0x22c>
 80296d6:	687b      	ldr	r3, [r7, #4]
 80296d8:	695b      	ldr	r3, [r3, #20]
 80296da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80296de:	d013      	beq.n	8029708 <HAL_CAN_Init+0x22c>
 80296e0:	687b      	ldr	r3, [r7, #4]
 80296e2:	695b      	ldr	r3, [r3, #20]
 80296e4:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80296e8:	d00e      	beq.n	8029708 <HAL_CAN_Init+0x22c>
 80296ea:	687b      	ldr	r3, [r7, #4]
 80296ec:	695b      	ldr	r3, [r3, #20]
 80296ee:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80296f2:	d009      	beq.n	8029708 <HAL_CAN_Init+0x22c>
 80296f4:	687b      	ldr	r3, [r7, #4]
 80296f6:	695b      	ldr	r3, [r3, #20]
 80296f8:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
 80296fc:	d004      	beq.n	8029708 <HAL_CAN_Init+0x22c>
 80296fe:	f44f 7194 	mov.w	r1, #296	@ 0x128
 8029702:	4811      	ldr	r0, [pc, #68]	@ (8029748 <HAL_CAN_Init+0x26c>)
 8029704:	f7fe faf7 	bl	8027cf6 <assert_failed>
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
 8029708:	687b      	ldr	r3, [r7, #4]
 802970a:	685b      	ldr	r3, [r3, #4]
 802970c:	2b00      	cmp	r3, #0
 802970e:	d004      	beq.n	802971a <HAL_CAN_Init+0x23e>
 8029710:	687b      	ldr	r3, [r7, #4]
 8029712:	685b      	ldr	r3, [r3, #4]
 8029714:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8029718:	d904      	bls.n	8029724 <HAL_CAN_Init+0x248>
 802971a:	f240 1129 	movw	r1, #297	@ 0x129
 802971e:	480a      	ldr	r0, [pc, #40]	@ (8029748 <HAL_CAN_Init+0x26c>)
 8029720:	f7fe fae9 	bl	8027cf6 <assert_failed>

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 8029724:	687b      	ldr	r3, [r7, #4]
 8029726:	f893 3020 	ldrb.w	r3, [r3, #32]
 802972a:	b2db      	uxtb	r3, r3
 802972c:	2b00      	cmp	r3, #0
 802972e:	d13d      	bne.n	80297ac <HAL_CAN_Init+0x2d0>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 8029730:	687b      	ldr	r3, [r7, #4]
 8029732:	4a06      	ldr	r2, [pc, #24]	@ (802974c <HAL_CAN_Init+0x270>)
 8029734:	641a      	str	r2, [r3, #64]	@ 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 8029736:	687b      	ldr	r3, [r7, #4]
 8029738:	4a05      	ldr	r2, [pc, #20]	@ (8029750 <HAL_CAN_Init+0x274>)
 802973a:	645a      	str	r2, [r3, #68]	@ 0x44
 802973c:	e00a      	b.n	8029754 <HAL_CAN_Init+0x278>
 802973e:	bf00      	nop
 8029740:	40006400 	.word	0x40006400
 8029744:	40006800 	.word	0x40006800
 8029748:	0803816c 	.word	0x0803816c
 802974c:	08023579 	.word	0x08023579
 8029750:	080239dd 	.word	0x080239dd
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 8029754:	687b      	ldr	r3, [r7, #4]
 8029756:	4a8a      	ldr	r2, [pc, #552]	@ (8029980 <HAL_CAN_Init+0x4a4>)
 8029758:	649a      	str	r2, [r3, #72]	@ 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 802975a:	687b      	ldr	r3, [r7, #4]
 802975c:	4a89      	ldr	r2, [pc, #548]	@ (8029984 <HAL_CAN_Init+0x4a8>)
 802975e:	64da      	str	r2, [r3, #76]	@ 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 8029760:	687b      	ldr	r3, [r7, #4]
 8029762:	4a89      	ldr	r2, [pc, #548]	@ (8029988 <HAL_CAN_Init+0x4ac>)
 8029764:	629a      	str	r2, [r3, #40]	@ 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 8029766:	687b      	ldr	r3, [r7, #4]
 8029768:	4a88      	ldr	r2, [pc, #544]	@ (802998c <HAL_CAN_Init+0x4b0>)
 802976a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 802976c:	687b      	ldr	r3, [r7, #4]
 802976e:	4a88      	ldr	r2, [pc, #544]	@ (8029990 <HAL_CAN_Init+0x4b4>)
 8029770:	631a      	str	r2, [r3, #48]	@ 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 8029772:	687b      	ldr	r3, [r7, #4]
 8029774:	4a87      	ldr	r2, [pc, #540]	@ (8029994 <HAL_CAN_Init+0x4b8>)
 8029776:	635a      	str	r2, [r3, #52]	@ 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 8029778:	687b      	ldr	r3, [r7, #4]
 802977a:	4a87      	ldr	r2, [pc, #540]	@ (8029998 <HAL_CAN_Init+0x4bc>)
 802977c:	639a      	str	r2, [r3, #56]	@ 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 802977e:	687b      	ldr	r3, [r7, #4]
 8029780:	4a86      	ldr	r2, [pc, #536]	@ (802999c <HAL_CAN_Init+0x4c0>)
 8029782:	63da      	str	r2, [r3, #60]	@ 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 8029784:	687b      	ldr	r3, [r7, #4]
 8029786:	4a86      	ldr	r2, [pc, #536]	@ (80299a0 <HAL_CAN_Init+0x4c4>)
 8029788:	651a      	str	r2, [r3, #80]	@ 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 802978a:	687b      	ldr	r3, [r7, #4]
 802978c:	4a85      	ldr	r2, [pc, #532]	@ (80299a4 <HAL_CAN_Init+0x4c8>)
 802978e:	655a      	str	r2, [r3, #84]	@ 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 8029790:	687b      	ldr	r3, [r7, #4]
 8029792:	4a85      	ldr	r2, [pc, #532]	@ (80299a8 <HAL_CAN_Init+0x4cc>)
 8029794:	659a      	str	r2, [r3, #88]	@ 0x58

    if (hcan->MspInitCallback == NULL)
 8029796:	687b      	ldr	r3, [r7, #4]
 8029798:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 802979a:	2b00      	cmp	r3, #0
 802979c:	d102      	bne.n	80297a4 <HAL_CAN_Init+0x2c8>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 802979e:	687b      	ldr	r3, [r7, #4]
 80297a0:	4a82      	ldr	r2, [pc, #520]	@ (80299ac <HAL_CAN_Init+0x4d0>)
 80297a2:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 80297a4:	687b      	ldr	r3, [r7, #4]
 80297a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80297a8:	6878      	ldr	r0, [r7, #4]
 80297aa:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80297ac:	687b      	ldr	r3, [r7, #4]
 80297ae:	681b      	ldr	r3, [r3, #0]
 80297b0:	681a      	ldr	r2, [r3, #0]
 80297b2:	687b      	ldr	r3, [r7, #4]
 80297b4:	681b      	ldr	r3, [r3, #0]
 80297b6:	f042 0201 	orr.w	r2, r2, #1
 80297ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80297bc:	f7fe fe8e 	bl	80284dc <HAL_GetTick>
 80297c0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80297c2:	e012      	b.n	80297ea <HAL_CAN_Init+0x30e>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80297c4:	f7fe fe8a 	bl	80284dc <HAL_GetTick>
 80297c8:	4602      	mov	r2, r0
 80297ca:	68fb      	ldr	r3, [r7, #12]
 80297cc:	1ad3      	subs	r3, r2, r3
 80297ce:	2b0a      	cmp	r3, #10
 80297d0:	d90b      	bls.n	80297ea <HAL_CAN_Init+0x30e>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80297d2:	687b      	ldr	r3, [r7, #4]
 80297d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80297d6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80297da:	687b      	ldr	r3, [r7, #4]
 80297dc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80297de:	687b      	ldr	r3, [r7, #4]
 80297e0:	2205      	movs	r2, #5
 80297e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80297e6:	2301      	movs	r3, #1
 80297e8:	e0c5      	b.n	8029976 <HAL_CAN_Init+0x49a>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80297ea:	687b      	ldr	r3, [r7, #4]
 80297ec:	681b      	ldr	r3, [r3, #0]
 80297ee:	685b      	ldr	r3, [r3, #4]
 80297f0:	f003 0301 	and.w	r3, r3, #1
 80297f4:	2b00      	cmp	r3, #0
 80297f6:	d0e5      	beq.n	80297c4 <HAL_CAN_Init+0x2e8>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80297f8:	687b      	ldr	r3, [r7, #4]
 80297fa:	681b      	ldr	r3, [r3, #0]
 80297fc:	681a      	ldr	r2, [r3, #0]
 80297fe:	687b      	ldr	r3, [r7, #4]
 8029800:	681b      	ldr	r3, [r3, #0]
 8029802:	f022 0202 	bic.w	r2, r2, #2
 8029806:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8029808:	f7fe fe68 	bl	80284dc <HAL_GetTick>
 802980c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 802980e:	e012      	b.n	8029836 <HAL_CAN_Init+0x35a>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8029810:	f7fe fe64 	bl	80284dc <HAL_GetTick>
 8029814:	4602      	mov	r2, r0
 8029816:	68fb      	ldr	r3, [r7, #12]
 8029818:	1ad3      	subs	r3, r2, r3
 802981a:	2b0a      	cmp	r3, #10
 802981c:	d90b      	bls.n	8029836 <HAL_CAN_Init+0x35a>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 802981e:	687b      	ldr	r3, [r7, #4]
 8029820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8029822:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8029826:	687b      	ldr	r3, [r7, #4]
 8029828:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 802982a:	687b      	ldr	r3, [r7, #4]
 802982c:	2205      	movs	r2, #5
 802982e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8029832:	2301      	movs	r3, #1
 8029834:	e09f      	b.n	8029976 <HAL_CAN_Init+0x49a>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8029836:	687b      	ldr	r3, [r7, #4]
 8029838:	681b      	ldr	r3, [r3, #0]
 802983a:	685b      	ldr	r3, [r3, #4]
 802983c:	f003 0302 	and.w	r3, r3, #2
 8029840:	2b00      	cmp	r3, #0
 8029842:	d1e5      	bne.n	8029810 <HAL_CAN_Init+0x334>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8029844:	687b      	ldr	r3, [r7, #4]
 8029846:	7e1b      	ldrb	r3, [r3, #24]
 8029848:	2b01      	cmp	r3, #1
 802984a:	d108      	bne.n	802985e <HAL_CAN_Init+0x382>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 802984c:	687b      	ldr	r3, [r7, #4]
 802984e:	681b      	ldr	r3, [r3, #0]
 8029850:	681a      	ldr	r2, [r3, #0]
 8029852:	687b      	ldr	r3, [r7, #4]
 8029854:	681b      	ldr	r3, [r3, #0]
 8029856:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 802985a:	601a      	str	r2, [r3, #0]
 802985c:	e007      	b.n	802986e <HAL_CAN_Init+0x392>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 802985e:	687b      	ldr	r3, [r7, #4]
 8029860:	681b      	ldr	r3, [r3, #0]
 8029862:	681a      	ldr	r2, [r3, #0]
 8029864:	687b      	ldr	r3, [r7, #4]
 8029866:	681b      	ldr	r3, [r3, #0]
 8029868:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 802986c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 802986e:	687b      	ldr	r3, [r7, #4]
 8029870:	7e5b      	ldrb	r3, [r3, #25]
 8029872:	2b01      	cmp	r3, #1
 8029874:	d108      	bne.n	8029888 <HAL_CAN_Init+0x3ac>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8029876:	687b      	ldr	r3, [r7, #4]
 8029878:	681b      	ldr	r3, [r3, #0]
 802987a:	681a      	ldr	r2, [r3, #0]
 802987c:	687b      	ldr	r3, [r7, #4]
 802987e:	681b      	ldr	r3, [r3, #0]
 8029880:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8029884:	601a      	str	r2, [r3, #0]
 8029886:	e007      	b.n	8029898 <HAL_CAN_Init+0x3bc>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8029888:	687b      	ldr	r3, [r7, #4]
 802988a:	681b      	ldr	r3, [r3, #0]
 802988c:	681a      	ldr	r2, [r3, #0]
 802988e:	687b      	ldr	r3, [r7, #4]
 8029890:	681b      	ldr	r3, [r3, #0]
 8029892:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8029896:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8029898:	687b      	ldr	r3, [r7, #4]
 802989a:	7e9b      	ldrb	r3, [r3, #26]
 802989c:	2b01      	cmp	r3, #1
 802989e:	d108      	bne.n	80298b2 <HAL_CAN_Init+0x3d6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80298a0:	687b      	ldr	r3, [r7, #4]
 80298a2:	681b      	ldr	r3, [r3, #0]
 80298a4:	681a      	ldr	r2, [r3, #0]
 80298a6:	687b      	ldr	r3, [r7, #4]
 80298a8:	681b      	ldr	r3, [r3, #0]
 80298aa:	f042 0220 	orr.w	r2, r2, #32
 80298ae:	601a      	str	r2, [r3, #0]
 80298b0:	e007      	b.n	80298c2 <HAL_CAN_Init+0x3e6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80298b2:	687b      	ldr	r3, [r7, #4]
 80298b4:	681b      	ldr	r3, [r3, #0]
 80298b6:	681a      	ldr	r2, [r3, #0]
 80298b8:	687b      	ldr	r3, [r7, #4]
 80298ba:	681b      	ldr	r3, [r3, #0]
 80298bc:	f022 0220 	bic.w	r2, r2, #32
 80298c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80298c2:	687b      	ldr	r3, [r7, #4]
 80298c4:	7edb      	ldrb	r3, [r3, #27]
 80298c6:	2b01      	cmp	r3, #1
 80298c8:	d108      	bne.n	80298dc <HAL_CAN_Init+0x400>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80298ca:	687b      	ldr	r3, [r7, #4]
 80298cc:	681b      	ldr	r3, [r3, #0]
 80298ce:	681a      	ldr	r2, [r3, #0]
 80298d0:	687b      	ldr	r3, [r7, #4]
 80298d2:	681b      	ldr	r3, [r3, #0]
 80298d4:	f022 0210 	bic.w	r2, r2, #16
 80298d8:	601a      	str	r2, [r3, #0]
 80298da:	e007      	b.n	80298ec <HAL_CAN_Init+0x410>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80298dc:	687b      	ldr	r3, [r7, #4]
 80298de:	681b      	ldr	r3, [r3, #0]
 80298e0:	681a      	ldr	r2, [r3, #0]
 80298e2:	687b      	ldr	r3, [r7, #4]
 80298e4:	681b      	ldr	r3, [r3, #0]
 80298e6:	f042 0210 	orr.w	r2, r2, #16
 80298ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80298ec:	687b      	ldr	r3, [r7, #4]
 80298ee:	7f1b      	ldrb	r3, [r3, #28]
 80298f0:	2b01      	cmp	r3, #1
 80298f2:	d108      	bne.n	8029906 <HAL_CAN_Init+0x42a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80298f4:	687b      	ldr	r3, [r7, #4]
 80298f6:	681b      	ldr	r3, [r3, #0]
 80298f8:	681a      	ldr	r2, [r3, #0]
 80298fa:	687b      	ldr	r3, [r7, #4]
 80298fc:	681b      	ldr	r3, [r3, #0]
 80298fe:	f042 0208 	orr.w	r2, r2, #8
 8029902:	601a      	str	r2, [r3, #0]
 8029904:	e007      	b.n	8029916 <HAL_CAN_Init+0x43a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8029906:	687b      	ldr	r3, [r7, #4]
 8029908:	681b      	ldr	r3, [r3, #0]
 802990a:	681a      	ldr	r2, [r3, #0]
 802990c:	687b      	ldr	r3, [r7, #4]
 802990e:	681b      	ldr	r3, [r3, #0]
 8029910:	f022 0208 	bic.w	r2, r2, #8
 8029914:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8029916:	687b      	ldr	r3, [r7, #4]
 8029918:	7f5b      	ldrb	r3, [r3, #29]
 802991a:	2b01      	cmp	r3, #1
 802991c:	d108      	bne.n	8029930 <HAL_CAN_Init+0x454>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 802991e:	687b      	ldr	r3, [r7, #4]
 8029920:	681b      	ldr	r3, [r3, #0]
 8029922:	681a      	ldr	r2, [r3, #0]
 8029924:	687b      	ldr	r3, [r7, #4]
 8029926:	681b      	ldr	r3, [r3, #0]
 8029928:	f042 0204 	orr.w	r2, r2, #4
 802992c:	601a      	str	r2, [r3, #0]
 802992e:	e007      	b.n	8029940 <HAL_CAN_Init+0x464>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8029930:	687b      	ldr	r3, [r7, #4]
 8029932:	681b      	ldr	r3, [r3, #0]
 8029934:	681a      	ldr	r2, [r3, #0]
 8029936:	687b      	ldr	r3, [r7, #4]
 8029938:	681b      	ldr	r3, [r3, #0]
 802993a:	f022 0204 	bic.w	r2, r2, #4
 802993e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8029940:	687b      	ldr	r3, [r7, #4]
 8029942:	689a      	ldr	r2, [r3, #8]
 8029944:	687b      	ldr	r3, [r7, #4]
 8029946:	68db      	ldr	r3, [r3, #12]
 8029948:	431a      	orrs	r2, r3
 802994a:	687b      	ldr	r3, [r7, #4]
 802994c:	691b      	ldr	r3, [r3, #16]
 802994e:	431a      	orrs	r2, r3
 8029950:	687b      	ldr	r3, [r7, #4]
 8029952:	695b      	ldr	r3, [r3, #20]
 8029954:	ea42 0103 	orr.w	r1, r2, r3
 8029958:	687b      	ldr	r3, [r7, #4]
 802995a:	685b      	ldr	r3, [r3, #4]
 802995c:	1e5a      	subs	r2, r3, #1
 802995e:	687b      	ldr	r3, [r7, #4]
 8029960:	681b      	ldr	r3, [r3, #0]
 8029962:	430a      	orrs	r2, r1
 8029964:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8029966:	687b      	ldr	r3, [r7, #4]
 8029968:	2200      	movs	r2, #0
 802996a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 802996c:	687b      	ldr	r3, [r7, #4]
 802996e:	2201      	movs	r2, #1
 8029970:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8029974:	2300      	movs	r3, #0
}
 8029976:	4618      	mov	r0, r3
 8029978:	3710      	adds	r7, #16
 802997a:	46bd      	mov	sp, r7
 802997c:	bd80      	pop	{r7, pc}
 802997e:	bf00      	nop
 8029980:	0802a76b 	.word	0x0802a76b
 8029984:	0802a77f 	.word	0x0802a77f
 8029988:	0802a6f3 	.word	0x0802a6f3
 802998c:	0802a707 	.word	0x0802a707
 8029990:	0802a71b 	.word	0x0802a71b
 8029994:	0802a72f 	.word	0x0802a72f
 8029998:	0802a743 	.word	0x0802a743
 802999c:	0802a757 	.word	0x0802a757
 80299a0:	0802a793 	.word	0x0802a793
 80299a4:	0802a7a7 	.word	0x0802a7a7
 80299a8:	080232c9 	.word	0x080232c9
 80299ac:	08026d11 	.word	0x08026d11

080299b0 <HAL_CAN_DeInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
{
 80299b0:	b580      	push	{r7, lr}
 80299b2:	b082      	sub	sp, #8
 80299b4:	af00      	add	r7, sp, #0
 80299b6:	6078      	str	r0, [r7, #4]
  /* Check CAN handle */
  if (hcan == NULL)
 80299b8:	687b      	ldr	r3, [r7, #4]
 80299ba:	2b00      	cmp	r3, #0
 80299bc:	d101      	bne.n	80299c2 <HAL_CAN_DeInit+0x12>
  {
    return HAL_ERROR;
 80299be:	2301      	movs	r3, #1
 80299c0:	e02c      	b.n	8029a1c <HAL_CAN_DeInit+0x6c>
  }

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 80299c2:	687b      	ldr	r3, [r7, #4]
 80299c4:	681b      	ldr	r3, [r3, #0]
 80299c6:	4a17      	ldr	r2, [pc, #92]	@ (8029a24 <HAL_CAN_DeInit+0x74>)
 80299c8:	4293      	cmp	r3, r2
 80299ca:	d009      	beq.n	80299e0 <HAL_CAN_DeInit+0x30>
 80299cc:	687b      	ldr	r3, [r7, #4]
 80299ce:	681b      	ldr	r3, [r3, #0]
 80299d0:	4a15      	ldr	r2, [pc, #84]	@ (8029a28 <HAL_CAN_DeInit+0x78>)
 80299d2:	4293      	cmp	r3, r2
 80299d4:	d004      	beq.n	80299e0 <HAL_CAN_DeInit+0x30>
 80299d6:	f240 11d5 	movw	r1, #469	@ 0x1d5
 80299da:	4814      	ldr	r0, [pc, #80]	@ (8029a2c <HAL_CAN_DeInit+0x7c>)
 80299dc:	f7fe f98b 	bl	8027cf6 <assert_failed>

  /* Stop the CAN module */
  (void)HAL_CAN_Stop(hcan);
 80299e0:	6878      	ldr	r0, [r7, #4]
 80299e2:	f000 f9b9 	bl	8029d58 <HAL_CAN_Stop>

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->MspDeInitCallback == NULL)
 80299e6:	687b      	ldr	r3, [r7, #4]
 80299e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80299ea:	2b00      	cmp	r3, #0
 80299ec:	d102      	bne.n	80299f4 <HAL_CAN_DeInit+0x44>
  {
    hcan->MspDeInitCallback = HAL_CAN_MspDeInit; /* Legacy weak MspDeInit */
 80299ee:	687b      	ldr	r3, [r7, #4]
 80299f0:	4a0f      	ldr	r2, [pc, #60]	@ (8029a30 <HAL_CAN_DeInit+0x80>)
 80299f2:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* DeInit the low level hardware: CLOCK, NVIC */
  hcan->MspDeInitCallback(hcan);
 80299f4:	687b      	ldr	r3, [r7, #4]
 80299f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80299f8:	6878      	ldr	r0, [r7, #4]
 80299fa:	4798      	blx	r3
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_CAN_MspDeInit(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Reset the CAN peripheral */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 80299fc:	687b      	ldr	r3, [r7, #4]
 80299fe:	681b      	ldr	r3, [r3, #0]
 8029a00:	681a      	ldr	r2, [r3, #0]
 8029a02:	687b      	ldr	r3, [r7, #4]
 8029a04:	681b      	ldr	r3, [r3, #0]
 8029a06:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8029a0a:	601a      	str	r2, [r3, #0]

  /* Reset the CAN ErrorCode */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8029a0c:	687b      	ldr	r3, [r7, #4]
 8029a0e:	2200      	movs	r2, #0
 8029a10:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change CAN state */
  hcan->State = HAL_CAN_STATE_RESET;
 8029a12:	687b      	ldr	r3, [r7, #4]
 8029a14:	2200      	movs	r2, #0
 8029a16:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8029a1a:	2300      	movs	r3, #0
}
 8029a1c:	4618      	mov	r0, r3
 8029a1e:	3708      	adds	r7, #8
 8029a20:	46bd      	mov	sp, r7
 8029a22:	bd80      	pop	{r7, pc}
 8029a24:	40006400 	.word	0x40006400
 8029a28:	40006800 	.word	0x40006800
 8029a2c:	0803816c 	.word	0x0803816c
 8029a30:	08026dc5 	.word	0x08026dc5

08029a34 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8029a34:	b580      	push	{r7, lr}
 8029a36:	b086      	sub	sp, #24
 8029a38:	af00      	add	r7, sp, #0
 8029a3a:	6078      	str	r0, [r7, #4]
 8029a3c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8029a3e:	687b      	ldr	r3, [r7, #4]
 8029a40:	681b      	ldr	r3, [r3, #0]
 8029a42:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8029a44:	687b      	ldr	r3, [r7, #4]
 8029a46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8029a4a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8029a4c:	7cfb      	ldrb	r3, [r7, #19]
 8029a4e:	2b01      	cmp	r3, #1
 8029a50:	d003      	beq.n	8029a5a <HAL_CAN_ConfigFilter+0x26>
 8029a52:	7cfb      	ldrb	r3, [r7, #19]
 8029a54:	2b02      	cmp	r3, #2
 8029a56:	f040 812c 	bne.w	8029cb2 <HAL_CAN_ConfigFilter+0x27e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdHigh));
 8029a5a:	683b      	ldr	r3, [r7, #0]
 8029a5c:	681b      	ldr	r3, [r3, #0]
 8029a5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8029a62:	d304      	bcc.n	8029a6e <HAL_CAN_ConfigFilter+0x3a>
 8029a64:	f240 3152 	movw	r1, #850	@ 0x352
 8029a68:	4897      	ldr	r0, [pc, #604]	@ (8029cc8 <HAL_CAN_ConfigFilter+0x294>)
 8029a6a:	f7fe f944 	bl	8027cf6 <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdLow));
 8029a6e:	683b      	ldr	r3, [r7, #0]
 8029a70:	685b      	ldr	r3, [r3, #4]
 8029a72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8029a76:	d304      	bcc.n	8029a82 <HAL_CAN_ConfigFilter+0x4e>
 8029a78:	f240 3153 	movw	r1, #851	@ 0x353
 8029a7c:	4892      	ldr	r0, [pc, #584]	@ (8029cc8 <HAL_CAN_ConfigFilter+0x294>)
 8029a7e:	f7fe f93a 	bl	8027cf6 <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdHigh));
 8029a82:	683b      	ldr	r3, [r7, #0]
 8029a84:	689b      	ldr	r3, [r3, #8]
 8029a86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8029a8a:	d304      	bcc.n	8029a96 <HAL_CAN_ConfigFilter+0x62>
 8029a8c:	f44f 7155 	mov.w	r1, #852	@ 0x354
 8029a90:	488d      	ldr	r0, [pc, #564]	@ (8029cc8 <HAL_CAN_ConfigFilter+0x294>)
 8029a92:	f7fe f930 	bl	8027cf6 <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdLow));
 8029a96:	683b      	ldr	r3, [r7, #0]
 8029a98:	68db      	ldr	r3, [r3, #12]
 8029a9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8029a9e:	d304      	bcc.n	8029aaa <HAL_CAN_ConfigFilter+0x76>
 8029aa0:	f240 3155 	movw	r1, #853	@ 0x355
 8029aa4:	4888      	ldr	r0, [pc, #544]	@ (8029cc8 <HAL_CAN_ConfigFilter+0x294>)
 8029aa6:	f7fe f926 	bl	8027cf6 <assert_failed>
    assert_param(IS_CAN_FILTER_MODE(sFilterConfig->FilterMode));
 8029aaa:	683b      	ldr	r3, [r7, #0]
 8029aac:	699b      	ldr	r3, [r3, #24]
 8029aae:	2b00      	cmp	r3, #0
 8029ab0:	d008      	beq.n	8029ac4 <HAL_CAN_ConfigFilter+0x90>
 8029ab2:	683b      	ldr	r3, [r7, #0]
 8029ab4:	699b      	ldr	r3, [r3, #24]
 8029ab6:	2b01      	cmp	r3, #1
 8029ab8:	d004      	beq.n	8029ac4 <HAL_CAN_ConfigFilter+0x90>
 8029aba:	f240 3156 	movw	r1, #854	@ 0x356
 8029abe:	4882      	ldr	r0, [pc, #520]	@ (8029cc8 <HAL_CAN_ConfigFilter+0x294>)
 8029ac0:	f7fe f919 	bl	8027cf6 <assert_failed>
    assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
 8029ac4:	683b      	ldr	r3, [r7, #0]
 8029ac6:	69db      	ldr	r3, [r3, #28]
 8029ac8:	2b00      	cmp	r3, #0
 8029aca:	d008      	beq.n	8029ade <HAL_CAN_ConfigFilter+0xaa>
 8029acc:	683b      	ldr	r3, [r7, #0]
 8029ace:	69db      	ldr	r3, [r3, #28]
 8029ad0:	2b01      	cmp	r3, #1
 8029ad2:	d004      	beq.n	8029ade <HAL_CAN_ConfigFilter+0xaa>
 8029ad4:	f240 3157 	movw	r1, #855	@ 0x357
 8029ad8:	487b      	ldr	r0, [pc, #492]	@ (8029cc8 <HAL_CAN_ConfigFilter+0x294>)
 8029ada:	f7fe f90c 	bl	8027cf6 <assert_failed>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
 8029ade:	683b      	ldr	r3, [r7, #0]
 8029ae0:	691b      	ldr	r3, [r3, #16]
 8029ae2:	2b00      	cmp	r3, #0
 8029ae4:	d008      	beq.n	8029af8 <HAL_CAN_ConfigFilter+0xc4>
 8029ae6:	683b      	ldr	r3, [r7, #0]
 8029ae8:	691b      	ldr	r3, [r3, #16]
 8029aea:	2b01      	cmp	r3, #1
 8029aec:	d004      	beq.n	8029af8 <HAL_CAN_ConfigFilter+0xc4>
 8029aee:	f44f 7156 	mov.w	r1, #856	@ 0x358
 8029af2:	4875      	ldr	r0, [pc, #468]	@ (8029cc8 <HAL_CAN_ConfigFilter+0x294>)
 8029af4:	f7fe f8ff 	bl	8027cf6 <assert_failed>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));
 8029af8:	683b      	ldr	r3, [r7, #0]
 8029afa:	6a1b      	ldr	r3, [r3, #32]
 8029afc:	2b00      	cmp	r3, #0
 8029afe:	d008      	beq.n	8029b12 <HAL_CAN_ConfigFilter+0xde>
 8029b00:	683b      	ldr	r3, [r7, #0]
 8029b02:	6a1b      	ldr	r3, [r3, #32]
 8029b04:	2b01      	cmp	r3, #1
 8029b06:	d004      	beq.n	8029b12 <HAL_CAN_ConfigFilter+0xde>
 8029b08:	f240 3159 	movw	r1, #857	@ 0x359
 8029b0c:	486e      	ldr	r0, [pc, #440]	@ (8029cc8 <HAL_CAN_ConfigFilter+0x294>)
 8029b0e:	f7fe f8f2 	bl	8027cf6 <assert_failed>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8029b12:	4b6e      	ldr	r3, [pc, #440]	@ (8029ccc <HAL_CAN_ConfigFilter+0x298>)
 8029b14:	617b      	str	r3, [r7, #20]

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->FilterBank));
 8029b16:	683b      	ldr	r3, [r7, #0]
 8029b18:	695b      	ldr	r3, [r3, #20]
 8029b1a:	2b1b      	cmp	r3, #27
 8029b1c:	d904      	bls.n	8029b28 <HAL_CAN_ConfigFilter+0xf4>
 8029b1e:	f44f 715d 	mov.w	r1, #884	@ 0x374
 8029b22:	4869      	ldr	r0, [pc, #420]	@ (8029cc8 <HAL_CAN_ConfigFilter+0x294>)
 8029b24:	f7fe f8e7 	bl	8027cf6 <assert_failed>
    assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
 8029b28:	683b      	ldr	r3, [r7, #0]
 8029b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8029b2c:	2b1b      	cmp	r3, #27
 8029b2e:	d904      	bls.n	8029b3a <HAL_CAN_ConfigFilter+0x106>
 8029b30:	f240 3175 	movw	r1, #885	@ 0x375
 8029b34:	4864      	ldr	r0, [pc, #400]	@ (8029cc8 <HAL_CAN_ConfigFilter+0x294>)
 8029b36:	f7fe f8de 	bl	8027cf6 <assert_failed>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8029b3a:	697b      	ldr	r3, [r7, #20]
 8029b3c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8029b40:	f043 0201 	orr.w	r2, r3, #1
 8029b44:	697b      	ldr	r3, [r7, #20]
 8029b46:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8029b4a:	697b      	ldr	r3, [r7, #20]
 8029b4c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8029b50:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8029b54:	697b      	ldr	r3, [r7, #20]
 8029b56:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8029b5a:	697b      	ldr	r3, [r7, #20]
 8029b5c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8029b60:	683b      	ldr	r3, [r7, #0]
 8029b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8029b64:	021b      	lsls	r3, r3, #8
 8029b66:	431a      	orrs	r2, r3
 8029b68:	697b      	ldr	r3, [r7, #20]
 8029b6a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8029b6e:	683b      	ldr	r3, [r7, #0]
 8029b70:	695b      	ldr	r3, [r3, #20]
 8029b72:	f003 031f 	and.w	r3, r3, #31
 8029b76:	2201      	movs	r2, #1
 8029b78:	fa02 f303 	lsl.w	r3, r2, r3
 8029b7c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8029b7e:	697b      	ldr	r3, [r7, #20]
 8029b80:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8029b84:	68fb      	ldr	r3, [r7, #12]
 8029b86:	43db      	mvns	r3, r3
 8029b88:	401a      	ands	r2, r3
 8029b8a:	697b      	ldr	r3, [r7, #20]
 8029b8c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8029b90:	683b      	ldr	r3, [r7, #0]
 8029b92:	69db      	ldr	r3, [r3, #28]
 8029b94:	2b00      	cmp	r3, #0
 8029b96:	d123      	bne.n	8029be0 <HAL_CAN_ConfigFilter+0x1ac>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8029b98:	697b      	ldr	r3, [r7, #20]
 8029b9a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8029b9e:	68fb      	ldr	r3, [r7, #12]
 8029ba0:	43db      	mvns	r3, r3
 8029ba2:	401a      	ands	r2, r3
 8029ba4:	697b      	ldr	r3, [r7, #20]
 8029ba6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8029baa:	683b      	ldr	r3, [r7, #0]
 8029bac:	68db      	ldr	r3, [r3, #12]
 8029bae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8029bb0:	683b      	ldr	r3, [r7, #0]
 8029bb2:	685b      	ldr	r3, [r3, #4]
 8029bb4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8029bb6:	683a      	ldr	r2, [r7, #0]
 8029bb8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8029bba:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8029bbc:	697b      	ldr	r3, [r7, #20]
 8029bbe:	3248      	adds	r2, #72	@ 0x48
 8029bc0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8029bc4:	683b      	ldr	r3, [r7, #0]
 8029bc6:	689b      	ldr	r3, [r3, #8]
 8029bc8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8029bca:	683b      	ldr	r3, [r7, #0]
 8029bcc:	681b      	ldr	r3, [r3, #0]
 8029bce:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8029bd0:	683b      	ldr	r3, [r7, #0]
 8029bd2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8029bd4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8029bd6:	6979      	ldr	r1, [r7, #20]
 8029bd8:	3348      	adds	r3, #72	@ 0x48
 8029bda:	00db      	lsls	r3, r3, #3
 8029bdc:	440b      	add	r3, r1
 8029bde:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8029be0:	683b      	ldr	r3, [r7, #0]
 8029be2:	69db      	ldr	r3, [r3, #28]
 8029be4:	2b01      	cmp	r3, #1
 8029be6:	d122      	bne.n	8029c2e <HAL_CAN_ConfigFilter+0x1fa>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8029be8:	697b      	ldr	r3, [r7, #20]
 8029bea:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8029bee:	68fb      	ldr	r3, [r7, #12]
 8029bf0:	431a      	orrs	r2, r3
 8029bf2:	697b      	ldr	r3, [r7, #20]
 8029bf4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8029bf8:	683b      	ldr	r3, [r7, #0]
 8029bfa:	681b      	ldr	r3, [r3, #0]
 8029bfc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8029bfe:	683b      	ldr	r3, [r7, #0]
 8029c00:	685b      	ldr	r3, [r3, #4]
 8029c02:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8029c04:	683a      	ldr	r2, [r7, #0]
 8029c06:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8029c08:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8029c0a:	697b      	ldr	r3, [r7, #20]
 8029c0c:	3248      	adds	r2, #72	@ 0x48
 8029c0e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8029c12:	683b      	ldr	r3, [r7, #0]
 8029c14:	689b      	ldr	r3, [r3, #8]
 8029c16:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8029c18:	683b      	ldr	r3, [r7, #0]
 8029c1a:	68db      	ldr	r3, [r3, #12]
 8029c1c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8029c1e:	683b      	ldr	r3, [r7, #0]
 8029c20:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8029c22:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8029c24:	6979      	ldr	r1, [r7, #20]
 8029c26:	3348      	adds	r3, #72	@ 0x48
 8029c28:	00db      	lsls	r3, r3, #3
 8029c2a:	440b      	add	r3, r1
 8029c2c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8029c2e:	683b      	ldr	r3, [r7, #0]
 8029c30:	699b      	ldr	r3, [r3, #24]
 8029c32:	2b00      	cmp	r3, #0
 8029c34:	d109      	bne.n	8029c4a <HAL_CAN_ConfigFilter+0x216>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8029c36:	697b      	ldr	r3, [r7, #20]
 8029c38:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8029c3c:	68fb      	ldr	r3, [r7, #12]
 8029c3e:	43db      	mvns	r3, r3
 8029c40:	401a      	ands	r2, r3
 8029c42:	697b      	ldr	r3, [r7, #20]
 8029c44:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8029c48:	e007      	b.n	8029c5a <HAL_CAN_ConfigFilter+0x226>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8029c4a:	697b      	ldr	r3, [r7, #20]
 8029c4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8029c50:	68fb      	ldr	r3, [r7, #12]
 8029c52:	431a      	orrs	r2, r3
 8029c54:	697b      	ldr	r3, [r7, #20]
 8029c56:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8029c5a:	683b      	ldr	r3, [r7, #0]
 8029c5c:	691b      	ldr	r3, [r3, #16]
 8029c5e:	2b00      	cmp	r3, #0
 8029c60:	d109      	bne.n	8029c76 <HAL_CAN_ConfigFilter+0x242>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8029c62:	697b      	ldr	r3, [r7, #20]
 8029c64:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8029c68:	68fb      	ldr	r3, [r7, #12]
 8029c6a:	43db      	mvns	r3, r3
 8029c6c:	401a      	ands	r2, r3
 8029c6e:	697b      	ldr	r3, [r7, #20]
 8029c70:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8029c74:	e007      	b.n	8029c86 <HAL_CAN_ConfigFilter+0x252>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8029c76:	697b      	ldr	r3, [r7, #20]
 8029c78:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8029c7c:	68fb      	ldr	r3, [r7, #12]
 8029c7e:	431a      	orrs	r2, r3
 8029c80:	697b      	ldr	r3, [r7, #20]
 8029c82:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8029c86:	683b      	ldr	r3, [r7, #0]
 8029c88:	6a1b      	ldr	r3, [r3, #32]
 8029c8a:	2b01      	cmp	r3, #1
 8029c8c:	d107      	bne.n	8029c9e <HAL_CAN_ConfigFilter+0x26a>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8029c8e:	697b      	ldr	r3, [r7, #20]
 8029c90:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8029c94:	68fb      	ldr	r3, [r7, #12]
 8029c96:	431a      	orrs	r2, r3
 8029c98:	697b      	ldr	r3, [r7, #20]
 8029c9a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8029c9e:	697b      	ldr	r3, [r7, #20]
 8029ca0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8029ca4:	f023 0201 	bic.w	r2, r3, #1
 8029ca8:	697b      	ldr	r3, [r7, #20]
 8029caa:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8029cae:	2300      	movs	r3, #0
 8029cb0:	e006      	b.n	8029cc0 <HAL_CAN_ConfigFilter+0x28c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8029cb2:	687b      	ldr	r3, [r7, #4]
 8029cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8029cb6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8029cba:	687b      	ldr	r3, [r7, #4]
 8029cbc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8029cbe:	2301      	movs	r3, #1
  }
}
 8029cc0:	4618      	mov	r0, r3
 8029cc2:	3718      	adds	r7, #24
 8029cc4:	46bd      	mov	sp, r7
 8029cc6:	bd80      	pop	{r7, pc}
 8029cc8:	0803816c 	.word	0x0803816c
 8029ccc:	40006400 	.word	0x40006400

08029cd0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8029cd0:	b580      	push	{r7, lr}
 8029cd2:	b084      	sub	sp, #16
 8029cd4:	af00      	add	r7, sp, #0
 8029cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8029cd8:	687b      	ldr	r3, [r7, #4]
 8029cda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8029cde:	b2db      	uxtb	r3, r3
 8029ce0:	2b01      	cmp	r3, #1
 8029ce2:	d12e      	bne.n	8029d42 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8029ce4:	687b      	ldr	r3, [r7, #4]
 8029ce6:	2202      	movs	r2, #2
 8029ce8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8029cec:	687b      	ldr	r3, [r7, #4]
 8029cee:	681b      	ldr	r3, [r3, #0]
 8029cf0:	681a      	ldr	r2, [r3, #0]
 8029cf2:	687b      	ldr	r3, [r7, #4]
 8029cf4:	681b      	ldr	r3, [r3, #0]
 8029cf6:	f022 0201 	bic.w	r2, r2, #1
 8029cfa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8029cfc:	f7fe fbee 	bl	80284dc <HAL_GetTick>
 8029d00:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8029d02:	e012      	b.n	8029d2a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8029d04:	f7fe fbea 	bl	80284dc <HAL_GetTick>
 8029d08:	4602      	mov	r2, r0
 8029d0a:	68fb      	ldr	r3, [r7, #12]
 8029d0c:	1ad3      	subs	r3, r2, r3
 8029d0e:	2b0a      	cmp	r3, #10
 8029d10:	d90b      	bls.n	8029d2a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8029d12:	687b      	ldr	r3, [r7, #4]
 8029d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8029d16:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8029d1a:	687b      	ldr	r3, [r7, #4]
 8029d1c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8029d1e:	687b      	ldr	r3, [r7, #4]
 8029d20:	2205      	movs	r2, #5
 8029d22:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8029d26:	2301      	movs	r3, #1
 8029d28:	e012      	b.n	8029d50 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8029d2a:	687b      	ldr	r3, [r7, #4]
 8029d2c:	681b      	ldr	r3, [r3, #0]
 8029d2e:	685b      	ldr	r3, [r3, #4]
 8029d30:	f003 0301 	and.w	r3, r3, #1
 8029d34:	2b00      	cmp	r3, #0
 8029d36:	d1e5      	bne.n	8029d04 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8029d38:	687b      	ldr	r3, [r7, #4]
 8029d3a:	2200      	movs	r2, #0
 8029d3c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8029d3e:	2300      	movs	r3, #0
 8029d40:	e006      	b.n	8029d50 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8029d42:	687b      	ldr	r3, [r7, #4]
 8029d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8029d46:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8029d4a:	687b      	ldr	r3, [r7, #4]
 8029d4c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8029d4e:	2301      	movs	r3, #1
  }
}
 8029d50:	4618      	mov	r0, r3
 8029d52:	3710      	adds	r7, #16
 8029d54:	46bd      	mov	sp, r7
 8029d56:	bd80      	pop	{r7, pc}

08029d58 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8029d58:	b580      	push	{r7, lr}
 8029d5a:	b084      	sub	sp, #16
 8029d5c:	af00      	add	r7, sp, #0
 8029d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8029d60:	687b      	ldr	r3, [r7, #4]
 8029d62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8029d66:	b2db      	uxtb	r3, r3
 8029d68:	2b02      	cmp	r3, #2
 8029d6a:	d133      	bne.n	8029dd4 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8029d6c:	687b      	ldr	r3, [r7, #4]
 8029d6e:	681b      	ldr	r3, [r3, #0]
 8029d70:	681a      	ldr	r2, [r3, #0]
 8029d72:	687b      	ldr	r3, [r7, #4]
 8029d74:	681b      	ldr	r3, [r3, #0]
 8029d76:	f042 0201 	orr.w	r2, r2, #1
 8029d7a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8029d7c:	f7fe fbae 	bl	80284dc <HAL_GetTick>
 8029d80:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8029d82:	e012      	b.n	8029daa <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8029d84:	f7fe fbaa 	bl	80284dc <HAL_GetTick>
 8029d88:	4602      	mov	r2, r0
 8029d8a:	68fb      	ldr	r3, [r7, #12]
 8029d8c:	1ad3      	subs	r3, r2, r3
 8029d8e:	2b0a      	cmp	r3, #10
 8029d90:	d90b      	bls.n	8029daa <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8029d92:	687b      	ldr	r3, [r7, #4]
 8029d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8029d96:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8029d9a:	687b      	ldr	r3, [r7, #4]
 8029d9c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8029d9e:	687b      	ldr	r3, [r7, #4]
 8029da0:	2205      	movs	r2, #5
 8029da2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8029da6:	2301      	movs	r3, #1
 8029da8:	e01b      	b.n	8029de2 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8029daa:	687b      	ldr	r3, [r7, #4]
 8029dac:	681b      	ldr	r3, [r3, #0]
 8029dae:	685b      	ldr	r3, [r3, #4]
 8029db0:	f003 0301 	and.w	r3, r3, #1
 8029db4:	2b00      	cmp	r3, #0
 8029db6:	d0e5      	beq.n	8029d84 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8029db8:	687b      	ldr	r3, [r7, #4]
 8029dba:	681b      	ldr	r3, [r3, #0]
 8029dbc:	681a      	ldr	r2, [r3, #0]
 8029dbe:	687b      	ldr	r3, [r7, #4]
 8029dc0:	681b      	ldr	r3, [r3, #0]
 8029dc2:	f022 0202 	bic.w	r2, r2, #2
 8029dc6:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8029dc8:	687b      	ldr	r3, [r7, #4]
 8029dca:	2201      	movs	r2, #1
 8029dcc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8029dd0:	2300      	movs	r3, #0
 8029dd2:	e006      	b.n	8029de2 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8029dd4:	687b      	ldr	r3, [r7, #4]
 8029dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8029dd8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8029ddc:	687b      	ldr	r3, [r7, #4]
 8029dde:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8029de0:	2301      	movs	r3, #1
  }
}
 8029de2:	4618      	mov	r0, r3
 8029de4:	3710      	adds	r7, #16
 8029de6:	46bd      	mov	sp, r7
 8029de8:	bd80      	pop	{r7, pc}

08029dea <HAL_CAN_RequestSleep>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_CAN_RequestSleep(CAN_HandleTypeDef *hcan)
{
 8029dea:	b480      	push	{r7}
 8029dec:	b085      	sub	sp, #20
 8029dee:	af00      	add	r7, sp, #0
 8029df0:	6078      	str	r0, [r7, #4]
  HAL_CAN_StateTypeDef state = hcan->State;
 8029df2:	687b      	ldr	r3, [r7, #4]
 8029df4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8029df8:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_CAN_STATE_READY) ||
 8029dfa:	7bfb      	ldrb	r3, [r7, #15]
 8029dfc:	2b01      	cmp	r3, #1
 8029dfe:	d002      	beq.n	8029e06 <HAL_CAN_RequestSleep+0x1c>
 8029e00:	7bfb      	ldrb	r3, [r7, #15]
 8029e02:	2b02      	cmp	r3, #2
 8029e04:	d109      	bne.n	8029e1a <HAL_CAN_RequestSleep+0x30>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Request Sleep mode */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8029e06:	687b      	ldr	r3, [r7, #4]
 8029e08:	681b      	ldr	r3, [r3, #0]
 8029e0a:	681a      	ldr	r2, [r3, #0]
 8029e0c:	687b      	ldr	r3, [r7, #4]
 8029e0e:	681b      	ldr	r3, [r3, #0]
 8029e10:	f042 0202 	orr.w	r2, r2, #2
 8029e14:	601a      	str	r2, [r3, #0]

    /* Return function status */
    return HAL_OK;
 8029e16:	2300      	movs	r3, #0
 8029e18:	e006      	b.n	8029e28 <HAL_CAN_RequestSleep+0x3e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8029e1a:	687b      	ldr	r3, [r7, #4]
 8029e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8029e1e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8029e22:	687b      	ldr	r3, [r7, #4]
 8029e24:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_ERROR;
 8029e26:	2301      	movs	r3, #1
  }
}
 8029e28:	4618      	mov	r0, r3
 8029e2a:	3714      	adds	r7, #20
 8029e2c:	46bd      	mov	sp, r7
 8029e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029e32:	4770      	bx	lr

08029e34 <HAL_CAN_IsSleepActive>:
  * @retval Status
  *          - 0 : Sleep mode is not active.
  *          - 1 : Sleep mode is active.
  */
uint32_t HAL_CAN_IsSleepActive(const CAN_HandleTypeDef *hcan)
{
 8029e34:	b480      	push	{r7}
 8029e36:	b085      	sub	sp, #20
 8029e38:	af00      	add	r7, sp, #0
 8029e3a:	6078      	str	r0, [r7, #4]
  uint32_t status = 0U;
 8029e3c:	2300      	movs	r3, #0
 8029e3e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8029e40:	687b      	ldr	r3, [r7, #4]
 8029e42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8029e46:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8029e48:	7afb      	ldrb	r3, [r7, #11]
 8029e4a:	2b01      	cmp	r3, #1
 8029e4c:	d002      	beq.n	8029e54 <HAL_CAN_IsSleepActive+0x20>
 8029e4e:	7afb      	ldrb	r3, [r7, #11]
 8029e50:	2b02      	cmp	r3, #2
 8029e52:	d108      	bne.n	8029e66 <HAL_CAN_IsSleepActive+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Sleep mode */
    if ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8029e54:	687b      	ldr	r3, [r7, #4]
 8029e56:	681b      	ldr	r3, [r3, #0]
 8029e58:	685b      	ldr	r3, [r3, #4]
 8029e5a:	f003 0302 	and.w	r3, r3, #2
 8029e5e:	2b00      	cmp	r3, #0
 8029e60:	d001      	beq.n	8029e66 <HAL_CAN_IsSleepActive+0x32>
    {
      status = 1U;
 8029e62:	2301      	movs	r3, #1
 8029e64:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return function status */
  return status;
 8029e66:	68fb      	ldr	r3, [r7, #12]
}
 8029e68:	4618      	mov	r0, r3
 8029e6a:	3714      	adds	r7, #20
 8029e6c:	46bd      	mov	sp, r7
 8029e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029e72:	4770      	bx	lr

08029e74 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8029e74:	b580      	push	{r7, lr}
 8029e76:	b088      	sub	sp, #32
 8029e78:	af00      	add	r7, sp, #0
 8029e7a:	60f8      	str	r0, [r7, #12]
 8029e7c:	60b9      	str	r1, [r7, #8]
 8029e7e:	607a      	str	r2, [r7, #4]
 8029e80:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8029e82:	68fb      	ldr	r3, [r7, #12]
 8029e84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8029e88:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8029e8a:	68fb      	ldr	r3, [r7, #12]
 8029e8c:	681b      	ldr	r3, [r3, #0]
 8029e8e:	689b      	ldr	r3, [r3, #8]
 8029e90:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_CAN_IDTYPE(pHeader->IDE));
 8029e92:	68bb      	ldr	r3, [r7, #8]
 8029e94:	689b      	ldr	r3, [r3, #8]
 8029e96:	2b00      	cmp	r3, #0
 8029e98:	d008      	beq.n	8029eac <HAL_CAN_AddTxMessage+0x38>
 8029e9a:	68bb      	ldr	r3, [r7, #8]
 8029e9c:	689b      	ldr	r3, [r3, #8]
 8029e9e:	2b04      	cmp	r3, #4
 8029ea0:	d004      	beq.n	8029eac <HAL_CAN_AddTxMessage+0x38>
 8029ea2:	f240 41ea 	movw	r1, #1258	@ 0x4ea
 8029ea6:	487f      	ldr	r0, [pc, #508]	@ (802a0a4 <HAL_CAN_AddTxMessage+0x230>)
 8029ea8:	f7fd ff25 	bl	8027cf6 <assert_failed>
  assert_param(IS_CAN_RTR(pHeader->RTR));
 8029eac:	68bb      	ldr	r3, [r7, #8]
 8029eae:	68db      	ldr	r3, [r3, #12]
 8029eb0:	2b00      	cmp	r3, #0
 8029eb2:	d008      	beq.n	8029ec6 <HAL_CAN_AddTxMessage+0x52>
 8029eb4:	68bb      	ldr	r3, [r7, #8]
 8029eb6:	68db      	ldr	r3, [r3, #12]
 8029eb8:	2b02      	cmp	r3, #2
 8029eba:	d004      	beq.n	8029ec6 <HAL_CAN_AddTxMessage+0x52>
 8029ebc:	f240 41eb 	movw	r1, #1259	@ 0x4eb
 8029ec0:	4878      	ldr	r0, [pc, #480]	@ (802a0a4 <HAL_CAN_AddTxMessage+0x230>)
 8029ec2:	f7fd ff18 	bl	8027cf6 <assert_failed>
  assert_param(IS_CAN_DLC(pHeader->DLC));
 8029ec6:	68bb      	ldr	r3, [r7, #8]
 8029ec8:	691b      	ldr	r3, [r3, #16]
 8029eca:	2b08      	cmp	r3, #8
 8029ecc:	d904      	bls.n	8029ed8 <HAL_CAN_AddTxMessage+0x64>
 8029ece:	f240 41ec 	movw	r1, #1260	@ 0x4ec
 8029ed2:	4874      	ldr	r0, [pc, #464]	@ (802a0a4 <HAL_CAN_AddTxMessage+0x230>)
 8029ed4:	f7fd ff0f 	bl	8027cf6 <assert_failed>
  if (pHeader->IDE == CAN_ID_STD)
 8029ed8:	68bb      	ldr	r3, [r7, #8]
 8029eda:	689b      	ldr	r3, [r3, #8]
 8029edc:	2b00      	cmp	r3, #0
 8029ede:	d10a      	bne.n	8029ef6 <HAL_CAN_AddTxMessage+0x82>
  {
    assert_param(IS_CAN_STDID(pHeader->StdId));
 8029ee0:	68bb      	ldr	r3, [r7, #8]
 8029ee2:	681b      	ldr	r3, [r3, #0]
 8029ee4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8029ee8:	d30f      	bcc.n	8029f0a <HAL_CAN_AddTxMessage+0x96>
 8029eea:	f240 41ef 	movw	r1, #1263	@ 0x4ef
 8029eee:	486d      	ldr	r0, [pc, #436]	@ (802a0a4 <HAL_CAN_AddTxMessage+0x230>)
 8029ef0:	f7fd ff01 	bl	8027cf6 <assert_failed>
 8029ef4:	e009      	b.n	8029f0a <HAL_CAN_AddTxMessage+0x96>
  }
  else
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
 8029ef6:	68bb      	ldr	r3, [r7, #8]
 8029ef8:	685b      	ldr	r3, [r3, #4]
 8029efa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8029efe:	d304      	bcc.n	8029f0a <HAL_CAN_AddTxMessage+0x96>
 8029f00:	f240 41f3 	movw	r1, #1267	@ 0x4f3
 8029f04:	4867      	ldr	r0, [pc, #412]	@ (802a0a4 <HAL_CAN_AddTxMessage+0x230>)
 8029f06:	f7fd fef6 	bl	8027cf6 <assert_failed>
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));
 8029f0a:	68bb      	ldr	r3, [r7, #8]
 8029f0c:	7d1b      	ldrb	r3, [r3, #20]
 8029f0e:	2b00      	cmp	r3, #0
 8029f10:	d008      	beq.n	8029f24 <HAL_CAN_AddTxMessage+0xb0>
 8029f12:	68bb      	ldr	r3, [r7, #8]
 8029f14:	7d1b      	ldrb	r3, [r3, #20]
 8029f16:	2b01      	cmp	r3, #1
 8029f18:	d004      	beq.n	8029f24 <HAL_CAN_AddTxMessage+0xb0>
 8029f1a:	f240 41f5 	movw	r1, #1269	@ 0x4f5
 8029f1e:	4861      	ldr	r0, [pc, #388]	@ (802a0a4 <HAL_CAN_AddTxMessage+0x230>)
 8029f20:	f7fd fee9 	bl	8027cf6 <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 8029f24:	7ffb      	ldrb	r3, [r7, #31]
 8029f26:	2b01      	cmp	r3, #1
 8029f28:	d003      	beq.n	8029f32 <HAL_CAN_AddTxMessage+0xbe>
 8029f2a:	7ffb      	ldrb	r3, [r7, #31]
 8029f2c:	2b02      	cmp	r3, #2
 8029f2e:	f040 80ad 	bne.w	802a08c <HAL_CAN_AddTxMessage+0x218>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8029f32:	69bb      	ldr	r3, [r7, #24]
 8029f34:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8029f38:	2b00      	cmp	r3, #0
 8029f3a:	d10a      	bne.n	8029f52 <HAL_CAN_AddTxMessage+0xde>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8029f3c:	69bb      	ldr	r3, [r7, #24]
 8029f3e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8029f42:	2b00      	cmp	r3, #0
 8029f44:	d105      	bne.n	8029f52 <HAL_CAN_AddTxMessage+0xde>
        ((tsr & CAN_TSR_TME2) != 0U))
 8029f46:	69bb      	ldr	r3, [r7, #24]
 8029f48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8029f4c:	2b00      	cmp	r3, #0
 8029f4e:	f000 8095 	beq.w	802a07c <HAL_CAN_AddTxMessage+0x208>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8029f52:	69bb      	ldr	r3, [r7, #24]
 8029f54:	0e1b      	lsrs	r3, r3, #24
 8029f56:	f003 0303 	and.w	r3, r3, #3
 8029f5a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8029f5c:	2201      	movs	r2, #1
 8029f5e:	697b      	ldr	r3, [r7, #20]
 8029f60:	409a      	lsls	r2, r3
 8029f62:	683b      	ldr	r3, [r7, #0]
 8029f64:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8029f66:	68bb      	ldr	r3, [r7, #8]
 8029f68:	689b      	ldr	r3, [r3, #8]
 8029f6a:	2b00      	cmp	r3, #0
 8029f6c:	d10d      	bne.n	8029f8a <HAL_CAN_AddTxMessage+0x116>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8029f6e:	68bb      	ldr	r3, [r7, #8]
 8029f70:	681b      	ldr	r3, [r3, #0]
 8029f72:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8029f74:	68bb      	ldr	r3, [r7, #8]
 8029f76:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8029f78:	68f9      	ldr	r1, [r7, #12]
 8029f7a:	6809      	ldr	r1, [r1, #0]
 8029f7c:	431a      	orrs	r2, r3
 8029f7e:	697b      	ldr	r3, [r7, #20]
 8029f80:	3318      	adds	r3, #24
 8029f82:	011b      	lsls	r3, r3, #4
 8029f84:	440b      	add	r3, r1
 8029f86:	601a      	str	r2, [r3, #0]
 8029f88:	e00f      	b.n	8029faa <HAL_CAN_AddTxMessage+0x136>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8029f8a:	68bb      	ldr	r3, [r7, #8]
 8029f8c:	685b      	ldr	r3, [r3, #4]
 8029f8e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8029f90:	68bb      	ldr	r3, [r7, #8]
 8029f92:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8029f94:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8029f96:	68bb      	ldr	r3, [r7, #8]
 8029f98:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8029f9a:	68f9      	ldr	r1, [r7, #12]
 8029f9c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8029f9e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8029fa0:	697b      	ldr	r3, [r7, #20]
 8029fa2:	3318      	adds	r3, #24
 8029fa4:	011b      	lsls	r3, r3, #4
 8029fa6:	440b      	add	r3, r1
 8029fa8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8029faa:	68fb      	ldr	r3, [r7, #12]
 8029fac:	6819      	ldr	r1, [r3, #0]
 8029fae:	68bb      	ldr	r3, [r7, #8]
 8029fb0:	691a      	ldr	r2, [r3, #16]
 8029fb2:	697b      	ldr	r3, [r7, #20]
 8029fb4:	3318      	adds	r3, #24
 8029fb6:	011b      	lsls	r3, r3, #4
 8029fb8:	440b      	add	r3, r1
 8029fba:	3304      	adds	r3, #4
 8029fbc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8029fbe:	68bb      	ldr	r3, [r7, #8]
 8029fc0:	7d1b      	ldrb	r3, [r3, #20]
 8029fc2:	2b01      	cmp	r3, #1
 8029fc4:	d111      	bne.n	8029fea <HAL_CAN_AddTxMessage+0x176>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8029fc6:	68fb      	ldr	r3, [r7, #12]
 8029fc8:	681a      	ldr	r2, [r3, #0]
 8029fca:	697b      	ldr	r3, [r7, #20]
 8029fcc:	3318      	adds	r3, #24
 8029fce:	011b      	lsls	r3, r3, #4
 8029fd0:	4413      	add	r3, r2
 8029fd2:	3304      	adds	r3, #4
 8029fd4:	681b      	ldr	r3, [r3, #0]
 8029fd6:	68fa      	ldr	r2, [r7, #12]
 8029fd8:	6811      	ldr	r1, [r2, #0]
 8029fda:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8029fde:	697b      	ldr	r3, [r7, #20]
 8029fe0:	3318      	adds	r3, #24
 8029fe2:	011b      	lsls	r3, r3, #4
 8029fe4:	440b      	add	r3, r1
 8029fe6:	3304      	adds	r3, #4
 8029fe8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8029fea:	687b      	ldr	r3, [r7, #4]
 8029fec:	3307      	adds	r3, #7
 8029fee:	781b      	ldrb	r3, [r3, #0]
 8029ff0:	061a      	lsls	r2, r3, #24
 8029ff2:	687b      	ldr	r3, [r7, #4]
 8029ff4:	3306      	adds	r3, #6
 8029ff6:	781b      	ldrb	r3, [r3, #0]
 8029ff8:	041b      	lsls	r3, r3, #16
 8029ffa:	431a      	orrs	r2, r3
 8029ffc:	687b      	ldr	r3, [r7, #4]
 8029ffe:	3305      	adds	r3, #5
 802a000:	781b      	ldrb	r3, [r3, #0]
 802a002:	021b      	lsls	r3, r3, #8
 802a004:	4313      	orrs	r3, r2
 802a006:	687a      	ldr	r2, [r7, #4]
 802a008:	3204      	adds	r2, #4
 802a00a:	7812      	ldrb	r2, [r2, #0]
 802a00c:	4610      	mov	r0, r2
 802a00e:	68fa      	ldr	r2, [r7, #12]
 802a010:	6811      	ldr	r1, [r2, #0]
 802a012:	ea43 0200 	orr.w	r2, r3, r0
 802a016:	697b      	ldr	r3, [r7, #20]
 802a018:	011b      	lsls	r3, r3, #4
 802a01a:	440b      	add	r3, r1
 802a01c:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 802a020:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 802a022:	687b      	ldr	r3, [r7, #4]
 802a024:	3303      	adds	r3, #3
 802a026:	781b      	ldrb	r3, [r3, #0]
 802a028:	061a      	lsls	r2, r3, #24
 802a02a:	687b      	ldr	r3, [r7, #4]
 802a02c:	3302      	adds	r3, #2
 802a02e:	781b      	ldrb	r3, [r3, #0]
 802a030:	041b      	lsls	r3, r3, #16
 802a032:	431a      	orrs	r2, r3
 802a034:	687b      	ldr	r3, [r7, #4]
 802a036:	3301      	adds	r3, #1
 802a038:	781b      	ldrb	r3, [r3, #0]
 802a03a:	021b      	lsls	r3, r3, #8
 802a03c:	4313      	orrs	r3, r2
 802a03e:	687a      	ldr	r2, [r7, #4]
 802a040:	7812      	ldrb	r2, [r2, #0]
 802a042:	4610      	mov	r0, r2
 802a044:	68fa      	ldr	r2, [r7, #12]
 802a046:	6811      	ldr	r1, [r2, #0]
 802a048:	ea43 0200 	orr.w	r2, r3, r0
 802a04c:	697b      	ldr	r3, [r7, #20]
 802a04e:	011b      	lsls	r3, r3, #4
 802a050:	440b      	add	r3, r1
 802a052:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 802a056:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 802a058:	68fb      	ldr	r3, [r7, #12]
 802a05a:	681a      	ldr	r2, [r3, #0]
 802a05c:	697b      	ldr	r3, [r7, #20]
 802a05e:	3318      	adds	r3, #24
 802a060:	011b      	lsls	r3, r3, #4
 802a062:	4413      	add	r3, r2
 802a064:	681b      	ldr	r3, [r3, #0]
 802a066:	68fa      	ldr	r2, [r7, #12]
 802a068:	6811      	ldr	r1, [r2, #0]
 802a06a:	f043 0201 	orr.w	r2, r3, #1
 802a06e:	697b      	ldr	r3, [r7, #20]
 802a070:	3318      	adds	r3, #24
 802a072:	011b      	lsls	r3, r3, #4
 802a074:	440b      	add	r3, r1
 802a076:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 802a078:	2300      	movs	r3, #0
 802a07a:	e00e      	b.n	802a09a <HAL_CAN_AddTxMessage+0x226>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 802a07c:	68fb      	ldr	r3, [r7, #12]
 802a07e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802a080:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 802a084:	68fb      	ldr	r3, [r7, #12]
 802a086:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 802a088:	2301      	movs	r3, #1
 802a08a:	e006      	b.n	802a09a <HAL_CAN_AddTxMessage+0x226>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 802a08c:	68fb      	ldr	r3, [r7, #12]
 802a08e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802a090:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 802a094:	68fb      	ldr	r3, [r7, #12]
 802a096:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 802a098:	2301      	movs	r3, #1
  }
}
 802a09a:	4618      	mov	r0, r3
 802a09c:	3720      	adds	r7, #32
 802a09e:	46bd      	mov	sp, r7
 802a0a0:	bd80      	pop	{r7, pc}
 802a0a2:	bf00      	nop
 802a0a4:	0803816c 	.word	0x0803816c

0802a0a8 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 802a0a8:	b580      	push	{r7, lr}
 802a0aa:	b086      	sub	sp, #24
 802a0ac:	af00      	add	r7, sp, #0
 802a0ae:	60f8      	str	r0, [r7, #12]
 802a0b0:	60b9      	str	r1, [r7, #8]
 802a0b2:	607a      	str	r2, [r7, #4]
 802a0b4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 802a0b6:	68fb      	ldr	r3, [r7, #12]
 802a0b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 802a0bc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));
 802a0be:	68bb      	ldr	r3, [r7, #8]
 802a0c0:	2b00      	cmp	r3, #0
 802a0c2:	d007      	beq.n	802a0d4 <HAL_CAN_GetRxMessage+0x2c>
 802a0c4:	68bb      	ldr	r3, [r7, #8]
 802a0c6:	2b01      	cmp	r3, #1
 802a0c8:	d004      	beq.n	802a0d4 <HAL_CAN_GetRxMessage+0x2c>
 802a0ca:	f240 51e9 	movw	r1, #1513	@ 0x5e9
 802a0ce:	488c      	ldr	r0, [pc, #560]	@ (802a300 <HAL_CAN_GetRxMessage+0x258>)
 802a0d0:	f7fd fe11 	bl	8027cf6 <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 802a0d4:	7dfb      	ldrb	r3, [r7, #23]
 802a0d6:	2b01      	cmp	r3, #1
 802a0d8:	d003      	beq.n	802a0e2 <HAL_CAN_GetRxMessage+0x3a>
 802a0da:	7dfb      	ldrb	r3, [r7, #23]
 802a0dc:	2b02      	cmp	r3, #2
 802a0de:	f040 8103 	bne.w	802a2e8 <HAL_CAN_GetRxMessage+0x240>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 802a0e2:	68bb      	ldr	r3, [r7, #8]
 802a0e4:	2b00      	cmp	r3, #0
 802a0e6:	d10e      	bne.n	802a106 <HAL_CAN_GetRxMessage+0x5e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 802a0e8:	68fb      	ldr	r3, [r7, #12]
 802a0ea:	681b      	ldr	r3, [r3, #0]
 802a0ec:	68db      	ldr	r3, [r3, #12]
 802a0ee:	f003 0303 	and.w	r3, r3, #3
 802a0f2:	2b00      	cmp	r3, #0
 802a0f4:	d116      	bne.n	802a124 <HAL_CAN_GetRxMessage+0x7c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 802a0f6:	68fb      	ldr	r3, [r7, #12]
 802a0f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802a0fa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 802a0fe:	68fb      	ldr	r3, [r7, #12]
 802a100:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 802a102:	2301      	movs	r3, #1
 802a104:	e0f7      	b.n	802a2f6 <HAL_CAN_GetRxMessage+0x24e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 802a106:	68fb      	ldr	r3, [r7, #12]
 802a108:	681b      	ldr	r3, [r3, #0]
 802a10a:	691b      	ldr	r3, [r3, #16]
 802a10c:	f003 0303 	and.w	r3, r3, #3
 802a110:	2b00      	cmp	r3, #0
 802a112:	d107      	bne.n	802a124 <HAL_CAN_GetRxMessage+0x7c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 802a114:	68fb      	ldr	r3, [r7, #12]
 802a116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802a118:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 802a11c:	68fb      	ldr	r3, [r7, #12]
 802a11e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 802a120:	2301      	movs	r3, #1
 802a122:	e0e8      	b.n	802a2f6 <HAL_CAN_GetRxMessage+0x24e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 802a124:	68fb      	ldr	r3, [r7, #12]
 802a126:	681a      	ldr	r2, [r3, #0]
 802a128:	68bb      	ldr	r3, [r7, #8]
 802a12a:	331b      	adds	r3, #27
 802a12c:	011b      	lsls	r3, r3, #4
 802a12e:	4413      	add	r3, r2
 802a130:	681b      	ldr	r3, [r3, #0]
 802a132:	f003 0204 	and.w	r2, r3, #4
 802a136:	687b      	ldr	r3, [r7, #4]
 802a138:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 802a13a:	687b      	ldr	r3, [r7, #4]
 802a13c:	689b      	ldr	r3, [r3, #8]
 802a13e:	2b00      	cmp	r3, #0
 802a140:	d10c      	bne.n	802a15c <HAL_CAN_GetRxMessage+0xb4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 802a142:	68fb      	ldr	r3, [r7, #12]
 802a144:	681a      	ldr	r2, [r3, #0]
 802a146:	68bb      	ldr	r3, [r7, #8]
 802a148:	331b      	adds	r3, #27
 802a14a:	011b      	lsls	r3, r3, #4
 802a14c:	4413      	add	r3, r2
 802a14e:	681b      	ldr	r3, [r3, #0]
 802a150:	0d5b      	lsrs	r3, r3, #21
 802a152:	f3c3 020a 	ubfx	r2, r3, #0, #11
 802a156:	687b      	ldr	r3, [r7, #4]
 802a158:	601a      	str	r2, [r3, #0]
 802a15a:	e00b      	b.n	802a174 <HAL_CAN_GetRxMessage+0xcc>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 802a15c:	68fb      	ldr	r3, [r7, #12]
 802a15e:	681a      	ldr	r2, [r3, #0]
 802a160:	68bb      	ldr	r3, [r7, #8]
 802a162:	331b      	adds	r3, #27
 802a164:	011b      	lsls	r3, r3, #4
 802a166:	4413      	add	r3, r2
 802a168:	681b      	ldr	r3, [r3, #0]
 802a16a:	08db      	lsrs	r3, r3, #3
 802a16c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 802a170:	687b      	ldr	r3, [r7, #4]
 802a172:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 802a174:	68fb      	ldr	r3, [r7, #12]
 802a176:	681a      	ldr	r2, [r3, #0]
 802a178:	68bb      	ldr	r3, [r7, #8]
 802a17a:	331b      	adds	r3, #27
 802a17c:	011b      	lsls	r3, r3, #4
 802a17e:	4413      	add	r3, r2
 802a180:	681b      	ldr	r3, [r3, #0]
 802a182:	f003 0202 	and.w	r2, r3, #2
 802a186:	687b      	ldr	r3, [r7, #4]
 802a188:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 802a18a:	68fb      	ldr	r3, [r7, #12]
 802a18c:	681a      	ldr	r2, [r3, #0]
 802a18e:	68bb      	ldr	r3, [r7, #8]
 802a190:	331b      	adds	r3, #27
 802a192:	011b      	lsls	r3, r3, #4
 802a194:	4413      	add	r3, r2
 802a196:	3304      	adds	r3, #4
 802a198:	681b      	ldr	r3, [r3, #0]
 802a19a:	f003 0308 	and.w	r3, r3, #8
 802a19e:	2b00      	cmp	r3, #0
 802a1a0:	d003      	beq.n	802a1aa <HAL_CAN_GetRxMessage+0x102>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 802a1a2:	687b      	ldr	r3, [r7, #4]
 802a1a4:	2208      	movs	r2, #8
 802a1a6:	611a      	str	r2, [r3, #16]
 802a1a8:	e00b      	b.n	802a1c2 <HAL_CAN_GetRxMessage+0x11a>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 802a1aa:	68fb      	ldr	r3, [r7, #12]
 802a1ac:	681a      	ldr	r2, [r3, #0]
 802a1ae:	68bb      	ldr	r3, [r7, #8]
 802a1b0:	331b      	adds	r3, #27
 802a1b2:	011b      	lsls	r3, r3, #4
 802a1b4:	4413      	add	r3, r2
 802a1b6:	3304      	adds	r3, #4
 802a1b8:	681b      	ldr	r3, [r3, #0]
 802a1ba:	f003 020f 	and.w	r2, r3, #15
 802a1be:	687b      	ldr	r3, [r7, #4]
 802a1c0:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 802a1c2:	68fb      	ldr	r3, [r7, #12]
 802a1c4:	681a      	ldr	r2, [r3, #0]
 802a1c6:	68bb      	ldr	r3, [r7, #8]
 802a1c8:	331b      	adds	r3, #27
 802a1ca:	011b      	lsls	r3, r3, #4
 802a1cc:	4413      	add	r3, r2
 802a1ce:	3304      	adds	r3, #4
 802a1d0:	681b      	ldr	r3, [r3, #0]
 802a1d2:	0a1b      	lsrs	r3, r3, #8
 802a1d4:	b2da      	uxtb	r2, r3
 802a1d6:	687b      	ldr	r3, [r7, #4]
 802a1d8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 802a1da:	68fb      	ldr	r3, [r7, #12]
 802a1dc:	681a      	ldr	r2, [r3, #0]
 802a1de:	68bb      	ldr	r3, [r7, #8]
 802a1e0:	331b      	adds	r3, #27
 802a1e2:	011b      	lsls	r3, r3, #4
 802a1e4:	4413      	add	r3, r2
 802a1e6:	3304      	adds	r3, #4
 802a1e8:	681b      	ldr	r3, [r3, #0]
 802a1ea:	0c1b      	lsrs	r3, r3, #16
 802a1ec:	b29a      	uxth	r2, r3
 802a1ee:	687b      	ldr	r3, [r7, #4]
 802a1f0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 802a1f2:	68fb      	ldr	r3, [r7, #12]
 802a1f4:	681a      	ldr	r2, [r3, #0]
 802a1f6:	68bb      	ldr	r3, [r7, #8]
 802a1f8:	011b      	lsls	r3, r3, #4
 802a1fa:	4413      	add	r3, r2
 802a1fc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 802a200:	681b      	ldr	r3, [r3, #0]
 802a202:	b2da      	uxtb	r2, r3
 802a204:	683b      	ldr	r3, [r7, #0]
 802a206:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 802a208:	68fb      	ldr	r3, [r7, #12]
 802a20a:	681a      	ldr	r2, [r3, #0]
 802a20c:	68bb      	ldr	r3, [r7, #8]
 802a20e:	011b      	lsls	r3, r3, #4
 802a210:	4413      	add	r3, r2
 802a212:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 802a216:	681b      	ldr	r3, [r3, #0]
 802a218:	0a1a      	lsrs	r2, r3, #8
 802a21a:	683b      	ldr	r3, [r7, #0]
 802a21c:	3301      	adds	r3, #1
 802a21e:	b2d2      	uxtb	r2, r2
 802a220:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 802a222:	68fb      	ldr	r3, [r7, #12]
 802a224:	681a      	ldr	r2, [r3, #0]
 802a226:	68bb      	ldr	r3, [r7, #8]
 802a228:	011b      	lsls	r3, r3, #4
 802a22a:	4413      	add	r3, r2
 802a22c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 802a230:	681b      	ldr	r3, [r3, #0]
 802a232:	0c1a      	lsrs	r2, r3, #16
 802a234:	683b      	ldr	r3, [r7, #0]
 802a236:	3302      	adds	r3, #2
 802a238:	b2d2      	uxtb	r2, r2
 802a23a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 802a23c:	68fb      	ldr	r3, [r7, #12]
 802a23e:	681a      	ldr	r2, [r3, #0]
 802a240:	68bb      	ldr	r3, [r7, #8]
 802a242:	011b      	lsls	r3, r3, #4
 802a244:	4413      	add	r3, r2
 802a246:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 802a24a:	681b      	ldr	r3, [r3, #0]
 802a24c:	0e1a      	lsrs	r2, r3, #24
 802a24e:	683b      	ldr	r3, [r7, #0]
 802a250:	3303      	adds	r3, #3
 802a252:	b2d2      	uxtb	r2, r2
 802a254:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 802a256:	68fb      	ldr	r3, [r7, #12]
 802a258:	681a      	ldr	r2, [r3, #0]
 802a25a:	68bb      	ldr	r3, [r7, #8]
 802a25c:	011b      	lsls	r3, r3, #4
 802a25e:	4413      	add	r3, r2
 802a260:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 802a264:	681a      	ldr	r2, [r3, #0]
 802a266:	683b      	ldr	r3, [r7, #0]
 802a268:	3304      	adds	r3, #4
 802a26a:	b2d2      	uxtb	r2, r2
 802a26c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 802a26e:	68fb      	ldr	r3, [r7, #12]
 802a270:	681a      	ldr	r2, [r3, #0]
 802a272:	68bb      	ldr	r3, [r7, #8]
 802a274:	011b      	lsls	r3, r3, #4
 802a276:	4413      	add	r3, r2
 802a278:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 802a27c:	681b      	ldr	r3, [r3, #0]
 802a27e:	0a1a      	lsrs	r2, r3, #8
 802a280:	683b      	ldr	r3, [r7, #0]
 802a282:	3305      	adds	r3, #5
 802a284:	b2d2      	uxtb	r2, r2
 802a286:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 802a288:	68fb      	ldr	r3, [r7, #12]
 802a28a:	681a      	ldr	r2, [r3, #0]
 802a28c:	68bb      	ldr	r3, [r7, #8]
 802a28e:	011b      	lsls	r3, r3, #4
 802a290:	4413      	add	r3, r2
 802a292:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 802a296:	681b      	ldr	r3, [r3, #0]
 802a298:	0c1a      	lsrs	r2, r3, #16
 802a29a:	683b      	ldr	r3, [r7, #0]
 802a29c:	3306      	adds	r3, #6
 802a29e:	b2d2      	uxtb	r2, r2
 802a2a0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 802a2a2:	68fb      	ldr	r3, [r7, #12]
 802a2a4:	681a      	ldr	r2, [r3, #0]
 802a2a6:	68bb      	ldr	r3, [r7, #8]
 802a2a8:	011b      	lsls	r3, r3, #4
 802a2aa:	4413      	add	r3, r2
 802a2ac:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 802a2b0:	681b      	ldr	r3, [r3, #0]
 802a2b2:	0e1a      	lsrs	r2, r3, #24
 802a2b4:	683b      	ldr	r3, [r7, #0]
 802a2b6:	3307      	adds	r3, #7
 802a2b8:	b2d2      	uxtb	r2, r2
 802a2ba:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 802a2bc:	68bb      	ldr	r3, [r7, #8]
 802a2be:	2b00      	cmp	r3, #0
 802a2c0:	d108      	bne.n	802a2d4 <HAL_CAN_GetRxMessage+0x22c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 802a2c2:	68fb      	ldr	r3, [r7, #12]
 802a2c4:	681b      	ldr	r3, [r3, #0]
 802a2c6:	68da      	ldr	r2, [r3, #12]
 802a2c8:	68fb      	ldr	r3, [r7, #12]
 802a2ca:	681b      	ldr	r3, [r3, #0]
 802a2cc:	f042 0220 	orr.w	r2, r2, #32
 802a2d0:	60da      	str	r2, [r3, #12]
 802a2d2:	e007      	b.n	802a2e4 <HAL_CAN_GetRxMessage+0x23c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 802a2d4:	68fb      	ldr	r3, [r7, #12]
 802a2d6:	681b      	ldr	r3, [r3, #0]
 802a2d8:	691a      	ldr	r2, [r3, #16]
 802a2da:	68fb      	ldr	r3, [r7, #12]
 802a2dc:	681b      	ldr	r3, [r3, #0]
 802a2de:	f042 0220 	orr.w	r2, r2, #32
 802a2e2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 802a2e4:	2300      	movs	r3, #0
 802a2e6:	e006      	b.n	802a2f6 <HAL_CAN_GetRxMessage+0x24e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 802a2e8:	68fb      	ldr	r3, [r7, #12]
 802a2ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802a2ec:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 802a2f0:	68fb      	ldr	r3, [r7, #12]
 802a2f2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 802a2f4:	2301      	movs	r3, #1
  }
}
 802a2f6:	4618      	mov	r0, r3
 802a2f8:	3718      	adds	r7, #24
 802a2fa:	46bd      	mov	sp, r7
 802a2fc:	bd80      	pop	{r7, pc}
 802a2fe:	bf00      	nop
 802a300:	0803816c 	.word	0x0803816c

0802a304 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 802a304:	b580      	push	{r7, lr}
 802a306:	b084      	sub	sp, #16
 802a308:	af00      	add	r7, sp, #0
 802a30a:	6078      	str	r0, [r7, #4]
 802a30c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 802a30e:	687b      	ldr	r3, [r7, #4]
 802a310:	f893 3020 	ldrb.w	r3, [r3, #32]
 802a314:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));
 802a316:	683b      	ldr	r3, [r7, #0]
 802a318:	4a11      	ldr	r2, [pc, #68]	@ (802a360 <HAL_CAN_ActivateNotification+0x5c>)
 802a31a:	4293      	cmp	r3, r2
 802a31c:	d904      	bls.n	802a328 <HAL_CAN_ActivateNotification+0x24>
 802a31e:	f240 6182 	movw	r1, #1666	@ 0x682
 802a322:	4810      	ldr	r0, [pc, #64]	@ (802a364 <HAL_CAN_ActivateNotification+0x60>)
 802a324:	f7fd fce7 	bl	8027cf6 <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 802a328:	7bfb      	ldrb	r3, [r7, #15]
 802a32a:	2b01      	cmp	r3, #1
 802a32c:	d002      	beq.n	802a334 <HAL_CAN_ActivateNotification+0x30>
 802a32e:	7bfb      	ldrb	r3, [r7, #15]
 802a330:	2b02      	cmp	r3, #2
 802a332:	d109      	bne.n	802a348 <HAL_CAN_ActivateNotification+0x44>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 802a334:	687b      	ldr	r3, [r7, #4]
 802a336:	681b      	ldr	r3, [r3, #0]
 802a338:	6959      	ldr	r1, [r3, #20]
 802a33a:	687b      	ldr	r3, [r7, #4]
 802a33c:	681b      	ldr	r3, [r3, #0]
 802a33e:	683a      	ldr	r2, [r7, #0]
 802a340:	430a      	orrs	r2, r1
 802a342:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 802a344:	2300      	movs	r3, #0
 802a346:	e006      	b.n	802a356 <HAL_CAN_ActivateNotification+0x52>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 802a348:	687b      	ldr	r3, [r7, #4]
 802a34a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802a34c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 802a350:	687b      	ldr	r3, [r7, #4]
 802a352:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 802a354:	2301      	movs	r3, #1
  }
}
 802a356:	4618      	mov	r0, r3
 802a358:	3710      	adds	r7, #16
 802a35a:	46bd      	mov	sp, r7
 802a35c:	bd80      	pop	{r7, pc}
 802a35e:	bf00      	nop
 802a360:	00038f7f 	.word	0x00038f7f
 802a364:	0803816c 	.word	0x0803816c

0802a368 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 802a368:	b580      	push	{r7, lr}
 802a36a:	b08a      	sub	sp, #40	@ 0x28
 802a36c:	af00      	add	r7, sp, #0
 802a36e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 802a370:	2300      	movs	r3, #0
 802a372:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 802a374:	687b      	ldr	r3, [r7, #4]
 802a376:	681b      	ldr	r3, [r3, #0]
 802a378:	695b      	ldr	r3, [r3, #20]
 802a37a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 802a37c:	687b      	ldr	r3, [r7, #4]
 802a37e:	681b      	ldr	r3, [r3, #0]
 802a380:	685b      	ldr	r3, [r3, #4]
 802a382:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 802a384:	687b      	ldr	r3, [r7, #4]
 802a386:	681b      	ldr	r3, [r3, #0]
 802a388:	689b      	ldr	r3, [r3, #8]
 802a38a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 802a38c:	687b      	ldr	r3, [r7, #4]
 802a38e:	681b      	ldr	r3, [r3, #0]
 802a390:	68db      	ldr	r3, [r3, #12]
 802a392:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 802a394:	687b      	ldr	r3, [r7, #4]
 802a396:	681b      	ldr	r3, [r3, #0]
 802a398:	691b      	ldr	r3, [r3, #16]
 802a39a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 802a39c:	687b      	ldr	r3, [r7, #4]
 802a39e:	681b      	ldr	r3, [r3, #0]
 802a3a0:	699b      	ldr	r3, [r3, #24]
 802a3a2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 802a3a4:	6a3b      	ldr	r3, [r7, #32]
 802a3a6:	f003 0301 	and.w	r3, r3, #1
 802a3aa:	2b00      	cmp	r3, #0
 802a3ac:	f000 8083 	beq.w	802a4b6 <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 802a3b0:	69bb      	ldr	r3, [r7, #24]
 802a3b2:	f003 0301 	and.w	r3, r3, #1
 802a3b6:	2b00      	cmp	r3, #0
 802a3b8:	d025      	beq.n	802a406 <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 802a3ba:	687b      	ldr	r3, [r7, #4]
 802a3bc:	681b      	ldr	r3, [r3, #0]
 802a3be:	2201      	movs	r2, #1
 802a3c0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 802a3c2:	69bb      	ldr	r3, [r7, #24]
 802a3c4:	f003 0302 	and.w	r3, r3, #2
 802a3c8:	2b00      	cmp	r3, #0
 802a3ca:	d004      	beq.n	802a3d6 <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 802a3cc:	687b      	ldr	r3, [r7, #4]
 802a3ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802a3d0:	6878      	ldr	r0, [r7, #4]
 802a3d2:	4798      	blx	r3
 802a3d4:	e017      	b.n	802a406 <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 802a3d6:	69bb      	ldr	r3, [r7, #24]
 802a3d8:	f003 0304 	and.w	r3, r3, #4
 802a3dc:	2b00      	cmp	r3, #0
 802a3de:	d004      	beq.n	802a3ea <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 802a3e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802a3e2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 802a3e6:	627b      	str	r3, [r7, #36]	@ 0x24
 802a3e8:	e00d      	b.n	802a406 <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 802a3ea:	69bb      	ldr	r3, [r7, #24]
 802a3ec:	f003 0308 	and.w	r3, r3, #8
 802a3f0:	2b00      	cmp	r3, #0
 802a3f2:	d004      	beq.n	802a3fe <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 802a3f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802a3f6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 802a3fa:	627b      	str	r3, [r7, #36]	@ 0x24
 802a3fc:	e003      	b.n	802a406 <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 802a3fe:	687b      	ldr	r3, [r7, #4]
 802a400:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802a402:	6878      	ldr	r0, [r7, #4]
 802a404:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 802a406:	69bb      	ldr	r3, [r7, #24]
 802a408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 802a40c:	2b00      	cmp	r3, #0
 802a40e:	d026      	beq.n	802a45e <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 802a410:	687b      	ldr	r3, [r7, #4]
 802a412:	681b      	ldr	r3, [r3, #0]
 802a414:	f44f 7280 	mov.w	r2, #256	@ 0x100
 802a418:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 802a41a:	69bb      	ldr	r3, [r7, #24]
 802a41c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 802a420:	2b00      	cmp	r3, #0
 802a422:	d004      	beq.n	802a42e <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 802a424:	687b      	ldr	r3, [r7, #4]
 802a426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802a428:	6878      	ldr	r0, [r7, #4]
 802a42a:	4798      	blx	r3
 802a42c:	e017      	b.n	802a45e <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 802a42e:	69bb      	ldr	r3, [r7, #24]
 802a430:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 802a434:	2b00      	cmp	r3, #0
 802a436:	d004      	beq.n	802a442 <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 802a438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802a43a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802a43e:	627b      	str	r3, [r7, #36]	@ 0x24
 802a440:	e00d      	b.n	802a45e <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 802a442:	69bb      	ldr	r3, [r7, #24]
 802a444:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 802a448:	2b00      	cmp	r3, #0
 802a44a:	d004      	beq.n	802a456 <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 802a44c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802a44e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 802a452:	627b      	str	r3, [r7, #36]	@ 0x24
 802a454:	e003      	b.n	802a45e <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 802a456:	687b      	ldr	r3, [r7, #4]
 802a458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802a45a:	6878      	ldr	r0, [r7, #4]
 802a45c:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 802a45e:	69bb      	ldr	r3, [r7, #24]
 802a460:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 802a464:	2b00      	cmp	r3, #0
 802a466:	d026      	beq.n	802a4b6 <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 802a468:	687b      	ldr	r3, [r7, #4]
 802a46a:	681b      	ldr	r3, [r3, #0]
 802a46c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 802a470:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 802a472:	69bb      	ldr	r3, [r7, #24]
 802a474:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 802a478:	2b00      	cmp	r3, #0
 802a47a:	d004      	beq.n	802a486 <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 802a47c:	687b      	ldr	r3, [r7, #4]
 802a47e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802a480:	6878      	ldr	r0, [r7, #4]
 802a482:	4798      	blx	r3
 802a484:	e017      	b.n	802a4b6 <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 802a486:	69bb      	ldr	r3, [r7, #24]
 802a488:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 802a48c:	2b00      	cmp	r3, #0
 802a48e:	d004      	beq.n	802a49a <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 802a490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802a492:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 802a496:	627b      	str	r3, [r7, #36]	@ 0x24
 802a498:	e00d      	b.n	802a4b6 <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 802a49a:	69bb      	ldr	r3, [r7, #24]
 802a49c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 802a4a0:	2b00      	cmp	r3, #0
 802a4a2:	d004      	beq.n	802a4ae <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 802a4a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802a4a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 802a4aa:	627b      	str	r3, [r7, #36]	@ 0x24
 802a4ac:	e003      	b.n	802a4b6 <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 802a4ae:	687b      	ldr	r3, [r7, #4]
 802a4b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802a4b2:	6878      	ldr	r0, [r7, #4]
 802a4b4:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 802a4b6:	6a3b      	ldr	r3, [r7, #32]
 802a4b8:	f003 0308 	and.w	r3, r3, #8
 802a4bc:	2b00      	cmp	r3, #0
 802a4be:	d00c      	beq.n	802a4da <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 802a4c0:	697b      	ldr	r3, [r7, #20]
 802a4c2:	f003 0310 	and.w	r3, r3, #16
 802a4c6:	2b00      	cmp	r3, #0
 802a4c8:	d007      	beq.n	802a4da <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 802a4ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802a4cc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 802a4d0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 802a4d2:	687b      	ldr	r3, [r7, #4]
 802a4d4:	681b      	ldr	r3, [r3, #0]
 802a4d6:	2210      	movs	r2, #16
 802a4d8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 802a4da:	6a3b      	ldr	r3, [r7, #32]
 802a4dc:	f003 0304 	and.w	r3, r3, #4
 802a4e0:	2b00      	cmp	r3, #0
 802a4e2:	d00c      	beq.n	802a4fe <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 802a4e4:	697b      	ldr	r3, [r7, #20]
 802a4e6:	f003 0308 	and.w	r3, r3, #8
 802a4ea:	2b00      	cmp	r3, #0
 802a4ec:	d007      	beq.n	802a4fe <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 802a4ee:	687b      	ldr	r3, [r7, #4]
 802a4f0:	681b      	ldr	r3, [r3, #0]
 802a4f2:	2208      	movs	r2, #8
 802a4f4:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 802a4f6:	687b      	ldr	r3, [r7, #4]
 802a4f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802a4fa:	6878      	ldr	r0, [r7, #4]
 802a4fc:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 802a4fe:	6a3b      	ldr	r3, [r7, #32]
 802a500:	f003 0302 	and.w	r3, r3, #2
 802a504:	2b00      	cmp	r3, #0
 802a506:	d00a      	beq.n	802a51e <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 802a508:	687b      	ldr	r3, [r7, #4]
 802a50a:	681b      	ldr	r3, [r3, #0]
 802a50c:	68db      	ldr	r3, [r3, #12]
 802a50e:	f003 0303 	and.w	r3, r3, #3
 802a512:	2b00      	cmp	r3, #0
 802a514:	d003      	beq.n	802a51e <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 802a516:	687b      	ldr	r3, [r7, #4]
 802a518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802a51a:	6878      	ldr	r0, [r7, #4]
 802a51c:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 802a51e:	6a3b      	ldr	r3, [r7, #32]
 802a520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802a524:	2b00      	cmp	r3, #0
 802a526:	d00c      	beq.n	802a542 <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 802a528:	693b      	ldr	r3, [r7, #16]
 802a52a:	f003 0310 	and.w	r3, r3, #16
 802a52e:	2b00      	cmp	r3, #0
 802a530:	d007      	beq.n	802a542 <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 802a532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802a534:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 802a538:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 802a53a:	687b      	ldr	r3, [r7, #4]
 802a53c:	681b      	ldr	r3, [r3, #0]
 802a53e:	2210      	movs	r2, #16
 802a540:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 802a542:	6a3b      	ldr	r3, [r7, #32]
 802a544:	f003 0320 	and.w	r3, r3, #32
 802a548:	2b00      	cmp	r3, #0
 802a54a:	d00c      	beq.n	802a566 <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 802a54c:	693b      	ldr	r3, [r7, #16]
 802a54e:	f003 0308 	and.w	r3, r3, #8
 802a552:	2b00      	cmp	r3, #0
 802a554:	d007      	beq.n	802a566 <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 802a556:	687b      	ldr	r3, [r7, #4]
 802a558:	681b      	ldr	r3, [r3, #0]
 802a55a:	2208      	movs	r2, #8
 802a55c:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 802a55e:	687b      	ldr	r3, [r7, #4]
 802a560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 802a562:	6878      	ldr	r0, [r7, #4]
 802a564:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 802a566:	6a3b      	ldr	r3, [r7, #32]
 802a568:	f003 0310 	and.w	r3, r3, #16
 802a56c:	2b00      	cmp	r3, #0
 802a56e:	d00a      	beq.n	802a586 <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 802a570:	687b      	ldr	r3, [r7, #4]
 802a572:	681b      	ldr	r3, [r3, #0]
 802a574:	691b      	ldr	r3, [r3, #16]
 802a576:	f003 0303 	and.w	r3, r3, #3
 802a57a:	2b00      	cmp	r3, #0
 802a57c:	d003      	beq.n	802a586 <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 802a57e:	687b      	ldr	r3, [r7, #4]
 802a580:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 802a582:	6878      	ldr	r0, [r7, #4]
 802a584:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 802a586:	6a3b      	ldr	r3, [r7, #32]
 802a588:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 802a58c:	2b00      	cmp	r3, #0
 802a58e:	d00c      	beq.n	802a5aa <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 802a590:	69fb      	ldr	r3, [r7, #28]
 802a592:	f003 0310 	and.w	r3, r3, #16
 802a596:	2b00      	cmp	r3, #0
 802a598:	d007      	beq.n	802a5aa <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 802a59a:	687b      	ldr	r3, [r7, #4]
 802a59c:	681b      	ldr	r3, [r3, #0]
 802a59e:	2210      	movs	r2, #16
 802a5a0:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 802a5a2:	687b      	ldr	r3, [r7, #4]
 802a5a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802a5a6:	6878      	ldr	r0, [r7, #4]
 802a5a8:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 802a5aa:	6a3b      	ldr	r3, [r7, #32]
 802a5ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 802a5b0:	2b00      	cmp	r3, #0
 802a5b2:	d00c      	beq.n	802a5ce <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 802a5b4:	69fb      	ldr	r3, [r7, #28]
 802a5b6:	f003 0308 	and.w	r3, r3, #8
 802a5ba:	2b00      	cmp	r3, #0
 802a5bc:	d007      	beq.n	802a5ce <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 802a5be:	687b      	ldr	r3, [r7, #4]
 802a5c0:	681b      	ldr	r3, [r3, #0]
 802a5c2:	2208      	movs	r2, #8
 802a5c4:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 802a5c6:	687b      	ldr	r3, [r7, #4]
 802a5c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802a5ca:	6878      	ldr	r0, [r7, #4]
 802a5cc:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 802a5ce:	6a3b      	ldr	r3, [r7, #32]
 802a5d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 802a5d4:	2b00      	cmp	r3, #0
 802a5d6:	d07b      	beq.n	802a6d0 <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 802a5d8:	69fb      	ldr	r3, [r7, #28]
 802a5da:	f003 0304 	and.w	r3, r3, #4
 802a5de:	2b00      	cmp	r3, #0
 802a5e0:	d072      	beq.n	802a6c8 <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 802a5e2:	6a3b      	ldr	r3, [r7, #32]
 802a5e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 802a5e8:	2b00      	cmp	r3, #0
 802a5ea:	d008      	beq.n	802a5fe <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 802a5ec:	68fb      	ldr	r3, [r7, #12]
 802a5ee:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 802a5f2:	2b00      	cmp	r3, #0
 802a5f4:	d003      	beq.n	802a5fe <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 802a5f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802a5f8:	f043 0301 	orr.w	r3, r3, #1
 802a5fc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 802a5fe:	6a3b      	ldr	r3, [r7, #32]
 802a600:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 802a604:	2b00      	cmp	r3, #0
 802a606:	d008      	beq.n	802a61a <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 802a608:	68fb      	ldr	r3, [r7, #12]
 802a60a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 802a60e:	2b00      	cmp	r3, #0
 802a610:	d003      	beq.n	802a61a <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 802a612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802a614:	f043 0302 	orr.w	r3, r3, #2
 802a618:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 802a61a:	6a3b      	ldr	r3, [r7, #32]
 802a61c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 802a620:	2b00      	cmp	r3, #0
 802a622:	d008      	beq.n	802a636 <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 802a624:	68fb      	ldr	r3, [r7, #12]
 802a626:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 802a62a:	2b00      	cmp	r3, #0
 802a62c:	d003      	beq.n	802a636 <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 802a62e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802a630:	f043 0304 	orr.w	r3, r3, #4
 802a634:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 802a636:	6a3b      	ldr	r3, [r7, #32]
 802a638:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 802a63c:	2b00      	cmp	r3, #0
 802a63e:	d043      	beq.n	802a6c8 <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 802a640:	68fb      	ldr	r3, [r7, #12]
 802a642:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 802a646:	2b00      	cmp	r3, #0
 802a648:	d03e      	beq.n	802a6c8 <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 802a64a:	68fb      	ldr	r3, [r7, #12]
 802a64c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 802a650:	2b60      	cmp	r3, #96	@ 0x60
 802a652:	d02b      	beq.n	802a6ac <HAL_CAN_IRQHandler+0x344>
 802a654:	2b60      	cmp	r3, #96	@ 0x60
 802a656:	d82e      	bhi.n	802a6b6 <HAL_CAN_IRQHandler+0x34e>
 802a658:	2b50      	cmp	r3, #80	@ 0x50
 802a65a:	d022      	beq.n	802a6a2 <HAL_CAN_IRQHandler+0x33a>
 802a65c:	2b50      	cmp	r3, #80	@ 0x50
 802a65e:	d82a      	bhi.n	802a6b6 <HAL_CAN_IRQHandler+0x34e>
 802a660:	2b40      	cmp	r3, #64	@ 0x40
 802a662:	d019      	beq.n	802a698 <HAL_CAN_IRQHandler+0x330>
 802a664:	2b40      	cmp	r3, #64	@ 0x40
 802a666:	d826      	bhi.n	802a6b6 <HAL_CAN_IRQHandler+0x34e>
 802a668:	2b30      	cmp	r3, #48	@ 0x30
 802a66a:	d010      	beq.n	802a68e <HAL_CAN_IRQHandler+0x326>
 802a66c:	2b30      	cmp	r3, #48	@ 0x30
 802a66e:	d822      	bhi.n	802a6b6 <HAL_CAN_IRQHandler+0x34e>
 802a670:	2b10      	cmp	r3, #16
 802a672:	d002      	beq.n	802a67a <HAL_CAN_IRQHandler+0x312>
 802a674:	2b20      	cmp	r3, #32
 802a676:	d005      	beq.n	802a684 <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 802a678:	e01d      	b.n	802a6b6 <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 802a67a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802a67c:	f043 0308 	orr.w	r3, r3, #8
 802a680:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 802a682:	e019      	b.n	802a6b8 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 802a684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802a686:	f043 0310 	orr.w	r3, r3, #16
 802a68a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 802a68c:	e014      	b.n	802a6b8 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 802a68e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802a690:	f043 0320 	orr.w	r3, r3, #32
 802a694:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 802a696:	e00f      	b.n	802a6b8 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 802a698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802a69a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802a69e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 802a6a0:	e00a      	b.n	802a6b8 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 802a6a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802a6a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802a6a8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 802a6aa:	e005      	b.n	802a6b8 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 802a6ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802a6ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 802a6b2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 802a6b4:	e000      	b.n	802a6b8 <HAL_CAN_IRQHandler+0x350>
            break;
 802a6b6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 802a6b8:	687b      	ldr	r3, [r7, #4]
 802a6ba:	681b      	ldr	r3, [r3, #0]
 802a6bc:	699a      	ldr	r2, [r3, #24]
 802a6be:	687b      	ldr	r3, [r7, #4]
 802a6c0:	681b      	ldr	r3, [r3, #0]
 802a6c2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 802a6c6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 802a6c8:	687b      	ldr	r3, [r7, #4]
 802a6ca:	681b      	ldr	r3, [r3, #0]
 802a6cc:	2204      	movs	r2, #4
 802a6ce:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 802a6d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802a6d2:	2b00      	cmp	r3, #0
 802a6d4:	d009      	beq.n	802a6ea <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 802a6d6:	687b      	ldr	r3, [r7, #4]
 802a6d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 802a6da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802a6dc:	431a      	orrs	r2, r3
 802a6de:	687b      	ldr	r3, [r7, #4]
 802a6e0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 802a6e2:	687b      	ldr	r3, [r7, #4]
 802a6e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 802a6e6:	6878      	ldr	r0, [r7, #4]
 802a6e8:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 802a6ea:	bf00      	nop
 802a6ec:	3728      	adds	r7, #40	@ 0x28
 802a6ee:	46bd      	mov	sp, r7
 802a6f0:	bd80      	pop	{r7, pc}

0802a6f2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 802a6f2:	b480      	push	{r7}
 802a6f4:	b083      	sub	sp, #12
 802a6f6:	af00      	add	r7, sp, #0
 802a6f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 802a6fa:	bf00      	nop
 802a6fc:	370c      	adds	r7, #12
 802a6fe:	46bd      	mov	sp, r7
 802a700:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a704:	4770      	bx	lr

0802a706 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 802a706:	b480      	push	{r7}
 802a708:	b083      	sub	sp, #12
 802a70a:	af00      	add	r7, sp, #0
 802a70c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 802a70e:	bf00      	nop
 802a710:	370c      	adds	r7, #12
 802a712:	46bd      	mov	sp, r7
 802a714:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a718:	4770      	bx	lr

0802a71a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 802a71a:	b480      	push	{r7}
 802a71c:	b083      	sub	sp, #12
 802a71e:	af00      	add	r7, sp, #0
 802a720:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 802a722:	bf00      	nop
 802a724:	370c      	adds	r7, #12
 802a726:	46bd      	mov	sp, r7
 802a728:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a72c:	4770      	bx	lr

0802a72e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 802a72e:	b480      	push	{r7}
 802a730:	b083      	sub	sp, #12
 802a732:	af00      	add	r7, sp, #0
 802a734:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 802a736:	bf00      	nop
 802a738:	370c      	adds	r7, #12
 802a73a:	46bd      	mov	sp, r7
 802a73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a740:	4770      	bx	lr

0802a742 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 802a742:	b480      	push	{r7}
 802a744:	b083      	sub	sp, #12
 802a746:	af00      	add	r7, sp, #0
 802a748:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 802a74a:	bf00      	nop
 802a74c:	370c      	adds	r7, #12
 802a74e:	46bd      	mov	sp, r7
 802a750:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a754:	4770      	bx	lr

0802a756 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 802a756:	b480      	push	{r7}
 802a758:	b083      	sub	sp, #12
 802a75a:	af00      	add	r7, sp, #0
 802a75c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 802a75e:	bf00      	nop
 802a760:	370c      	adds	r7, #12
 802a762:	46bd      	mov	sp, r7
 802a764:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a768:	4770      	bx	lr

0802a76a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 802a76a:	b480      	push	{r7}
 802a76c:	b083      	sub	sp, #12
 802a76e:	af00      	add	r7, sp, #0
 802a770:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 802a772:	bf00      	nop
 802a774:	370c      	adds	r7, #12
 802a776:	46bd      	mov	sp, r7
 802a778:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a77c:	4770      	bx	lr

0802a77e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 802a77e:	b480      	push	{r7}
 802a780:	b083      	sub	sp, #12
 802a782:	af00      	add	r7, sp, #0
 802a784:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 802a786:	bf00      	nop
 802a788:	370c      	adds	r7, #12
 802a78a:	46bd      	mov	sp, r7
 802a78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a790:	4770      	bx	lr

0802a792 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 802a792:	b480      	push	{r7}
 802a794:	b083      	sub	sp, #12
 802a796:	af00      	add	r7, sp, #0
 802a798:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 802a79a:	bf00      	nop
 802a79c:	370c      	adds	r7, #12
 802a79e:	46bd      	mov	sp, r7
 802a7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a7a4:	4770      	bx	lr

0802a7a6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 802a7a6:	b480      	push	{r7}
 802a7a8:	b083      	sub	sp, #12
 802a7aa:	af00      	add	r7, sp, #0
 802a7ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 802a7ae:	bf00      	nop
 802a7b0:	370c      	adds	r7, #12
 802a7b2:	46bd      	mov	sp, r7
 802a7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a7b8:	4770      	bx	lr

0802a7ba <HAL_CAN_GetState>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL state
  */
HAL_CAN_StateTypeDef HAL_CAN_GetState(const CAN_HandleTypeDef *hcan)
{
 802a7ba:	b480      	push	{r7}
 802a7bc:	b085      	sub	sp, #20
 802a7be:	af00      	add	r7, sp, #0
 802a7c0:	6078      	str	r0, [r7, #4]
  HAL_CAN_StateTypeDef state = hcan->State;
 802a7c2:	687b      	ldr	r3, [r7, #4]
 802a7c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 802a7c8:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_CAN_STATE_READY) ||
 802a7ca:	7bfb      	ldrb	r3, [r7, #15]
 802a7cc:	2b01      	cmp	r3, #1
 802a7ce:	d002      	beq.n	802a7d6 <HAL_CAN_GetState+0x1c>
 802a7d0:	7bfb      	ldrb	r3, [r7, #15]
 802a7d2:	2b02      	cmp	r3, #2
 802a7d4:	d112      	bne.n	802a7fc <HAL_CAN_GetState+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check sleep mode acknowledge flag */
    if ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 802a7d6:	687b      	ldr	r3, [r7, #4]
 802a7d8:	681b      	ldr	r3, [r3, #0]
 802a7da:	685b      	ldr	r3, [r3, #4]
 802a7dc:	f003 0302 	and.w	r3, r3, #2
 802a7e0:	2b00      	cmp	r3, #0
 802a7e2:	d002      	beq.n	802a7ea <HAL_CAN_GetState+0x30>
    {
      /* Sleep mode is active */
      state = HAL_CAN_STATE_SLEEP_ACTIVE;
 802a7e4:	2304      	movs	r3, #4
 802a7e6:	73fb      	strb	r3, [r7, #15]
 802a7e8:	e008      	b.n	802a7fc <HAL_CAN_GetState+0x42>
    }
    /* Check sleep mode request flag */
    else if ((hcan->Instance->MCR & CAN_MCR_SLEEP) != 0U)
 802a7ea:	687b      	ldr	r3, [r7, #4]
 802a7ec:	681b      	ldr	r3, [r3, #0]
 802a7ee:	681b      	ldr	r3, [r3, #0]
 802a7f0:	f003 0302 	and.w	r3, r3, #2
 802a7f4:	2b00      	cmp	r3, #0
 802a7f6:	d001      	beq.n	802a7fc <HAL_CAN_GetState+0x42>
    {
      /* Sleep mode request is pending */
      state = HAL_CAN_STATE_SLEEP_PENDING;
 802a7f8:	2303      	movs	r3, #3
 802a7fa:	73fb      	strb	r3, [r7, #15]
      /* Neither sleep mode request nor sleep mode acknowledge */
    }
  }

  /* Return CAN state */
  return state;
 802a7fc:	7bfb      	ldrb	r3, [r7, #15]
}
 802a7fe:	4618      	mov	r0, r3
 802a800:	3714      	adds	r7, #20
 802a802:	46bd      	mov	sp, r7
 802a804:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a808:	4770      	bx	lr

0802a80a <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 802a80a:	b480      	push	{r7}
 802a80c:	b083      	sub	sp, #12
 802a80e:	af00      	add	r7, sp, #0
 802a810:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 802a812:	687b      	ldr	r3, [r7, #4]
 802a814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 802a816:	4618      	mov	r0, r3
 802a818:	370c      	adds	r7, #12
 802a81a:	46bd      	mov	sp, r7
 802a81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a820:	4770      	bx	lr

0802a822 <HAL_CAN_ResetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
{
 802a822:	b480      	push	{r7}
 802a824:	b085      	sub	sp, #20
 802a826:	af00      	add	r7, sp, #0
 802a828:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 802a82a:	2300      	movs	r3, #0
 802a82c:	73fb      	strb	r3, [r7, #15]
  HAL_CAN_StateTypeDef state = hcan->State;
 802a82e:	687b      	ldr	r3, [r7, #4]
 802a830:	f893 3020 	ldrb.w	r3, [r3, #32]
 802a834:	73bb      	strb	r3, [r7, #14]

  if ((state == HAL_CAN_STATE_READY) ||
 802a836:	7bbb      	ldrb	r3, [r7, #14]
 802a838:	2b01      	cmp	r3, #1
 802a83a:	d002      	beq.n	802a842 <HAL_CAN_ResetError+0x20>
 802a83c:	7bbb      	ldrb	r3, [r7, #14]
 802a83e:	2b02      	cmp	r3, #2
 802a840:	d103      	bne.n	802a84a <HAL_CAN_ResetError+0x28>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Reset CAN error code */
    hcan->ErrorCode = 0U;
 802a842:	687b      	ldr	r3, [r7, #4]
 802a844:	2200      	movs	r2, #0
 802a846:	625a      	str	r2, [r3, #36]	@ 0x24
 802a848:	e007      	b.n	802a85a <HAL_CAN_ResetError+0x38>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 802a84a:	687b      	ldr	r3, [r7, #4]
 802a84c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802a84e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 802a852:	687b      	ldr	r3, [r7, #4]
 802a854:	625a      	str	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 802a856:	2301      	movs	r3, #1
 802a858:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the status */
  return status;
 802a85a:	7bfb      	ldrb	r3, [r7, #15]
}
 802a85c:	4618      	mov	r0, r3
 802a85e:	3714      	adds	r7, #20
 802a860:	46bd      	mov	sp, r7
 802a862:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a866:	4770      	bx	lr

0802a868 <__NVIC_SetPriorityGrouping>:
{
 802a868:	b480      	push	{r7}
 802a86a:	b085      	sub	sp, #20
 802a86c:	af00      	add	r7, sp, #0
 802a86e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 802a870:	687b      	ldr	r3, [r7, #4]
 802a872:	f003 0307 	and.w	r3, r3, #7
 802a876:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 802a878:	4b0c      	ldr	r3, [pc, #48]	@ (802a8ac <__NVIC_SetPriorityGrouping+0x44>)
 802a87a:	68db      	ldr	r3, [r3, #12]
 802a87c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 802a87e:	68ba      	ldr	r2, [r7, #8]
 802a880:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 802a884:	4013      	ands	r3, r2
 802a886:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 802a888:	68fb      	ldr	r3, [r7, #12]
 802a88a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 802a88c:	68bb      	ldr	r3, [r7, #8]
 802a88e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 802a890:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 802a894:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 802a898:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 802a89a:	4a04      	ldr	r2, [pc, #16]	@ (802a8ac <__NVIC_SetPriorityGrouping+0x44>)
 802a89c:	68bb      	ldr	r3, [r7, #8]
 802a89e:	60d3      	str	r3, [r2, #12]
}
 802a8a0:	bf00      	nop
 802a8a2:	3714      	adds	r7, #20
 802a8a4:	46bd      	mov	sp, r7
 802a8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a8aa:	4770      	bx	lr
 802a8ac:	e000ed00 	.word	0xe000ed00

0802a8b0 <__NVIC_GetPriorityGrouping>:
{
 802a8b0:	b480      	push	{r7}
 802a8b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 802a8b4:	4b04      	ldr	r3, [pc, #16]	@ (802a8c8 <__NVIC_GetPriorityGrouping+0x18>)
 802a8b6:	68db      	ldr	r3, [r3, #12]
 802a8b8:	0a1b      	lsrs	r3, r3, #8
 802a8ba:	f003 0307 	and.w	r3, r3, #7
}
 802a8be:	4618      	mov	r0, r3
 802a8c0:	46bd      	mov	sp, r7
 802a8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a8c6:	4770      	bx	lr
 802a8c8:	e000ed00 	.word	0xe000ed00

0802a8cc <__NVIC_EnableIRQ>:
{
 802a8cc:	b480      	push	{r7}
 802a8ce:	b083      	sub	sp, #12
 802a8d0:	af00      	add	r7, sp, #0
 802a8d2:	4603      	mov	r3, r0
 802a8d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 802a8d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802a8da:	2b00      	cmp	r3, #0
 802a8dc:	db0b      	blt.n	802a8f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 802a8de:	79fb      	ldrb	r3, [r7, #7]
 802a8e0:	f003 021f 	and.w	r2, r3, #31
 802a8e4:	4907      	ldr	r1, [pc, #28]	@ (802a904 <__NVIC_EnableIRQ+0x38>)
 802a8e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802a8ea:	095b      	lsrs	r3, r3, #5
 802a8ec:	2001      	movs	r0, #1
 802a8ee:	fa00 f202 	lsl.w	r2, r0, r2
 802a8f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 802a8f6:	bf00      	nop
 802a8f8:	370c      	adds	r7, #12
 802a8fa:	46bd      	mov	sp, r7
 802a8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a900:	4770      	bx	lr
 802a902:	bf00      	nop
 802a904:	e000e100 	.word	0xe000e100

0802a908 <__NVIC_DisableIRQ>:
{
 802a908:	b480      	push	{r7}
 802a90a:	b083      	sub	sp, #12
 802a90c:	af00      	add	r7, sp, #0
 802a90e:	4603      	mov	r3, r0
 802a910:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 802a912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802a916:	2b00      	cmp	r3, #0
 802a918:	db12      	blt.n	802a940 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 802a91a:	79fb      	ldrb	r3, [r7, #7]
 802a91c:	f003 021f 	and.w	r2, r3, #31
 802a920:	490a      	ldr	r1, [pc, #40]	@ (802a94c <__NVIC_DisableIRQ+0x44>)
 802a922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802a926:	095b      	lsrs	r3, r3, #5
 802a928:	2001      	movs	r0, #1
 802a92a:	fa00 f202 	lsl.w	r2, r0, r2
 802a92e:	3320      	adds	r3, #32
 802a930:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 802a934:	f3bf 8f4f 	dsb	sy
}
 802a938:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 802a93a:	f3bf 8f6f 	isb	sy
}
 802a93e:	bf00      	nop
}
 802a940:	bf00      	nop
 802a942:	370c      	adds	r7, #12
 802a944:	46bd      	mov	sp, r7
 802a946:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a94a:	4770      	bx	lr
 802a94c:	e000e100 	.word	0xe000e100

0802a950 <__NVIC_ClearPendingIRQ>:
{
 802a950:	b480      	push	{r7}
 802a952:	b083      	sub	sp, #12
 802a954:	af00      	add	r7, sp, #0
 802a956:	4603      	mov	r3, r0
 802a958:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 802a95a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802a95e:	2b00      	cmp	r3, #0
 802a960:	db0c      	blt.n	802a97c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 802a962:	79fb      	ldrb	r3, [r7, #7]
 802a964:	f003 021f 	and.w	r2, r3, #31
 802a968:	4907      	ldr	r1, [pc, #28]	@ (802a988 <__NVIC_ClearPendingIRQ+0x38>)
 802a96a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802a96e:	095b      	lsrs	r3, r3, #5
 802a970:	2001      	movs	r0, #1
 802a972:	fa00 f202 	lsl.w	r2, r0, r2
 802a976:	3360      	adds	r3, #96	@ 0x60
 802a978:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 802a97c:	bf00      	nop
 802a97e:	370c      	adds	r7, #12
 802a980:	46bd      	mov	sp, r7
 802a982:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a986:	4770      	bx	lr
 802a988:	e000e100 	.word	0xe000e100

0802a98c <__NVIC_SetPriority>:
{
 802a98c:	b480      	push	{r7}
 802a98e:	b083      	sub	sp, #12
 802a990:	af00      	add	r7, sp, #0
 802a992:	4603      	mov	r3, r0
 802a994:	6039      	str	r1, [r7, #0]
 802a996:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 802a998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802a99c:	2b00      	cmp	r3, #0
 802a99e:	db0a      	blt.n	802a9b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802a9a0:	683b      	ldr	r3, [r7, #0]
 802a9a2:	b2da      	uxtb	r2, r3
 802a9a4:	490c      	ldr	r1, [pc, #48]	@ (802a9d8 <__NVIC_SetPriority+0x4c>)
 802a9a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802a9aa:	0112      	lsls	r2, r2, #4
 802a9ac:	b2d2      	uxtb	r2, r2
 802a9ae:	440b      	add	r3, r1
 802a9b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 802a9b4:	e00a      	b.n	802a9cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802a9b6:	683b      	ldr	r3, [r7, #0]
 802a9b8:	b2da      	uxtb	r2, r3
 802a9ba:	4908      	ldr	r1, [pc, #32]	@ (802a9dc <__NVIC_SetPriority+0x50>)
 802a9bc:	79fb      	ldrb	r3, [r7, #7]
 802a9be:	f003 030f 	and.w	r3, r3, #15
 802a9c2:	3b04      	subs	r3, #4
 802a9c4:	0112      	lsls	r2, r2, #4
 802a9c6:	b2d2      	uxtb	r2, r2
 802a9c8:	440b      	add	r3, r1
 802a9ca:	761a      	strb	r2, [r3, #24]
}
 802a9cc:	bf00      	nop
 802a9ce:	370c      	adds	r7, #12
 802a9d0:	46bd      	mov	sp, r7
 802a9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a9d6:	4770      	bx	lr
 802a9d8:	e000e100 	.word	0xe000e100
 802a9dc:	e000ed00 	.word	0xe000ed00

0802a9e0 <NVIC_EncodePriority>:
{
 802a9e0:	b480      	push	{r7}
 802a9e2:	b089      	sub	sp, #36	@ 0x24
 802a9e4:	af00      	add	r7, sp, #0
 802a9e6:	60f8      	str	r0, [r7, #12]
 802a9e8:	60b9      	str	r1, [r7, #8]
 802a9ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 802a9ec:	68fb      	ldr	r3, [r7, #12]
 802a9ee:	f003 0307 	and.w	r3, r3, #7
 802a9f2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 802a9f4:	69fb      	ldr	r3, [r7, #28]
 802a9f6:	f1c3 0307 	rsb	r3, r3, #7
 802a9fa:	2b04      	cmp	r3, #4
 802a9fc:	bf28      	it	cs
 802a9fe:	2304      	movcs	r3, #4
 802aa00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 802aa02:	69fb      	ldr	r3, [r7, #28]
 802aa04:	3304      	adds	r3, #4
 802aa06:	2b06      	cmp	r3, #6
 802aa08:	d902      	bls.n	802aa10 <NVIC_EncodePriority+0x30>
 802aa0a:	69fb      	ldr	r3, [r7, #28]
 802aa0c:	3b03      	subs	r3, #3
 802aa0e:	e000      	b.n	802aa12 <NVIC_EncodePriority+0x32>
 802aa10:	2300      	movs	r3, #0
 802aa12:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 802aa14:	f04f 32ff 	mov.w	r2, #4294967295
 802aa18:	69bb      	ldr	r3, [r7, #24]
 802aa1a:	fa02 f303 	lsl.w	r3, r2, r3
 802aa1e:	43da      	mvns	r2, r3
 802aa20:	68bb      	ldr	r3, [r7, #8]
 802aa22:	401a      	ands	r2, r3
 802aa24:	697b      	ldr	r3, [r7, #20]
 802aa26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 802aa28:	f04f 31ff 	mov.w	r1, #4294967295
 802aa2c:	697b      	ldr	r3, [r7, #20]
 802aa2e:	fa01 f303 	lsl.w	r3, r1, r3
 802aa32:	43d9      	mvns	r1, r3
 802aa34:	687b      	ldr	r3, [r7, #4]
 802aa36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 802aa38:	4313      	orrs	r3, r2
}
 802aa3a:	4618      	mov	r0, r3
 802aa3c:	3724      	adds	r7, #36	@ 0x24
 802aa3e:	46bd      	mov	sp, r7
 802aa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 802aa44:	4770      	bx	lr
	...

0802aa48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 802aa48:	b580      	push	{r7, lr}
 802aa4a:	b082      	sub	sp, #8
 802aa4c:	af00      	add	r7, sp, #0
 802aa4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 802aa50:	687b      	ldr	r3, [r7, #4]
 802aa52:	2b07      	cmp	r3, #7
 802aa54:	d00f      	beq.n	802aa76 <HAL_NVIC_SetPriorityGrouping+0x2e>
 802aa56:	687b      	ldr	r3, [r7, #4]
 802aa58:	2b06      	cmp	r3, #6
 802aa5a:	d00c      	beq.n	802aa76 <HAL_NVIC_SetPriorityGrouping+0x2e>
 802aa5c:	687b      	ldr	r3, [r7, #4]
 802aa5e:	2b05      	cmp	r3, #5
 802aa60:	d009      	beq.n	802aa76 <HAL_NVIC_SetPriorityGrouping+0x2e>
 802aa62:	687b      	ldr	r3, [r7, #4]
 802aa64:	2b04      	cmp	r3, #4
 802aa66:	d006      	beq.n	802aa76 <HAL_NVIC_SetPriorityGrouping+0x2e>
 802aa68:	687b      	ldr	r3, [r7, #4]
 802aa6a:	2b03      	cmp	r3, #3
 802aa6c:	d003      	beq.n	802aa76 <HAL_NVIC_SetPriorityGrouping+0x2e>
 802aa6e:	2190      	movs	r1, #144	@ 0x90
 802aa70:	4804      	ldr	r0, [pc, #16]	@ (802aa84 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 802aa72:	f7fd f940 	bl	8027cf6 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 802aa76:	6878      	ldr	r0, [r7, #4]
 802aa78:	f7ff fef6 	bl	802a868 <__NVIC_SetPriorityGrouping>
}
 802aa7c:	bf00      	nop
 802aa7e:	3708      	adds	r7, #8
 802aa80:	46bd      	mov	sp, r7
 802aa82:	bd80      	pop	{r7, pc}
 802aa84:	080381e0 	.word	0x080381e0

0802aa88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 802aa88:	b580      	push	{r7, lr}
 802aa8a:	b086      	sub	sp, #24
 802aa8c:	af00      	add	r7, sp, #0
 802aa8e:	4603      	mov	r3, r0
 802aa90:	60b9      	str	r1, [r7, #8]
 802aa92:	607a      	str	r2, [r7, #4]
 802aa94:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 802aa96:	2300      	movs	r3, #0
 802aa98:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 802aa9a:	687b      	ldr	r3, [r7, #4]
 802aa9c:	2b0f      	cmp	r3, #15
 802aa9e:	d903      	bls.n	802aaa8 <HAL_NVIC_SetPriority+0x20>
 802aaa0:	21a8      	movs	r1, #168	@ 0xa8
 802aaa2:	480e      	ldr	r0, [pc, #56]	@ (802aadc <HAL_NVIC_SetPriority+0x54>)
 802aaa4:	f7fd f927 	bl	8027cf6 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 802aaa8:	68bb      	ldr	r3, [r7, #8]
 802aaaa:	2b0f      	cmp	r3, #15
 802aaac:	d903      	bls.n	802aab6 <HAL_NVIC_SetPriority+0x2e>
 802aaae:	21a9      	movs	r1, #169	@ 0xa9
 802aab0:	480a      	ldr	r0, [pc, #40]	@ (802aadc <HAL_NVIC_SetPriority+0x54>)
 802aab2:	f7fd f920 	bl	8027cf6 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 802aab6:	f7ff fefb 	bl	802a8b0 <__NVIC_GetPriorityGrouping>
 802aaba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 802aabc:	687a      	ldr	r2, [r7, #4]
 802aabe:	68b9      	ldr	r1, [r7, #8]
 802aac0:	6978      	ldr	r0, [r7, #20]
 802aac2:	f7ff ff8d 	bl	802a9e0 <NVIC_EncodePriority>
 802aac6:	4602      	mov	r2, r0
 802aac8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802aacc:	4611      	mov	r1, r2
 802aace:	4618      	mov	r0, r3
 802aad0:	f7ff ff5c 	bl	802a98c <__NVIC_SetPriority>
}
 802aad4:	bf00      	nop
 802aad6:	3718      	adds	r7, #24
 802aad8:	46bd      	mov	sp, r7
 802aada:	bd80      	pop	{r7, pc}
 802aadc:	080381e0 	.word	0x080381e0

0802aae0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 802aae0:	b580      	push	{r7, lr}
 802aae2:	b082      	sub	sp, #8
 802aae4:	af00      	add	r7, sp, #0
 802aae6:	4603      	mov	r3, r0
 802aae8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 802aaea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802aaee:	2b00      	cmp	r3, #0
 802aaf0:	da03      	bge.n	802aafa <HAL_NVIC_EnableIRQ+0x1a>
 802aaf2:	21bc      	movs	r1, #188	@ 0xbc
 802aaf4:	4805      	ldr	r0, [pc, #20]	@ (802ab0c <HAL_NVIC_EnableIRQ+0x2c>)
 802aaf6:	f7fd f8fe 	bl	8027cf6 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 802aafa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802aafe:	4618      	mov	r0, r3
 802ab00:	f7ff fee4 	bl	802a8cc <__NVIC_EnableIRQ>
}
 802ab04:	bf00      	nop
 802ab06:	3708      	adds	r7, #8
 802ab08:	46bd      	mov	sp, r7
 802ab0a:	bd80      	pop	{r7, pc}
 802ab0c:	080381e0 	.word	0x080381e0

0802ab10 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 802ab10:	b580      	push	{r7, lr}
 802ab12:	b082      	sub	sp, #8
 802ab14:	af00      	add	r7, sp, #0
 802ab16:	4603      	mov	r3, r0
 802ab18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 802ab1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802ab1e:	2b00      	cmp	r3, #0
 802ab20:	da03      	bge.n	802ab2a <HAL_NVIC_DisableIRQ+0x1a>
 802ab22:	21cc      	movs	r1, #204	@ 0xcc
 802ab24:	4805      	ldr	r0, [pc, #20]	@ (802ab3c <HAL_NVIC_DisableIRQ+0x2c>)
 802ab26:	f7fd f8e6 	bl	8027cf6 <assert_failed>
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 802ab2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802ab2e:	4618      	mov	r0, r3
 802ab30:	f7ff feea 	bl	802a908 <__NVIC_DisableIRQ>
}
 802ab34:	bf00      	nop
 802ab36:	3708      	adds	r7, #8
 802ab38:	46bd      	mov	sp, r7
 802ab3a:	bd80      	pop	{r7, pc}
 802ab3c:	080381e0 	.word	0x080381e0

0802ab40 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 802ab40:	b580      	push	{r7, lr}
 802ab42:	b082      	sub	sp, #8
 802ab44:	af00      	add	r7, sp, #0
 802ab46:	4603      	mov	r3, r0
 802ab48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 802ab4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802ab4e:	2b00      	cmp	r3, #0
 802ab50:	da04      	bge.n	802ab5c <HAL_NVIC_ClearPendingIRQ+0x1c>
 802ab52:	f240 11c9 	movw	r1, #457	@ 0x1c9
 802ab56:	4806      	ldr	r0, [pc, #24]	@ (802ab70 <HAL_NVIC_ClearPendingIRQ+0x30>)
 802ab58:	f7fd f8cd 	bl	8027cf6 <assert_failed>
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 802ab5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802ab60:	4618      	mov	r0, r3
 802ab62:	f7ff fef5 	bl	802a950 <__NVIC_ClearPendingIRQ>
}
 802ab66:	bf00      	nop
 802ab68:	3708      	adds	r7, #8
 802ab6a:	46bd      	mov	sp, r7
 802ab6c:	bd80      	pop	{r7, pc}
 802ab6e:	bf00      	nop
 802ab70:	080381e0 	.word	0x080381e0

0802ab74 <HAL_DCMI_DeInit>:
  *                the configuration information for DCMI.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DCMI_DeInit(DCMI_HandleTypeDef *hdcmi)
{
 802ab74:	b580      	push	{r7, lr}
 802ab76:	b082      	sub	sp, #8
 802ab78:	af00      	add	r7, sp, #0
 802ab7a:	6078      	str	r0, [r7, #4]
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)  
  if(hdcmi->MspDeInitCallback == NULL)  
 802ab7c:	687b      	ldr	r3, [r7, #4]
 802ab7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802ab80:	2b00      	cmp	r3, #0
 802ab82:	d102      	bne.n	802ab8a <HAL_DCMI_DeInit+0x16>
  {
    hdcmi->MspDeInitCallback = HAL_DCMI_MspDeInit;
 802ab84:	687b      	ldr	r3, [r7, #4]
 802ab86:	4a0b      	ldr	r2, [pc, #44]	@ (802abb4 <HAL_DCMI_DeInit+0x40>)
 802ab88:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /* De-Initialize the low level hardware (MSP) */
  hdcmi->MspDeInitCallback(hdcmi);
 802ab8a:	687b      	ldr	r3, [r7, #4]
 802ab8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802ab8e:	6878      	ldr	r0, [r7, #4]
 802ab90:	4798      	blx	r3
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_DCMI_MspDeInit(hdcmi);
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 802ab92:	687b      	ldr	r3, [r7, #4]
 802ab94:	2200      	movs	r2, #0
 802ab96:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DCMI state*/
  hdcmi->State = HAL_DCMI_STATE_RESET;
 802ab98:	687b      	ldr	r3, [r7, #4]
 802ab9a:	2200      	movs	r2, #0
 802ab9c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 802aba0:	687b      	ldr	r3, [r7, #4]
 802aba2:	2200      	movs	r2, #0
 802aba4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 802aba8:	2300      	movs	r3, #0
}
 802abaa:	4618      	mov	r0, r3
 802abac:	3708      	adds	r7, #8
 802abae:	46bd      	mov	sp, r7
 802abb0:	bd80      	pop	{r7, pc}
 802abb2:	bf00      	nop
 802abb4:	08026fe9 	.word	0x08026fe9

0802abb8 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 802abb8:	b580      	push	{r7, lr}
 802abba:	b088      	sub	sp, #32
 802abbc:	af02      	add	r7, sp, #8
 802abbe:	60f8      	str	r0, [r7, #12]
 802abc0:	60b9      	str	r1, [r7, #8]
 802abc2:	607a      	str	r2, [r7, #4]
 802abc4:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0U;
 802abc6:	2300      	movs	r3, #0
 802abc8:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));
 802abca:	68bb      	ldr	r3, [r7, #8]
 802abcc:	2b00      	cmp	r3, #0
 802abce:	d007      	beq.n	802abe0 <HAL_DCMI_Start_DMA+0x28>
 802abd0:	68bb      	ldr	r3, [r7, #8]
 802abd2:	2b02      	cmp	r3, #2
 802abd4:	d004      	beq.n	802abe0 <HAL_DCMI_Start_DMA+0x28>
 802abd6:	f240 1161 	movw	r1, #353	@ 0x161
 802abda:	484a      	ldr	r0, [pc, #296]	@ (802ad04 <HAL_DCMI_Start_DMA+0x14c>)
 802abdc:	f7fd f88b 	bl	8027cf6 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 802abe0:	68fb      	ldr	r3, [r7, #12]
 802abe2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 802abe6:	2b01      	cmp	r3, #1
 802abe8:	d101      	bne.n	802abee <HAL_DCMI_Start_DMA+0x36>
 802abea:	2302      	movs	r3, #2
 802abec:	e086      	b.n	802acfc <HAL_DCMI_Start_DMA+0x144>
 802abee:	68fb      	ldr	r3, [r7, #12]
 802abf0:	2201      	movs	r2, #1
 802abf2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 802abf6:	68fb      	ldr	r3, [r7, #12]
 802abf8:	2202      	movs	r2, #2
 802abfa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  
  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 802abfe:	68fb      	ldr	r3, [r7, #12]
 802ac00:	681b      	ldr	r3, [r3, #0]
 802ac02:	681a      	ldr	r2, [r3, #0]
 802ac04:	68fb      	ldr	r3, [r7, #12]
 802ac06:	681b      	ldr	r3, [r3, #0]
 802ac08:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 802ac0c:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 802ac0e:	68fb      	ldr	r3, [r7, #12]
 802ac10:	681b      	ldr	r3, [r3, #0]
 802ac12:	681a      	ldr	r2, [r3, #0]
 802ac14:	68fb      	ldr	r3, [r7, #12]
 802ac16:	681b      	ldr	r3, [r3, #0]
 802ac18:	f022 0202 	bic.w	r2, r2, #2
 802ac1c:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 802ac1e:	68fb      	ldr	r3, [r7, #12]
 802ac20:	681b      	ldr	r3, [r3, #0]
 802ac22:	6819      	ldr	r1, [r3, #0]
 802ac24:	68fb      	ldr	r3, [r7, #12]
 802ac26:	681b      	ldr	r3, [r3, #0]
 802ac28:	68ba      	ldr	r2, [r7, #8]
 802ac2a:	430a      	orrs	r2, r1
 802ac2c:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 802ac2e:	68fb      	ldr	r3, [r7, #12]
 802ac30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802ac32:	4a35      	ldr	r2, [pc, #212]	@ (802ad08 <HAL_DCMI_Start_DMA+0x150>)
 802ac34:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 802ac36:	68fb      	ldr	r3, [r7, #12]
 802ac38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802ac3a:	4a34      	ldr	r2, [pc, #208]	@ (802ad0c <HAL_DCMI_Start_DMA+0x154>)
 802ac3c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 802ac3e:	68fb      	ldr	r3, [r7, #12]
 802ac40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802ac42:	2200      	movs	r2, #0
 802ac44:	651a      	str	r2, [r3, #80]	@ 0x50
  
  /* Reset transfer counters value */ 
  hdcmi->XferCount = 0U;
 802ac46:	68fb      	ldr	r3, [r7, #12]
 802ac48:	2200      	movs	r2, #0
 802ac4a:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi->XferTransferNumber = 0U;
 802ac4c:	68fb      	ldr	r3, [r7, #12]
 802ac4e:	2200      	movs	r2, #0
 802ac50:	631a      	str	r2, [r3, #48]	@ 0x30

  if(Length <= 0xFFFFU)
 802ac52:	683b      	ldr	r3, [r7, #0]
 802ac54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 802ac58:	d20a      	bcs.n	802ac70 <HAL_DCMI_Start_DMA+0xb8>
  {
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 802ac5a:	68fb      	ldr	r3, [r7, #12]
 802ac5c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 802ac5e:	68fb      	ldr	r3, [r7, #12]
 802ac60:	681b      	ldr	r3, [r3, #0]
 802ac62:	3328      	adds	r3, #40	@ 0x28
 802ac64:	4619      	mov	r1, r3
 802ac66:	683b      	ldr	r3, [r7, #0]
 802ac68:	687a      	ldr	r2, [r7, #4]
 802ac6a:	f000 fdeb 	bl	802b844 <HAL_DMA_Start_IT>
 802ac6e:	e038      	b.n	802ace2 <HAL_DCMI_Start_DMA+0x12a>
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 802ac70:	68fb      	ldr	r3, [r7, #12]
 802ac72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802ac74:	4a24      	ldr	r2, [pc, #144]	@ (802ad08 <HAL_DCMI_Start_DMA+0x150>)
 802ac76:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1U;
 802ac78:	68fb      	ldr	r3, [r7, #12]
 802ac7a:	2201      	movs	r2, #1
 802ac7c:	629a      	str	r2, [r3, #40]	@ 0x28
    hdcmi->XferSize = Length;
 802ac7e:	68fb      	ldr	r3, [r7, #12]
 802ac80:	683a      	ldr	r2, [r7, #0]
 802ac82:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdcmi->pBuffPtr = pData;
 802ac84:	68fb      	ldr	r3, [r7, #12]
 802ac86:	687a      	ldr	r2, [r7, #4]
 802ac88:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Get the number of buffer */
    while(hdcmi->XferSize > 0xFFFFU)
 802ac8a:	e009      	b.n	802aca0 <HAL_DCMI_Start_DMA+0xe8>
    {
      hdcmi->XferSize = (hdcmi->XferSize/2U);
 802ac8c:	68fb      	ldr	r3, [r7, #12]
 802ac8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802ac90:	085a      	lsrs	r2, r3, #1
 802ac92:	68fb      	ldr	r3, [r7, #12]
 802ac94:	62da      	str	r2, [r3, #44]	@ 0x2c
      hdcmi->XferCount = hdcmi->XferCount*2U;
 802ac96:	68fb      	ldr	r3, [r7, #12]
 802ac98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802ac9a:	005a      	lsls	r2, r3, #1
 802ac9c:	68fb      	ldr	r3, [r7, #12]
 802ac9e:	629a      	str	r2, [r3, #40]	@ 0x28
    while(hdcmi->XferSize > 0xFFFFU)
 802aca0:	68fb      	ldr	r3, [r7, #12]
 802aca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802aca4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 802aca8:	d2f0      	bcs.n	802ac8c <HAL_DCMI_Start_DMA+0xd4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 802acaa:	68fb      	ldr	r3, [r7, #12]
 802acac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802acae:	1e9a      	subs	r2, r3, #2
 802acb0:	68fb      	ldr	r3, [r7, #12]
 802acb2:	629a      	str	r2, [r3, #40]	@ 0x28
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 802acb4:	68fb      	ldr	r3, [r7, #12]
 802acb6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 802acb8:	68fb      	ldr	r3, [r7, #12]
 802acba:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U*hdcmi->XferSize));
 802acbc:	68fb      	ldr	r3, [r7, #12]
 802acbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802acc0:	009b      	lsls	r3, r3, #2
 802acc2:	687a      	ldr	r2, [r7, #4]
 802acc4:	4413      	add	r3, r2
 802acc6:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 802acc8:	68fb      	ldr	r3, [r7, #12]
 802acca:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 802accc:	68fb      	ldr	r3, [r7, #12]
 802acce:	681b      	ldr	r3, [r3, #0]
 802acd0:	3328      	adds	r3, #40	@ 0x28
 802acd2:	4619      	mov	r1, r3
 802acd4:	68fb      	ldr	r3, [r7, #12]
 802acd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802acd8:	9300      	str	r3, [sp, #0]
 802acda:	697b      	ldr	r3, [r7, #20]
 802acdc:	687a      	ldr	r2, [r7, #4]
 802acde:	f001 f921 	bl	802bf24 <HAL_DMAEx_MultiBufferStart_IT>
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 802ace2:	68fb      	ldr	r3, [r7, #12]
 802ace4:	681b      	ldr	r3, [r3, #0]
 802ace6:	681a      	ldr	r2, [r3, #0]
 802ace8:	68fb      	ldr	r3, [r7, #12]
 802acea:	681b      	ldr	r3, [r3, #0]
 802acec:	f042 0201 	orr.w	r2, r2, #1
 802acf0:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 802acf2:	68fb      	ldr	r3, [r7, #12]
 802acf4:	2200      	movs	r2, #0
 802acf6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  /* Return function status */
  return HAL_OK;
 802acfa:	2300      	movs	r3, #0
}
 802acfc:	4618      	mov	r0, r3
 802acfe:	3718      	adds	r7, #24
 802ad00:	46bd      	mov	sp, r7
 802ad02:	bd80      	pop	{r7, pc}
 802ad04:	08038258 	.word	0x08038258
 802ad08:	0802af0d 	.word	0x0802af0d
 802ad0c:	0802b037 	.word	0x0802b037

0802ad10 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef* hdcmi)
{
 802ad10:	b580      	push	{r7, lr}
 802ad12:	b084      	sub	sp, #16
 802ad14:	af00      	add	r7, sp, #0
 802ad16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = SystemCoreClock / HAL_TIMEOUT_DCMI_STOP;
 802ad18:	4b29      	ldr	r3, [pc, #164]	@ (802adc0 <HAL_DCMI_Stop+0xb0>)
 802ad1a:	681b      	ldr	r3, [r3, #0]
 802ad1c:	085b      	lsrs	r3, r3, #1
 802ad1e:	4a29      	ldr	r2, [pc, #164]	@ (802adc4 <HAL_DCMI_Stop+0xb4>)
 802ad20:	fba2 2303 	umull	r2, r3, r2, r3
 802ad24:	089b      	lsrs	r3, r3, #2
 802ad26:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 802ad28:	2300      	movs	r3, #0
 802ad2a:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 802ad2c:	687b      	ldr	r3, [r7, #4]
 802ad2e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 802ad32:	2b01      	cmp	r3, #1
 802ad34:	d101      	bne.n	802ad3a <HAL_DCMI_Stop+0x2a>
 802ad36:	2302      	movs	r3, #2
 802ad38:	e03e      	b.n	802adb8 <HAL_DCMI_Stop+0xa8>
 802ad3a:	687b      	ldr	r3, [r7, #4]
 802ad3c:	2201      	movs	r2, #1
 802ad3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 802ad42:	687b      	ldr	r3, [r7, #4]
 802ad44:	2202      	movs	r2, #2
 802ad46:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 802ad4a:	687b      	ldr	r3, [r7, #4]
 802ad4c:	681b      	ldr	r3, [r3, #0]
 802ad4e:	681a      	ldr	r2, [r3, #0]
 802ad50:	687b      	ldr	r3, [r7, #4]
 802ad52:	681b      	ldr	r3, [r3, #0]
 802ad54:	f022 0201 	bic.w	r2, r2, #1
 802ad58:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    if (count-- == 0U)
 802ad5a:	68bb      	ldr	r3, [r7, #8]
 802ad5c:	1e5a      	subs	r2, r3, #1
 802ad5e:	60ba      	str	r2, [r7, #8]
 802ad60:	2b00      	cmp	r3, #0
 802ad62:	d108      	bne.n	802ad76 <HAL_DCMI_Stop+0x66>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 802ad64:	687b      	ldr	r3, [r7, #4]
 802ad66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802ad68:	f043 0220 	orr.w	r2, r3, #32
 802ad6c:	687b      	ldr	r3, [r7, #4]
 802ad6e:	63da      	str	r2, [r3, #60]	@ 0x3c

      status = HAL_TIMEOUT;
 802ad70:	2303      	movs	r3, #3
 802ad72:	73fb      	strb	r3, [r7, #15]
      break;
 802ad74:	e006      	b.n	802ad84 <HAL_DCMI_Stop+0x74>
    }
  }
  while((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 802ad76:	687b      	ldr	r3, [r7, #4]
 802ad78:	681b      	ldr	r3, [r3, #0]
 802ad7a:	681b      	ldr	r3, [r3, #0]
 802ad7c:	f003 0301 	and.w	r3, r3, #1
 802ad80:	2b00      	cmp	r3, #0
 802ad82:	d1ea      	bne.n	802ad5a <HAL_DCMI_Stop+0x4a>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 802ad84:	687b      	ldr	r3, [r7, #4]
 802ad86:	681b      	ldr	r3, [r3, #0]
 802ad88:	681a      	ldr	r2, [r3, #0]
 802ad8a:	687b      	ldr	r3, [r7, #4]
 802ad8c:	681b      	ldr	r3, [r3, #0]
 802ad8e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 802ad92:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  HAL_DMA_Abort(hdcmi->DMA_Handle);
 802ad94:	687b      	ldr	r3, [r7, #4]
 802ad96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802ad98:	4618      	mov	r0, r3
 802ad9a:	f000 fdb9 	bl	802b910 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 802ad9e:	687b      	ldr	r3, [r7, #4]
 802ada0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 802ada2:	687b      	ldr	r3, [r7, #4]
 802ada4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 802ada6:	687b      	ldr	r3, [r7, #4]
 802ada8:	2201      	movs	r2, #1
 802adaa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 802adae:	687b      	ldr	r3, [r7, #4]
 802adb0:	2200      	movs	r2, #0
 802adb2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  /* Return function status */
  return status;
 802adb6:	7bfb      	ldrb	r3, [r7, #15]
}
 802adb8:	4618      	mov	r0, r3
 802adba:	3710      	adds	r7, #16
 802adbc:	46bd      	mov	sp, r7
 802adbe:	bd80      	pop	{r7, pc}
 802adc0:	2000001c 	.word	0x2000001c
 802adc4:	92492493 	.word	0x92492493

0802adc8 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 802adc8:	b580      	push	{r7, lr}
 802adca:	b084      	sub	sp, #16
 802adcc:	af00      	add	r7, sp, #0
 802adce:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 802add0:	687b      	ldr	r3, [r7, #4]
 802add2:	681b      	ldr	r3, [r3, #0]
 802add4:	691b      	ldr	r3, [r3, #16]
 802add6:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 802add8:	68fb      	ldr	r3, [r7, #12]
 802adda:	f003 0304 	and.w	r3, r3, #4
 802adde:	2b00      	cmp	r3, #0
 802ade0:	d016      	beq.n	802ae10 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 802ade2:	687b      	ldr	r3, [r7, #4]
 802ade4:	681b      	ldr	r3, [r3, #0]
 802ade6:	2204      	movs	r2, #4
 802ade8:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 802adea:	687b      	ldr	r3, [r7, #4]
 802adec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802adee:	f043 0202 	orr.w	r2, r3, #2
 802adf2:	687b      	ldr	r3, [r7, #4]
 802adf4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 802adf6:	687b      	ldr	r3, [r7, #4]
 802adf8:	2204      	movs	r2, #4
 802adfa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 802adfe:	687b      	ldr	r3, [r7, #4]
 802ae00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802ae02:	4a30      	ldr	r2, [pc, #192]	@ (802aec4 <HAL_DCMI_IRQHandler+0xfc>)
 802ae04:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 802ae06:	687b      	ldr	r3, [r7, #4]
 802ae08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802ae0a:	4618      	mov	r0, r3
 802ae0c:	f000 fdf0 	bl	802b9f0 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 802ae10:	68fb      	ldr	r3, [r7, #12]
 802ae12:	f003 0302 	and.w	r3, r3, #2
 802ae16:	2b00      	cmp	r3, #0
 802ae18:	d016      	beq.n	802ae48 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 802ae1a:	687b      	ldr	r3, [r7, #4]
 802ae1c:	681b      	ldr	r3, [r3, #0]
 802ae1e:	2202      	movs	r2, #2
 802ae20:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 802ae22:	687b      	ldr	r3, [r7, #4]
 802ae24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802ae26:	f043 0201 	orr.w	r2, r3, #1
 802ae2a:	687b      	ldr	r3, [r7, #4]
 802ae2c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 802ae2e:	687b      	ldr	r3, [r7, #4]
 802ae30:	2204      	movs	r2, #4
 802ae32:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 802ae36:	687b      	ldr	r3, [r7, #4]
 802ae38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802ae3a:	4a22      	ldr	r2, [pc, #136]	@ (802aec4 <HAL_DCMI_IRQHandler+0xfc>)
 802ae3c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 802ae3e:	687b      	ldr	r3, [r7, #4]
 802ae40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802ae42:	4618      	mov	r0, r3
 802ae44:	f000 fdd4 	bl	802b9f0 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 802ae48:	68fb      	ldr	r3, [r7, #12]
 802ae4a:	f003 0310 	and.w	r3, r3, #16
 802ae4e:	2b00      	cmp	r3, #0
 802ae50:	d007      	beq.n	802ae62 <HAL_DCMI_IRQHandler+0x9a>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 802ae52:	687b      	ldr	r3, [r7, #4]
 802ae54:	681b      	ldr	r3, [r3, #0]
 802ae56:	2210      	movs	r2, #16
 802ae58:	615a      	str	r2, [r3, #20]
    
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
 802ae5a:	687b      	ldr	r3, [r7, #4]
 802ae5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 802ae5e:	6878      	ldr	r0, [r7, #4]
 802ae60:	4798      	blx	r3
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 802ae62:	68fb      	ldr	r3, [r7, #12]
 802ae64:	f003 0308 	and.w	r3, r3, #8
 802ae68:	2b00      	cmp	r3, #0
 802ae6a:	d007      	beq.n	802ae7c <HAL_DCMI_IRQHandler+0xb4>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 802ae6c:	687b      	ldr	r3, [r7, #4]
 802ae6e:	681b      	ldr	r3, [r3, #0]
 802ae70:	2208      	movs	r2, #8
 802ae72:	615a      	str	r2, [r3, #20]
    
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
 802ae74:	687b      	ldr	r3, [r7, #4]
 802ae76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802ae78:	6878      	ldr	r0, [r7, #4]
 802ae7a:	4798      	blx	r3
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 802ae7c:	68fb      	ldr	r3, [r7, #12]
 802ae7e:	f003 0301 	and.w	r3, r3, #1
 802ae82:	2b00      	cmp	r3, #0
 802ae84:	d01a      	beq.n	802aebc <HAL_DCMI_IRQHandler+0xf4>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 802ae86:	687b      	ldr	r3, [r7, #4]
 802ae88:	681b      	ldr	r3, [r3, #0]
 802ae8a:	681b      	ldr	r3, [r3, #0]
 802ae8c:	f003 0302 	and.w	r3, r3, #2
 802ae90:	2b02      	cmp	r3, #2
 802ae92:	d107      	bne.n	802aea4 <HAL_DCMI_IRQHandler+0xdc>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 802ae94:	687b      	ldr	r3, [r7, #4]
 802ae96:	681b      	ldr	r3, [r3, #0]
 802ae98:	68da      	ldr	r2, [r3, #12]
 802ae9a:	687b      	ldr	r3, [r7, #4]
 802ae9c:	681b      	ldr	r3, [r3, #0]
 802ae9e:	f022 021e 	bic.w	r2, r2, #30
 802aea2:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 802aea4:	687b      	ldr	r3, [r7, #4]
 802aea6:	681b      	ldr	r3, [r3, #0]
 802aea8:	68da      	ldr	r2, [r3, #12]
 802aeaa:	687b      	ldr	r3, [r7, #4]
 802aeac:	681b      	ldr	r3, [r3, #0]
 802aeae:	f022 0201 	bic.w	r2, r2, #1
 802aeb2:	60da      	str	r2, [r3, #12]

    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
 802aeb4:	687b      	ldr	r3, [r7, #4]
 802aeb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802aeb8:	6878      	ldr	r0, [r7, #4]
 802aeba:	4798      	blx	r3
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 802aebc:	bf00      	nop
 802aebe:	3710      	adds	r7, #16
 802aec0:	46bd      	mov	sp, r7
 802aec2:	bd80      	pop	{r7, pc}
 802aec4:	0802b037 	.word	0x0802b037

0802aec8 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 802aec8:	b480      	push	{r7}
 802aeca:	b083      	sub	sp, #12
 802aecc:	af00      	add	r7, sp, #0
 802aece:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 802aed0:	bf00      	nop
 802aed2:	370c      	adds	r7, #12
 802aed4:	46bd      	mov	sp, r7
 802aed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802aeda:	4770      	bx	lr

0802aedc <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 802aedc:	b480      	push	{r7}
 802aede:	b083      	sub	sp, #12
 802aee0:	af00      	add	r7, sp, #0
 802aee2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 802aee4:	bf00      	nop
 802aee6:	370c      	adds	r7, #12
 802aee8:	46bd      	mov	sp, r7
 802aeea:	f85d 7b04 	ldr.w	r7, [sp], #4
 802aeee:	4770      	bx	lr

0802aef0 <HAL_DCMI_GetState>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL state
  */
HAL_DCMI_StateTypeDef HAL_DCMI_GetState(DCMI_HandleTypeDef *hdcmi)
{
 802aef0:	b480      	push	{r7}
 802aef2:	b083      	sub	sp, #12
 802aef4:	af00      	add	r7, sp, #0
 802aef6:	6078      	str	r0, [r7, #4]
  return hdcmi->State;
 802aef8:	687b      	ldr	r3, [r7, #4]
 802aefa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 802aefe:	b2db      	uxtb	r3, r3
}
 802af00:	4618      	mov	r0, r3
 802af02:	370c      	adds	r7, #12
 802af04:	46bd      	mov	sp, r7
 802af06:	f85d 7b04 	ldr.w	r7, [sp], #4
 802af0a:	4770      	bx	lr

0802af0c <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 802af0c:	b580      	push	{r7, lr}
 802af0e:	b084      	sub	sp, #16
 802af10:	af00      	add	r7, sp, #0
 802af12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 802af14:	2300      	movs	r3, #0
 802af16:	60fb      	str	r3, [r7, #12]
 
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 802af18:	687b      	ldr	r3, [r7, #4]
 802af1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802af1c:	60bb      	str	r3, [r7, #8]
  
  if(hdcmi->XferCount != 0U)
 802af1e:	68bb      	ldr	r3, [r7, #8]
 802af20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802af22:	2b00      	cmp	r3, #0
 802af24:	d043      	beq.n	802afae <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 802af26:	68bb      	ldr	r3, [r7, #8]
 802af28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802af2a:	681b      	ldr	r3, [r3, #0]
 802af2c:	681b      	ldr	r3, [r3, #0]
 802af2e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 802af32:	60fb      	str	r3, [r7, #12]
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 802af34:	68bb      	ldr	r3, [r7, #8]
 802af36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802af38:	f003 0301 	and.w	r3, r3, #1
 802af3c:	2b00      	cmp	r3, #0
 802af3e:	d118      	bne.n	802af72 <DCMI_DMAXferCplt+0x66>
 802af40:	68fb      	ldr	r3, [r7, #12]
 802af42:	2b00      	cmp	r3, #0
 802af44:	d015      	beq.n	802af72 <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 802af46:	68bb      	ldr	r3, [r7, #8]
 802af48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802af4a:	681b      	ldr	r3, [r3, #0]
 802af4c:	68db      	ldr	r3, [r3, #12]
 802af4e:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
 802af50:	68bb      	ldr	r3, [r7, #8]
 802af52:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 802af54:	68bb      	ldr	r3, [r7, #8]
 802af56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802af58:	00da      	lsls	r2, r3, #3
 802af5a:	68fb      	ldr	r3, [r7, #12]
 802af5c:	4413      	add	r3, r2
 802af5e:	2200      	movs	r2, #0
 802af60:	4619      	mov	r1, r3
 802af62:	f002 f92f 	bl	802d1c4 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 802af66:	68bb      	ldr	r3, [r7, #8]
 802af68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802af6a:	1e5a      	subs	r2, r3, #1
 802af6c:	68bb      	ldr	r3, [r7, #8]
 802af6e:	629a      	str	r2, [r3, #40]	@ 0x28
 802af70:	e044      	b.n	802affc <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 802af72:	68bb      	ldr	r3, [r7, #8]
 802af74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802af76:	681b      	ldr	r3, [r3, #0]
 802af78:	681b      	ldr	r3, [r3, #0]
 802af7a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 802af7e:	2b00      	cmp	r3, #0
 802af80:	d13c      	bne.n	802affc <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 802af82:	68bb      	ldr	r3, [r7, #8]
 802af84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802af86:	681b      	ldr	r3, [r3, #0]
 802af88:	691b      	ldr	r3, [r3, #16]
 802af8a:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 802af8c:	68bb      	ldr	r3, [r7, #8]
 802af8e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 802af90:	68bb      	ldr	r3, [r7, #8]
 802af92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802af94:	00da      	lsls	r2, r3, #3
 802af96:	68fb      	ldr	r3, [r7, #12]
 802af98:	4413      	add	r3, r2
 802af9a:	2201      	movs	r2, #1
 802af9c:	4619      	mov	r1, r3
 802af9e:	f002 f911 	bl	802d1c4 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 802afa2:	68bb      	ldr	r3, [r7, #8]
 802afa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802afa6:	1e5a      	subs	r2, r3, #1
 802afa8:	68bb      	ldr	r3, [r7, #8]
 802afaa:	629a      	str	r2, [r3, #40]	@ 0x28
 802afac:	e026      	b.n	802affc <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0U)
 802afae:	68bb      	ldr	r3, [r7, #8]
 802afb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802afb2:	681b      	ldr	r3, [r3, #0]
 802afb4:	681b      	ldr	r3, [r3, #0]
 802afb6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 802afba:	2b00      	cmp	r3, #0
 802afbc:	d006      	beq.n	802afcc <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 802afbe:	68bb      	ldr	r3, [r7, #8]
 802afc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802afc2:	681b      	ldr	r3, [r3, #0]
 802afc4:	68ba      	ldr	r2, [r7, #8]
 802afc6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 802afc8:	60da      	str	r2, [r3, #12]
 802afca:	e017      	b.n	802affc <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 802afcc:	68bb      	ldr	r3, [r7, #8]
 802afce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802afd0:	681b      	ldr	r3, [r3, #0]
 802afd2:	681b      	ldr	r3, [r3, #0]
 802afd4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 802afd8:	2b00      	cmp	r3, #0
 802afda:	d10f      	bne.n	802affc <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 802afdc:	68bb      	ldr	r3, [r7, #8]
 802afde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802afe0:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
 802afe2:	68bb      	ldr	r3, [r7, #8]
 802afe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802afe6:	0099      	lsls	r1, r3, #2
 802afe8:	68bb      	ldr	r3, [r7, #8]
 802afea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802afec:	681b      	ldr	r3, [r3, #0]
 802afee:	68fa      	ldr	r2, [r7, #12]
 802aff0:	440a      	add	r2, r1
 802aff2:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 802aff4:	68bb      	ldr	r3, [r7, #8]
 802aff6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 802aff8:	68bb      	ldr	r3, [r7, #8]
 802affa:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  
  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 802affc:	68bb      	ldr	r3, [r7, #8]
 802affe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 802b000:	68bb      	ldr	r3, [r7, #8]
 802b002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802b004:	429a      	cmp	r2, r3
 802b006:	d112      	bne.n	802b02e <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 802b008:	68bb      	ldr	r3, [r7, #8]
 802b00a:	681b      	ldr	r3, [r3, #0]
 802b00c:	68da      	ldr	r2, [r3, #12]
 802b00e:	68bb      	ldr	r3, [r7, #8]
 802b010:	681b      	ldr	r3, [r3, #0]
 802b012:	f042 0201 	orr.w	r2, r2, #1
 802b016:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 802b018:	68bb      	ldr	r3, [r7, #8]
 802b01a:	681b      	ldr	r3, [r3, #0]
 802b01c:	681b      	ldr	r3, [r3, #0]
 802b01e:	f003 0302 	and.w	r3, r3, #2
 802b022:	2b02      	cmp	r3, #2
 802b024:	d103      	bne.n	802b02e <DCMI_DMAXferCplt+0x122>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 802b026:	68bb      	ldr	r3, [r7, #8]
 802b028:	2201      	movs	r2, #1
 802b02a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }
}
 802b02e:	bf00      	nop
 802b030:	3710      	adds	r7, #16
 802b032:	46bd      	mov	sp, r7
 802b034:	bd80      	pop	{r7, pc}

0802b036 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 802b036:	b580      	push	{r7, lr}
 802b038:	b084      	sub	sp, #16
 802b03a:	af00      	add	r7, sp, #0
 802b03c:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 802b03e:	687b      	ldr	r3, [r7, #4]
 802b040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802b042:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 802b044:	68fb      	ldr	r3, [r7, #12]
 802b046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802b048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802b04a:	2b02      	cmp	r3, #2
 802b04c:	d003      	beq.n	802b056 <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 802b04e:	68fb      	ldr	r3, [r7, #12]
 802b050:	2201      	movs	r2, #1
 802b052:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  }

  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
 802b056:	68fb      	ldr	r3, [r7, #12]
 802b058:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 802b05a:	68f8      	ldr	r0, [r7, #12]
 802b05c:	4798      	blx	r3
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 802b05e:	bf00      	nop
 802b060:	3710      	adds	r7, #16
 802b062:	46bd      	mov	sp, r7
 802b064:	bd80      	pop	{r7, pc}
	...

0802b068 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 802b068:	b580      	push	{r7, lr}
 802b06a:	b082      	sub	sp, #8
 802b06c:	af00      	add	r7, sp, #0
 802b06e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 802b070:	687b      	ldr	r3, [r7, #4]
 802b072:	2b00      	cmp	r3, #0
 802b074:	d101      	bne.n	802b07a <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 802b076:	2301      	movs	r3, #1
 802b078:	e0e1      	b.n	802b23e <HAL_DCMI_Init+0x1d6>
  }

  /* Check function parameters */
  assert_param(IS_DCMI_ALL_INSTANCE(hdcmi->Instance));
 802b07a:	687b      	ldr	r3, [r7, #4]
 802b07c:	681b      	ldr	r3, [r3, #0]
 802b07e:	4a72      	ldr	r2, [pc, #456]	@ (802b248 <HAL_DCMI_Init+0x1e0>)
 802b080:	4293      	cmp	r3, r2
 802b082:	d003      	beq.n	802b08c <HAL_DCMI_Init+0x24>
 802b084:	2158      	movs	r1, #88	@ 0x58
 802b086:	4871      	ldr	r0, [pc, #452]	@ (802b24c <HAL_DCMI_Init+0x1e4>)
 802b088:	f7fc fe35 	bl	8027cf6 <assert_failed>
  assert_param(IS_DCMI_PCKPOLARITY(hdcmi->Init.PCKPolarity));
 802b08c:	687b      	ldr	r3, [r7, #4]
 802b08e:	689b      	ldr	r3, [r3, #8]
 802b090:	2b00      	cmp	r3, #0
 802b092:	d007      	beq.n	802b0a4 <HAL_DCMI_Init+0x3c>
 802b094:	687b      	ldr	r3, [r7, #4]
 802b096:	689b      	ldr	r3, [r3, #8]
 802b098:	2b20      	cmp	r3, #32
 802b09a:	d003      	beq.n	802b0a4 <HAL_DCMI_Init+0x3c>
 802b09c:	2159      	movs	r1, #89	@ 0x59
 802b09e:	486b      	ldr	r0, [pc, #428]	@ (802b24c <HAL_DCMI_Init+0x1e4>)
 802b0a0:	f7fc fe29 	bl	8027cf6 <assert_failed>
  assert_param(IS_DCMI_VSPOLARITY(hdcmi->Init.VSPolarity));
 802b0a4:	687b      	ldr	r3, [r7, #4]
 802b0a6:	68db      	ldr	r3, [r3, #12]
 802b0a8:	2b00      	cmp	r3, #0
 802b0aa:	d007      	beq.n	802b0bc <HAL_DCMI_Init+0x54>
 802b0ac:	687b      	ldr	r3, [r7, #4]
 802b0ae:	68db      	ldr	r3, [r3, #12]
 802b0b0:	2b80      	cmp	r3, #128	@ 0x80
 802b0b2:	d003      	beq.n	802b0bc <HAL_DCMI_Init+0x54>
 802b0b4:	215a      	movs	r1, #90	@ 0x5a
 802b0b6:	4865      	ldr	r0, [pc, #404]	@ (802b24c <HAL_DCMI_Init+0x1e4>)
 802b0b8:	f7fc fe1d 	bl	8027cf6 <assert_failed>
  assert_param(IS_DCMI_HSPOLARITY(hdcmi->Init.HSPolarity));
 802b0bc:	687b      	ldr	r3, [r7, #4]
 802b0be:	691b      	ldr	r3, [r3, #16]
 802b0c0:	2b00      	cmp	r3, #0
 802b0c2:	d007      	beq.n	802b0d4 <HAL_DCMI_Init+0x6c>
 802b0c4:	687b      	ldr	r3, [r7, #4]
 802b0c6:	691b      	ldr	r3, [r3, #16]
 802b0c8:	2b40      	cmp	r3, #64	@ 0x40
 802b0ca:	d003      	beq.n	802b0d4 <HAL_DCMI_Init+0x6c>
 802b0cc:	215b      	movs	r1, #91	@ 0x5b
 802b0ce:	485f      	ldr	r0, [pc, #380]	@ (802b24c <HAL_DCMI_Init+0x1e4>)
 802b0d0:	f7fc fe11 	bl	8027cf6 <assert_failed>
  assert_param(IS_DCMI_SYNCHRO(hdcmi->Init.SynchroMode));
 802b0d4:	687b      	ldr	r3, [r7, #4]
 802b0d6:	685b      	ldr	r3, [r3, #4]
 802b0d8:	2b00      	cmp	r3, #0
 802b0da:	d007      	beq.n	802b0ec <HAL_DCMI_Init+0x84>
 802b0dc:	687b      	ldr	r3, [r7, #4]
 802b0de:	685b      	ldr	r3, [r3, #4]
 802b0e0:	2b10      	cmp	r3, #16
 802b0e2:	d003      	beq.n	802b0ec <HAL_DCMI_Init+0x84>
 802b0e4:	215c      	movs	r1, #92	@ 0x5c
 802b0e6:	4859      	ldr	r0, [pc, #356]	@ (802b24c <HAL_DCMI_Init+0x1e4>)
 802b0e8:	f7fc fe05 	bl	8027cf6 <assert_failed>
  assert_param(IS_DCMI_CAPTURE_RATE(hdcmi->Init.CaptureRate));
 802b0ec:	687b      	ldr	r3, [r7, #4]
 802b0ee:	695b      	ldr	r3, [r3, #20]
 802b0f0:	2b00      	cmp	r3, #0
 802b0f2:	d00d      	beq.n	802b110 <HAL_DCMI_Init+0xa8>
 802b0f4:	687b      	ldr	r3, [r7, #4]
 802b0f6:	695b      	ldr	r3, [r3, #20]
 802b0f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 802b0fc:	d008      	beq.n	802b110 <HAL_DCMI_Init+0xa8>
 802b0fe:	687b      	ldr	r3, [r7, #4]
 802b100:	695b      	ldr	r3, [r3, #20]
 802b102:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802b106:	d003      	beq.n	802b110 <HAL_DCMI_Init+0xa8>
 802b108:	215d      	movs	r1, #93	@ 0x5d
 802b10a:	4850      	ldr	r0, [pc, #320]	@ (802b24c <HAL_DCMI_Init+0x1e4>)
 802b10c:	f7fc fdf3 	bl	8027cf6 <assert_failed>
  assert_param(IS_DCMI_EXTENDED_DATA(hdcmi->Init.ExtendedDataMode));
 802b110:	687b      	ldr	r3, [r7, #4]
 802b112:	699b      	ldr	r3, [r3, #24]
 802b114:	2b00      	cmp	r3, #0
 802b116:	d012      	beq.n	802b13e <HAL_DCMI_Init+0xd6>
 802b118:	687b      	ldr	r3, [r7, #4]
 802b11a:	699b      	ldr	r3, [r3, #24]
 802b11c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 802b120:	d00d      	beq.n	802b13e <HAL_DCMI_Init+0xd6>
 802b122:	687b      	ldr	r3, [r7, #4]
 802b124:	699b      	ldr	r3, [r3, #24]
 802b126:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 802b12a:	d008      	beq.n	802b13e <HAL_DCMI_Init+0xd6>
 802b12c:	687b      	ldr	r3, [r7, #4]
 802b12e:	699b      	ldr	r3, [r3, #24]
 802b130:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 802b134:	d003      	beq.n	802b13e <HAL_DCMI_Init+0xd6>
 802b136:	215e      	movs	r1, #94	@ 0x5e
 802b138:	4844      	ldr	r0, [pc, #272]	@ (802b24c <HAL_DCMI_Init+0x1e4>)
 802b13a:	f7fc fddc 	bl	8027cf6 <assert_failed>
  assert_param(IS_DCMI_MODE_JPEG(hdcmi->Init.JPEGMode));
 802b13e:	687b      	ldr	r3, [r7, #4]
 802b140:	6a1b      	ldr	r3, [r3, #32]
 802b142:	2b00      	cmp	r3, #0
 802b144:	d007      	beq.n	802b156 <HAL_DCMI_Init+0xee>
 802b146:	687b      	ldr	r3, [r7, #4]
 802b148:	6a1b      	ldr	r3, [r3, #32]
 802b14a:	2b08      	cmp	r3, #8
 802b14c:	d003      	beq.n	802b156 <HAL_DCMI_Init+0xee>
 802b14e:	215f      	movs	r1, #95	@ 0x5f
 802b150:	483e      	ldr	r0, [pc, #248]	@ (802b24c <HAL_DCMI_Init+0x1e4>)
 802b152:	f7fc fdd0 	bl	8027cf6 <assert_failed>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 802b156:	687b      	ldr	r3, [r7, #4]
 802b158:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 802b15c:	b2db      	uxtb	r3, r3
 802b15e:	2b00      	cmp	r3, #0
 802b160:	d11d      	bne.n	802b19e <HAL_DCMI_Init+0x136>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 802b162:	687b      	ldr	r3, [r7, #4]
 802b164:	2200      	movs	r2, #0
 802b166:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    /* Init the low level hardware */
  /* Init the DCMI Callback settings */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    hdcmi->FrameEventCallback = HAL_DCMI_FrameEventCallback; /* Legacy weak FrameEventCallback  */
 802b16a:	687b      	ldr	r3, [r7, #4]
 802b16c:	4a38      	ldr	r2, [pc, #224]	@ (802b250 <HAL_DCMI_Init+0x1e8>)
 802b16e:	641a      	str	r2, [r3, #64]	@ 0x40
    hdcmi->VsyncEventCallback = HAL_DCMI_VsyncEventCallback; /* Legacy weak VsyncEventCallback  */
 802b170:	687b      	ldr	r3, [r7, #4]
 802b172:	4a38      	ldr	r2, [pc, #224]	@ (802b254 <HAL_DCMI_Init+0x1ec>)
 802b174:	645a      	str	r2, [r3, #68]	@ 0x44
    hdcmi->LineEventCallback  = HAL_DCMI_LineEventCallback;  /* Legacy weak LineEventCallback   */
 802b176:	687b      	ldr	r3, [r7, #4]
 802b178:	4a37      	ldr	r2, [pc, #220]	@ (802b258 <HAL_DCMI_Init+0x1f0>)
 802b17a:	649a      	str	r2, [r3, #72]	@ 0x48
    hdcmi->ErrorCallback      = HAL_DCMI_ErrorCallback;      /* Legacy weak ErrorCallback       */
 802b17c:	687b      	ldr	r3, [r7, #4]
 802b17e:	4a37      	ldr	r2, [pc, #220]	@ (802b25c <HAL_DCMI_Init+0x1f4>)
 802b180:	64da      	str	r2, [r3, #76]	@ 0x4c

    if(hdcmi->MspInitCallback == NULL)
 802b182:	687b      	ldr	r3, [r7, #4]
 802b184:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802b186:	2b00      	cmp	r3, #0
 802b188:	d102      	bne.n	802b190 <HAL_DCMI_Init+0x128>
    {
      /* Legacy weak MspInit Callback        */
      hdcmi->MspInitCallback = HAL_DCMI_MspInit;
 802b18a:	687b      	ldr	r3, [r7, #4]
 802b18c:	4a34      	ldr	r2, [pc, #208]	@ (802b260 <HAL_DCMI_Init+0x1f8>)
 802b18e:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
 802b190:	687b      	ldr	r3, [r7, #4]
 802b192:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802b194:	6878      	ldr	r0, [r7, #4]
 802b196:	4798      	blx	r3
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 802b198:	6878      	ldr	r0, [r7, #4]
 802b19a:	f7fb fe65 	bl	8026e68 <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 802b19e:	687b      	ldr	r3, [r7, #4]
 802b1a0:	2202      	movs	r2, #2
 802b1a2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 802b1a6:	687b      	ldr	r3, [r7, #4]
 802b1a8:	681b      	ldr	r3, [r3, #0]
 802b1aa:	681b      	ldr	r3, [r3, #0]
 802b1ac:	687a      	ldr	r2, [r7, #4]
 802b1ae:	6812      	ldr	r2, [r2, #0]
 802b1b0:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 802b1b4:	f023 0308 	bic.w	r3, r3, #8
 802b1b8:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 802b1ba:	687b      	ldr	r3, [r7, #4]
 802b1bc:	681b      	ldr	r3, [r3, #0]
 802b1be:	6819      	ldr	r1, [r3, #0]
 802b1c0:	687b      	ldr	r3, [r7, #4]
 802b1c2:	685a      	ldr	r2, [r3, #4]
 802b1c4:	687b      	ldr	r3, [r7, #4]
 802b1c6:	695b      	ldr	r3, [r3, #20]
 802b1c8:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 802b1ca:	687b      	ldr	r3, [r7, #4]
 802b1cc:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 802b1ce:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 802b1d0:	687b      	ldr	r3, [r7, #4]
 802b1d2:	691b      	ldr	r3, [r3, #16]
 802b1d4:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 802b1d6:	687b      	ldr	r3, [r7, #4]
 802b1d8:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 802b1da:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 802b1dc:	687b      	ldr	r3, [r7, #4]
 802b1de:	699b      	ldr	r3, [r3, #24]
 802b1e0:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 802b1e2:	687b      	ldr	r3, [r7, #4]
 802b1e4:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 802b1e6:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 802b1e8:	687b      	ldr	r3, [r7, #4]
 802b1ea:	681b      	ldr	r3, [r3, #0]
 802b1ec:	430a      	orrs	r2, r1
 802b1ee:	601a      	str	r2, [r3, #0]
                                     | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 802b1f0:	687b      	ldr	r3, [r7, #4]
 802b1f2:	685b      	ldr	r3, [r3, #4]
 802b1f4:	2b10      	cmp	r3, #16
 802b1f6:	d112      	bne.n	802b21e <HAL_DCMI_Init+0x1b6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 802b1f8:	687b      	ldr	r3, [r7, #4]
 802b1fa:	7f1b      	ldrb	r3, [r3, #28]
 802b1fc:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 802b1fe:	687b      	ldr	r3, [r7, #4]
 802b200:	7f5b      	ldrb	r3, [r3, #29]
 802b202:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 802b204:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 802b206:	687b      	ldr	r3, [r7, #4]
 802b208:	7f9b      	ldrb	r3, [r3, #30]
 802b20a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 802b20c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 802b210:	687b      	ldr	r3, [r7, #4]
 802b212:	7fdb      	ldrb	r3, [r3, #31]
 802b214:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 802b216:	687b      	ldr	r3, [r7, #4]
 802b218:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 802b21a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 802b21c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 802b21e:	687b      	ldr	r3, [r7, #4]
 802b220:	681b      	ldr	r3, [r3, #0]
 802b222:	68da      	ldr	r2, [r3, #12]
 802b224:	687b      	ldr	r3, [r7, #4]
 802b226:	681b      	ldr	r3, [r3, #0]
 802b228:	f042 021e 	orr.w	r2, r2, #30
 802b22c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 802b22e:	687b      	ldr	r3, [r7, #4]
 802b230:	2200      	movs	r2, #0
 802b232:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 802b234:	687b      	ldr	r3, [r7, #4]
 802b236:	2201      	movs	r2, #1
 802b238:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  return HAL_OK;
 802b23c:	2300      	movs	r3, #0
}
 802b23e:	4618      	mov	r0, r3
 802b240:	3708      	adds	r7, #8
 802b242:	46bd      	mov	sp, r7
 802b244:	bd80      	pop	{r7, pc}
 802b246:	bf00      	nop
 802b248:	50050000 	.word	0x50050000
 802b24c:	080382cc 	.word	0x080382cc
 802b250:	08025d99 	.word	0x08025d99
 802b254:	0802aedd 	.word	0x0802aedd
 802b258:	0802aec9 	.word	0x0802aec9
 802b25c:	08025b35 	.word	0x08025b35
 802b260:	08026e69 	.word	0x08026e69

0802b264 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 802b264:	b580      	push	{r7, lr}
 802b266:	b086      	sub	sp, #24
 802b268:	af00      	add	r7, sp, #0
 802b26a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 802b26c:	2300      	movs	r3, #0
 802b26e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 802b270:	f7fd f934 	bl	80284dc <HAL_GetTick>
 802b274:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 802b276:	687b      	ldr	r3, [r7, #4]
 802b278:	2b00      	cmp	r3, #0
 802b27a:	d101      	bne.n	802b280 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 802b27c:	2301      	movs	r3, #1
 802b27e:	e203      	b.n	802b688 <HAL_DMA_Init+0x424>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 802b280:	687b      	ldr	r3, [r7, #4]
 802b282:	681b      	ldr	r3, [r3, #0]
 802b284:	4a8b      	ldr	r2, [pc, #556]	@ (802b4b4 <HAL_DMA_Init+0x250>)
 802b286:	4293      	cmp	r3, r2
 802b288:	d04e      	beq.n	802b328 <HAL_DMA_Init+0xc4>
 802b28a:	687b      	ldr	r3, [r7, #4]
 802b28c:	681b      	ldr	r3, [r3, #0]
 802b28e:	4a8a      	ldr	r2, [pc, #552]	@ (802b4b8 <HAL_DMA_Init+0x254>)
 802b290:	4293      	cmp	r3, r2
 802b292:	d049      	beq.n	802b328 <HAL_DMA_Init+0xc4>
 802b294:	687b      	ldr	r3, [r7, #4]
 802b296:	681b      	ldr	r3, [r3, #0]
 802b298:	4a88      	ldr	r2, [pc, #544]	@ (802b4bc <HAL_DMA_Init+0x258>)
 802b29a:	4293      	cmp	r3, r2
 802b29c:	d044      	beq.n	802b328 <HAL_DMA_Init+0xc4>
 802b29e:	687b      	ldr	r3, [r7, #4]
 802b2a0:	681b      	ldr	r3, [r3, #0]
 802b2a2:	4a87      	ldr	r2, [pc, #540]	@ (802b4c0 <HAL_DMA_Init+0x25c>)
 802b2a4:	4293      	cmp	r3, r2
 802b2a6:	d03f      	beq.n	802b328 <HAL_DMA_Init+0xc4>
 802b2a8:	687b      	ldr	r3, [r7, #4]
 802b2aa:	681b      	ldr	r3, [r3, #0]
 802b2ac:	4a85      	ldr	r2, [pc, #532]	@ (802b4c4 <HAL_DMA_Init+0x260>)
 802b2ae:	4293      	cmp	r3, r2
 802b2b0:	d03a      	beq.n	802b328 <HAL_DMA_Init+0xc4>
 802b2b2:	687b      	ldr	r3, [r7, #4]
 802b2b4:	681b      	ldr	r3, [r3, #0]
 802b2b6:	4a84      	ldr	r2, [pc, #528]	@ (802b4c8 <HAL_DMA_Init+0x264>)
 802b2b8:	4293      	cmp	r3, r2
 802b2ba:	d035      	beq.n	802b328 <HAL_DMA_Init+0xc4>
 802b2bc:	687b      	ldr	r3, [r7, #4]
 802b2be:	681b      	ldr	r3, [r3, #0]
 802b2c0:	4a82      	ldr	r2, [pc, #520]	@ (802b4cc <HAL_DMA_Init+0x268>)
 802b2c2:	4293      	cmp	r3, r2
 802b2c4:	d030      	beq.n	802b328 <HAL_DMA_Init+0xc4>
 802b2c6:	687b      	ldr	r3, [r7, #4]
 802b2c8:	681b      	ldr	r3, [r3, #0]
 802b2ca:	4a81      	ldr	r2, [pc, #516]	@ (802b4d0 <HAL_DMA_Init+0x26c>)
 802b2cc:	4293      	cmp	r3, r2
 802b2ce:	d02b      	beq.n	802b328 <HAL_DMA_Init+0xc4>
 802b2d0:	687b      	ldr	r3, [r7, #4]
 802b2d2:	681b      	ldr	r3, [r3, #0]
 802b2d4:	4a7f      	ldr	r2, [pc, #508]	@ (802b4d4 <HAL_DMA_Init+0x270>)
 802b2d6:	4293      	cmp	r3, r2
 802b2d8:	d026      	beq.n	802b328 <HAL_DMA_Init+0xc4>
 802b2da:	687b      	ldr	r3, [r7, #4]
 802b2dc:	681b      	ldr	r3, [r3, #0]
 802b2de:	4a7e      	ldr	r2, [pc, #504]	@ (802b4d8 <HAL_DMA_Init+0x274>)
 802b2e0:	4293      	cmp	r3, r2
 802b2e2:	d021      	beq.n	802b328 <HAL_DMA_Init+0xc4>
 802b2e4:	687b      	ldr	r3, [r7, #4]
 802b2e6:	681b      	ldr	r3, [r3, #0]
 802b2e8:	4a7c      	ldr	r2, [pc, #496]	@ (802b4dc <HAL_DMA_Init+0x278>)
 802b2ea:	4293      	cmp	r3, r2
 802b2ec:	d01c      	beq.n	802b328 <HAL_DMA_Init+0xc4>
 802b2ee:	687b      	ldr	r3, [r7, #4]
 802b2f0:	681b      	ldr	r3, [r3, #0]
 802b2f2:	4a7b      	ldr	r2, [pc, #492]	@ (802b4e0 <HAL_DMA_Init+0x27c>)
 802b2f4:	4293      	cmp	r3, r2
 802b2f6:	d017      	beq.n	802b328 <HAL_DMA_Init+0xc4>
 802b2f8:	687b      	ldr	r3, [r7, #4]
 802b2fa:	681b      	ldr	r3, [r3, #0]
 802b2fc:	4a79      	ldr	r2, [pc, #484]	@ (802b4e4 <HAL_DMA_Init+0x280>)
 802b2fe:	4293      	cmp	r3, r2
 802b300:	d012      	beq.n	802b328 <HAL_DMA_Init+0xc4>
 802b302:	687b      	ldr	r3, [r7, #4]
 802b304:	681b      	ldr	r3, [r3, #0]
 802b306:	4a78      	ldr	r2, [pc, #480]	@ (802b4e8 <HAL_DMA_Init+0x284>)
 802b308:	4293      	cmp	r3, r2
 802b30a:	d00d      	beq.n	802b328 <HAL_DMA_Init+0xc4>
 802b30c:	687b      	ldr	r3, [r7, #4]
 802b30e:	681b      	ldr	r3, [r3, #0]
 802b310:	4a76      	ldr	r2, [pc, #472]	@ (802b4ec <HAL_DMA_Init+0x288>)
 802b312:	4293      	cmp	r3, r2
 802b314:	d008      	beq.n	802b328 <HAL_DMA_Init+0xc4>
 802b316:	687b      	ldr	r3, [r7, #4]
 802b318:	681b      	ldr	r3, [r3, #0]
 802b31a:	4a75      	ldr	r2, [pc, #468]	@ (802b4f0 <HAL_DMA_Init+0x28c>)
 802b31c:	4293      	cmp	r3, r2
 802b31e:	d003      	beq.n	802b328 <HAL_DMA_Init+0xc4>
 802b320:	21b7      	movs	r1, #183	@ 0xb7
 802b322:	4874      	ldr	r0, [pc, #464]	@ (802b4f4 <HAL_DMA_Init+0x290>)
 802b324:	f7fc fce7 	bl	8027cf6 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 802b328:	687b      	ldr	r3, [r7, #4]
 802b32a:	685b      	ldr	r3, [r3, #4]
 802b32c:	2b00      	cmp	r3, #0
 802b32e:	d026      	beq.n	802b37e <HAL_DMA_Init+0x11a>
 802b330:	687b      	ldr	r3, [r7, #4]
 802b332:	685b      	ldr	r3, [r3, #4]
 802b334:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 802b338:	d021      	beq.n	802b37e <HAL_DMA_Init+0x11a>
 802b33a:	687b      	ldr	r3, [r7, #4]
 802b33c:	685b      	ldr	r3, [r3, #4]
 802b33e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 802b342:	d01c      	beq.n	802b37e <HAL_DMA_Init+0x11a>
 802b344:	687b      	ldr	r3, [r7, #4]
 802b346:	685b      	ldr	r3, [r3, #4]
 802b348:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 802b34c:	d017      	beq.n	802b37e <HAL_DMA_Init+0x11a>
 802b34e:	687b      	ldr	r3, [r7, #4]
 802b350:	685b      	ldr	r3, [r3, #4]
 802b352:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 802b356:	d012      	beq.n	802b37e <HAL_DMA_Init+0x11a>
 802b358:	687b      	ldr	r3, [r7, #4]
 802b35a:	685b      	ldr	r3, [r3, #4]
 802b35c:	f1b3 6f20 	cmp.w	r3, #167772160	@ 0xa000000
 802b360:	d00d      	beq.n	802b37e <HAL_DMA_Init+0x11a>
 802b362:	687b      	ldr	r3, [r7, #4]
 802b364:	685b      	ldr	r3, [r3, #4]
 802b366:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 802b36a:	d008      	beq.n	802b37e <HAL_DMA_Init+0x11a>
 802b36c:	687b      	ldr	r3, [r7, #4]
 802b36e:	685b      	ldr	r3, [r3, #4]
 802b370:	f1b3 6f60 	cmp.w	r3, #234881024	@ 0xe000000
 802b374:	d003      	beq.n	802b37e <HAL_DMA_Init+0x11a>
 802b376:	21b8      	movs	r1, #184	@ 0xb8
 802b378:	485e      	ldr	r0, [pc, #376]	@ (802b4f4 <HAL_DMA_Init+0x290>)
 802b37a:	f7fc fcbc 	bl	8027cf6 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 802b37e:	687b      	ldr	r3, [r7, #4]
 802b380:	689b      	ldr	r3, [r3, #8]
 802b382:	2b00      	cmp	r3, #0
 802b384:	d00b      	beq.n	802b39e <HAL_DMA_Init+0x13a>
 802b386:	687b      	ldr	r3, [r7, #4]
 802b388:	689b      	ldr	r3, [r3, #8]
 802b38a:	2b40      	cmp	r3, #64	@ 0x40
 802b38c:	d007      	beq.n	802b39e <HAL_DMA_Init+0x13a>
 802b38e:	687b      	ldr	r3, [r7, #4]
 802b390:	689b      	ldr	r3, [r3, #8]
 802b392:	2b80      	cmp	r3, #128	@ 0x80
 802b394:	d003      	beq.n	802b39e <HAL_DMA_Init+0x13a>
 802b396:	21b9      	movs	r1, #185	@ 0xb9
 802b398:	4856      	ldr	r0, [pc, #344]	@ (802b4f4 <HAL_DMA_Init+0x290>)
 802b39a:	f7fc fcac 	bl	8027cf6 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 802b39e:	687b      	ldr	r3, [r7, #4]
 802b3a0:	68db      	ldr	r3, [r3, #12]
 802b3a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802b3a6:	d007      	beq.n	802b3b8 <HAL_DMA_Init+0x154>
 802b3a8:	687b      	ldr	r3, [r7, #4]
 802b3aa:	68db      	ldr	r3, [r3, #12]
 802b3ac:	2b00      	cmp	r3, #0
 802b3ae:	d003      	beq.n	802b3b8 <HAL_DMA_Init+0x154>
 802b3b0:	21ba      	movs	r1, #186	@ 0xba
 802b3b2:	4850      	ldr	r0, [pc, #320]	@ (802b4f4 <HAL_DMA_Init+0x290>)
 802b3b4:	f7fc fc9f 	bl	8027cf6 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 802b3b8:	687b      	ldr	r3, [r7, #4]
 802b3ba:	691b      	ldr	r3, [r3, #16]
 802b3bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 802b3c0:	d007      	beq.n	802b3d2 <HAL_DMA_Init+0x16e>
 802b3c2:	687b      	ldr	r3, [r7, #4]
 802b3c4:	691b      	ldr	r3, [r3, #16]
 802b3c6:	2b00      	cmp	r3, #0
 802b3c8:	d003      	beq.n	802b3d2 <HAL_DMA_Init+0x16e>
 802b3ca:	21bb      	movs	r1, #187	@ 0xbb
 802b3cc:	4849      	ldr	r0, [pc, #292]	@ (802b4f4 <HAL_DMA_Init+0x290>)
 802b3ce:	f7fc fc92 	bl	8027cf6 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 802b3d2:	687b      	ldr	r3, [r7, #4]
 802b3d4:	695b      	ldr	r3, [r3, #20]
 802b3d6:	2b00      	cmp	r3, #0
 802b3d8:	d00d      	beq.n	802b3f6 <HAL_DMA_Init+0x192>
 802b3da:	687b      	ldr	r3, [r7, #4]
 802b3dc:	695b      	ldr	r3, [r3, #20]
 802b3de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 802b3e2:	d008      	beq.n	802b3f6 <HAL_DMA_Init+0x192>
 802b3e4:	687b      	ldr	r3, [r7, #4]
 802b3e6:	695b      	ldr	r3, [r3, #20]
 802b3e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 802b3ec:	d003      	beq.n	802b3f6 <HAL_DMA_Init+0x192>
 802b3ee:	21bc      	movs	r1, #188	@ 0xbc
 802b3f0:	4840      	ldr	r0, [pc, #256]	@ (802b4f4 <HAL_DMA_Init+0x290>)
 802b3f2:	f7fc fc80 	bl	8027cf6 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 802b3f6:	687b      	ldr	r3, [r7, #4]
 802b3f8:	699b      	ldr	r3, [r3, #24]
 802b3fa:	2b00      	cmp	r3, #0
 802b3fc:	d00d      	beq.n	802b41a <HAL_DMA_Init+0x1b6>
 802b3fe:	687b      	ldr	r3, [r7, #4]
 802b400:	699b      	ldr	r3, [r3, #24]
 802b402:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 802b406:	d008      	beq.n	802b41a <HAL_DMA_Init+0x1b6>
 802b408:	687b      	ldr	r3, [r7, #4]
 802b40a:	699b      	ldr	r3, [r3, #24]
 802b40c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 802b410:	d003      	beq.n	802b41a <HAL_DMA_Init+0x1b6>
 802b412:	21bd      	movs	r1, #189	@ 0xbd
 802b414:	4837      	ldr	r0, [pc, #220]	@ (802b4f4 <HAL_DMA_Init+0x290>)
 802b416:	f7fc fc6e 	bl	8027cf6 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 802b41a:	687b      	ldr	r3, [r7, #4]
 802b41c:	69db      	ldr	r3, [r3, #28]
 802b41e:	2b00      	cmp	r3, #0
 802b420:	d00c      	beq.n	802b43c <HAL_DMA_Init+0x1d8>
 802b422:	687b      	ldr	r3, [r7, #4]
 802b424:	69db      	ldr	r3, [r3, #28]
 802b426:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 802b42a:	d007      	beq.n	802b43c <HAL_DMA_Init+0x1d8>
 802b42c:	687b      	ldr	r3, [r7, #4]
 802b42e:	69db      	ldr	r3, [r3, #28]
 802b430:	2b20      	cmp	r3, #32
 802b432:	d003      	beq.n	802b43c <HAL_DMA_Init+0x1d8>
 802b434:	21be      	movs	r1, #190	@ 0xbe
 802b436:	482f      	ldr	r0, [pc, #188]	@ (802b4f4 <HAL_DMA_Init+0x290>)
 802b438:	f7fc fc5d 	bl	8027cf6 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 802b43c:	687b      	ldr	r3, [r7, #4]
 802b43e:	6a1b      	ldr	r3, [r3, #32]
 802b440:	2b00      	cmp	r3, #0
 802b442:	d012      	beq.n	802b46a <HAL_DMA_Init+0x206>
 802b444:	687b      	ldr	r3, [r7, #4]
 802b446:	6a1b      	ldr	r3, [r3, #32]
 802b448:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 802b44c:	d00d      	beq.n	802b46a <HAL_DMA_Init+0x206>
 802b44e:	687b      	ldr	r3, [r7, #4]
 802b450:	6a1b      	ldr	r3, [r3, #32]
 802b452:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 802b456:	d008      	beq.n	802b46a <HAL_DMA_Init+0x206>
 802b458:	687b      	ldr	r3, [r7, #4]
 802b45a:	6a1b      	ldr	r3, [r3, #32]
 802b45c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 802b460:	d003      	beq.n	802b46a <HAL_DMA_Init+0x206>
 802b462:	21bf      	movs	r1, #191	@ 0xbf
 802b464:	4823      	ldr	r0, [pc, #140]	@ (802b4f4 <HAL_DMA_Init+0x290>)
 802b466:	f7fc fc46 	bl	8027cf6 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 802b46a:	687b      	ldr	r3, [r7, #4]
 802b46c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802b46e:	2b00      	cmp	r3, #0
 802b470:	d007      	beq.n	802b482 <HAL_DMA_Init+0x21e>
 802b472:	687b      	ldr	r3, [r7, #4]
 802b474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802b476:	2b04      	cmp	r3, #4
 802b478:	d003      	beq.n	802b482 <HAL_DMA_Init+0x21e>
 802b47a:	21c0      	movs	r1, #192	@ 0xc0
 802b47c:	481d      	ldr	r0, [pc, #116]	@ (802b4f4 <HAL_DMA_Init+0x290>)
 802b47e:	f7fc fc3a 	bl	8027cf6 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 802b482:	687b      	ldr	r3, [r7, #4]
 802b484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802b486:	2b00      	cmp	r3, #0
 802b488:	d064      	beq.n	802b554 <HAL_DMA_Init+0x2f0>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 802b48a:	687b      	ldr	r3, [r7, #4]
 802b48c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802b48e:	2b00      	cmp	r3, #0
 802b490:	d032      	beq.n	802b4f8 <HAL_DMA_Init+0x294>
 802b492:	687b      	ldr	r3, [r7, #4]
 802b494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802b496:	2b01      	cmp	r3, #1
 802b498:	d02e      	beq.n	802b4f8 <HAL_DMA_Init+0x294>
 802b49a:	687b      	ldr	r3, [r7, #4]
 802b49c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802b49e:	2b02      	cmp	r3, #2
 802b4a0:	d02a      	beq.n	802b4f8 <HAL_DMA_Init+0x294>
 802b4a2:	687b      	ldr	r3, [r7, #4]
 802b4a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802b4a6:	2b03      	cmp	r3, #3
 802b4a8:	d026      	beq.n	802b4f8 <HAL_DMA_Init+0x294>
 802b4aa:	21c5      	movs	r1, #197	@ 0xc5
 802b4ac:	4811      	ldr	r0, [pc, #68]	@ (802b4f4 <HAL_DMA_Init+0x290>)
 802b4ae:	f7fc fc22 	bl	8027cf6 <assert_failed>
 802b4b2:	e021      	b.n	802b4f8 <HAL_DMA_Init+0x294>
 802b4b4:	40026010 	.word	0x40026010
 802b4b8:	40026028 	.word	0x40026028
 802b4bc:	40026040 	.word	0x40026040
 802b4c0:	40026058 	.word	0x40026058
 802b4c4:	40026070 	.word	0x40026070
 802b4c8:	40026088 	.word	0x40026088
 802b4cc:	400260a0 	.word	0x400260a0
 802b4d0:	400260b8 	.word	0x400260b8
 802b4d4:	40026410 	.word	0x40026410
 802b4d8:	40026428 	.word	0x40026428
 802b4dc:	40026440 	.word	0x40026440
 802b4e0:	40026458 	.word	0x40026458
 802b4e4:	40026470 	.word	0x40026470
 802b4e8:	40026488 	.word	0x40026488
 802b4ec:	400264a0 	.word	0x400264a0
 802b4f0:	400264b8 	.word	0x400264b8
 802b4f4:	08038344 	.word	0x08038344
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 802b4f8:	687b      	ldr	r3, [r7, #4]
 802b4fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802b4fc:	2b00      	cmp	r3, #0
 802b4fe:	d012      	beq.n	802b526 <HAL_DMA_Init+0x2c2>
 802b500:	687b      	ldr	r3, [r7, #4]
 802b502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802b504:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 802b508:	d00d      	beq.n	802b526 <HAL_DMA_Init+0x2c2>
 802b50a:	687b      	ldr	r3, [r7, #4]
 802b50c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802b50e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 802b512:	d008      	beq.n	802b526 <HAL_DMA_Init+0x2c2>
 802b514:	687b      	ldr	r3, [r7, #4]
 802b516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802b518:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 802b51c:	d003      	beq.n	802b526 <HAL_DMA_Init+0x2c2>
 802b51e:	21c6      	movs	r1, #198	@ 0xc6
 802b520:	485b      	ldr	r0, [pc, #364]	@ (802b690 <HAL_DMA_Init+0x42c>)
 802b522:	f7fc fbe8 	bl	8027cf6 <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 802b526:	687b      	ldr	r3, [r7, #4]
 802b528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802b52a:	2b00      	cmp	r3, #0
 802b52c:	d012      	beq.n	802b554 <HAL_DMA_Init+0x2f0>
 802b52e:	687b      	ldr	r3, [r7, #4]
 802b530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802b532:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 802b536:	d00d      	beq.n	802b554 <HAL_DMA_Init+0x2f0>
 802b538:	687b      	ldr	r3, [r7, #4]
 802b53a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802b53c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 802b540:	d008      	beq.n	802b554 <HAL_DMA_Init+0x2f0>
 802b542:	687b      	ldr	r3, [r7, #4]
 802b544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802b546:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 802b54a:	d003      	beq.n	802b554 <HAL_DMA_Init+0x2f0>
 802b54c:	21c7      	movs	r1, #199	@ 0xc7
 802b54e:	4850      	ldr	r0, [pc, #320]	@ (802b690 <HAL_DMA_Init+0x42c>)
 802b550:	f7fc fbd1 	bl	8027cf6 <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 802b554:	687b      	ldr	r3, [r7, #4]
 802b556:	2202      	movs	r2, #2
 802b558:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 802b55c:	687b      	ldr	r3, [r7, #4]
 802b55e:	2200      	movs	r2, #0
 802b560:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 802b564:	687b      	ldr	r3, [r7, #4]
 802b566:	681b      	ldr	r3, [r3, #0]
 802b568:	681a      	ldr	r2, [r3, #0]
 802b56a:	687b      	ldr	r3, [r7, #4]
 802b56c:	681b      	ldr	r3, [r3, #0]
 802b56e:	f022 0201 	bic.w	r2, r2, #1
 802b572:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 802b574:	e00f      	b.n	802b596 <HAL_DMA_Init+0x332>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 802b576:	f7fc ffb1 	bl	80284dc <HAL_GetTick>
 802b57a:	4602      	mov	r2, r0
 802b57c:	693b      	ldr	r3, [r7, #16]
 802b57e:	1ad3      	subs	r3, r2, r3
 802b580:	2b05      	cmp	r3, #5
 802b582:	d908      	bls.n	802b596 <HAL_DMA_Init+0x332>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 802b584:	687b      	ldr	r3, [r7, #4]
 802b586:	2220      	movs	r2, #32
 802b588:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 802b58a:	687b      	ldr	r3, [r7, #4]
 802b58c:	2203      	movs	r2, #3
 802b58e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 802b592:	2303      	movs	r3, #3
 802b594:	e078      	b.n	802b688 <HAL_DMA_Init+0x424>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 802b596:	687b      	ldr	r3, [r7, #4]
 802b598:	681b      	ldr	r3, [r3, #0]
 802b59a:	681b      	ldr	r3, [r3, #0]
 802b59c:	f003 0301 	and.w	r3, r3, #1
 802b5a0:	2b00      	cmp	r3, #0
 802b5a2:	d1e8      	bne.n	802b576 <HAL_DMA_Init+0x312>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 802b5a4:	687b      	ldr	r3, [r7, #4]
 802b5a6:	681b      	ldr	r3, [r3, #0]
 802b5a8:	681b      	ldr	r3, [r3, #0]
 802b5aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 802b5ac:	697a      	ldr	r2, [r7, #20]
 802b5ae:	4b39      	ldr	r3, [pc, #228]	@ (802b694 <HAL_DMA_Init+0x430>)
 802b5b0:	4013      	ands	r3, r2
 802b5b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 802b5b4:	687b      	ldr	r3, [r7, #4]
 802b5b6:	685a      	ldr	r2, [r3, #4]
 802b5b8:	687b      	ldr	r3, [r7, #4]
 802b5ba:	689b      	ldr	r3, [r3, #8]
 802b5bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802b5be:	687b      	ldr	r3, [r7, #4]
 802b5c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 802b5c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802b5c4:	687b      	ldr	r3, [r7, #4]
 802b5c6:	691b      	ldr	r3, [r3, #16]
 802b5c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802b5ca:	687b      	ldr	r3, [r7, #4]
 802b5cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802b5ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802b5d0:	687b      	ldr	r3, [r7, #4]
 802b5d2:	699b      	ldr	r3, [r3, #24]
 802b5d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 802b5d6:	687b      	ldr	r3, [r7, #4]
 802b5d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802b5da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 802b5dc:	687b      	ldr	r3, [r7, #4]
 802b5de:	6a1b      	ldr	r3, [r3, #32]
 802b5e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 802b5e2:	697a      	ldr	r2, [r7, #20]
 802b5e4:	4313      	orrs	r3, r2
 802b5e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 802b5e8:	687b      	ldr	r3, [r7, #4]
 802b5ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802b5ec:	2b04      	cmp	r3, #4
 802b5ee:	d107      	bne.n	802b600 <HAL_DMA_Init+0x39c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 802b5f0:	687b      	ldr	r3, [r7, #4]
 802b5f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 802b5f4:	687b      	ldr	r3, [r7, #4]
 802b5f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802b5f8:	4313      	orrs	r3, r2
 802b5fa:	697a      	ldr	r2, [r7, #20]
 802b5fc:	4313      	orrs	r3, r2
 802b5fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 802b600:	687b      	ldr	r3, [r7, #4]
 802b602:	681b      	ldr	r3, [r3, #0]
 802b604:	697a      	ldr	r2, [r7, #20]
 802b606:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 802b608:	687b      	ldr	r3, [r7, #4]
 802b60a:	681b      	ldr	r3, [r3, #0]
 802b60c:	695b      	ldr	r3, [r3, #20]
 802b60e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 802b610:	697b      	ldr	r3, [r7, #20]
 802b612:	f023 0307 	bic.w	r3, r3, #7
 802b616:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 802b618:	687b      	ldr	r3, [r7, #4]
 802b61a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802b61c:	697a      	ldr	r2, [r7, #20]
 802b61e:	4313      	orrs	r3, r2
 802b620:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 802b622:	687b      	ldr	r3, [r7, #4]
 802b624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802b626:	2b04      	cmp	r3, #4
 802b628:	d117      	bne.n	802b65a <HAL_DMA_Init+0x3f6>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 802b62a:	687b      	ldr	r3, [r7, #4]
 802b62c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802b62e:	697a      	ldr	r2, [r7, #20]
 802b630:	4313      	orrs	r3, r2
 802b632:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 802b634:	687b      	ldr	r3, [r7, #4]
 802b636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802b638:	2b00      	cmp	r3, #0
 802b63a:	d00e      	beq.n	802b65a <HAL_DMA_Init+0x3f6>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 802b63c:	6878      	ldr	r0, [r7, #4]
 802b63e:	f000 fbf5 	bl	802be2c <DMA_CheckFifoParam>
 802b642:	4603      	mov	r3, r0
 802b644:	2b00      	cmp	r3, #0
 802b646:	d008      	beq.n	802b65a <HAL_DMA_Init+0x3f6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 802b648:	687b      	ldr	r3, [r7, #4]
 802b64a:	2240      	movs	r2, #64	@ 0x40
 802b64c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 802b64e:	687b      	ldr	r3, [r7, #4]
 802b650:	2201      	movs	r2, #1
 802b652:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 802b656:	2301      	movs	r3, #1
 802b658:	e016      	b.n	802b688 <HAL_DMA_Init+0x424>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 802b65a:	687b      	ldr	r3, [r7, #4]
 802b65c:	681b      	ldr	r3, [r3, #0]
 802b65e:	697a      	ldr	r2, [r7, #20]
 802b660:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 802b662:	6878      	ldr	r0, [r7, #4]
 802b664:	f000 fbac 	bl	802bdc0 <DMA_CalcBaseAndBitshift>
 802b668:	4603      	mov	r3, r0
 802b66a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 802b66c:	687b      	ldr	r3, [r7, #4]
 802b66e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 802b670:	223f      	movs	r2, #63	@ 0x3f
 802b672:	409a      	lsls	r2, r3
 802b674:	68fb      	ldr	r3, [r7, #12]
 802b676:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 802b678:	687b      	ldr	r3, [r7, #4]
 802b67a:	2200      	movs	r2, #0
 802b67c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 802b67e:	687b      	ldr	r3, [r7, #4]
 802b680:	2201      	movs	r2, #1
 802b682:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 802b686:	2300      	movs	r3, #0
}
 802b688:	4618      	mov	r0, r3
 802b68a:	3718      	adds	r7, #24
 802b68c:	46bd      	mov	sp, r7
 802b68e:	bd80      	pop	{r7, pc}
 802b690:	08038344 	.word	0x08038344
 802b694:	f010803f 	.word	0xf010803f

0802b698 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 802b698:	b580      	push	{r7, lr}
 802b69a:	b084      	sub	sp, #16
 802b69c:	af00      	add	r7, sp, #0
 802b69e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 802b6a0:	687b      	ldr	r3, [r7, #4]
 802b6a2:	2b00      	cmp	r3, #0
 802b6a4:	d101      	bne.n	802b6aa <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 802b6a6:	2301      	movs	r3, #1
 802b6a8:	e0a5      	b.n	802b7f6 <HAL_DMA_DeInit+0x15e>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 802b6aa:	687b      	ldr	r3, [r7, #4]
 802b6ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 802b6b0:	b2db      	uxtb	r3, r3
 802b6b2:	2b02      	cmp	r3, #2
 802b6b4:	d101      	bne.n	802b6ba <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 802b6b6:	2302      	movs	r3, #2
 802b6b8:	e09d      	b.n	802b7f6 <HAL_DMA_DeInit+0x15e>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 802b6ba:	687b      	ldr	r3, [r7, #4]
 802b6bc:	681b      	ldr	r3, [r3, #0]
 802b6be:	4a50      	ldr	r2, [pc, #320]	@ (802b800 <HAL_DMA_DeInit+0x168>)
 802b6c0:	4293      	cmp	r3, r2
 802b6c2:	d04f      	beq.n	802b764 <HAL_DMA_DeInit+0xcc>
 802b6c4:	687b      	ldr	r3, [r7, #4]
 802b6c6:	681b      	ldr	r3, [r3, #0]
 802b6c8:	4a4e      	ldr	r2, [pc, #312]	@ (802b804 <HAL_DMA_DeInit+0x16c>)
 802b6ca:	4293      	cmp	r3, r2
 802b6cc:	d04a      	beq.n	802b764 <HAL_DMA_DeInit+0xcc>
 802b6ce:	687b      	ldr	r3, [r7, #4]
 802b6d0:	681b      	ldr	r3, [r3, #0]
 802b6d2:	4a4d      	ldr	r2, [pc, #308]	@ (802b808 <HAL_DMA_DeInit+0x170>)
 802b6d4:	4293      	cmp	r3, r2
 802b6d6:	d045      	beq.n	802b764 <HAL_DMA_DeInit+0xcc>
 802b6d8:	687b      	ldr	r3, [r7, #4]
 802b6da:	681b      	ldr	r3, [r3, #0]
 802b6dc:	4a4b      	ldr	r2, [pc, #300]	@ (802b80c <HAL_DMA_DeInit+0x174>)
 802b6de:	4293      	cmp	r3, r2
 802b6e0:	d040      	beq.n	802b764 <HAL_DMA_DeInit+0xcc>
 802b6e2:	687b      	ldr	r3, [r7, #4]
 802b6e4:	681b      	ldr	r3, [r3, #0]
 802b6e6:	4a4a      	ldr	r2, [pc, #296]	@ (802b810 <HAL_DMA_DeInit+0x178>)
 802b6e8:	4293      	cmp	r3, r2
 802b6ea:	d03b      	beq.n	802b764 <HAL_DMA_DeInit+0xcc>
 802b6ec:	687b      	ldr	r3, [r7, #4]
 802b6ee:	681b      	ldr	r3, [r3, #0]
 802b6f0:	4a48      	ldr	r2, [pc, #288]	@ (802b814 <HAL_DMA_DeInit+0x17c>)
 802b6f2:	4293      	cmp	r3, r2
 802b6f4:	d036      	beq.n	802b764 <HAL_DMA_DeInit+0xcc>
 802b6f6:	687b      	ldr	r3, [r7, #4]
 802b6f8:	681b      	ldr	r3, [r3, #0]
 802b6fa:	4a47      	ldr	r2, [pc, #284]	@ (802b818 <HAL_DMA_DeInit+0x180>)
 802b6fc:	4293      	cmp	r3, r2
 802b6fe:	d031      	beq.n	802b764 <HAL_DMA_DeInit+0xcc>
 802b700:	687b      	ldr	r3, [r7, #4]
 802b702:	681b      	ldr	r3, [r3, #0]
 802b704:	4a45      	ldr	r2, [pc, #276]	@ (802b81c <HAL_DMA_DeInit+0x184>)
 802b706:	4293      	cmp	r3, r2
 802b708:	d02c      	beq.n	802b764 <HAL_DMA_DeInit+0xcc>
 802b70a:	687b      	ldr	r3, [r7, #4]
 802b70c:	681b      	ldr	r3, [r3, #0]
 802b70e:	4a44      	ldr	r2, [pc, #272]	@ (802b820 <HAL_DMA_DeInit+0x188>)
 802b710:	4293      	cmp	r3, r2
 802b712:	d027      	beq.n	802b764 <HAL_DMA_DeInit+0xcc>
 802b714:	687b      	ldr	r3, [r7, #4]
 802b716:	681b      	ldr	r3, [r3, #0]
 802b718:	4a42      	ldr	r2, [pc, #264]	@ (802b824 <HAL_DMA_DeInit+0x18c>)
 802b71a:	4293      	cmp	r3, r2
 802b71c:	d022      	beq.n	802b764 <HAL_DMA_DeInit+0xcc>
 802b71e:	687b      	ldr	r3, [r7, #4]
 802b720:	681b      	ldr	r3, [r3, #0]
 802b722:	4a41      	ldr	r2, [pc, #260]	@ (802b828 <HAL_DMA_DeInit+0x190>)
 802b724:	4293      	cmp	r3, r2
 802b726:	d01d      	beq.n	802b764 <HAL_DMA_DeInit+0xcc>
 802b728:	687b      	ldr	r3, [r7, #4]
 802b72a:	681b      	ldr	r3, [r3, #0]
 802b72c:	4a3f      	ldr	r2, [pc, #252]	@ (802b82c <HAL_DMA_DeInit+0x194>)
 802b72e:	4293      	cmp	r3, r2
 802b730:	d018      	beq.n	802b764 <HAL_DMA_DeInit+0xcc>
 802b732:	687b      	ldr	r3, [r7, #4]
 802b734:	681b      	ldr	r3, [r3, #0]
 802b736:	4a3e      	ldr	r2, [pc, #248]	@ (802b830 <HAL_DMA_DeInit+0x198>)
 802b738:	4293      	cmp	r3, r2
 802b73a:	d013      	beq.n	802b764 <HAL_DMA_DeInit+0xcc>
 802b73c:	687b      	ldr	r3, [r7, #4]
 802b73e:	681b      	ldr	r3, [r3, #0]
 802b740:	4a3c      	ldr	r2, [pc, #240]	@ (802b834 <HAL_DMA_DeInit+0x19c>)
 802b742:	4293      	cmp	r3, r2
 802b744:	d00e      	beq.n	802b764 <HAL_DMA_DeInit+0xcc>
 802b746:	687b      	ldr	r3, [r7, #4]
 802b748:	681b      	ldr	r3, [r3, #0]
 802b74a:	4a3b      	ldr	r2, [pc, #236]	@ (802b838 <HAL_DMA_DeInit+0x1a0>)
 802b74c:	4293      	cmp	r3, r2
 802b74e:	d009      	beq.n	802b764 <HAL_DMA_DeInit+0xcc>
 802b750:	687b      	ldr	r3, [r7, #4]
 802b752:	681b      	ldr	r3, [r3, #0]
 802b754:	4a39      	ldr	r2, [pc, #228]	@ (802b83c <HAL_DMA_DeInit+0x1a4>)
 802b756:	4293      	cmp	r3, r2
 802b758:	d004      	beq.n	802b764 <HAL_DMA_DeInit+0xcc>
 802b75a:	f240 1147 	movw	r1, #327	@ 0x147
 802b75e:	4838      	ldr	r0, [pc, #224]	@ (802b840 <HAL_DMA_DeInit+0x1a8>)
 802b760:	f7fc fac9 	bl	8027cf6 <assert_failed>

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 802b764:	687b      	ldr	r3, [r7, #4]
 802b766:	681b      	ldr	r3, [r3, #0]
 802b768:	681a      	ldr	r2, [r3, #0]
 802b76a:	687b      	ldr	r3, [r7, #4]
 802b76c:	681b      	ldr	r3, [r3, #0]
 802b76e:	f022 0201 	bic.w	r2, r2, #1
 802b772:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 802b774:	687b      	ldr	r3, [r7, #4]
 802b776:	681b      	ldr	r3, [r3, #0]
 802b778:	2200      	movs	r2, #0
 802b77a:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 802b77c:	687b      	ldr	r3, [r7, #4]
 802b77e:	681b      	ldr	r3, [r3, #0]
 802b780:	2200      	movs	r2, #0
 802b782:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 802b784:	687b      	ldr	r3, [r7, #4]
 802b786:	681b      	ldr	r3, [r3, #0]
 802b788:	2200      	movs	r2, #0
 802b78a:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 802b78c:	687b      	ldr	r3, [r7, #4]
 802b78e:	681b      	ldr	r3, [r3, #0]
 802b790:	2200      	movs	r2, #0
 802b792:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 802b794:	687b      	ldr	r3, [r7, #4]
 802b796:	681b      	ldr	r3, [r3, #0]
 802b798:	2200      	movs	r2, #0
 802b79a:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 802b79c:	687b      	ldr	r3, [r7, #4]
 802b79e:	681b      	ldr	r3, [r3, #0]
 802b7a0:	2221      	movs	r2, #33	@ 0x21
 802b7a2:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 802b7a4:	6878      	ldr	r0, [r7, #4]
 802b7a6:	f000 fb0b 	bl	802bdc0 <DMA_CalcBaseAndBitshift>
 802b7aa:	4603      	mov	r3, r0
 802b7ac:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 802b7ae:	687b      	ldr	r3, [r7, #4]
 802b7b0:	2200      	movs	r2, #0
 802b7b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 802b7b4:	687b      	ldr	r3, [r7, #4]
 802b7b6:	2200      	movs	r2, #0
 802b7b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 802b7ba:	687b      	ldr	r3, [r7, #4]
 802b7bc:	2200      	movs	r2, #0
 802b7be:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 802b7c0:	687b      	ldr	r3, [r7, #4]
 802b7c2:	2200      	movs	r2, #0
 802b7c4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 802b7c6:	687b      	ldr	r3, [r7, #4]
 802b7c8:	2200      	movs	r2, #0
 802b7ca:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 802b7cc:	687b      	ldr	r3, [r7, #4]
 802b7ce:	2200      	movs	r2, #0
 802b7d0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 802b7d2:	687b      	ldr	r3, [r7, #4]
 802b7d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 802b7d6:	223f      	movs	r2, #63	@ 0x3f
 802b7d8:	409a      	lsls	r2, r3
 802b7da:	68fb      	ldr	r3, [r7, #12]
 802b7dc:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 802b7de:	687b      	ldr	r3, [r7, #4]
 802b7e0:	2200      	movs	r2, #0
 802b7e2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 802b7e4:	687b      	ldr	r3, [r7, #4]
 802b7e6:	2200      	movs	r2, #0
 802b7e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 802b7ec:	687b      	ldr	r3, [r7, #4]
 802b7ee:	2200      	movs	r2, #0
 802b7f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 802b7f4:	2300      	movs	r3, #0
}
 802b7f6:	4618      	mov	r0, r3
 802b7f8:	3710      	adds	r7, #16
 802b7fa:	46bd      	mov	sp, r7
 802b7fc:	bd80      	pop	{r7, pc}
 802b7fe:	bf00      	nop
 802b800:	40026010 	.word	0x40026010
 802b804:	40026028 	.word	0x40026028
 802b808:	40026040 	.word	0x40026040
 802b80c:	40026058 	.word	0x40026058
 802b810:	40026070 	.word	0x40026070
 802b814:	40026088 	.word	0x40026088
 802b818:	400260a0 	.word	0x400260a0
 802b81c:	400260b8 	.word	0x400260b8
 802b820:	40026410 	.word	0x40026410
 802b824:	40026428 	.word	0x40026428
 802b828:	40026440 	.word	0x40026440
 802b82c:	40026458 	.word	0x40026458
 802b830:	40026470 	.word	0x40026470
 802b834:	40026488 	.word	0x40026488
 802b838:	400264a0 	.word	0x400264a0
 802b83c:	400264b8 	.word	0x400264b8
 802b840:	08038344 	.word	0x08038344

0802b844 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 802b844:	b580      	push	{r7, lr}
 802b846:	b086      	sub	sp, #24
 802b848:	af00      	add	r7, sp, #0
 802b84a:	60f8      	str	r0, [r7, #12]
 802b84c:	60b9      	str	r1, [r7, #8]
 802b84e:	607a      	str	r2, [r7, #4]
 802b850:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 802b852:	2300      	movs	r3, #0
 802b854:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 802b856:	68fb      	ldr	r3, [r7, #12]
 802b858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 802b85a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 802b85c:	683b      	ldr	r3, [r7, #0]
 802b85e:	2b00      	cmp	r3, #0
 802b860:	d003      	beq.n	802b86a <HAL_DMA_Start_IT+0x26>
 802b862:	683b      	ldr	r3, [r7, #0]
 802b864:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 802b868:	d304      	bcc.n	802b874 <HAL_DMA_Start_IT+0x30>
 802b86a:	f240 11cb 	movw	r1, #459	@ 0x1cb
 802b86e:	4827      	ldr	r0, [pc, #156]	@ (802b90c <HAL_DMA_Start_IT+0xc8>)
 802b870:	f7fc fa41 	bl	8027cf6 <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 802b874:	68fb      	ldr	r3, [r7, #12]
 802b876:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 802b87a:	2b01      	cmp	r3, #1
 802b87c:	d101      	bne.n	802b882 <HAL_DMA_Start_IT+0x3e>
 802b87e:	2302      	movs	r3, #2
 802b880:	e040      	b.n	802b904 <HAL_DMA_Start_IT+0xc0>
 802b882:	68fb      	ldr	r3, [r7, #12]
 802b884:	2201      	movs	r2, #1
 802b886:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 802b88a:	68fb      	ldr	r3, [r7, #12]
 802b88c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 802b890:	b2db      	uxtb	r3, r3
 802b892:	2b01      	cmp	r3, #1
 802b894:	d12f      	bne.n	802b8f6 <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 802b896:	68fb      	ldr	r3, [r7, #12]
 802b898:	2202      	movs	r2, #2
 802b89a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 802b89e:	68fb      	ldr	r3, [r7, #12]
 802b8a0:	2200      	movs	r2, #0
 802b8a2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 802b8a4:	683b      	ldr	r3, [r7, #0]
 802b8a6:	687a      	ldr	r2, [r7, #4]
 802b8a8:	68b9      	ldr	r1, [r7, #8]
 802b8aa:	68f8      	ldr	r0, [r7, #12]
 802b8ac:	f000 fa5a 	bl	802bd64 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 802b8b0:	68fb      	ldr	r3, [r7, #12]
 802b8b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 802b8b4:	223f      	movs	r2, #63	@ 0x3f
 802b8b6:	409a      	lsls	r2, r3
 802b8b8:	693b      	ldr	r3, [r7, #16]
 802b8ba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 802b8bc:	68fb      	ldr	r3, [r7, #12]
 802b8be:	681b      	ldr	r3, [r3, #0]
 802b8c0:	681a      	ldr	r2, [r3, #0]
 802b8c2:	68fb      	ldr	r3, [r7, #12]
 802b8c4:	681b      	ldr	r3, [r3, #0]
 802b8c6:	f042 0216 	orr.w	r2, r2, #22
 802b8ca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 802b8cc:	68fb      	ldr	r3, [r7, #12]
 802b8ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802b8d0:	2b00      	cmp	r3, #0
 802b8d2:	d007      	beq.n	802b8e4 <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 802b8d4:	68fb      	ldr	r3, [r7, #12]
 802b8d6:	681b      	ldr	r3, [r3, #0]
 802b8d8:	681a      	ldr	r2, [r3, #0]
 802b8da:	68fb      	ldr	r3, [r7, #12]
 802b8dc:	681b      	ldr	r3, [r3, #0]
 802b8de:	f042 0208 	orr.w	r2, r2, #8
 802b8e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 802b8e4:	68fb      	ldr	r3, [r7, #12]
 802b8e6:	681b      	ldr	r3, [r3, #0]
 802b8e8:	681a      	ldr	r2, [r3, #0]
 802b8ea:	68fb      	ldr	r3, [r7, #12]
 802b8ec:	681b      	ldr	r3, [r3, #0]
 802b8ee:	f042 0201 	orr.w	r2, r2, #1
 802b8f2:	601a      	str	r2, [r3, #0]
 802b8f4:	e005      	b.n	802b902 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 802b8f6:	68fb      	ldr	r3, [r7, #12]
 802b8f8:	2200      	movs	r2, #0
 802b8fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 802b8fe:	2302      	movs	r3, #2
 802b900:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 802b902:	7dfb      	ldrb	r3, [r7, #23]
}
 802b904:	4618      	mov	r0, r3
 802b906:	3718      	adds	r7, #24
 802b908:	46bd      	mov	sp, r7
 802b90a:	bd80      	pop	{r7, pc}
 802b90c:	08038344 	.word	0x08038344

0802b910 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 802b910:	b580      	push	{r7, lr}
 802b912:	b084      	sub	sp, #16
 802b914:	af00      	add	r7, sp, #0
 802b916:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 802b918:	687b      	ldr	r3, [r7, #4]
 802b91a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 802b91c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 802b91e:	f7fc fddd 	bl	80284dc <HAL_GetTick>
 802b922:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 802b924:	687b      	ldr	r3, [r7, #4]
 802b926:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 802b92a:	b2db      	uxtb	r3, r3
 802b92c:	2b02      	cmp	r3, #2
 802b92e:	d008      	beq.n	802b942 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 802b930:	687b      	ldr	r3, [r7, #4]
 802b932:	2280      	movs	r2, #128	@ 0x80
 802b934:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 802b936:	687b      	ldr	r3, [r7, #4]
 802b938:	2200      	movs	r2, #0
 802b93a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 802b93e:	2301      	movs	r3, #1
 802b940:	e052      	b.n	802b9e8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 802b942:	687b      	ldr	r3, [r7, #4]
 802b944:	681b      	ldr	r3, [r3, #0]
 802b946:	681a      	ldr	r2, [r3, #0]
 802b948:	687b      	ldr	r3, [r7, #4]
 802b94a:	681b      	ldr	r3, [r3, #0]
 802b94c:	f022 0216 	bic.w	r2, r2, #22
 802b950:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 802b952:	687b      	ldr	r3, [r7, #4]
 802b954:	681b      	ldr	r3, [r3, #0]
 802b956:	695a      	ldr	r2, [r3, #20]
 802b958:	687b      	ldr	r3, [r7, #4]
 802b95a:	681b      	ldr	r3, [r3, #0]
 802b95c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 802b960:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 802b962:	687b      	ldr	r3, [r7, #4]
 802b964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802b966:	2b00      	cmp	r3, #0
 802b968:	d103      	bne.n	802b972 <HAL_DMA_Abort+0x62>
 802b96a:	687b      	ldr	r3, [r7, #4]
 802b96c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 802b96e:	2b00      	cmp	r3, #0
 802b970:	d007      	beq.n	802b982 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 802b972:	687b      	ldr	r3, [r7, #4]
 802b974:	681b      	ldr	r3, [r3, #0]
 802b976:	681a      	ldr	r2, [r3, #0]
 802b978:	687b      	ldr	r3, [r7, #4]
 802b97a:	681b      	ldr	r3, [r3, #0]
 802b97c:	f022 0208 	bic.w	r2, r2, #8
 802b980:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 802b982:	687b      	ldr	r3, [r7, #4]
 802b984:	681b      	ldr	r3, [r3, #0]
 802b986:	681a      	ldr	r2, [r3, #0]
 802b988:	687b      	ldr	r3, [r7, #4]
 802b98a:	681b      	ldr	r3, [r3, #0]
 802b98c:	f022 0201 	bic.w	r2, r2, #1
 802b990:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 802b992:	e013      	b.n	802b9bc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 802b994:	f7fc fda2 	bl	80284dc <HAL_GetTick>
 802b998:	4602      	mov	r2, r0
 802b99a:	68bb      	ldr	r3, [r7, #8]
 802b99c:	1ad3      	subs	r3, r2, r3
 802b99e:	2b05      	cmp	r3, #5
 802b9a0:	d90c      	bls.n	802b9bc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 802b9a2:	687b      	ldr	r3, [r7, #4]
 802b9a4:	2220      	movs	r2, #32
 802b9a6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 802b9a8:	687b      	ldr	r3, [r7, #4]
 802b9aa:	2203      	movs	r2, #3
 802b9ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 802b9b0:	687b      	ldr	r3, [r7, #4]
 802b9b2:	2200      	movs	r2, #0
 802b9b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 802b9b8:	2303      	movs	r3, #3
 802b9ba:	e015      	b.n	802b9e8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 802b9bc:	687b      	ldr	r3, [r7, #4]
 802b9be:	681b      	ldr	r3, [r3, #0]
 802b9c0:	681b      	ldr	r3, [r3, #0]
 802b9c2:	f003 0301 	and.w	r3, r3, #1
 802b9c6:	2b00      	cmp	r3, #0
 802b9c8:	d1e4      	bne.n	802b994 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 802b9ca:	687b      	ldr	r3, [r7, #4]
 802b9cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 802b9ce:	223f      	movs	r2, #63	@ 0x3f
 802b9d0:	409a      	lsls	r2, r3
 802b9d2:	68fb      	ldr	r3, [r7, #12]
 802b9d4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 802b9d6:	687b      	ldr	r3, [r7, #4]
 802b9d8:	2201      	movs	r2, #1
 802b9da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 802b9de:	687b      	ldr	r3, [r7, #4]
 802b9e0:	2200      	movs	r2, #0
 802b9e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 802b9e6:	2300      	movs	r3, #0
}
 802b9e8:	4618      	mov	r0, r3
 802b9ea:	3710      	adds	r7, #16
 802b9ec:	46bd      	mov	sp, r7
 802b9ee:	bd80      	pop	{r7, pc}

0802b9f0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 802b9f0:	b480      	push	{r7}
 802b9f2:	b083      	sub	sp, #12
 802b9f4:	af00      	add	r7, sp, #0
 802b9f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 802b9f8:	687b      	ldr	r3, [r7, #4]
 802b9fa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 802b9fe:	b2db      	uxtb	r3, r3
 802ba00:	2b02      	cmp	r3, #2
 802ba02:	d004      	beq.n	802ba0e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 802ba04:	687b      	ldr	r3, [r7, #4]
 802ba06:	2280      	movs	r2, #128	@ 0x80
 802ba08:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 802ba0a:	2301      	movs	r3, #1
 802ba0c:	e00c      	b.n	802ba28 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 802ba0e:	687b      	ldr	r3, [r7, #4]
 802ba10:	2205      	movs	r2, #5
 802ba12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 802ba16:	687b      	ldr	r3, [r7, #4]
 802ba18:	681b      	ldr	r3, [r3, #0]
 802ba1a:	681a      	ldr	r2, [r3, #0]
 802ba1c:	687b      	ldr	r3, [r7, #4]
 802ba1e:	681b      	ldr	r3, [r3, #0]
 802ba20:	f022 0201 	bic.w	r2, r2, #1
 802ba24:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 802ba26:	2300      	movs	r3, #0
}
 802ba28:	4618      	mov	r0, r3
 802ba2a:	370c      	adds	r7, #12
 802ba2c:	46bd      	mov	sp, r7
 802ba2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ba32:	4770      	bx	lr

0802ba34 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 802ba34:	b580      	push	{r7, lr}
 802ba36:	b086      	sub	sp, #24
 802ba38:	af00      	add	r7, sp, #0
 802ba3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 802ba3c:	2300      	movs	r3, #0
 802ba3e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 802ba40:	4b8e      	ldr	r3, [pc, #568]	@ (802bc7c <HAL_DMA_IRQHandler+0x248>)
 802ba42:	681b      	ldr	r3, [r3, #0]
 802ba44:	4a8e      	ldr	r2, [pc, #568]	@ (802bc80 <HAL_DMA_IRQHandler+0x24c>)
 802ba46:	fba2 2303 	umull	r2, r3, r2, r3
 802ba4a:	0a9b      	lsrs	r3, r3, #10
 802ba4c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 802ba4e:	687b      	ldr	r3, [r7, #4]
 802ba50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 802ba52:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 802ba54:	693b      	ldr	r3, [r7, #16]
 802ba56:	681b      	ldr	r3, [r3, #0]
 802ba58:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 802ba5a:	687b      	ldr	r3, [r7, #4]
 802ba5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 802ba5e:	2208      	movs	r2, #8
 802ba60:	409a      	lsls	r2, r3
 802ba62:	68fb      	ldr	r3, [r7, #12]
 802ba64:	4013      	ands	r3, r2
 802ba66:	2b00      	cmp	r3, #0
 802ba68:	d01a      	beq.n	802baa0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 802ba6a:	687b      	ldr	r3, [r7, #4]
 802ba6c:	681b      	ldr	r3, [r3, #0]
 802ba6e:	681b      	ldr	r3, [r3, #0]
 802ba70:	f003 0304 	and.w	r3, r3, #4
 802ba74:	2b00      	cmp	r3, #0
 802ba76:	d013      	beq.n	802baa0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 802ba78:	687b      	ldr	r3, [r7, #4]
 802ba7a:	681b      	ldr	r3, [r3, #0]
 802ba7c:	681a      	ldr	r2, [r3, #0]
 802ba7e:	687b      	ldr	r3, [r7, #4]
 802ba80:	681b      	ldr	r3, [r3, #0]
 802ba82:	f022 0204 	bic.w	r2, r2, #4
 802ba86:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 802ba88:	687b      	ldr	r3, [r7, #4]
 802ba8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 802ba8c:	2208      	movs	r2, #8
 802ba8e:	409a      	lsls	r2, r3
 802ba90:	693b      	ldr	r3, [r7, #16]
 802ba92:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 802ba94:	687b      	ldr	r3, [r7, #4]
 802ba96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802ba98:	f043 0201 	orr.w	r2, r3, #1
 802ba9c:	687b      	ldr	r3, [r7, #4]
 802ba9e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 802baa0:	687b      	ldr	r3, [r7, #4]
 802baa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 802baa4:	2201      	movs	r2, #1
 802baa6:	409a      	lsls	r2, r3
 802baa8:	68fb      	ldr	r3, [r7, #12]
 802baaa:	4013      	ands	r3, r2
 802baac:	2b00      	cmp	r3, #0
 802baae:	d012      	beq.n	802bad6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 802bab0:	687b      	ldr	r3, [r7, #4]
 802bab2:	681b      	ldr	r3, [r3, #0]
 802bab4:	695b      	ldr	r3, [r3, #20]
 802bab6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 802baba:	2b00      	cmp	r3, #0
 802babc:	d00b      	beq.n	802bad6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 802babe:	687b      	ldr	r3, [r7, #4]
 802bac0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 802bac2:	2201      	movs	r2, #1
 802bac4:	409a      	lsls	r2, r3
 802bac6:	693b      	ldr	r3, [r7, #16]
 802bac8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 802baca:	687b      	ldr	r3, [r7, #4]
 802bacc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802bace:	f043 0202 	orr.w	r2, r3, #2
 802bad2:	687b      	ldr	r3, [r7, #4]
 802bad4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 802bad6:	687b      	ldr	r3, [r7, #4]
 802bad8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 802bada:	2204      	movs	r2, #4
 802badc:	409a      	lsls	r2, r3
 802bade:	68fb      	ldr	r3, [r7, #12]
 802bae0:	4013      	ands	r3, r2
 802bae2:	2b00      	cmp	r3, #0
 802bae4:	d012      	beq.n	802bb0c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 802bae6:	687b      	ldr	r3, [r7, #4]
 802bae8:	681b      	ldr	r3, [r3, #0]
 802baea:	681b      	ldr	r3, [r3, #0]
 802baec:	f003 0302 	and.w	r3, r3, #2
 802baf0:	2b00      	cmp	r3, #0
 802baf2:	d00b      	beq.n	802bb0c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 802baf4:	687b      	ldr	r3, [r7, #4]
 802baf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 802baf8:	2204      	movs	r2, #4
 802bafa:	409a      	lsls	r2, r3
 802bafc:	693b      	ldr	r3, [r7, #16]
 802bafe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 802bb00:	687b      	ldr	r3, [r7, #4]
 802bb02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802bb04:	f043 0204 	orr.w	r2, r3, #4
 802bb08:	687b      	ldr	r3, [r7, #4]
 802bb0a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 802bb0c:	687b      	ldr	r3, [r7, #4]
 802bb0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 802bb10:	2210      	movs	r2, #16
 802bb12:	409a      	lsls	r2, r3
 802bb14:	68fb      	ldr	r3, [r7, #12]
 802bb16:	4013      	ands	r3, r2
 802bb18:	2b00      	cmp	r3, #0
 802bb1a:	d043      	beq.n	802bba4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 802bb1c:	687b      	ldr	r3, [r7, #4]
 802bb1e:	681b      	ldr	r3, [r3, #0]
 802bb20:	681b      	ldr	r3, [r3, #0]
 802bb22:	f003 0308 	and.w	r3, r3, #8
 802bb26:	2b00      	cmp	r3, #0
 802bb28:	d03c      	beq.n	802bba4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 802bb2a:	687b      	ldr	r3, [r7, #4]
 802bb2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 802bb2e:	2210      	movs	r2, #16
 802bb30:	409a      	lsls	r2, r3
 802bb32:	693b      	ldr	r3, [r7, #16]
 802bb34:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 802bb36:	687b      	ldr	r3, [r7, #4]
 802bb38:	681b      	ldr	r3, [r3, #0]
 802bb3a:	681b      	ldr	r3, [r3, #0]
 802bb3c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 802bb40:	2b00      	cmp	r3, #0
 802bb42:	d018      	beq.n	802bb76 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 802bb44:	687b      	ldr	r3, [r7, #4]
 802bb46:	681b      	ldr	r3, [r3, #0]
 802bb48:	681b      	ldr	r3, [r3, #0]
 802bb4a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 802bb4e:	2b00      	cmp	r3, #0
 802bb50:	d108      	bne.n	802bb64 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 802bb52:	687b      	ldr	r3, [r7, #4]
 802bb54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802bb56:	2b00      	cmp	r3, #0
 802bb58:	d024      	beq.n	802bba4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 802bb5a:	687b      	ldr	r3, [r7, #4]
 802bb5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802bb5e:	6878      	ldr	r0, [r7, #4]
 802bb60:	4798      	blx	r3
 802bb62:	e01f      	b.n	802bba4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 802bb64:	687b      	ldr	r3, [r7, #4]
 802bb66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 802bb68:	2b00      	cmp	r3, #0
 802bb6a:	d01b      	beq.n	802bba4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 802bb6c:	687b      	ldr	r3, [r7, #4]
 802bb6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 802bb70:	6878      	ldr	r0, [r7, #4]
 802bb72:	4798      	blx	r3
 802bb74:	e016      	b.n	802bba4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 802bb76:	687b      	ldr	r3, [r7, #4]
 802bb78:	681b      	ldr	r3, [r3, #0]
 802bb7a:	681b      	ldr	r3, [r3, #0]
 802bb7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 802bb80:	2b00      	cmp	r3, #0
 802bb82:	d107      	bne.n	802bb94 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 802bb84:	687b      	ldr	r3, [r7, #4]
 802bb86:	681b      	ldr	r3, [r3, #0]
 802bb88:	681a      	ldr	r2, [r3, #0]
 802bb8a:	687b      	ldr	r3, [r7, #4]
 802bb8c:	681b      	ldr	r3, [r3, #0]
 802bb8e:	f022 0208 	bic.w	r2, r2, #8
 802bb92:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 802bb94:	687b      	ldr	r3, [r7, #4]
 802bb96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802bb98:	2b00      	cmp	r3, #0
 802bb9a:	d003      	beq.n	802bba4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 802bb9c:	687b      	ldr	r3, [r7, #4]
 802bb9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802bba0:	6878      	ldr	r0, [r7, #4]
 802bba2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 802bba4:	687b      	ldr	r3, [r7, #4]
 802bba6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 802bba8:	2220      	movs	r2, #32
 802bbaa:	409a      	lsls	r2, r3
 802bbac:	68fb      	ldr	r3, [r7, #12]
 802bbae:	4013      	ands	r3, r2
 802bbb0:	2b00      	cmp	r3, #0
 802bbb2:	f000 808f 	beq.w	802bcd4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 802bbb6:	687b      	ldr	r3, [r7, #4]
 802bbb8:	681b      	ldr	r3, [r3, #0]
 802bbba:	681b      	ldr	r3, [r3, #0]
 802bbbc:	f003 0310 	and.w	r3, r3, #16
 802bbc0:	2b00      	cmp	r3, #0
 802bbc2:	f000 8087 	beq.w	802bcd4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 802bbc6:	687b      	ldr	r3, [r7, #4]
 802bbc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 802bbca:	2220      	movs	r2, #32
 802bbcc:	409a      	lsls	r2, r3
 802bbce:	693b      	ldr	r3, [r7, #16]
 802bbd0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 802bbd2:	687b      	ldr	r3, [r7, #4]
 802bbd4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 802bbd8:	b2db      	uxtb	r3, r3
 802bbda:	2b05      	cmp	r3, #5
 802bbdc:	d136      	bne.n	802bc4c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 802bbde:	687b      	ldr	r3, [r7, #4]
 802bbe0:	681b      	ldr	r3, [r3, #0]
 802bbe2:	681a      	ldr	r2, [r3, #0]
 802bbe4:	687b      	ldr	r3, [r7, #4]
 802bbe6:	681b      	ldr	r3, [r3, #0]
 802bbe8:	f022 0216 	bic.w	r2, r2, #22
 802bbec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 802bbee:	687b      	ldr	r3, [r7, #4]
 802bbf0:	681b      	ldr	r3, [r3, #0]
 802bbf2:	695a      	ldr	r2, [r3, #20]
 802bbf4:	687b      	ldr	r3, [r7, #4]
 802bbf6:	681b      	ldr	r3, [r3, #0]
 802bbf8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 802bbfc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 802bbfe:	687b      	ldr	r3, [r7, #4]
 802bc00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802bc02:	2b00      	cmp	r3, #0
 802bc04:	d103      	bne.n	802bc0e <HAL_DMA_IRQHandler+0x1da>
 802bc06:	687b      	ldr	r3, [r7, #4]
 802bc08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 802bc0a:	2b00      	cmp	r3, #0
 802bc0c:	d007      	beq.n	802bc1e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 802bc0e:	687b      	ldr	r3, [r7, #4]
 802bc10:	681b      	ldr	r3, [r3, #0]
 802bc12:	681a      	ldr	r2, [r3, #0]
 802bc14:	687b      	ldr	r3, [r7, #4]
 802bc16:	681b      	ldr	r3, [r3, #0]
 802bc18:	f022 0208 	bic.w	r2, r2, #8
 802bc1c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 802bc1e:	687b      	ldr	r3, [r7, #4]
 802bc20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 802bc22:	223f      	movs	r2, #63	@ 0x3f
 802bc24:	409a      	lsls	r2, r3
 802bc26:	693b      	ldr	r3, [r7, #16]
 802bc28:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 802bc2a:	687b      	ldr	r3, [r7, #4]
 802bc2c:	2201      	movs	r2, #1
 802bc2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 802bc32:	687b      	ldr	r3, [r7, #4]
 802bc34:	2200      	movs	r2, #0
 802bc36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 802bc3a:	687b      	ldr	r3, [r7, #4]
 802bc3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802bc3e:	2b00      	cmp	r3, #0
 802bc40:	d07e      	beq.n	802bd40 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 802bc42:	687b      	ldr	r3, [r7, #4]
 802bc44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802bc46:	6878      	ldr	r0, [r7, #4]
 802bc48:	4798      	blx	r3
        }
        return;
 802bc4a:	e079      	b.n	802bd40 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 802bc4c:	687b      	ldr	r3, [r7, #4]
 802bc4e:	681b      	ldr	r3, [r3, #0]
 802bc50:	681b      	ldr	r3, [r3, #0]
 802bc52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 802bc56:	2b00      	cmp	r3, #0
 802bc58:	d01d      	beq.n	802bc96 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 802bc5a:	687b      	ldr	r3, [r7, #4]
 802bc5c:	681b      	ldr	r3, [r3, #0]
 802bc5e:	681b      	ldr	r3, [r3, #0]
 802bc60:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 802bc64:	2b00      	cmp	r3, #0
 802bc66:	d10d      	bne.n	802bc84 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 802bc68:	687b      	ldr	r3, [r7, #4]
 802bc6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802bc6c:	2b00      	cmp	r3, #0
 802bc6e:	d031      	beq.n	802bcd4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 802bc70:	687b      	ldr	r3, [r7, #4]
 802bc72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802bc74:	6878      	ldr	r0, [r7, #4]
 802bc76:	4798      	blx	r3
 802bc78:	e02c      	b.n	802bcd4 <HAL_DMA_IRQHandler+0x2a0>
 802bc7a:	bf00      	nop
 802bc7c:	2000001c 	.word	0x2000001c
 802bc80:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 802bc84:	687b      	ldr	r3, [r7, #4]
 802bc86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802bc88:	2b00      	cmp	r3, #0
 802bc8a:	d023      	beq.n	802bcd4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 802bc8c:	687b      	ldr	r3, [r7, #4]
 802bc8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802bc90:	6878      	ldr	r0, [r7, #4]
 802bc92:	4798      	blx	r3
 802bc94:	e01e      	b.n	802bcd4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 802bc96:	687b      	ldr	r3, [r7, #4]
 802bc98:	681b      	ldr	r3, [r3, #0]
 802bc9a:	681b      	ldr	r3, [r3, #0]
 802bc9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 802bca0:	2b00      	cmp	r3, #0
 802bca2:	d10f      	bne.n	802bcc4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 802bca4:	687b      	ldr	r3, [r7, #4]
 802bca6:	681b      	ldr	r3, [r3, #0]
 802bca8:	681a      	ldr	r2, [r3, #0]
 802bcaa:	687b      	ldr	r3, [r7, #4]
 802bcac:	681b      	ldr	r3, [r3, #0]
 802bcae:	f022 0210 	bic.w	r2, r2, #16
 802bcb2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 802bcb4:	687b      	ldr	r3, [r7, #4]
 802bcb6:	2201      	movs	r2, #1
 802bcb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 802bcbc:	687b      	ldr	r3, [r7, #4]
 802bcbe:	2200      	movs	r2, #0
 802bcc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 802bcc4:	687b      	ldr	r3, [r7, #4]
 802bcc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802bcc8:	2b00      	cmp	r3, #0
 802bcca:	d003      	beq.n	802bcd4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 802bccc:	687b      	ldr	r3, [r7, #4]
 802bcce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802bcd0:	6878      	ldr	r0, [r7, #4]
 802bcd2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 802bcd4:	687b      	ldr	r3, [r7, #4]
 802bcd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802bcd8:	2b00      	cmp	r3, #0
 802bcda:	d032      	beq.n	802bd42 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 802bcdc:	687b      	ldr	r3, [r7, #4]
 802bcde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802bce0:	f003 0301 	and.w	r3, r3, #1
 802bce4:	2b00      	cmp	r3, #0
 802bce6:	d022      	beq.n	802bd2e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 802bce8:	687b      	ldr	r3, [r7, #4]
 802bcea:	2205      	movs	r2, #5
 802bcec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 802bcf0:	687b      	ldr	r3, [r7, #4]
 802bcf2:	681b      	ldr	r3, [r3, #0]
 802bcf4:	681a      	ldr	r2, [r3, #0]
 802bcf6:	687b      	ldr	r3, [r7, #4]
 802bcf8:	681b      	ldr	r3, [r3, #0]
 802bcfa:	f022 0201 	bic.w	r2, r2, #1
 802bcfe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 802bd00:	68bb      	ldr	r3, [r7, #8]
 802bd02:	3301      	adds	r3, #1
 802bd04:	60bb      	str	r3, [r7, #8]
 802bd06:	697a      	ldr	r2, [r7, #20]
 802bd08:	429a      	cmp	r2, r3
 802bd0a:	d307      	bcc.n	802bd1c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 802bd0c:	687b      	ldr	r3, [r7, #4]
 802bd0e:	681b      	ldr	r3, [r3, #0]
 802bd10:	681b      	ldr	r3, [r3, #0]
 802bd12:	f003 0301 	and.w	r3, r3, #1
 802bd16:	2b00      	cmp	r3, #0
 802bd18:	d1f2      	bne.n	802bd00 <HAL_DMA_IRQHandler+0x2cc>
 802bd1a:	e000      	b.n	802bd1e <HAL_DMA_IRQHandler+0x2ea>
          break;
 802bd1c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 802bd1e:	687b      	ldr	r3, [r7, #4]
 802bd20:	2201      	movs	r2, #1
 802bd22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 802bd26:	687b      	ldr	r3, [r7, #4]
 802bd28:	2200      	movs	r2, #0
 802bd2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 802bd2e:	687b      	ldr	r3, [r7, #4]
 802bd30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 802bd32:	2b00      	cmp	r3, #0
 802bd34:	d005      	beq.n	802bd42 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 802bd36:	687b      	ldr	r3, [r7, #4]
 802bd38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 802bd3a:	6878      	ldr	r0, [r7, #4]
 802bd3c:	4798      	blx	r3
 802bd3e:	e000      	b.n	802bd42 <HAL_DMA_IRQHandler+0x30e>
        return;
 802bd40:	bf00      	nop
    }
  }
}
 802bd42:	3718      	adds	r7, #24
 802bd44:	46bd      	mov	sp, r7
 802bd46:	bd80      	pop	{r7, pc}

0802bd48 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 802bd48:	b480      	push	{r7}
 802bd4a:	b083      	sub	sp, #12
 802bd4c:	af00      	add	r7, sp, #0
 802bd4e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 802bd50:	687b      	ldr	r3, [r7, #4]
 802bd52:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 802bd56:	b2db      	uxtb	r3, r3
}
 802bd58:	4618      	mov	r0, r3
 802bd5a:	370c      	adds	r7, #12
 802bd5c:	46bd      	mov	sp, r7
 802bd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bd62:	4770      	bx	lr

0802bd64 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 802bd64:	b480      	push	{r7}
 802bd66:	b085      	sub	sp, #20
 802bd68:	af00      	add	r7, sp, #0
 802bd6a:	60f8      	str	r0, [r7, #12]
 802bd6c:	60b9      	str	r1, [r7, #8]
 802bd6e:	607a      	str	r2, [r7, #4]
 802bd70:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 802bd72:	68fb      	ldr	r3, [r7, #12]
 802bd74:	681b      	ldr	r3, [r3, #0]
 802bd76:	681a      	ldr	r2, [r3, #0]
 802bd78:	68fb      	ldr	r3, [r7, #12]
 802bd7a:	681b      	ldr	r3, [r3, #0]
 802bd7c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 802bd80:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 802bd82:	68fb      	ldr	r3, [r7, #12]
 802bd84:	681b      	ldr	r3, [r3, #0]
 802bd86:	683a      	ldr	r2, [r7, #0]
 802bd88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 802bd8a:	68fb      	ldr	r3, [r7, #12]
 802bd8c:	689b      	ldr	r3, [r3, #8]
 802bd8e:	2b40      	cmp	r3, #64	@ 0x40
 802bd90:	d108      	bne.n	802bda4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 802bd92:	68fb      	ldr	r3, [r7, #12]
 802bd94:	681b      	ldr	r3, [r3, #0]
 802bd96:	687a      	ldr	r2, [r7, #4]
 802bd98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 802bd9a:	68fb      	ldr	r3, [r7, #12]
 802bd9c:	681b      	ldr	r3, [r3, #0]
 802bd9e:	68ba      	ldr	r2, [r7, #8]
 802bda0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 802bda2:	e007      	b.n	802bdb4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 802bda4:	68fb      	ldr	r3, [r7, #12]
 802bda6:	681b      	ldr	r3, [r3, #0]
 802bda8:	68ba      	ldr	r2, [r7, #8]
 802bdaa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 802bdac:	68fb      	ldr	r3, [r7, #12]
 802bdae:	681b      	ldr	r3, [r3, #0]
 802bdb0:	687a      	ldr	r2, [r7, #4]
 802bdb2:	60da      	str	r2, [r3, #12]
}
 802bdb4:	bf00      	nop
 802bdb6:	3714      	adds	r7, #20
 802bdb8:	46bd      	mov	sp, r7
 802bdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bdbe:	4770      	bx	lr

0802bdc0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 802bdc0:	b480      	push	{r7}
 802bdc2:	b085      	sub	sp, #20
 802bdc4:	af00      	add	r7, sp, #0
 802bdc6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 802bdc8:	687b      	ldr	r3, [r7, #4]
 802bdca:	681b      	ldr	r3, [r3, #0]
 802bdcc:	b2db      	uxtb	r3, r3
 802bdce:	3b10      	subs	r3, #16
 802bdd0:	4a14      	ldr	r2, [pc, #80]	@ (802be24 <DMA_CalcBaseAndBitshift+0x64>)
 802bdd2:	fba2 2303 	umull	r2, r3, r2, r3
 802bdd6:	091b      	lsrs	r3, r3, #4
 802bdd8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 802bdda:	4a13      	ldr	r2, [pc, #76]	@ (802be28 <DMA_CalcBaseAndBitshift+0x68>)
 802bddc:	68fb      	ldr	r3, [r7, #12]
 802bdde:	4413      	add	r3, r2
 802bde0:	781b      	ldrb	r3, [r3, #0]
 802bde2:	461a      	mov	r2, r3
 802bde4:	687b      	ldr	r3, [r7, #4]
 802bde6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 802bde8:	68fb      	ldr	r3, [r7, #12]
 802bdea:	2b03      	cmp	r3, #3
 802bdec:	d909      	bls.n	802be02 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 802bdee:	687b      	ldr	r3, [r7, #4]
 802bdf0:	681b      	ldr	r3, [r3, #0]
 802bdf2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 802bdf6:	f023 0303 	bic.w	r3, r3, #3
 802bdfa:	1d1a      	adds	r2, r3, #4
 802bdfc:	687b      	ldr	r3, [r7, #4]
 802bdfe:	659a      	str	r2, [r3, #88]	@ 0x58
 802be00:	e007      	b.n	802be12 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 802be02:	687b      	ldr	r3, [r7, #4]
 802be04:	681b      	ldr	r3, [r3, #0]
 802be06:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 802be0a:	f023 0303 	bic.w	r3, r3, #3
 802be0e:	687a      	ldr	r2, [r7, #4]
 802be10:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 802be12:	687b      	ldr	r3, [r7, #4]
 802be14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 802be16:	4618      	mov	r0, r3
 802be18:	3714      	adds	r7, #20
 802be1a:	46bd      	mov	sp, r7
 802be1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802be20:	4770      	bx	lr
 802be22:	bf00      	nop
 802be24:	aaaaaaab 	.word	0xaaaaaaab
 802be28:	0803a818 	.word	0x0803a818

0802be2c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 802be2c:	b480      	push	{r7}
 802be2e:	b085      	sub	sp, #20
 802be30:	af00      	add	r7, sp, #0
 802be32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 802be34:	2300      	movs	r3, #0
 802be36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 802be38:	687b      	ldr	r3, [r7, #4]
 802be3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802be3c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 802be3e:	687b      	ldr	r3, [r7, #4]
 802be40:	699b      	ldr	r3, [r3, #24]
 802be42:	2b00      	cmp	r3, #0
 802be44:	d11f      	bne.n	802be86 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 802be46:	68bb      	ldr	r3, [r7, #8]
 802be48:	2b03      	cmp	r3, #3
 802be4a:	d856      	bhi.n	802befa <DMA_CheckFifoParam+0xce>
 802be4c:	a201      	add	r2, pc, #4	@ (adr r2, 802be54 <DMA_CheckFifoParam+0x28>)
 802be4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802be52:	bf00      	nop
 802be54:	0802be65 	.word	0x0802be65
 802be58:	0802be77 	.word	0x0802be77
 802be5c:	0802be65 	.word	0x0802be65
 802be60:	0802befb 	.word	0x0802befb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 802be64:	687b      	ldr	r3, [r7, #4]
 802be66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802be68:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 802be6c:	2b00      	cmp	r3, #0
 802be6e:	d046      	beq.n	802befe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 802be70:	2301      	movs	r3, #1
 802be72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 802be74:	e043      	b.n	802befe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 802be76:	687b      	ldr	r3, [r7, #4]
 802be78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802be7a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 802be7e:	d140      	bne.n	802bf02 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 802be80:	2301      	movs	r3, #1
 802be82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 802be84:	e03d      	b.n	802bf02 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 802be86:	687b      	ldr	r3, [r7, #4]
 802be88:	699b      	ldr	r3, [r3, #24]
 802be8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 802be8e:	d121      	bne.n	802bed4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 802be90:	68bb      	ldr	r3, [r7, #8]
 802be92:	2b03      	cmp	r3, #3
 802be94:	d837      	bhi.n	802bf06 <DMA_CheckFifoParam+0xda>
 802be96:	a201      	add	r2, pc, #4	@ (adr r2, 802be9c <DMA_CheckFifoParam+0x70>)
 802be98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802be9c:	0802bead 	.word	0x0802bead
 802bea0:	0802beb3 	.word	0x0802beb3
 802bea4:	0802bead 	.word	0x0802bead
 802bea8:	0802bec5 	.word	0x0802bec5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 802beac:	2301      	movs	r3, #1
 802beae:	73fb      	strb	r3, [r7, #15]
      break;
 802beb0:	e030      	b.n	802bf14 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 802beb2:	687b      	ldr	r3, [r7, #4]
 802beb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802beb6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 802beba:	2b00      	cmp	r3, #0
 802bebc:	d025      	beq.n	802bf0a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 802bebe:	2301      	movs	r3, #1
 802bec0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 802bec2:	e022      	b.n	802bf0a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 802bec4:	687b      	ldr	r3, [r7, #4]
 802bec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802bec8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 802becc:	d11f      	bne.n	802bf0e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 802bece:	2301      	movs	r3, #1
 802bed0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 802bed2:	e01c      	b.n	802bf0e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 802bed4:	68bb      	ldr	r3, [r7, #8]
 802bed6:	2b02      	cmp	r3, #2
 802bed8:	d903      	bls.n	802bee2 <DMA_CheckFifoParam+0xb6>
 802beda:	68bb      	ldr	r3, [r7, #8]
 802bedc:	2b03      	cmp	r3, #3
 802bede:	d003      	beq.n	802bee8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 802bee0:	e018      	b.n	802bf14 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 802bee2:	2301      	movs	r3, #1
 802bee4:	73fb      	strb	r3, [r7, #15]
      break;
 802bee6:	e015      	b.n	802bf14 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 802bee8:	687b      	ldr	r3, [r7, #4]
 802beea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802beec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 802bef0:	2b00      	cmp	r3, #0
 802bef2:	d00e      	beq.n	802bf12 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 802bef4:	2301      	movs	r3, #1
 802bef6:	73fb      	strb	r3, [r7, #15]
      break;
 802bef8:	e00b      	b.n	802bf12 <DMA_CheckFifoParam+0xe6>
      break;
 802befa:	bf00      	nop
 802befc:	e00a      	b.n	802bf14 <DMA_CheckFifoParam+0xe8>
      break;
 802befe:	bf00      	nop
 802bf00:	e008      	b.n	802bf14 <DMA_CheckFifoParam+0xe8>
      break;
 802bf02:	bf00      	nop
 802bf04:	e006      	b.n	802bf14 <DMA_CheckFifoParam+0xe8>
      break;
 802bf06:	bf00      	nop
 802bf08:	e004      	b.n	802bf14 <DMA_CheckFifoParam+0xe8>
      break;
 802bf0a:	bf00      	nop
 802bf0c:	e002      	b.n	802bf14 <DMA_CheckFifoParam+0xe8>
      break;   
 802bf0e:	bf00      	nop
 802bf10:	e000      	b.n	802bf14 <DMA_CheckFifoParam+0xe8>
      break;
 802bf12:	bf00      	nop
    }
  } 
  
  return status; 
 802bf14:	7bfb      	ldrb	r3, [r7, #15]
}
 802bf16:	4618      	mov	r0, r3
 802bf18:	3714      	adds	r7, #20
 802bf1a:	46bd      	mov	sp, r7
 802bf1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bf20:	4770      	bx	lr
 802bf22:	bf00      	nop

0802bf24 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 802bf24:	b580      	push	{r7, lr}
 802bf26:	b086      	sub	sp, #24
 802bf28:	af00      	add	r7, sp, #0
 802bf2a:	60f8      	str	r0, [r7, #12]
 802bf2c:	60b9      	str	r1, [r7, #8]
 802bf2e:	607a      	str	r2, [r7, #4]
 802bf30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 802bf32:	2300      	movs	r3, #0
 802bf34:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 802bf36:	6a3b      	ldr	r3, [r7, #32]
 802bf38:	2b00      	cmp	r3, #0
 802bf3a:	d003      	beq.n	802bf44 <HAL_DMAEx_MultiBufferStart_IT+0x20>
 802bf3c:	6a3b      	ldr	r3, [r7, #32]
 802bf3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 802bf42:	d303      	bcc.n	802bf4c <HAL_DMAEx_MultiBufferStart_IT+0x28>
 802bf44:	219f      	movs	r1, #159	@ 0x9f
 802bf46:	488d      	ldr	r0, [pc, #564]	@ (802c17c <HAL_DMAEx_MultiBufferStart_IT+0x258>)
 802bf48:	f7fb fed5 	bl	8027cf6 <assert_failed>
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 802bf4c:	68fb      	ldr	r3, [r7, #12]
 802bf4e:	689b      	ldr	r3, [r3, #8]
 802bf50:	2b80      	cmp	r3, #128	@ 0x80
 802bf52:	d106      	bne.n	802bf62 <HAL_DMAEx_MultiBufferStart_IT+0x3e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 802bf54:	68fb      	ldr	r3, [r7, #12]
 802bf56:	f44f 7280 	mov.w	r2, #256	@ 0x100
 802bf5a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 802bf5c:	2301      	movs	r3, #1
 802bf5e:	f001 b92a 	b.w	802d1b6 <HAL_DMAEx_MultiBufferStart_IT+0x1292>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 802bf62:	68fb      	ldr	r3, [r7, #12]
 802bf64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802bf66:	2b00      	cmp	r3, #0
 802bf68:	d007      	beq.n	802bf7a <HAL_DMAEx_MultiBufferStart_IT+0x56>
 802bf6a:	68fb      	ldr	r3, [r7, #12]
 802bf6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802bf6e:	2b00      	cmp	r3, #0
 802bf70:	d003      	beq.n	802bf7a <HAL_DMAEx_MultiBufferStart_IT+0x56>
 802bf72:	68fb      	ldr	r3, [r7, #12]
 802bf74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 802bf76:	2b00      	cmp	r3, #0
 802bf78:	d105      	bne.n	802bf86 <HAL_DMAEx_MultiBufferStart_IT+0x62>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 802bf7a:	68fb      	ldr	r3, [r7, #12]
 802bf7c:	2240      	movs	r2, #64	@ 0x40
 802bf7e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 802bf80:	2301      	movs	r3, #1
 802bf82:	f001 b918 	b.w	802d1b6 <HAL_DMAEx_MultiBufferStart_IT+0x1292>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 802bf86:	68fb      	ldr	r3, [r7, #12]
 802bf88:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 802bf8c:	2b01      	cmp	r3, #1
 802bf8e:	d102      	bne.n	802bf96 <HAL_DMAEx_MultiBufferStart_IT+0x72>
 802bf90:	2302      	movs	r3, #2
 802bf92:	f001 b910 	b.w	802d1b6 <HAL_DMAEx_MultiBufferStart_IT+0x1292>
 802bf96:	68fb      	ldr	r3, [r7, #12]
 802bf98:	2201      	movs	r2, #1
 802bf9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 802bf9e:	68fb      	ldr	r3, [r7, #12]
 802bfa0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 802bfa4:	b2db      	uxtb	r3, r3
 802bfa6:	2b01      	cmp	r3, #1
 802bfa8:	f041 80fe 	bne.w	802d1a8 <HAL_DMAEx_MultiBufferStart_IT+0x1284>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 802bfac:	68fb      	ldr	r3, [r7, #12]
 802bfae:	2202      	movs	r2, #2
 802bfb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 802bfb4:	68fb      	ldr	r3, [r7, #12]
 802bfb6:	2200      	movs	r2, #0
 802bfb8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 802bfba:	68fb      	ldr	r3, [r7, #12]
 802bfbc:	681b      	ldr	r3, [r3, #0]
 802bfbe:	681a      	ldr	r2, [r3, #0]
 802bfc0:	68fb      	ldr	r3, [r7, #12]
 802bfc2:	681b      	ldr	r3, [r3, #0]
 802bfc4:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 802bfc8:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 802bfca:	68fb      	ldr	r3, [r7, #12]
 802bfcc:	681b      	ldr	r3, [r3, #0]
 802bfce:	683a      	ldr	r2, [r7, #0]
 802bfd0:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 802bfd2:	6a3b      	ldr	r3, [r7, #32]
 802bfd4:	687a      	ldr	r2, [r7, #4]
 802bfd6:	68b9      	ldr	r1, [r7, #8]
 802bfd8:	68f8      	ldr	r0, [r7, #12]
 802bfda:	f001 f90d 	bl	802d1f8 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 802bfde:	68fb      	ldr	r3, [r7, #12]
 802bfe0:	681b      	ldr	r3, [r3, #0]
 802bfe2:	461a      	mov	r2, r3
 802bfe4:	4b66      	ldr	r3, [pc, #408]	@ (802c180 <HAL_DMAEx_MultiBufferStart_IT+0x25c>)
 802bfe6:	429a      	cmp	r2, r3
 802bfe8:	d960      	bls.n	802c0ac <HAL_DMAEx_MultiBufferStart_IT+0x188>
 802bfea:	68fb      	ldr	r3, [r7, #12]
 802bfec:	681b      	ldr	r3, [r3, #0]
 802bfee:	4a65      	ldr	r2, [pc, #404]	@ (802c184 <HAL_DMAEx_MultiBufferStart_IT+0x260>)
 802bff0:	4293      	cmp	r3, r2
 802bff2:	d057      	beq.n	802c0a4 <HAL_DMAEx_MultiBufferStart_IT+0x180>
 802bff4:	68fb      	ldr	r3, [r7, #12]
 802bff6:	681b      	ldr	r3, [r3, #0]
 802bff8:	4a63      	ldr	r2, [pc, #396]	@ (802c188 <HAL_DMAEx_MultiBufferStart_IT+0x264>)
 802bffa:	4293      	cmp	r3, r2
 802bffc:	d050      	beq.n	802c0a0 <HAL_DMAEx_MultiBufferStart_IT+0x17c>
 802bffe:	68fb      	ldr	r3, [r7, #12]
 802c000:	681b      	ldr	r3, [r3, #0]
 802c002:	4a62      	ldr	r2, [pc, #392]	@ (802c18c <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 802c004:	4293      	cmp	r3, r2
 802c006:	d049      	beq.n	802c09c <HAL_DMAEx_MultiBufferStart_IT+0x178>
 802c008:	68fb      	ldr	r3, [r7, #12]
 802c00a:	681b      	ldr	r3, [r3, #0]
 802c00c:	4a60      	ldr	r2, [pc, #384]	@ (802c190 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 802c00e:	4293      	cmp	r3, r2
 802c010:	d042      	beq.n	802c098 <HAL_DMAEx_MultiBufferStart_IT+0x174>
 802c012:	68fb      	ldr	r3, [r7, #12]
 802c014:	681b      	ldr	r3, [r3, #0]
 802c016:	4a5f      	ldr	r2, [pc, #380]	@ (802c194 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 802c018:	4293      	cmp	r3, r2
 802c01a:	d03a      	beq.n	802c092 <HAL_DMAEx_MultiBufferStart_IT+0x16e>
 802c01c:	68fb      	ldr	r3, [r7, #12]
 802c01e:	681b      	ldr	r3, [r3, #0]
 802c020:	4a5d      	ldr	r2, [pc, #372]	@ (802c198 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 802c022:	4293      	cmp	r3, r2
 802c024:	d032      	beq.n	802c08c <HAL_DMAEx_MultiBufferStart_IT+0x168>
 802c026:	68fb      	ldr	r3, [r7, #12]
 802c028:	681b      	ldr	r3, [r3, #0]
 802c02a:	4a5c      	ldr	r2, [pc, #368]	@ (802c19c <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 802c02c:	4293      	cmp	r3, r2
 802c02e:	d02a      	beq.n	802c086 <HAL_DMAEx_MultiBufferStart_IT+0x162>
 802c030:	68fb      	ldr	r3, [r7, #12]
 802c032:	681b      	ldr	r3, [r3, #0]
 802c034:	4a5a      	ldr	r2, [pc, #360]	@ (802c1a0 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 802c036:	4293      	cmp	r3, r2
 802c038:	d022      	beq.n	802c080 <HAL_DMAEx_MultiBufferStart_IT+0x15c>
 802c03a:	68fb      	ldr	r3, [r7, #12]
 802c03c:	681b      	ldr	r3, [r3, #0]
 802c03e:	4a59      	ldr	r2, [pc, #356]	@ (802c1a4 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 802c040:	4293      	cmp	r3, r2
 802c042:	d01a      	beq.n	802c07a <HAL_DMAEx_MultiBufferStart_IT+0x156>
 802c044:	68fb      	ldr	r3, [r7, #12]
 802c046:	681b      	ldr	r3, [r3, #0]
 802c048:	4a57      	ldr	r2, [pc, #348]	@ (802c1a8 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 802c04a:	4293      	cmp	r3, r2
 802c04c:	d012      	beq.n	802c074 <HAL_DMAEx_MultiBufferStart_IT+0x150>
 802c04e:	68fb      	ldr	r3, [r7, #12]
 802c050:	681b      	ldr	r3, [r3, #0]
 802c052:	4a56      	ldr	r2, [pc, #344]	@ (802c1ac <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 802c054:	4293      	cmp	r3, r2
 802c056:	d00a      	beq.n	802c06e <HAL_DMAEx_MultiBufferStart_IT+0x14a>
 802c058:	68fb      	ldr	r3, [r7, #12]
 802c05a:	681b      	ldr	r3, [r3, #0]
 802c05c:	4a54      	ldr	r2, [pc, #336]	@ (802c1b0 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 802c05e:	4293      	cmp	r3, r2
 802c060:	d102      	bne.n	802c068 <HAL_DMAEx_MultiBufferStart_IT+0x144>
 802c062:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 802c066:	e01e      	b.n	802c0a6 <HAL_DMAEx_MultiBufferStart_IT+0x182>
 802c068:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 802c06c:	e01b      	b.n	802c0a6 <HAL_DMAEx_MultiBufferStart_IT+0x182>
 802c06e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 802c072:	e018      	b.n	802c0a6 <HAL_DMAEx_MultiBufferStart_IT+0x182>
 802c074:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 802c078:	e015      	b.n	802c0a6 <HAL_DMAEx_MultiBufferStart_IT+0x182>
 802c07a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 802c07e:	e012      	b.n	802c0a6 <HAL_DMAEx_MultiBufferStart_IT+0x182>
 802c080:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 802c084:	e00f      	b.n	802c0a6 <HAL_DMAEx_MultiBufferStart_IT+0x182>
 802c086:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 802c08a:	e00c      	b.n	802c0a6 <HAL_DMAEx_MultiBufferStart_IT+0x182>
 802c08c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 802c090:	e009      	b.n	802c0a6 <HAL_DMAEx_MultiBufferStart_IT+0x182>
 802c092:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 802c096:	e006      	b.n	802c0a6 <HAL_DMAEx_MultiBufferStart_IT+0x182>
 802c098:	2320      	movs	r3, #32
 802c09a:	e004      	b.n	802c0a6 <HAL_DMAEx_MultiBufferStart_IT+0x182>
 802c09c:	2320      	movs	r3, #32
 802c09e:	e002      	b.n	802c0a6 <HAL_DMAEx_MultiBufferStart_IT+0x182>
 802c0a0:	2320      	movs	r3, #32
 802c0a2:	e000      	b.n	802c0a6 <HAL_DMAEx_MultiBufferStart_IT+0x182>
 802c0a4:	2320      	movs	r3, #32
 802c0a6:	4a43      	ldr	r2, [pc, #268]	@ (802c1b4 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 802c0a8:	60d3      	str	r3, [r2, #12]
 802c0aa:	e14e      	b.n	802c34a <HAL_DMAEx_MultiBufferStart_IT+0x426>
 802c0ac:	68fb      	ldr	r3, [r7, #12]
 802c0ae:	681b      	ldr	r3, [r3, #0]
 802c0b0:	461a      	mov	r2, r3
 802c0b2:	4b41      	ldr	r3, [pc, #260]	@ (802c1b8 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 802c0b4:	429a      	cmp	r2, r3
 802c0b6:	f240 8081 	bls.w	802c1bc <HAL_DMAEx_MultiBufferStart_IT+0x298>
 802c0ba:	68fb      	ldr	r3, [r7, #12]
 802c0bc:	681b      	ldr	r3, [r3, #0]
 802c0be:	4a31      	ldr	r2, [pc, #196]	@ (802c184 <HAL_DMAEx_MultiBufferStart_IT+0x260>)
 802c0c0:	4293      	cmp	r3, r2
 802c0c2:	d057      	beq.n	802c174 <HAL_DMAEx_MultiBufferStart_IT+0x250>
 802c0c4:	68fb      	ldr	r3, [r7, #12]
 802c0c6:	681b      	ldr	r3, [r3, #0]
 802c0c8:	4a2f      	ldr	r2, [pc, #188]	@ (802c188 <HAL_DMAEx_MultiBufferStart_IT+0x264>)
 802c0ca:	4293      	cmp	r3, r2
 802c0cc:	d050      	beq.n	802c170 <HAL_DMAEx_MultiBufferStart_IT+0x24c>
 802c0ce:	68fb      	ldr	r3, [r7, #12]
 802c0d0:	681b      	ldr	r3, [r3, #0]
 802c0d2:	4a2e      	ldr	r2, [pc, #184]	@ (802c18c <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 802c0d4:	4293      	cmp	r3, r2
 802c0d6:	d049      	beq.n	802c16c <HAL_DMAEx_MultiBufferStart_IT+0x248>
 802c0d8:	68fb      	ldr	r3, [r7, #12]
 802c0da:	681b      	ldr	r3, [r3, #0]
 802c0dc:	4a2c      	ldr	r2, [pc, #176]	@ (802c190 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 802c0de:	4293      	cmp	r3, r2
 802c0e0:	d042      	beq.n	802c168 <HAL_DMAEx_MultiBufferStart_IT+0x244>
 802c0e2:	68fb      	ldr	r3, [r7, #12]
 802c0e4:	681b      	ldr	r3, [r3, #0]
 802c0e6:	4a2b      	ldr	r2, [pc, #172]	@ (802c194 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 802c0e8:	4293      	cmp	r3, r2
 802c0ea:	d03a      	beq.n	802c162 <HAL_DMAEx_MultiBufferStart_IT+0x23e>
 802c0ec:	68fb      	ldr	r3, [r7, #12]
 802c0ee:	681b      	ldr	r3, [r3, #0]
 802c0f0:	4a29      	ldr	r2, [pc, #164]	@ (802c198 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 802c0f2:	4293      	cmp	r3, r2
 802c0f4:	d032      	beq.n	802c15c <HAL_DMAEx_MultiBufferStart_IT+0x238>
 802c0f6:	68fb      	ldr	r3, [r7, #12]
 802c0f8:	681b      	ldr	r3, [r3, #0]
 802c0fa:	4a28      	ldr	r2, [pc, #160]	@ (802c19c <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 802c0fc:	4293      	cmp	r3, r2
 802c0fe:	d02a      	beq.n	802c156 <HAL_DMAEx_MultiBufferStart_IT+0x232>
 802c100:	68fb      	ldr	r3, [r7, #12]
 802c102:	681b      	ldr	r3, [r3, #0]
 802c104:	4a26      	ldr	r2, [pc, #152]	@ (802c1a0 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 802c106:	4293      	cmp	r3, r2
 802c108:	d022      	beq.n	802c150 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 802c10a:	68fb      	ldr	r3, [r7, #12]
 802c10c:	681b      	ldr	r3, [r3, #0]
 802c10e:	4a25      	ldr	r2, [pc, #148]	@ (802c1a4 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 802c110:	4293      	cmp	r3, r2
 802c112:	d01a      	beq.n	802c14a <HAL_DMAEx_MultiBufferStart_IT+0x226>
 802c114:	68fb      	ldr	r3, [r7, #12]
 802c116:	681b      	ldr	r3, [r3, #0]
 802c118:	4a23      	ldr	r2, [pc, #140]	@ (802c1a8 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 802c11a:	4293      	cmp	r3, r2
 802c11c:	d012      	beq.n	802c144 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 802c11e:	68fb      	ldr	r3, [r7, #12]
 802c120:	681b      	ldr	r3, [r3, #0]
 802c122:	4a22      	ldr	r2, [pc, #136]	@ (802c1ac <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 802c124:	4293      	cmp	r3, r2
 802c126:	d00a      	beq.n	802c13e <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 802c128:	68fb      	ldr	r3, [r7, #12]
 802c12a:	681b      	ldr	r3, [r3, #0]
 802c12c:	4a20      	ldr	r2, [pc, #128]	@ (802c1b0 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 802c12e:	4293      	cmp	r3, r2
 802c130:	d102      	bne.n	802c138 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 802c132:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 802c136:	e01e      	b.n	802c176 <HAL_DMAEx_MultiBufferStart_IT+0x252>
 802c138:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 802c13c:	e01b      	b.n	802c176 <HAL_DMAEx_MultiBufferStart_IT+0x252>
 802c13e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 802c142:	e018      	b.n	802c176 <HAL_DMAEx_MultiBufferStart_IT+0x252>
 802c144:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 802c148:	e015      	b.n	802c176 <HAL_DMAEx_MultiBufferStart_IT+0x252>
 802c14a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 802c14e:	e012      	b.n	802c176 <HAL_DMAEx_MultiBufferStart_IT+0x252>
 802c150:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 802c154:	e00f      	b.n	802c176 <HAL_DMAEx_MultiBufferStart_IT+0x252>
 802c156:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 802c15a:	e00c      	b.n	802c176 <HAL_DMAEx_MultiBufferStart_IT+0x252>
 802c15c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 802c160:	e009      	b.n	802c176 <HAL_DMAEx_MultiBufferStart_IT+0x252>
 802c162:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 802c166:	e006      	b.n	802c176 <HAL_DMAEx_MultiBufferStart_IT+0x252>
 802c168:	2320      	movs	r3, #32
 802c16a:	e004      	b.n	802c176 <HAL_DMAEx_MultiBufferStart_IT+0x252>
 802c16c:	2320      	movs	r3, #32
 802c16e:	e002      	b.n	802c176 <HAL_DMAEx_MultiBufferStart_IT+0x252>
 802c170:	2320      	movs	r3, #32
 802c172:	e000      	b.n	802c176 <HAL_DMAEx_MultiBufferStart_IT+0x252>
 802c174:	2320      	movs	r3, #32
 802c176:	4a0f      	ldr	r2, [pc, #60]	@ (802c1b4 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 802c178:	6093      	str	r3, [r2, #8]
 802c17a:	e0e6      	b.n	802c34a <HAL_DMAEx_MultiBufferStart_IT+0x426>
 802c17c:	080383b8 	.word	0x080383b8
 802c180:	40026458 	.word	0x40026458
 802c184:	40026010 	.word	0x40026010
 802c188:	40026410 	.word	0x40026410
 802c18c:	40026070 	.word	0x40026070
 802c190:	40026470 	.word	0x40026470
 802c194:	40026028 	.word	0x40026028
 802c198:	40026428 	.word	0x40026428
 802c19c:	40026088 	.word	0x40026088
 802c1a0:	40026488 	.word	0x40026488
 802c1a4:	40026040 	.word	0x40026040
 802c1a8:	40026440 	.word	0x40026440
 802c1ac:	400260a0 	.word	0x400260a0
 802c1b0:	400264a0 	.word	0x400264a0
 802c1b4:	40026400 	.word	0x40026400
 802c1b8:	400260b8 	.word	0x400260b8
 802c1bc:	68fb      	ldr	r3, [r7, #12]
 802c1be:	681b      	ldr	r3, [r3, #0]
 802c1c0:	461a      	mov	r2, r3
 802c1c2:	4b8d      	ldr	r3, [pc, #564]	@ (802c3f8 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>)
 802c1c4:	429a      	cmp	r2, r3
 802c1c6:	d960      	bls.n	802c28a <HAL_DMAEx_MultiBufferStart_IT+0x366>
 802c1c8:	68fb      	ldr	r3, [r7, #12]
 802c1ca:	681b      	ldr	r3, [r3, #0]
 802c1cc:	4a8b      	ldr	r2, [pc, #556]	@ (802c3fc <HAL_DMAEx_MultiBufferStart_IT+0x4d8>)
 802c1ce:	4293      	cmp	r3, r2
 802c1d0:	d057      	beq.n	802c282 <HAL_DMAEx_MultiBufferStart_IT+0x35e>
 802c1d2:	68fb      	ldr	r3, [r7, #12]
 802c1d4:	681b      	ldr	r3, [r3, #0]
 802c1d6:	4a8a      	ldr	r2, [pc, #552]	@ (802c400 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>)
 802c1d8:	4293      	cmp	r3, r2
 802c1da:	d050      	beq.n	802c27e <HAL_DMAEx_MultiBufferStart_IT+0x35a>
 802c1dc:	68fb      	ldr	r3, [r7, #12]
 802c1de:	681b      	ldr	r3, [r3, #0]
 802c1e0:	4a88      	ldr	r2, [pc, #544]	@ (802c404 <HAL_DMAEx_MultiBufferStart_IT+0x4e0>)
 802c1e2:	4293      	cmp	r3, r2
 802c1e4:	d049      	beq.n	802c27a <HAL_DMAEx_MultiBufferStart_IT+0x356>
 802c1e6:	68fb      	ldr	r3, [r7, #12]
 802c1e8:	681b      	ldr	r3, [r3, #0]
 802c1ea:	4a87      	ldr	r2, [pc, #540]	@ (802c408 <HAL_DMAEx_MultiBufferStart_IT+0x4e4>)
 802c1ec:	4293      	cmp	r3, r2
 802c1ee:	d042      	beq.n	802c276 <HAL_DMAEx_MultiBufferStart_IT+0x352>
 802c1f0:	68fb      	ldr	r3, [r7, #12]
 802c1f2:	681b      	ldr	r3, [r3, #0]
 802c1f4:	4a85      	ldr	r2, [pc, #532]	@ (802c40c <HAL_DMAEx_MultiBufferStart_IT+0x4e8>)
 802c1f6:	4293      	cmp	r3, r2
 802c1f8:	d03a      	beq.n	802c270 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 802c1fa:	68fb      	ldr	r3, [r7, #12]
 802c1fc:	681b      	ldr	r3, [r3, #0]
 802c1fe:	4a84      	ldr	r2, [pc, #528]	@ (802c410 <HAL_DMAEx_MultiBufferStart_IT+0x4ec>)
 802c200:	4293      	cmp	r3, r2
 802c202:	d032      	beq.n	802c26a <HAL_DMAEx_MultiBufferStart_IT+0x346>
 802c204:	68fb      	ldr	r3, [r7, #12]
 802c206:	681b      	ldr	r3, [r3, #0]
 802c208:	4a82      	ldr	r2, [pc, #520]	@ (802c414 <HAL_DMAEx_MultiBufferStart_IT+0x4f0>)
 802c20a:	4293      	cmp	r3, r2
 802c20c:	d02a      	beq.n	802c264 <HAL_DMAEx_MultiBufferStart_IT+0x340>
 802c20e:	68fb      	ldr	r3, [r7, #12]
 802c210:	681b      	ldr	r3, [r3, #0]
 802c212:	4a81      	ldr	r2, [pc, #516]	@ (802c418 <HAL_DMAEx_MultiBufferStart_IT+0x4f4>)
 802c214:	4293      	cmp	r3, r2
 802c216:	d022      	beq.n	802c25e <HAL_DMAEx_MultiBufferStart_IT+0x33a>
 802c218:	68fb      	ldr	r3, [r7, #12]
 802c21a:	681b      	ldr	r3, [r3, #0]
 802c21c:	4a7f      	ldr	r2, [pc, #508]	@ (802c41c <HAL_DMAEx_MultiBufferStart_IT+0x4f8>)
 802c21e:	4293      	cmp	r3, r2
 802c220:	d01a      	beq.n	802c258 <HAL_DMAEx_MultiBufferStart_IT+0x334>
 802c222:	68fb      	ldr	r3, [r7, #12]
 802c224:	681b      	ldr	r3, [r3, #0]
 802c226:	4a7e      	ldr	r2, [pc, #504]	@ (802c420 <HAL_DMAEx_MultiBufferStart_IT+0x4fc>)
 802c228:	4293      	cmp	r3, r2
 802c22a:	d012      	beq.n	802c252 <HAL_DMAEx_MultiBufferStart_IT+0x32e>
 802c22c:	68fb      	ldr	r3, [r7, #12]
 802c22e:	681b      	ldr	r3, [r3, #0]
 802c230:	4a7c      	ldr	r2, [pc, #496]	@ (802c424 <HAL_DMAEx_MultiBufferStart_IT+0x500>)
 802c232:	4293      	cmp	r3, r2
 802c234:	d00a      	beq.n	802c24c <HAL_DMAEx_MultiBufferStart_IT+0x328>
 802c236:	68fb      	ldr	r3, [r7, #12]
 802c238:	681b      	ldr	r3, [r3, #0]
 802c23a:	4a7b      	ldr	r2, [pc, #492]	@ (802c428 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 802c23c:	4293      	cmp	r3, r2
 802c23e:	d102      	bne.n	802c246 <HAL_DMAEx_MultiBufferStart_IT+0x322>
 802c240:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 802c244:	e01e      	b.n	802c284 <HAL_DMAEx_MultiBufferStart_IT+0x360>
 802c246:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 802c24a:	e01b      	b.n	802c284 <HAL_DMAEx_MultiBufferStart_IT+0x360>
 802c24c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 802c250:	e018      	b.n	802c284 <HAL_DMAEx_MultiBufferStart_IT+0x360>
 802c252:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 802c256:	e015      	b.n	802c284 <HAL_DMAEx_MultiBufferStart_IT+0x360>
 802c258:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 802c25c:	e012      	b.n	802c284 <HAL_DMAEx_MultiBufferStart_IT+0x360>
 802c25e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 802c262:	e00f      	b.n	802c284 <HAL_DMAEx_MultiBufferStart_IT+0x360>
 802c264:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 802c268:	e00c      	b.n	802c284 <HAL_DMAEx_MultiBufferStart_IT+0x360>
 802c26a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 802c26e:	e009      	b.n	802c284 <HAL_DMAEx_MultiBufferStart_IT+0x360>
 802c270:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 802c274:	e006      	b.n	802c284 <HAL_DMAEx_MultiBufferStart_IT+0x360>
 802c276:	2320      	movs	r3, #32
 802c278:	e004      	b.n	802c284 <HAL_DMAEx_MultiBufferStart_IT+0x360>
 802c27a:	2320      	movs	r3, #32
 802c27c:	e002      	b.n	802c284 <HAL_DMAEx_MultiBufferStart_IT+0x360>
 802c27e:	2320      	movs	r3, #32
 802c280:	e000      	b.n	802c284 <HAL_DMAEx_MultiBufferStart_IT+0x360>
 802c282:	2320      	movs	r3, #32
 802c284:	4a69      	ldr	r2, [pc, #420]	@ (802c42c <HAL_DMAEx_MultiBufferStart_IT+0x508>)
 802c286:	60d3      	str	r3, [r2, #12]
 802c288:	e05f      	b.n	802c34a <HAL_DMAEx_MultiBufferStart_IT+0x426>
 802c28a:	68fb      	ldr	r3, [r7, #12]
 802c28c:	681b      	ldr	r3, [r3, #0]
 802c28e:	4a5b      	ldr	r2, [pc, #364]	@ (802c3fc <HAL_DMAEx_MultiBufferStart_IT+0x4d8>)
 802c290:	4293      	cmp	r3, r2
 802c292:	d057      	beq.n	802c344 <HAL_DMAEx_MultiBufferStart_IT+0x420>
 802c294:	68fb      	ldr	r3, [r7, #12]
 802c296:	681b      	ldr	r3, [r3, #0]
 802c298:	4a59      	ldr	r2, [pc, #356]	@ (802c400 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>)
 802c29a:	4293      	cmp	r3, r2
 802c29c:	d050      	beq.n	802c340 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
 802c29e:	68fb      	ldr	r3, [r7, #12]
 802c2a0:	681b      	ldr	r3, [r3, #0]
 802c2a2:	4a58      	ldr	r2, [pc, #352]	@ (802c404 <HAL_DMAEx_MultiBufferStart_IT+0x4e0>)
 802c2a4:	4293      	cmp	r3, r2
 802c2a6:	d049      	beq.n	802c33c <HAL_DMAEx_MultiBufferStart_IT+0x418>
 802c2a8:	68fb      	ldr	r3, [r7, #12]
 802c2aa:	681b      	ldr	r3, [r3, #0]
 802c2ac:	4a56      	ldr	r2, [pc, #344]	@ (802c408 <HAL_DMAEx_MultiBufferStart_IT+0x4e4>)
 802c2ae:	4293      	cmp	r3, r2
 802c2b0:	d042      	beq.n	802c338 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 802c2b2:	68fb      	ldr	r3, [r7, #12]
 802c2b4:	681b      	ldr	r3, [r3, #0]
 802c2b6:	4a55      	ldr	r2, [pc, #340]	@ (802c40c <HAL_DMAEx_MultiBufferStart_IT+0x4e8>)
 802c2b8:	4293      	cmp	r3, r2
 802c2ba:	d03a      	beq.n	802c332 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 802c2bc:	68fb      	ldr	r3, [r7, #12]
 802c2be:	681b      	ldr	r3, [r3, #0]
 802c2c0:	4a53      	ldr	r2, [pc, #332]	@ (802c410 <HAL_DMAEx_MultiBufferStart_IT+0x4ec>)
 802c2c2:	4293      	cmp	r3, r2
 802c2c4:	d032      	beq.n	802c32c <HAL_DMAEx_MultiBufferStart_IT+0x408>
 802c2c6:	68fb      	ldr	r3, [r7, #12]
 802c2c8:	681b      	ldr	r3, [r3, #0]
 802c2ca:	4a52      	ldr	r2, [pc, #328]	@ (802c414 <HAL_DMAEx_MultiBufferStart_IT+0x4f0>)
 802c2cc:	4293      	cmp	r3, r2
 802c2ce:	d02a      	beq.n	802c326 <HAL_DMAEx_MultiBufferStart_IT+0x402>
 802c2d0:	68fb      	ldr	r3, [r7, #12]
 802c2d2:	681b      	ldr	r3, [r3, #0]
 802c2d4:	4a50      	ldr	r2, [pc, #320]	@ (802c418 <HAL_DMAEx_MultiBufferStart_IT+0x4f4>)
 802c2d6:	4293      	cmp	r3, r2
 802c2d8:	d022      	beq.n	802c320 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>
 802c2da:	68fb      	ldr	r3, [r7, #12]
 802c2dc:	681b      	ldr	r3, [r3, #0]
 802c2de:	4a4f      	ldr	r2, [pc, #316]	@ (802c41c <HAL_DMAEx_MultiBufferStart_IT+0x4f8>)
 802c2e0:	4293      	cmp	r3, r2
 802c2e2:	d01a      	beq.n	802c31a <HAL_DMAEx_MultiBufferStart_IT+0x3f6>
 802c2e4:	68fb      	ldr	r3, [r7, #12]
 802c2e6:	681b      	ldr	r3, [r3, #0]
 802c2e8:	4a4d      	ldr	r2, [pc, #308]	@ (802c420 <HAL_DMAEx_MultiBufferStart_IT+0x4fc>)
 802c2ea:	4293      	cmp	r3, r2
 802c2ec:	d012      	beq.n	802c314 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>
 802c2ee:	68fb      	ldr	r3, [r7, #12]
 802c2f0:	681b      	ldr	r3, [r3, #0]
 802c2f2:	4a4c      	ldr	r2, [pc, #304]	@ (802c424 <HAL_DMAEx_MultiBufferStart_IT+0x500>)
 802c2f4:	4293      	cmp	r3, r2
 802c2f6:	d00a      	beq.n	802c30e <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 802c2f8:	68fb      	ldr	r3, [r7, #12]
 802c2fa:	681b      	ldr	r3, [r3, #0]
 802c2fc:	4a4a      	ldr	r2, [pc, #296]	@ (802c428 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 802c2fe:	4293      	cmp	r3, r2
 802c300:	d102      	bne.n	802c308 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>
 802c302:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 802c306:	e01e      	b.n	802c346 <HAL_DMAEx_MultiBufferStart_IT+0x422>
 802c308:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 802c30c:	e01b      	b.n	802c346 <HAL_DMAEx_MultiBufferStart_IT+0x422>
 802c30e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 802c312:	e018      	b.n	802c346 <HAL_DMAEx_MultiBufferStart_IT+0x422>
 802c314:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 802c318:	e015      	b.n	802c346 <HAL_DMAEx_MultiBufferStart_IT+0x422>
 802c31a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 802c31e:	e012      	b.n	802c346 <HAL_DMAEx_MultiBufferStart_IT+0x422>
 802c320:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 802c324:	e00f      	b.n	802c346 <HAL_DMAEx_MultiBufferStart_IT+0x422>
 802c326:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 802c32a:	e00c      	b.n	802c346 <HAL_DMAEx_MultiBufferStart_IT+0x422>
 802c32c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 802c330:	e009      	b.n	802c346 <HAL_DMAEx_MultiBufferStart_IT+0x422>
 802c332:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 802c336:	e006      	b.n	802c346 <HAL_DMAEx_MultiBufferStart_IT+0x422>
 802c338:	2320      	movs	r3, #32
 802c33a:	e004      	b.n	802c346 <HAL_DMAEx_MultiBufferStart_IT+0x422>
 802c33c:	2320      	movs	r3, #32
 802c33e:	e002      	b.n	802c346 <HAL_DMAEx_MultiBufferStart_IT+0x422>
 802c340:	2320      	movs	r3, #32
 802c342:	e000      	b.n	802c346 <HAL_DMAEx_MultiBufferStart_IT+0x422>
 802c344:	2320      	movs	r3, #32
 802c346:	4a39      	ldr	r2, [pc, #228]	@ (802c42c <HAL_DMAEx_MultiBufferStart_IT+0x508>)
 802c348:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 802c34a:	68fb      	ldr	r3, [r7, #12]
 802c34c:	681b      	ldr	r3, [r3, #0]
 802c34e:	461a      	mov	r2, r3
 802c350:	4b37      	ldr	r3, [pc, #220]	@ (802c430 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 802c352:	429a      	cmp	r2, r3
 802c354:	d97e      	bls.n	802c454 <HAL_DMAEx_MultiBufferStart_IT+0x530>
 802c356:	68fb      	ldr	r3, [r7, #12]
 802c358:	681b      	ldr	r3, [r3, #0]
 802c35a:	4a28      	ldr	r2, [pc, #160]	@ (802c3fc <HAL_DMAEx_MultiBufferStart_IT+0x4d8>)
 802c35c:	4293      	cmp	r3, r2
 802c35e:	d075      	beq.n	802c44c <HAL_DMAEx_MultiBufferStart_IT+0x528>
 802c360:	68fb      	ldr	r3, [r7, #12]
 802c362:	681b      	ldr	r3, [r3, #0]
 802c364:	4a26      	ldr	r2, [pc, #152]	@ (802c400 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>)
 802c366:	4293      	cmp	r3, r2
 802c368:	d06e      	beq.n	802c448 <HAL_DMAEx_MultiBufferStart_IT+0x524>
 802c36a:	68fb      	ldr	r3, [r7, #12]
 802c36c:	681b      	ldr	r3, [r3, #0]
 802c36e:	4a25      	ldr	r2, [pc, #148]	@ (802c404 <HAL_DMAEx_MultiBufferStart_IT+0x4e0>)
 802c370:	4293      	cmp	r3, r2
 802c372:	d067      	beq.n	802c444 <HAL_DMAEx_MultiBufferStart_IT+0x520>
 802c374:	68fb      	ldr	r3, [r7, #12]
 802c376:	681b      	ldr	r3, [r3, #0]
 802c378:	4a23      	ldr	r2, [pc, #140]	@ (802c408 <HAL_DMAEx_MultiBufferStart_IT+0x4e4>)
 802c37a:	4293      	cmp	r3, r2
 802c37c:	d060      	beq.n	802c440 <HAL_DMAEx_MultiBufferStart_IT+0x51c>
 802c37e:	68fb      	ldr	r3, [r7, #12]
 802c380:	681b      	ldr	r3, [r3, #0]
 802c382:	4a22      	ldr	r2, [pc, #136]	@ (802c40c <HAL_DMAEx_MultiBufferStart_IT+0x4e8>)
 802c384:	4293      	cmp	r3, r2
 802c386:	d058      	beq.n	802c43a <HAL_DMAEx_MultiBufferStart_IT+0x516>
 802c388:	68fb      	ldr	r3, [r7, #12]
 802c38a:	681b      	ldr	r3, [r3, #0]
 802c38c:	4a20      	ldr	r2, [pc, #128]	@ (802c410 <HAL_DMAEx_MultiBufferStart_IT+0x4ec>)
 802c38e:	4293      	cmp	r3, r2
 802c390:	d050      	beq.n	802c434 <HAL_DMAEx_MultiBufferStart_IT+0x510>
 802c392:	68fb      	ldr	r3, [r7, #12]
 802c394:	681b      	ldr	r3, [r3, #0]
 802c396:	4a1f      	ldr	r2, [pc, #124]	@ (802c414 <HAL_DMAEx_MultiBufferStart_IT+0x4f0>)
 802c398:	4293      	cmp	r3, r2
 802c39a:	d02a      	beq.n	802c3f2 <HAL_DMAEx_MultiBufferStart_IT+0x4ce>
 802c39c:	68fb      	ldr	r3, [r7, #12]
 802c39e:	681b      	ldr	r3, [r3, #0]
 802c3a0:	4a1d      	ldr	r2, [pc, #116]	@ (802c418 <HAL_DMAEx_MultiBufferStart_IT+0x4f4>)
 802c3a2:	4293      	cmp	r3, r2
 802c3a4:	d022      	beq.n	802c3ec <HAL_DMAEx_MultiBufferStart_IT+0x4c8>
 802c3a6:	68fb      	ldr	r3, [r7, #12]
 802c3a8:	681b      	ldr	r3, [r3, #0]
 802c3aa:	4a1c      	ldr	r2, [pc, #112]	@ (802c41c <HAL_DMAEx_MultiBufferStart_IT+0x4f8>)
 802c3ac:	4293      	cmp	r3, r2
 802c3ae:	d01a      	beq.n	802c3e6 <HAL_DMAEx_MultiBufferStart_IT+0x4c2>
 802c3b0:	68fb      	ldr	r3, [r7, #12]
 802c3b2:	681b      	ldr	r3, [r3, #0]
 802c3b4:	4a1a      	ldr	r2, [pc, #104]	@ (802c420 <HAL_DMAEx_MultiBufferStart_IT+0x4fc>)
 802c3b6:	4293      	cmp	r3, r2
 802c3b8:	d012      	beq.n	802c3e0 <HAL_DMAEx_MultiBufferStart_IT+0x4bc>
 802c3ba:	68fb      	ldr	r3, [r7, #12]
 802c3bc:	681b      	ldr	r3, [r3, #0]
 802c3be:	4a19      	ldr	r2, [pc, #100]	@ (802c424 <HAL_DMAEx_MultiBufferStart_IT+0x500>)
 802c3c0:	4293      	cmp	r3, r2
 802c3c2:	d00a      	beq.n	802c3da <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 802c3c4:	68fb      	ldr	r3, [r7, #12]
 802c3c6:	681b      	ldr	r3, [r3, #0]
 802c3c8:	4a17      	ldr	r2, [pc, #92]	@ (802c428 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 802c3ca:	4293      	cmp	r3, r2
 802c3cc:	d102      	bne.n	802c3d4 <HAL_DMAEx_MultiBufferStart_IT+0x4b0>
 802c3ce:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 802c3d2:	e03c      	b.n	802c44e <HAL_DMAEx_MultiBufferStart_IT+0x52a>
 802c3d4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 802c3d8:	e039      	b.n	802c44e <HAL_DMAEx_MultiBufferStart_IT+0x52a>
 802c3da:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 802c3de:	e036      	b.n	802c44e <HAL_DMAEx_MultiBufferStart_IT+0x52a>
 802c3e0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 802c3e4:	e033      	b.n	802c44e <HAL_DMAEx_MultiBufferStart_IT+0x52a>
 802c3e6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 802c3ea:	e030      	b.n	802c44e <HAL_DMAEx_MultiBufferStart_IT+0x52a>
 802c3ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802c3f0:	e02d      	b.n	802c44e <HAL_DMAEx_MultiBufferStart_IT+0x52a>
 802c3f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802c3f6:	e02a      	b.n	802c44e <HAL_DMAEx_MultiBufferStart_IT+0x52a>
 802c3f8:	40026058 	.word	0x40026058
 802c3fc:	40026010 	.word	0x40026010
 802c400:	40026410 	.word	0x40026410
 802c404:	40026070 	.word	0x40026070
 802c408:	40026470 	.word	0x40026470
 802c40c:	40026028 	.word	0x40026028
 802c410:	40026428 	.word	0x40026428
 802c414:	40026088 	.word	0x40026088
 802c418:	40026488 	.word	0x40026488
 802c41c:	40026040 	.word	0x40026040
 802c420:	40026440 	.word	0x40026440
 802c424:	400260a0 	.word	0x400260a0
 802c428:	400264a0 	.word	0x400264a0
 802c42c:	40026000 	.word	0x40026000
 802c430:	40026458 	.word	0x40026458
 802c434:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802c438:	e009      	b.n	802c44e <HAL_DMAEx_MultiBufferStart_IT+0x52a>
 802c43a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802c43e:	e006      	b.n	802c44e <HAL_DMAEx_MultiBufferStart_IT+0x52a>
 802c440:	2310      	movs	r3, #16
 802c442:	e004      	b.n	802c44e <HAL_DMAEx_MultiBufferStart_IT+0x52a>
 802c444:	2310      	movs	r3, #16
 802c446:	e002      	b.n	802c44e <HAL_DMAEx_MultiBufferStart_IT+0x52a>
 802c448:	2310      	movs	r3, #16
 802c44a:	e000      	b.n	802c44e <HAL_DMAEx_MultiBufferStart_IT+0x52a>
 802c44c:	2310      	movs	r3, #16
 802c44e:	4a8c      	ldr	r2, [pc, #560]	@ (802c680 <HAL_DMAEx_MultiBufferStart_IT+0x75c>)
 802c450:	60d3      	str	r3, [r2, #12]
 802c452:	e14d      	b.n	802c6f0 <HAL_DMAEx_MultiBufferStart_IT+0x7cc>
 802c454:	68fb      	ldr	r3, [r7, #12]
 802c456:	681b      	ldr	r3, [r3, #0]
 802c458:	461a      	mov	r2, r3
 802c45a:	4b8a      	ldr	r3, [pc, #552]	@ (802c684 <HAL_DMAEx_MultiBufferStart_IT+0x760>)
 802c45c:	429a      	cmp	r2, r3
 802c45e:	d960      	bls.n	802c522 <HAL_DMAEx_MultiBufferStart_IT+0x5fe>
 802c460:	68fb      	ldr	r3, [r7, #12]
 802c462:	681b      	ldr	r3, [r3, #0]
 802c464:	4a88      	ldr	r2, [pc, #544]	@ (802c688 <HAL_DMAEx_MultiBufferStart_IT+0x764>)
 802c466:	4293      	cmp	r3, r2
 802c468:	d057      	beq.n	802c51a <HAL_DMAEx_MultiBufferStart_IT+0x5f6>
 802c46a:	68fb      	ldr	r3, [r7, #12]
 802c46c:	681b      	ldr	r3, [r3, #0]
 802c46e:	4a87      	ldr	r2, [pc, #540]	@ (802c68c <HAL_DMAEx_MultiBufferStart_IT+0x768>)
 802c470:	4293      	cmp	r3, r2
 802c472:	d050      	beq.n	802c516 <HAL_DMAEx_MultiBufferStart_IT+0x5f2>
 802c474:	68fb      	ldr	r3, [r7, #12]
 802c476:	681b      	ldr	r3, [r3, #0]
 802c478:	4a85      	ldr	r2, [pc, #532]	@ (802c690 <HAL_DMAEx_MultiBufferStart_IT+0x76c>)
 802c47a:	4293      	cmp	r3, r2
 802c47c:	d049      	beq.n	802c512 <HAL_DMAEx_MultiBufferStart_IT+0x5ee>
 802c47e:	68fb      	ldr	r3, [r7, #12]
 802c480:	681b      	ldr	r3, [r3, #0]
 802c482:	4a84      	ldr	r2, [pc, #528]	@ (802c694 <HAL_DMAEx_MultiBufferStart_IT+0x770>)
 802c484:	4293      	cmp	r3, r2
 802c486:	d042      	beq.n	802c50e <HAL_DMAEx_MultiBufferStart_IT+0x5ea>
 802c488:	68fb      	ldr	r3, [r7, #12]
 802c48a:	681b      	ldr	r3, [r3, #0]
 802c48c:	4a82      	ldr	r2, [pc, #520]	@ (802c698 <HAL_DMAEx_MultiBufferStart_IT+0x774>)
 802c48e:	4293      	cmp	r3, r2
 802c490:	d03a      	beq.n	802c508 <HAL_DMAEx_MultiBufferStart_IT+0x5e4>
 802c492:	68fb      	ldr	r3, [r7, #12]
 802c494:	681b      	ldr	r3, [r3, #0]
 802c496:	4a81      	ldr	r2, [pc, #516]	@ (802c69c <HAL_DMAEx_MultiBufferStart_IT+0x778>)
 802c498:	4293      	cmp	r3, r2
 802c49a:	d032      	beq.n	802c502 <HAL_DMAEx_MultiBufferStart_IT+0x5de>
 802c49c:	68fb      	ldr	r3, [r7, #12]
 802c49e:	681b      	ldr	r3, [r3, #0]
 802c4a0:	4a7f      	ldr	r2, [pc, #508]	@ (802c6a0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>)
 802c4a2:	4293      	cmp	r3, r2
 802c4a4:	d02a      	beq.n	802c4fc <HAL_DMAEx_MultiBufferStart_IT+0x5d8>
 802c4a6:	68fb      	ldr	r3, [r7, #12]
 802c4a8:	681b      	ldr	r3, [r3, #0]
 802c4aa:	4a7e      	ldr	r2, [pc, #504]	@ (802c6a4 <HAL_DMAEx_MultiBufferStart_IT+0x780>)
 802c4ac:	4293      	cmp	r3, r2
 802c4ae:	d022      	beq.n	802c4f6 <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
 802c4b0:	68fb      	ldr	r3, [r7, #12]
 802c4b2:	681b      	ldr	r3, [r3, #0]
 802c4b4:	4a7c      	ldr	r2, [pc, #496]	@ (802c6a8 <HAL_DMAEx_MultiBufferStart_IT+0x784>)
 802c4b6:	4293      	cmp	r3, r2
 802c4b8:	d01a      	beq.n	802c4f0 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>
 802c4ba:	68fb      	ldr	r3, [r7, #12]
 802c4bc:	681b      	ldr	r3, [r3, #0]
 802c4be:	4a7b      	ldr	r2, [pc, #492]	@ (802c6ac <HAL_DMAEx_MultiBufferStart_IT+0x788>)
 802c4c0:	4293      	cmp	r3, r2
 802c4c2:	d012      	beq.n	802c4ea <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 802c4c4:	68fb      	ldr	r3, [r7, #12]
 802c4c6:	681b      	ldr	r3, [r3, #0]
 802c4c8:	4a79      	ldr	r2, [pc, #484]	@ (802c6b0 <HAL_DMAEx_MultiBufferStart_IT+0x78c>)
 802c4ca:	4293      	cmp	r3, r2
 802c4cc:	d00a      	beq.n	802c4e4 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>
 802c4ce:	68fb      	ldr	r3, [r7, #12]
 802c4d0:	681b      	ldr	r3, [r3, #0]
 802c4d2:	4a78      	ldr	r2, [pc, #480]	@ (802c6b4 <HAL_DMAEx_MultiBufferStart_IT+0x790>)
 802c4d4:	4293      	cmp	r3, r2
 802c4d6:	d102      	bne.n	802c4de <HAL_DMAEx_MultiBufferStart_IT+0x5ba>
 802c4d8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 802c4dc:	e01e      	b.n	802c51c <HAL_DMAEx_MultiBufferStart_IT+0x5f8>
 802c4de:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 802c4e2:	e01b      	b.n	802c51c <HAL_DMAEx_MultiBufferStart_IT+0x5f8>
 802c4e4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 802c4e8:	e018      	b.n	802c51c <HAL_DMAEx_MultiBufferStart_IT+0x5f8>
 802c4ea:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 802c4ee:	e015      	b.n	802c51c <HAL_DMAEx_MultiBufferStart_IT+0x5f8>
 802c4f0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 802c4f4:	e012      	b.n	802c51c <HAL_DMAEx_MultiBufferStart_IT+0x5f8>
 802c4f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802c4fa:	e00f      	b.n	802c51c <HAL_DMAEx_MultiBufferStart_IT+0x5f8>
 802c4fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802c500:	e00c      	b.n	802c51c <HAL_DMAEx_MultiBufferStart_IT+0x5f8>
 802c502:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802c506:	e009      	b.n	802c51c <HAL_DMAEx_MultiBufferStart_IT+0x5f8>
 802c508:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802c50c:	e006      	b.n	802c51c <HAL_DMAEx_MultiBufferStart_IT+0x5f8>
 802c50e:	2310      	movs	r3, #16
 802c510:	e004      	b.n	802c51c <HAL_DMAEx_MultiBufferStart_IT+0x5f8>
 802c512:	2310      	movs	r3, #16
 802c514:	e002      	b.n	802c51c <HAL_DMAEx_MultiBufferStart_IT+0x5f8>
 802c516:	2310      	movs	r3, #16
 802c518:	e000      	b.n	802c51c <HAL_DMAEx_MultiBufferStart_IT+0x5f8>
 802c51a:	2310      	movs	r3, #16
 802c51c:	4a58      	ldr	r2, [pc, #352]	@ (802c680 <HAL_DMAEx_MultiBufferStart_IT+0x75c>)
 802c51e:	6093      	str	r3, [r2, #8]
 802c520:	e0e6      	b.n	802c6f0 <HAL_DMAEx_MultiBufferStart_IT+0x7cc>
 802c522:	68fb      	ldr	r3, [r7, #12]
 802c524:	681b      	ldr	r3, [r3, #0]
 802c526:	461a      	mov	r2, r3
 802c528:	4b63      	ldr	r3, [pc, #396]	@ (802c6b8 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 802c52a:	429a      	cmp	r2, r3
 802c52c:	d960      	bls.n	802c5f0 <HAL_DMAEx_MultiBufferStart_IT+0x6cc>
 802c52e:	68fb      	ldr	r3, [r7, #12]
 802c530:	681b      	ldr	r3, [r3, #0]
 802c532:	4a55      	ldr	r2, [pc, #340]	@ (802c688 <HAL_DMAEx_MultiBufferStart_IT+0x764>)
 802c534:	4293      	cmp	r3, r2
 802c536:	d057      	beq.n	802c5e8 <HAL_DMAEx_MultiBufferStart_IT+0x6c4>
 802c538:	68fb      	ldr	r3, [r7, #12]
 802c53a:	681b      	ldr	r3, [r3, #0]
 802c53c:	4a53      	ldr	r2, [pc, #332]	@ (802c68c <HAL_DMAEx_MultiBufferStart_IT+0x768>)
 802c53e:	4293      	cmp	r3, r2
 802c540:	d050      	beq.n	802c5e4 <HAL_DMAEx_MultiBufferStart_IT+0x6c0>
 802c542:	68fb      	ldr	r3, [r7, #12]
 802c544:	681b      	ldr	r3, [r3, #0]
 802c546:	4a52      	ldr	r2, [pc, #328]	@ (802c690 <HAL_DMAEx_MultiBufferStart_IT+0x76c>)
 802c548:	4293      	cmp	r3, r2
 802c54a:	d049      	beq.n	802c5e0 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 802c54c:	68fb      	ldr	r3, [r7, #12]
 802c54e:	681b      	ldr	r3, [r3, #0]
 802c550:	4a50      	ldr	r2, [pc, #320]	@ (802c694 <HAL_DMAEx_MultiBufferStart_IT+0x770>)
 802c552:	4293      	cmp	r3, r2
 802c554:	d042      	beq.n	802c5dc <HAL_DMAEx_MultiBufferStart_IT+0x6b8>
 802c556:	68fb      	ldr	r3, [r7, #12]
 802c558:	681b      	ldr	r3, [r3, #0]
 802c55a:	4a4f      	ldr	r2, [pc, #316]	@ (802c698 <HAL_DMAEx_MultiBufferStart_IT+0x774>)
 802c55c:	4293      	cmp	r3, r2
 802c55e:	d03a      	beq.n	802c5d6 <HAL_DMAEx_MultiBufferStart_IT+0x6b2>
 802c560:	68fb      	ldr	r3, [r7, #12]
 802c562:	681b      	ldr	r3, [r3, #0]
 802c564:	4a4d      	ldr	r2, [pc, #308]	@ (802c69c <HAL_DMAEx_MultiBufferStart_IT+0x778>)
 802c566:	4293      	cmp	r3, r2
 802c568:	d032      	beq.n	802c5d0 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>
 802c56a:	68fb      	ldr	r3, [r7, #12]
 802c56c:	681b      	ldr	r3, [r3, #0]
 802c56e:	4a4c      	ldr	r2, [pc, #304]	@ (802c6a0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>)
 802c570:	4293      	cmp	r3, r2
 802c572:	d02a      	beq.n	802c5ca <HAL_DMAEx_MultiBufferStart_IT+0x6a6>
 802c574:	68fb      	ldr	r3, [r7, #12]
 802c576:	681b      	ldr	r3, [r3, #0]
 802c578:	4a4a      	ldr	r2, [pc, #296]	@ (802c6a4 <HAL_DMAEx_MultiBufferStart_IT+0x780>)
 802c57a:	4293      	cmp	r3, r2
 802c57c:	d022      	beq.n	802c5c4 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>
 802c57e:	68fb      	ldr	r3, [r7, #12]
 802c580:	681b      	ldr	r3, [r3, #0]
 802c582:	4a49      	ldr	r2, [pc, #292]	@ (802c6a8 <HAL_DMAEx_MultiBufferStart_IT+0x784>)
 802c584:	4293      	cmp	r3, r2
 802c586:	d01a      	beq.n	802c5be <HAL_DMAEx_MultiBufferStart_IT+0x69a>
 802c588:	68fb      	ldr	r3, [r7, #12]
 802c58a:	681b      	ldr	r3, [r3, #0]
 802c58c:	4a47      	ldr	r2, [pc, #284]	@ (802c6ac <HAL_DMAEx_MultiBufferStart_IT+0x788>)
 802c58e:	4293      	cmp	r3, r2
 802c590:	d012      	beq.n	802c5b8 <HAL_DMAEx_MultiBufferStart_IT+0x694>
 802c592:	68fb      	ldr	r3, [r7, #12]
 802c594:	681b      	ldr	r3, [r3, #0]
 802c596:	4a46      	ldr	r2, [pc, #280]	@ (802c6b0 <HAL_DMAEx_MultiBufferStart_IT+0x78c>)
 802c598:	4293      	cmp	r3, r2
 802c59a:	d00a      	beq.n	802c5b2 <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 802c59c:	68fb      	ldr	r3, [r7, #12]
 802c59e:	681b      	ldr	r3, [r3, #0]
 802c5a0:	4a44      	ldr	r2, [pc, #272]	@ (802c6b4 <HAL_DMAEx_MultiBufferStart_IT+0x790>)
 802c5a2:	4293      	cmp	r3, r2
 802c5a4:	d102      	bne.n	802c5ac <HAL_DMAEx_MultiBufferStart_IT+0x688>
 802c5a6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 802c5aa:	e01e      	b.n	802c5ea <HAL_DMAEx_MultiBufferStart_IT+0x6c6>
 802c5ac:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 802c5b0:	e01b      	b.n	802c5ea <HAL_DMAEx_MultiBufferStart_IT+0x6c6>
 802c5b2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 802c5b6:	e018      	b.n	802c5ea <HAL_DMAEx_MultiBufferStart_IT+0x6c6>
 802c5b8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 802c5bc:	e015      	b.n	802c5ea <HAL_DMAEx_MultiBufferStart_IT+0x6c6>
 802c5be:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 802c5c2:	e012      	b.n	802c5ea <HAL_DMAEx_MultiBufferStart_IT+0x6c6>
 802c5c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802c5c8:	e00f      	b.n	802c5ea <HAL_DMAEx_MultiBufferStart_IT+0x6c6>
 802c5ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802c5ce:	e00c      	b.n	802c5ea <HAL_DMAEx_MultiBufferStart_IT+0x6c6>
 802c5d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802c5d4:	e009      	b.n	802c5ea <HAL_DMAEx_MultiBufferStart_IT+0x6c6>
 802c5d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802c5da:	e006      	b.n	802c5ea <HAL_DMAEx_MultiBufferStart_IT+0x6c6>
 802c5dc:	2310      	movs	r3, #16
 802c5de:	e004      	b.n	802c5ea <HAL_DMAEx_MultiBufferStart_IT+0x6c6>
 802c5e0:	2310      	movs	r3, #16
 802c5e2:	e002      	b.n	802c5ea <HAL_DMAEx_MultiBufferStart_IT+0x6c6>
 802c5e4:	2310      	movs	r3, #16
 802c5e6:	e000      	b.n	802c5ea <HAL_DMAEx_MultiBufferStart_IT+0x6c6>
 802c5e8:	2310      	movs	r3, #16
 802c5ea:	4a34      	ldr	r2, [pc, #208]	@ (802c6bc <HAL_DMAEx_MultiBufferStart_IT+0x798>)
 802c5ec:	60d3      	str	r3, [r2, #12]
 802c5ee:	e07f      	b.n	802c6f0 <HAL_DMAEx_MultiBufferStart_IT+0x7cc>
 802c5f0:	68fb      	ldr	r3, [r7, #12]
 802c5f2:	681b      	ldr	r3, [r3, #0]
 802c5f4:	4a24      	ldr	r2, [pc, #144]	@ (802c688 <HAL_DMAEx_MultiBufferStart_IT+0x764>)
 802c5f6:	4293      	cmp	r3, r2
 802c5f8:	d077      	beq.n	802c6ea <HAL_DMAEx_MultiBufferStart_IT+0x7c6>
 802c5fa:	68fb      	ldr	r3, [r7, #12]
 802c5fc:	681b      	ldr	r3, [r3, #0]
 802c5fe:	4a23      	ldr	r2, [pc, #140]	@ (802c68c <HAL_DMAEx_MultiBufferStart_IT+0x768>)
 802c600:	4293      	cmp	r3, r2
 802c602:	d070      	beq.n	802c6e6 <HAL_DMAEx_MultiBufferStart_IT+0x7c2>
 802c604:	68fb      	ldr	r3, [r7, #12]
 802c606:	681b      	ldr	r3, [r3, #0]
 802c608:	4a21      	ldr	r2, [pc, #132]	@ (802c690 <HAL_DMAEx_MultiBufferStart_IT+0x76c>)
 802c60a:	4293      	cmp	r3, r2
 802c60c:	d069      	beq.n	802c6e2 <HAL_DMAEx_MultiBufferStart_IT+0x7be>
 802c60e:	68fb      	ldr	r3, [r7, #12]
 802c610:	681b      	ldr	r3, [r3, #0]
 802c612:	4a20      	ldr	r2, [pc, #128]	@ (802c694 <HAL_DMAEx_MultiBufferStart_IT+0x770>)
 802c614:	4293      	cmp	r3, r2
 802c616:	d062      	beq.n	802c6de <HAL_DMAEx_MultiBufferStart_IT+0x7ba>
 802c618:	68fb      	ldr	r3, [r7, #12]
 802c61a:	681b      	ldr	r3, [r3, #0]
 802c61c:	4a1e      	ldr	r2, [pc, #120]	@ (802c698 <HAL_DMAEx_MultiBufferStart_IT+0x774>)
 802c61e:	4293      	cmp	r3, r2
 802c620:	d05a      	beq.n	802c6d8 <HAL_DMAEx_MultiBufferStart_IT+0x7b4>
 802c622:	68fb      	ldr	r3, [r7, #12]
 802c624:	681b      	ldr	r3, [r3, #0]
 802c626:	4a1d      	ldr	r2, [pc, #116]	@ (802c69c <HAL_DMAEx_MultiBufferStart_IT+0x778>)
 802c628:	4293      	cmp	r3, r2
 802c62a:	d052      	beq.n	802c6d2 <HAL_DMAEx_MultiBufferStart_IT+0x7ae>
 802c62c:	68fb      	ldr	r3, [r7, #12]
 802c62e:	681b      	ldr	r3, [r3, #0]
 802c630:	4a1b      	ldr	r2, [pc, #108]	@ (802c6a0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>)
 802c632:	4293      	cmp	r3, r2
 802c634:	d04a      	beq.n	802c6cc <HAL_DMAEx_MultiBufferStart_IT+0x7a8>
 802c636:	68fb      	ldr	r3, [r7, #12]
 802c638:	681b      	ldr	r3, [r3, #0]
 802c63a:	4a1a      	ldr	r2, [pc, #104]	@ (802c6a4 <HAL_DMAEx_MultiBufferStart_IT+0x780>)
 802c63c:	4293      	cmp	r3, r2
 802c63e:	d042      	beq.n	802c6c6 <HAL_DMAEx_MultiBufferStart_IT+0x7a2>
 802c640:	68fb      	ldr	r3, [r7, #12]
 802c642:	681b      	ldr	r3, [r3, #0]
 802c644:	4a18      	ldr	r2, [pc, #96]	@ (802c6a8 <HAL_DMAEx_MultiBufferStart_IT+0x784>)
 802c646:	4293      	cmp	r3, r2
 802c648:	d03a      	beq.n	802c6c0 <HAL_DMAEx_MultiBufferStart_IT+0x79c>
 802c64a:	68fb      	ldr	r3, [r7, #12]
 802c64c:	681b      	ldr	r3, [r3, #0]
 802c64e:	4a17      	ldr	r2, [pc, #92]	@ (802c6ac <HAL_DMAEx_MultiBufferStart_IT+0x788>)
 802c650:	4293      	cmp	r3, r2
 802c652:	d012      	beq.n	802c67a <HAL_DMAEx_MultiBufferStart_IT+0x756>
 802c654:	68fb      	ldr	r3, [r7, #12]
 802c656:	681b      	ldr	r3, [r3, #0]
 802c658:	4a15      	ldr	r2, [pc, #84]	@ (802c6b0 <HAL_DMAEx_MultiBufferStart_IT+0x78c>)
 802c65a:	4293      	cmp	r3, r2
 802c65c:	d00a      	beq.n	802c674 <HAL_DMAEx_MultiBufferStart_IT+0x750>
 802c65e:	68fb      	ldr	r3, [r7, #12]
 802c660:	681b      	ldr	r3, [r3, #0]
 802c662:	4a14      	ldr	r2, [pc, #80]	@ (802c6b4 <HAL_DMAEx_MultiBufferStart_IT+0x790>)
 802c664:	4293      	cmp	r3, r2
 802c666:	d102      	bne.n	802c66e <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 802c668:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 802c66c:	e03e      	b.n	802c6ec <HAL_DMAEx_MultiBufferStart_IT+0x7c8>
 802c66e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 802c672:	e03b      	b.n	802c6ec <HAL_DMAEx_MultiBufferStart_IT+0x7c8>
 802c674:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 802c678:	e038      	b.n	802c6ec <HAL_DMAEx_MultiBufferStart_IT+0x7c8>
 802c67a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 802c67e:	e035      	b.n	802c6ec <HAL_DMAEx_MultiBufferStart_IT+0x7c8>
 802c680:	40026400 	.word	0x40026400
 802c684:	400260b8 	.word	0x400260b8
 802c688:	40026010 	.word	0x40026010
 802c68c:	40026410 	.word	0x40026410
 802c690:	40026070 	.word	0x40026070
 802c694:	40026470 	.word	0x40026470
 802c698:	40026028 	.word	0x40026028
 802c69c:	40026428 	.word	0x40026428
 802c6a0:	40026088 	.word	0x40026088
 802c6a4:	40026488 	.word	0x40026488
 802c6a8:	40026040 	.word	0x40026040
 802c6ac:	40026440 	.word	0x40026440
 802c6b0:	400260a0 	.word	0x400260a0
 802c6b4:	400264a0 	.word	0x400264a0
 802c6b8:	40026058 	.word	0x40026058
 802c6bc:	40026000 	.word	0x40026000
 802c6c0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 802c6c4:	e012      	b.n	802c6ec <HAL_DMAEx_MultiBufferStart_IT+0x7c8>
 802c6c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802c6ca:	e00f      	b.n	802c6ec <HAL_DMAEx_MultiBufferStart_IT+0x7c8>
 802c6cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802c6d0:	e00c      	b.n	802c6ec <HAL_DMAEx_MultiBufferStart_IT+0x7c8>
 802c6d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802c6d6:	e009      	b.n	802c6ec <HAL_DMAEx_MultiBufferStart_IT+0x7c8>
 802c6d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802c6dc:	e006      	b.n	802c6ec <HAL_DMAEx_MultiBufferStart_IT+0x7c8>
 802c6de:	2310      	movs	r3, #16
 802c6e0:	e004      	b.n	802c6ec <HAL_DMAEx_MultiBufferStart_IT+0x7c8>
 802c6e2:	2310      	movs	r3, #16
 802c6e4:	e002      	b.n	802c6ec <HAL_DMAEx_MultiBufferStart_IT+0x7c8>
 802c6e6:	2310      	movs	r3, #16
 802c6e8:	e000      	b.n	802c6ec <HAL_DMAEx_MultiBufferStart_IT+0x7c8>
 802c6ea:	2310      	movs	r3, #16
 802c6ec:	4a8a      	ldr	r2, [pc, #552]	@ (802c918 <HAL_DMAEx_MultiBufferStart_IT+0x9f4>)
 802c6ee:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 802c6f0:	68fb      	ldr	r3, [r7, #12]
 802c6f2:	681b      	ldr	r3, [r3, #0]
 802c6f4:	461a      	mov	r2, r3
 802c6f6:	4b89      	ldr	r3, [pc, #548]	@ (802c91c <HAL_DMAEx_MultiBufferStart_IT+0x9f8>)
 802c6f8:	429a      	cmp	r2, r3
 802c6fa:	d960      	bls.n	802c7be <HAL_DMAEx_MultiBufferStart_IT+0x89a>
 802c6fc:	68fb      	ldr	r3, [r7, #12]
 802c6fe:	681b      	ldr	r3, [r3, #0]
 802c700:	4a87      	ldr	r2, [pc, #540]	@ (802c920 <HAL_DMAEx_MultiBufferStart_IT+0x9fc>)
 802c702:	4293      	cmp	r3, r2
 802c704:	d057      	beq.n	802c7b6 <HAL_DMAEx_MultiBufferStart_IT+0x892>
 802c706:	68fb      	ldr	r3, [r7, #12]
 802c708:	681b      	ldr	r3, [r3, #0]
 802c70a:	4a86      	ldr	r2, [pc, #536]	@ (802c924 <HAL_DMAEx_MultiBufferStart_IT+0xa00>)
 802c70c:	4293      	cmp	r3, r2
 802c70e:	d050      	beq.n	802c7b2 <HAL_DMAEx_MultiBufferStart_IT+0x88e>
 802c710:	68fb      	ldr	r3, [r7, #12]
 802c712:	681b      	ldr	r3, [r3, #0]
 802c714:	4a84      	ldr	r2, [pc, #528]	@ (802c928 <HAL_DMAEx_MultiBufferStart_IT+0xa04>)
 802c716:	4293      	cmp	r3, r2
 802c718:	d049      	beq.n	802c7ae <HAL_DMAEx_MultiBufferStart_IT+0x88a>
 802c71a:	68fb      	ldr	r3, [r7, #12]
 802c71c:	681b      	ldr	r3, [r3, #0]
 802c71e:	4a83      	ldr	r2, [pc, #524]	@ (802c92c <HAL_DMAEx_MultiBufferStart_IT+0xa08>)
 802c720:	4293      	cmp	r3, r2
 802c722:	d042      	beq.n	802c7aa <HAL_DMAEx_MultiBufferStart_IT+0x886>
 802c724:	68fb      	ldr	r3, [r7, #12]
 802c726:	681b      	ldr	r3, [r3, #0]
 802c728:	4a81      	ldr	r2, [pc, #516]	@ (802c930 <HAL_DMAEx_MultiBufferStart_IT+0xa0c>)
 802c72a:	4293      	cmp	r3, r2
 802c72c:	d03a      	beq.n	802c7a4 <HAL_DMAEx_MultiBufferStart_IT+0x880>
 802c72e:	68fb      	ldr	r3, [r7, #12]
 802c730:	681b      	ldr	r3, [r3, #0]
 802c732:	4a80      	ldr	r2, [pc, #512]	@ (802c934 <HAL_DMAEx_MultiBufferStart_IT+0xa10>)
 802c734:	4293      	cmp	r3, r2
 802c736:	d032      	beq.n	802c79e <HAL_DMAEx_MultiBufferStart_IT+0x87a>
 802c738:	68fb      	ldr	r3, [r7, #12]
 802c73a:	681b      	ldr	r3, [r3, #0]
 802c73c:	4a7e      	ldr	r2, [pc, #504]	@ (802c938 <HAL_DMAEx_MultiBufferStart_IT+0xa14>)
 802c73e:	4293      	cmp	r3, r2
 802c740:	d02a      	beq.n	802c798 <HAL_DMAEx_MultiBufferStart_IT+0x874>
 802c742:	68fb      	ldr	r3, [r7, #12]
 802c744:	681b      	ldr	r3, [r3, #0]
 802c746:	4a7d      	ldr	r2, [pc, #500]	@ (802c93c <HAL_DMAEx_MultiBufferStart_IT+0xa18>)
 802c748:	4293      	cmp	r3, r2
 802c74a:	d022      	beq.n	802c792 <HAL_DMAEx_MultiBufferStart_IT+0x86e>
 802c74c:	68fb      	ldr	r3, [r7, #12]
 802c74e:	681b      	ldr	r3, [r3, #0]
 802c750:	4a7b      	ldr	r2, [pc, #492]	@ (802c940 <HAL_DMAEx_MultiBufferStart_IT+0xa1c>)
 802c752:	4293      	cmp	r3, r2
 802c754:	d01a      	beq.n	802c78c <HAL_DMAEx_MultiBufferStart_IT+0x868>
 802c756:	68fb      	ldr	r3, [r7, #12]
 802c758:	681b      	ldr	r3, [r3, #0]
 802c75a:	4a7a      	ldr	r2, [pc, #488]	@ (802c944 <HAL_DMAEx_MultiBufferStart_IT+0xa20>)
 802c75c:	4293      	cmp	r3, r2
 802c75e:	d012      	beq.n	802c786 <HAL_DMAEx_MultiBufferStart_IT+0x862>
 802c760:	68fb      	ldr	r3, [r7, #12]
 802c762:	681b      	ldr	r3, [r3, #0]
 802c764:	4a78      	ldr	r2, [pc, #480]	@ (802c948 <HAL_DMAEx_MultiBufferStart_IT+0xa24>)
 802c766:	4293      	cmp	r3, r2
 802c768:	d00a      	beq.n	802c780 <HAL_DMAEx_MultiBufferStart_IT+0x85c>
 802c76a:	68fb      	ldr	r3, [r7, #12]
 802c76c:	681b      	ldr	r3, [r3, #0]
 802c76e:	4a77      	ldr	r2, [pc, #476]	@ (802c94c <HAL_DMAEx_MultiBufferStart_IT+0xa28>)
 802c770:	4293      	cmp	r3, r2
 802c772:	d102      	bne.n	802c77a <HAL_DMAEx_MultiBufferStart_IT+0x856>
 802c774:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 802c778:	e01e      	b.n	802c7b8 <HAL_DMAEx_MultiBufferStart_IT+0x894>
 802c77a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 802c77e:	e01b      	b.n	802c7b8 <HAL_DMAEx_MultiBufferStart_IT+0x894>
 802c780:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 802c784:	e018      	b.n	802c7b8 <HAL_DMAEx_MultiBufferStart_IT+0x894>
 802c786:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 802c78a:	e015      	b.n	802c7b8 <HAL_DMAEx_MultiBufferStart_IT+0x894>
 802c78c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 802c790:	e012      	b.n	802c7b8 <HAL_DMAEx_MultiBufferStart_IT+0x894>
 802c792:	f44f 7300 	mov.w	r3, #512	@ 0x200
 802c796:	e00f      	b.n	802c7b8 <HAL_DMAEx_MultiBufferStart_IT+0x894>
 802c798:	f44f 7300 	mov.w	r3, #512	@ 0x200
 802c79c:	e00c      	b.n	802c7b8 <HAL_DMAEx_MultiBufferStart_IT+0x894>
 802c79e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 802c7a2:	e009      	b.n	802c7b8 <HAL_DMAEx_MultiBufferStart_IT+0x894>
 802c7a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 802c7a8:	e006      	b.n	802c7b8 <HAL_DMAEx_MultiBufferStart_IT+0x894>
 802c7aa:	2308      	movs	r3, #8
 802c7ac:	e004      	b.n	802c7b8 <HAL_DMAEx_MultiBufferStart_IT+0x894>
 802c7ae:	2308      	movs	r3, #8
 802c7b0:	e002      	b.n	802c7b8 <HAL_DMAEx_MultiBufferStart_IT+0x894>
 802c7b2:	2308      	movs	r3, #8
 802c7b4:	e000      	b.n	802c7b8 <HAL_DMAEx_MultiBufferStart_IT+0x894>
 802c7b6:	2308      	movs	r3, #8
 802c7b8:	4a65      	ldr	r2, [pc, #404]	@ (802c950 <HAL_DMAEx_MultiBufferStart_IT+0xa2c>)
 802c7ba:	60d3      	str	r3, [r2, #12]
 802c7bc:	e150      	b.n	802ca60 <HAL_DMAEx_MultiBufferStart_IT+0xb3c>
 802c7be:	68fb      	ldr	r3, [r7, #12]
 802c7c0:	681b      	ldr	r3, [r3, #0]
 802c7c2:	461a      	mov	r2, r3
 802c7c4:	4b63      	ldr	r3, [pc, #396]	@ (802c954 <HAL_DMAEx_MultiBufferStart_IT+0xa30>)
 802c7c6:	429a      	cmp	r2, r3
 802c7c8:	d960      	bls.n	802c88c <HAL_DMAEx_MultiBufferStart_IT+0x968>
 802c7ca:	68fb      	ldr	r3, [r7, #12]
 802c7cc:	681b      	ldr	r3, [r3, #0]
 802c7ce:	4a54      	ldr	r2, [pc, #336]	@ (802c920 <HAL_DMAEx_MultiBufferStart_IT+0x9fc>)
 802c7d0:	4293      	cmp	r3, r2
 802c7d2:	d057      	beq.n	802c884 <HAL_DMAEx_MultiBufferStart_IT+0x960>
 802c7d4:	68fb      	ldr	r3, [r7, #12]
 802c7d6:	681b      	ldr	r3, [r3, #0]
 802c7d8:	4a52      	ldr	r2, [pc, #328]	@ (802c924 <HAL_DMAEx_MultiBufferStart_IT+0xa00>)
 802c7da:	4293      	cmp	r3, r2
 802c7dc:	d050      	beq.n	802c880 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 802c7de:	68fb      	ldr	r3, [r7, #12]
 802c7e0:	681b      	ldr	r3, [r3, #0]
 802c7e2:	4a51      	ldr	r2, [pc, #324]	@ (802c928 <HAL_DMAEx_MultiBufferStart_IT+0xa04>)
 802c7e4:	4293      	cmp	r3, r2
 802c7e6:	d049      	beq.n	802c87c <HAL_DMAEx_MultiBufferStart_IT+0x958>
 802c7e8:	68fb      	ldr	r3, [r7, #12]
 802c7ea:	681b      	ldr	r3, [r3, #0]
 802c7ec:	4a4f      	ldr	r2, [pc, #316]	@ (802c92c <HAL_DMAEx_MultiBufferStart_IT+0xa08>)
 802c7ee:	4293      	cmp	r3, r2
 802c7f0:	d042      	beq.n	802c878 <HAL_DMAEx_MultiBufferStart_IT+0x954>
 802c7f2:	68fb      	ldr	r3, [r7, #12]
 802c7f4:	681b      	ldr	r3, [r3, #0]
 802c7f6:	4a4e      	ldr	r2, [pc, #312]	@ (802c930 <HAL_DMAEx_MultiBufferStart_IT+0xa0c>)
 802c7f8:	4293      	cmp	r3, r2
 802c7fa:	d03a      	beq.n	802c872 <HAL_DMAEx_MultiBufferStart_IT+0x94e>
 802c7fc:	68fb      	ldr	r3, [r7, #12]
 802c7fe:	681b      	ldr	r3, [r3, #0]
 802c800:	4a4c      	ldr	r2, [pc, #304]	@ (802c934 <HAL_DMAEx_MultiBufferStart_IT+0xa10>)
 802c802:	4293      	cmp	r3, r2
 802c804:	d032      	beq.n	802c86c <HAL_DMAEx_MultiBufferStart_IT+0x948>
 802c806:	68fb      	ldr	r3, [r7, #12]
 802c808:	681b      	ldr	r3, [r3, #0]
 802c80a:	4a4b      	ldr	r2, [pc, #300]	@ (802c938 <HAL_DMAEx_MultiBufferStart_IT+0xa14>)
 802c80c:	4293      	cmp	r3, r2
 802c80e:	d02a      	beq.n	802c866 <HAL_DMAEx_MultiBufferStart_IT+0x942>
 802c810:	68fb      	ldr	r3, [r7, #12]
 802c812:	681b      	ldr	r3, [r3, #0]
 802c814:	4a49      	ldr	r2, [pc, #292]	@ (802c93c <HAL_DMAEx_MultiBufferStart_IT+0xa18>)
 802c816:	4293      	cmp	r3, r2
 802c818:	d022      	beq.n	802c860 <HAL_DMAEx_MultiBufferStart_IT+0x93c>
 802c81a:	68fb      	ldr	r3, [r7, #12]
 802c81c:	681b      	ldr	r3, [r3, #0]
 802c81e:	4a48      	ldr	r2, [pc, #288]	@ (802c940 <HAL_DMAEx_MultiBufferStart_IT+0xa1c>)
 802c820:	4293      	cmp	r3, r2
 802c822:	d01a      	beq.n	802c85a <HAL_DMAEx_MultiBufferStart_IT+0x936>
 802c824:	68fb      	ldr	r3, [r7, #12]
 802c826:	681b      	ldr	r3, [r3, #0]
 802c828:	4a46      	ldr	r2, [pc, #280]	@ (802c944 <HAL_DMAEx_MultiBufferStart_IT+0xa20>)
 802c82a:	4293      	cmp	r3, r2
 802c82c:	d012      	beq.n	802c854 <HAL_DMAEx_MultiBufferStart_IT+0x930>
 802c82e:	68fb      	ldr	r3, [r7, #12]
 802c830:	681b      	ldr	r3, [r3, #0]
 802c832:	4a45      	ldr	r2, [pc, #276]	@ (802c948 <HAL_DMAEx_MultiBufferStart_IT+0xa24>)
 802c834:	4293      	cmp	r3, r2
 802c836:	d00a      	beq.n	802c84e <HAL_DMAEx_MultiBufferStart_IT+0x92a>
 802c838:	68fb      	ldr	r3, [r7, #12]
 802c83a:	681b      	ldr	r3, [r3, #0]
 802c83c:	4a43      	ldr	r2, [pc, #268]	@ (802c94c <HAL_DMAEx_MultiBufferStart_IT+0xa28>)
 802c83e:	4293      	cmp	r3, r2
 802c840:	d102      	bne.n	802c848 <HAL_DMAEx_MultiBufferStart_IT+0x924>
 802c842:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 802c846:	e01e      	b.n	802c886 <HAL_DMAEx_MultiBufferStart_IT+0x962>
 802c848:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 802c84c:	e01b      	b.n	802c886 <HAL_DMAEx_MultiBufferStart_IT+0x962>
 802c84e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 802c852:	e018      	b.n	802c886 <HAL_DMAEx_MultiBufferStart_IT+0x962>
 802c854:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 802c858:	e015      	b.n	802c886 <HAL_DMAEx_MultiBufferStart_IT+0x962>
 802c85a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 802c85e:	e012      	b.n	802c886 <HAL_DMAEx_MultiBufferStart_IT+0x962>
 802c860:	f44f 7300 	mov.w	r3, #512	@ 0x200
 802c864:	e00f      	b.n	802c886 <HAL_DMAEx_MultiBufferStart_IT+0x962>
 802c866:	f44f 7300 	mov.w	r3, #512	@ 0x200
 802c86a:	e00c      	b.n	802c886 <HAL_DMAEx_MultiBufferStart_IT+0x962>
 802c86c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 802c870:	e009      	b.n	802c886 <HAL_DMAEx_MultiBufferStart_IT+0x962>
 802c872:	f44f 7300 	mov.w	r3, #512	@ 0x200
 802c876:	e006      	b.n	802c886 <HAL_DMAEx_MultiBufferStart_IT+0x962>
 802c878:	2308      	movs	r3, #8
 802c87a:	e004      	b.n	802c886 <HAL_DMAEx_MultiBufferStart_IT+0x962>
 802c87c:	2308      	movs	r3, #8
 802c87e:	e002      	b.n	802c886 <HAL_DMAEx_MultiBufferStart_IT+0x962>
 802c880:	2308      	movs	r3, #8
 802c882:	e000      	b.n	802c886 <HAL_DMAEx_MultiBufferStart_IT+0x962>
 802c884:	2308      	movs	r3, #8
 802c886:	4a32      	ldr	r2, [pc, #200]	@ (802c950 <HAL_DMAEx_MultiBufferStart_IT+0xa2c>)
 802c888:	6093      	str	r3, [r2, #8]
 802c88a:	e0e9      	b.n	802ca60 <HAL_DMAEx_MultiBufferStart_IT+0xb3c>
 802c88c:	68fb      	ldr	r3, [r7, #12]
 802c88e:	681b      	ldr	r3, [r3, #0]
 802c890:	461a      	mov	r2, r3
 802c892:	4b31      	ldr	r3, [pc, #196]	@ (802c958 <HAL_DMAEx_MultiBufferStart_IT+0xa34>)
 802c894:	429a      	cmp	r2, r3
 802c896:	f240 8083 	bls.w	802c9a0 <HAL_DMAEx_MultiBufferStart_IT+0xa7c>
 802c89a:	68fb      	ldr	r3, [r7, #12]
 802c89c:	681b      	ldr	r3, [r3, #0]
 802c89e:	4a20      	ldr	r2, [pc, #128]	@ (802c920 <HAL_DMAEx_MultiBufferStart_IT+0x9fc>)
 802c8a0:	4293      	cmp	r3, r2
 802c8a2:	d079      	beq.n	802c998 <HAL_DMAEx_MultiBufferStart_IT+0xa74>
 802c8a4:	68fb      	ldr	r3, [r7, #12]
 802c8a6:	681b      	ldr	r3, [r3, #0]
 802c8a8:	4a1e      	ldr	r2, [pc, #120]	@ (802c924 <HAL_DMAEx_MultiBufferStart_IT+0xa00>)
 802c8aa:	4293      	cmp	r3, r2
 802c8ac:	d072      	beq.n	802c994 <HAL_DMAEx_MultiBufferStart_IT+0xa70>
 802c8ae:	68fb      	ldr	r3, [r7, #12]
 802c8b0:	681b      	ldr	r3, [r3, #0]
 802c8b2:	4a1d      	ldr	r2, [pc, #116]	@ (802c928 <HAL_DMAEx_MultiBufferStart_IT+0xa04>)
 802c8b4:	4293      	cmp	r3, r2
 802c8b6:	d06b      	beq.n	802c990 <HAL_DMAEx_MultiBufferStart_IT+0xa6c>
 802c8b8:	68fb      	ldr	r3, [r7, #12]
 802c8ba:	681b      	ldr	r3, [r3, #0]
 802c8bc:	4a1b      	ldr	r2, [pc, #108]	@ (802c92c <HAL_DMAEx_MultiBufferStart_IT+0xa08>)
 802c8be:	4293      	cmp	r3, r2
 802c8c0:	d064      	beq.n	802c98c <HAL_DMAEx_MultiBufferStart_IT+0xa68>
 802c8c2:	68fb      	ldr	r3, [r7, #12]
 802c8c4:	681b      	ldr	r3, [r3, #0]
 802c8c6:	4a1a      	ldr	r2, [pc, #104]	@ (802c930 <HAL_DMAEx_MultiBufferStart_IT+0xa0c>)
 802c8c8:	4293      	cmp	r3, r2
 802c8ca:	d05c      	beq.n	802c986 <HAL_DMAEx_MultiBufferStart_IT+0xa62>
 802c8cc:	68fb      	ldr	r3, [r7, #12]
 802c8ce:	681b      	ldr	r3, [r3, #0]
 802c8d0:	4a18      	ldr	r2, [pc, #96]	@ (802c934 <HAL_DMAEx_MultiBufferStart_IT+0xa10>)
 802c8d2:	4293      	cmp	r3, r2
 802c8d4:	d054      	beq.n	802c980 <HAL_DMAEx_MultiBufferStart_IT+0xa5c>
 802c8d6:	68fb      	ldr	r3, [r7, #12]
 802c8d8:	681b      	ldr	r3, [r3, #0]
 802c8da:	4a17      	ldr	r2, [pc, #92]	@ (802c938 <HAL_DMAEx_MultiBufferStart_IT+0xa14>)
 802c8dc:	4293      	cmp	r3, r2
 802c8de:	d04c      	beq.n	802c97a <HAL_DMAEx_MultiBufferStart_IT+0xa56>
 802c8e0:	68fb      	ldr	r3, [r7, #12]
 802c8e2:	681b      	ldr	r3, [r3, #0]
 802c8e4:	4a15      	ldr	r2, [pc, #84]	@ (802c93c <HAL_DMAEx_MultiBufferStart_IT+0xa18>)
 802c8e6:	4293      	cmp	r3, r2
 802c8e8:	d044      	beq.n	802c974 <HAL_DMAEx_MultiBufferStart_IT+0xa50>
 802c8ea:	68fb      	ldr	r3, [r7, #12]
 802c8ec:	681b      	ldr	r3, [r3, #0]
 802c8ee:	4a14      	ldr	r2, [pc, #80]	@ (802c940 <HAL_DMAEx_MultiBufferStart_IT+0xa1c>)
 802c8f0:	4293      	cmp	r3, r2
 802c8f2:	d03c      	beq.n	802c96e <HAL_DMAEx_MultiBufferStart_IT+0xa4a>
 802c8f4:	68fb      	ldr	r3, [r7, #12]
 802c8f6:	681b      	ldr	r3, [r3, #0]
 802c8f8:	4a12      	ldr	r2, [pc, #72]	@ (802c944 <HAL_DMAEx_MultiBufferStart_IT+0xa20>)
 802c8fa:	4293      	cmp	r3, r2
 802c8fc:	d034      	beq.n	802c968 <HAL_DMAEx_MultiBufferStart_IT+0xa44>
 802c8fe:	68fb      	ldr	r3, [r7, #12]
 802c900:	681b      	ldr	r3, [r3, #0]
 802c902:	4a11      	ldr	r2, [pc, #68]	@ (802c948 <HAL_DMAEx_MultiBufferStart_IT+0xa24>)
 802c904:	4293      	cmp	r3, r2
 802c906:	d02c      	beq.n	802c962 <HAL_DMAEx_MultiBufferStart_IT+0xa3e>
 802c908:	68fb      	ldr	r3, [r7, #12]
 802c90a:	681b      	ldr	r3, [r3, #0]
 802c90c:	4a0f      	ldr	r2, [pc, #60]	@ (802c94c <HAL_DMAEx_MultiBufferStart_IT+0xa28>)
 802c90e:	4293      	cmp	r3, r2
 802c910:	d124      	bne.n	802c95c <HAL_DMAEx_MultiBufferStart_IT+0xa38>
 802c912:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 802c916:	e040      	b.n	802c99a <HAL_DMAEx_MultiBufferStart_IT+0xa76>
 802c918:	40026000 	.word	0x40026000
 802c91c:	40026458 	.word	0x40026458
 802c920:	40026010 	.word	0x40026010
 802c924:	40026410 	.word	0x40026410
 802c928:	40026070 	.word	0x40026070
 802c92c:	40026470 	.word	0x40026470
 802c930:	40026028 	.word	0x40026028
 802c934:	40026428 	.word	0x40026428
 802c938:	40026088 	.word	0x40026088
 802c93c:	40026488 	.word	0x40026488
 802c940:	40026040 	.word	0x40026040
 802c944:	40026440 	.word	0x40026440
 802c948:	400260a0 	.word	0x400260a0
 802c94c:	400264a0 	.word	0x400264a0
 802c950:	40026400 	.word	0x40026400
 802c954:	400260b8 	.word	0x400260b8
 802c958:	40026058 	.word	0x40026058
 802c95c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 802c960:	e01b      	b.n	802c99a <HAL_DMAEx_MultiBufferStart_IT+0xa76>
 802c962:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 802c966:	e018      	b.n	802c99a <HAL_DMAEx_MultiBufferStart_IT+0xa76>
 802c968:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 802c96c:	e015      	b.n	802c99a <HAL_DMAEx_MultiBufferStart_IT+0xa76>
 802c96e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 802c972:	e012      	b.n	802c99a <HAL_DMAEx_MultiBufferStart_IT+0xa76>
 802c974:	f44f 7300 	mov.w	r3, #512	@ 0x200
 802c978:	e00f      	b.n	802c99a <HAL_DMAEx_MultiBufferStart_IT+0xa76>
 802c97a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 802c97e:	e00c      	b.n	802c99a <HAL_DMAEx_MultiBufferStart_IT+0xa76>
 802c980:	f44f 7300 	mov.w	r3, #512	@ 0x200
 802c984:	e009      	b.n	802c99a <HAL_DMAEx_MultiBufferStart_IT+0xa76>
 802c986:	f44f 7300 	mov.w	r3, #512	@ 0x200
 802c98a:	e006      	b.n	802c99a <HAL_DMAEx_MultiBufferStart_IT+0xa76>
 802c98c:	2308      	movs	r3, #8
 802c98e:	e004      	b.n	802c99a <HAL_DMAEx_MultiBufferStart_IT+0xa76>
 802c990:	2308      	movs	r3, #8
 802c992:	e002      	b.n	802c99a <HAL_DMAEx_MultiBufferStart_IT+0xa76>
 802c994:	2308      	movs	r3, #8
 802c996:	e000      	b.n	802c99a <HAL_DMAEx_MultiBufferStart_IT+0xa76>
 802c998:	2308      	movs	r3, #8
 802c99a:	4a8c      	ldr	r2, [pc, #560]	@ (802cbcc <HAL_DMAEx_MultiBufferStart_IT+0xca8>)
 802c99c:	60d3      	str	r3, [r2, #12]
 802c99e:	e05f      	b.n	802ca60 <HAL_DMAEx_MultiBufferStart_IT+0xb3c>
 802c9a0:	68fb      	ldr	r3, [r7, #12]
 802c9a2:	681b      	ldr	r3, [r3, #0]
 802c9a4:	4a8a      	ldr	r2, [pc, #552]	@ (802cbd0 <HAL_DMAEx_MultiBufferStart_IT+0xcac>)
 802c9a6:	4293      	cmp	r3, r2
 802c9a8:	d057      	beq.n	802ca5a <HAL_DMAEx_MultiBufferStart_IT+0xb36>
 802c9aa:	68fb      	ldr	r3, [r7, #12]
 802c9ac:	681b      	ldr	r3, [r3, #0]
 802c9ae:	4a89      	ldr	r2, [pc, #548]	@ (802cbd4 <HAL_DMAEx_MultiBufferStart_IT+0xcb0>)
 802c9b0:	4293      	cmp	r3, r2
 802c9b2:	d050      	beq.n	802ca56 <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 802c9b4:	68fb      	ldr	r3, [r7, #12]
 802c9b6:	681b      	ldr	r3, [r3, #0]
 802c9b8:	4a87      	ldr	r2, [pc, #540]	@ (802cbd8 <HAL_DMAEx_MultiBufferStart_IT+0xcb4>)
 802c9ba:	4293      	cmp	r3, r2
 802c9bc:	d049      	beq.n	802ca52 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 802c9be:	68fb      	ldr	r3, [r7, #12]
 802c9c0:	681b      	ldr	r3, [r3, #0]
 802c9c2:	4a86      	ldr	r2, [pc, #536]	@ (802cbdc <HAL_DMAEx_MultiBufferStart_IT+0xcb8>)
 802c9c4:	4293      	cmp	r3, r2
 802c9c6:	d042      	beq.n	802ca4e <HAL_DMAEx_MultiBufferStart_IT+0xb2a>
 802c9c8:	68fb      	ldr	r3, [r7, #12]
 802c9ca:	681b      	ldr	r3, [r3, #0]
 802c9cc:	4a84      	ldr	r2, [pc, #528]	@ (802cbe0 <HAL_DMAEx_MultiBufferStart_IT+0xcbc>)
 802c9ce:	4293      	cmp	r3, r2
 802c9d0:	d03a      	beq.n	802ca48 <HAL_DMAEx_MultiBufferStart_IT+0xb24>
 802c9d2:	68fb      	ldr	r3, [r7, #12]
 802c9d4:	681b      	ldr	r3, [r3, #0]
 802c9d6:	4a83      	ldr	r2, [pc, #524]	@ (802cbe4 <HAL_DMAEx_MultiBufferStart_IT+0xcc0>)
 802c9d8:	4293      	cmp	r3, r2
 802c9da:	d032      	beq.n	802ca42 <HAL_DMAEx_MultiBufferStart_IT+0xb1e>
 802c9dc:	68fb      	ldr	r3, [r7, #12]
 802c9de:	681b      	ldr	r3, [r3, #0]
 802c9e0:	4a81      	ldr	r2, [pc, #516]	@ (802cbe8 <HAL_DMAEx_MultiBufferStart_IT+0xcc4>)
 802c9e2:	4293      	cmp	r3, r2
 802c9e4:	d02a      	beq.n	802ca3c <HAL_DMAEx_MultiBufferStart_IT+0xb18>
 802c9e6:	68fb      	ldr	r3, [r7, #12]
 802c9e8:	681b      	ldr	r3, [r3, #0]
 802c9ea:	4a80      	ldr	r2, [pc, #512]	@ (802cbec <HAL_DMAEx_MultiBufferStart_IT+0xcc8>)
 802c9ec:	4293      	cmp	r3, r2
 802c9ee:	d022      	beq.n	802ca36 <HAL_DMAEx_MultiBufferStart_IT+0xb12>
 802c9f0:	68fb      	ldr	r3, [r7, #12]
 802c9f2:	681b      	ldr	r3, [r3, #0]
 802c9f4:	4a7e      	ldr	r2, [pc, #504]	@ (802cbf0 <HAL_DMAEx_MultiBufferStart_IT+0xccc>)
 802c9f6:	4293      	cmp	r3, r2
 802c9f8:	d01a      	beq.n	802ca30 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 802c9fa:	68fb      	ldr	r3, [r7, #12]
 802c9fc:	681b      	ldr	r3, [r3, #0]
 802c9fe:	4a7d      	ldr	r2, [pc, #500]	@ (802cbf4 <HAL_DMAEx_MultiBufferStart_IT+0xcd0>)
 802ca00:	4293      	cmp	r3, r2
 802ca02:	d012      	beq.n	802ca2a <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 802ca04:	68fb      	ldr	r3, [r7, #12]
 802ca06:	681b      	ldr	r3, [r3, #0]
 802ca08:	4a7b      	ldr	r2, [pc, #492]	@ (802cbf8 <HAL_DMAEx_MultiBufferStart_IT+0xcd4>)
 802ca0a:	4293      	cmp	r3, r2
 802ca0c:	d00a      	beq.n	802ca24 <HAL_DMAEx_MultiBufferStart_IT+0xb00>
 802ca0e:	68fb      	ldr	r3, [r7, #12]
 802ca10:	681b      	ldr	r3, [r3, #0]
 802ca12:	4a7a      	ldr	r2, [pc, #488]	@ (802cbfc <HAL_DMAEx_MultiBufferStart_IT+0xcd8>)
 802ca14:	4293      	cmp	r3, r2
 802ca16:	d102      	bne.n	802ca1e <HAL_DMAEx_MultiBufferStart_IT+0xafa>
 802ca18:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 802ca1c:	e01e      	b.n	802ca5c <HAL_DMAEx_MultiBufferStart_IT+0xb38>
 802ca1e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 802ca22:	e01b      	b.n	802ca5c <HAL_DMAEx_MultiBufferStart_IT+0xb38>
 802ca24:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 802ca28:	e018      	b.n	802ca5c <HAL_DMAEx_MultiBufferStart_IT+0xb38>
 802ca2a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 802ca2e:	e015      	b.n	802ca5c <HAL_DMAEx_MultiBufferStart_IT+0xb38>
 802ca30:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 802ca34:	e012      	b.n	802ca5c <HAL_DMAEx_MultiBufferStart_IT+0xb38>
 802ca36:	f44f 7300 	mov.w	r3, #512	@ 0x200
 802ca3a:	e00f      	b.n	802ca5c <HAL_DMAEx_MultiBufferStart_IT+0xb38>
 802ca3c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 802ca40:	e00c      	b.n	802ca5c <HAL_DMAEx_MultiBufferStart_IT+0xb38>
 802ca42:	f44f 7300 	mov.w	r3, #512	@ 0x200
 802ca46:	e009      	b.n	802ca5c <HAL_DMAEx_MultiBufferStart_IT+0xb38>
 802ca48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 802ca4c:	e006      	b.n	802ca5c <HAL_DMAEx_MultiBufferStart_IT+0xb38>
 802ca4e:	2308      	movs	r3, #8
 802ca50:	e004      	b.n	802ca5c <HAL_DMAEx_MultiBufferStart_IT+0xb38>
 802ca52:	2308      	movs	r3, #8
 802ca54:	e002      	b.n	802ca5c <HAL_DMAEx_MultiBufferStart_IT+0xb38>
 802ca56:	2308      	movs	r3, #8
 802ca58:	e000      	b.n	802ca5c <HAL_DMAEx_MultiBufferStart_IT+0xb38>
 802ca5a:	2308      	movs	r3, #8
 802ca5c:	4a5b      	ldr	r2, [pc, #364]	@ (802cbcc <HAL_DMAEx_MultiBufferStart_IT+0xca8>)
 802ca5e:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 802ca60:	68fb      	ldr	r3, [r7, #12]
 802ca62:	681b      	ldr	r3, [r3, #0]
 802ca64:	461a      	mov	r2, r3
 802ca66:	4b66      	ldr	r3, [pc, #408]	@ (802cc00 <HAL_DMAEx_MultiBufferStart_IT+0xcdc>)
 802ca68:	429a      	cmp	r2, r3
 802ca6a:	d960      	bls.n	802cb2e <HAL_DMAEx_MultiBufferStart_IT+0xc0a>
 802ca6c:	68fb      	ldr	r3, [r7, #12]
 802ca6e:	681b      	ldr	r3, [r3, #0]
 802ca70:	4a57      	ldr	r2, [pc, #348]	@ (802cbd0 <HAL_DMAEx_MultiBufferStart_IT+0xcac>)
 802ca72:	4293      	cmp	r3, r2
 802ca74:	d057      	beq.n	802cb26 <HAL_DMAEx_MultiBufferStart_IT+0xc02>
 802ca76:	68fb      	ldr	r3, [r7, #12]
 802ca78:	681b      	ldr	r3, [r3, #0]
 802ca7a:	4a56      	ldr	r2, [pc, #344]	@ (802cbd4 <HAL_DMAEx_MultiBufferStart_IT+0xcb0>)
 802ca7c:	4293      	cmp	r3, r2
 802ca7e:	d050      	beq.n	802cb22 <HAL_DMAEx_MultiBufferStart_IT+0xbfe>
 802ca80:	68fb      	ldr	r3, [r7, #12]
 802ca82:	681b      	ldr	r3, [r3, #0]
 802ca84:	4a54      	ldr	r2, [pc, #336]	@ (802cbd8 <HAL_DMAEx_MultiBufferStart_IT+0xcb4>)
 802ca86:	4293      	cmp	r3, r2
 802ca88:	d049      	beq.n	802cb1e <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 802ca8a:	68fb      	ldr	r3, [r7, #12]
 802ca8c:	681b      	ldr	r3, [r3, #0]
 802ca8e:	4a53      	ldr	r2, [pc, #332]	@ (802cbdc <HAL_DMAEx_MultiBufferStart_IT+0xcb8>)
 802ca90:	4293      	cmp	r3, r2
 802ca92:	d042      	beq.n	802cb1a <HAL_DMAEx_MultiBufferStart_IT+0xbf6>
 802ca94:	68fb      	ldr	r3, [r7, #12]
 802ca96:	681b      	ldr	r3, [r3, #0]
 802ca98:	4a51      	ldr	r2, [pc, #324]	@ (802cbe0 <HAL_DMAEx_MultiBufferStart_IT+0xcbc>)
 802ca9a:	4293      	cmp	r3, r2
 802ca9c:	d03a      	beq.n	802cb14 <HAL_DMAEx_MultiBufferStart_IT+0xbf0>
 802ca9e:	68fb      	ldr	r3, [r7, #12]
 802caa0:	681b      	ldr	r3, [r3, #0]
 802caa2:	4a50      	ldr	r2, [pc, #320]	@ (802cbe4 <HAL_DMAEx_MultiBufferStart_IT+0xcc0>)
 802caa4:	4293      	cmp	r3, r2
 802caa6:	d032      	beq.n	802cb0e <HAL_DMAEx_MultiBufferStart_IT+0xbea>
 802caa8:	68fb      	ldr	r3, [r7, #12]
 802caaa:	681b      	ldr	r3, [r3, #0]
 802caac:	4a4e      	ldr	r2, [pc, #312]	@ (802cbe8 <HAL_DMAEx_MultiBufferStart_IT+0xcc4>)
 802caae:	4293      	cmp	r3, r2
 802cab0:	d02a      	beq.n	802cb08 <HAL_DMAEx_MultiBufferStart_IT+0xbe4>
 802cab2:	68fb      	ldr	r3, [r7, #12]
 802cab4:	681b      	ldr	r3, [r3, #0]
 802cab6:	4a4d      	ldr	r2, [pc, #308]	@ (802cbec <HAL_DMAEx_MultiBufferStart_IT+0xcc8>)
 802cab8:	4293      	cmp	r3, r2
 802caba:	d022      	beq.n	802cb02 <HAL_DMAEx_MultiBufferStart_IT+0xbde>
 802cabc:	68fb      	ldr	r3, [r7, #12]
 802cabe:	681b      	ldr	r3, [r3, #0]
 802cac0:	4a4b      	ldr	r2, [pc, #300]	@ (802cbf0 <HAL_DMAEx_MultiBufferStart_IT+0xccc>)
 802cac2:	4293      	cmp	r3, r2
 802cac4:	d01a      	beq.n	802cafc <HAL_DMAEx_MultiBufferStart_IT+0xbd8>
 802cac6:	68fb      	ldr	r3, [r7, #12]
 802cac8:	681b      	ldr	r3, [r3, #0]
 802caca:	4a4a      	ldr	r2, [pc, #296]	@ (802cbf4 <HAL_DMAEx_MultiBufferStart_IT+0xcd0>)
 802cacc:	4293      	cmp	r3, r2
 802cace:	d012      	beq.n	802caf6 <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 802cad0:	68fb      	ldr	r3, [r7, #12]
 802cad2:	681b      	ldr	r3, [r3, #0]
 802cad4:	4a48      	ldr	r2, [pc, #288]	@ (802cbf8 <HAL_DMAEx_MultiBufferStart_IT+0xcd4>)
 802cad6:	4293      	cmp	r3, r2
 802cad8:	d00a      	beq.n	802caf0 <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 802cada:	68fb      	ldr	r3, [r7, #12]
 802cadc:	681b      	ldr	r3, [r3, #0]
 802cade:	4a47      	ldr	r2, [pc, #284]	@ (802cbfc <HAL_DMAEx_MultiBufferStart_IT+0xcd8>)
 802cae0:	4293      	cmp	r3, r2
 802cae2:	d102      	bne.n	802caea <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 802cae4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 802cae8:	e01e      	b.n	802cb28 <HAL_DMAEx_MultiBufferStart_IT+0xc04>
 802caea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 802caee:	e01b      	b.n	802cb28 <HAL_DMAEx_MultiBufferStart_IT+0xc04>
 802caf0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 802caf4:	e018      	b.n	802cb28 <HAL_DMAEx_MultiBufferStart_IT+0xc04>
 802caf6:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 802cafa:	e015      	b.n	802cb28 <HAL_DMAEx_MultiBufferStart_IT+0xc04>
 802cafc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 802cb00:	e012      	b.n	802cb28 <HAL_DMAEx_MultiBufferStart_IT+0xc04>
 802cb02:	f44f 7380 	mov.w	r3, #256	@ 0x100
 802cb06:	e00f      	b.n	802cb28 <HAL_DMAEx_MultiBufferStart_IT+0xc04>
 802cb08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 802cb0c:	e00c      	b.n	802cb28 <HAL_DMAEx_MultiBufferStart_IT+0xc04>
 802cb0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 802cb12:	e009      	b.n	802cb28 <HAL_DMAEx_MultiBufferStart_IT+0xc04>
 802cb14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 802cb18:	e006      	b.n	802cb28 <HAL_DMAEx_MultiBufferStart_IT+0xc04>
 802cb1a:	2304      	movs	r3, #4
 802cb1c:	e004      	b.n	802cb28 <HAL_DMAEx_MultiBufferStart_IT+0xc04>
 802cb1e:	2304      	movs	r3, #4
 802cb20:	e002      	b.n	802cb28 <HAL_DMAEx_MultiBufferStart_IT+0xc04>
 802cb22:	2304      	movs	r3, #4
 802cb24:	e000      	b.n	802cb28 <HAL_DMAEx_MultiBufferStart_IT+0xc04>
 802cb26:	2304      	movs	r3, #4
 802cb28:	4a36      	ldr	r2, [pc, #216]	@ (802cc04 <HAL_DMAEx_MultiBufferStart_IT+0xce0>)
 802cb2a:	60d3      	str	r3, [r2, #12]
 802cb2c:	e14e      	b.n	802cdcc <HAL_DMAEx_MultiBufferStart_IT+0xea8>
 802cb2e:	68fb      	ldr	r3, [r7, #12]
 802cb30:	681b      	ldr	r3, [r3, #0]
 802cb32:	461a      	mov	r2, r3
 802cb34:	4b34      	ldr	r3, [pc, #208]	@ (802cc08 <HAL_DMAEx_MultiBufferStart_IT+0xce4>)
 802cb36:	429a      	cmp	r2, r3
 802cb38:	f240 8081 	bls.w	802cc3e <HAL_DMAEx_MultiBufferStart_IT+0xd1a>
 802cb3c:	68fb      	ldr	r3, [r7, #12]
 802cb3e:	681b      	ldr	r3, [r3, #0]
 802cb40:	4a23      	ldr	r2, [pc, #140]	@ (802cbd0 <HAL_DMAEx_MultiBufferStart_IT+0xcac>)
 802cb42:	4293      	cmp	r3, r2
 802cb44:	d077      	beq.n	802cc36 <HAL_DMAEx_MultiBufferStart_IT+0xd12>
 802cb46:	68fb      	ldr	r3, [r7, #12]
 802cb48:	681b      	ldr	r3, [r3, #0]
 802cb4a:	4a22      	ldr	r2, [pc, #136]	@ (802cbd4 <HAL_DMAEx_MultiBufferStart_IT+0xcb0>)
 802cb4c:	4293      	cmp	r3, r2
 802cb4e:	d070      	beq.n	802cc32 <HAL_DMAEx_MultiBufferStart_IT+0xd0e>
 802cb50:	68fb      	ldr	r3, [r7, #12]
 802cb52:	681b      	ldr	r3, [r3, #0]
 802cb54:	4a20      	ldr	r2, [pc, #128]	@ (802cbd8 <HAL_DMAEx_MultiBufferStart_IT+0xcb4>)
 802cb56:	4293      	cmp	r3, r2
 802cb58:	d069      	beq.n	802cc2e <HAL_DMAEx_MultiBufferStart_IT+0xd0a>
 802cb5a:	68fb      	ldr	r3, [r7, #12]
 802cb5c:	681b      	ldr	r3, [r3, #0]
 802cb5e:	4a1f      	ldr	r2, [pc, #124]	@ (802cbdc <HAL_DMAEx_MultiBufferStart_IT+0xcb8>)
 802cb60:	4293      	cmp	r3, r2
 802cb62:	d062      	beq.n	802cc2a <HAL_DMAEx_MultiBufferStart_IT+0xd06>
 802cb64:	68fb      	ldr	r3, [r7, #12]
 802cb66:	681b      	ldr	r3, [r3, #0]
 802cb68:	4a1d      	ldr	r2, [pc, #116]	@ (802cbe0 <HAL_DMAEx_MultiBufferStart_IT+0xcbc>)
 802cb6a:	4293      	cmp	r3, r2
 802cb6c:	d05a      	beq.n	802cc24 <HAL_DMAEx_MultiBufferStart_IT+0xd00>
 802cb6e:	68fb      	ldr	r3, [r7, #12]
 802cb70:	681b      	ldr	r3, [r3, #0]
 802cb72:	4a1c      	ldr	r2, [pc, #112]	@ (802cbe4 <HAL_DMAEx_MultiBufferStart_IT+0xcc0>)
 802cb74:	4293      	cmp	r3, r2
 802cb76:	d052      	beq.n	802cc1e <HAL_DMAEx_MultiBufferStart_IT+0xcfa>
 802cb78:	68fb      	ldr	r3, [r7, #12]
 802cb7a:	681b      	ldr	r3, [r3, #0]
 802cb7c:	4a1a      	ldr	r2, [pc, #104]	@ (802cbe8 <HAL_DMAEx_MultiBufferStart_IT+0xcc4>)
 802cb7e:	4293      	cmp	r3, r2
 802cb80:	d04a      	beq.n	802cc18 <HAL_DMAEx_MultiBufferStart_IT+0xcf4>
 802cb82:	68fb      	ldr	r3, [r7, #12]
 802cb84:	681b      	ldr	r3, [r3, #0]
 802cb86:	4a19      	ldr	r2, [pc, #100]	@ (802cbec <HAL_DMAEx_MultiBufferStart_IT+0xcc8>)
 802cb88:	4293      	cmp	r3, r2
 802cb8a:	d042      	beq.n	802cc12 <HAL_DMAEx_MultiBufferStart_IT+0xcee>
 802cb8c:	68fb      	ldr	r3, [r7, #12]
 802cb8e:	681b      	ldr	r3, [r3, #0]
 802cb90:	4a17      	ldr	r2, [pc, #92]	@ (802cbf0 <HAL_DMAEx_MultiBufferStart_IT+0xccc>)
 802cb92:	4293      	cmp	r3, r2
 802cb94:	d03a      	beq.n	802cc0c <HAL_DMAEx_MultiBufferStart_IT+0xce8>
 802cb96:	68fb      	ldr	r3, [r7, #12]
 802cb98:	681b      	ldr	r3, [r3, #0]
 802cb9a:	4a16      	ldr	r2, [pc, #88]	@ (802cbf4 <HAL_DMAEx_MultiBufferStart_IT+0xcd0>)
 802cb9c:	4293      	cmp	r3, r2
 802cb9e:	d012      	beq.n	802cbc6 <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 802cba0:	68fb      	ldr	r3, [r7, #12]
 802cba2:	681b      	ldr	r3, [r3, #0]
 802cba4:	4a14      	ldr	r2, [pc, #80]	@ (802cbf8 <HAL_DMAEx_MultiBufferStart_IT+0xcd4>)
 802cba6:	4293      	cmp	r3, r2
 802cba8:	d00a      	beq.n	802cbc0 <HAL_DMAEx_MultiBufferStart_IT+0xc9c>
 802cbaa:	68fb      	ldr	r3, [r7, #12]
 802cbac:	681b      	ldr	r3, [r3, #0]
 802cbae:	4a13      	ldr	r2, [pc, #76]	@ (802cbfc <HAL_DMAEx_MultiBufferStart_IT+0xcd8>)
 802cbb0:	4293      	cmp	r3, r2
 802cbb2:	d102      	bne.n	802cbba <HAL_DMAEx_MultiBufferStart_IT+0xc96>
 802cbb4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 802cbb8:	e03e      	b.n	802cc38 <HAL_DMAEx_MultiBufferStart_IT+0xd14>
 802cbba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 802cbbe:	e03b      	b.n	802cc38 <HAL_DMAEx_MultiBufferStart_IT+0xd14>
 802cbc0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 802cbc4:	e038      	b.n	802cc38 <HAL_DMAEx_MultiBufferStart_IT+0xd14>
 802cbc6:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 802cbca:	e035      	b.n	802cc38 <HAL_DMAEx_MultiBufferStart_IT+0xd14>
 802cbcc:	40026000 	.word	0x40026000
 802cbd0:	40026010 	.word	0x40026010
 802cbd4:	40026410 	.word	0x40026410
 802cbd8:	40026070 	.word	0x40026070
 802cbdc:	40026470 	.word	0x40026470
 802cbe0:	40026028 	.word	0x40026028
 802cbe4:	40026428 	.word	0x40026428
 802cbe8:	40026088 	.word	0x40026088
 802cbec:	40026488 	.word	0x40026488
 802cbf0:	40026040 	.word	0x40026040
 802cbf4:	40026440 	.word	0x40026440
 802cbf8:	400260a0 	.word	0x400260a0
 802cbfc:	400264a0 	.word	0x400264a0
 802cc00:	40026458 	.word	0x40026458
 802cc04:	40026400 	.word	0x40026400
 802cc08:	400260b8 	.word	0x400260b8
 802cc0c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 802cc10:	e012      	b.n	802cc38 <HAL_DMAEx_MultiBufferStart_IT+0xd14>
 802cc12:	f44f 7380 	mov.w	r3, #256	@ 0x100
 802cc16:	e00f      	b.n	802cc38 <HAL_DMAEx_MultiBufferStart_IT+0xd14>
 802cc18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 802cc1c:	e00c      	b.n	802cc38 <HAL_DMAEx_MultiBufferStart_IT+0xd14>
 802cc1e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 802cc22:	e009      	b.n	802cc38 <HAL_DMAEx_MultiBufferStart_IT+0xd14>
 802cc24:	f44f 7380 	mov.w	r3, #256	@ 0x100
 802cc28:	e006      	b.n	802cc38 <HAL_DMAEx_MultiBufferStart_IT+0xd14>
 802cc2a:	2304      	movs	r3, #4
 802cc2c:	e004      	b.n	802cc38 <HAL_DMAEx_MultiBufferStart_IT+0xd14>
 802cc2e:	2304      	movs	r3, #4
 802cc30:	e002      	b.n	802cc38 <HAL_DMAEx_MultiBufferStart_IT+0xd14>
 802cc32:	2304      	movs	r3, #4
 802cc34:	e000      	b.n	802cc38 <HAL_DMAEx_MultiBufferStart_IT+0xd14>
 802cc36:	2304      	movs	r3, #4
 802cc38:	4a8b      	ldr	r2, [pc, #556]	@ (802ce68 <HAL_DMAEx_MultiBufferStart_IT+0xf44>)
 802cc3a:	6093      	str	r3, [r2, #8]
 802cc3c:	e0c6      	b.n	802cdcc <HAL_DMAEx_MultiBufferStart_IT+0xea8>
 802cc3e:	68fb      	ldr	r3, [r7, #12]
 802cc40:	681b      	ldr	r3, [r3, #0]
 802cc42:	461a      	mov	r2, r3
 802cc44:	4b89      	ldr	r3, [pc, #548]	@ (802ce6c <HAL_DMAEx_MultiBufferStart_IT+0xf48>)
 802cc46:	429a      	cmp	r2, r3
 802cc48:	d960      	bls.n	802cd0c <HAL_DMAEx_MultiBufferStart_IT+0xde8>
 802cc4a:	68fb      	ldr	r3, [r7, #12]
 802cc4c:	681b      	ldr	r3, [r3, #0]
 802cc4e:	4a88      	ldr	r2, [pc, #544]	@ (802ce70 <HAL_DMAEx_MultiBufferStart_IT+0xf4c>)
 802cc50:	4293      	cmp	r3, r2
 802cc52:	d057      	beq.n	802cd04 <HAL_DMAEx_MultiBufferStart_IT+0xde0>
 802cc54:	68fb      	ldr	r3, [r7, #12]
 802cc56:	681b      	ldr	r3, [r3, #0]
 802cc58:	4a86      	ldr	r2, [pc, #536]	@ (802ce74 <HAL_DMAEx_MultiBufferStart_IT+0xf50>)
 802cc5a:	4293      	cmp	r3, r2
 802cc5c:	d050      	beq.n	802cd00 <HAL_DMAEx_MultiBufferStart_IT+0xddc>
 802cc5e:	68fb      	ldr	r3, [r7, #12]
 802cc60:	681b      	ldr	r3, [r3, #0]
 802cc62:	4a85      	ldr	r2, [pc, #532]	@ (802ce78 <HAL_DMAEx_MultiBufferStart_IT+0xf54>)
 802cc64:	4293      	cmp	r3, r2
 802cc66:	d049      	beq.n	802ccfc <HAL_DMAEx_MultiBufferStart_IT+0xdd8>
 802cc68:	68fb      	ldr	r3, [r7, #12]
 802cc6a:	681b      	ldr	r3, [r3, #0]
 802cc6c:	4a83      	ldr	r2, [pc, #524]	@ (802ce7c <HAL_DMAEx_MultiBufferStart_IT+0xf58>)
 802cc6e:	4293      	cmp	r3, r2
 802cc70:	d042      	beq.n	802ccf8 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>
 802cc72:	68fb      	ldr	r3, [r7, #12]
 802cc74:	681b      	ldr	r3, [r3, #0]
 802cc76:	4a82      	ldr	r2, [pc, #520]	@ (802ce80 <HAL_DMAEx_MultiBufferStart_IT+0xf5c>)
 802cc78:	4293      	cmp	r3, r2
 802cc7a:	d03a      	beq.n	802ccf2 <HAL_DMAEx_MultiBufferStart_IT+0xdce>
 802cc7c:	68fb      	ldr	r3, [r7, #12]
 802cc7e:	681b      	ldr	r3, [r3, #0]
 802cc80:	4a80      	ldr	r2, [pc, #512]	@ (802ce84 <HAL_DMAEx_MultiBufferStart_IT+0xf60>)
 802cc82:	4293      	cmp	r3, r2
 802cc84:	d032      	beq.n	802ccec <HAL_DMAEx_MultiBufferStart_IT+0xdc8>
 802cc86:	68fb      	ldr	r3, [r7, #12]
 802cc88:	681b      	ldr	r3, [r3, #0]
 802cc8a:	4a7f      	ldr	r2, [pc, #508]	@ (802ce88 <HAL_DMAEx_MultiBufferStart_IT+0xf64>)
 802cc8c:	4293      	cmp	r3, r2
 802cc8e:	d02a      	beq.n	802cce6 <HAL_DMAEx_MultiBufferStart_IT+0xdc2>
 802cc90:	68fb      	ldr	r3, [r7, #12]
 802cc92:	681b      	ldr	r3, [r3, #0]
 802cc94:	4a7d      	ldr	r2, [pc, #500]	@ (802ce8c <HAL_DMAEx_MultiBufferStart_IT+0xf68>)
 802cc96:	4293      	cmp	r3, r2
 802cc98:	d022      	beq.n	802cce0 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>
 802cc9a:	68fb      	ldr	r3, [r7, #12]
 802cc9c:	681b      	ldr	r3, [r3, #0]
 802cc9e:	4a7c      	ldr	r2, [pc, #496]	@ (802ce90 <HAL_DMAEx_MultiBufferStart_IT+0xf6c>)
 802cca0:	4293      	cmp	r3, r2
 802cca2:	d01a      	beq.n	802ccda <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 802cca4:	68fb      	ldr	r3, [r7, #12]
 802cca6:	681b      	ldr	r3, [r3, #0]
 802cca8:	4a7a      	ldr	r2, [pc, #488]	@ (802ce94 <HAL_DMAEx_MultiBufferStart_IT+0xf70>)
 802ccaa:	4293      	cmp	r3, r2
 802ccac:	d012      	beq.n	802ccd4 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>
 802ccae:	68fb      	ldr	r3, [r7, #12]
 802ccb0:	681b      	ldr	r3, [r3, #0]
 802ccb2:	4a79      	ldr	r2, [pc, #484]	@ (802ce98 <HAL_DMAEx_MultiBufferStart_IT+0xf74>)
 802ccb4:	4293      	cmp	r3, r2
 802ccb6:	d00a      	beq.n	802ccce <HAL_DMAEx_MultiBufferStart_IT+0xdaa>
 802ccb8:	68fb      	ldr	r3, [r7, #12]
 802ccba:	681b      	ldr	r3, [r3, #0]
 802ccbc:	4a77      	ldr	r2, [pc, #476]	@ (802ce9c <HAL_DMAEx_MultiBufferStart_IT+0xf78>)
 802ccbe:	4293      	cmp	r3, r2
 802ccc0:	d102      	bne.n	802ccc8 <HAL_DMAEx_MultiBufferStart_IT+0xda4>
 802ccc2:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 802ccc6:	e01e      	b.n	802cd06 <HAL_DMAEx_MultiBufferStart_IT+0xde2>
 802ccc8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 802cccc:	e01b      	b.n	802cd06 <HAL_DMAEx_MultiBufferStart_IT+0xde2>
 802ccce:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 802ccd2:	e018      	b.n	802cd06 <HAL_DMAEx_MultiBufferStart_IT+0xde2>
 802ccd4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 802ccd8:	e015      	b.n	802cd06 <HAL_DMAEx_MultiBufferStart_IT+0xde2>
 802ccda:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 802ccde:	e012      	b.n	802cd06 <HAL_DMAEx_MultiBufferStart_IT+0xde2>
 802cce0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 802cce4:	e00f      	b.n	802cd06 <HAL_DMAEx_MultiBufferStart_IT+0xde2>
 802cce6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 802ccea:	e00c      	b.n	802cd06 <HAL_DMAEx_MultiBufferStart_IT+0xde2>
 802ccec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 802ccf0:	e009      	b.n	802cd06 <HAL_DMAEx_MultiBufferStart_IT+0xde2>
 802ccf2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 802ccf6:	e006      	b.n	802cd06 <HAL_DMAEx_MultiBufferStart_IT+0xde2>
 802ccf8:	2304      	movs	r3, #4
 802ccfa:	e004      	b.n	802cd06 <HAL_DMAEx_MultiBufferStart_IT+0xde2>
 802ccfc:	2304      	movs	r3, #4
 802ccfe:	e002      	b.n	802cd06 <HAL_DMAEx_MultiBufferStart_IT+0xde2>
 802cd00:	2304      	movs	r3, #4
 802cd02:	e000      	b.n	802cd06 <HAL_DMAEx_MultiBufferStart_IT+0xde2>
 802cd04:	2304      	movs	r3, #4
 802cd06:	4a66      	ldr	r2, [pc, #408]	@ (802cea0 <HAL_DMAEx_MultiBufferStart_IT+0xf7c>)
 802cd08:	60d3      	str	r3, [r2, #12]
 802cd0a:	e05f      	b.n	802cdcc <HAL_DMAEx_MultiBufferStart_IT+0xea8>
 802cd0c:	68fb      	ldr	r3, [r7, #12]
 802cd0e:	681b      	ldr	r3, [r3, #0]
 802cd10:	4a57      	ldr	r2, [pc, #348]	@ (802ce70 <HAL_DMAEx_MultiBufferStart_IT+0xf4c>)
 802cd12:	4293      	cmp	r3, r2
 802cd14:	d057      	beq.n	802cdc6 <HAL_DMAEx_MultiBufferStart_IT+0xea2>
 802cd16:	68fb      	ldr	r3, [r7, #12]
 802cd18:	681b      	ldr	r3, [r3, #0]
 802cd1a:	4a56      	ldr	r2, [pc, #344]	@ (802ce74 <HAL_DMAEx_MultiBufferStart_IT+0xf50>)
 802cd1c:	4293      	cmp	r3, r2
 802cd1e:	d050      	beq.n	802cdc2 <HAL_DMAEx_MultiBufferStart_IT+0xe9e>
 802cd20:	68fb      	ldr	r3, [r7, #12]
 802cd22:	681b      	ldr	r3, [r3, #0]
 802cd24:	4a54      	ldr	r2, [pc, #336]	@ (802ce78 <HAL_DMAEx_MultiBufferStart_IT+0xf54>)
 802cd26:	4293      	cmp	r3, r2
 802cd28:	d049      	beq.n	802cdbe <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 802cd2a:	68fb      	ldr	r3, [r7, #12]
 802cd2c:	681b      	ldr	r3, [r3, #0]
 802cd2e:	4a53      	ldr	r2, [pc, #332]	@ (802ce7c <HAL_DMAEx_MultiBufferStart_IT+0xf58>)
 802cd30:	4293      	cmp	r3, r2
 802cd32:	d042      	beq.n	802cdba <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 802cd34:	68fb      	ldr	r3, [r7, #12]
 802cd36:	681b      	ldr	r3, [r3, #0]
 802cd38:	4a51      	ldr	r2, [pc, #324]	@ (802ce80 <HAL_DMAEx_MultiBufferStart_IT+0xf5c>)
 802cd3a:	4293      	cmp	r3, r2
 802cd3c:	d03a      	beq.n	802cdb4 <HAL_DMAEx_MultiBufferStart_IT+0xe90>
 802cd3e:	68fb      	ldr	r3, [r7, #12]
 802cd40:	681b      	ldr	r3, [r3, #0]
 802cd42:	4a50      	ldr	r2, [pc, #320]	@ (802ce84 <HAL_DMAEx_MultiBufferStart_IT+0xf60>)
 802cd44:	4293      	cmp	r3, r2
 802cd46:	d032      	beq.n	802cdae <HAL_DMAEx_MultiBufferStart_IT+0xe8a>
 802cd48:	68fb      	ldr	r3, [r7, #12]
 802cd4a:	681b      	ldr	r3, [r3, #0]
 802cd4c:	4a4e      	ldr	r2, [pc, #312]	@ (802ce88 <HAL_DMAEx_MultiBufferStart_IT+0xf64>)
 802cd4e:	4293      	cmp	r3, r2
 802cd50:	d02a      	beq.n	802cda8 <HAL_DMAEx_MultiBufferStart_IT+0xe84>
 802cd52:	68fb      	ldr	r3, [r7, #12]
 802cd54:	681b      	ldr	r3, [r3, #0]
 802cd56:	4a4d      	ldr	r2, [pc, #308]	@ (802ce8c <HAL_DMAEx_MultiBufferStart_IT+0xf68>)
 802cd58:	4293      	cmp	r3, r2
 802cd5a:	d022      	beq.n	802cda2 <HAL_DMAEx_MultiBufferStart_IT+0xe7e>
 802cd5c:	68fb      	ldr	r3, [r7, #12]
 802cd5e:	681b      	ldr	r3, [r3, #0]
 802cd60:	4a4b      	ldr	r2, [pc, #300]	@ (802ce90 <HAL_DMAEx_MultiBufferStart_IT+0xf6c>)
 802cd62:	4293      	cmp	r3, r2
 802cd64:	d01a      	beq.n	802cd9c <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 802cd66:	68fb      	ldr	r3, [r7, #12]
 802cd68:	681b      	ldr	r3, [r3, #0]
 802cd6a:	4a4a      	ldr	r2, [pc, #296]	@ (802ce94 <HAL_DMAEx_MultiBufferStart_IT+0xf70>)
 802cd6c:	4293      	cmp	r3, r2
 802cd6e:	d012      	beq.n	802cd96 <HAL_DMAEx_MultiBufferStart_IT+0xe72>
 802cd70:	68fb      	ldr	r3, [r7, #12]
 802cd72:	681b      	ldr	r3, [r3, #0]
 802cd74:	4a48      	ldr	r2, [pc, #288]	@ (802ce98 <HAL_DMAEx_MultiBufferStart_IT+0xf74>)
 802cd76:	4293      	cmp	r3, r2
 802cd78:	d00a      	beq.n	802cd90 <HAL_DMAEx_MultiBufferStart_IT+0xe6c>
 802cd7a:	68fb      	ldr	r3, [r7, #12]
 802cd7c:	681b      	ldr	r3, [r3, #0]
 802cd7e:	4a47      	ldr	r2, [pc, #284]	@ (802ce9c <HAL_DMAEx_MultiBufferStart_IT+0xf78>)
 802cd80:	4293      	cmp	r3, r2
 802cd82:	d102      	bne.n	802cd8a <HAL_DMAEx_MultiBufferStart_IT+0xe66>
 802cd84:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 802cd88:	e01e      	b.n	802cdc8 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 802cd8a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 802cd8e:	e01b      	b.n	802cdc8 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 802cd90:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 802cd94:	e018      	b.n	802cdc8 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 802cd96:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 802cd9a:	e015      	b.n	802cdc8 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 802cd9c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 802cda0:	e012      	b.n	802cdc8 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 802cda2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 802cda6:	e00f      	b.n	802cdc8 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 802cda8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 802cdac:	e00c      	b.n	802cdc8 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 802cdae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 802cdb2:	e009      	b.n	802cdc8 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 802cdb4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 802cdb8:	e006      	b.n	802cdc8 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 802cdba:	2304      	movs	r3, #4
 802cdbc:	e004      	b.n	802cdc8 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 802cdbe:	2304      	movs	r3, #4
 802cdc0:	e002      	b.n	802cdc8 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 802cdc2:	2304      	movs	r3, #4
 802cdc4:	e000      	b.n	802cdc8 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 802cdc6:	2304      	movs	r3, #4
 802cdc8:	4a35      	ldr	r2, [pc, #212]	@ (802cea0 <HAL_DMAEx_MultiBufferStart_IT+0xf7c>)
 802cdca:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 802cdcc:	68fb      	ldr	r3, [r7, #12]
 802cdce:	681b      	ldr	r3, [r3, #0]
 802cdd0:	461a      	mov	r2, r3
 802cdd2:	4b34      	ldr	r3, [pc, #208]	@ (802cea4 <HAL_DMAEx_MultiBufferStart_IT+0xf80>)
 802cdd4:	429a      	cmp	r2, r3
 802cdd6:	d97c      	bls.n	802ced2 <HAL_DMAEx_MultiBufferStart_IT+0xfae>
 802cdd8:	68fb      	ldr	r3, [r7, #12]
 802cdda:	681b      	ldr	r3, [r3, #0]
 802cddc:	4a24      	ldr	r2, [pc, #144]	@ (802ce70 <HAL_DMAEx_MultiBufferStart_IT+0xf4c>)
 802cdde:	4293      	cmp	r3, r2
 802cde0:	d073      	beq.n	802ceca <HAL_DMAEx_MultiBufferStart_IT+0xfa6>
 802cde2:	68fb      	ldr	r3, [r7, #12]
 802cde4:	681b      	ldr	r3, [r3, #0]
 802cde6:	4a23      	ldr	r2, [pc, #140]	@ (802ce74 <HAL_DMAEx_MultiBufferStart_IT+0xf50>)
 802cde8:	4293      	cmp	r3, r2
 802cdea:	d06c      	beq.n	802cec6 <HAL_DMAEx_MultiBufferStart_IT+0xfa2>
 802cdec:	68fb      	ldr	r3, [r7, #12]
 802cdee:	681b      	ldr	r3, [r3, #0]
 802cdf0:	4a21      	ldr	r2, [pc, #132]	@ (802ce78 <HAL_DMAEx_MultiBufferStart_IT+0xf54>)
 802cdf2:	4293      	cmp	r3, r2
 802cdf4:	d065      	beq.n	802cec2 <HAL_DMAEx_MultiBufferStart_IT+0xf9e>
 802cdf6:	68fb      	ldr	r3, [r7, #12]
 802cdf8:	681b      	ldr	r3, [r3, #0]
 802cdfa:	4a20      	ldr	r2, [pc, #128]	@ (802ce7c <HAL_DMAEx_MultiBufferStart_IT+0xf58>)
 802cdfc:	4293      	cmp	r3, r2
 802cdfe:	d05e      	beq.n	802cebe <HAL_DMAEx_MultiBufferStart_IT+0xf9a>
 802ce00:	68fb      	ldr	r3, [r7, #12]
 802ce02:	681b      	ldr	r3, [r3, #0]
 802ce04:	4a1e      	ldr	r2, [pc, #120]	@ (802ce80 <HAL_DMAEx_MultiBufferStart_IT+0xf5c>)
 802ce06:	4293      	cmp	r3, r2
 802ce08:	d057      	beq.n	802ceba <HAL_DMAEx_MultiBufferStart_IT+0xf96>
 802ce0a:	68fb      	ldr	r3, [r7, #12]
 802ce0c:	681b      	ldr	r3, [r3, #0]
 802ce0e:	4a1d      	ldr	r2, [pc, #116]	@ (802ce84 <HAL_DMAEx_MultiBufferStart_IT+0xf60>)
 802ce10:	4293      	cmp	r3, r2
 802ce12:	d050      	beq.n	802ceb6 <HAL_DMAEx_MultiBufferStart_IT+0xf92>
 802ce14:	68fb      	ldr	r3, [r7, #12]
 802ce16:	681b      	ldr	r3, [r3, #0]
 802ce18:	4a1b      	ldr	r2, [pc, #108]	@ (802ce88 <HAL_DMAEx_MultiBufferStart_IT+0xf64>)
 802ce1a:	4293      	cmp	r3, r2
 802ce1c:	d049      	beq.n	802ceb2 <HAL_DMAEx_MultiBufferStart_IT+0xf8e>
 802ce1e:	68fb      	ldr	r3, [r7, #12]
 802ce20:	681b      	ldr	r3, [r3, #0]
 802ce22:	4a1a      	ldr	r2, [pc, #104]	@ (802ce8c <HAL_DMAEx_MultiBufferStart_IT+0xf68>)
 802ce24:	4293      	cmp	r3, r2
 802ce26:	d042      	beq.n	802ceae <HAL_DMAEx_MultiBufferStart_IT+0xf8a>
 802ce28:	68fb      	ldr	r3, [r7, #12]
 802ce2a:	681b      	ldr	r3, [r3, #0]
 802ce2c:	4a18      	ldr	r2, [pc, #96]	@ (802ce90 <HAL_DMAEx_MultiBufferStart_IT+0xf6c>)
 802ce2e:	4293      	cmp	r3, r2
 802ce30:	d03a      	beq.n	802cea8 <HAL_DMAEx_MultiBufferStart_IT+0xf84>
 802ce32:	68fb      	ldr	r3, [r7, #12]
 802ce34:	681b      	ldr	r3, [r3, #0]
 802ce36:	4a17      	ldr	r2, [pc, #92]	@ (802ce94 <HAL_DMAEx_MultiBufferStart_IT+0xf70>)
 802ce38:	4293      	cmp	r3, r2
 802ce3a:	d012      	beq.n	802ce62 <HAL_DMAEx_MultiBufferStart_IT+0xf3e>
 802ce3c:	68fb      	ldr	r3, [r7, #12]
 802ce3e:	681b      	ldr	r3, [r3, #0]
 802ce40:	4a15      	ldr	r2, [pc, #84]	@ (802ce98 <HAL_DMAEx_MultiBufferStart_IT+0xf74>)
 802ce42:	4293      	cmp	r3, r2
 802ce44:	d00a      	beq.n	802ce5c <HAL_DMAEx_MultiBufferStart_IT+0xf38>
 802ce46:	68fb      	ldr	r3, [r7, #12]
 802ce48:	681b      	ldr	r3, [r3, #0]
 802ce4a:	4a14      	ldr	r2, [pc, #80]	@ (802ce9c <HAL_DMAEx_MultiBufferStart_IT+0xf78>)
 802ce4c:	4293      	cmp	r3, r2
 802ce4e:	d102      	bne.n	802ce56 <HAL_DMAEx_MultiBufferStart_IT+0xf32>
 802ce50:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 802ce54:	e03a      	b.n	802cecc <HAL_DMAEx_MultiBufferStart_IT+0xfa8>
 802ce56:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 802ce5a:	e037      	b.n	802cecc <HAL_DMAEx_MultiBufferStart_IT+0xfa8>
 802ce5c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 802ce60:	e034      	b.n	802cecc <HAL_DMAEx_MultiBufferStart_IT+0xfa8>
 802ce62:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 802ce66:	e031      	b.n	802cecc <HAL_DMAEx_MultiBufferStart_IT+0xfa8>
 802ce68:	40026400 	.word	0x40026400
 802ce6c:	40026058 	.word	0x40026058
 802ce70:	40026010 	.word	0x40026010
 802ce74:	40026410 	.word	0x40026410
 802ce78:	40026070 	.word	0x40026070
 802ce7c:	40026470 	.word	0x40026470
 802ce80:	40026028 	.word	0x40026028
 802ce84:	40026428 	.word	0x40026428
 802ce88:	40026088 	.word	0x40026088
 802ce8c:	40026488 	.word	0x40026488
 802ce90:	40026040 	.word	0x40026040
 802ce94:	40026440 	.word	0x40026440
 802ce98:	400260a0 	.word	0x400260a0
 802ce9c:	400264a0 	.word	0x400264a0
 802cea0:	40026000 	.word	0x40026000
 802cea4:	40026458 	.word	0x40026458
 802cea8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 802ceac:	e00e      	b.n	802cecc <HAL_DMAEx_MultiBufferStart_IT+0xfa8>
 802ceae:	2340      	movs	r3, #64	@ 0x40
 802ceb0:	e00c      	b.n	802cecc <HAL_DMAEx_MultiBufferStart_IT+0xfa8>
 802ceb2:	2340      	movs	r3, #64	@ 0x40
 802ceb4:	e00a      	b.n	802cecc <HAL_DMAEx_MultiBufferStart_IT+0xfa8>
 802ceb6:	2340      	movs	r3, #64	@ 0x40
 802ceb8:	e008      	b.n	802cecc <HAL_DMAEx_MultiBufferStart_IT+0xfa8>
 802ceba:	2340      	movs	r3, #64	@ 0x40
 802cebc:	e006      	b.n	802cecc <HAL_DMAEx_MultiBufferStart_IT+0xfa8>
 802cebe:	2301      	movs	r3, #1
 802cec0:	e004      	b.n	802cecc <HAL_DMAEx_MultiBufferStart_IT+0xfa8>
 802cec2:	2301      	movs	r3, #1
 802cec4:	e002      	b.n	802cecc <HAL_DMAEx_MultiBufferStart_IT+0xfa8>
 802cec6:	2301      	movs	r3, #1
 802cec8:	e000      	b.n	802cecc <HAL_DMAEx_MultiBufferStart_IT+0xfa8>
 802ceca:	2301      	movs	r3, #1
 802cecc:	4a8a      	ldr	r2, [pc, #552]	@ (802d0f8 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>)
 802cece:	60d3      	str	r3, [r2, #12]
 802ced0:	e141      	b.n	802d156 <HAL_DMAEx_MultiBufferStart_IT+0x1232>
 802ced2:	68fb      	ldr	r3, [r7, #12]
 802ced4:	681b      	ldr	r3, [r3, #0]
 802ced6:	461a      	mov	r2, r3
 802ced8:	4b88      	ldr	r3, [pc, #544]	@ (802d0fc <HAL_DMAEx_MultiBufferStart_IT+0x11d8>)
 802ceda:	429a      	cmp	r2, r3
 802cedc:	d95c      	bls.n	802cf98 <HAL_DMAEx_MultiBufferStart_IT+0x1074>
 802cede:	68fb      	ldr	r3, [r7, #12]
 802cee0:	681b      	ldr	r3, [r3, #0]
 802cee2:	4a87      	ldr	r2, [pc, #540]	@ (802d100 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>)
 802cee4:	4293      	cmp	r3, r2
 802cee6:	d053      	beq.n	802cf90 <HAL_DMAEx_MultiBufferStart_IT+0x106c>
 802cee8:	68fb      	ldr	r3, [r7, #12]
 802ceea:	681b      	ldr	r3, [r3, #0]
 802ceec:	4a85      	ldr	r2, [pc, #532]	@ (802d104 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>)
 802ceee:	4293      	cmp	r3, r2
 802cef0:	d04c      	beq.n	802cf8c <HAL_DMAEx_MultiBufferStart_IT+0x1068>
 802cef2:	68fb      	ldr	r3, [r7, #12]
 802cef4:	681b      	ldr	r3, [r3, #0]
 802cef6:	4a84      	ldr	r2, [pc, #528]	@ (802d108 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>)
 802cef8:	4293      	cmp	r3, r2
 802cefa:	d045      	beq.n	802cf88 <HAL_DMAEx_MultiBufferStart_IT+0x1064>
 802cefc:	68fb      	ldr	r3, [r7, #12]
 802cefe:	681b      	ldr	r3, [r3, #0]
 802cf00:	4a82      	ldr	r2, [pc, #520]	@ (802d10c <HAL_DMAEx_MultiBufferStart_IT+0x11e8>)
 802cf02:	4293      	cmp	r3, r2
 802cf04:	d03e      	beq.n	802cf84 <HAL_DMAEx_MultiBufferStart_IT+0x1060>
 802cf06:	68fb      	ldr	r3, [r7, #12]
 802cf08:	681b      	ldr	r3, [r3, #0]
 802cf0a:	4a81      	ldr	r2, [pc, #516]	@ (802d110 <HAL_DMAEx_MultiBufferStart_IT+0x11ec>)
 802cf0c:	4293      	cmp	r3, r2
 802cf0e:	d037      	beq.n	802cf80 <HAL_DMAEx_MultiBufferStart_IT+0x105c>
 802cf10:	68fb      	ldr	r3, [r7, #12]
 802cf12:	681b      	ldr	r3, [r3, #0]
 802cf14:	4a7f      	ldr	r2, [pc, #508]	@ (802d114 <HAL_DMAEx_MultiBufferStart_IT+0x11f0>)
 802cf16:	4293      	cmp	r3, r2
 802cf18:	d030      	beq.n	802cf7c <HAL_DMAEx_MultiBufferStart_IT+0x1058>
 802cf1a:	68fb      	ldr	r3, [r7, #12]
 802cf1c:	681b      	ldr	r3, [r3, #0]
 802cf1e:	4a7e      	ldr	r2, [pc, #504]	@ (802d118 <HAL_DMAEx_MultiBufferStart_IT+0x11f4>)
 802cf20:	4293      	cmp	r3, r2
 802cf22:	d029      	beq.n	802cf78 <HAL_DMAEx_MultiBufferStart_IT+0x1054>
 802cf24:	68fb      	ldr	r3, [r7, #12]
 802cf26:	681b      	ldr	r3, [r3, #0]
 802cf28:	4a7c      	ldr	r2, [pc, #496]	@ (802d11c <HAL_DMAEx_MultiBufferStart_IT+0x11f8>)
 802cf2a:	4293      	cmp	r3, r2
 802cf2c:	d022      	beq.n	802cf74 <HAL_DMAEx_MultiBufferStart_IT+0x1050>
 802cf2e:	68fb      	ldr	r3, [r7, #12]
 802cf30:	681b      	ldr	r3, [r3, #0]
 802cf32:	4a7b      	ldr	r2, [pc, #492]	@ (802d120 <HAL_DMAEx_MultiBufferStart_IT+0x11fc>)
 802cf34:	4293      	cmp	r3, r2
 802cf36:	d01a      	beq.n	802cf6e <HAL_DMAEx_MultiBufferStart_IT+0x104a>
 802cf38:	68fb      	ldr	r3, [r7, #12]
 802cf3a:	681b      	ldr	r3, [r3, #0]
 802cf3c:	4a79      	ldr	r2, [pc, #484]	@ (802d124 <HAL_DMAEx_MultiBufferStart_IT+0x1200>)
 802cf3e:	4293      	cmp	r3, r2
 802cf40:	d012      	beq.n	802cf68 <HAL_DMAEx_MultiBufferStart_IT+0x1044>
 802cf42:	68fb      	ldr	r3, [r7, #12]
 802cf44:	681b      	ldr	r3, [r3, #0]
 802cf46:	4a78      	ldr	r2, [pc, #480]	@ (802d128 <HAL_DMAEx_MultiBufferStart_IT+0x1204>)
 802cf48:	4293      	cmp	r3, r2
 802cf4a:	d00a      	beq.n	802cf62 <HAL_DMAEx_MultiBufferStart_IT+0x103e>
 802cf4c:	68fb      	ldr	r3, [r7, #12]
 802cf4e:	681b      	ldr	r3, [r3, #0]
 802cf50:	4a76      	ldr	r2, [pc, #472]	@ (802d12c <HAL_DMAEx_MultiBufferStart_IT+0x1208>)
 802cf52:	4293      	cmp	r3, r2
 802cf54:	d102      	bne.n	802cf5c <HAL_DMAEx_MultiBufferStart_IT+0x1038>
 802cf56:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 802cf5a:	e01a      	b.n	802cf92 <HAL_DMAEx_MultiBufferStart_IT+0x106e>
 802cf5c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 802cf60:	e017      	b.n	802cf92 <HAL_DMAEx_MultiBufferStart_IT+0x106e>
 802cf62:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 802cf66:	e014      	b.n	802cf92 <HAL_DMAEx_MultiBufferStart_IT+0x106e>
 802cf68:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 802cf6c:	e011      	b.n	802cf92 <HAL_DMAEx_MultiBufferStart_IT+0x106e>
 802cf6e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 802cf72:	e00e      	b.n	802cf92 <HAL_DMAEx_MultiBufferStart_IT+0x106e>
 802cf74:	2340      	movs	r3, #64	@ 0x40
 802cf76:	e00c      	b.n	802cf92 <HAL_DMAEx_MultiBufferStart_IT+0x106e>
 802cf78:	2340      	movs	r3, #64	@ 0x40
 802cf7a:	e00a      	b.n	802cf92 <HAL_DMAEx_MultiBufferStart_IT+0x106e>
 802cf7c:	2340      	movs	r3, #64	@ 0x40
 802cf7e:	e008      	b.n	802cf92 <HAL_DMAEx_MultiBufferStart_IT+0x106e>
 802cf80:	2340      	movs	r3, #64	@ 0x40
 802cf82:	e006      	b.n	802cf92 <HAL_DMAEx_MultiBufferStart_IT+0x106e>
 802cf84:	2301      	movs	r3, #1
 802cf86:	e004      	b.n	802cf92 <HAL_DMAEx_MultiBufferStart_IT+0x106e>
 802cf88:	2301      	movs	r3, #1
 802cf8a:	e002      	b.n	802cf92 <HAL_DMAEx_MultiBufferStart_IT+0x106e>
 802cf8c:	2301      	movs	r3, #1
 802cf8e:	e000      	b.n	802cf92 <HAL_DMAEx_MultiBufferStart_IT+0x106e>
 802cf90:	2301      	movs	r3, #1
 802cf92:	4a59      	ldr	r2, [pc, #356]	@ (802d0f8 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>)
 802cf94:	6093      	str	r3, [r2, #8]
 802cf96:	e0de      	b.n	802d156 <HAL_DMAEx_MultiBufferStart_IT+0x1232>
 802cf98:	68fb      	ldr	r3, [r7, #12]
 802cf9a:	681b      	ldr	r3, [r3, #0]
 802cf9c:	461a      	mov	r2, r3
 802cf9e:	4b64      	ldr	r3, [pc, #400]	@ (802d130 <HAL_DMAEx_MultiBufferStart_IT+0x120c>)
 802cfa0:	429a      	cmp	r2, r3
 802cfa2:	d95c      	bls.n	802d05e <HAL_DMAEx_MultiBufferStart_IT+0x113a>
 802cfa4:	68fb      	ldr	r3, [r7, #12]
 802cfa6:	681b      	ldr	r3, [r3, #0]
 802cfa8:	4a55      	ldr	r2, [pc, #340]	@ (802d100 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>)
 802cfaa:	4293      	cmp	r3, r2
 802cfac:	d053      	beq.n	802d056 <HAL_DMAEx_MultiBufferStart_IT+0x1132>
 802cfae:	68fb      	ldr	r3, [r7, #12]
 802cfb0:	681b      	ldr	r3, [r3, #0]
 802cfb2:	4a54      	ldr	r2, [pc, #336]	@ (802d104 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>)
 802cfb4:	4293      	cmp	r3, r2
 802cfb6:	d04c      	beq.n	802d052 <HAL_DMAEx_MultiBufferStart_IT+0x112e>
 802cfb8:	68fb      	ldr	r3, [r7, #12]
 802cfba:	681b      	ldr	r3, [r3, #0]
 802cfbc:	4a52      	ldr	r2, [pc, #328]	@ (802d108 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>)
 802cfbe:	4293      	cmp	r3, r2
 802cfc0:	d045      	beq.n	802d04e <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 802cfc2:	68fb      	ldr	r3, [r7, #12]
 802cfc4:	681b      	ldr	r3, [r3, #0]
 802cfc6:	4a51      	ldr	r2, [pc, #324]	@ (802d10c <HAL_DMAEx_MultiBufferStart_IT+0x11e8>)
 802cfc8:	4293      	cmp	r3, r2
 802cfca:	d03e      	beq.n	802d04a <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 802cfcc:	68fb      	ldr	r3, [r7, #12]
 802cfce:	681b      	ldr	r3, [r3, #0]
 802cfd0:	4a4f      	ldr	r2, [pc, #316]	@ (802d110 <HAL_DMAEx_MultiBufferStart_IT+0x11ec>)
 802cfd2:	4293      	cmp	r3, r2
 802cfd4:	d037      	beq.n	802d046 <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 802cfd6:	68fb      	ldr	r3, [r7, #12]
 802cfd8:	681b      	ldr	r3, [r3, #0]
 802cfda:	4a4e      	ldr	r2, [pc, #312]	@ (802d114 <HAL_DMAEx_MultiBufferStart_IT+0x11f0>)
 802cfdc:	4293      	cmp	r3, r2
 802cfde:	d030      	beq.n	802d042 <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 802cfe0:	68fb      	ldr	r3, [r7, #12]
 802cfe2:	681b      	ldr	r3, [r3, #0]
 802cfe4:	4a4c      	ldr	r2, [pc, #304]	@ (802d118 <HAL_DMAEx_MultiBufferStart_IT+0x11f4>)
 802cfe6:	4293      	cmp	r3, r2
 802cfe8:	d029      	beq.n	802d03e <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 802cfea:	68fb      	ldr	r3, [r7, #12]
 802cfec:	681b      	ldr	r3, [r3, #0]
 802cfee:	4a4b      	ldr	r2, [pc, #300]	@ (802d11c <HAL_DMAEx_MultiBufferStart_IT+0x11f8>)
 802cff0:	4293      	cmp	r3, r2
 802cff2:	d022      	beq.n	802d03a <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 802cff4:	68fb      	ldr	r3, [r7, #12]
 802cff6:	681b      	ldr	r3, [r3, #0]
 802cff8:	4a49      	ldr	r2, [pc, #292]	@ (802d120 <HAL_DMAEx_MultiBufferStart_IT+0x11fc>)
 802cffa:	4293      	cmp	r3, r2
 802cffc:	d01a      	beq.n	802d034 <HAL_DMAEx_MultiBufferStart_IT+0x1110>
 802cffe:	68fb      	ldr	r3, [r7, #12]
 802d000:	681b      	ldr	r3, [r3, #0]
 802d002:	4a48      	ldr	r2, [pc, #288]	@ (802d124 <HAL_DMAEx_MultiBufferStart_IT+0x1200>)
 802d004:	4293      	cmp	r3, r2
 802d006:	d012      	beq.n	802d02e <HAL_DMAEx_MultiBufferStart_IT+0x110a>
 802d008:	68fb      	ldr	r3, [r7, #12]
 802d00a:	681b      	ldr	r3, [r3, #0]
 802d00c:	4a46      	ldr	r2, [pc, #280]	@ (802d128 <HAL_DMAEx_MultiBufferStart_IT+0x1204>)
 802d00e:	4293      	cmp	r3, r2
 802d010:	d00a      	beq.n	802d028 <HAL_DMAEx_MultiBufferStart_IT+0x1104>
 802d012:	68fb      	ldr	r3, [r7, #12]
 802d014:	681b      	ldr	r3, [r3, #0]
 802d016:	4a45      	ldr	r2, [pc, #276]	@ (802d12c <HAL_DMAEx_MultiBufferStart_IT+0x1208>)
 802d018:	4293      	cmp	r3, r2
 802d01a:	d102      	bne.n	802d022 <HAL_DMAEx_MultiBufferStart_IT+0x10fe>
 802d01c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 802d020:	e01a      	b.n	802d058 <HAL_DMAEx_MultiBufferStart_IT+0x1134>
 802d022:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 802d026:	e017      	b.n	802d058 <HAL_DMAEx_MultiBufferStart_IT+0x1134>
 802d028:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 802d02c:	e014      	b.n	802d058 <HAL_DMAEx_MultiBufferStart_IT+0x1134>
 802d02e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 802d032:	e011      	b.n	802d058 <HAL_DMAEx_MultiBufferStart_IT+0x1134>
 802d034:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 802d038:	e00e      	b.n	802d058 <HAL_DMAEx_MultiBufferStart_IT+0x1134>
 802d03a:	2340      	movs	r3, #64	@ 0x40
 802d03c:	e00c      	b.n	802d058 <HAL_DMAEx_MultiBufferStart_IT+0x1134>
 802d03e:	2340      	movs	r3, #64	@ 0x40
 802d040:	e00a      	b.n	802d058 <HAL_DMAEx_MultiBufferStart_IT+0x1134>
 802d042:	2340      	movs	r3, #64	@ 0x40
 802d044:	e008      	b.n	802d058 <HAL_DMAEx_MultiBufferStart_IT+0x1134>
 802d046:	2340      	movs	r3, #64	@ 0x40
 802d048:	e006      	b.n	802d058 <HAL_DMAEx_MultiBufferStart_IT+0x1134>
 802d04a:	2301      	movs	r3, #1
 802d04c:	e004      	b.n	802d058 <HAL_DMAEx_MultiBufferStart_IT+0x1134>
 802d04e:	2301      	movs	r3, #1
 802d050:	e002      	b.n	802d058 <HAL_DMAEx_MultiBufferStart_IT+0x1134>
 802d052:	2301      	movs	r3, #1
 802d054:	e000      	b.n	802d058 <HAL_DMAEx_MultiBufferStart_IT+0x1134>
 802d056:	2301      	movs	r3, #1
 802d058:	4a36      	ldr	r2, [pc, #216]	@ (802d134 <HAL_DMAEx_MultiBufferStart_IT+0x1210>)
 802d05a:	60d3      	str	r3, [r2, #12]
 802d05c:	e07b      	b.n	802d156 <HAL_DMAEx_MultiBufferStart_IT+0x1232>
 802d05e:	68fb      	ldr	r3, [r7, #12]
 802d060:	681b      	ldr	r3, [r3, #0]
 802d062:	4a27      	ldr	r2, [pc, #156]	@ (802d100 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>)
 802d064:	4293      	cmp	r3, r2
 802d066:	d073      	beq.n	802d150 <HAL_DMAEx_MultiBufferStart_IT+0x122c>
 802d068:	68fb      	ldr	r3, [r7, #12]
 802d06a:	681b      	ldr	r3, [r3, #0]
 802d06c:	4a25      	ldr	r2, [pc, #148]	@ (802d104 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>)
 802d06e:	4293      	cmp	r3, r2
 802d070:	d06c      	beq.n	802d14c <HAL_DMAEx_MultiBufferStart_IT+0x1228>
 802d072:	68fb      	ldr	r3, [r7, #12]
 802d074:	681b      	ldr	r3, [r3, #0]
 802d076:	4a24      	ldr	r2, [pc, #144]	@ (802d108 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>)
 802d078:	4293      	cmp	r3, r2
 802d07a:	d065      	beq.n	802d148 <HAL_DMAEx_MultiBufferStart_IT+0x1224>
 802d07c:	68fb      	ldr	r3, [r7, #12]
 802d07e:	681b      	ldr	r3, [r3, #0]
 802d080:	4a22      	ldr	r2, [pc, #136]	@ (802d10c <HAL_DMAEx_MultiBufferStart_IT+0x11e8>)
 802d082:	4293      	cmp	r3, r2
 802d084:	d05e      	beq.n	802d144 <HAL_DMAEx_MultiBufferStart_IT+0x1220>
 802d086:	68fb      	ldr	r3, [r7, #12]
 802d088:	681b      	ldr	r3, [r3, #0]
 802d08a:	4a21      	ldr	r2, [pc, #132]	@ (802d110 <HAL_DMAEx_MultiBufferStart_IT+0x11ec>)
 802d08c:	4293      	cmp	r3, r2
 802d08e:	d057      	beq.n	802d140 <HAL_DMAEx_MultiBufferStart_IT+0x121c>
 802d090:	68fb      	ldr	r3, [r7, #12]
 802d092:	681b      	ldr	r3, [r3, #0]
 802d094:	4a1f      	ldr	r2, [pc, #124]	@ (802d114 <HAL_DMAEx_MultiBufferStart_IT+0x11f0>)
 802d096:	4293      	cmp	r3, r2
 802d098:	d050      	beq.n	802d13c <HAL_DMAEx_MultiBufferStart_IT+0x1218>
 802d09a:	68fb      	ldr	r3, [r7, #12]
 802d09c:	681b      	ldr	r3, [r3, #0]
 802d09e:	4a1e      	ldr	r2, [pc, #120]	@ (802d118 <HAL_DMAEx_MultiBufferStart_IT+0x11f4>)
 802d0a0:	4293      	cmp	r3, r2
 802d0a2:	d049      	beq.n	802d138 <HAL_DMAEx_MultiBufferStart_IT+0x1214>
 802d0a4:	68fb      	ldr	r3, [r7, #12]
 802d0a6:	681b      	ldr	r3, [r3, #0]
 802d0a8:	4a1c      	ldr	r2, [pc, #112]	@ (802d11c <HAL_DMAEx_MultiBufferStart_IT+0x11f8>)
 802d0aa:	4293      	cmp	r3, r2
 802d0ac:	d022      	beq.n	802d0f4 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 802d0ae:	68fb      	ldr	r3, [r7, #12]
 802d0b0:	681b      	ldr	r3, [r3, #0]
 802d0b2:	4a1b      	ldr	r2, [pc, #108]	@ (802d120 <HAL_DMAEx_MultiBufferStart_IT+0x11fc>)
 802d0b4:	4293      	cmp	r3, r2
 802d0b6:	d01a      	beq.n	802d0ee <HAL_DMAEx_MultiBufferStart_IT+0x11ca>
 802d0b8:	68fb      	ldr	r3, [r7, #12]
 802d0ba:	681b      	ldr	r3, [r3, #0]
 802d0bc:	4a19      	ldr	r2, [pc, #100]	@ (802d124 <HAL_DMAEx_MultiBufferStart_IT+0x1200>)
 802d0be:	4293      	cmp	r3, r2
 802d0c0:	d012      	beq.n	802d0e8 <HAL_DMAEx_MultiBufferStart_IT+0x11c4>
 802d0c2:	68fb      	ldr	r3, [r7, #12]
 802d0c4:	681b      	ldr	r3, [r3, #0]
 802d0c6:	4a18      	ldr	r2, [pc, #96]	@ (802d128 <HAL_DMAEx_MultiBufferStart_IT+0x1204>)
 802d0c8:	4293      	cmp	r3, r2
 802d0ca:	d00a      	beq.n	802d0e2 <HAL_DMAEx_MultiBufferStart_IT+0x11be>
 802d0cc:	68fb      	ldr	r3, [r7, #12]
 802d0ce:	681b      	ldr	r3, [r3, #0]
 802d0d0:	4a16      	ldr	r2, [pc, #88]	@ (802d12c <HAL_DMAEx_MultiBufferStart_IT+0x1208>)
 802d0d2:	4293      	cmp	r3, r2
 802d0d4:	d102      	bne.n	802d0dc <HAL_DMAEx_MultiBufferStart_IT+0x11b8>
 802d0d6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 802d0da:	e03a      	b.n	802d152 <HAL_DMAEx_MultiBufferStart_IT+0x122e>
 802d0dc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 802d0e0:	e037      	b.n	802d152 <HAL_DMAEx_MultiBufferStart_IT+0x122e>
 802d0e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 802d0e6:	e034      	b.n	802d152 <HAL_DMAEx_MultiBufferStart_IT+0x122e>
 802d0e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 802d0ec:	e031      	b.n	802d152 <HAL_DMAEx_MultiBufferStart_IT+0x122e>
 802d0ee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 802d0f2:	e02e      	b.n	802d152 <HAL_DMAEx_MultiBufferStart_IT+0x122e>
 802d0f4:	2340      	movs	r3, #64	@ 0x40
 802d0f6:	e02c      	b.n	802d152 <HAL_DMAEx_MultiBufferStart_IT+0x122e>
 802d0f8:	40026400 	.word	0x40026400
 802d0fc:	400260b8 	.word	0x400260b8
 802d100:	40026010 	.word	0x40026010
 802d104:	40026410 	.word	0x40026410
 802d108:	40026070 	.word	0x40026070
 802d10c:	40026470 	.word	0x40026470
 802d110:	40026028 	.word	0x40026028
 802d114:	40026428 	.word	0x40026428
 802d118:	40026088 	.word	0x40026088
 802d11c:	40026488 	.word	0x40026488
 802d120:	40026040 	.word	0x40026040
 802d124:	40026440 	.word	0x40026440
 802d128:	400260a0 	.word	0x400260a0
 802d12c:	400264a0 	.word	0x400264a0
 802d130:	40026058 	.word	0x40026058
 802d134:	40026000 	.word	0x40026000
 802d138:	2340      	movs	r3, #64	@ 0x40
 802d13a:	e00a      	b.n	802d152 <HAL_DMAEx_MultiBufferStart_IT+0x122e>
 802d13c:	2340      	movs	r3, #64	@ 0x40
 802d13e:	e008      	b.n	802d152 <HAL_DMAEx_MultiBufferStart_IT+0x122e>
 802d140:	2340      	movs	r3, #64	@ 0x40
 802d142:	e006      	b.n	802d152 <HAL_DMAEx_MultiBufferStart_IT+0x122e>
 802d144:	2301      	movs	r3, #1
 802d146:	e004      	b.n	802d152 <HAL_DMAEx_MultiBufferStart_IT+0x122e>
 802d148:	2301      	movs	r3, #1
 802d14a:	e002      	b.n	802d152 <HAL_DMAEx_MultiBufferStart_IT+0x122e>
 802d14c:	2301      	movs	r3, #1
 802d14e:	e000      	b.n	802d152 <HAL_DMAEx_MultiBufferStart_IT+0x122e>
 802d150:	2301      	movs	r3, #1
 802d152:	4a1b      	ldr	r2, [pc, #108]	@ (802d1c0 <HAL_DMAEx_MultiBufferStart_IT+0x129c>)
 802d154:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 802d156:	68fb      	ldr	r3, [r7, #12]
 802d158:	681b      	ldr	r3, [r3, #0]
 802d15a:	681a      	ldr	r2, [r3, #0]
 802d15c:	68fb      	ldr	r3, [r7, #12]
 802d15e:	681b      	ldr	r3, [r3, #0]
 802d160:	f042 0216 	orr.w	r2, r2, #22
 802d164:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 802d166:	68fb      	ldr	r3, [r7, #12]
 802d168:	681b      	ldr	r3, [r3, #0]
 802d16a:	695a      	ldr	r2, [r3, #20]
 802d16c:	68fb      	ldr	r3, [r7, #12]
 802d16e:	681b      	ldr	r3, [r3, #0]
 802d170:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 802d174:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 802d176:	68fb      	ldr	r3, [r7, #12]
 802d178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802d17a:	2b00      	cmp	r3, #0
 802d17c:	d103      	bne.n	802d186 <HAL_DMAEx_MultiBufferStart_IT+0x1262>
 802d17e:	68fb      	ldr	r3, [r7, #12]
 802d180:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 802d182:	2b00      	cmp	r3, #0
 802d184:	d007      	beq.n	802d196 <HAL_DMAEx_MultiBufferStart_IT+0x1272>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 802d186:	68fb      	ldr	r3, [r7, #12]
 802d188:	681b      	ldr	r3, [r3, #0]
 802d18a:	681a      	ldr	r2, [r3, #0]
 802d18c:	68fb      	ldr	r3, [r7, #12]
 802d18e:	681b      	ldr	r3, [r3, #0]
 802d190:	f042 0208 	orr.w	r2, r2, #8
 802d194:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 802d196:	68fb      	ldr	r3, [r7, #12]
 802d198:	681b      	ldr	r3, [r3, #0]
 802d19a:	681a      	ldr	r2, [r3, #0]
 802d19c:	68fb      	ldr	r3, [r7, #12]
 802d19e:	681b      	ldr	r3, [r3, #0]
 802d1a0:	f042 0201 	orr.w	r2, r2, #1
 802d1a4:	601a      	str	r2, [r3, #0]
 802d1a6:	e005      	b.n	802d1b4 <HAL_DMAEx_MultiBufferStart_IT+0x1290>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 802d1a8:	68fb      	ldr	r3, [r7, #12]
 802d1aa:	2200      	movs	r2, #0
 802d1ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 802d1b0:	2302      	movs	r3, #2
 802d1b2:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 802d1b4:	7dfb      	ldrb	r3, [r7, #23]
}
 802d1b6:	4618      	mov	r0, r3
 802d1b8:	3718      	adds	r7, #24
 802d1ba:	46bd      	mov	sp, r7
 802d1bc:	bd80      	pop	{r7, pc}
 802d1be:	bf00      	nop
 802d1c0:	40026000 	.word	0x40026000

0802d1c4 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 802d1c4:	b480      	push	{r7}
 802d1c6:	b085      	sub	sp, #20
 802d1c8:	af00      	add	r7, sp, #0
 802d1ca:	60f8      	str	r0, [r7, #12]
 802d1cc:	60b9      	str	r1, [r7, #8]
 802d1ce:	4613      	mov	r3, r2
 802d1d0:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 802d1d2:	79fb      	ldrb	r3, [r7, #7]
 802d1d4:	2b00      	cmp	r3, #0
 802d1d6:	d104      	bne.n	802d1e2 <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 802d1d8:	68fb      	ldr	r3, [r7, #12]
 802d1da:	681b      	ldr	r3, [r3, #0]
 802d1dc:	68ba      	ldr	r2, [r7, #8]
 802d1de:	60da      	str	r2, [r3, #12]
 802d1e0:	e003      	b.n	802d1ea <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 802d1e2:	68fb      	ldr	r3, [r7, #12]
 802d1e4:	681b      	ldr	r3, [r3, #0]
 802d1e6:	68ba      	ldr	r2, [r7, #8]
 802d1e8:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 802d1ea:	2300      	movs	r3, #0
}
 802d1ec:	4618      	mov	r0, r3
 802d1ee:	3714      	adds	r7, #20
 802d1f0:	46bd      	mov	sp, r7
 802d1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d1f6:	4770      	bx	lr

0802d1f8 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 802d1f8:	b480      	push	{r7}
 802d1fa:	b085      	sub	sp, #20
 802d1fc:	af00      	add	r7, sp, #0
 802d1fe:	60f8      	str	r0, [r7, #12]
 802d200:	60b9      	str	r1, [r7, #8]
 802d202:	607a      	str	r2, [r7, #4]
 802d204:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 802d206:	68fb      	ldr	r3, [r7, #12]
 802d208:	681b      	ldr	r3, [r3, #0]
 802d20a:	683a      	ldr	r2, [r7, #0]
 802d20c:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 802d20e:	68fb      	ldr	r3, [r7, #12]
 802d210:	689b      	ldr	r3, [r3, #8]
 802d212:	2b40      	cmp	r3, #64	@ 0x40
 802d214:	d108      	bne.n	802d228 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 802d216:	68fb      	ldr	r3, [r7, #12]
 802d218:	681b      	ldr	r3, [r3, #0]
 802d21a:	687a      	ldr	r2, [r7, #4]
 802d21c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 802d21e:	68fb      	ldr	r3, [r7, #12]
 802d220:	681b      	ldr	r3, [r3, #0]
 802d222:	68ba      	ldr	r2, [r7, #8]
 802d224:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 802d226:	e007      	b.n	802d238 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 802d228:	68fb      	ldr	r3, [r7, #12]
 802d22a:	681b      	ldr	r3, [r3, #0]
 802d22c:	68ba      	ldr	r2, [r7, #8]
 802d22e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 802d230:	68fb      	ldr	r3, [r7, #12]
 802d232:	681b      	ldr	r3, [r3, #0]
 802d234:	687a      	ldr	r2, [r7, #4]
 802d236:	60da      	str	r2, [r3, #12]
}
 802d238:	bf00      	nop
 802d23a:	3714      	adds	r7, #20
 802d23c:	46bd      	mov	sp, r7
 802d23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d242:	4770      	bx	lr

0802d244 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 802d244:	b580      	push	{r7, lr}
 802d246:	b086      	sub	sp, #24
 802d248:	af00      	add	r7, sp, #0
 802d24a:	60f8      	str	r0, [r7, #12]
 802d24c:	60b9      	str	r1, [r7, #8]
 802d24e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 802d252:	2301      	movs	r3, #1
 802d254:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 802d256:	4b2b      	ldr	r3, [pc, #172]	@ (802d304 <HAL_FLASH_Program+0xc0>)
 802d258:	7e1b      	ldrb	r3, [r3, #24]
 802d25a:	2b01      	cmp	r3, #1
 802d25c:	d101      	bne.n	802d262 <HAL_FLASH_Program+0x1e>
 802d25e:	2302      	movs	r3, #2
 802d260:	e04b      	b.n	802d2fa <HAL_FLASH_Program+0xb6>
 802d262:	4b28      	ldr	r3, [pc, #160]	@ (802d304 <HAL_FLASH_Program+0xc0>)
 802d264:	2201      	movs	r2, #1
 802d266:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 802d268:	68fb      	ldr	r3, [r7, #12]
 802d26a:	2b00      	cmp	r3, #0
 802d26c:	d00c      	beq.n	802d288 <HAL_FLASH_Program+0x44>
 802d26e:	68fb      	ldr	r3, [r7, #12]
 802d270:	2b01      	cmp	r3, #1
 802d272:	d009      	beq.n	802d288 <HAL_FLASH_Program+0x44>
 802d274:	68fb      	ldr	r3, [r7, #12]
 802d276:	2b02      	cmp	r3, #2
 802d278:	d006      	beq.n	802d288 <HAL_FLASH_Program+0x44>
 802d27a:	68fb      	ldr	r3, [r7, #12]
 802d27c:	2b03      	cmp	r3, #3
 802d27e:	d003      	beq.n	802d288 <HAL_FLASH_Program+0x44>
 802d280:	21a2      	movs	r1, #162	@ 0xa2
 802d282:	4821      	ldr	r0, [pc, #132]	@ (802d308 <HAL_FLASH_Program+0xc4>)
 802d284:	f7fa fd37 	bl	8027cf6 <assert_failed>

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 802d288:	f24c 3050 	movw	r0, #50000	@ 0xc350
 802d28c:	f000 f92e 	bl	802d4ec <FLASH_WaitForLastOperation>
 802d290:	4603      	mov	r3, r0
 802d292:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 802d294:	7dfb      	ldrb	r3, [r7, #23]
 802d296:	2b00      	cmp	r3, #0
 802d298:	d12b      	bne.n	802d2f2 <HAL_FLASH_Program+0xae>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 802d29a:	68fb      	ldr	r3, [r7, #12]
 802d29c:	2b00      	cmp	r3, #0
 802d29e:	d105      	bne.n	802d2ac <HAL_FLASH_Program+0x68>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 802d2a0:	783b      	ldrb	r3, [r7, #0]
 802d2a2:	4619      	mov	r1, r3
 802d2a4:	68b8      	ldr	r0, [r7, #8]
 802d2a6:	f000 fa25 	bl	802d6f4 <FLASH_Program_Byte>
 802d2aa:	e016      	b.n	802d2da <HAL_FLASH_Program+0x96>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 802d2ac:	68fb      	ldr	r3, [r7, #12]
 802d2ae:	2b01      	cmp	r3, #1
 802d2b0:	d105      	bne.n	802d2be <HAL_FLASH_Program+0x7a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 802d2b2:	883b      	ldrh	r3, [r7, #0]
 802d2b4:	4619      	mov	r1, r3
 802d2b6:	68b8      	ldr	r0, [r7, #8]
 802d2b8:	f000 f9e0 	bl	802d67c <FLASH_Program_HalfWord>
 802d2bc:	e00d      	b.n	802d2da <HAL_FLASH_Program+0x96>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 802d2be:	68fb      	ldr	r3, [r7, #12]
 802d2c0:	2b02      	cmp	r3, #2
 802d2c2:	d105      	bne.n	802d2d0 <HAL_FLASH_Program+0x8c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 802d2c4:	683b      	ldr	r3, [r7, #0]
 802d2c6:	4619      	mov	r1, r3
 802d2c8:	68b8      	ldr	r0, [r7, #8]
 802d2ca:	f000 f99b 	bl	802d604 <FLASH_Program_Word>
 802d2ce:	e004      	b.n	802d2da <HAL_FLASH_Program+0x96>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 802d2d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 802d2d4:	68b8      	ldr	r0, [r7, #8]
 802d2d6:	f000 f949 	bl	802d56c <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 802d2da:	f24c 3050 	movw	r0, #50000	@ 0xc350
 802d2de:	f000 f905 	bl	802d4ec <FLASH_WaitForLastOperation>
 802d2e2:	4603      	mov	r3, r0
 802d2e4:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 802d2e6:	4b09      	ldr	r3, [pc, #36]	@ (802d30c <HAL_FLASH_Program+0xc8>)
 802d2e8:	691b      	ldr	r3, [r3, #16]
 802d2ea:	4a08      	ldr	r2, [pc, #32]	@ (802d30c <HAL_FLASH_Program+0xc8>)
 802d2ec:	f023 0301 	bic.w	r3, r3, #1
 802d2f0:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 802d2f2:	4b04      	ldr	r3, [pc, #16]	@ (802d304 <HAL_FLASH_Program+0xc0>)
 802d2f4:	2200      	movs	r2, #0
 802d2f6:	761a      	strb	r2, [r3, #24]

  return status;
 802d2f8:	7dfb      	ldrb	r3, [r7, #23]
}
 802d2fa:	4618      	mov	r0, r3
 802d2fc:	3718      	adds	r7, #24
 802d2fe:	46bd      	mov	sp, r7
 802d300:	bd80      	pop	{r7, pc}
 802d302:	bf00      	nop
 802d304:	2000077c 	.word	0x2000077c
 802d308:	08038430 	.word	0x08038430
 802d30c:	40023c00 	.word	0x40023c00

0802d310 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 802d310:	b580      	push	{r7, lr}
 802d312:	b082      	sub	sp, #8
 802d314:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 802d316:	2300      	movs	r3, #0
 802d318:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 802d31a:	4b49      	ldr	r3, [pc, #292]	@ (802d440 <HAL_FLASH_IRQHandler+0x130>)
 802d31c:	68db      	ldr	r3, [r3, #12]
 802d31e:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 802d322:	2b00      	cmp	r3, #0
 802d324:	d020      	beq.n	802d368 <HAL_FLASH_IRQHandler+0x58>
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if (pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 802d326:	4b47      	ldr	r3, [pc, #284]	@ (802d444 <HAL_FLASH_IRQHandler+0x134>)
 802d328:	781b      	ldrb	r3, [r3, #0]
 802d32a:	b2db      	uxtb	r3, r3
 802d32c:	2b01      	cmp	r3, #1
 802d32e:	d107      	bne.n	802d340 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 802d330:	4b44      	ldr	r3, [pc, #272]	@ (802d444 <HAL_FLASH_IRQHandler+0x134>)
 802d332:	68db      	ldr	r3, [r3, #12]
 802d334:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 802d336:	4b43      	ldr	r3, [pc, #268]	@ (802d444 <HAL_FLASH_IRQHandler+0x134>)
 802d338:	f04f 32ff 	mov.w	r2, #4294967295
 802d33c:	60da      	str	r2, [r3, #12]
 802d33e:	e00b      	b.n	802d358 <HAL_FLASH_IRQHandler+0x48>
    }
    else if (pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 802d340:	4b40      	ldr	r3, [pc, #256]	@ (802d444 <HAL_FLASH_IRQHandler+0x134>)
 802d342:	781b      	ldrb	r3, [r3, #0]
 802d344:	b2db      	uxtb	r3, r3
 802d346:	2b02      	cmp	r3, #2
 802d348:	d103      	bne.n	802d352 <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 802d34a:	4b3e      	ldr	r3, [pc, #248]	@ (802d444 <HAL_FLASH_IRQHandler+0x134>)
 802d34c:	691b      	ldr	r3, [r3, #16]
 802d34e:	607b      	str	r3, [r7, #4]
 802d350:	e002      	b.n	802d358 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 802d352:	4b3c      	ldr	r3, [pc, #240]	@ (802d444 <HAL_FLASH_IRQHandler+0x134>)
 802d354:	695b      	ldr	r3, [r3, #20]
 802d356:	607b      	str	r3, [r7, #4]
    }

    /*Save the Error code*/
    FLASH_SetErrorCode();
 802d358:	f000 fa06 	bl	802d768 <FLASH_SetErrorCode>

    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 802d35c:	6878      	ldr	r0, [r7, #4]
 802d35e:	f000 f87d 	bl	802d45c <HAL_FLASH_OperationErrorCallback>

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 802d362:	4b38      	ldr	r3, [pc, #224]	@ (802d444 <HAL_FLASH_IRQHandler+0x134>)
 802d364:	2200      	movs	r2, #0
 802d366:	701a      	strb	r2, [r3, #0]
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 802d368:	4b35      	ldr	r3, [pc, #212]	@ (802d440 <HAL_FLASH_IRQHandler+0x130>)
 802d36a:	68db      	ldr	r3, [r3, #12]
 802d36c:	f003 0301 	and.w	r3, r3, #1
 802d370:	2b00      	cmp	r3, #0
 802d372:	d04a      	beq.n	802d40a <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 802d374:	4b32      	ldr	r3, [pc, #200]	@ (802d440 <HAL_FLASH_IRQHandler+0x130>)
 802d376:	2201      	movs	r2, #1
 802d378:	60da      	str	r2, [r3, #12]

    if (pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 802d37a:	4b32      	ldr	r3, [pc, #200]	@ (802d444 <HAL_FLASH_IRQHandler+0x134>)
 802d37c:	781b      	ldrb	r3, [r3, #0]
 802d37e:	b2db      	uxtb	r3, r3
 802d380:	2b01      	cmp	r3, #1
 802d382:	d12d      	bne.n	802d3e0 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 802d384:	4b2f      	ldr	r3, [pc, #188]	@ (802d444 <HAL_FLASH_IRQHandler+0x134>)
 802d386:	685b      	ldr	r3, [r3, #4]
 802d388:	3b01      	subs	r3, #1
 802d38a:	4a2e      	ldr	r2, [pc, #184]	@ (802d444 <HAL_FLASH_IRQHandler+0x134>)
 802d38c:	6053      	str	r3, [r2, #4]

      /* Check if there are still sectors to erase*/
      if (pFlash.NbSectorsToErase != 0U)
 802d38e:	4b2d      	ldr	r3, [pc, #180]	@ (802d444 <HAL_FLASH_IRQHandler+0x134>)
 802d390:	685b      	ldr	r3, [r3, #4]
 802d392:	2b00      	cmp	r3, #0
 802d394:	d015      	beq.n	802d3c2 <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 802d396:	4b2b      	ldr	r3, [pc, #172]	@ (802d444 <HAL_FLASH_IRQHandler+0x134>)
 802d398:	68db      	ldr	r3, [r3, #12]
 802d39a:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 802d39c:	6878      	ldr	r0, [r7, #4]
 802d39e:	f000 f853 	bl	802d448 <HAL_FLASH_EndOfOperationCallback>

        /*Increment sector number*/
        pFlash.Sector++;
 802d3a2:	4b28      	ldr	r3, [pc, #160]	@ (802d444 <HAL_FLASH_IRQHandler+0x134>)
 802d3a4:	68db      	ldr	r3, [r3, #12]
 802d3a6:	3301      	adds	r3, #1
 802d3a8:	4a26      	ldr	r2, [pc, #152]	@ (802d444 <HAL_FLASH_IRQHandler+0x134>)
 802d3aa:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 802d3ac:	4b25      	ldr	r3, [pc, #148]	@ (802d444 <HAL_FLASH_IRQHandler+0x134>)
 802d3ae:	68db      	ldr	r3, [r3, #12]
 802d3b0:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 802d3b2:	4b24      	ldr	r3, [pc, #144]	@ (802d444 <HAL_FLASH_IRQHandler+0x134>)
 802d3b4:	7a1b      	ldrb	r3, [r3, #8]
 802d3b6:	b2db      	uxtb	r3, r3
 802d3b8:	4619      	mov	r1, r3
 802d3ba:	6878      	ldr	r0, [r7, #4]
 802d3bc:	f000 faf6 	bl	802d9ac <FLASH_Erase_Sector>
 802d3c0:	e023      	b.n	802d40a <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 802d3c2:	f04f 33ff 	mov.w	r3, #4294967295
 802d3c6:	607b      	str	r3, [r7, #4]
 802d3c8:	4a1e      	ldr	r2, [pc, #120]	@ (802d444 <HAL_FLASH_IRQHandler+0x134>)
 802d3ca:	687b      	ldr	r3, [r7, #4]
 802d3cc:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 802d3ce:	4b1d      	ldr	r3, [pc, #116]	@ (802d444 <HAL_FLASH_IRQHandler+0x134>)
 802d3d0:	2200      	movs	r2, #0
 802d3d2:	701a      	strb	r2, [r3, #0]

        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches();
 802d3d4:	f000 fb6c 	bl	802dab0 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 802d3d8:	6878      	ldr	r0, [r7, #4]
 802d3da:	f000 f835 	bl	802d448 <HAL_FLASH_EndOfOperationCallback>
 802d3de:	e014      	b.n	802d40a <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else
    {
      if (pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 802d3e0:	4b18      	ldr	r3, [pc, #96]	@ (802d444 <HAL_FLASH_IRQHandler+0x134>)
 802d3e2:	781b      	ldrb	r3, [r3, #0]
 802d3e4:	b2db      	uxtb	r3, r3
 802d3e6:	2b02      	cmp	r3, #2
 802d3e8:	d107      	bne.n	802d3fa <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches();
 802d3ea:	f000 fb61 	bl	802dab0 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 802d3ee:	4b15      	ldr	r3, [pc, #84]	@ (802d444 <HAL_FLASH_IRQHandler+0x134>)
 802d3f0:	691b      	ldr	r3, [r3, #16]
 802d3f2:	4618      	mov	r0, r3
 802d3f4:	f000 f828 	bl	802d448 <HAL_FLASH_EndOfOperationCallback>
 802d3f8:	e004      	b.n	802d404 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 802d3fa:	4b12      	ldr	r3, [pc, #72]	@ (802d444 <HAL_FLASH_IRQHandler+0x134>)
 802d3fc:	695b      	ldr	r3, [r3, #20]
 802d3fe:	4618      	mov	r0, r3
 802d400:	f000 f822 	bl	802d448 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 802d404:	4b0f      	ldr	r3, [pc, #60]	@ (802d444 <HAL_FLASH_IRQHandler+0x134>)
 802d406:	2200      	movs	r2, #0
 802d408:	701a      	strb	r2, [r3, #0]
    }
  }

  if (pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 802d40a:	4b0e      	ldr	r3, [pc, #56]	@ (802d444 <HAL_FLASH_IRQHandler+0x134>)
 802d40c:	781b      	ldrb	r3, [r3, #0]
 802d40e:	b2db      	uxtb	r3, r3
 802d410:	2b00      	cmp	r3, #0
 802d412:	d111      	bne.n	802d438 <HAL_FLASH_IRQHandler+0x128>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 802d414:	4b0a      	ldr	r3, [pc, #40]	@ (802d440 <HAL_FLASH_IRQHandler+0x130>)
 802d416:	691b      	ldr	r3, [r3, #16]
 802d418:	4a09      	ldr	r2, [pc, #36]	@ (802d440 <HAL_FLASH_IRQHandler+0x130>)
 802d41a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 802d41e:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 802d420:	4b07      	ldr	r3, [pc, #28]	@ (802d440 <HAL_FLASH_IRQHandler+0x130>)
 802d422:	691b      	ldr	r3, [r3, #16]
 802d424:	4a06      	ldr	r2, [pc, #24]	@ (802d440 <HAL_FLASH_IRQHandler+0x130>)
 802d426:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 802d42a:	6113      	str	r3, [r2, #16]

    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 802d42c:	4b04      	ldr	r3, [pc, #16]	@ (802d440 <HAL_FLASH_IRQHandler+0x130>)
 802d42e:	691b      	ldr	r3, [r3, #16]
 802d430:	4a03      	ldr	r2, [pc, #12]	@ (802d440 <HAL_FLASH_IRQHandler+0x130>)
 802d432:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 802d436:	6113      	str	r3, [r2, #16]
  }
}
 802d438:	bf00      	nop
 802d43a:	3708      	adds	r7, #8
 802d43c:	46bd      	mov	sp, r7
 802d43e:	bd80      	pop	{r7, pc}
 802d440:	40023c00 	.word	0x40023c00
 802d444:	2000077c 	.word	0x2000077c

0802d448 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 802d448:	b480      	push	{r7}
 802d44a:	b083      	sub	sp, #12
 802d44c:	af00      	add	r7, sp, #0
 802d44e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 802d450:	bf00      	nop
 802d452:	370c      	adds	r7, #12
 802d454:	46bd      	mov	sp, r7
 802d456:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d45a:	4770      	bx	lr

0802d45c <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 802d45c:	b480      	push	{r7}
 802d45e:	b083      	sub	sp, #12
 802d460:	af00      	add	r7, sp, #0
 802d462:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 802d464:	bf00      	nop
 802d466:	370c      	adds	r7, #12
 802d468:	46bd      	mov	sp, r7
 802d46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d46e:	4770      	bx	lr

0802d470 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 802d470:	b480      	push	{r7}
 802d472:	b083      	sub	sp, #12
 802d474:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 802d476:	2300      	movs	r3, #0
 802d478:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 802d47a:	4b0b      	ldr	r3, [pc, #44]	@ (802d4a8 <HAL_FLASH_Unlock+0x38>)
 802d47c:	691b      	ldr	r3, [r3, #16]
 802d47e:	2b00      	cmp	r3, #0
 802d480:	da0b      	bge.n	802d49a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 802d482:	4b09      	ldr	r3, [pc, #36]	@ (802d4a8 <HAL_FLASH_Unlock+0x38>)
 802d484:	4a09      	ldr	r2, [pc, #36]	@ (802d4ac <HAL_FLASH_Unlock+0x3c>)
 802d486:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 802d488:	4b07      	ldr	r3, [pc, #28]	@ (802d4a8 <HAL_FLASH_Unlock+0x38>)
 802d48a:	4a09      	ldr	r2, [pc, #36]	@ (802d4b0 <HAL_FLASH_Unlock+0x40>)
 802d48c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 802d48e:	4b06      	ldr	r3, [pc, #24]	@ (802d4a8 <HAL_FLASH_Unlock+0x38>)
 802d490:	691b      	ldr	r3, [r3, #16]
 802d492:	2b00      	cmp	r3, #0
 802d494:	da01      	bge.n	802d49a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 802d496:	2301      	movs	r3, #1
 802d498:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 802d49a:	79fb      	ldrb	r3, [r7, #7]
}
 802d49c:	4618      	mov	r0, r3
 802d49e:	370c      	adds	r7, #12
 802d4a0:	46bd      	mov	sp, r7
 802d4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d4a6:	4770      	bx	lr
 802d4a8:	40023c00 	.word	0x40023c00
 802d4ac:	45670123 	.word	0x45670123
 802d4b0:	cdef89ab 	.word	0xcdef89ab

0802d4b4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 802d4b4:	b480      	push	{r7}
 802d4b6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 802d4b8:	4b05      	ldr	r3, [pc, #20]	@ (802d4d0 <HAL_FLASH_Lock+0x1c>)
 802d4ba:	691b      	ldr	r3, [r3, #16]
 802d4bc:	4a04      	ldr	r2, [pc, #16]	@ (802d4d0 <HAL_FLASH_Lock+0x1c>)
 802d4be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 802d4c2:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 802d4c4:	2300      	movs	r3, #0
}
 802d4c6:	4618      	mov	r0, r3
 802d4c8:	46bd      	mov	sp, r7
 802d4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d4ce:	4770      	bx	lr
 802d4d0:	40023c00 	.word	0x40023c00

0802d4d4 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag
  */
uint32_t HAL_FLASH_GetError(void)
{
 802d4d4:	b480      	push	{r7}
 802d4d6:	af00      	add	r7, sp, #0
  return pFlash.ErrorCode;
 802d4d8:	4b03      	ldr	r3, [pc, #12]	@ (802d4e8 <HAL_FLASH_GetError+0x14>)
 802d4da:	69db      	ldr	r3, [r3, #28]
}
 802d4dc:	4618      	mov	r0, r3
 802d4de:	46bd      	mov	sp, r7
 802d4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d4e4:	4770      	bx	lr
 802d4e6:	bf00      	nop
 802d4e8:	2000077c 	.word	0x2000077c

0802d4ec <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 802d4ec:	b580      	push	{r7, lr}
 802d4ee:	b084      	sub	sp, #16
 802d4f0:	af00      	add	r7, sp, #0
 802d4f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 802d4f4:	2300      	movs	r3, #0
 802d4f6:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 802d4f8:	4b1a      	ldr	r3, [pc, #104]	@ (802d564 <FLASH_WaitForLastOperation+0x78>)
 802d4fa:	2200      	movs	r2, #0
 802d4fc:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 802d4fe:	f7fa ffed 	bl	80284dc <HAL_GetTick>
 802d502:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 802d504:	e010      	b.n	802d528 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 802d506:	687b      	ldr	r3, [r7, #4]
 802d508:	f1b3 3fff 	cmp.w	r3, #4294967295
 802d50c:	d00c      	beq.n	802d528 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 802d50e:	687b      	ldr	r3, [r7, #4]
 802d510:	2b00      	cmp	r3, #0
 802d512:	d007      	beq.n	802d524 <FLASH_WaitForLastOperation+0x38>
 802d514:	f7fa ffe2 	bl	80284dc <HAL_GetTick>
 802d518:	4602      	mov	r2, r0
 802d51a:	68fb      	ldr	r3, [r7, #12]
 802d51c:	1ad3      	subs	r3, r2, r3
 802d51e:	687a      	ldr	r2, [r7, #4]
 802d520:	429a      	cmp	r2, r3
 802d522:	d201      	bcs.n	802d528 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 802d524:	2303      	movs	r3, #3
 802d526:	e019      	b.n	802d55c <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 802d528:	4b0f      	ldr	r3, [pc, #60]	@ (802d568 <FLASH_WaitForLastOperation+0x7c>)
 802d52a:	68db      	ldr	r3, [r3, #12]
 802d52c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 802d530:	2b00      	cmp	r3, #0
 802d532:	d1e8      	bne.n	802d506 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 802d534:	4b0c      	ldr	r3, [pc, #48]	@ (802d568 <FLASH_WaitForLastOperation+0x7c>)
 802d536:	68db      	ldr	r3, [r3, #12]
 802d538:	f003 0301 	and.w	r3, r3, #1
 802d53c:	2b00      	cmp	r3, #0
 802d53e:	d002      	beq.n	802d546 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 802d540:	4b09      	ldr	r3, [pc, #36]	@ (802d568 <FLASH_WaitForLastOperation+0x7c>)
 802d542:	2201      	movs	r2, #1
 802d544:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 802d546:	4b08      	ldr	r3, [pc, #32]	@ (802d568 <FLASH_WaitForLastOperation+0x7c>)
 802d548:	68db      	ldr	r3, [r3, #12]
 802d54a:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 802d54e:	2b00      	cmp	r3, #0
 802d550:	d003      	beq.n	802d55a <FLASH_WaitForLastOperation+0x6e>
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 802d552:	f000 f909 	bl	802d768 <FLASH_SetErrorCode>
    return HAL_ERROR;
 802d556:	2301      	movs	r3, #1
 802d558:	e000      	b.n	802d55c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 802d55a:	2300      	movs	r3, #0

}
 802d55c:	4618      	mov	r0, r3
 802d55e:	3710      	adds	r7, #16
 802d560:	46bd      	mov	sp, r7
 802d562:	bd80      	pop	{r7, pc}
 802d564:	2000077c 	.word	0x2000077c
 802d568:	40023c00 	.word	0x40023c00

0802d56c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 802d56c:	b580      	push	{r7, lr}
 802d56e:	b084      	sub	sp, #16
 802d570:	af00      	add	r7, sp, #0
 802d572:	60f8      	str	r0, [r7, #12]
 802d574:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 802d578:	68fb      	ldr	r3, [r7, #12]
 802d57a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 802d57e:	d303      	bcc.n	802d588 <FLASH_Program_DoubleWord+0x1c>
 802d580:	68fb      	ldr	r3, [r7, #12]
 802d582:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 802d586:	d30c      	bcc.n	802d5a2 <FLASH_Program_DoubleWord+0x36>
 802d588:	68fb      	ldr	r3, [r7, #12]
 802d58a:	4a1a      	ldr	r2, [pc, #104]	@ (802d5f4 <FLASH_Program_DoubleWord+0x88>)
 802d58c:	4293      	cmp	r3, r2
 802d58e:	d903      	bls.n	802d598 <FLASH_Program_DoubleWord+0x2c>
 802d590:	68fb      	ldr	r3, [r7, #12]
 802d592:	4a19      	ldr	r2, [pc, #100]	@ (802d5f8 <FLASH_Program_DoubleWord+0x8c>)
 802d594:	4293      	cmp	r3, r2
 802d596:	d904      	bls.n	802d5a2 <FLASH_Program_DoubleWord+0x36>
 802d598:	f240 215f 	movw	r1, #607	@ 0x25f
 802d59c:	4817      	ldr	r0, [pc, #92]	@ (802d5fc <FLASH_Program_DoubleWord+0x90>)
 802d59e:	f7fa fbaa 	bl	8027cf6 <assert_failed>

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 802d5a2:	4b17      	ldr	r3, [pc, #92]	@ (802d600 <FLASH_Program_DoubleWord+0x94>)
 802d5a4:	691b      	ldr	r3, [r3, #16]
 802d5a6:	4a16      	ldr	r2, [pc, #88]	@ (802d600 <FLASH_Program_DoubleWord+0x94>)
 802d5a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 802d5ac:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 802d5ae:	4b14      	ldr	r3, [pc, #80]	@ (802d600 <FLASH_Program_DoubleWord+0x94>)
 802d5b0:	691b      	ldr	r3, [r3, #16]
 802d5b2:	4a13      	ldr	r2, [pc, #76]	@ (802d600 <FLASH_Program_DoubleWord+0x94>)
 802d5b4:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 802d5b8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 802d5ba:	4b11      	ldr	r3, [pc, #68]	@ (802d600 <FLASH_Program_DoubleWord+0x94>)
 802d5bc:	691b      	ldr	r3, [r3, #16]
 802d5be:	4a10      	ldr	r2, [pc, #64]	@ (802d600 <FLASH_Program_DoubleWord+0x94>)
 802d5c0:	f043 0301 	orr.w	r3, r3, #1
 802d5c4:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 802d5c6:	68fb      	ldr	r3, [r7, #12]
 802d5c8:	683a      	ldr	r2, [r7, #0]
 802d5ca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 802d5cc:	f3bf 8f6f 	isb	sy
}
 802d5d0:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 802d5d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 802d5d6:	f04f 0200 	mov.w	r2, #0
 802d5da:	f04f 0300 	mov.w	r3, #0
 802d5de:	000a      	movs	r2, r1
 802d5e0:	2300      	movs	r3, #0
 802d5e2:	68f9      	ldr	r1, [r7, #12]
 802d5e4:	3104      	adds	r1, #4
 802d5e6:	4613      	mov	r3, r2
 802d5e8:	600b      	str	r3, [r1, #0]
}
 802d5ea:	bf00      	nop
 802d5ec:	3710      	adds	r7, #16
 802d5ee:	46bd      	mov	sp, r7
 802d5f0:	bd80      	pop	{r7, pc}
 802d5f2:	bf00      	nop
 802d5f4:	1fff77ff 	.word	0x1fff77ff
 802d5f8:	1fff7a0f 	.word	0x1fff7a0f
 802d5fc:	08038430 	.word	0x08038430
 802d600:	40023c00 	.word	0x40023c00

0802d604 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 802d604:	b580      	push	{r7, lr}
 802d606:	b082      	sub	sp, #8
 802d608:	af00      	add	r7, sp, #0
 802d60a:	6078      	str	r0, [r7, #4]
 802d60c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 802d60e:	687b      	ldr	r3, [r7, #4]
 802d610:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 802d614:	d303      	bcc.n	802d61e <FLASH_Program_Word+0x1a>
 802d616:	687b      	ldr	r3, [r7, #4]
 802d618:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 802d61c:	d30c      	bcc.n	802d638 <FLASH_Program_Word+0x34>
 802d61e:	687b      	ldr	r3, [r7, #4]
 802d620:	4a12      	ldr	r2, [pc, #72]	@ (802d66c <FLASH_Program_Word+0x68>)
 802d622:	4293      	cmp	r3, r2
 802d624:	d903      	bls.n	802d62e <FLASH_Program_Word+0x2a>
 802d626:	687b      	ldr	r3, [r7, #4]
 802d628:	4a11      	ldr	r2, [pc, #68]	@ (802d670 <FLASH_Program_Word+0x6c>)
 802d62a:	4293      	cmp	r3, r2
 802d62c:	d904      	bls.n	802d638 <FLASH_Program_Word+0x34>
 802d62e:	f240 2181 	movw	r1, #641	@ 0x281
 802d632:	4810      	ldr	r0, [pc, #64]	@ (802d674 <FLASH_Program_Word+0x70>)
 802d634:	f7fa fb5f 	bl	8027cf6 <assert_failed>

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 802d638:	4b0f      	ldr	r3, [pc, #60]	@ (802d678 <FLASH_Program_Word+0x74>)
 802d63a:	691b      	ldr	r3, [r3, #16]
 802d63c:	4a0e      	ldr	r2, [pc, #56]	@ (802d678 <FLASH_Program_Word+0x74>)
 802d63e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 802d642:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 802d644:	4b0c      	ldr	r3, [pc, #48]	@ (802d678 <FLASH_Program_Word+0x74>)
 802d646:	691b      	ldr	r3, [r3, #16]
 802d648:	4a0b      	ldr	r2, [pc, #44]	@ (802d678 <FLASH_Program_Word+0x74>)
 802d64a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 802d64e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 802d650:	4b09      	ldr	r3, [pc, #36]	@ (802d678 <FLASH_Program_Word+0x74>)
 802d652:	691b      	ldr	r3, [r3, #16]
 802d654:	4a08      	ldr	r2, [pc, #32]	@ (802d678 <FLASH_Program_Word+0x74>)
 802d656:	f043 0301 	orr.w	r3, r3, #1
 802d65a:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 802d65c:	687b      	ldr	r3, [r7, #4]
 802d65e:	683a      	ldr	r2, [r7, #0]
 802d660:	601a      	str	r2, [r3, #0]
}
 802d662:	bf00      	nop
 802d664:	3708      	adds	r7, #8
 802d666:	46bd      	mov	sp, r7
 802d668:	bd80      	pop	{r7, pc}
 802d66a:	bf00      	nop
 802d66c:	1fff77ff 	.word	0x1fff77ff
 802d670:	1fff7a0f 	.word	0x1fff7a0f
 802d674:	08038430 	.word	0x08038430
 802d678:	40023c00 	.word	0x40023c00

0802d67c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 802d67c:	b580      	push	{r7, lr}
 802d67e:	b082      	sub	sp, #8
 802d680:	af00      	add	r7, sp, #0
 802d682:	6078      	str	r0, [r7, #4]
 802d684:	460b      	mov	r3, r1
 802d686:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 802d688:	687b      	ldr	r3, [r7, #4]
 802d68a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 802d68e:	d303      	bcc.n	802d698 <FLASH_Program_HalfWord+0x1c>
 802d690:	687b      	ldr	r3, [r7, #4]
 802d692:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 802d696:	d30c      	bcc.n	802d6b2 <FLASH_Program_HalfWord+0x36>
 802d698:	687b      	ldr	r3, [r7, #4]
 802d69a:	4a12      	ldr	r2, [pc, #72]	@ (802d6e4 <FLASH_Program_HalfWord+0x68>)
 802d69c:	4293      	cmp	r3, r2
 802d69e:	d903      	bls.n	802d6a8 <FLASH_Program_HalfWord+0x2c>
 802d6a0:	687b      	ldr	r3, [r7, #4]
 802d6a2:	4a11      	ldr	r2, [pc, #68]	@ (802d6e8 <FLASH_Program_HalfWord+0x6c>)
 802d6a4:	4293      	cmp	r3, r2
 802d6a6:	d904      	bls.n	802d6b2 <FLASH_Program_HalfWord+0x36>
 802d6a8:	f240 219a 	movw	r1, #666	@ 0x29a
 802d6ac:	480f      	ldr	r0, [pc, #60]	@ (802d6ec <FLASH_Program_HalfWord+0x70>)
 802d6ae:	f7fa fb22 	bl	8027cf6 <assert_failed>

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 802d6b2:	4b0f      	ldr	r3, [pc, #60]	@ (802d6f0 <FLASH_Program_HalfWord+0x74>)
 802d6b4:	691b      	ldr	r3, [r3, #16]
 802d6b6:	4a0e      	ldr	r2, [pc, #56]	@ (802d6f0 <FLASH_Program_HalfWord+0x74>)
 802d6b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 802d6bc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 802d6be:	4b0c      	ldr	r3, [pc, #48]	@ (802d6f0 <FLASH_Program_HalfWord+0x74>)
 802d6c0:	691b      	ldr	r3, [r3, #16]
 802d6c2:	4a0b      	ldr	r2, [pc, #44]	@ (802d6f0 <FLASH_Program_HalfWord+0x74>)
 802d6c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 802d6c8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 802d6ca:	4b09      	ldr	r3, [pc, #36]	@ (802d6f0 <FLASH_Program_HalfWord+0x74>)
 802d6cc:	691b      	ldr	r3, [r3, #16]
 802d6ce:	4a08      	ldr	r2, [pc, #32]	@ (802d6f0 <FLASH_Program_HalfWord+0x74>)
 802d6d0:	f043 0301 	orr.w	r3, r3, #1
 802d6d4:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 802d6d6:	687b      	ldr	r3, [r7, #4]
 802d6d8:	887a      	ldrh	r2, [r7, #2]
 802d6da:	801a      	strh	r2, [r3, #0]
}
 802d6dc:	bf00      	nop
 802d6de:	3708      	adds	r7, #8
 802d6e0:	46bd      	mov	sp, r7
 802d6e2:	bd80      	pop	{r7, pc}
 802d6e4:	1fff77ff 	.word	0x1fff77ff
 802d6e8:	1fff7a0f 	.word	0x1fff7a0f
 802d6ec:	08038430 	.word	0x08038430
 802d6f0:	40023c00 	.word	0x40023c00

0802d6f4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 802d6f4:	b580      	push	{r7, lr}
 802d6f6:	b082      	sub	sp, #8
 802d6f8:	af00      	add	r7, sp, #0
 802d6fa:	6078      	str	r0, [r7, #4]
 802d6fc:	460b      	mov	r3, r1
 802d6fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 802d700:	687b      	ldr	r3, [r7, #4]
 802d702:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 802d706:	d303      	bcc.n	802d710 <FLASH_Program_Byte+0x1c>
 802d708:	687b      	ldr	r3, [r7, #4]
 802d70a:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 802d70e:	d30c      	bcc.n	802d72a <FLASH_Program_Byte+0x36>
 802d710:	687b      	ldr	r3, [r7, #4]
 802d712:	4a11      	ldr	r2, [pc, #68]	@ (802d758 <FLASH_Program_Byte+0x64>)
 802d714:	4293      	cmp	r3, r2
 802d716:	d903      	bls.n	802d720 <FLASH_Program_Byte+0x2c>
 802d718:	687b      	ldr	r3, [r7, #4]
 802d71a:	4a10      	ldr	r2, [pc, #64]	@ (802d75c <FLASH_Program_Byte+0x68>)
 802d71c:	4293      	cmp	r3, r2
 802d71e:	d904      	bls.n	802d72a <FLASH_Program_Byte+0x36>
 802d720:	f240 21b3 	movw	r1, #691	@ 0x2b3
 802d724:	480e      	ldr	r0, [pc, #56]	@ (802d760 <FLASH_Program_Byte+0x6c>)
 802d726:	f7fa fae6 	bl	8027cf6 <assert_failed>

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 802d72a:	4b0e      	ldr	r3, [pc, #56]	@ (802d764 <FLASH_Program_Byte+0x70>)
 802d72c:	691b      	ldr	r3, [r3, #16]
 802d72e:	4a0d      	ldr	r2, [pc, #52]	@ (802d764 <FLASH_Program_Byte+0x70>)
 802d730:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 802d734:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 802d736:	4b0b      	ldr	r3, [pc, #44]	@ (802d764 <FLASH_Program_Byte+0x70>)
 802d738:	4a0a      	ldr	r2, [pc, #40]	@ (802d764 <FLASH_Program_Byte+0x70>)
 802d73a:	691b      	ldr	r3, [r3, #16]
 802d73c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 802d73e:	4b09      	ldr	r3, [pc, #36]	@ (802d764 <FLASH_Program_Byte+0x70>)
 802d740:	691b      	ldr	r3, [r3, #16]
 802d742:	4a08      	ldr	r2, [pc, #32]	@ (802d764 <FLASH_Program_Byte+0x70>)
 802d744:	f043 0301 	orr.w	r3, r3, #1
 802d748:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 802d74a:	687b      	ldr	r3, [r7, #4]
 802d74c:	78fa      	ldrb	r2, [r7, #3]
 802d74e:	701a      	strb	r2, [r3, #0]
}
 802d750:	bf00      	nop
 802d752:	3708      	adds	r7, #8
 802d754:	46bd      	mov	sp, r7
 802d756:	bd80      	pop	{r7, pc}
 802d758:	1fff77ff 	.word	0x1fff77ff
 802d75c:	1fff7a0f 	.word	0x1fff7a0f
 802d760:	08038430 	.word	0x08038430
 802d764:	40023c00 	.word	0x40023c00

0802d768 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 802d768:	b480      	push	{r7}
 802d76a:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 802d76c:	4b27      	ldr	r3, [pc, #156]	@ (802d80c <FLASH_SetErrorCode+0xa4>)
 802d76e:	68db      	ldr	r3, [r3, #12]
 802d770:	f003 0310 	and.w	r3, r3, #16
 802d774:	2b00      	cmp	r3, #0
 802d776:	d008      	beq.n	802d78a <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 802d778:	4b25      	ldr	r3, [pc, #148]	@ (802d810 <FLASH_SetErrorCode+0xa8>)
 802d77a:	69db      	ldr	r3, [r3, #28]
 802d77c:	f043 0310 	orr.w	r3, r3, #16
 802d780:	4a23      	ldr	r2, [pc, #140]	@ (802d810 <FLASH_SetErrorCode+0xa8>)
 802d782:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 802d784:	4b21      	ldr	r3, [pc, #132]	@ (802d80c <FLASH_SetErrorCode+0xa4>)
 802d786:	2210      	movs	r2, #16
 802d788:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 802d78a:	4b20      	ldr	r3, [pc, #128]	@ (802d80c <FLASH_SetErrorCode+0xa4>)
 802d78c:	68db      	ldr	r3, [r3, #12]
 802d78e:	f003 0320 	and.w	r3, r3, #32
 802d792:	2b00      	cmp	r3, #0
 802d794:	d008      	beq.n	802d7a8 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 802d796:	4b1e      	ldr	r3, [pc, #120]	@ (802d810 <FLASH_SetErrorCode+0xa8>)
 802d798:	69db      	ldr	r3, [r3, #28]
 802d79a:	f043 0308 	orr.w	r3, r3, #8
 802d79e:	4a1c      	ldr	r2, [pc, #112]	@ (802d810 <FLASH_SetErrorCode+0xa8>)
 802d7a0:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 802d7a2:	4b1a      	ldr	r3, [pc, #104]	@ (802d80c <FLASH_SetErrorCode+0xa4>)
 802d7a4:	2220      	movs	r2, #32
 802d7a6:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 802d7a8:	4b18      	ldr	r3, [pc, #96]	@ (802d80c <FLASH_SetErrorCode+0xa4>)
 802d7aa:	68db      	ldr	r3, [r3, #12]
 802d7ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802d7b0:	2b00      	cmp	r3, #0
 802d7b2:	d008      	beq.n	802d7c6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 802d7b4:	4b16      	ldr	r3, [pc, #88]	@ (802d810 <FLASH_SetErrorCode+0xa8>)
 802d7b6:	69db      	ldr	r3, [r3, #28]
 802d7b8:	f043 0304 	orr.w	r3, r3, #4
 802d7bc:	4a14      	ldr	r2, [pc, #80]	@ (802d810 <FLASH_SetErrorCode+0xa8>)
 802d7be:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 802d7c0:	4b12      	ldr	r3, [pc, #72]	@ (802d80c <FLASH_SetErrorCode+0xa4>)
 802d7c2:	2240      	movs	r2, #64	@ 0x40
 802d7c4:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 802d7c6:	4b11      	ldr	r3, [pc, #68]	@ (802d80c <FLASH_SetErrorCode+0xa4>)
 802d7c8:	68db      	ldr	r3, [r3, #12]
 802d7ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 802d7ce:	2b00      	cmp	r3, #0
 802d7d0:	d008      	beq.n	802d7e4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 802d7d2:	4b0f      	ldr	r3, [pc, #60]	@ (802d810 <FLASH_SetErrorCode+0xa8>)
 802d7d4:	69db      	ldr	r3, [r3, #28]
 802d7d6:	f043 0302 	orr.w	r3, r3, #2
 802d7da:	4a0d      	ldr	r2, [pc, #52]	@ (802d810 <FLASH_SetErrorCode+0xa8>)
 802d7dc:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 802d7de:	4b0b      	ldr	r3, [pc, #44]	@ (802d80c <FLASH_SetErrorCode+0xa4>)
 802d7e0:	2280      	movs	r2, #128	@ 0x80
 802d7e2:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 802d7e4:	4b09      	ldr	r3, [pc, #36]	@ (802d80c <FLASH_SetErrorCode+0xa4>)
 802d7e6:	68db      	ldr	r3, [r3, #12]
 802d7e8:	f003 0302 	and.w	r3, r3, #2
 802d7ec:	2b00      	cmp	r3, #0
 802d7ee:	d008      	beq.n	802d802 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 802d7f0:	4b07      	ldr	r3, [pc, #28]	@ (802d810 <FLASH_SetErrorCode+0xa8>)
 802d7f2:	69db      	ldr	r3, [r3, #28]
 802d7f4:	f043 0320 	orr.w	r3, r3, #32
 802d7f8:	4a05      	ldr	r2, [pc, #20]	@ (802d810 <FLASH_SetErrorCode+0xa8>)
 802d7fa:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 802d7fc:	4b03      	ldr	r3, [pc, #12]	@ (802d80c <FLASH_SetErrorCode+0xa4>)
 802d7fe:	2202      	movs	r2, #2
 802d800:	60da      	str	r2, [r3, #12]
  }
}
 802d802:	bf00      	nop
 802d804:	46bd      	mov	sp, r7
 802d806:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d80a:	4770      	bx	lr
 802d80c:	40023c00 	.word	0x40023c00
 802d810:	2000077c 	.word	0x2000077c

0802d814 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 802d814:	b580      	push	{r7, lr}
 802d816:	b084      	sub	sp, #16
 802d818:	af00      	add	r7, sp, #0
 802d81a:	6078      	str	r0, [r7, #4]
 802d81c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 802d81e:	2301      	movs	r3, #1
 802d820:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 802d822:	2300      	movs	r3, #0
 802d824:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 802d826:	4b40      	ldr	r3, [pc, #256]	@ (802d928 <HAL_FLASHEx_Erase+0x114>)
 802d828:	7e1b      	ldrb	r3, [r3, #24]
 802d82a:	2b01      	cmp	r3, #1
 802d82c:	d101      	bne.n	802d832 <HAL_FLASHEx_Erase+0x1e>
 802d82e:	2302      	movs	r3, #2
 802d830:	e076      	b.n	802d920 <HAL_FLASHEx_Erase+0x10c>
 802d832:	4b3d      	ldr	r3, [pc, #244]	@ (802d928 <HAL_FLASHEx_Erase+0x114>)
 802d834:	2201      	movs	r2, #1
 802d836:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 802d838:	687b      	ldr	r3, [r7, #4]
 802d83a:	681b      	ldr	r3, [r3, #0]
 802d83c:	2b00      	cmp	r3, #0
 802d83e:	d007      	beq.n	802d850 <HAL_FLASHEx_Erase+0x3c>
 802d840:	687b      	ldr	r3, [r7, #4]
 802d842:	681b      	ldr	r3, [r3, #0]
 802d844:	2b01      	cmp	r3, #1
 802d846:	d003      	beq.n	802d850 <HAL_FLASHEx_Erase+0x3c>
 802d848:	21a9      	movs	r1, #169	@ 0xa9
 802d84a:	4838      	ldr	r0, [pc, #224]	@ (802d92c <HAL_FLASHEx_Erase+0x118>)
 802d84c:	f7fa fa53 	bl	8027cf6 <assert_failed>

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 802d850:	f24c 3050 	movw	r0, #50000	@ 0xc350
 802d854:	f7ff fe4a 	bl	802d4ec <FLASH_WaitForLastOperation>
 802d858:	4603      	mov	r3, r0
 802d85a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 802d85c:	7bfb      	ldrb	r3, [r7, #15]
 802d85e:	2b00      	cmp	r3, #0
 802d860:	d15a      	bne.n	802d918 <HAL_FLASHEx_Erase+0x104>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 802d862:	683b      	ldr	r3, [r7, #0]
 802d864:	f04f 32ff 	mov.w	r2, #4294967295
 802d868:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 802d86a:	687b      	ldr	r3, [r7, #4]
 802d86c:	681b      	ldr	r3, [r3, #0]
 802d86e:	2b01      	cmp	r3, #1
 802d870:	d115      	bne.n	802d89e <HAL_FLASHEx_Erase+0x8a>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 802d872:	687b      	ldr	r3, [r7, #4]
 802d874:	691b      	ldr	r3, [r3, #16]
 802d876:	b2da      	uxtb	r2, r3
 802d878:	687b      	ldr	r3, [r7, #4]
 802d87a:	685b      	ldr	r3, [r3, #4]
 802d87c:	4619      	mov	r1, r3
 802d87e:	4610      	mov	r0, r2
 802d880:	f000 f858 	bl	802d934 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 802d884:	f24c 3050 	movw	r0, #50000	@ 0xc350
 802d888:	f7ff fe30 	bl	802d4ec <FLASH_WaitForLastOperation>
 802d88c:	4603      	mov	r3, r0
 802d88e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 802d890:	4b27      	ldr	r3, [pc, #156]	@ (802d930 <HAL_FLASHEx_Erase+0x11c>)
 802d892:	691b      	ldr	r3, [r3, #16]
 802d894:	4a26      	ldr	r2, [pc, #152]	@ (802d930 <HAL_FLASHEx_Erase+0x11c>)
 802d896:	f023 0304 	bic.w	r3, r3, #4
 802d89a:	6113      	str	r3, [r2, #16]
 802d89c:	e03a      	b.n	802d914 <HAL_FLASHEx_Erase+0x100>
    }
    else
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));
 802d89e:	687b      	ldr	r3, [r7, #4]
 802d8a0:	68da      	ldr	r2, [r3, #12]
 802d8a2:	687b      	ldr	r3, [r7, #4]
 802d8a4:	689b      	ldr	r3, [r3, #8]
 802d8a6:	4413      	add	r3, r2
 802d8a8:	2b00      	cmp	r3, #0
 802d8aa:	d006      	beq.n	802d8ba <HAL_FLASHEx_Erase+0xa6>
 802d8ac:	687b      	ldr	r3, [r7, #4]
 802d8ae:	68da      	ldr	r2, [r3, #12]
 802d8b0:	687b      	ldr	r3, [r7, #4]
 802d8b2:	689b      	ldr	r3, [r3, #8]
 802d8b4:	4413      	add	r3, r2
 802d8b6:	2b0c      	cmp	r3, #12
 802d8b8:	d903      	bls.n	802d8c2 <HAL_FLASHEx_Erase+0xae>
 802d8ba:	21c1      	movs	r1, #193	@ 0xc1
 802d8bc:	481b      	ldr	r0, [pc, #108]	@ (802d92c <HAL_FLASHEx_Erase+0x118>)
 802d8be:	f7fa fa1a 	bl	8027cf6 <assert_failed>

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 802d8c2:	687b      	ldr	r3, [r7, #4]
 802d8c4:	689b      	ldr	r3, [r3, #8]
 802d8c6:	60bb      	str	r3, [r7, #8]
 802d8c8:	e01c      	b.n	802d904 <HAL_FLASHEx_Erase+0xf0>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 802d8ca:	687b      	ldr	r3, [r7, #4]
 802d8cc:	691b      	ldr	r3, [r3, #16]
 802d8ce:	b2db      	uxtb	r3, r3
 802d8d0:	4619      	mov	r1, r3
 802d8d2:	68b8      	ldr	r0, [r7, #8]
 802d8d4:	f000 f86a 	bl	802d9ac <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 802d8d8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 802d8dc:	f7ff fe06 	bl	802d4ec <FLASH_WaitForLastOperation>
 802d8e0:	4603      	mov	r3, r0
 802d8e2:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 802d8e4:	4b12      	ldr	r3, [pc, #72]	@ (802d930 <HAL_FLASHEx_Erase+0x11c>)
 802d8e6:	691b      	ldr	r3, [r3, #16]
 802d8e8:	4a11      	ldr	r2, [pc, #68]	@ (802d930 <HAL_FLASHEx_Erase+0x11c>)
 802d8ea:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 802d8ee:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 802d8f0:	7bfb      	ldrb	r3, [r7, #15]
 802d8f2:	2b00      	cmp	r3, #0
 802d8f4:	d003      	beq.n	802d8fe <HAL_FLASHEx_Erase+0xea>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 802d8f6:	683b      	ldr	r3, [r7, #0]
 802d8f8:	68ba      	ldr	r2, [r7, #8]
 802d8fa:	601a      	str	r2, [r3, #0]
          break;
 802d8fc:	e00a      	b.n	802d914 <HAL_FLASHEx_Erase+0x100>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 802d8fe:	68bb      	ldr	r3, [r7, #8]
 802d900:	3301      	adds	r3, #1
 802d902:	60bb      	str	r3, [r7, #8]
 802d904:	687b      	ldr	r3, [r7, #4]
 802d906:	68da      	ldr	r2, [r3, #12]
 802d908:	687b      	ldr	r3, [r7, #4]
 802d90a:	689b      	ldr	r3, [r3, #8]
 802d90c:	4413      	add	r3, r2
 802d90e:	68ba      	ldr	r2, [r7, #8]
 802d910:	429a      	cmp	r2, r3
 802d912:	d3da      	bcc.n	802d8ca <HAL_FLASHEx_Erase+0xb6>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 802d914:	f000 f8cc 	bl	802dab0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 802d918:	4b03      	ldr	r3, [pc, #12]	@ (802d928 <HAL_FLASHEx_Erase+0x114>)
 802d91a:	2200      	movs	r2, #0
 802d91c:	761a      	strb	r2, [r3, #24]

  return status;
 802d91e:	7bfb      	ldrb	r3, [r7, #15]
}
 802d920:	4618      	mov	r0, r3
 802d922:	3710      	adds	r7, #16
 802d924:	46bd      	mov	sp, r7
 802d926:	bd80      	pop	{r7, pc}
 802d928:	2000077c 	.word	0x2000077c
 802d92c:	080384a4 	.word	0x080384a4
 802d930:	40023c00 	.word	0x40023c00

0802d934 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 802d934:	b580      	push	{r7, lr}
 802d936:	b082      	sub	sp, #8
 802d938:	af00      	add	r7, sp, #0
 802d93a:	4603      	mov	r3, r0
 802d93c:	6039      	str	r1, [r7, #0]
 802d93e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 802d940:	79fb      	ldrb	r3, [r7, #7]
 802d942:	2b00      	cmp	r3, #0
 802d944:	d00d      	beq.n	802d962 <FLASH_MassErase+0x2e>
 802d946:	79fb      	ldrb	r3, [r7, #7]
 802d948:	2b01      	cmp	r3, #1
 802d94a:	d00a      	beq.n	802d962 <FLASH_MassErase+0x2e>
 802d94c:	79fb      	ldrb	r3, [r7, #7]
 802d94e:	2b02      	cmp	r3, #2
 802d950:	d007      	beq.n	802d962 <FLASH_MassErase+0x2e>
 802d952:	79fb      	ldrb	r3, [r7, #7]
 802d954:	2b03      	cmp	r3, #3
 802d956:	d004      	beq.n	802d962 <FLASH_MassErase+0x2e>
 802d958:	f240 31b7 	movw	r1, #951	@ 0x3b7
 802d95c:	4811      	ldr	r0, [pc, #68]	@ (802d9a4 <FLASH_MassErase+0x70>)
 802d95e:	f7fa f9ca 	bl	8027cf6 <assert_failed>
  assert_param(IS_FLASH_BANK(Banks));
 802d962:	683b      	ldr	r3, [r7, #0]
 802d964:	2b01      	cmp	r3, #1
 802d966:	d004      	beq.n	802d972 <FLASH_MassErase+0x3e>
 802d968:	f44f 716e 	mov.w	r1, #952	@ 0x3b8
 802d96c:	480d      	ldr	r0, [pc, #52]	@ (802d9a4 <FLASH_MassErase+0x70>)
 802d96e:	f7fa f9c2 	bl	8027cf6 <assert_failed>

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 802d972:	4b0d      	ldr	r3, [pc, #52]	@ (802d9a8 <FLASH_MassErase+0x74>)
 802d974:	691b      	ldr	r3, [r3, #16]
 802d976:	4a0c      	ldr	r2, [pc, #48]	@ (802d9a8 <FLASH_MassErase+0x74>)
 802d978:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 802d97c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 802d97e:	4b0a      	ldr	r3, [pc, #40]	@ (802d9a8 <FLASH_MassErase+0x74>)
 802d980:	691b      	ldr	r3, [r3, #16]
 802d982:	4a09      	ldr	r2, [pc, #36]	@ (802d9a8 <FLASH_MassErase+0x74>)
 802d984:	f043 0304 	orr.w	r3, r3, #4
 802d988:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 802d98a:	4b07      	ldr	r3, [pc, #28]	@ (802d9a8 <FLASH_MassErase+0x74>)
 802d98c:	691a      	ldr	r2, [r3, #16]
 802d98e:	79fb      	ldrb	r3, [r7, #7]
 802d990:	021b      	lsls	r3, r3, #8
 802d992:	4313      	orrs	r3, r2
 802d994:	4a04      	ldr	r2, [pc, #16]	@ (802d9a8 <FLASH_MassErase+0x74>)
 802d996:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 802d99a:	6113      	str	r3, [r2, #16]
}
 802d99c:	bf00      	nop
 802d99e:	3708      	adds	r7, #8
 802d9a0:	46bd      	mov	sp, r7
 802d9a2:	bd80      	pop	{r7, pc}
 802d9a4:	080384a4 	.word	0x080384a4
 802d9a8:	40023c00 	.word	0x40023c00

0802d9ac <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 802d9ac:	b580      	push	{r7, lr}
 802d9ae:	b084      	sub	sp, #16
 802d9b0:	af00      	add	r7, sp, #0
 802d9b2:	6078      	str	r0, [r7, #4]
 802d9b4:	460b      	mov	r3, r1
 802d9b6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 802d9b8:	2300      	movs	r3, #0
 802d9ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
 802d9bc:	687b      	ldr	r3, [r7, #4]
 802d9be:	2b00      	cmp	r3, #0
 802d9c0:	d025      	beq.n	802da0e <FLASH_Erase_Sector+0x62>
 802d9c2:	687b      	ldr	r3, [r7, #4]
 802d9c4:	2b01      	cmp	r3, #1
 802d9c6:	d022      	beq.n	802da0e <FLASH_Erase_Sector+0x62>
 802d9c8:	687b      	ldr	r3, [r7, #4]
 802d9ca:	2b02      	cmp	r3, #2
 802d9cc:	d01f      	beq.n	802da0e <FLASH_Erase_Sector+0x62>
 802d9ce:	687b      	ldr	r3, [r7, #4]
 802d9d0:	2b03      	cmp	r3, #3
 802d9d2:	d01c      	beq.n	802da0e <FLASH_Erase_Sector+0x62>
 802d9d4:	687b      	ldr	r3, [r7, #4]
 802d9d6:	2b04      	cmp	r3, #4
 802d9d8:	d019      	beq.n	802da0e <FLASH_Erase_Sector+0x62>
 802d9da:	687b      	ldr	r3, [r7, #4]
 802d9dc:	2b05      	cmp	r3, #5
 802d9de:	d016      	beq.n	802da0e <FLASH_Erase_Sector+0x62>
 802d9e0:	687b      	ldr	r3, [r7, #4]
 802d9e2:	2b06      	cmp	r3, #6
 802d9e4:	d013      	beq.n	802da0e <FLASH_Erase_Sector+0x62>
 802d9e6:	687b      	ldr	r3, [r7, #4]
 802d9e8:	2b07      	cmp	r3, #7
 802d9ea:	d010      	beq.n	802da0e <FLASH_Erase_Sector+0x62>
 802d9ec:	687b      	ldr	r3, [r7, #4]
 802d9ee:	2b08      	cmp	r3, #8
 802d9f0:	d00d      	beq.n	802da0e <FLASH_Erase_Sector+0x62>
 802d9f2:	687b      	ldr	r3, [r7, #4]
 802d9f4:	2b09      	cmp	r3, #9
 802d9f6:	d00a      	beq.n	802da0e <FLASH_Erase_Sector+0x62>
 802d9f8:	687b      	ldr	r3, [r7, #4]
 802d9fa:	2b0a      	cmp	r3, #10
 802d9fc:	d007      	beq.n	802da0e <FLASH_Erase_Sector+0x62>
 802d9fe:	687b      	ldr	r3, [r7, #4]
 802da00:	2b0b      	cmp	r3, #11
 802da02:	d004      	beq.n	802da0e <FLASH_Erase_Sector+0x62>
 802da04:	f240 31d6 	movw	r1, #982	@ 0x3d6
 802da08:	4827      	ldr	r0, [pc, #156]	@ (802daa8 <FLASH_Erase_Sector+0xfc>)
 802da0a:	f7fa f974 	bl	8027cf6 <assert_failed>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 802da0e:	78fb      	ldrb	r3, [r7, #3]
 802da10:	2b00      	cmp	r3, #0
 802da12:	d00d      	beq.n	802da30 <FLASH_Erase_Sector+0x84>
 802da14:	78fb      	ldrb	r3, [r7, #3]
 802da16:	2b01      	cmp	r3, #1
 802da18:	d00a      	beq.n	802da30 <FLASH_Erase_Sector+0x84>
 802da1a:	78fb      	ldrb	r3, [r7, #3]
 802da1c:	2b02      	cmp	r3, #2
 802da1e:	d007      	beq.n	802da30 <FLASH_Erase_Sector+0x84>
 802da20:	78fb      	ldrb	r3, [r7, #3]
 802da22:	2b03      	cmp	r3, #3
 802da24:	d004      	beq.n	802da30 <FLASH_Erase_Sector+0x84>
 802da26:	f240 31d7 	movw	r1, #983	@ 0x3d7
 802da2a:	481f      	ldr	r0, [pc, #124]	@ (802daa8 <FLASH_Erase_Sector+0xfc>)
 802da2c:	f7fa f963 	bl	8027cf6 <assert_failed>

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 802da30:	78fb      	ldrb	r3, [r7, #3]
 802da32:	2b00      	cmp	r3, #0
 802da34:	d102      	bne.n	802da3c <FLASH_Erase_Sector+0x90>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 802da36:	2300      	movs	r3, #0
 802da38:	60fb      	str	r3, [r7, #12]
 802da3a:	e010      	b.n	802da5e <FLASH_Erase_Sector+0xb2>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 802da3c:	78fb      	ldrb	r3, [r7, #3]
 802da3e:	2b01      	cmp	r3, #1
 802da40:	d103      	bne.n	802da4a <FLASH_Erase_Sector+0x9e>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 802da42:	f44f 7380 	mov.w	r3, #256	@ 0x100
 802da46:	60fb      	str	r3, [r7, #12]
 802da48:	e009      	b.n	802da5e <FLASH_Erase_Sector+0xb2>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 802da4a:	78fb      	ldrb	r3, [r7, #3]
 802da4c:	2b02      	cmp	r3, #2
 802da4e:	d103      	bne.n	802da58 <FLASH_Erase_Sector+0xac>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 802da50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 802da54:	60fb      	str	r3, [r7, #12]
 802da56:	e002      	b.n	802da5e <FLASH_Erase_Sector+0xb2>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 802da58:	f44f 7340 	mov.w	r3, #768	@ 0x300
 802da5c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 802da5e:	4b13      	ldr	r3, [pc, #76]	@ (802daac <FLASH_Erase_Sector+0x100>)
 802da60:	691b      	ldr	r3, [r3, #16]
 802da62:	4a12      	ldr	r2, [pc, #72]	@ (802daac <FLASH_Erase_Sector+0x100>)
 802da64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 802da68:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 802da6a:	4b10      	ldr	r3, [pc, #64]	@ (802daac <FLASH_Erase_Sector+0x100>)
 802da6c:	691a      	ldr	r2, [r3, #16]
 802da6e:	490f      	ldr	r1, [pc, #60]	@ (802daac <FLASH_Erase_Sector+0x100>)
 802da70:	68fb      	ldr	r3, [r7, #12]
 802da72:	4313      	orrs	r3, r2
 802da74:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 802da76:	4b0d      	ldr	r3, [pc, #52]	@ (802daac <FLASH_Erase_Sector+0x100>)
 802da78:	691b      	ldr	r3, [r3, #16]
 802da7a:	4a0c      	ldr	r2, [pc, #48]	@ (802daac <FLASH_Erase_Sector+0x100>)
 802da7c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 802da80:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 802da82:	4b0a      	ldr	r3, [pc, #40]	@ (802daac <FLASH_Erase_Sector+0x100>)
 802da84:	691a      	ldr	r2, [r3, #16]
 802da86:	687b      	ldr	r3, [r7, #4]
 802da88:	00db      	lsls	r3, r3, #3
 802da8a:	4313      	orrs	r3, r2
 802da8c:	4a07      	ldr	r2, [pc, #28]	@ (802daac <FLASH_Erase_Sector+0x100>)
 802da8e:	f043 0302 	orr.w	r3, r3, #2
 802da92:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 802da94:	4b05      	ldr	r3, [pc, #20]	@ (802daac <FLASH_Erase_Sector+0x100>)
 802da96:	691b      	ldr	r3, [r3, #16]
 802da98:	4a04      	ldr	r2, [pc, #16]	@ (802daac <FLASH_Erase_Sector+0x100>)
 802da9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 802da9e:	6113      	str	r3, [r2, #16]
}
 802daa0:	bf00      	nop
 802daa2:	3710      	adds	r7, #16
 802daa4:	46bd      	mov	sp, r7
 802daa6:	bd80      	pop	{r7, pc}
 802daa8:	080384a4 	.word	0x080384a4
 802daac:	40023c00 	.word	0x40023c00

0802dab0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 802dab0:	b480      	push	{r7}
 802dab2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 802dab4:	4b20      	ldr	r3, [pc, #128]	@ (802db38 <FLASH_FlushCaches+0x88>)
 802dab6:	681b      	ldr	r3, [r3, #0]
 802dab8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 802dabc:	2b00      	cmp	r3, #0
 802dabe:	d017      	beq.n	802daf0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 802dac0:	4b1d      	ldr	r3, [pc, #116]	@ (802db38 <FLASH_FlushCaches+0x88>)
 802dac2:	681b      	ldr	r3, [r3, #0]
 802dac4:	4a1c      	ldr	r2, [pc, #112]	@ (802db38 <FLASH_FlushCaches+0x88>)
 802dac6:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 802daca:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 802dacc:	4b1a      	ldr	r3, [pc, #104]	@ (802db38 <FLASH_FlushCaches+0x88>)
 802dace:	681b      	ldr	r3, [r3, #0]
 802dad0:	4a19      	ldr	r2, [pc, #100]	@ (802db38 <FLASH_FlushCaches+0x88>)
 802dad2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 802dad6:	6013      	str	r3, [r2, #0]
 802dad8:	4b17      	ldr	r3, [pc, #92]	@ (802db38 <FLASH_FlushCaches+0x88>)
 802dada:	681b      	ldr	r3, [r3, #0]
 802dadc:	4a16      	ldr	r2, [pc, #88]	@ (802db38 <FLASH_FlushCaches+0x88>)
 802dade:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 802dae2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 802dae4:	4b14      	ldr	r3, [pc, #80]	@ (802db38 <FLASH_FlushCaches+0x88>)
 802dae6:	681b      	ldr	r3, [r3, #0]
 802dae8:	4a13      	ldr	r2, [pc, #76]	@ (802db38 <FLASH_FlushCaches+0x88>)
 802daea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 802daee:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 802daf0:	4b11      	ldr	r3, [pc, #68]	@ (802db38 <FLASH_FlushCaches+0x88>)
 802daf2:	681b      	ldr	r3, [r3, #0]
 802daf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 802daf8:	2b00      	cmp	r3, #0
 802dafa:	d017      	beq.n	802db2c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 802dafc:	4b0e      	ldr	r3, [pc, #56]	@ (802db38 <FLASH_FlushCaches+0x88>)
 802dafe:	681b      	ldr	r3, [r3, #0]
 802db00:	4a0d      	ldr	r2, [pc, #52]	@ (802db38 <FLASH_FlushCaches+0x88>)
 802db02:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 802db06:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 802db08:	4b0b      	ldr	r3, [pc, #44]	@ (802db38 <FLASH_FlushCaches+0x88>)
 802db0a:	681b      	ldr	r3, [r3, #0]
 802db0c:	4a0a      	ldr	r2, [pc, #40]	@ (802db38 <FLASH_FlushCaches+0x88>)
 802db0e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 802db12:	6013      	str	r3, [r2, #0]
 802db14:	4b08      	ldr	r3, [pc, #32]	@ (802db38 <FLASH_FlushCaches+0x88>)
 802db16:	681b      	ldr	r3, [r3, #0]
 802db18:	4a07      	ldr	r2, [pc, #28]	@ (802db38 <FLASH_FlushCaches+0x88>)
 802db1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802db1e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 802db20:	4b05      	ldr	r3, [pc, #20]	@ (802db38 <FLASH_FlushCaches+0x88>)
 802db22:	681b      	ldr	r3, [r3, #0]
 802db24:	4a04      	ldr	r2, [pc, #16]	@ (802db38 <FLASH_FlushCaches+0x88>)
 802db26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 802db2a:	6013      	str	r3, [r2, #0]
  }
}
 802db2c:	bf00      	nop
 802db2e:	46bd      	mov	sp, r7
 802db30:	f85d 7b04 	ldr.w	r7, [sp], #4
 802db34:	4770      	bx	lr
 802db36:	bf00      	nop
 802db38:	40023c00 	.word	0x40023c00

0802db3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 802db3c:	b580      	push	{r7, lr}
 802db3e:	b088      	sub	sp, #32
 802db40:	af00      	add	r7, sp, #0
 802db42:	6078      	str	r0, [r7, #4]
 802db44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 802db46:	2300      	movs	r3, #0
 802db48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 802db4a:	2300      	movs	r3, #0
 802db4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 802db4e:	2300      	movs	r3, #0
 802db50:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 802db52:	687b      	ldr	r3, [r7, #4]
 802db54:	4a38      	ldr	r2, [pc, #224]	@ (802dc38 <HAL_GPIO_Init+0xfc>)
 802db56:	4293      	cmp	r3, r2
 802db58:	d023      	beq.n	802dba2 <HAL_GPIO_Init+0x66>
 802db5a:	687b      	ldr	r3, [r7, #4]
 802db5c:	4a37      	ldr	r2, [pc, #220]	@ (802dc3c <HAL_GPIO_Init+0x100>)
 802db5e:	4293      	cmp	r3, r2
 802db60:	d01f      	beq.n	802dba2 <HAL_GPIO_Init+0x66>
 802db62:	687b      	ldr	r3, [r7, #4]
 802db64:	4a36      	ldr	r2, [pc, #216]	@ (802dc40 <HAL_GPIO_Init+0x104>)
 802db66:	4293      	cmp	r3, r2
 802db68:	d01b      	beq.n	802dba2 <HAL_GPIO_Init+0x66>
 802db6a:	687b      	ldr	r3, [r7, #4]
 802db6c:	4a35      	ldr	r2, [pc, #212]	@ (802dc44 <HAL_GPIO_Init+0x108>)
 802db6e:	4293      	cmp	r3, r2
 802db70:	d017      	beq.n	802dba2 <HAL_GPIO_Init+0x66>
 802db72:	687b      	ldr	r3, [r7, #4]
 802db74:	4a34      	ldr	r2, [pc, #208]	@ (802dc48 <HAL_GPIO_Init+0x10c>)
 802db76:	4293      	cmp	r3, r2
 802db78:	d013      	beq.n	802dba2 <HAL_GPIO_Init+0x66>
 802db7a:	687b      	ldr	r3, [r7, #4]
 802db7c:	4a33      	ldr	r2, [pc, #204]	@ (802dc4c <HAL_GPIO_Init+0x110>)
 802db7e:	4293      	cmp	r3, r2
 802db80:	d00f      	beq.n	802dba2 <HAL_GPIO_Init+0x66>
 802db82:	687b      	ldr	r3, [r7, #4]
 802db84:	4a32      	ldr	r2, [pc, #200]	@ (802dc50 <HAL_GPIO_Init+0x114>)
 802db86:	4293      	cmp	r3, r2
 802db88:	d00b      	beq.n	802dba2 <HAL_GPIO_Init+0x66>
 802db8a:	687b      	ldr	r3, [r7, #4]
 802db8c:	4a31      	ldr	r2, [pc, #196]	@ (802dc54 <HAL_GPIO_Init+0x118>)
 802db8e:	4293      	cmp	r3, r2
 802db90:	d007      	beq.n	802dba2 <HAL_GPIO_Init+0x66>
 802db92:	687b      	ldr	r3, [r7, #4]
 802db94:	4a30      	ldr	r2, [pc, #192]	@ (802dc58 <HAL_GPIO_Init+0x11c>)
 802db96:	4293      	cmp	r3, r2
 802db98:	d003      	beq.n	802dba2 <HAL_GPIO_Init+0x66>
 802db9a:	21ac      	movs	r1, #172	@ 0xac
 802db9c:	482f      	ldr	r0, [pc, #188]	@ (802dc5c <HAL_GPIO_Init+0x120>)
 802db9e:	f7fa f8aa 	bl	8027cf6 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 802dba2:	683b      	ldr	r3, [r7, #0]
 802dba4:	681b      	ldr	r3, [r3, #0]
 802dba6:	b29b      	uxth	r3, r3
 802dba8:	2b00      	cmp	r3, #0
 802dbaa:	d004      	beq.n	802dbb6 <HAL_GPIO_Init+0x7a>
 802dbac:	683b      	ldr	r3, [r7, #0]
 802dbae:	681b      	ldr	r3, [r3, #0]
 802dbb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 802dbb4:	d303      	bcc.n	802dbbe <HAL_GPIO_Init+0x82>
 802dbb6:	21ad      	movs	r1, #173	@ 0xad
 802dbb8:	4828      	ldr	r0, [pc, #160]	@ (802dc5c <HAL_GPIO_Init+0x120>)
 802dbba:	f7fa f89c 	bl	8027cf6 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 802dbbe:	683b      	ldr	r3, [r7, #0]
 802dbc0:	685b      	ldr	r3, [r3, #4]
 802dbc2:	2b00      	cmp	r3, #0
 802dbc4:	d035      	beq.n	802dc32 <HAL_GPIO_Init+0xf6>
 802dbc6:	683b      	ldr	r3, [r7, #0]
 802dbc8:	685b      	ldr	r3, [r3, #4]
 802dbca:	2b01      	cmp	r3, #1
 802dbcc:	d031      	beq.n	802dc32 <HAL_GPIO_Init+0xf6>
 802dbce:	683b      	ldr	r3, [r7, #0]
 802dbd0:	685b      	ldr	r3, [r3, #4]
 802dbd2:	2b11      	cmp	r3, #17
 802dbd4:	d02d      	beq.n	802dc32 <HAL_GPIO_Init+0xf6>
 802dbd6:	683b      	ldr	r3, [r7, #0]
 802dbd8:	685b      	ldr	r3, [r3, #4]
 802dbda:	2b02      	cmp	r3, #2
 802dbdc:	d029      	beq.n	802dc32 <HAL_GPIO_Init+0xf6>
 802dbde:	683b      	ldr	r3, [r7, #0]
 802dbe0:	685b      	ldr	r3, [r3, #4]
 802dbe2:	2b12      	cmp	r3, #18
 802dbe4:	d025      	beq.n	802dc32 <HAL_GPIO_Init+0xf6>
 802dbe6:	683b      	ldr	r3, [r7, #0]
 802dbe8:	685b      	ldr	r3, [r3, #4]
 802dbea:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 802dbee:	d020      	beq.n	802dc32 <HAL_GPIO_Init+0xf6>
 802dbf0:	683b      	ldr	r3, [r7, #0]
 802dbf2:	685b      	ldr	r3, [r3, #4]
 802dbf4:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 802dbf8:	d01b      	beq.n	802dc32 <HAL_GPIO_Init+0xf6>
 802dbfa:	683b      	ldr	r3, [r7, #0]
 802dbfc:	685b      	ldr	r3, [r3, #4]
 802dbfe:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 802dc02:	d016      	beq.n	802dc32 <HAL_GPIO_Init+0xf6>
 802dc04:	683b      	ldr	r3, [r7, #0]
 802dc06:	685b      	ldr	r3, [r3, #4]
 802dc08:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 802dc0c:	d011      	beq.n	802dc32 <HAL_GPIO_Init+0xf6>
 802dc0e:	683b      	ldr	r3, [r7, #0]
 802dc10:	685b      	ldr	r3, [r3, #4]
 802dc12:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 802dc16:	d00c      	beq.n	802dc32 <HAL_GPIO_Init+0xf6>
 802dc18:	683b      	ldr	r3, [r7, #0]
 802dc1a:	685b      	ldr	r3, [r3, #4]
 802dc1c:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 802dc20:	d007      	beq.n	802dc32 <HAL_GPIO_Init+0xf6>
 802dc22:	683b      	ldr	r3, [r7, #0]
 802dc24:	685b      	ldr	r3, [r3, #4]
 802dc26:	2b03      	cmp	r3, #3
 802dc28:	d003      	beq.n	802dc32 <HAL_GPIO_Init+0xf6>
 802dc2a:	21ae      	movs	r1, #174	@ 0xae
 802dc2c:	480b      	ldr	r0, [pc, #44]	@ (802dc5c <HAL_GPIO_Init+0x120>)
 802dc2e:	f7fa f862 	bl	8027cf6 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 802dc32:	2300      	movs	r3, #0
 802dc34:	61fb      	str	r3, [r7, #28]
 802dc36:	e241      	b.n	802e0bc <HAL_GPIO_Init+0x580>
 802dc38:	40020000 	.word	0x40020000
 802dc3c:	40020400 	.word	0x40020400
 802dc40:	40020800 	.word	0x40020800
 802dc44:	40020c00 	.word	0x40020c00
 802dc48:	40021000 	.word	0x40021000
 802dc4c:	40021400 	.word	0x40021400
 802dc50:	40021800 	.word	0x40021800
 802dc54:	40021c00 	.word	0x40021c00
 802dc58:	40022000 	.word	0x40022000
 802dc5c:	0803851c 	.word	0x0803851c
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 802dc60:	2201      	movs	r2, #1
 802dc62:	69fb      	ldr	r3, [r7, #28]
 802dc64:	fa02 f303 	lsl.w	r3, r2, r3
 802dc68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 802dc6a:	683b      	ldr	r3, [r7, #0]
 802dc6c:	681b      	ldr	r3, [r3, #0]
 802dc6e:	697a      	ldr	r2, [r7, #20]
 802dc70:	4013      	ands	r3, r2
 802dc72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 802dc74:	693a      	ldr	r2, [r7, #16]
 802dc76:	697b      	ldr	r3, [r7, #20]
 802dc78:	429a      	cmp	r2, r3
 802dc7a:	f040 821c 	bne.w	802e0b6 <HAL_GPIO_Init+0x57a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 802dc7e:	683b      	ldr	r3, [r7, #0]
 802dc80:	685b      	ldr	r3, [r3, #4]
 802dc82:	f003 0303 	and.w	r3, r3, #3
 802dc86:	2b01      	cmp	r3, #1
 802dc88:	d005      	beq.n	802dc96 <HAL_GPIO_Init+0x15a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 802dc8a:	683b      	ldr	r3, [r7, #0]
 802dc8c:	685b      	ldr	r3, [r3, #4]
 802dc8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 802dc92:	2b02      	cmp	r3, #2
 802dc94:	d144      	bne.n	802dd20 <HAL_GPIO_Init+0x1e4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 802dc96:	683b      	ldr	r3, [r7, #0]
 802dc98:	68db      	ldr	r3, [r3, #12]
 802dc9a:	2b00      	cmp	r3, #0
 802dc9c:	d00f      	beq.n	802dcbe <HAL_GPIO_Init+0x182>
 802dc9e:	683b      	ldr	r3, [r7, #0]
 802dca0:	68db      	ldr	r3, [r3, #12]
 802dca2:	2b01      	cmp	r3, #1
 802dca4:	d00b      	beq.n	802dcbe <HAL_GPIO_Init+0x182>
 802dca6:	683b      	ldr	r3, [r7, #0]
 802dca8:	68db      	ldr	r3, [r3, #12]
 802dcaa:	2b02      	cmp	r3, #2
 802dcac:	d007      	beq.n	802dcbe <HAL_GPIO_Init+0x182>
 802dcae:	683b      	ldr	r3, [r7, #0]
 802dcb0:	68db      	ldr	r3, [r3, #12]
 802dcb2:	2b03      	cmp	r3, #3
 802dcb4:	d003      	beq.n	802dcbe <HAL_GPIO_Init+0x182>
 802dcb6:	21c0      	movs	r1, #192	@ 0xc0
 802dcb8:	4881      	ldr	r0, [pc, #516]	@ (802dec0 <HAL_GPIO_Init+0x384>)
 802dcba:	f7fa f81c 	bl	8027cf6 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 802dcbe:	687b      	ldr	r3, [r7, #4]
 802dcc0:	689b      	ldr	r3, [r3, #8]
 802dcc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 802dcc4:	69fb      	ldr	r3, [r7, #28]
 802dcc6:	005b      	lsls	r3, r3, #1
 802dcc8:	2203      	movs	r2, #3
 802dcca:	fa02 f303 	lsl.w	r3, r2, r3
 802dcce:	43db      	mvns	r3, r3
 802dcd0:	69ba      	ldr	r2, [r7, #24]
 802dcd2:	4013      	ands	r3, r2
 802dcd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 802dcd6:	683b      	ldr	r3, [r7, #0]
 802dcd8:	68da      	ldr	r2, [r3, #12]
 802dcda:	69fb      	ldr	r3, [r7, #28]
 802dcdc:	005b      	lsls	r3, r3, #1
 802dcde:	fa02 f303 	lsl.w	r3, r2, r3
 802dce2:	69ba      	ldr	r2, [r7, #24]
 802dce4:	4313      	orrs	r3, r2
 802dce6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 802dce8:	687b      	ldr	r3, [r7, #4]
 802dcea:	69ba      	ldr	r2, [r7, #24]
 802dcec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 802dcee:	687b      	ldr	r3, [r7, #4]
 802dcf0:	685b      	ldr	r3, [r3, #4]
 802dcf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 802dcf4:	2201      	movs	r2, #1
 802dcf6:	69fb      	ldr	r3, [r7, #28]
 802dcf8:	fa02 f303 	lsl.w	r3, r2, r3
 802dcfc:	43db      	mvns	r3, r3
 802dcfe:	69ba      	ldr	r2, [r7, #24]
 802dd00:	4013      	ands	r3, r2
 802dd02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 802dd04:	683b      	ldr	r3, [r7, #0]
 802dd06:	685b      	ldr	r3, [r3, #4]
 802dd08:	091b      	lsrs	r3, r3, #4
 802dd0a:	f003 0201 	and.w	r2, r3, #1
 802dd0e:	69fb      	ldr	r3, [r7, #28]
 802dd10:	fa02 f303 	lsl.w	r3, r2, r3
 802dd14:	69ba      	ldr	r2, [r7, #24]
 802dd16:	4313      	orrs	r3, r2
 802dd18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 802dd1a:	687b      	ldr	r3, [r7, #4]
 802dd1c:	69ba      	ldr	r2, [r7, #24]
 802dd1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 802dd20:	683b      	ldr	r3, [r7, #0]
 802dd22:	685b      	ldr	r3, [r3, #4]
 802dd24:	f003 0303 	and.w	r3, r3, #3
 802dd28:	2b03      	cmp	r3, #3
 802dd2a:	d027      	beq.n	802dd7c <HAL_GPIO_Init+0x240>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 802dd2c:	683b      	ldr	r3, [r7, #0]
 802dd2e:	689b      	ldr	r3, [r3, #8]
 802dd30:	2b00      	cmp	r3, #0
 802dd32:	d00b      	beq.n	802dd4c <HAL_GPIO_Init+0x210>
 802dd34:	683b      	ldr	r3, [r7, #0]
 802dd36:	689b      	ldr	r3, [r3, #8]
 802dd38:	2b01      	cmp	r3, #1
 802dd3a:	d007      	beq.n	802dd4c <HAL_GPIO_Init+0x210>
 802dd3c:	683b      	ldr	r3, [r7, #0]
 802dd3e:	689b      	ldr	r3, [r3, #8]
 802dd40:	2b02      	cmp	r3, #2
 802dd42:	d003      	beq.n	802dd4c <HAL_GPIO_Init+0x210>
 802dd44:	21d1      	movs	r1, #209	@ 0xd1
 802dd46:	485e      	ldr	r0, [pc, #376]	@ (802dec0 <HAL_GPIO_Init+0x384>)
 802dd48:	f7f9 ffd5 	bl	8027cf6 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 802dd4c:	687b      	ldr	r3, [r7, #4]
 802dd4e:	68db      	ldr	r3, [r3, #12]
 802dd50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 802dd52:	69fb      	ldr	r3, [r7, #28]
 802dd54:	005b      	lsls	r3, r3, #1
 802dd56:	2203      	movs	r2, #3
 802dd58:	fa02 f303 	lsl.w	r3, r2, r3
 802dd5c:	43db      	mvns	r3, r3
 802dd5e:	69ba      	ldr	r2, [r7, #24]
 802dd60:	4013      	ands	r3, r2
 802dd62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 802dd64:	683b      	ldr	r3, [r7, #0]
 802dd66:	689a      	ldr	r2, [r3, #8]
 802dd68:	69fb      	ldr	r3, [r7, #28]
 802dd6a:	005b      	lsls	r3, r3, #1
 802dd6c:	fa02 f303 	lsl.w	r3, r2, r3
 802dd70:	69ba      	ldr	r2, [r7, #24]
 802dd72:	4313      	orrs	r3, r2
 802dd74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 802dd76:	687b      	ldr	r3, [r7, #4]
 802dd78:	69ba      	ldr	r2, [r7, #24]
 802dd7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 802dd7c:	683b      	ldr	r3, [r7, #0]
 802dd7e:	685b      	ldr	r3, [r3, #4]
 802dd80:	f003 0303 	and.w	r3, r3, #3
 802dd84:	2b02      	cmp	r3, #2
 802dd86:	f040 80c1 	bne.w	802df0c <HAL_GPIO_Init+0x3d0>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 802dd8a:	683b      	ldr	r3, [r7, #0]
 802dd8c:	691b      	ldr	r3, [r3, #16]
 802dd8e:	2b00      	cmp	r3, #0
 802dd90:	f000 8098 	beq.w	802dec4 <HAL_GPIO_Init+0x388>
 802dd94:	683b      	ldr	r3, [r7, #0]
 802dd96:	691b      	ldr	r3, [r3, #16]
 802dd98:	2b09      	cmp	r3, #9
 802dd9a:	f000 8093 	beq.w	802dec4 <HAL_GPIO_Init+0x388>
 802dd9e:	683b      	ldr	r3, [r7, #0]
 802dda0:	691b      	ldr	r3, [r3, #16]
 802dda2:	2b00      	cmp	r3, #0
 802dda4:	f000 808e 	beq.w	802dec4 <HAL_GPIO_Init+0x388>
 802dda8:	683b      	ldr	r3, [r7, #0]
 802ddaa:	691b      	ldr	r3, [r3, #16]
 802ddac:	2b00      	cmp	r3, #0
 802ddae:	f000 8089 	beq.w	802dec4 <HAL_GPIO_Init+0x388>
 802ddb2:	683b      	ldr	r3, [r7, #0]
 802ddb4:	691b      	ldr	r3, [r3, #16]
 802ddb6:	2b00      	cmp	r3, #0
 802ddb8:	f000 8084 	beq.w	802dec4 <HAL_GPIO_Init+0x388>
 802ddbc:	683b      	ldr	r3, [r7, #0]
 802ddbe:	691b      	ldr	r3, [r3, #16]
 802ddc0:	2b00      	cmp	r3, #0
 802ddc2:	d07f      	beq.n	802dec4 <HAL_GPIO_Init+0x388>
 802ddc4:	683b      	ldr	r3, [r7, #0]
 802ddc6:	691b      	ldr	r3, [r3, #16]
 802ddc8:	2b01      	cmp	r3, #1
 802ddca:	d07b      	beq.n	802dec4 <HAL_GPIO_Init+0x388>
 802ddcc:	683b      	ldr	r3, [r7, #0]
 802ddce:	691b      	ldr	r3, [r3, #16]
 802ddd0:	2b01      	cmp	r3, #1
 802ddd2:	d077      	beq.n	802dec4 <HAL_GPIO_Init+0x388>
 802ddd4:	683b      	ldr	r3, [r7, #0]
 802ddd6:	691b      	ldr	r3, [r3, #16]
 802ddd8:	2b02      	cmp	r3, #2
 802ddda:	d073      	beq.n	802dec4 <HAL_GPIO_Init+0x388>
 802dddc:	683b      	ldr	r3, [r7, #0]
 802ddde:	691b      	ldr	r3, [r3, #16]
 802dde0:	2b02      	cmp	r3, #2
 802dde2:	d06f      	beq.n	802dec4 <HAL_GPIO_Init+0x388>
 802dde4:	683b      	ldr	r3, [r7, #0]
 802dde6:	691b      	ldr	r3, [r3, #16]
 802dde8:	2b02      	cmp	r3, #2
 802ddea:	d06b      	beq.n	802dec4 <HAL_GPIO_Init+0x388>
 802ddec:	683b      	ldr	r3, [r7, #0]
 802ddee:	691b      	ldr	r3, [r3, #16]
 802ddf0:	2b03      	cmp	r3, #3
 802ddf2:	d067      	beq.n	802dec4 <HAL_GPIO_Init+0x388>
 802ddf4:	683b      	ldr	r3, [r7, #0]
 802ddf6:	691b      	ldr	r3, [r3, #16]
 802ddf8:	2b04      	cmp	r3, #4
 802ddfa:	d063      	beq.n	802dec4 <HAL_GPIO_Init+0x388>
 802ddfc:	683b      	ldr	r3, [r7, #0]
 802ddfe:	691b      	ldr	r3, [r3, #16]
 802de00:	2b04      	cmp	r3, #4
 802de02:	d05f      	beq.n	802dec4 <HAL_GPIO_Init+0x388>
 802de04:	683b      	ldr	r3, [r7, #0]
 802de06:	691b      	ldr	r3, [r3, #16]
 802de08:	2b04      	cmp	r3, #4
 802de0a:	d05b      	beq.n	802dec4 <HAL_GPIO_Init+0x388>
 802de0c:	683b      	ldr	r3, [r7, #0]
 802de0e:	691b      	ldr	r3, [r3, #16]
 802de10:	2b05      	cmp	r3, #5
 802de12:	d057      	beq.n	802dec4 <HAL_GPIO_Init+0x388>
 802de14:	683b      	ldr	r3, [r7, #0]
 802de16:	691b      	ldr	r3, [r3, #16]
 802de18:	2b05      	cmp	r3, #5
 802de1a:	d053      	beq.n	802dec4 <HAL_GPIO_Init+0x388>
 802de1c:	683b      	ldr	r3, [r7, #0]
 802de1e:	691b      	ldr	r3, [r3, #16]
 802de20:	2b09      	cmp	r3, #9
 802de22:	d04f      	beq.n	802dec4 <HAL_GPIO_Init+0x388>
 802de24:	683b      	ldr	r3, [r7, #0]
 802de26:	691b      	ldr	r3, [r3, #16]
 802de28:	2b06      	cmp	r3, #6
 802de2a:	d04b      	beq.n	802dec4 <HAL_GPIO_Init+0x388>
 802de2c:	683b      	ldr	r3, [r7, #0]
 802de2e:	691b      	ldr	r3, [r3, #16]
 802de30:	2b09      	cmp	r3, #9
 802de32:	d047      	beq.n	802dec4 <HAL_GPIO_Init+0x388>
 802de34:	683b      	ldr	r3, [r7, #0]
 802de36:	691b      	ldr	r3, [r3, #16]
 802de38:	2b07      	cmp	r3, #7
 802de3a:	d043      	beq.n	802dec4 <HAL_GPIO_Init+0x388>
 802de3c:	683b      	ldr	r3, [r7, #0]
 802de3e:	691b      	ldr	r3, [r3, #16]
 802de40:	2b07      	cmp	r3, #7
 802de42:	d03f      	beq.n	802dec4 <HAL_GPIO_Init+0x388>
 802de44:	683b      	ldr	r3, [r7, #0]
 802de46:	691b      	ldr	r3, [r3, #16]
 802de48:	2b07      	cmp	r3, #7
 802de4a:	d03b      	beq.n	802dec4 <HAL_GPIO_Init+0x388>
 802de4c:	683b      	ldr	r3, [r7, #0]
 802de4e:	691b      	ldr	r3, [r3, #16]
 802de50:	2b08      	cmp	r3, #8
 802de52:	d037      	beq.n	802dec4 <HAL_GPIO_Init+0x388>
 802de54:	683b      	ldr	r3, [r7, #0]
 802de56:	691b      	ldr	r3, [r3, #16]
 802de58:	2b08      	cmp	r3, #8
 802de5a:	d033      	beq.n	802dec4 <HAL_GPIO_Init+0x388>
 802de5c:	683b      	ldr	r3, [r7, #0]
 802de5e:	691b      	ldr	r3, [r3, #16]
 802de60:	2b08      	cmp	r3, #8
 802de62:	d02f      	beq.n	802dec4 <HAL_GPIO_Init+0x388>
 802de64:	683b      	ldr	r3, [r7, #0]
 802de66:	691b      	ldr	r3, [r3, #16]
 802de68:	2b09      	cmp	r3, #9
 802de6a:	d02b      	beq.n	802dec4 <HAL_GPIO_Init+0x388>
 802de6c:	683b      	ldr	r3, [r7, #0]
 802de6e:	691b      	ldr	r3, [r3, #16]
 802de70:	2b09      	cmp	r3, #9
 802de72:	d027      	beq.n	802dec4 <HAL_GPIO_Init+0x388>
 802de74:	683b      	ldr	r3, [r7, #0]
 802de76:	691b      	ldr	r3, [r3, #16]
 802de78:	2b0a      	cmp	r3, #10
 802de7a:	d023      	beq.n	802dec4 <HAL_GPIO_Init+0x388>
 802de7c:	683b      	ldr	r3, [r7, #0]
 802de7e:	691b      	ldr	r3, [r3, #16]
 802de80:	2b0a      	cmp	r3, #10
 802de82:	d01f      	beq.n	802dec4 <HAL_GPIO_Init+0x388>
 802de84:	683b      	ldr	r3, [r7, #0]
 802de86:	691b      	ldr	r3, [r3, #16]
 802de88:	2b0b      	cmp	r3, #11
 802de8a:	d01b      	beq.n	802dec4 <HAL_GPIO_Init+0x388>
 802de8c:	683b      	ldr	r3, [r7, #0]
 802de8e:	691b      	ldr	r3, [r3, #16]
 802de90:	2b0c      	cmp	r3, #12
 802de92:	d017      	beq.n	802dec4 <HAL_GPIO_Init+0x388>
 802de94:	683b      	ldr	r3, [r7, #0]
 802de96:	691b      	ldr	r3, [r3, #16]
 802de98:	2b0c      	cmp	r3, #12
 802de9a:	d013      	beq.n	802dec4 <HAL_GPIO_Init+0x388>
 802de9c:	683b      	ldr	r3, [r7, #0]
 802de9e:	691b      	ldr	r3, [r3, #16]
 802dea0:	2b0d      	cmp	r3, #13
 802dea2:	d00f      	beq.n	802dec4 <HAL_GPIO_Init+0x388>
 802dea4:	683b      	ldr	r3, [r7, #0]
 802dea6:	691b      	ldr	r3, [r3, #16]
 802dea8:	2b0c      	cmp	r3, #12
 802deaa:	d00b      	beq.n	802dec4 <HAL_GPIO_Init+0x388>
 802deac:	683b      	ldr	r3, [r7, #0]
 802deae:	691b      	ldr	r3, [r3, #16]
 802deb0:	2b0f      	cmp	r3, #15
 802deb2:	d007      	beq.n	802dec4 <HAL_GPIO_Init+0x388>
 802deb4:	21de      	movs	r1, #222	@ 0xde
 802deb6:	4802      	ldr	r0, [pc, #8]	@ (802dec0 <HAL_GPIO_Init+0x384>)
 802deb8:	f7f9 ff1d 	bl	8027cf6 <assert_failed>
 802debc:	e002      	b.n	802dec4 <HAL_GPIO_Init+0x388>
 802debe:	bf00      	nop
 802dec0:	0803851c 	.word	0x0803851c
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 802dec4:	69fb      	ldr	r3, [r7, #28]
 802dec6:	08da      	lsrs	r2, r3, #3
 802dec8:	687b      	ldr	r3, [r7, #4]
 802deca:	3208      	adds	r2, #8
 802decc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802ded0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 802ded2:	69fb      	ldr	r3, [r7, #28]
 802ded4:	f003 0307 	and.w	r3, r3, #7
 802ded8:	009b      	lsls	r3, r3, #2
 802deda:	220f      	movs	r2, #15
 802dedc:	fa02 f303 	lsl.w	r3, r2, r3
 802dee0:	43db      	mvns	r3, r3
 802dee2:	69ba      	ldr	r2, [r7, #24]
 802dee4:	4013      	ands	r3, r2
 802dee6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 802dee8:	683b      	ldr	r3, [r7, #0]
 802deea:	691a      	ldr	r2, [r3, #16]
 802deec:	69fb      	ldr	r3, [r7, #28]
 802deee:	f003 0307 	and.w	r3, r3, #7
 802def2:	009b      	lsls	r3, r3, #2
 802def4:	fa02 f303 	lsl.w	r3, r2, r3
 802def8:	69ba      	ldr	r2, [r7, #24]
 802defa:	4313      	orrs	r3, r2
 802defc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 802defe:	69fb      	ldr	r3, [r7, #28]
 802df00:	08da      	lsrs	r2, r3, #3
 802df02:	687b      	ldr	r3, [r7, #4]
 802df04:	3208      	adds	r2, #8
 802df06:	69b9      	ldr	r1, [r7, #24]
 802df08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 802df0c:	687b      	ldr	r3, [r7, #4]
 802df0e:	681b      	ldr	r3, [r3, #0]
 802df10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 802df12:	69fb      	ldr	r3, [r7, #28]
 802df14:	005b      	lsls	r3, r3, #1
 802df16:	2203      	movs	r2, #3
 802df18:	fa02 f303 	lsl.w	r3, r2, r3
 802df1c:	43db      	mvns	r3, r3
 802df1e:	69ba      	ldr	r2, [r7, #24]
 802df20:	4013      	ands	r3, r2
 802df22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 802df24:	683b      	ldr	r3, [r7, #0]
 802df26:	685b      	ldr	r3, [r3, #4]
 802df28:	f003 0203 	and.w	r2, r3, #3
 802df2c:	69fb      	ldr	r3, [r7, #28]
 802df2e:	005b      	lsls	r3, r3, #1
 802df30:	fa02 f303 	lsl.w	r3, r2, r3
 802df34:	69ba      	ldr	r2, [r7, #24]
 802df36:	4313      	orrs	r3, r2
 802df38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 802df3a:	687b      	ldr	r3, [r7, #4]
 802df3c:	69ba      	ldr	r2, [r7, #24]
 802df3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 802df40:	683b      	ldr	r3, [r7, #0]
 802df42:	685b      	ldr	r3, [r3, #4]
 802df44:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 802df48:	2b00      	cmp	r3, #0
 802df4a:	f000 80b4 	beq.w	802e0b6 <HAL_GPIO_Init+0x57a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 802df4e:	2300      	movs	r3, #0
 802df50:	60fb      	str	r3, [r7, #12]
 802df52:	4b5f      	ldr	r3, [pc, #380]	@ (802e0d0 <HAL_GPIO_Init+0x594>)
 802df54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802df56:	4a5e      	ldr	r2, [pc, #376]	@ (802e0d0 <HAL_GPIO_Init+0x594>)
 802df58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 802df5c:	6453      	str	r3, [r2, #68]	@ 0x44
 802df5e:	4b5c      	ldr	r3, [pc, #368]	@ (802e0d0 <HAL_GPIO_Init+0x594>)
 802df60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802df62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 802df66:	60fb      	str	r3, [r7, #12]
 802df68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 802df6a:	4a5a      	ldr	r2, [pc, #360]	@ (802e0d4 <HAL_GPIO_Init+0x598>)
 802df6c:	69fb      	ldr	r3, [r7, #28]
 802df6e:	089b      	lsrs	r3, r3, #2
 802df70:	3302      	adds	r3, #2
 802df72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802df76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 802df78:	69fb      	ldr	r3, [r7, #28]
 802df7a:	f003 0303 	and.w	r3, r3, #3
 802df7e:	009b      	lsls	r3, r3, #2
 802df80:	220f      	movs	r2, #15
 802df82:	fa02 f303 	lsl.w	r3, r2, r3
 802df86:	43db      	mvns	r3, r3
 802df88:	69ba      	ldr	r2, [r7, #24]
 802df8a:	4013      	ands	r3, r2
 802df8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 802df8e:	687b      	ldr	r3, [r7, #4]
 802df90:	4a51      	ldr	r2, [pc, #324]	@ (802e0d8 <HAL_GPIO_Init+0x59c>)
 802df92:	4293      	cmp	r3, r2
 802df94:	d02b      	beq.n	802dfee <HAL_GPIO_Init+0x4b2>
 802df96:	687b      	ldr	r3, [r7, #4]
 802df98:	4a50      	ldr	r2, [pc, #320]	@ (802e0dc <HAL_GPIO_Init+0x5a0>)
 802df9a:	4293      	cmp	r3, r2
 802df9c:	d025      	beq.n	802dfea <HAL_GPIO_Init+0x4ae>
 802df9e:	687b      	ldr	r3, [r7, #4]
 802dfa0:	4a4f      	ldr	r2, [pc, #316]	@ (802e0e0 <HAL_GPIO_Init+0x5a4>)
 802dfa2:	4293      	cmp	r3, r2
 802dfa4:	d01f      	beq.n	802dfe6 <HAL_GPIO_Init+0x4aa>
 802dfa6:	687b      	ldr	r3, [r7, #4]
 802dfa8:	4a4e      	ldr	r2, [pc, #312]	@ (802e0e4 <HAL_GPIO_Init+0x5a8>)
 802dfaa:	4293      	cmp	r3, r2
 802dfac:	d019      	beq.n	802dfe2 <HAL_GPIO_Init+0x4a6>
 802dfae:	687b      	ldr	r3, [r7, #4]
 802dfb0:	4a4d      	ldr	r2, [pc, #308]	@ (802e0e8 <HAL_GPIO_Init+0x5ac>)
 802dfb2:	4293      	cmp	r3, r2
 802dfb4:	d013      	beq.n	802dfde <HAL_GPIO_Init+0x4a2>
 802dfb6:	687b      	ldr	r3, [r7, #4]
 802dfb8:	4a4c      	ldr	r2, [pc, #304]	@ (802e0ec <HAL_GPIO_Init+0x5b0>)
 802dfba:	4293      	cmp	r3, r2
 802dfbc:	d00d      	beq.n	802dfda <HAL_GPIO_Init+0x49e>
 802dfbe:	687b      	ldr	r3, [r7, #4]
 802dfc0:	4a4b      	ldr	r2, [pc, #300]	@ (802e0f0 <HAL_GPIO_Init+0x5b4>)
 802dfc2:	4293      	cmp	r3, r2
 802dfc4:	d007      	beq.n	802dfd6 <HAL_GPIO_Init+0x49a>
 802dfc6:	687b      	ldr	r3, [r7, #4]
 802dfc8:	4a4a      	ldr	r2, [pc, #296]	@ (802e0f4 <HAL_GPIO_Init+0x5b8>)
 802dfca:	4293      	cmp	r3, r2
 802dfcc:	d101      	bne.n	802dfd2 <HAL_GPIO_Init+0x496>
 802dfce:	2307      	movs	r3, #7
 802dfd0:	e00e      	b.n	802dff0 <HAL_GPIO_Init+0x4b4>
 802dfd2:	2308      	movs	r3, #8
 802dfd4:	e00c      	b.n	802dff0 <HAL_GPIO_Init+0x4b4>
 802dfd6:	2306      	movs	r3, #6
 802dfd8:	e00a      	b.n	802dff0 <HAL_GPIO_Init+0x4b4>
 802dfda:	2305      	movs	r3, #5
 802dfdc:	e008      	b.n	802dff0 <HAL_GPIO_Init+0x4b4>
 802dfde:	2304      	movs	r3, #4
 802dfe0:	e006      	b.n	802dff0 <HAL_GPIO_Init+0x4b4>
 802dfe2:	2303      	movs	r3, #3
 802dfe4:	e004      	b.n	802dff0 <HAL_GPIO_Init+0x4b4>
 802dfe6:	2302      	movs	r3, #2
 802dfe8:	e002      	b.n	802dff0 <HAL_GPIO_Init+0x4b4>
 802dfea:	2301      	movs	r3, #1
 802dfec:	e000      	b.n	802dff0 <HAL_GPIO_Init+0x4b4>
 802dfee:	2300      	movs	r3, #0
 802dff0:	69fa      	ldr	r2, [r7, #28]
 802dff2:	f002 0203 	and.w	r2, r2, #3
 802dff6:	0092      	lsls	r2, r2, #2
 802dff8:	4093      	lsls	r3, r2
 802dffa:	69ba      	ldr	r2, [r7, #24]
 802dffc:	4313      	orrs	r3, r2
 802dffe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 802e000:	4934      	ldr	r1, [pc, #208]	@ (802e0d4 <HAL_GPIO_Init+0x598>)
 802e002:	69fb      	ldr	r3, [r7, #28]
 802e004:	089b      	lsrs	r3, r3, #2
 802e006:	3302      	adds	r3, #2
 802e008:	69ba      	ldr	r2, [r7, #24]
 802e00a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 802e00e:	4b3a      	ldr	r3, [pc, #232]	@ (802e0f8 <HAL_GPIO_Init+0x5bc>)
 802e010:	689b      	ldr	r3, [r3, #8]
 802e012:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 802e014:	693b      	ldr	r3, [r7, #16]
 802e016:	43db      	mvns	r3, r3
 802e018:	69ba      	ldr	r2, [r7, #24]
 802e01a:	4013      	ands	r3, r2
 802e01c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 802e01e:	683b      	ldr	r3, [r7, #0]
 802e020:	685b      	ldr	r3, [r3, #4]
 802e022:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 802e026:	2b00      	cmp	r3, #0
 802e028:	d003      	beq.n	802e032 <HAL_GPIO_Init+0x4f6>
        {
          temp |= iocurrent;
 802e02a:	69ba      	ldr	r2, [r7, #24]
 802e02c:	693b      	ldr	r3, [r7, #16]
 802e02e:	4313      	orrs	r3, r2
 802e030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 802e032:	4a31      	ldr	r2, [pc, #196]	@ (802e0f8 <HAL_GPIO_Init+0x5bc>)
 802e034:	69bb      	ldr	r3, [r7, #24]
 802e036:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 802e038:	4b2f      	ldr	r3, [pc, #188]	@ (802e0f8 <HAL_GPIO_Init+0x5bc>)
 802e03a:	68db      	ldr	r3, [r3, #12]
 802e03c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 802e03e:	693b      	ldr	r3, [r7, #16]
 802e040:	43db      	mvns	r3, r3
 802e042:	69ba      	ldr	r2, [r7, #24]
 802e044:	4013      	ands	r3, r2
 802e046:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 802e048:	683b      	ldr	r3, [r7, #0]
 802e04a:	685b      	ldr	r3, [r3, #4]
 802e04c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 802e050:	2b00      	cmp	r3, #0
 802e052:	d003      	beq.n	802e05c <HAL_GPIO_Init+0x520>
        {
          temp |= iocurrent;
 802e054:	69ba      	ldr	r2, [r7, #24]
 802e056:	693b      	ldr	r3, [r7, #16]
 802e058:	4313      	orrs	r3, r2
 802e05a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 802e05c:	4a26      	ldr	r2, [pc, #152]	@ (802e0f8 <HAL_GPIO_Init+0x5bc>)
 802e05e:	69bb      	ldr	r3, [r7, #24]
 802e060:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 802e062:	4b25      	ldr	r3, [pc, #148]	@ (802e0f8 <HAL_GPIO_Init+0x5bc>)
 802e064:	685b      	ldr	r3, [r3, #4]
 802e066:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 802e068:	693b      	ldr	r3, [r7, #16]
 802e06a:	43db      	mvns	r3, r3
 802e06c:	69ba      	ldr	r2, [r7, #24]
 802e06e:	4013      	ands	r3, r2
 802e070:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 802e072:	683b      	ldr	r3, [r7, #0]
 802e074:	685b      	ldr	r3, [r3, #4]
 802e076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 802e07a:	2b00      	cmp	r3, #0
 802e07c:	d003      	beq.n	802e086 <HAL_GPIO_Init+0x54a>
        {
          temp |= iocurrent;
 802e07e:	69ba      	ldr	r2, [r7, #24]
 802e080:	693b      	ldr	r3, [r7, #16]
 802e082:	4313      	orrs	r3, r2
 802e084:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 802e086:	4a1c      	ldr	r2, [pc, #112]	@ (802e0f8 <HAL_GPIO_Init+0x5bc>)
 802e088:	69bb      	ldr	r3, [r7, #24]
 802e08a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 802e08c:	4b1a      	ldr	r3, [pc, #104]	@ (802e0f8 <HAL_GPIO_Init+0x5bc>)
 802e08e:	681b      	ldr	r3, [r3, #0]
 802e090:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 802e092:	693b      	ldr	r3, [r7, #16]
 802e094:	43db      	mvns	r3, r3
 802e096:	69ba      	ldr	r2, [r7, #24]
 802e098:	4013      	ands	r3, r2
 802e09a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 802e09c:	683b      	ldr	r3, [r7, #0]
 802e09e:	685b      	ldr	r3, [r3, #4]
 802e0a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 802e0a4:	2b00      	cmp	r3, #0
 802e0a6:	d003      	beq.n	802e0b0 <HAL_GPIO_Init+0x574>
        {
          temp |= iocurrent;
 802e0a8:	69ba      	ldr	r2, [r7, #24]
 802e0aa:	693b      	ldr	r3, [r7, #16]
 802e0ac:	4313      	orrs	r3, r2
 802e0ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 802e0b0:	4a11      	ldr	r2, [pc, #68]	@ (802e0f8 <HAL_GPIO_Init+0x5bc>)
 802e0b2:	69bb      	ldr	r3, [r7, #24]
 802e0b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 802e0b6:	69fb      	ldr	r3, [r7, #28]
 802e0b8:	3301      	adds	r3, #1
 802e0ba:	61fb      	str	r3, [r7, #28]
 802e0bc:	69fb      	ldr	r3, [r7, #28]
 802e0be:	2b0f      	cmp	r3, #15
 802e0c0:	f67f adce 	bls.w	802dc60 <HAL_GPIO_Init+0x124>
      }
    }
  }
}
 802e0c4:	bf00      	nop
 802e0c6:	bf00      	nop
 802e0c8:	3720      	adds	r7, #32
 802e0ca:	46bd      	mov	sp, r7
 802e0cc:	bd80      	pop	{r7, pc}
 802e0ce:	bf00      	nop
 802e0d0:	40023800 	.word	0x40023800
 802e0d4:	40013800 	.word	0x40013800
 802e0d8:	40020000 	.word	0x40020000
 802e0dc:	40020400 	.word	0x40020400
 802e0e0:	40020800 	.word	0x40020800
 802e0e4:	40020c00 	.word	0x40020c00
 802e0e8:	40021000 	.word	0x40021000
 802e0ec:	40021400 	.word	0x40021400
 802e0f0:	40021800 	.word	0x40021800
 802e0f4:	40021c00 	.word	0x40021c00
 802e0f8:	40013c00 	.word	0x40013c00

0802e0fc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 802e0fc:	b580      	push	{r7, lr}
 802e0fe:	b086      	sub	sp, #24
 802e100:	af00      	add	r7, sp, #0
 802e102:	6078      	str	r0, [r7, #4]
 802e104:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 802e106:	2300      	movs	r3, #0
 802e108:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 802e10a:	2300      	movs	r3, #0
 802e10c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 802e10e:	2300      	movs	r3, #0
 802e110:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 802e112:	687b      	ldr	r3, [r7, #4]
 802e114:	4a80      	ldr	r2, [pc, #512]	@ (802e318 <HAL_GPIO_DeInit+0x21c>)
 802e116:	4293      	cmp	r3, r2
 802e118:	d024      	beq.n	802e164 <HAL_GPIO_DeInit+0x68>
 802e11a:	687b      	ldr	r3, [r7, #4]
 802e11c:	4a7f      	ldr	r2, [pc, #508]	@ (802e31c <HAL_GPIO_DeInit+0x220>)
 802e11e:	4293      	cmp	r3, r2
 802e120:	d020      	beq.n	802e164 <HAL_GPIO_DeInit+0x68>
 802e122:	687b      	ldr	r3, [r7, #4]
 802e124:	4a7e      	ldr	r2, [pc, #504]	@ (802e320 <HAL_GPIO_DeInit+0x224>)
 802e126:	4293      	cmp	r3, r2
 802e128:	d01c      	beq.n	802e164 <HAL_GPIO_DeInit+0x68>
 802e12a:	687b      	ldr	r3, [r7, #4]
 802e12c:	4a7d      	ldr	r2, [pc, #500]	@ (802e324 <HAL_GPIO_DeInit+0x228>)
 802e12e:	4293      	cmp	r3, r2
 802e130:	d018      	beq.n	802e164 <HAL_GPIO_DeInit+0x68>
 802e132:	687b      	ldr	r3, [r7, #4]
 802e134:	4a7c      	ldr	r2, [pc, #496]	@ (802e328 <HAL_GPIO_DeInit+0x22c>)
 802e136:	4293      	cmp	r3, r2
 802e138:	d014      	beq.n	802e164 <HAL_GPIO_DeInit+0x68>
 802e13a:	687b      	ldr	r3, [r7, #4]
 802e13c:	4a7b      	ldr	r2, [pc, #492]	@ (802e32c <HAL_GPIO_DeInit+0x230>)
 802e13e:	4293      	cmp	r3, r2
 802e140:	d010      	beq.n	802e164 <HAL_GPIO_DeInit+0x68>
 802e142:	687b      	ldr	r3, [r7, #4]
 802e144:	4a7a      	ldr	r2, [pc, #488]	@ (802e330 <HAL_GPIO_DeInit+0x234>)
 802e146:	4293      	cmp	r3, r2
 802e148:	d00c      	beq.n	802e164 <HAL_GPIO_DeInit+0x68>
 802e14a:	687b      	ldr	r3, [r7, #4]
 802e14c:	4a79      	ldr	r2, [pc, #484]	@ (802e334 <HAL_GPIO_DeInit+0x238>)
 802e14e:	4293      	cmp	r3, r2
 802e150:	d008      	beq.n	802e164 <HAL_GPIO_DeInit+0x68>
 802e152:	687b      	ldr	r3, [r7, #4]
 802e154:	4a78      	ldr	r2, [pc, #480]	@ (802e338 <HAL_GPIO_DeInit+0x23c>)
 802e156:	4293      	cmp	r3, r2
 802e158:	d004      	beq.n	802e164 <HAL_GPIO_DeInit+0x68>
 802e15a:	f44f 7197 	mov.w	r1, #302	@ 0x12e
 802e15e:	4877      	ldr	r0, [pc, #476]	@ (802e33c <HAL_GPIO_DeInit+0x240>)
 802e160:	f7f9 fdc9 	bl	8027cf6 <assert_failed>
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 802e164:	2300      	movs	r3, #0
 802e166:	617b      	str	r3, [r7, #20]
 802e168:	e0cd      	b.n	802e306 <HAL_GPIO_DeInit+0x20a>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 802e16a:	2201      	movs	r2, #1
 802e16c:	697b      	ldr	r3, [r7, #20]
 802e16e:	fa02 f303 	lsl.w	r3, r2, r3
 802e172:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 802e174:	683a      	ldr	r2, [r7, #0]
 802e176:	693b      	ldr	r3, [r7, #16]
 802e178:	4013      	ands	r3, r2
 802e17a:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 802e17c:	68fa      	ldr	r2, [r7, #12]
 802e17e:	693b      	ldr	r3, [r7, #16]
 802e180:	429a      	cmp	r2, r3
 802e182:	f040 80bd 	bne.w	802e300 <HAL_GPIO_DeInit+0x204>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 802e186:	4a6e      	ldr	r2, [pc, #440]	@ (802e340 <HAL_GPIO_DeInit+0x244>)
 802e188:	697b      	ldr	r3, [r7, #20]
 802e18a:	089b      	lsrs	r3, r3, #2
 802e18c:	3302      	adds	r3, #2
 802e18e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802e192:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 802e194:	697b      	ldr	r3, [r7, #20]
 802e196:	f003 0303 	and.w	r3, r3, #3
 802e19a:	009b      	lsls	r3, r3, #2
 802e19c:	220f      	movs	r2, #15
 802e19e:	fa02 f303 	lsl.w	r3, r2, r3
 802e1a2:	68ba      	ldr	r2, [r7, #8]
 802e1a4:	4013      	ands	r3, r2
 802e1a6:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 802e1a8:	687b      	ldr	r3, [r7, #4]
 802e1aa:	4a5b      	ldr	r2, [pc, #364]	@ (802e318 <HAL_GPIO_DeInit+0x21c>)
 802e1ac:	4293      	cmp	r3, r2
 802e1ae:	d02b      	beq.n	802e208 <HAL_GPIO_DeInit+0x10c>
 802e1b0:	687b      	ldr	r3, [r7, #4]
 802e1b2:	4a5a      	ldr	r2, [pc, #360]	@ (802e31c <HAL_GPIO_DeInit+0x220>)
 802e1b4:	4293      	cmp	r3, r2
 802e1b6:	d025      	beq.n	802e204 <HAL_GPIO_DeInit+0x108>
 802e1b8:	687b      	ldr	r3, [r7, #4]
 802e1ba:	4a59      	ldr	r2, [pc, #356]	@ (802e320 <HAL_GPIO_DeInit+0x224>)
 802e1bc:	4293      	cmp	r3, r2
 802e1be:	d01f      	beq.n	802e200 <HAL_GPIO_DeInit+0x104>
 802e1c0:	687b      	ldr	r3, [r7, #4]
 802e1c2:	4a58      	ldr	r2, [pc, #352]	@ (802e324 <HAL_GPIO_DeInit+0x228>)
 802e1c4:	4293      	cmp	r3, r2
 802e1c6:	d019      	beq.n	802e1fc <HAL_GPIO_DeInit+0x100>
 802e1c8:	687b      	ldr	r3, [r7, #4]
 802e1ca:	4a57      	ldr	r2, [pc, #348]	@ (802e328 <HAL_GPIO_DeInit+0x22c>)
 802e1cc:	4293      	cmp	r3, r2
 802e1ce:	d013      	beq.n	802e1f8 <HAL_GPIO_DeInit+0xfc>
 802e1d0:	687b      	ldr	r3, [r7, #4]
 802e1d2:	4a56      	ldr	r2, [pc, #344]	@ (802e32c <HAL_GPIO_DeInit+0x230>)
 802e1d4:	4293      	cmp	r3, r2
 802e1d6:	d00d      	beq.n	802e1f4 <HAL_GPIO_DeInit+0xf8>
 802e1d8:	687b      	ldr	r3, [r7, #4]
 802e1da:	4a55      	ldr	r2, [pc, #340]	@ (802e330 <HAL_GPIO_DeInit+0x234>)
 802e1dc:	4293      	cmp	r3, r2
 802e1de:	d007      	beq.n	802e1f0 <HAL_GPIO_DeInit+0xf4>
 802e1e0:	687b      	ldr	r3, [r7, #4]
 802e1e2:	4a54      	ldr	r2, [pc, #336]	@ (802e334 <HAL_GPIO_DeInit+0x238>)
 802e1e4:	4293      	cmp	r3, r2
 802e1e6:	d101      	bne.n	802e1ec <HAL_GPIO_DeInit+0xf0>
 802e1e8:	2307      	movs	r3, #7
 802e1ea:	e00e      	b.n	802e20a <HAL_GPIO_DeInit+0x10e>
 802e1ec:	2308      	movs	r3, #8
 802e1ee:	e00c      	b.n	802e20a <HAL_GPIO_DeInit+0x10e>
 802e1f0:	2306      	movs	r3, #6
 802e1f2:	e00a      	b.n	802e20a <HAL_GPIO_DeInit+0x10e>
 802e1f4:	2305      	movs	r3, #5
 802e1f6:	e008      	b.n	802e20a <HAL_GPIO_DeInit+0x10e>
 802e1f8:	2304      	movs	r3, #4
 802e1fa:	e006      	b.n	802e20a <HAL_GPIO_DeInit+0x10e>
 802e1fc:	2303      	movs	r3, #3
 802e1fe:	e004      	b.n	802e20a <HAL_GPIO_DeInit+0x10e>
 802e200:	2302      	movs	r3, #2
 802e202:	e002      	b.n	802e20a <HAL_GPIO_DeInit+0x10e>
 802e204:	2301      	movs	r3, #1
 802e206:	e000      	b.n	802e20a <HAL_GPIO_DeInit+0x10e>
 802e208:	2300      	movs	r3, #0
 802e20a:	697a      	ldr	r2, [r7, #20]
 802e20c:	f002 0203 	and.w	r2, r2, #3
 802e210:	0092      	lsls	r2, r2, #2
 802e212:	4093      	lsls	r3, r2
 802e214:	68ba      	ldr	r2, [r7, #8]
 802e216:	429a      	cmp	r2, r3
 802e218:	d132      	bne.n	802e280 <HAL_GPIO_DeInit+0x184>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 802e21a:	4b4a      	ldr	r3, [pc, #296]	@ (802e344 <HAL_GPIO_DeInit+0x248>)
 802e21c:	681a      	ldr	r2, [r3, #0]
 802e21e:	68fb      	ldr	r3, [r7, #12]
 802e220:	43db      	mvns	r3, r3
 802e222:	4948      	ldr	r1, [pc, #288]	@ (802e344 <HAL_GPIO_DeInit+0x248>)
 802e224:	4013      	ands	r3, r2
 802e226:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 802e228:	4b46      	ldr	r3, [pc, #280]	@ (802e344 <HAL_GPIO_DeInit+0x248>)
 802e22a:	685a      	ldr	r2, [r3, #4]
 802e22c:	68fb      	ldr	r3, [r7, #12]
 802e22e:	43db      	mvns	r3, r3
 802e230:	4944      	ldr	r1, [pc, #272]	@ (802e344 <HAL_GPIO_DeInit+0x248>)
 802e232:	4013      	ands	r3, r2
 802e234:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 802e236:	4b43      	ldr	r3, [pc, #268]	@ (802e344 <HAL_GPIO_DeInit+0x248>)
 802e238:	68da      	ldr	r2, [r3, #12]
 802e23a:	68fb      	ldr	r3, [r7, #12]
 802e23c:	43db      	mvns	r3, r3
 802e23e:	4941      	ldr	r1, [pc, #260]	@ (802e344 <HAL_GPIO_DeInit+0x248>)
 802e240:	4013      	ands	r3, r2
 802e242:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 802e244:	4b3f      	ldr	r3, [pc, #252]	@ (802e344 <HAL_GPIO_DeInit+0x248>)
 802e246:	689a      	ldr	r2, [r3, #8]
 802e248:	68fb      	ldr	r3, [r7, #12]
 802e24a:	43db      	mvns	r3, r3
 802e24c:	493d      	ldr	r1, [pc, #244]	@ (802e344 <HAL_GPIO_DeInit+0x248>)
 802e24e:	4013      	ands	r3, r2
 802e250:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 802e252:	697b      	ldr	r3, [r7, #20]
 802e254:	f003 0303 	and.w	r3, r3, #3
 802e258:	009b      	lsls	r3, r3, #2
 802e25a:	220f      	movs	r2, #15
 802e25c:	fa02 f303 	lsl.w	r3, r2, r3
 802e260:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 802e262:	4a37      	ldr	r2, [pc, #220]	@ (802e340 <HAL_GPIO_DeInit+0x244>)
 802e264:	697b      	ldr	r3, [r7, #20]
 802e266:	089b      	lsrs	r3, r3, #2
 802e268:	3302      	adds	r3, #2
 802e26a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 802e26e:	68bb      	ldr	r3, [r7, #8]
 802e270:	43da      	mvns	r2, r3
 802e272:	4833      	ldr	r0, [pc, #204]	@ (802e340 <HAL_GPIO_DeInit+0x244>)
 802e274:	697b      	ldr	r3, [r7, #20]
 802e276:	089b      	lsrs	r3, r3, #2
 802e278:	400a      	ands	r2, r1
 802e27a:	3302      	adds	r3, #2
 802e27c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 802e280:	687b      	ldr	r3, [r7, #4]
 802e282:	681a      	ldr	r2, [r3, #0]
 802e284:	697b      	ldr	r3, [r7, #20]
 802e286:	005b      	lsls	r3, r3, #1
 802e288:	2103      	movs	r1, #3
 802e28a:	fa01 f303 	lsl.w	r3, r1, r3
 802e28e:	43db      	mvns	r3, r3
 802e290:	401a      	ands	r2, r3
 802e292:	687b      	ldr	r3, [r7, #4]
 802e294:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 802e296:	697b      	ldr	r3, [r7, #20]
 802e298:	08da      	lsrs	r2, r3, #3
 802e29a:	687b      	ldr	r3, [r7, #4]
 802e29c:	3208      	adds	r2, #8
 802e29e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802e2a2:	697b      	ldr	r3, [r7, #20]
 802e2a4:	f003 0307 	and.w	r3, r3, #7
 802e2a8:	009b      	lsls	r3, r3, #2
 802e2aa:	220f      	movs	r2, #15
 802e2ac:	fa02 f303 	lsl.w	r3, r2, r3
 802e2b0:	43db      	mvns	r3, r3
 802e2b2:	697a      	ldr	r2, [r7, #20]
 802e2b4:	08d2      	lsrs	r2, r2, #3
 802e2b6:	4019      	ands	r1, r3
 802e2b8:	687b      	ldr	r3, [r7, #4]
 802e2ba:	3208      	adds	r2, #8
 802e2bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 802e2c0:	687b      	ldr	r3, [r7, #4]
 802e2c2:	68da      	ldr	r2, [r3, #12]
 802e2c4:	697b      	ldr	r3, [r7, #20]
 802e2c6:	005b      	lsls	r3, r3, #1
 802e2c8:	2103      	movs	r1, #3
 802e2ca:	fa01 f303 	lsl.w	r3, r1, r3
 802e2ce:	43db      	mvns	r3, r3
 802e2d0:	401a      	ands	r2, r3
 802e2d2:	687b      	ldr	r3, [r7, #4]
 802e2d4:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 802e2d6:	687b      	ldr	r3, [r7, #4]
 802e2d8:	685a      	ldr	r2, [r3, #4]
 802e2da:	2101      	movs	r1, #1
 802e2dc:	697b      	ldr	r3, [r7, #20]
 802e2de:	fa01 f303 	lsl.w	r3, r1, r3
 802e2e2:	43db      	mvns	r3, r3
 802e2e4:	401a      	ands	r2, r3
 802e2e6:	687b      	ldr	r3, [r7, #4]
 802e2e8:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 802e2ea:	687b      	ldr	r3, [r7, #4]
 802e2ec:	689a      	ldr	r2, [r3, #8]
 802e2ee:	697b      	ldr	r3, [r7, #20]
 802e2f0:	005b      	lsls	r3, r3, #1
 802e2f2:	2103      	movs	r1, #3
 802e2f4:	fa01 f303 	lsl.w	r3, r1, r3
 802e2f8:	43db      	mvns	r3, r3
 802e2fa:	401a      	ands	r2, r3
 802e2fc:	687b      	ldr	r3, [r7, #4]
 802e2fe:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 802e300:	697b      	ldr	r3, [r7, #20]
 802e302:	3301      	adds	r3, #1
 802e304:	617b      	str	r3, [r7, #20]
 802e306:	697b      	ldr	r3, [r7, #20]
 802e308:	2b0f      	cmp	r3, #15
 802e30a:	f67f af2e 	bls.w	802e16a <HAL_GPIO_DeInit+0x6e>
    }
  }
}
 802e30e:	bf00      	nop
 802e310:	bf00      	nop
 802e312:	3718      	adds	r7, #24
 802e314:	46bd      	mov	sp, r7
 802e316:	bd80      	pop	{r7, pc}
 802e318:	40020000 	.word	0x40020000
 802e31c:	40020400 	.word	0x40020400
 802e320:	40020800 	.word	0x40020800
 802e324:	40020c00 	.word	0x40020c00
 802e328:	40021000 	.word	0x40021000
 802e32c:	40021400 	.word	0x40021400
 802e330:	40021800 	.word	0x40021800
 802e334:	40021c00 	.word	0x40021c00
 802e338:	40022000 	.word	0x40022000
 802e33c:	0803851c 	.word	0x0803851c
 802e340:	40013800 	.word	0x40013800
 802e344:	40013c00 	.word	0x40013c00

0802e348 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 802e348:	b580      	push	{r7, lr}
 802e34a:	b082      	sub	sp, #8
 802e34c:	af00      	add	r7, sp, #0
 802e34e:	6078      	str	r0, [r7, #4]
 802e350:	460b      	mov	r3, r1
 802e352:	807b      	strh	r3, [r7, #2]
 802e354:	4613      	mov	r3, r2
 802e356:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 802e358:	887b      	ldrh	r3, [r7, #2]
 802e35a:	2b00      	cmp	r3, #0
 802e35c:	d104      	bne.n	802e368 <HAL_GPIO_WritePin+0x20>
 802e35e:	f240 119d 	movw	r1, #413	@ 0x19d
 802e362:	480e      	ldr	r0, [pc, #56]	@ (802e39c <HAL_GPIO_WritePin+0x54>)
 802e364:	f7f9 fcc7 	bl	8027cf6 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 802e368:	787b      	ldrb	r3, [r7, #1]
 802e36a:	2b00      	cmp	r3, #0
 802e36c:	d007      	beq.n	802e37e <HAL_GPIO_WritePin+0x36>
 802e36e:	787b      	ldrb	r3, [r7, #1]
 802e370:	2b01      	cmp	r3, #1
 802e372:	d004      	beq.n	802e37e <HAL_GPIO_WritePin+0x36>
 802e374:	f44f 71cf 	mov.w	r1, #414	@ 0x19e
 802e378:	4808      	ldr	r0, [pc, #32]	@ (802e39c <HAL_GPIO_WritePin+0x54>)
 802e37a:	f7f9 fcbc 	bl	8027cf6 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 802e37e:	787b      	ldrb	r3, [r7, #1]
 802e380:	2b00      	cmp	r3, #0
 802e382:	d003      	beq.n	802e38c <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 802e384:	887a      	ldrh	r2, [r7, #2]
 802e386:	687b      	ldr	r3, [r7, #4]
 802e388:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 802e38a:	e003      	b.n	802e394 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 802e38c:	887b      	ldrh	r3, [r7, #2]
 802e38e:	041a      	lsls	r2, r3, #16
 802e390:	687b      	ldr	r3, [r7, #4]
 802e392:	619a      	str	r2, [r3, #24]
}
 802e394:	bf00      	nop
 802e396:	3708      	adds	r7, #8
 802e398:	46bd      	mov	sp, r7
 802e39a:	bd80      	pop	{r7, pc}
 802e39c:	0803851c 	.word	0x0803851c

0802e3a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 802e3a0:	b580      	push	{r7, lr}
 802e3a2:	b084      	sub	sp, #16
 802e3a4:	af00      	add	r7, sp, #0
 802e3a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 802e3a8:	687b      	ldr	r3, [r7, #4]
 802e3aa:	2b00      	cmp	r3, #0
 802e3ac:	d101      	bne.n	802e3b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 802e3ae:	2301      	movs	r3, #1
 802e3b0:	e1f5      	b.n	802e79e <HAL_I2C_Init+0x3fe>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 802e3b2:	687b      	ldr	r3, [r7, #4]
 802e3b4:	681b      	ldr	r3, [r3, #0]
 802e3b6:	4a80      	ldr	r2, [pc, #512]	@ (802e5b8 <HAL_I2C_Init+0x218>)
 802e3b8:	4293      	cmp	r3, r2
 802e3ba:	d00e      	beq.n	802e3da <HAL_I2C_Init+0x3a>
 802e3bc:	687b      	ldr	r3, [r7, #4]
 802e3be:	681b      	ldr	r3, [r3, #0]
 802e3c0:	4a7e      	ldr	r2, [pc, #504]	@ (802e5bc <HAL_I2C_Init+0x21c>)
 802e3c2:	4293      	cmp	r3, r2
 802e3c4:	d009      	beq.n	802e3da <HAL_I2C_Init+0x3a>
 802e3c6:	687b      	ldr	r3, [r7, #4]
 802e3c8:	681b      	ldr	r3, [r3, #0]
 802e3ca:	4a7d      	ldr	r2, [pc, #500]	@ (802e5c0 <HAL_I2C_Init+0x220>)
 802e3cc:	4293      	cmp	r3, r2
 802e3ce:	d004      	beq.n	802e3da <HAL_I2C_Init+0x3a>
 802e3d0:	f240 11c9 	movw	r1, #457	@ 0x1c9
 802e3d4:	487b      	ldr	r0, [pc, #492]	@ (802e5c4 <HAL_I2C_Init+0x224>)
 802e3d6:	f7f9 fc8e 	bl	8027cf6 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 802e3da:	687b      	ldr	r3, [r7, #4]
 802e3dc:	685b      	ldr	r3, [r3, #4]
 802e3de:	2b00      	cmp	r3, #0
 802e3e0:	d004      	beq.n	802e3ec <HAL_I2C_Init+0x4c>
 802e3e2:	687b      	ldr	r3, [r7, #4]
 802e3e4:	685b      	ldr	r3, [r3, #4]
 802e3e6:	4a78      	ldr	r2, [pc, #480]	@ (802e5c8 <HAL_I2C_Init+0x228>)
 802e3e8:	4293      	cmp	r3, r2
 802e3ea:	d904      	bls.n	802e3f6 <HAL_I2C_Init+0x56>
 802e3ec:	f44f 71e5 	mov.w	r1, #458	@ 0x1ca
 802e3f0:	4874      	ldr	r0, [pc, #464]	@ (802e5c4 <HAL_I2C_Init+0x224>)
 802e3f2:	f7f9 fc80 	bl	8027cf6 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 802e3f6:	687b      	ldr	r3, [r7, #4]
 802e3f8:	689b      	ldr	r3, [r3, #8]
 802e3fa:	2b00      	cmp	r3, #0
 802e3fc:	d009      	beq.n	802e412 <HAL_I2C_Init+0x72>
 802e3fe:	687b      	ldr	r3, [r7, #4]
 802e400:	689b      	ldr	r3, [r3, #8]
 802e402:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 802e406:	d004      	beq.n	802e412 <HAL_I2C_Init+0x72>
 802e408:	f240 11cb 	movw	r1, #459	@ 0x1cb
 802e40c:	486d      	ldr	r0, [pc, #436]	@ (802e5c4 <HAL_I2C_Init+0x224>)
 802e40e:	f7f9 fc72 	bl	8027cf6 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 802e412:	687b      	ldr	r3, [r7, #4]
 802e414:	68db      	ldr	r3, [r3, #12]
 802e416:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 802e41a:	d304      	bcc.n	802e426 <HAL_I2C_Init+0x86>
 802e41c:	f44f 71e6 	mov.w	r1, #460	@ 0x1cc
 802e420:	4868      	ldr	r0, [pc, #416]	@ (802e5c4 <HAL_I2C_Init+0x224>)
 802e422:	f7f9 fc68 	bl	8027cf6 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 802e426:	687b      	ldr	r3, [r7, #4]
 802e428:	691b      	ldr	r3, [r3, #16]
 802e42a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 802e42e:	d009      	beq.n	802e444 <HAL_I2C_Init+0xa4>
 802e430:	687b      	ldr	r3, [r7, #4]
 802e432:	691b      	ldr	r3, [r3, #16]
 802e434:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 802e438:	d004      	beq.n	802e444 <HAL_I2C_Init+0xa4>
 802e43a:	f240 11cd 	movw	r1, #461	@ 0x1cd
 802e43e:	4861      	ldr	r0, [pc, #388]	@ (802e5c4 <HAL_I2C_Init+0x224>)
 802e440:	f7f9 fc59 	bl	8027cf6 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 802e444:	687b      	ldr	r3, [r7, #4]
 802e446:	695b      	ldr	r3, [r3, #20]
 802e448:	2b00      	cmp	r3, #0
 802e44a:	d008      	beq.n	802e45e <HAL_I2C_Init+0xbe>
 802e44c:	687b      	ldr	r3, [r7, #4]
 802e44e:	695b      	ldr	r3, [r3, #20]
 802e450:	2b01      	cmp	r3, #1
 802e452:	d004      	beq.n	802e45e <HAL_I2C_Init+0xbe>
 802e454:	f44f 71e7 	mov.w	r1, #462	@ 0x1ce
 802e458:	485a      	ldr	r0, [pc, #360]	@ (802e5c4 <HAL_I2C_Init+0x224>)
 802e45a:	f7f9 fc4c 	bl	8027cf6 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 802e45e:	687b      	ldr	r3, [r7, #4]
 802e460:	699b      	ldr	r3, [r3, #24]
 802e462:	f023 03fe 	bic.w	r3, r3, #254	@ 0xfe
 802e466:	2b00      	cmp	r3, #0
 802e468:	d004      	beq.n	802e474 <HAL_I2C_Init+0xd4>
 802e46a:	f240 11cf 	movw	r1, #463	@ 0x1cf
 802e46e:	4855      	ldr	r0, [pc, #340]	@ (802e5c4 <HAL_I2C_Init+0x224>)
 802e470:	f7f9 fc41 	bl	8027cf6 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 802e474:	687b      	ldr	r3, [r7, #4]
 802e476:	69db      	ldr	r3, [r3, #28]
 802e478:	2b00      	cmp	r3, #0
 802e47a:	d008      	beq.n	802e48e <HAL_I2C_Init+0xee>
 802e47c:	687b      	ldr	r3, [r7, #4]
 802e47e:	69db      	ldr	r3, [r3, #28]
 802e480:	2b40      	cmp	r3, #64	@ 0x40
 802e482:	d004      	beq.n	802e48e <HAL_I2C_Init+0xee>
 802e484:	f44f 71e8 	mov.w	r1, #464	@ 0x1d0
 802e488:	484e      	ldr	r0, [pc, #312]	@ (802e5c4 <HAL_I2C_Init+0x224>)
 802e48a:	f7f9 fc34 	bl	8027cf6 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 802e48e:	687b      	ldr	r3, [r7, #4]
 802e490:	6a1b      	ldr	r3, [r3, #32]
 802e492:	2b00      	cmp	r3, #0
 802e494:	d008      	beq.n	802e4a8 <HAL_I2C_Init+0x108>
 802e496:	687b      	ldr	r3, [r7, #4]
 802e498:	6a1b      	ldr	r3, [r3, #32]
 802e49a:	2b80      	cmp	r3, #128	@ 0x80
 802e49c:	d004      	beq.n	802e4a8 <HAL_I2C_Init+0x108>
 802e49e:	f240 11d1 	movw	r1, #465	@ 0x1d1
 802e4a2:	4848      	ldr	r0, [pc, #288]	@ (802e5c4 <HAL_I2C_Init+0x224>)
 802e4a4:	f7f9 fc27 	bl	8027cf6 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 802e4a8:	687b      	ldr	r3, [r7, #4]
 802e4aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 802e4ae:	b2db      	uxtb	r3, r3
 802e4b0:	2b00      	cmp	r3, #0
 802e4b2:	d12c      	bne.n	802e50e <HAL_I2C_Init+0x16e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 802e4b4:	687b      	ldr	r3, [r7, #4]
 802e4b6:	2200      	movs	r2, #0
 802e4b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 802e4bc:	687b      	ldr	r3, [r7, #4]
 802e4be:	4a43      	ldr	r2, [pc, #268]	@ (802e5cc <HAL_I2C_Init+0x22c>)
 802e4c0:	655a      	str	r2, [r3, #84]	@ 0x54
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 802e4c2:	687b      	ldr	r3, [r7, #4]
 802e4c4:	4a42      	ldr	r2, [pc, #264]	@ (802e5d0 <HAL_I2C_Init+0x230>)
 802e4c6:	659a      	str	r2, [r3, #88]	@ 0x58
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 802e4c8:	687b      	ldr	r3, [r7, #4]
 802e4ca:	4a42      	ldr	r2, [pc, #264]	@ (802e5d4 <HAL_I2C_Init+0x234>)
 802e4cc:	65da      	str	r2, [r3, #92]	@ 0x5c
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 802e4ce:	687b      	ldr	r3, [r7, #4]
 802e4d0:	4a41      	ldr	r2, [pc, #260]	@ (802e5d8 <HAL_I2C_Init+0x238>)
 802e4d2:	661a      	str	r2, [r3, #96]	@ 0x60
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 802e4d4:	687b      	ldr	r3, [r7, #4]
 802e4d6:	4a41      	ldr	r2, [pc, #260]	@ (802e5dc <HAL_I2C_Init+0x23c>)
 802e4d8:	665a      	str	r2, [r3, #100]	@ 0x64
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 802e4da:	687b      	ldr	r3, [r7, #4]
 802e4dc:	4a40      	ldr	r2, [pc, #256]	@ (802e5e0 <HAL_I2C_Init+0x240>)
 802e4de:	669a      	str	r2, [r3, #104]	@ 0x68
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 802e4e0:	687b      	ldr	r3, [r7, #4]
 802e4e2:	4a40      	ldr	r2, [pc, #256]	@ (802e5e4 <HAL_I2C_Init+0x244>)
 802e4e4:	66da      	str	r2, [r3, #108]	@ 0x6c
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 802e4e6:	687b      	ldr	r3, [r7, #4]
 802e4e8:	4a3f      	ldr	r2, [pc, #252]	@ (802e5e8 <HAL_I2C_Init+0x248>)
 802e4ea:	671a      	str	r2, [r3, #112]	@ 0x70
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 802e4ec:	687b      	ldr	r3, [r7, #4]
 802e4ee:	4a3f      	ldr	r2, [pc, #252]	@ (802e5ec <HAL_I2C_Init+0x24c>)
 802e4f0:	675a      	str	r2, [r3, #116]	@ 0x74
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 802e4f2:	687b      	ldr	r3, [r7, #4]
 802e4f4:	4a3e      	ldr	r2, [pc, #248]	@ (802e5f0 <HAL_I2C_Init+0x250>)
 802e4f6:	679a      	str	r2, [r3, #120]	@ 0x78

    if (hi2c->MspInitCallback == NULL)
 802e4f8:	687b      	ldr	r3, [r7, #4]
 802e4fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 802e4fc:	2b00      	cmp	r3, #0
 802e4fe:	d102      	bne.n	802e506 <HAL_I2C_Init+0x166>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 802e500:	687b      	ldr	r3, [r7, #4]
 802e502:	4a3c      	ldr	r2, [pc, #240]	@ (802e5f4 <HAL_I2C_Init+0x254>)
 802e504:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
 802e506:	687b      	ldr	r3, [r7, #4]
 802e508:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 802e50a:	6878      	ldr	r0, [r7, #4]
 802e50c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 802e50e:	687b      	ldr	r3, [r7, #4]
 802e510:	2224      	movs	r2, #36	@ 0x24
 802e512:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 802e516:	687b      	ldr	r3, [r7, #4]
 802e518:	681b      	ldr	r3, [r3, #0]
 802e51a:	681a      	ldr	r2, [r3, #0]
 802e51c:	687b      	ldr	r3, [r7, #4]
 802e51e:	681b      	ldr	r3, [r3, #0]
 802e520:	f022 0201 	bic.w	r2, r2, #1
 802e524:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 802e526:	687b      	ldr	r3, [r7, #4]
 802e528:	681b      	ldr	r3, [r3, #0]
 802e52a:	681a      	ldr	r2, [r3, #0]
 802e52c:	687b      	ldr	r3, [r7, #4]
 802e52e:	681b      	ldr	r3, [r3, #0]
 802e530:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 802e534:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 802e536:	687b      	ldr	r3, [r7, #4]
 802e538:	681b      	ldr	r3, [r3, #0]
 802e53a:	681a      	ldr	r2, [r3, #0]
 802e53c:	687b      	ldr	r3, [r7, #4]
 802e53e:	681b      	ldr	r3, [r3, #0]
 802e540:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 802e544:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 802e546:	f003 f933 	bl	80317b0 <HAL_RCC_GetPCLK1Freq>
 802e54a:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 802e54c:	687b      	ldr	r3, [r7, #4]
 802e54e:	685b      	ldr	r3, [r3, #4]
 802e550:	4a29      	ldr	r2, [pc, #164]	@ (802e5f8 <HAL_I2C_Init+0x258>)
 802e552:	4293      	cmp	r3, r2
 802e554:	d807      	bhi.n	802e566 <HAL_I2C_Init+0x1c6>
 802e556:	68fb      	ldr	r3, [r7, #12]
 802e558:	4a28      	ldr	r2, [pc, #160]	@ (802e5fc <HAL_I2C_Init+0x25c>)
 802e55a:	4293      	cmp	r3, r2
 802e55c:	bf94      	ite	ls
 802e55e:	2301      	movls	r3, #1
 802e560:	2300      	movhi	r3, #0
 802e562:	b2db      	uxtb	r3, r3
 802e564:	e006      	b.n	802e574 <HAL_I2C_Init+0x1d4>
 802e566:	68fb      	ldr	r3, [r7, #12]
 802e568:	4a25      	ldr	r2, [pc, #148]	@ (802e600 <HAL_I2C_Init+0x260>)
 802e56a:	4293      	cmp	r3, r2
 802e56c:	bf94      	ite	ls
 802e56e:	2301      	movls	r3, #1
 802e570:	2300      	movhi	r3, #0
 802e572:	b2db      	uxtb	r3, r3
 802e574:	2b00      	cmp	r3, #0
 802e576:	d001      	beq.n	802e57c <HAL_I2C_Init+0x1dc>
  {
    return HAL_ERROR;
 802e578:	2301      	movs	r3, #1
 802e57a:	e110      	b.n	802e79e <HAL_I2C_Init+0x3fe>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 802e57c:	68fb      	ldr	r3, [r7, #12]
 802e57e:	4a21      	ldr	r2, [pc, #132]	@ (802e604 <HAL_I2C_Init+0x264>)
 802e580:	fba2 2303 	umull	r2, r3, r2, r3
 802e584:	0c9b      	lsrs	r3, r3, #18
 802e586:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 802e588:	687b      	ldr	r3, [r7, #4]
 802e58a:	681b      	ldr	r3, [r3, #0]
 802e58c:	685b      	ldr	r3, [r3, #4]
 802e58e:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 802e592:	687b      	ldr	r3, [r7, #4]
 802e594:	681b      	ldr	r3, [r3, #0]
 802e596:	68ba      	ldr	r2, [r7, #8]
 802e598:	430a      	orrs	r2, r1
 802e59a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 802e59c:	687b      	ldr	r3, [r7, #4]
 802e59e:	681b      	ldr	r3, [r3, #0]
 802e5a0:	6a1b      	ldr	r3, [r3, #32]
 802e5a2:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 802e5a6:	687b      	ldr	r3, [r7, #4]
 802e5a8:	685b      	ldr	r3, [r3, #4]
 802e5aa:	4a13      	ldr	r2, [pc, #76]	@ (802e5f8 <HAL_I2C_Init+0x258>)
 802e5ac:	4293      	cmp	r3, r2
 802e5ae:	d82b      	bhi.n	802e608 <HAL_I2C_Init+0x268>
 802e5b0:	68bb      	ldr	r3, [r7, #8]
 802e5b2:	3301      	adds	r3, #1
 802e5b4:	e032      	b.n	802e61c <HAL_I2C_Init+0x27c>
 802e5b6:	bf00      	nop
 802e5b8:	40005400 	.word	0x40005400
 802e5bc:	40005800 	.word	0x40005800
 802e5c0:	40005c00 	.word	0x40005c00
 802e5c4:	08038590 	.word	0x08038590
 802e5c8:	00061a80 	.word	0x00061a80
 802e5cc:	0802ee7d 	.word	0x0802ee7d
 802e5d0:	0802ee91 	.word	0x0802ee91
 802e5d4:	0802eea5 	.word	0x0802eea5
 802e5d8:	0802eeb9 	.word	0x0802eeb9
 802e5dc:	0802eee9 	.word	0x0802eee9
 802e5e0:	0802eefd 	.word	0x0802eefd
 802e5e4:	0802ef11 	.word	0x0802ef11
 802e5e8:	08023eb9 	.word	0x08023eb9
 802e5ec:	0802ef25 	.word	0x0802ef25
 802e5f0:	0802eecd 	.word	0x0802eecd
 802e5f4:	080279b1 	.word	0x080279b1
 802e5f8:	000186a0 	.word	0x000186a0
 802e5fc:	001e847f 	.word	0x001e847f
 802e600:	003d08ff 	.word	0x003d08ff
 802e604:	431bde83 	.word	0x431bde83
 802e608:	68bb      	ldr	r3, [r7, #8]
 802e60a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 802e60e:	fb02 f303 	mul.w	r3, r2, r3
 802e612:	4a65      	ldr	r2, [pc, #404]	@ (802e7a8 <HAL_I2C_Init+0x408>)
 802e614:	fba2 2303 	umull	r2, r3, r2, r3
 802e618:	099b      	lsrs	r3, r3, #6
 802e61a:	3301      	adds	r3, #1
 802e61c:	687a      	ldr	r2, [r7, #4]
 802e61e:	6812      	ldr	r2, [r2, #0]
 802e620:	430b      	orrs	r3, r1
 802e622:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 802e624:	687b      	ldr	r3, [r7, #4]
 802e626:	681b      	ldr	r3, [r3, #0]
 802e628:	69db      	ldr	r3, [r3, #28]
 802e62a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 802e62e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 802e632:	687b      	ldr	r3, [r7, #4]
 802e634:	685b      	ldr	r3, [r3, #4]
 802e636:	495d      	ldr	r1, [pc, #372]	@ (802e7ac <HAL_I2C_Init+0x40c>)
 802e638:	428b      	cmp	r3, r1
 802e63a:	d819      	bhi.n	802e670 <HAL_I2C_Init+0x2d0>
 802e63c:	68fb      	ldr	r3, [r7, #12]
 802e63e:	1e59      	subs	r1, r3, #1
 802e640:	687b      	ldr	r3, [r7, #4]
 802e642:	685b      	ldr	r3, [r3, #4]
 802e644:	005b      	lsls	r3, r3, #1
 802e646:	fbb1 f3f3 	udiv	r3, r1, r3
 802e64a:	1c59      	adds	r1, r3, #1
 802e64c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 802e650:	400b      	ands	r3, r1
 802e652:	2b00      	cmp	r3, #0
 802e654:	d00a      	beq.n	802e66c <HAL_I2C_Init+0x2cc>
 802e656:	68fb      	ldr	r3, [r7, #12]
 802e658:	1e59      	subs	r1, r3, #1
 802e65a:	687b      	ldr	r3, [r7, #4]
 802e65c:	685b      	ldr	r3, [r3, #4]
 802e65e:	005b      	lsls	r3, r3, #1
 802e660:	fbb1 f3f3 	udiv	r3, r1, r3
 802e664:	3301      	adds	r3, #1
 802e666:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802e66a:	e051      	b.n	802e710 <HAL_I2C_Init+0x370>
 802e66c:	2304      	movs	r3, #4
 802e66e:	e04f      	b.n	802e710 <HAL_I2C_Init+0x370>
 802e670:	687b      	ldr	r3, [r7, #4]
 802e672:	689b      	ldr	r3, [r3, #8]
 802e674:	2b00      	cmp	r3, #0
 802e676:	d111      	bne.n	802e69c <HAL_I2C_Init+0x2fc>
 802e678:	68fb      	ldr	r3, [r7, #12]
 802e67a:	1e58      	subs	r0, r3, #1
 802e67c:	687b      	ldr	r3, [r7, #4]
 802e67e:	6859      	ldr	r1, [r3, #4]
 802e680:	460b      	mov	r3, r1
 802e682:	005b      	lsls	r3, r3, #1
 802e684:	440b      	add	r3, r1
 802e686:	fbb0 f3f3 	udiv	r3, r0, r3
 802e68a:	3301      	adds	r3, #1
 802e68c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802e690:	2b00      	cmp	r3, #0
 802e692:	bf0c      	ite	eq
 802e694:	2301      	moveq	r3, #1
 802e696:	2300      	movne	r3, #0
 802e698:	b2db      	uxtb	r3, r3
 802e69a:	e012      	b.n	802e6c2 <HAL_I2C_Init+0x322>
 802e69c:	68fb      	ldr	r3, [r7, #12]
 802e69e:	1e58      	subs	r0, r3, #1
 802e6a0:	687b      	ldr	r3, [r7, #4]
 802e6a2:	6859      	ldr	r1, [r3, #4]
 802e6a4:	460b      	mov	r3, r1
 802e6a6:	009b      	lsls	r3, r3, #2
 802e6a8:	440b      	add	r3, r1
 802e6aa:	0099      	lsls	r1, r3, #2
 802e6ac:	440b      	add	r3, r1
 802e6ae:	fbb0 f3f3 	udiv	r3, r0, r3
 802e6b2:	3301      	adds	r3, #1
 802e6b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802e6b8:	2b00      	cmp	r3, #0
 802e6ba:	bf0c      	ite	eq
 802e6bc:	2301      	moveq	r3, #1
 802e6be:	2300      	movne	r3, #0
 802e6c0:	b2db      	uxtb	r3, r3
 802e6c2:	2b00      	cmp	r3, #0
 802e6c4:	d001      	beq.n	802e6ca <HAL_I2C_Init+0x32a>
 802e6c6:	2301      	movs	r3, #1
 802e6c8:	e022      	b.n	802e710 <HAL_I2C_Init+0x370>
 802e6ca:	687b      	ldr	r3, [r7, #4]
 802e6cc:	689b      	ldr	r3, [r3, #8]
 802e6ce:	2b00      	cmp	r3, #0
 802e6d0:	d10e      	bne.n	802e6f0 <HAL_I2C_Init+0x350>
 802e6d2:	68fb      	ldr	r3, [r7, #12]
 802e6d4:	1e58      	subs	r0, r3, #1
 802e6d6:	687b      	ldr	r3, [r7, #4]
 802e6d8:	6859      	ldr	r1, [r3, #4]
 802e6da:	460b      	mov	r3, r1
 802e6dc:	005b      	lsls	r3, r3, #1
 802e6de:	440b      	add	r3, r1
 802e6e0:	fbb0 f3f3 	udiv	r3, r0, r3
 802e6e4:	3301      	adds	r3, #1
 802e6e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802e6ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 802e6ee:	e00f      	b.n	802e710 <HAL_I2C_Init+0x370>
 802e6f0:	68fb      	ldr	r3, [r7, #12]
 802e6f2:	1e58      	subs	r0, r3, #1
 802e6f4:	687b      	ldr	r3, [r7, #4]
 802e6f6:	6859      	ldr	r1, [r3, #4]
 802e6f8:	460b      	mov	r3, r1
 802e6fa:	009b      	lsls	r3, r3, #2
 802e6fc:	440b      	add	r3, r1
 802e6fe:	0099      	lsls	r1, r3, #2
 802e700:	440b      	add	r3, r1
 802e702:	fbb0 f3f3 	udiv	r3, r0, r3
 802e706:	3301      	adds	r3, #1
 802e708:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802e70c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 802e710:	6879      	ldr	r1, [r7, #4]
 802e712:	6809      	ldr	r1, [r1, #0]
 802e714:	4313      	orrs	r3, r2
 802e716:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 802e718:	687b      	ldr	r3, [r7, #4]
 802e71a:	681b      	ldr	r3, [r3, #0]
 802e71c:	681b      	ldr	r3, [r3, #0]
 802e71e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 802e722:	687b      	ldr	r3, [r7, #4]
 802e724:	69da      	ldr	r2, [r3, #28]
 802e726:	687b      	ldr	r3, [r7, #4]
 802e728:	6a1b      	ldr	r3, [r3, #32]
 802e72a:	431a      	orrs	r2, r3
 802e72c:	687b      	ldr	r3, [r7, #4]
 802e72e:	681b      	ldr	r3, [r3, #0]
 802e730:	430a      	orrs	r2, r1
 802e732:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 802e734:	687b      	ldr	r3, [r7, #4]
 802e736:	681b      	ldr	r3, [r3, #0]
 802e738:	689b      	ldr	r3, [r3, #8]
 802e73a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 802e73e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 802e742:	687a      	ldr	r2, [r7, #4]
 802e744:	6911      	ldr	r1, [r2, #16]
 802e746:	687a      	ldr	r2, [r7, #4]
 802e748:	68d2      	ldr	r2, [r2, #12]
 802e74a:	4311      	orrs	r1, r2
 802e74c:	687a      	ldr	r2, [r7, #4]
 802e74e:	6812      	ldr	r2, [r2, #0]
 802e750:	430b      	orrs	r3, r1
 802e752:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 802e754:	687b      	ldr	r3, [r7, #4]
 802e756:	681b      	ldr	r3, [r3, #0]
 802e758:	68db      	ldr	r3, [r3, #12]
 802e75a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 802e75e:	687b      	ldr	r3, [r7, #4]
 802e760:	695a      	ldr	r2, [r3, #20]
 802e762:	687b      	ldr	r3, [r7, #4]
 802e764:	699b      	ldr	r3, [r3, #24]
 802e766:	431a      	orrs	r2, r3
 802e768:	687b      	ldr	r3, [r7, #4]
 802e76a:	681b      	ldr	r3, [r3, #0]
 802e76c:	430a      	orrs	r2, r1
 802e76e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 802e770:	687b      	ldr	r3, [r7, #4]
 802e772:	681b      	ldr	r3, [r3, #0]
 802e774:	681a      	ldr	r2, [r3, #0]
 802e776:	687b      	ldr	r3, [r7, #4]
 802e778:	681b      	ldr	r3, [r3, #0]
 802e77a:	f042 0201 	orr.w	r2, r2, #1
 802e77e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 802e780:	687b      	ldr	r3, [r7, #4]
 802e782:	2200      	movs	r2, #0
 802e784:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 802e786:	687b      	ldr	r3, [r7, #4]
 802e788:	2220      	movs	r2, #32
 802e78a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 802e78e:	687b      	ldr	r3, [r7, #4]
 802e790:	2200      	movs	r2, #0
 802e792:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 802e794:	687b      	ldr	r3, [r7, #4]
 802e796:	2200      	movs	r2, #0
 802e798:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 802e79c:	2300      	movs	r3, #0
}
 802e79e:	4618      	mov	r0, r3
 802e7a0:	3710      	adds	r7, #16
 802e7a2:	46bd      	mov	sp, r7
 802e7a4:	bd80      	pop	{r7, pc}
 802e7a6:	bf00      	nop
 802e7a8:	10624dd3 	.word	0x10624dd3
 802e7ac:	000186a0 	.word	0x000186a0

0802e7b0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 802e7b0:	b580      	push	{r7, lr}
 802e7b2:	b082      	sub	sp, #8
 802e7b4:	af00      	add	r7, sp, #0
 802e7b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 802e7b8:	687b      	ldr	r3, [r7, #4]
 802e7ba:	2b00      	cmp	r3, #0
 802e7bc:	d101      	bne.n	802e7c2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 802e7be:	2301      	movs	r3, #1
 802e7c0:	e040      	b.n	802e844 <HAL_I2C_DeInit+0x94>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 802e7c2:	687b      	ldr	r3, [r7, #4]
 802e7c4:	681b      	ldr	r3, [r3, #0]
 802e7c6:	4a21      	ldr	r2, [pc, #132]	@ (802e84c <HAL_I2C_DeInit+0x9c>)
 802e7c8:	4293      	cmp	r3, r2
 802e7ca:	d00e      	beq.n	802e7ea <HAL_I2C_DeInit+0x3a>
 802e7cc:	687b      	ldr	r3, [r7, #4]
 802e7ce:	681b      	ldr	r3, [r3, #0]
 802e7d0:	4a1f      	ldr	r2, [pc, #124]	@ (802e850 <HAL_I2C_DeInit+0xa0>)
 802e7d2:	4293      	cmp	r3, r2
 802e7d4:	d009      	beq.n	802e7ea <HAL_I2C_DeInit+0x3a>
 802e7d6:	687b      	ldr	r3, [r7, #4]
 802e7d8:	681b      	ldr	r3, [r3, #0]
 802e7da:	4a1e      	ldr	r2, [pc, #120]	@ (802e854 <HAL_I2C_DeInit+0xa4>)
 802e7dc:	4293      	cmp	r3, r2
 802e7de:	d004      	beq.n	802e7ea <HAL_I2C_DeInit+0x3a>
 802e7e0:	f240 2139 	movw	r1, #569	@ 0x239
 802e7e4:	481c      	ldr	r0, [pc, #112]	@ (802e858 <HAL_I2C_DeInit+0xa8>)
 802e7e6:	f7f9 fa86 	bl	8027cf6 <assert_failed>

  hi2c->State = HAL_I2C_STATE_BUSY;
 802e7ea:	687b      	ldr	r3, [r7, #4]
 802e7ec:	2224      	movs	r2, #36	@ 0x24
 802e7ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 802e7f2:	687b      	ldr	r3, [r7, #4]
 802e7f4:	681b      	ldr	r3, [r3, #0]
 802e7f6:	681a      	ldr	r2, [r3, #0]
 802e7f8:	687b      	ldr	r3, [r7, #4]
 802e7fa:	681b      	ldr	r3, [r3, #0]
 802e7fc:	f022 0201 	bic.w	r2, r2, #1
 802e800:	601a      	str	r2, [r3, #0]

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  if (hi2c->MspDeInitCallback == NULL)
 802e802:	687b      	ldr	r3, [r7, #4]
 802e804:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 802e808:	2b00      	cmp	r3, #0
 802e80a:	d103      	bne.n	802e814 <HAL_I2C_DeInit+0x64>
  {
    hi2c->MspDeInitCallback = HAL_I2C_MspDeInit; /* Legacy weak MspDeInit  */
 802e80c:	687b      	ldr	r3, [r7, #4]
 802e80e:	4a13      	ldr	r2, [pc, #76]	@ (802e85c <HAL_I2C_DeInit+0xac>)
 802e810:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
 802e814:	687b      	ldr	r3, [r7, #4]
 802e816:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 802e81a:	6878      	ldr	r0, [r7, #4]
 802e81c:	4798      	blx	r3
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 802e81e:	687b      	ldr	r3, [r7, #4]
 802e820:	2200      	movs	r2, #0
 802e822:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 802e824:	687b      	ldr	r3, [r7, #4]
 802e826:	2200      	movs	r2, #0
 802e828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 802e82c:	687b      	ldr	r3, [r7, #4]
 802e82e:	2200      	movs	r2, #0
 802e830:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 802e832:	687b      	ldr	r3, [r7, #4]
 802e834:	2200      	movs	r2, #0
 802e836:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 802e83a:	687b      	ldr	r3, [r7, #4]
 802e83c:	2200      	movs	r2, #0
 802e83e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 802e842:	2300      	movs	r3, #0
}
 802e844:	4618      	mov	r0, r3
 802e846:	3708      	adds	r7, #8
 802e848:	46bd      	mov	sp, r7
 802e84a:	bd80      	pop	{r7, pc}
 802e84c:	40005400 	.word	0x40005400
 802e850:	40005800 	.word	0x40005800
 802e854:	40005c00 	.word	0x40005c00
 802e858:	08038590 	.word	0x08038590
 802e85c:	08027a41 	.word	0x08027a41

0802e860 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 802e860:	b480      	push	{r7}
 802e862:	b083      	sub	sp, #12
 802e864:	af00      	add	r7, sp, #0
 802e866:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 802e868:	687b      	ldr	r3, [r7, #4]
 802e86a:	681b      	ldr	r3, [r3, #0]
 802e86c:	695b      	ldr	r3, [r3, #20]
 802e86e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 802e872:	2b80      	cmp	r3, #128	@ 0x80
 802e874:	d103      	bne.n	802e87e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 802e876:	687b      	ldr	r3, [r7, #4]
 802e878:	681b      	ldr	r3, [r3, #0]
 802e87a:	2200      	movs	r2, #0
 802e87c:	611a      	str	r2, [r3, #16]
  }
}
 802e87e:	bf00      	nop
 802e880:	370c      	adds	r7, #12
 802e882:	46bd      	mov	sp, r7
 802e884:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e888:	4770      	bx	lr
	...

0802e88c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 802e88c:	b580      	push	{r7, lr}
 802e88e:	b088      	sub	sp, #32
 802e890:	af02      	add	r7, sp, #8
 802e892:	60f8      	str	r0, [r7, #12]
 802e894:	4608      	mov	r0, r1
 802e896:	4611      	mov	r1, r2
 802e898:	461a      	mov	r2, r3
 802e89a:	4603      	mov	r3, r0
 802e89c:	817b      	strh	r3, [r7, #10]
 802e89e:	460b      	mov	r3, r1
 802e8a0:	813b      	strh	r3, [r7, #8]
 802e8a2:	4613      	mov	r3, r2
 802e8a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 802e8a6:	f7f9 fe19 	bl	80284dc <HAL_GetTick>
 802e8aa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 802e8ac:	88fb      	ldrh	r3, [r7, #6]
 802e8ae:	2b01      	cmp	r3, #1
 802e8b0:	d007      	beq.n	802e8c2 <HAL_I2C_Mem_Write+0x36>
 802e8b2:	88fb      	ldrh	r3, [r7, #6]
 802e8b4:	2b10      	cmp	r3, #16
 802e8b6:	d004      	beq.n	802e8c2 <HAL_I2C_Mem_Write+0x36>
 802e8b8:	f640 11cd 	movw	r1, #2509	@ 0x9cd
 802e8bc:	4873      	ldr	r0, [pc, #460]	@ (802ea8c <HAL_I2C_Mem_Write+0x200>)
 802e8be:	f7f9 fa1a 	bl	8027cf6 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 802e8c2:	68fb      	ldr	r3, [r7, #12]
 802e8c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 802e8c8:	b2db      	uxtb	r3, r3
 802e8ca:	2b20      	cmp	r3, #32
 802e8cc:	f040 80d9 	bne.w	802ea82 <HAL_I2C_Mem_Write+0x1f6>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 802e8d0:	697b      	ldr	r3, [r7, #20]
 802e8d2:	9300      	str	r3, [sp, #0]
 802e8d4:	2319      	movs	r3, #25
 802e8d6:	2201      	movs	r2, #1
 802e8d8:	496d      	ldr	r1, [pc, #436]	@ (802ea90 <HAL_I2C_Mem_Write+0x204>)
 802e8da:	68f8      	ldr	r0, [r7, #12]
 802e8dc:	f001 fe24 	bl	8030528 <I2C_WaitOnFlagUntilTimeout>
 802e8e0:	4603      	mov	r3, r0
 802e8e2:	2b00      	cmp	r3, #0
 802e8e4:	d001      	beq.n	802e8ea <HAL_I2C_Mem_Write+0x5e>
    {
      return HAL_BUSY;
 802e8e6:	2302      	movs	r3, #2
 802e8e8:	e0cc      	b.n	802ea84 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 802e8ea:	68fb      	ldr	r3, [r7, #12]
 802e8ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 802e8f0:	2b01      	cmp	r3, #1
 802e8f2:	d101      	bne.n	802e8f8 <HAL_I2C_Mem_Write+0x6c>
 802e8f4:	2302      	movs	r3, #2
 802e8f6:	e0c5      	b.n	802ea84 <HAL_I2C_Mem_Write+0x1f8>
 802e8f8:	68fb      	ldr	r3, [r7, #12]
 802e8fa:	2201      	movs	r2, #1
 802e8fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 802e900:	68fb      	ldr	r3, [r7, #12]
 802e902:	681b      	ldr	r3, [r3, #0]
 802e904:	681b      	ldr	r3, [r3, #0]
 802e906:	f003 0301 	and.w	r3, r3, #1
 802e90a:	2b01      	cmp	r3, #1
 802e90c:	d007      	beq.n	802e91e <HAL_I2C_Mem_Write+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 802e90e:	68fb      	ldr	r3, [r7, #12]
 802e910:	681b      	ldr	r3, [r3, #0]
 802e912:	681a      	ldr	r2, [r3, #0]
 802e914:	68fb      	ldr	r3, [r7, #12]
 802e916:	681b      	ldr	r3, [r3, #0]
 802e918:	f042 0201 	orr.w	r2, r2, #1
 802e91c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 802e91e:	68fb      	ldr	r3, [r7, #12]
 802e920:	681b      	ldr	r3, [r3, #0]
 802e922:	681a      	ldr	r2, [r3, #0]
 802e924:	68fb      	ldr	r3, [r7, #12]
 802e926:	681b      	ldr	r3, [r3, #0]
 802e928:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 802e92c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 802e92e:	68fb      	ldr	r3, [r7, #12]
 802e930:	2221      	movs	r2, #33	@ 0x21
 802e932:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 802e936:	68fb      	ldr	r3, [r7, #12]
 802e938:	2240      	movs	r2, #64	@ 0x40
 802e93a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 802e93e:	68fb      	ldr	r3, [r7, #12]
 802e940:	2200      	movs	r2, #0
 802e942:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 802e944:	68fb      	ldr	r3, [r7, #12]
 802e946:	6a3a      	ldr	r2, [r7, #32]
 802e948:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 802e94a:	68fb      	ldr	r3, [r7, #12]
 802e94c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 802e94e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 802e950:	68fb      	ldr	r3, [r7, #12]
 802e952:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802e954:	b29a      	uxth	r2, r3
 802e956:	68fb      	ldr	r3, [r7, #12]
 802e958:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 802e95a:	68fb      	ldr	r3, [r7, #12]
 802e95c:	4a4d      	ldr	r2, [pc, #308]	@ (802ea94 <HAL_I2C_Mem_Write+0x208>)
 802e95e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 802e960:	88f8      	ldrh	r0, [r7, #6]
 802e962:	893a      	ldrh	r2, [r7, #8]
 802e964:	8979      	ldrh	r1, [r7, #10]
 802e966:	697b      	ldr	r3, [r7, #20]
 802e968:	9301      	str	r3, [sp, #4]
 802e96a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802e96c:	9300      	str	r3, [sp, #0]
 802e96e:	4603      	mov	r3, r0
 802e970:	68f8      	ldr	r0, [r7, #12]
 802e972:	f001 fc99 	bl	80302a8 <I2C_RequestMemoryWrite>
 802e976:	4603      	mov	r3, r0
 802e978:	2b00      	cmp	r3, #0
 802e97a:	d052      	beq.n	802ea22 <HAL_I2C_Mem_Write+0x196>
    {
      return HAL_ERROR;
 802e97c:	2301      	movs	r3, #1
 802e97e:	e081      	b.n	802ea84 <HAL_I2C_Mem_Write+0x1f8>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 802e980:	697a      	ldr	r2, [r7, #20]
 802e982:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 802e984:	68f8      	ldr	r0, [r7, #12]
 802e986:	f001 fee9 	bl	803075c <I2C_WaitOnTXEFlagUntilTimeout>
 802e98a:	4603      	mov	r3, r0
 802e98c:	2b00      	cmp	r3, #0
 802e98e:	d00d      	beq.n	802e9ac <HAL_I2C_Mem_Write+0x120>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 802e990:	68fb      	ldr	r3, [r7, #12]
 802e992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802e994:	2b04      	cmp	r3, #4
 802e996:	d107      	bne.n	802e9a8 <HAL_I2C_Mem_Write+0x11c>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 802e998:	68fb      	ldr	r3, [r7, #12]
 802e99a:	681b      	ldr	r3, [r3, #0]
 802e99c:	681a      	ldr	r2, [r3, #0]
 802e99e:	68fb      	ldr	r3, [r7, #12]
 802e9a0:	681b      	ldr	r3, [r3, #0]
 802e9a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 802e9a6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 802e9a8:	2301      	movs	r3, #1
 802e9aa:	e06b      	b.n	802ea84 <HAL_I2C_Mem_Write+0x1f8>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 802e9ac:	68fb      	ldr	r3, [r7, #12]
 802e9ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802e9b0:	781a      	ldrb	r2, [r3, #0]
 802e9b2:	68fb      	ldr	r3, [r7, #12]
 802e9b4:	681b      	ldr	r3, [r3, #0]
 802e9b6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 802e9b8:	68fb      	ldr	r3, [r7, #12]
 802e9ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802e9bc:	1c5a      	adds	r2, r3, #1
 802e9be:	68fb      	ldr	r3, [r7, #12]
 802e9c0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 802e9c2:	68fb      	ldr	r3, [r7, #12]
 802e9c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 802e9c6:	3b01      	subs	r3, #1
 802e9c8:	b29a      	uxth	r2, r3
 802e9ca:	68fb      	ldr	r3, [r7, #12]
 802e9cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 802e9ce:	68fb      	ldr	r3, [r7, #12]
 802e9d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802e9d2:	b29b      	uxth	r3, r3
 802e9d4:	3b01      	subs	r3, #1
 802e9d6:	b29a      	uxth	r2, r3
 802e9d8:	68fb      	ldr	r3, [r7, #12]
 802e9da:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 802e9dc:	68fb      	ldr	r3, [r7, #12]
 802e9de:	681b      	ldr	r3, [r3, #0]
 802e9e0:	695b      	ldr	r3, [r3, #20]
 802e9e2:	f003 0304 	and.w	r3, r3, #4
 802e9e6:	2b04      	cmp	r3, #4
 802e9e8:	d11b      	bne.n	802ea22 <HAL_I2C_Mem_Write+0x196>
 802e9ea:	68fb      	ldr	r3, [r7, #12]
 802e9ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 802e9ee:	2b00      	cmp	r3, #0
 802e9f0:	d017      	beq.n	802ea22 <HAL_I2C_Mem_Write+0x196>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 802e9f2:	68fb      	ldr	r3, [r7, #12]
 802e9f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802e9f6:	781a      	ldrb	r2, [r3, #0]
 802e9f8:	68fb      	ldr	r3, [r7, #12]
 802e9fa:	681b      	ldr	r3, [r3, #0]
 802e9fc:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 802e9fe:	68fb      	ldr	r3, [r7, #12]
 802ea00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802ea02:	1c5a      	adds	r2, r3, #1
 802ea04:	68fb      	ldr	r3, [r7, #12]
 802ea06:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 802ea08:	68fb      	ldr	r3, [r7, #12]
 802ea0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 802ea0c:	3b01      	subs	r3, #1
 802ea0e:	b29a      	uxth	r2, r3
 802ea10:	68fb      	ldr	r3, [r7, #12]
 802ea12:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 802ea14:	68fb      	ldr	r3, [r7, #12]
 802ea16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802ea18:	b29b      	uxth	r3, r3
 802ea1a:	3b01      	subs	r3, #1
 802ea1c:	b29a      	uxth	r2, r3
 802ea1e:	68fb      	ldr	r3, [r7, #12]
 802ea20:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 802ea22:	68fb      	ldr	r3, [r7, #12]
 802ea24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 802ea26:	2b00      	cmp	r3, #0
 802ea28:	d1aa      	bne.n	802e980 <HAL_I2C_Mem_Write+0xf4>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 802ea2a:	697a      	ldr	r2, [r7, #20]
 802ea2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 802ea2e:	68f8      	ldr	r0, [r7, #12]
 802ea30:	f001 fedc 	bl	80307ec <I2C_WaitOnBTFFlagUntilTimeout>
 802ea34:	4603      	mov	r3, r0
 802ea36:	2b00      	cmp	r3, #0
 802ea38:	d00d      	beq.n	802ea56 <HAL_I2C_Mem_Write+0x1ca>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 802ea3a:	68fb      	ldr	r3, [r7, #12]
 802ea3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802ea3e:	2b04      	cmp	r3, #4
 802ea40:	d107      	bne.n	802ea52 <HAL_I2C_Mem_Write+0x1c6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 802ea42:	68fb      	ldr	r3, [r7, #12]
 802ea44:	681b      	ldr	r3, [r3, #0]
 802ea46:	681a      	ldr	r2, [r3, #0]
 802ea48:	68fb      	ldr	r3, [r7, #12]
 802ea4a:	681b      	ldr	r3, [r3, #0]
 802ea4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 802ea50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 802ea52:	2301      	movs	r3, #1
 802ea54:	e016      	b.n	802ea84 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 802ea56:	68fb      	ldr	r3, [r7, #12]
 802ea58:	681b      	ldr	r3, [r3, #0]
 802ea5a:	681a      	ldr	r2, [r3, #0]
 802ea5c:	68fb      	ldr	r3, [r7, #12]
 802ea5e:	681b      	ldr	r3, [r3, #0]
 802ea60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 802ea64:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 802ea66:	68fb      	ldr	r3, [r7, #12]
 802ea68:	2220      	movs	r2, #32
 802ea6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 802ea6e:	68fb      	ldr	r3, [r7, #12]
 802ea70:	2200      	movs	r2, #0
 802ea72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 802ea76:	68fb      	ldr	r3, [r7, #12]
 802ea78:	2200      	movs	r2, #0
 802ea7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 802ea7e:	2300      	movs	r3, #0
 802ea80:	e000      	b.n	802ea84 <HAL_I2C_Mem_Write+0x1f8>
  }
  else
  {
    return HAL_BUSY;
 802ea82:	2302      	movs	r3, #2
  }
}
 802ea84:	4618      	mov	r0, r3
 802ea86:	3718      	adds	r7, #24
 802ea88:	46bd      	mov	sp, r7
 802ea8a:	bd80      	pop	{r7, pc}
 802ea8c:	08038590 	.word	0x08038590
 802ea90:	00100002 	.word	0x00100002
 802ea94:	ffff0000 	.word	0xffff0000

0802ea98 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 802ea98:	b580      	push	{r7, lr}
 802ea9a:	b088      	sub	sp, #32
 802ea9c:	af00      	add	r7, sp, #0
 802ea9e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 802eaa0:	2300      	movs	r3, #0
 802eaa2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 802eaa4:	687b      	ldr	r3, [r7, #4]
 802eaa6:	681b      	ldr	r3, [r3, #0]
 802eaa8:	685b      	ldr	r3, [r3, #4]
 802eaaa:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 802eaac:	687b      	ldr	r3, [r7, #4]
 802eaae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802eab0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 802eab2:	687b      	ldr	r3, [r7, #4]
 802eab4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 802eab8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 802eaba:	687b      	ldr	r3, [r7, #4]
 802eabc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 802eac0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 802eac2:	7bfb      	ldrb	r3, [r7, #15]
 802eac4:	2b10      	cmp	r3, #16
 802eac6:	d003      	beq.n	802ead0 <HAL_I2C_EV_IRQHandler+0x38>
 802eac8:	7bfb      	ldrb	r3, [r7, #15]
 802eaca:	2b40      	cmp	r3, #64	@ 0x40
 802eacc:	f040 80b1 	bne.w	802ec32 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 802ead0:	687b      	ldr	r3, [r7, #4]
 802ead2:	681b      	ldr	r3, [r3, #0]
 802ead4:	699b      	ldr	r3, [r3, #24]
 802ead6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 802ead8:	687b      	ldr	r3, [r7, #4]
 802eada:	681b      	ldr	r3, [r3, #0]
 802eadc:	695b      	ldr	r3, [r3, #20]
 802eade:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 802eae0:	69fb      	ldr	r3, [r7, #28]
 802eae2:	f003 0301 	and.w	r3, r3, #1
 802eae6:	2b00      	cmp	r3, #0
 802eae8:	d10d      	bne.n	802eb06 <HAL_I2C_EV_IRQHandler+0x6e>
 802eaea:	693b      	ldr	r3, [r7, #16]
 802eaec:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 802eaf0:	d003      	beq.n	802eafa <HAL_I2C_EV_IRQHandler+0x62>
 802eaf2:	693b      	ldr	r3, [r7, #16]
 802eaf4:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 802eaf8:	d101      	bne.n	802eafe <HAL_I2C_EV_IRQHandler+0x66>
 802eafa:	2301      	movs	r3, #1
 802eafc:	e000      	b.n	802eb00 <HAL_I2C_EV_IRQHandler+0x68>
 802eafe:	2300      	movs	r3, #0
 802eb00:	2b01      	cmp	r3, #1
 802eb02:	f000 8114 	beq.w	802ed2e <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 802eb06:	69fb      	ldr	r3, [r7, #28]
 802eb08:	f003 0301 	and.w	r3, r3, #1
 802eb0c:	2b00      	cmp	r3, #0
 802eb0e:	d00b      	beq.n	802eb28 <HAL_I2C_EV_IRQHandler+0x90>
 802eb10:	697b      	ldr	r3, [r7, #20]
 802eb12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 802eb16:	2b00      	cmp	r3, #0
 802eb18:	d006      	beq.n	802eb28 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 802eb1a:	6878      	ldr	r0, [r7, #4]
 802eb1c:	f001 ff0f 	bl	803093e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 802eb20:	6878      	ldr	r0, [r7, #4]
 802eb22:	f000 fd97 	bl	802f654 <I2C_Master_SB>
 802eb26:	e083      	b.n	802ec30 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 802eb28:	69fb      	ldr	r3, [r7, #28]
 802eb2a:	f003 0308 	and.w	r3, r3, #8
 802eb2e:	2b00      	cmp	r3, #0
 802eb30:	d008      	beq.n	802eb44 <HAL_I2C_EV_IRQHandler+0xac>
 802eb32:	697b      	ldr	r3, [r7, #20]
 802eb34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 802eb38:	2b00      	cmp	r3, #0
 802eb3a:	d003      	beq.n	802eb44 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 802eb3c:	6878      	ldr	r0, [r7, #4]
 802eb3e:	f000 fe0f 	bl	802f760 <I2C_Master_ADD10>
 802eb42:	e075      	b.n	802ec30 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 802eb44:	69fb      	ldr	r3, [r7, #28]
 802eb46:	f003 0302 	and.w	r3, r3, #2
 802eb4a:	2b00      	cmp	r3, #0
 802eb4c:	d008      	beq.n	802eb60 <HAL_I2C_EV_IRQHandler+0xc8>
 802eb4e:	697b      	ldr	r3, [r7, #20]
 802eb50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 802eb54:	2b00      	cmp	r3, #0
 802eb56:	d003      	beq.n	802eb60 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 802eb58:	6878      	ldr	r0, [r7, #4]
 802eb5a:	f000 fe2b 	bl	802f7b4 <I2C_Master_ADDR>
 802eb5e:	e067      	b.n	802ec30 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 802eb60:	69bb      	ldr	r3, [r7, #24]
 802eb62:	f003 0304 	and.w	r3, r3, #4
 802eb66:	2b00      	cmp	r3, #0
 802eb68:	d036      	beq.n	802ebd8 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 802eb6a:	687b      	ldr	r3, [r7, #4]
 802eb6c:	681b      	ldr	r3, [r3, #0]
 802eb6e:	685b      	ldr	r3, [r3, #4]
 802eb70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 802eb74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 802eb78:	f000 80db 	beq.w	802ed32 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 802eb7c:	69fb      	ldr	r3, [r7, #28]
 802eb7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 802eb82:	2b00      	cmp	r3, #0
 802eb84:	d00d      	beq.n	802eba2 <HAL_I2C_EV_IRQHandler+0x10a>
 802eb86:	697b      	ldr	r3, [r7, #20]
 802eb88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 802eb8c:	2b00      	cmp	r3, #0
 802eb8e:	d008      	beq.n	802eba2 <HAL_I2C_EV_IRQHandler+0x10a>
 802eb90:	69fb      	ldr	r3, [r7, #28]
 802eb92:	f003 0304 	and.w	r3, r3, #4
 802eb96:	2b00      	cmp	r3, #0
 802eb98:	d103      	bne.n	802eba2 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 802eb9a:	6878      	ldr	r0, [r7, #4]
 802eb9c:	f000 f9e6 	bl	802ef6c <I2C_MasterTransmit_TXE>
 802eba0:	e046      	b.n	802ec30 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 802eba2:	69fb      	ldr	r3, [r7, #28]
 802eba4:	f003 0304 	and.w	r3, r3, #4
 802eba8:	2b00      	cmp	r3, #0
 802ebaa:	f000 80c2 	beq.w	802ed32 <HAL_I2C_EV_IRQHandler+0x29a>
 802ebae:	697b      	ldr	r3, [r7, #20]
 802ebb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 802ebb4:	2b00      	cmp	r3, #0
 802ebb6:	f000 80bc 	beq.w	802ed32 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 802ebba:	7bbb      	ldrb	r3, [r7, #14]
 802ebbc:	2b21      	cmp	r3, #33	@ 0x21
 802ebbe:	d103      	bne.n	802ebc8 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 802ebc0:	6878      	ldr	r0, [r7, #4]
 802ebc2:	f000 fa72 	bl	802f0aa <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 802ebc6:	e0b4      	b.n	802ed32 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 802ebc8:	7bfb      	ldrb	r3, [r7, #15]
 802ebca:	2b40      	cmp	r3, #64	@ 0x40
 802ebcc:	f040 80b1 	bne.w	802ed32 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 802ebd0:	6878      	ldr	r0, [r7, #4]
 802ebd2:	f000 fae3 	bl	802f19c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 802ebd6:	e0ac      	b.n	802ed32 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 802ebd8:	687b      	ldr	r3, [r7, #4]
 802ebda:	681b      	ldr	r3, [r3, #0]
 802ebdc:	685b      	ldr	r3, [r3, #4]
 802ebde:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 802ebe2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 802ebe6:	f000 80a4 	beq.w	802ed32 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 802ebea:	69fb      	ldr	r3, [r7, #28]
 802ebec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802ebf0:	2b00      	cmp	r3, #0
 802ebf2:	d00d      	beq.n	802ec10 <HAL_I2C_EV_IRQHandler+0x178>
 802ebf4:	697b      	ldr	r3, [r7, #20]
 802ebf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 802ebfa:	2b00      	cmp	r3, #0
 802ebfc:	d008      	beq.n	802ec10 <HAL_I2C_EV_IRQHandler+0x178>
 802ebfe:	69fb      	ldr	r3, [r7, #28]
 802ec00:	f003 0304 	and.w	r3, r3, #4
 802ec04:	2b00      	cmp	r3, #0
 802ec06:	d103      	bne.n	802ec10 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 802ec08:	6878      	ldr	r0, [r7, #4]
 802ec0a:	f000 fb60 	bl	802f2ce <I2C_MasterReceive_RXNE>
 802ec0e:	e00f      	b.n	802ec30 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 802ec10:	69fb      	ldr	r3, [r7, #28]
 802ec12:	f003 0304 	and.w	r3, r3, #4
 802ec16:	2b00      	cmp	r3, #0
 802ec18:	f000 808b 	beq.w	802ed32 <HAL_I2C_EV_IRQHandler+0x29a>
 802ec1c:	697b      	ldr	r3, [r7, #20]
 802ec1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 802ec22:	2b00      	cmp	r3, #0
 802ec24:	f000 8085 	beq.w	802ed32 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 802ec28:	6878      	ldr	r0, [r7, #4]
 802ec2a:	f000 fc1c 	bl	802f466 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 802ec2e:	e080      	b.n	802ed32 <HAL_I2C_EV_IRQHandler+0x29a>
 802ec30:	e07f      	b.n	802ed32 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 802ec32:	687b      	ldr	r3, [r7, #4]
 802ec34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802ec36:	2b00      	cmp	r3, #0
 802ec38:	d004      	beq.n	802ec44 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 802ec3a:	687b      	ldr	r3, [r7, #4]
 802ec3c:	681b      	ldr	r3, [r3, #0]
 802ec3e:	695b      	ldr	r3, [r3, #20]
 802ec40:	61fb      	str	r3, [r7, #28]
 802ec42:	e007      	b.n	802ec54 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 802ec44:	687b      	ldr	r3, [r7, #4]
 802ec46:	681b      	ldr	r3, [r3, #0]
 802ec48:	699b      	ldr	r3, [r3, #24]
 802ec4a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 802ec4c:	687b      	ldr	r3, [r7, #4]
 802ec4e:	681b      	ldr	r3, [r3, #0]
 802ec50:	695b      	ldr	r3, [r3, #20]
 802ec52:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 802ec54:	69fb      	ldr	r3, [r7, #28]
 802ec56:	f003 0302 	and.w	r3, r3, #2
 802ec5a:	2b00      	cmp	r3, #0
 802ec5c:	d011      	beq.n	802ec82 <HAL_I2C_EV_IRQHandler+0x1ea>
 802ec5e:	697b      	ldr	r3, [r7, #20]
 802ec60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 802ec64:	2b00      	cmp	r3, #0
 802ec66:	d00c      	beq.n	802ec82 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 802ec68:	687b      	ldr	r3, [r7, #4]
 802ec6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802ec6c:	2b00      	cmp	r3, #0
 802ec6e:	d003      	beq.n	802ec78 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 802ec70:	687b      	ldr	r3, [r7, #4]
 802ec72:	681b      	ldr	r3, [r3, #0]
 802ec74:	699b      	ldr	r3, [r3, #24]
 802ec76:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 802ec78:	69b9      	ldr	r1, [r7, #24]
 802ec7a:	6878      	ldr	r0, [r7, #4]
 802ec7c:	f000 ffeb 	bl	802fc56 <I2C_Slave_ADDR>
 802ec80:	e05a      	b.n	802ed38 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 802ec82:	69fb      	ldr	r3, [r7, #28]
 802ec84:	f003 0310 	and.w	r3, r3, #16
 802ec88:	2b00      	cmp	r3, #0
 802ec8a:	d008      	beq.n	802ec9e <HAL_I2C_EV_IRQHandler+0x206>
 802ec8c:	697b      	ldr	r3, [r7, #20]
 802ec8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 802ec92:	2b00      	cmp	r3, #0
 802ec94:	d003      	beq.n	802ec9e <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 802ec96:	6878      	ldr	r0, [r7, #4]
 802ec98:	f001 f826 	bl	802fce8 <I2C_Slave_STOPF>
 802ec9c:	e04c      	b.n	802ed38 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 802ec9e:	7bbb      	ldrb	r3, [r7, #14]
 802eca0:	2b21      	cmp	r3, #33	@ 0x21
 802eca2:	d002      	beq.n	802ecaa <HAL_I2C_EV_IRQHandler+0x212>
 802eca4:	7bbb      	ldrb	r3, [r7, #14]
 802eca6:	2b29      	cmp	r3, #41	@ 0x29
 802eca8:	d120      	bne.n	802ecec <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 802ecaa:	69fb      	ldr	r3, [r7, #28]
 802ecac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 802ecb0:	2b00      	cmp	r3, #0
 802ecb2:	d00d      	beq.n	802ecd0 <HAL_I2C_EV_IRQHandler+0x238>
 802ecb4:	697b      	ldr	r3, [r7, #20]
 802ecb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 802ecba:	2b00      	cmp	r3, #0
 802ecbc:	d008      	beq.n	802ecd0 <HAL_I2C_EV_IRQHandler+0x238>
 802ecbe:	69fb      	ldr	r3, [r7, #28]
 802ecc0:	f003 0304 	and.w	r3, r3, #4
 802ecc4:	2b00      	cmp	r3, #0
 802ecc6:	d103      	bne.n	802ecd0 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 802ecc8:	6878      	ldr	r0, [r7, #4]
 802ecca:	f000 ff04 	bl	802fad6 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 802ecce:	e032      	b.n	802ed36 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 802ecd0:	69fb      	ldr	r3, [r7, #28]
 802ecd2:	f003 0304 	and.w	r3, r3, #4
 802ecd6:	2b00      	cmp	r3, #0
 802ecd8:	d02d      	beq.n	802ed36 <HAL_I2C_EV_IRQHandler+0x29e>
 802ecda:	697b      	ldr	r3, [r7, #20]
 802ecdc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 802ece0:	2b00      	cmp	r3, #0
 802ece2:	d028      	beq.n	802ed36 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 802ece4:	6878      	ldr	r0, [r7, #4]
 802ece6:	f000 ff34 	bl	802fb52 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 802ecea:	e024      	b.n	802ed36 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 802ecec:	69fb      	ldr	r3, [r7, #28]
 802ecee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802ecf2:	2b00      	cmp	r3, #0
 802ecf4:	d00d      	beq.n	802ed12 <HAL_I2C_EV_IRQHandler+0x27a>
 802ecf6:	697b      	ldr	r3, [r7, #20]
 802ecf8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 802ecfc:	2b00      	cmp	r3, #0
 802ecfe:	d008      	beq.n	802ed12 <HAL_I2C_EV_IRQHandler+0x27a>
 802ed00:	69fb      	ldr	r3, [r7, #28]
 802ed02:	f003 0304 	and.w	r3, r3, #4
 802ed06:	2b00      	cmp	r3, #0
 802ed08:	d103      	bne.n	802ed12 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 802ed0a:	6878      	ldr	r0, [r7, #4]
 802ed0c:	f000 ff42 	bl	802fb94 <I2C_SlaveReceive_RXNE>
 802ed10:	e012      	b.n	802ed38 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 802ed12:	69fb      	ldr	r3, [r7, #28]
 802ed14:	f003 0304 	and.w	r3, r3, #4
 802ed18:	2b00      	cmp	r3, #0
 802ed1a:	d00d      	beq.n	802ed38 <HAL_I2C_EV_IRQHandler+0x2a0>
 802ed1c:	697b      	ldr	r3, [r7, #20]
 802ed1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 802ed22:	2b00      	cmp	r3, #0
 802ed24:	d008      	beq.n	802ed38 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 802ed26:	6878      	ldr	r0, [r7, #4]
 802ed28:	f000 ff73 	bl	802fc12 <I2C_SlaveReceive_BTF>
 802ed2c:	e004      	b.n	802ed38 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 802ed2e:	bf00      	nop
 802ed30:	e002      	b.n	802ed38 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 802ed32:	bf00      	nop
 802ed34:	e000      	b.n	802ed38 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 802ed36:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 802ed38:	3720      	adds	r7, #32
 802ed3a:	46bd      	mov	sp, r7
 802ed3c:	bd80      	pop	{r7, pc}

0802ed3e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 802ed3e:	b580      	push	{r7, lr}
 802ed40:	b08a      	sub	sp, #40	@ 0x28
 802ed42:	af00      	add	r7, sp, #0
 802ed44:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 802ed46:	687b      	ldr	r3, [r7, #4]
 802ed48:	681b      	ldr	r3, [r3, #0]
 802ed4a:	695b      	ldr	r3, [r3, #20]
 802ed4c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 802ed4e:	687b      	ldr	r3, [r7, #4]
 802ed50:	681b      	ldr	r3, [r3, #0]
 802ed52:	685b      	ldr	r3, [r3, #4]
 802ed54:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 802ed56:	2300      	movs	r3, #0
 802ed58:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 802ed5a:	687b      	ldr	r3, [r7, #4]
 802ed5c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 802ed60:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 802ed62:	6a3b      	ldr	r3, [r7, #32]
 802ed64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 802ed68:	2b00      	cmp	r3, #0
 802ed6a:	d00d      	beq.n	802ed88 <HAL_I2C_ER_IRQHandler+0x4a>
 802ed6c:	69fb      	ldr	r3, [r7, #28]
 802ed6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 802ed72:	2b00      	cmp	r3, #0
 802ed74:	d008      	beq.n	802ed88 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 802ed76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802ed78:	f043 0301 	orr.w	r3, r3, #1
 802ed7c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 802ed7e:	687b      	ldr	r3, [r7, #4]
 802ed80:	681b      	ldr	r3, [r3, #0]
 802ed82:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 802ed86:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 802ed88:	6a3b      	ldr	r3, [r7, #32]
 802ed8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 802ed8e:	2b00      	cmp	r3, #0
 802ed90:	d00d      	beq.n	802edae <HAL_I2C_ER_IRQHandler+0x70>
 802ed92:	69fb      	ldr	r3, [r7, #28]
 802ed94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 802ed98:	2b00      	cmp	r3, #0
 802ed9a:	d008      	beq.n	802edae <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 802ed9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802ed9e:	f043 0302 	orr.w	r3, r3, #2
 802eda2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 802eda4:	687b      	ldr	r3, [r7, #4]
 802eda6:	681b      	ldr	r3, [r3, #0]
 802eda8:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 802edac:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 802edae:	6a3b      	ldr	r3, [r7, #32]
 802edb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 802edb4:	2b00      	cmp	r3, #0
 802edb6:	d03e      	beq.n	802ee36 <HAL_I2C_ER_IRQHandler+0xf8>
 802edb8:	69fb      	ldr	r3, [r7, #28]
 802edba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 802edbe:	2b00      	cmp	r3, #0
 802edc0:	d039      	beq.n	802ee36 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 802edc2:	7efb      	ldrb	r3, [r7, #27]
 802edc4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 802edc6:	687b      	ldr	r3, [r7, #4]
 802edc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802edca:	b29b      	uxth	r3, r3
 802edcc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 802edce:	687b      	ldr	r3, [r7, #4]
 802edd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 802edd4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 802edd6:	687b      	ldr	r3, [r7, #4]
 802edd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802edda:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 802eddc:	7ebb      	ldrb	r3, [r7, #26]
 802edde:	2b20      	cmp	r3, #32
 802ede0:	d112      	bne.n	802ee08 <HAL_I2C_ER_IRQHandler+0xca>
 802ede2:	697b      	ldr	r3, [r7, #20]
 802ede4:	2b00      	cmp	r3, #0
 802ede6:	d10f      	bne.n	802ee08 <HAL_I2C_ER_IRQHandler+0xca>
 802ede8:	7cfb      	ldrb	r3, [r7, #19]
 802edea:	2b21      	cmp	r3, #33	@ 0x21
 802edec:	d008      	beq.n	802ee00 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 802edee:	7cfb      	ldrb	r3, [r7, #19]
 802edf0:	2b29      	cmp	r3, #41	@ 0x29
 802edf2:	d005      	beq.n	802ee00 <HAL_I2C_ER_IRQHandler+0xc2>
 802edf4:	7cfb      	ldrb	r3, [r7, #19]
 802edf6:	2b28      	cmp	r3, #40	@ 0x28
 802edf8:	d106      	bne.n	802ee08 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 802edfa:	68fb      	ldr	r3, [r7, #12]
 802edfc:	2b21      	cmp	r3, #33	@ 0x21
 802edfe:	d103      	bne.n	802ee08 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 802ee00:	6878      	ldr	r0, [r7, #4]
 802ee02:	f001 f8a5 	bl	802ff50 <I2C_Slave_AF>
 802ee06:	e016      	b.n	802ee36 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 802ee08:	687b      	ldr	r3, [r7, #4]
 802ee0a:	681b      	ldr	r3, [r3, #0]
 802ee0c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 802ee10:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 802ee12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802ee14:	f043 0304 	orr.w	r3, r3, #4
 802ee18:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 802ee1a:	7efb      	ldrb	r3, [r7, #27]
 802ee1c:	2b10      	cmp	r3, #16
 802ee1e:	d002      	beq.n	802ee26 <HAL_I2C_ER_IRQHandler+0xe8>
 802ee20:	7efb      	ldrb	r3, [r7, #27]
 802ee22:	2b40      	cmp	r3, #64	@ 0x40
 802ee24:	d107      	bne.n	802ee36 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 802ee26:	687b      	ldr	r3, [r7, #4]
 802ee28:	681b      	ldr	r3, [r3, #0]
 802ee2a:	681a      	ldr	r2, [r3, #0]
 802ee2c:	687b      	ldr	r3, [r7, #4]
 802ee2e:	681b      	ldr	r3, [r3, #0]
 802ee30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 802ee34:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 802ee36:	6a3b      	ldr	r3, [r7, #32]
 802ee38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 802ee3c:	2b00      	cmp	r3, #0
 802ee3e:	d00d      	beq.n	802ee5c <HAL_I2C_ER_IRQHandler+0x11e>
 802ee40:	69fb      	ldr	r3, [r7, #28]
 802ee42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 802ee46:	2b00      	cmp	r3, #0
 802ee48:	d008      	beq.n	802ee5c <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 802ee4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802ee4c:	f043 0308 	orr.w	r3, r3, #8
 802ee50:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 802ee52:	687b      	ldr	r3, [r7, #4]
 802ee54:	681b      	ldr	r3, [r3, #0]
 802ee56:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 802ee5a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 802ee5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802ee5e:	2b00      	cmp	r3, #0
 802ee60:	d008      	beq.n	802ee74 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 802ee62:	687b      	ldr	r3, [r7, #4]
 802ee64:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 802ee66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802ee68:	431a      	orrs	r2, r3
 802ee6a:	687b      	ldr	r3, [r7, #4]
 802ee6c:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 802ee6e:	6878      	ldr	r0, [r7, #4]
 802ee70:	f001 f8e4 	bl	803003c <I2C_ITError>
  }
}
 802ee74:	bf00      	nop
 802ee76:	3728      	adds	r7, #40	@ 0x28
 802ee78:	46bd      	mov	sp, r7
 802ee7a:	bd80      	pop	{r7, pc}

0802ee7c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 802ee7c:	b480      	push	{r7}
 802ee7e:	b083      	sub	sp, #12
 802ee80:	af00      	add	r7, sp, #0
 802ee82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 802ee84:	bf00      	nop
 802ee86:	370c      	adds	r7, #12
 802ee88:	46bd      	mov	sp, r7
 802ee8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ee8e:	4770      	bx	lr

0802ee90 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 802ee90:	b480      	push	{r7}
 802ee92:	b083      	sub	sp, #12
 802ee94:	af00      	add	r7, sp, #0
 802ee96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 802ee98:	bf00      	nop
 802ee9a:	370c      	adds	r7, #12
 802ee9c:	46bd      	mov	sp, r7
 802ee9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802eea2:	4770      	bx	lr

0802eea4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 802eea4:	b480      	push	{r7}
 802eea6:	b083      	sub	sp, #12
 802eea8:	af00      	add	r7, sp, #0
 802eeaa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 802eeac:	bf00      	nop
 802eeae:	370c      	adds	r7, #12
 802eeb0:	46bd      	mov	sp, r7
 802eeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802eeb6:	4770      	bx	lr

0802eeb8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 802eeb8:	b480      	push	{r7}
 802eeba:	b083      	sub	sp, #12
 802eebc:	af00      	add	r7, sp, #0
 802eebe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 802eec0:	bf00      	nop
 802eec2:	370c      	adds	r7, #12
 802eec4:	46bd      	mov	sp, r7
 802eec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802eeca:	4770      	bx	lr

0802eecc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 802eecc:	b480      	push	{r7}
 802eece:	b083      	sub	sp, #12
 802eed0:	af00      	add	r7, sp, #0
 802eed2:	6078      	str	r0, [r7, #4]
 802eed4:	460b      	mov	r3, r1
 802eed6:	70fb      	strb	r3, [r7, #3]
 802eed8:	4613      	mov	r3, r2
 802eeda:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 802eedc:	bf00      	nop
 802eede:	370c      	adds	r7, #12
 802eee0:	46bd      	mov	sp, r7
 802eee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802eee6:	4770      	bx	lr

0802eee8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 802eee8:	b480      	push	{r7}
 802eeea:	b083      	sub	sp, #12
 802eeec:	af00      	add	r7, sp, #0
 802eeee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 802eef0:	bf00      	nop
 802eef2:	370c      	adds	r7, #12
 802eef4:	46bd      	mov	sp, r7
 802eef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802eefa:	4770      	bx	lr

0802eefc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 802eefc:	b480      	push	{r7}
 802eefe:	b083      	sub	sp, #12
 802ef00:	af00      	add	r7, sp, #0
 802ef02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 802ef04:	bf00      	nop
 802ef06:	370c      	adds	r7, #12
 802ef08:	46bd      	mov	sp, r7
 802ef0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ef0e:	4770      	bx	lr

0802ef10 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 802ef10:	b480      	push	{r7}
 802ef12:	b083      	sub	sp, #12
 802ef14:	af00      	add	r7, sp, #0
 802ef16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 802ef18:	bf00      	nop
 802ef1a:	370c      	adds	r7, #12
 802ef1c:	46bd      	mov	sp, r7
 802ef1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ef22:	4770      	bx	lr

0802ef24 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 802ef24:	b480      	push	{r7}
 802ef26:	b083      	sub	sp, #12
 802ef28:	af00      	add	r7, sp, #0
 802ef2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 802ef2c:	bf00      	nop
 802ef2e:	370c      	adds	r7, #12
 802ef30:	46bd      	mov	sp, r7
 802ef32:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ef36:	4770      	bx	lr

0802ef38 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 802ef38:	b480      	push	{r7}
 802ef3a:	b083      	sub	sp, #12
 802ef3c:	af00      	add	r7, sp, #0
 802ef3e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 802ef40:	687b      	ldr	r3, [r7, #4]
 802ef42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 802ef46:	b2db      	uxtb	r3, r3
}
 802ef48:	4618      	mov	r0, r3
 802ef4a:	370c      	adds	r7, #12
 802ef4c:	46bd      	mov	sp, r7
 802ef4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ef52:	4770      	bx	lr

0802ef54 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 802ef54:	b480      	push	{r7}
 802ef56:	b083      	sub	sp, #12
 802ef58:	af00      	add	r7, sp, #0
 802ef5a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 802ef5c:	687b      	ldr	r3, [r7, #4]
 802ef5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 802ef60:	4618      	mov	r0, r3
 802ef62:	370c      	adds	r7, #12
 802ef64:	46bd      	mov	sp, r7
 802ef66:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ef6a:	4770      	bx	lr

0802ef6c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 802ef6c:	b580      	push	{r7, lr}
 802ef6e:	b084      	sub	sp, #16
 802ef70:	af00      	add	r7, sp, #0
 802ef72:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 802ef74:	687b      	ldr	r3, [r7, #4]
 802ef76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 802ef7a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 802ef7c:	687b      	ldr	r3, [r7, #4]
 802ef7e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 802ef82:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 802ef84:	687b      	ldr	r3, [r7, #4]
 802ef86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802ef88:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 802ef8a:	687b      	ldr	r3, [r7, #4]
 802ef8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 802ef8e:	2b00      	cmp	r3, #0
 802ef90:	d153      	bne.n	802f03a <I2C_MasterTransmit_TXE+0xce>
 802ef92:	7bfb      	ldrb	r3, [r7, #15]
 802ef94:	2b21      	cmp	r3, #33	@ 0x21
 802ef96:	d150      	bne.n	802f03a <I2C_MasterTransmit_TXE+0xce>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 802ef98:	68bb      	ldr	r3, [r7, #8]
 802ef9a:	2b08      	cmp	r3, #8
 802ef9c:	d01e      	beq.n	802efdc <I2C_MasterTransmit_TXE+0x70>
 802ef9e:	68bb      	ldr	r3, [r7, #8]
 802efa0:	2b20      	cmp	r3, #32
 802efa2:	d01b      	beq.n	802efdc <I2C_MasterTransmit_TXE+0x70>
 802efa4:	68bb      	ldr	r3, [r7, #8]
 802efa6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 802efaa:	d017      	beq.n	802efdc <I2C_MasterTransmit_TXE+0x70>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 802efac:	687b      	ldr	r3, [r7, #4]
 802efae:	681b      	ldr	r3, [r3, #0]
 802efb0:	685a      	ldr	r2, [r3, #4]
 802efb2:	687b      	ldr	r3, [r7, #4]
 802efb4:	681b      	ldr	r3, [r3, #0]
 802efb6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 802efba:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 802efbc:	687b      	ldr	r3, [r7, #4]
 802efbe:	2211      	movs	r2, #17
 802efc0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 802efc2:	687b      	ldr	r3, [r7, #4]
 802efc4:	2200      	movs	r2, #0
 802efc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 802efca:	687b      	ldr	r3, [r7, #4]
 802efcc:	2220      	movs	r2, #32
 802efce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
 802efd2:	687b      	ldr	r3, [r7, #4]
 802efd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802efd6:	6878      	ldr	r0, [r7, #4]
 802efd8:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 802efda:	e062      	b.n	802f0a2 <I2C_MasterTransmit_TXE+0x136>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 802efdc:	687b      	ldr	r3, [r7, #4]
 802efde:	681b      	ldr	r3, [r3, #0]
 802efe0:	685a      	ldr	r2, [r3, #4]
 802efe2:	687b      	ldr	r3, [r7, #4]
 802efe4:	681b      	ldr	r3, [r3, #0]
 802efe6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 802efea:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 802efec:	687b      	ldr	r3, [r7, #4]
 802efee:	681b      	ldr	r3, [r3, #0]
 802eff0:	681a      	ldr	r2, [r3, #0]
 802eff2:	687b      	ldr	r3, [r7, #4]
 802eff4:	681b      	ldr	r3, [r3, #0]
 802eff6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 802effa:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 802effc:	687b      	ldr	r3, [r7, #4]
 802effe:	2200      	movs	r2, #0
 802f000:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 802f002:	687b      	ldr	r3, [r7, #4]
 802f004:	2220      	movs	r2, #32
 802f006:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 802f00a:	687b      	ldr	r3, [r7, #4]
 802f00c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 802f010:	b2db      	uxtb	r3, r3
 802f012:	2b40      	cmp	r3, #64	@ 0x40
 802f014:	d108      	bne.n	802f028 <I2C_MasterTransmit_TXE+0xbc>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 802f016:	687b      	ldr	r3, [r7, #4]
 802f018:	2200      	movs	r2, #0
 802f01a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
 802f01e:	687b      	ldr	r3, [r7, #4]
 802f020:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802f022:	6878      	ldr	r0, [r7, #4]
 802f024:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 802f026:	e03c      	b.n	802f0a2 <I2C_MasterTransmit_TXE+0x136>
        HAL_I2C_MemTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 802f028:	687b      	ldr	r3, [r7, #4]
 802f02a:	2200      	movs	r2, #0
 802f02c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
 802f030:	687b      	ldr	r3, [r7, #4]
 802f032:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802f034:	6878      	ldr	r0, [r7, #4]
 802f036:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 802f038:	e033      	b.n	802f0a2 <I2C_MasterTransmit_TXE+0x136>
        HAL_I2C_MasterTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 802f03a:	7bfb      	ldrb	r3, [r7, #15]
 802f03c:	2b21      	cmp	r3, #33	@ 0x21
 802f03e:	d005      	beq.n	802f04c <I2C_MasterTransmit_TXE+0xe0>
 802f040:	7bbb      	ldrb	r3, [r7, #14]
 802f042:	2b40      	cmp	r3, #64	@ 0x40
 802f044:	d12d      	bne.n	802f0a2 <I2C_MasterTransmit_TXE+0x136>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 802f046:	7bfb      	ldrb	r3, [r7, #15]
 802f048:	2b22      	cmp	r3, #34	@ 0x22
 802f04a:	d12a      	bne.n	802f0a2 <I2C_MasterTransmit_TXE+0x136>
  {
    if (hi2c->XferCount == 0U)
 802f04c:	687b      	ldr	r3, [r7, #4]
 802f04e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802f050:	b29b      	uxth	r3, r3
 802f052:	2b00      	cmp	r3, #0
 802f054:	d108      	bne.n	802f068 <I2C_MasterTransmit_TXE+0xfc>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 802f056:	687b      	ldr	r3, [r7, #4]
 802f058:	681b      	ldr	r3, [r3, #0]
 802f05a:	685a      	ldr	r2, [r3, #4]
 802f05c:	687b      	ldr	r3, [r7, #4]
 802f05e:	681b      	ldr	r3, [r3, #0]
 802f060:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 802f064:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 802f066:	e01c      	b.n	802f0a2 <I2C_MasterTransmit_TXE+0x136>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 802f068:	687b      	ldr	r3, [r7, #4]
 802f06a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 802f06e:	b2db      	uxtb	r3, r3
 802f070:	2b40      	cmp	r3, #64	@ 0x40
 802f072:	d103      	bne.n	802f07c <I2C_MasterTransmit_TXE+0x110>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 802f074:	6878      	ldr	r0, [r7, #4]
 802f076:	f000 f891 	bl	802f19c <I2C_MemoryTransmit_TXE_BTF>
}
 802f07a:	e012      	b.n	802f0a2 <I2C_MasterTransmit_TXE+0x136>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 802f07c:	687b      	ldr	r3, [r7, #4]
 802f07e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802f080:	781a      	ldrb	r2, [r3, #0]
 802f082:	687b      	ldr	r3, [r7, #4]
 802f084:	681b      	ldr	r3, [r3, #0]
 802f086:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 802f088:	687b      	ldr	r3, [r7, #4]
 802f08a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802f08c:	1c5a      	adds	r2, r3, #1
 802f08e:	687b      	ldr	r3, [r7, #4]
 802f090:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 802f092:	687b      	ldr	r3, [r7, #4]
 802f094:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802f096:	b29b      	uxth	r3, r3
 802f098:	3b01      	subs	r3, #1
 802f09a:	b29a      	uxth	r2, r3
 802f09c:	687b      	ldr	r3, [r7, #4]
 802f09e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 802f0a0:	e7ff      	b.n	802f0a2 <I2C_MasterTransmit_TXE+0x136>
 802f0a2:	bf00      	nop
 802f0a4:	3710      	adds	r7, #16
 802f0a6:	46bd      	mov	sp, r7
 802f0a8:	bd80      	pop	{r7, pc}

0802f0aa <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 802f0aa:	b580      	push	{r7, lr}
 802f0ac:	b084      	sub	sp, #16
 802f0ae:	af00      	add	r7, sp, #0
 802f0b0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 802f0b2:	687b      	ldr	r3, [r7, #4]
 802f0b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802f0b6:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 802f0b8:	687b      	ldr	r3, [r7, #4]
 802f0ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 802f0be:	b2db      	uxtb	r3, r3
 802f0c0:	2b21      	cmp	r3, #33	@ 0x21
 802f0c2:	d167      	bne.n	802f194 <I2C_MasterTransmit_BTF+0xea>
  {
    if (hi2c->XferCount != 0U)
 802f0c4:	687b      	ldr	r3, [r7, #4]
 802f0c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802f0c8:	b29b      	uxth	r3, r3
 802f0ca:	2b00      	cmp	r3, #0
 802f0cc:	d012      	beq.n	802f0f4 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 802f0ce:	687b      	ldr	r3, [r7, #4]
 802f0d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802f0d2:	781a      	ldrb	r2, [r3, #0]
 802f0d4:	687b      	ldr	r3, [r7, #4]
 802f0d6:	681b      	ldr	r3, [r3, #0]
 802f0d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 802f0da:	687b      	ldr	r3, [r7, #4]
 802f0dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802f0de:	1c5a      	adds	r2, r3, #1
 802f0e0:	687b      	ldr	r3, [r7, #4]
 802f0e2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 802f0e4:	687b      	ldr	r3, [r7, #4]
 802f0e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802f0e8:	b29b      	uxth	r3, r3
 802f0ea:	3b01      	subs	r3, #1
 802f0ec:	b29a      	uxth	r2, r3
 802f0ee:	687b      	ldr	r3, [r7, #4]
 802f0f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 802f0f2:	e04f      	b.n	802f194 <I2C_MasterTransmit_BTF+0xea>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 802f0f4:	68fb      	ldr	r3, [r7, #12]
 802f0f6:	2b08      	cmp	r3, #8
 802f0f8:	d01e      	beq.n	802f138 <I2C_MasterTransmit_BTF+0x8e>
 802f0fa:	68fb      	ldr	r3, [r7, #12]
 802f0fc:	2b20      	cmp	r3, #32
 802f0fe:	d01b      	beq.n	802f138 <I2C_MasterTransmit_BTF+0x8e>
 802f100:	68fb      	ldr	r3, [r7, #12]
 802f102:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 802f106:	d017      	beq.n	802f138 <I2C_MasterTransmit_BTF+0x8e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 802f108:	687b      	ldr	r3, [r7, #4]
 802f10a:	681b      	ldr	r3, [r3, #0]
 802f10c:	685a      	ldr	r2, [r3, #4]
 802f10e:	687b      	ldr	r3, [r7, #4]
 802f110:	681b      	ldr	r3, [r3, #0]
 802f112:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 802f116:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 802f118:	687b      	ldr	r3, [r7, #4]
 802f11a:	2211      	movs	r2, #17
 802f11c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 802f11e:	687b      	ldr	r3, [r7, #4]
 802f120:	2200      	movs	r2, #0
 802f122:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 802f126:	687b      	ldr	r3, [r7, #4]
 802f128:	2220      	movs	r2, #32
 802f12a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->MasterTxCpltCallback(hi2c);
 802f12e:	687b      	ldr	r3, [r7, #4]
 802f130:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802f132:	6878      	ldr	r0, [r7, #4]
 802f134:	4798      	blx	r3
}
 802f136:	e02d      	b.n	802f194 <I2C_MasterTransmit_BTF+0xea>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 802f138:	687b      	ldr	r3, [r7, #4]
 802f13a:	681b      	ldr	r3, [r3, #0]
 802f13c:	685a      	ldr	r2, [r3, #4]
 802f13e:	687b      	ldr	r3, [r7, #4]
 802f140:	681b      	ldr	r3, [r3, #0]
 802f142:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 802f146:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 802f148:	687b      	ldr	r3, [r7, #4]
 802f14a:	681b      	ldr	r3, [r3, #0]
 802f14c:	681a      	ldr	r2, [r3, #0]
 802f14e:	687b      	ldr	r3, [r7, #4]
 802f150:	681b      	ldr	r3, [r3, #0]
 802f152:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 802f156:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 802f158:	687b      	ldr	r3, [r7, #4]
 802f15a:	2200      	movs	r2, #0
 802f15c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 802f15e:	687b      	ldr	r3, [r7, #4]
 802f160:	2220      	movs	r2, #32
 802f162:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 802f166:	687b      	ldr	r3, [r7, #4]
 802f168:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 802f16c:	b2db      	uxtb	r3, r3
 802f16e:	2b40      	cmp	r3, #64	@ 0x40
 802f170:	d108      	bne.n	802f184 <I2C_MasterTransmit_BTF+0xda>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 802f172:	687b      	ldr	r3, [r7, #4]
 802f174:	2200      	movs	r2, #0
 802f176:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->MemTxCpltCallback(hi2c);
 802f17a:	687b      	ldr	r3, [r7, #4]
 802f17c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802f17e:	6878      	ldr	r0, [r7, #4]
 802f180:	4798      	blx	r3
}
 802f182:	e007      	b.n	802f194 <I2C_MasterTransmit_BTF+0xea>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 802f184:	687b      	ldr	r3, [r7, #4]
 802f186:	2200      	movs	r2, #0
 802f188:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->MasterTxCpltCallback(hi2c);
 802f18c:	687b      	ldr	r3, [r7, #4]
 802f18e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802f190:	6878      	ldr	r0, [r7, #4]
 802f192:	4798      	blx	r3
}
 802f194:	bf00      	nop
 802f196:	3710      	adds	r7, #16
 802f198:	46bd      	mov	sp, r7
 802f19a:	bd80      	pop	{r7, pc}

0802f19c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 802f19c:	b580      	push	{r7, lr}
 802f19e:	b084      	sub	sp, #16
 802f1a0:	af00      	add	r7, sp, #0
 802f1a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 802f1a4:	687b      	ldr	r3, [r7, #4]
 802f1a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 802f1aa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 802f1ac:	687b      	ldr	r3, [r7, #4]
 802f1ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802f1b0:	2b00      	cmp	r3, #0
 802f1b2:	d11d      	bne.n	802f1f0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 802f1b4:	687b      	ldr	r3, [r7, #4]
 802f1b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 802f1b8:	2b01      	cmp	r3, #1
 802f1ba:	d10b      	bne.n	802f1d4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 802f1bc:	687b      	ldr	r3, [r7, #4]
 802f1be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 802f1c0:	b2da      	uxtb	r2, r3
 802f1c2:	687b      	ldr	r3, [r7, #4]
 802f1c4:	681b      	ldr	r3, [r3, #0]
 802f1c6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 802f1c8:	687b      	ldr	r3, [r7, #4]
 802f1ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802f1cc:	1c9a      	adds	r2, r3, #2
 802f1ce:	687b      	ldr	r3, [r7, #4]
 802f1d0:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 802f1d2:	e078      	b.n	802f2c6 <I2C_MemoryTransmit_TXE_BTF+0x12a>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 802f1d4:	687b      	ldr	r3, [r7, #4]
 802f1d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 802f1d8:	b29b      	uxth	r3, r3
 802f1da:	121b      	asrs	r3, r3, #8
 802f1dc:	b2da      	uxtb	r2, r3
 802f1de:	687b      	ldr	r3, [r7, #4]
 802f1e0:	681b      	ldr	r3, [r3, #0]
 802f1e2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 802f1e4:	687b      	ldr	r3, [r7, #4]
 802f1e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802f1e8:	1c5a      	adds	r2, r3, #1
 802f1ea:	687b      	ldr	r3, [r7, #4]
 802f1ec:	651a      	str	r2, [r3, #80]	@ 0x50
}
 802f1ee:	e06a      	b.n	802f2c6 <I2C_MemoryTransmit_TXE_BTF+0x12a>
  else if (hi2c->EventCount == 1U)
 802f1f0:	687b      	ldr	r3, [r7, #4]
 802f1f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802f1f4:	2b01      	cmp	r3, #1
 802f1f6:	d10b      	bne.n	802f210 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 802f1f8:	687b      	ldr	r3, [r7, #4]
 802f1fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 802f1fc:	b2da      	uxtb	r2, r3
 802f1fe:	687b      	ldr	r3, [r7, #4]
 802f200:	681b      	ldr	r3, [r3, #0]
 802f202:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 802f204:	687b      	ldr	r3, [r7, #4]
 802f206:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802f208:	1c5a      	adds	r2, r3, #1
 802f20a:	687b      	ldr	r3, [r7, #4]
 802f20c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 802f20e:	e05a      	b.n	802f2c6 <I2C_MemoryTransmit_TXE_BTF+0x12a>
  else if (hi2c->EventCount == 2U)
 802f210:	687b      	ldr	r3, [r7, #4]
 802f212:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802f214:	2b02      	cmp	r3, #2
 802f216:	d153      	bne.n	802f2c0 <I2C_MemoryTransmit_TXE_BTF+0x124>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 802f218:	7bfb      	ldrb	r3, [r7, #15]
 802f21a:	2b22      	cmp	r3, #34	@ 0x22
 802f21c:	d10d      	bne.n	802f23a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 802f21e:	687b      	ldr	r3, [r7, #4]
 802f220:	681b      	ldr	r3, [r3, #0]
 802f222:	681a      	ldr	r2, [r3, #0]
 802f224:	687b      	ldr	r3, [r7, #4]
 802f226:	681b      	ldr	r3, [r3, #0]
 802f228:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 802f22c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 802f22e:	687b      	ldr	r3, [r7, #4]
 802f230:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802f232:	1c5a      	adds	r2, r3, #1
 802f234:	687b      	ldr	r3, [r7, #4]
 802f236:	651a      	str	r2, [r3, #80]	@ 0x50
}
 802f238:	e045      	b.n	802f2c6 <I2C_MemoryTransmit_TXE_BTF+0x12a>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 802f23a:	687b      	ldr	r3, [r7, #4]
 802f23c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802f23e:	b29b      	uxth	r3, r3
 802f240:	2b00      	cmp	r3, #0
 802f242:	d015      	beq.n	802f270 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 802f244:	7bfb      	ldrb	r3, [r7, #15]
 802f246:	2b21      	cmp	r3, #33	@ 0x21
 802f248:	d112      	bne.n	802f270 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 802f24a:	687b      	ldr	r3, [r7, #4]
 802f24c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802f24e:	781a      	ldrb	r2, [r3, #0]
 802f250:	687b      	ldr	r3, [r7, #4]
 802f252:	681b      	ldr	r3, [r3, #0]
 802f254:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 802f256:	687b      	ldr	r3, [r7, #4]
 802f258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802f25a:	1c5a      	adds	r2, r3, #1
 802f25c:	687b      	ldr	r3, [r7, #4]
 802f25e:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 802f260:	687b      	ldr	r3, [r7, #4]
 802f262:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802f264:	b29b      	uxth	r3, r3
 802f266:	3b01      	subs	r3, #1
 802f268:	b29a      	uxth	r2, r3
 802f26a:	687b      	ldr	r3, [r7, #4]
 802f26c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 802f26e:	e02a      	b.n	802f2c6 <I2C_MemoryTransmit_TXE_BTF+0x12a>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 802f270:	687b      	ldr	r3, [r7, #4]
 802f272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802f274:	b29b      	uxth	r3, r3
 802f276:	2b00      	cmp	r3, #0
 802f278:	d125      	bne.n	802f2c6 <I2C_MemoryTransmit_TXE_BTF+0x12a>
 802f27a:	7bfb      	ldrb	r3, [r7, #15]
 802f27c:	2b21      	cmp	r3, #33	@ 0x21
 802f27e:	d122      	bne.n	802f2c6 <I2C_MemoryTransmit_TXE_BTF+0x12a>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 802f280:	687b      	ldr	r3, [r7, #4]
 802f282:	681b      	ldr	r3, [r3, #0]
 802f284:	685a      	ldr	r2, [r3, #4]
 802f286:	687b      	ldr	r3, [r7, #4]
 802f288:	681b      	ldr	r3, [r3, #0]
 802f28a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 802f28e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 802f290:	687b      	ldr	r3, [r7, #4]
 802f292:	681b      	ldr	r3, [r3, #0]
 802f294:	681a      	ldr	r2, [r3, #0]
 802f296:	687b      	ldr	r3, [r7, #4]
 802f298:	681b      	ldr	r3, [r3, #0]
 802f29a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 802f29e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 802f2a0:	687b      	ldr	r3, [r7, #4]
 802f2a2:	2200      	movs	r2, #0
 802f2a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 802f2a6:	687b      	ldr	r3, [r7, #4]
 802f2a8:	2220      	movs	r2, #32
 802f2aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 802f2ae:	687b      	ldr	r3, [r7, #4]
 802f2b0:	2200      	movs	r2, #0
 802f2b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->MemTxCpltCallback(hi2c);
 802f2b6:	687b      	ldr	r3, [r7, #4]
 802f2b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802f2ba:	6878      	ldr	r0, [r7, #4]
 802f2bc:	4798      	blx	r3
}
 802f2be:	e002      	b.n	802f2c6 <I2C_MemoryTransmit_TXE_BTF+0x12a>
    I2C_Flush_DR(hi2c);
 802f2c0:	6878      	ldr	r0, [r7, #4]
 802f2c2:	f7ff facd 	bl	802e860 <I2C_Flush_DR>
}
 802f2c6:	bf00      	nop
 802f2c8:	3710      	adds	r7, #16
 802f2ca:	46bd      	mov	sp, r7
 802f2cc:	bd80      	pop	{r7, pc}

0802f2ce <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 802f2ce:	b580      	push	{r7, lr}
 802f2d0:	b084      	sub	sp, #16
 802f2d2:	af00      	add	r7, sp, #0
 802f2d4:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 802f2d6:	687b      	ldr	r3, [r7, #4]
 802f2d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 802f2dc:	b2db      	uxtb	r3, r3
 802f2de:	2b22      	cmp	r3, #34	@ 0x22
 802f2e0:	f040 80bd 	bne.w	802f45e <I2C_MasterReceive_RXNE+0x190>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 802f2e4:	687b      	ldr	r3, [r7, #4]
 802f2e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802f2e8:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 802f2ea:	687b      	ldr	r3, [r7, #4]
 802f2ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802f2ee:	b29b      	uxth	r3, r3
 802f2f0:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 802f2f2:	68bb      	ldr	r3, [r7, #8]
 802f2f4:	2b03      	cmp	r3, #3
 802f2f6:	d921      	bls.n	802f33c <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 802f2f8:	687b      	ldr	r3, [r7, #4]
 802f2fa:	681b      	ldr	r3, [r3, #0]
 802f2fc:	691a      	ldr	r2, [r3, #16]
 802f2fe:	687b      	ldr	r3, [r7, #4]
 802f300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802f302:	b2d2      	uxtb	r2, r2
 802f304:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 802f306:	687b      	ldr	r3, [r7, #4]
 802f308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802f30a:	1c5a      	adds	r2, r3, #1
 802f30c:	687b      	ldr	r3, [r7, #4]
 802f30e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 802f310:	687b      	ldr	r3, [r7, #4]
 802f312:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802f314:	b29b      	uxth	r3, r3
 802f316:	3b01      	subs	r3, #1
 802f318:	b29a      	uxth	r2, r3
 802f31a:	687b      	ldr	r3, [r7, #4]
 802f31c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 802f31e:	687b      	ldr	r3, [r7, #4]
 802f320:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802f322:	b29b      	uxth	r3, r3
 802f324:	2b03      	cmp	r3, #3
 802f326:	f040 809a 	bne.w	802f45e <I2C_MasterReceive_RXNE+0x190>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 802f32a:	687b      	ldr	r3, [r7, #4]
 802f32c:	681b      	ldr	r3, [r3, #0]
 802f32e:	685a      	ldr	r2, [r3, #4]
 802f330:	687b      	ldr	r3, [r7, #4]
 802f332:	681b      	ldr	r3, [r3, #0]
 802f334:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 802f338:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 802f33a:	e090      	b.n	802f45e <I2C_MasterReceive_RXNE+0x190>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 802f33c:	687b      	ldr	r3, [r7, #4]
 802f33e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802f340:	2b02      	cmp	r3, #2
 802f342:	f000 8083 	beq.w	802f44c <I2C_MasterReceive_RXNE+0x17e>
 802f346:	68bb      	ldr	r3, [r7, #8]
 802f348:	2b01      	cmp	r3, #1
 802f34a:	d002      	beq.n	802f352 <I2C_MasterReceive_RXNE+0x84>
 802f34c:	68bb      	ldr	r3, [r7, #8]
 802f34e:	2b00      	cmp	r3, #0
 802f350:	d17c      	bne.n	802f44c <I2C_MasterReceive_RXNE+0x17e>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 802f352:	6878      	ldr	r0, [r7, #4]
 802f354:	f001 fa92 	bl	803087c <I2C_WaitOnSTOPRequestThroughIT>
 802f358:	4603      	mov	r3, r0
 802f35a:	2b00      	cmp	r3, #0
 802f35c:	d14e      	bne.n	802f3fc <I2C_MasterReceive_RXNE+0x12e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 802f35e:	687b      	ldr	r3, [r7, #4]
 802f360:	681b      	ldr	r3, [r3, #0]
 802f362:	681a      	ldr	r2, [r3, #0]
 802f364:	687b      	ldr	r3, [r7, #4]
 802f366:	681b      	ldr	r3, [r3, #0]
 802f368:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 802f36c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 802f36e:	687b      	ldr	r3, [r7, #4]
 802f370:	681b      	ldr	r3, [r3, #0]
 802f372:	685a      	ldr	r2, [r3, #4]
 802f374:	687b      	ldr	r3, [r7, #4]
 802f376:	681b      	ldr	r3, [r3, #0]
 802f378:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 802f37c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 802f37e:	687b      	ldr	r3, [r7, #4]
 802f380:	681b      	ldr	r3, [r3, #0]
 802f382:	691a      	ldr	r2, [r3, #16]
 802f384:	687b      	ldr	r3, [r7, #4]
 802f386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802f388:	b2d2      	uxtb	r2, r2
 802f38a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 802f38c:	687b      	ldr	r3, [r7, #4]
 802f38e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802f390:	1c5a      	adds	r2, r3, #1
 802f392:	687b      	ldr	r3, [r7, #4]
 802f394:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 802f396:	687b      	ldr	r3, [r7, #4]
 802f398:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802f39a:	b29b      	uxth	r3, r3
 802f39c:	3b01      	subs	r3, #1
 802f39e:	b29a      	uxth	r2, r3
 802f3a0:	687b      	ldr	r3, [r7, #4]
 802f3a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 802f3a4:	687b      	ldr	r3, [r7, #4]
 802f3a6:	2220      	movs	r2, #32
 802f3a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 802f3ac:	687b      	ldr	r3, [r7, #4]
 802f3ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 802f3b2:	b2db      	uxtb	r3, r3
 802f3b4:	2b40      	cmp	r3, #64	@ 0x40
 802f3b6:	d10b      	bne.n	802f3d0 <I2C_MasterReceive_RXNE+0x102>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 802f3b8:	687b      	ldr	r3, [r7, #4]
 802f3ba:	2200      	movs	r2, #0
 802f3bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 802f3c0:	687b      	ldr	r3, [r7, #4]
 802f3c2:	2200      	movs	r2, #0
 802f3c4:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->MemRxCpltCallback(hi2c);
 802f3c6:	687b      	ldr	r3, [r7, #4]
 802f3c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 802f3ca:	6878      	ldr	r0, [r7, #4]
 802f3cc:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 802f3ce:	e046      	b.n	802f45e <I2C_MasterReceive_RXNE+0x190>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 802f3d0:	687b      	ldr	r3, [r7, #4]
 802f3d2:	2200      	movs	r2, #0
 802f3d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 802f3d8:	68fb      	ldr	r3, [r7, #12]
 802f3da:	2b08      	cmp	r3, #8
 802f3dc:	d002      	beq.n	802f3e4 <I2C_MasterReceive_RXNE+0x116>
 802f3de:	68fb      	ldr	r3, [r7, #12]
 802f3e0:	2b20      	cmp	r3, #32
 802f3e2:	d103      	bne.n	802f3ec <I2C_MasterReceive_RXNE+0x11e>
            hi2c->PreviousState = I2C_STATE_NONE;
 802f3e4:	687b      	ldr	r3, [r7, #4]
 802f3e6:	2200      	movs	r2, #0
 802f3e8:	631a      	str	r2, [r3, #48]	@ 0x30
 802f3ea:	e002      	b.n	802f3f2 <I2C_MasterReceive_RXNE+0x124>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 802f3ec:	687b      	ldr	r3, [r7, #4]
 802f3ee:	2212      	movs	r2, #18
 802f3f0:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->MasterRxCpltCallback(hi2c);
 802f3f2:	687b      	ldr	r3, [r7, #4]
 802f3f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 802f3f6:	6878      	ldr	r0, [r7, #4]
 802f3f8:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 802f3fa:	e030      	b.n	802f45e <I2C_MasterReceive_RXNE+0x190>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 802f3fc:	687b      	ldr	r3, [r7, #4]
 802f3fe:	681b      	ldr	r3, [r3, #0]
 802f400:	685a      	ldr	r2, [r3, #4]
 802f402:	687b      	ldr	r3, [r7, #4]
 802f404:	681b      	ldr	r3, [r3, #0]
 802f406:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 802f40a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 802f40c:	687b      	ldr	r3, [r7, #4]
 802f40e:	681b      	ldr	r3, [r3, #0]
 802f410:	691a      	ldr	r2, [r3, #16]
 802f412:	687b      	ldr	r3, [r7, #4]
 802f414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802f416:	b2d2      	uxtb	r2, r2
 802f418:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 802f41a:	687b      	ldr	r3, [r7, #4]
 802f41c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802f41e:	1c5a      	adds	r2, r3, #1
 802f420:	687b      	ldr	r3, [r7, #4]
 802f422:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 802f424:	687b      	ldr	r3, [r7, #4]
 802f426:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802f428:	b29b      	uxth	r3, r3
 802f42a:	3b01      	subs	r3, #1
 802f42c:	b29a      	uxth	r2, r3
 802f42e:	687b      	ldr	r3, [r7, #4]
 802f430:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 802f432:	687b      	ldr	r3, [r7, #4]
 802f434:	2220      	movs	r2, #32
 802f436:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 802f43a:	687b      	ldr	r3, [r7, #4]
 802f43c:	2200      	movs	r2, #0
 802f43e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCallback(hi2c);
 802f442:	687b      	ldr	r3, [r7, #4]
 802f444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 802f446:	6878      	ldr	r0, [r7, #4]
 802f448:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 802f44a:	e008      	b.n	802f45e <I2C_MasterReceive_RXNE+0x190>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 802f44c:	687b      	ldr	r3, [r7, #4]
 802f44e:	681b      	ldr	r3, [r3, #0]
 802f450:	685a      	ldr	r2, [r3, #4]
 802f452:	687b      	ldr	r3, [r7, #4]
 802f454:	681b      	ldr	r3, [r3, #0]
 802f456:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 802f45a:	605a      	str	r2, [r3, #4]
}
 802f45c:	e7ff      	b.n	802f45e <I2C_MasterReceive_RXNE+0x190>
 802f45e:	bf00      	nop
 802f460:	3710      	adds	r7, #16
 802f462:	46bd      	mov	sp, r7
 802f464:	bd80      	pop	{r7, pc}

0802f466 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 802f466:	b580      	push	{r7, lr}
 802f468:	b084      	sub	sp, #16
 802f46a:	af00      	add	r7, sp, #0
 802f46c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 802f46e:	687b      	ldr	r3, [r7, #4]
 802f470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802f472:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 802f474:	687b      	ldr	r3, [r7, #4]
 802f476:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802f478:	b29b      	uxth	r3, r3
 802f47a:	2b04      	cmp	r3, #4
 802f47c:	d11b      	bne.n	802f4b6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 802f47e:	687b      	ldr	r3, [r7, #4]
 802f480:	681b      	ldr	r3, [r3, #0]
 802f482:	685a      	ldr	r2, [r3, #4]
 802f484:	687b      	ldr	r3, [r7, #4]
 802f486:	681b      	ldr	r3, [r3, #0]
 802f488:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 802f48c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 802f48e:	687b      	ldr	r3, [r7, #4]
 802f490:	681b      	ldr	r3, [r3, #0]
 802f492:	691a      	ldr	r2, [r3, #16]
 802f494:	687b      	ldr	r3, [r7, #4]
 802f496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802f498:	b2d2      	uxtb	r2, r2
 802f49a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 802f49c:	687b      	ldr	r3, [r7, #4]
 802f49e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802f4a0:	1c5a      	adds	r2, r3, #1
 802f4a2:	687b      	ldr	r3, [r7, #4]
 802f4a4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 802f4a6:	687b      	ldr	r3, [r7, #4]
 802f4a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802f4aa:	b29b      	uxth	r3, r3
 802f4ac:	3b01      	subs	r3, #1
 802f4ae:	b29a      	uxth	r2, r3
 802f4b0:	687b      	ldr	r3, [r7, #4]
 802f4b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 802f4b4:	e0ca      	b.n	802f64c <I2C_MasterReceive_BTF+0x1e6>
  else if (hi2c->XferCount == 3U)
 802f4b6:	687b      	ldr	r3, [r7, #4]
 802f4b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802f4ba:	b29b      	uxth	r3, r3
 802f4bc:	2b03      	cmp	r3, #3
 802f4be:	d129      	bne.n	802f514 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 802f4c0:	687b      	ldr	r3, [r7, #4]
 802f4c2:	681b      	ldr	r3, [r3, #0]
 802f4c4:	685a      	ldr	r2, [r3, #4]
 802f4c6:	687b      	ldr	r3, [r7, #4]
 802f4c8:	681b      	ldr	r3, [r3, #0]
 802f4ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 802f4ce:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 802f4d0:	68fb      	ldr	r3, [r7, #12]
 802f4d2:	2b04      	cmp	r3, #4
 802f4d4:	d00a      	beq.n	802f4ec <I2C_MasterReceive_BTF+0x86>
 802f4d6:	68fb      	ldr	r3, [r7, #12]
 802f4d8:	2b02      	cmp	r3, #2
 802f4da:	d007      	beq.n	802f4ec <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 802f4dc:	687b      	ldr	r3, [r7, #4]
 802f4de:	681b      	ldr	r3, [r3, #0]
 802f4e0:	681a      	ldr	r2, [r3, #0]
 802f4e2:	687b      	ldr	r3, [r7, #4]
 802f4e4:	681b      	ldr	r3, [r3, #0]
 802f4e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 802f4ea:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 802f4ec:	687b      	ldr	r3, [r7, #4]
 802f4ee:	681b      	ldr	r3, [r3, #0]
 802f4f0:	691a      	ldr	r2, [r3, #16]
 802f4f2:	687b      	ldr	r3, [r7, #4]
 802f4f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802f4f6:	b2d2      	uxtb	r2, r2
 802f4f8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 802f4fa:	687b      	ldr	r3, [r7, #4]
 802f4fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802f4fe:	1c5a      	adds	r2, r3, #1
 802f500:	687b      	ldr	r3, [r7, #4]
 802f502:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 802f504:	687b      	ldr	r3, [r7, #4]
 802f506:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802f508:	b29b      	uxth	r3, r3
 802f50a:	3b01      	subs	r3, #1
 802f50c:	b29a      	uxth	r2, r3
 802f50e:	687b      	ldr	r3, [r7, #4]
 802f510:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 802f512:	e09b      	b.n	802f64c <I2C_MasterReceive_BTF+0x1e6>
  else if (hi2c->XferCount == 2U)
 802f514:	687b      	ldr	r3, [r7, #4]
 802f516:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802f518:	b29b      	uxth	r3, r3
 802f51a:	2b02      	cmp	r3, #2
 802f51c:	f040 8083 	bne.w	802f626 <I2C_MasterReceive_BTF+0x1c0>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 802f520:	68fb      	ldr	r3, [r7, #12]
 802f522:	2b01      	cmp	r3, #1
 802f524:	d002      	beq.n	802f52c <I2C_MasterReceive_BTF+0xc6>
 802f526:	68fb      	ldr	r3, [r7, #12]
 802f528:	2b10      	cmp	r3, #16
 802f52a:	d108      	bne.n	802f53e <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 802f52c:	687b      	ldr	r3, [r7, #4]
 802f52e:	681b      	ldr	r3, [r3, #0]
 802f530:	681a      	ldr	r2, [r3, #0]
 802f532:	687b      	ldr	r3, [r7, #4]
 802f534:	681b      	ldr	r3, [r3, #0]
 802f536:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 802f53a:	601a      	str	r2, [r3, #0]
 802f53c:	e019      	b.n	802f572 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 802f53e:	68fb      	ldr	r3, [r7, #12]
 802f540:	2b04      	cmp	r3, #4
 802f542:	d002      	beq.n	802f54a <I2C_MasterReceive_BTF+0xe4>
 802f544:	68fb      	ldr	r3, [r7, #12]
 802f546:	2b02      	cmp	r3, #2
 802f548:	d108      	bne.n	802f55c <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 802f54a:	687b      	ldr	r3, [r7, #4]
 802f54c:	681b      	ldr	r3, [r3, #0]
 802f54e:	681a      	ldr	r2, [r3, #0]
 802f550:	687b      	ldr	r3, [r7, #4]
 802f552:	681b      	ldr	r3, [r3, #0]
 802f554:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 802f558:	601a      	str	r2, [r3, #0]
 802f55a:	e00a      	b.n	802f572 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 802f55c:	68fb      	ldr	r3, [r7, #12]
 802f55e:	2b10      	cmp	r3, #16
 802f560:	d007      	beq.n	802f572 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 802f562:	687b      	ldr	r3, [r7, #4]
 802f564:	681b      	ldr	r3, [r3, #0]
 802f566:	681a      	ldr	r2, [r3, #0]
 802f568:	687b      	ldr	r3, [r7, #4]
 802f56a:	681b      	ldr	r3, [r3, #0]
 802f56c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 802f570:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 802f572:	687b      	ldr	r3, [r7, #4]
 802f574:	681b      	ldr	r3, [r3, #0]
 802f576:	691a      	ldr	r2, [r3, #16]
 802f578:	687b      	ldr	r3, [r7, #4]
 802f57a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802f57c:	b2d2      	uxtb	r2, r2
 802f57e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 802f580:	687b      	ldr	r3, [r7, #4]
 802f582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802f584:	1c5a      	adds	r2, r3, #1
 802f586:	687b      	ldr	r3, [r7, #4]
 802f588:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 802f58a:	687b      	ldr	r3, [r7, #4]
 802f58c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802f58e:	b29b      	uxth	r3, r3
 802f590:	3b01      	subs	r3, #1
 802f592:	b29a      	uxth	r2, r3
 802f594:	687b      	ldr	r3, [r7, #4]
 802f596:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 802f598:	687b      	ldr	r3, [r7, #4]
 802f59a:	681b      	ldr	r3, [r3, #0]
 802f59c:	691a      	ldr	r2, [r3, #16]
 802f59e:	687b      	ldr	r3, [r7, #4]
 802f5a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802f5a2:	b2d2      	uxtb	r2, r2
 802f5a4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 802f5a6:	687b      	ldr	r3, [r7, #4]
 802f5a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802f5aa:	1c5a      	adds	r2, r3, #1
 802f5ac:	687b      	ldr	r3, [r7, #4]
 802f5ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 802f5b0:	687b      	ldr	r3, [r7, #4]
 802f5b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802f5b4:	b29b      	uxth	r3, r3
 802f5b6:	3b01      	subs	r3, #1
 802f5b8:	b29a      	uxth	r2, r3
 802f5ba:	687b      	ldr	r3, [r7, #4]
 802f5bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 802f5be:	687b      	ldr	r3, [r7, #4]
 802f5c0:	681b      	ldr	r3, [r3, #0]
 802f5c2:	685a      	ldr	r2, [r3, #4]
 802f5c4:	687b      	ldr	r3, [r7, #4]
 802f5c6:	681b      	ldr	r3, [r3, #0]
 802f5c8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 802f5cc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 802f5ce:	687b      	ldr	r3, [r7, #4]
 802f5d0:	2220      	movs	r2, #32
 802f5d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 802f5d6:	687b      	ldr	r3, [r7, #4]
 802f5d8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 802f5dc:	b2db      	uxtb	r3, r3
 802f5de:	2b40      	cmp	r3, #64	@ 0x40
 802f5e0:	d10b      	bne.n	802f5fa <I2C_MasterReceive_BTF+0x194>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 802f5e2:	687b      	ldr	r3, [r7, #4]
 802f5e4:	2200      	movs	r2, #0
 802f5e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 802f5ea:	687b      	ldr	r3, [r7, #4]
 802f5ec:	2200      	movs	r2, #0
 802f5ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->MemRxCpltCallback(hi2c);
 802f5f0:	687b      	ldr	r3, [r7, #4]
 802f5f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 802f5f4:	6878      	ldr	r0, [r7, #4]
 802f5f6:	4798      	blx	r3
}
 802f5f8:	e028      	b.n	802f64c <I2C_MasterReceive_BTF+0x1e6>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 802f5fa:	687b      	ldr	r3, [r7, #4]
 802f5fc:	2200      	movs	r2, #0
 802f5fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 802f602:	68fb      	ldr	r3, [r7, #12]
 802f604:	2b08      	cmp	r3, #8
 802f606:	d002      	beq.n	802f60e <I2C_MasterReceive_BTF+0x1a8>
 802f608:	68fb      	ldr	r3, [r7, #12]
 802f60a:	2b20      	cmp	r3, #32
 802f60c:	d103      	bne.n	802f616 <I2C_MasterReceive_BTF+0x1b0>
        hi2c->PreviousState = I2C_STATE_NONE;
 802f60e:	687b      	ldr	r3, [r7, #4]
 802f610:	2200      	movs	r2, #0
 802f612:	631a      	str	r2, [r3, #48]	@ 0x30
 802f614:	e002      	b.n	802f61c <I2C_MasterReceive_BTF+0x1b6>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 802f616:	687b      	ldr	r3, [r7, #4]
 802f618:	2212      	movs	r2, #18
 802f61a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->MasterRxCpltCallback(hi2c);
 802f61c:	687b      	ldr	r3, [r7, #4]
 802f61e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 802f620:	6878      	ldr	r0, [r7, #4]
 802f622:	4798      	blx	r3
}
 802f624:	e012      	b.n	802f64c <I2C_MasterReceive_BTF+0x1e6>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 802f626:	687b      	ldr	r3, [r7, #4]
 802f628:	681b      	ldr	r3, [r3, #0]
 802f62a:	691a      	ldr	r2, [r3, #16]
 802f62c:	687b      	ldr	r3, [r7, #4]
 802f62e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802f630:	b2d2      	uxtb	r2, r2
 802f632:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 802f634:	687b      	ldr	r3, [r7, #4]
 802f636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802f638:	1c5a      	adds	r2, r3, #1
 802f63a:	687b      	ldr	r3, [r7, #4]
 802f63c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 802f63e:	687b      	ldr	r3, [r7, #4]
 802f640:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802f642:	b29b      	uxth	r3, r3
 802f644:	3b01      	subs	r3, #1
 802f646:	b29a      	uxth	r2, r3
 802f648:	687b      	ldr	r3, [r7, #4]
 802f64a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 802f64c:	bf00      	nop
 802f64e:	3710      	adds	r7, #16
 802f650:	46bd      	mov	sp, r7
 802f652:	bd80      	pop	{r7, pc}

0802f654 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 802f654:	b480      	push	{r7}
 802f656:	b083      	sub	sp, #12
 802f658:	af00      	add	r7, sp, #0
 802f65a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 802f65c:	687b      	ldr	r3, [r7, #4]
 802f65e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 802f662:	b2db      	uxtb	r3, r3
 802f664:	2b40      	cmp	r3, #64	@ 0x40
 802f666:	d117      	bne.n	802f698 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 802f668:	687b      	ldr	r3, [r7, #4]
 802f66a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802f66c:	2b00      	cmp	r3, #0
 802f66e:	d109      	bne.n	802f684 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 802f670:	687b      	ldr	r3, [r7, #4]
 802f672:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802f674:	b2db      	uxtb	r3, r3
 802f676:	461a      	mov	r2, r3
 802f678:	687b      	ldr	r3, [r7, #4]
 802f67a:	681b      	ldr	r3, [r3, #0]
 802f67c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 802f680:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 802f682:	e067      	b.n	802f754 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 802f684:	687b      	ldr	r3, [r7, #4]
 802f686:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802f688:	b2db      	uxtb	r3, r3
 802f68a:	f043 0301 	orr.w	r3, r3, #1
 802f68e:	b2da      	uxtb	r2, r3
 802f690:	687b      	ldr	r3, [r7, #4]
 802f692:	681b      	ldr	r3, [r3, #0]
 802f694:	611a      	str	r2, [r3, #16]
}
 802f696:	e05d      	b.n	802f754 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 802f698:	687b      	ldr	r3, [r7, #4]
 802f69a:	691b      	ldr	r3, [r3, #16]
 802f69c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 802f6a0:	d133      	bne.n	802f70a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 802f6a2:	687b      	ldr	r3, [r7, #4]
 802f6a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 802f6a8:	b2db      	uxtb	r3, r3
 802f6aa:	2b21      	cmp	r3, #33	@ 0x21
 802f6ac:	d109      	bne.n	802f6c2 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 802f6ae:	687b      	ldr	r3, [r7, #4]
 802f6b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802f6b2:	b2db      	uxtb	r3, r3
 802f6b4:	461a      	mov	r2, r3
 802f6b6:	687b      	ldr	r3, [r7, #4]
 802f6b8:	681b      	ldr	r3, [r3, #0]
 802f6ba:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 802f6be:	611a      	str	r2, [r3, #16]
 802f6c0:	e008      	b.n	802f6d4 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 802f6c2:	687b      	ldr	r3, [r7, #4]
 802f6c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802f6c6:	b2db      	uxtb	r3, r3
 802f6c8:	f043 0301 	orr.w	r3, r3, #1
 802f6cc:	b2da      	uxtb	r2, r3
 802f6ce:	687b      	ldr	r3, [r7, #4]
 802f6d0:	681b      	ldr	r3, [r3, #0]
 802f6d2:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 802f6d4:	687b      	ldr	r3, [r7, #4]
 802f6d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802f6d8:	2b00      	cmp	r3, #0
 802f6da:	d004      	beq.n	802f6e6 <I2C_Master_SB+0x92>
 802f6dc:	687b      	ldr	r3, [r7, #4]
 802f6de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802f6e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802f6e2:	2b00      	cmp	r3, #0
 802f6e4:	d108      	bne.n	802f6f8 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 802f6e6:	687b      	ldr	r3, [r7, #4]
 802f6e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802f6ea:	2b00      	cmp	r3, #0
 802f6ec:	d032      	beq.n	802f754 <I2C_Master_SB+0x100>
 802f6ee:	687b      	ldr	r3, [r7, #4]
 802f6f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802f6f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802f6f4:	2b00      	cmp	r3, #0
 802f6f6:	d02d      	beq.n	802f754 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 802f6f8:	687b      	ldr	r3, [r7, #4]
 802f6fa:	681b      	ldr	r3, [r3, #0]
 802f6fc:	685a      	ldr	r2, [r3, #4]
 802f6fe:	687b      	ldr	r3, [r7, #4]
 802f700:	681b      	ldr	r3, [r3, #0]
 802f702:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 802f706:	605a      	str	r2, [r3, #4]
}
 802f708:	e024      	b.n	802f754 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 802f70a:	687b      	ldr	r3, [r7, #4]
 802f70c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802f70e:	2b00      	cmp	r3, #0
 802f710:	d10e      	bne.n	802f730 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 802f712:	687b      	ldr	r3, [r7, #4]
 802f714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802f716:	b29b      	uxth	r3, r3
 802f718:	11db      	asrs	r3, r3, #7
 802f71a:	b2db      	uxtb	r3, r3
 802f71c:	f003 0306 	and.w	r3, r3, #6
 802f720:	b2db      	uxtb	r3, r3
 802f722:	f063 030f 	orn	r3, r3, #15
 802f726:	b2da      	uxtb	r2, r3
 802f728:	687b      	ldr	r3, [r7, #4]
 802f72a:	681b      	ldr	r3, [r3, #0]
 802f72c:	611a      	str	r2, [r3, #16]
}
 802f72e:	e011      	b.n	802f754 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 802f730:	687b      	ldr	r3, [r7, #4]
 802f732:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802f734:	2b01      	cmp	r3, #1
 802f736:	d10d      	bne.n	802f754 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 802f738:	687b      	ldr	r3, [r7, #4]
 802f73a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802f73c:	b29b      	uxth	r3, r3
 802f73e:	11db      	asrs	r3, r3, #7
 802f740:	b2db      	uxtb	r3, r3
 802f742:	f003 0306 	and.w	r3, r3, #6
 802f746:	b2db      	uxtb	r3, r3
 802f748:	f063 030e 	orn	r3, r3, #14
 802f74c:	b2da      	uxtb	r2, r3
 802f74e:	687b      	ldr	r3, [r7, #4]
 802f750:	681b      	ldr	r3, [r3, #0]
 802f752:	611a      	str	r2, [r3, #16]
}
 802f754:	bf00      	nop
 802f756:	370c      	adds	r7, #12
 802f758:	46bd      	mov	sp, r7
 802f75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f75e:	4770      	bx	lr

0802f760 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 802f760:	b480      	push	{r7}
 802f762:	b083      	sub	sp, #12
 802f764:	af00      	add	r7, sp, #0
 802f766:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 802f768:	687b      	ldr	r3, [r7, #4]
 802f76a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802f76c:	b2da      	uxtb	r2, r3
 802f76e:	687b      	ldr	r3, [r7, #4]
 802f770:	681b      	ldr	r3, [r3, #0]
 802f772:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 802f774:	687b      	ldr	r3, [r7, #4]
 802f776:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802f778:	2b00      	cmp	r3, #0
 802f77a:	d004      	beq.n	802f786 <I2C_Master_ADD10+0x26>
 802f77c:	687b      	ldr	r3, [r7, #4]
 802f77e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802f780:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802f782:	2b00      	cmp	r3, #0
 802f784:	d108      	bne.n	802f798 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 802f786:	687b      	ldr	r3, [r7, #4]
 802f788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802f78a:	2b00      	cmp	r3, #0
 802f78c:	d00c      	beq.n	802f7a8 <I2C_Master_ADD10+0x48>
 802f78e:	687b      	ldr	r3, [r7, #4]
 802f790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802f792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802f794:	2b00      	cmp	r3, #0
 802f796:	d007      	beq.n	802f7a8 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 802f798:	687b      	ldr	r3, [r7, #4]
 802f79a:	681b      	ldr	r3, [r3, #0]
 802f79c:	685a      	ldr	r2, [r3, #4]
 802f79e:	687b      	ldr	r3, [r7, #4]
 802f7a0:	681b      	ldr	r3, [r3, #0]
 802f7a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 802f7a6:	605a      	str	r2, [r3, #4]
  }
}
 802f7a8:	bf00      	nop
 802f7aa:	370c      	adds	r7, #12
 802f7ac:	46bd      	mov	sp, r7
 802f7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f7b2:	4770      	bx	lr

0802f7b4 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 802f7b4:	b480      	push	{r7}
 802f7b6:	b091      	sub	sp, #68	@ 0x44
 802f7b8:	af00      	add	r7, sp, #0
 802f7ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 802f7bc:	687b      	ldr	r3, [r7, #4]
 802f7be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 802f7c2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 802f7c6:	687b      	ldr	r3, [r7, #4]
 802f7c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802f7ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 802f7cc:	687b      	ldr	r3, [r7, #4]
 802f7ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802f7d0:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 802f7d2:	687b      	ldr	r3, [r7, #4]
 802f7d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 802f7d8:	b2db      	uxtb	r3, r3
 802f7da:	2b22      	cmp	r3, #34	@ 0x22
 802f7dc:	f040 8169 	bne.w	802fab2 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 802f7e0:	687b      	ldr	r3, [r7, #4]
 802f7e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802f7e4:	2b00      	cmp	r3, #0
 802f7e6:	d10f      	bne.n	802f808 <I2C_Master_ADDR+0x54>
 802f7e8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 802f7ec:	2b40      	cmp	r3, #64	@ 0x40
 802f7ee:	d10b      	bne.n	802f808 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 802f7f0:	2300      	movs	r3, #0
 802f7f2:	633b      	str	r3, [r7, #48]	@ 0x30
 802f7f4:	687b      	ldr	r3, [r7, #4]
 802f7f6:	681b      	ldr	r3, [r3, #0]
 802f7f8:	695b      	ldr	r3, [r3, #20]
 802f7fa:	633b      	str	r3, [r7, #48]	@ 0x30
 802f7fc:	687b      	ldr	r3, [r7, #4]
 802f7fe:	681b      	ldr	r3, [r3, #0]
 802f800:	699b      	ldr	r3, [r3, #24]
 802f802:	633b      	str	r3, [r7, #48]	@ 0x30
 802f804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802f806:	e160      	b.n	802faca <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 802f808:	687b      	ldr	r3, [r7, #4]
 802f80a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802f80c:	2b00      	cmp	r3, #0
 802f80e:	d11d      	bne.n	802f84c <I2C_Master_ADDR+0x98>
 802f810:	687b      	ldr	r3, [r7, #4]
 802f812:	691b      	ldr	r3, [r3, #16]
 802f814:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 802f818:	d118      	bne.n	802f84c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 802f81a:	2300      	movs	r3, #0
 802f81c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802f81e:	687b      	ldr	r3, [r7, #4]
 802f820:	681b      	ldr	r3, [r3, #0]
 802f822:	695b      	ldr	r3, [r3, #20]
 802f824:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802f826:	687b      	ldr	r3, [r7, #4]
 802f828:	681b      	ldr	r3, [r3, #0]
 802f82a:	699b      	ldr	r3, [r3, #24]
 802f82c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802f82e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 802f830:	687b      	ldr	r3, [r7, #4]
 802f832:	681b      	ldr	r3, [r3, #0]
 802f834:	681a      	ldr	r2, [r3, #0]
 802f836:	687b      	ldr	r3, [r7, #4]
 802f838:	681b      	ldr	r3, [r3, #0]
 802f83a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 802f83e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 802f840:	687b      	ldr	r3, [r7, #4]
 802f842:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802f844:	1c5a      	adds	r2, r3, #1
 802f846:	687b      	ldr	r3, [r7, #4]
 802f848:	651a      	str	r2, [r3, #80]	@ 0x50
 802f84a:	e13e      	b.n	802faca <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 802f84c:	687b      	ldr	r3, [r7, #4]
 802f84e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802f850:	b29b      	uxth	r3, r3
 802f852:	2b00      	cmp	r3, #0
 802f854:	d113      	bne.n	802f87e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 802f856:	2300      	movs	r3, #0
 802f858:	62bb      	str	r3, [r7, #40]	@ 0x28
 802f85a:	687b      	ldr	r3, [r7, #4]
 802f85c:	681b      	ldr	r3, [r3, #0]
 802f85e:	695b      	ldr	r3, [r3, #20]
 802f860:	62bb      	str	r3, [r7, #40]	@ 0x28
 802f862:	687b      	ldr	r3, [r7, #4]
 802f864:	681b      	ldr	r3, [r3, #0]
 802f866:	699b      	ldr	r3, [r3, #24]
 802f868:	62bb      	str	r3, [r7, #40]	@ 0x28
 802f86a:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 802f86c:	687b      	ldr	r3, [r7, #4]
 802f86e:	681b      	ldr	r3, [r3, #0]
 802f870:	681a      	ldr	r2, [r3, #0]
 802f872:	687b      	ldr	r3, [r7, #4]
 802f874:	681b      	ldr	r3, [r3, #0]
 802f876:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 802f87a:	601a      	str	r2, [r3, #0]
 802f87c:	e115      	b.n	802faaa <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 802f87e:	687b      	ldr	r3, [r7, #4]
 802f880:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802f882:	b29b      	uxth	r3, r3
 802f884:	2b01      	cmp	r3, #1
 802f886:	f040 808a 	bne.w	802f99e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 802f88a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802f88c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 802f890:	d137      	bne.n	802f902 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 802f892:	687b      	ldr	r3, [r7, #4]
 802f894:	681b      	ldr	r3, [r3, #0]
 802f896:	681a      	ldr	r2, [r3, #0]
 802f898:	687b      	ldr	r3, [r7, #4]
 802f89a:	681b      	ldr	r3, [r3, #0]
 802f89c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 802f8a0:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 802f8a2:	687b      	ldr	r3, [r7, #4]
 802f8a4:	681b      	ldr	r3, [r3, #0]
 802f8a6:	685b      	ldr	r3, [r3, #4]
 802f8a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 802f8ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 802f8b0:	d113      	bne.n	802f8da <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 802f8b2:	687b      	ldr	r3, [r7, #4]
 802f8b4:	681b      	ldr	r3, [r3, #0]
 802f8b6:	681a      	ldr	r2, [r3, #0]
 802f8b8:	687b      	ldr	r3, [r7, #4]
 802f8ba:	681b      	ldr	r3, [r3, #0]
 802f8bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 802f8c0:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 802f8c2:	2300      	movs	r3, #0
 802f8c4:	627b      	str	r3, [r7, #36]	@ 0x24
 802f8c6:	687b      	ldr	r3, [r7, #4]
 802f8c8:	681b      	ldr	r3, [r3, #0]
 802f8ca:	695b      	ldr	r3, [r3, #20]
 802f8cc:	627b      	str	r3, [r7, #36]	@ 0x24
 802f8ce:	687b      	ldr	r3, [r7, #4]
 802f8d0:	681b      	ldr	r3, [r3, #0]
 802f8d2:	699b      	ldr	r3, [r3, #24]
 802f8d4:	627b      	str	r3, [r7, #36]	@ 0x24
 802f8d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802f8d8:	e0e7      	b.n	802faaa <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 802f8da:	2300      	movs	r3, #0
 802f8dc:	623b      	str	r3, [r7, #32]
 802f8de:	687b      	ldr	r3, [r7, #4]
 802f8e0:	681b      	ldr	r3, [r3, #0]
 802f8e2:	695b      	ldr	r3, [r3, #20]
 802f8e4:	623b      	str	r3, [r7, #32]
 802f8e6:	687b      	ldr	r3, [r7, #4]
 802f8e8:	681b      	ldr	r3, [r3, #0]
 802f8ea:	699b      	ldr	r3, [r3, #24]
 802f8ec:	623b      	str	r3, [r7, #32]
 802f8ee:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 802f8f0:	687b      	ldr	r3, [r7, #4]
 802f8f2:	681b      	ldr	r3, [r3, #0]
 802f8f4:	681a      	ldr	r2, [r3, #0]
 802f8f6:	687b      	ldr	r3, [r7, #4]
 802f8f8:	681b      	ldr	r3, [r3, #0]
 802f8fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 802f8fe:	601a      	str	r2, [r3, #0]
 802f900:	e0d3      	b.n	802faaa <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 802f902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802f904:	2b08      	cmp	r3, #8
 802f906:	d02e      	beq.n	802f966 <I2C_Master_ADDR+0x1b2>
 802f908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802f90a:	2b20      	cmp	r3, #32
 802f90c:	d02b      	beq.n	802f966 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 802f90e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802f910:	2b12      	cmp	r3, #18
 802f912:	d102      	bne.n	802f91a <I2C_Master_ADDR+0x166>
 802f914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802f916:	2b01      	cmp	r3, #1
 802f918:	d125      	bne.n	802f966 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 802f91a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802f91c:	2b04      	cmp	r3, #4
 802f91e:	d00e      	beq.n	802f93e <I2C_Master_ADDR+0x18a>
 802f920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802f922:	2b02      	cmp	r3, #2
 802f924:	d00b      	beq.n	802f93e <I2C_Master_ADDR+0x18a>
 802f926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802f928:	2b10      	cmp	r3, #16
 802f92a:	d008      	beq.n	802f93e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 802f92c:	687b      	ldr	r3, [r7, #4]
 802f92e:	681b      	ldr	r3, [r3, #0]
 802f930:	681a      	ldr	r2, [r3, #0]
 802f932:	687b      	ldr	r3, [r7, #4]
 802f934:	681b      	ldr	r3, [r3, #0]
 802f936:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 802f93a:	601a      	str	r2, [r3, #0]
 802f93c:	e007      	b.n	802f94e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 802f93e:	687b      	ldr	r3, [r7, #4]
 802f940:	681b      	ldr	r3, [r3, #0]
 802f942:	681a      	ldr	r2, [r3, #0]
 802f944:	687b      	ldr	r3, [r7, #4]
 802f946:	681b      	ldr	r3, [r3, #0]
 802f948:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 802f94c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 802f94e:	2300      	movs	r3, #0
 802f950:	61fb      	str	r3, [r7, #28]
 802f952:	687b      	ldr	r3, [r7, #4]
 802f954:	681b      	ldr	r3, [r3, #0]
 802f956:	695b      	ldr	r3, [r3, #20]
 802f958:	61fb      	str	r3, [r7, #28]
 802f95a:	687b      	ldr	r3, [r7, #4]
 802f95c:	681b      	ldr	r3, [r3, #0]
 802f95e:	699b      	ldr	r3, [r3, #24]
 802f960:	61fb      	str	r3, [r7, #28]
 802f962:	69fb      	ldr	r3, [r7, #28]
 802f964:	e0a1      	b.n	802faaa <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 802f966:	687b      	ldr	r3, [r7, #4]
 802f968:	681b      	ldr	r3, [r3, #0]
 802f96a:	681a      	ldr	r2, [r3, #0]
 802f96c:	687b      	ldr	r3, [r7, #4]
 802f96e:	681b      	ldr	r3, [r3, #0]
 802f970:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 802f974:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 802f976:	2300      	movs	r3, #0
 802f978:	61bb      	str	r3, [r7, #24]
 802f97a:	687b      	ldr	r3, [r7, #4]
 802f97c:	681b      	ldr	r3, [r3, #0]
 802f97e:	695b      	ldr	r3, [r3, #20]
 802f980:	61bb      	str	r3, [r7, #24]
 802f982:	687b      	ldr	r3, [r7, #4]
 802f984:	681b      	ldr	r3, [r3, #0]
 802f986:	699b      	ldr	r3, [r3, #24]
 802f988:	61bb      	str	r3, [r7, #24]
 802f98a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 802f98c:	687b      	ldr	r3, [r7, #4]
 802f98e:	681b      	ldr	r3, [r3, #0]
 802f990:	681a      	ldr	r2, [r3, #0]
 802f992:	687b      	ldr	r3, [r7, #4]
 802f994:	681b      	ldr	r3, [r3, #0]
 802f996:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 802f99a:	601a      	str	r2, [r3, #0]
 802f99c:	e085      	b.n	802faaa <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 802f99e:	687b      	ldr	r3, [r7, #4]
 802f9a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802f9a2:	b29b      	uxth	r3, r3
 802f9a4:	2b02      	cmp	r3, #2
 802f9a6:	d14d      	bne.n	802fa44 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 802f9a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802f9aa:	2b04      	cmp	r3, #4
 802f9ac:	d016      	beq.n	802f9dc <I2C_Master_ADDR+0x228>
 802f9ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802f9b0:	2b02      	cmp	r3, #2
 802f9b2:	d013      	beq.n	802f9dc <I2C_Master_ADDR+0x228>
 802f9b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802f9b6:	2b10      	cmp	r3, #16
 802f9b8:	d010      	beq.n	802f9dc <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 802f9ba:	687b      	ldr	r3, [r7, #4]
 802f9bc:	681b      	ldr	r3, [r3, #0]
 802f9be:	681a      	ldr	r2, [r3, #0]
 802f9c0:	687b      	ldr	r3, [r7, #4]
 802f9c2:	681b      	ldr	r3, [r3, #0]
 802f9c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 802f9c8:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 802f9ca:	687b      	ldr	r3, [r7, #4]
 802f9cc:	681b      	ldr	r3, [r3, #0]
 802f9ce:	681a      	ldr	r2, [r3, #0]
 802f9d0:	687b      	ldr	r3, [r7, #4]
 802f9d2:	681b      	ldr	r3, [r3, #0]
 802f9d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 802f9d8:	601a      	str	r2, [r3, #0]
 802f9da:	e007      	b.n	802f9ec <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 802f9dc:	687b      	ldr	r3, [r7, #4]
 802f9de:	681b      	ldr	r3, [r3, #0]
 802f9e0:	681a      	ldr	r2, [r3, #0]
 802f9e2:	687b      	ldr	r3, [r7, #4]
 802f9e4:	681b      	ldr	r3, [r3, #0]
 802f9e6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 802f9ea:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 802f9ec:	687b      	ldr	r3, [r7, #4]
 802f9ee:	681b      	ldr	r3, [r3, #0]
 802f9f0:	685b      	ldr	r3, [r3, #4]
 802f9f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 802f9f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 802f9fa:	d117      	bne.n	802fa2c <I2C_Master_ADDR+0x278>
 802f9fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802f9fe:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 802fa02:	d00b      	beq.n	802fa1c <I2C_Master_ADDR+0x268>
 802fa04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802fa06:	2b01      	cmp	r3, #1
 802fa08:	d008      	beq.n	802fa1c <I2C_Master_ADDR+0x268>
 802fa0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802fa0c:	2b08      	cmp	r3, #8
 802fa0e:	d005      	beq.n	802fa1c <I2C_Master_ADDR+0x268>
 802fa10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802fa12:	2b10      	cmp	r3, #16
 802fa14:	d002      	beq.n	802fa1c <I2C_Master_ADDR+0x268>
 802fa16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802fa18:	2b20      	cmp	r3, #32
 802fa1a:	d107      	bne.n	802fa2c <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 802fa1c:	687b      	ldr	r3, [r7, #4]
 802fa1e:	681b      	ldr	r3, [r3, #0]
 802fa20:	685a      	ldr	r2, [r3, #4]
 802fa22:	687b      	ldr	r3, [r7, #4]
 802fa24:	681b      	ldr	r3, [r3, #0]
 802fa26:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 802fa2a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 802fa2c:	2300      	movs	r3, #0
 802fa2e:	617b      	str	r3, [r7, #20]
 802fa30:	687b      	ldr	r3, [r7, #4]
 802fa32:	681b      	ldr	r3, [r3, #0]
 802fa34:	695b      	ldr	r3, [r3, #20]
 802fa36:	617b      	str	r3, [r7, #20]
 802fa38:	687b      	ldr	r3, [r7, #4]
 802fa3a:	681b      	ldr	r3, [r3, #0]
 802fa3c:	699b      	ldr	r3, [r3, #24]
 802fa3e:	617b      	str	r3, [r7, #20]
 802fa40:	697b      	ldr	r3, [r7, #20]
 802fa42:	e032      	b.n	802faaa <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 802fa44:	687b      	ldr	r3, [r7, #4]
 802fa46:	681b      	ldr	r3, [r3, #0]
 802fa48:	681a      	ldr	r2, [r3, #0]
 802fa4a:	687b      	ldr	r3, [r7, #4]
 802fa4c:	681b      	ldr	r3, [r3, #0]
 802fa4e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 802fa52:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 802fa54:	687b      	ldr	r3, [r7, #4]
 802fa56:	681b      	ldr	r3, [r3, #0]
 802fa58:	685b      	ldr	r3, [r3, #4]
 802fa5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 802fa5e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 802fa62:	d117      	bne.n	802fa94 <I2C_Master_ADDR+0x2e0>
 802fa64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802fa66:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 802fa6a:	d00b      	beq.n	802fa84 <I2C_Master_ADDR+0x2d0>
 802fa6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802fa6e:	2b01      	cmp	r3, #1
 802fa70:	d008      	beq.n	802fa84 <I2C_Master_ADDR+0x2d0>
 802fa72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802fa74:	2b08      	cmp	r3, #8
 802fa76:	d005      	beq.n	802fa84 <I2C_Master_ADDR+0x2d0>
 802fa78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802fa7a:	2b10      	cmp	r3, #16
 802fa7c:	d002      	beq.n	802fa84 <I2C_Master_ADDR+0x2d0>
 802fa7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802fa80:	2b20      	cmp	r3, #32
 802fa82:	d107      	bne.n	802fa94 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 802fa84:	687b      	ldr	r3, [r7, #4]
 802fa86:	681b      	ldr	r3, [r3, #0]
 802fa88:	685a      	ldr	r2, [r3, #4]
 802fa8a:	687b      	ldr	r3, [r7, #4]
 802fa8c:	681b      	ldr	r3, [r3, #0]
 802fa8e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 802fa92:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 802fa94:	2300      	movs	r3, #0
 802fa96:	613b      	str	r3, [r7, #16]
 802fa98:	687b      	ldr	r3, [r7, #4]
 802fa9a:	681b      	ldr	r3, [r3, #0]
 802fa9c:	695b      	ldr	r3, [r3, #20]
 802fa9e:	613b      	str	r3, [r7, #16]
 802faa0:	687b      	ldr	r3, [r7, #4]
 802faa2:	681b      	ldr	r3, [r3, #0]
 802faa4:	699b      	ldr	r3, [r3, #24]
 802faa6:	613b      	str	r3, [r7, #16]
 802faa8:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 802faaa:	687b      	ldr	r3, [r7, #4]
 802faac:	2200      	movs	r2, #0
 802faae:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 802fab0:	e00b      	b.n	802faca <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 802fab2:	2300      	movs	r3, #0
 802fab4:	60fb      	str	r3, [r7, #12]
 802fab6:	687b      	ldr	r3, [r7, #4]
 802fab8:	681b      	ldr	r3, [r3, #0]
 802faba:	695b      	ldr	r3, [r3, #20]
 802fabc:	60fb      	str	r3, [r7, #12]
 802fabe:	687b      	ldr	r3, [r7, #4]
 802fac0:	681b      	ldr	r3, [r3, #0]
 802fac2:	699b      	ldr	r3, [r3, #24]
 802fac4:	60fb      	str	r3, [r7, #12]
 802fac6:	68fb      	ldr	r3, [r7, #12]
}
 802fac8:	e7ff      	b.n	802faca <I2C_Master_ADDR+0x316>
 802faca:	bf00      	nop
 802facc:	3744      	adds	r7, #68	@ 0x44
 802face:	46bd      	mov	sp, r7
 802fad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802fad4:	4770      	bx	lr

0802fad6 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 802fad6:	b580      	push	{r7, lr}
 802fad8:	b084      	sub	sp, #16
 802fada:	af00      	add	r7, sp, #0
 802fadc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 802fade:	687b      	ldr	r3, [r7, #4]
 802fae0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 802fae4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 802fae6:	687b      	ldr	r3, [r7, #4]
 802fae8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802faea:	b29b      	uxth	r3, r3
 802faec:	2b00      	cmp	r3, #0
 802faee:	d02c      	beq.n	802fb4a <I2C_SlaveTransmit_TXE+0x74>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 802faf0:	687b      	ldr	r3, [r7, #4]
 802faf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802faf4:	781a      	ldrb	r2, [r3, #0]
 802faf6:	687b      	ldr	r3, [r7, #4]
 802faf8:	681b      	ldr	r3, [r3, #0]
 802fafa:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 802fafc:	687b      	ldr	r3, [r7, #4]
 802fafe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802fb00:	1c5a      	adds	r2, r3, #1
 802fb02:	687b      	ldr	r3, [r7, #4]
 802fb04:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 802fb06:	687b      	ldr	r3, [r7, #4]
 802fb08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802fb0a:	b29b      	uxth	r3, r3
 802fb0c:	3b01      	subs	r3, #1
 802fb0e:	b29a      	uxth	r2, r3
 802fb10:	687b      	ldr	r3, [r7, #4]
 802fb12:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 802fb14:	687b      	ldr	r3, [r7, #4]
 802fb16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802fb18:	b29b      	uxth	r3, r3
 802fb1a:	2b00      	cmp	r3, #0
 802fb1c:	d115      	bne.n	802fb4a <I2C_SlaveTransmit_TXE+0x74>
 802fb1e:	7bfb      	ldrb	r3, [r7, #15]
 802fb20:	2b29      	cmp	r3, #41	@ 0x29
 802fb22:	d112      	bne.n	802fb4a <I2C_SlaveTransmit_TXE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 802fb24:	687b      	ldr	r3, [r7, #4]
 802fb26:	681b      	ldr	r3, [r3, #0]
 802fb28:	685a      	ldr	r2, [r3, #4]
 802fb2a:	687b      	ldr	r3, [r7, #4]
 802fb2c:	681b      	ldr	r3, [r3, #0]
 802fb2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 802fb32:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 802fb34:	687b      	ldr	r3, [r7, #4]
 802fb36:	2221      	movs	r2, #33	@ 0x21
 802fb38:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 802fb3a:	687b      	ldr	r3, [r7, #4]
 802fb3c:	2228      	movs	r2, #40	@ 0x28
 802fb3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
 802fb42:	687b      	ldr	r3, [r7, #4]
 802fb44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 802fb46:	6878      	ldr	r0, [r7, #4]
 802fb48:	4798      	blx	r3
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 802fb4a:	bf00      	nop
 802fb4c:	3710      	adds	r7, #16
 802fb4e:	46bd      	mov	sp, r7
 802fb50:	bd80      	pop	{r7, pc}

0802fb52 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 802fb52:	b480      	push	{r7}
 802fb54:	b083      	sub	sp, #12
 802fb56:	af00      	add	r7, sp, #0
 802fb58:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 802fb5a:	687b      	ldr	r3, [r7, #4]
 802fb5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802fb5e:	b29b      	uxth	r3, r3
 802fb60:	2b00      	cmp	r3, #0
 802fb62:	d011      	beq.n	802fb88 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 802fb64:	687b      	ldr	r3, [r7, #4]
 802fb66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802fb68:	781a      	ldrb	r2, [r3, #0]
 802fb6a:	687b      	ldr	r3, [r7, #4]
 802fb6c:	681b      	ldr	r3, [r3, #0]
 802fb6e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 802fb70:	687b      	ldr	r3, [r7, #4]
 802fb72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802fb74:	1c5a      	adds	r2, r3, #1
 802fb76:	687b      	ldr	r3, [r7, #4]
 802fb78:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 802fb7a:	687b      	ldr	r3, [r7, #4]
 802fb7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802fb7e:	b29b      	uxth	r3, r3
 802fb80:	3b01      	subs	r3, #1
 802fb82:	b29a      	uxth	r2, r3
 802fb84:	687b      	ldr	r3, [r7, #4]
 802fb86:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 802fb88:	bf00      	nop
 802fb8a:	370c      	adds	r7, #12
 802fb8c:	46bd      	mov	sp, r7
 802fb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802fb92:	4770      	bx	lr

0802fb94 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 802fb94:	b580      	push	{r7, lr}
 802fb96:	b084      	sub	sp, #16
 802fb98:	af00      	add	r7, sp, #0
 802fb9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 802fb9c:	687b      	ldr	r3, [r7, #4]
 802fb9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 802fba2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 802fba4:	687b      	ldr	r3, [r7, #4]
 802fba6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802fba8:	b29b      	uxth	r3, r3
 802fbaa:	2b00      	cmp	r3, #0
 802fbac:	d02d      	beq.n	802fc0a <I2C_SlaveReceive_RXNE+0x76>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 802fbae:	687b      	ldr	r3, [r7, #4]
 802fbb0:	681b      	ldr	r3, [r3, #0]
 802fbb2:	691a      	ldr	r2, [r3, #16]
 802fbb4:	687b      	ldr	r3, [r7, #4]
 802fbb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802fbb8:	b2d2      	uxtb	r2, r2
 802fbba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 802fbbc:	687b      	ldr	r3, [r7, #4]
 802fbbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802fbc0:	1c5a      	adds	r2, r3, #1
 802fbc2:	687b      	ldr	r3, [r7, #4]
 802fbc4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 802fbc6:	687b      	ldr	r3, [r7, #4]
 802fbc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802fbca:	b29b      	uxth	r3, r3
 802fbcc:	3b01      	subs	r3, #1
 802fbce:	b29a      	uxth	r2, r3
 802fbd0:	687b      	ldr	r3, [r7, #4]
 802fbd2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 802fbd4:	687b      	ldr	r3, [r7, #4]
 802fbd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802fbd8:	b29b      	uxth	r3, r3
 802fbda:	2b00      	cmp	r3, #0
 802fbdc:	d115      	bne.n	802fc0a <I2C_SlaveReceive_RXNE+0x76>
 802fbde:	7bfb      	ldrb	r3, [r7, #15]
 802fbe0:	2b2a      	cmp	r3, #42	@ 0x2a
 802fbe2:	d112      	bne.n	802fc0a <I2C_SlaveReceive_RXNE+0x76>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 802fbe4:	687b      	ldr	r3, [r7, #4]
 802fbe6:	681b      	ldr	r3, [r3, #0]
 802fbe8:	685a      	ldr	r2, [r3, #4]
 802fbea:	687b      	ldr	r3, [r7, #4]
 802fbec:	681b      	ldr	r3, [r3, #0]
 802fbee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 802fbf2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 802fbf4:	687b      	ldr	r3, [r7, #4]
 802fbf6:	2222      	movs	r2, #34	@ 0x22
 802fbf8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 802fbfa:	687b      	ldr	r3, [r7, #4]
 802fbfc:	2228      	movs	r2, #40	@ 0x28
 802fbfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
 802fc02:	687b      	ldr	r3, [r7, #4]
 802fc04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 802fc06:	6878      	ldr	r0, [r7, #4]
 802fc08:	4798      	blx	r3
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 802fc0a:	bf00      	nop
 802fc0c:	3710      	adds	r7, #16
 802fc0e:	46bd      	mov	sp, r7
 802fc10:	bd80      	pop	{r7, pc}

0802fc12 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 802fc12:	b480      	push	{r7}
 802fc14:	b083      	sub	sp, #12
 802fc16:	af00      	add	r7, sp, #0
 802fc18:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 802fc1a:	687b      	ldr	r3, [r7, #4]
 802fc1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802fc1e:	b29b      	uxth	r3, r3
 802fc20:	2b00      	cmp	r3, #0
 802fc22:	d012      	beq.n	802fc4a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 802fc24:	687b      	ldr	r3, [r7, #4]
 802fc26:	681b      	ldr	r3, [r3, #0]
 802fc28:	691a      	ldr	r2, [r3, #16]
 802fc2a:	687b      	ldr	r3, [r7, #4]
 802fc2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802fc2e:	b2d2      	uxtb	r2, r2
 802fc30:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 802fc32:	687b      	ldr	r3, [r7, #4]
 802fc34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802fc36:	1c5a      	adds	r2, r3, #1
 802fc38:	687b      	ldr	r3, [r7, #4]
 802fc3a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 802fc3c:	687b      	ldr	r3, [r7, #4]
 802fc3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802fc40:	b29b      	uxth	r3, r3
 802fc42:	3b01      	subs	r3, #1
 802fc44:	b29a      	uxth	r2, r3
 802fc46:	687b      	ldr	r3, [r7, #4]
 802fc48:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 802fc4a:	bf00      	nop
 802fc4c:	370c      	adds	r7, #12
 802fc4e:	46bd      	mov	sp, r7
 802fc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 802fc54:	4770      	bx	lr

0802fc56 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 802fc56:	b580      	push	{r7, lr}
 802fc58:	b084      	sub	sp, #16
 802fc5a:	af00      	add	r7, sp, #0
 802fc5c:	6078      	str	r0, [r7, #4]
 802fc5e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 802fc60:	2300      	movs	r3, #0
 802fc62:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 802fc64:	687b      	ldr	r3, [r7, #4]
 802fc66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 802fc6a:	b2db      	uxtb	r3, r3
 802fc6c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 802fc70:	2b28      	cmp	r3, #40	@ 0x28
 802fc72:	d125      	bne.n	802fcc0 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 802fc74:	687b      	ldr	r3, [r7, #4]
 802fc76:	681b      	ldr	r3, [r3, #0]
 802fc78:	685a      	ldr	r2, [r3, #4]
 802fc7a:	687b      	ldr	r3, [r7, #4]
 802fc7c:	681b      	ldr	r3, [r3, #0]
 802fc7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 802fc82:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 802fc84:	683b      	ldr	r3, [r7, #0]
 802fc86:	f003 0304 	and.w	r3, r3, #4
 802fc8a:	2b00      	cmp	r3, #0
 802fc8c:	d101      	bne.n	802fc92 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 802fc8e:	2301      	movs	r3, #1
 802fc90:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 802fc92:	683b      	ldr	r3, [r7, #0]
 802fc94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 802fc98:	2b00      	cmp	r3, #0
 802fc9a:	d103      	bne.n	802fca4 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 802fc9c:	687b      	ldr	r3, [r7, #4]
 802fc9e:	68db      	ldr	r3, [r3, #12]
 802fca0:	81bb      	strh	r3, [r7, #12]
 802fca2:	e002      	b.n	802fcaa <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 802fca4:	687b      	ldr	r3, [r7, #4]
 802fca6:	699b      	ldr	r3, [r3, #24]
 802fca8:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 802fcaa:	687b      	ldr	r3, [r7, #4]
 802fcac:	2200      	movs	r2, #0
 802fcae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 802fcb2:	687b      	ldr	r3, [r7, #4]
 802fcb4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 802fcb6:	89ba      	ldrh	r2, [r7, #12]
 802fcb8:	7bf9      	ldrb	r1, [r7, #15]
 802fcba:	6878      	ldr	r0, [r7, #4]
 802fcbc:	4798      	blx	r3
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 802fcbe:	e00e      	b.n	802fcde <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 802fcc0:	2300      	movs	r3, #0
 802fcc2:	60bb      	str	r3, [r7, #8]
 802fcc4:	687b      	ldr	r3, [r7, #4]
 802fcc6:	681b      	ldr	r3, [r3, #0]
 802fcc8:	695b      	ldr	r3, [r3, #20]
 802fcca:	60bb      	str	r3, [r7, #8]
 802fccc:	687b      	ldr	r3, [r7, #4]
 802fcce:	681b      	ldr	r3, [r3, #0]
 802fcd0:	699b      	ldr	r3, [r3, #24]
 802fcd2:	60bb      	str	r3, [r7, #8]
 802fcd4:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 802fcd6:	687b      	ldr	r3, [r7, #4]
 802fcd8:	2200      	movs	r2, #0
 802fcda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 802fcde:	bf00      	nop
 802fce0:	3710      	adds	r7, #16
 802fce2:	46bd      	mov	sp, r7
 802fce4:	bd80      	pop	{r7, pc}
	...

0802fce8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 802fce8:	b580      	push	{r7, lr}
 802fcea:	b084      	sub	sp, #16
 802fcec:	af00      	add	r7, sp, #0
 802fcee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 802fcf0:	687b      	ldr	r3, [r7, #4]
 802fcf2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 802fcf6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 802fcf8:	687b      	ldr	r3, [r7, #4]
 802fcfa:	681b      	ldr	r3, [r3, #0]
 802fcfc:	685a      	ldr	r2, [r3, #4]
 802fcfe:	687b      	ldr	r3, [r7, #4]
 802fd00:	681b      	ldr	r3, [r3, #0]
 802fd02:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 802fd06:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 802fd08:	2300      	movs	r3, #0
 802fd0a:	60bb      	str	r3, [r7, #8]
 802fd0c:	687b      	ldr	r3, [r7, #4]
 802fd0e:	681b      	ldr	r3, [r3, #0]
 802fd10:	695b      	ldr	r3, [r3, #20]
 802fd12:	60bb      	str	r3, [r7, #8]
 802fd14:	687b      	ldr	r3, [r7, #4]
 802fd16:	681b      	ldr	r3, [r3, #0]
 802fd18:	681a      	ldr	r2, [r3, #0]
 802fd1a:	687b      	ldr	r3, [r7, #4]
 802fd1c:	681b      	ldr	r3, [r3, #0]
 802fd1e:	f042 0201 	orr.w	r2, r2, #1
 802fd22:	601a      	str	r2, [r3, #0]
 802fd24:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 802fd26:	687b      	ldr	r3, [r7, #4]
 802fd28:	681b      	ldr	r3, [r3, #0]
 802fd2a:	681a      	ldr	r2, [r3, #0]
 802fd2c:	687b      	ldr	r3, [r7, #4]
 802fd2e:	681b      	ldr	r3, [r3, #0]
 802fd30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 802fd34:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 802fd36:	687b      	ldr	r3, [r7, #4]
 802fd38:	681b      	ldr	r3, [r3, #0]
 802fd3a:	685b      	ldr	r3, [r3, #4]
 802fd3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 802fd40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 802fd44:	d172      	bne.n	802fe2c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 802fd46:	7bfb      	ldrb	r3, [r7, #15]
 802fd48:	2b22      	cmp	r3, #34	@ 0x22
 802fd4a:	d002      	beq.n	802fd52 <I2C_Slave_STOPF+0x6a>
 802fd4c:	7bfb      	ldrb	r3, [r7, #15]
 802fd4e:	2b2a      	cmp	r3, #42	@ 0x2a
 802fd50:	d135      	bne.n	802fdbe <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 802fd52:	687b      	ldr	r3, [r7, #4]
 802fd54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802fd56:	681b      	ldr	r3, [r3, #0]
 802fd58:	685b      	ldr	r3, [r3, #4]
 802fd5a:	b29a      	uxth	r2, r3
 802fd5c:	687b      	ldr	r3, [r7, #4]
 802fd5e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 802fd60:	687b      	ldr	r3, [r7, #4]
 802fd62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802fd64:	b29b      	uxth	r3, r3
 802fd66:	2b00      	cmp	r3, #0
 802fd68:	d005      	beq.n	802fd76 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 802fd6a:	687b      	ldr	r3, [r7, #4]
 802fd6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802fd6e:	f043 0204 	orr.w	r2, r3, #4
 802fd72:	687b      	ldr	r3, [r7, #4]
 802fd74:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 802fd76:	687b      	ldr	r3, [r7, #4]
 802fd78:	681b      	ldr	r3, [r3, #0]
 802fd7a:	685a      	ldr	r2, [r3, #4]
 802fd7c:	687b      	ldr	r3, [r7, #4]
 802fd7e:	681b      	ldr	r3, [r3, #0]
 802fd80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 802fd84:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 802fd86:	687b      	ldr	r3, [r7, #4]
 802fd88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802fd8a:	4618      	mov	r0, r3
 802fd8c:	f7fb ffdc 	bl	802bd48 <HAL_DMA_GetState>
 802fd90:	4603      	mov	r3, r0
 802fd92:	2b01      	cmp	r3, #1
 802fd94:	d049      	beq.n	802fe2a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 802fd96:	687b      	ldr	r3, [r7, #4]
 802fd98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802fd9a:	4a6b      	ldr	r2, [pc, #428]	@ (802ff48 <I2C_Slave_STOPF+0x260>)
 802fd9c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 802fd9e:	687b      	ldr	r3, [r7, #4]
 802fda0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802fda2:	4618      	mov	r0, r3
 802fda4:	f7fb fe24 	bl	802b9f0 <HAL_DMA_Abort_IT>
 802fda8:	4603      	mov	r3, r0
 802fdaa:	2b00      	cmp	r3, #0
 802fdac:	d03d      	beq.n	802fe2a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 802fdae:	687b      	ldr	r3, [r7, #4]
 802fdb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802fdb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802fdb4:	687a      	ldr	r2, [r7, #4]
 802fdb6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 802fdb8:	4610      	mov	r0, r2
 802fdba:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 802fdbc:	e035      	b.n	802fe2a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 802fdbe:	687b      	ldr	r3, [r7, #4]
 802fdc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802fdc2:	681b      	ldr	r3, [r3, #0]
 802fdc4:	685b      	ldr	r3, [r3, #4]
 802fdc6:	b29a      	uxth	r2, r3
 802fdc8:	687b      	ldr	r3, [r7, #4]
 802fdca:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 802fdcc:	687b      	ldr	r3, [r7, #4]
 802fdce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802fdd0:	b29b      	uxth	r3, r3
 802fdd2:	2b00      	cmp	r3, #0
 802fdd4:	d005      	beq.n	802fde2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 802fdd6:	687b      	ldr	r3, [r7, #4]
 802fdd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802fdda:	f043 0204 	orr.w	r2, r3, #4
 802fdde:	687b      	ldr	r3, [r7, #4]
 802fde0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 802fde2:	687b      	ldr	r3, [r7, #4]
 802fde4:	681b      	ldr	r3, [r3, #0]
 802fde6:	685a      	ldr	r2, [r3, #4]
 802fde8:	687b      	ldr	r3, [r7, #4]
 802fdea:	681b      	ldr	r3, [r3, #0]
 802fdec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 802fdf0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 802fdf2:	687b      	ldr	r3, [r7, #4]
 802fdf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802fdf6:	4618      	mov	r0, r3
 802fdf8:	f7fb ffa6 	bl	802bd48 <HAL_DMA_GetState>
 802fdfc:	4603      	mov	r3, r0
 802fdfe:	2b01      	cmp	r3, #1
 802fe00:	d014      	beq.n	802fe2c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 802fe02:	687b      	ldr	r3, [r7, #4]
 802fe04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802fe06:	4a50      	ldr	r2, [pc, #320]	@ (802ff48 <I2C_Slave_STOPF+0x260>)
 802fe08:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 802fe0a:	687b      	ldr	r3, [r7, #4]
 802fe0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802fe0e:	4618      	mov	r0, r3
 802fe10:	f7fb fdee 	bl	802b9f0 <HAL_DMA_Abort_IT>
 802fe14:	4603      	mov	r3, r0
 802fe16:	2b00      	cmp	r3, #0
 802fe18:	d008      	beq.n	802fe2c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 802fe1a:	687b      	ldr	r3, [r7, #4]
 802fe1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802fe1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802fe20:	687a      	ldr	r2, [r7, #4]
 802fe22:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 802fe24:	4610      	mov	r0, r2
 802fe26:	4798      	blx	r3
 802fe28:	e000      	b.n	802fe2c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 802fe2a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 802fe2c:	687b      	ldr	r3, [r7, #4]
 802fe2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802fe30:	b29b      	uxth	r3, r3
 802fe32:	2b00      	cmp	r3, #0
 802fe34:	d03e      	beq.n	802feb4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 802fe36:	687b      	ldr	r3, [r7, #4]
 802fe38:	681b      	ldr	r3, [r3, #0]
 802fe3a:	695b      	ldr	r3, [r3, #20]
 802fe3c:	f003 0304 	and.w	r3, r3, #4
 802fe40:	2b04      	cmp	r3, #4
 802fe42:	d112      	bne.n	802fe6a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 802fe44:	687b      	ldr	r3, [r7, #4]
 802fe46:	681b      	ldr	r3, [r3, #0]
 802fe48:	691a      	ldr	r2, [r3, #16]
 802fe4a:	687b      	ldr	r3, [r7, #4]
 802fe4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802fe4e:	b2d2      	uxtb	r2, r2
 802fe50:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 802fe52:	687b      	ldr	r3, [r7, #4]
 802fe54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802fe56:	1c5a      	adds	r2, r3, #1
 802fe58:	687b      	ldr	r3, [r7, #4]
 802fe5a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 802fe5c:	687b      	ldr	r3, [r7, #4]
 802fe5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802fe60:	b29b      	uxth	r3, r3
 802fe62:	3b01      	subs	r3, #1
 802fe64:	b29a      	uxth	r2, r3
 802fe66:	687b      	ldr	r3, [r7, #4]
 802fe68:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 802fe6a:	687b      	ldr	r3, [r7, #4]
 802fe6c:	681b      	ldr	r3, [r3, #0]
 802fe6e:	695b      	ldr	r3, [r3, #20]
 802fe70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802fe74:	2b40      	cmp	r3, #64	@ 0x40
 802fe76:	d112      	bne.n	802fe9e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 802fe78:	687b      	ldr	r3, [r7, #4]
 802fe7a:	681b      	ldr	r3, [r3, #0]
 802fe7c:	691a      	ldr	r2, [r3, #16]
 802fe7e:	687b      	ldr	r3, [r7, #4]
 802fe80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802fe82:	b2d2      	uxtb	r2, r2
 802fe84:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 802fe86:	687b      	ldr	r3, [r7, #4]
 802fe88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802fe8a:	1c5a      	adds	r2, r3, #1
 802fe8c:	687b      	ldr	r3, [r7, #4]
 802fe8e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 802fe90:	687b      	ldr	r3, [r7, #4]
 802fe92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802fe94:	b29b      	uxth	r3, r3
 802fe96:	3b01      	subs	r3, #1
 802fe98:	b29a      	uxth	r2, r3
 802fe9a:	687b      	ldr	r3, [r7, #4]
 802fe9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 802fe9e:	687b      	ldr	r3, [r7, #4]
 802fea0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 802fea2:	b29b      	uxth	r3, r3
 802fea4:	2b00      	cmp	r3, #0
 802fea6:	d005      	beq.n	802feb4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 802fea8:	687b      	ldr	r3, [r7, #4]
 802feaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802feac:	f043 0204 	orr.w	r2, r3, #4
 802feb0:	687b      	ldr	r3, [r7, #4]
 802feb2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 802feb4:	687b      	ldr	r3, [r7, #4]
 802feb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802feb8:	2b00      	cmp	r3, #0
 802feba:	d003      	beq.n	802fec4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 802febc:	6878      	ldr	r0, [r7, #4]
 802febe:	f000 f8bd 	bl	803003c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 802fec2:	e03c      	b.n	802ff3e <I2C_Slave_STOPF+0x256>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 802fec4:	7bfb      	ldrb	r3, [r7, #15]
 802fec6:	2b2a      	cmp	r3, #42	@ 0x2a
 802fec8:	d10a      	bne.n	802fee0 <I2C_Slave_STOPF+0x1f8>
      hi2c->PreviousState = I2C_STATE_NONE;
 802feca:	687b      	ldr	r3, [r7, #4]
 802fecc:	2200      	movs	r2, #0
 802fece:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 802fed0:	687b      	ldr	r3, [r7, #4]
 802fed2:	2228      	movs	r2, #40	@ 0x28
 802fed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->SlaveRxCpltCallback(hi2c);
 802fed8:	687b      	ldr	r3, [r7, #4]
 802feda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 802fedc:	6878      	ldr	r0, [r7, #4]
 802fede:	4798      	blx	r3
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 802fee0:	687b      	ldr	r3, [r7, #4]
 802fee2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 802fee6:	b2db      	uxtb	r3, r3
 802fee8:	2b28      	cmp	r3, #40	@ 0x28
 802feea:	d112      	bne.n	802ff12 <I2C_Slave_STOPF+0x22a>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 802feec:	687b      	ldr	r3, [r7, #4]
 802feee:	4a17      	ldr	r2, [pc, #92]	@ (802ff4c <I2C_Slave_STOPF+0x264>)
 802fef0:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 802fef2:	687b      	ldr	r3, [r7, #4]
 802fef4:	2200      	movs	r2, #0
 802fef6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 802fef8:	687b      	ldr	r3, [r7, #4]
 802fefa:	2220      	movs	r2, #32
 802fefc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 802ff00:	687b      	ldr	r3, [r7, #4]
 802ff02:	2200      	movs	r2, #0
 802ff04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ListenCpltCallback(hi2c);
 802ff08:	687b      	ldr	r3, [r7, #4]
 802ff0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 802ff0c:	6878      	ldr	r0, [r7, #4]
 802ff0e:	4798      	blx	r3
}
 802ff10:	e015      	b.n	802ff3e <I2C_Slave_STOPF+0x256>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 802ff12:	687b      	ldr	r3, [r7, #4]
 802ff14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802ff16:	2b22      	cmp	r3, #34	@ 0x22
 802ff18:	d002      	beq.n	802ff20 <I2C_Slave_STOPF+0x238>
 802ff1a:	7bfb      	ldrb	r3, [r7, #15]
 802ff1c:	2b22      	cmp	r3, #34	@ 0x22
 802ff1e:	d10e      	bne.n	802ff3e <I2C_Slave_STOPF+0x256>
        hi2c->PreviousState = I2C_STATE_NONE;
 802ff20:	687b      	ldr	r3, [r7, #4]
 802ff22:	2200      	movs	r2, #0
 802ff24:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 802ff26:	687b      	ldr	r3, [r7, #4]
 802ff28:	2220      	movs	r2, #32
 802ff2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 802ff2e:	687b      	ldr	r3, [r7, #4]
 802ff30:	2200      	movs	r2, #0
 802ff32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->SlaveRxCpltCallback(hi2c);
 802ff36:	687b      	ldr	r3, [r7, #4]
 802ff38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 802ff3a:	6878      	ldr	r0, [r7, #4]
 802ff3c:	4798      	blx	r3
}
 802ff3e:	bf00      	nop
 802ff40:	3710      	adds	r7, #16
 802ff42:	46bd      	mov	sp, r7
 802ff44:	bd80      	pop	{r7, pc}
 802ff46:	bf00      	nop
 802ff48:	080303d5 	.word	0x080303d5
 802ff4c:	ffff0000 	.word	0xffff0000

0802ff50 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 802ff50:	b580      	push	{r7, lr}
 802ff52:	b084      	sub	sp, #16
 802ff54:	af00      	add	r7, sp, #0
 802ff56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 802ff58:	687b      	ldr	r3, [r7, #4]
 802ff5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 802ff5e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 802ff60:	687b      	ldr	r3, [r7, #4]
 802ff62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802ff64:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 802ff66:	68bb      	ldr	r3, [r7, #8]
 802ff68:	2b08      	cmp	r3, #8
 802ff6a:	d002      	beq.n	802ff72 <I2C_Slave_AF+0x22>
 802ff6c:	68bb      	ldr	r3, [r7, #8]
 802ff6e:	2b20      	cmp	r3, #32
 802ff70:	d12a      	bne.n	802ffc8 <I2C_Slave_AF+0x78>
 802ff72:	7bfb      	ldrb	r3, [r7, #15]
 802ff74:	2b28      	cmp	r3, #40	@ 0x28
 802ff76:	d127      	bne.n	802ffc8 <I2C_Slave_AF+0x78>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 802ff78:	687b      	ldr	r3, [r7, #4]
 802ff7a:	4a2f      	ldr	r2, [pc, #188]	@ (8030038 <I2C_Slave_AF+0xe8>)
 802ff7c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 802ff7e:	687b      	ldr	r3, [r7, #4]
 802ff80:	681b      	ldr	r3, [r3, #0]
 802ff82:	685a      	ldr	r2, [r3, #4]
 802ff84:	687b      	ldr	r3, [r7, #4]
 802ff86:	681b      	ldr	r3, [r3, #0]
 802ff88:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 802ff8c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 802ff8e:	687b      	ldr	r3, [r7, #4]
 802ff90:	681b      	ldr	r3, [r3, #0]
 802ff92:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 802ff96:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 802ff98:	687b      	ldr	r3, [r7, #4]
 802ff9a:	681b      	ldr	r3, [r3, #0]
 802ff9c:	681a      	ldr	r2, [r3, #0]
 802ff9e:	687b      	ldr	r3, [r7, #4]
 802ffa0:	681b      	ldr	r3, [r3, #0]
 802ffa2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 802ffa6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 802ffa8:	687b      	ldr	r3, [r7, #4]
 802ffaa:	2200      	movs	r2, #0
 802ffac:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 802ffae:	687b      	ldr	r3, [r7, #4]
 802ffb0:	2220      	movs	r2, #32
 802ffb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 802ffb6:	687b      	ldr	r3, [r7, #4]
 802ffb8:	2200      	movs	r2, #0
 802ffba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
 802ffbe:	687b      	ldr	r3, [r7, #4]
 802ffc0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 802ffc2:	6878      	ldr	r0, [r7, #4]
 802ffc4:	4798      	blx	r3
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 802ffc6:	e032      	b.n	803002e <I2C_Slave_AF+0xde>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 802ffc8:	7bfb      	ldrb	r3, [r7, #15]
 802ffca:	2b21      	cmp	r3, #33	@ 0x21
 802ffcc:	d12a      	bne.n	8030024 <I2C_Slave_AF+0xd4>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 802ffce:	687b      	ldr	r3, [r7, #4]
 802ffd0:	4a19      	ldr	r2, [pc, #100]	@ (8030038 <I2C_Slave_AF+0xe8>)
 802ffd2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 802ffd4:	687b      	ldr	r3, [r7, #4]
 802ffd6:	2221      	movs	r2, #33	@ 0x21
 802ffd8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 802ffda:	687b      	ldr	r3, [r7, #4]
 802ffdc:	2220      	movs	r2, #32
 802ffde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 802ffe2:	687b      	ldr	r3, [r7, #4]
 802ffe4:	2200      	movs	r2, #0
 802ffe6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 802ffea:	687b      	ldr	r3, [r7, #4]
 802ffec:	681b      	ldr	r3, [r3, #0]
 802ffee:	685a      	ldr	r2, [r3, #4]
 802fff0:	687b      	ldr	r3, [r7, #4]
 802fff2:	681b      	ldr	r3, [r3, #0]
 802fff4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 802fff8:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 802fffa:	687b      	ldr	r3, [r7, #4]
 802fffc:	681b      	ldr	r3, [r3, #0]
 802fffe:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8030002:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8030004:	687b      	ldr	r3, [r7, #4]
 8030006:	681b      	ldr	r3, [r3, #0]
 8030008:	681a      	ldr	r2, [r3, #0]
 803000a:	687b      	ldr	r3, [r7, #4]
 803000c:	681b      	ldr	r3, [r3, #0]
 803000e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8030012:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8030014:	6878      	ldr	r0, [r7, #4]
 8030016:	f7fe fc23 	bl	802e860 <I2C_Flush_DR>
    hi2c->SlaveTxCpltCallback(hi2c);
 803001a:	687b      	ldr	r3, [r7, #4]
 803001c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 803001e:	6878      	ldr	r0, [r7, #4]
 8030020:	4798      	blx	r3
}
 8030022:	e004      	b.n	803002e <I2C_Slave_AF+0xde>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8030024:	687b      	ldr	r3, [r7, #4]
 8030026:	681b      	ldr	r3, [r3, #0]
 8030028:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 803002c:	615a      	str	r2, [r3, #20]
}
 803002e:	bf00      	nop
 8030030:	3710      	adds	r7, #16
 8030032:	46bd      	mov	sp, r7
 8030034:	bd80      	pop	{r7, pc}
 8030036:	bf00      	nop
 8030038:	ffff0000 	.word	0xffff0000

0803003c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 803003c:	b580      	push	{r7, lr}
 803003e:	b084      	sub	sp, #16
 8030040:	af00      	add	r7, sp, #0
 8030042:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8030044:	687b      	ldr	r3, [r7, #4]
 8030046:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 803004a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 803004c:	687b      	ldr	r3, [r7, #4]
 803004e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8030052:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8030054:	7bbb      	ldrb	r3, [r7, #14]
 8030056:	2b10      	cmp	r3, #16
 8030058:	d002      	beq.n	8030060 <I2C_ITError+0x24>
 803005a:	7bbb      	ldrb	r3, [r7, #14]
 803005c:	2b40      	cmp	r3, #64	@ 0x40
 803005e:	d10a      	bne.n	8030076 <I2C_ITError+0x3a>
 8030060:	7bfb      	ldrb	r3, [r7, #15]
 8030062:	2b22      	cmp	r3, #34	@ 0x22
 8030064:	d107      	bne.n	8030076 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8030066:	687b      	ldr	r3, [r7, #4]
 8030068:	681b      	ldr	r3, [r3, #0]
 803006a:	681a      	ldr	r2, [r3, #0]
 803006c:	687b      	ldr	r3, [r7, #4]
 803006e:	681b      	ldr	r3, [r3, #0]
 8030070:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8030074:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8030076:	7bfb      	ldrb	r3, [r7, #15]
 8030078:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 803007c:	2b28      	cmp	r3, #40	@ 0x28
 803007e:	d107      	bne.n	8030090 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8030080:	687b      	ldr	r3, [r7, #4]
 8030082:	2200      	movs	r2, #0
 8030084:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8030086:	687b      	ldr	r3, [r7, #4]
 8030088:	2228      	movs	r2, #40	@ 0x28
 803008a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 803008e:	e015      	b.n	80300bc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8030090:	687b      	ldr	r3, [r7, #4]
 8030092:	681b      	ldr	r3, [r3, #0]
 8030094:	685b      	ldr	r3, [r3, #4]
 8030096:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 803009a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 803009e:	d00a      	beq.n	80300b6 <I2C_ITError+0x7a>
 80300a0:	7bfb      	ldrb	r3, [r7, #15]
 80300a2:	2b60      	cmp	r3, #96	@ 0x60
 80300a4:	d007      	beq.n	80300b6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80300a6:	687b      	ldr	r3, [r7, #4]
 80300a8:	2220      	movs	r2, #32
 80300aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80300ae:	687b      	ldr	r3, [r7, #4]
 80300b0:	2200      	movs	r2, #0
 80300b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80300b6:	687b      	ldr	r3, [r7, #4]
 80300b8:	2200      	movs	r2, #0
 80300ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80300bc:	687b      	ldr	r3, [r7, #4]
 80300be:	681b      	ldr	r3, [r3, #0]
 80300c0:	685b      	ldr	r3, [r3, #4]
 80300c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80300c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80300ca:	d162      	bne.n	8030192 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80300cc:	687b      	ldr	r3, [r7, #4]
 80300ce:	681b      	ldr	r3, [r3, #0]
 80300d0:	685a      	ldr	r2, [r3, #4]
 80300d2:	687b      	ldr	r3, [r7, #4]
 80300d4:	681b      	ldr	r3, [r3, #0]
 80300d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80300da:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80300dc:	687b      	ldr	r3, [r7, #4]
 80300de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80300e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80300e4:	b2db      	uxtb	r3, r3
 80300e6:	2b01      	cmp	r3, #1
 80300e8:	d020      	beq.n	803012c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80300ea:	687b      	ldr	r3, [r7, #4]
 80300ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80300ee:	4a6c      	ldr	r2, [pc, #432]	@ (80302a0 <I2C_ITError+0x264>)
 80300f0:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80300f2:	687b      	ldr	r3, [r7, #4]
 80300f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80300f6:	4618      	mov	r0, r3
 80300f8:	f7fb fc7a 	bl	802b9f0 <HAL_DMA_Abort_IT>
 80300fc:	4603      	mov	r3, r0
 80300fe:	2b00      	cmp	r3, #0
 8030100:	f000 808b 	beq.w	803021a <I2C_ITError+0x1de>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8030104:	687b      	ldr	r3, [r7, #4]
 8030106:	681b      	ldr	r3, [r3, #0]
 8030108:	681a      	ldr	r2, [r3, #0]
 803010a:	687b      	ldr	r3, [r7, #4]
 803010c:	681b      	ldr	r3, [r3, #0]
 803010e:	f022 0201 	bic.w	r2, r2, #1
 8030112:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8030114:	687b      	ldr	r3, [r7, #4]
 8030116:	2220      	movs	r2, #32
 8030118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 803011c:	687b      	ldr	r3, [r7, #4]
 803011e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8030120:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8030122:	687a      	ldr	r2, [r7, #4]
 8030124:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8030126:	4610      	mov	r0, r2
 8030128:	4798      	blx	r3
 803012a:	e076      	b.n	803021a <I2C_ITError+0x1de>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 803012c:	687b      	ldr	r3, [r7, #4]
 803012e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8030130:	4a5b      	ldr	r2, [pc, #364]	@ (80302a0 <I2C_ITError+0x264>)
 8030132:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8030134:	687b      	ldr	r3, [r7, #4]
 8030136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8030138:	4618      	mov	r0, r3
 803013a:	f7fb fc59 	bl	802b9f0 <HAL_DMA_Abort_IT>
 803013e:	4603      	mov	r3, r0
 8030140:	2b00      	cmp	r3, #0
 8030142:	d06a      	beq.n	803021a <I2C_ITError+0x1de>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8030144:	687b      	ldr	r3, [r7, #4]
 8030146:	681b      	ldr	r3, [r3, #0]
 8030148:	695b      	ldr	r3, [r3, #20]
 803014a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 803014e:	2b40      	cmp	r3, #64	@ 0x40
 8030150:	d10b      	bne.n	803016a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8030152:	687b      	ldr	r3, [r7, #4]
 8030154:	681b      	ldr	r3, [r3, #0]
 8030156:	691a      	ldr	r2, [r3, #16]
 8030158:	687b      	ldr	r3, [r7, #4]
 803015a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 803015c:	b2d2      	uxtb	r2, r2
 803015e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8030160:	687b      	ldr	r3, [r7, #4]
 8030162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8030164:	1c5a      	adds	r2, r3, #1
 8030166:	687b      	ldr	r3, [r7, #4]
 8030168:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 803016a:	687b      	ldr	r3, [r7, #4]
 803016c:	681b      	ldr	r3, [r3, #0]
 803016e:	681a      	ldr	r2, [r3, #0]
 8030170:	687b      	ldr	r3, [r7, #4]
 8030172:	681b      	ldr	r3, [r3, #0]
 8030174:	f022 0201 	bic.w	r2, r2, #1
 8030178:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 803017a:	687b      	ldr	r3, [r7, #4]
 803017c:	2220      	movs	r2, #32
 803017e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8030182:	687b      	ldr	r3, [r7, #4]
 8030184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8030186:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8030188:	687a      	ldr	r2, [r7, #4]
 803018a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 803018c:	4610      	mov	r0, r2
 803018e:	4798      	blx	r3
 8030190:	e043      	b.n	803021a <I2C_ITError+0x1de>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8030192:	687b      	ldr	r3, [r7, #4]
 8030194:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8030198:	b2db      	uxtb	r3, r3
 803019a:	2b60      	cmp	r3, #96	@ 0x60
 803019c:	d126      	bne.n	80301ec <I2C_ITError+0x1b0>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 803019e:	687b      	ldr	r3, [r7, #4]
 80301a0:	2220      	movs	r2, #32
 80301a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80301a6:	687b      	ldr	r3, [r7, #4]
 80301a8:	2200      	movs	r2, #0
 80301aa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80301ac:	687b      	ldr	r3, [r7, #4]
 80301ae:	681b      	ldr	r3, [r3, #0]
 80301b0:	695b      	ldr	r3, [r3, #20]
 80301b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80301b6:	2b40      	cmp	r3, #64	@ 0x40
 80301b8:	d10b      	bne.n	80301d2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80301ba:	687b      	ldr	r3, [r7, #4]
 80301bc:	681b      	ldr	r3, [r3, #0]
 80301be:	691a      	ldr	r2, [r3, #16]
 80301c0:	687b      	ldr	r3, [r7, #4]
 80301c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80301c4:	b2d2      	uxtb	r2, r2
 80301c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80301c8:	687b      	ldr	r3, [r7, #4]
 80301ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80301cc:	1c5a      	adds	r2, r3, #1
 80301ce:	687b      	ldr	r3, [r7, #4]
 80301d0:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80301d2:	687b      	ldr	r3, [r7, #4]
 80301d4:	681b      	ldr	r3, [r3, #0]
 80301d6:	681a      	ldr	r2, [r3, #0]
 80301d8:	687b      	ldr	r3, [r7, #4]
 80301da:	681b      	ldr	r3, [r3, #0]
 80301dc:	f022 0201 	bic.w	r2, r2, #1
 80301e0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 80301e2:	687b      	ldr	r3, [r7, #4]
 80301e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80301e6:	6878      	ldr	r0, [r7, #4]
 80301e8:	4798      	blx	r3
 80301ea:	e016      	b.n	803021a <I2C_ITError+0x1de>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80301ec:	687b      	ldr	r3, [r7, #4]
 80301ee:	681b      	ldr	r3, [r3, #0]
 80301f0:	695b      	ldr	r3, [r3, #20]
 80301f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80301f6:	2b40      	cmp	r3, #64	@ 0x40
 80301f8:	d10b      	bne.n	8030212 <I2C_ITError+0x1d6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80301fa:	687b      	ldr	r3, [r7, #4]
 80301fc:	681b      	ldr	r3, [r3, #0]
 80301fe:	691a      	ldr	r2, [r3, #16]
 8030200:	687b      	ldr	r3, [r7, #4]
 8030202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8030204:	b2d2      	uxtb	r2, r2
 8030206:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8030208:	687b      	ldr	r3, [r7, #4]
 803020a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 803020c:	1c5a      	adds	r2, r3, #1
 803020e:	687b      	ldr	r3, [r7, #4]
 8030210:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
 8030212:	687b      	ldr	r3, [r7, #4]
 8030214:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8030216:	6878      	ldr	r0, [r7, #4]
 8030218:	4798      	blx	r3
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 803021a:	687b      	ldr	r3, [r7, #4]
 803021c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 803021e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8030220:	68bb      	ldr	r3, [r7, #8]
 8030222:	f003 0301 	and.w	r3, r3, #1
 8030226:	2b00      	cmp	r3, #0
 8030228:	d10e      	bne.n	8030248 <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 803022a:	68bb      	ldr	r3, [r7, #8]
 803022c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8030230:	2b00      	cmp	r3, #0
 8030232:	d109      	bne.n	8030248 <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8030234:	68bb      	ldr	r3, [r7, #8]
 8030236:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 803023a:	2b00      	cmp	r3, #0
 803023c:	d104      	bne.n	8030248 <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 803023e:	68bb      	ldr	r3, [r7, #8]
 8030240:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8030244:	2b00      	cmp	r3, #0
 8030246:	d007      	beq.n	8030258 <I2C_ITError+0x21c>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8030248:	687b      	ldr	r3, [r7, #4]
 803024a:	681b      	ldr	r3, [r3, #0]
 803024c:	685a      	ldr	r2, [r3, #4]
 803024e:	687b      	ldr	r3, [r7, #4]
 8030250:	681b      	ldr	r3, [r3, #0]
 8030252:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8030256:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8030258:	687b      	ldr	r3, [r7, #4]
 803025a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 803025e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8030260:	687b      	ldr	r3, [r7, #4]
 8030262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8030264:	f003 0304 	and.w	r3, r3, #4
 8030268:	2b04      	cmp	r3, #4
 803026a:	d114      	bne.n	8030296 <I2C_ITError+0x25a>
 803026c:	7bfb      	ldrb	r3, [r7, #15]
 803026e:	2b28      	cmp	r3, #40	@ 0x28
 8030270:	d111      	bne.n	8030296 <I2C_ITError+0x25a>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8030272:	687b      	ldr	r3, [r7, #4]
 8030274:	4a0b      	ldr	r2, [pc, #44]	@ (80302a4 <I2C_ITError+0x268>)
 8030276:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8030278:	687b      	ldr	r3, [r7, #4]
 803027a:	2200      	movs	r2, #0
 803027c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 803027e:	687b      	ldr	r3, [r7, #4]
 8030280:	2220      	movs	r2, #32
 8030282:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8030286:	687b      	ldr	r3, [r7, #4]
 8030288:	2200      	movs	r2, #0
 803028a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
 803028e:	687b      	ldr	r3, [r7, #4]
 8030290:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8030292:	6878      	ldr	r0, [r7, #4]
 8030294:	4798      	blx	r3
#else
    HAL_I2C_ListenCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8030296:	bf00      	nop
 8030298:	3710      	adds	r7, #16
 803029a:	46bd      	mov	sp, r7
 803029c:	bd80      	pop	{r7, pc}
 803029e:	bf00      	nop
 80302a0:	080303d5 	.word	0x080303d5
 80302a4:	ffff0000 	.word	0xffff0000

080302a8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80302a8:	b580      	push	{r7, lr}
 80302aa:	b088      	sub	sp, #32
 80302ac:	af02      	add	r7, sp, #8
 80302ae:	60f8      	str	r0, [r7, #12]
 80302b0:	4608      	mov	r0, r1
 80302b2:	4611      	mov	r1, r2
 80302b4:	461a      	mov	r2, r3
 80302b6:	4603      	mov	r3, r0
 80302b8:	817b      	strh	r3, [r7, #10]
 80302ba:	460b      	mov	r3, r1
 80302bc:	813b      	strh	r3, [r7, #8]
 80302be:	4613      	mov	r3, r2
 80302c0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80302c2:	68fb      	ldr	r3, [r7, #12]
 80302c4:	681b      	ldr	r3, [r3, #0]
 80302c6:	681a      	ldr	r2, [r3, #0]
 80302c8:	68fb      	ldr	r3, [r7, #12]
 80302ca:	681b      	ldr	r3, [r3, #0]
 80302cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80302d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80302d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80302d4:	9300      	str	r3, [sp, #0]
 80302d6:	6a3b      	ldr	r3, [r7, #32]
 80302d8:	2200      	movs	r2, #0
 80302da:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80302de:	68f8      	ldr	r0, [r7, #12]
 80302e0:	f000 f922 	bl	8030528 <I2C_WaitOnFlagUntilTimeout>
 80302e4:	4603      	mov	r3, r0
 80302e6:	2b00      	cmp	r3, #0
 80302e8:	d00d      	beq.n	8030306 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80302ea:	68fb      	ldr	r3, [r7, #12]
 80302ec:	681b      	ldr	r3, [r3, #0]
 80302ee:	681b      	ldr	r3, [r3, #0]
 80302f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80302f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80302f8:	d103      	bne.n	8030302 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80302fa:	68fb      	ldr	r3, [r7, #12]
 80302fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8030300:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8030302:	2303      	movs	r3, #3
 8030304:	e05f      	b.n	80303c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8030306:	897b      	ldrh	r3, [r7, #10]
 8030308:	b2db      	uxtb	r3, r3
 803030a:	461a      	mov	r2, r3
 803030c:	68fb      	ldr	r3, [r7, #12]
 803030e:	681b      	ldr	r3, [r3, #0]
 8030310:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8030314:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8030316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8030318:	6a3a      	ldr	r2, [r7, #32]
 803031a:	492d      	ldr	r1, [pc, #180]	@ (80303d0 <I2C_RequestMemoryWrite+0x128>)
 803031c:	68f8      	ldr	r0, [r7, #12]
 803031e:	f000 f97d 	bl	803061c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8030322:	4603      	mov	r3, r0
 8030324:	2b00      	cmp	r3, #0
 8030326:	d001      	beq.n	803032c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8030328:	2301      	movs	r3, #1
 803032a:	e04c      	b.n	80303c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 803032c:	2300      	movs	r3, #0
 803032e:	617b      	str	r3, [r7, #20]
 8030330:	68fb      	ldr	r3, [r7, #12]
 8030332:	681b      	ldr	r3, [r3, #0]
 8030334:	695b      	ldr	r3, [r3, #20]
 8030336:	617b      	str	r3, [r7, #20]
 8030338:	68fb      	ldr	r3, [r7, #12]
 803033a:	681b      	ldr	r3, [r3, #0]
 803033c:	699b      	ldr	r3, [r3, #24]
 803033e:	617b      	str	r3, [r7, #20]
 8030340:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8030342:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8030344:	6a39      	ldr	r1, [r7, #32]
 8030346:	68f8      	ldr	r0, [r7, #12]
 8030348:	f000 fa08 	bl	803075c <I2C_WaitOnTXEFlagUntilTimeout>
 803034c:	4603      	mov	r3, r0
 803034e:	2b00      	cmp	r3, #0
 8030350:	d00d      	beq.n	803036e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8030352:	68fb      	ldr	r3, [r7, #12]
 8030354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8030356:	2b04      	cmp	r3, #4
 8030358:	d107      	bne.n	803036a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 803035a:	68fb      	ldr	r3, [r7, #12]
 803035c:	681b      	ldr	r3, [r3, #0]
 803035e:	681a      	ldr	r2, [r3, #0]
 8030360:	68fb      	ldr	r3, [r7, #12]
 8030362:	681b      	ldr	r3, [r3, #0]
 8030364:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8030368:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 803036a:	2301      	movs	r3, #1
 803036c:	e02b      	b.n	80303c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 803036e:	88fb      	ldrh	r3, [r7, #6]
 8030370:	2b01      	cmp	r3, #1
 8030372:	d105      	bne.n	8030380 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8030374:	893b      	ldrh	r3, [r7, #8]
 8030376:	b2da      	uxtb	r2, r3
 8030378:	68fb      	ldr	r3, [r7, #12]
 803037a:	681b      	ldr	r3, [r3, #0]
 803037c:	611a      	str	r2, [r3, #16]
 803037e:	e021      	b.n	80303c4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8030380:	893b      	ldrh	r3, [r7, #8]
 8030382:	0a1b      	lsrs	r3, r3, #8
 8030384:	b29b      	uxth	r3, r3
 8030386:	b2da      	uxtb	r2, r3
 8030388:	68fb      	ldr	r3, [r7, #12]
 803038a:	681b      	ldr	r3, [r3, #0]
 803038c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 803038e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8030390:	6a39      	ldr	r1, [r7, #32]
 8030392:	68f8      	ldr	r0, [r7, #12]
 8030394:	f000 f9e2 	bl	803075c <I2C_WaitOnTXEFlagUntilTimeout>
 8030398:	4603      	mov	r3, r0
 803039a:	2b00      	cmp	r3, #0
 803039c:	d00d      	beq.n	80303ba <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 803039e:	68fb      	ldr	r3, [r7, #12]
 80303a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80303a2:	2b04      	cmp	r3, #4
 80303a4:	d107      	bne.n	80303b6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80303a6:	68fb      	ldr	r3, [r7, #12]
 80303a8:	681b      	ldr	r3, [r3, #0]
 80303aa:	681a      	ldr	r2, [r3, #0]
 80303ac:	68fb      	ldr	r3, [r7, #12]
 80303ae:	681b      	ldr	r3, [r3, #0]
 80303b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80303b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80303b6:	2301      	movs	r3, #1
 80303b8:	e005      	b.n	80303c6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80303ba:	893b      	ldrh	r3, [r7, #8]
 80303bc:	b2da      	uxtb	r2, r3
 80303be:	68fb      	ldr	r3, [r7, #12]
 80303c0:	681b      	ldr	r3, [r3, #0]
 80303c2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80303c4:	2300      	movs	r3, #0
}
 80303c6:	4618      	mov	r0, r3
 80303c8:	3718      	adds	r7, #24
 80303ca:	46bd      	mov	sp, r7
 80303cc:	bd80      	pop	{r7, pc}
 80303ce:	bf00      	nop
 80303d0:	00010002 	.word	0x00010002

080303d4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80303d4:	b580      	push	{r7, lr}
 80303d6:	b086      	sub	sp, #24
 80303d8:	af00      	add	r7, sp, #0
 80303da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80303dc:	2300      	movs	r3, #0
 80303de:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80303e0:	687b      	ldr	r3, [r7, #4]
 80303e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80303e4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80303e6:	697b      	ldr	r3, [r7, #20]
 80303e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80303ec:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80303ee:	4b4c      	ldr	r3, [pc, #304]	@ (8030520 <I2C_DMAAbort+0x14c>)
 80303f0:	681b      	ldr	r3, [r3, #0]
 80303f2:	08db      	lsrs	r3, r3, #3
 80303f4:	4a4b      	ldr	r2, [pc, #300]	@ (8030524 <I2C_DMAAbort+0x150>)
 80303f6:	fba2 2303 	umull	r2, r3, r2, r3
 80303fa:	0a1a      	lsrs	r2, r3, #8
 80303fc:	4613      	mov	r3, r2
 80303fe:	009b      	lsls	r3, r3, #2
 8030400:	4413      	add	r3, r2
 8030402:	00da      	lsls	r2, r3, #3
 8030404:	1ad3      	subs	r3, r2, r3
 8030406:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8030408:	68fb      	ldr	r3, [r7, #12]
 803040a:	2b00      	cmp	r3, #0
 803040c:	d106      	bne.n	803041c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 803040e:	697b      	ldr	r3, [r7, #20]
 8030410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8030412:	f043 0220 	orr.w	r2, r3, #32
 8030416:	697b      	ldr	r3, [r7, #20]
 8030418:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 803041a:	e00a      	b.n	8030432 <I2C_DMAAbort+0x5e>
    }
    count--;
 803041c:	68fb      	ldr	r3, [r7, #12]
 803041e:	3b01      	subs	r3, #1
 8030420:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8030422:	697b      	ldr	r3, [r7, #20]
 8030424:	681b      	ldr	r3, [r3, #0]
 8030426:	681b      	ldr	r3, [r3, #0]
 8030428:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 803042c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8030430:	d0ea      	beq.n	8030408 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8030432:	697b      	ldr	r3, [r7, #20]
 8030434:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8030436:	2b00      	cmp	r3, #0
 8030438:	d003      	beq.n	8030442 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 803043a:	697b      	ldr	r3, [r7, #20]
 803043c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 803043e:	2200      	movs	r2, #0
 8030440:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8030442:	697b      	ldr	r3, [r7, #20]
 8030444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8030446:	2b00      	cmp	r3, #0
 8030448:	d003      	beq.n	8030452 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 803044a:	697b      	ldr	r3, [r7, #20]
 803044c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 803044e:	2200      	movs	r2, #0
 8030450:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8030452:	697b      	ldr	r3, [r7, #20]
 8030454:	681b      	ldr	r3, [r3, #0]
 8030456:	681a      	ldr	r2, [r3, #0]
 8030458:	697b      	ldr	r3, [r7, #20]
 803045a:	681b      	ldr	r3, [r3, #0]
 803045c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8030460:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8030462:	697b      	ldr	r3, [r7, #20]
 8030464:	2200      	movs	r2, #0
 8030466:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8030468:	697b      	ldr	r3, [r7, #20]
 803046a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 803046c:	2b00      	cmp	r3, #0
 803046e:	d003      	beq.n	8030478 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8030470:	697b      	ldr	r3, [r7, #20]
 8030472:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8030474:	2200      	movs	r2, #0
 8030476:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8030478:	697b      	ldr	r3, [r7, #20]
 803047a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 803047c:	2b00      	cmp	r3, #0
 803047e:	d003      	beq.n	8030488 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8030480:	697b      	ldr	r3, [r7, #20]
 8030482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8030484:	2200      	movs	r2, #0
 8030486:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8030488:	697b      	ldr	r3, [r7, #20]
 803048a:	681b      	ldr	r3, [r3, #0]
 803048c:	681a      	ldr	r2, [r3, #0]
 803048e:	697b      	ldr	r3, [r7, #20]
 8030490:	681b      	ldr	r3, [r3, #0]
 8030492:	f022 0201 	bic.w	r2, r2, #1
 8030496:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8030498:	697b      	ldr	r3, [r7, #20]
 803049a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 803049e:	b2db      	uxtb	r3, r3
 80304a0:	2b60      	cmp	r3, #96	@ 0x60
 80304a2:	d10f      	bne.n	80304c4 <I2C_DMAAbort+0xf0>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80304a4:	697b      	ldr	r3, [r7, #20]
 80304a6:	2220      	movs	r2, #32
 80304a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80304ac:	697b      	ldr	r3, [r7, #20]
 80304ae:	2200      	movs	r2, #0
 80304b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80304b4:	697b      	ldr	r3, [r7, #20]
 80304b6:	2200      	movs	r2, #0
 80304b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 80304ba:	697b      	ldr	r3, [r7, #20]
 80304bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80304be:	6978      	ldr	r0, [r7, #20]
 80304c0:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80304c2:	e028      	b.n	8030516 <I2C_DMAAbort+0x142>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80304c4:	7cfb      	ldrb	r3, [r7, #19]
 80304c6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80304ca:	2b28      	cmp	r3, #40	@ 0x28
 80304cc:	d117      	bne.n	80304fe <I2C_DMAAbort+0x12a>
      __HAL_I2C_ENABLE(hi2c);
 80304ce:	697b      	ldr	r3, [r7, #20]
 80304d0:	681b      	ldr	r3, [r3, #0]
 80304d2:	681a      	ldr	r2, [r3, #0]
 80304d4:	697b      	ldr	r3, [r7, #20]
 80304d6:	681b      	ldr	r3, [r3, #0]
 80304d8:	f042 0201 	orr.w	r2, r2, #1
 80304dc:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80304de:	697b      	ldr	r3, [r7, #20]
 80304e0:	681b      	ldr	r3, [r3, #0]
 80304e2:	681a      	ldr	r2, [r3, #0]
 80304e4:	697b      	ldr	r3, [r7, #20]
 80304e6:	681b      	ldr	r3, [r3, #0]
 80304e8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80304ec:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80304ee:	697b      	ldr	r3, [r7, #20]
 80304f0:	2200      	movs	r2, #0
 80304f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80304f4:	697b      	ldr	r3, [r7, #20]
 80304f6:	2228      	movs	r2, #40	@ 0x28
 80304f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80304fc:	e007      	b.n	803050e <I2C_DMAAbort+0x13a>
      hi2c->State = HAL_I2C_STATE_READY;
 80304fe:	697b      	ldr	r3, [r7, #20]
 8030500:	2220      	movs	r2, #32
 8030502:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8030506:	697b      	ldr	r3, [r7, #20]
 8030508:	2200      	movs	r2, #0
 803050a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCallback(hi2c);
 803050e:	697b      	ldr	r3, [r7, #20]
 8030510:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8030512:	6978      	ldr	r0, [r7, #20]
 8030514:	4798      	blx	r3
}
 8030516:	bf00      	nop
 8030518:	3718      	adds	r7, #24
 803051a:	46bd      	mov	sp, r7
 803051c:	bd80      	pop	{r7, pc}
 803051e:	bf00      	nop
 8030520:	2000001c 	.word	0x2000001c
 8030524:	14f8b589 	.word	0x14f8b589

08030528 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8030528:	b580      	push	{r7, lr}
 803052a:	b084      	sub	sp, #16
 803052c:	af00      	add	r7, sp, #0
 803052e:	60f8      	str	r0, [r7, #12]
 8030530:	60b9      	str	r1, [r7, #8]
 8030532:	603b      	str	r3, [r7, #0]
 8030534:	4613      	mov	r3, r2
 8030536:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8030538:	e048      	b.n	80305cc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 803053a:	683b      	ldr	r3, [r7, #0]
 803053c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8030540:	d044      	beq.n	80305cc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8030542:	f7f7 ffcb 	bl	80284dc <HAL_GetTick>
 8030546:	4602      	mov	r2, r0
 8030548:	69bb      	ldr	r3, [r7, #24]
 803054a:	1ad3      	subs	r3, r2, r3
 803054c:	683a      	ldr	r2, [r7, #0]
 803054e:	429a      	cmp	r2, r3
 8030550:	d302      	bcc.n	8030558 <I2C_WaitOnFlagUntilTimeout+0x30>
 8030552:	683b      	ldr	r3, [r7, #0]
 8030554:	2b00      	cmp	r3, #0
 8030556:	d139      	bne.n	80305cc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8030558:	68bb      	ldr	r3, [r7, #8]
 803055a:	0c1b      	lsrs	r3, r3, #16
 803055c:	b2db      	uxtb	r3, r3
 803055e:	2b01      	cmp	r3, #1
 8030560:	d10d      	bne.n	803057e <I2C_WaitOnFlagUntilTimeout+0x56>
 8030562:	68fb      	ldr	r3, [r7, #12]
 8030564:	681b      	ldr	r3, [r3, #0]
 8030566:	695b      	ldr	r3, [r3, #20]
 8030568:	43da      	mvns	r2, r3
 803056a:	68bb      	ldr	r3, [r7, #8]
 803056c:	4013      	ands	r3, r2
 803056e:	b29b      	uxth	r3, r3
 8030570:	2b00      	cmp	r3, #0
 8030572:	bf0c      	ite	eq
 8030574:	2301      	moveq	r3, #1
 8030576:	2300      	movne	r3, #0
 8030578:	b2db      	uxtb	r3, r3
 803057a:	461a      	mov	r2, r3
 803057c:	e00c      	b.n	8030598 <I2C_WaitOnFlagUntilTimeout+0x70>
 803057e:	68fb      	ldr	r3, [r7, #12]
 8030580:	681b      	ldr	r3, [r3, #0]
 8030582:	699b      	ldr	r3, [r3, #24]
 8030584:	43da      	mvns	r2, r3
 8030586:	68bb      	ldr	r3, [r7, #8]
 8030588:	4013      	ands	r3, r2
 803058a:	b29b      	uxth	r3, r3
 803058c:	2b00      	cmp	r3, #0
 803058e:	bf0c      	ite	eq
 8030590:	2301      	moveq	r3, #1
 8030592:	2300      	movne	r3, #0
 8030594:	b2db      	uxtb	r3, r3
 8030596:	461a      	mov	r2, r3
 8030598:	79fb      	ldrb	r3, [r7, #7]
 803059a:	429a      	cmp	r2, r3
 803059c:	d116      	bne.n	80305cc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 803059e:	68fb      	ldr	r3, [r7, #12]
 80305a0:	2200      	movs	r2, #0
 80305a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80305a4:	68fb      	ldr	r3, [r7, #12]
 80305a6:	2220      	movs	r2, #32
 80305a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80305ac:	68fb      	ldr	r3, [r7, #12]
 80305ae:	2200      	movs	r2, #0
 80305b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80305b4:	68fb      	ldr	r3, [r7, #12]
 80305b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80305b8:	f043 0220 	orr.w	r2, r3, #32
 80305bc:	68fb      	ldr	r3, [r7, #12]
 80305be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80305c0:	68fb      	ldr	r3, [r7, #12]
 80305c2:	2200      	movs	r2, #0
 80305c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80305c8:	2301      	movs	r3, #1
 80305ca:	e023      	b.n	8030614 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80305cc:	68bb      	ldr	r3, [r7, #8]
 80305ce:	0c1b      	lsrs	r3, r3, #16
 80305d0:	b2db      	uxtb	r3, r3
 80305d2:	2b01      	cmp	r3, #1
 80305d4:	d10d      	bne.n	80305f2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80305d6:	68fb      	ldr	r3, [r7, #12]
 80305d8:	681b      	ldr	r3, [r3, #0]
 80305da:	695b      	ldr	r3, [r3, #20]
 80305dc:	43da      	mvns	r2, r3
 80305de:	68bb      	ldr	r3, [r7, #8]
 80305e0:	4013      	ands	r3, r2
 80305e2:	b29b      	uxth	r3, r3
 80305e4:	2b00      	cmp	r3, #0
 80305e6:	bf0c      	ite	eq
 80305e8:	2301      	moveq	r3, #1
 80305ea:	2300      	movne	r3, #0
 80305ec:	b2db      	uxtb	r3, r3
 80305ee:	461a      	mov	r2, r3
 80305f0:	e00c      	b.n	803060c <I2C_WaitOnFlagUntilTimeout+0xe4>
 80305f2:	68fb      	ldr	r3, [r7, #12]
 80305f4:	681b      	ldr	r3, [r3, #0]
 80305f6:	699b      	ldr	r3, [r3, #24]
 80305f8:	43da      	mvns	r2, r3
 80305fa:	68bb      	ldr	r3, [r7, #8]
 80305fc:	4013      	ands	r3, r2
 80305fe:	b29b      	uxth	r3, r3
 8030600:	2b00      	cmp	r3, #0
 8030602:	bf0c      	ite	eq
 8030604:	2301      	moveq	r3, #1
 8030606:	2300      	movne	r3, #0
 8030608:	b2db      	uxtb	r3, r3
 803060a:	461a      	mov	r2, r3
 803060c:	79fb      	ldrb	r3, [r7, #7]
 803060e:	429a      	cmp	r2, r3
 8030610:	d093      	beq.n	803053a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8030612:	2300      	movs	r3, #0
}
 8030614:	4618      	mov	r0, r3
 8030616:	3710      	adds	r7, #16
 8030618:	46bd      	mov	sp, r7
 803061a:	bd80      	pop	{r7, pc}

0803061c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 803061c:	b580      	push	{r7, lr}
 803061e:	b084      	sub	sp, #16
 8030620:	af00      	add	r7, sp, #0
 8030622:	60f8      	str	r0, [r7, #12]
 8030624:	60b9      	str	r1, [r7, #8]
 8030626:	607a      	str	r2, [r7, #4]
 8030628:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 803062a:	e071      	b.n	8030710 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 803062c:	68fb      	ldr	r3, [r7, #12]
 803062e:	681b      	ldr	r3, [r3, #0]
 8030630:	695b      	ldr	r3, [r3, #20]
 8030632:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8030636:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 803063a:	d123      	bne.n	8030684 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 803063c:	68fb      	ldr	r3, [r7, #12]
 803063e:	681b      	ldr	r3, [r3, #0]
 8030640:	681a      	ldr	r2, [r3, #0]
 8030642:	68fb      	ldr	r3, [r7, #12]
 8030644:	681b      	ldr	r3, [r3, #0]
 8030646:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 803064a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 803064c:	68fb      	ldr	r3, [r7, #12]
 803064e:	681b      	ldr	r3, [r3, #0]
 8030650:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8030654:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8030656:	68fb      	ldr	r3, [r7, #12]
 8030658:	2200      	movs	r2, #0
 803065a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 803065c:	68fb      	ldr	r3, [r7, #12]
 803065e:	2220      	movs	r2, #32
 8030660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8030664:	68fb      	ldr	r3, [r7, #12]
 8030666:	2200      	movs	r2, #0
 8030668:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 803066c:	68fb      	ldr	r3, [r7, #12]
 803066e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8030670:	f043 0204 	orr.w	r2, r3, #4
 8030674:	68fb      	ldr	r3, [r7, #12]
 8030676:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8030678:	68fb      	ldr	r3, [r7, #12]
 803067a:	2200      	movs	r2, #0
 803067c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8030680:	2301      	movs	r3, #1
 8030682:	e067      	b.n	8030754 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8030684:	687b      	ldr	r3, [r7, #4]
 8030686:	f1b3 3fff 	cmp.w	r3, #4294967295
 803068a:	d041      	beq.n	8030710 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 803068c:	f7f7 ff26 	bl	80284dc <HAL_GetTick>
 8030690:	4602      	mov	r2, r0
 8030692:	683b      	ldr	r3, [r7, #0]
 8030694:	1ad3      	subs	r3, r2, r3
 8030696:	687a      	ldr	r2, [r7, #4]
 8030698:	429a      	cmp	r2, r3
 803069a:	d302      	bcc.n	80306a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 803069c:	687b      	ldr	r3, [r7, #4]
 803069e:	2b00      	cmp	r3, #0
 80306a0:	d136      	bne.n	8030710 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80306a2:	68bb      	ldr	r3, [r7, #8]
 80306a4:	0c1b      	lsrs	r3, r3, #16
 80306a6:	b2db      	uxtb	r3, r3
 80306a8:	2b01      	cmp	r3, #1
 80306aa:	d10c      	bne.n	80306c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80306ac:	68fb      	ldr	r3, [r7, #12]
 80306ae:	681b      	ldr	r3, [r3, #0]
 80306b0:	695b      	ldr	r3, [r3, #20]
 80306b2:	43da      	mvns	r2, r3
 80306b4:	68bb      	ldr	r3, [r7, #8]
 80306b6:	4013      	ands	r3, r2
 80306b8:	b29b      	uxth	r3, r3
 80306ba:	2b00      	cmp	r3, #0
 80306bc:	bf14      	ite	ne
 80306be:	2301      	movne	r3, #1
 80306c0:	2300      	moveq	r3, #0
 80306c2:	b2db      	uxtb	r3, r3
 80306c4:	e00b      	b.n	80306de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80306c6:	68fb      	ldr	r3, [r7, #12]
 80306c8:	681b      	ldr	r3, [r3, #0]
 80306ca:	699b      	ldr	r3, [r3, #24]
 80306cc:	43da      	mvns	r2, r3
 80306ce:	68bb      	ldr	r3, [r7, #8]
 80306d0:	4013      	ands	r3, r2
 80306d2:	b29b      	uxth	r3, r3
 80306d4:	2b00      	cmp	r3, #0
 80306d6:	bf14      	ite	ne
 80306d8:	2301      	movne	r3, #1
 80306da:	2300      	moveq	r3, #0
 80306dc:	b2db      	uxtb	r3, r3
 80306de:	2b00      	cmp	r3, #0
 80306e0:	d016      	beq.n	8030710 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80306e2:	68fb      	ldr	r3, [r7, #12]
 80306e4:	2200      	movs	r2, #0
 80306e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80306e8:	68fb      	ldr	r3, [r7, #12]
 80306ea:	2220      	movs	r2, #32
 80306ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80306f0:	68fb      	ldr	r3, [r7, #12]
 80306f2:	2200      	movs	r2, #0
 80306f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80306f8:	68fb      	ldr	r3, [r7, #12]
 80306fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80306fc:	f043 0220 	orr.w	r2, r3, #32
 8030700:	68fb      	ldr	r3, [r7, #12]
 8030702:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8030704:	68fb      	ldr	r3, [r7, #12]
 8030706:	2200      	movs	r2, #0
 8030708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 803070c:	2301      	movs	r3, #1
 803070e:	e021      	b.n	8030754 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8030710:	68bb      	ldr	r3, [r7, #8]
 8030712:	0c1b      	lsrs	r3, r3, #16
 8030714:	b2db      	uxtb	r3, r3
 8030716:	2b01      	cmp	r3, #1
 8030718:	d10c      	bne.n	8030734 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 803071a:	68fb      	ldr	r3, [r7, #12]
 803071c:	681b      	ldr	r3, [r3, #0]
 803071e:	695b      	ldr	r3, [r3, #20]
 8030720:	43da      	mvns	r2, r3
 8030722:	68bb      	ldr	r3, [r7, #8]
 8030724:	4013      	ands	r3, r2
 8030726:	b29b      	uxth	r3, r3
 8030728:	2b00      	cmp	r3, #0
 803072a:	bf14      	ite	ne
 803072c:	2301      	movne	r3, #1
 803072e:	2300      	moveq	r3, #0
 8030730:	b2db      	uxtb	r3, r3
 8030732:	e00b      	b.n	803074c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8030734:	68fb      	ldr	r3, [r7, #12]
 8030736:	681b      	ldr	r3, [r3, #0]
 8030738:	699b      	ldr	r3, [r3, #24]
 803073a:	43da      	mvns	r2, r3
 803073c:	68bb      	ldr	r3, [r7, #8]
 803073e:	4013      	ands	r3, r2
 8030740:	b29b      	uxth	r3, r3
 8030742:	2b00      	cmp	r3, #0
 8030744:	bf14      	ite	ne
 8030746:	2301      	movne	r3, #1
 8030748:	2300      	moveq	r3, #0
 803074a:	b2db      	uxtb	r3, r3
 803074c:	2b00      	cmp	r3, #0
 803074e:	f47f af6d 	bne.w	803062c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8030752:	2300      	movs	r3, #0
}
 8030754:	4618      	mov	r0, r3
 8030756:	3710      	adds	r7, #16
 8030758:	46bd      	mov	sp, r7
 803075a:	bd80      	pop	{r7, pc}

0803075c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 803075c:	b580      	push	{r7, lr}
 803075e:	b084      	sub	sp, #16
 8030760:	af00      	add	r7, sp, #0
 8030762:	60f8      	str	r0, [r7, #12]
 8030764:	60b9      	str	r1, [r7, #8]
 8030766:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8030768:	e034      	b.n	80307d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 803076a:	68f8      	ldr	r0, [r7, #12]
 803076c:	f000 f8b8 	bl	80308e0 <I2C_IsAcknowledgeFailed>
 8030770:	4603      	mov	r3, r0
 8030772:	2b00      	cmp	r3, #0
 8030774:	d001      	beq.n	803077a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8030776:	2301      	movs	r3, #1
 8030778:	e034      	b.n	80307e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 803077a:	68bb      	ldr	r3, [r7, #8]
 803077c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8030780:	d028      	beq.n	80307d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8030782:	f7f7 feab 	bl	80284dc <HAL_GetTick>
 8030786:	4602      	mov	r2, r0
 8030788:	687b      	ldr	r3, [r7, #4]
 803078a:	1ad3      	subs	r3, r2, r3
 803078c:	68ba      	ldr	r2, [r7, #8]
 803078e:	429a      	cmp	r2, r3
 8030790:	d302      	bcc.n	8030798 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8030792:	68bb      	ldr	r3, [r7, #8]
 8030794:	2b00      	cmp	r3, #0
 8030796:	d11d      	bne.n	80307d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8030798:	68fb      	ldr	r3, [r7, #12]
 803079a:	681b      	ldr	r3, [r3, #0]
 803079c:	695b      	ldr	r3, [r3, #20]
 803079e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80307a2:	2b80      	cmp	r3, #128	@ 0x80
 80307a4:	d016      	beq.n	80307d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80307a6:	68fb      	ldr	r3, [r7, #12]
 80307a8:	2200      	movs	r2, #0
 80307aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80307ac:	68fb      	ldr	r3, [r7, #12]
 80307ae:	2220      	movs	r2, #32
 80307b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80307b4:	68fb      	ldr	r3, [r7, #12]
 80307b6:	2200      	movs	r2, #0
 80307b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80307bc:	68fb      	ldr	r3, [r7, #12]
 80307be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80307c0:	f043 0220 	orr.w	r2, r3, #32
 80307c4:	68fb      	ldr	r3, [r7, #12]
 80307c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80307c8:	68fb      	ldr	r3, [r7, #12]
 80307ca:	2200      	movs	r2, #0
 80307cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80307d0:	2301      	movs	r3, #1
 80307d2:	e007      	b.n	80307e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80307d4:	68fb      	ldr	r3, [r7, #12]
 80307d6:	681b      	ldr	r3, [r3, #0]
 80307d8:	695b      	ldr	r3, [r3, #20]
 80307da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80307de:	2b80      	cmp	r3, #128	@ 0x80
 80307e0:	d1c3      	bne.n	803076a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80307e2:	2300      	movs	r3, #0
}
 80307e4:	4618      	mov	r0, r3
 80307e6:	3710      	adds	r7, #16
 80307e8:	46bd      	mov	sp, r7
 80307ea:	bd80      	pop	{r7, pc}

080307ec <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80307ec:	b580      	push	{r7, lr}
 80307ee:	b084      	sub	sp, #16
 80307f0:	af00      	add	r7, sp, #0
 80307f2:	60f8      	str	r0, [r7, #12]
 80307f4:	60b9      	str	r1, [r7, #8]
 80307f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80307f8:	e034      	b.n	8030864 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80307fa:	68f8      	ldr	r0, [r7, #12]
 80307fc:	f000 f870 	bl	80308e0 <I2C_IsAcknowledgeFailed>
 8030800:	4603      	mov	r3, r0
 8030802:	2b00      	cmp	r3, #0
 8030804:	d001      	beq.n	803080a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8030806:	2301      	movs	r3, #1
 8030808:	e034      	b.n	8030874 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 803080a:	68bb      	ldr	r3, [r7, #8]
 803080c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8030810:	d028      	beq.n	8030864 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8030812:	f7f7 fe63 	bl	80284dc <HAL_GetTick>
 8030816:	4602      	mov	r2, r0
 8030818:	687b      	ldr	r3, [r7, #4]
 803081a:	1ad3      	subs	r3, r2, r3
 803081c:	68ba      	ldr	r2, [r7, #8]
 803081e:	429a      	cmp	r2, r3
 8030820:	d302      	bcc.n	8030828 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8030822:	68bb      	ldr	r3, [r7, #8]
 8030824:	2b00      	cmp	r3, #0
 8030826:	d11d      	bne.n	8030864 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8030828:	68fb      	ldr	r3, [r7, #12]
 803082a:	681b      	ldr	r3, [r3, #0]
 803082c:	695b      	ldr	r3, [r3, #20]
 803082e:	f003 0304 	and.w	r3, r3, #4
 8030832:	2b04      	cmp	r3, #4
 8030834:	d016      	beq.n	8030864 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8030836:	68fb      	ldr	r3, [r7, #12]
 8030838:	2200      	movs	r2, #0
 803083a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 803083c:	68fb      	ldr	r3, [r7, #12]
 803083e:	2220      	movs	r2, #32
 8030840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8030844:	68fb      	ldr	r3, [r7, #12]
 8030846:	2200      	movs	r2, #0
 8030848:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 803084c:	68fb      	ldr	r3, [r7, #12]
 803084e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8030850:	f043 0220 	orr.w	r2, r3, #32
 8030854:	68fb      	ldr	r3, [r7, #12]
 8030856:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8030858:	68fb      	ldr	r3, [r7, #12]
 803085a:	2200      	movs	r2, #0
 803085c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8030860:	2301      	movs	r3, #1
 8030862:	e007      	b.n	8030874 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8030864:	68fb      	ldr	r3, [r7, #12]
 8030866:	681b      	ldr	r3, [r3, #0]
 8030868:	695b      	ldr	r3, [r3, #20]
 803086a:	f003 0304 	and.w	r3, r3, #4
 803086e:	2b04      	cmp	r3, #4
 8030870:	d1c3      	bne.n	80307fa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8030872:	2300      	movs	r3, #0
}
 8030874:	4618      	mov	r0, r3
 8030876:	3710      	adds	r7, #16
 8030878:	46bd      	mov	sp, r7
 803087a:	bd80      	pop	{r7, pc}

0803087c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 803087c:	b480      	push	{r7}
 803087e:	b085      	sub	sp, #20
 8030880:	af00      	add	r7, sp, #0
 8030882:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8030884:	2300      	movs	r3, #0
 8030886:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8030888:	4b13      	ldr	r3, [pc, #76]	@ (80308d8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 803088a:	681b      	ldr	r3, [r3, #0]
 803088c:	08db      	lsrs	r3, r3, #3
 803088e:	4a13      	ldr	r2, [pc, #76]	@ (80308dc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8030890:	fba2 2303 	umull	r2, r3, r2, r3
 8030894:	0a1a      	lsrs	r2, r3, #8
 8030896:	4613      	mov	r3, r2
 8030898:	009b      	lsls	r3, r3, #2
 803089a:	4413      	add	r3, r2
 803089c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 803089e:	68fb      	ldr	r3, [r7, #12]
 80308a0:	3b01      	subs	r3, #1
 80308a2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80308a4:	68fb      	ldr	r3, [r7, #12]
 80308a6:	2b00      	cmp	r3, #0
 80308a8:	d107      	bne.n	80308ba <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80308aa:	687b      	ldr	r3, [r7, #4]
 80308ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80308ae:	f043 0220 	orr.w	r2, r3, #32
 80308b2:	687b      	ldr	r3, [r7, #4]
 80308b4:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80308b6:	2301      	movs	r3, #1
 80308b8:	e008      	b.n	80308cc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80308ba:	687b      	ldr	r3, [r7, #4]
 80308bc:	681b      	ldr	r3, [r3, #0]
 80308be:	681b      	ldr	r3, [r3, #0]
 80308c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80308c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80308c8:	d0e9      	beq.n	803089e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80308ca:	2300      	movs	r3, #0
}
 80308cc:	4618      	mov	r0, r3
 80308ce:	3714      	adds	r7, #20
 80308d0:	46bd      	mov	sp, r7
 80308d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80308d6:	4770      	bx	lr
 80308d8:	2000001c 	.word	0x2000001c
 80308dc:	14f8b589 	.word	0x14f8b589

080308e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80308e0:	b480      	push	{r7}
 80308e2:	b083      	sub	sp, #12
 80308e4:	af00      	add	r7, sp, #0
 80308e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80308e8:	687b      	ldr	r3, [r7, #4]
 80308ea:	681b      	ldr	r3, [r3, #0]
 80308ec:	695b      	ldr	r3, [r3, #20]
 80308ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80308f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80308f6:	d11b      	bne.n	8030930 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80308f8:	687b      	ldr	r3, [r7, #4]
 80308fa:	681b      	ldr	r3, [r3, #0]
 80308fc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8030900:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8030902:	687b      	ldr	r3, [r7, #4]
 8030904:	2200      	movs	r2, #0
 8030906:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8030908:	687b      	ldr	r3, [r7, #4]
 803090a:	2220      	movs	r2, #32
 803090c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8030910:	687b      	ldr	r3, [r7, #4]
 8030912:	2200      	movs	r2, #0
 8030914:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8030918:	687b      	ldr	r3, [r7, #4]
 803091a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 803091c:	f043 0204 	orr.w	r2, r3, #4
 8030920:	687b      	ldr	r3, [r7, #4]
 8030922:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8030924:	687b      	ldr	r3, [r7, #4]
 8030926:	2200      	movs	r2, #0
 8030928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 803092c:	2301      	movs	r3, #1
 803092e:	e000      	b.n	8030932 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8030930:	2300      	movs	r3, #0
}
 8030932:	4618      	mov	r0, r3
 8030934:	370c      	adds	r7, #12
 8030936:	46bd      	mov	sp, r7
 8030938:	f85d 7b04 	ldr.w	r7, [sp], #4
 803093c:	4770      	bx	lr

0803093e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 803093e:	b480      	push	{r7}
 8030940:	b083      	sub	sp, #12
 8030942:	af00      	add	r7, sp, #0
 8030944:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8030946:	687b      	ldr	r3, [r7, #4]
 8030948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 803094a:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 803094e:	d103      	bne.n	8030958 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8030950:	687b      	ldr	r3, [r7, #4]
 8030952:	2201      	movs	r2, #1
 8030954:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8030956:	e007      	b.n	8030968 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8030958:	687b      	ldr	r3, [r7, #4]
 803095a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 803095c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8030960:	d102      	bne.n	8030968 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8030962:	687b      	ldr	r3, [r7, #4]
 8030964:	2208      	movs	r2, #8
 8030966:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8030968:	bf00      	nop
 803096a:	370c      	adds	r7, #12
 803096c:	46bd      	mov	sp, r7
 803096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030972:	4770      	bx	lr

08030974 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8030974:	b480      	push	{r7}
 8030976:	b083      	sub	sp, #12
 8030978:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 803097a:	4b06      	ldr	r3, [pc, #24]	@ (8030994 <HAL_PWR_EnableBkUpAccess+0x20>)
 803097c:	2201      	movs	r2, #1
 803097e:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8030980:	4b05      	ldr	r3, [pc, #20]	@ (8030998 <HAL_PWR_EnableBkUpAccess+0x24>)
 8030982:	681b      	ldr	r3, [r3, #0]
 8030984:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8030986:	687b      	ldr	r3, [r7, #4]
}
 8030988:	bf00      	nop
 803098a:	370c      	adds	r7, #12
 803098c:	46bd      	mov	sp, r7
 803098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030992:	4770      	bx	lr
 8030994:	420e0020 	.word	0x420e0020
 8030998:	40007000 	.word	0x40007000

0803099c <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 803099c:	b580      	push	{r7, lr}
 803099e:	b082      	sub	sp, #8
 80309a0:	af00      	add	r7, sp, #0
 80309a2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
 80309a4:	687b      	ldr	r3, [r7, #4]
 80309a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80309aa:	d004      	beq.n	80309b6 <HAL_PWR_EnableWakeUpPin+0x1a>
 80309ac:	f44f 71ac 	mov.w	r1, #344	@ 0x158
 80309b0:	4806      	ldr	r0, [pc, #24]	@ (80309cc <HAL_PWR_EnableWakeUpPin+0x30>)
 80309b2:	f7f7 f9a0 	bl	8027cf6 <assert_failed>

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 80309b6:	4b06      	ldr	r3, [pc, #24]	@ (80309d0 <HAL_PWR_EnableWakeUpPin+0x34>)
 80309b8:	685a      	ldr	r2, [r3, #4]
 80309ba:	4905      	ldr	r1, [pc, #20]	@ (80309d0 <HAL_PWR_EnableWakeUpPin+0x34>)
 80309bc:	687b      	ldr	r3, [r7, #4]
 80309be:	4313      	orrs	r3, r2
 80309c0:	604b      	str	r3, [r1, #4]
}
 80309c2:	bf00      	nop
 80309c4:	3708      	adds	r7, #8
 80309c6:	46bd      	mov	sp, r7
 80309c8:	bd80      	pop	{r7, pc}
 80309ca:	bf00      	nop
 80309cc:	08038604 	.word	0x08038604
 80309d0:	40007000 	.word	0x40007000

080309d4 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFE_NO_EVT_CLEAR : Enter STOP mode with WFE instruction and
  *                                                  no clear of pending event before.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80309d4:	b580      	push	{r7, lr}
 80309d6:	b082      	sub	sp, #8
 80309d8:	af00      	add	r7, sp, #0
 80309da:	6078      	str	r0, [r7, #4]
 80309dc:	460b      	mov	r3, r1
 80309de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
 80309e0:	687b      	ldr	r3, [r7, #4]
 80309e2:	2b00      	cmp	r3, #0
 80309e4:	d007      	beq.n	80309f6 <HAL_PWR_EnterSTOPMode+0x22>
 80309e6:	687b      	ldr	r3, [r7, #4]
 80309e8:	2b01      	cmp	r3, #1
 80309ea:	d004      	beq.n	80309f6 <HAL_PWR_EnterSTOPMode+0x22>
 80309ec:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 80309f0:	4819      	ldr	r0, [pc, #100]	@ (8030a58 <HAL_PWR_EnterSTOPMode+0x84>)
 80309f2:	f7f7 f980 	bl	8027cf6 <assert_failed>
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
 80309f6:	78fb      	ldrb	r3, [r7, #3]
 80309f8:	2b01      	cmp	r3, #1
 80309fa:	d00a      	beq.n	8030a12 <HAL_PWR_EnterSTOPMode+0x3e>
 80309fc:	78fb      	ldrb	r3, [r7, #3]
 80309fe:	2b02      	cmp	r3, #2
 8030a00:	d007      	beq.n	8030a12 <HAL_PWR_EnterSTOPMode+0x3e>
 8030a02:	78fb      	ldrb	r3, [r7, #3]
 8030a04:	2b03      	cmp	r3, #3
 8030a06:	d004      	beq.n	8030a12 <HAL_PWR_EnterSTOPMode+0x3e>
 8030a08:	f240 11c1 	movw	r1, #449	@ 0x1c1
 8030a0c:	4812      	ldr	r0, [pc, #72]	@ (8030a58 <HAL_PWR_EnterSTOPMode+0x84>)
 8030a0e:	f7f7 f972 	bl	8027cf6 <assert_failed>
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 8030a12:	4b12      	ldr	r3, [pc, #72]	@ (8030a5c <HAL_PWR_EnterSTOPMode+0x88>)
 8030a14:	681b      	ldr	r3, [r3, #0]
 8030a16:	f023 0203 	bic.w	r2, r3, #3
 8030a1a:	4910      	ldr	r1, [pc, #64]	@ (8030a5c <HAL_PWR_EnterSTOPMode+0x88>)
 8030a1c:	687b      	ldr	r3, [r7, #4]
 8030a1e:	4313      	orrs	r3, r2
 8030a20:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8030a22:	4b0f      	ldr	r3, [pc, #60]	@ (8030a60 <HAL_PWR_EnterSTOPMode+0x8c>)
 8030a24:	691b      	ldr	r3, [r3, #16]
 8030a26:	4a0e      	ldr	r2, [pc, #56]	@ (8030a60 <HAL_PWR_EnterSTOPMode+0x8c>)
 8030a28:	f043 0304 	orr.w	r3, r3, #4
 8030a2c:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8030a2e:	78fb      	ldrb	r3, [r7, #3]
 8030a30:	2b01      	cmp	r3, #1
 8030a32:	d101      	bne.n	8030a38 <HAL_PWR_EnterSTOPMode+0x64>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8030a34:	bf30      	wfi
 8030a36:	e005      	b.n	8030a44 <HAL_PWR_EnterSTOPMode+0x70>
  }
  else
  {
    if(STOPEntry != PWR_STOPENTRY_WFE_NO_EVT_CLEAR)
 8030a38:	78fb      	ldrb	r3, [r7, #3]
 8030a3a:	2b03      	cmp	r3, #3
 8030a3c:	d001      	beq.n	8030a42 <HAL_PWR_EnterSTOPMode+0x6e>
    {
      /* Clear all pending event */
      __SEV();
 8030a3e:	bf40      	sev
      __WFE();
 8030a40:	bf20      	wfe
    }
    /* Request Wait For Event */
    __WFE();
 8030a42:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 8030a44:	4b06      	ldr	r3, [pc, #24]	@ (8030a60 <HAL_PWR_EnterSTOPMode+0x8c>)
 8030a46:	691b      	ldr	r3, [r3, #16]
 8030a48:	4a05      	ldr	r2, [pc, #20]	@ (8030a60 <HAL_PWR_EnterSTOPMode+0x8c>)
 8030a4a:	f023 0304 	bic.w	r3, r3, #4
 8030a4e:	6113      	str	r3, [r2, #16]
}
 8030a50:	bf00      	nop
 8030a52:	3708      	adds	r7, #8
 8030a54:	46bd      	mov	sp, r7
 8030a56:	bd80      	pop	{r7, pc}
 8030a58:	08038604 	.word	0x08038604
 8030a5c:	40007000 	.word	0x40007000
 8030a60:	e000ed00 	.word	0xe000ed00

08030a64 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8030a64:	b580      	push	{r7, lr}
 8030a66:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8030a68:	4b06      	ldr	r3, [pc, #24]	@ (8030a84 <HAL_PWR_PVD_IRQHandler+0x20>)
 8030a6a:	695b      	ldr	r3, [r3, #20]
 8030a6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8030a70:	2b00      	cmp	r3, #0
 8030a72:	d005      	beq.n	8030a80 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8030a74:	f000 f808 	bl	8030a88 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8030a78:	4b02      	ldr	r3, [pc, #8]	@ (8030a84 <HAL_PWR_PVD_IRQHandler+0x20>)
 8030a7a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8030a7e:	615a      	str	r2, [r3, #20]
  }
}
 8030a80:	bf00      	nop
 8030a82:	bd80      	pop	{r7, pc}
 8030a84:	40013c00 	.word	0x40013c00

08030a88 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8030a88:	b480      	push	{r7}
 8030a8a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8030a8c:	bf00      	nop
 8030a8e:	46bd      	mov	sp, r7
 8030a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030a94:	4770      	bx	lr
	...

08030a98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8030a98:	b580      	push	{r7, lr}
 8030a9a:	b086      	sub	sp, #24
 8030a9c:	af00      	add	r7, sp, #0
 8030a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8030aa0:	687b      	ldr	r3, [r7, #4]
 8030aa2:	2b00      	cmp	r3, #0
 8030aa4:	d101      	bne.n	8030aaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8030aa6:	2301      	movs	r3, #1
 8030aa8:	e318      	b.n	80310dc <HAL_RCC_OscConfig+0x644>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8030aaa:	687b      	ldr	r3, [r7, #4]
 8030aac:	681b      	ldr	r3, [r3, #0]
 8030aae:	2b0f      	cmp	r3, #15
 8030ab0:	d903      	bls.n	8030aba <HAL_RCC_OscConfig+0x22>
 8030ab2:	21e6      	movs	r1, #230	@ 0xe6
 8030ab4:	4897      	ldr	r0, [pc, #604]	@ (8030d14 <HAL_RCC_OscConfig+0x27c>)
 8030ab6:	f7f7 f91e 	bl	8027cf6 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8030aba:	687b      	ldr	r3, [r7, #4]
 8030abc:	681b      	ldr	r3, [r3, #0]
 8030abe:	f003 0301 	and.w	r3, r3, #1
 8030ac2:	2b00      	cmp	r3, #0
 8030ac4:	f000 8088 	beq.w	8030bd8 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8030ac8:	687b      	ldr	r3, [r7, #4]
 8030aca:	685b      	ldr	r3, [r3, #4]
 8030acc:	2b00      	cmp	r3, #0
 8030ace:	d00d      	beq.n	8030aec <HAL_RCC_OscConfig+0x54>
 8030ad0:	687b      	ldr	r3, [r7, #4]
 8030ad2:	685b      	ldr	r3, [r3, #4]
 8030ad4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8030ad8:	d008      	beq.n	8030aec <HAL_RCC_OscConfig+0x54>
 8030ada:	687b      	ldr	r3, [r7, #4]
 8030adc:	685b      	ldr	r3, [r3, #4]
 8030ade:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8030ae2:	d003      	beq.n	8030aec <HAL_RCC_OscConfig+0x54>
 8030ae4:	21eb      	movs	r1, #235	@ 0xeb
 8030ae6:	488b      	ldr	r0, [pc, #556]	@ (8030d14 <HAL_RCC_OscConfig+0x27c>)
 8030ae8:	f7f7 f905 	bl	8027cf6 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8030aec:	4b8a      	ldr	r3, [pc, #552]	@ (8030d18 <HAL_RCC_OscConfig+0x280>)
 8030aee:	689b      	ldr	r3, [r3, #8]
 8030af0:	f003 030c 	and.w	r3, r3, #12
 8030af4:	2b04      	cmp	r3, #4
 8030af6:	d00c      	beq.n	8030b12 <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8030af8:	4b87      	ldr	r3, [pc, #540]	@ (8030d18 <HAL_RCC_OscConfig+0x280>)
 8030afa:	689b      	ldr	r3, [r3, #8]
 8030afc:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8030b00:	2b08      	cmp	r3, #8
 8030b02:	d112      	bne.n	8030b2a <HAL_RCC_OscConfig+0x92>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8030b04:	4b84      	ldr	r3, [pc, #528]	@ (8030d18 <HAL_RCC_OscConfig+0x280>)
 8030b06:	685b      	ldr	r3, [r3, #4]
 8030b08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8030b0c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8030b10:	d10b      	bne.n	8030b2a <HAL_RCC_OscConfig+0x92>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8030b12:	4b81      	ldr	r3, [pc, #516]	@ (8030d18 <HAL_RCC_OscConfig+0x280>)
 8030b14:	681b      	ldr	r3, [r3, #0]
 8030b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8030b1a:	2b00      	cmp	r3, #0
 8030b1c:	d05b      	beq.n	8030bd6 <HAL_RCC_OscConfig+0x13e>
 8030b1e:	687b      	ldr	r3, [r7, #4]
 8030b20:	685b      	ldr	r3, [r3, #4]
 8030b22:	2b00      	cmp	r3, #0
 8030b24:	d157      	bne.n	8030bd6 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8030b26:	2301      	movs	r3, #1
 8030b28:	e2d8      	b.n	80310dc <HAL_RCC_OscConfig+0x644>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8030b2a:	687b      	ldr	r3, [r7, #4]
 8030b2c:	685b      	ldr	r3, [r3, #4]
 8030b2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8030b32:	d106      	bne.n	8030b42 <HAL_RCC_OscConfig+0xaa>
 8030b34:	4b78      	ldr	r3, [pc, #480]	@ (8030d18 <HAL_RCC_OscConfig+0x280>)
 8030b36:	681b      	ldr	r3, [r3, #0]
 8030b38:	4a77      	ldr	r2, [pc, #476]	@ (8030d18 <HAL_RCC_OscConfig+0x280>)
 8030b3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8030b3e:	6013      	str	r3, [r2, #0]
 8030b40:	e01d      	b.n	8030b7e <HAL_RCC_OscConfig+0xe6>
 8030b42:	687b      	ldr	r3, [r7, #4]
 8030b44:	685b      	ldr	r3, [r3, #4]
 8030b46:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8030b4a:	d10c      	bne.n	8030b66 <HAL_RCC_OscConfig+0xce>
 8030b4c:	4b72      	ldr	r3, [pc, #456]	@ (8030d18 <HAL_RCC_OscConfig+0x280>)
 8030b4e:	681b      	ldr	r3, [r3, #0]
 8030b50:	4a71      	ldr	r2, [pc, #452]	@ (8030d18 <HAL_RCC_OscConfig+0x280>)
 8030b52:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8030b56:	6013      	str	r3, [r2, #0]
 8030b58:	4b6f      	ldr	r3, [pc, #444]	@ (8030d18 <HAL_RCC_OscConfig+0x280>)
 8030b5a:	681b      	ldr	r3, [r3, #0]
 8030b5c:	4a6e      	ldr	r2, [pc, #440]	@ (8030d18 <HAL_RCC_OscConfig+0x280>)
 8030b5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8030b62:	6013      	str	r3, [r2, #0]
 8030b64:	e00b      	b.n	8030b7e <HAL_RCC_OscConfig+0xe6>
 8030b66:	4b6c      	ldr	r3, [pc, #432]	@ (8030d18 <HAL_RCC_OscConfig+0x280>)
 8030b68:	681b      	ldr	r3, [r3, #0]
 8030b6a:	4a6b      	ldr	r2, [pc, #428]	@ (8030d18 <HAL_RCC_OscConfig+0x280>)
 8030b6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8030b70:	6013      	str	r3, [r2, #0]
 8030b72:	4b69      	ldr	r3, [pc, #420]	@ (8030d18 <HAL_RCC_OscConfig+0x280>)
 8030b74:	681b      	ldr	r3, [r3, #0]
 8030b76:	4a68      	ldr	r2, [pc, #416]	@ (8030d18 <HAL_RCC_OscConfig+0x280>)
 8030b78:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8030b7c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8030b7e:	687b      	ldr	r3, [r7, #4]
 8030b80:	685b      	ldr	r3, [r3, #4]
 8030b82:	2b00      	cmp	r3, #0
 8030b84:	d013      	beq.n	8030bae <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8030b86:	f7f7 fca9 	bl	80284dc <HAL_GetTick>
 8030b8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8030b8c:	e008      	b.n	8030ba0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8030b8e:	f7f7 fca5 	bl	80284dc <HAL_GetTick>
 8030b92:	4602      	mov	r2, r0
 8030b94:	693b      	ldr	r3, [r7, #16]
 8030b96:	1ad3      	subs	r3, r2, r3
 8030b98:	2b64      	cmp	r3, #100	@ 0x64
 8030b9a:	d901      	bls.n	8030ba0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8030b9c:	2303      	movs	r3, #3
 8030b9e:	e29d      	b.n	80310dc <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8030ba0:	4b5d      	ldr	r3, [pc, #372]	@ (8030d18 <HAL_RCC_OscConfig+0x280>)
 8030ba2:	681b      	ldr	r3, [r3, #0]
 8030ba4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8030ba8:	2b00      	cmp	r3, #0
 8030baa:	d0f0      	beq.n	8030b8e <HAL_RCC_OscConfig+0xf6>
 8030bac:	e014      	b.n	8030bd8 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8030bae:	f7f7 fc95 	bl	80284dc <HAL_GetTick>
 8030bb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8030bb4:	e008      	b.n	8030bc8 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8030bb6:	f7f7 fc91 	bl	80284dc <HAL_GetTick>
 8030bba:	4602      	mov	r2, r0
 8030bbc:	693b      	ldr	r3, [r7, #16]
 8030bbe:	1ad3      	subs	r3, r2, r3
 8030bc0:	2b64      	cmp	r3, #100	@ 0x64
 8030bc2:	d901      	bls.n	8030bc8 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8030bc4:	2303      	movs	r3, #3
 8030bc6:	e289      	b.n	80310dc <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8030bc8:	4b53      	ldr	r3, [pc, #332]	@ (8030d18 <HAL_RCC_OscConfig+0x280>)
 8030bca:	681b      	ldr	r3, [r3, #0]
 8030bcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8030bd0:	2b00      	cmp	r3, #0
 8030bd2:	d1f0      	bne.n	8030bb6 <HAL_RCC_OscConfig+0x11e>
 8030bd4:	e000      	b.n	8030bd8 <HAL_RCC_OscConfig+0x140>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8030bd6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8030bd8:	687b      	ldr	r3, [r7, #4]
 8030bda:	681b      	ldr	r3, [r3, #0]
 8030bdc:	f003 0302 	and.w	r3, r3, #2
 8030be0:	2b00      	cmp	r3, #0
 8030be2:	d079      	beq.n	8030cd8 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8030be4:	687b      	ldr	r3, [r7, #4]
 8030be6:	68db      	ldr	r3, [r3, #12]
 8030be8:	2b00      	cmp	r3, #0
 8030bea:	d008      	beq.n	8030bfe <HAL_RCC_OscConfig+0x166>
 8030bec:	687b      	ldr	r3, [r7, #4]
 8030bee:	68db      	ldr	r3, [r3, #12]
 8030bf0:	2b01      	cmp	r3, #1
 8030bf2:	d004      	beq.n	8030bfe <HAL_RCC_OscConfig+0x166>
 8030bf4:	f240 111d 	movw	r1, #285	@ 0x11d
 8030bf8:	4846      	ldr	r0, [pc, #280]	@ (8030d14 <HAL_RCC_OscConfig+0x27c>)
 8030bfa:	f7f7 f87c 	bl	8027cf6 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8030bfe:	687b      	ldr	r3, [r7, #4]
 8030c00:	691b      	ldr	r3, [r3, #16]
 8030c02:	2b1f      	cmp	r3, #31
 8030c04:	d904      	bls.n	8030c10 <HAL_RCC_OscConfig+0x178>
 8030c06:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 8030c0a:	4842      	ldr	r0, [pc, #264]	@ (8030d14 <HAL_RCC_OscConfig+0x27c>)
 8030c0c:	f7f7 f873 	bl	8027cf6 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8030c10:	4b41      	ldr	r3, [pc, #260]	@ (8030d18 <HAL_RCC_OscConfig+0x280>)
 8030c12:	689b      	ldr	r3, [r3, #8]
 8030c14:	f003 030c 	and.w	r3, r3, #12
 8030c18:	2b00      	cmp	r3, #0
 8030c1a:	d00b      	beq.n	8030c34 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8030c1c:	4b3e      	ldr	r3, [pc, #248]	@ (8030d18 <HAL_RCC_OscConfig+0x280>)
 8030c1e:	689b      	ldr	r3, [r3, #8]
 8030c20:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8030c24:	2b08      	cmp	r3, #8
 8030c26:	d11c      	bne.n	8030c62 <HAL_RCC_OscConfig+0x1ca>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8030c28:	4b3b      	ldr	r3, [pc, #236]	@ (8030d18 <HAL_RCC_OscConfig+0x280>)
 8030c2a:	685b      	ldr	r3, [r3, #4]
 8030c2c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8030c30:	2b00      	cmp	r3, #0
 8030c32:	d116      	bne.n	8030c62 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8030c34:	4b38      	ldr	r3, [pc, #224]	@ (8030d18 <HAL_RCC_OscConfig+0x280>)
 8030c36:	681b      	ldr	r3, [r3, #0]
 8030c38:	f003 0302 	and.w	r3, r3, #2
 8030c3c:	2b00      	cmp	r3, #0
 8030c3e:	d005      	beq.n	8030c4c <HAL_RCC_OscConfig+0x1b4>
 8030c40:	687b      	ldr	r3, [r7, #4]
 8030c42:	68db      	ldr	r3, [r3, #12]
 8030c44:	2b01      	cmp	r3, #1
 8030c46:	d001      	beq.n	8030c4c <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8030c48:	2301      	movs	r3, #1
 8030c4a:	e247      	b.n	80310dc <HAL_RCC_OscConfig+0x644>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8030c4c:	4b32      	ldr	r3, [pc, #200]	@ (8030d18 <HAL_RCC_OscConfig+0x280>)
 8030c4e:	681b      	ldr	r3, [r3, #0]
 8030c50:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8030c54:	687b      	ldr	r3, [r7, #4]
 8030c56:	691b      	ldr	r3, [r3, #16]
 8030c58:	00db      	lsls	r3, r3, #3
 8030c5a:	492f      	ldr	r1, [pc, #188]	@ (8030d18 <HAL_RCC_OscConfig+0x280>)
 8030c5c:	4313      	orrs	r3, r2
 8030c5e:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8030c60:	e03a      	b.n	8030cd8 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8030c62:	687b      	ldr	r3, [r7, #4]
 8030c64:	68db      	ldr	r3, [r3, #12]
 8030c66:	2b00      	cmp	r3, #0
 8030c68:	d020      	beq.n	8030cac <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8030c6a:	4b2c      	ldr	r3, [pc, #176]	@ (8030d1c <HAL_RCC_OscConfig+0x284>)
 8030c6c:	2201      	movs	r2, #1
 8030c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8030c70:	f7f7 fc34 	bl	80284dc <HAL_GetTick>
 8030c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8030c76:	e008      	b.n	8030c8a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8030c78:	f7f7 fc30 	bl	80284dc <HAL_GetTick>
 8030c7c:	4602      	mov	r2, r0
 8030c7e:	693b      	ldr	r3, [r7, #16]
 8030c80:	1ad3      	subs	r3, r2, r3
 8030c82:	2b02      	cmp	r3, #2
 8030c84:	d901      	bls.n	8030c8a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8030c86:	2303      	movs	r3, #3
 8030c88:	e228      	b.n	80310dc <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8030c8a:	4b23      	ldr	r3, [pc, #140]	@ (8030d18 <HAL_RCC_OscConfig+0x280>)
 8030c8c:	681b      	ldr	r3, [r3, #0]
 8030c8e:	f003 0302 	and.w	r3, r3, #2
 8030c92:	2b00      	cmp	r3, #0
 8030c94:	d0f0      	beq.n	8030c78 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8030c96:	4b20      	ldr	r3, [pc, #128]	@ (8030d18 <HAL_RCC_OscConfig+0x280>)
 8030c98:	681b      	ldr	r3, [r3, #0]
 8030c9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8030c9e:	687b      	ldr	r3, [r7, #4]
 8030ca0:	691b      	ldr	r3, [r3, #16]
 8030ca2:	00db      	lsls	r3, r3, #3
 8030ca4:	491c      	ldr	r1, [pc, #112]	@ (8030d18 <HAL_RCC_OscConfig+0x280>)
 8030ca6:	4313      	orrs	r3, r2
 8030ca8:	600b      	str	r3, [r1, #0]
 8030caa:	e015      	b.n	8030cd8 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8030cac:	4b1b      	ldr	r3, [pc, #108]	@ (8030d1c <HAL_RCC_OscConfig+0x284>)
 8030cae:	2200      	movs	r2, #0
 8030cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8030cb2:	f7f7 fc13 	bl	80284dc <HAL_GetTick>
 8030cb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8030cb8:	e008      	b.n	8030ccc <HAL_RCC_OscConfig+0x234>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8030cba:	f7f7 fc0f 	bl	80284dc <HAL_GetTick>
 8030cbe:	4602      	mov	r2, r0
 8030cc0:	693b      	ldr	r3, [r7, #16]
 8030cc2:	1ad3      	subs	r3, r2, r3
 8030cc4:	2b02      	cmp	r3, #2
 8030cc6:	d901      	bls.n	8030ccc <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8030cc8:	2303      	movs	r3, #3
 8030cca:	e207      	b.n	80310dc <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8030ccc:	4b12      	ldr	r3, [pc, #72]	@ (8030d18 <HAL_RCC_OscConfig+0x280>)
 8030cce:	681b      	ldr	r3, [r3, #0]
 8030cd0:	f003 0302 	and.w	r3, r3, #2
 8030cd4:	2b00      	cmp	r3, #0
 8030cd6:	d1f0      	bne.n	8030cba <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8030cd8:	687b      	ldr	r3, [r7, #4]
 8030cda:	681b      	ldr	r3, [r3, #0]
 8030cdc:	f003 0308 	and.w	r3, r3, #8
 8030ce0:	2b00      	cmp	r3, #0
 8030ce2:	d045      	beq.n	8030d70 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8030ce4:	687b      	ldr	r3, [r7, #4]
 8030ce6:	695b      	ldr	r3, [r3, #20]
 8030ce8:	2b00      	cmp	r3, #0
 8030cea:	d008      	beq.n	8030cfe <HAL_RCC_OscConfig+0x266>
 8030cec:	687b      	ldr	r3, [r7, #4]
 8030cee:	695b      	ldr	r3, [r3, #20]
 8030cf0:	2b01      	cmp	r3, #1
 8030cf2:	d004      	beq.n	8030cfe <HAL_RCC_OscConfig+0x266>
 8030cf4:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 8030cf8:	4806      	ldr	r0, [pc, #24]	@ (8030d14 <HAL_RCC_OscConfig+0x27c>)
 8030cfa:	f7f6 fffc 	bl	8027cf6 <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8030cfe:	687b      	ldr	r3, [r7, #4]
 8030d00:	695b      	ldr	r3, [r3, #20]
 8030d02:	2b00      	cmp	r3, #0
 8030d04:	d01e      	beq.n	8030d44 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8030d06:	4b06      	ldr	r3, [pc, #24]	@ (8030d20 <HAL_RCC_OscConfig+0x288>)
 8030d08:	2201      	movs	r2, #1
 8030d0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8030d0c:	f7f7 fbe6 	bl	80284dc <HAL_GetTick>
 8030d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8030d12:	e010      	b.n	8030d36 <HAL_RCC_OscConfig+0x29e>
 8030d14:	08038678 	.word	0x08038678
 8030d18:	40023800 	.word	0x40023800
 8030d1c:	42470000 	.word	0x42470000
 8030d20:	42470e80 	.word	0x42470e80
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8030d24:	f7f7 fbda 	bl	80284dc <HAL_GetTick>
 8030d28:	4602      	mov	r2, r0
 8030d2a:	693b      	ldr	r3, [r7, #16]
 8030d2c:	1ad3      	subs	r3, r2, r3
 8030d2e:	2b02      	cmp	r3, #2
 8030d30:	d901      	bls.n	8030d36 <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 8030d32:	2303      	movs	r3, #3
 8030d34:	e1d2      	b.n	80310dc <HAL_RCC_OscConfig+0x644>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8030d36:	4b5e      	ldr	r3, [pc, #376]	@ (8030eb0 <HAL_RCC_OscConfig+0x418>)
 8030d38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8030d3a:	f003 0302 	and.w	r3, r3, #2
 8030d3e:	2b00      	cmp	r3, #0
 8030d40:	d0f0      	beq.n	8030d24 <HAL_RCC_OscConfig+0x28c>
 8030d42:	e015      	b.n	8030d70 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8030d44:	4b5b      	ldr	r3, [pc, #364]	@ (8030eb4 <HAL_RCC_OscConfig+0x41c>)
 8030d46:	2200      	movs	r2, #0
 8030d48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8030d4a:	f7f7 fbc7 	bl	80284dc <HAL_GetTick>
 8030d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8030d50:	e008      	b.n	8030d64 <HAL_RCC_OscConfig+0x2cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8030d52:	f7f7 fbc3 	bl	80284dc <HAL_GetTick>
 8030d56:	4602      	mov	r2, r0
 8030d58:	693b      	ldr	r3, [r7, #16]
 8030d5a:	1ad3      	subs	r3, r2, r3
 8030d5c:	2b02      	cmp	r3, #2
 8030d5e:	d901      	bls.n	8030d64 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8030d60:	2303      	movs	r3, #3
 8030d62:	e1bb      	b.n	80310dc <HAL_RCC_OscConfig+0x644>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8030d64:	4b52      	ldr	r3, [pc, #328]	@ (8030eb0 <HAL_RCC_OscConfig+0x418>)
 8030d66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8030d68:	f003 0302 	and.w	r3, r3, #2
 8030d6c:	2b00      	cmp	r3, #0
 8030d6e:	d1f0      	bne.n	8030d52 <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8030d70:	687b      	ldr	r3, [r7, #4]
 8030d72:	681b      	ldr	r3, [r3, #0]
 8030d74:	f003 0304 	and.w	r3, r3, #4
 8030d78:	2b00      	cmp	r3, #0
 8030d7a:	f000 80b0 	beq.w	8030ede <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 8030d7e:	2300      	movs	r3, #0
 8030d80:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8030d82:	687b      	ldr	r3, [r7, #4]
 8030d84:	689b      	ldr	r3, [r3, #8]
 8030d86:	2b00      	cmp	r3, #0
 8030d88:	d00c      	beq.n	8030da4 <HAL_RCC_OscConfig+0x30c>
 8030d8a:	687b      	ldr	r3, [r7, #4]
 8030d8c:	689b      	ldr	r3, [r3, #8]
 8030d8e:	2b01      	cmp	r3, #1
 8030d90:	d008      	beq.n	8030da4 <HAL_RCC_OscConfig+0x30c>
 8030d92:	687b      	ldr	r3, [r7, #4]
 8030d94:	689b      	ldr	r3, [r3, #8]
 8030d96:	2b05      	cmp	r3, #5
 8030d98:	d004      	beq.n	8030da4 <HAL_RCC_OscConfig+0x30c>
 8030d9a:	f44f 71c5 	mov.w	r1, #394	@ 0x18a
 8030d9e:	4846      	ldr	r0, [pc, #280]	@ (8030eb8 <HAL_RCC_OscConfig+0x420>)
 8030da0:	f7f6 ffa9 	bl	8027cf6 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8030da4:	4b42      	ldr	r3, [pc, #264]	@ (8030eb0 <HAL_RCC_OscConfig+0x418>)
 8030da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8030da8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8030dac:	2b00      	cmp	r3, #0
 8030dae:	d10f      	bne.n	8030dd0 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8030db0:	2300      	movs	r3, #0
 8030db2:	60bb      	str	r3, [r7, #8]
 8030db4:	4b3e      	ldr	r3, [pc, #248]	@ (8030eb0 <HAL_RCC_OscConfig+0x418>)
 8030db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8030db8:	4a3d      	ldr	r2, [pc, #244]	@ (8030eb0 <HAL_RCC_OscConfig+0x418>)
 8030dba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8030dbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8030dc0:	4b3b      	ldr	r3, [pc, #236]	@ (8030eb0 <HAL_RCC_OscConfig+0x418>)
 8030dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8030dc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8030dc8:	60bb      	str	r3, [r7, #8]
 8030dca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8030dcc:	2301      	movs	r3, #1
 8030dce:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8030dd0:	4b3a      	ldr	r3, [pc, #232]	@ (8030ebc <HAL_RCC_OscConfig+0x424>)
 8030dd2:	681b      	ldr	r3, [r3, #0]
 8030dd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8030dd8:	2b00      	cmp	r3, #0
 8030dda:	d118      	bne.n	8030e0e <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8030ddc:	4b37      	ldr	r3, [pc, #220]	@ (8030ebc <HAL_RCC_OscConfig+0x424>)
 8030dde:	681b      	ldr	r3, [r3, #0]
 8030de0:	4a36      	ldr	r2, [pc, #216]	@ (8030ebc <HAL_RCC_OscConfig+0x424>)
 8030de2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8030de6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8030de8:	f7f7 fb78 	bl	80284dc <HAL_GetTick>
 8030dec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8030dee:	e008      	b.n	8030e02 <HAL_RCC_OscConfig+0x36a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8030df0:	f7f7 fb74 	bl	80284dc <HAL_GetTick>
 8030df4:	4602      	mov	r2, r0
 8030df6:	693b      	ldr	r3, [r7, #16]
 8030df8:	1ad3      	subs	r3, r2, r3
 8030dfa:	2b02      	cmp	r3, #2
 8030dfc:	d901      	bls.n	8030e02 <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8030dfe:	2303      	movs	r3, #3
 8030e00:	e16c      	b.n	80310dc <HAL_RCC_OscConfig+0x644>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8030e02:	4b2e      	ldr	r3, [pc, #184]	@ (8030ebc <HAL_RCC_OscConfig+0x424>)
 8030e04:	681b      	ldr	r3, [r3, #0]
 8030e06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8030e0a:	2b00      	cmp	r3, #0
 8030e0c:	d0f0      	beq.n	8030df0 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8030e0e:	687b      	ldr	r3, [r7, #4]
 8030e10:	689b      	ldr	r3, [r3, #8]
 8030e12:	2b01      	cmp	r3, #1
 8030e14:	d106      	bne.n	8030e24 <HAL_RCC_OscConfig+0x38c>
 8030e16:	4b26      	ldr	r3, [pc, #152]	@ (8030eb0 <HAL_RCC_OscConfig+0x418>)
 8030e18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8030e1a:	4a25      	ldr	r2, [pc, #148]	@ (8030eb0 <HAL_RCC_OscConfig+0x418>)
 8030e1c:	f043 0301 	orr.w	r3, r3, #1
 8030e20:	6713      	str	r3, [r2, #112]	@ 0x70
 8030e22:	e01c      	b.n	8030e5e <HAL_RCC_OscConfig+0x3c6>
 8030e24:	687b      	ldr	r3, [r7, #4]
 8030e26:	689b      	ldr	r3, [r3, #8]
 8030e28:	2b05      	cmp	r3, #5
 8030e2a:	d10c      	bne.n	8030e46 <HAL_RCC_OscConfig+0x3ae>
 8030e2c:	4b20      	ldr	r3, [pc, #128]	@ (8030eb0 <HAL_RCC_OscConfig+0x418>)
 8030e2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8030e30:	4a1f      	ldr	r2, [pc, #124]	@ (8030eb0 <HAL_RCC_OscConfig+0x418>)
 8030e32:	f043 0304 	orr.w	r3, r3, #4
 8030e36:	6713      	str	r3, [r2, #112]	@ 0x70
 8030e38:	4b1d      	ldr	r3, [pc, #116]	@ (8030eb0 <HAL_RCC_OscConfig+0x418>)
 8030e3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8030e3c:	4a1c      	ldr	r2, [pc, #112]	@ (8030eb0 <HAL_RCC_OscConfig+0x418>)
 8030e3e:	f043 0301 	orr.w	r3, r3, #1
 8030e42:	6713      	str	r3, [r2, #112]	@ 0x70
 8030e44:	e00b      	b.n	8030e5e <HAL_RCC_OscConfig+0x3c6>
 8030e46:	4b1a      	ldr	r3, [pc, #104]	@ (8030eb0 <HAL_RCC_OscConfig+0x418>)
 8030e48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8030e4a:	4a19      	ldr	r2, [pc, #100]	@ (8030eb0 <HAL_RCC_OscConfig+0x418>)
 8030e4c:	f023 0301 	bic.w	r3, r3, #1
 8030e50:	6713      	str	r3, [r2, #112]	@ 0x70
 8030e52:	4b17      	ldr	r3, [pc, #92]	@ (8030eb0 <HAL_RCC_OscConfig+0x418>)
 8030e54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8030e56:	4a16      	ldr	r2, [pc, #88]	@ (8030eb0 <HAL_RCC_OscConfig+0x418>)
 8030e58:	f023 0304 	bic.w	r3, r3, #4
 8030e5c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8030e5e:	687b      	ldr	r3, [r7, #4]
 8030e60:	689b      	ldr	r3, [r3, #8]
 8030e62:	2b00      	cmp	r3, #0
 8030e64:	d015      	beq.n	8030e92 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8030e66:	f7f7 fb39 	bl	80284dc <HAL_GetTick>
 8030e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8030e6c:	e00a      	b.n	8030e84 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8030e6e:	f7f7 fb35 	bl	80284dc <HAL_GetTick>
 8030e72:	4602      	mov	r2, r0
 8030e74:	693b      	ldr	r3, [r7, #16]
 8030e76:	1ad3      	subs	r3, r2, r3
 8030e78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8030e7c:	4293      	cmp	r3, r2
 8030e7e:	d901      	bls.n	8030e84 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8030e80:	2303      	movs	r3, #3
 8030e82:	e12b      	b.n	80310dc <HAL_RCC_OscConfig+0x644>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8030e84:	4b0a      	ldr	r3, [pc, #40]	@ (8030eb0 <HAL_RCC_OscConfig+0x418>)
 8030e86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8030e88:	f003 0302 	and.w	r3, r3, #2
 8030e8c:	2b00      	cmp	r3, #0
 8030e8e:	d0ee      	beq.n	8030e6e <HAL_RCC_OscConfig+0x3d6>
 8030e90:	e01c      	b.n	8030ecc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8030e92:	f7f7 fb23 	bl	80284dc <HAL_GetTick>
 8030e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8030e98:	e012      	b.n	8030ec0 <HAL_RCC_OscConfig+0x428>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8030e9a:	f7f7 fb1f 	bl	80284dc <HAL_GetTick>
 8030e9e:	4602      	mov	r2, r0
 8030ea0:	693b      	ldr	r3, [r7, #16]
 8030ea2:	1ad3      	subs	r3, r2, r3
 8030ea4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8030ea8:	4293      	cmp	r3, r2
 8030eaa:	d909      	bls.n	8030ec0 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8030eac:	2303      	movs	r3, #3
 8030eae:	e115      	b.n	80310dc <HAL_RCC_OscConfig+0x644>
 8030eb0:	40023800 	.word	0x40023800
 8030eb4:	42470e80 	.word	0x42470e80
 8030eb8:	08038678 	.word	0x08038678
 8030ebc:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8030ec0:	4b88      	ldr	r3, [pc, #544]	@ (80310e4 <HAL_RCC_OscConfig+0x64c>)
 8030ec2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8030ec4:	f003 0302 	and.w	r3, r3, #2
 8030ec8:	2b00      	cmp	r3, #0
 8030eca:	d1e6      	bne.n	8030e9a <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8030ecc:	7dfb      	ldrb	r3, [r7, #23]
 8030ece:	2b01      	cmp	r3, #1
 8030ed0:	d105      	bne.n	8030ede <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8030ed2:	4b84      	ldr	r3, [pc, #528]	@ (80310e4 <HAL_RCC_OscConfig+0x64c>)
 8030ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8030ed6:	4a83      	ldr	r2, [pc, #524]	@ (80310e4 <HAL_RCC_OscConfig+0x64c>)
 8030ed8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8030edc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8030ede:	687b      	ldr	r3, [r7, #4]
 8030ee0:	699b      	ldr	r3, [r3, #24]
 8030ee2:	2b00      	cmp	r3, #0
 8030ee4:	d00c      	beq.n	8030f00 <HAL_RCC_OscConfig+0x468>
 8030ee6:	687b      	ldr	r3, [r7, #4]
 8030ee8:	699b      	ldr	r3, [r3, #24]
 8030eea:	2b01      	cmp	r3, #1
 8030eec:	d008      	beq.n	8030f00 <HAL_RCC_OscConfig+0x468>
 8030eee:	687b      	ldr	r3, [r7, #4]
 8030ef0:	699b      	ldr	r3, [r3, #24]
 8030ef2:	2b02      	cmp	r3, #2
 8030ef4:	d004      	beq.n	8030f00 <HAL_RCC_OscConfig+0x468>
 8030ef6:	f240 11cd 	movw	r1, #461	@ 0x1cd
 8030efa:	487b      	ldr	r0, [pc, #492]	@ (80310e8 <HAL_RCC_OscConfig+0x650>)
 8030efc:	f7f6 fefb 	bl	8027cf6 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8030f00:	687b      	ldr	r3, [r7, #4]
 8030f02:	699b      	ldr	r3, [r3, #24]
 8030f04:	2b00      	cmp	r3, #0
 8030f06:	f000 80e8 	beq.w	80310da <HAL_RCC_OscConfig+0x642>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8030f0a:	4b76      	ldr	r3, [pc, #472]	@ (80310e4 <HAL_RCC_OscConfig+0x64c>)
 8030f0c:	689b      	ldr	r3, [r3, #8]
 8030f0e:	f003 030c 	and.w	r3, r3, #12
 8030f12:	2b08      	cmp	r3, #8
 8030f14:	f000 80a9 	beq.w	803106a <HAL_RCC_OscConfig+0x5d2>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8030f18:	687b      	ldr	r3, [r7, #4]
 8030f1a:	699b      	ldr	r3, [r3, #24]
 8030f1c:	2b02      	cmp	r3, #2
 8030f1e:	f040 808d 	bne.w	803103c <HAL_RCC_OscConfig+0x5a4>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8030f22:	687b      	ldr	r3, [r7, #4]
 8030f24:	69db      	ldr	r3, [r3, #28]
 8030f26:	2b00      	cmp	r3, #0
 8030f28:	d009      	beq.n	8030f3e <HAL_RCC_OscConfig+0x4a6>
 8030f2a:	687b      	ldr	r3, [r7, #4]
 8030f2c:	69db      	ldr	r3, [r3, #28]
 8030f2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8030f32:	d004      	beq.n	8030f3e <HAL_RCC_OscConfig+0x4a6>
 8030f34:	f44f 71eb 	mov.w	r1, #470	@ 0x1d6
 8030f38:	486b      	ldr	r0, [pc, #428]	@ (80310e8 <HAL_RCC_OscConfig+0x650>)
 8030f3a:	f7f6 fedc 	bl	8027cf6 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8030f3e:	687b      	ldr	r3, [r7, #4]
 8030f40:	6a1b      	ldr	r3, [r3, #32]
 8030f42:	2b01      	cmp	r3, #1
 8030f44:	d903      	bls.n	8030f4e <HAL_RCC_OscConfig+0x4b6>
 8030f46:	687b      	ldr	r3, [r7, #4]
 8030f48:	6a1b      	ldr	r3, [r3, #32]
 8030f4a:	2b3f      	cmp	r3, #63	@ 0x3f
 8030f4c:	d904      	bls.n	8030f58 <HAL_RCC_OscConfig+0x4c0>
 8030f4e:	f240 11d7 	movw	r1, #471	@ 0x1d7
 8030f52:	4865      	ldr	r0, [pc, #404]	@ (80310e8 <HAL_RCC_OscConfig+0x650>)
 8030f54:	f7f6 fecf 	bl	8027cf6 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8030f58:	687b      	ldr	r3, [r7, #4]
 8030f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8030f5c:	2b31      	cmp	r3, #49	@ 0x31
 8030f5e:	d904      	bls.n	8030f6a <HAL_RCC_OscConfig+0x4d2>
 8030f60:	687b      	ldr	r3, [r7, #4]
 8030f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8030f64:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 8030f68:	d904      	bls.n	8030f74 <HAL_RCC_OscConfig+0x4dc>
 8030f6a:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
 8030f6e:	485e      	ldr	r0, [pc, #376]	@ (80310e8 <HAL_RCC_OscConfig+0x650>)
 8030f70:	f7f6 fec1 	bl	8027cf6 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8030f74:	687b      	ldr	r3, [r7, #4]
 8030f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8030f78:	2b02      	cmp	r3, #2
 8030f7a:	d010      	beq.n	8030f9e <HAL_RCC_OscConfig+0x506>
 8030f7c:	687b      	ldr	r3, [r7, #4]
 8030f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8030f80:	2b04      	cmp	r3, #4
 8030f82:	d00c      	beq.n	8030f9e <HAL_RCC_OscConfig+0x506>
 8030f84:	687b      	ldr	r3, [r7, #4]
 8030f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8030f88:	2b06      	cmp	r3, #6
 8030f8a:	d008      	beq.n	8030f9e <HAL_RCC_OscConfig+0x506>
 8030f8c:	687b      	ldr	r3, [r7, #4]
 8030f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8030f90:	2b08      	cmp	r3, #8
 8030f92:	d004      	beq.n	8030f9e <HAL_RCC_OscConfig+0x506>
 8030f94:	f240 11d9 	movw	r1, #473	@ 0x1d9
 8030f98:	4853      	ldr	r0, [pc, #332]	@ (80310e8 <HAL_RCC_OscConfig+0x650>)
 8030f9a:	f7f6 feac 	bl	8027cf6 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8030f9e:	687b      	ldr	r3, [r7, #4]
 8030fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8030fa2:	2b01      	cmp	r3, #1
 8030fa4:	d903      	bls.n	8030fae <HAL_RCC_OscConfig+0x516>
 8030fa6:	687b      	ldr	r3, [r7, #4]
 8030fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8030faa:	2b0f      	cmp	r3, #15
 8030fac:	d904      	bls.n	8030fb8 <HAL_RCC_OscConfig+0x520>
 8030fae:	f44f 71ed 	mov.w	r1, #474	@ 0x1da
 8030fb2:	484d      	ldr	r0, [pc, #308]	@ (80310e8 <HAL_RCC_OscConfig+0x650>)
 8030fb4:	f7f6 fe9f 	bl	8027cf6 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8030fb8:	4b4c      	ldr	r3, [pc, #304]	@ (80310ec <HAL_RCC_OscConfig+0x654>)
 8030fba:	2200      	movs	r2, #0
 8030fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8030fbe:	f7f7 fa8d 	bl	80284dc <HAL_GetTick>
 8030fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8030fc4:	e008      	b.n	8030fd8 <HAL_RCC_OscConfig+0x540>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8030fc6:	f7f7 fa89 	bl	80284dc <HAL_GetTick>
 8030fca:	4602      	mov	r2, r0
 8030fcc:	693b      	ldr	r3, [r7, #16]
 8030fce:	1ad3      	subs	r3, r2, r3
 8030fd0:	2b02      	cmp	r3, #2
 8030fd2:	d901      	bls.n	8030fd8 <HAL_RCC_OscConfig+0x540>
          {
            return HAL_TIMEOUT;
 8030fd4:	2303      	movs	r3, #3
 8030fd6:	e081      	b.n	80310dc <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8030fd8:	4b42      	ldr	r3, [pc, #264]	@ (80310e4 <HAL_RCC_OscConfig+0x64c>)
 8030fda:	681b      	ldr	r3, [r3, #0]
 8030fdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8030fe0:	2b00      	cmp	r3, #0
 8030fe2:	d1f0      	bne.n	8030fc6 <HAL_RCC_OscConfig+0x52e>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8030fe4:	687b      	ldr	r3, [r7, #4]
 8030fe6:	69da      	ldr	r2, [r3, #28]
 8030fe8:	687b      	ldr	r3, [r7, #4]
 8030fea:	6a1b      	ldr	r3, [r3, #32]
 8030fec:	431a      	orrs	r2, r3
 8030fee:	687b      	ldr	r3, [r7, #4]
 8030ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8030ff2:	019b      	lsls	r3, r3, #6
 8030ff4:	431a      	orrs	r2, r3
 8030ff6:	687b      	ldr	r3, [r7, #4]
 8030ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8030ffa:	085b      	lsrs	r3, r3, #1
 8030ffc:	3b01      	subs	r3, #1
 8030ffe:	041b      	lsls	r3, r3, #16
 8031000:	431a      	orrs	r2, r3
 8031002:	687b      	ldr	r3, [r7, #4]
 8031004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8031006:	061b      	lsls	r3, r3, #24
 8031008:	4936      	ldr	r1, [pc, #216]	@ (80310e4 <HAL_RCC_OscConfig+0x64c>)
 803100a:	4313      	orrs	r3, r2
 803100c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 803100e:	4b37      	ldr	r3, [pc, #220]	@ (80310ec <HAL_RCC_OscConfig+0x654>)
 8031010:	2201      	movs	r2, #1
 8031012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8031014:	f7f7 fa62 	bl	80284dc <HAL_GetTick>
 8031018:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 803101a:	e008      	b.n	803102e <HAL_RCC_OscConfig+0x596>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 803101c:	f7f7 fa5e 	bl	80284dc <HAL_GetTick>
 8031020:	4602      	mov	r2, r0
 8031022:	693b      	ldr	r3, [r7, #16]
 8031024:	1ad3      	subs	r3, r2, r3
 8031026:	2b02      	cmp	r3, #2
 8031028:	d901      	bls.n	803102e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 803102a:	2303      	movs	r3, #3
 803102c:	e056      	b.n	80310dc <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 803102e:	4b2d      	ldr	r3, [pc, #180]	@ (80310e4 <HAL_RCC_OscConfig+0x64c>)
 8031030:	681b      	ldr	r3, [r3, #0]
 8031032:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8031036:	2b00      	cmp	r3, #0
 8031038:	d0f0      	beq.n	803101c <HAL_RCC_OscConfig+0x584>
 803103a:	e04e      	b.n	80310da <HAL_RCC_OscConfig+0x642>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 803103c:	4b2b      	ldr	r3, [pc, #172]	@ (80310ec <HAL_RCC_OscConfig+0x654>)
 803103e:	2200      	movs	r2, #0
 8031040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8031042:	f7f7 fa4b 	bl	80284dc <HAL_GetTick>
 8031046:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8031048:	e008      	b.n	803105c <HAL_RCC_OscConfig+0x5c4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 803104a:	f7f7 fa47 	bl	80284dc <HAL_GetTick>
 803104e:	4602      	mov	r2, r0
 8031050:	693b      	ldr	r3, [r7, #16]
 8031052:	1ad3      	subs	r3, r2, r3
 8031054:	2b02      	cmp	r3, #2
 8031056:	d901      	bls.n	803105c <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8031058:	2303      	movs	r3, #3
 803105a:	e03f      	b.n	80310dc <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 803105c:	4b21      	ldr	r3, [pc, #132]	@ (80310e4 <HAL_RCC_OscConfig+0x64c>)
 803105e:	681b      	ldr	r3, [r3, #0]
 8031060:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8031064:	2b00      	cmp	r3, #0
 8031066:	d1f0      	bne.n	803104a <HAL_RCC_OscConfig+0x5b2>
 8031068:	e037      	b.n	80310da <HAL_RCC_OscConfig+0x642>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 803106a:	687b      	ldr	r3, [r7, #4]
 803106c:	699b      	ldr	r3, [r3, #24]
 803106e:	2b01      	cmp	r3, #1
 8031070:	d101      	bne.n	8031076 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8031072:	2301      	movs	r3, #1
 8031074:	e032      	b.n	80310dc <HAL_RCC_OscConfig+0x644>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8031076:	4b1b      	ldr	r3, [pc, #108]	@ (80310e4 <HAL_RCC_OscConfig+0x64c>)
 8031078:	685b      	ldr	r3, [r3, #4]
 803107a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 803107c:	687b      	ldr	r3, [r7, #4]
 803107e:	699b      	ldr	r3, [r3, #24]
 8031080:	2b01      	cmp	r3, #1
 8031082:	d028      	beq.n	80310d6 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8031084:	68fb      	ldr	r3, [r7, #12]
 8031086:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 803108a:	687b      	ldr	r3, [r7, #4]
 803108c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 803108e:	429a      	cmp	r2, r3
 8031090:	d121      	bne.n	80310d6 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8031092:	68fb      	ldr	r3, [r7, #12]
 8031094:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8031098:	687b      	ldr	r3, [r7, #4]
 803109a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 803109c:	429a      	cmp	r2, r3
 803109e:	d11a      	bne.n	80310d6 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80310a0:	68fa      	ldr	r2, [r7, #12]
 80310a2:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80310a6:	4013      	ands	r3, r2
 80310a8:	687a      	ldr	r2, [r7, #4]
 80310aa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80310ac:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80310ae:	4293      	cmp	r3, r2
 80310b0:	d111      	bne.n	80310d6 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80310b2:	68fb      	ldr	r3, [r7, #12]
 80310b4:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80310b8:	687b      	ldr	r3, [r7, #4]
 80310ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80310bc:	085b      	lsrs	r3, r3, #1
 80310be:	3b01      	subs	r3, #1
 80310c0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80310c2:	429a      	cmp	r2, r3
 80310c4:	d107      	bne.n	80310d6 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80310c6:	68fb      	ldr	r3, [r7, #12]
 80310c8:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80310cc:	687b      	ldr	r3, [r7, #4]
 80310ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80310d0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80310d2:	429a      	cmp	r2, r3
 80310d4:	d001      	beq.n	80310da <HAL_RCC_OscConfig+0x642>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80310d6:	2301      	movs	r3, #1
 80310d8:	e000      	b.n	80310dc <HAL_RCC_OscConfig+0x644>
        }
      }
    }
  }
  return HAL_OK;
 80310da:	2300      	movs	r3, #0
}
 80310dc:	4618      	mov	r0, r3
 80310de:	3718      	adds	r7, #24
 80310e0:	46bd      	mov	sp, r7
 80310e2:	bd80      	pop	{r7, pc}
 80310e4:	40023800 	.word	0x40023800
 80310e8:	08038678 	.word	0x08038678
 80310ec:	42470060 	.word	0x42470060

080310f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80310f0:	b580      	push	{r7, lr}
 80310f2:	b084      	sub	sp, #16
 80310f4:	af00      	add	r7, sp, #0
 80310f6:	6078      	str	r0, [r7, #4]
 80310f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80310fa:	687b      	ldr	r3, [r7, #4]
 80310fc:	2b00      	cmp	r3, #0
 80310fe:	d101      	bne.n	8031104 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8031100:	2301      	movs	r3, #1
 8031102:	e174      	b.n	80313ee <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8031104:	687b      	ldr	r3, [r7, #4]
 8031106:	681b      	ldr	r3, [r3, #0]
 8031108:	2b00      	cmp	r3, #0
 803110a:	d003      	beq.n	8031114 <HAL_RCC_ClockConfig+0x24>
 803110c:	687b      	ldr	r3, [r7, #4]
 803110e:	681b      	ldr	r3, [r3, #0]
 8031110:	2b0f      	cmp	r3, #15
 8031112:	d904      	bls.n	803111e <HAL_RCC_ClockConfig+0x2e>
 8031114:	f240 215a 	movw	r1, #602	@ 0x25a
 8031118:	487b      	ldr	r0, [pc, #492]	@ (8031308 <HAL_RCC_ClockConfig+0x218>)
 803111a:	f7f6 fdec 	bl	8027cf6 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 803111e:	683b      	ldr	r3, [r7, #0]
 8031120:	2b00      	cmp	r3, #0
 8031122:	d019      	beq.n	8031158 <HAL_RCC_ClockConfig+0x68>
 8031124:	683b      	ldr	r3, [r7, #0]
 8031126:	2b01      	cmp	r3, #1
 8031128:	d016      	beq.n	8031158 <HAL_RCC_ClockConfig+0x68>
 803112a:	683b      	ldr	r3, [r7, #0]
 803112c:	2b02      	cmp	r3, #2
 803112e:	d013      	beq.n	8031158 <HAL_RCC_ClockConfig+0x68>
 8031130:	683b      	ldr	r3, [r7, #0]
 8031132:	2b03      	cmp	r3, #3
 8031134:	d010      	beq.n	8031158 <HAL_RCC_ClockConfig+0x68>
 8031136:	683b      	ldr	r3, [r7, #0]
 8031138:	2b04      	cmp	r3, #4
 803113a:	d00d      	beq.n	8031158 <HAL_RCC_ClockConfig+0x68>
 803113c:	683b      	ldr	r3, [r7, #0]
 803113e:	2b05      	cmp	r3, #5
 8031140:	d00a      	beq.n	8031158 <HAL_RCC_ClockConfig+0x68>
 8031142:	683b      	ldr	r3, [r7, #0]
 8031144:	2b06      	cmp	r3, #6
 8031146:	d007      	beq.n	8031158 <HAL_RCC_ClockConfig+0x68>
 8031148:	683b      	ldr	r3, [r7, #0]
 803114a:	2b07      	cmp	r3, #7
 803114c:	d004      	beq.n	8031158 <HAL_RCC_ClockConfig+0x68>
 803114e:	f240 215b 	movw	r1, #603	@ 0x25b
 8031152:	486d      	ldr	r0, [pc, #436]	@ (8031308 <HAL_RCC_ClockConfig+0x218>)
 8031154:	f7f6 fdcf 	bl	8027cf6 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8031158:	4b6c      	ldr	r3, [pc, #432]	@ (803130c <HAL_RCC_ClockConfig+0x21c>)
 803115a:	681b      	ldr	r3, [r3, #0]
 803115c:	f003 0307 	and.w	r3, r3, #7
 8031160:	683a      	ldr	r2, [r7, #0]
 8031162:	429a      	cmp	r2, r3
 8031164:	d90c      	bls.n	8031180 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8031166:	4b69      	ldr	r3, [pc, #420]	@ (803130c <HAL_RCC_ClockConfig+0x21c>)
 8031168:	683a      	ldr	r2, [r7, #0]
 803116a:	b2d2      	uxtb	r2, r2
 803116c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 803116e:	4b67      	ldr	r3, [pc, #412]	@ (803130c <HAL_RCC_ClockConfig+0x21c>)
 8031170:	681b      	ldr	r3, [r3, #0]
 8031172:	f003 0307 	and.w	r3, r3, #7
 8031176:	683a      	ldr	r2, [r7, #0]
 8031178:	429a      	cmp	r2, r3
 803117a:	d001      	beq.n	8031180 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 803117c:	2301      	movs	r3, #1
 803117e:	e136      	b.n	80313ee <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8031180:	687b      	ldr	r3, [r7, #4]
 8031182:	681b      	ldr	r3, [r3, #0]
 8031184:	f003 0302 	and.w	r3, r3, #2
 8031188:	2b00      	cmp	r3, #0
 803118a:	d049      	beq.n	8031220 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 803118c:	687b      	ldr	r3, [r7, #4]
 803118e:	681b      	ldr	r3, [r3, #0]
 8031190:	f003 0304 	and.w	r3, r3, #4
 8031194:	2b00      	cmp	r3, #0
 8031196:	d005      	beq.n	80311a4 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8031198:	4b5d      	ldr	r3, [pc, #372]	@ (8031310 <HAL_RCC_ClockConfig+0x220>)
 803119a:	689b      	ldr	r3, [r3, #8]
 803119c:	4a5c      	ldr	r2, [pc, #368]	@ (8031310 <HAL_RCC_ClockConfig+0x220>)
 803119e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80311a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80311a4:	687b      	ldr	r3, [r7, #4]
 80311a6:	681b      	ldr	r3, [r3, #0]
 80311a8:	f003 0308 	and.w	r3, r3, #8
 80311ac:	2b00      	cmp	r3, #0
 80311ae:	d005      	beq.n	80311bc <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80311b0:	4b57      	ldr	r3, [pc, #348]	@ (8031310 <HAL_RCC_ClockConfig+0x220>)
 80311b2:	689b      	ldr	r3, [r3, #8]
 80311b4:	4a56      	ldr	r2, [pc, #344]	@ (8031310 <HAL_RCC_ClockConfig+0x220>)
 80311b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80311ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80311bc:	687b      	ldr	r3, [r7, #4]
 80311be:	689b      	ldr	r3, [r3, #8]
 80311c0:	2b00      	cmp	r3, #0
 80311c2:	d024      	beq.n	803120e <HAL_RCC_ClockConfig+0x11e>
 80311c4:	687b      	ldr	r3, [r7, #4]
 80311c6:	689b      	ldr	r3, [r3, #8]
 80311c8:	2b80      	cmp	r3, #128	@ 0x80
 80311ca:	d020      	beq.n	803120e <HAL_RCC_ClockConfig+0x11e>
 80311cc:	687b      	ldr	r3, [r7, #4]
 80311ce:	689b      	ldr	r3, [r3, #8]
 80311d0:	2b90      	cmp	r3, #144	@ 0x90
 80311d2:	d01c      	beq.n	803120e <HAL_RCC_ClockConfig+0x11e>
 80311d4:	687b      	ldr	r3, [r7, #4]
 80311d6:	689b      	ldr	r3, [r3, #8]
 80311d8:	2ba0      	cmp	r3, #160	@ 0xa0
 80311da:	d018      	beq.n	803120e <HAL_RCC_ClockConfig+0x11e>
 80311dc:	687b      	ldr	r3, [r7, #4]
 80311de:	689b      	ldr	r3, [r3, #8]
 80311e0:	2bb0      	cmp	r3, #176	@ 0xb0
 80311e2:	d014      	beq.n	803120e <HAL_RCC_ClockConfig+0x11e>
 80311e4:	687b      	ldr	r3, [r7, #4]
 80311e6:	689b      	ldr	r3, [r3, #8]
 80311e8:	2bc0      	cmp	r3, #192	@ 0xc0
 80311ea:	d010      	beq.n	803120e <HAL_RCC_ClockConfig+0x11e>
 80311ec:	687b      	ldr	r3, [r7, #4]
 80311ee:	689b      	ldr	r3, [r3, #8]
 80311f0:	2bd0      	cmp	r3, #208	@ 0xd0
 80311f2:	d00c      	beq.n	803120e <HAL_RCC_ClockConfig+0x11e>
 80311f4:	687b      	ldr	r3, [r7, #4]
 80311f6:	689b      	ldr	r3, [r3, #8]
 80311f8:	2be0      	cmp	r3, #224	@ 0xe0
 80311fa:	d008      	beq.n	803120e <HAL_RCC_ClockConfig+0x11e>
 80311fc:	687b      	ldr	r3, [r7, #4]
 80311fe:	689b      	ldr	r3, [r3, #8]
 8031200:	2bf0      	cmp	r3, #240	@ 0xf0
 8031202:	d004      	beq.n	803120e <HAL_RCC_ClockConfig+0x11e>
 8031204:	f240 217e 	movw	r1, #638	@ 0x27e
 8031208:	483f      	ldr	r0, [pc, #252]	@ (8031308 <HAL_RCC_ClockConfig+0x218>)
 803120a:	f7f6 fd74 	bl	8027cf6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 803120e:	4b40      	ldr	r3, [pc, #256]	@ (8031310 <HAL_RCC_ClockConfig+0x220>)
 8031210:	689b      	ldr	r3, [r3, #8]
 8031212:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8031216:	687b      	ldr	r3, [r7, #4]
 8031218:	689b      	ldr	r3, [r3, #8]
 803121a:	493d      	ldr	r1, [pc, #244]	@ (8031310 <HAL_RCC_ClockConfig+0x220>)
 803121c:	4313      	orrs	r3, r2
 803121e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8031220:	687b      	ldr	r3, [r7, #4]
 8031222:	681b      	ldr	r3, [r3, #0]
 8031224:	f003 0301 	and.w	r3, r3, #1
 8031228:	2b00      	cmp	r3, #0
 803122a:	d059      	beq.n	80312e0 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 803122c:	687b      	ldr	r3, [r7, #4]
 803122e:	685b      	ldr	r3, [r3, #4]
 8031230:	2b00      	cmp	r3, #0
 8031232:	d010      	beq.n	8031256 <HAL_RCC_ClockConfig+0x166>
 8031234:	687b      	ldr	r3, [r7, #4]
 8031236:	685b      	ldr	r3, [r3, #4]
 8031238:	2b01      	cmp	r3, #1
 803123a:	d00c      	beq.n	8031256 <HAL_RCC_ClockConfig+0x166>
 803123c:	687b      	ldr	r3, [r7, #4]
 803123e:	685b      	ldr	r3, [r3, #4]
 8031240:	2b02      	cmp	r3, #2
 8031242:	d008      	beq.n	8031256 <HAL_RCC_ClockConfig+0x166>
 8031244:	687b      	ldr	r3, [r7, #4]
 8031246:	685b      	ldr	r3, [r3, #4]
 8031248:	2b03      	cmp	r3, #3
 803124a:	d004      	beq.n	8031256 <HAL_RCC_ClockConfig+0x166>
 803124c:	f240 2185 	movw	r1, #645	@ 0x285
 8031250:	482d      	ldr	r0, [pc, #180]	@ (8031308 <HAL_RCC_ClockConfig+0x218>)
 8031252:	f7f6 fd50 	bl	8027cf6 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8031256:	687b      	ldr	r3, [r7, #4]
 8031258:	685b      	ldr	r3, [r3, #4]
 803125a:	2b01      	cmp	r3, #1
 803125c:	d107      	bne.n	803126e <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 803125e:	4b2c      	ldr	r3, [pc, #176]	@ (8031310 <HAL_RCC_ClockConfig+0x220>)
 8031260:	681b      	ldr	r3, [r3, #0]
 8031262:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8031266:	2b00      	cmp	r3, #0
 8031268:	d119      	bne.n	803129e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 803126a:	2301      	movs	r3, #1
 803126c:	e0bf      	b.n	80313ee <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 803126e:	687b      	ldr	r3, [r7, #4]
 8031270:	685b      	ldr	r3, [r3, #4]
 8031272:	2b02      	cmp	r3, #2
 8031274:	d003      	beq.n	803127e <HAL_RCC_ClockConfig+0x18e>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8031276:	687b      	ldr	r3, [r7, #4]
 8031278:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 803127a:	2b03      	cmp	r3, #3
 803127c:	d107      	bne.n	803128e <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 803127e:	4b24      	ldr	r3, [pc, #144]	@ (8031310 <HAL_RCC_ClockConfig+0x220>)
 8031280:	681b      	ldr	r3, [r3, #0]
 8031282:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8031286:	2b00      	cmp	r3, #0
 8031288:	d109      	bne.n	803129e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 803128a:	2301      	movs	r3, #1
 803128c:	e0af      	b.n	80313ee <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 803128e:	4b20      	ldr	r3, [pc, #128]	@ (8031310 <HAL_RCC_ClockConfig+0x220>)
 8031290:	681b      	ldr	r3, [r3, #0]
 8031292:	f003 0302 	and.w	r3, r3, #2
 8031296:	2b00      	cmp	r3, #0
 8031298:	d101      	bne.n	803129e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 803129a:	2301      	movs	r3, #1
 803129c:	e0a7      	b.n	80313ee <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 803129e:	4b1c      	ldr	r3, [pc, #112]	@ (8031310 <HAL_RCC_ClockConfig+0x220>)
 80312a0:	689b      	ldr	r3, [r3, #8]
 80312a2:	f023 0203 	bic.w	r2, r3, #3
 80312a6:	687b      	ldr	r3, [r7, #4]
 80312a8:	685b      	ldr	r3, [r3, #4]
 80312aa:	4919      	ldr	r1, [pc, #100]	@ (8031310 <HAL_RCC_ClockConfig+0x220>)
 80312ac:	4313      	orrs	r3, r2
 80312ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80312b0:	f7f7 f914 	bl	80284dc <HAL_GetTick>
 80312b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80312b6:	e00a      	b.n	80312ce <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80312b8:	f7f7 f910 	bl	80284dc <HAL_GetTick>
 80312bc:	4602      	mov	r2, r0
 80312be:	68fb      	ldr	r3, [r7, #12]
 80312c0:	1ad3      	subs	r3, r2, r3
 80312c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80312c6:	4293      	cmp	r3, r2
 80312c8:	d901      	bls.n	80312ce <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80312ca:	2303      	movs	r3, #3
 80312cc:	e08f      	b.n	80313ee <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80312ce:	4b10      	ldr	r3, [pc, #64]	@ (8031310 <HAL_RCC_ClockConfig+0x220>)
 80312d0:	689b      	ldr	r3, [r3, #8]
 80312d2:	f003 020c 	and.w	r2, r3, #12
 80312d6:	687b      	ldr	r3, [r7, #4]
 80312d8:	685b      	ldr	r3, [r3, #4]
 80312da:	009b      	lsls	r3, r3, #2
 80312dc:	429a      	cmp	r2, r3
 80312de:	d1eb      	bne.n	80312b8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80312e0:	4b0a      	ldr	r3, [pc, #40]	@ (803130c <HAL_RCC_ClockConfig+0x21c>)
 80312e2:	681b      	ldr	r3, [r3, #0]
 80312e4:	f003 0307 	and.w	r3, r3, #7
 80312e8:	683a      	ldr	r2, [r7, #0]
 80312ea:	429a      	cmp	r2, r3
 80312ec:	d212      	bcs.n	8031314 <HAL_RCC_ClockConfig+0x224>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80312ee:	4b07      	ldr	r3, [pc, #28]	@ (803130c <HAL_RCC_ClockConfig+0x21c>)
 80312f0:	683a      	ldr	r2, [r7, #0]
 80312f2:	b2d2      	uxtb	r2, r2
 80312f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80312f6:	4b05      	ldr	r3, [pc, #20]	@ (803130c <HAL_RCC_ClockConfig+0x21c>)
 80312f8:	681b      	ldr	r3, [r3, #0]
 80312fa:	f003 0307 	and.w	r3, r3, #7
 80312fe:	683a      	ldr	r2, [r7, #0]
 8031300:	429a      	cmp	r2, r3
 8031302:	d007      	beq.n	8031314 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8031304:	2301      	movs	r3, #1
 8031306:	e072      	b.n	80313ee <HAL_RCC_ClockConfig+0x2fe>
 8031308:	08038678 	.word	0x08038678
 803130c:	40023c00 	.word	0x40023c00
 8031310:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8031314:	687b      	ldr	r3, [r7, #4]
 8031316:	681b      	ldr	r3, [r3, #0]
 8031318:	f003 0304 	and.w	r3, r3, #4
 803131c:	2b00      	cmp	r3, #0
 803131e:	d025      	beq.n	803136c <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8031320:	687b      	ldr	r3, [r7, #4]
 8031322:	68db      	ldr	r3, [r3, #12]
 8031324:	2b00      	cmp	r3, #0
 8031326:	d018      	beq.n	803135a <HAL_RCC_ClockConfig+0x26a>
 8031328:	687b      	ldr	r3, [r7, #4]
 803132a:	68db      	ldr	r3, [r3, #12]
 803132c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8031330:	d013      	beq.n	803135a <HAL_RCC_ClockConfig+0x26a>
 8031332:	687b      	ldr	r3, [r7, #4]
 8031334:	68db      	ldr	r3, [r3, #12]
 8031336:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 803133a:	d00e      	beq.n	803135a <HAL_RCC_ClockConfig+0x26a>
 803133c:	687b      	ldr	r3, [r7, #4]
 803133e:	68db      	ldr	r3, [r3, #12]
 8031340:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8031344:	d009      	beq.n	803135a <HAL_RCC_ClockConfig+0x26a>
 8031346:	687b      	ldr	r3, [r7, #4]
 8031348:	68db      	ldr	r3, [r3, #12]
 803134a:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 803134e:	d004      	beq.n	803135a <HAL_RCC_ClockConfig+0x26a>
 8031350:	f240 21c3 	movw	r1, #707	@ 0x2c3
 8031354:	4828      	ldr	r0, [pc, #160]	@ (80313f8 <HAL_RCC_ClockConfig+0x308>)
 8031356:	f7f6 fcce 	bl	8027cf6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 803135a:	4b28      	ldr	r3, [pc, #160]	@ (80313fc <HAL_RCC_ClockConfig+0x30c>)
 803135c:	689b      	ldr	r3, [r3, #8]
 803135e:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8031362:	687b      	ldr	r3, [r7, #4]
 8031364:	68db      	ldr	r3, [r3, #12]
 8031366:	4925      	ldr	r1, [pc, #148]	@ (80313fc <HAL_RCC_ClockConfig+0x30c>)
 8031368:	4313      	orrs	r3, r2
 803136a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 803136c:	687b      	ldr	r3, [r7, #4]
 803136e:	681b      	ldr	r3, [r3, #0]
 8031370:	f003 0308 	and.w	r3, r3, #8
 8031374:	2b00      	cmp	r3, #0
 8031376:	d026      	beq.n	80313c6 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8031378:	687b      	ldr	r3, [r7, #4]
 803137a:	691b      	ldr	r3, [r3, #16]
 803137c:	2b00      	cmp	r3, #0
 803137e:	d018      	beq.n	80313b2 <HAL_RCC_ClockConfig+0x2c2>
 8031380:	687b      	ldr	r3, [r7, #4]
 8031382:	691b      	ldr	r3, [r3, #16]
 8031384:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8031388:	d013      	beq.n	80313b2 <HAL_RCC_ClockConfig+0x2c2>
 803138a:	687b      	ldr	r3, [r7, #4]
 803138c:	691b      	ldr	r3, [r3, #16]
 803138e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8031392:	d00e      	beq.n	80313b2 <HAL_RCC_ClockConfig+0x2c2>
 8031394:	687b      	ldr	r3, [r7, #4]
 8031396:	691b      	ldr	r3, [r3, #16]
 8031398:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 803139c:	d009      	beq.n	80313b2 <HAL_RCC_ClockConfig+0x2c2>
 803139e:	687b      	ldr	r3, [r7, #4]
 80313a0:	691b      	ldr	r3, [r3, #16]
 80313a2:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 80313a6:	d004      	beq.n	80313b2 <HAL_RCC_ClockConfig+0x2c2>
 80313a8:	f240 21ca 	movw	r1, #714	@ 0x2ca
 80313ac:	4812      	ldr	r0, [pc, #72]	@ (80313f8 <HAL_RCC_ClockConfig+0x308>)
 80313ae:	f7f6 fca2 	bl	8027cf6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80313b2:	4b12      	ldr	r3, [pc, #72]	@ (80313fc <HAL_RCC_ClockConfig+0x30c>)
 80313b4:	689b      	ldr	r3, [r3, #8]
 80313b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80313ba:	687b      	ldr	r3, [r7, #4]
 80313bc:	691b      	ldr	r3, [r3, #16]
 80313be:	00db      	lsls	r3, r3, #3
 80313c0:	490e      	ldr	r1, [pc, #56]	@ (80313fc <HAL_RCC_ClockConfig+0x30c>)
 80313c2:	4313      	orrs	r3, r2
 80313c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80313c6:	f000 f8e1 	bl	803158c <HAL_RCC_GetSysClockFreq>
 80313ca:	4602      	mov	r2, r0
 80313cc:	4b0b      	ldr	r3, [pc, #44]	@ (80313fc <HAL_RCC_ClockConfig+0x30c>)
 80313ce:	689b      	ldr	r3, [r3, #8]
 80313d0:	091b      	lsrs	r3, r3, #4
 80313d2:	f003 030f 	and.w	r3, r3, #15
 80313d6:	490a      	ldr	r1, [pc, #40]	@ (8031400 <HAL_RCC_ClockConfig+0x310>)
 80313d8:	5ccb      	ldrb	r3, [r1, r3]
 80313da:	fa22 f303 	lsr.w	r3, r2, r3
 80313de:	4a09      	ldr	r2, [pc, #36]	@ (8031404 <HAL_RCC_ClockConfig+0x314>)
 80313e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80313e2:	4b09      	ldr	r3, [pc, #36]	@ (8031408 <HAL_RCC_ClockConfig+0x318>)
 80313e4:	681b      	ldr	r3, [r3, #0]
 80313e6:	4618      	mov	r0, r3
 80313e8:	f7f6 fd74 	bl	8027ed4 <HAL_InitTick>

  return HAL_OK;
 80313ec:	2300      	movs	r3, #0
}
 80313ee:	4618      	mov	r0, r3
 80313f0:	3710      	adds	r7, #16
 80313f2:	46bd      	mov	sp, r7
 80313f4:	bd80      	pop	{r7, pc}
 80313f6:	bf00      	nop
 80313f8:	08038678 	.word	0x08038678
 80313fc:	40023800 	.word	0x40023800
 8031400:	0803a800 	.word	0x0803a800
 8031404:	2000001c 	.word	0x2000001c
 8031408:	20000020 	.word	0x20000020

0803140c <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 803140c:	b580      	push	{r7, lr}
 803140e:	b08c      	sub	sp, #48	@ 0x30
 8031410:	af00      	add	r7, sp, #0
 8031412:	60f8      	str	r0, [r7, #12]
 8031414:	60b9      	str	r1, [r7, #8]
 8031416:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
 8031418:	68fb      	ldr	r3, [r7, #12]
 803141a:	2b00      	cmp	r3, #0
 803141c:	d007      	beq.n	803142e <HAL_RCC_MCOConfig+0x22>
 803141e:	68fb      	ldr	r3, [r7, #12]
 8031420:	2b01      	cmp	r3, #1
 8031422:	d004      	beq.n	803142e <HAL_RCC_MCOConfig+0x22>
 8031424:	f240 310b 	movw	r1, #779	@ 0x30b
 8031428:	484e      	ldr	r0, [pc, #312]	@ (8031564 <HAL_RCC_MCOConfig+0x158>)
 803142a:	f7f6 fc64 	bl	8027cf6 <assert_failed>
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
 803142e:	687b      	ldr	r3, [r7, #4]
 8031430:	2b00      	cmp	r3, #0
 8031432:	d014      	beq.n	803145e <HAL_RCC_MCOConfig+0x52>
 8031434:	687b      	ldr	r3, [r7, #4]
 8031436:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 803143a:	d010      	beq.n	803145e <HAL_RCC_MCOConfig+0x52>
 803143c:	687b      	ldr	r3, [r7, #4]
 803143e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8031442:	d00c      	beq.n	803145e <HAL_RCC_MCOConfig+0x52>
 8031444:	687b      	ldr	r3, [r7, #4]
 8031446:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 803144a:	d008      	beq.n	803145e <HAL_RCC_MCOConfig+0x52>
 803144c:	687b      	ldr	r3, [r7, #4]
 803144e:	f1b3 6fe0 	cmp.w	r3, #117440512	@ 0x7000000
 8031452:	d004      	beq.n	803145e <HAL_RCC_MCOConfig+0x52>
 8031454:	f44f 7143 	mov.w	r1, #780	@ 0x30c
 8031458:	4842      	ldr	r0, [pc, #264]	@ (8031564 <HAL_RCC_MCOConfig+0x158>)
 803145a:	f7f6 fc4c 	bl	8027cf6 <assert_failed>
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 803145e:	68fb      	ldr	r3, [r7, #12]
 8031460:	2b00      	cmp	r3, #0
 8031462:	d13d      	bne.n	80314e0 <HAL_RCC_MCOConfig+0xd4>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
 8031464:	68bb      	ldr	r3, [r7, #8]
 8031466:	2b00      	cmp	r3, #0
 8031468:	d010      	beq.n	803148c <HAL_RCC_MCOConfig+0x80>
 803146a:	68bb      	ldr	r3, [r7, #8]
 803146c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8031470:	d00c      	beq.n	803148c <HAL_RCC_MCOConfig+0x80>
 8031472:	68bb      	ldr	r3, [r7, #8]
 8031474:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8031478:	d008      	beq.n	803148c <HAL_RCC_MCOConfig+0x80>
 803147a:	68bb      	ldr	r3, [r7, #8]
 803147c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8031480:	d004      	beq.n	803148c <HAL_RCC_MCOConfig+0x80>
 8031482:	f44f 7144 	mov.w	r1, #784	@ 0x310
 8031486:	4837      	ldr	r0, [pc, #220]	@ (8031564 <HAL_RCC_MCOConfig+0x158>)
 8031488:	f7f6 fc35 	bl	8027cf6 <assert_failed>

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 803148c:	2300      	movs	r3, #0
 803148e:	61bb      	str	r3, [r7, #24]
 8031490:	4b35      	ldr	r3, [pc, #212]	@ (8031568 <HAL_RCC_MCOConfig+0x15c>)
 8031492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8031494:	4a34      	ldr	r2, [pc, #208]	@ (8031568 <HAL_RCC_MCOConfig+0x15c>)
 8031496:	f043 0301 	orr.w	r3, r3, #1
 803149a:	6313      	str	r3, [r2, #48]	@ 0x30
 803149c:	4b32      	ldr	r3, [pc, #200]	@ (8031568 <HAL_RCC_MCOConfig+0x15c>)
 803149e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80314a0:	f003 0301 	and.w	r3, r3, #1
 80314a4:	61bb      	str	r3, [r7, #24]
 80314a6:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80314a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80314ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80314ae:	2302      	movs	r3, #2
 80314b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80314b2:	2303      	movs	r3, #3
 80314b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80314b6:	2300      	movs	r3, #0
 80314b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80314ba:	2300      	movs	r3, #0
 80314bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80314be:	f107 031c 	add.w	r3, r7, #28
 80314c2:	4619      	mov	r1, r3
 80314c4:	4829      	ldr	r0, [pc, #164]	@ (803156c <HAL_RCC_MCOConfig+0x160>)
 80314c6:	f7fc fb39 	bl	802db3c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80314ca:	4b27      	ldr	r3, [pc, #156]	@ (8031568 <HAL_RCC_MCOConfig+0x15c>)
 80314cc:	689b      	ldr	r3, [r3, #8]
 80314ce:	f023 62ec 	bic.w	r2, r3, #123731968	@ 0x7600000
 80314d2:	68b9      	ldr	r1, [r7, #8]
 80314d4:	687b      	ldr	r3, [r7, #4]
 80314d6:	430b      	orrs	r3, r1
 80314d8:	4923      	ldr	r1, [pc, #140]	@ (8031568 <HAL_RCC_MCOConfig+0x15c>)
 80314da:	4313      	orrs	r3, r2
 80314dc:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 80314de:	e03d      	b.n	803155c <HAL_RCC_MCOConfig+0x150>
    assert_param(IS_RCC_MCO2SOURCE(RCC_MCOSource));
 80314e0:	68bb      	ldr	r3, [r7, #8]
 80314e2:	2b00      	cmp	r3, #0
 80314e4:	d010      	beq.n	8031508 <HAL_RCC_MCOConfig+0xfc>
 80314e6:	68bb      	ldr	r3, [r7, #8]
 80314e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80314ec:	d00c      	beq.n	8031508 <HAL_RCC_MCOConfig+0xfc>
 80314ee:	68bb      	ldr	r3, [r7, #8]
 80314f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80314f4:	d008      	beq.n	8031508 <HAL_RCC_MCOConfig+0xfc>
 80314f6:	68bb      	ldr	r3, [r7, #8]
 80314f8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80314fc:	d004      	beq.n	8031508 <HAL_RCC_MCOConfig+0xfc>
 80314fe:	f44f 714a 	mov.w	r1, #808	@ 0x328
 8031502:	4818      	ldr	r0, [pc, #96]	@ (8031564 <HAL_RCC_MCOConfig+0x158>)
 8031504:	f7f6 fbf7 	bl	8027cf6 <assert_failed>
    __MCO2_CLK_ENABLE();
 8031508:	2300      	movs	r3, #0
 803150a:	617b      	str	r3, [r7, #20]
 803150c:	4b16      	ldr	r3, [pc, #88]	@ (8031568 <HAL_RCC_MCOConfig+0x15c>)
 803150e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8031510:	4a15      	ldr	r2, [pc, #84]	@ (8031568 <HAL_RCC_MCOConfig+0x15c>)
 8031512:	f043 0304 	orr.w	r3, r3, #4
 8031516:	6313      	str	r3, [r2, #48]	@ 0x30
 8031518:	4b13      	ldr	r3, [pc, #76]	@ (8031568 <HAL_RCC_MCOConfig+0x15c>)
 803151a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 803151c:	f003 0304 	and.w	r3, r3, #4
 8031520:	617b      	str	r3, [r7, #20]
 8031522:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8031524:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8031528:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 803152a:	2302      	movs	r3, #2
 803152c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 803152e:	2303      	movs	r3, #3
 8031530:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8031532:	2300      	movs	r3, #0
 8031534:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8031536:	2300      	movs	r3, #0
 8031538:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 803153a:	f107 031c 	add.w	r3, r7, #28
 803153e:	4619      	mov	r1, r3
 8031540:	480b      	ldr	r0, [pc, #44]	@ (8031570 <HAL_RCC_MCOConfig+0x164>)
 8031542:	f7fc fafb 	bl	802db3c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8031546:	4b08      	ldr	r3, [pc, #32]	@ (8031568 <HAL_RCC_MCOConfig+0x15c>)
 8031548:	689b      	ldr	r3, [r3, #8]
 803154a:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 803154e:	687b      	ldr	r3, [r7, #4]
 8031550:	00d9      	lsls	r1, r3, #3
 8031552:	68bb      	ldr	r3, [r7, #8]
 8031554:	430b      	orrs	r3, r1
 8031556:	4904      	ldr	r1, [pc, #16]	@ (8031568 <HAL_RCC_MCOConfig+0x15c>)
 8031558:	4313      	orrs	r3, r2
 803155a:	608b      	str	r3, [r1, #8]
}
 803155c:	bf00      	nop
 803155e:	3730      	adds	r7, #48	@ 0x30
 8031560:	46bd      	mov	sp, r7
 8031562:	bd80      	pop	{r7, pc}
 8031564:	08038678 	.word	0x08038678
 8031568:	40023800 	.word	0x40023800
 803156c:	40020000 	.word	0x40020000
 8031570:	40020800 	.word	0x40020800

08031574 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8031574:	b480      	push	{r7}
 8031576:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8031578:	4b03      	ldr	r3, [pc, #12]	@ (8031588 <HAL_RCC_EnableCSS+0x14>)
 803157a:	2201      	movs	r2, #1
 803157c:	601a      	str	r2, [r3, #0]
}
 803157e:	bf00      	nop
 8031580:	46bd      	mov	sp, r7
 8031582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031586:	4770      	bx	lr
 8031588:	4247004c 	.word	0x4247004c

0803158c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 803158c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8031590:	b094      	sub	sp, #80	@ 0x50
 8031592:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8031594:	2300      	movs	r3, #0
 8031596:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8031598:	2300      	movs	r3, #0
 803159a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 803159c:	2300      	movs	r3, #0
 803159e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80315a0:	2300      	movs	r3, #0
 80315a2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80315a4:	4b79      	ldr	r3, [pc, #484]	@ (803178c <HAL_RCC_GetSysClockFreq+0x200>)
 80315a6:	689b      	ldr	r3, [r3, #8]
 80315a8:	f003 030c 	and.w	r3, r3, #12
 80315ac:	2b08      	cmp	r3, #8
 80315ae:	d00d      	beq.n	80315cc <HAL_RCC_GetSysClockFreq+0x40>
 80315b0:	2b08      	cmp	r3, #8
 80315b2:	f200 80e1 	bhi.w	8031778 <HAL_RCC_GetSysClockFreq+0x1ec>
 80315b6:	2b00      	cmp	r3, #0
 80315b8:	d002      	beq.n	80315c0 <HAL_RCC_GetSysClockFreq+0x34>
 80315ba:	2b04      	cmp	r3, #4
 80315bc:	d003      	beq.n	80315c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80315be:	e0db      	b.n	8031778 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80315c0:	4b73      	ldr	r3, [pc, #460]	@ (8031790 <HAL_RCC_GetSysClockFreq+0x204>)
 80315c2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80315c4:	e0db      	b.n	803177e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80315c6:	4b73      	ldr	r3, [pc, #460]	@ (8031794 <HAL_RCC_GetSysClockFreq+0x208>)
 80315c8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80315ca:	e0d8      	b.n	803177e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80315cc:	4b6f      	ldr	r3, [pc, #444]	@ (803178c <HAL_RCC_GetSysClockFreq+0x200>)
 80315ce:	685b      	ldr	r3, [r3, #4]
 80315d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80315d4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80315d6:	4b6d      	ldr	r3, [pc, #436]	@ (803178c <HAL_RCC_GetSysClockFreq+0x200>)
 80315d8:	685b      	ldr	r3, [r3, #4]
 80315da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80315de:	2b00      	cmp	r3, #0
 80315e0:	d063      	beq.n	80316aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80315e2:	4b6a      	ldr	r3, [pc, #424]	@ (803178c <HAL_RCC_GetSysClockFreq+0x200>)
 80315e4:	685b      	ldr	r3, [r3, #4]
 80315e6:	099b      	lsrs	r3, r3, #6
 80315e8:	2200      	movs	r2, #0
 80315ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80315ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80315ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80315f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80315f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80315f6:	2300      	movs	r3, #0
 80315f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80315fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80315fe:	4622      	mov	r2, r4
 8031600:	462b      	mov	r3, r5
 8031602:	f04f 0000 	mov.w	r0, #0
 8031606:	f04f 0100 	mov.w	r1, #0
 803160a:	0159      	lsls	r1, r3, #5
 803160c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8031610:	0150      	lsls	r0, r2, #5
 8031612:	4602      	mov	r2, r0
 8031614:	460b      	mov	r3, r1
 8031616:	4621      	mov	r1, r4
 8031618:	1a51      	subs	r1, r2, r1
 803161a:	6139      	str	r1, [r7, #16]
 803161c:	4629      	mov	r1, r5
 803161e:	eb63 0301 	sbc.w	r3, r3, r1
 8031622:	617b      	str	r3, [r7, #20]
 8031624:	f04f 0200 	mov.w	r2, #0
 8031628:	f04f 0300 	mov.w	r3, #0
 803162c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8031630:	4659      	mov	r1, fp
 8031632:	018b      	lsls	r3, r1, #6
 8031634:	4651      	mov	r1, sl
 8031636:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 803163a:	4651      	mov	r1, sl
 803163c:	018a      	lsls	r2, r1, #6
 803163e:	4651      	mov	r1, sl
 8031640:	ebb2 0801 	subs.w	r8, r2, r1
 8031644:	4659      	mov	r1, fp
 8031646:	eb63 0901 	sbc.w	r9, r3, r1
 803164a:	f04f 0200 	mov.w	r2, #0
 803164e:	f04f 0300 	mov.w	r3, #0
 8031652:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8031656:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 803165a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 803165e:	4690      	mov	r8, r2
 8031660:	4699      	mov	r9, r3
 8031662:	4623      	mov	r3, r4
 8031664:	eb18 0303 	adds.w	r3, r8, r3
 8031668:	60bb      	str	r3, [r7, #8]
 803166a:	462b      	mov	r3, r5
 803166c:	eb49 0303 	adc.w	r3, r9, r3
 8031670:	60fb      	str	r3, [r7, #12]
 8031672:	f04f 0200 	mov.w	r2, #0
 8031676:	f04f 0300 	mov.w	r3, #0
 803167a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 803167e:	4629      	mov	r1, r5
 8031680:	024b      	lsls	r3, r1, #9
 8031682:	4621      	mov	r1, r4
 8031684:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8031688:	4621      	mov	r1, r4
 803168a:	024a      	lsls	r2, r1, #9
 803168c:	4610      	mov	r0, r2
 803168e:	4619      	mov	r1, r3
 8031690:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8031692:	2200      	movs	r2, #0
 8031694:	62bb      	str	r3, [r7, #40]	@ 0x28
 8031696:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8031698:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 803169c:	f7ef fa06 	bl	8020aac <__aeabi_uldivmod>
 80316a0:	4602      	mov	r2, r0
 80316a2:	460b      	mov	r3, r1
 80316a4:	4613      	mov	r3, r2
 80316a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80316a8:	e058      	b.n	803175c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80316aa:	4b38      	ldr	r3, [pc, #224]	@ (803178c <HAL_RCC_GetSysClockFreq+0x200>)
 80316ac:	685b      	ldr	r3, [r3, #4]
 80316ae:	099b      	lsrs	r3, r3, #6
 80316b0:	2200      	movs	r2, #0
 80316b2:	4618      	mov	r0, r3
 80316b4:	4611      	mov	r1, r2
 80316b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80316ba:	623b      	str	r3, [r7, #32]
 80316bc:	2300      	movs	r3, #0
 80316be:	627b      	str	r3, [r7, #36]	@ 0x24
 80316c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80316c4:	4642      	mov	r2, r8
 80316c6:	464b      	mov	r3, r9
 80316c8:	f04f 0000 	mov.w	r0, #0
 80316cc:	f04f 0100 	mov.w	r1, #0
 80316d0:	0159      	lsls	r1, r3, #5
 80316d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80316d6:	0150      	lsls	r0, r2, #5
 80316d8:	4602      	mov	r2, r0
 80316da:	460b      	mov	r3, r1
 80316dc:	4641      	mov	r1, r8
 80316de:	ebb2 0a01 	subs.w	sl, r2, r1
 80316e2:	4649      	mov	r1, r9
 80316e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80316e8:	f04f 0200 	mov.w	r2, #0
 80316ec:	f04f 0300 	mov.w	r3, #0
 80316f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80316f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80316f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80316fc:	ebb2 040a 	subs.w	r4, r2, sl
 8031700:	eb63 050b 	sbc.w	r5, r3, fp
 8031704:	f04f 0200 	mov.w	r2, #0
 8031708:	f04f 0300 	mov.w	r3, #0
 803170c:	00eb      	lsls	r3, r5, #3
 803170e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8031712:	00e2      	lsls	r2, r4, #3
 8031714:	4614      	mov	r4, r2
 8031716:	461d      	mov	r5, r3
 8031718:	4643      	mov	r3, r8
 803171a:	18e3      	adds	r3, r4, r3
 803171c:	603b      	str	r3, [r7, #0]
 803171e:	464b      	mov	r3, r9
 8031720:	eb45 0303 	adc.w	r3, r5, r3
 8031724:	607b      	str	r3, [r7, #4]
 8031726:	f04f 0200 	mov.w	r2, #0
 803172a:	f04f 0300 	mov.w	r3, #0
 803172e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8031732:	4629      	mov	r1, r5
 8031734:	028b      	lsls	r3, r1, #10
 8031736:	4621      	mov	r1, r4
 8031738:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 803173c:	4621      	mov	r1, r4
 803173e:	028a      	lsls	r2, r1, #10
 8031740:	4610      	mov	r0, r2
 8031742:	4619      	mov	r1, r3
 8031744:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8031746:	2200      	movs	r2, #0
 8031748:	61bb      	str	r3, [r7, #24]
 803174a:	61fa      	str	r2, [r7, #28]
 803174c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8031750:	f7ef f9ac 	bl	8020aac <__aeabi_uldivmod>
 8031754:	4602      	mov	r2, r0
 8031756:	460b      	mov	r3, r1
 8031758:	4613      	mov	r3, r2
 803175a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 803175c:	4b0b      	ldr	r3, [pc, #44]	@ (803178c <HAL_RCC_GetSysClockFreq+0x200>)
 803175e:	685b      	ldr	r3, [r3, #4]
 8031760:	0c1b      	lsrs	r3, r3, #16
 8031762:	f003 0303 	and.w	r3, r3, #3
 8031766:	3301      	adds	r3, #1
 8031768:	005b      	lsls	r3, r3, #1
 803176a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 803176c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 803176e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8031770:	fbb2 f3f3 	udiv	r3, r2, r3
 8031774:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8031776:	e002      	b.n	803177e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8031778:	4b05      	ldr	r3, [pc, #20]	@ (8031790 <HAL_RCC_GetSysClockFreq+0x204>)
 803177a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 803177c:	bf00      	nop
    }
  }
  return sysclockfreq;
 803177e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8031780:	4618      	mov	r0, r3
 8031782:	3750      	adds	r7, #80	@ 0x50
 8031784:	46bd      	mov	sp, r7
 8031786:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 803178a:	bf00      	nop
 803178c:	40023800 	.word	0x40023800
 8031790:	00f42400 	.word	0x00f42400
 8031794:	007a1200 	.word	0x007a1200

08031798 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8031798:	b480      	push	{r7}
 803179a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 803179c:	4b03      	ldr	r3, [pc, #12]	@ (80317ac <HAL_RCC_GetHCLKFreq+0x14>)
 803179e:	681b      	ldr	r3, [r3, #0]
}
 80317a0:	4618      	mov	r0, r3
 80317a2:	46bd      	mov	sp, r7
 80317a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80317a8:	4770      	bx	lr
 80317aa:	bf00      	nop
 80317ac:	2000001c 	.word	0x2000001c

080317b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80317b0:	b580      	push	{r7, lr}
 80317b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80317b4:	f7ff fff0 	bl	8031798 <HAL_RCC_GetHCLKFreq>
 80317b8:	4602      	mov	r2, r0
 80317ba:	4b05      	ldr	r3, [pc, #20]	@ (80317d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80317bc:	689b      	ldr	r3, [r3, #8]
 80317be:	0a9b      	lsrs	r3, r3, #10
 80317c0:	f003 0307 	and.w	r3, r3, #7
 80317c4:	4903      	ldr	r1, [pc, #12]	@ (80317d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80317c6:	5ccb      	ldrb	r3, [r1, r3]
 80317c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80317cc:	4618      	mov	r0, r3
 80317ce:	bd80      	pop	{r7, pc}
 80317d0:	40023800 	.word	0x40023800
 80317d4:	0803a810 	.word	0x0803a810

080317d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80317d8:	b580      	push	{r7, lr}
 80317da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80317dc:	f7ff ffdc 	bl	8031798 <HAL_RCC_GetHCLKFreq>
 80317e0:	4602      	mov	r2, r0
 80317e2:	4b05      	ldr	r3, [pc, #20]	@ (80317f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80317e4:	689b      	ldr	r3, [r3, #8]
 80317e6:	0b5b      	lsrs	r3, r3, #13
 80317e8:	f003 0307 	and.w	r3, r3, #7
 80317ec:	4903      	ldr	r1, [pc, #12]	@ (80317fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80317ee:	5ccb      	ldrb	r3, [r1, r3]
 80317f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80317f4:	4618      	mov	r0, r3
 80317f6:	bd80      	pop	{r7, pc}
 80317f8:	40023800 	.word	0x40023800
 80317fc:	0803a810 	.word	0x0803a810

08031800 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8031800:	b480      	push	{r7}
 8031802:	b083      	sub	sp, #12
 8031804:	af00      	add	r7, sp, #0
 8031806:	6078      	str	r0, [r7, #4]
 8031808:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 803180a:	687b      	ldr	r3, [r7, #4]
 803180c:	220f      	movs	r2, #15
 803180e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8031810:	4b12      	ldr	r3, [pc, #72]	@ (803185c <HAL_RCC_GetClockConfig+0x5c>)
 8031812:	689b      	ldr	r3, [r3, #8]
 8031814:	f003 0203 	and.w	r2, r3, #3
 8031818:	687b      	ldr	r3, [r7, #4]
 803181a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 803181c:	4b0f      	ldr	r3, [pc, #60]	@ (803185c <HAL_RCC_GetClockConfig+0x5c>)
 803181e:	689b      	ldr	r3, [r3, #8]
 8031820:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8031824:	687b      	ldr	r3, [r7, #4]
 8031826:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8031828:	4b0c      	ldr	r3, [pc, #48]	@ (803185c <HAL_RCC_GetClockConfig+0x5c>)
 803182a:	689b      	ldr	r3, [r3, #8]
 803182c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8031830:	687b      	ldr	r3, [r7, #4]
 8031832:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8031834:	4b09      	ldr	r3, [pc, #36]	@ (803185c <HAL_RCC_GetClockConfig+0x5c>)
 8031836:	689b      	ldr	r3, [r3, #8]
 8031838:	08db      	lsrs	r3, r3, #3
 803183a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 803183e:	687b      	ldr	r3, [r7, #4]
 8031840:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8031842:	4b07      	ldr	r3, [pc, #28]	@ (8031860 <HAL_RCC_GetClockConfig+0x60>)
 8031844:	681b      	ldr	r3, [r3, #0]
 8031846:	f003 0207 	and.w	r2, r3, #7
 803184a:	683b      	ldr	r3, [r7, #0]
 803184c:	601a      	str	r2, [r3, #0]
}
 803184e:	bf00      	nop
 8031850:	370c      	adds	r7, #12
 8031852:	46bd      	mov	sp, r7
 8031854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031858:	4770      	bx	lr
 803185a:	bf00      	nop
 803185c:	40023800 	.word	0x40023800
 8031860:	40023c00 	.word	0x40023c00

08031864 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8031864:	b580      	push	{r7, lr}
 8031866:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8031868:	4b06      	ldr	r3, [pc, #24]	@ (8031884 <HAL_RCC_NMI_IRQHandler+0x20>)
 803186a:	68db      	ldr	r3, [r3, #12]
 803186c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8031870:	2b80      	cmp	r3, #128	@ 0x80
 8031872:	d104      	bne.n	803187e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8031874:	f000 f80a 	bl	803188c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8031878:	4b03      	ldr	r3, [pc, #12]	@ (8031888 <HAL_RCC_NMI_IRQHandler+0x24>)
 803187a:	2280      	movs	r2, #128	@ 0x80
 803187c:	701a      	strb	r2, [r3, #0]
  }
}
 803187e:	bf00      	nop
 8031880:	bd80      	pop	{r7, pc}
 8031882:	bf00      	nop
 8031884:	40023800 	.word	0x40023800
 8031888:	4002380e 	.word	0x4002380e

0803188c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 803188c:	b480      	push	{r7}
 803188e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8031890:	bf00      	nop
 8031892:	46bd      	mov	sp, r7
 8031894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031898:	4770      	bx	lr
	...

0803189c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 803189c:	b580      	push	{r7, lr}
 803189e:	b086      	sub	sp, #24
 80318a0:	af00      	add	r7, sp, #0
 80318a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80318a4:	2300      	movs	r3, #0
 80318a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80318a8:	2300      	movs	r3, #0
 80318aa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80318ac:	687b      	ldr	r3, [r7, #4]
 80318ae:	681b      	ldr	r3, [r3, #0]
 80318b0:	2b00      	cmp	r3, #0
 80318b2:	d003      	beq.n	80318bc <HAL_RCCEx_PeriphCLKConfig+0x20>
 80318b4:	687b      	ldr	r3, [r7, #4]
 80318b6:	681b      	ldr	r3, [r3, #0]
 80318b8:	2b07      	cmp	r3, #7
 80318ba:	d904      	bls.n	80318c6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
 80318bc:	f640 11fd 	movw	r1, #2557	@ 0x9fd
 80318c0:	482c      	ldr	r0, [pc, #176]	@ (8031974 <HAL_RCCEx_PeriphCLKConfig+0xd8>)
 80318c2:	f7f6 fa18 	bl	8027cf6 <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80318c6:	687b      	ldr	r3, [r7, #4]
 80318c8:	681b      	ldr	r3, [r3, #0]
 80318ca:	f003 0301 	and.w	r3, r3, #1
 80318ce:	2b00      	cmp	r3, #0
 80318d0:	d105      	bne.n	80318de <HAL_RCCEx_PeriphCLKConfig+0x42>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80318d2:	687b      	ldr	r3, [r7, #4]
 80318d4:	681b      	ldr	r3, [r3, #0]
 80318d6:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80318da:	2b00      	cmp	r3, #0
 80318dc:	d056      	beq.n	803198c <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 80318de:	687b      	ldr	r3, [r7, #4]
 80318e0:	689b      	ldr	r3, [r3, #8]
 80318e2:	2b01      	cmp	r3, #1
 80318e4:	d903      	bls.n	80318ee <HAL_RCCEx_PeriphCLKConfig+0x52>
 80318e6:	687b      	ldr	r3, [r7, #4]
 80318e8:	689b      	ldr	r3, [r3, #8]
 80318ea:	2b07      	cmp	r3, #7
 80318ec:	d904      	bls.n	80318f8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80318ee:	f640 2104 	movw	r1, #2564	@ 0xa04
 80318f2:	4820      	ldr	r0, [pc, #128]	@ (8031974 <HAL_RCCEx_PeriphCLKConfig+0xd8>)
 80318f4:	f7f6 f9ff 	bl	8027cf6 <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 80318f8:	687b      	ldr	r3, [r7, #4]
 80318fa:	685b      	ldr	r3, [r3, #4]
 80318fc:	2b31      	cmp	r3, #49	@ 0x31
 80318fe:	d904      	bls.n	803190a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8031900:	687b      	ldr	r3, [r7, #4]
 8031902:	685b      	ldr	r3, [r3, #4]
 8031904:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 8031908:	d904      	bls.n	8031914 <HAL_RCCEx_PeriphCLKConfig+0x78>
 803190a:	f640 2105 	movw	r1, #2565	@ 0xa05
 803190e:	4819      	ldr	r0, [pc, #100]	@ (8031974 <HAL_RCCEx_PeriphCLKConfig+0xd8>)
 8031910:	f7f6 f9f1 	bl	8027cf6 <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8031914:	4b18      	ldr	r3, [pc, #96]	@ (8031978 <HAL_RCCEx_PeriphCLKConfig+0xdc>)
 8031916:	2200      	movs	r2, #0
 8031918:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 803191a:	f7f6 fddf 	bl	80284dc <HAL_GetTick>
 803191e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8031920:	e008      	b.n	8031934 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8031922:	f7f6 fddb 	bl	80284dc <HAL_GetTick>
 8031926:	4602      	mov	r2, r0
 8031928:	697b      	ldr	r3, [r7, #20]
 803192a:	1ad3      	subs	r3, r2, r3
 803192c:	2b02      	cmp	r3, #2
 803192e:	d901      	bls.n	8031934 <HAL_RCCEx_PeriphCLKConfig+0x98>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8031930:	2303      	movs	r3, #3
 8031932:	e1a6      	b.n	8031c82 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8031934:	4b11      	ldr	r3, [pc, #68]	@ (803197c <HAL_RCCEx_PeriphCLKConfig+0xe0>)
 8031936:	681b      	ldr	r3, [r3, #0]
 8031938:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 803193c:	2b00      	cmp	r3, #0
 803193e:	d1f0      	bne.n	8031922 <HAL_RCCEx_PeriphCLKConfig+0x86>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8031940:	687b      	ldr	r3, [r7, #4]
 8031942:	685b      	ldr	r3, [r3, #4]
 8031944:	019a      	lsls	r2, r3, #6
 8031946:	687b      	ldr	r3, [r7, #4]
 8031948:	689b      	ldr	r3, [r3, #8]
 803194a:	071b      	lsls	r3, r3, #28
 803194c:	490b      	ldr	r1, [pc, #44]	@ (803197c <HAL_RCCEx_PeriphCLKConfig+0xe0>)
 803194e:	4313      	orrs	r3, r2
 8031950:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8031954:	4b08      	ldr	r3, [pc, #32]	@ (8031978 <HAL_RCCEx_PeriphCLKConfig+0xdc>)
 8031956:	2201      	movs	r2, #1
 8031958:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 803195a:	f7f6 fdbf 	bl	80284dc <HAL_GetTick>
 803195e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8031960:	e00e      	b.n	8031980 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8031962:	f7f6 fdbb 	bl	80284dc <HAL_GetTick>
 8031966:	4602      	mov	r2, r0
 8031968:	697b      	ldr	r3, [r7, #20]
 803196a:	1ad3      	subs	r3, r2, r3
 803196c:	2b02      	cmp	r3, #2
 803196e:	d907      	bls.n	8031980 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8031970:	2303      	movs	r3, #3
 8031972:	e186      	b.n	8031c82 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8031974:	080386ec 	.word	0x080386ec
 8031978:	42470068 	.word	0x42470068
 803197c:	40023800 	.word	0x40023800
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8031980:	4b88      	ldr	r3, [pc, #544]	@ (8031ba4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8031982:	681b      	ldr	r3, [r3, #0]
 8031984:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8031988:	2b00      	cmp	r3, #0
 803198a:	d0ea      	beq.n	8031962 <HAL_RCCEx_PeriphCLKConfig+0xc6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 803198c:	687b      	ldr	r3, [r7, #4]
 803198e:	681b      	ldr	r3, [r3, #0]
 8031990:	f003 0302 	and.w	r3, r3, #2
 8031994:	2b00      	cmp	r3, #0
 8031996:	f000 8173 	beq.w	8031c80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 803199a:	687b      	ldr	r3, [r7, #4]
 803199c:	68db      	ldr	r3, [r3, #12]
 803199e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80319a2:	f000 80a6 	beq.w	8031af2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80319a6:	687b      	ldr	r3, [r7, #4]
 80319a8:	68db      	ldr	r3, [r3, #12]
 80319aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80319ae:	f000 80a0 	beq.w	8031af2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80319b2:	687b      	ldr	r3, [r7, #4]
 80319b4:	68db      	ldr	r3, [r3, #12]
 80319b6:	4a7c      	ldr	r2, [pc, #496]	@ (8031ba8 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 80319b8:	4293      	cmp	r3, r2
 80319ba:	f000 809a 	beq.w	8031af2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80319be:	687b      	ldr	r3, [r7, #4]
 80319c0:	68db      	ldr	r3, [r3, #12]
 80319c2:	4a7a      	ldr	r2, [pc, #488]	@ (8031bac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80319c4:	4293      	cmp	r3, r2
 80319c6:	f000 8094 	beq.w	8031af2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80319ca:	687b      	ldr	r3, [r7, #4]
 80319cc:	68db      	ldr	r3, [r3, #12]
 80319ce:	4a78      	ldr	r2, [pc, #480]	@ (8031bb0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80319d0:	4293      	cmp	r3, r2
 80319d2:	f000 808e 	beq.w	8031af2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80319d6:	687b      	ldr	r3, [r7, #4]
 80319d8:	68db      	ldr	r3, [r3, #12]
 80319da:	4a76      	ldr	r2, [pc, #472]	@ (8031bb4 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80319dc:	4293      	cmp	r3, r2
 80319de:	f000 8088 	beq.w	8031af2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80319e2:	687b      	ldr	r3, [r7, #4]
 80319e4:	68db      	ldr	r3, [r3, #12]
 80319e6:	4a74      	ldr	r2, [pc, #464]	@ (8031bb8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80319e8:	4293      	cmp	r3, r2
 80319ea:	f000 8082 	beq.w	8031af2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80319ee:	687b      	ldr	r3, [r7, #4]
 80319f0:	68db      	ldr	r3, [r3, #12]
 80319f2:	4a72      	ldr	r2, [pc, #456]	@ (8031bbc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80319f4:	4293      	cmp	r3, r2
 80319f6:	d07c      	beq.n	8031af2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80319f8:	687b      	ldr	r3, [r7, #4]
 80319fa:	68db      	ldr	r3, [r3, #12]
 80319fc:	4a70      	ldr	r2, [pc, #448]	@ (8031bc0 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80319fe:	4293      	cmp	r3, r2
 8031a00:	d077      	beq.n	8031af2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8031a02:	687b      	ldr	r3, [r7, #4]
 8031a04:	68db      	ldr	r3, [r3, #12]
 8031a06:	4a6f      	ldr	r2, [pc, #444]	@ (8031bc4 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8031a08:	4293      	cmp	r3, r2
 8031a0a:	d072      	beq.n	8031af2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8031a0c:	687b      	ldr	r3, [r7, #4]
 8031a0e:	68db      	ldr	r3, [r3, #12]
 8031a10:	4a6d      	ldr	r2, [pc, #436]	@ (8031bc8 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8031a12:	4293      	cmp	r3, r2
 8031a14:	d06d      	beq.n	8031af2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8031a16:	687b      	ldr	r3, [r7, #4]
 8031a18:	68db      	ldr	r3, [r3, #12]
 8031a1a:	4a6c      	ldr	r2, [pc, #432]	@ (8031bcc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8031a1c:	4293      	cmp	r3, r2
 8031a1e:	d068      	beq.n	8031af2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8031a20:	687b      	ldr	r3, [r7, #4]
 8031a22:	68db      	ldr	r3, [r3, #12]
 8031a24:	4a6a      	ldr	r2, [pc, #424]	@ (8031bd0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8031a26:	4293      	cmp	r3, r2
 8031a28:	d063      	beq.n	8031af2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8031a2a:	687b      	ldr	r3, [r7, #4]
 8031a2c:	68db      	ldr	r3, [r3, #12]
 8031a2e:	4a69      	ldr	r2, [pc, #420]	@ (8031bd4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8031a30:	4293      	cmp	r3, r2
 8031a32:	d05e      	beq.n	8031af2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8031a34:	687b      	ldr	r3, [r7, #4]
 8031a36:	68db      	ldr	r3, [r3, #12]
 8031a38:	4a67      	ldr	r2, [pc, #412]	@ (8031bd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8031a3a:	4293      	cmp	r3, r2
 8031a3c:	d059      	beq.n	8031af2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8031a3e:	687b      	ldr	r3, [r7, #4]
 8031a40:	68db      	ldr	r3, [r3, #12]
 8031a42:	4a66      	ldr	r2, [pc, #408]	@ (8031bdc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8031a44:	4293      	cmp	r3, r2
 8031a46:	d054      	beq.n	8031af2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8031a48:	687b      	ldr	r3, [r7, #4]
 8031a4a:	68db      	ldr	r3, [r3, #12]
 8031a4c:	4a64      	ldr	r2, [pc, #400]	@ (8031be0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8031a4e:	4293      	cmp	r3, r2
 8031a50:	d04f      	beq.n	8031af2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8031a52:	687b      	ldr	r3, [r7, #4]
 8031a54:	68db      	ldr	r3, [r3, #12]
 8031a56:	4a63      	ldr	r2, [pc, #396]	@ (8031be4 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8031a58:	4293      	cmp	r3, r2
 8031a5a:	d04a      	beq.n	8031af2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8031a5c:	687b      	ldr	r3, [r7, #4]
 8031a5e:	68db      	ldr	r3, [r3, #12]
 8031a60:	4a61      	ldr	r2, [pc, #388]	@ (8031be8 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8031a62:	4293      	cmp	r3, r2
 8031a64:	d045      	beq.n	8031af2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8031a66:	687b      	ldr	r3, [r7, #4]
 8031a68:	68db      	ldr	r3, [r3, #12]
 8031a6a:	4a60      	ldr	r2, [pc, #384]	@ (8031bec <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8031a6c:	4293      	cmp	r3, r2
 8031a6e:	d040      	beq.n	8031af2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8031a70:	687b      	ldr	r3, [r7, #4]
 8031a72:	68db      	ldr	r3, [r3, #12]
 8031a74:	4a5e      	ldr	r2, [pc, #376]	@ (8031bf0 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8031a76:	4293      	cmp	r3, r2
 8031a78:	d03b      	beq.n	8031af2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8031a7a:	687b      	ldr	r3, [r7, #4]
 8031a7c:	68db      	ldr	r3, [r3, #12]
 8031a7e:	4a5d      	ldr	r2, [pc, #372]	@ (8031bf4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8031a80:	4293      	cmp	r3, r2
 8031a82:	d036      	beq.n	8031af2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8031a84:	687b      	ldr	r3, [r7, #4]
 8031a86:	68db      	ldr	r3, [r3, #12]
 8031a88:	4a5b      	ldr	r2, [pc, #364]	@ (8031bf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8031a8a:	4293      	cmp	r3, r2
 8031a8c:	d031      	beq.n	8031af2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8031a8e:	687b      	ldr	r3, [r7, #4]
 8031a90:	68db      	ldr	r3, [r3, #12]
 8031a92:	4a5a      	ldr	r2, [pc, #360]	@ (8031bfc <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8031a94:	4293      	cmp	r3, r2
 8031a96:	d02c      	beq.n	8031af2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8031a98:	687b      	ldr	r3, [r7, #4]
 8031a9a:	68db      	ldr	r3, [r3, #12]
 8031a9c:	4a58      	ldr	r2, [pc, #352]	@ (8031c00 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8031a9e:	4293      	cmp	r3, r2
 8031aa0:	d027      	beq.n	8031af2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8031aa2:	687b      	ldr	r3, [r7, #4]
 8031aa4:	68db      	ldr	r3, [r3, #12]
 8031aa6:	4a57      	ldr	r2, [pc, #348]	@ (8031c04 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8031aa8:	4293      	cmp	r3, r2
 8031aaa:	d022      	beq.n	8031af2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8031aac:	687b      	ldr	r3, [r7, #4]
 8031aae:	68db      	ldr	r3, [r3, #12]
 8031ab0:	4a55      	ldr	r2, [pc, #340]	@ (8031c08 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8031ab2:	4293      	cmp	r3, r2
 8031ab4:	d01d      	beq.n	8031af2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8031ab6:	687b      	ldr	r3, [r7, #4]
 8031ab8:	68db      	ldr	r3, [r3, #12]
 8031aba:	4a54      	ldr	r2, [pc, #336]	@ (8031c0c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8031abc:	4293      	cmp	r3, r2
 8031abe:	d018      	beq.n	8031af2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8031ac0:	687b      	ldr	r3, [r7, #4]
 8031ac2:	68db      	ldr	r3, [r3, #12]
 8031ac4:	4a52      	ldr	r2, [pc, #328]	@ (8031c10 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8031ac6:	4293      	cmp	r3, r2
 8031ac8:	d013      	beq.n	8031af2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8031aca:	687b      	ldr	r3, [r7, #4]
 8031acc:	68db      	ldr	r3, [r3, #12]
 8031ace:	4a51      	ldr	r2, [pc, #324]	@ (8031c14 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8031ad0:	4293      	cmp	r3, r2
 8031ad2:	d00e      	beq.n	8031af2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8031ad4:	687b      	ldr	r3, [r7, #4]
 8031ad6:	68db      	ldr	r3, [r3, #12]
 8031ad8:	4a4f      	ldr	r2, [pc, #316]	@ (8031c18 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8031ada:	4293      	cmp	r3, r2
 8031adc:	d009      	beq.n	8031af2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8031ade:	687b      	ldr	r3, [r7, #4]
 8031ae0:	68db      	ldr	r3, [r3, #12]
 8031ae2:	4a4e      	ldr	r2, [pc, #312]	@ (8031c1c <HAL_RCCEx_PeriphCLKConfig+0x380>)
 8031ae4:	4293      	cmp	r3, r2
 8031ae6:	d004      	beq.n	8031af2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8031ae8:	f640 2137 	movw	r1, #2615	@ 0xa37
 8031aec:	484c      	ldr	r0, [pc, #304]	@ (8031c20 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8031aee:	f7f6 f902 	bl	8027cf6 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8031af2:	2300      	movs	r3, #0
 8031af4:	60fb      	str	r3, [r7, #12]
 8031af6:	4b2b      	ldr	r3, [pc, #172]	@ (8031ba4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8031af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8031afa:	4a2a      	ldr	r2, [pc, #168]	@ (8031ba4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8031afc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8031b00:	6413      	str	r3, [r2, #64]	@ 0x40
 8031b02:	4b28      	ldr	r3, [pc, #160]	@ (8031ba4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8031b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8031b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8031b0a:	60fb      	str	r3, [r7, #12]
 8031b0c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8031b0e:	4b45      	ldr	r3, [pc, #276]	@ (8031c24 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8031b10:	681b      	ldr	r3, [r3, #0]
 8031b12:	4a44      	ldr	r2, [pc, #272]	@ (8031c24 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8031b14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8031b18:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8031b1a:	f7f6 fcdf 	bl	80284dc <HAL_GetTick>
 8031b1e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8031b20:	e008      	b.n	8031b34 <HAL_RCCEx_PeriphCLKConfig+0x298>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8031b22:	f7f6 fcdb 	bl	80284dc <HAL_GetTick>
 8031b26:	4602      	mov	r2, r0
 8031b28:	697b      	ldr	r3, [r7, #20]
 8031b2a:	1ad3      	subs	r3, r2, r3
 8031b2c:	2b02      	cmp	r3, #2
 8031b2e:	d901      	bls.n	8031b34 <HAL_RCCEx_PeriphCLKConfig+0x298>
      {
        return HAL_TIMEOUT;
 8031b30:	2303      	movs	r3, #3
 8031b32:	e0a6      	b.n	8031c82 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8031b34:	4b3b      	ldr	r3, [pc, #236]	@ (8031c24 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8031b36:	681b      	ldr	r3, [r3, #0]
 8031b38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8031b3c:	2b00      	cmp	r3, #0
 8031b3e:	d0f0      	beq.n	8031b22 <HAL_RCCEx_PeriphCLKConfig+0x286>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8031b40:	4b18      	ldr	r3, [pc, #96]	@ (8031ba4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8031b42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8031b44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8031b48:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8031b4a:	693b      	ldr	r3, [r7, #16]
 8031b4c:	2b00      	cmp	r3, #0
 8031b4e:	d073      	beq.n	8031c38 <HAL_RCCEx_PeriphCLKConfig+0x39c>
 8031b50:	687b      	ldr	r3, [r7, #4]
 8031b52:	68db      	ldr	r3, [r3, #12]
 8031b54:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8031b58:	693a      	ldr	r2, [r7, #16]
 8031b5a:	429a      	cmp	r2, r3
 8031b5c:	d06c      	beq.n	8031c38 <HAL_RCCEx_PeriphCLKConfig+0x39c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8031b5e:	4b11      	ldr	r3, [pc, #68]	@ (8031ba4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8031b60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8031b62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8031b66:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8031b68:	4b2f      	ldr	r3, [pc, #188]	@ (8031c28 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8031b6a:	2201      	movs	r2, #1
 8031b6c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8031b6e:	4b2e      	ldr	r3, [pc, #184]	@ (8031c28 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8031b70:	2200      	movs	r2, #0
 8031b72:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8031b74:	4a0b      	ldr	r2, [pc, #44]	@ (8031ba4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8031b76:	693b      	ldr	r3, [r7, #16]
 8031b78:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8031b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8031ba4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8031b7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8031b7e:	f003 0301 	and.w	r3, r3, #1
 8031b82:	2b01      	cmp	r3, #1
 8031b84:	d158      	bne.n	8031c38 <HAL_RCCEx_PeriphCLKConfig+0x39c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8031b86:	f7f6 fca9 	bl	80284dc <HAL_GetTick>
 8031b8a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8031b8c:	e04e      	b.n	8031c2c <HAL_RCCEx_PeriphCLKConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8031b8e:	f7f6 fca5 	bl	80284dc <HAL_GetTick>
 8031b92:	4602      	mov	r2, r0
 8031b94:	697b      	ldr	r3, [r7, #20]
 8031b96:	1ad3      	subs	r3, r2, r3
 8031b98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8031b9c:	4293      	cmp	r3, r2
 8031b9e:	d945      	bls.n	8031c2c <HAL_RCCEx_PeriphCLKConfig+0x390>
          {
            return HAL_TIMEOUT;
 8031ba0:	2303      	movs	r3, #3
 8031ba2:	e06e      	b.n	8031c82 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8031ba4:	40023800 	.word	0x40023800
 8031ba8:	00020300 	.word	0x00020300
 8031bac:	00030300 	.word	0x00030300
 8031bb0:	00040300 	.word	0x00040300
 8031bb4:	00050300 	.word	0x00050300
 8031bb8:	00060300 	.word	0x00060300
 8031bbc:	00070300 	.word	0x00070300
 8031bc0:	00080300 	.word	0x00080300
 8031bc4:	00090300 	.word	0x00090300
 8031bc8:	000a0300 	.word	0x000a0300
 8031bcc:	000b0300 	.word	0x000b0300
 8031bd0:	000c0300 	.word	0x000c0300
 8031bd4:	000d0300 	.word	0x000d0300
 8031bd8:	000e0300 	.word	0x000e0300
 8031bdc:	000f0300 	.word	0x000f0300
 8031be0:	00100300 	.word	0x00100300
 8031be4:	00110300 	.word	0x00110300
 8031be8:	00120300 	.word	0x00120300
 8031bec:	00130300 	.word	0x00130300
 8031bf0:	00140300 	.word	0x00140300
 8031bf4:	00150300 	.word	0x00150300
 8031bf8:	00160300 	.word	0x00160300
 8031bfc:	00170300 	.word	0x00170300
 8031c00:	00180300 	.word	0x00180300
 8031c04:	00190300 	.word	0x00190300
 8031c08:	001a0300 	.word	0x001a0300
 8031c0c:	001b0300 	.word	0x001b0300
 8031c10:	001c0300 	.word	0x001c0300
 8031c14:	001d0300 	.word	0x001d0300
 8031c18:	001e0300 	.word	0x001e0300
 8031c1c:	001f0300 	.word	0x001f0300
 8031c20:	080386ec 	.word	0x080386ec
 8031c24:	40007000 	.word	0x40007000
 8031c28:	42470e40 	.word	0x42470e40
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8031c2c:	4b17      	ldr	r3, [pc, #92]	@ (8031c8c <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8031c2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8031c30:	f003 0302 	and.w	r3, r3, #2
 8031c34:	2b00      	cmp	r3, #0
 8031c36:	d0aa      	beq.n	8031b8e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8031c38:	687b      	ldr	r3, [r7, #4]
 8031c3a:	68db      	ldr	r3, [r3, #12]
 8031c3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8031c40:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8031c44:	d10d      	bne.n	8031c62 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 8031c46:	4b11      	ldr	r3, [pc, #68]	@ (8031c8c <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8031c48:	689b      	ldr	r3, [r3, #8]
 8031c4a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8031c4e:	687b      	ldr	r3, [r7, #4]
 8031c50:	68db      	ldr	r3, [r3, #12]
 8031c52:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8031c56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8031c5a:	490c      	ldr	r1, [pc, #48]	@ (8031c8c <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8031c5c:	4313      	orrs	r3, r2
 8031c5e:	608b      	str	r3, [r1, #8]
 8031c60:	e005      	b.n	8031c6e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8031c62:	4b0a      	ldr	r3, [pc, #40]	@ (8031c8c <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8031c64:	689b      	ldr	r3, [r3, #8]
 8031c66:	4a09      	ldr	r2, [pc, #36]	@ (8031c8c <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8031c68:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8031c6c:	6093      	str	r3, [r2, #8]
 8031c6e:	4b07      	ldr	r3, [pc, #28]	@ (8031c8c <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8031c70:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8031c72:	687b      	ldr	r3, [r7, #4]
 8031c74:	68db      	ldr	r3, [r3, #12]
 8031c76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8031c7a:	4904      	ldr	r1, [pc, #16]	@ (8031c8c <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8031c7c:	4313      	orrs	r3, r2
 8031c7e:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8031c80:	2300      	movs	r3, #0
}
 8031c82:	4618      	mov	r0, r3
 8031c84:	3718      	adds	r7, #24
 8031c86:	46bd      	mov	sp, r7
 8031c88:	bd80      	pop	{r7, pc}
 8031c8a:	bf00      	nop
 8031c8c:	40023800 	.word	0x40023800

08031c90 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8031c90:	b580      	push	{r7, lr}
 8031c92:	b084      	sub	sp, #16
 8031c94:	af00      	add	r7, sp, #0
 8031c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8031c98:	2301      	movs	r3, #1
 8031c9a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8031c9c:	687b      	ldr	r3, [r7, #4]
 8031c9e:	2b00      	cmp	r3, #0
 8031ca0:	d101      	bne.n	8031ca6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8031ca2:	2301      	movs	r3, #1
 8031ca4:	e0f2      	b.n	8031e8c <HAL_RTC_Init+0x1fc>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 8031ca6:	687b      	ldr	r3, [r7, #4]
 8031ca8:	681b      	ldr	r3, [r3, #0]
 8031caa:	4a7a      	ldr	r2, [pc, #488]	@ (8031e94 <HAL_RTC_Init+0x204>)
 8031cac:	4293      	cmp	r3, r2
 8031cae:	d004      	beq.n	8031cba <HAL_RTC_Init+0x2a>
 8031cb0:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8031cb4:	4878      	ldr	r0, [pc, #480]	@ (8031e98 <HAL_RTC_Init+0x208>)
 8031cb6:	f7f6 f81e 	bl	8027cf6 <assert_failed>
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 8031cba:	687b      	ldr	r3, [r7, #4]
 8031cbc:	685b      	ldr	r3, [r3, #4]
 8031cbe:	2b40      	cmp	r3, #64	@ 0x40
 8031cc0:	d008      	beq.n	8031cd4 <HAL_RTC_Init+0x44>
 8031cc2:	687b      	ldr	r3, [r7, #4]
 8031cc4:	685b      	ldr	r3, [r3, #4]
 8031cc6:	2b00      	cmp	r3, #0
 8031cc8:	d004      	beq.n	8031cd4 <HAL_RTC_Init+0x44>
 8031cca:	f240 1105 	movw	r1, #261	@ 0x105
 8031cce:	4872      	ldr	r0, [pc, #456]	@ (8031e98 <HAL_RTC_Init+0x208>)
 8031cd0:	f7f6 f811 	bl	8027cf6 <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8031cd4:	687b      	ldr	r3, [r7, #4]
 8031cd6:	689b      	ldr	r3, [r3, #8]
 8031cd8:	2b7f      	cmp	r3, #127	@ 0x7f
 8031cda:	d904      	bls.n	8031ce6 <HAL_RTC_Init+0x56>
 8031cdc:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8031ce0:	486d      	ldr	r0, [pc, #436]	@ (8031e98 <HAL_RTC_Init+0x208>)
 8031ce2:	f7f6 f808 	bl	8027cf6 <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 8031ce6:	687b      	ldr	r3, [r7, #4]
 8031ce8:	68db      	ldr	r3, [r3, #12]
 8031cea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8031cee:	d304      	bcc.n	8031cfa <HAL_RTC_Init+0x6a>
 8031cf0:	f240 1107 	movw	r1, #263	@ 0x107
 8031cf4:	4868      	ldr	r0, [pc, #416]	@ (8031e98 <HAL_RTC_Init+0x208>)
 8031cf6:	f7f5 fffe 	bl	8027cf6 <assert_failed>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 8031cfa:	687b      	ldr	r3, [r7, #4]
 8031cfc:	691b      	ldr	r3, [r3, #16]
 8031cfe:	2b00      	cmp	r3, #0
 8031d00:	d013      	beq.n	8031d2a <HAL_RTC_Init+0x9a>
 8031d02:	687b      	ldr	r3, [r7, #4]
 8031d04:	691b      	ldr	r3, [r3, #16]
 8031d06:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8031d0a:	d00e      	beq.n	8031d2a <HAL_RTC_Init+0x9a>
 8031d0c:	687b      	ldr	r3, [r7, #4]
 8031d0e:	691b      	ldr	r3, [r3, #16]
 8031d10:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8031d14:	d009      	beq.n	8031d2a <HAL_RTC_Init+0x9a>
 8031d16:	687b      	ldr	r3, [r7, #4]
 8031d18:	691b      	ldr	r3, [r3, #16]
 8031d1a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8031d1e:	d004      	beq.n	8031d2a <HAL_RTC_Init+0x9a>
 8031d20:	f44f 7184 	mov.w	r1, #264	@ 0x108
 8031d24:	485c      	ldr	r0, [pc, #368]	@ (8031e98 <HAL_RTC_Init+0x208>)
 8031d26:	f7f5 ffe6 	bl	8027cf6 <assert_failed>
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 8031d2a:	687b      	ldr	r3, [r7, #4]
 8031d2c:	695b      	ldr	r3, [r3, #20]
 8031d2e:	2b00      	cmp	r3, #0
 8031d30:	d009      	beq.n	8031d46 <HAL_RTC_Init+0xb6>
 8031d32:	687b      	ldr	r3, [r7, #4]
 8031d34:	695b      	ldr	r3, [r3, #20]
 8031d36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8031d3a:	d004      	beq.n	8031d46 <HAL_RTC_Init+0xb6>
 8031d3c:	f240 1109 	movw	r1, #265	@ 0x109
 8031d40:	4855      	ldr	r0, [pc, #340]	@ (8031e98 <HAL_RTC_Init+0x208>)
 8031d42:	f7f5 ffd8 	bl	8027cf6 <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 8031d46:	687b      	ldr	r3, [r7, #4]
 8031d48:	699b      	ldr	r3, [r3, #24]
 8031d4a:	2b00      	cmp	r3, #0
 8031d4c:	d009      	beq.n	8031d62 <HAL_RTC_Init+0xd2>
 8031d4e:	687b      	ldr	r3, [r7, #4]
 8031d50:	699b      	ldr	r3, [r3, #24]
 8031d52:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8031d56:	d004      	beq.n	8031d62 <HAL_RTC_Init+0xd2>
 8031d58:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8031d5c:	484e      	ldr	r0, [pc, #312]	@ (8031e98 <HAL_RTC_Init+0x208>)
 8031d5e:	f7f5 ffca 	bl	8027cf6 <assert_failed>

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8031d62:	687b      	ldr	r3, [r7, #4]
 8031d64:	7f5b      	ldrb	r3, [r3, #29]
 8031d66:	b2db      	uxtb	r3, r3
 8031d68:	2b00      	cmp	r3, #0
 8031d6a:	d126      	bne.n	8031dba <HAL_RTC_Init+0x12a>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8031d6c:	687b      	ldr	r3, [r7, #4]
 8031d6e:	2200      	movs	r2, #0
 8031d70:	771a      	strb	r2, [r3, #28]

    hrtc->AlarmAEventCallback          =  HAL_RTC_AlarmAEventCallback;        /* Legacy weak AlarmAEventCallback      */
 8031d72:	687b      	ldr	r3, [r7, #4]
 8031d74:	4a49      	ldr	r2, [pc, #292]	@ (8031e9c <HAL_RTC_Init+0x20c>)
 8031d76:	621a      	str	r2, [r3, #32]
    hrtc->AlarmBEventCallback          =  HAL_RTCEx_AlarmBEventCallback;      /* Legacy weak AlarmBEventCallback      */
 8031d78:	687b      	ldr	r3, [r7, #4]
 8031d7a:	4a49      	ldr	r2, [pc, #292]	@ (8031ea0 <HAL_RTC_Init+0x210>)
 8031d7c:	625a      	str	r2, [r3, #36]	@ 0x24
    hrtc->TimeStampEventCallback       =  HAL_RTCEx_TimeStampEventCallback;   /* Legacy weak TimeStampEventCallback   */
 8031d7e:	687b      	ldr	r3, [r7, #4]
 8031d80:	4a48      	ldr	r2, [pc, #288]	@ (8031ea4 <HAL_RTC_Init+0x214>)
 8031d82:	629a      	str	r2, [r3, #40]	@ 0x28
    hrtc->WakeUpTimerEventCallback     =  HAL_RTCEx_WakeUpTimerEventCallback; /* Legacy weak WakeUpTimerEventCallback */
 8031d84:	687b      	ldr	r3, [r7, #4]
 8031d86:	4a48      	ldr	r2, [pc, #288]	@ (8031ea8 <HAL_RTC_Init+0x218>)
 8031d88:	62da      	str	r2, [r3, #44]	@ 0x2c
    hrtc->Tamper1EventCallback         =  HAL_RTCEx_Tamper1EventCallback;     /* Legacy weak Tamper1EventCallback     */
 8031d8a:	687b      	ldr	r3, [r7, #4]
 8031d8c:	4a47      	ldr	r2, [pc, #284]	@ (8031eac <HAL_RTC_Init+0x21c>)
 8031d8e:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(RTC_TAMPER2_SUPPORT)
    hrtc->Tamper2EventCallback         =  HAL_RTCEx_Tamper2EventCallback;     /* Legacy weak Tamper2EventCallback     */
 8031d90:	687b      	ldr	r3, [r7, #4]
 8031d92:	4a47      	ldr	r2, [pc, #284]	@ (8031eb0 <HAL_RTC_Init+0x220>)
 8031d94:	635a      	str	r2, [r3, #52]	@ 0x34
#endif /* RTC_TAMPER2_SUPPORT */

    if (hrtc->MspInitCallback == NULL)
 8031d96:	687b      	ldr	r3, [r7, #4]
 8031d98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8031d9a:	2b00      	cmp	r3, #0
 8031d9c:	d102      	bne.n	8031da4 <HAL_RTC_Init+0x114>
    {
      hrtc->MspInitCallback = HAL_RTC_MspInit;
 8031d9e:	687b      	ldr	r3, [r7, #4]
 8031da0:	4a44      	ldr	r2, [pc, #272]	@ (8031eb4 <HAL_RTC_Init+0x224>)
 8031da2:	639a      	str	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware */
    hrtc->MspInitCallback(hrtc);
 8031da4:	687b      	ldr	r3, [r7, #4]
 8031da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8031da8:	6878      	ldr	r0, [r7, #4]
 8031daa:	4798      	blx	r3

    if (hrtc->MspDeInitCallback == NULL)
 8031dac:	687b      	ldr	r3, [r7, #4]
 8031dae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8031db0:	2b00      	cmp	r3, #0
 8031db2:	d102      	bne.n	8031dba <HAL_RTC_Init+0x12a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 8031db4:	687b      	ldr	r3, [r7, #4]
 8031db6:	4a40      	ldr	r2, [pc, #256]	@ (8031eb8 <HAL_RTC_Init+0x228>)
 8031db8:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_RTC_MspInit(hrtc);
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8031dba:	687b      	ldr	r3, [r7, #4]
 8031dbc:	2202      	movs	r2, #2
 8031dbe:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8031dc0:	687b      	ldr	r3, [r7, #4]
 8031dc2:	681b      	ldr	r3, [r3, #0]
 8031dc4:	68db      	ldr	r3, [r3, #12]
 8031dc6:	f003 0310 	and.w	r3, r3, #16
 8031dca:	2b10      	cmp	r3, #16
 8031dcc:	d055      	beq.n	8031e7a <HAL_RTC_Init+0x1ea>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8031dce:	687b      	ldr	r3, [r7, #4]
 8031dd0:	681b      	ldr	r3, [r3, #0]
 8031dd2:	22ca      	movs	r2, #202	@ 0xca
 8031dd4:	625a      	str	r2, [r3, #36]	@ 0x24
 8031dd6:	687b      	ldr	r3, [r7, #4]
 8031dd8:	681b      	ldr	r3, [r3, #0]
 8031dda:	2253      	movs	r2, #83	@ 0x53
 8031ddc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8031dde:	6878      	ldr	r0, [r7, #4]
 8031de0:	f000 fbb8 	bl	8032554 <RTC_EnterInitMode>
 8031de4:	4603      	mov	r3, r0
 8031de6:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8031de8:	7bfb      	ldrb	r3, [r7, #15]
 8031dea:	2b00      	cmp	r3, #0
 8031dec:	d12c      	bne.n	8031e48 <HAL_RTC_Init+0x1b8>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8031dee:	687b      	ldr	r3, [r7, #4]
 8031df0:	681b      	ldr	r3, [r3, #0]
 8031df2:	689b      	ldr	r3, [r3, #8]
 8031df4:	687a      	ldr	r2, [r7, #4]
 8031df6:	6812      	ldr	r2, [r2, #0]
 8031df8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8031dfc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8031e00:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8031e02:	687b      	ldr	r3, [r7, #4]
 8031e04:	681b      	ldr	r3, [r3, #0]
 8031e06:	6899      	ldr	r1, [r3, #8]
 8031e08:	687b      	ldr	r3, [r7, #4]
 8031e0a:	685a      	ldr	r2, [r3, #4]
 8031e0c:	687b      	ldr	r3, [r7, #4]
 8031e0e:	691b      	ldr	r3, [r3, #16]
 8031e10:	431a      	orrs	r2, r3
 8031e12:	687b      	ldr	r3, [r7, #4]
 8031e14:	695b      	ldr	r3, [r3, #20]
 8031e16:	431a      	orrs	r2, r3
 8031e18:	687b      	ldr	r3, [r7, #4]
 8031e1a:	681b      	ldr	r3, [r3, #0]
 8031e1c:	430a      	orrs	r2, r1
 8031e1e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8031e20:	687b      	ldr	r3, [r7, #4]
 8031e22:	681b      	ldr	r3, [r3, #0]
 8031e24:	687a      	ldr	r2, [r7, #4]
 8031e26:	68d2      	ldr	r2, [r2, #12]
 8031e28:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8031e2a:	687b      	ldr	r3, [r7, #4]
 8031e2c:	681b      	ldr	r3, [r3, #0]
 8031e2e:	6919      	ldr	r1, [r3, #16]
 8031e30:	687b      	ldr	r3, [r7, #4]
 8031e32:	689b      	ldr	r3, [r3, #8]
 8031e34:	041a      	lsls	r2, r3, #16
 8031e36:	687b      	ldr	r3, [r7, #4]
 8031e38:	681b      	ldr	r3, [r3, #0]
 8031e3a:	430a      	orrs	r2, r1
 8031e3c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8031e3e:	6878      	ldr	r0, [r7, #4]
 8031e40:	f000 fbbf 	bl	80325c2 <RTC_ExitInitMode>
 8031e44:	4603      	mov	r3, r0
 8031e46:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8031e48:	7bfb      	ldrb	r3, [r7, #15]
 8031e4a:	2b00      	cmp	r3, #0
 8031e4c:	d110      	bne.n	8031e70 <HAL_RTC_Init+0x1e0>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8031e4e:	687b      	ldr	r3, [r7, #4]
 8031e50:	681b      	ldr	r3, [r3, #0]
 8031e52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8031e54:	687b      	ldr	r3, [r7, #4]
 8031e56:	681b      	ldr	r3, [r3, #0]
 8031e58:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8031e5c:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8031e5e:	687b      	ldr	r3, [r7, #4]
 8031e60:	681b      	ldr	r3, [r3, #0]
 8031e62:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8031e64:	687b      	ldr	r3, [r7, #4]
 8031e66:	699a      	ldr	r2, [r3, #24]
 8031e68:	687b      	ldr	r3, [r7, #4]
 8031e6a:	681b      	ldr	r3, [r3, #0]
 8031e6c:	430a      	orrs	r2, r1
 8031e6e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8031e70:	687b      	ldr	r3, [r7, #4]
 8031e72:	681b      	ldr	r3, [r3, #0]
 8031e74:	22ff      	movs	r2, #255	@ 0xff
 8031e76:	625a      	str	r2, [r3, #36]	@ 0x24
 8031e78:	e001      	b.n	8031e7e <HAL_RTC_Init+0x1ee>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8031e7a:	2300      	movs	r3, #0
 8031e7c:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8031e7e:	7bfb      	ldrb	r3, [r7, #15]
 8031e80:	2b00      	cmp	r3, #0
 8031e82:	d102      	bne.n	8031e8a <HAL_RTC_Init+0x1fa>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8031e84:	687b      	ldr	r3, [r7, #4]
 8031e86:	2201      	movs	r2, #1
 8031e88:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8031e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8031e8c:	4618      	mov	r0, r3
 8031e8e:	3710      	adds	r7, #16
 8031e90:	46bd      	mov	sp, r7
 8031e92:	bd80      	pop	{r7, pc}
 8031e94:	40002800 	.word	0x40002800
 8031e98:	08038764 	.word	0x08038764
 8031e9c:	080324f5 	.word	0x080324f5
 8031ea0:	080326d5 	.word	0x080326d5
 8031ea4:	08032685 	.word	0x08032685
 8031ea8:	080326c1 	.word	0x080326c1
 8031eac:	08032699 	.word	0x08032699
 8031eb0:	080326ad 	.word	0x080326ad
 8031eb4:	08027dc1 	.word	0x08027dc1
 8031eb8:	08027e15 	.word	0x08027e15

08031ebc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8031ebc:	b590      	push	{r4, r7, lr}
 8031ebe:	b087      	sub	sp, #28
 8031ec0:	af00      	add	r7, sp, #0
 8031ec2:	60f8      	str	r0, [r7, #12]
 8031ec4:	60b9      	str	r1, [r7, #8]
 8031ec6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8031ec8:	2300      	movs	r3, #0
 8031eca:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8031ecc:	687b      	ldr	r3, [r7, #4]
 8031ece:	2b00      	cmp	r3, #0
 8031ed0:	d007      	beq.n	8031ee2 <HAL_RTC_SetTime+0x26>
 8031ed2:	687b      	ldr	r3, [r7, #4]
 8031ed4:	2b01      	cmp	r3, #1
 8031ed6:	d004      	beq.n	8031ee2 <HAL_RTC_SetTime+0x26>
 8031ed8:	f44f 7130 	mov.w	r1, #704	@ 0x2c0
 8031edc:	489a      	ldr	r0, [pc, #616]	@ (8032148 <HAL_RTC_SetTime+0x28c>)
 8031ede:	f7f5 ff0a 	bl	8027cf6 <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 8031ee2:	68bb      	ldr	r3, [r7, #8]
 8031ee4:	68db      	ldr	r3, [r3, #12]
 8031ee6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8031eea:	d00d      	beq.n	8031f08 <HAL_RTC_SetTime+0x4c>
 8031eec:	68bb      	ldr	r3, [r7, #8]
 8031eee:	68db      	ldr	r3, [r3, #12]
 8031ef0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8031ef4:	d008      	beq.n	8031f08 <HAL_RTC_SetTime+0x4c>
 8031ef6:	68bb      	ldr	r3, [r7, #8]
 8031ef8:	68db      	ldr	r3, [r3, #12]
 8031efa:	2b00      	cmp	r3, #0
 8031efc:	d004      	beq.n	8031f08 <HAL_RTC_SetTime+0x4c>
 8031efe:	f240 21c1 	movw	r1, #705	@ 0x2c1
 8031f02:	4891      	ldr	r0, [pc, #580]	@ (8032148 <HAL_RTC_SetTime+0x28c>)
 8031f04:	f7f5 fef7 	bl	8027cf6 <assert_failed>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 8031f08:	68bb      	ldr	r3, [r7, #8]
 8031f0a:	691b      	ldr	r3, [r3, #16]
 8031f0c:	2b00      	cmp	r3, #0
 8031f0e:	d009      	beq.n	8031f24 <HAL_RTC_SetTime+0x68>
 8031f10:	68bb      	ldr	r3, [r7, #8]
 8031f12:	691b      	ldr	r3, [r3, #16]
 8031f14:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8031f18:	d004      	beq.n	8031f24 <HAL_RTC_SetTime+0x68>
 8031f1a:	f240 21c2 	movw	r1, #706	@ 0x2c2
 8031f1e:	488a      	ldr	r0, [pc, #552]	@ (8032148 <HAL_RTC_SetTime+0x28c>)
 8031f20:	f7f5 fee9 	bl	8027cf6 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8031f24:	68fb      	ldr	r3, [r7, #12]
 8031f26:	7f1b      	ldrb	r3, [r3, #28]
 8031f28:	2b01      	cmp	r3, #1
 8031f2a:	d101      	bne.n	8031f30 <HAL_RTC_SetTime+0x74>
 8031f2c:	2302      	movs	r3, #2
 8031f2e:	e107      	b.n	8032140 <HAL_RTC_SetTime+0x284>
 8031f30:	68fb      	ldr	r3, [r7, #12]
 8031f32:	2201      	movs	r2, #1
 8031f34:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8031f36:	68fb      	ldr	r3, [r7, #12]
 8031f38:	2202      	movs	r2, #2
 8031f3a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8031f3c:	687b      	ldr	r3, [r7, #4]
 8031f3e:	2b00      	cmp	r3, #0
 8031f40:	d15c      	bne.n	8031ffc <HAL_RTC_SetTime+0x140>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8031f42:	68fb      	ldr	r3, [r7, #12]
 8031f44:	681b      	ldr	r3, [r3, #0]
 8031f46:	689b      	ldr	r3, [r3, #8]
 8031f48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8031f4c:	2b00      	cmp	r3, #0
 8031f4e:	d01a      	beq.n	8031f86 <HAL_RTC_SetTime+0xca>
    {
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 8031f50:	68bb      	ldr	r3, [r7, #8]
 8031f52:	781b      	ldrb	r3, [r3, #0]
 8031f54:	2b00      	cmp	r3, #0
 8031f56:	d003      	beq.n	8031f60 <HAL_RTC_SetTime+0xa4>
 8031f58:	68bb      	ldr	r3, [r7, #8]
 8031f5a:	781b      	ldrb	r3, [r3, #0]
 8031f5c:	2b0c      	cmp	r3, #12
 8031f5e:	d904      	bls.n	8031f6a <HAL_RTC_SetTime+0xae>
 8031f60:	f240 21cd 	movw	r1, #717	@ 0x2cd
 8031f64:	4878      	ldr	r0, [pc, #480]	@ (8032148 <HAL_RTC_SetTime+0x28c>)
 8031f66:	f7f5 fec6 	bl	8027cf6 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8031f6a:	68bb      	ldr	r3, [r7, #8]
 8031f6c:	78db      	ldrb	r3, [r3, #3]
 8031f6e:	2b00      	cmp	r3, #0
 8031f70:	d015      	beq.n	8031f9e <HAL_RTC_SetTime+0xe2>
 8031f72:	68bb      	ldr	r3, [r7, #8]
 8031f74:	78db      	ldrb	r3, [r3, #3]
 8031f76:	2b01      	cmp	r3, #1
 8031f78:	d011      	beq.n	8031f9e <HAL_RTC_SetTime+0xe2>
 8031f7a:	f240 21ce 	movw	r1, #718	@ 0x2ce
 8031f7e:	4872      	ldr	r0, [pc, #456]	@ (8032148 <HAL_RTC_SetTime+0x28c>)
 8031f80:	f7f5 feb9 	bl	8027cf6 <assert_failed>
 8031f84:	e00b      	b.n	8031f9e <HAL_RTC_SetTime+0xe2>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8031f86:	68bb      	ldr	r3, [r7, #8]
 8031f88:	2200      	movs	r2, #0
 8031f8a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 8031f8c:	68bb      	ldr	r3, [r7, #8]
 8031f8e:	781b      	ldrb	r3, [r3, #0]
 8031f90:	2b17      	cmp	r3, #23
 8031f92:	d904      	bls.n	8031f9e <HAL_RTC_SetTime+0xe2>
 8031f94:	f240 21d3 	movw	r1, #723	@ 0x2d3
 8031f98:	486b      	ldr	r0, [pc, #428]	@ (8032148 <HAL_RTC_SetTime+0x28c>)
 8031f9a:	f7f5 feac 	bl	8027cf6 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 8031f9e:	68bb      	ldr	r3, [r7, #8]
 8031fa0:	785b      	ldrb	r3, [r3, #1]
 8031fa2:	2b3b      	cmp	r3, #59	@ 0x3b
 8031fa4:	d904      	bls.n	8031fb0 <HAL_RTC_SetTime+0xf4>
 8031fa6:	f240 21d5 	movw	r1, #725	@ 0x2d5
 8031faa:	4867      	ldr	r0, [pc, #412]	@ (8032148 <HAL_RTC_SetTime+0x28c>)
 8031fac:	f7f5 fea3 	bl	8027cf6 <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 8031fb0:	68bb      	ldr	r3, [r7, #8]
 8031fb2:	789b      	ldrb	r3, [r3, #2]
 8031fb4:	2b3b      	cmp	r3, #59	@ 0x3b
 8031fb6:	d904      	bls.n	8031fc2 <HAL_RTC_SetTime+0x106>
 8031fb8:	f240 21d6 	movw	r1, #726	@ 0x2d6
 8031fbc:	4862      	ldr	r0, [pc, #392]	@ (8032148 <HAL_RTC_SetTime+0x28c>)
 8031fbe:	f7f5 fe9a 	bl	8027cf6 <assert_failed>

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8031fc2:	68bb      	ldr	r3, [r7, #8]
 8031fc4:	781b      	ldrb	r3, [r3, #0]
 8031fc6:	4618      	mov	r0, r3
 8031fc8:	f000 fb20 	bl	803260c <RTC_ByteToBcd2>
 8031fcc:	4603      	mov	r3, r0
 8031fce:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8031fd0:	68bb      	ldr	r3, [r7, #8]
 8031fd2:	785b      	ldrb	r3, [r3, #1]
 8031fd4:	4618      	mov	r0, r3
 8031fd6:	f000 fb19 	bl	803260c <RTC_ByteToBcd2>
 8031fda:	4603      	mov	r3, r0
 8031fdc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8031fde:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8031fe0:	68bb      	ldr	r3, [r7, #8]
 8031fe2:	789b      	ldrb	r3, [r3, #2]
 8031fe4:	4618      	mov	r0, r3
 8031fe6:	f000 fb11 	bl	803260c <RTC_ByteToBcd2>
 8031fea:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8031fec:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8031ff0:	68bb      	ldr	r3, [r7, #8]
 8031ff2:	78db      	ldrb	r3, [r3, #3]
 8031ff4:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8031ff6:	4313      	orrs	r3, r2
 8031ff8:	617b      	str	r3, [r7, #20]
 8031ffa:	e062      	b.n	80320c2 <HAL_RTC_SetTime+0x206>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8031ffc:	68fb      	ldr	r3, [r7, #12]
 8031ffe:	681b      	ldr	r3, [r3, #0]
 8032000:	689b      	ldr	r3, [r3, #8]
 8032002:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8032006:	2b00      	cmp	r3, #0
 8032008:	d022      	beq.n	8032050 <HAL_RTC_SetTime+0x194>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 803200a:	68bb      	ldr	r3, [r7, #8]
 803200c:	781b      	ldrb	r3, [r3, #0]
 803200e:	4618      	mov	r0, r3
 8032010:	f000 fb1a 	bl	8032648 <RTC_Bcd2ToByte>
 8032014:	4603      	mov	r3, r0
 8032016:	2b00      	cmp	r3, #0
 8032018:	d007      	beq.n	803202a <HAL_RTC_SetTime+0x16e>
 803201a:	68bb      	ldr	r3, [r7, #8]
 803201c:	781b      	ldrb	r3, [r3, #0]
 803201e:	4618      	mov	r0, r3
 8032020:	f000 fb12 	bl	8032648 <RTC_Bcd2ToByte>
 8032024:	4603      	mov	r3, r0
 8032026:	2b0c      	cmp	r3, #12
 8032028:	d904      	bls.n	8032034 <HAL_RTC_SetTime+0x178>
 803202a:	f240 21e1 	movw	r1, #737	@ 0x2e1
 803202e:	4846      	ldr	r0, [pc, #280]	@ (8032148 <HAL_RTC_SetTime+0x28c>)
 8032030:	f7f5 fe61 	bl	8027cf6 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8032034:	68bb      	ldr	r3, [r7, #8]
 8032036:	78db      	ldrb	r3, [r3, #3]
 8032038:	2b00      	cmp	r3, #0
 803203a:	d019      	beq.n	8032070 <HAL_RTC_SetTime+0x1b4>
 803203c:	68bb      	ldr	r3, [r7, #8]
 803203e:	78db      	ldrb	r3, [r3, #3]
 8032040:	2b01      	cmp	r3, #1
 8032042:	d015      	beq.n	8032070 <HAL_RTC_SetTime+0x1b4>
 8032044:	f240 21e2 	movw	r1, #738	@ 0x2e2
 8032048:	483f      	ldr	r0, [pc, #252]	@ (8032148 <HAL_RTC_SetTime+0x28c>)
 803204a:	f7f5 fe54 	bl	8027cf6 <assert_failed>
 803204e:	e00f      	b.n	8032070 <HAL_RTC_SetTime+0x1b4>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8032050:	68bb      	ldr	r3, [r7, #8]
 8032052:	2200      	movs	r2, #0
 8032054:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 8032056:	68bb      	ldr	r3, [r7, #8]
 8032058:	781b      	ldrb	r3, [r3, #0]
 803205a:	4618      	mov	r0, r3
 803205c:	f000 faf4 	bl	8032648 <RTC_Bcd2ToByte>
 8032060:	4603      	mov	r3, r0
 8032062:	2b17      	cmp	r3, #23
 8032064:	d904      	bls.n	8032070 <HAL_RTC_SetTime+0x1b4>
 8032066:	f240 21e7 	movw	r1, #743	@ 0x2e7
 803206a:	4837      	ldr	r0, [pc, #220]	@ (8032148 <HAL_RTC_SetTime+0x28c>)
 803206c:	f7f5 fe43 	bl	8027cf6 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 8032070:	68bb      	ldr	r3, [r7, #8]
 8032072:	785b      	ldrb	r3, [r3, #1]
 8032074:	4618      	mov	r0, r3
 8032076:	f000 fae7 	bl	8032648 <RTC_Bcd2ToByte>
 803207a:	4603      	mov	r3, r0
 803207c:	2b3b      	cmp	r3, #59	@ 0x3b
 803207e:	d904      	bls.n	803208a <HAL_RTC_SetTime+0x1ce>
 8032080:	f240 21e9 	movw	r1, #745	@ 0x2e9
 8032084:	4830      	ldr	r0, [pc, #192]	@ (8032148 <HAL_RTC_SetTime+0x28c>)
 8032086:	f7f5 fe36 	bl	8027cf6 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 803208a:	68bb      	ldr	r3, [r7, #8]
 803208c:	789b      	ldrb	r3, [r3, #2]
 803208e:	4618      	mov	r0, r3
 8032090:	f000 fada 	bl	8032648 <RTC_Bcd2ToByte>
 8032094:	4603      	mov	r3, r0
 8032096:	2b3b      	cmp	r3, #59	@ 0x3b
 8032098:	d904      	bls.n	80320a4 <HAL_RTC_SetTime+0x1e8>
 803209a:	f240 21ea 	movw	r1, #746	@ 0x2ea
 803209e:	482a      	ldr	r0, [pc, #168]	@ (8032148 <HAL_RTC_SetTime+0x28c>)
 80320a0:	f7f5 fe29 	bl	8027cf6 <assert_failed>
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80320a4:	68bb      	ldr	r3, [r7, #8]
 80320a6:	781b      	ldrb	r3, [r3, #0]
 80320a8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80320aa:	68bb      	ldr	r3, [r7, #8]
 80320ac:	785b      	ldrb	r3, [r3, #1]
 80320ae:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80320b0:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80320b2:	68ba      	ldr	r2, [r7, #8]
 80320b4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80320b6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80320b8:	68bb      	ldr	r3, [r7, #8]
 80320ba:	78db      	ldrb	r3, [r3, #3]
 80320bc:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80320be:	4313      	orrs	r3, r2
 80320c0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80320c2:	68fb      	ldr	r3, [r7, #12]
 80320c4:	681b      	ldr	r3, [r3, #0]
 80320c6:	22ca      	movs	r2, #202	@ 0xca
 80320c8:	625a      	str	r2, [r3, #36]	@ 0x24
 80320ca:	68fb      	ldr	r3, [r7, #12]
 80320cc:	681b      	ldr	r3, [r3, #0]
 80320ce:	2253      	movs	r2, #83	@ 0x53
 80320d0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80320d2:	68f8      	ldr	r0, [r7, #12]
 80320d4:	f000 fa3e 	bl	8032554 <RTC_EnterInitMode>
 80320d8:	4603      	mov	r3, r0
 80320da:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80320dc:	7cfb      	ldrb	r3, [r7, #19]
 80320de:	2b00      	cmp	r3, #0
 80320e0:	d120      	bne.n	8032124 <HAL_RTC_SetTime+0x268>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80320e2:	68fb      	ldr	r3, [r7, #12]
 80320e4:	681a      	ldr	r2, [r3, #0]
 80320e6:	697b      	ldr	r3, [r7, #20]
 80320e8:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80320ec:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80320f0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80320f2:	68fb      	ldr	r3, [r7, #12]
 80320f4:	681b      	ldr	r3, [r3, #0]
 80320f6:	689a      	ldr	r2, [r3, #8]
 80320f8:	68fb      	ldr	r3, [r7, #12]
 80320fa:	681b      	ldr	r3, [r3, #0]
 80320fc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8032100:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8032102:	68fb      	ldr	r3, [r7, #12]
 8032104:	681b      	ldr	r3, [r3, #0]
 8032106:	6899      	ldr	r1, [r3, #8]
 8032108:	68bb      	ldr	r3, [r7, #8]
 803210a:	68da      	ldr	r2, [r3, #12]
 803210c:	68bb      	ldr	r3, [r7, #8]
 803210e:	691b      	ldr	r3, [r3, #16]
 8032110:	431a      	orrs	r2, r3
 8032112:	68fb      	ldr	r3, [r7, #12]
 8032114:	681b      	ldr	r3, [r3, #0]
 8032116:	430a      	orrs	r2, r1
 8032118:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 803211a:	68f8      	ldr	r0, [r7, #12]
 803211c:	f000 fa51 	bl	80325c2 <RTC_ExitInitMode>
 8032120:	4603      	mov	r3, r0
 8032122:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8032124:	7cfb      	ldrb	r3, [r7, #19]
 8032126:	2b00      	cmp	r3, #0
 8032128:	d102      	bne.n	8032130 <HAL_RTC_SetTime+0x274>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 803212a:	68fb      	ldr	r3, [r7, #12]
 803212c:	2201      	movs	r2, #1
 803212e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8032130:	68fb      	ldr	r3, [r7, #12]
 8032132:	681b      	ldr	r3, [r3, #0]
 8032134:	22ff      	movs	r2, #255	@ 0xff
 8032136:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8032138:	68fb      	ldr	r3, [r7, #12]
 803213a:	2200      	movs	r2, #0
 803213c:	771a      	strb	r2, [r3, #28]

  return status;
 803213e:	7cfb      	ldrb	r3, [r7, #19]
}
 8032140:	4618      	mov	r0, r3
 8032142:	371c      	adds	r7, #28
 8032144:	46bd      	mov	sp, r7
 8032146:	bd90      	pop	{r4, r7, pc}
 8032148:	08038764 	.word	0x08038764

0803214c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 803214c:	b580      	push	{r7, lr}
 803214e:	b086      	sub	sp, #24
 8032150:	af00      	add	r7, sp, #0
 8032152:	60f8      	str	r0, [r7, #12]
 8032154:	60b9      	str	r1, [r7, #8]
 8032156:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8032158:	2300      	movs	r3, #0
 803215a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 803215c:	687b      	ldr	r3, [r7, #4]
 803215e:	2b00      	cmp	r3, #0
 8032160:	d007      	beq.n	8032172 <HAL_RTC_GetTime+0x26>
 8032162:	687b      	ldr	r3, [r7, #4]
 8032164:	2b01      	cmp	r3, #1
 8032166:	d004      	beq.n	8032172 <HAL_RTC_GetTime+0x26>
 8032168:	f240 3131 	movw	r1, #817	@ 0x331
 803216c:	482c      	ldr	r0, [pc, #176]	@ (8032220 <HAL_RTC_GetTime+0xd4>)
 803216e:	f7f5 fdc2 	bl	8027cf6 <assert_failed>

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8032172:	68fb      	ldr	r3, [r7, #12]
 8032174:	681b      	ldr	r3, [r3, #0]
 8032176:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8032178:	68bb      	ldr	r3, [r7, #8]
 803217a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 803217c:	68fb      	ldr	r3, [r7, #12]
 803217e:	681b      	ldr	r3, [r3, #0]
 8032180:	691b      	ldr	r3, [r3, #16]
 8032182:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8032186:	68bb      	ldr	r3, [r7, #8]
 8032188:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 803218a:	68fb      	ldr	r3, [r7, #12]
 803218c:	681b      	ldr	r3, [r3, #0]
 803218e:	681b      	ldr	r3, [r3, #0]
 8032190:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8032194:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8032198:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 803219a:	697b      	ldr	r3, [r7, #20]
 803219c:	0c1b      	lsrs	r3, r3, #16
 803219e:	b2db      	uxtb	r3, r3
 80321a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80321a4:	b2da      	uxtb	r2, r3
 80321a6:	68bb      	ldr	r3, [r7, #8]
 80321a8:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80321aa:	697b      	ldr	r3, [r7, #20]
 80321ac:	0a1b      	lsrs	r3, r3, #8
 80321ae:	b2db      	uxtb	r3, r3
 80321b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80321b4:	b2da      	uxtb	r2, r3
 80321b6:	68bb      	ldr	r3, [r7, #8]
 80321b8:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80321ba:	697b      	ldr	r3, [r7, #20]
 80321bc:	b2db      	uxtb	r3, r3
 80321be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80321c2:	b2da      	uxtb	r2, r3
 80321c4:	68bb      	ldr	r3, [r7, #8]
 80321c6:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80321c8:	697b      	ldr	r3, [r7, #20]
 80321ca:	0d9b      	lsrs	r3, r3, #22
 80321cc:	b2db      	uxtb	r3, r3
 80321ce:	f003 0301 	and.w	r3, r3, #1
 80321d2:	b2da      	uxtb	r2, r3
 80321d4:	68bb      	ldr	r3, [r7, #8]
 80321d6:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80321d8:	687b      	ldr	r3, [r7, #4]
 80321da:	2b00      	cmp	r3, #0
 80321dc:	d11a      	bne.n	8032214 <HAL_RTC_GetTime+0xc8>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80321de:	68bb      	ldr	r3, [r7, #8]
 80321e0:	781b      	ldrb	r3, [r3, #0]
 80321e2:	4618      	mov	r0, r3
 80321e4:	f000 fa30 	bl	8032648 <RTC_Bcd2ToByte>
 80321e8:	4603      	mov	r3, r0
 80321ea:	461a      	mov	r2, r3
 80321ec:	68bb      	ldr	r3, [r7, #8]
 80321ee:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80321f0:	68bb      	ldr	r3, [r7, #8]
 80321f2:	785b      	ldrb	r3, [r3, #1]
 80321f4:	4618      	mov	r0, r3
 80321f6:	f000 fa27 	bl	8032648 <RTC_Bcd2ToByte>
 80321fa:	4603      	mov	r3, r0
 80321fc:	461a      	mov	r2, r3
 80321fe:	68bb      	ldr	r3, [r7, #8]
 8032200:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8032202:	68bb      	ldr	r3, [r7, #8]
 8032204:	789b      	ldrb	r3, [r3, #2]
 8032206:	4618      	mov	r0, r3
 8032208:	f000 fa1e 	bl	8032648 <RTC_Bcd2ToByte>
 803220c:	4603      	mov	r3, r0
 803220e:	461a      	mov	r2, r3
 8032210:	68bb      	ldr	r3, [r7, #8]
 8032212:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8032214:	2300      	movs	r3, #0
}
 8032216:	4618      	mov	r0, r3
 8032218:	3718      	adds	r7, #24
 803221a:	46bd      	mov	sp, r7
 803221c:	bd80      	pop	{r7, pc}
 803221e:	bf00      	nop
 8032220:	08038764 	.word	0x08038764

08032224 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8032224:	b590      	push	{r4, r7, lr}
 8032226:	b087      	sub	sp, #28
 8032228:	af00      	add	r7, sp, #0
 803222a:	60f8      	str	r0, [r7, #12]
 803222c:	60b9      	str	r1, [r7, #8]
 803222e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8032230:	2300      	movs	r3, #0
 8032232:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8032234:	687b      	ldr	r3, [r7, #4]
 8032236:	2b00      	cmp	r3, #0
 8032238:	d007      	beq.n	803224a <HAL_RTC_SetDate+0x26>
 803223a:	687b      	ldr	r3, [r7, #4]
 803223c:	2b01      	cmp	r3, #1
 803223e:	d004      	beq.n	803224a <HAL_RTC_SetDate+0x26>
 8032240:	f240 315f 	movw	r1, #863	@ 0x35f
 8032244:	487c      	ldr	r0, [pc, #496]	@ (8032438 <HAL_RTC_SetDate+0x214>)
 8032246:	f7f5 fd56 	bl	8027cf6 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 803224a:	68fb      	ldr	r3, [r7, #12]
 803224c:	7f1b      	ldrb	r3, [r3, #28]
 803224e:	2b01      	cmp	r3, #1
 8032250:	d101      	bne.n	8032256 <HAL_RTC_SetDate+0x32>
 8032252:	2302      	movs	r3, #2
 8032254:	e0ec      	b.n	8032430 <HAL_RTC_SetDate+0x20c>
 8032256:	68fb      	ldr	r3, [r7, #12]
 8032258:	2201      	movs	r2, #1
 803225a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 803225c:	68fb      	ldr	r3, [r7, #12]
 803225e:	2202      	movs	r2, #2
 8032260:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8032262:	687b      	ldr	r3, [r7, #4]
 8032264:	2b00      	cmp	r3, #0
 8032266:	d10e      	bne.n	8032286 <HAL_RTC_SetDate+0x62>
 8032268:	68bb      	ldr	r3, [r7, #8]
 803226a:	785b      	ldrb	r3, [r3, #1]
 803226c:	f003 0310 	and.w	r3, r3, #16
 8032270:	2b00      	cmp	r3, #0
 8032272:	d008      	beq.n	8032286 <HAL_RTC_SetDate+0x62>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8032274:	68bb      	ldr	r3, [r7, #8]
 8032276:	785b      	ldrb	r3, [r3, #1]
 8032278:	f023 0310 	bic.w	r3, r3, #16
 803227c:	b2db      	uxtb	r3, r3
 803227e:	330a      	adds	r3, #10
 8032280:	b2da      	uxtb	r2, r3
 8032282:	68bb      	ldr	r3, [r7, #8]
 8032284:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 8032286:	68bb      	ldr	r3, [r7, #8]
 8032288:	781b      	ldrb	r3, [r3, #0]
 803228a:	2b01      	cmp	r3, #1
 803228c:	d01c      	beq.n	80322c8 <HAL_RTC_SetDate+0xa4>
 803228e:	68bb      	ldr	r3, [r7, #8]
 8032290:	781b      	ldrb	r3, [r3, #0]
 8032292:	2b02      	cmp	r3, #2
 8032294:	d018      	beq.n	80322c8 <HAL_RTC_SetDate+0xa4>
 8032296:	68bb      	ldr	r3, [r7, #8]
 8032298:	781b      	ldrb	r3, [r3, #0]
 803229a:	2b03      	cmp	r3, #3
 803229c:	d014      	beq.n	80322c8 <HAL_RTC_SetDate+0xa4>
 803229e:	68bb      	ldr	r3, [r7, #8]
 80322a0:	781b      	ldrb	r3, [r3, #0]
 80322a2:	2b04      	cmp	r3, #4
 80322a4:	d010      	beq.n	80322c8 <HAL_RTC_SetDate+0xa4>
 80322a6:	68bb      	ldr	r3, [r7, #8]
 80322a8:	781b      	ldrb	r3, [r3, #0]
 80322aa:	2b05      	cmp	r3, #5
 80322ac:	d00c      	beq.n	80322c8 <HAL_RTC_SetDate+0xa4>
 80322ae:	68bb      	ldr	r3, [r7, #8]
 80322b0:	781b      	ldrb	r3, [r3, #0]
 80322b2:	2b06      	cmp	r3, #6
 80322b4:	d008      	beq.n	80322c8 <HAL_RTC_SetDate+0xa4>
 80322b6:	68bb      	ldr	r3, [r7, #8]
 80322b8:	781b      	ldrb	r3, [r3, #0]
 80322ba:	2b07      	cmp	r3, #7
 80322bc:	d004      	beq.n	80322c8 <HAL_RTC_SetDate+0xa4>
 80322be:	f240 316b 	movw	r1, #875	@ 0x36b
 80322c2:	485d      	ldr	r0, [pc, #372]	@ (8032438 <HAL_RTC_SetDate+0x214>)
 80322c4:	f7f5 fd17 	bl	8027cf6 <assert_failed>

  if (Format == RTC_FORMAT_BIN)
 80322c8:	687b      	ldr	r3, [r7, #4]
 80322ca:	2b00      	cmp	r3, #0
 80322cc:	d13f      	bne.n	803234e <HAL_RTC_SetDate+0x12a>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 80322ce:	68bb      	ldr	r3, [r7, #8]
 80322d0:	78db      	ldrb	r3, [r3, #3]
 80322d2:	2b63      	cmp	r3, #99	@ 0x63
 80322d4:	d904      	bls.n	80322e0 <HAL_RTC_SetDate+0xbc>
 80322d6:	f240 316f 	movw	r1, #879	@ 0x36f
 80322da:	4857      	ldr	r0, [pc, #348]	@ (8032438 <HAL_RTC_SetDate+0x214>)
 80322dc:	f7f5 fd0b 	bl	8027cf6 <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 80322e0:	68bb      	ldr	r3, [r7, #8]
 80322e2:	785b      	ldrb	r3, [r3, #1]
 80322e4:	2b00      	cmp	r3, #0
 80322e6:	d003      	beq.n	80322f0 <HAL_RTC_SetDate+0xcc>
 80322e8:	68bb      	ldr	r3, [r7, #8]
 80322ea:	785b      	ldrb	r3, [r3, #1]
 80322ec:	2b0c      	cmp	r3, #12
 80322ee:	d904      	bls.n	80322fa <HAL_RTC_SetDate+0xd6>
 80322f0:	f44f 715c 	mov.w	r1, #880	@ 0x370
 80322f4:	4850      	ldr	r0, [pc, #320]	@ (8032438 <HAL_RTC_SetDate+0x214>)
 80322f6:	f7f5 fcfe 	bl	8027cf6 <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 80322fa:	68bb      	ldr	r3, [r7, #8]
 80322fc:	789b      	ldrb	r3, [r3, #2]
 80322fe:	2b00      	cmp	r3, #0
 8032300:	d003      	beq.n	803230a <HAL_RTC_SetDate+0xe6>
 8032302:	68bb      	ldr	r3, [r7, #8]
 8032304:	789b      	ldrb	r3, [r3, #2]
 8032306:	2b1f      	cmp	r3, #31
 8032308:	d904      	bls.n	8032314 <HAL_RTC_SetDate+0xf0>
 803230a:	f240 3171 	movw	r1, #881	@ 0x371
 803230e:	484a      	ldr	r0, [pc, #296]	@ (8032438 <HAL_RTC_SetDate+0x214>)
 8032310:	f7f5 fcf1 	bl	8027cf6 <assert_failed>

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8032314:	68bb      	ldr	r3, [r7, #8]
 8032316:	78db      	ldrb	r3, [r3, #3]
 8032318:	4618      	mov	r0, r3
 803231a:	f000 f977 	bl	803260c <RTC_ByteToBcd2>
 803231e:	4603      	mov	r3, r0
 8032320:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8032322:	68bb      	ldr	r3, [r7, #8]
 8032324:	785b      	ldrb	r3, [r3, #1]
 8032326:	4618      	mov	r0, r3
 8032328:	f000 f970 	bl	803260c <RTC_ByteToBcd2>
 803232c:	4603      	mov	r3, r0
 803232e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8032330:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8032332:	68bb      	ldr	r3, [r7, #8]
 8032334:	789b      	ldrb	r3, [r3, #2]
 8032336:	4618      	mov	r0, r3
 8032338:	f000 f968 	bl	803260c <RTC_ByteToBcd2>
 803233c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 803233e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8032342:	68bb      	ldr	r3, [r7, #8]
 8032344:	781b      	ldrb	r3, [r3, #0]
 8032346:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8032348:	4313      	orrs	r3, r2
 803234a:	617b      	str	r3, [r7, #20]
 803234c:	e045      	b.n	80323da <HAL_RTC_SetDate+0x1b6>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 803234e:	68bb      	ldr	r3, [r7, #8]
 8032350:	78db      	ldrb	r3, [r3, #3]
 8032352:	4618      	mov	r0, r3
 8032354:	f000 f978 	bl	8032648 <RTC_Bcd2ToByte>
 8032358:	4603      	mov	r3, r0
 803235a:	2b63      	cmp	r3, #99	@ 0x63
 803235c:	d904      	bls.n	8032368 <HAL_RTC_SetDate+0x144>
 803235e:	f240 317a 	movw	r1, #890	@ 0x37a
 8032362:	4835      	ldr	r0, [pc, #212]	@ (8032438 <HAL_RTC_SetDate+0x214>)
 8032364:	f7f5 fcc7 	bl	8027cf6 <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8032368:	68bb      	ldr	r3, [r7, #8]
 803236a:	785b      	ldrb	r3, [r3, #1]
 803236c:	4618      	mov	r0, r3
 803236e:	f000 f96b 	bl	8032648 <RTC_Bcd2ToByte>
 8032372:	4603      	mov	r3, r0
 8032374:	2b00      	cmp	r3, #0
 8032376:	d007      	beq.n	8032388 <HAL_RTC_SetDate+0x164>
 8032378:	68bb      	ldr	r3, [r7, #8]
 803237a:	785b      	ldrb	r3, [r3, #1]
 803237c:	4618      	mov	r0, r3
 803237e:	f000 f963 	bl	8032648 <RTC_Bcd2ToByte>
 8032382:	4603      	mov	r3, r0
 8032384:	2b0c      	cmp	r3, #12
 8032386:	d904      	bls.n	8032392 <HAL_RTC_SetDate+0x16e>
 8032388:	f240 317b 	movw	r1, #891	@ 0x37b
 803238c:	482a      	ldr	r0, [pc, #168]	@ (8032438 <HAL_RTC_SetDate+0x214>)
 803238e:	f7f5 fcb2 	bl	8027cf6 <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8032392:	68bb      	ldr	r3, [r7, #8]
 8032394:	789b      	ldrb	r3, [r3, #2]
 8032396:	4618      	mov	r0, r3
 8032398:	f000 f956 	bl	8032648 <RTC_Bcd2ToByte>
 803239c:	4603      	mov	r3, r0
 803239e:	2b00      	cmp	r3, #0
 80323a0:	d007      	beq.n	80323b2 <HAL_RTC_SetDate+0x18e>
 80323a2:	68bb      	ldr	r3, [r7, #8]
 80323a4:	789b      	ldrb	r3, [r3, #2]
 80323a6:	4618      	mov	r0, r3
 80323a8:	f000 f94e 	bl	8032648 <RTC_Bcd2ToByte>
 80323ac:	4603      	mov	r3, r0
 80323ae:	2b1f      	cmp	r3, #31
 80323b0:	d904      	bls.n	80323bc <HAL_RTC_SetDate+0x198>
 80323b2:	f44f 715f 	mov.w	r1, #892	@ 0x37c
 80323b6:	4820      	ldr	r0, [pc, #128]	@ (8032438 <HAL_RTC_SetDate+0x214>)
 80323b8:	f7f5 fc9d 	bl	8027cf6 <assert_failed>

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80323bc:	68bb      	ldr	r3, [r7, #8]
 80323be:	78db      	ldrb	r3, [r3, #3]
 80323c0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80323c2:	68bb      	ldr	r3, [r7, #8]
 80323c4:	785b      	ldrb	r3, [r3, #1]
 80323c6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80323c8:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80323ca:	68ba      	ldr	r2, [r7, #8]
 80323cc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80323ce:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80323d0:	68bb      	ldr	r3, [r7, #8]
 80323d2:	781b      	ldrb	r3, [r3, #0]
 80323d4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80323d6:	4313      	orrs	r3, r2
 80323d8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80323da:	68fb      	ldr	r3, [r7, #12]
 80323dc:	681b      	ldr	r3, [r3, #0]
 80323de:	22ca      	movs	r2, #202	@ 0xca
 80323e0:	625a      	str	r2, [r3, #36]	@ 0x24
 80323e2:	68fb      	ldr	r3, [r7, #12]
 80323e4:	681b      	ldr	r3, [r3, #0]
 80323e6:	2253      	movs	r2, #83	@ 0x53
 80323e8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80323ea:	68f8      	ldr	r0, [r7, #12]
 80323ec:	f000 f8b2 	bl	8032554 <RTC_EnterInitMode>
 80323f0:	4603      	mov	r3, r0
 80323f2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80323f4:	7cfb      	ldrb	r3, [r7, #19]
 80323f6:	2b00      	cmp	r3, #0
 80323f8:	d10c      	bne.n	8032414 <HAL_RTC_SetDate+0x1f0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80323fa:	68fb      	ldr	r3, [r7, #12]
 80323fc:	681a      	ldr	r2, [r3, #0]
 80323fe:	697b      	ldr	r3, [r7, #20]
 8032400:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8032404:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8032408:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 803240a:	68f8      	ldr	r0, [r7, #12]
 803240c:	f000 f8d9 	bl	80325c2 <RTC_ExitInitMode>
 8032410:	4603      	mov	r3, r0
 8032412:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8032414:	7cfb      	ldrb	r3, [r7, #19]
 8032416:	2b00      	cmp	r3, #0
 8032418:	d102      	bne.n	8032420 <HAL_RTC_SetDate+0x1fc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 803241a:	68fb      	ldr	r3, [r7, #12]
 803241c:	2201      	movs	r2, #1
 803241e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8032420:	68fb      	ldr	r3, [r7, #12]
 8032422:	681b      	ldr	r3, [r3, #0]
 8032424:	22ff      	movs	r2, #255	@ 0xff
 8032426:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8032428:	68fb      	ldr	r3, [r7, #12]
 803242a:	2200      	movs	r2, #0
 803242c:	771a      	strb	r2, [r3, #28]

  return status;
 803242e:	7cfb      	ldrb	r3, [r7, #19]
}
 8032430:	4618      	mov	r0, r3
 8032432:	371c      	adds	r7, #28
 8032434:	46bd      	mov	sp, r7
 8032436:	bd90      	pop	{r4, r7, pc}
 8032438:	08038764 	.word	0x08038764

0803243c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 803243c:	b580      	push	{r7, lr}
 803243e:	b086      	sub	sp, #24
 8032440:	af00      	add	r7, sp, #0
 8032442:	60f8      	str	r0, [r7, #12]
 8032444:	60b9      	str	r1, [r7, #8]
 8032446:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8032448:	2300      	movs	r3, #0
 803244a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 803244c:	687b      	ldr	r3, [r7, #4]
 803244e:	2b00      	cmp	r3, #0
 8032450:	d007      	beq.n	8032462 <HAL_RTC_GetDate+0x26>
 8032452:	687b      	ldr	r3, [r7, #4]
 8032454:	2b01      	cmp	r3, #1
 8032456:	d004      	beq.n	8032462 <HAL_RTC_GetDate+0x26>
 8032458:	f240 31b7 	movw	r1, #951	@ 0x3b7
 803245c:	4824      	ldr	r0, [pc, #144]	@ (80324f0 <HAL_RTC_GetDate+0xb4>)
 803245e:	f7f5 fc4a 	bl	8027cf6 <assert_failed>

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8032462:	68fb      	ldr	r3, [r7, #12]
 8032464:	681b      	ldr	r3, [r3, #0]
 8032466:	685b      	ldr	r3, [r3, #4]
 8032468:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 803246c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8032470:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8032472:	697b      	ldr	r3, [r7, #20]
 8032474:	0c1b      	lsrs	r3, r3, #16
 8032476:	b2da      	uxtb	r2, r3
 8032478:	68bb      	ldr	r3, [r7, #8]
 803247a:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 803247c:	697b      	ldr	r3, [r7, #20]
 803247e:	0a1b      	lsrs	r3, r3, #8
 8032480:	b2db      	uxtb	r3, r3
 8032482:	f003 031f 	and.w	r3, r3, #31
 8032486:	b2da      	uxtb	r2, r3
 8032488:	68bb      	ldr	r3, [r7, #8]
 803248a:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 803248c:	697b      	ldr	r3, [r7, #20]
 803248e:	b2db      	uxtb	r3, r3
 8032490:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8032494:	b2da      	uxtb	r2, r3
 8032496:	68bb      	ldr	r3, [r7, #8]
 8032498:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 803249a:	697b      	ldr	r3, [r7, #20]
 803249c:	0b5b      	lsrs	r3, r3, #13
 803249e:	b2db      	uxtb	r3, r3
 80324a0:	f003 0307 	and.w	r3, r3, #7
 80324a4:	b2da      	uxtb	r2, r3
 80324a6:	68bb      	ldr	r3, [r7, #8]
 80324a8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80324aa:	687b      	ldr	r3, [r7, #4]
 80324ac:	2b00      	cmp	r3, #0
 80324ae:	d11a      	bne.n	80324e6 <HAL_RTC_GetDate+0xaa>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80324b0:	68bb      	ldr	r3, [r7, #8]
 80324b2:	78db      	ldrb	r3, [r3, #3]
 80324b4:	4618      	mov	r0, r3
 80324b6:	f000 f8c7 	bl	8032648 <RTC_Bcd2ToByte>
 80324ba:	4603      	mov	r3, r0
 80324bc:	461a      	mov	r2, r3
 80324be:	68bb      	ldr	r3, [r7, #8]
 80324c0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80324c2:	68bb      	ldr	r3, [r7, #8]
 80324c4:	785b      	ldrb	r3, [r3, #1]
 80324c6:	4618      	mov	r0, r3
 80324c8:	f000 f8be 	bl	8032648 <RTC_Bcd2ToByte>
 80324cc:	4603      	mov	r3, r0
 80324ce:	461a      	mov	r2, r3
 80324d0:	68bb      	ldr	r3, [r7, #8]
 80324d2:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80324d4:	68bb      	ldr	r3, [r7, #8]
 80324d6:	789b      	ldrb	r3, [r3, #2]
 80324d8:	4618      	mov	r0, r3
 80324da:	f000 f8b5 	bl	8032648 <RTC_Bcd2ToByte>
 80324de:	4603      	mov	r3, r0
 80324e0:	461a      	mov	r2, r3
 80324e2:	68bb      	ldr	r3, [r7, #8]
 80324e4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80324e6:	2300      	movs	r3, #0
}
 80324e8:	4618      	mov	r0, r3
 80324ea:	3718      	adds	r7, #24
 80324ec:	46bd      	mov	sp, r7
 80324ee:	bd80      	pop	{r7, pc}
 80324f0:	08038764 	.word	0x08038764

080324f4 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80324f4:	b480      	push	{r7}
 80324f6:	b083      	sub	sp, #12
 80324f8:	af00      	add	r7, sp, #0
 80324fa:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80324fc:	bf00      	nop
 80324fe:	370c      	adds	r7, #12
 8032500:	46bd      	mov	sp, r7
 8032502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032506:	4770      	bx	lr

08032508 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8032508:	b580      	push	{r7, lr}
 803250a:	b084      	sub	sp, #16
 803250c:	af00      	add	r7, sp, #0
 803250e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8032510:	2300      	movs	r3, #0
 8032512:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8032514:	687b      	ldr	r3, [r7, #4]
 8032516:	681b      	ldr	r3, [r3, #0]
 8032518:	4a0d      	ldr	r2, [pc, #52]	@ (8032550 <HAL_RTC_WaitForSynchro+0x48>)
 803251a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 803251c:	f7f5 ffde 	bl	80284dc <HAL_GetTick>
 8032520:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8032522:	e009      	b.n	8032538 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8032524:	f7f5 ffda 	bl	80284dc <HAL_GetTick>
 8032528:	4602      	mov	r2, r0
 803252a:	68fb      	ldr	r3, [r7, #12]
 803252c:	1ad3      	subs	r3, r2, r3
 803252e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8032532:	d901      	bls.n	8032538 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8032534:	2303      	movs	r3, #3
 8032536:	e007      	b.n	8032548 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8032538:	687b      	ldr	r3, [r7, #4]
 803253a:	681b      	ldr	r3, [r3, #0]
 803253c:	68db      	ldr	r3, [r3, #12]
 803253e:	f003 0320 	and.w	r3, r3, #32
 8032542:	2b00      	cmp	r3, #0
 8032544:	d0ee      	beq.n	8032524 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8032546:	2300      	movs	r3, #0
}
 8032548:	4618      	mov	r0, r3
 803254a:	3710      	adds	r7, #16
 803254c:	46bd      	mov	sp, r7
 803254e:	bd80      	pop	{r7, pc}
 8032550:	00017f5f 	.word	0x00017f5f

08032554 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8032554:	b580      	push	{r7, lr}
 8032556:	b084      	sub	sp, #16
 8032558:	af00      	add	r7, sp, #0
 803255a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 803255c:	2300      	movs	r3, #0
 803255e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8032560:	2300      	movs	r3, #0
 8032562:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8032564:	687b      	ldr	r3, [r7, #4]
 8032566:	681b      	ldr	r3, [r3, #0]
 8032568:	68db      	ldr	r3, [r3, #12]
 803256a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 803256e:	2b00      	cmp	r3, #0
 8032570:	d122      	bne.n	80325b8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8032572:	687b      	ldr	r3, [r7, #4]
 8032574:	681b      	ldr	r3, [r3, #0]
 8032576:	68da      	ldr	r2, [r3, #12]
 8032578:	687b      	ldr	r3, [r7, #4]
 803257a:	681b      	ldr	r3, [r3, #0]
 803257c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8032580:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8032582:	f7f5 ffab 	bl	80284dc <HAL_GetTick>
 8032586:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8032588:	e00c      	b.n	80325a4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 803258a:	f7f5 ffa7 	bl	80284dc <HAL_GetTick>
 803258e:	4602      	mov	r2, r0
 8032590:	68bb      	ldr	r3, [r7, #8]
 8032592:	1ad3      	subs	r3, r2, r3
 8032594:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8032598:	d904      	bls.n	80325a4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 803259a:	687b      	ldr	r3, [r7, #4]
 803259c:	2204      	movs	r2, #4
 803259e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80325a0:	2301      	movs	r3, #1
 80325a2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80325a4:	687b      	ldr	r3, [r7, #4]
 80325a6:	681b      	ldr	r3, [r3, #0]
 80325a8:	68db      	ldr	r3, [r3, #12]
 80325aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80325ae:	2b00      	cmp	r3, #0
 80325b0:	d102      	bne.n	80325b8 <RTC_EnterInitMode+0x64>
 80325b2:	7bfb      	ldrb	r3, [r7, #15]
 80325b4:	2b01      	cmp	r3, #1
 80325b6:	d1e8      	bne.n	803258a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80325b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80325ba:	4618      	mov	r0, r3
 80325bc:	3710      	adds	r7, #16
 80325be:	46bd      	mov	sp, r7
 80325c0:	bd80      	pop	{r7, pc}

080325c2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80325c2:	b580      	push	{r7, lr}
 80325c4:	b084      	sub	sp, #16
 80325c6:	af00      	add	r7, sp, #0
 80325c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80325ca:	2300      	movs	r3, #0
 80325cc:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80325ce:	687b      	ldr	r3, [r7, #4]
 80325d0:	681b      	ldr	r3, [r3, #0]
 80325d2:	68da      	ldr	r2, [r3, #12]
 80325d4:	687b      	ldr	r3, [r7, #4]
 80325d6:	681b      	ldr	r3, [r3, #0]
 80325d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80325dc:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80325de:	687b      	ldr	r3, [r7, #4]
 80325e0:	681b      	ldr	r3, [r3, #0]
 80325e2:	689b      	ldr	r3, [r3, #8]
 80325e4:	f003 0320 	and.w	r3, r3, #32
 80325e8:	2b00      	cmp	r3, #0
 80325ea:	d10a      	bne.n	8032602 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80325ec:	6878      	ldr	r0, [r7, #4]
 80325ee:	f7ff ff8b 	bl	8032508 <HAL_RTC_WaitForSynchro>
 80325f2:	4603      	mov	r3, r0
 80325f4:	2b00      	cmp	r3, #0
 80325f6:	d004      	beq.n	8032602 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80325f8:	687b      	ldr	r3, [r7, #4]
 80325fa:	2204      	movs	r2, #4
 80325fc:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80325fe:	2301      	movs	r3, #1
 8032600:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8032602:	7bfb      	ldrb	r3, [r7, #15]
}
 8032604:	4618      	mov	r0, r3
 8032606:	3710      	adds	r7, #16
 8032608:	46bd      	mov	sp, r7
 803260a:	bd80      	pop	{r7, pc}

0803260c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 803260c:	b480      	push	{r7}
 803260e:	b085      	sub	sp, #20
 8032610:	af00      	add	r7, sp, #0
 8032612:	4603      	mov	r3, r0
 8032614:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8032616:	2300      	movs	r3, #0
 8032618:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 803261a:	e005      	b.n	8032628 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 803261c:	68fb      	ldr	r3, [r7, #12]
 803261e:	3301      	adds	r3, #1
 8032620:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8032622:	79fb      	ldrb	r3, [r7, #7]
 8032624:	3b0a      	subs	r3, #10
 8032626:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8032628:	79fb      	ldrb	r3, [r7, #7]
 803262a:	2b09      	cmp	r3, #9
 803262c:	d8f6      	bhi.n	803261c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 803262e:	68fb      	ldr	r3, [r7, #12]
 8032630:	b2db      	uxtb	r3, r3
 8032632:	011b      	lsls	r3, r3, #4
 8032634:	b2da      	uxtb	r2, r3
 8032636:	79fb      	ldrb	r3, [r7, #7]
 8032638:	4313      	orrs	r3, r2
 803263a:	b2db      	uxtb	r3, r3
}
 803263c:	4618      	mov	r0, r3
 803263e:	3714      	adds	r7, #20
 8032640:	46bd      	mov	sp, r7
 8032642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032646:	4770      	bx	lr

08032648 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8032648:	b480      	push	{r7}
 803264a:	b085      	sub	sp, #20
 803264c:	af00      	add	r7, sp, #0
 803264e:	4603      	mov	r3, r0
 8032650:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8032652:	2300      	movs	r3, #0
 8032654:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8032656:	79fb      	ldrb	r3, [r7, #7]
 8032658:	091b      	lsrs	r3, r3, #4
 803265a:	b2db      	uxtb	r3, r3
 803265c:	461a      	mov	r2, r3
 803265e:	4613      	mov	r3, r2
 8032660:	009b      	lsls	r3, r3, #2
 8032662:	4413      	add	r3, r2
 8032664:	005b      	lsls	r3, r3, #1
 8032666:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8032668:	68fb      	ldr	r3, [r7, #12]
 803266a:	b2da      	uxtb	r2, r3
 803266c:	79fb      	ldrb	r3, [r7, #7]
 803266e:	f003 030f 	and.w	r3, r3, #15
 8032672:	b2db      	uxtb	r3, r3
 8032674:	4413      	add	r3, r2
 8032676:	b2db      	uxtb	r3, r3
}
 8032678:	4618      	mov	r0, r3
 803267a:	3714      	adds	r7, #20
 803267c:	46bd      	mov	sp, r7
 803267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032682:	4770      	bx	lr

08032684 <HAL_RTCEx_TimeStampEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_TimeStampEventCallback(RTC_HandleTypeDef *hrtc)
{
 8032684:	b480      	push	{r7}
 8032686:	b083      	sub	sp, #12
 8032688:	af00      	add	r7, sp, #0
 803268a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_TimeStampEventCallback could be implemented in the user file
  */
}
 803268c:	bf00      	nop
 803268e:	370c      	adds	r7, #12
 8032690:	46bd      	mov	sp, r7
 8032692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032696:	4770      	bx	lr

08032698 <HAL_RTCEx_Tamper1EventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_Tamper1EventCallback(RTC_HandleTypeDef *hrtc)
{
 8032698:	b480      	push	{r7}
 803269a:	b083      	sub	sp, #12
 803269c:	af00      	add	r7, sp, #0
 803269e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_Tamper1EventCallback could be implemented in the user file
   */
}
 80326a0:	bf00      	nop
 80326a2:	370c      	adds	r7, #12
 80326a4:	46bd      	mov	sp, r7
 80326a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80326aa:	4770      	bx	lr

080326ac <HAL_RTCEx_Tamper2EventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_Tamper2EventCallback(RTC_HandleTypeDef *hrtc)
{
 80326ac:	b480      	push	{r7}
 80326ae:	b083      	sub	sp, #12
 80326b0:	af00      	add	r7, sp, #0
 80326b2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_Tamper2EventCallback could be implemented in the user file
   */
}
 80326b4:	bf00      	nop
 80326b6:	370c      	adds	r7, #12
 80326b8:	46bd      	mov	sp, r7
 80326ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80326be:	4770      	bx	lr

080326c0 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80326c0:	b480      	push	{r7}
 80326c2:	b083      	sub	sp, #12
 80326c4:	af00      	add	r7, sp, #0
 80326c6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80326c8:	bf00      	nop
 80326ca:	370c      	adds	r7, #12
 80326cc:	46bd      	mov	sp, r7
 80326ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80326d2:	4770      	bx	lr

080326d4 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80326d4:	b480      	push	{r7}
 80326d6:	b083      	sub	sp, #12
 80326d8:	af00      	add	r7, sp, #0
 80326da:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80326dc:	bf00      	nop
 80326de:	370c      	adds	r7, #12
 80326e0:	46bd      	mov	sp, r7
 80326e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80326e6:	4770      	bx	lr

080326e8 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80326e8:	b580      	push	{r7, lr}
 80326ea:	b084      	sub	sp, #16
 80326ec:	af00      	add	r7, sp, #0
 80326ee:	60f8      	str	r0, [r7, #12]
 80326f0:	60b9      	str	r1, [r7, #8]
 80326f2:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80326f4:	68fb      	ldr	r3, [r7, #12]
 80326f6:	2b00      	cmp	r3, #0
 80326f8:	d101      	bne.n	80326fe <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80326fa:	2301      	movs	r3, #1
 80326fc:	e046      	b.n	803278c <HAL_SRAM_Init+0xa4>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80326fe:	68fb      	ldr	r3, [r7, #12]
 8032700:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8032704:	b2db      	uxtb	r3, r3
 8032706:	2b00      	cmp	r3, #0
 8032708:	d114      	bne.n	8032734 <HAL_SRAM_Init+0x4c>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 803270a:	68fb      	ldr	r3, [r7, #12]
 803270c:	2200      	movs	r2, #0
 803270e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

#if (USE_HAL_SRAM_REGISTER_CALLBACKS == 1)
    if (hsram->MspInitCallback == NULL)
 8032712:	68fb      	ldr	r3, [r7, #12]
 8032714:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8032716:	2b00      	cmp	r3, #0
 8032718:	d102      	bne.n	8032720 <HAL_SRAM_Init+0x38>
    {
      hsram->MspInitCallback = HAL_SRAM_MspInit;
 803271a:	68fb      	ldr	r3, [r7, #12]
 803271c:	4a1d      	ldr	r2, [pc, #116]	@ (8032794 <HAL_SRAM_Init+0xac>)
 803271e:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    hsram->DmaXferCpltCallback = HAL_SRAM_DMA_XferCpltCallback;
 8032720:	68fb      	ldr	r3, [r7, #12]
 8032722:	4a1d      	ldr	r2, [pc, #116]	@ (8032798 <HAL_SRAM_Init+0xb0>)
 8032724:	659a      	str	r2, [r3, #88]	@ 0x58
    hsram->DmaXferErrorCallback = HAL_SRAM_DMA_XferErrorCallback;
 8032726:	68fb      	ldr	r3, [r7, #12]
 8032728:	4a1c      	ldr	r2, [pc, #112]	@ (803279c <HAL_SRAM_Init+0xb4>)
 803272a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
 803272c:	68fb      	ldr	r3, [r7, #12]
 803272e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8032730:	68f8      	ldr	r0, [r7, #12]
 8032732:	4798      	blx	r3
    HAL_SRAM_MspInit(hsram);
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8032734:	68fb      	ldr	r3, [r7, #12]
 8032736:	681a      	ldr	r2, [r3, #0]
 8032738:	68fb      	ldr	r3, [r7, #12]
 803273a:	3308      	adds	r3, #8
 803273c:	4619      	mov	r1, r3
 803273e:	4610      	mov	r0, r2
 8032740:	f001 fa32 	bl	8033ba8 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8032744:	68fb      	ldr	r3, [r7, #12]
 8032746:	6818      	ldr	r0, [r3, #0]
 8032748:	68fb      	ldr	r3, [r7, #12]
 803274a:	689b      	ldr	r3, [r3, #8]
 803274c:	461a      	mov	r2, r3
 803274e:	68b9      	ldr	r1, [r7, #8]
 8032750:	f001 fb6e 	bl	8033e30 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8032754:	68fb      	ldr	r3, [r7, #12]
 8032756:	6858      	ldr	r0, [r3, #4]
 8032758:	68fb      	ldr	r3, [r7, #12]
 803275a:	689a      	ldr	r2, [r3, #8]
 803275c:	68fb      	ldr	r3, [r7, #12]
 803275e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8032760:	6879      	ldr	r1, [r7, #4]
 8032762:	f001 fc13 	bl	8033f8c <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8032766:	68fb      	ldr	r3, [r7, #12]
 8032768:	681b      	ldr	r3, [r3, #0]
 803276a:	68fa      	ldr	r2, [r7, #12]
 803276c:	6892      	ldr	r2, [r2, #8]
 803276e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8032772:	68fb      	ldr	r3, [r7, #12]
 8032774:	681b      	ldr	r3, [r3, #0]
 8032776:	68fa      	ldr	r2, [r7, #12]
 8032778:	6892      	ldr	r2, [r2, #8]
 803277a:	f041 0101 	orr.w	r1, r1, #1
 803277e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8032782:	68fb      	ldr	r3, [r7, #12]
 8032784:	2201      	movs	r2, #1
 8032786:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 803278a:	2300      	movs	r3, #0
}
 803278c:	4618      	mov	r0, r3
 803278e:	3710      	adds	r7, #16
 8032790:	46bd      	mov	sp, r7
 8032792:	bd80      	pop	{r7, pc}
 8032794:	0802774d 	.word	0x0802774d
 8032798:	080327a1 	.word	0x080327a1
 803279c:	080327b5 	.word	0x080327b5

080327a0 <HAL_SRAM_DMA_XferCpltCallback>:
  * @param  hdma pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval None
  */
__weak void HAL_SRAM_DMA_XferCpltCallback(DMA_HandleTypeDef *hdma)
{
 80327a0:	b480      	push	{r7}
 80327a2:	b083      	sub	sp, #12
 80327a4:	af00      	add	r7, sp, #0
 80327a6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SRAM_DMA_XferCpltCallback could be implemented in the user file
   */
}
 80327a8:	bf00      	nop
 80327aa:	370c      	adds	r7, #12
 80327ac:	46bd      	mov	sp, r7
 80327ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80327b2:	4770      	bx	lr

080327b4 <HAL_SRAM_DMA_XferErrorCallback>:
  * @param  hdma pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval None
  */
__weak void HAL_SRAM_DMA_XferErrorCallback(DMA_HandleTypeDef *hdma)
{
 80327b4:	b480      	push	{r7}
 80327b6:	b083      	sub	sp, #12
 80327b8:	af00      	add	r7, sp, #0
 80327ba:	6078      	str	r0, [r7, #4]
  UNUSED(hdma);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SRAM_DMA_XferErrorCallback could be implemented in the user file
   */
}
 80327bc:	bf00      	nop
 80327be:	370c      	adds	r7, #12
 80327c0:	46bd      	mov	sp, r7
 80327c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80327c6:	4770      	bx	lr

080327c8 <HAL_SRAM_GetState>:
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval HAL state
  */
HAL_SRAM_StateTypeDef HAL_SRAM_GetState(const SRAM_HandleTypeDef *hsram)
{
 80327c8:	b480      	push	{r7}
 80327ca:	b083      	sub	sp, #12
 80327cc:	af00      	add	r7, sp, #0
 80327ce:	6078      	str	r0, [r7, #4]
  return hsram->State;
 80327d0:	687b      	ldr	r3, [r7, #4]
 80327d2:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80327d6:	b2db      	uxtb	r3, r3
}
 80327d8:	4618      	mov	r0, r3
 80327da:	370c      	adds	r7, #12
 80327dc:	46bd      	mov	sp, r7
 80327de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80327e2:	4770      	bx	lr

080327e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80327e4:	b580      	push	{r7, lr}
 80327e6:	b082      	sub	sp, #8
 80327e8:	af00      	add	r7, sp, #0
 80327ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80327ec:	687b      	ldr	r3, [r7, #4]
 80327ee:	2b00      	cmp	r3, #0
 80327f0:	d101      	bne.n	80327f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80327f2:	2301      	movs	r3, #1
 80327f4:	e0f8      	b.n	80329e8 <HAL_TIM_Base_Init+0x204>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80327f6:	687b      	ldr	r3, [r7, #4]
 80327f8:	681b      	ldr	r3, [r3, #0]
 80327fa:	4a7d      	ldr	r2, [pc, #500]	@ (80329f0 <HAL_TIM_Base_Init+0x20c>)
 80327fc:	4293      	cmp	r3, r2
 80327fe:	d045      	beq.n	803288c <HAL_TIM_Base_Init+0xa8>
 8032800:	687b      	ldr	r3, [r7, #4]
 8032802:	681b      	ldr	r3, [r3, #0]
 8032804:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8032808:	d040      	beq.n	803288c <HAL_TIM_Base_Init+0xa8>
 803280a:	687b      	ldr	r3, [r7, #4]
 803280c:	681b      	ldr	r3, [r3, #0]
 803280e:	4a79      	ldr	r2, [pc, #484]	@ (80329f4 <HAL_TIM_Base_Init+0x210>)
 8032810:	4293      	cmp	r3, r2
 8032812:	d03b      	beq.n	803288c <HAL_TIM_Base_Init+0xa8>
 8032814:	687b      	ldr	r3, [r7, #4]
 8032816:	681b      	ldr	r3, [r3, #0]
 8032818:	4a77      	ldr	r2, [pc, #476]	@ (80329f8 <HAL_TIM_Base_Init+0x214>)
 803281a:	4293      	cmp	r3, r2
 803281c:	d036      	beq.n	803288c <HAL_TIM_Base_Init+0xa8>
 803281e:	687b      	ldr	r3, [r7, #4]
 8032820:	681b      	ldr	r3, [r3, #0]
 8032822:	4a76      	ldr	r2, [pc, #472]	@ (80329fc <HAL_TIM_Base_Init+0x218>)
 8032824:	4293      	cmp	r3, r2
 8032826:	d031      	beq.n	803288c <HAL_TIM_Base_Init+0xa8>
 8032828:	687b      	ldr	r3, [r7, #4]
 803282a:	681b      	ldr	r3, [r3, #0]
 803282c:	4a74      	ldr	r2, [pc, #464]	@ (8032a00 <HAL_TIM_Base_Init+0x21c>)
 803282e:	4293      	cmp	r3, r2
 8032830:	d02c      	beq.n	803288c <HAL_TIM_Base_Init+0xa8>
 8032832:	687b      	ldr	r3, [r7, #4]
 8032834:	681b      	ldr	r3, [r3, #0]
 8032836:	4a73      	ldr	r2, [pc, #460]	@ (8032a04 <HAL_TIM_Base_Init+0x220>)
 8032838:	4293      	cmp	r3, r2
 803283a:	d027      	beq.n	803288c <HAL_TIM_Base_Init+0xa8>
 803283c:	687b      	ldr	r3, [r7, #4]
 803283e:	681b      	ldr	r3, [r3, #0]
 8032840:	4a71      	ldr	r2, [pc, #452]	@ (8032a08 <HAL_TIM_Base_Init+0x224>)
 8032842:	4293      	cmp	r3, r2
 8032844:	d022      	beq.n	803288c <HAL_TIM_Base_Init+0xa8>
 8032846:	687b      	ldr	r3, [r7, #4]
 8032848:	681b      	ldr	r3, [r3, #0]
 803284a:	4a70      	ldr	r2, [pc, #448]	@ (8032a0c <HAL_TIM_Base_Init+0x228>)
 803284c:	4293      	cmp	r3, r2
 803284e:	d01d      	beq.n	803288c <HAL_TIM_Base_Init+0xa8>
 8032850:	687b      	ldr	r3, [r7, #4]
 8032852:	681b      	ldr	r3, [r3, #0]
 8032854:	4a6e      	ldr	r2, [pc, #440]	@ (8032a10 <HAL_TIM_Base_Init+0x22c>)
 8032856:	4293      	cmp	r3, r2
 8032858:	d018      	beq.n	803288c <HAL_TIM_Base_Init+0xa8>
 803285a:	687b      	ldr	r3, [r7, #4]
 803285c:	681b      	ldr	r3, [r3, #0]
 803285e:	4a6d      	ldr	r2, [pc, #436]	@ (8032a14 <HAL_TIM_Base_Init+0x230>)
 8032860:	4293      	cmp	r3, r2
 8032862:	d013      	beq.n	803288c <HAL_TIM_Base_Init+0xa8>
 8032864:	687b      	ldr	r3, [r7, #4]
 8032866:	681b      	ldr	r3, [r3, #0]
 8032868:	4a6b      	ldr	r2, [pc, #428]	@ (8032a18 <HAL_TIM_Base_Init+0x234>)
 803286a:	4293      	cmp	r3, r2
 803286c:	d00e      	beq.n	803288c <HAL_TIM_Base_Init+0xa8>
 803286e:	687b      	ldr	r3, [r7, #4]
 8032870:	681b      	ldr	r3, [r3, #0]
 8032872:	4a6a      	ldr	r2, [pc, #424]	@ (8032a1c <HAL_TIM_Base_Init+0x238>)
 8032874:	4293      	cmp	r3, r2
 8032876:	d009      	beq.n	803288c <HAL_TIM_Base_Init+0xa8>
 8032878:	687b      	ldr	r3, [r7, #4]
 803287a:	681b      	ldr	r3, [r3, #0]
 803287c:	4a68      	ldr	r2, [pc, #416]	@ (8032a20 <HAL_TIM_Base_Init+0x23c>)
 803287e:	4293      	cmp	r3, r2
 8032880:	d004      	beq.n	803288c <HAL_TIM_Base_Init+0xa8>
 8032882:	f240 1113 	movw	r1, #275	@ 0x113
 8032886:	4867      	ldr	r0, [pc, #412]	@ (8032a24 <HAL_TIM_Base_Init+0x240>)
 8032888:	f7f5 fa35 	bl	8027cf6 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 803288c:	687b      	ldr	r3, [r7, #4]
 803288e:	689b      	ldr	r3, [r3, #8]
 8032890:	2b00      	cmp	r3, #0
 8032892:	d014      	beq.n	80328be <HAL_TIM_Base_Init+0xda>
 8032894:	687b      	ldr	r3, [r7, #4]
 8032896:	689b      	ldr	r3, [r3, #8]
 8032898:	2b10      	cmp	r3, #16
 803289a:	d010      	beq.n	80328be <HAL_TIM_Base_Init+0xda>
 803289c:	687b      	ldr	r3, [r7, #4]
 803289e:	689b      	ldr	r3, [r3, #8]
 80328a0:	2b20      	cmp	r3, #32
 80328a2:	d00c      	beq.n	80328be <HAL_TIM_Base_Init+0xda>
 80328a4:	687b      	ldr	r3, [r7, #4]
 80328a6:	689b      	ldr	r3, [r3, #8]
 80328a8:	2b40      	cmp	r3, #64	@ 0x40
 80328aa:	d008      	beq.n	80328be <HAL_TIM_Base_Init+0xda>
 80328ac:	687b      	ldr	r3, [r7, #4]
 80328ae:	689b      	ldr	r3, [r3, #8]
 80328b0:	2b60      	cmp	r3, #96	@ 0x60
 80328b2:	d004      	beq.n	80328be <HAL_TIM_Base_Init+0xda>
 80328b4:	f44f 718a 	mov.w	r1, #276	@ 0x114
 80328b8:	485a      	ldr	r0, [pc, #360]	@ (8032a24 <HAL_TIM_Base_Init+0x240>)
 80328ba:	f7f5 fa1c 	bl	8027cf6 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80328be:	687b      	ldr	r3, [r7, #4]
 80328c0:	691b      	ldr	r3, [r3, #16]
 80328c2:	2b00      	cmp	r3, #0
 80328c4:	d00e      	beq.n	80328e4 <HAL_TIM_Base_Init+0x100>
 80328c6:	687b      	ldr	r3, [r7, #4]
 80328c8:	691b      	ldr	r3, [r3, #16]
 80328ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80328ce:	d009      	beq.n	80328e4 <HAL_TIM_Base_Init+0x100>
 80328d0:	687b      	ldr	r3, [r7, #4]
 80328d2:	691b      	ldr	r3, [r3, #16]
 80328d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80328d8:	d004      	beq.n	80328e4 <HAL_TIM_Base_Init+0x100>
 80328da:	f240 1115 	movw	r1, #277	@ 0x115
 80328de:	4851      	ldr	r0, [pc, #324]	@ (8032a24 <HAL_TIM_Base_Init+0x240>)
 80328e0:	f7f5 fa09 	bl	8027cf6 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 80328e4:	687b      	ldr	r3, [r7, #4]
 80328e6:	681b      	ldr	r3, [r3, #0]
 80328e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80328ec:	d004      	beq.n	80328f8 <HAL_TIM_Base_Init+0x114>
 80328ee:	687b      	ldr	r3, [r7, #4]
 80328f0:	681b      	ldr	r3, [r3, #0]
 80328f2:	4a42      	ldr	r2, [pc, #264]	@ (80329fc <HAL_TIM_Base_Init+0x218>)
 80328f4:	4293      	cmp	r3, r2
 80328f6:	d107      	bne.n	8032908 <HAL_TIM_Base_Init+0x124>
 80328f8:	687b      	ldr	r3, [r7, #4]
 80328fa:	68db      	ldr	r3, [r3, #12]
 80328fc:	2b00      	cmp	r3, #0
 80328fe:	bf14      	ite	ne
 8032900:	2301      	movne	r3, #1
 8032902:	2300      	moveq	r3, #0
 8032904:	b2db      	uxtb	r3, r3
 8032906:	e00e      	b.n	8032926 <HAL_TIM_Base_Init+0x142>
 8032908:	687b      	ldr	r3, [r7, #4]
 803290a:	68db      	ldr	r3, [r3, #12]
 803290c:	2b00      	cmp	r3, #0
 803290e:	d006      	beq.n	803291e <HAL_TIM_Base_Init+0x13a>
 8032910:	687b      	ldr	r3, [r7, #4]
 8032912:	68db      	ldr	r3, [r3, #12]
 8032914:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8032918:	d201      	bcs.n	803291e <HAL_TIM_Base_Init+0x13a>
 803291a:	2301      	movs	r3, #1
 803291c:	e000      	b.n	8032920 <HAL_TIM_Base_Init+0x13c>
 803291e:	2300      	movs	r3, #0
 8032920:	f003 0301 	and.w	r3, r3, #1
 8032924:	b2db      	uxtb	r3, r3
 8032926:	2b00      	cmp	r3, #0
 8032928:	d104      	bne.n	8032934 <HAL_TIM_Base_Init+0x150>
 803292a:	f44f 718b 	mov.w	r1, #278	@ 0x116
 803292e:	483d      	ldr	r0, [pc, #244]	@ (8032a24 <HAL_TIM_Base_Init+0x240>)
 8032930:	f7f5 f9e1 	bl	8027cf6 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8032934:	687b      	ldr	r3, [r7, #4]
 8032936:	699b      	ldr	r3, [r3, #24]
 8032938:	2b00      	cmp	r3, #0
 803293a:	d008      	beq.n	803294e <HAL_TIM_Base_Init+0x16a>
 803293c:	687b      	ldr	r3, [r7, #4]
 803293e:	699b      	ldr	r3, [r3, #24]
 8032940:	2b80      	cmp	r3, #128	@ 0x80
 8032942:	d004      	beq.n	803294e <HAL_TIM_Base_Init+0x16a>
 8032944:	f240 1117 	movw	r1, #279	@ 0x117
 8032948:	4836      	ldr	r0, [pc, #216]	@ (8032a24 <HAL_TIM_Base_Init+0x240>)
 803294a:	f7f5 f9d4 	bl	8027cf6 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 803294e:	687b      	ldr	r3, [r7, #4]
 8032950:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8032954:	b2db      	uxtb	r3, r3
 8032956:	2b00      	cmp	r3, #0
 8032958:	d111      	bne.n	803297e <HAL_TIM_Base_Init+0x19a>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 803295a:	687b      	ldr	r3, [r7, #4]
 803295c:	2200      	movs	r2, #0
 803295e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8032962:	6878      	ldr	r0, [r7, #4]
 8032964:	f001 f8aa 	bl	8033abc <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8032968:	687b      	ldr	r3, [r7, #4]
 803296a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 803296c:	2b00      	cmp	r3, #0
 803296e:	d102      	bne.n	8032976 <HAL_TIM_Base_Init+0x192>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8032970:	687b      	ldr	r3, [r7, #4]
 8032972:	4a2d      	ldr	r2, [pc, #180]	@ (8032a28 <HAL_TIM_Base_Init+0x244>)
 8032974:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8032976:	687b      	ldr	r3, [r7, #4]
 8032978:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 803297a:	6878      	ldr	r0, [r7, #4]
 803297c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 803297e:	687b      	ldr	r3, [r7, #4]
 8032980:	2202      	movs	r2, #2
 8032982:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8032986:	687b      	ldr	r3, [r7, #4]
 8032988:	681a      	ldr	r2, [r3, #0]
 803298a:	687b      	ldr	r3, [r7, #4]
 803298c:	3304      	adds	r3, #4
 803298e:	4619      	mov	r1, r3
 8032990:	4610      	mov	r0, r2
 8032992:	f000 ff4d 	bl	8033830 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8032996:	687b      	ldr	r3, [r7, #4]
 8032998:	2201      	movs	r2, #1
 803299a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 803299e:	687b      	ldr	r3, [r7, #4]
 80329a0:	2201      	movs	r2, #1
 80329a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80329a6:	687b      	ldr	r3, [r7, #4]
 80329a8:	2201      	movs	r2, #1
 80329aa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80329ae:	687b      	ldr	r3, [r7, #4]
 80329b0:	2201      	movs	r2, #1
 80329b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80329b6:	687b      	ldr	r3, [r7, #4]
 80329b8:	2201      	movs	r2, #1
 80329ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80329be:	687b      	ldr	r3, [r7, #4]
 80329c0:	2201      	movs	r2, #1
 80329c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80329c6:	687b      	ldr	r3, [r7, #4]
 80329c8:	2201      	movs	r2, #1
 80329ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80329ce:	687b      	ldr	r3, [r7, #4]
 80329d0:	2201      	movs	r2, #1
 80329d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80329d6:	687b      	ldr	r3, [r7, #4]
 80329d8:	2201      	movs	r2, #1
 80329da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80329de:	687b      	ldr	r3, [r7, #4]
 80329e0:	2201      	movs	r2, #1
 80329e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80329e6:	2300      	movs	r3, #0
}
 80329e8:	4618      	mov	r0, r3
 80329ea:	3708      	adds	r7, #8
 80329ec:	46bd      	mov	sp, r7
 80329ee:	bd80      	pop	{r7, pc}
 80329f0:	40010000 	.word	0x40010000
 80329f4:	40000400 	.word	0x40000400
 80329f8:	40000800 	.word	0x40000800
 80329fc:	40000c00 	.word	0x40000c00
 8032a00:	40001000 	.word	0x40001000
 8032a04:	40001400 	.word	0x40001400
 8032a08:	40010400 	.word	0x40010400
 8032a0c:	40014000 	.word	0x40014000
 8032a10:	40014400 	.word	0x40014400
 8032a14:	40014800 	.word	0x40014800
 8032a18:	40001800 	.word	0x40001800
 8032a1c:	40001c00 	.word	0x40001c00
 8032a20:	40002000 	.word	0x40002000
 8032a24:	080387d8 	.word	0x080387d8
 8032a28:	08028271 	.word	0x08028271

08032a2c <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 8032a2c:	b580      	push	{r7, lr}
 8032a2e:	b082      	sub	sp, #8
 8032a30:	af00      	add	r7, sp, #0
 8032a32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8032a34:	687b      	ldr	r3, [r7, #4]
 8032a36:	681b      	ldr	r3, [r3, #0]
 8032a38:	4a50      	ldr	r2, [pc, #320]	@ (8032b7c <HAL_TIM_Base_DeInit+0x150>)
 8032a3a:	4293      	cmp	r3, r2
 8032a3c:	d045      	beq.n	8032aca <HAL_TIM_Base_DeInit+0x9e>
 8032a3e:	687b      	ldr	r3, [r7, #4]
 8032a40:	681b      	ldr	r3, [r3, #0]
 8032a42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8032a46:	d040      	beq.n	8032aca <HAL_TIM_Base_DeInit+0x9e>
 8032a48:	687b      	ldr	r3, [r7, #4]
 8032a4a:	681b      	ldr	r3, [r3, #0]
 8032a4c:	4a4c      	ldr	r2, [pc, #304]	@ (8032b80 <HAL_TIM_Base_DeInit+0x154>)
 8032a4e:	4293      	cmp	r3, r2
 8032a50:	d03b      	beq.n	8032aca <HAL_TIM_Base_DeInit+0x9e>
 8032a52:	687b      	ldr	r3, [r7, #4]
 8032a54:	681b      	ldr	r3, [r3, #0]
 8032a56:	4a4b      	ldr	r2, [pc, #300]	@ (8032b84 <HAL_TIM_Base_DeInit+0x158>)
 8032a58:	4293      	cmp	r3, r2
 8032a5a:	d036      	beq.n	8032aca <HAL_TIM_Base_DeInit+0x9e>
 8032a5c:	687b      	ldr	r3, [r7, #4]
 8032a5e:	681b      	ldr	r3, [r3, #0]
 8032a60:	4a49      	ldr	r2, [pc, #292]	@ (8032b88 <HAL_TIM_Base_DeInit+0x15c>)
 8032a62:	4293      	cmp	r3, r2
 8032a64:	d031      	beq.n	8032aca <HAL_TIM_Base_DeInit+0x9e>
 8032a66:	687b      	ldr	r3, [r7, #4]
 8032a68:	681b      	ldr	r3, [r3, #0]
 8032a6a:	4a48      	ldr	r2, [pc, #288]	@ (8032b8c <HAL_TIM_Base_DeInit+0x160>)
 8032a6c:	4293      	cmp	r3, r2
 8032a6e:	d02c      	beq.n	8032aca <HAL_TIM_Base_DeInit+0x9e>
 8032a70:	687b      	ldr	r3, [r7, #4]
 8032a72:	681b      	ldr	r3, [r3, #0]
 8032a74:	4a46      	ldr	r2, [pc, #280]	@ (8032b90 <HAL_TIM_Base_DeInit+0x164>)
 8032a76:	4293      	cmp	r3, r2
 8032a78:	d027      	beq.n	8032aca <HAL_TIM_Base_DeInit+0x9e>
 8032a7a:	687b      	ldr	r3, [r7, #4]
 8032a7c:	681b      	ldr	r3, [r3, #0]
 8032a7e:	4a45      	ldr	r2, [pc, #276]	@ (8032b94 <HAL_TIM_Base_DeInit+0x168>)
 8032a80:	4293      	cmp	r3, r2
 8032a82:	d022      	beq.n	8032aca <HAL_TIM_Base_DeInit+0x9e>
 8032a84:	687b      	ldr	r3, [r7, #4]
 8032a86:	681b      	ldr	r3, [r3, #0]
 8032a88:	4a43      	ldr	r2, [pc, #268]	@ (8032b98 <HAL_TIM_Base_DeInit+0x16c>)
 8032a8a:	4293      	cmp	r3, r2
 8032a8c:	d01d      	beq.n	8032aca <HAL_TIM_Base_DeInit+0x9e>
 8032a8e:	687b      	ldr	r3, [r7, #4]
 8032a90:	681b      	ldr	r3, [r3, #0]
 8032a92:	4a42      	ldr	r2, [pc, #264]	@ (8032b9c <HAL_TIM_Base_DeInit+0x170>)
 8032a94:	4293      	cmp	r3, r2
 8032a96:	d018      	beq.n	8032aca <HAL_TIM_Base_DeInit+0x9e>
 8032a98:	687b      	ldr	r3, [r7, #4]
 8032a9a:	681b      	ldr	r3, [r3, #0]
 8032a9c:	4a40      	ldr	r2, [pc, #256]	@ (8032ba0 <HAL_TIM_Base_DeInit+0x174>)
 8032a9e:	4293      	cmp	r3, r2
 8032aa0:	d013      	beq.n	8032aca <HAL_TIM_Base_DeInit+0x9e>
 8032aa2:	687b      	ldr	r3, [r7, #4]
 8032aa4:	681b      	ldr	r3, [r3, #0]
 8032aa6:	4a3f      	ldr	r2, [pc, #252]	@ (8032ba4 <HAL_TIM_Base_DeInit+0x178>)
 8032aa8:	4293      	cmp	r3, r2
 8032aaa:	d00e      	beq.n	8032aca <HAL_TIM_Base_DeInit+0x9e>
 8032aac:	687b      	ldr	r3, [r7, #4]
 8032aae:	681b      	ldr	r3, [r3, #0]
 8032ab0:	4a3d      	ldr	r2, [pc, #244]	@ (8032ba8 <HAL_TIM_Base_DeInit+0x17c>)
 8032ab2:	4293      	cmp	r3, r2
 8032ab4:	d009      	beq.n	8032aca <HAL_TIM_Base_DeInit+0x9e>
 8032ab6:	687b      	ldr	r3, [r7, #4]
 8032ab8:	681b      	ldr	r3, [r3, #0]
 8032aba:	4a3c      	ldr	r2, [pc, #240]	@ (8032bac <HAL_TIM_Base_DeInit+0x180>)
 8032abc:	4293      	cmp	r3, r2
 8032abe:	d004      	beq.n	8032aca <HAL_TIM_Base_DeInit+0x9e>
 8032ac0:	f240 1149 	movw	r1, #329	@ 0x149
 8032ac4:	483a      	ldr	r0, [pc, #232]	@ (8032bb0 <HAL_TIM_Base_DeInit+0x184>)
 8032ac6:	f7f5 f916 	bl	8027cf6 <assert_failed>

  htim->State = HAL_TIM_STATE_BUSY;
 8032aca:	687b      	ldr	r3, [r7, #4]
 8032acc:	2202      	movs	r2, #2
 8032ace:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8032ad2:	687b      	ldr	r3, [r7, #4]
 8032ad4:	681b      	ldr	r3, [r3, #0]
 8032ad6:	6a1a      	ldr	r2, [r3, #32]
 8032ad8:	f241 1311 	movw	r3, #4369	@ 0x1111
 8032adc:	4013      	ands	r3, r2
 8032ade:	2b00      	cmp	r3, #0
 8032ae0:	d10f      	bne.n	8032b02 <HAL_TIM_Base_DeInit+0xd6>
 8032ae2:	687b      	ldr	r3, [r7, #4]
 8032ae4:	681b      	ldr	r3, [r3, #0]
 8032ae6:	6a1a      	ldr	r2, [r3, #32]
 8032ae8:	f240 4344 	movw	r3, #1092	@ 0x444
 8032aec:	4013      	ands	r3, r2
 8032aee:	2b00      	cmp	r3, #0
 8032af0:	d107      	bne.n	8032b02 <HAL_TIM_Base_DeInit+0xd6>
 8032af2:	687b      	ldr	r3, [r7, #4]
 8032af4:	681b      	ldr	r3, [r3, #0]
 8032af6:	681a      	ldr	r2, [r3, #0]
 8032af8:	687b      	ldr	r3, [r7, #4]
 8032afa:	681b      	ldr	r3, [r3, #0]
 8032afc:	f022 0201 	bic.w	r2, r2, #1
 8032b00:	601a      	str	r2, [r3, #0]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  if (htim->Base_MspDeInitCallback == NULL)
 8032b02:	687b      	ldr	r3, [r7, #4]
 8032b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8032b06:	2b00      	cmp	r3, #0
 8032b08:	d102      	bne.n	8032b10 <HAL_TIM_Base_DeInit+0xe4>
  {
    htim->Base_MspDeInitCallback = HAL_TIM_Base_MspDeInit;
 8032b0a:	687b      	ldr	r3, [r7, #4]
 8032b0c:	4a29      	ldr	r2, [pc, #164]	@ (8032bb4 <HAL_TIM_Base_DeInit+0x188>)
 8032b0e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
 8032b10:	687b      	ldr	r3, [r7, #4]
 8032b12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8032b14:	6878      	ldr	r0, [r7, #4]
 8032b16:	4798      	blx	r3
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8032b18:	687b      	ldr	r3, [r7, #4]
 8032b1a:	2200      	movs	r2, #0
 8032b1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8032b20:	687b      	ldr	r3, [r7, #4]
 8032b22:	2200      	movs	r2, #0
 8032b24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8032b28:	687b      	ldr	r3, [r7, #4]
 8032b2a:	2200      	movs	r2, #0
 8032b2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8032b30:	687b      	ldr	r3, [r7, #4]
 8032b32:	2200      	movs	r2, #0
 8032b34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8032b38:	687b      	ldr	r3, [r7, #4]
 8032b3a:	2200      	movs	r2, #0
 8032b3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8032b40:	687b      	ldr	r3, [r7, #4]
 8032b42:	2200      	movs	r2, #0
 8032b44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8032b48:	687b      	ldr	r3, [r7, #4]
 8032b4a:	2200      	movs	r2, #0
 8032b4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8032b50:	687b      	ldr	r3, [r7, #4]
 8032b52:	2200      	movs	r2, #0
 8032b54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8032b58:	687b      	ldr	r3, [r7, #4]
 8032b5a:	2200      	movs	r2, #0
 8032b5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8032b60:	687b      	ldr	r3, [r7, #4]
 8032b62:	2200      	movs	r2, #0
 8032b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8032b68:	687b      	ldr	r3, [r7, #4]
 8032b6a:	2200      	movs	r2, #0
 8032b6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8032b70:	2300      	movs	r3, #0
}
 8032b72:	4618      	mov	r0, r3
 8032b74:	3708      	adds	r7, #8
 8032b76:	46bd      	mov	sp, r7
 8032b78:	bd80      	pop	{r7, pc}
 8032b7a:	bf00      	nop
 8032b7c:	40010000 	.word	0x40010000
 8032b80:	40000400 	.word	0x40000400
 8032b84:	40000800 	.word	0x40000800
 8032b88:	40000c00 	.word	0x40000c00
 8032b8c:	40001000 	.word	0x40001000
 8032b90:	40001400 	.word	0x40001400
 8032b94:	40010400 	.word	0x40010400
 8032b98:	40014000 	.word	0x40014000
 8032b9c:	40014400 	.word	0x40014400
 8032ba0:	40014800 	.word	0x40014800
 8032ba4:	40001800 	.word	0x40001800
 8032ba8:	40001c00 	.word	0x40001c00
 8032bac:	40002000 	.word	0x40002000
 8032bb0:	080387d8 	.word	0x080387d8
 8032bb4:	080282b5 	.word	0x080282b5

08032bb8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8032bb8:	b580      	push	{r7, lr}
 8032bba:	b082      	sub	sp, #8
 8032bbc:	af00      	add	r7, sp, #0
 8032bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8032bc0:	687b      	ldr	r3, [r7, #4]
 8032bc2:	681b      	ldr	r3, [r3, #0]
 8032bc4:	4a34      	ldr	r2, [pc, #208]	@ (8032c98 <HAL_TIM_Base_Stop+0xe0>)
 8032bc6:	4293      	cmp	r3, r2
 8032bc8:	d045      	beq.n	8032c56 <HAL_TIM_Base_Stop+0x9e>
 8032bca:	687b      	ldr	r3, [r7, #4]
 8032bcc:	681b      	ldr	r3, [r3, #0]
 8032bce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8032bd2:	d040      	beq.n	8032c56 <HAL_TIM_Base_Stop+0x9e>
 8032bd4:	687b      	ldr	r3, [r7, #4]
 8032bd6:	681b      	ldr	r3, [r3, #0]
 8032bd8:	4a30      	ldr	r2, [pc, #192]	@ (8032c9c <HAL_TIM_Base_Stop+0xe4>)
 8032bda:	4293      	cmp	r3, r2
 8032bdc:	d03b      	beq.n	8032c56 <HAL_TIM_Base_Stop+0x9e>
 8032bde:	687b      	ldr	r3, [r7, #4]
 8032be0:	681b      	ldr	r3, [r3, #0]
 8032be2:	4a2f      	ldr	r2, [pc, #188]	@ (8032ca0 <HAL_TIM_Base_Stop+0xe8>)
 8032be4:	4293      	cmp	r3, r2
 8032be6:	d036      	beq.n	8032c56 <HAL_TIM_Base_Stop+0x9e>
 8032be8:	687b      	ldr	r3, [r7, #4]
 8032bea:	681b      	ldr	r3, [r3, #0]
 8032bec:	4a2d      	ldr	r2, [pc, #180]	@ (8032ca4 <HAL_TIM_Base_Stop+0xec>)
 8032bee:	4293      	cmp	r3, r2
 8032bf0:	d031      	beq.n	8032c56 <HAL_TIM_Base_Stop+0x9e>
 8032bf2:	687b      	ldr	r3, [r7, #4]
 8032bf4:	681b      	ldr	r3, [r3, #0]
 8032bf6:	4a2c      	ldr	r2, [pc, #176]	@ (8032ca8 <HAL_TIM_Base_Stop+0xf0>)
 8032bf8:	4293      	cmp	r3, r2
 8032bfa:	d02c      	beq.n	8032c56 <HAL_TIM_Base_Stop+0x9e>
 8032bfc:	687b      	ldr	r3, [r7, #4]
 8032bfe:	681b      	ldr	r3, [r3, #0]
 8032c00:	4a2a      	ldr	r2, [pc, #168]	@ (8032cac <HAL_TIM_Base_Stop+0xf4>)
 8032c02:	4293      	cmp	r3, r2
 8032c04:	d027      	beq.n	8032c56 <HAL_TIM_Base_Stop+0x9e>
 8032c06:	687b      	ldr	r3, [r7, #4]
 8032c08:	681b      	ldr	r3, [r3, #0]
 8032c0a:	4a29      	ldr	r2, [pc, #164]	@ (8032cb0 <HAL_TIM_Base_Stop+0xf8>)
 8032c0c:	4293      	cmp	r3, r2
 8032c0e:	d022      	beq.n	8032c56 <HAL_TIM_Base_Stop+0x9e>
 8032c10:	687b      	ldr	r3, [r7, #4]
 8032c12:	681b      	ldr	r3, [r3, #0]
 8032c14:	4a27      	ldr	r2, [pc, #156]	@ (8032cb4 <HAL_TIM_Base_Stop+0xfc>)
 8032c16:	4293      	cmp	r3, r2
 8032c18:	d01d      	beq.n	8032c56 <HAL_TIM_Base_Stop+0x9e>
 8032c1a:	687b      	ldr	r3, [r7, #4]
 8032c1c:	681b      	ldr	r3, [r3, #0]
 8032c1e:	4a26      	ldr	r2, [pc, #152]	@ (8032cb8 <HAL_TIM_Base_Stop+0x100>)
 8032c20:	4293      	cmp	r3, r2
 8032c22:	d018      	beq.n	8032c56 <HAL_TIM_Base_Stop+0x9e>
 8032c24:	687b      	ldr	r3, [r7, #4]
 8032c26:	681b      	ldr	r3, [r3, #0]
 8032c28:	4a24      	ldr	r2, [pc, #144]	@ (8032cbc <HAL_TIM_Base_Stop+0x104>)
 8032c2a:	4293      	cmp	r3, r2
 8032c2c:	d013      	beq.n	8032c56 <HAL_TIM_Base_Stop+0x9e>
 8032c2e:	687b      	ldr	r3, [r7, #4]
 8032c30:	681b      	ldr	r3, [r3, #0]
 8032c32:	4a23      	ldr	r2, [pc, #140]	@ (8032cc0 <HAL_TIM_Base_Stop+0x108>)
 8032c34:	4293      	cmp	r3, r2
 8032c36:	d00e      	beq.n	8032c56 <HAL_TIM_Base_Stop+0x9e>
 8032c38:	687b      	ldr	r3, [r7, #4]
 8032c3a:	681b      	ldr	r3, [r3, #0]
 8032c3c:	4a21      	ldr	r2, [pc, #132]	@ (8032cc4 <HAL_TIM_Base_Stop+0x10c>)
 8032c3e:	4293      	cmp	r3, r2
 8032c40:	d009      	beq.n	8032c56 <HAL_TIM_Base_Stop+0x9e>
 8032c42:	687b      	ldr	r3, [r7, #4]
 8032c44:	681b      	ldr	r3, [r3, #0]
 8032c46:	4a20      	ldr	r2, [pc, #128]	@ (8032cc8 <HAL_TIM_Base_Stop+0x110>)
 8032c48:	4293      	cmp	r3, r2
 8032c4a:	d004      	beq.n	8032c56 <HAL_TIM_Base_Stop+0x9e>
 8032c4c:	f44f 71dd 	mov.w	r1, #442	@ 0x1ba
 8032c50:	481e      	ldr	r0, [pc, #120]	@ (8032ccc <HAL_TIM_Base_Stop+0x114>)
 8032c52:	f7f5 f850 	bl	8027cf6 <assert_failed>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8032c56:	687b      	ldr	r3, [r7, #4]
 8032c58:	681b      	ldr	r3, [r3, #0]
 8032c5a:	6a1a      	ldr	r2, [r3, #32]
 8032c5c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8032c60:	4013      	ands	r3, r2
 8032c62:	2b00      	cmp	r3, #0
 8032c64:	d10f      	bne.n	8032c86 <HAL_TIM_Base_Stop+0xce>
 8032c66:	687b      	ldr	r3, [r7, #4]
 8032c68:	681b      	ldr	r3, [r3, #0]
 8032c6a:	6a1a      	ldr	r2, [r3, #32]
 8032c6c:	f240 4344 	movw	r3, #1092	@ 0x444
 8032c70:	4013      	ands	r3, r2
 8032c72:	2b00      	cmp	r3, #0
 8032c74:	d107      	bne.n	8032c86 <HAL_TIM_Base_Stop+0xce>
 8032c76:	687b      	ldr	r3, [r7, #4]
 8032c78:	681b      	ldr	r3, [r3, #0]
 8032c7a:	681a      	ldr	r2, [r3, #0]
 8032c7c:	687b      	ldr	r3, [r7, #4]
 8032c7e:	681b      	ldr	r3, [r3, #0]
 8032c80:	f022 0201 	bic.w	r2, r2, #1
 8032c84:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8032c86:	687b      	ldr	r3, [r7, #4]
 8032c88:	2201      	movs	r2, #1
 8032c8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8032c8e:	2300      	movs	r3, #0
}
 8032c90:	4618      	mov	r0, r3
 8032c92:	3708      	adds	r7, #8
 8032c94:	46bd      	mov	sp, r7
 8032c96:	bd80      	pop	{r7, pc}
 8032c98:	40010000 	.word	0x40010000
 8032c9c:	40000400 	.word	0x40000400
 8032ca0:	40000800 	.word	0x40000800
 8032ca4:	40000c00 	.word	0x40000c00
 8032ca8:	40001000 	.word	0x40001000
 8032cac:	40001400 	.word	0x40001400
 8032cb0:	40010400 	.word	0x40010400
 8032cb4:	40014000 	.word	0x40014000
 8032cb8:	40014400 	.word	0x40014400
 8032cbc:	40014800 	.word	0x40014800
 8032cc0:	40001800 	.word	0x40001800
 8032cc4:	40001c00 	.word	0x40001c00
 8032cc8:	40002000 	.word	0x40002000
 8032ccc:	080387d8 	.word	0x080387d8

08032cd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8032cd0:	b580      	push	{r7, lr}
 8032cd2:	b084      	sub	sp, #16
 8032cd4:	af00      	add	r7, sp, #0
 8032cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8032cd8:	687b      	ldr	r3, [r7, #4]
 8032cda:	681b      	ldr	r3, [r3, #0]
 8032cdc:	4a51      	ldr	r2, [pc, #324]	@ (8032e24 <HAL_TIM_Base_Start_IT+0x154>)
 8032cde:	4293      	cmp	r3, r2
 8032ce0:	d045      	beq.n	8032d6e <HAL_TIM_Base_Start_IT+0x9e>
 8032ce2:	687b      	ldr	r3, [r7, #4]
 8032ce4:	681b      	ldr	r3, [r3, #0]
 8032ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8032cea:	d040      	beq.n	8032d6e <HAL_TIM_Base_Start_IT+0x9e>
 8032cec:	687b      	ldr	r3, [r7, #4]
 8032cee:	681b      	ldr	r3, [r3, #0]
 8032cf0:	4a4d      	ldr	r2, [pc, #308]	@ (8032e28 <HAL_TIM_Base_Start_IT+0x158>)
 8032cf2:	4293      	cmp	r3, r2
 8032cf4:	d03b      	beq.n	8032d6e <HAL_TIM_Base_Start_IT+0x9e>
 8032cf6:	687b      	ldr	r3, [r7, #4]
 8032cf8:	681b      	ldr	r3, [r3, #0]
 8032cfa:	4a4c      	ldr	r2, [pc, #304]	@ (8032e2c <HAL_TIM_Base_Start_IT+0x15c>)
 8032cfc:	4293      	cmp	r3, r2
 8032cfe:	d036      	beq.n	8032d6e <HAL_TIM_Base_Start_IT+0x9e>
 8032d00:	687b      	ldr	r3, [r7, #4]
 8032d02:	681b      	ldr	r3, [r3, #0]
 8032d04:	4a4a      	ldr	r2, [pc, #296]	@ (8032e30 <HAL_TIM_Base_Start_IT+0x160>)
 8032d06:	4293      	cmp	r3, r2
 8032d08:	d031      	beq.n	8032d6e <HAL_TIM_Base_Start_IT+0x9e>
 8032d0a:	687b      	ldr	r3, [r7, #4]
 8032d0c:	681b      	ldr	r3, [r3, #0]
 8032d0e:	4a49      	ldr	r2, [pc, #292]	@ (8032e34 <HAL_TIM_Base_Start_IT+0x164>)
 8032d10:	4293      	cmp	r3, r2
 8032d12:	d02c      	beq.n	8032d6e <HAL_TIM_Base_Start_IT+0x9e>
 8032d14:	687b      	ldr	r3, [r7, #4]
 8032d16:	681b      	ldr	r3, [r3, #0]
 8032d18:	4a47      	ldr	r2, [pc, #284]	@ (8032e38 <HAL_TIM_Base_Start_IT+0x168>)
 8032d1a:	4293      	cmp	r3, r2
 8032d1c:	d027      	beq.n	8032d6e <HAL_TIM_Base_Start_IT+0x9e>
 8032d1e:	687b      	ldr	r3, [r7, #4]
 8032d20:	681b      	ldr	r3, [r3, #0]
 8032d22:	4a46      	ldr	r2, [pc, #280]	@ (8032e3c <HAL_TIM_Base_Start_IT+0x16c>)
 8032d24:	4293      	cmp	r3, r2
 8032d26:	d022      	beq.n	8032d6e <HAL_TIM_Base_Start_IT+0x9e>
 8032d28:	687b      	ldr	r3, [r7, #4]
 8032d2a:	681b      	ldr	r3, [r3, #0]
 8032d2c:	4a44      	ldr	r2, [pc, #272]	@ (8032e40 <HAL_TIM_Base_Start_IT+0x170>)
 8032d2e:	4293      	cmp	r3, r2
 8032d30:	d01d      	beq.n	8032d6e <HAL_TIM_Base_Start_IT+0x9e>
 8032d32:	687b      	ldr	r3, [r7, #4]
 8032d34:	681b      	ldr	r3, [r3, #0]
 8032d36:	4a43      	ldr	r2, [pc, #268]	@ (8032e44 <HAL_TIM_Base_Start_IT+0x174>)
 8032d38:	4293      	cmp	r3, r2
 8032d3a:	d018      	beq.n	8032d6e <HAL_TIM_Base_Start_IT+0x9e>
 8032d3c:	687b      	ldr	r3, [r7, #4]
 8032d3e:	681b      	ldr	r3, [r3, #0]
 8032d40:	4a41      	ldr	r2, [pc, #260]	@ (8032e48 <HAL_TIM_Base_Start_IT+0x178>)
 8032d42:	4293      	cmp	r3, r2
 8032d44:	d013      	beq.n	8032d6e <HAL_TIM_Base_Start_IT+0x9e>
 8032d46:	687b      	ldr	r3, [r7, #4]
 8032d48:	681b      	ldr	r3, [r3, #0]
 8032d4a:	4a40      	ldr	r2, [pc, #256]	@ (8032e4c <HAL_TIM_Base_Start_IT+0x17c>)
 8032d4c:	4293      	cmp	r3, r2
 8032d4e:	d00e      	beq.n	8032d6e <HAL_TIM_Base_Start_IT+0x9e>
 8032d50:	687b      	ldr	r3, [r7, #4]
 8032d52:	681b      	ldr	r3, [r3, #0]
 8032d54:	4a3e      	ldr	r2, [pc, #248]	@ (8032e50 <HAL_TIM_Base_Start_IT+0x180>)
 8032d56:	4293      	cmp	r3, r2
 8032d58:	d009      	beq.n	8032d6e <HAL_TIM_Base_Start_IT+0x9e>
 8032d5a:	687b      	ldr	r3, [r7, #4]
 8032d5c:	681b      	ldr	r3, [r3, #0]
 8032d5e:	4a3d      	ldr	r2, [pc, #244]	@ (8032e54 <HAL_TIM_Base_Start_IT+0x184>)
 8032d60:	4293      	cmp	r3, r2
 8032d62:	d004      	beq.n	8032d6e <HAL_TIM_Base_Start_IT+0x9e>
 8032d64:	f44f 71e8 	mov.w	r1, #464	@ 0x1d0
 8032d68:	483b      	ldr	r0, [pc, #236]	@ (8032e58 <HAL_TIM_Base_Start_IT+0x188>)
 8032d6a:	f7f4 ffc4 	bl	8027cf6 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8032d6e:	687b      	ldr	r3, [r7, #4]
 8032d70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8032d74:	b2db      	uxtb	r3, r3
 8032d76:	2b01      	cmp	r3, #1
 8032d78:	d001      	beq.n	8032d7e <HAL_TIM_Base_Start_IT+0xae>
  {
    return HAL_ERROR;
 8032d7a:	2301      	movs	r3, #1
 8032d7c:	e04e      	b.n	8032e1c <HAL_TIM_Base_Start_IT+0x14c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8032d7e:	687b      	ldr	r3, [r7, #4]
 8032d80:	2202      	movs	r2, #2
 8032d82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8032d86:	687b      	ldr	r3, [r7, #4]
 8032d88:	681b      	ldr	r3, [r3, #0]
 8032d8a:	68da      	ldr	r2, [r3, #12]
 8032d8c:	687b      	ldr	r3, [r7, #4]
 8032d8e:	681b      	ldr	r3, [r3, #0]
 8032d90:	f042 0201 	orr.w	r2, r2, #1
 8032d94:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8032d96:	687b      	ldr	r3, [r7, #4]
 8032d98:	681b      	ldr	r3, [r3, #0]
 8032d9a:	4a22      	ldr	r2, [pc, #136]	@ (8032e24 <HAL_TIM_Base_Start_IT+0x154>)
 8032d9c:	4293      	cmp	r3, r2
 8032d9e:	d022      	beq.n	8032de6 <HAL_TIM_Base_Start_IT+0x116>
 8032da0:	687b      	ldr	r3, [r7, #4]
 8032da2:	681b      	ldr	r3, [r3, #0]
 8032da4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8032da8:	d01d      	beq.n	8032de6 <HAL_TIM_Base_Start_IT+0x116>
 8032daa:	687b      	ldr	r3, [r7, #4]
 8032dac:	681b      	ldr	r3, [r3, #0]
 8032dae:	4a1e      	ldr	r2, [pc, #120]	@ (8032e28 <HAL_TIM_Base_Start_IT+0x158>)
 8032db0:	4293      	cmp	r3, r2
 8032db2:	d018      	beq.n	8032de6 <HAL_TIM_Base_Start_IT+0x116>
 8032db4:	687b      	ldr	r3, [r7, #4]
 8032db6:	681b      	ldr	r3, [r3, #0]
 8032db8:	4a1c      	ldr	r2, [pc, #112]	@ (8032e2c <HAL_TIM_Base_Start_IT+0x15c>)
 8032dba:	4293      	cmp	r3, r2
 8032dbc:	d013      	beq.n	8032de6 <HAL_TIM_Base_Start_IT+0x116>
 8032dbe:	687b      	ldr	r3, [r7, #4]
 8032dc0:	681b      	ldr	r3, [r3, #0]
 8032dc2:	4a1b      	ldr	r2, [pc, #108]	@ (8032e30 <HAL_TIM_Base_Start_IT+0x160>)
 8032dc4:	4293      	cmp	r3, r2
 8032dc6:	d00e      	beq.n	8032de6 <HAL_TIM_Base_Start_IT+0x116>
 8032dc8:	687b      	ldr	r3, [r7, #4]
 8032dca:	681b      	ldr	r3, [r3, #0]
 8032dcc:	4a1b      	ldr	r2, [pc, #108]	@ (8032e3c <HAL_TIM_Base_Start_IT+0x16c>)
 8032dce:	4293      	cmp	r3, r2
 8032dd0:	d009      	beq.n	8032de6 <HAL_TIM_Base_Start_IT+0x116>
 8032dd2:	687b      	ldr	r3, [r7, #4]
 8032dd4:	681b      	ldr	r3, [r3, #0]
 8032dd6:	4a1a      	ldr	r2, [pc, #104]	@ (8032e40 <HAL_TIM_Base_Start_IT+0x170>)
 8032dd8:	4293      	cmp	r3, r2
 8032dda:	d004      	beq.n	8032de6 <HAL_TIM_Base_Start_IT+0x116>
 8032ddc:	687b      	ldr	r3, [r7, #4]
 8032dde:	681b      	ldr	r3, [r3, #0]
 8032de0:	4a1a      	ldr	r2, [pc, #104]	@ (8032e4c <HAL_TIM_Base_Start_IT+0x17c>)
 8032de2:	4293      	cmp	r3, r2
 8032de4:	d111      	bne.n	8032e0a <HAL_TIM_Base_Start_IT+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8032de6:	687b      	ldr	r3, [r7, #4]
 8032de8:	681b      	ldr	r3, [r3, #0]
 8032dea:	689b      	ldr	r3, [r3, #8]
 8032dec:	f003 0307 	and.w	r3, r3, #7
 8032df0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8032df2:	68fb      	ldr	r3, [r7, #12]
 8032df4:	2b06      	cmp	r3, #6
 8032df6:	d010      	beq.n	8032e1a <HAL_TIM_Base_Start_IT+0x14a>
    {
      __HAL_TIM_ENABLE(htim);
 8032df8:	687b      	ldr	r3, [r7, #4]
 8032dfa:	681b      	ldr	r3, [r3, #0]
 8032dfc:	681a      	ldr	r2, [r3, #0]
 8032dfe:	687b      	ldr	r3, [r7, #4]
 8032e00:	681b      	ldr	r3, [r3, #0]
 8032e02:	f042 0201 	orr.w	r2, r2, #1
 8032e06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8032e08:	e007      	b.n	8032e1a <HAL_TIM_Base_Start_IT+0x14a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8032e0a:	687b      	ldr	r3, [r7, #4]
 8032e0c:	681b      	ldr	r3, [r3, #0]
 8032e0e:	681a      	ldr	r2, [r3, #0]
 8032e10:	687b      	ldr	r3, [r7, #4]
 8032e12:	681b      	ldr	r3, [r3, #0]
 8032e14:	f042 0201 	orr.w	r2, r2, #1
 8032e18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8032e1a:	2300      	movs	r3, #0
}
 8032e1c:	4618      	mov	r0, r3
 8032e1e:	3710      	adds	r7, #16
 8032e20:	46bd      	mov	sp, r7
 8032e22:	bd80      	pop	{r7, pc}
 8032e24:	40010000 	.word	0x40010000
 8032e28:	40000400 	.word	0x40000400
 8032e2c:	40000800 	.word	0x40000800
 8032e30:	40000c00 	.word	0x40000c00
 8032e34:	40001000 	.word	0x40001000
 8032e38:	40001400 	.word	0x40001400
 8032e3c:	40010400 	.word	0x40010400
 8032e40:	40014000 	.word	0x40014000
 8032e44:	40014400 	.word	0x40014400
 8032e48:	40014800 	.word	0x40014800
 8032e4c:	40001800 	.word	0x40001800
 8032e50:	40001c00 	.word	0x40001c00
 8032e54:	40002000 	.word	0x40002000
 8032e58:	080387d8 	.word	0x080387d8

08032e5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8032e5c:	b580      	push	{r7, lr}
 8032e5e:	b084      	sub	sp, #16
 8032e60:	af00      	add	r7, sp, #0
 8032e62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8032e64:	687b      	ldr	r3, [r7, #4]
 8032e66:	681b      	ldr	r3, [r3, #0]
 8032e68:	68db      	ldr	r3, [r3, #12]
 8032e6a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8032e6c:	687b      	ldr	r3, [r7, #4]
 8032e6e:	681b      	ldr	r3, [r3, #0]
 8032e70:	691b      	ldr	r3, [r3, #16]
 8032e72:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8032e74:	68bb      	ldr	r3, [r7, #8]
 8032e76:	f003 0302 	and.w	r3, r3, #2
 8032e7a:	2b00      	cmp	r3, #0
 8032e7c:	d026      	beq.n	8032ecc <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8032e7e:	68fb      	ldr	r3, [r7, #12]
 8032e80:	f003 0302 	and.w	r3, r3, #2
 8032e84:	2b00      	cmp	r3, #0
 8032e86:	d021      	beq.n	8032ecc <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8032e88:	687b      	ldr	r3, [r7, #4]
 8032e8a:	681b      	ldr	r3, [r3, #0]
 8032e8c:	f06f 0202 	mvn.w	r2, #2
 8032e90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8032e92:	687b      	ldr	r3, [r7, #4]
 8032e94:	2201      	movs	r2, #1
 8032e96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8032e98:	687b      	ldr	r3, [r7, #4]
 8032e9a:	681b      	ldr	r3, [r3, #0]
 8032e9c:	699b      	ldr	r3, [r3, #24]
 8032e9e:	f003 0303 	and.w	r3, r3, #3
 8032ea2:	2b00      	cmp	r3, #0
 8032ea4:	d005      	beq.n	8032eb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8032ea6:	687b      	ldr	r3, [r7, #4]
 8032ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8032eac:	6878      	ldr	r0, [r7, #4]
 8032eae:	4798      	blx	r3
 8032eb0:	e009      	b.n	8032ec6 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8032eb2:	687b      	ldr	r3, [r7, #4]
 8032eb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8032eb8:	6878      	ldr	r0, [r7, #4]
 8032eba:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8032ebc:	687b      	ldr	r3, [r7, #4]
 8032ebe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8032ec2:	6878      	ldr	r0, [r7, #4]
 8032ec4:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8032ec6:	687b      	ldr	r3, [r7, #4]
 8032ec8:	2200      	movs	r2, #0
 8032eca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8032ecc:	68bb      	ldr	r3, [r7, #8]
 8032ece:	f003 0304 	and.w	r3, r3, #4
 8032ed2:	2b00      	cmp	r3, #0
 8032ed4:	d026      	beq.n	8032f24 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8032ed6:	68fb      	ldr	r3, [r7, #12]
 8032ed8:	f003 0304 	and.w	r3, r3, #4
 8032edc:	2b00      	cmp	r3, #0
 8032ede:	d021      	beq.n	8032f24 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8032ee0:	687b      	ldr	r3, [r7, #4]
 8032ee2:	681b      	ldr	r3, [r3, #0]
 8032ee4:	f06f 0204 	mvn.w	r2, #4
 8032ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8032eea:	687b      	ldr	r3, [r7, #4]
 8032eec:	2202      	movs	r2, #2
 8032eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8032ef0:	687b      	ldr	r3, [r7, #4]
 8032ef2:	681b      	ldr	r3, [r3, #0]
 8032ef4:	699b      	ldr	r3, [r3, #24]
 8032ef6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8032efa:	2b00      	cmp	r3, #0
 8032efc:	d005      	beq.n	8032f0a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8032efe:	687b      	ldr	r3, [r7, #4]
 8032f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8032f04:	6878      	ldr	r0, [r7, #4]
 8032f06:	4798      	blx	r3
 8032f08:	e009      	b.n	8032f1e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8032f0a:	687b      	ldr	r3, [r7, #4]
 8032f0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8032f10:	6878      	ldr	r0, [r7, #4]
 8032f12:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8032f14:	687b      	ldr	r3, [r7, #4]
 8032f16:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8032f1a:	6878      	ldr	r0, [r7, #4]
 8032f1c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8032f1e:	687b      	ldr	r3, [r7, #4]
 8032f20:	2200      	movs	r2, #0
 8032f22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8032f24:	68bb      	ldr	r3, [r7, #8]
 8032f26:	f003 0308 	and.w	r3, r3, #8
 8032f2a:	2b00      	cmp	r3, #0
 8032f2c:	d026      	beq.n	8032f7c <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8032f2e:	68fb      	ldr	r3, [r7, #12]
 8032f30:	f003 0308 	and.w	r3, r3, #8
 8032f34:	2b00      	cmp	r3, #0
 8032f36:	d021      	beq.n	8032f7c <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8032f38:	687b      	ldr	r3, [r7, #4]
 8032f3a:	681b      	ldr	r3, [r3, #0]
 8032f3c:	f06f 0208 	mvn.w	r2, #8
 8032f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8032f42:	687b      	ldr	r3, [r7, #4]
 8032f44:	2204      	movs	r2, #4
 8032f46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8032f48:	687b      	ldr	r3, [r7, #4]
 8032f4a:	681b      	ldr	r3, [r3, #0]
 8032f4c:	69db      	ldr	r3, [r3, #28]
 8032f4e:	f003 0303 	and.w	r3, r3, #3
 8032f52:	2b00      	cmp	r3, #0
 8032f54:	d005      	beq.n	8032f62 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8032f56:	687b      	ldr	r3, [r7, #4]
 8032f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8032f5c:	6878      	ldr	r0, [r7, #4]
 8032f5e:	4798      	blx	r3
 8032f60:	e009      	b.n	8032f76 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8032f62:	687b      	ldr	r3, [r7, #4]
 8032f64:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8032f68:	6878      	ldr	r0, [r7, #4]
 8032f6a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8032f6c:	687b      	ldr	r3, [r7, #4]
 8032f6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8032f72:	6878      	ldr	r0, [r7, #4]
 8032f74:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8032f76:	687b      	ldr	r3, [r7, #4]
 8032f78:	2200      	movs	r2, #0
 8032f7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8032f7c:	68bb      	ldr	r3, [r7, #8]
 8032f7e:	f003 0310 	and.w	r3, r3, #16
 8032f82:	2b00      	cmp	r3, #0
 8032f84:	d026      	beq.n	8032fd4 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8032f86:	68fb      	ldr	r3, [r7, #12]
 8032f88:	f003 0310 	and.w	r3, r3, #16
 8032f8c:	2b00      	cmp	r3, #0
 8032f8e:	d021      	beq.n	8032fd4 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8032f90:	687b      	ldr	r3, [r7, #4]
 8032f92:	681b      	ldr	r3, [r3, #0]
 8032f94:	f06f 0210 	mvn.w	r2, #16
 8032f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8032f9a:	687b      	ldr	r3, [r7, #4]
 8032f9c:	2208      	movs	r2, #8
 8032f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8032fa0:	687b      	ldr	r3, [r7, #4]
 8032fa2:	681b      	ldr	r3, [r3, #0]
 8032fa4:	69db      	ldr	r3, [r3, #28]
 8032fa6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8032faa:	2b00      	cmp	r3, #0
 8032fac:	d005      	beq.n	8032fba <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8032fae:	687b      	ldr	r3, [r7, #4]
 8032fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8032fb4:	6878      	ldr	r0, [r7, #4]
 8032fb6:	4798      	blx	r3
 8032fb8:	e009      	b.n	8032fce <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8032fba:	687b      	ldr	r3, [r7, #4]
 8032fbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8032fc0:	6878      	ldr	r0, [r7, #4]
 8032fc2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8032fc4:	687b      	ldr	r3, [r7, #4]
 8032fc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8032fca:	6878      	ldr	r0, [r7, #4]
 8032fcc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8032fce:	687b      	ldr	r3, [r7, #4]
 8032fd0:	2200      	movs	r2, #0
 8032fd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8032fd4:	68bb      	ldr	r3, [r7, #8]
 8032fd6:	f003 0301 	and.w	r3, r3, #1
 8032fda:	2b00      	cmp	r3, #0
 8032fdc:	d00e      	beq.n	8032ffc <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8032fde:	68fb      	ldr	r3, [r7, #12]
 8032fe0:	f003 0301 	and.w	r3, r3, #1
 8032fe4:	2b00      	cmp	r3, #0
 8032fe6:	d009      	beq.n	8032ffc <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8032fe8:	687b      	ldr	r3, [r7, #4]
 8032fea:	681b      	ldr	r3, [r3, #0]
 8032fec:	f06f 0201 	mvn.w	r2, #1
 8032ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8032ff2:	687b      	ldr	r3, [r7, #4]
 8032ff4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8032ff8:	6878      	ldr	r0, [r7, #4]
 8032ffa:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8032ffc:	68bb      	ldr	r3, [r7, #8]
 8032ffe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8033002:	2b00      	cmp	r3, #0
 8033004:	d00e      	beq.n	8033024 <HAL_TIM_IRQHandler+0x1c8>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8033006:	68fb      	ldr	r3, [r7, #12]
 8033008:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 803300c:	2b00      	cmp	r3, #0
 803300e:	d009      	beq.n	8033024 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8033010:	687b      	ldr	r3, [r7, #4]
 8033012:	681b      	ldr	r3, [r3, #0]
 8033014:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8033018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 803301a:	687b      	ldr	r3, [r7, #4]
 803301c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8033020:	6878      	ldr	r0, [r7, #4]
 8033022:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8033024:	68bb      	ldr	r3, [r7, #8]
 8033026:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 803302a:	2b00      	cmp	r3, #0
 803302c:	d00e      	beq.n	803304c <HAL_TIM_IRQHandler+0x1f0>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 803302e:	68fb      	ldr	r3, [r7, #12]
 8033030:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8033034:	2b00      	cmp	r3, #0
 8033036:	d009      	beq.n	803304c <HAL_TIM_IRQHandler+0x1f0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8033038:	687b      	ldr	r3, [r7, #4]
 803303a:	681b      	ldr	r3, [r3, #0]
 803303c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8033040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8033042:	687b      	ldr	r3, [r7, #4]
 8033044:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8033048:	6878      	ldr	r0, [r7, #4]
 803304a:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 803304c:	68bb      	ldr	r3, [r7, #8]
 803304e:	f003 0320 	and.w	r3, r3, #32
 8033052:	2b00      	cmp	r3, #0
 8033054:	d00e      	beq.n	8033074 <HAL_TIM_IRQHandler+0x218>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8033056:	68fb      	ldr	r3, [r7, #12]
 8033058:	f003 0320 	and.w	r3, r3, #32
 803305c:	2b00      	cmp	r3, #0
 803305e:	d009      	beq.n	8033074 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8033060:	687b      	ldr	r3, [r7, #4]
 8033062:	681b      	ldr	r3, [r3, #0]
 8033064:	f06f 0220 	mvn.w	r2, #32
 8033068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 803306a:	687b      	ldr	r3, [r7, #4]
 803306c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8033070:	6878      	ldr	r0, [r7, #4]
 8033072:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8033074:	bf00      	nop
 8033076:	3710      	adds	r7, #16
 8033078:	46bd      	mov	sp, r7
 803307a:	bd80      	pop	{r7, pc}

0803307c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 803307c:	b580      	push	{r7, lr}
 803307e:	b084      	sub	sp, #16
 8033080:	af00      	add	r7, sp, #0
 8033082:	6078      	str	r0, [r7, #4]
 8033084:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8033086:	2300      	movs	r3, #0
 8033088:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 803308a:	687b      	ldr	r3, [r7, #4]
 803308c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8033090:	2b01      	cmp	r3, #1
 8033092:	d101      	bne.n	8033098 <HAL_TIM_ConfigClockSource+0x1c>
 8033094:	2302      	movs	r3, #2
 8033096:	e35c      	b.n	8033752 <HAL_TIM_ConfigClockSource+0x6d6>
 8033098:	687b      	ldr	r3, [r7, #4]
 803309a:	2201      	movs	r2, #1
 803309c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80330a0:	687b      	ldr	r3, [r7, #4]
 80330a2:	2202      	movs	r2, #2
 80330a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 80330a8:	683b      	ldr	r3, [r7, #0]
 80330aa:	681b      	ldr	r3, [r3, #0]
 80330ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80330b0:	d029      	beq.n	8033106 <HAL_TIM_ConfigClockSource+0x8a>
 80330b2:	683b      	ldr	r3, [r7, #0]
 80330b4:	681b      	ldr	r3, [r3, #0]
 80330b6:	2b70      	cmp	r3, #112	@ 0x70
 80330b8:	d025      	beq.n	8033106 <HAL_TIM_ConfigClockSource+0x8a>
 80330ba:	683b      	ldr	r3, [r7, #0]
 80330bc:	681b      	ldr	r3, [r3, #0]
 80330be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80330c2:	d020      	beq.n	8033106 <HAL_TIM_ConfigClockSource+0x8a>
 80330c4:	683b      	ldr	r3, [r7, #0]
 80330c6:	681b      	ldr	r3, [r3, #0]
 80330c8:	2b40      	cmp	r3, #64	@ 0x40
 80330ca:	d01c      	beq.n	8033106 <HAL_TIM_ConfigClockSource+0x8a>
 80330cc:	683b      	ldr	r3, [r7, #0]
 80330ce:	681b      	ldr	r3, [r3, #0]
 80330d0:	2b50      	cmp	r3, #80	@ 0x50
 80330d2:	d018      	beq.n	8033106 <HAL_TIM_ConfigClockSource+0x8a>
 80330d4:	683b      	ldr	r3, [r7, #0]
 80330d6:	681b      	ldr	r3, [r3, #0]
 80330d8:	2b60      	cmp	r3, #96	@ 0x60
 80330da:	d014      	beq.n	8033106 <HAL_TIM_ConfigClockSource+0x8a>
 80330dc:	683b      	ldr	r3, [r7, #0]
 80330de:	681b      	ldr	r3, [r3, #0]
 80330e0:	2b00      	cmp	r3, #0
 80330e2:	d010      	beq.n	8033106 <HAL_TIM_ConfigClockSource+0x8a>
 80330e4:	683b      	ldr	r3, [r7, #0]
 80330e6:	681b      	ldr	r3, [r3, #0]
 80330e8:	2b10      	cmp	r3, #16
 80330ea:	d00c      	beq.n	8033106 <HAL_TIM_ConfigClockSource+0x8a>
 80330ec:	683b      	ldr	r3, [r7, #0]
 80330ee:	681b      	ldr	r3, [r3, #0]
 80330f0:	2b20      	cmp	r3, #32
 80330f2:	d008      	beq.n	8033106 <HAL_TIM_ConfigClockSource+0x8a>
 80330f4:	683b      	ldr	r3, [r7, #0]
 80330f6:	681b      	ldr	r3, [r3, #0]
 80330f8:	2b30      	cmp	r3, #48	@ 0x30
 80330fa:	d004      	beq.n	8033106 <HAL_TIM_ConfigClockSource+0x8a>
 80330fc:	f241 41c3 	movw	r1, #5315	@ 0x14c3
 8033100:	4893      	ldr	r0, [pc, #588]	@ (8033350 <HAL_TIM_ConfigClockSource+0x2d4>)
 8033102:	f7f4 fdf8 	bl	8027cf6 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8033106:	687b      	ldr	r3, [r7, #4]
 8033108:	681b      	ldr	r3, [r3, #0]
 803310a:	689b      	ldr	r3, [r3, #8]
 803310c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 803310e:	68bb      	ldr	r3, [r7, #8]
 8033110:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8033114:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8033116:	68bb      	ldr	r3, [r7, #8]
 8033118:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 803311c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 803311e:	687b      	ldr	r3, [r7, #4]
 8033120:	681b      	ldr	r3, [r3, #0]
 8033122:	68ba      	ldr	r2, [r7, #8]
 8033124:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8033126:	683b      	ldr	r3, [r7, #0]
 8033128:	681b      	ldr	r3, [r3, #0]
 803312a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 803312e:	f000 812b 	beq.w	8033388 <HAL_TIM_ConfigClockSource+0x30c>
 8033132:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8033136:	f200 82ff 	bhi.w	8033738 <HAL_TIM_ConfigClockSource+0x6bc>
 803313a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 803313e:	d02e      	beq.n	803319e <HAL_TIM_ConfigClockSource+0x122>
 8033140:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8033144:	f200 82f8 	bhi.w	8033738 <HAL_TIM_ConfigClockSource+0x6bc>
 8033148:	2b70      	cmp	r3, #112	@ 0x70
 803314a:	f000 8082 	beq.w	8033252 <HAL_TIM_ConfigClockSource+0x1d6>
 803314e:	2b70      	cmp	r3, #112	@ 0x70
 8033150:	f200 82f2 	bhi.w	8033738 <HAL_TIM_ConfigClockSource+0x6bc>
 8033154:	2b60      	cmp	r3, #96	@ 0x60
 8033156:	f000 81f9 	beq.w	803354c <HAL_TIM_ConfigClockSource+0x4d0>
 803315a:	2b60      	cmp	r3, #96	@ 0x60
 803315c:	f200 82ec 	bhi.w	8033738 <HAL_TIM_ConfigClockSource+0x6bc>
 8033160:	2b50      	cmp	r3, #80	@ 0x50
 8033162:	f000 8182 	beq.w	803346a <HAL_TIM_ConfigClockSource+0x3ee>
 8033166:	2b50      	cmp	r3, #80	@ 0x50
 8033168:	f200 82e6 	bhi.w	8033738 <HAL_TIM_ConfigClockSource+0x6bc>
 803316c:	2b40      	cmp	r3, #64	@ 0x40
 803316e:	f000 824d 	beq.w	803360c <HAL_TIM_ConfigClockSource+0x590>
 8033172:	2b40      	cmp	r3, #64	@ 0x40
 8033174:	f200 82e0 	bhi.w	8033738 <HAL_TIM_ConfigClockSource+0x6bc>
 8033178:	2b30      	cmp	r3, #48	@ 0x30
 803317a:	f000 82a7 	beq.w	80336cc <HAL_TIM_ConfigClockSource+0x650>
 803317e:	2b30      	cmp	r3, #48	@ 0x30
 8033180:	f200 82da 	bhi.w	8033738 <HAL_TIM_ConfigClockSource+0x6bc>
 8033184:	2b20      	cmp	r3, #32
 8033186:	f000 82a1 	beq.w	80336cc <HAL_TIM_ConfigClockSource+0x650>
 803318a:	2b20      	cmp	r3, #32
 803318c:	f200 82d4 	bhi.w	8033738 <HAL_TIM_ConfigClockSource+0x6bc>
 8033190:	2b00      	cmp	r3, #0
 8033192:	f000 829b 	beq.w	80336cc <HAL_TIM_ConfigClockSource+0x650>
 8033196:	2b10      	cmp	r3, #16
 8033198:	f000 8298 	beq.w	80336cc <HAL_TIM_ConfigClockSource+0x650>
 803319c:	e2cc      	b.n	8033738 <HAL_TIM_ConfigClockSource+0x6bc>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 803319e:	687b      	ldr	r3, [r7, #4]
 80331a0:	681b      	ldr	r3, [r3, #0]
 80331a2:	4a6c      	ldr	r2, [pc, #432]	@ (8033354 <HAL_TIM_ConfigClockSource+0x2d8>)
 80331a4:	4293      	cmp	r3, r2
 80331a6:	f000 82ca 	beq.w	803373e <HAL_TIM_ConfigClockSource+0x6c2>
 80331aa:	687b      	ldr	r3, [r7, #4]
 80331ac:	681b      	ldr	r3, [r3, #0]
 80331ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80331b2:	f000 82c4 	beq.w	803373e <HAL_TIM_ConfigClockSource+0x6c2>
 80331b6:	687b      	ldr	r3, [r7, #4]
 80331b8:	681b      	ldr	r3, [r3, #0]
 80331ba:	4a67      	ldr	r2, [pc, #412]	@ (8033358 <HAL_TIM_ConfigClockSource+0x2dc>)
 80331bc:	4293      	cmp	r3, r2
 80331be:	f000 82be 	beq.w	803373e <HAL_TIM_ConfigClockSource+0x6c2>
 80331c2:	687b      	ldr	r3, [r7, #4]
 80331c4:	681b      	ldr	r3, [r3, #0]
 80331c6:	4a65      	ldr	r2, [pc, #404]	@ (803335c <HAL_TIM_ConfigClockSource+0x2e0>)
 80331c8:	4293      	cmp	r3, r2
 80331ca:	f000 82b8 	beq.w	803373e <HAL_TIM_ConfigClockSource+0x6c2>
 80331ce:	687b      	ldr	r3, [r7, #4]
 80331d0:	681b      	ldr	r3, [r3, #0]
 80331d2:	4a63      	ldr	r2, [pc, #396]	@ (8033360 <HAL_TIM_ConfigClockSource+0x2e4>)
 80331d4:	4293      	cmp	r3, r2
 80331d6:	f000 82b2 	beq.w	803373e <HAL_TIM_ConfigClockSource+0x6c2>
 80331da:	687b      	ldr	r3, [r7, #4]
 80331dc:	681b      	ldr	r3, [r3, #0]
 80331de:	4a61      	ldr	r2, [pc, #388]	@ (8033364 <HAL_TIM_ConfigClockSource+0x2e8>)
 80331e0:	4293      	cmp	r3, r2
 80331e2:	f000 82ac 	beq.w	803373e <HAL_TIM_ConfigClockSource+0x6c2>
 80331e6:	687b      	ldr	r3, [r7, #4]
 80331e8:	681b      	ldr	r3, [r3, #0]
 80331ea:	4a5f      	ldr	r2, [pc, #380]	@ (8033368 <HAL_TIM_ConfigClockSource+0x2ec>)
 80331ec:	4293      	cmp	r3, r2
 80331ee:	f000 82a6 	beq.w	803373e <HAL_TIM_ConfigClockSource+0x6c2>
 80331f2:	687b      	ldr	r3, [r7, #4]
 80331f4:	681b      	ldr	r3, [r3, #0]
 80331f6:	4a5d      	ldr	r2, [pc, #372]	@ (803336c <HAL_TIM_ConfigClockSource+0x2f0>)
 80331f8:	4293      	cmp	r3, r2
 80331fa:	f000 82a0 	beq.w	803373e <HAL_TIM_ConfigClockSource+0x6c2>
 80331fe:	687b      	ldr	r3, [r7, #4]
 8033200:	681b      	ldr	r3, [r3, #0]
 8033202:	4a5b      	ldr	r2, [pc, #364]	@ (8033370 <HAL_TIM_ConfigClockSource+0x2f4>)
 8033204:	4293      	cmp	r3, r2
 8033206:	f000 829a 	beq.w	803373e <HAL_TIM_ConfigClockSource+0x6c2>
 803320a:	687b      	ldr	r3, [r7, #4]
 803320c:	681b      	ldr	r3, [r3, #0]
 803320e:	4a59      	ldr	r2, [pc, #356]	@ (8033374 <HAL_TIM_ConfigClockSource+0x2f8>)
 8033210:	4293      	cmp	r3, r2
 8033212:	f000 8294 	beq.w	803373e <HAL_TIM_ConfigClockSource+0x6c2>
 8033216:	687b      	ldr	r3, [r7, #4]
 8033218:	681b      	ldr	r3, [r3, #0]
 803321a:	4a57      	ldr	r2, [pc, #348]	@ (8033378 <HAL_TIM_ConfigClockSource+0x2fc>)
 803321c:	4293      	cmp	r3, r2
 803321e:	f000 828e 	beq.w	803373e <HAL_TIM_ConfigClockSource+0x6c2>
 8033222:	687b      	ldr	r3, [r7, #4]
 8033224:	681b      	ldr	r3, [r3, #0]
 8033226:	4a55      	ldr	r2, [pc, #340]	@ (803337c <HAL_TIM_ConfigClockSource+0x300>)
 8033228:	4293      	cmp	r3, r2
 803322a:	f000 8288 	beq.w	803373e <HAL_TIM_ConfigClockSource+0x6c2>
 803322e:	687b      	ldr	r3, [r7, #4]
 8033230:	681b      	ldr	r3, [r3, #0]
 8033232:	4a53      	ldr	r2, [pc, #332]	@ (8033380 <HAL_TIM_ConfigClockSource+0x304>)
 8033234:	4293      	cmp	r3, r2
 8033236:	f000 8282 	beq.w	803373e <HAL_TIM_ConfigClockSource+0x6c2>
 803323a:	687b      	ldr	r3, [r7, #4]
 803323c:	681b      	ldr	r3, [r3, #0]
 803323e:	4a51      	ldr	r2, [pc, #324]	@ (8033384 <HAL_TIM_ConfigClockSource+0x308>)
 8033240:	4293      	cmp	r3, r2
 8033242:	f000 827c 	beq.w	803373e <HAL_TIM_ConfigClockSource+0x6c2>
 8033246:	f241 41cf 	movw	r1, #5327	@ 0x14cf
 803324a:	4841      	ldr	r0, [pc, #260]	@ (8033350 <HAL_TIM_ConfigClockSource+0x2d4>)
 803324c:	f7f4 fd53 	bl	8027cf6 <assert_failed>
      break;
 8033250:	e275      	b.n	803373e <HAL_TIM_ConfigClockSource+0x6c2>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8033252:	687b      	ldr	r3, [r7, #4]
 8033254:	681b      	ldr	r3, [r3, #0]
 8033256:	4a3f      	ldr	r2, [pc, #252]	@ (8033354 <HAL_TIM_ConfigClockSource+0x2d8>)
 8033258:	4293      	cmp	r3, r2
 803325a:	d027      	beq.n	80332ac <HAL_TIM_ConfigClockSource+0x230>
 803325c:	687b      	ldr	r3, [r7, #4]
 803325e:	681b      	ldr	r3, [r3, #0]
 8033260:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8033264:	d022      	beq.n	80332ac <HAL_TIM_ConfigClockSource+0x230>
 8033266:	687b      	ldr	r3, [r7, #4]
 8033268:	681b      	ldr	r3, [r3, #0]
 803326a:	4a3b      	ldr	r2, [pc, #236]	@ (8033358 <HAL_TIM_ConfigClockSource+0x2dc>)
 803326c:	4293      	cmp	r3, r2
 803326e:	d01d      	beq.n	80332ac <HAL_TIM_ConfigClockSource+0x230>
 8033270:	687b      	ldr	r3, [r7, #4]
 8033272:	681b      	ldr	r3, [r3, #0]
 8033274:	4a39      	ldr	r2, [pc, #228]	@ (803335c <HAL_TIM_ConfigClockSource+0x2e0>)
 8033276:	4293      	cmp	r3, r2
 8033278:	d018      	beq.n	80332ac <HAL_TIM_ConfigClockSource+0x230>
 803327a:	687b      	ldr	r3, [r7, #4]
 803327c:	681b      	ldr	r3, [r3, #0]
 803327e:	4a38      	ldr	r2, [pc, #224]	@ (8033360 <HAL_TIM_ConfigClockSource+0x2e4>)
 8033280:	4293      	cmp	r3, r2
 8033282:	d013      	beq.n	80332ac <HAL_TIM_ConfigClockSource+0x230>
 8033284:	687b      	ldr	r3, [r7, #4]
 8033286:	681b      	ldr	r3, [r3, #0]
 8033288:	4a38      	ldr	r2, [pc, #224]	@ (803336c <HAL_TIM_ConfigClockSource+0x2f0>)
 803328a:	4293      	cmp	r3, r2
 803328c:	d00e      	beq.n	80332ac <HAL_TIM_ConfigClockSource+0x230>
 803328e:	687b      	ldr	r3, [r7, #4]
 8033290:	681b      	ldr	r3, [r3, #0]
 8033292:	4a37      	ldr	r2, [pc, #220]	@ (8033370 <HAL_TIM_ConfigClockSource+0x2f4>)
 8033294:	4293      	cmp	r3, r2
 8033296:	d009      	beq.n	80332ac <HAL_TIM_ConfigClockSource+0x230>
 8033298:	687b      	ldr	r3, [r7, #4]
 803329a:	681b      	ldr	r3, [r3, #0]
 803329c:	4a37      	ldr	r2, [pc, #220]	@ (803337c <HAL_TIM_ConfigClockSource+0x300>)
 803329e:	4293      	cmp	r3, r2
 80332a0:	d004      	beq.n	80332ac <HAL_TIM_ConfigClockSource+0x230>
 80332a2:	f241 41d6 	movw	r1, #5334	@ 0x14d6
 80332a6:	482a      	ldr	r0, [pc, #168]	@ (8033350 <HAL_TIM_ConfigClockSource+0x2d4>)
 80332a8:	f7f4 fd25 	bl	8027cf6 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80332ac:	683b      	ldr	r3, [r7, #0]
 80332ae:	689b      	ldr	r3, [r3, #8]
 80332b0:	2b00      	cmp	r3, #0
 80332b2:	d013      	beq.n	80332dc <HAL_TIM_ConfigClockSource+0x260>
 80332b4:	683b      	ldr	r3, [r7, #0]
 80332b6:	689b      	ldr	r3, [r3, #8]
 80332b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80332bc:	d00e      	beq.n	80332dc <HAL_TIM_ConfigClockSource+0x260>
 80332be:	683b      	ldr	r3, [r7, #0]
 80332c0:	689b      	ldr	r3, [r3, #8]
 80332c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80332c6:	d009      	beq.n	80332dc <HAL_TIM_ConfigClockSource+0x260>
 80332c8:	683b      	ldr	r3, [r7, #0]
 80332ca:	689b      	ldr	r3, [r3, #8]
 80332cc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80332d0:	d004      	beq.n	80332dc <HAL_TIM_ConfigClockSource+0x260>
 80332d2:	f241 41d9 	movw	r1, #5337	@ 0x14d9
 80332d6:	481e      	ldr	r0, [pc, #120]	@ (8033350 <HAL_TIM_ConfigClockSource+0x2d4>)
 80332d8:	f7f4 fd0d 	bl	8027cf6 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80332dc:	683b      	ldr	r3, [r7, #0]
 80332de:	685b      	ldr	r3, [r3, #4]
 80332e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80332e4:	d014      	beq.n	8033310 <HAL_TIM_ConfigClockSource+0x294>
 80332e6:	683b      	ldr	r3, [r7, #0]
 80332e8:	685b      	ldr	r3, [r3, #4]
 80332ea:	2b00      	cmp	r3, #0
 80332ec:	d010      	beq.n	8033310 <HAL_TIM_ConfigClockSource+0x294>
 80332ee:	683b      	ldr	r3, [r7, #0]
 80332f0:	685b      	ldr	r3, [r3, #4]
 80332f2:	2b00      	cmp	r3, #0
 80332f4:	d00c      	beq.n	8033310 <HAL_TIM_ConfigClockSource+0x294>
 80332f6:	683b      	ldr	r3, [r7, #0]
 80332f8:	685b      	ldr	r3, [r3, #4]
 80332fa:	2b02      	cmp	r3, #2
 80332fc:	d008      	beq.n	8033310 <HAL_TIM_ConfigClockSource+0x294>
 80332fe:	683b      	ldr	r3, [r7, #0]
 8033300:	685b      	ldr	r3, [r3, #4]
 8033302:	2b0a      	cmp	r3, #10
 8033304:	d004      	beq.n	8033310 <HAL_TIM_ConfigClockSource+0x294>
 8033306:	f241 41da 	movw	r1, #5338	@ 0x14da
 803330a:	4811      	ldr	r0, [pc, #68]	@ (8033350 <HAL_TIM_ConfigClockSource+0x2d4>)
 803330c:	f7f4 fcf3 	bl	8027cf6 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8033310:	683b      	ldr	r3, [r7, #0]
 8033312:	68db      	ldr	r3, [r3, #12]
 8033314:	2b0f      	cmp	r3, #15
 8033316:	d904      	bls.n	8033322 <HAL_TIM_ConfigClockSource+0x2a6>
 8033318:	f241 41db 	movw	r1, #5339	@ 0x14db
 803331c:	480c      	ldr	r0, [pc, #48]	@ (8033350 <HAL_TIM_ConfigClockSource+0x2d4>)
 803331e:	f7f4 fcea 	bl	8027cf6 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8033322:	687b      	ldr	r3, [r7, #4]
 8033324:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8033326:	683b      	ldr	r3, [r7, #0]
 8033328:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 803332a:	683b      	ldr	r3, [r7, #0]
 803332c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 803332e:	683b      	ldr	r3, [r7, #0]
 8033330:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8033332:	f000 fba3 	bl	8033a7c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8033336:	687b      	ldr	r3, [r7, #4]
 8033338:	681b      	ldr	r3, [r3, #0]
 803333a:	689b      	ldr	r3, [r3, #8]
 803333c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 803333e:	68bb      	ldr	r3, [r7, #8]
 8033340:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8033344:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8033346:	687b      	ldr	r3, [r7, #4]
 8033348:	681b      	ldr	r3, [r3, #0]
 803334a:	68ba      	ldr	r2, [r7, #8]
 803334c:	609a      	str	r2, [r3, #8]
      break;
 803334e:	e1f7      	b.n	8033740 <HAL_TIM_ConfigClockSource+0x6c4>
 8033350:	080387d8 	.word	0x080387d8
 8033354:	40010000 	.word	0x40010000
 8033358:	40000400 	.word	0x40000400
 803335c:	40000800 	.word	0x40000800
 8033360:	40000c00 	.word	0x40000c00
 8033364:	40001000 	.word	0x40001000
 8033368:	40001400 	.word	0x40001400
 803336c:	40010400 	.word	0x40010400
 8033370:	40014000 	.word	0x40014000
 8033374:	40014400 	.word	0x40014400
 8033378:	40014800 	.word	0x40014800
 803337c:	40001800 	.word	0x40001800
 8033380:	40001c00 	.word	0x40001c00
 8033384:	40002000 	.word	0x40002000
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8033388:	687b      	ldr	r3, [r7, #4]
 803338a:	681b      	ldr	r3, [r3, #0]
 803338c:	4a67      	ldr	r2, [pc, #412]	@ (803352c <HAL_TIM_ConfigClockSource+0x4b0>)
 803338e:	4293      	cmp	r3, r2
 8033390:	d01d      	beq.n	80333ce <HAL_TIM_ConfigClockSource+0x352>
 8033392:	687b      	ldr	r3, [r7, #4]
 8033394:	681b      	ldr	r3, [r3, #0]
 8033396:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 803339a:	d018      	beq.n	80333ce <HAL_TIM_ConfigClockSource+0x352>
 803339c:	687b      	ldr	r3, [r7, #4]
 803339e:	681b      	ldr	r3, [r3, #0]
 80333a0:	4a63      	ldr	r2, [pc, #396]	@ (8033530 <HAL_TIM_ConfigClockSource+0x4b4>)
 80333a2:	4293      	cmp	r3, r2
 80333a4:	d013      	beq.n	80333ce <HAL_TIM_ConfigClockSource+0x352>
 80333a6:	687b      	ldr	r3, [r7, #4]
 80333a8:	681b      	ldr	r3, [r3, #0]
 80333aa:	4a62      	ldr	r2, [pc, #392]	@ (8033534 <HAL_TIM_ConfigClockSource+0x4b8>)
 80333ac:	4293      	cmp	r3, r2
 80333ae:	d00e      	beq.n	80333ce <HAL_TIM_ConfigClockSource+0x352>
 80333b0:	687b      	ldr	r3, [r7, #4]
 80333b2:	681b      	ldr	r3, [r3, #0]
 80333b4:	4a60      	ldr	r2, [pc, #384]	@ (8033538 <HAL_TIM_ConfigClockSource+0x4bc>)
 80333b6:	4293      	cmp	r3, r2
 80333b8:	d009      	beq.n	80333ce <HAL_TIM_ConfigClockSource+0x352>
 80333ba:	687b      	ldr	r3, [r7, #4]
 80333bc:	681b      	ldr	r3, [r3, #0]
 80333be:	4a5f      	ldr	r2, [pc, #380]	@ (803353c <HAL_TIM_ConfigClockSource+0x4c0>)
 80333c0:	4293      	cmp	r3, r2
 80333c2:	d004      	beq.n	80333ce <HAL_TIM_ConfigClockSource+0x352>
 80333c4:	f241 41ee 	movw	r1, #5358	@ 0x14ee
 80333c8:	485d      	ldr	r0, [pc, #372]	@ (8033540 <HAL_TIM_ConfigClockSource+0x4c4>)
 80333ca:	f7f4 fc94 	bl	8027cf6 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80333ce:	683b      	ldr	r3, [r7, #0]
 80333d0:	689b      	ldr	r3, [r3, #8]
 80333d2:	2b00      	cmp	r3, #0
 80333d4:	d013      	beq.n	80333fe <HAL_TIM_ConfigClockSource+0x382>
 80333d6:	683b      	ldr	r3, [r7, #0]
 80333d8:	689b      	ldr	r3, [r3, #8]
 80333da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80333de:	d00e      	beq.n	80333fe <HAL_TIM_ConfigClockSource+0x382>
 80333e0:	683b      	ldr	r3, [r7, #0]
 80333e2:	689b      	ldr	r3, [r3, #8]
 80333e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80333e8:	d009      	beq.n	80333fe <HAL_TIM_ConfigClockSource+0x382>
 80333ea:	683b      	ldr	r3, [r7, #0]
 80333ec:	689b      	ldr	r3, [r3, #8]
 80333ee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80333f2:	d004      	beq.n	80333fe <HAL_TIM_ConfigClockSource+0x382>
 80333f4:	f241 41f1 	movw	r1, #5361	@ 0x14f1
 80333f8:	4851      	ldr	r0, [pc, #324]	@ (8033540 <HAL_TIM_ConfigClockSource+0x4c4>)
 80333fa:	f7f4 fc7c 	bl	8027cf6 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80333fe:	683b      	ldr	r3, [r7, #0]
 8033400:	685b      	ldr	r3, [r3, #4]
 8033402:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8033406:	d014      	beq.n	8033432 <HAL_TIM_ConfigClockSource+0x3b6>
 8033408:	683b      	ldr	r3, [r7, #0]
 803340a:	685b      	ldr	r3, [r3, #4]
 803340c:	2b00      	cmp	r3, #0
 803340e:	d010      	beq.n	8033432 <HAL_TIM_ConfigClockSource+0x3b6>
 8033410:	683b      	ldr	r3, [r7, #0]
 8033412:	685b      	ldr	r3, [r3, #4]
 8033414:	2b00      	cmp	r3, #0
 8033416:	d00c      	beq.n	8033432 <HAL_TIM_ConfigClockSource+0x3b6>
 8033418:	683b      	ldr	r3, [r7, #0]
 803341a:	685b      	ldr	r3, [r3, #4]
 803341c:	2b02      	cmp	r3, #2
 803341e:	d008      	beq.n	8033432 <HAL_TIM_ConfigClockSource+0x3b6>
 8033420:	683b      	ldr	r3, [r7, #0]
 8033422:	685b      	ldr	r3, [r3, #4]
 8033424:	2b0a      	cmp	r3, #10
 8033426:	d004      	beq.n	8033432 <HAL_TIM_ConfigClockSource+0x3b6>
 8033428:	f241 41f2 	movw	r1, #5362	@ 0x14f2
 803342c:	4844      	ldr	r0, [pc, #272]	@ (8033540 <HAL_TIM_ConfigClockSource+0x4c4>)
 803342e:	f7f4 fc62 	bl	8027cf6 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8033432:	683b      	ldr	r3, [r7, #0]
 8033434:	68db      	ldr	r3, [r3, #12]
 8033436:	2b0f      	cmp	r3, #15
 8033438:	d904      	bls.n	8033444 <HAL_TIM_ConfigClockSource+0x3c8>
 803343a:	f241 41f3 	movw	r1, #5363	@ 0x14f3
 803343e:	4840      	ldr	r0, [pc, #256]	@ (8033540 <HAL_TIM_ConfigClockSource+0x4c4>)
 8033440:	f7f4 fc59 	bl	8027cf6 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8033444:	687b      	ldr	r3, [r7, #4]
 8033446:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8033448:	683b      	ldr	r3, [r7, #0]
 803344a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 803344c:	683b      	ldr	r3, [r7, #0]
 803344e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8033450:	683b      	ldr	r3, [r7, #0]
 8033452:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8033454:	f000 fb12 	bl	8033a7c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8033458:	687b      	ldr	r3, [r7, #4]
 803345a:	681b      	ldr	r3, [r3, #0]
 803345c:	689a      	ldr	r2, [r3, #8]
 803345e:	687b      	ldr	r3, [r7, #4]
 8033460:	681b      	ldr	r3, [r3, #0]
 8033462:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8033466:	609a      	str	r2, [r3, #8]
      break;
 8033468:	e16a      	b.n	8033740 <HAL_TIM_ConfigClockSource+0x6c4>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 803346a:	687b      	ldr	r3, [r7, #4]
 803346c:	681b      	ldr	r3, [r3, #0]
 803346e:	4a2f      	ldr	r2, [pc, #188]	@ (803352c <HAL_TIM_ConfigClockSource+0x4b0>)
 8033470:	4293      	cmp	r3, r2
 8033472:	d027      	beq.n	80334c4 <HAL_TIM_ConfigClockSource+0x448>
 8033474:	687b      	ldr	r3, [r7, #4]
 8033476:	681b      	ldr	r3, [r3, #0]
 8033478:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 803347c:	d022      	beq.n	80334c4 <HAL_TIM_ConfigClockSource+0x448>
 803347e:	687b      	ldr	r3, [r7, #4]
 8033480:	681b      	ldr	r3, [r3, #0]
 8033482:	4a2b      	ldr	r2, [pc, #172]	@ (8033530 <HAL_TIM_ConfigClockSource+0x4b4>)
 8033484:	4293      	cmp	r3, r2
 8033486:	d01d      	beq.n	80334c4 <HAL_TIM_ConfigClockSource+0x448>
 8033488:	687b      	ldr	r3, [r7, #4]
 803348a:	681b      	ldr	r3, [r3, #0]
 803348c:	4a29      	ldr	r2, [pc, #164]	@ (8033534 <HAL_TIM_ConfigClockSource+0x4b8>)
 803348e:	4293      	cmp	r3, r2
 8033490:	d018      	beq.n	80334c4 <HAL_TIM_ConfigClockSource+0x448>
 8033492:	687b      	ldr	r3, [r7, #4]
 8033494:	681b      	ldr	r3, [r3, #0]
 8033496:	4a28      	ldr	r2, [pc, #160]	@ (8033538 <HAL_TIM_ConfigClockSource+0x4bc>)
 8033498:	4293      	cmp	r3, r2
 803349a:	d013      	beq.n	80334c4 <HAL_TIM_ConfigClockSource+0x448>
 803349c:	687b      	ldr	r3, [r7, #4]
 803349e:	681b      	ldr	r3, [r3, #0]
 80334a0:	4a26      	ldr	r2, [pc, #152]	@ (803353c <HAL_TIM_ConfigClockSource+0x4c0>)
 80334a2:	4293      	cmp	r3, r2
 80334a4:	d00e      	beq.n	80334c4 <HAL_TIM_ConfigClockSource+0x448>
 80334a6:	687b      	ldr	r3, [r7, #4]
 80334a8:	681b      	ldr	r3, [r3, #0]
 80334aa:	4a26      	ldr	r2, [pc, #152]	@ (8033544 <HAL_TIM_ConfigClockSource+0x4c8>)
 80334ac:	4293      	cmp	r3, r2
 80334ae:	d009      	beq.n	80334c4 <HAL_TIM_ConfigClockSource+0x448>
 80334b0:	687b      	ldr	r3, [r7, #4]
 80334b2:	681b      	ldr	r3, [r3, #0]
 80334b4:	4a24      	ldr	r2, [pc, #144]	@ (8033548 <HAL_TIM_ConfigClockSource+0x4cc>)
 80334b6:	4293      	cmp	r3, r2
 80334b8:	d004      	beq.n	80334c4 <HAL_TIM_ConfigClockSource+0x448>
 80334ba:	f241 5102 	movw	r1, #5378	@ 0x1502
 80334be:	4820      	ldr	r0, [pc, #128]	@ (8033540 <HAL_TIM_ConfigClockSource+0x4c4>)
 80334c0:	f7f4 fc19 	bl	8027cf6 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80334c4:	683b      	ldr	r3, [r7, #0]
 80334c6:	685b      	ldr	r3, [r3, #4]
 80334c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80334cc:	d014      	beq.n	80334f8 <HAL_TIM_ConfigClockSource+0x47c>
 80334ce:	683b      	ldr	r3, [r7, #0]
 80334d0:	685b      	ldr	r3, [r3, #4]
 80334d2:	2b00      	cmp	r3, #0
 80334d4:	d010      	beq.n	80334f8 <HAL_TIM_ConfigClockSource+0x47c>
 80334d6:	683b      	ldr	r3, [r7, #0]
 80334d8:	685b      	ldr	r3, [r3, #4]
 80334da:	2b00      	cmp	r3, #0
 80334dc:	d00c      	beq.n	80334f8 <HAL_TIM_ConfigClockSource+0x47c>
 80334de:	683b      	ldr	r3, [r7, #0]
 80334e0:	685b      	ldr	r3, [r3, #4]
 80334e2:	2b02      	cmp	r3, #2
 80334e4:	d008      	beq.n	80334f8 <HAL_TIM_ConfigClockSource+0x47c>
 80334e6:	683b      	ldr	r3, [r7, #0]
 80334e8:	685b      	ldr	r3, [r3, #4]
 80334ea:	2b0a      	cmp	r3, #10
 80334ec:	d004      	beq.n	80334f8 <HAL_TIM_ConfigClockSource+0x47c>
 80334ee:	f241 5105 	movw	r1, #5381	@ 0x1505
 80334f2:	4813      	ldr	r0, [pc, #76]	@ (8033540 <HAL_TIM_ConfigClockSource+0x4c4>)
 80334f4:	f7f4 fbff 	bl	8027cf6 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80334f8:	683b      	ldr	r3, [r7, #0]
 80334fa:	68db      	ldr	r3, [r3, #12]
 80334fc:	2b0f      	cmp	r3, #15
 80334fe:	d904      	bls.n	803350a <HAL_TIM_ConfigClockSource+0x48e>
 8033500:	f241 5106 	movw	r1, #5382	@ 0x1506
 8033504:	480e      	ldr	r0, [pc, #56]	@ (8033540 <HAL_TIM_ConfigClockSource+0x4c4>)
 8033506:	f7f4 fbf6 	bl	8027cf6 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 803350a:	687b      	ldr	r3, [r7, #4]
 803350c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 803350e:	683b      	ldr	r3, [r7, #0]
 8033510:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8033512:	683b      	ldr	r3, [r7, #0]
 8033514:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8033516:	461a      	mov	r2, r3
 8033518:	f000 fa36 	bl	8033988 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 803351c:	687b      	ldr	r3, [r7, #4]
 803351e:	681b      	ldr	r3, [r3, #0]
 8033520:	2150      	movs	r1, #80	@ 0x50
 8033522:	4618      	mov	r0, r3
 8033524:	f000 fa8f 	bl	8033a46 <TIM_ITRx_SetConfig>
      break;
 8033528:	e10a      	b.n	8033740 <HAL_TIM_ConfigClockSource+0x6c4>
 803352a:	bf00      	nop
 803352c:	40010000 	.word	0x40010000
 8033530:	40000400 	.word	0x40000400
 8033534:	40000800 	.word	0x40000800
 8033538:	40000c00 	.word	0x40000c00
 803353c:	40010400 	.word	0x40010400
 8033540:	080387d8 	.word	0x080387d8
 8033544:	40014000 	.word	0x40014000
 8033548:	40001800 	.word	0x40001800
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 803354c:	687b      	ldr	r3, [r7, #4]
 803354e:	681b      	ldr	r3, [r3, #0]
 8033550:	4a82      	ldr	r2, [pc, #520]	@ (803375c <HAL_TIM_ConfigClockSource+0x6e0>)
 8033552:	4293      	cmp	r3, r2
 8033554:	d027      	beq.n	80335a6 <HAL_TIM_ConfigClockSource+0x52a>
 8033556:	687b      	ldr	r3, [r7, #4]
 8033558:	681b      	ldr	r3, [r3, #0]
 803355a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 803355e:	d022      	beq.n	80335a6 <HAL_TIM_ConfigClockSource+0x52a>
 8033560:	687b      	ldr	r3, [r7, #4]
 8033562:	681b      	ldr	r3, [r3, #0]
 8033564:	4a7e      	ldr	r2, [pc, #504]	@ (8033760 <HAL_TIM_ConfigClockSource+0x6e4>)
 8033566:	4293      	cmp	r3, r2
 8033568:	d01d      	beq.n	80335a6 <HAL_TIM_ConfigClockSource+0x52a>
 803356a:	687b      	ldr	r3, [r7, #4]
 803356c:	681b      	ldr	r3, [r3, #0]
 803356e:	4a7d      	ldr	r2, [pc, #500]	@ (8033764 <HAL_TIM_ConfigClockSource+0x6e8>)
 8033570:	4293      	cmp	r3, r2
 8033572:	d018      	beq.n	80335a6 <HAL_TIM_ConfigClockSource+0x52a>
 8033574:	687b      	ldr	r3, [r7, #4]
 8033576:	681b      	ldr	r3, [r3, #0]
 8033578:	4a7b      	ldr	r2, [pc, #492]	@ (8033768 <HAL_TIM_ConfigClockSource+0x6ec>)
 803357a:	4293      	cmp	r3, r2
 803357c:	d013      	beq.n	80335a6 <HAL_TIM_ConfigClockSource+0x52a>
 803357e:	687b      	ldr	r3, [r7, #4]
 8033580:	681b      	ldr	r3, [r3, #0]
 8033582:	4a7a      	ldr	r2, [pc, #488]	@ (803376c <HAL_TIM_ConfigClockSource+0x6f0>)
 8033584:	4293      	cmp	r3, r2
 8033586:	d00e      	beq.n	80335a6 <HAL_TIM_ConfigClockSource+0x52a>
 8033588:	687b      	ldr	r3, [r7, #4]
 803358a:	681b      	ldr	r3, [r3, #0]
 803358c:	4a78      	ldr	r2, [pc, #480]	@ (8033770 <HAL_TIM_ConfigClockSource+0x6f4>)
 803358e:	4293      	cmp	r3, r2
 8033590:	d009      	beq.n	80335a6 <HAL_TIM_ConfigClockSource+0x52a>
 8033592:	687b      	ldr	r3, [r7, #4]
 8033594:	681b      	ldr	r3, [r3, #0]
 8033596:	4a77      	ldr	r2, [pc, #476]	@ (8033774 <HAL_TIM_ConfigClockSource+0x6f8>)
 8033598:	4293      	cmp	r3, r2
 803359a:	d004      	beq.n	80335a6 <HAL_TIM_ConfigClockSource+0x52a>
 803359c:	f241 5112 	movw	r1, #5394	@ 0x1512
 80335a0:	4875      	ldr	r0, [pc, #468]	@ (8033778 <HAL_TIM_ConfigClockSource+0x6fc>)
 80335a2:	f7f4 fba8 	bl	8027cf6 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80335a6:	683b      	ldr	r3, [r7, #0]
 80335a8:	685b      	ldr	r3, [r3, #4]
 80335aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80335ae:	d014      	beq.n	80335da <HAL_TIM_ConfigClockSource+0x55e>
 80335b0:	683b      	ldr	r3, [r7, #0]
 80335b2:	685b      	ldr	r3, [r3, #4]
 80335b4:	2b00      	cmp	r3, #0
 80335b6:	d010      	beq.n	80335da <HAL_TIM_ConfigClockSource+0x55e>
 80335b8:	683b      	ldr	r3, [r7, #0]
 80335ba:	685b      	ldr	r3, [r3, #4]
 80335bc:	2b00      	cmp	r3, #0
 80335be:	d00c      	beq.n	80335da <HAL_TIM_ConfigClockSource+0x55e>
 80335c0:	683b      	ldr	r3, [r7, #0]
 80335c2:	685b      	ldr	r3, [r3, #4]
 80335c4:	2b02      	cmp	r3, #2
 80335c6:	d008      	beq.n	80335da <HAL_TIM_ConfigClockSource+0x55e>
 80335c8:	683b      	ldr	r3, [r7, #0]
 80335ca:	685b      	ldr	r3, [r3, #4]
 80335cc:	2b0a      	cmp	r3, #10
 80335ce:	d004      	beq.n	80335da <HAL_TIM_ConfigClockSource+0x55e>
 80335d0:	f241 5115 	movw	r1, #5397	@ 0x1515
 80335d4:	4868      	ldr	r0, [pc, #416]	@ (8033778 <HAL_TIM_ConfigClockSource+0x6fc>)
 80335d6:	f7f4 fb8e 	bl	8027cf6 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80335da:	683b      	ldr	r3, [r7, #0]
 80335dc:	68db      	ldr	r3, [r3, #12]
 80335de:	2b0f      	cmp	r3, #15
 80335e0:	d904      	bls.n	80335ec <HAL_TIM_ConfigClockSource+0x570>
 80335e2:	f241 5116 	movw	r1, #5398	@ 0x1516
 80335e6:	4864      	ldr	r0, [pc, #400]	@ (8033778 <HAL_TIM_ConfigClockSource+0x6fc>)
 80335e8:	f7f4 fb85 	bl	8027cf6 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 80335ec:	687b      	ldr	r3, [r7, #4]
 80335ee:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80335f0:	683b      	ldr	r3, [r7, #0]
 80335f2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80335f4:	683b      	ldr	r3, [r7, #0]
 80335f6:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80335f8:	461a      	mov	r2, r3
 80335fa:	f000 f9f4 	bl	80339e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80335fe:	687b      	ldr	r3, [r7, #4]
 8033600:	681b      	ldr	r3, [r3, #0]
 8033602:	2160      	movs	r1, #96	@ 0x60
 8033604:	4618      	mov	r0, r3
 8033606:	f000 fa1e 	bl	8033a46 <TIM_ITRx_SetConfig>
      break;
 803360a:	e099      	b.n	8033740 <HAL_TIM_ConfigClockSource+0x6c4>
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 803360c:	687b      	ldr	r3, [r7, #4]
 803360e:	681b      	ldr	r3, [r3, #0]
 8033610:	4a52      	ldr	r2, [pc, #328]	@ (803375c <HAL_TIM_ConfigClockSource+0x6e0>)
 8033612:	4293      	cmp	r3, r2
 8033614:	d027      	beq.n	8033666 <HAL_TIM_ConfigClockSource+0x5ea>
 8033616:	687b      	ldr	r3, [r7, #4]
 8033618:	681b      	ldr	r3, [r3, #0]
 803361a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 803361e:	d022      	beq.n	8033666 <HAL_TIM_ConfigClockSource+0x5ea>
 8033620:	687b      	ldr	r3, [r7, #4]
 8033622:	681b      	ldr	r3, [r3, #0]
 8033624:	4a4e      	ldr	r2, [pc, #312]	@ (8033760 <HAL_TIM_ConfigClockSource+0x6e4>)
 8033626:	4293      	cmp	r3, r2
 8033628:	d01d      	beq.n	8033666 <HAL_TIM_ConfigClockSource+0x5ea>
 803362a:	687b      	ldr	r3, [r7, #4]
 803362c:	681b      	ldr	r3, [r3, #0]
 803362e:	4a4d      	ldr	r2, [pc, #308]	@ (8033764 <HAL_TIM_ConfigClockSource+0x6e8>)
 8033630:	4293      	cmp	r3, r2
 8033632:	d018      	beq.n	8033666 <HAL_TIM_ConfigClockSource+0x5ea>
 8033634:	687b      	ldr	r3, [r7, #4]
 8033636:	681b      	ldr	r3, [r3, #0]
 8033638:	4a4b      	ldr	r2, [pc, #300]	@ (8033768 <HAL_TIM_ConfigClockSource+0x6ec>)
 803363a:	4293      	cmp	r3, r2
 803363c:	d013      	beq.n	8033666 <HAL_TIM_ConfigClockSource+0x5ea>
 803363e:	687b      	ldr	r3, [r7, #4]
 8033640:	681b      	ldr	r3, [r3, #0]
 8033642:	4a4a      	ldr	r2, [pc, #296]	@ (803376c <HAL_TIM_ConfigClockSource+0x6f0>)
 8033644:	4293      	cmp	r3, r2
 8033646:	d00e      	beq.n	8033666 <HAL_TIM_ConfigClockSource+0x5ea>
 8033648:	687b      	ldr	r3, [r7, #4]
 803364a:	681b      	ldr	r3, [r3, #0]
 803364c:	4a48      	ldr	r2, [pc, #288]	@ (8033770 <HAL_TIM_ConfigClockSource+0x6f4>)
 803364e:	4293      	cmp	r3, r2
 8033650:	d009      	beq.n	8033666 <HAL_TIM_ConfigClockSource+0x5ea>
 8033652:	687b      	ldr	r3, [r7, #4]
 8033654:	681b      	ldr	r3, [r3, #0]
 8033656:	4a47      	ldr	r2, [pc, #284]	@ (8033774 <HAL_TIM_ConfigClockSource+0x6f8>)
 8033658:	4293      	cmp	r3, r2
 803365a:	d004      	beq.n	8033666 <HAL_TIM_ConfigClockSource+0x5ea>
 803365c:	f241 5122 	movw	r1, #5410	@ 0x1522
 8033660:	4845      	ldr	r0, [pc, #276]	@ (8033778 <HAL_TIM_ConfigClockSource+0x6fc>)
 8033662:	f7f4 fb48 	bl	8027cf6 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8033666:	683b      	ldr	r3, [r7, #0]
 8033668:	685b      	ldr	r3, [r3, #4]
 803366a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 803366e:	d014      	beq.n	803369a <HAL_TIM_ConfigClockSource+0x61e>
 8033670:	683b      	ldr	r3, [r7, #0]
 8033672:	685b      	ldr	r3, [r3, #4]
 8033674:	2b00      	cmp	r3, #0
 8033676:	d010      	beq.n	803369a <HAL_TIM_ConfigClockSource+0x61e>
 8033678:	683b      	ldr	r3, [r7, #0]
 803367a:	685b      	ldr	r3, [r3, #4]
 803367c:	2b00      	cmp	r3, #0
 803367e:	d00c      	beq.n	803369a <HAL_TIM_ConfigClockSource+0x61e>
 8033680:	683b      	ldr	r3, [r7, #0]
 8033682:	685b      	ldr	r3, [r3, #4]
 8033684:	2b02      	cmp	r3, #2
 8033686:	d008      	beq.n	803369a <HAL_TIM_ConfigClockSource+0x61e>
 8033688:	683b      	ldr	r3, [r7, #0]
 803368a:	685b      	ldr	r3, [r3, #4]
 803368c:	2b0a      	cmp	r3, #10
 803368e:	d004      	beq.n	803369a <HAL_TIM_ConfigClockSource+0x61e>
 8033690:	f241 5125 	movw	r1, #5413	@ 0x1525
 8033694:	4838      	ldr	r0, [pc, #224]	@ (8033778 <HAL_TIM_ConfigClockSource+0x6fc>)
 8033696:	f7f4 fb2e 	bl	8027cf6 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 803369a:	683b      	ldr	r3, [r7, #0]
 803369c:	68db      	ldr	r3, [r3, #12]
 803369e:	2b0f      	cmp	r3, #15
 80336a0:	d904      	bls.n	80336ac <HAL_TIM_ConfigClockSource+0x630>
 80336a2:	f241 5126 	movw	r1, #5414	@ 0x1526
 80336a6:	4834      	ldr	r0, [pc, #208]	@ (8033778 <HAL_TIM_ConfigClockSource+0x6fc>)
 80336a8:	f7f4 fb25 	bl	8027cf6 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 80336ac:	687b      	ldr	r3, [r7, #4]
 80336ae:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80336b0:	683b      	ldr	r3, [r7, #0]
 80336b2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80336b4:	683b      	ldr	r3, [r7, #0]
 80336b6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80336b8:	461a      	mov	r2, r3
 80336ba:	f000 f965 	bl	8033988 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80336be:	687b      	ldr	r3, [r7, #4]
 80336c0:	681b      	ldr	r3, [r3, #0]
 80336c2:	2140      	movs	r1, #64	@ 0x40
 80336c4:	4618      	mov	r0, r3
 80336c6:	f000 f9be 	bl	8033a46 <TIM_ITRx_SetConfig>
      break;
 80336ca:	e039      	b.n	8033740 <HAL_TIM_ConfigClockSource+0x6c4>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 80336cc:	687b      	ldr	r3, [r7, #4]
 80336ce:	681b      	ldr	r3, [r3, #0]
 80336d0:	4a22      	ldr	r2, [pc, #136]	@ (803375c <HAL_TIM_ConfigClockSource+0x6e0>)
 80336d2:	4293      	cmp	r3, r2
 80336d4:	d027      	beq.n	8033726 <HAL_TIM_ConfigClockSource+0x6aa>
 80336d6:	687b      	ldr	r3, [r7, #4]
 80336d8:	681b      	ldr	r3, [r3, #0]
 80336da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80336de:	d022      	beq.n	8033726 <HAL_TIM_ConfigClockSource+0x6aa>
 80336e0:	687b      	ldr	r3, [r7, #4]
 80336e2:	681b      	ldr	r3, [r3, #0]
 80336e4:	4a1e      	ldr	r2, [pc, #120]	@ (8033760 <HAL_TIM_ConfigClockSource+0x6e4>)
 80336e6:	4293      	cmp	r3, r2
 80336e8:	d01d      	beq.n	8033726 <HAL_TIM_ConfigClockSource+0x6aa>
 80336ea:	687b      	ldr	r3, [r7, #4]
 80336ec:	681b      	ldr	r3, [r3, #0]
 80336ee:	4a1d      	ldr	r2, [pc, #116]	@ (8033764 <HAL_TIM_ConfigClockSource+0x6e8>)
 80336f0:	4293      	cmp	r3, r2
 80336f2:	d018      	beq.n	8033726 <HAL_TIM_ConfigClockSource+0x6aa>
 80336f4:	687b      	ldr	r3, [r7, #4]
 80336f6:	681b      	ldr	r3, [r3, #0]
 80336f8:	4a1b      	ldr	r2, [pc, #108]	@ (8033768 <HAL_TIM_ConfigClockSource+0x6ec>)
 80336fa:	4293      	cmp	r3, r2
 80336fc:	d013      	beq.n	8033726 <HAL_TIM_ConfigClockSource+0x6aa>
 80336fe:	687b      	ldr	r3, [r7, #4]
 8033700:	681b      	ldr	r3, [r3, #0]
 8033702:	4a1a      	ldr	r2, [pc, #104]	@ (803376c <HAL_TIM_ConfigClockSource+0x6f0>)
 8033704:	4293      	cmp	r3, r2
 8033706:	d00e      	beq.n	8033726 <HAL_TIM_ConfigClockSource+0x6aa>
 8033708:	687b      	ldr	r3, [r7, #4]
 803370a:	681b      	ldr	r3, [r3, #0]
 803370c:	4a18      	ldr	r2, [pc, #96]	@ (8033770 <HAL_TIM_ConfigClockSource+0x6f4>)
 803370e:	4293      	cmp	r3, r2
 8033710:	d009      	beq.n	8033726 <HAL_TIM_ConfigClockSource+0x6aa>
 8033712:	687b      	ldr	r3, [r7, #4]
 8033714:	681b      	ldr	r3, [r3, #0]
 8033716:	4a17      	ldr	r2, [pc, #92]	@ (8033774 <HAL_TIM_ConfigClockSource+0x6f8>)
 8033718:	4293      	cmp	r3, r2
 803371a:	d004      	beq.n	8033726 <HAL_TIM_ConfigClockSource+0x6aa>
 803371c:	f241 5135 	movw	r1, #5429	@ 0x1535
 8033720:	4815      	ldr	r0, [pc, #84]	@ (8033778 <HAL_TIM_ConfigClockSource+0x6fc>)
 8033722:	f7f4 fae8 	bl	8027cf6 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8033726:	687b      	ldr	r3, [r7, #4]
 8033728:	681a      	ldr	r2, [r3, #0]
 803372a:	683b      	ldr	r3, [r7, #0]
 803372c:	681b      	ldr	r3, [r3, #0]
 803372e:	4619      	mov	r1, r3
 8033730:	4610      	mov	r0, r2
 8033732:	f000 f988 	bl	8033a46 <TIM_ITRx_SetConfig>
      break;
 8033736:	e003      	b.n	8033740 <HAL_TIM_ConfigClockSource+0x6c4>
    }

    default:
      status = HAL_ERROR;
 8033738:	2301      	movs	r3, #1
 803373a:	73fb      	strb	r3, [r7, #15]
      break;
 803373c:	e000      	b.n	8033740 <HAL_TIM_ConfigClockSource+0x6c4>
      break;
 803373e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8033740:	687b      	ldr	r3, [r7, #4]
 8033742:	2201      	movs	r2, #1
 8033744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8033748:	687b      	ldr	r3, [r7, #4]
 803374a:	2200      	movs	r2, #0
 803374c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8033750:	7bfb      	ldrb	r3, [r7, #15]
}
 8033752:	4618      	mov	r0, r3
 8033754:	3710      	adds	r7, #16
 8033756:	46bd      	mov	sp, r7
 8033758:	bd80      	pop	{r7, pc}
 803375a:	bf00      	nop
 803375c:	40010000 	.word	0x40010000
 8033760:	40000400 	.word	0x40000400
 8033764:	40000800 	.word	0x40000800
 8033768:	40000c00 	.word	0x40000c00
 803376c:	40010400 	.word	0x40010400
 8033770:	40014000 	.word	0x40014000
 8033774:	40001800 	.word	0x40001800
 8033778:	080387d8 	.word	0x080387d8

0803377c <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 803377c:	b480      	push	{r7}
 803377e:	b083      	sub	sp, #12
 8033780:	af00      	add	r7, sp, #0
 8033782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8033784:	bf00      	nop
 8033786:	370c      	adds	r7, #12
 8033788:	46bd      	mov	sp, r7
 803378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803378e:	4770      	bx	lr

08033790 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8033790:	b480      	push	{r7}
 8033792:	b083      	sub	sp, #12
 8033794:	af00      	add	r7, sp, #0
 8033796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8033798:	bf00      	nop
 803379a:	370c      	adds	r7, #12
 803379c:	46bd      	mov	sp, r7
 803379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80337a2:	4770      	bx	lr

080337a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80337a4:	b480      	push	{r7}
 80337a6:	b083      	sub	sp, #12
 80337a8:	af00      	add	r7, sp, #0
 80337aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80337ac:	bf00      	nop
 80337ae:	370c      	adds	r7, #12
 80337b0:	46bd      	mov	sp, r7
 80337b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80337b6:	4770      	bx	lr

080337b8 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80337b8:	b480      	push	{r7}
 80337ba:	b083      	sub	sp, #12
 80337bc:	af00      	add	r7, sp, #0
 80337be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80337c0:	bf00      	nop
 80337c2:	370c      	adds	r7, #12
 80337c4:	46bd      	mov	sp, r7
 80337c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80337ca:	4770      	bx	lr

080337cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80337cc:	b480      	push	{r7}
 80337ce:	b083      	sub	sp, #12
 80337d0:	af00      	add	r7, sp, #0
 80337d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80337d4:	bf00      	nop
 80337d6:	370c      	adds	r7, #12
 80337d8:	46bd      	mov	sp, r7
 80337da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80337de:	4770      	bx	lr

080337e0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80337e0:	b480      	push	{r7}
 80337e2:	b083      	sub	sp, #12
 80337e4:	af00      	add	r7, sp, #0
 80337e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80337e8:	bf00      	nop
 80337ea:	370c      	adds	r7, #12
 80337ec:	46bd      	mov	sp, r7
 80337ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80337f2:	4770      	bx	lr

080337f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80337f4:	b480      	push	{r7}
 80337f6:	b083      	sub	sp, #12
 80337f8:	af00      	add	r7, sp, #0
 80337fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80337fc:	bf00      	nop
 80337fe:	370c      	adds	r7, #12
 8033800:	46bd      	mov	sp, r7
 8033802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033806:	4770      	bx	lr

08033808 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8033808:	b480      	push	{r7}
 803380a:	b083      	sub	sp, #12
 803380c:	af00      	add	r7, sp, #0
 803380e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8033810:	bf00      	nop
 8033812:	370c      	adds	r7, #12
 8033814:	46bd      	mov	sp, r7
 8033816:	f85d 7b04 	ldr.w	r7, [sp], #4
 803381a:	4770      	bx	lr

0803381c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 803381c:	b480      	push	{r7}
 803381e:	b083      	sub	sp, #12
 8033820:	af00      	add	r7, sp, #0
 8033822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8033824:	bf00      	nop
 8033826:	370c      	adds	r7, #12
 8033828:	46bd      	mov	sp, r7
 803382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803382e:	4770      	bx	lr

08033830 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8033830:	b480      	push	{r7}
 8033832:	b085      	sub	sp, #20
 8033834:	af00      	add	r7, sp, #0
 8033836:	6078      	str	r0, [r7, #4]
 8033838:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 803383a:	687b      	ldr	r3, [r7, #4]
 803383c:	681b      	ldr	r3, [r3, #0]
 803383e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8033840:	687b      	ldr	r3, [r7, #4]
 8033842:	4a46      	ldr	r2, [pc, #280]	@ (803395c <TIM_Base_SetConfig+0x12c>)
 8033844:	4293      	cmp	r3, r2
 8033846:	d013      	beq.n	8033870 <TIM_Base_SetConfig+0x40>
 8033848:	687b      	ldr	r3, [r7, #4]
 803384a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 803384e:	d00f      	beq.n	8033870 <TIM_Base_SetConfig+0x40>
 8033850:	687b      	ldr	r3, [r7, #4]
 8033852:	4a43      	ldr	r2, [pc, #268]	@ (8033960 <TIM_Base_SetConfig+0x130>)
 8033854:	4293      	cmp	r3, r2
 8033856:	d00b      	beq.n	8033870 <TIM_Base_SetConfig+0x40>
 8033858:	687b      	ldr	r3, [r7, #4]
 803385a:	4a42      	ldr	r2, [pc, #264]	@ (8033964 <TIM_Base_SetConfig+0x134>)
 803385c:	4293      	cmp	r3, r2
 803385e:	d007      	beq.n	8033870 <TIM_Base_SetConfig+0x40>
 8033860:	687b      	ldr	r3, [r7, #4]
 8033862:	4a41      	ldr	r2, [pc, #260]	@ (8033968 <TIM_Base_SetConfig+0x138>)
 8033864:	4293      	cmp	r3, r2
 8033866:	d003      	beq.n	8033870 <TIM_Base_SetConfig+0x40>
 8033868:	687b      	ldr	r3, [r7, #4]
 803386a:	4a40      	ldr	r2, [pc, #256]	@ (803396c <TIM_Base_SetConfig+0x13c>)
 803386c:	4293      	cmp	r3, r2
 803386e:	d108      	bne.n	8033882 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8033870:	68fb      	ldr	r3, [r7, #12]
 8033872:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8033876:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8033878:	683b      	ldr	r3, [r7, #0]
 803387a:	685b      	ldr	r3, [r3, #4]
 803387c:	68fa      	ldr	r2, [r7, #12]
 803387e:	4313      	orrs	r3, r2
 8033880:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8033882:	687b      	ldr	r3, [r7, #4]
 8033884:	4a35      	ldr	r2, [pc, #212]	@ (803395c <TIM_Base_SetConfig+0x12c>)
 8033886:	4293      	cmp	r3, r2
 8033888:	d02b      	beq.n	80338e2 <TIM_Base_SetConfig+0xb2>
 803388a:	687b      	ldr	r3, [r7, #4]
 803388c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8033890:	d027      	beq.n	80338e2 <TIM_Base_SetConfig+0xb2>
 8033892:	687b      	ldr	r3, [r7, #4]
 8033894:	4a32      	ldr	r2, [pc, #200]	@ (8033960 <TIM_Base_SetConfig+0x130>)
 8033896:	4293      	cmp	r3, r2
 8033898:	d023      	beq.n	80338e2 <TIM_Base_SetConfig+0xb2>
 803389a:	687b      	ldr	r3, [r7, #4]
 803389c:	4a31      	ldr	r2, [pc, #196]	@ (8033964 <TIM_Base_SetConfig+0x134>)
 803389e:	4293      	cmp	r3, r2
 80338a0:	d01f      	beq.n	80338e2 <TIM_Base_SetConfig+0xb2>
 80338a2:	687b      	ldr	r3, [r7, #4]
 80338a4:	4a30      	ldr	r2, [pc, #192]	@ (8033968 <TIM_Base_SetConfig+0x138>)
 80338a6:	4293      	cmp	r3, r2
 80338a8:	d01b      	beq.n	80338e2 <TIM_Base_SetConfig+0xb2>
 80338aa:	687b      	ldr	r3, [r7, #4]
 80338ac:	4a2f      	ldr	r2, [pc, #188]	@ (803396c <TIM_Base_SetConfig+0x13c>)
 80338ae:	4293      	cmp	r3, r2
 80338b0:	d017      	beq.n	80338e2 <TIM_Base_SetConfig+0xb2>
 80338b2:	687b      	ldr	r3, [r7, #4]
 80338b4:	4a2e      	ldr	r2, [pc, #184]	@ (8033970 <TIM_Base_SetConfig+0x140>)
 80338b6:	4293      	cmp	r3, r2
 80338b8:	d013      	beq.n	80338e2 <TIM_Base_SetConfig+0xb2>
 80338ba:	687b      	ldr	r3, [r7, #4]
 80338bc:	4a2d      	ldr	r2, [pc, #180]	@ (8033974 <TIM_Base_SetConfig+0x144>)
 80338be:	4293      	cmp	r3, r2
 80338c0:	d00f      	beq.n	80338e2 <TIM_Base_SetConfig+0xb2>
 80338c2:	687b      	ldr	r3, [r7, #4]
 80338c4:	4a2c      	ldr	r2, [pc, #176]	@ (8033978 <TIM_Base_SetConfig+0x148>)
 80338c6:	4293      	cmp	r3, r2
 80338c8:	d00b      	beq.n	80338e2 <TIM_Base_SetConfig+0xb2>
 80338ca:	687b      	ldr	r3, [r7, #4]
 80338cc:	4a2b      	ldr	r2, [pc, #172]	@ (803397c <TIM_Base_SetConfig+0x14c>)
 80338ce:	4293      	cmp	r3, r2
 80338d0:	d007      	beq.n	80338e2 <TIM_Base_SetConfig+0xb2>
 80338d2:	687b      	ldr	r3, [r7, #4]
 80338d4:	4a2a      	ldr	r2, [pc, #168]	@ (8033980 <TIM_Base_SetConfig+0x150>)
 80338d6:	4293      	cmp	r3, r2
 80338d8:	d003      	beq.n	80338e2 <TIM_Base_SetConfig+0xb2>
 80338da:	687b      	ldr	r3, [r7, #4]
 80338dc:	4a29      	ldr	r2, [pc, #164]	@ (8033984 <TIM_Base_SetConfig+0x154>)
 80338de:	4293      	cmp	r3, r2
 80338e0:	d108      	bne.n	80338f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80338e2:	68fb      	ldr	r3, [r7, #12]
 80338e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80338e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80338ea:	683b      	ldr	r3, [r7, #0]
 80338ec:	68db      	ldr	r3, [r3, #12]
 80338ee:	68fa      	ldr	r2, [r7, #12]
 80338f0:	4313      	orrs	r3, r2
 80338f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80338f4:	68fb      	ldr	r3, [r7, #12]
 80338f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80338fa:	683b      	ldr	r3, [r7, #0]
 80338fc:	695b      	ldr	r3, [r3, #20]
 80338fe:	4313      	orrs	r3, r2
 8033900:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8033902:	687b      	ldr	r3, [r7, #4]
 8033904:	68fa      	ldr	r2, [r7, #12]
 8033906:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8033908:	683b      	ldr	r3, [r7, #0]
 803390a:	689a      	ldr	r2, [r3, #8]
 803390c:	687b      	ldr	r3, [r7, #4]
 803390e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8033910:	683b      	ldr	r3, [r7, #0]
 8033912:	681a      	ldr	r2, [r3, #0]
 8033914:	687b      	ldr	r3, [r7, #4]
 8033916:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8033918:	687b      	ldr	r3, [r7, #4]
 803391a:	4a10      	ldr	r2, [pc, #64]	@ (803395c <TIM_Base_SetConfig+0x12c>)
 803391c:	4293      	cmp	r3, r2
 803391e:	d003      	beq.n	8033928 <TIM_Base_SetConfig+0xf8>
 8033920:	687b      	ldr	r3, [r7, #4]
 8033922:	4a12      	ldr	r2, [pc, #72]	@ (803396c <TIM_Base_SetConfig+0x13c>)
 8033924:	4293      	cmp	r3, r2
 8033926:	d103      	bne.n	8033930 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8033928:	683b      	ldr	r3, [r7, #0]
 803392a:	691a      	ldr	r2, [r3, #16]
 803392c:	687b      	ldr	r3, [r7, #4]
 803392e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8033930:	687b      	ldr	r3, [r7, #4]
 8033932:	2201      	movs	r2, #1
 8033934:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8033936:	687b      	ldr	r3, [r7, #4]
 8033938:	691b      	ldr	r3, [r3, #16]
 803393a:	f003 0301 	and.w	r3, r3, #1
 803393e:	2b01      	cmp	r3, #1
 8033940:	d105      	bne.n	803394e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8033942:	687b      	ldr	r3, [r7, #4]
 8033944:	691b      	ldr	r3, [r3, #16]
 8033946:	f023 0201 	bic.w	r2, r3, #1
 803394a:	687b      	ldr	r3, [r7, #4]
 803394c:	611a      	str	r2, [r3, #16]
  }
}
 803394e:	bf00      	nop
 8033950:	3714      	adds	r7, #20
 8033952:	46bd      	mov	sp, r7
 8033954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033958:	4770      	bx	lr
 803395a:	bf00      	nop
 803395c:	40010000 	.word	0x40010000
 8033960:	40000400 	.word	0x40000400
 8033964:	40000800 	.word	0x40000800
 8033968:	40000c00 	.word	0x40000c00
 803396c:	40010400 	.word	0x40010400
 8033970:	40014000 	.word	0x40014000
 8033974:	40014400 	.word	0x40014400
 8033978:	40014800 	.word	0x40014800
 803397c:	40001800 	.word	0x40001800
 8033980:	40001c00 	.word	0x40001c00
 8033984:	40002000 	.word	0x40002000

08033988 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8033988:	b480      	push	{r7}
 803398a:	b087      	sub	sp, #28
 803398c:	af00      	add	r7, sp, #0
 803398e:	60f8      	str	r0, [r7, #12]
 8033990:	60b9      	str	r1, [r7, #8]
 8033992:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8033994:	68fb      	ldr	r3, [r7, #12]
 8033996:	6a1b      	ldr	r3, [r3, #32]
 8033998:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 803399a:	68fb      	ldr	r3, [r7, #12]
 803399c:	6a1b      	ldr	r3, [r3, #32]
 803399e:	f023 0201 	bic.w	r2, r3, #1
 80339a2:	68fb      	ldr	r3, [r7, #12]
 80339a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80339a6:	68fb      	ldr	r3, [r7, #12]
 80339a8:	699b      	ldr	r3, [r3, #24]
 80339aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80339ac:	693b      	ldr	r3, [r7, #16]
 80339ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80339b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80339b4:	687b      	ldr	r3, [r7, #4]
 80339b6:	011b      	lsls	r3, r3, #4
 80339b8:	693a      	ldr	r2, [r7, #16]
 80339ba:	4313      	orrs	r3, r2
 80339bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80339be:	697b      	ldr	r3, [r7, #20]
 80339c0:	f023 030a 	bic.w	r3, r3, #10
 80339c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80339c6:	697a      	ldr	r2, [r7, #20]
 80339c8:	68bb      	ldr	r3, [r7, #8]
 80339ca:	4313      	orrs	r3, r2
 80339cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80339ce:	68fb      	ldr	r3, [r7, #12]
 80339d0:	693a      	ldr	r2, [r7, #16]
 80339d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80339d4:	68fb      	ldr	r3, [r7, #12]
 80339d6:	697a      	ldr	r2, [r7, #20]
 80339d8:	621a      	str	r2, [r3, #32]
}
 80339da:	bf00      	nop
 80339dc:	371c      	adds	r7, #28
 80339de:	46bd      	mov	sp, r7
 80339e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80339e4:	4770      	bx	lr

080339e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80339e6:	b480      	push	{r7}
 80339e8:	b087      	sub	sp, #28
 80339ea:	af00      	add	r7, sp, #0
 80339ec:	60f8      	str	r0, [r7, #12]
 80339ee:	60b9      	str	r1, [r7, #8]
 80339f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80339f2:	68fb      	ldr	r3, [r7, #12]
 80339f4:	6a1b      	ldr	r3, [r3, #32]
 80339f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80339f8:	68fb      	ldr	r3, [r7, #12]
 80339fa:	6a1b      	ldr	r3, [r3, #32]
 80339fc:	f023 0210 	bic.w	r2, r3, #16
 8033a00:	68fb      	ldr	r3, [r7, #12]
 8033a02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8033a04:	68fb      	ldr	r3, [r7, #12]
 8033a06:	699b      	ldr	r3, [r3, #24]
 8033a08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8033a0a:	693b      	ldr	r3, [r7, #16]
 8033a0c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8033a10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8033a12:	687b      	ldr	r3, [r7, #4]
 8033a14:	031b      	lsls	r3, r3, #12
 8033a16:	693a      	ldr	r2, [r7, #16]
 8033a18:	4313      	orrs	r3, r2
 8033a1a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8033a1c:	697b      	ldr	r3, [r7, #20]
 8033a1e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8033a22:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8033a24:	68bb      	ldr	r3, [r7, #8]
 8033a26:	011b      	lsls	r3, r3, #4
 8033a28:	697a      	ldr	r2, [r7, #20]
 8033a2a:	4313      	orrs	r3, r2
 8033a2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8033a2e:	68fb      	ldr	r3, [r7, #12]
 8033a30:	693a      	ldr	r2, [r7, #16]
 8033a32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8033a34:	68fb      	ldr	r3, [r7, #12]
 8033a36:	697a      	ldr	r2, [r7, #20]
 8033a38:	621a      	str	r2, [r3, #32]
}
 8033a3a:	bf00      	nop
 8033a3c:	371c      	adds	r7, #28
 8033a3e:	46bd      	mov	sp, r7
 8033a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033a44:	4770      	bx	lr

08033a46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8033a46:	b480      	push	{r7}
 8033a48:	b085      	sub	sp, #20
 8033a4a:	af00      	add	r7, sp, #0
 8033a4c:	6078      	str	r0, [r7, #4]
 8033a4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8033a50:	687b      	ldr	r3, [r7, #4]
 8033a52:	689b      	ldr	r3, [r3, #8]
 8033a54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8033a56:	68fb      	ldr	r3, [r7, #12]
 8033a58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8033a5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8033a5e:	683a      	ldr	r2, [r7, #0]
 8033a60:	68fb      	ldr	r3, [r7, #12]
 8033a62:	4313      	orrs	r3, r2
 8033a64:	f043 0307 	orr.w	r3, r3, #7
 8033a68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8033a6a:	687b      	ldr	r3, [r7, #4]
 8033a6c:	68fa      	ldr	r2, [r7, #12]
 8033a6e:	609a      	str	r2, [r3, #8]
}
 8033a70:	bf00      	nop
 8033a72:	3714      	adds	r7, #20
 8033a74:	46bd      	mov	sp, r7
 8033a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033a7a:	4770      	bx	lr

08033a7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8033a7c:	b480      	push	{r7}
 8033a7e:	b087      	sub	sp, #28
 8033a80:	af00      	add	r7, sp, #0
 8033a82:	60f8      	str	r0, [r7, #12]
 8033a84:	60b9      	str	r1, [r7, #8]
 8033a86:	607a      	str	r2, [r7, #4]
 8033a88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8033a8a:	68fb      	ldr	r3, [r7, #12]
 8033a8c:	689b      	ldr	r3, [r3, #8]
 8033a8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8033a90:	697b      	ldr	r3, [r7, #20]
 8033a92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8033a96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8033a98:	683b      	ldr	r3, [r7, #0]
 8033a9a:	021a      	lsls	r2, r3, #8
 8033a9c:	687b      	ldr	r3, [r7, #4]
 8033a9e:	431a      	orrs	r2, r3
 8033aa0:	68bb      	ldr	r3, [r7, #8]
 8033aa2:	4313      	orrs	r3, r2
 8033aa4:	697a      	ldr	r2, [r7, #20]
 8033aa6:	4313      	orrs	r3, r2
 8033aa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8033aaa:	68fb      	ldr	r3, [r7, #12]
 8033aac:	697a      	ldr	r2, [r7, #20]
 8033aae:	609a      	str	r2, [r3, #8]
}
 8033ab0:	bf00      	nop
 8033ab2:	371c      	adds	r7, #28
 8033ab4:	46bd      	mov	sp, r7
 8033ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033aba:	4770      	bx	lr

08033abc <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8033abc:	b480      	push	{r7}
 8033abe:	b083      	sub	sp, #12
 8033ac0:	af00      	add	r7, sp, #0
 8033ac2:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8033ac4:	687b      	ldr	r3, [r7, #4]
 8033ac6:	4a1c      	ldr	r2, [pc, #112]	@ (8033b38 <TIM_ResetCallback+0x7c>)
 8033ac8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8033acc:	687b      	ldr	r3, [r7, #4]
 8033ace:	4a1b      	ldr	r2, [pc, #108]	@ (8033b3c <TIM_ResetCallback+0x80>)
 8033ad0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8033ad4:	687b      	ldr	r3, [r7, #4]
 8033ad6:	4a1a      	ldr	r2, [pc, #104]	@ (8033b40 <TIM_ResetCallback+0x84>)
 8033ad8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8033adc:	687b      	ldr	r3, [r7, #4]
 8033ade:	4a19      	ldr	r2, [pc, #100]	@ (8033b44 <TIM_ResetCallback+0x88>)
 8033ae0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8033ae4:	687b      	ldr	r3, [r7, #4]
 8033ae6:	4a18      	ldr	r2, [pc, #96]	@ (8033b48 <TIM_ResetCallback+0x8c>)
 8033ae8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8033aec:	687b      	ldr	r3, [r7, #4]
 8033aee:	4a17      	ldr	r2, [pc, #92]	@ (8033b4c <TIM_ResetCallback+0x90>)
 8033af0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8033af4:	687b      	ldr	r3, [r7, #4]
 8033af6:	4a16      	ldr	r2, [pc, #88]	@ (8033b50 <TIM_ResetCallback+0x94>)
 8033af8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8033afc:	687b      	ldr	r3, [r7, #4]
 8033afe:	4a15      	ldr	r2, [pc, #84]	@ (8033b54 <TIM_ResetCallback+0x98>)
 8033b00:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8033b04:	687b      	ldr	r3, [r7, #4]
 8033b06:	4a14      	ldr	r2, [pc, #80]	@ (8033b58 <TIM_ResetCallback+0x9c>)
 8033b08:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8033b0c:	687b      	ldr	r3, [r7, #4]
 8033b0e:	4a13      	ldr	r2, [pc, #76]	@ (8033b5c <TIM_ResetCallback+0xa0>)
 8033b10:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8033b14:	687b      	ldr	r3, [r7, #4]
 8033b16:	4a12      	ldr	r2, [pc, #72]	@ (8033b60 <TIM_ResetCallback+0xa4>)
 8033b18:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8033b1c:	687b      	ldr	r3, [r7, #4]
 8033b1e:	4a11      	ldr	r2, [pc, #68]	@ (8033b64 <TIM_ResetCallback+0xa8>)
 8033b20:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8033b24:	687b      	ldr	r3, [r7, #4]
 8033b26:	4a10      	ldr	r2, [pc, #64]	@ (8033b68 <TIM_ResetCallback+0xac>)
 8033b28:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8033b2c:	bf00      	nop
 8033b2e:	370c      	adds	r7, #12
 8033b30:	46bd      	mov	sp, r7
 8033b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033b36:	4770      	bx	lr
 8033b38:	08027cc5 	.word	0x08027cc5
 8033b3c:	0803377d 	.word	0x0803377d
 8033b40:	080337f5 	.word	0x080337f5
 8033b44:	08033809 	.word	0x08033809
 8033b48:	080337a5 	.word	0x080337a5
 8033b4c:	080337b9 	.word	0x080337b9
 8033b50:	08033791 	.word	0x08033791
 8033b54:	080337cd 	.word	0x080337cd
 8033b58:	080337e1 	.word	0x080337e1
 8033b5c:	0803381d 	.word	0x0803381d
 8033b60:	08033b6d 	.word	0x08033b6d
 8033b64:	08033b81 	.word	0x08033b81
 8033b68:	08033b95 	.word	0x08033b95

08033b6c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8033b6c:	b480      	push	{r7}
 8033b6e:	b083      	sub	sp, #12
 8033b70:	af00      	add	r7, sp, #0
 8033b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8033b74:	bf00      	nop
 8033b76:	370c      	adds	r7, #12
 8033b78:	46bd      	mov	sp, r7
 8033b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033b7e:	4770      	bx	lr

08033b80 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8033b80:	b480      	push	{r7}
 8033b82:	b083      	sub	sp, #12
 8033b84:	af00      	add	r7, sp, #0
 8033b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8033b88:	bf00      	nop
 8033b8a:	370c      	adds	r7, #12
 8033b8c:	46bd      	mov	sp, r7
 8033b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033b92:	4770      	bx	lr

08033b94 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8033b94:	b480      	push	{r7}
 8033b96:	b083      	sub	sp, #12
 8033b98:	af00      	add	r7, sp, #0
 8033b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8033b9c:	bf00      	nop
 8033b9e:	370c      	adds	r7, #12
 8033ba0:	46bd      	mov	sp, r7
 8033ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033ba6:	4770      	bx	lr

08033ba8 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8033ba8:	b580      	push	{r7, lr}
 8033baa:	b086      	sub	sp, #24
 8033bac:	af00      	add	r7, sp, #0
 8033bae:	6078      	str	r0, [r7, #4]
 8033bb0:	6039      	str	r1, [r7, #0]
  uint32_t flashaccess;
  uint32_t btcr_reg;
  uint32_t mask;

  /* Check the parameters */
  assert_param(IS_FSMC_NORSRAM_DEVICE(Device));
 8033bb2:	687b      	ldr	r3, [r7, #4]
 8033bb4:	f1b3 4f20 	cmp.w	r3, #2684354560	@ 0xa0000000
 8033bb8:	d003      	beq.n	8033bc2 <FSMC_NORSRAM_Init+0x1a>
 8033bba:	21e4      	movs	r1, #228	@ 0xe4
 8033bbc:	4873      	ldr	r0, [pc, #460]	@ (8033d8c <FSMC_NORSRAM_Init+0x1e4>)
 8033bbe:	f7f4 f89a 	bl	8027cf6 <assert_failed>
  assert_param(IS_FSMC_NORSRAM_BANK(Init->NSBank));
 8033bc2:	683b      	ldr	r3, [r7, #0]
 8033bc4:	681b      	ldr	r3, [r3, #0]
 8033bc6:	2b00      	cmp	r3, #0
 8033bc8:	d00f      	beq.n	8033bea <FSMC_NORSRAM_Init+0x42>
 8033bca:	683b      	ldr	r3, [r7, #0]
 8033bcc:	681b      	ldr	r3, [r3, #0]
 8033bce:	2b02      	cmp	r3, #2
 8033bd0:	d00b      	beq.n	8033bea <FSMC_NORSRAM_Init+0x42>
 8033bd2:	683b      	ldr	r3, [r7, #0]
 8033bd4:	681b      	ldr	r3, [r3, #0]
 8033bd6:	2b04      	cmp	r3, #4
 8033bd8:	d007      	beq.n	8033bea <FSMC_NORSRAM_Init+0x42>
 8033bda:	683b      	ldr	r3, [r7, #0]
 8033bdc:	681b      	ldr	r3, [r3, #0]
 8033bde:	2b06      	cmp	r3, #6
 8033be0:	d003      	beq.n	8033bea <FSMC_NORSRAM_Init+0x42>
 8033be2:	21e5      	movs	r1, #229	@ 0xe5
 8033be4:	4869      	ldr	r0, [pc, #420]	@ (8033d8c <FSMC_NORSRAM_Init+0x1e4>)
 8033be6:	f7f4 f886 	bl	8027cf6 <assert_failed>
  assert_param(IS_FSMC_MUX(Init->DataAddressMux));
 8033bea:	683b      	ldr	r3, [r7, #0]
 8033bec:	685b      	ldr	r3, [r3, #4]
 8033bee:	2b00      	cmp	r3, #0
 8033bf0:	d007      	beq.n	8033c02 <FSMC_NORSRAM_Init+0x5a>
 8033bf2:	683b      	ldr	r3, [r7, #0]
 8033bf4:	685b      	ldr	r3, [r3, #4]
 8033bf6:	2b02      	cmp	r3, #2
 8033bf8:	d003      	beq.n	8033c02 <FSMC_NORSRAM_Init+0x5a>
 8033bfa:	21e6      	movs	r1, #230	@ 0xe6
 8033bfc:	4863      	ldr	r0, [pc, #396]	@ (8033d8c <FSMC_NORSRAM_Init+0x1e4>)
 8033bfe:	f7f4 f87a 	bl	8027cf6 <assert_failed>
  assert_param(IS_FSMC_MEMORY(Init->MemoryType));
 8033c02:	683b      	ldr	r3, [r7, #0]
 8033c04:	689b      	ldr	r3, [r3, #8]
 8033c06:	2b00      	cmp	r3, #0
 8033c08:	d00b      	beq.n	8033c22 <FSMC_NORSRAM_Init+0x7a>
 8033c0a:	683b      	ldr	r3, [r7, #0]
 8033c0c:	689b      	ldr	r3, [r3, #8]
 8033c0e:	2b04      	cmp	r3, #4
 8033c10:	d007      	beq.n	8033c22 <FSMC_NORSRAM_Init+0x7a>
 8033c12:	683b      	ldr	r3, [r7, #0]
 8033c14:	689b      	ldr	r3, [r3, #8]
 8033c16:	2b08      	cmp	r3, #8
 8033c18:	d003      	beq.n	8033c22 <FSMC_NORSRAM_Init+0x7a>
 8033c1a:	21e7      	movs	r1, #231	@ 0xe7
 8033c1c:	485b      	ldr	r0, [pc, #364]	@ (8033d8c <FSMC_NORSRAM_Init+0x1e4>)
 8033c1e:	f7f4 f86a 	bl	8027cf6 <assert_failed>
  assert_param(IS_FSMC_NORSRAM_MEMORY_WIDTH(Init->MemoryDataWidth));
 8033c22:	683b      	ldr	r3, [r7, #0]
 8033c24:	68db      	ldr	r3, [r3, #12]
 8033c26:	2b00      	cmp	r3, #0
 8033c28:	d00b      	beq.n	8033c42 <FSMC_NORSRAM_Init+0x9a>
 8033c2a:	683b      	ldr	r3, [r7, #0]
 8033c2c:	68db      	ldr	r3, [r3, #12]
 8033c2e:	2b10      	cmp	r3, #16
 8033c30:	d007      	beq.n	8033c42 <FSMC_NORSRAM_Init+0x9a>
 8033c32:	683b      	ldr	r3, [r7, #0]
 8033c34:	68db      	ldr	r3, [r3, #12]
 8033c36:	2b20      	cmp	r3, #32
 8033c38:	d003      	beq.n	8033c42 <FSMC_NORSRAM_Init+0x9a>
 8033c3a:	21e8      	movs	r1, #232	@ 0xe8
 8033c3c:	4853      	ldr	r0, [pc, #332]	@ (8033d8c <FSMC_NORSRAM_Init+0x1e4>)
 8033c3e:	f7f4 f85a 	bl	8027cf6 <assert_failed>
  assert_param(IS_FSMC_BURSTMODE(Init->BurstAccessMode));
 8033c42:	683b      	ldr	r3, [r7, #0]
 8033c44:	691b      	ldr	r3, [r3, #16]
 8033c46:	2b00      	cmp	r3, #0
 8033c48:	d008      	beq.n	8033c5c <FSMC_NORSRAM_Init+0xb4>
 8033c4a:	683b      	ldr	r3, [r7, #0]
 8033c4c:	691b      	ldr	r3, [r3, #16]
 8033c4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8033c52:	d003      	beq.n	8033c5c <FSMC_NORSRAM_Init+0xb4>
 8033c54:	21e9      	movs	r1, #233	@ 0xe9
 8033c56:	484d      	ldr	r0, [pc, #308]	@ (8033d8c <FSMC_NORSRAM_Init+0x1e4>)
 8033c58:	f7f4 f84d 	bl	8027cf6 <assert_failed>
  assert_param(IS_FSMC_WAIT_POLARITY(Init->WaitSignalPolarity));
 8033c5c:	683b      	ldr	r3, [r7, #0]
 8033c5e:	695b      	ldr	r3, [r3, #20]
 8033c60:	2b00      	cmp	r3, #0
 8033c62:	d008      	beq.n	8033c76 <FSMC_NORSRAM_Init+0xce>
 8033c64:	683b      	ldr	r3, [r7, #0]
 8033c66:	695b      	ldr	r3, [r3, #20]
 8033c68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8033c6c:	d003      	beq.n	8033c76 <FSMC_NORSRAM_Init+0xce>
 8033c6e:	21ea      	movs	r1, #234	@ 0xea
 8033c70:	4846      	ldr	r0, [pc, #280]	@ (8033d8c <FSMC_NORSRAM_Init+0x1e4>)
 8033c72:	f7f4 f840 	bl	8027cf6 <assert_failed>
#if defined(FSMC_BCR1_WRAPMOD)
  assert_param(IS_FSMC_WRAP_MODE(Init->WrapMode));
 8033c76:	683b      	ldr	r3, [r7, #0]
 8033c78:	699b      	ldr	r3, [r3, #24]
 8033c7a:	2b00      	cmp	r3, #0
 8033c7c:	d008      	beq.n	8033c90 <FSMC_NORSRAM_Init+0xe8>
 8033c7e:	683b      	ldr	r3, [r7, #0]
 8033c80:	699b      	ldr	r3, [r3, #24]
 8033c82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8033c86:	d003      	beq.n	8033c90 <FSMC_NORSRAM_Init+0xe8>
 8033c88:	21ec      	movs	r1, #236	@ 0xec
 8033c8a:	4840      	ldr	r0, [pc, #256]	@ (8033d8c <FSMC_NORSRAM_Init+0x1e4>)
 8033c8c:	f7f4 f833 	bl	8027cf6 <assert_failed>
#endif /* FSMC_BCR1_WRAPMOD */
  assert_param(IS_FSMC_WAIT_SIGNAL_ACTIVE(Init->WaitSignalActive));
 8033c90:	683b      	ldr	r3, [r7, #0]
 8033c92:	69db      	ldr	r3, [r3, #28]
 8033c94:	2b00      	cmp	r3, #0
 8033c96:	d008      	beq.n	8033caa <FSMC_NORSRAM_Init+0x102>
 8033c98:	683b      	ldr	r3, [r7, #0]
 8033c9a:	69db      	ldr	r3, [r3, #28]
 8033c9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8033ca0:	d003      	beq.n	8033caa <FSMC_NORSRAM_Init+0x102>
 8033ca2:	21ee      	movs	r1, #238	@ 0xee
 8033ca4:	4839      	ldr	r0, [pc, #228]	@ (8033d8c <FSMC_NORSRAM_Init+0x1e4>)
 8033ca6:	f7f4 f826 	bl	8027cf6 <assert_failed>
  assert_param(IS_FSMC_WRITE_OPERATION(Init->WriteOperation));
 8033caa:	683b      	ldr	r3, [r7, #0]
 8033cac:	6a1b      	ldr	r3, [r3, #32]
 8033cae:	2b00      	cmp	r3, #0
 8033cb0:	d008      	beq.n	8033cc4 <FSMC_NORSRAM_Init+0x11c>
 8033cb2:	683b      	ldr	r3, [r7, #0]
 8033cb4:	6a1b      	ldr	r3, [r3, #32]
 8033cb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8033cba:	d003      	beq.n	8033cc4 <FSMC_NORSRAM_Init+0x11c>
 8033cbc:	21ef      	movs	r1, #239	@ 0xef
 8033cbe:	4833      	ldr	r0, [pc, #204]	@ (8033d8c <FSMC_NORSRAM_Init+0x1e4>)
 8033cc0:	f7f4 f819 	bl	8027cf6 <assert_failed>
  assert_param(IS_FSMC_WAITE_SIGNAL(Init->WaitSignal));
 8033cc4:	683b      	ldr	r3, [r7, #0]
 8033cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8033cc8:	2b00      	cmp	r3, #0
 8033cca:	d008      	beq.n	8033cde <FSMC_NORSRAM_Init+0x136>
 8033ccc:	683b      	ldr	r3, [r7, #0]
 8033cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8033cd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8033cd4:	d003      	beq.n	8033cde <FSMC_NORSRAM_Init+0x136>
 8033cd6:	21f0      	movs	r1, #240	@ 0xf0
 8033cd8:	482c      	ldr	r0, [pc, #176]	@ (8033d8c <FSMC_NORSRAM_Init+0x1e4>)
 8033cda:	f7f4 f80c 	bl	8027cf6 <assert_failed>
  assert_param(IS_FSMC_EXTENDED_MODE(Init->ExtendedMode));
 8033cde:	683b      	ldr	r3, [r7, #0]
 8033ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8033ce2:	2b00      	cmp	r3, #0
 8033ce4:	d008      	beq.n	8033cf8 <FSMC_NORSRAM_Init+0x150>
 8033ce6:	683b      	ldr	r3, [r7, #0]
 8033ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8033cea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8033cee:	d003      	beq.n	8033cf8 <FSMC_NORSRAM_Init+0x150>
 8033cf0:	21f1      	movs	r1, #241	@ 0xf1
 8033cf2:	4826      	ldr	r0, [pc, #152]	@ (8033d8c <FSMC_NORSRAM_Init+0x1e4>)
 8033cf4:	f7f3 ffff 	bl	8027cf6 <assert_failed>
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
 8033cf8:	683b      	ldr	r3, [r7, #0]
 8033cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8033cfc:	2b00      	cmp	r3, #0
 8033cfe:	d008      	beq.n	8033d12 <FSMC_NORSRAM_Init+0x16a>
 8033d00:	683b      	ldr	r3, [r7, #0]
 8033d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8033d04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8033d08:	d003      	beq.n	8033d12 <FSMC_NORSRAM_Init+0x16a>
 8033d0a:	21f2      	movs	r1, #242	@ 0xf2
 8033d0c:	481f      	ldr	r0, [pc, #124]	@ (8033d8c <FSMC_NORSRAM_Init+0x1e4>)
 8033d0e:	f7f3 fff2 	bl	8027cf6 <assert_failed>
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
 8033d12:	683b      	ldr	r3, [r7, #0]
 8033d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8033d16:	2b00      	cmp	r3, #0
 8033d18:	d008      	beq.n	8033d2c <FSMC_NORSRAM_Init+0x184>
 8033d1a:	683b      	ldr	r3, [r7, #0]
 8033d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8033d1e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8033d22:	d003      	beq.n	8033d2c <FSMC_NORSRAM_Init+0x184>
 8033d24:	21f3      	movs	r1, #243	@ 0xf3
 8033d26:	4819      	ldr	r0, [pc, #100]	@ (8033d8c <FSMC_NORSRAM_Init+0x1e4>)
 8033d28:	f7f3 ffe5 	bl	8027cf6 <assert_failed>
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif
#if defined(FSMC_BCR1_WFDIS)
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));
 8033d2c:	683b      	ldr	r3, [r7, #0]
 8033d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8033d30:	2b00      	cmp	r3, #0
 8033d32:	d017      	beq.n	8033d64 <FSMC_NORSRAM_Init+0x1bc>
 8033d34:	683b      	ldr	r3, [r7, #0]
 8033d36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8033d38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8033d3c:	d012      	beq.n	8033d64 <FSMC_NORSRAM_Init+0x1bc>
 8033d3e:	683b      	ldr	r3, [r7, #0]
 8033d40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8033d42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8033d46:	d00d      	beq.n	8033d64 <FSMC_NORSRAM_Init+0x1bc>
 8033d48:	683b      	ldr	r3, [r7, #0]
 8033d4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8033d4c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8033d50:	d008      	beq.n	8033d64 <FSMC_NORSRAM_Init+0x1bc>
 8033d52:	683b      	ldr	r3, [r7, #0]
 8033d54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8033d56:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8033d5a:	d003      	beq.n	8033d64 <FSMC_NORSRAM_Init+0x1bc>
 8033d5c:	21fa      	movs	r1, #250	@ 0xfa
 8033d5e:	480b      	ldr	r0, [pc, #44]	@ (8033d8c <FSMC_NORSRAM_Init+0x1e4>)
 8033d60:	f7f3 ffc9 	bl	8027cf6 <assert_failed>

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8033d64:	683b      	ldr	r3, [r7, #0]
 8033d66:	681a      	ldr	r2, [r3, #0]
 8033d68:	687b      	ldr	r3, [r7, #4]
 8033d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8033d6e:	683a      	ldr	r2, [r7, #0]
 8033d70:	6812      	ldr	r2, [r2, #0]
 8033d72:	f023 0101 	bic.w	r1, r3, #1
 8033d76:	687b      	ldr	r3, [r7, #4]
 8033d78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8033d7c:	683b      	ldr	r3, [r7, #0]
 8033d7e:	689b      	ldr	r3, [r3, #8]
 8033d80:	2b08      	cmp	r3, #8
 8033d82:	d105      	bne.n	8033d90 <FSMC_NORSRAM_Init+0x1e8>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8033d84:	2340      	movs	r3, #64	@ 0x40
 8033d86:	617b      	str	r3, [r7, #20]
 8033d88:	e004      	b.n	8033d94 <FSMC_NORSRAM_Init+0x1ec>
 8033d8a:	bf00      	nop
 8033d8c:	0803884c 	.word	0x0803884c
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8033d90:	2300      	movs	r3, #0
 8033d92:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8033d94:	683b      	ldr	r3, [r7, #0]
 8033d96:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8033d98:	697b      	ldr	r3, [r7, #20]
 8033d9a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8033d9c:	683b      	ldr	r3, [r7, #0]
 8033d9e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8033da0:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8033da2:	683b      	ldr	r3, [r7, #0]
 8033da4:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8033da6:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8033da8:	683b      	ldr	r3, [r7, #0]
 8033daa:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8033dac:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8033dae:	683b      	ldr	r3, [r7, #0]
 8033db0:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8033db2:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8033db4:	683b      	ldr	r3, [r7, #0]
 8033db6:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8033db8:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8033dba:	683b      	ldr	r3, [r7, #0]
 8033dbc:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8033dbe:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8033dc0:	683b      	ldr	r3, [r7, #0]
 8033dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8033dc4:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8033dc6:	683b      	ldr	r3, [r7, #0]
 8033dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 8033dca:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8033dcc:	683b      	ldr	r3, [r7, #0]
 8033dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8033dd0:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8033dd2:	683b      	ldr	r3, [r7, #0]
 8033dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 8033dd6:	4313      	orrs	r3, r2
 8033dd8:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8033dda:	683b      	ldr	r3, [r7, #0]
 8033ddc:	699b      	ldr	r3, [r3, #24]
 8033dde:	693a      	ldr	r2, [r7, #16]
 8033de0:	4313      	orrs	r3, r2
 8033de2:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8033de4:	683b      	ldr	r3, [r7, #0]
 8033de6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8033de8:	693a      	ldr	r2, [r7, #16]
 8033dea:	4313      	orrs	r3, r2
 8033dec:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8033dee:	4b0f      	ldr	r3, [pc, #60]	@ (8033e2c <FSMC_NORSRAM_Init+0x284>)
 8033df0:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8033df2:	68fb      	ldr	r3, [r7, #12]
 8033df4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8033df8:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8033dfa:	68fb      	ldr	r3, [r7, #12]
 8033dfc:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8033e00:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8033e02:	683b      	ldr	r3, [r7, #0]
 8033e04:	681a      	ldr	r2, [r3, #0]
 8033e06:	687b      	ldr	r3, [r7, #4]
 8033e08:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8033e0c:	68fb      	ldr	r3, [r7, #12]
 8033e0e:	43db      	mvns	r3, r3
 8033e10:	ea02 0103 	and.w	r1, r2, r3
 8033e14:	683b      	ldr	r3, [r7, #0]
 8033e16:	681a      	ldr	r2, [r3, #0]
 8033e18:	693b      	ldr	r3, [r7, #16]
 8033e1a:	4319      	orrs	r1, r3
 8033e1c:	687b      	ldr	r3, [r7, #4]
 8033e1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8033e22:	2300      	movs	r3, #0
}
 8033e24:	4618      	mov	r0, r3
 8033e26:	3718      	adds	r7, #24
 8033e28:	46bd      	mov	sp, r7
 8033e2a:	bd80      	pop	{r7, pc}
 8033e2c:	0008fb7f 	.word	0x0008fb7f

08033e30 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8033e30:	b580      	push	{r7, lr}
 8033e32:	b084      	sub	sp, #16
 8033e34:	af00      	add	r7, sp, #0
 8033e36:	60f8      	str	r0, [r7, #12]
 8033e38:	60b9      	str	r1, [r7, #8]
 8033e3a:	607a      	str	r2, [r7, #4]
#if defined(FSMC_BCR1_CCLKEN)
  uint32_t tmpr;
#endif

  /* Check the parameters */
  assert_param(IS_FSMC_NORSRAM_DEVICE(Device));
 8033e3c:	68fb      	ldr	r3, [r7, #12]
 8033e3e:	f1b3 4f20 	cmp.w	r3, #2684354560	@ 0xa0000000
 8033e42:	d004      	beq.n	8033e4e <FSMC_NORSRAM_Timing_Init+0x1e>
 8033e44:	f240 1183 	movw	r1, #387	@ 0x183
 8033e48:	484f      	ldr	r0, [pc, #316]	@ (8033f88 <FSMC_NORSRAM_Timing_Init+0x158>)
 8033e4a:	f7f3 ff54 	bl	8027cf6 <assert_failed>
  assert_param(IS_FSMC_ADDRESS_SETUP_TIME(Timing->AddressSetupTime));
 8033e4e:	68bb      	ldr	r3, [r7, #8]
 8033e50:	681b      	ldr	r3, [r3, #0]
 8033e52:	2b0f      	cmp	r3, #15
 8033e54:	d904      	bls.n	8033e60 <FSMC_NORSRAM_Timing_Init+0x30>
 8033e56:	f44f 71c2 	mov.w	r1, #388	@ 0x184
 8033e5a:	484b      	ldr	r0, [pc, #300]	@ (8033f88 <FSMC_NORSRAM_Timing_Init+0x158>)
 8033e5c:	f7f3 ff4b 	bl	8027cf6 <assert_failed>
  assert_param(IS_FSMC_ADDRESS_HOLD_TIME(Timing->AddressHoldTime));
 8033e60:	68bb      	ldr	r3, [r7, #8]
 8033e62:	685b      	ldr	r3, [r3, #4]
 8033e64:	2b00      	cmp	r3, #0
 8033e66:	d003      	beq.n	8033e70 <FSMC_NORSRAM_Timing_Init+0x40>
 8033e68:	68bb      	ldr	r3, [r7, #8]
 8033e6a:	685b      	ldr	r3, [r3, #4]
 8033e6c:	2b0f      	cmp	r3, #15
 8033e6e:	d904      	bls.n	8033e7a <FSMC_NORSRAM_Timing_Init+0x4a>
 8033e70:	f240 1185 	movw	r1, #389	@ 0x185
 8033e74:	4844      	ldr	r0, [pc, #272]	@ (8033f88 <FSMC_NORSRAM_Timing_Init+0x158>)
 8033e76:	f7f3 ff3e 	bl	8027cf6 <assert_failed>
  assert_param(IS_FSMC_DATASETUP_TIME(Timing->DataSetupTime));
 8033e7a:	68bb      	ldr	r3, [r7, #8]
 8033e7c:	689b      	ldr	r3, [r3, #8]
 8033e7e:	2b00      	cmp	r3, #0
 8033e80:	d003      	beq.n	8033e8a <FSMC_NORSRAM_Timing_Init+0x5a>
 8033e82:	68bb      	ldr	r3, [r7, #8]
 8033e84:	689b      	ldr	r3, [r3, #8]
 8033e86:	2bff      	cmp	r3, #255	@ 0xff
 8033e88:	d904      	bls.n	8033e94 <FSMC_NORSRAM_Timing_Init+0x64>
 8033e8a:	f44f 71c3 	mov.w	r1, #390	@ 0x186
 8033e8e:	483e      	ldr	r0, [pc, #248]	@ (8033f88 <FSMC_NORSRAM_Timing_Init+0x158>)
 8033e90:	f7f3 ff31 	bl	8027cf6 <assert_failed>
  assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
 8033e94:	68bb      	ldr	r3, [r7, #8]
 8033e96:	68db      	ldr	r3, [r3, #12]
 8033e98:	2b0f      	cmp	r3, #15
 8033e9a:	d904      	bls.n	8033ea6 <FSMC_NORSRAM_Timing_Init+0x76>
 8033e9c:	f240 1187 	movw	r1, #391	@ 0x187
 8033ea0:	4839      	ldr	r0, [pc, #228]	@ (8033f88 <FSMC_NORSRAM_Timing_Init+0x158>)
 8033ea2:	f7f3 ff28 	bl	8027cf6 <assert_failed>
  assert_param(IS_FSMC_CLK_DIV(Timing->CLKDivision));
 8033ea6:	68bb      	ldr	r3, [r7, #8]
 8033ea8:	691b      	ldr	r3, [r3, #16]
 8033eaa:	2b01      	cmp	r3, #1
 8033eac:	d903      	bls.n	8033eb6 <FSMC_NORSRAM_Timing_Init+0x86>
 8033eae:	68bb      	ldr	r3, [r7, #8]
 8033eb0:	691b      	ldr	r3, [r3, #16]
 8033eb2:	2b10      	cmp	r3, #16
 8033eb4:	d904      	bls.n	8033ec0 <FSMC_NORSRAM_Timing_Init+0x90>
 8033eb6:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8033eba:	4833      	ldr	r0, [pc, #204]	@ (8033f88 <FSMC_NORSRAM_Timing_Init+0x158>)
 8033ebc:	f7f3 ff1b 	bl	8027cf6 <assert_failed>
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
 8033ec0:	68bb      	ldr	r3, [r7, #8]
 8033ec2:	695b      	ldr	r3, [r3, #20]
 8033ec4:	2b01      	cmp	r3, #1
 8033ec6:	d903      	bls.n	8033ed0 <FSMC_NORSRAM_Timing_Init+0xa0>
 8033ec8:	68bb      	ldr	r3, [r7, #8]
 8033eca:	695b      	ldr	r3, [r3, #20]
 8033ecc:	2b11      	cmp	r3, #17
 8033ece:	d904      	bls.n	8033eda <FSMC_NORSRAM_Timing_Init+0xaa>
 8033ed0:	f240 1189 	movw	r1, #393	@ 0x189
 8033ed4:	482c      	ldr	r0, [pc, #176]	@ (8033f88 <FSMC_NORSRAM_Timing_Init+0x158>)
 8033ed6:	f7f3 ff0e 	bl	8027cf6 <assert_failed>
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
 8033eda:	68bb      	ldr	r3, [r7, #8]
 8033edc:	699b      	ldr	r3, [r3, #24]
 8033ede:	2b00      	cmp	r3, #0
 8033ee0:	d013      	beq.n	8033f0a <FSMC_NORSRAM_Timing_Init+0xda>
 8033ee2:	68bb      	ldr	r3, [r7, #8]
 8033ee4:	699b      	ldr	r3, [r3, #24]
 8033ee6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8033eea:	d00e      	beq.n	8033f0a <FSMC_NORSRAM_Timing_Init+0xda>
 8033eec:	68bb      	ldr	r3, [r7, #8]
 8033eee:	699b      	ldr	r3, [r3, #24]
 8033ef0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8033ef4:	d009      	beq.n	8033f0a <FSMC_NORSRAM_Timing_Init+0xda>
 8033ef6:	68bb      	ldr	r3, [r7, #8]
 8033ef8:	699b      	ldr	r3, [r3, #24]
 8033efa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8033efe:	d004      	beq.n	8033f0a <FSMC_NORSRAM_Timing_Init+0xda>
 8033f00:	f44f 71c5 	mov.w	r1, #394	@ 0x18a
 8033f04:	4820      	ldr	r0, [pc, #128]	@ (8033f88 <FSMC_NORSRAM_Timing_Init+0x158>)
 8033f06:	f7f3 fef6 	bl	8027cf6 <assert_failed>
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
 8033f0a:	687b      	ldr	r3, [r7, #4]
 8033f0c:	2b00      	cmp	r3, #0
 8033f0e:	d00d      	beq.n	8033f2c <FSMC_NORSRAM_Timing_Init+0xfc>
 8033f10:	687b      	ldr	r3, [r7, #4]
 8033f12:	2b02      	cmp	r3, #2
 8033f14:	d00a      	beq.n	8033f2c <FSMC_NORSRAM_Timing_Init+0xfc>
 8033f16:	687b      	ldr	r3, [r7, #4]
 8033f18:	2b04      	cmp	r3, #4
 8033f1a:	d007      	beq.n	8033f2c <FSMC_NORSRAM_Timing_Init+0xfc>
 8033f1c:	687b      	ldr	r3, [r7, #4]
 8033f1e:	2b06      	cmp	r3, #6
 8033f20:	d004      	beq.n	8033f2c <FSMC_NORSRAM_Timing_Init+0xfc>
 8033f22:	f240 118b 	movw	r1, #395	@ 0x18b
 8033f26:	4818      	ldr	r0, [pc, #96]	@ (8033f88 <FSMC_NORSRAM_Timing_Init+0x158>)
 8033f28:	f7f3 fee5 	bl	8027cf6 <assert_failed>

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8033f2c:	687b      	ldr	r3, [r7, #4]
 8033f2e:	1c5a      	adds	r2, r3, #1
 8033f30:	68fb      	ldr	r3, [r7, #12]
 8033f32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8033f36:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8033f3a:	68bb      	ldr	r3, [r7, #8]
 8033f3c:	681a      	ldr	r2, [r3, #0]
 8033f3e:	68bb      	ldr	r3, [r7, #8]
 8033f40:	685b      	ldr	r3, [r3, #4]
 8033f42:	011b      	lsls	r3, r3, #4
 8033f44:	431a      	orrs	r2, r3
 8033f46:	68bb      	ldr	r3, [r7, #8]
 8033f48:	689b      	ldr	r3, [r3, #8]
 8033f4a:	021b      	lsls	r3, r3, #8
 8033f4c:	431a      	orrs	r2, r3
 8033f4e:	68bb      	ldr	r3, [r7, #8]
 8033f50:	68db      	ldr	r3, [r3, #12]
 8033f52:	041b      	lsls	r3, r3, #16
 8033f54:	431a      	orrs	r2, r3
 8033f56:	68bb      	ldr	r3, [r7, #8]
 8033f58:	691b      	ldr	r3, [r3, #16]
 8033f5a:	3b01      	subs	r3, #1
 8033f5c:	051b      	lsls	r3, r3, #20
 8033f5e:	431a      	orrs	r2, r3
 8033f60:	68bb      	ldr	r3, [r7, #8]
 8033f62:	695b      	ldr	r3, [r3, #20]
 8033f64:	3b02      	subs	r3, #2
 8033f66:	061b      	lsls	r3, r3, #24
 8033f68:	431a      	orrs	r2, r3
 8033f6a:	68bb      	ldr	r3, [r7, #8]
 8033f6c:	699b      	ldr	r3, [r3, #24]
 8033f6e:	4313      	orrs	r3, r2
 8033f70:	687a      	ldr	r2, [r7, #4]
 8033f72:	3201      	adds	r2, #1
 8033f74:	4319      	orrs	r1, r3
 8033f76:	68fb      	ldr	r3, [r7, #12]
 8033f78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8033f7c:	2300      	movs	r3, #0
}
 8033f7e:	4618      	mov	r0, r3
 8033f80:	3710      	adds	r7, #16
 8033f82:	46bd      	mov	sp, r7
 8033f84:	bd80      	pop	{r7, pc}
 8033f86:	bf00      	nop
 8033f88:	0803884c 	.word	0x0803884c

08033f8c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8033f8c:	b580      	push	{r7, lr}
 8033f8e:	b084      	sub	sp, #16
 8033f90:	af00      	add	r7, sp, #0
 8033f92:	60f8      	str	r0, [r7, #12]
 8033f94:	60b9      	str	r1, [r7, #8]
 8033f96:	607a      	str	r2, [r7, #4]
 8033f98:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));
 8033f9a:	683b      	ldr	r3, [r7, #0]
 8033f9c:	2b00      	cmp	r3, #0
 8033f9e:	d008      	beq.n	8033fb2 <FSMC_NORSRAM_Extended_Timing_Init+0x26>
 8033fa0:	683b      	ldr	r3, [r7, #0]
 8033fa2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8033fa6:	d004      	beq.n	8033fb2 <FSMC_NORSRAM_Extended_Timing_Init+0x26>
 8033fa8:	f44f 71da 	mov.w	r1, #436	@ 0x1b4
 8033fac:	4846      	ldr	r0, [pc, #280]	@ (80340c8 <FSMC_NORSRAM_Extended_Timing_Init+0x13c>)
 8033fae:	f7f3 fea2 	bl	8027cf6 <assert_failed>

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8033fb2:	683b      	ldr	r3, [r7, #0]
 8033fb4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8033fb8:	d17b      	bne.n	80340b2 <FSMC_NORSRAM_Extended_Timing_Init+0x126>
  {
    /* Check the parameters */
    assert_param(IS_FSMC_NORSRAM_EXTENDED_DEVICE(Device));
 8033fba:	68fb      	ldr	r3, [r7, #12]
 8033fbc:	4a43      	ldr	r2, [pc, #268]	@ (80340cc <FSMC_NORSRAM_Extended_Timing_Init+0x140>)
 8033fbe:	4293      	cmp	r3, r2
 8033fc0:	d004      	beq.n	8033fcc <FSMC_NORSRAM_Extended_Timing_Init+0x40>
 8033fc2:	f44f 71dd 	mov.w	r1, #442	@ 0x1ba
 8033fc6:	4840      	ldr	r0, [pc, #256]	@ (80340c8 <FSMC_NORSRAM_Extended_Timing_Init+0x13c>)
 8033fc8:	f7f3 fe95 	bl	8027cf6 <assert_failed>
    assert_param(IS_FSMC_ADDRESS_SETUP_TIME(Timing->AddressSetupTime));
 8033fcc:	68bb      	ldr	r3, [r7, #8]
 8033fce:	681b      	ldr	r3, [r3, #0]
 8033fd0:	2b0f      	cmp	r3, #15
 8033fd2:	d904      	bls.n	8033fde <FSMC_NORSRAM_Extended_Timing_Init+0x52>
 8033fd4:	f240 11bb 	movw	r1, #443	@ 0x1bb
 8033fd8:	483b      	ldr	r0, [pc, #236]	@ (80340c8 <FSMC_NORSRAM_Extended_Timing_Init+0x13c>)
 8033fda:	f7f3 fe8c 	bl	8027cf6 <assert_failed>
    assert_param(IS_FSMC_ADDRESS_HOLD_TIME(Timing->AddressHoldTime));
 8033fde:	68bb      	ldr	r3, [r7, #8]
 8033fe0:	685b      	ldr	r3, [r3, #4]
 8033fe2:	2b00      	cmp	r3, #0
 8033fe4:	d003      	beq.n	8033fee <FSMC_NORSRAM_Extended_Timing_Init+0x62>
 8033fe6:	68bb      	ldr	r3, [r7, #8]
 8033fe8:	685b      	ldr	r3, [r3, #4]
 8033fea:	2b0f      	cmp	r3, #15
 8033fec:	d904      	bls.n	8033ff8 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
 8033fee:	f44f 71de 	mov.w	r1, #444	@ 0x1bc
 8033ff2:	4835      	ldr	r0, [pc, #212]	@ (80340c8 <FSMC_NORSRAM_Extended_Timing_Init+0x13c>)
 8033ff4:	f7f3 fe7f 	bl	8027cf6 <assert_failed>
    assert_param(IS_FSMC_DATASETUP_TIME(Timing->DataSetupTime));
 8033ff8:	68bb      	ldr	r3, [r7, #8]
 8033ffa:	689b      	ldr	r3, [r3, #8]
 8033ffc:	2b00      	cmp	r3, #0
 8033ffe:	d003      	beq.n	8034008 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>
 8034000:	68bb      	ldr	r3, [r7, #8]
 8034002:	689b      	ldr	r3, [r3, #8]
 8034004:	2bff      	cmp	r3, #255	@ 0xff
 8034006:	d904      	bls.n	8034012 <FSMC_NORSRAM_Extended_Timing_Init+0x86>
 8034008:	f240 11bd 	movw	r1, #445	@ 0x1bd
 803400c:	482e      	ldr	r0, [pc, #184]	@ (80340c8 <FSMC_NORSRAM_Extended_Timing_Init+0x13c>)
 803400e:	f7f3 fe72 	bl	8027cf6 <assert_failed>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
 8034012:	68bb      	ldr	r3, [r7, #8]
 8034014:	68db      	ldr	r3, [r3, #12]
 8034016:	2b0f      	cmp	r3, #15
 8034018:	d904      	bls.n	8034024 <FSMC_NORSRAM_Extended_Timing_Init+0x98>
 803401a:	f44f 71df 	mov.w	r1, #446	@ 0x1be
 803401e:	482a      	ldr	r0, [pc, #168]	@ (80340c8 <FSMC_NORSRAM_Extended_Timing_Init+0x13c>)
 8034020:	f7f3 fe69 	bl	8027cf6 <assert_failed>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
 8034024:	68bb      	ldr	r3, [r7, #8]
 8034026:	699b      	ldr	r3, [r3, #24]
 8034028:	2b00      	cmp	r3, #0
 803402a:	d013      	beq.n	8034054 <FSMC_NORSRAM_Extended_Timing_Init+0xc8>
 803402c:	68bb      	ldr	r3, [r7, #8]
 803402e:	699b      	ldr	r3, [r3, #24]
 8034030:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8034034:	d00e      	beq.n	8034054 <FSMC_NORSRAM_Extended_Timing_Init+0xc8>
 8034036:	68bb      	ldr	r3, [r7, #8]
 8034038:	699b      	ldr	r3, [r3, #24]
 803403a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 803403e:	d009      	beq.n	8034054 <FSMC_NORSRAM_Extended_Timing_Init+0xc8>
 8034040:	68bb      	ldr	r3, [r7, #8]
 8034042:	699b      	ldr	r3, [r3, #24]
 8034044:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8034048:	d004      	beq.n	8034054 <FSMC_NORSRAM_Extended_Timing_Init+0xc8>
 803404a:	f240 11bf 	movw	r1, #447	@ 0x1bf
 803404e:	481e      	ldr	r0, [pc, #120]	@ (80340c8 <FSMC_NORSRAM_Extended_Timing_Init+0x13c>)
 8034050:	f7f3 fe51 	bl	8027cf6 <assert_failed>
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
 8034054:	687b      	ldr	r3, [r7, #4]
 8034056:	2b00      	cmp	r3, #0
 8034058:	d00d      	beq.n	8034076 <FSMC_NORSRAM_Extended_Timing_Init+0xea>
 803405a:	687b      	ldr	r3, [r7, #4]
 803405c:	2b02      	cmp	r3, #2
 803405e:	d00a      	beq.n	8034076 <FSMC_NORSRAM_Extended_Timing_Init+0xea>
 8034060:	687b      	ldr	r3, [r7, #4]
 8034062:	2b04      	cmp	r3, #4
 8034064:	d007      	beq.n	8034076 <FSMC_NORSRAM_Extended_Timing_Init+0xea>
 8034066:	687b      	ldr	r3, [r7, #4]
 8034068:	2b06      	cmp	r3, #6
 803406a:	d004      	beq.n	8034076 <FSMC_NORSRAM_Extended_Timing_Init+0xea>
 803406c:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8034070:	4815      	ldr	r0, [pc, #84]	@ (80340c8 <FSMC_NORSRAM_Extended_Timing_Init+0x13c>)
 8034072:	f7f3 fe40 	bl	8027cf6 <assert_failed>

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8034076:	68fb      	ldr	r3, [r7, #12]
 8034078:	687a      	ldr	r2, [r7, #4]
 803407a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 803407e:	4b14      	ldr	r3, [pc, #80]	@ (80340d0 <FSMC_NORSRAM_Extended_Timing_Init+0x144>)
 8034080:	4013      	ands	r3, r2
 8034082:	68ba      	ldr	r2, [r7, #8]
 8034084:	6811      	ldr	r1, [r2, #0]
 8034086:	68ba      	ldr	r2, [r7, #8]
 8034088:	6852      	ldr	r2, [r2, #4]
 803408a:	0112      	lsls	r2, r2, #4
 803408c:	4311      	orrs	r1, r2
 803408e:	68ba      	ldr	r2, [r7, #8]
 8034090:	6892      	ldr	r2, [r2, #8]
 8034092:	0212      	lsls	r2, r2, #8
 8034094:	4311      	orrs	r1, r2
 8034096:	68ba      	ldr	r2, [r7, #8]
 8034098:	6992      	ldr	r2, [r2, #24]
 803409a:	4311      	orrs	r1, r2
 803409c:	68ba      	ldr	r2, [r7, #8]
 803409e:	68d2      	ldr	r2, [r2, #12]
 80340a0:	0412      	lsls	r2, r2, #16
 80340a2:	430a      	orrs	r2, r1
 80340a4:	ea43 0102 	orr.w	r1, r3, r2
 80340a8:	68fb      	ldr	r3, [r7, #12]
 80340aa:	687a      	ldr	r2, [r7, #4]
 80340ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80340b0:	e005      	b.n	80340be <FSMC_NORSRAM_Extended_Timing_Init+0x132>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80340b2:	68fb      	ldr	r3, [r7, #12]
 80340b4:	687a      	ldr	r2, [r7, #4]
 80340b6:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 80340ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80340be:	2300      	movs	r3, #0
}
 80340c0:	4618      	mov	r0, r3
 80340c2:	3710      	adds	r7, #16
 80340c4:	46bd      	mov	sp, r7
 80340c6:	bd80      	pop	{r7, pc}
 80340c8:	0803884c 	.word	0x0803884c
 80340cc:	a0000104 	.word	0xa0000104
 80340d0:	cff00000 	.word	0xcff00000

080340d4 <__NVIC_SetPriority>:
{
 80340d4:	b480      	push	{r7}
 80340d6:	b083      	sub	sp, #12
 80340d8:	af00      	add	r7, sp, #0
 80340da:	4603      	mov	r3, r0
 80340dc:	6039      	str	r1, [r7, #0]
 80340de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80340e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80340e4:	2b00      	cmp	r3, #0
 80340e6:	db0a      	blt.n	80340fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80340e8:	683b      	ldr	r3, [r7, #0]
 80340ea:	b2da      	uxtb	r2, r3
 80340ec:	490c      	ldr	r1, [pc, #48]	@ (8034120 <__NVIC_SetPriority+0x4c>)
 80340ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80340f2:	0112      	lsls	r2, r2, #4
 80340f4:	b2d2      	uxtb	r2, r2
 80340f6:	440b      	add	r3, r1
 80340f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80340fc:	e00a      	b.n	8034114 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80340fe:	683b      	ldr	r3, [r7, #0]
 8034100:	b2da      	uxtb	r2, r3
 8034102:	4908      	ldr	r1, [pc, #32]	@ (8034124 <__NVIC_SetPriority+0x50>)
 8034104:	79fb      	ldrb	r3, [r7, #7]
 8034106:	f003 030f 	and.w	r3, r3, #15
 803410a:	3b04      	subs	r3, #4
 803410c:	0112      	lsls	r2, r2, #4
 803410e:	b2d2      	uxtb	r2, r2
 8034110:	440b      	add	r3, r1
 8034112:	761a      	strb	r2, [r3, #24]
}
 8034114:	bf00      	nop
 8034116:	370c      	adds	r7, #12
 8034118:	46bd      	mov	sp, r7
 803411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803411e:	4770      	bx	lr
 8034120:	e000e100 	.word	0xe000e100
 8034124:	e000ed00 	.word	0xe000ed00

08034128 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8034128:	b580      	push	{r7, lr}
 803412a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 803412c:	4b05      	ldr	r3, [pc, #20]	@ (8034144 <SysTick_Handler+0x1c>)
 803412e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8034130:	f002 fd42 	bl	8036bb8 <xTaskGetSchedulerState>
 8034134:	4603      	mov	r3, r0
 8034136:	2b01      	cmp	r3, #1
 8034138:	d001      	beq.n	803413e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 803413a:	f000 fe45 	bl	8034dc8 <xPortSysTickHandler>
  }
}
 803413e:	bf00      	nop
 8034140:	bd80      	pop	{r7, pc}
 8034142:	bf00      	nop
 8034144:	e000e010 	.word	0xe000e010

08034148 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8034148:	b580      	push	{r7, lr}
 803414a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 803414c:	2100      	movs	r1, #0
 803414e:	f06f 0004 	mvn.w	r0, #4
 8034152:	f7ff ffbf 	bl	80340d4 <__NVIC_SetPriority>
#endif
}
 8034156:	bf00      	nop
 8034158:	bd80      	pop	{r7, pc}
	...

0803415c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 803415c:	b480      	push	{r7}
 803415e:	b083      	sub	sp, #12
 8034160:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8034162:	f3ef 8305 	mrs	r3, IPSR
 8034166:	603b      	str	r3, [r7, #0]
  return(result);
 8034168:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 803416a:	2b00      	cmp	r3, #0
 803416c:	d003      	beq.n	8034176 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 803416e:	f06f 0305 	mvn.w	r3, #5
 8034172:	607b      	str	r3, [r7, #4]
 8034174:	e00c      	b.n	8034190 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8034176:	4b0a      	ldr	r3, [pc, #40]	@ (80341a0 <osKernelInitialize+0x44>)
 8034178:	681b      	ldr	r3, [r3, #0]
 803417a:	2b00      	cmp	r3, #0
 803417c:	d105      	bne.n	803418a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 803417e:	4b08      	ldr	r3, [pc, #32]	@ (80341a0 <osKernelInitialize+0x44>)
 8034180:	2201      	movs	r2, #1
 8034182:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8034184:	2300      	movs	r3, #0
 8034186:	607b      	str	r3, [r7, #4]
 8034188:	e002      	b.n	8034190 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 803418a:	f04f 33ff 	mov.w	r3, #4294967295
 803418e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8034190:	687b      	ldr	r3, [r7, #4]
}
 8034192:	4618      	mov	r0, r3
 8034194:	370c      	adds	r7, #12
 8034196:	46bd      	mov	sp, r7
 8034198:	f85d 7b04 	ldr.w	r7, [sp], #4
 803419c:	4770      	bx	lr
 803419e:	bf00      	nop
 80341a0:	2000079c 	.word	0x2000079c

080341a4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80341a4:	b580      	push	{r7, lr}
 80341a6:	b082      	sub	sp, #8
 80341a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80341aa:	f3ef 8305 	mrs	r3, IPSR
 80341ae:	603b      	str	r3, [r7, #0]
  return(result);
 80341b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80341b2:	2b00      	cmp	r3, #0
 80341b4:	d003      	beq.n	80341be <osKernelStart+0x1a>
    stat = osErrorISR;
 80341b6:	f06f 0305 	mvn.w	r3, #5
 80341ba:	607b      	str	r3, [r7, #4]
 80341bc:	e010      	b.n	80341e0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80341be:	4b0b      	ldr	r3, [pc, #44]	@ (80341ec <osKernelStart+0x48>)
 80341c0:	681b      	ldr	r3, [r3, #0]
 80341c2:	2b01      	cmp	r3, #1
 80341c4:	d109      	bne.n	80341da <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80341c6:	f7ff ffbf 	bl	8034148 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80341ca:	4b08      	ldr	r3, [pc, #32]	@ (80341ec <osKernelStart+0x48>)
 80341cc:	2202      	movs	r2, #2
 80341ce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80341d0:	f001 fecc 	bl	8035f6c <vTaskStartScheduler>
      stat = osOK;
 80341d4:	2300      	movs	r3, #0
 80341d6:	607b      	str	r3, [r7, #4]
 80341d8:	e002      	b.n	80341e0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80341da:	f04f 33ff 	mov.w	r3, #4294967295
 80341de:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80341e0:	687b      	ldr	r3, [r7, #4]
}
 80341e2:	4618      	mov	r0, r3
 80341e4:	3708      	adds	r7, #8
 80341e6:	46bd      	mov	sp, r7
 80341e8:	bd80      	pop	{r7, pc}
 80341ea:	bf00      	nop
 80341ec:	2000079c 	.word	0x2000079c

080341f0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80341f0:	b580      	push	{r7, lr}
 80341f2:	b08e      	sub	sp, #56	@ 0x38
 80341f4:	af04      	add	r7, sp, #16
 80341f6:	60f8      	str	r0, [r7, #12]
 80341f8:	60b9      	str	r1, [r7, #8]
 80341fa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80341fc:	2300      	movs	r3, #0
 80341fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8034200:	f3ef 8305 	mrs	r3, IPSR
 8034204:	617b      	str	r3, [r7, #20]
  return(result);
 8034206:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8034208:	2b00      	cmp	r3, #0
 803420a:	d17f      	bne.n	803430c <osThreadNew+0x11c>
 803420c:	68fb      	ldr	r3, [r7, #12]
 803420e:	2b00      	cmp	r3, #0
 8034210:	d07c      	beq.n	803430c <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8034212:	2380      	movs	r3, #128	@ 0x80
 8034214:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8034216:	2318      	movs	r3, #24
 8034218:	61fb      	str	r3, [r7, #28]

    name = NULL;
 803421a:	2300      	movs	r3, #0
 803421c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 803421e:	f04f 33ff 	mov.w	r3, #4294967295
 8034222:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8034224:	687b      	ldr	r3, [r7, #4]
 8034226:	2b00      	cmp	r3, #0
 8034228:	d046      	beq.n	80342b8 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 803422a:	687b      	ldr	r3, [r7, #4]
 803422c:	681b      	ldr	r3, [r3, #0]
 803422e:	2b00      	cmp	r3, #0
 8034230:	d002      	beq.n	8034238 <osThreadNew+0x48>
        name = attr->name;
 8034232:	687b      	ldr	r3, [r7, #4]
 8034234:	681b      	ldr	r3, [r3, #0]
 8034236:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8034238:	687b      	ldr	r3, [r7, #4]
 803423a:	699b      	ldr	r3, [r3, #24]
 803423c:	2b00      	cmp	r3, #0
 803423e:	d002      	beq.n	8034246 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8034240:	687b      	ldr	r3, [r7, #4]
 8034242:	699b      	ldr	r3, [r3, #24]
 8034244:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8034246:	69fb      	ldr	r3, [r7, #28]
 8034248:	2b00      	cmp	r3, #0
 803424a:	d008      	beq.n	803425e <osThreadNew+0x6e>
 803424c:	69fb      	ldr	r3, [r7, #28]
 803424e:	2b38      	cmp	r3, #56	@ 0x38
 8034250:	d805      	bhi.n	803425e <osThreadNew+0x6e>
 8034252:	687b      	ldr	r3, [r7, #4]
 8034254:	685b      	ldr	r3, [r3, #4]
 8034256:	f003 0301 	and.w	r3, r3, #1
 803425a:	2b00      	cmp	r3, #0
 803425c:	d001      	beq.n	8034262 <osThreadNew+0x72>
        return (NULL);
 803425e:	2300      	movs	r3, #0
 8034260:	e055      	b.n	803430e <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8034262:	687b      	ldr	r3, [r7, #4]
 8034264:	695b      	ldr	r3, [r3, #20]
 8034266:	2b00      	cmp	r3, #0
 8034268:	d003      	beq.n	8034272 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 803426a:	687b      	ldr	r3, [r7, #4]
 803426c:	695b      	ldr	r3, [r3, #20]
 803426e:	089b      	lsrs	r3, r3, #2
 8034270:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8034272:	687b      	ldr	r3, [r7, #4]
 8034274:	689b      	ldr	r3, [r3, #8]
 8034276:	2b00      	cmp	r3, #0
 8034278:	d00f      	beq.n	803429a <osThreadNew+0xaa>
 803427a:	687b      	ldr	r3, [r7, #4]
 803427c:	68db      	ldr	r3, [r3, #12]
 803427e:	f5b3 7fd4 	cmp.w	r3, #424	@ 0x1a8
 8034282:	d30a      	bcc.n	803429a <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8034284:	687b      	ldr	r3, [r7, #4]
 8034286:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8034288:	2b00      	cmp	r3, #0
 803428a:	d006      	beq.n	803429a <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 803428c:	687b      	ldr	r3, [r7, #4]
 803428e:	695b      	ldr	r3, [r3, #20]
 8034290:	2b00      	cmp	r3, #0
 8034292:	d002      	beq.n	803429a <osThreadNew+0xaa>
        mem = 1;
 8034294:	2301      	movs	r3, #1
 8034296:	61bb      	str	r3, [r7, #24]
 8034298:	e010      	b.n	80342bc <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 803429a:	687b      	ldr	r3, [r7, #4]
 803429c:	689b      	ldr	r3, [r3, #8]
 803429e:	2b00      	cmp	r3, #0
 80342a0:	d10c      	bne.n	80342bc <osThreadNew+0xcc>
 80342a2:	687b      	ldr	r3, [r7, #4]
 80342a4:	68db      	ldr	r3, [r3, #12]
 80342a6:	2b00      	cmp	r3, #0
 80342a8:	d108      	bne.n	80342bc <osThreadNew+0xcc>
 80342aa:	687b      	ldr	r3, [r7, #4]
 80342ac:	691b      	ldr	r3, [r3, #16]
 80342ae:	2b00      	cmp	r3, #0
 80342b0:	d104      	bne.n	80342bc <osThreadNew+0xcc>
          mem = 0;
 80342b2:	2300      	movs	r3, #0
 80342b4:	61bb      	str	r3, [r7, #24]
 80342b6:	e001      	b.n	80342bc <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 80342b8:	2300      	movs	r3, #0
 80342ba:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80342bc:	69bb      	ldr	r3, [r7, #24]
 80342be:	2b01      	cmp	r3, #1
 80342c0:	d110      	bne.n	80342e4 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80342c2:	687b      	ldr	r3, [r7, #4]
 80342c4:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80342c6:	687a      	ldr	r2, [r7, #4]
 80342c8:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80342ca:	9202      	str	r2, [sp, #8]
 80342cc:	9301      	str	r3, [sp, #4]
 80342ce:	69fb      	ldr	r3, [r7, #28]
 80342d0:	9300      	str	r3, [sp, #0]
 80342d2:	68bb      	ldr	r3, [r7, #8]
 80342d4:	6a3a      	ldr	r2, [r7, #32]
 80342d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80342d8:	68f8      	ldr	r0, [r7, #12]
 80342da:	f001 fb01 	bl	80358e0 <xTaskCreateStatic>
 80342de:	4603      	mov	r3, r0
 80342e0:	613b      	str	r3, [r7, #16]
 80342e2:	e013      	b.n	803430c <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 80342e4:	69bb      	ldr	r3, [r7, #24]
 80342e6:	2b00      	cmp	r3, #0
 80342e8:	d110      	bne.n	803430c <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80342ea:	6a3b      	ldr	r3, [r7, #32]
 80342ec:	b29a      	uxth	r2, r3
 80342ee:	f107 0310 	add.w	r3, r7, #16
 80342f2:	9301      	str	r3, [sp, #4]
 80342f4:	69fb      	ldr	r3, [r7, #28]
 80342f6:	9300      	str	r3, [sp, #0]
 80342f8:	68bb      	ldr	r3, [r7, #8]
 80342fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80342fc:	68f8      	ldr	r0, [r7, #12]
 80342fe:	f001 fb51 	bl	80359a4 <xTaskCreate>
 8034302:	4603      	mov	r3, r0
 8034304:	2b01      	cmp	r3, #1
 8034306:	d001      	beq.n	803430c <osThreadNew+0x11c>
            hTask = NULL;
 8034308:	2300      	movs	r3, #0
 803430a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 803430c:	693b      	ldr	r3, [r7, #16]
}
 803430e:	4618      	mov	r0, r3
 8034310:	3728      	adds	r7, #40	@ 0x28
 8034312:	46bd      	mov	sp, r7
 8034314:	bd80      	pop	{r7, pc}

08034316 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8034316:	b580      	push	{r7, lr}
 8034318:	b084      	sub	sp, #16
 803431a:	af00      	add	r7, sp, #0
 803431c:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 803431e:	6878      	ldr	r0, [r7, #4]
 8034320:	f003 f930 	bl	8037584 <pvTimerGetTimerID>
 8034324:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8034326:	68fb      	ldr	r3, [r7, #12]
 8034328:	2b00      	cmp	r3, #0
 803432a:	d005      	beq.n	8034338 <TimerCallback+0x22>
    callb->func (callb->arg);
 803432c:	68fb      	ldr	r3, [r7, #12]
 803432e:	681b      	ldr	r3, [r3, #0]
 8034330:	68fa      	ldr	r2, [r7, #12]
 8034332:	6852      	ldr	r2, [r2, #4]
 8034334:	4610      	mov	r0, r2
 8034336:	4798      	blx	r3
  }
}
 8034338:	bf00      	nop
 803433a:	3710      	adds	r7, #16
 803433c:	46bd      	mov	sp, r7
 803433e:	bd80      	pop	{r7, pc}

08034340 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8034340:	b580      	push	{r7, lr}
 8034342:	b08c      	sub	sp, #48	@ 0x30
 8034344:	af02      	add	r7, sp, #8
 8034346:	60f8      	str	r0, [r7, #12]
 8034348:	607a      	str	r2, [r7, #4]
 803434a:	603b      	str	r3, [r7, #0]
 803434c:	460b      	mov	r3, r1
 803434e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8034350:	2300      	movs	r3, #0
 8034352:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8034354:	f3ef 8305 	mrs	r3, IPSR
 8034358:	613b      	str	r3, [r7, #16]
  return(result);
 803435a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 803435c:	2b00      	cmp	r3, #0
 803435e:	d163      	bne.n	8034428 <osTimerNew+0xe8>
 8034360:	68fb      	ldr	r3, [r7, #12]
 8034362:	2b00      	cmp	r3, #0
 8034364:	d060      	beq.n	8034428 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8034366:	2008      	movs	r0, #8
 8034368:	f000 f8c8 	bl	80344fc <pvPortMalloc>
 803436c:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 803436e:	697b      	ldr	r3, [r7, #20]
 8034370:	2b00      	cmp	r3, #0
 8034372:	d059      	beq.n	8034428 <osTimerNew+0xe8>
      callb->func = func;
 8034374:	697b      	ldr	r3, [r7, #20]
 8034376:	68fa      	ldr	r2, [r7, #12]
 8034378:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 803437a:	697b      	ldr	r3, [r7, #20]
 803437c:	687a      	ldr	r2, [r7, #4]
 803437e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8034380:	7afb      	ldrb	r3, [r7, #11]
 8034382:	2b00      	cmp	r3, #0
 8034384:	d102      	bne.n	803438c <osTimerNew+0x4c>
        reload = pdFALSE;
 8034386:	2300      	movs	r3, #0
 8034388:	61fb      	str	r3, [r7, #28]
 803438a:	e001      	b.n	8034390 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 803438c:	2301      	movs	r3, #1
 803438e:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8034390:	f04f 33ff 	mov.w	r3, #4294967295
 8034394:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8034396:	2300      	movs	r3, #0
 8034398:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 803439a:	683b      	ldr	r3, [r7, #0]
 803439c:	2b00      	cmp	r3, #0
 803439e:	d01c      	beq.n	80343da <osTimerNew+0x9a>
        if (attr->name != NULL) {
 80343a0:	683b      	ldr	r3, [r7, #0]
 80343a2:	681b      	ldr	r3, [r3, #0]
 80343a4:	2b00      	cmp	r3, #0
 80343a6:	d002      	beq.n	80343ae <osTimerNew+0x6e>
          name = attr->name;
 80343a8:	683b      	ldr	r3, [r7, #0]
 80343aa:	681b      	ldr	r3, [r3, #0]
 80343ac:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80343ae:	683b      	ldr	r3, [r7, #0]
 80343b0:	689b      	ldr	r3, [r3, #8]
 80343b2:	2b00      	cmp	r3, #0
 80343b4:	d006      	beq.n	80343c4 <osTimerNew+0x84>
 80343b6:	683b      	ldr	r3, [r7, #0]
 80343b8:	68db      	ldr	r3, [r3, #12]
 80343ba:	2b2b      	cmp	r3, #43	@ 0x2b
 80343bc:	d902      	bls.n	80343c4 <osTimerNew+0x84>
          mem = 1;
 80343be:	2301      	movs	r3, #1
 80343c0:	61bb      	str	r3, [r7, #24]
 80343c2:	e00c      	b.n	80343de <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80343c4:	683b      	ldr	r3, [r7, #0]
 80343c6:	689b      	ldr	r3, [r3, #8]
 80343c8:	2b00      	cmp	r3, #0
 80343ca:	d108      	bne.n	80343de <osTimerNew+0x9e>
 80343cc:	683b      	ldr	r3, [r7, #0]
 80343ce:	68db      	ldr	r3, [r3, #12]
 80343d0:	2b00      	cmp	r3, #0
 80343d2:	d104      	bne.n	80343de <osTimerNew+0x9e>
            mem = 0;
 80343d4:	2300      	movs	r3, #0
 80343d6:	61bb      	str	r3, [r7, #24]
 80343d8:	e001      	b.n	80343de <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 80343da:	2300      	movs	r3, #0
 80343dc:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80343de:	69bb      	ldr	r3, [r7, #24]
 80343e0:	2b01      	cmp	r3, #1
 80343e2:	d10c      	bne.n	80343fe <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80343e4:	683b      	ldr	r3, [r7, #0]
 80343e6:	689b      	ldr	r3, [r3, #8]
 80343e8:	9301      	str	r3, [sp, #4]
 80343ea:	4b12      	ldr	r3, [pc, #72]	@ (8034434 <osTimerNew+0xf4>)
 80343ec:	9300      	str	r3, [sp, #0]
 80343ee:	697b      	ldr	r3, [r7, #20]
 80343f0:	69fa      	ldr	r2, [r7, #28]
 80343f2:	2101      	movs	r1, #1
 80343f4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80343f6:	f002 fd38 	bl	8036e6a <xTimerCreateStatic>
 80343fa:	6238      	str	r0, [r7, #32]
 80343fc:	e00b      	b.n	8034416 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 80343fe:	69bb      	ldr	r3, [r7, #24]
 8034400:	2b00      	cmp	r3, #0
 8034402:	d108      	bne.n	8034416 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8034404:	4b0b      	ldr	r3, [pc, #44]	@ (8034434 <osTimerNew+0xf4>)
 8034406:	9300      	str	r3, [sp, #0]
 8034408:	697b      	ldr	r3, [r7, #20]
 803440a:	69fa      	ldr	r2, [r7, #28]
 803440c:	2101      	movs	r1, #1
 803440e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8034410:	f002 fd0a 	bl	8036e28 <xTimerCreate>
 8034414:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8034416:	6a3b      	ldr	r3, [r7, #32]
 8034418:	2b00      	cmp	r3, #0
 803441a:	d105      	bne.n	8034428 <osTimerNew+0xe8>
 803441c:	697b      	ldr	r3, [r7, #20]
 803441e:	2b00      	cmp	r3, #0
 8034420:	d002      	beq.n	8034428 <osTimerNew+0xe8>
        vPortFree (callb);
 8034422:	6978      	ldr	r0, [r7, #20]
 8034424:	f000 f93e 	bl	80346a4 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8034428:	6a3b      	ldr	r3, [r7, #32]
}
 803442a:	4618      	mov	r0, r3
 803442c:	3728      	adds	r7, #40	@ 0x28
 803442e:	46bd      	mov	sp, r7
 8034430:	bd80      	pop	{r7, pc}
 8034432:	bf00      	nop
 8034434:	08034317 	.word	0x08034317

08034438 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8034438:	b580      	push	{r7, lr}
 803443a:	b088      	sub	sp, #32
 803443c:	af02      	add	r7, sp, #8
 803443e:	6078      	str	r0, [r7, #4]
 8034440:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8034442:	687b      	ldr	r3, [r7, #4]
 8034444:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8034446:	f3ef 8305 	mrs	r3, IPSR
 803444a:	60fb      	str	r3, [r7, #12]
  return(result);
 803444c:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 803444e:	2b00      	cmp	r3, #0
 8034450:	d003      	beq.n	803445a <osTimerStart+0x22>
    stat = osErrorISR;
 8034452:	f06f 0305 	mvn.w	r3, #5
 8034456:	617b      	str	r3, [r7, #20]
 8034458:	e017      	b.n	803448a <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 803445a:	693b      	ldr	r3, [r7, #16]
 803445c:	2b00      	cmp	r3, #0
 803445e:	d103      	bne.n	8034468 <osTimerStart+0x30>
    stat = osErrorParameter;
 8034460:	f06f 0303 	mvn.w	r3, #3
 8034464:	617b      	str	r3, [r7, #20]
 8034466:	e010      	b.n	803448a <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8034468:	2300      	movs	r3, #0
 803446a:	9300      	str	r3, [sp, #0]
 803446c:	2300      	movs	r3, #0
 803446e:	683a      	ldr	r2, [r7, #0]
 8034470:	2104      	movs	r1, #4
 8034472:	6938      	ldr	r0, [r7, #16]
 8034474:	f002 fd76 	bl	8036f64 <xTimerGenericCommand>
 8034478:	4603      	mov	r3, r0
 803447a:	2b01      	cmp	r3, #1
 803447c:	d102      	bne.n	8034484 <osTimerStart+0x4c>
      stat = osOK;
 803447e:	2300      	movs	r3, #0
 8034480:	617b      	str	r3, [r7, #20]
 8034482:	e002      	b.n	803448a <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8034484:	f06f 0302 	mvn.w	r3, #2
 8034488:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 803448a:	697b      	ldr	r3, [r7, #20]
}
 803448c:	4618      	mov	r0, r3
 803448e:	3718      	adds	r7, #24
 8034490:	46bd      	mov	sp, r7
 8034492:	bd80      	pop	{r7, pc}

08034494 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8034494:	b480      	push	{r7}
 8034496:	b085      	sub	sp, #20
 8034498:	af00      	add	r7, sp, #0
 803449a:	60f8      	str	r0, [r7, #12]
 803449c:	60b9      	str	r1, [r7, #8]
 803449e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80344a0:	68fb      	ldr	r3, [r7, #12]
 80344a2:	4a07      	ldr	r2, [pc, #28]	@ (80344c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80344a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80344a6:	68bb      	ldr	r3, [r7, #8]
 80344a8:	4a06      	ldr	r2, [pc, #24]	@ (80344c4 <vApplicationGetIdleTaskMemory+0x30>)
 80344aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80344ac:	687b      	ldr	r3, [r7, #4]
 80344ae:	2280      	movs	r2, #128	@ 0x80
 80344b0:	601a      	str	r2, [r3, #0]
}
 80344b2:	bf00      	nop
 80344b4:	3714      	adds	r7, #20
 80344b6:	46bd      	mov	sp, r7
 80344b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80344bc:	4770      	bx	lr
 80344be:	bf00      	nop
 80344c0:	200007a0 	.word	0x200007a0
 80344c4:	20000948 	.word	0x20000948

080344c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80344c8:	b480      	push	{r7}
 80344ca:	b085      	sub	sp, #20
 80344cc:	af00      	add	r7, sp, #0
 80344ce:	60f8      	str	r0, [r7, #12]
 80344d0:	60b9      	str	r1, [r7, #8]
 80344d2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80344d4:	68fb      	ldr	r3, [r7, #12]
 80344d6:	4a07      	ldr	r2, [pc, #28]	@ (80344f4 <vApplicationGetTimerTaskMemory+0x2c>)
 80344d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80344da:	68bb      	ldr	r3, [r7, #8]
 80344dc:	4a06      	ldr	r2, [pc, #24]	@ (80344f8 <vApplicationGetTimerTaskMemory+0x30>)
 80344de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80344e0:	687b      	ldr	r3, [r7, #4]
 80344e2:	2280      	movs	r2, #128	@ 0x80
 80344e4:	601a      	str	r2, [r3, #0]
}
 80344e6:	bf00      	nop
 80344e8:	3714      	adds	r7, #20
 80344ea:	46bd      	mov	sp, r7
 80344ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80344f0:	4770      	bx	lr
 80344f2:	bf00      	nop
 80344f4:	20000b48 	.word	0x20000b48
 80344f8:	20000cf0 	.word	0x20000cf0

080344fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80344fc:	b580      	push	{r7, lr}
 80344fe:	b08a      	sub	sp, #40	@ 0x28
 8034500:	af00      	add	r7, sp, #0
 8034502:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8034504:	2300      	movs	r3, #0
 8034506:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8034508:	f001 fda4 	bl	8036054 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 803450c:	4b5f      	ldr	r3, [pc, #380]	@ (803468c <pvPortMalloc+0x190>)
 803450e:	681b      	ldr	r3, [r3, #0]
 8034510:	2b00      	cmp	r3, #0
 8034512:	d101      	bne.n	8034518 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8034514:	f000 f92a 	bl	803476c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8034518:	4b5d      	ldr	r3, [pc, #372]	@ (8034690 <pvPortMalloc+0x194>)
 803451a:	681a      	ldr	r2, [r3, #0]
 803451c:	687b      	ldr	r3, [r7, #4]
 803451e:	4013      	ands	r3, r2
 8034520:	2b00      	cmp	r3, #0
 8034522:	f040 8095 	bne.w	8034650 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8034526:	687b      	ldr	r3, [r7, #4]
 8034528:	2b00      	cmp	r3, #0
 803452a:	d01e      	beq.n	803456a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 803452c:	2208      	movs	r2, #8
 803452e:	687b      	ldr	r3, [r7, #4]
 8034530:	4413      	add	r3, r2
 8034532:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8034534:	687b      	ldr	r3, [r7, #4]
 8034536:	f003 0307 	and.w	r3, r3, #7
 803453a:	2b00      	cmp	r3, #0
 803453c:	d015      	beq.n	803456a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 803453e:	687b      	ldr	r3, [r7, #4]
 8034540:	f023 0307 	bic.w	r3, r3, #7
 8034544:	3308      	adds	r3, #8
 8034546:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8034548:	687b      	ldr	r3, [r7, #4]
 803454a:	f003 0307 	and.w	r3, r3, #7
 803454e:	2b00      	cmp	r3, #0
 8034550:	d00b      	beq.n	803456a <pvPortMalloc+0x6e>
	__asm volatile
 8034552:	f04f 0310 	mov.w	r3, #16
 8034556:	f383 8811 	msr	BASEPRI, r3
 803455a:	f3bf 8f6f 	isb	sy
 803455e:	f3bf 8f4f 	dsb	sy
 8034562:	617b      	str	r3, [r7, #20]
}
 8034564:	bf00      	nop
 8034566:	bf00      	nop
 8034568:	e7fd      	b.n	8034566 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 803456a:	687b      	ldr	r3, [r7, #4]
 803456c:	2b00      	cmp	r3, #0
 803456e:	d06f      	beq.n	8034650 <pvPortMalloc+0x154>
 8034570:	4b48      	ldr	r3, [pc, #288]	@ (8034694 <pvPortMalloc+0x198>)
 8034572:	681b      	ldr	r3, [r3, #0]
 8034574:	687a      	ldr	r2, [r7, #4]
 8034576:	429a      	cmp	r2, r3
 8034578:	d86a      	bhi.n	8034650 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 803457a:	4b47      	ldr	r3, [pc, #284]	@ (8034698 <pvPortMalloc+0x19c>)
 803457c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 803457e:	4b46      	ldr	r3, [pc, #280]	@ (8034698 <pvPortMalloc+0x19c>)
 8034580:	681b      	ldr	r3, [r3, #0]
 8034582:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8034584:	e004      	b.n	8034590 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8034586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8034588:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 803458a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 803458c:	681b      	ldr	r3, [r3, #0]
 803458e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8034590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8034592:	685b      	ldr	r3, [r3, #4]
 8034594:	687a      	ldr	r2, [r7, #4]
 8034596:	429a      	cmp	r2, r3
 8034598:	d903      	bls.n	80345a2 <pvPortMalloc+0xa6>
 803459a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 803459c:	681b      	ldr	r3, [r3, #0]
 803459e:	2b00      	cmp	r3, #0
 80345a0:	d1f1      	bne.n	8034586 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80345a2:	4b3a      	ldr	r3, [pc, #232]	@ (803468c <pvPortMalloc+0x190>)
 80345a4:	681b      	ldr	r3, [r3, #0]
 80345a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80345a8:	429a      	cmp	r2, r3
 80345aa:	d051      	beq.n	8034650 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80345ac:	6a3b      	ldr	r3, [r7, #32]
 80345ae:	681b      	ldr	r3, [r3, #0]
 80345b0:	2208      	movs	r2, #8
 80345b2:	4413      	add	r3, r2
 80345b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80345b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80345b8:	681a      	ldr	r2, [r3, #0]
 80345ba:	6a3b      	ldr	r3, [r7, #32]
 80345bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80345be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80345c0:	685a      	ldr	r2, [r3, #4]
 80345c2:	687b      	ldr	r3, [r7, #4]
 80345c4:	1ad2      	subs	r2, r2, r3
 80345c6:	2308      	movs	r3, #8
 80345c8:	005b      	lsls	r3, r3, #1
 80345ca:	429a      	cmp	r2, r3
 80345cc:	d920      	bls.n	8034610 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80345ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80345d0:	687b      	ldr	r3, [r7, #4]
 80345d2:	4413      	add	r3, r2
 80345d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80345d6:	69bb      	ldr	r3, [r7, #24]
 80345d8:	f003 0307 	and.w	r3, r3, #7
 80345dc:	2b00      	cmp	r3, #0
 80345de:	d00b      	beq.n	80345f8 <pvPortMalloc+0xfc>
	__asm volatile
 80345e0:	f04f 0310 	mov.w	r3, #16
 80345e4:	f383 8811 	msr	BASEPRI, r3
 80345e8:	f3bf 8f6f 	isb	sy
 80345ec:	f3bf 8f4f 	dsb	sy
 80345f0:	613b      	str	r3, [r7, #16]
}
 80345f2:	bf00      	nop
 80345f4:	bf00      	nop
 80345f6:	e7fd      	b.n	80345f4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80345f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80345fa:	685a      	ldr	r2, [r3, #4]
 80345fc:	687b      	ldr	r3, [r7, #4]
 80345fe:	1ad2      	subs	r2, r2, r3
 8034600:	69bb      	ldr	r3, [r7, #24]
 8034602:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8034604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8034606:	687a      	ldr	r2, [r7, #4]
 8034608:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 803460a:	69b8      	ldr	r0, [r7, #24]
 803460c:	f000 f910 	bl	8034830 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8034610:	4b20      	ldr	r3, [pc, #128]	@ (8034694 <pvPortMalloc+0x198>)
 8034612:	681a      	ldr	r2, [r3, #0]
 8034614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8034616:	685b      	ldr	r3, [r3, #4]
 8034618:	1ad3      	subs	r3, r2, r3
 803461a:	4a1e      	ldr	r2, [pc, #120]	@ (8034694 <pvPortMalloc+0x198>)
 803461c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 803461e:	4b1d      	ldr	r3, [pc, #116]	@ (8034694 <pvPortMalloc+0x198>)
 8034620:	681a      	ldr	r2, [r3, #0]
 8034622:	4b1e      	ldr	r3, [pc, #120]	@ (803469c <pvPortMalloc+0x1a0>)
 8034624:	681b      	ldr	r3, [r3, #0]
 8034626:	429a      	cmp	r2, r3
 8034628:	d203      	bcs.n	8034632 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 803462a:	4b1a      	ldr	r3, [pc, #104]	@ (8034694 <pvPortMalloc+0x198>)
 803462c:	681b      	ldr	r3, [r3, #0]
 803462e:	4a1b      	ldr	r2, [pc, #108]	@ (803469c <pvPortMalloc+0x1a0>)
 8034630:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8034632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8034634:	685a      	ldr	r2, [r3, #4]
 8034636:	4b16      	ldr	r3, [pc, #88]	@ (8034690 <pvPortMalloc+0x194>)
 8034638:	681b      	ldr	r3, [r3, #0]
 803463a:	431a      	orrs	r2, r3
 803463c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 803463e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8034640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8034642:	2200      	movs	r2, #0
 8034644:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8034646:	4b16      	ldr	r3, [pc, #88]	@ (80346a0 <pvPortMalloc+0x1a4>)
 8034648:	681b      	ldr	r3, [r3, #0]
 803464a:	3301      	adds	r3, #1
 803464c:	4a14      	ldr	r2, [pc, #80]	@ (80346a0 <pvPortMalloc+0x1a4>)
 803464e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8034650:	f001 fd0e 	bl	8036070 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8034654:	69fb      	ldr	r3, [r7, #28]
 8034656:	2b00      	cmp	r3, #0
 8034658:	d101      	bne.n	803465e <pvPortMalloc+0x162>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 803465a:	f7f2 fd6f 	bl	802713c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 803465e:	69fb      	ldr	r3, [r7, #28]
 8034660:	f003 0307 	and.w	r3, r3, #7
 8034664:	2b00      	cmp	r3, #0
 8034666:	d00b      	beq.n	8034680 <pvPortMalloc+0x184>
	__asm volatile
 8034668:	f04f 0310 	mov.w	r3, #16
 803466c:	f383 8811 	msr	BASEPRI, r3
 8034670:	f3bf 8f6f 	isb	sy
 8034674:	f3bf 8f4f 	dsb	sy
 8034678:	60fb      	str	r3, [r7, #12]
}
 803467a:	bf00      	nop
 803467c:	bf00      	nop
 803467e:	e7fd      	b.n	803467c <pvPortMalloc+0x180>
	return pvReturn;
 8034680:	69fb      	ldr	r3, [r7, #28]
}
 8034682:	4618      	mov	r0, r3
 8034684:	3728      	adds	r7, #40	@ 0x28
 8034686:	46bd      	mov	sp, r7
 8034688:	bd80      	pop	{r7, pc}
 803468a:	bf00      	nop
 803468c:	20003608 	.word	0x20003608
 8034690:	2000361c 	.word	0x2000361c
 8034694:	2000360c 	.word	0x2000360c
 8034698:	20003600 	.word	0x20003600
 803469c:	20003610 	.word	0x20003610
 80346a0:	20003614 	.word	0x20003614

080346a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80346a4:	b580      	push	{r7, lr}
 80346a6:	b086      	sub	sp, #24
 80346a8:	af00      	add	r7, sp, #0
 80346aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80346ac:	687b      	ldr	r3, [r7, #4]
 80346ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80346b0:	687b      	ldr	r3, [r7, #4]
 80346b2:	2b00      	cmp	r3, #0
 80346b4:	d04f      	beq.n	8034756 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80346b6:	2308      	movs	r3, #8
 80346b8:	425b      	negs	r3, r3
 80346ba:	697a      	ldr	r2, [r7, #20]
 80346bc:	4413      	add	r3, r2
 80346be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80346c0:	697b      	ldr	r3, [r7, #20]
 80346c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80346c4:	693b      	ldr	r3, [r7, #16]
 80346c6:	685a      	ldr	r2, [r3, #4]
 80346c8:	4b25      	ldr	r3, [pc, #148]	@ (8034760 <vPortFree+0xbc>)
 80346ca:	681b      	ldr	r3, [r3, #0]
 80346cc:	4013      	ands	r3, r2
 80346ce:	2b00      	cmp	r3, #0
 80346d0:	d10b      	bne.n	80346ea <vPortFree+0x46>
	__asm volatile
 80346d2:	f04f 0310 	mov.w	r3, #16
 80346d6:	f383 8811 	msr	BASEPRI, r3
 80346da:	f3bf 8f6f 	isb	sy
 80346de:	f3bf 8f4f 	dsb	sy
 80346e2:	60fb      	str	r3, [r7, #12]
}
 80346e4:	bf00      	nop
 80346e6:	bf00      	nop
 80346e8:	e7fd      	b.n	80346e6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80346ea:	693b      	ldr	r3, [r7, #16]
 80346ec:	681b      	ldr	r3, [r3, #0]
 80346ee:	2b00      	cmp	r3, #0
 80346f0:	d00b      	beq.n	803470a <vPortFree+0x66>
	__asm volatile
 80346f2:	f04f 0310 	mov.w	r3, #16
 80346f6:	f383 8811 	msr	BASEPRI, r3
 80346fa:	f3bf 8f6f 	isb	sy
 80346fe:	f3bf 8f4f 	dsb	sy
 8034702:	60bb      	str	r3, [r7, #8]
}
 8034704:	bf00      	nop
 8034706:	bf00      	nop
 8034708:	e7fd      	b.n	8034706 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 803470a:	693b      	ldr	r3, [r7, #16]
 803470c:	685a      	ldr	r2, [r3, #4]
 803470e:	4b14      	ldr	r3, [pc, #80]	@ (8034760 <vPortFree+0xbc>)
 8034710:	681b      	ldr	r3, [r3, #0]
 8034712:	4013      	ands	r3, r2
 8034714:	2b00      	cmp	r3, #0
 8034716:	d01e      	beq.n	8034756 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8034718:	693b      	ldr	r3, [r7, #16]
 803471a:	681b      	ldr	r3, [r3, #0]
 803471c:	2b00      	cmp	r3, #0
 803471e:	d11a      	bne.n	8034756 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8034720:	693b      	ldr	r3, [r7, #16]
 8034722:	685a      	ldr	r2, [r3, #4]
 8034724:	4b0e      	ldr	r3, [pc, #56]	@ (8034760 <vPortFree+0xbc>)
 8034726:	681b      	ldr	r3, [r3, #0]
 8034728:	43db      	mvns	r3, r3
 803472a:	401a      	ands	r2, r3
 803472c:	693b      	ldr	r3, [r7, #16]
 803472e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8034730:	f001 fc90 	bl	8036054 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8034734:	693b      	ldr	r3, [r7, #16]
 8034736:	685a      	ldr	r2, [r3, #4]
 8034738:	4b0a      	ldr	r3, [pc, #40]	@ (8034764 <vPortFree+0xc0>)
 803473a:	681b      	ldr	r3, [r3, #0]
 803473c:	4413      	add	r3, r2
 803473e:	4a09      	ldr	r2, [pc, #36]	@ (8034764 <vPortFree+0xc0>)
 8034740:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8034742:	6938      	ldr	r0, [r7, #16]
 8034744:	f000 f874 	bl	8034830 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8034748:	4b07      	ldr	r3, [pc, #28]	@ (8034768 <vPortFree+0xc4>)
 803474a:	681b      	ldr	r3, [r3, #0]
 803474c:	3301      	adds	r3, #1
 803474e:	4a06      	ldr	r2, [pc, #24]	@ (8034768 <vPortFree+0xc4>)
 8034750:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8034752:	f001 fc8d 	bl	8036070 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8034756:	bf00      	nop
 8034758:	3718      	adds	r7, #24
 803475a:	46bd      	mov	sp, r7
 803475c:	bd80      	pop	{r7, pc}
 803475e:	bf00      	nop
 8034760:	2000361c 	.word	0x2000361c
 8034764:	2000360c 	.word	0x2000360c
 8034768:	20003618 	.word	0x20003618

0803476c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 803476c:	b480      	push	{r7}
 803476e:	b085      	sub	sp, #20
 8034770:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8034772:	f242 7310 	movw	r3, #10000	@ 0x2710
 8034776:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8034778:	4b27      	ldr	r3, [pc, #156]	@ (8034818 <prvHeapInit+0xac>)
 803477a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 803477c:	68fb      	ldr	r3, [r7, #12]
 803477e:	f003 0307 	and.w	r3, r3, #7
 8034782:	2b00      	cmp	r3, #0
 8034784:	d00c      	beq.n	80347a0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8034786:	68fb      	ldr	r3, [r7, #12]
 8034788:	3307      	adds	r3, #7
 803478a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 803478c:	68fb      	ldr	r3, [r7, #12]
 803478e:	f023 0307 	bic.w	r3, r3, #7
 8034792:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8034794:	68ba      	ldr	r2, [r7, #8]
 8034796:	68fb      	ldr	r3, [r7, #12]
 8034798:	1ad3      	subs	r3, r2, r3
 803479a:	4a1f      	ldr	r2, [pc, #124]	@ (8034818 <prvHeapInit+0xac>)
 803479c:	4413      	add	r3, r2
 803479e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80347a0:	68fb      	ldr	r3, [r7, #12]
 80347a2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80347a4:	4a1d      	ldr	r2, [pc, #116]	@ (803481c <prvHeapInit+0xb0>)
 80347a6:	687b      	ldr	r3, [r7, #4]
 80347a8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80347aa:	4b1c      	ldr	r3, [pc, #112]	@ (803481c <prvHeapInit+0xb0>)
 80347ac:	2200      	movs	r2, #0
 80347ae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80347b0:	687b      	ldr	r3, [r7, #4]
 80347b2:	68ba      	ldr	r2, [r7, #8]
 80347b4:	4413      	add	r3, r2
 80347b6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80347b8:	2208      	movs	r2, #8
 80347ba:	68fb      	ldr	r3, [r7, #12]
 80347bc:	1a9b      	subs	r3, r3, r2
 80347be:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80347c0:	68fb      	ldr	r3, [r7, #12]
 80347c2:	f023 0307 	bic.w	r3, r3, #7
 80347c6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80347c8:	68fb      	ldr	r3, [r7, #12]
 80347ca:	4a15      	ldr	r2, [pc, #84]	@ (8034820 <prvHeapInit+0xb4>)
 80347cc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80347ce:	4b14      	ldr	r3, [pc, #80]	@ (8034820 <prvHeapInit+0xb4>)
 80347d0:	681b      	ldr	r3, [r3, #0]
 80347d2:	2200      	movs	r2, #0
 80347d4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80347d6:	4b12      	ldr	r3, [pc, #72]	@ (8034820 <prvHeapInit+0xb4>)
 80347d8:	681b      	ldr	r3, [r3, #0]
 80347da:	2200      	movs	r2, #0
 80347dc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80347de:	687b      	ldr	r3, [r7, #4]
 80347e0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80347e2:	683b      	ldr	r3, [r7, #0]
 80347e4:	68fa      	ldr	r2, [r7, #12]
 80347e6:	1ad2      	subs	r2, r2, r3
 80347e8:	683b      	ldr	r3, [r7, #0]
 80347ea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80347ec:	4b0c      	ldr	r3, [pc, #48]	@ (8034820 <prvHeapInit+0xb4>)
 80347ee:	681a      	ldr	r2, [r3, #0]
 80347f0:	683b      	ldr	r3, [r7, #0]
 80347f2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80347f4:	683b      	ldr	r3, [r7, #0]
 80347f6:	685b      	ldr	r3, [r3, #4]
 80347f8:	4a0a      	ldr	r2, [pc, #40]	@ (8034824 <prvHeapInit+0xb8>)
 80347fa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80347fc:	683b      	ldr	r3, [r7, #0]
 80347fe:	685b      	ldr	r3, [r3, #4]
 8034800:	4a09      	ldr	r2, [pc, #36]	@ (8034828 <prvHeapInit+0xbc>)
 8034802:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8034804:	4b09      	ldr	r3, [pc, #36]	@ (803482c <prvHeapInit+0xc0>)
 8034806:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 803480a:	601a      	str	r2, [r3, #0]
}
 803480c:	bf00      	nop
 803480e:	3714      	adds	r7, #20
 8034810:	46bd      	mov	sp, r7
 8034812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034816:	4770      	bx	lr
 8034818:	20000ef0 	.word	0x20000ef0
 803481c:	20003600 	.word	0x20003600
 8034820:	20003608 	.word	0x20003608
 8034824:	20003610 	.word	0x20003610
 8034828:	2000360c 	.word	0x2000360c
 803482c:	2000361c 	.word	0x2000361c

08034830 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8034830:	b480      	push	{r7}
 8034832:	b085      	sub	sp, #20
 8034834:	af00      	add	r7, sp, #0
 8034836:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8034838:	4b28      	ldr	r3, [pc, #160]	@ (80348dc <prvInsertBlockIntoFreeList+0xac>)
 803483a:	60fb      	str	r3, [r7, #12]
 803483c:	e002      	b.n	8034844 <prvInsertBlockIntoFreeList+0x14>
 803483e:	68fb      	ldr	r3, [r7, #12]
 8034840:	681b      	ldr	r3, [r3, #0]
 8034842:	60fb      	str	r3, [r7, #12]
 8034844:	68fb      	ldr	r3, [r7, #12]
 8034846:	681b      	ldr	r3, [r3, #0]
 8034848:	687a      	ldr	r2, [r7, #4]
 803484a:	429a      	cmp	r2, r3
 803484c:	d8f7      	bhi.n	803483e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 803484e:	68fb      	ldr	r3, [r7, #12]
 8034850:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8034852:	68fb      	ldr	r3, [r7, #12]
 8034854:	685b      	ldr	r3, [r3, #4]
 8034856:	68ba      	ldr	r2, [r7, #8]
 8034858:	4413      	add	r3, r2
 803485a:	687a      	ldr	r2, [r7, #4]
 803485c:	429a      	cmp	r2, r3
 803485e:	d108      	bne.n	8034872 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8034860:	68fb      	ldr	r3, [r7, #12]
 8034862:	685a      	ldr	r2, [r3, #4]
 8034864:	687b      	ldr	r3, [r7, #4]
 8034866:	685b      	ldr	r3, [r3, #4]
 8034868:	441a      	add	r2, r3
 803486a:	68fb      	ldr	r3, [r7, #12]
 803486c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 803486e:	68fb      	ldr	r3, [r7, #12]
 8034870:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8034872:	687b      	ldr	r3, [r7, #4]
 8034874:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8034876:	687b      	ldr	r3, [r7, #4]
 8034878:	685b      	ldr	r3, [r3, #4]
 803487a:	68ba      	ldr	r2, [r7, #8]
 803487c:	441a      	add	r2, r3
 803487e:	68fb      	ldr	r3, [r7, #12]
 8034880:	681b      	ldr	r3, [r3, #0]
 8034882:	429a      	cmp	r2, r3
 8034884:	d118      	bne.n	80348b8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8034886:	68fb      	ldr	r3, [r7, #12]
 8034888:	681a      	ldr	r2, [r3, #0]
 803488a:	4b15      	ldr	r3, [pc, #84]	@ (80348e0 <prvInsertBlockIntoFreeList+0xb0>)
 803488c:	681b      	ldr	r3, [r3, #0]
 803488e:	429a      	cmp	r2, r3
 8034890:	d00d      	beq.n	80348ae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8034892:	687b      	ldr	r3, [r7, #4]
 8034894:	685a      	ldr	r2, [r3, #4]
 8034896:	68fb      	ldr	r3, [r7, #12]
 8034898:	681b      	ldr	r3, [r3, #0]
 803489a:	685b      	ldr	r3, [r3, #4]
 803489c:	441a      	add	r2, r3
 803489e:	687b      	ldr	r3, [r7, #4]
 80348a0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80348a2:	68fb      	ldr	r3, [r7, #12]
 80348a4:	681b      	ldr	r3, [r3, #0]
 80348a6:	681a      	ldr	r2, [r3, #0]
 80348a8:	687b      	ldr	r3, [r7, #4]
 80348aa:	601a      	str	r2, [r3, #0]
 80348ac:	e008      	b.n	80348c0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80348ae:	4b0c      	ldr	r3, [pc, #48]	@ (80348e0 <prvInsertBlockIntoFreeList+0xb0>)
 80348b0:	681a      	ldr	r2, [r3, #0]
 80348b2:	687b      	ldr	r3, [r7, #4]
 80348b4:	601a      	str	r2, [r3, #0]
 80348b6:	e003      	b.n	80348c0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80348b8:	68fb      	ldr	r3, [r7, #12]
 80348ba:	681a      	ldr	r2, [r3, #0]
 80348bc:	687b      	ldr	r3, [r7, #4]
 80348be:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80348c0:	68fa      	ldr	r2, [r7, #12]
 80348c2:	687b      	ldr	r3, [r7, #4]
 80348c4:	429a      	cmp	r2, r3
 80348c6:	d002      	beq.n	80348ce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80348c8:	68fb      	ldr	r3, [r7, #12]
 80348ca:	687a      	ldr	r2, [r7, #4]
 80348cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80348ce:	bf00      	nop
 80348d0:	3714      	adds	r7, #20
 80348d2:	46bd      	mov	sp, r7
 80348d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80348d8:	4770      	bx	lr
 80348da:	bf00      	nop
 80348dc:	20003600 	.word	0x20003600
 80348e0:	20003608 	.word	0x20003608

080348e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80348e4:	b480      	push	{r7}
 80348e6:	b083      	sub	sp, #12
 80348e8:	af00      	add	r7, sp, #0
 80348ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80348ec:	687b      	ldr	r3, [r7, #4]
 80348ee:	f103 0208 	add.w	r2, r3, #8
 80348f2:	687b      	ldr	r3, [r7, #4]
 80348f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80348f6:	687b      	ldr	r3, [r7, #4]
 80348f8:	f04f 32ff 	mov.w	r2, #4294967295
 80348fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80348fe:	687b      	ldr	r3, [r7, #4]
 8034900:	f103 0208 	add.w	r2, r3, #8
 8034904:	687b      	ldr	r3, [r7, #4]
 8034906:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8034908:	687b      	ldr	r3, [r7, #4]
 803490a:	f103 0208 	add.w	r2, r3, #8
 803490e:	687b      	ldr	r3, [r7, #4]
 8034910:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8034912:	687b      	ldr	r3, [r7, #4]
 8034914:	2200      	movs	r2, #0
 8034916:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8034918:	bf00      	nop
 803491a:	370c      	adds	r7, #12
 803491c:	46bd      	mov	sp, r7
 803491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034922:	4770      	bx	lr

08034924 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8034924:	b480      	push	{r7}
 8034926:	b083      	sub	sp, #12
 8034928:	af00      	add	r7, sp, #0
 803492a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 803492c:	687b      	ldr	r3, [r7, #4]
 803492e:	2200      	movs	r2, #0
 8034930:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8034932:	bf00      	nop
 8034934:	370c      	adds	r7, #12
 8034936:	46bd      	mov	sp, r7
 8034938:	f85d 7b04 	ldr.w	r7, [sp], #4
 803493c:	4770      	bx	lr

0803493e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 803493e:	b480      	push	{r7}
 8034940:	b085      	sub	sp, #20
 8034942:	af00      	add	r7, sp, #0
 8034944:	6078      	str	r0, [r7, #4]
 8034946:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8034948:	687b      	ldr	r3, [r7, #4]
 803494a:	685b      	ldr	r3, [r3, #4]
 803494c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 803494e:	683b      	ldr	r3, [r7, #0]
 8034950:	68fa      	ldr	r2, [r7, #12]
 8034952:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8034954:	68fb      	ldr	r3, [r7, #12]
 8034956:	689a      	ldr	r2, [r3, #8]
 8034958:	683b      	ldr	r3, [r7, #0]
 803495a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 803495c:	68fb      	ldr	r3, [r7, #12]
 803495e:	689b      	ldr	r3, [r3, #8]
 8034960:	683a      	ldr	r2, [r7, #0]
 8034962:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8034964:	68fb      	ldr	r3, [r7, #12]
 8034966:	683a      	ldr	r2, [r7, #0]
 8034968:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 803496a:	683b      	ldr	r3, [r7, #0]
 803496c:	687a      	ldr	r2, [r7, #4]
 803496e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8034970:	687b      	ldr	r3, [r7, #4]
 8034972:	681b      	ldr	r3, [r3, #0]
 8034974:	1c5a      	adds	r2, r3, #1
 8034976:	687b      	ldr	r3, [r7, #4]
 8034978:	601a      	str	r2, [r3, #0]
}
 803497a:	bf00      	nop
 803497c:	3714      	adds	r7, #20
 803497e:	46bd      	mov	sp, r7
 8034980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034984:	4770      	bx	lr

08034986 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8034986:	b480      	push	{r7}
 8034988:	b085      	sub	sp, #20
 803498a:	af00      	add	r7, sp, #0
 803498c:	6078      	str	r0, [r7, #4]
 803498e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8034990:	683b      	ldr	r3, [r7, #0]
 8034992:	681b      	ldr	r3, [r3, #0]
 8034994:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8034996:	68bb      	ldr	r3, [r7, #8]
 8034998:	f1b3 3fff 	cmp.w	r3, #4294967295
 803499c:	d103      	bne.n	80349a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 803499e:	687b      	ldr	r3, [r7, #4]
 80349a0:	691b      	ldr	r3, [r3, #16]
 80349a2:	60fb      	str	r3, [r7, #12]
 80349a4:	e00c      	b.n	80349c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80349a6:	687b      	ldr	r3, [r7, #4]
 80349a8:	3308      	adds	r3, #8
 80349aa:	60fb      	str	r3, [r7, #12]
 80349ac:	e002      	b.n	80349b4 <vListInsert+0x2e>
 80349ae:	68fb      	ldr	r3, [r7, #12]
 80349b0:	685b      	ldr	r3, [r3, #4]
 80349b2:	60fb      	str	r3, [r7, #12]
 80349b4:	68fb      	ldr	r3, [r7, #12]
 80349b6:	685b      	ldr	r3, [r3, #4]
 80349b8:	681b      	ldr	r3, [r3, #0]
 80349ba:	68ba      	ldr	r2, [r7, #8]
 80349bc:	429a      	cmp	r2, r3
 80349be:	d2f6      	bcs.n	80349ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80349c0:	68fb      	ldr	r3, [r7, #12]
 80349c2:	685a      	ldr	r2, [r3, #4]
 80349c4:	683b      	ldr	r3, [r7, #0]
 80349c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80349c8:	683b      	ldr	r3, [r7, #0]
 80349ca:	685b      	ldr	r3, [r3, #4]
 80349cc:	683a      	ldr	r2, [r7, #0]
 80349ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80349d0:	683b      	ldr	r3, [r7, #0]
 80349d2:	68fa      	ldr	r2, [r7, #12]
 80349d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80349d6:	68fb      	ldr	r3, [r7, #12]
 80349d8:	683a      	ldr	r2, [r7, #0]
 80349da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80349dc:	683b      	ldr	r3, [r7, #0]
 80349de:	687a      	ldr	r2, [r7, #4]
 80349e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80349e2:	687b      	ldr	r3, [r7, #4]
 80349e4:	681b      	ldr	r3, [r3, #0]
 80349e6:	1c5a      	adds	r2, r3, #1
 80349e8:	687b      	ldr	r3, [r7, #4]
 80349ea:	601a      	str	r2, [r3, #0]
}
 80349ec:	bf00      	nop
 80349ee:	3714      	adds	r7, #20
 80349f0:	46bd      	mov	sp, r7
 80349f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80349f6:	4770      	bx	lr

080349f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80349f8:	b480      	push	{r7}
 80349fa:	b085      	sub	sp, #20
 80349fc:	af00      	add	r7, sp, #0
 80349fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8034a00:	687b      	ldr	r3, [r7, #4]
 8034a02:	691b      	ldr	r3, [r3, #16]
 8034a04:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8034a06:	687b      	ldr	r3, [r7, #4]
 8034a08:	685b      	ldr	r3, [r3, #4]
 8034a0a:	687a      	ldr	r2, [r7, #4]
 8034a0c:	6892      	ldr	r2, [r2, #8]
 8034a0e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8034a10:	687b      	ldr	r3, [r7, #4]
 8034a12:	689b      	ldr	r3, [r3, #8]
 8034a14:	687a      	ldr	r2, [r7, #4]
 8034a16:	6852      	ldr	r2, [r2, #4]
 8034a18:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8034a1a:	68fb      	ldr	r3, [r7, #12]
 8034a1c:	685b      	ldr	r3, [r3, #4]
 8034a1e:	687a      	ldr	r2, [r7, #4]
 8034a20:	429a      	cmp	r2, r3
 8034a22:	d103      	bne.n	8034a2c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8034a24:	687b      	ldr	r3, [r7, #4]
 8034a26:	689a      	ldr	r2, [r3, #8]
 8034a28:	68fb      	ldr	r3, [r7, #12]
 8034a2a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8034a2c:	687b      	ldr	r3, [r7, #4]
 8034a2e:	2200      	movs	r2, #0
 8034a30:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8034a32:	68fb      	ldr	r3, [r7, #12]
 8034a34:	681b      	ldr	r3, [r3, #0]
 8034a36:	1e5a      	subs	r2, r3, #1
 8034a38:	68fb      	ldr	r3, [r7, #12]
 8034a3a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8034a3c:	68fb      	ldr	r3, [r7, #12]
 8034a3e:	681b      	ldr	r3, [r3, #0]
}
 8034a40:	4618      	mov	r0, r3
 8034a42:	3714      	adds	r7, #20
 8034a44:	46bd      	mov	sp, r7
 8034a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034a4a:	4770      	bx	lr

08034a4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8034a4c:	b480      	push	{r7}
 8034a4e:	b085      	sub	sp, #20
 8034a50:	af00      	add	r7, sp, #0
 8034a52:	60f8      	str	r0, [r7, #12]
 8034a54:	60b9      	str	r1, [r7, #8]
 8034a56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8034a58:	68fb      	ldr	r3, [r7, #12]
 8034a5a:	3b04      	subs	r3, #4
 8034a5c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8034a5e:	68fb      	ldr	r3, [r7, #12]
 8034a60:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8034a64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8034a66:	68fb      	ldr	r3, [r7, #12]
 8034a68:	3b04      	subs	r3, #4
 8034a6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8034a6c:	68bb      	ldr	r3, [r7, #8]
 8034a6e:	f023 0201 	bic.w	r2, r3, #1
 8034a72:	68fb      	ldr	r3, [r7, #12]
 8034a74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8034a76:	68fb      	ldr	r3, [r7, #12]
 8034a78:	3b04      	subs	r3, #4
 8034a7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8034a7c:	4a0c      	ldr	r2, [pc, #48]	@ (8034ab0 <pxPortInitialiseStack+0x64>)
 8034a7e:	68fb      	ldr	r3, [r7, #12]
 8034a80:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8034a82:	68fb      	ldr	r3, [r7, #12]
 8034a84:	3b14      	subs	r3, #20
 8034a86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8034a88:	687a      	ldr	r2, [r7, #4]
 8034a8a:	68fb      	ldr	r3, [r7, #12]
 8034a8c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8034a8e:	68fb      	ldr	r3, [r7, #12]
 8034a90:	3b04      	subs	r3, #4
 8034a92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8034a94:	68fb      	ldr	r3, [r7, #12]
 8034a96:	f06f 0202 	mvn.w	r2, #2
 8034a9a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8034a9c:	68fb      	ldr	r3, [r7, #12]
 8034a9e:	3b20      	subs	r3, #32
 8034aa0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8034aa2:	68fb      	ldr	r3, [r7, #12]
}
 8034aa4:	4618      	mov	r0, r3
 8034aa6:	3714      	adds	r7, #20
 8034aa8:	46bd      	mov	sp, r7
 8034aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034aae:	4770      	bx	lr
 8034ab0:	08034ab5 	.word	0x08034ab5

08034ab4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8034ab4:	b480      	push	{r7}
 8034ab6:	b085      	sub	sp, #20
 8034ab8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8034aba:	2300      	movs	r3, #0
 8034abc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8034abe:	4b13      	ldr	r3, [pc, #76]	@ (8034b0c <prvTaskExitError+0x58>)
 8034ac0:	681b      	ldr	r3, [r3, #0]
 8034ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8034ac6:	d00b      	beq.n	8034ae0 <prvTaskExitError+0x2c>
	__asm volatile
 8034ac8:	f04f 0310 	mov.w	r3, #16
 8034acc:	f383 8811 	msr	BASEPRI, r3
 8034ad0:	f3bf 8f6f 	isb	sy
 8034ad4:	f3bf 8f4f 	dsb	sy
 8034ad8:	60fb      	str	r3, [r7, #12]
}
 8034ada:	bf00      	nop
 8034adc:	bf00      	nop
 8034ade:	e7fd      	b.n	8034adc <prvTaskExitError+0x28>
	__asm volatile
 8034ae0:	f04f 0310 	mov.w	r3, #16
 8034ae4:	f383 8811 	msr	BASEPRI, r3
 8034ae8:	f3bf 8f6f 	isb	sy
 8034aec:	f3bf 8f4f 	dsb	sy
 8034af0:	60bb      	str	r3, [r7, #8]
}
 8034af2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8034af4:	bf00      	nop
 8034af6:	687b      	ldr	r3, [r7, #4]
 8034af8:	2b00      	cmp	r3, #0
 8034afa:	d0fc      	beq.n	8034af6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8034afc:	bf00      	nop
 8034afe:	bf00      	nop
 8034b00:	3714      	adds	r7, #20
 8034b02:	46bd      	mov	sp, r7
 8034b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034b08:	4770      	bx	lr
 8034b0a:	bf00      	nop
 8034b0c:	20000028 	.word	0x20000028

08034b10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8034b10:	4b07      	ldr	r3, [pc, #28]	@ (8034b30 <pxCurrentTCBConst2>)
 8034b12:	6819      	ldr	r1, [r3, #0]
 8034b14:	6808      	ldr	r0, [r1, #0]
 8034b16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8034b1a:	f380 8809 	msr	PSP, r0
 8034b1e:	f3bf 8f6f 	isb	sy
 8034b22:	f04f 0000 	mov.w	r0, #0
 8034b26:	f380 8811 	msr	BASEPRI, r0
 8034b2a:	4770      	bx	lr
 8034b2c:	f3af 8000 	nop.w

08034b30 <pxCurrentTCBConst2>:
 8034b30:	20003e20 	.word	0x20003e20
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8034b34:	bf00      	nop
 8034b36:	bf00      	nop

08034b38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8034b38:	4808      	ldr	r0, [pc, #32]	@ (8034b5c <prvPortStartFirstTask+0x24>)
 8034b3a:	6800      	ldr	r0, [r0, #0]
 8034b3c:	6800      	ldr	r0, [r0, #0]
 8034b3e:	f380 8808 	msr	MSP, r0
 8034b42:	f04f 0000 	mov.w	r0, #0
 8034b46:	f380 8814 	msr	CONTROL, r0
 8034b4a:	b662      	cpsie	i
 8034b4c:	b661      	cpsie	f
 8034b4e:	f3bf 8f4f 	dsb	sy
 8034b52:	f3bf 8f6f 	isb	sy
 8034b56:	df00      	svc	0
 8034b58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8034b5a:	bf00      	nop
 8034b5c:	e000ed08 	.word	0xe000ed08

08034b60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8034b60:	b580      	push	{r7, lr}
 8034b62:	b086      	sub	sp, #24
 8034b64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8034b66:	4b47      	ldr	r3, [pc, #284]	@ (8034c84 <xPortStartScheduler+0x124>)
 8034b68:	681b      	ldr	r3, [r3, #0]
 8034b6a:	4a47      	ldr	r2, [pc, #284]	@ (8034c88 <xPortStartScheduler+0x128>)
 8034b6c:	4293      	cmp	r3, r2
 8034b6e:	d10b      	bne.n	8034b88 <xPortStartScheduler+0x28>
	__asm volatile
 8034b70:	f04f 0310 	mov.w	r3, #16
 8034b74:	f383 8811 	msr	BASEPRI, r3
 8034b78:	f3bf 8f6f 	isb	sy
 8034b7c:	f3bf 8f4f 	dsb	sy
 8034b80:	613b      	str	r3, [r7, #16]
}
 8034b82:	bf00      	nop
 8034b84:	bf00      	nop
 8034b86:	e7fd      	b.n	8034b84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8034b88:	4b3e      	ldr	r3, [pc, #248]	@ (8034c84 <xPortStartScheduler+0x124>)
 8034b8a:	681b      	ldr	r3, [r3, #0]
 8034b8c:	4a3f      	ldr	r2, [pc, #252]	@ (8034c8c <xPortStartScheduler+0x12c>)
 8034b8e:	4293      	cmp	r3, r2
 8034b90:	d10b      	bne.n	8034baa <xPortStartScheduler+0x4a>
	__asm volatile
 8034b92:	f04f 0310 	mov.w	r3, #16
 8034b96:	f383 8811 	msr	BASEPRI, r3
 8034b9a:	f3bf 8f6f 	isb	sy
 8034b9e:	f3bf 8f4f 	dsb	sy
 8034ba2:	60fb      	str	r3, [r7, #12]
}
 8034ba4:	bf00      	nop
 8034ba6:	bf00      	nop
 8034ba8:	e7fd      	b.n	8034ba6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8034baa:	4b39      	ldr	r3, [pc, #228]	@ (8034c90 <xPortStartScheduler+0x130>)
 8034bac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8034bae:	697b      	ldr	r3, [r7, #20]
 8034bb0:	781b      	ldrb	r3, [r3, #0]
 8034bb2:	b2db      	uxtb	r3, r3
 8034bb4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8034bb6:	697b      	ldr	r3, [r7, #20]
 8034bb8:	22ff      	movs	r2, #255	@ 0xff
 8034bba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8034bbc:	697b      	ldr	r3, [r7, #20]
 8034bbe:	781b      	ldrb	r3, [r3, #0]
 8034bc0:	b2db      	uxtb	r3, r3
 8034bc2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8034bc4:	78fb      	ldrb	r3, [r7, #3]
 8034bc6:	b2db      	uxtb	r3, r3
 8034bc8:	f003 0310 	and.w	r3, r3, #16
 8034bcc:	b2da      	uxtb	r2, r3
 8034bce:	4b31      	ldr	r3, [pc, #196]	@ (8034c94 <xPortStartScheduler+0x134>)
 8034bd0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8034bd2:	4b31      	ldr	r3, [pc, #196]	@ (8034c98 <xPortStartScheduler+0x138>)
 8034bd4:	2207      	movs	r2, #7
 8034bd6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8034bd8:	e009      	b.n	8034bee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8034bda:	4b2f      	ldr	r3, [pc, #188]	@ (8034c98 <xPortStartScheduler+0x138>)
 8034bdc:	681b      	ldr	r3, [r3, #0]
 8034bde:	3b01      	subs	r3, #1
 8034be0:	4a2d      	ldr	r2, [pc, #180]	@ (8034c98 <xPortStartScheduler+0x138>)
 8034be2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8034be4:	78fb      	ldrb	r3, [r7, #3]
 8034be6:	b2db      	uxtb	r3, r3
 8034be8:	005b      	lsls	r3, r3, #1
 8034bea:	b2db      	uxtb	r3, r3
 8034bec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8034bee:	78fb      	ldrb	r3, [r7, #3]
 8034bf0:	b2db      	uxtb	r3, r3
 8034bf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8034bf6:	2b80      	cmp	r3, #128	@ 0x80
 8034bf8:	d0ef      	beq.n	8034bda <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8034bfa:	4b27      	ldr	r3, [pc, #156]	@ (8034c98 <xPortStartScheduler+0x138>)
 8034bfc:	681b      	ldr	r3, [r3, #0]
 8034bfe:	f1c3 0307 	rsb	r3, r3, #7
 8034c02:	2b04      	cmp	r3, #4
 8034c04:	d00b      	beq.n	8034c1e <xPortStartScheduler+0xbe>
	__asm volatile
 8034c06:	f04f 0310 	mov.w	r3, #16
 8034c0a:	f383 8811 	msr	BASEPRI, r3
 8034c0e:	f3bf 8f6f 	isb	sy
 8034c12:	f3bf 8f4f 	dsb	sy
 8034c16:	60bb      	str	r3, [r7, #8]
}
 8034c18:	bf00      	nop
 8034c1a:	bf00      	nop
 8034c1c:	e7fd      	b.n	8034c1a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8034c1e:	4b1e      	ldr	r3, [pc, #120]	@ (8034c98 <xPortStartScheduler+0x138>)
 8034c20:	681b      	ldr	r3, [r3, #0]
 8034c22:	021b      	lsls	r3, r3, #8
 8034c24:	4a1c      	ldr	r2, [pc, #112]	@ (8034c98 <xPortStartScheduler+0x138>)
 8034c26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8034c28:	4b1b      	ldr	r3, [pc, #108]	@ (8034c98 <xPortStartScheduler+0x138>)
 8034c2a:	681b      	ldr	r3, [r3, #0]
 8034c2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8034c30:	4a19      	ldr	r2, [pc, #100]	@ (8034c98 <xPortStartScheduler+0x138>)
 8034c32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8034c34:	687b      	ldr	r3, [r7, #4]
 8034c36:	b2da      	uxtb	r2, r3
 8034c38:	697b      	ldr	r3, [r7, #20]
 8034c3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8034c3c:	4b17      	ldr	r3, [pc, #92]	@ (8034c9c <xPortStartScheduler+0x13c>)
 8034c3e:	681b      	ldr	r3, [r3, #0]
 8034c40:	4a16      	ldr	r2, [pc, #88]	@ (8034c9c <xPortStartScheduler+0x13c>)
 8034c42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8034c46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8034c48:	4b14      	ldr	r3, [pc, #80]	@ (8034c9c <xPortStartScheduler+0x13c>)
 8034c4a:	681b      	ldr	r3, [r3, #0]
 8034c4c:	4a13      	ldr	r2, [pc, #76]	@ (8034c9c <xPortStartScheduler+0x13c>)
 8034c4e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8034c52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8034c54:	f000 f8da 	bl	8034e0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8034c58:	4b11      	ldr	r3, [pc, #68]	@ (8034ca0 <xPortStartScheduler+0x140>)
 8034c5a:	2200      	movs	r2, #0
 8034c5c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8034c5e:	f000 f8f9 	bl	8034e54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8034c62:	4b10      	ldr	r3, [pc, #64]	@ (8034ca4 <xPortStartScheduler+0x144>)
 8034c64:	681b      	ldr	r3, [r3, #0]
 8034c66:	4a0f      	ldr	r2, [pc, #60]	@ (8034ca4 <xPortStartScheduler+0x144>)
 8034c68:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8034c6c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8034c6e:	f7ff ff63 	bl	8034b38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8034c72:	f001 fbfd 	bl	8036470 <vTaskSwitchContext>
	prvTaskExitError();
 8034c76:	f7ff ff1d 	bl	8034ab4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8034c7a:	2300      	movs	r3, #0
}
 8034c7c:	4618      	mov	r0, r3
 8034c7e:	3718      	adds	r7, #24
 8034c80:	46bd      	mov	sp, r7
 8034c82:	bd80      	pop	{r7, pc}
 8034c84:	e000ed00 	.word	0xe000ed00
 8034c88:	410fc271 	.word	0x410fc271
 8034c8c:	410fc270 	.word	0x410fc270
 8034c90:	e000e400 	.word	0xe000e400
 8034c94:	20003620 	.word	0x20003620
 8034c98:	20003624 	.word	0x20003624
 8034c9c:	e000ed20 	.word	0xe000ed20
 8034ca0:	20000028 	.word	0x20000028
 8034ca4:	e000ef34 	.word	0xe000ef34

08034ca8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8034ca8:	b480      	push	{r7}
 8034caa:	b083      	sub	sp, #12
 8034cac:	af00      	add	r7, sp, #0
	__asm volatile
 8034cae:	f04f 0310 	mov.w	r3, #16
 8034cb2:	f383 8811 	msr	BASEPRI, r3
 8034cb6:	f3bf 8f6f 	isb	sy
 8034cba:	f3bf 8f4f 	dsb	sy
 8034cbe:	607b      	str	r3, [r7, #4]
}
 8034cc0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8034cc2:	4b10      	ldr	r3, [pc, #64]	@ (8034d04 <vPortEnterCritical+0x5c>)
 8034cc4:	681b      	ldr	r3, [r3, #0]
 8034cc6:	3301      	adds	r3, #1
 8034cc8:	4a0e      	ldr	r2, [pc, #56]	@ (8034d04 <vPortEnterCritical+0x5c>)
 8034cca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8034ccc:	4b0d      	ldr	r3, [pc, #52]	@ (8034d04 <vPortEnterCritical+0x5c>)
 8034cce:	681b      	ldr	r3, [r3, #0]
 8034cd0:	2b01      	cmp	r3, #1
 8034cd2:	d110      	bne.n	8034cf6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8034cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8034d08 <vPortEnterCritical+0x60>)
 8034cd6:	681b      	ldr	r3, [r3, #0]
 8034cd8:	b2db      	uxtb	r3, r3
 8034cda:	2b00      	cmp	r3, #0
 8034cdc:	d00b      	beq.n	8034cf6 <vPortEnterCritical+0x4e>
	__asm volatile
 8034cde:	f04f 0310 	mov.w	r3, #16
 8034ce2:	f383 8811 	msr	BASEPRI, r3
 8034ce6:	f3bf 8f6f 	isb	sy
 8034cea:	f3bf 8f4f 	dsb	sy
 8034cee:	603b      	str	r3, [r7, #0]
}
 8034cf0:	bf00      	nop
 8034cf2:	bf00      	nop
 8034cf4:	e7fd      	b.n	8034cf2 <vPortEnterCritical+0x4a>
	}
}
 8034cf6:	bf00      	nop
 8034cf8:	370c      	adds	r7, #12
 8034cfa:	46bd      	mov	sp, r7
 8034cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034d00:	4770      	bx	lr
 8034d02:	bf00      	nop
 8034d04:	20000028 	.word	0x20000028
 8034d08:	e000ed04 	.word	0xe000ed04

08034d0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8034d0c:	b480      	push	{r7}
 8034d0e:	b083      	sub	sp, #12
 8034d10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8034d12:	4b12      	ldr	r3, [pc, #72]	@ (8034d5c <vPortExitCritical+0x50>)
 8034d14:	681b      	ldr	r3, [r3, #0]
 8034d16:	2b00      	cmp	r3, #0
 8034d18:	d10b      	bne.n	8034d32 <vPortExitCritical+0x26>
	__asm volatile
 8034d1a:	f04f 0310 	mov.w	r3, #16
 8034d1e:	f383 8811 	msr	BASEPRI, r3
 8034d22:	f3bf 8f6f 	isb	sy
 8034d26:	f3bf 8f4f 	dsb	sy
 8034d2a:	607b      	str	r3, [r7, #4]
}
 8034d2c:	bf00      	nop
 8034d2e:	bf00      	nop
 8034d30:	e7fd      	b.n	8034d2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8034d32:	4b0a      	ldr	r3, [pc, #40]	@ (8034d5c <vPortExitCritical+0x50>)
 8034d34:	681b      	ldr	r3, [r3, #0]
 8034d36:	3b01      	subs	r3, #1
 8034d38:	4a08      	ldr	r2, [pc, #32]	@ (8034d5c <vPortExitCritical+0x50>)
 8034d3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8034d3c:	4b07      	ldr	r3, [pc, #28]	@ (8034d5c <vPortExitCritical+0x50>)
 8034d3e:	681b      	ldr	r3, [r3, #0]
 8034d40:	2b00      	cmp	r3, #0
 8034d42:	d105      	bne.n	8034d50 <vPortExitCritical+0x44>
 8034d44:	2300      	movs	r3, #0
 8034d46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8034d48:	683b      	ldr	r3, [r7, #0]
 8034d4a:	f383 8811 	msr	BASEPRI, r3
}
 8034d4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8034d50:	bf00      	nop
 8034d52:	370c      	adds	r7, #12
 8034d54:	46bd      	mov	sp, r7
 8034d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034d5a:	4770      	bx	lr
 8034d5c:	20000028 	.word	0x20000028

08034d60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8034d60:	f3ef 8009 	mrs	r0, PSP
 8034d64:	f3bf 8f6f 	isb	sy
 8034d68:	4b15      	ldr	r3, [pc, #84]	@ (8034dc0 <pxCurrentTCBConst>)
 8034d6a:	681a      	ldr	r2, [r3, #0]
 8034d6c:	f01e 0f10 	tst.w	lr, #16
 8034d70:	bf08      	it	eq
 8034d72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8034d76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8034d7a:	6010      	str	r0, [r2, #0]
 8034d7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8034d80:	f04f 0010 	mov.w	r0, #16
 8034d84:	f380 8811 	msr	BASEPRI, r0
 8034d88:	f3bf 8f4f 	dsb	sy
 8034d8c:	f3bf 8f6f 	isb	sy
 8034d90:	f001 fb6e 	bl	8036470 <vTaskSwitchContext>
 8034d94:	f04f 0000 	mov.w	r0, #0
 8034d98:	f380 8811 	msr	BASEPRI, r0
 8034d9c:	bc09      	pop	{r0, r3}
 8034d9e:	6819      	ldr	r1, [r3, #0]
 8034da0:	6808      	ldr	r0, [r1, #0]
 8034da2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8034da6:	f01e 0f10 	tst.w	lr, #16
 8034daa:	bf08      	it	eq
 8034dac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8034db0:	f380 8809 	msr	PSP, r0
 8034db4:	f3bf 8f6f 	isb	sy
 8034db8:	4770      	bx	lr
 8034dba:	bf00      	nop
 8034dbc:	f3af 8000 	nop.w

08034dc0 <pxCurrentTCBConst>:
 8034dc0:	20003e20 	.word	0x20003e20
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8034dc4:	bf00      	nop
 8034dc6:	bf00      	nop

08034dc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8034dc8:	b580      	push	{r7, lr}
 8034dca:	b082      	sub	sp, #8
 8034dcc:	af00      	add	r7, sp, #0
	__asm volatile
 8034dce:	f04f 0310 	mov.w	r3, #16
 8034dd2:	f383 8811 	msr	BASEPRI, r3
 8034dd6:	f3bf 8f6f 	isb	sy
 8034dda:	f3bf 8f4f 	dsb	sy
 8034dde:	607b      	str	r3, [r7, #4]
}
 8034de0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8034de2:	f001 fa83 	bl	80362ec <xTaskIncrementTick>
 8034de6:	4603      	mov	r3, r0
 8034de8:	2b00      	cmp	r3, #0
 8034dea:	d003      	beq.n	8034df4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8034dec:	4b06      	ldr	r3, [pc, #24]	@ (8034e08 <xPortSysTickHandler+0x40>)
 8034dee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8034df2:	601a      	str	r2, [r3, #0]
 8034df4:	2300      	movs	r3, #0
 8034df6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8034df8:	683b      	ldr	r3, [r7, #0]
 8034dfa:	f383 8811 	msr	BASEPRI, r3
}
 8034dfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8034e00:	bf00      	nop
 8034e02:	3708      	adds	r7, #8
 8034e04:	46bd      	mov	sp, r7
 8034e06:	bd80      	pop	{r7, pc}
 8034e08:	e000ed04 	.word	0xe000ed04

08034e0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8034e0c:	b480      	push	{r7}
 8034e0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8034e10:	4b0b      	ldr	r3, [pc, #44]	@ (8034e40 <vPortSetupTimerInterrupt+0x34>)
 8034e12:	2200      	movs	r2, #0
 8034e14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8034e16:	4b0b      	ldr	r3, [pc, #44]	@ (8034e44 <vPortSetupTimerInterrupt+0x38>)
 8034e18:	2200      	movs	r2, #0
 8034e1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8034e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8034e48 <vPortSetupTimerInterrupt+0x3c>)
 8034e1e:	681b      	ldr	r3, [r3, #0]
 8034e20:	4a0a      	ldr	r2, [pc, #40]	@ (8034e4c <vPortSetupTimerInterrupt+0x40>)
 8034e22:	fba2 2303 	umull	r2, r3, r2, r3
 8034e26:	099b      	lsrs	r3, r3, #6
 8034e28:	4a09      	ldr	r2, [pc, #36]	@ (8034e50 <vPortSetupTimerInterrupt+0x44>)
 8034e2a:	3b01      	subs	r3, #1
 8034e2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8034e2e:	4b04      	ldr	r3, [pc, #16]	@ (8034e40 <vPortSetupTimerInterrupt+0x34>)
 8034e30:	2207      	movs	r2, #7
 8034e32:	601a      	str	r2, [r3, #0]
}
 8034e34:	bf00      	nop
 8034e36:	46bd      	mov	sp, r7
 8034e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034e3c:	4770      	bx	lr
 8034e3e:	bf00      	nop
 8034e40:	e000e010 	.word	0xe000e010
 8034e44:	e000e018 	.word	0xe000e018
 8034e48:	2000001c 	.word	0x2000001c
 8034e4c:	10624dd3 	.word	0x10624dd3
 8034e50:	e000e014 	.word	0xe000e014

08034e54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8034e54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8034e64 <vPortEnableVFP+0x10>
 8034e58:	6801      	ldr	r1, [r0, #0]
 8034e5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8034e5e:	6001      	str	r1, [r0, #0]
 8034e60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8034e62:	bf00      	nop
 8034e64:	e000ed88 	.word	0xe000ed88

08034e68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8034e68:	b480      	push	{r7}
 8034e6a:	b085      	sub	sp, #20
 8034e6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8034e6e:	f3ef 8305 	mrs	r3, IPSR
 8034e72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8034e74:	68fb      	ldr	r3, [r7, #12]
 8034e76:	2b0f      	cmp	r3, #15
 8034e78:	d915      	bls.n	8034ea6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8034e7a:	4a18      	ldr	r2, [pc, #96]	@ (8034edc <vPortValidateInterruptPriority+0x74>)
 8034e7c:	68fb      	ldr	r3, [r7, #12]
 8034e7e:	4413      	add	r3, r2
 8034e80:	781b      	ldrb	r3, [r3, #0]
 8034e82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8034e84:	4b16      	ldr	r3, [pc, #88]	@ (8034ee0 <vPortValidateInterruptPriority+0x78>)
 8034e86:	781b      	ldrb	r3, [r3, #0]
 8034e88:	7afa      	ldrb	r2, [r7, #11]
 8034e8a:	429a      	cmp	r2, r3
 8034e8c:	d20b      	bcs.n	8034ea6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8034e8e:	f04f 0310 	mov.w	r3, #16
 8034e92:	f383 8811 	msr	BASEPRI, r3
 8034e96:	f3bf 8f6f 	isb	sy
 8034e9a:	f3bf 8f4f 	dsb	sy
 8034e9e:	607b      	str	r3, [r7, #4]
}
 8034ea0:	bf00      	nop
 8034ea2:	bf00      	nop
 8034ea4:	e7fd      	b.n	8034ea2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8034ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8034ee4 <vPortValidateInterruptPriority+0x7c>)
 8034ea8:	681b      	ldr	r3, [r3, #0]
 8034eaa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8034eae:	4b0e      	ldr	r3, [pc, #56]	@ (8034ee8 <vPortValidateInterruptPriority+0x80>)
 8034eb0:	681b      	ldr	r3, [r3, #0]
 8034eb2:	429a      	cmp	r2, r3
 8034eb4:	d90b      	bls.n	8034ece <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8034eb6:	f04f 0310 	mov.w	r3, #16
 8034eba:	f383 8811 	msr	BASEPRI, r3
 8034ebe:	f3bf 8f6f 	isb	sy
 8034ec2:	f3bf 8f4f 	dsb	sy
 8034ec6:	603b      	str	r3, [r7, #0]
}
 8034ec8:	bf00      	nop
 8034eca:	bf00      	nop
 8034ecc:	e7fd      	b.n	8034eca <vPortValidateInterruptPriority+0x62>
	}
 8034ece:	bf00      	nop
 8034ed0:	3714      	adds	r7, #20
 8034ed2:	46bd      	mov	sp, r7
 8034ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034ed8:	4770      	bx	lr
 8034eda:	bf00      	nop
 8034edc:	e000e3f0 	.word	0xe000e3f0
 8034ee0:	20003620 	.word	0x20003620
 8034ee4:	e000ed0c 	.word	0xe000ed0c
 8034ee8:	20003624 	.word	0x20003624

08034eec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8034eec:	b580      	push	{r7, lr}
 8034eee:	b084      	sub	sp, #16
 8034ef0:	af00      	add	r7, sp, #0
 8034ef2:	6078      	str	r0, [r7, #4]
 8034ef4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8034ef6:	687b      	ldr	r3, [r7, #4]
 8034ef8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8034efa:	68fb      	ldr	r3, [r7, #12]
 8034efc:	2b00      	cmp	r3, #0
 8034efe:	d10b      	bne.n	8034f18 <xQueueGenericReset+0x2c>
	__asm volatile
 8034f00:	f04f 0310 	mov.w	r3, #16
 8034f04:	f383 8811 	msr	BASEPRI, r3
 8034f08:	f3bf 8f6f 	isb	sy
 8034f0c:	f3bf 8f4f 	dsb	sy
 8034f10:	60bb      	str	r3, [r7, #8]
}
 8034f12:	bf00      	nop
 8034f14:	bf00      	nop
 8034f16:	e7fd      	b.n	8034f14 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8034f18:	f7ff fec6 	bl	8034ca8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8034f1c:	68fb      	ldr	r3, [r7, #12]
 8034f1e:	681a      	ldr	r2, [r3, #0]
 8034f20:	68fb      	ldr	r3, [r7, #12]
 8034f22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8034f24:	68f9      	ldr	r1, [r7, #12]
 8034f26:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8034f28:	fb01 f303 	mul.w	r3, r1, r3
 8034f2c:	441a      	add	r2, r3
 8034f2e:	68fb      	ldr	r3, [r7, #12]
 8034f30:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8034f32:	68fb      	ldr	r3, [r7, #12]
 8034f34:	2200      	movs	r2, #0
 8034f36:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8034f38:	68fb      	ldr	r3, [r7, #12]
 8034f3a:	681a      	ldr	r2, [r3, #0]
 8034f3c:	68fb      	ldr	r3, [r7, #12]
 8034f3e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8034f40:	68fb      	ldr	r3, [r7, #12]
 8034f42:	681a      	ldr	r2, [r3, #0]
 8034f44:	68fb      	ldr	r3, [r7, #12]
 8034f46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8034f48:	3b01      	subs	r3, #1
 8034f4a:	68f9      	ldr	r1, [r7, #12]
 8034f4c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8034f4e:	fb01 f303 	mul.w	r3, r1, r3
 8034f52:	441a      	add	r2, r3
 8034f54:	68fb      	ldr	r3, [r7, #12]
 8034f56:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8034f58:	68fb      	ldr	r3, [r7, #12]
 8034f5a:	22ff      	movs	r2, #255	@ 0xff
 8034f5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8034f60:	68fb      	ldr	r3, [r7, #12]
 8034f62:	22ff      	movs	r2, #255	@ 0xff
 8034f64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8034f68:	683b      	ldr	r3, [r7, #0]
 8034f6a:	2b00      	cmp	r3, #0
 8034f6c:	d114      	bne.n	8034f98 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8034f6e:	68fb      	ldr	r3, [r7, #12]
 8034f70:	691b      	ldr	r3, [r3, #16]
 8034f72:	2b00      	cmp	r3, #0
 8034f74:	d01a      	beq.n	8034fac <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8034f76:	68fb      	ldr	r3, [r7, #12]
 8034f78:	3310      	adds	r3, #16
 8034f7a:	4618      	mov	r0, r3
 8034f7c:	f001 fb6c 	bl	8036658 <xTaskRemoveFromEventList>
 8034f80:	4603      	mov	r3, r0
 8034f82:	2b00      	cmp	r3, #0
 8034f84:	d012      	beq.n	8034fac <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8034f86:	4b0d      	ldr	r3, [pc, #52]	@ (8034fbc <xQueueGenericReset+0xd0>)
 8034f88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8034f8c:	601a      	str	r2, [r3, #0]
 8034f8e:	f3bf 8f4f 	dsb	sy
 8034f92:	f3bf 8f6f 	isb	sy
 8034f96:	e009      	b.n	8034fac <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8034f98:	68fb      	ldr	r3, [r7, #12]
 8034f9a:	3310      	adds	r3, #16
 8034f9c:	4618      	mov	r0, r3
 8034f9e:	f7ff fca1 	bl	80348e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8034fa2:	68fb      	ldr	r3, [r7, #12]
 8034fa4:	3324      	adds	r3, #36	@ 0x24
 8034fa6:	4618      	mov	r0, r3
 8034fa8:	f7ff fc9c 	bl	80348e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8034fac:	f7ff feae 	bl	8034d0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8034fb0:	2301      	movs	r3, #1
}
 8034fb2:	4618      	mov	r0, r3
 8034fb4:	3710      	adds	r7, #16
 8034fb6:	46bd      	mov	sp, r7
 8034fb8:	bd80      	pop	{r7, pc}
 8034fba:	bf00      	nop
 8034fbc:	e000ed04 	.word	0xe000ed04

08034fc0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8034fc0:	b580      	push	{r7, lr}
 8034fc2:	b08e      	sub	sp, #56	@ 0x38
 8034fc4:	af02      	add	r7, sp, #8
 8034fc6:	60f8      	str	r0, [r7, #12]
 8034fc8:	60b9      	str	r1, [r7, #8]
 8034fca:	607a      	str	r2, [r7, #4]
 8034fcc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8034fce:	68fb      	ldr	r3, [r7, #12]
 8034fd0:	2b00      	cmp	r3, #0
 8034fd2:	d10b      	bne.n	8034fec <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8034fd4:	f04f 0310 	mov.w	r3, #16
 8034fd8:	f383 8811 	msr	BASEPRI, r3
 8034fdc:	f3bf 8f6f 	isb	sy
 8034fe0:	f3bf 8f4f 	dsb	sy
 8034fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8034fe6:	bf00      	nop
 8034fe8:	bf00      	nop
 8034fea:	e7fd      	b.n	8034fe8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8034fec:	683b      	ldr	r3, [r7, #0]
 8034fee:	2b00      	cmp	r3, #0
 8034ff0:	d10b      	bne.n	803500a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8034ff2:	f04f 0310 	mov.w	r3, #16
 8034ff6:	f383 8811 	msr	BASEPRI, r3
 8034ffa:	f3bf 8f6f 	isb	sy
 8034ffe:	f3bf 8f4f 	dsb	sy
 8035002:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8035004:	bf00      	nop
 8035006:	bf00      	nop
 8035008:	e7fd      	b.n	8035006 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 803500a:	687b      	ldr	r3, [r7, #4]
 803500c:	2b00      	cmp	r3, #0
 803500e:	d002      	beq.n	8035016 <xQueueGenericCreateStatic+0x56>
 8035010:	68bb      	ldr	r3, [r7, #8]
 8035012:	2b00      	cmp	r3, #0
 8035014:	d001      	beq.n	803501a <xQueueGenericCreateStatic+0x5a>
 8035016:	2301      	movs	r3, #1
 8035018:	e000      	b.n	803501c <xQueueGenericCreateStatic+0x5c>
 803501a:	2300      	movs	r3, #0
 803501c:	2b00      	cmp	r3, #0
 803501e:	d10b      	bne.n	8035038 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8035020:	f04f 0310 	mov.w	r3, #16
 8035024:	f383 8811 	msr	BASEPRI, r3
 8035028:	f3bf 8f6f 	isb	sy
 803502c:	f3bf 8f4f 	dsb	sy
 8035030:	623b      	str	r3, [r7, #32]
}
 8035032:	bf00      	nop
 8035034:	bf00      	nop
 8035036:	e7fd      	b.n	8035034 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8035038:	687b      	ldr	r3, [r7, #4]
 803503a:	2b00      	cmp	r3, #0
 803503c:	d102      	bne.n	8035044 <xQueueGenericCreateStatic+0x84>
 803503e:	68bb      	ldr	r3, [r7, #8]
 8035040:	2b00      	cmp	r3, #0
 8035042:	d101      	bne.n	8035048 <xQueueGenericCreateStatic+0x88>
 8035044:	2301      	movs	r3, #1
 8035046:	e000      	b.n	803504a <xQueueGenericCreateStatic+0x8a>
 8035048:	2300      	movs	r3, #0
 803504a:	2b00      	cmp	r3, #0
 803504c:	d10b      	bne.n	8035066 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 803504e:	f04f 0310 	mov.w	r3, #16
 8035052:	f383 8811 	msr	BASEPRI, r3
 8035056:	f3bf 8f6f 	isb	sy
 803505a:	f3bf 8f4f 	dsb	sy
 803505e:	61fb      	str	r3, [r7, #28]
}
 8035060:	bf00      	nop
 8035062:	bf00      	nop
 8035064:	e7fd      	b.n	8035062 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8035066:	2350      	movs	r3, #80	@ 0x50
 8035068:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 803506a:	697b      	ldr	r3, [r7, #20]
 803506c:	2b50      	cmp	r3, #80	@ 0x50
 803506e:	d00b      	beq.n	8035088 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8035070:	f04f 0310 	mov.w	r3, #16
 8035074:	f383 8811 	msr	BASEPRI, r3
 8035078:	f3bf 8f6f 	isb	sy
 803507c:	f3bf 8f4f 	dsb	sy
 8035080:	61bb      	str	r3, [r7, #24]
}
 8035082:	bf00      	nop
 8035084:	bf00      	nop
 8035086:	e7fd      	b.n	8035084 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8035088:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 803508a:	683b      	ldr	r3, [r7, #0]
 803508c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 803508e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8035090:	2b00      	cmp	r3, #0
 8035092:	d00d      	beq.n	80350b0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8035094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8035096:	2201      	movs	r2, #1
 8035098:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 803509c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80350a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80350a2:	9300      	str	r3, [sp, #0]
 80350a4:	4613      	mov	r3, r2
 80350a6:	687a      	ldr	r2, [r7, #4]
 80350a8:	68b9      	ldr	r1, [r7, #8]
 80350aa:	68f8      	ldr	r0, [r7, #12]
 80350ac:	f000 f805 	bl	80350ba <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80350b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80350b2:	4618      	mov	r0, r3
 80350b4:	3730      	adds	r7, #48	@ 0x30
 80350b6:	46bd      	mov	sp, r7
 80350b8:	bd80      	pop	{r7, pc}

080350ba <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80350ba:	b580      	push	{r7, lr}
 80350bc:	b084      	sub	sp, #16
 80350be:	af00      	add	r7, sp, #0
 80350c0:	60f8      	str	r0, [r7, #12]
 80350c2:	60b9      	str	r1, [r7, #8]
 80350c4:	607a      	str	r2, [r7, #4]
 80350c6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80350c8:	68bb      	ldr	r3, [r7, #8]
 80350ca:	2b00      	cmp	r3, #0
 80350cc:	d103      	bne.n	80350d6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80350ce:	69bb      	ldr	r3, [r7, #24]
 80350d0:	69ba      	ldr	r2, [r7, #24]
 80350d2:	601a      	str	r2, [r3, #0]
 80350d4:	e002      	b.n	80350dc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80350d6:	69bb      	ldr	r3, [r7, #24]
 80350d8:	687a      	ldr	r2, [r7, #4]
 80350da:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80350dc:	69bb      	ldr	r3, [r7, #24]
 80350de:	68fa      	ldr	r2, [r7, #12]
 80350e0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80350e2:	69bb      	ldr	r3, [r7, #24]
 80350e4:	68ba      	ldr	r2, [r7, #8]
 80350e6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80350e8:	2101      	movs	r1, #1
 80350ea:	69b8      	ldr	r0, [r7, #24]
 80350ec:	f7ff fefe 	bl	8034eec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80350f0:	69bb      	ldr	r3, [r7, #24]
 80350f2:	78fa      	ldrb	r2, [r7, #3]
 80350f4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80350f8:	bf00      	nop
 80350fa:	3710      	adds	r7, #16
 80350fc:	46bd      	mov	sp, r7
 80350fe:	bd80      	pop	{r7, pc}

08035100 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8035100:	b580      	push	{r7, lr}
 8035102:	b08e      	sub	sp, #56	@ 0x38
 8035104:	af00      	add	r7, sp, #0
 8035106:	60f8      	str	r0, [r7, #12]
 8035108:	60b9      	str	r1, [r7, #8]
 803510a:	607a      	str	r2, [r7, #4]
 803510c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 803510e:	2300      	movs	r3, #0
 8035110:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8035112:	68fb      	ldr	r3, [r7, #12]
 8035114:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8035116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8035118:	2b00      	cmp	r3, #0
 803511a:	d10b      	bne.n	8035134 <xQueueGenericSend+0x34>
	__asm volatile
 803511c:	f04f 0310 	mov.w	r3, #16
 8035120:	f383 8811 	msr	BASEPRI, r3
 8035124:	f3bf 8f6f 	isb	sy
 8035128:	f3bf 8f4f 	dsb	sy
 803512c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 803512e:	bf00      	nop
 8035130:	bf00      	nop
 8035132:	e7fd      	b.n	8035130 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8035134:	68bb      	ldr	r3, [r7, #8]
 8035136:	2b00      	cmp	r3, #0
 8035138:	d103      	bne.n	8035142 <xQueueGenericSend+0x42>
 803513a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 803513c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 803513e:	2b00      	cmp	r3, #0
 8035140:	d101      	bne.n	8035146 <xQueueGenericSend+0x46>
 8035142:	2301      	movs	r3, #1
 8035144:	e000      	b.n	8035148 <xQueueGenericSend+0x48>
 8035146:	2300      	movs	r3, #0
 8035148:	2b00      	cmp	r3, #0
 803514a:	d10b      	bne.n	8035164 <xQueueGenericSend+0x64>
	__asm volatile
 803514c:	f04f 0310 	mov.w	r3, #16
 8035150:	f383 8811 	msr	BASEPRI, r3
 8035154:	f3bf 8f6f 	isb	sy
 8035158:	f3bf 8f4f 	dsb	sy
 803515c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 803515e:	bf00      	nop
 8035160:	bf00      	nop
 8035162:	e7fd      	b.n	8035160 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8035164:	683b      	ldr	r3, [r7, #0]
 8035166:	2b02      	cmp	r3, #2
 8035168:	d103      	bne.n	8035172 <xQueueGenericSend+0x72>
 803516a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 803516c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 803516e:	2b01      	cmp	r3, #1
 8035170:	d101      	bne.n	8035176 <xQueueGenericSend+0x76>
 8035172:	2301      	movs	r3, #1
 8035174:	e000      	b.n	8035178 <xQueueGenericSend+0x78>
 8035176:	2300      	movs	r3, #0
 8035178:	2b00      	cmp	r3, #0
 803517a:	d10b      	bne.n	8035194 <xQueueGenericSend+0x94>
	__asm volatile
 803517c:	f04f 0310 	mov.w	r3, #16
 8035180:	f383 8811 	msr	BASEPRI, r3
 8035184:	f3bf 8f6f 	isb	sy
 8035188:	f3bf 8f4f 	dsb	sy
 803518c:	623b      	str	r3, [r7, #32]
}
 803518e:	bf00      	nop
 8035190:	bf00      	nop
 8035192:	e7fd      	b.n	8035190 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8035194:	f001 fd10 	bl	8036bb8 <xTaskGetSchedulerState>
 8035198:	4603      	mov	r3, r0
 803519a:	2b00      	cmp	r3, #0
 803519c:	d102      	bne.n	80351a4 <xQueueGenericSend+0xa4>
 803519e:	687b      	ldr	r3, [r7, #4]
 80351a0:	2b00      	cmp	r3, #0
 80351a2:	d101      	bne.n	80351a8 <xQueueGenericSend+0xa8>
 80351a4:	2301      	movs	r3, #1
 80351a6:	e000      	b.n	80351aa <xQueueGenericSend+0xaa>
 80351a8:	2300      	movs	r3, #0
 80351aa:	2b00      	cmp	r3, #0
 80351ac:	d10b      	bne.n	80351c6 <xQueueGenericSend+0xc6>
	__asm volatile
 80351ae:	f04f 0310 	mov.w	r3, #16
 80351b2:	f383 8811 	msr	BASEPRI, r3
 80351b6:	f3bf 8f6f 	isb	sy
 80351ba:	f3bf 8f4f 	dsb	sy
 80351be:	61fb      	str	r3, [r7, #28]
}
 80351c0:	bf00      	nop
 80351c2:	bf00      	nop
 80351c4:	e7fd      	b.n	80351c2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80351c6:	f7ff fd6f 	bl	8034ca8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80351ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80351cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80351ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80351d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80351d2:	429a      	cmp	r2, r3
 80351d4:	d302      	bcc.n	80351dc <xQueueGenericSend+0xdc>
 80351d6:	683b      	ldr	r3, [r7, #0]
 80351d8:	2b02      	cmp	r3, #2
 80351da:	d129      	bne.n	8035230 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80351dc:	683a      	ldr	r2, [r7, #0]
 80351de:	68b9      	ldr	r1, [r7, #8]
 80351e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80351e2:	f000 fa0f 	bl	8035604 <prvCopyDataToQueue>
 80351e6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80351e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80351ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80351ec:	2b00      	cmp	r3, #0
 80351ee:	d010      	beq.n	8035212 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80351f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80351f2:	3324      	adds	r3, #36	@ 0x24
 80351f4:	4618      	mov	r0, r3
 80351f6:	f001 fa2f 	bl	8036658 <xTaskRemoveFromEventList>
 80351fa:	4603      	mov	r3, r0
 80351fc:	2b00      	cmp	r3, #0
 80351fe:	d013      	beq.n	8035228 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8035200:	4b3f      	ldr	r3, [pc, #252]	@ (8035300 <xQueueGenericSend+0x200>)
 8035202:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8035206:	601a      	str	r2, [r3, #0]
 8035208:	f3bf 8f4f 	dsb	sy
 803520c:	f3bf 8f6f 	isb	sy
 8035210:	e00a      	b.n	8035228 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8035212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8035214:	2b00      	cmp	r3, #0
 8035216:	d007      	beq.n	8035228 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8035218:	4b39      	ldr	r3, [pc, #228]	@ (8035300 <xQueueGenericSend+0x200>)
 803521a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 803521e:	601a      	str	r2, [r3, #0]
 8035220:	f3bf 8f4f 	dsb	sy
 8035224:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8035228:	f7ff fd70 	bl	8034d0c <vPortExitCritical>
				return pdPASS;
 803522c:	2301      	movs	r3, #1
 803522e:	e063      	b.n	80352f8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8035230:	687b      	ldr	r3, [r7, #4]
 8035232:	2b00      	cmp	r3, #0
 8035234:	d103      	bne.n	803523e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8035236:	f7ff fd69 	bl	8034d0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 803523a:	2300      	movs	r3, #0
 803523c:	e05c      	b.n	80352f8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 803523e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8035240:	2b00      	cmp	r3, #0
 8035242:	d106      	bne.n	8035252 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8035244:	f107 0314 	add.w	r3, r7, #20
 8035248:	4618      	mov	r0, r3
 803524a:	f001 fa69 	bl	8036720 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 803524e:	2301      	movs	r3, #1
 8035250:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8035252:	f7ff fd5b 	bl	8034d0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8035256:	f000 fefd 	bl	8036054 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 803525a:	f7ff fd25 	bl	8034ca8 <vPortEnterCritical>
 803525e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8035260:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8035264:	b25b      	sxtb	r3, r3
 8035266:	f1b3 3fff 	cmp.w	r3, #4294967295
 803526a:	d103      	bne.n	8035274 <xQueueGenericSend+0x174>
 803526c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 803526e:	2200      	movs	r2, #0
 8035270:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8035274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8035276:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 803527a:	b25b      	sxtb	r3, r3
 803527c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8035280:	d103      	bne.n	803528a <xQueueGenericSend+0x18a>
 8035282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8035284:	2200      	movs	r2, #0
 8035286:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 803528a:	f7ff fd3f 	bl	8034d0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 803528e:	1d3a      	adds	r2, r7, #4
 8035290:	f107 0314 	add.w	r3, r7, #20
 8035294:	4611      	mov	r1, r2
 8035296:	4618      	mov	r0, r3
 8035298:	f001 fa58 	bl	803674c <xTaskCheckForTimeOut>
 803529c:	4603      	mov	r3, r0
 803529e:	2b00      	cmp	r3, #0
 80352a0:	d124      	bne.n	80352ec <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80352a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80352a4:	f000 faa6 	bl	80357f4 <prvIsQueueFull>
 80352a8:	4603      	mov	r3, r0
 80352aa:	2b00      	cmp	r3, #0
 80352ac:	d018      	beq.n	80352e0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80352ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80352b0:	3310      	adds	r3, #16
 80352b2:	687a      	ldr	r2, [r7, #4]
 80352b4:	4611      	mov	r1, r2
 80352b6:	4618      	mov	r0, r3
 80352b8:	f001 f97c 	bl	80365b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80352bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80352be:	f000 fa31 	bl	8035724 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80352c2:	f000 fed5 	bl	8036070 <xTaskResumeAll>
 80352c6:	4603      	mov	r3, r0
 80352c8:	2b00      	cmp	r3, #0
 80352ca:	f47f af7c 	bne.w	80351c6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80352ce:	4b0c      	ldr	r3, [pc, #48]	@ (8035300 <xQueueGenericSend+0x200>)
 80352d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80352d4:	601a      	str	r2, [r3, #0]
 80352d6:	f3bf 8f4f 	dsb	sy
 80352da:	f3bf 8f6f 	isb	sy
 80352de:	e772      	b.n	80351c6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80352e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80352e2:	f000 fa1f 	bl	8035724 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80352e6:	f000 fec3 	bl	8036070 <xTaskResumeAll>
 80352ea:	e76c      	b.n	80351c6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80352ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80352ee:	f000 fa19 	bl	8035724 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80352f2:	f000 febd 	bl	8036070 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80352f6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80352f8:	4618      	mov	r0, r3
 80352fa:	3738      	adds	r7, #56	@ 0x38
 80352fc:	46bd      	mov	sp, r7
 80352fe:	bd80      	pop	{r7, pc}
 8035300:	e000ed04 	.word	0xe000ed04

08035304 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8035304:	b580      	push	{r7, lr}
 8035306:	b090      	sub	sp, #64	@ 0x40
 8035308:	af00      	add	r7, sp, #0
 803530a:	60f8      	str	r0, [r7, #12]
 803530c:	60b9      	str	r1, [r7, #8]
 803530e:	607a      	str	r2, [r7, #4]
 8035310:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8035312:	68fb      	ldr	r3, [r7, #12]
 8035314:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8035316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8035318:	2b00      	cmp	r3, #0
 803531a:	d10b      	bne.n	8035334 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 803531c:	f04f 0310 	mov.w	r3, #16
 8035320:	f383 8811 	msr	BASEPRI, r3
 8035324:	f3bf 8f6f 	isb	sy
 8035328:	f3bf 8f4f 	dsb	sy
 803532c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 803532e:	bf00      	nop
 8035330:	bf00      	nop
 8035332:	e7fd      	b.n	8035330 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8035334:	68bb      	ldr	r3, [r7, #8]
 8035336:	2b00      	cmp	r3, #0
 8035338:	d103      	bne.n	8035342 <xQueueGenericSendFromISR+0x3e>
 803533a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 803533c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 803533e:	2b00      	cmp	r3, #0
 8035340:	d101      	bne.n	8035346 <xQueueGenericSendFromISR+0x42>
 8035342:	2301      	movs	r3, #1
 8035344:	e000      	b.n	8035348 <xQueueGenericSendFromISR+0x44>
 8035346:	2300      	movs	r3, #0
 8035348:	2b00      	cmp	r3, #0
 803534a:	d10b      	bne.n	8035364 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 803534c:	f04f 0310 	mov.w	r3, #16
 8035350:	f383 8811 	msr	BASEPRI, r3
 8035354:	f3bf 8f6f 	isb	sy
 8035358:	f3bf 8f4f 	dsb	sy
 803535c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 803535e:	bf00      	nop
 8035360:	bf00      	nop
 8035362:	e7fd      	b.n	8035360 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8035364:	683b      	ldr	r3, [r7, #0]
 8035366:	2b02      	cmp	r3, #2
 8035368:	d103      	bne.n	8035372 <xQueueGenericSendFromISR+0x6e>
 803536a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 803536c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 803536e:	2b01      	cmp	r3, #1
 8035370:	d101      	bne.n	8035376 <xQueueGenericSendFromISR+0x72>
 8035372:	2301      	movs	r3, #1
 8035374:	e000      	b.n	8035378 <xQueueGenericSendFromISR+0x74>
 8035376:	2300      	movs	r3, #0
 8035378:	2b00      	cmp	r3, #0
 803537a:	d10b      	bne.n	8035394 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 803537c:	f04f 0310 	mov.w	r3, #16
 8035380:	f383 8811 	msr	BASEPRI, r3
 8035384:	f3bf 8f6f 	isb	sy
 8035388:	f3bf 8f4f 	dsb	sy
 803538c:	623b      	str	r3, [r7, #32]
}
 803538e:	bf00      	nop
 8035390:	bf00      	nop
 8035392:	e7fd      	b.n	8035390 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8035394:	f7ff fd68 	bl	8034e68 <vPortValidateInterruptPriority>
	__asm volatile
 8035398:	f3ef 8211 	mrs	r2, BASEPRI
 803539c:	f04f 0310 	mov.w	r3, #16
 80353a0:	f383 8811 	msr	BASEPRI, r3
 80353a4:	f3bf 8f6f 	isb	sy
 80353a8:	f3bf 8f4f 	dsb	sy
 80353ac:	61fa      	str	r2, [r7, #28]
 80353ae:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80353b0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80353b2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80353b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80353b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80353b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80353ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80353bc:	429a      	cmp	r2, r3
 80353be:	d302      	bcc.n	80353c6 <xQueueGenericSendFromISR+0xc2>
 80353c0:	683b      	ldr	r3, [r7, #0]
 80353c2:	2b02      	cmp	r3, #2
 80353c4:	d12f      	bne.n	8035426 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80353c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80353c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80353cc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80353d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80353d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80353d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80353d6:	683a      	ldr	r2, [r7, #0]
 80353d8:	68b9      	ldr	r1, [r7, #8]
 80353da:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80353dc:	f000 f912 	bl	8035604 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80353e0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80353e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80353e8:	d112      	bne.n	8035410 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80353ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80353ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80353ee:	2b00      	cmp	r3, #0
 80353f0:	d016      	beq.n	8035420 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80353f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80353f4:	3324      	adds	r3, #36	@ 0x24
 80353f6:	4618      	mov	r0, r3
 80353f8:	f001 f92e 	bl	8036658 <xTaskRemoveFromEventList>
 80353fc:	4603      	mov	r3, r0
 80353fe:	2b00      	cmp	r3, #0
 8035400:	d00e      	beq.n	8035420 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8035402:	687b      	ldr	r3, [r7, #4]
 8035404:	2b00      	cmp	r3, #0
 8035406:	d00b      	beq.n	8035420 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8035408:	687b      	ldr	r3, [r7, #4]
 803540a:	2201      	movs	r2, #1
 803540c:	601a      	str	r2, [r3, #0]
 803540e:	e007      	b.n	8035420 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8035410:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8035414:	3301      	adds	r3, #1
 8035416:	b2db      	uxtb	r3, r3
 8035418:	b25a      	sxtb	r2, r3
 803541a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 803541c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8035420:	2301      	movs	r3, #1
 8035422:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8035424:	e001      	b.n	803542a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8035426:	2300      	movs	r3, #0
 8035428:	63fb      	str	r3, [r7, #60]	@ 0x3c
 803542a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803542c:	617b      	str	r3, [r7, #20]
	__asm volatile
 803542e:	697b      	ldr	r3, [r7, #20]
 8035430:	f383 8811 	msr	BASEPRI, r3
}
 8035434:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8035436:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8035438:	4618      	mov	r0, r3
 803543a:	3740      	adds	r7, #64	@ 0x40
 803543c:	46bd      	mov	sp, r7
 803543e:	bd80      	pop	{r7, pc}

08035440 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8035440:	b580      	push	{r7, lr}
 8035442:	b08c      	sub	sp, #48	@ 0x30
 8035444:	af00      	add	r7, sp, #0
 8035446:	60f8      	str	r0, [r7, #12]
 8035448:	60b9      	str	r1, [r7, #8]
 803544a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 803544c:	2300      	movs	r3, #0
 803544e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8035450:	68fb      	ldr	r3, [r7, #12]
 8035452:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8035454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8035456:	2b00      	cmp	r3, #0
 8035458:	d10b      	bne.n	8035472 <xQueueReceive+0x32>
	__asm volatile
 803545a:	f04f 0310 	mov.w	r3, #16
 803545e:	f383 8811 	msr	BASEPRI, r3
 8035462:	f3bf 8f6f 	isb	sy
 8035466:	f3bf 8f4f 	dsb	sy
 803546a:	623b      	str	r3, [r7, #32]
}
 803546c:	bf00      	nop
 803546e:	bf00      	nop
 8035470:	e7fd      	b.n	803546e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8035472:	68bb      	ldr	r3, [r7, #8]
 8035474:	2b00      	cmp	r3, #0
 8035476:	d103      	bne.n	8035480 <xQueueReceive+0x40>
 8035478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 803547a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 803547c:	2b00      	cmp	r3, #0
 803547e:	d101      	bne.n	8035484 <xQueueReceive+0x44>
 8035480:	2301      	movs	r3, #1
 8035482:	e000      	b.n	8035486 <xQueueReceive+0x46>
 8035484:	2300      	movs	r3, #0
 8035486:	2b00      	cmp	r3, #0
 8035488:	d10b      	bne.n	80354a2 <xQueueReceive+0x62>
	__asm volatile
 803548a:	f04f 0310 	mov.w	r3, #16
 803548e:	f383 8811 	msr	BASEPRI, r3
 8035492:	f3bf 8f6f 	isb	sy
 8035496:	f3bf 8f4f 	dsb	sy
 803549a:	61fb      	str	r3, [r7, #28]
}
 803549c:	bf00      	nop
 803549e:	bf00      	nop
 80354a0:	e7fd      	b.n	803549e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80354a2:	f001 fb89 	bl	8036bb8 <xTaskGetSchedulerState>
 80354a6:	4603      	mov	r3, r0
 80354a8:	2b00      	cmp	r3, #0
 80354aa:	d102      	bne.n	80354b2 <xQueueReceive+0x72>
 80354ac:	687b      	ldr	r3, [r7, #4]
 80354ae:	2b00      	cmp	r3, #0
 80354b0:	d101      	bne.n	80354b6 <xQueueReceive+0x76>
 80354b2:	2301      	movs	r3, #1
 80354b4:	e000      	b.n	80354b8 <xQueueReceive+0x78>
 80354b6:	2300      	movs	r3, #0
 80354b8:	2b00      	cmp	r3, #0
 80354ba:	d10b      	bne.n	80354d4 <xQueueReceive+0x94>
	__asm volatile
 80354bc:	f04f 0310 	mov.w	r3, #16
 80354c0:	f383 8811 	msr	BASEPRI, r3
 80354c4:	f3bf 8f6f 	isb	sy
 80354c8:	f3bf 8f4f 	dsb	sy
 80354cc:	61bb      	str	r3, [r7, #24]
}
 80354ce:	bf00      	nop
 80354d0:	bf00      	nop
 80354d2:	e7fd      	b.n	80354d0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80354d4:	f7ff fbe8 	bl	8034ca8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80354d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80354da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80354dc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80354de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80354e0:	2b00      	cmp	r3, #0
 80354e2:	d01f      	beq.n	8035524 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80354e4:	68b9      	ldr	r1, [r7, #8]
 80354e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80354e8:	f000 f8f6 	bl	80356d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80354ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80354ee:	1e5a      	subs	r2, r3, #1
 80354f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80354f2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80354f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80354f6:	691b      	ldr	r3, [r3, #16]
 80354f8:	2b00      	cmp	r3, #0
 80354fa:	d00f      	beq.n	803551c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80354fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80354fe:	3310      	adds	r3, #16
 8035500:	4618      	mov	r0, r3
 8035502:	f001 f8a9 	bl	8036658 <xTaskRemoveFromEventList>
 8035506:	4603      	mov	r3, r0
 8035508:	2b00      	cmp	r3, #0
 803550a:	d007      	beq.n	803551c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 803550c:	4b3c      	ldr	r3, [pc, #240]	@ (8035600 <xQueueReceive+0x1c0>)
 803550e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8035512:	601a      	str	r2, [r3, #0]
 8035514:	f3bf 8f4f 	dsb	sy
 8035518:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 803551c:	f7ff fbf6 	bl	8034d0c <vPortExitCritical>
				return pdPASS;
 8035520:	2301      	movs	r3, #1
 8035522:	e069      	b.n	80355f8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8035524:	687b      	ldr	r3, [r7, #4]
 8035526:	2b00      	cmp	r3, #0
 8035528:	d103      	bne.n	8035532 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 803552a:	f7ff fbef 	bl	8034d0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 803552e:	2300      	movs	r3, #0
 8035530:	e062      	b.n	80355f8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8035532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8035534:	2b00      	cmp	r3, #0
 8035536:	d106      	bne.n	8035546 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8035538:	f107 0310 	add.w	r3, r7, #16
 803553c:	4618      	mov	r0, r3
 803553e:	f001 f8ef 	bl	8036720 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8035542:	2301      	movs	r3, #1
 8035544:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8035546:	f7ff fbe1 	bl	8034d0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 803554a:	f000 fd83 	bl	8036054 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 803554e:	f7ff fbab 	bl	8034ca8 <vPortEnterCritical>
 8035552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8035554:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8035558:	b25b      	sxtb	r3, r3
 803555a:	f1b3 3fff 	cmp.w	r3, #4294967295
 803555e:	d103      	bne.n	8035568 <xQueueReceive+0x128>
 8035560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8035562:	2200      	movs	r2, #0
 8035564:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8035568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 803556a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 803556e:	b25b      	sxtb	r3, r3
 8035570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8035574:	d103      	bne.n	803557e <xQueueReceive+0x13e>
 8035576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8035578:	2200      	movs	r2, #0
 803557a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 803557e:	f7ff fbc5 	bl	8034d0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8035582:	1d3a      	adds	r2, r7, #4
 8035584:	f107 0310 	add.w	r3, r7, #16
 8035588:	4611      	mov	r1, r2
 803558a:	4618      	mov	r0, r3
 803558c:	f001 f8de 	bl	803674c <xTaskCheckForTimeOut>
 8035590:	4603      	mov	r3, r0
 8035592:	2b00      	cmp	r3, #0
 8035594:	d123      	bne.n	80355de <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8035596:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8035598:	f000 f916 	bl	80357c8 <prvIsQueueEmpty>
 803559c:	4603      	mov	r3, r0
 803559e:	2b00      	cmp	r3, #0
 80355a0:	d017      	beq.n	80355d2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80355a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80355a4:	3324      	adds	r3, #36	@ 0x24
 80355a6:	687a      	ldr	r2, [r7, #4]
 80355a8:	4611      	mov	r1, r2
 80355aa:	4618      	mov	r0, r3
 80355ac:	f001 f802 	bl	80365b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80355b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80355b2:	f000 f8b7 	bl	8035724 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80355b6:	f000 fd5b 	bl	8036070 <xTaskResumeAll>
 80355ba:	4603      	mov	r3, r0
 80355bc:	2b00      	cmp	r3, #0
 80355be:	d189      	bne.n	80354d4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80355c0:	4b0f      	ldr	r3, [pc, #60]	@ (8035600 <xQueueReceive+0x1c0>)
 80355c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80355c6:	601a      	str	r2, [r3, #0]
 80355c8:	f3bf 8f4f 	dsb	sy
 80355cc:	f3bf 8f6f 	isb	sy
 80355d0:	e780      	b.n	80354d4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80355d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80355d4:	f000 f8a6 	bl	8035724 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80355d8:	f000 fd4a 	bl	8036070 <xTaskResumeAll>
 80355dc:	e77a      	b.n	80354d4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80355de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80355e0:	f000 f8a0 	bl	8035724 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80355e4:	f000 fd44 	bl	8036070 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80355e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80355ea:	f000 f8ed 	bl	80357c8 <prvIsQueueEmpty>
 80355ee:	4603      	mov	r3, r0
 80355f0:	2b00      	cmp	r3, #0
 80355f2:	f43f af6f 	beq.w	80354d4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80355f6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80355f8:	4618      	mov	r0, r3
 80355fa:	3730      	adds	r7, #48	@ 0x30
 80355fc:	46bd      	mov	sp, r7
 80355fe:	bd80      	pop	{r7, pc}
 8035600:	e000ed04 	.word	0xe000ed04

08035604 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8035604:	b580      	push	{r7, lr}
 8035606:	b086      	sub	sp, #24
 8035608:	af00      	add	r7, sp, #0
 803560a:	60f8      	str	r0, [r7, #12]
 803560c:	60b9      	str	r1, [r7, #8]
 803560e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8035610:	2300      	movs	r3, #0
 8035612:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8035614:	68fb      	ldr	r3, [r7, #12]
 8035616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8035618:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 803561a:	68fb      	ldr	r3, [r7, #12]
 803561c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 803561e:	2b00      	cmp	r3, #0
 8035620:	d10d      	bne.n	803563e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8035622:	68fb      	ldr	r3, [r7, #12]
 8035624:	681b      	ldr	r3, [r3, #0]
 8035626:	2b00      	cmp	r3, #0
 8035628:	d14d      	bne.n	80356c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 803562a:	68fb      	ldr	r3, [r7, #12]
 803562c:	689b      	ldr	r3, [r3, #8]
 803562e:	4618      	mov	r0, r3
 8035630:	f001 fae0 	bl	8036bf4 <xTaskPriorityDisinherit>
 8035634:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8035636:	68fb      	ldr	r3, [r7, #12]
 8035638:	2200      	movs	r2, #0
 803563a:	609a      	str	r2, [r3, #8]
 803563c:	e043      	b.n	80356c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 803563e:	687b      	ldr	r3, [r7, #4]
 8035640:	2b00      	cmp	r3, #0
 8035642:	d119      	bne.n	8035678 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8035644:	68fb      	ldr	r3, [r7, #12]
 8035646:	6858      	ldr	r0, [r3, #4]
 8035648:	68fb      	ldr	r3, [r7, #12]
 803564a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 803564c:	461a      	mov	r2, r3
 803564e:	68b9      	ldr	r1, [r7, #8]
 8035650:	f002 f920 	bl	8037894 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8035654:	68fb      	ldr	r3, [r7, #12]
 8035656:	685a      	ldr	r2, [r3, #4]
 8035658:	68fb      	ldr	r3, [r7, #12]
 803565a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 803565c:	441a      	add	r2, r3
 803565e:	68fb      	ldr	r3, [r7, #12]
 8035660:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8035662:	68fb      	ldr	r3, [r7, #12]
 8035664:	685a      	ldr	r2, [r3, #4]
 8035666:	68fb      	ldr	r3, [r7, #12]
 8035668:	689b      	ldr	r3, [r3, #8]
 803566a:	429a      	cmp	r2, r3
 803566c:	d32b      	bcc.n	80356c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 803566e:	68fb      	ldr	r3, [r7, #12]
 8035670:	681a      	ldr	r2, [r3, #0]
 8035672:	68fb      	ldr	r3, [r7, #12]
 8035674:	605a      	str	r2, [r3, #4]
 8035676:	e026      	b.n	80356c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8035678:	68fb      	ldr	r3, [r7, #12]
 803567a:	68d8      	ldr	r0, [r3, #12]
 803567c:	68fb      	ldr	r3, [r7, #12]
 803567e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8035680:	461a      	mov	r2, r3
 8035682:	68b9      	ldr	r1, [r7, #8]
 8035684:	f002 f906 	bl	8037894 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8035688:	68fb      	ldr	r3, [r7, #12]
 803568a:	68da      	ldr	r2, [r3, #12]
 803568c:	68fb      	ldr	r3, [r7, #12]
 803568e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8035690:	425b      	negs	r3, r3
 8035692:	441a      	add	r2, r3
 8035694:	68fb      	ldr	r3, [r7, #12]
 8035696:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8035698:	68fb      	ldr	r3, [r7, #12]
 803569a:	68da      	ldr	r2, [r3, #12]
 803569c:	68fb      	ldr	r3, [r7, #12]
 803569e:	681b      	ldr	r3, [r3, #0]
 80356a0:	429a      	cmp	r2, r3
 80356a2:	d207      	bcs.n	80356b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80356a4:	68fb      	ldr	r3, [r7, #12]
 80356a6:	689a      	ldr	r2, [r3, #8]
 80356a8:	68fb      	ldr	r3, [r7, #12]
 80356aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80356ac:	425b      	negs	r3, r3
 80356ae:	441a      	add	r2, r3
 80356b0:	68fb      	ldr	r3, [r7, #12]
 80356b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80356b4:	687b      	ldr	r3, [r7, #4]
 80356b6:	2b02      	cmp	r3, #2
 80356b8:	d105      	bne.n	80356c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80356ba:	693b      	ldr	r3, [r7, #16]
 80356bc:	2b00      	cmp	r3, #0
 80356be:	d002      	beq.n	80356c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80356c0:	693b      	ldr	r3, [r7, #16]
 80356c2:	3b01      	subs	r3, #1
 80356c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80356c6:	693b      	ldr	r3, [r7, #16]
 80356c8:	1c5a      	adds	r2, r3, #1
 80356ca:	68fb      	ldr	r3, [r7, #12]
 80356cc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80356ce:	697b      	ldr	r3, [r7, #20]
}
 80356d0:	4618      	mov	r0, r3
 80356d2:	3718      	adds	r7, #24
 80356d4:	46bd      	mov	sp, r7
 80356d6:	bd80      	pop	{r7, pc}

080356d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80356d8:	b580      	push	{r7, lr}
 80356da:	b082      	sub	sp, #8
 80356dc:	af00      	add	r7, sp, #0
 80356de:	6078      	str	r0, [r7, #4]
 80356e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80356e2:	687b      	ldr	r3, [r7, #4]
 80356e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80356e6:	2b00      	cmp	r3, #0
 80356e8:	d018      	beq.n	803571c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80356ea:	687b      	ldr	r3, [r7, #4]
 80356ec:	68da      	ldr	r2, [r3, #12]
 80356ee:	687b      	ldr	r3, [r7, #4]
 80356f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80356f2:	441a      	add	r2, r3
 80356f4:	687b      	ldr	r3, [r7, #4]
 80356f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80356f8:	687b      	ldr	r3, [r7, #4]
 80356fa:	68da      	ldr	r2, [r3, #12]
 80356fc:	687b      	ldr	r3, [r7, #4]
 80356fe:	689b      	ldr	r3, [r3, #8]
 8035700:	429a      	cmp	r2, r3
 8035702:	d303      	bcc.n	803570c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8035704:	687b      	ldr	r3, [r7, #4]
 8035706:	681a      	ldr	r2, [r3, #0]
 8035708:	687b      	ldr	r3, [r7, #4]
 803570a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 803570c:	687b      	ldr	r3, [r7, #4]
 803570e:	68d9      	ldr	r1, [r3, #12]
 8035710:	687b      	ldr	r3, [r7, #4]
 8035712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8035714:	461a      	mov	r2, r3
 8035716:	6838      	ldr	r0, [r7, #0]
 8035718:	f002 f8bc 	bl	8037894 <memcpy>
	}
}
 803571c:	bf00      	nop
 803571e:	3708      	adds	r7, #8
 8035720:	46bd      	mov	sp, r7
 8035722:	bd80      	pop	{r7, pc}

08035724 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8035724:	b580      	push	{r7, lr}
 8035726:	b084      	sub	sp, #16
 8035728:	af00      	add	r7, sp, #0
 803572a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 803572c:	f7ff fabc 	bl	8034ca8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8035730:	687b      	ldr	r3, [r7, #4]
 8035732:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8035736:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8035738:	e011      	b.n	803575e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 803573a:	687b      	ldr	r3, [r7, #4]
 803573c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 803573e:	2b00      	cmp	r3, #0
 8035740:	d012      	beq.n	8035768 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8035742:	687b      	ldr	r3, [r7, #4]
 8035744:	3324      	adds	r3, #36	@ 0x24
 8035746:	4618      	mov	r0, r3
 8035748:	f000 ff86 	bl	8036658 <xTaskRemoveFromEventList>
 803574c:	4603      	mov	r3, r0
 803574e:	2b00      	cmp	r3, #0
 8035750:	d001      	beq.n	8035756 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8035752:	f001 f86f 	bl	8036834 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8035756:	7bfb      	ldrb	r3, [r7, #15]
 8035758:	3b01      	subs	r3, #1
 803575a:	b2db      	uxtb	r3, r3
 803575c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 803575e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8035762:	2b00      	cmp	r3, #0
 8035764:	dce9      	bgt.n	803573a <prvUnlockQueue+0x16>
 8035766:	e000      	b.n	803576a <prvUnlockQueue+0x46>
					break;
 8035768:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 803576a:	687b      	ldr	r3, [r7, #4]
 803576c:	22ff      	movs	r2, #255	@ 0xff
 803576e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8035772:	f7ff facb 	bl	8034d0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8035776:	f7ff fa97 	bl	8034ca8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 803577a:	687b      	ldr	r3, [r7, #4]
 803577c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8035780:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8035782:	e011      	b.n	80357a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8035784:	687b      	ldr	r3, [r7, #4]
 8035786:	691b      	ldr	r3, [r3, #16]
 8035788:	2b00      	cmp	r3, #0
 803578a:	d012      	beq.n	80357b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 803578c:	687b      	ldr	r3, [r7, #4]
 803578e:	3310      	adds	r3, #16
 8035790:	4618      	mov	r0, r3
 8035792:	f000 ff61 	bl	8036658 <xTaskRemoveFromEventList>
 8035796:	4603      	mov	r3, r0
 8035798:	2b00      	cmp	r3, #0
 803579a:	d001      	beq.n	80357a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 803579c:	f001 f84a 	bl	8036834 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80357a0:	7bbb      	ldrb	r3, [r7, #14]
 80357a2:	3b01      	subs	r3, #1
 80357a4:	b2db      	uxtb	r3, r3
 80357a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80357a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80357ac:	2b00      	cmp	r3, #0
 80357ae:	dce9      	bgt.n	8035784 <prvUnlockQueue+0x60>
 80357b0:	e000      	b.n	80357b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80357b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80357b4:	687b      	ldr	r3, [r7, #4]
 80357b6:	22ff      	movs	r2, #255	@ 0xff
 80357b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80357bc:	f7ff faa6 	bl	8034d0c <vPortExitCritical>
}
 80357c0:	bf00      	nop
 80357c2:	3710      	adds	r7, #16
 80357c4:	46bd      	mov	sp, r7
 80357c6:	bd80      	pop	{r7, pc}

080357c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80357c8:	b580      	push	{r7, lr}
 80357ca:	b084      	sub	sp, #16
 80357cc:	af00      	add	r7, sp, #0
 80357ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80357d0:	f7ff fa6a 	bl	8034ca8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80357d4:	687b      	ldr	r3, [r7, #4]
 80357d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80357d8:	2b00      	cmp	r3, #0
 80357da:	d102      	bne.n	80357e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80357dc:	2301      	movs	r3, #1
 80357de:	60fb      	str	r3, [r7, #12]
 80357e0:	e001      	b.n	80357e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80357e2:	2300      	movs	r3, #0
 80357e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80357e6:	f7ff fa91 	bl	8034d0c <vPortExitCritical>

	return xReturn;
 80357ea:	68fb      	ldr	r3, [r7, #12]
}
 80357ec:	4618      	mov	r0, r3
 80357ee:	3710      	adds	r7, #16
 80357f0:	46bd      	mov	sp, r7
 80357f2:	bd80      	pop	{r7, pc}

080357f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80357f4:	b580      	push	{r7, lr}
 80357f6:	b084      	sub	sp, #16
 80357f8:	af00      	add	r7, sp, #0
 80357fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80357fc:	f7ff fa54 	bl	8034ca8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8035800:	687b      	ldr	r3, [r7, #4]
 8035802:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8035804:	687b      	ldr	r3, [r7, #4]
 8035806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8035808:	429a      	cmp	r2, r3
 803580a:	d102      	bne.n	8035812 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 803580c:	2301      	movs	r3, #1
 803580e:	60fb      	str	r3, [r7, #12]
 8035810:	e001      	b.n	8035816 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8035812:	2300      	movs	r3, #0
 8035814:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8035816:	f7ff fa79 	bl	8034d0c <vPortExitCritical>

	return xReturn;
 803581a:	68fb      	ldr	r3, [r7, #12]
}
 803581c:	4618      	mov	r0, r3
 803581e:	3710      	adds	r7, #16
 8035820:	46bd      	mov	sp, r7
 8035822:	bd80      	pop	{r7, pc}

08035824 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8035824:	b480      	push	{r7}
 8035826:	b085      	sub	sp, #20
 8035828:	af00      	add	r7, sp, #0
 803582a:	6078      	str	r0, [r7, #4]
 803582c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 803582e:	2300      	movs	r3, #0
 8035830:	60fb      	str	r3, [r7, #12]
 8035832:	e014      	b.n	803585e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8035834:	4a0f      	ldr	r2, [pc, #60]	@ (8035874 <vQueueAddToRegistry+0x50>)
 8035836:	68fb      	ldr	r3, [r7, #12]
 8035838:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 803583c:	2b00      	cmp	r3, #0
 803583e:	d10b      	bne.n	8035858 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8035840:	490c      	ldr	r1, [pc, #48]	@ (8035874 <vQueueAddToRegistry+0x50>)
 8035842:	68fb      	ldr	r3, [r7, #12]
 8035844:	683a      	ldr	r2, [r7, #0]
 8035846:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 803584a:	4a0a      	ldr	r2, [pc, #40]	@ (8035874 <vQueueAddToRegistry+0x50>)
 803584c:	68fb      	ldr	r3, [r7, #12]
 803584e:	00db      	lsls	r3, r3, #3
 8035850:	4413      	add	r3, r2
 8035852:	687a      	ldr	r2, [r7, #4]
 8035854:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8035856:	e006      	b.n	8035866 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8035858:	68fb      	ldr	r3, [r7, #12]
 803585a:	3301      	adds	r3, #1
 803585c:	60fb      	str	r3, [r7, #12]
 803585e:	68fb      	ldr	r3, [r7, #12]
 8035860:	2bfe      	cmp	r3, #254	@ 0xfe
 8035862:	d9e7      	bls.n	8035834 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8035864:	bf00      	nop
 8035866:	bf00      	nop
 8035868:	3714      	adds	r7, #20
 803586a:	46bd      	mov	sp, r7
 803586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035870:	4770      	bx	lr
 8035872:	bf00      	nop
 8035874:	20003628 	.word	0x20003628

08035878 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8035878:	b580      	push	{r7, lr}
 803587a:	b086      	sub	sp, #24
 803587c:	af00      	add	r7, sp, #0
 803587e:	60f8      	str	r0, [r7, #12]
 8035880:	60b9      	str	r1, [r7, #8]
 8035882:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8035884:	68fb      	ldr	r3, [r7, #12]
 8035886:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8035888:	f7ff fa0e 	bl	8034ca8 <vPortEnterCritical>
 803588c:	697b      	ldr	r3, [r7, #20]
 803588e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8035892:	b25b      	sxtb	r3, r3
 8035894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8035898:	d103      	bne.n	80358a2 <vQueueWaitForMessageRestricted+0x2a>
 803589a:	697b      	ldr	r3, [r7, #20]
 803589c:	2200      	movs	r2, #0
 803589e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80358a2:	697b      	ldr	r3, [r7, #20]
 80358a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80358a8:	b25b      	sxtb	r3, r3
 80358aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80358ae:	d103      	bne.n	80358b8 <vQueueWaitForMessageRestricted+0x40>
 80358b0:	697b      	ldr	r3, [r7, #20]
 80358b2:	2200      	movs	r2, #0
 80358b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80358b8:	f7ff fa28 	bl	8034d0c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80358bc:	697b      	ldr	r3, [r7, #20]
 80358be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80358c0:	2b00      	cmp	r3, #0
 80358c2:	d106      	bne.n	80358d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80358c4:	697b      	ldr	r3, [r7, #20]
 80358c6:	3324      	adds	r3, #36	@ 0x24
 80358c8:	687a      	ldr	r2, [r7, #4]
 80358ca:	68b9      	ldr	r1, [r7, #8]
 80358cc:	4618      	mov	r0, r3
 80358ce:	f000 fe97 	bl	8036600 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80358d2:	6978      	ldr	r0, [r7, #20]
 80358d4:	f7ff ff26 	bl	8035724 <prvUnlockQueue>
	}
 80358d8:	bf00      	nop
 80358da:	3718      	adds	r7, #24
 80358dc:	46bd      	mov	sp, r7
 80358de:	bd80      	pop	{r7, pc}

080358e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80358e0:	b580      	push	{r7, lr}
 80358e2:	b08e      	sub	sp, #56	@ 0x38
 80358e4:	af04      	add	r7, sp, #16
 80358e6:	60f8      	str	r0, [r7, #12]
 80358e8:	60b9      	str	r1, [r7, #8]
 80358ea:	607a      	str	r2, [r7, #4]
 80358ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80358ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80358f0:	2b00      	cmp	r3, #0
 80358f2:	d10b      	bne.n	803590c <xTaskCreateStatic+0x2c>
	__asm volatile
 80358f4:	f04f 0310 	mov.w	r3, #16
 80358f8:	f383 8811 	msr	BASEPRI, r3
 80358fc:	f3bf 8f6f 	isb	sy
 8035900:	f3bf 8f4f 	dsb	sy
 8035904:	623b      	str	r3, [r7, #32]
}
 8035906:	bf00      	nop
 8035908:	bf00      	nop
 803590a:	e7fd      	b.n	8035908 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 803590c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 803590e:	2b00      	cmp	r3, #0
 8035910:	d10b      	bne.n	803592a <xTaskCreateStatic+0x4a>
	__asm volatile
 8035912:	f04f 0310 	mov.w	r3, #16
 8035916:	f383 8811 	msr	BASEPRI, r3
 803591a:	f3bf 8f6f 	isb	sy
 803591e:	f3bf 8f4f 	dsb	sy
 8035922:	61fb      	str	r3, [r7, #28]
}
 8035924:	bf00      	nop
 8035926:	bf00      	nop
 8035928:	e7fd      	b.n	8035926 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 803592a:	f44f 73d4 	mov.w	r3, #424	@ 0x1a8
 803592e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8035930:	693b      	ldr	r3, [r7, #16]
 8035932:	f5b3 7fd4 	cmp.w	r3, #424	@ 0x1a8
 8035936:	d00b      	beq.n	8035950 <xTaskCreateStatic+0x70>
	__asm volatile
 8035938:	f04f 0310 	mov.w	r3, #16
 803593c:	f383 8811 	msr	BASEPRI, r3
 8035940:	f3bf 8f6f 	isb	sy
 8035944:	f3bf 8f4f 	dsb	sy
 8035948:	61bb      	str	r3, [r7, #24]
}
 803594a:	bf00      	nop
 803594c:	bf00      	nop
 803594e:	e7fd      	b.n	803594c <xTaskCreateStatic+0x6c>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8035950:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8035952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8035954:	2b00      	cmp	r3, #0
 8035956:	d01e      	beq.n	8035996 <xTaskCreateStatic+0xb6>
 8035958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803595a:	2b00      	cmp	r3, #0
 803595c:	d01b      	beq.n	8035996 <xTaskCreateStatic+0xb6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 803595e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8035960:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8035962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8035964:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8035966:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8035968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 803596a:	2202      	movs	r2, #2
 803596c:	f883 21a1 	strb.w	r2, [r3, #417]	@ 0x1a1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8035970:	2300      	movs	r3, #0
 8035972:	9303      	str	r3, [sp, #12]
 8035974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8035976:	9302      	str	r3, [sp, #8]
 8035978:	f107 0314 	add.w	r3, r7, #20
 803597c:	9301      	str	r3, [sp, #4]
 803597e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8035980:	9300      	str	r3, [sp, #0]
 8035982:	683b      	ldr	r3, [r7, #0]
 8035984:	687a      	ldr	r2, [r7, #4]
 8035986:	68b9      	ldr	r1, [r7, #8]
 8035988:	68f8      	ldr	r0, [r7, #12]
 803598a:	f000 f851 	bl	8035a30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 803598e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8035990:	f000 f90c 	bl	8035bac <prvAddNewTaskToReadyList>
 8035994:	e001      	b.n	803599a <xTaskCreateStatic+0xba>
		}
		else
		{
			xReturn = NULL;
 8035996:	2300      	movs	r3, #0
 8035998:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 803599a:	697b      	ldr	r3, [r7, #20]
	}
 803599c:	4618      	mov	r0, r3
 803599e:	3728      	adds	r7, #40	@ 0x28
 80359a0:	46bd      	mov	sp, r7
 80359a2:	bd80      	pop	{r7, pc}

080359a4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80359a4:	b580      	push	{r7, lr}
 80359a6:	b08c      	sub	sp, #48	@ 0x30
 80359a8:	af04      	add	r7, sp, #16
 80359aa:	60f8      	str	r0, [r7, #12]
 80359ac:	60b9      	str	r1, [r7, #8]
 80359ae:	603b      	str	r3, [r7, #0]
 80359b0:	4613      	mov	r3, r2
 80359b2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80359b4:	88fb      	ldrh	r3, [r7, #6]
 80359b6:	009b      	lsls	r3, r3, #2
 80359b8:	4618      	mov	r0, r3
 80359ba:	f7fe fd9f 	bl	80344fc <pvPortMalloc>
 80359be:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80359c0:	697b      	ldr	r3, [r7, #20]
 80359c2:	2b00      	cmp	r3, #0
 80359c4:	d00f      	beq.n	80359e6 <xTaskCreate+0x42>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80359c6:	f44f 70d4 	mov.w	r0, #424	@ 0x1a8
 80359ca:	f7fe fd97 	bl	80344fc <pvPortMalloc>
 80359ce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80359d0:	69fb      	ldr	r3, [r7, #28]
 80359d2:	2b00      	cmp	r3, #0
 80359d4:	d003      	beq.n	80359de <xTaskCreate+0x3a>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80359d6:	69fb      	ldr	r3, [r7, #28]
 80359d8:	697a      	ldr	r2, [r7, #20]
 80359da:	631a      	str	r2, [r3, #48]	@ 0x30
 80359dc:	e005      	b.n	80359ea <xTaskCreate+0x46>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80359de:	6978      	ldr	r0, [r7, #20]
 80359e0:	f7fe fe60 	bl	80346a4 <vPortFree>
 80359e4:	e001      	b.n	80359ea <xTaskCreate+0x46>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80359e6:	2300      	movs	r3, #0
 80359e8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80359ea:	69fb      	ldr	r3, [r7, #28]
 80359ec:	2b00      	cmp	r3, #0
 80359ee:	d017      	beq.n	8035a20 <xTaskCreate+0x7c>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80359f0:	69fb      	ldr	r3, [r7, #28]
 80359f2:	2200      	movs	r2, #0
 80359f4:	f883 21a1 	strb.w	r2, [r3, #417]	@ 0x1a1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80359f8:	88fa      	ldrh	r2, [r7, #6]
 80359fa:	2300      	movs	r3, #0
 80359fc:	9303      	str	r3, [sp, #12]
 80359fe:	69fb      	ldr	r3, [r7, #28]
 8035a00:	9302      	str	r3, [sp, #8]
 8035a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8035a04:	9301      	str	r3, [sp, #4]
 8035a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8035a08:	9300      	str	r3, [sp, #0]
 8035a0a:	683b      	ldr	r3, [r7, #0]
 8035a0c:	68b9      	ldr	r1, [r7, #8]
 8035a0e:	68f8      	ldr	r0, [r7, #12]
 8035a10:	f000 f80e 	bl	8035a30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8035a14:	69f8      	ldr	r0, [r7, #28]
 8035a16:	f000 f8c9 	bl	8035bac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8035a1a:	2301      	movs	r3, #1
 8035a1c:	61bb      	str	r3, [r7, #24]
 8035a1e:	e002      	b.n	8035a26 <xTaskCreate+0x82>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8035a20:	f04f 33ff 	mov.w	r3, #4294967295
 8035a24:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8035a26:	69bb      	ldr	r3, [r7, #24]
	}
 8035a28:	4618      	mov	r0, r3
 8035a2a:	3720      	adds	r7, #32
 8035a2c:	46bd      	mov	sp, r7
 8035a2e:	bd80      	pop	{r7, pc}

08035a30 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8035a30:	b580      	push	{r7, lr}
 8035a32:	b088      	sub	sp, #32
 8035a34:	af00      	add	r7, sp, #0
 8035a36:	60f8      	str	r0, [r7, #12]
 8035a38:	60b9      	str	r1, [r7, #8]
 8035a3a:	607a      	str	r2, [r7, #4]
 8035a3c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8035a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8035a40:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8035a42:	687b      	ldr	r3, [r7, #4]
 8035a44:	009b      	lsls	r3, r3, #2
 8035a46:	461a      	mov	r2, r3
 8035a48:	21a5      	movs	r1, #165	@ 0xa5
 8035a4a:	f001 fe8b 	bl	8037764 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8035a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8035a50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8035a52:	687b      	ldr	r3, [r7, #4]
 8035a54:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8035a58:	3b01      	subs	r3, #1
 8035a5a:	009b      	lsls	r3, r3, #2
 8035a5c:	4413      	add	r3, r2
 8035a5e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8035a60:	69bb      	ldr	r3, [r7, #24]
 8035a62:	f023 0307 	bic.w	r3, r3, #7
 8035a66:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8035a68:	69bb      	ldr	r3, [r7, #24]
 8035a6a:	f003 0307 	and.w	r3, r3, #7
 8035a6e:	2b00      	cmp	r3, #0
 8035a70:	d00b      	beq.n	8035a8a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8035a72:	f04f 0310 	mov.w	r3, #16
 8035a76:	f383 8811 	msr	BASEPRI, r3
 8035a7a:	f3bf 8f6f 	isb	sy
 8035a7e:	f3bf 8f4f 	dsb	sy
 8035a82:	617b      	str	r3, [r7, #20]
}
 8035a84:	bf00      	nop
 8035a86:	bf00      	nop
 8035a88:	e7fd      	b.n	8035a86 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8035a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8035a8c:	69ba      	ldr	r2, [r7, #24]
 8035a8e:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8035a92:	68bb      	ldr	r3, [r7, #8]
 8035a94:	2b00      	cmp	r3, #0
 8035a96:	d01f      	beq.n	8035ad8 <prvInitialiseNewTask+0xa8>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8035a98:	2300      	movs	r3, #0
 8035a9a:	61fb      	str	r3, [r7, #28]
 8035a9c:	e012      	b.n	8035ac4 <prvInitialiseNewTask+0x94>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8035a9e:	68ba      	ldr	r2, [r7, #8]
 8035aa0:	69fb      	ldr	r3, [r7, #28]
 8035aa2:	4413      	add	r3, r2
 8035aa4:	7819      	ldrb	r1, [r3, #0]
 8035aa6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8035aa8:	69fb      	ldr	r3, [r7, #28]
 8035aaa:	4413      	add	r3, r2
 8035aac:	3334      	adds	r3, #52	@ 0x34
 8035aae:	460a      	mov	r2, r1
 8035ab0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8035ab2:	68ba      	ldr	r2, [r7, #8]
 8035ab4:	69fb      	ldr	r3, [r7, #28]
 8035ab6:	4413      	add	r3, r2
 8035ab8:	781b      	ldrb	r3, [r3, #0]
 8035aba:	2b00      	cmp	r3, #0
 8035abc:	d006      	beq.n	8035acc <prvInitialiseNewTask+0x9c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8035abe:	69fb      	ldr	r3, [r7, #28]
 8035ac0:	3301      	adds	r3, #1
 8035ac2:	61fb      	str	r3, [r7, #28]
 8035ac4:	69fb      	ldr	r3, [r7, #28]
 8035ac6:	2bfe      	cmp	r3, #254	@ 0xfe
 8035ac8:	d9e9      	bls.n	8035a9e <prvInitialiseNewTask+0x6e>
 8035aca:	e000      	b.n	8035ace <prvInitialiseNewTask+0x9e>
			{
				break;
 8035acc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8035ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8035ad0:	2200      	movs	r2, #0
 8035ad2:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
 8035ad6:	e003      	b.n	8035ae0 <prvInitialiseNewTask+0xb0>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8035ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8035ada:	2200      	movs	r2, #0
 8035adc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8035ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8035ae2:	2b37      	cmp	r3, #55	@ 0x37
 8035ae4:	d901      	bls.n	8035aea <prvInitialiseNewTask+0xba>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8035ae6:	2337      	movs	r3, #55	@ 0x37
 8035ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8035aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8035aec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8035aee:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8035af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8035af2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8035af4:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
		pxNewTCB->uxMutexesHeld = 0;
 8035af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8035afa:	2200      	movs	r2, #0
 8035afc:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8035b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8035b02:	3304      	adds	r3, #4
 8035b04:	4618      	mov	r0, r3
 8035b06:	f7fe ff0d 	bl	8034924 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8035b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8035b0c:	3318      	adds	r3, #24
 8035b0e:	4618      	mov	r0, r3
 8035b10:	f7fe ff08 	bl	8034924 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8035b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8035b16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8035b18:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8035b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8035b1c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8035b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8035b22:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8035b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8035b26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8035b28:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8035b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8035b2c:	2200      	movs	r2, #0
 8035b2e:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8035b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8035b34:	2200      	movs	r2, #0
 8035b36:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8035b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8035b3c:	2200      	movs	r2, #0
 8035b3e:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8035b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8035b44:	2200      	movs	r2, #0
 8035b46:	f883 21a0 	strb.w	r2, [r3, #416]	@ 0x1a0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8035b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8035b4c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8035b50:	224c      	movs	r2, #76	@ 0x4c
 8035b52:	2100      	movs	r1, #0
 8035b54:	4618      	mov	r0, r3
 8035b56:	f001 fe05 	bl	8037764 <memset>
 8035b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8035b5c:	4a10      	ldr	r2, [pc, #64]	@ (8035ba0 <prvInitialiseNewTask+0x170>)
 8035b5e:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
 8035b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8035b64:	4a0f      	ldr	r2, [pc, #60]	@ (8035ba4 <prvInitialiseNewTask+0x174>)
 8035b66:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
 8035b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8035b6c:	4a0e      	ldr	r2, [pc, #56]	@ (8035ba8 <prvInitialiseNewTask+0x178>)
 8035b6e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 8035b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8035b74:	2200      	movs	r2, #0
 8035b76:	f883 21a2 	strb.w	r2, [r3, #418]	@ 0x1a2
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8035b7a:	683a      	ldr	r2, [r7, #0]
 8035b7c:	68f9      	ldr	r1, [r7, #12]
 8035b7e:	69b8      	ldr	r0, [r7, #24]
 8035b80:	f7fe ff64 	bl	8034a4c <pxPortInitialiseStack>
 8035b84:	4602      	mov	r2, r0
 8035b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8035b88:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8035b8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8035b8c:	2b00      	cmp	r3, #0
 8035b8e:	d002      	beq.n	8035b96 <prvInitialiseNewTask+0x166>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8035b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8035b92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8035b94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8035b96:	bf00      	nop
 8035b98:	3720      	adds	r7, #32
 8035b9a:	46bd      	mov	sp, r7
 8035b9c:	bd80      	pop	{r7, pc}
 8035b9e:	bf00      	nop
 8035ba0:	20004460 	.word	0x20004460
 8035ba4:	200044c8 	.word	0x200044c8
 8035ba8:	20004530 	.word	0x20004530

08035bac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8035bac:	b580      	push	{r7, lr}
 8035bae:	b082      	sub	sp, #8
 8035bb0:	af00      	add	r7, sp, #0
 8035bb2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8035bb4:	f7ff f878 	bl	8034ca8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8035bb8:	4b2d      	ldr	r3, [pc, #180]	@ (8035c70 <prvAddNewTaskToReadyList+0xc4>)
 8035bba:	681b      	ldr	r3, [r3, #0]
 8035bbc:	3301      	adds	r3, #1
 8035bbe:	4a2c      	ldr	r2, [pc, #176]	@ (8035c70 <prvAddNewTaskToReadyList+0xc4>)
 8035bc0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8035bc2:	4b2c      	ldr	r3, [pc, #176]	@ (8035c74 <prvAddNewTaskToReadyList+0xc8>)
 8035bc4:	681b      	ldr	r3, [r3, #0]
 8035bc6:	2b00      	cmp	r3, #0
 8035bc8:	d109      	bne.n	8035bde <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8035bca:	4a2a      	ldr	r2, [pc, #168]	@ (8035c74 <prvAddNewTaskToReadyList+0xc8>)
 8035bcc:	687b      	ldr	r3, [r7, #4]
 8035bce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8035bd0:	4b27      	ldr	r3, [pc, #156]	@ (8035c70 <prvAddNewTaskToReadyList+0xc4>)
 8035bd2:	681b      	ldr	r3, [r3, #0]
 8035bd4:	2b01      	cmp	r3, #1
 8035bd6:	d110      	bne.n	8035bfa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8035bd8:	f000 fe52 	bl	8036880 <prvInitialiseTaskLists>
 8035bdc:	e00d      	b.n	8035bfa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8035bde:	4b26      	ldr	r3, [pc, #152]	@ (8035c78 <prvAddNewTaskToReadyList+0xcc>)
 8035be0:	681b      	ldr	r3, [r3, #0]
 8035be2:	2b00      	cmp	r3, #0
 8035be4:	d109      	bne.n	8035bfa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8035be6:	4b23      	ldr	r3, [pc, #140]	@ (8035c74 <prvAddNewTaskToReadyList+0xc8>)
 8035be8:	681b      	ldr	r3, [r3, #0]
 8035bea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8035bec:	687b      	ldr	r3, [r7, #4]
 8035bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8035bf0:	429a      	cmp	r2, r3
 8035bf2:	d802      	bhi.n	8035bfa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8035bf4:	4a1f      	ldr	r2, [pc, #124]	@ (8035c74 <prvAddNewTaskToReadyList+0xc8>)
 8035bf6:	687b      	ldr	r3, [r7, #4]
 8035bf8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8035bfa:	4b20      	ldr	r3, [pc, #128]	@ (8035c7c <prvAddNewTaskToReadyList+0xd0>)
 8035bfc:	681b      	ldr	r3, [r3, #0]
 8035bfe:	3301      	adds	r3, #1
 8035c00:	4a1e      	ldr	r2, [pc, #120]	@ (8035c7c <prvAddNewTaskToReadyList+0xd0>)
 8035c02:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8035c04:	4b1d      	ldr	r3, [pc, #116]	@ (8035c7c <prvAddNewTaskToReadyList+0xd0>)
 8035c06:	681a      	ldr	r2, [r3, #0]
 8035c08:	687b      	ldr	r3, [r7, #4]
 8035c0a:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8035c0e:	687b      	ldr	r3, [r7, #4]
 8035c10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8035c12:	4b1b      	ldr	r3, [pc, #108]	@ (8035c80 <prvAddNewTaskToReadyList+0xd4>)
 8035c14:	681b      	ldr	r3, [r3, #0]
 8035c16:	429a      	cmp	r2, r3
 8035c18:	d903      	bls.n	8035c22 <prvAddNewTaskToReadyList+0x76>
 8035c1a:	687b      	ldr	r3, [r7, #4]
 8035c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8035c1e:	4a18      	ldr	r2, [pc, #96]	@ (8035c80 <prvAddNewTaskToReadyList+0xd4>)
 8035c20:	6013      	str	r3, [r2, #0]
 8035c22:	687b      	ldr	r3, [r7, #4]
 8035c24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8035c26:	4613      	mov	r3, r2
 8035c28:	009b      	lsls	r3, r3, #2
 8035c2a:	4413      	add	r3, r2
 8035c2c:	009b      	lsls	r3, r3, #2
 8035c2e:	4a15      	ldr	r2, [pc, #84]	@ (8035c84 <prvAddNewTaskToReadyList+0xd8>)
 8035c30:	441a      	add	r2, r3
 8035c32:	687b      	ldr	r3, [r7, #4]
 8035c34:	3304      	adds	r3, #4
 8035c36:	4619      	mov	r1, r3
 8035c38:	4610      	mov	r0, r2
 8035c3a:	f7fe fe80 	bl	803493e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8035c3e:	f7ff f865 	bl	8034d0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8035c42:	4b0d      	ldr	r3, [pc, #52]	@ (8035c78 <prvAddNewTaskToReadyList+0xcc>)
 8035c44:	681b      	ldr	r3, [r3, #0]
 8035c46:	2b00      	cmp	r3, #0
 8035c48:	d00e      	beq.n	8035c68 <prvAddNewTaskToReadyList+0xbc>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8035c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8035c74 <prvAddNewTaskToReadyList+0xc8>)
 8035c4c:	681b      	ldr	r3, [r3, #0]
 8035c4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8035c50:	687b      	ldr	r3, [r7, #4]
 8035c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8035c54:	429a      	cmp	r2, r3
 8035c56:	d207      	bcs.n	8035c68 <prvAddNewTaskToReadyList+0xbc>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8035c58:	4b0b      	ldr	r3, [pc, #44]	@ (8035c88 <prvAddNewTaskToReadyList+0xdc>)
 8035c5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8035c5e:	601a      	str	r2, [r3, #0]
 8035c60:	f3bf 8f4f 	dsb	sy
 8035c64:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8035c68:	bf00      	nop
 8035c6a:	3708      	adds	r7, #8
 8035c6c:	46bd      	mov	sp, r7
 8035c6e:	bd80      	pop	{r7, pc}
 8035c70:	200042f8 	.word	0x200042f8
 8035c74:	20003e20 	.word	0x20003e20
 8035c78:	20004304 	.word	0x20004304
 8035c7c:	20004314 	.word	0x20004314
 8035c80:	20004300 	.word	0x20004300
 8035c84:	20003e24 	.word	0x20003e24
 8035c88:	e000ed04 	.word	0xe000ed04

08035c8c <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8035c8c:	b580      	push	{r7, lr}
 8035c8e:	b088      	sub	sp, #32
 8035c90:	af00      	add	r7, sp, #0
 8035c92:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8035c94:	687b      	ldr	r3, [r7, #4]
 8035c96:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8035c98:	69bb      	ldr	r3, [r7, #24]
 8035c9a:	2b00      	cmp	r3, #0
 8035c9c:	d10b      	bne.n	8035cb6 <eTaskGetState+0x2a>
	__asm volatile
 8035c9e:	f04f 0310 	mov.w	r3, #16
 8035ca2:	f383 8811 	msr	BASEPRI, r3
 8035ca6:	f3bf 8f6f 	isb	sy
 8035caa:	f3bf 8f4f 	dsb	sy
 8035cae:	60bb      	str	r3, [r7, #8]
}
 8035cb0:	bf00      	nop
 8035cb2:	bf00      	nop
 8035cb4:	e7fd      	b.n	8035cb2 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8035cb6:	4b24      	ldr	r3, [pc, #144]	@ (8035d48 <eTaskGetState+0xbc>)
 8035cb8:	681b      	ldr	r3, [r3, #0]
 8035cba:	69ba      	ldr	r2, [r7, #24]
 8035cbc:	429a      	cmp	r2, r3
 8035cbe:	d102      	bne.n	8035cc6 <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8035cc0:	2300      	movs	r3, #0
 8035cc2:	77fb      	strb	r3, [r7, #31]
 8035cc4:	e03a      	b.n	8035d3c <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 8035cc6:	f7fe ffef 	bl	8034ca8 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8035cca:	69bb      	ldr	r3, [r7, #24]
 8035ccc:	695b      	ldr	r3, [r3, #20]
 8035cce:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8035cd0:	4b1e      	ldr	r3, [pc, #120]	@ (8035d4c <eTaskGetState+0xc0>)
 8035cd2:	681b      	ldr	r3, [r3, #0]
 8035cd4:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8035cd6:	4b1e      	ldr	r3, [pc, #120]	@ (8035d50 <eTaskGetState+0xc4>)
 8035cd8:	681b      	ldr	r3, [r3, #0]
 8035cda:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8035cdc:	f7ff f816 	bl	8034d0c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8035ce0:	697a      	ldr	r2, [r7, #20]
 8035ce2:	693b      	ldr	r3, [r7, #16]
 8035ce4:	429a      	cmp	r2, r3
 8035ce6:	d003      	beq.n	8035cf0 <eTaskGetState+0x64>
 8035ce8:	697a      	ldr	r2, [r7, #20]
 8035cea:	68fb      	ldr	r3, [r7, #12]
 8035cec:	429a      	cmp	r2, r3
 8035cee:	d102      	bne.n	8035cf6 <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8035cf0:	2302      	movs	r3, #2
 8035cf2:	77fb      	strb	r3, [r7, #31]
 8035cf4:	e022      	b.n	8035d3c <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8035cf6:	697b      	ldr	r3, [r7, #20]
 8035cf8:	4a16      	ldr	r2, [pc, #88]	@ (8035d54 <eTaskGetState+0xc8>)
 8035cfa:	4293      	cmp	r3, r2
 8035cfc:	d112      	bne.n	8035d24 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8035cfe:	69bb      	ldr	r3, [r7, #24]
 8035d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8035d02:	2b00      	cmp	r3, #0
 8035d04:	d10b      	bne.n	8035d1e <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8035d06:	69bb      	ldr	r3, [r7, #24]
 8035d08:	f893 31a0 	ldrb.w	r3, [r3, #416]	@ 0x1a0
 8035d0c:	b2db      	uxtb	r3, r3
 8035d0e:	2b01      	cmp	r3, #1
 8035d10:	d102      	bne.n	8035d18 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 8035d12:	2302      	movs	r3, #2
 8035d14:	77fb      	strb	r3, [r7, #31]
 8035d16:	e011      	b.n	8035d3c <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 8035d18:	2303      	movs	r3, #3
 8035d1a:	77fb      	strb	r3, [r7, #31]
 8035d1c:	e00e      	b.n	8035d3c <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8035d1e:	2302      	movs	r3, #2
 8035d20:	77fb      	strb	r3, [r7, #31]
 8035d22:	e00b      	b.n	8035d3c <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8035d24:	697b      	ldr	r3, [r7, #20]
 8035d26:	4a0c      	ldr	r2, [pc, #48]	@ (8035d58 <eTaskGetState+0xcc>)
 8035d28:	4293      	cmp	r3, r2
 8035d2a:	d002      	beq.n	8035d32 <eTaskGetState+0xa6>
 8035d2c:	697b      	ldr	r3, [r7, #20]
 8035d2e:	2b00      	cmp	r3, #0
 8035d30:	d102      	bne.n	8035d38 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8035d32:	2304      	movs	r3, #4
 8035d34:	77fb      	strb	r3, [r7, #31]
 8035d36:	e001      	b.n	8035d3c <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8035d38:	2301      	movs	r3, #1
 8035d3a:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8035d3c:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8035d3e:	4618      	mov	r0, r3
 8035d40:	3720      	adds	r7, #32
 8035d42:	46bd      	mov	sp, r7
 8035d44:	bd80      	pop	{r7, pc}
 8035d46:	bf00      	nop
 8035d48:	20003e20 	.word	0x20003e20
 8035d4c:	200042ac 	.word	0x200042ac
 8035d50:	200042b0 	.word	0x200042b0
 8035d54:	200042e0 	.word	0x200042e0
 8035d58:	200042c8 	.word	0x200042c8

08035d5c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8035d5c:	b580      	push	{r7, lr}
 8035d5e:	b084      	sub	sp, #16
 8035d60:	af00      	add	r7, sp, #0
 8035d62:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8035d64:	f7fe ffa0 	bl	8034ca8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8035d68:	687b      	ldr	r3, [r7, #4]
 8035d6a:	2b00      	cmp	r3, #0
 8035d6c:	d102      	bne.n	8035d74 <vTaskSuspend+0x18>
 8035d6e:	4b30      	ldr	r3, [pc, #192]	@ (8035e30 <vTaskSuspend+0xd4>)
 8035d70:	681b      	ldr	r3, [r3, #0]
 8035d72:	e000      	b.n	8035d76 <vTaskSuspend+0x1a>
 8035d74:	687b      	ldr	r3, [r7, #4]
 8035d76:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8035d78:	68fb      	ldr	r3, [r7, #12]
 8035d7a:	3304      	adds	r3, #4
 8035d7c:	4618      	mov	r0, r3
 8035d7e:	f7fe fe3b 	bl	80349f8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8035d82:	68fb      	ldr	r3, [r7, #12]
 8035d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8035d86:	2b00      	cmp	r3, #0
 8035d88:	d004      	beq.n	8035d94 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8035d8a:	68fb      	ldr	r3, [r7, #12]
 8035d8c:	3318      	adds	r3, #24
 8035d8e:	4618      	mov	r0, r3
 8035d90:	f7fe fe32 	bl	80349f8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8035d94:	68fb      	ldr	r3, [r7, #12]
 8035d96:	3304      	adds	r3, #4
 8035d98:	4619      	mov	r1, r3
 8035d9a:	4826      	ldr	r0, [pc, #152]	@ (8035e34 <vTaskSuspend+0xd8>)
 8035d9c:	f7fe fdcf 	bl	803493e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8035da0:	68fb      	ldr	r3, [r7, #12]
 8035da2:	f893 31a0 	ldrb.w	r3, [r3, #416]	@ 0x1a0
 8035da6:	b2db      	uxtb	r3, r3
 8035da8:	2b01      	cmp	r3, #1
 8035daa:	d103      	bne.n	8035db4 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8035dac:	68fb      	ldr	r3, [r7, #12]
 8035dae:	2200      	movs	r2, #0
 8035db0:	f883 21a0 	strb.w	r2, [r3, #416]	@ 0x1a0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8035db4:	f7fe ffaa 	bl	8034d0c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8035db8:	4b1f      	ldr	r3, [pc, #124]	@ (8035e38 <vTaskSuspend+0xdc>)
 8035dba:	681b      	ldr	r3, [r3, #0]
 8035dbc:	2b00      	cmp	r3, #0
 8035dbe:	d005      	beq.n	8035dcc <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8035dc0:	f7fe ff72 	bl	8034ca8 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8035dc4:	f000 fed8 	bl	8036b78 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8035dc8:	f7fe ffa0 	bl	8034d0c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8035dcc:	4b18      	ldr	r3, [pc, #96]	@ (8035e30 <vTaskSuspend+0xd4>)
 8035dce:	681b      	ldr	r3, [r3, #0]
 8035dd0:	68fa      	ldr	r2, [r7, #12]
 8035dd2:	429a      	cmp	r2, r3
 8035dd4:	d128      	bne.n	8035e28 <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 8035dd6:	4b18      	ldr	r3, [pc, #96]	@ (8035e38 <vTaskSuspend+0xdc>)
 8035dd8:	681b      	ldr	r3, [r3, #0]
 8035dda:	2b00      	cmp	r3, #0
 8035ddc:	d018      	beq.n	8035e10 <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8035dde:	4b17      	ldr	r3, [pc, #92]	@ (8035e3c <vTaskSuspend+0xe0>)
 8035de0:	681b      	ldr	r3, [r3, #0]
 8035de2:	2b00      	cmp	r3, #0
 8035de4:	d00b      	beq.n	8035dfe <vTaskSuspend+0xa2>
	__asm volatile
 8035de6:	f04f 0310 	mov.w	r3, #16
 8035dea:	f383 8811 	msr	BASEPRI, r3
 8035dee:	f3bf 8f6f 	isb	sy
 8035df2:	f3bf 8f4f 	dsb	sy
 8035df6:	60bb      	str	r3, [r7, #8]
}
 8035df8:	bf00      	nop
 8035dfa:	bf00      	nop
 8035dfc:	e7fd      	b.n	8035dfa <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8035dfe:	4b10      	ldr	r3, [pc, #64]	@ (8035e40 <vTaskSuspend+0xe4>)
 8035e00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8035e04:	601a      	str	r2, [r3, #0]
 8035e06:	f3bf 8f4f 	dsb	sy
 8035e0a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8035e0e:	e00b      	b.n	8035e28 <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8035e10:	4b08      	ldr	r3, [pc, #32]	@ (8035e34 <vTaskSuspend+0xd8>)
 8035e12:	681a      	ldr	r2, [r3, #0]
 8035e14:	4b0b      	ldr	r3, [pc, #44]	@ (8035e44 <vTaskSuspend+0xe8>)
 8035e16:	681b      	ldr	r3, [r3, #0]
 8035e18:	429a      	cmp	r2, r3
 8035e1a:	d103      	bne.n	8035e24 <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 8035e1c:	4b04      	ldr	r3, [pc, #16]	@ (8035e30 <vTaskSuspend+0xd4>)
 8035e1e:	2200      	movs	r2, #0
 8035e20:	601a      	str	r2, [r3, #0]
	}
 8035e22:	e001      	b.n	8035e28 <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 8035e24:	f000 fb24 	bl	8036470 <vTaskSwitchContext>
	}
 8035e28:	bf00      	nop
 8035e2a:	3710      	adds	r7, #16
 8035e2c:	46bd      	mov	sp, r7
 8035e2e:	bd80      	pop	{r7, pc}
 8035e30:	20003e20 	.word	0x20003e20
 8035e34:	200042e0 	.word	0x200042e0
 8035e38:	20004304 	.word	0x20004304
 8035e3c:	20004320 	.word	0x20004320
 8035e40:	e000ed04 	.word	0xe000ed04
 8035e44:	200042f8 	.word	0x200042f8

08035e48 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8035e48:	b480      	push	{r7}
 8035e4a:	b087      	sub	sp, #28
 8035e4c:	af00      	add	r7, sp, #0
 8035e4e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8035e50:	2300      	movs	r3, #0
 8035e52:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8035e54:	687b      	ldr	r3, [r7, #4]
 8035e56:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8035e58:	687b      	ldr	r3, [r7, #4]
 8035e5a:	2b00      	cmp	r3, #0
 8035e5c:	d10b      	bne.n	8035e76 <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 8035e5e:	f04f 0310 	mov.w	r3, #16
 8035e62:	f383 8811 	msr	BASEPRI, r3
 8035e66:	f3bf 8f6f 	isb	sy
 8035e6a:	f3bf 8f4f 	dsb	sy
 8035e6e:	60fb      	str	r3, [r7, #12]
}
 8035e70:	bf00      	nop
 8035e72:	bf00      	nop
 8035e74:	e7fd      	b.n	8035e72 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8035e76:	693b      	ldr	r3, [r7, #16]
 8035e78:	695b      	ldr	r3, [r3, #20]
 8035e7a:	4a0a      	ldr	r2, [pc, #40]	@ (8035ea4 <prvTaskIsTaskSuspended+0x5c>)
 8035e7c:	4293      	cmp	r3, r2
 8035e7e:	d10a      	bne.n	8035e96 <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8035e80:	693b      	ldr	r3, [r7, #16]
 8035e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8035e84:	4a08      	ldr	r2, [pc, #32]	@ (8035ea8 <prvTaskIsTaskSuspended+0x60>)
 8035e86:	4293      	cmp	r3, r2
 8035e88:	d005      	beq.n	8035e96 <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8035e8a:	693b      	ldr	r3, [r7, #16]
 8035e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8035e8e:	2b00      	cmp	r3, #0
 8035e90:	d101      	bne.n	8035e96 <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 8035e92:	2301      	movs	r3, #1
 8035e94:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8035e96:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8035e98:	4618      	mov	r0, r3
 8035e9a:	371c      	adds	r7, #28
 8035e9c:	46bd      	mov	sp, r7
 8035e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035ea2:	4770      	bx	lr
 8035ea4:	200042e0 	.word	0x200042e0
 8035ea8:	200042b4 	.word	0x200042b4

08035eac <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8035eac:	b580      	push	{r7, lr}
 8035eae:	b084      	sub	sp, #16
 8035eb0:	af00      	add	r7, sp, #0
 8035eb2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8035eb4:	687b      	ldr	r3, [r7, #4]
 8035eb6:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8035eb8:	687b      	ldr	r3, [r7, #4]
 8035eba:	2b00      	cmp	r3, #0
 8035ebc:	d10b      	bne.n	8035ed6 <vTaskResume+0x2a>
	__asm volatile
 8035ebe:	f04f 0310 	mov.w	r3, #16
 8035ec2:	f383 8811 	msr	BASEPRI, r3
 8035ec6:	f3bf 8f6f 	isb	sy
 8035eca:	f3bf 8f4f 	dsb	sy
 8035ece:	60bb      	str	r3, [r7, #8]
}
 8035ed0:	bf00      	nop
 8035ed2:	bf00      	nop
 8035ed4:	e7fd      	b.n	8035ed2 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8035ed6:	4b21      	ldr	r3, [pc, #132]	@ (8035f5c <vTaskResume+0xb0>)
 8035ed8:	681b      	ldr	r3, [r3, #0]
 8035eda:	68fa      	ldr	r2, [r7, #12]
 8035edc:	429a      	cmp	r2, r3
 8035ede:	d038      	beq.n	8035f52 <vTaskResume+0xa6>
 8035ee0:	68fb      	ldr	r3, [r7, #12]
 8035ee2:	2b00      	cmp	r3, #0
 8035ee4:	d035      	beq.n	8035f52 <vTaskResume+0xa6>
		{
			taskENTER_CRITICAL();
 8035ee6:	f7fe fedf 	bl	8034ca8 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8035eea:	68f8      	ldr	r0, [r7, #12]
 8035eec:	f7ff ffac 	bl	8035e48 <prvTaskIsTaskSuspended>
 8035ef0:	4603      	mov	r3, r0
 8035ef2:	2b00      	cmp	r3, #0
 8035ef4:	d02b      	beq.n	8035f4e <vTaskResume+0xa2>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8035ef6:	68fb      	ldr	r3, [r7, #12]
 8035ef8:	3304      	adds	r3, #4
 8035efa:	4618      	mov	r0, r3
 8035efc:	f7fe fd7c 	bl	80349f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8035f00:	68fb      	ldr	r3, [r7, #12]
 8035f02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8035f04:	4b16      	ldr	r3, [pc, #88]	@ (8035f60 <vTaskResume+0xb4>)
 8035f06:	681b      	ldr	r3, [r3, #0]
 8035f08:	429a      	cmp	r2, r3
 8035f0a:	d903      	bls.n	8035f14 <vTaskResume+0x68>
 8035f0c:	68fb      	ldr	r3, [r7, #12]
 8035f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8035f10:	4a13      	ldr	r2, [pc, #76]	@ (8035f60 <vTaskResume+0xb4>)
 8035f12:	6013      	str	r3, [r2, #0]
 8035f14:	68fb      	ldr	r3, [r7, #12]
 8035f16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8035f18:	4613      	mov	r3, r2
 8035f1a:	009b      	lsls	r3, r3, #2
 8035f1c:	4413      	add	r3, r2
 8035f1e:	009b      	lsls	r3, r3, #2
 8035f20:	4a10      	ldr	r2, [pc, #64]	@ (8035f64 <vTaskResume+0xb8>)
 8035f22:	441a      	add	r2, r3
 8035f24:	68fb      	ldr	r3, [r7, #12]
 8035f26:	3304      	adds	r3, #4
 8035f28:	4619      	mov	r1, r3
 8035f2a:	4610      	mov	r0, r2
 8035f2c:	f7fe fd07 	bl	803493e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8035f30:	68fb      	ldr	r3, [r7, #12]
 8035f32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8035f34:	4b09      	ldr	r3, [pc, #36]	@ (8035f5c <vTaskResume+0xb0>)
 8035f36:	681b      	ldr	r3, [r3, #0]
 8035f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8035f3a:	429a      	cmp	r2, r3
 8035f3c:	d307      	bcc.n	8035f4e <vTaskResume+0xa2>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8035f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8035f68 <vTaskResume+0xbc>)
 8035f40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8035f44:	601a      	str	r2, [r3, #0]
 8035f46:	f3bf 8f4f 	dsb	sy
 8035f4a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8035f4e:	f7fe fedd 	bl	8034d0c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8035f52:	bf00      	nop
 8035f54:	3710      	adds	r7, #16
 8035f56:	46bd      	mov	sp, r7
 8035f58:	bd80      	pop	{r7, pc}
 8035f5a:	bf00      	nop
 8035f5c:	20003e20 	.word	0x20003e20
 8035f60:	20004300 	.word	0x20004300
 8035f64:	20003e24 	.word	0x20003e24
 8035f68:	e000ed04 	.word	0xe000ed04

08035f6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8035f6c:	b580      	push	{r7, lr}
 8035f6e:	b08a      	sub	sp, #40	@ 0x28
 8035f70:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8035f72:	2300      	movs	r3, #0
 8035f74:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8035f76:	2300      	movs	r3, #0
 8035f78:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8035f7a:	463a      	mov	r2, r7
 8035f7c:	1d39      	adds	r1, r7, #4
 8035f7e:	f107 0308 	add.w	r3, r7, #8
 8035f82:	4618      	mov	r0, r3
 8035f84:	f7fe fa86 	bl	8034494 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8035f88:	6839      	ldr	r1, [r7, #0]
 8035f8a:	687b      	ldr	r3, [r7, #4]
 8035f8c:	68ba      	ldr	r2, [r7, #8]
 8035f8e:	9202      	str	r2, [sp, #8]
 8035f90:	9301      	str	r3, [sp, #4]
 8035f92:	2300      	movs	r3, #0
 8035f94:	9300      	str	r3, [sp, #0]
 8035f96:	2300      	movs	r3, #0
 8035f98:	460a      	mov	r2, r1
 8035f9a:	4926      	ldr	r1, [pc, #152]	@ (8036034 <vTaskStartScheduler+0xc8>)
 8035f9c:	4826      	ldr	r0, [pc, #152]	@ (8036038 <vTaskStartScheduler+0xcc>)
 8035f9e:	f7ff fc9f 	bl	80358e0 <xTaskCreateStatic>
 8035fa2:	4603      	mov	r3, r0
 8035fa4:	4a25      	ldr	r2, [pc, #148]	@ (803603c <vTaskStartScheduler+0xd0>)
 8035fa6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8035fa8:	4b24      	ldr	r3, [pc, #144]	@ (803603c <vTaskStartScheduler+0xd0>)
 8035faa:	681b      	ldr	r3, [r3, #0]
 8035fac:	2b00      	cmp	r3, #0
 8035fae:	d002      	beq.n	8035fb6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8035fb0:	2301      	movs	r3, #1
 8035fb2:	617b      	str	r3, [r7, #20]
 8035fb4:	e001      	b.n	8035fba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8035fb6:	2300      	movs	r3, #0
 8035fb8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8035fba:	697b      	ldr	r3, [r7, #20]
 8035fbc:	2b01      	cmp	r3, #1
 8035fbe:	d102      	bne.n	8035fc6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8035fc0:	f000 fee8 	bl	8036d94 <xTimerCreateTimerTask>
 8035fc4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8035fc6:	697b      	ldr	r3, [r7, #20]
 8035fc8:	2b01      	cmp	r3, #1
 8035fca:	d11e      	bne.n	803600a <vTaskStartScheduler+0x9e>
	__asm volatile
 8035fcc:	f04f 0310 	mov.w	r3, #16
 8035fd0:	f383 8811 	msr	BASEPRI, r3
 8035fd4:	f3bf 8f6f 	isb	sy
 8035fd8:	f3bf 8f4f 	dsb	sy
 8035fdc:	613b      	str	r3, [r7, #16]
}
 8035fde:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8035fe0:	4b17      	ldr	r3, [pc, #92]	@ (8036040 <vTaskStartScheduler+0xd4>)
 8035fe2:	681b      	ldr	r3, [r3, #0]
 8035fe4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8035fe8:	4a16      	ldr	r2, [pc, #88]	@ (8036044 <vTaskStartScheduler+0xd8>)
 8035fea:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8035fec:	4b16      	ldr	r3, [pc, #88]	@ (8036048 <vTaskStartScheduler+0xdc>)
 8035fee:	f04f 32ff 	mov.w	r2, #4294967295
 8035ff2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8035ff4:	4b15      	ldr	r3, [pc, #84]	@ (803604c <vTaskStartScheduler+0xe0>)
 8035ff6:	2201      	movs	r2, #1
 8035ff8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8035ffa:	4b15      	ldr	r3, [pc, #84]	@ (8036050 <vTaskStartScheduler+0xe4>)
 8035ffc:	2200      	movs	r2, #0
 8035ffe:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8036000:	f7f1 f840 	bl	8027084 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8036004:	f7fe fdac 	bl	8034b60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8036008:	e00f      	b.n	803602a <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 803600a:	697b      	ldr	r3, [r7, #20]
 803600c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8036010:	d10b      	bne.n	803602a <vTaskStartScheduler+0xbe>
	__asm volatile
 8036012:	f04f 0310 	mov.w	r3, #16
 8036016:	f383 8811 	msr	BASEPRI, r3
 803601a:	f3bf 8f6f 	isb	sy
 803601e:	f3bf 8f4f 	dsb	sy
 8036022:	60fb      	str	r3, [r7, #12]
}
 8036024:	bf00      	nop
 8036026:	bf00      	nop
 8036028:	e7fd      	b.n	8036026 <vTaskStartScheduler+0xba>
}
 803602a:	bf00      	nop
 803602c:	3718      	adds	r7, #24
 803602e:	46bd      	mov	sp, r7
 8036030:	bd80      	pop	{r7, pc}
 8036032:	bf00      	nop
 8036034:	080388c0 	.word	0x080388c0
 8036038:	0803684d 	.word	0x0803684d
 803603c:	2000431c 	.word	0x2000431c
 8036040:	20003e20 	.word	0x20003e20
 8036044:	2000002c 	.word	0x2000002c
 8036048:	20004318 	.word	0x20004318
 803604c:	20004304 	.word	0x20004304
 8036050:	200042fc 	.word	0x200042fc

08036054 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8036054:	b480      	push	{r7}
 8036056:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8036058:	4b04      	ldr	r3, [pc, #16]	@ (803606c <vTaskSuspendAll+0x18>)
 803605a:	681b      	ldr	r3, [r3, #0]
 803605c:	3301      	adds	r3, #1
 803605e:	4a03      	ldr	r2, [pc, #12]	@ (803606c <vTaskSuspendAll+0x18>)
 8036060:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8036062:	bf00      	nop
 8036064:	46bd      	mov	sp, r7
 8036066:	f85d 7b04 	ldr.w	r7, [sp], #4
 803606a:	4770      	bx	lr
 803606c:	20004320 	.word	0x20004320

08036070 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8036070:	b580      	push	{r7, lr}
 8036072:	b084      	sub	sp, #16
 8036074:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8036076:	2300      	movs	r3, #0
 8036078:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 803607a:	2300      	movs	r3, #0
 803607c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 803607e:	4b42      	ldr	r3, [pc, #264]	@ (8036188 <xTaskResumeAll+0x118>)
 8036080:	681b      	ldr	r3, [r3, #0]
 8036082:	2b00      	cmp	r3, #0
 8036084:	d10b      	bne.n	803609e <xTaskResumeAll+0x2e>
	__asm volatile
 8036086:	f04f 0310 	mov.w	r3, #16
 803608a:	f383 8811 	msr	BASEPRI, r3
 803608e:	f3bf 8f6f 	isb	sy
 8036092:	f3bf 8f4f 	dsb	sy
 8036096:	603b      	str	r3, [r7, #0]
}
 8036098:	bf00      	nop
 803609a:	bf00      	nop
 803609c:	e7fd      	b.n	803609a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 803609e:	f7fe fe03 	bl	8034ca8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80360a2:	4b39      	ldr	r3, [pc, #228]	@ (8036188 <xTaskResumeAll+0x118>)
 80360a4:	681b      	ldr	r3, [r3, #0]
 80360a6:	3b01      	subs	r3, #1
 80360a8:	4a37      	ldr	r2, [pc, #220]	@ (8036188 <xTaskResumeAll+0x118>)
 80360aa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80360ac:	4b36      	ldr	r3, [pc, #216]	@ (8036188 <xTaskResumeAll+0x118>)
 80360ae:	681b      	ldr	r3, [r3, #0]
 80360b0:	2b00      	cmp	r3, #0
 80360b2:	d162      	bne.n	803617a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80360b4:	4b35      	ldr	r3, [pc, #212]	@ (803618c <xTaskResumeAll+0x11c>)
 80360b6:	681b      	ldr	r3, [r3, #0]
 80360b8:	2b00      	cmp	r3, #0
 80360ba:	d05e      	beq.n	803617a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80360bc:	e02f      	b.n	803611e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80360be:	4b34      	ldr	r3, [pc, #208]	@ (8036190 <xTaskResumeAll+0x120>)
 80360c0:	68db      	ldr	r3, [r3, #12]
 80360c2:	68db      	ldr	r3, [r3, #12]
 80360c4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80360c6:	68fb      	ldr	r3, [r7, #12]
 80360c8:	3318      	adds	r3, #24
 80360ca:	4618      	mov	r0, r3
 80360cc:	f7fe fc94 	bl	80349f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80360d0:	68fb      	ldr	r3, [r7, #12]
 80360d2:	3304      	adds	r3, #4
 80360d4:	4618      	mov	r0, r3
 80360d6:	f7fe fc8f 	bl	80349f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80360da:	68fb      	ldr	r3, [r7, #12]
 80360dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80360de:	4b2d      	ldr	r3, [pc, #180]	@ (8036194 <xTaskResumeAll+0x124>)
 80360e0:	681b      	ldr	r3, [r3, #0]
 80360e2:	429a      	cmp	r2, r3
 80360e4:	d903      	bls.n	80360ee <xTaskResumeAll+0x7e>
 80360e6:	68fb      	ldr	r3, [r7, #12]
 80360e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80360ea:	4a2a      	ldr	r2, [pc, #168]	@ (8036194 <xTaskResumeAll+0x124>)
 80360ec:	6013      	str	r3, [r2, #0]
 80360ee:	68fb      	ldr	r3, [r7, #12]
 80360f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80360f2:	4613      	mov	r3, r2
 80360f4:	009b      	lsls	r3, r3, #2
 80360f6:	4413      	add	r3, r2
 80360f8:	009b      	lsls	r3, r3, #2
 80360fa:	4a27      	ldr	r2, [pc, #156]	@ (8036198 <xTaskResumeAll+0x128>)
 80360fc:	441a      	add	r2, r3
 80360fe:	68fb      	ldr	r3, [r7, #12]
 8036100:	3304      	adds	r3, #4
 8036102:	4619      	mov	r1, r3
 8036104:	4610      	mov	r0, r2
 8036106:	f7fe fc1a 	bl	803493e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 803610a:	68fb      	ldr	r3, [r7, #12]
 803610c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 803610e:	4b23      	ldr	r3, [pc, #140]	@ (803619c <xTaskResumeAll+0x12c>)
 8036110:	681b      	ldr	r3, [r3, #0]
 8036112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8036114:	429a      	cmp	r2, r3
 8036116:	d302      	bcc.n	803611e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8036118:	4b21      	ldr	r3, [pc, #132]	@ (80361a0 <xTaskResumeAll+0x130>)
 803611a:	2201      	movs	r2, #1
 803611c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 803611e:	4b1c      	ldr	r3, [pc, #112]	@ (8036190 <xTaskResumeAll+0x120>)
 8036120:	681b      	ldr	r3, [r3, #0]
 8036122:	2b00      	cmp	r3, #0
 8036124:	d1cb      	bne.n	80360be <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8036126:	68fb      	ldr	r3, [r7, #12]
 8036128:	2b00      	cmp	r3, #0
 803612a:	d001      	beq.n	8036130 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 803612c:	f000 fd24 	bl	8036b78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8036130:	4b1c      	ldr	r3, [pc, #112]	@ (80361a4 <xTaskResumeAll+0x134>)
 8036132:	681b      	ldr	r3, [r3, #0]
 8036134:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8036136:	687b      	ldr	r3, [r7, #4]
 8036138:	2b00      	cmp	r3, #0
 803613a:	d010      	beq.n	803615e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 803613c:	f000 f8d6 	bl	80362ec <xTaskIncrementTick>
 8036140:	4603      	mov	r3, r0
 8036142:	2b00      	cmp	r3, #0
 8036144:	d002      	beq.n	803614c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8036146:	4b16      	ldr	r3, [pc, #88]	@ (80361a0 <xTaskResumeAll+0x130>)
 8036148:	2201      	movs	r2, #1
 803614a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 803614c:	687b      	ldr	r3, [r7, #4]
 803614e:	3b01      	subs	r3, #1
 8036150:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8036152:	687b      	ldr	r3, [r7, #4]
 8036154:	2b00      	cmp	r3, #0
 8036156:	d1f1      	bne.n	803613c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8036158:	4b12      	ldr	r3, [pc, #72]	@ (80361a4 <xTaskResumeAll+0x134>)
 803615a:	2200      	movs	r2, #0
 803615c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 803615e:	4b10      	ldr	r3, [pc, #64]	@ (80361a0 <xTaskResumeAll+0x130>)
 8036160:	681b      	ldr	r3, [r3, #0]
 8036162:	2b00      	cmp	r3, #0
 8036164:	d009      	beq.n	803617a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8036166:	2301      	movs	r3, #1
 8036168:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 803616a:	4b0f      	ldr	r3, [pc, #60]	@ (80361a8 <xTaskResumeAll+0x138>)
 803616c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8036170:	601a      	str	r2, [r3, #0]
 8036172:	f3bf 8f4f 	dsb	sy
 8036176:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 803617a:	f7fe fdc7 	bl	8034d0c <vPortExitCritical>

	return xAlreadyYielded;
 803617e:	68bb      	ldr	r3, [r7, #8]
}
 8036180:	4618      	mov	r0, r3
 8036182:	3710      	adds	r7, #16
 8036184:	46bd      	mov	sp, r7
 8036186:	bd80      	pop	{r7, pc}
 8036188:	20004320 	.word	0x20004320
 803618c:	200042f8 	.word	0x200042f8
 8036190:	200042b4 	.word	0x200042b4
 8036194:	20004300 	.word	0x20004300
 8036198:	20003e24 	.word	0x20003e24
 803619c:	20003e20 	.word	0x20003e20
 80361a0:	2000430c 	.word	0x2000430c
 80361a4:	20004308 	.word	0x20004308
 80361a8:	e000ed04 	.word	0xe000ed04

080361ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80361ac:	b480      	push	{r7}
 80361ae:	b083      	sub	sp, #12
 80361b0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80361b2:	4b05      	ldr	r3, [pc, #20]	@ (80361c8 <xTaskGetTickCount+0x1c>)
 80361b4:	681b      	ldr	r3, [r3, #0]
 80361b6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80361b8:	687b      	ldr	r3, [r7, #4]
}
 80361ba:	4618      	mov	r0, r3
 80361bc:	370c      	adds	r7, #12
 80361be:	46bd      	mov	sp, r7
 80361c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80361c4:	4770      	bx	lr
 80361c6:	bf00      	nop
 80361c8:	200042fc 	.word	0x200042fc

080361cc <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 80361cc:	b580      	push	{r7, lr}
 80361ce:	b086      	sub	sp, #24
 80361d0:	af00      	add	r7, sp, #0
 80361d2:	60f8      	str	r0, [r7, #12]
 80361d4:	60b9      	str	r1, [r7, #8]
 80361d6:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 80361d8:	2300      	movs	r3, #0
 80361da:	617b      	str	r3, [r7, #20]
 80361dc:	2338      	movs	r3, #56	@ 0x38
 80361de:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 80361e0:	f7ff ff38 	bl	8036054 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 80361e4:	4b3b      	ldr	r3, [pc, #236]	@ (80362d4 <uxTaskGetSystemState+0x108>)
 80361e6:	681b      	ldr	r3, [r3, #0]
 80361e8:	68ba      	ldr	r2, [r7, #8]
 80361ea:	429a      	cmp	r2, r3
 80361ec:	d36a      	bcc.n	80362c4 <uxTaskGetSystemState+0xf8>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 80361ee:	693b      	ldr	r3, [r7, #16]
 80361f0:	3b01      	subs	r3, #1
 80361f2:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 80361f4:	697a      	ldr	r2, [r7, #20]
 80361f6:	4613      	mov	r3, r2
 80361f8:	00db      	lsls	r3, r3, #3
 80361fa:	4413      	add	r3, r2
 80361fc:	009b      	lsls	r3, r3, #2
 80361fe:	461a      	mov	r2, r3
 8036200:	68fb      	ldr	r3, [r7, #12]
 8036202:	1898      	adds	r0, r3, r2
 8036204:	693a      	ldr	r2, [r7, #16]
 8036206:	4613      	mov	r3, r2
 8036208:	009b      	lsls	r3, r3, #2
 803620a:	4413      	add	r3, r2
 803620c:	009b      	lsls	r3, r3, #2
 803620e:	4a32      	ldr	r2, [pc, #200]	@ (80362d8 <uxTaskGetSystemState+0x10c>)
 8036210:	4413      	add	r3, r2
 8036212:	2201      	movs	r2, #1
 8036214:	4619      	mov	r1, r3
 8036216:	f000 fc0b 	bl	8036a30 <prvListTasksWithinSingleList>
 803621a:	4602      	mov	r2, r0
 803621c:	697b      	ldr	r3, [r7, #20]
 803621e:	4413      	add	r3, r2
 8036220:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8036222:	693b      	ldr	r3, [r7, #16]
 8036224:	2b00      	cmp	r3, #0
 8036226:	d1e2      	bne.n	80361ee <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8036228:	697a      	ldr	r2, [r7, #20]
 803622a:	4613      	mov	r3, r2
 803622c:	00db      	lsls	r3, r3, #3
 803622e:	4413      	add	r3, r2
 8036230:	009b      	lsls	r3, r3, #2
 8036232:	461a      	mov	r2, r3
 8036234:	68fb      	ldr	r3, [r7, #12]
 8036236:	4413      	add	r3, r2
 8036238:	4a28      	ldr	r2, [pc, #160]	@ (80362dc <uxTaskGetSystemState+0x110>)
 803623a:	6811      	ldr	r1, [r2, #0]
 803623c:	2202      	movs	r2, #2
 803623e:	4618      	mov	r0, r3
 8036240:	f000 fbf6 	bl	8036a30 <prvListTasksWithinSingleList>
 8036244:	4602      	mov	r2, r0
 8036246:	697b      	ldr	r3, [r7, #20]
 8036248:	4413      	add	r3, r2
 803624a:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 803624c:	697a      	ldr	r2, [r7, #20]
 803624e:	4613      	mov	r3, r2
 8036250:	00db      	lsls	r3, r3, #3
 8036252:	4413      	add	r3, r2
 8036254:	009b      	lsls	r3, r3, #2
 8036256:	461a      	mov	r2, r3
 8036258:	68fb      	ldr	r3, [r7, #12]
 803625a:	4413      	add	r3, r2
 803625c:	4a20      	ldr	r2, [pc, #128]	@ (80362e0 <uxTaskGetSystemState+0x114>)
 803625e:	6811      	ldr	r1, [r2, #0]
 8036260:	2202      	movs	r2, #2
 8036262:	4618      	mov	r0, r3
 8036264:	f000 fbe4 	bl	8036a30 <prvListTasksWithinSingleList>
 8036268:	4602      	mov	r2, r0
 803626a:	697b      	ldr	r3, [r7, #20]
 803626c:	4413      	add	r3, r2
 803626e:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8036270:	697a      	ldr	r2, [r7, #20]
 8036272:	4613      	mov	r3, r2
 8036274:	00db      	lsls	r3, r3, #3
 8036276:	4413      	add	r3, r2
 8036278:	009b      	lsls	r3, r3, #2
 803627a:	461a      	mov	r2, r3
 803627c:	68fb      	ldr	r3, [r7, #12]
 803627e:	4413      	add	r3, r2
 8036280:	2204      	movs	r2, #4
 8036282:	4918      	ldr	r1, [pc, #96]	@ (80362e4 <uxTaskGetSystemState+0x118>)
 8036284:	4618      	mov	r0, r3
 8036286:	f000 fbd3 	bl	8036a30 <prvListTasksWithinSingleList>
 803628a:	4602      	mov	r2, r0
 803628c:	697b      	ldr	r3, [r7, #20]
 803628e:	4413      	add	r3, r2
 8036290:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8036292:	697a      	ldr	r2, [r7, #20]
 8036294:	4613      	mov	r3, r2
 8036296:	00db      	lsls	r3, r3, #3
 8036298:	4413      	add	r3, r2
 803629a:	009b      	lsls	r3, r3, #2
 803629c:	461a      	mov	r2, r3
 803629e:	68fb      	ldr	r3, [r7, #12]
 80362a0:	4413      	add	r3, r2
 80362a2:	2203      	movs	r2, #3
 80362a4:	4910      	ldr	r1, [pc, #64]	@ (80362e8 <uxTaskGetSystemState+0x11c>)
 80362a6:	4618      	mov	r0, r3
 80362a8:	f000 fbc2 	bl	8036a30 <prvListTasksWithinSingleList>
 80362ac:	4602      	mov	r2, r0
 80362ae:	697b      	ldr	r3, [r7, #20]
 80362b0:	4413      	add	r3, r2
 80362b2:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 80362b4:	687b      	ldr	r3, [r7, #4]
 80362b6:	2b00      	cmp	r3, #0
 80362b8:	d004      	beq.n	80362c4 <uxTaskGetSystemState+0xf8>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80362ba:	f7f0 fef1 	bl	80270a0 <getRunTimeCounterValue>
 80362be:	4602      	mov	r2, r0
 80362c0:	687b      	ldr	r3, [r7, #4]
 80362c2:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 80362c4:	f7ff fed4 	bl	8036070 <xTaskResumeAll>

		return uxTask;
 80362c8:	697b      	ldr	r3, [r7, #20]
	}
 80362ca:	4618      	mov	r0, r3
 80362cc:	3718      	adds	r7, #24
 80362ce:	46bd      	mov	sp, r7
 80362d0:	bd80      	pop	{r7, pc}
 80362d2:	bf00      	nop
 80362d4:	200042f8 	.word	0x200042f8
 80362d8:	20003e24 	.word	0x20003e24
 80362dc:	200042ac 	.word	0x200042ac
 80362e0:	200042b0 	.word	0x200042b0
 80362e4:	200042c8 	.word	0x200042c8
 80362e8:	200042e0 	.word	0x200042e0

080362ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80362ec:	b580      	push	{r7, lr}
 80362ee:	b086      	sub	sp, #24
 80362f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80362f2:	2300      	movs	r3, #0
 80362f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80362f6:	4b53      	ldr	r3, [pc, #332]	@ (8036444 <xTaskIncrementTick+0x158>)
 80362f8:	681b      	ldr	r3, [r3, #0]
 80362fa:	2b00      	cmp	r3, #0
 80362fc:	f040 8096 	bne.w	803642c <xTaskIncrementTick+0x140>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8036300:	4b51      	ldr	r3, [pc, #324]	@ (8036448 <xTaskIncrementTick+0x15c>)
 8036302:	681b      	ldr	r3, [r3, #0]
 8036304:	3301      	adds	r3, #1
 8036306:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8036308:	4a4f      	ldr	r2, [pc, #316]	@ (8036448 <xTaskIncrementTick+0x15c>)
 803630a:	693b      	ldr	r3, [r7, #16]
 803630c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 803630e:	693b      	ldr	r3, [r7, #16]
 8036310:	2b00      	cmp	r3, #0
 8036312:	d121      	bne.n	8036358 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8036314:	4b4d      	ldr	r3, [pc, #308]	@ (803644c <xTaskIncrementTick+0x160>)
 8036316:	681b      	ldr	r3, [r3, #0]
 8036318:	681b      	ldr	r3, [r3, #0]
 803631a:	2b00      	cmp	r3, #0
 803631c:	d00b      	beq.n	8036336 <xTaskIncrementTick+0x4a>
	__asm volatile
 803631e:	f04f 0310 	mov.w	r3, #16
 8036322:	f383 8811 	msr	BASEPRI, r3
 8036326:	f3bf 8f6f 	isb	sy
 803632a:	f3bf 8f4f 	dsb	sy
 803632e:	603b      	str	r3, [r7, #0]
}
 8036330:	bf00      	nop
 8036332:	bf00      	nop
 8036334:	e7fd      	b.n	8036332 <xTaskIncrementTick+0x46>
 8036336:	4b45      	ldr	r3, [pc, #276]	@ (803644c <xTaskIncrementTick+0x160>)
 8036338:	681b      	ldr	r3, [r3, #0]
 803633a:	60fb      	str	r3, [r7, #12]
 803633c:	4b44      	ldr	r3, [pc, #272]	@ (8036450 <xTaskIncrementTick+0x164>)
 803633e:	681b      	ldr	r3, [r3, #0]
 8036340:	4a42      	ldr	r2, [pc, #264]	@ (803644c <xTaskIncrementTick+0x160>)
 8036342:	6013      	str	r3, [r2, #0]
 8036344:	4a42      	ldr	r2, [pc, #264]	@ (8036450 <xTaskIncrementTick+0x164>)
 8036346:	68fb      	ldr	r3, [r7, #12]
 8036348:	6013      	str	r3, [r2, #0]
 803634a:	4b42      	ldr	r3, [pc, #264]	@ (8036454 <xTaskIncrementTick+0x168>)
 803634c:	681b      	ldr	r3, [r3, #0]
 803634e:	3301      	adds	r3, #1
 8036350:	4a40      	ldr	r2, [pc, #256]	@ (8036454 <xTaskIncrementTick+0x168>)
 8036352:	6013      	str	r3, [r2, #0]
 8036354:	f000 fc10 	bl	8036b78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8036358:	4b3f      	ldr	r3, [pc, #252]	@ (8036458 <xTaskIncrementTick+0x16c>)
 803635a:	681b      	ldr	r3, [r3, #0]
 803635c:	693a      	ldr	r2, [r7, #16]
 803635e:	429a      	cmp	r2, r3
 8036360:	d349      	bcc.n	80363f6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8036362:	4b3a      	ldr	r3, [pc, #232]	@ (803644c <xTaskIncrementTick+0x160>)
 8036364:	681b      	ldr	r3, [r3, #0]
 8036366:	681b      	ldr	r3, [r3, #0]
 8036368:	2b00      	cmp	r3, #0
 803636a:	d104      	bne.n	8036376 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 803636c:	4b3a      	ldr	r3, [pc, #232]	@ (8036458 <xTaskIncrementTick+0x16c>)
 803636e:	f04f 32ff 	mov.w	r2, #4294967295
 8036372:	601a      	str	r2, [r3, #0]
					break;
 8036374:	e03f      	b.n	80363f6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8036376:	4b35      	ldr	r3, [pc, #212]	@ (803644c <xTaskIncrementTick+0x160>)
 8036378:	681b      	ldr	r3, [r3, #0]
 803637a:	68db      	ldr	r3, [r3, #12]
 803637c:	68db      	ldr	r3, [r3, #12]
 803637e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8036380:	68bb      	ldr	r3, [r7, #8]
 8036382:	685b      	ldr	r3, [r3, #4]
 8036384:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8036386:	693a      	ldr	r2, [r7, #16]
 8036388:	687b      	ldr	r3, [r7, #4]
 803638a:	429a      	cmp	r2, r3
 803638c:	d203      	bcs.n	8036396 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 803638e:	4a32      	ldr	r2, [pc, #200]	@ (8036458 <xTaskIncrementTick+0x16c>)
 8036390:	687b      	ldr	r3, [r7, #4]
 8036392:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8036394:	e02f      	b.n	80363f6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8036396:	68bb      	ldr	r3, [r7, #8]
 8036398:	3304      	adds	r3, #4
 803639a:	4618      	mov	r0, r3
 803639c:	f7fe fb2c 	bl	80349f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80363a0:	68bb      	ldr	r3, [r7, #8]
 80363a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80363a4:	2b00      	cmp	r3, #0
 80363a6:	d004      	beq.n	80363b2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80363a8:	68bb      	ldr	r3, [r7, #8]
 80363aa:	3318      	adds	r3, #24
 80363ac:	4618      	mov	r0, r3
 80363ae:	f7fe fb23 	bl	80349f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80363b2:	68bb      	ldr	r3, [r7, #8]
 80363b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80363b6:	4b29      	ldr	r3, [pc, #164]	@ (803645c <xTaskIncrementTick+0x170>)
 80363b8:	681b      	ldr	r3, [r3, #0]
 80363ba:	429a      	cmp	r2, r3
 80363bc:	d903      	bls.n	80363c6 <xTaskIncrementTick+0xda>
 80363be:	68bb      	ldr	r3, [r7, #8]
 80363c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80363c2:	4a26      	ldr	r2, [pc, #152]	@ (803645c <xTaskIncrementTick+0x170>)
 80363c4:	6013      	str	r3, [r2, #0]
 80363c6:	68bb      	ldr	r3, [r7, #8]
 80363c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80363ca:	4613      	mov	r3, r2
 80363cc:	009b      	lsls	r3, r3, #2
 80363ce:	4413      	add	r3, r2
 80363d0:	009b      	lsls	r3, r3, #2
 80363d2:	4a23      	ldr	r2, [pc, #140]	@ (8036460 <xTaskIncrementTick+0x174>)
 80363d4:	441a      	add	r2, r3
 80363d6:	68bb      	ldr	r3, [r7, #8]
 80363d8:	3304      	adds	r3, #4
 80363da:	4619      	mov	r1, r3
 80363dc:	4610      	mov	r0, r2
 80363de:	f7fe faae 	bl	803493e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80363e2:	68bb      	ldr	r3, [r7, #8]
 80363e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80363e6:	4b1f      	ldr	r3, [pc, #124]	@ (8036464 <xTaskIncrementTick+0x178>)
 80363e8:	681b      	ldr	r3, [r3, #0]
 80363ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80363ec:	429a      	cmp	r2, r3
 80363ee:	d3b8      	bcc.n	8036362 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80363f0:	2301      	movs	r3, #1
 80363f2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80363f4:	e7b5      	b.n	8036362 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80363f6:	4b1b      	ldr	r3, [pc, #108]	@ (8036464 <xTaskIncrementTick+0x178>)
 80363f8:	681b      	ldr	r3, [r3, #0]
 80363fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80363fc:	4918      	ldr	r1, [pc, #96]	@ (8036460 <xTaskIncrementTick+0x174>)
 80363fe:	4613      	mov	r3, r2
 8036400:	009b      	lsls	r3, r3, #2
 8036402:	4413      	add	r3, r2
 8036404:	009b      	lsls	r3, r3, #2
 8036406:	440b      	add	r3, r1
 8036408:	681b      	ldr	r3, [r3, #0]
 803640a:	2b01      	cmp	r3, #1
 803640c:	d901      	bls.n	8036412 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 803640e:	2301      	movs	r3, #1
 8036410:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 8036412:	4b15      	ldr	r3, [pc, #84]	@ (8036468 <xTaskIncrementTick+0x17c>)
 8036414:	681b      	ldr	r3, [r3, #0]
 8036416:	2b00      	cmp	r3, #0
 8036418:	d101      	bne.n	803641e <xTaskIncrementTick+0x132>
			{
				vApplicationTickHook();
 803641a:	f7f0 fe71 	bl	8027100 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 803641e:	4b13      	ldr	r3, [pc, #76]	@ (803646c <xTaskIncrementTick+0x180>)
 8036420:	681b      	ldr	r3, [r3, #0]
 8036422:	2b00      	cmp	r3, #0
 8036424:	d009      	beq.n	803643a <xTaskIncrementTick+0x14e>
			{
				xSwitchRequired = pdTRUE;
 8036426:	2301      	movs	r3, #1
 8036428:	617b      	str	r3, [r7, #20]
 803642a:	e006      	b.n	803643a <xTaskIncrementTick+0x14e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 803642c:	4b0e      	ldr	r3, [pc, #56]	@ (8036468 <xTaskIncrementTick+0x17c>)
 803642e:	681b      	ldr	r3, [r3, #0]
 8036430:	3301      	adds	r3, #1
 8036432:	4a0d      	ldr	r2, [pc, #52]	@ (8036468 <xTaskIncrementTick+0x17c>)
 8036434:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8036436:	f7f0 fe63 	bl	8027100 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 803643a:	697b      	ldr	r3, [r7, #20]
}
 803643c:	4618      	mov	r0, r3
 803643e:	3718      	adds	r7, #24
 8036440:	46bd      	mov	sp, r7
 8036442:	bd80      	pop	{r7, pc}
 8036444:	20004320 	.word	0x20004320
 8036448:	200042fc 	.word	0x200042fc
 803644c:	200042ac 	.word	0x200042ac
 8036450:	200042b0 	.word	0x200042b0
 8036454:	20004310 	.word	0x20004310
 8036458:	20004318 	.word	0x20004318
 803645c:	20004300 	.word	0x20004300
 8036460:	20003e24 	.word	0x20003e24
 8036464:	20003e20 	.word	0x20003e20
 8036468:	20004308 	.word	0x20004308
 803646c:	2000430c 	.word	0x2000430c

08036470 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8036470:	b580      	push	{r7, lr}
 8036472:	b084      	sub	sp, #16
 8036474:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8036476:	4b46      	ldr	r3, [pc, #280]	@ (8036590 <vTaskSwitchContext+0x120>)
 8036478:	681b      	ldr	r3, [r3, #0]
 803647a:	2b00      	cmp	r3, #0
 803647c:	d003      	beq.n	8036486 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 803647e:	4b45      	ldr	r3, [pc, #276]	@ (8036594 <vTaskSwitchContext+0x124>)
 8036480:	2201      	movs	r2, #1
 8036482:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8036484:	e080      	b.n	8036588 <vTaskSwitchContext+0x118>
		xYieldPending = pdFALSE;
 8036486:	4b43      	ldr	r3, [pc, #268]	@ (8036594 <vTaskSwitchContext+0x124>)
 8036488:	2200      	movs	r2, #0
 803648a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 803648c:	f7f0 fe08 	bl	80270a0 <getRunTimeCounterValue>
 8036490:	4603      	mov	r3, r0
 8036492:	4a41      	ldr	r2, [pc, #260]	@ (8036598 <vTaskSwitchContext+0x128>)
 8036494:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8036496:	4b40      	ldr	r3, [pc, #256]	@ (8036598 <vTaskSwitchContext+0x128>)
 8036498:	681a      	ldr	r2, [r3, #0]
 803649a:	4b40      	ldr	r3, [pc, #256]	@ (803659c <vTaskSwitchContext+0x12c>)
 803649c:	681b      	ldr	r3, [r3, #0]
 803649e:	429a      	cmp	r2, r3
 80364a0:	d90b      	bls.n	80364ba <vTaskSwitchContext+0x4a>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80364a2:	4b3f      	ldr	r3, [pc, #252]	@ (80365a0 <vTaskSwitchContext+0x130>)
 80364a4:	681b      	ldr	r3, [r3, #0]
 80364a6:	f8d3 114c 	ldr.w	r1, [r3, #332]	@ 0x14c
 80364aa:	4a3b      	ldr	r2, [pc, #236]	@ (8036598 <vTaskSwitchContext+0x128>)
 80364ac:	6810      	ldr	r0, [r2, #0]
 80364ae:	4a3b      	ldr	r2, [pc, #236]	@ (803659c <vTaskSwitchContext+0x12c>)
 80364b0:	6812      	ldr	r2, [r2, #0]
 80364b2:	1a82      	subs	r2, r0, r2
 80364b4:	440a      	add	r2, r1
 80364b6:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
			ulTaskSwitchedInTime = ulTotalRunTime;
 80364ba:	4b37      	ldr	r3, [pc, #220]	@ (8036598 <vTaskSwitchContext+0x128>)
 80364bc:	681b      	ldr	r3, [r3, #0]
 80364be:	4a37      	ldr	r2, [pc, #220]	@ (803659c <vTaskSwitchContext+0x12c>)
 80364c0:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80364c2:	4b37      	ldr	r3, [pc, #220]	@ (80365a0 <vTaskSwitchContext+0x130>)
 80364c4:	681b      	ldr	r3, [r3, #0]
 80364c6:	681a      	ldr	r2, [r3, #0]
 80364c8:	4b35      	ldr	r3, [pc, #212]	@ (80365a0 <vTaskSwitchContext+0x130>)
 80364ca:	681b      	ldr	r3, [r3, #0]
 80364cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80364ce:	429a      	cmp	r2, r3
 80364d0:	d808      	bhi.n	80364e4 <vTaskSwitchContext+0x74>
 80364d2:	4b33      	ldr	r3, [pc, #204]	@ (80365a0 <vTaskSwitchContext+0x130>)
 80364d4:	681a      	ldr	r2, [r3, #0]
 80364d6:	4b32      	ldr	r3, [pc, #200]	@ (80365a0 <vTaskSwitchContext+0x130>)
 80364d8:	681b      	ldr	r3, [r3, #0]
 80364da:	3334      	adds	r3, #52	@ 0x34
 80364dc:	4619      	mov	r1, r3
 80364de:	4610      	mov	r0, r2
 80364e0:	f7f0 fe20 	bl	8027124 <vApplicationStackOverflowHook>
			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
 80364e4:	4b2e      	ldr	r3, [pc, #184]	@ (80365a0 <vTaskSwitchContext+0x130>)
 80364e6:	681b      	ldr	r3, [r3, #0]
 80364e8:	4a2e      	ldr	r2, [pc, #184]	@ (80365a4 <vTaskSwitchContext+0x134>)
 80364ea:	6812      	ldr	r2, [r2, #0]
 80364ec:	f8c3 21a4 	str.w	r2, [r3, #420]	@ 0x1a4
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80364f0:	4b2d      	ldr	r3, [pc, #180]	@ (80365a8 <vTaskSwitchContext+0x138>)
 80364f2:	681b      	ldr	r3, [r3, #0]
 80364f4:	60fb      	str	r3, [r7, #12]
 80364f6:	e011      	b.n	803651c <vTaskSwitchContext+0xac>
 80364f8:	68fb      	ldr	r3, [r7, #12]
 80364fa:	2b00      	cmp	r3, #0
 80364fc:	d10b      	bne.n	8036516 <vTaskSwitchContext+0xa6>
	__asm volatile
 80364fe:	f04f 0310 	mov.w	r3, #16
 8036502:	f383 8811 	msr	BASEPRI, r3
 8036506:	f3bf 8f6f 	isb	sy
 803650a:	f3bf 8f4f 	dsb	sy
 803650e:	607b      	str	r3, [r7, #4]
}
 8036510:	bf00      	nop
 8036512:	bf00      	nop
 8036514:	e7fd      	b.n	8036512 <vTaskSwitchContext+0xa2>
 8036516:	68fb      	ldr	r3, [r7, #12]
 8036518:	3b01      	subs	r3, #1
 803651a:	60fb      	str	r3, [r7, #12]
 803651c:	4923      	ldr	r1, [pc, #140]	@ (80365ac <vTaskSwitchContext+0x13c>)
 803651e:	68fa      	ldr	r2, [r7, #12]
 8036520:	4613      	mov	r3, r2
 8036522:	009b      	lsls	r3, r3, #2
 8036524:	4413      	add	r3, r2
 8036526:	009b      	lsls	r3, r3, #2
 8036528:	440b      	add	r3, r1
 803652a:	681b      	ldr	r3, [r3, #0]
 803652c:	2b00      	cmp	r3, #0
 803652e:	d0e3      	beq.n	80364f8 <vTaskSwitchContext+0x88>
 8036530:	68fa      	ldr	r2, [r7, #12]
 8036532:	4613      	mov	r3, r2
 8036534:	009b      	lsls	r3, r3, #2
 8036536:	4413      	add	r3, r2
 8036538:	009b      	lsls	r3, r3, #2
 803653a:	4a1c      	ldr	r2, [pc, #112]	@ (80365ac <vTaskSwitchContext+0x13c>)
 803653c:	4413      	add	r3, r2
 803653e:	60bb      	str	r3, [r7, #8]
 8036540:	68bb      	ldr	r3, [r7, #8]
 8036542:	685b      	ldr	r3, [r3, #4]
 8036544:	685a      	ldr	r2, [r3, #4]
 8036546:	68bb      	ldr	r3, [r7, #8]
 8036548:	605a      	str	r2, [r3, #4]
 803654a:	68bb      	ldr	r3, [r7, #8]
 803654c:	685a      	ldr	r2, [r3, #4]
 803654e:	68bb      	ldr	r3, [r7, #8]
 8036550:	3308      	adds	r3, #8
 8036552:	429a      	cmp	r2, r3
 8036554:	d104      	bne.n	8036560 <vTaskSwitchContext+0xf0>
 8036556:	68bb      	ldr	r3, [r7, #8]
 8036558:	685b      	ldr	r3, [r3, #4]
 803655a:	685a      	ldr	r2, [r3, #4]
 803655c:	68bb      	ldr	r3, [r7, #8]
 803655e:	605a      	str	r2, [r3, #4]
 8036560:	68bb      	ldr	r3, [r7, #8]
 8036562:	685b      	ldr	r3, [r3, #4]
 8036564:	68db      	ldr	r3, [r3, #12]
 8036566:	4a0e      	ldr	r2, [pc, #56]	@ (80365a0 <vTaskSwitchContext+0x130>)
 8036568:	6013      	str	r3, [r2, #0]
 803656a:	4a0f      	ldr	r2, [pc, #60]	@ (80365a8 <vTaskSwitchContext+0x138>)
 803656c:	68fb      	ldr	r3, [r7, #12]
 803656e:	6013      	str	r3, [r2, #0]
			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
 8036570:	4b0b      	ldr	r3, [pc, #44]	@ (80365a0 <vTaskSwitchContext+0x130>)
 8036572:	681b      	ldr	r3, [r3, #0]
 8036574:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 8036578:	4a0a      	ldr	r2, [pc, #40]	@ (80365a4 <vTaskSwitchContext+0x134>)
 803657a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 803657c:	4b08      	ldr	r3, [pc, #32]	@ (80365a0 <vTaskSwitchContext+0x130>)
 803657e:	681b      	ldr	r3, [r3, #0]
 8036580:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8036584:	4a0a      	ldr	r2, [pc, #40]	@ (80365b0 <vTaskSwitchContext+0x140>)
 8036586:	6013      	str	r3, [r2, #0]
}
 8036588:	bf00      	nop
 803658a:	3710      	adds	r7, #16
 803658c:	46bd      	mov	sp, r7
 803658e:	bd80      	pop	{r7, pc}
 8036590:	20004320 	.word	0x20004320
 8036594:	2000430c 	.word	0x2000430c
 8036598:	20004328 	.word	0x20004328
 803659c:	20004324 	.word	0x20004324
 80365a0:	20003e20 	.word	0x20003e20
 80365a4:	200042f4 	.word	0x200042f4
 80365a8:	20004300 	.word	0x20004300
 80365ac:	20003e24 	.word	0x20003e24
 80365b0:	2000002c 	.word	0x2000002c

080365b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80365b4:	b580      	push	{r7, lr}
 80365b6:	b084      	sub	sp, #16
 80365b8:	af00      	add	r7, sp, #0
 80365ba:	6078      	str	r0, [r7, #4]
 80365bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80365be:	687b      	ldr	r3, [r7, #4]
 80365c0:	2b00      	cmp	r3, #0
 80365c2:	d10b      	bne.n	80365dc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80365c4:	f04f 0310 	mov.w	r3, #16
 80365c8:	f383 8811 	msr	BASEPRI, r3
 80365cc:	f3bf 8f6f 	isb	sy
 80365d0:	f3bf 8f4f 	dsb	sy
 80365d4:	60fb      	str	r3, [r7, #12]
}
 80365d6:	bf00      	nop
 80365d8:	bf00      	nop
 80365da:	e7fd      	b.n	80365d8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80365dc:	4b07      	ldr	r3, [pc, #28]	@ (80365fc <vTaskPlaceOnEventList+0x48>)
 80365de:	681b      	ldr	r3, [r3, #0]
 80365e0:	3318      	adds	r3, #24
 80365e2:	4619      	mov	r1, r3
 80365e4:	6878      	ldr	r0, [r7, #4]
 80365e6:	f7fe f9ce 	bl	8034986 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80365ea:	2101      	movs	r1, #1
 80365ec:	6838      	ldr	r0, [r7, #0]
 80365ee:	f000 fb77 	bl	8036ce0 <prvAddCurrentTaskToDelayedList>
}
 80365f2:	bf00      	nop
 80365f4:	3710      	adds	r7, #16
 80365f6:	46bd      	mov	sp, r7
 80365f8:	bd80      	pop	{r7, pc}
 80365fa:	bf00      	nop
 80365fc:	20003e20 	.word	0x20003e20

08036600 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8036600:	b580      	push	{r7, lr}
 8036602:	b086      	sub	sp, #24
 8036604:	af00      	add	r7, sp, #0
 8036606:	60f8      	str	r0, [r7, #12]
 8036608:	60b9      	str	r1, [r7, #8]
 803660a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 803660c:	68fb      	ldr	r3, [r7, #12]
 803660e:	2b00      	cmp	r3, #0
 8036610:	d10b      	bne.n	803662a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8036612:	f04f 0310 	mov.w	r3, #16
 8036616:	f383 8811 	msr	BASEPRI, r3
 803661a:	f3bf 8f6f 	isb	sy
 803661e:	f3bf 8f4f 	dsb	sy
 8036622:	617b      	str	r3, [r7, #20]
}
 8036624:	bf00      	nop
 8036626:	bf00      	nop
 8036628:	e7fd      	b.n	8036626 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 803662a:	4b0a      	ldr	r3, [pc, #40]	@ (8036654 <vTaskPlaceOnEventListRestricted+0x54>)
 803662c:	681b      	ldr	r3, [r3, #0]
 803662e:	3318      	adds	r3, #24
 8036630:	4619      	mov	r1, r3
 8036632:	68f8      	ldr	r0, [r7, #12]
 8036634:	f7fe f983 	bl	803493e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8036638:	687b      	ldr	r3, [r7, #4]
 803663a:	2b00      	cmp	r3, #0
 803663c:	d002      	beq.n	8036644 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 803663e:	f04f 33ff 	mov.w	r3, #4294967295
 8036642:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8036644:	6879      	ldr	r1, [r7, #4]
 8036646:	68b8      	ldr	r0, [r7, #8]
 8036648:	f000 fb4a 	bl	8036ce0 <prvAddCurrentTaskToDelayedList>
	}
 803664c:	bf00      	nop
 803664e:	3718      	adds	r7, #24
 8036650:	46bd      	mov	sp, r7
 8036652:	bd80      	pop	{r7, pc}
 8036654:	20003e20 	.word	0x20003e20

08036658 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8036658:	b580      	push	{r7, lr}
 803665a:	b086      	sub	sp, #24
 803665c:	af00      	add	r7, sp, #0
 803665e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8036660:	687b      	ldr	r3, [r7, #4]
 8036662:	68db      	ldr	r3, [r3, #12]
 8036664:	68db      	ldr	r3, [r3, #12]
 8036666:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8036668:	693b      	ldr	r3, [r7, #16]
 803666a:	2b00      	cmp	r3, #0
 803666c:	d10b      	bne.n	8036686 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 803666e:	f04f 0310 	mov.w	r3, #16
 8036672:	f383 8811 	msr	BASEPRI, r3
 8036676:	f3bf 8f6f 	isb	sy
 803667a:	f3bf 8f4f 	dsb	sy
 803667e:	60fb      	str	r3, [r7, #12]
}
 8036680:	bf00      	nop
 8036682:	bf00      	nop
 8036684:	e7fd      	b.n	8036682 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8036686:	693b      	ldr	r3, [r7, #16]
 8036688:	3318      	adds	r3, #24
 803668a:	4618      	mov	r0, r3
 803668c:	f7fe f9b4 	bl	80349f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8036690:	4b1d      	ldr	r3, [pc, #116]	@ (8036708 <xTaskRemoveFromEventList+0xb0>)
 8036692:	681b      	ldr	r3, [r3, #0]
 8036694:	2b00      	cmp	r3, #0
 8036696:	d11d      	bne.n	80366d4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8036698:	693b      	ldr	r3, [r7, #16]
 803669a:	3304      	adds	r3, #4
 803669c:	4618      	mov	r0, r3
 803669e:	f7fe f9ab 	bl	80349f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80366a2:	693b      	ldr	r3, [r7, #16]
 80366a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80366a6:	4b19      	ldr	r3, [pc, #100]	@ (803670c <xTaskRemoveFromEventList+0xb4>)
 80366a8:	681b      	ldr	r3, [r3, #0]
 80366aa:	429a      	cmp	r2, r3
 80366ac:	d903      	bls.n	80366b6 <xTaskRemoveFromEventList+0x5e>
 80366ae:	693b      	ldr	r3, [r7, #16]
 80366b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80366b2:	4a16      	ldr	r2, [pc, #88]	@ (803670c <xTaskRemoveFromEventList+0xb4>)
 80366b4:	6013      	str	r3, [r2, #0]
 80366b6:	693b      	ldr	r3, [r7, #16]
 80366b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80366ba:	4613      	mov	r3, r2
 80366bc:	009b      	lsls	r3, r3, #2
 80366be:	4413      	add	r3, r2
 80366c0:	009b      	lsls	r3, r3, #2
 80366c2:	4a13      	ldr	r2, [pc, #76]	@ (8036710 <xTaskRemoveFromEventList+0xb8>)
 80366c4:	441a      	add	r2, r3
 80366c6:	693b      	ldr	r3, [r7, #16]
 80366c8:	3304      	adds	r3, #4
 80366ca:	4619      	mov	r1, r3
 80366cc:	4610      	mov	r0, r2
 80366ce:	f7fe f936 	bl	803493e <vListInsertEnd>
 80366d2:	e005      	b.n	80366e0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80366d4:	693b      	ldr	r3, [r7, #16]
 80366d6:	3318      	adds	r3, #24
 80366d8:	4619      	mov	r1, r3
 80366da:	480e      	ldr	r0, [pc, #56]	@ (8036714 <xTaskRemoveFromEventList+0xbc>)
 80366dc:	f7fe f92f 	bl	803493e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80366e0:	693b      	ldr	r3, [r7, #16]
 80366e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80366e4:	4b0c      	ldr	r3, [pc, #48]	@ (8036718 <xTaskRemoveFromEventList+0xc0>)
 80366e6:	681b      	ldr	r3, [r3, #0]
 80366e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80366ea:	429a      	cmp	r2, r3
 80366ec:	d905      	bls.n	80366fa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80366ee:	2301      	movs	r3, #1
 80366f0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80366f2:	4b0a      	ldr	r3, [pc, #40]	@ (803671c <xTaskRemoveFromEventList+0xc4>)
 80366f4:	2201      	movs	r2, #1
 80366f6:	601a      	str	r2, [r3, #0]
 80366f8:	e001      	b.n	80366fe <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80366fa:	2300      	movs	r3, #0
 80366fc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80366fe:	697b      	ldr	r3, [r7, #20]
}
 8036700:	4618      	mov	r0, r3
 8036702:	3718      	adds	r7, #24
 8036704:	46bd      	mov	sp, r7
 8036706:	bd80      	pop	{r7, pc}
 8036708:	20004320 	.word	0x20004320
 803670c:	20004300 	.word	0x20004300
 8036710:	20003e24 	.word	0x20003e24
 8036714:	200042b4 	.word	0x200042b4
 8036718:	20003e20 	.word	0x20003e20
 803671c:	2000430c 	.word	0x2000430c

08036720 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8036720:	b480      	push	{r7}
 8036722:	b083      	sub	sp, #12
 8036724:	af00      	add	r7, sp, #0
 8036726:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8036728:	4b06      	ldr	r3, [pc, #24]	@ (8036744 <vTaskInternalSetTimeOutState+0x24>)
 803672a:	681a      	ldr	r2, [r3, #0]
 803672c:	687b      	ldr	r3, [r7, #4]
 803672e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8036730:	4b05      	ldr	r3, [pc, #20]	@ (8036748 <vTaskInternalSetTimeOutState+0x28>)
 8036732:	681a      	ldr	r2, [r3, #0]
 8036734:	687b      	ldr	r3, [r7, #4]
 8036736:	605a      	str	r2, [r3, #4]
}
 8036738:	bf00      	nop
 803673a:	370c      	adds	r7, #12
 803673c:	46bd      	mov	sp, r7
 803673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036742:	4770      	bx	lr
 8036744:	20004310 	.word	0x20004310
 8036748:	200042fc 	.word	0x200042fc

0803674c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 803674c:	b580      	push	{r7, lr}
 803674e:	b088      	sub	sp, #32
 8036750:	af00      	add	r7, sp, #0
 8036752:	6078      	str	r0, [r7, #4]
 8036754:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8036756:	687b      	ldr	r3, [r7, #4]
 8036758:	2b00      	cmp	r3, #0
 803675a:	d10b      	bne.n	8036774 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 803675c:	f04f 0310 	mov.w	r3, #16
 8036760:	f383 8811 	msr	BASEPRI, r3
 8036764:	f3bf 8f6f 	isb	sy
 8036768:	f3bf 8f4f 	dsb	sy
 803676c:	613b      	str	r3, [r7, #16]
}
 803676e:	bf00      	nop
 8036770:	bf00      	nop
 8036772:	e7fd      	b.n	8036770 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8036774:	683b      	ldr	r3, [r7, #0]
 8036776:	2b00      	cmp	r3, #0
 8036778:	d10b      	bne.n	8036792 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 803677a:	f04f 0310 	mov.w	r3, #16
 803677e:	f383 8811 	msr	BASEPRI, r3
 8036782:	f3bf 8f6f 	isb	sy
 8036786:	f3bf 8f4f 	dsb	sy
 803678a:	60fb      	str	r3, [r7, #12]
}
 803678c:	bf00      	nop
 803678e:	bf00      	nop
 8036790:	e7fd      	b.n	803678e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8036792:	f7fe fa89 	bl	8034ca8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8036796:	4b24      	ldr	r3, [pc, #144]	@ (8036828 <xTaskCheckForTimeOut+0xdc>)
 8036798:	681b      	ldr	r3, [r3, #0]
 803679a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 803679c:	687b      	ldr	r3, [r7, #4]
 803679e:	685b      	ldr	r3, [r3, #4]
 80367a0:	69ba      	ldr	r2, [r7, #24]
 80367a2:	1ad3      	subs	r3, r2, r3
 80367a4:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 80367a6:	4b21      	ldr	r3, [pc, #132]	@ (803682c <xTaskCheckForTimeOut+0xe0>)
 80367a8:	681b      	ldr	r3, [r3, #0]
 80367aa:	f893 31a2 	ldrb.w	r3, [r3, #418]	@ 0x1a2
 80367ae:	2b00      	cmp	r3, #0
 80367b0:	d007      	beq.n	80367c2 <xTaskCheckForTimeOut+0x76>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 80367b2:	4b1e      	ldr	r3, [pc, #120]	@ (803682c <xTaskCheckForTimeOut+0xe0>)
 80367b4:	681b      	ldr	r3, [r3, #0]
 80367b6:	2200      	movs	r2, #0
 80367b8:	f883 21a2 	strb.w	r2, [r3, #418]	@ 0x1a2
				xReturn = pdTRUE;
 80367bc:	2301      	movs	r3, #1
 80367be:	61fb      	str	r3, [r7, #28]
 80367c0:	e02b      	b.n	803681a <xTaskCheckForTimeOut+0xce>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80367c2:	683b      	ldr	r3, [r7, #0]
 80367c4:	681b      	ldr	r3, [r3, #0]
 80367c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80367ca:	d102      	bne.n	80367d2 <xTaskCheckForTimeOut+0x86>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80367cc:	2300      	movs	r3, #0
 80367ce:	61fb      	str	r3, [r7, #28]
 80367d0:	e023      	b.n	803681a <xTaskCheckForTimeOut+0xce>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80367d2:	687b      	ldr	r3, [r7, #4]
 80367d4:	681a      	ldr	r2, [r3, #0]
 80367d6:	4b16      	ldr	r3, [pc, #88]	@ (8036830 <xTaskCheckForTimeOut+0xe4>)
 80367d8:	681b      	ldr	r3, [r3, #0]
 80367da:	429a      	cmp	r2, r3
 80367dc:	d007      	beq.n	80367ee <xTaskCheckForTimeOut+0xa2>
 80367de:	687b      	ldr	r3, [r7, #4]
 80367e0:	685b      	ldr	r3, [r3, #4]
 80367e2:	69ba      	ldr	r2, [r7, #24]
 80367e4:	429a      	cmp	r2, r3
 80367e6:	d302      	bcc.n	80367ee <xTaskCheckForTimeOut+0xa2>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80367e8:	2301      	movs	r3, #1
 80367ea:	61fb      	str	r3, [r7, #28]
 80367ec:	e015      	b.n	803681a <xTaskCheckForTimeOut+0xce>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80367ee:	683b      	ldr	r3, [r7, #0]
 80367f0:	681b      	ldr	r3, [r3, #0]
 80367f2:	697a      	ldr	r2, [r7, #20]
 80367f4:	429a      	cmp	r2, r3
 80367f6:	d20b      	bcs.n	8036810 <xTaskCheckForTimeOut+0xc4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80367f8:	683b      	ldr	r3, [r7, #0]
 80367fa:	681a      	ldr	r2, [r3, #0]
 80367fc:	697b      	ldr	r3, [r7, #20]
 80367fe:	1ad2      	subs	r2, r2, r3
 8036800:	683b      	ldr	r3, [r7, #0]
 8036802:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8036804:	6878      	ldr	r0, [r7, #4]
 8036806:	f7ff ff8b 	bl	8036720 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 803680a:	2300      	movs	r3, #0
 803680c:	61fb      	str	r3, [r7, #28]
 803680e:	e004      	b.n	803681a <xTaskCheckForTimeOut+0xce>
		}
		else
		{
			*pxTicksToWait = 0;
 8036810:	683b      	ldr	r3, [r7, #0]
 8036812:	2200      	movs	r2, #0
 8036814:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8036816:	2301      	movs	r3, #1
 8036818:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 803681a:	f7fe fa77 	bl	8034d0c <vPortExitCritical>

	return xReturn;
 803681e:	69fb      	ldr	r3, [r7, #28]
}
 8036820:	4618      	mov	r0, r3
 8036822:	3720      	adds	r7, #32
 8036824:	46bd      	mov	sp, r7
 8036826:	bd80      	pop	{r7, pc}
 8036828:	200042fc 	.word	0x200042fc
 803682c:	20003e20 	.word	0x20003e20
 8036830:	20004310 	.word	0x20004310

08036834 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8036834:	b480      	push	{r7}
 8036836:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8036838:	4b03      	ldr	r3, [pc, #12]	@ (8036848 <vTaskMissedYield+0x14>)
 803683a:	2201      	movs	r2, #1
 803683c:	601a      	str	r2, [r3, #0]
}
 803683e:	bf00      	nop
 8036840:	46bd      	mov	sp, r7
 8036842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036846:	4770      	bx	lr
 8036848:	2000430c 	.word	0x2000430c

0803684c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 803684c:	b580      	push	{r7, lr}
 803684e:	b082      	sub	sp, #8
 8036850:	af00      	add	r7, sp, #0
 8036852:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8036854:	f000 f854 	bl	8036900 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8036858:	4b07      	ldr	r3, [pc, #28]	@ (8036878 <prvIdleTask+0x2c>)
 803685a:	681b      	ldr	r3, [r3, #0]
 803685c:	2b01      	cmp	r3, #1
 803685e:	d907      	bls.n	8036870 <prvIdleTask+0x24>
			{
				taskYIELD();
 8036860:	4b06      	ldr	r3, [pc, #24]	@ (803687c <prvIdleTask+0x30>)
 8036862:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8036866:	601a      	str	r2, [r3, #0]
 8036868:	f3bf 8f4f 	dsb	sy
 803686c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8036870:	f7f0 fc22 	bl	80270b8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8036874:	e7ee      	b.n	8036854 <prvIdleTask+0x8>
 8036876:	bf00      	nop
 8036878:	20003e24 	.word	0x20003e24
 803687c:	e000ed04 	.word	0xe000ed04

08036880 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8036880:	b580      	push	{r7, lr}
 8036882:	b082      	sub	sp, #8
 8036884:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8036886:	2300      	movs	r3, #0
 8036888:	607b      	str	r3, [r7, #4]
 803688a:	e00c      	b.n	80368a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 803688c:	687a      	ldr	r2, [r7, #4]
 803688e:	4613      	mov	r3, r2
 8036890:	009b      	lsls	r3, r3, #2
 8036892:	4413      	add	r3, r2
 8036894:	009b      	lsls	r3, r3, #2
 8036896:	4a12      	ldr	r2, [pc, #72]	@ (80368e0 <prvInitialiseTaskLists+0x60>)
 8036898:	4413      	add	r3, r2
 803689a:	4618      	mov	r0, r3
 803689c:	f7fe f822 	bl	80348e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80368a0:	687b      	ldr	r3, [r7, #4]
 80368a2:	3301      	adds	r3, #1
 80368a4:	607b      	str	r3, [r7, #4]
 80368a6:	687b      	ldr	r3, [r7, #4]
 80368a8:	2b37      	cmp	r3, #55	@ 0x37
 80368aa:	d9ef      	bls.n	803688c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80368ac:	480d      	ldr	r0, [pc, #52]	@ (80368e4 <prvInitialiseTaskLists+0x64>)
 80368ae:	f7fe f819 	bl	80348e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80368b2:	480d      	ldr	r0, [pc, #52]	@ (80368e8 <prvInitialiseTaskLists+0x68>)
 80368b4:	f7fe f816 	bl	80348e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80368b8:	480c      	ldr	r0, [pc, #48]	@ (80368ec <prvInitialiseTaskLists+0x6c>)
 80368ba:	f7fe f813 	bl	80348e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80368be:	480c      	ldr	r0, [pc, #48]	@ (80368f0 <prvInitialiseTaskLists+0x70>)
 80368c0:	f7fe f810 	bl	80348e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80368c4:	480b      	ldr	r0, [pc, #44]	@ (80368f4 <prvInitialiseTaskLists+0x74>)
 80368c6:	f7fe f80d 	bl	80348e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80368ca:	4b0b      	ldr	r3, [pc, #44]	@ (80368f8 <prvInitialiseTaskLists+0x78>)
 80368cc:	4a05      	ldr	r2, [pc, #20]	@ (80368e4 <prvInitialiseTaskLists+0x64>)
 80368ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80368d0:	4b0a      	ldr	r3, [pc, #40]	@ (80368fc <prvInitialiseTaskLists+0x7c>)
 80368d2:	4a05      	ldr	r2, [pc, #20]	@ (80368e8 <prvInitialiseTaskLists+0x68>)
 80368d4:	601a      	str	r2, [r3, #0]
}
 80368d6:	bf00      	nop
 80368d8:	3708      	adds	r7, #8
 80368da:	46bd      	mov	sp, r7
 80368dc:	bd80      	pop	{r7, pc}
 80368de:	bf00      	nop
 80368e0:	20003e24 	.word	0x20003e24
 80368e4:	20004284 	.word	0x20004284
 80368e8:	20004298 	.word	0x20004298
 80368ec:	200042b4 	.word	0x200042b4
 80368f0:	200042c8 	.word	0x200042c8
 80368f4:	200042e0 	.word	0x200042e0
 80368f8:	200042ac 	.word	0x200042ac
 80368fc:	200042b0 	.word	0x200042b0

08036900 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8036900:	b580      	push	{r7, lr}
 8036902:	b082      	sub	sp, #8
 8036904:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8036906:	e019      	b.n	803693c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8036908:	f7fe f9ce 	bl	8034ca8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 803690c:	4b10      	ldr	r3, [pc, #64]	@ (8036950 <prvCheckTasksWaitingTermination+0x50>)
 803690e:	68db      	ldr	r3, [r3, #12]
 8036910:	68db      	ldr	r3, [r3, #12]
 8036912:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8036914:	687b      	ldr	r3, [r7, #4]
 8036916:	3304      	adds	r3, #4
 8036918:	4618      	mov	r0, r3
 803691a:	f7fe f86d 	bl	80349f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 803691e:	4b0d      	ldr	r3, [pc, #52]	@ (8036954 <prvCheckTasksWaitingTermination+0x54>)
 8036920:	681b      	ldr	r3, [r3, #0]
 8036922:	3b01      	subs	r3, #1
 8036924:	4a0b      	ldr	r2, [pc, #44]	@ (8036954 <prvCheckTasksWaitingTermination+0x54>)
 8036926:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8036928:	4b0b      	ldr	r3, [pc, #44]	@ (8036958 <prvCheckTasksWaitingTermination+0x58>)
 803692a:	681b      	ldr	r3, [r3, #0]
 803692c:	3b01      	subs	r3, #1
 803692e:	4a0a      	ldr	r2, [pc, #40]	@ (8036958 <prvCheckTasksWaitingTermination+0x58>)
 8036930:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8036932:	f7fe f9eb 	bl	8034d0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8036936:	6878      	ldr	r0, [r7, #4]
 8036938:	f000 f8e8 	bl	8036b0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 803693c:	4b06      	ldr	r3, [pc, #24]	@ (8036958 <prvCheckTasksWaitingTermination+0x58>)
 803693e:	681b      	ldr	r3, [r3, #0]
 8036940:	2b00      	cmp	r3, #0
 8036942:	d1e1      	bne.n	8036908 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8036944:	bf00      	nop
 8036946:	bf00      	nop
 8036948:	3708      	adds	r7, #8
 803694a:	46bd      	mov	sp, r7
 803694c:	bd80      	pop	{r7, pc}
 803694e:	bf00      	nop
 8036950:	200042c8 	.word	0x200042c8
 8036954:	200042f8 	.word	0x200042f8
 8036958:	200042dc 	.word	0x200042dc

0803695c <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 803695c:	b580      	push	{r7, lr}
 803695e:	b086      	sub	sp, #24
 8036960:	af00      	add	r7, sp, #0
 8036962:	60f8      	str	r0, [r7, #12]
 8036964:	60b9      	str	r1, [r7, #8]
 8036966:	607a      	str	r2, [r7, #4]
 8036968:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 803696a:	68fb      	ldr	r3, [r7, #12]
 803696c:	2b00      	cmp	r3, #0
 803696e:	d102      	bne.n	8036976 <vTaskGetInfo+0x1a>
 8036970:	4b2e      	ldr	r3, [pc, #184]	@ (8036a2c <vTaskGetInfo+0xd0>)
 8036972:	681b      	ldr	r3, [r3, #0]
 8036974:	e000      	b.n	8036978 <vTaskGetInfo+0x1c>
 8036976:	68fb      	ldr	r3, [r7, #12]
 8036978:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 803697a:	68bb      	ldr	r3, [r7, #8]
 803697c:	697a      	ldr	r2, [r7, #20]
 803697e:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8036980:	697b      	ldr	r3, [r7, #20]
 8036982:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8036986:	68bb      	ldr	r3, [r7, #8]
 8036988:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 803698a:	697b      	ldr	r3, [r7, #20]
 803698c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 803698e:	68bb      	ldr	r3, [r7, #8]
 8036990:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8036992:	697b      	ldr	r3, [r7, #20]
 8036994:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8036996:	68bb      	ldr	r3, [r7, #8]
 8036998:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 803699a:	697b      	ldr	r3, [r7, #20]
 803699c:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
 80369a0:	68bb      	ldr	r3, [r7, #8]
 80369a2:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 80369a4:	697b      	ldr	r3, [r7, #20]
 80369a6:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 80369aa:	68bb      	ldr	r3, [r7, #8]
 80369ac:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 80369ae:	697b      	ldr	r3, [r7, #20]
 80369b0:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 80369b4:	68bb      	ldr	r3, [r7, #8]
 80369b6:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 80369b8:	78fb      	ldrb	r3, [r7, #3]
 80369ba:	2b05      	cmp	r3, #5
 80369bc:	d01a      	beq.n	80369f4 <vTaskGetInfo+0x98>
		{
			if( pxTCB == pxCurrentTCB )
 80369be:	4b1b      	ldr	r3, [pc, #108]	@ (8036a2c <vTaskGetInfo+0xd0>)
 80369c0:	681b      	ldr	r3, [r3, #0]
 80369c2:	697a      	ldr	r2, [r7, #20]
 80369c4:	429a      	cmp	r2, r3
 80369c6:	d103      	bne.n	80369d0 <vTaskGetInfo+0x74>
			{
				pxTaskStatus->eCurrentState = eRunning;
 80369c8:	68bb      	ldr	r3, [r7, #8]
 80369ca:	2200      	movs	r2, #0
 80369cc:	731a      	strb	r2, [r3, #12]
 80369ce:	e018      	b.n	8036a02 <vTaskGetInfo+0xa6>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 80369d0:	68bb      	ldr	r3, [r7, #8]
 80369d2:	78fa      	ldrb	r2, [r7, #3]
 80369d4:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 80369d6:	78fb      	ldrb	r3, [r7, #3]
 80369d8:	2b03      	cmp	r3, #3
 80369da:	d112      	bne.n	8036a02 <vTaskGetInfo+0xa6>
					{
						vTaskSuspendAll();
 80369dc:	f7ff fb3a 	bl	8036054 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80369e0:	697b      	ldr	r3, [r7, #20]
 80369e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80369e4:	2b00      	cmp	r3, #0
 80369e6:	d002      	beq.n	80369ee <vTaskGetInfo+0x92>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 80369e8:	68bb      	ldr	r3, [r7, #8]
 80369ea:	2202      	movs	r2, #2
 80369ec:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 80369ee:	f7ff fb3f 	bl	8036070 <xTaskResumeAll>
 80369f2:	e006      	b.n	8036a02 <vTaskGetInfo+0xa6>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 80369f4:	6978      	ldr	r0, [r7, #20]
 80369f6:	f7ff f949 	bl	8035c8c <eTaskGetState>
 80369fa:	4603      	mov	r3, r0
 80369fc:	461a      	mov	r2, r3
 80369fe:	68bb      	ldr	r3, [r7, #8]
 8036a00:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 8036a02:	687b      	ldr	r3, [r7, #4]
 8036a04:	2b00      	cmp	r3, #0
 8036a06:	d009      	beq.n	8036a1c <vTaskGetInfo+0xc0>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8036a08:	697b      	ldr	r3, [r7, #20]
 8036a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8036a0c:	4618      	mov	r0, r3
 8036a0e:	f000 f861 	bl	8036ad4 <prvTaskCheckFreeStackSpace>
 8036a12:	4603      	mov	r3, r0
 8036a14:	461a      	mov	r2, r3
 8036a16:	68bb      	ldr	r3, [r7, #8]
 8036a18:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 8036a1a:	e002      	b.n	8036a22 <vTaskGetInfo+0xc6>
			pxTaskStatus->usStackHighWaterMark = 0;
 8036a1c:	68bb      	ldr	r3, [r7, #8]
 8036a1e:	2200      	movs	r2, #0
 8036a20:	841a      	strh	r2, [r3, #32]
	}
 8036a22:	bf00      	nop
 8036a24:	3718      	adds	r7, #24
 8036a26:	46bd      	mov	sp, r7
 8036a28:	bd80      	pop	{r7, pc}
 8036a2a:	bf00      	nop
 8036a2c:	20003e20 	.word	0x20003e20

08036a30 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 8036a30:	b580      	push	{r7, lr}
 8036a32:	b08a      	sub	sp, #40	@ 0x28
 8036a34:	af00      	add	r7, sp, #0
 8036a36:	60f8      	str	r0, [r7, #12]
 8036a38:	60b9      	str	r1, [r7, #8]
 8036a3a:	4613      	mov	r3, r2
 8036a3c:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 8036a3e:	2300      	movs	r3, #0
 8036a40:	627b      	str	r3, [r7, #36]	@ 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8036a42:	68bb      	ldr	r3, [r7, #8]
 8036a44:	681b      	ldr	r3, [r3, #0]
 8036a46:	2b00      	cmp	r3, #0
 8036a48:	d03f      	beq.n	8036aca <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8036a4a:	68bb      	ldr	r3, [r7, #8]
 8036a4c:	623b      	str	r3, [r7, #32]
 8036a4e:	6a3b      	ldr	r3, [r7, #32]
 8036a50:	685b      	ldr	r3, [r3, #4]
 8036a52:	685a      	ldr	r2, [r3, #4]
 8036a54:	6a3b      	ldr	r3, [r7, #32]
 8036a56:	605a      	str	r2, [r3, #4]
 8036a58:	6a3b      	ldr	r3, [r7, #32]
 8036a5a:	685a      	ldr	r2, [r3, #4]
 8036a5c:	6a3b      	ldr	r3, [r7, #32]
 8036a5e:	3308      	adds	r3, #8
 8036a60:	429a      	cmp	r2, r3
 8036a62:	d104      	bne.n	8036a6e <prvListTasksWithinSingleList+0x3e>
 8036a64:	6a3b      	ldr	r3, [r7, #32]
 8036a66:	685b      	ldr	r3, [r3, #4]
 8036a68:	685a      	ldr	r2, [r3, #4]
 8036a6a:	6a3b      	ldr	r3, [r7, #32]
 8036a6c:	605a      	str	r2, [r3, #4]
 8036a6e:	6a3b      	ldr	r3, [r7, #32]
 8036a70:	685b      	ldr	r3, [r3, #4]
 8036a72:	68db      	ldr	r3, [r3, #12]
 8036a74:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8036a76:	68bb      	ldr	r3, [r7, #8]
 8036a78:	61bb      	str	r3, [r7, #24]
 8036a7a:	69bb      	ldr	r3, [r7, #24]
 8036a7c:	685b      	ldr	r3, [r3, #4]
 8036a7e:	685a      	ldr	r2, [r3, #4]
 8036a80:	69bb      	ldr	r3, [r7, #24]
 8036a82:	605a      	str	r2, [r3, #4]
 8036a84:	69bb      	ldr	r3, [r7, #24]
 8036a86:	685a      	ldr	r2, [r3, #4]
 8036a88:	69bb      	ldr	r3, [r7, #24]
 8036a8a:	3308      	adds	r3, #8
 8036a8c:	429a      	cmp	r2, r3
 8036a8e:	d104      	bne.n	8036a9a <prvListTasksWithinSingleList+0x6a>
 8036a90:	69bb      	ldr	r3, [r7, #24]
 8036a92:	685b      	ldr	r3, [r3, #4]
 8036a94:	685a      	ldr	r2, [r3, #4]
 8036a96:	69bb      	ldr	r3, [r7, #24]
 8036a98:	605a      	str	r2, [r3, #4]
 8036a9a:	69bb      	ldr	r3, [r7, #24]
 8036a9c:	685b      	ldr	r3, [r3, #4]
 8036a9e:	68db      	ldr	r3, [r3, #12]
 8036aa0:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8036aa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8036aa4:	4613      	mov	r3, r2
 8036aa6:	00db      	lsls	r3, r3, #3
 8036aa8:	4413      	add	r3, r2
 8036aaa:	009b      	lsls	r3, r3, #2
 8036aac:	461a      	mov	r2, r3
 8036aae:	68fb      	ldr	r3, [r7, #12]
 8036ab0:	1899      	adds	r1, r3, r2
 8036ab2:	79fb      	ldrb	r3, [r7, #7]
 8036ab4:	2201      	movs	r2, #1
 8036ab6:	6978      	ldr	r0, [r7, #20]
 8036ab8:	f7ff ff50 	bl	803695c <vTaskGetInfo>
				uxTask++;
 8036abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8036abe:	3301      	adds	r3, #1
 8036ac0:	627b      	str	r3, [r7, #36]	@ 0x24
			} while( pxNextTCB != pxFirstTCB );
 8036ac2:	697a      	ldr	r2, [r7, #20]
 8036ac4:	69fb      	ldr	r3, [r7, #28]
 8036ac6:	429a      	cmp	r2, r3
 8036ac8:	d1d5      	bne.n	8036a76 <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 8036aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8036acc:	4618      	mov	r0, r3
 8036ace:	3728      	adds	r7, #40	@ 0x28
 8036ad0:	46bd      	mov	sp, r7
 8036ad2:	bd80      	pop	{r7, pc}

08036ad4 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8036ad4:	b480      	push	{r7}
 8036ad6:	b085      	sub	sp, #20
 8036ad8:	af00      	add	r7, sp, #0
 8036ada:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8036adc:	2300      	movs	r3, #0
 8036ade:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8036ae0:	e005      	b.n	8036aee <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8036ae2:	687b      	ldr	r3, [r7, #4]
 8036ae4:	3301      	adds	r3, #1
 8036ae6:	607b      	str	r3, [r7, #4]
			ulCount++;
 8036ae8:	68fb      	ldr	r3, [r7, #12]
 8036aea:	3301      	adds	r3, #1
 8036aec:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8036aee:	687b      	ldr	r3, [r7, #4]
 8036af0:	781b      	ldrb	r3, [r3, #0]
 8036af2:	2ba5      	cmp	r3, #165	@ 0xa5
 8036af4:	d0f5      	beq.n	8036ae2 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8036af6:	68fb      	ldr	r3, [r7, #12]
 8036af8:	089b      	lsrs	r3, r3, #2
 8036afa:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8036afc:	68fb      	ldr	r3, [r7, #12]
 8036afe:	b29b      	uxth	r3, r3
	}
 8036b00:	4618      	mov	r0, r3
 8036b02:	3714      	adds	r7, #20
 8036b04:	46bd      	mov	sp, r7
 8036b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036b0a:	4770      	bx	lr

08036b0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8036b0c:	b580      	push	{r7, lr}
 8036b0e:	b084      	sub	sp, #16
 8036b10:	af00      	add	r7, sp, #0
 8036b12:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8036b14:	687b      	ldr	r3, [r7, #4]
 8036b16:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8036b1a:	4618      	mov	r0, r3
 8036b1c:	f000 fe2a 	bl	8037774 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8036b20:	687b      	ldr	r3, [r7, #4]
 8036b22:	f893 31a1 	ldrb.w	r3, [r3, #417]	@ 0x1a1
 8036b26:	2b00      	cmp	r3, #0
 8036b28:	d108      	bne.n	8036b3c <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8036b2a:	687b      	ldr	r3, [r7, #4]
 8036b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8036b2e:	4618      	mov	r0, r3
 8036b30:	f7fd fdb8 	bl	80346a4 <vPortFree>
				vPortFree( pxTCB );
 8036b34:	6878      	ldr	r0, [r7, #4]
 8036b36:	f7fd fdb5 	bl	80346a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8036b3a:	e019      	b.n	8036b70 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8036b3c:	687b      	ldr	r3, [r7, #4]
 8036b3e:	f893 31a1 	ldrb.w	r3, [r3, #417]	@ 0x1a1
 8036b42:	2b01      	cmp	r3, #1
 8036b44:	d103      	bne.n	8036b4e <prvDeleteTCB+0x42>
				vPortFree( pxTCB );
 8036b46:	6878      	ldr	r0, [r7, #4]
 8036b48:	f7fd fdac 	bl	80346a4 <vPortFree>
	}
 8036b4c:	e010      	b.n	8036b70 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8036b4e:	687b      	ldr	r3, [r7, #4]
 8036b50:	f893 31a1 	ldrb.w	r3, [r3, #417]	@ 0x1a1
 8036b54:	2b02      	cmp	r3, #2
 8036b56:	d00b      	beq.n	8036b70 <prvDeleteTCB+0x64>
	__asm volatile
 8036b58:	f04f 0310 	mov.w	r3, #16
 8036b5c:	f383 8811 	msr	BASEPRI, r3
 8036b60:	f3bf 8f6f 	isb	sy
 8036b64:	f3bf 8f4f 	dsb	sy
 8036b68:	60fb      	str	r3, [r7, #12]
}
 8036b6a:	bf00      	nop
 8036b6c:	bf00      	nop
 8036b6e:	e7fd      	b.n	8036b6c <prvDeleteTCB+0x60>
	}
 8036b70:	bf00      	nop
 8036b72:	3710      	adds	r7, #16
 8036b74:	46bd      	mov	sp, r7
 8036b76:	bd80      	pop	{r7, pc}

08036b78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8036b78:	b480      	push	{r7}
 8036b7a:	b083      	sub	sp, #12
 8036b7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8036b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8036bb0 <prvResetNextTaskUnblockTime+0x38>)
 8036b80:	681b      	ldr	r3, [r3, #0]
 8036b82:	681b      	ldr	r3, [r3, #0]
 8036b84:	2b00      	cmp	r3, #0
 8036b86:	d104      	bne.n	8036b92 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8036b88:	4b0a      	ldr	r3, [pc, #40]	@ (8036bb4 <prvResetNextTaskUnblockTime+0x3c>)
 8036b8a:	f04f 32ff 	mov.w	r2, #4294967295
 8036b8e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8036b90:	e008      	b.n	8036ba4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8036b92:	4b07      	ldr	r3, [pc, #28]	@ (8036bb0 <prvResetNextTaskUnblockTime+0x38>)
 8036b94:	681b      	ldr	r3, [r3, #0]
 8036b96:	68db      	ldr	r3, [r3, #12]
 8036b98:	68db      	ldr	r3, [r3, #12]
 8036b9a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8036b9c:	687b      	ldr	r3, [r7, #4]
 8036b9e:	685b      	ldr	r3, [r3, #4]
 8036ba0:	4a04      	ldr	r2, [pc, #16]	@ (8036bb4 <prvResetNextTaskUnblockTime+0x3c>)
 8036ba2:	6013      	str	r3, [r2, #0]
}
 8036ba4:	bf00      	nop
 8036ba6:	370c      	adds	r7, #12
 8036ba8:	46bd      	mov	sp, r7
 8036baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036bae:	4770      	bx	lr
 8036bb0:	200042ac 	.word	0x200042ac
 8036bb4:	20004318 	.word	0x20004318

08036bb8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8036bb8:	b480      	push	{r7}
 8036bba:	b083      	sub	sp, #12
 8036bbc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8036bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8036bec <xTaskGetSchedulerState+0x34>)
 8036bc0:	681b      	ldr	r3, [r3, #0]
 8036bc2:	2b00      	cmp	r3, #0
 8036bc4:	d102      	bne.n	8036bcc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8036bc6:	2301      	movs	r3, #1
 8036bc8:	607b      	str	r3, [r7, #4]
 8036bca:	e008      	b.n	8036bde <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8036bcc:	4b08      	ldr	r3, [pc, #32]	@ (8036bf0 <xTaskGetSchedulerState+0x38>)
 8036bce:	681b      	ldr	r3, [r3, #0]
 8036bd0:	2b00      	cmp	r3, #0
 8036bd2:	d102      	bne.n	8036bda <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8036bd4:	2302      	movs	r3, #2
 8036bd6:	607b      	str	r3, [r7, #4]
 8036bd8:	e001      	b.n	8036bde <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8036bda:	2300      	movs	r3, #0
 8036bdc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8036bde:	687b      	ldr	r3, [r7, #4]
	}
 8036be0:	4618      	mov	r0, r3
 8036be2:	370c      	adds	r7, #12
 8036be4:	46bd      	mov	sp, r7
 8036be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036bea:	4770      	bx	lr
 8036bec:	20004304 	.word	0x20004304
 8036bf0:	20004320 	.word	0x20004320

08036bf4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8036bf4:	b580      	push	{r7, lr}
 8036bf6:	b086      	sub	sp, #24
 8036bf8:	af00      	add	r7, sp, #0
 8036bfa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8036bfc:	687b      	ldr	r3, [r7, #4]
 8036bfe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8036c00:	2300      	movs	r3, #0
 8036c02:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8036c04:	687b      	ldr	r3, [r7, #4]
 8036c06:	2b00      	cmp	r3, #0
 8036c08:	d05e      	beq.n	8036cc8 <xTaskPriorityDisinherit+0xd4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8036c0a:	4b32      	ldr	r3, [pc, #200]	@ (8036cd4 <xTaskPriorityDisinherit+0xe0>)
 8036c0c:	681b      	ldr	r3, [r3, #0]
 8036c0e:	693a      	ldr	r2, [r7, #16]
 8036c10:	429a      	cmp	r2, r3
 8036c12:	d00b      	beq.n	8036c2c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8036c14:	f04f 0310 	mov.w	r3, #16
 8036c18:	f383 8811 	msr	BASEPRI, r3
 8036c1c:	f3bf 8f6f 	isb	sy
 8036c20:	f3bf 8f4f 	dsb	sy
 8036c24:	60fb      	str	r3, [r7, #12]
}
 8036c26:	bf00      	nop
 8036c28:	bf00      	nop
 8036c2a:	e7fd      	b.n	8036c28 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8036c2c:	693b      	ldr	r3, [r7, #16]
 8036c2e:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8036c32:	2b00      	cmp	r3, #0
 8036c34:	d10b      	bne.n	8036c4e <xTaskPriorityDisinherit+0x5a>
	__asm volatile
 8036c36:	f04f 0310 	mov.w	r3, #16
 8036c3a:	f383 8811 	msr	BASEPRI, r3
 8036c3e:	f3bf 8f6f 	isb	sy
 8036c42:	f3bf 8f4f 	dsb	sy
 8036c46:	60bb      	str	r3, [r7, #8]
}
 8036c48:	bf00      	nop
 8036c4a:	bf00      	nop
 8036c4c:	e7fd      	b.n	8036c4a <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8036c4e:	693b      	ldr	r3, [r7, #16]
 8036c50:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8036c54:	1e5a      	subs	r2, r3, #1
 8036c56:	693b      	ldr	r3, [r7, #16]
 8036c58:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8036c5c:	693b      	ldr	r3, [r7, #16]
 8036c5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8036c60:	693b      	ldr	r3, [r7, #16]
 8036c62:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8036c66:	429a      	cmp	r2, r3
 8036c68:	d02e      	beq.n	8036cc8 <xTaskPriorityDisinherit+0xd4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8036c6a:	693b      	ldr	r3, [r7, #16]
 8036c6c:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8036c70:	2b00      	cmp	r3, #0
 8036c72:	d129      	bne.n	8036cc8 <xTaskPriorityDisinherit+0xd4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8036c74:	693b      	ldr	r3, [r7, #16]
 8036c76:	3304      	adds	r3, #4
 8036c78:	4618      	mov	r0, r3
 8036c7a:	f7fd febd 	bl	80349f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8036c7e:	693b      	ldr	r3, [r7, #16]
 8036c80:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8036c84:	693b      	ldr	r3, [r7, #16]
 8036c86:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8036c88:	693b      	ldr	r3, [r7, #16]
 8036c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8036c8c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8036c90:	693b      	ldr	r3, [r7, #16]
 8036c92:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8036c94:	693b      	ldr	r3, [r7, #16]
 8036c96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8036c98:	4b0f      	ldr	r3, [pc, #60]	@ (8036cd8 <xTaskPriorityDisinherit+0xe4>)
 8036c9a:	681b      	ldr	r3, [r3, #0]
 8036c9c:	429a      	cmp	r2, r3
 8036c9e:	d903      	bls.n	8036ca8 <xTaskPriorityDisinherit+0xb4>
 8036ca0:	693b      	ldr	r3, [r7, #16]
 8036ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8036ca4:	4a0c      	ldr	r2, [pc, #48]	@ (8036cd8 <xTaskPriorityDisinherit+0xe4>)
 8036ca6:	6013      	str	r3, [r2, #0]
 8036ca8:	693b      	ldr	r3, [r7, #16]
 8036caa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8036cac:	4613      	mov	r3, r2
 8036cae:	009b      	lsls	r3, r3, #2
 8036cb0:	4413      	add	r3, r2
 8036cb2:	009b      	lsls	r3, r3, #2
 8036cb4:	4a09      	ldr	r2, [pc, #36]	@ (8036cdc <xTaskPriorityDisinherit+0xe8>)
 8036cb6:	441a      	add	r2, r3
 8036cb8:	693b      	ldr	r3, [r7, #16]
 8036cba:	3304      	adds	r3, #4
 8036cbc:	4619      	mov	r1, r3
 8036cbe:	4610      	mov	r0, r2
 8036cc0:	f7fd fe3d 	bl	803493e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8036cc4:	2301      	movs	r3, #1
 8036cc6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8036cc8:	697b      	ldr	r3, [r7, #20]
	}
 8036cca:	4618      	mov	r0, r3
 8036ccc:	3718      	adds	r7, #24
 8036cce:	46bd      	mov	sp, r7
 8036cd0:	bd80      	pop	{r7, pc}
 8036cd2:	bf00      	nop
 8036cd4:	20003e20 	.word	0x20003e20
 8036cd8:	20004300 	.word	0x20004300
 8036cdc:	20003e24 	.word	0x20003e24

08036ce0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8036ce0:	b580      	push	{r7, lr}
 8036ce2:	b084      	sub	sp, #16
 8036ce4:	af00      	add	r7, sp, #0
 8036ce6:	6078      	str	r0, [r7, #4]
 8036ce8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8036cea:	4b24      	ldr	r3, [pc, #144]	@ (8036d7c <prvAddCurrentTaskToDelayedList+0x9c>)
 8036cec:	681b      	ldr	r3, [r3, #0]
 8036cee:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8036cf0:	4b23      	ldr	r3, [pc, #140]	@ (8036d80 <prvAddCurrentTaskToDelayedList+0xa0>)
 8036cf2:	681b      	ldr	r3, [r3, #0]
 8036cf4:	2200      	movs	r2, #0
 8036cf6:	f883 21a2 	strb.w	r2, [r3, #418]	@ 0x1a2
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8036cfa:	4b21      	ldr	r3, [pc, #132]	@ (8036d80 <prvAddCurrentTaskToDelayedList+0xa0>)
 8036cfc:	681b      	ldr	r3, [r3, #0]
 8036cfe:	3304      	adds	r3, #4
 8036d00:	4618      	mov	r0, r3
 8036d02:	f7fd fe79 	bl	80349f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8036d06:	687b      	ldr	r3, [r7, #4]
 8036d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8036d0c:	d10a      	bne.n	8036d24 <prvAddCurrentTaskToDelayedList+0x44>
 8036d0e:	683b      	ldr	r3, [r7, #0]
 8036d10:	2b00      	cmp	r3, #0
 8036d12:	d007      	beq.n	8036d24 <prvAddCurrentTaskToDelayedList+0x44>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8036d14:	4b1a      	ldr	r3, [pc, #104]	@ (8036d80 <prvAddCurrentTaskToDelayedList+0xa0>)
 8036d16:	681b      	ldr	r3, [r3, #0]
 8036d18:	3304      	adds	r3, #4
 8036d1a:	4619      	mov	r1, r3
 8036d1c:	4819      	ldr	r0, [pc, #100]	@ (8036d84 <prvAddCurrentTaskToDelayedList+0xa4>)
 8036d1e:	f7fd fe0e 	bl	803493e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8036d22:	e026      	b.n	8036d72 <prvAddCurrentTaskToDelayedList+0x92>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8036d24:	68fa      	ldr	r2, [r7, #12]
 8036d26:	687b      	ldr	r3, [r7, #4]
 8036d28:	4413      	add	r3, r2
 8036d2a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8036d2c:	4b14      	ldr	r3, [pc, #80]	@ (8036d80 <prvAddCurrentTaskToDelayedList+0xa0>)
 8036d2e:	681b      	ldr	r3, [r3, #0]
 8036d30:	68ba      	ldr	r2, [r7, #8]
 8036d32:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8036d34:	68ba      	ldr	r2, [r7, #8]
 8036d36:	68fb      	ldr	r3, [r7, #12]
 8036d38:	429a      	cmp	r2, r3
 8036d3a:	d209      	bcs.n	8036d50 <prvAddCurrentTaskToDelayedList+0x70>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8036d3c:	4b12      	ldr	r3, [pc, #72]	@ (8036d88 <prvAddCurrentTaskToDelayedList+0xa8>)
 8036d3e:	681a      	ldr	r2, [r3, #0]
 8036d40:	4b0f      	ldr	r3, [pc, #60]	@ (8036d80 <prvAddCurrentTaskToDelayedList+0xa0>)
 8036d42:	681b      	ldr	r3, [r3, #0]
 8036d44:	3304      	adds	r3, #4
 8036d46:	4619      	mov	r1, r3
 8036d48:	4610      	mov	r0, r2
 8036d4a:	f7fd fe1c 	bl	8034986 <vListInsert>
}
 8036d4e:	e010      	b.n	8036d72 <prvAddCurrentTaskToDelayedList+0x92>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8036d50:	4b0e      	ldr	r3, [pc, #56]	@ (8036d8c <prvAddCurrentTaskToDelayedList+0xac>)
 8036d52:	681a      	ldr	r2, [r3, #0]
 8036d54:	4b0a      	ldr	r3, [pc, #40]	@ (8036d80 <prvAddCurrentTaskToDelayedList+0xa0>)
 8036d56:	681b      	ldr	r3, [r3, #0]
 8036d58:	3304      	adds	r3, #4
 8036d5a:	4619      	mov	r1, r3
 8036d5c:	4610      	mov	r0, r2
 8036d5e:	f7fd fe12 	bl	8034986 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8036d62:	4b0b      	ldr	r3, [pc, #44]	@ (8036d90 <prvAddCurrentTaskToDelayedList+0xb0>)
 8036d64:	681b      	ldr	r3, [r3, #0]
 8036d66:	68ba      	ldr	r2, [r7, #8]
 8036d68:	429a      	cmp	r2, r3
 8036d6a:	d202      	bcs.n	8036d72 <prvAddCurrentTaskToDelayedList+0x92>
					xNextTaskUnblockTime = xTimeToWake;
 8036d6c:	4a08      	ldr	r2, [pc, #32]	@ (8036d90 <prvAddCurrentTaskToDelayedList+0xb0>)
 8036d6e:	68bb      	ldr	r3, [r7, #8]
 8036d70:	6013      	str	r3, [r2, #0]
}
 8036d72:	bf00      	nop
 8036d74:	3710      	adds	r7, #16
 8036d76:	46bd      	mov	sp, r7
 8036d78:	bd80      	pop	{r7, pc}
 8036d7a:	bf00      	nop
 8036d7c:	200042fc 	.word	0x200042fc
 8036d80:	20003e20 	.word	0x20003e20
 8036d84:	200042e0 	.word	0x200042e0
 8036d88:	200042b0 	.word	0x200042b0
 8036d8c:	200042ac 	.word	0x200042ac
 8036d90:	20004318 	.word	0x20004318

08036d94 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8036d94:	b580      	push	{r7, lr}
 8036d96:	b08a      	sub	sp, #40	@ 0x28
 8036d98:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8036d9a:	2300      	movs	r3, #0
 8036d9c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8036d9e:	f000 fbb1 	bl	8037504 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8036da2:	4b1d      	ldr	r3, [pc, #116]	@ (8036e18 <xTimerCreateTimerTask+0x84>)
 8036da4:	681b      	ldr	r3, [r3, #0]
 8036da6:	2b00      	cmp	r3, #0
 8036da8:	d021      	beq.n	8036dee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8036daa:	2300      	movs	r3, #0
 8036dac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8036dae:	2300      	movs	r3, #0
 8036db0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8036db2:	1d3a      	adds	r2, r7, #4
 8036db4:	f107 0108 	add.w	r1, r7, #8
 8036db8:	f107 030c 	add.w	r3, r7, #12
 8036dbc:	4618      	mov	r0, r3
 8036dbe:	f7fd fb83 	bl	80344c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8036dc2:	6879      	ldr	r1, [r7, #4]
 8036dc4:	68bb      	ldr	r3, [r7, #8]
 8036dc6:	68fa      	ldr	r2, [r7, #12]
 8036dc8:	9202      	str	r2, [sp, #8]
 8036dca:	9301      	str	r3, [sp, #4]
 8036dcc:	2337      	movs	r3, #55	@ 0x37
 8036dce:	9300      	str	r3, [sp, #0]
 8036dd0:	2300      	movs	r3, #0
 8036dd2:	460a      	mov	r2, r1
 8036dd4:	4911      	ldr	r1, [pc, #68]	@ (8036e1c <xTimerCreateTimerTask+0x88>)
 8036dd6:	4812      	ldr	r0, [pc, #72]	@ (8036e20 <xTimerCreateTimerTask+0x8c>)
 8036dd8:	f7fe fd82 	bl	80358e0 <xTaskCreateStatic>
 8036ddc:	4603      	mov	r3, r0
 8036dde:	4a11      	ldr	r2, [pc, #68]	@ (8036e24 <xTimerCreateTimerTask+0x90>)
 8036de0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8036de2:	4b10      	ldr	r3, [pc, #64]	@ (8036e24 <xTimerCreateTimerTask+0x90>)
 8036de4:	681b      	ldr	r3, [r3, #0]
 8036de6:	2b00      	cmp	r3, #0
 8036de8:	d001      	beq.n	8036dee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8036dea:	2301      	movs	r3, #1
 8036dec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8036dee:	697b      	ldr	r3, [r7, #20]
 8036df0:	2b00      	cmp	r3, #0
 8036df2:	d10b      	bne.n	8036e0c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8036df4:	f04f 0310 	mov.w	r3, #16
 8036df8:	f383 8811 	msr	BASEPRI, r3
 8036dfc:	f3bf 8f6f 	isb	sy
 8036e00:	f3bf 8f4f 	dsb	sy
 8036e04:	613b      	str	r3, [r7, #16]
}
 8036e06:	bf00      	nop
 8036e08:	bf00      	nop
 8036e0a:	e7fd      	b.n	8036e08 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8036e0c:	697b      	ldr	r3, [r7, #20]
}
 8036e0e:	4618      	mov	r0, r3
 8036e10:	3718      	adds	r7, #24
 8036e12:	46bd      	mov	sp, r7
 8036e14:	bd80      	pop	{r7, pc}
 8036e16:	bf00      	nop
 8036e18:	2000435c 	.word	0x2000435c
 8036e1c:	080388f0 	.word	0x080388f0
 8036e20:	0803709d 	.word	0x0803709d
 8036e24:	20004360 	.word	0x20004360

08036e28 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8036e28:	b580      	push	{r7, lr}
 8036e2a:	b088      	sub	sp, #32
 8036e2c:	af02      	add	r7, sp, #8
 8036e2e:	60f8      	str	r0, [r7, #12]
 8036e30:	60b9      	str	r1, [r7, #8]
 8036e32:	607a      	str	r2, [r7, #4]
 8036e34:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8036e36:	202c      	movs	r0, #44	@ 0x2c
 8036e38:	f7fd fb60 	bl	80344fc <pvPortMalloc>
 8036e3c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8036e3e:	697b      	ldr	r3, [r7, #20]
 8036e40:	2b00      	cmp	r3, #0
 8036e42:	d00d      	beq.n	8036e60 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8036e44:	697b      	ldr	r3, [r7, #20]
 8036e46:	2200      	movs	r2, #0
 8036e48:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8036e4c:	697b      	ldr	r3, [r7, #20]
 8036e4e:	9301      	str	r3, [sp, #4]
 8036e50:	6a3b      	ldr	r3, [r7, #32]
 8036e52:	9300      	str	r3, [sp, #0]
 8036e54:	683b      	ldr	r3, [r7, #0]
 8036e56:	687a      	ldr	r2, [r7, #4]
 8036e58:	68b9      	ldr	r1, [r7, #8]
 8036e5a:	68f8      	ldr	r0, [r7, #12]
 8036e5c:	f000 f845 	bl	8036eea <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8036e60:	697b      	ldr	r3, [r7, #20]
	}
 8036e62:	4618      	mov	r0, r3
 8036e64:	3718      	adds	r7, #24
 8036e66:	46bd      	mov	sp, r7
 8036e68:	bd80      	pop	{r7, pc}

08036e6a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8036e6a:	b580      	push	{r7, lr}
 8036e6c:	b08a      	sub	sp, #40	@ 0x28
 8036e6e:	af02      	add	r7, sp, #8
 8036e70:	60f8      	str	r0, [r7, #12]
 8036e72:	60b9      	str	r1, [r7, #8]
 8036e74:	607a      	str	r2, [r7, #4]
 8036e76:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8036e78:	232c      	movs	r3, #44	@ 0x2c
 8036e7a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8036e7c:	693b      	ldr	r3, [r7, #16]
 8036e7e:	2b2c      	cmp	r3, #44	@ 0x2c
 8036e80:	d00b      	beq.n	8036e9a <xTimerCreateStatic+0x30>
	__asm volatile
 8036e82:	f04f 0310 	mov.w	r3, #16
 8036e86:	f383 8811 	msr	BASEPRI, r3
 8036e8a:	f3bf 8f6f 	isb	sy
 8036e8e:	f3bf 8f4f 	dsb	sy
 8036e92:	61bb      	str	r3, [r7, #24]
}
 8036e94:	bf00      	nop
 8036e96:	bf00      	nop
 8036e98:	e7fd      	b.n	8036e96 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8036e9a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8036e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8036e9e:	2b00      	cmp	r3, #0
 8036ea0:	d10b      	bne.n	8036eba <xTimerCreateStatic+0x50>
	__asm volatile
 8036ea2:	f04f 0310 	mov.w	r3, #16
 8036ea6:	f383 8811 	msr	BASEPRI, r3
 8036eaa:	f3bf 8f6f 	isb	sy
 8036eae:	f3bf 8f4f 	dsb	sy
 8036eb2:	617b      	str	r3, [r7, #20]
}
 8036eb4:	bf00      	nop
 8036eb6:	bf00      	nop
 8036eb8:	e7fd      	b.n	8036eb6 <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8036eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8036ebc:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8036ebe:	69fb      	ldr	r3, [r7, #28]
 8036ec0:	2b00      	cmp	r3, #0
 8036ec2:	d00d      	beq.n	8036ee0 <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8036ec4:	69fb      	ldr	r3, [r7, #28]
 8036ec6:	2202      	movs	r2, #2
 8036ec8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8036ecc:	69fb      	ldr	r3, [r7, #28]
 8036ece:	9301      	str	r3, [sp, #4]
 8036ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8036ed2:	9300      	str	r3, [sp, #0]
 8036ed4:	683b      	ldr	r3, [r7, #0]
 8036ed6:	687a      	ldr	r2, [r7, #4]
 8036ed8:	68b9      	ldr	r1, [r7, #8]
 8036eda:	68f8      	ldr	r0, [r7, #12]
 8036edc:	f000 f805 	bl	8036eea <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8036ee0:	69fb      	ldr	r3, [r7, #28]
	}
 8036ee2:	4618      	mov	r0, r3
 8036ee4:	3720      	adds	r7, #32
 8036ee6:	46bd      	mov	sp, r7
 8036ee8:	bd80      	pop	{r7, pc}

08036eea <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8036eea:	b580      	push	{r7, lr}
 8036eec:	b086      	sub	sp, #24
 8036eee:	af00      	add	r7, sp, #0
 8036ef0:	60f8      	str	r0, [r7, #12]
 8036ef2:	60b9      	str	r1, [r7, #8]
 8036ef4:	607a      	str	r2, [r7, #4]
 8036ef6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8036ef8:	68bb      	ldr	r3, [r7, #8]
 8036efa:	2b00      	cmp	r3, #0
 8036efc:	d10b      	bne.n	8036f16 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 8036efe:	f04f 0310 	mov.w	r3, #16
 8036f02:	f383 8811 	msr	BASEPRI, r3
 8036f06:	f3bf 8f6f 	isb	sy
 8036f0a:	f3bf 8f4f 	dsb	sy
 8036f0e:	617b      	str	r3, [r7, #20]
}
 8036f10:	bf00      	nop
 8036f12:	bf00      	nop
 8036f14:	e7fd      	b.n	8036f12 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8036f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8036f18:	2b00      	cmp	r3, #0
 8036f1a:	d01e      	beq.n	8036f5a <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8036f1c:	f000 faf2 	bl	8037504 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8036f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8036f22:	68fa      	ldr	r2, [r7, #12]
 8036f24:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8036f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8036f28:	68ba      	ldr	r2, [r7, #8]
 8036f2a:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8036f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8036f2e:	683a      	ldr	r2, [r7, #0]
 8036f30:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8036f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8036f34:	6a3a      	ldr	r2, [r7, #32]
 8036f36:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8036f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8036f3a:	3304      	adds	r3, #4
 8036f3c:	4618      	mov	r0, r3
 8036f3e:	f7fd fcf1 	bl	8034924 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8036f42:	687b      	ldr	r3, [r7, #4]
 8036f44:	2b00      	cmp	r3, #0
 8036f46:	d008      	beq.n	8036f5a <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8036f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8036f4a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8036f4e:	f043 0304 	orr.w	r3, r3, #4
 8036f52:	b2da      	uxtb	r2, r3
 8036f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8036f56:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8036f5a:	bf00      	nop
 8036f5c:	3718      	adds	r7, #24
 8036f5e:	46bd      	mov	sp, r7
 8036f60:	bd80      	pop	{r7, pc}
	...

08036f64 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8036f64:	b580      	push	{r7, lr}
 8036f66:	b08a      	sub	sp, #40	@ 0x28
 8036f68:	af00      	add	r7, sp, #0
 8036f6a:	60f8      	str	r0, [r7, #12]
 8036f6c:	60b9      	str	r1, [r7, #8]
 8036f6e:	607a      	str	r2, [r7, #4]
 8036f70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8036f72:	2300      	movs	r3, #0
 8036f74:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8036f76:	68fb      	ldr	r3, [r7, #12]
 8036f78:	2b00      	cmp	r3, #0
 8036f7a:	d10b      	bne.n	8036f94 <xTimerGenericCommand+0x30>
	__asm volatile
 8036f7c:	f04f 0310 	mov.w	r3, #16
 8036f80:	f383 8811 	msr	BASEPRI, r3
 8036f84:	f3bf 8f6f 	isb	sy
 8036f88:	f3bf 8f4f 	dsb	sy
 8036f8c:	623b      	str	r3, [r7, #32]
}
 8036f8e:	bf00      	nop
 8036f90:	bf00      	nop
 8036f92:	e7fd      	b.n	8036f90 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8036f94:	4b19      	ldr	r3, [pc, #100]	@ (8036ffc <xTimerGenericCommand+0x98>)
 8036f96:	681b      	ldr	r3, [r3, #0]
 8036f98:	2b00      	cmp	r3, #0
 8036f9a:	d02a      	beq.n	8036ff2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8036f9c:	68bb      	ldr	r3, [r7, #8]
 8036f9e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8036fa0:	687b      	ldr	r3, [r7, #4]
 8036fa2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8036fa4:	68fb      	ldr	r3, [r7, #12]
 8036fa6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8036fa8:	68bb      	ldr	r3, [r7, #8]
 8036faa:	2b05      	cmp	r3, #5
 8036fac:	dc18      	bgt.n	8036fe0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8036fae:	f7ff fe03 	bl	8036bb8 <xTaskGetSchedulerState>
 8036fb2:	4603      	mov	r3, r0
 8036fb4:	2b02      	cmp	r3, #2
 8036fb6:	d109      	bne.n	8036fcc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8036fb8:	4b10      	ldr	r3, [pc, #64]	@ (8036ffc <xTimerGenericCommand+0x98>)
 8036fba:	6818      	ldr	r0, [r3, #0]
 8036fbc:	f107 0110 	add.w	r1, r7, #16
 8036fc0:	2300      	movs	r3, #0
 8036fc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8036fc4:	f7fe f89c 	bl	8035100 <xQueueGenericSend>
 8036fc8:	6278      	str	r0, [r7, #36]	@ 0x24
 8036fca:	e012      	b.n	8036ff2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8036fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8036ffc <xTimerGenericCommand+0x98>)
 8036fce:	6818      	ldr	r0, [r3, #0]
 8036fd0:	f107 0110 	add.w	r1, r7, #16
 8036fd4:	2300      	movs	r3, #0
 8036fd6:	2200      	movs	r2, #0
 8036fd8:	f7fe f892 	bl	8035100 <xQueueGenericSend>
 8036fdc:	6278      	str	r0, [r7, #36]	@ 0x24
 8036fde:	e008      	b.n	8036ff2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8036fe0:	4b06      	ldr	r3, [pc, #24]	@ (8036ffc <xTimerGenericCommand+0x98>)
 8036fe2:	6818      	ldr	r0, [r3, #0]
 8036fe4:	f107 0110 	add.w	r1, r7, #16
 8036fe8:	2300      	movs	r3, #0
 8036fea:	683a      	ldr	r2, [r7, #0]
 8036fec:	f7fe f98a 	bl	8035304 <xQueueGenericSendFromISR>
 8036ff0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8036ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8036ff4:	4618      	mov	r0, r3
 8036ff6:	3728      	adds	r7, #40	@ 0x28
 8036ff8:	46bd      	mov	sp, r7
 8036ffa:	bd80      	pop	{r7, pc}
 8036ffc:	2000435c 	.word	0x2000435c

08037000 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8037000:	b580      	push	{r7, lr}
 8037002:	b088      	sub	sp, #32
 8037004:	af02      	add	r7, sp, #8
 8037006:	6078      	str	r0, [r7, #4]
 8037008:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 803700a:	4b23      	ldr	r3, [pc, #140]	@ (8037098 <prvProcessExpiredTimer+0x98>)
 803700c:	681b      	ldr	r3, [r3, #0]
 803700e:	68db      	ldr	r3, [r3, #12]
 8037010:	68db      	ldr	r3, [r3, #12]
 8037012:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8037014:	697b      	ldr	r3, [r7, #20]
 8037016:	3304      	adds	r3, #4
 8037018:	4618      	mov	r0, r3
 803701a:	f7fd fced 	bl	80349f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 803701e:	697b      	ldr	r3, [r7, #20]
 8037020:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8037024:	f003 0304 	and.w	r3, r3, #4
 8037028:	2b00      	cmp	r3, #0
 803702a:	d023      	beq.n	8037074 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 803702c:	697b      	ldr	r3, [r7, #20]
 803702e:	699a      	ldr	r2, [r3, #24]
 8037030:	687b      	ldr	r3, [r7, #4]
 8037032:	18d1      	adds	r1, r2, r3
 8037034:	687b      	ldr	r3, [r7, #4]
 8037036:	683a      	ldr	r2, [r7, #0]
 8037038:	6978      	ldr	r0, [r7, #20]
 803703a:	f000 f8d5 	bl	80371e8 <prvInsertTimerInActiveList>
 803703e:	4603      	mov	r3, r0
 8037040:	2b00      	cmp	r3, #0
 8037042:	d020      	beq.n	8037086 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8037044:	2300      	movs	r3, #0
 8037046:	9300      	str	r3, [sp, #0]
 8037048:	2300      	movs	r3, #0
 803704a:	687a      	ldr	r2, [r7, #4]
 803704c:	2100      	movs	r1, #0
 803704e:	6978      	ldr	r0, [r7, #20]
 8037050:	f7ff ff88 	bl	8036f64 <xTimerGenericCommand>
 8037054:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8037056:	693b      	ldr	r3, [r7, #16]
 8037058:	2b00      	cmp	r3, #0
 803705a:	d114      	bne.n	8037086 <prvProcessExpiredTimer+0x86>
	__asm volatile
 803705c:	f04f 0310 	mov.w	r3, #16
 8037060:	f383 8811 	msr	BASEPRI, r3
 8037064:	f3bf 8f6f 	isb	sy
 8037068:	f3bf 8f4f 	dsb	sy
 803706c:	60fb      	str	r3, [r7, #12]
}
 803706e:	bf00      	nop
 8037070:	bf00      	nop
 8037072:	e7fd      	b.n	8037070 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8037074:	697b      	ldr	r3, [r7, #20]
 8037076:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 803707a:	f023 0301 	bic.w	r3, r3, #1
 803707e:	b2da      	uxtb	r2, r3
 8037080:	697b      	ldr	r3, [r7, #20]
 8037082:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8037086:	697b      	ldr	r3, [r7, #20]
 8037088:	6a1b      	ldr	r3, [r3, #32]
 803708a:	6978      	ldr	r0, [r7, #20]
 803708c:	4798      	blx	r3
}
 803708e:	bf00      	nop
 8037090:	3718      	adds	r7, #24
 8037092:	46bd      	mov	sp, r7
 8037094:	bd80      	pop	{r7, pc}
 8037096:	bf00      	nop
 8037098:	20004354 	.word	0x20004354

0803709c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 803709c:	b580      	push	{r7, lr}
 803709e:	b084      	sub	sp, #16
 80370a0:	af00      	add	r7, sp, #0
 80370a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80370a4:	f107 0308 	add.w	r3, r7, #8
 80370a8:	4618      	mov	r0, r3
 80370aa:	f000 f859 	bl	8037160 <prvGetNextExpireTime>
 80370ae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80370b0:	68bb      	ldr	r3, [r7, #8]
 80370b2:	4619      	mov	r1, r3
 80370b4:	68f8      	ldr	r0, [r7, #12]
 80370b6:	f000 f805 	bl	80370c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80370ba:	f000 f8d7 	bl	803726c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80370be:	bf00      	nop
 80370c0:	e7f0      	b.n	80370a4 <prvTimerTask+0x8>
	...

080370c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80370c4:	b580      	push	{r7, lr}
 80370c6:	b084      	sub	sp, #16
 80370c8:	af00      	add	r7, sp, #0
 80370ca:	6078      	str	r0, [r7, #4]
 80370cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80370ce:	f7fe ffc1 	bl	8036054 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80370d2:	f107 0308 	add.w	r3, r7, #8
 80370d6:	4618      	mov	r0, r3
 80370d8:	f000 f866 	bl	80371a8 <prvSampleTimeNow>
 80370dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80370de:	68bb      	ldr	r3, [r7, #8]
 80370e0:	2b00      	cmp	r3, #0
 80370e2:	d130      	bne.n	8037146 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80370e4:	683b      	ldr	r3, [r7, #0]
 80370e6:	2b00      	cmp	r3, #0
 80370e8:	d10a      	bne.n	8037100 <prvProcessTimerOrBlockTask+0x3c>
 80370ea:	687a      	ldr	r2, [r7, #4]
 80370ec:	68fb      	ldr	r3, [r7, #12]
 80370ee:	429a      	cmp	r2, r3
 80370f0:	d806      	bhi.n	8037100 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80370f2:	f7fe ffbd 	bl	8036070 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80370f6:	68f9      	ldr	r1, [r7, #12]
 80370f8:	6878      	ldr	r0, [r7, #4]
 80370fa:	f7ff ff81 	bl	8037000 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80370fe:	e024      	b.n	803714a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8037100:	683b      	ldr	r3, [r7, #0]
 8037102:	2b00      	cmp	r3, #0
 8037104:	d008      	beq.n	8037118 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8037106:	4b13      	ldr	r3, [pc, #76]	@ (8037154 <prvProcessTimerOrBlockTask+0x90>)
 8037108:	681b      	ldr	r3, [r3, #0]
 803710a:	681b      	ldr	r3, [r3, #0]
 803710c:	2b00      	cmp	r3, #0
 803710e:	d101      	bne.n	8037114 <prvProcessTimerOrBlockTask+0x50>
 8037110:	2301      	movs	r3, #1
 8037112:	e000      	b.n	8037116 <prvProcessTimerOrBlockTask+0x52>
 8037114:	2300      	movs	r3, #0
 8037116:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8037118:	4b0f      	ldr	r3, [pc, #60]	@ (8037158 <prvProcessTimerOrBlockTask+0x94>)
 803711a:	6818      	ldr	r0, [r3, #0]
 803711c:	687a      	ldr	r2, [r7, #4]
 803711e:	68fb      	ldr	r3, [r7, #12]
 8037120:	1ad3      	subs	r3, r2, r3
 8037122:	683a      	ldr	r2, [r7, #0]
 8037124:	4619      	mov	r1, r3
 8037126:	f7fe fba7 	bl	8035878 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 803712a:	f7fe ffa1 	bl	8036070 <xTaskResumeAll>
 803712e:	4603      	mov	r3, r0
 8037130:	2b00      	cmp	r3, #0
 8037132:	d10a      	bne.n	803714a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8037134:	4b09      	ldr	r3, [pc, #36]	@ (803715c <prvProcessTimerOrBlockTask+0x98>)
 8037136:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 803713a:	601a      	str	r2, [r3, #0]
 803713c:	f3bf 8f4f 	dsb	sy
 8037140:	f3bf 8f6f 	isb	sy
}
 8037144:	e001      	b.n	803714a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8037146:	f7fe ff93 	bl	8036070 <xTaskResumeAll>
}
 803714a:	bf00      	nop
 803714c:	3710      	adds	r7, #16
 803714e:	46bd      	mov	sp, r7
 8037150:	bd80      	pop	{r7, pc}
 8037152:	bf00      	nop
 8037154:	20004358 	.word	0x20004358
 8037158:	2000435c 	.word	0x2000435c
 803715c:	e000ed04 	.word	0xe000ed04

08037160 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8037160:	b480      	push	{r7}
 8037162:	b085      	sub	sp, #20
 8037164:	af00      	add	r7, sp, #0
 8037166:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8037168:	4b0e      	ldr	r3, [pc, #56]	@ (80371a4 <prvGetNextExpireTime+0x44>)
 803716a:	681b      	ldr	r3, [r3, #0]
 803716c:	681b      	ldr	r3, [r3, #0]
 803716e:	2b00      	cmp	r3, #0
 8037170:	d101      	bne.n	8037176 <prvGetNextExpireTime+0x16>
 8037172:	2201      	movs	r2, #1
 8037174:	e000      	b.n	8037178 <prvGetNextExpireTime+0x18>
 8037176:	2200      	movs	r2, #0
 8037178:	687b      	ldr	r3, [r7, #4]
 803717a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 803717c:	687b      	ldr	r3, [r7, #4]
 803717e:	681b      	ldr	r3, [r3, #0]
 8037180:	2b00      	cmp	r3, #0
 8037182:	d105      	bne.n	8037190 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8037184:	4b07      	ldr	r3, [pc, #28]	@ (80371a4 <prvGetNextExpireTime+0x44>)
 8037186:	681b      	ldr	r3, [r3, #0]
 8037188:	68db      	ldr	r3, [r3, #12]
 803718a:	681b      	ldr	r3, [r3, #0]
 803718c:	60fb      	str	r3, [r7, #12]
 803718e:	e001      	b.n	8037194 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8037190:	2300      	movs	r3, #0
 8037192:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8037194:	68fb      	ldr	r3, [r7, #12]
}
 8037196:	4618      	mov	r0, r3
 8037198:	3714      	adds	r7, #20
 803719a:	46bd      	mov	sp, r7
 803719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80371a0:	4770      	bx	lr
 80371a2:	bf00      	nop
 80371a4:	20004354 	.word	0x20004354

080371a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80371a8:	b580      	push	{r7, lr}
 80371aa:	b084      	sub	sp, #16
 80371ac:	af00      	add	r7, sp, #0
 80371ae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80371b0:	f7fe fffc 	bl	80361ac <xTaskGetTickCount>
 80371b4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80371b6:	4b0b      	ldr	r3, [pc, #44]	@ (80371e4 <prvSampleTimeNow+0x3c>)
 80371b8:	681b      	ldr	r3, [r3, #0]
 80371ba:	68fa      	ldr	r2, [r7, #12]
 80371bc:	429a      	cmp	r2, r3
 80371be:	d205      	bcs.n	80371cc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80371c0:	f000 f93a 	bl	8037438 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80371c4:	687b      	ldr	r3, [r7, #4]
 80371c6:	2201      	movs	r2, #1
 80371c8:	601a      	str	r2, [r3, #0]
 80371ca:	e002      	b.n	80371d2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80371cc:	687b      	ldr	r3, [r7, #4]
 80371ce:	2200      	movs	r2, #0
 80371d0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80371d2:	4a04      	ldr	r2, [pc, #16]	@ (80371e4 <prvSampleTimeNow+0x3c>)
 80371d4:	68fb      	ldr	r3, [r7, #12]
 80371d6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80371d8:	68fb      	ldr	r3, [r7, #12]
}
 80371da:	4618      	mov	r0, r3
 80371dc:	3710      	adds	r7, #16
 80371de:	46bd      	mov	sp, r7
 80371e0:	bd80      	pop	{r7, pc}
 80371e2:	bf00      	nop
 80371e4:	20004364 	.word	0x20004364

080371e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80371e8:	b580      	push	{r7, lr}
 80371ea:	b086      	sub	sp, #24
 80371ec:	af00      	add	r7, sp, #0
 80371ee:	60f8      	str	r0, [r7, #12]
 80371f0:	60b9      	str	r1, [r7, #8]
 80371f2:	607a      	str	r2, [r7, #4]
 80371f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80371f6:	2300      	movs	r3, #0
 80371f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80371fa:	68fb      	ldr	r3, [r7, #12]
 80371fc:	68ba      	ldr	r2, [r7, #8]
 80371fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8037200:	68fb      	ldr	r3, [r7, #12]
 8037202:	68fa      	ldr	r2, [r7, #12]
 8037204:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8037206:	68ba      	ldr	r2, [r7, #8]
 8037208:	687b      	ldr	r3, [r7, #4]
 803720a:	429a      	cmp	r2, r3
 803720c:	d812      	bhi.n	8037234 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 803720e:	687a      	ldr	r2, [r7, #4]
 8037210:	683b      	ldr	r3, [r7, #0]
 8037212:	1ad2      	subs	r2, r2, r3
 8037214:	68fb      	ldr	r3, [r7, #12]
 8037216:	699b      	ldr	r3, [r3, #24]
 8037218:	429a      	cmp	r2, r3
 803721a:	d302      	bcc.n	8037222 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 803721c:	2301      	movs	r3, #1
 803721e:	617b      	str	r3, [r7, #20]
 8037220:	e01b      	b.n	803725a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8037222:	4b10      	ldr	r3, [pc, #64]	@ (8037264 <prvInsertTimerInActiveList+0x7c>)
 8037224:	681a      	ldr	r2, [r3, #0]
 8037226:	68fb      	ldr	r3, [r7, #12]
 8037228:	3304      	adds	r3, #4
 803722a:	4619      	mov	r1, r3
 803722c:	4610      	mov	r0, r2
 803722e:	f7fd fbaa 	bl	8034986 <vListInsert>
 8037232:	e012      	b.n	803725a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8037234:	687a      	ldr	r2, [r7, #4]
 8037236:	683b      	ldr	r3, [r7, #0]
 8037238:	429a      	cmp	r2, r3
 803723a:	d206      	bcs.n	803724a <prvInsertTimerInActiveList+0x62>
 803723c:	68ba      	ldr	r2, [r7, #8]
 803723e:	683b      	ldr	r3, [r7, #0]
 8037240:	429a      	cmp	r2, r3
 8037242:	d302      	bcc.n	803724a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8037244:	2301      	movs	r3, #1
 8037246:	617b      	str	r3, [r7, #20]
 8037248:	e007      	b.n	803725a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 803724a:	4b07      	ldr	r3, [pc, #28]	@ (8037268 <prvInsertTimerInActiveList+0x80>)
 803724c:	681a      	ldr	r2, [r3, #0]
 803724e:	68fb      	ldr	r3, [r7, #12]
 8037250:	3304      	adds	r3, #4
 8037252:	4619      	mov	r1, r3
 8037254:	4610      	mov	r0, r2
 8037256:	f7fd fb96 	bl	8034986 <vListInsert>
		}
	}

	return xProcessTimerNow;
 803725a:	697b      	ldr	r3, [r7, #20]
}
 803725c:	4618      	mov	r0, r3
 803725e:	3718      	adds	r7, #24
 8037260:	46bd      	mov	sp, r7
 8037262:	bd80      	pop	{r7, pc}
 8037264:	20004358 	.word	0x20004358
 8037268:	20004354 	.word	0x20004354

0803726c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 803726c:	b580      	push	{r7, lr}
 803726e:	b08e      	sub	sp, #56	@ 0x38
 8037270:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8037272:	e0ce      	b.n	8037412 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8037274:	687b      	ldr	r3, [r7, #4]
 8037276:	2b00      	cmp	r3, #0
 8037278:	da19      	bge.n	80372ae <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 803727a:	1d3b      	adds	r3, r7, #4
 803727c:	3304      	adds	r3, #4
 803727e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8037280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8037282:	2b00      	cmp	r3, #0
 8037284:	d10b      	bne.n	803729e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8037286:	f04f 0310 	mov.w	r3, #16
 803728a:	f383 8811 	msr	BASEPRI, r3
 803728e:	f3bf 8f6f 	isb	sy
 8037292:	f3bf 8f4f 	dsb	sy
 8037296:	61fb      	str	r3, [r7, #28]
}
 8037298:	bf00      	nop
 803729a:	bf00      	nop
 803729c:	e7fd      	b.n	803729a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 803729e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80372a0:	681b      	ldr	r3, [r3, #0]
 80372a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80372a4:	6850      	ldr	r0, [r2, #4]
 80372a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80372a8:	6892      	ldr	r2, [r2, #8]
 80372aa:	4611      	mov	r1, r2
 80372ac:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80372ae:	687b      	ldr	r3, [r7, #4]
 80372b0:	2b00      	cmp	r3, #0
 80372b2:	f2c0 80ae 	blt.w	8037412 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80372b6:	68fb      	ldr	r3, [r7, #12]
 80372b8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80372ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80372bc:	695b      	ldr	r3, [r3, #20]
 80372be:	2b00      	cmp	r3, #0
 80372c0:	d004      	beq.n	80372cc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80372c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80372c4:	3304      	adds	r3, #4
 80372c6:	4618      	mov	r0, r3
 80372c8:	f7fd fb96 	bl	80349f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80372cc:	463b      	mov	r3, r7
 80372ce:	4618      	mov	r0, r3
 80372d0:	f7ff ff6a 	bl	80371a8 <prvSampleTimeNow>
 80372d4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80372d6:	687b      	ldr	r3, [r7, #4]
 80372d8:	2b09      	cmp	r3, #9
 80372da:	f200 8097 	bhi.w	803740c <prvProcessReceivedCommands+0x1a0>
 80372de:	a201      	add	r2, pc, #4	@ (adr r2, 80372e4 <prvProcessReceivedCommands+0x78>)
 80372e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80372e4:	0803730d 	.word	0x0803730d
 80372e8:	0803730d 	.word	0x0803730d
 80372ec:	0803730d 	.word	0x0803730d
 80372f0:	08037383 	.word	0x08037383
 80372f4:	08037397 	.word	0x08037397
 80372f8:	080373e3 	.word	0x080373e3
 80372fc:	0803730d 	.word	0x0803730d
 8037300:	0803730d 	.word	0x0803730d
 8037304:	08037383 	.word	0x08037383
 8037308:	08037397 	.word	0x08037397
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 803730c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 803730e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8037312:	f043 0301 	orr.w	r3, r3, #1
 8037316:	b2da      	uxtb	r2, r3
 8037318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 803731a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 803731e:	68ba      	ldr	r2, [r7, #8]
 8037320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8037322:	699b      	ldr	r3, [r3, #24]
 8037324:	18d1      	adds	r1, r2, r3
 8037326:	68bb      	ldr	r3, [r7, #8]
 8037328:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 803732a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803732c:	f7ff ff5c 	bl	80371e8 <prvInsertTimerInActiveList>
 8037330:	4603      	mov	r3, r0
 8037332:	2b00      	cmp	r3, #0
 8037334:	d06c      	beq.n	8037410 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8037336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8037338:	6a1b      	ldr	r3, [r3, #32]
 803733a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803733c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 803733e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8037340:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8037344:	f003 0304 	and.w	r3, r3, #4
 8037348:	2b00      	cmp	r3, #0
 803734a:	d061      	beq.n	8037410 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 803734c:	68ba      	ldr	r2, [r7, #8]
 803734e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8037350:	699b      	ldr	r3, [r3, #24]
 8037352:	441a      	add	r2, r3
 8037354:	2300      	movs	r3, #0
 8037356:	9300      	str	r3, [sp, #0]
 8037358:	2300      	movs	r3, #0
 803735a:	2100      	movs	r1, #0
 803735c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803735e:	f7ff fe01 	bl	8036f64 <xTimerGenericCommand>
 8037362:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8037364:	6a3b      	ldr	r3, [r7, #32]
 8037366:	2b00      	cmp	r3, #0
 8037368:	d152      	bne.n	8037410 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 803736a:	f04f 0310 	mov.w	r3, #16
 803736e:	f383 8811 	msr	BASEPRI, r3
 8037372:	f3bf 8f6f 	isb	sy
 8037376:	f3bf 8f4f 	dsb	sy
 803737a:	61bb      	str	r3, [r7, #24]
}
 803737c:	bf00      	nop
 803737e:	bf00      	nop
 8037380:	e7fd      	b.n	803737e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8037382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8037384:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8037388:	f023 0301 	bic.w	r3, r3, #1
 803738c:	b2da      	uxtb	r2, r3
 803738e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8037390:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8037394:	e03d      	b.n	8037412 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8037396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8037398:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 803739c:	f043 0301 	orr.w	r3, r3, #1
 80373a0:	b2da      	uxtb	r2, r3
 80373a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80373a4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80373a8:	68ba      	ldr	r2, [r7, #8]
 80373aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80373ac:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80373ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80373b0:	699b      	ldr	r3, [r3, #24]
 80373b2:	2b00      	cmp	r3, #0
 80373b4:	d10b      	bne.n	80373ce <prvProcessReceivedCommands+0x162>
	__asm volatile
 80373b6:	f04f 0310 	mov.w	r3, #16
 80373ba:	f383 8811 	msr	BASEPRI, r3
 80373be:	f3bf 8f6f 	isb	sy
 80373c2:	f3bf 8f4f 	dsb	sy
 80373c6:	617b      	str	r3, [r7, #20]
}
 80373c8:	bf00      	nop
 80373ca:	bf00      	nop
 80373cc:	e7fd      	b.n	80373ca <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80373ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80373d0:	699a      	ldr	r2, [r3, #24]
 80373d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80373d4:	18d1      	adds	r1, r2, r3
 80373d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80373d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80373da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80373dc:	f7ff ff04 	bl	80371e8 <prvInsertTimerInActiveList>
					break;
 80373e0:	e017      	b.n	8037412 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80373e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80373e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80373e8:	f003 0302 	and.w	r3, r3, #2
 80373ec:	2b00      	cmp	r3, #0
 80373ee:	d103      	bne.n	80373f8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80373f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80373f2:	f7fd f957 	bl	80346a4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80373f6:	e00c      	b.n	8037412 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80373f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80373fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80373fe:	f023 0301 	bic.w	r3, r3, #1
 8037402:	b2da      	uxtb	r2, r3
 8037404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8037406:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 803740a:	e002      	b.n	8037412 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 803740c:	bf00      	nop
 803740e:	e000      	b.n	8037412 <prvProcessReceivedCommands+0x1a6>
					break;
 8037410:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8037412:	4b08      	ldr	r3, [pc, #32]	@ (8037434 <prvProcessReceivedCommands+0x1c8>)
 8037414:	681b      	ldr	r3, [r3, #0]
 8037416:	1d39      	adds	r1, r7, #4
 8037418:	2200      	movs	r2, #0
 803741a:	4618      	mov	r0, r3
 803741c:	f7fe f810 	bl	8035440 <xQueueReceive>
 8037420:	4603      	mov	r3, r0
 8037422:	2b00      	cmp	r3, #0
 8037424:	f47f af26 	bne.w	8037274 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8037428:	bf00      	nop
 803742a:	bf00      	nop
 803742c:	3730      	adds	r7, #48	@ 0x30
 803742e:	46bd      	mov	sp, r7
 8037430:	bd80      	pop	{r7, pc}
 8037432:	bf00      	nop
 8037434:	2000435c 	.word	0x2000435c

08037438 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8037438:	b580      	push	{r7, lr}
 803743a:	b088      	sub	sp, #32
 803743c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 803743e:	e049      	b.n	80374d4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8037440:	4b2e      	ldr	r3, [pc, #184]	@ (80374fc <prvSwitchTimerLists+0xc4>)
 8037442:	681b      	ldr	r3, [r3, #0]
 8037444:	68db      	ldr	r3, [r3, #12]
 8037446:	681b      	ldr	r3, [r3, #0]
 8037448:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 803744a:	4b2c      	ldr	r3, [pc, #176]	@ (80374fc <prvSwitchTimerLists+0xc4>)
 803744c:	681b      	ldr	r3, [r3, #0]
 803744e:	68db      	ldr	r3, [r3, #12]
 8037450:	68db      	ldr	r3, [r3, #12]
 8037452:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8037454:	68fb      	ldr	r3, [r7, #12]
 8037456:	3304      	adds	r3, #4
 8037458:	4618      	mov	r0, r3
 803745a:	f7fd facd 	bl	80349f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 803745e:	68fb      	ldr	r3, [r7, #12]
 8037460:	6a1b      	ldr	r3, [r3, #32]
 8037462:	68f8      	ldr	r0, [r7, #12]
 8037464:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8037466:	68fb      	ldr	r3, [r7, #12]
 8037468:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 803746c:	f003 0304 	and.w	r3, r3, #4
 8037470:	2b00      	cmp	r3, #0
 8037472:	d02f      	beq.n	80374d4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8037474:	68fb      	ldr	r3, [r7, #12]
 8037476:	699b      	ldr	r3, [r3, #24]
 8037478:	693a      	ldr	r2, [r7, #16]
 803747a:	4413      	add	r3, r2
 803747c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 803747e:	68ba      	ldr	r2, [r7, #8]
 8037480:	693b      	ldr	r3, [r7, #16]
 8037482:	429a      	cmp	r2, r3
 8037484:	d90e      	bls.n	80374a4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8037486:	68fb      	ldr	r3, [r7, #12]
 8037488:	68ba      	ldr	r2, [r7, #8]
 803748a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 803748c:	68fb      	ldr	r3, [r7, #12]
 803748e:	68fa      	ldr	r2, [r7, #12]
 8037490:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8037492:	4b1a      	ldr	r3, [pc, #104]	@ (80374fc <prvSwitchTimerLists+0xc4>)
 8037494:	681a      	ldr	r2, [r3, #0]
 8037496:	68fb      	ldr	r3, [r7, #12]
 8037498:	3304      	adds	r3, #4
 803749a:	4619      	mov	r1, r3
 803749c:	4610      	mov	r0, r2
 803749e:	f7fd fa72 	bl	8034986 <vListInsert>
 80374a2:	e017      	b.n	80374d4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80374a4:	2300      	movs	r3, #0
 80374a6:	9300      	str	r3, [sp, #0]
 80374a8:	2300      	movs	r3, #0
 80374aa:	693a      	ldr	r2, [r7, #16]
 80374ac:	2100      	movs	r1, #0
 80374ae:	68f8      	ldr	r0, [r7, #12]
 80374b0:	f7ff fd58 	bl	8036f64 <xTimerGenericCommand>
 80374b4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80374b6:	687b      	ldr	r3, [r7, #4]
 80374b8:	2b00      	cmp	r3, #0
 80374ba:	d10b      	bne.n	80374d4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80374bc:	f04f 0310 	mov.w	r3, #16
 80374c0:	f383 8811 	msr	BASEPRI, r3
 80374c4:	f3bf 8f6f 	isb	sy
 80374c8:	f3bf 8f4f 	dsb	sy
 80374cc:	603b      	str	r3, [r7, #0]
}
 80374ce:	bf00      	nop
 80374d0:	bf00      	nop
 80374d2:	e7fd      	b.n	80374d0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80374d4:	4b09      	ldr	r3, [pc, #36]	@ (80374fc <prvSwitchTimerLists+0xc4>)
 80374d6:	681b      	ldr	r3, [r3, #0]
 80374d8:	681b      	ldr	r3, [r3, #0]
 80374da:	2b00      	cmp	r3, #0
 80374dc:	d1b0      	bne.n	8037440 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80374de:	4b07      	ldr	r3, [pc, #28]	@ (80374fc <prvSwitchTimerLists+0xc4>)
 80374e0:	681b      	ldr	r3, [r3, #0]
 80374e2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80374e4:	4b06      	ldr	r3, [pc, #24]	@ (8037500 <prvSwitchTimerLists+0xc8>)
 80374e6:	681b      	ldr	r3, [r3, #0]
 80374e8:	4a04      	ldr	r2, [pc, #16]	@ (80374fc <prvSwitchTimerLists+0xc4>)
 80374ea:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80374ec:	4a04      	ldr	r2, [pc, #16]	@ (8037500 <prvSwitchTimerLists+0xc8>)
 80374ee:	697b      	ldr	r3, [r7, #20]
 80374f0:	6013      	str	r3, [r2, #0]
}
 80374f2:	bf00      	nop
 80374f4:	3718      	adds	r7, #24
 80374f6:	46bd      	mov	sp, r7
 80374f8:	bd80      	pop	{r7, pc}
 80374fa:	bf00      	nop
 80374fc:	20004354 	.word	0x20004354
 8037500:	20004358 	.word	0x20004358

08037504 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8037504:	b580      	push	{r7, lr}
 8037506:	b082      	sub	sp, #8
 8037508:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 803750a:	f7fd fbcd 	bl	8034ca8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 803750e:	4b15      	ldr	r3, [pc, #84]	@ (8037564 <prvCheckForValidListAndQueue+0x60>)
 8037510:	681b      	ldr	r3, [r3, #0]
 8037512:	2b00      	cmp	r3, #0
 8037514:	d120      	bne.n	8037558 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8037516:	4814      	ldr	r0, [pc, #80]	@ (8037568 <prvCheckForValidListAndQueue+0x64>)
 8037518:	f7fd f9e4 	bl	80348e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 803751c:	4813      	ldr	r0, [pc, #76]	@ (803756c <prvCheckForValidListAndQueue+0x68>)
 803751e:	f7fd f9e1 	bl	80348e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8037522:	4b13      	ldr	r3, [pc, #76]	@ (8037570 <prvCheckForValidListAndQueue+0x6c>)
 8037524:	4a10      	ldr	r2, [pc, #64]	@ (8037568 <prvCheckForValidListAndQueue+0x64>)
 8037526:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8037528:	4b12      	ldr	r3, [pc, #72]	@ (8037574 <prvCheckForValidListAndQueue+0x70>)
 803752a:	4a10      	ldr	r2, [pc, #64]	@ (803756c <prvCheckForValidListAndQueue+0x68>)
 803752c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 803752e:	2300      	movs	r3, #0
 8037530:	9300      	str	r3, [sp, #0]
 8037532:	4b11      	ldr	r3, [pc, #68]	@ (8037578 <prvCheckForValidListAndQueue+0x74>)
 8037534:	4a11      	ldr	r2, [pc, #68]	@ (803757c <prvCheckForValidListAndQueue+0x78>)
 8037536:	2110      	movs	r1, #16
 8037538:	200a      	movs	r0, #10
 803753a:	f7fd fd41 	bl	8034fc0 <xQueueGenericCreateStatic>
 803753e:	4603      	mov	r3, r0
 8037540:	4a08      	ldr	r2, [pc, #32]	@ (8037564 <prvCheckForValidListAndQueue+0x60>)
 8037542:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8037544:	4b07      	ldr	r3, [pc, #28]	@ (8037564 <prvCheckForValidListAndQueue+0x60>)
 8037546:	681b      	ldr	r3, [r3, #0]
 8037548:	2b00      	cmp	r3, #0
 803754a:	d005      	beq.n	8037558 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 803754c:	4b05      	ldr	r3, [pc, #20]	@ (8037564 <prvCheckForValidListAndQueue+0x60>)
 803754e:	681b      	ldr	r3, [r3, #0]
 8037550:	490b      	ldr	r1, [pc, #44]	@ (8037580 <prvCheckForValidListAndQueue+0x7c>)
 8037552:	4618      	mov	r0, r3
 8037554:	f7fe f966 	bl	8035824 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8037558:	f7fd fbd8 	bl	8034d0c <vPortExitCritical>
}
 803755c:	bf00      	nop
 803755e:	46bd      	mov	sp, r7
 8037560:	bd80      	pop	{r7, pc}
 8037562:	bf00      	nop
 8037564:	2000435c 	.word	0x2000435c
 8037568:	2000432c 	.word	0x2000432c
 803756c:	20004340 	.word	0x20004340
 8037570:	20004354 	.word	0x20004354
 8037574:	20004358 	.word	0x20004358
 8037578:	20004408 	.word	0x20004408
 803757c:	20004368 	.word	0x20004368
 8037580:	080388f8 	.word	0x080388f8

08037584 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8037584:	b580      	push	{r7, lr}
 8037586:	b086      	sub	sp, #24
 8037588:	af00      	add	r7, sp, #0
 803758a:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 803758c:	687b      	ldr	r3, [r7, #4]
 803758e:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8037590:	687b      	ldr	r3, [r7, #4]
 8037592:	2b00      	cmp	r3, #0
 8037594:	d10b      	bne.n	80375ae <pvTimerGetTimerID+0x2a>
	__asm volatile
 8037596:	f04f 0310 	mov.w	r3, #16
 803759a:	f383 8811 	msr	BASEPRI, r3
 803759e:	f3bf 8f6f 	isb	sy
 80375a2:	f3bf 8f4f 	dsb	sy
 80375a6:	60fb      	str	r3, [r7, #12]
}
 80375a8:	bf00      	nop
 80375aa:	bf00      	nop
 80375ac:	e7fd      	b.n	80375aa <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 80375ae:	f7fd fb7b 	bl	8034ca8 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80375b2:	697b      	ldr	r3, [r7, #20]
 80375b4:	69db      	ldr	r3, [r3, #28]
 80375b6:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80375b8:	f7fd fba8 	bl	8034d0c <vPortExitCritical>

	return pvReturn;
 80375bc:	693b      	ldr	r3, [r7, #16]
}
 80375be:	4618      	mov	r0, r3
 80375c0:	3718      	adds	r7, #24
 80375c2:	46bd      	mov	sp, r7
 80375c4:	bd80      	pop	{r7, pc}
	...

080375c8 <sbrk_aligned>:
 80375c8:	b570      	push	{r4, r5, r6, lr}
 80375ca:	4e0f      	ldr	r6, [pc, #60]	@ (8037608 <sbrk_aligned+0x40>)
 80375cc:	460c      	mov	r4, r1
 80375ce:	6831      	ldr	r1, [r6, #0]
 80375d0:	4605      	mov	r5, r0
 80375d2:	b911      	cbnz	r1, 80375da <sbrk_aligned+0x12>
 80375d4:	f000 f924 	bl	8037820 <_sbrk_r>
 80375d8:	6030      	str	r0, [r6, #0]
 80375da:	4621      	mov	r1, r4
 80375dc:	4628      	mov	r0, r5
 80375de:	f000 f91f 	bl	8037820 <_sbrk_r>
 80375e2:	1c43      	adds	r3, r0, #1
 80375e4:	d103      	bne.n	80375ee <sbrk_aligned+0x26>
 80375e6:	f04f 34ff 	mov.w	r4, #4294967295
 80375ea:	4620      	mov	r0, r4
 80375ec:	bd70      	pop	{r4, r5, r6, pc}
 80375ee:	1cc4      	adds	r4, r0, #3
 80375f0:	f024 0403 	bic.w	r4, r4, #3
 80375f4:	42a0      	cmp	r0, r4
 80375f6:	d0f8      	beq.n	80375ea <sbrk_aligned+0x22>
 80375f8:	1a21      	subs	r1, r4, r0
 80375fa:	4628      	mov	r0, r5
 80375fc:	f000 f910 	bl	8037820 <_sbrk_r>
 8037600:	3001      	adds	r0, #1
 8037602:	d1f2      	bne.n	80375ea <sbrk_aligned+0x22>
 8037604:	e7ef      	b.n	80375e6 <sbrk_aligned+0x1e>
 8037606:	bf00      	nop
 8037608:	20004458 	.word	0x20004458

0803760c <_malloc_r>:
 803760c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8037610:	1ccd      	adds	r5, r1, #3
 8037612:	f025 0503 	bic.w	r5, r5, #3
 8037616:	3508      	adds	r5, #8
 8037618:	2d0c      	cmp	r5, #12
 803761a:	bf38      	it	cc
 803761c:	250c      	movcc	r5, #12
 803761e:	2d00      	cmp	r5, #0
 8037620:	4606      	mov	r6, r0
 8037622:	db01      	blt.n	8037628 <_malloc_r+0x1c>
 8037624:	42a9      	cmp	r1, r5
 8037626:	d904      	bls.n	8037632 <_malloc_r+0x26>
 8037628:	230c      	movs	r3, #12
 803762a:	6033      	str	r3, [r6, #0]
 803762c:	2000      	movs	r0, #0
 803762e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8037632:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8037708 <_malloc_r+0xfc>
 8037636:	f000 f869 	bl	803770c <__malloc_lock>
 803763a:	f8d8 3000 	ldr.w	r3, [r8]
 803763e:	461c      	mov	r4, r3
 8037640:	bb44      	cbnz	r4, 8037694 <_malloc_r+0x88>
 8037642:	4629      	mov	r1, r5
 8037644:	4630      	mov	r0, r6
 8037646:	f7ff ffbf 	bl	80375c8 <sbrk_aligned>
 803764a:	1c43      	adds	r3, r0, #1
 803764c:	4604      	mov	r4, r0
 803764e:	d158      	bne.n	8037702 <_malloc_r+0xf6>
 8037650:	f8d8 4000 	ldr.w	r4, [r8]
 8037654:	4627      	mov	r7, r4
 8037656:	2f00      	cmp	r7, #0
 8037658:	d143      	bne.n	80376e2 <_malloc_r+0xd6>
 803765a:	2c00      	cmp	r4, #0
 803765c:	d04b      	beq.n	80376f6 <_malloc_r+0xea>
 803765e:	6823      	ldr	r3, [r4, #0]
 8037660:	4639      	mov	r1, r7
 8037662:	4630      	mov	r0, r6
 8037664:	eb04 0903 	add.w	r9, r4, r3
 8037668:	f000 f8da 	bl	8037820 <_sbrk_r>
 803766c:	4581      	cmp	r9, r0
 803766e:	d142      	bne.n	80376f6 <_malloc_r+0xea>
 8037670:	6821      	ldr	r1, [r4, #0]
 8037672:	1a6d      	subs	r5, r5, r1
 8037674:	4629      	mov	r1, r5
 8037676:	4630      	mov	r0, r6
 8037678:	f7ff ffa6 	bl	80375c8 <sbrk_aligned>
 803767c:	3001      	adds	r0, #1
 803767e:	d03a      	beq.n	80376f6 <_malloc_r+0xea>
 8037680:	6823      	ldr	r3, [r4, #0]
 8037682:	442b      	add	r3, r5
 8037684:	6023      	str	r3, [r4, #0]
 8037686:	f8d8 3000 	ldr.w	r3, [r8]
 803768a:	685a      	ldr	r2, [r3, #4]
 803768c:	bb62      	cbnz	r2, 80376e8 <_malloc_r+0xdc>
 803768e:	f8c8 7000 	str.w	r7, [r8]
 8037692:	e00f      	b.n	80376b4 <_malloc_r+0xa8>
 8037694:	6822      	ldr	r2, [r4, #0]
 8037696:	1b52      	subs	r2, r2, r5
 8037698:	d420      	bmi.n	80376dc <_malloc_r+0xd0>
 803769a:	2a0b      	cmp	r2, #11
 803769c:	d917      	bls.n	80376ce <_malloc_r+0xc2>
 803769e:	1961      	adds	r1, r4, r5
 80376a0:	42a3      	cmp	r3, r4
 80376a2:	6025      	str	r5, [r4, #0]
 80376a4:	bf18      	it	ne
 80376a6:	6059      	strne	r1, [r3, #4]
 80376a8:	6863      	ldr	r3, [r4, #4]
 80376aa:	bf08      	it	eq
 80376ac:	f8c8 1000 	streq.w	r1, [r8]
 80376b0:	5162      	str	r2, [r4, r5]
 80376b2:	604b      	str	r3, [r1, #4]
 80376b4:	4630      	mov	r0, r6
 80376b6:	f000 f82f 	bl	8037718 <__malloc_unlock>
 80376ba:	f104 000b 	add.w	r0, r4, #11
 80376be:	1d23      	adds	r3, r4, #4
 80376c0:	f020 0007 	bic.w	r0, r0, #7
 80376c4:	1ac2      	subs	r2, r0, r3
 80376c6:	bf1c      	itt	ne
 80376c8:	1a1b      	subne	r3, r3, r0
 80376ca:	50a3      	strne	r3, [r4, r2]
 80376cc:	e7af      	b.n	803762e <_malloc_r+0x22>
 80376ce:	6862      	ldr	r2, [r4, #4]
 80376d0:	42a3      	cmp	r3, r4
 80376d2:	bf0c      	ite	eq
 80376d4:	f8c8 2000 	streq.w	r2, [r8]
 80376d8:	605a      	strne	r2, [r3, #4]
 80376da:	e7eb      	b.n	80376b4 <_malloc_r+0xa8>
 80376dc:	4623      	mov	r3, r4
 80376de:	6864      	ldr	r4, [r4, #4]
 80376e0:	e7ae      	b.n	8037640 <_malloc_r+0x34>
 80376e2:	463c      	mov	r4, r7
 80376e4:	687f      	ldr	r7, [r7, #4]
 80376e6:	e7b6      	b.n	8037656 <_malloc_r+0x4a>
 80376e8:	461a      	mov	r2, r3
 80376ea:	685b      	ldr	r3, [r3, #4]
 80376ec:	42a3      	cmp	r3, r4
 80376ee:	d1fb      	bne.n	80376e8 <_malloc_r+0xdc>
 80376f0:	2300      	movs	r3, #0
 80376f2:	6053      	str	r3, [r2, #4]
 80376f4:	e7de      	b.n	80376b4 <_malloc_r+0xa8>
 80376f6:	230c      	movs	r3, #12
 80376f8:	6033      	str	r3, [r6, #0]
 80376fa:	4630      	mov	r0, r6
 80376fc:	f000 f80c 	bl	8037718 <__malloc_unlock>
 8037700:	e794      	b.n	803762c <_malloc_r+0x20>
 8037702:	6005      	str	r5, [r0, #0]
 8037704:	e7d6      	b.n	80376b4 <_malloc_r+0xa8>
 8037706:	bf00      	nop
 8037708:	2000445c 	.word	0x2000445c

0803770c <__malloc_lock>:
 803770c:	4801      	ldr	r0, [pc, #4]	@ (8037714 <__malloc_lock+0x8>)
 803770e:	f7f0 be84 	b.w	802841a <__retarget_lock_acquire_recursive>
 8037712:	bf00      	nop
 8037714:	2000076c 	.word	0x2000076c

08037718 <__malloc_unlock>:
 8037718:	4801      	ldr	r0, [pc, #4]	@ (8037720 <__malloc_unlock+0x8>)
 803771a:	f7f0 be93 	b.w	8028444 <__retarget_lock_release_recursive>
 803771e:	bf00      	nop
 8037720:	2000076c 	.word	0x2000076c

08037724 <siprintf>:
 8037724:	b40e      	push	{r1, r2, r3}
 8037726:	b500      	push	{lr}
 8037728:	b09c      	sub	sp, #112	@ 0x70
 803772a:	ab1d      	add	r3, sp, #116	@ 0x74
 803772c:	9002      	str	r0, [sp, #8]
 803772e:	9006      	str	r0, [sp, #24]
 8037730:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8037734:	4809      	ldr	r0, [pc, #36]	@ (803775c <siprintf+0x38>)
 8037736:	9107      	str	r1, [sp, #28]
 8037738:	9104      	str	r1, [sp, #16]
 803773a:	4909      	ldr	r1, [pc, #36]	@ (8037760 <siprintf+0x3c>)
 803773c:	f853 2b04 	ldr.w	r2, [r3], #4
 8037740:	9105      	str	r1, [sp, #20]
 8037742:	6800      	ldr	r0, [r0, #0]
 8037744:	9301      	str	r3, [sp, #4]
 8037746:	a902      	add	r1, sp, #8
 8037748:	f000 f958 	bl	80379fc <_svfiprintf_r>
 803774c:	9b02      	ldr	r3, [sp, #8]
 803774e:	2200      	movs	r2, #0
 8037750:	701a      	strb	r2, [r3, #0]
 8037752:	b01c      	add	sp, #112	@ 0x70
 8037754:	f85d eb04 	ldr.w	lr, [sp], #4
 8037758:	b003      	add	sp, #12
 803775a:	4770      	bx	lr
 803775c:	2000002c 	.word	0x2000002c
 8037760:	ffff0208 	.word	0xffff0208

08037764 <memset>:
 8037764:	4402      	add	r2, r0
 8037766:	4603      	mov	r3, r0
 8037768:	4293      	cmp	r3, r2
 803776a:	d100      	bne.n	803776e <memset+0xa>
 803776c:	4770      	bx	lr
 803776e:	f803 1b01 	strb.w	r1, [r3], #1
 8037772:	e7f9      	b.n	8037768 <memset+0x4>

08037774 <_reclaim_reent>:
 8037774:	4b29      	ldr	r3, [pc, #164]	@ (803781c <_reclaim_reent+0xa8>)
 8037776:	681b      	ldr	r3, [r3, #0]
 8037778:	4283      	cmp	r3, r0
 803777a:	b570      	push	{r4, r5, r6, lr}
 803777c:	4604      	mov	r4, r0
 803777e:	d04b      	beq.n	8037818 <_reclaim_reent+0xa4>
 8037780:	69c3      	ldr	r3, [r0, #28]
 8037782:	b1ab      	cbz	r3, 80377b0 <_reclaim_reent+0x3c>
 8037784:	68db      	ldr	r3, [r3, #12]
 8037786:	b16b      	cbz	r3, 80377a4 <_reclaim_reent+0x30>
 8037788:	2500      	movs	r5, #0
 803778a:	69e3      	ldr	r3, [r4, #28]
 803778c:	68db      	ldr	r3, [r3, #12]
 803778e:	5959      	ldr	r1, [r3, r5]
 8037790:	2900      	cmp	r1, #0
 8037792:	d13b      	bne.n	803780c <_reclaim_reent+0x98>
 8037794:	3504      	adds	r5, #4
 8037796:	2d80      	cmp	r5, #128	@ 0x80
 8037798:	d1f7      	bne.n	803778a <_reclaim_reent+0x16>
 803779a:	69e3      	ldr	r3, [r4, #28]
 803779c:	4620      	mov	r0, r4
 803779e:	68d9      	ldr	r1, [r3, #12]
 80377a0:	f000 f886 	bl	80378b0 <_free_r>
 80377a4:	69e3      	ldr	r3, [r4, #28]
 80377a6:	6819      	ldr	r1, [r3, #0]
 80377a8:	b111      	cbz	r1, 80377b0 <_reclaim_reent+0x3c>
 80377aa:	4620      	mov	r0, r4
 80377ac:	f000 f880 	bl	80378b0 <_free_r>
 80377b0:	6961      	ldr	r1, [r4, #20]
 80377b2:	b111      	cbz	r1, 80377ba <_reclaim_reent+0x46>
 80377b4:	4620      	mov	r0, r4
 80377b6:	f000 f87b 	bl	80378b0 <_free_r>
 80377ba:	69e1      	ldr	r1, [r4, #28]
 80377bc:	b111      	cbz	r1, 80377c4 <_reclaim_reent+0x50>
 80377be:	4620      	mov	r0, r4
 80377c0:	f000 f876 	bl	80378b0 <_free_r>
 80377c4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80377c6:	b111      	cbz	r1, 80377ce <_reclaim_reent+0x5a>
 80377c8:	4620      	mov	r0, r4
 80377ca:	f000 f871 	bl	80378b0 <_free_r>
 80377ce:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80377d0:	b111      	cbz	r1, 80377d8 <_reclaim_reent+0x64>
 80377d2:	4620      	mov	r0, r4
 80377d4:	f000 f86c 	bl	80378b0 <_free_r>
 80377d8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80377da:	b111      	cbz	r1, 80377e2 <_reclaim_reent+0x6e>
 80377dc:	4620      	mov	r0, r4
 80377de:	f000 f867 	bl	80378b0 <_free_r>
 80377e2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80377e4:	b111      	cbz	r1, 80377ec <_reclaim_reent+0x78>
 80377e6:	4620      	mov	r0, r4
 80377e8:	f000 f862 	bl	80378b0 <_free_r>
 80377ec:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80377ee:	b111      	cbz	r1, 80377f6 <_reclaim_reent+0x82>
 80377f0:	4620      	mov	r0, r4
 80377f2:	f000 f85d 	bl	80378b0 <_free_r>
 80377f6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80377f8:	b111      	cbz	r1, 8037800 <_reclaim_reent+0x8c>
 80377fa:	4620      	mov	r0, r4
 80377fc:	f000 f858 	bl	80378b0 <_free_r>
 8037800:	6a23      	ldr	r3, [r4, #32]
 8037802:	b14b      	cbz	r3, 8037818 <_reclaim_reent+0xa4>
 8037804:	4620      	mov	r0, r4
 8037806:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 803780a:	4718      	bx	r3
 803780c:	680e      	ldr	r6, [r1, #0]
 803780e:	4620      	mov	r0, r4
 8037810:	f000 f84e 	bl	80378b0 <_free_r>
 8037814:	4631      	mov	r1, r6
 8037816:	e7bb      	b.n	8037790 <_reclaim_reent+0x1c>
 8037818:	bd70      	pop	{r4, r5, r6, pc}
 803781a:	bf00      	nop
 803781c:	2000002c 	.word	0x2000002c

08037820 <_sbrk_r>:
 8037820:	b538      	push	{r3, r4, r5, lr}
 8037822:	4d06      	ldr	r5, [pc, #24]	@ (803783c <_sbrk_r+0x1c>)
 8037824:	2300      	movs	r3, #0
 8037826:	4604      	mov	r4, r0
 8037828:	4608      	mov	r0, r1
 803782a:	602b      	str	r3, [r5, #0]
 803782c:	f7f0 fc9e 	bl	802816c <_sbrk>
 8037830:	1c43      	adds	r3, r0, #1
 8037832:	d102      	bne.n	803783a <_sbrk_r+0x1a>
 8037834:	682b      	ldr	r3, [r5, #0]
 8037836:	b103      	cbz	r3, 803783a <_sbrk_r+0x1a>
 8037838:	6023      	str	r3, [r4, #0]
 803783a:	bd38      	pop	{r3, r4, r5, pc}
 803783c:	20004598 	.word	0x20004598

08037840 <__errno>:
 8037840:	4b01      	ldr	r3, [pc, #4]	@ (8037848 <__errno+0x8>)
 8037842:	6818      	ldr	r0, [r3, #0]
 8037844:	4770      	bx	lr
 8037846:	bf00      	nop
 8037848:	2000002c 	.word	0x2000002c

0803784c <__libc_init_array>:
 803784c:	b570      	push	{r4, r5, r6, lr}
 803784e:	4d0d      	ldr	r5, [pc, #52]	@ (8037884 <__libc_init_array+0x38>)
 8037850:	4c0d      	ldr	r4, [pc, #52]	@ (8037888 <__libc_init_array+0x3c>)
 8037852:	1b64      	subs	r4, r4, r5
 8037854:	10a4      	asrs	r4, r4, #2
 8037856:	2600      	movs	r6, #0
 8037858:	42a6      	cmp	r6, r4
 803785a:	d109      	bne.n	8037870 <__libc_init_array+0x24>
 803785c:	4d0b      	ldr	r5, [pc, #44]	@ (803788c <__libc_init_array+0x40>)
 803785e:	4c0c      	ldr	r4, [pc, #48]	@ (8037890 <__libc_init_array+0x44>)
 8037860:	f000 fba6 	bl	8037fb0 <_init>
 8037864:	1b64      	subs	r4, r4, r5
 8037866:	10a4      	asrs	r4, r4, #2
 8037868:	2600      	movs	r6, #0
 803786a:	42a6      	cmp	r6, r4
 803786c:	d105      	bne.n	803787a <__libc_init_array+0x2e>
 803786e:	bd70      	pop	{r4, r5, r6, pc}
 8037870:	f855 3b04 	ldr.w	r3, [r5], #4
 8037874:	4798      	blx	r3
 8037876:	3601      	adds	r6, #1
 8037878:	e7ee      	b.n	8037858 <__libc_init_array+0xc>
 803787a:	f855 3b04 	ldr.w	r3, [r5], #4
 803787e:	4798      	blx	r3
 8037880:	3601      	adds	r6, #1
 8037882:	e7f2      	b.n	803786a <__libc_init_array+0x1e>
 8037884:	0803a85c 	.word	0x0803a85c
 8037888:	0803a85c 	.word	0x0803a85c
 803788c:	0803a85c 	.word	0x0803a85c
 8037890:	0803a860 	.word	0x0803a860

08037894 <memcpy>:
 8037894:	440a      	add	r2, r1
 8037896:	4291      	cmp	r1, r2
 8037898:	f100 33ff 	add.w	r3, r0, #4294967295
 803789c:	d100      	bne.n	80378a0 <memcpy+0xc>
 803789e:	4770      	bx	lr
 80378a0:	b510      	push	{r4, lr}
 80378a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80378a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80378aa:	4291      	cmp	r1, r2
 80378ac:	d1f9      	bne.n	80378a2 <memcpy+0xe>
 80378ae:	bd10      	pop	{r4, pc}

080378b0 <_free_r>:
 80378b0:	b538      	push	{r3, r4, r5, lr}
 80378b2:	4605      	mov	r5, r0
 80378b4:	2900      	cmp	r1, #0
 80378b6:	d041      	beq.n	803793c <_free_r+0x8c>
 80378b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80378bc:	1f0c      	subs	r4, r1, #4
 80378be:	2b00      	cmp	r3, #0
 80378c0:	bfb8      	it	lt
 80378c2:	18e4      	addlt	r4, r4, r3
 80378c4:	f7ff ff22 	bl	803770c <__malloc_lock>
 80378c8:	4a1d      	ldr	r2, [pc, #116]	@ (8037940 <_free_r+0x90>)
 80378ca:	6813      	ldr	r3, [r2, #0]
 80378cc:	b933      	cbnz	r3, 80378dc <_free_r+0x2c>
 80378ce:	6063      	str	r3, [r4, #4]
 80378d0:	6014      	str	r4, [r2, #0]
 80378d2:	4628      	mov	r0, r5
 80378d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80378d8:	f7ff bf1e 	b.w	8037718 <__malloc_unlock>
 80378dc:	42a3      	cmp	r3, r4
 80378de:	d908      	bls.n	80378f2 <_free_r+0x42>
 80378e0:	6820      	ldr	r0, [r4, #0]
 80378e2:	1821      	adds	r1, r4, r0
 80378e4:	428b      	cmp	r3, r1
 80378e6:	bf01      	itttt	eq
 80378e8:	6819      	ldreq	r1, [r3, #0]
 80378ea:	685b      	ldreq	r3, [r3, #4]
 80378ec:	1809      	addeq	r1, r1, r0
 80378ee:	6021      	streq	r1, [r4, #0]
 80378f0:	e7ed      	b.n	80378ce <_free_r+0x1e>
 80378f2:	461a      	mov	r2, r3
 80378f4:	685b      	ldr	r3, [r3, #4]
 80378f6:	b10b      	cbz	r3, 80378fc <_free_r+0x4c>
 80378f8:	42a3      	cmp	r3, r4
 80378fa:	d9fa      	bls.n	80378f2 <_free_r+0x42>
 80378fc:	6811      	ldr	r1, [r2, #0]
 80378fe:	1850      	adds	r0, r2, r1
 8037900:	42a0      	cmp	r0, r4
 8037902:	d10b      	bne.n	803791c <_free_r+0x6c>
 8037904:	6820      	ldr	r0, [r4, #0]
 8037906:	4401      	add	r1, r0
 8037908:	1850      	adds	r0, r2, r1
 803790a:	4283      	cmp	r3, r0
 803790c:	6011      	str	r1, [r2, #0]
 803790e:	d1e0      	bne.n	80378d2 <_free_r+0x22>
 8037910:	6818      	ldr	r0, [r3, #0]
 8037912:	685b      	ldr	r3, [r3, #4]
 8037914:	6053      	str	r3, [r2, #4]
 8037916:	4408      	add	r0, r1
 8037918:	6010      	str	r0, [r2, #0]
 803791a:	e7da      	b.n	80378d2 <_free_r+0x22>
 803791c:	d902      	bls.n	8037924 <_free_r+0x74>
 803791e:	230c      	movs	r3, #12
 8037920:	602b      	str	r3, [r5, #0]
 8037922:	e7d6      	b.n	80378d2 <_free_r+0x22>
 8037924:	6820      	ldr	r0, [r4, #0]
 8037926:	1821      	adds	r1, r4, r0
 8037928:	428b      	cmp	r3, r1
 803792a:	bf04      	itt	eq
 803792c:	6819      	ldreq	r1, [r3, #0]
 803792e:	685b      	ldreq	r3, [r3, #4]
 8037930:	6063      	str	r3, [r4, #4]
 8037932:	bf04      	itt	eq
 8037934:	1809      	addeq	r1, r1, r0
 8037936:	6021      	streq	r1, [r4, #0]
 8037938:	6054      	str	r4, [r2, #4]
 803793a:	e7ca      	b.n	80378d2 <_free_r+0x22>
 803793c:	bd38      	pop	{r3, r4, r5, pc}
 803793e:	bf00      	nop
 8037940:	2000445c 	.word	0x2000445c

08037944 <__ssputs_r>:
 8037944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8037948:	688e      	ldr	r6, [r1, #8]
 803794a:	461f      	mov	r7, r3
 803794c:	42be      	cmp	r6, r7
 803794e:	680b      	ldr	r3, [r1, #0]
 8037950:	4682      	mov	sl, r0
 8037952:	460c      	mov	r4, r1
 8037954:	4690      	mov	r8, r2
 8037956:	d82d      	bhi.n	80379b4 <__ssputs_r+0x70>
 8037958:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 803795c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8037960:	d026      	beq.n	80379b0 <__ssputs_r+0x6c>
 8037962:	6965      	ldr	r5, [r4, #20]
 8037964:	6909      	ldr	r1, [r1, #16]
 8037966:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 803796a:	eba3 0901 	sub.w	r9, r3, r1
 803796e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8037972:	1c7b      	adds	r3, r7, #1
 8037974:	444b      	add	r3, r9
 8037976:	106d      	asrs	r5, r5, #1
 8037978:	429d      	cmp	r5, r3
 803797a:	bf38      	it	cc
 803797c:	461d      	movcc	r5, r3
 803797e:	0553      	lsls	r3, r2, #21
 8037980:	d527      	bpl.n	80379d2 <__ssputs_r+0x8e>
 8037982:	4629      	mov	r1, r5
 8037984:	f7ff fe42 	bl	803760c <_malloc_r>
 8037988:	4606      	mov	r6, r0
 803798a:	b360      	cbz	r0, 80379e6 <__ssputs_r+0xa2>
 803798c:	6921      	ldr	r1, [r4, #16]
 803798e:	464a      	mov	r2, r9
 8037990:	f7ff ff80 	bl	8037894 <memcpy>
 8037994:	89a3      	ldrh	r3, [r4, #12]
 8037996:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 803799a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 803799e:	81a3      	strh	r3, [r4, #12]
 80379a0:	6126      	str	r6, [r4, #16]
 80379a2:	6165      	str	r5, [r4, #20]
 80379a4:	444e      	add	r6, r9
 80379a6:	eba5 0509 	sub.w	r5, r5, r9
 80379aa:	6026      	str	r6, [r4, #0]
 80379ac:	60a5      	str	r5, [r4, #8]
 80379ae:	463e      	mov	r6, r7
 80379b0:	42be      	cmp	r6, r7
 80379b2:	d900      	bls.n	80379b6 <__ssputs_r+0x72>
 80379b4:	463e      	mov	r6, r7
 80379b6:	6820      	ldr	r0, [r4, #0]
 80379b8:	4632      	mov	r2, r6
 80379ba:	4641      	mov	r1, r8
 80379bc:	f000 faa8 	bl	8037f10 <memmove>
 80379c0:	68a3      	ldr	r3, [r4, #8]
 80379c2:	1b9b      	subs	r3, r3, r6
 80379c4:	60a3      	str	r3, [r4, #8]
 80379c6:	6823      	ldr	r3, [r4, #0]
 80379c8:	4433      	add	r3, r6
 80379ca:	6023      	str	r3, [r4, #0]
 80379cc:	2000      	movs	r0, #0
 80379ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80379d2:	462a      	mov	r2, r5
 80379d4:	f000 fab6 	bl	8037f44 <_realloc_r>
 80379d8:	4606      	mov	r6, r0
 80379da:	2800      	cmp	r0, #0
 80379dc:	d1e0      	bne.n	80379a0 <__ssputs_r+0x5c>
 80379de:	6921      	ldr	r1, [r4, #16]
 80379e0:	4650      	mov	r0, sl
 80379e2:	f7ff ff65 	bl	80378b0 <_free_r>
 80379e6:	230c      	movs	r3, #12
 80379e8:	f8ca 3000 	str.w	r3, [sl]
 80379ec:	89a3      	ldrh	r3, [r4, #12]
 80379ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80379f2:	81a3      	strh	r3, [r4, #12]
 80379f4:	f04f 30ff 	mov.w	r0, #4294967295
 80379f8:	e7e9      	b.n	80379ce <__ssputs_r+0x8a>
	...

080379fc <_svfiprintf_r>:
 80379fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8037a00:	4698      	mov	r8, r3
 8037a02:	898b      	ldrh	r3, [r1, #12]
 8037a04:	061b      	lsls	r3, r3, #24
 8037a06:	b09d      	sub	sp, #116	@ 0x74
 8037a08:	4607      	mov	r7, r0
 8037a0a:	460d      	mov	r5, r1
 8037a0c:	4614      	mov	r4, r2
 8037a0e:	d510      	bpl.n	8037a32 <_svfiprintf_r+0x36>
 8037a10:	690b      	ldr	r3, [r1, #16]
 8037a12:	b973      	cbnz	r3, 8037a32 <_svfiprintf_r+0x36>
 8037a14:	2140      	movs	r1, #64	@ 0x40
 8037a16:	f7ff fdf9 	bl	803760c <_malloc_r>
 8037a1a:	6028      	str	r0, [r5, #0]
 8037a1c:	6128      	str	r0, [r5, #16]
 8037a1e:	b930      	cbnz	r0, 8037a2e <_svfiprintf_r+0x32>
 8037a20:	230c      	movs	r3, #12
 8037a22:	603b      	str	r3, [r7, #0]
 8037a24:	f04f 30ff 	mov.w	r0, #4294967295
 8037a28:	b01d      	add	sp, #116	@ 0x74
 8037a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8037a2e:	2340      	movs	r3, #64	@ 0x40
 8037a30:	616b      	str	r3, [r5, #20]
 8037a32:	2300      	movs	r3, #0
 8037a34:	9309      	str	r3, [sp, #36]	@ 0x24
 8037a36:	2320      	movs	r3, #32
 8037a38:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8037a3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8037a40:	2330      	movs	r3, #48	@ 0x30
 8037a42:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8037be0 <_svfiprintf_r+0x1e4>
 8037a46:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8037a4a:	f04f 0901 	mov.w	r9, #1
 8037a4e:	4623      	mov	r3, r4
 8037a50:	469a      	mov	sl, r3
 8037a52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8037a56:	b10a      	cbz	r2, 8037a5c <_svfiprintf_r+0x60>
 8037a58:	2a25      	cmp	r2, #37	@ 0x25
 8037a5a:	d1f9      	bne.n	8037a50 <_svfiprintf_r+0x54>
 8037a5c:	ebba 0b04 	subs.w	fp, sl, r4
 8037a60:	d00b      	beq.n	8037a7a <_svfiprintf_r+0x7e>
 8037a62:	465b      	mov	r3, fp
 8037a64:	4622      	mov	r2, r4
 8037a66:	4629      	mov	r1, r5
 8037a68:	4638      	mov	r0, r7
 8037a6a:	f7ff ff6b 	bl	8037944 <__ssputs_r>
 8037a6e:	3001      	adds	r0, #1
 8037a70:	f000 80a7 	beq.w	8037bc2 <_svfiprintf_r+0x1c6>
 8037a74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8037a76:	445a      	add	r2, fp
 8037a78:	9209      	str	r2, [sp, #36]	@ 0x24
 8037a7a:	f89a 3000 	ldrb.w	r3, [sl]
 8037a7e:	2b00      	cmp	r3, #0
 8037a80:	f000 809f 	beq.w	8037bc2 <_svfiprintf_r+0x1c6>
 8037a84:	2300      	movs	r3, #0
 8037a86:	f04f 32ff 	mov.w	r2, #4294967295
 8037a8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8037a8e:	f10a 0a01 	add.w	sl, sl, #1
 8037a92:	9304      	str	r3, [sp, #16]
 8037a94:	9307      	str	r3, [sp, #28]
 8037a96:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8037a9a:	931a      	str	r3, [sp, #104]	@ 0x68
 8037a9c:	4654      	mov	r4, sl
 8037a9e:	2205      	movs	r2, #5
 8037aa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8037aa4:	484e      	ldr	r0, [pc, #312]	@ (8037be0 <_svfiprintf_r+0x1e4>)
 8037aa6:	f7e8 fb93 	bl	80201d0 <memchr>
 8037aaa:	9a04      	ldr	r2, [sp, #16]
 8037aac:	b9d8      	cbnz	r0, 8037ae6 <_svfiprintf_r+0xea>
 8037aae:	06d0      	lsls	r0, r2, #27
 8037ab0:	bf44      	itt	mi
 8037ab2:	2320      	movmi	r3, #32
 8037ab4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8037ab8:	0711      	lsls	r1, r2, #28
 8037aba:	bf44      	itt	mi
 8037abc:	232b      	movmi	r3, #43	@ 0x2b
 8037abe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8037ac2:	f89a 3000 	ldrb.w	r3, [sl]
 8037ac6:	2b2a      	cmp	r3, #42	@ 0x2a
 8037ac8:	d015      	beq.n	8037af6 <_svfiprintf_r+0xfa>
 8037aca:	9a07      	ldr	r2, [sp, #28]
 8037acc:	4654      	mov	r4, sl
 8037ace:	2000      	movs	r0, #0
 8037ad0:	f04f 0c0a 	mov.w	ip, #10
 8037ad4:	4621      	mov	r1, r4
 8037ad6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8037ada:	3b30      	subs	r3, #48	@ 0x30
 8037adc:	2b09      	cmp	r3, #9
 8037ade:	d94b      	bls.n	8037b78 <_svfiprintf_r+0x17c>
 8037ae0:	b1b0      	cbz	r0, 8037b10 <_svfiprintf_r+0x114>
 8037ae2:	9207      	str	r2, [sp, #28]
 8037ae4:	e014      	b.n	8037b10 <_svfiprintf_r+0x114>
 8037ae6:	eba0 0308 	sub.w	r3, r0, r8
 8037aea:	fa09 f303 	lsl.w	r3, r9, r3
 8037aee:	4313      	orrs	r3, r2
 8037af0:	9304      	str	r3, [sp, #16]
 8037af2:	46a2      	mov	sl, r4
 8037af4:	e7d2      	b.n	8037a9c <_svfiprintf_r+0xa0>
 8037af6:	9b03      	ldr	r3, [sp, #12]
 8037af8:	1d19      	adds	r1, r3, #4
 8037afa:	681b      	ldr	r3, [r3, #0]
 8037afc:	9103      	str	r1, [sp, #12]
 8037afe:	2b00      	cmp	r3, #0
 8037b00:	bfbb      	ittet	lt
 8037b02:	425b      	neglt	r3, r3
 8037b04:	f042 0202 	orrlt.w	r2, r2, #2
 8037b08:	9307      	strge	r3, [sp, #28]
 8037b0a:	9307      	strlt	r3, [sp, #28]
 8037b0c:	bfb8      	it	lt
 8037b0e:	9204      	strlt	r2, [sp, #16]
 8037b10:	7823      	ldrb	r3, [r4, #0]
 8037b12:	2b2e      	cmp	r3, #46	@ 0x2e
 8037b14:	d10a      	bne.n	8037b2c <_svfiprintf_r+0x130>
 8037b16:	7863      	ldrb	r3, [r4, #1]
 8037b18:	2b2a      	cmp	r3, #42	@ 0x2a
 8037b1a:	d132      	bne.n	8037b82 <_svfiprintf_r+0x186>
 8037b1c:	9b03      	ldr	r3, [sp, #12]
 8037b1e:	1d1a      	adds	r2, r3, #4
 8037b20:	681b      	ldr	r3, [r3, #0]
 8037b22:	9203      	str	r2, [sp, #12]
 8037b24:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8037b28:	3402      	adds	r4, #2
 8037b2a:	9305      	str	r3, [sp, #20]
 8037b2c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8037bf0 <_svfiprintf_r+0x1f4>
 8037b30:	7821      	ldrb	r1, [r4, #0]
 8037b32:	2203      	movs	r2, #3
 8037b34:	4650      	mov	r0, sl
 8037b36:	f7e8 fb4b 	bl	80201d0 <memchr>
 8037b3a:	b138      	cbz	r0, 8037b4c <_svfiprintf_r+0x150>
 8037b3c:	9b04      	ldr	r3, [sp, #16]
 8037b3e:	eba0 000a 	sub.w	r0, r0, sl
 8037b42:	2240      	movs	r2, #64	@ 0x40
 8037b44:	4082      	lsls	r2, r0
 8037b46:	4313      	orrs	r3, r2
 8037b48:	3401      	adds	r4, #1
 8037b4a:	9304      	str	r3, [sp, #16]
 8037b4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8037b50:	4824      	ldr	r0, [pc, #144]	@ (8037be4 <_svfiprintf_r+0x1e8>)
 8037b52:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8037b56:	2206      	movs	r2, #6
 8037b58:	f7e8 fb3a 	bl	80201d0 <memchr>
 8037b5c:	2800      	cmp	r0, #0
 8037b5e:	d036      	beq.n	8037bce <_svfiprintf_r+0x1d2>
 8037b60:	4b21      	ldr	r3, [pc, #132]	@ (8037be8 <_svfiprintf_r+0x1ec>)
 8037b62:	bb1b      	cbnz	r3, 8037bac <_svfiprintf_r+0x1b0>
 8037b64:	9b03      	ldr	r3, [sp, #12]
 8037b66:	3307      	adds	r3, #7
 8037b68:	f023 0307 	bic.w	r3, r3, #7
 8037b6c:	3308      	adds	r3, #8
 8037b6e:	9303      	str	r3, [sp, #12]
 8037b70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8037b72:	4433      	add	r3, r6
 8037b74:	9309      	str	r3, [sp, #36]	@ 0x24
 8037b76:	e76a      	b.n	8037a4e <_svfiprintf_r+0x52>
 8037b78:	fb0c 3202 	mla	r2, ip, r2, r3
 8037b7c:	460c      	mov	r4, r1
 8037b7e:	2001      	movs	r0, #1
 8037b80:	e7a8      	b.n	8037ad4 <_svfiprintf_r+0xd8>
 8037b82:	2300      	movs	r3, #0
 8037b84:	3401      	adds	r4, #1
 8037b86:	9305      	str	r3, [sp, #20]
 8037b88:	4619      	mov	r1, r3
 8037b8a:	f04f 0c0a 	mov.w	ip, #10
 8037b8e:	4620      	mov	r0, r4
 8037b90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8037b94:	3a30      	subs	r2, #48	@ 0x30
 8037b96:	2a09      	cmp	r2, #9
 8037b98:	d903      	bls.n	8037ba2 <_svfiprintf_r+0x1a6>
 8037b9a:	2b00      	cmp	r3, #0
 8037b9c:	d0c6      	beq.n	8037b2c <_svfiprintf_r+0x130>
 8037b9e:	9105      	str	r1, [sp, #20]
 8037ba0:	e7c4      	b.n	8037b2c <_svfiprintf_r+0x130>
 8037ba2:	fb0c 2101 	mla	r1, ip, r1, r2
 8037ba6:	4604      	mov	r4, r0
 8037ba8:	2301      	movs	r3, #1
 8037baa:	e7f0      	b.n	8037b8e <_svfiprintf_r+0x192>
 8037bac:	ab03      	add	r3, sp, #12
 8037bae:	9300      	str	r3, [sp, #0]
 8037bb0:	462a      	mov	r2, r5
 8037bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8037bec <_svfiprintf_r+0x1f0>)
 8037bb4:	a904      	add	r1, sp, #16
 8037bb6:	4638      	mov	r0, r7
 8037bb8:	f3af 8000 	nop.w
 8037bbc:	1c42      	adds	r2, r0, #1
 8037bbe:	4606      	mov	r6, r0
 8037bc0:	d1d6      	bne.n	8037b70 <_svfiprintf_r+0x174>
 8037bc2:	89ab      	ldrh	r3, [r5, #12]
 8037bc4:	065b      	lsls	r3, r3, #25
 8037bc6:	f53f af2d 	bmi.w	8037a24 <_svfiprintf_r+0x28>
 8037bca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8037bcc:	e72c      	b.n	8037a28 <_svfiprintf_r+0x2c>
 8037bce:	ab03      	add	r3, sp, #12
 8037bd0:	9300      	str	r3, [sp, #0]
 8037bd2:	462a      	mov	r2, r5
 8037bd4:	4b05      	ldr	r3, [pc, #20]	@ (8037bec <_svfiprintf_r+0x1f0>)
 8037bd6:	a904      	add	r1, sp, #16
 8037bd8:	4638      	mov	r0, r7
 8037bda:	f000 f879 	bl	8037cd0 <_printf_i>
 8037bde:	e7ed      	b.n	8037bbc <_svfiprintf_r+0x1c0>
 8037be0:	0803a820 	.word	0x0803a820
 8037be4:	0803a82a 	.word	0x0803a82a
 8037be8:	00000000 	.word	0x00000000
 8037bec:	08037945 	.word	0x08037945
 8037bf0:	0803a826 	.word	0x0803a826

08037bf4 <_printf_common>:
 8037bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8037bf8:	4616      	mov	r6, r2
 8037bfa:	4698      	mov	r8, r3
 8037bfc:	688a      	ldr	r2, [r1, #8]
 8037bfe:	690b      	ldr	r3, [r1, #16]
 8037c00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8037c04:	4293      	cmp	r3, r2
 8037c06:	bfb8      	it	lt
 8037c08:	4613      	movlt	r3, r2
 8037c0a:	6033      	str	r3, [r6, #0]
 8037c0c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8037c10:	4607      	mov	r7, r0
 8037c12:	460c      	mov	r4, r1
 8037c14:	b10a      	cbz	r2, 8037c1a <_printf_common+0x26>
 8037c16:	3301      	adds	r3, #1
 8037c18:	6033      	str	r3, [r6, #0]
 8037c1a:	6823      	ldr	r3, [r4, #0]
 8037c1c:	0699      	lsls	r1, r3, #26
 8037c1e:	bf42      	ittt	mi
 8037c20:	6833      	ldrmi	r3, [r6, #0]
 8037c22:	3302      	addmi	r3, #2
 8037c24:	6033      	strmi	r3, [r6, #0]
 8037c26:	6825      	ldr	r5, [r4, #0]
 8037c28:	f015 0506 	ands.w	r5, r5, #6
 8037c2c:	d106      	bne.n	8037c3c <_printf_common+0x48>
 8037c2e:	f104 0a19 	add.w	sl, r4, #25
 8037c32:	68e3      	ldr	r3, [r4, #12]
 8037c34:	6832      	ldr	r2, [r6, #0]
 8037c36:	1a9b      	subs	r3, r3, r2
 8037c38:	42ab      	cmp	r3, r5
 8037c3a:	dc26      	bgt.n	8037c8a <_printf_common+0x96>
 8037c3c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8037c40:	6822      	ldr	r2, [r4, #0]
 8037c42:	3b00      	subs	r3, #0
 8037c44:	bf18      	it	ne
 8037c46:	2301      	movne	r3, #1
 8037c48:	0692      	lsls	r2, r2, #26
 8037c4a:	d42b      	bmi.n	8037ca4 <_printf_common+0xb0>
 8037c4c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8037c50:	4641      	mov	r1, r8
 8037c52:	4638      	mov	r0, r7
 8037c54:	47c8      	blx	r9
 8037c56:	3001      	adds	r0, #1
 8037c58:	d01e      	beq.n	8037c98 <_printf_common+0xa4>
 8037c5a:	6823      	ldr	r3, [r4, #0]
 8037c5c:	6922      	ldr	r2, [r4, #16]
 8037c5e:	f003 0306 	and.w	r3, r3, #6
 8037c62:	2b04      	cmp	r3, #4
 8037c64:	bf02      	ittt	eq
 8037c66:	68e5      	ldreq	r5, [r4, #12]
 8037c68:	6833      	ldreq	r3, [r6, #0]
 8037c6a:	1aed      	subeq	r5, r5, r3
 8037c6c:	68a3      	ldr	r3, [r4, #8]
 8037c6e:	bf0c      	ite	eq
 8037c70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8037c74:	2500      	movne	r5, #0
 8037c76:	4293      	cmp	r3, r2
 8037c78:	bfc4      	itt	gt
 8037c7a:	1a9b      	subgt	r3, r3, r2
 8037c7c:	18ed      	addgt	r5, r5, r3
 8037c7e:	2600      	movs	r6, #0
 8037c80:	341a      	adds	r4, #26
 8037c82:	42b5      	cmp	r5, r6
 8037c84:	d11a      	bne.n	8037cbc <_printf_common+0xc8>
 8037c86:	2000      	movs	r0, #0
 8037c88:	e008      	b.n	8037c9c <_printf_common+0xa8>
 8037c8a:	2301      	movs	r3, #1
 8037c8c:	4652      	mov	r2, sl
 8037c8e:	4641      	mov	r1, r8
 8037c90:	4638      	mov	r0, r7
 8037c92:	47c8      	blx	r9
 8037c94:	3001      	adds	r0, #1
 8037c96:	d103      	bne.n	8037ca0 <_printf_common+0xac>
 8037c98:	f04f 30ff 	mov.w	r0, #4294967295
 8037c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8037ca0:	3501      	adds	r5, #1
 8037ca2:	e7c6      	b.n	8037c32 <_printf_common+0x3e>
 8037ca4:	18e1      	adds	r1, r4, r3
 8037ca6:	1c5a      	adds	r2, r3, #1
 8037ca8:	2030      	movs	r0, #48	@ 0x30
 8037caa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8037cae:	4422      	add	r2, r4
 8037cb0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8037cb4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8037cb8:	3302      	adds	r3, #2
 8037cba:	e7c7      	b.n	8037c4c <_printf_common+0x58>
 8037cbc:	2301      	movs	r3, #1
 8037cbe:	4622      	mov	r2, r4
 8037cc0:	4641      	mov	r1, r8
 8037cc2:	4638      	mov	r0, r7
 8037cc4:	47c8      	blx	r9
 8037cc6:	3001      	adds	r0, #1
 8037cc8:	d0e6      	beq.n	8037c98 <_printf_common+0xa4>
 8037cca:	3601      	adds	r6, #1
 8037ccc:	e7d9      	b.n	8037c82 <_printf_common+0x8e>
	...

08037cd0 <_printf_i>:
 8037cd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8037cd4:	7e0f      	ldrb	r7, [r1, #24]
 8037cd6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8037cd8:	2f78      	cmp	r7, #120	@ 0x78
 8037cda:	4691      	mov	r9, r2
 8037cdc:	4680      	mov	r8, r0
 8037cde:	460c      	mov	r4, r1
 8037ce0:	469a      	mov	sl, r3
 8037ce2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8037ce6:	d807      	bhi.n	8037cf8 <_printf_i+0x28>
 8037ce8:	2f62      	cmp	r7, #98	@ 0x62
 8037cea:	d80a      	bhi.n	8037d02 <_printf_i+0x32>
 8037cec:	2f00      	cmp	r7, #0
 8037cee:	f000 80d2 	beq.w	8037e96 <_printf_i+0x1c6>
 8037cf2:	2f58      	cmp	r7, #88	@ 0x58
 8037cf4:	f000 80b9 	beq.w	8037e6a <_printf_i+0x19a>
 8037cf8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8037cfc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8037d00:	e03a      	b.n	8037d78 <_printf_i+0xa8>
 8037d02:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8037d06:	2b15      	cmp	r3, #21
 8037d08:	d8f6      	bhi.n	8037cf8 <_printf_i+0x28>
 8037d0a:	a101      	add	r1, pc, #4	@ (adr r1, 8037d10 <_printf_i+0x40>)
 8037d0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8037d10:	08037d69 	.word	0x08037d69
 8037d14:	08037d7d 	.word	0x08037d7d
 8037d18:	08037cf9 	.word	0x08037cf9
 8037d1c:	08037cf9 	.word	0x08037cf9
 8037d20:	08037cf9 	.word	0x08037cf9
 8037d24:	08037cf9 	.word	0x08037cf9
 8037d28:	08037d7d 	.word	0x08037d7d
 8037d2c:	08037cf9 	.word	0x08037cf9
 8037d30:	08037cf9 	.word	0x08037cf9
 8037d34:	08037cf9 	.word	0x08037cf9
 8037d38:	08037cf9 	.word	0x08037cf9
 8037d3c:	08037e7d 	.word	0x08037e7d
 8037d40:	08037da7 	.word	0x08037da7
 8037d44:	08037e37 	.word	0x08037e37
 8037d48:	08037cf9 	.word	0x08037cf9
 8037d4c:	08037cf9 	.word	0x08037cf9
 8037d50:	08037e9f 	.word	0x08037e9f
 8037d54:	08037cf9 	.word	0x08037cf9
 8037d58:	08037da7 	.word	0x08037da7
 8037d5c:	08037cf9 	.word	0x08037cf9
 8037d60:	08037cf9 	.word	0x08037cf9
 8037d64:	08037e3f 	.word	0x08037e3f
 8037d68:	6833      	ldr	r3, [r6, #0]
 8037d6a:	1d1a      	adds	r2, r3, #4
 8037d6c:	681b      	ldr	r3, [r3, #0]
 8037d6e:	6032      	str	r2, [r6, #0]
 8037d70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8037d74:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8037d78:	2301      	movs	r3, #1
 8037d7a:	e09d      	b.n	8037eb8 <_printf_i+0x1e8>
 8037d7c:	6833      	ldr	r3, [r6, #0]
 8037d7e:	6820      	ldr	r0, [r4, #0]
 8037d80:	1d19      	adds	r1, r3, #4
 8037d82:	6031      	str	r1, [r6, #0]
 8037d84:	0606      	lsls	r6, r0, #24
 8037d86:	d501      	bpl.n	8037d8c <_printf_i+0xbc>
 8037d88:	681d      	ldr	r5, [r3, #0]
 8037d8a:	e003      	b.n	8037d94 <_printf_i+0xc4>
 8037d8c:	0645      	lsls	r5, r0, #25
 8037d8e:	d5fb      	bpl.n	8037d88 <_printf_i+0xb8>
 8037d90:	f9b3 5000 	ldrsh.w	r5, [r3]
 8037d94:	2d00      	cmp	r5, #0
 8037d96:	da03      	bge.n	8037da0 <_printf_i+0xd0>
 8037d98:	232d      	movs	r3, #45	@ 0x2d
 8037d9a:	426d      	negs	r5, r5
 8037d9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8037da0:	4859      	ldr	r0, [pc, #356]	@ (8037f08 <_printf_i+0x238>)
 8037da2:	230a      	movs	r3, #10
 8037da4:	e011      	b.n	8037dca <_printf_i+0xfa>
 8037da6:	6821      	ldr	r1, [r4, #0]
 8037da8:	6833      	ldr	r3, [r6, #0]
 8037daa:	0608      	lsls	r0, r1, #24
 8037dac:	f853 5b04 	ldr.w	r5, [r3], #4
 8037db0:	d402      	bmi.n	8037db8 <_printf_i+0xe8>
 8037db2:	0649      	lsls	r1, r1, #25
 8037db4:	bf48      	it	mi
 8037db6:	b2ad      	uxthmi	r5, r5
 8037db8:	2f6f      	cmp	r7, #111	@ 0x6f
 8037dba:	4853      	ldr	r0, [pc, #332]	@ (8037f08 <_printf_i+0x238>)
 8037dbc:	6033      	str	r3, [r6, #0]
 8037dbe:	bf14      	ite	ne
 8037dc0:	230a      	movne	r3, #10
 8037dc2:	2308      	moveq	r3, #8
 8037dc4:	2100      	movs	r1, #0
 8037dc6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8037dca:	6866      	ldr	r6, [r4, #4]
 8037dcc:	60a6      	str	r6, [r4, #8]
 8037dce:	2e00      	cmp	r6, #0
 8037dd0:	bfa2      	ittt	ge
 8037dd2:	6821      	ldrge	r1, [r4, #0]
 8037dd4:	f021 0104 	bicge.w	r1, r1, #4
 8037dd8:	6021      	strge	r1, [r4, #0]
 8037dda:	b90d      	cbnz	r5, 8037de0 <_printf_i+0x110>
 8037ddc:	2e00      	cmp	r6, #0
 8037dde:	d04b      	beq.n	8037e78 <_printf_i+0x1a8>
 8037de0:	4616      	mov	r6, r2
 8037de2:	fbb5 f1f3 	udiv	r1, r5, r3
 8037de6:	fb03 5711 	mls	r7, r3, r1, r5
 8037dea:	5dc7      	ldrb	r7, [r0, r7]
 8037dec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8037df0:	462f      	mov	r7, r5
 8037df2:	42bb      	cmp	r3, r7
 8037df4:	460d      	mov	r5, r1
 8037df6:	d9f4      	bls.n	8037de2 <_printf_i+0x112>
 8037df8:	2b08      	cmp	r3, #8
 8037dfa:	d10b      	bne.n	8037e14 <_printf_i+0x144>
 8037dfc:	6823      	ldr	r3, [r4, #0]
 8037dfe:	07df      	lsls	r7, r3, #31
 8037e00:	d508      	bpl.n	8037e14 <_printf_i+0x144>
 8037e02:	6923      	ldr	r3, [r4, #16]
 8037e04:	6861      	ldr	r1, [r4, #4]
 8037e06:	4299      	cmp	r1, r3
 8037e08:	bfde      	ittt	le
 8037e0a:	2330      	movle	r3, #48	@ 0x30
 8037e0c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8037e10:	f106 36ff 	addle.w	r6, r6, #4294967295
 8037e14:	1b92      	subs	r2, r2, r6
 8037e16:	6122      	str	r2, [r4, #16]
 8037e18:	f8cd a000 	str.w	sl, [sp]
 8037e1c:	464b      	mov	r3, r9
 8037e1e:	aa03      	add	r2, sp, #12
 8037e20:	4621      	mov	r1, r4
 8037e22:	4640      	mov	r0, r8
 8037e24:	f7ff fee6 	bl	8037bf4 <_printf_common>
 8037e28:	3001      	adds	r0, #1
 8037e2a:	d14a      	bne.n	8037ec2 <_printf_i+0x1f2>
 8037e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8037e30:	b004      	add	sp, #16
 8037e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8037e36:	6823      	ldr	r3, [r4, #0]
 8037e38:	f043 0320 	orr.w	r3, r3, #32
 8037e3c:	6023      	str	r3, [r4, #0]
 8037e3e:	4833      	ldr	r0, [pc, #204]	@ (8037f0c <_printf_i+0x23c>)
 8037e40:	2778      	movs	r7, #120	@ 0x78
 8037e42:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8037e46:	6823      	ldr	r3, [r4, #0]
 8037e48:	6831      	ldr	r1, [r6, #0]
 8037e4a:	061f      	lsls	r7, r3, #24
 8037e4c:	f851 5b04 	ldr.w	r5, [r1], #4
 8037e50:	d402      	bmi.n	8037e58 <_printf_i+0x188>
 8037e52:	065f      	lsls	r7, r3, #25
 8037e54:	bf48      	it	mi
 8037e56:	b2ad      	uxthmi	r5, r5
 8037e58:	6031      	str	r1, [r6, #0]
 8037e5a:	07d9      	lsls	r1, r3, #31
 8037e5c:	bf44      	itt	mi
 8037e5e:	f043 0320 	orrmi.w	r3, r3, #32
 8037e62:	6023      	strmi	r3, [r4, #0]
 8037e64:	b11d      	cbz	r5, 8037e6e <_printf_i+0x19e>
 8037e66:	2310      	movs	r3, #16
 8037e68:	e7ac      	b.n	8037dc4 <_printf_i+0xf4>
 8037e6a:	4827      	ldr	r0, [pc, #156]	@ (8037f08 <_printf_i+0x238>)
 8037e6c:	e7e9      	b.n	8037e42 <_printf_i+0x172>
 8037e6e:	6823      	ldr	r3, [r4, #0]
 8037e70:	f023 0320 	bic.w	r3, r3, #32
 8037e74:	6023      	str	r3, [r4, #0]
 8037e76:	e7f6      	b.n	8037e66 <_printf_i+0x196>
 8037e78:	4616      	mov	r6, r2
 8037e7a:	e7bd      	b.n	8037df8 <_printf_i+0x128>
 8037e7c:	6833      	ldr	r3, [r6, #0]
 8037e7e:	6825      	ldr	r5, [r4, #0]
 8037e80:	6961      	ldr	r1, [r4, #20]
 8037e82:	1d18      	adds	r0, r3, #4
 8037e84:	6030      	str	r0, [r6, #0]
 8037e86:	062e      	lsls	r6, r5, #24
 8037e88:	681b      	ldr	r3, [r3, #0]
 8037e8a:	d501      	bpl.n	8037e90 <_printf_i+0x1c0>
 8037e8c:	6019      	str	r1, [r3, #0]
 8037e8e:	e002      	b.n	8037e96 <_printf_i+0x1c6>
 8037e90:	0668      	lsls	r0, r5, #25
 8037e92:	d5fb      	bpl.n	8037e8c <_printf_i+0x1bc>
 8037e94:	8019      	strh	r1, [r3, #0]
 8037e96:	2300      	movs	r3, #0
 8037e98:	6123      	str	r3, [r4, #16]
 8037e9a:	4616      	mov	r6, r2
 8037e9c:	e7bc      	b.n	8037e18 <_printf_i+0x148>
 8037e9e:	6833      	ldr	r3, [r6, #0]
 8037ea0:	1d1a      	adds	r2, r3, #4
 8037ea2:	6032      	str	r2, [r6, #0]
 8037ea4:	681e      	ldr	r6, [r3, #0]
 8037ea6:	6862      	ldr	r2, [r4, #4]
 8037ea8:	2100      	movs	r1, #0
 8037eaa:	4630      	mov	r0, r6
 8037eac:	f7e8 f990 	bl	80201d0 <memchr>
 8037eb0:	b108      	cbz	r0, 8037eb6 <_printf_i+0x1e6>
 8037eb2:	1b80      	subs	r0, r0, r6
 8037eb4:	6060      	str	r0, [r4, #4]
 8037eb6:	6863      	ldr	r3, [r4, #4]
 8037eb8:	6123      	str	r3, [r4, #16]
 8037eba:	2300      	movs	r3, #0
 8037ebc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8037ec0:	e7aa      	b.n	8037e18 <_printf_i+0x148>
 8037ec2:	6923      	ldr	r3, [r4, #16]
 8037ec4:	4632      	mov	r2, r6
 8037ec6:	4649      	mov	r1, r9
 8037ec8:	4640      	mov	r0, r8
 8037eca:	47d0      	blx	sl
 8037ecc:	3001      	adds	r0, #1
 8037ece:	d0ad      	beq.n	8037e2c <_printf_i+0x15c>
 8037ed0:	6823      	ldr	r3, [r4, #0]
 8037ed2:	079b      	lsls	r3, r3, #30
 8037ed4:	d413      	bmi.n	8037efe <_printf_i+0x22e>
 8037ed6:	68e0      	ldr	r0, [r4, #12]
 8037ed8:	9b03      	ldr	r3, [sp, #12]
 8037eda:	4298      	cmp	r0, r3
 8037edc:	bfb8      	it	lt
 8037ede:	4618      	movlt	r0, r3
 8037ee0:	e7a6      	b.n	8037e30 <_printf_i+0x160>
 8037ee2:	2301      	movs	r3, #1
 8037ee4:	4632      	mov	r2, r6
 8037ee6:	4649      	mov	r1, r9
 8037ee8:	4640      	mov	r0, r8
 8037eea:	47d0      	blx	sl
 8037eec:	3001      	adds	r0, #1
 8037eee:	d09d      	beq.n	8037e2c <_printf_i+0x15c>
 8037ef0:	3501      	adds	r5, #1
 8037ef2:	68e3      	ldr	r3, [r4, #12]
 8037ef4:	9903      	ldr	r1, [sp, #12]
 8037ef6:	1a5b      	subs	r3, r3, r1
 8037ef8:	42ab      	cmp	r3, r5
 8037efa:	dcf2      	bgt.n	8037ee2 <_printf_i+0x212>
 8037efc:	e7eb      	b.n	8037ed6 <_printf_i+0x206>
 8037efe:	2500      	movs	r5, #0
 8037f00:	f104 0619 	add.w	r6, r4, #25
 8037f04:	e7f5      	b.n	8037ef2 <_printf_i+0x222>
 8037f06:	bf00      	nop
 8037f08:	0803a831 	.word	0x0803a831
 8037f0c:	0803a842 	.word	0x0803a842

08037f10 <memmove>:
 8037f10:	4288      	cmp	r0, r1
 8037f12:	b510      	push	{r4, lr}
 8037f14:	eb01 0402 	add.w	r4, r1, r2
 8037f18:	d902      	bls.n	8037f20 <memmove+0x10>
 8037f1a:	4284      	cmp	r4, r0
 8037f1c:	4623      	mov	r3, r4
 8037f1e:	d807      	bhi.n	8037f30 <memmove+0x20>
 8037f20:	1e43      	subs	r3, r0, #1
 8037f22:	42a1      	cmp	r1, r4
 8037f24:	d008      	beq.n	8037f38 <memmove+0x28>
 8037f26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8037f2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8037f2e:	e7f8      	b.n	8037f22 <memmove+0x12>
 8037f30:	4402      	add	r2, r0
 8037f32:	4601      	mov	r1, r0
 8037f34:	428a      	cmp	r2, r1
 8037f36:	d100      	bne.n	8037f3a <memmove+0x2a>
 8037f38:	bd10      	pop	{r4, pc}
 8037f3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8037f3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8037f42:	e7f7      	b.n	8037f34 <memmove+0x24>

08037f44 <_realloc_r>:
 8037f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8037f48:	4680      	mov	r8, r0
 8037f4a:	4615      	mov	r5, r2
 8037f4c:	460c      	mov	r4, r1
 8037f4e:	b921      	cbnz	r1, 8037f5a <_realloc_r+0x16>
 8037f50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8037f54:	4611      	mov	r1, r2
 8037f56:	f7ff bb59 	b.w	803760c <_malloc_r>
 8037f5a:	b92a      	cbnz	r2, 8037f68 <_realloc_r+0x24>
 8037f5c:	f7ff fca8 	bl	80378b0 <_free_r>
 8037f60:	2400      	movs	r4, #0
 8037f62:	4620      	mov	r0, r4
 8037f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8037f68:	f000 f81a 	bl	8037fa0 <_malloc_usable_size_r>
 8037f6c:	4285      	cmp	r5, r0
 8037f6e:	4606      	mov	r6, r0
 8037f70:	d802      	bhi.n	8037f78 <_realloc_r+0x34>
 8037f72:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8037f76:	d8f4      	bhi.n	8037f62 <_realloc_r+0x1e>
 8037f78:	4629      	mov	r1, r5
 8037f7a:	4640      	mov	r0, r8
 8037f7c:	f7ff fb46 	bl	803760c <_malloc_r>
 8037f80:	4607      	mov	r7, r0
 8037f82:	2800      	cmp	r0, #0
 8037f84:	d0ec      	beq.n	8037f60 <_realloc_r+0x1c>
 8037f86:	42b5      	cmp	r5, r6
 8037f88:	462a      	mov	r2, r5
 8037f8a:	4621      	mov	r1, r4
 8037f8c:	bf28      	it	cs
 8037f8e:	4632      	movcs	r2, r6
 8037f90:	f7ff fc80 	bl	8037894 <memcpy>
 8037f94:	4621      	mov	r1, r4
 8037f96:	4640      	mov	r0, r8
 8037f98:	f7ff fc8a 	bl	80378b0 <_free_r>
 8037f9c:	463c      	mov	r4, r7
 8037f9e:	e7e0      	b.n	8037f62 <_realloc_r+0x1e>

08037fa0 <_malloc_usable_size_r>:
 8037fa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8037fa4:	1f18      	subs	r0, r3, #4
 8037fa6:	2b00      	cmp	r3, #0
 8037fa8:	bfbc      	itt	lt
 8037faa:	580b      	ldrlt	r3, [r1, r0]
 8037fac:	18c0      	addlt	r0, r0, r3
 8037fae:	4770      	bx	lr

08037fb0 <_init>:
 8037fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8037fb2:	bf00      	nop
 8037fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8037fb6:	bc08      	pop	{r3}
 8037fb8:	469e      	mov	lr, r3
 8037fba:	4770      	bx	lr

08037fbc <_fini>:
 8037fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8037fbe:	bf00      	nop
 8037fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8037fc2:	bc08      	pop	{r3}
 8037fc4:	469e      	mov	lr, r3
 8037fc6:	4770      	bx	lr
