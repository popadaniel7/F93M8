
DMU_FBL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036dc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003864  08003864  00004864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003874  08003874  0000501c  2**0
                  CONTENTS
  4 .ARM          00000008  08003874  08003874  00004874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800387c  0800387c  0000501c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800387c  0800387c  0000487c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003880  08003880  00004880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08003884  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000501c  2**0
                  CONTENTS
 10 .bss          00000108  2000001c  2000001c  0000501c  2**2
                  ALLOC
 11 ._user_heap_stack 00000404  20000124  20000124  0000501c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000501c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000830d  00000000  00000000  0000504c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e23  00000000  00000000  0000d359  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000830  00000000  00000000  0000f180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000607  00000000  00000000  0000f9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020605  00000000  00000000  0000ffb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a849  00000000  00000000  000305bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2fd7  00000000  00000000  0003ae05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fdddc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001f5c  00000000  00000000  000fde20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000074  00000000  00000000  000ffd7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800384c 	.word	0x0800384c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	0800384c 	.word	0x0800384c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b08a      	sub	sp, #40	@ 0x28
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_Init 0 */
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */
  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80004be:	4b2b      	ldr	r3, [pc, #172]	@ (800056c <MX_CAN1_Init+0xb4>)
 80004c0:	4a2b      	ldr	r2, [pc, #172]	@ (8000570 <MX_CAN1_Init+0xb8>)
 80004c2:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 80004c4:	4b29      	ldr	r3, [pc, #164]	@ (800056c <MX_CAN1_Init+0xb4>)
 80004c6:	2204      	movs	r2, #4
 80004c8:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80004ca:	4b28      	ldr	r3, [pc, #160]	@ (800056c <MX_CAN1_Init+0xb4>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80004d0:	4b26      	ldr	r3, [pc, #152]	@ (800056c <MX_CAN1_Init+0xb4>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_16TQ;
 80004d6:	4b25      	ldr	r3, [pc, #148]	@ (800056c <MX_CAN1_Init+0xb4>)
 80004d8:	f44f 2270 	mov.w	r2, #983040	@ 0xf0000
 80004dc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 80004de:	4b23      	ldr	r3, [pc, #140]	@ (800056c <MX_CAN1_Init+0xb4>)
 80004e0:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 80004e4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = ENABLE;
 80004e6:	4b21      	ldr	r3, [pc, #132]	@ (800056c <MX_CAN1_Init+0xb4>)
 80004e8:	2201      	movs	r2, #1
 80004ea:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 80004ec:	4b1f      	ldr	r3, [pc, #124]	@ (800056c <MX_CAN1_Init+0xb4>)
 80004ee:	2201      	movs	r2, #1
 80004f0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 80004f2:	4b1e      	ldr	r3, [pc, #120]	@ (800056c <MX_CAN1_Init+0xb4>)
 80004f4:	2201      	movs	r2, #1
 80004f6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 80004f8:	4b1c      	ldr	r3, [pc, #112]	@ (800056c <MX_CAN1_Init+0xb4>)
 80004fa:	2201      	movs	r2, #1
 80004fc:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = ENABLE;
 80004fe:	4b1b      	ldr	r3, [pc, #108]	@ (800056c <MX_CAN1_Init+0xb4>)
 8000500:	2201      	movs	r2, #1
 8000502:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8000504:	4b19      	ldr	r3, [pc, #100]	@ (800056c <MX_CAN1_Init+0xb4>)
 8000506:	2201      	movs	r2, #1
 8000508:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800050a:	4818      	ldr	r0, [pc, #96]	@ (800056c <MX_CAN1_Init+0xb4>)
 800050c:	f000 fffc 	bl	8001508 <HAL_CAN_Init>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000516:	f000 fe89 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
	CAN_FilterTypeDef filterConfig;
	filterConfig.FilterBank = 13;
 800051a:	230d      	movs	r3, #13
 800051c:	617b      	str	r3, [r7, #20]
	filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800051e:	2300      	movs	r3, #0
 8000520:	61bb      	str	r3, [r7, #24]
	filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000522:	2301      	movs	r3, #1
 8000524:	61fb      	str	r3, [r7, #28]
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000526:	2300      	movs	r3, #0
 8000528:	613b      	str	r3, [r7, #16]
	filterConfig.FilterActivation = ENABLE;
 800052a:	2301      	movs	r3, #1
 800052c:	623b      	str	r3, [r7, #32]
	filterConfig.FilterIdHigh = (0x704 << 5) & 0xFFFF;
 800052e:	f24e 0380 	movw	r3, #57472	@ 0xe080
 8000532:	603b      	str	r3, [r7, #0]
	filterConfig.FilterIdLow = 0x0000;
 8000534:	2300      	movs	r3, #0
 8000536:	607b      	str	r3, [r7, #4]
	filterConfig.FilterMaskIdHigh = (0x7FF << 5);
 8000538:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800053c:	60bb      	str	r3, [r7, #8]
	filterConfig.FilterMaskIdLow = 0x0000;
 800053e:	2300      	movs	r3, #0
 8000540:	60fb      	str	r3, [r7, #12]
	HAL_CAN_ConfigFilter(&hcan1, &filterConfig);
 8000542:	463b      	mov	r3, r7
 8000544:	4619      	mov	r1, r3
 8000546:	4809      	ldr	r0, [pc, #36]	@ (800056c <MX_CAN1_Init+0xb4>)
 8000548:	f001 f924 	bl	8001794 <HAL_CAN_ConfigFilter>
	static uint32_t notificationLocal = 0;
	HAL_CAN_Start(&hcan1);
 800054c:	4807      	ldr	r0, [pc, #28]	@ (800056c <MX_CAN1_Init+0xb4>)
 800054e:	f001 fa01 	bl	8001954 <HAL_CAN_Start>
	notificationLocal = CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_FULL;
 8000552:	4b08      	ldr	r3, [pc, #32]	@ (8000574 <MX_CAN1_Init+0xbc>)
 8000554:	2206      	movs	r2, #6
 8000556:	601a      	str	r2, [r3, #0]
	HAL_CAN_ActivateNotification(&hcan1, notificationLocal);
 8000558:	4b06      	ldr	r3, [pc, #24]	@ (8000574 <MX_CAN1_Init+0xbc>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4619      	mov	r1, r3
 800055e:	4803      	ldr	r0, [pc, #12]	@ (800056c <MX_CAN1_Init+0xb4>)
 8000560:	f001 fc2e 	bl	8001dc0 <HAL_CAN_ActivateNotification>
  /* USER CODE END CAN1_Init 2 */

}
 8000564:	bf00      	nop
 8000566:	3728      	adds	r7, #40	@ 0x28
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	20000038 	.word	0x20000038
 8000570:	40006400 	.word	0x40006400
 8000574:	2000009c 	.word	0x2000009c

08000578 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b08a      	sub	sp, #40	@ 0x28
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000580:	f107 0314 	add.w	r3, r7, #20
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a22      	ldr	r2, [pc, #136]	@ (8000620 <HAL_CAN_MspInit+0xa8>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d13d      	bne.n	8000616 <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */
  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	613b      	str	r3, [r7, #16]
 800059e:	4b21      	ldr	r3, [pc, #132]	@ (8000624 <HAL_CAN_MspInit+0xac>)
 80005a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a2:	4a20      	ldr	r2, [pc, #128]	@ (8000624 <HAL_CAN_MspInit+0xac>)
 80005a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80005aa:	4b1e      	ldr	r3, [pc, #120]	@ (8000624 <HAL_CAN_MspInit+0xac>)
 80005ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80005b2:	613b      	str	r3, [r7, #16]
 80005b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	60fb      	str	r3, [r7, #12]
 80005ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000624 <HAL_CAN_MspInit+0xac>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005be:	4a19      	ldr	r2, [pc, #100]	@ (8000624 <HAL_CAN_MspInit+0xac>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005c6:	4b17      	ldr	r3, [pc, #92]	@ (8000624 <HAL_CAN_MspInit+0xac>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80005d2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80005d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d8:	2302      	movs	r3, #2
 80005da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005dc:	2300      	movs	r3, #0
 80005de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005e0:	2303      	movs	r3, #3
 80005e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80005e4:	2309      	movs	r3, #9
 80005e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e8:	f107 0314 	add.w	r3, r7, #20
 80005ec:	4619      	mov	r1, r3
 80005ee:	480e      	ldr	r0, [pc, #56]	@ (8000628 <HAL_CAN_MspInit+0xb0>)
 80005f0:	f002 fae6 	bl	8002bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80005f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005fa:	2302      	movs	r3, #2
 80005fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005fe:	2301      	movs	r3, #1
 8000600:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000602:	2303      	movs	r3, #3
 8000604:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000606:	2309      	movs	r3, #9
 8000608:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	4619      	mov	r1, r3
 8000610:	4805      	ldr	r0, [pc, #20]	@ (8000628 <HAL_CAN_MspInit+0xb0>)
 8000612:	f002 fad5 	bl	8002bc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */
  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000616:	bf00      	nop
 8000618:	3728      	adds	r7, #40	@ 0x28
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40006400 	.word	0x40006400
 8000624:	40023800 	.word	0x40023800
 8000628:	40020000 	.word	0x40020000

0800062c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b08c      	sub	sp, #48	@ 0x30
 8000630:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000632:	f107 031c 	add.w	r3, r7, #28
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
 8000640:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	61bb      	str	r3, [r7, #24]
 8000646:	4b4b      	ldr	r3, [pc, #300]	@ (8000774 <MX_GPIO_Init+0x148>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	4a4a      	ldr	r2, [pc, #296]	@ (8000774 <MX_GPIO_Init+0x148>)
 800064c:	f043 0310 	orr.w	r3, r3, #16
 8000650:	6313      	str	r3, [r2, #48]	@ 0x30
 8000652:	4b48      	ldr	r3, [pc, #288]	@ (8000774 <MX_GPIO_Init+0x148>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000656:	f003 0310 	and.w	r3, r3, #16
 800065a:	61bb      	str	r3, [r7, #24]
 800065c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800065e:	2300      	movs	r3, #0
 8000660:	617b      	str	r3, [r7, #20]
 8000662:	4b44      	ldr	r3, [pc, #272]	@ (8000774 <MX_GPIO_Init+0x148>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	4a43      	ldr	r2, [pc, #268]	@ (8000774 <MX_GPIO_Init+0x148>)
 8000668:	f043 0304 	orr.w	r3, r3, #4
 800066c:	6313      	str	r3, [r2, #48]	@ 0x30
 800066e:	4b41      	ldr	r3, [pc, #260]	@ (8000774 <MX_GPIO_Init+0x148>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000672:	f003 0304 	and.w	r3, r3, #4
 8000676:	617b      	str	r3, [r7, #20]
 8000678:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	613b      	str	r3, [r7, #16]
 800067e:	4b3d      	ldr	r3, [pc, #244]	@ (8000774 <MX_GPIO_Init+0x148>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000682:	4a3c      	ldr	r2, [pc, #240]	@ (8000774 <MX_GPIO_Init+0x148>)
 8000684:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000688:	6313      	str	r3, [r2, #48]	@ 0x30
 800068a:	4b3a      	ldr	r3, [pc, #232]	@ (8000774 <MX_GPIO_Init+0x148>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000692:	613b      	str	r3, [r7, #16]
 8000694:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	60fb      	str	r3, [r7, #12]
 800069a:	4b36      	ldr	r3, [pc, #216]	@ (8000774 <MX_GPIO_Init+0x148>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069e:	4a35      	ldr	r2, [pc, #212]	@ (8000774 <MX_GPIO_Init+0x148>)
 80006a0:	f043 0301 	orr.w	r3, r3, #1
 80006a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006a6:	4b33      	ldr	r3, [pc, #204]	@ (8000774 <MX_GPIO_Init+0x148>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	60bb      	str	r3, [r7, #8]
 80006b6:	4b2f      	ldr	r3, [pc, #188]	@ (8000774 <MX_GPIO_Init+0x148>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	4a2e      	ldr	r2, [pc, #184]	@ (8000774 <MX_GPIO_Init+0x148>)
 80006bc:	f043 0302 	orr.w	r3, r3, #2
 80006c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c2:	4b2c      	ldr	r3, [pc, #176]	@ (8000774 <MX_GPIO_Init+0x148>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c6:	f003 0302 	and.w	r3, r3, #2
 80006ca:	60bb      	str	r3, [r7, #8]
 80006cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	4b28      	ldr	r3, [pc, #160]	@ (8000774 <MX_GPIO_Init+0x148>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d6:	4a27      	ldr	r2, [pc, #156]	@ (8000774 <MX_GPIO_Init+0x148>)
 80006d8:	f043 0308 	orr.w	r3, r3, #8
 80006dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006de:	4b25      	ldr	r3, [pc, #148]	@ (8000774 <MX_GPIO_Init+0x148>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e2:	f003 0308 	and.w	r3, r3, #8
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80006ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006ee:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006f0:	2303      	movs	r3, #3
 80006f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006f8:	f107 031c 	add.w	r3, r7, #28
 80006fc:	4619      	mov	r1, r3
 80006fe:	481e      	ldr	r0, [pc, #120]	@ (8000778 <MX_GPIO_Init+0x14c>)
 8000700:	f002 fa5e 	bl	8002bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8000704:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000708:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800070a:	2303      	movs	r3, #3
 800070c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000712:	f107 031c 	add.w	r3, r7, #28
 8000716:	4619      	mov	r1, r3
 8000718:	4818      	ldr	r0, [pc, #96]	@ (800077c <MX_GPIO_Init+0x150>)
 800071a:	f002 fa51 	bl	8002bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800071e:	f248 73ff 	movw	r3, #34815	@ 0x87ff
 8000722:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000724:	2303      	movs	r3, #3
 8000726:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072c:	f107 031c 	add.w	r3, r7, #28
 8000730:	4619      	mov	r1, r3
 8000732:	4813      	ldr	r0, [pc, #76]	@ (8000780 <MX_GPIO_Init+0x154>)
 8000734:	f002 fa44 	bl	8002bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000738:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800073c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800073e:	2303      	movs	r3, #3
 8000740:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	4619      	mov	r1, r3
 800074c:	480d      	ldr	r0, [pc, #52]	@ (8000784 <MX_GPIO_Init+0x158>)
 800074e:	f002 fa37 	bl	8002bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000752:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000756:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000758:	2303      	movs	r3, #3
 800075a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000760:	f107 031c 	add.w	r3, r7, #28
 8000764:	4619      	mov	r1, r3
 8000766:	4808      	ldr	r0, [pc, #32]	@ (8000788 <MX_GPIO_Init+0x15c>)
 8000768:	f002 fa2a 	bl	8002bc0 <HAL_GPIO_Init>

}
 800076c:	bf00      	nop
 800076e:	3730      	adds	r7, #48	@ 0x30
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40023800 	.word	0x40023800
 8000778:	40021000 	.word	0x40021000
 800077c:	40020800 	.word	0x40020800
 8000780:	40020000 	.word	0x40020000
 8000784:	40020400 	.word	0x40020400
 8000788:	40020c00 	.word	0x40020c00

0800078c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000790:	f3bf 8f4f 	dsb	sy
}
 8000794:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000796:	4b06      	ldr	r3, [pc, #24]	@ (80007b0 <__NVIC_SystemReset+0x24>)
 8000798:	68db      	ldr	r3, [r3, #12]
 800079a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800079e:	4904      	ldr	r1, [pc, #16]	@ (80007b0 <__NVIC_SystemReset+0x24>)
 80007a0:	4b04      	ldr	r3, [pc, #16]	@ (80007b4 <__NVIC_SystemReset+0x28>)
 80007a2:	4313      	orrs	r3, r2
 80007a4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80007a6:	f3bf 8f4f 	dsb	sy
}
 80007aa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80007ac:	bf00      	nop
 80007ae:	e7fd      	b.n	80007ac <__NVIC_SystemReset+0x20>
 80007b0:	e000ed00 	.word	0xe000ed00
 80007b4:	05fa0004 	.word	0x05fa0004

080007b8 <HAL_CAN_RxFifo0FullCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &FBL_RxHeader, FBL_RxFrame);
 80007c0:	4b24      	ldr	r3, [pc, #144]	@ (8000854 <HAL_CAN_RxFifo0FullCallback+0x9c>)
 80007c2:	4a25      	ldr	r2, [pc, #148]	@ (8000858 <HAL_CAN_RxFifo0FullCallback+0xa0>)
 80007c4:	2100      	movs	r1, #0
 80007c6:	4825      	ldr	r0, [pc, #148]	@ (800085c <HAL_CAN_RxFifo0FullCallback+0xa4>)
 80007c8:	f001 f9d8 	bl	8001b7c <HAL_CAN_GetRxMessage>
	switch(FBL_DSC_State)
 80007cc:	4b24      	ldr	r3, [pc, #144]	@ (8000860 <HAL_CAN_RxFifo0FullCallback+0xa8>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	2b06      	cmp	r3, #6
 80007d2:	d00c      	beq.n	80007ee <HAL_CAN_RxFifo0FullCallback+0x36>
 80007d4:	2b06      	cmp	r3, #6
 80007d6:	dc0d      	bgt.n	80007f4 <HAL_CAN_RxFifo0FullCallback+0x3c>
 80007d8:	2b02      	cmp	r3, #2
 80007da:	d002      	beq.n	80007e2 <HAL_CAN_RxFifo0FullCallback+0x2a>
 80007dc:	2b05      	cmp	r3, #5
 80007de:	d003      	beq.n	80007e8 <HAL_CAN_RxFifo0FullCallback+0x30>
 80007e0:	e008      	b.n	80007f4 <HAL_CAN_RxFifo0FullCallback+0x3c>
	{
	case PROGRAMMING:
		FBL_DiagService_DSC_Programming();
 80007e2:	f000 fc95 	bl	8001110 <FBL_DiagService_DSC_Programming>
		break;
 80007e6:	e030      	b.n	800084a <HAL_CAN_RxFifo0FullCallback+0x92>
	case HARDRESET:
		FBL_DiagService_ER_HardReset();
 80007e8:	f000 fc18 	bl	800101c <FBL_DiagService_ER_HardReset>
		break;
 80007ec:	e02d      	b.n	800084a <HAL_CAN_RxFifo0FullCallback+0x92>
	case SOFTRESET:
		FBL_DiagService_ER_SoftReset();
 80007ee:	f000 fc09 	bl	8001004 <FBL_DiagService_ER_SoftReset>
		break;
 80007f2:	e02a      	b.n	800084a <HAL_CAN_RxFifo0FullCallback+0x92>
	default:
		if(FBL_RxFrame[1] == 0x50 && FBL_RxFrame[2] == 0x02)
 80007f4:	4b17      	ldr	r3, [pc, #92]	@ (8000854 <HAL_CAN_RxFifo0FullCallback+0x9c>)
 80007f6:	785b      	ldrb	r3, [r3, #1]
 80007f8:	2b50      	cmp	r3, #80	@ 0x50
 80007fa:	d125      	bne.n	8000848 <HAL_CAN_RxFifo0FullCallback+0x90>
 80007fc:	4b15      	ldr	r3, [pc, #84]	@ (8000854 <HAL_CAN_RxFifo0FullCallback+0x9c>)
 80007fe:	789b      	ldrb	r3, [r3, #2]
 8000800:	2b02      	cmp	r3, #2
 8000802:	d121      	bne.n	8000848 <HAL_CAN_RxFifo0FullCallback+0x90>
		{
			FBL_TxHeader.DLC = FBL_RxHeader.DLC;
 8000804:	4b14      	ldr	r3, [pc, #80]	@ (8000858 <HAL_CAN_RxFifo0FullCallback+0xa0>)
 8000806:	691b      	ldr	r3, [r3, #16]
 8000808:	4a16      	ldr	r2, [pc, #88]	@ (8000864 <HAL_CAN_RxFifo0FullCallback+0xac>)
 800080a:	6113      	str	r3, [r2, #16]
			FBL_TxHeader.StdId = FBL_RxHeader.StdId + 1;
 800080c:	4b12      	ldr	r3, [pc, #72]	@ (8000858 <HAL_CAN_RxFifo0FullCallback+0xa0>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	3301      	adds	r3, #1
 8000812:	4a14      	ldr	r2, [pc, #80]	@ (8000864 <HAL_CAN_RxFifo0FullCallback+0xac>)
 8000814:	6013      	str	r3, [r2, #0]
			FBL_TxFrame[0] = FBL_RxFrame[0];
 8000816:	4b0f      	ldr	r3, [pc, #60]	@ (8000854 <HAL_CAN_RxFifo0FullCallback+0x9c>)
 8000818:	781a      	ldrb	r2, [r3, #0]
 800081a:	4b13      	ldr	r3, [pc, #76]	@ (8000868 <HAL_CAN_RxFifo0FullCallback+0xb0>)
 800081c:	701a      	strb	r2, [r3, #0]
			FBL_TxFrame[1] = FBL_RxFrame[1] + 0x40;
 800081e:	4b0d      	ldr	r3, [pc, #52]	@ (8000854 <HAL_CAN_RxFifo0FullCallback+0x9c>)
 8000820:	785b      	ldrb	r3, [r3, #1]
 8000822:	3340      	adds	r3, #64	@ 0x40
 8000824:	b2da      	uxtb	r2, r3
 8000826:	4b10      	ldr	r3, [pc, #64]	@ (8000868 <HAL_CAN_RxFifo0FullCallback+0xb0>)
 8000828:	705a      	strb	r2, [r3, #1]
			FBL_TxFrame[2] = FBL_RxFrame[2];
 800082a:	4b0a      	ldr	r3, [pc, #40]	@ (8000854 <HAL_CAN_RxFifo0FullCallback+0x9c>)
 800082c:	789a      	ldrb	r2, [r3, #2]
 800082e:	4b0e      	ldr	r3, [pc, #56]	@ (8000868 <HAL_CAN_RxFifo0FullCallback+0xb0>)
 8000830:	709a      	strb	r2, [r3, #2]
			FBL_DSC_State = PROGRAMMING;
 8000832:	4b0b      	ldr	r3, [pc, #44]	@ (8000860 <HAL_CAN_RxFifo0FullCallback+0xa8>)
 8000834:	2202      	movs	r2, #2
 8000836:	701a      	strb	r2, [r3, #0]
			HAL_CAN_AddTxMessage(&hcan1, &FBL_TxHeader, FBL_TxFrame, &FBL_TxMailbox);
 8000838:	4b0c      	ldr	r3, [pc, #48]	@ (800086c <HAL_CAN_RxFifo0FullCallback+0xb4>)
 800083a:	4a0b      	ldr	r2, [pc, #44]	@ (8000868 <HAL_CAN_RxFifo0FullCallback+0xb0>)
 800083c:	4909      	ldr	r1, [pc, #36]	@ (8000864 <HAL_CAN_RxFifo0FullCallback+0xac>)
 800083e:	4807      	ldr	r0, [pc, #28]	@ (800085c <HAL_CAN_RxFifo0FullCallback+0xa4>)
 8000840:	f001 f8cc 	bl	80019dc <HAL_CAN_AddTxMessage>
			FBL_DiagService_DSC_Programming();
 8000844:	f000 fc64 	bl	8001110 <FBL_DiagService_DSC_Programming>
		}
		else
		{
			/* Do nothing. */
		}
		break;
 8000848:	bf00      	nop
	}
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	200000a0 	.word	0x200000a0
 8000858:	200000b0 	.word	0x200000b0
 800085c:	20000038 	.word	0x20000038
 8000860:	20000004 	.word	0x20000004
 8000864:	200000cc 	.word	0x200000cc
 8000868:	200000a8 	.word	0x200000a8
 800086c:	200000e4 	.word	0x200000e4

08000870 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &FBL_RxHeader, FBL_RxFrame);
 8000878:	4b24      	ldr	r3, [pc, #144]	@ (800090c <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 800087a:	4a25      	ldr	r2, [pc, #148]	@ (8000910 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 800087c:	2100      	movs	r1, #0
 800087e:	4825      	ldr	r0, [pc, #148]	@ (8000914 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8000880:	f001 f97c 	bl	8001b7c <HAL_CAN_GetRxMessage>
	switch(FBL_DSC_State)
 8000884:	4b24      	ldr	r3, [pc, #144]	@ (8000918 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b06      	cmp	r3, #6
 800088a:	d00c      	beq.n	80008a6 <HAL_CAN_RxFifo0MsgPendingCallback+0x36>
 800088c:	2b06      	cmp	r3, #6
 800088e:	dc0d      	bgt.n	80008ac <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>
 8000890:	2b02      	cmp	r3, #2
 8000892:	d002      	beq.n	800089a <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
 8000894:	2b05      	cmp	r3, #5
 8000896:	d003      	beq.n	80008a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>
 8000898:	e008      	b.n	80008ac <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>
	{
	case PROGRAMMING:
		FBL_DiagService_DSC_Programming();
 800089a:	f000 fc39 	bl	8001110 <FBL_DiagService_DSC_Programming>
		break;
 800089e:	e030      	b.n	8000902 <HAL_CAN_RxFifo0MsgPendingCallback+0x92>
	case HARDRESET:
		FBL_DiagService_ER_HardReset();
 80008a0:	f000 fbbc 	bl	800101c <FBL_DiagService_ER_HardReset>
		break;
 80008a4:	e02d      	b.n	8000902 <HAL_CAN_RxFifo0MsgPendingCallback+0x92>
	case SOFTRESET:
		FBL_DiagService_ER_SoftReset();
 80008a6:	f000 fbad 	bl	8001004 <FBL_DiagService_ER_SoftReset>
		break;
 80008aa:	e02a      	b.n	8000902 <HAL_CAN_RxFifo0MsgPendingCallback+0x92>
	default:
		if(FBL_RxFrame[1] == 0x10 && FBL_RxFrame[2] == 0x02)
 80008ac:	4b17      	ldr	r3, [pc, #92]	@ (800090c <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 80008ae:	785b      	ldrb	r3, [r3, #1]
 80008b0:	2b10      	cmp	r3, #16
 80008b2:	d125      	bne.n	8000900 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>
 80008b4:	4b15      	ldr	r3, [pc, #84]	@ (800090c <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 80008b6:	789b      	ldrb	r3, [r3, #2]
 80008b8:	2b02      	cmp	r3, #2
 80008ba:	d121      	bne.n	8000900 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>
		{
			FBL_TxHeader.DLC = FBL_RxHeader.DLC;
 80008bc:	4b14      	ldr	r3, [pc, #80]	@ (8000910 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 80008be:	691b      	ldr	r3, [r3, #16]
 80008c0:	4a16      	ldr	r2, [pc, #88]	@ (800091c <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 80008c2:	6113      	str	r3, [r2, #16]
			FBL_TxHeader.StdId = FBL_RxHeader.StdId + 1;
 80008c4:	4b12      	ldr	r3, [pc, #72]	@ (8000910 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	3301      	adds	r3, #1
 80008ca:	4a14      	ldr	r2, [pc, #80]	@ (800091c <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 80008cc:	6013      	str	r3, [r2, #0]
			FBL_TxFrame[0] = FBL_RxFrame[0];
 80008ce:	4b0f      	ldr	r3, [pc, #60]	@ (800090c <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 80008d0:	781a      	ldrb	r2, [r3, #0]
 80008d2:	4b13      	ldr	r3, [pc, #76]	@ (8000920 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 80008d4:	701a      	strb	r2, [r3, #0]
			FBL_TxFrame[1] = FBL_RxFrame[1] + 0x40;
 80008d6:	4b0d      	ldr	r3, [pc, #52]	@ (800090c <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 80008d8:	785b      	ldrb	r3, [r3, #1]
 80008da:	3340      	adds	r3, #64	@ 0x40
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	4b10      	ldr	r3, [pc, #64]	@ (8000920 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 80008e0:	705a      	strb	r2, [r3, #1]
			FBL_TxFrame[2] = FBL_RxFrame[2];
 80008e2:	4b0a      	ldr	r3, [pc, #40]	@ (800090c <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 80008e4:	789a      	ldrb	r2, [r3, #2]
 80008e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000920 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 80008e8:	709a      	strb	r2, [r3, #2]
			FBL_DSC_State = PROGRAMMING;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000918 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 80008ec:	2202      	movs	r2, #2
 80008ee:	701a      	strb	r2, [r3, #0]
			HAL_CAN_AddTxMessage(&hcan1, &FBL_TxHeader, FBL_TxFrame, &FBL_TxMailbox);
 80008f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000924 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 80008f2:	4a0b      	ldr	r2, [pc, #44]	@ (8000920 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 80008f4:	4909      	ldr	r1, [pc, #36]	@ (800091c <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 80008f6:	4807      	ldr	r0, [pc, #28]	@ (8000914 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80008f8:	f001 f870 	bl	80019dc <HAL_CAN_AddTxMessage>
			FBL_DiagService_DSC_Programming();
 80008fc:	f000 fc08 	bl	8001110 <FBL_DiagService_DSC_Programming>
		}
		else
		{
			/* Do nothing. */
		}
		break;
 8000900:	bf00      	nop
	}
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	200000a0 	.word	0x200000a0
 8000910:	200000b0 	.word	0x200000b0
 8000914:	20000038 	.word	0x20000038
 8000918:	20000004 	.word	0x20000004
 800091c:	200000cc 	.word	0x200000cc
 8000920:	200000a8 	.word	0x200000a8
 8000924:	200000e4 	.word	0x200000e4

08000928 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800092e:	f000 fd79 	bl	8001424 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000932:	f000 f895 	bl	8000a60 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000936:	f7ff fe79 	bl	800062c <MX_GPIO_Init>
  MX_CAN1_Init();
 800093a:	f7ff fdbd 	bl	80004b8 <MX_CAN1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800093e:	f000 f8f9 	bl	8000b34 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
	FBL_ProgrammingAddress = 0;
 8000942:	4b3c      	ldr	r3, [pc, #240]	@ (8000a34 <main+0x10c>)
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
	FBL_ProgrammingIndex = 0;
 8000948:	4b3b      	ldr	r3, [pc, #236]	@ (8000a38 <main+0x110>)
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
	FBL_NvM_FlashReadData(ROM_APPL_START_ADDR, &ROM_APPL_START_ADDR_storedValue, 1);
 800094e:	4b3b      	ldr	r3, [pc, #236]	@ (8000a3c <main+0x114>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	2201      	movs	r2, #1
 8000954:	493a      	ldr	r1, [pc, #232]	@ (8000a40 <main+0x118>)
 8000956:	4618      	mov	r0, r3
 8000958:	f000 f988 	bl	8000c6c <FBL_NvM_FlashReadData>
	if(ROM_APPL_START_ADDR_storedValue != 0xFFFFFFFF)
 800095c:	4b38      	ldr	r3, [pc, #224]	@ (8000a40 <main+0x118>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000964:	d007      	beq.n	8000976 <main+0x4e>
	{
		FBL_DSC_Pointer = (uint32*)(SESSIONSTATUS_ADDR);
 8000966:	4b37      	ldr	r3, [pc, #220]	@ (8000a44 <main+0x11c>)
 8000968:	4a37      	ldr	r2, [pc, #220]	@ (8000a48 <main+0x120>)
 800096a:	601a      	str	r2, [r3, #0]
		FBL_DSC_Status = *FBL_DSC_Pointer;
 800096c:	4b35      	ldr	r3, [pc, #212]	@ (8000a44 <main+0x11c>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a36      	ldr	r2, [pc, #216]	@ (8000a4c <main+0x124>)
 8000974:	6013      	str	r3, [r2, #0]
	}
	else
	{
		/* Do nothing. */
	}
	if((FBL_DSC_Status == PROGRAMMING) || (FBL_DSC_Status == SOFTRESET) || (FBL_DSC_Status == HARDRESET))
 8000976:	4b35      	ldr	r3, [pc, #212]	@ (8000a4c <main+0x124>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2b02      	cmp	r3, #2
 800097c:	d007      	beq.n	800098e <main+0x66>
 800097e:	4b33      	ldr	r3, [pc, #204]	@ (8000a4c <main+0x124>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	2b06      	cmp	r3, #6
 8000984:	d003      	beq.n	800098e <main+0x66>
 8000986:	4b31      	ldr	r3, [pc, #196]	@ (8000a4c <main+0x124>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	2b05      	cmp	r3, #5
 800098c:	d112      	bne.n	80009b4 <main+0x8c>
	{
		FBL_DSC_State = FBL_DSC_Status;
 800098e:	4b2f      	ldr	r3, [pc, #188]	@ (8000a4c <main+0x124>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	b2da      	uxtb	r2, r3
 8000994:	4b2e      	ldr	r3, [pc, #184]	@ (8000a50 <main+0x128>)
 8000996:	701a      	strb	r2, [r3, #0]
		if(FBL_DSC_Status == SOFTRESET) FBL_DiagService_ER_SoftReset();
 8000998:	4b2c      	ldr	r3, [pc, #176]	@ (8000a4c <main+0x124>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b06      	cmp	r3, #6
 800099e:	d102      	bne.n	80009a6 <main+0x7e>
 80009a0:	f000 fb30 	bl	8001004 <FBL_DiagService_ER_SoftReset>
 80009a4:	e041      	b.n	8000a2a <main+0x102>
		else if(FBL_DSC_Status == HARDRESET) FBL_DiagService_ER_HardReset();
 80009a6:	4b29      	ldr	r3, [pc, #164]	@ (8000a4c <main+0x124>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	2b05      	cmp	r3, #5
 80009ac:	d13d      	bne.n	8000a2a <main+0x102>
 80009ae:	f000 fb35 	bl	800101c <FBL_DiagService_ER_HardReset>
		if(FBL_DSC_Status == SOFTRESET) FBL_DiagService_ER_SoftReset();
 80009b2:	e03a      	b.n	8000a2a <main+0x102>
			/* Do nothing. */
		}
	}
	else
	{
		if(ROM_APPL_START_ADDR_storedValue != 0xFFFFFFFF)
 80009b4:	4b22      	ldr	r3, [pc, #136]	@ (8000a40 <main+0x118>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009bc:	d037      	beq.n	8000a2e <main+0x106>
		{
			if((RCC->CSR & RCC_CSR_PORRSTF) != 0)
 80009be:	4b25      	ldr	r3, [pc, #148]	@ (8000a54 <main+0x12c>)
 80009c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80009c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d013      	beq.n	80009f2 <main+0xca>
			{
				for(uint32* addr = ((uint32_t*)NCR_START_ADDRESS); addr <= ((uint32_t*)NCR_END_ADDRESS); addr++) *addr = 0;
 80009ca:	4b23      	ldr	r3, [pc, #140]	@ (8000a58 <main+0x130>)
 80009cc:	607b      	str	r3, [r7, #4]
 80009ce:	e005      	b.n	80009dc <main+0xb4>
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	3304      	adds	r3, #4
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	4a1f      	ldr	r2, [pc, #124]	@ (8000a5c <main+0x134>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d3f5      	bcc.n	80009d0 <main+0xa8>
				/* Reset the flag. */
				RCC->CSR |= RCC_CSR_PORRSTF;
 80009e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a54 <main+0x12c>)
 80009e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80009e8:	4a1a      	ldr	r2, [pc, #104]	@ (8000a54 <main+0x12c>)
 80009ea:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80009ee:	6753      	str	r3, [r2, #116]	@ 0x74
 80009f0:	e018      	b.n	8000a24 <main+0xfc>
			}/* Check if brown-out reset wake-up event occurred.*/
			else if((RCC->CSR & RCC_CSR_BORRSTF) != 0)
 80009f2:	4b18      	ldr	r3, [pc, #96]	@ (8000a54 <main+0x12c>)
 80009f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80009f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d012      	beq.n	8000a24 <main+0xfc>
			{
				for(uint32* addr = ((uint32_t*)NCR_START_ADDRESS); addr <= ((uint32_t*)NCR_END_ADDRESS); addr++) *addr = 0;
 80009fe:	4b16      	ldr	r3, [pc, #88]	@ (8000a58 <main+0x130>)
 8000a00:	603b      	str	r3, [r7, #0]
 8000a02:	e005      	b.n	8000a10 <main+0xe8>
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	3304      	adds	r3, #4
 8000a0e:	603b      	str	r3, [r7, #0]
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	4a12      	ldr	r2, [pc, #72]	@ (8000a5c <main+0x134>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d3f5      	bcc.n	8000a04 <main+0xdc>
				/* Reset the flag. */
				RCC->CSR |= RCC_CSR_BORRSTF;
 8000a18:	4b0e      	ldr	r3, [pc, #56]	@ (8000a54 <main+0x12c>)
 8000a1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000a1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a54 <main+0x12c>)
 8000a1e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a22:	6753      	str	r3, [r2, #116]	@ 0x74
			}
			else
			{
				/* Do nothing. */
			}
			FBL_JumpToAppl();
 8000a24:	f000 fac6 	bl	8000fb4 <FBL_JumpToAppl>
 8000a28:	e001      	b.n	8000a2e <main+0x106>
		if(FBL_DSC_Status == SOFTRESET) FBL_DiagService_ER_SoftReset();
 8000a2a:	bf00      	nop
	}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1){}
 8000a2c:	bf00      	nop
 8000a2e:	bf00      	nop
 8000a30:	e7fd      	b.n	8000a2e <main+0x106>
 8000a32:	bf00      	nop
 8000a34:	200000f0 	.word	0x200000f0
 8000a38:	200000ec 	.word	0x200000ec
 8000a3c:	20000008 	.word	0x20000008
 8000a40:	200000f4 	.word	0x200000f4
 8000a44:	20000000 	.word	0x20000000
 8000a48:	1000fc00 	.word	0x1000fc00
 8000a4c:	200000f8 	.word	0x200000f8
 8000a50:	20000004 	.word	0x20000004
 8000a54:	40023800 	.word	0x40023800
 8000a58:	1000f000 	.word	0x1000f000
 8000a5c:	1000ffff 	.word	0x1000ffff

08000a60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b094      	sub	sp, #80	@ 0x50
 8000a64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a66:	f107 0320 	add.w	r3, r7, #32
 8000a6a:	2230      	movs	r2, #48	@ 0x30
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f002 fec0 	bl	80037f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a74:	f107 030c 	add.w	r3, r7, #12
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a84:	2300      	movs	r3, #0
 8000a86:	60bb      	str	r3, [r7, #8]
 8000a88:	4b28      	ldr	r3, [pc, #160]	@ (8000b2c <SystemClock_Config+0xcc>)
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8c:	4a27      	ldr	r2, [pc, #156]	@ (8000b2c <SystemClock_Config+0xcc>)
 8000a8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a92:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a94:	4b25      	ldr	r3, [pc, #148]	@ (8000b2c <SystemClock_Config+0xcc>)
 8000a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a9c:	60bb      	str	r3, [r7, #8]
 8000a9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	4b22      	ldr	r3, [pc, #136]	@ (8000b30 <SystemClock_Config+0xd0>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a21      	ldr	r2, [pc, #132]	@ (8000b30 <SystemClock_Config+0xd0>)
 8000aaa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aae:	6013      	str	r3, [r2, #0]
 8000ab0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b30 <SystemClock_Config+0xd0>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000abc:	2301      	movs	r3, #1
 8000abe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ac0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ac4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ad0:	2304      	movs	r3, #4
 8000ad2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ad4:	23a8      	movs	r3, #168	@ 0xa8
 8000ad6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000adc:	2304      	movs	r3, #4
 8000ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae0:	f107 0320 	add.w	r3, r7, #32
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f002 fa21 	bl	8002f2c <HAL_RCC_OscConfig>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000af0:	f000 fb9c 	bl	800122c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af4:	230f      	movs	r3, #15
 8000af6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000af8:	2302      	movs	r3, #2
 8000afa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b00:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000b04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b0a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b0c:	f107 030c 	add.w	r3, r7, #12
 8000b10:	2105      	movs	r1, #5
 8000b12:	4618      	mov	r0, r3
 8000b14:	f002 fc82 	bl	800341c <HAL_RCC_ClockConfig>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b1e:	f000 fb85 	bl	800122c <Error_Handler>
  }
}
 8000b22:	bf00      	nop
 8000b24:	3750      	adds	r7, #80	@ 0x50
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40007000 	.word	0x40007000

08000b34 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 7, 0);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2107      	movs	r1, #7
 8000b3c:	2001      	movs	r0, #1
 8000b3e:	f001 fc74 	bl	800242a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8000b42:	2001      	movs	r0, #1
 8000b44:	f001 fc8d 	bl	8002462 <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 6, 0);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2106      	movs	r1, #6
 8000b4c:	2004      	movs	r0, #4
 8000b4e:	f001 fc6c 	bl	800242a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8000b52:	2004      	movs	r0, #4
 8000b54:	f001 fc85 	bl	8002462 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 4, 0);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2104      	movs	r1, #4
 8000b5c:	2051      	movs	r0, #81	@ 0x51
 8000b5e:	f001 fc64 	bl	800242a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8000b62:	2051      	movs	r0, #81	@ 0x51
 8000b64:	f001 fc7d 	bl	8002462 <HAL_NVIC_EnableIRQ>
  /* CAN1_RX0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	2014      	movs	r0, #20
 8000b6e:	f001 fc5c 	bl	800242a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000b72:	2014      	movs	r0, #20
 8000b74:	f001 fc75 	bl	8002462 <HAL_NVIC_EnableIRQ>
  /* CAN1_TX_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN1_TX_IRQn, 3, 0);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2103      	movs	r1, #3
 8000b7c:	2013      	movs	r0, #19
 8000b7e:	f001 fc54 	bl	800242a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000b82:	2013      	movs	r0, #19
 8000b84:	f001 fc6d 	bl	8002462 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2105      	movs	r1, #5
 8000b8c:	2005      	movs	r0, #5
 8000b8e:	f001 fc4c 	bl	800242a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000b92:	2005      	movs	r0, #5
 8000b94:	f001 fc65 	bl	8002462 <HAL_NVIC_EnableIRQ>
}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <FBL_NvM_EraseFlash_APPL>:
		/* Do nothing. */
	}
	return sector;
}
uint32 FBL_NvM_EraseFlash_APPL(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b088      	sub	sp, #32
 8000ba0:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef EraseInitStruct = {0};
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
	uint32 SECTORError = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	603b      	str	r3, [r7, #0]
	uint32 StartSector = 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61fb      	str	r3, [r7, #28]
	uint32 EndSector = 0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	61bb      	str	r3, [r7, #24]
	StartSector = FLASH_SECTOR_5;
 8000bbc:	2305      	movs	r3, #5
 8000bbe:	61fb      	str	r3, [r7, #28]
	EndSector = FLASH_SECTOR_7;
 8000bc0:	2307      	movs	r3, #7
 8000bc2:	61bb      	str	r3, [r7, #24]
	HAL_FLASH_Unlock();
 8000bc4:	f001 fd6c 	bl	80026a0 <HAL_FLASH_Unlock>
	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	607b      	str	r3, [r7, #4]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	617b      	str	r3, [r7, #20]
	EraseInitStruct.Sector        = StartSector;
 8000bd0:	69fb      	ldr	r3, [r7, #28]
 8000bd2:	60fb      	str	r3, [r7, #12]
	EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 8000bd4:	69ba      	ldr	r2, [r7, #24]
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	3301      	adds	r3, #1
 8000bdc:	613b      	str	r3, [r7, #16]
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK) return HAL_FLASH_GetError();
 8000bde:	463a      	mov	r2, r7
 8000be0:	1d3b      	adds	r3, r7, #4
 8000be2:	4611      	mov	r1, r2
 8000be4:	4618      	mov	r0, r3
 8000be6:	f001 fec9 	bl	800297c <HAL_FLASHEx_Erase>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d003      	beq.n	8000bf8 <FBL_NvM_EraseFlash_APPL+0x5c>
 8000bf0:	f001 fd88 	bl	8002704 <HAL_FLASH_GetError>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	e002      	b.n	8000bfe <FBL_NvM_EraseFlash_APPL+0x62>
	else
	{
		/* Do nothing. */
	}
	HAL_FLASH_Lock();
 8000bf8:	f001 fd74 	bl	80026e4 <HAL_FLASH_Lock>
	return 0;
 8000bfc:	2300      	movs	r3, #0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3720      	adds	r7, #32
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <FBL_NvM_FlashWriteData>:
uint32 FBL_NvM_FlashWriteData(uint32 StartSectorAddress, uint32 *Data, uint16 numberofwords)
{
 8000c06:	b5b0      	push	{r4, r5, r7, lr}
 8000c08:	b086      	sub	sp, #24
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	60f8      	str	r0, [r7, #12]
 8000c0e:	60b9      	str	r1, [r7, #8]
 8000c10:	4613      	mov	r3, r2
 8000c12:	80fb      	strh	r3, [r7, #6]
	uint32 sofar = 0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	617b      	str	r3, [r7, #20]
	HAL_FLASH_Unlock();
 8000c18:	f001 fd42 	bl	80026a0 <HAL_FLASH_Unlock>
	while(sofar < numberofwords)
 8000c1c:	e01b      	b.n	8000c56 <FBL_NvM_FlashWriteData+0x50>
	{
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, Data[sofar]) == HAL_OK)
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	68ba      	ldr	r2, [r7, #8]
 8000c24:	4413      	add	r3, r2
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2200      	movs	r2, #0
 8000c2a:	461c      	mov	r4, r3
 8000c2c:	4615      	mov	r5, r2
 8000c2e:	4622      	mov	r2, r4
 8000c30:	462b      	mov	r3, r5
 8000c32:	68f9      	ldr	r1, [r7, #12]
 8000c34:	2002      	movs	r0, #2
 8000c36:	f001 fc2f 	bl	8002498 <HAL_FLASH_Program>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d106      	bne.n	8000c4e <FBL_NvM_FlashWriteData+0x48>
		{
			StartSectorAddress += 4;
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	3304      	adds	r3, #4
 8000c44:	60fb      	str	r3, [r7, #12]
			sofar++;
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	617b      	str	r3, [r7, #20]
 8000c4c:	e003      	b.n	8000c56 <FBL_NvM_FlashWriteData+0x50>
		}
		else return HAL_FLASH_GetError ();
 8000c4e:	f001 fd59 	bl	8002704 <HAL_FLASH_GetError>
 8000c52:	4603      	mov	r3, r0
 8000c54:	e006      	b.n	8000c64 <FBL_NvM_FlashWriteData+0x5e>
	while(sofar < numberofwords)
 8000c56:	88fb      	ldrh	r3, [r7, #6]
 8000c58:	697a      	ldr	r2, [r7, #20]
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	d3df      	bcc.n	8000c1e <FBL_NvM_FlashWriteData+0x18>
	}
	HAL_FLASH_Lock();
 8000c5e:	f001 fd41 	bl	80026e4 <HAL_FLASH_Lock>
	return 0;
 8000c62:	2300      	movs	r3, #0
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3718      	adds	r7, #24
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bdb0      	pop	{r4, r5, r7, pc}

08000c6c <FBL_NvM_FlashReadData>:
void FBL_NvM_FlashReadData(uint32 StartSectorAddress, uint32 *RxBuf, uint16 numberofwords)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b087      	sub	sp, #28
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	4613      	mov	r3, r2
 8000c78:	80fb      	strh	r3, [r7, #6]
	for (uint16 i = 0; i < numberofwords; i++) 	RxBuf[i] = *(__IO uint32 *)(StartSectorAddress + (i * 4));
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	82fb      	strh	r3, [r7, #22]
 8000c7e:	e00e      	b.n	8000c9e <FBL_NvM_FlashReadData+0x32>
 8000c80:	8afb      	ldrh	r3, [r7, #22]
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	461a      	mov	r2, r3
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	4413      	add	r3, r2
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	8afb      	ldrh	r3, [r7, #22]
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	68ba      	ldr	r2, [r7, #8]
 8000c92:	4413      	add	r3, r2
 8000c94:	680a      	ldr	r2, [r1, #0]
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	8afb      	ldrh	r3, [r7, #22]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	82fb      	strh	r3, [r7, #22]
 8000c9e:	8afa      	ldrh	r2, [r7, #22]
 8000ca0:	88fb      	ldrh	r3, [r7, #6]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	d3ec      	bcc.n	8000c80 <FBL_NvM_FlashReadData+0x14>
}
 8000ca6:	bf00      	nop
 8000ca8:	bf00      	nop
 8000caa:	371c      	adds	r7, #28
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <FBL_DiagService_DSC_RequestDownload>:
void FBL_DiagService_DSC_RequestDownload(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
	FBL_TxHeader.DLC = FBL_RxHeader.DLC;
 8000cba:	4b23      	ldr	r3, [pc, #140]	@ (8000d48 <FBL_DiagService_DSC_RequestDownload+0x94>)
 8000cbc:	691b      	ldr	r3, [r3, #16]
 8000cbe:	4a23      	ldr	r2, [pc, #140]	@ (8000d4c <FBL_DiagService_DSC_RequestDownload+0x98>)
 8000cc0:	6113      	str	r3, [r2, #16]
	FBL_TxHeader.StdId = FBL_RxHeader.StdId + 1;
 8000cc2:	4b21      	ldr	r3, [pc, #132]	@ (8000d48 <FBL_DiagService_DSC_RequestDownload+0x94>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	4a20      	ldr	r2, [pc, #128]	@ (8000d4c <FBL_DiagService_DSC_RequestDownload+0x98>)
 8000cca:	6013      	str	r3, [r2, #0]
	FBL_TxFrame[0] = FBL_RxFrame[0];
 8000ccc:	4b20      	ldr	r3, [pc, #128]	@ (8000d50 <FBL_DiagService_DSC_RequestDownload+0x9c>)
 8000cce:	781a      	ldrb	r2, [r3, #0]
 8000cd0:	4b20      	ldr	r3, [pc, #128]	@ (8000d54 <FBL_DiagService_DSC_RequestDownload+0xa0>)
 8000cd2:	701a      	strb	r2, [r3, #0]
	FBL_TxFrame[1] = FBL_RxFrame[1] + 0x40;
 8000cd4:	4b1e      	ldr	r3, [pc, #120]	@ (8000d50 <FBL_DiagService_DSC_RequestDownload+0x9c>)
 8000cd6:	785b      	ldrb	r3, [r3, #1]
 8000cd8:	3340      	adds	r3, #64	@ 0x40
 8000cda:	b2da      	uxtb	r2, r3
 8000cdc:	4b1d      	ldr	r3, [pc, #116]	@ (8000d54 <FBL_DiagService_DSC_RequestDownload+0xa0>)
 8000cde:	705a      	strb	r2, [r3, #1]
	FBL_TxFrame[2] = FBL_RxFrame[2];
 8000ce0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d50 <FBL_DiagService_DSC_RequestDownload+0x9c>)
 8000ce2:	789a      	ldrb	r2, [r3, #2]
 8000ce4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d54 <FBL_DiagService_DSC_RequestDownload+0xa0>)
 8000ce6:	709a      	strb	r2, [r3, #2]
	FBL_DSC_State = PROGRAMMING;
 8000ce8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d58 <FBL_DiagService_DSC_RequestDownload+0xa4>)
 8000cea:	2202      	movs	r2, #2
 8000cec:	701a      	strb	r2, [r3, #0]
	HAL_CAN_AddTxMessage(&hcan1, &FBL_TxHeader, FBL_TxFrame, &FBL_TxMailbox);
 8000cee:	4b1b      	ldr	r3, [pc, #108]	@ (8000d5c <FBL_DiagService_DSC_RequestDownload+0xa8>)
 8000cf0:	4a18      	ldr	r2, [pc, #96]	@ (8000d54 <FBL_DiagService_DSC_RequestDownload+0xa0>)
 8000cf2:	4916      	ldr	r1, [pc, #88]	@ (8000d4c <FBL_DiagService_DSC_RequestDownload+0x98>)
 8000cf4:	481a      	ldr	r0, [pc, #104]	@ (8000d60 <FBL_DiagService_DSC_RequestDownload+0xac>)
 8000cf6:	f000 fe71 	bl	80019dc <HAL_CAN_AddTxMessage>
	for(uint8 i = 0; i < 8 ; i++) FBL_TxFrame[i] = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	71fb      	strb	r3, [r7, #7]
 8000cfe:	e006      	b.n	8000d0e <FBL_DiagService_DSC_RequestDownload+0x5a>
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	4a14      	ldr	r2, [pc, #80]	@ (8000d54 <FBL_DiagService_DSC_RequestDownload+0xa0>)
 8000d04:	2100      	movs	r1, #0
 8000d06:	54d1      	strb	r1, [r2, r3]
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	71fb      	strb	r3, [r7, #7]
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	2b07      	cmp	r3, #7
 8000d12:	d9f5      	bls.n	8000d00 <FBL_DiagService_DSC_RequestDownload+0x4c>
	FBL_TxHeader.DLC = 0;
 8000d14:	4b0d      	ldr	r3, [pc, #52]	@ (8000d4c <FBL_DiagService_DSC_RequestDownload+0x98>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	611a      	str	r2, [r3, #16]
	FBL_TxHeader.ExtId = 0;
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <FBL_DiagService_DSC_RequestDownload+0x98>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	605a      	str	r2, [r3, #4]
	FBL_TxHeader.IDE = 0;
 8000d20:	4b0a      	ldr	r3, [pc, #40]	@ (8000d4c <FBL_DiagService_DSC_RequestDownload+0x98>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]
	FBL_TxHeader.RTR = 0;
 8000d26:	4b09      	ldr	r3, [pc, #36]	@ (8000d4c <FBL_DiagService_DSC_RequestDownload+0x98>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	60da      	str	r2, [r3, #12]
	FBL_TxHeader.StdId = 0;
 8000d2c:	4b07      	ldr	r3, [pc, #28]	@ (8000d4c <FBL_DiagService_DSC_RequestDownload+0x98>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
	FBL_TxHeader.TransmitGlobalTime = 0;
 8000d32:	4b06      	ldr	r3, [pc, #24]	@ (8000d4c <FBL_DiagService_DSC_RequestDownload+0x98>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	751a      	strb	r2, [r3, #20]
	FBL_TxMailbox = 0;
 8000d38:	4b08      	ldr	r3, [pc, #32]	@ (8000d5c <FBL_DiagService_DSC_RequestDownload+0xa8>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	200000b0 	.word	0x200000b0
 8000d4c:	200000cc 	.word	0x200000cc
 8000d50:	200000a0 	.word	0x200000a0
 8000d54:	200000a8 	.word	0x200000a8
 8000d58:	20000004 	.word	0x20000004
 8000d5c:	200000e4 	.word	0x200000e4
 8000d60:	20000038 	.word	0x20000038

08000d64 <FBL_DiagService_DSC_TransferData>:
void FBL_DiagService_DSC_TransferData(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
	FBL_ProgrammingData = (FBL_RxFrame[6] << 24) | (FBL_RxFrame[5] << 16) | (FBL_RxFrame[4] << 8) | FBL_RxFrame[3];
 8000d6a:	4b34      	ldr	r3, [pc, #208]	@ (8000e3c <FBL_DiagService_DSC_TransferData+0xd8>)
 8000d6c:	799b      	ldrb	r3, [r3, #6]
 8000d6e:	061a      	lsls	r2, r3, #24
 8000d70:	4b32      	ldr	r3, [pc, #200]	@ (8000e3c <FBL_DiagService_DSC_TransferData+0xd8>)
 8000d72:	795b      	ldrb	r3, [r3, #5]
 8000d74:	041b      	lsls	r3, r3, #16
 8000d76:	431a      	orrs	r2, r3
 8000d78:	4b30      	ldr	r3, [pc, #192]	@ (8000e3c <FBL_DiagService_DSC_TransferData+0xd8>)
 8000d7a:	791b      	ldrb	r3, [r3, #4]
 8000d7c:	021b      	lsls	r3, r3, #8
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	4a2e      	ldr	r2, [pc, #184]	@ (8000e3c <FBL_DiagService_DSC_TransferData+0xd8>)
 8000d82:	78d2      	ldrb	r2, [r2, #3]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	461a      	mov	r2, r3
 8000d88:	4b2d      	ldr	r3, [pc, #180]	@ (8000e40 <FBL_DiagService_DSC_TransferData+0xdc>)
 8000d8a:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d8c:	b672      	cpsid	i
}
 8000d8e:	bf00      	nop
	__disable_irq();
	FBL_NvM_FlashWriteData(FBL_ProgrammingAddress, &FBL_ProgrammingData, 1);
 8000d90:	4b2c      	ldr	r3, [pc, #176]	@ (8000e44 <FBL_DiagService_DSC_TransferData+0xe0>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2201      	movs	r2, #1
 8000d96:	492a      	ldr	r1, [pc, #168]	@ (8000e40 <FBL_DiagService_DSC_TransferData+0xdc>)
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ff34 	bl	8000c06 <FBL_NvM_FlashWriteData>
  __ASM volatile ("cpsie i" : : : "memory");
 8000d9e:	b662      	cpsie	i
}
 8000da0:	bf00      	nop
	__enable_irq();
	FBL_ProgrammingAddress += 4;
 8000da2:	4b28      	ldr	r3, [pc, #160]	@ (8000e44 <FBL_DiagService_DSC_TransferData+0xe0>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	3304      	adds	r3, #4
 8000da8:	4a26      	ldr	r2, [pc, #152]	@ (8000e44 <FBL_DiagService_DSC_TransferData+0xe0>)
 8000daa:	6013      	str	r3, [r2, #0]
	FBL_ProgrammingIndex += 1;
 8000dac:	4b26      	ldr	r3, [pc, #152]	@ (8000e48 <FBL_DiagService_DSC_TransferData+0xe4>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	3301      	adds	r3, #1
 8000db2:	4a25      	ldr	r2, [pc, #148]	@ (8000e48 <FBL_DiagService_DSC_TransferData+0xe4>)
 8000db4:	6013      	str	r3, [r2, #0]
	FBL_TxHeader.DLC = FBL_RxHeader.DLC;
 8000db6:	4b25      	ldr	r3, [pc, #148]	@ (8000e4c <FBL_DiagService_DSC_TransferData+0xe8>)
 8000db8:	691b      	ldr	r3, [r3, #16]
 8000dba:	4a25      	ldr	r2, [pc, #148]	@ (8000e50 <FBL_DiagService_DSC_TransferData+0xec>)
 8000dbc:	6113      	str	r3, [r2, #16]
	FBL_TxHeader.StdId = FBL_RxHeader.StdId + 1;
 8000dbe:	4b23      	ldr	r3, [pc, #140]	@ (8000e4c <FBL_DiagService_DSC_TransferData+0xe8>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	4a22      	ldr	r2, [pc, #136]	@ (8000e50 <FBL_DiagService_DSC_TransferData+0xec>)
 8000dc6:	6013      	str	r3, [r2, #0]
	FBL_TxFrame[0] = FBL_RxFrame[0];
 8000dc8:	4b1c      	ldr	r3, [pc, #112]	@ (8000e3c <FBL_DiagService_DSC_TransferData+0xd8>)
 8000dca:	781a      	ldrb	r2, [r3, #0]
 8000dcc:	4b21      	ldr	r3, [pc, #132]	@ (8000e54 <FBL_DiagService_DSC_TransferData+0xf0>)
 8000dce:	701a      	strb	r2, [r3, #0]
	FBL_TxFrame[1] = FBL_RxFrame[1] + 0x40;
 8000dd0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e3c <FBL_DiagService_DSC_TransferData+0xd8>)
 8000dd2:	785b      	ldrb	r3, [r3, #1]
 8000dd4:	3340      	adds	r3, #64	@ 0x40
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	4b1e      	ldr	r3, [pc, #120]	@ (8000e54 <FBL_DiagService_DSC_TransferData+0xf0>)
 8000dda:	705a      	strb	r2, [r3, #1]
	FBL_TxFrame[2] = FBL_RxFrame[2];
 8000ddc:	4b17      	ldr	r3, [pc, #92]	@ (8000e3c <FBL_DiagService_DSC_TransferData+0xd8>)
 8000dde:	789a      	ldrb	r2, [r3, #2]
 8000de0:	4b1c      	ldr	r3, [pc, #112]	@ (8000e54 <FBL_DiagService_DSC_TransferData+0xf0>)
 8000de2:	709a      	strb	r2, [r3, #2]
	HAL_CAN_AddTxMessage(&hcan1, &FBL_TxHeader, FBL_TxFrame, &FBL_TxMailbox);
 8000de4:	4b1c      	ldr	r3, [pc, #112]	@ (8000e58 <FBL_DiagService_DSC_TransferData+0xf4>)
 8000de6:	4a1b      	ldr	r2, [pc, #108]	@ (8000e54 <FBL_DiagService_DSC_TransferData+0xf0>)
 8000de8:	4919      	ldr	r1, [pc, #100]	@ (8000e50 <FBL_DiagService_DSC_TransferData+0xec>)
 8000dea:	481c      	ldr	r0, [pc, #112]	@ (8000e5c <FBL_DiagService_DSC_TransferData+0xf8>)
 8000dec:	f000 fdf6 	bl	80019dc <HAL_CAN_AddTxMessage>
	for(uint8 i = 0; i < 8 ; i++) FBL_TxFrame[i] = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	71fb      	strb	r3, [r7, #7]
 8000df4:	e006      	b.n	8000e04 <FBL_DiagService_DSC_TransferData+0xa0>
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	4a16      	ldr	r2, [pc, #88]	@ (8000e54 <FBL_DiagService_DSC_TransferData+0xf0>)
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	54d1      	strb	r1, [r2, r3]
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	3301      	adds	r3, #1
 8000e02:	71fb      	strb	r3, [r7, #7]
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	2b07      	cmp	r3, #7
 8000e08:	d9f5      	bls.n	8000df6 <FBL_DiagService_DSC_TransferData+0x92>
	FBL_TxHeader.DLC = 0;
 8000e0a:	4b11      	ldr	r3, [pc, #68]	@ (8000e50 <FBL_DiagService_DSC_TransferData+0xec>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	611a      	str	r2, [r3, #16]
	FBL_TxHeader.ExtId = 0;
 8000e10:	4b0f      	ldr	r3, [pc, #60]	@ (8000e50 <FBL_DiagService_DSC_TransferData+0xec>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	605a      	str	r2, [r3, #4]
	FBL_TxHeader.IDE = 0;
 8000e16:	4b0e      	ldr	r3, [pc, #56]	@ (8000e50 <FBL_DiagService_DSC_TransferData+0xec>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	609a      	str	r2, [r3, #8]
	FBL_TxHeader.RTR = 0;
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e50 <FBL_DiagService_DSC_TransferData+0xec>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	60da      	str	r2, [r3, #12]
	FBL_TxHeader.StdId = 0;
 8000e22:	4b0b      	ldr	r3, [pc, #44]	@ (8000e50 <FBL_DiagService_DSC_TransferData+0xec>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
	FBL_TxHeader.TransmitGlobalTime = 0;
 8000e28:	4b09      	ldr	r3, [pc, #36]	@ (8000e50 <FBL_DiagService_DSC_TransferData+0xec>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	751a      	strb	r2, [r3, #20]
	FBL_TxMailbox = 0;
 8000e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e58 <FBL_DiagService_DSC_TransferData+0xf4>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
}
 8000e34:	bf00      	nop
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	200000a0 	.word	0x200000a0
 8000e40:	200000e8 	.word	0x200000e8
 8000e44:	200000f0 	.word	0x200000f0
 8000e48:	200000ec 	.word	0x200000ec
 8000e4c:	200000b0 	.word	0x200000b0
 8000e50:	200000cc 	.word	0x200000cc
 8000e54:	200000a8 	.word	0x200000a8
 8000e58:	200000e4 	.word	0x200000e4
 8000e5c:	20000038 	.word	0x20000038

08000e60 <FBL_DiagService_DSC_RequestTransferExit>:
void FBL_DiagService_DSC_RequestTransferExit(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
	FBL_TxHeader.DLC = FBL_RxHeader.DLC;
 8000e66:	4b21      	ldr	r3, [pc, #132]	@ (8000eec <FBL_DiagService_DSC_RequestTransferExit+0x8c>)
 8000e68:	691b      	ldr	r3, [r3, #16]
 8000e6a:	4a21      	ldr	r2, [pc, #132]	@ (8000ef0 <FBL_DiagService_DSC_RequestTransferExit+0x90>)
 8000e6c:	6113      	str	r3, [r2, #16]
	FBL_TxHeader.StdId = FBL_RxHeader.StdId + 1;
 8000e6e:	4b1f      	ldr	r3, [pc, #124]	@ (8000eec <FBL_DiagService_DSC_RequestTransferExit+0x8c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	3301      	adds	r3, #1
 8000e74:	4a1e      	ldr	r2, [pc, #120]	@ (8000ef0 <FBL_DiagService_DSC_RequestTransferExit+0x90>)
 8000e76:	6013      	str	r3, [r2, #0]
	FBL_TxFrame[0] = FBL_RxFrame[0];
 8000e78:	4b1e      	ldr	r3, [pc, #120]	@ (8000ef4 <FBL_DiagService_DSC_RequestTransferExit+0x94>)
 8000e7a:	781a      	ldrb	r2, [r3, #0]
 8000e7c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ef8 <FBL_DiagService_DSC_RequestTransferExit+0x98>)
 8000e7e:	701a      	strb	r2, [r3, #0]
	FBL_TxFrame[1] = FBL_RxFrame[1] + 0x40;
 8000e80:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef4 <FBL_DiagService_DSC_RequestTransferExit+0x94>)
 8000e82:	785b      	ldrb	r3, [r3, #1]
 8000e84:	3340      	adds	r3, #64	@ 0x40
 8000e86:	b2da      	uxtb	r2, r3
 8000e88:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef8 <FBL_DiagService_DSC_RequestTransferExit+0x98>)
 8000e8a:	705a      	strb	r2, [r3, #1]
	FBL_TxFrame[2] = FBL_RxFrame[2];
 8000e8c:	4b19      	ldr	r3, [pc, #100]	@ (8000ef4 <FBL_DiagService_DSC_RequestTransferExit+0x94>)
 8000e8e:	789a      	ldrb	r2, [r3, #2]
 8000e90:	4b19      	ldr	r3, [pc, #100]	@ (8000ef8 <FBL_DiagService_DSC_RequestTransferExit+0x98>)
 8000e92:	709a      	strb	r2, [r3, #2]
	HAL_CAN_AddTxMessage(&hcan1, &FBL_TxHeader, FBL_TxFrame, &FBL_TxMailbox);
 8000e94:	4b19      	ldr	r3, [pc, #100]	@ (8000efc <FBL_DiagService_DSC_RequestTransferExit+0x9c>)
 8000e96:	4a18      	ldr	r2, [pc, #96]	@ (8000ef8 <FBL_DiagService_DSC_RequestTransferExit+0x98>)
 8000e98:	4915      	ldr	r1, [pc, #84]	@ (8000ef0 <FBL_DiagService_DSC_RequestTransferExit+0x90>)
 8000e9a:	4819      	ldr	r0, [pc, #100]	@ (8000f00 <FBL_DiagService_DSC_RequestTransferExit+0xa0>)
 8000e9c:	f000 fd9e 	bl	80019dc <HAL_CAN_AddTxMessage>
	for(uint8 i = 0; i < 8 ; i++) FBL_TxFrame[i] = 0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	71fb      	strb	r3, [r7, #7]
 8000ea4:	e006      	b.n	8000eb4 <FBL_DiagService_DSC_RequestTransferExit+0x54>
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	4a13      	ldr	r2, [pc, #76]	@ (8000ef8 <FBL_DiagService_DSC_RequestTransferExit+0x98>)
 8000eaa:	2100      	movs	r1, #0
 8000eac:	54d1      	strb	r1, [r2, r3]
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	71fb      	strb	r3, [r7, #7]
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	2b07      	cmp	r3, #7
 8000eb8:	d9f5      	bls.n	8000ea6 <FBL_DiagService_DSC_RequestTransferExit+0x46>
	FBL_TxHeader.DLC = 0;
 8000eba:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef0 <FBL_DiagService_DSC_RequestTransferExit+0x90>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	611a      	str	r2, [r3, #16]
	FBL_TxHeader.ExtId = 0;
 8000ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef0 <FBL_DiagService_DSC_RequestTransferExit+0x90>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	605a      	str	r2, [r3, #4]
	FBL_TxHeader.IDE = 0;
 8000ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef0 <FBL_DiagService_DSC_RequestTransferExit+0x90>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
	FBL_TxHeader.RTR = 0;
 8000ecc:	4b08      	ldr	r3, [pc, #32]	@ (8000ef0 <FBL_DiagService_DSC_RequestTransferExit+0x90>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	60da      	str	r2, [r3, #12]
	FBL_TxHeader.StdId = 0;
 8000ed2:	4b07      	ldr	r3, [pc, #28]	@ (8000ef0 <FBL_DiagService_DSC_RequestTransferExit+0x90>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
	FBL_TxHeader.TransmitGlobalTime = 0;
 8000ed8:	4b05      	ldr	r3, [pc, #20]	@ (8000ef0 <FBL_DiagService_DSC_RequestTransferExit+0x90>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	751a      	strb	r2, [r3, #20]
	FBL_TxMailbox = 0;
 8000ede:	4b07      	ldr	r3, [pc, #28]	@ (8000efc <FBL_DiagService_DSC_RequestTransferExit+0x9c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
}
 8000ee4:	bf00      	nop
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	200000b0 	.word	0x200000b0
 8000ef0:	200000cc 	.word	0x200000cc
 8000ef4:	200000a0 	.word	0x200000a0
 8000ef8:	200000a8 	.word	0x200000a8
 8000efc:	200000e4 	.word	0x200000e4
 8000f00:	20000038 	.word	0x20000038

08000f04 <FBL_DiagService_RAR_MassEraseAPPL>:
void FBL_DiagService_RAR_MassEraseAPPL(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f0a:	b672      	cpsid	i
}
 8000f0c:	bf00      	nop
	__disable_irq();
	FBL_TxHeader.DLC = FBL_RxHeader.DLC;
 8000f0e:	4b23      	ldr	r3, [pc, #140]	@ (8000f9c <FBL_DiagService_RAR_MassEraseAPPL+0x98>)
 8000f10:	691b      	ldr	r3, [r3, #16]
 8000f12:	4a23      	ldr	r2, [pc, #140]	@ (8000fa0 <FBL_DiagService_RAR_MassEraseAPPL+0x9c>)
 8000f14:	6113      	str	r3, [r2, #16]
	FBL_TxHeader.StdId = FBL_RxHeader.StdId + 1;
 8000f16:	4b21      	ldr	r3, [pc, #132]	@ (8000f9c <FBL_DiagService_RAR_MassEraseAPPL+0x98>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	4a20      	ldr	r2, [pc, #128]	@ (8000fa0 <FBL_DiagService_RAR_MassEraseAPPL+0x9c>)
 8000f1e:	6013      	str	r3, [r2, #0]
	FBL_TxFrame[0] = FBL_RxFrame[0];
 8000f20:	4b20      	ldr	r3, [pc, #128]	@ (8000fa4 <FBL_DiagService_RAR_MassEraseAPPL+0xa0>)
 8000f22:	781a      	ldrb	r2, [r3, #0]
 8000f24:	4b20      	ldr	r3, [pc, #128]	@ (8000fa8 <FBL_DiagService_RAR_MassEraseAPPL+0xa4>)
 8000f26:	701a      	strb	r2, [r3, #0]
	FBL_TxFrame[1] = FBL_RxFrame[1] + 0x40;
 8000f28:	4b1e      	ldr	r3, [pc, #120]	@ (8000fa4 <FBL_DiagService_RAR_MassEraseAPPL+0xa0>)
 8000f2a:	785b      	ldrb	r3, [r3, #1]
 8000f2c:	3340      	adds	r3, #64	@ 0x40
 8000f2e:	b2da      	uxtb	r2, r3
 8000f30:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa8 <FBL_DiagService_RAR_MassEraseAPPL+0xa4>)
 8000f32:	705a      	strb	r2, [r3, #1]
	FBL_TxFrame[2] = FBL_RxFrame[2];
 8000f34:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa4 <FBL_DiagService_RAR_MassEraseAPPL+0xa0>)
 8000f36:	789a      	ldrb	r2, [r3, #2]
 8000f38:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa8 <FBL_DiagService_RAR_MassEraseAPPL+0xa4>)
 8000f3a:	709a      	strb	r2, [r3, #2]
	HAL_CAN_AddTxMessage(&hcan1, &FBL_TxHeader, FBL_TxFrame, &FBL_TxMailbox);
 8000f3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fac <FBL_DiagService_RAR_MassEraseAPPL+0xa8>)
 8000f3e:	4a1a      	ldr	r2, [pc, #104]	@ (8000fa8 <FBL_DiagService_RAR_MassEraseAPPL+0xa4>)
 8000f40:	4917      	ldr	r1, [pc, #92]	@ (8000fa0 <FBL_DiagService_RAR_MassEraseAPPL+0x9c>)
 8000f42:	481b      	ldr	r0, [pc, #108]	@ (8000fb0 <FBL_DiagService_RAR_MassEraseAPPL+0xac>)
 8000f44:	f000 fd4a 	bl	80019dc <HAL_CAN_AddTxMessage>
	FBL_NvM_EraseFlash_APPL();
 8000f48:	f7ff fe28 	bl	8000b9c <FBL_NvM_EraseFlash_APPL>
	for(uint8 i = 0; i < 8 ; i++) FBL_TxFrame[i] = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	71fb      	strb	r3, [r7, #7]
 8000f50:	e006      	b.n	8000f60 <FBL_DiagService_RAR_MassEraseAPPL+0x5c>
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	4a14      	ldr	r2, [pc, #80]	@ (8000fa8 <FBL_DiagService_RAR_MassEraseAPPL+0xa4>)
 8000f56:	2100      	movs	r1, #0
 8000f58:	54d1      	strb	r1, [r2, r3]
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	71fb      	strb	r3, [r7, #7]
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	2b07      	cmp	r3, #7
 8000f64:	d9f5      	bls.n	8000f52 <FBL_DiagService_RAR_MassEraseAPPL+0x4e>
	FBL_TxHeader.DLC = 0;
 8000f66:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa0 <FBL_DiagService_RAR_MassEraseAPPL+0x9c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	611a      	str	r2, [r3, #16]
	FBL_TxHeader.ExtId = 0;
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa0 <FBL_DiagService_RAR_MassEraseAPPL+0x9c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	605a      	str	r2, [r3, #4]
	FBL_TxHeader.IDE = 0;
 8000f72:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa0 <FBL_DiagService_RAR_MassEraseAPPL+0x9c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
	FBL_TxHeader.RTR = 0;
 8000f78:	4b09      	ldr	r3, [pc, #36]	@ (8000fa0 <FBL_DiagService_RAR_MassEraseAPPL+0x9c>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	60da      	str	r2, [r3, #12]
	FBL_TxHeader.StdId = 0;
 8000f7e:	4b08      	ldr	r3, [pc, #32]	@ (8000fa0 <FBL_DiagService_RAR_MassEraseAPPL+0x9c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
	FBL_TxHeader.TransmitGlobalTime = 0;
 8000f84:	4b06      	ldr	r3, [pc, #24]	@ (8000fa0 <FBL_DiagService_RAR_MassEraseAPPL+0x9c>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	751a      	strb	r2, [r3, #20]
	FBL_TxMailbox = 0;
 8000f8a:	4b08      	ldr	r3, [pc, #32]	@ (8000fac <FBL_DiagService_RAR_MassEraseAPPL+0xa8>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000f90:	b662      	cpsie	i
}
 8000f92:	bf00      	nop
	__enable_irq();
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	200000b0 	.word	0x200000b0
 8000fa0:	200000cc 	.word	0x200000cc
 8000fa4:	200000a0 	.word	0x200000a0
 8000fa8:	200000a8 	.word	0x200000a8
 8000fac:	200000e4 	.word	0x200000e4
 8000fb0:	20000038 	.word	0x20000038

08000fb4 <FBL_JumpToAppl>:
void FBL_JumpToAppl(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
	typedef void (*pFunction)(void);
	static uint32 app_address = APPL_START_ADDRESS;
	static pFunction app_entry;
	uint32 msp_value = *((uint32*)app_address);
 8000fba:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff8 <FBL_JumpToAppl+0x44>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc2:	b672      	cpsid	i
}
 8000fc4:	bf00      	nop
	__disable_irq();
	SCB->VTOR = app_address;
 8000fc6:	4a0d      	ldr	r2, [pc, #52]	@ (8000ffc <FBL_JumpToAppl+0x48>)
 8000fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff8 <FBL_JumpToAppl+0x44>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	6093      	str	r3, [r2, #8]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	f383 8808 	msr	MSP, r3
}
 8000fd8:	bf00      	nop
	__set_MSP(msp_value);
	app_entry = (pFunction)(*((uint32*)(app_address + 4)));
 8000fda:	4b07      	ldr	r3, [pc, #28]	@ (8000ff8 <FBL_JumpToAppl+0x44>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	3304      	adds	r3, #4
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	4b06      	ldr	r3, [pc, #24]	@ (8001000 <FBL_JumpToAppl+0x4c>)
 8000fe6:	601a      	str	r2, [r3, #0]
	app_entry();
 8000fe8:	4b05      	ldr	r3, [pc, #20]	@ (8001000 <FBL_JumpToAppl+0x4c>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4798      	blx	r3
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	2000000c 	.word	0x2000000c
 8000ffc:	e000ed00 	.word	0xe000ed00
 8001000:	200000fc 	.word	0x200000fc

08001004 <FBL_DiagService_ER_SoftReset>:
void FBL_DiagService_ER_SoftReset(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001008:	b672      	cpsid	i
}
 800100a:	bf00      	nop
	__disable_irq();
	*FBL_DSC_Pointer = 0;
 800100c:	4b02      	ldr	r3, [pc, #8]	@ (8001018 <FBL_DiagService_ER_SoftReset+0x14>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
	__NVIC_SystemReset();
 8001014:	f7ff fbba 	bl	800078c <__NVIC_SystemReset>
 8001018:	20000000 	.word	0x20000000

0800101c <FBL_DiagService_ER_HardReset>:
}
void FBL_DiagService_ER_HardReset(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001022:	b672      	cpsid	i
}
 8001024:	bf00      	nop
	__disable_irq();
	*FBL_DSC_Pointer = 0;
 8001026:	4b09      	ldr	r3, [pc, #36]	@ (800104c <FBL_DiagService_ER_HardReset+0x30>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
	for(uint32* addr = ((uint32*)NCR_START_ADDRESS); addr <= ((uint32*)NCR_END_ADDRESS); addr++) *addr = 0;
 800102e:	4b08      	ldr	r3, [pc, #32]	@ (8001050 <FBL_DiagService_ER_HardReset+0x34>)
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	e005      	b.n	8001040 <FBL_DiagService_ER_HardReset+0x24>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	3304      	adds	r3, #4
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4a04      	ldr	r2, [pc, #16]	@ (8001054 <FBL_DiagService_ER_HardReset+0x38>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d3f5      	bcc.n	8001034 <FBL_DiagService_ER_HardReset+0x18>
	__NVIC_SystemReset();
 8001048:	f7ff fba0 	bl	800078c <__NVIC_SystemReset>
 800104c:	20000000 	.word	0x20000000
 8001050:	1000f000 	.word	0x1000f000
 8001054:	1000ffff 	.word	0x1000ffff

08001058 <FBL_DiagService_RDBI_ReadActiveDiagnosticSession>:
}

void FBL_DiagService_RDBI_ReadActiveDiagnosticSession(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
	FBL_TxHeader.DLC = FBL_RxHeader.DLC;
 800105e:	4b25      	ldr	r3, [pc, #148]	@ (80010f4 <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0x9c>)
 8001060:	691b      	ldr	r3, [r3, #16]
 8001062:	4a25      	ldr	r2, [pc, #148]	@ (80010f8 <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0xa0>)
 8001064:	6113      	str	r3, [r2, #16]
	FBL_TxHeader.StdId = FBL_RxHeader.StdId + 1;
 8001066:	4b23      	ldr	r3, [pc, #140]	@ (80010f4 <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0x9c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	3301      	adds	r3, #1
 800106c:	4a22      	ldr	r2, [pc, #136]	@ (80010f8 <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0xa0>)
 800106e:	6013      	str	r3, [r2, #0]
	FBL_TxFrame[0] = FBL_RxFrame[0];
 8001070:	4b22      	ldr	r3, [pc, #136]	@ (80010fc <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0xa4>)
 8001072:	781a      	ldrb	r2, [r3, #0]
 8001074:	4b22      	ldr	r3, [pc, #136]	@ (8001100 <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0xa8>)
 8001076:	701a      	strb	r2, [r3, #0]
	FBL_TxFrame[1] = FBL_RxFrame[1] + 0x40;
 8001078:	4b20      	ldr	r3, [pc, #128]	@ (80010fc <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0xa4>)
 800107a:	785b      	ldrb	r3, [r3, #1]
 800107c:	3340      	adds	r3, #64	@ 0x40
 800107e:	b2da      	uxtb	r2, r3
 8001080:	4b1f      	ldr	r3, [pc, #124]	@ (8001100 <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0xa8>)
 8001082:	705a      	strb	r2, [r3, #1]
	FBL_TxFrame[2] = FBL_RxFrame[2];
 8001084:	4b1d      	ldr	r3, [pc, #116]	@ (80010fc <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0xa4>)
 8001086:	789a      	ldrb	r2, [r3, #2]
 8001088:	4b1d      	ldr	r3, [pc, #116]	@ (8001100 <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0xa8>)
 800108a:	709a      	strb	r2, [r3, #2]
	FBL_TxFrame[3] = FBL_RxFrame[3];
 800108c:	4b1b      	ldr	r3, [pc, #108]	@ (80010fc <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0xa4>)
 800108e:	78da      	ldrb	r2, [r3, #3]
 8001090:	4b1b      	ldr	r3, [pc, #108]	@ (8001100 <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0xa8>)
 8001092:	70da      	strb	r2, [r3, #3]
	FBL_TxFrame[4] = FBL_DSC_State;
 8001094:	4b1b      	ldr	r3, [pc, #108]	@ (8001104 <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0xac>)
 8001096:	781a      	ldrb	r2, [r3, #0]
 8001098:	4b19      	ldr	r3, [pc, #100]	@ (8001100 <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0xa8>)
 800109a:	711a      	strb	r2, [r3, #4]
	HAL_CAN_AddTxMessage(&hcan1, &FBL_TxHeader, FBL_TxFrame, &FBL_TxMailbox);
 800109c:	4b1a      	ldr	r3, [pc, #104]	@ (8001108 <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0xb0>)
 800109e:	4a18      	ldr	r2, [pc, #96]	@ (8001100 <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0xa8>)
 80010a0:	4915      	ldr	r1, [pc, #84]	@ (80010f8 <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0xa0>)
 80010a2:	481a      	ldr	r0, [pc, #104]	@ (800110c <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0xb4>)
 80010a4:	f000 fc9a 	bl	80019dc <HAL_CAN_AddTxMessage>
	for(uint8 i = 0; i < 8 ; i++) FBL_TxFrame[i] = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	71fb      	strb	r3, [r7, #7]
 80010ac:	e006      	b.n	80010bc <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0x64>
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	4a13      	ldr	r2, [pc, #76]	@ (8001100 <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0xa8>)
 80010b2:	2100      	movs	r1, #0
 80010b4:	54d1      	strb	r1, [r2, r3]
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	3301      	adds	r3, #1
 80010ba:	71fb      	strb	r3, [r7, #7]
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	2b07      	cmp	r3, #7
 80010c0:	d9f5      	bls.n	80010ae <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0x56>
	FBL_TxHeader.DLC = 0;
 80010c2:	4b0d      	ldr	r3, [pc, #52]	@ (80010f8 <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0xa0>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	611a      	str	r2, [r3, #16]
	FBL_TxHeader.ExtId = 0;
 80010c8:	4b0b      	ldr	r3, [pc, #44]	@ (80010f8 <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0xa0>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	605a      	str	r2, [r3, #4]
	FBL_TxHeader.IDE = 0;
 80010ce:	4b0a      	ldr	r3, [pc, #40]	@ (80010f8 <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0xa0>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]
	FBL_TxHeader.RTR = 0;
 80010d4:	4b08      	ldr	r3, [pc, #32]	@ (80010f8 <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0xa0>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	60da      	str	r2, [r3, #12]
	FBL_TxHeader.StdId = 0;
 80010da:	4b07      	ldr	r3, [pc, #28]	@ (80010f8 <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0xa0>)
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
	FBL_TxHeader.TransmitGlobalTime = 0;
 80010e0:	4b05      	ldr	r3, [pc, #20]	@ (80010f8 <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0xa0>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	751a      	strb	r2, [r3, #20]
	FBL_TxMailbox = 0;
 80010e6:	4b08      	ldr	r3, [pc, #32]	@ (8001108 <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0xb0>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
}
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	200000b0 	.word	0x200000b0
 80010f8:	200000cc 	.word	0x200000cc
 80010fc:	200000a0 	.word	0x200000a0
 8001100:	200000a8 	.word	0x200000a8
 8001104:	20000004 	.word	0x20000004
 8001108:	200000e4 	.word	0x200000e4
 800110c:	20000038 	.word	0x20000038

08001110 <FBL_DiagService_DSC_Programming>:
void FBL_DiagService_DSC_Programming(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
	if(FBL_RxFrame[1] == 0x22 && FBL_RxFrame[2] == 0xF1 && FBL_RxFrame[3] == 0x86) FBL_DiagService_RDBI_ReadActiveDiagnosticSession();
 8001116:	4b3d      	ldr	r3, [pc, #244]	@ (800120c <FBL_DiagService_DSC_Programming+0xfc>)
 8001118:	785b      	ldrb	r3, [r3, #1]
 800111a:	2b22      	cmp	r3, #34	@ 0x22
 800111c:	d109      	bne.n	8001132 <FBL_DiagService_DSC_Programming+0x22>
 800111e:	4b3b      	ldr	r3, [pc, #236]	@ (800120c <FBL_DiagService_DSC_Programming+0xfc>)
 8001120:	789b      	ldrb	r3, [r3, #2]
 8001122:	2bf1      	cmp	r3, #241	@ 0xf1
 8001124:	d105      	bne.n	8001132 <FBL_DiagService_DSC_Programming+0x22>
 8001126:	4b39      	ldr	r3, [pc, #228]	@ (800120c <FBL_DiagService_DSC_Programming+0xfc>)
 8001128:	78db      	ldrb	r3, [r3, #3]
 800112a:	2b86      	cmp	r3, #134	@ 0x86
 800112c:	d101      	bne.n	8001132 <FBL_DiagService_DSC_Programming+0x22>
 800112e:	f7ff ff93 	bl	8001058 <FBL_DiagService_RDBI_ReadActiveDiagnosticSession>
	else
	{
		/* Do nothing. */
	}
	if(FBL_RxFrame[0] == 0x04 && FBL_RxFrame[1] == 0x31 && FBL_RxFrame[4] == 0x00) FBL_DiagService_RAR_MassEraseAPPL();
 8001132:	4b36      	ldr	r3, [pc, #216]	@ (800120c <FBL_DiagService_DSC_Programming+0xfc>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b04      	cmp	r3, #4
 8001138:	d109      	bne.n	800114e <FBL_DiagService_DSC_Programming+0x3e>
 800113a:	4b34      	ldr	r3, [pc, #208]	@ (800120c <FBL_DiagService_DSC_Programming+0xfc>)
 800113c:	785b      	ldrb	r3, [r3, #1]
 800113e:	2b31      	cmp	r3, #49	@ 0x31
 8001140:	d105      	bne.n	800114e <FBL_DiagService_DSC_Programming+0x3e>
 8001142:	4b32      	ldr	r3, [pc, #200]	@ (800120c <FBL_DiagService_DSC_Programming+0xfc>)
 8001144:	791b      	ldrb	r3, [r3, #4]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d101      	bne.n	800114e <FBL_DiagService_DSC_Programming+0x3e>
 800114a:	f7ff fedb 	bl	8000f04 <FBL_DiagService_RAR_MassEraseAPPL>
	else
	{
		/* Do nothing. */
	}
	if(FBL_RxFrame[1] == 0x34)
 800114e:	4b2f      	ldr	r3, [pc, #188]	@ (800120c <FBL_DiagService_DSC_Programming+0xfc>)
 8001150:	785b      	ldrb	r3, [r3, #1]
 8001152:	2b34      	cmp	r3, #52	@ 0x34
 8001154:	d110      	bne.n	8001178 <FBL_DiagService_DSC_Programming+0x68>
	{
		FBL_ProgrammingAddress = (0x08 << 24)
				| (FBL_RxFrame[4] << 16)
 8001156:	4b2d      	ldr	r3, [pc, #180]	@ (800120c <FBL_DiagService_DSC_Programming+0xfc>)
 8001158:	791b      	ldrb	r3, [r3, #4]
 800115a:	041b      	lsls	r3, r3, #16
 800115c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
				| (FBL_RxFrame[5] << 8)
 8001160:	4b2a      	ldr	r3, [pc, #168]	@ (800120c <FBL_DiagService_DSC_Programming+0xfc>)
 8001162:	795b      	ldrb	r3, [r3, #5]
 8001164:	021b      	lsls	r3, r3, #8
 8001166:	4313      	orrs	r3, r2
				| (FBL_RxFrame[6]);
 8001168:	4a28      	ldr	r2, [pc, #160]	@ (800120c <FBL_DiagService_DSC_Programming+0xfc>)
 800116a:	7992      	ldrb	r2, [r2, #6]
 800116c:	4313      	orrs	r3, r2
 800116e:	461a      	mov	r2, r3
		FBL_ProgrammingAddress = (0x08 << 24)
 8001170:	4b27      	ldr	r3, [pc, #156]	@ (8001210 <FBL_DiagService_DSC_Programming+0x100>)
 8001172:	601a      	str	r2, [r3, #0]
		FBL_DiagService_DSC_RequestDownload();
 8001174:	f7ff fd9e 	bl	8000cb4 <FBL_DiagService_DSC_RequestDownload>
	}
	else
	{
		/* Do nothing. */
	}
	if(FBL_RxFrame[1] == 0x36) FBL_DiagService_DSC_TransferData();
 8001178:	4b24      	ldr	r3, [pc, #144]	@ (800120c <FBL_DiagService_DSC_Programming+0xfc>)
 800117a:	785b      	ldrb	r3, [r3, #1]
 800117c:	2b36      	cmp	r3, #54	@ 0x36
 800117e:	d101      	bne.n	8001184 <FBL_DiagService_DSC_Programming+0x74>
 8001180:	f7ff fdf0 	bl	8000d64 <FBL_DiagService_DSC_TransferData>
	if(FBL_RxFrame[1] == 0x37 && FBL_RxFrame[0] == 0x01) FBL_DiagService_DSC_RequestTransferExit();
 8001184:	4b21      	ldr	r3, [pc, #132]	@ (800120c <FBL_DiagService_DSC_Programming+0xfc>)
 8001186:	785b      	ldrb	r3, [r3, #1]
 8001188:	2b37      	cmp	r3, #55	@ 0x37
 800118a:	d105      	bne.n	8001198 <FBL_DiagService_DSC_Programming+0x88>
 800118c:	4b1f      	ldr	r3, [pc, #124]	@ (800120c <FBL_DiagService_DSC_Programming+0xfc>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d101      	bne.n	8001198 <FBL_DiagService_DSC_Programming+0x88>
 8001194:	f7ff fe64 	bl	8000e60 <FBL_DiagService_DSC_RequestTransferExit>
	else
	{
		/* Do nothing. */
	}
	if(FBL_RxFrame[1] == 0x11 && FBL_RxFrame[2] == 0x01)
 8001198:	4b1c      	ldr	r3, [pc, #112]	@ (800120c <FBL_DiagService_DSC_Programming+0xfc>)
 800119a:	785b      	ldrb	r3, [r3, #1]
 800119c:	2b11      	cmp	r3, #17
 800119e:	d130      	bne.n	8001202 <FBL_DiagService_DSC_Programming+0xf2>
 80011a0:	4b1a      	ldr	r3, [pc, #104]	@ (800120c <FBL_DiagService_DSC_Programming+0xfc>)
 80011a2:	789b      	ldrb	r3, [r3, #2]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d12c      	bne.n	8001202 <FBL_DiagService_DSC_Programming+0xf2>
	{
		FBL_TxHeader.DLC = FBL_RxHeader.DLC;
 80011a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001214 <FBL_DiagService_DSC_Programming+0x104>)
 80011aa:	691b      	ldr	r3, [r3, #16]
 80011ac:	4a1a      	ldr	r2, [pc, #104]	@ (8001218 <FBL_DiagService_DSC_Programming+0x108>)
 80011ae:	6113      	str	r3, [r2, #16]
		FBL_TxHeader.StdId = FBL_RxHeader.StdId + 1;
 80011b0:	4b18      	ldr	r3, [pc, #96]	@ (8001214 <FBL_DiagService_DSC_Programming+0x104>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	3301      	adds	r3, #1
 80011b6:	4a18      	ldr	r2, [pc, #96]	@ (8001218 <FBL_DiagService_DSC_Programming+0x108>)
 80011b8:	6013      	str	r3, [r2, #0]
		FBL_TxFrame[0] = FBL_RxFrame[0];
 80011ba:	4b14      	ldr	r3, [pc, #80]	@ (800120c <FBL_DiagService_DSC_Programming+0xfc>)
 80011bc:	781a      	ldrb	r2, [r3, #0]
 80011be:	4b17      	ldr	r3, [pc, #92]	@ (800121c <FBL_DiagService_DSC_Programming+0x10c>)
 80011c0:	701a      	strb	r2, [r3, #0]
		FBL_TxFrame[1] = FBL_RxFrame[1] + 0x40;
 80011c2:	4b12      	ldr	r3, [pc, #72]	@ (800120c <FBL_DiagService_DSC_Programming+0xfc>)
 80011c4:	785b      	ldrb	r3, [r3, #1]
 80011c6:	3340      	adds	r3, #64	@ 0x40
 80011c8:	b2da      	uxtb	r2, r3
 80011ca:	4b14      	ldr	r3, [pc, #80]	@ (800121c <FBL_DiagService_DSC_Programming+0x10c>)
 80011cc:	705a      	strb	r2, [r3, #1]
		FBL_TxFrame[2] = FBL_RxFrame[2];
 80011ce:	4b0f      	ldr	r3, [pc, #60]	@ (800120c <FBL_DiagService_DSC_Programming+0xfc>)
 80011d0:	789a      	ldrb	r2, [r3, #2]
 80011d2:	4b12      	ldr	r3, [pc, #72]	@ (800121c <FBL_DiagService_DSC_Programming+0x10c>)
 80011d4:	709a      	strb	r2, [r3, #2]
		FBL_TxFrame[3] = FBL_RxFrame[3];
 80011d6:	4b0d      	ldr	r3, [pc, #52]	@ (800120c <FBL_DiagService_DSC_Programming+0xfc>)
 80011d8:	78da      	ldrb	r2, [r3, #3]
 80011da:	4b10      	ldr	r3, [pc, #64]	@ (800121c <FBL_DiagService_DSC_Programming+0x10c>)
 80011dc:	70da      	strb	r2, [r3, #3]
		HAL_CAN_AddTxMessage(&hcan1, &FBL_TxHeader, FBL_TxFrame, &FBL_TxMailbox);
 80011de:	4b10      	ldr	r3, [pc, #64]	@ (8001220 <FBL_DiagService_DSC_Programming+0x110>)
 80011e0:	4a0e      	ldr	r2, [pc, #56]	@ (800121c <FBL_DiagService_DSC_Programming+0x10c>)
 80011e2:	490d      	ldr	r1, [pc, #52]	@ (8001218 <FBL_DiagService_DSC_Programming+0x108>)
 80011e4:	480f      	ldr	r0, [pc, #60]	@ (8001224 <FBL_DiagService_DSC_Programming+0x114>)
 80011e6:	f000 fbf9 	bl	80019dc <HAL_CAN_AddTxMessage>
		for(uint32 i = 0; i < 200000; i ++);
 80011ea:	2300      	movs	r3, #0
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	e002      	b.n	80011f6 <FBL_DiagService_DSC_Programming+0xe6>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	3301      	adds	r3, #1
 80011f4:	607b      	str	r3, [r7, #4]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a0b      	ldr	r2, [pc, #44]	@ (8001228 <FBL_DiagService_DSC_Programming+0x118>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d9f8      	bls.n	80011f0 <FBL_DiagService_DSC_Programming+0xe0>
		FBL_DiagService_ER_HardReset();
 80011fe:	f7ff ff0d 	bl	800101c <FBL_DiagService_ER_HardReset>
	}
	else
	{
		/* Do nothing. */
	}
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	200000a0 	.word	0x200000a0
 8001210:	200000f0 	.word	0x200000f0
 8001214:	200000b0 	.word	0x200000b0
 8001218:	200000cc 	.word	0x200000cc
 800121c:	200000a8 	.word	0x200000a8
 8001220:	200000e4 	.word	0x200000e4
 8001224:	20000038 	.word	0x20000038
 8001228:	00030d3f 	.word	0x00030d3f

0800122c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001230:	b672      	cpsid	i
}
 8001232:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	__disable_irq();
	__NVIC_SystemReset();
 8001234:	f7ff faaa 	bl	800078c <__NVIC_SystemReset>

08001238 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */
  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	607b      	str	r3, [r7, #4]
 8001242:	4b21      	ldr	r3, [pc, #132]	@ (80012c8 <HAL_MspInit+0x90>)
 8001244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001246:	4a20      	ldr	r2, [pc, #128]	@ (80012c8 <HAL_MspInit+0x90>)
 8001248:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800124c:	6453      	str	r3, [r2, #68]	@ 0x44
 800124e:	4b1e      	ldr	r3, [pc, #120]	@ (80012c8 <HAL_MspInit+0x90>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001252:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	603b      	str	r3, [r7, #0]
 800125e:	4b1a      	ldr	r3, [pc, #104]	@ (80012c8 <HAL_MspInit+0x90>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001262:	4a19      	ldr	r2, [pc, #100]	@ (80012c8 <HAL_MspInit+0x90>)
 8001264:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001268:	6413      	str	r3, [r2, #64]	@ 0x40
 800126a:	4b17      	ldr	r3, [pc, #92]	@ (80012c8 <HAL_MspInit+0x90>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001272:	603b      	str	r3, [r7, #0]
 8001274:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 13, 0);
 8001276:	2200      	movs	r2, #0
 8001278:	210d      	movs	r1, #13
 800127a:	f06f 000b 	mvn.w	r0, #11
 800127e:	f001 f8d4 	bl	800242a <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 12, 0);
 8001282:	2200      	movs	r2, #0
 8001284:	210c      	movs	r1, #12
 8001286:	f06f 000a 	mvn.w	r0, #10
 800128a:	f001 f8ce 	bl	800242a <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 11, 0);
 800128e:	2200      	movs	r2, #0
 8001290:	210b      	movs	r1, #11
 8001292:	f06f 0009 	mvn.w	r0, #9
 8001296:	f001 f8c8 	bl	800242a <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 10, 0);
 800129a:	2200      	movs	r2, #0
 800129c:	210a      	movs	r1, #10
 800129e:	f06f 0004 	mvn.w	r0, #4
 80012a2:	f001 f8c2 	bl	800242a <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 9, 0);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2109      	movs	r1, #9
 80012aa:	f06f 0003 	mvn.w	r0, #3
 80012ae:	f001 f8bc 	bl	800242a <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 8, 0);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2108      	movs	r1, #8
 80012b6:	f06f 0001 	mvn.w	r0, #1
 80012ba:	f001 f8b6 	bl	800242a <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */

  /* USER CODE BEGIN MspInit 1 */
  /* USER CODE END MspInit 1 */
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40023800 	.word	0x40023800

080012cc <__NVIC_SystemReset>:
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80012d0:	f3bf 8f4f 	dsb	sy
}
 80012d4:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80012d6:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <__NVIC_SystemReset+0x24>)
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80012de:	4904      	ldr	r1, [pc, #16]	@ (80012f0 <__NVIC_SystemReset+0x24>)
 80012e0:	4b04      	ldr	r3, [pc, #16]	@ (80012f4 <__NVIC_SystemReset+0x28>)
 80012e2:	4313      	orrs	r3, r2
 80012e4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80012e6:	f3bf 8f4f 	dsb	sy
}
 80012ea:	bf00      	nop
    __NOP();
 80012ec:	bf00      	nop
 80012ee:	e7fd      	b.n	80012ec <__NVIC_SystemReset+0x20>
 80012f0:	e000ed00 	.word	0xe000ed00
 80012f4:	05fa0004 	.word	0x05fa0004

080012f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	__NVIC_SystemReset();
 80012fc:	f7ff ffe6 	bl	80012cc <__NVIC_SystemReset>

08001300 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	__NVIC_SystemReset();
 8001304:	f7ff ffe2 	bl	80012cc <__NVIC_SystemReset>

08001308 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	__NVIC_SystemReset();
 800130c:	f7ff ffde 	bl	80012cc <__NVIC_SystemReset>

08001310 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	__NVIC_SystemReset();
 8001314:	f7ff ffda 	bl	80012cc <__NVIC_SystemReset>

08001318 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	__NVIC_SystemReset();
 800131c:	f7ff ffd6 	bl	80012cc <__NVIC_SystemReset>

08001320 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */
  /* USER CODE END SVCall_IRQn 1 */
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */
  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */
  /* USER CODE END PendSV_IRQn 1 */
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800134e:	f000 f8bb 	bl	80014c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}

08001356 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */
  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 800135a:	f001 fdcd 	bl	8002ef8 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */
  /* USER CODE END PVD_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}

08001362 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */
  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8001366:	f001 f8eb 	bl	8002540 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */
  /* USER CODE END FLASH_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}

0800136e <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RCC_IRQn 0 */
  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */
  /* USER CODE END RCC_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */
  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001380:	4802      	ldr	r0, [pc, #8]	@ (800138c <CAN1_TX_IRQHandler+0x10>)
 8001382:	f000 fd43 	bl	8001e0c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */
  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000038 	.word	0x20000038

08001390 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001394:	4802      	ldr	r0, [pc, #8]	@ (80013a0 <CAN1_RX0_IRQHandler+0x10>)
 8001396:	f000 fd39 	bl	8001e0c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000038 	.word	0x20000038

080013a4 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FPU_IRQn 0 */
	__NVIC_SystemReset();
 80013a8:	f7ff ff90 	bl	80012cc <__NVIC_SystemReset>

080013ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013b0:	4b06      	ldr	r3, [pc, #24]	@ (80013cc <SystemInit+0x20>)
 80013b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013b6:	4a05      	ldr	r2, [pc, #20]	@ (80013cc <SystemInit+0x20>)
 80013b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack     /* set stack pointer */
 80013d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001408 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80013d4:	f7ff ffea 	bl	80013ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013d8:	480c      	ldr	r0, [pc, #48]	@ (800140c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013da:	490d      	ldr	r1, [pc, #52]	@ (8001410 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001414 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e0:	e002      	b.n	80013e8 <LoopCopyDataInit>

080013e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013e6:	3304      	adds	r3, #4

080013e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013ec:	d3f9      	bcc.n	80013e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001418 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013f0:	4c0a      	ldr	r4, [pc, #40]	@ (800141c <LoopFillZerobss+0x22>)
  movs r3, #0
 80013f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f4:	e001      	b.n	80013fa <LoopFillZerobss>

080013f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f8:	3204      	adds	r2, #4

080013fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013fc:	d3fb      	bcc.n	80013f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013fe:	f002 fa01 	bl	8003804 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001402:	f7ff fa91 	bl	8000928 <main>
  bx  lr    
 8001406:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001408:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800140c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001410:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001414:	08003884 	.word	0x08003884
  ldr r2, =_sbss
 8001418:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 800141c:	20000124 	.word	0x20000124

08001420 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001420:	e7fe      	b.n	8001420 <ADC_IRQHandler>
	...

08001424 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001428:	4b0e      	ldr	r3, [pc, #56]	@ (8001464 <HAL_Init+0x40>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a0d      	ldr	r2, [pc, #52]	@ (8001464 <HAL_Init+0x40>)
 800142e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001432:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001434:	4b0b      	ldr	r3, [pc, #44]	@ (8001464 <HAL_Init+0x40>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a0a      	ldr	r2, [pc, #40]	@ (8001464 <HAL_Init+0x40>)
 800143a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800143e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001440:	4b08      	ldr	r3, [pc, #32]	@ (8001464 <HAL_Init+0x40>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a07      	ldr	r2, [pc, #28]	@ (8001464 <HAL_Init+0x40>)
 8001446:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800144a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800144c:	2003      	movs	r0, #3
 800144e:	f000 ffe1 	bl	8002414 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001452:	200f      	movs	r0, #15
 8001454:	f000 f808 	bl	8001468 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001458:	f7ff feee 	bl	8001238 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40023c00 	.word	0x40023c00

08001468 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001470:	4b12      	ldr	r3, [pc, #72]	@ (80014bc <HAL_InitTick+0x54>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	4b12      	ldr	r3, [pc, #72]	@ (80014c0 <HAL_InitTick+0x58>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	4619      	mov	r1, r3
 800147a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800147e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001482:	fbb2 f3f3 	udiv	r3, r2, r3
 8001486:	4618      	mov	r0, r3
 8001488:	f000 fff9 	bl	800247e <HAL_SYSTICK_Config>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e00e      	b.n	80014b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2b0f      	cmp	r3, #15
 800149a:	d80a      	bhi.n	80014b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800149c:	2200      	movs	r2, #0
 800149e:	6879      	ldr	r1, [r7, #4]
 80014a0:	f04f 30ff 	mov.w	r0, #4294967295
 80014a4:	f000 ffc1 	bl	800242a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014a8:	4a06      	ldr	r2, [pc, #24]	@ (80014c4 <HAL_InitTick+0x5c>)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ae:	2300      	movs	r3, #0
 80014b0:	e000      	b.n	80014b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000010 	.word	0x20000010
 80014c0:	20000018 	.word	0x20000018
 80014c4:	20000014 	.word	0x20000014

080014c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014cc:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <HAL_IncTick+0x20>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	461a      	mov	r2, r3
 80014d2:	4b06      	ldr	r3, [pc, #24]	@ (80014ec <HAL_IncTick+0x24>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4413      	add	r3, r2
 80014d8:	4a04      	ldr	r2, [pc, #16]	@ (80014ec <HAL_IncTick+0x24>)
 80014da:	6013      	str	r3, [r2, #0]
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	20000018 	.word	0x20000018
 80014ec:	20000100 	.word	0x20000100

080014f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  return uwTick;
 80014f4:	4b03      	ldr	r3, [pc, #12]	@ (8001504 <HAL_GetTick+0x14>)
 80014f6:	681b      	ldr	r3, [r3, #0]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	20000100 	.word	0x20000100

08001508 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d101      	bne.n	800151a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e11c      	b.n	8001754 <HAL_CAN_Init+0x24c>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b00      	cmp	r3, #0
 8001524:	d131      	bne.n	800158a <HAL_CAN_Init+0x82>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a8c      	ldr	r2, [pc, #560]	@ (800175c <HAL_CAN_Init+0x254>)
 800152a:	641a      	str	r2, [r3, #64]	@ 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4a8c      	ldr	r2, [pc, #560]	@ (8001760 <HAL_CAN_Init+0x258>)
 8001530:	645a      	str	r2, [r3, #68]	@ 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a8b      	ldr	r2, [pc, #556]	@ (8001764 <HAL_CAN_Init+0x25c>)
 8001536:	649a      	str	r2, [r3, #72]	@ 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4a8b      	ldr	r2, [pc, #556]	@ (8001768 <HAL_CAN_Init+0x260>)
 800153c:	64da      	str	r2, [r3, #76]	@ 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a8a      	ldr	r2, [pc, #552]	@ (800176c <HAL_CAN_Init+0x264>)
 8001542:	629a      	str	r2, [r3, #40]	@ 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4a8a      	ldr	r2, [pc, #552]	@ (8001770 <HAL_CAN_Init+0x268>)
 8001548:	62da      	str	r2, [r3, #44]	@ 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a89      	ldr	r2, [pc, #548]	@ (8001774 <HAL_CAN_Init+0x26c>)
 800154e:	631a      	str	r2, [r3, #48]	@ 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a89      	ldr	r2, [pc, #548]	@ (8001778 <HAL_CAN_Init+0x270>)
 8001554:	635a      	str	r2, [r3, #52]	@ 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a88      	ldr	r2, [pc, #544]	@ (800177c <HAL_CAN_Init+0x274>)
 800155a:	639a      	str	r2, [r3, #56]	@ 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4a88      	ldr	r2, [pc, #544]	@ (8001780 <HAL_CAN_Init+0x278>)
 8001560:	63da      	str	r2, [r3, #60]	@ 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a87      	ldr	r2, [pc, #540]	@ (8001784 <HAL_CAN_Init+0x27c>)
 8001566:	651a      	str	r2, [r3, #80]	@ 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4a87      	ldr	r2, [pc, #540]	@ (8001788 <HAL_CAN_Init+0x280>)
 800156c:	655a      	str	r2, [r3, #84]	@ 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a86      	ldr	r2, [pc, #536]	@ (800178c <HAL_CAN_Init+0x284>)
 8001572:	659a      	str	r2, [r3, #88]	@ 0x58

    if (hcan->MspInitCallback == NULL)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001578:	2b00      	cmp	r3, #0
 800157a:	d102      	bne.n	8001582 <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4a84      	ldr	r2, [pc, #528]	@ (8001790 <HAL_CAN_Init+0x288>)
 8001580:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f042 0201 	orr.w	r2, r2, #1
 8001598:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800159a:	f7ff ffa9 	bl	80014f0 <HAL_GetTick>
 800159e:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015a0:	e012      	b.n	80015c8 <HAL_CAN_Init+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015a2:	f7ff ffa5 	bl	80014f0 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b0a      	cmp	r3, #10
 80015ae:	d90b      	bls.n	80015c8 <HAL_CAN_Init+0xc0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015b4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2205      	movs	r2, #5
 80015c0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e0c5      	b.n	8001754 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d0e5      	beq.n	80015a2 <HAL_CAN_Init+0x9a>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f022 0202 	bic.w	r2, r2, #2
 80015e4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015e6:	f7ff ff83 	bl	80014f0 <HAL_GetTick>
 80015ea:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015ec:	e012      	b.n	8001614 <HAL_CAN_Init+0x10c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015ee:	f7ff ff7f 	bl	80014f0 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b0a      	cmp	r3, #10
 80015fa:	d90b      	bls.n	8001614 <HAL_CAN_Init+0x10c>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001600:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2205      	movs	r2, #5
 800160c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e09f      	b.n	8001754 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1e5      	bne.n	80015ee <HAL_CAN_Init+0xe6>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	7e1b      	ldrb	r3, [r3, #24]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d108      	bne.n	800163c <HAL_CAN_Init+0x134>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	e007      	b.n	800164c <HAL_CAN_Init+0x144>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800164a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	7e5b      	ldrb	r3, [r3, #25]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d108      	bne.n	8001666 <HAL_CAN_Init+0x15e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	e007      	b.n	8001676 <HAL_CAN_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001674:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	7e9b      	ldrb	r3, [r3, #26]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d108      	bne.n	8001690 <HAL_CAN_Init+0x188>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f042 0220 	orr.w	r2, r2, #32
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	e007      	b.n	80016a0 <HAL_CAN_Init+0x198>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f022 0220 	bic.w	r2, r2, #32
 800169e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	7edb      	ldrb	r3, [r3, #27]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d108      	bne.n	80016ba <HAL_CAN_Init+0x1b2>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f022 0210 	bic.w	r2, r2, #16
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	e007      	b.n	80016ca <HAL_CAN_Init+0x1c2>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f042 0210 	orr.w	r2, r2, #16
 80016c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	7f1b      	ldrb	r3, [r3, #28]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d108      	bne.n	80016e4 <HAL_CAN_Init+0x1dc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f042 0208 	orr.w	r2, r2, #8
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	e007      	b.n	80016f4 <HAL_CAN_Init+0x1ec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f022 0208 	bic.w	r2, r2, #8
 80016f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	7f5b      	ldrb	r3, [r3, #29]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d108      	bne.n	800170e <HAL_CAN_Init+0x206>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f042 0204 	orr.w	r2, r2, #4
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	e007      	b.n	800171e <HAL_CAN_Init+0x216>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f022 0204 	bic.w	r2, r2, #4
 800171c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689a      	ldr	r2, [r3, #8]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	431a      	orrs	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	431a      	orrs	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	695b      	ldr	r3, [r3, #20]
 8001732:	ea42 0103 	orr.w	r1, r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	1e5a      	subs	r2, r3, #1
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	430a      	orrs	r2, r1
 8001742:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2201      	movs	r2, #1
 800174e:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001752:	2300      	movs	r3, #0
}
 8001754:	4618      	mov	r0, r3
 8001756:	3710      	adds	r7, #16
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	08000871 	.word	0x08000871
 8001760:	080007b9 	.word	0x080007b9
 8001764:	0800220f 	.word	0x0800220f
 8001768:	08002223 	.word	0x08002223
 800176c:	08002197 	.word	0x08002197
 8001770:	080021ab 	.word	0x080021ab
 8001774:	080021bf 	.word	0x080021bf
 8001778:	080021d3 	.word	0x080021d3
 800177c:	080021e7 	.word	0x080021e7
 8001780:	080021fb 	.word	0x080021fb
 8001784:	08002237 	.word	0x08002237
 8001788:	0800224b 	.word	0x0800224b
 800178c:	0800225f 	.word	0x0800225f
 8001790:	08000579 	.word	0x08000579

08001794 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001794:	b480      	push	{r7}
 8001796:	b087      	sub	sp, #28
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017aa:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80017ac:	7cfb      	ldrb	r3, [r7, #19]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d003      	beq.n	80017ba <HAL_CAN_ConfigFilter+0x26>
 80017b2:	7cfb      	ldrb	r3, [r7, #19]
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	f040 80be 	bne.w	8001936 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80017ba:	4b65      	ldr	r3, [pc, #404]	@ (8001950 <HAL_CAN_ConfigFilter+0x1bc>)
 80017bc:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80017c4:	f043 0201 	orr.w	r2, r3, #1
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80017d4:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e8:	021b      	lsls	r3, r3, #8
 80017ea:	431a      	orrs	r2, r3
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	f003 031f 	and.w	r3, r3, #31
 80017fa:	2201      	movs	r2, #1
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	43db      	mvns	r3, r3
 800180c:	401a      	ands	r2, r3
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	69db      	ldr	r3, [r3, #28]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d123      	bne.n	8001864 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	43db      	mvns	r3, r3
 8001826:	401a      	ands	r2, r3
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800183a:	683a      	ldr	r2, [r7, #0]
 800183c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800183e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	3248      	adds	r2, #72	@ 0x48
 8001844:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001858:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800185a:	6979      	ldr	r1, [r7, #20]
 800185c:	3348      	adds	r3, #72	@ 0x48
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	440b      	add	r3, r1
 8001862:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	69db      	ldr	r3, [r3, #28]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d122      	bne.n	80018b2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	431a      	orrs	r2, r3
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800188c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	3248      	adds	r2, #72	@ 0x48
 8001892:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018a6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018a8:	6979      	ldr	r1, [r7, #20]
 80018aa:	3348      	adds	r3, #72	@ 0x48
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	440b      	add	r3, r1
 80018b0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d109      	bne.n	80018ce <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	43db      	mvns	r3, r3
 80018c4:	401a      	ands	r2, r3
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80018cc:	e007      	b.n	80018de <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	431a      	orrs	r2, r3
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d109      	bne.n	80018fa <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	43db      	mvns	r3, r3
 80018f0:	401a      	ands	r2, r3
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80018f8:	e007      	b.n	800190a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	431a      	orrs	r2, r3
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	6a1b      	ldr	r3, [r3, #32]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d107      	bne.n	8001922 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	431a      	orrs	r2, r3
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001928:	f023 0201 	bic.w	r2, r3, #1
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001932:	2300      	movs	r3, #0
 8001934:	e006      	b.n	8001944 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800193a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
  }
}
 8001944:	4618      	mov	r0, r3
 8001946:	371c      	adds	r7, #28
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	40006400 	.word	0x40006400

08001954 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001962:	b2db      	uxtb	r3, r3
 8001964:	2b01      	cmp	r3, #1
 8001966:	d12e      	bne.n	80019c6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2202      	movs	r2, #2
 800196c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f022 0201 	bic.w	r2, r2, #1
 800197e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001980:	f7ff fdb6 	bl	80014f0 <HAL_GetTick>
 8001984:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001986:	e012      	b.n	80019ae <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001988:	f7ff fdb2 	bl	80014f0 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b0a      	cmp	r3, #10
 8001994:	d90b      	bls.n	80019ae <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800199a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2205      	movs	r2, #5
 80019a6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e012      	b.n	80019d4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d1e5      	bne.n	8001988 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80019c2:	2300      	movs	r3, #0
 80019c4:	e006      	b.n	80019d4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ca:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
  }
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80019dc:	b480      	push	{r7}
 80019de:	b089      	sub	sp, #36	@ 0x24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
 80019e8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019f0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80019fa:	7ffb      	ldrb	r3, [r7, #31]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d003      	beq.n	8001a08 <HAL_CAN_AddTxMessage+0x2c>
 8001a00:	7ffb      	ldrb	r3, [r7, #31]
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	f040 80ad 	bne.w	8001b62 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d10a      	bne.n	8001a28 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d105      	bne.n	8001a28 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f000 8095 	beq.w	8001b52 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	0e1b      	lsrs	r3, r3, #24
 8001a2c:	f003 0303 	and.w	r3, r3, #3
 8001a30:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001a32:	2201      	movs	r2, #1
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	409a      	lsls	r2, r3
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d10d      	bne.n	8001a60 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a4e:	68f9      	ldr	r1, [r7, #12]
 8001a50:	6809      	ldr	r1, [r1, #0]
 8001a52:	431a      	orrs	r2, r3
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	3318      	adds	r3, #24
 8001a58:	011b      	lsls	r3, r3, #4
 8001a5a:	440b      	add	r3, r1
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	e00f      	b.n	8001a80 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a6a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a70:	68f9      	ldr	r1, [r7, #12]
 8001a72:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001a74:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	3318      	adds	r3, #24
 8001a7a:	011b      	lsls	r3, r3, #4
 8001a7c:	440b      	add	r3, r1
 8001a7e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	6819      	ldr	r1, [r3, #0]
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	691a      	ldr	r2, [r3, #16]
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	3318      	adds	r3, #24
 8001a8c:	011b      	lsls	r3, r3, #4
 8001a8e:	440b      	add	r3, r1
 8001a90:	3304      	adds	r3, #4
 8001a92:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	7d1b      	ldrb	r3, [r3, #20]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d111      	bne.n	8001ac0 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	3318      	adds	r3, #24
 8001aa4:	011b      	lsls	r3, r3, #4
 8001aa6:	4413      	add	r3, r2
 8001aa8:	3304      	adds	r3, #4
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	68fa      	ldr	r2, [r7, #12]
 8001aae:	6811      	ldr	r1, [r2, #0]
 8001ab0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	3318      	adds	r3, #24
 8001ab8:	011b      	lsls	r3, r3, #4
 8001aba:	440b      	add	r3, r1
 8001abc:	3304      	adds	r3, #4
 8001abe:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3307      	adds	r3, #7
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	061a      	lsls	r2, r3, #24
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3306      	adds	r3, #6
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	041b      	lsls	r3, r3, #16
 8001ad0:	431a      	orrs	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	3305      	adds	r3, #5
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	021b      	lsls	r3, r3, #8
 8001ada:	4313      	orrs	r3, r2
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	3204      	adds	r2, #4
 8001ae0:	7812      	ldrb	r2, [r2, #0]
 8001ae2:	4610      	mov	r0, r2
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	6811      	ldr	r1, [r2, #0]
 8001ae8:	ea43 0200 	orr.w	r2, r3, r0
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	011b      	lsls	r3, r3, #4
 8001af0:	440b      	add	r3, r1
 8001af2:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001af6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3303      	adds	r3, #3
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	061a      	lsls	r2, r3, #24
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3302      	adds	r3, #2
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	041b      	lsls	r3, r3, #16
 8001b08:	431a      	orrs	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	021b      	lsls	r3, r3, #8
 8001b12:	4313      	orrs	r3, r2
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	7812      	ldrb	r2, [r2, #0]
 8001b18:	4610      	mov	r0, r2
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	6811      	ldr	r1, [r2, #0]
 8001b1e:	ea43 0200 	orr.w	r2, r3, r0
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	011b      	lsls	r3, r3, #4
 8001b26:	440b      	add	r3, r1
 8001b28:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001b2c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	3318      	adds	r3, #24
 8001b36:	011b      	lsls	r3, r3, #4
 8001b38:	4413      	add	r3, r2
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	68fa      	ldr	r2, [r7, #12]
 8001b3e:	6811      	ldr	r1, [r2, #0]
 8001b40:	f043 0201 	orr.w	r2, r3, #1
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	3318      	adds	r3, #24
 8001b48:	011b      	lsls	r3, r3, #4
 8001b4a:	440b      	add	r3, r1
 8001b4c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	e00e      	b.n	8001b70 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b56:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e006      	b.n	8001b70 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b66:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
  }
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3724      	adds	r7, #36	@ 0x24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b087      	sub	sp, #28
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
 8001b88:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b90:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b92:	7dfb      	ldrb	r3, [r7, #23]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d003      	beq.n	8001ba0 <HAL_CAN_GetRxMessage+0x24>
 8001b98:	7dfb      	ldrb	r3, [r7, #23]
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	f040 8103 	bne.w	8001da6 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d10e      	bne.n	8001bc4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	f003 0303 	and.w	r3, r3, #3
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d116      	bne.n	8001be2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e0f7      	b.n	8001db4 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	f003 0303 	and.w	r3, r3, #3
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d107      	bne.n	8001be2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e0e8      	b.n	8001db4 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	331b      	adds	r3, #27
 8001bea:	011b      	lsls	r3, r3, #4
 8001bec:	4413      	add	r3, r2
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0204 	and.w	r2, r3, #4
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d10c      	bne.n	8001c1a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	331b      	adds	r3, #27
 8001c08:	011b      	lsls	r3, r3, #4
 8001c0a:	4413      	add	r3, r2
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	0d5b      	lsrs	r3, r3, #21
 8001c10:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	e00b      	b.n	8001c32 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	331b      	adds	r3, #27
 8001c22:	011b      	lsls	r3, r3, #4
 8001c24:	4413      	add	r3, r2
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	08db      	lsrs	r3, r3, #3
 8001c2a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	331b      	adds	r3, #27
 8001c3a:	011b      	lsls	r3, r3, #4
 8001c3c:	4413      	add	r3, r2
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0202 	and.w	r2, r3, #2
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	331b      	adds	r3, #27
 8001c50:	011b      	lsls	r3, r3, #4
 8001c52:	4413      	add	r3, r2
 8001c54:	3304      	adds	r3, #4
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0308 	and.w	r3, r3, #8
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2208      	movs	r2, #8
 8001c64:	611a      	str	r2, [r3, #16]
 8001c66:	e00b      	b.n	8001c80 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	331b      	adds	r3, #27
 8001c70:	011b      	lsls	r3, r3, #4
 8001c72:	4413      	add	r3, r2
 8001c74:	3304      	adds	r3, #4
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 020f 	and.w	r2, r3, #15
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	331b      	adds	r3, #27
 8001c88:	011b      	lsls	r3, r3, #4
 8001c8a:	4413      	add	r3, r2
 8001c8c:	3304      	adds	r3, #4
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	0a1b      	lsrs	r3, r3, #8
 8001c92:	b2da      	uxtb	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	331b      	adds	r3, #27
 8001ca0:	011b      	lsls	r3, r3, #4
 8001ca2:	4413      	add	r3, r2
 8001ca4:	3304      	adds	r3, #4
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	0c1b      	lsrs	r3, r3, #16
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	011b      	lsls	r3, r3, #4
 8001cb8:	4413      	add	r3, r2
 8001cba:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	b2da      	uxtb	r2, r3
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	011b      	lsls	r3, r3, #4
 8001cce:	4413      	add	r3, r2
 8001cd0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	0a1a      	lsrs	r2, r3, #8
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	b2d2      	uxtb	r2, r2
 8001cde:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	011b      	lsls	r3, r3, #4
 8001ce8:	4413      	add	r3, r2
 8001cea:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	0c1a      	lsrs	r2, r3, #16
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	3302      	adds	r3, #2
 8001cf6:	b2d2      	uxtb	r2, r2
 8001cf8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	011b      	lsls	r3, r3, #4
 8001d02:	4413      	add	r3, r2
 8001d04:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	0e1a      	lsrs	r2, r3, #24
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	3303      	adds	r3, #3
 8001d10:	b2d2      	uxtb	r2, r2
 8001d12:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	011b      	lsls	r3, r3, #4
 8001d1c:	4413      	add	r3, r2
 8001d1e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	3304      	adds	r3, #4
 8001d28:	b2d2      	uxtb	r2, r2
 8001d2a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	011b      	lsls	r3, r3, #4
 8001d34:	4413      	add	r3, r2
 8001d36:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	0a1a      	lsrs	r2, r3, #8
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	3305      	adds	r3, #5
 8001d42:	b2d2      	uxtb	r2, r2
 8001d44:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	011b      	lsls	r3, r3, #4
 8001d4e:	4413      	add	r3, r2
 8001d50:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	0c1a      	lsrs	r2, r3, #16
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	3306      	adds	r3, #6
 8001d5c:	b2d2      	uxtb	r2, r2
 8001d5e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	011b      	lsls	r3, r3, #4
 8001d68:	4413      	add	r3, r2
 8001d6a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	0e1a      	lsrs	r2, r3, #24
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	3307      	adds	r3, #7
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d108      	bne.n	8001d92 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	68da      	ldr	r2, [r3, #12]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f042 0220 	orr.w	r2, r2, #32
 8001d8e:	60da      	str	r2, [r3, #12]
 8001d90:	e007      	b.n	8001da2 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	691a      	ldr	r2, [r3, #16]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f042 0220 	orr.w	r2, r2, #32
 8001da0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001da2:	2300      	movs	r3, #0
 8001da4:	e006      	b.n	8001db4 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001daa:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
  }
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	371c      	adds	r7, #28
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dd0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001dd2:	7bfb      	ldrb	r3, [r7, #15]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d002      	beq.n	8001dde <HAL_CAN_ActivateNotification+0x1e>
 8001dd8:	7bfb      	ldrb	r3, [r7, #15]
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d109      	bne.n	8001df2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	6959      	ldr	r1, [r3, #20]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	430a      	orrs	r2, r1
 8001dec:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001dee:	2300      	movs	r3, #0
 8001df0:	e006      	b.n	8001e00 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
  }
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08a      	sub	sp, #40	@ 0x28
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001e14:	2300      	movs	r3, #0
 8001e16:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001e48:	6a3b      	ldr	r3, [r7, #32]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f000 8083 	beq.w	8001f5a <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d025      	beq.n	8001eaa <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2201      	movs	r2, #1
 8001e64:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d004      	beq.n	8001e7a <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	4798      	blx	r3
 8001e78:	e017      	b.n	8001eaa <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	f003 0304 	and.w	r3, r3, #4
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d004      	beq.n	8001e8e <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e86:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e8c:	e00d      	b.n	8001eaa <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	f003 0308 	and.w	r3, r3, #8
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d004      	beq.n	8001ea2 <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ea0:	e003      	b.n	8001eaa <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d026      	beq.n	8001f02 <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ebc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d004      	beq.n	8001ed2 <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	4798      	blx	r3
 8001ed0:	e017      	b.n	8001f02 <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d004      	beq.n	8001ee6 <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ede:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001ee2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ee4:	e00d      	b.n	8001f02 <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d004      	beq.n	8001efa <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ef6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ef8:	e003      	b.n	8001f02 <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d026      	beq.n	8001f5a <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001f14:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d004      	beq.n	8001f2a <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	4798      	blx	r3
 8001f28:	e017      	b.n	8001f5a <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d004      	beq.n	8001f3e <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f3c:	e00d      	b.n	8001f5a <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d004      	beq.n	8001f52 <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f50:	e003      	b.n	8001f5a <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001f5a:	6a3b      	ldr	r3, [r7, #32]
 8001f5c:	f003 0308 	and.w	r3, r3, #8
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d00c      	beq.n	8001f7e <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	f003 0310 	and.w	r3, r3, #16
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d007      	beq.n	8001f7e <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f70:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f74:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2210      	movs	r2, #16
 8001f7c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001f7e:	6a3b      	ldr	r3, [r7, #32]
 8001f80:	f003 0304 	and.w	r3, r3, #4
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d00c      	beq.n	8001fa2 <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	f003 0308 	and.w	r3, r3, #8
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d007      	beq.n	8001fa2 <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2208      	movs	r2, #8
 8001f98:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001fa2:	6a3b      	ldr	r3, [r7, #32]
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d00a      	beq.n	8001fc2 <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	f003 0303 	and.w	r3, r3, #3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001fc2:	6a3b      	ldr	r3, [r7, #32]
 8001fc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d00c      	beq.n	8001fe6 <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	f003 0310 	and.w	r3, r3, #16
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d007      	beq.n	8001fe6 <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fdc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2210      	movs	r2, #16
 8001fe4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001fe6:	6a3b      	ldr	r3, [r7, #32]
 8001fe8:	f003 0320 	and.w	r3, r3, #32
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d00c      	beq.n	800200a <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	f003 0308 	and.w	r3, r3, #8
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d007      	beq.n	800200a <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2208      	movs	r2, #8
 8002000:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800200a:	6a3b      	ldr	r3, [r7, #32]
 800200c:	f003 0310 	and.w	r3, r3, #16
 8002010:	2b00      	cmp	r3, #0
 8002012:	d00a      	beq.n	800202a <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	f003 0303 	and.w	r3, r3, #3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800202a:	6a3b      	ldr	r3, [r7, #32]
 800202c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d00c      	beq.n	800204e <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	f003 0310 	and.w	r3, r3, #16
 800203a:	2b00      	cmp	r3, #0
 800203c:	d007      	beq.n	800204e <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2210      	movs	r2, #16
 8002044:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800204e:	6a3b      	ldr	r3, [r7, #32]
 8002050:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d00c      	beq.n	8002072 <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	f003 0308 	and.w	r3, r3, #8
 800205e:	2b00      	cmp	r3, #0
 8002060:	d007      	beq.n	8002072 <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2208      	movs	r2, #8
 8002068:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002072:	6a3b      	ldr	r3, [r7, #32]
 8002074:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d07b      	beq.n	8002174 <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	f003 0304 	and.w	r3, r3, #4
 8002082:	2b00      	cmp	r3, #0
 8002084:	d072      	beq.n	800216c <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002086:	6a3b      	ldr	r3, [r7, #32]
 8002088:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800208c:	2b00      	cmp	r3, #0
 800208e:	d008      	beq.n	80020a2 <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800209a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80020a2:	6a3b      	ldr	r3, [r7, #32]
 80020a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d008      	beq.n	80020be <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80020b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b8:	f043 0302 	orr.w	r3, r3, #2
 80020bc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80020be:	6a3b      	ldr	r3, [r7, #32]
 80020c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d008      	beq.n	80020da <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80020d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d4:	f043 0304 	orr.w	r3, r3, #4
 80020d8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80020da:	6a3b      	ldr	r3, [r7, #32]
 80020dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d043      	beq.n	800216c <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d03e      	beq.n	800216c <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80020f4:	2b60      	cmp	r3, #96	@ 0x60
 80020f6:	d02b      	beq.n	8002150 <HAL_CAN_IRQHandler+0x344>
 80020f8:	2b60      	cmp	r3, #96	@ 0x60
 80020fa:	d82e      	bhi.n	800215a <HAL_CAN_IRQHandler+0x34e>
 80020fc:	2b50      	cmp	r3, #80	@ 0x50
 80020fe:	d022      	beq.n	8002146 <HAL_CAN_IRQHandler+0x33a>
 8002100:	2b50      	cmp	r3, #80	@ 0x50
 8002102:	d82a      	bhi.n	800215a <HAL_CAN_IRQHandler+0x34e>
 8002104:	2b40      	cmp	r3, #64	@ 0x40
 8002106:	d019      	beq.n	800213c <HAL_CAN_IRQHandler+0x330>
 8002108:	2b40      	cmp	r3, #64	@ 0x40
 800210a:	d826      	bhi.n	800215a <HAL_CAN_IRQHandler+0x34e>
 800210c:	2b30      	cmp	r3, #48	@ 0x30
 800210e:	d010      	beq.n	8002132 <HAL_CAN_IRQHandler+0x326>
 8002110:	2b30      	cmp	r3, #48	@ 0x30
 8002112:	d822      	bhi.n	800215a <HAL_CAN_IRQHandler+0x34e>
 8002114:	2b10      	cmp	r3, #16
 8002116:	d002      	beq.n	800211e <HAL_CAN_IRQHandler+0x312>
 8002118:	2b20      	cmp	r3, #32
 800211a:	d005      	beq.n	8002128 <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800211c:	e01d      	b.n	800215a <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 800211e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002120:	f043 0308 	orr.w	r3, r3, #8
 8002124:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002126:	e019      	b.n	800215c <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212a:	f043 0310 	orr.w	r3, r3, #16
 800212e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002130:	e014      	b.n	800215c <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002134:	f043 0320 	orr.w	r3, r3, #32
 8002138:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800213a:	e00f      	b.n	800215c <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 800213c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002142:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002144:	e00a      	b.n	800215c <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 8002146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002148:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800214c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800214e:	e005      	b.n	800215c <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002152:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002156:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002158:	e000      	b.n	800215c <HAL_CAN_IRQHandler+0x350>
            break;
 800215a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	699a      	ldr	r2, [r3, #24]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800216a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2204      	movs	r2, #4
 8002172:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002176:	2b00      	cmp	r3, #0
 8002178:	d009      	beq.n	800218e <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800217e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002180:	431a      	orrs	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800218e:	bf00      	nop
 8002190:	3728      	adds	r7, #40	@ 0x28
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002196:	b480      	push	{r7}
 8002198:	b083      	sub	sp, #12
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80021aa:	b480      	push	{r7}
 80021ac:	b083      	sub	sp, #12
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80021be:	b480      	push	{r7}
 80021c0:	b083      	sub	sp, #12
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80021c6:	bf00      	nop
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr

080021d2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021d2:	b480      	push	{r7}
 80021d4:	b083      	sub	sp, #12
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b083      	sub	sp, #12
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80021ee:	bf00      	nop
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b083      	sub	sp, #12
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002202:	bf00      	nop
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800220e:	b480      	push	{r7}
 8002210:	b083      	sub	sp, #12
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002216:	bf00      	nop
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002222:	b480      	push	{r7}
 8002224:	b083      	sub	sp, #12
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800222a:	bf00      	nop
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr

08002236 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002236:	b480      	push	{r7}
 8002238:	b083      	sub	sp, #12
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800224a:	b480      	push	{r7}
 800224c:	b083      	sub	sp, #12
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr

0800225e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800225e:	b480      	push	{r7}
 8002260:	b083      	sub	sp, #12
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
	...

08002274 <__NVIC_SetPriorityGrouping>:
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002284:	4b0c      	ldr	r3, [pc, #48]	@ (80022b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800228a:	68ba      	ldr	r2, [r7, #8]
 800228c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002290:	4013      	ands	r3, r2
 8002292:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800229c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022a6:	4a04      	ldr	r2, [pc, #16]	@ (80022b8 <__NVIC_SetPriorityGrouping+0x44>)
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	60d3      	str	r3, [r2, #12]
}
 80022ac:	bf00      	nop
 80022ae:	3714      	adds	r7, #20
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	e000ed00 	.word	0xe000ed00

080022bc <__NVIC_GetPriorityGrouping>:
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022c0:	4b04      	ldr	r3, [pc, #16]	@ (80022d4 <__NVIC_GetPriorityGrouping+0x18>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	0a1b      	lsrs	r3, r3, #8
 80022c6:	f003 0307 	and.w	r3, r3, #7
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	e000ed00 	.word	0xe000ed00

080022d8 <__NVIC_EnableIRQ>:
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	db0b      	blt.n	8002302 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ea:	79fb      	ldrb	r3, [r7, #7]
 80022ec:	f003 021f 	and.w	r2, r3, #31
 80022f0:	4907      	ldr	r1, [pc, #28]	@ (8002310 <__NVIC_EnableIRQ+0x38>)
 80022f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f6:	095b      	lsrs	r3, r3, #5
 80022f8:	2001      	movs	r0, #1
 80022fa:	fa00 f202 	lsl.w	r2, r0, r2
 80022fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002302:	bf00      	nop
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	e000e100 	.word	0xe000e100

08002314 <__NVIC_SetPriority>:
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	6039      	str	r1, [r7, #0]
 800231e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002324:	2b00      	cmp	r3, #0
 8002326:	db0a      	blt.n	800233e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	b2da      	uxtb	r2, r3
 800232c:	490c      	ldr	r1, [pc, #48]	@ (8002360 <__NVIC_SetPriority+0x4c>)
 800232e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002332:	0112      	lsls	r2, r2, #4
 8002334:	b2d2      	uxtb	r2, r2
 8002336:	440b      	add	r3, r1
 8002338:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800233c:	e00a      	b.n	8002354 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	b2da      	uxtb	r2, r3
 8002342:	4908      	ldr	r1, [pc, #32]	@ (8002364 <__NVIC_SetPriority+0x50>)
 8002344:	79fb      	ldrb	r3, [r7, #7]
 8002346:	f003 030f 	and.w	r3, r3, #15
 800234a:	3b04      	subs	r3, #4
 800234c:	0112      	lsls	r2, r2, #4
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	440b      	add	r3, r1
 8002352:	761a      	strb	r2, [r3, #24]
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	e000e100 	.word	0xe000e100
 8002364:	e000ed00 	.word	0xe000ed00

08002368 <NVIC_EncodePriority>:
{
 8002368:	b480      	push	{r7}
 800236a:	b089      	sub	sp, #36	@ 0x24
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	f1c3 0307 	rsb	r3, r3, #7
 8002382:	2b04      	cmp	r3, #4
 8002384:	bf28      	it	cs
 8002386:	2304      	movcs	r3, #4
 8002388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	3304      	adds	r3, #4
 800238e:	2b06      	cmp	r3, #6
 8002390:	d902      	bls.n	8002398 <NVIC_EncodePriority+0x30>
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	3b03      	subs	r3, #3
 8002396:	e000      	b.n	800239a <NVIC_EncodePriority+0x32>
 8002398:	2300      	movs	r3, #0
 800239a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800239c:	f04f 32ff 	mov.w	r2, #4294967295
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	43da      	mvns	r2, r3
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	401a      	ands	r2, r3
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023b0:	f04f 31ff 	mov.w	r1, #4294967295
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ba:	43d9      	mvns	r1, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c0:	4313      	orrs	r3, r2
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3724      	adds	r7, #36	@ 0x24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
	...

080023d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3b01      	subs	r3, #1
 80023dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023e0:	d301      	bcc.n	80023e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023e2:	2301      	movs	r3, #1
 80023e4:	e00f      	b.n	8002406 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002410 <SysTick_Config+0x40>)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3b01      	subs	r3, #1
 80023ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ee:	210f      	movs	r1, #15
 80023f0:	f04f 30ff 	mov.w	r0, #4294967295
 80023f4:	f7ff ff8e 	bl	8002314 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023f8:	4b05      	ldr	r3, [pc, #20]	@ (8002410 <SysTick_Config+0x40>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023fe:	4b04      	ldr	r3, [pc, #16]	@ (8002410 <SysTick_Config+0x40>)
 8002400:	2207      	movs	r2, #7
 8002402:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	e000e010 	.word	0xe000e010

08002414 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7ff ff29 	bl	8002274 <__NVIC_SetPriorityGrouping>
}
 8002422:	bf00      	nop
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800242a:	b580      	push	{r7, lr}
 800242c:	b086      	sub	sp, #24
 800242e:	af00      	add	r7, sp, #0
 8002430:	4603      	mov	r3, r0
 8002432:	60b9      	str	r1, [r7, #8]
 8002434:	607a      	str	r2, [r7, #4]
 8002436:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002438:	2300      	movs	r3, #0
 800243a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800243c:	f7ff ff3e 	bl	80022bc <__NVIC_GetPriorityGrouping>
 8002440:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	68b9      	ldr	r1, [r7, #8]
 8002446:	6978      	ldr	r0, [r7, #20]
 8002448:	f7ff ff8e 	bl	8002368 <NVIC_EncodePriority>
 800244c:	4602      	mov	r2, r0
 800244e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002452:	4611      	mov	r1, r2
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff ff5d 	bl	8002314 <__NVIC_SetPriority>
}
 800245a:	bf00      	nop
 800245c:	3718      	adds	r7, #24
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b082      	sub	sp, #8
 8002466:	af00      	add	r7, sp, #0
 8002468:	4603      	mov	r3, r0
 800246a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800246c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff ff31 	bl	80022d8 <__NVIC_EnableIRQ>
}
 8002476:	bf00      	nop
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b082      	sub	sp, #8
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f7ff ffa2 	bl	80023d0 <SysTick_Config>
 800248c:	4603      	mov	r3, r0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
	...

08002498 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80024aa:	4b23      	ldr	r3, [pc, #140]	@ (8002538 <HAL_FLASH_Program+0xa0>)
 80024ac:	7e1b      	ldrb	r3, [r3, #24]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d101      	bne.n	80024b6 <HAL_FLASH_Program+0x1e>
 80024b2:	2302      	movs	r3, #2
 80024b4:	e03b      	b.n	800252e <HAL_FLASH_Program+0x96>
 80024b6:	4b20      	ldr	r3, [pc, #128]	@ (8002538 <HAL_FLASH_Program+0xa0>)
 80024b8:	2201      	movs	r2, #1
 80024ba:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80024bc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80024c0:	f000 f92c 	bl	800271c <FLASH_WaitForLastOperation>
 80024c4:	4603      	mov	r3, r0
 80024c6:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80024c8:	7dfb      	ldrb	r3, [r7, #23]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d12b      	bne.n	8002526 <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d105      	bne.n	80024e0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80024d4:	783b      	ldrb	r3, [r7, #0]
 80024d6:	4619      	mov	r1, r3
 80024d8:	68b8      	ldr	r0, [r7, #8]
 80024da:	f000 f9d7 	bl	800288c <FLASH_Program_Byte>
 80024de:	e016      	b.n	800250e <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d105      	bne.n	80024f2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80024e6:	883b      	ldrh	r3, [r7, #0]
 80024e8:	4619      	mov	r1, r3
 80024ea:	68b8      	ldr	r0, [r7, #8]
 80024ec:	f000 f9aa 	bl	8002844 <FLASH_Program_HalfWord>
 80024f0:	e00d      	b.n	800250e <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d105      	bne.n	8002504 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	4619      	mov	r1, r3
 80024fc:	68b8      	ldr	r0, [r7, #8]
 80024fe:	f000 f97f 	bl	8002800 <FLASH_Program_Word>
 8002502:	e004      	b.n	800250e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8002504:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002508:	68b8      	ldr	r0, [r7, #8]
 800250a:	f000 f947 	bl	800279c <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800250e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002512:	f000 f903 	bl	800271c <FLASH_WaitForLastOperation>
 8002516:	4603      	mov	r3, r0
 8002518:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800251a:	4b08      	ldr	r3, [pc, #32]	@ (800253c <HAL_FLASH_Program+0xa4>)
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	4a07      	ldr	r2, [pc, #28]	@ (800253c <HAL_FLASH_Program+0xa4>)
 8002520:	f023 0301 	bic.w	r3, r3, #1
 8002524:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002526:	4b04      	ldr	r3, [pc, #16]	@ (8002538 <HAL_FLASH_Program+0xa0>)
 8002528:	2200      	movs	r2, #0
 800252a:	761a      	strb	r2, [r3, #24]

  return status;
 800252c:	7dfb      	ldrb	r3, [r7, #23]
}
 800252e:	4618      	mov	r0, r3
 8002530:	3718      	adds	r7, #24
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	20000104 	.word	0x20000104
 800253c:	40023c00 	.word	0x40023c00

08002540 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8002546:	2300      	movs	r3, #0
 8002548:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800254a:	4b49      	ldr	r3, [pc, #292]	@ (8002670 <HAL_FLASH_IRQHandler+0x130>)
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d020      	beq.n	8002598 <HAL_FLASH_IRQHandler+0x58>
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if (pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8002556:	4b47      	ldr	r3, [pc, #284]	@ (8002674 <HAL_FLASH_IRQHandler+0x134>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	b2db      	uxtb	r3, r3
 800255c:	2b01      	cmp	r3, #1
 800255e:	d107      	bne.n	8002570 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 8002560:	4b44      	ldr	r3, [pc, #272]	@ (8002674 <HAL_FLASH_IRQHandler+0x134>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 8002566:	4b43      	ldr	r3, [pc, #268]	@ (8002674 <HAL_FLASH_IRQHandler+0x134>)
 8002568:	f04f 32ff 	mov.w	r2, #4294967295
 800256c:	60da      	str	r2, [r3, #12]
 800256e:	e00b      	b.n	8002588 <HAL_FLASH_IRQHandler+0x48>
    }
    else if (pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8002570:	4b40      	ldr	r3, [pc, #256]	@ (8002674 <HAL_FLASH_IRQHandler+0x134>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d103      	bne.n	8002582 <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 800257a:	4b3e      	ldr	r3, [pc, #248]	@ (8002674 <HAL_FLASH_IRQHandler+0x134>)
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	607b      	str	r3, [r7, #4]
 8002580:	e002      	b.n	8002588 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 8002582:	4b3c      	ldr	r3, [pc, #240]	@ (8002674 <HAL_FLASH_IRQHandler+0x134>)
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	607b      	str	r3, [r7, #4]
    }

    /*Save the Error code*/
    FLASH_SetErrorCode();
 8002588:	f000 f9a2 	bl	80028d0 <FLASH_SetErrorCode>

    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 f87d 	bl	800268c <HAL_FLASH_OperationErrorCallback>

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002592:	4b38      	ldr	r3, [pc, #224]	@ (8002674 <HAL_FLASH_IRQHandler+0x134>)
 8002594:	2200      	movs	r2, #0
 8002596:	701a      	strb	r2, [r3, #0]
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002598:	4b35      	ldr	r3, [pc, #212]	@ (8002670 <HAL_FLASH_IRQHandler+0x130>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d04a      	beq.n	800263a <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80025a4:	4b32      	ldr	r3, [pc, #200]	@ (8002670 <HAL_FLASH_IRQHandler+0x130>)
 80025a6:	2201      	movs	r2, #1
 80025a8:	60da      	str	r2, [r3, #12]

    if (pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 80025aa:	4b32      	ldr	r3, [pc, #200]	@ (8002674 <HAL_FLASH_IRQHandler+0x134>)
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d12d      	bne.n	8002610 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 80025b4:	4b2f      	ldr	r3, [pc, #188]	@ (8002674 <HAL_FLASH_IRQHandler+0x134>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	3b01      	subs	r3, #1
 80025ba:	4a2e      	ldr	r2, [pc, #184]	@ (8002674 <HAL_FLASH_IRQHandler+0x134>)
 80025bc:	6053      	str	r3, [r2, #4]

      /* Check if there are still sectors to erase*/
      if (pFlash.NbSectorsToErase != 0U)
 80025be:	4b2d      	ldr	r3, [pc, #180]	@ (8002674 <HAL_FLASH_IRQHandler+0x134>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d015      	beq.n	80025f2 <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 80025c6:	4b2b      	ldr	r3, [pc, #172]	@ (8002674 <HAL_FLASH_IRQHandler+0x134>)
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f000 f853 	bl	8002678 <HAL_FLASH_EndOfOperationCallback>

        /*Increment sector number*/
        pFlash.Sector++;
 80025d2:	4b28      	ldr	r3, [pc, #160]	@ (8002674 <HAL_FLASH_IRQHandler+0x134>)
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	3301      	adds	r3, #1
 80025d8:	4a26      	ldr	r2, [pc, #152]	@ (8002674 <HAL_FLASH_IRQHandler+0x134>)
 80025da:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 80025dc:	4b25      	ldr	r3, [pc, #148]	@ (8002674 <HAL_FLASH_IRQHandler+0x134>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 80025e2:	4b24      	ldr	r3, [pc, #144]	@ (8002674 <HAL_FLASH_IRQHandler+0x134>)
 80025e4:	7a1b      	ldrb	r3, [r3, #8]
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	4619      	mov	r1, r3
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 fa5a 	bl	8002aa4 <FLASH_Erase_Sector>
 80025f0:	e023      	b.n	800263a <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 80025f2:	f04f 33ff 	mov.w	r3, #4294967295
 80025f6:	607b      	str	r3, [r7, #4]
 80025f8:	4a1e      	ldr	r2, [pc, #120]	@ (8002674 <HAL_FLASH_IRQHandler+0x134>)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80025fe:	4b1d      	ldr	r3, [pc, #116]	@ (8002674 <HAL_FLASH_IRQHandler+0x134>)
 8002600:	2200      	movs	r2, #0
 8002602:	701a      	strb	r2, [r3, #0]

        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches();
 8002604:	f000 fa96 	bl	8002b34 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 f835 	bl	8002678 <HAL_FLASH_EndOfOperationCallback>
 800260e:	e014      	b.n	800263a <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else
    {
      if (pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8002610:	4b18      	ldr	r3, [pc, #96]	@ (8002674 <HAL_FLASH_IRQHandler+0x134>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b02      	cmp	r3, #2
 8002618:	d107      	bne.n	800262a <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches();
 800261a:	f000 fa8b 	bl	8002b34 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 800261e:	4b15      	ldr	r3, [pc, #84]	@ (8002674 <HAL_FLASH_IRQHandler+0x134>)
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	4618      	mov	r0, r3
 8002624:	f000 f828 	bl	8002678 <HAL_FLASH_EndOfOperationCallback>
 8002628:	e004      	b.n	8002634 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 800262a:	4b12      	ldr	r3, [pc, #72]	@ (8002674 <HAL_FLASH_IRQHandler+0x134>)
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	4618      	mov	r0, r3
 8002630:	f000 f822 	bl	8002678 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002634:	4b0f      	ldr	r3, [pc, #60]	@ (8002674 <HAL_FLASH_IRQHandler+0x134>)
 8002636:	2200      	movs	r2, #0
 8002638:	701a      	strb	r2, [r3, #0]
    }
  }

  if (pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 800263a:	4b0e      	ldr	r3, [pc, #56]	@ (8002674 <HAL_FLASH_IRQHandler+0x134>)
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	b2db      	uxtb	r3, r3
 8002640:	2b00      	cmp	r3, #0
 8002642:	d111      	bne.n	8002668 <HAL_FLASH_IRQHandler+0x128>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8002644:	4b0a      	ldr	r3, [pc, #40]	@ (8002670 <HAL_FLASH_IRQHandler+0x130>)
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	4a09      	ldr	r2, [pc, #36]	@ (8002670 <HAL_FLASH_IRQHandler+0x130>)
 800264a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800264e:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8002650:	4b07      	ldr	r3, [pc, #28]	@ (8002670 <HAL_FLASH_IRQHandler+0x130>)
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	4a06      	ldr	r2, [pc, #24]	@ (8002670 <HAL_FLASH_IRQHandler+0x130>)
 8002656:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800265a:	6113      	str	r3, [r2, #16]

    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 800265c:	4b04      	ldr	r3, [pc, #16]	@ (8002670 <HAL_FLASH_IRQHandler+0x130>)
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	4a03      	ldr	r2, [pc, #12]	@ (8002670 <HAL_FLASH_IRQHandler+0x130>)
 8002662:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8002666:	6113      	str	r3, [r2, #16]
  }
}
 8002668:	bf00      	nop
 800266a:	3708      	adds	r7, #8
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40023c00 	.word	0x40023c00
 8002674:	20000104 	.word	0x20000104

08002678 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80026a6:	2300      	movs	r3, #0
 80026a8:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80026aa:	4b0b      	ldr	r3, [pc, #44]	@ (80026d8 <HAL_FLASH_Unlock+0x38>)
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	da0b      	bge.n	80026ca <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80026b2:	4b09      	ldr	r3, [pc, #36]	@ (80026d8 <HAL_FLASH_Unlock+0x38>)
 80026b4:	4a09      	ldr	r2, [pc, #36]	@ (80026dc <HAL_FLASH_Unlock+0x3c>)
 80026b6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80026b8:	4b07      	ldr	r3, [pc, #28]	@ (80026d8 <HAL_FLASH_Unlock+0x38>)
 80026ba:	4a09      	ldr	r2, [pc, #36]	@ (80026e0 <HAL_FLASH_Unlock+0x40>)
 80026bc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80026be:	4b06      	ldr	r3, [pc, #24]	@ (80026d8 <HAL_FLASH_Unlock+0x38>)
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	da01      	bge.n	80026ca <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80026ca:	79fb      	ldrb	r3, [r7, #7]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	40023c00 	.word	0x40023c00
 80026dc:	45670123 	.word	0x45670123
 80026e0:	cdef89ab 	.word	0xcdef89ab

080026e4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80026e8:	4b05      	ldr	r3, [pc, #20]	@ (8002700 <HAL_FLASH_Lock+0x1c>)
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	4a04      	ldr	r2, [pc, #16]	@ (8002700 <HAL_FLASH_Lock+0x1c>)
 80026ee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80026f2:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	40023c00 	.word	0x40023c00

08002704 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag
  */
uint32_t HAL_FLASH_GetError(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  return pFlash.ErrorCode;
 8002708:	4b03      	ldr	r3, [pc, #12]	@ (8002718 <HAL_FLASH_GetError+0x14>)
 800270a:	69db      	ldr	r3, [r3, #28]
}
 800270c:	4618      	mov	r0, r3
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	20000104 	.word	0x20000104

0800271c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002724:	2300      	movs	r3, #0
 8002726:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002728:	4b1a      	ldr	r3, [pc, #104]	@ (8002794 <FLASH_WaitForLastOperation+0x78>)
 800272a:	2200      	movs	r2, #0
 800272c:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800272e:	f7fe fedf 	bl	80014f0 <HAL_GetTick>
 8002732:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8002734:	e010      	b.n	8002758 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800273c:	d00c      	beq.n	8002758 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d007      	beq.n	8002754 <FLASH_WaitForLastOperation+0x38>
 8002744:	f7fe fed4 	bl	80014f0 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	429a      	cmp	r2, r3
 8002752:	d201      	bcs.n	8002758 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e019      	b.n	800278c <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8002758:	4b0f      	ldr	r3, [pc, #60]	@ (8002798 <FLASH_WaitForLastOperation+0x7c>)
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1e8      	bne.n	8002736 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002764:	4b0c      	ldr	r3, [pc, #48]	@ (8002798 <FLASH_WaitForLastOperation+0x7c>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	2b00      	cmp	r3, #0
 800276e:	d002      	beq.n	8002776 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002770:	4b09      	ldr	r3, [pc, #36]	@ (8002798 <FLASH_WaitForLastOperation+0x7c>)
 8002772:	2201      	movs	r2, #1
 8002774:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002776:	4b08      	ldr	r3, [pc, #32]	@ (8002798 <FLASH_WaitForLastOperation+0x7c>)
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <FLASH_WaitForLastOperation+0x6e>
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002782:	f000 f8a5 	bl	80028d0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e000      	b.n	800278c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800278a:	2300      	movs	r3, #0

}
 800278c:	4618      	mov	r0, r3
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	20000104 	.word	0x20000104
 8002798:	40023c00 	.word	0x40023c00

0800279c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80027a8:	4b14      	ldr	r3, [pc, #80]	@ (80027fc <FLASH_Program_DoubleWord+0x60>)
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	4a13      	ldr	r2, [pc, #76]	@ (80027fc <FLASH_Program_DoubleWord+0x60>)
 80027ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80027b4:	4b11      	ldr	r3, [pc, #68]	@ (80027fc <FLASH_Program_DoubleWord+0x60>)
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	4a10      	ldr	r2, [pc, #64]	@ (80027fc <FLASH_Program_DoubleWord+0x60>)
 80027ba:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80027be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80027c0:	4b0e      	ldr	r3, [pc, #56]	@ (80027fc <FLASH_Program_DoubleWord+0x60>)
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	4a0d      	ldr	r2, [pc, #52]	@ (80027fc <FLASH_Program_DoubleWord+0x60>)
 80027c6:	f043 0301 	orr.w	r3, r3, #1
 80027ca:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80027d2:	f3bf 8f6f 	isb	sy
}
 80027d6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 80027d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80027dc:	f04f 0200 	mov.w	r2, #0
 80027e0:	f04f 0300 	mov.w	r3, #0
 80027e4:	000a      	movs	r2, r1
 80027e6:	2300      	movs	r3, #0
 80027e8:	68f9      	ldr	r1, [r7, #12]
 80027ea:	3104      	adds	r1, #4
 80027ec:	4613      	mov	r3, r2
 80027ee:	600b      	str	r3, [r1, #0]
}
 80027f0:	bf00      	nop
 80027f2:	3714      	adds	r7, #20
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	40023c00 	.word	0x40023c00

08002800 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800280a:	4b0d      	ldr	r3, [pc, #52]	@ (8002840 <FLASH_Program_Word+0x40>)
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	4a0c      	ldr	r2, [pc, #48]	@ (8002840 <FLASH_Program_Word+0x40>)
 8002810:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002814:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002816:	4b0a      	ldr	r3, [pc, #40]	@ (8002840 <FLASH_Program_Word+0x40>)
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	4a09      	ldr	r2, [pc, #36]	@ (8002840 <FLASH_Program_Word+0x40>)
 800281c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002820:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002822:	4b07      	ldr	r3, [pc, #28]	@ (8002840 <FLASH_Program_Word+0x40>)
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	4a06      	ldr	r2, [pc, #24]	@ (8002840 <FLASH_Program_Word+0x40>)
 8002828:	f043 0301 	orr.w	r3, r3, #1
 800282c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	601a      	str	r2, [r3, #0]
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr
 8002840:	40023c00 	.word	0x40023c00

08002844 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	460b      	mov	r3, r1
 800284e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002850:	4b0d      	ldr	r3, [pc, #52]	@ (8002888 <FLASH_Program_HalfWord+0x44>)
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	4a0c      	ldr	r2, [pc, #48]	@ (8002888 <FLASH_Program_HalfWord+0x44>)
 8002856:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800285a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800285c:	4b0a      	ldr	r3, [pc, #40]	@ (8002888 <FLASH_Program_HalfWord+0x44>)
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	4a09      	ldr	r2, [pc, #36]	@ (8002888 <FLASH_Program_HalfWord+0x44>)
 8002862:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002866:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002868:	4b07      	ldr	r3, [pc, #28]	@ (8002888 <FLASH_Program_HalfWord+0x44>)
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	4a06      	ldr	r2, [pc, #24]	@ (8002888 <FLASH_Program_HalfWord+0x44>)
 800286e:	f043 0301 	orr.w	r3, r3, #1
 8002872:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	887a      	ldrh	r2, [r7, #2]
 8002878:	801a      	strh	r2, [r3, #0]
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	40023c00 	.word	0x40023c00

0800288c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	460b      	mov	r3, r1
 8002896:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002898:	4b0c      	ldr	r3, [pc, #48]	@ (80028cc <FLASH_Program_Byte+0x40>)
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	4a0b      	ldr	r2, [pc, #44]	@ (80028cc <FLASH_Program_Byte+0x40>)
 800289e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80028a4:	4b09      	ldr	r3, [pc, #36]	@ (80028cc <FLASH_Program_Byte+0x40>)
 80028a6:	4a09      	ldr	r2, [pc, #36]	@ (80028cc <FLASH_Program_Byte+0x40>)
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80028ac:	4b07      	ldr	r3, [pc, #28]	@ (80028cc <FLASH_Program_Byte+0x40>)
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	4a06      	ldr	r2, [pc, #24]	@ (80028cc <FLASH_Program_Byte+0x40>)
 80028b2:	f043 0301 	orr.w	r3, r3, #1
 80028b6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	78fa      	ldrb	r2, [r7, #3]
 80028bc:	701a      	strb	r2, [r3, #0]
}
 80028be:	bf00      	nop
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	40023c00 	.word	0x40023c00

080028d0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80028d4:	4b27      	ldr	r3, [pc, #156]	@ (8002974 <FLASH_SetErrorCode+0xa4>)
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	f003 0310 	and.w	r3, r3, #16
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d008      	beq.n	80028f2 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80028e0:	4b25      	ldr	r3, [pc, #148]	@ (8002978 <FLASH_SetErrorCode+0xa8>)
 80028e2:	69db      	ldr	r3, [r3, #28]
 80028e4:	f043 0310 	orr.w	r3, r3, #16
 80028e8:	4a23      	ldr	r2, [pc, #140]	@ (8002978 <FLASH_SetErrorCode+0xa8>)
 80028ea:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80028ec:	4b21      	ldr	r3, [pc, #132]	@ (8002974 <FLASH_SetErrorCode+0xa4>)
 80028ee:	2210      	movs	r2, #16
 80028f0:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80028f2:	4b20      	ldr	r3, [pc, #128]	@ (8002974 <FLASH_SetErrorCode+0xa4>)
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	f003 0320 	and.w	r3, r3, #32
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d008      	beq.n	8002910 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80028fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002978 <FLASH_SetErrorCode+0xa8>)
 8002900:	69db      	ldr	r3, [r3, #28]
 8002902:	f043 0308 	orr.w	r3, r3, #8
 8002906:	4a1c      	ldr	r2, [pc, #112]	@ (8002978 <FLASH_SetErrorCode+0xa8>)
 8002908:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800290a:	4b1a      	ldr	r3, [pc, #104]	@ (8002974 <FLASH_SetErrorCode+0xa4>)
 800290c:	2220      	movs	r2, #32
 800290e:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002910:	4b18      	ldr	r3, [pc, #96]	@ (8002974 <FLASH_SetErrorCode+0xa4>)
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002918:	2b00      	cmp	r3, #0
 800291a:	d008      	beq.n	800292e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800291c:	4b16      	ldr	r3, [pc, #88]	@ (8002978 <FLASH_SetErrorCode+0xa8>)
 800291e:	69db      	ldr	r3, [r3, #28]
 8002920:	f043 0304 	orr.w	r3, r3, #4
 8002924:	4a14      	ldr	r2, [pc, #80]	@ (8002978 <FLASH_SetErrorCode+0xa8>)
 8002926:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002928:	4b12      	ldr	r3, [pc, #72]	@ (8002974 <FLASH_SetErrorCode+0xa4>)
 800292a:	2240      	movs	r2, #64	@ 0x40
 800292c:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800292e:	4b11      	ldr	r3, [pc, #68]	@ (8002974 <FLASH_SetErrorCode+0xa4>)
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002936:	2b00      	cmp	r3, #0
 8002938:	d008      	beq.n	800294c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800293a:	4b0f      	ldr	r3, [pc, #60]	@ (8002978 <FLASH_SetErrorCode+0xa8>)
 800293c:	69db      	ldr	r3, [r3, #28]
 800293e:	f043 0302 	orr.w	r3, r3, #2
 8002942:	4a0d      	ldr	r2, [pc, #52]	@ (8002978 <FLASH_SetErrorCode+0xa8>)
 8002944:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002946:	4b0b      	ldr	r3, [pc, #44]	@ (8002974 <FLASH_SetErrorCode+0xa4>)
 8002948:	2280      	movs	r2, #128	@ 0x80
 800294a:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800294c:	4b09      	ldr	r3, [pc, #36]	@ (8002974 <FLASH_SetErrorCode+0xa4>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d008      	beq.n	800296a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002958:	4b07      	ldr	r3, [pc, #28]	@ (8002978 <FLASH_SetErrorCode+0xa8>)
 800295a:	69db      	ldr	r3, [r3, #28]
 800295c:	f043 0320 	orr.w	r3, r3, #32
 8002960:	4a05      	ldr	r2, [pc, #20]	@ (8002978 <FLASH_SetErrorCode+0xa8>)
 8002962:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002964:	4b03      	ldr	r3, [pc, #12]	@ (8002974 <FLASH_SetErrorCode+0xa4>)
 8002966:	2202      	movs	r2, #2
 8002968:	60da      	str	r2, [r3, #12]
  }
}
 800296a:	bf00      	nop
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr
 8002974:	40023c00 	.word	0x40023c00
 8002978:	20000104 	.word	0x20000104

0800297c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800298a:	2300      	movs	r3, #0
 800298c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800298e:	4b31      	ldr	r3, [pc, #196]	@ (8002a54 <HAL_FLASHEx_Erase+0xd8>)
 8002990:	7e1b      	ldrb	r3, [r3, #24]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d101      	bne.n	800299a <HAL_FLASHEx_Erase+0x1e>
 8002996:	2302      	movs	r3, #2
 8002998:	e058      	b.n	8002a4c <HAL_FLASHEx_Erase+0xd0>
 800299a:	4b2e      	ldr	r3, [pc, #184]	@ (8002a54 <HAL_FLASHEx_Erase+0xd8>)
 800299c:	2201      	movs	r2, #1
 800299e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80029a0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80029a4:	f7ff feba 	bl	800271c <FLASH_WaitForLastOperation>
 80029a8:	4603      	mov	r3, r0
 80029aa:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80029ac:	7bfb      	ldrb	r3, [r7, #15]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d148      	bne.n	8002a44 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	f04f 32ff 	mov.w	r2, #4294967295
 80029b8:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d115      	bne.n	80029ee <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	b2da      	uxtb	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	4619      	mov	r1, r3
 80029ce:	4610      	mov	r0, r2
 80029d0:	f000 f844 	bl	8002a5c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80029d4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80029d8:	f7ff fea0 	bl	800271c <FLASH_WaitForLastOperation>
 80029dc:	4603      	mov	r3, r0
 80029de:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80029e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002a58 <HAL_FLASHEx_Erase+0xdc>)
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	4a1c      	ldr	r2, [pc, #112]	@ (8002a58 <HAL_FLASHEx_Erase+0xdc>)
 80029e6:	f023 0304 	bic.w	r3, r3, #4
 80029ea:	6113      	str	r3, [r2, #16]
 80029ec:	e028      	b.n	8002a40 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	60bb      	str	r3, [r7, #8]
 80029f4:	e01c      	b.n	8002a30 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	4619      	mov	r1, r3
 80029fe:	68b8      	ldr	r0, [r7, #8]
 8002a00:	f000 f850 	bl	8002aa4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a04:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002a08:	f7ff fe88 	bl	800271c <FLASH_WaitForLastOperation>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002a10:	4b11      	ldr	r3, [pc, #68]	@ (8002a58 <HAL_FLASHEx_Erase+0xdc>)
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	4a10      	ldr	r2, [pc, #64]	@ (8002a58 <HAL_FLASHEx_Erase+0xdc>)
 8002a16:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8002a1a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8002a1c:	7bfb      	ldrb	r3, [r7, #15]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	68ba      	ldr	r2, [r7, #8]
 8002a26:	601a      	str	r2, [r3, #0]
          break;
 8002a28:	e00a      	b.n	8002a40 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	60bb      	str	r3, [r7, #8]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68da      	ldr	r2, [r3, #12]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	4413      	add	r3, r2
 8002a3a:	68ba      	ldr	r2, [r7, #8]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d3da      	bcc.n	80029f6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002a40:	f000 f878 	bl	8002b34 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002a44:	4b03      	ldr	r3, [pc, #12]	@ (8002a54 <HAL_FLASHEx_Erase+0xd8>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	761a      	strb	r2, [r3, #24]

  return status;
 8002a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3710      	adds	r7, #16
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	20000104 	.word	0x20000104
 8002a58:	40023c00 	.word	0x40023c00

08002a5c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	4603      	mov	r3, r0
 8002a64:	6039      	str	r1, [r7, #0]
 8002a66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002a68:	4b0d      	ldr	r3, [pc, #52]	@ (8002aa0 <FLASH_MassErase+0x44>)
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	4a0c      	ldr	r2, [pc, #48]	@ (8002aa0 <FLASH_MassErase+0x44>)
 8002a6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a72:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002a74:	4b0a      	ldr	r3, [pc, #40]	@ (8002aa0 <FLASH_MassErase+0x44>)
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	4a09      	ldr	r2, [pc, #36]	@ (8002aa0 <FLASH_MassErase+0x44>)
 8002a7a:	f043 0304 	orr.w	r3, r3, #4
 8002a7e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8002a80:	4b07      	ldr	r3, [pc, #28]	@ (8002aa0 <FLASH_MassErase+0x44>)
 8002a82:	691a      	ldr	r2, [r3, #16]
 8002a84:	79fb      	ldrb	r3, [r7, #7]
 8002a86:	021b      	lsls	r3, r3, #8
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	4a05      	ldr	r2, [pc, #20]	@ (8002aa0 <FLASH_MassErase+0x44>)
 8002a8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a90:	6113      	str	r3, [r2, #16]
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	40023c00 	.word	0x40023c00

08002aa4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	460b      	mov	r3, r1
 8002aae:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002ab4:	78fb      	ldrb	r3, [r7, #3]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d102      	bne.n	8002ac0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002aba:	2300      	movs	r3, #0
 8002abc:	60fb      	str	r3, [r7, #12]
 8002abe:	e010      	b.n	8002ae2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002ac0:	78fb      	ldrb	r3, [r7, #3]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d103      	bne.n	8002ace <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002ac6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	e009      	b.n	8002ae2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002ace:	78fb      	ldrb	r3, [r7, #3]
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d103      	bne.n	8002adc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002ad4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ad8:	60fb      	str	r3, [r7, #12]
 8002ada:	e002      	b.n	8002ae2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002adc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002ae0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002ae2:	4b13      	ldr	r3, [pc, #76]	@ (8002b30 <FLASH_Erase_Sector+0x8c>)
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	4a12      	ldr	r2, [pc, #72]	@ (8002b30 <FLASH_Erase_Sector+0x8c>)
 8002ae8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002aec:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002aee:	4b10      	ldr	r3, [pc, #64]	@ (8002b30 <FLASH_Erase_Sector+0x8c>)
 8002af0:	691a      	ldr	r2, [r3, #16]
 8002af2:	490f      	ldr	r1, [pc, #60]	@ (8002b30 <FLASH_Erase_Sector+0x8c>)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002afa:	4b0d      	ldr	r3, [pc, #52]	@ (8002b30 <FLASH_Erase_Sector+0x8c>)
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	4a0c      	ldr	r2, [pc, #48]	@ (8002b30 <FLASH_Erase_Sector+0x8c>)
 8002b00:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002b04:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002b06:	4b0a      	ldr	r3, [pc, #40]	@ (8002b30 <FLASH_Erase_Sector+0x8c>)
 8002b08:	691a      	ldr	r2, [r3, #16]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	00db      	lsls	r3, r3, #3
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	4a07      	ldr	r2, [pc, #28]	@ (8002b30 <FLASH_Erase_Sector+0x8c>)
 8002b12:	f043 0302 	orr.w	r3, r3, #2
 8002b16:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002b18:	4b05      	ldr	r3, [pc, #20]	@ (8002b30 <FLASH_Erase_Sector+0x8c>)
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	4a04      	ldr	r2, [pc, #16]	@ (8002b30 <FLASH_Erase_Sector+0x8c>)
 8002b1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b22:	6113      	str	r3, [r2, #16]
}
 8002b24:	bf00      	nop
 8002b26:	3714      	adds	r7, #20
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	40023c00 	.word	0x40023c00

08002b34 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002b38:	4b20      	ldr	r3, [pc, #128]	@ (8002bbc <FLASH_FlushCaches+0x88>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d017      	beq.n	8002b74 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002b44:	4b1d      	ldr	r3, [pc, #116]	@ (8002bbc <FLASH_FlushCaches+0x88>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a1c      	ldr	r2, [pc, #112]	@ (8002bbc <FLASH_FlushCaches+0x88>)
 8002b4a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002b4e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002b50:	4b1a      	ldr	r3, [pc, #104]	@ (8002bbc <FLASH_FlushCaches+0x88>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a19      	ldr	r2, [pc, #100]	@ (8002bbc <FLASH_FlushCaches+0x88>)
 8002b56:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002b5a:	6013      	str	r3, [r2, #0]
 8002b5c:	4b17      	ldr	r3, [pc, #92]	@ (8002bbc <FLASH_FlushCaches+0x88>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a16      	ldr	r2, [pc, #88]	@ (8002bbc <FLASH_FlushCaches+0x88>)
 8002b62:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002b66:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b68:	4b14      	ldr	r3, [pc, #80]	@ (8002bbc <FLASH_FlushCaches+0x88>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a13      	ldr	r2, [pc, #76]	@ (8002bbc <FLASH_FlushCaches+0x88>)
 8002b6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b72:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002b74:	4b11      	ldr	r3, [pc, #68]	@ (8002bbc <FLASH_FlushCaches+0x88>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d017      	beq.n	8002bb0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002b80:	4b0e      	ldr	r3, [pc, #56]	@ (8002bbc <FLASH_FlushCaches+0x88>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a0d      	ldr	r2, [pc, #52]	@ (8002bbc <FLASH_FlushCaches+0x88>)
 8002b86:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002b8a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002bbc <FLASH_FlushCaches+0x88>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a0a      	ldr	r2, [pc, #40]	@ (8002bbc <FLASH_FlushCaches+0x88>)
 8002b92:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002b96:	6013      	str	r3, [r2, #0]
 8002b98:	4b08      	ldr	r3, [pc, #32]	@ (8002bbc <FLASH_FlushCaches+0x88>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a07      	ldr	r2, [pc, #28]	@ (8002bbc <FLASH_FlushCaches+0x88>)
 8002b9e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002ba2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ba4:	4b05      	ldr	r3, [pc, #20]	@ (8002bbc <FLASH_FlushCaches+0x88>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a04      	ldr	r2, [pc, #16]	@ (8002bbc <FLASH_FlushCaches+0x88>)
 8002baa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002bae:	6013      	str	r3, [r2, #0]
  }
}
 8002bb0:	bf00      	nop
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	40023c00 	.word	0x40023c00

08002bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b089      	sub	sp, #36	@ 0x24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61fb      	str	r3, [r7, #28]
 8002bda:	e16b      	b.n	8002eb4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bdc:	2201      	movs	r2, #1
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	4013      	ands	r3, r2
 8002bee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	f040 815a 	bne.w	8002eae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f003 0303 	and.w	r3, r3, #3
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d005      	beq.n	8002c12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d130      	bne.n	8002c74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	2203      	movs	r2, #3
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	43db      	mvns	r3, r3
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	4013      	ands	r3, r2
 8002c28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	68da      	ldr	r2, [r3, #12]
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c48:	2201      	movs	r2, #1
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	43db      	mvns	r3, r3
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4013      	ands	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	091b      	lsrs	r3, r3, #4
 8002c5e:	f003 0201 	and.w	r2, r3, #1
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f003 0303 	and.w	r3, r3, #3
 8002c7c:	2b03      	cmp	r3, #3
 8002c7e:	d017      	beq.n	8002cb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	2203      	movs	r2, #3
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	43db      	mvns	r3, r3
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	4013      	ands	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f003 0303 	and.w	r3, r3, #3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d123      	bne.n	8002d04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	08da      	lsrs	r2, r3, #3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	3208      	adds	r2, #8
 8002cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	f003 0307 	and.w	r3, r3, #7
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	220f      	movs	r2, #15
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	691a      	ldr	r2, [r3, #16]
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	f003 0307 	and.w	r3, r3, #7
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	08da      	lsrs	r2, r3, #3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	3208      	adds	r2, #8
 8002cfe:	69b9      	ldr	r1, [r7, #24]
 8002d00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	2203      	movs	r2, #3
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	43db      	mvns	r3, r3
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f003 0203 	and.w	r2, r3, #3
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	f000 80b4 	beq.w	8002eae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d46:	2300      	movs	r3, #0
 8002d48:	60fb      	str	r3, [r7, #12]
 8002d4a:	4b60      	ldr	r3, [pc, #384]	@ (8002ecc <HAL_GPIO_Init+0x30c>)
 8002d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d4e:	4a5f      	ldr	r2, [pc, #380]	@ (8002ecc <HAL_GPIO_Init+0x30c>)
 8002d50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d54:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d56:	4b5d      	ldr	r3, [pc, #372]	@ (8002ecc <HAL_GPIO_Init+0x30c>)
 8002d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d62:	4a5b      	ldr	r2, [pc, #364]	@ (8002ed0 <HAL_GPIO_Init+0x310>)
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	089b      	lsrs	r3, r3, #2
 8002d68:	3302      	adds	r3, #2
 8002d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	f003 0303 	and.w	r3, r3, #3
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	220f      	movs	r2, #15
 8002d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7e:	43db      	mvns	r3, r3
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	4013      	ands	r3, r2
 8002d84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a52      	ldr	r2, [pc, #328]	@ (8002ed4 <HAL_GPIO_Init+0x314>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d02b      	beq.n	8002de6 <HAL_GPIO_Init+0x226>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a51      	ldr	r2, [pc, #324]	@ (8002ed8 <HAL_GPIO_Init+0x318>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d025      	beq.n	8002de2 <HAL_GPIO_Init+0x222>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a50      	ldr	r2, [pc, #320]	@ (8002edc <HAL_GPIO_Init+0x31c>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d01f      	beq.n	8002dde <HAL_GPIO_Init+0x21e>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a4f      	ldr	r2, [pc, #316]	@ (8002ee0 <HAL_GPIO_Init+0x320>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d019      	beq.n	8002dda <HAL_GPIO_Init+0x21a>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a4e      	ldr	r2, [pc, #312]	@ (8002ee4 <HAL_GPIO_Init+0x324>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d013      	beq.n	8002dd6 <HAL_GPIO_Init+0x216>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a4d      	ldr	r2, [pc, #308]	@ (8002ee8 <HAL_GPIO_Init+0x328>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d00d      	beq.n	8002dd2 <HAL_GPIO_Init+0x212>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a4c      	ldr	r2, [pc, #304]	@ (8002eec <HAL_GPIO_Init+0x32c>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d007      	beq.n	8002dce <HAL_GPIO_Init+0x20e>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a4b      	ldr	r2, [pc, #300]	@ (8002ef0 <HAL_GPIO_Init+0x330>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d101      	bne.n	8002dca <HAL_GPIO_Init+0x20a>
 8002dc6:	2307      	movs	r3, #7
 8002dc8:	e00e      	b.n	8002de8 <HAL_GPIO_Init+0x228>
 8002dca:	2308      	movs	r3, #8
 8002dcc:	e00c      	b.n	8002de8 <HAL_GPIO_Init+0x228>
 8002dce:	2306      	movs	r3, #6
 8002dd0:	e00a      	b.n	8002de8 <HAL_GPIO_Init+0x228>
 8002dd2:	2305      	movs	r3, #5
 8002dd4:	e008      	b.n	8002de8 <HAL_GPIO_Init+0x228>
 8002dd6:	2304      	movs	r3, #4
 8002dd8:	e006      	b.n	8002de8 <HAL_GPIO_Init+0x228>
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e004      	b.n	8002de8 <HAL_GPIO_Init+0x228>
 8002dde:	2302      	movs	r3, #2
 8002de0:	e002      	b.n	8002de8 <HAL_GPIO_Init+0x228>
 8002de2:	2301      	movs	r3, #1
 8002de4:	e000      	b.n	8002de8 <HAL_GPIO_Init+0x228>
 8002de6:	2300      	movs	r3, #0
 8002de8:	69fa      	ldr	r2, [r7, #28]
 8002dea:	f002 0203 	and.w	r2, r2, #3
 8002dee:	0092      	lsls	r2, r2, #2
 8002df0:	4093      	lsls	r3, r2
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002df8:	4935      	ldr	r1, [pc, #212]	@ (8002ed0 <HAL_GPIO_Init+0x310>)
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	089b      	lsrs	r3, r3, #2
 8002dfe:	3302      	adds	r3, #2
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e06:	4b3b      	ldr	r3, [pc, #236]	@ (8002ef4 <HAL_GPIO_Init+0x334>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	43db      	mvns	r3, r3
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	4013      	ands	r3, r2
 8002e14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d003      	beq.n	8002e2a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e2a:	4a32      	ldr	r2, [pc, #200]	@ (8002ef4 <HAL_GPIO_Init+0x334>)
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e30:	4b30      	ldr	r3, [pc, #192]	@ (8002ef4 <HAL_GPIO_Init+0x334>)
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d003      	beq.n	8002e54 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e54:	4a27      	ldr	r2, [pc, #156]	@ (8002ef4 <HAL_GPIO_Init+0x334>)
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e5a:	4b26      	ldr	r3, [pc, #152]	@ (8002ef4 <HAL_GPIO_Init+0x334>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	43db      	mvns	r3, r3
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	4013      	ands	r3, r2
 8002e68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d003      	beq.n	8002e7e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e7e:	4a1d      	ldr	r2, [pc, #116]	@ (8002ef4 <HAL_GPIO_Init+0x334>)
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e84:	4b1b      	ldr	r3, [pc, #108]	@ (8002ef4 <HAL_GPIO_Init+0x334>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	4013      	ands	r3, r2
 8002e92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d003      	beq.n	8002ea8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ea8:	4a12      	ldr	r2, [pc, #72]	@ (8002ef4 <HAL_GPIO_Init+0x334>)
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	61fb      	str	r3, [r7, #28]
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	2b0f      	cmp	r3, #15
 8002eb8:	f67f ae90 	bls.w	8002bdc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ebc:	bf00      	nop
 8002ebe:	bf00      	nop
 8002ec0:	3724      	adds	r7, #36	@ 0x24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	40023800 	.word	0x40023800
 8002ed0:	40013800 	.word	0x40013800
 8002ed4:	40020000 	.word	0x40020000
 8002ed8:	40020400 	.word	0x40020400
 8002edc:	40020800 	.word	0x40020800
 8002ee0:	40020c00 	.word	0x40020c00
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	40021400 	.word	0x40021400
 8002eec:	40021800 	.word	0x40021800
 8002ef0:	40021c00 	.word	0x40021c00
 8002ef4:	40013c00 	.word	0x40013c00

08002ef8 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8002efc:	4b06      	ldr	r3, [pc, #24]	@ (8002f18 <HAL_PWR_PVD_IRQHandler+0x20>)
 8002efe:	695b      	ldr	r3, [r3, #20]
 8002f00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d005      	beq.n	8002f14 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8002f08:	f000 f808 	bl	8002f1c <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8002f0c:	4b02      	ldr	r3, [pc, #8]	@ (8002f18 <HAL_PWR_PVD_IRQHandler+0x20>)
 8002f0e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002f12:	615a      	str	r2, [r3, #20]
  }
}
 8002f14:	bf00      	nop
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	40013c00 	.word	0x40013c00

08002f1c <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8002f20:	bf00      	nop
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
	...

08002f2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e267      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d075      	beq.n	8003036 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002f4a:	4b88      	ldr	r3, [pc, #544]	@ (800316c <HAL_RCC_OscConfig+0x240>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 030c 	and.w	r3, r3, #12
 8002f52:	2b04      	cmp	r3, #4
 8002f54:	d00c      	beq.n	8002f70 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f56:	4b85      	ldr	r3, [pc, #532]	@ (800316c <HAL_RCC_OscConfig+0x240>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002f5e:	2b08      	cmp	r3, #8
 8002f60:	d112      	bne.n	8002f88 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f62:	4b82      	ldr	r3, [pc, #520]	@ (800316c <HAL_RCC_OscConfig+0x240>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f6e:	d10b      	bne.n	8002f88 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f70:	4b7e      	ldr	r3, [pc, #504]	@ (800316c <HAL_RCC_OscConfig+0x240>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d05b      	beq.n	8003034 <HAL_RCC_OscConfig+0x108>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d157      	bne.n	8003034 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e242      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f90:	d106      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x74>
 8002f92:	4b76      	ldr	r3, [pc, #472]	@ (800316c <HAL_RCC_OscConfig+0x240>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a75      	ldr	r2, [pc, #468]	@ (800316c <HAL_RCC_OscConfig+0x240>)
 8002f98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f9c:	6013      	str	r3, [r2, #0]
 8002f9e:	e01d      	b.n	8002fdc <HAL_RCC_OscConfig+0xb0>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002fa8:	d10c      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x98>
 8002faa:	4b70      	ldr	r3, [pc, #448]	@ (800316c <HAL_RCC_OscConfig+0x240>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a6f      	ldr	r2, [pc, #444]	@ (800316c <HAL_RCC_OscConfig+0x240>)
 8002fb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fb4:	6013      	str	r3, [r2, #0]
 8002fb6:	4b6d      	ldr	r3, [pc, #436]	@ (800316c <HAL_RCC_OscConfig+0x240>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a6c      	ldr	r2, [pc, #432]	@ (800316c <HAL_RCC_OscConfig+0x240>)
 8002fbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fc0:	6013      	str	r3, [r2, #0]
 8002fc2:	e00b      	b.n	8002fdc <HAL_RCC_OscConfig+0xb0>
 8002fc4:	4b69      	ldr	r3, [pc, #420]	@ (800316c <HAL_RCC_OscConfig+0x240>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a68      	ldr	r2, [pc, #416]	@ (800316c <HAL_RCC_OscConfig+0x240>)
 8002fca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fce:	6013      	str	r3, [r2, #0]
 8002fd0:	4b66      	ldr	r3, [pc, #408]	@ (800316c <HAL_RCC_OscConfig+0x240>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a65      	ldr	r2, [pc, #404]	@ (800316c <HAL_RCC_OscConfig+0x240>)
 8002fd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d013      	beq.n	800300c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe4:	f7fe fa84 	bl	80014f0 <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fec:	f7fe fa80 	bl	80014f0 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b64      	cmp	r3, #100	@ 0x64
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e207      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ffe:	4b5b      	ldr	r3, [pc, #364]	@ (800316c <HAL_RCC_OscConfig+0x240>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d0f0      	beq.n	8002fec <HAL_RCC_OscConfig+0xc0>
 800300a:	e014      	b.n	8003036 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300c:	f7fe fa70 	bl	80014f0 <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003012:	e008      	b.n	8003026 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003014:	f7fe fa6c 	bl	80014f0 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b64      	cmp	r3, #100	@ 0x64
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e1f3      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003026:	4b51      	ldr	r3, [pc, #324]	@ (800316c <HAL_RCC_OscConfig+0x240>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1f0      	bne.n	8003014 <HAL_RCC_OscConfig+0xe8>
 8003032:	e000      	b.n	8003036 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003034:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d063      	beq.n	800310a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003042:	4b4a      	ldr	r3, [pc, #296]	@ (800316c <HAL_RCC_OscConfig+0x240>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 030c 	and.w	r3, r3, #12
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00b      	beq.n	8003066 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800304e:	4b47      	ldr	r3, [pc, #284]	@ (800316c <HAL_RCC_OscConfig+0x240>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003056:	2b08      	cmp	r3, #8
 8003058:	d11c      	bne.n	8003094 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800305a:	4b44      	ldr	r3, [pc, #272]	@ (800316c <HAL_RCC_OscConfig+0x240>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d116      	bne.n	8003094 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003066:	4b41      	ldr	r3, [pc, #260]	@ (800316c <HAL_RCC_OscConfig+0x240>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d005      	beq.n	800307e <HAL_RCC_OscConfig+0x152>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d001      	beq.n	800307e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e1c7      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800307e:	4b3b      	ldr	r3, [pc, #236]	@ (800316c <HAL_RCC_OscConfig+0x240>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	4937      	ldr	r1, [pc, #220]	@ (800316c <HAL_RCC_OscConfig+0x240>)
 800308e:	4313      	orrs	r3, r2
 8003090:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003092:	e03a      	b.n	800310a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d020      	beq.n	80030de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800309c:	4b34      	ldr	r3, [pc, #208]	@ (8003170 <HAL_RCC_OscConfig+0x244>)
 800309e:	2201      	movs	r2, #1
 80030a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a2:	f7fe fa25 	bl	80014f0 <HAL_GetTick>
 80030a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a8:	e008      	b.n	80030bc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030aa:	f7fe fa21 	bl	80014f0 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d901      	bls.n	80030bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e1a8      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030bc:	4b2b      	ldr	r3, [pc, #172]	@ (800316c <HAL_RCC_OscConfig+0x240>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d0f0      	beq.n	80030aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c8:	4b28      	ldr	r3, [pc, #160]	@ (800316c <HAL_RCC_OscConfig+0x240>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	00db      	lsls	r3, r3, #3
 80030d6:	4925      	ldr	r1, [pc, #148]	@ (800316c <HAL_RCC_OscConfig+0x240>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	600b      	str	r3, [r1, #0]
 80030dc:	e015      	b.n	800310a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030de:	4b24      	ldr	r3, [pc, #144]	@ (8003170 <HAL_RCC_OscConfig+0x244>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e4:	f7fe fa04 	bl	80014f0 <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ea:	e008      	b.n	80030fe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030ec:	f7fe fa00 	bl	80014f0 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e187      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030fe:	4b1b      	ldr	r3, [pc, #108]	@ (800316c <HAL_RCC_OscConfig+0x240>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1f0      	bne.n	80030ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0308 	and.w	r3, r3, #8
 8003112:	2b00      	cmp	r3, #0
 8003114:	d036      	beq.n	8003184 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d016      	beq.n	800314c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800311e:	4b15      	ldr	r3, [pc, #84]	@ (8003174 <HAL_RCC_OscConfig+0x248>)
 8003120:	2201      	movs	r2, #1
 8003122:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003124:	f7fe f9e4 	bl	80014f0 <HAL_GetTick>
 8003128:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800312a:	e008      	b.n	800313e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800312c:	f7fe f9e0 	bl	80014f0 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b02      	cmp	r3, #2
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e167      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800313e:	4b0b      	ldr	r3, [pc, #44]	@ (800316c <HAL_RCC_OscConfig+0x240>)
 8003140:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d0f0      	beq.n	800312c <HAL_RCC_OscConfig+0x200>
 800314a:	e01b      	b.n	8003184 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800314c:	4b09      	ldr	r3, [pc, #36]	@ (8003174 <HAL_RCC_OscConfig+0x248>)
 800314e:	2200      	movs	r2, #0
 8003150:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003152:	f7fe f9cd 	bl	80014f0 <HAL_GetTick>
 8003156:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003158:	e00e      	b.n	8003178 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800315a:	f7fe f9c9 	bl	80014f0 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	2b02      	cmp	r3, #2
 8003166:	d907      	bls.n	8003178 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e150      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
 800316c:	40023800 	.word	0x40023800
 8003170:	42470000 	.word	0x42470000
 8003174:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003178:	4b88      	ldr	r3, [pc, #544]	@ (800339c <HAL_RCC_OscConfig+0x470>)
 800317a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1ea      	bne.n	800315a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 8097 	beq.w	80032c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003192:	2300      	movs	r3, #0
 8003194:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003196:	4b81      	ldr	r3, [pc, #516]	@ (800339c <HAL_RCC_OscConfig+0x470>)
 8003198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10f      	bne.n	80031c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031a2:	2300      	movs	r3, #0
 80031a4:	60bb      	str	r3, [r7, #8]
 80031a6:	4b7d      	ldr	r3, [pc, #500]	@ (800339c <HAL_RCC_OscConfig+0x470>)
 80031a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031aa:	4a7c      	ldr	r2, [pc, #496]	@ (800339c <HAL_RCC_OscConfig+0x470>)
 80031ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80031b2:	4b7a      	ldr	r3, [pc, #488]	@ (800339c <HAL_RCC_OscConfig+0x470>)
 80031b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031ba:	60bb      	str	r3, [r7, #8]
 80031bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031be:	2301      	movs	r3, #1
 80031c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c2:	4b77      	ldr	r3, [pc, #476]	@ (80033a0 <HAL_RCC_OscConfig+0x474>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d118      	bne.n	8003200 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ce:	4b74      	ldr	r3, [pc, #464]	@ (80033a0 <HAL_RCC_OscConfig+0x474>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a73      	ldr	r2, [pc, #460]	@ (80033a0 <HAL_RCC_OscConfig+0x474>)
 80031d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031da:	f7fe f989 	bl	80014f0 <HAL_GetTick>
 80031de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e0:	e008      	b.n	80031f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031e2:	f7fe f985 	bl	80014f0 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d901      	bls.n	80031f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e10c      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f4:	4b6a      	ldr	r3, [pc, #424]	@ (80033a0 <HAL_RCC_OscConfig+0x474>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d0f0      	beq.n	80031e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d106      	bne.n	8003216 <HAL_RCC_OscConfig+0x2ea>
 8003208:	4b64      	ldr	r3, [pc, #400]	@ (800339c <HAL_RCC_OscConfig+0x470>)
 800320a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800320c:	4a63      	ldr	r2, [pc, #396]	@ (800339c <HAL_RCC_OscConfig+0x470>)
 800320e:	f043 0301 	orr.w	r3, r3, #1
 8003212:	6713      	str	r3, [r2, #112]	@ 0x70
 8003214:	e01c      	b.n	8003250 <HAL_RCC_OscConfig+0x324>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	2b05      	cmp	r3, #5
 800321c:	d10c      	bne.n	8003238 <HAL_RCC_OscConfig+0x30c>
 800321e:	4b5f      	ldr	r3, [pc, #380]	@ (800339c <HAL_RCC_OscConfig+0x470>)
 8003220:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003222:	4a5e      	ldr	r2, [pc, #376]	@ (800339c <HAL_RCC_OscConfig+0x470>)
 8003224:	f043 0304 	orr.w	r3, r3, #4
 8003228:	6713      	str	r3, [r2, #112]	@ 0x70
 800322a:	4b5c      	ldr	r3, [pc, #368]	@ (800339c <HAL_RCC_OscConfig+0x470>)
 800322c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800322e:	4a5b      	ldr	r2, [pc, #364]	@ (800339c <HAL_RCC_OscConfig+0x470>)
 8003230:	f043 0301 	orr.w	r3, r3, #1
 8003234:	6713      	str	r3, [r2, #112]	@ 0x70
 8003236:	e00b      	b.n	8003250 <HAL_RCC_OscConfig+0x324>
 8003238:	4b58      	ldr	r3, [pc, #352]	@ (800339c <HAL_RCC_OscConfig+0x470>)
 800323a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800323c:	4a57      	ldr	r2, [pc, #348]	@ (800339c <HAL_RCC_OscConfig+0x470>)
 800323e:	f023 0301 	bic.w	r3, r3, #1
 8003242:	6713      	str	r3, [r2, #112]	@ 0x70
 8003244:	4b55      	ldr	r3, [pc, #340]	@ (800339c <HAL_RCC_OscConfig+0x470>)
 8003246:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003248:	4a54      	ldr	r2, [pc, #336]	@ (800339c <HAL_RCC_OscConfig+0x470>)
 800324a:	f023 0304 	bic.w	r3, r3, #4
 800324e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d015      	beq.n	8003284 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003258:	f7fe f94a 	bl	80014f0 <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800325e:	e00a      	b.n	8003276 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003260:	f7fe f946 	bl	80014f0 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800326e:	4293      	cmp	r3, r2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e0cb      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003276:	4b49      	ldr	r3, [pc, #292]	@ (800339c <HAL_RCC_OscConfig+0x470>)
 8003278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d0ee      	beq.n	8003260 <HAL_RCC_OscConfig+0x334>
 8003282:	e014      	b.n	80032ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003284:	f7fe f934 	bl	80014f0 <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800328a:	e00a      	b.n	80032a2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800328c:	f7fe f930 	bl	80014f0 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	f241 3288 	movw	r2, #5000	@ 0x1388
 800329a:	4293      	cmp	r3, r2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e0b5      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032a2:	4b3e      	ldr	r3, [pc, #248]	@ (800339c <HAL_RCC_OscConfig+0x470>)
 80032a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1ee      	bne.n	800328c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032ae:	7dfb      	ldrb	r3, [r7, #23]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d105      	bne.n	80032c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032b4:	4b39      	ldr	r3, [pc, #228]	@ (800339c <HAL_RCC_OscConfig+0x470>)
 80032b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b8:	4a38      	ldr	r2, [pc, #224]	@ (800339c <HAL_RCC_OscConfig+0x470>)
 80032ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032be:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 80a1 	beq.w	800340c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032ca:	4b34      	ldr	r3, [pc, #208]	@ (800339c <HAL_RCC_OscConfig+0x470>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 030c 	and.w	r3, r3, #12
 80032d2:	2b08      	cmp	r3, #8
 80032d4:	d05c      	beq.n	8003390 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d141      	bne.n	8003362 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032de:	4b31      	ldr	r3, [pc, #196]	@ (80033a4 <HAL_RCC_OscConfig+0x478>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e4:	f7fe f904 	bl	80014f0 <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ec:	f7fe f900 	bl	80014f0 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e087      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032fe:	4b27      	ldr	r3, [pc, #156]	@ (800339c <HAL_RCC_OscConfig+0x470>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1f0      	bne.n	80032ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	69da      	ldr	r2, [r3, #28]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	431a      	orrs	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003318:	019b      	lsls	r3, r3, #6
 800331a:	431a      	orrs	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003320:	085b      	lsrs	r3, r3, #1
 8003322:	3b01      	subs	r3, #1
 8003324:	041b      	lsls	r3, r3, #16
 8003326:	431a      	orrs	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800332c:	061b      	lsls	r3, r3, #24
 800332e:	491b      	ldr	r1, [pc, #108]	@ (800339c <HAL_RCC_OscConfig+0x470>)
 8003330:	4313      	orrs	r3, r2
 8003332:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003334:	4b1b      	ldr	r3, [pc, #108]	@ (80033a4 <HAL_RCC_OscConfig+0x478>)
 8003336:	2201      	movs	r2, #1
 8003338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800333a:	f7fe f8d9 	bl	80014f0 <HAL_GetTick>
 800333e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003340:	e008      	b.n	8003354 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003342:	f7fe f8d5 	bl	80014f0 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d901      	bls.n	8003354 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e05c      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003354:	4b11      	ldr	r3, [pc, #68]	@ (800339c <HAL_RCC_OscConfig+0x470>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d0f0      	beq.n	8003342 <HAL_RCC_OscConfig+0x416>
 8003360:	e054      	b.n	800340c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003362:	4b10      	ldr	r3, [pc, #64]	@ (80033a4 <HAL_RCC_OscConfig+0x478>)
 8003364:	2200      	movs	r2, #0
 8003366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003368:	f7fe f8c2 	bl	80014f0 <HAL_GetTick>
 800336c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800336e:	e008      	b.n	8003382 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003370:	f7fe f8be 	bl	80014f0 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b02      	cmp	r3, #2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e045      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003382:	4b06      	ldr	r3, [pc, #24]	@ (800339c <HAL_RCC_OscConfig+0x470>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1f0      	bne.n	8003370 <HAL_RCC_OscConfig+0x444>
 800338e:	e03d      	b.n	800340c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d107      	bne.n	80033a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e038      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
 800339c:	40023800 	.word	0x40023800
 80033a0:	40007000 	.word	0x40007000
 80033a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003418 <HAL_RCC_OscConfig+0x4ec>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d028      	beq.n	8003408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d121      	bne.n	8003408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d11a      	bne.n	8003408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80033d8:	4013      	ands	r3, r2
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80033de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d111      	bne.n	8003408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ee:	085b      	lsrs	r3, r3, #1
 80033f0:	3b01      	subs	r3, #1
 80033f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d107      	bne.n	8003408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003402:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003404:	429a      	cmp	r2, r3
 8003406:	d001      	beq.n	800340c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e000      	b.n	800340e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	40023800 	.word	0x40023800

0800341c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d101      	bne.n	8003430 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e0cc      	b.n	80035ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003430:	4b68      	ldr	r3, [pc, #416]	@ (80035d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0307 	and.w	r3, r3, #7
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	429a      	cmp	r2, r3
 800343c:	d90c      	bls.n	8003458 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800343e:	4b65      	ldr	r3, [pc, #404]	@ (80035d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	b2d2      	uxtb	r2, r2
 8003444:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003446:	4b63      	ldr	r3, [pc, #396]	@ (80035d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0307 	and.w	r3, r3, #7
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	429a      	cmp	r2, r3
 8003452:	d001      	beq.n	8003458 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e0b8      	b.n	80035ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	2b00      	cmp	r3, #0
 8003462:	d020      	beq.n	80034a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0304 	and.w	r3, r3, #4
 800346c:	2b00      	cmp	r3, #0
 800346e:	d005      	beq.n	800347c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003470:	4b59      	ldr	r3, [pc, #356]	@ (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	4a58      	ldr	r2, [pc, #352]	@ (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003476:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800347a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0308 	and.w	r3, r3, #8
 8003484:	2b00      	cmp	r3, #0
 8003486:	d005      	beq.n	8003494 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003488:	4b53      	ldr	r3, [pc, #332]	@ (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	4a52      	ldr	r2, [pc, #328]	@ (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 800348e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003492:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003494:	4b50      	ldr	r3, [pc, #320]	@ (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	494d      	ldr	r1, [pc, #308]	@ (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d044      	beq.n	800353c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d107      	bne.n	80034ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ba:	4b47      	ldr	r3, [pc, #284]	@ (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d119      	bne.n	80034fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e07f      	b.n	80035ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d003      	beq.n	80034da <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034d6:	2b03      	cmp	r3, #3
 80034d8:	d107      	bne.n	80034ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034da:	4b3f      	ldr	r3, [pc, #252]	@ (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d109      	bne.n	80034fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e06f      	b.n	80035ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ea:	4b3b      	ldr	r3, [pc, #236]	@ (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e067      	b.n	80035ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034fa:	4b37      	ldr	r3, [pc, #220]	@ (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f023 0203 	bic.w	r2, r3, #3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	4934      	ldr	r1, [pc, #208]	@ (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003508:	4313      	orrs	r3, r2
 800350a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800350c:	f7fd fff0 	bl	80014f0 <HAL_GetTick>
 8003510:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003512:	e00a      	b.n	800352a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003514:	f7fd ffec 	bl	80014f0 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003522:	4293      	cmp	r3, r2
 8003524:	d901      	bls.n	800352a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e04f      	b.n	80035ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800352a:	4b2b      	ldr	r3, [pc, #172]	@ (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 020c 	and.w	r2, r3, #12
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	429a      	cmp	r2, r3
 800353a:	d1eb      	bne.n	8003514 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800353c:	4b25      	ldr	r3, [pc, #148]	@ (80035d4 <HAL_RCC_ClockConfig+0x1b8>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0307 	and.w	r3, r3, #7
 8003544:	683a      	ldr	r2, [r7, #0]
 8003546:	429a      	cmp	r2, r3
 8003548:	d20c      	bcs.n	8003564 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800354a:	4b22      	ldr	r3, [pc, #136]	@ (80035d4 <HAL_RCC_ClockConfig+0x1b8>)
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	b2d2      	uxtb	r2, r2
 8003550:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003552:	4b20      	ldr	r3, [pc, #128]	@ (80035d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0307 	and.w	r3, r3, #7
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	429a      	cmp	r2, r3
 800355e:	d001      	beq.n	8003564 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e032      	b.n	80035ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b00      	cmp	r3, #0
 800356e:	d008      	beq.n	8003582 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003570:	4b19      	ldr	r3, [pc, #100]	@ (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	4916      	ldr	r1, [pc, #88]	@ (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 800357e:	4313      	orrs	r3, r2
 8003580:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0308 	and.w	r3, r3, #8
 800358a:	2b00      	cmp	r3, #0
 800358c:	d009      	beq.n	80035a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800358e:	4b12      	ldr	r3, [pc, #72]	@ (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	490e      	ldr	r1, [pc, #56]	@ (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035a2:	f000 f821 	bl	80035e8 <HAL_RCC_GetSysClockFreq>
 80035a6:	4602      	mov	r2, r0
 80035a8:	4b0b      	ldr	r3, [pc, #44]	@ (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	091b      	lsrs	r3, r3, #4
 80035ae:	f003 030f 	and.w	r3, r3, #15
 80035b2:	490a      	ldr	r1, [pc, #40]	@ (80035dc <HAL_RCC_ClockConfig+0x1c0>)
 80035b4:	5ccb      	ldrb	r3, [r1, r3]
 80035b6:	fa22 f303 	lsr.w	r3, r2, r3
 80035ba:	4a09      	ldr	r2, [pc, #36]	@ (80035e0 <HAL_RCC_ClockConfig+0x1c4>)
 80035bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80035be:	4b09      	ldr	r3, [pc, #36]	@ (80035e4 <HAL_RCC_ClockConfig+0x1c8>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7fd ff50 	bl	8001468 <HAL_InitTick>

  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	40023c00 	.word	0x40023c00
 80035d8:	40023800 	.word	0x40023800
 80035dc:	08003864 	.word	0x08003864
 80035e0:	20000010 	.word	0x20000010
 80035e4:	20000014 	.word	0x20000014

080035e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035ec:	b094      	sub	sp, #80	@ 0x50
 80035ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80035f0:	2300      	movs	r3, #0
 80035f2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80035f4:	2300      	movs	r3, #0
 80035f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80035f8:	2300      	movs	r3, #0
 80035fa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80035fc:	2300      	movs	r3, #0
 80035fe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003600:	4b79      	ldr	r3, [pc, #484]	@ (80037e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f003 030c 	and.w	r3, r3, #12
 8003608:	2b08      	cmp	r3, #8
 800360a:	d00d      	beq.n	8003628 <HAL_RCC_GetSysClockFreq+0x40>
 800360c:	2b08      	cmp	r3, #8
 800360e:	f200 80e1 	bhi.w	80037d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003612:	2b00      	cmp	r3, #0
 8003614:	d002      	beq.n	800361c <HAL_RCC_GetSysClockFreq+0x34>
 8003616:	2b04      	cmp	r3, #4
 8003618:	d003      	beq.n	8003622 <HAL_RCC_GetSysClockFreq+0x3a>
 800361a:	e0db      	b.n	80037d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800361c:	4b73      	ldr	r3, [pc, #460]	@ (80037ec <HAL_RCC_GetSysClockFreq+0x204>)
 800361e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003620:	e0db      	b.n	80037da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003622:	4b73      	ldr	r3, [pc, #460]	@ (80037f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003624:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003626:	e0d8      	b.n	80037da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003628:	4b6f      	ldr	r3, [pc, #444]	@ (80037e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003630:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003632:	4b6d      	ldr	r3, [pc, #436]	@ (80037e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d063      	beq.n	8003706 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800363e:	4b6a      	ldr	r3, [pc, #424]	@ (80037e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	099b      	lsrs	r3, r3, #6
 8003644:	2200      	movs	r2, #0
 8003646:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003648:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800364a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800364c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003650:	633b      	str	r3, [r7, #48]	@ 0x30
 8003652:	2300      	movs	r3, #0
 8003654:	637b      	str	r3, [r7, #52]	@ 0x34
 8003656:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800365a:	4622      	mov	r2, r4
 800365c:	462b      	mov	r3, r5
 800365e:	f04f 0000 	mov.w	r0, #0
 8003662:	f04f 0100 	mov.w	r1, #0
 8003666:	0159      	lsls	r1, r3, #5
 8003668:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800366c:	0150      	lsls	r0, r2, #5
 800366e:	4602      	mov	r2, r0
 8003670:	460b      	mov	r3, r1
 8003672:	4621      	mov	r1, r4
 8003674:	1a51      	subs	r1, r2, r1
 8003676:	6139      	str	r1, [r7, #16]
 8003678:	4629      	mov	r1, r5
 800367a:	eb63 0301 	sbc.w	r3, r3, r1
 800367e:	617b      	str	r3, [r7, #20]
 8003680:	f04f 0200 	mov.w	r2, #0
 8003684:	f04f 0300 	mov.w	r3, #0
 8003688:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800368c:	4659      	mov	r1, fp
 800368e:	018b      	lsls	r3, r1, #6
 8003690:	4651      	mov	r1, sl
 8003692:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003696:	4651      	mov	r1, sl
 8003698:	018a      	lsls	r2, r1, #6
 800369a:	4651      	mov	r1, sl
 800369c:	ebb2 0801 	subs.w	r8, r2, r1
 80036a0:	4659      	mov	r1, fp
 80036a2:	eb63 0901 	sbc.w	r9, r3, r1
 80036a6:	f04f 0200 	mov.w	r2, #0
 80036aa:	f04f 0300 	mov.w	r3, #0
 80036ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036ba:	4690      	mov	r8, r2
 80036bc:	4699      	mov	r9, r3
 80036be:	4623      	mov	r3, r4
 80036c0:	eb18 0303 	adds.w	r3, r8, r3
 80036c4:	60bb      	str	r3, [r7, #8]
 80036c6:	462b      	mov	r3, r5
 80036c8:	eb49 0303 	adc.w	r3, r9, r3
 80036cc:	60fb      	str	r3, [r7, #12]
 80036ce:	f04f 0200 	mov.w	r2, #0
 80036d2:	f04f 0300 	mov.w	r3, #0
 80036d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80036da:	4629      	mov	r1, r5
 80036dc:	024b      	lsls	r3, r1, #9
 80036de:	4621      	mov	r1, r4
 80036e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80036e4:	4621      	mov	r1, r4
 80036e6:	024a      	lsls	r2, r1, #9
 80036e8:	4610      	mov	r0, r2
 80036ea:	4619      	mov	r1, r3
 80036ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036ee:	2200      	movs	r2, #0
 80036f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80036f8:	f7fc fd66 	bl	80001c8 <__aeabi_uldivmod>
 80036fc:	4602      	mov	r2, r0
 80036fe:	460b      	mov	r3, r1
 8003700:	4613      	mov	r3, r2
 8003702:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003704:	e058      	b.n	80037b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003706:	4b38      	ldr	r3, [pc, #224]	@ (80037e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	099b      	lsrs	r3, r3, #6
 800370c:	2200      	movs	r2, #0
 800370e:	4618      	mov	r0, r3
 8003710:	4611      	mov	r1, r2
 8003712:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003716:	623b      	str	r3, [r7, #32]
 8003718:	2300      	movs	r3, #0
 800371a:	627b      	str	r3, [r7, #36]	@ 0x24
 800371c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003720:	4642      	mov	r2, r8
 8003722:	464b      	mov	r3, r9
 8003724:	f04f 0000 	mov.w	r0, #0
 8003728:	f04f 0100 	mov.w	r1, #0
 800372c:	0159      	lsls	r1, r3, #5
 800372e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003732:	0150      	lsls	r0, r2, #5
 8003734:	4602      	mov	r2, r0
 8003736:	460b      	mov	r3, r1
 8003738:	4641      	mov	r1, r8
 800373a:	ebb2 0a01 	subs.w	sl, r2, r1
 800373e:	4649      	mov	r1, r9
 8003740:	eb63 0b01 	sbc.w	fp, r3, r1
 8003744:	f04f 0200 	mov.w	r2, #0
 8003748:	f04f 0300 	mov.w	r3, #0
 800374c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003750:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003754:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003758:	ebb2 040a 	subs.w	r4, r2, sl
 800375c:	eb63 050b 	sbc.w	r5, r3, fp
 8003760:	f04f 0200 	mov.w	r2, #0
 8003764:	f04f 0300 	mov.w	r3, #0
 8003768:	00eb      	lsls	r3, r5, #3
 800376a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800376e:	00e2      	lsls	r2, r4, #3
 8003770:	4614      	mov	r4, r2
 8003772:	461d      	mov	r5, r3
 8003774:	4643      	mov	r3, r8
 8003776:	18e3      	adds	r3, r4, r3
 8003778:	603b      	str	r3, [r7, #0]
 800377a:	464b      	mov	r3, r9
 800377c:	eb45 0303 	adc.w	r3, r5, r3
 8003780:	607b      	str	r3, [r7, #4]
 8003782:	f04f 0200 	mov.w	r2, #0
 8003786:	f04f 0300 	mov.w	r3, #0
 800378a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800378e:	4629      	mov	r1, r5
 8003790:	028b      	lsls	r3, r1, #10
 8003792:	4621      	mov	r1, r4
 8003794:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003798:	4621      	mov	r1, r4
 800379a:	028a      	lsls	r2, r1, #10
 800379c:	4610      	mov	r0, r2
 800379e:	4619      	mov	r1, r3
 80037a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037a2:	2200      	movs	r2, #0
 80037a4:	61bb      	str	r3, [r7, #24]
 80037a6:	61fa      	str	r2, [r7, #28]
 80037a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037ac:	f7fc fd0c 	bl	80001c8 <__aeabi_uldivmod>
 80037b0:	4602      	mov	r2, r0
 80037b2:	460b      	mov	r3, r1
 80037b4:	4613      	mov	r3, r2
 80037b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80037b8:	4b0b      	ldr	r3, [pc, #44]	@ (80037e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	0c1b      	lsrs	r3, r3, #16
 80037be:	f003 0303 	and.w	r3, r3, #3
 80037c2:	3301      	adds	r3, #1
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80037c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80037ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80037d2:	e002      	b.n	80037da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037d4:	4b05      	ldr	r3, [pc, #20]	@ (80037ec <HAL_RCC_GetSysClockFreq+0x204>)
 80037d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80037d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3750      	adds	r7, #80	@ 0x50
 80037e0:	46bd      	mov	sp, r7
 80037e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037e6:	bf00      	nop
 80037e8:	40023800 	.word	0x40023800
 80037ec:	00f42400 	.word	0x00f42400
 80037f0:	007a1200 	.word	0x007a1200

080037f4 <memset>:
 80037f4:	4402      	add	r2, r0
 80037f6:	4603      	mov	r3, r0
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d100      	bne.n	80037fe <memset+0xa>
 80037fc:	4770      	bx	lr
 80037fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003802:	e7f9      	b.n	80037f8 <memset+0x4>

08003804 <__libc_init_array>:
 8003804:	b570      	push	{r4, r5, r6, lr}
 8003806:	4d0d      	ldr	r5, [pc, #52]	@ (800383c <__libc_init_array+0x38>)
 8003808:	4c0d      	ldr	r4, [pc, #52]	@ (8003840 <__libc_init_array+0x3c>)
 800380a:	1b64      	subs	r4, r4, r5
 800380c:	10a4      	asrs	r4, r4, #2
 800380e:	2600      	movs	r6, #0
 8003810:	42a6      	cmp	r6, r4
 8003812:	d109      	bne.n	8003828 <__libc_init_array+0x24>
 8003814:	4d0b      	ldr	r5, [pc, #44]	@ (8003844 <__libc_init_array+0x40>)
 8003816:	4c0c      	ldr	r4, [pc, #48]	@ (8003848 <__libc_init_array+0x44>)
 8003818:	f000 f818 	bl	800384c <_init>
 800381c:	1b64      	subs	r4, r4, r5
 800381e:	10a4      	asrs	r4, r4, #2
 8003820:	2600      	movs	r6, #0
 8003822:	42a6      	cmp	r6, r4
 8003824:	d105      	bne.n	8003832 <__libc_init_array+0x2e>
 8003826:	bd70      	pop	{r4, r5, r6, pc}
 8003828:	f855 3b04 	ldr.w	r3, [r5], #4
 800382c:	4798      	blx	r3
 800382e:	3601      	adds	r6, #1
 8003830:	e7ee      	b.n	8003810 <__libc_init_array+0xc>
 8003832:	f855 3b04 	ldr.w	r3, [r5], #4
 8003836:	4798      	blx	r3
 8003838:	3601      	adds	r6, #1
 800383a:	e7f2      	b.n	8003822 <__libc_init_array+0x1e>
 800383c:	0800387c 	.word	0x0800387c
 8003840:	0800387c 	.word	0x0800387c
 8003844:	0800387c 	.word	0x0800387c
 8003848:	08003880 	.word	0x08003880

0800384c <_init>:
 800384c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800384e:	bf00      	nop
 8003850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003852:	bc08      	pop	{r3}
 8003854:	469e      	mov	lr, r3
 8003856:	4770      	bx	lr

08003858 <_fini>:
 8003858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800385a:	bf00      	nop
 800385c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800385e:	bc08      	pop	{r3}
 8003860:	469e      	mov	lr, r3
 8003862:	4770      	bx	lr
