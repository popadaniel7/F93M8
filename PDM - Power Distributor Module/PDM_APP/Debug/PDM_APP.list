
PDM_APP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .ncrsection   00000090  20004c00  20004c00  0000dc00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .isr_vector   0000010c  08003c00  08003c00  00000c00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000b7f8  08003d10  08003d10  00000d10  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000138  0800f508  0800f508  0000c508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800f640  0800f640  0000dc90  2**0
                  CONTENTS
  5 .ARM          00000000  0800f640  0800f640  0000dc90  2**0
                  CONTENTS
  6 .preinit_array 00000000  0800f640  0800f640  0000dc90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800f640  0800f640  0000c640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  0800f644  0800f644  0000c644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000080  20000000  0800f648  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000040d8  20000080  0800f6c8  0000d080  2**3
                  ALLOC
 11 ._user_heap_stack 00000800  20004158  0800f6c8  0000d158  2**0
                  ALLOC
 12 .ARM.attributes 00000029  00000000  00000000  0000dc90  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002061e  00000000  00000000  0000dcb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005baa  00000000  00000000  0002e2d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b40  00000000  00000000  00033e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014b6  00000000  00000000  000359c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d09d  00000000  00000000  00036e7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025f63  00000000  00000000  00053f1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009f681  00000000  00000000  00079e7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001194ff  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007174  00000000  00000000  00119544  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  001206b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08003d10 <__do_global_dtors_aux>:
 8003d10:	b510      	push	{r4, lr}
 8003d12:	4c05      	ldr	r4, [pc, #20]	@ (8003d28 <__do_global_dtors_aux+0x18>)
 8003d14:	7823      	ldrb	r3, [r4, #0]
 8003d16:	b933      	cbnz	r3, 8003d26 <__do_global_dtors_aux+0x16>
 8003d18:	4b04      	ldr	r3, [pc, #16]	@ (8003d2c <__do_global_dtors_aux+0x1c>)
 8003d1a:	b113      	cbz	r3, 8003d22 <__do_global_dtors_aux+0x12>
 8003d1c:	4804      	ldr	r0, [pc, #16]	@ (8003d30 <__do_global_dtors_aux+0x20>)
 8003d1e:	f3af 8000 	nop.w
 8003d22:	2301      	movs	r3, #1
 8003d24:	7023      	strb	r3, [r4, #0]
 8003d26:	bd10      	pop	{r4, pc}
 8003d28:	20000080 	.word	0x20000080
 8003d2c:	00000000 	.word	0x00000000
 8003d30:	0800f4f0 	.word	0x0800f4f0

08003d34 <frame_dummy>:
 8003d34:	b508      	push	{r3, lr}
 8003d36:	4b03      	ldr	r3, [pc, #12]	@ (8003d44 <frame_dummy+0x10>)
 8003d38:	b11b      	cbz	r3, 8003d42 <frame_dummy+0xe>
 8003d3a:	4903      	ldr	r1, [pc, #12]	@ (8003d48 <frame_dummy+0x14>)
 8003d3c:	4803      	ldr	r0, [pc, #12]	@ (8003d4c <frame_dummy+0x18>)
 8003d3e:	f3af 8000 	nop.w
 8003d42:	bd08      	pop	{r3, pc}
 8003d44:	00000000 	.word	0x00000000
 8003d48:	20000084 	.word	0x20000084
 8003d4c:	0800f4f0 	.word	0x0800f4f0

08003d50 <__aeabi_drsub>:
 8003d50:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8003d54:	e002      	b.n	8003d5c <__adddf3>
 8003d56:	bf00      	nop

08003d58 <__aeabi_dsub>:
 8003d58:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08003d5c <__adddf3>:
 8003d5c:	b530      	push	{r4, r5, lr}
 8003d5e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8003d62:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8003d66:	ea94 0f05 	teq	r4, r5
 8003d6a:	bf08      	it	eq
 8003d6c:	ea90 0f02 	teqeq	r0, r2
 8003d70:	bf1f      	itttt	ne
 8003d72:	ea54 0c00 	orrsne.w	ip, r4, r0
 8003d76:	ea55 0c02 	orrsne.w	ip, r5, r2
 8003d7a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8003d7e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8003d82:	f000 80e2 	beq.w	8003f4a <__adddf3+0x1ee>
 8003d86:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8003d8a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8003d8e:	bfb8      	it	lt
 8003d90:	426d      	neglt	r5, r5
 8003d92:	dd0c      	ble.n	8003dae <__adddf3+0x52>
 8003d94:	442c      	add	r4, r5
 8003d96:	ea80 0202 	eor.w	r2, r0, r2
 8003d9a:	ea81 0303 	eor.w	r3, r1, r3
 8003d9e:	ea82 0000 	eor.w	r0, r2, r0
 8003da2:	ea83 0101 	eor.w	r1, r3, r1
 8003da6:	ea80 0202 	eor.w	r2, r0, r2
 8003daa:	ea81 0303 	eor.w	r3, r1, r3
 8003dae:	2d36      	cmp	r5, #54	@ 0x36
 8003db0:	bf88      	it	hi
 8003db2:	bd30      	pophi	{r4, r5, pc}
 8003db4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8003db8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8003dbc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8003dc0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8003dc4:	d002      	beq.n	8003dcc <__adddf3+0x70>
 8003dc6:	4240      	negs	r0, r0
 8003dc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003dcc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8003dd0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8003dd4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8003dd8:	d002      	beq.n	8003de0 <__adddf3+0x84>
 8003dda:	4252      	negs	r2, r2
 8003ddc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8003de0:	ea94 0f05 	teq	r4, r5
 8003de4:	f000 80a7 	beq.w	8003f36 <__adddf3+0x1da>
 8003de8:	f1a4 0401 	sub.w	r4, r4, #1
 8003dec:	f1d5 0e20 	rsbs	lr, r5, #32
 8003df0:	db0d      	blt.n	8003e0e <__adddf3+0xb2>
 8003df2:	fa02 fc0e 	lsl.w	ip, r2, lr
 8003df6:	fa22 f205 	lsr.w	r2, r2, r5
 8003dfa:	1880      	adds	r0, r0, r2
 8003dfc:	f141 0100 	adc.w	r1, r1, #0
 8003e00:	fa03 f20e 	lsl.w	r2, r3, lr
 8003e04:	1880      	adds	r0, r0, r2
 8003e06:	fa43 f305 	asr.w	r3, r3, r5
 8003e0a:	4159      	adcs	r1, r3
 8003e0c:	e00e      	b.n	8003e2c <__adddf3+0xd0>
 8003e0e:	f1a5 0520 	sub.w	r5, r5, #32
 8003e12:	f10e 0e20 	add.w	lr, lr, #32
 8003e16:	2a01      	cmp	r2, #1
 8003e18:	fa03 fc0e 	lsl.w	ip, r3, lr
 8003e1c:	bf28      	it	cs
 8003e1e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8003e22:	fa43 f305 	asr.w	r3, r3, r5
 8003e26:	18c0      	adds	r0, r0, r3
 8003e28:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8003e2c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8003e30:	d507      	bpl.n	8003e42 <__adddf3+0xe6>
 8003e32:	f04f 0e00 	mov.w	lr, #0
 8003e36:	f1dc 0c00 	rsbs	ip, ip, #0
 8003e3a:	eb7e 0000 	sbcs.w	r0, lr, r0
 8003e3e:	eb6e 0101 	sbc.w	r1, lr, r1
 8003e42:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8003e46:	d31b      	bcc.n	8003e80 <__adddf3+0x124>
 8003e48:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8003e4c:	d30c      	bcc.n	8003e68 <__adddf3+0x10c>
 8003e4e:	0849      	lsrs	r1, r1, #1
 8003e50:	ea5f 0030 	movs.w	r0, r0, rrx
 8003e54:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8003e58:	f104 0401 	add.w	r4, r4, #1
 8003e5c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8003e60:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8003e64:	f080 809a 	bcs.w	8003f9c <__adddf3+0x240>
 8003e68:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8003e6c:	bf08      	it	eq
 8003e6e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8003e72:	f150 0000 	adcs.w	r0, r0, #0
 8003e76:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8003e7a:	ea41 0105 	orr.w	r1, r1, r5
 8003e7e:	bd30      	pop	{r4, r5, pc}
 8003e80:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8003e84:	4140      	adcs	r0, r0
 8003e86:	eb41 0101 	adc.w	r1, r1, r1
 8003e8a:	3c01      	subs	r4, #1
 8003e8c:	bf28      	it	cs
 8003e8e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8003e92:	d2e9      	bcs.n	8003e68 <__adddf3+0x10c>
 8003e94:	f091 0f00 	teq	r1, #0
 8003e98:	bf04      	itt	eq
 8003e9a:	4601      	moveq	r1, r0
 8003e9c:	2000      	moveq	r0, #0
 8003e9e:	fab1 f381 	clz	r3, r1
 8003ea2:	bf08      	it	eq
 8003ea4:	3320      	addeq	r3, #32
 8003ea6:	f1a3 030b 	sub.w	r3, r3, #11
 8003eaa:	f1b3 0220 	subs.w	r2, r3, #32
 8003eae:	da0c      	bge.n	8003eca <__adddf3+0x16e>
 8003eb0:	320c      	adds	r2, #12
 8003eb2:	dd08      	ble.n	8003ec6 <__adddf3+0x16a>
 8003eb4:	f102 0c14 	add.w	ip, r2, #20
 8003eb8:	f1c2 020c 	rsb	r2, r2, #12
 8003ebc:	fa01 f00c 	lsl.w	r0, r1, ip
 8003ec0:	fa21 f102 	lsr.w	r1, r1, r2
 8003ec4:	e00c      	b.n	8003ee0 <__adddf3+0x184>
 8003ec6:	f102 0214 	add.w	r2, r2, #20
 8003eca:	bfd8      	it	le
 8003ecc:	f1c2 0c20 	rsble	ip, r2, #32
 8003ed0:	fa01 f102 	lsl.w	r1, r1, r2
 8003ed4:	fa20 fc0c 	lsr.w	ip, r0, ip
 8003ed8:	bfdc      	itt	le
 8003eda:	ea41 010c 	orrle.w	r1, r1, ip
 8003ede:	4090      	lslle	r0, r2
 8003ee0:	1ae4      	subs	r4, r4, r3
 8003ee2:	bfa2      	ittt	ge
 8003ee4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8003ee8:	4329      	orrge	r1, r5
 8003eea:	bd30      	popge	{r4, r5, pc}
 8003eec:	ea6f 0404 	mvn.w	r4, r4
 8003ef0:	3c1f      	subs	r4, #31
 8003ef2:	da1c      	bge.n	8003f2e <__adddf3+0x1d2>
 8003ef4:	340c      	adds	r4, #12
 8003ef6:	dc0e      	bgt.n	8003f16 <__adddf3+0x1ba>
 8003ef8:	f104 0414 	add.w	r4, r4, #20
 8003efc:	f1c4 0220 	rsb	r2, r4, #32
 8003f00:	fa20 f004 	lsr.w	r0, r0, r4
 8003f04:	fa01 f302 	lsl.w	r3, r1, r2
 8003f08:	ea40 0003 	orr.w	r0, r0, r3
 8003f0c:	fa21 f304 	lsr.w	r3, r1, r4
 8003f10:	ea45 0103 	orr.w	r1, r5, r3
 8003f14:	bd30      	pop	{r4, r5, pc}
 8003f16:	f1c4 040c 	rsb	r4, r4, #12
 8003f1a:	f1c4 0220 	rsb	r2, r4, #32
 8003f1e:	fa20 f002 	lsr.w	r0, r0, r2
 8003f22:	fa01 f304 	lsl.w	r3, r1, r4
 8003f26:	ea40 0003 	orr.w	r0, r0, r3
 8003f2a:	4629      	mov	r1, r5
 8003f2c:	bd30      	pop	{r4, r5, pc}
 8003f2e:	fa21 f004 	lsr.w	r0, r1, r4
 8003f32:	4629      	mov	r1, r5
 8003f34:	bd30      	pop	{r4, r5, pc}
 8003f36:	f094 0f00 	teq	r4, #0
 8003f3a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8003f3e:	bf06      	itte	eq
 8003f40:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8003f44:	3401      	addeq	r4, #1
 8003f46:	3d01      	subne	r5, #1
 8003f48:	e74e      	b.n	8003de8 <__adddf3+0x8c>
 8003f4a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8003f4e:	bf18      	it	ne
 8003f50:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8003f54:	d029      	beq.n	8003faa <__adddf3+0x24e>
 8003f56:	ea94 0f05 	teq	r4, r5
 8003f5a:	bf08      	it	eq
 8003f5c:	ea90 0f02 	teqeq	r0, r2
 8003f60:	d005      	beq.n	8003f6e <__adddf3+0x212>
 8003f62:	ea54 0c00 	orrs.w	ip, r4, r0
 8003f66:	bf04      	itt	eq
 8003f68:	4619      	moveq	r1, r3
 8003f6a:	4610      	moveq	r0, r2
 8003f6c:	bd30      	pop	{r4, r5, pc}
 8003f6e:	ea91 0f03 	teq	r1, r3
 8003f72:	bf1e      	ittt	ne
 8003f74:	2100      	movne	r1, #0
 8003f76:	2000      	movne	r0, #0
 8003f78:	bd30      	popne	{r4, r5, pc}
 8003f7a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8003f7e:	d105      	bne.n	8003f8c <__adddf3+0x230>
 8003f80:	0040      	lsls	r0, r0, #1
 8003f82:	4149      	adcs	r1, r1
 8003f84:	bf28      	it	cs
 8003f86:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8003f8a:	bd30      	pop	{r4, r5, pc}
 8003f8c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8003f90:	bf3c      	itt	cc
 8003f92:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8003f96:	bd30      	popcc	{r4, r5, pc}
 8003f98:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8003f9c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8003fa0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8003fa4:	f04f 0000 	mov.w	r0, #0
 8003fa8:	bd30      	pop	{r4, r5, pc}
 8003faa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8003fae:	bf1a      	itte	ne
 8003fb0:	4619      	movne	r1, r3
 8003fb2:	4610      	movne	r0, r2
 8003fb4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8003fb8:	bf1c      	itt	ne
 8003fba:	460b      	movne	r3, r1
 8003fbc:	4602      	movne	r2, r0
 8003fbe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8003fc2:	bf06      	itte	eq
 8003fc4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8003fc8:	ea91 0f03 	teqeq	r1, r3
 8003fcc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8003fd0:	bd30      	pop	{r4, r5, pc}
 8003fd2:	bf00      	nop

08003fd4 <__aeabi_ui2d>:
 8003fd4:	f090 0f00 	teq	r0, #0
 8003fd8:	bf04      	itt	eq
 8003fda:	2100      	moveq	r1, #0
 8003fdc:	4770      	bxeq	lr
 8003fde:	b530      	push	{r4, r5, lr}
 8003fe0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8003fe4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8003fe8:	f04f 0500 	mov.w	r5, #0
 8003fec:	f04f 0100 	mov.w	r1, #0
 8003ff0:	e750      	b.n	8003e94 <__adddf3+0x138>
 8003ff2:	bf00      	nop

08003ff4 <__aeabi_i2d>:
 8003ff4:	f090 0f00 	teq	r0, #0
 8003ff8:	bf04      	itt	eq
 8003ffa:	2100      	moveq	r1, #0
 8003ffc:	4770      	bxeq	lr
 8003ffe:	b530      	push	{r4, r5, lr}
 8004000:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8004004:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8004008:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800400c:	bf48      	it	mi
 800400e:	4240      	negmi	r0, r0
 8004010:	f04f 0100 	mov.w	r1, #0
 8004014:	e73e      	b.n	8003e94 <__adddf3+0x138>
 8004016:	bf00      	nop

08004018 <__aeabi_f2d>:
 8004018:	0042      	lsls	r2, r0, #1
 800401a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800401e:	ea4f 0131 	mov.w	r1, r1, rrx
 8004022:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8004026:	bf1f      	itttt	ne
 8004028:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800402c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8004030:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8004034:	4770      	bxne	lr
 8004036:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800403a:	bf08      	it	eq
 800403c:	4770      	bxeq	lr
 800403e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8004042:	bf04      	itt	eq
 8004044:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8004048:	4770      	bxeq	lr
 800404a:	b530      	push	{r4, r5, lr}
 800404c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8004050:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8004054:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8004058:	e71c      	b.n	8003e94 <__adddf3+0x138>
 800405a:	bf00      	nop

0800405c <__aeabi_ul2d>:
 800405c:	ea50 0201 	orrs.w	r2, r0, r1
 8004060:	bf08      	it	eq
 8004062:	4770      	bxeq	lr
 8004064:	b530      	push	{r4, r5, lr}
 8004066:	f04f 0500 	mov.w	r5, #0
 800406a:	e00a      	b.n	8004082 <__aeabi_l2d+0x16>

0800406c <__aeabi_l2d>:
 800406c:	ea50 0201 	orrs.w	r2, r0, r1
 8004070:	bf08      	it	eq
 8004072:	4770      	bxeq	lr
 8004074:	b530      	push	{r4, r5, lr}
 8004076:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800407a:	d502      	bpl.n	8004082 <__aeabi_l2d+0x16>
 800407c:	4240      	negs	r0, r0
 800407e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8004082:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8004086:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800408a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800408e:	f43f aed8 	beq.w	8003e42 <__adddf3+0xe6>
 8004092:	f04f 0203 	mov.w	r2, #3
 8004096:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800409a:	bf18      	it	ne
 800409c:	3203      	addne	r2, #3
 800409e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80040a2:	bf18      	it	ne
 80040a4:	3203      	addne	r2, #3
 80040a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80040aa:	f1c2 0320 	rsb	r3, r2, #32
 80040ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80040b2:	fa20 f002 	lsr.w	r0, r0, r2
 80040b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80040ba:	ea40 000e 	orr.w	r0, r0, lr
 80040be:	fa21 f102 	lsr.w	r1, r1, r2
 80040c2:	4414      	add	r4, r2
 80040c4:	e6bd      	b.n	8003e42 <__adddf3+0xe6>
 80040c6:	bf00      	nop

080040c8 <__aeabi_dmul>:
 80040c8:	b570      	push	{r4, r5, r6, lr}
 80040ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80040ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80040d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80040d6:	bf1d      	ittte	ne
 80040d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80040dc:	ea94 0f0c 	teqne	r4, ip
 80040e0:	ea95 0f0c 	teqne	r5, ip
 80040e4:	f000 f8de 	bleq	80042a4 <__aeabi_dmul+0x1dc>
 80040e8:	442c      	add	r4, r5
 80040ea:	ea81 0603 	eor.w	r6, r1, r3
 80040ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80040f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80040f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80040fa:	bf18      	it	ne
 80040fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8004100:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8004104:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004108:	d038      	beq.n	800417c <__aeabi_dmul+0xb4>
 800410a:	fba0 ce02 	umull	ip, lr, r0, r2
 800410e:	f04f 0500 	mov.w	r5, #0
 8004112:	fbe1 e502 	umlal	lr, r5, r1, r2
 8004116:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800411a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800411e:	f04f 0600 	mov.w	r6, #0
 8004122:	fbe1 5603 	umlal	r5, r6, r1, r3
 8004126:	f09c 0f00 	teq	ip, #0
 800412a:	bf18      	it	ne
 800412c:	f04e 0e01 	orrne.w	lr, lr, #1
 8004130:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8004134:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8004138:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800413c:	d204      	bcs.n	8004148 <__aeabi_dmul+0x80>
 800413e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8004142:	416d      	adcs	r5, r5
 8004144:	eb46 0606 	adc.w	r6, r6, r6
 8004148:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800414c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8004150:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8004154:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8004158:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800415c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8004160:	bf88      	it	hi
 8004162:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8004166:	d81e      	bhi.n	80041a6 <__aeabi_dmul+0xde>
 8004168:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800416c:	bf08      	it	eq
 800416e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8004172:	f150 0000 	adcs.w	r0, r0, #0
 8004176:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800417a:	bd70      	pop	{r4, r5, r6, pc}
 800417c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8004180:	ea46 0101 	orr.w	r1, r6, r1
 8004184:	ea40 0002 	orr.w	r0, r0, r2
 8004188:	ea81 0103 	eor.w	r1, r1, r3
 800418c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8004190:	bfc2      	ittt	gt
 8004192:	ebd4 050c 	rsbsgt	r5, r4, ip
 8004196:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800419a:	bd70      	popgt	{r4, r5, r6, pc}
 800419c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80041a0:	f04f 0e00 	mov.w	lr, #0
 80041a4:	3c01      	subs	r4, #1
 80041a6:	f300 80ab 	bgt.w	8004300 <__aeabi_dmul+0x238>
 80041aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80041ae:	bfde      	ittt	le
 80041b0:	2000      	movle	r0, #0
 80041b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80041b6:	bd70      	pople	{r4, r5, r6, pc}
 80041b8:	f1c4 0400 	rsb	r4, r4, #0
 80041bc:	3c20      	subs	r4, #32
 80041be:	da35      	bge.n	800422c <__aeabi_dmul+0x164>
 80041c0:	340c      	adds	r4, #12
 80041c2:	dc1b      	bgt.n	80041fc <__aeabi_dmul+0x134>
 80041c4:	f104 0414 	add.w	r4, r4, #20
 80041c8:	f1c4 0520 	rsb	r5, r4, #32
 80041cc:	fa00 f305 	lsl.w	r3, r0, r5
 80041d0:	fa20 f004 	lsr.w	r0, r0, r4
 80041d4:	fa01 f205 	lsl.w	r2, r1, r5
 80041d8:	ea40 0002 	orr.w	r0, r0, r2
 80041dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80041e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80041e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80041e8:	fa21 f604 	lsr.w	r6, r1, r4
 80041ec:	eb42 0106 	adc.w	r1, r2, r6
 80041f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80041f4:	bf08      	it	eq
 80041f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80041fa:	bd70      	pop	{r4, r5, r6, pc}
 80041fc:	f1c4 040c 	rsb	r4, r4, #12
 8004200:	f1c4 0520 	rsb	r5, r4, #32
 8004204:	fa00 f304 	lsl.w	r3, r0, r4
 8004208:	fa20 f005 	lsr.w	r0, r0, r5
 800420c:	fa01 f204 	lsl.w	r2, r1, r4
 8004210:	ea40 0002 	orr.w	r0, r0, r2
 8004214:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8004218:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800421c:	f141 0100 	adc.w	r1, r1, #0
 8004220:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004224:	bf08      	it	eq
 8004226:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800422a:	bd70      	pop	{r4, r5, r6, pc}
 800422c:	f1c4 0520 	rsb	r5, r4, #32
 8004230:	fa00 f205 	lsl.w	r2, r0, r5
 8004234:	ea4e 0e02 	orr.w	lr, lr, r2
 8004238:	fa20 f304 	lsr.w	r3, r0, r4
 800423c:	fa01 f205 	lsl.w	r2, r1, r5
 8004240:	ea43 0302 	orr.w	r3, r3, r2
 8004244:	fa21 f004 	lsr.w	r0, r1, r4
 8004248:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800424c:	fa21 f204 	lsr.w	r2, r1, r4
 8004250:	ea20 0002 	bic.w	r0, r0, r2
 8004254:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8004258:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800425c:	bf08      	it	eq
 800425e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8004262:	bd70      	pop	{r4, r5, r6, pc}
 8004264:	f094 0f00 	teq	r4, #0
 8004268:	d10f      	bne.n	800428a <__aeabi_dmul+0x1c2>
 800426a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800426e:	0040      	lsls	r0, r0, #1
 8004270:	eb41 0101 	adc.w	r1, r1, r1
 8004274:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8004278:	bf08      	it	eq
 800427a:	3c01      	subeq	r4, #1
 800427c:	d0f7      	beq.n	800426e <__aeabi_dmul+0x1a6>
 800427e:	ea41 0106 	orr.w	r1, r1, r6
 8004282:	f095 0f00 	teq	r5, #0
 8004286:	bf18      	it	ne
 8004288:	4770      	bxne	lr
 800428a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800428e:	0052      	lsls	r2, r2, #1
 8004290:	eb43 0303 	adc.w	r3, r3, r3
 8004294:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8004298:	bf08      	it	eq
 800429a:	3d01      	subeq	r5, #1
 800429c:	d0f7      	beq.n	800428e <__aeabi_dmul+0x1c6>
 800429e:	ea43 0306 	orr.w	r3, r3, r6
 80042a2:	4770      	bx	lr
 80042a4:	ea94 0f0c 	teq	r4, ip
 80042a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80042ac:	bf18      	it	ne
 80042ae:	ea95 0f0c 	teqne	r5, ip
 80042b2:	d00c      	beq.n	80042ce <__aeabi_dmul+0x206>
 80042b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80042b8:	bf18      	it	ne
 80042ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80042be:	d1d1      	bne.n	8004264 <__aeabi_dmul+0x19c>
 80042c0:	ea81 0103 	eor.w	r1, r1, r3
 80042c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80042c8:	f04f 0000 	mov.w	r0, #0
 80042cc:	bd70      	pop	{r4, r5, r6, pc}
 80042ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80042d2:	bf06      	itte	eq
 80042d4:	4610      	moveq	r0, r2
 80042d6:	4619      	moveq	r1, r3
 80042d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80042dc:	d019      	beq.n	8004312 <__aeabi_dmul+0x24a>
 80042de:	ea94 0f0c 	teq	r4, ip
 80042e2:	d102      	bne.n	80042ea <__aeabi_dmul+0x222>
 80042e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80042e8:	d113      	bne.n	8004312 <__aeabi_dmul+0x24a>
 80042ea:	ea95 0f0c 	teq	r5, ip
 80042ee:	d105      	bne.n	80042fc <__aeabi_dmul+0x234>
 80042f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80042f4:	bf1c      	itt	ne
 80042f6:	4610      	movne	r0, r2
 80042f8:	4619      	movne	r1, r3
 80042fa:	d10a      	bne.n	8004312 <__aeabi_dmul+0x24a>
 80042fc:	ea81 0103 	eor.w	r1, r1, r3
 8004300:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8004304:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8004308:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800430c:	f04f 0000 	mov.w	r0, #0
 8004310:	bd70      	pop	{r4, r5, r6, pc}
 8004312:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8004316:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800431a:	bd70      	pop	{r4, r5, r6, pc}

0800431c <__aeabi_ddiv>:
 800431c:	b570      	push	{r4, r5, r6, lr}
 800431e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8004322:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8004326:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800432a:	bf1d      	ittte	ne
 800432c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8004330:	ea94 0f0c 	teqne	r4, ip
 8004334:	ea95 0f0c 	teqne	r5, ip
 8004338:	f000 f8a7 	bleq	800448a <__aeabi_ddiv+0x16e>
 800433c:	eba4 0405 	sub.w	r4, r4, r5
 8004340:	ea81 0e03 	eor.w	lr, r1, r3
 8004344:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8004348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800434c:	f000 8088 	beq.w	8004460 <__aeabi_ddiv+0x144>
 8004350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004354:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8004358:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800435c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8004360:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8004364:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8004368:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800436c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8004370:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8004374:	429d      	cmp	r5, r3
 8004376:	bf08      	it	eq
 8004378:	4296      	cmpeq	r6, r2
 800437a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800437e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8004382:	d202      	bcs.n	800438a <__aeabi_ddiv+0x6e>
 8004384:	085b      	lsrs	r3, r3, #1
 8004386:	ea4f 0232 	mov.w	r2, r2, rrx
 800438a:	1ab6      	subs	r6, r6, r2
 800438c:	eb65 0503 	sbc.w	r5, r5, r3
 8004390:	085b      	lsrs	r3, r3, #1
 8004392:	ea4f 0232 	mov.w	r2, r2, rrx
 8004396:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800439a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800439e:	ebb6 0e02 	subs.w	lr, r6, r2
 80043a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80043a6:	bf22      	ittt	cs
 80043a8:	1ab6      	subcs	r6, r6, r2
 80043aa:	4675      	movcs	r5, lr
 80043ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80043b0:	085b      	lsrs	r3, r3, #1
 80043b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80043b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80043ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80043be:	bf22      	ittt	cs
 80043c0:	1ab6      	subcs	r6, r6, r2
 80043c2:	4675      	movcs	r5, lr
 80043c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80043c8:	085b      	lsrs	r3, r3, #1
 80043ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80043ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80043d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80043d6:	bf22      	ittt	cs
 80043d8:	1ab6      	subcs	r6, r6, r2
 80043da:	4675      	movcs	r5, lr
 80043dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80043e0:	085b      	lsrs	r3, r3, #1
 80043e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80043e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80043ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80043ee:	bf22      	ittt	cs
 80043f0:	1ab6      	subcs	r6, r6, r2
 80043f2:	4675      	movcs	r5, lr
 80043f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80043f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80043fc:	d018      	beq.n	8004430 <__aeabi_ddiv+0x114>
 80043fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8004402:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8004406:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800440a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800440e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8004412:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8004416:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800441a:	d1c0      	bne.n	800439e <__aeabi_ddiv+0x82>
 800441c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8004420:	d10b      	bne.n	800443a <__aeabi_ddiv+0x11e>
 8004422:	ea41 0100 	orr.w	r1, r1, r0
 8004426:	f04f 0000 	mov.w	r0, #0
 800442a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800442e:	e7b6      	b.n	800439e <__aeabi_ddiv+0x82>
 8004430:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8004434:	bf04      	itt	eq
 8004436:	4301      	orreq	r1, r0
 8004438:	2000      	moveq	r0, #0
 800443a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800443e:	bf88      	it	hi
 8004440:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8004444:	f63f aeaf 	bhi.w	80041a6 <__aeabi_dmul+0xde>
 8004448:	ebb5 0c03 	subs.w	ip, r5, r3
 800444c:	bf04      	itt	eq
 800444e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8004452:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8004456:	f150 0000 	adcs.w	r0, r0, #0
 800445a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800445e:	bd70      	pop	{r4, r5, r6, pc}
 8004460:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8004464:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8004468:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800446c:	bfc2      	ittt	gt
 800446e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8004472:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8004476:	bd70      	popgt	{r4, r5, r6, pc}
 8004478:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800447c:	f04f 0e00 	mov.w	lr, #0
 8004480:	3c01      	subs	r4, #1
 8004482:	e690      	b.n	80041a6 <__aeabi_dmul+0xde>
 8004484:	ea45 0e06 	orr.w	lr, r5, r6
 8004488:	e68d      	b.n	80041a6 <__aeabi_dmul+0xde>
 800448a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800448e:	ea94 0f0c 	teq	r4, ip
 8004492:	bf08      	it	eq
 8004494:	ea95 0f0c 	teqeq	r5, ip
 8004498:	f43f af3b 	beq.w	8004312 <__aeabi_dmul+0x24a>
 800449c:	ea94 0f0c 	teq	r4, ip
 80044a0:	d10a      	bne.n	80044b8 <__aeabi_ddiv+0x19c>
 80044a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80044a6:	f47f af34 	bne.w	8004312 <__aeabi_dmul+0x24a>
 80044aa:	ea95 0f0c 	teq	r5, ip
 80044ae:	f47f af25 	bne.w	80042fc <__aeabi_dmul+0x234>
 80044b2:	4610      	mov	r0, r2
 80044b4:	4619      	mov	r1, r3
 80044b6:	e72c      	b.n	8004312 <__aeabi_dmul+0x24a>
 80044b8:	ea95 0f0c 	teq	r5, ip
 80044bc:	d106      	bne.n	80044cc <__aeabi_ddiv+0x1b0>
 80044be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80044c2:	f43f aefd 	beq.w	80042c0 <__aeabi_dmul+0x1f8>
 80044c6:	4610      	mov	r0, r2
 80044c8:	4619      	mov	r1, r3
 80044ca:	e722      	b.n	8004312 <__aeabi_dmul+0x24a>
 80044cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80044d0:	bf18      	it	ne
 80044d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80044d6:	f47f aec5 	bne.w	8004264 <__aeabi_dmul+0x19c>
 80044da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80044de:	f47f af0d 	bne.w	80042fc <__aeabi_dmul+0x234>
 80044e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80044e6:	f47f aeeb 	bne.w	80042c0 <__aeabi_dmul+0x1f8>
 80044ea:	e712      	b.n	8004312 <__aeabi_dmul+0x24a>

080044ec <__aeabi_d2f>:
 80044ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80044f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80044f4:	bf24      	itt	cs
 80044f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80044fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80044fe:	d90d      	bls.n	800451c <__aeabi_d2f+0x30>
 8004500:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8004504:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8004508:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800450c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8004510:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8004514:	bf08      	it	eq
 8004516:	f020 0001 	biceq.w	r0, r0, #1
 800451a:	4770      	bx	lr
 800451c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8004520:	d121      	bne.n	8004566 <__aeabi_d2f+0x7a>
 8004522:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8004526:	bfbc      	itt	lt
 8004528:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800452c:	4770      	bxlt	lr
 800452e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8004532:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8004536:	f1c2 0218 	rsb	r2, r2, #24
 800453a:	f1c2 0c20 	rsb	ip, r2, #32
 800453e:	fa10 f30c 	lsls.w	r3, r0, ip
 8004542:	fa20 f002 	lsr.w	r0, r0, r2
 8004546:	bf18      	it	ne
 8004548:	f040 0001 	orrne.w	r0, r0, #1
 800454c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8004550:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8004554:	fa03 fc0c 	lsl.w	ip, r3, ip
 8004558:	ea40 000c 	orr.w	r0, r0, ip
 800455c:	fa23 f302 	lsr.w	r3, r3, r2
 8004560:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004564:	e7cc      	b.n	8004500 <__aeabi_d2f+0x14>
 8004566:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800456a:	d107      	bne.n	800457c <__aeabi_d2f+0x90>
 800456c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8004570:	bf1e      	ittt	ne
 8004572:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8004576:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800457a:	4770      	bxne	lr
 800457c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8004580:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8004584:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop

0800458c <__aeabi_frsub>:
 800458c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8004590:	e002      	b.n	8004598 <__addsf3>
 8004592:	bf00      	nop

08004594 <__aeabi_fsub>:
 8004594:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08004598 <__addsf3>:
 8004598:	0042      	lsls	r2, r0, #1
 800459a:	bf1f      	itttt	ne
 800459c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80045a0:	ea92 0f03 	teqne	r2, r3
 80045a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80045a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80045ac:	d06a      	beq.n	8004684 <__addsf3+0xec>
 80045ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80045b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80045b6:	bfc1      	itttt	gt
 80045b8:	18d2      	addgt	r2, r2, r3
 80045ba:	4041      	eorgt	r1, r0
 80045bc:	4048      	eorgt	r0, r1
 80045be:	4041      	eorgt	r1, r0
 80045c0:	bfb8      	it	lt
 80045c2:	425b      	neglt	r3, r3
 80045c4:	2b19      	cmp	r3, #25
 80045c6:	bf88      	it	hi
 80045c8:	4770      	bxhi	lr
 80045ca:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80045ce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80045d2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80045d6:	bf18      	it	ne
 80045d8:	4240      	negne	r0, r0
 80045da:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80045de:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80045e2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80045e6:	bf18      	it	ne
 80045e8:	4249      	negne	r1, r1
 80045ea:	ea92 0f03 	teq	r2, r3
 80045ee:	d03f      	beq.n	8004670 <__addsf3+0xd8>
 80045f0:	f1a2 0201 	sub.w	r2, r2, #1
 80045f4:	fa41 fc03 	asr.w	ip, r1, r3
 80045f8:	eb10 000c 	adds.w	r0, r0, ip
 80045fc:	f1c3 0320 	rsb	r3, r3, #32
 8004600:	fa01 f103 	lsl.w	r1, r1, r3
 8004604:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8004608:	d502      	bpl.n	8004610 <__addsf3+0x78>
 800460a:	4249      	negs	r1, r1
 800460c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8004610:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8004614:	d313      	bcc.n	800463e <__addsf3+0xa6>
 8004616:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800461a:	d306      	bcc.n	800462a <__addsf3+0x92>
 800461c:	0840      	lsrs	r0, r0, #1
 800461e:	ea4f 0131 	mov.w	r1, r1, rrx
 8004622:	f102 0201 	add.w	r2, r2, #1
 8004626:	2afe      	cmp	r2, #254	@ 0xfe
 8004628:	d251      	bcs.n	80046ce <__addsf3+0x136>
 800462a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800462e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8004632:	bf08      	it	eq
 8004634:	f020 0001 	biceq.w	r0, r0, #1
 8004638:	ea40 0003 	orr.w	r0, r0, r3
 800463c:	4770      	bx	lr
 800463e:	0049      	lsls	r1, r1, #1
 8004640:	eb40 0000 	adc.w	r0, r0, r0
 8004644:	3a01      	subs	r2, #1
 8004646:	bf28      	it	cs
 8004648:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800464c:	d2ed      	bcs.n	800462a <__addsf3+0x92>
 800464e:	fab0 fc80 	clz	ip, r0
 8004652:	f1ac 0c08 	sub.w	ip, ip, #8
 8004656:	ebb2 020c 	subs.w	r2, r2, ip
 800465a:	fa00 f00c 	lsl.w	r0, r0, ip
 800465e:	bfaa      	itet	ge
 8004660:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8004664:	4252      	neglt	r2, r2
 8004666:	4318      	orrge	r0, r3
 8004668:	bfbc      	itt	lt
 800466a:	40d0      	lsrlt	r0, r2
 800466c:	4318      	orrlt	r0, r3
 800466e:	4770      	bx	lr
 8004670:	f092 0f00 	teq	r2, #0
 8004674:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8004678:	bf06      	itte	eq
 800467a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800467e:	3201      	addeq	r2, #1
 8004680:	3b01      	subne	r3, #1
 8004682:	e7b5      	b.n	80045f0 <__addsf3+0x58>
 8004684:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8004688:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800468c:	bf18      	it	ne
 800468e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8004692:	d021      	beq.n	80046d8 <__addsf3+0x140>
 8004694:	ea92 0f03 	teq	r2, r3
 8004698:	d004      	beq.n	80046a4 <__addsf3+0x10c>
 800469a:	f092 0f00 	teq	r2, #0
 800469e:	bf08      	it	eq
 80046a0:	4608      	moveq	r0, r1
 80046a2:	4770      	bx	lr
 80046a4:	ea90 0f01 	teq	r0, r1
 80046a8:	bf1c      	itt	ne
 80046aa:	2000      	movne	r0, #0
 80046ac:	4770      	bxne	lr
 80046ae:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80046b2:	d104      	bne.n	80046be <__addsf3+0x126>
 80046b4:	0040      	lsls	r0, r0, #1
 80046b6:	bf28      	it	cs
 80046b8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80046bc:	4770      	bx	lr
 80046be:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80046c2:	bf3c      	itt	cc
 80046c4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80046c8:	4770      	bxcc	lr
 80046ca:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80046ce:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80046d2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80046d6:	4770      	bx	lr
 80046d8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80046dc:	bf16      	itet	ne
 80046de:	4608      	movne	r0, r1
 80046e0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80046e4:	4601      	movne	r1, r0
 80046e6:	0242      	lsls	r2, r0, #9
 80046e8:	bf06      	itte	eq
 80046ea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80046ee:	ea90 0f01 	teqeq	r0, r1
 80046f2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80046f6:	4770      	bx	lr

080046f8 <__aeabi_ui2f>:
 80046f8:	f04f 0300 	mov.w	r3, #0
 80046fc:	e004      	b.n	8004708 <__aeabi_i2f+0x8>
 80046fe:	bf00      	nop

08004700 <__aeabi_i2f>:
 8004700:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8004704:	bf48      	it	mi
 8004706:	4240      	negmi	r0, r0
 8004708:	ea5f 0c00 	movs.w	ip, r0
 800470c:	bf08      	it	eq
 800470e:	4770      	bxeq	lr
 8004710:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8004714:	4601      	mov	r1, r0
 8004716:	f04f 0000 	mov.w	r0, #0
 800471a:	e01c      	b.n	8004756 <__aeabi_l2f+0x2a>

0800471c <__aeabi_ul2f>:
 800471c:	ea50 0201 	orrs.w	r2, r0, r1
 8004720:	bf08      	it	eq
 8004722:	4770      	bxeq	lr
 8004724:	f04f 0300 	mov.w	r3, #0
 8004728:	e00a      	b.n	8004740 <__aeabi_l2f+0x14>
 800472a:	bf00      	nop

0800472c <__aeabi_l2f>:
 800472c:	ea50 0201 	orrs.w	r2, r0, r1
 8004730:	bf08      	it	eq
 8004732:	4770      	bxeq	lr
 8004734:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8004738:	d502      	bpl.n	8004740 <__aeabi_l2f+0x14>
 800473a:	4240      	negs	r0, r0
 800473c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8004740:	ea5f 0c01 	movs.w	ip, r1
 8004744:	bf02      	ittt	eq
 8004746:	4684      	moveq	ip, r0
 8004748:	4601      	moveq	r1, r0
 800474a:	2000      	moveq	r0, #0
 800474c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8004750:	bf08      	it	eq
 8004752:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8004756:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800475a:	fabc f28c 	clz	r2, ip
 800475e:	3a08      	subs	r2, #8
 8004760:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8004764:	db10      	blt.n	8004788 <__aeabi_l2f+0x5c>
 8004766:	fa01 fc02 	lsl.w	ip, r1, r2
 800476a:	4463      	add	r3, ip
 800476c:	fa00 fc02 	lsl.w	ip, r0, r2
 8004770:	f1c2 0220 	rsb	r2, r2, #32
 8004774:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8004778:	fa20 f202 	lsr.w	r2, r0, r2
 800477c:	eb43 0002 	adc.w	r0, r3, r2
 8004780:	bf08      	it	eq
 8004782:	f020 0001 	biceq.w	r0, r0, #1
 8004786:	4770      	bx	lr
 8004788:	f102 0220 	add.w	r2, r2, #32
 800478c:	fa01 fc02 	lsl.w	ip, r1, r2
 8004790:	f1c2 0220 	rsb	r2, r2, #32
 8004794:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8004798:	fa21 f202 	lsr.w	r2, r1, r2
 800479c:	eb43 0002 	adc.w	r0, r3, r2
 80047a0:	bf08      	it	eq
 80047a2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80047a6:	4770      	bx	lr

080047a8 <__aeabi_fmul>:
 80047a8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80047ac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80047b0:	bf1e      	ittt	ne
 80047b2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80047b6:	ea92 0f0c 	teqne	r2, ip
 80047ba:	ea93 0f0c 	teqne	r3, ip
 80047be:	d06f      	beq.n	80048a0 <__aeabi_fmul+0xf8>
 80047c0:	441a      	add	r2, r3
 80047c2:	ea80 0c01 	eor.w	ip, r0, r1
 80047c6:	0240      	lsls	r0, r0, #9
 80047c8:	bf18      	it	ne
 80047ca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80047ce:	d01e      	beq.n	800480e <__aeabi_fmul+0x66>
 80047d0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80047d4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80047d8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80047dc:	fba0 3101 	umull	r3, r1, r0, r1
 80047e0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80047e4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80047e8:	bf3e      	ittt	cc
 80047ea:	0049      	lslcc	r1, r1, #1
 80047ec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80047f0:	005b      	lslcc	r3, r3, #1
 80047f2:	ea40 0001 	orr.w	r0, r0, r1
 80047f6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80047fa:	2afd      	cmp	r2, #253	@ 0xfd
 80047fc:	d81d      	bhi.n	800483a <__aeabi_fmul+0x92>
 80047fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004802:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8004806:	bf08      	it	eq
 8004808:	f020 0001 	biceq.w	r0, r0, #1
 800480c:	4770      	bx	lr
 800480e:	f090 0f00 	teq	r0, #0
 8004812:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8004816:	bf08      	it	eq
 8004818:	0249      	lsleq	r1, r1, #9
 800481a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800481e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8004822:	3a7f      	subs	r2, #127	@ 0x7f
 8004824:	bfc2      	ittt	gt
 8004826:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800482a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800482e:	4770      	bxgt	lr
 8004830:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8004834:	f04f 0300 	mov.w	r3, #0
 8004838:	3a01      	subs	r2, #1
 800483a:	dc5d      	bgt.n	80048f8 <__aeabi_fmul+0x150>
 800483c:	f112 0f19 	cmn.w	r2, #25
 8004840:	bfdc      	itt	le
 8004842:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8004846:	4770      	bxle	lr
 8004848:	f1c2 0200 	rsb	r2, r2, #0
 800484c:	0041      	lsls	r1, r0, #1
 800484e:	fa21 f102 	lsr.w	r1, r1, r2
 8004852:	f1c2 0220 	rsb	r2, r2, #32
 8004856:	fa00 fc02 	lsl.w	ip, r0, r2
 800485a:	ea5f 0031 	movs.w	r0, r1, rrx
 800485e:	f140 0000 	adc.w	r0, r0, #0
 8004862:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8004866:	bf08      	it	eq
 8004868:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800486c:	4770      	bx	lr
 800486e:	f092 0f00 	teq	r2, #0
 8004872:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8004876:	bf02      	ittt	eq
 8004878:	0040      	lsleq	r0, r0, #1
 800487a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800487e:	3a01      	subeq	r2, #1
 8004880:	d0f9      	beq.n	8004876 <__aeabi_fmul+0xce>
 8004882:	ea40 000c 	orr.w	r0, r0, ip
 8004886:	f093 0f00 	teq	r3, #0
 800488a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800488e:	bf02      	ittt	eq
 8004890:	0049      	lsleq	r1, r1, #1
 8004892:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8004896:	3b01      	subeq	r3, #1
 8004898:	d0f9      	beq.n	800488e <__aeabi_fmul+0xe6>
 800489a:	ea41 010c 	orr.w	r1, r1, ip
 800489e:	e78f      	b.n	80047c0 <__aeabi_fmul+0x18>
 80048a0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80048a4:	ea92 0f0c 	teq	r2, ip
 80048a8:	bf18      	it	ne
 80048aa:	ea93 0f0c 	teqne	r3, ip
 80048ae:	d00a      	beq.n	80048c6 <__aeabi_fmul+0x11e>
 80048b0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80048b4:	bf18      	it	ne
 80048b6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80048ba:	d1d8      	bne.n	800486e <__aeabi_fmul+0xc6>
 80048bc:	ea80 0001 	eor.w	r0, r0, r1
 80048c0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80048c4:	4770      	bx	lr
 80048c6:	f090 0f00 	teq	r0, #0
 80048ca:	bf17      	itett	ne
 80048cc:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80048d0:	4608      	moveq	r0, r1
 80048d2:	f091 0f00 	teqne	r1, #0
 80048d6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80048da:	d014      	beq.n	8004906 <__aeabi_fmul+0x15e>
 80048dc:	ea92 0f0c 	teq	r2, ip
 80048e0:	d101      	bne.n	80048e6 <__aeabi_fmul+0x13e>
 80048e2:	0242      	lsls	r2, r0, #9
 80048e4:	d10f      	bne.n	8004906 <__aeabi_fmul+0x15e>
 80048e6:	ea93 0f0c 	teq	r3, ip
 80048ea:	d103      	bne.n	80048f4 <__aeabi_fmul+0x14c>
 80048ec:	024b      	lsls	r3, r1, #9
 80048ee:	bf18      	it	ne
 80048f0:	4608      	movne	r0, r1
 80048f2:	d108      	bne.n	8004906 <__aeabi_fmul+0x15e>
 80048f4:	ea80 0001 	eor.w	r0, r0, r1
 80048f8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80048fc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8004900:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8004904:	4770      	bx	lr
 8004906:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800490a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 800490e:	4770      	bx	lr

08004910 <__aeabi_fdiv>:
 8004910:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8004914:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8004918:	bf1e      	ittt	ne
 800491a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800491e:	ea92 0f0c 	teqne	r2, ip
 8004922:	ea93 0f0c 	teqne	r3, ip
 8004926:	d069      	beq.n	80049fc <__aeabi_fdiv+0xec>
 8004928:	eba2 0203 	sub.w	r2, r2, r3
 800492c:	ea80 0c01 	eor.w	ip, r0, r1
 8004930:	0249      	lsls	r1, r1, #9
 8004932:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8004936:	d037      	beq.n	80049a8 <__aeabi_fdiv+0x98>
 8004938:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800493c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8004940:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8004944:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8004948:	428b      	cmp	r3, r1
 800494a:	bf38      	it	cc
 800494c:	005b      	lslcc	r3, r3, #1
 800494e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8004952:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8004956:	428b      	cmp	r3, r1
 8004958:	bf24      	itt	cs
 800495a:	1a5b      	subcs	r3, r3, r1
 800495c:	ea40 000c 	orrcs.w	r0, r0, ip
 8004960:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8004964:	bf24      	itt	cs
 8004966:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800496a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800496e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8004972:	bf24      	itt	cs
 8004974:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8004978:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800497c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8004980:	bf24      	itt	cs
 8004982:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8004986:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800498a:	011b      	lsls	r3, r3, #4
 800498c:	bf18      	it	ne
 800498e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8004992:	d1e0      	bne.n	8004956 <__aeabi_fdiv+0x46>
 8004994:	2afd      	cmp	r2, #253	@ 0xfd
 8004996:	f63f af50 	bhi.w	800483a <__aeabi_fmul+0x92>
 800499a:	428b      	cmp	r3, r1
 800499c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80049a0:	bf08      	it	eq
 80049a2:	f020 0001 	biceq.w	r0, r0, #1
 80049a6:	4770      	bx	lr
 80049a8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80049ac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80049b0:	327f      	adds	r2, #127	@ 0x7f
 80049b2:	bfc2      	ittt	gt
 80049b4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80049b8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80049bc:	4770      	bxgt	lr
 80049be:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80049c2:	f04f 0300 	mov.w	r3, #0
 80049c6:	3a01      	subs	r2, #1
 80049c8:	e737      	b.n	800483a <__aeabi_fmul+0x92>
 80049ca:	f092 0f00 	teq	r2, #0
 80049ce:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80049d2:	bf02      	ittt	eq
 80049d4:	0040      	lsleq	r0, r0, #1
 80049d6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80049da:	3a01      	subeq	r2, #1
 80049dc:	d0f9      	beq.n	80049d2 <__aeabi_fdiv+0xc2>
 80049de:	ea40 000c 	orr.w	r0, r0, ip
 80049e2:	f093 0f00 	teq	r3, #0
 80049e6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80049ea:	bf02      	ittt	eq
 80049ec:	0049      	lsleq	r1, r1, #1
 80049ee:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80049f2:	3b01      	subeq	r3, #1
 80049f4:	d0f9      	beq.n	80049ea <__aeabi_fdiv+0xda>
 80049f6:	ea41 010c 	orr.w	r1, r1, ip
 80049fa:	e795      	b.n	8004928 <__aeabi_fdiv+0x18>
 80049fc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8004a00:	ea92 0f0c 	teq	r2, ip
 8004a04:	d108      	bne.n	8004a18 <__aeabi_fdiv+0x108>
 8004a06:	0242      	lsls	r2, r0, #9
 8004a08:	f47f af7d 	bne.w	8004906 <__aeabi_fmul+0x15e>
 8004a0c:	ea93 0f0c 	teq	r3, ip
 8004a10:	f47f af70 	bne.w	80048f4 <__aeabi_fmul+0x14c>
 8004a14:	4608      	mov	r0, r1
 8004a16:	e776      	b.n	8004906 <__aeabi_fmul+0x15e>
 8004a18:	ea93 0f0c 	teq	r3, ip
 8004a1c:	d104      	bne.n	8004a28 <__aeabi_fdiv+0x118>
 8004a1e:	024b      	lsls	r3, r1, #9
 8004a20:	f43f af4c 	beq.w	80048bc <__aeabi_fmul+0x114>
 8004a24:	4608      	mov	r0, r1
 8004a26:	e76e      	b.n	8004906 <__aeabi_fmul+0x15e>
 8004a28:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8004a2c:	bf18      	it	ne
 8004a2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8004a32:	d1ca      	bne.n	80049ca <__aeabi_fdiv+0xba>
 8004a34:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8004a38:	f47f af5c 	bne.w	80048f4 <__aeabi_fmul+0x14c>
 8004a3c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8004a40:	f47f af3c 	bne.w	80048bc <__aeabi_fmul+0x114>
 8004a44:	e75f      	b.n	8004906 <__aeabi_fmul+0x15e>
 8004a46:	bf00      	nop

08004a48 <__gesf2>:
 8004a48:	f04f 3cff 	mov.w	ip, #4294967295
 8004a4c:	e006      	b.n	8004a5c <__cmpsf2+0x4>
 8004a4e:	bf00      	nop

08004a50 <__lesf2>:
 8004a50:	f04f 0c01 	mov.w	ip, #1
 8004a54:	e002      	b.n	8004a5c <__cmpsf2+0x4>
 8004a56:	bf00      	nop

08004a58 <__cmpsf2>:
 8004a58:	f04f 0c01 	mov.w	ip, #1
 8004a5c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8004a60:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8004a64:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8004a68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8004a6c:	bf18      	it	ne
 8004a6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8004a72:	d011      	beq.n	8004a98 <__cmpsf2+0x40>
 8004a74:	b001      	add	sp, #4
 8004a76:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8004a7a:	bf18      	it	ne
 8004a7c:	ea90 0f01 	teqne	r0, r1
 8004a80:	bf58      	it	pl
 8004a82:	ebb2 0003 	subspl.w	r0, r2, r3
 8004a86:	bf88      	it	hi
 8004a88:	17c8      	asrhi	r0, r1, #31
 8004a8a:	bf38      	it	cc
 8004a8c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8004a90:	bf18      	it	ne
 8004a92:	f040 0001 	orrne.w	r0, r0, #1
 8004a96:	4770      	bx	lr
 8004a98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8004a9c:	d102      	bne.n	8004aa4 <__cmpsf2+0x4c>
 8004a9e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8004aa2:	d105      	bne.n	8004ab0 <__cmpsf2+0x58>
 8004aa4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8004aa8:	d1e4      	bne.n	8004a74 <__cmpsf2+0x1c>
 8004aaa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8004aae:	d0e1      	beq.n	8004a74 <__cmpsf2+0x1c>
 8004ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop

08004ab8 <__aeabi_cfrcmple>:
 8004ab8:	4684      	mov	ip, r0
 8004aba:	4608      	mov	r0, r1
 8004abc:	4661      	mov	r1, ip
 8004abe:	e7ff      	b.n	8004ac0 <__aeabi_cfcmpeq>

08004ac0 <__aeabi_cfcmpeq>:
 8004ac0:	b50f      	push	{r0, r1, r2, r3, lr}
 8004ac2:	f7ff ffc9 	bl	8004a58 <__cmpsf2>
 8004ac6:	2800      	cmp	r0, #0
 8004ac8:	bf48      	it	mi
 8004aca:	f110 0f00 	cmnmi.w	r0, #0
 8004ace:	bd0f      	pop	{r0, r1, r2, r3, pc}

08004ad0 <__aeabi_fcmpeq>:
 8004ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004ad4:	f7ff fff4 	bl	8004ac0 <__aeabi_cfcmpeq>
 8004ad8:	bf0c      	ite	eq
 8004ada:	2001      	moveq	r0, #1
 8004adc:	2000      	movne	r0, #0
 8004ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8004ae2:	bf00      	nop

08004ae4 <__aeabi_fcmplt>:
 8004ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004ae8:	f7ff ffea 	bl	8004ac0 <__aeabi_cfcmpeq>
 8004aec:	bf34      	ite	cc
 8004aee:	2001      	movcc	r0, #1
 8004af0:	2000      	movcs	r0, #0
 8004af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8004af6:	bf00      	nop

08004af8 <__aeabi_fcmple>:
 8004af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004afc:	f7ff ffe0 	bl	8004ac0 <__aeabi_cfcmpeq>
 8004b00:	bf94      	ite	ls
 8004b02:	2001      	movls	r0, #1
 8004b04:	2000      	movhi	r0, #0
 8004b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8004b0a:	bf00      	nop

08004b0c <__aeabi_fcmpge>:
 8004b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004b10:	f7ff ffd2 	bl	8004ab8 <__aeabi_cfrcmple>
 8004b14:	bf94      	ite	ls
 8004b16:	2001      	movls	r0, #1
 8004b18:	2000      	movhi	r0, #0
 8004b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8004b1e:	bf00      	nop

08004b20 <__aeabi_fcmpgt>:
 8004b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004b24:	f7ff ffc8 	bl	8004ab8 <__aeabi_cfrcmple>
 8004b28:	bf34      	ite	cc
 8004b2a:	2001      	movcc	r0, #1
 8004b2c:	2000      	movcs	r0, #0
 8004b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8004b32:	bf00      	nop

08004b34 <__aeabi_f2uiz>:
 8004b34:	0042      	lsls	r2, r0, #1
 8004b36:	d20e      	bcs.n	8004b56 <__aeabi_f2uiz+0x22>
 8004b38:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8004b3c:	d30b      	bcc.n	8004b56 <__aeabi_f2uiz+0x22>
 8004b3e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8004b42:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8004b46:	d409      	bmi.n	8004b5c <__aeabi_f2uiz+0x28>
 8004b48:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8004b4c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004b50:	fa23 f002 	lsr.w	r0, r3, r2
 8004b54:	4770      	bx	lr
 8004b56:	f04f 0000 	mov.w	r0, #0
 8004b5a:	4770      	bx	lr
 8004b5c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8004b60:	d101      	bne.n	8004b66 <__aeabi_f2uiz+0x32>
 8004b62:	0242      	lsls	r2, r0, #9
 8004b64:	d102      	bne.n	8004b6c <__aeabi_f2uiz+0x38>
 8004b66:	f04f 30ff 	mov.w	r0, #4294967295
 8004b6a:	4770      	bx	lr
 8004b6c:	f04f 0000 	mov.w	r0, #0
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	0000      	movs	r0, r0
	...

08004b78 <LoadCtrl_MainFunction>:
__attribute__((section(".ncr"))) uint8 LoadCtrl_LockRin8;

void LoadCtrl_MainFunction(void);

void LoadCtrl_MainFunction(void)
{
 8004b78:	b5b0      	push	{r4, r5, r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
	static float aux1 = 0;
	static uint16 aux2 = 0;
	static float aux3 = 0;
	aux1 = (1.2 * 4095.0) / LoadCtrl_VrefInt; /* Get the actual VAREF (expectation is to have it < 3.3V, since voltage drops occurs on
 8004b7e:	4b48      	ldr	r3, [pc, #288]	@ (8004ca0 <LoadCtrl_MainFunction+0x128>)
 8004b80:	881b      	ldrh	r3, [r3, #0]
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7ff fa36 	bl	8003ff4 <__aeabi_i2d>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	a13e      	add	r1, pc, #248	@ (adr r1, 8004c88 <LoadCtrl_MainFunction+0x110>)
 8004b8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b92:	f7ff fbc3 	bl	800431c <__aeabi_ddiv>
 8004b96:	4602      	mov	r2, r0
 8004b98:	460b      	mov	r3, r1
 8004b9a:	4610      	mov	r0, r2
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	f7ff fca5 	bl	80044ec <__aeabi_d2f>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	4a3f      	ldr	r2, [pc, #252]	@ (8004ca4 <LoadCtrl_MainFunction+0x12c>)
 8004ba6:	6013      	str	r3, [r2, #0]
	the 5V power supply line due to consumers). */
	LoadCtrl_AdcVoltToActualVolt = ((LoadCtrl_AnalogVoltValue * aux1) / 4095.0) * 5; /* Use the VAREF previously calculated to get the voltage level.
 8004ba8:	4b3f      	ldr	r3, [pc, #252]	@ (8004ca8 <LoadCtrl_MainFunction+0x130>)
 8004baa:	881b      	ldrh	r3, [r3, #0]
 8004bac:	4618      	mov	r0, r3
 8004bae:	f7ff fda7 	bl	8004700 <__aeabi_i2f>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	4b3b      	ldr	r3, [pc, #236]	@ (8004ca4 <LoadCtrl_MainFunction+0x12c>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4619      	mov	r1, r3
 8004bba:	4610      	mov	r0, r2
 8004bbc:	f7ff fdf4 	bl	80047a8 <__aeabi_fmul>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f7ff fa28 	bl	8004018 <__aeabi_f2d>
 8004bc8:	a331      	add	r3, pc, #196	@ (adr r3, 8004c90 <LoadCtrl_MainFunction+0x118>)
 8004bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bce:	f7ff fba5 	bl	800431c <__aeabi_ddiv>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	4610      	mov	r0, r2
 8004bd8:	4619      	mov	r1, r3
 8004bda:	f04f 0200 	mov.w	r2, #0
 8004bde:	4b33      	ldr	r3, [pc, #204]	@ (8004cac <LoadCtrl_MainFunction+0x134>)
 8004be0:	f7ff fa72 	bl	80040c8 <__aeabi_dmul>
 8004be4:	4602      	mov	r2, r0
 8004be6:	460b      	mov	r3, r1
 8004be8:	4610      	mov	r0, r2
 8004bea:	4619      	mov	r1, r3
 8004bec:	f7ff fc7e 	bl	80044ec <__aeabi_d2f>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	4a2f      	ldr	r2, [pc, #188]	@ (8004cb0 <LoadCtrl_MainFunction+0x138>)
 8004bf4:	6013      	str	r3, [r2, #0]
	Note: Supply line monitored is 5V; voltage supply for the voltage sensor and current sensor is 5V; VAREF for both sensors is 5V in this scenario.
	However, they can measure values up to 25V and 5A and since the voltage drops occurs on the power line, they can never output their maximum potential.
	That means we can never exceed 3.3V on the analog inputs.
	And the extra-compensation done here is because of the voltage drop. Calculating the current VAREF allows for proper measurements. */
	aux3 = (LoadCtrl_AnalogCurrentValue * aux1) / 4095.0; /* Convert the output pin of the current sensor to voltage value. */
 8004bf6:	4b2f      	ldr	r3, [pc, #188]	@ (8004cb4 <LoadCtrl_MainFunction+0x13c>)
 8004bf8:	881b      	ldrh	r3, [r3, #0]
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f7ff fd80 	bl	8004700 <__aeabi_i2f>
 8004c00:	4602      	mov	r2, r0
 8004c02:	4b28      	ldr	r3, [pc, #160]	@ (8004ca4 <LoadCtrl_MainFunction+0x12c>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4619      	mov	r1, r3
 8004c08:	4610      	mov	r0, r2
 8004c0a:	f7ff fdcd 	bl	80047a8 <__aeabi_fmul>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	4929      	ldr	r1, [pc, #164]	@ (8004cb8 <LoadCtrl_MainFunction+0x140>)
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7ff fe7c 	bl	8004910 <__aeabi_fdiv>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	4b27      	ldr	r3, [pc, #156]	@ (8004cbc <LoadCtrl_MainFunction+0x144>)
 8004c1e:	601a      	str	r2, [r3, #0]
	LoadCtrl_VoltValueToActualAmperage = (((LoadCtrl_AdcVoltToActualVolt / 5) * 2.5) - aux3) / 0.185; /* Calculate current value.
 8004c20:	4b23      	ldr	r3, [pc, #140]	@ (8004cb0 <LoadCtrl_MainFunction+0x138>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4926      	ldr	r1, [pc, #152]	@ (8004cc0 <LoadCtrl_MainFunction+0x148>)
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7ff fe72 	bl	8004910 <__aeabi_fdiv>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7ff f9f2 	bl	8004018 <__aeabi_f2d>
 8004c34:	f04f 0200 	mov.w	r2, #0
 8004c38:	4b22      	ldr	r3, [pc, #136]	@ (8004cc4 <LoadCtrl_MainFunction+0x14c>)
 8004c3a:	f7ff fa45 	bl	80040c8 <__aeabi_dmul>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	460b      	mov	r3, r1
 8004c42:	4614      	mov	r4, r2
 8004c44:	461d      	mov	r5, r3
 8004c46:	4b1d      	ldr	r3, [pc, #116]	@ (8004cbc <LoadCtrl_MainFunction+0x144>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7ff f9e4 	bl	8004018 <__aeabi_f2d>
 8004c50:	4602      	mov	r2, r0
 8004c52:	460b      	mov	r3, r1
 8004c54:	4620      	mov	r0, r4
 8004c56:	4629      	mov	r1, r5
 8004c58:	f7ff f87e 	bl	8003d58 <__aeabi_dsub>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	460b      	mov	r3, r1
 8004c60:	4610      	mov	r0, r2
 8004c62:	4619      	mov	r1, r3
 8004c64:	a30c      	add	r3, pc, #48	@ (adr r3, 8004c98 <LoadCtrl_MainFunction+0x120>)
 8004c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6a:	f7ff fb57 	bl	800431c <__aeabi_ddiv>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	460b      	mov	r3, r1
 8004c72:	4610      	mov	r0, r2
 8004c74:	4619      	mov	r1, r3
 8004c76:	f7ff fc39 	bl	80044ec <__aeabi_d2f>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	4a12      	ldr	r2, [pc, #72]	@ (8004cc8 <LoadCtrl_MainFunction+0x150>)
 8004c7e:	6013      	str	r3, [r2, #0]
	We know the voltage drops below 5V, that means the following:
	- The output pin of the current sensor in no-load-or-consumer-state is no longer 2.49 / 2.5 volts, but less; this is compensated by the fact that we accurately measure
	the voltage value of the supply line with the voltage sensor
	- The output pin state of the current sensor during loads connection is going to be less than expected if we had 5V stable supply. Anyway, it is subtracted from a value compensated.
	- 0.185 is in mV, or the sensor sensitivity. */
	for(uint8 i = 0; i < 8; i++)
 8004c80:	2300      	movs	r3, #0
 8004c82:	71fb      	strb	r3, [r7, #7]
 8004c84:	e02f      	b.n	8004ce6 <LoadCtrl_MainFunction+0x16e>
 8004c86:	bf00      	nop
 8004c88:	00000000 	.word	0x00000000
 8004c8c:	40b33200 	.word	0x40b33200
 8004c90:	00000000 	.word	0x00000000
 8004c94:	40affe00 	.word	0x40affe00
 8004c98:	7ae147ae 	.word	0x7ae147ae
 8004c9c:	3fc7ae14 	.word	0x3fc7ae14
 8004ca0:	200000aa 	.word	0x200000aa
 8004ca4:	200000d0 	.word	0x200000d0
 8004ca8:	200000a6 	.word	0x200000a6
 8004cac:	40140000 	.word	0x40140000
 8004cb0:	200000a0 	.word	0x200000a0
 8004cb4:	200000a8 	.word	0x200000a8
 8004cb8:	457ff000 	.word	0x457ff000
 8004cbc:	200000d4 	.word	0x200000d4
 8004cc0:	40a00000 	.word	0x40a00000
 8004cc4:	40040000 	.word	0x40040000
 8004cc8:	2000009c 	.word	0x2000009c
	{
		if(LoadCtrl_StatusList[0] == 0) aux2++;
 8004ccc:	4b92      	ldr	r3, [pc, #584]	@ (8004f18 <LoadCtrl_MainFunction+0x3a0>)
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d105      	bne.n	8004ce0 <LoadCtrl_MainFunction+0x168>
 8004cd4:	4b91      	ldr	r3, [pc, #580]	@ (8004f1c <LoadCtrl_MainFunction+0x3a4>)
 8004cd6:	881b      	ldrh	r3, [r3, #0]
 8004cd8:	3301      	adds	r3, #1
 8004cda:	b29a      	uxth	r2, r3
 8004cdc:	4b8f      	ldr	r3, [pc, #572]	@ (8004f1c <LoadCtrl_MainFunction+0x3a4>)
 8004cde:	801a      	strh	r2, [r3, #0]
	for(uint8 i = 0; i < 8; i++)
 8004ce0:	79fb      	ldrb	r3, [r7, #7]
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	71fb      	strb	r3, [r7, #7]
 8004ce6:	79fb      	ldrb	r3, [r7, #7]
 8004ce8:	2b07      	cmp	r3, #7
 8004cea:	d9ef      	bls.n	8004ccc <LoadCtrl_MainFunction+0x154>
	 * Relay control pins are set to output HIGH level Pull-up
	 * Triggering a relay adds 130 mA to the measurement, when it should add 0.65 mA.
	 * Assumption is that the relay NOCS cannot be measured due to the hardware setup.
	 * So a correction is required.
	 * Tested with 1.2 A load, 0.3 A load. */
	LoadCtrl_VoltValueToActualAmperage -= 0.13 * aux2;
 8004cec:	4b8c      	ldr	r3, [pc, #560]	@ (8004f20 <LoadCtrl_MainFunction+0x3a8>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7ff f991 	bl	8004018 <__aeabi_f2d>
 8004cf6:	4604      	mov	r4, r0
 8004cf8:	460d      	mov	r5, r1
 8004cfa:	4b88      	ldr	r3, [pc, #544]	@ (8004f1c <LoadCtrl_MainFunction+0x3a4>)
 8004cfc:	881b      	ldrh	r3, [r3, #0]
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f7ff f978 	bl	8003ff4 <__aeabi_i2d>
 8004d04:	a382      	add	r3, pc, #520	@ (adr r3, 8004f10 <LoadCtrl_MainFunction+0x398>)
 8004d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d0a:	f7ff f9dd 	bl	80040c8 <__aeabi_dmul>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	460b      	mov	r3, r1
 8004d12:	4620      	mov	r0, r4
 8004d14:	4629      	mov	r1, r5
 8004d16:	f7ff f81f 	bl	8003d58 <__aeabi_dsub>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	4610      	mov	r0, r2
 8004d20:	4619      	mov	r1, r3
 8004d22:	f7ff fbe3 	bl	80044ec <__aeabi_d2f>
 8004d26:	4603      	mov	r3, r0
 8004d28:	4a7d      	ldr	r2, [pc, #500]	@ (8004f20 <LoadCtrl_MainFunction+0x3a8>)
 8004d2a:	6013      	str	r3, [r2, #0]
	/* No fault detected. */
	if(0 == LoadCtrl_SwitchOffFlag)
 8004d2c:	4b7d      	ldr	r3, [pc, #500]	@ (8004f24 <LoadCtrl_MainFunction+0x3ac>)
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d13f      	bne.n	8004db4 <LoadCtrl_MainFunction+0x23c>
	{
		if(!DiagLoadCtrl_StatusList[0]) LoadCtrl_StatusList[0] = CanH_RxSig_CommandList1;
 8004d34:	4b7c      	ldr	r3, [pc, #496]	@ (8004f28 <LoadCtrl_MainFunction+0x3b0>)
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d103      	bne.n	8004d44 <LoadCtrl_MainFunction+0x1cc>
 8004d3c:	4b7b      	ldr	r3, [pc, #492]	@ (8004f2c <LoadCtrl_MainFunction+0x3b4>)
 8004d3e:	781a      	ldrb	r2, [r3, #0]
 8004d40:	4b75      	ldr	r3, [pc, #468]	@ (8004f18 <LoadCtrl_MainFunction+0x3a0>)
 8004d42:	701a      	strb	r2, [r3, #0]
		if(!DiagLoadCtrl_StatusList[1]) LoadCtrl_StatusList[1] = CanH_RxSig_CommandList2;
 8004d44:	4b78      	ldr	r3, [pc, #480]	@ (8004f28 <LoadCtrl_MainFunction+0x3b0>)
 8004d46:	785b      	ldrb	r3, [r3, #1]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d103      	bne.n	8004d54 <LoadCtrl_MainFunction+0x1dc>
 8004d4c:	4b78      	ldr	r3, [pc, #480]	@ (8004f30 <LoadCtrl_MainFunction+0x3b8>)
 8004d4e:	781a      	ldrb	r2, [r3, #0]
 8004d50:	4b71      	ldr	r3, [pc, #452]	@ (8004f18 <LoadCtrl_MainFunction+0x3a0>)
 8004d52:	705a      	strb	r2, [r3, #1]
		if(!DiagLoadCtrl_StatusList[2]) LoadCtrl_StatusList[2] = CanH_RxSig_CommandList3;
 8004d54:	4b74      	ldr	r3, [pc, #464]	@ (8004f28 <LoadCtrl_MainFunction+0x3b0>)
 8004d56:	789b      	ldrb	r3, [r3, #2]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d103      	bne.n	8004d64 <LoadCtrl_MainFunction+0x1ec>
 8004d5c:	4b75      	ldr	r3, [pc, #468]	@ (8004f34 <LoadCtrl_MainFunction+0x3bc>)
 8004d5e:	781a      	ldrb	r2, [r3, #0]
 8004d60:	4b6d      	ldr	r3, [pc, #436]	@ (8004f18 <LoadCtrl_MainFunction+0x3a0>)
 8004d62:	709a      	strb	r2, [r3, #2]
		if(!DiagLoadCtrl_StatusList[3]) LoadCtrl_StatusList[3] = CanH_RxSig_CommandList4;
 8004d64:	4b70      	ldr	r3, [pc, #448]	@ (8004f28 <LoadCtrl_MainFunction+0x3b0>)
 8004d66:	78db      	ldrb	r3, [r3, #3]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d103      	bne.n	8004d74 <LoadCtrl_MainFunction+0x1fc>
 8004d6c:	4b72      	ldr	r3, [pc, #456]	@ (8004f38 <LoadCtrl_MainFunction+0x3c0>)
 8004d6e:	781a      	ldrb	r2, [r3, #0]
 8004d70:	4b69      	ldr	r3, [pc, #420]	@ (8004f18 <LoadCtrl_MainFunction+0x3a0>)
 8004d72:	70da      	strb	r2, [r3, #3]
		if(!DiagLoadCtrl_StatusList[4]) LoadCtrl_StatusList[4] = CanH_RxSig_CommandList5;
 8004d74:	4b6c      	ldr	r3, [pc, #432]	@ (8004f28 <LoadCtrl_MainFunction+0x3b0>)
 8004d76:	791b      	ldrb	r3, [r3, #4]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d103      	bne.n	8004d84 <LoadCtrl_MainFunction+0x20c>
 8004d7c:	4b6f      	ldr	r3, [pc, #444]	@ (8004f3c <LoadCtrl_MainFunction+0x3c4>)
 8004d7e:	781a      	ldrb	r2, [r3, #0]
 8004d80:	4b65      	ldr	r3, [pc, #404]	@ (8004f18 <LoadCtrl_MainFunction+0x3a0>)
 8004d82:	711a      	strb	r2, [r3, #4]
		if(!DiagLoadCtrl_StatusList[5]) LoadCtrl_StatusList[5] = CanH_RxSig_CommandList6;
 8004d84:	4b68      	ldr	r3, [pc, #416]	@ (8004f28 <LoadCtrl_MainFunction+0x3b0>)
 8004d86:	795b      	ldrb	r3, [r3, #5]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d103      	bne.n	8004d94 <LoadCtrl_MainFunction+0x21c>
 8004d8c:	4b6c      	ldr	r3, [pc, #432]	@ (8004f40 <LoadCtrl_MainFunction+0x3c8>)
 8004d8e:	781a      	ldrb	r2, [r3, #0]
 8004d90:	4b61      	ldr	r3, [pc, #388]	@ (8004f18 <LoadCtrl_MainFunction+0x3a0>)
 8004d92:	715a      	strb	r2, [r3, #5]
		if(!DiagLoadCtrl_StatusList[6]) LoadCtrl_StatusList[6] = CanH_RxSig_CommandList7;
 8004d94:	4b64      	ldr	r3, [pc, #400]	@ (8004f28 <LoadCtrl_MainFunction+0x3b0>)
 8004d96:	799b      	ldrb	r3, [r3, #6]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d103      	bne.n	8004da4 <LoadCtrl_MainFunction+0x22c>
 8004d9c:	4b69      	ldr	r3, [pc, #420]	@ (8004f44 <LoadCtrl_MainFunction+0x3cc>)
 8004d9e:	781a      	ldrb	r2, [r3, #0]
 8004da0:	4b5d      	ldr	r3, [pc, #372]	@ (8004f18 <LoadCtrl_MainFunction+0x3a0>)
 8004da2:	719a      	strb	r2, [r3, #6]
		if(!DiagLoadCtrl_StatusList[7]) LoadCtrl_StatusList[7] = CanH_RxSig_CommandList8;
 8004da4:	4b60      	ldr	r3, [pc, #384]	@ (8004f28 <LoadCtrl_MainFunction+0x3b0>)
 8004da6:	79db      	ldrb	r3, [r3, #7]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d103      	bne.n	8004db4 <LoadCtrl_MainFunction+0x23c>
 8004dac:	4b66      	ldr	r3, [pc, #408]	@ (8004f48 <LoadCtrl_MainFunction+0x3d0>)
 8004dae:	781a      	ldrb	r2, [r3, #0]
 8004db0:	4b59      	ldr	r3, [pc, #356]	@ (8004f18 <LoadCtrl_MainFunction+0x3a0>)
 8004db2:	71da      	strb	r2, [r3, #7]
	else
	{
		/* Do nothing. */
	}
	/* 10 milliseconds de-bounce before checks. */
	if(2 <= LoadCtrl_MainCounter)
 8004db4:	4b65      	ldr	r3, [pc, #404]	@ (8004f4c <LoadCtrl_MainFunction+0x3d4>)
 8004db6:	881b      	ldrh	r3, [r3, #0]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	f240 8595 	bls.w	80058e8 <LoadCtrl_MainFunction+0xd70>
	{
		/* Send on CAN measured values.*/
		CanH_TxSig_TotalCurrentConsumption = LoadCtrl_VoltValueToActualAmperage;
 8004dbe:	4b58      	ldr	r3, [pc, #352]	@ (8004f20 <LoadCtrl_MainFunction+0x3a8>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7ff feb6 	bl	8004b34 <__aeabi_f2uiz>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	b2da      	uxtb	r2, r3
 8004dcc:	4b60      	ldr	r3, [pc, #384]	@ (8004f50 <LoadCtrl_MainFunction+0x3d8>)
 8004dce:	701a      	strb	r2, [r3, #0]
		CanH_TxSig_TotalCurrentConsumption2 = ((uint8)LoadCtrl_VoltValueToActualAmperage * 100) % 100;
 8004dd0:	4b60      	ldr	r3, [pc, #384]	@ (8004f54 <LoadCtrl_MainFunction+0x3dc>)
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	701a      	strb	r2, [r3, #0]
		CanH_TxSig_SupplyVoltage = LoadCtrl_AdcVoltToActualVolt * 10;
 8004dd6:	4b60      	ldr	r3, [pc, #384]	@ (8004f58 <LoadCtrl_MainFunction+0x3e0>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4960      	ldr	r1, [pc, #384]	@ (8004f5c <LoadCtrl_MainFunction+0x3e4>)
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f7ff fce3 	bl	80047a8 <__aeabi_fmul>
 8004de2:	4603      	mov	r3, r0
 8004de4:	4618      	mov	r0, r3
 8004de6:	f7ff fea5 	bl	8004b34 <__aeabi_f2uiz>
 8004dea:	4603      	mov	r3, r0
 8004dec:	b2da      	uxtb	r2, r3
 8004dee:	4b5c      	ldr	r3, [pc, #368]	@ (8004f60 <LoadCtrl_MainFunction+0x3e8>)
 8004df0:	701a      	strb	r2, [r3, #0]
		/* If current consumption is below nominal. */
		if(Param_NominalCurrentRating >= LoadCtrl_VoltValueToActualAmperage)
 8004df2:	4b5c      	ldr	r3, [pc, #368]	@ (8004f64 <LoadCtrl_MainFunction+0x3ec>)
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7ff fc82 	bl	8004700 <__aeabi_i2f>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	4b48      	ldr	r3, [pc, #288]	@ (8004f20 <LoadCtrl_MainFunction+0x3a8>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4619      	mov	r1, r3
 8004e04:	4610      	mov	r0, r2
 8004e06:	f7ff fe81 	bl	8004b0c <__aeabi_fcmpge>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f000 815b 	beq.w	80050c8 <LoadCtrl_MainFunction+0x550>
		{
			/* Simulate cable cooling off. */
			if(LoadCtrl_I2tCounter >= Param_NominalCurrentRating * Param_NominalCurrentRating * 5) LoadCtrl_I2tCounter -=  Param_NominalCurrentRating * Param_NominalCurrentRating * 5;
 8004e12:	4b54      	ldr	r3, [pc, #336]	@ (8004f64 <LoadCtrl_MainFunction+0x3ec>)
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	461a      	mov	r2, r3
 8004e18:	4b52      	ldr	r3, [pc, #328]	@ (8004f64 <LoadCtrl_MainFunction+0x3ec>)
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	fb03 f202 	mul.w	r2, r3, r2
 8004e20:	4613      	mov	r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	4413      	add	r3, r2
 8004e26:	461a      	mov	r2, r3
 8004e28:	4b4f      	ldr	r3, [pc, #316]	@ (8004f68 <LoadCtrl_MainFunction+0x3f0>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d80f      	bhi.n	8004e50 <LoadCtrl_MainFunction+0x2d8>
 8004e30:	4b4d      	ldr	r3, [pc, #308]	@ (8004f68 <LoadCtrl_MainFunction+0x3f0>)
 8004e32:	6819      	ldr	r1, [r3, #0]
 8004e34:	4b4b      	ldr	r3, [pc, #300]	@ (8004f64 <LoadCtrl_MainFunction+0x3ec>)
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	461a      	mov	r2, r3
 8004e3a:	4b4a      	ldr	r3, [pc, #296]	@ (8004f64 <LoadCtrl_MainFunction+0x3ec>)
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	fb03 f202 	mul.w	r2, r3, r2
 8004e42:	4613      	mov	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	4413      	add	r3, r2
 8004e48:	1acb      	subs	r3, r1, r3
 8004e4a:	4a47      	ldr	r2, [pc, #284]	@ (8004f68 <LoadCtrl_MainFunction+0x3f0>)
 8004e4c:	6013      	str	r3, [r2, #0]
 8004e4e:	e1a8      	b.n	80051a2 <LoadCtrl_MainFunction+0x62a>
			else
			{
				/* If not in under-voltage. */
				if(Param_MinVoltageValue <= LoadCtrl_AdcVoltToActualVolt)
 8004e50:	4b46      	ldr	r3, [pc, #280]	@ (8004f6c <LoadCtrl_MainFunction+0x3f4>)
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7ff fc53 	bl	8004700 <__aeabi_i2f>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	4b3e      	ldr	r3, [pc, #248]	@ (8004f58 <LoadCtrl_MainFunction+0x3e0>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4619      	mov	r1, r3
 8004e62:	4610      	mov	r0, r2
 8004e64:	f7ff fe48 	bl	8004af8 <__aeabi_fcmple>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	f000 8106 	beq.w	800507c <LoadCtrl_MainFunction+0x504>
				{
					/* Set the DTC accordingly. */
					if(1 == LoadCtrl_Rin1Counter && 0 == LoadCtrl_Rin2Counter)
 8004e70:	4b3f      	ldr	r3, [pc, #252]	@ (8004f70 <LoadCtrl_MainFunction+0x3f8>)
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d10f      	bne.n	8004e98 <LoadCtrl_MainFunction+0x320>
 8004e78:	4b3e      	ldr	r3, [pc, #248]	@ (8004f74 <LoadCtrl_MainFunction+0x3fc>)
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10b      	bne.n	8004e98 <LoadCtrl_MainFunction+0x320>
					{
						LoadCtrl_PermanentSwitchOff_Rin1++;
 8004e80:	4b3d      	ldr	r3, [pc, #244]	@ (8004f78 <LoadCtrl_MainFunction+0x400>)
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	3301      	adds	r3, #1
 8004e86:	b2da      	uxtb	r2, r3
 8004e88:	4b3b      	ldr	r3, [pc, #236]	@ (8004f78 <LoadCtrl_MainFunction+0x400>)
 8004e8a:	701a      	strb	r2, [r3, #0]
						Dem_SetDtc(0, 1, 1);
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	2101      	movs	r1, #1
 8004e90:	2000      	movs	r0, #0
 8004e92:	f001 fddf 	bl	8006a54 <Dem_SetDtc>
 8004e96:	e0f1      	b.n	800507c <LoadCtrl_MainFunction+0x504>
					}
					else if(1 == LoadCtrl_Rin2Counter && 0 == LoadCtrl_Rin3Counter)
 8004e98:	4b36      	ldr	r3, [pc, #216]	@ (8004f74 <LoadCtrl_MainFunction+0x3fc>)
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d10f      	bne.n	8004ec0 <LoadCtrl_MainFunction+0x348>
 8004ea0:	4b36      	ldr	r3, [pc, #216]	@ (8004f7c <LoadCtrl_MainFunction+0x404>)
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d10b      	bne.n	8004ec0 <LoadCtrl_MainFunction+0x348>
					{
						LoadCtrl_PermanentSwitchOff_Rin2++;
 8004ea8:	4b35      	ldr	r3, [pc, #212]	@ (8004f80 <LoadCtrl_MainFunction+0x408>)
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	3301      	adds	r3, #1
 8004eae:	b2da      	uxtb	r2, r3
 8004eb0:	4b33      	ldr	r3, [pc, #204]	@ (8004f80 <LoadCtrl_MainFunction+0x408>)
 8004eb2:	701a      	strb	r2, [r3, #0]
						Dem_SetDtc(1, 1, 1);
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	2101      	movs	r1, #1
 8004eb8:	2001      	movs	r0, #1
 8004eba:	f001 fdcb 	bl	8006a54 <Dem_SetDtc>
 8004ebe:	e0dd      	b.n	800507c <LoadCtrl_MainFunction+0x504>
					}
					else if(1 == LoadCtrl_Rin3Counter  && 0 == LoadCtrl_Rin4Counter)
 8004ec0:	4b2e      	ldr	r3, [pc, #184]	@ (8004f7c <LoadCtrl_MainFunction+0x404>)
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d10f      	bne.n	8004ee8 <LoadCtrl_MainFunction+0x370>
 8004ec8:	4b2e      	ldr	r3, [pc, #184]	@ (8004f84 <LoadCtrl_MainFunction+0x40c>)
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d10b      	bne.n	8004ee8 <LoadCtrl_MainFunction+0x370>
					{
						LoadCtrl_PermanentSwitchOff_Rin3++;
 8004ed0:	4b2d      	ldr	r3, [pc, #180]	@ (8004f88 <LoadCtrl_MainFunction+0x410>)
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	b2da      	uxtb	r2, r3
 8004ed8:	4b2b      	ldr	r3, [pc, #172]	@ (8004f88 <LoadCtrl_MainFunction+0x410>)
 8004eda:	701a      	strb	r2, [r3, #0]
						Dem_SetDtc(2, 1, 1);
 8004edc:	2201      	movs	r2, #1
 8004ede:	2101      	movs	r1, #1
 8004ee0:	2002      	movs	r0, #2
 8004ee2:	f001 fdb7 	bl	8006a54 <Dem_SetDtc>
 8004ee6:	e0c9      	b.n	800507c <LoadCtrl_MainFunction+0x504>
					}
					else if(1 == LoadCtrl_Rin4Counter && 0 == LoadCtrl_Rin5Counter)
 8004ee8:	4b26      	ldr	r3, [pc, #152]	@ (8004f84 <LoadCtrl_MainFunction+0x40c>)
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d151      	bne.n	8004f94 <LoadCtrl_MainFunction+0x41c>
 8004ef0:	4b26      	ldr	r3, [pc, #152]	@ (8004f8c <LoadCtrl_MainFunction+0x414>)
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d14d      	bne.n	8004f94 <LoadCtrl_MainFunction+0x41c>
					{
						LoadCtrl_PermanentSwitchOff_Rin4++;
 8004ef8:	4b25      	ldr	r3, [pc, #148]	@ (8004f90 <LoadCtrl_MainFunction+0x418>)
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	3301      	adds	r3, #1
 8004efe:	b2da      	uxtb	r2, r3
 8004f00:	4b23      	ldr	r3, [pc, #140]	@ (8004f90 <LoadCtrl_MainFunction+0x418>)
 8004f02:	701a      	strb	r2, [r3, #0]
						Dem_SetDtc(3, 1, 1);
 8004f04:	2201      	movs	r2, #1
 8004f06:	2101      	movs	r1, #1
 8004f08:	2003      	movs	r0, #3
 8004f0a:	f001 fda3 	bl	8006a54 <Dem_SetDtc>
 8004f0e:	e0b5      	b.n	800507c <LoadCtrl_MainFunction+0x504>
 8004f10:	0a3d70a4 	.word	0x0a3d70a4
 8004f14:	3fc0a3d7 	.word	0x3fc0a3d7
 8004f18:	200000ac 	.word	0x200000ac
 8004f1c:	200000d8 	.word	0x200000d8
 8004f20:	2000009c 	.word	0x2000009c
 8004f24:	20004c04 	.word	0x20004c04
 8004f28:	200000b4 	.word	0x200000b4
 8004f2c:	20000000 	.word	0x20000000
 8004f30:	20000001 	.word	0x20000001
 8004f34:	20000002 	.word	0x20000002
 8004f38:	20000003 	.word	0x20000003
 8004f3c:	20000004 	.word	0x20000004
 8004f40:	20000005 	.word	0x20000005
 8004f44:	20000006 	.word	0x20000006
 8004f48:	20000007 	.word	0x20000007
 8004f4c:	200000a4 	.word	0x200000a4
 8004f50:	200000c5 	.word	0x200000c5
 8004f54:	200000c6 	.word	0x200000c6
 8004f58:	200000a0 	.word	0x200000a0
 8004f5c:	41200000 	.word	0x41200000
 8004f60:	200000c4 	.word	0x200000c4
 8004f64:	200000ca 	.word	0x200000ca
 8004f68:	20004c00 	.word	0x20004c00
 8004f6c:	200000c9 	.word	0x200000c9
 8004f70:	20004c0d 	.word	0x20004c0d
 8004f74:	20004c0e 	.word	0x20004c0e
 8004f78:	20004c05 	.word	0x20004c05
 8004f7c:	20004c0f 	.word	0x20004c0f
 8004f80:	20004c06 	.word	0x20004c06
 8004f84:	20004c10 	.word	0x20004c10
 8004f88:	20004c07 	.word	0x20004c07
 8004f8c:	20004c11 	.word	0x20004c11
 8004f90:	20004c08 	.word	0x20004c08
					}
					else if(1 == LoadCtrl_Rin5Counter && 0 == LoadCtrl_Rin6Counter)
 8004f94:	4ba9      	ldr	r3, [pc, #676]	@ (800523c <LoadCtrl_MainFunction+0x6c4>)
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d10f      	bne.n	8004fbc <LoadCtrl_MainFunction+0x444>
 8004f9c:	4ba8      	ldr	r3, [pc, #672]	@ (8005240 <LoadCtrl_MainFunction+0x6c8>)
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d10b      	bne.n	8004fbc <LoadCtrl_MainFunction+0x444>
					{
						LoadCtrl_PermanentSwitchOff_Rin5++;
 8004fa4:	4ba7      	ldr	r3, [pc, #668]	@ (8005244 <LoadCtrl_MainFunction+0x6cc>)
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	b2da      	uxtb	r2, r3
 8004fac:	4ba5      	ldr	r3, [pc, #660]	@ (8005244 <LoadCtrl_MainFunction+0x6cc>)
 8004fae:	701a      	strb	r2, [r3, #0]
						Dem_SetDtc(4, 1, 1);
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	2101      	movs	r1, #1
 8004fb4:	2004      	movs	r0, #4
 8004fb6:	f001 fd4d 	bl	8006a54 <Dem_SetDtc>
 8004fba:	e05f      	b.n	800507c <LoadCtrl_MainFunction+0x504>
					}
					else if(1 == LoadCtrl_Rin6Counter && 0 == LoadCtrl_Rin7Counter)
 8004fbc:	4ba0      	ldr	r3, [pc, #640]	@ (8005240 <LoadCtrl_MainFunction+0x6c8>)
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d10f      	bne.n	8004fe4 <LoadCtrl_MainFunction+0x46c>
 8004fc4:	4ba0      	ldr	r3, [pc, #640]	@ (8005248 <LoadCtrl_MainFunction+0x6d0>)
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d10b      	bne.n	8004fe4 <LoadCtrl_MainFunction+0x46c>
					{
						LoadCtrl_PermanentSwitchOff_Rin6++;
 8004fcc:	4b9f      	ldr	r3, [pc, #636]	@ (800524c <LoadCtrl_MainFunction+0x6d4>)
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	b2da      	uxtb	r2, r3
 8004fd4:	4b9d      	ldr	r3, [pc, #628]	@ (800524c <LoadCtrl_MainFunction+0x6d4>)
 8004fd6:	701a      	strb	r2, [r3, #0]
						Dem_SetDtc(5, 1, 1);
 8004fd8:	2201      	movs	r2, #1
 8004fda:	2101      	movs	r1, #1
 8004fdc:	2005      	movs	r0, #5
 8004fde:	f001 fd39 	bl	8006a54 <Dem_SetDtc>
 8004fe2:	e04b      	b.n	800507c <LoadCtrl_MainFunction+0x504>
					}
					else if(1 == LoadCtrl_Rin7Counter && 0 == LoadCtrl_Rin8Counter)
 8004fe4:	4b98      	ldr	r3, [pc, #608]	@ (8005248 <LoadCtrl_MainFunction+0x6d0>)
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d10f      	bne.n	800500c <LoadCtrl_MainFunction+0x494>
 8004fec:	4b98      	ldr	r3, [pc, #608]	@ (8005250 <LoadCtrl_MainFunction+0x6d8>)
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d10b      	bne.n	800500c <LoadCtrl_MainFunction+0x494>
					{
						LoadCtrl_PermanentSwitchOff_Rin7++;
 8004ff4:	4b97      	ldr	r3, [pc, #604]	@ (8005254 <LoadCtrl_MainFunction+0x6dc>)
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	b2da      	uxtb	r2, r3
 8004ffc:	4b95      	ldr	r3, [pc, #596]	@ (8005254 <LoadCtrl_MainFunction+0x6dc>)
 8004ffe:	701a      	strb	r2, [r3, #0]
						Dem_SetDtc(6, 1, 1);
 8005000:	2201      	movs	r2, #1
 8005002:	2101      	movs	r1, #1
 8005004:	2006      	movs	r0, #6
 8005006:	f001 fd25 	bl	8006a54 <Dem_SetDtc>
 800500a:	e037      	b.n	800507c <LoadCtrl_MainFunction+0x504>
					}
					else if(1 == LoadCtrl_Rin8Counter)
 800500c:	4b90      	ldr	r3, [pc, #576]	@ (8005250 <LoadCtrl_MainFunction+0x6d8>)
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d10b      	bne.n	800502c <LoadCtrl_MainFunction+0x4b4>
					{
						LoadCtrl_PermanentSwitchOff_Rin8++;
 8005014:	4b90      	ldr	r3, [pc, #576]	@ (8005258 <LoadCtrl_MainFunction+0x6e0>)
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	3301      	adds	r3, #1
 800501a:	b2da      	uxtb	r2, r3
 800501c:	4b8e      	ldr	r3, [pc, #568]	@ (8005258 <LoadCtrl_MainFunction+0x6e0>)
 800501e:	701a      	strb	r2, [r3, #0]
						Dem_SetDtc(7, 1, 1);
 8005020:	2201      	movs	r2, #1
 8005022:	2101      	movs	r1, #1
 8005024:	2007      	movs	r0, #7
 8005026:	f001 fd15 	bl	8006a54 <Dem_SetDtc>
 800502a:	e027      	b.n	800507c <LoadCtrl_MainFunction+0x504>
					}
					else
					{
						Dem_SetDtc(0, 1, 0);
 800502c:	2200      	movs	r2, #0
 800502e:	2101      	movs	r1, #1
 8005030:	2000      	movs	r0, #0
 8005032:	f001 fd0f 	bl	8006a54 <Dem_SetDtc>
						Dem_SetDtc(1, 1, 0);
 8005036:	2200      	movs	r2, #0
 8005038:	2101      	movs	r1, #1
 800503a:	2001      	movs	r0, #1
 800503c:	f001 fd0a 	bl	8006a54 <Dem_SetDtc>
						Dem_SetDtc(2, 1, 0);
 8005040:	2200      	movs	r2, #0
 8005042:	2101      	movs	r1, #1
 8005044:	2002      	movs	r0, #2
 8005046:	f001 fd05 	bl	8006a54 <Dem_SetDtc>
						Dem_SetDtc(3, 1, 0);
 800504a:	2200      	movs	r2, #0
 800504c:	2101      	movs	r1, #1
 800504e:	2003      	movs	r0, #3
 8005050:	f001 fd00 	bl	8006a54 <Dem_SetDtc>
						Dem_SetDtc(4, 1, 0);
 8005054:	2200      	movs	r2, #0
 8005056:	2101      	movs	r1, #1
 8005058:	2004      	movs	r0, #4
 800505a:	f001 fcfb 	bl	8006a54 <Dem_SetDtc>
						Dem_SetDtc(5, 1, 0);
 800505e:	2200      	movs	r2, #0
 8005060:	2101      	movs	r1, #1
 8005062:	2005      	movs	r0, #5
 8005064:	f001 fcf6 	bl	8006a54 <Dem_SetDtc>
						Dem_SetDtc(6, 1, 0);
 8005068:	2200      	movs	r2, #0
 800506a:	2101      	movs	r1, #1
 800506c:	2006      	movs	r0, #6
 800506e:	f001 fcf1 	bl	8006a54 <Dem_SetDtc>
						Dem_SetDtc(7, 1, 0);
 8005072:	2200      	movs	r2, #0
 8005074:	2101      	movs	r1, #1
 8005076:	2007      	movs	r0, #7
 8005078:	f001 fcec 	bl	8006a54 <Dem_SetDtc>
				else
				{
					/* Do nothing. */
				}
				/* Reset variables. */
				CanH_TxSig_PowerSupplyNetworkWarning &= ~(1 << 0);
 800507c:	4b77      	ldr	r3, [pc, #476]	@ (800525c <LoadCtrl_MainFunction+0x6e4>)
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	f023 0301 	bic.w	r3, r3, #1
 8005084:	b2da      	uxtb	r2, r3
 8005086:	4b75      	ldr	r3, [pc, #468]	@ (800525c <LoadCtrl_MainFunction+0x6e4>)
 8005088:	701a      	strb	r2, [r3, #0]
				LoadCtrl_I2tCounter = 0;
 800508a:	4b75      	ldr	r3, [pc, #468]	@ (8005260 <LoadCtrl_MainFunction+0x6e8>)
 800508c:	2200      	movs	r2, #0
 800508e:	601a      	str	r2, [r3, #0]
				LoadCtrl_Rin1Counter = 0;
 8005090:	4b74      	ldr	r3, [pc, #464]	@ (8005264 <LoadCtrl_MainFunction+0x6ec>)
 8005092:	2200      	movs	r2, #0
 8005094:	701a      	strb	r2, [r3, #0]
				LoadCtrl_Rin2Counter = 0;
 8005096:	4b74      	ldr	r3, [pc, #464]	@ (8005268 <LoadCtrl_MainFunction+0x6f0>)
 8005098:	2200      	movs	r2, #0
 800509a:	701a      	strb	r2, [r3, #0]
				LoadCtrl_Rin3Counter = 0;
 800509c:	4b73      	ldr	r3, [pc, #460]	@ (800526c <LoadCtrl_MainFunction+0x6f4>)
 800509e:	2200      	movs	r2, #0
 80050a0:	701a      	strb	r2, [r3, #0]
				LoadCtrl_Rin4Counter = 0;
 80050a2:	4b73      	ldr	r3, [pc, #460]	@ (8005270 <LoadCtrl_MainFunction+0x6f8>)
 80050a4:	2200      	movs	r2, #0
 80050a6:	701a      	strb	r2, [r3, #0]
				LoadCtrl_Rin5Counter = 0;
 80050a8:	4b64      	ldr	r3, [pc, #400]	@ (800523c <LoadCtrl_MainFunction+0x6c4>)
 80050aa:	2200      	movs	r2, #0
 80050ac:	701a      	strb	r2, [r3, #0]
				LoadCtrl_Rin6Counter = 0;
 80050ae:	4b64      	ldr	r3, [pc, #400]	@ (8005240 <LoadCtrl_MainFunction+0x6c8>)
 80050b0:	2200      	movs	r2, #0
 80050b2:	701a      	strb	r2, [r3, #0]
				LoadCtrl_Rin7Counter = 0;
 80050b4:	4b64      	ldr	r3, [pc, #400]	@ (8005248 <LoadCtrl_MainFunction+0x6d0>)
 80050b6:	2200      	movs	r2, #0
 80050b8:	701a      	strb	r2, [r3, #0]
				LoadCtrl_Rin8Counter = 0;
 80050ba:	4b65      	ldr	r3, [pc, #404]	@ (8005250 <LoadCtrl_MainFunction+0x6d8>)
 80050bc:	2200      	movs	r2, #0
 80050be:	701a      	strb	r2, [r3, #0]
				LoadCtrl_SwitchOffFlag = 0;
 80050c0:	4b6c      	ldr	r3, [pc, #432]	@ (8005274 <LoadCtrl_MainFunction+0x6fc>)
 80050c2:	2200      	movs	r2, #0
 80050c4:	701a      	strb	r2, [r3, #0]
 80050c6:	e06c      	b.n	80051a2 <LoadCtrl_MainFunction+0x62a>
			}
		}
		else if(Param_NominalCurrentRating < LoadCtrl_VoltValueToActualAmperage &&
 80050c8:	4b6b      	ldr	r3, [pc, #428]	@ (8005278 <LoadCtrl_MainFunction+0x700>)
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	4618      	mov	r0, r3
 80050ce:	f7ff fb17 	bl	8004700 <__aeabi_i2f>
 80050d2:	4602      	mov	r2, r0
 80050d4:	4b69      	ldr	r3, [pc, #420]	@ (800527c <LoadCtrl_MainFunction+0x704>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4619      	mov	r1, r3
 80050da:	4610      	mov	r0, r2
 80050dc:	f7ff fd02 	bl	8004ae4 <__aeabi_fcmplt>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d044      	beq.n	8005170 <LoadCtrl_MainFunction+0x5f8>
				Param_MaximumCurrentRating >= LoadCtrl_VoltValueToActualAmperage)
 80050e6:	4b66      	ldr	r3, [pc, #408]	@ (8005280 <LoadCtrl_MainFunction+0x708>)
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	4618      	mov	r0, r3
 80050ec:	f7ff fb08 	bl	8004700 <__aeabi_i2f>
 80050f0:	4602      	mov	r2, r0
 80050f2:	4b62      	ldr	r3, [pc, #392]	@ (800527c <LoadCtrl_MainFunction+0x704>)
 80050f4:	681b      	ldr	r3, [r3, #0]
		else if(Param_NominalCurrentRating < LoadCtrl_VoltValueToActualAmperage &&
 80050f6:	4619      	mov	r1, r3
 80050f8:	4610      	mov	r0, r2
 80050fa:	f7ff fd07 	bl	8004b0c <__aeabi_fcmpge>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d035      	beq.n	8005170 <LoadCtrl_MainFunction+0x5f8>
		{
			/* Update status on CAN. */
			CanH_TxSig_PowerSupplyNetworkWarning |= (1 << 0);
 8005104:	4b55      	ldr	r3, [pc, #340]	@ (800525c <LoadCtrl_MainFunction+0x6e4>)
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	f043 0301 	orr.w	r3, r3, #1
 800510c:	b2da      	uxtb	r2, r3
 800510e:	4b53      	ldr	r3, [pc, #332]	@ (800525c <LoadCtrl_MainFunction+0x6e4>)
 8005110:	701a      	strb	r2, [r3, #0]
			/* Accumulate I2T. */
			LoadCtrl_I2tCounter += LoadCtrl_VoltValueToActualAmperage * LoadCtrl_VoltValueToActualAmperage * 5;
 8005112:	4b53      	ldr	r3, [pc, #332]	@ (8005260 <LoadCtrl_MainFunction+0x6e8>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4618      	mov	r0, r3
 8005118:	f7ff faee 	bl	80046f8 <__aeabi_ui2f>
 800511c:	4604      	mov	r4, r0
 800511e:	4b57      	ldr	r3, [pc, #348]	@ (800527c <LoadCtrl_MainFunction+0x704>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a56      	ldr	r2, [pc, #344]	@ (800527c <LoadCtrl_MainFunction+0x704>)
 8005124:	6812      	ldr	r2, [r2, #0]
 8005126:	4611      	mov	r1, r2
 8005128:	4618      	mov	r0, r3
 800512a:	f7ff fb3d 	bl	80047a8 <__aeabi_fmul>
 800512e:	4603      	mov	r3, r0
 8005130:	4954      	ldr	r1, [pc, #336]	@ (8005284 <LoadCtrl_MainFunction+0x70c>)
 8005132:	4618      	mov	r0, r3
 8005134:	f7ff fb38 	bl	80047a8 <__aeabi_fmul>
 8005138:	4603      	mov	r3, r0
 800513a:	4619      	mov	r1, r3
 800513c:	4620      	mov	r0, r4
 800513e:	f7ff fa2b 	bl	8004598 <__addsf3>
 8005142:	4603      	mov	r3, r0
 8005144:	4618      	mov	r0, r3
 8005146:	f7ff fcf5 	bl	8004b34 <__aeabi_f2uiz>
 800514a:	4603      	mov	r3, r0
 800514c:	4a44      	ldr	r2, [pc, #272]	@ (8005260 <LoadCtrl_MainFunction+0x6e8>)
 800514e:	6013      	str	r3, [r2, #0]
			/* Set flag to start switching off loads. */
			if(Param_I2tRating * 1000 <= LoadCtrl_I2tCounter) LoadCtrl_SwitchOffFlag = 1;
 8005150:	4b4d      	ldr	r3, [pc, #308]	@ (8005288 <LoadCtrl_MainFunction+0x710>)
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	461a      	mov	r2, r3
 8005156:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800515a:	fb02 f303 	mul.w	r3, r2, r3
 800515e:	461a      	mov	r2, r3
 8005160:	4b3f      	ldr	r3, [pc, #252]	@ (8005260 <LoadCtrl_MainFunction+0x6e8>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	429a      	cmp	r2, r3
 8005166:	d81c      	bhi.n	80051a2 <LoadCtrl_MainFunction+0x62a>
 8005168:	4b42      	ldr	r3, [pc, #264]	@ (8005274 <LoadCtrl_MainFunction+0x6fc>)
 800516a:	2201      	movs	r2, #1
 800516c:	701a      	strb	r2, [r3, #0]
 800516e:	e018      	b.n	80051a2 <LoadCtrl_MainFunction+0x62a>
		}
		else if(Param_MaximumCurrentRating < LoadCtrl_VoltValueToActualAmperage)
 8005170:	4b43      	ldr	r3, [pc, #268]	@ (8005280 <LoadCtrl_MainFunction+0x708>)
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	4618      	mov	r0, r3
 8005176:	f7ff fac3 	bl	8004700 <__aeabi_i2f>
 800517a:	4602      	mov	r2, r0
 800517c:	4b3f      	ldr	r3, [pc, #252]	@ (800527c <LoadCtrl_MainFunction+0x704>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4619      	mov	r1, r3
 8005182:	4610      	mov	r0, r2
 8005184:	f7ff fcae 	bl	8004ae4 <__aeabi_fcmplt>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d009      	beq.n	80051a2 <LoadCtrl_MainFunction+0x62a>
		{
			/* Update status on CAN. */
			CanH_TxSig_PowerSupplyNetworkWarning |= (1 << 0);
 800518e:	4b33      	ldr	r3, [pc, #204]	@ (800525c <LoadCtrl_MainFunction+0x6e4>)
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	f043 0301 	orr.w	r3, r3, #1
 8005196:	b2da      	uxtb	r2, r3
 8005198:	4b30      	ldr	r3, [pc, #192]	@ (800525c <LoadCtrl_MainFunction+0x6e4>)
 800519a:	701a      	strb	r2, [r3, #0]
			/* Set flag to start switching off loads. */
			LoadCtrl_SwitchOffFlag = 1;
 800519c:	4b35      	ldr	r3, [pc, #212]	@ (8005274 <LoadCtrl_MainFunction+0x6fc>)
 800519e:	2201      	movs	r2, #1
 80051a0:	701a      	strb	r2, [r3, #0]
		else
		{
			/* Do nothing. */
		}
		/* If in under-voltage, switch off all the loads except for the first two (CBM and DEC) (<2v5). */
		if(Param_MinVoltageValue > LoadCtrl_AdcVoltToActualVolt)
 80051a2:	4b3a      	ldr	r3, [pc, #232]	@ (800528c <LoadCtrl_MainFunction+0x714>)
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7ff faaa 	bl	8004700 <__aeabi_i2f>
 80051ac:	4602      	mov	r2, r0
 80051ae:	4b38      	ldr	r3, [pc, #224]	@ (8005290 <LoadCtrl_MainFunction+0x718>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4619      	mov	r1, r3
 80051b4:	4610      	mov	r0, r2
 80051b6:	f7ff fcb3 	bl	8004b20 <__aeabi_fcmpgt>
 80051ba:	4603      	mov	r3, r0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d06f      	beq.n	80052a0 <LoadCtrl_MainFunction+0x728>
		{
			CanH_TxSig_PowerSupplyNetworkWarning |= (1 << 1);
 80051c0:	4b26      	ldr	r3, [pc, #152]	@ (800525c <LoadCtrl_MainFunction+0x6e4>)
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	f043 0302 	orr.w	r3, r3, #2
 80051c8:	b2da      	uxtb	r2, r3
 80051ca:	4b24      	ldr	r3, [pc, #144]	@ (800525c <LoadCtrl_MainFunction+0x6e4>)
 80051cc:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(RIN3_GPIO_Port, RIN3_Pin, 0);
 80051ce:	2200      	movs	r2, #0
 80051d0:	2140      	movs	r1, #64	@ 0x40
 80051d2:	4830      	ldr	r0, [pc, #192]	@ (8005294 <LoadCtrl_MainFunction+0x71c>)
 80051d4:	f005 fbf3 	bl	800a9be <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RIN4_GPIO_Port, RIN4_Pin, 0);
 80051d8:	2200      	movs	r2, #0
 80051da:	2180      	movs	r1, #128	@ 0x80
 80051dc:	482d      	ldr	r0, [pc, #180]	@ (8005294 <LoadCtrl_MainFunction+0x71c>)
 80051de:	f005 fbee 	bl	800a9be <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RIN5_GPIO_Port, RIN5_Pin, 0);
 80051e2:	2200      	movs	r2, #0
 80051e4:	2101      	movs	r1, #1
 80051e6:	482c      	ldr	r0, [pc, #176]	@ (8005298 <LoadCtrl_MainFunction+0x720>)
 80051e8:	f005 fbe9 	bl	800a9be <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RIN6_GPIO_Port, RIN6_Pin, 0);
 80051ec:	2200      	movs	r2, #0
 80051ee:	2102      	movs	r1, #2
 80051f0:	4829      	ldr	r0, [pc, #164]	@ (8005298 <LoadCtrl_MainFunction+0x720>)
 80051f2:	f005 fbe4 	bl	800a9be <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RIN7_GPIO_Port, RIN7_Pin, 0);
 80051f6:	2200      	movs	r2, #0
 80051f8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80051fc:	4826      	ldr	r0, [pc, #152]	@ (8005298 <LoadCtrl_MainFunction+0x720>)
 80051fe:	f005 fbde 	bl	800a9be <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RIN8_GPIO_Port, RIN8_Pin, 0);
 8005202:	2200      	movs	r2, #0
 8005204:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005208:	4823      	ldr	r0, [pc, #140]	@ (8005298 <LoadCtrl_MainFunction+0x720>)
 800520a:	f005 fbd8 	bl	800a9be <HAL_GPIO_WritePin>
			LoadCtrl_SwitchOffFlag = 2;
 800520e:	4b19      	ldr	r3, [pc, #100]	@ (8005274 <LoadCtrl_MainFunction+0x6fc>)
 8005210:	2202      	movs	r2, #2
 8005212:	701a      	strb	r2, [r3, #0]
			for(uint8 i = 2; i < 8; i++) LoadCtrl_StatusList[i] = 0;
 8005214:	2302      	movs	r3, #2
 8005216:	71bb      	strb	r3, [r7, #6]
 8005218:	e006      	b.n	8005228 <LoadCtrl_MainFunction+0x6b0>
 800521a:	79bb      	ldrb	r3, [r7, #6]
 800521c:	4a1f      	ldr	r2, [pc, #124]	@ (800529c <LoadCtrl_MainFunction+0x724>)
 800521e:	2100      	movs	r1, #0
 8005220:	54d1      	strb	r1, [r2, r3]
 8005222:	79bb      	ldrb	r3, [r7, #6]
 8005224:	3301      	adds	r3, #1
 8005226:	71bb      	strb	r3, [r7, #6]
 8005228:	79bb      	ldrb	r3, [r7, #6]
 800522a:	2b07      	cmp	r3, #7
 800522c:	d9f5      	bls.n	800521a <LoadCtrl_MainFunction+0x6a2>
			Dem_SetDtc(8, 1, 1);
 800522e:	2201      	movs	r2, #1
 8005230:	2101      	movs	r1, #1
 8005232:	2008      	movs	r0, #8
 8005234:	f001 fc0e 	bl	8006a54 <Dem_SetDtc>
 8005238:	e03e      	b.n	80052b8 <LoadCtrl_MainFunction+0x740>
 800523a:	bf00      	nop
 800523c:	20004c11 	.word	0x20004c11
 8005240:	20004c12 	.word	0x20004c12
 8005244:	20004c09 	.word	0x20004c09
 8005248:	20004c13 	.word	0x20004c13
 800524c:	20004c0a 	.word	0x20004c0a
 8005250:	20004c14 	.word	0x20004c14
 8005254:	20004c0b 	.word	0x20004c0b
 8005258:	20004c0c 	.word	0x20004c0c
 800525c:	200000c7 	.word	0x200000c7
 8005260:	20004c00 	.word	0x20004c00
 8005264:	20004c0d 	.word	0x20004c0d
 8005268:	20004c0e 	.word	0x20004c0e
 800526c:	20004c0f 	.word	0x20004c0f
 8005270:	20004c10 	.word	0x20004c10
 8005274:	20004c04 	.word	0x20004c04
 8005278:	200000ca 	.word	0x200000ca
 800527c:	2000009c 	.word	0x2000009c
 8005280:	200000cb 	.word	0x200000cb
 8005284:	40a00000 	.word	0x40a00000
 8005288:	200000cc 	.word	0x200000cc
 800528c:	200000c9 	.word	0x200000c9
 8005290:	200000a0 	.word	0x200000a0
 8005294:	40010800 	.word	0x40010800
 8005298:	40010c00 	.word	0x40010c00
 800529c:	200000ac 	.word	0x200000ac
		}
		else
		{
			CanH_TxSig_PowerSupplyNetworkWarning &= ~(1 << 1);
 80052a0:	4b9d      	ldr	r3, [pc, #628]	@ (8005518 <LoadCtrl_MainFunction+0x9a0>)
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	f023 0302 	bic.w	r3, r3, #2
 80052a8:	b2da      	uxtb	r2, r3
 80052aa:	4b9b      	ldr	r3, [pc, #620]	@ (8005518 <LoadCtrl_MainFunction+0x9a0>)
 80052ac:	701a      	strb	r2, [r3, #0]
			Dem_SetDtc(8, 1, 0);
 80052ae:	2200      	movs	r2, #0
 80052b0:	2101      	movs	r1, #1
 80052b2:	2008      	movs	r0, #8
 80052b4:	f001 fbce 	bl	8006a54 <Dem_SetDtc>
		}
		/* Switch off all the loads (DEC, CBM, DMU) to prevent damage in over-voltage (>5v5). */
		if(Param_MaxVoltageValue < LoadCtrl_AdcVoltToActualVolt)
 80052b8:	4b98      	ldr	r3, [pc, #608]	@ (800551c <LoadCtrl_MainFunction+0x9a4>)
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	4618      	mov	r0, r3
 80052be:	f7ff fa1f 	bl	8004700 <__aeabi_i2f>
 80052c2:	4602      	mov	r2, r0
 80052c4:	4b96      	ldr	r3, [pc, #600]	@ (8005520 <LoadCtrl_MainFunction+0x9a8>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4619      	mov	r1, r3
 80052ca:	4610      	mov	r0, r2
 80052cc:	f7ff fc0a 	bl	8004ae4 <__aeabi_fcmplt>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d02b      	beq.n	800532e <LoadCtrl_MainFunction+0x7b6>
		{
			CanH_TxSig_PowerSupplyNetworkWarning |= (1 << 2);
 80052d6:	4b90      	ldr	r3, [pc, #576]	@ (8005518 <LoadCtrl_MainFunction+0x9a0>)
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	f043 0304 	orr.w	r3, r3, #4
 80052de:	b2da      	uxtb	r2, r3
 80052e0:	4b8d      	ldr	r3, [pc, #564]	@ (8005518 <LoadCtrl_MainFunction+0x9a0>)
 80052e2:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(RIN1_GPIO_Port, RIN1_Pin, 0);
 80052e4:	2200      	movs	r2, #0
 80052e6:	2110      	movs	r1, #16
 80052e8:	488e      	ldr	r0, [pc, #568]	@ (8005524 <LoadCtrl_MainFunction+0x9ac>)
 80052ea:	f005 fb68 	bl	800a9be <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RIN2_GPIO_Port, RIN2_Pin, 0);
 80052ee:	2200      	movs	r2, #0
 80052f0:	2120      	movs	r1, #32
 80052f2:	488c      	ldr	r0, [pc, #560]	@ (8005524 <LoadCtrl_MainFunction+0x9ac>)
 80052f4:	f005 fb63 	bl	800a9be <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RIN3_GPIO_Port, RIN3_Pin, 0);
 80052f8:	2200      	movs	r2, #0
 80052fa:	2140      	movs	r1, #64	@ 0x40
 80052fc:	4889      	ldr	r0, [pc, #548]	@ (8005524 <LoadCtrl_MainFunction+0x9ac>)
 80052fe:	f005 fb5e 	bl	800a9be <HAL_GPIO_WritePin>
			Dem_SetDtc(9, 1, 1);
 8005302:	2201      	movs	r2, #1
 8005304:	2101      	movs	r1, #1
 8005306:	2009      	movs	r0, #9
 8005308:	f001 fba4 	bl	8006a54 <Dem_SetDtc>
			LoadCtrl_SwitchOffFlag = 2;
 800530c:	4b86      	ldr	r3, [pc, #536]	@ (8005528 <LoadCtrl_MainFunction+0x9b0>)
 800530e:	2202      	movs	r2, #2
 8005310:	701a      	strb	r2, [r3, #0]
			for(uint8 i = 0; i < 8; i++) LoadCtrl_StatusList[i] = 0;
 8005312:	2300      	movs	r3, #0
 8005314:	717b      	strb	r3, [r7, #5]
 8005316:	e006      	b.n	8005326 <LoadCtrl_MainFunction+0x7ae>
 8005318:	797b      	ldrb	r3, [r7, #5]
 800531a:	4a84      	ldr	r2, [pc, #528]	@ (800552c <LoadCtrl_MainFunction+0x9b4>)
 800531c:	2100      	movs	r1, #0
 800531e:	54d1      	strb	r1, [r2, r3]
 8005320:	797b      	ldrb	r3, [r7, #5]
 8005322:	3301      	adds	r3, #1
 8005324:	717b      	strb	r3, [r7, #5]
 8005326:	797b      	ldrb	r3, [r7, #5]
 8005328:	2b07      	cmp	r3, #7
 800532a:	d9f5      	bls.n	8005318 <LoadCtrl_MainFunction+0x7a0>
 800532c:	e00b      	b.n	8005346 <LoadCtrl_MainFunction+0x7ce>
		}
		else
		{
			Dem_SetDtc(9, 1, 0);
 800532e:	2200      	movs	r2, #0
 8005330:	2101      	movs	r1, #1
 8005332:	2009      	movs	r0, #9
 8005334:	f001 fb8e 	bl	8006a54 <Dem_SetDtc>
			CanH_TxSig_PowerSupplyNetworkWarning &= ~(1 << 2);
 8005338:	4b77      	ldr	r3, [pc, #476]	@ (8005518 <LoadCtrl_MainFunction+0x9a0>)
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	f023 0304 	bic.w	r3, r3, #4
 8005340:	b2da      	uxtb	r2, r3
 8005342:	4b75      	ldr	r3, [pc, #468]	@ (8005518 <LoadCtrl_MainFunction+0x9a0>)
 8005344:	701a      	strb	r2, [r3, #0]
		}
		/* Brute searching the faulty load... */
		if(1 == LoadCtrl_SwitchOffFlag)
 8005346:	4b78      	ldr	r3, [pc, #480]	@ (8005528 <LoadCtrl_MainFunction+0x9b0>)
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	2b01      	cmp	r3, #1
 800534c:	f040 8136 	bne.w	80055bc <LoadCtrl_MainFunction+0xa44>
		{
			if(1 == LoadCtrl_StatusList[0])
 8005350:	4b76      	ldr	r3, [pc, #472]	@ (800552c <LoadCtrl_MainFunction+0x9b4>)
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	2b01      	cmp	r3, #1
 8005356:	d106      	bne.n	8005366 <LoadCtrl_MainFunction+0x7ee>
			{
				LoadCtrl_StatusList[0] = 0;
 8005358:	4b74      	ldr	r3, [pc, #464]	@ (800552c <LoadCtrl_MainFunction+0x9b4>)
 800535a:	2200      	movs	r2, #0
 800535c:	701a      	strb	r2, [r3, #0]
				LoadCtrl_Rin1Counter = 1;
 800535e:	4b74      	ldr	r3, [pc, #464]	@ (8005530 <LoadCtrl_MainFunction+0x9b8>)
 8005360:	2201      	movs	r2, #1
 8005362:	701a      	strb	r2, [r3, #0]
 8005364:	e12a      	b.n	80055bc <LoadCtrl_MainFunction+0xa44>
			}
			else if(0 == LoadCtrl_StatusList[0] && 1 == LoadCtrl_StatusList[1])
 8005366:	4b71      	ldr	r3, [pc, #452]	@ (800552c <LoadCtrl_MainFunction+0x9b4>)
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d110      	bne.n	8005390 <LoadCtrl_MainFunction+0x818>
 800536e:	4b6f      	ldr	r3, [pc, #444]	@ (800552c <LoadCtrl_MainFunction+0x9b4>)
 8005370:	785b      	ldrb	r3, [r3, #1]
 8005372:	2b01      	cmp	r3, #1
 8005374:	d10c      	bne.n	8005390 <LoadCtrl_MainFunction+0x818>
			{
				LoadCtrl_StatusList[0] = 0;
 8005376:	4b6d      	ldr	r3, [pc, #436]	@ (800552c <LoadCtrl_MainFunction+0x9b4>)
 8005378:	2200      	movs	r2, #0
 800537a:	701a      	strb	r2, [r3, #0]
				LoadCtrl_Rin1Counter = 1;
 800537c:	4b6c      	ldr	r3, [pc, #432]	@ (8005530 <LoadCtrl_MainFunction+0x9b8>)
 800537e:	2201      	movs	r2, #1
 8005380:	701a      	strb	r2, [r3, #0]
				LoadCtrl_StatusList[1] = 0;
 8005382:	4b6a      	ldr	r3, [pc, #424]	@ (800552c <LoadCtrl_MainFunction+0x9b4>)
 8005384:	2200      	movs	r2, #0
 8005386:	705a      	strb	r2, [r3, #1]
				LoadCtrl_Rin2Counter = 1;
 8005388:	4b6a      	ldr	r3, [pc, #424]	@ (8005534 <LoadCtrl_MainFunction+0x9bc>)
 800538a:	2201      	movs	r2, #1
 800538c:	701a      	strb	r2, [r3, #0]
 800538e:	e115      	b.n	80055bc <LoadCtrl_MainFunction+0xa44>
			}
			else if(0 == LoadCtrl_StatusList[1] && 1 == LoadCtrl_StatusList[2])
 8005390:	4b66      	ldr	r3, [pc, #408]	@ (800552c <LoadCtrl_MainFunction+0x9b4>)
 8005392:	785b      	ldrb	r3, [r3, #1]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d116      	bne.n	80053c6 <LoadCtrl_MainFunction+0x84e>
 8005398:	4b64      	ldr	r3, [pc, #400]	@ (800552c <LoadCtrl_MainFunction+0x9b4>)
 800539a:	789b      	ldrb	r3, [r3, #2]
 800539c:	2b01      	cmp	r3, #1
 800539e:	d112      	bne.n	80053c6 <LoadCtrl_MainFunction+0x84e>
			{
				LoadCtrl_StatusList[0] = 0;
 80053a0:	4b62      	ldr	r3, [pc, #392]	@ (800552c <LoadCtrl_MainFunction+0x9b4>)
 80053a2:	2200      	movs	r2, #0
 80053a4:	701a      	strb	r2, [r3, #0]
				LoadCtrl_Rin1Counter = 1;
 80053a6:	4b62      	ldr	r3, [pc, #392]	@ (8005530 <LoadCtrl_MainFunction+0x9b8>)
 80053a8:	2201      	movs	r2, #1
 80053aa:	701a      	strb	r2, [r3, #0]
				LoadCtrl_StatusList[2] = 0;
 80053ac:	4b5f      	ldr	r3, [pc, #380]	@ (800552c <LoadCtrl_MainFunction+0x9b4>)
 80053ae:	2200      	movs	r2, #0
 80053b0:	709a      	strb	r2, [r3, #2]
				LoadCtrl_Rin3Counter = 1;
 80053b2:	4b61      	ldr	r3, [pc, #388]	@ (8005538 <LoadCtrl_MainFunction+0x9c0>)
 80053b4:	2201      	movs	r2, #1
 80053b6:	701a      	strb	r2, [r3, #0]
				LoadCtrl_StatusList[1] = 0;
 80053b8:	4b5c      	ldr	r3, [pc, #368]	@ (800552c <LoadCtrl_MainFunction+0x9b4>)
 80053ba:	2200      	movs	r2, #0
 80053bc:	705a      	strb	r2, [r3, #1]
				LoadCtrl_Rin2Counter = 1;
 80053be:	4b5d      	ldr	r3, [pc, #372]	@ (8005534 <LoadCtrl_MainFunction+0x9bc>)
 80053c0:	2201      	movs	r2, #1
 80053c2:	701a      	strb	r2, [r3, #0]
 80053c4:	e0fa      	b.n	80055bc <LoadCtrl_MainFunction+0xa44>
			}
			else if(0 == LoadCtrl_StatusList[2] &&
 80053c6:	4b59      	ldr	r3, [pc, #356]	@ (800552c <LoadCtrl_MainFunction+0x9b4>)
 80053c8:	789b      	ldrb	r3, [r3, #2]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d11c      	bne.n	8005408 <LoadCtrl_MainFunction+0x890>
					1 == LoadCtrl_StatusList[3])
 80053ce:	4b57      	ldr	r3, [pc, #348]	@ (800552c <LoadCtrl_MainFunction+0x9b4>)
 80053d0:	78db      	ldrb	r3, [r3, #3]
			else if(0 == LoadCtrl_StatusList[2] &&
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d118      	bne.n	8005408 <LoadCtrl_MainFunction+0x890>
			{
				LoadCtrl_StatusList[0] = 0;
 80053d6:	4b55      	ldr	r3, [pc, #340]	@ (800552c <LoadCtrl_MainFunction+0x9b4>)
 80053d8:	2200      	movs	r2, #0
 80053da:	701a      	strb	r2, [r3, #0]
				LoadCtrl_Rin1Counter = 1;
 80053dc:	4b54      	ldr	r3, [pc, #336]	@ (8005530 <LoadCtrl_MainFunction+0x9b8>)
 80053de:	2201      	movs	r2, #1
 80053e0:	701a      	strb	r2, [r3, #0]
				LoadCtrl_StatusList[3] = 0;
 80053e2:	4b52      	ldr	r3, [pc, #328]	@ (800552c <LoadCtrl_MainFunction+0x9b4>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	70da      	strb	r2, [r3, #3]
				LoadCtrl_Rin4Counter = 1;
 80053e8:	4b54      	ldr	r3, [pc, #336]	@ (800553c <LoadCtrl_MainFunction+0x9c4>)
 80053ea:	2201      	movs	r2, #1
 80053ec:	701a      	strb	r2, [r3, #0]
				LoadCtrl_StatusList[2] = 0;
 80053ee:	4b4f      	ldr	r3, [pc, #316]	@ (800552c <LoadCtrl_MainFunction+0x9b4>)
 80053f0:	2200      	movs	r2, #0
 80053f2:	709a      	strb	r2, [r3, #2]
				LoadCtrl_Rin3Counter = 1;
 80053f4:	4b50      	ldr	r3, [pc, #320]	@ (8005538 <LoadCtrl_MainFunction+0x9c0>)
 80053f6:	2201      	movs	r2, #1
 80053f8:	701a      	strb	r2, [r3, #0]
				LoadCtrl_StatusList[1] = 0;
 80053fa:	4b4c      	ldr	r3, [pc, #304]	@ (800552c <LoadCtrl_MainFunction+0x9b4>)
 80053fc:	2200      	movs	r2, #0
 80053fe:	705a      	strb	r2, [r3, #1]
				LoadCtrl_Rin2Counter = 1;
 8005400:	4b4c      	ldr	r3, [pc, #304]	@ (8005534 <LoadCtrl_MainFunction+0x9bc>)
 8005402:	2201      	movs	r2, #1
 8005404:	701a      	strb	r2, [r3, #0]
 8005406:	e0d9      	b.n	80055bc <LoadCtrl_MainFunction+0xa44>
			}
			else if(0 == LoadCtrl_StatusList[3] && 1 == LoadCtrl_StatusList[4])
 8005408:	4b48      	ldr	r3, [pc, #288]	@ (800552c <LoadCtrl_MainFunction+0x9b4>)
 800540a:	78db      	ldrb	r3, [r3, #3]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d122      	bne.n	8005456 <LoadCtrl_MainFunction+0x8de>
 8005410:	4b46      	ldr	r3, [pc, #280]	@ (800552c <LoadCtrl_MainFunction+0x9b4>)
 8005412:	791b      	ldrb	r3, [r3, #4]
 8005414:	2b01      	cmp	r3, #1
 8005416:	d11e      	bne.n	8005456 <LoadCtrl_MainFunction+0x8de>
			{
				LoadCtrl_StatusList[0] = 0;
 8005418:	4b44      	ldr	r3, [pc, #272]	@ (800552c <LoadCtrl_MainFunction+0x9b4>)
 800541a:	2200      	movs	r2, #0
 800541c:	701a      	strb	r2, [r3, #0]
				LoadCtrl_Rin1Counter = 1;
 800541e:	4b44      	ldr	r3, [pc, #272]	@ (8005530 <LoadCtrl_MainFunction+0x9b8>)
 8005420:	2201      	movs	r2, #1
 8005422:	701a      	strb	r2, [r3, #0]
				LoadCtrl_StatusList[4] = 0;
 8005424:	4b41      	ldr	r3, [pc, #260]	@ (800552c <LoadCtrl_MainFunction+0x9b4>)
 8005426:	2200      	movs	r2, #0
 8005428:	711a      	strb	r2, [r3, #4]
				LoadCtrl_Rin5Counter = 1;
 800542a:	4b45      	ldr	r3, [pc, #276]	@ (8005540 <LoadCtrl_MainFunction+0x9c8>)
 800542c:	2201      	movs	r2, #1
 800542e:	701a      	strb	r2, [r3, #0]
				LoadCtrl_StatusList[3] = 0;
 8005430:	4b3e      	ldr	r3, [pc, #248]	@ (800552c <LoadCtrl_MainFunction+0x9b4>)
 8005432:	2200      	movs	r2, #0
 8005434:	70da      	strb	r2, [r3, #3]
				LoadCtrl_Rin4Counter = 1;
 8005436:	4b41      	ldr	r3, [pc, #260]	@ (800553c <LoadCtrl_MainFunction+0x9c4>)
 8005438:	2201      	movs	r2, #1
 800543a:	701a      	strb	r2, [r3, #0]
				LoadCtrl_StatusList[2] = 0;
 800543c:	4b3b      	ldr	r3, [pc, #236]	@ (800552c <LoadCtrl_MainFunction+0x9b4>)
 800543e:	2200      	movs	r2, #0
 8005440:	709a      	strb	r2, [r3, #2]
				LoadCtrl_Rin3Counter = 1;
 8005442:	4b3d      	ldr	r3, [pc, #244]	@ (8005538 <LoadCtrl_MainFunction+0x9c0>)
 8005444:	2201      	movs	r2, #1
 8005446:	701a      	strb	r2, [r3, #0]
				LoadCtrl_StatusList[1] = 0;
 8005448:	4b38      	ldr	r3, [pc, #224]	@ (800552c <LoadCtrl_MainFunction+0x9b4>)
 800544a:	2200      	movs	r2, #0
 800544c:	705a      	strb	r2, [r3, #1]
				LoadCtrl_Rin2Counter = 1;
 800544e:	4b39      	ldr	r3, [pc, #228]	@ (8005534 <LoadCtrl_MainFunction+0x9bc>)
 8005450:	2201      	movs	r2, #1
 8005452:	701a      	strb	r2, [r3, #0]
 8005454:	e0b2      	b.n	80055bc <LoadCtrl_MainFunction+0xa44>
			}
			else if(0 == LoadCtrl_StatusList[4] && 1 == LoadCtrl_StatusList[5])
 8005456:	4b35      	ldr	r3, [pc, #212]	@ (800552c <LoadCtrl_MainFunction+0x9b4>)
 8005458:	791b      	ldrb	r3, [r3, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d128      	bne.n	80054b0 <LoadCtrl_MainFunction+0x938>
 800545e:	4b33      	ldr	r3, [pc, #204]	@ (800552c <LoadCtrl_MainFunction+0x9b4>)
 8005460:	795b      	ldrb	r3, [r3, #5]
 8005462:	2b01      	cmp	r3, #1
 8005464:	d124      	bne.n	80054b0 <LoadCtrl_MainFunction+0x938>
			{
				LoadCtrl_StatusList[0] = 0;
 8005466:	4b31      	ldr	r3, [pc, #196]	@ (800552c <LoadCtrl_MainFunction+0x9b4>)
 8005468:	2200      	movs	r2, #0
 800546a:	701a      	strb	r2, [r3, #0]
				LoadCtrl_Rin1Counter = 1;
 800546c:	4b30      	ldr	r3, [pc, #192]	@ (8005530 <LoadCtrl_MainFunction+0x9b8>)
 800546e:	2201      	movs	r2, #1
 8005470:	701a      	strb	r2, [r3, #0]
				LoadCtrl_StatusList[5] = 0;
 8005472:	4b2e      	ldr	r3, [pc, #184]	@ (800552c <LoadCtrl_MainFunction+0x9b4>)
 8005474:	2200      	movs	r2, #0
 8005476:	715a      	strb	r2, [r3, #5]
				LoadCtrl_Rin6Counter = 1;
 8005478:	4b32      	ldr	r3, [pc, #200]	@ (8005544 <LoadCtrl_MainFunction+0x9cc>)
 800547a:	2201      	movs	r2, #1
 800547c:	701a      	strb	r2, [r3, #0]
				LoadCtrl_StatusList[4] = 0;
 800547e:	4b2b      	ldr	r3, [pc, #172]	@ (800552c <LoadCtrl_MainFunction+0x9b4>)
 8005480:	2200      	movs	r2, #0
 8005482:	711a      	strb	r2, [r3, #4]
				LoadCtrl_Rin5Counter = 1;
 8005484:	4b2e      	ldr	r3, [pc, #184]	@ (8005540 <LoadCtrl_MainFunction+0x9c8>)
 8005486:	2201      	movs	r2, #1
 8005488:	701a      	strb	r2, [r3, #0]
				LoadCtrl_StatusList[3] = 0;
 800548a:	4b28      	ldr	r3, [pc, #160]	@ (800552c <LoadCtrl_MainFunction+0x9b4>)
 800548c:	2200      	movs	r2, #0
 800548e:	70da      	strb	r2, [r3, #3]
				LoadCtrl_Rin4Counter = 1;
 8005490:	4b2a      	ldr	r3, [pc, #168]	@ (800553c <LoadCtrl_MainFunction+0x9c4>)
 8005492:	2201      	movs	r2, #1
 8005494:	701a      	strb	r2, [r3, #0]
				LoadCtrl_StatusList[2] = 0;
 8005496:	4b25      	ldr	r3, [pc, #148]	@ (800552c <LoadCtrl_MainFunction+0x9b4>)
 8005498:	2200      	movs	r2, #0
 800549a:	709a      	strb	r2, [r3, #2]
				LoadCtrl_Rin3Counter = 1;
 800549c:	4b26      	ldr	r3, [pc, #152]	@ (8005538 <LoadCtrl_MainFunction+0x9c0>)
 800549e:	2201      	movs	r2, #1
 80054a0:	701a      	strb	r2, [r3, #0]
				LoadCtrl_StatusList[1] = 0;
 80054a2:	4b22      	ldr	r3, [pc, #136]	@ (800552c <LoadCtrl_MainFunction+0x9b4>)
 80054a4:	2200      	movs	r2, #0
 80054a6:	705a      	strb	r2, [r3, #1]
				LoadCtrl_Rin2Counter = 1;
 80054a8:	4b22      	ldr	r3, [pc, #136]	@ (8005534 <LoadCtrl_MainFunction+0x9bc>)
 80054aa:	2201      	movs	r2, #1
 80054ac:	701a      	strb	r2, [r3, #0]
 80054ae:	e085      	b.n	80055bc <LoadCtrl_MainFunction+0xa44>
			}
			else if(0 == LoadCtrl_StatusList[5] && 1 == LoadCtrl_StatusList[6])
 80054b0:	4b1e      	ldr	r3, [pc, #120]	@ (800552c <LoadCtrl_MainFunction+0x9b4>)
 80054b2:	795b      	ldrb	r3, [r3, #5]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d149      	bne.n	800554c <LoadCtrl_MainFunction+0x9d4>
 80054b8:	4b1c      	ldr	r3, [pc, #112]	@ (800552c <LoadCtrl_MainFunction+0x9b4>)
 80054ba:	799b      	ldrb	r3, [r3, #6]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d145      	bne.n	800554c <LoadCtrl_MainFunction+0x9d4>
			{
				LoadCtrl_StatusList[0] = 0;
 80054c0:	4b1a      	ldr	r3, [pc, #104]	@ (800552c <LoadCtrl_MainFunction+0x9b4>)
 80054c2:	2200      	movs	r2, #0
 80054c4:	701a      	strb	r2, [r3, #0]
				LoadCtrl_Rin1Counter = 1;
 80054c6:	4b1a      	ldr	r3, [pc, #104]	@ (8005530 <LoadCtrl_MainFunction+0x9b8>)
 80054c8:	2201      	movs	r2, #1
 80054ca:	701a      	strb	r2, [r3, #0]
				LoadCtrl_StatusList[6] = 0;
 80054cc:	4b17      	ldr	r3, [pc, #92]	@ (800552c <LoadCtrl_MainFunction+0x9b4>)
 80054ce:	2200      	movs	r2, #0
 80054d0:	719a      	strb	r2, [r3, #6]
				LoadCtrl_Rin7Counter = 1;
 80054d2:	4b1d      	ldr	r3, [pc, #116]	@ (8005548 <LoadCtrl_MainFunction+0x9d0>)
 80054d4:	2201      	movs	r2, #1
 80054d6:	701a      	strb	r2, [r3, #0]
				LoadCtrl_StatusList[5] = 0;
 80054d8:	4b14      	ldr	r3, [pc, #80]	@ (800552c <LoadCtrl_MainFunction+0x9b4>)
 80054da:	2200      	movs	r2, #0
 80054dc:	715a      	strb	r2, [r3, #5]
				LoadCtrl_Rin6Counter = 1;
 80054de:	4b19      	ldr	r3, [pc, #100]	@ (8005544 <LoadCtrl_MainFunction+0x9cc>)
 80054e0:	2201      	movs	r2, #1
 80054e2:	701a      	strb	r2, [r3, #0]
				LoadCtrl_StatusList[4] = 0;
 80054e4:	4b11      	ldr	r3, [pc, #68]	@ (800552c <LoadCtrl_MainFunction+0x9b4>)
 80054e6:	2200      	movs	r2, #0
 80054e8:	711a      	strb	r2, [r3, #4]
				LoadCtrl_Rin5Counter = 1;
 80054ea:	4b15      	ldr	r3, [pc, #84]	@ (8005540 <LoadCtrl_MainFunction+0x9c8>)
 80054ec:	2201      	movs	r2, #1
 80054ee:	701a      	strb	r2, [r3, #0]
				LoadCtrl_StatusList[3] = 0;
 80054f0:	4b0e      	ldr	r3, [pc, #56]	@ (800552c <LoadCtrl_MainFunction+0x9b4>)
 80054f2:	2200      	movs	r2, #0
 80054f4:	70da      	strb	r2, [r3, #3]
				LoadCtrl_Rin4Counter = 1;
 80054f6:	4b11      	ldr	r3, [pc, #68]	@ (800553c <LoadCtrl_MainFunction+0x9c4>)
 80054f8:	2201      	movs	r2, #1
 80054fa:	701a      	strb	r2, [r3, #0]
				LoadCtrl_StatusList[2] = 0;
 80054fc:	4b0b      	ldr	r3, [pc, #44]	@ (800552c <LoadCtrl_MainFunction+0x9b4>)
 80054fe:	2200      	movs	r2, #0
 8005500:	709a      	strb	r2, [r3, #2]
				LoadCtrl_Rin3Counter = 1;
 8005502:	4b0d      	ldr	r3, [pc, #52]	@ (8005538 <LoadCtrl_MainFunction+0x9c0>)
 8005504:	2201      	movs	r2, #1
 8005506:	701a      	strb	r2, [r3, #0]
				LoadCtrl_StatusList[1] = 0;
 8005508:	4b08      	ldr	r3, [pc, #32]	@ (800552c <LoadCtrl_MainFunction+0x9b4>)
 800550a:	2200      	movs	r2, #0
 800550c:	705a      	strb	r2, [r3, #1]
				LoadCtrl_Rin2Counter = 1;
 800550e:	4b09      	ldr	r3, [pc, #36]	@ (8005534 <LoadCtrl_MainFunction+0x9bc>)
 8005510:	2201      	movs	r2, #1
 8005512:	701a      	strb	r2, [r3, #0]
 8005514:	e052      	b.n	80055bc <LoadCtrl_MainFunction+0xa44>
 8005516:	bf00      	nop
 8005518:	200000c7 	.word	0x200000c7
 800551c:	200000c8 	.word	0x200000c8
 8005520:	200000a0 	.word	0x200000a0
 8005524:	40010800 	.word	0x40010800
 8005528:	20004c04 	.word	0x20004c04
 800552c:	200000ac 	.word	0x200000ac
 8005530:	20004c0d 	.word	0x20004c0d
 8005534:	20004c0e 	.word	0x20004c0e
 8005538:	20004c0f 	.word	0x20004c0f
 800553c:	20004c10 	.word	0x20004c10
 8005540:	20004c11 	.word	0x20004c11
 8005544:	20004c12 	.word	0x20004c12
 8005548:	20004c13 	.word	0x20004c13
			}
			else if(0 == LoadCtrl_StatusList[6] && 1 == LoadCtrl_StatusList[7])
 800554c:	4b9d      	ldr	r3, [pc, #628]	@ (80057c4 <LoadCtrl_MainFunction+0xc4c>)
 800554e:	799b      	ldrb	r3, [r3, #6]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d133      	bne.n	80055bc <LoadCtrl_MainFunction+0xa44>
 8005554:	4b9b      	ldr	r3, [pc, #620]	@ (80057c4 <LoadCtrl_MainFunction+0xc4c>)
 8005556:	79db      	ldrb	r3, [r3, #7]
 8005558:	2b01      	cmp	r3, #1
 800555a:	d12f      	bne.n	80055bc <LoadCtrl_MainFunction+0xa44>
			{
				LoadCtrl_StatusList[0] = 0;
 800555c:	4b99      	ldr	r3, [pc, #612]	@ (80057c4 <LoadCtrl_MainFunction+0xc4c>)
 800555e:	2200      	movs	r2, #0
 8005560:	701a      	strb	r2, [r3, #0]
				LoadCtrl_Rin1Counter = 1;
 8005562:	4b99      	ldr	r3, [pc, #612]	@ (80057c8 <LoadCtrl_MainFunction+0xc50>)
 8005564:	2201      	movs	r2, #1
 8005566:	701a      	strb	r2, [r3, #0]
				LoadCtrl_StatusList[7] = 0;
 8005568:	4b96      	ldr	r3, [pc, #600]	@ (80057c4 <LoadCtrl_MainFunction+0xc4c>)
 800556a:	2200      	movs	r2, #0
 800556c:	71da      	strb	r2, [r3, #7]
				LoadCtrl_Rin8Counter = 1;
 800556e:	4b97      	ldr	r3, [pc, #604]	@ (80057cc <LoadCtrl_MainFunction+0xc54>)
 8005570:	2201      	movs	r2, #1
 8005572:	701a      	strb	r2, [r3, #0]
				LoadCtrl_StatusList[6] = 0;
 8005574:	4b93      	ldr	r3, [pc, #588]	@ (80057c4 <LoadCtrl_MainFunction+0xc4c>)
 8005576:	2200      	movs	r2, #0
 8005578:	719a      	strb	r2, [r3, #6]
				LoadCtrl_Rin7Counter = 1;
 800557a:	4b95      	ldr	r3, [pc, #596]	@ (80057d0 <LoadCtrl_MainFunction+0xc58>)
 800557c:	2201      	movs	r2, #1
 800557e:	701a      	strb	r2, [r3, #0]
				LoadCtrl_StatusList[5] = 0;
 8005580:	4b90      	ldr	r3, [pc, #576]	@ (80057c4 <LoadCtrl_MainFunction+0xc4c>)
 8005582:	2200      	movs	r2, #0
 8005584:	715a      	strb	r2, [r3, #5]
				LoadCtrl_Rin6Counter = 1;
 8005586:	4b93      	ldr	r3, [pc, #588]	@ (80057d4 <LoadCtrl_MainFunction+0xc5c>)
 8005588:	2201      	movs	r2, #1
 800558a:	701a      	strb	r2, [r3, #0]
				LoadCtrl_StatusList[4] = 0;
 800558c:	4b8d      	ldr	r3, [pc, #564]	@ (80057c4 <LoadCtrl_MainFunction+0xc4c>)
 800558e:	2200      	movs	r2, #0
 8005590:	711a      	strb	r2, [r3, #4]
				LoadCtrl_Rin5Counter = 1;
 8005592:	4b91      	ldr	r3, [pc, #580]	@ (80057d8 <LoadCtrl_MainFunction+0xc60>)
 8005594:	2201      	movs	r2, #1
 8005596:	701a      	strb	r2, [r3, #0]
				LoadCtrl_StatusList[3] = 0;
 8005598:	4b8a      	ldr	r3, [pc, #552]	@ (80057c4 <LoadCtrl_MainFunction+0xc4c>)
 800559a:	2200      	movs	r2, #0
 800559c:	70da      	strb	r2, [r3, #3]
				LoadCtrl_Rin4Counter = 1;
 800559e:	4b8f      	ldr	r3, [pc, #572]	@ (80057dc <LoadCtrl_MainFunction+0xc64>)
 80055a0:	2201      	movs	r2, #1
 80055a2:	701a      	strb	r2, [r3, #0]
				LoadCtrl_StatusList[2] = 0;
 80055a4:	4b87      	ldr	r3, [pc, #540]	@ (80057c4 <LoadCtrl_MainFunction+0xc4c>)
 80055a6:	2200      	movs	r2, #0
 80055a8:	709a      	strb	r2, [r3, #2]
				LoadCtrl_Rin3Counter = 1;
 80055aa:	4b8d      	ldr	r3, [pc, #564]	@ (80057e0 <LoadCtrl_MainFunction+0xc68>)
 80055ac:	2201      	movs	r2, #1
 80055ae:	701a      	strb	r2, [r3, #0]
				LoadCtrl_StatusList[1] = 0;
 80055b0:	4b84      	ldr	r3, [pc, #528]	@ (80057c4 <LoadCtrl_MainFunction+0xc4c>)
 80055b2:	2200      	movs	r2, #0
 80055b4:	705a      	strb	r2, [r3, #1]
				LoadCtrl_Rin2Counter = 1;
 80055b6:	4b8b      	ldr	r3, [pc, #556]	@ (80057e4 <LoadCtrl_MainFunction+0xc6c>)
 80055b8:	2201      	movs	r2, #1
 80055ba:	701a      	strb	r2, [r3, #0]
		else
		{
			/* Do nothing. */
		}
		/* Permanent switching off of one faulty load. */
		if(3 == LoadCtrl_PermanentSwitchOff_Rin1)
 80055bc:	4b8a      	ldr	r3, [pc, #552]	@ (80057e8 <LoadCtrl_MainFunction+0xc70>)
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	2b03      	cmp	r3, #3
 80055c2:	d10f      	bne.n	80055e4 <LoadCtrl_MainFunction+0xa6c>
		{
			LoadCtrl_LockRin1 = 1;
 80055c4:	4b89      	ldr	r3, [pc, #548]	@ (80057ec <LoadCtrl_MainFunction+0xc74>)
 80055c6:	2201      	movs	r2, #1
 80055c8:	701a      	strb	r2, [r3, #0]
			LoadCtrl_StatusList[0] = LoadCtrl_LockRin1;
 80055ca:	4b88      	ldr	r3, [pc, #544]	@ (80057ec <LoadCtrl_MainFunction+0xc74>)
 80055cc:	781a      	ldrb	r2, [r3, #0]
 80055ce:	4b7d      	ldr	r3, [pc, #500]	@ (80057c4 <LoadCtrl_MainFunction+0xc4c>)
 80055d0:	701a      	strb	r2, [r3, #0]
			LoadCtrl_PermanentSwitchOff_Rin1 = 0;
 80055d2:	4b85      	ldr	r3, [pc, #532]	@ (80057e8 <LoadCtrl_MainFunction+0xc70>)
 80055d4:	2200      	movs	r2, #0
 80055d6:	701a      	strb	r2, [r3, #0]
			Dem_SetDtc(10, 1, 1);
 80055d8:	2201      	movs	r2, #1
 80055da:	2101      	movs	r1, #1
 80055dc:	200a      	movs	r0, #10
 80055de:	f001 fa39 	bl	8006a54 <Dem_SetDtc>
 80055e2:	e004      	b.n	80055ee <LoadCtrl_MainFunction+0xa76>
		}
		else
		{
			Dem_SetDtc(10, 1, 0);
 80055e4:	2200      	movs	r2, #0
 80055e6:	2101      	movs	r1, #1
 80055e8:	200a      	movs	r0, #10
 80055ea:	f001 fa33 	bl	8006a54 <Dem_SetDtc>
		}
		if(3 == LoadCtrl_PermanentSwitchOff_Rin2)
 80055ee:	4b80      	ldr	r3, [pc, #512]	@ (80057f0 <LoadCtrl_MainFunction+0xc78>)
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	2b03      	cmp	r3, #3
 80055f4:	d10f      	bne.n	8005616 <LoadCtrl_MainFunction+0xa9e>
		{
			LoadCtrl_LockRin2 = 1;
 80055f6:	4b7f      	ldr	r3, [pc, #508]	@ (80057f4 <LoadCtrl_MainFunction+0xc7c>)
 80055f8:	2201      	movs	r2, #1
 80055fa:	701a      	strb	r2, [r3, #0]
			LoadCtrl_StatusList[1] = LoadCtrl_LockRin2;
 80055fc:	4b7d      	ldr	r3, [pc, #500]	@ (80057f4 <LoadCtrl_MainFunction+0xc7c>)
 80055fe:	781a      	ldrb	r2, [r3, #0]
 8005600:	4b70      	ldr	r3, [pc, #448]	@ (80057c4 <LoadCtrl_MainFunction+0xc4c>)
 8005602:	705a      	strb	r2, [r3, #1]
			LoadCtrl_PermanentSwitchOff_Rin2 = 0;
 8005604:	4b7a      	ldr	r3, [pc, #488]	@ (80057f0 <LoadCtrl_MainFunction+0xc78>)
 8005606:	2200      	movs	r2, #0
 8005608:	701a      	strb	r2, [r3, #0]
			Dem_SetDtc(11, 1, 1);
 800560a:	2201      	movs	r2, #1
 800560c:	2101      	movs	r1, #1
 800560e:	200b      	movs	r0, #11
 8005610:	f001 fa20 	bl	8006a54 <Dem_SetDtc>
 8005614:	e004      	b.n	8005620 <LoadCtrl_MainFunction+0xaa8>
		}
		else
		{
			Dem_SetDtc(11, 1, 0);
 8005616:	2200      	movs	r2, #0
 8005618:	2101      	movs	r1, #1
 800561a:	200b      	movs	r0, #11
 800561c:	f001 fa1a 	bl	8006a54 <Dem_SetDtc>
		}
		if(3 == LoadCtrl_PermanentSwitchOff_Rin3)
 8005620:	4b75      	ldr	r3, [pc, #468]	@ (80057f8 <LoadCtrl_MainFunction+0xc80>)
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	2b03      	cmp	r3, #3
 8005626:	d10f      	bne.n	8005648 <LoadCtrl_MainFunction+0xad0>
		{
			LoadCtrl_LockRin3 = 1;
 8005628:	4b74      	ldr	r3, [pc, #464]	@ (80057fc <LoadCtrl_MainFunction+0xc84>)
 800562a:	2201      	movs	r2, #1
 800562c:	701a      	strb	r2, [r3, #0]
			LoadCtrl_StatusList[2] = LoadCtrl_LockRin3;
 800562e:	4b73      	ldr	r3, [pc, #460]	@ (80057fc <LoadCtrl_MainFunction+0xc84>)
 8005630:	781a      	ldrb	r2, [r3, #0]
 8005632:	4b64      	ldr	r3, [pc, #400]	@ (80057c4 <LoadCtrl_MainFunction+0xc4c>)
 8005634:	709a      	strb	r2, [r3, #2]
			LoadCtrl_PermanentSwitchOff_Rin3 = 0;
 8005636:	4b70      	ldr	r3, [pc, #448]	@ (80057f8 <LoadCtrl_MainFunction+0xc80>)
 8005638:	2200      	movs	r2, #0
 800563a:	701a      	strb	r2, [r3, #0]
			Dem_SetDtc(12, 1, 1);
 800563c:	2201      	movs	r2, #1
 800563e:	2101      	movs	r1, #1
 8005640:	200c      	movs	r0, #12
 8005642:	f001 fa07 	bl	8006a54 <Dem_SetDtc>
 8005646:	e004      	b.n	8005652 <LoadCtrl_MainFunction+0xada>
		}
		else
		{
			Dem_SetDtc(12, 1, 0);
 8005648:	2200      	movs	r2, #0
 800564a:	2101      	movs	r1, #1
 800564c:	200c      	movs	r0, #12
 800564e:	f001 fa01 	bl	8006a54 <Dem_SetDtc>
		}
		if(3 == LoadCtrl_PermanentSwitchOff_Rin4)
 8005652:	4b6b      	ldr	r3, [pc, #428]	@ (8005800 <LoadCtrl_MainFunction+0xc88>)
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	2b03      	cmp	r3, #3
 8005658:	d10f      	bne.n	800567a <LoadCtrl_MainFunction+0xb02>
		{
			LoadCtrl_LockRin4 = 1;
 800565a:	4b6a      	ldr	r3, [pc, #424]	@ (8005804 <LoadCtrl_MainFunction+0xc8c>)
 800565c:	2201      	movs	r2, #1
 800565e:	701a      	strb	r2, [r3, #0]
			LoadCtrl_StatusList[3] = LoadCtrl_LockRin4;
 8005660:	4b68      	ldr	r3, [pc, #416]	@ (8005804 <LoadCtrl_MainFunction+0xc8c>)
 8005662:	781a      	ldrb	r2, [r3, #0]
 8005664:	4b57      	ldr	r3, [pc, #348]	@ (80057c4 <LoadCtrl_MainFunction+0xc4c>)
 8005666:	70da      	strb	r2, [r3, #3]
			LoadCtrl_PermanentSwitchOff_Rin4 = 0;
 8005668:	4b65      	ldr	r3, [pc, #404]	@ (8005800 <LoadCtrl_MainFunction+0xc88>)
 800566a:	2200      	movs	r2, #0
 800566c:	701a      	strb	r2, [r3, #0]
			Dem_SetDtc(13, 1, 1);
 800566e:	2201      	movs	r2, #1
 8005670:	2101      	movs	r1, #1
 8005672:	200d      	movs	r0, #13
 8005674:	f001 f9ee 	bl	8006a54 <Dem_SetDtc>
 8005678:	e004      	b.n	8005684 <LoadCtrl_MainFunction+0xb0c>
		}
		else
		{
			Dem_SetDtc(13, 1, 0);
 800567a:	2200      	movs	r2, #0
 800567c:	2101      	movs	r1, #1
 800567e:	200d      	movs	r0, #13
 8005680:	f001 f9e8 	bl	8006a54 <Dem_SetDtc>
		}
		if(3 == LoadCtrl_PermanentSwitchOff_Rin5)
 8005684:	4b60      	ldr	r3, [pc, #384]	@ (8005808 <LoadCtrl_MainFunction+0xc90>)
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	2b03      	cmp	r3, #3
 800568a:	d10f      	bne.n	80056ac <LoadCtrl_MainFunction+0xb34>
		{
			LoadCtrl_LockRin5 = 1;
 800568c:	4b5f      	ldr	r3, [pc, #380]	@ (800580c <LoadCtrl_MainFunction+0xc94>)
 800568e:	2201      	movs	r2, #1
 8005690:	701a      	strb	r2, [r3, #0]
			LoadCtrl_StatusList[4] = LoadCtrl_LockRin5;
 8005692:	4b5e      	ldr	r3, [pc, #376]	@ (800580c <LoadCtrl_MainFunction+0xc94>)
 8005694:	781a      	ldrb	r2, [r3, #0]
 8005696:	4b4b      	ldr	r3, [pc, #300]	@ (80057c4 <LoadCtrl_MainFunction+0xc4c>)
 8005698:	711a      	strb	r2, [r3, #4]
			LoadCtrl_PermanentSwitchOff_Rin5 = 0;
 800569a:	4b5b      	ldr	r3, [pc, #364]	@ (8005808 <LoadCtrl_MainFunction+0xc90>)
 800569c:	2200      	movs	r2, #0
 800569e:	701a      	strb	r2, [r3, #0]
			Dem_SetDtc(14, 1, 1);
 80056a0:	2201      	movs	r2, #1
 80056a2:	2101      	movs	r1, #1
 80056a4:	200e      	movs	r0, #14
 80056a6:	f001 f9d5 	bl	8006a54 <Dem_SetDtc>
 80056aa:	e004      	b.n	80056b6 <LoadCtrl_MainFunction+0xb3e>
		}
		else
		{
			Dem_SetDtc(14, 1, 0);
 80056ac:	2200      	movs	r2, #0
 80056ae:	2101      	movs	r1, #1
 80056b0:	200e      	movs	r0, #14
 80056b2:	f001 f9cf 	bl	8006a54 <Dem_SetDtc>
		}
		if(3 == LoadCtrl_PermanentSwitchOff_Rin6)
 80056b6:	4b56      	ldr	r3, [pc, #344]	@ (8005810 <LoadCtrl_MainFunction+0xc98>)
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	2b03      	cmp	r3, #3
 80056bc:	d10f      	bne.n	80056de <LoadCtrl_MainFunction+0xb66>
		{
			LoadCtrl_LockRin6 = 1;
 80056be:	4b55      	ldr	r3, [pc, #340]	@ (8005814 <LoadCtrl_MainFunction+0xc9c>)
 80056c0:	2201      	movs	r2, #1
 80056c2:	701a      	strb	r2, [r3, #0]
			LoadCtrl_StatusList[5] = LoadCtrl_LockRin6;
 80056c4:	4b53      	ldr	r3, [pc, #332]	@ (8005814 <LoadCtrl_MainFunction+0xc9c>)
 80056c6:	781a      	ldrb	r2, [r3, #0]
 80056c8:	4b3e      	ldr	r3, [pc, #248]	@ (80057c4 <LoadCtrl_MainFunction+0xc4c>)
 80056ca:	715a      	strb	r2, [r3, #5]
			LoadCtrl_PermanentSwitchOff_Rin6 = 0;
 80056cc:	4b50      	ldr	r3, [pc, #320]	@ (8005810 <LoadCtrl_MainFunction+0xc98>)
 80056ce:	2200      	movs	r2, #0
 80056d0:	701a      	strb	r2, [r3, #0]
			Dem_SetDtc(15, 1, 1);
 80056d2:	2201      	movs	r2, #1
 80056d4:	2101      	movs	r1, #1
 80056d6:	200f      	movs	r0, #15
 80056d8:	f001 f9bc 	bl	8006a54 <Dem_SetDtc>
 80056dc:	e004      	b.n	80056e8 <LoadCtrl_MainFunction+0xb70>
		}
		else
		{
			Dem_SetDtc(15, 1, 0);
 80056de:	2200      	movs	r2, #0
 80056e0:	2101      	movs	r1, #1
 80056e2:	200f      	movs	r0, #15
 80056e4:	f001 f9b6 	bl	8006a54 <Dem_SetDtc>
		}
		if(3 == LoadCtrl_PermanentSwitchOff_Rin7)
 80056e8:	4b4b      	ldr	r3, [pc, #300]	@ (8005818 <LoadCtrl_MainFunction+0xca0>)
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	2b03      	cmp	r3, #3
 80056ee:	d10f      	bne.n	8005710 <LoadCtrl_MainFunction+0xb98>
		{
			LoadCtrl_LockRin7 = 1;
 80056f0:	4b4a      	ldr	r3, [pc, #296]	@ (800581c <LoadCtrl_MainFunction+0xca4>)
 80056f2:	2201      	movs	r2, #1
 80056f4:	701a      	strb	r2, [r3, #0]
			LoadCtrl_StatusList[6] = LoadCtrl_LockRin7;
 80056f6:	4b49      	ldr	r3, [pc, #292]	@ (800581c <LoadCtrl_MainFunction+0xca4>)
 80056f8:	781a      	ldrb	r2, [r3, #0]
 80056fa:	4b32      	ldr	r3, [pc, #200]	@ (80057c4 <LoadCtrl_MainFunction+0xc4c>)
 80056fc:	719a      	strb	r2, [r3, #6]
			LoadCtrl_PermanentSwitchOff_Rin7 = 0;
 80056fe:	4b46      	ldr	r3, [pc, #280]	@ (8005818 <LoadCtrl_MainFunction+0xca0>)
 8005700:	2200      	movs	r2, #0
 8005702:	701a      	strb	r2, [r3, #0]
			Dem_SetDtc(16, 1, 1);
 8005704:	2201      	movs	r2, #1
 8005706:	2101      	movs	r1, #1
 8005708:	2010      	movs	r0, #16
 800570a:	f001 f9a3 	bl	8006a54 <Dem_SetDtc>
 800570e:	e004      	b.n	800571a <LoadCtrl_MainFunction+0xba2>
		}
		else
		{
			Dem_SetDtc(16, 1, 0);
 8005710:	2200      	movs	r2, #0
 8005712:	2101      	movs	r1, #1
 8005714:	2010      	movs	r0, #16
 8005716:	f001 f99d 	bl	8006a54 <Dem_SetDtc>
		}
		if(3 == LoadCtrl_PermanentSwitchOff_Rin8)
 800571a:	4b41      	ldr	r3, [pc, #260]	@ (8005820 <LoadCtrl_MainFunction+0xca8>)
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	2b03      	cmp	r3, #3
 8005720:	d10f      	bne.n	8005742 <LoadCtrl_MainFunction+0xbca>
		{
			LoadCtrl_LockRin8 = 1;
 8005722:	4b40      	ldr	r3, [pc, #256]	@ (8005824 <LoadCtrl_MainFunction+0xcac>)
 8005724:	2201      	movs	r2, #1
 8005726:	701a      	strb	r2, [r3, #0]
			LoadCtrl_StatusList[7] = LoadCtrl_LockRin8;
 8005728:	4b3e      	ldr	r3, [pc, #248]	@ (8005824 <LoadCtrl_MainFunction+0xcac>)
 800572a:	781a      	ldrb	r2, [r3, #0]
 800572c:	4b25      	ldr	r3, [pc, #148]	@ (80057c4 <LoadCtrl_MainFunction+0xc4c>)
 800572e:	71da      	strb	r2, [r3, #7]
			LoadCtrl_PermanentSwitchOff_Rin8 = 0;
 8005730:	4b3b      	ldr	r3, [pc, #236]	@ (8005820 <LoadCtrl_MainFunction+0xca8>)
 8005732:	2200      	movs	r2, #0
 8005734:	701a      	strb	r2, [r3, #0]
			Dem_SetDtc(17, 1, 1);
 8005736:	2201      	movs	r2, #1
 8005738:	2101      	movs	r1, #1
 800573a:	2011      	movs	r0, #17
 800573c:	f001 f98a 	bl	8006a54 <Dem_SetDtc>
 8005740:	e004      	b.n	800574c <LoadCtrl_MainFunction+0xbd4>
		}
		else
		{
			Dem_SetDtc(17, 1, 0);
 8005742:	2200      	movs	r2, #0
 8005744:	2101      	movs	r1, #1
 8005746:	2011      	movs	r0, #17
 8005748:	f001 f984 	bl	8006a54 <Dem_SetDtc>
		}
		/* Keep the loads off with this flag. */
		if(0 != LoadCtrl_LockRin1)
 800574c:	4b27      	ldr	r3, [pc, #156]	@ (80057ec <LoadCtrl_MainFunction+0xc74>)
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d002      	beq.n	800575a <LoadCtrl_MainFunction+0xbe2>
		{
			LoadCtrl_StatusList[0] = 0;
 8005754:	4b1b      	ldr	r3, [pc, #108]	@ (80057c4 <LoadCtrl_MainFunction+0xc4c>)
 8005756:	2200      	movs	r2, #0
 8005758:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* Do nothing. */
		}
		if(0 != LoadCtrl_LockRin2)
 800575a:	4b26      	ldr	r3, [pc, #152]	@ (80057f4 <LoadCtrl_MainFunction+0xc7c>)
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d002      	beq.n	8005768 <LoadCtrl_MainFunction+0xbf0>
		{
			LoadCtrl_StatusList[1] = 0;
 8005762:	4b18      	ldr	r3, [pc, #96]	@ (80057c4 <LoadCtrl_MainFunction+0xc4c>)
 8005764:	2200      	movs	r2, #0
 8005766:	705a      	strb	r2, [r3, #1]
		}
		else
		{
			/* Do nothing. */
		}
		if(0 != LoadCtrl_LockRin3)
 8005768:	4b24      	ldr	r3, [pc, #144]	@ (80057fc <LoadCtrl_MainFunction+0xc84>)
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d002      	beq.n	8005776 <LoadCtrl_MainFunction+0xbfe>
		{
			LoadCtrl_StatusList[2] = 0;
 8005770:	4b14      	ldr	r3, [pc, #80]	@ (80057c4 <LoadCtrl_MainFunction+0xc4c>)
 8005772:	2200      	movs	r2, #0
 8005774:	709a      	strb	r2, [r3, #2]
		}
		else
		{
			/* Do nothing. */
		}
		if(0 != LoadCtrl_LockRin4)
 8005776:	4b23      	ldr	r3, [pc, #140]	@ (8005804 <LoadCtrl_MainFunction+0xc8c>)
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d002      	beq.n	8005784 <LoadCtrl_MainFunction+0xc0c>
		{
			LoadCtrl_StatusList[3] = 0;
 800577e:	4b11      	ldr	r3, [pc, #68]	@ (80057c4 <LoadCtrl_MainFunction+0xc4c>)
 8005780:	2200      	movs	r2, #0
 8005782:	70da      	strb	r2, [r3, #3]
		}
		else
		{
			/* Do nothing. */
		}
		if(0 != LoadCtrl_LockRin5)
 8005784:	4b21      	ldr	r3, [pc, #132]	@ (800580c <LoadCtrl_MainFunction+0xc94>)
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d002      	beq.n	8005792 <LoadCtrl_MainFunction+0xc1a>
		{
			LoadCtrl_StatusList[4] = 0;
 800578c:	4b0d      	ldr	r3, [pc, #52]	@ (80057c4 <LoadCtrl_MainFunction+0xc4c>)
 800578e:	2200      	movs	r2, #0
 8005790:	711a      	strb	r2, [r3, #4]
		}
		else
		{
			/* Do nothing. */
		}
		if(0 != LoadCtrl_LockRin6)
 8005792:	4b20      	ldr	r3, [pc, #128]	@ (8005814 <LoadCtrl_MainFunction+0xc9c>)
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d002      	beq.n	80057a0 <LoadCtrl_MainFunction+0xc28>
		{
			LoadCtrl_StatusList[5] = 0;
 800579a:	4b0a      	ldr	r3, [pc, #40]	@ (80057c4 <LoadCtrl_MainFunction+0xc4c>)
 800579c:	2200      	movs	r2, #0
 800579e:	715a      	strb	r2, [r3, #5]
		}
		else
		{
			/* Do nothing. */
		}
		if(0 != LoadCtrl_LockRin7)
 80057a0:	4b1e      	ldr	r3, [pc, #120]	@ (800581c <LoadCtrl_MainFunction+0xca4>)
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d002      	beq.n	80057ae <LoadCtrl_MainFunction+0xc36>
		{
			LoadCtrl_StatusList[8] = 0;
 80057a8:	4b06      	ldr	r3, [pc, #24]	@ (80057c4 <LoadCtrl_MainFunction+0xc4c>)
 80057aa:	2200      	movs	r2, #0
 80057ac:	721a      	strb	r2, [r3, #8]
		}
		else
		{
			/* Do nothing. */
		}
		if(0 != LoadCtrl_LockRin8)
 80057ae:	4b1d      	ldr	r3, [pc, #116]	@ (8005824 <LoadCtrl_MainFunction+0xcac>)
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d002      	beq.n	80057bc <LoadCtrl_MainFunction+0xc44>
		{
			LoadCtrl_StatusList[7] = 0;
 80057b6:	4b03      	ldr	r3, [pc, #12]	@ (80057c4 <LoadCtrl_MainFunction+0xc4c>)
 80057b8:	2200      	movs	r2, #0
 80057ba:	71da      	strb	r2, [r3, #7]
		else
		{
			/* Do nothing. */
		}
		/* Update status on CAN.*/
		for(uint8 i = 0; i < 8; i++)
 80057bc:	2300      	movs	r3, #0
 80057be:	713b      	strb	r3, [r7, #4]
 80057c0:	e055      	b.n	800586e <LoadCtrl_MainFunction+0xcf6>
 80057c2:	bf00      	nop
 80057c4:	200000ac 	.word	0x200000ac
 80057c8:	20004c0d 	.word	0x20004c0d
 80057cc:	20004c14 	.word	0x20004c14
 80057d0:	20004c13 	.word	0x20004c13
 80057d4:	20004c12 	.word	0x20004c12
 80057d8:	20004c11 	.word	0x20004c11
 80057dc:	20004c10 	.word	0x20004c10
 80057e0:	20004c0f 	.word	0x20004c0f
 80057e4:	20004c0e 	.word	0x20004c0e
 80057e8:	20004c05 	.word	0x20004c05
 80057ec:	20004c15 	.word	0x20004c15
 80057f0:	20004c06 	.word	0x20004c06
 80057f4:	20004c16 	.word	0x20004c16
 80057f8:	20004c07 	.word	0x20004c07
 80057fc:	20004c17 	.word	0x20004c17
 8005800:	20004c08 	.word	0x20004c08
 8005804:	20004c18 	.word	0x20004c18
 8005808:	20004c09 	.word	0x20004c09
 800580c:	20004c19 	.word	0x20004c19
 8005810:	20004c0a 	.word	0x20004c0a
 8005814:	20004c1a 	.word	0x20004c1a
 8005818:	20004c0b 	.word	0x20004c0b
 800581c:	20004c1b 	.word	0x20004c1b
 8005820:	20004c0c 	.word	0x20004c0c
 8005824:	20004c1c 	.word	0x20004c1c
		{
			CanH_TxSig_StatusList1 = LoadCtrl_StatusList[0];
 8005828:	4b34      	ldr	r3, [pc, #208]	@ (80058fc <LoadCtrl_MainFunction+0xd84>)
 800582a:	781a      	ldrb	r2, [r3, #0]
 800582c:	4b34      	ldr	r3, [pc, #208]	@ (8005900 <LoadCtrl_MainFunction+0xd88>)
 800582e:	701a      	strb	r2, [r3, #0]
			CanH_TxSig_StatusList2 = LoadCtrl_StatusList[1];
 8005830:	4b32      	ldr	r3, [pc, #200]	@ (80058fc <LoadCtrl_MainFunction+0xd84>)
 8005832:	785a      	ldrb	r2, [r3, #1]
 8005834:	4b33      	ldr	r3, [pc, #204]	@ (8005904 <LoadCtrl_MainFunction+0xd8c>)
 8005836:	701a      	strb	r2, [r3, #0]
			CanH_TxSig_StatusList3 = LoadCtrl_StatusList[2];
 8005838:	4b30      	ldr	r3, [pc, #192]	@ (80058fc <LoadCtrl_MainFunction+0xd84>)
 800583a:	789a      	ldrb	r2, [r3, #2]
 800583c:	4b32      	ldr	r3, [pc, #200]	@ (8005908 <LoadCtrl_MainFunction+0xd90>)
 800583e:	701a      	strb	r2, [r3, #0]
			CanH_TxSig_StatusList4 = LoadCtrl_StatusList[3];
 8005840:	4b2e      	ldr	r3, [pc, #184]	@ (80058fc <LoadCtrl_MainFunction+0xd84>)
 8005842:	78da      	ldrb	r2, [r3, #3]
 8005844:	4b31      	ldr	r3, [pc, #196]	@ (800590c <LoadCtrl_MainFunction+0xd94>)
 8005846:	701a      	strb	r2, [r3, #0]
			CanH_TxSig_StatusList5 = LoadCtrl_StatusList[4];
 8005848:	4b2c      	ldr	r3, [pc, #176]	@ (80058fc <LoadCtrl_MainFunction+0xd84>)
 800584a:	791a      	ldrb	r2, [r3, #4]
 800584c:	4b30      	ldr	r3, [pc, #192]	@ (8005910 <LoadCtrl_MainFunction+0xd98>)
 800584e:	701a      	strb	r2, [r3, #0]
			CanH_TxSig_StatusList6 = LoadCtrl_StatusList[5];
 8005850:	4b2a      	ldr	r3, [pc, #168]	@ (80058fc <LoadCtrl_MainFunction+0xd84>)
 8005852:	795a      	ldrb	r2, [r3, #5]
 8005854:	4b2f      	ldr	r3, [pc, #188]	@ (8005914 <LoadCtrl_MainFunction+0xd9c>)
 8005856:	701a      	strb	r2, [r3, #0]
			CanH_TxSig_StatusList7 = LoadCtrl_StatusList[6];
 8005858:	4b28      	ldr	r3, [pc, #160]	@ (80058fc <LoadCtrl_MainFunction+0xd84>)
 800585a:	799a      	ldrb	r2, [r3, #6]
 800585c:	4b2e      	ldr	r3, [pc, #184]	@ (8005918 <LoadCtrl_MainFunction+0xda0>)
 800585e:	701a      	strb	r2, [r3, #0]
			CanH_TxSig_StatusList8 = LoadCtrl_StatusList[7];
 8005860:	4b26      	ldr	r3, [pc, #152]	@ (80058fc <LoadCtrl_MainFunction+0xd84>)
 8005862:	79da      	ldrb	r2, [r3, #7]
 8005864:	4b2d      	ldr	r3, [pc, #180]	@ (800591c <LoadCtrl_MainFunction+0xda4>)
 8005866:	701a      	strb	r2, [r3, #0]
		for(uint8 i = 0; i < 8; i++)
 8005868:	793b      	ldrb	r3, [r7, #4]
 800586a:	3301      	adds	r3, #1
 800586c:	713b      	strb	r3, [r7, #4]
 800586e:	793b      	ldrb	r3, [r7, #4]
 8005870:	2b07      	cmp	r3, #7
 8005872:	d9d9      	bls.n	8005828 <LoadCtrl_MainFunction+0xcb0>
		}
		/* Switch the loads according to their state. */
		HAL_GPIO_WritePin(RIN1_GPIO_Port, RIN1_Pin, LoadCtrl_StatusList[0]);
 8005874:	4b21      	ldr	r3, [pc, #132]	@ (80058fc <LoadCtrl_MainFunction+0xd84>)
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	461a      	mov	r2, r3
 800587a:	2110      	movs	r1, #16
 800587c:	4828      	ldr	r0, [pc, #160]	@ (8005920 <LoadCtrl_MainFunction+0xda8>)
 800587e:	f005 f89e 	bl	800a9be <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RIN2_GPIO_Port, RIN2_Pin, LoadCtrl_StatusList[1]);
 8005882:	4b1e      	ldr	r3, [pc, #120]	@ (80058fc <LoadCtrl_MainFunction+0xd84>)
 8005884:	785b      	ldrb	r3, [r3, #1]
 8005886:	461a      	mov	r2, r3
 8005888:	2120      	movs	r1, #32
 800588a:	4825      	ldr	r0, [pc, #148]	@ (8005920 <LoadCtrl_MainFunction+0xda8>)
 800588c:	f005 f897 	bl	800a9be <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RIN3_GPIO_Port, RIN3_Pin, LoadCtrl_StatusList[2]);
 8005890:	4b1a      	ldr	r3, [pc, #104]	@ (80058fc <LoadCtrl_MainFunction+0xd84>)
 8005892:	789b      	ldrb	r3, [r3, #2]
 8005894:	461a      	mov	r2, r3
 8005896:	2140      	movs	r1, #64	@ 0x40
 8005898:	4821      	ldr	r0, [pc, #132]	@ (8005920 <LoadCtrl_MainFunction+0xda8>)
 800589a:	f005 f890 	bl	800a9be <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RIN4_GPIO_Port, RIN4_Pin, LoadCtrl_StatusList[3]);
 800589e:	4b17      	ldr	r3, [pc, #92]	@ (80058fc <LoadCtrl_MainFunction+0xd84>)
 80058a0:	78db      	ldrb	r3, [r3, #3]
 80058a2:	461a      	mov	r2, r3
 80058a4:	2180      	movs	r1, #128	@ 0x80
 80058a6:	481e      	ldr	r0, [pc, #120]	@ (8005920 <LoadCtrl_MainFunction+0xda8>)
 80058a8:	f005 f889 	bl	800a9be <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RIN5_GPIO_Port, RIN5_Pin, LoadCtrl_StatusList[4]);
 80058ac:	4b13      	ldr	r3, [pc, #76]	@ (80058fc <LoadCtrl_MainFunction+0xd84>)
 80058ae:	791b      	ldrb	r3, [r3, #4]
 80058b0:	461a      	mov	r2, r3
 80058b2:	2101      	movs	r1, #1
 80058b4:	481b      	ldr	r0, [pc, #108]	@ (8005924 <LoadCtrl_MainFunction+0xdac>)
 80058b6:	f005 f882 	bl	800a9be <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RIN6_GPIO_Port, RIN6_Pin, LoadCtrl_StatusList[5]);
 80058ba:	4b10      	ldr	r3, [pc, #64]	@ (80058fc <LoadCtrl_MainFunction+0xd84>)
 80058bc:	795b      	ldrb	r3, [r3, #5]
 80058be:	461a      	mov	r2, r3
 80058c0:	2102      	movs	r1, #2
 80058c2:	4818      	ldr	r0, [pc, #96]	@ (8005924 <LoadCtrl_MainFunction+0xdac>)
 80058c4:	f005 f87b 	bl	800a9be <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RIN7_GPIO_Port, RIN7_Pin, LoadCtrl_StatusList[6]);
 80058c8:	4b0c      	ldr	r3, [pc, #48]	@ (80058fc <LoadCtrl_MainFunction+0xd84>)
 80058ca:	799b      	ldrb	r3, [r3, #6]
 80058cc:	461a      	mov	r2, r3
 80058ce:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80058d2:	4814      	ldr	r0, [pc, #80]	@ (8005924 <LoadCtrl_MainFunction+0xdac>)
 80058d4:	f005 f873 	bl	800a9be <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RIN8_GPIO_Port, RIN8_Pin, LoadCtrl_StatusList[7]);
 80058d8:	4b08      	ldr	r3, [pc, #32]	@ (80058fc <LoadCtrl_MainFunction+0xd84>)
 80058da:	79db      	ldrb	r3, [r3, #7]
 80058dc:	461a      	mov	r2, r3
 80058de:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80058e2:	4810      	ldr	r0, [pc, #64]	@ (8005924 <LoadCtrl_MainFunction+0xdac>)
 80058e4:	f005 f86b 	bl	800a9be <HAL_GPIO_WritePin>
	}
	else
	{
		/* Do nothing. */
	}
	LoadCtrl_MainCounter++;
 80058e8:	4b0f      	ldr	r3, [pc, #60]	@ (8005928 <LoadCtrl_MainFunction+0xdb0>)
 80058ea:	881b      	ldrh	r3, [r3, #0]
 80058ec:	3301      	adds	r3, #1
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	4b0d      	ldr	r3, [pc, #52]	@ (8005928 <LoadCtrl_MainFunction+0xdb0>)
 80058f2:	801a      	strh	r2, [r3, #0]
}
 80058f4:	bf00      	nop
 80058f6:	3708      	adds	r7, #8
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bdb0      	pop	{r4, r5, r7, pc}
 80058fc:	200000ac 	.word	0x200000ac
 8005900:	200000bc 	.word	0x200000bc
 8005904:	200000bd 	.word	0x200000bd
 8005908:	200000be 	.word	0x200000be
 800590c:	200000bf 	.word	0x200000bf
 8005910:	200000c0 	.word	0x200000c0
 8005914:	200000c1 	.word	0x200000c1
 8005918:	200000c2 	.word	0x200000c2
 800591c:	200000c3 	.word	0x200000c3
 8005920:	40010800 	.word	0x40010800
 8005924:	40010c00 	.word	0x40010c00
 8005928:	200000a4 	.word	0x200000a4

0800592c <CanH_MainFunction>:
void CanH_MainFunction(void);
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan);
void HAL_CAN_RxFifo0MsgFullCallback(CAN_HandleTypeDef *hcan);

void CanH_MainFunction(void)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
	if(1 == Can_isXcpActive) Xcp_MainFunction(); /* XCP functionality... well not XCP, but CCP, because it was easier to use with CAN standard. */
 8005932:	4b7d      	ldr	r3, [pc, #500]	@ (8005b28 <CanH_MainFunction+0x1fc>)
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	2b01      	cmp	r3, #1
 8005938:	d101      	bne.n	800593e <CanH_MainFunction+0x12>
 800593a:	f000 fa45 	bl	8005dc8 <Xcp_MainFunction>
	else
	{
		/* Do nothing. */
	}
	/* Don't attempt to send CAN messages with error. */
	if(0x04 != HAL_CAN_GetError(&hcan))
 800593e:	487b      	ldr	r0, [pc, #492]	@ (8005b2c <CanH_MainFunction+0x200>)
 8005940:	f004 f8cc 	bl	8009adc <HAL_CAN_GetError>
 8005944:	4603      	mov	r3, r0
 8005946:	2b04      	cmp	r3, #4
 8005948:	f000 80b5 	beq.w	8005ab6 <CanH_MainFunction+0x18a>
	{
		/* Pre-conditions for sending messages. CC = Communication control set to no TX by default / hard-coded by DIAG request. */
		if((FULL_COMMUNICATION == CanH_CommunicationState) &&
 800594c:	4b78      	ldr	r3, [pc, #480]	@ (8005b30 <CanH_MainFunction+0x204>)
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	2b02      	cmp	r3, #2
 8005952:	f040 80b0 	bne.w	8005ab6 <CanH_MainFunction+0x18a>
				(PARTIAL_COMMUNICATION != CanH_CommunicationState) &&
 8005956:	4b76      	ldr	r3, [pc, #472]	@ (8005b30 <CanH_MainFunction+0x204>)
 8005958:	781b      	ldrb	r3, [r3, #0]
		if((FULL_COMMUNICATION == CanH_CommunicationState) &&
 800595a:	2b03      	cmp	r3, #3
 800595c:	f000 80ab 	beq.w	8005ab6 <CanH_MainFunction+0x18a>
				CC_ACTIVE != CanH_CommunicationState)
 8005960:	4b73      	ldr	r3, [pc, #460]	@ (8005b30 <CanH_MainFunction+0x204>)
 8005962:	781b      	ldrb	r3, [r3, #0]
				(PARTIAL_COMMUNICATION != CanH_CommunicationState) &&
 8005964:	2b04      	cmp	r3, #4
 8005966:	f000 80a6 	beq.w	8005ab6 <CanH_MainFunction+0x18a>
		{
			/* StatusLoadList */
			if(0 == CanH_MainCounter % 20)
 800596a:	4b72      	ldr	r3, [pc, #456]	@ (8005b34 <CanH_MainFunction+0x208>)
 800596c:	6819      	ldr	r1, [r3, #0]
 800596e:	4b72      	ldr	r3, [pc, #456]	@ (8005b38 <CanH_MainFunction+0x20c>)
 8005970:	fba3 2301 	umull	r2, r3, r3, r1
 8005974:	091a      	lsrs	r2, r3, #4
 8005976:	4613      	mov	r3, r2
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	4413      	add	r3, r2
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	1aca      	subs	r2, r1, r3
 8005980:	2a00      	cmp	r2, #0
 8005982:	d13f      	bne.n	8005a04 <CanH_MainFunction+0xd8>
			{
				CanH_TxData[0] = CanH_TxSig_StatusList1;
 8005984:	4b6d      	ldr	r3, [pc, #436]	@ (8005b3c <CanH_MainFunction+0x210>)
 8005986:	781a      	ldrb	r2, [r3, #0]
 8005988:	4b6d      	ldr	r3, [pc, #436]	@ (8005b40 <CanH_MainFunction+0x214>)
 800598a:	701a      	strb	r2, [r3, #0]
				CanH_TxData[1] = CanH_TxSig_StatusList2;
 800598c:	4b6d      	ldr	r3, [pc, #436]	@ (8005b44 <CanH_MainFunction+0x218>)
 800598e:	781a      	ldrb	r2, [r3, #0]
 8005990:	4b6b      	ldr	r3, [pc, #428]	@ (8005b40 <CanH_MainFunction+0x214>)
 8005992:	705a      	strb	r2, [r3, #1]
				CanH_TxData[2] = CanH_TxSig_StatusList3;
 8005994:	4b6c      	ldr	r3, [pc, #432]	@ (8005b48 <CanH_MainFunction+0x21c>)
 8005996:	781a      	ldrb	r2, [r3, #0]
 8005998:	4b69      	ldr	r3, [pc, #420]	@ (8005b40 <CanH_MainFunction+0x214>)
 800599a:	709a      	strb	r2, [r3, #2]
				CanH_TxData[3] = CanH_TxSig_StatusList4;
 800599c:	4b6b      	ldr	r3, [pc, #428]	@ (8005b4c <CanH_MainFunction+0x220>)
 800599e:	781a      	ldrb	r2, [r3, #0]
 80059a0:	4b67      	ldr	r3, [pc, #412]	@ (8005b40 <CanH_MainFunction+0x214>)
 80059a2:	70da      	strb	r2, [r3, #3]
				CanH_TxData[4] = CanH_TxSig_StatusList5;
 80059a4:	4b6a      	ldr	r3, [pc, #424]	@ (8005b50 <CanH_MainFunction+0x224>)
 80059a6:	781a      	ldrb	r2, [r3, #0]
 80059a8:	4b65      	ldr	r3, [pc, #404]	@ (8005b40 <CanH_MainFunction+0x214>)
 80059aa:	711a      	strb	r2, [r3, #4]
				CanH_TxData[5] = CanH_TxSig_StatusList6;
 80059ac:	4b69      	ldr	r3, [pc, #420]	@ (8005b54 <CanH_MainFunction+0x228>)
 80059ae:	781a      	ldrb	r2, [r3, #0]
 80059b0:	4b63      	ldr	r3, [pc, #396]	@ (8005b40 <CanH_MainFunction+0x214>)
 80059b2:	715a      	strb	r2, [r3, #5]
				CanH_TxData[6] = CanH_TxSig_StatusList7;
 80059b4:	4b68      	ldr	r3, [pc, #416]	@ (8005b58 <CanH_MainFunction+0x22c>)
 80059b6:	781a      	ldrb	r2, [r3, #0]
 80059b8:	4b61      	ldr	r3, [pc, #388]	@ (8005b40 <CanH_MainFunction+0x214>)
 80059ba:	719a      	strb	r2, [r3, #6]
				CanH_TxData[7] = CanH_TxSig_StatusList8;
 80059bc:	4b67      	ldr	r3, [pc, #412]	@ (8005b5c <CanH_MainFunction+0x230>)
 80059be:	781a      	ldrb	r2, [r3, #0]
 80059c0:	4b5f      	ldr	r3, [pc, #380]	@ (8005b40 <CanH_MainFunction+0x214>)
 80059c2:	71da      	strb	r2, [r3, #7]
				CanH_TxHeader.DLC = 8;
 80059c4:	4b66      	ldr	r3, [pc, #408]	@ (8005b60 <CanH_MainFunction+0x234>)
 80059c6:	2208      	movs	r2, #8
 80059c8:	611a      	str	r2, [r3, #16]
				CanH_TxHeader.StdId = 0x103;
 80059ca:	4b65      	ldr	r3, [pc, #404]	@ (8005b60 <CanH_MainFunction+0x234>)
 80059cc:	f240 1203 	movw	r2, #259	@ 0x103
 80059d0:	601a      	str	r2, [r3, #0]
				HAL_CAN_AddTxMessage(&hcan, &CanH_TxHeader, CanH_TxData, &CanH_TxMailbox);
 80059d2:	4b64      	ldr	r3, [pc, #400]	@ (8005b64 <CanH_MainFunction+0x238>)
 80059d4:	4a5a      	ldr	r2, [pc, #360]	@ (8005b40 <CanH_MainFunction+0x214>)
 80059d6:	4962      	ldr	r1, [pc, #392]	@ (8005b60 <CanH_MainFunction+0x234>)
 80059d8:	4854      	ldr	r0, [pc, #336]	@ (8005b2c <CanH_MainFunction+0x200>)
 80059da:	f003 fc39 	bl	8009250 <HAL_CAN_AddTxMessage>
				for(uint8 i = 0; i < 8; i++) CanH_TxData[i] = 0;
 80059de:	2300      	movs	r3, #0
 80059e0:	71fb      	strb	r3, [r7, #7]
 80059e2:	e006      	b.n	80059f2 <CanH_MainFunction+0xc6>
 80059e4:	79fb      	ldrb	r3, [r7, #7]
 80059e6:	4a56      	ldr	r2, [pc, #344]	@ (8005b40 <CanH_MainFunction+0x214>)
 80059e8:	2100      	movs	r1, #0
 80059ea:	54d1      	strb	r1, [r2, r3]
 80059ec:	79fb      	ldrb	r3, [r7, #7]
 80059ee:	3301      	adds	r3, #1
 80059f0:	71fb      	strb	r3, [r7, #7]
 80059f2:	79fb      	ldrb	r3, [r7, #7]
 80059f4:	2b07      	cmp	r3, #7
 80059f6:	d9f5      	bls.n	80059e4 <CanH_MainFunction+0xb8>
				CanH_TxHeader.DLC = 0;
 80059f8:	4b59      	ldr	r3, [pc, #356]	@ (8005b60 <CanH_MainFunction+0x234>)
 80059fa:	2200      	movs	r2, #0
 80059fc:	611a      	str	r2, [r3, #16]
				CanH_TxHeader.StdId = 0;
 80059fe:	4b58      	ldr	r3, [pc, #352]	@ (8005b60 <CanH_MainFunction+0x234>)
 8005a00:	2200      	movs	r2, #0
 8005a02:	601a      	str	r2, [r3, #0]
			else
			{
				/* Do nothing. */
			}
			/* StatusPowerSupplyNetwork */
			if(0 == CanH_MainCounter % 20)
 8005a04:	4b4b      	ldr	r3, [pc, #300]	@ (8005b34 <CanH_MainFunction+0x208>)
 8005a06:	6819      	ldr	r1, [r3, #0]
 8005a08:	4b4b      	ldr	r3, [pc, #300]	@ (8005b38 <CanH_MainFunction+0x20c>)
 8005a0a:	fba3 2301 	umull	r2, r3, r3, r1
 8005a0e:	091a      	lsrs	r2, r3, #4
 8005a10:	4613      	mov	r3, r2
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	4413      	add	r3, r2
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	1aca      	subs	r2, r1, r3
 8005a1a:	2a00      	cmp	r2, #0
 8005a1c:	d119      	bne.n	8005a52 <CanH_MainFunction+0x126>
			{
				CanH_TxData[0] = CanH_TxSig_PowerSupplyNetworkWarning;
 8005a1e:	4b52      	ldr	r3, [pc, #328]	@ (8005b68 <CanH_MainFunction+0x23c>)
 8005a20:	781a      	ldrb	r2, [r3, #0]
 8005a22:	4b47      	ldr	r3, [pc, #284]	@ (8005b40 <CanH_MainFunction+0x214>)
 8005a24:	701a      	strb	r2, [r3, #0]
				CanH_TxHeader.DLC = 1;
 8005a26:	4b4e      	ldr	r3, [pc, #312]	@ (8005b60 <CanH_MainFunction+0x234>)
 8005a28:	2201      	movs	r2, #1
 8005a2a:	611a      	str	r2, [r3, #16]
				CanH_TxHeader.StdId = 0x104;
 8005a2c:	4b4c      	ldr	r3, [pc, #304]	@ (8005b60 <CanH_MainFunction+0x234>)
 8005a2e:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8005a32:	601a      	str	r2, [r3, #0]
				HAL_CAN_AddTxMessage(&hcan, &CanH_TxHeader, CanH_TxData, &CanH_TxMailbox);
 8005a34:	4b4b      	ldr	r3, [pc, #300]	@ (8005b64 <CanH_MainFunction+0x238>)
 8005a36:	4a42      	ldr	r2, [pc, #264]	@ (8005b40 <CanH_MainFunction+0x214>)
 8005a38:	4949      	ldr	r1, [pc, #292]	@ (8005b60 <CanH_MainFunction+0x234>)
 8005a3a:	483c      	ldr	r0, [pc, #240]	@ (8005b2c <CanH_MainFunction+0x200>)
 8005a3c:	f003 fc08 	bl	8009250 <HAL_CAN_AddTxMessage>
				CanH_TxData[0] = 0;
 8005a40:	4b3f      	ldr	r3, [pc, #252]	@ (8005b40 <CanH_MainFunction+0x214>)
 8005a42:	2200      	movs	r2, #0
 8005a44:	701a      	strb	r2, [r3, #0]
				CanH_TxHeader.DLC = 0;
 8005a46:	4b46      	ldr	r3, [pc, #280]	@ (8005b60 <CanH_MainFunction+0x234>)
 8005a48:	2200      	movs	r2, #0
 8005a4a:	611a      	str	r2, [r3, #16]
				CanH_TxHeader.StdId = 0;
 8005a4c:	4b44      	ldr	r3, [pc, #272]	@ (8005b60 <CanH_MainFunction+0x234>)
 8005a4e:	2200      	movs	r2, #0
 8005a50:	601a      	str	r2, [r3, #0]
			else
			{
				/* Do nothing */
			}
			/* StatusVoltageCurrent */
			if(0 == CanH_MainCounter % 20)
 8005a52:	4b38      	ldr	r3, [pc, #224]	@ (8005b34 <CanH_MainFunction+0x208>)
 8005a54:	6819      	ldr	r1, [r3, #0]
 8005a56:	4b38      	ldr	r3, [pc, #224]	@ (8005b38 <CanH_MainFunction+0x20c>)
 8005a58:	fba3 2301 	umull	r2, r3, r3, r1
 8005a5c:	091a      	lsrs	r2, r3, #4
 8005a5e:	4613      	mov	r3, r2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	4413      	add	r3, r2
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	1aca      	subs	r2, r1, r3
 8005a68:	2a00      	cmp	r2, #0
 8005a6a:	d124      	bne.n	8005ab6 <CanH_MainFunction+0x18a>
			{
				CanH_TxData[1] = CanH_TxSig_TotalCurrentConsumption;
 8005a6c:	4b3f      	ldr	r3, [pc, #252]	@ (8005b6c <CanH_MainFunction+0x240>)
 8005a6e:	781a      	ldrb	r2, [r3, #0]
 8005a70:	4b33      	ldr	r3, [pc, #204]	@ (8005b40 <CanH_MainFunction+0x214>)
 8005a72:	705a      	strb	r2, [r3, #1]
				CanH_TxData[2] = CanH_TxSig_TotalCurrentConsumption2;
 8005a74:	4b3e      	ldr	r3, [pc, #248]	@ (8005b70 <CanH_MainFunction+0x244>)
 8005a76:	781a      	ldrb	r2, [r3, #0]
 8005a78:	4b31      	ldr	r3, [pc, #196]	@ (8005b40 <CanH_MainFunction+0x214>)
 8005a7a:	709a      	strb	r2, [r3, #2]
				CanH_TxData[0] = CanH_TxSig_SupplyVoltage;
 8005a7c:	4b3d      	ldr	r3, [pc, #244]	@ (8005b74 <CanH_MainFunction+0x248>)
 8005a7e:	781a      	ldrb	r2, [r3, #0]
 8005a80:	4b2f      	ldr	r3, [pc, #188]	@ (8005b40 <CanH_MainFunction+0x214>)
 8005a82:	701a      	strb	r2, [r3, #0]
				CanH_TxHeader.DLC = 3;
 8005a84:	4b36      	ldr	r3, [pc, #216]	@ (8005b60 <CanH_MainFunction+0x234>)
 8005a86:	2203      	movs	r2, #3
 8005a88:	611a      	str	r2, [r3, #16]
				CanH_TxHeader.StdId = 0x107;
 8005a8a:	4b35      	ldr	r3, [pc, #212]	@ (8005b60 <CanH_MainFunction+0x234>)
 8005a8c:	f240 1207 	movw	r2, #263	@ 0x107
 8005a90:	601a      	str	r2, [r3, #0]
				HAL_CAN_AddTxMessage(&hcan, &CanH_TxHeader, CanH_TxData, &CanH_TxMailbox);
 8005a92:	4b34      	ldr	r3, [pc, #208]	@ (8005b64 <CanH_MainFunction+0x238>)
 8005a94:	4a2a      	ldr	r2, [pc, #168]	@ (8005b40 <CanH_MainFunction+0x214>)
 8005a96:	4932      	ldr	r1, [pc, #200]	@ (8005b60 <CanH_MainFunction+0x234>)
 8005a98:	4824      	ldr	r0, [pc, #144]	@ (8005b2c <CanH_MainFunction+0x200>)
 8005a9a:	f003 fbd9 	bl	8009250 <HAL_CAN_AddTxMessage>
				CanH_TxData[0] = 0;
 8005a9e:	4b28      	ldr	r3, [pc, #160]	@ (8005b40 <CanH_MainFunction+0x214>)
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	701a      	strb	r2, [r3, #0]
				CanH_TxData[1] = 0;
 8005aa4:	4b26      	ldr	r3, [pc, #152]	@ (8005b40 <CanH_MainFunction+0x214>)
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	705a      	strb	r2, [r3, #1]
				CanH_TxHeader.DLC = 0;
 8005aaa:	4b2d      	ldr	r3, [pc, #180]	@ (8005b60 <CanH_MainFunction+0x234>)
 8005aac:	2200      	movs	r2, #0
 8005aae:	611a      	str	r2, [r3, #16]
				CanH_TxHeader.StdId = 0;
 8005ab0:	4b2b      	ldr	r3, [pc, #172]	@ (8005b60 <CanH_MainFunction+0x234>)
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	601a      	str	r2, [r3, #0]
	else
	{
		/* Do nothing. */
	}
	/* Request TRCV off. */
	if(NO_COMMUNICATION == CanH_CommunicationState)
 8005ab6:	4b1e      	ldr	r3, [pc, #120]	@ (8005b30 <CanH_MainFunction+0x204>)
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d102      	bne.n	8005ac4 <CanH_MainFunction+0x198>
	{
		CanH_RequestBusSleep = 1;
 8005abe:	4b2e      	ldr	r3, [pc, #184]	@ (8005b78 <CanH_MainFunction+0x24c>)
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	701a      	strb	r2, [r3, #0]
	else
	{
		/* Do nothing.  */
	}
	/* Keep SW in RUN for at least 10 seconds. */
	if(2000 <= CanH_NoCommCounter)
 8005ac4:	4b2d      	ldr	r3, [pc, #180]	@ (8005b7c <CanH_MainFunction+0x250>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8005acc:	d302      	bcc.n	8005ad4 <CanH_MainFunction+0x1a8>
	{
		CanH_CommunicationState = NO_COMMUNICATION;
 8005ace:	4b18      	ldr	r3, [pc, #96]	@ (8005b30 <CanH_MainFunction+0x204>)
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	701a      	strb	r2, [r3, #0]
	else
	{
		/* Do nothing. */
	}
	/* Switch TRCV off. */
	if(1 == CanH_RequestBusSleep)
 8005ad4:	4b28      	ldr	r3, [pc, #160]	@ (8005b78 <CanH_MainFunction+0x24c>)
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d108      	bne.n	8005aee <CanH_MainFunction+0x1c2>
	{
		if(0 == HAL_CAN_IsSleepActive(&hcan))
 8005adc:	4813      	ldr	r0, [pc, #76]	@ (8005b2c <CanH_MainFunction+0x200>)
 8005ade:	f003 fb98 	bl	8009212 <HAL_CAN_IsSleepActive>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d102      	bne.n	8005aee <CanH_MainFunction+0x1c2>
		{
			HAL_CAN_RequestSleep(&hcan);
 8005ae8:	4810      	ldr	r0, [pc, #64]	@ (8005b2c <CanH_MainFunction+0x200>)
 8005aea:	f003 fb6e 	bl	80091ca <HAL_CAN_RequestSleep>
	}
	else
	{
		/* Do nothing. */
	}
	CanH_NoCommCounter++;
 8005aee:	4b23      	ldr	r3, [pc, #140]	@ (8005b7c <CanH_MainFunction+0x250>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	3301      	adds	r3, #1
 8005af4:	4a21      	ldr	r2, [pc, #132]	@ (8005b7c <CanH_MainFunction+0x250>)
 8005af6:	6013      	str	r3, [r2, #0]
	CanH_MainCounter++;
 8005af8:	4b0e      	ldr	r3, [pc, #56]	@ (8005b34 <CanH_MainFunction+0x208>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	3301      	adds	r3, #1
 8005afe:	4a0d      	ldr	r2, [pc, #52]	@ (8005b34 <CanH_MainFunction+0x208>)
 8005b00:	6013      	str	r3, [r2, #0]
	for(uint8 i = 0; i < 8; i++) CanH_TxData[i] = 0;
 8005b02:	2300      	movs	r3, #0
 8005b04:	71bb      	strb	r3, [r7, #6]
 8005b06:	e006      	b.n	8005b16 <CanH_MainFunction+0x1ea>
 8005b08:	79bb      	ldrb	r3, [r7, #6]
 8005b0a:	4a0d      	ldr	r2, [pc, #52]	@ (8005b40 <CanH_MainFunction+0x214>)
 8005b0c:	2100      	movs	r1, #0
 8005b0e:	54d1      	strb	r1, [r2, r3]
 8005b10:	79bb      	ldrb	r3, [r7, #6]
 8005b12:	3301      	adds	r3, #1
 8005b14:	71bb      	strb	r3, [r7, #6]
 8005b16:	79bb      	ldrb	r3, [r7, #6]
 8005b18:	2b07      	cmp	r3, #7
 8005b1a:	d9f5      	bls.n	8005b08 <CanH_MainFunction+0x1dc>
}
 8005b1c:	bf00      	nop
 8005b1e:	bf00      	nop
 8005b20:	3708      	adds	r7, #8
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	200001a4 	.word	0x200001a4
 8005b2c:	20000838 	.word	0x20000838
 8005b30:	20000158 	.word	0x20000158
 8005b34:	200000e0 	.word	0x200000e0
 8005b38:	cccccccd 	.word	0xcccccccd
 8005b3c:	200000bc 	.word	0x200000bc
 8005b40:	20000120 	.word	0x20000120
 8005b44:	200000bd 	.word	0x200000bd
 8005b48:	200000be 	.word	0x200000be
 8005b4c:	200000bf 	.word	0x200000bf
 8005b50:	200000c0 	.word	0x200000c0
 8005b54:	200000c1 	.word	0x200000c1
 8005b58:	200000c2 	.word	0x200000c2
 8005b5c:	200000c3 	.word	0x200000c3
 8005b60:	20000108 	.word	0x20000108
 8005b64:	20000128 	.word	0x20000128
 8005b68:	200000c7 	.word	0x200000c7
 8005b6c:	200000c5 	.word	0x200000c5
 8005b70:	200000c6 	.word	0x200000c6
 8005b74:	200000c4 	.word	0x200000c4
 8005b78:	20000150 	.word	0x20000150
 8005b7c:	20000154 	.word	0x20000154

08005b80 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
	/* Pending and full callback to prevent messages being lost. */
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &CanH_RxHeader, CanH_RxData);
 8005b88:	4b50      	ldr	r3, [pc, #320]	@ (8005ccc <HAL_CAN_RxFifo0MsgPendingCallback+0x14c>)
 8005b8a:	4a51      	ldr	r2, [pc, #324]	@ (8005cd0 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8005b8c:	2100      	movs	r1, #0
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f003 fc2d 	bl	80093ee <HAL_CAN_GetRxMessage>
	/* CommandLoad */
	if(0x10e == CanH_RxHeader.StdId)
 8005b94:	4b4e      	ldr	r3, [pc, #312]	@ (8005cd0 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8005b9c:	d11f      	bne.n	8005bde <HAL_CAN_RxFifo0MsgPendingCallback+0x5e>
	{
		CanH_RxSig_CommandList1 = CanH_RxData[0];
 8005b9e:	4b4b      	ldr	r3, [pc, #300]	@ (8005ccc <HAL_CAN_RxFifo0MsgPendingCallback+0x14c>)
 8005ba0:	781a      	ldrb	r2, [r3, #0]
 8005ba2:	4b4c      	ldr	r3, [pc, #304]	@ (8005cd4 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8005ba4:	701a      	strb	r2, [r3, #0]
		CanH_RxSig_CommandList2 = CanH_RxData[1];
 8005ba6:	4b49      	ldr	r3, [pc, #292]	@ (8005ccc <HAL_CAN_RxFifo0MsgPendingCallback+0x14c>)
 8005ba8:	785a      	ldrb	r2, [r3, #1]
 8005baa:	4b4b      	ldr	r3, [pc, #300]	@ (8005cd8 <HAL_CAN_RxFifo0MsgPendingCallback+0x158>)
 8005bac:	701a      	strb	r2, [r3, #0]
		CanH_RxSig_CommandList3 = CanH_RxData[2];
 8005bae:	4b47      	ldr	r3, [pc, #284]	@ (8005ccc <HAL_CAN_RxFifo0MsgPendingCallback+0x14c>)
 8005bb0:	789a      	ldrb	r2, [r3, #2]
 8005bb2:	4b4a      	ldr	r3, [pc, #296]	@ (8005cdc <HAL_CAN_RxFifo0MsgPendingCallback+0x15c>)
 8005bb4:	701a      	strb	r2, [r3, #0]
		CanH_RxSig_CommandList4 = CanH_RxData[3];
 8005bb6:	4b45      	ldr	r3, [pc, #276]	@ (8005ccc <HAL_CAN_RxFifo0MsgPendingCallback+0x14c>)
 8005bb8:	78da      	ldrb	r2, [r3, #3]
 8005bba:	4b49      	ldr	r3, [pc, #292]	@ (8005ce0 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>)
 8005bbc:	701a      	strb	r2, [r3, #0]
		CanH_RxSig_CommandList5 = CanH_RxData[4];
 8005bbe:	4b43      	ldr	r3, [pc, #268]	@ (8005ccc <HAL_CAN_RxFifo0MsgPendingCallback+0x14c>)
 8005bc0:	791a      	ldrb	r2, [r3, #4]
 8005bc2:	4b48      	ldr	r3, [pc, #288]	@ (8005ce4 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>)
 8005bc4:	701a      	strb	r2, [r3, #0]
		CanH_RxSig_CommandList6 = CanH_RxData[5];
 8005bc6:	4b41      	ldr	r3, [pc, #260]	@ (8005ccc <HAL_CAN_RxFifo0MsgPendingCallback+0x14c>)
 8005bc8:	795a      	ldrb	r2, [r3, #5]
 8005bca:	4b47      	ldr	r3, [pc, #284]	@ (8005ce8 <HAL_CAN_RxFifo0MsgPendingCallback+0x168>)
 8005bcc:	701a      	strb	r2, [r3, #0]
		CanH_RxSig_CommandList7 = CanH_RxData[6];
 8005bce:	4b3f      	ldr	r3, [pc, #252]	@ (8005ccc <HAL_CAN_RxFifo0MsgPendingCallback+0x14c>)
 8005bd0:	799a      	ldrb	r2, [r3, #6]
 8005bd2:	4b46      	ldr	r3, [pc, #280]	@ (8005cec <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>)
 8005bd4:	701a      	strb	r2, [r3, #0]
		CanH_RxSig_CommandList8 = CanH_RxData[7];
 8005bd6:	4b3d      	ldr	r3, [pc, #244]	@ (8005ccc <HAL_CAN_RxFifo0MsgPendingCallback+0x14c>)
 8005bd8:	79da      	ldrb	r2, [r3, #7]
 8005bda:	4b45      	ldr	r3, [pc, #276]	@ (8005cf0 <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 8005bdc:	701a      	strb	r2, [r3, #0]
	else
	{
		/* Do nothing. */
	}
	/* NM3 */
	if(0x510 == CanH_RxHeader.StdId &&
 8005bde:	4b3c      	ldr	r3, [pc, #240]	@ (8005cd0 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f5b3 6fa2 	cmp.w	r3, #1296	@ 0x510
 8005be6:	d10d      	bne.n	8005c04 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>
			0x10 == CanH_RxData[0])
 8005be8:	4b38      	ldr	r3, [pc, #224]	@ (8005ccc <HAL_CAN_RxFifo0MsgPendingCallback+0x14c>)
 8005bea:	781b      	ldrb	r3, [r3, #0]
	if(0x510 == CanH_RxHeader.StdId &&
 8005bec:	2b10      	cmp	r3, #16
 8005bee:	d109      	bne.n	8005c04 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>
	{
		if(CanH_CommunicationState != CC_ACTIVE) CanH_CommunicationState = FULL_COMMUNICATION;
 8005bf0:	4b40      	ldr	r3, [pc, #256]	@ (8005cf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	2b04      	cmp	r3, #4
 8005bf6:	d002      	beq.n	8005bfe <HAL_CAN_RxFifo0MsgPendingCallback+0x7e>
 8005bf8:	4b3e      	ldr	r3, [pc, #248]	@ (8005cf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	701a      	strb	r2, [r3, #0]
		else
		{
			/* Do nothing. */
		}
		CanH_NoCommCounter = 0;
 8005bfe:	4b3e      	ldr	r3, [pc, #248]	@ (8005cf8 <HAL_CAN_RxFifo0MsgPendingCallback+0x178>)
 8005c00:	2200      	movs	r2, #0
 8005c02:	601a      	str	r2, [r3, #0]
	else
	{
		/* Do nothing. */
	}
	/* XCP / CCP */
	if(0x602 == CanH_RxHeader.StdId)
 8005c04:	4b32      	ldr	r3, [pc, #200]	@ (8005cd0 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f240 6202 	movw	r2, #1538	@ 0x602
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d119      	bne.n	8005c44 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>
	{
		CanH_XcpRxHeader.StdId = CanH_RxHeader.StdId;
 8005c10:	4b2f      	ldr	r3, [pc, #188]	@ (8005cd0 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a39      	ldr	r2, [pc, #228]	@ (8005cfc <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 8005c16:	6013      	str	r3, [r2, #0]
		CanH_XcpRxHeader.DLC = CanH_RxHeader.DLC;
 8005c18:	4b2d      	ldr	r3, [pc, #180]	@ (8005cd0 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	4a37      	ldr	r2, [pc, #220]	@ (8005cfc <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 8005c1e:	6113      	str	r3, [r2, #16]
		Can_isXcpActive = 1;
 8005c20:	4b37      	ldr	r3, [pc, #220]	@ (8005d00 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 8005c22:	2201      	movs	r2, #1
 8005c24:	701a      	strb	r2, [r3, #0]
		for(uint8 i = 0; i < 8; i++) CanH_XcpArray[i] = CanH_RxData[i];
 8005c26:	2300      	movs	r3, #0
 8005c28:	73fb      	strb	r3, [r7, #15]
 8005c2a:	e008      	b.n	8005c3e <HAL_CAN_RxFifo0MsgPendingCallback+0xbe>
 8005c2c:	7bfa      	ldrb	r2, [r7, #15]
 8005c2e:	7bfb      	ldrb	r3, [r7, #15]
 8005c30:	4926      	ldr	r1, [pc, #152]	@ (8005ccc <HAL_CAN_RxFifo0MsgPendingCallback+0x14c>)
 8005c32:	5c89      	ldrb	r1, [r1, r2]
 8005c34:	4a33      	ldr	r2, [pc, #204]	@ (8005d04 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 8005c36:	54d1      	strb	r1, [r2, r3]
 8005c38:	7bfb      	ldrb	r3, [r7, #15]
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	73fb      	strb	r3, [r7, #15]
 8005c3e:	7bfb      	ldrb	r3, [r7, #15]
 8005c40:	2b07      	cmp	r3, #7
 8005c42:	d9f3      	bls.n	8005c2c <HAL_CAN_RxFifo0MsgPendingCallback+0xac>
	else
	{
		/* Do nothing. */
	}
	/* DIAG */
	if(0x702 == CanH_RxHeader.StdId)
 8005c44:	4b22      	ldr	r3, [pc, #136]	@ (8005cd0 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f240 7202 	movw	r2, #1794	@ 0x702
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d116      	bne.n	8005c7e <HAL_CAN_RxFifo0MsgPendingCallback+0xfe>
	{
		CanH_DiagRxHeader.StdId = CanH_RxHeader.StdId;
 8005c50:	4b1f      	ldr	r3, [pc, #124]	@ (8005cd0 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a2c      	ldr	r2, [pc, #176]	@ (8005d08 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8005c56:	6013      	str	r3, [r2, #0]
		CanH_DiagRxHeader.DLC = CanH_RxHeader.DLC;
 8005c58:	4b1d      	ldr	r3, [pc, #116]	@ (8005cd0 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	4a2a      	ldr	r2, [pc, #168]	@ (8005d08 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8005c5e:	6113      	str	r3, [r2, #16]
		for(uint8 i = 0; i < 8; i++) CanH_DiagArray[i] = CanH_RxData[i];
 8005c60:	2300      	movs	r3, #0
 8005c62:	73bb      	strb	r3, [r7, #14]
 8005c64:	e008      	b.n	8005c78 <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>
 8005c66:	7bba      	ldrb	r2, [r7, #14]
 8005c68:	7bbb      	ldrb	r3, [r7, #14]
 8005c6a:	4918      	ldr	r1, [pc, #96]	@ (8005ccc <HAL_CAN_RxFifo0MsgPendingCallback+0x14c>)
 8005c6c:	5c89      	ldrb	r1, [r1, r2]
 8005c6e:	4a27      	ldr	r2, [pc, #156]	@ (8005d0c <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8005c70:	54d1      	strb	r1, [r2, r3]
 8005c72:	7bbb      	ldrb	r3, [r7, #14]
 8005c74:	3301      	adds	r3, #1
 8005c76:	73bb      	strb	r3, [r7, #14]
 8005c78:	7bbb      	ldrb	r3, [r7, #14]
 8005c7a:	2b07      	cmp	r3, #7
 8005c7c:	d9f3      	bls.n	8005c66 <HAL_CAN_RxFifo0MsgPendingCallback+0xe6>
	}
	else
	{
		/* Do nothing. */
	}
	CanH_RxHeader.DLC = 0;
 8005c7e:	4b14      	ldr	r3, [pc, #80]	@ (8005cd0 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8005c80:	2200      	movs	r2, #0
 8005c82:	611a      	str	r2, [r3, #16]
	CanH_RxHeader.ExtId = 0;
 8005c84:	4b12      	ldr	r3, [pc, #72]	@ (8005cd0 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8005c86:	2200      	movs	r2, #0
 8005c88:	605a      	str	r2, [r3, #4]
	CanH_RxHeader.FilterMatchIndex = 0;
 8005c8a:	4b11      	ldr	r3, [pc, #68]	@ (8005cd0 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	619a      	str	r2, [r3, #24]
	CanH_RxHeader.IDE = 0;
 8005c90:	4b0f      	ldr	r3, [pc, #60]	@ (8005cd0 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8005c92:	2200      	movs	r2, #0
 8005c94:	609a      	str	r2, [r3, #8]
	CanH_RxHeader.RTR = 0;
 8005c96:	4b0e      	ldr	r3, [pc, #56]	@ (8005cd0 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8005c98:	2200      	movs	r2, #0
 8005c9a:	60da      	str	r2, [r3, #12]
	CanH_RxHeader.StdId = 0;
 8005c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8005cd0 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	601a      	str	r2, [r3, #0]
	CanH_RxHeader.Timestamp = 0;
 8005ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8005cd0 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	615a      	str	r2, [r3, #20]
	for(uint8 i = 0; i < 8; i++) CanH_RxData[i] = 0;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	737b      	strb	r3, [r7, #13]
 8005cac:	e006      	b.n	8005cbc <HAL_CAN_RxFifo0MsgPendingCallback+0x13c>
 8005cae:	7b7b      	ldrb	r3, [r7, #13]
 8005cb0:	4a06      	ldr	r2, [pc, #24]	@ (8005ccc <HAL_CAN_RxFifo0MsgPendingCallback+0x14c>)
 8005cb2:	2100      	movs	r1, #0
 8005cb4:	54d1      	strb	r1, [r2, r3]
 8005cb6:	7b7b      	ldrb	r3, [r7, #13]
 8005cb8:	3301      	adds	r3, #1
 8005cba:	737b      	strb	r3, [r7, #13]
 8005cbc:	7b7b      	ldrb	r3, [r7, #13]
 8005cbe:	2b07      	cmp	r3, #7
 8005cc0:	d9f5      	bls.n	8005cae <HAL_CAN_RxFifo0MsgPendingCallback+0x12e>
}
 8005cc2:	bf00      	nop
 8005cc4:	bf00      	nop
 8005cc6:	3710      	adds	r7, #16
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}
 8005ccc:	20000100 	.word	0x20000100
 8005cd0:	200000e4 	.word	0x200000e4
 8005cd4:	20000000 	.word	0x20000000
 8005cd8:	20000001 	.word	0x20000001
 8005cdc:	20000002 	.word	0x20000002
 8005ce0:	20000003 	.word	0x20000003
 8005ce4:	20000004 	.word	0x20000004
 8005ce8:	20000005 	.word	0x20000005
 8005cec:	20000006 	.word	0x20000006
 8005cf0:	20000007 	.word	0x20000007
 8005cf4:	20000158 	.word	0x20000158
 8005cf8:	20000154 	.word	0x20000154
 8005cfc:	20000188 	.word	0x20000188
 8005d00:	200001a4 	.word	0x200001a4
 8005d04:	2000015c 	.word	0x2000015c
 8005d08:	2000016c 	.word	0x2000016c
 8005d0c:	20000164 	.word	0x20000164

08005d10 <Xcp_PositiveAcknowledge>:
void Xcp_MainFunction(void);
/* FUNCTIONS STOP */
/* FUNCTIONS START */
/* Positive response to XCP request. */
void Xcp_PositiveAcknowledge(void)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b082      	sub	sp, #8
 8005d14:	af00      	add	r7, sp, #0
	CanH_XcpTxHeader.DLC = CanH_XcpRxHeader.DLC;
 8005d16:	4b26      	ldr	r3, [pc, #152]	@ (8005db0 <Xcp_PositiveAcknowledge+0xa0>)
 8005d18:	691b      	ldr	r3, [r3, #16]
 8005d1a:	4a26      	ldr	r2, [pc, #152]	@ (8005db4 <Xcp_PositiveAcknowledge+0xa4>)
 8005d1c:	6113      	str	r3, [r2, #16]
	CanH_XcpTxHeader.StdId = CanH_XcpRxHeader.StdId + 1;
 8005d1e:	4b24      	ldr	r3, [pc, #144]	@ (8005db0 <Xcp_PositiveAcknowledge+0xa0>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	3301      	adds	r3, #1
 8005d24:	4a23      	ldr	r2, [pc, #140]	@ (8005db4 <Xcp_PositiveAcknowledge+0xa4>)
 8005d26:	6013      	str	r3, [r2, #0]
	CanH_XcpTxData[0] = 0xFF;
 8005d28:	4b23      	ldr	r3, [pc, #140]	@ (8005db8 <Xcp_PositiveAcknowledge+0xa8>)
 8005d2a:	22ff      	movs	r2, #255	@ 0xff
 8005d2c:	701a      	strb	r2, [r3, #0]
	CanH_XcpTxData[1] = 0x00;
 8005d2e:	4b22      	ldr	r3, [pc, #136]	@ (8005db8 <Xcp_PositiveAcknowledge+0xa8>)
 8005d30:	2200      	movs	r2, #0
 8005d32:	705a      	strb	r2, [r3, #1]
	CanH_XcpTxData[2] = CanH_XcpArray[1];
 8005d34:	4b21      	ldr	r3, [pc, #132]	@ (8005dbc <Xcp_PositiveAcknowledge+0xac>)
 8005d36:	785a      	ldrb	r2, [r3, #1]
 8005d38:	4b1f      	ldr	r3, [pc, #124]	@ (8005db8 <Xcp_PositiveAcknowledge+0xa8>)
 8005d3a:	709a      	strb	r2, [r3, #2]
	CanH_XcpTxData[3] = CanH_XcpArray[3];
 8005d3c:	4b1f      	ldr	r3, [pc, #124]	@ (8005dbc <Xcp_PositiveAcknowledge+0xac>)
 8005d3e:	78da      	ldrb	r2, [r3, #3]
 8005d40:	4b1d      	ldr	r3, [pc, #116]	@ (8005db8 <Xcp_PositiveAcknowledge+0xa8>)
 8005d42:	70da      	strb	r2, [r3, #3]
	CanH_XcpTxData[4] = CanH_XcpArray[4];
 8005d44:	4b1d      	ldr	r3, [pc, #116]	@ (8005dbc <Xcp_PositiveAcknowledge+0xac>)
 8005d46:	791a      	ldrb	r2, [r3, #4]
 8005d48:	4b1b      	ldr	r3, [pc, #108]	@ (8005db8 <Xcp_PositiveAcknowledge+0xa8>)
 8005d4a:	711a      	strb	r2, [r3, #4]
	CanH_XcpTxData[5] = CanH_XcpArray[5];
 8005d4c:	4b1b      	ldr	r3, [pc, #108]	@ (8005dbc <Xcp_PositiveAcknowledge+0xac>)
 8005d4e:	795a      	ldrb	r2, [r3, #5]
 8005d50:	4b19      	ldr	r3, [pc, #100]	@ (8005db8 <Xcp_PositiveAcknowledge+0xa8>)
 8005d52:	715a      	strb	r2, [r3, #5]
	CanH_XcpTxData[6] = CanH_XcpArray[6];
 8005d54:	4b19      	ldr	r3, [pc, #100]	@ (8005dbc <Xcp_PositiveAcknowledge+0xac>)
 8005d56:	799a      	ldrb	r2, [r3, #6]
 8005d58:	4b17      	ldr	r3, [pc, #92]	@ (8005db8 <Xcp_PositiveAcknowledge+0xa8>)
 8005d5a:	719a      	strb	r2, [r3, #6]
	HAL_CAN_AddTxMessage(&hcan, &CanH_XcpTxHeader, CanH_XcpTxData, &CanH_XcpTxMailbox);
 8005d5c:	4b18      	ldr	r3, [pc, #96]	@ (8005dc0 <Xcp_PositiveAcknowledge+0xb0>)
 8005d5e:	4a16      	ldr	r2, [pc, #88]	@ (8005db8 <Xcp_PositiveAcknowledge+0xa8>)
 8005d60:	4914      	ldr	r1, [pc, #80]	@ (8005db4 <Xcp_PositiveAcknowledge+0xa4>)
 8005d62:	4818      	ldr	r0, [pc, #96]	@ (8005dc4 <Xcp_PositiveAcknowledge+0xb4>)
 8005d64:	f003 fa74 	bl	8009250 <HAL_CAN_AddTxMessage>
	CanH_XcpTxMailbox = 0;
 8005d68:	4b15      	ldr	r3, [pc, #84]	@ (8005dc0 <Xcp_PositiveAcknowledge+0xb0>)
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	601a      	str	r2, [r3, #0]
	CanH_XcpTxHeader.DLC = 0;
 8005d6e:	4b11      	ldr	r3, [pc, #68]	@ (8005db4 <Xcp_PositiveAcknowledge+0xa4>)
 8005d70:	2200      	movs	r2, #0
 8005d72:	611a      	str	r2, [r3, #16]
	CanH_XcpTxHeader.ExtId = 0;
 8005d74:	4b0f      	ldr	r3, [pc, #60]	@ (8005db4 <Xcp_PositiveAcknowledge+0xa4>)
 8005d76:	2200      	movs	r2, #0
 8005d78:	605a      	str	r2, [r3, #4]
	CanH_XcpTxHeader.IDE = 0;
 8005d7a:	4b0e      	ldr	r3, [pc, #56]	@ (8005db4 <Xcp_PositiveAcknowledge+0xa4>)
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	609a      	str	r2, [r3, #8]
	CanH_XcpTxHeader.RTR = 0;
 8005d80:	4b0c      	ldr	r3, [pc, #48]	@ (8005db4 <Xcp_PositiveAcknowledge+0xa4>)
 8005d82:	2200      	movs	r2, #0
 8005d84:	60da      	str	r2, [r3, #12]
	CanH_XcpTxHeader.StdId = 0;
 8005d86:	4b0b      	ldr	r3, [pc, #44]	@ (8005db4 <Xcp_PositiveAcknowledge+0xa4>)
 8005d88:	2200      	movs	r2, #0
 8005d8a:	601a      	str	r2, [r3, #0]
	for(uint8 i = 0; i < 8; i++) CanH_XcpTxData[i] = 0;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	71fb      	strb	r3, [r7, #7]
 8005d90:	e006      	b.n	8005da0 <Xcp_PositiveAcknowledge+0x90>
 8005d92:	79fb      	ldrb	r3, [r7, #7]
 8005d94:	4a08      	ldr	r2, [pc, #32]	@ (8005db8 <Xcp_PositiveAcknowledge+0xa8>)
 8005d96:	2100      	movs	r1, #0
 8005d98:	54d1      	strb	r1, [r2, r3]
 8005d9a:	79fb      	ldrb	r3, [r7, #7]
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	71fb      	strb	r3, [r7, #7]
 8005da0:	79fb      	ldrb	r3, [r7, #7]
 8005da2:	2b07      	cmp	r3, #7
 8005da4:	d9f5      	bls.n	8005d92 <Xcp_PositiveAcknowledge+0x82>
}
 8005da6:	bf00      	nop
 8005da8:	bf00      	nop
 8005daa:	3708      	adds	r7, #8
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	20000188 	.word	0x20000188
 8005db4:	20000138 	.word	0x20000138
 8005db8:	2000012c 	.word	0x2000012c
 8005dbc:	2000015c 	.word	0x2000015c
 8005dc0:	20000134 	.word	0x20000134
 8005dc4:	20000838 	.word	0x20000838

08005dc8 <Xcp_MainFunction>:
/* Main function. */
void Xcp_MainFunction(void)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
	/* Main counter. */
	static uint32 Xcp_MainCounter = 0;
	/* Connect command. */
	if(CanH_XcpArray[0] == 0x01)
 8005dce:	4b3e      	ldr	r3, [pc, #248]	@ (8005ec8 <Xcp_MainFunction+0x100>)
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d101      	bne.n	8005dda <Xcp_MainFunction+0x12>
	{
		Xcp_PositiveAcknowledge();
 8005dd6:	f7ff ff9b 	bl	8005d10 <Xcp_PositiveAcknowledge>
	else
	{
		/* Do nothing. */
	}
	/* Set MTA command. */
	if(CanH_XcpArray[0] == 0x02)
 8005dda:	4b3b      	ldr	r3, [pc, #236]	@ (8005ec8 <Xcp_MainFunction+0x100>)
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	d112      	bne.n	8005e08 <Xcp_MainFunction+0x40>
	{
		/* Positive response. */
		Xcp_PositiveAcknowledge();
 8005de2:	f7ff ff95 	bl	8005d10 <Xcp_PositiveAcknowledge>
		/* Get the address requested to be read. */
		Xcp_RequestedAddress = (CanH_XcpArray[7] << 24) \
 8005de6:	4b38      	ldr	r3, [pc, #224]	@ (8005ec8 <Xcp_MainFunction+0x100>)
 8005de8:	79db      	ldrb	r3, [r3, #7]
 8005dea:	061a      	lsls	r2, r3, #24
				| (CanH_XcpArray[6] << 16) \
 8005dec:	4b36      	ldr	r3, [pc, #216]	@ (8005ec8 <Xcp_MainFunction+0x100>)
 8005dee:	799b      	ldrb	r3, [r3, #6]
 8005df0:	041b      	lsls	r3, r3, #16
 8005df2:	431a      	orrs	r2, r3
				| (CanH_XcpArray[5] << 8) \
 8005df4:	4b34      	ldr	r3, [pc, #208]	@ (8005ec8 <Xcp_MainFunction+0x100>)
 8005df6:	795b      	ldrb	r3, [r3, #5]
 8005df8:	021b      	lsls	r3, r3, #8
 8005dfa:	4313      	orrs	r3, r2
				|  CanH_XcpArray[4];
 8005dfc:	4a32      	ldr	r2, [pc, #200]	@ (8005ec8 <Xcp_MainFunction+0x100>)
 8005dfe:	7912      	ldrb	r2, [r2, #4]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	461a      	mov	r2, r3
		Xcp_RequestedAddress = (CanH_XcpArray[7] << 24) \
 8005e04:	4b31      	ldr	r3, [pc, #196]	@ (8005ecc <Xcp_MainFunction+0x104>)
 8005e06:	601a      	str	r2, [r3, #0]
	else
	{
		/* Do nothing. */
	}
	/* Upload requested variable. */
	if(CanH_XcpArray[0] == 0x04)
 8005e08:	4b2f      	ldr	r3, [pc, #188]	@ (8005ec8 <Xcp_MainFunction+0x100>)
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	2b04      	cmp	r3, #4
 8005e0e:	d11a      	bne.n	8005e46 <Xcp_MainFunction+0x7e>
	{
		/* Process the address. */
		volatile uint32 *ptr = (volatile uint32*)(Xcp_RequestedAddress);
 8005e10:	4b2e      	ldr	r3, [pc, #184]	@ (8005ecc <Xcp_MainFunction+0x104>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	60bb      	str	r3, [r7, #8]
		uint32 value = *ptr;
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	607b      	str	r3, [r7, #4]
		/* Respond with the requested value. */
		CanH_XcpArray[3] = (value >> 24) & 0xFF;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	0e1b      	lsrs	r3, r3, #24
 8005e20:	b2da      	uxtb	r2, r3
 8005e22:	4b29      	ldr	r3, [pc, #164]	@ (8005ec8 <Xcp_MainFunction+0x100>)
 8005e24:	70da      	strb	r2, [r3, #3]
		CanH_XcpArray[4] = (value >> 16) & 0xFF;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	0c1b      	lsrs	r3, r3, #16
 8005e2a:	b2da      	uxtb	r2, r3
 8005e2c:	4b26      	ldr	r3, [pc, #152]	@ (8005ec8 <Xcp_MainFunction+0x100>)
 8005e2e:	711a      	strb	r2, [r3, #4]
		CanH_XcpArray[5] = (value >> 8) & 0xFF;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	0a1b      	lsrs	r3, r3, #8
 8005e34:	b2da      	uxtb	r2, r3
 8005e36:	4b24      	ldr	r3, [pc, #144]	@ (8005ec8 <Xcp_MainFunction+0x100>)
 8005e38:	715a      	strb	r2, [r3, #5]
		CanH_XcpArray[6] = value & 0xFF;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	b2da      	uxtb	r2, r3
 8005e3e:	4b22      	ldr	r3, [pc, #136]	@ (8005ec8 <Xcp_MainFunction+0x100>)
 8005e40:	719a      	strb	r2, [r3, #6]
		Xcp_PositiveAcknowledge();
 8005e42:	f7ff ff65 	bl	8005d10 <Xcp_PositiveAcknowledge>
	else
	{
		/* Do nothing. */
	}
	/* GET CCP VERSION */
	if(CanH_XcpArray[0] == 0x1B)
 8005e46:	4b20      	ldr	r3, [pc, #128]	@ (8005ec8 <Xcp_MainFunction+0x100>)
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	2b1b      	cmp	r3, #27
 8005e4c:	d101      	bne.n	8005e52 <Xcp_MainFunction+0x8a>
	{
		Xcp_PositiveAcknowledge();
 8005e4e:	f7ff ff5f 	bl	8005d10 <Xcp_PositiveAcknowledge>
	else
	{
		/* Do nothing. */
	}
	/* EXCHANGE_ID */
	if(CanH_XcpArray[0] == 0x17)
 8005e52:	4b1d      	ldr	r3, [pc, #116]	@ (8005ec8 <Xcp_MainFunction+0x100>)
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	2b17      	cmp	r3, #23
 8005e58:	d101      	bne.n	8005e5e <Xcp_MainFunction+0x96>
	{
		Xcp_PositiveAcknowledge();
 8005e5a:	f7ff ff59 	bl	8005d10 <Xcp_PositiveAcknowledge>
	else
	{
		/* Do nothing. */
	}
	/* DISCONNECT */
	if(CanH_XcpArray[0] == 0x07)
 8005e5e:	4b1a      	ldr	r3, [pc, #104]	@ (8005ec8 <Xcp_MainFunction+0x100>)
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	2b07      	cmp	r3, #7
 8005e64:	d104      	bne.n	8005e70 <Xcp_MainFunction+0xa8>
	{
		Xcp_PositiveAcknowledge();
 8005e66:	f7ff ff53 	bl	8005d10 <Xcp_PositiveAcknowledge>
		Can_isXcpActive = 0;
 8005e6a:	4b19      	ldr	r3, [pc, #100]	@ (8005ed0 <Xcp_MainFunction+0x108>)
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	701a      	strb	r2, [r3, #0]
	else
	{
		/* Do nothing. */
	}
	/* Reset the buffers */
	CanH_XcpRxHeader.DLC = 0;
 8005e70:	4b18      	ldr	r3, [pc, #96]	@ (8005ed4 <Xcp_MainFunction+0x10c>)
 8005e72:	2200      	movs	r2, #0
 8005e74:	611a      	str	r2, [r3, #16]
	CanH_XcpRxHeader.ExtId = 0;
 8005e76:	4b17      	ldr	r3, [pc, #92]	@ (8005ed4 <Xcp_MainFunction+0x10c>)
 8005e78:	2200      	movs	r2, #0
 8005e7a:	605a      	str	r2, [r3, #4]
	CanH_XcpRxHeader.FilterMatchIndex = 0;
 8005e7c:	4b15      	ldr	r3, [pc, #84]	@ (8005ed4 <Xcp_MainFunction+0x10c>)
 8005e7e:	2200      	movs	r2, #0
 8005e80:	619a      	str	r2, [r3, #24]
	CanH_XcpRxHeader.IDE = 0;
 8005e82:	4b14      	ldr	r3, [pc, #80]	@ (8005ed4 <Xcp_MainFunction+0x10c>)
 8005e84:	2200      	movs	r2, #0
 8005e86:	609a      	str	r2, [r3, #8]
	CanH_XcpRxHeader.RTR = 0;
 8005e88:	4b12      	ldr	r3, [pc, #72]	@ (8005ed4 <Xcp_MainFunction+0x10c>)
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	60da      	str	r2, [r3, #12]
	CanH_XcpRxHeader.StdId = 0;
 8005e8e:	4b11      	ldr	r3, [pc, #68]	@ (8005ed4 <Xcp_MainFunction+0x10c>)
 8005e90:	2200      	movs	r2, #0
 8005e92:	601a      	str	r2, [r3, #0]
	CanH_XcpRxHeader.Timestamp = 0;
 8005e94:	4b0f      	ldr	r3, [pc, #60]	@ (8005ed4 <Xcp_MainFunction+0x10c>)
 8005e96:	2200      	movs	r2, #0
 8005e98:	615a      	str	r2, [r3, #20]
	for(uint8 i = 0; i < 8; i++)
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	73fb      	strb	r3, [r7, #15]
 8005e9e:	e006      	b.n	8005eae <Xcp_MainFunction+0xe6>
	{
		CanH_XcpArray[i] = 0;
 8005ea0:	7bfb      	ldrb	r3, [r7, #15]
 8005ea2:	4a09      	ldr	r2, [pc, #36]	@ (8005ec8 <Xcp_MainFunction+0x100>)
 8005ea4:	2100      	movs	r1, #0
 8005ea6:	54d1      	strb	r1, [r2, r3]
	for(uint8 i = 0; i < 8; i++)
 8005ea8:	7bfb      	ldrb	r3, [r7, #15]
 8005eaa:	3301      	adds	r3, #1
 8005eac:	73fb      	strb	r3, [r7, #15]
 8005eae:	7bfb      	ldrb	r3, [r7, #15]
 8005eb0:	2b07      	cmp	r3, #7
 8005eb2:	d9f5      	bls.n	8005ea0 <Xcp_MainFunction+0xd8>
	}
	/* Increment the counter. */
	Xcp_MainCounter++;
 8005eb4:	4b08      	ldr	r3, [pc, #32]	@ (8005ed8 <Xcp_MainFunction+0x110>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	3301      	adds	r3, #1
 8005eba:	4a07      	ldr	r2, [pc, #28]	@ (8005ed8 <Xcp_MainFunction+0x110>)
 8005ebc:	6013      	str	r3, [r2, #0]
}
 8005ebe:	bf00      	nop
 8005ec0:	3710      	adds	r7, #16
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	2000015c 	.word	0x2000015c
 8005ecc:	200001a8 	.word	0x200001a8
 8005ed0:	200001a4 	.word	0x200001a4
 8005ed4:	20000188 	.word	0x20000188
 8005ed8:	200001ac 	.word	0x200001ac

08005edc <Dcm_MainFunction>:
extern void EcuM_PerformReset(uint8 param);
extern void Dem_ClearDtc(void);
extern void NvM_WriteAll(void);

void Dcm_MainFunction(void)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	af00      	add	r7, sp, #0
	Dcm_AliveCounter++;
 8005ee2:	4b71      	ldr	r3, [pc, #452]	@ (80060a8 <Dcm_MainFunction+0x1cc>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	4a6f      	ldr	r2, [pc, #444]	@ (80060a8 <Dcm_MainFunction+0x1cc>)
 8005eea:	6013      	str	r3, [r2, #0]
	if(Dcm_MainCounter == 0) Dcm_DiagnosticSession = DEFAULT;
 8005eec:	4b6f      	ldr	r3, [pc, #444]	@ (80060ac <Dcm_MainFunction+0x1d0>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d102      	bne.n	8005efa <Dcm_MainFunction+0x1e>
 8005ef4:	4b6e      	ldr	r3, [pc, #440]	@ (80060b0 <Dcm_MainFunction+0x1d4>)
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	701a      	strb	r2, [r3, #0]
	else
	{
		/* Do nothing. */
	}
	if(0x3E == CanH_DiagArray[1]) DiagService_TP_TesterPresent();
 8005efa:	4b6e      	ldr	r3, [pc, #440]	@ (80060b4 <Dcm_MainFunction+0x1d8>)
 8005efc:	785b      	ldrb	r3, [r3, #1]
 8005efe:	2b3e      	cmp	r3, #62	@ 0x3e
 8005f00:	d101      	bne.n	8005f06 <Dcm_MainFunction+0x2a>
 8005f02:	f000 fb13 	bl	800652c <DiagService_TP_TesterPresent>
	else
	{
		/* Do nothing. */
	}
	if(0x28 == CanH_DiagArray[1]) DiagService_CC_CommunicationControl();
 8005f06:	4b6b      	ldr	r3, [pc, #428]	@ (80060b4 <Dcm_MainFunction+0x1d8>)
 8005f08:	785b      	ldrb	r3, [r3, #1]
 8005f0a:	2b28      	cmp	r3, #40	@ 0x28
 8005f0c:	d101      	bne.n	8005f12 <Dcm_MainFunction+0x36>
 8005f0e:	f000 fd19 	bl	8006944 <DiagService_CC_CommunicationControl>
	else
	{
		/* Do nothing. */
	}
	if(0x85 == CanH_DiagArray[1]) DiagService_CDTCS_ControlDTCSetting();
 8005f12:	4b68      	ldr	r3, [pc, #416]	@ (80060b4 <Dcm_MainFunction+0x1d8>)
 8005f14:	785b      	ldrb	r3, [r3, #1]
 8005f16:	2b85      	cmp	r3, #133	@ 0x85
 8005f18:	d101      	bne.n	8005f1e <Dcm_MainFunction+0x42>
 8005f1a:	f000 fd51 	bl	80069c0 <DiagService_CDTCS_ControlDTCSetting>
	else
	{
		/* Do nothing. */
	}
	if(CanH_DiagArray[1] == 0x10)
 8005f1e:	4b65      	ldr	r3, [pc, #404]	@ (80060b4 <Dcm_MainFunction+0x1d8>)
 8005f20:	785b      	ldrb	r3, [r3, #1]
 8005f22:	2b10      	cmp	r3, #16
 8005f24:	d11f      	bne.n	8005f66 <Dcm_MainFunction+0x8a>
	{
		/* DEFAULT */
		if(CanH_DiagArray[2] == 0x01) DiagService_DSC_DefaultSession();
 8005f26:	4b63      	ldr	r3, [pc, #396]	@ (80060b4 <Dcm_MainFunction+0x1d8>)
 8005f28:	789b      	ldrb	r3, [r3, #2]
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d101      	bne.n	8005f32 <Dcm_MainFunction+0x56>
 8005f2e:	f000 f9eb 	bl	8006308 <DiagService_DSC_DefaultSession>
		else
		{
			/* Do nothing. */
		}
		/* EXTENDED */
		if(CanH_DiagArray[2] == 0x03) DiagService_DSC_ExtendedSession();
 8005f32:	4b60      	ldr	r3, [pc, #384]	@ (80060b4 <Dcm_MainFunction+0x1d8>)
 8005f34:	789b      	ldrb	r3, [r3, #2]
 8005f36:	2b03      	cmp	r3, #3
 8005f38:	d101      	bne.n	8005f3e <Dcm_MainFunction+0x62>
 8005f3a:	f000 fa17 	bl	800636c <DiagService_DSC_ExtendedSession>
		else
		{
			/* Do nothing. */
		}
		/* PROGRAMMING */
		if(CanH_DiagArray[2] == 0x02 && Dcm_DiagnosticSession == EXTENDED) DiagService_DSC_ProgrammingSession();
 8005f3e:	4b5d      	ldr	r3, [pc, #372]	@ (80060b4 <Dcm_MainFunction+0x1d8>)
 8005f40:	789b      	ldrb	r3, [r3, #2]
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d105      	bne.n	8005f52 <Dcm_MainFunction+0x76>
 8005f46:	4b5a      	ldr	r3, [pc, #360]	@ (80060b0 <Dcm_MainFunction+0x1d4>)
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d101      	bne.n	8005f52 <Dcm_MainFunction+0x76>
 8005f4e:	f000 fa79 	bl	8006444 <DiagService_DSC_ProgrammingSession>
		else
		{
			/* Do nothing. */
		}
		if(CanH_DiagArray[2] == 0x05 && Dcm_DiagnosticSession == EXTENDED) DiagService_DSC_CalibrationSession();
 8005f52:	4b58      	ldr	r3, [pc, #352]	@ (80060b4 <Dcm_MainFunction+0x1d8>)
 8005f54:	789b      	ldrb	r3, [r3, #2]
 8005f56:	2b05      	cmp	r3, #5
 8005f58:	d105      	bne.n	8005f66 <Dcm_MainFunction+0x8a>
 8005f5a:	4b55      	ldr	r3, [pc, #340]	@ (80060b0 <Dcm_MainFunction+0x1d4>)
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d101      	bne.n	8005f66 <Dcm_MainFunction+0x8a>
 8005f62:	f000 fa35 	bl	80063d0 <DiagService_DSC_CalibrationSession>
	}
	else
	{
		/* Do nothing. */
	}
	if(CanH_DiagArray[3] == 0x86 && CanH_DiagArray[2] == 0xF1 && CanH_DiagArray[1] == 0x22) DiagService_RDBI_ReadActiveDiagnosticSession();
 8005f66:	4b53      	ldr	r3, [pc, #332]	@ (80060b4 <Dcm_MainFunction+0x1d8>)
 8005f68:	78db      	ldrb	r3, [r3, #3]
 8005f6a:	2b86      	cmp	r3, #134	@ 0x86
 8005f6c:	d109      	bne.n	8005f82 <Dcm_MainFunction+0xa6>
 8005f6e:	4b51      	ldr	r3, [pc, #324]	@ (80060b4 <Dcm_MainFunction+0x1d8>)
 8005f70:	789b      	ldrb	r3, [r3, #2]
 8005f72:	2bf1      	cmp	r3, #241	@ 0xf1
 8005f74:	d105      	bne.n	8005f82 <Dcm_MainFunction+0xa6>
 8005f76:	4b4f      	ldr	r3, [pc, #316]	@ (80060b4 <Dcm_MainFunction+0x1d8>)
 8005f78:	785b      	ldrb	r3, [r3, #1]
 8005f7a:	2b22      	cmp	r3, #34	@ 0x22
 8005f7c:	d101      	bne.n	8005f82 <Dcm_MainFunction+0xa6>
 8005f7e:	f000 fc65 	bl	800684c <DiagService_RDBI_ReadActiveDiagnosticSession>
	else
	{
		/* Do nothing. */
	}
	/* Execute hard reset. */
	if(CanH_DiagArray[1] == 0x11 && CanH_DiagArray[2] == 0x01) DiagService_ER_HardReset();
 8005f82:	4b4c      	ldr	r3, [pc, #304]	@ (80060b4 <Dcm_MainFunction+0x1d8>)
 8005f84:	785b      	ldrb	r3, [r3, #1]
 8005f86:	2b11      	cmp	r3, #17
 8005f88:	d105      	bne.n	8005f96 <Dcm_MainFunction+0xba>
 8005f8a:	4b4a      	ldr	r3, [pc, #296]	@ (80060b4 <Dcm_MainFunction+0x1d8>)
 8005f8c:	789b      	ldrb	r3, [r3, #2]
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d101      	bne.n	8005f96 <Dcm_MainFunction+0xba>
 8005f92:	f000 fa91 	bl	80064b8 <DiagService_ER_HardReset>
	else
	{
		/* Do nothing. */
	}
	/* Execute clear DTC. */
	if(CanH_DiagArray[1] == 0x14) DiagService_CDTCI_ClearDiagnosticInformation();
 8005f96:	4b47      	ldr	r3, [pc, #284]	@ (80060b4 <Dcm_MainFunction+0x1d8>)
 8005f98:	785b      	ldrb	r3, [r3, #1]
 8005f9a:	2b14      	cmp	r3, #20
 8005f9c:	d101      	bne.n	8005fa2 <Dcm_MainFunction+0xc6>
 8005f9e:	f000 fb05 	bl	80065ac <DiagService_CDTCI_ClearDiagnosticInformation>
	else
	{
		/* Do nothing. */
	}
	/* Execute read DTC. */
	if(CanH_DiagArray[1] == 0x19) DiagService_RDTCI_ReadDTCInformationSupportedDtc();
 8005fa2:	4b44      	ldr	r3, [pc, #272]	@ (80060b4 <Dcm_MainFunction+0x1d8>)
 8005fa4:	785b      	ldrb	r3, [r3, #1]
 8005fa6:	2b19      	cmp	r3, #25
 8005fa8:	d101      	bne.n	8005fae <Dcm_MainFunction+0xd2>
 8005faa:	f000 fbd9 	bl	8006760 <DiagService_RDTCI_ReadDTCInformationSupportedDtc>
	else
	{
		/* Do nothing. */
	}
	/* Extended session requests. */
	if(Dcm_DiagnosticSession == EXTENDED)
 8005fae:	4b40      	ldr	r3, [pc, #256]	@ (80060b0 <Dcm_MainFunction+0x1d4>)
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d139      	bne.n	800602a <Dcm_MainFunction+0x14e>
	{
		if(0x31 == CanH_DiagArray[1] && 0x01 == CanH_DiagArray[2])
 8005fb6:	4b3f      	ldr	r3, [pc, #252]	@ (80060b4 <Dcm_MainFunction+0x1d8>)
 8005fb8:	785b      	ldrb	r3, [r3, #1]
 8005fba:	2b31      	cmp	r3, #49	@ 0x31
 8005fbc:	d117      	bne.n	8005fee <Dcm_MainFunction+0x112>
 8005fbe:	4b3d      	ldr	r3, [pc, #244]	@ (80060b4 <Dcm_MainFunction+0x1d8>)
 8005fc0:	789b      	ldrb	r3, [r3, #2]
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d113      	bne.n	8005fee <Dcm_MainFunction+0x112>
		{
			if(0x4f == CanH_DiagArray[3] && 0x4f == CanH_DiagArray[4]) DiagService_RC_LoadControl_Status();
 8005fc6:	4b3b      	ldr	r3, [pc, #236]	@ (80060b4 <Dcm_MainFunction+0x1d8>)
 8005fc8:	78db      	ldrb	r3, [r3, #3]
 8005fca:	2b4f      	cmp	r3, #79	@ 0x4f
 8005fcc:	d105      	bne.n	8005fda <Dcm_MainFunction+0xfe>
 8005fce:	4b39      	ldr	r3, [pc, #228]	@ (80060b4 <Dcm_MainFunction+0x1d8>)
 8005fd0:	791b      	ldrb	r3, [r3, #4]
 8005fd2:	2b4f      	cmp	r3, #79	@ 0x4f
 8005fd4:	d101      	bne.n	8005fda <Dcm_MainFunction+0xfe>
 8005fd6:	f000 f8b1 	bl	800613c <DiagService_RC_LoadControl_Status>
			else
			{
				/* Do nothing. */
			}
			if(0x4e == CanH_DiagArray[3] && 0x4e == CanH_DiagArray[4]) DiagService_RC_LoadControl_RestoreLoadsStatus();
 8005fda:	4b36      	ldr	r3, [pc, #216]	@ (80060b4 <Dcm_MainFunction+0x1d8>)
 8005fdc:	78db      	ldrb	r3, [r3, #3]
 8005fde:	2b4e      	cmp	r3, #78	@ 0x4e
 8005fe0:	d105      	bne.n	8005fee <Dcm_MainFunction+0x112>
 8005fe2:	4b34      	ldr	r3, [pc, #208]	@ (80060b4 <Dcm_MainFunction+0x1d8>)
 8005fe4:	791b      	ldrb	r3, [r3, #4]
 8005fe6:	2b4e      	cmp	r3, #78	@ 0x4e
 8005fe8:	d101      	bne.n	8005fee <Dcm_MainFunction+0x112>
 8005fea:	f000 f92b 	bl	8006244 <DiagService_RC_LoadControl_RestoreLoadsStatus>
		}
		else
		{
			/* Do nothing. */
		}
		if(0x2E == CanH_DiagArray[1]) DiagService_WDBI_CalibrationData();
 8005fee:	4b31      	ldr	r3, [pc, #196]	@ (80060b4 <Dcm_MainFunction+0x1d8>)
 8005ff0:	785b      	ldrb	r3, [r3, #1]
 8005ff2:	2b2e      	cmp	r3, #46	@ 0x2e
 8005ff4:	d101      	bne.n	8005ffa <Dcm_MainFunction+0x11e>
 8005ff6:	f000 f865 	bl	80060c4 <DiagService_WDBI_CalibrationData>
		else
		{
			/* Do nothing. */
		}
		/* Read data requests. */
		if(CanH_DiagArray[1] == 0x22)
 8005ffa:	4b2e      	ldr	r3, [pc, #184]	@ (80060b4 <Dcm_MainFunction+0x1d8>)
 8005ffc:	785b      	ldrb	r3, [r3, #1]
 8005ffe:	2b22      	cmp	r3, #34	@ 0x22
 8006000:	d113      	bne.n	800602a <Dcm_MainFunction+0x14e>
		{
			if(CanH_DiagArray[2] == 0x00)
 8006002:	4b2c      	ldr	r3, [pc, #176]	@ (80060b4 <Dcm_MainFunction+0x1d8>)
 8006004:	789b      	ldrb	r3, [r3, #2]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d105      	bne.n	8006016 <Dcm_MainFunction+0x13a>
			{
				if(CanH_DiagArray[3] == 0x05) DiagService_RDBI_ReadAliveTime();
 800600a:	4b2a      	ldr	r3, [pc, #168]	@ (80060b4 <Dcm_MainFunction+0x1d8>)
 800600c:	78db      	ldrb	r3, [r3, #3]
 800600e:	2b05      	cmp	r3, #5
 8006010:	d101      	bne.n	8006016 <Dcm_MainFunction+0x13a>
 8006012:	f000 fc57 	bl	80068c4 <DiagService_RDBI_ReadAliveTime>
			else
			{
				/* Do nothing. */
			}

			if(CanH_DiagArray[2] == 0xF1)
 8006016:	4b27      	ldr	r3, [pc, #156]	@ (80060b4 <Dcm_MainFunction+0x1d8>)
 8006018:	789b      	ldrb	r3, [r3, #2]
 800601a:	2bf1      	cmp	r3, #241	@ 0xf1
 800601c:	d105      	bne.n	800602a <Dcm_MainFunction+0x14e>
			{
				if(CanH_DiagArray[3] == 0x80) DiagService_RDBI_ReadSWData();
 800601e:	4b25      	ldr	r3, [pc, #148]	@ (80060b4 <Dcm_MainFunction+0x1d8>)
 8006020:	78db      	ldrb	r3, [r3, #3]
 8006022:	2b80      	cmp	r3, #128	@ 0x80
 8006024:	d101      	bne.n	800602a <Dcm_MainFunction+0x14e>
 8006026:	f000 fbd3 	bl	80067d0 <DiagService_RDBI_ReadSWData>
	}
	else
	{
		/* Do nothing. */
	}
	Dcm_TxHeader.DLC = 0;
 800602a:	4b23      	ldr	r3, [pc, #140]	@ (80060b8 <Dcm_MainFunction+0x1dc>)
 800602c:	2200      	movs	r2, #0
 800602e:	611a      	str	r2, [r3, #16]
	Dcm_TxHeader.ExtId = 0;
 8006030:	4b21      	ldr	r3, [pc, #132]	@ (80060b8 <Dcm_MainFunction+0x1dc>)
 8006032:	2200      	movs	r2, #0
 8006034:	605a      	str	r2, [r3, #4]
	Dcm_TxHeader.IDE = 0;
 8006036:	4b20      	ldr	r3, [pc, #128]	@ (80060b8 <Dcm_MainFunction+0x1dc>)
 8006038:	2200      	movs	r2, #0
 800603a:	609a      	str	r2, [r3, #8]
	Dcm_TxHeader.RTR = 0;
 800603c:	4b1e      	ldr	r3, [pc, #120]	@ (80060b8 <Dcm_MainFunction+0x1dc>)
 800603e:	2200      	movs	r2, #0
 8006040:	60da      	str	r2, [r3, #12]
	Dcm_TxHeader.StdId = 0;
 8006042:	4b1d      	ldr	r3, [pc, #116]	@ (80060b8 <Dcm_MainFunction+0x1dc>)
 8006044:	2200      	movs	r2, #0
 8006046:	601a      	str	r2, [r3, #0]
	CanH_DiagRxHeader.DLC = 0;
 8006048:	4b1c      	ldr	r3, [pc, #112]	@ (80060bc <Dcm_MainFunction+0x1e0>)
 800604a:	2200      	movs	r2, #0
 800604c:	611a      	str	r2, [r3, #16]
	CanH_DiagRxHeader.ExtId = 0;
 800604e:	4b1b      	ldr	r3, [pc, #108]	@ (80060bc <Dcm_MainFunction+0x1e0>)
 8006050:	2200      	movs	r2, #0
 8006052:	605a      	str	r2, [r3, #4]
	CanH_DiagRxHeader.FilterMatchIndex = 0;
 8006054:	4b19      	ldr	r3, [pc, #100]	@ (80060bc <Dcm_MainFunction+0x1e0>)
 8006056:	2200      	movs	r2, #0
 8006058:	619a      	str	r2, [r3, #24]
	CanH_DiagRxHeader.IDE = 0;
 800605a:	4b18      	ldr	r3, [pc, #96]	@ (80060bc <Dcm_MainFunction+0x1e0>)
 800605c:	2200      	movs	r2, #0
 800605e:	609a      	str	r2, [r3, #8]
	CanH_DiagRxHeader.RTR = 0;
 8006060:	4b16      	ldr	r3, [pc, #88]	@ (80060bc <Dcm_MainFunction+0x1e0>)
 8006062:	2200      	movs	r2, #0
 8006064:	60da      	str	r2, [r3, #12]
	CanH_DiagRxHeader.StdId = 0;
 8006066:	4b15      	ldr	r3, [pc, #84]	@ (80060bc <Dcm_MainFunction+0x1e0>)
 8006068:	2200      	movs	r2, #0
 800606a:	601a      	str	r2, [r3, #0]
	CanH_DiagRxHeader.Timestamp = 0;
 800606c:	4b13      	ldr	r3, [pc, #76]	@ (80060bc <Dcm_MainFunction+0x1e0>)
 800606e:	2200      	movs	r2, #0
 8006070:	615a      	str	r2, [r3, #20]
	for(uint8 i = 0; i < 8; i++)
 8006072:	2300      	movs	r3, #0
 8006074:	71fb      	strb	r3, [r7, #7]
 8006076:	e00a      	b.n	800608e <Dcm_MainFunction+0x1b2>
	{
		Dcm_TxData[i] = 0;
 8006078:	79fb      	ldrb	r3, [r7, #7]
 800607a:	4a11      	ldr	r2, [pc, #68]	@ (80060c0 <Dcm_MainFunction+0x1e4>)
 800607c:	2100      	movs	r1, #0
 800607e:	54d1      	strb	r1, [r2, r3]
		CanH_DiagArray[i] = 0;
 8006080:	79fb      	ldrb	r3, [r7, #7]
 8006082:	4a0c      	ldr	r2, [pc, #48]	@ (80060b4 <Dcm_MainFunction+0x1d8>)
 8006084:	2100      	movs	r1, #0
 8006086:	54d1      	strb	r1, [r2, r3]
	for(uint8 i = 0; i < 8; i++)
 8006088:	79fb      	ldrb	r3, [r7, #7]
 800608a:	3301      	adds	r3, #1
 800608c:	71fb      	strb	r3, [r7, #7]
 800608e:	79fb      	ldrb	r3, [r7, #7]
 8006090:	2b07      	cmp	r3, #7
 8006092:	d9f1      	bls.n	8006078 <Dcm_MainFunction+0x19c>
	}
	Dcm_MainCounter++;
 8006094:	4b05      	ldr	r3, [pc, #20]	@ (80060ac <Dcm_MainFunction+0x1d0>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	3301      	adds	r3, #1
 800609a:	4a04      	ldr	r2, [pc, #16]	@ (80060ac <Dcm_MainFunction+0x1d0>)
 800609c:	6013      	str	r3, [r2, #0]
}
 800609e:	bf00      	nop
 80060a0:	3708      	adds	r7, #8
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	20004c24 	.word	0x20004c24
 80060ac:	200001b0 	.word	0x200001b0
 80060b0:	20004c20 	.word	0x20004c20
 80060b4:	20000164 	.word	0x20000164
 80060b8:	200001b4 	.word	0x200001b4
 80060bc:	2000016c 	.word	0x2000016c
 80060c0:	200001cc 	.word	0x200001cc

080060c4 <DiagService_WDBI_CalibrationData>:
void DiagService_WDBI_CalibrationData(void)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	af00      	add	r7, sp, #0
	Dcm_TxHeader.DLC = CanH_DiagRxHeader.DLC;
 80060c8:	4b15      	ldr	r3, [pc, #84]	@ (8006120 <DiagService_WDBI_CalibrationData+0x5c>)
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	4a15      	ldr	r2, [pc, #84]	@ (8006124 <DiagService_WDBI_CalibrationData+0x60>)
 80060ce:	6113      	str	r3, [r2, #16]
	Dcm_TxHeader.StdId = CanH_DiagRxHeader.StdId + 1;
 80060d0:	4b13      	ldr	r3, [pc, #76]	@ (8006120 <DiagService_WDBI_CalibrationData+0x5c>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	3301      	adds	r3, #1
 80060d6:	4a13      	ldr	r2, [pc, #76]	@ (8006124 <DiagService_WDBI_CalibrationData+0x60>)
 80060d8:	6013      	str	r3, [r2, #0]
	Dcm_TxData[0] = CanH_DiagArray[0];
 80060da:	4b13      	ldr	r3, [pc, #76]	@ (8006128 <DiagService_WDBI_CalibrationData+0x64>)
 80060dc:	781a      	ldrb	r2, [r3, #0]
 80060de:	4b13      	ldr	r3, [pc, #76]	@ (800612c <DiagService_WDBI_CalibrationData+0x68>)
 80060e0:	701a      	strb	r2, [r3, #0]
	Dcm_TxData[1] = CanH_DiagArray[1] + 0x40;
 80060e2:	4b11      	ldr	r3, [pc, #68]	@ (8006128 <DiagService_WDBI_CalibrationData+0x64>)
 80060e4:	785b      	ldrb	r3, [r3, #1]
 80060e6:	3340      	adds	r3, #64	@ 0x40
 80060e8:	b2da      	uxtb	r2, r3
 80060ea:	4b10      	ldr	r3, [pc, #64]	@ (800612c <DiagService_WDBI_CalibrationData+0x68>)
 80060ec:	705a      	strb	r2, [r3, #1]
	Dcm_TxData[2] = CanH_DiagArray[2];
 80060ee:	4b0e      	ldr	r3, [pc, #56]	@ (8006128 <DiagService_WDBI_CalibrationData+0x64>)
 80060f0:	789a      	ldrb	r2, [r3, #2]
 80060f2:	4b0e      	ldr	r3, [pc, #56]	@ (800612c <DiagService_WDBI_CalibrationData+0x68>)
 80060f4:	709a      	strb	r2, [r3, #2]
	Dcm_TxData[3] = CanH_DiagArray[3];
 80060f6:	4b0c      	ldr	r3, [pc, #48]	@ (8006128 <DiagService_WDBI_CalibrationData+0x64>)
 80060f8:	78da      	ldrb	r2, [r3, #3]
 80060fa:	4b0c      	ldr	r3, [pc, #48]	@ (800612c <DiagService_WDBI_CalibrationData+0x68>)
 80060fc:	70da      	strb	r2, [r3, #3]
	Dcm_DiagnosticCalibrationData[CanH_DiagArray[4]] = CanH_DiagArray[5];
 80060fe:	4b0a      	ldr	r3, [pc, #40]	@ (8006128 <DiagService_WDBI_CalibrationData+0x64>)
 8006100:	7959      	ldrb	r1, [r3, #5]
 8006102:	4b09      	ldr	r3, [pc, #36]	@ (8006128 <DiagService_WDBI_CalibrationData+0x64>)
 8006104:	791b      	ldrb	r3, [r3, #4]
 8006106:	461a      	mov	r2, r3
 8006108:	4b09      	ldr	r3, [pc, #36]	@ (8006130 <DiagService_WDBI_CalibrationData+0x6c>)
 800610a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	HAL_CAN_AddTxMessage(&hcan, &Dcm_TxHeader, Dcm_TxData, &Dcm_TxMailbox);
 800610e:	4b09      	ldr	r3, [pc, #36]	@ (8006134 <DiagService_WDBI_CalibrationData+0x70>)
 8006110:	4a06      	ldr	r2, [pc, #24]	@ (800612c <DiagService_WDBI_CalibrationData+0x68>)
 8006112:	4904      	ldr	r1, [pc, #16]	@ (8006124 <DiagService_WDBI_CalibrationData+0x60>)
 8006114:	4808      	ldr	r0, [pc, #32]	@ (8006138 <DiagService_WDBI_CalibrationData+0x74>)
 8006116:	f003 f89b 	bl	8009250 <HAL_CAN_AddTxMessage>
}
 800611a:	bf00      	nop
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	2000016c 	.word	0x2000016c
 8006124:	200001b4 	.word	0x200001b4
 8006128:	20000164 	.word	0x20000164
 800612c:	200001cc 	.word	0x200001cc
 8006130:	200001d8 	.word	0x200001d8
 8006134:	200001d4 	.word	0x200001d4
 8006138:	20000838 	.word	0x20000838

0800613c <DiagService_RC_LoadControl_Status>:
void DiagService_RC_LoadControl_Status(void)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
	if(0 != CanH_DiagArray[6])
 8006142:	4b38      	ldr	r3, [pc, #224]	@ (8006224 <DiagService_RC_LoadControl_Status+0xe8>)
 8006144:	799b      	ldrb	r3, [r3, #6]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d029      	beq.n	800619e <DiagService_RC_LoadControl_Status+0x62>
	{
		if(0xff != CanH_DiagArray[5])
 800614a:	4b36      	ldr	r3, [pc, #216]	@ (8006224 <DiagService_RC_LoadControl_Status+0xe8>)
 800614c:	795b      	ldrb	r3, [r3, #5]
 800614e:	2bff      	cmp	r3, #255	@ 0xff
 8006150:	d00f      	beq.n	8006172 <DiagService_RC_LoadControl_Status+0x36>
		{
			LoadCtrl_StatusList[CanH_DiagArray[5]] = CanH_DiagArray[6] - 1;
 8006152:	4b34      	ldr	r3, [pc, #208]	@ (8006224 <DiagService_RC_LoadControl_Status+0xe8>)
 8006154:	799b      	ldrb	r3, [r3, #6]
 8006156:	4a33      	ldr	r2, [pc, #204]	@ (8006224 <DiagService_RC_LoadControl_Status+0xe8>)
 8006158:	7952      	ldrb	r2, [r2, #5]
 800615a:	3b01      	subs	r3, #1
 800615c:	b2d9      	uxtb	r1, r3
 800615e:	4b32      	ldr	r3, [pc, #200]	@ (8006228 <DiagService_RC_LoadControl_Status+0xec>)
 8006160:	5499      	strb	r1, [r3, r2]
			DiagLoadCtrl_StatusList[CanH_DiagArray[5]]  = CanH_DiagArray[6];
 8006162:	4b30      	ldr	r3, [pc, #192]	@ (8006224 <DiagService_RC_LoadControl_Status+0xe8>)
 8006164:	795b      	ldrb	r3, [r3, #5]
 8006166:	461a      	mov	r2, r3
 8006168:	4b2e      	ldr	r3, [pc, #184]	@ (8006224 <DiagService_RC_LoadControl_Status+0xe8>)
 800616a:	7999      	ldrb	r1, [r3, #6]
 800616c:	4b2f      	ldr	r3, [pc, #188]	@ (800622c <DiagService_RC_LoadControl_Status+0xf0>)
 800616e:	5499      	strb	r1, [r3, r2]
 8006170:	e02f      	b.n	80061d2 <DiagService_RC_LoadControl_Status+0x96>
		}
		else
		{
			for(uint8 i = 0; i < 8; i++)
 8006172:	2300      	movs	r3, #0
 8006174:	71fb      	strb	r3, [r7, #7]
 8006176:	e00e      	b.n	8006196 <DiagService_RC_LoadControl_Status+0x5a>
			{
				LoadCtrl_StatusList[i] = CanH_DiagArray[6] - 1;
 8006178:	4b2a      	ldr	r3, [pc, #168]	@ (8006224 <DiagService_RC_LoadControl_Status+0xe8>)
 800617a:	799a      	ldrb	r2, [r3, #6]
 800617c:	79fb      	ldrb	r3, [r7, #7]
 800617e:	3a01      	subs	r2, #1
 8006180:	b2d1      	uxtb	r1, r2
 8006182:	4a29      	ldr	r2, [pc, #164]	@ (8006228 <DiagService_RC_LoadControl_Status+0xec>)
 8006184:	54d1      	strb	r1, [r2, r3]
				DiagLoadCtrl_StatusList[i]  = CanH_DiagArray[6];
 8006186:	79fb      	ldrb	r3, [r7, #7]
 8006188:	4a26      	ldr	r2, [pc, #152]	@ (8006224 <DiagService_RC_LoadControl_Status+0xe8>)
 800618a:	7991      	ldrb	r1, [r2, #6]
 800618c:	4a27      	ldr	r2, [pc, #156]	@ (800622c <DiagService_RC_LoadControl_Status+0xf0>)
 800618e:	54d1      	strb	r1, [r2, r3]
			for(uint8 i = 0; i < 8; i++)
 8006190:	79fb      	ldrb	r3, [r7, #7]
 8006192:	3301      	adds	r3, #1
 8006194:	71fb      	strb	r3, [r7, #7]
 8006196:	79fb      	ldrb	r3, [r7, #7]
 8006198:	2b07      	cmp	r3, #7
 800619a:	d9ed      	bls.n	8006178 <DiagService_RC_LoadControl_Status+0x3c>
 800619c:	e019      	b.n	80061d2 <DiagService_RC_LoadControl_Status+0x96>
			}
		}
	}
	else
	{
		if(0xff != CanH_DiagArray[5]) DiagLoadCtrl_StatusList[CanH_DiagArray[5]]  = CanH_DiagArray[6];
 800619e:	4b21      	ldr	r3, [pc, #132]	@ (8006224 <DiagService_RC_LoadControl_Status+0xe8>)
 80061a0:	795b      	ldrb	r3, [r3, #5]
 80061a2:	2bff      	cmp	r3, #255	@ 0xff
 80061a4:	d007      	beq.n	80061b6 <DiagService_RC_LoadControl_Status+0x7a>
 80061a6:	4b1f      	ldr	r3, [pc, #124]	@ (8006224 <DiagService_RC_LoadControl_Status+0xe8>)
 80061a8:	795b      	ldrb	r3, [r3, #5]
 80061aa:	461a      	mov	r2, r3
 80061ac:	4b1d      	ldr	r3, [pc, #116]	@ (8006224 <DiagService_RC_LoadControl_Status+0xe8>)
 80061ae:	7999      	ldrb	r1, [r3, #6]
 80061b0:	4b1e      	ldr	r3, [pc, #120]	@ (800622c <DiagService_RC_LoadControl_Status+0xf0>)
 80061b2:	5499      	strb	r1, [r3, r2]
 80061b4:	e00d      	b.n	80061d2 <DiagService_RC_LoadControl_Status+0x96>
		else for(uint8 i = 0; i < 8; i++) DiagLoadCtrl_StatusList[i]  = CanH_DiagArray[6];
 80061b6:	2300      	movs	r3, #0
 80061b8:	71bb      	strb	r3, [r7, #6]
 80061ba:	e007      	b.n	80061cc <DiagService_RC_LoadControl_Status+0x90>
 80061bc:	79bb      	ldrb	r3, [r7, #6]
 80061be:	4a19      	ldr	r2, [pc, #100]	@ (8006224 <DiagService_RC_LoadControl_Status+0xe8>)
 80061c0:	7991      	ldrb	r1, [r2, #6]
 80061c2:	4a1a      	ldr	r2, [pc, #104]	@ (800622c <DiagService_RC_LoadControl_Status+0xf0>)
 80061c4:	54d1      	strb	r1, [r2, r3]
 80061c6:	79bb      	ldrb	r3, [r7, #6]
 80061c8:	3301      	adds	r3, #1
 80061ca:	71bb      	strb	r3, [r7, #6]
 80061cc:	79bb      	ldrb	r3, [r7, #6]
 80061ce:	2b07      	cmp	r3, #7
 80061d0:	d9f4      	bls.n	80061bc <DiagService_RC_LoadControl_Status+0x80>
	}
	Dcm_TxHeader.DLC = CanH_DiagRxHeader.DLC;
 80061d2:	4b17      	ldr	r3, [pc, #92]	@ (8006230 <DiagService_RC_LoadControl_Status+0xf4>)
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	4a17      	ldr	r2, [pc, #92]	@ (8006234 <DiagService_RC_LoadControl_Status+0xf8>)
 80061d8:	6113      	str	r3, [r2, #16]
	Dcm_TxHeader.StdId = CanH_DiagRxHeader.StdId + 1;
 80061da:	4b15      	ldr	r3, [pc, #84]	@ (8006230 <DiagService_RC_LoadControl_Status+0xf4>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	3301      	adds	r3, #1
 80061e0:	4a14      	ldr	r2, [pc, #80]	@ (8006234 <DiagService_RC_LoadControl_Status+0xf8>)
 80061e2:	6013      	str	r3, [r2, #0]
	Dcm_TxData[0] = CanH_DiagArray[0];
 80061e4:	4b0f      	ldr	r3, [pc, #60]	@ (8006224 <DiagService_RC_LoadControl_Status+0xe8>)
 80061e6:	781a      	ldrb	r2, [r3, #0]
 80061e8:	4b13      	ldr	r3, [pc, #76]	@ (8006238 <DiagService_RC_LoadControl_Status+0xfc>)
 80061ea:	701a      	strb	r2, [r3, #0]
	Dcm_TxData[1] = CanH_DiagArray[1] + 0x40;
 80061ec:	4b0d      	ldr	r3, [pc, #52]	@ (8006224 <DiagService_RC_LoadControl_Status+0xe8>)
 80061ee:	785b      	ldrb	r3, [r3, #1]
 80061f0:	3340      	adds	r3, #64	@ 0x40
 80061f2:	b2da      	uxtb	r2, r3
 80061f4:	4b10      	ldr	r3, [pc, #64]	@ (8006238 <DiagService_RC_LoadControl_Status+0xfc>)
 80061f6:	705a      	strb	r2, [r3, #1]
	Dcm_TxData[2] = CanH_DiagArray[2];
 80061f8:	4b0a      	ldr	r3, [pc, #40]	@ (8006224 <DiagService_RC_LoadControl_Status+0xe8>)
 80061fa:	789a      	ldrb	r2, [r3, #2]
 80061fc:	4b0e      	ldr	r3, [pc, #56]	@ (8006238 <DiagService_RC_LoadControl_Status+0xfc>)
 80061fe:	709a      	strb	r2, [r3, #2]
	Dcm_TxData[3] = CanH_DiagArray[3];
 8006200:	4b08      	ldr	r3, [pc, #32]	@ (8006224 <DiagService_RC_LoadControl_Status+0xe8>)
 8006202:	78da      	ldrb	r2, [r3, #3]
 8006204:	4b0c      	ldr	r3, [pc, #48]	@ (8006238 <DiagService_RC_LoadControl_Status+0xfc>)
 8006206:	70da      	strb	r2, [r3, #3]
	Dcm_TxData[4] = CanH_DiagArray[4];
 8006208:	4b06      	ldr	r3, [pc, #24]	@ (8006224 <DiagService_RC_LoadControl_Status+0xe8>)
 800620a:	791a      	ldrb	r2, [r3, #4]
 800620c:	4b0a      	ldr	r3, [pc, #40]	@ (8006238 <DiagService_RC_LoadControl_Status+0xfc>)
 800620e:	711a      	strb	r2, [r3, #4]
	HAL_CAN_AddTxMessage(&hcan, &Dcm_TxHeader, Dcm_TxData, &Dcm_TxMailbox);
 8006210:	4b0a      	ldr	r3, [pc, #40]	@ (800623c <DiagService_RC_LoadControl_Status+0x100>)
 8006212:	4a09      	ldr	r2, [pc, #36]	@ (8006238 <DiagService_RC_LoadControl_Status+0xfc>)
 8006214:	4907      	ldr	r1, [pc, #28]	@ (8006234 <DiagService_RC_LoadControl_Status+0xf8>)
 8006216:	480a      	ldr	r0, [pc, #40]	@ (8006240 <DiagService_RC_LoadControl_Status+0x104>)
 8006218:	f003 f81a 	bl	8009250 <HAL_CAN_AddTxMessage>
}
 800621c:	bf00      	nop
 800621e:	3708      	adds	r7, #8
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}
 8006224:	20000164 	.word	0x20000164
 8006228:	200000ac 	.word	0x200000ac
 800622c:	200000b4 	.word	0x200000b4
 8006230:	2000016c 	.word	0x2000016c
 8006234:	200001b4 	.word	0x200001b4
 8006238:	200001cc 	.word	0x200001cc
 800623c:	200001d4 	.word	0x200001d4
 8006240:	20000838 	.word	0x20000838

08006244 <DiagService_RC_LoadControl_RestoreLoadsStatus>:
void DiagService_RC_LoadControl_RestoreLoadsStatus(void)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	af00      	add	r7, sp, #0
	LoadCtrl_PermanentSwitchOff_Rin2 = 0;
 8006248:	4b20      	ldr	r3, [pc, #128]	@ (80062cc <DiagService_RC_LoadControl_RestoreLoadsStatus+0x88>)
 800624a:	2200      	movs	r2, #0
 800624c:	701a      	strb	r2, [r3, #0]
	LoadCtrl_PermanentSwitchOff_Rin3 = 0;
 800624e:	4b20      	ldr	r3, [pc, #128]	@ (80062d0 <DiagService_RC_LoadControl_RestoreLoadsStatus+0x8c>)
 8006250:	2200      	movs	r2, #0
 8006252:	701a      	strb	r2, [r3, #0]
	LoadCtrl_PermanentSwitchOff_Rin4 = 0;
 8006254:	4b1f      	ldr	r3, [pc, #124]	@ (80062d4 <DiagService_RC_LoadControl_RestoreLoadsStatus+0x90>)
 8006256:	2200      	movs	r2, #0
 8006258:	701a      	strb	r2, [r3, #0]
	LoadCtrl_Rin2Counter = 0;
 800625a:	4b1f      	ldr	r3, [pc, #124]	@ (80062d8 <DiagService_RC_LoadControl_RestoreLoadsStatus+0x94>)
 800625c:	2200      	movs	r2, #0
 800625e:	701a      	strb	r2, [r3, #0]
	LoadCtrl_Rin3Counter = 0;
 8006260:	4b1e      	ldr	r3, [pc, #120]	@ (80062dc <DiagService_RC_LoadControl_RestoreLoadsStatus+0x98>)
 8006262:	2200      	movs	r2, #0
 8006264:	701a      	strb	r2, [r3, #0]
	LoadCtrl_Rin4Counter = 0;
 8006266:	4b1e      	ldr	r3, [pc, #120]	@ (80062e0 <DiagService_RC_LoadControl_RestoreLoadsStatus+0x9c>)
 8006268:	2200      	movs	r2, #0
 800626a:	701a      	strb	r2, [r3, #0]
	LoadCtrl_LockRin2 = 0;
 800626c:	4b1d      	ldr	r3, [pc, #116]	@ (80062e4 <DiagService_RC_LoadControl_RestoreLoadsStatus+0xa0>)
 800626e:	2200      	movs	r2, #0
 8006270:	701a      	strb	r2, [r3, #0]
	LoadCtrl_LockRin3 = 0;
 8006272:	4b1d      	ldr	r3, [pc, #116]	@ (80062e8 <DiagService_RC_LoadControl_RestoreLoadsStatus+0xa4>)
 8006274:	2200      	movs	r2, #0
 8006276:	701a      	strb	r2, [r3, #0]
	LoadCtrl_LockRin4 = 0;
 8006278:	4b1c      	ldr	r3, [pc, #112]	@ (80062ec <DiagService_RC_LoadControl_RestoreLoadsStatus+0xa8>)
 800627a:	2200      	movs	r2, #0
 800627c:	701a      	strb	r2, [r3, #0]
	Dcm_TxHeader.DLC = CanH_DiagRxHeader.DLC;
 800627e:	4b1c      	ldr	r3, [pc, #112]	@ (80062f0 <DiagService_RC_LoadControl_RestoreLoadsStatus+0xac>)
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	4a1c      	ldr	r2, [pc, #112]	@ (80062f4 <DiagService_RC_LoadControl_RestoreLoadsStatus+0xb0>)
 8006284:	6113      	str	r3, [r2, #16]
	Dcm_TxHeader.StdId = CanH_DiagRxHeader.StdId + 1;
 8006286:	4b1a      	ldr	r3, [pc, #104]	@ (80062f0 <DiagService_RC_LoadControl_RestoreLoadsStatus+0xac>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	3301      	adds	r3, #1
 800628c:	4a19      	ldr	r2, [pc, #100]	@ (80062f4 <DiagService_RC_LoadControl_RestoreLoadsStatus+0xb0>)
 800628e:	6013      	str	r3, [r2, #0]
	Dcm_TxData[0] = CanH_DiagArray[0];
 8006290:	4b19      	ldr	r3, [pc, #100]	@ (80062f8 <DiagService_RC_LoadControl_RestoreLoadsStatus+0xb4>)
 8006292:	781a      	ldrb	r2, [r3, #0]
 8006294:	4b19      	ldr	r3, [pc, #100]	@ (80062fc <DiagService_RC_LoadControl_RestoreLoadsStatus+0xb8>)
 8006296:	701a      	strb	r2, [r3, #0]
	Dcm_TxData[1] = CanH_DiagArray[1] + 0x40;
 8006298:	4b17      	ldr	r3, [pc, #92]	@ (80062f8 <DiagService_RC_LoadControl_RestoreLoadsStatus+0xb4>)
 800629a:	785b      	ldrb	r3, [r3, #1]
 800629c:	3340      	adds	r3, #64	@ 0x40
 800629e:	b2da      	uxtb	r2, r3
 80062a0:	4b16      	ldr	r3, [pc, #88]	@ (80062fc <DiagService_RC_LoadControl_RestoreLoadsStatus+0xb8>)
 80062a2:	705a      	strb	r2, [r3, #1]
	Dcm_TxData[2] = CanH_DiagArray[2];
 80062a4:	4b14      	ldr	r3, [pc, #80]	@ (80062f8 <DiagService_RC_LoadControl_RestoreLoadsStatus+0xb4>)
 80062a6:	789a      	ldrb	r2, [r3, #2]
 80062a8:	4b14      	ldr	r3, [pc, #80]	@ (80062fc <DiagService_RC_LoadControl_RestoreLoadsStatus+0xb8>)
 80062aa:	709a      	strb	r2, [r3, #2]
	Dcm_TxData[3] = CanH_DiagArray[3];
 80062ac:	4b12      	ldr	r3, [pc, #72]	@ (80062f8 <DiagService_RC_LoadControl_RestoreLoadsStatus+0xb4>)
 80062ae:	78da      	ldrb	r2, [r3, #3]
 80062b0:	4b12      	ldr	r3, [pc, #72]	@ (80062fc <DiagService_RC_LoadControl_RestoreLoadsStatus+0xb8>)
 80062b2:	70da      	strb	r2, [r3, #3]
	Dcm_TxData[4] = CanH_DiagArray[4];
 80062b4:	4b10      	ldr	r3, [pc, #64]	@ (80062f8 <DiagService_RC_LoadControl_RestoreLoadsStatus+0xb4>)
 80062b6:	791a      	ldrb	r2, [r3, #4]
 80062b8:	4b10      	ldr	r3, [pc, #64]	@ (80062fc <DiagService_RC_LoadControl_RestoreLoadsStatus+0xb8>)
 80062ba:	711a      	strb	r2, [r3, #4]
	HAL_CAN_AddTxMessage(&hcan, &Dcm_TxHeader, Dcm_TxData, &Dcm_TxMailbox);
 80062bc:	4b10      	ldr	r3, [pc, #64]	@ (8006300 <DiagService_RC_LoadControl_RestoreLoadsStatus+0xbc>)
 80062be:	4a0f      	ldr	r2, [pc, #60]	@ (80062fc <DiagService_RC_LoadControl_RestoreLoadsStatus+0xb8>)
 80062c0:	490c      	ldr	r1, [pc, #48]	@ (80062f4 <DiagService_RC_LoadControl_RestoreLoadsStatus+0xb0>)
 80062c2:	4810      	ldr	r0, [pc, #64]	@ (8006304 <DiagService_RC_LoadControl_RestoreLoadsStatus+0xc0>)
 80062c4:	f002 ffc4 	bl	8009250 <HAL_CAN_AddTxMessage>
}
 80062c8:	bf00      	nop
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	20004c06 	.word	0x20004c06
 80062d0:	20004c07 	.word	0x20004c07
 80062d4:	20004c08 	.word	0x20004c08
 80062d8:	20004c0e 	.word	0x20004c0e
 80062dc:	20004c0f 	.word	0x20004c0f
 80062e0:	20004c10 	.word	0x20004c10
 80062e4:	20004c16 	.word	0x20004c16
 80062e8:	20004c17 	.word	0x20004c17
 80062ec:	20004c18 	.word	0x20004c18
 80062f0:	2000016c 	.word	0x2000016c
 80062f4:	200001b4 	.word	0x200001b4
 80062f8:	20000164 	.word	0x20000164
 80062fc:	200001cc 	.word	0x200001cc
 8006300:	200001d4 	.word	0x200001d4
 8006304:	20000838 	.word	0x20000838

08006308 <DiagService_DSC_DefaultSession>:
void DiagService_DSC_DefaultSession(void)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	af00      	add	r7, sp, #0
	Dcm_TxHeader.DLC = CanH_DiagRxHeader.DLC;
 800630c:	4b10      	ldr	r3, [pc, #64]	@ (8006350 <DiagService_DSC_DefaultSession+0x48>)
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	4a10      	ldr	r2, [pc, #64]	@ (8006354 <DiagService_DSC_DefaultSession+0x4c>)
 8006312:	6113      	str	r3, [r2, #16]
	Dcm_TxHeader.StdId = CanH_DiagRxHeader.StdId + 1;
 8006314:	4b0e      	ldr	r3, [pc, #56]	@ (8006350 <DiagService_DSC_DefaultSession+0x48>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	3301      	adds	r3, #1
 800631a:	4a0e      	ldr	r2, [pc, #56]	@ (8006354 <DiagService_DSC_DefaultSession+0x4c>)
 800631c:	6013      	str	r3, [r2, #0]
	Dcm_TxData[0] = CanH_DiagArray[0];
 800631e:	4b0e      	ldr	r3, [pc, #56]	@ (8006358 <DiagService_DSC_DefaultSession+0x50>)
 8006320:	781a      	ldrb	r2, [r3, #0]
 8006322:	4b0e      	ldr	r3, [pc, #56]	@ (800635c <DiagService_DSC_DefaultSession+0x54>)
 8006324:	701a      	strb	r2, [r3, #0]
	Dcm_TxData[1] = CanH_DiagArray[1] + 0x40;
 8006326:	4b0c      	ldr	r3, [pc, #48]	@ (8006358 <DiagService_DSC_DefaultSession+0x50>)
 8006328:	785b      	ldrb	r3, [r3, #1]
 800632a:	3340      	adds	r3, #64	@ 0x40
 800632c:	b2da      	uxtb	r2, r3
 800632e:	4b0b      	ldr	r3, [pc, #44]	@ (800635c <DiagService_DSC_DefaultSession+0x54>)
 8006330:	705a      	strb	r2, [r3, #1]
	Dcm_TxData[2] = CanH_DiagArray[2];
 8006332:	4b09      	ldr	r3, [pc, #36]	@ (8006358 <DiagService_DSC_DefaultSession+0x50>)
 8006334:	789a      	ldrb	r2, [r3, #2]
 8006336:	4b09      	ldr	r3, [pc, #36]	@ (800635c <DiagService_DSC_DefaultSession+0x54>)
 8006338:	709a      	strb	r2, [r3, #2]
	Dcm_DiagnosticSession = DEFAULT;
 800633a:	4b09      	ldr	r3, [pc, #36]	@ (8006360 <DiagService_DSC_DefaultSession+0x58>)
 800633c:	2200      	movs	r2, #0
 800633e:	701a      	strb	r2, [r3, #0]
	HAL_CAN_AddTxMessage(&hcan, &Dcm_TxHeader, Dcm_TxData, &Dcm_TxMailbox);
 8006340:	4b08      	ldr	r3, [pc, #32]	@ (8006364 <DiagService_DSC_DefaultSession+0x5c>)
 8006342:	4a06      	ldr	r2, [pc, #24]	@ (800635c <DiagService_DSC_DefaultSession+0x54>)
 8006344:	4903      	ldr	r1, [pc, #12]	@ (8006354 <DiagService_DSC_DefaultSession+0x4c>)
 8006346:	4808      	ldr	r0, [pc, #32]	@ (8006368 <DiagService_DSC_DefaultSession+0x60>)
 8006348:	f002 ff82 	bl	8009250 <HAL_CAN_AddTxMessage>
}
 800634c:	bf00      	nop
 800634e:	bd80      	pop	{r7, pc}
 8006350:	2000016c 	.word	0x2000016c
 8006354:	200001b4 	.word	0x200001b4
 8006358:	20000164 	.word	0x20000164
 800635c:	200001cc 	.word	0x200001cc
 8006360:	20004c20 	.word	0x20004c20
 8006364:	200001d4 	.word	0x200001d4
 8006368:	20000838 	.word	0x20000838

0800636c <DiagService_DSC_ExtendedSession>:
void DiagService_DSC_ExtendedSession(void)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	af00      	add	r7, sp, #0
	Dcm_TxHeader.DLC = CanH_DiagRxHeader.DLC;
 8006370:	4b10      	ldr	r3, [pc, #64]	@ (80063b4 <DiagService_DSC_ExtendedSession+0x48>)
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	4a10      	ldr	r2, [pc, #64]	@ (80063b8 <DiagService_DSC_ExtendedSession+0x4c>)
 8006376:	6113      	str	r3, [r2, #16]
	Dcm_TxHeader.StdId = CanH_DiagRxHeader.StdId + 1;
 8006378:	4b0e      	ldr	r3, [pc, #56]	@ (80063b4 <DiagService_DSC_ExtendedSession+0x48>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	3301      	adds	r3, #1
 800637e:	4a0e      	ldr	r2, [pc, #56]	@ (80063b8 <DiagService_DSC_ExtendedSession+0x4c>)
 8006380:	6013      	str	r3, [r2, #0]
	Dcm_TxData[0] = CanH_DiagArray[0];
 8006382:	4b0e      	ldr	r3, [pc, #56]	@ (80063bc <DiagService_DSC_ExtendedSession+0x50>)
 8006384:	781a      	ldrb	r2, [r3, #0]
 8006386:	4b0e      	ldr	r3, [pc, #56]	@ (80063c0 <DiagService_DSC_ExtendedSession+0x54>)
 8006388:	701a      	strb	r2, [r3, #0]
	Dcm_TxData[1] = CanH_DiagArray[1] + 0x40;
 800638a:	4b0c      	ldr	r3, [pc, #48]	@ (80063bc <DiagService_DSC_ExtendedSession+0x50>)
 800638c:	785b      	ldrb	r3, [r3, #1]
 800638e:	3340      	adds	r3, #64	@ 0x40
 8006390:	b2da      	uxtb	r2, r3
 8006392:	4b0b      	ldr	r3, [pc, #44]	@ (80063c0 <DiagService_DSC_ExtendedSession+0x54>)
 8006394:	705a      	strb	r2, [r3, #1]
	Dcm_TxData[2] = CanH_DiagArray[2];
 8006396:	4b09      	ldr	r3, [pc, #36]	@ (80063bc <DiagService_DSC_ExtendedSession+0x50>)
 8006398:	789a      	ldrb	r2, [r3, #2]
 800639a:	4b09      	ldr	r3, [pc, #36]	@ (80063c0 <DiagService_DSC_ExtendedSession+0x54>)
 800639c:	709a      	strb	r2, [r3, #2]
	Dcm_DiagnosticSession = EXTENDED;
 800639e:	4b09      	ldr	r3, [pc, #36]	@ (80063c4 <DiagService_DSC_ExtendedSession+0x58>)
 80063a0:	2201      	movs	r2, #1
 80063a2:	701a      	strb	r2, [r3, #0]
	HAL_CAN_AddTxMessage(&hcan, &Dcm_TxHeader, Dcm_TxData, &Dcm_TxMailbox);
 80063a4:	4b08      	ldr	r3, [pc, #32]	@ (80063c8 <DiagService_DSC_ExtendedSession+0x5c>)
 80063a6:	4a06      	ldr	r2, [pc, #24]	@ (80063c0 <DiagService_DSC_ExtendedSession+0x54>)
 80063a8:	4903      	ldr	r1, [pc, #12]	@ (80063b8 <DiagService_DSC_ExtendedSession+0x4c>)
 80063aa:	4808      	ldr	r0, [pc, #32]	@ (80063cc <DiagService_DSC_ExtendedSession+0x60>)
 80063ac:	f002 ff50 	bl	8009250 <HAL_CAN_AddTxMessage>
}
 80063b0:	bf00      	nop
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	2000016c 	.word	0x2000016c
 80063b8:	200001b4 	.word	0x200001b4
 80063bc:	20000164 	.word	0x20000164
 80063c0:	200001cc 	.word	0x200001cc
 80063c4:	20004c20 	.word	0x20004c20
 80063c8:	200001d4 	.word	0x200001d4
 80063cc:	20000838 	.word	0x20000838

080063d0 <DiagService_DSC_CalibrationSession>:
void DiagService_DSC_CalibrationSession(void)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	af00      	add	r7, sp, #0
	Dcm_TxHeader.DLC = CanH_DiagRxHeader.DLC;
 80063d4:	4b14      	ldr	r3, [pc, #80]	@ (8006428 <DiagService_DSC_CalibrationSession+0x58>)
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	4a14      	ldr	r2, [pc, #80]	@ (800642c <DiagService_DSC_CalibrationSession+0x5c>)
 80063da:	6113      	str	r3, [r2, #16]
	Dcm_TxHeader.StdId = CanH_DiagRxHeader.StdId + 1;
 80063dc:	4b12      	ldr	r3, [pc, #72]	@ (8006428 <DiagService_DSC_CalibrationSession+0x58>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	3301      	adds	r3, #1
 80063e2:	4a12      	ldr	r2, [pc, #72]	@ (800642c <DiagService_DSC_CalibrationSession+0x5c>)
 80063e4:	6013      	str	r3, [r2, #0]
	Dcm_TxData[0] = CanH_DiagArray[0];
 80063e6:	4b12      	ldr	r3, [pc, #72]	@ (8006430 <DiagService_DSC_CalibrationSession+0x60>)
 80063e8:	781a      	ldrb	r2, [r3, #0]
 80063ea:	4b12      	ldr	r3, [pc, #72]	@ (8006434 <DiagService_DSC_CalibrationSession+0x64>)
 80063ec:	701a      	strb	r2, [r3, #0]
	Dcm_TxData[1] = CanH_DiagArray[1] + 0x40;
 80063ee:	4b10      	ldr	r3, [pc, #64]	@ (8006430 <DiagService_DSC_CalibrationSession+0x60>)
 80063f0:	785b      	ldrb	r3, [r3, #1]
 80063f2:	3340      	adds	r3, #64	@ 0x40
 80063f4:	b2da      	uxtb	r2, r3
 80063f6:	4b0f      	ldr	r3, [pc, #60]	@ (8006434 <DiagService_DSC_CalibrationSession+0x64>)
 80063f8:	705a      	strb	r2, [r3, #1]
	Dcm_TxData[2] = CanH_DiagArray[2];
 80063fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006430 <DiagService_DSC_CalibrationSession+0x60>)
 80063fc:	789a      	ldrb	r2, [r3, #2]
 80063fe:	4b0d      	ldr	r3, [pc, #52]	@ (8006434 <DiagService_DSC_CalibrationSession+0x64>)
 8006400:	709a      	strb	r2, [r3, #2]
	Dcm_DiagnosticSession = CALIBRATION;
 8006402:	4b0d      	ldr	r3, [pc, #52]	@ (8006438 <DiagService_DSC_CalibrationSession+0x68>)
 8006404:	2204      	movs	r2, #4
 8006406:	701a      	strb	r2, [r3, #0]
	HAL_CAN_AddTxMessage(&hcan, &Dcm_TxHeader, Dcm_TxData, &Dcm_TxMailbox);
 8006408:	4b0c      	ldr	r3, [pc, #48]	@ (800643c <DiagService_DSC_CalibrationSession+0x6c>)
 800640a:	4a0a      	ldr	r2, [pc, #40]	@ (8006434 <DiagService_DSC_CalibrationSession+0x64>)
 800640c:	4907      	ldr	r1, [pc, #28]	@ (800642c <DiagService_DSC_CalibrationSession+0x5c>)
 800640e:	480c      	ldr	r0, [pc, #48]	@ (8006440 <DiagService_DSC_CalibrationSession+0x70>)
 8006410:	f002 ff1e 	bl	8009250 <HAL_CAN_AddTxMessage>
	HAL_Delay(1);
 8006414:	2001      	movs	r0, #1
 8006416:	f001 fef5 	bl	8008204 <HAL_Delay>
	NvM_WriteAll();
 800641a:	f000 fd53 	bl	8006ec4 <NvM_WriteAll>
	EcuM_PerformReset(0);
 800641e:	2000      	movs	r0, #0
 8006420:	f000 fede 	bl	80071e0 <EcuM_PerformReset>
}
 8006424:	bf00      	nop
 8006426:	bd80      	pop	{r7, pc}
 8006428:	2000016c 	.word	0x2000016c
 800642c:	200001b4 	.word	0x200001b4
 8006430:	20000164 	.word	0x20000164
 8006434:	200001cc 	.word	0x200001cc
 8006438:	20004c20 	.word	0x20004c20
 800643c:	200001d4 	.word	0x200001d4
 8006440:	20000838 	.word	0x20000838

08006444 <DiagService_DSC_ProgrammingSession>:
void DiagService_DSC_ProgrammingSession(void)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	af00      	add	r7, sp, #0
	Dcm_TxHeader.DLC = CanH_DiagRxHeader.DLC;
 8006448:	4b14      	ldr	r3, [pc, #80]	@ (800649c <DiagService_DSC_ProgrammingSession+0x58>)
 800644a:	691b      	ldr	r3, [r3, #16]
 800644c:	4a14      	ldr	r2, [pc, #80]	@ (80064a0 <DiagService_DSC_ProgrammingSession+0x5c>)
 800644e:	6113      	str	r3, [r2, #16]
	Dcm_TxHeader.StdId = CanH_DiagRxHeader.StdId + 1;
 8006450:	4b12      	ldr	r3, [pc, #72]	@ (800649c <DiagService_DSC_ProgrammingSession+0x58>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	3301      	adds	r3, #1
 8006456:	4a12      	ldr	r2, [pc, #72]	@ (80064a0 <DiagService_DSC_ProgrammingSession+0x5c>)
 8006458:	6013      	str	r3, [r2, #0]
	Dcm_TxData[0] = CanH_DiagArray[0];
 800645a:	4b12      	ldr	r3, [pc, #72]	@ (80064a4 <DiagService_DSC_ProgrammingSession+0x60>)
 800645c:	781a      	ldrb	r2, [r3, #0]
 800645e:	4b12      	ldr	r3, [pc, #72]	@ (80064a8 <DiagService_DSC_ProgrammingSession+0x64>)
 8006460:	701a      	strb	r2, [r3, #0]
	Dcm_TxData[1] = CanH_DiagArray[1] + 0x40;
 8006462:	4b10      	ldr	r3, [pc, #64]	@ (80064a4 <DiagService_DSC_ProgrammingSession+0x60>)
 8006464:	785b      	ldrb	r3, [r3, #1]
 8006466:	3340      	adds	r3, #64	@ 0x40
 8006468:	b2da      	uxtb	r2, r3
 800646a:	4b0f      	ldr	r3, [pc, #60]	@ (80064a8 <DiagService_DSC_ProgrammingSession+0x64>)
 800646c:	705a      	strb	r2, [r3, #1]
	Dcm_TxData[2] = CanH_DiagArray[2];
 800646e:	4b0d      	ldr	r3, [pc, #52]	@ (80064a4 <DiagService_DSC_ProgrammingSession+0x60>)
 8006470:	789a      	ldrb	r2, [r3, #2]
 8006472:	4b0d      	ldr	r3, [pc, #52]	@ (80064a8 <DiagService_DSC_ProgrammingSession+0x64>)
 8006474:	709a      	strb	r2, [r3, #2]
	Dcm_DiagnosticSession = PROGRAMMING;
 8006476:	4b0d      	ldr	r3, [pc, #52]	@ (80064ac <DiagService_DSC_ProgrammingSession+0x68>)
 8006478:	2202      	movs	r2, #2
 800647a:	701a      	strb	r2, [r3, #0]
	HAL_CAN_AddTxMessage(&hcan, &Dcm_TxHeader, Dcm_TxData, &Dcm_TxMailbox);
 800647c:	4b0c      	ldr	r3, [pc, #48]	@ (80064b0 <DiagService_DSC_ProgrammingSession+0x6c>)
 800647e:	4a0a      	ldr	r2, [pc, #40]	@ (80064a8 <DiagService_DSC_ProgrammingSession+0x64>)
 8006480:	4907      	ldr	r1, [pc, #28]	@ (80064a0 <DiagService_DSC_ProgrammingSession+0x5c>)
 8006482:	480c      	ldr	r0, [pc, #48]	@ (80064b4 <DiagService_DSC_ProgrammingSession+0x70>)
 8006484:	f002 fee4 	bl	8009250 <HAL_CAN_AddTxMessage>
	HAL_Delay(1);
 8006488:	2001      	movs	r0, #1
 800648a:	f001 febb 	bl	8008204 <HAL_Delay>
	NvM_WriteAll();
 800648e:	f000 fd19 	bl	8006ec4 <NvM_WriteAll>
	EcuM_PerformReset(0);
 8006492:	2000      	movs	r0, #0
 8006494:	f000 fea4 	bl	80071e0 <EcuM_PerformReset>
}
 8006498:	bf00      	nop
 800649a:	bd80      	pop	{r7, pc}
 800649c:	2000016c 	.word	0x2000016c
 80064a0:	200001b4 	.word	0x200001b4
 80064a4:	20000164 	.word	0x20000164
 80064a8:	200001cc 	.word	0x200001cc
 80064ac:	20004c20 	.word	0x20004c20
 80064b0:	200001d4 	.word	0x200001d4
 80064b4:	20000838 	.word	0x20000838

080064b8 <DiagService_ER_HardReset>:
void DiagService_ER_HardReset(void)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	af00      	add	r7, sp, #0
	Dcm_TxHeader.DLC = CanH_DiagRxHeader.DLC;
 80064bc:	4b14      	ldr	r3, [pc, #80]	@ (8006510 <DiagService_ER_HardReset+0x58>)
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	4a14      	ldr	r2, [pc, #80]	@ (8006514 <DiagService_ER_HardReset+0x5c>)
 80064c2:	6113      	str	r3, [r2, #16]
	Dcm_TxHeader.StdId = CanH_DiagRxHeader.StdId + 1;
 80064c4:	4b12      	ldr	r3, [pc, #72]	@ (8006510 <DiagService_ER_HardReset+0x58>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	3301      	adds	r3, #1
 80064ca:	4a12      	ldr	r2, [pc, #72]	@ (8006514 <DiagService_ER_HardReset+0x5c>)
 80064cc:	6013      	str	r3, [r2, #0]
	Dcm_TxData[0] = CanH_DiagArray[0];
 80064ce:	4b12      	ldr	r3, [pc, #72]	@ (8006518 <DiagService_ER_HardReset+0x60>)
 80064d0:	781a      	ldrb	r2, [r3, #0]
 80064d2:	4b12      	ldr	r3, [pc, #72]	@ (800651c <DiagService_ER_HardReset+0x64>)
 80064d4:	701a      	strb	r2, [r3, #0]
	Dcm_TxData[1] = CanH_DiagArray[1] + 0x40;
 80064d6:	4b10      	ldr	r3, [pc, #64]	@ (8006518 <DiagService_ER_HardReset+0x60>)
 80064d8:	785b      	ldrb	r3, [r3, #1]
 80064da:	3340      	adds	r3, #64	@ 0x40
 80064dc:	b2da      	uxtb	r2, r3
 80064de:	4b0f      	ldr	r3, [pc, #60]	@ (800651c <DiagService_ER_HardReset+0x64>)
 80064e0:	705a      	strb	r2, [r3, #1]
	Dcm_TxData[2] = CanH_DiagArray[2];
 80064e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006518 <DiagService_ER_HardReset+0x60>)
 80064e4:	789a      	ldrb	r2, [r3, #2]
 80064e6:	4b0d      	ldr	r3, [pc, #52]	@ (800651c <DiagService_ER_HardReset+0x64>)
 80064e8:	709a      	strb	r2, [r3, #2]
	Dcm_DiagnosticSession = HARDRESET;
 80064ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006520 <DiagService_ER_HardReset+0x68>)
 80064ec:	2205      	movs	r2, #5
 80064ee:	701a      	strb	r2, [r3, #0]
	HAL_CAN_AddTxMessage(&hcan, &Dcm_TxHeader, Dcm_TxData, &Dcm_TxMailbox);
 80064f0:	4b0c      	ldr	r3, [pc, #48]	@ (8006524 <DiagService_ER_HardReset+0x6c>)
 80064f2:	4a0a      	ldr	r2, [pc, #40]	@ (800651c <DiagService_ER_HardReset+0x64>)
 80064f4:	4907      	ldr	r1, [pc, #28]	@ (8006514 <DiagService_ER_HardReset+0x5c>)
 80064f6:	480c      	ldr	r0, [pc, #48]	@ (8006528 <DiagService_ER_HardReset+0x70>)
 80064f8:	f002 feaa 	bl	8009250 <HAL_CAN_AddTxMessage>
	HAL_Delay(1);
 80064fc:	2001      	movs	r0, #1
 80064fe:	f001 fe81 	bl	8008204 <HAL_Delay>
	NvM_WriteAll();
 8006502:	f000 fcdf 	bl	8006ec4 <NvM_WriteAll>
	EcuM_PerformReset(0);
 8006506:	2000      	movs	r0, #0
 8006508:	f000 fe6a 	bl	80071e0 <EcuM_PerformReset>
}
 800650c:	bf00      	nop
 800650e:	bd80      	pop	{r7, pc}
 8006510:	2000016c 	.word	0x2000016c
 8006514:	200001b4 	.word	0x200001b4
 8006518:	20000164 	.word	0x20000164
 800651c:	200001cc 	.word	0x200001cc
 8006520:	20004c20 	.word	0x20004c20
 8006524:	200001d4 	.word	0x200001d4
 8006528:	20000838 	.word	0x20000838

0800652c <DiagService_TP_TesterPresent>:
void DiagService_TP_TesterPresent(void)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	af00      	add	r7, sp, #0
	Dcm_TxHeader.DLC = CanH_DiagRxHeader.DLC;
 8006530:	4b15      	ldr	r3, [pc, #84]	@ (8006588 <DiagService_TP_TesterPresent+0x5c>)
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	4a15      	ldr	r2, [pc, #84]	@ (800658c <DiagService_TP_TesterPresent+0x60>)
 8006536:	6113      	str	r3, [r2, #16]
	Dcm_TxHeader.StdId = CanH_DiagRxHeader.StdId + 1;
 8006538:	4b13      	ldr	r3, [pc, #76]	@ (8006588 <DiagService_TP_TesterPresent+0x5c>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	3301      	adds	r3, #1
 800653e:	4a13      	ldr	r2, [pc, #76]	@ (800658c <DiagService_TP_TesterPresent+0x60>)
 8006540:	6013      	str	r3, [r2, #0]
	Dcm_TxData[0] = CanH_DiagArray[0];
 8006542:	4b13      	ldr	r3, [pc, #76]	@ (8006590 <DiagService_TP_TesterPresent+0x64>)
 8006544:	781a      	ldrb	r2, [r3, #0]
 8006546:	4b13      	ldr	r3, [pc, #76]	@ (8006594 <DiagService_TP_TesterPresent+0x68>)
 8006548:	701a      	strb	r2, [r3, #0]
	Dcm_TxData[1] = CanH_DiagArray[1] + 0x40;
 800654a:	4b11      	ldr	r3, [pc, #68]	@ (8006590 <DiagService_TP_TesterPresent+0x64>)
 800654c:	785b      	ldrb	r3, [r3, #1]
 800654e:	3340      	adds	r3, #64	@ 0x40
 8006550:	b2da      	uxtb	r2, r3
 8006552:	4b10      	ldr	r3, [pc, #64]	@ (8006594 <DiagService_TP_TesterPresent+0x68>)
 8006554:	705a      	strb	r2, [r3, #1]
	Dcm_TxData[2] = CanH_DiagArray[2];
 8006556:	4b0e      	ldr	r3, [pc, #56]	@ (8006590 <DiagService_TP_TesterPresent+0x64>)
 8006558:	789a      	ldrb	r2, [r3, #2]
 800655a:	4b0e      	ldr	r3, [pc, #56]	@ (8006594 <DiagService_TP_TesterPresent+0x68>)
 800655c:	709a      	strb	r2, [r3, #2]
	CanH_RequestBusSleep = 0;
 800655e:	4b0e      	ldr	r3, [pc, #56]	@ (8006598 <DiagService_TP_TesterPresent+0x6c>)
 8006560:	2200      	movs	r2, #0
 8006562:	701a      	strb	r2, [r3, #0]
	if(CanH_CommunicationState != CC_ACTIVE) CanH_CommunicationState = FULL_COMMUNICATION;
 8006564:	4b0d      	ldr	r3, [pc, #52]	@ (800659c <DiagService_TP_TesterPresent+0x70>)
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	2b04      	cmp	r3, #4
 800656a:	d002      	beq.n	8006572 <DiagService_TP_TesterPresent+0x46>
 800656c:	4b0b      	ldr	r3, [pc, #44]	@ (800659c <DiagService_TP_TesterPresent+0x70>)
 800656e:	2202      	movs	r2, #2
 8006570:	701a      	strb	r2, [r3, #0]
	else
	{
		/* Do nothing. */
	}
	CanH_NoCommCounter = 0;
 8006572:	4b0b      	ldr	r3, [pc, #44]	@ (80065a0 <DiagService_TP_TesterPresent+0x74>)
 8006574:	2200      	movs	r2, #0
 8006576:	701a      	strb	r2, [r3, #0]
	HAL_CAN_AddTxMessage(&hcan, &Dcm_TxHeader, Dcm_TxData, &Dcm_TxMailbox);
 8006578:	4b0a      	ldr	r3, [pc, #40]	@ (80065a4 <DiagService_TP_TesterPresent+0x78>)
 800657a:	4a06      	ldr	r2, [pc, #24]	@ (8006594 <DiagService_TP_TesterPresent+0x68>)
 800657c:	4903      	ldr	r1, [pc, #12]	@ (800658c <DiagService_TP_TesterPresent+0x60>)
 800657e:	480a      	ldr	r0, [pc, #40]	@ (80065a8 <DiagService_TP_TesterPresent+0x7c>)
 8006580:	f002 fe66 	bl	8009250 <HAL_CAN_AddTxMessage>
}
 8006584:	bf00      	nop
 8006586:	bd80      	pop	{r7, pc}
 8006588:	2000016c 	.word	0x2000016c
 800658c:	200001b4 	.word	0x200001b4
 8006590:	20000164 	.word	0x20000164
 8006594:	200001cc 	.word	0x200001cc
 8006598:	20000150 	.word	0x20000150
 800659c:	20000158 	.word	0x20000158
 80065a0:	20000154 	.word	0x20000154
 80065a4:	200001d4 	.word	0x200001d4
 80065a8:	20000838 	.word	0x20000838

080065ac <DiagService_CDTCI_ClearDiagnosticInformation>:

void DiagService_CDTCI_ClearDiagnosticInformation(void)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	af00      	add	r7, sp, #0
	Dcm_TxHeader.DLC = CanH_DiagRxHeader.DLC;
 80065b0:	4b0e      	ldr	r3, [pc, #56]	@ (80065ec <DiagService_CDTCI_ClearDiagnosticInformation+0x40>)
 80065b2:	691b      	ldr	r3, [r3, #16]
 80065b4:	4a0e      	ldr	r2, [pc, #56]	@ (80065f0 <DiagService_CDTCI_ClearDiagnosticInformation+0x44>)
 80065b6:	6113      	str	r3, [r2, #16]
	Dcm_TxHeader.StdId = CanH_DiagRxHeader.StdId + 1;
 80065b8:	4b0c      	ldr	r3, [pc, #48]	@ (80065ec <DiagService_CDTCI_ClearDiagnosticInformation+0x40>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	3301      	adds	r3, #1
 80065be:	4a0c      	ldr	r2, [pc, #48]	@ (80065f0 <DiagService_CDTCI_ClearDiagnosticInformation+0x44>)
 80065c0:	6013      	str	r3, [r2, #0]
	Dcm_TxData[0] = CanH_DiagArray[0];
 80065c2:	4b0c      	ldr	r3, [pc, #48]	@ (80065f4 <DiagService_CDTCI_ClearDiagnosticInformation+0x48>)
 80065c4:	781a      	ldrb	r2, [r3, #0]
 80065c6:	4b0c      	ldr	r3, [pc, #48]	@ (80065f8 <DiagService_CDTCI_ClearDiagnosticInformation+0x4c>)
 80065c8:	701a      	strb	r2, [r3, #0]
	Dcm_TxData[1] = CanH_DiagArray[1] + 0x40;
 80065ca:	4b0a      	ldr	r3, [pc, #40]	@ (80065f4 <DiagService_CDTCI_ClearDiagnosticInformation+0x48>)
 80065cc:	785b      	ldrb	r3, [r3, #1]
 80065ce:	3340      	adds	r3, #64	@ 0x40
 80065d0:	b2da      	uxtb	r2, r3
 80065d2:	4b09      	ldr	r3, [pc, #36]	@ (80065f8 <DiagService_CDTCI_ClearDiagnosticInformation+0x4c>)
 80065d4:	705a      	strb	r2, [r3, #1]
	Dem_ClearDtc();
 80065d6:	f000 fa31 	bl	8006a3c <Dem_ClearDtc>
	HAL_CAN_AddTxMessage(&hcan, &Dcm_TxHeader, Dcm_TxData, &Dcm_TxMailbox);
 80065da:	4b08      	ldr	r3, [pc, #32]	@ (80065fc <DiagService_CDTCI_ClearDiagnosticInformation+0x50>)
 80065dc:	4a06      	ldr	r2, [pc, #24]	@ (80065f8 <DiagService_CDTCI_ClearDiagnosticInformation+0x4c>)
 80065de:	4904      	ldr	r1, [pc, #16]	@ (80065f0 <DiagService_CDTCI_ClearDiagnosticInformation+0x44>)
 80065e0:	4807      	ldr	r0, [pc, #28]	@ (8006600 <DiagService_CDTCI_ClearDiagnosticInformation+0x54>)
 80065e2:	f002 fe35 	bl	8009250 <HAL_CAN_AddTxMessage>
}
 80065e6:	bf00      	nop
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	2000016c 	.word	0x2000016c
 80065f0:	200001b4 	.word	0x200001b4
 80065f4:	20000164 	.word	0x20000164
 80065f8:	200001cc 	.word	0x200001cc
 80065fc:	200001d4 	.word	0x200001d4
 8006600:	20000838 	.word	0x20000838

08006604 <Dcm_TxIsoTp>:
void Dcm_TxIsoTp(uint8 *data, uint16 size)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b08e      	sub	sp, #56	@ 0x38
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	460b      	mov	r3, r1
 800660e:	807b      	strh	r3, [r7, #2]
	CAN_TxHeaderTypeDef localTxHeader = {0, 0, 0, 0, 0, 0};
 8006610:	f107 0318 	add.w	r3, r7, #24
 8006614:	2200      	movs	r2, #0
 8006616:	601a      	str	r2, [r3, #0]
 8006618:	605a      	str	r2, [r3, #4]
 800661a:	609a      	str	r2, [r3, #8]
 800661c:	60da      	str	r2, [r3, #12]
 800661e:	611a      	str	r2, [r3, #16]
 8006620:	615a      	str	r2, [r3, #20]
	uint32 localTxMailbox = 0;
 8006622:	2300      	movs	r3, #0
 8006624:	617b      	str	r3, [r7, #20]
	uint16 localRemainingData = size;
 8006626:	887b      	ldrh	r3, [r7, #2]
 8006628:	86fb      	strh	r3, [r7, #54]	@ 0x36
	uint16 localOffset = 0;
 800662a:	2300      	movs	r3, #0
 800662c:	86bb      	strh	r3, [r7, #52]	@ 0x34
	uint8 localCANData[DCM_MAX_CAN_DATA_LEN];
	uint8 localSeqNum = 1;
 800662e:	2301      	movs	r3, #1
 8006630:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	localTxHeader.StdId = DCM_CAN_ID_TX;
 8006634:	f240 7303 	movw	r3, #1795	@ 0x703
 8006638:	61bb      	str	r3, [r7, #24]
	localTxHeader.RTR = CAN_RTR_DATA;
 800663a:	2300      	movs	r3, #0
 800663c:	627b      	str	r3, [r7, #36]	@ 0x24
	localTxHeader.IDE = CAN_ID_STD;
 800663e:	2300      	movs	r3, #0
 8006640:	623b      	str	r3, [r7, #32]
	localTxHeader.DLC = DCM_MAX_CAN_DATA_LEN;
 8006642:	2308      	movs	r3, #8
 8006644:	62bb      	str	r3, [r7, #40]	@ 0x28
	localTxHeader.TransmitGlobalTime = DISABLE;
 8006646:	2300      	movs	r3, #0
 8006648:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	// Send First Frame (FF)
	if (7 < size) // Data larger than 7 bytes requires FF
 800664c:	887b      	ldrh	r3, [r7, #2]
 800664e:	2b07      	cmp	r3, #7
 8006650:	d925      	bls.n	800669e <Dcm_TxIsoTp+0x9a>
	{
		localCANData[0] = 0x10 | ((size >> 8) & 0x0F);  // FF, first nibble, total size (12 bits)
 8006652:	887b      	ldrh	r3, [r7, #2]
 8006654:	0a1b      	lsrs	r3, r3, #8
 8006656:	b29b      	uxth	r3, r3
 8006658:	b25b      	sxtb	r3, r3
 800665a:	f003 030f 	and.w	r3, r3, #15
 800665e:	b25b      	sxtb	r3, r3
 8006660:	f043 0310 	orr.w	r3, r3, #16
 8006664:	b25b      	sxtb	r3, r3
 8006666:	b2db      	uxtb	r3, r3
 8006668:	733b      	strb	r3, [r7, #12]
		localCANData[1] = (size & 0xFF);                // Remaining total size bytes
 800666a:	887b      	ldrh	r3, [r7, #2]
 800666c:	b2db      	uxtb	r3, r3
 800666e:	737b      	strb	r3, [r7, #13]
		memcpy(&localCANData[2], &data[0], 6);          // First 6 bytes of data
 8006670:	f107 030c 	add.w	r3, r7, #12
 8006674:	3302      	adds	r3, #2
 8006676:	2206      	movs	r2, #6
 8006678:	6879      	ldr	r1, [r7, #4]
 800667a:	4618      	mov	r0, r3
 800667c:	f008 fee2 	bl	800f444 <memcpy>
		localOffset = 6;
 8006680:	2306      	movs	r3, #6
 8006682:	86bb      	strh	r3, [r7, #52]	@ 0x34
		localRemainingData -= 6;
 8006684:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006686:	3b06      	subs	r3, #6
 8006688:	86fb      	strh	r3, [r7, #54]	@ 0x36
		// Transmit First Frame
		HAL_CAN_AddTxMessage(&hcan, &localTxHeader, localCANData, &localTxMailbox);
 800668a:	f107 0314 	add.w	r3, r7, #20
 800668e:	f107 020c 	add.w	r2, r7, #12
 8006692:	f107 0118 	add.w	r1, r7, #24
 8006696:	4831      	ldr	r0, [pc, #196]	@ (800675c <Dcm_TxIsoTp+0x158>)
 8006698:	f002 fdda 	bl	8009250 <HAL_CAN_AddTxMessage>
 800669c:	e056      	b.n	800674c <Dcm_TxIsoTp+0x148>
	}
	else
	{
		// Single Frame (SF) if data <= 7 bytes
		localCANData[0] = size & 0x0F;  // SF, first nibble is length
 800669e:	887b      	ldrh	r3, [r7, #2]
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	f003 030f 	and.w	r3, r3, #15
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	733b      	strb	r3, [r7, #12]
		memcpy(&localCANData[1], &data[0], size);
 80066aa:	887a      	ldrh	r2, [r7, #2]
 80066ac:	f107 030c 	add.w	r3, r7, #12
 80066b0:	3301      	adds	r3, #1
 80066b2:	6879      	ldr	r1, [r7, #4]
 80066b4:	4618      	mov	r0, r3
 80066b6:	f008 fec5 	bl	800f444 <memcpy>
		// Transmit Single Frame
		HAL_CAN_AddTxMessage(&hcan, &localTxHeader, localCANData, &localTxMailbox);
 80066ba:	f107 0314 	add.w	r3, r7, #20
 80066be:	f107 020c 	add.w	r2, r7, #12
 80066c2:	f107 0118 	add.w	r1, r7, #24
 80066c6:	4825      	ldr	r0, [pc, #148]	@ (800675c <Dcm_TxIsoTp+0x158>)
 80066c8:	f002 fdc2 	bl	8009250 <HAL_CAN_AddTxMessage>
	}
	// Handle Flow Control (Wait for FC frame from receiver)
	// Normally you would wait for the receiver to send a Flow Control (FC) frame,
	// but here we'll assume it's always "Clear to Send" (CTS).
	// Send Consecutive Frames (CF)
	while(localRemainingData > 0)
 80066cc:	e03e      	b.n	800674c <Dcm_TxIsoTp+0x148>
	{
		localCANData[0] = 0x20 | (localSeqNum & 0x0F);  // CF with sequence number
 80066ce:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80066d2:	f003 030f 	and.w	r3, r3, #15
 80066d6:	b25b      	sxtb	r3, r3
 80066d8:	f043 0320 	orr.w	r3, r3, #32
 80066dc:	b25b      	sxtb	r3, r3
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	733b      	strb	r3, [r7, #12]
		if (localRemainingData >= 7)
 80066e2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80066e4:	2b06      	cmp	r3, #6
 80066e6:	d910      	bls.n	800670a <Dcm_TxIsoTp+0x106>
		{
			memcpy(&localCANData[1], &data[localOffset], 7);
 80066e8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	18d1      	adds	r1, r2, r3
 80066ee:	f107 030c 	add.w	r3, r7, #12
 80066f2:	3301      	adds	r3, #1
 80066f4:	2207      	movs	r2, #7
 80066f6:	4618      	mov	r0, r3
 80066f8:	f008 fea4 	bl	800f444 <memcpy>
			localOffset += 7;
 80066fc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80066fe:	3307      	adds	r3, #7
 8006700:	86bb      	strh	r3, [r7, #52]	@ 0x34
			localRemainingData -= 7;
 8006702:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006704:	3b07      	subs	r3, #7
 8006706:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006708:	e00f      	b.n	800672a <Dcm_TxIsoTp+0x126>
		}
		else
		{
			// Last frame with remaining bytes
			memcpy(&localCANData[1], &data[localOffset], localRemainingData);
 800670a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	18d1      	adds	r1, r2, r3
 8006710:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006712:	f107 030c 	add.w	r3, r7, #12
 8006716:	3301      	adds	r3, #1
 8006718:	4618      	mov	r0, r3
 800671a:	f008 fe93 	bl	800f444 <memcpy>
			localOffset += localRemainingData;
 800671e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006720:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006722:	4413      	add	r3, r2
 8006724:	86bb      	strh	r3, [r7, #52]	@ 0x34
			localRemainingData = 0;
 8006726:	2300      	movs	r3, #0
 8006728:	86fb      	strh	r3, [r7, #54]	@ 0x36
		}
		// Transmit Consecutive Frame
		HAL_CAN_AddTxMessage(&hcan, &localTxHeader, localCANData, &localTxMailbox);
 800672a:	f107 0314 	add.w	r3, r7, #20
 800672e:	f107 020c 	add.w	r2, r7, #12
 8006732:	f107 0118 	add.w	r1, r7, #24
 8006736:	4809      	ldr	r0, [pc, #36]	@ (800675c <Dcm_TxIsoTp+0x158>)
 8006738:	f002 fd8a 	bl	8009250 <HAL_CAN_AddTxMessage>
		HAL_Delay(1);  // Wait between consecutive frames
 800673c:	2001      	movs	r0, #1
 800673e:	f001 fd61 	bl	8008204 <HAL_Delay>
		localSeqNum++;
 8006742:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006746:	3301      	adds	r3, #1
 8006748:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	while(localRemainingData > 0)
 800674c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800674e:	2b00      	cmp	r3, #0
 8006750:	d1bd      	bne.n	80066ce <Dcm_TxIsoTp+0xca>
	}
}
 8006752:	bf00      	nop
 8006754:	bf00      	nop
 8006756:	3738      	adds	r7, #56	@ 0x38
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}
 800675c:	20000838 	.word	0x20000838

08006760 <DiagService_RDTCI_ReadDTCInformationSupportedDtc>:
void DiagService_RDTCI_ReadDTCInformationSupportedDtc(void)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
	uint8 *data = (uint8*)Dem_DTCArray;
 8006766:	4b14      	ldr	r3, [pc, #80]	@ (80067b8 <DiagService_RDTCI_ReadDTCInformationSupportedDtc+0x58>)
 8006768:	607b      	str	r3, [r7, #4]
	uint16 total_size = DEM_NUMBER_OF_DTCS * sizeof(Dem_DTC_t);
 800676a:	f44f 7322 	mov.w	r3, #648	@ 0x288
 800676e:	807b      	strh	r3, [r7, #2]
	Dcm_TxHeader.DLC = 4;
 8006770:	4b12      	ldr	r3, [pc, #72]	@ (80067bc <DiagService_RDTCI_ReadDTCInformationSupportedDtc+0x5c>)
 8006772:	2204      	movs	r2, #4
 8006774:	611a      	str	r2, [r3, #16]
	Dcm_TxHeader.StdId = 0x703;
 8006776:	4b11      	ldr	r3, [pc, #68]	@ (80067bc <DiagService_RDTCI_ReadDTCInformationSupportedDtc+0x5c>)
 8006778:	f240 7203 	movw	r2, #1795	@ 0x703
 800677c:	601a      	str	r2, [r3, #0]
	Dcm_TxData[0] = CanH_DiagArray[0];
 800677e:	4b10      	ldr	r3, [pc, #64]	@ (80067c0 <DiagService_RDTCI_ReadDTCInformationSupportedDtc+0x60>)
 8006780:	781a      	ldrb	r2, [r3, #0]
 8006782:	4b10      	ldr	r3, [pc, #64]	@ (80067c4 <DiagService_RDTCI_ReadDTCInformationSupportedDtc+0x64>)
 8006784:	701a      	strb	r2, [r3, #0]
	Dcm_TxData[1] = CanH_DiagArray[1] + 0x40;
 8006786:	4b0e      	ldr	r3, [pc, #56]	@ (80067c0 <DiagService_RDTCI_ReadDTCInformationSupportedDtc+0x60>)
 8006788:	785b      	ldrb	r3, [r3, #1]
 800678a:	3340      	adds	r3, #64	@ 0x40
 800678c:	b2da      	uxtb	r2, r3
 800678e:	4b0d      	ldr	r3, [pc, #52]	@ (80067c4 <DiagService_RDTCI_ReadDTCInformationSupportedDtc+0x64>)
 8006790:	705a      	strb	r2, [r3, #1]
	Dcm_TxData[2] = CanH_DiagArray[2];
 8006792:	4b0b      	ldr	r3, [pc, #44]	@ (80067c0 <DiagService_RDTCI_ReadDTCInformationSupportedDtc+0x60>)
 8006794:	789a      	ldrb	r2, [r3, #2]
 8006796:	4b0b      	ldr	r3, [pc, #44]	@ (80067c4 <DiagService_RDTCI_ReadDTCInformationSupportedDtc+0x64>)
 8006798:	709a      	strb	r2, [r3, #2]
	HAL_CAN_AddTxMessage(&hcan, &Dcm_TxHeader, Dcm_TxData, &Dcm_TxMailbox);
 800679a:	4b0b      	ldr	r3, [pc, #44]	@ (80067c8 <DiagService_RDTCI_ReadDTCInformationSupportedDtc+0x68>)
 800679c:	4a09      	ldr	r2, [pc, #36]	@ (80067c4 <DiagService_RDTCI_ReadDTCInformationSupportedDtc+0x64>)
 800679e:	4907      	ldr	r1, [pc, #28]	@ (80067bc <DiagService_RDTCI_ReadDTCInformationSupportedDtc+0x5c>)
 80067a0:	480a      	ldr	r0, [pc, #40]	@ (80067cc <DiagService_RDTCI_ReadDTCInformationSupportedDtc+0x6c>)
 80067a2:	f002 fd55 	bl	8009250 <HAL_CAN_AddTxMessage>
	Dcm_TxIsoTp(data, total_size);
 80067a6:	887b      	ldrh	r3, [r7, #2]
 80067a8:	4619      	mov	r1, r3
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f7ff ff2a 	bl	8006604 <Dcm_TxIsoTp>
}
 80067b0:	bf00      	nop
 80067b2:	3708      	adds	r7, #8
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	200001ec 	.word	0x200001ec
 80067bc:	200001b4 	.word	0x200001b4
 80067c0:	20000164 	.word	0x20000164
 80067c4:	200001cc 	.word	0x200001cc
 80067c8:	200001d4 	.word	0x200001d4
 80067cc:	20000838 	.word	0x20000838

080067d0 <DiagService_RDBI_ReadSWData>:
void DiagService_RDBI_ReadSWData(void)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	af00      	add	r7, sp, #0
	Dcm_TxHeader.DLC = 0x08;
 80067d4:	4b16      	ldr	r3, [pc, #88]	@ (8006830 <DiagService_RDBI_ReadSWData+0x60>)
 80067d6:	2208      	movs	r2, #8
 80067d8:	611a      	str	r2, [r3, #16]
	Dcm_TxHeader.StdId = CanH_DiagRxHeader.StdId + 1;
 80067da:	4b16      	ldr	r3, [pc, #88]	@ (8006834 <DiagService_RDBI_ReadSWData+0x64>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	3301      	adds	r3, #1
 80067e0:	4a13      	ldr	r2, [pc, #76]	@ (8006830 <DiagService_RDBI_ReadSWData+0x60>)
 80067e2:	6013      	str	r3, [r2, #0]
	Dcm_TxData[0] = 0x06;
 80067e4:	4b14      	ldr	r3, [pc, #80]	@ (8006838 <DiagService_RDBI_ReadSWData+0x68>)
 80067e6:	2206      	movs	r2, #6
 80067e8:	701a      	strb	r2, [r3, #0]
	Dcm_TxData[1] = CanH_DiagArray[1] + 0x40;
 80067ea:	4b14      	ldr	r3, [pc, #80]	@ (800683c <DiagService_RDBI_ReadSWData+0x6c>)
 80067ec:	785b      	ldrb	r3, [r3, #1]
 80067ee:	3340      	adds	r3, #64	@ 0x40
 80067f0:	b2da      	uxtb	r2, r3
 80067f2:	4b11      	ldr	r3, [pc, #68]	@ (8006838 <DiagService_RDBI_ReadSWData+0x68>)
 80067f4:	705a      	strb	r2, [r3, #1]
	Dcm_TxData[2] = CanH_DiagArray[2];
 80067f6:	4b11      	ldr	r3, [pc, #68]	@ (800683c <DiagService_RDBI_ReadSWData+0x6c>)
 80067f8:	789a      	ldrb	r2, [r3, #2]
 80067fa:	4b0f      	ldr	r3, [pc, #60]	@ (8006838 <DiagService_RDBI_ReadSWData+0x68>)
 80067fc:	709a      	strb	r2, [r3, #2]
	Dcm_TxData[3] = CanH_DiagArray[3];
 80067fe:	4b0f      	ldr	r3, [pc, #60]	@ (800683c <DiagService_RDBI_ReadSWData+0x6c>)
 8006800:	78da      	ldrb	r2, [r3, #3]
 8006802:	4b0d      	ldr	r3, [pc, #52]	@ (8006838 <DiagService_RDBI_ReadSWData+0x68>)
 8006804:	70da      	strb	r2, [r3, #3]
	Dcm_TxData[4] = Dcm_SWVersion.FlashBootLoaderVersion;
 8006806:	4b0e      	ldr	r3, [pc, #56]	@ (8006840 <DiagService_RDBI_ReadSWData+0x70>)
 8006808:	785a      	ldrb	r2, [r3, #1]
 800680a:	4b0b      	ldr	r3, [pc, #44]	@ (8006838 <DiagService_RDBI_ReadSWData+0x68>)
 800680c:	711a      	strb	r2, [r3, #4]
	Dcm_TxData[5] = Dcm_SWVersion.SoftwareVersion;
 800680e:	4b0c      	ldr	r3, [pc, #48]	@ (8006840 <DiagService_RDBI_ReadSWData+0x70>)
 8006810:	781a      	ldrb	r2, [r3, #0]
 8006812:	4b09      	ldr	r3, [pc, #36]	@ (8006838 <DiagService_RDBI_ReadSWData+0x68>)
 8006814:	715a      	strb	r2, [r3, #5]
	Dcm_TxData[6] = Dcm_SWVersion.CodingVersion;
 8006816:	4b0a      	ldr	r3, [pc, #40]	@ (8006840 <DiagService_RDBI_ReadSWData+0x70>)
 8006818:	789a      	ldrb	r2, [r3, #2]
 800681a:	4b07      	ldr	r3, [pc, #28]	@ (8006838 <DiagService_RDBI_ReadSWData+0x68>)
 800681c:	719a      	strb	r2, [r3, #6]
	HAL_CAN_AddTxMessage(&hcan, &Dcm_TxHeader, Dcm_TxData, &Dcm_TxMailbox);
 800681e:	4b09      	ldr	r3, [pc, #36]	@ (8006844 <DiagService_RDBI_ReadSWData+0x74>)
 8006820:	4a05      	ldr	r2, [pc, #20]	@ (8006838 <DiagService_RDBI_ReadSWData+0x68>)
 8006822:	4903      	ldr	r1, [pc, #12]	@ (8006830 <DiagService_RDBI_ReadSWData+0x60>)
 8006824:	4808      	ldr	r0, [pc, #32]	@ (8006848 <DiagService_RDBI_ReadSWData+0x78>)
 8006826:	f002 fd13 	bl	8009250 <HAL_CAN_AddTxMessage>
}
 800682a:	bf00      	nop
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	200001b4 	.word	0x200001b4
 8006834:	2000016c 	.word	0x2000016c
 8006838:	200001cc 	.word	0x200001cc
 800683c:	20000164 	.word	0x20000164
 8006840:	20000008 	.word	0x20000008
 8006844:	200001d4 	.word	0x200001d4
 8006848:	20000838 	.word	0x20000838

0800684c <DiagService_RDBI_ReadActiveDiagnosticSession>:
void DiagService_RDBI_ReadActiveDiagnosticSession(void)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	af00      	add	r7, sp, #0
	Dcm_TxHeader.DLC = CanH_DiagRxHeader.DLC;
 8006850:	4b15      	ldr	r3, [pc, #84]	@ (80068a8 <DiagService_RDBI_ReadActiveDiagnosticSession+0x5c>)
 8006852:	691b      	ldr	r3, [r3, #16]
 8006854:	4a15      	ldr	r2, [pc, #84]	@ (80068ac <DiagService_RDBI_ReadActiveDiagnosticSession+0x60>)
 8006856:	6113      	str	r3, [r2, #16]
	Dcm_TxHeader.StdId = CanH_DiagRxHeader.StdId + 1;
 8006858:	4b13      	ldr	r3, [pc, #76]	@ (80068a8 <DiagService_RDBI_ReadActiveDiagnosticSession+0x5c>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	3301      	adds	r3, #1
 800685e:	4a13      	ldr	r2, [pc, #76]	@ (80068ac <DiagService_RDBI_ReadActiveDiagnosticSession+0x60>)
 8006860:	6013      	str	r3, [r2, #0]
	Dcm_TxData[0] = CanH_DiagArray[0];
 8006862:	4b13      	ldr	r3, [pc, #76]	@ (80068b0 <DiagService_RDBI_ReadActiveDiagnosticSession+0x64>)
 8006864:	781a      	ldrb	r2, [r3, #0]
 8006866:	4b13      	ldr	r3, [pc, #76]	@ (80068b4 <DiagService_RDBI_ReadActiveDiagnosticSession+0x68>)
 8006868:	701a      	strb	r2, [r3, #0]
	Dcm_TxData[1] = CanH_DiagArray[1] + 0x40;
 800686a:	4b11      	ldr	r3, [pc, #68]	@ (80068b0 <DiagService_RDBI_ReadActiveDiagnosticSession+0x64>)
 800686c:	785b      	ldrb	r3, [r3, #1]
 800686e:	3340      	adds	r3, #64	@ 0x40
 8006870:	b2da      	uxtb	r2, r3
 8006872:	4b10      	ldr	r3, [pc, #64]	@ (80068b4 <DiagService_RDBI_ReadActiveDiagnosticSession+0x68>)
 8006874:	705a      	strb	r2, [r3, #1]
	Dcm_TxData[2] = CanH_DiagArray[2];
 8006876:	4b0e      	ldr	r3, [pc, #56]	@ (80068b0 <DiagService_RDBI_ReadActiveDiagnosticSession+0x64>)
 8006878:	789a      	ldrb	r2, [r3, #2]
 800687a:	4b0e      	ldr	r3, [pc, #56]	@ (80068b4 <DiagService_RDBI_ReadActiveDiagnosticSession+0x68>)
 800687c:	709a      	strb	r2, [r3, #2]
	Dcm_TxData[3] = CanH_DiagArray[3];
 800687e:	4b0c      	ldr	r3, [pc, #48]	@ (80068b0 <DiagService_RDBI_ReadActiveDiagnosticSession+0x64>)
 8006880:	78da      	ldrb	r2, [r3, #3]
 8006882:	4b0c      	ldr	r3, [pc, #48]	@ (80068b4 <DiagService_RDBI_ReadActiveDiagnosticSession+0x68>)
 8006884:	70da      	strb	r2, [r3, #3]
	Dcm_TxData[4] = CanH_DiagArray[4];
 8006886:	4b0a      	ldr	r3, [pc, #40]	@ (80068b0 <DiagService_RDBI_ReadActiveDiagnosticSession+0x64>)
 8006888:	791a      	ldrb	r2, [r3, #4]
 800688a:	4b0a      	ldr	r3, [pc, #40]	@ (80068b4 <DiagService_RDBI_ReadActiveDiagnosticSession+0x68>)
 800688c:	711a      	strb	r2, [r3, #4]
	Dcm_TxData[5] = Dcm_DiagnosticSession;
 800688e:	4b0a      	ldr	r3, [pc, #40]	@ (80068b8 <DiagService_RDBI_ReadActiveDiagnosticSession+0x6c>)
 8006890:	781a      	ldrb	r2, [r3, #0]
 8006892:	4b08      	ldr	r3, [pc, #32]	@ (80068b4 <DiagService_RDBI_ReadActiveDiagnosticSession+0x68>)
 8006894:	715a      	strb	r2, [r3, #5]
	HAL_CAN_AddTxMessage(&hcan, &Dcm_TxHeader, Dcm_TxData, &Dcm_TxMailbox);
 8006896:	4b09      	ldr	r3, [pc, #36]	@ (80068bc <DiagService_RDBI_ReadActiveDiagnosticSession+0x70>)
 8006898:	4a06      	ldr	r2, [pc, #24]	@ (80068b4 <DiagService_RDBI_ReadActiveDiagnosticSession+0x68>)
 800689a:	4904      	ldr	r1, [pc, #16]	@ (80068ac <DiagService_RDBI_ReadActiveDiagnosticSession+0x60>)
 800689c:	4808      	ldr	r0, [pc, #32]	@ (80068c0 <DiagService_RDBI_ReadActiveDiagnosticSession+0x74>)
 800689e:	f002 fcd7 	bl	8009250 <HAL_CAN_AddTxMessage>
}
 80068a2:	bf00      	nop
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	2000016c 	.word	0x2000016c
 80068ac:	200001b4 	.word	0x200001b4
 80068b0:	20000164 	.word	0x20000164
 80068b4:	200001cc 	.word	0x200001cc
 80068b8:	20004c20 	.word	0x20004c20
 80068bc:	200001d4 	.word	0x200001d4
 80068c0:	20000838 	.word	0x20000838

080068c4 <DiagService_RDBI_ReadAliveTime>:
void DiagService_RDBI_ReadAliveTime(void)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	af00      	add	r7, sp, #0
	Dcm_TxHeader.DLC = 0x05;
 80068c8:	4b16      	ldr	r3, [pc, #88]	@ (8006924 <DiagService_RDBI_ReadAliveTime+0x60>)
 80068ca:	2205      	movs	r2, #5
 80068cc:	611a      	str	r2, [r3, #16]
	Dcm_TxHeader.StdId = CanH_DiagRxHeader.StdId + 1;
 80068ce:	4b16      	ldr	r3, [pc, #88]	@ (8006928 <DiagService_RDBI_ReadAliveTime+0x64>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	3301      	adds	r3, #1
 80068d4:	4a13      	ldr	r2, [pc, #76]	@ (8006924 <DiagService_RDBI_ReadAliveTime+0x60>)
 80068d6:	6013      	str	r3, [r2, #0]
	Dcm_TxData[0] = 0x04;
 80068d8:	4b14      	ldr	r3, [pc, #80]	@ (800692c <DiagService_RDBI_ReadAliveTime+0x68>)
 80068da:	2204      	movs	r2, #4
 80068dc:	701a      	strb	r2, [r3, #0]
	Dcm_TxData[1] = CanH_DiagArray[1] + 0x40;
 80068de:	4b14      	ldr	r3, [pc, #80]	@ (8006930 <DiagService_RDBI_ReadAliveTime+0x6c>)
 80068e0:	785b      	ldrb	r3, [r3, #1]
 80068e2:	3340      	adds	r3, #64	@ 0x40
 80068e4:	b2da      	uxtb	r2, r3
 80068e6:	4b11      	ldr	r3, [pc, #68]	@ (800692c <DiagService_RDBI_ReadAliveTime+0x68>)
 80068e8:	705a      	strb	r2, [r3, #1]
	Dcm_TxData[2] = CanH_DiagArray[2];
 80068ea:	4b11      	ldr	r3, [pc, #68]	@ (8006930 <DiagService_RDBI_ReadAliveTime+0x6c>)
 80068ec:	789a      	ldrb	r2, [r3, #2]
 80068ee:	4b0f      	ldr	r3, [pc, #60]	@ (800692c <DiagService_RDBI_ReadAliveTime+0x68>)
 80068f0:	709a      	strb	r2, [r3, #2]
	Dcm_TxData[3] = CanH_DiagArray[3];
 80068f2:	4b0f      	ldr	r3, [pc, #60]	@ (8006930 <DiagService_RDBI_ReadAliveTime+0x6c>)
 80068f4:	78da      	ldrb	r2, [r3, #3]
 80068f6:	4b0d      	ldr	r3, [pc, #52]	@ (800692c <DiagService_RDBI_ReadAliveTime+0x68>)
 80068f8:	70da      	strb	r2, [r3, #3]
	Dcm_TxData[4] = (uint8)(Dcm_AliveCounter * 5 / 60000);
 80068fa:	4b0e      	ldr	r3, [pc, #56]	@ (8006934 <DiagService_RDBI_ReadAliveTime+0x70>)
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	4613      	mov	r3, r2
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	4413      	add	r3, r2
 8006904:	4a0c      	ldr	r2, [pc, #48]	@ (8006938 <DiagService_RDBI_ReadAliveTime+0x74>)
 8006906:	fba2 2303 	umull	r2, r3, r2, r3
 800690a:	0b9b      	lsrs	r3, r3, #14
 800690c:	b2da      	uxtb	r2, r3
 800690e:	4b07      	ldr	r3, [pc, #28]	@ (800692c <DiagService_RDBI_ReadAliveTime+0x68>)
 8006910:	711a      	strb	r2, [r3, #4]
	HAL_CAN_AddTxMessage(&hcan, &Dcm_TxHeader, Dcm_TxData, &Dcm_TxMailbox);
 8006912:	4b0a      	ldr	r3, [pc, #40]	@ (800693c <DiagService_RDBI_ReadAliveTime+0x78>)
 8006914:	4a05      	ldr	r2, [pc, #20]	@ (800692c <DiagService_RDBI_ReadAliveTime+0x68>)
 8006916:	4903      	ldr	r1, [pc, #12]	@ (8006924 <DiagService_RDBI_ReadAliveTime+0x60>)
 8006918:	4809      	ldr	r0, [pc, #36]	@ (8006940 <DiagService_RDBI_ReadAliveTime+0x7c>)
 800691a:	f002 fc99 	bl	8009250 <HAL_CAN_AddTxMessage>
}
 800691e:	bf00      	nop
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	200001b4 	.word	0x200001b4
 8006928:	2000016c 	.word	0x2000016c
 800692c:	200001cc 	.word	0x200001cc
 8006930:	20000164 	.word	0x20000164
 8006934:	20004c24 	.word	0x20004c24
 8006938:	45e7b273 	.word	0x45e7b273
 800693c:	200001d4 	.word	0x200001d4
 8006940:	20000838 	.word	0x20000838

08006944 <DiagService_CC_CommunicationControl>:
void DiagService_CC_CommunicationControl(void)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	af00      	add	r7, sp, #0
	Dcm_TxHeader.DLC = CanH_DiagRxHeader.DLC;
 8006948:	4b16      	ldr	r3, [pc, #88]	@ (80069a4 <DiagService_CC_CommunicationControl+0x60>)
 800694a:	691b      	ldr	r3, [r3, #16]
 800694c:	4a16      	ldr	r2, [pc, #88]	@ (80069a8 <DiagService_CC_CommunicationControl+0x64>)
 800694e:	6113      	str	r3, [r2, #16]
	Dcm_TxHeader.StdId = CanH_DiagRxHeader.StdId + 1;
 8006950:	4b14      	ldr	r3, [pc, #80]	@ (80069a4 <DiagService_CC_CommunicationControl+0x60>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	3301      	adds	r3, #1
 8006956:	4a14      	ldr	r2, [pc, #80]	@ (80069a8 <DiagService_CC_CommunicationControl+0x64>)
 8006958:	6013      	str	r3, [r2, #0]
	Dcm_TxData[0] = 0x02;
 800695a:	4b14      	ldr	r3, [pc, #80]	@ (80069ac <DiagService_CC_CommunicationControl+0x68>)
 800695c:	2202      	movs	r2, #2
 800695e:	701a      	strb	r2, [r3, #0]
	Dcm_TxData[1] = CanH_DiagArray[1] + 0x40;
 8006960:	4b13      	ldr	r3, [pc, #76]	@ (80069b0 <DiagService_CC_CommunicationControl+0x6c>)
 8006962:	785b      	ldrb	r3, [r3, #1]
 8006964:	3340      	adds	r3, #64	@ 0x40
 8006966:	b2da      	uxtb	r2, r3
 8006968:	4b10      	ldr	r3, [pc, #64]	@ (80069ac <DiagService_CC_CommunicationControl+0x68>)
 800696a:	705a      	strb	r2, [r3, #1]
	Dcm_TxData[2] = CanH_DiagArray[2];
 800696c:	4b10      	ldr	r3, [pc, #64]	@ (80069b0 <DiagService_CC_CommunicationControl+0x6c>)
 800696e:	789a      	ldrb	r2, [r3, #2]
 8006970:	4b0e      	ldr	r3, [pc, #56]	@ (80069ac <DiagService_CC_CommunicationControl+0x68>)
 8006972:	709a      	strb	r2, [r3, #2]
	if(CanH_DiagArray[2] == 0) CanH_CommunicationState = FULL_COMMUNICATION;
 8006974:	4b0e      	ldr	r3, [pc, #56]	@ (80069b0 <DiagService_CC_CommunicationControl+0x6c>)
 8006976:	789b      	ldrb	r3, [r3, #2]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d103      	bne.n	8006984 <DiagService_CC_CommunicationControl+0x40>
 800697c:	4b0d      	ldr	r3, [pc, #52]	@ (80069b4 <DiagService_CC_CommunicationControl+0x70>)
 800697e:	2202      	movs	r2, #2
 8006980:	701a      	strb	r2, [r3, #0]
 8006982:	e006      	b.n	8006992 <DiagService_CC_CommunicationControl+0x4e>
	else if(CanH_DiagArray[2] == 1) CanH_CommunicationState = CC_ACTIVE;
 8006984:	4b0a      	ldr	r3, [pc, #40]	@ (80069b0 <DiagService_CC_CommunicationControl+0x6c>)
 8006986:	789b      	ldrb	r3, [r3, #2]
 8006988:	2b01      	cmp	r3, #1
 800698a:	d102      	bne.n	8006992 <DiagService_CC_CommunicationControl+0x4e>
 800698c:	4b09      	ldr	r3, [pc, #36]	@ (80069b4 <DiagService_CC_CommunicationControl+0x70>)
 800698e:	2204      	movs	r2, #4
 8006990:	701a      	strb	r2, [r3, #0]
	else
	{
		/* Do nothing. */
	}
	HAL_CAN_AddTxMessage(&hcan, &Dcm_TxHeader, Dcm_TxData, &Dcm_TxMailbox);
 8006992:	4b09      	ldr	r3, [pc, #36]	@ (80069b8 <DiagService_CC_CommunicationControl+0x74>)
 8006994:	4a05      	ldr	r2, [pc, #20]	@ (80069ac <DiagService_CC_CommunicationControl+0x68>)
 8006996:	4904      	ldr	r1, [pc, #16]	@ (80069a8 <DiagService_CC_CommunicationControl+0x64>)
 8006998:	4808      	ldr	r0, [pc, #32]	@ (80069bc <DiagService_CC_CommunicationControl+0x78>)
 800699a:	f002 fc59 	bl	8009250 <HAL_CAN_AddTxMessage>
}
 800699e:	bf00      	nop
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	2000016c 	.word	0x2000016c
 80069a8:	200001b4 	.word	0x200001b4
 80069ac:	200001cc 	.word	0x200001cc
 80069b0:	20000164 	.word	0x20000164
 80069b4:	20000158 	.word	0x20000158
 80069b8:	200001d4 	.word	0x200001d4
 80069bc:	20000838 	.word	0x20000838

080069c0 <DiagService_CDTCS_ControlDTCSetting>:
void DiagService_CDTCS_ControlDTCSetting(void)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	af00      	add	r7, sp, #0
	Dcm_TxHeader.DLC = CanH_DiagRxHeader.DLC;
 80069c4:	4b16      	ldr	r3, [pc, #88]	@ (8006a20 <DiagService_CDTCS_ControlDTCSetting+0x60>)
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	4a16      	ldr	r2, [pc, #88]	@ (8006a24 <DiagService_CDTCS_ControlDTCSetting+0x64>)
 80069ca:	6113      	str	r3, [r2, #16]
	Dcm_TxHeader.StdId = CanH_DiagRxHeader.StdId + 1;
 80069cc:	4b14      	ldr	r3, [pc, #80]	@ (8006a20 <DiagService_CDTCS_ControlDTCSetting+0x60>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	3301      	adds	r3, #1
 80069d2:	4a14      	ldr	r2, [pc, #80]	@ (8006a24 <DiagService_CDTCS_ControlDTCSetting+0x64>)
 80069d4:	6013      	str	r3, [r2, #0]
	Dcm_TxData[0] = CanH_DiagArray[0];
 80069d6:	4b14      	ldr	r3, [pc, #80]	@ (8006a28 <DiagService_CDTCS_ControlDTCSetting+0x68>)
 80069d8:	781a      	ldrb	r2, [r3, #0]
 80069da:	4b14      	ldr	r3, [pc, #80]	@ (8006a2c <DiagService_CDTCS_ControlDTCSetting+0x6c>)
 80069dc:	701a      	strb	r2, [r3, #0]
	Dcm_TxData[1] = CanH_DiagArray[1] + 0x40;
 80069de:	4b12      	ldr	r3, [pc, #72]	@ (8006a28 <DiagService_CDTCS_ControlDTCSetting+0x68>)
 80069e0:	785b      	ldrb	r3, [r3, #1]
 80069e2:	3340      	adds	r3, #64	@ 0x40
 80069e4:	b2da      	uxtb	r2, r3
 80069e6:	4b11      	ldr	r3, [pc, #68]	@ (8006a2c <DiagService_CDTCS_ControlDTCSetting+0x6c>)
 80069e8:	705a      	strb	r2, [r3, #1]
	Dcm_TxData[2] = CanH_DiagArray[2];
 80069ea:	4b0f      	ldr	r3, [pc, #60]	@ (8006a28 <DiagService_CDTCS_ControlDTCSetting+0x68>)
 80069ec:	789a      	ldrb	r2, [r3, #2]
 80069ee:	4b0f      	ldr	r3, [pc, #60]	@ (8006a2c <DiagService_CDTCS_ControlDTCSetting+0x6c>)
 80069f0:	709a      	strb	r2, [r3, #2]
	if(CanH_DiagArray[2] == 1) Dem_DTCSettingDeactivated = 0;
 80069f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006a28 <DiagService_CDTCS_ControlDTCSetting+0x68>)
 80069f4:	789b      	ldrb	r3, [r3, #2]
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d103      	bne.n	8006a02 <DiagService_CDTCS_ControlDTCSetting+0x42>
 80069fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006a30 <DiagService_CDTCS_ControlDTCSetting+0x70>)
 80069fc:	2200      	movs	r2, #0
 80069fe:	701a      	strb	r2, [r3, #0]
 8006a00:	e006      	b.n	8006a10 <DiagService_CDTCS_ControlDTCSetting+0x50>
	else if(CanH_DiagArray[2] == 2) Dem_DTCSettingDeactivated = 1;
 8006a02:	4b09      	ldr	r3, [pc, #36]	@ (8006a28 <DiagService_CDTCS_ControlDTCSetting+0x68>)
 8006a04:	789b      	ldrb	r3, [r3, #2]
 8006a06:	2b02      	cmp	r3, #2
 8006a08:	d102      	bne.n	8006a10 <DiagService_CDTCS_ControlDTCSetting+0x50>
 8006a0a:	4b09      	ldr	r3, [pc, #36]	@ (8006a30 <DiagService_CDTCS_ControlDTCSetting+0x70>)
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	701a      	strb	r2, [r3, #0]
	else
	{
		/* Do nothing. */
	}
	HAL_CAN_AddTxMessage(&hcan, &Dcm_TxHeader, Dcm_TxData, &Dcm_TxMailbox);
 8006a10:	4b08      	ldr	r3, [pc, #32]	@ (8006a34 <DiagService_CDTCS_ControlDTCSetting+0x74>)
 8006a12:	4a06      	ldr	r2, [pc, #24]	@ (8006a2c <DiagService_CDTCS_ControlDTCSetting+0x6c>)
 8006a14:	4903      	ldr	r1, [pc, #12]	@ (8006a24 <DiagService_CDTCS_ControlDTCSetting+0x64>)
 8006a16:	4808      	ldr	r0, [pc, #32]	@ (8006a38 <DiagService_CDTCS_ControlDTCSetting+0x78>)
 8006a18:	f002 fc1a 	bl	8009250 <HAL_CAN_AddTxMessage>
}
 8006a1c:	bf00      	nop
 8006a1e:	bd80      	pop	{r7, pc}
 8006a20:	2000016c 	.word	0x2000016c
 8006a24:	200001b4 	.word	0x200001b4
 8006a28:	20000164 	.word	0x20000164
 8006a2c:	200001cc 	.word	0x200001cc
 8006a30:	20000474 	.word	0x20000474
 8006a34:	200001d4 	.word	0x200001d4
 8006a38:	20000838 	.word	0x20000838

08006a3c <Dem_ClearDtc>:

void Dem_SetDtc(uint8 IDPrimary, uint32 Reason, uint8 Status);
void Dem_ClearDtc(void);

void Dem_ClearDtc(void)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	af00      	add	r7, sp, #0
	memset(Dem_DTCArray, 0, sizeof(Dem_DTCArray));
 8006a40:	f44f 7222 	mov.w	r2, #648	@ 0x288
 8006a44:	2100      	movs	r1, #0
 8006a46:	4802      	ldr	r0, [pc, #8]	@ (8006a50 <Dem_ClearDtc+0x14>)
 8006a48:	f008 fc7a 	bl	800f340 <memset>
}
 8006a4c:	bf00      	nop
 8006a4e:	bd80      	pop	{r7, pc}
 8006a50:	200001ec 	.word	0x200001ec

08006a54 <Dem_SetDtc>:
void Dem_SetDtc(uint8 IDPrimary, uint32 Reason, uint8 Status)
{
 8006a54:	b590      	push	{r4, r7, lr}
 8006a56:	b085      	sub	sp, #20
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	6039      	str	r1, [r7, #0]
 8006a5e:	71fb      	strb	r3, [r7, #7]
 8006a60:	4613      	mov	r3, r2
 8006a62:	71bb      	strb	r3, [r7, #6]
	uint8 i = 0;
 8006a64:	2300      	movs	r3, #0
 8006a66:	73fb      	strb	r3, [r7, #15]
	if(0 == Dem_DTCSettingDeactivated)
 8006a68:	4b5c      	ldr	r3, [pc, #368]	@ (8006bdc <Dem_SetDtc+0x188>)
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	f040 80b1 	bne.w	8006bd4 <Dem_SetDtc+0x180>
	{
		if(1 == Status)
 8006a72:	79bb      	ldrb	r3, [r7, #6]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	f040 80a3 	bne.w	8006bc0 <Dem_SetDtc+0x16c>
		{
			Dem_TxHeader.DLC = 1;
 8006a7a:	4b59      	ldr	r3, [pc, #356]	@ (8006be0 <Dem_SetDtc+0x18c>)
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	611a      	str	r2, [r3, #16]
			Dem_TxHeader.StdId = 0x10D;
 8006a80:	4b57      	ldr	r3, [pc, #348]	@ (8006be0 <Dem_SetDtc+0x18c>)
 8006a82:	f240 120d 	movw	r2, #269	@ 0x10d
 8006a86:	601a      	str	r2, [r3, #0]
			Dem_TxData[0] = IDPrimary;
 8006a88:	4a56      	ldr	r2, [pc, #344]	@ (8006be4 <Dem_SetDtc+0x190>)
 8006a8a:	79fb      	ldrb	r3, [r7, #7]
 8006a8c:	7013      	strb	r3, [r2, #0]

			HAL_CAN_AddTxMessage(&hcan, &Dem_TxHeader, Dem_TxData, &Dem_TxMailbox);
 8006a8e:	4b56      	ldr	r3, [pc, #344]	@ (8006be8 <Dem_SetDtc+0x194>)
 8006a90:	4a54      	ldr	r2, [pc, #336]	@ (8006be4 <Dem_SetDtc+0x190>)
 8006a92:	4953      	ldr	r1, [pc, #332]	@ (8006be0 <Dem_SetDtc+0x18c>)
 8006a94:	4855      	ldr	r0, [pc, #340]	@ (8006bec <Dem_SetDtc+0x198>)
 8006a96:	f002 fbdb 	bl	8009250 <HAL_CAN_AddTxMessage>

			for(i = 0; i < 3; i++)
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	73fb      	strb	r3, [r7, #15]
 8006a9e:	e00f      	b.n	8006ac0 <Dem_SetDtc+0x6c>
			{
				if(0 != Dem_DTCArray[IDPrimary].GearFF[i]) break;
 8006aa0:	79fa      	ldrb	r2, [r7, #7]
 8006aa2:	7bf9      	ldrb	r1, [r7, #15]
 8006aa4:	4852      	ldr	r0, [pc, #328]	@ (8006bf0 <Dem_SetDtc+0x19c>)
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	00db      	lsls	r3, r3, #3
 8006aaa:	4413      	add	r3, r2
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	4403      	add	r3, r0
 8006ab0:	440b      	add	r3, r1
 8006ab2:	3314      	adds	r3, #20
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d106      	bne.n	8006ac8 <Dem_SetDtc+0x74>
			for(i = 0; i < 3; i++)
 8006aba:	7bfb      	ldrb	r3, [r7, #15]
 8006abc:	3301      	adds	r3, #1
 8006abe:	73fb      	strb	r3, [r7, #15]
 8006ac0:	7bfb      	ldrb	r3, [r7, #15]
 8006ac2:	2b02      	cmp	r3, #2
 8006ac4:	d9ec      	bls.n	8006aa0 <Dem_SetDtc+0x4c>
 8006ac6:	e000      	b.n	8006aca <Dem_SetDtc+0x76>
				if(0 != Dem_DTCArray[IDPrimary].GearFF[i]) break;
 8006ac8:	bf00      	nop
				{
					/* Do nothing. */
				}
			}

			Dem_DTCArray[IDPrimary].counter++;
 8006aca:	79fa      	ldrb	r2, [r7, #7]
 8006acc:	4948      	ldr	r1, [pc, #288]	@ (8006bf0 <Dem_SetDtc+0x19c>)
 8006ace:	4613      	mov	r3, r2
 8006ad0:	00db      	lsls	r3, r3, #3
 8006ad2:	4413      	add	r3, r2
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	440b      	add	r3, r1
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	1c59      	adds	r1, r3, #1
 8006adc:	4844      	ldr	r0, [pc, #272]	@ (8006bf0 <Dem_SetDtc+0x19c>)
 8006ade:	4613      	mov	r3, r2
 8006ae0:	00db      	lsls	r3, r3, #3
 8006ae2:	4413      	add	r3, r2
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	4403      	add	r3, r0
 8006ae8:	6019      	str	r1, [r3, #0]
			Dem_DTCArray[IDPrimary].isActiveNow = 1;
 8006aea:	79fa      	ldrb	r2, [r7, #7]
 8006aec:	4940      	ldr	r1, [pc, #256]	@ (8006bf0 <Dem_SetDtc+0x19c>)
 8006aee:	4613      	mov	r3, r2
 8006af0:	00db      	lsls	r3, r3, #3
 8006af2:	4413      	add	r3, r2
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	440b      	add	r3, r1
 8006af8:	3304      	adds	r3, #4
 8006afa:	2201      	movs	r2, #1
 8006afc:	701a      	strb	r2, [r3, #0]
			Dem_DTCArray[IDPrimary].GearFF[i] = CanH_RxSig_Gear;
 8006afe:	79fa      	ldrb	r2, [r7, #7]
 8006b00:	7bf9      	ldrb	r1, [r7, #15]
 8006b02:	4b3c      	ldr	r3, [pc, #240]	@ (8006bf4 <Dem_SetDtc+0x1a0>)
 8006b04:	781c      	ldrb	r4, [r3, #0]
 8006b06:	483a      	ldr	r0, [pc, #232]	@ (8006bf0 <Dem_SetDtc+0x19c>)
 8006b08:	4613      	mov	r3, r2
 8006b0a:	00db      	lsls	r3, r3, #3
 8006b0c:	4413      	add	r3, r2
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	4403      	add	r3, r0
 8006b12:	440b      	add	r3, r1
 8006b14:	3314      	adds	r3, #20
 8006b16:	4622      	mov	r2, r4
 8006b18:	701a      	strb	r2, [r3, #0]
			Dem_DTCArray[IDPrimary].IgnFF[i] = CanH_RxSig_Ignition;
 8006b1a:	79fa      	ldrb	r2, [r7, #7]
 8006b1c:	7bf9      	ldrb	r1, [r7, #15]
 8006b1e:	4b36      	ldr	r3, [pc, #216]	@ (8006bf8 <Dem_SetDtc+0x1a4>)
 8006b20:	781c      	ldrb	r4, [r3, #0]
 8006b22:	4833      	ldr	r0, [pc, #204]	@ (8006bf0 <Dem_SetDtc+0x19c>)
 8006b24:	4613      	mov	r3, r2
 8006b26:	00db      	lsls	r3, r3, #3
 8006b28:	4413      	add	r3, r2
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	4403      	add	r3, r0
 8006b2e:	440b      	add	r3, r1
 8006b30:	3311      	adds	r3, #17
 8006b32:	4622      	mov	r2, r4
 8006b34:	701a      	strb	r2, [r3, #0]
			Dem_DTCArray[IDPrimary].RpmFF[i] = CanH_RxSig_Rpm;
 8006b36:	79fa      	ldrb	r2, [r7, #7]
 8006b38:	7bf9      	ldrb	r1, [r7, #15]
 8006b3a:	4b30      	ldr	r3, [pc, #192]	@ (8006bfc <Dem_SetDtc+0x1a8>)
 8006b3c:	781c      	ldrb	r4, [r3, #0]
 8006b3e:	482c      	ldr	r0, [pc, #176]	@ (8006bf0 <Dem_SetDtc+0x19c>)
 8006b40:	4613      	mov	r3, r2
 8006b42:	00db      	lsls	r3, r3, #3
 8006b44:	4413      	add	r3, r2
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	4403      	add	r3, r0
 8006b4a:	440b      	add	r3, r1
 8006b4c:	330b      	adds	r3, #11
 8006b4e:	4622      	mov	r2, r4
 8006b50:	701a      	strb	r2, [r3, #0]
			Dem_DTCArray[IDPrimary].ReasonFF[i] = Reason;
 8006b52:	79fa      	ldrb	r2, [r7, #7]
 8006b54:	7bf9      	ldrb	r1, [r7, #15]
 8006b56:	4826      	ldr	r0, [pc, #152]	@ (8006bf0 <Dem_SetDtc+0x19c>)
 8006b58:	4613      	mov	r3, r2
 8006b5a:	00db      	lsls	r3, r3, #3
 8006b5c:	4413      	add	r3, r2
 8006b5e:	440b      	add	r3, r1
 8006b60:	3306      	adds	r3, #6
 8006b62:	683a      	ldr	r2, [r7, #0]
 8006b64:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Dem_DTCArray[IDPrimary].SpeedFF[i] = CanH_RxSig_Speed;
 8006b68:	79fa      	ldrb	r2, [r7, #7]
 8006b6a:	7bf9      	ldrb	r1, [r7, #15]
 8006b6c:	4b24      	ldr	r3, [pc, #144]	@ (8006c00 <Dem_SetDtc+0x1ac>)
 8006b6e:	781c      	ldrb	r4, [r3, #0]
 8006b70:	481f      	ldr	r0, [pc, #124]	@ (8006bf0 <Dem_SetDtc+0x19c>)
 8006b72:	4613      	mov	r3, r2
 8006b74:	00db      	lsls	r3, r3, #3
 8006b76:	4413      	add	r3, r2
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	4403      	add	r3, r0
 8006b7c:	440b      	add	r3, r1
 8006b7e:	3308      	adds	r3, #8
 8006b80:	4622      	mov	r2, r4
 8006b82:	701a      	strb	r2, [r3, #0]
			Dem_DTCArray[IDPrimary].TimeFF[i] = Dcm_AliveCounter;
 8006b84:	4b1f      	ldr	r3, [pc, #124]	@ (8006c04 <Dem_SetDtc+0x1b0>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	79fa      	ldrb	r2, [r7, #7]
 8006b8a:	7bf9      	ldrb	r1, [r7, #15]
 8006b8c:	b2dc      	uxtb	r4, r3
 8006b8e:	4818      	ldr	r0, [pc, #96]	@ (8006bf0 <Dem_SetDtc+0x19c>)
 8006b90:	4613      	mov	r3, r2
 8006b92:	00db      	lsls	r3, r3, #3
 8006b94:	4413      	add	r3, r2
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	4403      	add	r3, r0
 8006b9a:	440b      	add	r3, r1
 8006b9c:	330e      	adds	r3, #14
 8006b9e:	4622      	mov	r2, r4
 8006ba0:	701a      	strb	r2, [r3, #0]
			Dem_DTCArray[IDPrimary].VoltageFF[i] = CanH_TxSig_SupplyVoltage;
 8006ba2:	79fa      	ldrb	r2, [r7, #7]
 8006ba4:	7bf9      	ldrb	r1, [r7, #15]
 8006ba6:	4b18      	ldr	r3, [pc, #96]	@ (8006c08 <Dem_SetDtc+0x1b4>)
 8006ba8:	781c      	ldrb	r4, [r3, #0]
 8006baa:	4811      	ldr	r0, [pc, #68]	@ (8006bf0 <Dem_SetDtc+0x19c>)
 8006bac:	4613      	mov	r3, r2
 8006bae:	00db      	lsls	r3, r3, #3
 8006bb0:	4413      	add	r3, r2
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	4403      	add	r3, r0
 8006bb6:	440b      	add	r3, r1
 8006bb8:	3305      	adds	r3, #5
 8006bba:	4622      	mov	r2, r4
 8006bbc:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* Do nothing. */
	}
}
 8006bbe:	e009      	b.n	8006bd4 <Dem_SetDtc+0x180>
		else Dem_DTCArray[IDPrimary].isActiveNow = 0;
 8006bc0:	79fa      	ldrb	r2, [r7, #7]
 8006bc2:	490b      	ldr	r1, [pc, #44]	@ (8006bf0 <Dem_SetDtc+0x19c>)
 8006bc4:	4613      	mov	r3, r2
 8006bc6:	00db      	lsls	r3, r3, #3
 8006bc8:	4413      	add	r3, r2
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	440b      	add	r3, r1
 8006bce:	3304      	adds	r3, #4
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	701a      	strb	r2, [r3, #0]
}
 8006bd4:	bf00      	nop
 8006bd6:	3714      	adds	r7, #20
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd90      	pop	{r4, r7, pc}
 8006bdc:	20000474 	.word	0x20000474
 8006be0:	20000478 	.word	0x20000478
 8006be4:	20000490 	.word	0x20000490
 8006be8:	20000498 	.word	0x20000498
 8006bec:	20000838 	.word	0x20000838
 8006bf0:	200001ec 	.word	0x200001ec
 8006bf4:	200000da 	.word	0x200000da
 8006bf8:	200000db 	.word	0x200000db
 8006bfc:	200000dc 	.word	0x200000dc
 8006c00:	200000dd 	.word	0x200000dd
 8006c04:	20004c24 	.word	0x20004c24
 8006c08:	200000c4 	.word	0x200000c4

08006c0c <HAL_ADC_ConvCpltCallback>:

void Ain_MainFunction(void);
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc);

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
	aux1 = Ain_Buffer[0];
 8006c14:	4b37      	ldr	r3, [pc, #220]	@ (8006cf4 <HAL_ADC_ConvCpltCallback+0xe8>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a37      	ldr	r2, [pc, #220]	@ (8006cf8 <HAL_ADC_ConvCpltCallback+0xec>)
 8006c1a:	6013      	str	r3, [r2, #0]
	aux2 = Ain_Buffer[1];
 8006c1c:	4b35      	ldr	r3, [pc, #212]	@ (8006cf4 <HAL_ADC_ConvCpltCallback+0xe8>)
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	4a36      	ldr	r2, [pc, #216]	@ (8006cfc <HAL_ADC_ConvCpltCallback+0xf0>)
 8006c22:	6013      	str	r3, [r2, #0]
	aux3 = Ain_Buffer[3];
 8006c24:	4b33      	ldr	r3, [pc, #204]	@ (8006cf4 <HAL_ADC_ConvCpltCallback+0xe8>)
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	4a35      	ldr	r2, [pc, #212]	@ (8006d00 <HAL_ADC_ConvCpltCallback+0xf4>)
 8006c2a:	6013      	str	r3, [r2, #0]
	counter++;
 8006c2c:	4b35      	ldr	r3, [pc, #212]	@ (8006d04 <HAL_ADC_ConvCpltCallback+0xf8>)
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	3301      	adds	r3, #1
 8006c32:	b2da      	uxtb	r2, r3
 8006c34:	4b33      	ldr	r3, [pc, #204]	@ (8006d04 <HAL_ADC_ConvCpltCallback+0xf8>)
 8006c36:	701a      	strb	r2, [r3, #0]
	sum1 += aux1;
 8006c38:	4b33      	ldr	r3, [pc, #204]	@ (8006d08 <HAL_ADC_ConvCpltCallback+0xfc>)
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	4b2e      	ldr	r3, [pc, #184]	@ (8006cf8 <HAL_ADC_ConvCpltCallback+0xec>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4413      	add	r3, r2
 8006c42:	4a31      	ldr	r2, [pc, #196]	@ (8006d08 <HAL_ADC_ConvCpltCallback+0xfc>)
 8006c44:	6013      	str	r3, [r2, #0]
	sum2 += aux2;
 8006c46:	4b31      	ldr	r3, [pc, #196]	@ (8006d0c <HAL_ADC_ConvCpltCallback+0x100>)
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	4b2c      	ldr	r3, [pc, #176]	@ (8006cfc <HAL_ADC_ConvCpltCallback+0xf0>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4413      	add	r3, r2
 8006c50:	4a2e      	ldr	r2, [pc, #184]	@ (8006d0c <HAL_ADC_ConvCpltCallback+0x100>)
 8006c52:	6013      	str	r3, [r2, #0]
	sum3 += aux3;
 8006c54:	4b2e      	ldr	r3, [pc, #184]	@ (8006d10 <HAL_ADC_ConvCpltCallback+0x104>)
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	4b29      	ldr	r3, [pc, #164]	@ (8006d00 <HAL_ADC_ConvCpltCallback+0xf4>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	4a2c      	ldr	r2, [pc, #176]	@ (8006d10 <HAL_ADC_ConvCpltCallback+0x104>)
 8006c60:	6013      	str	r3, [r2, #0]

	if(counter % 100 == 0 && counter != 0)
 8006c62:	4b28      	ldr	r3, [pc, #160]	@ (8006d04 <HAL_ADC_ConvCpltCallback+0xf8>)
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	4a2b      	ldr	r2, [pc, #172]	@ (8006d14 <HAL_ADC_ConvCpltCallback+0x108>)
 8006c68:	fba2 1203 	umull	r1, r2, r2, r3
 8006c6c:	0952      	lsrs	r2, r2, #5
 8006c6e:	2164      	movs	r1, #100	@ 0x64
 8006c70:	fb01 f202 	mul.w	r2, r1, r2
 8006c74:	1a9b      	subs	r3, r3, r2
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d136      	bne.n	8006cea <HAL_ADC_ConvCpltCallback+0xde>
 8006c7c:	4b21      	ldr	r3, [pc, #132]	@ (8006d04 <HAL_ADC_ConvCpltCallback+0xf8>)
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d032      	beq.n	8006cea <HAL_ADC_ConvCpltCallback+0xde>
	{
		counter = 0;
 8006c84:	4b1f      	ldr	r3, [pc, #124]	@ (8006d04 <HAL_ADC_ConvCpltCallback+0xf8>)
 8006c86:	2200      	movs	r2, #0
 8006c88:	701a      	strb	r2, [r3, #0]
		sum1 /= 100;
 8006c8a:	4b1f      	ldr	r3, [pc, #124]	@ (8006d08 <HAL_ADC_ConvCpltCallback+0xfc>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a21      	ldr	r2, [pc, #132]	@ (8006d14 <HAL_ADC_ConvCpltCallback+0x108>)
 8006c90:	fba2 2303 	umull	r2, r3, r2, r3
 8006c94:	095b      	lsrs	r3, r3, #5
 8006c96:	4a1c      	ldr	r2, [pc, #112]	@ (8006d08 <HAL_ADC_ConvCpltCallback+0xfc>)
 8006c98:	6013      	str	r3, [r2, #0]
		sum2 /= 100;
 8006c9a:	4b1c      	ldr	r3, [pc, #112]	@ (8006d0c <HAL_ADC_ConvCpltCallback+0x100>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a1d      	ldr	r2, [pc, #116]	@ (8006d14 <HAL_ADC_ConvCpltCallback+0x108>)
 8006ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ca4:	095b      	lsrs	r3, r3, #5
 8006ca6:	4a19      	ldr	r2, [pc, #100]	@ (8006d0c <HAL_ADC_ConvCpltCallback+0x100>)
 8006ca8:	6013      	str	r3, [r2, #0]
		sum3 /= 100;
 8006caa:	4b19      	ldr	r3, [pc, #100]	@ (8006d10 <HAL_ADC_ConvCpltCallback+0x104>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a19      	ldr	r2, [pc, #100]	@ (8006d14 <HAL_ADC_ConvCpltCallback+0x108>)
 8006cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8006cb4:	095b      	lsrs	r3, r3, #5
 8006cb6:	4a16      	ldr	r2, [pc, #88]	@ (8006d10 <HAL_ADC_ConvCpltCallback+0x104>)
 8006cb8:	6013      	str	r3, [r2, #0]
		LoadCtrl_AnalogCurrentValue = sum1;
 8006cba:	4b13      	ldr	r3, [pc, #76]	@ (8006d08 <HAL_ADC_ConvCpltCallback+0xfc>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	b29a      	uxth	r2, r3
 8006cc0:	4b15      	ldr	r3, [pc, #84]	@ (8006d18 <HAL_ADC_ConvCpltCallback+0x10c>)
 8006cc2:	801a      	strh	r2, [r3, #0]
		LoadCtrl_AnalogVoltValue = sum2;
 8006cc4:	4b11      	ldr	r3, [pc, #68]	@ (8006d0c <HAL_ADC_ConvCpltCallback+0x100>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	b29a      	uxth	r2, r3
 8006cca:	4b14      	ldr	r3, [pc, #80]	@ (8006d1c <HAL_ADC_ConvCpltCallback+0x110>)
 8006ccc:	801a      	strh	r2, [r3, #0]
		LoadCtrl_VrefInt = sum3;
 8006cce:	4b10      	ldr	r3, [pc, #64]	@ (8006d10 <HAL_ADC_ConvCpltCallback+0x104>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	b29a      	uxth	r2, r3
 8006cd4:	4b12      	ldr	r3, [pc, #72]	@ (8006d20 <HAL_ADC_ConvCpltCallback+0x114>)
 8006cd6:	801a      	strh	r2, [r3, #0]
		sum1 = 0;
 8006cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8006d08 <HAL_ADC_ConvCpltCallback+0xfc>)
 8006cda:	2200      	movs	r2, #0
 8006cdc:	601a      	str	r2, [r3, #0]
		sum2 = 0;
 8006cde:	4b0b      	ldr	r3, [pc, #44]	@ (8006d0c <HAL_ADC_ConvCpltCallback+0x100>)
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	601a      	str	r2, [r3, #0]
		sum3 = 0;
 8006ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8006d10 <HAL_ADC_ConvCpltCallback+0x104>)
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		/* Do nothing. */
	}
}
 8006cea:	bf00      	nop
 8006cec:	370c      	adds	r7, #12
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bc80      	pop	{r7}
 8006cf2:	4770      	bx	lr
 8006cf4:	200004a0 	.word	0x200004a0
 8006cf8:	200004b0 	.word	0x200004b0
 8006cfc:	200004b4 	.word	0x200004b4
 8006d00:	200004b8 	.word	0x200004b8
 8006d04:	200004c8 	.word	0x200004c8
 8006d08:	200004bc 	.word	0x200004bc
 8006d0c:	200004c0 	.word	0x200004c0
 8006d10:	200004c4 	.word	0x200004c4
 8006d14:	51eb851f 	.word	0x51eb851f
 8006d18:	200000a8 	.word	0x200000a8
 8006d1c:	200000a6 	.word	0x200000a6
 8006d20:	200000aa 	.word	0x200000aa

08006d24 <Ain_MainFunction>:
void Ain_MainFunction(void)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	af00      	add	r7, sp, #0
	if(0 == Ain_MainCounter) HAL_ADCEx_Calibration_Start(&hadc1);
 8006d28:	4b0b      	ldr	r3, [pc, #44]	@ (8006d58 <Ain_MainFunction+0x34>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d103      	bne.n	8006d38 <Ain_MainFunction+0x14>
 8006d30:	480a      	ldr	r0, [pc, #40]	@ (8006d5c <Ain_MainFunction+0x38>)
 8006d32:	f001 ff3f 	bl	8008bb4 <HAL_ADCEx_Calibration_Start>
 8006d36:	e008      	b.n	8006d4a <Ain_MainFunction+0x26>
	else if(1 == Ain_MainCounter) HAL_ADC_Start_DMA(&hadc1, Ain_Buffer, 4);
 8006d38:	4b07      	ldr	r3, [pc, #28]	@ (8006d58 <Ain_MainFunction+0x34>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d104      	bne.n	8006d4a <Ain_MainFunction+0x26>
 8006d40:	2204      	movs	r2, #4
 8006d42:	4907      	ldr	r1, [pc, #28]	@ (8006d60 <Ain_MainFunction+0x3c>)
 8006d44:	4805      	ldr	r0, [pc, #20]	@ (8006d5c <Ain_MainFunction+0x38>)
 8006d46:	f001 fb7d 	bl	8008444 <HAL_ADC_Start_DMA>
	else
	{
		/* Do nothing. */
	}
	Ain_MainCounter++;
 8006d4a:	4b03      	ldr	r3, [pc, #12]	@ (8006d58 <Ain_MainFunction+0x34>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	3301      	adds	r3, #1
 8006d50:	4a01      	ldr	r2, [pc, #4]	@ (8006d58 <Ain_MainFunction+0x34>)
 8006d52:	6013      	str	r3, [r2, #0]
}
 8006d54:	bf00      	nop
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	2000049c 	.word	0x2000049c
 8006d5c:	200007a8 	.word	0x200007a8
 8006d60:	200004a0 	.word	0x200004a0

08006d64 <NvM_ReadAll>:
extern void Nvm_FlashReadData(uint32 StartPageAddress, uint32 *RxBuf, uint16 numberofwords);
extern uint32 Nvm_FlashWriteData(uint32 StartPageAddress, uint32 *Data, uint16 numberofwords);
/* FUNCTIONS END */
/* FUNCTIONS START */
static void NvM_ReadAll(void)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
	NvM_ReadAll_Flag = 1;
 8006d6a:	4b49      	ldr	r3, [pc, #292]	@ (8006e90 <NvM_ReadAll+0x12c>)
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	701a      	strb	r2, [r3, #0]
	Nvm_FlashReadData(NVM_CALIBRATION_START_ADDRESS, NvM_Block_Calibration, 12);
 8006d70:	220c      	movs	r2, #12
 8006d72:	4948      	ldr	r1, [pc, #288]	@ (8006e94 <NvM_ReadAll+0x130>)
 8006d74:	4848      	ldr	r0, [pc, #288]	@ (8006e98 <NvM_ReadAll+0x134>)
 8006d76:	f000 f9f9 	bl	800716c <Nvm_FlashReadData>
	Nvm_FlashReadData(NVM_DTC_START_ADDRESS, (uint32*)NvmBlock_Dem_DTCArray, (DEM_NUMBER_OF_DTCS * sizeof(Dem_DTC_t)) / 4);
 8006d7a:	22a2      	movs	r2, #162	@ 0xa2
 8006d7c:	4947      	ldr	r1, [pc, #284]	@ (8006e9c <NvM_ReadAll+0x138>)
 8006d7e:	4848      	ldr	r0, [pc, #288]	@ (8006ea0 <NvM_ReadAll+0x13c>)
 8006d80:	f000 f9f4 	bl	800716c <Nvm_FlashReadData>
	if(0xffffffff != NvmBlock_Dem_DTCArray[0].counter)
 8006d84:	4b45      	ldr	r3, [pc, #276]	@ (8006e9c <NvM_ReadAll+0x138>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d8c:	d009      	beq.n	8006da2 <NvM_ReadAll+0x3e>
	{
		memcpy(Dem_DTCArray, NvmBlock_Dem_DTCArray, (DEM_NUMBER_OF_DTCS * sizeof(Dem_DTC_t)));
 8006d8e:	4a45      	ldr	r2, [pc, #276]	@ (8006ea4 <NvM_ReadAll+0x140>)
 8006d90:	4b42      	ldr	r3, [pc, #264]	@ (8006e9c <NvM_ReadAll+0x138>)
 8006d92:	4610      	mov	r0, r2
 8006d94:	4619      	mov	r1, r3
 8006d96:	f44f 7322 	mov.w	r3, #648	@ 0x288
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	f008 fb52 	bl	800f444 <memcpy>
 8006da0:	e00a      	b.n	8006db8 <NvM_ReadAll+0x54>
	}
	else
	{
		memset(NvmBlock_Dem_DTCArray, 0, (DEM_NUMBER_OF_DTCS * sizeof(Dem_DTC_t)));
 8006da2:	f44f 7222 	mov.w	r2, #648	@ 0x288
 8006da6:	2100      	movs	r1, #0
 8006da8:	483c      	ldr	r0, [pc, #240]	@ (8006e9c <NvM_ReadAll+0x138>)
 8006daa:	f008 fac9 	bl	800f340 <memset>
		Nvm_FlashWriteData(NVM_DTC_START_ADDRESS, (uint32*)NvmBlock_Dem_DTCArray, (DEM_NUMBER_OF_DTCS * sizeof(Dem_DTC_t)) / 4);
 8006dae:	22a2      	movs	r2, #162	@ 0xa2
 8006db0:	493a      	ldr	r1, [pc, #232]	@ (8006e9c <NvM_ReadAll+0x138>)
 8006db2:	483b      	ldr	r0, [pc, #236]	@ (8006ea0 <NvM_ReadAll+0x13c>)
 8006db4:	f000 f97e 	bl	80070b4 <Nvm_FlashWriteData>
	}
	if(0xffffffff != NvM_Block_Calibration[0])
 8006db8:	4b36      	ldr	r3, [pc, #216]	@ (8006e94 <NvM_ReadAll+0x130>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dc0:	d02a      	beq.n	8006e18 <NvM_ReadAll+0xb4>
	{
		Param_MaxVoltageValue = NvM_Block_Calibration[0];
 8006dc2:	4b34      	ldr	r3, [pc, #208]	@ (8006e94 <NvM_ReadAll+0x130>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	b2da      	uxtb	r2, r3
 8006dc8:	4b37      	ldr	r3, [pc, #220]	@ (8006ea8 <NvM_ReadAll+0x144>)
 8006dca:	701a      	strb	r2, [r3, #0]
		Param_MinVoltageValue = NvM_Block_Calibration[1];
 8006dcc:	4b31      	ldr	r3, [pc, #196]	@ (8006e94 <NvM_ReadAll+0x130>)
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	b2da      	uxtb	r2, r3
 8006dd2:	4b36      	ldr	r3, [pc, #216]	@ (8006eac <NvM_ReadAll+0x148>)
 8006dd4:	701a      	strb	r2, [r3, #0]
		Param_NominalCurrentRating = NvM_Block_Calibration[2];
 8006dd6:	4b2f      	ldr	r3, [pc, #188]	@ (8006e94 <NvM_ReadAll+0x130>)
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	b2da      	uxtb	r2, r3
 8006ddc:	4b34      	ldr	r3, [pc, #208]	@ (8006eb0 <NvM_ReadAll+0x14c>)
 8006dde:	701a      	strb	r2, [r3, #0]
		Param_MaximumCurrentRating = NvM_Block_Calibration[3];
 8006de0:	4b2c      	ldr	r3, [pc, #176]	@ (8006e94 <NvM_ReadAll+0x130>)
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	b2da      	uxtb	r2, r3
 8006de6:	4b33      	ldr	r3, [pc, #204]	@ (8006eb4 <NvM_ReadAll+0x150>)
 8006de8:	701a      	strb	r2, [r3, #0]
		Param_I2tRating = NvM_Block_Calibration[4];
 8006dea:	4b2a      	ldr	r3, [pc, #168]	@ (8006e94 <NvM_ReadAll+0x130>)
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	b2da      	uxtb	r2, r3
 8006df0:	4b31      	ldr	r3, [pc, #196]	@ (8006eb8 <NvM_ReadAll+0x154>)
 8006df2:	701a      	strb	r2, [r3, #0]
		for(uint8 i = 0; i < 5; i++) Dcm_DiagnosticCalibrationData[i] = NvM_Block_Calibration[i];
 8006df4:	2300      	movs	r3, #0
 8006df6:	71fb      	strb	r3, [r7, #7]
 8006df8:	e00a      	b.n	8006e10 <NvM_ReadAll+0xac>
 8006dfa:	79fa      	ldrb	r2, [r7, #7]
 8006dfc:	79fb      	ldrb	r3, [r7, #7]
 8006dfe:	4925      	ldr	r1, [pc, #148]	@ (8006e94 <NvM_ReadAll+0x130>)
 8006e00:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006e04:	492d      	ldr	r1, [pc, #180]	@ (8006ebc <NvM_ReadAll+0x158>)
 8006e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006e0a:	79fb      	ldrb	r3, [r7, #7]
 8006e0c:	3301      	adds	r3, #1
 8006e0e:	71fb      	strb	r3, [r7, #7]
 8006e10:	79fb      	ldrb	r3, [r7, #7]
 8006e12:	2b04      	cmp	r3, #4
 8006e14:	d9f1      	bls.n	8006dfa <NvM_ReadAll+0x96>
		Param_MinVoltageValue = NvM_Block_Calibration[1];
		Param_NominalCurrentRating = NvM_Block_Calibration[2];
		Param_MaximumCurrentRating = NvM_Block_Calibration[3];
		Param_I2tRating = NvM_Block_Calibration[4];
	}
}
 8006e16:	e036      	b.n	8006e86 <NvM_ReadAll+0x122>
		for(uint8 i = 0; i < 5; i++)
 8006e18:	2300      	movs	r3, #0
 8006e1a:	71bb      	strb	r3, [r7, #6]
 8006e1c:	e012      	b.n	8006e44 <NvM_ReadAll+0xe0>
			NvM_Block_Calibration[i] = NvM_BlockDefault_Calibration[i];
 8006e1e:	79ba      	ldrb	r2, [r7, #6]
 8006e20:	79bb      	ldrb	r3, [r7, #6]
 8006e22:	4927      	ldr	r1, [pc, #156]	@ (8006ec0 <NvM_ReadAll+0x15c>)
 8006e24:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006e28:	491a      	ldr	r1, [pc, #104]	@ (8006e94 <NvM_ReadAll+0x130>)
 8006e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Dcm_DiagnosticCalibrationData[i] = NvM_BlockDefault_Calibration[i];
 8006e2e:	79ba      	ldrb	r2, [r7, #6]
 8006e30:	79bb      	ldrb	r3, [r7, #6]
 8006e32:	4923      	ldr	r1, [pc, #140]	@ (8006ec0 <NvM_ReadAll+0x15c>)
 8006e34:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006e38:	4920      	ldr	r1, [pc, #128]	@ (8006ebc <NvM_ReadAll+0x158>)
 8006e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(uint8 i = 0; i < 5; i++)
 8006e3e:	79bb      	ldrb	r3, [r7, #6]
 8006e40:	3301      	adds	r3, #1
 8006e42:	71bb      	strb	r3, [r7, #6]
 8006e44:	79bb      	ldrb	r3, [r7, #6]
 8006e46:	2b04      	cmp	r3, #4
 8006e48:	d9e9      	bls.n	8006e1e <NvM_ReadAll+0xba>
		Nvm_FlashWriteData(NVM_CALIBRATION_START_ADDRESS, NvM_Block_Calibration, 5);
 8006e4a:	2205      	movs	r2, #5
 8006e4c:	4911      	ldr	r1, [pc, #68]	@ (8006e94 <NvM_ReadAll+0x130>)
 8006e4e:	4812      	ldr	r0, [pc, #72]	@ (8006e98 <NvM_ReadAll+0x134>)
 8006e50:	f000 f930 	bl	80070b4 <Nvm_FlashWriteData>
		Param_MaxVoltageValue = NvM_Block_Calibration[0];
 8006e54:	4b0f      	ldr	r3, [pc, #60]	@ (8006e94 <NvM_ReadAll+0x130>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	b2da      	uxtb	r2, r3
 8006e5a:	4b13      	ldr	r3, [pc, #76]	@ (8006ea8 <NvM_ReadAll+0x144>)
 8006e5c:	701a      	strb	r2, [r3, #0]
		Param_MinVoltageValue = NvM_Block_Calibration[1];
 8006e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8006e94 <NvM_ReadAll+0x130>)
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	b2da      	uxtb	r2, r3
 8006e64:	4b11      	ldr	r3, [pc, #68]	@ (8006eac <NvM_ReadAll+0x148>)
 8006e66:	701a      	strb	r2, [r3, #0]
		Param_NominalCurrentRating = NvM_Block_Calibration[2];
 8006e68:	4b0a      	ldr	r3, [pc, #40]	@ (8006e94 <NvM_ReadAll+0x130>)
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	b2da      	uxtb	r2, r3
 8006e6e:	4b10      	ldr	r3, [pc, #64]	@ (8006eb0 <NvM_ReadAll+0x14c>)
 8006e70:	701a      	strb	r2, [r3, #0]
		Param_MaximumCurrentRating = NvM_Block_Calibration[3];
 8006e72:	4b08      	ldr	r3, [pc, #32]	@ (8006e94 <NvM_ReadAll+0x130>)
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	b2da      	uxtb	r2, r3
 8006e78:	4b0e      	ldr	r3, [pc, #56]	@ (8006eb4 <NvM_ReadAll+0x150>)
 8006e7a:	701a      	strb	r2, [r3, #0]
		Param_I2tRating = NvM_Block_Calibration[4];
 8006e7c:	4b05      	ldr	r3, [pc, #20]	@ (8006e94 <NvM_ReadAll+0x130>)
 8006e7e:	691b      	ldr	r3, [r3, #16]
 8006e80:	b2da      	uxtb	r2, r3
 8006e82:	4b0d      	ldr	r3, [pc, #52]	@ (8006eb8 <NvM_ReadAll+0x154>)
 8006e84:	701a      	strb	r2, [r3, #0]
}
 8006e86:	bf00      	nop
 8006e88:	3708      	adds	r7, #8
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	200004d1 	.word	0x200004d1
 8006e94:	200004d8 	.word	0x200004d8
 8006e98:	0800f800 	.word	0x0800f800
 8006e9c:	20000508 	.word	0x20000508
 8006ea0:	0800fc00 	.word	0x0800fc00
 8006ea4:	200001ec 	.word	0x200001ec
 8006ea8:	200000c8 	.word	0x200000c8
 8006eac:	200000c9 	.word	0x200000c9
 8006eb0:	200000ca 	.word	0x200000ca
 8006eb4:	200000cb 	.word	0x200000cb
 8006eb8:	200000cc 	.word	0x200000cc
 8006ebc:	200001d8 	.word	0x200001d8
 8006ec0:	2000000c 	.word	0x2000000c

08006ec4 <NvM_WriteAll>:
void NvM_WriteAll(void)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
	for(uint8 i = 0; i < 5; i++)
 8006eca:	2300      	movs	r3, #0
 8006ecc:	71fb      	strb	r3, [r7, #7]
 8006ece:	e017      	b.n	8006f00 <NvM_WriteAll+0x3c>
	{
		if(Dcm_DiagnosticCalibrationData[i] != NvM_Block_Calibration[i])
 8006ed0:	79fb      	ldrb	r3, [r7, #7]
 8006ed2:	4a3b      	ldr	r2, [pc, #236]	@ (8006fc0 <NvM_WriteAll+0xfc>)
 8006ed4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006ed8:	79fb      	ldrb	r3, [r7, #7]
 8006eda:	493a      	ldr	r1, [pc, #232]	@ (8006fc4 <NvM_WriteAll+0x100>)
 8006edc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d00a      	beq.n	8006efa <NvM_WriteAll+0x36>
		{
			NvM_WriteFlag_Calibration = 1;
 8006ee4:	4b38      	ldr	r3, [pc, #224]	@ (8006fc8 <NvM_WriteAll+0x104>)
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	701a      	strb	r2, [r3, #0]
			NvM_Block_Calibration[i] = Dcm_DiagnosticCalibrationData[i];
 8006eea:	79fa      	ldrb	r2, [r7, #7]
 8006eec:	79fb      	ldrb	r3, [r7, #7]
 8006eee:	4934      	ldr	r1, [pc, #208]	@ (8006fc0 <NvM_WriteAll+0xfc>)
 8006ef0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006ef4:	4933      	ldr	r1, [pc, #204]	@ (8006fc4 <NvM_WriteAll+0x100>)
 8006ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(uint8 i = 0; i < 5; i++)
 8006efa:	79fb      	ldrb	r3, [r7, #7]
 8006efc:	3301      	adds	r3, #1
 8006efe:	71fb      	strb	r3, [r7, #7]
 8006f00:	79fb      	ldrb	r3, [r7, #7]
 8006f02:	2b04      	cmp	r3, #4
 8006f04:	d9e4      	bls.n	8006ed0 <NvM_WriteAll+0xc>
		else
		{
			/* Do nothing. */
		}
	}
	if(NvM_WriteFlag_Calibration == 1)
 8006f06:	4b30      	ldr	r3, [pc, #192]	@ (8006fc8 <NvM_WriteAll+0x104>)
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d107      	bne.n	8006f1e <NvM_WriteAll+0x5a>
	{
		NvM_WriteFlag_Calibration = 0;
 8006f0e:	4b2e      	ldr	r3, [pc, #184]	@ (8006fc8 <NvM_WriteAll+0x104>)
 8006f10:	2200      	movs	r2, #0
 8006f12:	701a      	strb	r2, [r3, #0]
		Nvm_FlashWriteData(NVM_CALIBRATION_START_ADDRESS, NvM_Block_Calibration, 5);
 8006f14:	2205      	movs	r2, #5
 8006f16:	492b      	ldr	r1, [pc, #172]	@ (8006fc4 <NvM_WriteAll+0x100>)
 8006f18:	482c      	ldr	r0, [pc, #176]	@ (8006fcc <NvM_WriteAll+0x108>)
 8006f1a:	f000 f8cb 	bl	80070b4 <Nvm_FlashWriteData>
	}
	else
	{
		/* Do nothing. */
	}
	for(uint8 i = 0; i < 11; i++)
 8006f1e:	2300      	movs	r3, #0
 8006f20:	71bb      	strb	r3, [r7, #6]
 8006f22:	e034      	b.n	8006f8e <NvM_WriteAll+0xca>
	{
		if(NvmBlock_Dem_DTCArray[i].counter != Dem_DTCArray[i].counter)
 8006f24:	79ba      	ldrb	r2, [r7, #6]
 8006f26:	492a      	ldr	r1, [pc, #168]	@ (8006fd0 <NvM_WriteAll+0x10c>)
 8006f28:	4613      	mov	r3, r2
 8006f2a:	00db      	lsls	r3, r3, #3
 8006f2c:	4413      	add	r3, r2
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	440b      	add	r3, r1
 8006f32:	6819      	ldr	r1, [r3, #0]
 8006f34:	79ba      	ldrb	r2, [r7, #6]
 8006f36:	4827      	ldr	r0, [pc, #156]	@ (8006fd4 <NvM_WriteAll+0x110>)
 8006f38:	4613      	mov	r3, r2
 8006f3a:	00db      	lsls	r3, r3, #3
 8006f3c:	4413      	add	r3, r2
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	4403      	add	r3, r0
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4299      	cmp	r1, r3
 8006f46:	d01f      	beq.n	8006f88 <NvM_WriteAll+0xc4>
		{
			NvM_WriteFlag_Dtc = 1;
 8006f48:	4b23      	ldr	r3, [pc, #140]	@ (8006fd8 <NvM_WriteAll+0x114>)
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	701a      	strb	r2, [r3, #0]
			NvmBlock_Dem_DTCArray[i].isActiveNow = 0;
 8006f4e:	79ba      	ldrb	r2, [r7, #6]
 8006f50:	491f      	ldr	r1, [pc, #124]	@ (8006fd0 <NvM_WriteAll+0x10c>)
 8006f52:	4613      	mov	r3, r2
 8006f54:	00db      	lsls	r3, r3, #3
 8006f56:	4413      	add	r3, r2
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	440b      	add	r3, r1
 8006f5c:	3304      	adds	r3, #4
 8006f5e:	2200      	movs	r2, #0
 8006f60:	701a      	strb	r2, [r3, #0]
			Dem_DTCArray[i].isActiveNow = 0;
 8006f62:	79ba      	ldrb	r2, [r7, #6]
 8006f64:	491b      	ldr	r1, [pc, #108]	@ (8006fd4 <NvM_WriteAll+0x110>)
 8006f66:	4613      	mov	r3, r2
 8006f68:	00db      	lsls	r3, r3, #3
 8006f6a:	4413      	add	r3, r2
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	440b      	add	r3, r1
 8006f70:	3304      	adds	r3, #4
 8006f72:	2200      	movs	r2, #0
 8006f74:	701a      	strb	r2, [r3, #0]
			memcpy(NvmBlock_Dem_DTCArray, Dem_DTCArray, sizeof(Dem_DTCArray));
 8006f76:	4a16      	ldr	r2, [pc, #88]	@ (8006fd0 <NvM_WriteAll+0x10c>)
 8006f78:	4b16      	ldr	r3, [pc, #88]	@ (8006fd4 <NvM_WriteAll+0x110>)
 8006f7a:	4610      	mov	r0, r2
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	f44f 7322 	mov.w	r3, #648	@ 0x288
 8006f82:	461a      	mov	r2, r3
 8006f84:	f008 fa5e 	bl	800f444 <memcpy>
	for(uint8 i = 0; i < 11; i++)
 8006f88:	79bb      	ldrb	r3, [r7, #6]
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	71bb      	strb	r3, [r7, #6]
 8006f8e:	79bb      	ldrb	r3, [r7, #6]
 8006f90:	2b0a      	cmp	r3, #10
 8006f92:	d9c7      	bls.n	8006f24 <NvM_WriteAll+0x60>
		else
		{
			/* Do nothing. */
		}
	}
	if(NvM_WriteFlag_Dtc == 1)
 8006f94:	4b10      	ldr	r3, [pc, #64]	@ (8006fd8 <NvM_WriteAll+0x114>)
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d107      	bne.n	8006fac <NvM_WriteAll+0xe8>
	{
		NvM_WriteFlag_Dtc = 0;
 8006f9c:	4b0e      	ldr	r3, [pc, #56]	@ (8006fd8 <NvM_WriteAll+0x114>)
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	701a      	strb	r2, [r3, #0]
		Nvm_FlashWriteData(NVM_DTC_START_ADDRESS, (uint32*)NvmBlock_Dem_DTCArray, (DEM_NUMBER_OF_DTCS * sizeof(Dem_DTC_t)) / 4);
 8006fa2:	22a2      	movs	r2, #162	@ 0xa2
 8006fa4:	490a      	ldr	r1, [pc, #40]	@ (8006fd0 <NvM_WriteAll+0x10c>)
 8006fa6:	480d      	ldr	r0, [pc, #52]	@ (8006fdc <NvM_WriteAll+0x118>)
 8006fa8:	f000 f884 	bl	80070b4 <Nvm_FlashWriteData>
	}
	else
	{
		/* Do nothing. */
	}
	NvM_WriteAll_Flag = 1;
 8006fac:	4b0c      	ldr	r3, [pc, #48]	@ (8006fe0 <NvM_WriteAll+0x11c>)
 8006fae:	2201      	movs	r2, #1
 8006fb0:	701a      	strb	r2, [r3, #0]
	Nvm_WriteAllPending = 2;
 8006fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8006fe4 <NvM_WriteAll+0x120>)
 8006fb4:	2202      	movs	r2, #2
 8006fb6:	701a      	strb	r2, [r3, #0]
}
 8006fb8:	bf00      	nop
 8006fba:	3708      	adds	r7, #8
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}
 8006fc0:	200001d8 	.word	0x200001d8
 8006fc4:	200004d8 	.word	0x200004d8
 8006fc8:	200004d5 	.word	0x200004d5
 8006fcc:	0800f800 	.word	0x0800f800
 8006fd0:	20000508 	.word	0x20000508
 8006fd4:	200001ec 	.word	0x200001ec
 8006fd8:	200004d4 	.word	0x200004d4
 8006fdc:	0800fc00 	.word	0x0800fc00
 8006fe0:	200004d2 	.word	0x200004d2
 8006fe4:	200004d3 	.word	0x200004d3

08006fe8 <NvM_MainFunction>:
void NvM_MainFunction(void)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	af00      	add	r7, sp, #0
	if(EcuM_State == POSTRUN && NvM_WriteAll_Flag == 0) NvMState = WRITEALL;
 8006fec:	4b19      	ldr	r3, [pc, #100]	@ (8007054 <NvM_MainFunction+0x6c>)
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	2b02      	cmp	r3, #2
 8006ff2:	d107      	bne.n	8007004 <NvM_MainFunction+0x1c>
 8006ff4:	4b18      	ldr	r3, [pc, #96]	@ (8007058 <NvM_MainFunction+0x70>)
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d103      	bne.n	8007004 <NvM_MainFunction+0x1c>
 8006ffc:	4b17      	ldr	r3, [pc, #92]	@ (800705c <NvM_MainFunction+0x74>)
 8006ffe:	2201      	movs	r2, #1
 8007000:	701a      	strb	r2, [r3, #0]
 8007002:	e006      	b.n	8007012 <NvM_MainFunction+0x2a>
	else if(EcuM_State == RUN) NvM_WriteAll_Flag = 0;
 8007004:	4b13      	ldr	r3, [pc, #76]	@ (8007054 <NvM_MainFunction+0x6c>)
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	2b01      	cmp	r3, #1
 800700a:	d102      	bne.n	8007012 <NvM_MainFunction+0x2a>
 800700c:	4b12      	ldr	r3, [pc, #72]	@ (8007058 <NvM_MainFunction+0x70>)
 800700e:	2200      	movs	r2, #0
 8007010:	701a      	strb	r2, [r3, #0]
	else
	{
		/* Do nothing. */
	}
	switch(NvMState)
 8007012:	4b12      	ldr	r3, [pc, #72]	@ (800705c <NvM_MainFunction+0x74>)
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d002      	beq.n	8007020 <NvM_MainFunction+0x38>
 800701a:	2b01      	cmp	r3, #1
 800701c:	d009      	beq.n	8007032 <NvM_MainFunction+0x4a>
		NvMState = PENDING;
		NvM_WriteAll();
		NvMState = READY;
		break;
	default:
		break;
 800701e:	e011      	b.n	8007044 <NvM_MainFunction+0x5c>
		NvMState = PENDING;
 8007020:	4b0e      	ldr	r3, [pc, #56]	@ (800705c <NvM_MainFunction+0x74>)
 8007022:	2202      	movs	r2, #2
 8007024:	701a      	strb	r2, [r3, #0]
		NvM_ReadAll();
 8007026:	f7ff fe9d 	bl	8006d64 <NvM_ReadAll>
		NvMState = READY;
 800702a:	4b0c      	ldr	r3, [pc, #48]	@ (800705c <NvM_MainFunction+0x74>)
 800702c:	2203      	movs	r2, #3
 800702e:	701a      	strb	r2, [r3, #0]
		break;
 8007030:	e008      	b.n	8007044 <NvM_MainFunction+0x5c>
		NvMState = PENDING;
 8007032:	4b0a      	ldr	r3, [pc, #40]	@ (800705c <NvM_MainFunction+0x74>)
 8007034:	2202      	movs	r2, #2
 8007036:	701a      	strb	r2, [r3, #0]
		NvM_WriteAll();
 8007038:	f7ff ff44 	bl	8006ec4 <NvM_WriteAll>
		NvMState = READY;
 800703c:	4b07      	ldr	r3, [pc, #28]	@ (800705c <NvM_MainFunction+0x74>)
 800703e:	2203      	movs	r2, #3
 8007040:	701a      	strb	r2, [r3, #0]
		break;
 8007042:	bf00      	nop
	}
	NvM_MainCounter++;
 8007044:	4b06      	ldr	r3, [pc, #24]	@ (8007060 <NvM_MainFunction+0x78>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	3301      	adds	r3, #1
 800704a:	4a05      	ldr	r2, [pc, #20]	@ (8007060 <NvM_MainFunction+0x78>)
 800704c:	6013      	str	r3, [r2, #0]
}
 800704e:	bf00      	nop
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	200007a0 	.word	0x200007a0
 8007058:	200004d2 	.word	0x200004d2
 800705c:	200004d0 	.word	0x200004d0
 8007060:	200004cc 	.word	0x200004cc

08007064 <Nvm_GetPage>:
uint32 Nvm_GetPage(uint32 Address)
{
 8007064:	b480      	push	{r7}
 8007066:	b085      	sub	sp, #20
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
	for (uint8 indx=0; indx < 128; indx++) if((Address < (0x08000000 + (FLASH_PAGE_SIZE *(indx + 1))) ) && (Address >= (0x08000000 + FLASH_PAGE_SIZE * indx))) return (0x08000000 + FLASH_PAGE_SIZE * indx);
 800706c:	2300      	movs	r3, #0
 800706e:	73fb      	strb	r3, [r7, #15]
 8007070:	e016      	b.n	80070a0 <Nvm_GetPage+0x3c>
 8007072:	7bfb      	ldrb	r3, [r7, #15]
 8007074:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 8007078:	3301      	adds	r3, #1
 800707a:	029b      	lsls	r3, r3, #10
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	429a      	cmp	r2, r3
 8007080:	d20b      	bcs.n	800709a <Nvm_GetPage+0x36>
 8007082:	7bfb      	ldrb	r3, [r7, #15]
 8007084:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 8007088:	029b      	lsls	r3, r3, #10
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	429a      	cmp	r2, r3
 800708e:	d304      	bcc.n	800709a <Nvm_GetPage+0x36>
 8007090:	7bfb      	ldrb	r3, [r7, #15]
 8007092:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 8007096:	029b      	lsls	r3, r3, #10
 8007098:	e007      	b.n	80070aa <Nvm_GetPage+0x46>
 800709a:	7bfb      	ldrb	r3, [r7, #15]
 800709c:	3301      	adds	r3, #1
 800709e:	73fb      	strb	r3, [r7, #15]
 80070a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	dae4      	bge.n	8007072 <Nvm_GetPage+0xe>
	return 0;
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3714      	adds	r7, #20
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bc80      	pop	{r7}
 80070b2:	4770      	bx	lr

080070b4 <Nvm_FlashWriteData>:
uint32 Nvm_FlashWriteData(uint32 StartPageAddress, uint32 *Data, uint16 numberofwords)
{
 80070b4:	b5b0      	push	{r4, r5, r7, lr}
 80070b6:	b08a      	sub	sp, #40	@ 0x28
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	60b9      	str	r1, [r7, #8]
 80070be:	4613      	mov	r3, r2
 80070c0:	80fb      	strh	r3, [r7, #6]
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32 PAGEError;
	uint32 sofar=0;
 80070c2:	2300      	movs	r3, #0
 80070c4:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32 StartPage = Nvm_GetPage(StartPageAddress);
 80070c6:	68f8      	ldr	r0, [r7, #12]
 80070c8:	f7ff ffcc 	bl	8007064 <Nvm_GetPage>
 80070cc:	6238      	str	r0, [r7, #32]
	uint32 EndPageAdress = StartPageAddress + numberofwords * 4;
 80070ce:	88fb      	ldrh	r3, [r7, #6]
 80070d0:	009b      	lsls	r3, r3, #2
 80070d2:	461a      	mov	r2, r3
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	4413      	add	r3, r2
 80070d8:	61fb      	str	r3, [r7, #28]
	uint32 EndPage = Nvm_GetPage(EndPageAdress);
 80070da:	69f8      	ldr	r0, [r7, #28]
 80070dc:	f7ff ffc2 	bl	8007064 <Nvm_GetPage>
 80070e0:	61b8      	str	r0, [r7, #24]
	HAL_FLASH_Unlock();
 80070e2:	f003 f937 	bl	800a354 <HAL_FLASH_Unlock>
	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 80070e6:	4b20      	ldr	r3, [pc, #128]	@ (8007168 <Nvm_FlashWriteData+0xb4>)
 80070e8:	2200      	movs	r2, #0
 80070ea:	601a      	str	r2, [r3, #0]
	EraseInitStruct.PageAddress = StartPage;
 80070ec:	4a1e      	ldr	r2, [pc, #120]	@ (8007168 <Nvm_FlashWriteData+0xb4>)
 80070ee:	6a3b      	ldr	r3, [r7, #32]
 80070f0:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbPages     = ((EndPage - StartPage)/FLASH_PAGE_SIZE) +1;
 80070f2:	69ba      	ldr	r2, [r7, #24]
 80070f4:	6a3b      	ldr	r3, [r7, #32]
 80070f6:	1ad3      	subs	r3, r2, r3
 80070f8:	0a9b      	lsrs	r3, r3, #10
 80070fa:	3301      	adds	r3, #1
 80070fc:	4a1a      	ldr	r2, [pc, #104]	@ (8007168 <Nvm_FlashWriteData+0xb4>)
 80070fe:	60d3      	str	r3, [r2, #12]
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK) return HAL_FLASH_GetError ();
 8007100:	f107 0314 	add.w	r3, r7, #20
 8007104:	4619      	mov	r1, r3
 8007106:	4818      	ldr	r0, [pc, #96]	@ (8007168 <Nvm_FlashWriteData+0xb4>)
 8007108:	f003 fa16 	bl	800a538 <HAL_FLASHEx_Erase>
 800710c:	4603      	mov	r3, r0
 800710e:	2b00      	cmp	r3, #0
 8007110:	d01f      	beq.n	8007152 <Nvm_FlashWriteData+0x9e>
 8007112:	f003 f955 	bl	800a3c0 <HAL_FLASH_GetError>
 8007116:	4603      	mov	r3, r0
 8007118:	e022      	b.n	8007160 <Nvm_FlashWriteData+0xac>
	while (sofar<numberofwords)
	{
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress, Data[sofar]) == HAL_OK)
 800711a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	68ba      	ldr	r2, [r7, #8]
 8007120:	4413      	add	r3, r2
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	2200      	movs	r2, #0
 8007126:	461c      	mov	r4, r3
 8007128:	4615      	mov	r5, r2
 800712a:	4622      	mov	r2, r4
 800712c:	462b      	mov	r3, r5
 800712e:	68f9      	ldr	r1, [r7, #12]
 8007130:	2002      	movs	r0, #2
 8007132:	f002 ffad 	bl	800a090 <HAL_FLASH_Program>
 8007136:	4603      	mov	r3, r0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d106      	bne.n	800714a <Nvm_FlashWriteData+0x96>
		{
			StartPageAddress += 4;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	3304      	adds	r3, #4
 8007140:	60fb      	str	r3, [r7, #12]
			sofar++;
 8007142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007144:	3301      	adds	r3, #1
 8007146:	627b      	str	r3, [r7, #36]	@ 0x24
 8007148:	e003      	b.n	8007152 <Nvm_FlashWriteData+0x9e>
		}
		else return HAL_FLASH_GetError ();
 800714a:	f003 f939 	bl	800a3c0 <HAL_FLASH_GetError>
 800714e:	4603      	mov	r3, r0
 8007150:	e006      	b.n	8007160 <Nvm_FlashWriteData+0xac>
	while (sofar<numberofwords)
 8007152:	88fb      	ldrh	r3, [r7, #6]
 8007154:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007156:	429a      	cmp	r2, r3
 8007158:	d3df      	bcc.n	800711a <Nvm_FlashWriteData+0x66>
	}
	HAL_FLASH_Lock();
 800715a:	f003 f921 	bl	800a3a0 <HAL_FLASH_Lock>
	return 0;
 800715e:	2300      	movs	r3, #0
}
 8007160:	4618      	mov	r0, r3
 8007162:	3728      	adds	r7, #40	@ 0x28
 8007164:	46bd      	mov	sp, r7
 8007166:	bdb0      	pop	{r4, r5, r7, pc}
 8007168:	20000790 	.word	0x20000790

0800716c <Nvm_FlashReadData>:

void Nvm_FlashReadData(uint32 StartPageAddress, uint32 *RxBuf, uint16 numberofwords)
{
 800716c:	b480      	push	{r7}
 800716e:	b087      	sub	sp, #28
 8007170:	af00      	add	r7, sp, #0
 8007172:	60f8      	str	r0, [r7, #12]
 8007174:	60b9      	str	r1, [r7, #8]
 8007176:	4613      	mov	r3, r2
 8007178:	80fb      	strh	r3, [r7, #6]
	for (uint16 i = 0; i < numberofwords; i++) RxBuf[i] = *(__IO volatile uint32 *)(StartPageAddress + (i * 4));
 800717a:	2300      	movs	r3, #0
 800717c:	82fb      	strh	r3, [r7, #22]
 800717e:	e00e      	b.n	800719e <Nvm_FlashReadData+0x32>
 8007180:	8afb      	ldrh	r3, [r7, #22]
 8007182:	009b      	lsls	r3, r3, #2
 8007184:	461a      	mov	r2, r3
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	4413      	add	r3, r2
 800718a:	4619      	mov	r1, r3
 800718c:	8afb      	ldrh	r3, [r7, #22]
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	68ba      	ldr	r2, [r7, #8]
 8007192:	4413      	add	r3, r2
 8007194:	680a      	ldr	r2, [r1, #0]
 8007196:	601a      	str	r2, [r3, #0]
 8007198:	8afb      	ldrh	r3, [r7, #22]
 800719a:	3301      	adds	r3, #1
 800719c:	82fb      	strh	r3, [r7, #22]
 800719e:	8afa      	ldrh	r2, [r7, #22]
 80071a0:	88fb      	ldrh	r3, [r7, #6]
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d3ec      	bcc.n	8007180 <Nvm_FlashReadData+0x14>
}
 80071a6:	bf00      	nop
 80071a8:	bf00      	nop
 80071aa:	371c      	adds	r7, #28
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bc80      	pop	{r7}
 80071b0:	4770      	bx	lr
	...

080071b4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80071b4:	b480      	push	{r7}
 80071b6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80071b8:	f3bf 8f4f 	dsb	sy
}
 80071bc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80071be:	4b06      	ldr	r3, [pc, #24]	@ (80071d8 <__NVIC_SystemReset+0x24>)
 80071c0:	68db      	ldr	r3, [r3, #12]
 80071c2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80071c6:	4904      	ldr	r1, [pc, #16]	@ (80071d8 <__NVIC_SystemReset+0x24>)
 80071c8:	4b04      	ldr	r3, [pc, #16]	@ (80071dc <__NVIC_SystemReset+0x28>)
 80071ca:	4313      	orrs	r3, r2
 80071cc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80071ce:	f3bf 8f4f 	dsb	sy
}
 80071d2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80071d4:	bf00      	nop
 80071d6:	e7fd      	b.n	80071d4 <__NVIC_SystemReset+0x20>
 80071d8:	e000ed00 	.word	0xe000ed00
 80071dc:	05fa0004 	.word	0x05fa0004

080071e0 <EcuM_PerformReset>:
void EcuM_MainFunction(void);
void EcuM_PerformReset(uint8 param);
extern void Dem_SetDtc(uint8 IDPrimary, uint32 Reason, uint8 Status);

void EcuM_PerformReset(uint8 param)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	4603      	mov	r3, r0
 80071e8:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 80071ea:	b672      	cpsid	i
}
 80071ec:	bf00      	nop
	__disable_irq();

	Dcm_AliveCounter = 0;
 80071ee:	4b0a      	ldr	r3, [pc, #40]	@ (8007218 <EcuM_PerformReset+0x38>)
 80071f0:	2200      	movs	r2, #0
 80071f2:	601a      	str	r2, [r3, #0]

	if(0 != param)
 80071f4:	79fb      	ldrb	r3, [r7, #7]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00c      	beq.n	8007214 <EcuM_PerformReset+0x34>
	{
		EcuM_ResetCounter[param]++;
 80071fa:	79fb      	ldrb	r3, [r7, #7]
 80071fc:	4a07      	ldr	r2, [pc, #28]	@ (800721c <EcuM_PerformReset+0x3c>)
 80071fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007202:	3201      	adds	r2, #1
 8007204:	4905      	ldr	r1, [pc, #20]	@ (800721c <EcuM_PerformReset+0x3c>)
 8007206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		EcuM_ResetFlag[param] = 1;
 800720a:	79fb      	ldrb	r3, [r7, #7]
 800720c:	4a04      	ldr	r2, [pc, #16]	@ (8007220 <EcuM_PerformReset+0x40>)
 800720e:	2101      	movs	r1, #1
 8007210:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	else
	{
		/* Do nothing. */
	}
	__NVIC_SystemReset();
 8007214:	f7ff ffce 	bl	80071b4 <__NVIC_SystemReset>
 8007218:	20004c24 	.word	0x20004c24
 800721c:	20004c28 	.word	0x20004c28
 8007220:	20004c5c 	.word	0x20004c5c

08007224 <EcuM_MainFunction>:
}

void EcuM_MainFunction(void)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b082      	sub	sp, #8
 8007228:	af00      	add	r7, sp, #0
	if(0 == EcuM_MainCounter)
 800722a:	4b32      	ldr	r3, [pc, #200]	@ (80072f4 <EcuM_MainFunction+0xd0>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d11a      	bne.n	8007268 <EcuM_MainFunction+0x44>
	{
		for(uint8 i = 0; i < 13; i++)
 8007232:	2300      	movs	r3, #0
 8007234:	71fb      	strb	r3, [r7, #7]
 8007236:	e014      	b.n	8007262 <EcuM_MainFunction+0x3e>
		{
			if(0 != EcuM_ResetFlag[i])
 8007238:	79fb      	ldrb	r3, [r7, #7]
 800723a:	4a2f      	ldr	r2, [pc, #188]	@ (80072f8 <EcuM_MainFunction+0xd4>)
 800723c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d00b      	beq.n	800725c <EcuM_MainFunction+0x38>
			{
				Dem_SetDtc(18, i, 1);
 8007244:	79fb      	ldrb	r3, [r7, #7]
 8007246:	2201      	movs	r2, #1
 8007248:	4619      	mov	r1, r3
 800724a:	2012      	movs	r0, #18
 800724c:	f7ff fc02 	bl	8006a54 <Dem_SetDtc>
				EcuM_ResetFlag[i] = 0;
 8007250:	79fb      	ldrb	r3, [r7, #7]
 8007252:	4a29      	ldr	r2, [pc, #164]	@ (80072f8 <EcuM_MainFunction+0xd4>)
 8007254:	2100      	movs	r1, #0
 8007256:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 800725a:	e005      	b.n	8007268 <EcuM_MainFunction+0x44>
		for(uint8 i = 0; i < 13; i++)
 800725c:	79fb      	ldrb	r3, [r7, #7]
 800725e:	3301      	adds	r3, #1
 8007260:	71fb      	strb	r3, [r7, #7]
 8007262:	79fb      	ldrb	r3, [r7, #7]
 8007264:	2b0c      	cmp	r3, #12
 8007266:	d9e7      	bls.n	8007238 <EcuM_MainFunction+0x14>
	else
	{
		/* Do nothing. */
	}
	/* Keep the SW in RUN for at least 10 seconds. */
	if(2000 > EcuM_MainCounter) EcuM_State = 1;
 8007268:	4b22      	ldr	r3, [pc, #136]	@ (80072f4 <EcuM_MainFunction+0xd0>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8007270:	d203      	bcs.n	800727a <EcuM_MainFunction+0x56>
 8007272:	4b22      	ldr	r3, [pc, #136]	@ (80072fc <EcuM_MainFunction+0xd8>)
 8007274:	2201      	movs	r2, #1
 8007276:	701a      	strb	r2, [r3, #0]
 8007278:	e033      	b.n	80072e2 <EcuM_MainFunction+0xbe>
	else
	{
		/* If CAN is in SLEEP, no problem with the supply is reported, and wake-up line is 0. */
		if(1 == CanH_RequestBusSleep && 0 == CanH_TxSig_PowerSupplyNetworkWarning && 0 == HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 800727a:	4b21      	ldr	r3, [pc, #132]	@ (8007300 <EcuM_MainFunction+0xdc>)
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	2b01      	cmp	r3, #1
 8007280:	d115      	bne.n	80072ae <EcuM_MainFunction+0x8a>
 8007282:	4b20      	ldr	r3, [pc, #128]	@ (8007304 <EcuM_MainFunction+0xe0>)
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d111      	bne.n	80072ae <EcuM_MainFunction+0x8a>
 800728a:	2101      	movs	r1, #1
 800728c:	481e      	ldr	r0, [pc, #120]	@ (8007308 <EcuM_MainFunction+0xe4>)
 800728e:	f003 fb7f 	bl	800a990 <HAL_GPIO_ReadPin>
 8007292:	4603      	mov	r3, r0
 8007294:	2b00      	cmp	r3, #0
 8007296:	d10a      	bne.n	80072ae <EcuM_MainFunction+0x8a>
		{
			/* goto POSTRUN. */
			EcuM_State = 2;
 8007298:	4b18      	ldr	r3, [pc, #96]	@ (80072fc <EcuM_MainFunction+0xd8>)
 800729a:	2202      	movs	r2, #2
 800729c:	701a      	strb	r2, [r3, #0]
			if(0 == Nvm_WriteAllPending) Nvm_WriteAllPending = 1;
 800729e:	4b1b      	ldr	r3, [pc, #108]	@ (800730c <EcuM_MainFunction+0xe8>)
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d106      	bne.n	80072b4 <EcuM_MainFunction+0x90>
 80072a6:	4b19      	ldr	r3, [pc, #100]	@ (800730c <EcuM_MainFunction+0xe8>)
 80072a8:	2201      	movs	r2, #1
 80072aa:	701a      	strb	r2, [r3, #0]
 80072ac:	e002      	b.n	80072b4 <EcuM_MainFunction+0x90>
			else
			{
				/* Do nothing. */
			}
		}
		else EcuM_State = 1; /* return to RUN. */
 80072ae:	4b13      	ldr	r3, [pc, #76]	@ (80072fc <EcuM_MainFunction+0xd8>)
 80072b0:	2201      	movs	r2, #1
 80072b2:	701a      	strb	r2, [r3, #0]
		/* goto SLEEP if POSTRUN and WRITE ALL done. */
		if(2 == EcuM_State && 2 == Nvm_WriteAllPending) EcuM_State = 3;
 80072b4:	4b11      	ldr	r3, [pc, #68]	@ (80072fc <EcuM_MainFunction+0xd8>)
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	2b02      	cmp	r3, #2
 80072ba:	d106      	bne.n	80072ca <EcuM_MainFunction+0xa6>
 80072bc:	4b13      	ldr	r3, [pc, #76]	@ (800730c <EcuM_MainFunction+0xe8>)
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	2b02      	cmp	r3, #2
 80072c2:	d102      	bne.n	80072ca <EcuM_MainFunction+0xa6>
 80072c4:	4b0d      	ldr	r3, [pc, #52]	@ (80072fc <EcuM_MainFunction+0xd8>)
 80072c6:	2203      	movs	r2, #3
 80072c8:	701a      	strb	r2, [r3, #0]
		else
		{
			/* Do nothing. */
		}
		/* Enter STANDBY. */
		if(3 == EcuM_State)
 80072ca:	4b0c      	ldr	r3, [pc, #48]	@ (80072fc <EcuM_MainFunction+0xd8>)
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	2b03      	cmp	r3, #3
 80072d0:	d107      	bne.n	80072e2 <EcuM_MainFunction+0xbe>
  __ASM volatile ("cpsid i" : : : "memory");
 80072d2:	b672      	cpsid	i
}
 80072d4:	bf00      	nop
		{
			__disable_irq();
			HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 80072d6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80072da:	f003 fb89 	bl	800a9f0 <HAL_PWR_EnableWakeUpPin>
			HAL_PWR_EnterSTANDBYMode();
 80072de:	f003 fba3 	bl	800aa28 <HAL_PWR_EnterSTANDBYMode>
		else
		{
			/* Do nothing. */
		}
	}
	EcuM_MainCounter++;
 80072e2:	4b04      	ldr	r3, [pc, #16]	@ (80072f4 <EcuM_MainFunction+0xd0>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	3301      	adds	r3, #1
 80072e8:	4a02      	ldr	r2, [pc, #8]	@ (80072f4 <EcuM_MainFunction+0xd0>)
 80072ea:	6013      	str	r3, [r2, #0]
}
 80072ec:	bf00      	nop
 80072ee:	3708      	adds	r7, #8
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}
 80072f4:	200007a4 	.word	0x200007a4
 80072f8:	20004c5c 	.word	0x20004c5c
 80072fc:	200007a0 	.word	0x200007a0
 8007300:	20000150 	.word	0x20000150
 8007304:	200000c7 	.word	0x200000c7
 8007308:	40010800 	.word	0x40010800
 800730c:	200004d3 	.word	0x200004d3

08007310 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8007316:	1d3b      	adds	r3, r7, #4
 8007318:	2200      	movs	r2, #0
 800731a:	601a      	str	r2, [r3, #0]
 800731c:	605a      	str	r2, [r3, #4]
 800731e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */
  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8007320:	4b2e      	ldr	r3, [pc, #184]	@ (80073dc <MX_ADC1_Init+0xcc>)
 8007322:	4a2f      	ldr	r2, [pc, #188]	@ (80073e0 <MX_ADC1_Init+0xd0>)
 8007324:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8007326:	4b2d      	ldr	r3, [pc, #180]	@ (80073dc <MX_ADC1_Init+0xcc>)
 8007328:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800732c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800732e:	4b2b      	ldr	r3, [pc, #172]	@ (80073dc <MX_ADC1_Init+0xcc>)
 8007330:	2201      	movs	r2, #1
 8007332:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007334:	4b29      	ldr	r3, [pc, #164]	@ (80073dc <MX_ADC1_Init+0xcc>)
 8007336:	2200      	movs	r2, #0
 8007338:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800733a:	4b28      	ldr	r3, [pc, #160]	@ (80073dc <MX_ADC1_Init+0xcc>)
 800733c:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8007340:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007342:	4b26      	ldr	r3, [pc, #152]	@ (80073dc <MX_ADC1_Init+0xcc>)
 8007344:	2200      	movs	r2, #0
 8007346:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8007348:	4b24      	ldr	r3, [pc, #144]	@ (80073dc <MX_ADC1_Init+0xcc>)
 800734a:	2204      	movs	r2, #4
 800734c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800734e:	4823      	ldr	r0, [pc, #140]	@ (80073dc <MX_ADC1_Init+0xcc>)
 8007350:	f000 ff7c 	bl	800824c <HAL_ADC_Init>
 8007354:	4603      	mov	r3, r0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d001      	beq.n	800735e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800735a:	f000 fcb4 	bl	8007cc6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800735e:	2302      	movs	r3, #2
 8007360:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007362:	2301      	movs	r3, #1
 8007364:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8007366:	2307      	movs	r3, #7
 8007368:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800736a:	1d3b      	adds	r3, r7, #4
 800736c:	4619      	mov	r1, r3
 800736e:	481b      	ldr	r0, [pc, #108]	@ (80073dc <MX_ADC1_Init+0xcc>)
 8007370:	f001 fa24 	bl	80087bc <HAL_ADC_ConfigChannel>
 8007374:	4603      	mov	r3, r0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d001      	beq.n	800737e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800737a:	f000 fca4 	bl	8007cc6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800737e:	2303      	movs	r3, #3
 8007380:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8007382:	2302      	movs	r3, #2
 8007384:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007386:	1d3b      	adds	r3, r7, #4
 8007388:	4619      	mov	r1, r3
 800738a:	4814      	ldr	r0, [pc, #80]	@ (80073dc <MX_ADC1_Init+0xcc>)
 800738c:	f001 fa16 	bl	80087bc <HAL_ADC_ConfigChannel>
 8007390:	4603      	mov	r3, r0
 8007392:	2b00      	cmp	r3, #0
 8007394:	d001      	beq.n	800739a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8007396:	f000 fc96 	bl	8007cc6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800739a:	2310      	movs	r3, #16
 800739c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800739e:	2303      	movs	r3, #3
 80073a0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80073a2:	1d3b      	adds	r3, r7, #4
 80073a4:	4619      	mov	r1, r3
 80073a6:	480d      	ldr	r0, [pc, #52]	@ (80073dc <MX_ADC1_Init+0xcc>)
 80073a8:	f001 fa08 	bl	80087bc <HAL_ADC_ConfigChannel>
 80073ac:	4603      	mov	r3, r0
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d001      	beq.n	80073b6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80073b2:	f000 fc88 	bl	8007cc6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80073b6:	2311      	movs	r3, #17
 80073b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80073ba:	2304      	movs	r3, #4
 80073bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80073be:	1d3b      	adds	r3, r7, #4
 80073c0:	4619      	mov	r1, r3
 80073c2:	4806      	ldr	r0, [pc, #24]	@ (80073dc <MX_ADC1_Init+0xcc>)
 80073c4:	f001 f9fa 	bl	80087bc <HAL_ADC_ConfigChannel>
 80073c8:	4603      	mov	r3, r0
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d001      	beq.n	80073d2 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80073ce:	f000 fc7a 	bl	8007cc6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  /* USER CODE END ADC1_Init 2 */

}
 80073d2:	bf00      	nop
 80073d4:	3710      	adds	r7, #16
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	bf00      	nop
 80073dc:	200007a8 	.word	0x200007a8
 80073e0:	40012400 	.word	0x40012400

080073e4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b088      	sub	sp, #32
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073ec:	f107 0310 	add.w	r3, r7, #16
 80073f0:	2200      	movs	r2, #0
 80073f2:	601a      	str	r2, [r3, #0]
 80073f4:	605a      	str	r2, [r3, #4]
 80073f6:	609a      	str	r2, [r3, #8]
 80073f8:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a2d      	ldr	r2, [pc, #180]	@ (80074b4 <HAL_ADC_MspInit+0xd0>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d152      	bne.n	80074aa <HAL_ADC_MspInit+0xc6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */
  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007404:	4b2c      	ldr	r3, [pc, #176]	@ (80074b8 <HAL_ADC_MspInit+0xd4>)
 8007406:	699b      	ldr	r3, [r3, #24]
 8007408:	4a2b      	ldr	r2, [pc, #172]	@ (80074b8 <HAL_ADC_MspInit+0xd4>)
 800740a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800740e:	6193      	str	r3, [r2, #24]
 8007410:	4b29      	ldr	r3, [pc, #164]	@ (80074b8 <HAL_ADC_MspInit+0xd4>)
 8007412:	699b      	ldr	r3, [r3, #24]
 8007414:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007418:	60fb      	str	r3, [r7, #12]
 800741a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800741c:	4b26      	ldr	r3, [pc, #152]	@ (80074b8 <HAL_ADC_MspInit+0xd4>)
 800741e:	699b      	ldr	r3, [r3, #24]
 8007420:	4a25      	ldr	r2, [pc, #148]	@ (80074b8 <HAL_ADC_MspInit+0xd4>)
 8007422:	f043 0304 	orr.w	r3, r3, #4
 8007426:	6193      	str	r3, [r2, #24]
 8007428:	4b23      	ldr	r3, [pc, #140]	@ (80074b8 <HAL_ADC_MspInit+0xd4>)
 800742a:	699b      	ldr	r3, [r3, #24]
 800742c:	f003 0304 	and.w	r3, r3, #4
 8007430:	60bb      	str	r3, [r7, #8]
 8007432:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007434:	230c      	movs	r3, #12
 8007436:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007438:	2303      	movs	r3, #3
 800743a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800743c:	f107 0310 	add.w	r3, r7, #16
 8007440:	4619      	mov	r1, r3
 8007442:	481e      	ldr	r0, [pc, #120]	@ (80074bc <HAL_ADC_MspInit+0xd8>)
 8007444:	f003 f920 	bl	800a688 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8007448:	4b1d      	ldr	r3, [pc, #116]	@ (80074c0 <HAL_ADC_MspInit+0xdc>)
 800744a:	4a1e      	ldr	r2, [pc, #120]	@ (80074c4 <HAL_ADC_MspInit+0xe0>)
 800744c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800744e:	4b1c      	ldr	r3, [pc, #112]	@ (80074c0 <HAL_ADC_MspInit+0xdc>)
 8007450:	2200      	movs	r2, #0
 8007452:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007454:	4b1a      	ldr	r3, [pc, #104]	@ (80074c0 <HAL_ADC_MspInit+0xdc>)
 8007456:	2200      	movs	r2, #0
 8007458:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800745a:	4b19      	ldr	r3, [pc, #100]	@ (80074c0 <HAL_ADC_MspInit+0xdc>)
 800745c:	2280      	movs	r2, #128	@ 0x80
 800745e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007460:	4b17      	ldr	r3, [pc, #92]	@ (80074c0 <HAL_ADC_MspInit+0xdc>)
 8007462:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007466:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007468:	4b15      	ldr	r3, [pc, #84]	@ (80074c0 <HAL_ADC_MspInit+0xdc>)
 800746a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800746e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8007470:	4b13      	ldr	r3, [pc, #76]	@ (80074c0 <HAL_ADC_MspInit+0xdc>)
 8007472:	2220      	movs	r2, #32
 8007474:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8007476:	4b12      	ldr	r3, [pc, #72]	@ (80074c0 <HAL_ADC_MspInit+0xdc>)
 8007478:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 800747c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800747e:	4810      	ldr	r0, [pc, #64]	@ (80074c0 <HAL_ADC_MspInit+0xdc>)
 8007480:	f002 fc18 	bl	8009cb4 <HAL_DMA_Init>
 8007484:	4603      	mov	r3, r0
 8007486:	2b00      	cmp	r3, #0
 8007488:	d001      	beq.n	800748e <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 800748a:	f000 fc1c 	bl	8007cc6 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	4a0b      	ldr	r2, [pc, #44]	@ (80074c0 <HAL_ADC_MspInit+0xdc>)
 8007492:	621a      	str	r2, [r3, #32]
 8007494:	4a0a      	ldr	r2, [pc, #40]	@ (80074c0 <HAL_ADC_MspInit+0xdc>)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 800749a:	2200      	movs	r2, #0
 800749c:	2101      	movs	r1, #1
 800749e:	2012      	movs	r0, #18
 80074a0:	f002 fbdd 	bl	8009c5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80074a4:	2012      	movs	r0, #18
 80074a6:	f002 fbf6 	bl	8009c96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */
  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80074aa:	bf00      	nop
 80074ac:	3720      	adds	r7, #32
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	40012400 	.word	0x40012400
 80074b8:	40021000 	.word	0x40021000
 80074bc:	40010800 	.word	0x40010800
 80074c0:	200007f4 	.word	0x200007f4
 80074c4:	40020008 	.word	0x40020008

080074c8 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b08a      	sub	sp, #40	@ 0x28
 80074cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80074ce:	4b51      	ldr	r3, [pc, #324]	@ (8007614 <MX_CAN_Init+0x14c>)
 80074d0:	4a51      	ldr	r2, [pc, #324]	@ (8007618 <MX_CAN_Init+0x150>)
 80074d2:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 80074d4:	4b4f      	ldr	r3, [pc, #316]	@ (8007614 <MX_CAN_Init+0x14c>)
 80074d6:	2209      	movs	r2, #9
 80074d8:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80074da:	4b4e      	ldr	r3, [pc, #312]	@ (8007614 <MX_CAN_Init+0x14c>)
 80074dc:	2200      	movs	r2, #0
 80074de:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80074e0:	4b4c      	ldr	r3, [pc, #304]	@ (8007614 <MX_CAN_Init+0x14c>)
 80074e2:	2200      	movs	r2, #0
 80074e4:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_5TQ;
 80074e6:	4b4b      	ldr	r3, [pc, #300]	@ (8007614 <MX_CAN_Init+0x14c>)
 80074e8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80074ec:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80074ee:	4b49      	ldr	r3, [pc, #292]	@ (8007614 <MX_CAN_Init+0x14c>)
 80074f0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80074f4:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = ENABLE;
 80074f6:	4b47      	ldr	r3, [pc, #284]	@ (8007614 <MX_CAN_Init+0x14c>)
 80074f8:	2201      	movs	r2, #1
 80074fa:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 80074fc:	4b45      	ldr	r3, [pc, #276]	@ (8007614 <MX_CAN_Init+0x14c>)
 80074fe:	2201      	movs	r2, #1
 8007500:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = ENABLE;
 8007502:	4b44      	ldr	r3, [pc, #272]	@ (8007614 <MX_CAN_Init+0x14c>)
 8007504:	2201      	movs	r2, #1
 8007506:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8007508:	4b42      	ldr	r3, [pc, #264]	@ (8007614 <MX_CAN_Init+0x14c>)
 800750a:	2201      	movs	r2, #1
 800750c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = ENABLE;
 800750e:	4b41      	ldr	r3, [pc, #260]	@ (8007614 <MX_CAN_Init+0x14c>)
 8007510:	2201      	movs	r2, #1
 8007512:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = ENABLE;
 8007514:	4b3f      	ldr	r3, [pc, #252]	@ (8007614 <MX_CAN_Init+0x14c>)
 8007516:	2201      	movs	r2, #1
 8007518:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800751a:	483e      	ldr	r0, [pc, #248]	@ (8007614 <MX_CAN_Init+0x14c>)
 800751c:	f001 fc02 	bl	8008d24 <HAL_CAN_Init>
 8007520:	4603      	mov	r3, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	d001      	beq.n	800752a <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8007526:	f000 fbce 	bl	8007cc6 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
	CAN_FilterTypeDef filterConfig;
	filterConfig.FilterBank = 13;
 800752a:	230d      	movs	r3, #13
 800752c:	617b      	str	r3, [r7, #20]
	filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800752e:	2300      	movs	r3, #0
 8007530:	61bb      	str	r3, [r7, #24]
	filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8007532:	2301      	movs	r3, #1
 8007534:	61fb      	str	r3, [r7, #28]
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8007536:	2300      	movs	r3, #0
 8007538:	613b      	str	r3, [r7, #16]
	filterConfig.FilterActivation = ENABLE;
 800753a:	2301      	movs	r3, #1
 800753c:	623b      	str	r3, [r7, #32]
	filterConfig.FilterIdHigh = (0x702 << 5) & 0xFFFF;
 800753e:	f24e 0340 	movw	r3, #57408	@ 0xe040
 8007542:	603b      	str	r3, [r7, #0]
	filterConfig.FilterIdLow = 0x0000;
 8007544:	2300      	movs	r3, #0
 8007546:	607b      	str	r3, [r7, #4]
	filterConfig.FilterMaskIdHigh = (0x7FF << 5);
 8007548:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800754c:	60bb      	str	r3, [r7, #8]
	filterConfig.FilterMaskIdLow = 0x0000;
 800754e:	2300      	movs	r3, #0
 8007550:	60fb      	str	r3, [r7, #12]
	HAL_CAN_ConfigFilter(&hcan, &filterConfig);
 8007552:	463b      	mov	r3, r7
 8007554:	4619      	mov	r1, r3
 8007556:	482f      	ldr	r0, [pc, #188]	@ (8007614 <MX_CAN_Init+0x14c>)
 8007558:	f001 fd2a 	bl	8008fb0 <HAL_CAN_ConfigFilter>

	filterConfig.FilterBank = 12;
 800755c:	230c      	movs	r3, #12
 800755e:	617b      	str	r3, [r7, #20]
	filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8007560:	2300      	movs	r3, #0
 8007562:	61bb      	str	r3, [r7, #24]
	filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8007564:	2301      	movs	r3, #1
 8007566:	61fb      	str	r3, [r7, #28]
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8007568:	2300      	movs	r3, #0
 800756a:	613b      	str	r3, [r7, #16]
	filterConfig.FilterActivation = ENABLE;
 800756c:	2301      	movs	r3, #1
 800756e:	623b      	str	r3, [r7, #32]
	filterConfig.FilterIdHigh = (0x602 << 5) & 0xFFFF;
 8007570:	f24c 0340 	movw	r3, #49216	@ 0xc040
 8007574:	603b      	str	r3, [r7, #0]
	filterConfig.FilterIdLow = 0x0000;
 8007576:	2300      	movs	r3, #0
 8007578:	607b      	str	r3, [r7, #4]
	filterConfig.FilterMaskIdHigh = (0x7FF << 5);
 800757a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800757e:	60bb      	str	r3, [r7, #8]
	filterConfig.FilterMaskIdLow = 0x0000;
 8007580:	2300      	movs	r3, #0
 8007582:	60fb      	str	r3, [r7, #12]
	HAL_CAN_ConfigFilter(&hcan, &filterConfig);
 8007584:	463b      	mov	r3, r7
 8007586:	4619      	mov	r1, r3
 8007588:	4822      	ldr	r0, [pc, #136]	@ (8007614 <MX_CAN_Init+0x14c>)
 800758a:	f001 fd11 	bl	8008fb0 <HAL_CAN_ConfigFilter>

	filterConfig.FilterBank = 11;
 800758e:	230b      	movs	r3, #11
 8007590:	617b      	str	r3, [r7, #20]
	filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8007592:	2300      	movs	r3, #0
 8007594:	61bb      	str	r3, [r7, #24]
	filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8007596:	2301      	movs	r3, #1
 8007598:	61fb      	str	r3, [r7, #28]
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800759a:	2300      	movs	r3, #0
 800759c:	613b      	str	r3, [r7, #16]
	filterConfig.FilterActivation = ENABLE;
 800759e:	2301      	movs	r3, #1
 80075a0:	623b      	str	r3, [r7, #32]
	filterConfig.FilterIdHigh = (0x510 << 5) & 0xFFFF;
 80075a2:	f44f 4322 	mov.w	r3, #41472	@ 0xa200
 80075a6:	603b      	str	r3, [r7, #0]
	filterConfig.FilterIdLow = 0x0000;
 80075a8:	2300      	movs	r3, #0
 80075aa:	607b      	str	r3, [r7, #4]
	filterConfig.FilterMaskIdHigh = (0x7FF << 5);
 80075ac:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80075b0:	60bb      	str	r3, [r7, #8]
	filterConfig.FilterMaskIdLow = 0x0000;
 80075b2:	2300      	movs	r3, #0
 80075b4:	60fb      	str	r3, [r7, #12]
	HAL_CAN_ConfigFilter(&hcan, &filterConfig);
 80075b6:	463b      	mov	r3, r7
 80075b8:	4619      	mov	r1, r3
 80075ba:	4816      	ldr	r0, [pc, #88]	@ (8007614 <MX_CAN_Init+0x14c>)
 80075bc:	f001 fcf8 	bl	8008fb0 <HAL_CAN_ConfigFilter>

	filterConfig.FilterBank = 10;
 80075c0:	230a      	movs	r3, #10
 80075c2:	617b      	str	r3, [r7, #20]
	filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80075c4:	2300      	movs	r3, #0
 80075c6:	61bb      	str	r3, [r7, #24]
	filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80075c8:	2301      	movs	r3, #1
 80075ca:	61fb      	str	r3, [r7, #28]
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80075cc:	2300      	movs	r3, #0
 80075ce:	613b      	str	r3, [r7, #16]
	filterConfig.FilterActivation = ENABLE;
 80075d0:	2301      	movs	r3, #1
 80075d2:	623b      	str	r3, [r7, #32]
	filterConfig.FilterIdHigh = (0x10E << 5) & 0xFFFF;
 80075d4:	f44f 5307 	mov.w	r3, #8640	@ 0x21c0
 80075d8:	603b      	str	r3, [r7, #0]
	filterConfig.FilterIdLow = 0x0000;
 80075da:	2300      	movs	r3, #0
 80075dc:	607b      	str	r3, [r7, #4]
	filterConfig.FilterMaskIdHigh = (0x7FF << 5);
 80075de:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80075e2:	60bb      	str	r3, [r7, #8]
	filterConfig.FilterMaskIdLow = 0x0000;
 80075e4:	2300      	movs	r3, #0
 80075e6:	60fb      	str	r3, [r7, #12]
	HAL_CAN_ConfigFilter(&hcan, &filterConfig);
 80075e8:	463b      	mov	r3, r7
 80075ea:	4619      	mov	r1, r3
 80075ec:	4809      	ldr	r0, [pc, #36]	@ (8007614 <MX_CAN_Init+0x14c>)
 80075ee:	f001 fcdf 	bl	8008fb0 <HAL_CAN_ConfigFilter>

	static uint32_t notificationLocal = 0;
	HAL_CAN_Start(&hcan);
 80075f2:	4808      	ldr	r0, [pc, #32]	@ (8007614 <MX_CAN_Init+0x14c>)
 80075f4:	f001 fda5 	bl	8009142 <HAL_CAN_Start>
	notificationLocal = CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_FULL;
 80075f8:	4b08      	ldr	r3, [pc, #32]	@ (800761c <MX_CAN_Init+0x154>)
 80075fa:	2206      	movs	r2, #6
 80075fc:	601a      	str	r2, [r3, #0]
	HAL_CAN_ActivateNotification(&hcan, notificationLocal);
 80075fe:	4b07      	ldr	r3, [pc, #28]	@ (800761c <MX_CAN_Init+0x154>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4619      	mov	r1, r3
 8007604:	4803      	ldr	r0, [pc, #12]	@ (8007614 <MX_CAN_Init+0x14c>)
 8007606:	f002 f813 	bl	8009630 <HAL_CAN_ActivateNotification>
  /* USER CODE END CAN_Init 2 */

}
 800760a:	bf00      	nop
 800760c:	3728      	adds	r7, #40	@ 0x28
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	20000838 	.word	0x20000838
 8007618:	40006400 	.word	0x40006400
 800761c:	2000089c 	.word	0x2000089c

08007620 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b088      	sub	sp, #32
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007628:	f107 0310 	add.w	r3, r7, #16
 800762c:	2200      	movs	r2, #0
 800762e:	601a      	str	r2, [r3, #0]
 8007630:	605a      	str	r2, [r3, #4]
 8007632:	609a      	str	r2, [r3, #8]
 8007634:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a1c      	ldr	r2, [pc, #112]	@ (80076ac <HAL_CAN_MspInit+0x8c>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d131      	bne.n	80076a4 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */
  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8007640:	4b1b      	ldr	r3, [pc, #108]	@ (80076b0 <HAL_CAN_MspInit+0x90>)
 8007642:	69db      	ldr	r3, [r3, #28]
 8007644:	4a1a      	ldr	r2, [pc, #104]	@ (80076b0 <HAL_CAN_MspInit+0x90>)
 8007646:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800764a:	61d3      	str	r3, [r2, #28]
 800764c:	4b18      	ldr	r3, [pc, #96]	@ (80076b0 <HAL_CAN_MspInit+0x90>)
 800764e:	69db      	ldr	r3, [r3, #28]
 8007650:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007654:	60fb      	str	r3, [r7, #12]
 8007656:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007658:	4b15      	ldr	r3, [pc, #84]	@ (80076b0 <HAL_CAN_MspInit+0x90>)
 800765a:	699b      	ldr	r3, [r3, #24]
 800765c:	4a14      	ldr	r2, [pc, #80]	@ (80076b0 <HAL_CAN_MspInit+0x90>)
 800765e:	f043 0304 	orr.w	r3, r3, #4
 8007662:	6193      	str	r3, [r2, #24]
 8007664:	4b12      	ldr	r3, [pc, #72]	@ (80076b0 <HAL_CAN_MspInit+0x90>)
 8007666:	699b      	ldr	r3, [r3, #24]
 8007668:	f003 0304 	and.w	r3, r3, #4
 800766c:	60bb      	str	r3, [r7, #8]
 800766e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8007670:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007674:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007676:	2300      	movs	r3, #0
 8007678:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800767a:	2301      	movs	r3, #1
 800767c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800767e:	f107 0310 	add.w	r3, r7, #16
 8007682:	4619      	mov	r1, r3
 8007684:	480b      	ldr	r0, [pc, #44]	@ (80076b4 <HAL_CAN_MspInit+0x94>)
 8007686:	f002 ffff 	bl	800a688 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800768a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800768e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007690:	2302      	movs	r3, #2
 8007692:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007694:	2303      	movs	r3, #3
 8007696:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007698:	f107 0310 	add.w	r3, r7, #16
 800769c:	4619      	mov	r1, r3
 800769e:	4805      	ldr	r0, [pc, #20]	@ (80076b4 <HAL_CAN_MspInit+0x94>)
 80076a0:	f002 fff2 	bl	800a688 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */
  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80076a4:	bf00      	nop
 80076a6:	3720      	adds	r7, #32
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	40006400 	.word	0x40006400
 80076b0:	40021000 	.word	0x40021000
 80076b4:	40010800 	.word	0x40010800

080076b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80076be:	4b08      	ldr	r3, [pc, #32]	@ (80076e0 <MX_DMA_Init+0x28>)
 80076c0:	695b      	ldr	r3, [r3, #20]
 80076c2:	4a07      	ldr	r2, [pc, #28]	@ (80076e0 <MX_DMA_Init+0x28>)
 80076c4:	f043 0301 	orr.w	r3, r3, #1
 80076c8:	6153      	str	r3, [r2, #20]
 80076ca:	4b05      	ldr	r3, [pc, #20]	@ (80076e0 <MX_DMA_Init+0x28>)
 80076cc:	695b      	ldr	r3, [r3, #20]
 80076ce:	f003 0301 	and.w	r3, r3, #1
 80076d2:	607b      	str	r3, [r7, #4]
 80076d4:	687b      	ldr	r3, [r7, #4]

}
 80076d6:	bf00      	nop
 80076d8:	370c      	adds	r7, #12
 80076da:	46bd      	mov	sp, r7
 80076dc:	bc80      	pop	{r7}
 80076de:	4770      	bx	lr
 80076e0:	40021000 	.word	0x40021000

080076e4 <configureTimerForRunTimeStats>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 1 */
void configureTimerForRunTimeStats(void)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	af00      	add	r7, sp, #0
	ulHighFrequencyTimerTicks = 0;
 80076e8:	4b03      	ldr	r3, [pc, #12]	@ (80076f8 <configureTimerForRunTimeStats+0x14>)
 80076ea:	2200      	movs	r2, #0
 80076ec:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim3);
 80076ee:	4803      	ldr	r0, [pc, #12]	@ (80076fc <configureTimerForRunTimeStats+0x18>)
 80076f0:	f003 ffd2 	bl	800b698 <HAL_TIM_Base_Start_IT>
}
 80076f4:	bf00      	nop
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	20000988 	.word	0x20000988
 80076fc:	20000a54 	.word	0x20000a54

08007700 <getRunTimeCounterValue>:
unsigned long getRunTimeCounterValue(void)
{
 8007700:	b480      	push	{r7}
 8007702:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 8007704:	4b02      	ldr	r3, [pc, #8]	@ (8007710 <getRunTimeCounterValue+0x10>)
 8007706:	681b      	ldr	r3, [r3, #0]
}
 8007708:	4618      	mov	r0, r3
 800770a:	46bd      	mov	sp, r7
 800770c:	bc80      	pop	{r7}
 800770e:	4770      	bx	lr
 8007710:	20000988 	.word	0x20000988

08007714 <vApplicationIdleHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 8007714:	b580      	push	{r7, lr}
 8007716:	af00      	add	r7, sp, #0
	IDLE_Counter++;
 8007718:	4b09      	ldr	r3, [pc, #36]	@ (8007740 <vApplicationIdleHook+0x2c>)
 800771a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800771e:	1c50      	adds	r0, r2, #1
 8007720:	f143 0100 	adc.w	r1, r3, #0
 8007724:	4b06      	ldr	r3, [pc, #24]	@ (8007740 <vApplicationIdleHook+0x2c>)
 8007726:	e9c3 0100 	strd	r0, r1, [r3]
	uxArraySize = uxTaskGetSystemState(xTaskStatusArray, 5, &ulTotalRunTime);
 800772a:	4a06      	ldr	r2, [pc, #24]	@ (8007744 <vApplicationIdleHook+0x30>)
 800772c:	2105      	movs	r1, #5
 800772e:	4806      	ldr	r0, [pc, #24]	@ (8007748 <vApplicationIdleHook+0x34>)
 8007730:	f006 fc04 	bl	800df3c <uxTaskGetSystemState>
 8007734:	4603      	mov	r3, r0
 8007736:	4a05      	ldr	r2, [pc, #20]	@ (800774c <vApplicationIdleHook+0x38>)
 8007738:	6013      	str	r3, [r2, #0]
}
 800773a:	bf00      	nop
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	20000980 	.word	0x20000980
 8007744:	2000096c 	.word	0x2000096c
 8007748:	200008b0 	.word	0x200008b0
 800774c:	20000964 	.word	0x20000964

08007750 <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 8007750:	b480      	push	{r7}
 8007752:	af00      	add	r7, sp, #0
	OS_Counter++;
 8007754:	4b06      	ldr	r3, [pc, #24]	@ (8007770 <vApplicationTickHook+0x20>)
 8007756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800775a:	1c50      	adds	r0, r2, #1
 800775c:	f143 0100 	adc.w	r1, r3, #0
 8007760:	4b03      	ldr	r3, [pc, #12]	@ (8007770 <vApplicationTickHook+0x20>)
 8007762:	e9c3 0100 	strd	r0, r1, [r3]
}
 8007766:	bf00      	nop
 8007768:	46bd      	mov	sp, r7
 800776a:	bc80      	pop	{r7}
 800776c:	4770      	bx	lr
 800776e:	bf00      	nop
 8007770:	20000978 	.word	0x20000978

08007774 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b082      	sub	sp, #8
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
	EcuM_PerformReset(12);
 800777e:	200c      	movs	r0, #12
 8007780:	f7ff fd2e 	bl	80071e0 <EcuM_PerformReset>
}
 8007784:	bf00      	nop
 8007786:	3708      	adds	r7, #8
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	af00      	add	r7, sp, #0
	EcuM_PerformReset(11);
 8007790:	200b      	movs	r0, #11
 8007792:	f7ff fd25 	bl	80071e0 <EcuM_PerformReset>
}
 8007796:	bf00      	nop
 8007798:	bd80      	pop	{r7, pc}
	...

0800779c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800779c:	b580      	push	{r7, lr}
 800779e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of Alarm5ms */
  Alarm5msHandle = osTimerNew(Alarm5ms_Callback, osTimerPeriodic, NULL, &Alarm5ms_attributes);
 80077a0:	4b14      	ldr	r3, [pc, #80]	@ (80077f4 <MX_FREERTOS_Init+0x58>)
 80077a2:	2200      	movs	r2, #0
 80077a4:	2101      	movs	r1, #1
 80077a6:	4814      	ldr	r0, [pc, #80]	@ (80077f8 <MX_FREERTOS_Init+0x5c>)
 80077a8:	f004 fcfa 	bl	800c1a0 <osTimerNew>
 80077ac:	4603      	mov	r3, r0
 80077ae:	4a13      	ldr	r2, [pc, #76]	@ (80077fc <MX_FREERTOS_Init+0x60>)
 80077b0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_QUEUES */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of QM_BSW_OS_TASK */
  QM_BSW_OS_TASKHandle = osThreadNew(QM_BSW, NULL, &QM_BSW_OS_TASK_attributes);
 80077b2:	4a13      	ldr	r2, [pc, #76]	@ (8007800 <MX_FREERTOS_Init+0x64>)
 80077b4:	2100      	movs	r1, #0
 80077b6:	4813      	ldr	r0, [pc, #76]	@ (8007804 <MX_FREERTOS_Init+0x68>)
 80077b8:	f004 fc4a 	bl	800c050 <osThreadNew>
 80077bc:	4603      	mov	r3, r0
 80077be:	4a12      	ldr	r2, [pc, #72]	@ (8007808 <MX_FREERTOS_Init+0x6c>)
 80077c0:	6013      	str	r3, [r2, #0]

  /* creation of QM_APPL_OS_TASK */
  QM_APPL_OS_TASKHandle = osThreadNew(QM_APPL, NULL, &QM_APPL_OS_TASK_attributes);
 80077c2:	4a12      	ldr	r2, [pc, #72]	@ (800780c <MX_FREERTOS_Init+0x70>)
 80077c4:	2100      	movs	r1, #0
 80077c6:	4812      	ldr	r0, [pc, #72]	@ (8007810 <MX_FREERTOS_Init+0x74>)
 80077c8:	f004 fc42 	bl	800c050 <osThreadNew>
 80077cc:	4603      	mov	r3, r0
 80077ce:	4a11      	ldr	r2, [pc, #68]	@ (8007814 <MX_FREERTOS_Init+0x78>)
 80077d0:	6013      	str	r3, [r2, #0]

  /* creation of CPULOAD_OS_TASK */
  CPULOAD_OS_TASKHandle = osThreadNew(CPULOAD, NULL, &CPULOAD_OS_TASK_attributes);
 80077d2:	4a11      	ldr	r2, [pc, #68]	@ (8007818 <MX_FREERTOS_Init+0x7c>)
 80077d4:	2100      	movs	r1, #0
 80077d6:	4811      	ldr	r0, [pc, #68]	@ (800781c <MX_FREERTOS_Init+0x80>)
 80077d8:	f004 fc3a 	bl	800c050 <osThreadNew>
 80077dc:	4603      	mov	r3, r0
 80077de:	4a10      	ldr	r2, [pc, #64]	@ (8007820 <MX_FREERTOS_Init+0x84>)
 80077e0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	osTimerStart(Alarm5msHandle, 5);
 80077e2:	4b06      	ldr	r3, [pc, #24]	@ (80077fc <MX_FREERTOS_Init+0x60>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	2105      	movs	r1, #5
 80077e8:	4618      	mov	r0, r3
 80077ea:	f004 fd55 	bl	800c298 <osTimerStart>
  /* USER CODE END RTOS_EVENTS */

}
 80077ee:	bf00      	nop
 80077f0:	bd80      	pop	{r7, pc}
 80077f2:	bf00      	nop
 80077f4:	0800f5f0 	.word	0x0800f5f0
 80077f8:	080079a1 	.word	0x080079a1
 80077fc:	20000998 	.word	0x20000998
 8007800:	0800f584 	.word	0x0800f584
 8007804:	08007825 	.word	0x08007825
 8007808:	2000098c 	.word	0x2000098c
 800780c:	0800f5a8 	.word	0x0800f5a8
 8007810:	0800784d 	.word	0x0800784d
 8007814:	20000990 	.word	0x20000990
 8007818:	0800f5cc 	.word	0x0800f5cc
 800781c:	0800786d 	.word	0x0800786d
 8007820:	20000994 	.word	0x20000994

08007824 <QM_BSW>:

/* USER CODE BEGIN Header_QM_BSW */
/* USER CODE END Header_QM_BSW */
void QM_BSW(void *argument)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b082      	sub	sp, #8
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN QM_BSW */
	for(;;)
	{
		NvM_MainFunction();
 800782c:	f7ff fbdc 	bl	8006fe8 <NvM_MainFunction>
		CanH_MainFunction();
 8007830:	f7fe f87c 	bl	800592c <CanH_MainFunction>
		Dcm_MainFunction();
 8007834:	f7fe fb52 	bl	8005edc <Dcm_MainFunction>
		Ain_MainFunction();
 8007838:	f7ff fa74 	bl	8006d24 <Ain_MainFunction>
		EcuM_MainFunction();
 800783c:	f7ff fcf2 	bl	8007224 <EcuM_MainFunction>
		vTaskSuspend(NULL); /* suspend task; will be re-activated in OS timer callback. */
 8007840:	2000      	movs	r0, #0
 8007842:	f006 f947 	bl	800dad4 <vTaskSuspend>
		NvM_MainFunction();
 8007846:	bf00      	nop
 8007848:	e7f0      	b.n	800782c <QM_BSW+0x8>
	...

0800784c <QM_APPL>:
}

/* USER CODE BEGIN Header_QM_APPL */
/* USER CODE END Header_QM_APPL */
void QM_APPL(void *argument)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b082      	sub	sp, #8
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN QM_APPL */
	for(;;)
	{
		if(EcuM_State == 1) LoadCtrl_MainFunction(); /* Execute load control only in SW RUN. */
 8007854:	4b04      	ldr	r3, [pc, #16]	@ (8007868 <QM_APPL+0x1c>)
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	2b01      	cmp	r3, #1
 800785a:	d101      	bne.n	8007860 <QM_APPL+0x14>
 800785c:	f7fd f98c 	bl	8004b78 <LoadCtrl_MainFunction>
		else
		{
			/* Do nothing. */
		}
		vTaskSuspend(NULL);
 8007860:	2000      	movs	r0, #0
 8007862:	f006 f937 	bl	800dad4 <vTaskSuspend>
		if(EcuM_State == 1) LoadCtrl_MainFunction(); /* Execute load control only in SW RUN. */
 8007866:	e7f5      	b.n	8007854 <QM_APPL+0x8>
 8007868:	200007a0 	.word	0x200007a0

0800786c <CPULOAD>:
}

/* USER CODE BEGIN Header_CPULOAD */
/* USER CODE END Header_CPULOAD */
void CPULOAD(void *argument)
{
 800786c:	b590      	push	{r4, r7, lr}
 800786e:	b083      	sub	sp, #12
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CPULOAD */
	for(;;)
	{
		localTaskCounter++;
 8007874:	4b3f      	ldr	r3, [pc, #252]	@ (8007974 <CPULOAD+0x108>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	3301      	adds	r3, #1
 800787a:	4a3e      	ldr	r2, [pc, #248]	@ (8007974 <CPULOAD+0x108>)
 800787c:	6013      	str	r3, [r2, #0]
		OS_DeltaIdleRunTime = xTaskStatusArray[OS_IdleIndex].ulRunTimeCounter - OS_IdleRunTime;
 800787e:	4b3e      	ldr	r3, [pc, #248]	@ (8007978 <CPULOAD+0x10c>)
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	4619      	mov	r1, r3
 8007884:	4a3d      	ldr	r2, [pc, #244]	@ (800797c <CPULOAD+0x110>)
 8007886:	460b      	mov	r3, r1
 8007888:	00db      	lsls	r3, r3, #3
 800788a:	440b      	add	r3, r1
 800788c:	009b      	lsls	r3, r3, #2
 800788e:	4413      	add	r3, r2
 8007890:	3318      	adds	r3, #24
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4618      	mov	r0, r3
 8007896:	f7fc ff2f 	bl	80046f8 <__aeabi_ui2f>
 800789a:	4602      	mov	r2, r0
 800789c:	4b38      	ldr	r3, [pc, #224]	@ (8007980 <CPULOAD+0x114>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4619      	mov	r1, r3
 80078a2:	4610      	mov	r0, r2
 80078a4:	f7fc fe76 	bl	8004594 <__aeabi_fsub>
 80078a8:	4603      	mov	r3, r0
 80078aa:	461a      	mov	r2, r3
 80078ac:	4b35      	ldr	r3, [pc, #212]	@ (8007984 <CPULOAD+0x118>)
 80078ae:	601a      	str	r2, [r3, #0]
		if(0 != ulHighFrequencyTimerTicks)
 80078b0:	4b35      	ldr	r3, [pc, #212]	@ (8007988 <CPULOAD+0x11c>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d019      	beq.n	80078ec <CPULOAD+0x80>
		{
			OS_CpuLoad = 100 - (OS_DeltaIdleRunTime / ulHighFrequencyTimerTicks) * 100;
 80078b8:	4b32      	ldr	r3, [pc, #200]	@ (8007984 <CPULOAD+0x118>)
 80078ba:	681c      	ldr	r4, [r3, #0]
 80078bc:	4b32      	ldr	r3, [pc, #200]	@ (8007988 <CPULOAD+0x11c>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4618      	mov	r0, r3
 80078c2:	f7fc ff19 	bl	80046f8 <__aeabi_ui2f>
 80078c6:	4603      	mov	r3, r0
 80078c8:	4619      	mov	r1, r3
 80078ca:	4620      	mov	r0, r4
 80078cc:	f7fd f820 	bl	8004910 <__aeabi_fdiv>
 80078d0:	4603      	mov	r3, r0
 80078d2:	492e      	ldr	r1, [pc, #184]	@ (800798c <CPULOAD+0x120>)
 80078d4:	4618      	mov	r0, r3
 80078d6:	f7fc ff67 	bl	80047a8 <__aeabi_fmul>
 80078da:	4603      	mov	r3, r0
 80078dc:	4619      	mov	r1, r3
 80078de:	482b      	ldr	r0, [pc, #172]	@ (800798c <CPULOAD+0x120>)
 80078e0:	f7fc fe58 	bl	8004594 <__aeabi_fsub>
 80078e4:	4603      	mov	r3, r0
 80078e6:	461a      	mov	r2, r3
 80078e8:	4b29      	ldr	r3, [pc, #164]	@ (8007990 <CPULOAD+0x124>)
 80078ea:	601a      	str	r2, [r3, #0]
		}
		else
		{
			/* Do nothing. */
		}
		OS_AverageCpuLoad += OS_CpuLoad;
 80078ec:	4b29      	ldr	r3, [pc, #164]	@ (8007994 <CPULOAD+0x128>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4618      	mov	r0, r3
 80078f2:	f7fc ff01 	bl	80046f8 <__aeabi_ui2f>
 80078f6:	4602      	mov	r2, r0
 80078f8:	4b25      	ldr	r3, [pc, #148]	@ (8007990 <CPULOAD+0x124>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4619      	mov	r1, r3
 80078fe:	4610      	mov	r0, r2
 8007900:	f7fc fe4a 	bl	8004598 <__addsf3>
 8007904:	4603      	mov	r3, r0
 8007906:	4618      	mov	r0, r3
 8007908:	f7fd f914 	bl	8004b34 <__aeabi_f2uiz>
 800790c:	4603      	mov	r3, r0
 800790e:	4a21      	ldr	r2, [pc, #132]	@ (8007994 <CPULOAD+0x128>)
 8007910:	6013      	str	r3, [r2, #0]
		ulHighFrequencyTimerTicks = 0;
 8007912:	4b1d      	ldr	r3, [pc, #116]	@ (8007988 <CPULOAD+0x11c>)
 8007914:	2200      	movs	r2, #0
 8007916:	601a      	str	r2, [r3, #0]
		OS_IdleRunTime = xTaskStatusArray[OS_IdleIndex].ulRunTimeCounter;
 8007918:	4b17      	ldr	r3, [pc, #92]	@ (8007978 <CPULOAD+0x10c>)
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	4619      	mov	r1, r3
 800791e:	4a17      	ldr	r2, [pc, #92]	@ (800797c <CPULOAD+0x110>)
 8007920:	460b      	mov	r3, r1
 8007922:	00db      	lsls	r3, r3, #3
 8007924:	440b      	add	r3, r1
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	4413      	add	r3, r2
 800792a:	3318      	adds	r3, #24
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4618      	mov	r0, r3
 8007930:	f7fc fee2 	bl	80046f8 <__aeabi_ui2f>
 8007934:	4603      	mov	r3, r0
 8007936:	4a12      	ldr	r2, [pc, #72]	@ (8007980 <CPULOAD+0x114>)
 8007938:	6013      	str	r3, [r2, #0]
		if(localTaskCounter % 12 == 0)
 800793a:	4b0e      	ldr	r3, [pc, #56]	@ (8007974 <CPULOAD+0x108>)
 800793c:	6819      	ldr	r1, [r3, #0]
 800793e:	4b16      	ldr	r3, [pc, #88]	@ (8007998 <CPULOAD+0x12c>)
 8007940:	fba3 2301 	umull	r2, r3, r3, r1
 8007944:	08da      	lsrs	r2, r3, #3
 8007946:	4613      	mov	r3, r2
 8007948:	005b      	lsls	r3, r3, #1
 800794a:	4413      	add	r3, r2
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	1aca      	subs	r2, r1, r3
 8007950:	2a00      	cmp	r2, #0
 8007952:	d10b      	bne.n	800796c <CPULOAD+0x100>
		{
			OS_XCP_CpuLoad = OS_AverageCpuLoad / 12; /* Calculate CPU load value every 480 milliseconds. */
 8007954:	4b0f      	ldr	r3, [pc, #60]	@ (8007994 <CPULOAD+0x128>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a0f      	ldr	r2, [pc, #60]	@ (8007998 <CPULOAD+0x12c>)
 800795a:	fba2 2303 	umull	r2, r3, r2, r3
 800795e:	08db      	lsrs	r3, r3, #3
 8007960:	b2da      	uxtb	r2, r3
 8007962:	4b0e      	ldr	r3, [pc, #56]	@ (800799c <CPULOAD+0x130>)
 8007964:	701a      	strb	r2, [r3, #0]
			OS_AverageCpuLoad = 0;
 8007966:	4b0b      	ldr	r3, [pc, #44]	@ (8007994 <CPULOAD+0x128>)
 8007968:	2200      	movs	r2, #0
 800796a:	601a      	str	r2, [r3, #0]
		}
		else
		{
			/* Do nothing. */
		}
		vTaskSuspend(NULL);
 800796c:	2000      	movs	r0, #0
 800796e:	f006 f8b1 	bl	800dad4 <vTaskSuspend>
		localTaskCounter++;
 8007972:	e77f      	b.n	8007874 <CPULOAD+0x8>
 8007974:	20000970 	.word	0x20000970
 8007978:	200008a0 	.word	0x200008a0
 800797c:	200008b0 	.word	0x200008b0
 8007980:	200008a4 	.word	0x200008a4
 8007984:	200008a8 	.word	0x200008a8
 8007988:	20000988 	.word	0x20000988
 800798c:	42c80000 	.word	0x42c80000
 8007990:	200008ac 	.word	0x200008ac
 8007994:	20000968 	.word	0x20000968
 8007998:	aaaaaaab 	.word	0xaaaaaaab
 800799c:	200008a1 	.word	0x200008a1

080079a0 <Alarm5ms_Callback>:
  /* USER CODE END CPULOAD */
}

/* Alarm5ms_Callback function */
void Alarm5ms_Callback(void *argument)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b082      	sub	sp, #8
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Alarm5ms_Callback */
	static uint32 counter = 0;
	counter++;
 80079a8:	4b10      	ldr	r3, [pc, #64]	@ (80079ec <Alarm5ms_Callback+0x4c>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	3301      	adds	r3, #1
 80079ae:	4a0f      	ldr	r2, [pc, #60]	@ (80079ec <Alarm5ms_Callback+0x4c>)
 80079b0:	6013      	str	r3, [r2, #0]
	vTaskResume(QM_APPL_OS_TASKHandle);
 80079b2:	4b0f      	ldr	r3, [pc, #60]	@ (80079f0 <Alarm5ms_Callback+0x50>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4618      	mov	r0, r3
 80079b8:	f006 f934 	bl	800dc24 <vTaskResume>
	vTaskResume(QM_BSW_OS_TASKHandle); /* I could have used event functionality of FreeRTOS to re-activate tasks. I did that on DMU, but here
 80079bc:	4b0d      	ldr	r3, [pc, #52]	@ (80079f4 <Alarm5ms_Callback+0x54>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4618      	mov	r0, r3
 80079c2:	f006 f92f 	bl	800dc24 <vTaskResume>
	it was not possible, RAM and ROM were scarce (close to 100%). */
	if(counter % 8 == 0 && counter != 0) vTaskResume(CPULOAD_OS_TASKHandle); /* Resources are scarce, must use this approach instead of another OS timer that expires every 40 milliseconds. */
 80079c6:	4b09      	ldr	r3, [pc, #36]	@ (80079ec <Alarm5ms_Callback+0x4c>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f003 0307 	and.w	r3, r3, #7
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d108      	bne.n	80079e4 <Alarm5ms_Callback+0x44>
 80079d2:	4b06      	ldr	r3, [pc, #24]	@ (80079ec <Alarm5ms_Callback+0x4c>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d004      	beq.n	80079e4 <Alarm5ms_Callback+0x44>
 80079da:	4b07      	ldr	r3, [pc, #28]	@ (80079f8 <Alarm5ms_Callback+0x58>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4618      	mov	r0, r3
 80079e0:	f006 f920 	bl	800dc24 <vTaskResume>
	else
	{
		/* Do nothing. */
	}
  /* USER CODE END Alarm5ms_Callback */
}
 80079e4:	bf00      	nop
 80079e6:	3708      	adds	r7, #8
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}
 80079ec:	2000099c 	.word	0x2000099c
 80079f0:	20000990 	.word	0x20000990
 80079f4:	2000098c 	.word	0x2000098c
 80079f8:	20000994 	.word	0x20000994

080079fc <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b088      	sub	sp, #32
 8007a00:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a02:	f107 0310 	add.w	r3, r7, #16
 8007a06:	2200      	movs	r2, #0
 8007a08:	601a      	str	r2, [r3, #0]
 8007a0a:	605a      	str	r2, [r3, #4]
 8007a0c:	609a      	str	r2, [r3, #8]
 8007a0e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007a10:	4b3e      	ldr	r3, [pc, #248]	@ (8007b0c <MX_GPIO_Init+0x110>)
 8007a12:	699b      	ldr	r3, [r3, #24]
 8007a14:	4a3d      	ldr	r2, [pc, #244]	@ (8007b0c <MX_GPIO_Init+0x110>)
 8007a16:	f043 0310 	orr.w	r3, r3, #16
 8007a1a:	6193      	str	r3, [r2, #24]
 8007a1c:	4b3b      	ldr	r3, [pc, #236]	@ (8007b0c <MX_GPIO_Init+0x110>)
 8007a1e:	699b      	ldr	r3, [r3, #24]
 8007a20:	f003 0310 	and.w	r3, r3, #16
 8007a24:	60fb      	str	r3, [r7, #12]
 8007a26:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007a28:	4b38      	ldr	r3, [pc, #224]	@ (8007b0c <MX_GPIO_Init+0x110>)
 8007a2a:	699b      	ldr	r3, [r3, #24]
 8007a2c:	4a37      	ldr	r2, [pc, #220]	@ (8007b0c <MX_GPIO_Init+0x110>)
 8007a2e:	f043 0320 	orr.w	r3, r3, #32
 8007a32:	6193      	str	r3, [r2, #24]
 8007a34:	4b35      	ldr	r3, [pc, #212]	@ (8007b0c <MX_GPIO_Init+0x110>)
 8007a36:	699b      	ldr	r3, [r3, #24]
 8007a38:	f003 0320 	and.w	r3, r3, #32
 8007a3c:	60bb      	str	r3, [r7, #8]
 8007a3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a40:	4b32      	ldr	r3, [pc, #200]	@ (8007b0c <MX_GPIO_Init+0x110>)
 8007a42:	699b      	ldr	r3, [r3, #24]
 8007a44:	4a31      	ldr	r2, [pc, #196]	@ (8007b0c <MX_GPIO_Init+0x110>)
 8007a46:	f043 0304 	orr.w	r3, r3, #4
 8007a4a:	6193      	str	r3, [r2, #24]
 8007a4c:	4b2f      	ldr	r3, [pc, #188]	@ (8007b0c <MX_GPIO_Init+0x110>)
 8007a4e:	699b      	ldr	r3, [r3, #24]
 8007a50:	f003 0304 	and.w	r3, r3, #4
 8007a54:	607b      	str	r3, [r7, #4]
 8007a56:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007a58:	4b2c      	ldr	r3, [pc, #176]	@ (8007b0c <MX_GPIO_Init+0x110>)
 8007a5a:	699b      	ldr	r3, [r3, #24]
 8007a5c:	4a2b      	ldr	r2, [pc, #172]	@ (8007b0c <MX_GPIO_Init+0x110>)
 8007a5e:	f043 0308 	orr.w	r3, r3, #8
 8007a62:	6193      	str	r3, [r2, #24]
 8007a64:	4b29      	ldr	r3, [pc, #164]	@ (8007b0c <MX_GPIO_Init+0x110>)
 8007a66:	699b      	ldr	r3, [r3, #24]
 8007a68:	f003 0308 	and.w	r3, r3, #8
 8007a6c:	603b      	str	r3, [r7, #0]
 8007a6e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RIN1_Pin|RIN2_Pin|RIN3_Pin|RIN4_Pin, GPIO_PIN_SET);
 8007a70:	2201      	movs	r2, #1
 8007a72:	21f0      	movs	r1, #240	@ 0xf0
 8007a74:	4826      	ldr	r0, [pc, #152]	@ (8007b10 <MX_GPIO_Init+0x114>)
 8007a76:	f002 ffa2 	bl	800a9be <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RIN5_Pin|RIN6_Pin|RIN7_Pin|RIN8_Pin, GPIO_PIN_SET);
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f640 4103 	movw	r1, #3075	@ 0xc03
 8007a80:	4824      	ldr	r0, [pc, #144]	@ (8007b14 <MX_GPIO_Init+0x118>)
 8007a82:	f002 ff9c 	bl	800a9be <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8007a86:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8007a8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007a8c:	2303      	movs	r3, #3
 8007a8e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007a90:	f107 0310 	add.w	r3, r7, #16
 8007a94:	4619      	mov	r1, r3
 8007a96:	4820      	ldr	r0, [pc, #128]	@ (8007b18 <MX_GPIO_Init+0x11c>)
 8007a98:	f002 fdf6 	bl	800a688 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA8 PA9 PA10
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8007a9c:	f248 7302 	movw	r3, #34562	@ 0x8702
 8007aa0:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007aa2:	2303      	movs	r3, #3
 8007aa4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007aa6:	f107 0310 	add.w	r3, r7, #16
 8007aaa:	4619      	mov	r1, r3
 8007aac:	4818      	ldr	r0, [pc, #96]	@ (8007b10 <MX_GPIO_Init+0x114>)
 8007aae:	f002 fdeb 	bl	800a688 <HAL_GPIO_Init>

  /*Configure GPIO pins : RIN1_Pin RIN2_Pin RIN3_Pin RIN4_Pin */
  GPIO_InitStruct.Pin = RIN1_Pin|RIN2_Pin|RIN3_Pin|RIN4_Pin;
 8007ab2:	23f0      	movs	r3, #240	@ 0xf0
 8007ab4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007aba:	2301      	movs	r3, #1
 8007abc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007abe:	2303      	movs	r3, #3
 8007ac0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ac2:	f107 0310 	add.w	r3, r7, #16
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	4811      	ldr	r0, [pc, #68]	@ (8007b10 <MX_GPIO_Init+0x114>)
 8007aca:	f002 fddd 	bl	800a688 <HAL_GPIO_Init>

  /*Configure GPIO pins : RIN5_Pin RIN6_Pin RIN7_Pin RIN8_Pin */
  GPIO_InitStruct.Pin = RIN5_Pin|RIN6_Pin|RIN7_Pin|RIN8_Pin;
 8007ace:	f640 4303 	movw	r3, #3075	@ 0xc03
 8007ad2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007adc:	2303      	movs	r3, #3
 8007ade:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007ae0:	f107 0310 	add.w	r3, r7, #16
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	480b      	ldr	r0, [pc, #44]	@ (8007b14 <MX_GPIO_Init+0x118>)
 8007ae8:	f002 fdce 	bl	800a688 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8007aec:	f24f 33fc 	movw	r3, #62460	@ 0xf3fc
 8007af0:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007af2:	2303      	movs	r3, #3
 8007af4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007af6:	f107 0310 	add.w	r3, r7, #16
 8007afa:	4619      	mov	r1, r3
 8007afc:	4805      	ldr	r0, [pc, #20]	@ (8007b14 <MX_GPIO_Init+0x118>)
 8007afe:	f002 fdc3 	bl	800a688 <HAL_GPIO_Init>

}
 8007b02:	bf00      	nop
 8007b04:	3720      	adds	r7, #32
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	bf00      	nop
 8007b0c:	40021000 	.word	0x40021000
 8007b10:	40010800 	.word	0x40010800
 8007b14:	40010c00 	.word	0x40010c00
 8007b18:	40011000 	.word	0x40011000

08007b1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007b20:	f000 fb3e 	bl	80081a0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007b24:	f000 f819 	bl	8007b5a <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007b28:	f7ff ff68 	bl	80079fc <MX_GPIO_Init>
  MX_DMA_Init();
 8007b2c:	f7ff fdc4 	bl	80076b8 <MX_DMA_Init>
  MX_ADC1_Init();
 8007b30:	f7ff fbee 	bl	8007310 <MX_ADC1_Init>
  MX_CAN_Init();
 8007b34:	f7ff fcc8 	bl	80074c8 <MX_CAN_Init>
  MX_TIM3_Init();
 8007b38:	f000 fa18 	bl	8007f6c <MX_TIM3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8007b3c:	f000 f868 	bl	8007c10 <MX_NVIC_Init>
  __ASM volatile ("cpsie i" : : : "memory");
 8007b40:	b662      	cpsie	i
}
 8007b42:	bf00      	nop
  /* USER CODE BEGIN 2 */
	__enable_irq(); // manually enable interrupts, because they had to be disabled in FBL for some unknow reason... stm32f103c8t6 things...
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8007b44:	f004 fa3c 	bl	800bfc0 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8007b48:	f7ff fe28 	bl	800779c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8007b4c:	f004 fa5a 	bl	800c004 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	EcuM_PerformReset(1);
 8007b50:	2001      	movs	r0, #1
 8007b52:	f7ff fb45 	bl	80071e0 <EcuM_PerformReset>
	while (1)
 8007b56:	bf00      	nop
 8007b58:	e7fd      	b.n	8007b56 <main+0x3a>

08007b5a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007b5a:	b580      	push	{r7, lr}
 8007b5c:	b094      	sub	sp, #80	@ 0x50
 8007b5e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007b60:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007b64:	2228      	movs	r2, #40	@ 0x28
 8007b66:	2100      	movs	r1, #0
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f007 fbe9 	bl	800f340 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007b6e:	f107 0314 	add.w	r3, r7, #20
 8007b72:	2200      	movs	r2, #0
 8007b74:	601a      	str	r2, [r3, #0]
 8007b76:	605a      	str	r2, [r3, #4]
 8007b78:	609a      	str	r2, [r3, #8]
 8007b7a:	60da      	str	r2, [r3, #12]
 8007b7c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007b7e:	1d3b      	adds	r3, r7, #4
 8007b80:	2200      	movs	r2, #0
 8007b82:	601a      	str	r2, [r3, #0]
 8007b84:	605a      	str	r2, [r3, #4]
 8007b86:	609a      	str	r2, [r3, #8]
 8007b88:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007b8e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007b94:	2300      	movs	r3, #0
 8007b96:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007b9c:	2302      	movs	r3, #2
 8007b9e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007ba0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007ba4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007ba6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8007baa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007bac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f002 ff69 	bl	800aa88 <HAL_RCC_OscConfig>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d001      	beq.n	8007bc0 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8007bbc:	f000 f883 	bl	8007cc6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007bc0:	230f      	movs	r3, #15
 8007bc2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007bc4:	2302      	movs	r3, #2
 8007bc6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007bcc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007bd0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007bd6:	f107 0314 	add.w	r3, r7, #20
 8007bda:	2102      	movs	r1, #2
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f003 f9d5 	bl	800af8c <HAL_RCC_ClockConfig>
 8007be2:	4603      	mov	r3, r0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d001      	beq.n	8007bec <SystemClock_Config+0x92>
  {
    Error_Handler();
 8007be8:	f000 f86d 	bl	8007cc6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8007bec:	2302      	movs	r3, #2
 8007bee:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8007bf0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007bf4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007bf6:	1d3b      	adds	r3, r7, #4
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f003 fb85 	bl	800b308 <HAL_RCCEx_PeriphCLKConfig>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d001      	beq.n	8007c08 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8007c04:	f000 f85f 	bl	8007cc6 <Error_Handler>
  }
}
 8007c08:	bf00      	nop
 8007c0a:	3750      	adds	r7, #80	@ 0x50
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	af00      	add	r7, sp, #0
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8007c14:	2200      	movs	r2, #0
 8007c16:	2101      	movs	r1, #1
 8007c18:	201d      	movs	r0, #29
 8007c1a:	f002 f820 	bl	8009c5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8007c1e:	201d      	movs	r0, #29
 8007c20:	f002 f839 	bl	8009c96 <HAL_NVIC_EnableIRQ>
  /* CAN1_SCE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 1, 0);
 8007c24:	2200      	movs	r2, #0
 8007c26:	2101      	movs	r1, #1
 8007c28:	2016      	movs	r0, #22
 8007c2a:	f002 f818 	bl	8009c5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8007c2e:	2016      	movs	r0, #22
 8007c30:	f002 f831 	bl	8009c96 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8007c34:	2200      	movs	r2, #0
 8007c36:	2102      	movs	r1, #2
 8007c38:	200b      	movs	r0, #11
 8007c3a:	f002 f810 	bl	8009c5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8007c3e:	200b      	movs	r0, #11
 8007c40:	f002 f829 	bl	8009c96 <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 4, 0);
 8007c44:	2200      	movs	r2, #0
 8007c46:	2104      	movs	r1, #4
 8007c48:	2004      	movs	r0, #4
 8007c4a:	f002 f808 	bl	8009c5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8007c4e:	2004      	movs	r0, #4
 8007c50:	f002 f821 	bl	8009c96 <HAL_NVIC_EnableIRQ>
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 4, 0);
 8007c54:	2200      	movs	r2, #0
 8007c56:	2104      	movs	r1, #4
 8007c58:	2001      	movs	r0, #1
 8007c5a:	f002 f800 	bl	8009c5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8007c5e:	2001      	movs	r0, #1
 8007c60:	f002 f819 	bl	8009c96 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 1, 0);
 8007c64:	2200      	movs	r2, #0
 8007c66:	2101      	movs	r1, #1
 8007c68:	2005      	movs	r0, #5
 8007c6a:	f001 fff8 	bl	8009c5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8007c6e:	2005      	movs	r0, #5
 8007c70:	f002 f811 	bl	8009c96 <HAL_NVIC_EnableIRQ>
  /* USB_LP_CAN1_RX0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 1, 0);
 8007c74:	2200      	movs	r2, #0
 8007c76:	2101      	movs	r1, #1
 8007c78:	2014      	movs	r0, #20
 8007c7a:	f001 fff0 	bl	8009c5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007c7e:	2014      	movs	r0, #20
 8007c80:	f002 f809 	bl	8009c96 <HAL_NVIC_EnableIRQ>
  /* USB_HP_CAN1_TX_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 1, 0);
 8007c84:	2200      	movs	r2, #0
 8007c86:	2101      	movs	r1, #1
 8007c88:	2013      	movs	r0, #19
 8007c8a:	f001 ffe8 	bl	8009c5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8007c8e:	2013      	movs	r0, #19
 8007c90:	f002 f801 	bl	8009c96 <HAL_NVIC_EnableIRQ>
  /* CAN1_RX1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 1, 0);
 8007c94:	2200      	movs	r2, #0
 8007c96:	2101      	movs	r1, #1
 8007c98:	2015      	movs	r0, #21
 8007c9a:	f001 ffe0 	bl	8009c5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8007c9e:	2015      	movs	r0, #21
 8007ca0:	f001 fff9 	bl	8009c96 <HAL_NVIC_EnableIRQ>
}
 8007ca4:	bf00      	nop
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cb8:	d101      	bne.n	8007cbe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8007cba:	f000 fa87 	bl	80081cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 8007cbe:	bf00      	nop
 8007cc0:	3708      	adds	r7, #8
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}

08007cc6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	EcuM_PerformReset(7);
 8007cca:	2007      	movs	r0, #7
 8007ccc:	f7ff fa88 	bl	80071e0 <EcuM_PerformReset>
  /* USER CODE END Error_Handler_Debug */
}
 8007cd0:	bf00      	nop
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */
  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8007cda:	4b18      	ldr	r3, [pc, #96]	@ (8007d3c <HAL_MspInit+0x68>)
 8007cdc:	699b      	ldr	r3, [r3, #24]
 8007cde:	4a17      	ldr	r2, [pc, #92]	@ (8007d3c <HAL_MspInit+0x68>)
 8007ce0:	f043 0301 	orr.w	r3, r3, #1
 8007ce4:	6193      	str	r3, [r2, #24]
 8007ce6:	4b15      	ldr	r3, [pc, #84]	@ (8007d3c <HAL_MspInit+0x68>)
 8007ce8:	699b      	ldr	r3, [r3, #24]
 8007cea:	f003 0301 	and.w	r3, r3, #1
 8007cee:	60bb      	str	r3, [r7, #8]
 8007cf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007cf2:	4b12      	ldr	r3, [pc, #72]	@ (8007d3c <HAL_MspInit+0x68>)
 8007cf4:	69db      	ldr	r3, [r3, #28]
 8007cf6:	4a11      	ldr	r2, [pc, #68]	@ (8007d3c <HAL_MspInit+0x68>)
 8007cf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007cfc:	61d3      	str	r3, [r2, #28]
 8007cfe:	4b0f      	ldr	r3, [pc, #60]	@ (8007d3c <HAL_MspInit+0x68>)
 8007d00:	69db      	ldr	r3, [r3, #28]
 8007d02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d06:	607b      	str	r3, [r7, #4]
 8007d08:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	210f      	movs	r1, #15
 8007d0e:	f06f 0001 	mvn.w	r0, #1
 8007d12:	f001 ffa4 	bl	8009c5e <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8007d16:	4b0a      	ldr	r3, [pc, #40]	@ (8007d40 <HAL_MspInit+0x6c>)
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	60fb      	str	r3, [r7, #12]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8007d22:	60fb      	str	r3, [r7, #12]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007d2a:	60fb      	str	r3, [r7, #12]
 8007d2c:	4a04      	ldr	r2, [pc, #16]	@ (8007d40 <HAL_MspInit+0x6c>)
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */
  /* USER CODE END MspInit 1 */
}
 8007d32:	bf00      	nop
 8007d34:	3710      	adds	r7, #16
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
 8007d3a:	bf00      	nop
 8007d3c:	40021000 	.word	0x40021000
 8007d40:	40010000 	.word	0x40010000

08007d44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b08e      	sub	sp, #56	@ 0x38
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8007d50:	2300      	movs	r3, #0
 8007d52:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8007d54:	2300      	movs	r3, #0
 8007d56:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8007d5a:	4b34      	ldr	r3, [pc, #208]	@ (8007e2c <HAL_InitTick+0xe8>)
 8007d5c:	69db      	ldr	r3, [r3, #28]
 8007d5e:	4a33      	ldr	r2, [pc, #204]	@ (8007e2c <HAL_InitTick+0xe8>)
 8007d60:	f043 0301 	orr.w	r3, r3, #1
 8007d64:	61d3      	str	r3, [r2, #28]
 8007d66:	4b31      	ldr	r3, [pc, #196]	@ (8007e2c <HAL_InitTick+0xe8>)
 8007d68:	69db      	ldr	r3, [r3, #28]
 8007d6a:	f003 0301 	and.w	r3, r3, #1
 8007d6e:	60fb      	str	r3, [r7, #12]
 8007d70:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007d72:	f107 0210 	add.w	r2, r7, #16
 8007d76:	f107 0314 	add.w	r3, r7, #20
 8007d7a:	4611      	mov	r1, r2
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f003 fa75 	bl	800b26c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8007d82:	6a3b      	ldr	r3, [r7, #32]
 8007d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8007d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d103      	bne.n	8007d94 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8007d8c:	f003 fa46 	bl	800b21c <HAL_RCC_GetPCLK1Freq>
 8007d90:	6378      	str	r0, [r7, #52]	@ 0x34
 8007d92:	e004      	b.n	8007d9e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8007d94:	f003 fa42 	bl	800b21c <HAL_RCC_GetPCLK1Freq>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	005b      	lsls	r3, r3, #1
 8007d9c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8007d9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007da0:	4a23      	ldr	r2, [pc, #140]	@ (8007e30 <HAL_InitTick+0xec>)
 8007da2:	fba2 2303 	umull	r2, r3, r2, r3
 8007da6:	0c9b      	lsrs	r3, r3, #18
 8007da8:	3b01      	subs	r3, #1
 8007daa:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8007dac:	4b21      	ldr	r3, [pc, #132]	@ (8007e34 <HAL_InitTick+0xf0>)
 8007dae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007db2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8007db4:	4b1f      	ldr	r3, [pc, #124]	@ (8007e34 <HAL_InitTick+0xf0>)
 8007db6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8007dba:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8007dbc:	4a1d      	ldr	r2, [pc, #116]	@ (8007e34 <HAL_InitTick+0xf0>)
 8007dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dc0:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8007dc2:	4b1c      	ldr	r3, [pc, #112]	@ (8007e34 <HAL_InitTick+0xf0>)
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007dc8:	4b1a      	ldr	r3, [pc, #104]	@ (8007e34 <HAL_InitTick+0xf0>)
 8007dca:	2200      	movs	r2, #0
 8007dcc:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007dce:	4b19      	ldr	r3, [pc, #100]	@ (8007e34 <HAL_InitTick+0xf0>)
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8007dd4:	4817      	ldr	r0, [pc, #92]	@ (8007e34 <HAL_InitTick+0xf0>)
 8007dd6:	f003 fc03 	bl	800b5e0 <HAL_TIM_Base_Init>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8007de0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d11b      	bne.n	8007e20 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8007de8:	4812      	ldr	r0, [pc, #72]	@ (8007e34 <HAL_InitTick+0xf0>)
 8007dea:	f003 fc55 	bl	800b698 <HAL_TIM_Base_Start_IT>
 8007dee:	4603      	mov	r3, r0
 8007df0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8007df4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d111      	bne.n	8007e20 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007dfc:	201c      	movs	r0, #28
 8007dfe:	f001 ff4a 	bl	8009c96 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2b0f      	cmp	r3, #15
 8007e06:	d808      	bhi.n	8007e1a <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8007e08:	2200      	movs	r2, #0
 8007e0a:	6879      	ldr	r1, [r7, #4]
 8007e0c:	201c      	movs	r0, #28
 8007e0e:	f001 ff26 	bl	8009c5e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007e12:	4a09      	ldr	r2, [pc, #36]	@ (8007e38 <HAL_InitTick+0xf4>)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6013      	str	r3, [r2, #0]
 8007e18:	e002      	b.n	8007e20 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8007e20:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3738      	adds	r7, #56	@ 0x38
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}
 8007e2c:	40021000 	.word	0x40021000
 8007e30:	431bde83 	.word	0x431bde83
 8007e34:	200009a0 	.word	0x200009a0
 8007e38:	20000024 	.word	0x20000024

08007e3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	EcuM_PerformReset(2);
 8007e40:	2002      	movs	r0, #2
 8007e42:	f7ff f9cd 	bl	80071e0 <EcuM_PerformReset>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007e46:	bf00      	nop
 8007e48:	e7fd      	b.n	8007e46 <NMI_Handler+0xa>

08007e4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007e4a:	b580      	push	{r7, lr}
 8007e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	EcuM_PerformReset(3);
 8007e4e:	2003      	movs	r0, #3
 8007e50:	f7ff f9c6 	bl	80071e0 <EcuM_PerformReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007e54:	bf00      	nop
 8007e56:	e7fd      	b.n	8007e54 <HardFault_Handler+0xa>

08007e58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	EcuM_PerformReset(4);
 8007e5c:	2004      	movs	r0, #4
 8007e5e:	f7ff f9bf 	bl	80071e0 <EcuM_PerformReset>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007e62:	bf00      	nop
 8007e64:	e7fd      	b.n	8007e62 <MemManage_Handler+0xa>

08007e66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007e66:	b580      	push	{r7, lr}
 8007e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	EcuM_PerformReset(5);
 8007e6a:	2005      	movs	r0, #5
 8007e6c:	f7ff f9b8 	bl	80071e0 <EcuM_PerformReset>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007e70:	bf00      	nop
 8007e72:	e7fd      	b.n	8007e70 <BusFault_Handler+0xa>

08007e74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	EcuM_PerformReset(6);
 8007e78:	2006      	movs	r0, #6
 8007e7a:	f7ff f9b1 	bl	80071e0 <EcuM_PerformReset>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007e7e:	bf00      	nop
 8007e80:	e7fd      	b.n	8007e7e <UsageFault_Handler+0xa>

08007e82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007e82:	b480      	push	{r7}
 8007e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */
  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007e86:	bf00      	nop
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bc80      	pop	{r7}
 8007e8c:	4770      	bx	lr

08007e8e <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8007e8e:	b580      	push	{r7, lr}
 8007e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */
  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8007e92:	f002 fde1 	bl	800aa58 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */
  /* USER CODE END PVD_IRQn 1 */
}
 8007e96:	bf00      	nop
 8007e98:	bd80      	pop	{r7, pc}

08007e9a <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8007e9a:	b580      	push	{r7, lr}
 8007e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */
  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8007e9e:	f002 f967 	bl	800a170 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */
  /* USER CODE END FLASH_IRQn 1 */
}
 8007ea2:	bf00      	nop
 8007ea4:	bd80      	pop	{r7, pc}

08007ea6 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8007ea6:	b480      	push	{r7}
 8007ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RCC_IRQn 0 */
  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */
  /* USER CODE END RCC_IRQn 1 */
}
 8007eaa:	bf00      	nop
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bc80      	pop	{r7}
 8007eb0:	4770      	bx	lr
	...

08007eb4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007eb8:	4802      	ldr	r0, [pc, #8]	@ (8007ec4 <DMA1_Channel1_IRQHandler+0x10>)
 8007eba:	f001 ffb5 	bl	8009e28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8007ebe:	bf00      	nop
 8007ec0:	bd80      	pop	{r7, pc}
 8007ec2:	bf00      	nop
 8007ec4:	200007f4 	.word	0x200007f4

08007ec8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */
  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8007ecc:	4802      	ldr	r0, [pc, #8]	@ (8007ed8 <ADC1_2_IRQHandler+0x10>)
 8007ece:	f000 fb97 	bl	8008600 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */
  /* USER CODE END ADC1_2_IRQn 1 */
}
 8007ed2:	bf00      	nop
 8007ed4:	bd80      	pop	{r7, pc}
 8007ed6:	bf00      	nop
 8007ed8:	200007a8 	.word	0x200007a8

08007edc <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */
  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8007ee0:	4802      	ldr	r0, [pc, #8]	@ (8007eec <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8007ee2:	f001 fbca 	bl	800967a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */
  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8007ee6:	bf00      	nop
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	bf00      	nop
 8007eec:	20000838 	.word	0x20000838

08007ef0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */
  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8007ef4:	4802      	ldr	r0, [pc, #8]	@ (8007f00 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8007ef6:	f001 fbc0 	bl	800967a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */
  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8007efa:	bf00      	nop
 8007efc:	bd80      	pop	{r7, pc}
 8007efe:	bf00      	nop
 8007f00:	20000838 	.word	0x20000838

08007f04 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */
  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8007f08:	4802      	ldr	r0, [pc, #8]	@ (8007f14 <CAN1_RX1_IRQHandler+0x10>)
 8007f0a:	f001 fbb6 	bl	800967a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */
  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8007f0e:	bf00      	nop
 8007f10:	bd80      	pop	{r7, pc}
 8007f12:	bf00      	nop
 8007f14:	20000838 	.word	0x20000838

08007f18 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */
  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8007f1c:	4802      	ldr	r0, [pc, #8]	@ (8007f28 <CAN1_SCE_IRQHandler+0x10>)
 8007f1e:	f001 fbac 	bl	800967a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */
  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8007f22:	bf00      	nop
 8007f24:	bd80      	pop	{r7, pc}
 8007f26:	bf00      	nop
 8007f28:	20000838 	.word	0x20000838

08007f2c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007f30:	4802      	ldr	r0, [pc, #8]	@ (8007f3c <TIM2_IRQHandler+0x10>)
 8007f32:	f003 fc03 	bl	800b73c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  /* USER CODE END TIM2_IRQn 1 */
}
 8007f36:	bf00      	nop
 8007f38:	bd80      	pop	{r7, pc}
 8007f3a:	bf00      	nop
 8007f3c:	200009a0 	.word	0x200009a0

08007f40 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	ulHighFrequencyTimerTicks++;
 8007f44:	4b04      	ldr	r3, [pc, #16]	@ (8007f58 <TIM3_IRQHandler+0x18>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	3301      	adds	r3, #1
 8007f4a:	4a03      	ldr	r2, [pc, #12]	@ (8007f58 <TIM3_IRQHandler+0x18>)
 8007f4c:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8007f4e:	4803      	ldr	r0, [pc, #12]	@ (8007f5c <TIM3_IRQHandler+0x1c>)
 8007f50:	f003 fbf4 	bl	800b73c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  /* USER CODE END TIM3_IRQn 1 */
}
 8007f54:	bf00      	nop
 8007f56:	bd80      	pop	{r7, pc}
 8007f58:	20000988 	.word	0x20000988
 8007f5c:	20000a54 	.word	0x20000a54

08007f60 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007f60:	b480      	push	{r7}
 8007f62:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007f64:	bf00      	nop
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bc80      	pop	{r7}
 8007f6a:	4770      	bx	lr

08007f6c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b086      	sub	sp, #24
 8007f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */
  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007f72:	f107 0308 	add.w	r3, r7, #8
 8007f76:	2200      	movs	r2, #0
 8007f78:	601a      	str	r2, [r3, #0]
 8007f7a:	605a      	str	r2, [r3, #4]
 8007f7c:	609a      	str	r2, [r3, #8]
 8007f7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007f80:	463b      	mov	r3, r7
 8007f82:	2200      	movs	r2, #0
 8007f84:	601a      	str	r2, [r3, #0]
 8007f86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8007f88:	4b1d      	ldr	r3, [pc, #116]	@ (8008000 <MX_TIM3_Init+0x94>)
 8007f8a:	4a1e      	ldr	r2, [pc, #120]	@ (8008004 <MX_TIM3_Init+0x98>)
 8007f8c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8007f8e:	4b1c      	ldr	r3, [pc, #112]	@ (8008000 <MX_TIM3_Init+0x94>)
 8007f90:	2263      	movs	r2, #99	@ 0x63
 8007f92:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007f94:	4b1a      	ldr	r3, [pc, #104]	@ (8008000 <MX_TIM3_Init+0x94>)
 8007f96:	2200      	movs	r2, #0
 8007f98:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8007f9a:	4b19      	ldr	r3, [pc, #100]	@ (8008000 <MX_TIM3_Init+0x94>)
 8007f9c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8007fa0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007fa2:	4b17      	ldr	r3, [pc, #92]	@ (8008000 <MX_TIM3_Init+0x94>)
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007fa8:	4b15      	ldr	r3, [pc, #84]	@ (8008000 <MX_TIM3_Init+0x94>)
 8007faa:	2200      	movs	r2, #0
 8007fac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8007fae:	4814      	ldr	r0, [pc, #80]	@ (8008000 <MX_TIM3_Init+0x94>)
 8007fb0:	f003 fb16 	bl	800b5e0 <HAL_TIM_Base_Init>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d001      	beq.n	8007fbe <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8007fba:	f7ff fe84 	bl	8007cc6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007fbe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007fc2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8007fc4:	f107 0308 	add.w	r3, r7, #8
 8007fc8:	4619      	mov	r1, r3
 8007fca:	480d      	ldr	r0, [pc, #52]	@ (8008000 <MX_TIM3_Init+0x94>)
 8007fcc:	f003 fcc6 	bl	800b95c <HAL_TIM_ConfigClockSource>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d001      	beq.n	8007fda <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8007fd6:	f7ff fe76 	bl	8007cc6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007fe2:	463b      	mov	r3, r7
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	4806      	ldr	r0, [pc, #24]	@ (8008000 <MX_TIM3_Init+0x94>)
 8007fe8:	f003 ff2c 	bl	800be44 <HAL_TIMEx_MasterConfigSynchronization>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d001      	beq.n	8007ff6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8007ff2:	f7ff fe68 	bl	8007cc6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  /* USER CODE END TIM3_Init 2 */

}
 8007ff6:	bf00      	nop
 8007ff8:	3718      	adds	r7, #24
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
 8007ffe:	bf00      	nop
 8008000:	20000a54 	.word	0x20000a54
 8008004:	40000400 	.word	0x40000400

08008008 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008008:	b480      	push	{r7}
 800800a:	b085      	sub	sp, #20
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a09      	ldr	r2, [pc, #36]	@ (800803c <HAL_TIM_Base_MspInit+0x34>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d10b      	bne.n	8008032 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */
  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800801a:	4b09      	ldr	r3, [pc, #36]	@ (8008040 <HAL_TIM_Base_MspInit+0x38>)
 800801c:	69db      	ldr	r3, [r3, #28]
 800801e:	4a08      	ldr	r2, [pc, #32]	@ (8008040 <HAL_TIM_Base_MspInit+0x38>)
 8008020:	f043 0302 	orr.w	r3, r3, #2
 8008024:	61d3      	str	r3, [r2, #28]
 8008026:	4b06      	ldr	r3, [pc, #24]	@ (8008040 <HAL_TIM_Base_MspInit+0x38>)
 8008028:	69db      	ldr	r3, [r3, #28]
 800802a:	f003 0302 	and.w	r3, r3, #2
 800802e:	60fb      	str	r3, [r7, #12]
 8008030:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */
  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8008032:	bf00      	nop
 8008034:	3714      	adds	r7, #20
 8008036:	46bd      	mov	sp, r7
 8008038:	bc80      	pop	{r7}
 800803a:	4770      	bx	lr
 800803c:	40000400 	.word	0x40000400
 8008040:	40021000 	.word	0x40021000

08008044 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8008044:	f7ff ff8c 	bl	8007f60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008048:	480b      	ldr	r0, [pc, #44]	@ (8008078 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800804a:	490c      	ldr	r1, [pc, #48]	@ (800807c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800804c:	4a0c      	ldr	r2, [pc, #48]	@ (8008080 <LoopFillZerobss+0x16>)
  movs r3, #0
 800804e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008050:	e002      	b.n	8008058 <LoopCopyDataInit>

08008052 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008052:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008054:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008056:	3304      	adds	r3, #4

08008058 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008058:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800805a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800805c:	d3f9      	bcc.n	8008052 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800805e:	4a09      	ldr	r2, [pc, #36]	@ (8008084 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8008060:	4c09      	ldr	r4, [pc, #36]	@ (8008088 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8008062:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008064:	e001      	b.n	800806a <LoopFillZerobss>

08008066 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008066:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008068:	3204      	adds	r2, #4

0800806a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800806a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800806c:	d3fb      	bcc.n	8008066 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800806e:	f007 f9c5 	bl	800f3fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008072:	f7ff fd53 	bl	8007b1c <main>
  bx lr
 8008076:	4770      	bx	lr
  ldr r0, =_sdata
 8008078:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800807c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8008080:	0800f648 	.word	0x0800f648
  ldr r2, =_sbss
 8008084:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8008088:	20004158 	.word	0x20004158

0800808c <DMA1_Channel2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800808c:	e7fe      	b.n	800808c <DMA1_Channel2_IRQHandler>

0800808e <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 800808e:	b580      	push	{r7, lr}
 8008090:	b084      	sub	sp, #16
 8008092:	af00      	add	r7, sp, #0
 8008094:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d105      	bne.n	80080a8 <stm32_lock_acquire+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 800809c:	b672      	cpsid	i
}
 800809e:	bf00      	nop
 80080a0:	f7ff fe11 	bl	8007cc6 <Error_Handler>
 80080a4:	bf00      	nop
 80080a6:	e7fd      	b.n	80080a4 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	7a1b      	ldrb	r3, [r3, #8]
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d905      	bls.n	80080bc <stm32_lock_acquire+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 80080b0:	b672      	cpsid	i
}
 80080b2:	bf00      	nop
 80080b4:	f7ff fe07 	bl	8007cc6 <Error_Handler>
 80080b8:	bf00      	nop
 80080ba:	e7fd      	b.n	80080b8 <stm32_lock_acquire+0x2a>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	7a1b      	ldrb	r3, [r3, #8]
 80080c0:	1c5a      	adds	r2, r3, #1
 80080c2:	b2d1      	uxtb	r1, r2
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	7211      	strb	r1, [r2, #8]
 80080c8:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80080ca:	f3ef 8211 	mrs	r2, BASEPRI
 80080ce:	f04f 0310 	mov.w	r3, #16
 80080d2:	f383 8811 	msr	BASEPRI, r3
 80080d6:	f3bf 8f6f 	isb	sy
 80080da:	f3bf 8f4f 	dsb	sy
 80080de:	60fa      	str	r2, [r7, #12]
 80080e0:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80080e2:	68fa      	ldr	r2, [r7, #12]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 80080ea:	bf00      	nop
 80080ec:	3710      	adds	r7, #16
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b084      	sub	sp, #16
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d105      	bne.n	800810c <stm32_lock_release+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8008100:	b672      	cpsid	i
}
 8008102:	bf00      	nop
 8008104:	f7ff fddf 	bl	8007cc6 <Error_Handler>
 8008108:	bf00      	nop
 800810a:	e7fd      	b.n	8008108 <stm32_lock_release+0x16>
  lock->nesting_level--;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	7a1b      	ldrb	r3, [r3, #8]
 8008110:	3b01      	subs	r3, #1
 8008112:	b2da      	uxtb	r2, r3
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	7a1b      	ldrb	r3, [r3, #8]
 800811c:	2b01      	cmp	r3, #1
 800811e:	d905      	bls.n	800812c <stm32_lock_release+0x3a>
  __ASM volatile ("cpsid i" : : : "memory");
 8008120:	b672      	cpsid	i
}
 8008122:	bf00      	nop
 8008124:	f7ff fdcf 	bl	8007cc6 <Error_Handler>
 8008128:	bf00      	nop
 800812a:	e7fd      	b.n	8008128 <stm32_lock_release+0x36>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	7a1b      	ldrb	r3, [r3, #8]
 8008130:	461a      	mov	r2, r3
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008138:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008140:	bf00      	nop
}
 8008142:	bf00      	nop
 8008144:	3710      	adds	r7, #16
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}

0800814a <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 800814a:	b580      	push	{r7, lr}
 800814c:	b082      	sub	sp, #8
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d105      	bne.n	8008164 <__retarget_lock_acquire_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8008158:	b672      	cpsid	i
}
 800815a:	bf00      	nop
 800815c:	f7ff fdb3 	bl	8007cc6 <Error_Handler>
 8008160:	bf00      	nop
 8008162:	e7fd      	b.n	8008160 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	4618      	mov	r0, r3
 8008168:	f7ff ff91 	bl	800808e <stm32_lock_acquire>
}
 800816c:	bf00      	nop
 800816e:	3708      	adds	r7, #8
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b082      	sub	sp, #8
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d105      	bne.n	800818e <__retarget_lock_release_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8008182:	b672      	cpsid	i
}
 8008184:	bf00      	nop
 8008186:	f7ff fd9e 	bl	8007cc6 <Error_Handler>
 800818a:	bf00      	nop
 800818c:	e7fd      	b.n	800818a <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	4618      	mov	r0, r3
 8008192:	f7ff ffae 	bl	80080f2 <stm32_lock_release>
}
 8008196:	bf00      	nop
 8008198:	3708      	adds	r7, #8
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
	...

080081a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80081a4:	4b08      	ldr	r3, [pc, #32]	@ (80081c8 <HAL_Init+0x28>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a07      	ldr	r2, [pc, #28]	@ (80081c8 <HAL_Init+0x28>)
 80081aa:	f043 0310 	orr.w	r3, r3, #16
 80081ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80081b0:	2003      	movs	r0, #3
 80081b2:	f001 fd49 	bl	8009c48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80081b6:	200f      	movs	r0, #15
 80081b8:	f7ff fdc4 	bl	8007d44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80081bc:	f7ff fd8a 	bl	8007cd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80081c0:	2300      	movs	r3, #0
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	bf00      	nop
 80081c8:	40022000 	.word	0x40022000

080081cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80081cc:	b480      	push	{r7}
 80081ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80081d0:	4b05      	ldr	r3, [pc, #20]	@ (80081e8 <HAL_IncTick+0x1c>)
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	461a      	mov	r2, r3
 80081d6:	4b05      	ldr	r3, [pc, #20]	@ (80081ec <HAL_IncTick+0x20>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4413      	add	r3, r2
 80081dc:	4a03      	ldr	r2, [pc, #12]	@ (80081ec <HAL_IncTick+0x20>)
 80081de:	6013      	str	r3, [r2, #0]
}
 80081e0:	bf00      	nop
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bc80      	pop	{r7}
 80081e6:	4770      	bx	lr
 80081e8:	20000028 	.word	0x20000028
 80081ec:	20000b14 	.word	0x20000b14

080081f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80081f0:	b480      	push	{r7}
 80081f2:	af00      	add	r7, sp, #0
  return uwTick;
 80081f4:	4b02      	ldr	r3, [pc, #8]	@ (8008200 <HAL_GetTick+0x10>)
 80081f6:	681b      	ldr	r3, [r3, #0]
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bc80      	pop	{r7}
 80081fe:	4770      	bx	lr
 8008200:	20000b14 	.word	0x20000b14

08008204 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b084      	sub	sp, #16
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800820c:	f7ff fff0 	bl	80081f0 <HAL_GetTick>
 8008210:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800821c:	d005      	beq.n	800822a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800821e:	4b0a      	ldr	r3, [pc, #40]	@ (8008248 <HAL_Delay+0x44>)
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	461a      	mov	r2, r3
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	4413      	add	r3, r2
 8008228:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800822a:	bf00      	nop
 800822c:	f7ff ffe0 	bl	80081f0 <HAL_GetTick>
 8008230:	4602      	mov	r2, r0
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	1ad3      	subs	r3, r2, r3
 8008236:	68fa      	ldr	r2, [r7, #12]
 8008238:	429a      	cmp	r2, r3
 800823a:	d8f7      	bhi.n	800822c <HAL_Delay+0x28>
  {
  }
}
 800823c:	bf00      	nop
 800823e:	bf00      	nop
 8008240:	3710      	adds	r7, #16
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}
 8008246:	bf00      	nop
 8008248:	20000028 	.word	0x20000028

0800824c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b086      	sub	sp, #24
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008254:	2300      	movs	r3, #0
 8008256:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8008258:	2300      	movs	r3, #0
 800825a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800825c:	2300      	movs	r3, #0
 800825e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8008260:	2300      	movs	r3, #0
 8008262:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d101      	bne.n	800826e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800826a:	2301      	movs	r3, #1
 800826c:	e0d5      	b.n	800841a <HAL_ADC_Init+0x1ce>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008278:	2b00      	cmp	r3, #0
 800827a:	d120      	bne.n	80082be <HAL_ADC_Init+0x72>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2200      	movs	r2, #0
 8008286:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4a65      	ldr	r2, [pc, #404]	@ (8008424 <HAL_ADC_Init+0x1d8>)
 800828e:	631a      	str	r2, [r3, #48]	@ 0x30
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	4a65      	ldr	r2, [pc, #404]	@ (8008428 <HAL_ADC_Init+0x1dc>)
 8008294:	635a      	str	r2, [r3, #52]	@ 0x34
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	4a64      	ldr	r2, [pc, #400]	@ (800842c <HAL_ADC_Init+0x1e0>)
 800829a:	639a      	str	r2, [r3, #56]	@ 0x38
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	4a64      	ldr	r2, [pc, #400]	@ (8008430 <HAL_ADC_Init+0x1e4>)
 80082a0:	63da      	str	r2, [r3, #60]	@ 0x3c
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	4a63      	ldr	r2, [pc, #396]	@ (8008434 <HAL_ADC_Init+0x1e8>)
 80082a6:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (hadc->MspInitCallback == NULL)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d102      	bne.n	80082b6 <HAL_ADC_Init+0x6a>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	4a61      	ldr	r2, [pc, #388]	@ (8008438 <HAL_ADC_Init+0x1ec>)
 80082b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	4798      	blx	r3
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 fbce 	bl	8008a60 <ADC_ConversionStop_Disable>
 80082c4:	4603      	mov	r3, r0
 80082c6:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082cc:	f003 0310 	and.w	r3, r3, #16
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	f040 8099 	bne.w	8008408 <HAL_ADC_Init+0x1bc>
 80082d6:	7dfb      	ldrb	r3, [r7, #23]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	f040 8095 	bne.w	8008408 <HAL_ADC_Init+0x1bc>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082e2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80082e6:	f023 0302 	bic.w	r3, r3, #2
 80082ea:	f043 0202 	orr.w	r2, r3, #2
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80082fa:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	7b1b      	ldrb	r3, [r3, #12]
 8008300:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8008302:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8008304:	68ba      	ldr	r2, [r7, #8]
 8008306:	4313      	orrs	r3, r2
 8008308:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008312:	d003      	beq.n	800831c <HAL_ADC_Init+0xd0>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	2b01      	cmp	r3, #1
 800831a:	d102      	bne.n	8008322 <HAL_ADC_Init+0xd6>
 800831c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008320:	e000      	b.n	8008324 <HAL_ADC_Init+0xd8>
 8008322:	2300      	movs	r3, #0
 8008324:	693a      	ldr	r2, [r7, #16]
 8008326:	4313      	orrs	r3, r2
 8008328:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	7d1b      	ldrb	r3, [r3, #20]
 800832e:	2b01      	cmp	r3, #1
 8008330:	d119      	bne.n	8008366 <HAL_ADC_Init+0x11a>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	7b1b      	ldrb	r3, [r3, #12]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d109      	bne.n	800834e <HAL_ADC_Init+0x102>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	699b      	ldr	r3, [r3, #24]
 800833e:	3b01      	subs	r3, #1
 8008340:	035a      	lsls	r2, r3, #13
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	4313      	orrs	r3, r2
 8008346:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800834a:	613b      	str	r3, [r7, #16]
 800834c:	e00b      	b.n	8008366 <HAL_ADC_Init+0x11a>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008352:	f043 0220 	orr.w	r2, r3, #32
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800835e:	f043 0201 	orr.w	r2, r3, #1
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	693a      	ldr	r2, [r7, #16]
 8008376:	430a      	orrs	r2, r1
 8008378:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	689a      	ldr	r2, [r3, #8]
 8008380:	4b2e      	ldr	r3, [pc, #184]	@ (800843c <HAL_ADC_Init+0x1f0>)
 8008382:	4013      	ands	r3, r2
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	6812      	ldr	r2, [r2, #0]
 8008388:	68b9      	ldr	r1, [r7, #8]
 800838a:	430b      	orrs	r3, r1
 800838c:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	689b      	ldr	r3, [r3, #8]
 8008392:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008396:	d003      	beq.n	80083a0 <HAL_ADC_Init+0x154>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	689b      	ldr	r3, [r3, #8]
 800839c:	2b01      	cmp	r3, #1
 800839e:	d104      	bne.n	80083aa <HAL_ADC_Init+0x15e>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	691b      	ldr	r3, [r3, #16]
 80083a4:	3b01      	subs	r3, #1
 80083a6:	051b      	lsls	r3, r3, #20
 80083a8:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083b0:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	68fa      	ldr	r2, [r7, #12]
 80083ba:	430a      	orrs	r2, r1
 80083bc:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	689a      	ldr	r2, [r3, #8]
 80083c4:	4b1e      	ldr	r3, [pc, #120]	@ (8008440 <HAL_ADC_Init+0x1f4>)
 80083c6:	4013      	ands	r3, r2
 80083c8:	68ba      	ldr	r2, [r7, #8]
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d10b      	bne.n	80083e6 <HAL_ADC_Init+0x19a>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2200      	movs	r2, #0
 80083d2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083d8:	f023 0303 	bic.w	r3, r3, #3
 80083dc:	f043 0201 	orr.w	r2, r3, #1
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80083e4:	e018      	b.n	8008418 <HAL_ADC_Init+0x1cc>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083ea:	f023 0312 	bic.w	r3, r3, #18
 80083ee:	f043 0210 	orr.w	r2, r3, #16
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083fa:	f043 0201 	orr.w	r2, r3, #1
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8008402:	2301      	movs	r3, #1
 8008404:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8008406:	e007      	b.n	8008418 <HAL_ADC_Init+0x1cc>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800840c:	f043 0210 	orr.w	r2, r3, #16
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8008414:	2301      	movs	r3, #1
 8008416:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8008418:	7dfb      	ldrb	r3, [r7, #23]
}
 800841a:	4618      	mov	r0, r3
 800841c:	3718      	adds	r7, #24
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
 8008422:	bf00      	nop
 8008424:	08006c0d 	.word	0x08006c0d
 8008428:	08008785 	.word	0x08008785
 800842c:	08008797 	.word	0x08008797
 8008430:	080087a9 	.word	0x080087a9
 8008434:	08008d11 	.word	0x08008d11
 8008438:	080073e5 	.word	0x080073e5
 800843c:	ffe1f7fd 	.word	0xffe1f7fd
 8008440:	ff1f0efe 	.word	0xff1f0efe

08008444 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b086      	sub	sp, #24
 8008448:	af00      	add	r7, sp, #0
 800844a:	60f8      	str	r0, [r7, #12]
 800844c:	60b9      	str	r1, [r7, #8]
 800844e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008450:	2300      	movs	r3, #0
 8008452:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a64      	ldr	r2, [pc, #400]	@ (80085ec <HAL_ADC_Start_DMA+0x1a8>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d004      	beq.n	8008468 <HAL_ADC_Start_DMA+0x24>
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a63      	ldr	r2, [pc, #396]	@ (80085f0 <HAL_ADC_Start_DMA+0x1ac>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d106      	bne.n	8008476 <HAL_ADC_Start_DMA+0x32>
 8008468:	4b60      	ldr	r3, [pc, #384]	@ (80085ec <HAL_ADC_Start_DMA+0x1a8>)
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8008470:	2b00      	cmp	r3, #0
 8008472:	f040 80b3 	bne.w	80085dc <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800847c:	2b01      	cmp	r3, #1
 800847e:	d101      	bne.n	8008484 <HAL_ADC_Start_DMA+0x40>
 8008480:	2302      	movs	r3, #2
 8008482:	e0ae      	b.n	80085e2 <HAL_ADC_Start_DMA+0x19e>
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2201      	movs	r2, #1
 8008488:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800848c:	68f8      	ldr	r0, [r7, #12]
 800848e:	f000 fa8d 	bl	80089ac <ADC_Enable>
 8008492:	4603      	mov	r3, r0
 8008494:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8008496:	7dfb      	ldrb	r3, [r7, #23]
 8008498:	2b00      	cmp	r3, #0
 800849a:	f040 809a 	bne.w	80085d2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084a2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80084a6:	f023 0301 	bic.w	r3, r3, #1
 80084aa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4a4e      	ldr	r2, [pc, #312]	@ (80085f0 <HAL_ADC_Start_DMA+0x1ac>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d105      	bne.n	80084c8 <HAL_ADC_Start_DMA+0x84>
 80084bc:	4b4b      	ldr	r3, [pc, #300]	@ (80085ec <HAL_ADC_Start_DMA+0x1a8>)
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d115      	bne.n	80084f4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084cc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d026      	beq.n	8008530 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084e6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80084ea:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80084f2:	e01d      	b.n	8008530 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084f8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a39      	ldr	r2, [pc, #228]	@ (80085ec <HAL_ADC_Start_DMA+0x1a8>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d004      	beq.n	8008514 <HAL_ADC_Start_DMA+0xd0>
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4a38      	ldr	r2, [pc, #224]	@ (80085f0 <HAL_ADC_Start_DMA+0x1ac>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d10d      	bne.n	8008530 <HAL_ADC_Start_DMA+0xec>
 8008514:	4b35      	ldr	r3, [pc, #212]	@ (80085ec <HAL_ADC_Start_DMA+0x1a8>)
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800851c:	2b00      	cmp	r3, #0
 800851e:	d007      	beq.n	8008530 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008524:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8008528:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008534:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008538:	2b00      	cmp	r3, #0
 800853a:	d006      	beq.n	800854a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008540:	f023 0206 	bic.w	r2, r3, #6
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008548:	e002      	b.n	8008550 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2200      	movs	r2, #0
 800854e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2200      	movs	r2, #0
 8008554:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	6a1b      	ldr	r3, [r3, #32]
 800855c:	4a25      	ldr	r2, [pc, #148]	@ (80085f4 <HAL_ADC_Start_DMA+0x1b0>)
 800855e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	6a1b      	ldr	r3, [r3, #32]
 8008564:	4a24      	ldr	r2, [pc, #144]	@ (80085f8 <HAL_ADC_Start_DMA+0x1b4>)
 8008566:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	6a1b      	ldr	r3, [r3, #32]
 800856c:	4a23      	ldr	r2, [pc, #140]	@ (80085fc <HAL_ADC_Start_DMA+0x1b8>)
 800856e:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f06f 0202 	mvn.w	r2, #2
 8008578:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	689a      	ldr	r2, [r3, #8]
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008588:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	6a18      	ldr	r0, [r3, #32]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	334c      	adds	r3, #76	@ 0x4c
 8008594:	4619      	mov	r1, r3
 8008596:	68ba      	ldr	r2, [r7, #8]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f001 fbe5 	bl	8009d68 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	689b      	ldr	r3, [r3, #8]
 80085a4:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80085a8:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80085ac:	d108      	bne.n	80085c0 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	689a      	ldr	r2, [r3, #8]
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80085bc:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80085be:	e00f      	b.n	80085e0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	689a      	ldr	r2, [r3, #8]
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80085ce:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80085d0:	e006      	b.n	80085e0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2200      	movs	r2, #0
 80085d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 80085da:	e001      	b.n	80085e0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80085dc:	2301      	movs	r3, #1
 80085de:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80085e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3718      	adds	r7, #24
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
 80085ea:	bf00      	nop
 80085ec:	40012400 	.word	0x40012400
 80085f0:	40012800 	.word	0x40012800
 80085f4:	08008ae3 	.word	0x08008ae3
 80085f8:	08008b61 	.word	0x08008b61
 80085fc:	08008b7f 	.word	0x08008b7f

08008600 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b084      	sub	sp, #16
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	f003 0320 	and.w	r3, r3, #32
 800861e:	2b00      	cmp	r3, #0
 8008620:	d03f      	beq.n	80086a2 <HAL_ADC_IRQHandler+0xa2>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f003 0302 	and.w	r3, r3, #2
 8008628:	2b00      	cmp	r3, #0
 800862a:	d03a      	beq.n	80086a2 <HAL_ADC_IRQHandler+0xa2>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008630:	f003 0310 	and.w	r3, r3, #16
 8008634:	2b00      	cmp	r3, #0
 8008636:	d105      	bne.n	8008644 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800863c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800864e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8008652:	d11d      	bne.n	8008690 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8008658:	2b00      	cmp	r3, #0
 800865a:	d119      	bne.n	8008690 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	685a      	ldr	r2, [r3, #4]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f022 0220 	bic.w	r2, r2, #32
 800866a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008670:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800867c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008680:	2b00      	cmp	r3, #0
 8008682:	d105      	bne.n	8008690 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008688:	f043 0201 	orr.w	r2, r3, #1
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	629a      	str	r2, [r3, #40]	@ 0x28
        }
      }

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	4798      	blx	r3
#else
      HAL_ADC_ConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f06f 0212 	mvn.w	r2, #18
 80086a0:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d04e      	beq.n	800874a <HAL_ADC_IRQHandler+0x14a>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f003 0304 	and.w	r3, r3, #4
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d049      	beq.n	800874a <HAL_ADC_IRQHandler+0x14a>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086ba:	f003 0310 	and.w	r3, r3, #16
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d105      	bne.n	80086ce <HAL_ADC_IRQHandler+0xce>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086c6:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	689b      	ldr	r3, [r3, #8]
 80086d4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80086d8:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 80086dc:	d012      	beq.n	8008704 <HAL_ADC_IRQHandler+0x104>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d125      	bne.n	8008738 <HAL_ADC_IRQHandler+0x138>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	689b      	ldr	r3, [r3, #8]
 80086f2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80086f6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80086fa:	d11d      	bne.n	8008738 <HAL_ADC_IRQHandler+0x138>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8008700:	2b00      	cmp	r3, #0
 8008702:	d119      	bne.n	8008738 <HAL_ADC_IRQHandler+0x138>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	685a      	ldr	r2, [r3, #4]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008712:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008718:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008728:	2b00      	cmp	r3, #0
 800872a:	d105      	bne.n	8008738 <HAL_ADC_IRQHandler+0x138>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008730:	f043 0201 	orr.w	r2, r3, #1
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	629a      	str	r2, [r3, #40]	@ 0x28
        }
      }

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	4798      	blx	r3
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f06f 020c 	mvn.w	r2, #12
 8008748:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008750:	2b00      	cmp	r3, #0
 8008752:	d013      	beq.n	800877c <HAL_ADC_IRQHandler+0x17c>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f003 0301 	and.w	r3, r3, #1
 800875a:	2b00      	cmp	r3, #0
 800875c:	d00e      	beq.n	800877c <HAL_ADC_IRQHandler+0x17c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008762:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	4798      	blx	r3
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f06f 0201 	mvn.w	r2, #1
 800877a:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800877c:	bf00      	nop
 800877e:	3710      	adds	r7, #16
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8008784:	b480      	push	{r7}
 8008786:	b083      	sub	sp, #12
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800878c:	bf00      	nop
 800878e:	370c      	adds	r7, #12
 8008790:	46bd      	mov	sp, r7
 8008792:	bc80      	pop	{r7}
 8008794:	4770      	bx	lr

08008796 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8008796:	b480      	push	{r7}
 8008798:	b083      	sub	sp, #12
 800879a:	af00      	add	r7, sp, #0
 800879c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800879e:	bf00      	nop
 80087a0:	370c      	adds	r7, #12
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bc80      	pop	{r7}
 80087a6:	4770      	bx	lr

080087a8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b083      	sub	sp, #12
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80087b0:	bf00      	nop
 80087b2:	370c      	adds	r7, #12
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bc80      	pop	{r7}
 80087b8:	4770      	bx	lr
	...

080087bc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80087bc:	b480      	push	{r7}
 80087be:	b085      	sub	sp, #20
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80087c6:	2300      	movs	r3, #0
 80087c8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80087ca:	2300      	movs	r3, #0
 80087cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d101      	bne.n	80087dc <HAL_ADC_ConfigChannel+0x20>
 80087d8:	2302      	movs	r3, #2
 80087da:	e0dc      	b.n	8008996 <HAL_ADC_ConfigChannel+0x1da>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2201      	movs	r2, #1
 80087e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	2b06      	cmp	r3, #6
 80087ea:	d81c      	bhi.n	8008826 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	685a      	ldr	r2, [r3, #4]
 80087f6:	4613      	mov	r3, r2
 80087f8:	009b      	lsls	r3, r3, #2
 80087fa:	4413      	add	r3, r2
 80087fc:	3b05      	subs	r3, #5
 80087fe:	221f      	movs	r2, #31
 8008800:	fa02 f303 	lsl.w	r3, r2, r3
 8008804:	43db      	mvns	r3, r3
 8008806:	4019      	ands	r1, r3
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	6818      	ldr	r0, [r3, #0]
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	685a      	ldr	r2, [r3, #4]
 8008810:	4613      	mov	r3, r2
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	4413      	add	r3, r2
 8008816:	3b05      	subs	r3, #5
 8008818:	fa00 f203 	lsl.w	r2, r0, r3
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	430a      	orrs	r2, r1
 8008822:	635a      	str	r2, [r3, #52]	@ 0x34
 8008824:	e03c      	b.n	80088a0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	685b      	ldr	r3, [r3, #4]
 800882a:	2b0c      	cmp	r3, #12
 800882c:	d81c      	bhi.n	8008868 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	685a      	ldr	r2, [r3, #4]
 8008838:	4613      	mov	r3, r2
 800883a:	009b      	lsls	r3, r3, #2
 800883c:	4413      	add	r3, r2
 800883e:	3b23      	subs	r3, #35	@ 0x23
 8008840:	221f      	movs	r2, #31
 8008842:	fa02 f303 	lsl.w	r3, r2, r3
 8008846:	43db      	mvns	r3, r3
 8008848:	4019      	ands	r1, r3
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	6818      	ldr	r0, [r3, #0]
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	685a      	ldr	r2, [r3, #4]
 8008852:	4613      	mov	r3, r2
 8008854:	009b      	lsls	r3, r3, #2
 8008856:	4413      	add	r3, r2
 8008858:	3b23      	subs	r3, #35	@ 0x23
 800885a:	fa00 f203 	lsl.w	r2, r0, r3
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	430a      	orrs	r2, r1
 8008864:	631a      	str	r2, [r3, #48]	@ 0x30
 8008866:	e01b      	b.n	80088a0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	685a      	ldr	r2, [r3, #4]
 8008872:	4613      	mov	r3, r2
 8008874:	009b      	lsls	r3, r3, #2
 8008876:	4413      	add	r3, r2
 8008878:	3b41      	subs	r3, #65	@ 0x41
 800887a:	221f      	movs	r2, #31
 800887c:	fa02 f303 	lsl.w	r3, r2, r3
 8008880:	43db      	mvns	r3, r3
 8008882:	4019      	ands	r1, r3
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	6818      	ldr	r0, [r3, #0]
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	685a      	ldr	r2, [r3, #4]
 800888c:	4613      	mov	r3, r2
 800888e:	009b      	lsls	r3, r3, #2
 8008890:	4413      	add	r3, r2
 8008892:	3b41      	subs	r3, #65	@ 0x41
 8008894:	fa00 f203 	lsl.w	r2, r0, r3
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	430a      	orrs	r2, r1
 800889e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	2b09      	cmp	r3, #9
 80088a6:	d91c      	bls.n	80088e2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	68d9      	ldr	r1, [r3, #12]
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	681a      	ldr	r2, [r3, #0]
 80088b2:	4613      	mov	r3, r2
 80088b4:	005b      	lsls	r3, r3, #1
 80088b6:	4413      	add	r3, r2
 80088b8:	3b1e      	subs	r3, #30
 80088ba:	2207      	movs	r2, #7
 80088bc:	fa02 f303 	lsl.w	r3, r2, r3
 80088c0:	43db      	mvns	r3, r3
 80088c2:	4019      	ands	r1, r3
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	6898      	ldr	r0, [r3, #8]
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	4613      	mov	r3, r2
 80088ce:	005b      	lsls	r3, r3, #1
 80088d0:	4413      	add	r3, r2
 80088d2:	3b1e      	subs	r3, #30
 80088d4:	fa00 f203 	lsl.w	r2, r0, r3
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	430a      	orrs	r2, r1
 80088de:	60da      	str	r2, [r3, #12]
 80088e0:	e019      	b.n	8008916 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	6919      	ldr	r1, [r3, #16]
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	681a      	ldr	r2, [r3, #0]
 80088ec:	4613      	mov	r3, r2
 80088ee:	005b      	lsls	r3, r3, #1
 80088f0:	4413      	add	r3, r2
 80088f2:	2207      	movs	r2, #7
 80088f4:	fa02 f303 	lsl.w	r3, r2, r3
 80088f8:	43db      	mvns	r3, r3
 80088fa:	4019      	ands	r1, r3
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	6898      	ldr	r0, [r3, #8]
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	681a      	ldr	r2, [r3, #0]
 8008904:	4613      	mov	r3, r2
 8008906:	005b      	lsls	r3, r3, #1
 8008908:	4413      	add	r3, r2
 800890a:	fa00 f203 	lsl.w	r2, r0, r3
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	430a      	orrs	r2, r1
 8008914:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	2b10      	cmp	r3, #16
 800891c:	d003      	beq.n	8008926 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8008922:	2b11      	cmp	r3, #17
 8008924:	d132      	bne.n	800898c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a1d      	ldr	r2, [pc, #116]	@ (80089a0 <HAL_ADC_ConfigChannel+0x1e4>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d125      	bne.n	800897c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	689b      	ldr	r3, [r3, #8]
 8008936:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800893a:	2b00      	cmp	r3, #0
 800893c:	d126      	bne.n	800898c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	689a      	ldr	r2, [r3, #8]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800894c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	2b10      	cmp	r3, #16
 8008954:	d11a      	bne.n	800898c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8008956:	4b13      	ldr	r3, [pc, #76]	@ (80089a4 <HAL_ADC_ConfigChannel+0x1e8>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a13      	ldr	r2, [pc, #76]	@ (80089a8 <HAL_ADC_ConfigChannel+0x1ec>)
 800895c:	fba2 2303 	umull	r2, r3, r2, r3
 8008960:	0c9a      	lsrs	r2, r3, #18
 8008962:	4613      	mov	r3, r2
 8008964:	009b      	lsls	r3, r3, #2
 8008966:	4413      	add	r3, r2
 8008968:	005b      	lsls	r3, r3, #1
 800896a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800896c:	e002      	b.n	8008974 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	3b01      	subs	r3, #1
 8008972:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d1f9      	bne.n	800896e <HAL_ADC_ConfigChannel+0x1b2>
 800897a:	e007      	b.n	800898c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008980:	f043 0220 	orr.w	r2, r3, #32
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8008988:	2301      	movs	r3, #1
 800898a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2200      	movs	r2, #0
 8008990:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8008994:	7bfb      	ldrb	r3, [r7, #15]
}
 8008996:	4618      	mov	r0, r3
 8008998:	3714      	adds	r7, #20
 800899a:	46bd      	mov	sp, r7
 800899c:	bc80      	pop	{r7}
 800899e:	4770      	bx	lr
 80089a0:	40012400 	.word	0x40012400
 80089a4:	20000020 	.word	0x20000020
 80089a8:	431bde83 	.word	0x431bde83

080089ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b084      	sub	sp, #16
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80089b4:	2300      	movs	r3, #0
 80089b6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80089b8:	2300      	movs	r3, #0
 80089ba:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	689b      	ldr	r3, [r3, #8]
 80089c2:	f003 0301 	and.w	r3, r3, #1
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	d040      	beq.n	8008a4c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	689a      	ldr	r2, [r3, #8]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f042 0201 	orr.w	r2, r2, #1
 80089d8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80089da:	4b1f      	ldr	r3, [pc, #124]	@ (8008a58 <ADC_Enable+0xac>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4a1f      	ldr	r2, [pc, #124]	@ (8008a5c <ADC_Enable+0xb0>)
 80089e0:	fba2 2303 	umull	r2, r3, r2, r3
 80089e4:	0c9b      	lsrs	r3, r3, #18
 80089e6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80089e8:	e002      	b.n	80089f0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	3b01      	subs	r3, #1
 80089ee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d1f9      	bne.n	80089ea <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80089f6:	f7ff fbfb 	bl	80081f0 <HAL_GetTick>
 80089fa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80089fc:	e01f      	b.n	8008a3e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80089fe:	f7ff fbf7 	bl	80081f0 <HAL_GetTick>
 8008a02:	4602      	mov	r2, r0
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	1ad3      	subs	r3, r2, r3
 8008a08:	2b02      	cmp	r3, #2
 8008a0a:	d918      	bls.n	8008a3e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	689b      	ldr	r3, [r3, #8]
 8008a12:	f003 0301 	and.w	r3, r3, #1
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	d011      	beq.n	8008a3e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a1e:	f043 0210 	orr.w	r2, r3, #16
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a2a:	f043 0201 	orr.w	r2, r3, #1
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2200      	movs	r2, #0
 8008a36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	e007      	b.n	8008a4e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	689b      	ldr	r3, [r3, #8]
 8008a44:	f003 0301 	and.w	r3, r3, #1
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	d1d8      	bne.n	80089fe <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3710      	adds	r7, #16
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	bf00      	nop
 8008a58:	20000020 	.word	0x20000020
 8008a5c:	431bde83 	.word	0x431bde83

08008a60 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	689b      	ldr	r3, [r3, #8]
 8008a72:	f003 0301 	and.w	r3, r3, #1
 8008a76:	2b01      	cmp	r3, #1
 8008a78:	d12e      	bne.n	8008ad8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	689a      	ldr	r2, [r3, #8]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f022 0201 	bic.w	r2, r2, #1
 8008a88:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8008a8a:	f7ff fbb1 	bl	80081f0 <HAL_GetTick>
 8008a8e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8008a90:	e01b      	b.n	8008aca <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8008a92:	f7ff fbad 	bl	80081f0 <HAL_GetTick>
 8008a96:	4602      	mov	r2, r0
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	1ad3      	subs	r3, r2, r3
 8008a9c:	2b02      	cmp	r3, #2
 8008a9e:	d914      	bls.n	8008aca <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	689b      	ldr	r3, [r3, #8]
 8008aa6:	f003 0301 	and.w	r3, r3, #1
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	d10d      	bne.n	8008aca <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ab2:	f043 0210 	orr.w	r2, r3, #16
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008abe:	f043 0201 	orr.w	r2, r3, #1
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	e007      	b.n	8008ada <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	689b      	ldr	r3, [r3, #8]
 8008ad0:	f003 0301 	and.w	r3, r3, #1
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	d0dc      	beq.n	8008a92 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8008ad8:	2300      	movs	r3, #0
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3710      	adds	r7, #16
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}

08008ae2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8008ae2:	b580      	push	{r7, lr}
 8008ae4:	b084      	sub	sp, #16
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aee:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008af4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d128      	bne.n	8008b4e <ADC_DMAConvCplt+0x6c>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b00:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	689b      	ldr	r3, [r3, #8]
 8008b0e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8008b12:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8008b16:	d115      	bne.n	8008b44 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d111      	bne.n	8008b44 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b24:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d105      	bne.n	8008b44 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b3c:	f043 0201 	orr.w	r2, r3, #1
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b48:	68f8      	ldr	r0, [r7, #12]
 8008b4a:	4798      	blx	r3
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8008b4c:	e004      	b.n	8008b58 <ADC_DMAConvCplt+0x76>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	6a1b      	ldr	r3, [r3, #32]
 8008b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	4798      	blx	r3
}
 8008b58:	bf00      	nop
 8008b5a:	3710      	adds	r7, #16
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b084      	sub	sp, #16
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b6c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b72:	68f8      	ldr	r0, [r7, #12]
 8008b74:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008b76:	bf00      	nop
 8008b78:	3710      	adds	r7, #16
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}

08008b7e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8008b7e:	b580      	push	{r7, lr}
 8008b80:	b084      	sub	sp, #16
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b8a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b90:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b9c:	f043 0204 	orr.w	r2, r3, #4
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ba8:	68f8      	ldr	r0, [r7, #12]
 8008baa:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008bac:	bf00      	nop
 8008bae:	3710      	adds	r7, #16
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}

08008bb4 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8008bb4:	b590      	push	{r4, r7, lr}
 8008bb6:	b087      	sub	sp, #28
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008bca:	2b01      	cmp	r3, #1
 8008bcc:	d101      	bne.n	8008bd2 <HAL_ADCEx_Calibration_Start+0x1e>
 8008bce:	2302      	movs	r3, #2
 8008bd0:	e097      	b.n	8008d02 <HAL_ADCEx_Calibration_Start+0x14e>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2201      	movs	r2, #1
 8008bd6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f7ff ff40 	bl	8008a60 <ADC_ConversionStop_Disable>
 8008be0:	4603      	mov	r3, r0
 8008be2:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f7ff fee1 	bl	80089ac <ADC_Enable>
 8008bea:	4603      	mov	r3, r0
 8008bec:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8008bee:	7dfb      	ldrb	r3, [r7, #23]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	f040 8081 	bne.w	8008cf8 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bfa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8008bfe:	f023 0302 	bic.w	r3, r3, #2
 8008c02:	f043 0202 	orr.w	r2, r3, #2
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8008c0a:	4b40      	ldr	r3, [pc, #256]	@ (8008d0c <HAL_ADCEx_Calibration_Start+0x158>)
 8008c0c:	681c      	ldr	r4, [r3, #0]
 8008c0e:	2002      	movs	r0, #2
 8008c10:	f002 fc30 	bl	800b474 <HAL_RCCEx_GetPeriphCLKFreq>
 8008c14:	4603      	mov	r3, r0
 8008c16:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8008c1a:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8008c1c:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8008c1e:	e002      	b.n	8008c26 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	3b01      	subs	r3, #1
 8008c24:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d1f9      	bne.n	8008c20 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	689a      	ldr	r2, [r3, #8]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f042 0208 	orr.w	r2, r2, #8
 8008c3a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8008c3c:	f7ff fad8 	bl	80081f0 <HAL_GetTick>
 8008c40:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8008c42:	e01b      	b.n	8008c7c <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8008c44:	f7ff fad4 	bl	80081f0 <HAL_GetTick>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	1ad3      	subs	r3, r2, r3
 8008c4e:	2b0a      	cmp	r3, #10
 8008c50:	d914      	bls.n	8008c7c <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	689b      	ldr	r3, [r3, #8]
 8008c58:	f003 0308 	and.w	r3, r3, #8
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d00d      	beq.n	8008c7c <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c64:	f023 0312 	bic.w	r3, r3, #18
 8008c68:	f043 0210 	orr.w	r2, r3, #16
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2200      	movs	r2, #0
 8008c74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8008c78:	2301      	movs	r3, #1
 8008c7a:	e042      	b.n	8008d02 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	689b      	ldr	r3, [r3, #8]
 8008c82:	f003 0308 	and.w	r3, r3, #8
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d1dc      	bne.n	8008c44 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	689a      	ldr	r2, [r3, #8]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f042 0204 	orr.w	r2, r2, #4
 8008c98:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8008c9a:	f7ff faa9 	bl	80081f0 <HAL_GetTick>
 8008c9e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8008ca0:	e01b      	b.n	8008cda <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8008ca2:	f7ff faa5 	bl	80081f0 <HAL_GetTick>
 8008ca6:	4602      	mov	r2, r0
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	1ad3      	subs	r3, r2, r3
 8008cac:	2b0a      	cmp	r3, #10
 8008cae:	d914      	bls.n	8008cda <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	689b      	ldr	r3, [r3, #8]
 8008cb6:	f003 0304 	and.w	r3, r3, #4
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d00d      	beq.n	8008cda <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cc2:	f023 0312 	bic.w	r3, r3, #18
 8008cc6:	f043 0210 	orr.w	r2, r3, #16
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	e013      	b.n	8008d02 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	f003 0304 	and.w	r3, r3, #4
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d1dc      	bne.n	8008ca2 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cec:	f023 0303 	bic.w	r3, r3, #3
 8008cf0:	f043 0201 	orr.w	r2, r3, #1
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8008d00:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	371c      	adds	r7, #28
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd90      	pop	{r4, r7, pc}
 8008d0a:	bf00      	nop
 8008d0c:	20000020 	.word	0x20000020

08008d10 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b083      	sub	sp, #12
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8008d18:	bf00      	nop
 8008d1a:	370c      	adds	r7, #12
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bc80      	pop	{r7}
 8008d20:	4770      	bx	lr
	...

08008d24 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b084      	sub	sp, #16
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d101      	bne.n	8008d36 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8008d32:	2301      	movs	r3, #1
 8008d34:	e11c      	b.n	8008f70 <HAL_CAN_Init+0x24c>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008d3c:	b2db      	uxtb	r3, r3
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d131      	bne.n	8008da6 <HAL_CAN_Init+0x82>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	4a8c      	ldr	r2, [pc, #560]	@ (8008f78 <HAL_CAN_Init+0x254>)
 8008d46:	641a      	str	r2, [r3, #64]	@ 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	4a8c      	ldr	r2, [pc, #560]	@ (8008f7c <HAL_CAN_Init+0x258>)
 8008d4c:	645a      	str	r2, [r3, #68]	@ 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	4a8b      	ldr	r2, [pc, #556]	@ (8008f80 <HAL_CAN_Init+0x25c>)
 8008d52:	649a      	str	r2, [r3, #72]	@ 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	4a8b      	ldr	r2, [pc, #556]	@ (8008f84 <HAL_CAN_Init+0x260>)
 8008d58:	64da      	str	r2, [r3, #76]	@ 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	4a8a      	ldr	r2, [pc, #552]	@ (8008f88 <HAL_CAN_Init+0x264>)
 8008d5e:	629a      	str	r2, [r3, #40]	@ 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	4a8a      	ldr	r2, [pc, #552]	@ (8008f8c <HAL_CAN_Init+0x268>)
 8008d64:	62da      	str	r2, [r3, #44]	@ 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	4a89      	ldr	r2, [pc, #548]	@ (8008f90 <HAL_CAN_Init+0x26c>)
 8008d6a:	631a      	str	r2, [r3, #48]	@ 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	4a89      	ldr	r2, [pc, #548]	@ (8008f94 <HAL_CAN_Init+0x270>)
 8008d70:	635a      	str	r2, [r3, #52]	@ 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	4a88      	ldr	r2, [pc, #544]	@ (8008f98 <HAL_CAN_Init+0x274>)
 8008d76:	639a      	str	r2, [r3, #56]	@ 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	4a88      	ldr	r2, [pc, #544]	@ (8008f9c <HAL_CAN_Init+0x278>)
 8008d7c:	63da      	str	r2, [r3, #60]	@ 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	4a87      	ldr	r2, [pc, #540]	@ (8008fa0 <HAL_CAN_Init+0x27c>)
 8008d82:	651a      	str	r2, [r3, #80]	@ 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	4a87      	ldr	r2, [pc, #540]	@ (8008fa4 <HAL_CAN_Init+0x280>)
 8008d88:	655a      	str	r2, [r3, #84]	@ 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	4a86      	ldr	r2, [pc, #536]	@ (8008fa8 <HAL_CAN_Init+0x284>)
 8008d8e:	659a      	str	r2, [r3, #88]	@ 0x58

    if (hcan->MspInitCallback == NULL)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d102      	bne.n	8008d9e <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	4a84      	ldr	r2, [pc, #528]	@ (8008fac <HAL_CAN_Init+0x288>)
 8008d9c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	681a      	ldr	r2, [r3, #0]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f042 0201 	orr.w	r2, r2, #1
 8008db4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008db6:	f7ff fa1b 	bl	80081f0 <HAL_GetTick>
 8008dba:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008dbc:	e012      	b.n	8008de4 <HAL_CAN_Init+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008dbe:	f7ff fa17 	bl	80081f0 <HAL_GetTick>
 8008dc2:	4602      	mov	r2, r0
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	1ad3      	subs	r3, r2, r3
 8008dc8:	2b0a      	cmp	r3, #10
 8008dca:	d90b      	bls.n	8008de4 <HAL_CAN_Init+0xc0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dd0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2205      	movs	r2, #5
 8008ddc:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008de0:	2301      	movs	r3, #1
 8008de2:	e0c5      	b.n	8008f70 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	f003 0301 	and.w	r3, r3, #1
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d0e5      	beq.n	8008dbe <HAL_CAN_Init+0x9a>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	681a      	ldr	r2, [r3, #0]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f022 0202 	bic.w	r2, r2, #2
 8008e00:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008e02:	f7ff f9f5 	bl	80081f0 <HAL_GetTick>
 8008e06:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008e08:	e012      	b.n	8008e30 <HAL_CAN_Init+0x10c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008e0a:	f7ff f9f1 	bl	80081f0 <HAL_GetTick>
 8008e0e:	4602      	mov	r2, r0
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	1ad3      	subs	r3, r2, r3
 8008e14:	2b0a      	cmp	r3, #10
 8008e16:	d90b      	bls.n	8008e30 <HAL_CAN_Init+0x10c>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e1c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2205      	movs	r2, #5
 8008e28:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	e09f      	b.n	8008f70 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	f003 0302 	and.w	r3, r3, #2
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d1e5      	bne.n	8008e0a <HAL_CAN_Init+0xe6>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	7e1b      	ldrb	r3, [r3, #24]
 8008e42:	2b01      	cmp	r3, #1
 8008e44:	d108      	bne.n	8008e58 <HAL_CAN_Init+0x134>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	681a      	ldr	r2, [r3, #0]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008e54:	601a      	str	r2, [r3, #0]
 8008e56:	e007      	b.n	8008e68 <HAL_CAN_Init+0x144>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	681a      	ldr	r2, [r3, #0]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008e66:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	7e5b      	ldrb	r3, [r3, #25]
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d108      	bne.n	8008e82 <HAL_CAN_Init+0x15e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	681a      	ldr	r2, [r3, #0]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008e7e:	601a      	str	r2, [r3, #0]
 8008e80:	e007      	b.n	8008e92 <HAL_CAN_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	681a      	ldr	r2, [r3, #0]
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008e90:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	7e9b      	ldrb	r3, [r3, #26]
 8008e96:	2b01      	cmp	r3, #1
 8008e98:	d108      	bne.n	8008eac <HAL_CAN_Init+0x188>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	681a      	ldr	r2, [r3, #0]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f042 0220 	orr.w	r2, r2, #32
 8008ea8:	601a      	str	r2, [r3, #0]
 8008eaa:	e007      	b.n	8008ebc <HAL_CAN_Init+0x198>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	681a      	ldr	r2, [r3, #0]
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f022 0220 	bic.w	r2, r2, #32
 8008eba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	7edb      	ldrb	r3, [r3, #27]
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d108      	bne.n	8008ed6 <HAL_CAN_Init+0x1b2>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	681a      	ldr	r2, [r3, #0]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f022 0210 	bic.w	r2, r2, #16
 8008ed2:	601a      	str	r2, [r3, #0]
 8008ed4:	e007      	b.n	8008ee6 <HAL_CAN_Init+0x1c2>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	681a      	ldr	r2, [r3, #0]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f042 0210 	orr.w	r2, r2, #16
 8008ee4:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	7f1b      	ldrb	r3, [r3, #28]
 8008eea:	2b01      	cmp	r3, #1
 8008eec:	d108      	bne.n	8008f00 <HAL_CAN_Init+0x1dc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	681a      	ldr	r2, [r3, #0]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f042 0208 	orr.w	r2, r2, #8
 8008efc:	601a      	str	r2, [r3, #0]
 8008efe:	e007      	b.n	8008f10 <HAL_CAN_Init+0x1ec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	681a      	ldr	r2, [r3, #0]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f022 0208 	bic.w	r2, r2, #8
 8008f0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	7f5b      	ldrb	r3, [r3, #29]
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d108      	bne.n	8008f2a <HAL_CAN_Init+0x206>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	681a      	ldr	r2, [r3, #0]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f042 0204 	orr.w	r2, r2, #4
 8008f26:	601a      	str	r2, [r3, #0]
 8008f28:	e007      	b.n	8008f3a <HAL_CAN_Init+0x216>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	681a      	ldr	r2, [r3, #0]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f022 0204 	bic.w	r2, r2, #4
 8008f38:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	689a      	ldr	r2, [r3, #8]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	68db      	ldr	r3, [r3, #12]
 8008f42:	431a      	orrs	r2, r3
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	691b      	ldr	r3, [r3, #16]
 8008f48:	431a      	orrs	r2, r3
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	695b      	ldr	r3, [r3, #20]
 8008f4e:	ea42 0103 	orr.w	r1, r2, r3
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	1e5a      	subs	r2, r3, #1
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	430a      	orrs	r2, r1
 8008f5e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2200      	movs	r2, #0
 8008f64:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2201      	movs	r2, #1
 8008f6a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8008f6e:	2300      	movs	r3, #0
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3710      	adds	r7, #16
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}
 8008f78:	08005b81 	.word	0x08005b81
 8008f7c:	08009a71 	.word	0x08009a71
 8008f80:	08009a83 	.word	0x08009a83
 8008f84:	08009a95 	.word	0x08009a95
 8008f88:	08009a05 	.word	0x08009a05
 8008f8c:	08009a17 	.word	0x08009a17
 8008f90:	08009a29 	.word	0x08009a29
 8008f94:	08009a3b 	.word	0x08009a3b
 8008f98:	08009a4d 	.word	0x08009a4d
 8008f9c:	08009a5f 	.word	0x08009a5f
 8008fa0:	08009aa7 	.word	0x08009aa7
 8008fa4:	08009ab9 	.word	0x08009ab9
 8008fa8:	08009acb 	.word	0x08009acb
 8008fac:	08007621 	.word	0x08007621

08008fb0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b087      	sub	sp, #28
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008fc6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8008fc8:	7cfb      	ldrb	r3, [r7, #19]
 8008fca:	2b01      	cmp	r3, #1
 8008fcc:	d003      	beq.n	8008fd6 <HAL_CAN_ConfigFilter+0x26>
 8008fce:	7cfb      	ldrb	r3, [r7, #19]
 8008fd0:	2b02      	cmp	r3, #2
 8008fd2:	f040 80aa 	bne.w	800912a <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8008fdc:	f043 0201 	orr.w	r2, r3, #1
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	695b      	ldr	r3, [r3, #20]
 8008fea:	f003 031f 	and.w	r3, r3, #31
 8008fee:	2201      	movs	r2, #1
 8008ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ff4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	43db      	mvns	r3, r3
 8009000:	401a      	ands	r2, r3
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	69db      	ldr	r3, [r3, #28]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d123      	bne.n	8009058 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	43db      	mvns	r3, r3
 800901a:	401a      	ands	r2, r3
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	68db      	ldr	r3, [r3, #12]
 8009026:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800902e:	683a      	ldr	r2, [r7, #0]
 8009030:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8009032:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	3248      	adds	r2, #72	@ 0x48
 8009038:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	689b      	ldr	r3, [r3, #8]
 8009040:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800904c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800904e:	6979      	ldr	r1, [r7, #20]
 8009050:	3348      	adds	r3, #72	@ 0x48
 8009052:	00db      	lsls	r3, r3, #3
 8009054:	440b      	add	r3, r1
 8009056:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	69db      	ldr	r3, [r3, #28]
 800905c:	2b01      	cmp	r3, #1
 800905e:	d122      	bne.n	80090a6 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	431a      	orrs	r2, r3
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	685b      	ldr	r3, [r3, #4]
 800907a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800907c:	683a      	ldr	r2, [r7, #0]
 800907e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8009080:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	3248      	adds	r2, #72	@ 0x48
 8009086:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	689b      	ldr	r3, [r3, #8]
 800908e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	68db      	ldr	r3, [r3, #12]
 8009094:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800909a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800909c:	6979      	ldr	r1, [r7, #20]
 800909e:	3348      	adds	r3, #72	@ 0x48
 80090a0:	00db      	lsls	r3, r3, #3
 80090a2:	440b      	add	r3, r1
 80090a4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	699b      	ldr	r3, [r3, #24]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d109      	bne.n	80090c2 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	43db      	mvns	r3, r3
 80090b8:	401a      	ands	r2, r3
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80090c0:	e007      	b.n	80090d2 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	431a      	orrs	r2, r3
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	691b      	ldr	r3, [r3, #16]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d109      	bne.n	80090ee <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	43db      	mvns	r3, r3
 80090e4:	401a      	ands	r2, r3
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80090ec:	e007      	b.n	80090fe <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	431a      	orrs	r2, r3
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	6a1b      	ldr	r3, [r3, #32]
 8009102:	2b01      	cmp	r3, #1
 8009104:	d107      	bne.n	8009116 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	431a      	orrs	r2, r3
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800911c:	f023 0201 	bic.w	r2, r3, #1
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8009126:	2300      	movs	r3, #0
 8009128:	e006      	b.n	8009138 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800912e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8009136:	2301      	movs	r3, #1
  }
}
 8009138:	4618      	mov	r0, r3
 800913a:	371c      	adds	r7, #28
 800913c:	46bd      	mov	sp, r7
 800913e:	bc80      	pop	{r7}
 8009140:	4770      	bx	lr

08009142 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8009142:	b580      	push	{r7, lr}
 8009144:	b084      	sub	sp, #16
 8009146:	af00      	add	r7, sp, #0
 8009148:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009150:	b2db      	uxtb	r3, r3
 8009152:	2b01      	cmp	r3, #1
 8009154:	d12e      	bne.n	80091b4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2202      	movs	r2, #2
 800915a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	681a      	ldr	r2, [r3, #0]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f022 0201 	bic.w	r2, r2, #1
 800916c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800916e:	f7ff f83f 	bl	80081f0 <HAL_GetTick>
 8009172:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8009174:	e012      	b.n	800919c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009176:	f7ff f83b 	bl	80081f0 <HAL_GetTick>
 800917a:	4602      	mov	r2, r0
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	1ad3      	subs	r3, r2, r3
 8009180:	2b0a      	cmp	r3, #10
 8009182:	d90b      	bls.n	800919c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009188:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2205      	movs	r2, #5
 8009194:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8009198:	2301      	movs	r3, #1
 800919a:	e012      	b.n	80091c2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	685b      	ldr	r3, [r3, #4]
 80091a2:	f003 0301 	and.w	r3, r3, #1
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d1e5      	bne.n	8009176 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2200      	movs	r2, #0
 80091ae:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80091b0:	2300      	movs	r3, #0
 80091b2:	e006      	b.n	80091c2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091b8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80091c0:	2301      	movs	r3, #1
  }
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3710      	adds	r7, #16
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}

080091ca <HAL_CAN_RequestSleep>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_CAN_RequestSleep(CAN_HandleTypeDef *hcan)
{
 80091ca:	b480      	push	{r7}
 80091cc:	b085      	sub	sp, #20
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	6078      	str	r0, [r7, #4]
  HAL_CAN_StateTypeDef state = hcan->State;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80091d8:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_CAN_STATE_READY) ||
 80091da:	7bfb      	ldrb	r3, [r7, #15]
 80091dc:	2b01      	cmp	r3, #1
 80091de:	d002      	beq.n	80091e6 <HAL_CAN_RequestSleep+0x1c>
 80091e0:	7bfb      	ldrb	r3, [r7, #15]
 80091e2:	2b02      	cmp	r3, #2
 80091e4:	d109      	bne.n	80091fa <HAL_CAN_RequestSleep+0x30>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Request Sleep mode */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	681a      	ldr	r2, [r3, #0]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f042 0202 	orr.w	r2, r2, #2
 80091f4:	601a      	str	r2, [r3, #0]

    /* Return function status */
    return HAL_OK;
 80091f6:	2300      	movs	r3, #0
 80091f8:	e006      	b.n	8009208 <HAL_CAN_RequestSleep+0x3e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091fe:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_ERROR;
 8009206:	2301      	movs	r3, #1
  }
}
 8009208:	4618      	mov	r0, r3
 800920a:	3714      	adds	r7, #20
 800920c:	46bd      	mov	sp, r7
 800920e:	bc80      	pop	{r7}
 8009210:	4770      	bx	lr

08009212 <HAL_CAN_IsSleepActive>:
  * @retval Status
  *          - 0 : Sleep mode is not active.
  *          - 1 : Sleep mode is active.
  */
uint32_t HAL_CAN_IsSleepActive(const CAN_HandleTypeDef *hcan)
{
 8009212:	b480      	push	{r7}
 8009214:	b085      	sub	sp, #20
 8009216:	af00      	add	r7, sp, #0
 8009218:	6078      	str	r0, [r7, #4]
  uint32_t status = 0U;
 800921a:	2300      	movs	r3, #0
 800921c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009224:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8009226:	7afb      	ldrb	r3, [r7, #11]
 8009228:	2b01      	cmp	r3, #1
 800922a:	d002      	beq.n	8009232 <HAL_CAN_IsSleepActive+0x20>
 800922c:	7afb      	ldrb	r3, [r7, #11]
 800922e:	2b02      	cmp	r3, #2
 8009230:	d108      	bne.n	8009244 <HAL_CAN_IsSleepActive+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Sleep mode */
    if ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	685b      	ldr	r3, [r3, #4]
 8009238:	f003 0302 	and.w	r3, r3, #2
 800923c:	2b00      	cmp	r3, #0
 800923e:	d001      	beq.n	8009244 <HAL_CAN_IsSleepActive+0x32>
    {
      status = 1U;
 8009240:	2301      	movs	r3, #1
 8009242:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return function status */
  return status;
 8009244:	68fb      	ldr	r3, [r7, #12]
}
 8009246:	4618      	mov	r0, r3
 8009248:	3714      	adds	r7, #20
 800924a:	46bd      	mov	sp, r7
 800924c:	bc80      	pop	{r7}
 800924e:	4770      	bx	lr

08009250 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8009250:	b480      	push	{r7}
 8009252:	b089      	sub	sp, #36	@ 0x24
 8009254:	af00      	add	r7, sp, #0
 8009256:	60f8      	str	r0, [r7, #12]
 8009258:	60b9      	str	r1, [r7, #8]
 800925a:	607a      	str	r2, [r7, #4]
 800925c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009264:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	689b      	ldr	r3, [r3, #8]
 800926c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800926e:	7ffb      	ldrb	r3, [r7, #31]
 8009270:	2b01      	cmp	r3, #1
 8009272:	d003      	beq.n	800927c <HAL_CAN_AddTxMessage+0x2c>
 8009274:	7ffb      	ldrb	r3, [r7, #31]
 8009276:	2b02      	cmp	r3, #2
 8009278:	f040 80ad 	bne.w	80093d6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800927c:	69bb      	ldr	r3, [r7, #24]
 800927e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009282:	2b00      	cmp	r3, #0
 8009284:	d10a      	bne.n	800929c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8009286:	69bb      	ldr	r3, [r7, #24]
 8009288:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800928c:	2b00      	cmp	r3, #0
 800928e:	d105      	bne.n	800929c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8009290:	69bb      	ldr	r3, [r7, #24]
 8009292:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8009296:	2b00      	cmp	r3, #0
 8009298:	f000 8095 	beq.w	80093c6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800929c:	69bb      	ldr	r3, [r7, #24]
 800929e:	0e1b      	lsrs	r3, r3, #24
 80092a0:	f003 0303 	and.w	r3, r3, #3
 80092a4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80092a6:	2201      	movs	r2, #1
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	409a      	lsls	r2, r3
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	689b      	ldr	r3, [r3, #8]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d10d      	bne.n	80092d4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80092c2:	68f9      	ldr	r1, [r7, #12]
 80092c4:	6809      	ldr	r1, [r1, #0]
 80092c6:	431a      	orrs	r2, r3
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	3318      	adds	r3, #24
 80092cc:	011b      	lsls	r3, r3, #4
 80092ce:	440b      	add	r3, r1
 80092d0:	601a      	str	r2, [r3, #0]
 80092d2:	e00f      	b.n	80092f4 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80092de:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80092e4:	68f9      	ldr	r1, [r7, #12]
 80092e6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80092e8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	3318      	adds	r3, #24
 80092ee:	011b      	lsls	r3, r3, #4
 80092f0:	440b      	add	r3, r1
 80092f2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	6819      	ldr	r1, [r3, #0]
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	691a      	ldr	r2, [r3, #16]
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	3318      	adds	r3, #24
 8009300:	011b      	lsls	r3, r3, #4
 8009302:	440b      	add	r3, r1
 8009304:	3304      	adds	r3, #4
 8009306:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	7d1b      	ldrb	r3, [r3, #20]
 800930c:	2b01      	cmp	r3, #1
 800930e:	d111      	bne.n	8009334 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681a      	ldr	r2, [r3, #0]
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	3318      	adds	r3, #24
 8009318:	011b      	lsls	r3, r3, #4
 800931a:	4413      	add	r3, r2
 800931c:	3304      	adds	r3, #4
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	68fa      	ldr	r2, [r7, #12]
 8009322:	6811      	ldr	r1, [r2, #0]
 8009324:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	3318      	adds	r3, #24
 800932c:	011b      	lsls	r3, r3, #4
 800932e:	440b      	add	r3, r1
 8009330:	3304      	adds	r3, #4
 8009332:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	3307      	adds	r3, #7
 8009338:	781b      	ldrb	r3, [r3, #0]
 800933a:	061a      	lsls	r2, r3, #24
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	3306      	adds	r3, #6
 8009340:	781b      	ldrb	r3, [r3, #0]
 8009342:	041b      	lsls	r3, r3, #16
 8009344:	431a      	orrs	r2, r3
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	3305      	adds	r3, #5
 800934a:	781b      	ldrb	r3, [r3, #0]
 800934c:	021b      	lsls	r3, r3, #8
 800934e:	4313      	orrs	r3, r2
 8009350:	687a      	ldr	r2, [r7, #4]
 8009352:	3204      	adds	r2, #4
 8009354:	7812      	ldrb	r2, [r2, #0]
 8009356:	4610      	mov	r0, r2
 8009358:	68fa      	ldr	r2, [r7, #12]
 800935a:	6811      	ldr	r1, [r2, #0]
 800935c:	ea43 0200 	orr.w	r2, r3, r0
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	011b      	lsls	r3, r3, #4
 8009364:	440b      	add	r3, r1
 8009366:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800936a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	3303      	adds	r3, #3
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	061a      	lsls	r2, r3, #24
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	3302      	adds	r3, #2
 8009378:	781b      	ldrb	r3, [r3, #0]
 800937a:	041b      	lsls	r3, r3, #16
 800937c:	431a      	orrs	r2, r3
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	3301      	adds	r3, #1
 8009382:	781b      	ldrb	r3, [r3, #0]
 8009384:	021b      	lsls	r3, r3, #8
 8009386:	4313      	orrs	r3, r2
 8009388:	687a      	ldr	r2, [r7, #4]
 800938a:	7812      	ldrb	r2, [r2, #0]
 800938c:	4610      	mov	r0, r2
 800938e:	68fa      	ldr	r2, [r7, #12]
 8009390:	6811      	ldr	r1, [r2, #0]
 8009392:	ea43 0200 	orr.w	r2, r3, r0
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	011b      	lsls	r3, r3, #4
 800939a:	440b      	add	r3, r1
 800939c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80093a0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681a      	ldr	r2, [r3, #0]
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	3318      	adds	r3, #24
 80093aa:	011b      	lsls	r3, r3, #4
 80093ac:	4413      	add	r3, r2
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	68fa      	ldr	r2, [r7, #12]
 80093b2:	6811      	ldr	r1, [r2, #0]
 80093b4:	f043 0201 	orr.w	r2, r3, #1
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	3318      	adds	r3, #24
 80093bc:	011b      	lsls	r3, r3, #4
 80093be:	440b      	add	r3, r1
 80093c0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80093c2:	2300      	movs	r3, #0
 80093c4:	e00e      	b.n	80093e4 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093ca:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80093d2:	2301      	movs	r3, #1
 80093d4:	e006      	b.n	80093e4 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093da:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80093e2:	2301      	movs	r3, #1
  }
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3724      	adds	r7, #36	@ 0x24
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bc80      	pop	{r7}
 80093ec:	4770      	bx	lr

080093ee <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80093ee:	b480      	push	{r7}
 80093f0:	b087      	sub	sp, #28
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	60f8      	str	r0, [r7, #12]
 80093f6:	60b9      	str	r1, [r7, #8]
 80093f8:	607a      	str	r2, [r7, #4]
 80093fa:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009402:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8009404:	7dfb      	ldrb	r3, [r7, #23]
 8009406:	2b01      	cmp	r3, #1
 8009408:	d003      	beq.n	8009412 <HAL_CAN_GetRxMessage+0x24>
 800940a:	7dfb      	ldrb	r3, [r7, #23]
 800940c:	2b02      	cmp	r3, #2
 800940e:	f040 8103 	bne.w	8009618 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d10e      	bne.n	8009436 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	68db      	ldr	r3, [r3, #12]
 800941e:	f003 0303 	and.w	r3, r3, #3
 8009422:	2b00      	cmp	r3, #0
 8009424:	d116      	bne.n	8009454 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800942a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8009432:	2301      	movs	r3, #1
 8009434:	e0f7      	b.n	8009626 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	691b      	ldr	r3, [r3, #16]
 800943c:	f003 0303 	and.w	r3, r3, #3
 8009440:	2b00      	cmp	r3, #0
 8009442:	d107      	bne.n	8009454 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009448:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8009450:	2301      	movs	r3, #1
 8009452:	e0e8      	b.n	8009626 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681a      	ldr	r2, [r3, #0]
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	331b      	adds	r3, #27
 800945c:	011b      	lsls	r3, r3, #4
 800945e:	4413      	add	r3, r2
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f003 0204 	and.w	r2, r3, #4
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	689b      	ldr	r3, [r3, #8]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d10c      	bne.n	800948c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681a      	ldr	r2, [r3, #0]
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	331b      	adds	r3, #27
 800947a:	011b      	lsls	r3, r3, #4
 800947c:	4413      	add	r3, r2
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	0d5b      	lsrs	r3, r3, #21
 8009482:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	601a      	str	r2, [r3, #0]
 800948a:	e00b      	b.n	80094a4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681a      	ldr	r2, [r3, #0]
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	331b      	adds	r3, #27
 8009494:	011b      	lsls	r3, r3, #4
 8009496:	4413      	add	r3, r2
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	08db      	lsrs	r3, r3, #3
 800949c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681a      	ldr	r2, [r3, #0]
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	331b      	adds	r3, #27
 80094ac:	011b      	lsls	r3, r3, #4
 80094ae:	4413      	add	r3, r2
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f003 0202 	and.w	r2, r3, #2
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681a      	ldr	r2, [r3, #0]
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	331b      	adds	r3, #27
 80094c2:	011b      	lsls	r3, r3, #4
 80094c4:	4413      	add	r3, r2
 80094c6:	3304      	adds	r3, #4
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f003 0308 	and.w	r3, r3, #8
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d003      	beq.n	80094da <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2208      	movs	r2, #8
 80094d6:	611a      	str	r2, [r3, #16]
 80094d8:	e00b      	b.n	80094f2 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681a      	ldr	r2, [r3, #0]
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	331b      	adds	r3, #27
 80094e2:	011b      	lsls	r3, r3, #4
 80094e4:	4413      	add	r3, r2
 80094e6:	3304      	adds	r3, #4
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f003 020f 	and.w	r2, r3, #15
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681a      	ldr	r2, [r3, #0]
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	331b      	adds	r3, #27
 80094fa:	011b      	lsls	r3, r3, #4
 80094fc:	4413      	add	r3, r2
 80094fe:	3304      	adds	r3, #4
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	0a1b      	lsrs	r3, r3, #8
 8009504:	b2da      	uxtb	r2, r3
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681a      	ldr	r2, [r3, #0]
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	331b      	adds	r3, #27
 8009512:	011b      	lsls	r3, r3, #4
 8009514:	4413      	add	r3, r2
 8009516:	3304      	adds	r3, #4
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	0c1b      	lsrs	r3, r3, #16
 800951c:	b29a      	uxth	r2, r3
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681a      	ldr	r2, [r3, #0]
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	011b      	lsls	r3, r3, #4
 800952a:	4413      	add	r3, r2
 800952c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	b2da      	uxtb	r2, r3
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681a      	ldr	r2, [r3, #0]
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	011b      	lsls	r3, r3, #4
 8009540:	4413      	add	r3, r2
 8009542:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	0a1a      	lsrs	r2, r3, #8
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	3301      	adds	r3, #1
 800954e:	b2d2      	uxtb	r2, r2
 8009550:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681a      	ldr	r2, [r3, #0]
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	011b      	lsls	r3, r3, #4
 800955a:	4413      	add	r3, r2
 800955c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	0c1a      	lsrs	r2, r3, #16
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	3302      	adds	r3, #2
 8009568:	b2d2      	uxtb	r2, r2
 800956a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681a      	ldr	r2, [r3, #0]
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	011b      	lsls	r3, r3, #4
 8009574:	4413      	add	r3, r2
 8009576:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	0e1a      	lsrs	r2, r3, #24
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	3303      	adds	r3, #3
 8009582:	b2d2      	uxtb	r2, r2
 8009584:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681a      	ldr	r2, [r3, #0]
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	011b      	lsls	r3, r3, #4
 800958e:	4413      	add	r3, r2
 8009590:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8009594:	681a      	ldr	r2, [r3, #0]
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	3304      	adds	r3, #4
 800959a:	b2d2      	uxtb	r2, r2
 800959c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681a      	ldr	r2, [r3, #0]
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	011b      	lsls	r3, r3, #4
 80095a6:	4413      	add	r3, r2
 80095a8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	0a1a      	lsrs	r2, r3, #8
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	3305      	adds	r3, #5
 80095b4:	b2d2      	uxtb	r2, r2
 80095b6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681a      	ldr	r2, [r3, #0]
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	011b      	lsls	r3, r3, #4
 80095c0:	4413      	add	r3, r2
 80095c2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	0c1a      	lsrs	r2, r3, #16
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	3306      	adds	r3, #6
 80095ce:	b2d2      	uxtb	r2, r2
 80095d0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681a      	ldr	r2, [r3, #0]
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	011b      	lsls	r3, r3, #4
 80095da:	4413      	add	r3, r2
 80095dc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	0e1a      	lsrs	r2, r3, #24
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	3307      	adds	r3, #7
 80095e8:	b2d2      	uxtb	r2, r2
 80095ea:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d108      	bne.n	8009604 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	68da      	ldr	r2, [r3, #12]
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f042 0220 	orr.w	r2, r2, #32
 8009600:	60da      	str	r2, [r3, #12]
 8009602:	e007      	b.n	8009614 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	691a      	ldr	r2, [r3, #16]
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f042 0220 	orr.w	r2, r2, #32
 8009612:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8009614:	2300      	movs	r3, #0
 8009616:	e006      	b.n	8009626 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800961c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8009624:	2301      	movs	r3, #1
  }
}
 8009626:	4618      	mov	r0, r3
 8009628:	371c      	adds	r7, #28
 800962a:	46bd      	mov	sp, r7
 800962c:	bc80      	pop	{r7}
 800962e:	4770      	bx	lr

08009630 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8009630:	b480      	push	{r7}
 8009632:	b085      	sub	sp, #20
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009640:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8009642:	7bfb      	ldrb	r3, [r7, #15]
 8009644:	2b01      	cmp	r3, #1
 8009646:	d002      	beq.n	800964e <HAL_CAN_ActivateNotification+0x1e>
 8009648:	7bfb      	ldrb	r3, [r7, #15]
 800964a:	2b02      	cmp	r3, #2
 800964c:	d109      	bne.n	8009662 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	6959      	ldr	r1, [r3, #20]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	683a      	ldr	r2, [r7, #0]
 800965a:	430a      	orrs	r2, r1
 800965c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800965e:	2300      	movs	r3, #0
 8009660:	e006      	b.n	8009670 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009666:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800966e:	2301      	movs	r3, #1
  }
}
 8009670:	4618      	mov	r0, r3
 8009672:	3714      	adds	r7, #20
 8009674:	46bd      	mov	sp, r7
 8009676:	bc80      	pop	{r7}
 8009678:	4770      	bx	lr

0800967a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800967a:	b580      	push	{r7, lr}
 800967c:	b08a      	sub	sp, #40	@ 0x28
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8009682:	2300      	movs	r3, #0
 8009684:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	695b      	ldr	r3, [r3, #20]
 800968c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	685b      	ldr	r3, [r3, #4]
 8009694:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	689b      	ldr	r3, [r3, #8]
 800969c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	68db      	ldr	r3, [r3, #12]
 80096a4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	691b      	ldr	r3, [r3, #16]
 80096ac:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	699b      	ldr	r3, [r3, #24]
 80096b4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80096b6:	6a3b      	ldr	r3, [r7, #32]
 80096b8:	f003 0301 	and.w	r3, r3, #1
 80096bc:	2b00      	cmp	r3, #0
 80096be:	f000 8083 	beq.w	80097c8 <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80096c2:	69bb      	ldr	r3, [r7, #24]
 80096c4:	f003 0301 	and.w	r3, r3, #1
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d025      	beq.n	8009718 <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	2201      	movs	r2, #1
 80096d2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80096d4:	69bb      	ldr	r3, [r7, #24]
 80096d6:	f003 0302 	and.w	r3, r3, #2
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d004      	beq.n	80096e8 <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	4798      	blx	r3
 80096e6:	e017      	b.n	8009718 <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80096e8:	69bb      	ldr	r3, [r7, #24]
 80096ea:	f003 0304 	and.w	r3, r3, #4
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d004      	beq.n	80096fc <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80096f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096f4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80096f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80096fa:	e00d      	b.n	8009718 <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80096fc:	69bb      	ldr	r3, [r7, #24]
 80096fe:	f003 0308 	and.w	r3, r3, #8
 8009702:	2b00      	cmp	r3, #0
 8009704:	d004      	beq.n	8009710 <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8009706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009708:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800970c:	627b      	str	r3, [r7, #36]	@ 0x24
 800970e:	e003      	b.n	8009718 <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8009718:	69bb      	ldr	r3, [r7, #24]
 800971a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800971e:	2b00      	cmp	r3, #0
 8009720:	d026      	beq.n	8009770 <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800972a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800972c:	69bb      	ldr	r3, [r7, #24]
 800972e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009732:	2b00      	cmp	r3, #0
 8009734:	d004      	beq.n	8009740 <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	4798      	blx	r3
 800973e:	e017      	b.n	8009770 <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8009740:	69bb      	ldr	r3, [r7, #24]
 8009742:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009746:	2b00      	cmp	r3, #0
 8009748:	d004      	beq.n	8009754 <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800974a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800974c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8009750:	627b      	str	r3, [r7, #36]	@ 0x24
 8009752:	e00d      	b.n	8009770 <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8009754:	69bb      	ldr	r3, [r7, #24]
 8009756:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800975a:	2b00      	cmp	r3, #0
 800975c:	d004      	beq.n	8009768 <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800975e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009760:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009764:	627b      	str	r3, [r7, #36]	@ 0x24
 8009766:	e003      	b.n	8009770 <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8009770:	69bb      	ldr	r3, [r7, #24]
 8009772:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009776:	2b00      	cmp	r3, #0
 8009778:	d026      	beq.n	80097c8 <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8009782:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8009784:	69bb      	ldr	r3, [r7, #24]
 8009786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800978a:	2b00      	cmp	r3, #0
 800978c:	d004      	beq.n	8009798 <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	4798      	blx	r3
 8009796:	e017      	b.n	80097c8 <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8009798:	69bb      	ldr	r3, [r7, #24]
 800979a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d004      	beq.n	80097ac <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80097a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80097a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80097aa:	e00d      	b.n	80097c8 <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80097ac:	69bb      	ldr	r3, [r7, #24]
 80097ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d004      	beq.n	80097c0 <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80097b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80097bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80097be:	e003      	b.n	80097c8 <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80097c8:	6a3b      	ldr	r3, [r7, #32]
 80097ca:	f003 0308 	and.w	r3, r3, #8
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d00c      	beq.n	80097ec <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	f003 0310 	and.w	r3, r3, #16
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d007      	beq.n	80097ec <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80097dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80097e2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	2210      	movs	r2, #16
 80097ea:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80097ec:	6a3b      	ldr	r3, [r7, #32]
 80097ee:	f003 0304 	and.w	r3, r3, #4
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d00c      	beq.n	8009810 <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	f003 0308 	and.w	r3, r3, #8
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d007      	beq.n	8009810 <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	2208      	movs	r2, #8
 8009806:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8009810:	6a3b      	ldr	r3, [r7, #32]
 8009812:	f003 0302 	and.w	r3, r3, #2
 8009816:	2b00      	cmp	r3, #0
 8009818:	d00a      	beq.n	8009830 <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	68db      	ldr	r3, [r3, #12]
 8009820:	f003 0303 	and.w	r3, r3, #3
 8009824:	2b00      	cmp	r3, #0
 8009826:	d003      	beq.n	8009830 <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8009830:	6a3b      	ldr	r3, [r7, #32]
 8009832:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009836:	2b00      	cmp	r3, #0
 8009838:	d00c      	beq.n	8009854 <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	f003 0310 	and.w	r3, r3, #16
 8009840:	2b00      	cmp	r3, #0
 8009842:	d007      	beq.n	8009854 <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8009844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009846:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800984a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	2210      	movs	r2, #16
 8009852:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8009854:	6a3b      	ldr	r3, [r7, #32]
 8009856:	f003 0320 	and.w	r3, r3, #32
 800985a:	2b00      	cmp	r3, #0
 800985c:	d00c      	beq.n	8009878 <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	f003 0308 	and.w	r3, r3, #8
 8009864:	2b00      	cmp	r3, #0
 8009866:	d007      	beq.n	8009878 <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	2208      	movs	r2, #8
 800986e:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8009878:	6a3b      	ldr	r3, [r7, #32]
 800987a:	f003 0310 	and.w	r3, r3, #16
 800987e:	2b00      	cmp	r3, #0
 8009880:	d00a      	beq.n	8009898 <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	691b      	ldr	r3, [r3, #16]
 8009888:	f003 0303 	and.w	r3, r3, #3
 800988c:	2b00      	cmp	r3, #0
 800988e:	d003      	beq.n	8009898 <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8009898:	6a3b      	ldr	r3, [r7, #32]
 800989a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d00c      	beq.n	80098bc <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80098a2:	69fb      	ldr	r3, [r7, #28]
 80098a4:	f003 0310 	and.w	r3, r3, #16
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d007      	beq.n	80098bc <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	2210      	movs	r2, #16
 80098b2:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80098bc:	6a3b      	ldr	r3, [r7, #32]
 80098be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d00c      	beq.n	80098e0 <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80098c6:	69fb      	ldr	r3, [r7, #28]
 80098c8:	f003 0308 	and.w	r3, r3, #8
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d007      	beq.n	80098e0 <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	2208      	movs	r2, #8
 80098d6:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80098e0:	6a3b      	ldr	r3, [r7, #32]
 80098e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d07b      	beq.n	80099e2 <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80098ea:	69fb      	ldr	r3, [r7, #28]
 80098ec:	f003 0304 	and.w	r3, r3, #4
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d072      	beq.n	80099da <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80098f4:	6a3b      	ldr	r3, [r7, #32]
 80098f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d008      	beq.n	8009910 <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8009904:	2b00      	cmp	r3, #0
 8009906:	d003      	beq.n	8009910 <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8009908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800990a:	f043 0301 	orr.w	r3, r3, #1
 800990e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8009910:	6a3b      	ldr	r3, [r7, #32]
 8009912:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009916:	2b00      	cmp	r3, #0
 8009918:	d008      	beq.n	800992c <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8009920:	2b00      	cmp	r3, #0
 8009922:	d003      	beq.n	800992c <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8009924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009926:	f043 0302 	orr.w	r3, r3, #2
 800992a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800992c:	6a3b      	ldr	r3, [r7, #32]
 800992e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009932:	2b00      	cmp	r3, #0
 8009934:	d008      	beq.n	8009948 <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800993c:	2b00      	cmp	r3, #0
 800993e:	d003      	beq.n	8009948 <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8009940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009942:	f043 0304 	orr.w	r3, r3, #4
 8009946:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8009948:	6a3b      	ldr	r3, [r7, #32]
 800994a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800994e:	2b00      	cmp	r3, #0
 8009950:	d043      	beq.n	80099da <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8009958:	2b00      	cmp	r3, #0
 800995a:	d03e      	beq.n	80099da <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009962:	2b60      	cmp	r3, #96	@ 0x60
 8009964:	d02b      	beq.n	80099be <HAL_CAN_IRQHandler+0x344>
 8009966:	2b60      	cmp	r3, #96	@ 0x60
 8009968:	d82e      	bhi.n	80099c8 <HAL_CAN_IRQHandler+0x34e>
 800996a:	2b50      	cmp	r3, #80	@ 0x50
 800996c:	d022      	beq.n	80099b4 <HAL_CAN_IRQHandler+0x33a>
 800996e:	2b50      	cmp	r3, #80	@ 0x50
 8009970:	d82a      	bhi.n	80099c8 <HAL_CAN_IRQHandler+0x34e>
 8009972:	2b40      	cmp	r3, #64	@ 0x40
 8009974:	d019      	beq.n	80099aa <HAL_CAN_IRQHandler+0x330>
 8009976:	2b40      	cmp	r3, #64	@ 0x40
 8009978:	d826      	bhi.n	80099c8 <HAL_CAN_IRQHandler+0x34e>
 800997a:	2b30      	cmp	r3, #48	@ 0x30
 800997c:	d010      	beq.n	80099a0 <HAL_CAN_IRQHandler+0x326>
 800997e:	2b30      	cmp	r3, #48	@ 0x30
 8009980:	d822      	bhi.n	80099c8 <HAL_CAN_IRQHandler+0x34e>
 8009982:	2b10      	cmp	r3, #16
 8009984:	d002      	beq.n	800998c <HAL_CAN_IRQHandler+0x312>
 8009986:	2b20      	cmp	r3, #32
 8009988:	d005      	beq.n	8009996 <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800998a:	e01d      	b.n	80099c8 <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 800998c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800998e:	f043 0308 	orr.w	r3, r3, #8
 8009992:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8009994:	e019      	b.n	80099ca <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 8009996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009998:	f043 0310 	orr.w	r3, r3, #16
 800999c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800999e:	e014      	b.n	80099ca <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 80099a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099a2:	f043 0320 	orr.w	r3, r3, #32
 80099a6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80099a8:	e00f      	b.n	80099ca <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 80099aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099b0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80099b2:	e00a      	b.n	80099ca <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 80099b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099ba:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80099bc:	e005      	b.n	80099ca <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 80099be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80099c4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80099c6:	e000      	b.n	80099ca <HAL_CAN_IRQHandler+0x350>
            break;
 80099c8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	699a      	ldr	r2, [r3, #24]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80099d8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	2204      	movs	r2, #4
 80099e0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80099e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d009      	beq.n	80099fc <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80099ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ee:	431a      	orrs	r2, r3
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80099fc:	bf00      	nop
 80099fe:	3728      	adds	r7, #40	@ 0x28
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}

08009a04 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b083      	sub	sp, #12
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8009a0c:	bf00      	nop
 8009a0e:	370c      	adds	r7, #12
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bc80      	pop	{r7}
 8009a14:	4770      	bx	lr

08009a16 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8009a16:	b480      	push	{r7}
 8009a18:	b083      	sub	sp, #12
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8009a1e:	bf00      	nop
 8009a20:	370c      	adds	r7, #12
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bc80      	pop	{r7}
 8009a26:	4770      	bx	lr

08009a28 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b083      	sub	sp, #12
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8009a30:	bf00      	nop
 8009a32:	370c      	adds	r7, #12
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bc80      	pop	{r7}
 8009a38:	4770      	bx	lr

08009a3a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009a3a:	b480      	push	{r7}
 8009a3c:	b083      	sub	sp, #12
 8009a3e:	af00      	add	r7, sp, #0
 8009a40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8009a42:	bf00      	nop
 8009a44:	370c      	adds	r7, #12
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bc80      	pop	{r7}
 8009a4a:	4770      	bx	lr

08009a4c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b083      	sub	sp, #12
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8009a54:	bf00      	nop
 8009a56:	370c      	adds	r7, #12
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bc80      	pop	{r7}
 8009a5c:	4770      	bx	lr

08009a5e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009a5e:	b480      	push	{r7}
 8009a60:	b083      	sub	sp, #12
 8009a62:	af00      	add	r7, sp, #0
 8009a64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8009a66:	bf00      	nop
 8009a68:	370c      	adds	r7, #12
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bc80      	pop	{r7}
 8009a6e:	4770      	bx	lr

08009a70 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b083      	sub	sp, #12
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8009a78:	bf00      	nop
 8009a7a:	370c      	adds	r7, #12
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bc80      	pop	{r7}
 8009a80:	4770      	bx	lr

08009a82 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8009a82:	b480      	push	{r7}
 8009a84:	b083      	sub	sp, #12
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8009a8a:	bf00      	nop
 8009a8c:	370c      	adds	r7, #12
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bc80      	pop	{r7}
 8009a92:	4770      	bx	lr

08009a94 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b083      	sub	sp, #12
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8009a9c:	bf00      	nop
 8009a9e:	370c      	adds	r7, #12
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bc80      	pop	{r7}
 8009aa4:	4770      	bx	lr

08009aa6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8009aa6:	b480      	push	{r7}
 8009aa8:	b083      	sub	sp, #12
 8009aaa:	af00      	add	r7, sp, #0
 8009aac:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8009aae:	bf00      	nop
 8009ab0:	370c      	adds	r7, #12
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bc80      	pop	{r7}
 8009ab6:	4770      	bx	lr

08009ab8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b083      	sub	sp, #12
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8009ac0:	bf00      	nop
 8009ac2:	370c      	adds	r7, #12
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bc80      	pop	{r7}
 8009ac8:	4770      	bx	lr

08009aca <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8009aca:	b480      	push	{r7}
 8009acc:	b083      	sub	sp, #12
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8009ad2:	bf00      	nop
 8009ad4:	370c      	adds	r7, #12
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bc80      	pop	{r7}
 8009ada:	4770      	bx	lr

08009adc <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 8009adc:	b480      	push	{r7}
 8009ade:	b083      	sub	sp, #12
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	370c      	adds	r7, #12
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bc80      	pop	{r7}
 8009af0:	4770      	bx	lr
	...

08009af4 <__NVIC_SetPriorityGrouping>:
{
 8009af4:	b480      	push	{r7}
 8009af6:	b085      	sub	sp, #20
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f003 0307 	and.w	r3, r3, #7
 8009b02:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009b04:	4b0c      	ldr	r3, [pc, #48]	@ (8009b38 <__NVIC_SetPriorityGrouping+0x44>)
 8009b06:	68db      	ldr	r3, [r3, #12]
 8009b08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009b0a:	68ba      	ldr	r2, [r7, #8]
 8009b0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8009b10:	4013      	ands	r3, r2
 8009b12:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009b1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8009b20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009b24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009b26:	4a04      	ldr	r2, [pc, #16]	@ (8009b38 <__NVIC_SetPriorityGrouping+0x44>)
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	60d3      	str	r3, [r2, #12]
}
 8009b2c:	bf00      	nop
 8009b2e:	3714      	adds	r7, #20
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bc80      	pop	{r7}
 8009b34:	4770      	bx	lr
 8009b36:	bf00      	nop
 8009b38:	e000ed00 	.word	0xe000ed00

08009b3c <__NVIC_GetPriorityGrouping>:
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009b40:	4b04      	ldr	r3, [pc, #16]	@ (8009b54 <__NVIC_GetPriorityGrouping+0x18>)
 8009b42:	68db      	ldr	r3, [r3, #12]
 8009b44:	0a1b      	lsrs	r3, r3, #8
 8009b46:	f003 0307 	and.w	r3, r3, #7
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bc80      	pop	{r7}
 8009b50:	4770      	bx	lr
 8009b52:	bf00      	nop
 8009b54:	e000ed00 	.word	0xe000ed00

08009b58 <__NVIC_EnableIRQ>:
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b083      	sub	sp, #12
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	4603      	mov	r3, r0
 8009b60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	db0b      	blt.n	8009b82 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009b6a:	79fb      	ldrb	r3, [r7, #7]
 8009b6c:	f003 021f 	and.w	r2, r3, #31
 8009b70:	4906      	ldr	r1, [pc, #24]	@ (8009b8c <__NVIC_EnableIRQ+0x34>)
 8009b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b76:	095b      	lsrs	r3, r3, #5
 8009b78:	2001      	movs	r0, #1
 8009b7a:	fa00 f202 	lsl.w	r2, r0, r2
 8009b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009b82:	bf00      	nop
 8009b84:	370c      	adds	r7, #12
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bc80      	pop	{r7}
 8009b8a:	4770      	bx	lr
 8009b8c:	e000e100 	.word	0xe000e100

08009b90 <__NVIC_SetPriority>:
{
 8009b90:	b480      	push	{r7}
 8009b92:	b083      	sub	sp, #12
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	4603      	mov	r3, r0
 8009b98:	6039      	str	r1, [r7, #0]
 8009b9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	db0a      	blt.n	8009bba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	b2da      	uxtb	r2, r3
 8009ba8:	490c      	ldr	r1, [pc, #48]	@ (8009bdc <__NVIC_SetPriority+0x4c>)
 8009baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009bae:	0112      	lsls	r2, r2, #4
 8009bb0:	b2d2      	uxtb	r2, r2
 8009bb2:	440b      	add	r3, r1
 8009bb4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009bb8:	e00a      	b.n	8009bd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	b2da      	uxtb	r2, r3
 8009bbe:	4908      	ldr	r1, [pc, #32]	@ (8009be0 <__NVIC_SetPriority+0x50>)
 8009bc0:	79fb      	ldrb	r3, [r7, #7]
 8009bc2:	f003 030f 	and.w	r3, r3, #15
 8009bc6:	3b04      	subs	r3, #4
 8009bc8:	0112      	lsls	r2, r2, #4
 8009bca:	b2d2      	uxtb	r2, r2
 8009bcc:	440b      	add	r3, r1
 8009bce:	761a      	strb	r2, [r3, #24]
}
 8009bd0:	bf00      	nop
 8009bd2:	370c      	adds	r7, #12
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bc80      	pop	{r7}
 8009bd8:	4770      	bx	lr
 8009bda:	bf00      	nop
 8009bdc:	e000e100 	.word	0xe000e100
 8009be0:	e000ed00 	.word	0xe000ed00

08009be4 <NVIC_EncodePriority>:
{
 8009be4:	b480      	push	{r7}
 8009be6:	b089      	sub	sp, #36	@ 0x24
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	60f8      	str	r0, [r7, #12]
 8009bec:	60b9      	str	r1, [r7, #8]
 8009bee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	f003 0307 	and.w	r3, r3, #7
 8009bf6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009bf8:	69fb      	ldr	r3, [r7, #28]
 8009bfa:	f1c3 0307 	rsb	r3, r3, #7
 8009bfe:	2b04      	cmp	r3, #4
 8009c00:	bf28      	it	cs
 8009c02:	2304      	movcs	r3, #4
 8009c04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009c06:	69fb      	ldr	r3, [r7, #28]
 8009c08:	3304      	adds	r3, #4
 8009c0a:	2b06      	cmp	r3, #6
 8009c0c:	d902      	bls.n	8009c14 <NVIC_EncodePriority+0x30>
 8009c0e:	69fb      	ldr	r3, [r7, #28]
 8009c10:	3b03      	subs	r3, #3
 8009c12:	e000      	b.n	8009c16 <NVIC_EncodePriority+0x32>
 8009c14:	2300      	movs	r3, #0
 8009c16:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009c18:	f04f 32ff 	mov.w	r2, #4294967295
 8009c1c:	69bb      	ldr	r3, [r7, #24]
 8009c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8009c22:	43da      	mvns	r2, r3
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	401a      	ands	r2, r3
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009c2c:	f04f 31ff 	mov.w	r1, #4294967295
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	fa01 f303 	lsl.w	r3, r1, r3
 8009c36:	43d9      	mvns	r1, r3
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009c3c:	4313      	orrs	r3, r2
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3724      	adds	r7, #36	@ 0x24
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bc80      	pop	{r7}
 8009c46:	4770      	bx	lr

08009c48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b082      	sub	sp, #8
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f7ff ff4f 	bl	8009af4 <__NVIC_SetPriorityGrouping>
}
 8009c56:	bf00      	nop
 8009c58:	3708      	adds	r7, #8
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}

08009c5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009c5e:	b580      	push	{r7, lr}
 8009c60:	b086      	sub	sp, #24
 8009c62:	af00      	add	r7, sp, #0
 8009c64:	4603      	mov	r3, r0
 8009c66:	60b9      	str	r1, [r7, #8]
 8009c68:	607a      	str	r2, [r7, #4]
 8009c6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009c70:	f7ff ff64 	bl	8009b3c <__NVIC_GetPriorityGrouping>
 8009c74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009c76:	687a      	ldr	r2, [r7, #4]
 8009c78:	68b9      	ldr	r1, [r7, #8]
 8009c7a:	6978      	ldr	r0, [r7, #20]
 8009c7c:	f7ff ffb2 	bl	8009be4 <NVIC_EncodePriority>
 8009c80:	4602      	mov	r2, r0
 8009c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c86:	4611      	mov	r1, r2
 8009c88:	4618      	mov	r0, r3
 8009c8a:	f7ff ff81 	bl	8009b90 <__NVIC_SetPriority>
}
 8009c8e:	bf00      	nop
 8009c90:	3718      	adds	r7, #24
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}

08009c96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009c96:	b580      	push	{r7, lr}
 8009c98:	b082      	sub	sp, #8
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f7ff ff57 	bl	8009b58 <__NVIC_EnableIRQ>
}
 8009caa:	bf00      	nop
 8009cac:	3708      	adds	r7, #8
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
	...

08009cb4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b085      	sub	sp, #20
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d101      	bne.n	8009cca <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	e043      	b.n	8009d52 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	461a      	mov	r2, r3
 8009cd0:	4b22      	ldr	r3, [pc, #136]	@ (8009d5c <HAL_DMA_Init+0xa8>)
 8009cd2:	4413      	add	r3, r2
 8009cd4:	4a22      	ldr	r2, [pc, #136]	@ (8009d60 <HAL_DMA_Init+0xac>)
 8009cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8009cda:	091b      	lsrs	r3, r3, #4
 8009cdc:	009a      	lsls	r2, r3, #2
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	4a1f      	ldr	r2, [pc, #124]	@ (8009d64 <HAL_DMA_Init+0xb0>)
 8009ce6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2202      	movs	r2, #2
 8009cec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8009cfe:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8009d02:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8009d0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	68db      	ldr	r3, [r3, #12]
 8009d12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009d18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	695b      	ldr	r3, [r3, #20]
 8009d1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009d24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	69db      	ldr	r3, [r3, #28]
 8009d2a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009d2c:	68fa      	ldr	r2, [r7, #12]
 8009d2e:	4313      	orrs	r3, r2
 8009d30:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	68fa      	ldr	r2, [r7, #12]
 8009d38:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2201      	movs	r2, #1
 8009d44:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8009d50:	2300      	movs	r3, #0
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3714      	adds	r7, #20
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bc80      	pop	{r7}
 8009d5a:	4770      	bx	lr
 8009d5c:	bffdfff8 	.word	0xbffdfff8
 8009d60:	cccccccd 	.word	0xcccccccd
 8009d64:	40020000 	.word	0x40020000

08009d68 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b086      	sub	sp, #24
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	60f8      	str	r0, [r7, #12]
 8009d70:	60b9      	str	r1, [r7, #8]
 8009d72:	607a      	str	r2, [r7, #4]
 8009d74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009d76:	2300      	movs	r3, #0
 8009d78:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009d80:	2b01      	cmp	r3, #1
 8009d82:	d101      	bne.n	8009d88 <HAL_DMA_Start_IT+0x20>
 8009d84:	2302      	movs	r3, #2
 8009d86:	e04b      	b.n	8009e20 <HAL_DMA_Start_IT+0xb8>
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	2201      	movs	r2, #1
 8009d8c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009d96:	b2db      	uxtb	r3, r3
 8009d98:	2b01      	cmp	r3, #1
 8009d9a:	d13a      	bne.n	8009e12 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	2202      	movs	r2, #2
 8009da0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	2200      	movs	r2, #0
 8009da8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	681a      	ldr	r2, [r3, #0]
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f022 0201 	bic.w	r2, r2, #1
 8009db8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	687a      	ldr	r2, [r7, #4]
 8009dbe:	68b9      	ldr	r1, [r7, #8]
 8009dc0:	68f8      	ldr	r0, [r7, #12]
 8009dc2:	f000 f937 	bl	800a034 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d008      	beq.n	8009de0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	681a      	ldr	r2, [r3, #0]
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f042 020e 	orr.w	r2, r2, #14
 8009ddc:	601a      	str	r2, [r3, #0]
 8009dde:	e00f      	b.n	8009e00 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	681a      	ldr	r2, [r3, #0]
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f022 0204 	bic.w	r2, r2, #4
 8009dee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	681a      	ldr	r2, [r3, #0]
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f042 020a 	orr.w	r2, r2, #10
 8009dfe:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	681a      	ldr	r2, [r3, #0]
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f042 0201 	orr.w	r2, r2, #1
 8009e0e:	601a      	str	r2, [r3, #0]
 8009e10:	e005      	b.n	8009e1e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	2200      	movs	r2, #0
 8009e16:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8009e1a:	2302      	movs	r3, #2
 8009e1c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8009e1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3718      	adds	r7, #24
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}

08009e28 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b084      	sub	sp, #16
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e44:	2204      	movs	r2, #4
 8009e46:	409a      	lsls	r2, r3
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	4013      	ands	r3, r2
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d04f      	beq.n	8009ef0 <HAL_DMA_IRQHandler+0xc8>
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	f003 0304 	and.w	r3, r3, #4
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d04a      	beq.n	8009ef0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f003 0320 	and.w	r3, r3, #32
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d107      	bne.n	8009e78 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	681a      	ldr	r2, [r3, #0]
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f022 0204 	bic.w	r2, r2, #4
 8009e76:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4a66      	ldr	r2, [pc, #408]	@ (800a018 <HAL_DMA_IRQHandler+0x1f0>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d029      	beq.n	8009ed6 <HAL_DMA_IRQHandler+0xae>
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	4a65      	ldr	r2, [pc, #404]	@ (800a01c <HAL_DMA_IRQHandler+0x1f4>)
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d022      	beq.n	8009ed2 <HAL_DMA_IRQHandler+0xaa>
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	4a63      	ldr	r2, [pc, #396]	@ (800a020 <HAL_DMA_IRQHandler+0x1f8>)
 8009e92:	4293      	cmp	r3, r2
 8009e94:	d01a      	beq.n	8009ecc <HAL_DMA_IRQHandler+0xa4>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	4a62      	ldr	r2, [pc, #392]	@ (800a024 <HAL_DMA_IRQHandler+0x1fc>)
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d012      	beq.n	8009ec6 <HAL_DMA_IRQHandler+0x9e>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	4a60      	ldr	r2, [pc, #384]	@ (800a028 <HAL_DMA_IRQHandler+0x200>)
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d00a      	beq.n	8009ec0 <HAL_DMA_IRQHandler+0x98>
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	4a5f      	ldr	r2, [pc, #380]	@ (800a02c <HAL_DMA_IRQHandler+0x204>)
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	d102      	bne.n	8009eba <HAL_DMA_IRQHandler+0x92>
 8009eb4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8009eb8:	e00e      	b.n	8009ed8 <HAL_DMA_IRQHandler+0xb0>
 8009eba:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8009ebe:	e00b      	b.n	8009ed8 <HAL_DMA_IRQHandler+0xb0>
 8009ec0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8009ec4:	e008      	b.n	8009ed8 <HAL_DMA_IRQHandler+0xb0>
 8009ec6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009eca:	e005      	b.n	8009ed8 <HAL_DMA_IRQHandler+0xb0>
 8009ecc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009ed0:	e002      	b.n	8009ed8 <HAL_DMA_IRQHandler+0xb0>
 8009ed2:	2340      	movs	r3, #64	@ 0x40
 8009ed4:	e000      	b.n	8009ed8 <HAL_DMA_IRQHandler+0xb0>
 8009ed6:	2304      	movs	r3, #4
 8009ed8:	4a55      	ldr	r2, [pc, #340]	@ (800a030 <HAL_DMA_IRQHandler+0x208>)
 8009eda:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	f000 8094 	beq.w	800a00e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8009eee:	e08e      	b.n	800a00e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ef4:	2202      	movs	r2, #2
 8009ef6:	409a      	lsls	r2, r3
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	4013      	ands	r3, r2
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d056      	beq.n	8009fae <HAL_DMA_IRQHandler+0x186>
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	f003 0302 	and.w	r3, r3, #2
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d051      	beq.n	8009fae <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f003 0320 	and.w	r3, r3, #32
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d10b      	bne.n	8009f30 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	681a      	ldr	r2, [r3, #0]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f022 020a 	bic.w	r2, r2, #10
 8009f26:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2201      	movs	r2, #1
 8009f2c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	4a38      	ldr	r2, [pc, #224]	@ (800a018 <HAL_DMA_IRQHandler+0x1f0>)
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d029      	beq.n	8009f8e <HAL_DMA_IRQHandler+0x166>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	4a37      	ldr	r2, [pc, #220]	@ (800a01c <HAL_DMA_IRQHandler+0x1f4>)
 8009f40:	4293      	cmp	r3, r2
 8009f42:	d022      	beq.n	8009f8a <HAL_DMA_IRQHandler+0x162>
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	4a35      	ldr	r2, [pc, #212]	@ (800a020 <HAL_DMA_IRQHandler+0x1f8>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d01a      	beq.n	8009f84 <HAL_DMA_IRQHandler+0x15c>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	4a34      	ldr	r2, [pc, #208]	@ (800a024 <HAL_DMA_IRQHandler+0x1fc>)
 8009f54:	4293      	cmp	r3, r2
 8009f56:	d012      	beq.n	8009f7e <HAL_DMA_IRQHandler+0x156>
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4a32      	ldr	r2, [pc, #200]	@ (800a028 <HAL_DMA_IRQHandler+0x200>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d00a      	beq.n	8009f78 <HAL_DMA_IRQHandler+0x150>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	4a31      	ldr	r2, [pc, #196]	@ (800a02c <HAL_DMA_IRQHandler+0x204>)
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	d102      	bne.n	8009f72 <HAL_DMA_IRQHandler+0x14a>
 8009f6c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8009f70:	e00e      	b.n	8009f90 <HAL_DMA_IRQHandler+0x168>
 8009f72:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009f76:	e00b      	b.n	8009f90 <HAL_DMA_IRQHandler+0x168>
 8009f78:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009f7c:	e008      	b.n	8009f90 <HAL_DMA_IRQHandler+0x168>
 8009f7e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009f82:	e005      	b.n	8009f90 <HAL_DMA_IRQHandler+0x168>
 8009f84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009f88:	e002      	b.n	8009f90 <HAL_DMA_IRQHandler+0x168>
 8009f8a:	2320      	movs	r3, #32
 8009f8c:	e000      	b.n	8009f90 <HAL_DMA_IRQHandler+0x168>
 8009f8e:	2302      	movs	r3, #2
 8009f90:	4a27      	ldr	r2, [pc, #156]	@ (800a030 <HAL_DMA_IRQHandler+0x208>)
 8009f92:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2200      	movs	r2, #0
 8009f98:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d034      	beq.n	800a00e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8009fac:	e02f      	b.n	800a00e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fb2:	2208      	movs	r2, #8
 8009fb4:	409a      	lsls	r2, r3
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	4013      	ands	r3, r2
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d028      	beq.n	800a010 <HAL_DMA_IRQHandler+0x1e8>
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	f003 0308 	and.w	r3, r3, #8
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d023      	beq.n	800a010 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	681a      	ldr	r2, [r3, #0]
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f022 020e 	bic.w	r2, r2, #14
 8009fd6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fe0:	2101      	movs	r1, #1
 8009fe2:	fa01 f202 	lsl.w	r2, r1, r2
 8009fe6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2201      	movs	r2, #1
 8009fec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2201      	movs	r2, #1
 8009ff2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a002:	2b00      	cmp	r3, #0
 800a004:	d004      	beq.n	800a010 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	4798      	blx	r3
    }
  }
  return;
 800a00e:	bf00      	nop
 800a010:	bf00      	nop
}
 800a012:	3710      	adds	r7, #16
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}
 800a018:	40020008 	.word	0x40020008
 800a01c:	4002001c 	.word	0x4002001c
 800a020:	40020030 	.word	0x40020030
 800a024:	40020044 	.word	0x40020044
 800a028:	40020058 	.word	0x40020058
 800a02c:	4002006c 	.word	0x4002006c
 800a030:	40020000 	.word	0x40020000

0800a034 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a034:	b480      	push	{r7}
 800a036:	b085      	sub	sp, #20
 800a038:	af00      	add	r7, sp, #0
 800a03a:	60f8      	str	r0, [r7, #12]
 800a03c:	60b9      	str	r1, [r7, #8]
 800a03e:	607a      	str	r2, [r7, #4]
 800a040:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a04a:	2101      	movs	r1, #1
 800a04c:	fa01 f202 	lsl.w	r2, r1, r2
 800a050:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	683a      	ldr	r2, [r7, #0]
 800a058:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	2b10      	cmp	r3, #16
 800a060:	d108      	bne.n	800a074 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	687a      	ldr	r2, [r7, #4]
 800a068:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	68ba      	ldr	r2, [r7, #8]
 800a070:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800a072:	e007      	b.n	800a084 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	68ba      	ldr	r2, [r7, #8]
 800a07a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	687a      	ldr	r2, [r7, #4]
 800a082:	60da      	str	r2, [r3, #12]
}
 800a084:	bf00      	nop
 800a086:	3714      	adds	r7, #20
 800a088:	46bd      	mov	sp, r7
 800a08a:	bc80      	pop	{r7}
 800a08c:	4770      	bx	lr
	...

0800a090 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800a090:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a092:	b087      	sub	sp, #28
 800a094:	af00      	add	r7, sp, #0
 800a096:	60f8      	str	r0, [r7, #12]
 800a098:	60b9      	str	r1, [r7, #8]
 800a09a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a09e:	2301      	movs	r3, #1
 800a0a0:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a0aa:	4b2f      	ldr	r3, [pc, #188]	@ (800a168 <HAL_FLASH_Program+0xd8>)
 800a0ac:	7e1b      	ldrb	r3, [r3, #24]
 800a0ae:	2b01      	cmp	r3, #1
 800a0b0:	d101      	bne.n	800a0b6 <HAL_FLASH_Program+0x26>
 800a0b2:	2302      	movs	r3, #2
 800a0b4:	e054      	b.n	800a160 <HAL_FLASH_Program+0xd0>
 800a0b6:	4b2c      	ldr	r3, [pc, #176]	@ (800a168 <HAL_FLASH_Program+0xd8>)
 800a0b8:	2201      	movs	r2, #1
 800a0ba:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800a0bc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800a0c0:	f000 f9a4 	bl	800a40c <FLASH_WaitForLastOperation>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 800a0c8:	7dfb      	ldrb	r3, [r7, #23]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d144      	bne.n	800a158 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	d102      	bne.n	800a0da <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	757b      	strb	r3, [r7, #21]
 800a0d8:	e007      	b.n	800a0ea <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	2b02      	cmp	r3, #2
 800a0de:	d102      	bne.n	800a0e6 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 800a0e0:	2302      	movs	r3, #2
 800a0e2:	757b      	strb	r3, [r7, #21]
 800a0e4:	e001      	b.n	800a0ea <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800a0e6:	2304      	movs	r3, #4
 800a0e8:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	75bb      	strb	r3, [r7, #22]
 800a0ee:	e02d      	b.n	800a14c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800a0f0:	7dbb      	ldrb	r3, [r7, #22]
 800a0f2:	005a      	lsls	r2, r3, #1
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	eb02 0c03 	add.w	ip, r2, r3
 800a0fa:	7dbb      	ldrb	r3, [r7, #22]
 800a0fc:	0119      	lsls	r1, r3, #4
 800a0fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a102:	f1c1 0620 	rsb	r6, r1, #32
 800a106:	f1a1 0020 	sub.w	r0, r1, #32
 800a10a:	fa22 f401 	lsr.w	r4, r2, r1
 800a10e:	fa03 f606 	lsl.w	r6, r3, r6
 800a112:	4334      	orrs	r4, r6
 800a114:	fa23 f000 	lsr.w	r0, r3, r0
 800a118:	4304      	orrs	r4, r0
 800a11a:	fa23 f501 	lsr.w	r5, r3, r1
 800a11e:	b2a3      	uxth	r3, r4
 800a120:	4619      	mov	r1, r3
 800a122:	4660      	mov	r0, ip
 800a124:	f000 f956 	bl	800a3d4 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800a128:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800a12c:	f000 f96e 	bl	800a40c <FLASH_WaitForLastOperation>
 800a130:	4603      	mov	r3, r0
 800a132:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a134:	4b0d      	ldr	r3, [pc, #52]	@ (800a16c <HAL_FLASH_Program+0xdc>)
 800a136:	691b      	ldr	r3, [r3, #16]
 800a138:	4a0c      	ldr	r2, [pc, #48]	@ (800a16c <HAL_FLASH_Program+0xdc>)
 800a13a:	f023 0301 	bic.w	r3, r3, #1
 800a13e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 800a140:	7dfb      	ldrb	r3, [r7, #23]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d107      	bne.n	800a156 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800a146:	7dbb      	ldrb	r3, [r7, #22]
 800a148:	3301      	adds	r3, #1
 800a14a:	75bb      	strb	r3, [r7, #22]
 800a14c:	7dba      	ldrb	r2, [r7, #22]
 800a14e:	7d7b      	ldrb	r3, [r7, #21]
 800a150:	429a      	cmp	r2, r3
 800a152:	d3cd      	bcc.n	800a0f0 <HAL_FLASH_Program+0x60>
 800a154:	e000      	b.n	800a158 <HAL_FLASH_Program+0xc8>
      {
        break;
 800a156:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a158:	4b03      	ldr	r3, [pc, #12]	@ (800a168 <HAL_FLASH_Program+0xd8>)
 800a15a:	2200      	movs	r2, #0
 800a15c:	761a      	strb	r2, [r3, #24]

  return status;
 800a15e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a160:	4618      	mov	r0, r3
 800a162:	371c      	adds	r7, #28
 800a164:	46bd      	mov	sp, r7
 800a166:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a168:	20000b18 	.word	0x20000b18
 800a16c:	40022000 	.word	0x40022000

0800a170 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b082      	sub	sp, #8
 800a174:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 800a176:	2300      	movs	r3, #0
 800a178:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK1) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK1) || \
    (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2)))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800a17a:	4b6b      	ldr	r3, [pc, #428]	@ (800a328 <HAL_FLASH_IRQHandler+0x1b8>)
 800a17c:	68db      	ldr	r3, [r3, #12]
 800a17e:	f003 0310 	and.w	r3, r3, #16
 800a182:	2b00      	cmp	r3, #0
 800a184:	d105      	bne.n	800a192 <HAL_FLASH_IRQHandler+0x22>
 800a186:	4b68      	ldr	r3, [pc, #416]	@ (800a328 <HAL_FLASH_IRQHandler+0x1b8>)
 800a188:	68db      	ldr	r3, [r3, #12]
 800a18a:	f003 0304 	and.w	r3, r3, #4
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d00e      	beq.n	800a1b0 <HAL_FLASH_IRQHandler+0x40>
#endif /* FLASH_BANK2_END */
  {
    /* Return the faulty address */
    addresstmp = pFlash.Address;
 800a192:	4b66      	ldr	r3, [pc, #408]	@ (800a32c <HAL_FLASH_IRQHandler+0x1bc>)
 800a194:	689b      	ldr	r3, [r3, #8]
 800a196:	607b      	str	r3, [r7, #4]
    /* Reset address */
    pFlash.Address = 0xFFFFFFFFU;
 800a198:	4b64      	ldr	r3, [pc, #400]	@ (800a32c <HAL_FLASH_IRQHandler+0x1bc>)
 800a19a:	f04f 32ff 	mov.w	r2, #4294967295
 800a19e:	609a      	str	r2, [r3, #8]
  
    /* Save the Error code */
    FLASH_SetErrorCode();
 800a1a0:	f000 f97a 	bl	800a498 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f000 f8cc 	bl	800a342 <HAL_FLASH_OperationErrorCallback>

    /* Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800a1aa:	4b60      	ldr	r3, [pc, #384]	@ (800a32c <HAL_FLASH_IRQHandler+0x1bc>)
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	701a      	strb	r2, [r3, #0]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP_BANK1))
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP_BANK1);
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800a1b0:	4b5d      	ldr	r3, [pc, #372]	@ (800a328 <HAL_FLASH_IRQHandler+0x1b8>)
 800a1b2:	68db      	ldr	r3, [r3, #12]
 800a1b4:	f003 0320 	and.w	r3, r3, #32
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	f000 80a0 	beq.w	800a2fe <HAL_FLASH_IRQHandler+0x18e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800a1be:	4b5a      	ldr	r3, [pc, #360]	@ (800a328 <HAL_FLASH_IRQHandler+0x1b8>)
 800a1c0:	2220      	movs	r2, #32
 800a1c2:	60da      	str	r2, [r3, #12]
#endif /* FLASH_BANK2_END */
    
    /* Process can continue only if no error detected */
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 800a1c4:	4b59      	ldr	r3, [pc, #356]	@ (800a32c <HAL_FLASH_IRQHandler+0x1bc>)
 800a1c6:	781b      	ldrb	r3, [r3, #0]
 800a1c8:	b2db      	uxtb	r3, r3
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	f000 8097 	beq.w	800a2fe <HAL_FLASH_IRQHandler+0x18e>
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 800a1d0:	4b56      	ldr	r3, [pc, #344]	@ (800a32c <HAL_FLASH_IRQHandler+0x1bc>)
 800a1d2:	781b      	ldrb	r3, [r3, #0]
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	2b01      	cmp	r3, #1
 800a1d8:	d12d      	bne.n	800a236 <HAL_FLASH_IRQHandler+0xc6>
      {
        /* Nb of pages to erased can be decreased */
        pFlash.DataRemaining--;
 800a1da:	4b54      	ldr	r3, [pc, #336]	@ (800a32c <HAL_FLASH_IRQHandler+0x1bc>)
 800a1dc:	685b      	ldr	r3, [r3, #4]
 800a1de:	3b01      	subs	r3, #1
 800a1e0:	4a52      	ldr	r2, [pc, #328]	@ (800a32c <HAL_FLASH_IRQHandler+0x1bc>)
 800a1e2:	6053      	str	r3, [r2, #4]

        /* Check if there are still pages to erase */
        if(pFlash.DataRemaining != 0U)
 800a1e4:	4b51      	ldr	r3, [pc, #324]	@ (800a32c <HAL_FLASH_IRQHandler+0x1bc>)
 800a1e6:	685b      	ldr	r3, [r3, #4]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d017      	beq.n	800a21c <HAL_FLASH_IRQHandler+0xac>
        {
          addresstmp = pFlash.Address;
 800a1ec:	4b4f      	ldr	r3, [pc, #316]	@ (800a32c <HAL_FLASH_IRQHandler+0x1bc>)
 800a1ee:	689b      	ldr	r3, [r3, #8]
 800a1f0:	607b      	str	r3, [r7, #4]
          /*Indicate user which sector has been erased */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f000 f89c 	bl	800a330 <HAL_FLASH_EndOfOperationCallback>

          /*Increment sector number*/
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 800a1f8:	4b4c      	ldr	r3, [pc, #304]	@ (800a32c <HAL_FLASH_IRQHandler+0x1bc>)
 800a1fa:	689b      	ldr	r3, [r3, #8]
 800a1fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a200:	607b      	str	r3, [r7, #4]
          pFlash.Address = addresstmp;
 800a202:	4a4a      	ldr	r2, [pc, #296]	@ (800a32c <HAL_FLASH_IRQHandler+0x1bc>)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6093      	str	r3, [r2, #8]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800a208:	4b47      	ldr	r3, [pc, #284]	@ (800a328 <HAL_FLASH_IRQHandler+0x1b8>)
 800a20a:	691b      	ldr	r3, [r3, #16]
 800a20c:	4a46      	ldr	r2, [pc, #280]	@ (800a328 <HAL_FLASH_IRQHandler+0x1b8>)
 800a20e:	f023 0302 	bic.w	r3, r3, #2
 800a212:	6113      	str	r3, [r2, #16]

          FLASH_PageErase(addresstmp);
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f000 fa17 	bl	800a648 <FLASH_PageErase>
 800a21a:	e070      	b.n	800a2fe <HAL_FLASH_IRQHandler+0x18e>
        }
        else
        {
          /* No more pages to Erase, user callback can be called. */
          /* Reset Sector and stop Erase pages procedure */
          pFlash.Address = addresstmp = 0xFFFFFFFFU;
 800a21c:	f04f 33ff 	mov.w	r3, #4294967295
 800a220:	607b      	str	r3, [r7, #4]
 800a222:	4a42      	ldr	r2, [pc, #264]	@ (800a32c <HAL_FLASH_IRQHandler+0x1bc>)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6093      	str	r3, [r2, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800a228:	4b40      	ldr	r3, [pc, #256]	@ (800a32c <HAL_FLASH_IRQHandler+0x1bc>)
 800a22a:	2200      	movs	r2, #0
 800a22c:	701a      	strb	r2, [r3, #0]
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f000 f87e 	bl	800a330 <HAL_FLASH_EndOfOperationCallback>
 800a234:	e063      	b.n	800a2fe <HAL_FLASH_IRQHandler+0x18e>
        }
      }
      else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 800a236:	4b3d      	ldr	r3, [pc, #244]	@ (800a32c <HAL_FLASH_IRQHandler+0x1bc>)
 800a238:	781b      	ldrb	r3, [r3, #0]
 800a23a:	b2db      	uxtb	r3, r3
 800a23c:	2b02      	cmp	r3, #2
 800a23e:	d10c      	bne.n	800a25a <HAL_FLASH_IRQHandler+0xea>
      {
        /* Operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800a240:	4b39      	ldr	r3, [pc, #228]	@ (800a328 <HAL_FLASH_IRQHandler+0x1b8>)
 800a242:	691b      	ldr	r3, [r3, #16]
 800a244:	4a38      	ldr	r2, [pc, #224]	@ (800a328 <HAL_FLASH_IRQHandler+0x1b8>)
 800a246:	f023 0304 	bic.w	r3, r3, #4
 800a24a:	6113      	str	r3, [r2, #16]
        if (HAL_IS_BIT_CLR(FLASH->CR2, FLASH_CR2_MER))
        {
#endif /* FLASH_BANK2_END */
          /* MassErase ended. Return the selected bank */
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(0U);
 800a24c:	2000      	movs	r0, #0
 800a24e:	f000 f86f 	bl	800a330 <HAL_FLASH_EndOfOperationCallback>

          /* Stop Mass Erase procedure*/
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800a252:	4b36      	ldr	r3, [pc, #216]	@ (800a32c <HAL_FLASH_IRQHandler+0x1bc>)
 800a254:	2200      	movs	r2, #0
 800a256:	701a      	strb	r2, [r3, #0]
 800a258:	e051      	b.n	800a2fe <HAL_FLASH_IRQHandler+0x18e>
      }
#endif /* FLASH_BANK2_END */
      else
      {
        /* Nb of 16-bit data to program can be decreased */
        pFlash.DataRemaining--;
 800a25a:	4b34      	ldr	r3, [pc, #208]	@ (800a32c <HAL_FLASH_IRQHandler+0x1bc>)
 800a25c:	685b      	ldr	r3, [r3, #4]
 800a25e:	3b01      	subs	r3, #1
 800a260:	4a32      	ldr	r2, [pc, #200]	@ (800a32c <HAL_FLASH_IRQHandler+0x1bc>)
 800a262:	6053      	str	r3, [r2, #4]
        
        /* Check if there are still 16-bit data to program */
        if(pFlash.DataRemaining != 0U)
 800a264:	4b31      	ldr	r3, [pc, #196]	@ (800a32c <HAL_FLASH_IRQHandler+0x1bc>)
 800a266:	685b      	ldr	r3, [r3, #4]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d024      	beq.n	800a2b6 <HAL_FLASH_IRQHandler+0x146>
        {
          /* Increment address to 16-bit */
          pFlash.Address += 2U;
 800a26c:	4b2f      	ldr	r3, [pc, #188]	@ (800a32c <HAL_FLASH_IRQHandler+0x1bc>)
 800a26e:	689b      	ldr	r3, [r3, #8]
 800a270:	3302      	adds	r3, #2
 800a272:	4a2e      	ldr	r2, [pc, #184]	@ (800a32c <HAL_FLASH_IRQHandler+0x1bc>)
 800a274:	6093      	str	r3, [r2, #8]
          addresstmp = pFlash.Address;
 800a276:	4b2d      	ldr	r3, [pc, #180]	@ (800a32c <HAL_FLASH_IRQHandler+0x1bc>)
 800a278:	689b      	ldr	r3, [r3, #8]
 800a27a:	607b      	str	r3, [r7, #4]
          
          /* Shift to have next 16-bit data */
          pFlash.Data = (pFlash.Data >> 16U);
 800a27c:	4b2b      	ldr	r3, [pc, #172]	@ (800a32c <HAL_FLASH_IRQHandler+0x1bc>)
 800a27e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800a282:	f04f 0200 	mov.w	r2, #0
 800a286:	f04f 0300 	mov.w	r3, #0
 800a28a:	0c02      	lsrs	r2, r0, #16
 800a28c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800a290:	0c0b      	lsrs	r3, r1, #16
 800a292:	4926      	ldr	r1, [pc, #152]	@ (800a32c <HAL_FLASH_IRQHandler+0x1bc>)
 800a294:	e9c1 2304 	strd	r2, r3, [r1, #16]
          
          /* Operation is completed, disable the PG Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a298:	4b23      	ldr	r3, [pc, #140]	@ (800a328 <HAL_FLASH_IRQHandler+0x1b8>)
 800a29a:	691b      	ldr	r3, [r3, #16]
 800a29c:	4a22      	ldr	r2, [pc, #136]	@ (800a328 <HAL_FLASH_IRQHandler+0x1b8>)
 800a29e:	f023 0301 	bic.w	r3, r3, #1
 800a2a2:	6113      	str	r3, [r2, #16]

          /*Program halfword (16-bit) at a specified address.*/
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 800a2a4:	4b21      	ldr	r3, [pc, #132]	@ (800a32c <HAL_FLASH_IRQHandler+0x1bc>)
 800a2a6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800a2aa:	b293      	uxth	r3, r2
 800a2ac:	4619      	mov	r1, r3
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f000 f890 	bl	800a3d4 <FLASH_Program_HalfWord>
 800a2b4:	e023      	b.n	800a2fe <HAL_FLASH_IRQHandler+0x18e>
        }
        else
        {
          /* Program ended. Return the selected address */
          /* FLASH EOP interrupt user callback */
          if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
 800a2b6:	4b1d      	ldr	r3, [pc, #116]	@ (800a32c <HAL_FLASH_IRQHandler+0x1bc>)
 800a2b8:	781b      	ldrb	r3, [r3, #0]
 800a2ba:	b2db      	uxtb	r3, r3
 800a2bc:	2b03      	cmp	r3, #3
 800a2be:	d105      	bne.n	800a2cc <HAL_FLASH_IRQHandler+0x15c>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 800a2c0:	4b1a      	ldr	r3, [pc, #104]	@ (800a32c <HAL_FLASH_IRQHandler+0x1bc>)
 800a2c2:	689b      	ldr	r3, [r3, #8]
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f000 f833 	bl	800a330 <HAL_FLASH_EndOfOperationCallback>
 800a2ca:	e011      	b.n	800a2f0 <HAL_FLASH_IRQHandler+0x180>
          }
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 800a2cc:	4b17      	ldr	r3, [pc, #92]	@ (800a32c <HAL_FLASH_IRQHandler+0x1bc>)
 800a2ce:	781b      	ldrb	r3, [r3, #0]
 800a2d0:	b2db      	uxtb	r3, r3
 800a2d2:	2b04      	cmp	r3, #4
 800a2d4:	d106      	bne.n	800a2e4 <HAL_FLASH_IRQHandler+0x174>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 800a2d6:	4b15      	ldr	r3, [pc, #84]	@ (800a32c <HAL_FLASH_IRQHandler+0x1bc>)
 800a2d8:	689b      	ldr	r3, [r3, #8]
 800a2da:	3b02      	subs	r3, #2
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f000 f827 	bl	800a330 <HAL_FLASH_EndOfOperationCallback>
 800a2e2:	e005      	b.n	800a2f0 <HAL_FLASH_IRQHandler+0x180>
          }
          else 
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 800a2e4:	4b11      	ldr	r3, [pc, #68]	@ (800a32c <HAL_FLASH_IRQHandler+0x1bc>)
 800a2e6:	689b      	ldr	r3, [r3, #8]
 800a2e8:	3b06      	subs	r3, #6
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f000 f820 	bl	800a330 <HAL_FLASH_EndOfOperationCallback>
          }
        
          /* Reset Address and stop Program procedure */
          pFlash.Address = 0xFFFFFFFFU;
 800a2f0:	4b0e      	ldr	r3, [pc, #56]	@ (800a32c <HAL_FLASH_IRQHandler+0x1bc>)
 800a2f2:	f04f 32ff 	mov.w	r2, #4294967295
 800a2f6:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800a2f8:	4b0c      	ldr	r3, [pc, #48]	@ (800a32c <HAL_FLASH_IRQHandler+0x1bc>)
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	701a      	strb	r2, [r3, #0]
      }
    }
  }
#endif 

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 800a2fe:	4b0b      	ldr	r3, [pc, #44]	@ (800a32c <HAL_FLASH_IRQHandler+0x1bc>)
 800a300:	781b      	ldrb	r3, [r3, #0]
 800a302:	b2db      	uxtb	r3, r3
 800a304:	2b00      	cmp	r3, #0
 800a306:	d10b      	bne.n	800a320 <HAL_FLASH_IRQHandler+0x1b0>
  
    /* Disable End of FLASH Operation and Error source interrupts for both banks */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP_BANK1 | FLASH_IT_ERR_BANK1 | FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
#else
    /* Operation is completed, disable the PG, PER and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
 800a308:	4b07      	ldr	r3, [pc, #28]	@ (800a328 <HAL_FLASH_IRQHandler+0x1b8>)
 800a30a:	691b      	ldr	r3, [r3, #16]
 800a30c:	4a06      	ldr	r2, [pc, #24]	@ (800a328 <HAL_FLASH_IRQHandler+0x1b8>)
 800a30e:	f023 0307 	bic.w	r3, r3, #7
 800a312:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation and Error source interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 800a314:	4b04      	ldr	r3, [pc, #16]	@ (800a328 <HAL_FLASH_IRQHandler+0x1b8>)
 800a316:	691b      	ldr	r3, [r3, #16]
 800a318:	4a03      	ldr	r2, [pc, #12]	@ (800a328 <HAL_FLASH_IRQHandler+0x1b8>)
 800a31a:	f423 53a0 	bic.w	r3, r3, #5120	@ 0x1400
 800a31e:	6113      	str	r3, [r2, #16]
#endif /* FLASH_BANK2_END */

  }
}
 800a320:	bf00      	nop
 800a322:	3708      	adds	r7, #8
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}
 800a328:	40022000 	.word	0x40022000
 800a32c:	20000b18 	.word	0x20000b18

0800a330 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 800a330:	b480      	push	{r7}
 800a332:	b083      	sub	sp, #12
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 800a338:	bf00      	nop
 800a33a:	370c      	adds	r7, #12
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bc80      	pop	{r7}
 800a340:	4770      	bx	lr

0800a342 <HAL_FLASH_OperationErrorCallback>:
  *                 - Pages Erase: Address of the page which returned an error
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 800a342:	b480      	push	{r7}
 800a344:	b083      	sub	sp, #12
 800a346:	af00      	add	r7, sp, #0
 800a348:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 800a34a:	bf00      	nop
 800a34c:	370c      	adds	r7, #12
 800a34e:	46bd      	mov	sp, r7
 800a350:	bc80      	pop	{r7}
 800a352:	4770      	bx	lr

0800a354 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800a354:	b480      	push	{r7}
 800a356:	b083      	sub	sp, #12
 800a358:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800a35a:	2300      	movs	r3, #0
 800a35c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800a35e:	4b0d      	ldr	r3, [pc, #52]	@ (800a394 <HAL_FLASH_Unlock+0x40>)
 800a360:	691b      	ldr	r3, [r3, #16]
 800a362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a366:	2b00      	cmp	r3, #0
 800a368:	d00d      	beq.n	800a386 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800a36a:	4b0a      	ldr	r3, [pc, #40]	@ (800a394 <HAL_FLASH_Unlock+0x40>)
 800a36c:	4a0a      	ldr	r2, [pc, #40]	@ (800a398 <HAL_FLASH_Unlock+0x44>)
 800a36e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800a370:	4b08      	ldr	r3, [pc, #32]	@ (800a394 <HAL_FLASH_Unlock+0x40>)
 800a372:	4a0a      	ldr	r2, [pc, #40]	@ (800a39c <HAL_FLASH_Unlock+0x48>)
 800a374:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800a376:	4b07      	ldr	r3, [pc, #28]	@ (800a394 <HAL_FLASH_Unlock+0x40>)
 800a378:	691b      	ldr	r3, [r3, #16]
 800a37a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d001      	beq.n	800a386 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800a382:	2301      	movs	r3, #1
 800a384:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800a386:	79fb      	ldrb	r3, [r7, #7]
}
 800a388:	4618      	mov	r0, r3
 800a38a:	370c      	adds	r7, #12
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bc80      	pop	{r7}
 800a390:	4770      	bx	lr
 800a392:	bf00      	nop
 800a394:	40022000 	.word	0x40022000
 800a398:	45670123 	.word	0x45670123
 800a39c:	cdef89ab 	.word	0xcdef89ab

0800a3a0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800a3a4:	4b05      	ldr	r3, [pc, #20]	@ (800a3bc <HAL_FLASH_Lock+0x1c>)
 800a3a6:	691b      	ldr	r3, [r3, #16]
 800a3a8:	4a04      	ldr	r2, [pc, #16]	@ (800a3bc <HAL_FLASH_Lock+0x1c>)
 800a3aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3ae:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 800a3b0:	2300      	movs	r3, #0
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bc80      	pop	{r7}
 800a3b8:	4770      	bx	lr
 800a3ba:	bf00      	nop
 800a3bc:	40022000 	.word	0x40022000

0800a3c0 <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 800a3c4:	4b02      	ldr	r3, [pc, #8]	@ (800a3d0 <HAL_FLASH_GetError+0x10>)
 800a3c6:	69db      	ldr	r3, [r3, #28]
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bc80      	pop	{r7}
 800a3ce:	4770      	bx	lr
 800a3d0:	20000b18 	.word	0x20000b18

0800a3d4 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b083      	sub	sp, #12
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	460b      	mov	r3, r1
 800a3de:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a3e0:	4b08      	ldr	r3, [pc, #32]	@ (800a404 <FLASH_Program_HalfWord+0x30>)
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800a3e6:	4b08      	ldr	r3, [pc, #32]	@ (800a408 <FLASH_Program_HalfWord+0x34>)
 800a3e8:	691b      	ldr	r3, [r3, #16]
 800a3ea:	4a07      	ldr	r2, [pc, #28]	@ (800a408 <FLASH_Program_HalfWord+0x34>)
 800a3ec:	f043 0301 	orr.w	r3, r3, #1
 800a3f0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	887a      	ldrh	r2, [r7, #2]
 800a3f6:	801a      	strh	r2, [r3, #0]
}
 800a3f8:	bf00      	nop
 800a3fa:	370c      	adds	r7, #12
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bc80      	pop	{r7}
 800a400:	4770      	bx	lr
 800a402:	bf00      	nop
 800a404:	20000b18 	.word	0x20000b18
 800a408:	40022000 	.word	0x40022000

0800a40c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b084      	sub	sp, #16
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800a414:	f7fd feec 	bl	80081f0 <HAL_GetTick>
 800a418:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800a41a:	e010      	b.n	800a43e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a422:	d00c      	beq.n	800a43e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d007      	beq.n	800a43a <FLASH_WaitForLastOperation+0x2e>
 800a42a:	f7fd fee1 	bl	80081f0 <HAL_GetTick>
 800a42e:	4602      	mov	r2, r0
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	1ad3      	subs	r3, r2, r3
 800a434:	687a      	ldr	r2, [r7, #4]
 800a436:	429a      	cmp	r2, r3
 800a438:	d201      	bcs.n	800a43e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800a43a:	2303      	movs	r3, #3
 800a43c:	e025      	b.n	800a48a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800a43e:	4b15      	ldr	r3, [pc, #84]	@ (800a494 <FLASH_WaitForLastOperation+0x88>)
 800a440:	68db      	ldr	r3, [r3, #12]
 800a442:	f003 0301 	and.w	r3, r3, #1
 800a446:	2b00      	cmp	r3, #0
 800a448:	d1e8      	bne.n	800a41c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800a44a:	4b12      	ldr	r3, [pc, #72]	@ (800a494 <FLASH_WaitForLastOperation+0x88>)
 800a44c:	68db      	ldr	r3, [r3, #12]
 800a44e:	f003 0320 	and.w	r3, r3, #32
 800a452:	2b00      	cmp	r3, #0
 800a454:	d002      	beq.n	800a45c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800a456:	4b0f      	ldr	r3, [pc, #60]	@ (800a494 <FLASH_WaitForLastOperation+0x88>)
 800a458:	2220      	movs	r2, #32
 800a45a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800a45c:	4b0d      	ldr	r3, [pc, #52]	@ (800a494 <FLASH_WaitForLastOperation+0x88>)
 800a45e:	68db      	ldr	r3, [r3, #12]
 800a460:	f003 0310 	and.w	r3, r3, #16
 800a464:	2b00      	cmp	r3, #0
 800a466:	d10b      	bne.n	800a480 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800a468:	4b0a      	ldr	r3, [pc, #40]	@ (800a494 <FLASH_WaitForLastOperation+0x88>)
 800a46a:	69db      	ldr	r3, [r3, #28]
 800a46c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800a470:	2b00      	cmp	r3, #0
 800a472:	d105      	bne.n	800a480 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800a474:	4b07      	ldr	r3, [pc, #28]	@ (800a494 <FLASH_WaitForLastOperation+0x88>)
 800a476:	68db      	ldr	r3, [r3, #12]
 800a478:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d003      	beq.n	800a488 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800a480:	f000 f80a 	bl	800a498 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800a484:	2301      	movs	r3, #1
 800a486:	e000      	b.n	800a48a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 800a488:	2300      	movs	r3, #0
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3710      	adds	r7, #16
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}
 800a492:	bf00      	nop
 800a494:	40022000 	.word	0x40022000

0800a498 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800a498:	b480      	push	{r7}
 800a49a:	b083      	sub	sp, #12
 800a49c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800a4a2:	4b23      	ldr	r3, [pc, #140]	@ (800a530 <FLASH_SetErrorCode+0x98>)
 800a4a4:	68db      	ldr	r3, [r3, #12]
 800a4a6:	f003 0310 	and.w	r3, r3, #16
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d009      	beq.n	800a4c2 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800a4ae:	4b21      	ldr	r3, [pc, #132]	@ (800a534 <FLASH_SetErrorCode+0x9c>)
 800a4b0:	69db      	ldr	r3, [r3, #28]
 800a4b2:	f043 0302 	orr.w	r3, r3, #2
 800a4b6:	4a1f      	ldr	r2, [pc, #124]	@ (800a534 <FLASH_SetErrorCode+0x9c>)
 800a4b8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f043 0310 	orr.w	r3, r3, #16
 800a4c0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800a4c2:	4b1b      	ldr	r3, [pc, #108]	@ (800a530 <FLASH_SetErrorCode+0x98>)
 800a4c4:	68db      	ldr	r3, [r3, #12]
 800a4c6:	f003 0304 	and.w	r3, r3, #4
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d009      	beq.n	800a4e2 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800a4ce:	4b19      	ldr	r3, [pc, #100]	@ (800a534 <FLASH_SetErrorCode+0x9c>)
 800a4d0:	69db      	ldr	r3, [r3, #28]
 800a4d2:	f043 0301 	orr.w	r3, r3, #1
 800a4d6:	4a17      	ldr	r2, [pc, #92]	@ (800a534 <FLASH_SetErrorCode+0x9c>)
 800a4d8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f043 0304 	orr.w	r3, r3, #4
 800a4e0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800a4e2:	4b13      	ldr	r3, [pc, #76]	@ (800a530 <FLASH_SetErrorCode+0x98>)
 800a4e4:	69db      	ldr	r3, [r3, #28]
 800a4e6:	f003 0301 	and.w	r3, r3, #1
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d00b      	beq.n	800a506 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800a4ee:	4b11      	ldr	r3, [pc, #68]	@ (800a534 <FLASH_SetErrorCode+0x9c>)
 800a4f0:	69db      	ldr	r3, [r3, #28]
 800a4f2:	f043 0304 	orr.w	r3, r3, #4
 800a4f6:	4a0f      	ldr	r2, [pc, #60]	@ (800a534 <FLASH_SetErrorCode+0x9c>)
 800a4f8:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800a4fa:	4b0d      	ldr	r3, [pc, #52]	@ (800a530 <FLASH_SetErrorCode+0x98>)
 800a4fc:	69db      	ldr	r3, [r3, #28]
 800a4fe:	4a0c      	ldr	r2, [pc, #48]	@ (800a530 <FLASH_SetErrorCode+0x98>)
 800a500:	f023 0301 	bic.w	r3, r3, #1
 800a504:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f240 1201 	movw	r2, #257	@ 0x101
 800a50c:	4293      	cmp	r3, r2
 800a50e:	d106      	bne.n	800a51e <FLASH_SetErrorCode+0x86>
 800a510:	4b07      	ldr	r3, [pc, #28]	@ (800a530 <FLASH_SetErrorCode+0x98>)
 800a512:	69db      	ldr	r3, [r3, #28]
 800a514:	4a06      	ldr	r2, [pc, #24]	@ (800a530 <FLASH_SetErrorCode+0x98>)
 800a516:	f023 0301 	bic.w	r3, r3, #1
 800a51a:	61d3      	str	r3, [r2, #28]
}  
 800a51c:	e002      	b.n	800a524 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800a51e:	4a04      	ldr	r2, [pc, #16]	@ (800a530 <FLASH_SetErrorCode+0x98>)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	60d3      	str	r3, [r2, #12]
}  
 800a524:	bf00      	nop
 800a526:	370c      	adds	r7, #12
 800a528:	46bd      	mov	sp, r7
 800a52a:	bc80      	pop	{r7}
 800a52c:	4770      	bx	lr
 800a52e:	bf00      	nop
 800a530:	40022000 	.word	0x40022000
 800a534:	20000b18 	.word	0x20000b18

0800a538 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b084      	sub	sp, #16
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a542:	2301      	movs	r3, #1
 800a544:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800a546:	2300      	movs	r3, #0
 800a548:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a54a:	4b2f      	ldr	r3, [pc, #188]	@ (800a608 <HAL_FLASHEx_Erase+0xd0>)
 800a54c:	7e1b      	ldrb	r3, [r3, #24]
 800a54e:	2b01      	cmp	r3, #1
 800a550:	d101      	bne.n	800a556 <HAL_FLASHEx_Erase+0x1e>
 800a552:	2302      	movs	r3, #2
 800a554:	e053      	b.n	800a5fe <HAL_FLASHEx_Erase+0xc6>
 800a556:	4b2c      	ldr	r3, [pc, #176]	@ (800a608 <HAL_FLASHEx_Erase+0xd0>)
 800a558:	2201      	movs	r2, #1
 800a55a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	2b02      	cmp	r3, #2
 800a562:	d116      	bne.n	800a592 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800a564:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800a568:	f7ff ff50 	bl	800a40c <FLASH_WaitForLastOperation>
 800a56c:	4603      	mov	r3, r0
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d141      	bne.n	800a5f6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800a572:	2001      	movs	r0, #1
 800a574:	f000 f84c 	bl	800a610 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a578:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800a57c:	f7ff ff46 	bl	800a40c <FLASH_WaitForLastOperation>
 800a580:	4603      	mov	r3, r0
 800a582:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800a584:	4b21      	ldr	r3, [pc, #132]	@ (800a60c <HAL_FLASHEx_Erase+0xd4>)
 800a586:	691b      	ldr	r3, [r3, #16]
 800a588:	4a20      	ldr	r2, [pc, #128]	@ (800a60c <HAL_FLASHEx_Erase+0xd4>)
 800a58a:	f023 0304 	bic.w	r3, r3, #4
 800a58e:	6113      	str	r3, [r2, #16]
 800a590:	e031      	b.n	800a5f6 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800a592:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800a596:	f7ff ff39 	bl	800a40c <FLASH_WaitForLastOperation>
 800a59a:	4603      	mov	r3, r0
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d12a      	bne.n	800a5f6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	f04f 32ff 	mov.w	r2, #4294967295
 800a5a6:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	689b      	ldr	r3, [r3, #8]
 800a5ac:	60bb      	str	r3, [r7, #8]
 800a5ae:	e019      	b.n	800a5e4 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800a5b0:	68b8      	ldr	r0, [r7, #8]
 800a5b2:	f000 f849 	bl	800a648 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a5b6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800a5ba:	f7ff ff27 	bl	800a40c <FLASH_WaitForLastOperation>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800a5c2:	4b12      	ldr	r3, [pc, #72]	@ (800a60c <HAL_FLASHEx_Erase+0xd4>)
 800a5c4:	691b      	ldr	r3, [r3, #16]
 800a5c6:	4a11      	ldr	r2, [pc, #68]	@ (800a60c <HAL_FLASHEx_Erase+0xd4>)
 800a5c8:	f023 0302 	bic.w	r3, r3, #2
 800a5cc:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800a5ce:	7bfb      	ldrb	r3, [r7, #15]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d003      	beq.n	800a5dc <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	68ba      	ldr	r2, [r7, #8]
 800a5d8:	601a      	str	r2, [r3, #0]
            break;
 800a5da:	e00c      	b.n	800a5f6 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a5e2:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	68db      	ldr	r3, [r3, #12]
 800a5e8:	029a      	lsls	r2, r3, #10
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	689b      	ldr	r3, [r3, #8]
 800a5ee:	4413      	add	r3, r2
 800a5f0:	68ba      	ldr	r2, [r7, #8]
 800a5f2:	429a      	cmp	r2, r3
 800a5f4:	d3dc      	bcc.n	800a5b0 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a5f6:	4b04      	ldr	r3, [pc, #16]	@ (800a608 <HAL_FLASHEx_Erase+0xd0>)
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	761a      	strb	r2, [r3, #24]

  return status;
 800a5fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3710      	adds	r7, #16
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}
 800a606:	bf00      	nop
 800a608:	20000b18 	.word	0x20000b18
 800a60c:	40022000 	.word	0x40022000

0800a610 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800a610:	b480      	push	{r7}
 800a612:	b083      	sub	sp, #12
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a618:	4b09      	ldr	r3, [pc, #36]	@ (800a640 <FLASH_MassErase+0x30>)
 800a61a:	2200      	movs	r2, #0
 800a61c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800a61e:	4b09      	ldr	r3, [pc, #36]	@ (800a644 <FLASH_MassErase+0x34>)
 800a620:	691b      	ldr	r3, [r3, #16]
 800a622:	4a08      	ldr	r2, [pc, #32]	@ (800a644 <FLASH_MassErase+0x34>)
 800a624:	f043 0304 	orr.w	r3, r3, #4
 800a628:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800a62a:	4b06      	ldr	r3, [pc, #24]	@ (800a644 <FLASH_MassErase+0x34>)
 800a62c:	691b      	ldr	r3, [r3, #16]
 800a62e:	4a05      	ldr	r2, [pc, #20]	@ (800a644 <FLASH_MassErase+0x34>)
 800a630:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a634:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800a636:	bf00      	nop
 800a638:	370c      	adds	r7, #12
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bc80      	pop	{r7}
 800a63e:	4770      	bx	lr
 800a640:	20000b18 	.word	0x20000b18
 800a644:	40022000 	.word	0x40022000

0800a648 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800a648:	b480      	push	{r7}
 800a64a:	b083      	sub	sp, #12
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a650:	4b0b      	ldr	r3, [pc, #44]	@ (800a680 <FLASH_PageErase+0x38>)
 800a652:	2200      	movs	r2, #0
 800a654:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800a656:	4b0b      	ldr	r3, [pc, #44]	@ (800a684 <FLASH_PageErase+0x3c>)
 800a658:	691b      	ldr	r3, [r3, #16]
 800a65a:	4a0a      	ldr	r2, [pc, #40]	@ (800a684 <FLASH_PageErase+0x3c>)
 800a65c:	f043 0302 	orr.w	r3, r3, #2
 800a660:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800a662:	4a08      	ldr	r2, [pc, #32]	@ (800a684 <FLASH_PageErase+0x3c>)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800a668:	4b06      	ldr	r3, [pc, #24]	@ (800a684 <FLASH_PageErase+0x3c>)
 800a66a:	691b      	ldr	r3, [r3, #16]
 800a66c:	4a05      	ldr	r2, [pc, #20]	@ (800a684 <FLASH_PageErase+0x3c>)
 800a66e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a672:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800a674:	bf00      	nop
 800a676:	370c      	adds	r7, #12
 800a678:	46bd      	mov	sp, r7
 800a67a:	bc80      	pop	{r7}
 800a67c:	4770      	bx	lr
 800a67e:	bf00      	nop
 800a680:	20000b18 	.word	0x20000b18
 800a684:	40022000 	.word	0x40022000

0800a688 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a688:	b480      	push	{r7}
 800a68a:	b08b      	sub	sp, #44	@ 0x2c
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a692:	2300      	movs	r3, #0
 800a694:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800a696:	2300      	movs	r3, #0
 800a698:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a69a:	e169      	b.n	800a970 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800a69c:	2201      	movs	r2, #1
 800a69e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6a0:	fa02 f303 	lsl.w	r3, r2, r3
 800a6a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	69fa      	ldr	r2, [r7, #28]
 800a6ac:	4013      	ands	r3, r2
 800a6ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800a6b0:	69ba      	ldr	r2, [r7, #24]
 800a6b2:	69fb      	ldr	r3, [r7, #28]
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	f040 8158 	bne.w	800a96a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	685b      	ldr	r3, [r3, #4]
 800a6be:	4a9a      	ldr	r2, [pc, #616]	@ (800a928 <HAL_GPIO_Init+0x2a0>)
 800a6c0:	4293      	cmp	r3, r2
 800a6c2:	d05e      	beq.n	800a782 <HAL_GPIO_Init+0xfa>
 800a6c4:	4a98      	ldr	r2, [pc, #608]	@ (800a928 <HAL_GPIO_Init+0x2a0>)
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	d875      	bhi.n	800a7b6 <HAL_GPIO_Init+0x12e>
 800a6ca:	4a98      	ldr	r2, [pc, #608]	@ (800a92c <HAL_GPIO_Init+0x2a4>)
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d058      	beq.n	800a782 <HAL_GPIO_Init+0xfa>
 800a6d0:	4a96      	ldr	r2, [pc, #600]	@ (800a92c <HAL_GPIO_Init+0x2a4>)
 800a6d2:	4293      	cmp	r3, r2
 800a6d4:	d86f      	bhi.n	800a7b6 <HAL_GPIO_Init+0x12e>
 800a6d6:	4a96      	ldr	r2, [pc, #600]	@ (800a930 <HAL_GPIO_Init+0x2a8>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d052      	beq.n	800a782 <HAL_GPIO_Init+0xfa>
 800a6dc:	4a94      	ldr	r2, [pc, #592]	@ (800a930 <HAL_GPIO_Init+0x2a8>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d869      	bhi.n	800a7b6 <HAL_GPIO_Init+0x12e>
 800a6e2:	4a94      	ldr	r2, [pc, #592]	@ (800a934 <HAL_GPIO_Init+0x2ac>)
 800a6e4:	4293      	cmp	r3, r2
 800a6e6:	d04c      	beq.n	800a782 <HAL_GPIO_Init+0xfa>
 800a6e8:	4a92      	ldr	r2, [pc, #584]	@ (800a934 <HAL_GPIO_Init+0x2ac>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d863      	bhi.n	800a7b6 <HAL_GPIO_Init+0x12e>
 800a6ee:	4a92      	ldr	r2, [pc, #584]	@ (800a938 <HAL_GPIO_Init+0x2b0>)
 800a6f0:	4293      	cmp	r3, r2
 800a6f2:	d046      	beq.n	800a782 <HAL_GPIO_Init+0xfa>
 800a6f4:	4a90      	ldr	r2, [pc, #576]	@ (800a938 <HAL_GPIO_Init+0x2b0>)
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	d85d      	bhi.n	800a7b6 <HAL_GPIO_Init+0x12e>
 800a6fa:	2b12      	cmp	r3, #18
 800a6fc:	d82a      	bhi.n	800a754 <HAL_GPIO_Init+0xcc>
 800a6fe:	2b12      	cmp	r3, #18
 800a700:	d859      	bhi.n	800a7b6 <HAL_GPIO_Init+0x12e>
 800a702:	a201      	add	r2, pc, #4	@ (adr r2, 800a708 <HAL_GPIO_Init+0x80>)
 800a704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a708:	0800a783 	.word	0x0800a783
 800a70c:	0800a75d 	.word	0x0800a75d
 800a710:	0800a76f 	.word	0x0800a76f
 800a714:	0800a7b1 	.word	0x0800a7b1
 800a718:	0800a7b7 	.word	0x0800a7b7
 800a71c:	0800a7b7 	.word	0x0800a7b7
 800a720:	0800a7b7 	.word	0x0800a7b7
 800a724:	0800a7b7 	.word	0x0800a7b7
 800a728:	0800a7b7 	.word	0x0800a7b7
 800a72c:	0800a7b7 	.word	0x0800a7b7
 800a730:	0800a7b7 	.word	0x0800a7b7
 800a734:	0800a7b7 	.word	0x0800a7b7
 800a738:	0800a7b7 	.word	0x0800a7b7
 800a73c:	0800a7b7 	.word	0x0800a7b7
 800a740:	0800a7b7 	.word	0x0800a7b7
 800a744:	0800a7b7 	.word	0x0800a7b7
 800a748:	0800a7b7 	.word	0x0800a7b7
 800a74c:	0800a765 	.word	0x0800a765
 800a750:	0800a779 	.word	0x0800a779
 800a754:	4a79      	ldr	r2, [pc, #484]	@ (800a93c <HAL_GPIO_Init+0x2b4>)
 800a756:	4293      	cmp	r3, r2
 800a758:	d013      	beq.n	800a782 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800a75a:	e02c      	b.n	800a7b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	68db      	ldr	r3, [r3, #12]
 800a760:	623b      	str	r3, [r7, #32]
          break;
 800a762:	e029      	b.n	800a7b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	68db      	ldr	r3, [r3, #12]
 800a768:	3304      	adds	r3, #4
 800a76a:	623b      	str	r3, [r7, #32]
          break;
 800a76c:	e024      	b.n	800a7b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	68db      	ldr	r3, [r3, #12]
 800a772:	3308      	adds	r3, #8
 800a774:	623b      	str	r3, [r7, #32]
          break;
 800a776:	e01f      	b.n	800a7b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	68db      	ldr	r3, [r3, #12]
 800a77c:	330c      	adds	r3, #12
 800a77e:	623b      	str	r3, [r7, #32]
          break;
 800a780:	e01a      	b.n	800a7b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	689b      	ldr	r3, [r3, #8]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d102      	bne.n	800a790 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800a78a:	2304      	movs	r3, #4
 800a78c:	623b      	str	r3, [r7, #32]
          break;
 800a78e:	e013      	b.n	800a7b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	689b      	ldr	r3, [r3, #8]
 800a794:	2b01      	cmp	r3, #1
 800a796:	d105      	bne.n	800a7a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800a798:	2308      	movs	r3, #8
 800a79a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	69fa      	ldr	r2, [r7, #28]
 800a7a0:	611a      	str	r2, [r3, #16]
          break;
 800a7a2:	e009      	b.n	800a7b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800a7a4:	2308      	movs	r3, #8
 800a7a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	69fa      	ldr	r2, [r7, #28]
 800a7ac:	615a      	str	r2, [r3, #20]
          break;
 800a7ae:	e003      	b.n	800a7b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	623b      	str	r3, [r7, #32]
          break;
 800a7b4:	e000      	b.n	800a7b8 <HAL_GPIO_Init+0x130>
          break;
 800a7b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800a7b8:	69bb      	ldr	r3, [r7, #24]
 800a7ba:	2bff      	cmp	r3, #255	@ 0xff
 800a7bc:	d801      	bhi.n	800a7c2 <HAL_GPIO_Init+0x13a>
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	e001      	b.n	800a7c6 <HAL_GPIO_Init+0x13e>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	3304      	adds	r3, #4
 800a7c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800a7c8:	69bb      	ldr	r3, [r7, #24]
 800a7ca:	2bff      	cmp	r3, #255	@ 0xff
 800a7cc:	d802      	bhi.n	800a7d4 <HAL_GPIO_Init+0x14c>
 800a7ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7d0:	009b      	lsls	r3, r3, #2
 800a7d2:	e002      	b.n	800a7da <HAL_GPIO_Init+0x152>
 800a7d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7d6:	3b08      	subs	r3, #8
 800a7d8:	009b      	lsls	r3, r3, #2
 800a7da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	681a      	ldr	r2, [r3, #0]
 800a7e0:	210f      	movs	r1, #15
 800a7e2:	693b      	ldr	r3, [r7, #16]
 800a7e4:	fa01 f303 	lsl.w	r3, r1, r3
 800a7e8:	43db      	mvns	r3, r3
 800a7ea:	401a      	ands	r2, r3
 800a7ec:	6a39      	ldr	r1, [r7, #32]
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	fa01 f303 	lsl.w	r3, r1, r3
 800a7f4:	431a      	orrs	r2, r3
 800a7f6:	697b      	ldr	r3, [r7, #20]
 800a7f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	685b      	ldr	r3, [r3, #4]
 800a7fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a802:	2b00      	cmp	r3, #0
 800a804:	f000 80b1 	beq.w	800a96a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800a808:	4b4d      	ldr	r3, [pc, #308]	@ (800a940 <HAL_GPIO_Init+0x2b8>)
 800a80a:	699b      	ldr	r3, [r3, #24]
 800a80c:	4a4c      	ldr	r2, [pc, #304]	@ (800a940 <HAL_GPIO_Init+0x2b8>)
 800a80e:	f043 0301 	orr.w	r3, r3, #1
 800a812:	6193      	str	r3, [r2, #24]
 800a814:	4b4a      	ldr	r3, [pc, #296]	@ (800a940 <HAL_GPIO_Init+0x2b8>)
 800a816:	699b      	ldr	r3, [r3, #24]
 800a818:	f003 0301 	and.w	r3, r3, #1
 800a81c:	60bb      	str	r3, [r7, #8]
 800a81e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800a820:	4a48      	ldr	r2, [pc, #288]	@ (800a944 <HAL_GPIO_Init+0x2bc>)
 800a822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a824:	089b      	lsrs	r3, r3, #2
 800a826:	3302      	adds	r3, #2
 800a828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a82c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800a82e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a830:	f003 0303 	and.w	r3, r3, #3
 800a834:	009b      	lsls	r3, r3, #2
 800a836:	220f      	movs	r2, #15
 800a838:	fa02 f303 	lsl.w	r3, r2, r3
 800a83c:	43db      	mvns	r3, r3
 800a83e:	68fa      	ldr	r2, [r7, #12]
 800a840:	4013      	ands	r3, r2
 800a842:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	4a40      	ldr	r2, [pc, #256]	@ (800a948 <HAL_GPIO_Init+0x2c0>)
 800a848:	4293      	cmp	r3, r2
 800a84a:	d013      	beq.n	800a874 <HAL_GPIO_Init+0x1ec>
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	4a3f      	ldr	r2, [pc, #252]	@ (800a94c <HAL_GPIO_Init+0x2c4>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d00d      	beq.n	800a870 <HAL_GPIO_Init+0x1e8>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	4a3e      	ldr	r2, [pc, #248]	@ (800a950 <HAL_GPIO_Init+0x2c8>)
 800a858:	4293      	cmp	r3, r2
 800a85a:	d007      	beq.n	800a86c <HAL_GPIO_Init+0x1e4>
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	4a3d      	ldr	r2, [pc, #244]	@ (800a954 <HAL_GPIO_Init+0x2cc>)
 800a860:	4293      	cmp	r3, r2
 800a862:	d101      	bne.n	800a868 <HAL_GPIO_Init+0x1e0>
 800a864:	2303      	movs	r3, #3
 800a866:	e006      	b.n	800a876 <HAL_GPIO_Init+0x1ee>
 800a868:	2304      	movs	r3, #4
 800a86a:	e004      	b.n	800a876 <HAL_GPIO_Init+0x1ee>
 800a86c:	2302      	movs	r3, #2
 800a86e:	e002      	b.n	800a876 <HAL_GPIO_Init+0x1ee>
 800a870:	2301      	movs	r3, #1
 800a872:	e000      	b.n	800a876 <HAL_GPIO_Init+0x1ee>
 800a874:	2300      	movs	r3, #0
 800a876:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a878:	f002 0203 	and.w	r2, r2, #3
 800a87c:	0092      	lsls	r2, r2, #2
 800a87e:	4093      	lsls	r3, r2
 800a880:	68fa      	ldr	r2, [r7, #12]
 800a882:	4313      	orrs	r3, r2
 800a884:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800a886:	492f      	ldr	r1, [pc, #188]	@ (800a944 <HAL_GPIO_Init+0x2bc>)
 800a888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a88a:	089b      	lsrs	r3, r3, #2
 800a88c:	3302      	adds	r3, #2
 800a88e:	68fa      	ldr	r2, [r7, #12]
 800a890:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	685b      	ldr	r3, [r3, #4]
 800a898:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d006      	beq.n	800a8ae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800a8a0:	4b2d      	ldr	r3, [pc, #180]	@ (800a958 <HAL_GPIO_Init+0x2d0>)
 800a8a2:	689a      	ldr	r2, [r3, #8]
 800a8a4:	492c      	ldr	r1, [pc, #176]	@ (800a958 <HAL_GPIO_Init+0x2d0>)
 800a8a6:	69bb      	ldr	r3, [r7, #24]
 800a8a8:	4313      	orrs	r3, r2
 800a8aa:	608b      	str	r3, [r1, #8]
 800a8ac:	e006      	b.n	800a8bc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800a8ae:	4b2a      	ldr	r3, [pc, #168]	@ (800a958 <HAL_GPIO_Init+0x2d0>)
 800a8b0:	689a      	ldr	r2, [r3, #8]
 800a8b2:	69bb      	ldr	r3, [r7, #24]
 800a8b4:	43db      	mvns	r3, r3
 800a8b6:	4928      	ldr	r1, [pc, #160]	@ (800a958 <HAL_GPIO_Init+0x2d0>)
 800a8b8:	4013      	ands	r3, r2
 800a8ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	685b      	ldr	r3, [r3, #4]
 800a8c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d006      	beq.n	800a8d6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800a8c8:	4b23      	ldr	r3, [pc, #140]	@ (800a958 <HAL_GPIO_Init+0x2d0>)
 800a8ca:	68da      	ldr	r2, [r3, #12]
 800a8cc:	4922      	ldr	r1, [pc, #136]	@ (800a958 <HAL_GPIO_Init+0x2d0>)
 800a8ce:	69bb      	ldr	r3, [r7, #24]
 800a8d0:	4313      	orrs	r3, r2
 800a8d2:	60cb      	str	r3, [r1, #12]
 800a8d4:	e006      	b.n	800a8e4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800a8d6:	4b20      	ldr	r3, [pc, #128]	@ (800a958 <HAL_GPIO_Init+0x2d0>)
 800a8d8:	68da      	ldr	r2, [r3, #12]
 800a8da:	69bb      	ldr	r3, [r7, #24]
 800a8dc:	43db      	mvns	r3, r3
 800a8de:	491e      	ldr	r1, [pc, #120]	@ (800a958 <HAL_GPIO_Init+0x2d0>)
 800a8e0:	4013      	ands	r3, r2
 800a8e2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	685b      	ldr	r3, [r3, #4]
 800a8e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d006      	beq.n	800a8fe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800a8f0:	4b19      	ldr	r3, [pc, #100]	@ (800a958 <HAL_GPIO_Init+0x2d0>)
 800a8f2:	685a      	ldr	r2, [r3, #4]
 800a8f4:	4918      	ldr	r1, [pc, #96]	@ (800a958 <HAL_GPIO_Init+0x2d0>)
 800a8f6:	69bb      	ldr	r3, [r7, #24]
 800a8f8:	4313      	orrs	r3, r2
 800a8fa:	604b      	str	r3, [r1, #4]
 800a8fc:	e006      	b.n	800a90c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800a8fe:	4b16      	ldr	r3, [pc, #88]	@ (800a958 <HAL_GPIO_Init+0x2d0>)
 800a900:	685a      	ldr	r2, [r3, #4]
 800a902:	69bb      	ldr	r3, [r7, #24]
 800a904:	43db      	mvns	r3, r3
 800a906:	4914      	ldr	r1, [pc, #80]	@ (800a958 <HAL_GPIO_Init+0x2d0>)
 800a908:	4013      	ands	r3, r2
 800a90a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	685b      	ldr	r3, [r3, #4]
 800a910:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a914:	2b00      	cmp	r3, #0
 800a916:	d021      	beq.n	800a95c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800a918:	4b0f      	ldr	r3, [pc, #60]	@ (800a958 <HAL_GPIO_Init+0x2d0>)
 800a91a:	681a      	ldr	r2, [r3, #0]
 800a91c:	490e      	ldr	r1, [pc, #56]	@ (800a958 <HAL_GPIO_Init+0x2d0>)
 800a91e:	69bb      	ldr	r3, [r7, #24]
 800a920:	4313      	orrs	r3, r2
 800a922:	600b      	str	r3, [r1, #0]
 800a924:	e021      	b.n	800a96a <HAL_GPIO_Init+0x2e2>
 800a926:	bf00      	nop
 800a928:	10320000 	.word	0x10320000
 800a92c:	10310000 	.word	0x10310000
 800a930:	10220000 	.word	0x10220000
 800a934:	10210000 	.word	0x10210000
 800a938:	10120000 	.word	0x10120000
 800a93c:	10110000 	.word	0x10110000
 800a940:	40021000 	.word	0x40021000
 800a944:	40010000 	.word	0x40010000
 800a948:	40010800 	.word	0x40010800
 800a94c:	40010c00 	.word	0x40010c00
 800a950:	40011000 	.word	0x40011000
 800a954:	40011400 	.word	0x40011400
 800a958:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800a95c:	4b0b      	ldr	r3, [pc, #44]	@ (800a98c <HAL_GPIO_Init+0x304>)
 800a95e:	681a      	ldr	r2, [r3, #0]
 800a960:	69bb      	ldr	r3, [r7, #24]
 800a962:	43db      	mvns	r3, r3
 800a964:	4909      	ldr	r1, [pc, #36]	@ (800a98c <HAL_GPIO_Init+0x304>)
 800a966:	4013      	ands	r3, r2
 800a968:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800a96a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a96c:	3301      	adds	r3, #1
 800a96e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	681a      	ldr	r2, [r3, #0]
 800a974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a976:	fa22 f303 	lsr.w	r3, r2, r3
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	f47f ae8e 	bne.w	800a69c <HAL_GPIO_Init+0x14>
  }
}
 800a980:	bf00      	nop
 800a982:	bf00      	nop
 800a984:	372c      	adds	r7, #44	@ 0x2c
 800a986:	46bd      	mov	sp, r7
 800a988:	bc80      	pop	{r7}
 800a98a:	4770      	bx	lr
 800a98c:	40010400 	.word	0x40010400

0800a990 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a990:	b480      	push	{r7}
 800a992:	b085      	sub	sp, #20
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
 800a998:	460b      	mov	r3, r1
 800a99a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	689a      	ldr	r2, [r3, #8]
 800a9a0:	887b      	ldrh	r3, [r7, #2]
 800a9a2:	4013      	ands	r3, r2
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d002      	beq.n	800a9ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	73fb      	strb	r3, [r7, #15]
 800a9ac:	e001      	b.n	800a9b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a9b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3714      	adds	r7, #20
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bc80      	pop	{r7}
 800a9bc:	4770      	bx	lr

0800a9be <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a9be:	b480      	push	{r7}
 800a9c0:	b083      	sub	sp, #12
 800a9c2:	af00      	add	r7, sp, #0
 800a9c4:	6078      	str	r0, [r7, #4]
 800a9c6:	460b      	mov	r3, r1
 800a9c8:	807b      	strh	r3, [r7, #2]
 800a9ca:	4613      	mov	r3, r2
 800a9cc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a9ce:	787b      	ldrb	r3, [r7, #1]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d003      	beq.n	800a9dc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a9d4:	887a      	ldrh	r2, [r7, #2]
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800a9da:	e003      	b.n	800a9e4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800a9dc:	887b      	ldrh	r3, [r7, #2]
 800a9de:	041a      	lsls	r2, r3, #16
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	611a      	str	r2, [r3, #16]
}
 800a9e4:	bf00      	nop
 800a9e6:	370c      	adds	r7, #12
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bc80      	pop	{r7}
 800a9ec:	4770      	bx	lr
	...

0800a9f0 <HAL_PWR_EnableWakeUpPin>:
  *        This parameter can be one of the following values:
  *           @arg PWR_WAKEUP_PIN1
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b085      	sub	sp, #20
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	fa93 f3a3 	rbit	r3, r3
 800aa02:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800aa04:	68bb      	ldr	r3, [r7, #8]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Enable the EWUPx pin */
  *(__IO uint32_t *) CSR_EWUP_BB(WakeUpPinx) = (uint32_t)ENABLE;
 800aa06:	fab3 f383 	clz	r3, r3
 800aa0a:	b2db      	uxtb	r3, r3
 800aa0c:	461a      	mov	r2, r3
 800aa0e:	4b05      	ldr	r3, [pc, #20]	@ (800aa24 <HAL_PWR_EnableWakeUpPin+0x34>)
 800aa10:	4413      	add	r3, r2
 800aa12:	009b      	lsls	r3, r3, #2
 800aa14:	461a      	mov	r2, r3
 800aa16:	2301      	movs	r3, #1
 800aa18:	6013      	str	r3, [r2, #0]
}
 800aa1a:	bf00      	nop
 800aa1c:	3714      	adds	r7, #20
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bc80      	pop	{r7}
 800aa22:	4770      	bx	lr
 800aa24:	10838020 	.word	0x10838020

0800aa28 <HAL_PWR_EnterSTANDBYMode>:
  *          - TAMPER pin if configured for tamper or calibration out.
  *          - WKUP pin (PA0) if enabled.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 800aa28:	b480      	push	{r7}
 800aa2a:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 800aa2c:	4b08      	ldr	r3, [pc, #32]	@ (800aa50 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	4a07      	ldr	r2, [pc, #28]	@ (800aa50 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800aa32:	f043 0302 	orr.w	r3, r3, #2
 800aa36:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800aa38:	4b06      	ldr	r3, [pc, #24]	@ (800aa54 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800aa3a:	691b      	ldr	r3, [r3, #16]
 800aa3c:	4a05      	ldr	r2, [pc, #20]	@ (800aa54 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800aa3e:	f043 0304 	orr.w	r3, r3, #4
 800aa42:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 800aa44:	bf30      	wfi
}
 800aa46:	bf00      	nop
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bc80      	pop	{r7}
 800aa4c:	4770      	bx	lr
 800aa4e:	bf00      	nop
 800aa50:	40007000 	.word	0x40007000
 800aa54:	e000ed00 	.word	0xe000ed00

0800aa58 <HAL_PWR_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 800aa5c:	4b06      	ldr	r3, [pc, #24]	@ (800aa78 <HAL_PWR_PVD_IRQHandler+0x20>)
 800aa5e:	695b      	ldr	r3, [r3, #20]
 800aa60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d005      	beq.n	800aa74 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 800aa68:	f000 f808 	bl	800aa7c <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 800aa6c:	4b02      	ldr	r3, [pc, #8]	@ (800aa78 <HAL_PWR_PVD_IRQHandler+0x20>)
 800aa6e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800aa72:	615a      	str	r2, [r3, #20]
  }
}
 800aa74:	bf00      	nop
 800aa76:	bd80      	pop	{r7, pc}
 800aa78:	40010400 	.word	0x40010400

0800aa7c <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 800aa80:	bf00      	nop
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bc80      	pop	{r7}
 800aa86:	4770      	bx	lr

0800aa88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b086      	sub	sp, #24
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d101      	bne.n	800aa9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800aa96:	2301      	movs	r3, #1
 800aa98:	e272      	b.n	800af80 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f003 0301 	and.w	r3, r3, #1
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	f000 8087 	beq.w	800abb6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800aaa8:	4b92      	ldr	r3, [pc, #584]	@ (800acf4 <HAL_RCC_OscConfig+0x26c>)
 800aaaa:	685b      	ldr	r3, [r3, #4]
 800aaac:	f003 030c 	and.w	r3, r3, #12
 800aab0:	2b04      	cmp	r3, #4
 800aab2:	d00c      	beq.n	800aace <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800aab4:	4b8f      	ldr	r3, [pc, #572]	@ (800acf4 <HAL_RCC_OscConfig+0x26c>)
 800aab6:	685b      	ldr	r3, [r3, #4]
 800aab8:	f003 030c 	and.w	r3, r3, #12
 800aabc:	2b08      	cmp	r3, #8
 800aabe:	d112      	bne.n	800aae6 <HAL_RCC_OscConfig+0x5e>
 800aac0:	4b8c      	ldr	r3, [pc, #560]	@ (800acf4 <HAL_RCC_OscConfig+0x26c>)
 800aac2:	685b      	ldr	r3, [r3, #4]
 800aac4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800aac8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aacc:	d10b      	bne.n	800aae6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aace:	4b89      	ldr	r3, [pc, #548]	@ (800acf4 <HAL_RCC_OscConfig+0x26c>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d06c      	beq.n	800abb4 <HAL_RCC_OscConfig+0x12c>
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	685b      	ldr	r3, [r3, #4]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d168      	bne.n	800abb4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800aae2:	2301      	movs	r3, #1
 800aae4:	e24c      	b.n	800af80 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	685b      	ldr	r3, [r3, #4]
 800aaea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aaee:	d106      	bne.n	800aafe <HAL_RCC_OscConfig+0x76>
 800aaf0:	4b80      	ldr	r3, [pc, #512]	@ (800acf4 <HAL_RCC_OscConfig+0x26c>)
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	4a7f      	ldr	r2, [pc, #508]	@ (800acf4 <HAL_RCC_OscConfig+0x26c>)
 800aaf6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aafa:	6013      	str	r3, [r2, #0]
 800aafc:	e02e      	b.n	800ab5c <HAL_RCC_OscConfig+0xd4>
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	685b      	ldr	r3, [r3, #4]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d10c      	bne.n	800ab20 <HAL_RCC_OscConfig+0x98>
 800ab06:	4b7b      	ldr	r3, [pc, #492]	@ (800acf4 <HAL_RCC_OscConfig+0x26c>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	4a7a      	ldr	r2, [pc, #488]	@ (800acf4 <HAL_RCC_OscConfig+0x26c>)
 800ab0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ab10:	6013      	str	r3, [r2, #0]
 800ab12:	4b78      	ldr	r3, [pc, #480]	@ (800acf4 <HAL_RCC_OscConfig+0x26c>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	4a77      	ldr	r2, [pc, #476]	@ (800acf4 <HAL_RCC_OscConfig+0x26c>)
 800ab18:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ab1c:	6013      	str	r3, [r2, #0]
 800ab1e:	e01d      	b.n	800ab5c <HAL_RCC_OscConfig+0xd4>
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	685b      	ldr	r3, [r3, #4]
 800ab24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ab28:	d10c      	bne.n	800ab44 <HAL_RCC_OscConfig+0xbc>
 800ab2a:	4b72      	ldr	r3, [pc, #456]	@ (800acf4 <HAL_RCC_OscConfig+0x26c>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	4a71      	ldr	r2, [pc, #452]	@ (800acf4 <HAL_RCC_OscConfig+0x26c>)
 800ab30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ab34:	6013      	str	r3, [r2, #0]
 800ab36:	4b6f      	ldr	r3, [pc, #444]	@ (800acf4 <HAL_RCC_OscConfig+0x26c>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	4a6e      	ldr	r2, [pc, #440]	@ (800acf4 <HAL_RCC_OscConfig+0x26c>)
 800ab3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ab40:	6013      	str	r3, [r2, #0]
 800ab42:	e00b      	b.n	800ab5c <HAL_RCC_OscConfig+0xd4>
 800ab44:	4b6b      	ldr	r3, [pc, #428]	@ (800acf4 <HAL_RCC_OscConfig+0x26c>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	4a6a      	ldr	r2, [pc, #424]	@ (800acf4 <HAL_RCC_OscConfig+0x26c>)
 800ab4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ab4e:	6013      	str	r3, [r2, #0]
 800ab50:	4b68      	ldr	r3, [pc, #416]	@ (800acf4 <HAL_RCC_OscConfig+0x26c>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	4a67      	ldr	r2, [pc, #412]	@ (800acf4 <HAL_RCC_OscConfig+0x26c>)
 800ab56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ab5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	685b      	ldr	r3, [r3, #4]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d013      	beq.n	800ab8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab64:	f7fd fb44 	bl	80081f0 <HAL_GetTick>
 800ab68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ab6a:	e008      	b.n	800ab7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ab6c:	f7fd fb40 	bl	80081f0 <HAL_GetTick>
 800ab70:	4602      	mov	r2, r0
 800ab72:	693b      	ldr	r3, [r7, #16]
 800ab74:	1ad3      	subs	r3, r2, r3
 800ab76:	2b64      	cmp	r3, #100	@ 0x64
 800ab78:	d901      	bls.n	800ab7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800ab7a:	2303      	movs	r3, #3
 800ab7c:	e200      	b.n	800af80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ab7e:	4b5d      	ldr	r3, [pc, #372]	@ (800acf4 <HAL_RCC_OscConfig+0x26c>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d0f0      	beq.n	800ab6c <HAL_RCC_OscConfig+0xe4>
 800ab8a:	e014      	b.n	800abb6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab8c:	f7fd fb30 	bl	80081f0 <HAL_GetTick>
 800ab90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ab92:	e008      	b.n	800aba6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ab94:	f7fd fb2c 	bl	80081f0 <HAL_GetTick>
 800ab98:	4602      	mov	r2, r0
 800ab9a:	693b      	ldr	r3, [r7, #16]
 800ab9c:	1ad3      	subs	r3, r2, r3
 800ab9e:	2b64      	cmp	r3, #100	@ 0x64
 800aba0:	d901      	bls.n	800aba6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800aba2:	2303      	movs	r3, #3
 800aba4:	e1ec      	b.n	800af80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800aba6:	4b53      	ldr	r3, [pc, #332]	@ (800acf4 <HAL_RCC_OscConfig+0x26c>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d1f0      	bne.n	800ab94 <HAL_RCC_OscConfig+0x10c>
 800abb2:	e000      	b.n	800abb6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800abb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f003 0302 	and.w	r3, r3, #2
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d063      	beq.n	800ac8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800abc2:	4b4c      	ldr	r3, [pc, #304]	@ (800acf4 <HAL_RCC_OscConfig+0x26c>)
 800abc4:	685b      	ldr	r3, [r3, #4]
 800abc6:	f003 030c 	and.w	r3, r3, #12
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d00b      	beq.n	800abe6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800abce:	4b49      	ldr	r3, [pc, #292]	@ (800acf4 <HAL_RCC_OscConfig+0x26c>)
 800abd0:	685b      	ldr	r3, [r3, #4]
 800abd2:	f003 030c 	and.w	r3, r3, #12
 800abd6:	2b08      	cmp	r3, #8
 800abd8:	d11c      	bne.n	800ac14 <HAL_RCC_OscConfig+0x18c>
 800abda:	4b46      	ldr	r3, [pc, #280]	@ (800acf4 <HAL_RCC_OscConfig+0x26c>)
 800abdc:	685b      	ldr	r3, [r3, #4]
 800abde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d116      	bne.n	800ac14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800abe6:	4b43      	ldr	r3, [pc, #268]	@ (800acf4 <HAL_RCC_OscConfig+0x26c>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	f003 0302 	and.w	r3, r3, #2
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d005      	beq.n	800abfe <HAL_RCC_OscConfig+0x176>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	691b      	ldr	r3, [r3, #16]
 800abf6:	2b01      	cmp	r3, #1
 800abf8:	d001      	beq.n	800abfe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800abfa:	2301      	movs	r3, #1
 800abfc:	e1c0      	b.n	800af80 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800abfe:	4b3d      	ldr	r3, [pc, #244]	@ (800acf4 <HAL_RCC_OscConfig+0x26c>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	695b      	ldr	r3, [r3, #20]
 800ac0a:	00db      	lsls	r3, r3, #3
 800ac0c:	4939      	ldr	r1, [pc, #228]	@ (800acf4 <HAL_RCC_OscConfig+0x26c>)
 800ac0e:	4313      	orrs	r3, r2
 800ac10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ac12:	e03a      	b.n	800ac8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	691b      	ldr	r3, [r3, #16]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d020      	beq.n	800ac5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ac1c:	4b36      	ldr	r3, [pc, #216]	@ (800acf8 <HAL_RCC_OscConfig+0x270>)
 800ac1e:	2201      	movs	r2, #1
 800ac20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac22:	f7fd fae5 	bl	80081f0 <HAL_GetTick>
 800ac26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ac28:	e008      	b.n	800ac3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ac2a:	f7fd fae1 	bl	80081f0 <HAL_GetTick>
 800ac2e:	4602      	mov	r2, r0
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	1ad3      	subs	r3, r2, r3
 800ac34:	2b02      	cmp	r3, #2
 800ac36:	d901      	bls.n	800ac3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800ac38:	2303      	movs	r3, #3
 800ac3a:	e1a1      	b.n	800af80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ac3c:	4b2d      	ldr	r3, [pc, #180]	@ (800acf4 <HAL_RCC_OscConfig+0x26c>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f003 0302 	and.w	r3, r3, #2
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d0f0      	beq.n	800ac2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ac48:	4b2a      	ldr	r3, [pc, #168]	@ (800acf4 <HAL_RCC_OscConfig+0x26c>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	695b      	ldr	r3, [r3, #20]
 800ac54:	00db      	lsls	r3, r3, #3
 800ac56:	4927      	ldr	r1, [pc, #156]	@ (800acf4 <HAL_RCC_OscConfig+0x26c>)
 800ac58:	4313      	orrs	r3, r2
 800ac5a:	600b      	str	r3, [r1, #0]
 800ac5c:	e015      	b.n	800ac8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ac5e:	4b26      	ldr	r3, [pc, #152]	@ (800acf8 <HAL_RCC_OscConfig+0x270>)
 800ac60:	2200      	movs	r2, #0
 800ac62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac64:	f7fd fac4 	bl	80081f0 <HAL_GetTick>
 800ac68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ac6a:	e008      	b.n	800ac7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ac6c:	f7fd fac0 	bl	80081f0 <HAL_GetTick>
 800ac70:	4602      	mov	r2, r0
 800ac72:	693b      	ldr	r3, [r7, #16]
 800ac74:	1ad3      	subs	r3, r2, r3
 800ac76:	2b02      	cmp	r3, #2
 800ac78:	d901      	bls.n	800ac7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800ac7a:	2303      	movs	r3, #3
 800ac7c:	e180      	b.n	800af80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ac7e:	4b1d      	ldr	r3, [pc, #116]	@ (800acf4 <HAL_RCC_OscConfig+0x26c>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f003 0302 	and.w	r3, r3, #2
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d1f0      	bne.n	800ac6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f003 0308 	and.w	r3, r3, #8
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d03a      	beq.n	800ad0c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	699b      	ldr	r3, [r3, #24]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d019      	beq.n	800acd2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ac9e:	4b17      	ldr	r3, [pc, #92]	@ (800acfc <HAL_RCC_OscConfig+0x274>)
 800aca0:	2201      	movs	r2, #1
 800aca2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aca4:	f7fd faa4 	bl	80081f0 <HAL_GetTick>
 800aca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800acaa:	e008      	b.n	800acbe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800acac:	f7fd faa0 	bl	80081f0 <HAL_GetTick>
 800acb0:	4602      	mov	r2, r0
 800acb2:	693b      	ldr	r3, [r7, #16]
 800acb4:	1ad3      	subs	r3, r2, r3
 800acb6:	2b02      	cmp	r3, #2
 800acb8:	d901      	bls.n	800acbe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800acba:	2303      	movs	r3, #3
 800acbc:	e160      	b.n	800af80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800acbe:	4b0d      	ldr	r3, [pc, #52]	@ (800acf4 <HAL_RCC_OscConfig+0x26c>)
 800acc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acc2:	f003 0302 	and.w	r3, r3, #2
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d0f0      	beq.n	800acac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800acca:	2001      	movs	r0, #1
 800accc:	f000 fafe 	bl	800b2cc <RCC_Delay>
 800acd0:	e01c      	b.n	800ad0c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800acd2:	4b0a      	ldr	r3, [pc, #40]	@ (800acfc <HAL_RCC_OscConfig+0x274>)
 800acd4:	2200      	movs	r2, #0
 800acd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800acd8:	f7fd fa8a 	bl	80081f0 <HAL_GetTick>
 800acdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800acde:	e00f      	b.n	800ad00 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ace0:	f7fd fa86 	bl	80081f0 <HAL_GetTick>
 800ace4:	4602      	mov	r2, r0
 800ace6:	693b      	ldr	r3, [r7, #16]
 800ace8:	1ad3      	subs	r3, r2, r3
 800acea:	2b02      	cmp	r3, #2
 800acec:	d908      	bls.n	800ad00 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800acee:	2303      	movs	r3, #3
 800acf0:	e146      	b.n	800af80 <HAL_RCC_OscConfig+0x4f8>
 800acf2:	bf00      	nop
 800acf4:	40021000 	.word	0x40021000
 800acf8:	42420000 	.word	0x42420000
 800acfc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ad00:	4b92      	ldr	r3, [pc, #584]	@ (800af4c <HAL_RCC_OscConfig+0x4c4>)
 800ad02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad04:	f003 0302 	and.w	r3, r3, #2
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d1e9      	bne.n	800ace0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f003 0304 	and.w	r3, r3, #4
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	f000 80a6 	beq.w	800ae66 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ad1e:	4b8b      	ldr	r3, [pc, #556]	@ (800af4c <HAL_RCC_OscConfig+0x4c4>)
 800ad20:	69db      	ldr	r3, [r3, #28]
 800ad22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d10d      	bne.n	800ad46 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ad2a:	4b88      	ldr	r3, [pc, #544]	@ (800af4c <HAL_RCC_OscConfig+0x4c4>)
 800ad2c:	69db      	ldr	r3, [r3, #28]
 800ad2e:	4a87      	ldr	r2, [pc, #540]	@ (800af4c <HAL_RCC_OscConfig+0x4c4>)
 800ad30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ad34:	61d3      	str	r3, [r2, #28]
 800ad36:	4b85      	ldr	r3, [pc, #532]	@ (800af4c <HAL_RCC_OscConfig+0x4c4>)
 800ad38:	69db      	ldr	r3, [r3, #28]
 800ad3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ad3e:	60bb      	str	r3, [r7, #8]
 800ad40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ad42:	2301      	movs	r3, #1
 800ad44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ad46:	4b82      	ldr	r3, [pc, #520]	@ (800af50 <HAL_RCC_OscConfig+0x4c8>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d118      	bne.n	800ad84 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ad52:	4b7f      	ldr	r3, [pc, #508]	@ (800af50 <HAL_RCC_OscConfig+0x4c8>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	4a7e      	ldr	r2, [pc, #504]	@ (800af50 <HAL_RCC_OscConfig+0x4c8>)
 800ad58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ad5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ad5e:	f7fd fa47 	bl	80081f0 <HAL_GetTick>
 800ad62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ad64:	e008      	b.n	800ad78 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ad66:	f7fd fa43 	bl	80081f0 <HAL_GetTick>
 800ad6a:	4602      	mov	r2, r0
 800ad6c:	693b      	ldr	r3, [r7, #16]
 800ad6e:	1ad3      	subs	r3, r2, r3
 800ad70:	2b64      	cmp	r3, #100	@ 0x64
 800ad72:	d901      	bls.n	800ad78 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800ad74:	2303      	movs	r3, #3
 800ad76:	e103      	b.n	800af80 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ad78:	4b75      	ldr	r3, [pc, #468]	@ (800af50 <HAL_RCC_OscConfig+0x4c8>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d0f0      	beq.n	800ad66 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	68db      	ldr	r3, [r3, #12]
 800ad88:	2b01      	cmp	r3, #1
 800ad8a:	d106      	bne.n	800ad9a <HAL_RCC_OscConfig+0x312>
 800ad8c:	4b6f      	ldr	r3, [pc, #444]	@ (800af4c <HAL_RCC_OscConfig+0x4c4>)
 800ad8e:	6a1b      	ldr	r3, [r3, #32]
 800ad90:	4a6e      	ldr	r2, [pc, #440]	@ (800af4c <HAL_RCC_OscConfig+0x4c4>)
 800ad92:	f043 0301 	orr.w	r3, r3, #1
 800ad96:	6213      	str	r3, [r2, #32]
 800ad98:	e02d      	b.n	800adf6 <HAL_RCC_OscConfig+0x36e>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	68db      	ldr	r3, [r3, #12]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d10c      	bne.n	800adbc <HAL_RCC_OscConfig+0x334>
 800ada2:	4b6a      	ldr	r3, [pc, #424]	@ (800af4c <HAL_RCC_OscConfig+0x4c4>)
 800ada4:	6a1b      	ldr	r3, [r3, #32]
 800ada6:	4a69      	ldr	r2, [pc, #420]	@ (800af4c <HAL_RCC_OscConfig+0x4c4>)
 800ada8:	f023 0301 	bic.w	r3, r3, #1
 800adac:	6213      	str	r3, [r2, #32]
 800adae:	4b67      	ldr	r3, [pc, #412]	@ (800af4c <HAL_RCC_OscConfig+0x4c4>)
 800adb0:	6a1b      	ldr	r3, [r3, #32]
 800adb2:	4a66      	ldr	r2, [pc, #408]	@ (800af4c <HAL_RCC_OscConfig+0x4c4>)
 800adb4:	f023 0304 	bic.w	r3, r3, #4
 800adb8:	6213      	str	r3, [r2, #32]
 800adba:	e01c      	b.n	800adf6 <HAL_RCC_OscConfig+0x36e>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	68db      	ldr	r3, [r3, #12]
 800adc0:	2b05      	cmp	r3, #5
 800adc2:	d10c      	bne.n	800adde <HAL_RCC_OscConfig+0x356>
 800adc4:	4b61      	ldr	r3, [pc, #388]	@ (800af4c <HAL_RCC_OscConfig+0x4c4>)
 800adc6:	6a1b      	ldr	r3, [r3, #32]
 800adc8:	4a60      	ldr	r2, [pc, #384]	@ (800af4c <HAL_RCC_OscConfig+0x4c4>)
 800adca:	f043 0304 	orr.w	r3, r3, #4
 800adce:	6213      	str	r3, [r2, #32]
 800add0:	4b5e      	ldr	r3, [pc, #376]	@ (800af4c <HAL_RCC_OscConfig+0x4c4>)
 800add2:	6a1b      	ldr	r3, [r3, #32]
 800add4:	4a5d      	ldr	r2, [pc, #372]	@ (800af4c <HAL_RCC_OscConfig+0x4c4>)
 800add6:	f043 0301 	orr.w	r3, r3, #1
 800adda:	6213      	str	r3, [r2, #32]
 800addc:	e00b      	b.n	800adf6 <HAL_RCC_OscConfig+0x36e>
 800adde:	4b5b      	ldr	r3, [pc, #364]	@ (800af4c <HAL_RCC_OscConfig+0x4c4>)
 800ade0:	6a1b      	ldr	r3, [r3, #32]
 800ade2:	4a5a      	ldr	r2, [pc, #360]	@ (800af4c <HAL_RCC_OscConfig+0x4c4>)
 800ade4:	f023 0301 	bic.w	r3, r3, #1
 800ade8:	6213      	str	r3, [r2, #32]
 800adea:	4b58      	ldr	r3, [pc, #352]	@ (800af4c <HAL_RCC_OscConfig+0x4c4>)
 800adec:	6a1b      	ldr	r3, [r3, #32]
 800adee:	4a57      	ldr	r2, [pc, #348]	@ (800af4c <HAL_RCC_OscConfig+0x4c4>)
 800adf0:	f023 0304 	bic.w	r3, r3, #4
 800adf4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	68db      	ldr	r3, [r3, #12]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d015      	beq.n	800ae2a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800adfe:	f7fd f9f7 	bl	80081f0 <HAL_GetTick>
 800ae02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ae04:	e00a      	b.n	800ae1c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ae06:	f7fd f9f3 	bl	80081f0 <HAL_GetTick>
 800ae0a:	4602      	mov	r2, r0
 800ae0c:	693b      	ldr	r3, [r7, #16]
 800ae0e:	1ad3      	subs	r3, r2, r3
 800ae10:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ae14:	4293      	cmp	r3, r2
 800ae16:	d901      	bls.n	800ae1c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800ae18:	2303      	movs	r3, #3
 800ae1a:	e0b1      	b.n	800af80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ae1c:	4b4b      	ldr	r3, [pc, #300]	@ (800af4c <HAL_RCC_OscConfig+0x4c4>)
 800ae1e:	6a1b      	ldr	r3, [r3, #32]
 800ae20:	f003 0302 	and.w	r3, r3, #2
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d0ee      	beq.n	800ae06 <HAL_RCC_OscConfig+0x37e>
 800ae28:	e014      	b.n	800ae54 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ae2a:	f7fd f9e1 	bl	80081f0 <HAL_GetTick>
 800ae2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ae30:	e00a      	b.n	800ae48 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ae32:	f7fd f9dd 	bl	80081f0 <HAL_GetTick>
 800ae36:	4602      	mov	r2, r0
 800ae38:	693b      	ldr	r3, [r7, #16]
 800ae3a:	1ad3      	subs	r3, r2, r3
 800ae3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ae40:	4293      	cmp	r3, r2
 800ae42:	d901      	bls.n	800ae48 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800ae44:	2303      	movs	r3, #3
 800ae46:	e09b      	b.n	800af80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ae48:	4b40      	ldr	r3, [pc, #256]	@ (800af4c <HAL_RCC_OscConfig+0x4c4>)
 800ae4a:	6a1b      	ldr	r3, [r3, #32]
 800ae4c:	f003 0302 	and.w	r3, r3, #2
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d1ee      	bne.n	800ae32 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800ae54:	7dfb      	ldrb	r3, [r7, #23]
 800ae56:	2b01      	cmp	r3, #1
 800ae58:	d105      	bne.n	800ae66 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ae5a:	4b3c      	ldr	r3, [pc, #240]	@ (800af4c <HAL_RCC_OscConfig+0x4c4>)
 800ae5c:	69db      	ldr	r3, [r3, #28]
 800ae5e:	4a3b      	ldr	r2, [pc, #236]	@ (800af4c <HAL_RCC_OscConfig+0x4c4>)
 800ae60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ae64:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	69db      	ldr	r3, [r3, #28]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	f000 8087 	beq.w	800af7e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ae70:	4b36      	ldr	r3, [pc, #216]	@ (800af4c <HAL_RCC_OscConfig+0x4c4>)
 800ae72:	685b      	ldr	r3, [r3, #4]
 800ae74:	f003 030c 	and.w	r3, r3, #12
 800ae78:	2b08      	cmp	r3, #8
 800ae7a:	d061      	beq.n	800af40 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	69db      	ldr	r3, [r3, #28]
 800ae80:	2b02      	cmp	r3, #2
 800ae82:	d146      	bne.n	800af12 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ae84:	4b33      	ldr	r3, [pc, #204]	@ (800af54 <HAL_RCC_OscConfig+0x4cc>)
 800ae86:	2200      	movs	r2, #0
 800ae88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ae8a:	f7fd f9b1 	bl	80081f0 <HAL_GetTick>
 800ae8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ae90:	e008      	b.n	800aea4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ae92:	f7fd f9ad 	bl	80081f0 <HAL_GetTick>
 800ae96:	4602      	mov	r2, r0
 800ae98:	693b      	ldr	r3, [r7, #16]
 800ae9a:	1ad3      	subs	r3, r2, r3
 800ae9c:	2b02      	cmp	r3, #2
 800ae9e:	d901      	bls.n	800aea4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800aea0:	2303      	movs	r3, #3
 800aea2:	e06d      	b.n	800af80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800aea4:	4b29      	ldr	r3, [pc, #164]	@ (800af4c <HAL_RCC_OscConfig+0x4c4>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d1f0      	bne.n	800ae92 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6a1b      	ldr	r3, [r3, #32]
 800aeb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aeb8:	d108      	bne.n	800aecc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800aeba:	4b24      	ldr	r3, [pc, #144]	@ (800af4c <HAL_RCC_OscConfig+0x4c4>)
 800aebc:	685b      	ldr	r3, [r3, #4]
 800aebe:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	689b      	ldr	r3, [r3, #8]
 800aec6:	4921      	ldr	r1, [pc, #132]	@ (800af4c <HAL_RCC_OscConfig+0x4c4>)
 800aec8:	4313      	orrs	r3, r2
 800aeca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800aecc:	4b1f      	ldr	r3, [pc, #124]	@ (800af4c <HAL_RCC_OscConfig+0x4c4>)
 800aece:	685b      	ldr	r3, [r3, #4]
 800aed0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6a19      	ldr	r1, [r3, #32]
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aedc:	430b      	orrs	r3, r1
 800aede:	491b      	ldr	r1, [pc, #108]	@ (800af4c <HAL_RCC_OscConfig+0x4c4>)
 800aee0:	4313      	orrs	r3, r2
 800aee2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800aee4:	4b1b      	ldr	r3, [pc, #108]	@ (800af54 <HAL_RCC_OscConfig+0x4cc>)
 800aee6:	2201      	movs	r2, #1
 800aee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aeea:	f7fd f981 	bl	80081f0 <HAL_GetTick>
 800aeee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800aef0:	e008      	b.n	800af04 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aef2:	f7fd f97d 	bl	80081f0 <HAL_GetTick>
 800aef6:	4602      	mov	r2, r0
 800aef8:	693b      	ldr	r3, [r7, #16]
 800aefa:	1ad3      	subs	r3, r2, r3
 800aefc:	2b02      	cmp	r3, #2
 800aefe:	d901      	bls.n	800af04 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800af00:	2303      	movs	r3, #3
 800af02:	e03d      	b.n	800af80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800af04:	4b11      	ldr	r3, [pc, #68]	@ (800af4c <HAL_RCC_OscConfig+0x4c4>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d0f0      	beq.n	800aef2 <HAL_RCC_OscConfig+0x46a>
 800af10:	e035      	b.n	800af7e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800af12:	4b10      	ldr	r3, [pc, #64]	@ (800af54 <HAL_RCC_OscConfig+0x4cc>)
 800af14:	2200      	movs	r2, #0
 800af16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800af18:	f7fd f96a 	bl	80081f0 <HAL_GetTick>
 800af1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800af1e:	e008      	b.n	800af32 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800af20:	f7fd f966 	bl	80081f0 <HAL_GetTick>
 800af24:	4602      	mov	r2, r0
 800af26:	693b      	ldr	r3, [r7, #16]
 800af28:	1ad3      	subs	r3, r2, r3
 800af2a:	2b02      	cmp	r3, #2
 800af2c:	d901      	bls.n	800af32 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800af2e:	2303      	movs	r3, #3
 800af30:	e026      	b.n	800af80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800af32:	4b06      	ldr	r3, [pc, #24]	@ (800af4c <HAL_RCC_OscConfig+0x4c4>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d1f0      	bne.n	800af20 <HAL_RCC_OscConfig+0x498>
 800af3e:	e01e      	b.n	800af7e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	69db      	ldr	r3, [r3, #28]
 800af44:	2b01      	cmp	r3, #1
 800af46:	d107      	bne.n	800af58 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800af48:	2301      	movs	r3, #1
 800af4a:	e019      	b.n	800af80 <HAL_RCC_OscConfig+0x4f8>
 800af4c:	40021000 	.word	0x40021000
 800af50:	40007000 	.word	0x40007000
 800af54:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800af58:	4b0b      	ldr	r3, [pc, #44]	@ (800af88 <HAL_RCC_OscConfig+0x500>)
 800af5a:	685b      	ldr	r3, [r3, #4]
 800af5c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	6a1b      	ldr	r3, [r3, #32]
 800af68:	429a      	cmp	r2, r3
 800af6a:	d106      	bne.n	800af7a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800af76:	429a      	cmp	r2, r3
 800af78:	d001      	beq.n	800af7e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800af7a:	2301      	movs	r3, #1
 800af7c:	e000      	b.n	800af80 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800af7e:	2300      	movs	r3, #0
}
 800af80:	4618      	mov	r0, r3
 800af82:	3718      	adds	r7, #24
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}
 800af88:	40021000 	.word	0x40021000

0800af8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b084      	sub	sp, #16
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
 800af94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d101      	bne.n	800afa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800af9c:	2301      	movs	r3, #1
 800af9e:	e0d0      	b.n	800b142 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800afa0:	4b6a      	ldr	r3, [pc, #424]	@ (800b14c <HAL_RCC_ClockConfig+0x1c0>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f003 0307 	and.w	r3, r3, #7
 800afa8:	683a      	ldr	r2, [r7, #0]
 800afaa:	429a      	cmp	r2, r3
 800afac:	d910      	bls.n	800afd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800afae:	4b67      	ldr	r3, [pc, #412]	@ (800b14c <HAL_RCC_ClockConfig+0x1c0>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	f023 0207 	bic.w	r2, r3, #7
 800afb6:	4965      	ldr	r1, [pc, #404]	@ (800b14c <HAL_RCC_ClockConfig+0x1c0>)
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	4313      	orrs	r3, r2
 800afbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800afbe:	4b63      	ldr	r3, [pc, #396]	@ (800b14c <HAL_RCC_ClockConfig+0x1c0>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f003 0307 	and.w	r3, r3, #7
 800afc6:	683a      	ldr	r2, [r7, #0]
 800afc8:	429a      	cmp	r2, r3
 800afca:	d001      	beq.n	800afd0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800afcc:	2301      	movs	r3, #1
 800afce:	e0b8      	b.n	800b142 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f003 0302 	and.w	r3, r3, #2
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d020      	beq.n	800b01e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f003 0304 	and.w	r3, r3, #4
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d005      	beq.n	800aff4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800afe8:	4b59      	ldr	r3, [pc, #356]	@ (800b150 <HAL_RCC_ClockConfig+0x1c4>)
 800afea:	685b      	ldr	r3, [r3, #4]
 800afec:	4a58      	ldr	r2, [pc, #352]	@ (800b150 <HAL_RCC_ClockConfig+0x1c4>)
 800afee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800aff2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f003 0308 	and.w	r3, r3, #8
 800affc:	2b00      	cmp	r3, #0
 800affe:	d005      	beq.n	800b00c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b000:	4b53      	ldr	r3, [pc, #332]	@ (800b150 <HAL_RCC_ClockConfig+0x1c4>)
 800b002:	685b      	ldr	r3, [r3, #4]
 800b004:	4a52      	ldr	r2, [pc, #328]	@ (800b150 <HAL_RCC_ClockConfig+0x1c4>)
 800b006:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800b00a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b00c:	4b50      	ldr	r3, [pc, #320]	@ (800b150 <HAL_RCC_ClockConfig+0x1c4>)
 800b00e:	685b      	ldr	r3, [r3, #4]
 800b010:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	689b      	ldr	r3, [r3, #8]
 800b018:	494d      	ldr	r1, [pc, #308]	@ (800b150 <HAL_RCC_ClockConfig+0x1c4>)
 800b01a:	4313      	orrs	r3, r2
 800b01c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	f003 0301 	and.w	r3, r3, #1
 800b026:	2b00      	cmp	r3, #0
 800b028:	d040      	beq.n	800b0ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	685b      	ldr	r3, [r3, #4]
 800b02e:	2b01      	cmp	r3, #1
 800b030:	d107      	bne.n	800b042 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b032:	4b47      	ldr	r3, [pc, #284]	@ (800b150 <HAL_RCC_ClockConfig+0x1c4>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d115      	bne.n	800b06a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b03e:	2301      	movs	r3, #1
 800b040:	e07f      	b.n	800b142 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	685b      	ldr	r3, [r3, #4]
 800b046:	2b02      	cmp	r3, #2
 800b048:	d107      	bne.n	800b05a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b04a:	4b41      	ldr	r3, [pc, #260]	@ (800b150 <HAL_RCC_ClockConfig+0x1c4>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b052:	2b00      	cmp	r3, #0
 800b054:	d109      	bne.n	800b06a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b056:	2301      	movs	r3, #1
 800b058:	e073      	b.n	800b142 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b05a:	4b3d      	ldr	r3, [pc, #244]	@ (800b150 <HAL_RCC_ClockConfig+0x1c4>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f003 0302 	and.w	r3, r3, #2
 800b062:	2b00      	cmp	r3, #0
 800b064:	d101      	bne.n	800b06a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b066:	2301      	movs	r3, #1
 800b068:	e06b      	b.n	800b142 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b06a:	4b39      	ldr	r3, [pc, #228]	@ (800b150 <HAL_RCC_ClockConfig+0x1c4>)
 800b06c:	685b      	ldr	r3, [r3, #4]
 800b06e:	f023 0203 	bic.w	r2, r3, #3
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	685b      	ldr	r3, [r3, #4]
 800b076:	4936      	ldr	r1, [pc, #216]	@ (800b150 <HAL_RCC_ClockConfig+0x1c4>)
 800b078:	4313      	orrs	r3, r2
 800b07a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b07c:	f7fd f8b8 	bl	80081f0 <HAL_GetTick>
 800b080:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b082:	e00a      	b.n	800b09a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b084:	f7fd f8b4 	bl	80081f0 <HAL_GetTick>
 800b088:	4602      	mov	r2, r0
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	1ad3      	subs	r3, r2, r3
 800b08e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b092:	4293      	cmp	r3, r2
 800b094:	d901      	bls.n	800b09a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b096:	2303      	movs	r3, #3
 800b098:	e053      	b.n	800b142 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b09a:	4b2d      	ldr	r3, [pc, #180]	@ (800b150 <HAL_RCC_ClockConfig+0x1c4>)
 800b09c:	685b      	ldr	r3, [r3, #4]
 800b09e:	f003 020c 	and.w	r2, r3, #12
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	685b      	ldr	r3, [r3, #4]
 800b0a6:	009b      	lsls	r3, r3, #2
 800b0a8:	429a      	cmp	r2, r3
 800b0aa:	d1eb      	bne.n	800b084 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b0ac:	4b27      	ldr	r3, [pc, #156]	@ (800b14c <HAL_RCC_ClockConfig+0x1c0>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	f003 0307 	and.w	r3, r3, #7
 800b0b4:	683a      	ldr	r2, [r7, #0]
 800b0b6:	429a      	cmp	r2, r3
 800b0b8:	d210      	bcs.n	800b0dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b0ba:	4b24      	ldr	r3, [pc, #144]	@ (800b14c <HAL_RCC_ClockConfig+0x1c0>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	f023 0207 	bic.w	r2, r3, #7
 800b0c2:	4922      	ldr	r1, [pc, #136]	@ (800b14c <HAL_RCC_ClockConfig+0x1c0>)
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	4313      	orrs	r3, r2
 800b0c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b0ca:	4b20      	ldr	r3, [pc, #128]	@ (800b14c <HAL_RCC_ClockConfig+0x1c0>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	f003 0307 	and.w	r3, r3, #7
 800b0d2:	683a      	ldr	r2, [r7, #0]
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	d001      	beq.n	800b0dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800b0d8:	2301      	movs	r3, #1
 800b0da:	e032      	b.n	800b142 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	f003 0304 	and.w	r3, r3, #4
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d008      	beq.n	800b0fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b0e8:	4b19      	ldr	r3, [pc, #100]	@ (800b150 <HAL_RCC_ClockConfig+0x1c4>)
 800b0ea:	685b      	ldr	r3, [r3, #4]
 800b0ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	68db      	ldr	r3, [r3, #12]
 800b0f4:	4916      	ldr	r1, [pc, #88]	@ (800b150 <HAL_RCC_ClockConfig+0x1c4>)
 800b0f6:	4313      	orrs	r3, r2
 800b0f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	f003 0308 	and.w	r3, r3, #8
 800b102:	2b00      	cmp	r3, #0
 800b104:	d009      	beq.n	800b11a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b106:	4b12      	ldr	r3, [pc, #72]	@ (800b150 <HAL_RCC_ClockConfig+0x1c4>)
 800b108:	685b      	ldr	r3, [r3, #4]
 800b10a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	691b      	ldr	r3, [r3, #16]
 800b112:	00db      	lsls	r3, r3, #3
 800b114:	490e      	ldr	r1, [pc, #56]	@ (800b150 <HAL_RCC_ClockConfig+0x1c4>)
 800b116:	4313      	orrs	r3, r2
 800b118:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b11a:	f000 f821 	bl	800b160 <HAL_RCC_GetSysClockFreq>
 800b11e:	4602      	mov	r2, r0
 800b120:	4b0b      	ldr	r3, [pc, #44]	@ (800b150 <HAL_RCC_ClockConfig+0x1c4>)
 800b122:	685b      	ldr	r3, [r3, #4]
 800b124:	091b      	lsrs	r3, r3, #4
 800b126:	f003 030f 	and.w	r3, r3, #15
 800b12a:	490a      	ldr	r1, [pc, #40]	@ (800b154 <HAL_RCC_ClockConfig+0x1c8>)
 800b12c:	5ccb      	ldrb	r3, [r1, r3]
 800b12e:	fa22 f303 	lsr.w	r3, r2, r3
 800b132:	4a09      	ldr	r2, [pc, #36]	@ (800b158 <HAL_RCC_ClockConfig+0x1cc>)
 800b134:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b136:	4b09      	ldr	r3, [pc, #36]	@ (800b15c <HAL_RCC_ClockConfig+0x1d0>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	4618      	mov	r0, r3
 800b13c:	f7fc fe02 	bl	8007d44 <HAL_InitTick>

  return HAL_OK;
 800b140:	2300      	movs	r3, #0
}
 800b142:	4618      	mov	r0, r3
 800b144:	3710      	adds	r7, #16
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}
 800b14a:	bf00      	nop
 800b14c:	40022000 	.word	0x40022000
 800b150:	40021000 	.word	0x40021000
 800b154:	0800f600 	.word	0x0800f600
 800b158:	20000020 	.word	0x20000020
 800b15c:	20000024 	.word	0x20000024

0800b160 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b160:	b480      	push	{r7}
 800b162:	b087      	sub	sp, #28
 800b164:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800b166:	2300      	movs	r3, #0
 800b168:	60fb      	str	r3, [r7, #12]
 800b16a:	2300      	movs	r3, #0
 800b16c:	60bb      	str	r3, [r7, #8]
 800b16e:	2300      	movs	r3, #0
 800b170:	617b      	str	r3, [r7, #20]
 800b172:	2300      	movs	r3, #0
 800b174:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800b176:	2300      	movs	r3, #0
 800b178:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800b17a:	4b1e      	ldr	r3, [pc, #120]	@ (800b1f4 <HAL_RCC_GetSysClockFreq+0x94>)
 800b17c:	685b      	ldr	r3, [r3, #4]
 800b17e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	f003 030c 	and.w	r3, r3, #12
 800b186:	2b04      	cmp	r3, #4
 800b188:	d002      	beq.n	800b190 <HAL_RCC_GetSysClockFreq+0x30>
 800b18a:	2b08      	cmp	r3, #8
 800b18c:	d003      	beq.n	800b196 <HAL_RCC_GetSysClockFreq+0x36>
 800b18e:	e027      	b.n	800b1e0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800b190:	4b19      	ldr	r3, [pc, #100]	@ (800b1f8 <HAL_RCC_GetSysClockFreq+0x98>)
 800b192:	613b      	str	r3, [r7, #16]
      break;
 800b194:	e027      	b.n	800b1e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	0c9b      	lsrs	r3, r3, #18
 800b19a:	f003 030f 	and.w	r3, r3, #15
 800b19e:	4a17      	ldr	r2, [pc, #92]	@ (800b1fc <HAL_RCC_GetSysClockFreq+0x9c>)
 800b1a0:	5cd3      	ldrb	r3, [r2, r3]
 800b1a2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d010      	beq.n	800b1d0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800b1ae:	4b11      	ldr	r3, [pc, #68]	@ (800b1f4 <HAL_RCC_GetSysClockFreq+0x94>)
 800b1b0:	685b      	ldr	r3, [r3, #4]
 800b1b2:	0c5b      	lsrs	r3, r3, #17
 800b1b4:	f003 0301 	and.w	r3, r3, #1
 800b1b8:	4a11      	ldr	r2, [pc, #68]	@ (800b200 <HAL_RCC_GetSysClockFreq+0xa0>)
 800b1ba:	5cd3      	ldrb	r3, [r2, r3]
 800b1bc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	4a0d      	ldr	r2, [pc, #52]	@ (800b1f8 <HAL_RCC_GetSysClockFreq+0x98>)
 800b1c2:	fb03 f202 	mul.w	r2, r3, r2
 800b1c6:	68bb      	ldr	r3, [r7, #8]
 800b1c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1cc:	617b      	str	r3, [r7, #20]
 800b1ce:	e004      	b.n	800b1da <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	4a0c      	ldr	r2, [pc, #48]	@ (800b204 <HAL_RCC_GetSysClockFreq+0xa4>)
 800b1d4:	fb02 f303 	mul.w	r3, r2, r3
 800b1d8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800b1da:	697b      	ldr	r3, [r7, #20]
 800b1dc:	613b      	str	r3, [r7, #16]
      break;
 800b1de:	e002      	b.n	800b1e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800b1e0:	4b05      	ldr	r3, [pc, #20]	@ (800b1f8 <HAL_RCC_GetSysClockFreq+0x98>)
 800b1e2:	613b      	str	r3, [r7, #16]
      break;
 800b1e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b1e6:	693b      	ldr	r3, [r7, #16]
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	371c      	adds	r7, #28
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bc80      	pop	{r7}
 800b1f0:	4770      	bx	lr
 800b1f2:	bf00      	nop
 800b1f4:	40021000 	.word	0x40021000
 800b1f8:	007a1200 	.word	0x007a1200
 800b1fc:	0800f618 	.word	0x0800f618
 800b200:	0800f628 	.word	0x0800f628
 800b204:	003d0900 	.word	0x003d0900

0800b208 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b208:	b480      	push	{r7}
 800b20a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b20c:	4b02      	ldr	r3, [pc, #8]	@ (800b218 <HAL_RCC_GetHCLKFreq+0x10>)
 800b20e:	681b      	ldr	r3, [r3, #0]
}
 800b210:	4618      	mov	r0, r3
 800b212:	46bd      	mov	sp, r7
 800b214:	bc80      	pop	{r7}
 800b216:	4770      	bx	lr
 800b218:	20000020 	.word	0x20000020

0800b21c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b220:	f7ff fff2 	bl	800b208 <HAL_RCC_GetHCLKFreq>
 800b224:	4602      	mov	r2, r0
 800b226:	4b05      	ldr	r3, [pc, #20]	@ (800b23c <HAL_RCC_GetPCLK1Freq+0x20>)
 800b228:	685b      	ldr	r3, [r3, #4]
 800b22a:	0a1b      	lsrs	r3, r3, #8
 800b22c:	f003 0307 	and.w	r3, r3, #7
 800b230:	4903      	ldr	r1, [pc, #12]	@ (800b240 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b232:	5ccb      	ldrb	r3, [r1, r3]
 800b234:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b238:	4618      	mov	r0, r3
 800b23a:	bd80      	pop	{r7, pc}
 800b23c:	40021000 	.word	0x40021000
 800b240:	0800f610 	.word	0x0800f610

0800b244 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b248:	f7ff ffde 	bl	800b208 <HAL_RCC_GetHCLKFreq>
 800b24c:	4602      	mov	r2, r0
 800b24e:	4b05      	ldr	r3, [pc, #20]	@ (800b264 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b250:	685b      	ldr	r3, [r3, #4]
 800b252:	0adb      	lsrs	r3, r3, #11
 800b254:	f003 0307 	and.w	r3, r3, #7
 800b258:	4903      	ldr	r1, [pc, #12]	@ (800b268 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b25a:	5ccb      	ldrb	r3, [r1, r3]
 800b25c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b260:	4618      	mov	r0, r3
 800b262:	bd80      	pop	{r7, pc}
 800b264:	40021000 	.word	0x40021000
 800b268:	0800f610 	.word	0x0800f610

0800b26c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b26c:	b480      	push	{r7}
 800b26e:	b083      	sub	sp, #12
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
 800b274:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	220f      	movs	r2, #15
 800b27a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b27c:	4b11      	ldr	r3, [pc, #68]	@ (800b2c4 <HAL_RCC_GetClockConfig+0x58>)
 800b27e:	685b      	ldr	r3, [r3, #4]
 800b280:	f003 0203 	and.w	r2, r3, #3
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800b288:	4b0e      	ldr	r3, [pc, #56]	@ (800b2c4 <HAL_RCC_GetClockConfig+0x58>)
 800b28a:	685b      	ldr	r3, [r3, #4]
 800b28c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800b294:	4b0b      	ldr	r3, [pc, #44]	@ (800b2c4 <HAL_RCC_GetClockConfig+0x58>)
 800b296:	685b      	ldr	r3, [r3, #4]
 800b298:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800b2a0:	4b08      	ldr	r3, [pc, #32]	@ (800b2c4 <HAL_RCC_GetClockConfig+0x58>)
 800b2a2:	685b      	ldr	r3, [r3, #4]
 800b2a4:	08db      	lsrs	r3, r3, #3
 800b2a6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b2ae:	4b06      	ldr	r3, [pc, #24]	@ (800b2c8 <HAL_RCC_GetClockConfig+0x5c>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	f003 0207 	and.w	r2, r3, #7
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800b2ba:	bf00      	nop
 800b2bc:	370c      	adds	r7, #12
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bc80      	pop	{r7}
 800b2c2:	4770      	bx	lr
 800b2c4:	40021000 	.word	0x40021000
 800b2c8:	40022000 	.word	0x40022000

0800b2cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800b2cc:	b480      	push	{r7}
 800b2ce:	b085      	sub	sp, #20
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800b2d4:	4b0a      	ldr	r3, [pc, #40]	@ (800b300 <RCC_Delay+0x34>)
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	4a0a      	ldr	r2, [pc, #40]	@ (800b304 <RCC_Delay+0x38>)
 800b2da:	fba2 2303 	umull	r2, r3, r2, r3
 800b2de:	0a5b      	lsrs	r3, r3, #9
 800b2e0:	687a      	ldr	r2, [r7, #4]
 800b2e2:	fb02 f303 	mul.w	r3, r2, r3
 800b2e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800b2e8:	bf00      	nop
  }
  while (Delay --);
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	1e5a      	subs	r2, r3, #1
 800b2ee:	60fa      	str	r2, [r7, #12]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d1f9      	bne.n	800b2e8 <RCC_Delay+0x1c>
}
 800b2f4:	bf00      	nop
 800b2f6:	bf00      	nop
 800b2f8:	3714      	adds	r7, #20
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bc80      	pop	{r7}
 800b2fe:	4770      	bx	lr
 800b300:	20000020 	.word	0x20000020
 800b304:	10624dd3 	.word	0x10624dd3

0800b308 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b086      	sub	sp, #24
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800b310:	2300      	movs	r3, #0
 800b312:	613b      	str	r3, [r7, #16]
 800b314:	2300      	movs	r3, #0
 800b316:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f003 0301 	and.w	r3, r3, #1
 800b320:	2b00      	cmp	r3, #0
 800b322:	d07d      	beq.n	800b420 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800b324:	2300      	movs	r3, #0
 800b326:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b328:	4b4f      	ldr	r3, [pc, #316]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b32a:	69db      	ldr	r3, [r3, #28]
 800b32c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b330:	2b00      	cmp	r3, #0
 800b332:	d10d      	bne.n	800b350 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b334:	4b4c      	ldr	r3, [pc, #304]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b336:	69db      	ldr	r3, [r3, #28]
 800b338:	4a4b      	ldr	r2, [pc, #300]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b33a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b33e:	61d3      	str	r3, [r2, #28]
 800b340:	4b49      	ldr	r3, [pc, #292]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b342:	69db      	ldr	r3, [r3, #28]
 800b344:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b348:	60bb      	str	r3, [r7, #8]
 800b34a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b34c:	2301      	movs	r3, #1
 800b34e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b350:	4b46      	ldr	r3, [pc, #280]	@ (800b46c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d118      	bne.n	800b38e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b35c:	4b43      	ldr	r3, [pc, #268]	@ (800b46c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	4a42      	ldr	r2, [pc, #264]	@ (800b46c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800b362:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b366:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b368:	f7fc ff42 	bl	80081f0 <HAL_GetTick>
 800b36c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b36e:	e008      	b.n	800b382 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b370:	f7fc ff3e 	bl	80081f0 <HAL_GetTick>
 800b374:	4602      	mov	r2, r0
 800b376:	693b      	ldr	r3, [r7, #16]
 800b378:	1ad3      	subs	r3, r2, r3
 800b37a:	2b64      	cmp	r3, #100	@ 0x64
 800b37c:	d901      	bls.n	800b382 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800b37e:	2303      	movs	r3, #3
 800b380:	e06d      	b.n	800b45e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b382:	4b3a      	ldr	r3, [pc, #232]	@ (800b46c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d0f0      	beq.n	800b370 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b38e:	4b36      	ldr	r3, [pc, #216]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b390:	6a1b      	ldr	r3, [r3, #32]
 800b392:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b396:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d02e      	beq.n	800b3fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	685b      	ldr	r3, [r3, #4]
 800b3a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b3a6:	68fa      	ldr	r2, [r7, #12]
 800b3a8:	429a      	cmp	r2, r3
 800b3aa:	d027      	beq.n	800b3fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b3ac:	4b2e      	ldr	r3, [pc, #184]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b3ae:	6a1b      	ldr	r3, [r3, #32]
 800b3b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b3b4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b3b6:	4b2e      	ldr	r3, [pc, #184]	@ (800b470 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800b3b8:	2201      	movs	r2, #1
 800b3ba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b3bc:	4b2c      	ldr	r3, [pc, #176]	@ (800b470 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800b3be:	2200      	movs	r2, #0
 800b3c0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800b3c2:	4a29      	ldr	r2, [pc, #164]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	f003 0301 	and.w	r3, r3, #1
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d014      	beq.n	800b3fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b3d2:	f7fc ff0d 	bl	80081f0 <HAL_GetTick>
 800b3d6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b3d8:	e00a      	b.n	800b3f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b3da:	f7fc ff09 	bl	80081f0 <HAL_GetTick>
 800b3de:	4602      	mov	r2, r0
 800b3e0:	693b      	ldr	r3, [r7, #16]
 800b3e2:	1ad3      	subs	r3, r2, r3
 800b3e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b3e8:	4293      	cmp	r3, r2
 800b3ea:	d901      	bls.n	800b3f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800b3ec:	2303      	movs	r3, #3
 800b3ee:	e036      	b.n	800b45e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b3f0:	4b1d      	ldr	r3, [pc, #116]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b3f2:	6a1b      	ldr	r3, [r3, #32]
 800b3f4:	f003 0302 	and.w	r3, r3, #2
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d0ee      	beq.n	800b3da <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b3fc:	4b1a      	ldr	r3, [pc, #104]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b3fe:	6a1b      	ldr	r3, [r3, #32]
 800b400:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	685b      	ldr	r3, [r3, #4]
 800b408:	4917      	ldr	r1, [pc, #92]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b40a:	4313      	orrs	r3, r2
 800b40c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800b40e:	7dfb      	ldrb	r3, [r7, #23]
 800b410:	2b01      	cmp	r3, #1
 800b412:	d105      	bne.n	800b420 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b414:	4b14      	ldr	r3, [pc, #80]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b416:	69db      	ldr	r3, [r3, #28]
 800b418:	4a13      	ldr	r2, [pc, #76]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b41a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b41e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	f003 0302 	and.w	r3, r3, #2
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d008      	beq.n	800b43e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b42c:	4b0e      	ldr	r3, [pc, #56]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b42e:	685b      	ldr	r3, [r3, #4]
 800b430:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	689b      	ldr	r3, [r3, #8]
 800b438:	490b      	ldr	r1, [pc, #44]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b43a:	4313      	orrs	r3, r2
 800b43c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	f003 0310 	and.w	r3, r3, #16
 800b446:	2b00      	cmp	r3, #0
 800b448:	d008      	beq.n	800b45c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b44a:	4b07      	ldr	r3, [pc, #28]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b44c:	685b      	ldr	r3, [r3, #4]
 800b44e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	68db      	ldr	r3, [r3, #12]
 800b456:	4904      	ldr	r1, [pc, #16]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b458:	4313      	orrs	r3, r2
 800b45a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800b45c:	2300      	movs	r3, #0
}
 800b45e:	4618      	mov	r0, r3
 800b460:	3718      	adds	r7, #24
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}
 800b466:	bf00      	nop
 800b468:	40021000 	.word	0x40021000
 800b46c:	40007000 	.word	0x40007000
 800b470:	42420440 	.word	0x42420440

0800b474 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b088      	sub	sp, #32
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800b47c:	2300      	movs	r3, #0
 800b47e:	617b      	str	r3, [r7, #20]
 800b480:	2300      	movs	r3, #0
 800b482:	61fb      	str	r3, [r7, #28]
 800b484:	2300      	movs	r3, #0
 800b486:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800b488:	2300      	movs	r3, #0
 800b48a:	60fb      	str	r3, [r7, #12]
 800b48c:	2300      	movs	r3, #0
 800b48e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2b10      	cmp	r3, #16
 800b494:	d00a      	beq.n	800b4ac <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	2b10      	cmp	r3, #16
 800b49a:	f200 808a 	bhi.w	800b5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	2b01      	cmp	r3, #1
 800b4a2:	d045      	beq.n	800b530 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2b02      	cmp	r3, #2
 800b4a8:	d075      	beq.n	800b596 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800b4aa:	e082      	b.n	800b5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800b4ac:	4b46      	ldr	r3, [pc, #280]	@ (800b5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800b4ae:	685b      	ldr	r3, [r3, #4]
 800b4b0:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800b4b2:	4b45      	ldr	r3, [pc, #276]	@ (800b5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d07b      	beq.n	800b5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	0c9b      	lsrs	r3, r3, #18
 800b4c2:	f003 030f 	and.w	r3, r3, #15
 800b4c6:	4a41      	ldr	r2, [pc, #260]	@ (800b5cc <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800b4c8:	5cd3      	ldrb	r3, [r2, r3]
 800b4ca:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d015      	beq.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800b4d6:	4b3c      	ldr	r3, [pc, #240]	@ (800b5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800b4d8:	685b      	ldr	r3, [r3, #4]
 800b4da:	0c5b      	lsrs	r3, r3, #17
 800b4dc:	f003 0301 	and.w	r3, r3, #1
 800b4e0:	4a3b      	ldr	r2, [pc, #236]	@ (800b5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800b4e2:	5cd3      	ldrb	r3, [r2, r3]
 800b4e4:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d00d      	beq.n	800b50c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800b4f0:	4a38      	ldr	r2, [pc, #224]	@ (800b5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	fbb2 f2f3 	udiv	r2, r2, r3
 800b4f8:	693b      	ldr	r3, [r7, #16]
 800b4fa:	fb02 f303 	mul.w	r3, r2, r3
 800b4fe:	61fb      	str	r3, [r7, #28]
 800b500:	e004      	b.n	800b50c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800b502:	693b      	ldr	r3, [r7, #16]
 800b504:	4a34      	ldr	r2, [pc, #208]	@ (800b5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800b506:	fb02 f303 	mul.w	r3, r2, r3
 800b50a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800b50c:	4b2e      	ldr	r3, [pc, #184]	@ (800b5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800b50e:	685b      	ldr	r3, [r3, #4]
 800b510:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b514:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b518:	d102      	bne.n	800b520 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800b51a:	69fb      	ldr	r3, [r7, #28]
 800b51c:	61bb      	str	r3, [r7, #24]
      break;
 800b51e:	e04a      	b.n	800b5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800b520:	69fb      	ldr	r3, [r7, #28]
 800b522:	005b      	lsls	r3, r3, #1
 800b524:	4a2d      	ldr	r2, [pc, #180]	@ (800b5dc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800b526:	fba2 2303 	umull	r2, r3, r2, r3
 800b52a:	085b      	lsrs	r3, r3, #1
 800b52c:	61bb      	str	r3, [r7, #24]
      break;
 800b52e:	e042      	b.n	800b5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 800b530:	4b25      	ldr	r3, [pc, #148]	@ (800b5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800b532:	6a1b      	ldr	r3, [r3, #32]
 800b534:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b53c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b540:	d108      	bne.n	800b554 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	f003 0302 	and.w	r3, r3, #2
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d003      	beq.n	800b554 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800b54c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b550:	61bb      	str	r3, [r7, #24]
 800b552:	e01f      	b.n	800b594 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b55a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b55e:	d109      	bne.n	800b574 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800b560:	4b19      	ldr	r3, [pc, #100]	@ (800b5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800b562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b564:	f003 0302 	and.w	r3, r3, #2
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d003      	beq.n	800b574 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800b56c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 800b570:	61bb      	str	r3, [r7, #24]
 800b572:	e00f      	b.n	800b594 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b57a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b57e:	d11c      	bne.n	800b5ba <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800b580:	4b11      	ldr	r3, [pc, #68]	@ (800b5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d016      	beq.n	800b5ba <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800b58c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 800b590:	61bb      	str	r3, [r7, #24]
      break;
 800b592:	e012      	b.n	800b5ba <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800b594:	e011      	b.n	800b5ba <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800b596:	f7ff fe55 	bl	800b244 <HAL_RCC_GetPCLK2Freq>
 800b59a:	4602      	mov	r2, r0
 800b59c:	4b0a      	ldr	r3, [pc, #40]	@ (800b5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800b59e:	685b      	ldr	r3, [r3, #4]
 800b5a0:	0b9b      	lsrs	r3, r3, #14
 800b5a2:	f003 0303 	and.w	r3, r3, #3
 800b5a6:	3301      	adds	r3, #1
 800b5a8:	005b      	lsls	r3, r3, #1
 800b5aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5ae:	61bb      	str	r3, [r7, #24]
      break;
 800b5b0:	e004      	b.n	800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800b5b2:	bf00      	nop
 800b5b4:	e002      	b.n	800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800b5b6:	bf00      	nop
 800b5b8:	e000      	b.n	800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800b5ba:	bf00      	nop
    }
  }
  return (frequency);
 800b5bc:	69bb      	ldr	r3, [r7, #24]
}
 800b5be:	4618      	mov	r0, r3
 800b5c0:	3720      	adds	r7, #32
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}
 800b5c6:	bf00      	nop
 800b5c8:	40021000 	.word	0x40021000
 800b5cc:	0800f62c 	.word	0x0800f62c
 800b5d0:	0800f63c 	.word	0x0800f63c
 800b5d4:	007a1200 	.word	0x007a1200
 800b5d8:	003d0900 	.word	0x003d0900
 800b5dc:	aaaaaaab 	.word	0xaaaaaaab

0800b5e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b082      	sub	sp, #8
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d101      	bne.n	800b5f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	e04c      	b.n	800b68c <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b5f8:	b2db      	uxtb	r3, r3
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d111      	bne.n	800b622 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	2200      	movs	r2, #0
 800b602:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f000 fbc4 	bl	800bd94 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b610:	2b00      	cmp	r3, #0
 800b612:	d102      	bne.n	800b61a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	4a1f      	ldr	r2, [pc, #124]	@ (800b694 <HAL_TIM_Base_Init+0xb4>)
 800b618:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2202      	movs	r2, #2
 800b626:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681a      	ldr	r2, [r3, #0]
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	3304      	adds	r3, #4
 800b632:	4619      	mov	r1, r3
 800b634:	4610      	mov	r0, r2
 800b636:	f000 faa9 	bl	800bb8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2201      	movs	r2, #1
 800b63e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2201      	movs	r2, #1
 800b646:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2201      	movs	r2, #1
 800b64e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2201      	movs	r2, #1
 800b656:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2201      	movs	r2, #1
 800b65e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2201      	movs	r2, #1
 800b666:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2201      	movs	r2, #1
 800b66e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2201      	movs	r2, #1
 800b676:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2201      	movs	r2, #1
 800b67e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2201      	movs	r2, #1
 800b686:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b68a:	2300      	movs	r3, #0
}
 800b68c:	4618      	mov	r0, r3
 800b68e:	3708      	adds	r7, #8
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}
 800b694:	08008009 	.word	0x08008009

0800b698 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b698:	b480      	push	{r7}
 800b69a:	b085      	sub	sp, #20
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b6a6:	b2db      	uxtb	r3, r3
 800b6a8:	2b01      	cmp	r3, #1
 800b6aa:	d001      	beq.n	800b6b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	e03a      	b.n	800b726 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2202      	movs	r2, #2
 800b6b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	68da      	ldr	r2, [r3, #12]
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	f042 0201 	orr.w	r2, r2, #1
 800b6c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	4a18      	ldr	r2, [pc, #96]	@ (800b730 <HAL_TIM_Base_Start_IT+0x98>)
 800b6ce:	4293      	cmp	r3, r2
 800b6d0:	d00e      	beq.n	800b6f0 <HAL_TIM_Base_Start_IT+0x58>
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b6da:	d009      	beq.n	800b6f0 <HAL_TIM_Base_Start_IT+0x58>
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	4a14      	ldr	r2, [pc, #80]	@ (800b734 <HAL_TIM_Base_Start_IT+0x9c>)
 800b6e2:	4293      	cmp	r3, r2
 800b6e4:	d004      	beq.n	800b6f0 <HAL_TIM_Base_Start_IT+0x58>
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	4a13      	ldr	r2, [pc, #76]	@ (800b738 <HAL_TIM_Base_Start_IT+0xa0>)
 800b6ec:	4293      	cmp	r3, r2
 800b6ee:	d111      	bne.n	800b714 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	689b      	ldr	r3, [r3, #8]
 800b6f6:	f003 0307 	and.w	r3, r3, #7
 800b6fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	2b06      	cmp	r3, #6
 800b700:	d010      	beq.n	800b724 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	681a      	ldr	r2, [r3, #0]
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	f042 0201 	orr.w	r2, r2, #1
 800b710:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b712:	e007      	b.n	800b724 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	681a      	ldr	r2, [r3, #0]
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	f042 0201 	orr.w	r2, r2, #1
 800b722:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b724:	2300      	movs	r3, #0
}
 800b726:	4618      	mov	r0, r3
 800b728:	3714      	adds	r7, #20
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bc80      	pop	{r7}
 800b72e:	4770      	bx	lr
 800b730:	40012c00 	.word	0x40012c00
 800b734:	40000400 	.word	0x40000400
 800b738:	40000800 	.word	0x40000800

0800b73c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b084      	sub	sp, #16
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	68db      	ldr	r3, [r3, #12]
 800b74a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	691b      	ldr	r3, [r3, #16]
 800b752:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	f003 0302 	and.w	r3, r3, #2
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d026      	beq.n	800b7ac <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	f003 0302 	and.w	r3, r3, #2
 800b764:	2b00      	cmp	r3, #0
 800b766:	d021      	beq.n	800b7ac <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f06f 0202 	mvn.w	r2, #2
 800b770:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2201      	movs	r2, #1
 800b776:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	699b      	ldr	r3, [r3, #24]
 800b77e:	f003 0303 	and.w	r3, r3, #3
 800b782:	2b00      	cmp	r3, #0
 800b784:	d005      	beq.n	800b792 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	4798      	blx	r3
 800b790:	e009      	b.n	800b7a6 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	f003 0304 	and.w	r3, r3, #4
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d026      	beq.n	800b804 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	f003 0304 	and.w	r3, r3, #4
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d021      	beq.n	800b804 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	f06f 0204 	mvn.w	r2, #4
 800b7c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2202      	movs	r2, #2
 800b7ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	699b      	ldr	r3, [r3, #24]
 800b7d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d005      	beq.n	800b7ea <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b7e4:	6878      	ldr	r0, [r7, #4]
 800b7e6:	4798      	blx	r3
 800b7e8:	e009      	b.n	800b7fe <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2200      	movs	r2, #0
 800b802:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b804:	68bb      	ldr	r3, [r7, #8]
 800b806:	f003 0308 	and.w	r3, r3, #8
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d026      	beq.n	800b85c <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	f003 0308 	and.w	r3, r3, #8
 800b814:	2b00      	cmp	r3, #0
 800b816:	d021      	beq.n	800b85c <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	f06f 0208 	mvn.w	r2, #8
 800b820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2204      	movs	r2, #4
 800b826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	69db      	ldr	r3, [r3, #28]
 800b82e:	f003 0303 	and.w	r3, r3, #3
 800b832:	2b00      	cmp	r3, #0
 800b834:	d005      	beq.n	800b842 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b83c:	6878      	ldr	r0, [r7, #4]
 800b83e:	4798      	blx	r3
 800b840:	e009      	b.n	800b856 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b848:	6878      	ldr	r0, [r7, #4]
 800b84a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b852:	6878      	ldr	r0, [r7, #4]
 800b854:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2200      	movs	r2, #0
 800b85a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	f003 0310 	and.w	r3, r3, #16
 800b862:	2b00      	cmp	r3, #0
 800b864:	d026      	beq.n	800b8b4 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	f003 0310 	and.w	r3, r3, #16
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d021      	beq.n	800b8b4 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	f06f 0210 	mvn.w	r2, #16
 800b878:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2208      	movs	r2, #8
 800b87e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	69db      	ldr	r3, [r3, #28]
 800b886:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d005      	beq.n	800b89a <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b894:	6878      	ldr	r0, [r7, #4]
 800b896:	4798      	blx	r3
 800b898:	e009      	b.n	800b8ae <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b8a0:	6878      	ldr	r0, [r7, #4]
 800b8a2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	f003 0301 	and.w	r3, r3, #1
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d00e      	beq.n	800b8dc <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	f003 0301 	and.w	r3, r3, #1
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d009      	beq.n	800b8dc <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	f06f 0201 	mvn.w	r2, #1
 800b8d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d00e      	beq.n	800b904 <HAL_TIM_IRQHandler+0x1c8>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d009      	beq.n	800b904 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800b8f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d00e      	beq.n	800b92c <HAL_TIM_IRQHandler+0x1f0>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b914:	2b00      	cmp	r3, #0
 800b916:	d009      	beq.n	800b92c <HAL_TIM_IRQHandler+0x1f0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	f003 0320 	and.w	r3, r3, #32
 800b932:	2b00      	cmp	r3, #0
 800b934:	d00e      	beq.n	800b954 <HAL_TIM_IRQHandler+0x218>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	f003 0320 	and.w	r3, r3, #32
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d009      	beq.n	800b954 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	f06f 0220 	mvn.w	r2, #32
 800b948:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b954:	bf00      	nop
 800b956:	3710      	adds	r7, #16
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd80      	pop	{r7, pc}

0800b95c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b084      	sub	sp, #16
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
 800b964:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b966:	2300      	movs	r3, #0
 800b968:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b970:	2b01      	cmp	r3, #1
 800b972:	d101      	bne.n	800b978 <HAL_TIM_ConfigClockSource+0x1c>
 800b974:	2302      	movs	r3, #2
 800b976:	e0b4      	b.n	800bae2 <HAL_TIM_ConfigClockSource+0x186>
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2201      	movs	r2, #1
 800b97c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2202      	movs	r2, #2
 800b984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	689b      	ldr	r3, [r3, #8]
 800b98e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b996:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b99e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	68ba      	ldr	r2, [r7, #8]
 800b9a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b9b0:	d03e      	beq.n	800ba30 <HAL_TIM_ConfigClockSource+0xd4>
 800b9b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b9b6:	f200 8087 	bhi.w	800bac8 <HAL_TIM_ConfigClockSource+0x16c>
 800b9ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b9be:	f000 8086 	beq.w	800bace <HAL_TIM_ConfigClockSource+0x172>
 800b9c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b9c6:	d87f      	bhi.n	800bac8 <HAL_TIM_ConfigClockSource+0x16c>
 800b9c8:	2b70      	cmp	r3, #112	@ 0x70
 800b9ca:	d01a      	beq.n	800ba02 <HAL_TIM_ConfigClockSource+0xa6>
 800b9cc:	2b70      	cmp	r3, #112	@ 0x70
 800b9ce:	d87b      	bhi.n	800bac8 <HAL_TIM_ConfigClockSource+0x16c>
 800b9d0:	2b60      	cmp	r3, #96	@ 0x60
 800b9d2:	d050      	beq.n	800ba76 <HAL_TIM_ConfigClockSource+0x11a>
 800b9d4:	2b60      	cmp	r3, #96	@ 0x60
 800b9d6:	d877      	bhi.n	800bac8 <HAL_TIM_ConfigClockSource+0x16c>
 800b9d8:	2b50      	cmp	r3, #80	@ 0x50
 800b9da:	d03c      	beq.n	800ba56 <HAL_TIM_ConfigClockSource+0xfa>
 800b9dc:	2b50      	cmp	r3, #80	@ 0x50
 800b9de:	d873      	bhi.n	800bac8 <HAL_TIM_ConfigClockSource+0x16c>
 800b9e0:	2b40      	cmp	r3, #64	@ 0x40
 800b9e2:	d058      	beq.n	800ba96 <HAL_TIM_ConfigClockSource+0x13a>
 800b9e4:	2b40      	cmp	r3, #64	@ 0x40
 800b9e6:	d86f      	bhi.n	800bac8 <HAL_TIM_ConfigClockSource+0x16c>
 800b9e8:	2b30      	cmp	r3, #48	@ 0x30
 800b9ea:	d064      	beq.n	800bab6 <HAL_TIM_ConfigClockSource+0x15a>
 800b9ec:	2b30      	cmp	r3, #48	@ 0x30
 800b9ee:	d86b      	bhi.n	800bac8 <HAL_TIM_ConfigClockSource+0x16c>
 800b9f0:	2b20      	cmp	r3, #32
 800b9f2:	d060      	beq.n	800bab6 <HAL_TIM_ConfigClockSource+0x15a>
 800b9f4:	2b20      	cmp	r3, #32
 800b9f6:	d867      	bhi.n	800bac8 <HAL_TIM_ConfigClockSource+0x16c>
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d05c      	beq.n	800bab6 <HAL_TIM_ConfigClockSource+0x15a>
 800b9fc:	2b10      	cmp	r3, #16
 800b9fe:	d05a      	beq.n	800bab6 <HAL_TIM_ConfigClockSource+0x15a>
 800ba00:	e062      	b.n	800bac8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ba12:	f000 f9a0 	bl	800bd56 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	689b      	ldr	r3, [r3, #8]
 800ba1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ba1e:	68bb      	ldr	r3, [r7, #8]
 800ba20:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800ba24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	68ba      	ldr	r2, [r7, #8]
 800ba2c:	609a      	str	r2, [r3, #8]
      break;
 800ba2e:	e04f      	b.n	800bad0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ba40:	f000 f989 	bl	800bd56 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	689a      	ldr	r2, [r3, #8]
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ba52:	609a      	str	r2, [r3, #8]
      break;
 800ba54:	e03c      	b.n	800bad0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ba62:	461a      	mov	r2, r3
 800ba64:	f000 f900 	bl	800bc68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	2150      	movs	r1, #80	@ 0x50
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f000 f957 	bl	800bd22 <TIM_ITRx_SetConfig>
      break;
 800ba74:	e02c      	b.n	800bad0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ba82:	461a      	mov	r2, r3
 800ba84:	f000 f91e 	bl	800bcc4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	2160      	movs	r1, #96	@ 0x60
 800ba8e:	4618      	mov	r0, r3
 800ba90:	f000 f947 	bl	800bd22 <TIM_ITRx_SetConfig>
      break;
 800ba94:	e01c      	b.n	800bad0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800baa2:	461a      	mov	r2, r3
 800baa4:	f000 f8e0 	bl	800bc68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	2140      	movs	r1, #64	@ 0x40
 800baae:	4618      	mov	r0, r3
 800bab0:	f000 f937 	bl	800bd22 <TIM_ITRx_SetConfig>
      break;
 800bab4:	e00c      	b.n	800bad0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681a      	ldr	r2, [r3, #0]
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	4619      	mov	r1, r3
 800bac0:	4610      	mov	r0, r2
 800bac2:	f000 f92e 	bl	800bd22 <TIM_ITRx_SetConfig>
      break;
 800bac6:	e003      	b.n	800bad0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800bac8:	2301      	movs	r3, #1
 800baca:	73fb      	strb	r3, [r7, #15]
      break;
 800bacc:	e000      	b.n	800bad0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800bace:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2201      	movs	r2, #1
 800bad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2200      	movs	r2, #0
 800badc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bae0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3710      	adds	r7, #16
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}

0800baea <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800baea:	b480      	push	{r7}
 800baec:	b083      	sub	sp, #12
 800baee:	af00      	add	r7, sp, #0
 800baf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800baf2:	bf00      	nop
 800baf4:	370c      	adds	r7, #12
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bc80      	pop	{r7}
 800bafa:	4770      	bx	lr

0800bafc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bafc:	b480      	push	{r7}
 800bafe:	b083      	sub	sp, #12
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bb04:	bf00      	nop
 800bb06:	370c      	adds	r7, #12
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bc80      	pop	{r7}
 800bb0c:	4770      	bx	lr

0800bb0e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bb0e:	b480      	push	{r7}
 800bb10:	b083      	sub	sp, #12
 800bb12:	af00      	add	r7, sp, #0
 800bb14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bb16:	bf00      	nop
 800bb18:	370c      	adds	r7, #12
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	bc80      	pop	{r7}
 800bb1e:	4770      	bx	lr

0800bb20 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800bb20:	b480      	push	{r7}
 800bb22:	b083      	sub	sp, #12
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800bb28:	bf00      	nop
 800bb2a:	370c      	adds	r7, #12
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bc80      	pop	{r7}
 800bb30:	4770      	bx	lr

0800bb32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bb32:	b480      	push	{r7}
 800bb34:	b083      	sub	sp, #12
 800bb36:	af00      	add	r7, sp, #0
 800bb38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bb3a:	bf00      	nop
 800bb3c:	370c      	adds	r7, #12
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bc80      	pop	{r7}
 800bb42:	4770      	bx	lr

0800bb44 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800bb44:	b480      	push	{r7}
 800bb46:	b083      	sub	sp, #12
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800bb4c:	bf00      	nop
 800bb4e:	370c      	adds	r7, #12
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bc80      	pop	{r7}
 800bb54:	4770      	bx	lr

0800bb56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bb56:	b480      	push	{r7}
 800bb58:	b083      	sub	sp, #12
 800bb5a:	af00      	add	r7, sp, #0
 800bb5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bb5e:	bf00      	nop
 800bb60:	370c      	adds	r7, #12
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bc80      	pop	{r7}
 800bb66:	4770      	bx	lr

0800bb68 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800bb68:	b480      	push	{r7}
 800bb6a:	b083      	sub	sp, #12
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800bb70:	bf00      	nop
 800bb72:	370c      	adds	r7, #12
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bc80      	pop	{r7}
 800bb78:	4770      	bx	lr

0800bb7a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800bb7a:	b480      	push	{r7}
 800bb7c:	b083      	sub	sp, #12
 800bb7e:	af00      	add	r7, sp, #0
 800bb80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800bb82:	bf00      	nop
 800bb84:	370c      	adds	r7, #12
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bc80      	pop	{r7}
 800bb8a:	4770      	bx	lr

0800bb8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bb8c:	b480      	push	{r7}
 800bb8e:	b085      	sub	sp, #20
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
 800bb94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	4a2f      	ldr	r2, [pc, #188]	@ (800bc5c <TIM_Base_SetConfig+0xd0>)
 800bba0:	4293      	cmp	r3, r2
 800bba2:	d00b      	beq.n	800bbbc <TIM_Base_SetConfig+0x30>
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bbaa:	d007      	beq.n	800bbbc <TIM_Base_SetConfig+0x30>
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	4a2c      	ldr	r2, [pc, #176]	@ (800bc60 <TIM_Base_SetConfig+0xd4>)
 800bbb0:	4293      	cmp	r3, r2
 800bbb2:	d003      	beq.n	800bbbc <TIM_Base_SetConfig+0x30>
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	4a2b      	ldr	r2, [pc, #172]	@ (800bc64 <TIM_Base_SetConfig+0xd8>)
 800bbb8:	4293      	cmp	r3, r2
 800bbba:	d108      	bne.n	800bbce <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bbc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	685b      	ldr	r3, [r3, #4]
 800bbc8:	68fa      	ldr	r2, [r7, #12]
 800bbca:	4313      	orrs	r3, r2
 800bbcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	4a22      	ldr	r2, [pc, #136]	@ (800bc5c <TIM_Base_SetConfig+0xd0>)
 800bbd2:	4293      	cmp	r3, r2
 800bbd4:	d00b      	beq.n	800bbee <TIM_Base_SetConfig+0x62>
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bbdc:	d007      	beq.n	800bbee <TIM_Base_SetConfig+0x62>
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	4a1f      	ldr	r2, [pc, #124]	@ (800bc60 <TIM_Base_SetConfig+0xd4>)
 800bbe2:	4293      	cmp	r3, r2
 800bbe4:	d003      	beq.n	800bbee <TIM_Base_SetConfig+0x62>
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	4a1e      	ldr	r2, [pc, #120]	@ (800bc64 <TIM_Base_SetConfig+0xd8>)
 800bbea:	4293      	cmp	r3, r2
 800bbec:	d108      	bne.n	800bc00 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bbf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	68db      	ldr	r3, [r3, #12]
 800bbfa:	68fa      	ldr	r2, [r7, #12]
 800bbfc:	4313      	orrs	r3, r2
 800bbfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	695b      	ldr	r3, [r3, #20]
 800bc0a:	4313      	orrs	r3, r2
 800bc0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	68fa      	ldr	r2, [r7, #12]
 800bc12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	689a      	ldr	r2, [r3, #8]
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	681a      	ldr	r2, [r3, #0]
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	4a0d      	ldr	r2, [pc, #52]	@ (800bc5c <TIM_Base_SetConfig+0xd0>)
 800bc28:	4293      	cmp	r3, r2
 800bc2a:	d103      	bne.n	800bc34 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	691a      	ldr	r2, [r3, #16]
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2201      	movs	r2, #1
 800bc38:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	691b      	ldr	r3, [r3, #16]
 800bc3e:	f003 0301 	and.w	r3, r3, #1
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d005      	beq.n	800bc52 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	691b      	ldr	r3, [r3, #16]
 800bc4a:	f023 0201 	bic.w	r2, r3, #1
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	611a      	str	r2, [r3, #16]
  }
}
 800bc52:	bf00      	nop
 800bc54:	3714      	adds	r7, #20
 800bc56:	46bd      	mov	sp, r7
 800bc58:	bc80      	pop	{r7}
 800bc5a:	4770      	bx	lr
 800bc5c:	40012c00 	.word	0x40012c00
 800bc60:	40000400 	.word	0x40000400
 800bc64:	40000800 	.word	0x40000800

0800bc68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bc68:	b480      	push	{r7}
 800bc6a:	b087      	sub	sp, #28
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	60f8      	str	r0, [r7, #12]
 800bc70:	60b9      	str	r1, [r7, #8]
 800bc72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	6a1b      	ldr	r3, [r3, #32]
 800bc78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	6a1b      	ldr	r3, [r3, #32]
 800bc7e:	f023 0201 	bic.w	r2, r3, #1
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	699b      	ldr	r3, [r3, #24]
 800bc8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bc8c:	693b      	ldr	r3, [r7, #16]
 800bc8e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bc92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	011b      	lsls	r3, r3, #4
 800bc98:	693a      	ldr	r2, [r7, #16]
 800bc9a:	4313      	orrs	r3, r2
 800bc9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bc9e:	697b      	ldr	r3, [r7, #20]
 800bca0:	f023 030a 	bic.w	r3, r3, #10
 800bca4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bca6:	697a      	ldr	r2, [r7, #20]
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	4313      	orrs	r3, r2
 800bcac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	693a      	ldr	r2, [r7, #16]
 800bcb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	697a      	ldr	r2, [r7, #20]
 800bcb8:	621a      	str	r2, [r3, #32]
}
 800bcba:	bf00      	nop
 800bcbc:	371c      	adds	r7, #28
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bc80      	pop	{r7}
 800bcc2:	4770      	bx	lr

0800bcc4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bcc4:	b480      	push	{r7}
 800bcc6:	b087      	sub	sp, #28
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	60f8      	str	r0, [r7, #12]
 800bccc:	60b9      	str	r1, [r7, #8]
 800bcce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	6a1b      	ldr	r3, [r3, #32]
 800bcd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	6a1b      	ldr	r3, [r3, #32]
 800bcda:	f023 0210 	bic.w	r2, r3, #16
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	699b      	ldr	r3, [r3, #24]
 800bce6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bce8:	693b      	ldr	r3, [r7, #16]
 800bcea:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800bcee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	031b      	lsls	r3, r3, #12
 800bcf4:	693a      	ldr	r2, [r7, #16]
 800bcf6:	4313      	orrs	r3, r2
 800bcf8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bcfa:	697b      	ldr	r3, [r7, #20]
 800bcfc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800bd00:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	011b      	lsls	r3, r3, #4
 800bd06:	697a      	ldr	r2, [r7, #20]
 800bd08:	4313      	orrs	r3, r2
 800bd0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	693a      	ldr	r2, [r7, #16]
 800bd10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	697a      	ldr	r2, [r7, #20]
 800bd16:	621a      	str	r2, [r3, #32]
}
 800bd18:	bf00      	nop
 800bd1a:	371c      	adds	r7, #28
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	bc80      	pop	{r7}
 800bd20:	4770      	bx	lr

0800bd22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bd22:	b480      	push	{r7}
 800bd24:	b085      	sub	sp, #20
 800bd26:	af00      	add	r7, sp, #0
 800bd28:	6078      	str	r0, [r7, #4]
 800bd2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	689b      	ldr	r3, [r3, #8]
 800bd30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bd3a:	683a      	ldr	r2, [r7, #0]
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	4313      	orrs	r3, r2
 800bd40:	f043 0307 	orr.w	r3, r3, #7
 800bd44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	68fa      	ldr	r2, [r7, #12]
 800bd4a:	609a      	str	r2, [r3, #8]
}
 800bd4c:	bf00      	nop
 800bd4e:	3714      	adds	r7, #20
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bc80      	pop	{r7}
 800bd54:	4770      	bx	lr

0800bd56 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bd56:	b480      	push	{r7}
 800bd58:	b087      	sub	sp, #28
 800bd5a:	af00      	add	r7, sp, #0
 800bd5c:	60f8      	str	r0, [r7, #12]
 800bd5e:	60b9      	str	r1, [r7, #8]
 800bd60:	607a      	str	r2, [r7, #4]
 800bd62:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	689b      	ldr	r3, [r3, #8]
 800bd68:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bd6a:	697b      	ldr	r3, [r7, #20]
 800bd6c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bd70:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	021a      	lsls	r2, r3, #8
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	431a      	orrs	r2, r3
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	4313      	orrs	r3, r2
 800bd7e:	697a      	ldr	r2, [r7, #20]
 800bd80:	4313      	orrs	r3, r2
 800bd82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	697a      	ldr	r2, [r7, #20]
 800bd88:	609a      	str	r2, [r3, #8]
}
 800bd8a:	bf00      	nop
 800bd8c:	371c      	adds	r7, #28
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bc80      	pop	{r7}
 800bd92:	4770      	bx	lr

0800bd94 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800bd94:	b480      	push	{r7}
 800bd96:	b083      	sub	sp, #12
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	4a1c      	ldr	r2, [pc, #112]	@ (800be10 <TIM_ResetCallback+0x7c>)
 800bda0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	4a1b      	ldr	r2, [pc, #108]	@ (800be14 <TIM_ResetCallback+0x80>)
 800bda8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	4a1a      	ldr	r2, [pc, #104]	@ (800be18 <TIM_ResetCallback+0x84>)
 800bdb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	4a19      	ldr	r2, [pc, #100]	@ (800be1c <TIM_ResetCallback+0x88>)
 800bdb8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	4a18      	ldr	r2, [pc, #96]	@ (800be20 <TIM_ResetCallback+0x8c>)
 800bdc0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	4a17      	ldr	r2, [pc, #92]	@ (800be24 <TIM_ResetCallback+0x90>)
 800bdc8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	4a16      	ldr	r2, [pc, #88]	@ (800be28 <TIM_ResetCallback+0x94>)
 800bdd0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	4a15      	ldr	r2, [pc, #84]	@ (800be2c <TIM_ResetCallback+0x98>)
 800bdd8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	4a14      	ldr	r2, [pc, #80]	@ (800be30 <TIM_ResetCallback+0x9c>)
 800bde0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	4a13      	ldr	r2, [pc, #76]	@ (800be34 <TIM_ResetCallback+0xa0>)
 800bde8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	4a12      	ldr	r2, [pc, #72]	@ (800be38 <TIM_ResetCallback+0xa4>)
 800bdf0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	4a11      	ldr	r2, [pc, #68]	@ (800be3c <TIM_ResetCallback+0xa8>)
 800bdf8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	4a10      	ldr	r2, [pc, #64]	@ (800be40 <TIM_ResetCallback+0xac>)
 800be00:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 800be04:	bf00      	nop
 800be06:	370c      	adds	r7, #12
 800be08:	46bd      	mov	sp, r7
 800be0a:	bc80      	pop	{r7}
 800be0c:	4770      	bx	lr
 800be0e:	bf00      	nop
 800be10:	08007ca9 	.word	0x08007ca9
 800be14:	0800baeb 	.word	0x0800baeb
 800be18:	0800bb57 	.word	0x0800bb57
 800be1c:	0800bb69 	.word	0x0800bb69
 800be20:	0800bb0f 	.word	0x0800bb0f
 800be24:	0800bb21 	.word	0x0800bb21
 800be28:	0800bafd 	.word	0x0800bafd
 800be2c:	0800bb33 	.word	0x0800bb33
 800be30:	0800bb45 	.word	0x0800bb45
 800be34:	0800bb7b 	.word	0x0800bb7b
 800be38:	0800bf01 	.word	0x0800bf01
 800be3c:	0800bf13 	.word	0x0800bf13
 800be40:	0800bf25 	.word	0x0800bf25

0800be44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800be44:	b480      	push	{r7}
 800be46:	b085      	sub	sp, #20
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
 800be4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800be54:	2b01      	cmp	r3, #1
 800be56:	d101      	bne.n	800be5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800be58:	2302      	movs	r3, #2
 800be5a:	e046      	b.n	800beea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	2201      	movs	r2, #1
 800be60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2202      	movs	r2, #2
 800be68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	685b      	ldr	r3, [r3, #4]
 800be72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	689b      	ldr	r3, [r3, #8]
 800be7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	68fa      	ldr	r2, [r7, #12]
 800be8a:	4313      	orrs	r3, r2
 800be8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	68fa      	ldr	r2, [r7, #12]
 800be94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	4a16      	ldr	r2, [pc, #88]	@ (800bef4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800be9c:	4293      	cmp	r3, r2
 800be9e:	d00e      	beq.n	800bebe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bea8:	d009      	beq.n	800bebe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	4a12      	ldr	r2, [pc, #72]	@ (800bef8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800beb0:	4293      	cmp	r3, r2
 800beb2:	d004      	beq.n	800bebe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	4a10      	ldr	r2, [pc, #64]	@ (800befc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800beba:	4293      	cmp	r3, r2
 800bebc:	d10c      	bne.n	800bed8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bebe:	68bb      	ldr	r3, [r7, #8]
 800bec0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bec4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	685b      	ldr	r3, [r3, #4]
 800beca:	68ba      	ldr	r2, [r7, #8]
 800becc:	4313      	orrs	r3, r2
 800bece:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	68ba      	ldr	r2, [r7, #8]
 800bed6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2201      	movs	r2, #1
 800bedc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2200      	movs	r2, #0
 800bee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bee8:	2300      	movs	r3, #0
}
 800beea:	4618      	mov	r0, r3
 800beec:	3714      	adds	r7, #20
 800beee:	46bd      	mov	sp, r7
 800bef0:	bc80      	pop	{r7}
 800bef2:	4770      	bx	lr
 800bef4:	40012c00 	.word	0x40012c00
 800bef8:	40000400 	.word	0x40000400
 800befc:	40000800 	.word	0x40000800

0800bf00 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bf00:	b480      	push	{r7}
 800bf02:	b083      	sub	sp, #12
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bf08:	bf00      	nop
 800bf0a:	370c      	adds	r7, #12
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	bc80      	pop	{r7}
 800bf10:	4770      	bx	lr

0800bf12 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800bf12:	b480      	push	{r7}
 800bf14:	b083      	sub	sp, #12
 800bf16:	af00      	add	r7, sp, #0
 800bf18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800bf1a:	bf00      	nop
 800bf1c:	370c      	adds	r7, #12
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bc80      	pop	{r7}
 800bf22:	4770      	bx	lr

0800bf24 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bf24:	b480      	push	{r7}
 800bf26:	b083      	sub	sp, #12
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bf2c:	bf00      	nop
 800bf2e:	370c      	adds	r7, #12
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bc80      	pop	{r7}
 800bf34:	4770      	bx	lr
	...

0800bf38 <__NVIC_SetPriority>:
{
 800bf38:	b480      	push	{r7}
 800bf3a:	b083      	sub	sp, #12
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	4603      	mov	r3, r0
 800bf40:	6039      	str	r1, [r7, #0]
 800bf42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bf44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	db0a      	blt.n	800bf62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	b2da      	uxtb	r2, r3
 800bf50:	490c      	ldr	r1, [pc, #48]	@ (800bf84 <__NVIC_SetPriority+0x4c>)
 800bf52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bf56:	0112      	lsls	r2, r2, #4
 800bf58:	b2d2      	uxtb	r2, r2
 800bf5a:	440b      	add	r3, r1
 800bf5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800bf60:	e00a      	b.n	800bf78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	b2da      	uxtb	r2, r3
 800bf66:	4908      	ldr	r1, [pc, #32]	@ (800bf88 <__NVIC_SetPriority+0x50>)
 800bf68:	79fb      	ldrb	r3, [r7, #7]
 800bf6a:	f003 030f 	and.w	r3, r3, #15
 800bf6e:	3b04      	subs	r3, #4
 800bf70:	0112      	lsls	r2, r2, #4
 800bf72:	b2d2      	uxtb	r2, r2
 800bf74:	440b      	add	r3, r1
 800bf76:	761a      	strb	r2, [r3, #24]
}
 800bf78:	bf00      	nop
 800bf7a:	370c      	adds	r7, #12
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bc80      	pop	{r7}
 800bf80:	4770      	bx	lr
 800bf82:	bf00      	nop
 800bf84:	e000e100 	.word	0xe000e100
 800bf88:	e000ed00 	.word	0xe000ed00

0800bf8c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800bf90:	4b05      	ldr	r3, [pc, #20]	@ (800bfa8 <SysTick_Handler+0x1c>)
 800bf92:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800bf94:	f002 fcc8 	bl	800e928 <xTaskGetSchedulerState>
 800bf98:	4603      	mov	r3, r0
 800bf9a:	2b01      	cmp	r3, #1
 800bf9c:	d001      	beq.n	800bfa2 <SysTick_Handler+0x16>
    /* Call tick handler */
	  xPortSysTickHandler();
 800bf9e:	f000 fdeb 	bl	800cb78 <xPortSysTickHandler>
  }
}
 800bfa2:	bf00      	nop
 800bfa4:	bd80      	pop	{r7, pc}
 800bfa6:	bf00      	nop
 800bfa8:	e000e010 	.word	0xe000e010

0800bfac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800bfac:	b580      	push	{r7, lr}
 800bfae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800bfb0:	2100      	movs	r1, #0
 800bfb2:	f06f 0004 	mvn.w	r0, #4
 800bfb6:	f7ff ffbf 	bl	800bf38 <__NVIC_SetPriority>
#endif
}
 800bfba:	bf00      	nop
 800bfbc:	bd80      	pop	{r7, pc}
	...

0800bfc0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800bfc0:	b480      	push	{r7}
 800bfc2:	b083      	sub	sp, #12
 800bfc4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bfc6:	f3ef 8305 	mrs	r3, IPSR
 800bfca:	603b      	str	r3, [r7, #0]
  return(result);
 800bfcc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d003      	beq.n	800bfda <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800bfd2:	f06f 0305 	mvn.w	r3, #5
 800bfd6:	607b      	str	r3, [r7, #4]
 800bfd8:	e00c      	b.n	800bff4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800bfda:	4b09      	ldr	r3, [pc, #36]	@ (800c000 <osKernelInitialize+0x40>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d105      	bne.n	800bfee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800bfe2:	4b07      	ldr	r3, [pc, #28]	@ (800c000 <osKernelInitialize+0x40>)
 800bfe4:	2201      	movs	r2, #1
 800bfe6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bfe8:	2300      	movs	r3, #0
 800bfea:	607b      	str	r3, [r7, #4]
 800bfec:	e002      	b.n	800bff4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800bfee:	f04f 33ff 	mov.w	r3, #4294967295
 800bff2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bff4:	687b      	ldr	r3, [r7, #4]
}
 800bff6:	4618      	mov	r0, r3
 800bff8:	370c      	adds	r7, #12
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bc80      	pop	{r7}
 800bffe:	4770      	bx	lr
 800c000:	20000b38 	.word	0x20000b38

0800c004 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c004:	b580      	push	{r7, lr}
 800c006:	b082      	sub	sp, #8
 800c008:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c00a:	f3ef 8305 	mrs	r3, IPSR
 800c00e:	603b      	str	r3, [r7, #0]
  return(result);
 800c010:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c012:	2b00      	cmp	r3, #0
 800c014:	d003      	beq.n	800c01e <osKernelStart+0x1a>
    stat = osErrorISR;
 800c016:	f06f 0305 	mvn.w	r3, #5
 800c01a:	607b      	str	r3, [r7, #4]
 800c01c:	e010      	b.n	800c040 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c01e:	4b0b      	ldr	r3, [pc, #44]	@ (800c04c <osKernelStart+0x48>)
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	2b01      	cmp	r3, #1
 800c024:	d109      	bne.n	800c03a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c026:	f7ff ffc1 	bl	800bfac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c02a:	4b08      	ldr	r3, [pc, #32]	@ (800c04c <osKernelStart+0x48>)
 800c02c:	2202      	movs	r2, #2
 800c02e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c030:	f001 fe58 	bl	800dce4 <vTaskStartScheduler>
      stat = osOK;
 800c034:	2300      	movs	r3, #0
 800c036:	607b      	str	r3, [r7, #4]
 800c038:	e002      	b.n	800c040 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c03a:	f04f 33ff 	mov.w	r3, #4294967295
 800c03e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c040:	687b      	ldr	r3, [r7, #4]
}
 800c042:	4618      	mov	r0, r3
 800c044:	3708      	adds	r7, #8
 800c046:	46bd      	mov	sp, r7
 800c048:	bd80      	pop	{r7, pc}
 800c04a:	bf00      	nop
 800c04c:	20000b38 	.word	0x20000b38

0800c050 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c050:	b580      	push	{r7, lr}
 800c052:	b08e      	sub	sp, #56	@ 0x38
 800c054:	af04      	add	r7, sp, #16
 800c056:	60f8      	str	r0, [r7, #12]
 800c058:	60b9      	str	r1, [r7, #8]
 800c05a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c05c:	2300      	movs	r3, #0
 800c05e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c060:	f3ef 8305 	mrs	r3, IPSR
 800c064:	617b      	str	r3, [r7, #20]
  return(result);
 800c066:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d17e      	bne.n	800c16a <osThreadNew+0x11a>
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d07b      	beq.n	800c16a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c072:	2380      	movs	r3, #128	@ 0x80
 800c074:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c076:	2318      	movs	r3, #24
 800c078:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c07a:	2300      	movs	r3, #0
 800c07c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800c07e:	f04f 33ff 	mov.w	r3, #4294967295
 800c082:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d045      	beq.n	800c116 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d002      	beq.n	800c098 <osThreadNew+0x48>
        name = attr->name;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	699b      	ldr	r3, [r3, #24]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d002      	beq.n	800c0a6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	699b      	ldr	r3, [r3, #24]
 800c0a4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c0a6:	69fb      	ldr	r3, [r7, #28]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d008      	beq.n	800c0be <osThreadNew+0x6e>
 800c0ac:	69fb      	ldr	r3, [r7, #28]
 800c0ae:	2b38      	cmp	r3, #56	@ 0x38
 800c0b0:	d805      	bhi.n	800c0be <osThreadNew+0x6e>
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	685b      	ldr	r3, [r3, #4]
 800c0b6:	f003 0301 	and.w	r3, r3, #1
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d001      	beq.n	800c0c2 <osThreadNew+0x72>
        return (NULL);
 800c0be:	2300      	movs	r3, #0
 800c0c0:	e054      	b.n	800c16c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	695b      	ldr	r3, [r3, #20]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d003      	beq.n	800c0d2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	695b      	ldr	r3, [r3, #20]
 800c0ce:	089b      	lsrs	r3, r3, #2
 800c0d0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	689b      	ldr	r3, [r3, #8]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d00e      	beq.n	800c0f8 <osThreadNew+0xa8>
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	68db      	ldr	r3, [r3, #12]
 800c0de:	2bb3      	cmp	r3, #179	@ 0xb3
 800c0e0:	d90a      	bls.n	800c0f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d006      	beq.n	800c0f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	695b      	ldr	r3, [r3, #20]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d002      	beq.n	800c0f8 <osThreadNew+0xa8>
        mem = 1;
 800c0f2:	2301      	movs	r3, #1
 800c0f4:	61bb      	str	r3, [r7, #24]
 800c0f6:	e010      	b.n	800c11a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	689b      	ldr	r3, [r3, #8]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d10c      	bne.n	800c11a <osThreadNew+0xca>
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	68db      	ldr	r3, [r3, #12]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d108      	bne.n	800c11a <osThreadNew+0xca>
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	691b      	ldr	r3, [r3, #16]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d104      	bne.n	800c11a <osThreadNew+0xca>
          mem = 0;
 800c110:	2300      	movs	r3, #0
 800c112:	61bb      	str	r3, [r7, #24]
 800c114:	e001      	b.n	800c11a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c116:	2300      	movs	r3, #0
 800c118:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c11a:	69bb      	ldr	r3, [r7, #24]
 800c11c:	2b01      	cmp	r3, #1
 800c11e:	d110      	bne.n	800c142 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c124:	687a      	ldr	r2, [r7, #4]
 800c126:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c128:	9202      	str	r2, [sp, #8]
 800c12a:	9301      	str	r3, [sp, #4]
 800c12c:	69fb      	ldr	r3, [r7, #28]
 800c12e:	9300      	str	r3, [sp, #0]
 800c130:	68bb      	ldr	r3, [r7, #8]
 800c132:	6a3a      	ldr	r2, [r7, #32]
 800c134:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c136:	68f8      	ldr	r0, [r7, #12]
 800c138:	f001 fa9a 	bl	800d670 <xTaskCreateStatic>
 800c13c:	4603      	mov	r3, r0
 800c13e:	613b      	str	r3, [r7, #16]
 800c140:	e013      	b.n	800c16a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c142:	69bb      	ldr	r3, [r7, #24]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d110      	bne.n	800c16a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c148:	6a3b      	ldr	r3, [r7, #32]
 800c14a:	b29a      	uxth	r2, r3
 800c14c:	f107 0310 	add.w	r3, r7, #16
 800c150:	9301      	str	r3, [sp, #4]
 800c152:	69fb      	ldr	r3, [r7, #28]
 800c154:	9300      	str	r3, [sp, #0]
 800c156:	68bb      	ldr	r3, [r7, #8]
 800c158:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c15a:	68f8      	ldr	r0, [r7, #12]
 800c15c:	f001 fae8 	bl	800d730 <xTaskCreate>
 800c160:	4603      	mov	r3, r0
 800c162:	2b01      	cmp	r3, #1
 800c164:	d001      	beq.n	800c16a <osThreadNew+0x11a>
            hTask = NULL;
 800c166:	2300      	movs	r3, #0
 800c168:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c16a:	693b      	ldr	r3, [r7, #16]
}
 800c16c:	4618      	mov	r0, r3
 800c16e:	3728      	adds	r7, #40	@ 0x28
 800c170:	46bd      	mov	sp, r7
 800c172:	bd80      	pop	{r7, pc}

0800c174 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800c174:	b580      	push	{r7, lr}
 800c176:	b084      	sub	sp, #16
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800c17c:	6878      	ldr	r0, [r7, #4]
 800c17e:	f003 f8b1 	bl	800f2e4 <pvTimerGetTimerID>
 800c182:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d005      	beq.n	800c196 <TimerCallback+0x22>
    callb->func (callb->arg);
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	68fa      	ldr	r2, [r7, #12]
 800c190:	6852      	ldr	r2, [r2, #4]
 800c192:	4610      	mov	r0, r2
 800c194:	4798      	blx	r3
  }
}
 800c196:	bf00      	nop
 800c198:	3710      	adds	r7, #16
 800c19a:	46bd      	mov	sp, r7
 800c19c:	bd80      	pop	{r7, pc}
	...

0800c1a0 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b08c      	sub	sp, #48	@ 0x30
 800c1a4:	af02      	add	r7, sp, #8
 800c1a6:	60f8      	str	r0, [r7, #12]
 800c1a8:	607a      	str	r2, [r7, #4]
 800c1aa:	603b      	str	r3, [r7, #0]
 800c1ac:	460b      	mov	r3, r1
 800c1ae:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c1b4:	f3ef 8305 	mrs	r3, IPSR
 800c1b8:	613b      	str	r3, [r7, #16]
  return(result);
 800c1ba:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d163      	bne.n	800c288 <osTimerNew+0xe8>
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d060      	beq.n	800c288 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800c1c6:	2008      	movs	r0, #8
 800c1c8:	f000 f8c4 	bl	800c354 <pvPortMalloc>
 800c1cc:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d059      	beq.n	800c288 <osTimerNew+0xe8>
      callb->func = func;
 800c1d4:	697b      	ldr	r3, [r7, #20]
 800c1d6:	68fa      	ldr	r2, [r7, #12]
 800c1d8:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800c1da:	697b      	ldr	r3, [r7, #20]
 800c1dc:	687a      	ldr	r2, [r7, #4]
 800c1de:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800c1e0:	7afb      	ldrb	r3, [r7, #11]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d102      	bne.n	800c1ec <osTimerNew+0x4c>
        reload = pdFALSE;
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	61fb      	str	r3, [r7, #28]
 800c1ea:	e001      	b.n	800c1f0 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800c1ec:	2301      	movs	r3, #1
 800c1ee:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800c1f0:	f04f 33ff 	mov.w	r3, #4294967295
 800c1f4:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d01c      	beq.n	800c23a <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d002      	beq.n	800c20e <osTimerNew+0x6e>
          name = attr->name;
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	689b      	ldr	r3, [r3, #8]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d006      	beq.n	800c224 <osTimerNew+0x84>
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	68db      	ldr	r3, [r3, #12]
 800c21a:	2b2b      	cmp	r3, #43	@ 0x2b
 800c21c:	d902      	bls.n	800c224 <osTimerNew+0x84>
          mem = 1;
 800c21e:	2301      	movs	r3, #1
 800c220:	61bb      	str	r3, [r7, #24]
 800c222:	e00c      	b.n	800c23e <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	689b      	ldr	r3, [r3, #8]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d108      	bne.n	800c23e <osTimerNew+0x9e>
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	68db      	ldr	r3, [r3, #12]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d104      	bne.n	800c23e <osTimerNew+0x9e>
            mem = 0;
 800c234:	2300      	movs	r3, #0
 800c236:	61bb      	str	r3, [r7, #24]
 800c238:	e001      	b.n	800c23e <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800c23a:	2300      	movs	r3, #0
 800c23c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800c23e:	69bb      	ldr	r3, [r7, #24]
 800c240:	2b01      	cmp	r3, #1
 800c242:	d10c      	bne.n	800c25e <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	689b      	ldr	r3, [r3, #8]
 800c248:	9301      	str	r3, [sp, #4]
 800c24a:	4b12      	ldr	r3, [pc, #72]	@ (800c294 <osTimerNew+0xf4>)
 800c24c:	9300      	str	r3, [sp, #0]
 800c24e:	697b      	ldr	r3, [r7, #20]
 800c250:	69fa      	ldr	r2, [r7, #28]
 800c252:	2101      	movs	r1, #1
 800c254:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c256:	f002 fcba 	bl	800ebce <xTimerCreateStatic>
 800c25a:	6238      	str	r0, [r7, #32]
 800c25c:	e00b      	b.n	800c276 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800c25e:	69bb      	ldr	r3, [r7, #24]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d108      	bne.n	800c276 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800c264:	4b0b      	ldr	r3, [pc, #44]	@ (800c294 <osTimerNew+0xf4>)
 800c266:	9300      	str	r3, [sp, #0]
 800c268:	697b      	ldr	r3, [r7, #20]
 800c26a:	69fa      	ldr	r2, [r7, #28]
 800c26c:	2101      	movs	r1, #1
 800c26e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c270:	f002 fc8c 	bl	800eb8c <xTimerCreate>
 800c274:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800c276:	6a3b      	ldr	r3, [r7, #32]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d105      	bne.n	800c288 <osTimerNew+0xe8>
 800c27c:	697b      	ldr	r3, [r7, #20]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d002      	beq.n	800c288 <osTimerNew+0xe8>
        vPortFree (callb);
 800c282:	6978      	ldr	r0, [r7, #20]
 800c284:	f000 f93a 	bl	800c4fc <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800c288:	6a3b      	ldr	r3, [r7, #32]
}
 800c28a:	4618      	mov	r0, r3
 800c28c:	3728      	adds	r7, #40	@ 0x28
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd80      	pop	{r7, pc}
 800c292:	bf00      	nop
 800c294:	0800c175 	.word	0x0800c175

0800c298 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800c298:	b580      	push	{r7, lr}
 800c29a:	b088      	sub	sp, #32
 800c29c:	af02      	add	r7, sp, #8
 800c29e:	6078      	str	r0, [r7, #4]
 800c2a0:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c2a6:	f3ef 8305 	mrs	r3, IPSR
 800c2aa:	60fb      	str	r3, [r7, #12]
  return(result);
 800c2ac:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d003      	beq.n	800c2ba <osTimerStart+0x22>
    stat = osErrorISR;
 800c2b2:	f06f 0305 	mvn.w	r3, #5
 800c2b6:	617b      	str	r3, [r7, #20]
 800c2b8:	e017      	b.n	800c2ea <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800c2ba:	693b      	ldr	r3, [r7, #16]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d103      	bne.n	800c2c8 <osTimerStart+0x30>
    stat = osErrorParameter;
 800c2c0:	f06f 0303 	mvn.w	r3, #3
 800c2c4:	617b      	str	r3, [r7, #20]
 800c2c6:	e010      	b.n	800c2ea <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	9300      	str	r3, [sp, #0]
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	683a      	ldr	r2, [r7, #0]
 800c2d0:	2104      	movs	r1, #4
 800c2d2:	6938      	ldr	r0, [r7, #16]
 800c2d4:	f002 fcf8 	bl	800ecc8 <xTimerGenericCommand>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	2b01      	cmp	r3, #1
 800c2dc:	d102      	bne.n	800c2e4 <osTimerStart+0x4c>
      stat = osOK;
 800c2de:	2300      	movs	r3, #0
 800c2e0:	617b      	str	r3, [r7, #20]
 800c2e2:	e002      	b.n	800c2ea <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800c2e4:	f06f 0302 	mvn.w	r3, #2
 800c2e8:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800c2ea:	697b      	ldr	r3, [r7, #20]
}
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	3718      	adds	r7, #24
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	bd80      	pop	{r7, pc}

0800c2f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c2f4:	b480      	push	{r7}
 800c2f6:	b085      	sub	sp, #20
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	60f8      	str	r0, [r7, #12]
 800c2fc:	60b9      	str	r1, [r7, #8]
 800c2fe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	4a06      	ldr	r2, [pc, #24]	@ (800c31c <vApplicationGetIdleTaskMemory+0x28>)
 800c304:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c306:	68bb      	ldr	r3, [r7, #8]
 800c308:	4a05      	ldr	r2, [pc, #20]	@ (800c320 <vApplicationGetIdleTaskMemory+0x2c>)
 800c30a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2280      	movs	r2, #128	@ 0x80
 800c310:	601a      	str	r2, [r3, #0]
}
 800c312:	bf00      	nop
 800c314:	3714      	adds	r7, #20
 800c316:	46bd      	mov	sp, r7
 800c318:	bc80      	pop	{r7}
 800c31a:	4770      	bx	lr
 800c31c:	20000b3c 	.word	0x20000b3c
 800c320:	20000bf0 	.word	0x20000bf0

0800c324 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c324:	b480      	push	{r7}
 800c326:	b085      	sub	sp, #20
 800c328:	af00      	add	r7, sp, #0
 800c32a:	60f8      	str	r0, [r7, #12]
 800c32c:	60b9      	str	r1, [r7, #8]
 800c32e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	4a06      	ldr	r2, [pc, #24]	@ (800c34c <vApplicationGetTimerTaskMemory+0x28>)
 800c334:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	4a05      	ldr	r2, [pc, #20]	@ (800c350 <vApplicationGetTimerTaskMemory+0x2c>)
 800c33a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2280      	movs	r2, #128	@ 0x80
 800c340:	601a      	str	r2, [r3, #0]
}
 800c342:	bf00      	nop
 800c344:	3714      	adds	r7, #20
 800c346:	46bd      	mov	sp, r7
 800c348:	bc80      	pop	{r7}
 800c34a:	4770      	bx	lr
 800c34c:	20000df0 	.word	0x20000df0
 800c350:	20000ea4 	.word	0x20000ea4

0800c354 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b08a      	sub	sp, #40	@ 0x28
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c35c:	2300      	movs	r3, #0
 800c35e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c360:	f001 fd32 	bl	800ddc8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c364:	4b5f      	ldr	r3, [pc, #380]	@ (800c4e4 <pvPortMalloc+0x190>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d101      	bne.n	800c370 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c36c:	f000 f92a 	bl	800c5c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c370:	4b5d      	ldr	r3, [pc, #372]	@ (800c4e8 <pvPortMalloc+0x194>)
 800c372:	681a      	ldr	r2, [r3, #0]
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	4013      	ands	r3, r2
 800c378:	2b00      	cmp	r3, #0
 800c37a:	f040 8095 	bne.w	800c4a8 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d01e      	beq.n	800c3c2 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c384:	2208      	movs	r2, #8
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	4413      	add	r3, r2
 800c38a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f003 0307 	and.w	r3, r3, #7
 800c392:	2b00      	cmp	r3, #0
 800c394:	d015      	beq.n	800c3c2 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f023 0307 	bic.w	r3, r3, #7
 800c39c:	3308      	adds	r3, #8
 800c39e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f003 0307 	and.w	r3, r3, #7
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d00b      	beq.n	800c3c2 <pvPortMalloc+0x6e>
	__asm volatile
 800c3aa:	f04f 0310 	mov.w	r3, #16
 800c3ae:	f383 8811 	msr	BASEPRI, r3
 800c3b2:	f3bf 8f6f 	isb	sy
 800c3b6:	f3bf 8f4f 	dsb	sy
 800c3ba:	617b      	str	r3, [r7, #20]
}
 800c3bc:	bf00      	nop
 800c3be:	bf00      	nop
 800c3c0:	e7fd      	b.n	800c3be <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d06f      	beq.n	800c4a8 <pvPortMalloc+0x154>
 800c3c8:	4b48      	ldr	r3, [pc, #288]	@ (800c4ec <pvPortMalloc+0x198>)
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	687a      	ldr	r2, [r7, #4]
 800c3ce:	429a      	cmp	r2, r3
 800c3d0:	d86a      	bhi.n	800c4a8 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c3d2:	4b47      	ldr	r3, [pc, #284]	@ (800c4f0 <pvPortMalloc+0x19c>)
 800c3d4:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c3d6:	4b46      	ldr	r3, [pc, #280]	@ (800c4f0 <pvPortMalloc+0x19c>)
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c3dc:	e004      	b.n	800c3e8 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c3de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3e0:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c3e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c3e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3ea:	685b      	ldr	r3, [r3, #4]
 800c3ec:	687a      	ldr	r2, [r7, #4]
 800c3ee:	429a      	cmp	r2, r3
 800c3f0:	d903      	bls.n	800c3fa <pvPortMalloc+0xa6>
 800c3f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d1f1      	bne.n	800c3de <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c3fa:	4b3a      	ldr	r3, [pc, #232]	@ (800c4e4 <pvPortMalloc+0x190>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c400:	429a      	cmp	r2, r3
 800c402:	d051      	beq.n	800c4a8 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c404:	6a3b      	ldr	r3, [r7, #32]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	2208      	movs	r2, #8
 800c40a:	4413      	add	r3, r2
 800c40c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c40e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c410:	681a      	ldr	r2, [r3, #0]
 800c412:	6a3b      	ldr	r3, [r7, #32]
 800c414:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c418:	685a      	ldr	r2, [r3, #4]
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	1ad2      	subs	r2, r2, r3
 800c41e:	2308      	movs	r3, #8
 800c420:	005b      	lsls	r3, r3, #1
 800c422:	429a      	cmp	r2, r3
 800c424:	d920      	bls.n	800c468 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c426:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	4413      	add	r3, r2
 800c42c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c42e:	69bb      	ldr	r3, [r7, #24]
 800c430:	f003 0307 	and.w	r3, r3, #7
 800c434:	2b00      	cmp	r3, #0
 800c436:	d00b      	beq.n	800c450 <pvPortMalloc+0xfc>
	__asm volatile
 800c438:	f04f 0310 	mov.w	r3, #16
 800c43c:	f383 8811 	msr	BASEPRI, r3
 800c440:	f3bf 8f6f 	isb	sy
 800c444:	f3bf 8f4f 	dsb	sy
 800c448:	613b      	str	r3, [r7, #16]
}
 800c44a:	bf00      	nop
 800c44c:	bf00      	nop
 800c44e:	e7fd      	b.n	800c44c <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c452:	685a      	ldr	r2, [r3, #4]
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	1ad2      	subs	r2, r2, r3
 800c458:	69bb      	ldr	r3, [r7, #24]
 800c45a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c45c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c45e:	687a      	ldr	r2, [r7, #4]
 800c460:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c462:	69b8      	ldr	r0, [r7, #24]
 800c464:	f000 f910 	bl	800c688 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c468:	4b20      	ldr	r3, [pc, #128]	@ (800c4ec <pvPortMalloc+0x198>)
 800c46a:	681a      	ldr	r2, [r3, #0]
 800c46c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c46e:	685b      	ldr	r3, [r3, #4]
 800c470:	1ad3      	subs	r3, r2, r3
 800c472:	4a1e      	ldr	r2, [pc, #120]	@ (800c4ec <pvPortMalloc+0x198>)
 800c474:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c476:	4b1d      	ldr	r3, [pc, #116]	@ (800c4ec <pvPortMalloc+0x198>)
 800c478:	681a      	ldr	r2, [r3, #0]
 800c47a:	4b1e      	ldr	r3, [pc, #120]	@ (800c4f4 <pvPortMalloc+0x1a0>)
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	429a      	cmp	r2, r3
 800c480:	d203      	bcs.n	800c48a <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c482:	4b1a      	ldr	r3, [pc, #104]	@ (800c4ec <pvPortMalloc+0x198>)
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	4a1b      	ldr	r2, [pc, #108]	@ (800c4f4 <pvPortMalloc+0x1a0>)
 800c488:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c48a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c48c:	685a      	ldr	r2, [r3, #4]
 800c48e:	4b16      	ldr	r3, [pc, #88]	@ (800c4e8 <pvPortMalloc+0x194>)
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	431a      	orrs	r2, r3
 800c494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c496:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c49a:	2200      	movs	r2, #0
 800c49c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c49e:	4b16      	ldr	r3, [pc, #88]	@ (800c4f8 <pvPortMalloc+0x1a4>)
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	3301      	adds	r3, #1
 800c4a4:	4a14      	ldr	r2, [pc, #80]	@ (800c4f8 <pvPortMalloc+0x1a4>)
 800c4a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c4a8:	f001 fc9c 	bl	800dde4 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800c4ac:	69fb      	ldr	r3, [r7, #28]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d101      	bne.n	800c4b6 <pvPortMalloc+0x162>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800c4b2:	f7fb f96b 	bl	800778c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c4b6:	69fb      	ldr	r3, [r7, #28]
 800c4b8:	f003 0307 	and.w	r3, r3, #7
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d00b      	beq.n	800c4d8 <pvPortMalloc+0x184>
	__asm volatile
 800c4c0:	f04f 0310 	mov.w	r3, #16
 800c4c4:	f383 8811 	msr	BASEPRI, r3
 800c4c8:	f3bf 8f6f 	isb	sy
 800c4cc:	f3bf 8f4f 	dsb	sy
 800c4d0:	60fb      	str	r3, [r7, #12]
}
 800c4d2:	bf00      	nop
 800c4d4:	bf00      	nop
 800c4d6:	e7fd      	b.n	800c4d4 <pvPortMalloc+0x180>
	return pvReturn;
 800c4d8:	69fb      	ldr	r3, [r7, #28]
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	3728      	adds	r7, #40	@ 0x28
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}
 800c4e2:	bf00      	nop
 800c4e4:	20003a50 	.word	0x20003a50
 800c4e8:	20003a64 	.word	0x20003a64
 800c4ec:	20003a54 	.word	0x20003a54
 800c4f0:	20003a48 	.word	0x20003a48
 800c4f4:	20003a58 	.word	0x20003a58
 800c4f8:	20003a5c 	.word	0x20003a5c

0800c4fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b086      	sub	sp, #24
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d04f      	beq.n	800c5ae <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c50e:	2308      	movs	r3, #8
 800c510:	425b      	negs	r3, r3
 800c512:	697a      	ldr	r2, [r7, #20]
 800c514:	4413      	add	r3, r2
 800c516:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c518:	697b      	ldr	r3, [r7, #20]
 800c51a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c51c:	693b      	ldr	r3, [r7, #16]
 800c51e:	685a      	ldr	r2, [r3, #4]
 800c520:	4b25      	ldr	r3, [pc, #148]	@ (800c5b8 <vPortFree+0xbc>)
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	4013      	ands	r3, r2
 800c526:	2b00      	cmp	r3, #0
 800c528:	d10b      	bne.n	800c542 <vPortFree+0x46>
	__asm volatile
 800c52a:	f04f 0310 	mov.w	r3, #16
 800c52e:	f383 8811 	msr	BASEPRI, r3
 800c532:	f3bf 8f6f 	isb	sy
 800c536:	f3bf 8f4f 	dsb	sy
 800c53a:	60fb      	str	r3, [r7, #12]
}
 800c53c:	bf00      	nop
 800c53e:	bf00      	nop
 800c540:	e7fd      	b.n	800c53e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c542:	693b      	ldr	r3, [r7, #16]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d00b      	beq.n	800c562 <vPortFree+0x66>
	__asm volatile
 800c54a:	f04f 0310 	mov.w	r3, #16
 800c54e:	f383 8811 	msr	BASEPRI, r3
 800c552:	f3bf 8f6f 	isb	sy
 800c556:	f3bf 8f4f 	dsb	sy
 800c55a:	60bb      	str	r3, [r7, #8]
}
 800c55c:	bf00      	nop
 800c55e:	bf00      	nop
 800c560:	e7fd      	b.n	800c55e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c562:	693b      	ldr	r3, [r7, #16]
 800c564:	685a      	ldr	r2, [r3, #4]
 800c566:	4b14      	ldr	r3, [pc, #80]	@ (800c5b8 <vPortFree+0xbc>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	4013      	ands	r3, r2
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d01e      	beq.n	800c5ae <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c570:	693b      	ldr	r3, [r7, #16]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d11a      	bne.n	800c5ae <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c578:	693b      	ldr	r3, [r7, #16]
 800c57a:	685a      	ldr	r2, [r3, #4]
 800c57c:	4b0e      	ldr	r3, [pc, #56]	@ (800c5b8 <vPortFree+0xbc>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	43db      	mvns	r3, r3
 800c582:	401a      	ands	r2, r3
 800c584:	693b      	ldr	r3, [r7, #16]
 800c586:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c588:	f001 fc1e 	bl	800ddc8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c58c:	693b      	ldr	r3, [r7, #16]
 800c58e:	685a      	ldr	r2, [r3, #4]
 800c590:	4b0a      	ldr	r3, [pc, #40]	@ (800c5bc <vPortFree+0xc0>)
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	4413      	add	r3, r2
 800c596:	4a09      	ldr	r2, [pc, #36]	@ (800c5bc <vPortFree+0xc0>)
 800c598:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c59a:	6938      	ldr	r0, [r7, #16]
 800c59c:	f000 f874 	bl	800c688 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c5a0:	4b07      	ldr	r3, [pc, #28]	@ (800c5c0 <vPortFree+0xc4>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	3301      	adds	r3, #1
 800c5a6:	4a06      	ldr	r2, [pc, #24]	@ (800c5c0 <vPortFree+0xc4>)
 800c5a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c5aa:	f001 fc1b 	bl	800dde4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c5ae:	bf00      	nop
 800c5b0:	3718      	adds	r7, #24
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	bd80      	pop	{r7, pc}
 800c5b6:	bf00      	nop
 800c5b8:	20003a64 	.word	0x20003a64
 800c5bc:	20003a54 	.word	0x20003a54
 800c5c0:	20003a60 	.word	0x20003a60

0800c5c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c5c4:	b480      	push	{r7}
 800c5c6:	b085      	sub	sp, #20
 800c5c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c5ca:	f642 13a4 	movw	r3, #10660	@ 0x29a4
 800c5ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c5d0:	4b27      	ldr	r3, [pc, #156]	@ (800c670 <prvHeapInit+0xac>)
 800c5d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	f003 0307 	and.w	r3, r3, #7
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d00c      	beq.n	800c5f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	3307      	adds	r3, #7
 800c5e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	f023 0307 	bic.w	r3, r3, #7
 800c5ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c5ec:	68ba      	ldr	r2, [r7, #8]
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	1ad3      	subs	r3, r2, r3
 800c5f2:	4a1f      	ldr	r2, [pc, #124]	@ (800c670 <prvHeapInit+0xac>)
 800c5f4:	4413      	add	r3, r2
 800c5f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c5fc:	4a1d      	ldr	r2, [pc, #116]	@ (800c674 <prvHeapInit+0xb0>)
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c602:	4b1c      	ldr	r3, [pc, #112]	@ (800c674 <prvHeapInit+0xb0>)
 800c604:	2200      	movs	r2, #0
 800c606:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	68ba      	ldr	r2, [r7, #8]
 800c60c:	4413      	add	r3, r2
 800c60e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c610:	2208      	movs	r2, #8
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	1a9b      	subs	r3, r3, r2
 800c616:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	f023 0307 	bic.w	r3, r3, #7
 800c61e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	4a15      	ldr	r2, [pc, #84]	@ (800c678 <prvHeapInit+0xb4>)
 800c624:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c626:	4b14      	ldr	r3, [pc, #80]	@ (800c678 <prvHeapInit+0xb4>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	2200      	movs	r2, #0
 800c62c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c62e:	4b12      	ldr	r3, [pc, #72]	@ (800c678 <prvHeapInit+0xb4>)
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	2200      	movs	r2, #0
 800c634:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c63a:	683b      	ldr	r3, [r7, #0]
 800c63c:	68fa      	ldr	r2, [r7, #12]
 800c63e:	1ad2      	subs	r2, r2, r3
 800c640:	683b      	ldr	r3, [r7, #0]
 800c642:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c644:	4b0c      	ldr	r3, [pc, #48]	@ (800c678 <prvHeapInit+0xb4>)
 800c646:	681a      	ldr	r2, [r3, #0]
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	685b      	ldr	r3, [r3, #4]
 800c650:	4a0a      	ldr	r2, [pc, #40]	@ (800c67c <prvHeapInit+0xb8>)
 800c652:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	685b      	ldr	r3, [r3, #4]
 800c658:	4a09      	ldr	r2, [pc, #36]	@ (800c680 <prvHeapInit+0xbc>)
 800c65a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c65c:	4b09      	ldr	r3, [pc, #36]	@ (800c684 <prvHeapInit+0xc0>)
 800c65e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c662:	601a      	str	r2, [r3, #0]
}
 800c664:	bf00      	nop
 800c666:	3714      	adds	r7, #20
 800c668:	46bd      	mov	sp, r7
 800c66a:	bc80      	pop	{r7}
 800c66c:	4770      	bx	lr
 800c66e:	bf00      	nop
 800c670:	200010a4 	.word	0x200010a4
 800c674:	20003a48 	.word	0x20003a48
 800c678:	20003a50 	.word	0x20003a50
 800c67c:	20003a58 	.word	0x20003a58
 800c680:	20003a54 	.word	0x20003a54
 800c684:	20003a64 	.word	0x20003a64

0800c688 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c688:	b480      	push	{r7}
 800c68a:	b085      	sub	sp, #20
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c690:	4b27      	ldr	r3, [pc, #156]	@ (800c730 <prvInsertBlockIntoFreeList+0xa8>)
 800c692:	60fb      	str	r3, [r7, #12]
 800c694:	e002      	b.n	800c69c <prvInsertBlockIntoFreeList+0x14>
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	60fb      	str	r3, [r7, #12]
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	687a      	ldr	r2, [r7, #4]
 800c6a2:	429a      	cmp	r2, r3
 800c6a4:	d8f7      	bhi.n	800c696 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	685b      	ldr	r3, [r3, #4]
 800c6ae:	68ba      	ldr	r2, [r7, #8]
 800c6b0:	4413      	add	r3, r2
 800c6b2:	687a      	ldr	r2, [r7, #4]
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	d108      	bne.n	800c6ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	685a      	ldr	r2, [r3, #4]
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	685b      	ldr	r3, [r3, #4]
 800c6c0:	441a      	add	r2, r3
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	685b      	ldr	r3, [r3, #4]
 800c6d2:	68ba      	ldr	r2, [r7, #8]
 800c6d4:	441a      	add	r2, r3
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	429a      	cmp	r2, r3
 800c6dc:	d118      	bne.n	800c710 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	681a      	ldr	r2, [r3, #0]
 800c6e2:	4b14      	ldr	r3, [pc, #80]	@ (800c734 <prvInsertBlockIntoFreeList+0xac>)
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	429a      	cmp	r2, r3
 800c6e8:	d00d      	beq.n	800c706 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	685a      	ldr	r2, [r3, #4]
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	685b      	ldr	r3, [r3, #4]
 800c6f4:	441a      	add	r2, r3
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	681a      	ldr	r2, [r3, #0]
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	601a      	str	r2, [r3, #0]
 800c704:	e008      	b.n	800c718 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c706:	4b0b      	ldr	r3, [pc, #44]	@ (800c734 <prvInsertBlockIntoFreeList+0xac>)
 800c708:	681a      	ldr	r2, [r3, #0]
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	601a      	str	r2, [r3, #0]
 800c70e:	e003      	b.n	800c718 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	681a      	ldr	r2, [r3, #0]
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c718:	68fa      	ldr	r2, [r7, #12]
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	429a      	cmp	r2, r3
 800c71e:	d002      	beq.n	800c726 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	687a      	ldr	r2, [r7, #4]
 800c724:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c726:	bf00      	nop
 800c728:	3714      	adds	r7, #20
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bc80      	pop	{r7}
 800c72e:	4770      	bx	lr
 800c730:	20003a48 	.word	0x20003a48
 800c734:	20003a50 	.word	0x20003a50

0800c738 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c738:	b480      	push	{r7}
 800c73a:	b083      	sub	sp, #12
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f103 0208 	add.w	r2, r3, #8
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	f04f 32ff 	mov.w	r2, #4294967295
 800c750:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	f103 0208 	add.w	r2, r3, #8
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	f103 0208 	add.w	r2, r3, #8
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	2200      	movs	r2, #0
 800c76a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c76c:	bf00      	nop
 800c76e:	370c      	adds	r7, #12
 800c770:	46bd      	mov	sp, r7
 800c772:	bc80      	pop	{r7}
 800c774:	4770      	bx	lr

0800c776 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c776:	b480      	push	{r7}
 800c778:	b083      	sub	sp, #12
 800c77a:	af00      	add	r7, sp, #0
 800c77c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	2200      	movs	r2, #0
 800c782:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c784:	bf00      	nop
 800c786:	370c      	adds	r7, #12
 800c788:	46bd      	mov	sp, r7
 800c78a:	bc80      	pop	{r7}
 800c78c:	4770      	bx	lr

0800c78e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c78e:	b480      	push	{r7}
 800c790:	b085      	sub	sp, #20
 800c792:	af00      	add	r7, sp, #0
 800c794:	6078      	str	r0, [r7, #4]
 800c796:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	685b      	ldr	r3, [r3, #4]
 800c79c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	68fa      	ldr	r2, [r7, #12]
 800c7a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	689a      	ldr	r2, [r3, #8]
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	689b      	ldr	r3, [r3, #8]
 800c7b0:	683a      	ldr	r2, [r7, #0]
 800c7b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	683a      	ldr	r2, [r7, #0]
 800c7b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	687a      	ldr	r2, [r7, #4]
 800c7be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	1c5a      	adds	r2, r3, #1
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	601a      	str	r2, [r3, #0]
}
 800c7ca:	bf00      	nop
 800c7cc:	3714      	adds	r7, #20
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bc80      	pop	{r7}
 800c7d2:	4770      	bx	lr

0800c7d4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c7d4:	b480      	push	{r7}
 800c7d6:	b085      	sub	sp, #20
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
 800c7dc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c7e4:	68bb      	ldr	r3, [r7, #8]
 800c7e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7ea:	d103      	bne.n	800c7f4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	691b      	ldr	r3, [r3, #16]
 800c7f0:	60fb      	str	r3, [r7, #12]
 800c7f2:	e00c      	b.n	800c80e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	3308      	adds	r3, #8
 800c7f8:	60fb      	str	r3, [r7, #12]
 800c7fa:	e002      	b.n	800c802 <vListInsert+0x2e>
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	685b      	ldr	r3, [r3, #4]
 800c800:	60fb      	str	r3, [r7, #12]
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	685b      	ldr	r3, [r3, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	68ba      	ldr	r2, [r7, #8]
 800c80a:	429a      	cmp	r2, r3
 800c80c:	d2f6      	bcs.n	800c7fc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	685a      	ldr	r2, [r3, #4]
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	685b      	ldr	r3, [r3, #4]
 800c81a:	683a      	ldr	r2, [r7, #0]
 800c81c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	68fa      	ldr	r2, [r7, #12]
 800c822:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	683a      	ldr	r2, [r7, #0]
 800c828:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	687a      	ldr	r2, [r7, #4]
 800c82e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	1c5a      	adds	r2, r3, #1
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	601a      	str	r2, [r3, #0]
}
 800c83a:	bf00      	nop
 800c83c:	3714      	adds	r7, #20
 800c83e:	46bd      	mov	sp, r7
 800c840:	bc80      	pop	{r7}
 800c842:	4770      	bx	lr

0800c844 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c844:	b480      	push	{r7}
 800c846:	b085      	sub	sp, #20
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	691b      	ldr	r3, [r3, #16]
 800c850:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	685b      	ldr	r3, [r3, #4]
 800c856:	687a      	ldr	r2, [r7, #4]
 800c858:	6892      	ldr	r2, [r2, #8]
 800c85a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	689b      	ldr	r3, [r3, #8]
 800c860:	687a      	ldr	r2, [r7, #4]
 800c862:	6852      	ldr	r2, [r2, #4]
 800c864:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	685b      	ldr	r3, [r3, #4]
 800c86a:	687a      	ldr	r2, [r7, #4]
 800c86c:	429a      	cmp	r2, r3
 800c86e:	d103      	bne.n	800c878 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	689a      	ldr	r2, [r3, #8]
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2200      	movs	r2, #0
 800c87c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	1e5a      	subs	r2, r3, #1
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	681b      	ldr	r3, [r3, #0]
}
 800c88c:	4618      	mov	r0, r3
 800c88e:	3714      	adds	r7, #20
 800c890:	46bd      	mov	sp, r7
 800c892:	bc80      	pop	{r7}
 800c894:	4770      	bx	lr
	...

0800c898 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c898:	b480      	push	{r7}
 800c89a:	b085      	sub	sp, #20
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	60f8      	str	r0, [r7, #12]
 800c8a0:	60b9      	str	r1, [r7, #8]
 800c8a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	3b04      	subs	r3, #4
 800c8a8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c8b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	3b04      	subs	r3, #4
 800c8b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c8b8:	68bb      	ldr	r3, [r7, #8]
 800c8ba:	f023 0201 	bic.w	r2, r3, #1
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	3b04      	subs	r3, #4
 800c8c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c8c8:	4a08      	ldr	r2, [pc, #32]	@ (800c8ec <pxPortInitialiseStack+0x54>)
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	3b14      	subs	r3, #20
 800c8d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c8d4:	687a      	ldr	r2, [r7, #4]
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	3b20      	subs	r3, #32
 800c8de:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c8e0:	68fb      	ldr	r3, [r7, #12]
}
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	3714      	adds	r7, #20
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	bc80      	pop	{r7}
 800c8ea:	4770      	bx	lr
 800c8ec:	0800c8f1 	.word	0x0800c8f1

0800c8f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c8f0:	b480      	push	{r7}
 800c8f2:	b085      	sub	sp, #20
 800c8f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c8fa:	4b12      	ldr	r3, [pc, #72]	@ (800c944 <prvTaskExitError+0x54>)
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c902:	d00b      	beq.n	800c91c <prvTaskExitError+0x2c>
	__asm volatile
 800c904:	f04f 0310 	mov.w	r3, #16
 800c908:	f383 8811 	msr	BASEPRI, r3
 800c90c:	f3bf 8f6f 	isb	sy
 800c910:	f3bf 8f4f 	dsb	sy
 800c914:	60fb      	str	r3, [r7, #12]
}
 800c916:	bf00      	nop
 800c918:	bf00      	nop
 800c91a:	e7fd      	b.n	800c918 <prvTaskExitError+0x28>
	__asm volatile
 800c91c:	f04f 0310 	mov.w	r3, #16
 800c920:	f383 8811 	msr	BASEPRI, r3
 800c924:	f3bf 8f6f 	isb	sy
 800c928:	f3bf 8f4f 	dsb	sy
 800c92c:	60bb      	str	r3, [r7, #8]
}
 800c92e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c930:	bf00      	nop
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d0fc      	beq.n	800c932 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c938:	bf00      	nop
 800c93a:	bf00      	nop
 800c93c:	3714      	adds	r7, #20
 800c93e:	46bd      	mov	sp, r7
 800c940:	bc80      	pop	{r7}
 800c942:	4770      	bx	lr
 800c944:	2000002c 	.word	0x2000002c
	...

0800c950 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c950:	4b07      	ldr	r3, [pc, #28]	@ (800c970 <pxCurrentTCBConst2>)
 800c952:	6819      	ldr	r1, [r3, #0]
 800c954:	6808      	ldr	r0, [r1, #0]
 800c956:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c95a:	f380 8809 	msr	PSP, r0
 800c95e:	f3bf 8f6f 	isb	sy
 800c962:	f04f 0000 	mov.w	r0, #0
 800c966:	f380 8811 	msr	BASEPRI, r0
 800c96a:	f04e 0e0d 	orr.w	lr, lr, #13
 800c96e:	4770      	bx	lr

0800c970 <pxCurrentTCBConst2>:
 800c970:	20003a78 	.word	0x20003a78
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c974:	bf00      	nop
 800c976:	bf00      	nop

0800c978 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800c978:	4806      	ldr	r0, [pc, #24]	@ (800c994 <prvPortStartFirstTask+0x1c>)
 800c97a:	6800      	ldr	r0, [r0, #0]
 800c97c:	6800      	ldr	r0, [r0, #0]
 800c97e:	f380 8808 	msr	MSP, r0
 800c982:	b662      	cpsie	i
 800c984:	b661      	cpsie	f
 800c986:	f3bf 8f4f 	dsb	sy
 800c98a:	f3bf 8f6f 	isb	sy
 800c98e:	df00      	svc	0
 800c990:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c992:	bf00      	nop
 800c994:	e000ed08 	.word	0xe000ed08

0800c998 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b084      	sub	sp, #16
 800c99c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c99e:	4b32      	ldr	r3, [pc, #200]	@ (800ca68 <xPortStartScheduler+0xd0>)
 800c9a0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	781b      	ldrb	r3, [r3, #0]
 800c9a6:	b2db      	uxtb	r3, r3
 800c9a8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	22ff      	movs	r2, #255	@ 0xff
 800c9ae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	781b      	ldrb	r3, [r3, #0]
 800c9b4:	b2db      	uxtb	r3, r3
 800c9b6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c9b8:	78fb      	ldrb	r3, [r7, #3]
 800c9ba:	b2db      	uxtb	r3, r3
 800c9bc:	f003 0310 	and.w	r3, r3, #16
 800c9c0:	b2da      	uxtb	r2, r3
 800c9c2:	4b2a      	ldr	r3, [pc, #168]	@ (800ca6c <xPortStartScheduler+0xd4>)
 800c9c4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c9c6:	4b2a      	ldr	r3, [pc, #168]	@ (800ca70 <xPortStartScheduler+0xd8>)
 800c9c8:	2207      	movs	r2, #7
 800c9ca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c9cc:	e009      	b.n	800c9e2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c9ce:	4b28      	ldr	r3, [pc, #160]	@ (800ca70 <xPortStartScheduler+0xd8>)
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	3b01      	subs	r3, #1
 800c9d4:	4a26      	ldr	r2, [pc, #152]	@ (800ca70 <xPortStartScheduler+0xd8>)
 800c9d6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c9d8:	78fb      	ldrb	r3, [r7, #3]
 800c9da:	b2db      	uxtb	r3, r3
 800c9dc:	005b      	lsls	r3, r3, #1
 800c9de:	b2db      	uxtb	r3, r3
 800c9e0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c9e2:	78fb      	ldrb	r3, [r7, #3]
 800c9e4:	b2db      	uxtb	r3, r3
 800c9e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c9ea:	2b80      	cmp	r3, #128	@ 0x80
 800c9ec:	d0ef      	beq.n	800c9ce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c9ee:	4b20      	ldr	r3, [pc, #128]	@ (800ca70 <xPortStartScheduler+0xd8>)
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	f1c3 0307 	rsb	r3, r3, #7
 800c9f6:	2b04      	cmp	r3, #4
 800c9f8:	d00b      	beq.n	800ca12 <xPortStartScheduler+0x7a>
	__asm volatile
 800c9fa:	f04f 0310 	mov.w	r3, #16
 800c9fe:	f383 8811 	msr	BASEPRI, r3
 800ca02:	f3bf 8f6f 	isb	sy
 800ca06:	f3bf 8f4f 	dsb	sy
 800ca0a:	60bb      	str	r3, [r7, #8]
}
 800ca0c:	bf00      	nop
 800ca0e:	bf00      	nop
 800ca10:	e7fd      	b.n	800ca0e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ca12:	4b17      	ldr	r3, [pc, #92]	@ (800ca70 <xPortStartScheduler+0xd8>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	021b      	lsls	r3, r3, #8
 800ca18:	4a15      	ldr	r2, [pc, #84]	@ (800ca70 <xPortStartScheduler+0xd8>)
 800ca1a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ca1c:	4b14      	ldr	r3, [pc, #80]	@ (800ca70 <xPortStartScheduler+0xd8>)
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ca24:	4a12      	ldr	r2, [pc, #72]	@ (800ca70 <xPortStartScheduler+0xd8>)
 800ca26:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	b2da      	uxtb	r2, r3
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ca30:	4b10      	ldr	r3, [pc, #64]	@ (800ca74 <xPortStartScheduler+0xdc>)
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	4a0f      	ldr	r2, [pc, #60]	@ (800ca74 <xPortStartScheduler+0xdc>)
 800ca36:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ca3a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ca3c:	4b0d      	ldr	r3, [pc, #52]	@ (800ca74 <xPortStartScheduler+0xdc>)
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	4a0c      	ldr	r2, [pc, #48]	@ (800ca74 <xPortStartScheduler+0xdc>)
 800ca42:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ca46:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ca48:	f000 f8b8 	bl	800cbbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ca4c:	4b0a      	ldr	r3, [pc, #40]	@ (800ca78 <xPortStartScheduler+0xe0>)
 800ca4e:	2200      	movs	r2, #0
 800ca50:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ca52:	f7ff ff91 	bl	800c978 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ca56:	f001 fbc3 	bl	800e1e0 <vTaskSwitchContext>
	prvTaskExitError();
 800ca5a:	f7ff ff49 	bl	800c8f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ca5e:	2300      	movs	r3, #0
}
 800ca60:	4618      	mov	r0, r3
 800ca62:	3710      	adds	r7, #16
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bd80      	pop	{r7, pc}
 800ca68:	e000e400 	.word	0xe000e400
 800ca6c:	20003a68 	.word	0x20003a68
 800ca70:	20003a6c 	.word	0x20003a6c
 800ca74:	e000ed20 	.word	0xe000ed20
 800ca78:	2000002c 	.word	0x2000002c

0800ca7c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ca7c:	b480      	push	{r7}
 800ca7e:	b083      	sub	sp, #12
 800ca80:	af00      	add	r7, sp, #0
	__asm volatile
 800ca82:	f04f 0310 	mov.w	r3, #16
 800ca86:	f383 8811 	msr	BASEPRI, r3
 800ca8a:	f3bf 8f6f 	isb	sy
 800ca8e:	f3bf 8f4f 	dsb	sy
 800ca92:	607b      	str	r3, [r7, #4]
}
 800ca94:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ca96:	4b0f      	ldr	r3, [pc, #60]	@ (800cad4 <vPortEnterCritical+0x58>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	3301      	adds	r3, #1
 800ca9c:	4a0d      	ldr	r2, [pc, #52]	@ (800cad4 <vPortEnterCritical+0x58>)
 800ca9e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800caa0:	4b0c      	ldr	r3, [pc, #48]	@ (800cad4 <vPortEnterCritical+0x58>)
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	2b01      	cmp	r3, #1
 800caa6:	d110      	bne.n	800caca <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800caa8:	4b0b      	ldr	r3, [pc, #44]	@ (800cad8 <vPortEnterCritical+0x5c>)
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	b2db      	uxtb	r3, r3
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d00b      	beq.n	800caca <vPortEnterCritical+0x4e>
	__asm volatile
 800cab2:	f04f 0310 	mov.w	r3, #16
 800cab6:	f383 8811 	msr	BASEPRI, r3
 800caba:	f3bf 8f6f 	isb	sy
 800cabe:	f3bf 8f4f 	dsb	sy
 800cac2:	603b      	str	r3, [r7, #0]
}
 800cac4:	bf00      	nop
 800cac6:	bf00      	nop
 800cac8:	e7fd      	b.n	800cac6 <vPortEnterCritical+0x4a>
	}
}
 800caca:	bf00      	nop
 800cacc:	370c      	adds	r7, #12
 800cace:	46bd      	mov	sp, r7
 800cad0:	bc80      	pop	{r7}
 800cad2:	4770      	bx	lr
 800cad4:	2000002c 	.word	0x2000002c
 800cad8:	e000ed04 	.word	0xe000ed04

0800cadc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cadc:	b480      	push	{r7}
 800cade:	b083      	sub	sp, #12
 800cae0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cae2:	4b12      	ldr	r3, [pc, #72]	@ (800cb2c <vPortExitCritical+0x50>)
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d10b      	bne.n	800cb02 <vPortExitCritical+0x26>
	__asm volatile
 800caea:	f04f 0310 	mov.w	r3, #16
 800caee:	f383 8811 	msr	BASEPRI, r3
 800caf2:	f3bf 8f6f 	isb	sy
 800caf6:	f3bf 8f4f 	dsb	sy
 800cafa:	607b      	str	r3, [r7, #4]
}
 800cafc:	bf00      	nop
 800cafe:	bf00      	nop
 800cb00:	e7fd      	b.n	800cafe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cb02:	4b0a      	ldr	r3, [pc, #40]	@ (800cb2c <vPortExitCritical+0x50>)
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	3b01      	subs	r3, #1
 800cb08:	4a08      	ldr	r2, [pc, #32]	@ (800cb2c <vPortExitCritical+0x50>)
 800cb0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cb0c:	4b07      	ldr	r3, [pc, #28]	@ (800cb2c <vPortExitCritical+0x50>)
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d105      	bne.n	800cb20 <vPortExitCritical+0x44>
 800cb14:	2300      	movs	r3, #0
 800cb16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	f383 8811 	msr	BASEPRI, r3
}
 800cb1e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cb20:	bf00      	nop
 800cb22:	370c      	adds	r7, #12
 800cb24:	46bd      	mov	sp, r7
 800cb26:	bc80      	pop	{r7}
 800cb28:	4770      	bx	lr
 800cb2a:	bf00      	nop
 800cb2c:	2000002c 	.word	0x2000002c

0800cb30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cb30:	f3ef 8009 	mrs	r0, PSP
 800cb34:	f3bf 8f6f 	isb	sy
 800cb38:	4b0d      	ldr	r3, [pc, #52]	@ (800cb70 <pxCurrentTCBConst>)
 800cb3a:	681a      	ldr	r2, [r3, #0]
 800cb3c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800cb40:	6010      	str	r0, [r2, #0]
 800cb42:	e92d 4008 	stmdb	sp!, {r3, lr}
 800cb46:	f04f 0010 	mov.w	r0, #16
 800cb4a:	f380 8811 	msr	BASEPRI, r0
 800cb4e:	f001 fb47 	bl	800e1e0 <vTaskSwitchContext>
 800cb52:	f04f 0000 	mov.w	r0, #0
 800cb56:	f380 8811 	msr	BASEPRI, r0
 800cb5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800cb5e:	6819      	ldr	r1, [r3, #0]
 800cb60:	6808      	ldr	r0, [r1, #0]
 800cb62:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800cb66:	f380 8809 	msr	PSP, r0
 800cb6a:	f3bf 8f6f 	isb	sy
 800cb6e:	4770      	bx	lr

0800cb70 <pxCurrentTCBConst>:
 800cb70:	20003a78 	.word	0x20003a78
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cb74:	bf00      	nop
 800cb76:	bf00      	nop

0800cb78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b082      	sub	sp, #8
 800cb7c:	af00      	add	r7, sp, #0
	__asm volatile
 800cb7e:	f04f 0310 	mov.w	r3, #16
 800cb82:	f383 8811 	msr	BASEPRI, r3
 800cb86:	f3bf 8f6f 	isb	sy
 800cb8a:	f3bf 8f4f 	dsb	sy
 800cb8e:	607b      	str	r3, [r7, #4]
}
 800cb90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cb92:	f001 fa63 	bl	800e05c <xTaskIncrementTick>
 800cb96:	4603      	mov	r3, r0
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d003      	beq.n	800cba4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cb9c:	4b06      	ldr	r3, [pc, #24]	@ (800cbb8 <xPortSysTickHandler+0x40>)
 800cb9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cba2:	601a      	str	r2, [r3, #0]
 800cba4:	2300      	movs	r3, #0
 800cba6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	f383 8811 	msr	BASEPRI, r3
}
 800cbae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cbb0:	bf00      	nop
 800cbb2:	3708      	adds	r7, #8
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bd80      	pop	{r7, pc}
 800cbb8:	e000ed04 	.word	0xe000ed04

0800cbbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cbbc:	b480      	push	{r7}
 800cbbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cbc0:	4b0a      	ldr	r3, [pc, #40]	@ (800cbec <vPortSetupTimerInterrupt+0x30>)
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cbc6:	4b0a      	ldr	r3, [pc, #40]	@ (800cbf0 <vPortSetupTimerInterrupt+0x34>)
 800cbc8:	2200      	movs	r2, #0
 800cbca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cbcc:	4b09      	ldr	r3, [pc, #36]	@ (800cbf4 <vPortSetupTimerInterrupt+0x38>)
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	4a09      	ldr	r2, [pc, #36]	@ (800cbf8 <vPortSetupTimerInterrupt+0x3c>)
 800cbd2:	fba2 2303 	umull	r2, r3, r2, r3
 800cbd6:	099b      	lsrs	r3, r3, #6
 800cbd8:	4a08      	ldr	r2, [pc, #32]	@ (800cbfc <vPortSetupTimerInterrupt+0x40>)
 800cbda:	3b01      	subs	r3, #1
 800cbdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cbde:	4b03      	ldr	r3, [pc, #12]	@ (800cbec <vPortSetupTimerInterrupt+0x30>)
 800cbe0:	2207      	movs	r2, #7
 800cbe2:	601a      	str	r2, [r3, #0]
}
 800cbe4:	bf00      	nop
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bc80      	pop	{r7}
 800cbea:	4770      	bx	lr
 800cbec:	e000e010 	.word	0xe000e010
 800cbf0:	e000e018 	.word	0xe000e018
 800cbf4:	20000020 	.word	0x20000020
 800cbf8:	10624dd3 	.word	0x10624dd3
 800cbfc:	e000e014 	.word	0xe000e014

0800cc00 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cc00:	b480      	push	{r7}
 800cc02:	b085      	sub	sp, #20
 800cc04:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cc06:	f3ef 8305 	mrs	r3, IPSR
 800cc0a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	2b0f      	cmp	r3, #15
 800cc10:	d915      	bls.n	800cc3e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cc12:	4a17      	ldr	r2, [pc, #92]	@ (800cc70 <vPortValidateInterruptPriority+0x70>)
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	4413      	add	r3, r2
 800cc18:	781b      	ldrb	r3, [r3, #0]
 800cc1a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cc1c:	4b15      	ldr	r3, [pc, #84]	@ (800cc74 <vPortValidateInterruptPriority+0x74>)
 800cc1e:	781b      	ldrb	r3, [r3, #0]
 800cc20:	7afa      	ldrb	r2, [r7, #11]
 800cc22:	429a      	cmp	r2, r3
 800cc24:	d20b      	bcs.n	800cc3e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800cc26:	f04f 0310 	mov.w	r3, #16
 800cc2a:	f383 8811 	msr	BASEPRI, r3
 800cc2e:	f3bf 8f6f 	isb	sy
 800cc32:	f3bf 8f4f 	dsb	sy
 800cc36:	607b      	str	r3, [r7, #4]
}
 800cc38:	bf00      	nop
 800cc3a:	bf00      	nop
 800cc3c:	e7fd      	b.n	800cc3a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cc3e:	4b0e      	ldr	r3, [pc, #56]	@ (800cc78 <vPortValidateInterruptPriority+0x78>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800cc46:	4b0d      	ldr	r3, [pc, #52]	@ (800cc7c <vPortValidateInterruptPriority+0x7c>)
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	429a      	cmp	r2, r3
 800cc4c:	d90b      	bls.n	800cc66 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800cc4e:	f04f 0310 	mov.w	r3, #16
 800cc52:	f383 8811 	msr	BASEPRI, r3
 800cc56:	f3bf 8f6f 	isb	sy
 800cc5a:	f3bf 8f4f 	dsb	sy
 800cc5e:	603b      	str	r3, [r7, #0]
}
 800cc60:	bf00      	nop
 800cc62:	bf00      	nop
 800cc64:	e7fd      	b.n	800cc62 <vPortValidateInterruptPriority+0x62>
	}
 800cc66:	bf00      	nop
 800cc68:	3714      	adds	r7, #20
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bc80      	pop	{r7}
 800cc6e:	4770      	bx	lr
 800cc70:	e000e3f0 	.word	0xe000e3f0
 800cc74:	20003a68 	.word	0x20003a68
 800cc78:	e000ed0c 	.word	0xe000ed0c
 800cc7c:	20003a6c 	.word	0x20003a6c

0800cc80 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b084      	sub	sp, #16
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
 800cc88:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d10b      	bne.n	800ccac <xQueueGenericReset+0x2c>
	__asm volatile
 800cc94:	f04f 0310 	mov.w	r3, #16
 800cc98:	f383 8811 	msr	BASEPRI, r3
 800cc9c:	f3bf 8f6f 	isb	sy
 800cca0:	f3bf 8f4f 	dsb	sy
 800cca4:	60bb      	str	r3, [r7, #8]
}
 800cca6:	bf00      	nop
 800cca8:	bf00      	nop
 800ccaa:	e7fd      	b.n	800cca8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ccac:	f7ff fee6 	bl	800ca7c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	681a      	ldr	r2, [r3, #0]
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ccb8:	68f9      	ldr	r1, [r7, #12]
 800ccba:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ccbc:	fb01 f303 	mul.w	r3, r1, r3
 800ccc0:	441a      	add	r2, r3
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	2200      	movs	r2, #0
 800ccca:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	681a      	ldr	r2, [r3, #0]
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	681a      	ldr	r2, [r3, #0]
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ccdc:	3b01      	subs	r3, #1
 800ccde:	68f9      	ldr	r1, [r7, #12]
 800cce0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800cce2:	fb01 f303 	mul.w	r3, r1, r3
 800cce6:	441a      	add	r2, r3
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	22ff      	movs	r2, #255	@ 0xff
 800ccf0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	22ff      	movs	r2, #255	@ 0xff
 800ccf8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800ccfc:	683b      	ldr	r3, [r7, #0]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d114      	bne.n	800cd2c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	691b      	ldr	r3, [r3, #16]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d01a      	beq.n	800cd40 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	3310      	adds	r3, #16
 800cd0e:	4618      	mov	r0, r3
 800cd10:	f001 fb60 	bl	800e3d4 <xTaskRemoveFromEventList>
 800cd14:	4603      	mov	r3, r0
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d012      	beq.n	800cd40 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cd1a:	4b0d      	ldr	r3, [pc, #52]	@ (800cd50 <xQueueGenericReset+0xd0>)
 800cd1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd20:	601a      	str	r2, [r3, #0]
 800cd22:	f3bf 8f4f 	dsb	sy
 800cd26:	f3bf 8f6f 	isb	sy
 800cd2a:	e009      	b.n	800cd40 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	3310      	adds	r3, #16
 800cd30:	4618      	mov	r0, r3
 800cd32:	f7ff fd01 	bl	800c738 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	3324      	adds	r3, #36	@ 0x24
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	f7ff fcfc 	bl	800c738 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cd40:	f7ff fecc 	bl	800cadc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cd44:	2301      	movs	r3, #1
}
 800cd46:	4618      	mov	r0, r3
 800cd48:	3710      	adds	r7, #16
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	bd80      	pop	{r7, pc}
 800cd4e:	bf00      	nop
 800cd50:	e000ed04 	.word	0xe000ed04

0800cd54 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b08e      	sub	sp, #56	@ 0x38
 800cd58:	af02      	add	r7, sp, #8
 800cd5a:	60f8      	str	r0, [r7, #12]
 800cd5c:	60b9      	str	r1, [r7, #8]
 800cd5e:	607a      	str	r2, [r7, #4]
 800cd60:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d10b      	bne.n	800cd80 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800cd68:	f04f 0310 	mov.w	r3, #16
 800cd6c:	f383 8811 	msr	BASEPRI, r3
 800cd70:	f3bf 8f6f 	isb	sy
 800cd74:	f3bf 8f4f 	dsb	sy
 800cd78:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cd7a:	bf00      	nop
 800cd7c:	bf00      	nop
 800cd7e:	e7fd      	b.n	800cd7c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d10b      	bne.n	800cd9e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800cd86:	f04f 0310 	mov.w	r3, #16
 800cd8a:	f383 8811 	msr	BASEPRI, r3
 800cd8e:	f3bf 8f6f 	isb	sy
 800cd92:	f3bf 8f4f 	dsb	sy
 800cd96:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cd98:	bf00      	nop
 800cd9a:	bf00      	nop
 800cd9c:	e7fd      	b.n	800cd9a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d002      	beq.n	800cdaa <xQueueGenericCreateStatic+0x56>
 800cda4:	68bb      	ldr	r3, [r7, #8]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d001      	beq.n	800cdae <xQueueGenericCreateStatic+0x5a>
 800cdaa:	2301      	movs	r3, #1
 800cdac:	e000      	b.n	800cdb0 <xQueueGenericCreateStatic+0x5c>
 800cdae:	2300      	movs	r3, #0
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d10b      	bne.n	800cdcc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800cdb4:	f04f 0310 	mov.w	r3, #16
 800cdb8:	f383 8811 	msr	BASEPRI, r3
 800cdbc:	f3bf 8f6f 	isb	sy
 800cdc0:	f3bf 8f4f 	dsb	sy
 800cdc4:	623b      	str	r3, [r7, #32]
}
 800cdc6:	bf00      	nop
 800cdc8:	bf00      	nop
 800cdca:	e7fd      	b.n	800cdc8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d102      	bne.n	800cdd8 <xQueueGenericCreateStatic+0x84>
 800cdd2:	68bb      	ldr	r3, [r7, #8]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d101      	bne.n	800cddc <xQueueGenericCreateStatic+0x88>
 800cdd8:	2301      	movs	r3, #1
 800cdda:	e000      	b.n	800cdde <xQueueGenericCreateStatic+0x8a>
 800cddc:	2300      	movs	r3, #0
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d10b      	bne.n	800cdfa <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800cde2:	f04f 0310 	mov.w	r3, #16
 800cde6:	f383 8811 	msr	BASEPRI, r3
 800cdea:	f3bf 8f6f 	isb	sy
 800cdee:	f3bf 8f4f 	dsb	sy
 800cdf2:	61fb      	str	r3, [r7, #28]
}
 800cdf4:	bf00      	nop
 800cdf6:	bf00      	nop
 800cdf8:	e7fd      	b.n	800cdf6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cdfa:	2350      	movs	r3, #80	@ 0x50
 800cdfc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cdfe:	697b      	ldr	r3, [r7, #20]
 800ce00:	2b50      	cmp	r3, #80	@ 0x50
 800ce02:	d00b      	beq.n	800ce1c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800ce04:	f04f 0310 	mov.w	r3, #16
 800ce08:	f383 8811 	msr	BASEPRI, r3
 800ce0c:	f3bf 8f6f 	isb	sy
 800ce10:	f3bf 8f4f 	dsb	sy
 800ce14:	61bb      	str	r3, [r7, #24]
}
 800ce16:	bf00      	nop
 800ce18:	bf00      	nop
 800ce1a:	e7fd      	b.n	800ce18 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ce1c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ce1e:	683b      	ldr	r3, [r7, #0]
 800ce20:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800ce22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d00d      	beq.n	800ce44 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ce28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce2a:	2201      	movs	r2, #1
 800ce2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ce30:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800ce34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce36:	9300      	str	r3, [sp, #0]
 800ce38:	4613      	mov	r3, r2
 800ce3a:	687a      	ldr	r2, [r7, #4]
 800ce3c:	68b9      	ldr	r1, [r7, #8]
 800ce3e:	68f8      	ldr	r0, [r7, #12]
 800ce40:	f000 f805 	bl	800ce4e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ce44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800ce46:	4618      	mov	r0, r3
 800ce48:	3730      	adds	r7, #48	@ 0x30
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bd80      	pop	{r7, pc}

0800ce4e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ce4e:	b580      	push	{r7, lr}
 800ce50:	b084      	sub	sp, #16
 800ce52:	af00      	add	r7, sp, #0
 800ce54:	60f8      	str	r0, [r7, #12]
 800ce56:	60b9      	str	r1, [r7, #8]
 800ce58:	607a      	str	r2, [r7, #4]
 800ce5a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ce5c:	68bb      	ldr	r3, [r7, #8]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d103      	bne.n	800ce6a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ce62:	69bb      	ldr	r3, [r7, #24]
 800ce64:	69ba      	ldr	r2, [r7, #24]
 800ce66:	601a      	str	r2, [r3, #0]
 800ce68:	e002      	b.n	800ce70 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ce6a:	69bb      	ldr	r3, [r7, #24]
 800ce6c:	687a      	ldr	r2, [r7, #4]
 800ce6e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ce70:	69bb      	ldr	r3, [r7, #24]
 800ce72:	68fa      	ldr	r2, [r7, #12]
 800ce74:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ce76:	69bb      	ldr	r3, [r7, #24]
 800ce78:	68ba      	ldr	r2, [r7, #8]
 800ce7a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ce7c:	2101      	movs	r1, #1
 800ce7e:	69b8      	ldr	r0, [r7, #24]
 800ce80:	f7ff fefe 	bl	800cc80 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ce84:	69bb      	ldr	r3, [r7, #24]
 800ce86:	78fa      	ldrb	r2, [r7, #3]
 800ce88:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ce8c:	bf00      	nop
 800ce8e:	3710      	adds	r7, #16
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bd80      	pop	{r7, pc}

0800ce94 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b08e      	sub	sp, #56	@ 0x38
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	60f8      	str	r0, [r7, #12]
 800ce9c:	60b9      	str	r1, [r7, #8]
 800ce9e:	607a      	str	r2, [r7, #4]
 800cea0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cea2:	2300      	movs	r3, #0
 800cea4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ceaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d10b      	bne.n	800cec8 <xQueueGenericSend+0x34>
	__asm volatile
 800ceb0:	f04f 0310 	mov.w	r3, #16
 800ceb4:	f383 8811 	msr	BASEPRI, r3
 800ceb8:	f3bf 8f6f 	isb	sy
 800cebc:	f3bf 8f4f 	dsb	sy
 800cec0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cec2:	bf00      	nop
 800cec4:	bf00      	nop
 800cec6:	e7fd      	b.n	800cec4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cec8:	68bb      	ldr	r3, [r7, #8]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d103      	bne.n	800ced6 <xQueueGenericSend+0x42>
 800cece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ced0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d101      	bne.n	800ceda <xQueueGenericSend+0x46>
 800ced6:	2301      	movs	r3, #1
 800ced8:	e000      	b.n	800cedc <xQueueGenericSend+0x48>
 800ceda:	2300      	movs	r3, #0
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d10b      	bne.n	800cef8 <xQueueGenericSend+0x64>
	__asm volatile
 800cee0:	f04f 0310 	mov.w	r3, #16
 800cee4:	f383 8811 	msr	BASEPRI, r3
 800cee8:	f3bf 8f6f 	isb	sy
 800ceec:	f3bf 8f4f 	dsb	sy
 800cef0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cef2:	bf00      	nop
 800cef4:	bf00      	nop
 800cef6:	e7fd      	b.n	800cef4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cef8:	683b      	ldr	r3, [r7, #0]
 800cefa:	2b02      	cmp	r3, #2
 800cefc:	d103      	bne.n	800cf06 <xQueueGenericSend+0x72>
 800cefe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf02:	2b01      	cmp	r3, #1
 800cf04:	d101      	bne.n	800cf0a <xQueueGenericSend+0x76>
 800cf06:	2301      	movs	r3, #1
 800cf08:	e000      	b.n	800cf0c <xQueueGenericSend+0x78>
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d10b      	bne.n	800cf28 <xQueueGenericSend+0x94>
	__asm volatile
 800cf10:	f04f 0310 	mov.w	r3, #16
 800cf14:	f383 8811 	msr	BASEPRI, r3
 800cf18:	f3bf 8f6f 	isb	sy
 800cf1c:	f3bf 8f4f 	dsb	sy
 800cf20:	623b      	str	r3, [r7, #32]
}
 800cf22:	bf00      	nop
 800cf24:	bf00      	nop
 800cf26:	e7fd      	b.n	800cf24 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cf28:	f001 fcfe 	bl	800e928 <xTaskGetSchedulerState>
 800cf2c:	4603      	mov	r3, r0
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d102      	bne.n	800cf38 <xQueueGenericSend+0xa4>
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d101      	bne.n	800cf3c <xQueueGenericSend+0xa8>
 800cf38:	2301      	movs	r3, #1
 800cf3a:	e000      	b.n	800cf3e <xQueueGenericSend+0xaa>
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d10b      	bne.n	800cf5a <xQueueGenericSend+0xc6>
	__asm volatile
 800cf42:	f04f 0310 	mov.w	r3, #16
 800cf46:	f383 8811 	msr	BASEPRI, r3
 800cf4a:	f3bf 8f6f 	isb	sy
 800cf4e:	f3bf 8f4f 	dsb	sy
 800cf52:	61fb      	str	r3, [r7, #28]
}
 800cf54:	bf00      	nop
 800cf56:	bf00      	nop
 800cf58:	e7fd      	b.n	800cf56 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cf5a:	f7ff fd8f 	bl	800ca7c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cf5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cf62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf66:	429a      	cmp	r2, r3
 800cf68:	d302      	bcc.n	800cf70 <xQueueGenericSend+0xdc>
 800cf6a:	683b      	ldr	r3, [r7, #0]
 800cf6c:	2b02      	cmp	r3, #2
 800cf6e:	d129      	bne.n	800cfc4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cf70:	683a      	ldr	r2, [r7, #0]
 800cf72:	68b9      	ldr	r1, [r7, #8]
 800cf74:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cf76:	f000 fa0f 	bl	800d398 <prvCopyDataToQueue>
 800cf7a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cf7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d010      	beq.n	800cfa6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cf84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf86:	3324      	adds	r3, #36	@ 0x24
 800cf88:	4618      	mov	r0, r3
 800cf8a:	f001 fa23 	bl	800e3d4 <xTaskRemoveFromEventList>
 800cf8e:	4603      	mov	r3, r0
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d013      	beq.n	800cfbc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cf94:	4b3f      	ldr	r3, [pc, #252]	@ (800d094 <xQueueGenericSend+0x200>)
 800cf96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf9a:	601a      	str	r2, [r3, #0]
 800cf9c:	f3bf 8f4f 	dsb	sy
 800cfa0:	f3bf 8f6f 	isb	sy
 800cfa4:	e00a      	b.n	800cfbc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cfa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d007      	beq.n	800cfbc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cfac:	4b39      	ldr	r3, [pc, #228]	@ (800d094 <xQueueGenericSend+0x200>)
 800cfae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cfb2:	601a      	str	r2, [r3, #0]
 800cfb4:	f3bf 8f4f 	dsb	sy
 800cfb8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cfbc:	f7ff fd8e 	bl	800cadc <vPortExitCritical>
				return pdPASS;
 800cfc0:	2301      	movs	r3, #1
 800cfc2:	e063      	b.n	800d08c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d103      	bne.n	800cfd2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cfca:	f7ff fd87 	bl	800cadc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cfce:	2300      	movs	r3, #0
 800cfd0:	e05c      	b.n	800d08c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cfd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d106      	bne.n	800cfe6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cfd8:	f107 0314 	add.w	r3, r7, #20
 800cfdc:	4618      	mov	r0, r3
 800cfde:	f001 fa5d 	bl	800e49c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cfe2:	2301      	movs	r3, #1
 800cfe4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cfe6:	f7ff fd79 	bl	800cadc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cfea:	f000 feed 	bl	800ddc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cfee:	f7ff fd45 	bl	800ca7c <vPortEnterCritical>
 800cff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cff4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cff8:	b25b      	sxtb	r3, r3
 800cffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cffe:	d103      	bne.n	800d008 <xQueueGenericSend+0x174>
 800d000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d002:	2200      	movs	r2, #0
 800d004:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d00a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d00e:	b25b      	sxtb	r3, r3
 800d010:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d014:	d103      	bne.n	800d01e <xQueueGenericSend+0x18a>
 800d016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d018:	2200      	movs	r2, #0
 800d01a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d01e:	f7ff fd5d 	bl	800cadc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d022:	1d3a      	adds	r2, r7, #4
 800d024:	f107 0314 	add.w	r3, r7, #20
 800d028:	4611      	mov	r1, r2
 800d02a:	4618      	mov	r0, r3
 800d02c:	f001 fa4c 	bl	800e4c8 <xTaskCheckForTimeOut>
 800d030:	4603      	mov	r3, r0
 800d032:	2b00      	cmp	r3, #0
 800d034:	d124      	bne.n	800d080 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d036:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d038:	f000 faa6 	bl	800d588 <prvIsQueueFull>
 800d03c:	4603      	mov	r3, r0
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d018      	beq.n	800d074 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d044:	3310      	adds	r3, #16
 800d046:	687a      	ldr	r2, [r7, #4]
 800d048:	4611      	mov	r1, r2
 800d04a:	4618      	mov	r0, r3
 800d04c:	f001 f970 	bl	800e330 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d050:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d052:	f000 fa31 	bl	800d4b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d056:	f000 fec5 	bl	800dde4 <xTaskResumeAll>
 800d05a:	4603      	mov	r3, r0
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	f47f af7c 	bne.w	800cf5a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d062:	4b0c      	ldr	r3, [pc, #48]	@ (800d094 <xQueueGenericSend+0x200>)
 800d064:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d068:	601a      	str	r2, [r3, #0]
 800d06a:	f3bf 8f4f 	dsb	sy
 800d06e:	f3bf 8f6f 	isb	sy
 800d072:	e772      	b.n	800cf5a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d074:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d076:	f000 fa1f 	bl	800d4b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d07a:	f000 feb3 	bl	800dde4 <xTaskResumeAll>
 800d07e:	e76c      	b.n	800cf5a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d080:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d082:	f000 fa19 	bl	800d4b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d086:	f000 fead 	bl	800dde4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d08a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d08c:	4618      	mov	r0, r3
 800d08e:	3738      	adds	r7, #56	@ 0x38
 800d090:	46bd      	mov	sp, r7
 800d092:	bd80      	pop	{r7, pc}
 800d094:	e000ed04 	.word	0xe000ed04

0800d098 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b090      	sub	sp, #64	@ 0x40
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	60f8      	str	r0, [r7, #12]
 800d0a0:	60b9      	str	r1, [r7, #8]
 800d0a2:	607a      	str	r2, [r7, #4]
 800d0a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800d0aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d10b      	bne.n	800d0c8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800d0b0:	f04f 0310 	mov.w	r3, #16
 800d0b4:	f383 8811 	msr	BASEPRI, r3
 800d0b8:	f3bf 8f6f 	isb	sy
 800d0bc:	f3bf 8f4f 	dsb	sy
 800d0c0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d0c2:	bf00      	nop
 800d0c4:	bf00      	nop
 800d0c6:	e7fd      	b.n	800d0c4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d0c8:	68bb      	ldr	r3, [r7, #8]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d103      	bne.n	800d0d6 <xQueueGenericSendFromISR+0x3e>
 800d0ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d101      	bne.n	800d0da <xQueueGenericSendFromISR+0x42>
 800d0d6:	2301      	movs	r3, #1
 800d0d8:	e000      	b.n	800d0dc <xQueueGenericSendFromISR+0x44>
 800d0da:	2300      	movs	r3, #0
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d10b      	bne.n	800d0f8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800d0e0:	f04f 0310 	mov.w	r3, #16
 800d0e4:	f383 8811 	msr	BASEPRI, r3
 800d0e8:	f3bf 8f6f 	isb	sy
 800d0ec:	f3bf 8f4f 	dsb	sy
 800d0f0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d0f2:	bf00      	nop
 800d0f4:	bf00      	nop
 800d0f6:	e7fd      	b.n	800d0f4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d0f8:	683b      	ldr	r3, [r7, #0]
 800d0fa:	2b02      	cmp	r3, #2
 800d0fc:	d103      	bne.n	800d106 <xQueueGenericSendFromISR+0x6e>
 800d0fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d100:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d102:	2b01      	cmp	r3, #1
 800d104:	d101      	bne.n	800d10a <xQueueGenericSendFromISR+0x72>
 800d106:	2301      	movs	r3, #1
 800d108:	e000      	b.n	800d10c <xQueueGenericSendFromISR+0x74>
 800d10a:	2300      	movs	r3, #0
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d10b      	bne.n	800d128 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800d110:	f04f 0310 	mov.w	r3, #16
 800d114:	f383 8811 	msr	BASEPRI, r3
 800d118:	f3bf 8f6f 	isb	sy
 800d11c:	f3bf 8f4f 	dsb	sy
 800d120:	623b      	str	r3, [r7, #32]
}
 800d122:	bf00      	nop
 800d124:	bf00      	nop
 800d126:	e7fd      	b.n	800d124 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d128:	f7ff fd6a 	bl	800cc00 <vPortValidateInterruptPriority>
	__asm volatile
 800d12c:	f3ef 8211 	mrs	r2, BASEPRI
 800d130:	f04f 0310 	mov.w	r3, #16
 800d134:	f383 8811 	msr	BASEPRI, r3
 800d138:	f3bf 8f6f 	isb	sy
 800d13c:	f3bf 8f4f 	dsb	sy
 800d140:	61fa      	str	r2, [r7, #28]
 800d142:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800d144:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d146:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d14a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d14c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d14e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d150:	429a      	cmp	r2, r3
 800d152:	d302      	bcc.n	800d15a <xQueueGenericSendFromISR+0xc2>
 800d154:	683b      	ldr	r3, [r7, #0]
 800d156:	2b02      	cmp	r3, #2
 800d158:	d12f      	bne.n	800d1ba <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d15a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d15c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d160:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d168:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d16a:	683a      	ldr	r2, [r7, #0]
 800d16c:	68b9      	ldr	r1, [r7, #8]
 800d16e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d170:	f000 f912 	bl	800d398 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d174:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800d178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d17c:	d112      	bne.n	800d1a4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d17e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d182:	2b00      	cmp	r3, #0
 800d184:	d016      	beq.n	800d1b4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d188:	3324      	adds	r3, #36	@ 0x24
 800d18a:	4618      	mov	r0, r3
 800d18c:	f001 f922 	bl	800e3d4 <xTaskRemoveFromEventList>
 800d190:	4603      	mov	r3, r0
 800d192:	2b00      	cmp	r3, #0
 800d194:	d00e      	beq.n	800d1b4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d00b      	beq.n	800d1b4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	2201      	movs	r2, #1
 800d1a0:	601a      	str	r2, [r3, #0]
 800d1a2:	e007      	b.n	800d1b4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d1a4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d1a8:	3301      	adds	r3, #1
 800d1aa:	b2db      	uxtb	r3, r3
 800d1ac:	b25a      	sxtb	r2, r3
 800d1ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d1b4:	2301      	movs	r3, #1
 800d1b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800d1b8:	e001      	b.n	800d1be <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d1be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1c0:	617b      	str	r3, [r7, #20]
	__asm volatile
 800d1c2:	697b      	ldr	r3, [r7, #20]
 800d1c4:	f383 8811 	msr	BASEPRI, r3
}
 800d1c8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d1ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	3740      	adds	r7, #64	@ 0x40
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	bd80      	pop	{r7, pc}

0800d1d4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b08c      	sub	sp, #48	@ 0x30
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	60f8      	str	r0, [r7, #12]
 800d1dc:	60b9      	str	r1, [r7, #8]
 800d1de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d1e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d10b      	bne.n	800d206 <xQueueReceive+0x32>
	__asm volatile
 800d1ee:	f04f 0310 	mov.w	r3, #16
 800d1f2:	f383 8811 	msr	BASEPRI, r3
 800d1f6:	f3bf 8f6f 	isb	sy
 800d1fa:	f3bf 8f4f 	dsb	sy
 800d1fe:	623b      	str	r3, [r7, #32]
}
 800d200:	bf00      	nop
 800d202:	bf00      	nop
 800d204:	e7fd      	b.n	800d202 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d206:	68bb      	ldr	r3, [r7, #8]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d103      	bne.n	800d214 <xQueueReceive+0x40>
 800d20c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d20e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d210:	2b00      	cmp	r3, #0
 800d212:	d101      	bne.n	800d218 <xQueueReceive+0x44>
 800d214:	2301      	movs	r3, #1
 800d216:	e000      	b.n	800d21a <xQueueReceive+0x46>
 800d218:	2300      	movs	r3, #0
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d10b      	bne.n	800d236 <xQueueReceive+0x62>
	__asm volatile
 800d21e:	f04f 0310 	mov.w	r3, #16
 800d222:	f383 8811 	msr	BASEPRI, r3
 800d226:	f3bf 8f6f 	isb	sy
 800d22a:	f3bf 8f4f 	dsb	sy
 800d22e:	61fb      	str	r3, [r7, #28]
}
 800d230:	bf00      	nop
 800d232:	bf00      	nop
 800d234:	e7fd      	b.n	800d232 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d236:	f001 fb77 	bl	800e928 <xTaskGetSchedulerState>
 800d23a:	4603      	mov	r3, r0
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d102      	bne.n	800d246 <xQueueReceive+0x72>
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d101      	bne.n	800d24a <xQueueReceive+0x76>
 800d246:	2301      	movs	r3, #1
 800d248:	e000      	b.n	800d24c <xQueueReceive+0x78>
 800d24a:	2300      	movs	r3, #0
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d10b      	bne.n	800d268 <xQueueReceive+0x94>
	__asm volatile
 800d250:	f04f 0310 	mov.w	r3, #16
 800d254:	f383 8811 	msr	BASEPRI, r3
 800d258:	f3bf 8f6f 	isb	sy
 800d25c:	f3bf 8f4f 	dsb	sy
 800d260:	61bb      	str	r3, [r7, #24]
}
 800d262:	bf00      	nop
 800d264:	bf00      	nop
 800d266:	e7fd      	b.n	800d264 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d268:	f7ff fc08 	bl	800ca7c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d26c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d26e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d270:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d274:	2b00      	cmp	r3, #0
 800d276:	d01f      	beq.n	800d2b8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d278:	68b9      	ldr	r1, [r7, #8]
 800d27a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d27c:	f000 f8f6 	bl	800d46c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d282:	1e5a      	subs	r2, r3, #1
 800d284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d286:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d28a:	691b      	ldr	r3, [r3, #16]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d00f      	beq.n	800d2b0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d292:	3310      	adds	r3, #16
 800d294:	4618      	mov	r0, r3
 800d296:	f001 f89d 	bl	800e3d4 <xTaskRemoveFromEventList>
 800d29a:	4603      	mov	r3, r0
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d007      	beq.n	800d2b0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d2a0:	4b3c      	ldr	r3, [pc, #240]	@ (800d394 <xQueueReceive+0x1c0>)
 800d2a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d2a6:	601a      	str	r2, [r3, #0]
 800d2a8:	f3bf 8f4f 	dsb	sy
 800d2ac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d2b0:	f7ff fc14 	bl	800cadc <vPortExitCritical>
				return pdPASS;
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	e069      	b.n	800d38c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d103      	bne.n	800d2c6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d2be:	f7ff fc0d 	bl	800cadc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	e062      	b.n	800d38c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d2c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d106      	bne.n	800d2da <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d2cc:	f107 0310 	add.w	r3, r7, #16
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f001 f8e3 	bl	800e49c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d2d6:	2301      	movs	r3, #1
 800d2d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d2da:	f7ff fbff 	bl	800cadc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d2de:	f000 fd73 	bl	800ddc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d2e2:	f7ff fbcb 	bl	800ca7c <vPortEnterCritical>
 800d2e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d2ec:	b25b      	sxtb	r3, r3
 800d2ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2f2:	d103      	bne.n	800d2fc <xQueueReceive+0x128>
 800d2f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d2fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d302:	b25b      	sxtb	r3, r3
 800d304:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d308:	d103      	bne.n	800d312 <xQueueReceive+0x13e>
 800d30a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d30c:	2200      	movs	r2, #0
 800d30e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d312:	f7ff fbe3 	bl	800cadc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d316:	1d3a      	adds	r2, r7, #4
 800d318:	f107 0310 	add.w	r3, r7, #16
 800d31c:	4611      	mov	r1, r2
 800d31e:	4618      	mov	r0, r3
 800d320:	f001 f8d2 	bl	800e4c8 <xTaskCheckForTimeOut>
 800d324:	4603      	mov	r3, r0
 800d326:	2b00      	cmp	r3, #0
 800d328:	d123      	bne.n	800d372 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d32a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d32c:	f000 f916 	bl	800d55c <prvIsQueueEmpty>
 800d330:	4603      	mov	r3, r0
 800d332:	2b00      	cmp	r3, #0
 800d334:	d017      	beq.n	800d366 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d338:	3324      	adds	r3, #36	@ 0x24
 800d33a:	687a      	ldr	r2, [r7, #4]
 800d33c:	4611      	mov	r1, r2
 800d33e:	4618      	mov	r0, r3
 800d340:	f000 fff6 	bl	800e330 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d344:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d346:	f000 f8b7 	bl	800d4b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d34a:	f000 fd4b 	bl	800dde4 <xTaskResumeAll>
 800d34e:	4603      	mov	r3, r0
 800d350:	2b00      	cmp	r3, #0
 800d352:	d189      	bne.n	800d268 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d354:	4b0f      	ldr	r3, [pc, #60]	@ (800d394 <xQueueReceive+0x1c0>)
 800d356:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d35a:	601a      	str	r2, [r3, #0]
 800d35c:	f3bf 8f4f 	dsb	sy
 800d360:	f3bf 8f6f 	isb	sy
 800d364:	e780      	b.n	800d268 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d366:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d368:	f000 f8a6 	bl	800d4b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d36c:	f000 fd3a 	bl	800dde4 <xTaskResumeAll>
 800d370:	e77a      	b.n	800d268 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d372:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d374:	f000 f8a0 	bl	800d4b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d378:	f000 fd34 	bl	800dde4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d37c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d37e:	f000 f8ed 	bl	800d55c <prvIsQueueEmpty>
 800d382:	4603      	mov	r3, r0
 800d384:	2b00      	cmp	r3, #0
 800d386:	f43f af6f 	beq.w	800d268 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d38a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d38c:	4618      	mov	r0, r3
 800d38e:	3730      	adds	r7, #48	@ 0x30
 800d390:	46bd      	mov	sp, r7
 800d392:	bd80      	pop	{r7, pc}
 800d394:	e000ed04 	.word	0xe000ed04

0800d398 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	b086      	sub	sp, #24
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	60f8      	str	r0, [r7, #12]
 800d3a0:	60b9      	str	r1, [r7, #8]
 800d3a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d10d      	bne.n	800d3d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d14d      	bne.n	800d45a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	689b      	ldr	r3, [r3, #8]
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	f001 face 	bl	800e964 <xTaskPriorityDisinherit>
 800d3c8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	609a      	str	r2, [r3, #8]
 800d3d0:	e043      	b.n	800d45a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d119      	bne.n	800d40c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	6858      	ldr	r0, [r3, #4]
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3e0:	461a      	mov	r2, r3
 800d3e2:	68b9      	ldr	r1, [r7, #8]
 800d3e4:	f002 f82e 	bl	800f444 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	685a      	ldr	r2, [r3, #4]
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3f0:	441a      	add	r2, r3
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	685a      	ldr	r2, [r3, #4]
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	689b      	ldr	r3, [r3, #8]
 800d3fe:	429a      	cmp	r2, r3
 800d400:	d32b      	bcc.n	800d45a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	681a      	ldr	r2, [r3, #0]
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	605a      	str	r2, [r3, #4]
 800d40a:	e026      	b.n	800d45a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	68d8      	ldr	r0, [r3, #12]
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d414:	461a      	mov	r2, r3
 800d416:	68b9      	ldr	r1, [r7, #8]
 800d418:	f002 f814 	bl	800f444 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	68da      	ldr	r2, [r3, #12]
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d424:	425b      	negs	r3, r3
 800d426:	441a      	add	r2, r3
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	68da      	ldr	r2, [r3, #12]
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	429a      	cmp	r2, r3
 800d436:	d207      	bcs.n	800d448 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	689a      	ldr	r2, [r3, #8]
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d440:	425b      	negs	r3, r3
 800d442:	441a      	add	r2, r3
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	2b02      	cmp	r3, #2
 800d44c:	d105      	bne.n	800d45a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d44e:	693b      	ldr	r3, [r7, #16]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d002      	beq.n	800d45a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d454:	693b      	ldr	r3, [r7, #16]
 800d456:	3b01      	subs	r3, #1
 800d458:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d45a:	693b      	ldr	r3, [r7, #16]
 800d45c:	1c5a      	adds	r2, r3, #1
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800d462:	697b      	ldr	r3, [r7, #20]
}
 800d464:	4618      	mov	r0, r3
 800d466:	3718      	adds	r7, #24
 800d468:	46bd      	mov	sp, r7
 800d46a:	bd80      	pop	{r7, pc}

0800d46c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b082      	sub	sp, #8
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
 800d474:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d018      	beq.n	800d4b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	68da      	ldr	r2, [r3, #12]
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d486:	441a      	add	r2, r3
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	68da      	ldr	r2, [r3, #12]
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	689b      	ldr	r3, [r3, #8]
 800d494:	429a      	cmp	r2, r3
 800d496:	d303      	bcc.n	800d4a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681a      	ldr	r2, [r3, #0]
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	68d9      	ldr	r1, [r3, #12]
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4a8:	461a      	mov	r2, r3
 800d4aa:	6838      	ldr	r0, [r7, #0]
 800d4ac:	f001 ffca 	bl	800f444 <memcpy>
	}
}
 800d4b0:	bf00      	nop
 800d4b2:	3708      	adds	r7, #8
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	bd80      	pop	{r7, pc}

0800d4b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b084      	sub	sp, #16
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d4c0:	f7ff fadc 	bl	800ca7c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d4ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d4cc:	e011      	b.n	800d4f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d012      	beq.n	800d4fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	3324      	adds	r3, #36	@ 0x24
 800d4da:	4618      	mov	r0, r3
 800d4dc:	f000 ff7a 	bl	800e3d4 <xTaskRemoveFromEventList>
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d001      	beq.n	800d4ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d4e6:	f001 f863 	bl	800e5b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d4ea:	7bfb      	ldrb	r3, [r7, #15]
 800d4ec:	3b01      	subs	r3, #1
 800d4ee:	b2db      	uxtb	r3, r3
 800d4f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d4f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	dce9      	bgt.n	800d4ce <prvUnlockQueue+0x16>
 800d4fa:	e000      	b.n	800d4fe <prvUnlockQueue+0x46>
					break;
 800d4fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	22ff      	movs	r2, #255	@ 0xff
 800d502:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800d506:	f7ff fae9 	bl	800cadc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d50a:	f7ff fab7 	bl	800ca7c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d514:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d516:	e011      	b.n	800d53c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	691b      	ldr	r3, [r3, #16]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d012      	beq.n	800d546 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	3310      	adds	r3, #16
 800d524:	4618      	mov	r0, r3
 800d526:	f000 ff55 	bl	800e3d4 <xTaskRemoveFromEventList>
 800d52a:	4603      	mov	r3, r0
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d001      	beq.n	800d534 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d530:	f001 f83e 	bl	800e5b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d534:	7bbb      	ldrb	r3, [r7, #14]
 800d536:	3b01      	subs	r3, #1
 800d538:	b2db      	uxtb	r3, r3
 800d53a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d53c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d540:	2b00      	cmp	r3, #0
 800d542:	dce9      	bgt.n	800d518 <prvUnlockQueue+0x60>
 800d544:	e000      	b.n	800d548 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d546:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	22ff      	movs	r2, #255	@ 0xff
 800d54c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800d550:	f7ff fac4 	bl	800cadc <vPortExitCritical>
}
 800d554:	bf00      	nop
 800d556:	3710      	adds	r7, #16
 800d558:	46bd      	mov	sp, r7
 800d55a:	bd80      	pop	{r7, pc}

0800d55c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b084      	sub	sp, #16
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d564:	f7ff fa8a 	bl	800ca7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d102      	bne.n	800d576 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d570:	2301      	movs	r3, #1
 800d572:	60fb      	str	r3, [r7, #12]
 800d574:	e001      	b.n	800d57a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d576:	2300      	movs	r3, #0
 800d578:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d57a:	f7ff faaf 	bl	800cadc <vPortExitCritical>

	return xReturn;
 800d57e:	68fb      	ldr	r3, [r7, #12]
}
 800d580:	4618      	mov	r0, r3
 800d582:	3710      	adds	r7, #16
 800d584:	46bd      	mov	sp, r7
 800d586:	bd80      	pop	{r7, pc}

0800d588 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b084      	sub	sp, #16
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d590:	f7ff fa74 	bl	800ca7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d59c:	429a      	cmp	r2, r3
 800d59e:	d102      	bne.n	800d5a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d5a0:	2301      	movs	r3, #1
 800d5a2:	60fb      	str	r3, [r7, #12]
 800d5a4:	e001      	b.n	800d5aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d5aa:	f7ff fa97 	bl	800cadc <vPortExitCritical>

	return xReturn;
 800d5ae:	68fb      	ldr	r3, [r7, #12]
}
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	3710      	adds	r7, #16
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	bd80      	pop	{r7, pc}

0800d5b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d5b8:	b480      	push	{r7}
 800d5ba:	b085      	sub	sp, #20
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
 800d5c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	60fb      	str	r3, [r7, #12]
 800d5c6:	e014      	b.n	800d5f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d5c8:	4a0e      	ldr	r2, [pc, #56]	@ (800d604 <vQueueAddToRegistry+0x4c>)
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d10b      	bne.n	800d5ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d5d4:	490b      	ldr	r1, [pc, #44]	@ (800d604 <vQueueAddToRegistry+0x4c>)
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	683a      	ldr	r2, [r7, #0]
 800d5da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d5de:	4a09      	ldr	r2, [pc, #36]	@ (800d604 <vQueueAddToRegistry+0x4c>)
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	00db      	lsls	r3, r3, #3
 800d5e4:	4413      	add	r3, r2
 800d5e6:	687a      	ldr	r2, [r7, #4]
 800d5e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d5ea:	e006      	b.n	800d5fa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	3301      	adds	r3, #1
 800d5f0:	60fb      	str	r3, [r7, #12]
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d0e7      	beq.n	800d5c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d5f8:	bf00      	nop
 800d5fa:	bf00      	nop
 800d5fc:	3714      	adds	r7, #20
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bc80      	pop	{r7}
 800d602:	4770      	bx	lr
 800d604:	20003a70 	.word	0x20003a70

0800d608 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b086      	sub	sp, #24
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	60f8      	str	r0, [r7, #12]
 800d610:	60b9      	str	r1, [r7, #8]
 800d612:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d618:	f7ff fa30 	bl	800ca7c <vPortEnterCritical>
 800d61c:	697b      	ldr	r3, [r7, #20]
 800d61e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d622:	b25b      	sxtb	r3, r3
 800d624:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d628:	d103      	bne.n	800d632 <vQueueWaitForMessageRestricted+0x2a>
 800d62a:	697b      	ldr	r3, [r7, #20]
 800d62c:	2200      	movs	r2, #0
 800d62e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d632:	697b      	ldr	r3, [r7, #20]
 800d634:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d638:	b25b      	sxtb	r3, r3
 800d63a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d63e:	d103      	bne.n	800d648 <vQueueWaitForMessageRestricted+0x40>
 800d640:	697b      	ldr	r3, [r7, #20]
 800d642:	2200      	movs	r2, #0
 800d644:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d648:	f7ff fa48 	bl	800cadc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d64c:	697b      	ldr	r3, [r7, #20]
 800d64e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d650:	2b00      	cmp	r3, #0
 800d652:	d106      	bne.n	800d662 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d654:	697b      	ldr	r3, [r7, #20]
 800d656:	3324      	adds	r3, #36	@ 0x24
 800d658:	687a      	ldr	r2, [r7, #4]
 800d65a:	68b9      	ldr	r1, [r7, #8]
 800d65c:	4618      	mov	r0, r3
 800d65e:	f000 fe8d 	bl	800e37c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d662:	6978      	ldr	r0, [r7, #20]
 800d664:	f7ff ff28 	bl	800d4b8 <prvUnlockQueue>
	}
 800d668:	bf00      	nop
 800d66a:	3718      	adds	r7, #24
 800d66c:	46bd      	mov	sp, r7
 800d66e:	bd80      	pop	{r7, pc}

0800d670 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d670:	b580      	push	{r7, lr}
 800d672:	b08e      	sub	sp, #56	@ 0x38
 800d674:	af04      	add	r7, sp, #16
 800d676:	60f8      	str	r0, [r7, #12]
 800d678:	60b9      	str	r1, [r7, #8]
 800d67a:	607a      	str	r2, [r7, #4]
 800d67c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d67e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d680:	2b00      	cmp	r3, #0
 800d682:	d10b      	bne.n	800d69c <xTaskCreateStatic+0x2c>
	__asm volatile
 800d684:	f04f 0310 	mov.w	r3, #16
 800d688:	f383 8811 	msr	BASEPRI, r3
 800d68c:	f3bf 8f6f 	isb	sy
 800d690:	f3bf 8f4f 	dsb	sy
 800d694:	623b      	str	r3, [r7, #32]
}
 800d696:	bf00      	nop
 800d698:	bf00      	nop
 800d69a:	e7fd      	b.n	800d698 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d69c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d10b      	bne.n	800d6ba <xTaskCreateStatic+0x4a>
	__asm volatile
 800d6a2:	f04f 0310 	mov.w	r3, #16
 800d6a6:	f383 8811 	msr	BASEPRI, r3
 800d6aa:	f3bf 8f6f 	isb	sy
 800d6ae:	f3bf 8f4f 	dsb	sy
 800d6b2:	61fb      	str	r3, [r7, #28]
}
 800d6b4:	bf00      	nop
 800d6b6:	bf00      	nop
 800d6b8:	e7fd      	b.n	800d6b6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d6ba:	23b4      	movs	r3, #180	@ 0xb4
 800d6bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d6be:	693b      	ldr	r3, [r7, #16]
 800d6c0:	2bb4      	cmp	r3, #180	@ 0xb4
 800d6c2:	d00b      	beq.n	800d6dc <xTaskCreateStatic+0x6c>
	__asm volatile
 800d6c4:	f04f 0310 	mov.w	r3, #16
 800d6c8:	f383 8811 	msr	BASEPRI, r3
 800d6cc:	f3bf 8f6f 	isb	sy
 800d6d0:	f3bf 8f4f 	dsb	sy
 800d6d4:	61bb      	str	r3, [r7, #24]
}
 800d6d6:	bf00      	nop
 800d6d8:	bf00      	nop
 800d6da:	e7fd      	b.n	800d6d8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d6dc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d6de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d01e      	beq.n	800d722 <xTaskCreateStatic+0xb2>
 800d6e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d01b      	beq.n	800d722 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d6ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6ec:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d6ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d6f2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d6f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6f6:	2202      	movs	r2, #2
 800d6f8:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	9303      	str	r3, [sp, #12]
 800d700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d702:	9302      	str	r3, [sp, #8]
 800d704:	f107 0314 	add.w	r3, r7, #20
 800d708:	9301      	str	r3, [sp, #4]
 800d70a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d70c:	9300      	str	r3, [sp, #0]
 800d70e:	683b      	ldr	r3, [r7, #0]
 800d710:	687a      	ldr	r2, [r7, #4]
 800d712:	68b9      	ldr	r1, [r7, #8]
 800d714:	68f8      	ldr	r0, [r7, #12]
 800d716:	f000 f851 	bl	800d7bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d71a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d71c:	f000 f902 	bl	800d924 <prvAddNewTaskToReadyList>
 800d720:	e001      	b.n	800d726 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d722:	2300      	movs	r3, #0
 800d724:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d726:	697b      	ldr	r3, [r7, #20]
	}
 800d728:	4618      	mov	r0, r3
 800d72a:	3728      	adds	r7, #40	@ 0x28
 800d72c:	46bd      	mov	sp, r7
 800d72e:	bd80      	pop	{r7, pc}

0800d730 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d730:	b580      	push	{r7, lr}
 800d732:	b08c      	sub	sp, #48	@ 0x30
 800d734:	af04      	add	r7, sp, #16
 800d736:	60f8      	str	r0, [r7, #12]
 800d738:	60b9      	str	r1, [r7, #8]
 800d73a:	603b      	str	r3, [r7, #0]
 800d73c:	4613      	mov	r3, r2
 800d73e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d740:	88fb      	ldrh	r3, [r7, #6]
 800d742:	009b      	lsls	r3, r3, #2
 800d744:	4618      	mov	r0, r3
 800d746:	f7fe fe05 	bl	800c354 <pvPortMalloc>
 800d74a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d74c:	697b      	ldr	r3, [r7, #20]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d00e      	beq.n	800d770 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d752:	20b4      	movs	r0, #180	@ 0xb4
 800d754:	f7fe fdfe 	bl	800c354 <pvPortMalloc>
 800d758:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d75a:	69fb      	ldr	r3, [r7, #28]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d003      	beq.n	800d768 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d760:	69fb      	ldr	r3, [r7, #28]
 800d762:	697a      	ldr	r2, [r7, #20]
 800d764:	631a      	str	r2, [r3, #48]	@ 0x30
 800d766:	e005      	b.n	800d774 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d768:	6978      	ldr	r0, [r7, #20]
 800d76a:	f7fe fec7 	bl	800c4fc <vPortFree>
 800d76e:	e001      	b.n	800d774 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d770:	2300      	movs	r3, #0
 800d772:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d774:	69fb      	ldr	r3, [r7, #28]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d017      	beq.n	800d7aa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d77a:	69fb      	ldr	r3, [r7, #28]
 800d77c:	2200      	movs	r2, #0
 800d77e:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d782:	88fa      	ldrh	r2, [r7, #6]
 800d784:	2300      	movs	r3, #0
 800d786:	9303      	str	r3, [sp, #12]
 800d788:	69fb      	ldr	r3, [r7, #28]
 800d78a:	9302      	str	r3, [sp, #8]
 800d78c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d78e:	9301      	str	r3, [sp, #4]
 800d790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d792:	9300      	str	r3, [sp, #0]
 800d794:	683b      	ldr	r3, [r7, #0]
 800d796:	68b9      	ldr	r1, [r7, #8]
 800d798:	68f8      	ldr	r0, [r7, #12]
 800d79a:	f000 f80f 	bl	800d7bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d79e:	69f8      	ldr	r0, [r7, #28]
 800d7a0:	f000 f8c0 	bl	800d924 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d7a4:	2301      	movs	r3, #1
 800d7a6:	61bb      	str	r3, [r7, #24]
 800d7a8:	e002      	b.n	800d7b0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d7aa:	f04f 33ff 	mov.w	r3, #4294967295
 800d7ae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d7b0:	69bb      	ldr	r3, [r7, #24]
	}
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	3720      	adds	r7, #32
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd80      	pop	{r7, pc}
	...

0800d7bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b088      	sub	sp, #32
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	60f8      	str	r0, [r7, #12]
 800d7c4:	60b9      	str	r1, [r7, #8]
 800d7c6:	607a      	str	r2, [r7, #4]
 800d7c8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d7ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7cc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	009b      	lsls	r3, r3, #2
 800d7d2:	461a      	mov	r2, r3
 800d7d4:	21a5      	movs	r1, #165	@ 0xa5
 800d7d6:	f001 fdb3 	bl	800f340 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d7da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d7e4:	3b01      	subs	r3, #1
 800d7e6:	009b      	lsls	r3, r3, #2
 800d7e8:	4413      	add	r3, r2
 800d7ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d7ec:	69bb      	ldr	r3, [r7, #24]
 800d7ee:	f023 0307 	bic.w	r3, r3, #7
 800d7f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d7f4:	69bb      	ldr	r3, [r7, #24]
 800d7f6:	f003 0307 	and.w	r3, r3, #7
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d00b      	beq.n	800d816 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800d7fe:	f04f 0310 	mov.w	r3, #16
 800d802:	f383 8811 	msr	BASEPRI, r3
 800d806:	f3bf 8f6f 	isb	sy
 800d80a:	f3bf 8f4f 	dsb	sy
 800d80e:	617b      	str	r3, [r7, #20]
}
 800d810:	bf00      	nop
 800d812:	bf00      	nop
 800d814:	e7fd      	b.n	800d812 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800d816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d818:	69ba      	ldr	r2, [r7, #24]
 800d81a:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d81c:	68bb      	ldr	r3, [r7, #8]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d01f      	beq.n	800d862 <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d822:	2300      	movs	r3, #0
 800d824:	61fb      	str	r3, [r7, #28]
 800d826:	e012      	b.n	800d84e <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d828:	68ba      	ldr	r2, [r7, #8]
 800d82a:	69fb      	ldr	r3, [r7, #28]
 800d82c:	4413      	add	r3, r2
 800d82e:	7819      	ldrb	r1, [r3, #0]
 800d830:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d832:	69fb      	ldr	r3, [r7, #28]
 800d834:	4413      	add	r3, r2
 800d836:	3334      	adds	r3, #52	@ 0x34
 800d838:	460a      	mov	r2, r1
 800d83a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d83c:	68ba      	ldr	r2, [r7, #8]
 800d83e:	69fb      	ldr	r3, [r7, #28]
 800d840:	4413      	add	r3, r2
 800d842:	781b      	ldrb	r3, [r3, #0]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d006      	beq.n	800d856 <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d848:	69fb      	ldr	r3, [r7, #28]
 800d84a:	3301      	adds	r3, #1
 800d84c:	61fb      	str	r3, [r7, #28]
 800d84e:	69fb      	ldr	r3, [r7, #28]
 800d850:	2b0f      	cmp	r3, #15
 800d852:	d9e9      	bls.n	800d828 <prvInitialiseNewTask+0x6c>
 800d854:	e000      	b.n	800d858 <prvInitialiseNewTask+0x9c>
			{
				break;
 800d856:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d85a:	2200      	movs	r2, #0
 800d85c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d860:	e003      	b.n	800d86a <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d864:	2200      	movs	r2, #0
 800d866:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d86a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d86c:	2b37      	cmp	r3, #55	@ 0x37
 800d86e:	d901      	bls.n	800d874 <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d870:	2337      	movs	r3, #55	@ 0x37
 800d872:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d876:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d878:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d87a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d87c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d87e:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800d880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d882:	2200      	movs	r2, #0
 800d884:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d888:	3304      	adds	r3, #4
 800d88a:	4618      	mov	r0, r3
 800d88c:	f7fe ff73 	bl	800c776 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d892:	3318      	adds	r3, #24
 800d894:	4618      	mov	r0, r3
 800d896:	f7fe ff6e 	bl	800c776 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d89a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d89c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d89e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d8a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8a2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d8a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d8aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d8ae:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800d8b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	659a      	str	r2, [r3, #88]	@ 0x58
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800d8b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	65da      	str	r2, [r3, #92]	@ 0x5c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d8bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8be:	2200      	movs	r2, #0
 800d8c0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d8c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d8cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8ce:	3360      	adds	r3, #96	@ 0x60
 800d8d0:	224c      	movs	r2, #76	@ 0x4c
 800d8d2:	2100      	movs	r1, #0
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	f001 fd33 	bl	800f340 <memset>
 800d8da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8dc:	4a0e      	ldr	r2, [pc, #56]	@ (800d918 <prvInitialiseNewTask+0x15c>)
 800d8de:	665a      	str	r2, [r3, #100]	@ 0x64
 800d8e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8e2:	4a0e      	ldr	r2, [pc, #56]	@ (800d91c <prvInitialiseNewTask+0x160>)
 800d8e4:	669a      	str	r2, [r3, #104]	@ 0x68
 800d8e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8e8:	4a0d      	ldr	r2, [pc, #52]	@ (800d920 <prvInitialiseNewTask+0x164>)
 800d8ea:	66da      	str	r2, [r3, #108]	@ 0x6c
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 800d8ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8ee:	2200      	movs	r2, #0
 800d8f0:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d8f4:	683a      	ldr	r2, [r7, #0]
 800d8f6:	68f9      	ldr	r1, [r7, #12]
 800d8f8:	69b8      	ldr	r0, [r7, #24]
 800d8fa:	f7fe ffcd 	bl	800c898 <pxPortInitialiseStack>
 800d8fe:	4602      	mov	r2, r0
 800d900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d902:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d906:	2b00      	cmp	r3, #0
 800d908:	d002      	beq.n	800d910 <prvInitialiseNewTask+0x154>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d90a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d90c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d90e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d910:	bf00      	nop
 800d912:	3720      	adds	r7, #32
 800d914:	46bd      	mov	sp, r7
 800d916:	bd80      	pop	{r7, pc}
 800d918:	20004020 	.word	0x20004020
 800d91c:	20004088 	.word	0x20004088
 800d920:	200040f0 	.word	0x200040f0

0800d924 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d924:	b580      	push	{r7, lr}
 800d926:	b082      	sub	sp, #8
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d92c:	f7ff f8a6 	bl	800ca7c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d930:	4b2d      	ldr	r3, [pc, #180]	@ (800d9e8 <prvAddNewTaskToReadyList+0xc4>)
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	3301      	adds	r3, #1
 800d936:	4a2c      	ldr	r2, [pc, #176]	@ (800d9e8 <prvAddNewTaskToReadyList+0xc4>)
 800d938:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d93a:	4b2c      	ldr	r3, [pc, #176]	@ (800d9ec <prvAddNewTaskToReadyList+0xc8>)
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d109      	bne.n	800d956 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d942:	4a2a      	ldr	r2, [pc, #168]	@ (800d9ec <prvAddNewTaskToReadyList+0xc8>)
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d948:	4b27      	ldr	r3, [pc, #156]	@ (800d9e8 <prvAddNewTaskToReadyList+0xc4>)
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	2b01      	cmp	r3, #1
 800d94e:	d110      	bne.n	800d972 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d950:	f000 fe54 	bl	800e5fc <prvInitialiseTaskLists>
 800d954:	e00d      	b.n	800d972 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d956:	4b26      	ldr	r3, [pc, #152]	@ (800d9f0 <prvAddNewTaskToReadyList+0xcc>)
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d109      	bne.n	800d972 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d95e:	4b23      	ldr	r3, [pc, #140]	@ (800d9ec <prvAddNewTaskToReadyList+0xc8>)
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d968:	429a      	cmp	r2, r3
 800d96a:	d802      	bhi.n	800d972 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d96c:	4a1f      	ldr	r2, [pc, #124]	@ (800d9ec <prvAddNewTaskToReadyList+0xc8>)
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d972:	4b20      	ldr	r3, [pc, #128]	@ (800d9f4 <prvAddNewTaskToReadyList+0xd0>)
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	3301      	adds	r3, #1
 800d978:	4a1e      	ldr	r2, [pc, #120]	@ (800d9f4 <prvAddNewTaskToReadyList+0xd0>)
 800d97a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d97c:	4b1d      	ldr	r3, [pc, #116]	@ (800d9f4 <prvAddNewTaskToReadyList+0xd0>)
 800d97e:	681a      	ldr	r2, [r3, #0]
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	649a      	str	r2, [r3, #72]	@ 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d988:	4b1b      	ldr	r3, [pc, #108]	@ (800d9f8 <prvAddNewTaskToReadyList+0xd4>)
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	429a      	cmp	r2, r3
 800d98e:	d903      	bls.n	800d998 <prvAddNewTaskToReadyList+0x74>
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d994:	4a18      	ldr	r2, [pc, #96]	@ (800d9f8 <prvAddNewTaskToReadyList+0xd4>)
 800d996:	6013      	str	r3, [r2, #0]
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d99c:	4613      	mov	r3, r2
 800d99e:	009b      	lsls	r3, r3, #2
 800d9a0:	4413      	add	r3, r2
 800d9a2:	009b      	lsls	r3, r3, #2
 800d9a4:	4a15      	ldr	r2, [pc, #84]	@ (800d9fc <prvAddNewTaskToReadyList+0xd8>)
 800d9a6:	441a      	add	r2, r3
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	3304      	adds	r3, #4
 800d9ac:	4619      	mov	r1, r3
 800d9ae:	4610      	mov	r0, r2
 800d9b0:	f7fe feed 	bl	800c78e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d9b4:	f7ff f892 	bl	800cadc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d9b8:	4b0d      	ldr	r3, [pc, #52]	@ (800d9f0 <prvAddNewTaskToReadyList+0xcc>)
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d00e      	beq.n	800d9de <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d9c0:	4b0a      	ldr	r3, [pc, #40]	@ (800d9ec <prvAddNewTaskToReadyList+0xc8>)
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9ca:	429a      	cmp	r2, r3
 800d9cc:	d207      	bcs.n	800d9de <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d9ce:	4b0c      	ldr	r3, [pc, #48]	@ (800da00 <prvAddNewTaskToReadyList+0xdc>)
 800d9d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d9d4:	601a      	str	r2, [r3, #0]
 800d9d6:	f3bf 8f4f 	dsb	sy
 800d9da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d9de:	bf00      	nop
 800d9e0:	3708      	adds	r7, #8
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	bd80      	pop	{r7, pc}
 800d9e6:	bf00      	nop
 800d9e8:	20003f4c 	.word	0x20003f4c
 800d9ec:	20003a78 	.word	0x20003a78
 800d9f0:	20003f58 	.word	0x20003f58
 800d9f4:	20003f68 	.word	0x20003f68
 800d9f8:	20003f54 	.word	0x20003f54
 800d9fc:	20003a7c 	.word	0x20003a7c
 800da00:	e000ed04 	.word	0xe000ed04

0800da04 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800da04:	b580      	push	{r7, lr}
 800da06:	b088      	sub	sp, #32
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800da10:	69bb      	ldr	r3, [r7, #24]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d10b      	bne.n	800da2e <eTaskGetState+0x2a>
	__asm volatile
 800da16:	f04f 0310 	mov.w	r3, #16
 800da1a:	f383 8811 	msr	BASEPRI, r3
 800da1e:	f3bf 8f6f 	isb	sy
 800da22:	f3bf 8f4f 	dsb	sy
 800da26:	60bb      	str	r3, [r7, #8]
}
 800da28:	bf00      	nop
 800da2a:	bf00      	nop
 800da2c:	e7fd      	b.n	800da2a <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800da2e:	4b24      	ldr	r3, [pc, #144]	@ (800dac0 <eTaskGetState+0xbc>)
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	69ba      	ldr	r2, [r7, #24]
 800da34:	429a      	cmp	r2, r3
 800da36:	d102      	bne.n	800da3e <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800da38:	2300      	movs	r3, #0
 800da3a:	77fb      	strb	r3, [r7, #31]
 800da3c:	e03a      	b.n	800dab4 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 800da3e:	f7ff f81d 	bl	800ca7c <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800da42:	69bb      	ldr	r3, [r7, #24]
 800da44:	695b      	ldr	r3, [r3, #20]
 800da46:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800da48:	4b1e      	ldr	r3, [pc, #120]	@ (800dac4 <eTaskGetState+0xc0>)
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800da4e:	4b1e      	ldr	r3, [pc, #120]	@ (800dac8 <eTaskGetState+0xc4>)
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800da54:	f7ff f842 	bl	800cadc <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800da58:	697a      	ldr	r2, [r7, #20]
 800da5a:	693b      	ldr	r3, [r7, #16]
 800da5c:	429a      	cmp	r2, r3
 800da5e:	d003      	beq.n	800da68 <eTaskGetState+0x64>
 800da60:	697a      	ldr	r2, [r7, #20]
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	429a      	cmp	r2, r3
 800da66:	d102      	bne.n	800da6e <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800da68:	2302      	movs	r3, #2
 800da6a:	77fb      	strb	r3, [r7, #31]
 800da6c:	e022      	b.n	800dab4 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800da6e:	697b      	ldr	r3, [r7, #20]
 800da70:	4a16      	ldr	r2, [pc, #88]	@ (800dacc <eTaskGetState+0xc8>)
 800da72:	4293      	cmp	r3, r2
 800da74:	d112      	bne.n	800da9c <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800da76:	69bb      	ldr	r3, [r7, #24]
 800da78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d10b      	bne.n	800da96 <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800da7e:	69bb      	ldr	r3, [r7, #24]
 800da80:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 800da84:	b2db      	uxtb	r3, r3
 800da86:	2b01      	cmp	r3, #1
 800da88:	d102      	bne.n	800da90 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 800da8a:	2302      	movs	r3, #2
 800da8c:	77fb      	strb	r3, [r7, #31]
 800da8e:	e011      	b.n	800dab4 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 800da90:	2303      	movs	r3, #3
 800da92:	77fb      	strb	r3, [r7, #31]
 800da94:	e00e      	b.n	800dab4 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800da96:	2302      	movs	r3, #2
 800da98:	77fb      	strb	r3, [r7, #31]
 800da9a:	e00b      	b.n	800dab4 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800da9c:	697b      	ldr	r3, [r7, #20]
 800da9e:	4a0c      	ldr	r2, [pc, #48]	@ (800dad0 <eTaskGetState+0xcc>)
 800daa0:	4293      	cmp	r3, r2
 800daa2:	d002      	beq.n	800daaa <eTaskGetState+0xa6>
 800daa4:	697b      	ldr	r3, [r7, #20]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d102      	bne.n	800dab0 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800daaa:	2304      	movs	r3, #4
 800daac:	77fb      	strb	r3, [r7, #31]
 800daae:	e001      	b.n	800dab4 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800dab0:	2301      	movs	r3, #1
 800dab2:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800dab4:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800dab6:	4618      	mov	r0, r3
 800dab8:	3720      	adds	r7, #32
 800daba:	46bd      	mov	sp, r7
 800dabc:	bd80      	pop	{r7, pc}
 800dabe:	bf00      	nop
 800dac0:	20003a78 	.word	0x20003a78
 800dac4:	20003f04 	.word	0x20003f04
 800dac8:	20003f08 	.word	0x20003f08
 800dacc:	20003f38 	.word	0x20003f38
 800dad0:	20003f20 	.word	0x20003f20

0800dad4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b084      	sub	sp, #16
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800dadc:	f7fe ffce 	bl	800ca7c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d102      	bne.n	800daec <vTaskSuspend+0x18>
 800dae6:	4b30      	ldr	r3, [pc, #192]	@ (800dba8 <vTaskSuspend+0xd4>)
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	e000      	b.n	800daee <vTaskSuspend+0x1a>
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	3304      	adds	r3, #4
 800daf4:	4618      	mov	r0, r3
 800daf6:	f7fe fea5 	bl	800c844 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d004      	beq.n	800db0c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	3318      	adds	r3, #24
 800db06:	4618      	mov	r0, r3
 800db08:	f7fe fe9c 	bl	800c844 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	3304      	adds	r3, #4
 800db10:	4619      	mov	r1, r3
 800db12:	4826      	ldr	r0, [pc, #152]	@ (800dbac <vTaskSuspend+0xd8>)
 800db14:	f7fe fe3b 	bl	800c78e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 800db1e:	b2db      	uxtb	r3, r3
 800db20:	2b01      	cmp	r3, #1
 800db22:	d103      	bne.n	800db2c <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	2200      	movs	r2, #0
 800db28:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800db2c:	f7fe ffd6 	bl	800cadc <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800db30:	4b1f      	ldr	r3, [pc, #124]	@ (800dbb0 <vTaskSuspend+0xdc>)
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d005      	beq.n	800db44 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800db38:	f7fe ffa0 	bl	800ca7c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800db3c:	f000 fed4 	bl	800e8e8 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800db40:	f7fe ffcc 	bl	800cadc <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800db44:	4b18      	ldr	r3, [pc, #96]	@ (800dba8 <vTaskSuspend+0xd4>)
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	68fa      	ldr	r2, [r7, #12]
 800db4a:	429a      	cmp	r2, r3
 800db4c:	d128      	bne.n	800dba0 <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 800db4e:	4b18      	ldr	r3, [pc, #96]	@ (800dbb0 <vTaskSuspend+0xdc>)
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d018      	beq.n	800db88 <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800db56:	4b17      	ldr	r3, [pc, #92]	@ (800dbb4 <vTaskSuspend+0xe0>)
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d00b      	beq.n	800db76 <vTaskSuspend+0xa2>
	__asm volatile
 800db5e:	f04f 0310 	mov.w	r3, #16
 800db62:	f383 8811 	msr	BASEPRI, r3
 800db66:	f3bf 8f6f 	isb	sy
 800db6a:	f3bf 8f4f 	dsb	sy
 800db6e:	60bb      	str	r3, [r7, #8]
}
 800db70:	bf00      	nop
 800db72:	bf00      	nop
 800db74:	e7fd      	b.n	800db72 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800db76:	4b10      	ldr	r3, [pc, #64]	@ (800dbb8 <vTaskSuspend+0xe4>)
 800db78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db7c:	601a      	str	r2, [r3, #0]
 800db7e:	f3bf 8f4f 	dsb	sy
 800db82:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800db86:	e00b      	b.n	800dba0 <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800db88:	4b08      	ldr	r3, [pc, #32]	@ (800dbac <vTaskSuspend+0xd8>)
 800db8a:	681a      	ldr	r2, [r3, #0]
 800db8c:	4b0b      	ldr	r3, [pc, #44]	@ (800dbbc <vTaskSuspend+0xe8>)
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	429a      	cmp	r2, r3
 800db92:	d103      	bne.n	800db9c <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 800db94:	4b04      	ldr	r3, [pc, #16]	@ (800dba8 <vTaskSuspend+0xd4>)
 800db96:	2200      	movs	r2, #0
 800db98:	601a      	str	r2, [r3, #0]
	}
 800db9a:	e001      	b.n	800dba0 <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 800db9c:	f000 fb20 	bl	800e1e0 <vTaskSwitchContext>
	}
 800dba0:	bf00      	nop
 800dba2:	3710      	adds	r7, #16
 800dba4:	46bd      	mov	sp, r7
 800dba6:	bd80      	pop	{r7, pc}
 800dba8:	20003a78 	.word	0x20003a78
 800dbac:	20003f38 	.word	0x20003f38
 800dbb0:	20003f58 	.word	0x20003f58
 800dbb4:	20003f74 	.word	0x20003f74
 800dbb8:	e000ed04 	.word	0xe000ed04
 800dbbc:	20003f4c 	.word	0x20003f4c

0800dbc0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800dbc0:	b480      	push	{r7}
 800dbc2:	b087      	sub	sp, #28
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800dbc8:	2300      	movs	r3, #0
 800dbca:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d10b      	bne.n	800dbee <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 800dbd6:	f04f 0310 	mov.w	r3, #16
 800dbda:	f383 8811 	msr	BASEPRI, r3
 800dbde:	f3bf 8f6f 	isb	sy
 800dbe2:	f3bf 8f4f 	dsb	sy
 800dbe6:	60fb      	str	r3, [r7, #12]
}
 800dbe8:	bf00      	nop
 800dbea:	bf00      	nop
 800dbec:	e7fd      	b.n	800dbea <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dbee:	693b      	ldr	r3, [r7, #16]
 800dbf0:	695b      	ldr	r3, [r3, #20]
 800dbf2:	4a0a      	ldr	r2, [pc, #40]	@ (800dc1c <prvTaskIsTaskSuspended+0x5c>)
 800dbf4:	4293      	cmp	r3, r2
 800dbf6:	d10a      	bne.n	800dc0e <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800dbf8:	693b      	ldr	r3, [r7, #16]
 800dbfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbfc:	4a08      	ldr	r2, [pc, #32]	@ (800dc20 <prvTaskIsTaskSuspended+0x60>)
 800dbfe:	4293      	cmp	r3, r2
 800dc00:	d005      	beq.n	800dc0e <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800dc02:	693b      	ldr	r3, [r7, #16]
 800dc04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d101      	bne.n	800dc0e <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 800dc0a:	2301      	movs	r3, #1
 800dc0c:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dc0e:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800dc10:	4618      	mov	r0, r3
 800dc12:	371c      	adds	r7, #28
 800dc14:	46bd      	mov	sp, r7
 800dc16:	bc80      	pop	{r7}
 800dc18:	4770      	bx	lr
 800dc1a:	bf00      	nop
 800dc1c:	20003f38 	.word	0x20003f38
 800dc20:	20003f0c 	.word	0x20003f0c

0800dc24 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b084      	sub	sp, #16
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d10b      	bne.n	800dc4e <vTaskResume+0x2a>
	__asm volatile
 800dc36:	f04f 0310 	mov.w	r3, #16
 800dc3a:	f383 8811 	msr	BASEPRI, r3
 800dc3e:	f3bf 8f6f 	isb	sy
 800dc42:	f3bf 8f4f 	dsb	sy
 800dc46:	60bb      	str	r3, [r7, #8]
}
 800dc48:	bf00      	nop
 800dc4a:	bf00      	nop
 800dc4c:	e7fd      	b.n	800dc4a <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800dc4e:	4b21      	ldr	r3, [pc, #132]	@ (800dcd4 <vTaskResume+0xb0>)
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	68fa      	ldr	r2, [r7, #12]
 800dc54:	429a      	cmp	r2, r3
 800dc56:	d038      	beq.n	800dcca <vTaskResume+0xa6>
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d035      	beq.n	800dcca <vTaskResume+0xa6>
		{
			taskENTER_CRITICAL();
 800dc5e:	f7fe ff0d 	bl	800ca7c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800dc62:	68f8      	ldr	r0, [r7, #12]
 800dc64:	f7ff ffac 	bl	800dbc0 <prvTaskIsTaskSuspended>
 800dc68:	4603      	mov	r3, r0
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d02b      	beq.n	800dcc6 <vTaskResume+0xa2>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	3304      	adds	r3, #4
 800dc72:	4618      	mov	r0, r3
 800dc74:	f7fe fde6 	bl	800c844 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc7c:	4b16      	ldr	r3, [pc, #88]	@ (800dcd8 <vTaskResume+0xb4>)
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	429a      	cmp	r2, r3
 800dc82:	d903      	bls.n	800dc8c <vTaskResume+0x68>
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc88:	4a13      	ldr	r2, [pc, #76]	@ (800dcd8 <vTaskResume+0xb4>)
 800dc8a:	6013      	str	r3, [r2, #0]
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc90:	4613      	mov	r3, r2
 800dc92:	009b      	lsls	r3, r3, #2
 800dc94:	4413      	add	r3, r2
 800dc96:	009b      	lsls	r3, r3, #2
 800dc98:	4a10      	ldr	r2, [pc, #64]	@ (800dcdc <vTaskResume+0xb8>)
 800dc9a:	441a      	add	r2, r3
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	3304      	adds	r3, #4
 800dca0:	4619      	mov	r1, r3
 800dca2:	4610      	mov	r0, r2
 800dca4:	f7fe fd73 	bl	800c78e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dcac:	4b09      	ldr	r3, [pc, #36]	@ (800dcd4 <vTaskResume+0xb0>)
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcb2:	429a      	cmp	r2, r3
 800dcb4:	d307      	bcc.n	800dcc6 <vTaskResume+0xa2>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800dcb6:	4b0a      	ldr	r3, [pc, #40]	@ (800dce0 <vTaskResume+0xbc>)
 800dcb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dcbc:	601a      	str	r2, [r3, #0]
 800dcbe:	f3bf 8f4f 	dsb	sy
 800dcc2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800dcc6:	f7fe ff09 	bl	800cadc <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dcca:	bf00      	nop
 800dccc:	3710      	adds	r7, #16
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	bd80      	pop	{r7, pc}
 800dcd2:	bf00      	nop
 800dcd4:	20003a78 	.word	0x20003a78
 800dcd8:	20003f54 	.word	0x20003f54
 800dcdc:	20003a7c 	.word	0x20003a7c
 800dce0:	e000ed04 	.word	0xe000ed04

0800dce4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b08a      	sub	sp, #40	@ 0x28
 800dce8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dcea:	2300      	movs	r3, #0
 800dcec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dcee:	2300      	movs	r3, #0
 800dcf0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dcf2:	463a      	mov	r2, r7
 800dcf4:	1d39      	adds	r1, r7, #4
 800dcf6:	f107 0308 	add.w	r3, r7, #8
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	f7fe fafa 	bl	800c2f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dd00:	6839      	ldr	r1, [r7, #0]
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	68ba      	ldr	r2, [r7, #8]
 800dd06:	9202      	str	r2, [sp, #8]
 800dd08:	9301      	str	r3, [sp, #4]
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	9300      	str	r3, [sp, #0]
 800dd0e:	2300      	movs	r3, #0
 800dd10:	460a      	mov	r2, r1
 800dd12:	4925      	ldr	r1, [pc, #148]	@ (800dda8 <vTaskStartScheduler+0xc4>)
 800dd14:	4825      	ldr	r0, [pc, #148]	@ (800ddac <vTaskStartScheduler+0xc8>)
 800dd16:	f7ff fcab 	bl	800d670 <xTaskCreateStatic>
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	4a24      	ldr	r2, [pc, #144]	@ (800ddb0 <vTaskStartScheduler+0xcc>)
 800dd1e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dd20:	4b23      	ldr	r3, [pc, #140]	@ (800ddb0 <vTaskStartScheduler+0xcc>)
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d002      	beq.n	800dd2e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dd28:	2301      	movs	r3, #1
 800dd2a:	617b      	str	r3, [r7, #20]
 800dd2c:	e001      	b.n	800dd32 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dd2e:	2300      	movs	r3, #0
 800dd30:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800dd32:	697b      	ldr	r3, [r7, #20]
 800dd34:	2b01      	cmp	r3, #1
 800dd36:	d102      	bne.n	800dd3e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800dd38:	f000 fede 	bl	800eaf8 <xTimerCreateTimerTask>
 800dd3c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800dd3e:	697b      	ldr	r3, [r7, #20]
 800dd40:	2b01      	cmp	r3, #1
 800dd42:	d11d      	bne.n	800dd80 <vTaskStartScheduler+0x9c>
	__asm volatile
 800dd44:	f04f 0310 	mov.w	r3, #16
 800dd48:	f383 8811 	msr	BASEPRI, r3
 800dd4c:	f3bf 8f6f 	isb	sy
 800dd50:	f3bf 8f4f 	dsb	sy
 800dd54:	613b      	str	r3, [r7, #16]
}
 800dd56:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800dd58:	4b16      	ldr	r3, [pc, #88]	@ (800ddb4 <vTaskStartScheduler+0xd0>)
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	3360      	adds	r3, #96	@ 0x60
 800dd5e:	4a16      	ldr	r2, [pc, #88]	@ (800ddb8 <vTaskStartScheduler+0xd4>)
 800dd60:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dd62:	4b16      	ldr	r3, [pc, #88]	@ (800ddbc <vTaskStartScheduler+0xd8>)
 800dd64:	f04f 32ff 	mov.w	r2, #4294967295
 800dd68:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dd6a:	4b15      	ldr	r3, [pc, #84]	@ (800ddc0 <vTaskStartScheduler+0xdc>)
 800dd6c:	2201      	movs	r2, #1
 800dd6e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dd70:	4b14      	ldr	r3, [pc, #80]	@ (800ddc4 <vTaskStartScheduler+0xe0>)
 800dd72:	2200      	movs	r2, #0
 800dd74:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800dd76:	f7f9 fcb5 	bl	80076e4 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dd7a:	f7fe fe0d 	bl	800c998 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dd7e:	e00f      	b.n	800dda0 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dd80:	697b      	ldr	r3, [r7, #20]
 800dd82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd86:	d10b      	bne.n	800dda0 <vTaskStartScheduler+0xbc>
	__asm volatile
 800dd88:	f04f 0310 	mov.w	r3, #16
 800dd8c:	f383 8811 	msr	BASEPRI, r3
 800dd90:	f3bf 8f6f 	isb	sy
 800dd94:	f3bf 8f4f 	dsb	sy
 800dd98:	60fb      	str	r3, [r7, #12]
}
 800dd9a:	bf00      	nop
 800dd9c:	bf00      	nop
 800dd9e:	e7fd      	b.n	800dd9c <vTaskStartScheduler+0xb8>
}
 800dda0:	bf00      	nop
 800dda2:	3718      	adds	r7, #24
 800dda4:	46bd      	mov	sp, r7
 800dda6:	bd80      	pop	{r7, pc}
 800dda8:	0800f544 	.word	0x0800f544
 800ddac:	0800e5c9 	.word	0x0800e5c9
 800ddb0:	20003f70 	.word	0x20003f70
 800ddb4:	20003a78 	.word	0x20003a78
 800ddb8:	20000030 	.word	0x20000030
 800ddbc:	20003f6c 	.word	0x20003f6c
 800ddc0:	20003f58 	.word	0x20003f58
 800ddc4:	20003f50 	.word	0x20003f50

0800ddc8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ddc8:	b480      	push	{r7}
 800ddca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ddcc:	4b04      	ldr	r3, [pc, #16]	@ (800dde0 <vTaskSuspendAll+0x18>)
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	3301      	adds	r3, #1
 800ddd2:	4a03      	ldr	r2, [pc, #12]	@ (800dde0 <vTaskSuspendAll+0x18>)
 800ddd4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ddd6:	bf00      	nop
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	bc80      	pop	{r7}
 800dddc:	4770      	bx	lr
 800ddde:	bf00      	nop
 800dde0:	20003f74 	.word	0x20003f74

0800dde4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b084      	sub	sp, #16
 800dde8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ddea:	2300      	movs	r3, #0
 800ddec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ddee:	2300      	movs	r3, #0
 800ddf0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ddf2:	4b42      	ldr	r3, [pc, #264]	@ (800defc <xTaskResumeAll+0x118>)
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d10b      	bne.n	800de12 <xTaskResumeAll+0x2e>
	__asm volatile
 800ddfa:	f04f 0310 	mov.w	r3, #16
 800ddfe:	f383 8811 	msr	BASEPRI, r3
 800de02:	f3bf 8f6f 	isb	sy
 800de06:	f3bf 8f4f 	dsb	sy
 800de0a:	603b      	str	r3, [r7, #0]
}
 800de0c:	bf00      	nop
 800de0e:	bf00      	nop
 800de10:	e7fd      	b.n	800de0e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800de12:	f7fe fe33 	bl	800ca7c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800de16:	4b39      	ldr	r3, [pc, #228]	@ (800defc <xTaskResumeAll+0x118>)
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	3b01      	subs	r3, #1
 800de1c:	4a37      	ldr	r2, [pc, #220]	@ (800defc <xTaskResumeAll+0x118>)
 800de1e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de20:	4b36      	ldr	r3, [pc, #216]	@ (800defc <xTaskResumeAll+0x118>)
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d162      	bne.n	800deee <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800de28:	4b35      	ldr	r3, [pc, #212]	@ (800df00 <xTaskResumeAll+0x11c>)
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d05e      	beq.n	800deee <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800de30:	e02f      	b.n	800de92 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de32:	4b34      	ldr	r3, [pc, #208]	@ (800df04 <xTaskResumeAll+0x120>)
 800de34:	68db      	ldr	r3, [r3, #12]
 800de36:	68db      	ldr	r3, [r3, #12]
 800de38:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	3318      	adds	r3, #24
 800de3e:	4618      	mov	r0, r3
 800de40:	f7fe fd00 	bl	800c844 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	3304      	adds	r3, #4
 800de48:	4618      	mov	r0, r3
 800de4a:	f7fe fcfb 	bl	800c844 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de52:	4b2d      	ldr	r3, [pc, #180]	@ (800df08 <xTaskResumeAll+0x124>)
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	429a      	cmp	r2, r3
 800de58:	d903      	bls.n	800de62 <xTaskResumeAll+0x7e>
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de5e:	4a2a      	ldr	r2, [pc, #168]	@ (800df08 <xTaskResumeAll+0x124>)
 800de60:	6013      	str	r3, [r2, #0]
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de66:	4613      	mov	r3, r2
 800de68:	009b      	lsls	r3, r3, #2
 800de6a:	4413      	add	r3, r2
 800de6c:	009b      	lsls	r3, r3, #2
 800de6e:	4a27      	ldr	r2, [pc, #156]	@ (800df0c <xTaskResumeAll+0x128>)
 800de70:	441a      	add	r2, r3
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	3304      	adds	r3, #4
 800de76:	4619      	mov	r1, r3
 800de78:	4610      	mov	r0, r2
 800de7a:	f7fe fc88 	bl	800c78e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de82:	4b23      	ldr	r3, [pc, #140]	@ (800df10 <xTaskResumeAll+0x12c>)
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de88:	429a      	cmp	r2, r3
 800de8a:	d302      	bcc.n	800de92 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800de8c:	4b21      	ldr	r3, [pc, #132]	@ (800df14 <xTaskResumeAll+0x130>)
 800de8e:	2201      	movs	r2, #1
 800de90:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800de92:	4b1c      	ldr	r3, [pc, #112]	@ (800df04 <xTaskResumeAll+0x120>)
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d1cb      	bne.n	800de32 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d001      	beq.n	800dea4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dea0:	f000 fd22 	bl	800e8e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800dea4:	4b1c      	ldr	r3, [pc, #112]	@ (800df18 <xTaskResumeAll+0x134>)
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d010      	beq.n	800ded2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800deb0:	f000 f8d4 	bl	800e05c <xTaskIncrementTick>
 800deb4:	4603      	mov	r3, r0
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d002      	beq.n	800dec0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800deba:	4b16      	ldr	r3, [pc, #88]	@ (800df14 <xTaskResumeAll+0x130>)
 800debc:	2201      	movs	r2, #1
 800debe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	3b01      	subs	r3, #1
 800dec4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d1f1      	bne.n	800deb0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800decc:	4b12      	ldr	r3, [pc, #72]	@ (800df18 <xTaskResumeAll+0x134>)
 800dece:	2200      	movs	r2, #0
 800ded0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ded2:	4b10      	ldr	r3, [pc, #64]	@ (800df14 <xTaskResumeAll+0x130>)
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d009      	beq.n	800deee <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800deda:	2301      	movs	r3, #1
 800dedc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800dede:	4b0f      	ldr	r3, [pc, #60]	@ (800df1c <xTaskResumeAll+0x138>)
 800dee0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dee4:	601a      	str	r2, [r3, #0]
 800dee6:	f3bf 8f4f 	dsb	sy
 800deea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800deee:	f7fe fdf5 	bl	800cadc <vPortExitCritical>

	return xAlreadyYielded;
 800def2:	68bb      	ldr	r3, [r7, #8]
}
 800def4:	4618      	mov	r0, r3
 800def6:	3710      	adds	r7, #16
 800def8:	46bd      	mov	sp, r7
 800defa:	bd80      	pop	{r7, pc}
 800defc:	20003f74 	.word	0x20003f74
 800df00:	20003f4c 	.word	0x20003f4c
 800df04:	20003f0c 	.word	0x20003f0c
 800df08:	20003f54 	.word	0x20003f54
 800df0c:	20003a7c 	.word	0x20003a7c
 800df10:	20003a78 	.word	0x20003a78
 800df14:	20003f60 	.word	0x20003f60
 800df18:	20003f5c 	.word	0x20003f5c
 800df1c:	e000ed04 	.word	0xe000ed04

0800df20 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800df20:	b480      	push	{r7}
 800df22:	b083      	sub	sp, #12
 800df24:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800df26:	4b04      	ldr	r3, [pc, #16]	@ (800df38 <xTaskGetTickCount+0x18>)
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800df2c:	687b      	ldr	r3, [r7, #4]
}
 800df2e:	4618      	mov	r0, r3
 800df30:	370c      	adds	r7, #12
 800df32:	46bd      	mov	sp, r7
 800df34:	bc80      	pop	{r7}
 800df36:	4770      	bx	lr
 800df38:	20003f50 	.word	0x20003f50

0800df3c <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b086      	sub	sp, #24
 800df40:	af00      	add	r7, sp, #0
 800df42:	60f8      	str	r0, [r7, #12]
 800df44:	60b9      	str	r1, [r7, #8]
 800df46:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800df48:	2300      	movs	r3, #0
 800df4a:	617b      	str	r3, [r7, #20]
 800df4c:	2338      	movs	r3, #56	@ 0x38
 800df4e:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 800df50:	f7ff ff3a 	bl	800ddc8 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800df54:	4b3b      	ldr	r3, [pc, #236]	@ (800e044 <uxTaskGetSystemState+0x108>)
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	68ba      	ldr	r2, [r7, #8]
 800df5a:	429a      	cmp	r2, r3
 800df5c:	d36a      	bcc.n	800e034 <uxTaskGetSystemState+0xf8>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 800df5e:	693b      	ldr	r3, [r7, #16]
 800df60:	3b01      	subs	r3, #1
 800df62:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800df64:	697a      	ldr	r2, [r7, #20]
 800df66:	4613      	mov	r3, r2
 800df68:	00db      	lsls	r3, r3, #3
 800df6a:	4413      	add	r3, r2
 800df6c:	009b      	lsls	r3, r3, #2
 800df6e:	461a      	mov	r2, r3
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	1898      	adds	r0, r3, r2
 800df74:	693a      	ldr	r2, [r7, #16]
 800df76:	4613      	mov	r3, r2
 800df78:	009b      	lsls	r3, r3, #2
 800df7a:	4413      	add	r3, r2
 800df7c:	009b      	lsls	r3, r3, #2
 800df7e:	4a32      	ldr	r2, [pc, #200]	@ (800e048 <uxTaskGetSystemState+0x10c>)
 800df80:	4413      	add	r3, r2
 800df82:	2201      	movs	r2, #1
 800df84:	4619      	mov	r1, r3
 800df86:	f000 fc0d 	bl	800e7a4 <prvListTasksWithinSingleList>
 800df8a:	4602      	mov	r2, r0
 800df8c:	697b      	ldr	r3, [r7, #20]
 800df8e:	4413      	add	r3, r2
 800df90:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df92:	693b      	ldr	r3, [r7, #16]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d1e2      	bne.n	800df5e <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800df98:	697a      	ldr	r2, [r7, #20]
 800df9a:	4613      	mov	r3, r2
 800df9c:	00db      	lsls	r3, r3, #3
 800df9e:	4413      	add	r3, r2
 800dfa0:	009b      	lsls	r3, r3, #2
 800dfa2:	461a      	mov	r2, r3
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	4413      	add	r3, r2
 800dfa8:	4a28      	ldr	r2, [pc, #160]	@ (800e04c <uxTaskGetSystemState+0x110>)
 800dfaa:	6811      	ldr	r1, [r2, #0]
 800dfac:	2202      	movs	r2, #2
 800dfae:	4618      	mov	r0, r3
 800dfb0:	f000 fbf8 	bl	800e7a4 <prvListTasksWithinSingleList>
 800dfb4:	4602      	mov	r2, r0
 800dfb6:	697b      	ldr	r3, [r7, #20]
 800dfb8:	4413      	add	r3, r2
 800dfba:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800dfbc:	697a      	ldr	r2, [r7, #20]
 800dfbe:	4613      	mov	r3, r2
 800dfc0:	00db      	lsls	r3, r3, #3
 800dfc2:	4413      	add	r3, r2
 800dfc4:	009b      	lsls	r3, r3, #2
 800dfc6:	461a      	mov	r2, r3
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	4413      	add	r3, r2
 800dfcc:	4a20      	ldr	r2, [pc, #128]	@ (800e050 <uxTaskGetSystemState+0x114>)
 800dfce:	6811      	ldr	r1, [r2, #0]
 800dfd0:	2202      	movs	r2, #2
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	f000 fbe6 	bl	800e7a4 <prvListTasksWithinSingleList>
 800dfd8:	4602      	mov	r2, r0
 800dfda:	697b      	ldr	r3, [r7, #20]
 800dfdc:	4413      	add	r3, r2
 800dfde:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800dfe0:	697a      	ldr	r2, [r7, #20]
 800dfe2:	4613      	mov	r3, r2
 800dfe4:	00db      	lsls	r3, r3, #3
 800dfe6:	4413      	add	r3, r2
 800dfe8:	009b      	lsls	r3, r3, #2
 800dfea:	461a      	mov	r2, r3
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	4413      	add	r3, r2
 800dff0:	2204      	movs	r2, #4
 800dff2:	4918      	ldr	r1, [pc, #96]	@ (800e054 <uxTaskGetSystemState+0x118>)
 800dff4:	4618      	mov	r0, r3
 800dff6:	f000 fbd5 	bl	800e7a4 <prvListTasksWithinSingleList>
 800dffa:	4602      	mov	r2, r0
 800dffc:	697b      	ldr	r3, [r7, #20]
 800dffe:	4413      	add	r3, r2
 800e000:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800e002:	697a      	ldr	r2, [r7, #20]
 800e004:	4613      	mov	r3, r2
 800e006:	00db      	lsls	r3, r3, #3
 800e008:	4413      	add	r3, r2
 800e00a:	009b      	lsls	r3, r3, #2
 800e00c:	461a      	mov	r2, r3
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	4413      	add	r3, r2
 800e012:	2203      	movs	r2, #3
 800e014:	4910      	ldr	r1, [pc, #64]	@ (800e058 <uxTaskGetSystemState+0x11c>)
 800e016:	4618      	mov	r0, r3
 800e018:	f000 fbc4 	bl	800e7a4 <prvListTasksWithinSingleList>
 800e01c:	4602      	mov	r2, r0
 800e01e:	697b      	ldr	r3, [r7, #20]
 800e020:	4413      	add	r3, r2
 800e022:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d004      	beq.n	800e034 <uxTaskGetSystemState+0xf8>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800e02a:	f7f9 fb69 	bl	8007700 <getRunTimeCounterValue>
 800e02e:	4602      	mov	r2, r0
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 800e034:	f7ff fed6 	bl	800dde4 <xTaskResumeAll>

		return uxTask;
 800e038:	697b      	ldr	r3, [r7, #20]
	}
 800e03a:	4618      	mov	r0, r3
 800e03c:	3718      	adds	r7, #24
 800e03e:	46bd      	mov	sp, r7
 800e040:	bd80      	pop	{r7, pc}
 800e042:	bf00      	nop
 800e044:	20003f4c 	.word	0x20003f4c
 800e048:	20003a7c 	.word	0x20003a7c
 800e04c:	20003f04 	.word	0x20003f04
 800e050:	20003f08 	.word	0x20003f08
 800e054:	20003f20 	.word	0x20003f20
 800e058:	20003f38 	.word	0x20003f38

0800e05c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	b086      	sub	sp, #24
 800e060:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e062:	2300      	movs	r3, #0
 800e064:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e066:	4b53      	ldr	r3, [pc, #332]	@ (800e1b4 <xTaskIncrementTick+0x158>)
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	f040 8096 	bne.w	800e19c <xTaskIncrementTick+0x140>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e070:	4b51      	ldr	r3, [pc, #324]	@ (800e1b8 <xTaskIncrementTick+0x15c>)
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	3301      	adds	r3, #1
 800e076:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e078:	4a4f      	ldr	r2, [pc, #316]	@ (800e1b8 <xTaskIncrementTick+0x15c>)
 800e07a:	693b      	ldr	r3, [r7, #16]
 800e07c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e07e:	693b      	ldr	r3, [r7, #16]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d121      	bne.n	800e0c8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e084:	4b4d      	ldr	r3, [pc, #308]	@ (800e1bc <xTaskIncrementTick+0x160>)
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d00b      	beq.n	800e0a6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800e08e:	f04f 0310 	mov.w	r3, #16
 800e092:	f383 8811 	msr	BASEPRI, r3
 800e096:	f3bf 8f6f 	isb	sy
 800e09a:	f3bf 8f4f 	dsb	sy
 800e09e:	603b      	str	r3, [r7, #0]
}
 800e0a0:	bf00      	nop
 800e0a2:	bf00      	nop
 800e0a4:	e7fd      	b.n	800e0a2 <xTaskIncrementTick+0x46>
 800e0a6:	4b45      	ldr	r3, [pc, #276]	@ (800e1bc <xTaskIncrementTick+0x160>)
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	60fb      	str	r3, [r7, #12]
 800e0ac:	4b44      	ldr	r3, [pc, #272]	@ (800e1c0 <xTaskIncrementTick+0x164>)
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	4a42      	ldr	r2, [pc, #264]	@ (800e1bc <xTaskIncrementTick+0x160>)
 800e0b2:	6013      	str	r3, [r2, #0]
 800e0b4:	4a42      	ldr	r2, [pc, #264]	@ (800e1c0 <xTaskIncrementTick+0x164>)
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	6013      	str	r3, [r2, #0]
 800e0ba:	4b42      	ldr	r3, [pc, #264]	@ (800e1c4 <xTaskIncrementTick+0x168>)
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	3301      	adds	r3, #1
 800e0c0:	4a40      	ldr	r2, [pc, #256]	@ (800e1c4 <xTaskIncrementTick+0x168>)
 800e0c2:	6013      	str	r3, [r2, #0]
 800e0c4:	f000 fc10 	bl	800e8e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e0c8:	4b3f      	ldr	r3, [pc, #252]	@ (800e1c8 <xTaskIncrementTick+0x16c>)
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	693a      	ldr	r2, [r7, #16]
 800e0ce:	429a      	cmp	r2, r3
 800e0d0:	d349      	bcc.n	800e166 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e0d2:	4b3a      	ldr	r3, [pc, #232]	@ (800e1bc <xTaskIncrementTick+0x160>)
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d104      	bne.n	800e0e6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0dc:	4b3a      	ldr	r3, [pc, #232]	@ (800e1c8 <xTaskIncrementTick+0x16c>)
 800e0de:	f04f 32ff 	mov.w	r2, #4294967295
 800e0e2:	601a      	str	r2, [r3, #0]
					break;
 800e0e4:	e03f      	b.n	800e166 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0e6:	4b35      	ldr	r3, [pc, #212]	@ (800e1bc <xTaskIncrementTick+0x160>)
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	68db      	ldr	r3, [r3, #12]
 800e0ec:	68db      	ldr	r3, [r3, #12]
 800e0ee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e0f0:	68bb      	ldr	r3, [r7, #8]
 800e0f2:	685b      	ldr	r3, [r3, #4]
 800e0f4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e0f6:	693a      	ldr	r2, [r7, #16]
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	429a      	cmp	r2, r3
 800e0fc:	d203      	bcs.n	800e106 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e0fe:	4a32      	ldr	r2, [pc, #200]	@ (800e1c8 <xTaskIncrementTick+0x16c>)
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e104:	e02f      	b.n	800e166 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e106:	68bb      	ldr	r3, [r7, #8]
 800e108:	3304      	adds	r3, #4
 800e10a:	4618      	mov	r0, r3
 800e10c:	f7fe fb9a 	bl	800c844 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e110:	68bb      	ldr	r3, [r7, #8]
 800e112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e114:	2b00      	cmp	r3, #0
 800e116:	d004      	beq.n	800e122 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e118:	68bb      	ldr	r3, [r7, #8]
 800e11a:	3318      	adds	r3, #24
 800e11c:	4618      	mov	r0, r3
 800e11e:	f7fe fb91 	bl	800c844 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e122:	68bb      	ldr	r3, [r7, #8]
 800e124:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e126:	4b29      	ldr	r3, [pc, #164]	@ (800e1cc <xTaskIncrementTick+0x170>)
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	429a      	cmp	r2, r3
 800e12c:	d903      	bls.n	800e136 <xTaskIncrementTick+0xda>
 800e12e:	68bb      	ldr	r3, [r7, #8]
 800e130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e132:	4a26      	ldr	r2, [pc, #152]	@ (800e1cc <xTaskIncrementTick+0x170>)
 800e134:	6013      	str	r3, [r2, #0]
 800e136:	68bb      	ldr	r3, [r7, #8]
 800e138:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e13a:	4613      	mov	r3, r2
 800e13c:	009b      	lsls	r3, r3, #2
 800e13e:	4413      	add	r3, r2
 800e140:	009b      	lsls	r3, r3, #2
 800e142:	4a23      	ldr	r2, [pc, #140]	@ (800e1d0 <xTaskIncrementTick+0x174>)
 800e144:	441a      	add	r2, r3
 800e146:	68bb      	ldr	r3, [r7, #8]
 800e148:	3304      	adds	r3, #4
 800e14a:	4619      	mov	r1, r3
 800e14c:	4610      	mov	r0, r2
 800e14e:	f7fe fb1e 	bl	800c78e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e152:	68bb      	ldr	r3, [r7, #8]
 800e154:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e156:	4b1f      	ldr	r3, [pc, #124]	@ (800e1d4 <xTaskIncrementTick+0x178>)
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e15c:	429a      	cmp	r2, r3
 800e15e:	d3b8      	bcc.n	800e0d2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e160:	2301      	movs	r3, #1
 800e162:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e164:	e7b5      	b.n	800e0d2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e166:	4b1b      	ldr	r3, [pc, #108]	@ (800e1d4 <xTaskIncrementTick+0x178>)
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e16c:	4918      	ldr	r1, [pc, #96]	@ (800e1d0 <xTaskIncrementTick+0x174>)
 800e16e:	4613      	mov	r3, r2
 800e170:	009b      	lsls	r3, r3, #2
 800e172:	4413      	add	r3, r2
 800e174:	009b      	lsls	r3, r3, #2
 800e176:	440b      	add	r3, r1
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	2b01      	cmp	r3, #1
 800e17c:	d901      	bls.n	800e182 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800e17e:	2301      	movs	r3, #1
 800e180:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 800e182:	4b15      	ldr	r3, [pc, #84]	@ (800e1d8 <xTaskIncrementTick+0x17c>)
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d101      	bne.n	800e18e <xTaskIncrementTick+0x132>
			{
				vApplicationTickHook();
 800e18a:	f7f9 fae1 	bl	8007750 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e18e:	4b13      	ldr	r3, [pc, #76]	@ (800e1dc <xTaskIncrementTick+0x180>)
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d009      	beq.n	800e1aa <xTaskIncrementTick+0x14e>
			{
				xSwitchRequired = pdTRUE;
 800e196:	2301      	movs	r3, #1
 800e198:	617b      	str	r3, [r7, #20]
 800e19a:	e006      	b.n	800e1aa <xTaskIncrementTick+0x14e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e19c:	4b0e      	ldr	r3, [pc, #56]	@ (800e1d8 <xTaskIncrementTick+0x17c>)
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	3301      	adds	r3, #1
 800e1a2:	4a0d      	ldr	r2, [pc, #52]	@ (800e1d8 <xTaskIncrementTick+0x17c>)
 800e1a4:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 800e1a6:	f7f9 fad3 	bl	8007750 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 800e1aa:	697b      	ldr	r3, [r7, #20]
}
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	3718      	adds	r7, #24
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	bd80      	pop	{r7, pc}
 800e1b4:	20003f74 	.word	0x20003f74
 800e1b8:	20003f50 	.word	0x20003f50
 800e1bc:	20003f04 	.word	0x20003f04
 800e1c0:	20003f08 	.word	0x20003f08
 800e1c4:	20003f64 	.word	0x20003f64
 800e1c8:	20003f6c 	.word	0x20003f6c
 800e1cc:	20003f54 	.word	0x20003f54
 800e1d0:	20003a7c 	.word	0x20003a7c
 800e1d4:	20003a78 	.word	0x20003a78
 800e1d8:	20003f5c 	.word	0x20003f5c
 800e1dc:	20003f60 	.word	0x20003f60

0800e1e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b086      	sub	sp, #24
 800e1e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e1e6:	4b4a      	ldr	r3, [pc, #296]	@ (800e310 <vTaskSwitchContext+0x130>)
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d003      	beq.n	800e1f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e1ee:	4b49      	ldr	r3, [pc, #292]	@ (800e314 <vTaskSwitchContext+0x134>)
 800e1f0:	2201      	movs	r2, #1
 800e1f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e1f4:	e087      	b.n	800e306 <vTaskSwitchContext+0x126>
		xYieldPending = pdFALSE;
 800e1f6:	4b47      	ldr	r3, [pc, #284]	@ (800e314 <vTaskSwitchContext+0x134>)
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800e1fc:	f7f9 fa80 	bl	8007700 <getRunTimeCounterValue>
 800e200:	4603      	mov	r3, r0
 800e202:	4a45      	ldr	r2, [pc, #276]	@ (800e318 <vTaskSwitchContext+0x138>)
 800e204:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800e206:	4b44      	ldr	r3, [pc, #272]	@ (800e318 <vTaskSwitchContext+0x138>)
 800e208:	681a      	ldr	r2, [r3, #0]
 800e20a:	4b44      	ldr	r3, [pc, #272]	@ (800e31c <vTaskSwitchContext+0x13c>)
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	429a      	cmp	r2, r3
 800e210:	d909      	bls.n	800e226 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800e212:	4b43      	ldr	r3, [pc, #268]	@ (800e320 <vTaskSwitchContext+0x140>)
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800e218:	4a3f      	ldr	r2, [pc, #252]	@ (800e318 <vTaskSwitchContext+0x138>)
 800e21a:	6810      	ldr	r0, [r2, #0]
 800e21c:	4a3f      	ldr	r2, [pc, #252]	@ (800e31c <vTaskSwitchContext+0x13c>)
 800e21e:	6812      	ldr	r2, [r2, #0]
 800e220:	1a82      	subs	r2, r0, r2
 800e222:	440a      	add	r2, r1
 800e224:	65da      	str	r2, [r3, #92]	@ 0x5c
			ulTaskSwitchedInTime = ulTotalRunTime;
 800e226:	4b3c      	ldr	r3, [pc, #240]	@ (800e318 <vTaskSwitchContext+0x138>)
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	4a3c      	ldr	r2, [pc, #240]	@ (800e31c <vTaskSwitchContext+0x13c>)
 800e22c:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800e22e:	4b3c      	ldr	r3, [pc, #240]	@ (800e320 <vTaskSwitchContext+0x140>)
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e234:	613b      	str	r3, [r7, #16]
 800e236:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800e23a:	60fb      	str	r3, [r7, #12]
 800e23c:	693b      	ldr	r3, [r7, #16]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	68fa      	ldr	r2, [r7, #12]
 800e242:	429a      	cmp	r2, r3
 800e244:	d111      	bne.n	800e26a <vTaskSwitchContext+0x8a>
 800e246:	693b      	ldr	r3, [r7, #16]
 800e248:	3304      	adds	r3, #4
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	68fa      	ldr	r2, [r7, #12]
 800e24e:	429a      	cmp	r2, r3
 800e250:	d10b      	bne.n	800e26a <vTaskSwitchContext+0x8a>
 800e252:	693b      	ldr	r3, [r7, #16]
 800e254:	3308      	adds	r3, #8
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	68fa      	ldr	r2, [r7, #12]
 800e25a:	429a      	cmp	r2, r3
 800e25c:	d105      	bne.n	800e26a <vTaskSwitchContext+0x8a>
 800e25e:	693b      	ldr	r3, [r7, #16]
 800e260:	330c      	adds	r3, #12
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	68fa      	ldr	r2, [r7, #12]
 800e266:	429a      	cmp	r2, r3
 800e268:	d008      	beq.n	800e27c <vTaskSwitchContext+0x9c>
 800e26a:	4b2d      	ldr	r3, [pc, #180]	@ (800e320 <vTaskSwitchContext+0x140>)
 800e26c:	681a      	ldr	r2, [r3, #0]
 800e26e:	4b2c      	ldr	r3, [pc, #176]	@ (800e320 <vTaskSwitchContext+0x140>)
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	3334      	adds	r3, #52	@ 0x34
 800e274:	4619      	mov	r1, r3
 800e276:	4610      	mov	r0, r2
 800e278:	f7f9 fa7c 	bl	8007774 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e27c:	4b29      	ldr	r3, [pc, #164]	@ (800e324 <vTaskSwitchContext+0x144>)
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	617b      	str	r3, [r7, #20]
 800e282:	e011      	b.n	800e2a8 <vTaskSwitchContext+0xc8>
 800e284:	697b      	ldr	r3, [r7, #20]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d10b      	bne.n	800e2a2 <vTaskSwitchContext+0xc2>
	__asm volatile
 800e28a:	f04f 0310 	mov.w	r3, #16
 800e28e:	f383 8811 	msr	BASEPRI, r3
 800e292:	f3bf 8f6f 	isb	sy
 800e296:	f3bf 8f4f 	dsb	sy
 800e29a:	607b      	str	r3, [r7, #4]
}
 800e29c:	bf00      	nop
 800e29e:	bf00      	nop
 800e2a0:	e7fd      	b.n	800e29e <vTaskSwitchContext+0xbe>
 800e2a2:	697b      	ldr	r3, [r7, #20]
 800e2a4:	3b01      	subs	r3, #1
 800e2a6:	617b      	str	r3, [r7, #20]
 800e2a8:	491f      	ldr	r1, [pc, #124]	@ (800e328 <vTaskSwitchContext+0x148>)
 800e2aa:	697a      	ldr	r2, [r7, #20]
 800e2ac:	4613      	mov	r3, r2
 800e2ae:	009b      	lsls	r3, r3, #2
 800e2b0:	4413      	add	r3, r2
 800e2b2:	009b      	lsls	r3, r3, #2
 800e2b4:	440b      	add	r3, r1
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d0e3      	beq.n	800e284 <vTaskSwitchContext+0xa4>
 800e2bc:	697a      	ldr	r2, [r7, #20]
 800e2be:	4613      	mov	r3, r2
 800e2c0:	009b      	lsls	r3, r3, #2
 800e2c2:	4413      	add	r3, r2
 800e2c4:	009b      	lsls	r3, r3, #2
 800e2c6:	4a18      	ldr	r2, [pc, #96]	@ (800e328 <vTaskSwitchContext+0x148>)
 800e2c8:	4413      	add	r3, r2
 800e2ca:	60bb      	str	r3, [r7, #8]
 800e2cc:	68bb      	ldr	r3, [r7, #8]
 800e2ce:	685b      	ldr	r3, [r3, #4]
 800e2d0:	685a      	ldr	r2, [r3, #4]
 800e2d2:	68bb      	ldr	r3, [r7, #8]
 800e2d4:	605a      	str	r2, [r3, #4]
 800e2d6:	68bb      	ldr	r3, [r7, #8]
 800e2d8:	685a      	ldr	r2, [r3, #4]
 800e2da:	68bb      	ldr	r3, [r7, #8]
 800e2dc:	3308      	adds	r3, #8
 800e2de:	429a      	cmp	r2, r3
 800e2e0:	d104      	bne.n	800e2ec <vTaskSwitchContext+0x10c>
 800e2e2:	68bb      	ldr	r3, [r7, #8]
 800e2e4:	685b      	ldr	r3, [r3, #4]
 800e2e6:	685a      	ldr	r2, [r3, #4]
 800e2e8:	68bb      	ldr	r3, [r7, #8]
 800e2ea:	605a      	str	r2, [r3, #4]
 800e2ec:	68bb      	ldr	r3, [r7, #8]
 800e2ee:	685b      	ldr	r3, [r3, #4]
 800e2f0:	68db      	ldr	r3, [r3, #12]
 800e2f2:	4a0b      	ldr	r2, [pc, #44]	@ (800e320 <vTaskSwitchContext+0x140>)
 800e2f4:	6013      	str	r3, [r2, #0]
 800e2f6:	4a0b      	ldr	r2, [pc, #44]	@ (800e324 <vTaskSwitchContext+0x144>)
 800e2f8:	697b      	ldr	r3, [r7, #20]
 800e2fa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e2fc:	4b08      	ldr	r3, [pc, #32]	@ (800e320 <vTaskSwitchContext+0x140>)
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	3360      	adds	r3, #96	@ 0x60
 800e302:	4a0a      	ldr	r2, [pc, #40]	@ (800e32c <vTaskSwitchContext+0x14c>)
 800e304:	6013      	str	r3, [r2, #0]
}
 800e306:	bf00      	nop
 800e308:	3718      	adds	r7, #24
 800e30a:	46bd      	mov	sp, r7
 800e30c:	bd80      	pop	{r7, pc}
 800e30e:	bf00      	nop
 800e310:	20003f74 	.word	0x20003f74
 800e314:	20003f60 	.word	0x20003f60
 800e318:	20003f7c 	.word	0x20003f7c
 800e31c:	20003f78 	.word	0x20003f78
 800e320:	20003a78 	.word	0x20003a78
 800e324:	20003f54 	.word	0x20003f54
 800e328:	20003a7c 	.word	0x20003a7c
 800e32c:	20000030 	.word	0x20000030

0800e330 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e330:	b580      	push	{r7, lr}
 800e332:	b084      	sub	sp, #16
 800e334:	af00      	add	r7, sp, #0
 800e336:	6078      	str	r0, [r7, #4]
 800e338:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d10b      	bne.n	800e358 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800e340:	f04f 0310 	mov.w	r3, #16
 800e344:	f383 8811 	msr	BASEPRI, r3
 800e348:	f3bf 8f6f 	isb	sy
 800e34c:	f3bf 8f4f 	dsb	sy
 800e350:	60fb      	str	r3, [r7, #12]
}
 800e352:	bf00      	nop
 800e354:	bf00      	nop
 800e356:	e7fd      	b.n	800e354 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e358:	4b07      	ldr	r3, [pc, #28]	@ (800e378 <vTaskPlaceOnEventList+0x48>)
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	3318      	adds	r3, #24
 800e35e:	4619      	mov	r1, r3
 800e360:	6878      	ldr	r0, [r7, #4]
 800e362:	f7fe fa37 	bl	800c7d4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e366:	2101      	movs	r1, #1
 800e368:	6838      	ldr	r0, [r7, #0]
 800e36a:	f000 fb6b 	bl	800ea44 <prvAddCurrentTaskToDelayedList>
}
 800e36e:	bf00      	nop
 800e370:	3710      	adds	r7, #16
 800e372:	46bd      	mov	sp, r7
 800e374:	bd80      	pop	{r7, pc}
 800e376:	bf00      	nop
 800e378:	20003a78 	.word	0x20003a78

0800e37c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e37c:	b580      	push	{r7, lr}
 800e37e:	b086      	sub	sp, #24
 800e380:	af00      	add	r7, sp, #0
 800e382:	60f8      	str	r0, [r7, #12]
 800e384:	60b9      	str	r1, [r7, #8]
 800e386:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d10b      	bne.n	800e3a6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800e38e:	f04f 0310 	mov.w	r3, #16
 800e392:	f383 8811 	msr	BASEPRI, r3
 800e396:	f3bf 8f6f 	isb	sy
 800e39a:	f3bf 8f4f 	dsb	sy
 800e39e:	617b      	str	r3, [r7, #20]
}
 800e3a0:	bf00      	nop
 800e3a2:	bf00      	nop
 800e3a4:	e7fd      	b.n	800e3a2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e3a6:	4b0a      	ldr	r3, [pc, #40]	@ (800e3d0 <vTaskPlaceOnEventListRestricted+0x54>)
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	3318      	adds	r3, #24
 800e3ac:	4619      	mov	r1, r3
 800e3ae:	68f8      	ldr	r0, [r7, #12]
 800e3b0:	f7fe f9ed 	bl	800c78e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d002      	beq.n	800e3c0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e3ba:	f04f 33ff 	mov.w	r3, #4294967295
 800e3be:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e3c0:	6879      	ldr	r1, [r7, #4]
 800e3c2:	68b8      	ldr	r0, [r7, #8]
 800e3c4:	f000 fb3e 	bl	800ea44 <prvAddCurrentTaskToDelayedList>
	}
 800e3c8:	bf00      	nop
 800e3ca:	3718      	adds	r7, #24
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	bd80      	pop	{r7, pc}
 800e3d0:	20003a78 	.word	0x20003a78

0800e3d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b086      	sub	sp, #24
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	68db      	ldr	r3, [r3, #12]
 800e3e0:	68db      	ldr	r3, [r3, #12]
 800e3e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e3e4:	693b      	ldr	r3, [r7, #16]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d10b      	bne.n	800e402 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e3ea:	f04f 0310 	mov.w	r3, #16
 800e3ee:	f383 8811 	msr	BASEPRI, r3
 800e3f2:	f3bf 8f6f 	isb	sy
 800e3f6:	f3bf 8f4f 	dsb	sy
 800e3fa:	60fb      	str	r3, [r7, #12]
}
 800e3fc:	bf00      	nop
 800e3fe:	bf00      	nop
 800e400:	e7fd      	b.n	800e3fe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e402:	693b      	ldr	r3, [r7, #16]
 800e404:	3318      	adds	r3, #24
 800e406:	4618      	mov	r0, r3
 800e408:	f7fe fa1c 	bl	800c844 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e40c:	4b1d      	ldr	r3, [pc, #116]	@ (800e484 <xTaskRemoveFromEventList+0xb0>)
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	2b00      	cmp	r3, #0
 800e412:	d11d      	bne.n	800e450 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e414:	693b      	ldr	r3, [r7, #16]
 800e416:	3304      	adds	r3, #4
 800e418:	4618      	mov	r0, r3
 800e41a:	f7fe fa13 	bl	800c844 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e41e:	693b      	ldr	r3, [r7, #16]
 800e420:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e422:	4b19      	ldr	r3, [pc, #100]	@ (800e488 <xTaskRemoveFromEventList+0xb4>)
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	429a      	cmp	r2, r3
 800e428:	d903      	bls.n	800e432 <xTaskRemoveFromEventList+0x5e>
 800e42a:	693b      	ldr	r3, [r7, #16]
 800e42c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e42e:	4a16      	ldr	r2, [pc, #88]	@ (800e488 <xTaskRemoveFromEventList+0xb4>)
 800e430:	6013      	str	r3, [r2, #0]
 800e432:	693b      	ldr	r3, [r7, #16]
 800e434:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e436:	4613      	mov	r3, r2
 800e438:	009b      	lsls	r3, r3, #2
 800e43a:	4413      	add	r3, r2
 800e43c:	009b      	lsls	r3, r3, #2
 800e43e:	4a13      	ldr	r2, [pc, #76]	@ (800e48c <xTaskRemoveFromEventList+0xb8>)
 800e440:	441a      	add	r2, r3
 800e442:	693b      	ldr	r3, [r7, #16]
 800e444:	3304      	adds	r3, #4
 800e446:	4619      	mov	r1, r3
 800e448:	4610      	mov	r0, r2
 800e44a:	f7fe f9a0 	bl	800c78e <vListInsertEnd>
 800e44e:	e005      	b.n	800e45c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e450:	693b      	ldr	r3, [r7, #16]
 800e452:	3318      	adds	r3, #24
 800e454:	4619      	mov	r1, r3
 800e456:	480e      	ldr	r0, [pc, #56]	@ (800e490 <xTaskRemoveFromEventList+0xbc>)
 800e458:	f7fe f999 	bl	800c78e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e45c:	693b      	ldr	r3, [r7, #16]
 800e45e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e460:	4b0c      	ldr	r3, [pc, #48]	@ (800e494 <xTaskRemoveFromEventList+0xc0>)
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e466:	429a      	cmp	r2, r3
 800e468:	d905      	bls.n	800e476 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e46a:	2301      	movs	r3, #1
 800e46c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e46e:	4b0a      	ldr	r3, [pc, #40]	@ (800e498 <xTaskRemoveFromEventList+0xc4>)
 800e470:	2201      	movs	r2, #1
 800e472:	601a      	str	r2, [r3, #0]
 800e474:	e001      	b.n	800e47a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e476:	2300      	movs	r3, #0
 800e478:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e47a:	697b      	ldr	r3, [r7, #20]
}
 800e47c:	4618      	mov	r0, r3
 800e47e:	3718      	adds	r7, #24
 800e480:	46bd      	mov	sp, r7
 800e482:	bd80      	pop	{r7, pc}
 800e484:	20003f74 	.word	0x20003f74
 800e488:	20003f54 	.word	0x20003f54
 800e48c:	20003a7c 	.word	0x20003a7c
 800e490:	20003f0c 	.word	0x20003f0c
 800e494:	20003a78 	.word	0x20003a78
 800e498:	20003f60 	.word	0x20003f60

0800e49c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e49c:	b480      	push	{r7}
 800e49e:	b083      	sub	sp, #12
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e4a4:	4b06      	ldr	r3, [pc, #24]	@ (800e4c0 <vTaskInternalSetTimeOutState+0x24>)
 800e4a6:	681a      	ldr	r2, [r3, #0]
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e4ac:	4b05      	ldr	r3, [pc, #20]	@ (800e4c4 <vTaskInternalSetTimeOutState+0x28>)
 800e4ae:	681a      	ldr	r2, [r3, #0]
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	605a      	str	r2, [r3, #4]
}
 800e4b4:	bf00      	nop
 800e4b6:	370c      	adds	r7, #12
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	bc80      	pop	{r7}
 800e4bc:	4770      	bx	lr
 800e4be:	bf00      	nop
 800e4c0:	20003f64 	.word	0x20003f64
 800e4c4:	20003f50 	.word	0x20003f50

0800e4c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b088      	sub	sp, #32
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
 800e4d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d10b      	bne.n	800e4f0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800e4d8:	f04f 0310 	mov.w	r3, #16
 800e4dc:	f383 8811 	msr	BASEPRI, r3
 800e4e0:	f3bf 8f6f 	isb	sy
 800e4e4:	f3bf 8f4f 	dsb	sy
 800e4e8:	613b      	str	r3, [r7, #16]
}
 800e4ea:	bf00      	nop
 800e4ec:	bf00      	nop
 800e4ee:	e7fd      	b.n	800e4ec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e4f0:	683b      	ldr	r3, [r7, #0]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d10b      	bne.n	800e50e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800e4f6:	f04f 0310 	mov.w	r3, #16
 800e4fa:	f383 8811 	msr	BASEPRI, r3
 800e4fe:	f3bf 8f6f 	isb	sy
 800e502:	f3bf 8f4f 	dsb	sy
 800e506:	60fb      	str	r3, [r7, #12]
}
 800e508:	bf00      	nop
 800e50a:	bf00      	nop
 800e50c:	e7fd      	b.n	800e50a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800e50e:	f7fe fab5 	bl	800ca7c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e512:	4b24      	ldr	r3, [pc, #144]	@ (800e5a4 <xTaskCheckForTimeOut+0xdc>)
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	685b      	ldr	r3, [r3, #4]
 800e51c:	69ba      	ldr	r2, [r7, #24]
 800e51e:	1ad3      	subs	r3, r2, r3
 800e520:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 800e522:	4b21      	ldr	r3, [pc, #132]	@ (800e5a8 <xTaskCheckForTimeOut+0xe0>)
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	f893 30b2 	ldrb.w	r3, [r3, #178]	@ 0xb2
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d007      	beq.n	800e53e <xTaskCheckForTimeOut+0x76>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 800e52e:	4b1e      	ldr	r3, [pc, #120]	@ (800e5a8 <xTaskCheckForTimeOut+0xe0>)
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	2200      	movs	r2, #0
 800e534:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
				xReturn = pdTRUE;
 800e538:	2301      	movs	r3, #1
 800e53a:	61fb      	str	r3, [r7, #28]
 800e53c:	e02b      	b.n	800e596 <xTaskCheckForTimeOut+0xce>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e53e:	683b      	ldr	r3, [r7, #0]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e546:	d102      	bne.n	800e54e <xTaskCheckForTimeOut+0x86>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e548:	2300      	movs	r3, #0
 800e54a:	61fb      	str	r3, [r7, #28]
 800e54c:	e023      	b.n	800e596 <xTaskCheckForTimeOut+0xce>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681a      	ldr	r2, [r3, #0]
 800e552:	4b16      	ldr	r3, [pc, #88]	@ (800e5ac <xTaskCheckForTimeOut+0xe4>)
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	429a      	cmp	r2, r3
 800e558:	d007      	beq.n	800e56a <xTaskCheckForTimeOut+0xa2>
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	685b      	ldr	r3, [r3, #4]
 800e55e:	69ba      	ldr	r2, [r7, #24]
 800e560:	429a      	cmp	r2, r3
 800e562:	d302      	bcc.n	800e56a <xTaskCheckForTimeOut+0xa2>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e564:	2301      	movs	r3, #1
 800e566:	61fb      	str	r3, [r7, #28]
 800e568:	e015      	b.n	800e596 <xTaskCheckForTimeOut+0xce>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e56a:	683b      	ldr	r3, [r7, #0]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	697a      	ldr	r2, [r7, #20]
 800e570:	429a      	cmp	r2, r3
 800e572:	d20b      	bcs.n	800e58c <xTaskCheckForTimeOut+0xc4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e574:	683b      	ldr	r3, [r7, #0]
 800e576:	681a      	ldr	r2, [r3, #0]
 800e578:	697b      	ldr	r3, [r7, #20]
 800e57a:	1ad2      	subs	r2, r2, r3
 800e57c:	683b      	ldr	r3, [r7, #0]
 800e57e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e580:	6878      	ldr	r0, [r7, #4]
 800e582:	f7ff ff8b 	bl	800e49c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e586:	2300      	movs	r3, #0
 800e588:	61fb      	str	r3, [r7, #28]
 800e58a:	e004      	b.n	800e596 <xTaskCheckForTimeOut+0xce>
		}
		else
		{
			*pxTicksToWait = 0;
 800e58c:	683b      	ldr	r3, [r7, #0]
 800e58e:	2200      	movs	r2, #0
 800e590:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e592:	2301      	movs	r3, #1
 800e594:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e596:	f7fe faa1 	bl	800cadc <vPortExitCritical>

	return xReturn;
 800e59a:	69fb      	ldr	r3, [r7, #28]
}
 800e59c:	4618      	mov	r0, r3
 800e59e:	3720      	adds	r7, #32
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	bd80      	pop	{r7, pc}
 800e5a4:	20003f50 	.word	0x20003f50
 800e5a8:	20003a78 	.word	0x20003a78
 800e5ac:	20003f64 	.word	0x20003f64

0800e5b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e5b0:	b480      	push	{r7}
 800e5b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e5b4:	4b03      	ldr	r3, [pc, #12]	@ (800e5c4 <vTaskMissedYield+0x14>)
 800e5b6:	2201      	movs	r2, #1
 800e5b8:	601a      	str	r2, [r3, #0]
}
 800e5ba:	bf00      	nop
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	bc80      	pop	{r7}
 800e5c0:	4770      	bx	lr
 800e5c2:	bf00      	nop
 800e5c4:	20003f60 	.word	0x20003f60

0800e5c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b082      	sub	sp, #8
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e5d0:	f000 f854 	bl	800e67c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e5d4:	4b07      	ldr	r3, [pc, #28]	@ (800e5f4 <prvIdleTask+0x2c>)
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	2b01      	cmp	r3, #1
 800e5da:	d907      	bls.n	800e5ec <prvIdleTask+0x24>
			{
				taskYIELD();
 800e5dc:	4b06      	ldr	r3, [pc, #24]	@ (800e5f8 <prvIdleTask+0x30>)
 800e5de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e5e2:	601a      	str	r2, [r3, #0]
 800e5e4:	f3bf 8f4f 	dsb	sy
 800e5e8:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800e5ec:	f7f9 f892 	bl	8007714 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800e5f0:	e7ee      	b.n	800e5d0 <prvIdleTask+0x8>
 800e5f2:	bf00      	nop
 800e5f4:	20003a7c 	.word	0x20003a7c
 800e5f8:	e000ed04 	.word	0xe000ed04

0800e5fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b082      	sub	sp, #8
 800e600:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e602:	2300      	movs	r3, #0
 800e604:	607b      	str	r3, [r7, #4]
 800e606:	e00c      	b.n	800e622 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e608:	687a      	ldr	r2, [r7, #4]
 800e60a:	4613      	mov	r3, r2
 800e60c:	009b      	lsls	r3, r3, #2
 800e60e:	4413      	add	r3, r2
 800e610:	009b      	lsls	r3, r3, #2
 800e612:	4a12      	ldr	r2, [pc, #72]	@ (800e65c <prvInitialiseTaskLists+0x60>)
 800e614:	4413      	add	r3, r2
 800e616:	4618      	mov	r0, r3
 800e618:	f7fe f88e 	bl	800c738 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	3301      	adds	r3, #1
 800e620:	607b      	str	r3, [r7, #4]
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	2b37      	cmp	r3, #55	@ 0x37
 800e626:	d9ef      	bls.n	800e608 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e628:	480d      	ldr	r0, [pc, #52]	@ (800e660 <prvInitialiseTaskLists+0x64>)
 800e62a:	f7fe f885 	bl	800c738 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e62e:	480d      	ldr	r0, [pc, #52]	@ (800e664 <prvInitialiseTaskLists+0x68>)
 800e630:	f7fe f882 	bl	800c738 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e634:	480c      	ldr	r0, [pc, #48]	@ (800e668 <prvInitialiseTaskLists+0x6c>)
 800e636:	f7fe f87f 	bl	800c738 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e63a:	480c      	ldr	r0, [pc, #48]	@ (800e66c <prvInitialiseTaskLists+0x70>)
 800e63c:	f7fe f87c 	bl	800c738 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e640:	480b      	ldr	r0, [pc, #44]	@ (800e670 <prvInitialiseTaskLists+0x74>)
 800e642:	f7fe f879 	bl	800c738 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e646:	4b0b      	ldr	r3, [pc, #44]	@ (800e674 <prvInitialiseTaskLists+0x78>)
 800e648:	4a05      	ldr	r2, [pc, #20]	@ (800e660 <prvInitialiseTaskLists+0x64>)
 800e64a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e64c:	4b0a      	ldr	r3, [pc, #40]	@ (800e678 <prvInitialiseTaskLists+0x7c>)
 800e64e:	4a05      	ldr	r2, [pc, #20]	@ (800e664 <prvInitialiseTaskLists+0x68>)
 800e650:	601a      	str	r2, [r3, #0]
}
 800e652:	bf00      	nop
 800e654:	3708      	adds	r7, #8
 800e656:	46bd      	mov	sp, r7
 800e658:	bd80      	pop	{r7, pc}
 800e65a:	bf00      	nop
 800e65c:	20003a7c 	.word	0x20003a7c
 800e660:	20003edc 	.word	0x20003edc
 800e664:	20003ef0 	.word	0x20003ef0
 800e668:	20003f0c 	.word	0x20003f0c
 800e66c:	20003f20 	.word	0x20003f20
 800e670:	20003f38 	.word	0x20003f38
 800e674:	20003f04 	.word	0x20003f04
 800e678:	20003f08 	.word	0x20003f08

0800e67c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b082      	sub	sp, #8
 800e680:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e682:	e019      	b.n	800e6b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e684:	f7fe f9fa 	bl	800ca7c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e688:	4b10      	ldr	r3, [pc, #64]	@ (800e6cc <prvCheckTasksWaitingTermination+0x50>)
 800e68a:	68db      	ldr	r3, [r3, #12]
 800e68c:	68db      	ldr	r3, [r3, #12]
 800e68e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	3304      	adds	r3, #4
 800e694:	4618      	mov	r0, r3
 800e696:	f7fe f8d5 	bl	800c844 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e69a:	4b0d      	ldr	r3, [pc, #52]	@ (800e6d0 <prvCheckTasksWaitingTermination+0x54>)
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	3b01      	subs	r3, #1
 800e6a0:	4a0b      	ldr	r2, [pc, #44]	@ (800e6d0 <prvCheckTasksWaitingTermination+0x54>)
 800e6a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e6a4:	4b0b      	ldr	r3, [pc, #44]	@ (800e6d4 <prvCheckTasksWaitingTermination+0x58>)
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	3b01      	subs	r3, #1
 800e6aa:	4a0a      	ldr	r2, [pc, #40]	@ (800e6d4 <prvCheckTasksWaitingTermination+0x58>)
 800e6ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e6ae:	f7fe fa15 	bl	800cadc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e6b2:	6878      	ldr	r0, [r7, #4]
 800e6b4:	f000 f8e3 	bl	800e87e <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e6b8:	4b06      	ldr	r3, [pc, #24]	@ (800e6d4 <prvCheckTasksWaitingTermination+0x58>)
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d1e1      	bne.n	800e684 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e6c0:	bf00      	nop
 800e6c2:	bf00      	nop
 800e6c4:	3708      	adds	r7, #8
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	bd80      	pop	{r7, pc}
 800e6ca:	bf00      	nop
 800e6cc:	20003f20 	.word	0x20003f20
 800e6d0:	20003f4c 	.word	0x20003f4c
 800e6d4:	20003f34 	.word	0x20003f34

0800e6d8 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b086      	sub	sp, #24
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	60f8      	str	r0, [r7, #12]
 800e6e0:	60b9      	str	r1, [r7, #8]
 800e6e2:	607a      	str	r2, [r7, #4]
 800e6e4:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d102      	bne.n	800e6f2 <vTaskGetInfo+0x1a>
 800e6ec:	4b2c      	ldr	r3, [pc, #176]	@ (800e7a0 <vTaskGetInfo+0xc8>)
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	e000      	b.n	800e6f4 <vTaskGetInfo+0x1c>
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800e6f6:	68bb      	ldr	r3, [r7, #8]
 800e6f8:	697a      	ldr	r2, [r7, #20]
 800e6fa:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800e6fc:	697b      	ldr	r3, [r7, #20]
 800e6fe:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e702:	68bb      	ldr	r3, [r7, #8]
 800e704:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800e706:	697b      	ldr	r3, [r7, #20]
 800e708:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e70a:	68bb      	ldr	r3, [r7, #8]
 800e70c:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800e70e:	697b      	ldr	r3, [r7, #20]
 800e710:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e712:	68bb      	ldr	r3, [r7, #8]
 800e714:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800e716:	697b      	ldr	r3, [r7, #20]
 800e718:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e71a:	68bb      	ldr	r3, [r7, #8]
 800e71c:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800e71e:	697b      	ldr	r3, [r7, #20]
 800e720:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e722:	68bb      	ldr	r3, [r7, #8]
 800e724:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 800e726:	697b      	ldr	r3, [r7, #20]
 800e728:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e72a:	68bb      	ldr	r3, [r7, #8]
 800e72c:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800e72e:	78fb      	ldrb	r3, [r7, #3]
 800e730:	2b05      	cmp	r3, #5
 800e732:	d01a      	beq.n	800e76a <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 800e734:	4b1a      	ldr	r3, [pc, #104]	@ (800e7a0 <vTaskGetInfo+0xc8>)
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	697a      	ldr	r2, [r7, #20]
 800e73a:	429a      	cmp	r2, r3
 800e73c:	d103      	bne.n	800e746 <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800e73e:	68bb      	ldr	r3, [r7, #8]
 800e740:	2200      	movs	r2, #0
 800e742:	731a      	strb	r2, [r3, #12]
 800e744:	e018      	b.n	800e778 <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800e746:	68bb      	ldr	r3, [r7, #8]
 800e748:	78fa      	ldrb	r2, [r7, #3]
 800e74a:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800e74c:	78fb      	ldrb	r3, [r7, #3]
 800e74e:	2b03      	cmp	r3, #3
 800e750:	d112      	bne.n	800e778 <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 800e752:	f7ff fb39 	bl	800ddc8 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e756:	697b      	ldr	r3, [r7, #20]
 800e758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d002      	beq.n	800e764 <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800e75e:	68bb      	ldr	r3, [r7, #8]
 800e760:	2202      	movs	r2, #2
 800e762:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800e764:	f7ff fb3e 	bl	800dde4 <xTaskResumeAll>
 800e768:	e006      	b.n	800e778 <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800e76a:	6978      	ldr	r0, [r7, #20]
 800e76c:	f7ff f94a 	bl	800da04 <eTaskGetState>
 800e770:	4603      	mov	r3, r0
 800e772:	461a      	mov	r2, r3
 800e774:	68bb      	ldr	r3, [r7, #8]
 800e776:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d009      	beq.n	800e792 <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800e77e:	697b      	ldr	r3, [r7, #20]
 800e780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e782:	4618      	mov	r0, r3
 800e784:	f000 f860 	bl	800e848 <prvTaskCheckFreeStackSpace>
 800e788:	4603      	mov	r3, r0
 800e78a:	461a      	mov	r2, r3
 800e78c:	68bb      	ldr	r3, [r7, #8]
 800e78e:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800e790:	e002      	b.n	800e798 <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 800e792:	68bb      	ldr	r3, [r7, #8]
 800e794:	2200      	movs	r2, #0
 800e796:	841a      	strh	r2, [r3, #32]
	}
 800e798:	bf00      	nop
 800e79a:	3718      	adds	r7, #24
 800e79c:	46bd      	mov	sp, r7
 800e79e:	bd80      	pop	{r7, pc}
 800e7a0:	20003a78 	.word	0x20003a78

0800e7a4 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b08a      	sub	sp, #40	@ 0x28
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	60f8      	str	r0, [r7, #12]
 800e7ac:	60b9      	str	r1, [r7, #8]
 800e7ae:	4613      	mov	r3, r2
 800e7b0:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	627b      	str	r3, [r7, #36]	@ 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e7b6:	68bb      	ldr	r3, [r7, #8]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d03f      	beq.n	800e83e <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e7be:	68bb      	ldr	r3, [r7, #8]
 800e7c0:	623b      	str	r3, [r7, #32]
 800e7c2:	6a3b      	ldr	r3, [r7, #32]
 800e7c4:	685b      	ldr	r3, [r3, #4]
 800e7c6:	685a      	ldr	r2, [r3, #4]
 800e7c8:	6a3b      	ldr	r3, [r7, #32]
 800e7ca:	605a      	str	r2, [r3, #4]
 800e7cc:	6a3b      	ldr	r3, [r7, #32]
 800e7ce:	685a      	ldr	r2, [r3, #4]
 800e7d0:	6a3b      	ldr	r3, [r7, #32]
 800e7d2:	3308      	adds	r3, #8
 800e7d4:	429a      	cmp	r2, r3
 800e7d6:	d104      	bne.n	800e7e2 <prvListTasksWithinSingleList+0x3e>
 800e7d8:	6a3b      	ldr	r3, [r7, #32]
 800e7da:	685b      	ldr	r3, [r3, #4]
 800e7dc:	685a      	ldr	r2, [r3, #4]
 800e7de:	6a3b      	ldr	r3, [r7, #32]
 800e7e0:	605a      	str	r2, [r3, #4]
 800e7e2:	6a3b      	ldr	r3, [r7, #32]
 800e7e4:	685b      	ldr	r3, [r3, #4]
 800e7e6:	68db      	ldr	r3, [r3, #12]
 800e7e8:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e7ea:	68bb      	ldr	r3, [r7, #8]
 800e7ec:	61bb      	str	r3, [r7, #24]
 800e7ee:	69bb      	ldr	r3, [r7, #24]
 800e7f0:	685b      	ldr	r3, [r3, #4]
 800e7f2:	685a      	ldr	r2, [r3, #4]
 800e7f4:	69bb      	ldr	r3, [r7, #24]
 800e7f6:	605a      	str	r2, [r3, #4]
 800e7f8:	69bb      	ldr	r3, [r7, #24]
 800e7fa:	685a      	ldr	r2, [r3, #4]
 800e7fc:	69bb      	ldr	r3, [r7, #24]
 800e7fe:	3308      	adds	r3, #8
 800e800:	429a      	cmp	r2, r3
 800e802:	d104      	bne.n	800e80e <prvListTasksWithinSingleList+0x6a>
 800e804:	69bb      	ldr	r3, [r7, #24]
 800e806:	685b      	ldr	r3, [r3, #4]
 800e808:	685a      	ldr	r2, [r3, #4]
 800e80a:	69bb      	ldr	r3, [r7, #24]
 800e80c:	605a      	str	r2, [r3, #4]
 800e80e:	69bb      	ldr	r3, [r7, #24]
 800e810:	685b      	ldr	r3, [r3, #4]
 800e812:	68db      	ldr	r3, [r3, #12]
 800e814:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800e816:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e818:	4613      	mov	r3, r2
 800e81a:	00db      	lsls	r3, r3, #3
 800e81c:	4413      	add	r3, r2
 800e81e:	009b      	lsls	r3, r3, #2
 800e820:	461a      	mov	r2, r3
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	1899      	adds	r1, r3, r2
 800e826:	79fb      	ldrb	r3, [r7, #7]
 800e828:	2201      	movs	r2, #1
 800e82a:	6978      	ldr	r0, [r7, #20]
 800e82c:	f7ff ff54 	bl	800e6d8 <vTaskGetInfo>
				uxTask++;
 800e830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e832:	3301      	adds	r3, #1
 800e834:	627b      	str	r3, [r7, #36]	@ 0x24
			} while( pxNextTCB != pxFirstTCB );
 800e836:	697a      	ldr	r2, [r7, #20]
 800e838:	69fb      	ldr	r3, [r7, #28]
 800e83a:	429a      	cmp	r2, r3
 800e83c:	d1d5      	bne.n	800e7ea <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 800e83e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800e840:	4618      	mov	r0, r3
 800e842:	3728      	adds	r7, #40	@ 0x28
 800e844:	46bd      	mov	sp, r7
 800e846:	bd80      	pop	{r7, pc}

0800e848 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800e848:	b480      	push	{r7}
 800e84a:	b085      	sub	sp, #20
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800e850:	2300      	movs	r3, #0
 800e852:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e854:	e005      	b.n	800e862 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	3301      	adds	r3, #1
 800e85a:	607b      	str	r3, [r7, #4]
			ulCount++;
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	3301      	adds	r3, #1
 800e860:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	781b      	ldrb	r3, [r3, #0]
 800e866:	2ba5      	cmp	r3, #165	@ 0xa5
 800e868:	d0f5      	beq.n	800e856 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	089b      	lsrs	r3, r3, #2
 800e86e:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	b29b      	uxth	r3, r3
	}
 800e874:	4618      	mov	r0, r3
 800e876:	3714      	adds	r7, #20
 800e878:	46bd      	mov	sp, r7
 800e87a:	bc80      	pop	{r7}
 800e87c:	4770      	bx	lr

0800e87e <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e87e:	b580      	push	{r7, lr}
 800e880:	b084      	sub	sp, #16
 800e882:	af00      	add	r7, sp, #0
 800e884:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	3360      	adds	r3, #96	@ 0x60
 800e88a:	4618      	mov	r0, r3
 800e88c:	f000 fd60 	bl	800f350 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 800e896:	2b00      	cmp	r3, #0
 800e898:	d108      	bne.n	800e8ac <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e89e:	4618      	mov	r0, r3
 800e8a0:	f7fd fe2c 	bl	800c4fc <vPortFree>
				vPortFree( pxTCB );
 800e8a4:	6878      	ldr	r0, [r7, #4]
 800e8a6:	f7fd fe29 	bl	800c4fc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e8aa:	e019      	b.n	800e8e0 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 800e8b2:	2b01      	cmp	r3, #1
 800e8b4:	d103      	bne.n	800e8be <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e8b6:	6878      	ldr	r0, [r7, #4]
 800e8b8:	f7fd fe20 	bl	800c4fc <vPortFree>
	}
 800e8bc:	e010      	b.n	800e8e0 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 800e8c4:	2b02      	cmp	r3, #2
 800e8c6:	d00b      	beq.n	800e8e0 <prvDeleteTCB+0x62>
	__asm volatile
 800e8c8:	f04f 0310 	mov.w	r3, #16
 800e8cc:	f383 8811 	msr	BASEPRI, r3
 800e8d0:	f3bf 8f6f 	isb	sy
 800e8d4:	f3bf 8f4f 	dsb	sy
 800e8d8:	60fb      	str	r3, [r7, #12]
}
 800e8da:	bf00      	nop
 800e8dc:	bf00      	nop
 800e8de:	e7fd      	b.n	800e8dc <prvDeleteTCB+0x5e>
	}
 800e8e0:	bf00      	nop
 800e8e2:	3710      	adds	r7, #16
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	bd80      	pop	{r7, pc}

0800e8e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e8e8:	b480      	push	{r7}
 800e8ea:	b083      	sub	sp, #12
 800e8ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e8ee:	4b0c      	ldr	r3, [pc, #48]	@ (800e920 <prvResetNextTaskUnblockTime+0x38>)
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d104      	bne.n	800e902 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e8f8:	4b0a      	ldr	r3, [pc, #40]	@ (800e924 <prvResetNextTaskUnblockTime+0x3c>)
 800e8fa:	f04f 32ff 	mov.w	r2, #4294967295
 800e8fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e900:	e008      	b.n	800e914 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e902:	4b07      	ldr	r3, [pc, #28]	@ (800e920 <prvResetNextTaskUnblockTime+0x38>)
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	68db      	ldr	r3, [r3, #12]
 800e908:	68db      	ldr	r3, [r3, #12]
 800e90a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	685b      	ldr	r3, [r3, #4]
 800e910:	4a04      	ldr	r2, [pc, #16]	@ (800e924 <prvResetNextTaskUnblockTime+0x3c>)
 800e912:	6013      	str	r3, [r2, #0]
}
 800e914:	bf00      	nop
 800e916:	370c      	adds	r7, #12
 800e918:	46bd      	mov	sp, r7
 800e91a:	bc80      	pop	{r7}
 800e91c:	4770      	bx	lr
 800e91e:	bf00      	nop
 800e920:	20003f04 	.word	0x20003f04
 800e924:	20003f6c 	.word	0x20003f6c

0800e928 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e928:	b480      	push	{r7}
 800e92a:	b083      	sub	sp, #12
 800e92c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e92e:	4b0b      	ldr	r3, [pc, #44]	@ (800e95c <xTaskGetSchedulerState+0x34>)
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	2b00      	cmp	r3, #0
 800e934:	d102      	bne.n	800e93c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e936:	2301      	movs	r3, #1
 800e938:	607b      	str	r3, [r7, #4]
 800e93a:	e008      	b.n	800e94e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e93c:	4b08      	ldr	r3, [pc, #32]	@ (800e960 <xTaskGetSchedulerState+0x38>)
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d102      	bne.n	800e94a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e944:	2302      	movs	r3, #2
 800e946:	607b      	str	r3, [r7, #4]
 800e948:	e001      	b.n	800e94e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e94a:	2300      	movs	r3, #0
 800e94c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e94e:	687b      	ldr	r3, [r7, #4]
	}
 800e950:	4618      	mov	r0, r3
 800e952:	370c      	adds	r7, #12
 800e954:	46bd      	mov	sp, r7
 800e956:	bc80      	pop	{r7}
 800e958:	4770      	bx	lr
 800e95a:	bf00      	nop
 800e95c:	20003f58 	.word	0x20003f58
 800e960:	20003f74 	.word	0x20003f74

0800e964 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e964:	b580      	push	{r7, lr}
 800e966:	b086      	sub	sp, #24
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e970:	2300      	movs	r3, #0
 800e972:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d058      	beq.n	800ea2c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e97a:	4b2f      	ldr	r3, [pc, #188]	@ (800ea38 <xTaskPriorityDisinherit+0xd4>)
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	693a      	ldr	r2, [r7, #16]
 800e980:	429a      	cmp	r2, r3
 800e982:	d00b      	beq.n	800e99c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800e984:	f04f 0310 	mov.w	r3, #16
 800e988:	f383 8811 	msr	BASEPRI, r3
 800e98c:	f3bf 8f6f 	isb	sy
 800e990:	f3bf 8f4f 	dsb	sy
 800e994:	60fb      	str	r3, [r7, #12]
}
 800e996:	bf00      	nop
 800e998:	bf00      	nop
 800e99a:	e7fd      	b.n	800e998 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e99c:	693b      	ldr	r3, [r7, #16]
 800e99e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d10b      	bne.n	800e9bc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800e9a4:	f04f 0310 	mov.w	r3, #16
 800e9a8:	f383 8811 	msr	BASEPRI, r3
 800e9ac:	f3bf 8f6f 	isb	sy
 800e9b0:	f3bf 8f4f 	dsb	sy
 800e9b4:	60bb      	str	r3, [r7, #8]
}
 800e9b6:	bf00      	nop
 800e9b8:	bf00      	nop
 800e9ba:	e7fd      	b.n	800e9b8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800e9bc:	693b      	ldr	r3, [r7, #16]
 800e9be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e9c0:	1e5a      	subs	r2, r3, #1
 800e9c2:	693b      	ldr	r3, [r7, #16]
 800e9c4:	655a      	str	r2, [r3, #84]	@ 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e9c6:	693b      	ldr	r3, [r7, #16]
 800e9c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e9ca:	693b      	ldr	r3, [r7, #16]
 800e9cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e9ce:	429a      	cmp	r2, r3
 800e9d0:	d02c      	beq.n	800ea2c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e9d2:	693b      	ldr	r3, [r7, #16]
 800e9d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d128      	bne.n	800ea2c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e9da:	693b      	ldr	r3, [r7, #16]
 800e9dc:	3304      	adds	r3, #4
 800e9de:	4618      	mov	r0, r3
 800e9e0:	f7fd ff30 	bl	800c844 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e9e4:	693b      	ldr	r3, [r7, #16]
 800e9e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e9e8:	693b      	ldr	r3, [r7, #16]
 800e9ea:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e9ec:	693b      	ldr	r3, [r7, #16]
 800e9ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9f0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e9f4:	693b      	ldr	r3, [r7, #16]
 800e9f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e9f8:	693b      	ldr	r3, [r7, #16]
 800e9fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e9fc:	4b0f      	ldr	r3, [pc, #60]	@ (800ea3c <xTaskPriorityDisinherit+0xd8>)
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	429a      	cmp	r2, r3
 800ea02:	d903      	bls.n	800ea0c <xTaskPriorityDisinherit+0xa8>
 800ea04:	693b      	ldr	r3, [r7, #16]
 800ea06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea08:	4a0c      	ldr	r2, [pc, #48]	@ (800ea3c <xTaskPriorityDisinherit+0xd8>)
 800ea0a:	6013      	str	r3, [r2, #0]
 800ea0c:	693b      	ldr	r3, [r7, #16]
 800ea0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea10:	4613      	mov	r3, r2
 800ea12:	009b      	lsls	r3, r3, #2
 800ea14:	4413      	add	r3, r2
 800ea16:	009b      	lsls	r3, r3, #2
 800ea18:	4a09      	ldr	r2, [pc, #36]	@ (800ea40 <xTaskPriorityDisinherit+0xdc>)
 800ea1a:	441a      	add	r2, r3
 800ea1c:	693b      	ldr	r3, [r7, #16]
 800ea1e:	3304      	adds	r3, #4
 800ea20:	4619      	mov	r1, r3
 800ea22:	4610      	mov	r0, r2
 800ea24:	f7fd feb3 	bl	800c78e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ea28:	2301      	movs	r3, #1
 800ea2a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ea2c:	697b      	ldr	r3, [r7, #20]
	}
 800ea2e:	4618      	mov	r0, r3
 800ea30:	3718      	adds	r7, #24
 800ea32:	46bd      	mov	sp, r7
 800ea34:	bd80      	pop	{r7, pc}
 800ea36:	bf00      	nop
 800ea38:	20003a78 	.word	0x20003a78
 800ea3c:	20003f54 	.word	0x20003f54
 800ea40:	20003a7c 	.word	0x20003a7c

0800ea44 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b084      	sub	sp, #16
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
 800ea4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ea4e:	4b24      	ldr	r3, [pc, #144]	@ (800eae0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800ea54:	4b23      	ldr	r3, [pc, #140]	@ (800eae4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	2200      	movs	r2, #0
 800ea5a:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ea5e:	4b21      	ldr	r3, [pc, #132]	@ (800eae4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	3304      	adds	r3, #4
 800ea64:	4618      	mov	r0, r3
 800ea66:	f7fd feed 	bl	800c844 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea70:	d10a      	bne.n	800ea88 <prvAddCurrentTaskToDelayedList+0x44>
 800ea72:	683b      	ldr	r3, [r7, #0]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d007      	beq.n	800ea88 <prvAddCurrentTaskToDelayedList+0x44>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ea78:	4b1a      	ldr	r3, [pc, #104]	@ (800eae4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	3304      	adds	r3, #4
 800ea7e:	4619      	mov	r1, r3
 800ea80:	4819      	ldr	r0, [pc, #100]	@ (800eae8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ea82:	f7fd fe84 	bl	800c78e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ea86:	e026      	b.n	800ead6 <prvAddCurrentTaskToDelayedList+0x92>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ea88:	68fa      	ldr	r2, [r7, #12]
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	4413      	add	r3, r2
 800ea8e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ea90:	4b14      	ldr	r3, [pc, #80]	@ (800eae4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	68ba      	ldr	r2, [r7, #8]
 800ea96:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ea98:	68ba      	ldr	r2, [r7, #8]
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	429a      	cmp	r2, r3
 800ea9e:	d209      	bcs.n	800eab4 <prvAddCurrentTaskToDelayedList+0x70>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eaa0:	4b12      	ldr	r3, [pc, #72]	@ (800eaec <prvAddCurrentTaskToDelayedList+0xa8>)
 800eaa2:	681a      	ldr	r2, [r3, #0]
 800eaa4:	4b0f      	ldr	r3, [pc, #60]	@ (800eae4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	3304      	adds	r3, #4
 800eaaa:	4619      	mov	r1, r3
 800eaac:	4610      	mov	r0, r2
 800eaae:	f7fd fe91 	bl	800c7d4 <vListInsert>
}
 800eab2:	e010      	b.n	800ead6 <prvAddCurrentTaskToDelayedList+0x92>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eab4:	4b0e      	ldr	r3, [pc, #56]	@ (800eaf0 <prvAddCurrentTaskToDelayedList+0xac>)
 800eab6:	681a      	ldr	r2, [r3, #0]
 800eab8:	4b0a      	ldr	r3, [pc, #40]	@ (800eae4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	3304      	adds	r3, #4
 800eabe:	4619      	mov	r1, r3
 800eac0:	4610      	mov	r0, r2
 800eac2:	f7fd fe87 	bl	800c7d4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800eac6:	4b0b      	ldr	r3, [pc, #44]	@ (800eaf4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	68ba      	ldr	r2, [r7, #8]
 800eacc:	429a      	cmp	r2, r3
 800eace:	d202      	bcs.n	800ead6 <prvAddCurrentTaskToDelayedList+0x92>
					xNextTaskUnblockTime = xTimeToWake;
 800ead0:	4a08      	ldr	r2, [pc, #32]	@ (800eaf4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ead2:	68bb      	ldr	r3, [r7, #8]
 800ead4:	6013      	str	r3, [r2, #0]
}
 800ead6:	bf00      	nop
 800ead8:	3710      	adds	r7, #16
 800eada:	46bd      	mov	sp, r7
 800eadc:	bd80      	pop	{r7, pc}
 800eade:	bf00      	nop
 800eae0:	20003f50 	.word	0x20003f50
 800eae4:	20003a78 	.word	0x20003a78
 800eae8:	20003f38 	.word	0x20003f38
 800eaec:	20003f08 	.word	0x20003f08
 800eaf0:	20003f04 	.word	0x20003f04
 800eaf4:	20003f6c 	.word	0x20003f6c

0800eaf8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b08a      	sub	sp, #40	@ 0x28
 800eafc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800eafe:	2300      	movs	r3, #0
 800eb00:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800eb02:	f000 fbaf 	bl	800f264 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800eb06:	4b1d      	ldr	r3, [pc, #116]	@ (800eb7c <xTimerCreateTimerTask+0x84>)
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d021      	beq.n	800eb52 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800eb0e:	2300      	movs	r3, #0
 800eb10:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800eb12:	2300      	movs	r3, #0
 800eb14:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800eb16:	1d3a      	adds	r2, r7, #4
 800eb18:	f107 0108 	add.w	r1, r7, #8
 800eb1c:	f107 030c 	add.w	r3, r7, #12
 800eb20:	4618      	mov	r0, r3
 800eb22:	f7fd fbff 	bl	800c324 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800eb26:	6879      	ldr	r1, [r7, #4]
 800eb28:	68bb      	ldr	r3, [r7, #8]
 800eb2a:	68fa      	ldr	r2, [r7, #12]
 800eb2c:	9202      	str	r2, [sp, #8]
 800eb2e:	9301      	str	r3, [sp, #4]
 800eb30:	2337      	movs	r3, #55	@ 0x37
 800eb32:	9300      	str	r3, [sp, #0]
 800eb34:	2300      	movs	r3, #0
 800eb36:	460a      	mov	r2, r1
 800eb38:	4911      	ldr	r1, [pc, #68]	@ (800eb80 <xTimerCreateTimerTask+0x88>)
 800eb3a:	4812      	ldr	r0, [pc, #72]	@ (800eb84 <xTimerCreateTimerTask+0x8c>)
 800eb3c:	f7fe fd98 	bl	800d670 <xTaskCreateStatic>
 800eb40:	4603      	mov	r3, r0
 800eb42:	4a11      	ldr	r2, [pc, #68]	@ (800eb88 <xTimerCreateTimerTask+0x90>)
 800eb44:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800eb46:	4b10      	ldr	r3, [pc, #64]	@ (800eb88 <xTimerCreateTimerTask+0x90>)
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d001      	beq.n	800eb52 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800eb4e:	2301      	movs	r3, #1
 800eb50:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800eb52:	697b      	ldr	r3, [r7, #20]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d10b      	bne.n	800eb70 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800eb58:	f04f 0310 	mov.w	r3, #16
 800eb5c:	f383 8811 	msr	BASEPRI, r3
 800eb60:	f3bf 8f6f 	isb	sy
 800eb64:	f3bf 8f4f 	dsb	sy
 800eb68:	613b      	str	r3, [r7, #16]
}
 800eb6a:	bf00      	nop
 800eb6c:	bf00      	nop
 800eb6e:	e7fd      	b.n	800eb6c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800eb70:	697b      	ldr	r3, [r7, #20]
}
 800eb72:	4618      	mov	r0, r3
 800eb74:	3718      	adds	r7, #24
 800eb76:	46bd      	mov	sp, r7
 800eb78:	bd80      	pop	{r7, pc}
 800eb7a:	bf00      	nop
 800eb7c:	20003fb0 	.word	0x20003fb0
 800eb80:	0800f574 	.word	0x0800f574
 800eb84:	0800ee01 	.word	0x0800ee01
 800eb88:	20003fb4 	.word	0x20003fb4

0800eb8c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b088      	sub	sp, #32
 800eb90:	af02      	add	r7, sp, #8
 800eb92:	60f8      	str	r0, [r7, #12]
 800eb94:	60b9      	str	r1, [r7, #8]
 800eb96:	607a      	str	r2, [r7, #4]
 800eb98:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800eb9a:	202c      	movs	r0, #44	@ 0x2c
 800eb9c:	f7fd fbda 	bl	800c354 <pvPortMalloc>
 800eba0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800eba2:	697b      	ldr	r3, [r7, #20]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d00d      	beq.n	800ebc4 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800eba8:	697b      	ldr	r3, [r7, #20]
 800ebaa:	2200      	movs	r2, #0
 800ebac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800ebb0:	697b      	ldr	r3, [r7, #20]
 800ebb2:	9301      	str	r3, [sp, #4]
 800ebb4:	6a3b      	ldr	r3, [r7, #32]
 800ebb6:	9300      	str	r3, [sp, #0]
 800ebb8:	683b      	ldr	r3, [r7, #0]
 800ebba:	687a      	ldr	r2, [r7, #4]
 800ebbc:	68b9      	ldr	r1, [r7, #8]
 800ebbe:	68f8      	ldr	r0, [r7, #12]
 800ebc0:	f000 f845 	bl	800ec4e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800ebc4:	697b      	ldr	r3, [r7, #20]
	}
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	3718      	adds	r7, #24
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	bd80      	pop	{r7, pc}

0800ebce <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800ebce:	b580      	push	{r7, lr}
 800ebd0:	b08a      	sub	sp, #40	@ 0x28
 800ebd2:	af02      	add	r7, sp, #8
 800ebd4:	60f8      	str	r0, [r7, #12]
 800ebd6:	60b9      	str	r1, [r7, #8]
 800ebd8:	607a      	str	r2, [r7, #4]
 800ebda:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800ebdc:	232c      	movs	r3, #44	@ 0x2c
 800ebde:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800ebe0:	693b      	ldr	r3, [r7, #16]
 800ebe2:	2b2c      	cmp	r3, #44	@ 0x2c
 800ebe4:	d00b      	beq.n	800ebfe <xTimerCreateStatic+0x30>
	__asm volatile
 800ebe6:	f04f 0310 	mov.w	r3, #16
 800ebea:	f383 8811 	msr	BASEPRI, r3
 800ebee:	f3bf 8f6f 	isb	sy
 800ebf2:	f3bf 8f4f 	dsb	sy
 800ebf6:	61bb      	str	r3, [r7, #24]
}
 800ebf8:	bf00      	nop
 800ebfa:	bf00      	nop
 800ebfc:	e7fd      	b.n	800ebfa <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ebfe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800ec00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d10b      	bne.n	800ec1e <xTimerCreateStatic+0x50>
	__asm volatile
 800ec06:	f04f 0310 	mov.w	r3, #16
 800ec0a:	f383 8811 	msr	BASEPRI, r3
 800ec0e:	f3bf 8f6f 	isb	sy
 800ec12:	f3bf 8f4f 	dsb	sy
 800ec16:	617b      	str	r3, [r7, #20]
}
 800ec18:	bf00      	nop
 800ec1a:	bf00      	nop
 800ec1c:	e7fd      	b.n	800ec1a <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800ec1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec20:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800ec22:	69fb      	ldr	r3, [r7, #28]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d00d      	beq.n	800ec44 <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800ec28:	69fb      	ldr	r3, [r7, #28]
 800ec2a:	2202      	movs	r2, #2
 800ec2c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800ec30:	69fb      	ldr	r3, [r7, #28]
 800ec32:	9301      	str	r3, [sp, #4]
 800ec34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec36:	9300      	str	r3, [sp, #0]
 800ec38:	683b      	ldr	r3, [r7, #0]
 800ec3a:	687a      	ldr	r2, [r7, #4]
 800ec3c:	68b9      	ldr	r1, [r7, #8]
 800ec3e:	68f8      	ldr	r0, [r7, #12]
 800ec40:	f000 f805 	bl	800ec4e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800ec44:	69fb      	ldr	r3, [r7, #28]
	}
 800ec46:	4618      	mov	r0, r3
 800ec48:	3720      	adds	r7, #32
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	bd80      	pop	{r7, pc}

0800ec4e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800ec4e:	b580      	push	{r7, lr}
 800ec50:	b086      	sub	sp, #24
 800ec52:	af00      	add	r7, sp, #0
 800ec54:	60f8      	str	r0, [r7, #12]
 800ec56:	60b9      	str	r1, [r7, #8]
 800ec58:	607a      	str	r2, [r7, #4]
 800ec5a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800ec5c:	68bb      	ldr	r3, [r7, #8]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d10b      	bne.n	800ec7a <prvInitialiseNewTimer+0x2c>
	__asm volatile
 800ec62:	f04f 0310 	mov.w	r3, #16
 800ec66:	f383 8811 	msr	BASEPRI, r3
 800ec6a:	f3bf 8f6f 	isb	sy
 800ec6e:	f3bf 8f4f 	dsb	sy
 800ec72:	617b      	str	r3, [r7, #20]
}
 800ec74:	bf00      	nop
 800ec76:	bf00      	nop
 800ec78:	e7fd      	b.n	800ec76 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800ec7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d01e      	beq.n	800ecbe <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800ec80:	f000 faf0 	bl	800f264 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800ec84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec86:	68fa      	ldr	r2, [r7, #12]
 800ec88:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800ec8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec8c:	68ba      	ldr	r2, [r7, #8]
 800ec8e:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800ec90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec92:	683a      	ldr	r2, [r7, #0]
 800ec94:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800ec96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec98:	6a3a      	ldr	r2, [r7, #32]
 800ec9a:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800ec9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec9e:	3304      	adds	r3, #4
 800eca0:	4618      	mov	r0, r3
 800eca2:	f7fd fd68 	bl	800c776 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d008      	beq.n	800ecbe <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800ecac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ecb2:	f043 0304 	orr.w	r3, r3, #4
 800ecb6:	b2da      	uxtb	r2, r3
 800ecb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800ecbe:	bf00      	nop
 800ecc0:	3718      	adds	r7, #24
 800ecc2:	46bd      	mov	sp, r7
 800ecc4:	bd80      	pop	{r7, pc}
	...

0800ecc8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b08a      	sub	sp, #40	@ 0x28
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	60f8      	str	r0, [r7, #12]
 800ecd0:	60b9      	str	r1, [r7, #8]
 800ecd2:	607a      	str	r2, [r7, #4]
 800ecd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d10b      	bne.n	800ecf8 <xTimerGenericCommand+0x30>
	__asm volatile
 800ece0:	f04f 0310 	mov.w	r3, #16
 800ece4:	f383 8811 	msr	BASEPRI, r3
 800ece8:	f3bf 8f6f 	isb	sy
 800ecec:	f3bf 8f4f 	dsb	sy
 800ecf0:	623b      	str	r3, [r7, #32]
}
 800ecf2:	bf00      	nop
 800ecf4:	bf00      	nop
 800ecf6:	e7fd      	b.n	800ecf4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ecf8:	4b19      	ldr	r3, [pc, #100]	@ (800ed60 <xTimerGenericCommand+0x98>)
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d02a      	beq.n	800ed56 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ed00:	68bb      	ldr	r3, [r7, #8]
 800ed02:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ed0c:	68bb      	ldr	r3, [r7, #8]
 800ed0e:	2b05      	cmp	r3, #5
 800ed10:	dc18      	bgt.n	800ed44 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ed12:	f7ff fe09 	bl	800e928 <xTaskGetSchedulerState>
 800ed16:	4603      	mov	r3, r0
 800ed18:	2b02      	cmp	r3, #2
 800ed1a:	d109      	bne.n	800ed30 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ed1c:	4b10      	ldr	r3, [pc, #64]	@ (800ed60 <xTimerGenericCommand+0x98>)
 800ed1e:	6818      	ldr	r0, [r3, #0]
 800ed20:	f107 0110 	add.w	r1, r7, #16
 800ed24:	2300      	movs	r3, #0
 800ed26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ed28:	f7fe f8b4 	bl	800ce94 <xQueueGenericSend>
 800ed2c:	6278      	str	r0, [r7, #36]	@ 0x24
 800ed2e:	e012      	b.n	800ed56 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ed30:	4b0b      	ldr	r3, [pc, #44]	@ (800ed60 <xTimerGenericCommand+0x98>)
 800ed32:	6818      	ldr	r0, [r3, #0]
 800ed34:	f107 0110 	add.w	r1, r7, #16
 800ed38:	2300      	movs	r3, #0
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	f7fe f8aa 	bl	800ce94 <xQueueGenericSend>
 800ed40:	6278      	str	r0, [r7, #36]	@ 0x24
 800ed42:	e008      	b.n	800ed56 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ed44:	4b06      	ldr	r3, [pc, #24]	@ (800ed60 <xTimerGenericCommand+0x98>)
 800ed46:	6818      	ldr	r0, [r3, #0]
 800ed48:	f107 0110 	add.w	r1, r7, #16
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	683a      	ldr	r2, [r7, #0]
 800ed50:	f7fe f9a2 	bl	800d098 <xQueueGenericSendFromISR>
 800ed54:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ed56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ed58:	4618      	mov	r0, r3
 800ed5a:	3728      	adds	r7, #40	@ 0x28
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	bd80      	pop	{r7, pc}
 800ed60:	20003fb0 	.word	0x20003fb0

0800ed64 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b088      	sub	sp, #32
 800ed68:	af02      	add	r7, sp, #8
 800ed6a:	6078      	str	r0, [r7, #4]
 800ed6c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed6e:	4b23      	ldr	r3, [pc, #140]	@ (800edfc <prvProcessExpiredTimer+0x98>)
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	68db      	ldr	r3, [r3, #12]
 800ed74:	68db      	ldr	r3, [r3, #12]
 800ed76:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ed78:	697b      	ldr	r3, [r7, #20]
 800ed7a:	3304      	adds	r3, #4
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	f7fd fd61 	bl	800c844 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ed82:	697b      	ldr	r3, [r7, #20]
 800ed84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ed88:	f003 0304 	and.w	r3, r3, #4
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d023      	beq.n	800edd8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ed90:	697b      	ldr	r3, [r7, #20]
 800ed92:	699a      	ldr	r2, [r3, #24]
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	18d1      	adds	r1, r2, r3
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	683a      	ldr	r2, [r7, #0]
 800ed9c:	6978      	ldr	r0, [r7, #20]
 800ed9e:	f000 f8d3 	bl	800ef48 <prvInsertTimerInActiveList>
 800eda2:	4603      	mov	r3, r0
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d020      	beq.n	800edea <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800eda8:	2300      	movs	r3, #0
 800edaa:	9300      	str	r3, [sp, #0]
 800edac:	2300      	movs	r3, #0
 800edae:	687a      	ldr	r2, [r7, #4]
 800edb0:	2100      	movs	r1, #0
 800edb2:	6978      	ldr	r0, [r7, #20]
 800edb4:	f7ff ff88 	bl	800ecc8 <xTimerGenericCommand>
 800edb8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800edba:	693b      	ldr	r3, [r7, #16]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d114      	bne.n	800edea <prvProcessExpiredTimer+0x86>
	__asm volatile
 800edc0:	f04f 0310 	mov.w	r3, #16
 800edc4:	f383 8811 	msr	BASEPRI, r3
 800edc8:	f3bf 8f6f 	isb	sy
 800edcc:	f3bf 8f4f 	dsb	sy
 800edd0:	60fb      	str	r3, [r7, #12]
}
 800edd2:	bf00      	nop
 800edd4:	bf00      	nop
 800edd6:	e7fd      	b.n	800edd4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800edd8:	697b      	ldr	r3, [r7, #20]
 800edda:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800edde:	f023 0301 	bic.w	r3, r3, #1
 800ede2:	b2da      	uxtb	r2, r3
 800ede4:	697b      	ldr	r3, [r7, #20]
 800ede6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800edea:	697b      	ldr	r3, [r7, #20]
 800edec:	6a1b      	ldr	r3, [r3, #32]
 800edee:	6978      	ldr	r0, [r7, #20]
 800edf0:	4798      	blx	r3
}
 800edf2:	bf00      	nop
 800edf4:	3718      	adds	r7, #24
 800edf6:	46bd      	mov	sp, r7
 800edf8:	bd80      	pop	{r7, pc}
 800edfa:	bf00      	nop
 800edfc:	20003fa8 	.word	0x20003fa8

0800ee00 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b084      	sub	sp, #16
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ee08:	f107 0308 	add.w	r3, r7, #8
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	f000 f859 	bl	800eec4 <prvGetNextExpireTime>
 800ee12:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ee14:	68bb      	ldr	r3, [r7, #8]
 800ee16:	4619      	mov	r1, r3
 800ee18:	68f8      	ldr	r0, [r7, #12]
 800ee1a:	f000 f805 	bl	800ee28 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ee1e:	f000 f8d5 	bl	800efcc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ee22:	bf00      	nop
 800ee24:	e7f0      	b.n	800ee08 <prvTimerTask+0x8>
	...

0800ee28 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b084      	sub	sp, #16
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	6078      	str	r0, [r7, #4]
 800ee30:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ee32:	f7fe ffc9 	bl	800ddc8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ee36:	f107 0308 	add.w	r3, r7, #8
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	f000 f864 	bl	800ef08 <prvSampleTimeNow>
 800ee40:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ee42:	68bb      	ldr	r3, [r7, #8]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d130      	bne.n	800eeaa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ee48:	683b      	ldr	r3, [r7, #0]
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d10a      	bne.n	800ee64 <prvProcessTimerOrBlockTask+0x3c>
 800ee4e:	687a      	ldr	r2, [r7, #4]
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	429a      	cmp	r2, r3
 800ee54:	d806      	bhi.n	800ee64 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ee56:	f7fe ffc5 	bl	800dde4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ee5a:	68f9      	ldr	r1, [r7, #12]
 800ee5c:	6878      	ldr	r0, [r7, #4]
 800ee5e:	f7ff ff81 	bl	800ed64 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ee62:	e024      	b.n	800eeae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ee64:	683b      	ldr	r3, [r7, #0]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d008      	beq.n	800ee7c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ee6a:	4b13      	ldr	r3, [pc, #76]	@ (800eeb8 <prvProcessTimerOrBlockTask+0x90>)
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d101      	bne.n	800ee78 <prvProcessTimerOrBlockTask+0x50>
 800ee74:	2301      	movs	r3, #1
 800ee76:	e000      	b.n	800ee7a <prvProcessTimerOrBlockTask+0x52>
 800ee78:	2300      	movs	r3, #0
 800ee7a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ee7c:	4b0f      	ldr	r3, [pc, #60]	@ (800eebc <prvProcessTimerOrBlockTask+0x94>)
 800ee7e:	6818      	ldr	r0, [r3, #0]
 800ee80:	687a      	ldr	r2, [r7, #4]
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	1ad3      	subs	r3, r2, r3
 800ee86:	683a      	ldr	r2, [r7, #0]
 800ee88:	4619      	mov	r1, r3
 800ee8a:	f7fe fbbd 	bl	800d608 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ee8e:	f7fe ffa9 	bl	800dde4 <xTaskResumeAll>
 800ee92:	4603      	mov	r3, r0
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d10a      	bne.n	800eeae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ee98:	4b09      	ldr	r3, [pc, #36]	@ (800eec0 <prvProcessTimerOrBlockTask+0x98>)
 800ee9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ee9e:	601a      	str	r2, [r3, #0]
 800eea0:	f3bf 8f4f 	dsb	sy
 800eea4:	f3bf 8f6f 	isb	sy
}
 800eea8:	e001      	b.n	800eeae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800eeaa:	f7fe ff9b 	bl	800dde4 <xTaskResumeAll>
}
 800eeae:	bf00      	nop
 800eeb0:	3710      	adds	r7, #16
 800eeb2:	46bd      	mov	sp, r7
 800eeb4:	bd80      	pop	{r7, pc}
 800eeb6:	bf00      	nop
 800eeb8:	20003fac 	.word	0x20003fac
 800eebc:	20003fb0 	.word	0x20003fb0
 800eec0:	e000ed04 	.word	0xe000ed04

0800eec4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800eec4:	b480      	push	{r7}
 800eec6:	b085      	sub	sp, #20
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800eecc:	4b0d      	ldr	r3, [pc, #52]	@ (800ef04 <prvGetNextExpireTime+0x40>)
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d101      	bne.n	800eeda <prvGetNextExpireTime+0x16>
 800eed6:	2201      	movs	r2, #1
 800eed8:	e000      	b.n	800eedc <prvGetNextExpireTime+0x18>
 800eeda:	2200      	movs	r2, #0
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d105      	bne.n	800eef4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800eee8:	4b06      	ldr	r3, [pc, #24]	@ (800ef04 <prvGetNextExpireTime+0x40>)
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	68db      	ldr	r3, [r3, #12]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	60fb      	str	r3, [r7, #12]
 800eef2:	e001      	b.n	800eef8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800eef4:	2300      	movs	r3, #0
 800eef6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800eef8:	68fb      	ldr	r3, [r7, #12]
}
 800eefa:	4618      	mov	r0, r3
 800eefc:	3714      	adds	r7, #20
 800eefe:	46bd      	mov	sp, r7
 800ef00:	bc80      	pop	{r7}
 800ef02:	4770      	bx	lr
 800ef04:	20003fa8 	.word	0x20003fa8

0800ef08 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b084      	sub	sp, #16
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ef10:	f7ff f806 	bl	800df20 <xTaskGetTickCount>
 800ef14:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ef16:	4b0b      	ldr	r3, [pc, #44]	@ (800ef44 <prvSampleTimeNow+0x3c>)
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	68fa      	ldr	r2, [r7, #12]
 800ef1c:	429a      	cmp	r2, r3
 800ef1e:	d205      	bcs.n	800ef2c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ef20:	f000 f93a 	bl	800f198 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	2201      	movs	r2, #1
 800ef28:	601a      	str	r2, [r3, #0]
 800ef2a:	e002      	b.n	800ef32 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	2200      	movs	r2, #0
 800ef30:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ef32:	4a04      	ldr	r2, [pc, #16]	@ (800ef44 <prvSampleTimeNow+0x3c>)
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ef38:	68fb      	ldr	r3, [r7, #12]
}
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	3710      	adds	r7, #16
 800ef3e:	46bd      	mov	sp, r7
 800ef40:	bd80      	pop	{r7, pc}
 800ef42:	bf00      	nop
 800ef44:	20003fb8 	.word	0x20003fb8

0800ef48 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ef48:	b580      	push	{r7, lr}
 800ef4a:	b086      	sub	sp, #24
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	60f8      	str	r0, [r7, #12]
 800ef50:	60b9      	str	r1, [r7, #8]
 800ef52:	607a      	str	r2, [r7, #4]
 800ef54:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ef56:	2300      	movs	r3, #0
 800ef58:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	68ba      	ldr	r2, [r7, #8]
 800ef5e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	68fa      	ldr	r2, [r7, #12]
 800ef64:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ef66:	68ba      	ldr	r2, [r7, #8]
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	429a      	cmp	r2, r3
 800ef6c:	d812      	bhi.n	800ef94 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef6e:	687a      	ldr	r2, [r7, #4]
 800ef70:	683b      	ldr	r3, [r7, #0]
 800ef72:	1ad2      	subs	r2, r2, r3
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	699b      	ldr	r3, [r3, #24]
 800ef78:	429a      	cmp	r2, r3
 800ef7a:	d302      	bcc.n	800ef82 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ef7c:	2301      	movs	r3, #1
 800ef7e:	617b      	str	r3, [r7, #20]
 800ef80:	e01b      	b.n	800efba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ef82:	4b10      	ldr	r3, [pc, #64]	@ (800efc4 <prvInsertTimerInActiveList+0x7c>)
 800ef84:	681a      	ldr	r2, [r3, #0]
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	3304      	adds	r3, #4
 800ef8a:	4619      	mov	r1, r3
 800ef8c:	4610      	mov	r0, r2
 800ef8e:	f7fd fc21 	bl	800c7d4 <vListInsert>
 800ef92:	e012      	b.n	800efba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ef94:	687a      	ldr	r2, [r7, #4]
 800ef96:	683b      	ldr	r3, [r7, #0]
 800ef98:	429a      	cmp	r2, r3
 800ef9a:	d206      	bcs.n	800efaa <prvInsertTimerInActiveList+0x62>
 800ef9c:	68ba      	ldr	r2, [r7, #8]
 800ef9e:	683b      	ldr	r3, [r7, #0]
 800efa0:	429a      	cmp	r2, r3
 800efa2:	d302      	bcc.n	800efaa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800efa4:	2301      	movs	r3, #1
 800efa6:	617b      	str	r3, [r7, #20]
 800efa8:	e007      	b.n	800efba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800efaa:	4b07      	ldr	r3, [pc, #28]	@ (800efc8 <prvInsertTimerInActiveList+0x80>)
 800efac:	681a      	ldr	r2, [r3, #0]
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	3304      	adds	r3, #4
 800efb2:	4619      	mov	r1, r3
 800efb4:	4610      	mov	r0, r2
 800efb6:	f7fd fc0d 	bl	800c7d4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800efba:	697b      	ldr	r3, [r7, #20]
}
 800efbc:	4618      	mov	r0, r3
 800efbe:	3718      	adds	r7, #24
 800efc0:	46bd      	mov	sp, r7
 800efc2:	bd80      	pop	{r7, pc}
 800efc4:	20003fac 	.word	0x20003fac
 800efc8:	20003fa8 	.word	0x20003fa8

0800efcc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800efcc:	b580      	push	{r7, lr}
 800efce:	b08e      	sub	sp, #56	@ 0x38
 800efd0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800efd2:	e0ce      	b.n	800f172 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	da19      	bge.n	800f00e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800efda:	1d3b      	adds	r3, r7, #4
 800efdc:	3304      	adds	r3, #4
 800efde:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800efe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d10b      	bne.n	800effe <prvProcessReceivedCommands+0x32>
	__asm volatile
 800efe6:	f04f 0310 	mov.w	r3, #16
 800efea:	f383 8811 	msr	BASEPRI, r3
 800efee:	f3bf 8f6f 	isb	sy
 800eff2:	f3bf 8f4f 	dsb	sy
 800eff6:	61fb      	str	r3, [r7, #28]
}
 800eff8:	bf00      	nop
 800effa:	bf00      	nop
 800effc:	e7fd      	b.n	800effa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800effe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f004:	6850      	ldr	r0, [r2, #4]
 800f006:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f008:	6892      	ldr	r2, [r2, #8]
 800f00a:	4611      	mov	r1, r2
 800f00c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	2b00      	cmp	r3, #0
 800f012:	f2c0 80ae 	blt.w	800f172 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f01a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f01c:	695b      	ldr	r3, [r3, #20]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d004      	beq.n	800f02c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f024:	3304      	adds	r3, #4
 800f026:	4618      	mov	r0, r3
 800f028:	f7fd fc0c 	bl	800c844 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f02c:	463b      	mov	r3, r7
 800f02e:	4618      	mov	r0, r3
 800f030:	f7ff ff6a 	bl	800ef08 <prvSampleTimeNow>
 800f034:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	2b09      	cmp	r3, #9
 800f03a:	f200 8097 	bhi.w	800f16c <prvProcessReceivedCommands+0x1a0>
 800f03e:	a201      	add	r2, pc, #4	@ (adr r2, 800f044 <prvProcessReceivedCommands+0x78>)
 800f040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f044:	0800f06d 	.word	0x0800f06d
 800f048:	0800f06d 	.word	0x0800f06d
 800f04c:	0800f06d 	.word	0x0800f06d
 800f050:	0800f0e3 	.word	0x0800f0e3
 800f054:	0800f0f7 	.word	0x0800f0f7
 800f058:	0800f143 	.word	0x0800f143
 800f05c:	0800f06d 	.word	0x0800f06d
 800f060:	0800f06d 	.word	0x0800f06d
 800f064:	0800f0e3 	.word	0x0800f0e3
 800f068:	0800f0f7 	.word	0x0800f0f7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f06c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f06e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f072:	f043 0301 	orr.w	r3, r3, #1
 800f076:	b2da      	uxtb	r2, r3
 800f078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f07a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f07e:	68ba      	ldr	r2, [r7, #8]
 800f080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f082:	699b      	ldr	r3, [r3, #24]
 800f084:	18d1      	adds	r1, r2, r3
 800f086:	68bb      	ldr	r3, [r7, #8]
 800f088:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f08a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f08c:	f7ff ff5c 	bl	800ef48 <prvInsertTimerInActiveList>
 800f090:	4603      	mov	r3, r0
 800f092:	2b00      	cmp	r3, #0
 800f094:	d06c      	beq.n	800f170 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f098:	6a1b      	ldr	r3, [r3, #32]
 800f09a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f09c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f09e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f0a4:	f003 0304 	and.w	r3, r3, #4
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d061      	beq.n	800f170 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f0ac:	68ba      	ldr	r2, [r7, #8]
 800f0ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0b0:	699b      	ldr	r3, [r3, #24]
 800f0b2:	441a      	add	r2, r3
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	9300      	str	r3, [sp, #0]
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	2100      	movs	r1, #0
 800f0bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f0be:	f7ff fe03 	bl	800ecc8 <xTimerGenericCommand>
 800f0c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f0c4:	6a3b      	ldr	r3, [r7, #32]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d152      	bne.n	800f170 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800f0ca:	f04f 0310 	mov.w	r3, #16
 800f0ce:	f383 8811 	msr	BASEPRI, r3
 800f0d2:	f3bf 8f6f 	isb	sy
 800f0d6:	f3bf 8f4f 	dsb	sy
 800f0da:	61bb      	str	r3, [r7, #24]
}
 800f0dc:	bf00      	nop
 800f0de:	bf00      	nop
 800f0e0:	e7fd      	b.n	800f0de <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f0e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f0e8:	f023 0301 	bic.w	r3, r3, #1
 800f0ec:	b2da      	uxtb	r2, r3
 800f0ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0f0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f0f4:	e03d      	b.n	800f172 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f0f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f0fc:	f043 0301 	orr.w	r3, r3, #1
 800f100:	b2da      	uxtb	r2, r3
 800f102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f104:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f108:	68ba      	ldr	r2, [r7, #8]
 800f10a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f10c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f10e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f110:	699b      	ldr	r3, [r3, #24]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d10b      	bne.n	800f12e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800f116:	f04f 0310 	mov.w	r3, #16
 800f11a:	f383 8811 	msr	BASEPRI, r3
 800f11e:	f3bf 8f6f 	isb	sy
 800f122:	f3bf 8f4f 	dsb	sy
 800f126:	617b      	str	r3, [r7, #20]
}
 800f128:	bf00      	nop
 800f12a:	bf00      	nop
 800f12c:	e7fd      	b.n	800f12a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f12e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f130:	699a      	ldr	r2, [r3, #24]
 800f132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f134:	18d1      	adds	r1, r2, r3
 800f136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f138:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f13a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f13c:	f7ff ff04 	bl	800ef48 <prvInsertTimerInActiveList>
					break;
 800f140:	e017      	b.n	800f172 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f144:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f148:	f003 0302 	and.w	r3, r3, #2
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d103      	bne.n	800f158 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800f150:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f152:	f7fd f9d3 	bl	800c4fc <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f156:	e00c      	b.n	800f172 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f15a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f15e:	f023 0301 	bic.w	r3, r3, #1
 800f162:	b2da      	uxtb	r2, r3
 800f164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f166:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f16a:	e002      	b.n	800f172 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800f16c:	bf00      	nop
 800f16e:	e000      	b.n	800f172 <prvProcessReceivedCommands+0x1a6>
					break;
 800f170:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f172:	4b08      	ldr	r3, [pc, #32]	@ (800f194 <prvProcessReceivedCommands+0x1c8>)
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	1d39      	adds	r1, r7, #4
 800f178:	2200      	movs	r2, #0
 800f17a:	4618      	mov	r0, r3
 800f17c:	f7fe f82a 	bl	800d1d4 <xQueueReceive>
 800f180:	4603      	mov	r3, r0
 800f182:	2b00      	cmp	r3, #0
 800f184:	f47f af26 	bne.w	800efd4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800f188:	bf00      	nop
 800f18a:	bf00      	nop
 800f18c:	3730      	adds	r7, #48	@ 0x30
 800f18e:	46bd      	mov	sp, r7
 800f190:	bd80      	pop	{r7, pc}
 800f192:	bf00      	nop
 800f194:	20003fb0 	.word	0x20003fb0

0800f198 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f198:	b580      	push	{r7, lr}
 800f19a:	b088      	sub	sp, #32
 800f19c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f19e:	e049      	b.n	800f234 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f1a0:	4b2e      	ldr	r3, [pc, #184]	@ (800f25c <prvSwitchTimerLists+0xc4>)
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	68db      	ldr	r3, [r3, #12]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1aa:	4b2c      	ldr	r3, [pc, #176]	@ (800f25c <prvSwitchTimerLists+0xc4>)
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	68db      	ldr	r3, [r3, #12]
 800f1b0:	68db      	ldr	r3, [r3, #12]
 800f1b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	3304      	adds	r3, #4
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	f7fd fb43 	bl	800c844 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	6a1b      	ldr	r3, [r3, #32]
 800f1c2:	68f8      	ldr	r0, [r7, #12]
 800f1c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f1cc:	f003 0304 	and.w	r3, r3, #4
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d02f      	beq.n	800f234 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	699b      	ldr	r3, [r3, #24]
 800f1d8:	693a      	ldr	r2, [r7, #16]
 800f1da:	4413      	add	r3, r2
 800f1dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f1de:	68ba      	ldr	r2, [r7, #8]
 800f1e0:	693b      	ldr	r3, [r7, #16]
 800f1e2:	429a      	cmp	r2, r3
 800f1e4:	d90e      	bls.n	800f204 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	68ba      	ldr	r2, [r7, #8]
 800f1ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	68fa      	ldr	r2, [r7, #12]
 800f1f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f1f2:	4b1a      	ldr	r3, [pc, #104]	@ (800f25c <prvSwitchTimerLists+0xc4>)
 800f1f4:	681a      	ldr	r2, [r3, #0]
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	3304      	adds	r3, #4
 800f1fa:	4619      	mov	r1, r3
 800f1fc:	4610      	mov	r0, r2
 800f1fe:	f7fd fae9 	bl	800c7d4 <vListInsert>
 800f202:	e017      	b.n	800f234 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f204:	2300      	movs	r3, #0
 800f206:	9300      	str	r3, [sp, #0]
 800f208:	2300      	movs	r3, #0
 800f20a:	693a      	ldr	r2, [r7, #16]
 800f20c:	2100      	movs	r1, #0
 800f20e:	68f8      	ldr	r0, [r7, #12]
 800f210:	f7ff fd5a 	bl	800ecc8 <xTimerGenericCommand>
 800f214:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d10b      	bne.n	800f234 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800f21c:	f04f 0310 	mov.w	r3, #16
 800f220:	f383 8811 	msr	BASEPRI, r3
 800f224:	f3bf 8f6f 	isb	sy
 800f228:	f3bf 8f4f 	dsb	sy
 800f22c:	603b      	str	r3, [r7, #0]
}
 800f22e:	bf00      	nop
 800f230:	bf00      	nop
 800f232:	e7fd      	b.n	800f230 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f234:	4b09      	ldr	r3, [pc, #36]	@ (800f25c <prvSwitchTimerLists+0xc4>)
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d1b0      	bne.n	800f1a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f23e:	4b07      	ldr	r3, [pc, #28]	@ (800f25c <prvSwitchTimerLists+0xc4>)
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f244:	4b06      	ldr	r3, [pc, #24]	@ (800f260 <prvSwitchTimerLists+0xc8>)
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	4a04      	ldr	r2, [pc, #16]	@ (800f25c <prvSwitchTimerLists+0xc4>)
 800f24a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f24c:	4a04      	ldr	r2, [pc, #16]	@ (800f260 <prvSwitchTimerLists+0xc8>)
 800f24e:	697b      	ldr	r3, [r7, #20]
 800f250:	6013      	str	r3, [r2, #0]
}
 800f252:	bf00      	nop
 800f254:	3718      	adds	r7, #24
 800f256:	46bd      	mov	sp, r7
 800f258:	bd80      	pop	{r7, pc}
 800f25a:	bf00      	nop
 800f25c:	20003fa8 	.word	0x20003fa8
 800f260:	20003fac 	.word	0x20003fac

0800f264 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f264:	b580      	push	{r7, lr}
 800f266:	b082      	sub	sp, #8
 800f268:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f26a:	f7fd fc07 	bl	800ca7c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f26e:	4b15      	ldr	r3, [pc, #84]	@ (800f2c4 <prvCheckForValidListAndQueue+0x60>)
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d120      	bne.n	800f2b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f276:	4814      	ldr	r0, [pc, #80]	@ (800f2c8 <prvCheckForValidListAndQueue+0x64>)
 800f278:	f7fd fa5e 	bl	800c738 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f27c:	4813      	ldr	r0, [pc, #76]	@ (800f2cc <prvCheckForValidListAndQueue+0x68>)
 800f27e:	f7fd fa5b 	bl	800c738 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f282:	4b13      	ldr	r3, [pc, #76]	@ (800f2d0 <prvCheckForValidListAndQueue+0x6c>)
 800f284:	4a10      	ldr	r2, [pc, #64]	@ (800f2c8 <prvCheckForValidListAndQueue+0x64>)
 800f286:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f288:	4b12      	ldr	r3, [pc, #72]	@ (800f2d4 <prvCheckForValidListAndQueue+0x70>)
 800f28a:	4a10      	ldr	r2, [pc, #64]	@ (800f2cc <prvCheckForValidListAndQueue+0x68>)
 800f28c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f28e:	2300      	movs	r3, #0
 800f290:	9300      	str	r3, [sp, #0]
 800f292:	4b11      	ldr	r3, [pc, #68]	@ (800f2d8 <prvCheckForValidListAndQueue+0x74>)
 800f294:	4a11      	ldr	r2, [pc, #68]	@ (800f2dc <prvCheckForValidListAndQueue+0x78>)
 800f296:	2110      	movs	r1, #16
 800f298:	2001      	movs	r0, #1
 800f29a:	f7fd fd5b 	bl	800cd54 <xQueueGenericCreateStatic>
 800f29e:	4603      	mov	r3, r0
 800f2a0:	4a08      	ldr	r2, [pc, #32]	@ (800f2c4 <prvCheckForValidListAndQueue+0x60>)
 800f2a2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f2a4:	4b07      	ldr	r3, [pc, #28]	@ (800f2c4 <prvCheckForValidListAndQueue+0x60>)
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d005      	beq.n	800f2b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f2ac:	4b05      	ldr	r3, [pc, #20]	@ (800f2c4 <prvCheckForValidListAndQueue+0x60>)
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	490b      	ldr	r1, [pc, #44]	@ (800f2e0 <prvCheckForValidListAndQueue+0x7c>)
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	f7fe f980 	bl	800d5b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f2b8:	f7fd fc10 	bl	800cadc <vPortExitCritical>
}
 800f2bc:	bf00      	nop
 800f2be:	46bd      	mov	sp, r7
 800f2c0:	bd80      	pop	{r7, pc}
 800f2c2:	bf00      	nop
 800f2c4:	20003fb0 	.word	0x20003fb0
 800f2c8:	20003f80 	.word	0x20003f80
 800f2cc:	20003f94 	.word	0x20003f94
 800f2d0:	20003fa8 	.word	0x20003fa8
 800f2d4:	20003fac 	.word	0x20003fac
 800f2d8:	20003fcc 	.word	0x20003fcc
 800f2dc:	20003fbc 	.word	0x20003fbc
 800f2e0:	0800f57c 	.word	0x0800f57c

0800f2e4 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b086      	sub	sp, #24
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d10b      	bne.n	800f30e <pvTimerGetTimerID+0x2a>
	__asm volatile
 800f2f6:	f04f 0310 	mov.w	r3, #16
 800f2fa:	f383 8811 	msr	BASEPRI, r3
 800f2fe:	f3bf 8f6f 	isb	sy
 800f302:	f3bf 8f4f 	dsb	sy
 800f306:	60fb      	str	r3, [r7, #12]
}
 800f308:	bf00      	nop
 800f30a:	bf00      	nop
 800f30c:	e7fd      	b.n	800f30a <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800f30e:	f7fd fbb5 	bl	800ca7c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800f312:	697b      	ldr	r3, [r7, #20]
 800f314:	69db      	ldr	r3, [r3, #28]
 800f316:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800f318:	f7fd fbe0 	bl	800cadc <vPortExitCritical>

	return pvReturn;
 800f31c:	693b      	ldr	r3, [r7, #16]
}
 800f31e:	4618      	mov	r0, r3
 800f320:	3718      	adds	r7, #24
 800f322:	46bd      	mov	sp, r7
 800f324:	bd80      	pop	{r7, pc}
	...

0800f328 <__malloc_lock>:
 800f328:	4801      	ldr	r0, [pc, #4]	@ (800f330 <__malloc_lock+0x8>)
 800f32a:	f7f8 bf0e 	b.w	800814a <__retarget_lock_acquire_recursive>
 800f32e:	bf00      	nop
 800f330:	20000b08 	.word	0x20000b08

0800f334 <__malloc_unlock>:
 800f334:	4801      	ldr	r0, [pc, #4]	@ (800f33c <__malloc_unlock+0x8>)
 800f336:	f7f8 bf1d 	b.w	8008174 <__retarget_lock_release_recursive>
 800f33a:	bf00      	nop
 800f33c:	20000b08 	.word	0x20000b08

0800f340 <memset>:
 800f340:	4603      	mov	r3, r0
 800f342:	4402      	add	r2, r0
 800f344:	4293      	cmp	r3, r2
 800f346:	d100      	bne.n	800f34a <memset+0xa>
 800f348:	4770      	bx	lr
 800f34a:	f803 1b01 	strb.w	r1, [r3], #1
 800f34e:	e7f9      	b.n	800f344 <memset+0x4>

0800f350 <_reclaim_reent>:
 800f350:	4b29      	ldr	r3, [pc, #164]	@ (800f3f8 <_reclaim_reent+0xa8>)
 800f352:	b570      	push	{r4, r5, r6, lr}
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	4604      	mov	r4, r0
 800f358:	4283      	cmp	r3, r0
 800f35a:	d04b      	beq.n	800f3f4 <_reclaim_reent+0xa4>
 800f35c:	69c3      	ldr	r3, [r0, #28]
 800f35e:	b1ab      	cbz	r3, 800f38c <_reclaim_reent+0x3c>
 800f360:	68db      	ldr	r3, [r3, #12]
 800f362:	b16b      	cbz	r3, 800f380 <_reclaim_reent+0x30>
 800f364:	2500      	movs	r5, #0
 800f366:	69e3      	ldr	r3, [r4, #28]
 800f368:	68db      	ldr	r3, [r3, #12]
 800f36a:	5959      	ldr	r1, [r3, r5]
 800f36c:	2900      	cmp	r1, #0
 800f36e:	d13b      	bne.n	800f3e8 <_reclaim_reent+0x98>
 800f370:	3504      	adds	r5, #4
 800f372:	2d80      	cmp	r5, #128	@ 0x80
 800f374:	d1f7      	bne.n	800f366 <_reclaim_reent+0x16>
 800f376:	69e3      	ldr	r3, [r4, #28]
 800f378:	4620      	mov	r0, r4
 800f37a:	68d9      	ldr	r1, [r3, #12]
 800f37c:	f000 f870 	bl	800f460 <_free_r>
 800f380:	69e3      	ldr	r3, [r4, #28]
 800f382:	6819      	ldr	r1, [r3, #0]
 800f384:	b111      	cbz	r1, 800f38c <_reclaim_reent+0x3c>
 800f386:	4620      	mov	r0, r4
 800f388:	f000 f86a 	bl	800f460 <_free_r>
 800f38c:	6961      	ldr	r1, [r4, #20]
 800f38e:	b111      	cbz	r1, 800f396 <_reclaim_reent+0x46>
 800f390:	4620      	mov	r0, r4
 800f392:	f000 f865 	bl	800f460 <_free_r>
 800f396:	69e1      	ldr	r1, [r4, #28]
 800f398:	b111      	cbz	r1, 800f3a0 <_reclaim_reent+0x50>
 800f39a:	4620      	mov	r0, r4
 800f39c:	f000 f860 	bl	800f460 <_free_r>
 800f3a0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800f3a2:	b111      	cbz	r1, 800f3aa <_reclaim_reent+0x5a>
 800f3a4:	4620      	mov	r0, r4
 800f3a6:	f000 f85b 	bl	800f460 <_free_r>
 800f3aa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f3ac:	b111      	cbz	r1, 800f3b4 <_reclaim_reent+0x64>
 800f3ae:	4620      	mov	r0, r4
 800f3b0:	f000 f856 	bl	800f460 <_free_r>
 800f3b4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800f3b6:	b111      	cbz	r1, 800f3be <_reclaim_reent+0x6e>
 800f3b8:	4620      	mov	r0, r4
 800f3ba:	f000 f851 	bl	800f460 <_free_r>
 800f3be:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800f3c0:	b111      	cbz	r1, 800f3c8 <_reclaim_reent+0x78>
 800f3c2:	4620      	mov	r0, r4
 800f3c4:	f000 f84c 	bl	800f460 <_free_r>
 800f3c8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800f3ca:	b111      	cbz	r1, 800f3d2 <_reclaim_reent+0x82>
 800f3cc:	4620      	mov	r0, r4
 800f3ce:	f000 f847 	bl	800f460 <_free_r>
 800f3d2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800f3d4:	b111      	cbz	r1, 800f3dc <_reclaim_reent+0x8c>
 800f3d6:	4620      	mov	r0, r4
 800f3d8:	f000 f842 	bl	800f460 <_free_r>
 800f3dc:	6a23      	ldr	r3, [r4, #32]
 800f3de:	b14b      	cbz	r3, 800f3f4 <_reclaim_reent+0xa4>
 800f3e0:	4620      	mov	r0, r4
 800f3e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f3e6:	4718      	bx	r3
 800f3e8:	680e      	ldr	r6, [r1, #0]
 800f3ea:	4620      	mov	r0, r4
 800f3ec:	f000 f838 	bl	800f460 <_free_r>
 800f3f0:	4631      	mov	r1, r6
 800f3f2:	e7bb      	b.n	800f36c <_reclaim_reent+0x1c>
 800f3f4:	bd70      	pop	{r4, r5, r6, pc}
 800f3f6:	bf00      	nop
 800f3f8:	20000030 	.word	0x20000030

0800f3fc <__libc_init_array>:
 800f3fc:	b570      	push	{r4, r5, r6, lr}
 800f3fe:	2600      	movs	r6, #0
 800f400:	4d0c      	ldr	r5, [pc, #48]	@ (800f434 <__libc_init_array+0x38>)
 800f402:	4c0d      	ldr	r4, [pc, #52]	@ (800f438 <__libc_init_array+0x3c>)
 800f404:	1b64      	subs	r4, r4, r5
 800f406:	10a4      	asrs	r4, r4, #2
 800f408:	42a6      	cmp	r6, r4
 800f40a:	d109      	bne.n	800f420 <__libc_init_array+0x24>
 800f40c:	f000 f870 	bl	800f4f0 <_init>
 800f410:	2600      	movs	r6, #0
 800f412:	4d0a      	ldr	r5, [pc, #40]	@ (800f43c <__libc_init_array+0x40>)
 800f414:	4c0a      	ldr	r4, [pc, #40]	@ (800f440 <__libc_init_array+0x44>)
 800f416:	1b64      	subs	r4, r4, r5
 800f418:	10a4      	asrs	r4, r4, #2
 800f41a:	42a6      	cmp	r6, r4
 800f41c:	d105      	bne.n	800f42a <__libc_init_array+0x2e>
 800f41e:	bd70      	pop	{r4, r5, r6, pc}
 800f420:	f855 3b04 	ldr.w	r3, [r5], #4
 800f424:	4798      	blx	r3
 800f426:	3601      	adds	r6, #1
 800f428:	e7ee      	b.n	800f408 <__libc_init_array+0xc>
 800f42a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f42e:	4798      	blx	r3
 800f430:	3601      	adds	r6, #1
 800f432:	e7f2      	b.n	800f41a <__libc_init_array+0x1e>
 800f434:	0800f640 	.word	0x0800f640
 800f438:	0800f640 	.word	0x0800f640
 800f43c:	0800f640 	.word	0x0800f640
 800f440:	0800f644 	.word	0x0800f644

0800f444 <memcpy>:
 800f444:	440a      	add	r2, r1
 800f446:	4291      	cmp	r1, r2
 800f448:	f100 33ff 	add.w	r3, r0, #4294967295
 800f44c:	d100      	bne.n	800f450 <memcpy+0xc>
 800f44e:	4770      	bx	lr
 800f450:	b510      	push	{r4, lr}
 800f452:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f456:	4291      	cmp	r1, r2
 800f458:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f45c:	d1f9      	bne.n	800f452 <memcpy+0xe>
 800f45e:	bd10      	pop	{r4, pc}

0800f460 <_free_r>:
 800f460:	b538      	push	{r3, r4, r5, lr}
 800f462:	4605      	mov	r5, r0
 800f464:	2900      	cmp	r1, #0
 800f466:	d040      	beq.n	800f4ea <_free_r+0x8a>
 800f468:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f46c:	1f0c      	subs	r4, r1, #4
 800f46e:	2b00      	cmp	r3, #0
 800f470:	bfb8      	it	lt
 800f472:	18e4      	addlt	r4, r4, r3
 800f474:	f7ff ff58 	bl	800f328 <__malloc_lock>
 800f478:	4a1c      	ldr	r2, [pc, #112]	@ (800f4ec <_free_r+0x8c>)
 800f47a:	6813      	ldr	r3, [r2, #0]
 800f47c:	b933      	cbnz	r3, 800f48c <_free_r+0x2c>
 800f47e:	6063      	str	r3, [r4, #4]
 800f480:	6014      	str	r4, [r2, #0]
 800f482:	4628      	mov	r0, r5
 800f484:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f488:	f7ff bf54 	b.w	800f334 <__malloc_unlock>
 800f48c:	42a3      	cmp	r3, r4
 800f48e:	d908      	bls.n	800f4a2 <_free_r+0x42>
 800f490:	6820      	ldr	r0, [r4, #0]
 800f492:	1821      	adds	r1, r4, r0
 800f494:	428b      	cmp	r3, r1
 800f496:	bf01      	itttt	eq
 800f498:	6819      	ldreq	r1, [r3, #0]
 800f49a:	685b      	ldreq	r3, [r3, #4]
 800f49c:	1809      	addeq	r1, r1, r0
 800f49e:	6021      	streq	r1, [r4, #0]
 800f4a0:	e7ed      	b.n	800f47e <_free_r+0x1e>
 800f4a2:	461a      	mov	r2, r3
 800f4a4:	685b      	ldr	r3, [r3, #4]
 800f4a6:	b10b      	cbz	r3, 800f4ac <_free_r+0x4c>
 800f4a8:	42a3      	cmp	r3, r4
 800f4aa:	d9fa      	bls.n	800f4a2 <_free_r+0x42>
 800f4ac:	6811      	ldr	r1, [r2, #0]
 800f4ae:	1850      	adds	r0, r2, r1
 800f4b0:	42a0      	cmp	r0, r4
 800f4b2:	d10b      	bne.n	800f4cc <_free_r+0x6c>
 800f4b4:	6820      	ldr	r0, [r4, #0]
 800f4b6:	4401      	add	r1, r0
 800f4b8:	1850      	adds	r0, r2, r1
 800f4ba:	4283      	cmp	r3, r0
 800f4bc:	6011      	str	r1, [r2, #0]
 800f4be:	d1e0      	bne.n	800f482 <_free_r+0x22>
 800f4c0:	6818      	ldr	r0, [r3, #0]
 800f4c2:	685b      	ldr	r3, [r3, #4]
 800f4c4:	4408      	add	r0, r1
 800f4c6:	6010      	str	r0, [r2, #0]
 800f4c8:	6053      	str	r3, [r2, #4]
 800f4ca:	e7da      	b.n	800f482 <_free_r+0x22>
 800f4cc:	d902      	bls.n	800f4d4 <_free_r+0x74>
 800f4ce:	230c      	movs	r3, #12
 800f4d0:	602b      	str	r3, [r5, #0]
 800f4d2:	e7d6      	b.n	800f482 <_free_r+0x22>
 800f4d4:	6820      	ldr	r0, [r4, #0]
 800f4d6:	1821      	adds	r1, r4, r0
 800f4d8:	428b      	cmp	r3, r1
 800f4da:	bf01      	itttt	eq
 800f4dc:	6819      	ldreq	r1, [r3, #0]
 800f4de:	685b      	ldreq	r3, [r3, #4]
 800f4e0:	1809      	addeq	r1, r1, r0
 800f4e2:	6021      	streq	r1, [r4, #0]
 800f4e4:	6063      	str	r3, [r4, #4]
 800f4e6:	6054      	str	r4, [r2, #4]
 800f4e8:	e7cb      	b.n	800f482 <_free_r+0x22>
 800f4ea:	bd38      	pop	{r3, r4, r5, pc}
 800f4ec:	2000401c 	.word	0x2000401c

0800f4f0 <_init>:
 800f4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4f2:	bf00      	nop
 800f4f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4f6:	bc08      	pop	{r3}
 800f4f8:	469e      	mov	lr, r3
 800f4fa:	4770      	bx	lr

0800f4fc <_fini>:
 800f4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4fe:	bf00      	nop
 800f500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f502:	bc08      	pop	{r3}
 800f504:	469e      	mov	lr, r3
 800f506:	4770      	bx	lr
