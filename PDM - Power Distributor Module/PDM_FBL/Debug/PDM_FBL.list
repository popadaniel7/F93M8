
PDM_FBL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000372c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003838  08003838  00004838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800385c  0800385c  0000501c  2**0
                  CONTENTS
  4 .ARM          00000000  0800385c  0800385c  0000501c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800385c  0800385c  0000501c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800385c  0800385c  0000485c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003860  08003860  00004860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08003864  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000020  08003880  00005020  2**3
                  ALLOC
 10 ._user_heap_stack 00000800  20000148  08003880  00005148  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000501c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000715f  00000000  00000000  00005045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dce  00000000  00000000  0000c1a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000800  00000000  00000000  0000df78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005e3  00000000  00000000  0000e778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001709e  00000000  00000000  0000ed5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a5c6  00000000  00000000  00025df9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082bb7  00000000  00000000  000303bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b2f76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e1c  00000000  00000000  000b2fbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000b4dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000020 	.word	0x20000020
 8000128:	00000000 	.word	0x00000000
 800012c:	08003820 	.word	0x08003820

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000024 	.word	0x20000024
 8000148:	08003820 	.word	0x08003820

0800014c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b08a      	sub	sp, #40	@ 0x28
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000152:	4b2b      	ldr	r3, [pc, #172]	@ (8000200 <MX_CAN_Init+0xb4>)
 8000154:	4a2b      	ldr	r2, [pc, #172]	@ (8000204 <MX_CAN_Init+0xb8>)
 8000156:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 8000158:	4b29      	ldr	r3, [pc, #164]	@ (8000200 <MX_CAN_Init+0xb4>)
 800015a:	2209      	movs	r2, #9
 800015c:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800015e:	4b28      	ldr	r3, [pc, #160]	@ (8000200 <MX_CAN_Init+0xb4>)
 8000160:	2200      	movs	r2, #0
 8000162:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000164:	4b26      	ldr	r3, [pc, #152]	@ (8000200 <MX_CAN_Init+0xb4>)
 8000166:	2200      	movs	r2, #0
 8000168:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_5TQ;
 800016a:	4b25      	ldr	r3, [pc, #148]	@ (8000200 <MX_CAN_Init+0xb4>)
 800016c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000170:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000172:	4b23      	ldr	r3, [pc, #140]	@ (8000200 <MX_CAN_Init+0xb4>)
 8000174:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000178:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = ENABLE;
 800017a:	4b21      	ldr	r3, [pc, #132]	@ (8000200 <MX_CAN_Init+0xb4>)
 800017c:	2201      	movs	r2, #1
 800017e:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 8000180:	4b1f      	ldr	r3, [pc, #124]	@ (8000200 <MX_CAN_Init+0xb4>)
 8000182:	2201      	movs	r2, #1
 8000184:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = ENABLE;
 8000186:	4b1e      	ldr	r3, [pc, #120]	@ (8000200 <MX_CAN_Init+0xb4>)
 8000188:	2201      	movs	r2, #1
 800018a:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 800018c:	4b1c      	ldr	r3, [pc, #112]	@ (8000200 <MX_CAN_Init+0xb4>)
 800018e:	2201      	movs	r2, #1
 8000190:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = ENABLE;
 8000192:	4b1b      	ldr	r3, [pc, #108]	@ (8000200 <MX_CAN_Init+0xb4>)
 8000194:	2201      	movs	r2, #1
 8000196:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = ENABLE;
 8000198:	4b19      	ldr	r3, [pc, #100]	@ (8000200 <MX_CAN_Init+0xb4>)
 800019a:	2201      	movs	r2, #1
 800019c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800019e:	4818      	ldr	r0, [pc, #96]	@ (8000200 <MX_CAN_Init+0xb4>)
 80001a0:	f001 faba 	bl	8001718 <HAL_CAN_Init>
 80001a4:	4603      	mov	r3, r0
 80001a6:	2b00      	cmp	r3, #0
 80001a8:	d001      	beq.n	80001ae <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80001aa:	f001 f973 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
	CAN_FilterTypeDef filterConfig;
	filterConfig.FilterBank = 13;
 80001ae:	230d      	movs	r3, #13
 80001b0:	617b      	str	r3, [r7, #20]
	filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80001b2:	2300      	movs	r3, #0
 80001b4:	61bb      	str	r3, [r7, #24]
	filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80001b6:	2301      	movs	r3, #1
 80001b8:	61fb      	str	r3, [r7, #28]
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80001ba:	2300      	movs	r3, #0
 80001bc:	613b      	str	r3, [r7, #16]
	filterConfig.FilterActivation = ENABLE;
 80001be:	2301      	movs	r3, #1
 80001c0:	623b      	str	r3, [r7, #32]
	filterConfig.FilterIdHigh = (0x702 << 5) & 0xFFFF;
 80001c2:	f24e 0340 	movw	r3, #57408	@ 0xe040
 80001c6:	603b      	str	r3, [r7, #0]
	//filterConfig.FilterIdHigh = 0;
	filterConfig.FilterIdLow = 0x0000;
 80001c8:	2300      	movs	r3, #0
 80001ca:	607b      	str	r3, [r7, #4]
	filterConfig.FilterMaskIdHigh = (0x7FF << 5);
 80001cc:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80001d0:	60bb      	str	r3, [r7, #8]
	filterConfig.FilterMaskIdLow = 0x0000;
 80001d2:	2300      	movs	r3, #0
 80001d4:	60fb      	str	r3, [r7, #12]
	HAL_CAN_ConfigFilter(&hcan, &filterConfig);
 80001d6:	463b      	mov	r3, r7
 80001d8:	4619      	mov	r1, r3
 80001da:	4809      	ldr	r0, [pc, #36]	@ (8000200 <MX_CAN_Init+0xb4>)
 80001dc:	f001 fbe2 	bl	80019a4 <HAL_CAN_ConfigFilter>
	static uint32_t notificationLocal = 0;
	HAL_CAN_Start(&hcan);
 80001e0:	4807      	ldr	r0, [pc, #28]	@ (8000200 <MX_CAN_Init+0xb4>)
 80001e2:	f001 fca8 	bl	8001b36 <HAL_CAN_Start>
	notificationLocal = CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_FULL;
 80001e6:	4b08      	ldr	r3, [pc, #32]	@ (8000208 <MX_CAN_Init+0xbc>)
 80001e8:	2206      	movs	r2, #6
 80001ea:	601a      	str	r2, [r3, #0]
	HAL_CAN_ActivateNotification(&hcan, notificationLocal);
 80001ec:	4b06      	ldr	r3, [pc, #24]	@ (8000208 <MX_CAN_Init+0xbc>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	4619      	mov	r1, r3
 80001f2:	4803      	ldr	r0, [pc, #12]	@ (8000200 <MX_CAN_Init+0xb4>)
 80001f4:	f001 fed3 	bl	8001f9e <HAL_CAN_ActivateNotification>
  /* USER CODE END CAN_Init 2 */

}
 80001f8:	bf00      	nop
 80001fa:	3728      	adds	r7, #40	@ 0x28
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bd80      	pop	{r7, pc}
 8000200:	2000003c 	.word	0x2000003c
 8000204:	40006400 	.word	0x40006400
 8000208:	200000a0 	.word	0x200000a0

0800020c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b088      	sub	sp, #32
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000214:	f107 0310 	add.w	r3, r7, #16
 8000218:	2200      	movs	r2, #0
 800021a:	601a      	str	r2, [r3, #0]
 800021c:	605a      	str	r2, [r3, #4]
 800021e:	609a      	str	r2, [r3, #8]
 8000220:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	4a1c      	ldr	r2, [pc, #112]	@ (8000298 <HAL_CAN_MspInit+0x8c>)
 8000228:	4293      	cmp	r3, r2
 800022a:	d131      	bne.n	8000290 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800022c:	4b1b      	ldr	r3, [pc, #108]	@ (800029c <HAL_CAN_MspInit+0x90>)
 800022e:	69db      	ldr	r3, [r3, #28]
 8000230:	4a1a      	ldr	r2, [pc, #104]	@ (800029c <HAL_CAN_MspInit+0x90>)
 8000232:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000236:	61d3      	str	r3, [r2, #28]
 8000238:	4b18      	ldr	r3, [pc, #96]	@ (800029c <HAL_CAN_MspInit+0x90>)
 800023a:	69db      	ldr	r3, [r3, #28]
 800023c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000240:	60fb      	str	r3, [r7, #12]
 8000242:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000244:	4b15      	ldr	r3, [pc, #84]	@ (800029c <HAL_CAN_MspInit+0x90>)
 8000246:	699b      	ldr	r3, [r3, #24]
 8000248:	4a14      	ldr	r2, [pc, #80]	@ (800029c <HAL_CAN_MspInit+0x90>)
 800024a:	f043 0304 	orr.w	r3, r3, #4
 800024e:	6193      	str	r3, [r2, #24]
 8000250:	4b12      	ldr	r3, [pc, #72]	@ (800029c <HAL_CAN_MspInit+0x90>)
 8000252:	699b      	ldr	r3, [r3, #24]
 8000254:	f003 0304 	and.w	r3, r3, #4
 8000258:	60bb      	str	r3, [r7, #8]
 800025a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800025c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000260:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000262:	2300      	movs	r3, #0
 8000264:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000266:	2301      	movs	r3, #1
 8000268:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800026a:	f107 0310 	add.w	r3, r7, #16
 800026e:	4619      	mov	r1, r3
 8000270:	480b      	ldr	r0, [pc, #44]	@ (80002a0 <HAL_CAN_MspInit+0x94>)
 8000272:	f002 fd17 	bl	8002ca4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000276:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800027a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800027c:	2302      	movs	r3, #2
 800027e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000280:	2303      	movs	r3, #3
 8000282:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000284:	f107 0310 	add.w	r3, r7, #16
 8000288:	4619      	mov	r1, r3
 800028a:	4805      	ldr	r0, [pc, #20]	@ (80002a0 <HAL_CAN_MspInit+0x94>)
 800028c:	f002 fd0a 	bl	8002ca4 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000290:	bf00      	nop
 8000292:	3720      	adds	r7, #32
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}
 8000298:	40006400 	.word	0x40006400
 800029c:	40021000 	.word	0x40021000
 80002a0:	40010800 	.word	0x40010800

080002a4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b088      	sub	sp, #32
 80002a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002aa:	f107 0310 	add.w	r3, r7, #16
 80002ae:	2200      	movs	r2, #0
 80002b0:	601a      	str	r2, [r3, #0]
 80002b2:	605a      	str	r2, [r3, #4]
 80002b4:	609a      	str	r2, [r3, #8]
 80002b6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002b8:	4b3e      	ldr	r3, [pc, #248]	@ (80003b4 <MX_GPIO_Init+0x110>)
 80002ba:	699b      	ldr	r3, [r3, #24]
 80002bc:	4a3d      	ldr	r2, [pc, #244]	@ (80003b4 <MX_GPIO_Init+0x110>)
 80002be:	f043 0310 	orr.w	r3, r3, #16
 80002c2:	6193      	str	r3, [r2, #24]
 80002c4:	4b3b      	ldr	r3, [pc, #236]	@ (80003b4 <MX_GPIO_Init+0x110>)
 80002c6:	699b      	ldr	r3, [r3, #24]
 80002c8:	f003 0310 	and.w	r3, r3, #16
 80002cc:	60fb      	str	r3, [r7, #12]
 80002ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002d0:	4b38      	ldr	r3, [pc, #224]	@ (80003b4 <MX_GPIO_Init+0x110>)
 80002d2:	699b      	ldr	r3, [r3, #24]
 80002d4:	4a37      	ldr	r2, [pc, #220]	@ (80003b4 <MX_GPIO_Init+0x110>)
 80002d6:	f043 0320 	orr.w	r3, r3, #32
 80002da:	6193      	str	r3, [r2, #24]
 80002dc:	4b35      	ldr	r3, [pc, #212]	@ (80003b4 <MX_GPIO_Init+0x110>)
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	f003 0320 	and.w	r3, r3, #32
 80002e4:	60bb      	str	r3, [r7, #8]
 80002e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e8:	4b32      	ldr	r3, [pc, #200]	@ (80003b4 <MX_GPIO_Init+0x110>)
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	4a31      	ldr	r2, [pc, #196]	@ (80003b4 <MX_GPIO_Init+0x110>)
 80002ee:	f043 0304 	orr.w	r3, r3, #4
 80002f2:	6193      	str	r3, [r2, #24]
 80002f4:	4b2f      	ldr	r3, [pc, #188]	@ (80003b4 <MX_GPIO_Init+0x110>)
 80002f6:	699b      	ldr	r3, [r3, #24]
 80002f8:	f003 0304 	and.w	r3, r3, #4
 80002fc:	607b      	str	r3, [r7, #4]
 80002fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000300:	4b2c      	ldr	r3, [pc, #176]	@ (80003b4 <MX_GPIO_Init+0x110>)
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	4a2b      	ldr	r2, [pc, #172]	@ (80003b4 <MX_GPIO_Init+0x110>)
 8000306:	f043 0308 	orr.w	r3, r3, #8
 800030a:	6193      	str	r3, [r2, #24]
 800030c:	4b29      	ldr	r3, [pc, #164]	@ (80003b4 <MX_GPIO_Init+0x110>)
 800030e:	699b      	ldr	r3, [r3, #24]
 8000310:	f003 0308 	and.w	r3, r3, #8
 8000314:	603b      	str	r3, [r7, #0]
 8000316:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);
 8000318:	2201      	movs	r2, #1
 800031a:	21f0      	movs	r1, #240	@ 0xf0
 800031c:	4826      	ldr	r0, [pc, #152]	@ (80003b8 <MX_GPIO_Init+0x114>)
 800031e:	f002 fe45 	bl	8002fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_SET);
 8000322:	2201      	movs	r2, #1
 8000324:	f640 4103 	movw	r1, #3075	@ 0xc03
 8000328:	4824      	ldr	r0, [pc, #144]	@ (80003bc <MX_GPIO_Init+0x118>)
 800032a:	f002 fe3f 	bl	8002fac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800032e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000332:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000334:	2303      	movs	r3, #3
 8000336:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000338:	f107 0310 	add.w	r3, r7, #16
 800033c:	4619      	mov	r1, r3
 800033e:	4820      	ldr	r0, [pc, #128]	@ (80003c0 <MX_GPIO_Init+0x11c>)
 8000340:	f002 fcb0 	bl	8002ca4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA8 PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000344:	f248 730f 	movw	r3, #34575	@ 0x870f
 8000348:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800034a:	2303      	movs	r3, #3
 800034c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800034e:	f107 0310 	add.w	r3, r7, #16
 8000352:	4619      	mov	r1, r3
 8000354:	4818      	ldr	r0, [pc, #96]	@ (80003b8 <MX_GPIO_Init+0x114>)
 8000356:	f002 fca5 	bl	8002ca4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800035a:	23f0      	movs	r3, #240	@ 0xf0
 800035c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800035e:	2301      	movs	r3, #1
 8000360:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000362:	2301      	movs	r3, #1
 8000364:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000366:	2303      	movs	r3, #3
 8000368:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800036a:	f107 0310 	add.w	r3, r7, #16
 800036e:	4619      	mov	r1, r3
 8000370:	4811      	ldr	r0, [pc, #68]	@ (80003b8 <MX_GPIO_Init+0x114>)
 8000372:	f002 fc97 	bl	8002ca4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 8000376:	f640 4303 	movw	r3, #3075	@ 0xc03
 800037a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800037c:	2301      	movs	r3, #1
 800037e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000380:	2301      	movs	r3, #1
 8000382:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000384:	2303      	movs	r3, #3
 8000386:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000388:	f107 0310 	add.w	r3, r7, #16
 800038c:	4619      	mov	r1, r3
 800038e:	480b      	ldr	r0, [pc, #44]	@ (80003bc <MX_GPIO_Init+0x118>)
 8000390:	f002 fc88 	bl	8002ca4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8000394:	f24f 33fc 	movw	r3, #62460	@ 0xf3fc
 8000398:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800039a:	2303      	movs	r3, #3
 800039c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800039e:	f107 0310 	add.w	r3, r7, #16
 80003a2:	4619      	mov	r1, r3
 80003a4:	4805      	ldr	r0, [pc, #20]	@ (80003bc <MX_GPIO_Init+0x118>)
 80003a6:	f002 fc7d 	bl	8002ca4 <HAL_GPIO_Init>

}
 80003aa:	bf00      	nop
 80003ac:	3720      	adds	r7, #32
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	40021000 	.word	0x40021000
 80003b8:	40010800 	.word	0x40010800
 80003bc:	40010c00 	.word	0x40010c00
 80003c0:	40011000 	.word	0x40011000

080003c4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80003c8:	f3bf 8f4f 	dsb	sy
}
 80003cc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80003ce:	4b06      	ldr	r3, [pc, #24]	@ (80003e8 <__NVIC_SystemReset+0x24>)
 80003d0:	68db      	ldr	r3, [r3, #12]
 80003d2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80003d6:	4904      	ldr	r1, [pc, #16]	@ (80003e8 <__NVIC_SystemReset+0x24>)
 80003d8:	4b04      	ldr	r3, [pc, #16]	@ (80003ec <__NVIC_SystemReset+0x28>)
 80003da:	4313      	orrs	r3, r2
 80003dc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80003de:	f3bf 8f4f 	dsb	sy
}
 80003e2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80003e4:	bf00      	nop
 80003e6:	e7fd      	b.n	80003e4 <__NVIC_SystemReset+0x20>
 80003e8:	e000ed00 	.word	0xe000ed00
 80003ec:	05fa0004 	.word	0x05fa0004

080003f0 <HAL_CAN_RxFifo0FullCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
	/* Pending and full callbacks used to make sure no message is lost. */
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &FBL_RxHeader, FBL_RxFrame);
 80003f8:	4b24      	ldr	r3, [pc, #144]	@ (800048c <HAL_CAN_RxFifo0FullCallback+0x9c>)
 80003fa:	4a25      	ldr	r2, [pc, #148]	@ (8000490 <HAL_CAN_RxFifo0FullCallback+0xa0>)
 80003fc:	2100      	movs	r1, #0
 80003fe:	6878      	ldr	r0, [r7, #4]
 8000400:	f001 fcac 	bl	8001d5c <HAL_CAN_GetRxMessage>
	switch(FBL_DSC_State)
 8000404:	4b23      	ldr	r3, [pc, #140]	@ (8000494 <HAL_CAN_RxFifo0FullCallback+0xa4>)
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	2b05      	cmp	r3, #5
 800040a:	d00c      	beq.n	8000426 <HAL_CAN_RxFifo0FullCallback+0x36>
 800040c:	2b05      	cmp	r3, #5
 800040e:	dc0d      	bgt.n	800042c <HAL_CAN_RxFifo0FullCallback+0x3c>
 8000410:	2b02      	cmp	r3, #2
 8000412:	d002      	beq.n	800041a <HAL_CAN_RxFifo0FullCallback+0x2a>
 8000414:	2b04      	cmp	r3, #4
 8000416:	d003      	beq.n	8000420 <HAL_CAN_RxFifo0FullCallback+0x30>
 8000418:	e008      	b.n	800042c <HAL_CAN_RxFifo0FullCallback+0x3c>
	{
	case PROGRAMMING:
		FBL_DiagService_DSC_Programming();
 800041a:	f000 fe1f 	bl	800105c <FBL_DiagService_DSC_Programming>
		break;
 800041e:	e030      	b.n	8000482 <HAL_CAN_RxFifo0FullCallback+0x92>
	case CALIBRATION:
		FBL_DiagService_DSC_Calibration();
 8000420:	f000 ff3e 	bl	80012a0 <FBL_DiagService_DSC_Calibration>
		break;
 8000424:	e02d      	b.n	8000482 <HAL_CAN_RxFifo0FullCallback+0x92>
	case HARDRESET:
		FBL_DiagService_ER_HardReset();
 8000426:	f000 fd8f 	bl	8000f48 <FBL_DiagService_ER_HardReset>
		break;
 800042a:	e02a      	b.n	8000482 <HAL_CAN_RxFifo0FullCallback+0x92>
	default:/* Default case to allow programming in case of faulty application software. */
		if(FBL_RxFrame[1] == 0x10 &&
 800042c:	4b17      	ldr	r3, [pc, #92]	@ (800048c <HAL_CAN_RxFifo0FullCallback+0x9c>)
 800042e:	785b      	ldrb	r3, [r3, #1]
 8000430:	2b10      	cmp	r3, #16
 8000432:	d125      	bne.n	8000480 <HAL_CAN_RxFifo0FullCallback+0x90>
				FBL_RxFrame[2] == 0x02)
 8000434:	4b15      	ldr	r3, [pc, #84]	@ (800048c <HAL_CAN_RxFifo0FullCallback+0x9c>)
 8000436:	789b      	ldrb	r3, [r3, #2]
		if(FBL_RxFrame[1] == 0x10 &&
 8000438:	2b02      	cmp	r3, #2
 800043a:	d121      	bne.n	8000480 <HAL_CAN_RxFifo0FullCallback+0x90>
		{
			FBL_TxHeader.DLC = FBL_RxHeader.DLC;
 800043c:	4b14      	ldr	r3, [pc, #80]	@ (8000490 <HAL_CAN_RxFifo0FullCallback+0xa0>)
 800043e:	691b      	ldr	r3, [r3, #16]
 8000440:	4a15      	ldr	r2, [pc, #84]	@ (8000498 <HAL_CAN_RxFifo0FullCallback+0xa8>)
 8000442:	6113      	str	r3, [r2, #16]
			FBL_TxHeader.StdId = FBL_RxHeader.StdId + 1;
 8000444:	4b12      	ldr	r3, [pc, #72]	@ (8000490 <HAL_CAN_RxFifo0FullCallback+0xa0>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	3301      	adds	r3, #1
 800044a:	4a13      	ldr	r2, [pc, #76]	@ (8000498 <HAL_CAN_RxFifo0FullCallback+0xa8>)
 800044c:	6013      	str	r3, [r2, #0]
			FBL_TxFrame[0] = FBL_RxFrame[0];
 800044e:	4b0f      	ldr	r3, [pc, #60]	@ (800048c <HAL_CAN_RxFifo0FullCallback+0x9c>)
 8000450:	781a      	ldrb	r2, [r3, #0]
 8000452:	4b12      	ldr	r3, [pc, #72]	@ (800049c <HAL_CAN_RxFifo0FullCallback+0xac>)
 8000454:	701a      	strb	r2, [r3, #0]
			FBL_TxFrame[1] = FBL_RxFrame[1] + 0x40;
 8000456:	4b0d      	ldr	r3, [pc, #52]	@ (800048c <HAL_CAN_RxFifo0FullCallback+0x9c>)
 8000458:	785b      	ldrb	r3, [r3, #1]
 800045a:	3340      	adds	r3, #64	@ 0x40
 800045c:	b2da      	uxtb	r2, r3
 800045e:	4b0f      	ldr	r3, [pc, #60]	@ (800049c <HAL_CAN_RxFifo0FullCallback+0xac>)
 8000460:	705a      	strb	r2, [r3, #1]
			FBL_TxFrame[2] = FBL_RxFrame[2];
 8000462:	4b0a      	ldr	r3, [pc, #40]	@ (800048c <HAL_CAN_RxFifo0FullCallback+0x9c>)
 8000464:	789a      	ldrb	r2, [r3, #2]
 8000466:	4b0d      	ldr	r3, [pc, #52]	@ (800049c <HAL_CAN_RxFifo0FullCallback+0xac>)
 8000468:	709a      	strb	r2, [r3, #2]
			FBL_DSC_State = PROGRAMMING;
 800046a:	4b0a      	ldr	r3, [pc, #40]	@ (8000494 <HAL_CAN_RxFifo0FullCallback+0xa4>)
 800046c:	2202      	movs	r2, #2
 800046e:	701a      	strb	r2, [r3, #0]
			HAL_CAN_AddTxMessage(hcan, &FBL_TxHeader, FBL_TxFrame, &FBL_TxMailbox);
 8000470:	4b0b      	ldr	r3, [pc, #44]	@ (80004a0 <HAL_CAN_RxFifo0FullCallback+0xb0>)
 8000472:	4a0a      	ldr	r2, [pc, #40]	@ (800049c <HAL_CAN_RxFifo0FullCallback+0xac>)
 8000474:	4908      	ldr	r1, [pc, #32]	@ (8000498 <HAL_CAN_RxFifo0FullCallback+0xa8>)
 8000476:	6878      	ldr	r0, [r7, #4]
 8000478:	f001 fba1 	bl	8001bbe <HAL_CAN_AddTxMessage>
			FBL_DiagService_DSC_Programming();
 800047c:	f000 fdee 	bl	800105c <FBL_DiagService_DSC_Programming>
		}
		else
		{
			/* Do nothing. */
		}
		break;
 8000480:	bf00      	nop
	}
}
 8000482:	bf00      	nop
 8000484:	3708      	adds	r7, #8
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	200000a4 	.word	0x200000a4
 8000490:	200000b4 	.word	0x200000b4
 8000494:	20000004 	.word	0x20000004
 8000498:	200000d0 	.word	0x200000d0
 800049c:	200000ac 	.word	0x200000ac
 80004a0:	200000e8 	.word	0x200000e8

080004a4 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
	/* Pending and full callbacks used to make sure no message is lost. */
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &FBL_RxHeader, FBL_RxFrame);
 80004ac:	4b24      	ldr	r3, [pc, #144]	@ (8000540 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 80004ae:	4a25      	ldr	r2, [pc, #148]	@ (8000544 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 80004b0:	2100      	movs	r1, #0
 80004b2:	6878      	ldr	r0, [r7, #4]
 80004b4:	f001 fc52 	bl	8001d5c <HAL_CAN_GetRxMessage>
	switch(FBL_DSC_State)
 80004b8:	4b23      	ldr	r3, [pc, #140]	@ (8000548 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	2b05      	cmp	r3, #5
 80004be:	d00c      	beq.n	80004da <HAL_CAN_RxFifo0MsgPendingCallback+0x36>
 80004c0:	2b05      	cmp	r3, #5
 80004c2:	dc0d      	bgt.n	80004e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>
 80004c4:	2b02      	cmp	r3, #2
 80004c6:	d002      	beq.n	80004ce <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
 80004c8:	2b04      	cmp	r3, #4
 80004ca:	d003      	beq.n	80004d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>
 80004cc:	e008      	b.n	80004e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>
	{
	case PROGRAMMING:
		FBL_DiagService_DSC_Programming();
 80004ce:	f000 fdc5 	bl	800105c <FBL_DiagService_DSC_Programming>
		break;
 80004d2:	e030      	b.n	8000536 <HAL_CAN_RxFifo0MsgPendingCallback+0x92>
	case CALIBRATION:
		FBL_DiagService_DSC_Calibration();
 80004d4:	f000 fee4 	bl	80012a0 <FBL_DiagService_DSC_Calibration>
		break;
 80004d8:	e02d      	b.n	8000536 <HAL_CAN_RxFifo0MsgPendingCallback+0x92>
	case HARDRESET:
		FBL_DiagService_ER_HardReset();
 80004da:	f000 fd35 	bl	8000f48 <FBL_DiagService_ER_HardReset>
		break;
 80004de:	e02a      	b.n	8000536 <HAL_CAN_RxFifo0MsgPendingCallback+0x92>
	default:
		if(FBL_RxFrame[1] == 0x10 &&
 80004e0:	4b17      	ldr	r3, [pc, #92]	@ (8000540 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 80004e2:	785b      	ldrb	r3, [r3, #1]
 80004e4:	2b10      	cmp	r3, #16
 80004e6:	d125      	bne.n	8000534 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>
				FBL_RxFrame[2] == 0x02)
 80004e8:	4b15      	ldr	r3, [pc, #84]	@ (8000540 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 80004ea:	789b      	ldrb	r3, [r3, #2]
		if(FBL_RxFrame[1] == 0x10 &&
 80004ec:	2b02      	cmp	r3, #2
 80004ee:	d121      	bne.n	8000534 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>
		{
			FBL_TxHeader.DLC = FBL_RxHeader.DLC;
 80004f0:	4b14      	ldr	r3, [pc, #80]	@ (8000544 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 80004f2:	691b      	ldr	r3, [r3, #16]
 80004f4:	4a15      	ldr	r2, [pc, #84]	@ (800054c <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 80004f6:	6113      	str	r3, [r2, #16]
			FBL_TxHeader.StdId = FBL_RxHeader.StdId + 1;
 80004f8:	4b12      	ldr	r3, [pc, #72]	@ (8000544 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	3301      	adds	r3, #1
 80004fe:	4a13      	ldr	r2, [pc, #76]	@ (800054c <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8000500:	6013      	str	r3, [r2, #0]
			FBL_TxFrame[0] = FBL_RxFrame[0];
 8000502:	4b0f      	ldr	r3, [pc, #60]	@ (8000540 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8000504:	781a      	ldrb	r2, [r3, #0]
 8000506:	4b12      	ldr	r3, [pc, #72]	@ (8000550 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8000508:	701a      	strb	r2, [r3, #0]
			FBL_TxFrame[1] = FBL_RxFrame[1] + 0x40;
 800050a:	4b0d      	ldr	r3, [pc, #52]	@ (8000540 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 800050c:	785b      	ldrb	r3, [r3, #1]
 800050e:	3340      	adds	r3, #64	@ 0x40
 8000510:	b2da      	uxtb	r2, r3
 8000512:	4b0f      	ldr	r3, [pc, #60]	@ (8000550 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8000514:	705a      	strb	r2, [r3, #1]
			FBL_TxFrame[2] = FBL_RxFrame[2];
 8000516:	4b0a      	ldr	r3, [pc, #40]	@ (8000540 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8000518:	789a      	ldrb	r2, [r3, #2]
 800051a:	4b0d      	ldr	r3, [pc, #52]	@ (8000550 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 800051c:	709a      	strb	r2, [r3, #2]
			FBL_DSC_State = PROGRAMMING;
 800051e:	4b0a      	ldr	r3, [pc, #40]	@ (8000548 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8000520:	2202      	movs	r2, #2
 8000522:	701a      	strb	r2, [r3, #0]
			HAL_CAN_AddTxMessage(hcan, &FBL_TxHeader, FBL_TxFrame, &FBL_TxMailbox);
 8000524:	4b0b      	ldr	r3, [pc, #44]	@ (8000554 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8000526:	4a0a      	ldr	r2, [pc, #40]	@ (8000550 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8000528:	4908      	ldr	r1, [pc, #32]	@ (800054c <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 800052a:	6878      	ldr	r0, [r7, #4]
 800052c:	f001 fb47 	bl	8001bbe <HAL_CAN_AddTxMessage>
			FBL_DiagService_DSC_Programming();
 8000530:	f000 fd94 	bl	800105c <FBL_DiagService_DSC_Programming>
		}
		else
		{
			/* Do nothing. */
		}
		break;
 8000534:	bf00      	nop
	}
}
 8000536:	bf00      	nop
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	200000a4 	.word	0x200000a4
 8000544:	200000b4 	.word	0x200000b4
 8000548:	20000004 	.word	0x20000004
 800054c:	200000d0 	.word	0x200000d0
 8000550:	200000ac 	.word	0x200000ac
 8000554:	200000e8 	.word	0x200000e8

08000558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055e:	f001 f879 	bl	8001654 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000562:	f000 f86d 	bl	8000640 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000566:	f7ff fe9d 	bl	80002a4 <MX_GPIO_Init>
  MX_CAN_Init();
 800056a:	f7ff fdef 	bl	800014c <MX_CAN_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800056e:	f000 f8ac 	bl	80006ca <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
	FBL_ProgrammingAddress = 0;
 8000572:	4b28      	ldr	r3, [pc, #160]	@ (8000614 <main+0xbc>)
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
	FBL_ProgrammingIndex = 0;
 8000578:	4b27      	ldr	r3, [pc, #156]	@ (8000618 <main+0xc0>)
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
	FBL_NvM_FlashReadData(ROM_APPL_START_ADDR, &ROM_APPL_START_ADDR_storedValue, 1);
 800057e:	4b27      	ldr	r3, [pc, #156]	@ (800061c <main+0xc4>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	2201      	movs	r2, #1
 8000584:	4926      	ldr	r1, [pc, #152]	@ (8000620 <main+0xc8>)
 8000586:	4618      	mov	r0, r3
 8000588:	f000 f9a3 	bl	80008d2 <FBL_NvM_FlashReadData>
	if(ROM_APPL_START_ADDR_storedValue != 0xFFFFFFFF)
 800058c:	4b24      	ldr	r3, [pc, #144]	@ (8000620 <main+0xc8>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000594:	d007      	beq.n	80005a6 <main+0x4e>
	{
		FBL_DSC_Pointer = (uint32*)(SESSIONSTATUS_ADDR);
 8000596:	4b23      	ldr	r3, [pc, #140]	@ (8000624 <main+0xcc>)
 8000598:	4a23      	ldr	r2, [pc, #140]	@ (8000628 <main+0xd0>)
 800059a:	601a      	str	r2, [r3, #0]
		FBL_DSC_Status = *FBL_DSC_Pointer;
 800059c:	4b21      	ldr	r3, [pc, #132]	@ (8000624 <main+0xcc>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4a22      	ldr	r2, [pc, #136]	@ (800062c <main+0xd4>)
 80005a4:	6013      	str	r3, [r2, #0]
	}
	else
	{
		/* Do nothing. */
	}
	if((FBL_DSC_Status == PROGRAMMING)
 80005a6:	4b21      	ldr	r3, [pc, #132]	@ (800062c <main+0xd4>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	2b02      	cmp	r3, #2
 80005ac:	d003      	beq.n	80005b6 <main+0x5e>
			|| (FBL_DSC_Status == CALIBRATION))
 80005ae:	4b1f      	ldr	r3, [pc, #124]	@ (800062c <main+0xd4>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	2b04      	cmp	r3, #4
 80005b4:	d105      	bne.n	80005c2 <main+0x6a>
	{
		FBL_DSC_State = FBL_DSC_Status;
 80005b6:	4b1d      	ldr	r3, [pc, #116]	@ (800062c <main+0xd4>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	b2da      	uxtb	r2, r3
 80005bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000630 <main+0xd8>)
 80005be:	701a      	strb	r2, [r3, #0]
 80005c0:	e025      	b.n	800060e <main+0xb6>
	}
	else
	{
		if(ROM_APPL_START_ADDR_storedValue != 0xFFFFFFFF)
 80005c2:	4b17      	ldr	r3, [pc, #92]	@ (8000620 <main+0xc8>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005ca:	d020      	beq.n	800060e <main+0xb6>
		{
			if((RCC->CSR & RCC_CSR_PORRSTF) != 0)
 80005cc:	4b19      	ldr	r3, [pc, #100]	@ (8000634 <main+0xdc>)
 80005ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d018      	beq.n	800060a <main+0xb2>
			{
				for(uint32* addr = ((uint32_t*)NCR_START_ADDRESS); addr <= ((uint32_t*)NCR_END_ADDRESS); addr++) *addr = 0;
 80005d8:	4b17      	ldr	r3, [pc, #92]	@ (8000638 <main+0xe0>)
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	e005      	b.n	80005ea <main+0x92>
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	3304      	adds	r3, #4
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4a13      	ldr	r2, [pc, #76]	@ (800063c <main+0xe4>)
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d3f5      	bcc.n	80005de <main+0x86>
				/* Reset the flag. */
				RCC->CSR |= RCC_CSR_PORRSTF;
 80005f2:	4b10      	ldr	r3, [pc, #64]	@ (8000634 <main+0xdc>)
 80005f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005f6:	4a0f      	ldr	r2, [pc, #60]	@ (8000634 <main+0xdc>)
 80005f8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80005fc:	6253      	str	r3, [r2, #36]	@ 0x24
				RCC->CSR |= RCC_CSR_RMVF;
 80005fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000634 <main+0xdc>)
 8000600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000602:	4a0c      	ldr	r2, [pc, #48]	@ (8000634 <main+0xdc>)
 8000604:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000608:	6253      	str	r3, [r2, #36]	@ 0x24
			}
			else
			{
				/* Do nothing. */
			}
			FBL_JumpToAppl();
 800060a:	f000 fc55 	bl	8000eb8 <FBL_JumpToAppl>
	}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 800060e:	bf00      	nop
 8000610:	e7fd      	b.n	800060e <main+0xb6>
 8000612:	bf00      	nop
 8000614:	200000f4 	.word	0x200000f4
 8000618:	200000f0 	.word	0x200000f0
 800061c:	20000008 	.word	0x20000008
 8000620:	200000f8 	.word	0x200000f8
 8000624:	20000000 	.word	0x20000000
 8000628:	20004c20 	.word	0x20004c20
 800062c:	200000fc 	.word	0x200000fc
 8000630:	20000004 	.word	0x20000004
 8000634:	40021000 	.word	0x40021000
 8000638:	20004c00 	.word	0x20004c00
 800063c:	20005000 	.word	0x20005000

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b090      	sub	sp, #64	@ 0x40
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0318 	add.w	r3, r7, #24
 800064a:	2228      	movs	r2, #40	@ 0x28
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f003 f8ba 	bl	80037c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	60da      	str	r2, [r3, #12]
 8000660:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000662:	2301      	movs	r3, #1
 8000664:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000666:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800066a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000670:	2301      	movs	r3, #1
 8000672:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000674:	2302      	movs	r3, #2
 8000676:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000678:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800067c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800067e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000682:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000684:	f107 0318 	add.w	r3, r7, #24
 8000688:	4618      	mov	r0, r3
 800068a:	f002 fcbf 	bl	800300c <HAL_RCC_OscConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000694:	f000 fefe 	bl	8001494 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000698:	230f      	movs	r3, #15
 800069a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069c:	2302      	movs	r3, #2
 800069e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	2102      	movs	r1, #2
 80006b2:	4618      	mov	r0, r3
 80006b4:	f002 ff2c 	bl	8003510 <HAL_RCC_ClockConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80006be:	f000 fee9 	bl	8001494 <Error_Handler>
  }
}
 80006c2:	bf00      	nop
 80006c4:	3740      	adds	r7, #64	@ 0x40
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}

080006ca <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80006ca:	b580      	push	{r7, lr}
 80006cc:	af00      	add	r7, sp, #0
  /* CAN1_SCE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2100      	movs	r1, #0
 80006d2:	2016      	movs	r0, #22
 80006d4:	f001 ffa5 	bl	8002622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80006d8:	2016      	movs	r0, #22
 80006da:	f001 ffbe 	bl	800265a <HAL_NVIC_EnableIRQ>
  /* CAN1_RX1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80006de:	2200      	movs	r2, #0
 80006e0:	2100      	movs	r1, #0
 80006e2:	2015      	movs	r0, #21
 80006e4:	f001 ff9d 	bl	8002622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80006e8:	2015      	movs	r0, #21
 80006ea:	f001 ffb6 	bl	800265a <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 4, 0);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2104      	movs	r1, #4
 80006f2:	2005      	movs	r0, #5
 80006f4:	f001 ff95 	bl	8002622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80006f8:	2005      	movs	r0, #5
 80006fa:	f001 ffae 	bl	800265a <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 5, 0);
 80006fe:	2200      	movs	r2, #0
 8000700:	2105      	movs	r1, #5
 8000702:	2004      	movs	r0, #4
 8000704:	f001 ff8d 	bl	8002622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8000708:	2004      	movs	r0, #4
 800070a:	f001 ffa6 	bl	800265a <HAL_NVIC_EnableIRQ>
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 6, 0);
 800070e:	2200      	movs	r2, #0
 8000710:	2106      	movs	r1, #6
 8000712:	2001      	movs	r0, #1
 8000714:	f001 ff85 	bl	8002622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8000718:	2001      	movs	r0, #1
 800071a:	f001 ff9e 	bl	800265a <HAL_NVIC_EnableIRQ>
  /* USB_HP_CAN1_TX_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 800071e:	2200      	movs	r2, #0
 8000720:	2100      	movs	r1, #0
 8000722:	2013      	movs	r0, #19
 8000724:	f001 ff7d 	bl	8002622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8000728:	2013      	movs	r0, #19
 800072a:	f001 ff96 	bl	800265a <HAL_NVIC_EnableIRQ>
  /* USB_LP_CAN1_RX0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800072e:	2200      	movs	r2, #0
 8000730:	2100      	movs	r1, #0
 8000732:	2014      	movs	r0, #20
 8000734:	f001 ff75 	bl	8002622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000738:	2014      	movs	r0, #20
 800073a:	f001 ff8e 	bl	800265a <HAL_NVIC_EnableIRQ>
}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
	...

08000744 <FBL_NvM_EraseFlash_APPL>:

/* USER CODE BEGIN 4 */
uint32 Nvm_GetPage(uint32 Address);
uint32 Nvm_FlashWriteData(uint32 StartPageAddress, uint32 *Data, uint16 numberofwords);
uint32 FBL_NvM_EraseFlash_APPL(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32 PAGEError;
	uint32 StartPage = 0x8004000;
 800074a:	4b15      	ldr	r3, [pc, #84]	@ (80007a0 <FBL_NvM_EraseFlash_APPL+0x5c>)
 800074c:	60fb      	str	r3, [r7, #12]
	uint32 EndPageAdress = 0x800f7ff;
 800074e:	4b15      	ldr	r3, [pc, #84]	@ (80007a4 <FBL_NvM_EraseFlash_APPL+0x60>)
 8000750:	60bb      	str	r3, [r7, #8]
	uint32 EndPage = Nvm_GetPage(EndPageAdress);
 8000752:	68b8      	ldr	r0, [r7, #8]
 8000754:	f000 f85e 	bl	8000814 <Nvm_GetPage>
 8000758:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 800075a:	f002 f909 	bl	8002970 <HAL_FLASH_Unlock>
	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 800075e:	4b12      	ldr	r3, [pc, #72]	@ (80007a8 <FBL_NvM_EraseFlash_APPL+0x64>)
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
	EraseInitStruct.PageAddress = StartPage;
 8000764:	4a10      	ldr	r2, [pc, #64]	@ (80007a8 <FBL_NvM_EraseFlash_APPL+0x64>)
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbPages     = ((EndPage - StartPage)/FLASH_PAGE_SIZE) +1;
 800076a:	687a      	ldr	r2, [r7, #4]
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	1ad3      	subs	r3, r2, r3
 8000770:	0a9b      	lsrs	r3, r3, #10
 8000772:	3301      	adds	r3, #1
 8000774:	4a0c      	ldr	r2, [pc, #48]	@ (80007a8 <FBL_NvM_EraseFlash_APPL+0x64>)
 8000776:	60d3      	str	r3, [r2, #12]
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8000778:	463b      	mov	r3, r7
 800077a:	4619      	mov	r1, r3
 800077c:	480a      	ldr	r0, [pc, #40]	@ (80007a8 <FBL_NvM_EraseFlash_APPL+0x64>)
 800077e:	f002 f9e9 	bl	8002b54 <HAL_FLASHEx_Erase>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d003      	beq.n	8000790 <FBL_NvM_EraseFlash_APPL+0x4c>
	{
		return HAL_FLASH_GetError ();
 8000788:	f002 f928 	bl	80029dc <HAL_FLASH_GetError>
 800078c:	4603      	mov	r3, r0
 800078e:	e002      	b.n	8000796 <FBL_NvM_EraseFlash_APPL+0x52>
	}
	else
	{
		/* Do nothing. */
	}
	HAL_FLASH_Lock();
 8000790:	f002 f914 	bl	80029bc <HAL_FLASH_Lock>
	return 0;
 8000794:	2300      	movs	r3, #0
}
 8000796:	4618      	mov	r0, r3
 8000798:	3710      	adds	r7, #16
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	08004000 	.word	0x08004000
 80007a4:	0800f7ff 	.word	0x0800f7ff
 80007a8:	20000100 	.word	0x20000100

080007ac <FBL_NvM_EraseFlash_CALIBRATION>:
uint32 FBL_NvM_EraseFlash_CALIBRATION(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32 PAGEError;
	uint32 StartPage = 0x0800F800;
 80007b2:	4b15      	ldr	r3, [pc, #84]	@ (8000808 <FBL_NvM_EraseFlash_CALIBRATION+0x5c>)
 80007b4:	60fb      	str	r3, [r7, #12]
	uint32 EndPageAdress = 0x0800FBFF;
 80007b6:	4b15      	ldr	r3, [pc, #84]	@ (800080c <FBL_NvM_EraseFlash_CALIBRATION+0x60>)
 80007b8:	60bb      	str	r3, [r7, #8]
	uint32 EndPage = Nvm_GetPage(EndPageAdress);
 80007ba:	68b8      	ldr	r0, [r7, #8]
 80007bc:	f000 f82a 	bl	8000814 <Nvm_GetPage>
 80007c0:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 80007c2:	f002 f8d5 	bl	8002970 <HAL_FLASH_Unlock>
	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 80007c6:	4b12      	ldr	r3, [pc, #72]	@ (8000810 <FBL_NvM_EraseFlash_CALIBRATION+0x64>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
	EraseInitStruct.PageAddress = StartPage;
 80007cc:	4a10      	ldr	r2, [pc, #64]	@ (8000810 <FBL_NvM_EraseFlash_CALIBRATION+0x64>)
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbPages     = ((EndPage - StartPage)/FLASH_PAGE_SIZE) +1;
 80007d2:	687a      	ldr	r2, [r7, #4]
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	1ad3      	subs	r3, r2, r3
 80007d8:	0a9b      	lsrs	r3, r3, #10
 80007da:	3301      	adds	r3, #1
 80007dc:	4a0c      	ldr	r2, [pc, #48]	@ (8000810 <FBL_NvM_EraseFlash_CALIBRATION+0x64>)
 80007de:	60d3      	str	r3, [r2, #12]
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 80007e0:	463b      	mov	r3, r7
 80007e2:	4619      	mov	r1, r3
 80007e4:	480a      	ldr	r0, [pc, #40]	@ (8000810 <FBL_NvM_EraseFlash_CALIBRATION+0x64>)
 80007e6:	f002 f9b5 	bl	8002b54 <HAL_FLASHEx_Erase>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d003      	beq.n	80007f8 <FBL_NvM_EraseFlash_CALIBRATION+0x4c>
	{
		return HAL_FLASH_GetError ();
 80007f0:	f002 f8f4 	bl	80029dc <HAL_FLASH_GetError>
 80007f4:	4603      	mov	r3, r0
 80007f6:	e002      	b.n	80007fe <FBL_NvM_EraseFlash_CALIBRATION+0x52>
	}
	else
	{
		/* Do nothing. */
	}
	HAL_FLASH_Lock();
 80007f8:	f002 f8e0 	bl	80029bc <HAL_FLASH_Lock>
	return 0;
 80007fc:	2300      	movs	r3, #0
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3710      	adds	r7, #16
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	0800f800 	.word	0x0800f800
 800080c:	0800fbff 	.word	0x0800fbff
 8000810:	20000110 	.word	0x20000110

08000814 <Nvm_GetPage>:
uint32 Nvm_GetPage(uint32 Address)
{
 8000814:	b480      	push	{r7}
 8000816:	b085      	sub	sp, #20
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
	for (uint8 indx=0; indx < 128; indx++) if((Address < (0x08000000 + (FLASH_PAGE_SIZE *(indx + 1))) ) && (Address >= (0x08000000 + FLASH_PAGE_SIZE * indx))) return (0x08000000 + FLASH_PAGE_SIZE * indx);
 800081c:	2300      	movs	r3, #0
 800081e:	73fb      	strb	r3, [r7, #15]
 8000820:	e016      	b.n	8000850 <Nvm_GetPage+0x3c>
 8000822:	7bfb      	ldrb	r3, [r7, #15]
 8000824:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 8000828:	3301      	adds	r3, #1
 800082a:	029b      	lsls	r3, r3, #10
 800082c:	687a      	ldr	r2, [r7, #4]
 800082e:	429a      	cmp	r2, r3
 8000830:	d20b      	bcs.n	800084a <Nvm_GetPage+0x36>
 8000832:	7bfb      	ldrb	r3, [r7, #15]
 8000834:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 8000838:	029b      	lsls	r3, r3, #10
 800083a:	687a      	ldr	r2, [r7, #4]
 800083c:	429a      	cmp	r2, r3
 800083e:	d304      	bcc.n	800084a <Nvm_GetPage+0x36>
 8000840:	7bfb      	ldrb	r3, [r7, #15]
 8000842:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 8000846:	029b      	lsls	r3, r3, #10
 8000848:	e007      	b.n	800085a <Nvm_GetPage+0x46>
 800084a:	7bfb      	ldrb	r3, [r7, #15]
 800084c:	3301      	adds	r3, #1
 800084e:	73fb      	strb	r3, [r7, #15]
 8000850:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000854:	2b00      	cmp	r3, #0
 8000856:	dae4      	bge.n	8000822 <Nvm_GetPage+0xe>
	return 0;
 8000858:	2300      	movs	r3, #0
}
 800085a:	4618      	mov	r0, r3
 800085c:	3714      	adds	r7, #20
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr

08000864 <FBL_NvM_FlashWriteData>:
uint32 FBL_NvM_FlashWriteData(uint32 StartPageAddress, uint32 *Data, uint16 numberofwords)
{
 8000864:	b5b0      	push	{r4, r5, r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	4613      	mov	r3, r2
 8000870:	80fb      	strh	r3, [r7, #6]
  __ASM volatile ("cpsid i" : : : "memory");
 8000872:	b672      	cpsid	i
}
 8000874:	bf00      	nop
	__disable_irq();
	uint32 sofar=0;
 8000876:	2300      	movs	r3, #0
 8000878:	617b      	str	r3, [r7, #20]
	HAL_FLASH_Unlock();
 800087a:	f002 f879 	bl	8002970 <HAL_FLASH_Unlock>
	while (sofar<numberofwords)
 800087e:	e01b      	b.n	80008b8 <FBL_NvM_FlashWriteData+0x54>
	{
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress, Data[sofar]) == HAL_OK)
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	68ba      	ldr	r2, [r7, #8]
 8000886:	4413      	add	r3, r2
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	2200      	movs	r2, #0
 800088c:	461c      	mov	r4, r3
 800088e:	4615      	mov	r5, r2
 8000890:	4622      	mov	r2, r4
 8000892:	462b      	mov	r3, r5
 8000894:	68f9      	ldr	r1, [r7, #12]
 8000896:	2002      	movs	r0, #2
 8000898:	f001 ff08 	bl	80026ac <HAL_FLASH_Program>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d106      	bne.n	80008b0 <FBL_NvM_FlashWriteData+0x4c>
		{
			StartPageAddress += 4;
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	3304      	adds	r3, #4
 80008a6:	60fb      	str	r3, [r7, #12]
			sofar++;
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	3301      	adds	r3, #1
 80008ac:	617b      	str	r3, [r7, #20]
 80008ae:	e003      	b.n	80008b8 <FBL_NvM_FlashWriteData+0x54>
		}
		else
		{
			return HAL_FLASH_GetError ();
 80008b0:	f002 f894 	bl	80029dc <HAL_FLASH_GetError>
 80008b4:	4603      	mov	r3, r0
 80008b6:	e008      	b.n	80008ca <FBL_NvM_FlashWriteData+0x66>
	while (sofar<numberofwords)
 80008b8:	88fb      	ldrh	r3, [r7, #6]
 80008ba:	697a      	ldr	r2, [r7, #20]
 80008bc:	429a      	cmp	r2, r3
 80008be:	d3df      	bcc.n	8000880 <FBL_NvM_FlashWriteData+0x1c>
		}
	}
	HAL_FLASH_Lock();
 80008c0:	f002 f87c 	bl	80029bc <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 80008c4:	b662      	cpsie	i
}
 80008c6:	bf00      	nop
	__enable_irq();
	return 0;
 80008c8:	2300      	movs	r3, #0
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3718      	adds	r7, #24
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bdb0      	pop	{r4, r5, r7, pc}

080008d2 <FBL_NvM_FlashReadData>:
void FBL_NvM_FlashReadData(uint32 StartPageAddress, uint32 *RxBuf, uint16 numberofwords)
{
 80008d2:	b480      	push	{r7}
 80008d4:	b087      	sub	sp, #28
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	60f8      	str	r0, [r7, #12]
 80008da:	60b9      	str	r1, [r7, #8]
 80008dc:	4613      	mov	r3, r2
 80008de:	80fb      	strh	r3, [r7, #6]
  __ASM volatile ("cpsid i" : : : "memory");
 80008e0:	b672      	cpsid	i
}
 80008e2:	bf00      	nop
	__disable_irq();
	for (uint16 i = 0; i < numberofwords; i++) RxBuf[i] = *(__IO uint32 *)(StartPageAddress + (i * 4));
 80008e4:	2300      	movs	r3, #0
 80008e6:	82fb      	strh	r3, [r7, #22]
 80008e8:	e00e      	b.n	8000908 <FBL_NvM_FlashReadData+0x36>
 80008ea:	8afb      	ldrh	r3, [r7, #22]
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	461a      	mov	r2, r3
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	4413      	add	r3, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	8afb      	ldrh	r3, [r7, #22]
 80008f8:	009b      	lsls	r3, r3, #2
 80008fa:	68ba      	ldr	r2, [r7, #8]
 80008fc:	4413      	add	r3, r2
 80008fe:	680a      	ldr	r2, [r1, #0]
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	8afb      	ldrh	r3, [r7, #22]
 8000904:	3301      	adds	r3, #1
 8000906:	82fb      	strh	r3, [r7, #22]
 8000908:	8afa      	ldrh	r2, [r7, #22]
 800090a:	88fb      	ldrh	r3, [r7, #6]
 800090c:	429a      	cmp	r2, r3
 800090e:	d3ec      	bcc.n	80008ea <FBL_NvM_FlashReadData+0x18>
  __ASM volatile ("cpsie i" : : : "memory");
 8000910:	b662      	cpsie	i
}
 8000912:	bf00      	nop
	__enable_irq();
}
 8000914:	bf00      	nop
 8000916:	371c      	adds	r7, #28
 8000918:	46bd      	mov	sp, r7
 800091a:	bc80      	pop	{r7}
 800091c:	4770      	bx	lr
	...

08000920 <FBL_DiagService_DSC_RequestDownload>:

void FBL_DiagService_DSC_RequestDownload(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
	FBL_TxHeader.DLC = FBL_RxHeader.DLC;
 8000926:	4b37      	ldr	r3, [pc, #220]	@ (8000a04 <FBL_DiagService_DSC_RequestDownload+0xe4>)
 8000928:	691b      	ldr	r3, [r3, #16]
 800092a:	4a37      	ldr	r2, [pc, #220]	@ (8000a08 <FBL_DiagService_DSC_RequestDownload+0xe8>)
 800092c:	6113      	str	r3, [r2, #16]
	FBL_TxHeader.StdId = FBL_RxHeader.StdId + 1;
 800092e:	4b35      	ldr	r3, [pc, #212]	@ (8000a04 <FBL_DiagService_DSC_RequestDownload+0xe4>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	3301      	adds	r3, #1
 8000934:	4a34      	ldr	r2, [pc, #208]	@ (8000a08 <FBL_DiagService_DSC_RequestDownload+0xe8>)
 8000936:	6013      	str	r3, [r2, #0]
	FBL_TxFrame[0] = FBL_RxFrame[0];
 8000938:	4b34      	ldr	r3, [pc, #208]	@ (8000a0c <FBL_DiagService_DSC_RequestDownload+0xec>)
 800093a:	781a      	ldrb	r2, [r3, #0]
 800093c:	4b34      	ldr	r3, [pc, #208]	@ (8000a10 <FBL_DiagService_DSC_RequestDownload+0xf0>)
 800093e:	701a      	strb	r2, [r3, #0]
	FBL_TxFrame[1] = FBL_RxFrame[1] + 0x40;
 8000940:	4b32      	ldr	r3, [pc, #200]	@ (8000a0c <FBL_DiagService_DSC_RequestDownload+0xec>)
 8000942:	785b      	ldrb	r3, [r3, #1]
 8000944:	3340      	adds	r3, #64	@ 0x40
 8000946:	b2da      	uxtb	r2, r3
 8000948:	4b31      	ldr	r3, [pc, #196]	@ (8000a10 <FBL_DiagService_DSC_RequestDownload+0xf0>)
 800094a:	705a      	strb	r2, [r3, #1]
	FBL_TxFrame[2] = FBL_RxFrame[2];
 800094c:	4b2f      	ldr	r3, [pc, #188]	@ (8000a0c <FBL_DiagService_DSC_RequestDownload+0xec>)
 800094e:	789a      	ldrb	r2, [r3, #2]
 8000950:	4b2f      	ldr	r3, [pc, #188]	@ (8000a10 <FBL_DiagService_DSC_RequestDownload+0xf0>)
 8000952:	709a      	strb	r2, [r3, #2]
	FBL_TxFrame[3] = FBL_RxFrame[3];
 8000954:	4b2d      	ldr	r3, [pc, #180]	@ (8000a0c <FBL_DiagService_DSC_RequestDownload+0xec>)
 8000956:	78da      	ldrb	r2, [r3, #3]
 8000958:	4b2d      	ldr	r3, [pc, #180]	@ (8000a10 <FBL_DiagService_DSC_RequestDownload+0xf0>)
 800095a:	70da      	strb	r2, [r3, #3]
	FBL_TxFrame[4] = FBL_RxFrame[4];
 800095c:	4b2b      	ldr	r3, [pc, #172]	@ (8000a0c <FBL_DiagService_DSC_RequestDownload+0xec>)
 800095e:	791a      	ldrb	r2, [r3, #4]
 8000960:	4b2b      	ldr	r3, [pc, #172]	@ (8000a10 <FBL_DiagService_DSC_RequestDownload+0xf0>)
 8000962:	711a      	strb	r2, [r3, #4]
	HAL_CAN_AddTxMessage(&hcan, &FBL_TxHeader, FBL_TxFrame, &FBL_TxMailbox);
 8000964:	4b2b      	ldr	r3, [pc, #172]	@ (8000a14 <FBL_DiagService_DSC_RequestDownload+0xf4>)
 8000966:	4a2a      	ldr	r2, [pc, #168]	@ (8000a10 <FBL_DiagService_DSC_RequestDownload+0xf0>)
 8000968:	4927      	ldr	r1, [pc, #156]	@ (8000a08 <FBL_DiagService_DSC_RequestDownload+0xe8>)
 800096a:	482b      	ldr	r0, [pc, #172]	@ (8000a18 <FBL_DiagService_DSC_RequestDownload+0xf8>)
 800096c:	f001 f927 	bl	8001bbe <HAL_CAN_AddTxMessage>
	for(uint8 i = 0; i < 8 ; i++) FBL_TxFrame[i] = 0;
 8000970:	2300      	movs	r3, #0
 8000972:	71fb      	strb	r3, [r7, #7]
 8000974:	e006      	b.n	8000984 <FBL_DiagService_DSC_RequestDownload+0x64>
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	4a25      	ldr	r2, [pc, #148]	@ (8000a10 <FBL_DiagService_DSC_RequestDownload+0xf0>)
 800097a:	2100      	movs	r1, #0
 800097c:	54d1      	strb	r1, [r2, r3]
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	3301      	adds	r3, #1
 8000982:	71fb      	strb	r3, [r7, #7]
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	2b07      	cmp	r3, #7
 8000988:	d9f5      	bls.n	8000976 <FBL_DiagService_DSC_RequestDownload+0x56>
	FBL_TxHeader.DLC = 0;
 800098a:	4b1f      	ldr	r3, [pc, #124]	@ (8000a08 <FBL_DiagService_DSC_RequestDownload+0xe8>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
	FBL_TxHeader.ExtId = 0;
 8000990:	4b1d      	ldr	r3, [pc, #116]	@ (8000a08 <FBL_DiagService_DSC_RequestDownload+0xe8>)
 8000992:	2200      	movs	r2, #0
 8000994:	605a      	str	r2, [r3, #4]
	FBL_TxHeader.IDE = 0;
 8000996:	4b1c      	ldr	r3, [pc, #112]	@ (8000a08 <FBL_DiagService_DSC_RequestDownload+0xe8>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
	FBL_TxHeader.RTR = 0;
 800099c:	4b1a      	ldr	r3, [pc, #104]	@ (8000a08 <FBL_DiagService_DSC_RequestDownload+0xe8>)
 800099e:	2200      	movs	r2, #0
 80009a0:	60da      	str	r2, [r3, #12]
	FBL_TxHeader.StdId = 0;
 80009a2:	4b19      	ldr	r3, [pc, #100]	@ (8000a08 <FBL_DiagService_DSC_RequestDownload+0xe8>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
	FBL_TxHeader.TransmitGlobalTime = 0;
 80009a8:	4b17      	ldr	r3, [pc, #92]	@ (8000a08 <FBL_DiagService_DSC_RequestDownload+0xe8>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	751a      	strb	r2, [r3, #20]
	FBL_TxMailbox = 0;
 80009ae:	4b19      	ldr	r3, [pc, #100]	@ (8000a14 <FBL_DiagService_DSC_RequestDownload+0xf4>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
	FBL_RxHeader.StdId = 0;
 80009b4:	4b13      	ldr	r3, [pc, #76]	@ (8000a04 <FBL_DiagService_DSC_RequestDownload+0xe4>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
	FBL_RxHeader.DLC = 0;
 80009ba:	4b12      	ldr	r3, [pc, #72]	@ (8000a04 <FBL_DiagService_DSC_RequestDownload+0xe4>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
	FBL_RxHeader.ExtId = 0;
 80009c0:	4b10      	ldr	r3, [pc, #64]	@ (8000a04 <FBL_DiagService_DSC_RequestDownload+0xe4>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	605a      	str	r2, [r3, #4]
	FBL_RxHeader.FilterMatchIndex = 0;
 80009c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a04 <FBL_DiagService_DSC_RequestDownload+0xe4>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
	FBL_RxHeader.IDE = 0;
 80009cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000a04 <FBL_DiagService_DSC_RequestDownload+0xe4>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
	FBL_RxHeader.RTR = 0;
 80009d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000a04 <FBL_DiagService_DSC_RequestDownload+0xe4>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	60da      	str	r2, [r3, #12]
	FBL_RxHeader.Timestamp = 0;
 80009d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000a04 <FBL_DiagService_DSC_RequestDownload+0xe4>)
 80009da:	2200      	movs	r2, #0
 80009dc:	615a      	str	r2, [r3, #20]
	for(uint8 i = 0; i < 8; i++) FBL_RxFrame[i] = 0;
 80009de:	2300      	movs	r3, #0
 80009e0:	71bb      	strb	r3, [r7, #6]
 80009e2:	e006      	b.n	80009f2 <FBL_DiagService_DSC_RequestDownload+0xd2>
 80009e4:	79bb      	ldrb	r3, [r7, #6]
 80009e6:	4a09      	ldr	r2, [pc, #36]	@ (8000a0c <FBL_DiagService_DSC_RequestDownload+0xec>)
 80009e8:	2100      	movs	r1, #0
 80009ea:	54d1      	strb	r1, [r2, r3]
 80009ec:	79bb      	ldrb	r3, [r7, #6]
 80009ee:	3301      	adds	r3, #1
 80009f0:	71bb      	strb	r3, [r7, #6]
 80009f2:	79bb      	ldrb	r3, [r7, #6]
 80009f4:	2b07      	cmp	r3, #7
 80009f6:	d9f5      	bls.n	80009e4 <FBL_DiagService_DSC_RequestDownload+0xc4>
}
 80009f8:	bf00      	nop
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	200000b4 	.word	0x200000b4
 8000a08:	200000d0 	.word	0x200000d0
 8000a0c:	200000a4 	.word	0x200000a4
 8000a10:	200000ac 	.word	0x200000ac
 8000a14:	200000e8 	.word	0x200000e8
 8000a18:	2000003c 	.word	0x2000003c

08000a1c <FBL_DiagService_DSC_TransferData>:
void FBL_DiagService_DSC_TransferData(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
	if(PROGRAMMING == FBL_DSC_State)
 8000a22:	4b68      	ldr	r3, [pc, #416]	@ (8000bc4 <FBL_DiagService_DSC_TransferData+0x1a8>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	2b02      	cmp	r3, #2
 8000a28:	d13f      	bne.n	8000aaa <FBL_DiagService_DSC_TransferData+0x8e>
	{
		FBL_ProgrammingData = (FBL_RxFrame[6] << 24) | (FBL_RxFrame[5] << 16) | (FBL_RxFrame[4] << 8) | FBL_RxFrame[3];
 8000a2a:	4b67      	ldr	r3, [pc, #412]	@ (8000bc8 <FBL_DiagService_DSC_TransferData+0x1ac>)
 8000a2c:	799b      	ldrb	r3, [r3, #6]
 8000a2e:	061a      	lsls	r2, r3, #24
 8000a30:	4b65      	ldr	r3, [pc, #404]	@ (8000bc8 <FBL_DiagService_DSC_TransferData+0x1ac>)
 8000a32:	795b      	ldrb	r3, [r3, #5]
 8000a34:	041b      	lsls	r3, r3, #16
 8000a36:	431a      	orrs	r2, r3
 8000a38:	4b63      	ldr	r3, [pc, #396]	@ (8000bc8 <FBL_DiagService_DSC_TransferData+0x1ac>)
 8000a3a:	791b      	ldrb	r3, [r3, #4]
 8000a3c:	021b      	lsls	r3, r3, #8
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	4a61      	ldr	r2, [pc, #388]	@ (8000bc8 <FBL_DiagService_DSC_TransferData+0x1ac>)
 8000a42:	78d2      	ldrb	r2, [r2, #3]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	461a      	mov	r2, r3
 8000a48:	4b60      	ldr	r3, [pc, #384]	@ (8000bcc <FBL_DiagService_DSC_TransferData+0x1b0>)
 8000a4a:	601a      	str	r2, [r3, #0]
		FBL_NvM_FlashWriteData(FBL_ProgrammingAddress, &FBL_ProgrammingData, 1);
 8000a4c:	4b60      	ldr	r3, [pc, #384]	@ (8000bd0 <FBL_DiagService_DSC_TransferData+0x1b4>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2201      	movs	r2, #1
 8000a52:	495e      	ldr	r1, [pc, #376]	@ (8000bcc <FBL_DiagService_DSC_TransferData+0x1b0>)
 8000a54:	4618      	mov	r0, r3
 8000a56:	f7ff ff05 	bl	8000864 <FBL_NvM_FlashWriteData>
		FBL_ProgrammingAddress += 4;
 8000a5a:	4b5d      	ldr	r3, [pc, #372]	@ (8000bd0 <FBL_DiagService_DSC_TransferData+0x1b4>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	3304      	adds	r3, #4
 8000a60:	4a5b      	ldr	r2, [pc, #364]	@ (8000bd0 <FBL_DiagService_DSC_TransferData+0x1b4>)
 8000a62:	6013      	str	r3, [r2, #0]
		FBL_ProgrammingIndex += 1;
 8000a64:	4b5b      	ldr	r3, [pc, #364]	@ (8000bd4 <FBL_DiagService_DSC_TransferData+0x1b8>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	4a5a      	ldr	r2, [pc, #360]	@ (8000bd4 <FBL_DiagService_DSC_TransferData+0x1b8>)
 8000a6c:	6013      	str	r3, [r2, #0]
		FBL_TxHeader.DLC = FBL_RxHeader.DLC;
 8000a6e:	4b5a      	ldr	r3, [pc, #360]	@ (8000bd8 <FBL_DiagService_DSC_TransferData+0x1bc>)
 8000a70:	691b      	ldr	r3, [r3, #16]
 8000a72:	4a5a      	ldr	r2, [pc, #360]	@ (8000bdc <FBL_DiagService_DSC_TransferData+0x1c0>)
 8000a74:	6113      	str	r3, [r2, #16]
		FBL_TxHeader.StdId = FBL_RxHeader.StdId + 1;
 8000a76:	4b58      	ldr	r3, [pc, #352]	@ (8000bd8 <FBL_DiagService_DSC_TransferData+0x1bc>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	4a57      	ldr	r2, [pc, #348]	@ (8000bdc <FBL_DiagService_DSC_TransferData+0x1c0>)
 8000a7e:	6013      	str	r3, [r2, #0]
		FBL_TxFrame[0] = FBL_RxFrame[0];
 8000a80:	4b51      	ldr	r3, [pc, #324]	@ (8000bc8 <FBL_DiagService_DSC_TransferData+0x1ac>)
 8000a82:	781a      	ldrb	r2, [r3, #0]
 8000a84:	4b56      	ldr	r3, [pc, #344]	@ (8000be0 <FBL_DiagService_DSC_TransferData+0x1c4>)
 8000a86:	701a      	strb	r2, [r3, #0]
		FBL_TxFrame[1] = FBL_RxFrame[1] + 0x40;
 8000a88:	4b4f      	ldr	r3, [pc, #316]	@ (8000bc8 <FBL_DiagService_DSC_TransferData+0x1ac>)
 8000a8a:	785b      	ldrb	r3, [r3, #1]
 8000a8c:	3340      	adds	r3, #64	@ 0x40
 8000a8e:	b2da      	uxtb	r2, r3
 8000a90:	4b53      	ldr	r3, [pc, #332]	@ (8000be0 <FBL_DiagService_DSC_TransferData+0x1c4>)
 8000a92:	705a      	strb	r2, [r3, #1]
		FBL_TxFrame[2] = FBL_RxFrame[2];
 8000a94:	4b4c      	ldr	r3, [pc, #304]	@ (8000bc8 <FBL_DiagService_DSC_TransferData+0x1ac>)
 8000a96:	789a      	ldrb	r2, [r3, #2]
 8000a98:	4b51      	ldr	r3, [pc, #324]	@ (8000be0 <FBL_DiagService_DSC_TransferData+0x1c4>)
 8000a9a:	709a      	strb	r2, [r3, #2]
		HAL_CAN_AddTxMessage(&hcan, &FBL_TxHeader, FBL_TxFrame, &FBL_TxMailbox);
 8000a9c:	4b51      	ldr	r3, [pc, #324]	@ (8000be4 <FBL_DiagService_DSC_TransferData+0x1c8>)
 8000a9e:	4a50      	ldr	r2, [pc, #320]	@ (8000be0 <FBL_DiagService_DSC_TransferData+0x1c4>)
 8000aa0:	494e      	ldr	r1, [pc, #312]	@ (8000bdc <FBL_DiagService_DSC_TransferData+0x1c0>)
 8000aa2:	4851      	ldr	r0, [pc, #324]	@ (8000be8 <FBL_DiagService_DSC_TransferData+0x1cc>)
 8000aa4:	f001 f88b 	bl	8001bbe <HAL_CAN_AddTxMessage>
 8000aa8:	e043      	b.n	8000b32 <FBL_DiagService_DSC_TransferData+0x116>
	}
	else if(CALIBRATION == FBL_DSC_State)
 8000aaa:	4b46      	ldr	r3, [pc, #280]	@ (8000bc4 <FBL_DiagService_DSC_TransferData+0x1a8>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	2b04      	cmp	r3, #4
 8000ab0:	d13f      	bne.n	8000b32 <FBL_DiagService_DSC_TransferData+0x116>
	{
		FBL_ProgrammingData = (FBL_RxFrame[6] << 0) | (FBL_RxFrame[5] << 8) | (FBL_RxFrame[4] << 16) | (FBL_RxFrame[3] << 24);
 8000ab2:	4b45      	ldr	r3, [pc, #276]	@ (8000bc8 <FBL_DiagService_DSC_TransferData+0x1ac>)
 8000ab4:	799b      	ldrb	r3, [r3, #6]
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	4b43      	ldr	r3, [pc, #268]	@ (8000bc8 <FBL_DiagService_DSC_TransferData+0x1ac>)
 8000aba:	795b      	ldrb	r3, [r3, #5]
 8000abc:	021b      	lsls	r3, r3, #8
 8000abe:	431a      	orrs	r2, r3
 8000ac0:	4b41      	ldr	r3, [pc, #260]	@ (8000bc8 <FBL_DiagService_DSC_TransferData+0x1ac>)
 8000ac2:	791b      	ldrb	r3, [r3, #4]
 8000ac4:	041b      	lsls	r3, r3, #16
 8000ac6:	431a      	orrs	r2, r3
 8000ac8:	4b3f      	ldr	r3, [pc, #252]	@ (8000bc8 <FBL_DiagService_DSC_TransferData+0x1ac>)
 8000aca:	78db      	ldrb	r3, [r3, #3]
 8000acc:	061b      	lsls	r3, r3, #24
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	4b3e      	ldr	r3, [pc, #248]	@ (8000bcc <FBL_DiagService_DSC_TransferData+0x1b0>)
 8000ad4:	601a      	str	r2, [r3, #0]
		FBL_NvM_FlashWriteData(FBL_ProgrammingAddress, &FBL_ProgrammingData, 1);
 8000ad6:	4b3e      	ldr	r3, [pc, #248]	@ (8000bd0 <FBL_DiagService_DSC_TransferData+0x1b4>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	2201      	movs	r2, #1
 8000adc:	493b      	ldr	r1, [pc, #236]	@ (8000bcc <FBL_DiagService_DSC_TransferData+0x1b0>)
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f7ff fec0 	bl	8000864 <FBL_NvM_FlashWriteData>
		FBL_ProgrammingAddress += 4;
 8000ae4:	4b3a      	ldr	r3, [pc, #232]	@ (8000bd0 <FBL_DiagService_DSC_TransferData+0x1b4>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	3304      	adds	r3, #4
 8000aea:	4a39      	ldr	r2, [pc, #228]	@ (8000bd0 <FBL_DiagService_DSC_TransferData+0x1b4>)
 8000aec:	6013      	str	r3, [r2, #0]
		FBL_ProgrammingIndex += 1;
 8000aee:	4b39      	ldr	r3, [pc, #228]	@ (8000bd4 <FBL_DiagService_DSC_TransferData+0x1b8>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	3301      	adds	r3, #1
 8000af4:	4a37      	ldr	r2, [pc, #220]	@ (8000bd4 <FBL_DiagService_DSC_TransferData+0x1b8>)
 8000af6:	6013      	str	r3, [r2, #0]
		FBL_TxHeader.DLC = FBL_RxHeader.DLC;
 8000af8:	4b37      	ldr	r3, [pc, #220]	@ (8000bd8 <FBL_DiagService_DSC_TransferData+0x1bc>)
 8000afa:	691b      	ldr	r3, [r3, #16]
 8000afc:	4a37      	ldr	r2, [pc, #220]	@ (8000bdc <FBL_DiagService_DSC_TransferData+0x1c0>)
 8000afe:	6113      	str	r3, [r2, #16]
		FBL_TxHeader.StdId = FBL_RxHeader.StdId + 1;
 8000b00:	4b35      	ldr	r3, [pc, #212]	@ (8000bd8 <FBL_DiagService_DSC_TransferData+0x1bc>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	3301      	adds	r3, #1
 8000b06:	4a35      	ldr	r2, [pc, #212]	@ (8000bdc <FBL_DiagService_DSC_TransferData+0x1c0>)
 8000b08:	6013      	str	r3, [r2, #0]
		FBL_TxFrame[0] = FBL_RxFrame[0];
 8000b0a:	4b2f      	ldr	r3, [pc, #188]	@ (8000bc8 <FBL_DiagService_DSC_TransferData+0x1ac>)
 8000b0c:	781a      	ldrb	r2, [r3, #0]
 8000b0e:	4b34      	ldr	r3, [pc, #208]	@ (8000be0 <FBL_DiagService_DSC_TransferData+0x1c4>)
 8000b10:	701a      	strb	r2, [r3, #0]
		FBL_TxFrame[1] = FBL_RxFrame[1] + 0x40;
 8000b12:	4b2d      	ldr	r3, [pc, #180]	@ (8000bc8 <FBL_DiagService_DSC_TransferData+0x1ac>)
 8000b14:	785b      	ldrb	r3, [r3, #1]
 8000b16:	3340      	adds	r3, #64	@ 0x40
 8000b18:	b2da      	uxtb	r2, r3
 8000b1a:	4b31      	ldr	r3, [pc, #196]	@ (8000be0 <FBL_DiagService_DSC_TransferData+0x1c4>)
 8000b1c:	705a      	strb	r2, [r3, #1]
		FBL_TxFrame[2] = FBL_RxFrame[2];
 8000b1e:	4b2a      	ldr	r3, [pc, #168]	@ (8000bc8 <FBL_DiagService_DSC_TransferData+0x1ac>)
 8000b20:	789a      	ldrb	r2, [r3, #2]
 8000b22:	4b2f      	ldr	r3, [pc, #188]	@ (8000be0 <FBL_DiagService_DSC_TransferData+0x1c4>)
 8000b24:	709a      	strb	r2, [r3, #2]
		HAL_CAN_AddTxMessage(&hcan, &FBL_TxHeader, FBL_TxFrame, &FBL_TxMailbox);
 8000b26:	4b2f      	ldr	r3, [pc, #188]	@ (8000be4 <FBL_DiagService_DSC_TransferData+0x1c8>)
 8000b28:	4a2d      	ldr	r2, [pc, #180]	@ (8000be0 <FBL_DiagService_DSC_TransferData+0x1c4>)
 8000b2a:	492c      	ldr	r1, [pc, #176]	@ (8000bdc <FBL_DiagService_DSC_TransferData+0x1c0>)
 8000b2c:	482e      	ldr	r0, [pc, #184]	@ (8000be8 <FBL_DiagService_DSC_TransferData+0x1cc>)
 8000b2e:	f001 f846 	bl	8001bbe <HAL_CAN_AddTxMessage>
	}
	else
	{
		/* Do nothing. */
	}
	for(uint8 i = 0; i < 8 ; i++) FBL_TxFrame[i] = 0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	71fb      	strb	r3, [r7, #7]
 8000b36:	e006      	b.n	8000b46 <FBL_DiagService_DSC_TransferData+0x12a>
 8000b38:	79fb      	ldrb	r3, [r7, #7]
 8000b3a:	4a29      	ldr	r2, [pc, #164]	@ (8000be0 <FBL_DiagService_DSC_TransferData+0x1c4>)
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	54d1      	strb	r1, [r2, r3]
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	3301      	adds	r3, #1
 8000b44:	71fb      	strb	r3, [r7, #7]
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	2b07      	cmp	r3, #7
 8000b4a:	d9f5      	bls.n	8000b38 <FBL_DiagService_DSC_TransferData+0x11c>
	FBL_TxHeader.DLC = 0;
 8000b4c:	4b23      	ldr	r3, [pc, #140]	@ (8000bdc <FBL_DiagService_DSC_TransferData+0x1c0>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	611a      	str	r2, [r3, #16]
	FBL_TxHeader.ExtId = 0;
 8000b52:	4b22      	ldr	r3, [pc, #136]	@ (8000bdc <FBL_DiagService_DSC_TransferData+0x1c0>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	605a      	str	r2, [r3, #4]
	FBL_TxHeader.IDE = 0;
 8000b58:	4b20      	ldr	r3, [pc, #128]	@ (8000bdc <FBL_DiagService_DSC_TransferData+0x1c0>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
	FBL_TxHeader.RTR = 0;
 8000b5e:	4b1f      	ldr	r3, [pc, #124]	@ (8000bdc <FBL_DiagService_DSC_TransferData+0x1c0>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	60da      	str	r2, [r3, #12]
	FBL_TxHeader.StdId = 0;
 8000b64:	4b1d      	ldr	r3, [pc, #116]	@ (8000bdc <FBL_DiagService_DSC_TransferData+0x1c0>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
	FBL_TxHeader.TransmitGlobalTime = 0;
 8000b6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bdc <FBL_DiagService_DSC_TransferData+0x1c0>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	751a      	strb	r2, [r3, #20]
	FBL_TxMailbox = 0;
 8000b70:	4b1c      	ldr	r3, [pc, #112]	@ (8000be4 <FBL_DiagService_DSC_TransferData+0x1c8>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
	FBL_RxHeader.StdId = 0;
 8000b76:	4b18      	ldr	r3, [pc, #96]	@ (8000bd8 <FBL_DiagService_DSC_TransferData+0x1bc>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
	FBL_RxHeader.DLC = 0;
 8000b7c:	4b16      	ldr	r3, [pc, #88]	@ (8000bd8 <FBL_DiagService_DSC_TransferData+0x1bc>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	611a      	str	r2, [r3, #16]
	FBL_RxHeader.ExtId = 0;
 8000b82:	4b15      	ldr	r3, [pc, #84]	@ (8000bd8 <FBL_DiagService_DSC_TransferData+0x1bc>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	605a      	str	r2, [r3, #4]
	FBL_RxHeader.FilterMatchIndex = 0;
 8000b88:	4b13      	ldr	r3, [pc, #76]	@ (8000bd8 <FBL_DiagService_DSC_TransferData+0x1bc>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	619a      	str	r2, [r3, #24]
	FBL_RxHeader.IDE = 0;
 8000b8e:	4b12      	ldr	r3, [pc, #72]	@ (8000bd8 <FBL_DiagService_DSC_TransferData+0x1bc>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
	FBL_RxHeader.RTR = 0;
 8000b94:	4b10      	ldr	r3, [pc, #64]	@ (8000bd8 <FBL_DiagService_DSC_TransferData+0x1bc>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	60da      	str	r2, [r3, #12]
	FBL_RxHeader.Timestamp = 0;
 8000b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd8 <FBL_DiagService_DSC_TransferData+0x1bc>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	615a      	str	r2, [r3, #20]
	for(uint8 i = 0; i < 8; i++) FBL_RxFrame[i] = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	71bb      	strb	r3, [r7, #6]
 8000ba4:	e006      	b.n	8000bb4 <FBL_DiagService_DSC_TransferData+0x198>
 8000ba6:	79bb      	ldrb	r3, [r7, #6]
 8000ba8:	4a07      	ldr	r2, [pc, #28]	@ (8000bc8 <FBL_DiagService_DSC_TransferData+0x1ac>)
 8000baa:	2100      	movs	r1, #0
 8000bac:	54d1      	strb	r1, [r2, r3]
 8000bae:	79bb      	ldrb	r3, [r7, #6]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	71bb      	strb	r3, [r7, #6]
 8000bb4:	79bb      	ldrb	r3, [r7, #6]
 8000bb6:	2b07      	cmp	r3, #7
 8000bb8:	d9f5      	bls.n	8000ba6 <FBL_DiagService_DSC_TransferData+0x18a>
}
 8000bba:	bf00      	nop
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000004 	.word	0x20000004
 8000bc8:	200000a4 	.word	0x200000a4
 8000bcc:	200000ec 	.word	0x200000ec
 8000bd0:	200000f4 	.word	0x200000f4
 8000bd4:	200000f0 	.word	0x200000f0
 8000bd8:	200000b4 	.word	0x200000b4
 8000bdc:	200000d0 	.word	0x200000d0
 8000be0:	200000ac 	.word	0x200000ac
 8000be4:	200000e8 	.word	0x200000e8
 8000be8:	2000003c 	.word	0x2000003c

08000bec <FBL_DiagService_DSC_RequestTransferExit>:
void FBL_DiagService_DSC_RequestTransferExit(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
	FBL_TxHeader.DLC = FBL_RxHeader.DLC;
 8000bf2:	4b33      	ldr	r3, [pc, #204]	@ (8000cc0 <FBL_DiagService_DSC_RequestTransferExit+0xd4>)
 8000bf4:	691b      	ldr	r3, [r3, #16]
 8000bf6:	4a33      	ldr	r2, [pc, #204]	@ (8000cc4 <FBL_DiagService_DSC_RequestTransferExit+0xd8>)
 8000bf8:	6113      	str	r3, [r2, #16]
	FBL_TxHeader.StdId = FBL_RxHeader.StdId + 1;
 8000bfa:	4b31      	ldr	r3, [pc, #196]	@ (8000cc0 <FBL_DiagService_DSC_RequestTransferExit+0xd4>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	4a30      	ldr	r2, [pc, #192]	@ (8000cc4 <FBL_DiagService_DSC_RequestTransferExit+0xd8>)
 8000c02:	6013      	str	r3, [r2, #0]
	FBL_TxFrame[0] = FBL_RxFrame[0];
 8000c04:	4b30      	ldr	r3, [pc, #192]	@ (8000cc8 <FBL_DiagService_DSC_RequestTransferExit+0xdc>)
 8000c06:	781a      	ldrb	r2, [r3, #0]
 8000c08:	4b30      	ldr	r3, [pc, #192]	@ (8000ccc <FBL_DiagService_DSC_RequestTransferExit+0xe0>)
 8000c0a:	701a      	strb	r2, [r3, #0]
	FBL_TxFrame[1] = FBL_RxFrame[1] + 0x40;
 8000c0c:	4b2e      	ldr	r3, [pc, #184]	@ (8000cc8 <FBL_DiagService_DSC_RequestTransferExit+0xdc>)
 8000c0e:	785b      	ldrb	r3, [r3, #1]
 8000c10:	3340      	adds	r3, #64	@ 0x40
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	4b2d      	ldr	r3, [pc, #180]	@ (8000ccc <FBL_DiagService_DSC_RequestTransferExit+0xe0>)
 8000c16:	705a      	strb	r2, [r3, #1]
	FBL_TxFrame[2] = FBL_RxFrame[2];
 8000c18:	4b2b      	ldr	r3, [pc, #172]	@ (8000cc8 <FBL_DiagService_DSC_RequestTransferExit+0xdc>)
 8000c1a:	789a      	ldrb	r2, [r3, #2]
 8000c1c:	4b2b      	ldr	r3, [pc, #172]	@ (8000ccc <FBL_DiagService_DSC_RequestTransferExit+0xe0>)
 8000c1e:	709a      	strb	r2, [r3, #2]
	HAL_CAN_AddTxMessage(&hcan, &FBL_TxHeader, FBL_TxFrame, &FBL_TxMailbox);
 8000c20:	4b2b      	ldr	r3, [pc, #172]	@ (8000cd0 <FBL_DiagService_DSC_RequestTransferExit+0xe4>)
 8000c22:	4a2a      	ldr	r2, [pc, #168]	@ (8000ccc <FBL_DiagService_DSC_RequestTransferExit+0xe0>)
 8000c24:	4927      	ldr	r1, [pc, #156]	@ (8000cc4 <FBL_DiagService_DSC_RequestTransferExit+0xd8>)
 8000c26:	482b      	ldr	r0, [pc, #172]	@ (8000cd4 <FBL_DiagService_DSC_RequestTransferExit+0xe8>)
 8000c28:	f000 ffc9 	bl	8001bbe <HAL_CAN_AddTxMessage>
	for(uint8 i = 0; i < 8 ; i++) FBL_TxFrame[i] = 0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	71fb      	strb	r3, [r7, #7]
 8000c30:	e006      	b.n	8000c40 <FBL_DiagService_DSC_RequestTransferExit+0x54>
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	4a25      	ldr	r2, [pc, #148]	@ (8000ccc <FBL_DiagService_DSC_RequestTransferExit+0xe0>)
 8000c36:	2100      	movs	r1, #0
 8000c38:	54d1      	strb	r1, [r2, r3]
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	71fb      	strb	r3, [r7, #7]
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	2b07      	cmp	r3, #7
 8000c44:	d9f5      	bls.n	8000c32 <FBL_DiagService_DSC_RequestTransferExit+0x46>
	FBL_TxHeader.DLC = 0;
 8000c46:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc4 <FBL_DiagService_DSC_RequestTransferExit+0xd8>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	611a      	str	r2, [r3, #16]
	FBL_TxHeader.ExtId = 0;
 8000c4c:	4b1d      	ldr	r3, [pc, #116]	@ (8000cc4 <FBL_DiagService_DSC_RequestTransferExit+0xd8>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	605a      	str	r2, [r3, #4]
	FBL_TxHeader.IDE = 0;
 8000c52:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc4 <FBL_DiagService_DSC_RequestTransferExit+0xd8>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
	FBL_TxHeader.RTR = 0;
 8000c58:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc4 <FBL_DiagService_DSC_RequestTransferExit+0xd8>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	60da      	str	r2, [r3, #12]
	FBL_TxHeader.StdId = 0;
 8000c5e:	4b19      	ldr	r3, [pc, #100]	@ (8000cc4 <FBL_DiagService_DSC_RequestTransferExit+0xd8>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
	FBL_TxHeader.TransmitGlobalTime = 0;
 8000c64:	4b17      	ldr	r3, [pc, #92]	@ (8000cc4 <FBL_DiagService_DSC_RequestTransferExit+0xd8>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	751a      	strb	r2, [r3, #20]
	FBL_TxMailbox = 0;
 8000c6a:	4b19      	ldr	r3, [pc, #100]	@ (8000cd0 <FBL_DiagService_DSC_RequestTransferExit+0xe4>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
	FBL_RxHeader.StdId = 0;
 8000c70:	4b13      	ldr	r3, [pc, #76]	@ (8000cc0 <FBL_DiagService_DSC_RequestTransferExit+0xd4>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
	FBL_RxHeader.DLC = 0;
 8000c76:	4b12      	ldr	r3, [pc, #72]	@ (8000cc0 <FBL_DiagService_DSC_RequestTransferExit+0xd4>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	611a      	str	r2, [r3, #16]
	FBL_RxHeader.ExtId = 0;
 8000c7c:	4b10      	ldr	r3, [pc, #64]	@ (8000cc0 <FBL_DiagService_DSC_RequestTransferExit+0xd4>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	605a      	str	r2, [r3, #4]
	FBL_RxHeader.FilterMatchIndex = 0;
 8000c82:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc0 <FBL_DiagService_DSC_RequestTransferExit+0xd4>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	619a      	str	r2, [r3, #24]
	FBL_RxHeader.IDE = 0;
 8000c88:	4b0d      	ldr	r3, [pc, #52]	@ (8000cc0 <FBL_DiagService_DSC_RequestTransferExit+0xd4>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
	FBL_RxHeader.RTR = 0;
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc0 <FBL_DiagService_DSC_RequestTransferExit+0xd4>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	60da      	str	r2, [r3, #12]
	FBL_RxHeader.Timestamp = 0;
 8000c94:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc0 <FBL_DiagService_DSC_RequestTransferExit+0xd4>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	615a      	str	r2, [r3, #20]
	for(uint8 i = 0; i < 8; i++) FBL_RxFrame[i] = 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	71bb      	strb	r3, [r7, #6]
 8000c9e:	e006      	b.n	8000cae <FBL_DiagService_DSC_RequestTransferExit+0xc2>
 8000ca0:	79bb      	ldrb	r3, [r7, #6]
 8000ca2:	4a09      	ldr	r2, [pc, #36]	@ (8000cc8 <FBL_DiagService_DSC_RequestTransferExit+0xdc>)
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	54d1      	strb	r1, [r2, r3]
 8000ca8:	79bb      	ldrb	r3, [r7, #6]
 8000caa:	3301      	adds	r3, #1
 8000cac:	71bb      	strb	r3, [r7, #6]
 8000cae:	79bb      	ldrb	r3, [r7, #6]
 8000cb0:	2b07      	cmp	r3, #7
 8000cb2:	d9f5      	bls.n	8000ca0 <FBL_DiagService_DSC_RequestTransferExit+0xb4>
}
 8000cb4:	bf00      	nop
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	200000b4 	.word	0x200000b4
 8000cc4:	200000d0 	.word	0x200000d0
 8000cc8:	200000a4 	.word	0x200000a4
 8000ccc:	200000ac 	.word	0x200000ac
 8000cd0:	200000e8 	.word	0x200000e8
 8000cd4:	2000003c 	.word	0x2000003c

08000cd8 <FBL_DiagService_RAR_MassEraseCALIBRATION>:
void FBL_DiagService_RAR_MassEraseCALIBRATION(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
	FBL_TxHeader.DLC = 0x05;
 8000cde:	4b34      	ldr	r3, [pc, #208]	@ (8000db0 <FBL_DiagService_RAR_MassEraseCALIBRATION+0xd8>)
 8000ce0:	2205      	movs	r2, #5
 8000ce2:	611a      	str	r2, [r3, #16]
	FBL_TxHeader.StdId = FBL_RxHeader.StdId + 1;
 8000ce4:	4b33      	ldr	r3, [pc, #204]	@ (8000db4 <FBL_DiagService_RAR_MassEraseCALIBRATION+0xdc>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	4a31      	ldr	r2, [pc, #196]	@ (8000db0 <FBL_DiagService_RAR_MassEraseCALIBRATION+0xd8>)
 8000cec:	6013      	str	r3, [r2, #0]
	FBL_TxFrame[0] = 0x04;
 8000cee:	4b32      	ldr	r3, [pc, #200]	@ (8000db8 <FBL_DiagService_RAR_MassEraseCALIBRATION+0xe0>)
 8000cf0:	2204      	movs	r2, #4
 8000cf2:	701a      	strb	r2, [r3, #0]
	FBL_TxFrame[1] = 0x71;
 8000cf4:	4b30      	ldr	r3, [pc, #192]	@ (8000db8 <FBL_DiagService_RAR_MassEraseCALIBRATION+0xe0>)
 8000cf6:	2271      	movs	r2, #113	@ 0x71
 8000cf8:	705a      	strb	r2, [r3, #1]
	FBL_TxFrame[2] = 0x00;
 8000cfa:	4b2f      	ldr	r3, [pc, #188]	@ (8000db8 <FBL_DiagService_RAR_MassEraseCALIBRATION+0xe0>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	709a      	strb	r2, [r3, #2]
	FBL_TxFrame[3] = 0x00;
 8000d00:	4b2d      	ldr	r3, [pc, #180]	@ (8000db8 <FBL_DiagService_RAR_MassEraseCALIBRATION+0xe0>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	70da      	strb	r2, [r3, #3]
	FBL_TxFrame[4] = 0x02;
 8000d06:	4b2c      	ldr	r3, [pc, #176]	@ (8000db8 <FBL_DiagService_RAR_MassEraseCALIBRATION+0xe0>)
 8000d08:	2202      	movs	r2, #2
 8000d0a:	711a      	strb	r2, [r3, #4]
	HAL_CAN_AddTxMessage(&hcan, &FBL_TxHeader, FBL_TxFrame, &FBL_TxMailbox);
 8000d0c:	4b2b      	ldr	r3, [pc, #172]	@ (8000dbc <FBL_DiagService_RAR_MassEraseCALIBRATION+0xe4>)
 8000d0e:	4a2a      	ldr	r2, [pc, #168]	@ (8000db8 <FBL_DiagService_RAR_MassEraseCALIBRATION+0xe0>)
 8000d10:	4927      	ldr	r1, [pc, #156]	@ (8000db0 <FBL_DiagService_RAR_MassEraseCALIBRATION+0xd8>)
 8000d12:	482b      	ldr	r0, [pc, #172]	@ (8000dc0 <FBL_DiagService_RAR_MassEraseCALIBRATION+0xe8>)
 8000d14:	f000 ff53 	bl	8001bbe <HAL_CAN_AddTxMessage>
	FBL_NvM_EraseFlash_CALIBRATION();
 8000d18:	f7ff fd48 	bl	80007ac <FBL_NvM_EraseFlash_CALIBRATION>
	for(uint8 i = 0; i < 8 ; i++) FBL_TxFrame[i] = 0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	71fb      	strb	r3, [r7, #7]
 8000d20:	e006      	b.n	8000d30 <FBL_DiagService_RAR_MassEraseCALIBRATION+0x58>
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	4a24      	ldr	r2, [pc, #144]	@ (8000db8 <FBL_DiagService_RAR_MassEraseCALIBRATION+0xe0>)
 8000d26:	2100      	movs	r1, #0
 8000d28:	54d1      	strb	r1, [r2, r3]
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	71fb      	strb	r3, [r7, #7]
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	2b07      	cmp	r3, #7
 8000d34:	d9f5      	bls.n	8000d22 <FBL_DiagService_RAR_MassEraseCALIBRATION+0x4a>
	FBL_TxHeader.DLC = 0;
 8000d36:	4b1e      	ldr	r3, [pc, #120]	@ (8000db0 <FBL_DiagService_RAR_MassEraseCALIBRATION+0xd8>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	611a      	str	r2, [r3, #16]
	FBL_TxHeader.ExtId = 0;
 8000d3c:	4b1c      	ldr	r3, [pc, #112]	@ (8000db0 <FBL_DiagService_RAR_MassEraseCALIBRATION+0xd8>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	605a      	str	r2, [r3, #4]
	FBL_TxHeader.IDE = 0;
 8000d42:	4b1b      	ldr	r3, [pc, #108]	@ (8000db0 <FBL_DiagService_RAR_MassEraseCALIBRATION+0xd8>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]
	FBL_TxHeader.RTR = 0;
 8000d48:	4b19      	ldr	r3, [pc, #100]	@ (8000db0 <FBL_DiagService_RAR_MassEraseCALIBRATION+0xd8>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	60da      	str	r2, [r3, #12]
	FBL_TxHeader.StdId = 0;
 8000d4e:	4b18      	ldr	r3, [pc, #96]	@ (8000db0 <FBL_DiagService_RAR_MassEraseCALIBRATION+0xd8>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
	FBL_TxHeader.TransmitGlobalTime = 0;
 8000d54:	4b16      	ldr	r3, [pc, #88]	@ (8000db0 <FBL_DiagService_RAR_MassEraseCALIBRATION+0xd8>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	751a      	strb	r2, [r3, #20]
	FBL_TxMailbox = 0;
 8000d5a:	4b18      	ldr	r3, [pc, #96]	@ (8000dbc <FBL_DiagService_RAR_MassEraseCALIBRATION+0xe4>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
	FBL_RxHeader.StdId = 0;
 8000d60:	4b14      	ldr	r3, [pc, #80]	@ (8000db4 <FBL_DiagService_RAR_MassEraseCALIBRATION+0xdc>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
	FBL_RxHeader.DLC = 0;
 8000d66:	4b13      	ldr	r3, [pc, #76]	@ (8000db4 <FBL_DiagService_RAR_MassEraseCALIBRATION+0xdc>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	611a      	str	r2, [r3, #16]
	FBL_RxHeader.ExtId = 0;
 8000d6c:	4b11      	ldr	r3, [pc, #68]	@ (8000db4 <FBL_DiagService_RAR_MassEraseCALIBRATION+0xdc>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	605a      	str	r2, [r3, #4]
	FBL_RxHeader.FilterMatchIndex = 0;
 8000d72:	4b10      	ldr	r3, [pc, #64]	@ (8000db4 <FBL_DiagService_RAR_MassEraseCALIBRATION+0xdc>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]
	FBL_RxHeader.IDE = 0;
 8000d78:	4b0e      	ldr	r3, [pc, #56]	@ (8000db4 <FBL_DiagService_RAR_MassEraseCALIBRATION+0xdc>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]
	FBL_RxHeader.RTR = 0;
 8000d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000db4 <FBL_DiagService_RAR_MassEraseCALIBRATION+0xdc>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	60da      	str	r2, [r3, #12]
	FBL_RxHeader.Timestamp = 0;
 8000d84:	4b0b      	ldr	r3, [pc, #44]	@ (8000db4 <FBL_DiagService_RAR_MassEraseCALIBRATION+0xdc>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	615a      	str	r2, [r3, #20]
	for(uint8 i = 0; i < 8; i++) FBL_RxFrame[i] = 0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	71bb      	strb	r3, [r7, #6]
 8000d8e:	e006      	b.n	8000d9e <FBL_DiagService_RAR_MassEraseCALIBRATION+0xc6>
 8000d90:	79bb      	ldrb	r3, [r7, #6]
 8000d92:	4a0c      	ldr	r2, [pc, #48]	@ (8000dc4 <FBL_DiagService_RAR_MassEraseCALIBRATION+0xec>)
 8000d94:	2100      	movs	r1, #0
 8000d96:	54d1      	strb	r1, [r2, r3]
 8000d98:	79bb      	ldrb	r3, [r7, #6]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	71bb      	strb	r3, [r7, #6]
 8000d9e:	79bb      	ldrb	r3, [r7, #6]
 8000da0:	2b07      	cmp	r3, #7
 8000da2:	d9f5      	bls.n	8000d90 <FBL_DiagService_RAR_MassEraseCALIBRATION+0xb8>
}
 8000da4:	bf00      	nop
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	200000d0 	.word	0x200000d0
 8000db4:	200000b4 	.word	0x200000b4
 8000db8:	200000ac 	.word	0x200000ac
 8000dbc:	200000e8 	.word	0x200000e8
 8000dc0:	2000003c 	.word	0x2000003c
 8000dc4:	200000a4 	.word	0x200000a4

08000dc8 <FBL_DiagService_RAR_MassEraseAPPL>:
void FBL_DiagService_RAR_MassEraseAPPL(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
	FBL_TxHeader.DLC = FBL_RxHeader.DLC;
 8000dce:	4b34      	ldr	r3, [pc, #208]	@ (8000ea0 <FBL_DiagService_RAR_MassEraseAPPL+0xd8>)
 8000dd0:	691b      	ldr	r3, [r3, #16]
 8000dd2:	4a34      	ldr	r2, [pc, #208]	@ (8000ea4 <FBL_DiagService_RAR_MassEraseAPPL+0xdc>)
 8000dd4:	6113      	str	r3, [r2, #16]
	FBL_TxHeader.StdId = FBL_RxHeader.StdId + 1;
 8000dd6:	4b32      	ldr	r3, [pc, #200]	@ (8000ea0 <FBL_DiagService_RAR_MassEraseAPPL+0xd8>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	4a31      	ldr	r2, [pc, #196]	@ (8000ea4 <FBL_DiagService_RAR_MassEraseAPPL+0xdc>)
 8000dde:	6013      	str	r3, [r2, #0]
	FBL_TxFrame[0] = FBL_RxFrame[0];
 8000de0:	4b31      	ldr	r3, [pc, #196]	@ (8000ea8 <FBL_DiagService_RAR_MassEraseAPPL+0xe0>)
 8000de2:	781a      	ldrb	r2, [r3, #0]
 8000de4:	4b31      	ldr	r3, [pc, #196]	@ (8000eac <FBL_DiagService_RAR_MassEraseAPPL+0xe4>)
 8000de6:	701a      	strb	r2, [r3, #0]
	FBL_TxFrame[1] = FBL_RxFrame[1] + 0x40;
 8000de8:	4b2f      	ldr	r3, [pc, #188]	@ (8000ea8 <FBL_DiagService_RAR_MassEraseAPPL+0xe0>)
 8000dea:	785b      	ldrb	r3, [r3, #1]
 8000dec:	3340      	adds	r3, #64	@ 0x40
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	4b2e      	ldr	r3, [pc, #184]	@ (8000eac <FBL_DiagService_RAR_MassEraseAPPL+0xe4>)
 8000df2:	705a      	strb	r2, [r3, #1]
	FBL_TxFrame[2] = FBL_RxFrame[2];
 8000df4:	4b2c      	ldr	r3, [pc, #176]	@ (8000ea8 <FBL_DiagService_RAR_MassEraseAPPL+0xe0>)
 8000df6:	789a      	ldrb	r2, [r3, #2]
 8000df8:	4b2c      	ldr	r3, [pc, #176]	@ (8000eac <FBL_DiagService_RAR_MassEraseAPPL+0xe4>)
 8000dfa:	709a      	strb	r2, [r3, #2]
	HAL_CAN_AddTxMessage(&hcan, &FBL_TxHeader, FBL_TxFrame, &FBL_TxMailbox);
 8000dfc:	4b2c      	ldr	r3, [pc, #176]	@ (8000eb0 <FBL_DiagService_RAR_MassEraseAPPL+0xe8>)
 8000dfe:	4a2b      	ldr	r2, [pc, #172]	@ (8000eac <FBL_DiagService_RAR_MassEraseAPPL+0xe4>)
 8000e00:	4928      	ldr	r1, [pc, #160]	@ (8000ea4 <FBL_DiagService_RAR_MassEraseAPPL+0xdc>)
 8000e02:	482c      	ldr	r0, [pc, #176]	@ (8000eb4 <FBL_DiagService_RAR_MassEraseAPPL+0xec>)
 8000e04:	f000 fedb 	bl	8001bbe <HAL_CAN_AddTxMessage>
	FBL_NvM_EraseFlash_APPL();
 8000e08:	f7ff fc9c 	bl	8000744 <FBL_NvM_EraseFlash_APPL>
	for(uint8 i = 0; i < 8 ; i++) FBL_TxFrame[i] = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	71fb      	strb	r3, [r7, #7]
 8000e10:	e006      	b.n	8000e20 <FBL_DiagService_RAR_MassEraseAPPL+0x58>
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	4a25      	ldr	r2, [pc, #148]	@ (8000eac <FBL_DiagService_RAR_MassEraseAPPL+0xe4>)
 8000e16:	2100      	movs	r1, #0
 8000e18:	54d1      	strb	r1, [r2, r3]
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	71fb      	strb	r3, [r7, #7]
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	2b07      	cmp	r3, #7
 8000e24:	d9f5      	bls.n	8000e12 <FBL_DiagService_RAR_MassEraseAPPL+0x4a>
	FBL_TxHeader.DLC = 0;
 8000e26:	4b1f      	ldr	r3, [pc, #124]	@ (8000ea4 <FBL_DiagService_RAR_MassEraseAPPL+0xdc>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	611a      	str	r2, [r3, #16]
	FBL_TxHeader.ExtId = 0;
 8000e2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ea4 <FBL_DiagService_RAR_MassEraseAPPL+0xdc>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	605a      	str	r2, [r3, #4]
	FBL_TxHeader.IDE = 0;
 8000e32:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea4 <FBL_DiagService_RAR_MassEraseAPPL+0xdc>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	609a      	str	r2, [r3, #8]
	FBL_TxHeader.RTR = 0;
 8000e38:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea4 <FBL_DiagService_RAR_MassEraseAPPL+0xdc>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	60da      	str	r2, [r3, #12]
	FBL_TxHeader.StdId = 0;
 8000e3e:	4b19      	ldr	r3, [pc, #100]	@ (8000ea4 <FBL_DiagService_RAR_MassEraseAPPL+0xdc>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
	FBL_TxHeader.TransmitGlobalTime = 0;
 8000e44:	4b17      	ldr	r3, [pc, #92]	@ (8000ea4 <FBL_DiagService_RAR_MassEraseAPPL+0xdc>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	751a      	strb	r2, [r3, #20]
	FBL_TxMailbox = 0;
 8000e4a:	4b19      	ldr	r3, [pc, #100]	@ (8000eb0 <FBL_DiagService_RAR_MassEraseAPPL+0xe8>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
	FBL_RxHeader.StdId = 0;
 8000e50:	4b13      	ldr	r3, [pc, #76]	@ (8000ea0 <FBL_DiagService_RAR_MassEraseAPPL+0xd8>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
	FBL_RxHeader.DLC = 0;
 8000e56:	4b12      	ldr	r3, [pc, #72]	@ (8000ea0 <FBL_DiagService_RAR_MassEraseAPPL+0xd8>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	611a      	str	r2, [r3, #16]
	FBL_RxHeader.ExtId = 0;
 8000e5c:	4b10      	ldr	r3, [pc, #64]	@ (8000ea0 <FBL_DiagService_RAR_MassEraseAPPL+0xd8>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	605a      	str	r2, [r3, #4]
	FBL_RxHeader.FilterMatchIndex = 0;
 8000e62:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea0 <FBL_DiagService_RAR_MassEraseAPPL+0xd8>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	619a      	str	r2, [r3, #24]
	FBL_RxHeader.IDE = 0;
 8000e68:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea0 <FBL_DiagService_RAR_MassEraseAPPL+0xd8>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	609a      	str	r2, [r3, #8]
	FBL_RxHeader.RTR = 0;
 8000e6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea0 <FBL_DiagService_RAR_MassEraseAPPL+0xd8>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	60da      	str	r2, [r3, #12]
	FBL_RxHeader.Timestamp = 0;
 8000e74:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea0 <FBL_DiagService_RAR_MassEraseAPPL+0xd8>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	615a      	str	r2, [r3, #20]
	for(uint8 i = 0; i < 8; i++) FBL_RxFrame[i] = 0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	71bb      	strb	r3, [r7, #6]
 8000e7e:	e006      	b.n	8000e8e <FBL_DiagService_RAR_MassEraseAPPL+0xc6>
 8000e80:	79bb      	ldrb	r3, [r7, #6]
 8000e82:	4a09      	ldr	r2, [pc, #36]	@ (8000ea8 <FBL_DiagService_RAR_MassEraseAPPL+0xe0>)
 8000e84:	2100      	movs	r1, #0
 8000e86:	54d1      	strb	r1, [r2, r3]
 8000e88:	79bb      	ldrb	r3, [r7, #6]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	71bb      	strb	r3, [r7, #6]
 8000e8e:	79bb      	ldrb	r3, [r7, #6]
 8000e90:	2b07      	cmp	r3, #7
 8000e92:	d9f5      	bls.n	8000e80 <FBL_DiagService_RAR_MassEraseAPPL+0xb8>
}
 8000e94:	bf00      	nop
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	200000b4 	.word	0x200000b4
 8000ea4:	200000d0 	.word	0x200000d0
 8000ea8:	200000a4 	.word	0x200000a4
 8000eac:	200000ac 	.word	0x200000ac
 8000eb0:	200000e8 	.word	0x200000e8
 8000eb4:	2000003c 	.word	0x2000003c

08000eb8 <FBL_JumpToAppl>:
void FBL_JumpToAppl(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
	typedef void (*pFunction)(void);
	static uint32 app_address = APPL_START_ADDRESS;
	static pFunction app_entry;
	uint32 msp_value = *((uint32*)app_address);
 8000ebe:	4b1e      	ldr	r3, [pc, #120]	@ (8000f38 <FBL_JumpToAppl+0x80>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec6:	b672      	cpsid	i
}
 8000ec8:	bf00      	nop
	__disable_irq(); // disable interrupts because the controller can't alone and will have interrupts triggered in the application for some reason...
	HAL_NVIC_ClearPendingIRQ(CAN1_SCE_IRQn); // manually clear the interrupts because why not...
 8000eca:	2016      	movs	r0, #22
 8000ecc:	f001 fbdf 	bl	800268e <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(CAN1_RX1_IRQn);
 8000ed0:	2015      	movs	r0, #21
 8000ed2:	f001 fbdc 	bl	800268e <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(USB_LP_CAN1_RX0_IRQn);
 8000ed6:	2014      	movs	r0, #20
 8000ed8:	f001 fbd9 	bl	800268e <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(USB_HP_CAN1_TX_IRQn);
 8000edc:	2013      	movs	r0, #19
 8000ede:	f001 fbd6 	bl	800268e <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(RCC_IRQn);
 8000ee2:	2005      	movs	r0, #5
 8000ee4:	f001 fbd3 	bl	800268e <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(FLASH_IRQn);
 8000ee8:	2004      	movs	r0, #4
 8000eea:	f001 fbd0 	bl	800268e <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(PVD_IRQn);
 8000eee:	2001      	movs	r0, #1
 8000ef0:	f001 fbcd 	bl	800268e <HAL_NVIC_ClearPendingIRQ>
	SysTick->CTRL = 0; // manually disable sys tick because it will not by itself...
 8000ef4:	4b11      	ldr	r3, [pc, #68]	@ (8000f3c <FBL_JumpToAppl+0x84>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 8000efa:	4b10      	ldr	r3, [pc, #64]	@ (8000f3c <FBL_JumpToAppl+0x84>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8000f00:	4b0e      	ldr	r3, [pc, #56]	@ (8000f3c <FBL_JumpToAppl+0x84>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
	SCB->VTOR = app_address;
 8000f06:	4a0e      	ldr	r2, [pc, #56]	@ (8000f40 <FBL_JumpToAppl+0x88>)
 8000f08:	4b0b      	ldr	r3, [pc, #44]	@ (8000f38 <FBL_JumpToAppl+0x80>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	6093      	str	r3, [r2, #8]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	f383 8808 	msr	MSP, r3
}
 8000f18:	bf00      	nop
	__set_MSP(msp_value);
	app_entry = (pFunction)(*((uint32*)(app_address + 4)));
 8000f1a:	4b07      	ldr	r3, [pc, #28]	@ (8000f38 <FBL_JumpToAppl+0x80>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	3304      	adds	r3, #4
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	461a      	mov	r2, r3
 8000f24:	4b07      	ldr	r3, [pc, #28]	@ (8000f44 <FBL_JumpToAppl+0x8c>)
 8000f26:	601a      	str	r2, [r3, #0]
	app_entry(); // goto app
 8000f28:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <FBL_JumpToAppl+0x8c>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4798      	blx	r3
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	2000000c 	.word	0x2000000c
 8000f3c:	e000e010 	.word	0xe000e010
 8000f40:	e000ed00 	.word	0xe000ed00
 8000f44:	20000120 	.word	0x20000120

08000f48 <FBL_DiagService_ER_HardReset>:
void FBL_DiagService_ER_HardReset(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f4c:	b672      	cpsid	i
}
 8000f4e:	bf00      	nop
	__disable_irq();
	*FBL_DSC_Pointer = 0;
 8000f50:	4b02      	ldr	r3, [pc, #8]	@ (8000f5c <FBL_DiagService_ER_HardReset+0x14>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
	__NVIC_SystemReset();
 8000f58:	f7ff fa34 	bl	80003c4 <__NVIC_SystemReset>
 8000f5c:	20000000 	.word	0x20000000

08000f60 <FBL_DiagService_RDBI_ReadActiveDiagnosticSession>:
}
void FBL_DiagService_RDBI_ReadActiveDiagnosticSession(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
	FBL_TxHeader.DLC = 5;
 8000f66:	4b36      	ldr	r3, [pc, #216]	@ (8001040 <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0xe0>)
 8000f68:	2205      	movs	r2, #5
 8000f6a:	611a      	str	r2, [r3, #16]
	FBL_TxHeader.StdId = FBL_RxHeader.StdId + 1;
 8000f6c:	4b35      	ldr	r3, [pc, #212]	@ (8001044 <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0xe4>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	3301      	adds	r3, #1
 8000f72:	4a33      	ldr	r2, [pc, #204]	@ (8001040 <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0xe0>)
 8000f74:	6013      	str	r3, [r2, #0]
	FBL_TxFrame[0] = 0x04;
 8000f76:	4b34      	ldr	r3, [pc, #208]	@ (8001048 <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0xe8>)
 8000f78:	2204      	movs	r2, #4
 8000f7a:	701a      	strb	r2, [r3, #0]
	FBL_TxFrame[1] = FBL_RxFrame[1] + 0x40;
 8000f7c:	4b33      	ldr	r3, [pc, #204]	@ (800104c <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0xec>)
 8000f7e:	785b      	ldrb	r3, [r3, #1]
 8000f80:	3340      	adds	r3, #64	@ 0x40
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	4b30      	ldr	r3, [pc, #192]	@ (8001048 <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0xe8>)
 8000f86:	705a      	strb	r2, [r3, #1]
	FBL_TxFrame[2] = FBL_RxFrame[2];
 8000f88:	4b30      	ldr	r3, [pc, #192]	@ (800104c <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0xec>)
 8000f8a:	789a      	ldrb	r2, [r3, #2]
 8000f8c:	4b2e      	ldr	r3, [pc, #184]	@ (8001048 <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0xe8>)
 8000f8e:	709a      	strb	r2, [r3, #2]
	FBL_TxFrame[3] = FBL_RxFrame[3];
 8000f90:	4b2e      	ldr	r3, [pc, #184]	@ (800104c <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0xec>)
 8000f92:	78da      	ldrb	r2, [r3, #3]
 8000f94:	4b2c      	ldr	r3, [pc, #176]	@ (8001048 <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0xe8>)
 8000f96:	70da      	strb	r2, [r3, #3]
	FBL_TxFrame[4] = FBL_DSC_State;
 8000f98:	4b2d      	ldr	r3, [pc, #180]	@ (8001050 <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0xf0>)
 8000f9a:	781a      	ldrb	r2, [r3, #0]
 8000f9c:	4b2a      	ldr	r3, [pc, #168]	@ (8001048 <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0xe8>)
 8000f9e:	711a      	strb	r2, [r3, #4]
	HAL_CAN_AddTxMessage(&hcan, &FBL_TxHeader, FBL_TxFrame, &FBL_TxMailbox);
 8000fa0:	4b2c      	ldr	r3, [pc, #176]	@ (8001054 <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0xf4>)
 8000fa2:	4a29      	ldr	r2, [pc, #164]	@ (8001048 <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0xe8>)
 8000fa4:	4926      	ldr	r1, [pc, #152]	@ (8001040 <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0xe0>)
 8000fa6:	482c      	ldr	r0, [pc, #176]	@ (8001058 <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0xf8>)
 8000fa8:	f000 fe09 	bl	8001bbe <HAL_CAN_AddTxMessage>
	for(uint8 i = 0; i < 8 ; i++) FBL_TxFrame[i] = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	71fb      	strb	r3, [r7, #7]
 8000fb0:	e006      	b.n	8000fc0 <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0x60>
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	4a24      	ldr	r2, [pc, #144]	@ (8001048 <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0xe8>)
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	54d1      	strb	r1, [r2, r3]
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	71fb      	strb	r3, [r7, #7]
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	2b07      	cmp	r3, #7
 8000fc4:	d9f5      	bls.n	8000fb2 <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0x52>
	FBL_TxHeader.DLC = 0;
 8000fc6:	4b1e      	ldr	r3, [pc, #120]	@ (8001040 <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0xe0>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	611a      	str	r2, [r3, #16]
	FBL_TxHeader.ExtId = 0;
 8000fcc:	4b1c      	ldr	r3, [pc, #112]	@ (8001040 <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0xe0>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	605a      	str	r2, [r3, #4]
	FBL_TxHeader.IDE = 0;
 8000fd2:	4b1b      	ldr	r3, [pc, #108]	@ (8001040 <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0xe0>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	609a      	str	r2, [r3, #8]
	FBL_TxHeader.RTR = 0;
 8000fd8:	4b19      	ldr	r3, [pc, #100]	@ (8001040 <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0xe0>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	60da      	str	r2, [r3, #12]
	FBL_TxHeader.StdId = 0;
 8000fde:	4b18      	ldr	r3, [pc, #96]	@ (8001040 <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0xe0>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
	FBL_TxHeader.TransmitGlobalTime = 0;
 8000fe4:	4b16      	ldr	r3, [pc, #88]	@ (8001040 <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0xe0>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	751a      	strb	r2, [r3, #20]
	FBL_TxMailbox = 0;
 8000fea:	4b1a      	ldr	r3, [pc, #104]	@ (8001054 <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0xf4>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
	FBL_RxHeader.StdId = 0;
 8000ff0:	4b14      	ldr	r3, [pc, #80]	@ (8001044 <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0xe4>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
	FBL_RxHeader.DLC = 0;
 8000ff6:	4b13      	ldr	r3, [pc, #76]	@ (8001044 <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0xe4>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	611a      	str	r2, [r3, #16]
	FBL_RxHeader.ExtId = 0;
 8000ffc:	4b11      	ldr	r3, [pc, #68]	@ (8001044 <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0xe4>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	605a      	str	r2, [r3, #4]
	FBL_RxHeader.FilterMatchIndex = 0;
 8001002:	4b10      	ldr	r3, [pc, #64]	@ (8001044 <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0xe4>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]
	FBL_RxHeader.IDE = 0;
 8001008:	4b0e      	ldr	r3, [pc, #56]	@ (8001044 <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0xe4>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
	FBL_RxHeader.RTR = 0;
 800100e:	4b0d      	ldr	r3, [pc, #52]	@ (8001044 <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0xe4>)
 8001010:	2200      	movs	r2, #0
 8001012:	60da      	str	r2, [r3, #12]
	FBL_RxHeader.Timestamp = 0;
 8001014:	4b0b      	ldr	r3, [pc, #44]	@ (8001044 <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0xe4>)
 8001016:	2200      	movs	r2, #0
 8001018:	615a      	str	r2, [r3, #20]
	for(uint8 i = 0; i < 8; i++) FBL_RxFrame[i] = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	71bb      	strb	r3, [r7, #6]
 800101e:	e006      	b.n	800102e <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0xce>
 8001020:	79bb      	ldrb	r3, [r7, #6]
 8001022:	4a0a      	ldr	r2, [pc, #40]	@ (800104c <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0xec>)
 8001024:	2100      	movs	r1, #0
 8001026:	54d1      	strb	r1, [r2, r3]
 8001028:	79bb      	ldrb	r3, [r7, #6]
 800102a:	3301      	adds	r3, #1
 800102c:	71bb      	strb	r3, [r7, #6]
 800102e:	79bb      	ldrb	r3, [r7, #6]
 8001030:	2b07      	cmp	r3, #7
 8001032:	d9f5      	bls.n	8001020 <FBL_DiagService_RDBI_ReadActiveDiagnosticSession+0xc0>
}
 8001034:	bf00      	nop
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	200000d0 	.word	0x200000d0
 8001044:	200000b4 	.word	0x200000b4
 8001048:	200000ac 	.word	0x200000ac
 800104c:	200000a4 	.word	0x200000a4
 8001050:	20000004 	.word	0x20000004
 8001054:	200000e8 	.word	0x200000e8
 8001058:	2000003c 	.word	0x2000003c

0800105c <FBL_DiagService_DSC_Programming>:
void FBL_DiagService_DSC_Programming(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
	if(FBL_RxFrame[1] == 0x22 &&
 8001062:	4b87      	ldr	r3, [pc, #540]	@ (8001280 <FBL_DiagService_DSC_Programming+0x224>)
 8001064:	785b      	ldrb	r3, [r3, #1]
 8001066:	2b22      	cmp	r3, #34	@ 0x22
 8001068:	d109      	bne.n	800107e <FBL_DiagService_DSC_Programming+0x22>
			FBL_RxFrame[2] == 0xF1 &&
 800106a:	4b85      	ldr	r3, [pc, #532]	@ (8001280 <FBL_DiagService_DSC_Programming+0x224>)
 800106c:	789b      	ldrb	r3, [r3, #2]
	if(FBL_RxFrame[1] == 0x22 &&
 800106e:	2bf1      	cmp	r3, #241	@ 0xf1
 8001070:	d105      	bne.n	800107e <FBL_DiagService_DSC_Programming+0x22>
			FBL_RxFrame[3] == 0x86)
 8001072:	4b83      	ldr	r3, [pc, #524]	@ (8001280 <FBL_DiagService_DSC_Programming+0x224>)
 8001074:	78db      	ldrb	r3, [r3, #3]
			FBL_RxFrame[2] == 0xF1 &&
 8001076:	2b86      	cmp	r3, #134	@ 0x86
 8001078:	d101      	bne.n	800107e <FBL_DiagService_DSC_Programming+0x22>
	{
		FBL_DiagService_RDBI_ReadActiveDiagnosticSession();
 800107a:	f7ff ff71 	bl	8000f60 <FBL_DiagService_RDBI_ReadActiveDiagnosticSession>
	}
	else
	{
		/* Do nothing. */
	}
	if(FBL_RxFrame[0] == 0x04 &&
 800107e:	4b80      	ldr	r3, [pc, #512]	@ (8001280 <FBL_DiagService_DSC_Programming+0x224>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b04      	cmp	r3, #4
 8001084:	d109      	bne.n	800109a <FBL_DiagService_DSC_Programming+0x3e>
			FBL_RxFrame[1] == 0x31 &&
 8001086:	4b7e      	ldr	r3, [pc, #504]	@ (8001280 <FBL_DiagService_DSC_Programming+0x224>)
 8001088:	785b      	ldrb	r3, [r3, #1]
	if(FBL_RxFrame[0] == 0x04 &&
 800108a:	2b31      	cmp	r3, #49	@ 0x31
 800108c:	d105      	bne.n	800109a <FBL_DiagService_DSC_Programming+0x3e>
			FBL_RxFrame[4] == 0x00)
 800108e:	4b7c      	ldr	r3, [pc, #496]	@ (8001280 <FBL_DiagService_DSC_Programming+0x224>)
 8001090:	791b      	ldrb	r3, [r3, #4]
			FBL_RxFrame[1] == 0x31 &&
 8001092:	2b00      	cmp	r3, #0
 8001094:	d101      	bne.n	800109a <FBL_DiagService_DSC_Programming+0x3e>
	{
		FBL_DiagService_RAR_MassEraseAPPL();
 8001096:	f7ff fe97 	bl	8000dc8 <FBL_DiagService_RAR_MassEraseAPPL>
	}
	else
	{
		/* Do nothing. */
	}
	if(FBL_RxFrame[1] == 0x34)
 800109a:	4b79      	ldr	r3, [pc, #484]	@ (8001280 <FBL_DiagService_DSC_Programming+0x224>)
 800109c:	785b      	ldrb	r3, [r3, #1]
 800109e:	2b34      	cmp	r3, #52	@ 0x34
 80010a0:	d110      	bne.n	80010c4 <FBL_DiagService_DSC_Programming+0x68>
	{
		FBL_ProgrammingAddress = (0x08 << 24)
		| (FBL_RxFrame[4] << 16)
 80010a2:	4b77      	ldr	r3, [pc, #476]	@ (8001280 <FBL_DiagService_DSC_Programming+0x224>)
 80010a4:	791b      	ldrb	r3, [r3, #4]
 80010a6:	041b      	lsls	r3, r3, #16
 80010a8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
		| (FBL_RxFrame[5] << 8)
 80010ac:	4b74      	ldr	r3, [pc, #464]	@ (8001280 <FBL_DiagService_DSC_Programming+0x224>)
 80010ae:	795b      	ldrb	r3, [r3, #5]
 80010b0:	021b      	lsls	r3, r3, #8
 80010b2:	4313      	orrs	r3, r2
		| (FBL_RxFrame[6]);
 80010b4:	4a72      	ldr	r2, [pc, #456]	@ (8001280 <FBL_DiagService_DSC_Programming+0x224>)
 80010b6:	7992      	ldrb	r2, [r2, #6]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	461a      	mov	r2, r3
		FBL_ProgrammingAddress = (0x08 << 24)
 80010bc:	4b71      	ldr	r3, [pc, #452]	@ (8001284 <FBL_DiagService_DSC_Programming+0x228>)
 80010be:	601a      	str	r2, [r3, #0]
		FBL_DiagService_DSC_RequestDownload();
 80010c0:	f7ff fc2e 	bl	8000920 <FBL_DiagService_DSC_RequestDownload>
	}
	else
	{
		/* Do nothing. */
	}
	if(FBL_RxFrame[1] == 0x36)
 80010c4:	4b6e      	ldr	r3, [pc, #440]	@ (8001280 <FBL_DiagService_DSC_Programming+0x224>)
 80010c6:	785b      	ldrb	r3, [r3, #1]
 80010c8:	2b36      	cmp	r3, #54	@ 0x36
 80010ca:	d101      	bne.n	80010d0 <FBL_DiagService_DSC_Programming+0x74>
	{
		FBL_DiagService_DSC_TransferData();
 80010cc:	f7ff fca6 	bl	8000a1c <FBL_DiagService_DSC_TransferData>
	}
	else
	{
		/* Do nothing. */
	}
	if(FBL_RxFrame[1] == 0x37
 80010d0:	4b6b      	ldr	r3, [pc, #428]	@ (8001280 <FBL_DiagService_DSC_Programming+0x224>)
 80010d2:	785b      	ldrb	r3, [r3, #1]
 80010d4:	2b37      	cmp	r3, #55	@ 0x37
 80010d6:	d105      	bne.n	80010e4 <FBL_DiagService_DSC_Programming+0x88>
			&& FBL_RxFrame[0] == 0x01)
 80010d8:	4b69      	ldr	r3, [pc, #420]	@ (8001280 <FBL_DiagService_DSC_Programming+0x224>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d101      	bne.n	80010e4 <FBL_DiagService_DSC_Programming+0x88>
	{
		FBL_DiagService_DSC_RequestTransferExit();
 80010e0:	f7ff fd84 	bl	8000bec <FBL_DiagService_DSC_RequestTransferExit>
	}
	else
	{
		/* Do nothing. */
	}
	if(FBL_RxFrame[1] == 0x10 &&
 80010e4:	4b66      	ldr	r3, [pc, #408]	@ (8001280 <FBL_DiagService_DSC_Programming+0x224>)
 80010e6:	785b      	ldrb	r3, [r3, #1]
 80010e8:	2b10      	cmp	r3, #16
 80010ea:	d149      	bne.n	8001180 <FBL_DiagService_DSC_Programming+0x124>
			FBL_RxFrame[2] == 0x05)
 80010ec:	4b64      	ldr	r3, [pc, #400]	@ (8001280 <FBL_DiagService_DSC_Programming+0x224>)
 80010ee:	789b      	ldrb	r3, [r3, #2]
	if(FBL_RxFrame[1] == 0x10 &&
 80010f0:	2b05      	cmp	r3, #5
 80010f2:	d145      	bne.n	8001180 <FBL_DiagService_DSC_Programming+0x124>
	{
		FBL_DSC_State = CALIBRATION;
 80010f4:	4b64      	ldr	r3, [pc, #400]	@ (8001288 <FBL_DiagService_DSC_Programming+0x22c>)
 80010f6:	2204      	movs	r2, #4
 80010f8:	701a      	strb	r2, [r3, #0]
		FBL_TxHeader.DLC = FBL_RxHeader.DLC;
 80010fa:	4b64      	ldr	r3, [pc, #400]	@ (800128c <FBL_DiagService_DSC_Programming+0x230>)
 80010fc:	691b      	ldr	r3, [r3, #16]
 80010fe:	4a64      	ldr	r2, [pc, #400]	@ (8001290 <FBL_DiagService_DSC_Programming+0x234>)
 8001100:	6113      	str	r3, [r2, #16]
		FBL_TxHeader.StdId = FBL_RxHeader.StdId + 1;
 8001102:	4b62      	ldr	r3, [pc, #392]	@ (800128c <FBL_DiagService_DSC_Programming+0x230>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	3301      	adds	r3, #1
 8001108:	4a61      	ldr	r2, [pc, #388]	@ (8001290 <FBL_DiagService_DSC_Programming+0x234>)
 800110a:	6013      	str	r3, [r2, #0]
		FBL_TxFrame[0] = FBL_RxFrame[0];
 800110c:	4b5c      	ldr	r3, [pc, #368]	@ (8001280 <FBL_DiagService_DSC_Programming+0x224>)
 800110e:	781a      	ldrb	r2, [r3, #0]
 8001110:	4b60      	ldr	r3, [pc, #384]	@ (8001294 <FBL_DiagService_DSC_Programming+0x238>)
 8001112:	701a      	strb	r2, [r3, #0]
		FBL_TxFrame[1] = FBL_RxFrame[1] + 0x40;
 8001114:	4b5a      	ldr	r3, [pc, #360]	@ (8001280 <FBL_DiagService_DSC_Programming+0x224>)
 8001116:	785b      	ldrb	r3, [r3, #1]
 8001118:	3340      	adds	r3, #64	@ 0x40
 800111a:	b2da      	uxtb	r2, r3
 800111c:	4b5d      	ldr	r3, [pc, #372]	@ (8001294 <FBL_DiagService_DSC_Programming+0x238>)
 800111e:	705a      	strb	r2, [r3, #1]
		FBL_TxFrame[2] = FBL_RxFrame[2];
 8001120:	4b57      	ldr	r3, [pc, #348]	@ (8001280 <FBL_DiagService_DSC_Programming+0x224>)
 8001122:	789a      	ldrb	r2, [r3, #2]
 8001124:	4b5b      	ldr	r3, [pc, #364]	@ (8001294 <FBL_DiagService_DSC_Programming+0x238>)
 8001126:	709a      	strb	r2, [r3, #2]
		FBL_TxFrame[3] = FBL_RxFrame[3];
 8001128:	4b55      	ldr	r3, [pc, #340]	@ (8001280 <FBL_DiagService_DSC_Programming+0x224>)
 800112a:	78da      	ldrb	r2, [r3, #3]
 800112c:	4b59      	ldr	r3, [pc, #356]	@ (8001294 <FBL_DiagService_DSC_Programming+0x238>)
 800112e:	70da      	strb	r2, [r3, #3]
		HAL_CAN_AddTxMessage(&hcan, &FBL_TxHeader, FBL_TxFrame, &FBL_TxMailbox);
 8001130:	4b59      	ldr	r3, [pc, #356]	@ (8001298 <FBL_DiagService_DSC_Programming+0x23c>)
 8001132:	4a58      	ldr	r2, [pc, #352]	@ (8001294 <FBL_DiagService_DSC_Programming+0x238>)
 8001134:	4956      	ldr	r1, [pc, #344]	@ (8001290 <FBL_DiagService_DSC_Programming+0x234>)
 8001136:	4859      	ldr	r0, [pc, #356]	@ (800129c <FBL_DiagService_DSC_Programming+0x240>)
 8001138:	f000 fd41 	bl	8001bbe <HAL_CAN_AddTxMessage>
		for(uint8 i = 0; i < 8 ; i++)
 800113c:	2300      	movs	r3, #0
 800113e:	73fb      	strb	r3, [r7, #15]
 8001140:	e006      	b.n	8001150 <FBL_DiagService_DSC_Programming+0xf4>
		{
			FBL_TxFrame[i] = 0;
 8001142:	7bfb      	ldrb	r3, [r7, #15]
 8001144:	4a53      	ldr	r2, [pc, #332]	@ (8001294 <FBL_DiagService_DSC_Programming+0x238>)
 8001146:	2100      	movs	r1, #0
 8001148:	54d1      	strb	r1, [r2, r3]
		for(uint8 i = 0; i < 8 ; i++)
 800114a:	7bfb      	ldrb	r3, [r7, #15]
 800114c:	3301      	adds	r3, #1
 800114e:	73fb      	strb	r3, [r7, #15]
 8001150:	7bfb      	ldrb	r3, [r7, #15]
 8001152:	2b07      	cmp	r3, #7
 8001154:	d9f5      	bls.n	8001142 <FBL_DiagService_DSC_Programming+0xe6>
		}
		FBL_TxHeader.DLC = 0;
 8001156:	4b4e      	ldr	r3, [pc, #312]	@ (8001290 <FBL_DiagService_DSC_Programming+0x234>)
 8001158:	2200      	movs	r2, #0
 800115a:	611a      	str	r2, [r3, #16]
		FBL_TxHeader.ExtId = 0;
 800115c:	4b4c      	ldr	r3, [pc, #304]	@ (8001290 <FBL_DiagService_DSC_Programming+0x234>)
 800115e:	2200      	movs	r2, #0
 8001160:	605a      	str	r2, [r3, #4]
		FBL_TxHeader.IDE = 0;
 8001162:	4b4b      	ldr	r3, [pc, #300]	@ (8001290 <FBL_DiagService_DSC_Programming+0x234>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
		FBL_TxHeader.RTR = 0;
 8001168:	4b49      	ldr	r3, [pc, #292]	@ (8001290 <FBL_DiagService_DSC_Programming+0x234>)
 800116a:	2200      	movs	r2, #0
 800116c:	60da      	str	r2, [r3, #12]
		FBL_TxHeader.StdId = 0;
 800116e:	4b48      	ldr	r3, [pc, #288]	@ (8001290 <FBL_DiagService_DSC_Programming+0x234>)
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
		FBL_TxHeader.TransmitGlobalTime = 0;
 8001174:	4b46      	ldr	r3, [pc, #280]	@ (8001290 <FBL_DiagService_DSC_Programming+0x234>)
 8001176:	2200      	movs	r2, #0
 8001178:	751a      	strb	r2, [r3, #20]
		FBL_TxMailbox = 0;
 800117a:	4b47      	ldr	r3, [pc, #284]	@ (8001298 <FBL_DiagService_DSC_Programming+0x23c>)
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
	}
	if(FBL_RxFrame[1] == 0x11 &&
 8001180:	4b3f      	ldr	r3, [pc, #252]	@ (8001280 <FBL_DiagService_DSC_Programming+0x224>)
 8001182:	785b      	ldrb	r3, [r3, #1]
 8001184:	2b11      	cmp	r3, #17
 8001186:	d131      	bne.n	80011ec <FBL_DiagService_DSC_Programming+0x190>
			FBL_RxFrame[2] == 0x01)
 8001188:	4b3d      	ldr	r3, [pc, #244]	@ (8001280 <FBL_DiagService_DSC_Programming+0x224>)
 800118a:	789b      	ldrb	r3, [r3, #2]
	if(FBL_RxFrame[1] == 0x11 &&
 800118c:	2b01      	cmp	r3, #1
 800118e:	d12d      	bne.n	80011ec <FBL_DiagService_DSC_Programming+0x190>
	{
		FBL_TxHeader.DLC = FBL_RxHeader.DLC;
 8001190:	4b3e      	ldr	r3, [pc, #248]	@ (800128c <FBL_DiagService_DSC_Programming+0x230>)
 8001192:	691b      	ldr	r3, [r3, #16]
 8001194:	4a3e      	ldr	r2, [pc, #248]	@ (8001290 <FBL_DiagService_DSC_Programming+0x234>)
 8001196:	6113      	str	r3, [r2, #16]
		FBL_TxHeader.StdId = FBL_RxHeader.StdId + 1;
 8001198:	4b3c      	ldr	r3, [pc, #240]	@ (800128c <FBL_DiagService_DSC_Programming+0x230>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	3301      	adds	r3, #1
 800119e:	4a3c      	ldr	r2, [pc, #240]	@ (8001290 <FBL_DiagService_DSC_Programming+0x234>)
 80011a0:	6013      	str	r3, [r2, #0]
		FBL_TxFrame[0] = FBL_RxFrame[0];
 80011a2:	4b37      	ldr	r3, [pc, #220]	@ (8001280 <FBL_DiagService_DSC_Programming+0x224>)
 80011a4:	781a      	ldrb	r2, [r3, #0]
 80011a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001294 <FBL_DiagService_DSC_Programming+0x238>)
 80011a8:	701a      	strb	r2, [r3, #0]
		FBL_TxFrame[1] = FBL_RxFrame[1] + 0x40;
 80011aa:	4b35      	ldr	r3, [pc, #212]	@ (8001280 <FBL_DiagService_DSC_Programming+0x224>)
 80011ac:	785b      	ldrb	r3, [r3, #1]
 80011ae:	3340      	adds	r3, #64	@ 0x40
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	4b38      	ldr	r3, [pc, #224]	@ (8001294 <FBL_DiagService_DSC_Programming+0x238>)
 80011b4:	705a      	strb	r2, [r3, #1]
		FBL_TxFrame[2] = FBL_RxFrame[2];
 80011b6:	4b32      	ldr	r3, [pc, #200]	@ (8001280 <FBL_DiagService_DSC_Programming+0x224>)
 80011b8:	789a      	ldrb	r2, [r3, #2]
 80011ba:	4b36      	ldr	r3, [pc, #216]	@ (8001294 <FBL_DiagService_DSC_Programming+0x238>)
 80011bc:	709a      	strb	r2, [r3, #2]
		FBL_TxFrame[3] = FBL_RxFrame[3];
 80011be:	4b30      	ldr	r3, [pc, #192]	@ (8001280 <FBL_DiagService_DSC_Programming+0x224>)
 80011c0:	78da      	ldrb	r2, [r3, #3]
 80011c2:	4b34      	ldr	r3, [pc, #208]	@ (8001294 <FBL_DiagService_DSC_Programming+0x238>)
 80011c4:	70da      	strb	r2, [r3, #3]
		HAL_CAN_AddTxMessage(&hcan, &FBL_TxHeader, FBL_TxFrame, &FBL_TxMailbox);
 80011c6:	4b34      	ldr	r3, [pc, #208]	@ (8001298 <FBL_DiagService_DSC_Programming+0x23c>)
 80011c8:	4a32      	ldr	r2, [pc, #200]	@ (8001294 <FBL_DiagService_DSC_Programming+0x238>)
 80011ca:	4931      	ldr	r1, [pc, #196]	@ (8001290 <FBL_DiagService_DSC_Programming+0x234>)
 80011cc:	4833      	ldr	r0, [pc, #204]	@ (800129c <FBL_DiagService_DSC_Programming+0x240>)
 80011ce:	f000 fcf6 	bl	8001bbe <HAL_CAN_AddTxMessage>
		for(uint32 i = 0; i < 9000; i++);
 80011d2:	2300      	movs	r3, #0
 80011d4:	60bb      	str	r3, [r7, #8]
 80011d6:	e002      	b.n	80011de <FBL_DiagService_DSC_Programming+0x182>
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	3301      	adds	r3, #1
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	f242 3227 	movw	r2, #8999	@ 0x2327
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d9f7      	bls.n	80011d8 <FBL_DiagService_DSC_Programming+0x17c>
		FBL_DiagService_ER_HardReset();
 80011e8:	f7ff feae 	bl	8000f48 <FBL_DiagService_ER_HardReset>
	}
	else
	{
		/* Do nothing. */
	}
	for(uint8 i = 0; i < 8 ; i++) FBL_TxFrame[i] = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	71fb      	strb	r3, [r7, #7]
 80011f0:	e006      	b.n	8001200 <FBL_DiagService_DSC_Programming+0x1a4>
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	4a27      	ldr	r2, [pc, #156]	@ (8001294 <FBL_DiagService_DSC_Programming+0x238>)
 80011f6:	2100      	movs	r1, #0
 80011f8:	54d1      	strb	r1, [r2, r3]
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	3301      	adds	r3, #1
 80011fe:	71fb      	strb	r3, [r7, #7]
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	2b07      	cmp	r3, #7
 8001204:	d9f5      	bls.n	80011f2 <FBL_DiagService_DSC_Programming+0x196>
	FBL_TxHeader.DLC = 0;
 8001206:	4b22      	ldr	r3, [pc, #136]	@ (8001290 <FBL_DiagService_DSC_Programming+0x234>)
 8001208:	2200      	movs	r2, #0
 800120a:	611a      	str	r2, [r3, #16]
	FBL_TxHeader.ExtId = 0;
 800120c:	4b20      	ldr	r3, [pc, #128]	@ (8001290 <FBL_DiagService_DSC_Programming+0x234>)
 800120e:	2200      	movs	r2, #0
 8001210:	605a      	str	r2, [r3, #4]
	FBL_TxHeader.IDE = 0;
 8001212:	4b1f      	ldr	r3, [pc, #124]	@ (8001290 <FBL_DiagService_DSC_Programming+0x234>)
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
	FBL_TxHeader.RTR = 0;
 8001218:	4b1d      	ldr	r3, [pc, #116]	@ (8001290 <FBL_DiagService_DSC_Programming+0x234>)
 800121a:	2200      	movs	r2, #0
 800121c:	60da      	str	r2, [r3, #12]
	FBL_TxHeader.StdId = 0;
 800121e:	4b1c      	ldr	r3, [pc, #112]	@ (8001290 <FBL_DiagService_DSC_Programming+0x234>)
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
	FBL_TxHeader.TransmitGlobalTime = 0;
 8001224:	4b1a      	ldr	r3, [pc, #104]	@ (8001290 <FBL_DiagService_DSC_Programming+0x234>)
 8001226:	2200      	movs	r2, #0
 8001228:	751a      	strb	r2, [r3, #20]
	FBL_TxMailbox = 0;
 800122a:	4b1b      	ldr	r3, [pc, #108]	@ (8001298 <FBL_DiagService_DSC_Programming+0x23c>)
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
	FBL_RxHeader.StdId = 0;
 8001230:	4b16      	ldr	r3, [pc, #88]	@ (800128c <FBL_DiagService_DSC_Programming+0x230>)
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
	FBL_RxHeader.DLC = 0;
 8001236:	4b15      	ldr	r3, [pc, #84]	@ (800128c <FBL_DiagService_DSC_Programming+0x230>)
 8001238:	2200      	movs	r2, #0
 800123a:	611a      	str	r2, [r3, #16]
	FBL_RxHeader.ExtId = 0;
 800123c:	4b13      	ldr	r3, [pc, #76]	@ (800128c <FBL_DiagService_DSC_Programming+0x230>)
 800123e:	2200      	movs	r2, #0
 8001240:	605a      	str	r2, [r3, #4]
	FBL_RxHeader.FilterMatchIndex = 0;
 8001242:	4b12      	ldr	r3, [pc, #72]	@ (800128c <FBL_DiagService_DSC_Programming+0x230>)
 8001244:	2200      	movs	r2, #0
 8001246:	619a      	str	r2, [r3, #24]
	FBL_RxHeader.IDE = 0;
 8001248:	4b10      	ldr	r3, [pc, #64]	@ (800128c <FBL_DiagService_DSC_Programming+0x230>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
	FBL_RxHeader.RTR = 0;
 800124e:	4b0f      	ldr	r3, [pc, #60]	@ (800128c <FBL_DiagService_DSC_Programming+0x230>)
 8001250:	2200      	movs	r2, #0
 8001252:	60da      	str	r2, [r3, #12]
	FBL_RxHeader.Timestamp = 0;
 8001254:	4b0d      	ldr	r3, [pc, #52]	@ (800128c <FBL_DiagService_DSC_Programming+0x230>)
 8001256:	2200      	movs	r2, #0
 8001258:	615a      	str	r2, [r3, #20]
	for(uint8 i = 0; i < 8; i++) FBL_RxFrame[i] = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	71bb      	strb	r3, [r7, #6]
 800125e:	e006      	b.n	800126e <FBL_DiagService_DSC_Programming+0x212>
 8001260:	79bb      	ldrb	r3, [r7, #6]
 8001262:	4a07      	ldr	r2, [pc, #28]	@ (8001280 <FBL_DiagService_DSC_Programming+0x224>)
 8001264:	2100      	movs	r1, #0
 8001266:	54d1      	strb	r1, [r2, r3]
 8001268:	79bb      	ldrb	r3, [r7, #6]
 800126a:	3301      	adds	r3, #1
 800126c:	71bb      	strb	r3, [r7, #6]
 800126e:	79bb      	ldrb	r3, [r7, #6]
 8001270:	2b07      	cmp	r3, #7
 8001272:	d9f5      	bls.n	8001260 <FBL_DiagService_DSC_Programming+0x204>
}
 8001274:	bf00      	nop
 8001276:	bf00      	nop
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	200000a4 	.word	0x200000a4
 8001284:	200000f4 	.word	0x200000f4
 8001288:	20000004 	.word	0x20000004
 800128c:	200000b4 	.word	0x200000b4
 8001290:	200000d0 	.word	0x200000d0
 8001294:	200000ac 	.word	0x200000ac
 8001298:	200000e8 	.word	0x200000e8
 800129c:	2000003c 	.word	0x2000003c

080012a0 <FBL_DiagService_DSC_Calibration>:
void FBL_DiagService_DSC_Calibration(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
	if(FBL_RxFrame[1] == 0x22 &&
 80012a6:	4b72      	ldr	r3, [pc, #456]	@ (8001470 <FBL_DiagService_DSC_Calibration+0x1d0>)
 80012a8:	785b      	ldrb	r3, [r3, #1]
 80012aa:	2b22      	cmp	r3, #34	@ 0x22
 80012ac:	d109      	bne.n	80012c2 <FBL_DiagService_DSC_Calibration+0x22>
			FBL_RxFrame[2] == 0xF1 &&
 80012ae:	4b70      	ldr	r3, [pc, #448]	@ (8001470 <FBL_DiagService_DSC_Calibration+0x1d0>)
 80012b0:	789b      	ldrb	r3, [r3, #2]
	if(FBL_RxFrame[1] == 0x22 &&
 80012b2:	2bf1      	cmp	r3, #241	@ 0xf1
 80012b4:	d105      	bne.n	80012c2 <FBL_DiagService_DSC_Calibration+0x22>
			FBL_RxFrame[3] == 0x86)
 80012b6:	4b6e      	ldr	r3, [pc, #440]	@ (8001470 <FBL_DiagService_DSC_Calibration+0x1d0>)
 80012b8:	78db      	ldrb	r3, [r3, #3]
			FBL_RxFrame[2] == 0xF1 &&
 80012ba:	2b86      	cmp	r3, #134	@ 0x86
 80012bc:	d101      	bne.n	80012c2 <FBL_DiagService_DSC_Calibration+0x22>
	{
		FBL_DiagService_RDBI_ReadActiveDiagnosticSession();
 80012be:	f7ff fe4f 	bl	8000f60 <FBL_DiagService_RDBI_ReadActiveDiagnosticSession>
	}
	else
	{
		/* Do nothing. */
	}
	if(FBL_RxFrame[0] == 0x04 &&
 80012c2:	4b6b      	ldr	r3, [pc, #428]	@ (8001470 <FBL_DiagService_DSC_Calibration+0x1d0>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2b04      	cmp	r3, #4
 80012c8:	d109      	bne.n	80012de <FBL_DiagService_DSC_Calibration+0x3e>
			FBL_RxFrame[1] == 0x31 &&
 80012ca:	4b69      	ldr	r3, [pc, #420]	@ (8001470 <FBL_DiagService_DSC_Calibration+0x1d0>)
 80012cc:	785b      	ldrb	r3, [r3, #1]
	if(FBL_RxFrame[0] == 0x04 &&
 80012ce:	2b31      	cmp	r3, #49	@ 0x31
 80012d0:	d105      	bne.n	80012de <FBL_DiagService_DSC_Calibration+0x3e>
			FBL_RxFrame[4] == 0x02)
 80012d2:	4b67      	ldr	r3, [pc, #412]	@ (8001470 <FBL_DiagService_DSC_Calibration+0x1d0>)
 80012d4:	791b      	ldrb	r3, [r3, #4]
			FBL_RxFrame[1] == 0x31 &&
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d101      	bne.n	80012de <FBL_DiagService_DSC_Calibration+0x3e>
	{
		FBL_DiagService_RAR_MassEraseCALIBRATION();
 80012da:	f7ff fcfd 	bl	8000cd8 <FBL_DiagService_RAR_MassEraseCALIBRATION>
	}
	else
	{
		/* Do nothing. */
	}
	if(FBL_RxFrame[1] == 0x34)
 80012de:	4b64      	ldr	r3, [pc, #400]	@ (8001470 <FBL_DiagService_DSC_Calibration+0x1d0>)
 80012e0:	785b      	ldrb	r3, [r3, #1]
 80012e2:	2b34      	cmp	r3, #52	@ 0x34
 80012e4:	d108      	bne.n	80012f8 <FBL_DiagService_DSC_Calibration+0x58>
	{
		if(FBL_ProgrammingAddress == 0)
 80012e6:	4b63      	ldr	r3, [pc, #396]	@ (8001474 <FBL_DiagService_DSC_Calibration+0x1d4>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d102      	bne.n	80012f4 <FBL_DiagService_DSC_Calibration+0x54>
		{
			FBL_ProgrammingAddress = 0x0800F800;
 80012ee:	4b61      	ldr	r3, [pc, #388]	@ (8001474 <FBL_DiagService_DSC_Calibration+0x1d4>)
 80012f0:	4a61      	ldr	r2, [pc, #388]	@ (8001478 <FBL_DiagService_DSC_Calibration+0x1d8>)
 80012f2:	601a      	str	r2, [r3, #0]
		else
		{
			/* Do nothing. */
		}

		FBL_DiagService_DSC_RequestDownload();
 80012f4:	f7ff fb14 	bl	8000920 <FBL_DiagService_DSC_RequestDownload>
	}
	else
	{
		/* Do nothing. */
	}
	if(FBL_RxFrame[1] == 0x36)
 80012f8:	4b5d      	ldr	r3, [pc, #372]	@ (8001470 <FBL_DiagService_DSC_Calibration+0x1d0>)
 80012fa:	785b      	ldrb	r3, [r3, #1]
 80012fc:	2b36      	cmp	r3, #54	@ 0x36
 80012fe:	d101      	bne.n	8001304 <FBL_DiagService_DSC_Calibration+0x64>
	{
		FBL_DiagService_DSC_TransferData();
 8001300:	f7ff fb8c 	bl	8000a1c <FBL_DiagService_DSC_TransferData>
	}
	else
	{
		/* Do nothing. */
	}
	if(FBL_RxFrame[1] == 0x37
 8001304:	4b5a      	ldr	r3, [pc, #360]	@ (8001470 <FBL_DiagService_DSC_Calibration+0x1d0>)
 8001306:	785b      	ldrb	r3, [r3, #1]
 8001308:	2b37      	cmp	r3, #55	@ 0x37
 800130a:	d105      	bne.n	8001318 <FBL_DiagService_DSC_Calibration+0x78>
			&& FBL_RxFrame[0] == 0x01)
 800130c:	4b58      	ldr	r3, [pc, #352]	@ (8001470 <FBL_DiagService_DSC_Calibration+0x1d0>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d101      	bne.n	8001318 <FBL_DiagService_DSC_Calibration+0x78>
	{
		FBL_DiagService_DSC_RequestTransferExit();
 8001314:	f7ff fc6a 	bl	8000bec <FBL_DiagService_DSC_RequestTransferExit>
	}
	else
	{
		/* Do nothing. */
	}
	if(FBL_RxFrame[1] == 0x10 &&
 8001318:	4b55      	ldr	r3, [pc, #340]	@ (8001470 <FBL_DiagService_DSC_Calibration+0x1d0>)
 800131a:	785b      	ldrb	r3, [r3, #1]
 800131c:	2b10      	cmp	r3, #16
 800131e:	d149      	bne.n	80013b4 <FBL_DiagService_DSC_Calibration+0x114>
			FBL_RxFrame[2] == 0x02)
 8001320:	4b53      	ldr	r3, [pc, #332]	@ (8001470 <FBL_DiagService_DSC_Calibration+0x1d0>)
 8001322:	789b      	ldrb	r3, [r3, #2]
	if(FBL_RxFrame[1] == 0x10 &&
 8001324:	2b02      	cmp	r3, #2
 8001326:	d145      	bne.n	80013b4 <FBL_DiagService_DSC_Calibration+0x114>
	{
		FBL_DSC_State = PROGRAMMING;
 8001328:	4b54      	ldr	r3, [pc, #336]	@ (800147c <FBL_DiagService_DSC_Calibration+0x1dc>)
 800132a:	2202      	movs	r2, #2
 800132c:	701a      	strb	r2, [r3, #0]
		FBL_TxHeader.DLC = FBL_RxHeader.DLC;
 800132e:	4b54      	ldr	r3, [pc, #336]	@ (8001480 <FBL_DiagService_DSC_Calibration+0x1e0>)
 8001330:	691b      	ldr	r3, [r3, #16]
 8001332:	4a54      	ldr	r2, [pc, #336]	@ (8001484 <FBL_DiagService_DSC_Calibration+0x1e4>)
 8001334:	6113      	str	r3, [r2, #16]
		FBL_TxHeader.StdId = FBL_RxHeader.StdId + 1;
 8001336:	4b52      	ldr	r3, [pc, #328]	@ (8001480 <FBL_DiagService_DSC_Calibration+0x1e0>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	3301      	adds	r3, #1
 800133c:	4a51      	ldr	r2, [pc, #324]	@ (8001484 <FBL_DiagService_DSC_Calibration+0x1e4>)
 800133e:	6013      	str	r3, [r2, #0]
		FBL_TxFrame[0] = FBL_RxFrame[0];
 8001340:	4b4b      	ldr	r3, [pc, #300]	@ (8001470 <FBL_DiagService_DSC_Calibration+0x1d0>)
 8001342:	781a      	ldrb	r2, [r3, #0]
 8001344:	4b50      	ldr	r3, [pc, #320]	@ (8001488 <FBL_DiagService_DSC_Calibration+0x1e8>)
 8001346:	701a      	strb	r2, [r3, #0]
		FBL_TxFrame[1] = FBL_RxFrame[1] + 0x40;
 8001348:	4b49      	ldr	r3, [pc, #292]	@ (8001470 <FBL_DiagService_DSC_Calibration+0x1d0>)
 800134a:	785b      	ldrb	r3, [r3, #1]
 800134c:	3340      	adds	r3, #64	@ 0x40
 800134e:	b2da      	uxtb	r2, r3
 8001350:	4b4d      	ldr	r3, [pc, #308]	@ (8001488 <FBL_DiagService_DSC_Calibration+0x1e8>)
 8001352:	705a      	strb	r2, [r3, #1]
		FBL_TxFrame[2] = FBL_RxFrame[2];
 8001354:	4b46      	ldr	r3, [pc, #280]	@ (8001470 <FBL_DiagService_DSC_Calibration+0x1d0>)
 8001356:	789a      	ldrb	r2, [r3, #2]
 8001358:	4b4b      	ldr	r3, [pc, #300]	@ (8001488 <FBL_DiagService_DSC_Calibration+0x1e8>)
 800135a:	709a      	strb	r2, [r3, #2]
		FBL_TxFrame[3] = FBL_RxFrame[3];
 800135c:	4b44      	ldr	r3, [pc, #272]	@ (8001470 <FBL_DiagService_DSC_Calibration+0x1d0>)
 800135e:	78da      	ldrb	r2, [r3, #3]
 8001360:	4b49      	ldr	r3, [pc, #292]	@ (8001488 <FBL_DiagService_DSC_Calibration+0x1e8>)
 8001362:	70da      	strb	r2, [r3, #3]
		HAL_CAN_AddTxMessage(&hcan, &FBL_TxHeader, FBL_TxFrame, &FBL_TxMailbox);
 8001364:	4b49      	ldr	r3, [pc, #292]	@ (800148c <FBL_DiagService_DSC_Calibration+0x1ec>)
 8001366:	4a48      	ldr	r2, [pc, #288]	@ (8001488 <FBL_DiagService_DSC_Calibration+0x1e8>)
 8001368:	4946      	ldr	r1, [pc, #280]	@ (8001484 <FBL_DiagService_DSC_Calibration+0x1e4>)
 800136a:	4849      	ldr	r0, [pc, #292]	@ (8001490 <FBL_DiagService_DSC_Calibration+0x1f0>)
 800136c:	f000 fc27 	bl	8001bbe <HAL_CAN_AddTxMessage>
		for(uint8 i = 0; i < 8 ; i++)
 8001370:	2300      	movs	r3, #0
 8001372:	73fb      	strb	r3, [r7, #15]
 8001374:	e006      	b.n	8001384 <FBL_DiagService_DSC_Calibration+0xe4>
		{
			FBL_TxFrame[i] = 0;
 8001376:	7bfb      	ldrb	r3, [r7, #15]
 8001378:	4a43      	ldr	r2, [pc, #268]	@ (8001488 <FBL_DiagService_DSC_Calibration+0x1e8>)
 800137a:	2100      	movs	r1, #0
 800137c:	54d1      	strb	r1, [r2, r3]
		for(uint8 i = 0; i < 8 ; i++)
 800137e:	7bfb      	ldrb	r3, [r7, #15]
 8001380:	3301      	adds	r3, #1
 8001382:	73fb      	strb	r3, [r7, #15]
 8001384:	7bfb      	ldrb	r3, [r7, #15]
 8001386:	2b07      	cmp	r3, #7
 8001388:	d9f5      	bls.n	8001376 <FBL_DiagService_DSC_Calibration+0xd6>
		}
		FBL_TxHeader.DLC = 0;
 800138a:	4b3e      	ldr	r3, [pc, #248]	@ (8001484 <FBL_DiagService_DSC_Calibration+0x1e4>)
 800138c:	2200      	movs	r2, #0
 800138e:	611a      	str	r2, [r3, #16]
		FBL_TxHeader.ExtId = 0;
 8001390:	4b3c      	ldr	r3, [pc, #240]	@ (8001484 <FBL_DiagService_DSC_Calibration+0x1e4>)
 8001392:	2200      	movs	r2, #0
 8001394:	605a      	str	r2, [r3, #4]
		FBL_TxHeader.IDE = 0;
 8001396:	4b3b      	ldr	r3, [pc, #236]	@ (8001484 <FBL_DiagService_DSC_Calibration+0x1e4>)
 8001398:	2200      	movs	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
		FBL_TxHeader.RTR = 0;
 800139c:	4b39      	ldr	r3, [pc, #228]	@ (8001484 <FBL_DiagService_DSC_Calibration+0x1e4>)
 800139e:	2200      	movs	r2, #0
 80013a0:	60da      	str	r2, [r3, #12]
		FBL_TxHeader.StdId = 0;
 80013a2:	4b38      	ldr	r3, [pc, #224]	@ (8001484 <FBL_DiagService_DSC_Calibration+0x1e4>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
		FBL_TxHeader.TransmitGlobalTime = 0;
 80013a8:	4b36      	ldr	r3, [pc, #216]	@ (8001484 <FBL_DiagService_DSC_Calibration+0x1e4>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	751a      	strb	r2, [r3, #20]
		FBL_TxMailbox = 0;
 80013ae:	4b37      	ldr	r3, [pc, #220]	@ (800148c <FBL_DiagService_DSC_Calibration+0x1ec>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
	}
	if(FBL_RxFrame[1] == 0x11 &&
 80013b4:	4b2e      	ldr	r3, [pc, #184]	@ (8001470 <FBL_DiagService_DSC_Calibration+0x1d0>)
 80013b6:	785b      	ldrb	r3, [r3, #1]
 80013b8:	2b11      	cmp	r3, #17
 80013ba:	d131      	bne.n	8001420 <FBL_DiagService_DSC_Calibration+0x180>
			FBL_RxFrame[2] == 0x01)
 80013bc:	4b2c      	ldr	r3, [pc, #176]	@ (8001470 <FBL_DiagService_DSC_Calibration+0x1d0>)
 80013be:	789b      	ldrb	r3, [r3, #2]
	if(FBL_RxFrame[1] == 0x11 &&
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d12d      	bne.n	8001420 <FBL_DiagService_DSC_Calibration+0x180>
	{
		FBL_TxHeader.DLC = FBL_RxHeader.DLC;
 80013c4:	4b2e      	ldr	r3, [pc, #184]	@ (8001480 <FBL_DiagService_DSC_Calibration+0x1e0>)
 80013c6:	691b      	ldr	r3, [r3, #16]
 80013c8:	4a2e      	ldr	r2, [pc, #184]	@ (8001484 <FBL_DiagService_DSC_Calibration+0x1e4>)
 80013ca:	6113      	str	r3, [r2, #16]
		FBL_TxHeader.StdId = FBL_RxHeader.StdId + 1;
 80013cc:	4b2c      	ldr	r3, [pc, #176]	@ (8001480 <FBL_DiagService_DSC_Calibration+0x1e0>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	3301      	adds	r3, #1
 80013d2:	4a2c      	ldr	r2, [pc, #176]	@ (8001484 <FBL_DiagService_DSC_Calibration+0x1e4>)
 80013d4:	6013      	str	r3, [r2, #0]
		FBL_TxFrame[0] = FBL_RxFrame[0];
 80013d6:	4b26      	ldr	r3, [pc, #152]	@ (8001470 <FBL_DiagService_DSC_Calibration+0x1d0>)
 80013d8:	781a      	ldrb	r2, [r3, #0]
 80013da:	4b2b      	ldr	r3, [pc, #172]	@ (8001488 <FBL_DiagService_DSC_Calibration+0x1e8>)
 80013dc:	701a      	strb	r2, [r3, #0]
		FBL_TxFrame[1] = FBL_RxFrame[1] + 0x40;
 80013de:	4b24      	ldr	r3, [pc, #144]	@ (8001470 <FBL_DiagService_DSC_Calibration+0x1d0>)
 80013e0:	785b      	ldrb	r3, [r3, #1]
 80013e2:	3340      	adds	r3, #64	@ 0x40
 80013e4:	b2da      	uxtb	r2, r3
 80013e6:	4b28      	ldr	r3, [pc, #160]	@ (8001488 <FBL_DiagService_DSC_Calibration+0x1e8>)
 80013e8:	705a      	strb	r2, [r3, #1]
		FBL_TxFrame[2] = FBL_RxFrame[2];
 80013ea:	4b21      	ldr	r3, [pc, #132]	@ (8001470 <FBL_DiagService_DSC_Calibration+0x1d0>)
 80013ec:	789a      	ldrb	r2, [r3, #2]
 80013ee:	4b26      	ldr	r3, [pc, #152]	@ (8001488 <FBL_DiagService_DSC_Calibration+0x1e8>)
 80013f0:	709a      	strb	r2, [r3, #2]
		FBL_TxFrame[3] = FBL_RxFrame[3];
 80013f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001470 <FBL_DiagService_DSC_Calibration+0x1d0>)
 80013f4:	78da      	ldrb	r2, [r3, #3]
 80013f6:	4b24      	ldr	r3, [pc, #144]	@ (8001488 <FBL_DiagService_DSC_Calibration+0x1e8>)
 80013f8:	70da      	strb	r2, [r3, #3]
		HAL_CAN_AddTxMessage(&hcan, &FBL_TxHeader, FBL_TxFrame, &FBL_TxMailbox);
 80013fa:	4b24      	ldr	r3, [pc, #144]	@ (800148c <FBL_DiagService_DSC_Calibration+0x1ec>)
 80013fc:	4a22      	ldr	r2, [pc, #136]	@ (8001488 <FBL_DiagService_DSC_Calibration+0x1e8>)
 80013fe:	4921      	ldr	r1, [pc, #132]	@ (8001484 <FBL_DiagService_DSC_Calibration+0x1e4>)
 8001400:	4823      	ldr	r0, [pc, #140]	@ (8001490 <FBL_DiagService_DSC_Calibration+0x1f0>)
 8001402:	f000 fbdc 	bl	8001bbe <HAL_CAN_AddTxMessage>
		for(uint32 i = 0; i < 9000; i++);
 8001406:	2300      	movs	r3, #0
 8001408:	60bb      	str	r3, [r7, #8]
 800140a:	e002      	b.n	8001412 <FBL_DiagService_DSC_Calibration+0x172>
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	3301      	adds	r3, #1
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	f242 3227 	movw	r2, #8999	@ 0x2327
 8001418:	4293      	cmp	r3, r2
 800141a:	d9f7      	bls.n	800140c <FBL_DiagService_DSC_Calibration+0x16c>
		FBL_DiagService_ER_HardReset();
 800141c:	f7ff fd94 	bl	8000f48 <FBL_DiagService_ER_HardReset>
	}
	else
	{
		/* Do nothing. */
	}
	FBL_RxHeader.StdId = 0;
 8001420:	4b17      	ldr	r3, [pc, #92]	@ (8001480 <FBL_DiagService_DSC_Calibration+0x1e0>)
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
	FBL_RxHeader.DLC = 0;
 8001426:	4b16      	ldr	r3, [pc, #88]	@ (8001480 <FBL_DiagService_DSC_Calibration+0x1e0>)
 8001428:	2200      	movs	r2, #0
 800142a:	611a      	str	r2, [r3, #16]
	FBL_RxHeader.ExtId = 0;
 800142c:	4b14      	ldr	r3, [pc, #80]	@ (8001480 <FBL_DiagService_DSC_Calibration+0x1e0>)
 800142e:	2200      	movs	r2, #0
 8001430:	605a      	str	r2, [r3, #4]
	FBL_RxHeader.FilterMatchIndex = 0;
 8001432:	4b13      	ldr	r3, [pc, #76]	@ (8001480 <FBL_DiagService_DSC_Calibration+0x1e0>)
 8001434:	2200      	movs	r2, #0
 8001436:	619a      	str	r2, [r3, #24]
	FBL_RxHeader.IDE = 0;
 8001438:	4b11      	ldr	r3, [pc, #68]	@ (8001480 <FBL_DiagService_DSC_Calibration+0x1e0>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
	FBL_RxHeader.RTR = 0;
 800143e:	4b10      	ldr	r3, [pc, #64]	@ (8001480 <FBL_DiagService_DSC_Calibration+0x1e0>)
 8001440:	2200      	movs	r2, #0
 8001442:	60da      	str	r2, [r3, #12]
	FBL_RxHeader.Timestamp = 0;
 8001444:	4b0e      	ldr	r3, [pc, #56]	@ (8001480 <FBL_DiagService_DSC_Calibration+0x1e0>)
 8001446:	2200      	movs	r2, #0
 8001448:	615a      	str	r2, [r3, #20]
	for(uint8 i = 0; i < 8; i++)
 800144a:	2300      	movs	r3, #0
 800144c:	71fb      	strb	r3, [r7, #7]
 800144e:	e006      	b.n	800145e <FBL_DiagService_DSC_Calibration+0x1be>
	{
		FBL_RxFrame[i] = 0;
 8001450:	79fb      	ldrb	r3, [r7, #7]
 8001452:	4a07      	ldr	r2, [pc, #28]	@ (8001470 <FBL_DiagService_DSC_Calibration+0x1d0>)
 8001454:	2100      	movs	r1, #0
 8001456:	54d1      	strb	r1, [r2, r3]
	for(uint8 i = 0; i < 8; i++)
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	3301      	adds	r3, #1
 800145c:	71fb      	strb	r3, [r7, #7]
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	2b07      	cmp	r3, #7
 8001462:	d9f5      	bls.n	8001450 <FBL_DiagService_DSC_Calibration+0x1b0>
	}
}
 8001464:	bf00      	nop
 8001466:	bf00      	nop
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	200000a4 	.word	0x200000a4
 8001474:	200000f4 	.word	0x200000f4
 8001478:	0800f800 	.word	0x0800f800
 800147c:	20000004 	.word	0x20000004
 8001480:	200000b4 	.word	0x200000b4
 8001484:	200000d0 	.word	0x200000d0
 8001488:	200000ac 	.word	0x200000ac
 800148c:	200000e8 	.word	0x200000e8
 8001490:	2000003c 	.word	0x2000003c

08001494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001498:	b672      	cpsid	i
}
 800149a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	__disable_irq();
	__NVIC_SystemReset();
 800149c:	f7fe ff92 	bl	80003c4 <__NVIC_SystemReset>

080014a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014a6:	4b15      	ldr	r3, [pc, #84]	@ (80014fc <HAL_MspInit+0x5c>)
 80014a8:	699b      	ldr	r3, [r3, #24]
 80014aa:	4a14      	ldr	r2, [pc, #80]	@ (80014fc <HAL_MspInit+0x5c>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	6193      	str	r3, [r2, #24]
 80014b2:	4b12      	ldr	r3, [pc, #72]	@ (80014fc <HAL_MspInit+0x5c>)
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014be:	4b0f      	ldr	r3, [pc, #60]	@ (80014fc <HAL_MspInit+0x5c>)
 80014c0:	69db      	ldr	r3, [r3, #28]
 80014c2:	4a0e      	ldr	r2, [pc, #56]	@ (80014fc <HAL_MspInit+0x5c>)
 80014c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014c8:	61d3      	str	r3, [r2, #28]
 80014ca:	4b0c      	ldr	r3, [pc, #48]	@ (80014fc <HAL_MspInit+0x5c>)
 80014cc:	69db      	ldr	r3, [r3, #28]
 80014ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014d2:	607b      	str	r3, [r7, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]

  /* Peripheral interrupt init */

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001500 <HAL_MspInit+0x60>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	4a04      	ldr	r2, [pc, #16]	@ (8001500 <HAL_MspInit+0x60>)
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014f2:	bf00      	nop
 80014f4:	3714      	adds	r7, #20
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr
 80014fc:	40021000 	.word	0x40021000
 8001500:	40010000 	.word	0x40010000

08001504 <__NVIC_SystemReset>:
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001508:	f3bf 8f4f 	dsb	sy
}
 800150c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800150e:	4b06      	ldr	r3, [pc, #24]	@ (8001528 <__NVIC_SystemReset+0x24>)
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001516:	4904      	ldr	r1, [pc, #16]	@ (8001528 <__NVIC_SystemReset+0x24>)
 8001518:	4b04      	ldr	r3, [pc, #16]	@ (800152c <__NVIC_SystemReset+0x28>)
 800151a:	4313      	orrs	r3, r2
 800151c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800151e:	f3bf 8f4f 	dsb	sy
}
 8001522:	bf00      	nop
    __NOP();
 8001524:	bf00      	nop
 8001526:	e7fd      	b.n	8001524 <__NVIC_SystemReset+0x20>
 8001528:	e000ed00 	.word	0xe000ed00
 800152c:	05fa0004 	.word	0x05fa0004

08001530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	__NVIC_SystemReset();
 8001534:	f7ff ffe6 	bl	8001504 <__NVIC_SystemReset>

08001538 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	__NVIC_SystemReset();
 800153c:	f7ff ffe2 	bl	8001504 <__NVIC_SystemReset>

08001540 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	__NVIC_SystemReset();
 8001544:	f7ff ffde 	bl	8001504 <__NVIC_SystemReset>

08001548 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	__NVIC_SystemReset();
 800154c:	f7ff ffda 	bl	8001504 <__NVIC_SystemReset>

08001550 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	__NVIC_SystemReset();
 8001554:	f7ff ffd6 	bl	8001504 <__NVIC_SystemReset>

08001558 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */
  /* USER CODE END SVCall_IRQn 1 */
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr

08001564 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */
  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr

08001570 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */
  /* USER CODE END PendSV_IRQn 1 */
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr

0800157c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001580:	f000 f8ae 	bl	80016e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
}
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}

08001588 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */
  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 800158c:	f001 fd26 	bl	8002fdc <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */
  /* USER CODE END PVD_IRQn 1 */
}
 8001590:	bf00      	nop
 8001592:	bd80      	pop	{r7, pc}

08001594 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */
  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8001598:	f001 f8f8 	bl	800278c <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */
  /* USER CODE END FLASH_IRQn 1 */
}
 800159c:	bf00      	nop
 800159e:	bd80      	pop	{r7, pc}

080015a0 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RCC_IRQn 0 */
  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */
  /* USER CODE END RCC_IRQn 1 */
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr

080015ac <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80015b0:	4802      	ldr	r0, [pc, #8]	@ (80015bc <USB_HP_CAN1_TX_IRQHandler+0x10>)
 80015b2:	f000 fd19 	bl	8001fe8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	2000003c 	.word	0x2000003c

080015c0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80015c4:	4802      	ldr	r0, [pc, #8]	@ (80015d0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80015c6:	f000 fd0f 	bl	8001fe8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	2000003c 	.word	0x2000003c

080015d4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */
  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80015d8:	4802      	ldr	r0, [pc, #8]	@ (80015e4 <CAN1_RX1_IRQHandler+0x10>)
 80015da:	f000 fd05 	bl	8001fe8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */
  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	2000003c 	.word	0x2000003c

080015e8 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */
  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80015ec:	4802      	ldr	r0, [pc, #8]	@ (80015f8 <CAN1_SCE_IRQHandler+0x10>)
 80015ee:	f000 fcfb 	bl	8001fe8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */
  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	2000003c 	.word	0x2000003c

080015fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr

08001608 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001608:	f7ff fff8 	bl	80015fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800160c:	480b      	ldr	r0, [pc, #44]	@ (800163c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800160e:	490c      	ldr	r1, [pc, #48]	@ (8001640 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001610:	4a0c      	ldr	r2, [pc, #48]	@ (8001644 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001612:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001614:	e002      	b.n	800161c <LoopCopyDataInit>

08001616 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001616:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001618:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800161a:	3304      	adds	r3, #4

0800161c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800161c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800161e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001620:	d3f9      	bcc.n	8001616 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001622:	4a09      	ldr	r2, [pc, #36]	@ (8001648 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001624:	4c09      	ldr	r4, [pc, #36]	@ (800164c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001626:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001628:	e001      	b.n	800162e <LoopFillZerobss>

0800162a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800162a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800162c:	3204      	adds	r2, #4

0800162e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800162e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001630:	d3fb      	bcc.n	800162a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001632:	f002 f8d1 	bl	80037d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001636:	f7fe ff8f 	bl	8000558 <main>
  bx lr
 800163a:	4770      	bx	lr
  ldr r0, =_sdata
 800163c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001640:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001644:	08003864 	.word	0x08003864
  ldr r2, =_sbss
 8001648:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 800164c:	20000148 	.word	0x20000148

08001650 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001650:	e7fe      	b.n	8001650 <ADC1_2_IRQHandler>
	...

08001654 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001658:	4b08      	ldr	r3, [pc, #32]	@ (800167c <HAL_Init+0x28>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a07      	ldr	r2, [pc, #28]	@ (800167c <HAL_Init+0x28>)
 800165e:	f043 0310 	orr.w	r3, r3, #16
 8001662:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001664:	2003      	movs	r0, #3
 8001666:	f000 ffd1 	bl	800260c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800166a:	200f      	movs	r0, #15
 800166c:	f000 f808 	bl	8001680 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001670:	f7ff ff16 	bl	80014a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40022000 	.word	0x40022000

08001680 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001688:	4b12      	ldr	r3, [pc, #72]	@ (80016d4 <HAL_InitTick+0x54>)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	4b12      	ldr	r3, [pc, #72]	@ (80016d8 <HAL_InitTick+0x58>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	4619      	mov	r1, r3
 8001692:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001696:	fbb3 f3f1 	udiv	r3, r3, r1
 800169a:	fbb2 f3f3 	udiv	r3, r2, r3
 800169e:	4618      	mov	r0, r3
 80016a0:	f000 ffe9 	bl	8002676 <HAL_SYSTICK_Config>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e00e      	b.n	80016cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2b0f      	cmp	r3, #15
 80016b2:	d80a      	bhi.n	80016ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016b4:	2200      	movs	r2, #0
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	f04f 30ff 	mov.w	r0, #4294967295
 80016bc:	f000 ffb1 	bl	8002622 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016c0:	4a06      	ldr	r2, [pc, #24]	@ (80016dc <HAL_InitTick+0x5c>)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016c6:	2300      	movs	r3, #0
 80016c8:	e000      	b.n	80016cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20000010 	.word	0x20000010
 80016d8:	20000018 	.word	0x20000018
 80016dc:	20000014 	.word	0x20000014

080016e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016e4:	4b05      	ldr	r3, [pc, #20]	@ (80016fc <HAL_IncTick+0x1c>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	461a      	mov	r2, r3
 80016ea:	4b05      	ldr	r3, [pc, #20]	@ (8001700 <HAL_IncTick+0x20>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4413      	add	r3, r2
 80016f0:	4a03      	ldr	r2, [pc, #12]	@ (8001700 <HAL_IncTick+0x20>)
 80016f2:	6013      	str	r3, [r2, #0]
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr
 80016fc:	20000018 	.word	0x20000018
 8001700:	20000124 	.word	0x20000124

08001704 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  return uwTick;
 8001708:	4b02      	ldr	r3, [pc, #8]	@ (8001714 <HAL_GetTick+0x10>)
 800170a:	681b      	ldr	r3, [r3, #0]
}
 800170c:	4618      	mov	r0, r3
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr
 8001714:	20000124 	.word	0x20000124

08001718 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d101      	bne.n	800172a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e11c      	b.n	8001964 <HAL_CAN_Init+0x24c>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2b00      	cmp	r3, #0
 8001734:	d131      	bne.n	800179a <HAL_CAN_Init+0x82>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a8c      	ldr	r2, [pc, #560]	@ (800196c <HAL_CAN_Init+0x254>)
 800173a:	641a      	str	r2, [r3, #64]	@ 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4a8c      	ldr	r2, [pc, #560]	@ (8001970 <HAL_CAN_Init+0x258>)
 8001740:	645a      	str	r2, [r3, #68]	@ 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a8b      	ldr	r2, [pc, #556]	@ (8001974 <HAL_CAN_Init+0x25c>)
 8001746:	649a      	str	r2, [r3, #72]	@ 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4a8b      	ldr	r2, [pc, #556]	@ (8001978 <HAL_CAN_Init+0x260>)
 800174c:	64da      	str	r2, [r3, #76]	@ 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a8a      	ldr	r2, [pc, #552]	@ (800197c <HAL_CAN_Init+0x264>)
 8001752:	629a      	str	r2, [r3, #40]	@ 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4a8a      	ldr	r2, [pc, #552]	@ (8001980 <HAL_CAN_Init+0x268>)
 8001758:	62da      	str	r2, [r3, #44]	@ 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a89      	ldr	r2, [pc, #548]	@ (8001984 <HAL_CAN_Init+0x26c>)
 800175e:	631a      	str	r2, [r3, #48]	@ 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4a89      	ldr	r2, [pc, #548]	@ (8001988 <HAL_CAN_Init+0x270>)
 8001764:	635a      	str	r2, [r3, #52]	@ 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a88      	ldr	r2, [pc, #544]	@ (800198c <HAL_CAN_Init+0x274>)
 800176a:	639a      	str	r2, [r3, #56]	@ 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4a88      	ldr	r2, [pc, #544]	@ (8001990 <HAL_CAN_Init+0x278>)
 8001770:	63da      	str	r2, [r3, #60]	@ 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a87      	ldr	r2, [pc, #540]	@ (8001994 <HAL_CAN_Init+0x27c>)
 8001776:	651a      	str	r2, [r3, #80]	@ 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4a87      	ldr	r2, [pc, #540]	@ (8001998 <HAL_CAN_Init+0x280>)
 800177c:	655a      	str	r2, [r3, #84]	@ 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a86      	ldr	r2, [pc, #536]	@ (800199c <HAL_CAN_Init+0x284>)
 8001782:	659a      	str	r2, [r3, #88]	@ 0x58

    if (hcan->MspInitCallback == NULL)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001788:	2b00      	cmp	r3, #0
 800178a:	d102      	bne.n	8001792 <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4a84      	ldr	r2, [pc, #528]	@ (80019a0 <HAL_CAN_Init+0x288>)
 8001790:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f042 0201 	orr.w	r2, r2, #1
 80017a8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017aa:	f7ff ffab 	bl	8001704 <HAL_GetTick>
 80017ae:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80017b0:	e012      	b.n	80017d8 <HAL_CAN_Init+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017b2:	f7ff ffa7 	bl	8001704 <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b0a      	cmp	r3, #10
 80017be:	d90b      	bls.n	80017d8 <HAL_CAN_Init+0xc0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017c4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2205      	movs	r2, #5
 80017d0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e0c5      	b.n	8001964 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d0e5      	beq.n	80017b2 <HAL_CAN_Init+0x9a>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f022 0202 	bic.w	r2, r2, #2
 80017f4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017f6:	f7ff ff85 	bl	8001704 <HAL_GetTick>
 80017fa:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80017fc:	e012      	b.n	8001824 <HAL_CAN_Init+0x10c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017fe:	f7ff ff81 	bl	8001704 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b0a      	cmp	r3, #10
 800180a:	d90b      	bls.n	8001824 <HAL_CAN_Init+0x10c>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001810:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2205      	movs	r2, #5
 800181c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e09f      	b.n	8001964 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1e5      	bne.n	80017fe <HAL_CAN_Init+0xe6>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	7e1b      	ldrb	r3, [r3, #24]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d108      	bne.n	800184c <HAL_CAN_Init+0x134>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	e007      	b.n	800185c <HAL_CAN_Init+0x144>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800185a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	7e5b      	ldrb	r3, [r3, #25]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d108      	bne.n	8001876 <HAL_CAN_Init+0x15e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	e007      	b.n	8001886 <HAL_CAN_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001884:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	7e9b      	ldrb	r3, [r3, #26]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d108      	bne.n	80018a0 <HAL_CAN_Init+0x188>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f042 0220 	orr.w	r2, r2, #32
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	e007      	b.n	80018b0 <HAL_CAN_Init+0x198>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f022 0220 	bic.w	r2, r2, #32
 80018ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	7edb      	ldrb	r3, [r3, #27]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d108      	bne.n	80018ca <HAL_CAN_Init+0x1b2>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f022 0210 	bic.w	r2, r2, #16
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	e007      	b.n	80018da <HAL_CAN_Init+0x1c2>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f042 0210 	orr.w	r2, r2, #16
 80018d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	7f1b      	ldrb	r3, [r3, #28]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d108      	bne.n	80018f4 <HAL_CAN_Init+0x1dc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f042 0208 	orr.w	r2, r2, #8
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	e007      	b.n	8001904 <HAL_CAN_Init+0x1ec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f022 0208 	bic.w	r2, r2, #8
 8001902:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	7f5b      	ldrb	r3, [r3, #29]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d108      	bne.n	800191e <HAL_CAN_Init+0x206>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f042 0204 	orr.w	r2, r2, #4
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	e007      	b.n	800192e <HAL_CAN_Init+0x216>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f022 0204 	bic.w	r2, r2, #4
 800192c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	689a      	ldr	r2, [r3, #8]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	431a      	orrs	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	691b      	ldr	r3, [r3, #16]
 800193c:	431a      	orrs	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	695b      	ldr	r3, [r3, #20]
 8001942:	ea42 0103 	orr.w	r1, r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	1e5a      	subs	r2, r3, #1
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	430a      	orrs	r2, r1
 8001952:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2201      	movs	r2, #1
 800195e:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	3710      	adds	r7, #16
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	080004a5 	.word	0x080004a5
 8001970:	080003f1 	.word	0x080003f1
 8001974:	080023df 	.word	0x080023df
 8001978:	080023f1 	.word	0x080023f1
 800197c:	08002373 	.word	0x08002373
 8001980:	08002385 	.word	0x08002385
 8001984:	08002397 	.word	0x08002397
 8001988:	080023a9 	.word	0x080023a9
 800198c:	080023bb 	.word	0x080023bb
 8001990:	080023cd 	.word	0x080023cd
 8001994:	08002403 	.word	0x08002403
 8001998:	08002415 	.word	0x08002415
 800199c:	08002427 	.word	0x08002427
 80019a0:	0800020d 	.word	0x0800020d

080019a4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b087      	sub	sp, #28
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019ba:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80019bc:	7cfb      	ldrb	r3, [r7, #19]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d003      	beq.n	80019ca <HAL_CAN_ConfigFilter+0x26>
 80019c2:	7cfb      	ldrb	r3, [r7, #19]
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	f040 80aa 	bne.w	8001b1e <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80019d0:	f043 0201 	orr.w	r2, r3, #1
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	f003 031f 	and.w	r3, r3, #31
 80019e2:	2201      	movs	r2, #1
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	43db      	mvns	r3, r3
 80019f4:	401a      	ands	r2, r3
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	69db      	ldr	r3, [r3, #28]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d123      	bne.n	8001a4c <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	401a      	ands	r2, r3
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001a26:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	3248      	adds	r2, #72	@ 0x48
 8001a2c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a40:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a42:	6979      	ldr	r1, [r7, #20]
 8001a44:	3348      	adds	r3, #72	@ 0x48
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	440b      	add	r3, r1
 8001a4a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	69db      	ldr	r3, [r3, #28]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d122      	bne.n	8001a9a <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a70:	683a      	ldr	r2, [r7, #0]
 8001a72:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001a74:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	3248      	adds	r2, #72	@ 0x48
 8001a7a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a8e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a90:	6979      	ldr	r1, [r7, #20]
 8001a92:	3348      	adds	r3, #72	@ 0x48
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	440b      	add	r3, r1
 8001a98:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d109      	bne.n	8001ab6 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	401a      	ands	r2, r3
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001ab4:	e007      	b.n	8001ac6 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d109      	bne.n	8001ae2 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	401a      	ands	r2, r3
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001ae0:	e007      	b.n	8001af2 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	431a      	orrs	r2, r3
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	6a1b      	ldr	r3, [r3, #32]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d107      	bne.n	8001b0a <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	431a      	orrs	r2, r3
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001b10:	f023 0201 	bic.w	r2, r3, #1
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	e006      	b.n	8001b2c <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b22:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
  }
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	371c      	adds	r7, #28
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bc80      	pop	{r7}
 8001b34:	4770      	bx	lr

08001b36 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b084      	sub	sp, #16
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d12e      	bne.n	8001ba8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2202      	movs	r2, #2
 8001b4e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f022 0201 	bic.w	r2, r2, #1
 8001b60:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001b62:	f7ff fdcf 	bl	8001704 <HAL_GetTick>
 8001b66:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b68:	e012      	b.n	8001b90 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b6a:	f7ff fdcb 	bl	8001704 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b0a      	cmp	r3, #10
 8001b76:	d90b      	bls.n	8001b90 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b7c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2205      	movs	r2, #5
 8001b88:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e012      	b.n	8001bb6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d1e5      	bne.n	8001b6a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	e006      	b.n	8001bb6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bac:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
  }
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b089      	sub	sp, #36	@ 0x24
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	60f8      	str	r0, [r7, #12]
 8001bc6:	60b9      	str	r1, [r7, #8]
 8001bc8:	607a      	str	r2, [r7, #4]
 8001bca:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bd2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001bdc:	7ffb      	ldrb	r3, [r7, #31]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d003      	beq.n	8001bea <HAL_CAN_AddTxMessage+0x2c>
 8001be2:	7ffb      	ldrb	r3, [r7, #31]
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	f040 80ad 	bne.w	8001d44 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d10a      	bne.n	8001c0a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d105      	bne.n	8001c0a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f000 8095 	beq.w	8001d34 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	0e1b      	lsrs	r3, r3, #24
 8001c0e:	f003 0303 	and.w	r3, r3, #3
 8001c12:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001c14:	2201      	movs	r2, #1
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	409a      	lsls	r2, r3
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d10d      	bne.n	8001c42 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001c30:	68f9      	ldr	r1, [r7, #12]
 8001c32:	6809      	ldr	r1, [r1, #0]
 8001c34:	431a      	orrs	r2, r3
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	3318      	adds	r3, #24
 8001c3a:	011b      	lsls	r3, r3, #4
 8001c3c:	440b      	add	r3, r1
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	e00f      	b.n	8001c62 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c4c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c52:	68f9      	ldr	r1, [r7, #12]
 8001c54:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001c56:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	3318      	adds	r3, #24
 8001c5c:	011b      	lsls	r3, r3, #4
 8001c5e:	440b      	add	r3, r1
 8001c60:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6819      	ldr	r1, [r3, #0]
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	691a      	ldr	r2, [r3, #16]
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	3318      	adds	r3, #24
 8001c6e:	011b      	lsls	r3, r3, #4
 8001c70:	440b      	add	r3, r1
 8001c72:	3304      	adds	r3, #4
 8001c74:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	7d1b      	ldrb	r3, [r3, #20]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d111      	bne.n	8001ca2 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	3318      	adds	r3, #24
 8001c86:	011b      	lsls	r3, r3, #4
 8001c88:	4413      	add	r3, r2
 8001c8a:	3304      	adds	r3, #4
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	6811      	ldr	r1, [r2, #0]
 8001c92:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	3318      	adds	r3, #24
 8001c9a:	011b      	lsls	r3, r3, #4
 8001c9c:	440b      	add	r3, r1
 8001c9e:	3304      	adds	r3, #4
 8001ca0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	3307      	adds	r3, #7
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	061a      	lsls	r2, r3, #24
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	3306      	adds	r3, #6
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	041b      	lsls	r3, r3, #16
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3305      	adds	r3, #5
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	021b      	lsls	r3, r3, #8
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	3204      	adds	r2, #4
 8001cc2:	7812      	ldrb	r2, [r2, #0]
 8001cc4:	4610      	mov	r0, r2
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	6811      	ldr	r1, [r2, #0]
 8001cca:	ea43 0200 	orr.w	r2, r3, r0
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	011b      	lsls	r3, r3, #4
 8001cd2:	440b      	add	r3, r1
 8001cd4:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001cd8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	3303      	adds	r3, #3
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	061a      	lsls	r2, r3, #24
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	3302      	adds	r3, #2
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	041b      	lsls	r3, r3, #16
 8001cea:	431a      	orrs	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	021b      	lsls	r3, r3, #8
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	7812      	ldrb	r2, [r2, #0]
 8001cfa:	4610      	mov	r0, r2
 8001cfc:	68fa      	ldr	r2, [r7, #12]
 8001cfe:	6811      	ldr	r1, [r2, #0]
 8001d00:	ea43 0200 	orr.w	r2, r3, r0
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	011b      	lsls	r3, r3, #4
 8001d08:	440b      	add	r3, r1
 8001d0a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001d0e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	3318      	adds	r3, #24
 8001d18:	011b      	lsls	r3, r3, #4
 8001d1a:	4413      	add	r3, r2
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	6811      	ldr	r1, [r2, #0]
 8001d22:	f043 0201 	orr.w	r2, r3, #1
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	3318      	adds	r3, #24
 8001d2a:	011b      	lsls	r3, r3, #4
 8001d2c:	440b      	add	r3, r1
 8001d2e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001d30:	2300      	movs	r3, #0
 8001d32:	e00e      	b.n	8001d52 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d38:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e006      	b.n	8001d52 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d48:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
  }
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3724      	adds	r7, #36	@ 0x24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr

08001d5c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b087      	sub	sp, #28
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
 8001d68:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d70:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d72:	7dfb      	ldrb	r3, [r7, #23]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d003      	beq.n	8001d80 <HAL_CAN_GetRxMessage+0x24>
 8001d78:	7dfb      	ldrb	r3, [r7, #23]
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	f040 8103 	bne.w	8001f86 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d10e      	bne.n	8001da4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	f003 0303 	and.w	r3, r3, #3
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d116      	bne.n	8001dc2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d98:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e0f7      	b.n	8001f94 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	f003 0303 	and.w	r3, r3, #3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d107      	bne.n	8001dc2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e0e8      	b.n	8001f94 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	331b      	adds	r3, #27
 8001dca:	011b      	lsls	r3, r3, #4
 8001dcc:	4413      	add	r3, r2
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0204 	and.w	r2, r3, #4
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d10c      	bne.n	8001dfa <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	331b      	adds	r3, #27
 8001de8:	011b      	lsls	r3, r3, #4
 8001dea:	4413      	add	r3, r2
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	0d5b      	lsrs	r3, r3, #21
 8001df0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	e00b      	b.n	8001e12 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	331b      	adds	r3, #27
 8001e02:	011b      	lsls	r3, r3, #4
 8001e04:	4413      	add	r3, r2
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	08db      	lsrs	r3, r3, #3
 8001e0a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	331b      	adds	r3, #27
 8001e1a:	011b      	lsls	r3, r3, #4
 8001e1c:	4413      	add	r3, r2
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0202 	and.w	r2, r3, #2
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	331b      	adds	r3, #27
 8001e30:	011b      	lsls	r3, r3, #4
 8001e32:	4413      	add	r3, r2
 8001e34:	3304      	adds	r3, #4
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0308 	and.w	r3, r3, #8
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d003      	beq.n	8001e48 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2208      	movs	r2, #8
 8001e44:	611a      	str	r2, [r3, #16]
 8001e46:	e00b      	b.n	8001e60 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	331b      	adds	r3, #27
 8001e50:	011b      	lsls	r3, r3, #4
 8001e52:	4413      	add	r3, r2
 8001e54:	3304      	adds	r3, #4
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 020f 	and.w	r2, r3, #15
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	331b      	adds	r3, #27
 8001e68:	011b      	lsls	r3, r3, #4
 8001e6a:	4413      	add	r3, r2
 8001e6c:	3304      	adds	r3, #4
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	0a1b      	lsrs	r3, r3, #8
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	331b      	adds	r3, #27
 8001e80:	011b      	lsls	r3, r3, #4
 8001e82:	4413      	add	r3, r2
 8001e84:	3304      	adds	r3, #4
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	0c1b      	lsrs	r3, r3, #16
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	011b      	lsls	r3, r3, #4
 8001e98:	4413      	add	r3, r2
 8001e9a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	011b      	lsls	r3, r3, #4
 8001eae:	4413      	add	r3, r2
 8001eb0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	0a1a      	lsrs	r2, r3, #8
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	b2d2      	uxtb	r2, r2
 8001ebe:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	011b      	lsls	r3, r3, #4
 8001ec8:	4413      	add	r3, r2
 8001eca:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	0c1a      	lsrs	r2, r3, #16
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	3302      	adds	r3, #2
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	011b      	lsls	r3, r3, #4
 8001ee2:	4413      	add	r3, r2
 8001ee4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	0e1a      	lsrs	r2, r3, #24
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	3303      	adds	r3, #3
 8001ef0:	b2d2      	uxtb	r2, r2
 8001ef2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	011b      	lsls	r3, r3, #4
 8001efc:	4413      	add	r3, r2
 8001efe:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	3304      	adds	r3, #4
 8001f08:	b2d2      	uxtb	r2, r2
 8001f0a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	011b      	lsls	r3, r3, #4
 8001f14:	4413      	add	r3, r2
 8001f16:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	0a1a      	lsrs	r2, r3, #8
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	3305      	adds	r3, #5
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	011b      	lsls	r3, r3, #4
 8001f2e:	4413      	add	r3, r2
 8001f30:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	0c1a      	lsrs	r2, r3, #16
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	3306      	adds	r3, #6
 8001f3c:	b2d2      	uxtb	r2, r2
 8001f3e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	011b      	lsls	r3, r3, #4
 8001f48:	4413      	add	r3, r2
 8001f4a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	0e1a      	lsrs	r2, r3, #24
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	3307      	adds	r3, #7
 8001f56:	b2d2      	uxtb	r2, r2
 8001f58:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d108      	bne.n	8001f72 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68da      	ldr	r2, [r3, #12]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f042 0220 	orr.w	r2, r2, #32
 8001f6e:	60da      	str	r2, [r3, #12]
 8001f70:	e007      	b.n	8001f82 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	691a      	ldr	r2, [r3, #16]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f042 0220 	orr.w	r2, r2, #32
 8001f80:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001f82:	2300      	movs	r3, #0
 8001f84:	e006      	b.n	8001f94 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f8a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
  }
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	371c      	adds	r7, #28
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bc80      	pop	{r7}
 8001f9c:	4770      	bx	lr

08001f9e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b085      	sub	sp, #20
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
 8001fa6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fae:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001fb0:	7bfb      	ldrb	r3, [r7, #15]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d002      	beq.n	8001fbc <HAL_CAN_ActivateNotification+0x1e>
 8001fb6:	7bfb      	ldrb	r3, [r7, #15]
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d109      	bne.n	8001fd0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6959      	ldr	r1, [r3, #20]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	e006      	b.n	8001fde <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
  }
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr

08001fe8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b08a      	sub	sp, #40	@ 0x28
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002024:	6a3b      	ldr	r3, [r7, #32]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b00      	cmp	r3, #0
 800202c:	f000 8083 	beq.w	8002136 <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b00      	cmp	r3, #0
 8002038:	d025      	beq.n	8002086 <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2201      	movs	r2, #1
 8002040:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d004      	beq.n	8002056 <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	4798      	blx	r3
 8002054:	e017      	b.n	8002086 <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b00      	cmp	r3, #0
 800205e:	d004      	beq.n	800206a <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002062:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002066:	627b      	str	r3, [r7, #36]	@ 0x24
 8002068:	e00d      	b.n	8002086 <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	f003 0308 	and.w	r3, r3, #8
 8002070:	2b00      	cmp	r3, #0
 8002072:	d004      	beq.n	800207e <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002076:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800207a:	627b      	str	r3, [r7, #36]	@ 0x24
 800207c:	e003      	b.n	8002086 <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800208c:	2b00      	cmp	r3, #0
 800208e:	d026      	beq.n	80020de <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002098:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d004      	beq.n	80020ae <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	4798      	blx	r3
 80020ac:	e017      	b.n	80020de <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d004      	beq.n	80020c2 <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80020b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ba:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80020be:	627b      	str	r3, [r7, #36]	@ 0x24
 80020c0:	e00d      	b.n	80020de <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d004      	beq.n	80020d6 <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80020cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80020d4:	e003      	b.n	80020de <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d026      	beq.n	8002136 <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80020f0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d004      	beq.n	8002106 <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	4798      	blx	r3
 8002104:	e017      	b.n	8002136 <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d004      	beq.n	800211a <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002112:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002116:	627b      	str	r3, [r7, #36]	@ 0x24
 8002118:	e00d      	b.n	8002136 <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d004      	beq.n	800212e <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002126:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800212a:	627b      	str	r3, [r7, #36]	@ 0x24
 800212c:	e003      	b.n	8002136 <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002136:	6a3b      	ldr	r3, [r7, #32]
 8002138:	f003 0308 	and.w	r3, r3, #8
 800213c:	2b00      	cmp	r3, #0
 800213e:	d00c      	beq.n	800215a <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	f003 0310 	and.w	r3, r3, #16
 8002146:	2b00      	cmp	r3, #0
 8002148:	d007      	beq.n	800215a <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800214a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002150:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2210      	movs	r2, #16
 8002158:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800215a:	6a3b      	ldr	r3, [r7, #32]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	2b00      	cmp	r3, #0
 8002162:	d00c      	beq.n	800217e <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	f003 0308 	and.w	r3, r3, #8
 800216a:	2b00      	cmp	r3, #0
 800216c:	d007      	beq.n	800217e <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2208      	movs	r2, #8
 8002174:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800217e:	6a3b      	ldr	r3, [r7, #32]
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00a      	beq.n	800219e <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	f003 0303 	and.w	r3, r3, #3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d003      	beq.n	800219e <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800219e:	6a3b      	ldr	r3, [r7, #32]
 80021a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00c      	beq.n	80021c2 <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	f003 0310 	and.w	r3, r3, #16
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d007      	beq.n	80021c2 <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80021b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021b8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2210      	movs	r2, #16
 80021c0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80021c2:	6a3b      	ldr	r3, [r7, #32]
 80021c4:	f003 0320 	and.w	r3, r3, #32
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00c      	beq.n	80021e6 <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	f003 0308 	and.w	r3, r3, #8
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d007      	beq.n	80021e6 <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2208      	movs	r2, #8
 80021dc:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80021e6:	6a3b      	ldr	r3, [r7, #32]
 80021e8:	f003 0310 	and.w	r3, r3, #16
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d00a      	beq.n	8002206 <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	f003 0303 	and.w	r3, r3, #3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d003      	beq.n	8002206 <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002206:	6a3b      	ldr	r3, [r7, #32]
 8002208:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d00c      	beq.n	800222a <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	f003 0310 	and.w	r3, r3, #16
 8002216:	2b00      	cmp	r3, #0
 8002218:	d007      	beq.n	800222a <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2210      	movs	r2, #16
 8002220:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800222a:	6a3b      	ldr	r3, [r7, #32]
 800222c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d00c      	beq.n	800224e <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	f003 0308 	and.w	r3, r3, #8
 800223a:	2b00      	cmp	r3, #0
 800223c:	d007      	beq.n	800224e <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2208      	movs	r2, #8
 8002244:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800224e:	6a3b      	ldr	r3, [r7, #32]
 8002250:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d07b      	beq.n	8002350 <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	f003 0304 	and.w	r3, r3, #4
 800225e:	2b00      	cmp	r3, #0
 8002260:	d072      	beq.n	8002348 <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002262:	6a3b      	ldr	r3, [r7, #32]
 8002264:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002268:	2b00      	cmp	r3, #0
 800226a:	d008      	beq.n	800227e <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002272:	2b00      	cmp	r3, #0
 8002274:	d003      	beq.n	800227e <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002278:	f043 0301 	orr.w	r3, r3, #1
 800227c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800227e:	6a3b      	ldr	r3, [r7, #32]
 8002280:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002284:	2b00      	cmp	r3, #0
 8002286:	d008      	beq.n	800229a <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800228e:	2b00      	cmp	r3, #0
 8002290:	d003      	beq.n	800229a <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002294:	f043 0302 	orr.w	r3, r3, #2
 8002298:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800229a:	6a3b      	ldr	r3, [r7, #32]
 800229c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d008      	beq.n	80022b6 <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80022ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b0:	f043 0304 	orr.w	r3, r3, #4
 80022b4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80022b6:	6a3b      	ldr	r3, [r7, #32]
 80022b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d043      	beq.n	8002348 <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d03e      	beq.n	8002348 <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022d0:	2b60      	cmp	r3, #96	@ 0x60
 80022d2:	d02b      	beq.n	800232c <HAL_CAN_IRQHandler+0x344>
 80022d4:	2b60      	cmp	r3, #96	@ 0x60
 80022d6:	d82e      	bhi.n	8002336 <HAL_CAN_IRQHandler+0x34e>
 80022d8:	2b50      	cmp	r3, #80	@ 0x50
 80022da:	d022      	beq.n	8002322 <HAL_CAN_IRQHandler+0x33a>
 80022dc:	2b50      	cmp	r3, #80	@ 0x50
 80022de:	d82a      	bhi.n	8002336 <HAL_CAN_IRQHandler+0x34e>
 80022e0:	2b40      	cmp	r3, #64	@ 0x40
 80022e2:	d019      	beq.n	8002318 <HAL_CAN_IRQHandler+0x330>
 80022e4:	2b40      	cmp	r3, #64	@ 0x40
 80022e6:	d826      	bhi.n	8002336 <HAL_CAN_IRQHandler+0x34e>
 80022e8:	2b30      	cmp	r3, #48	@ 0x30
 80022ea:	d010      	beq.n	800230e <HAL_CAN_IRQHandler+0x326>
 80022ec:	2b30      	cmp	r3, #48	@ 0x30
 80022ee:	d822      	bhi.n	8002336 <HAL_CAN_IRQHandler+0x34e>
 80022f0:	2b10      	cmp	r3, #16
 80022f2:	d002      	beq.n	80022fa <HAL_CAN_IRQHandler+0x312>
 80022f4:	2b20      	cmp	r3, #32
 80022f6:	d005      	beq.n	8002304 <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80022f8:	e01d      	b.n	8002336 <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 80022fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fc:	f043 0308 	orr.w	r3, r3, #8
 8002300:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002302:	e019      	b.n	8002338 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002306:	f043 0310 	orr.w	r3, r3, #16
 800230a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800230c:	e014      	b.n	8002338 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 800230e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002310:	f043 0320 	orr.w	r3, r3, #32
 8002314:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002316:	e00f      	b.n	8002338 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 8002318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800231a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800231e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002320:	e00a      	b.n	8002338 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 8002322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002324:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002328:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800232a:	e005      	b.n	8002338 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 800232c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800232e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002332:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002334:	e000      	b.n	8002338 <HAL_CAN_IRQHandler+0x350>
            break;
 8002336:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	699a      	ldr	r2, [r3, #24]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002346:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2204      	movs	r2, #4
 800234e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002352:	2b00      	cmp	r3, #0
 8002354:	d009      	beq.n	800236a <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800235a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800235c:	431a      	orrs	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800236a:	bf00      	nop
 800236c:	3728      	adds	r7, #40	@ 0x28
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002372:	b480      	push	{r7}
 8002374:	b083      	sub	sp, #12
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800237a:	bf00      	nop
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr

08002384 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	bc80      	pop	{r7}
 8002394:	4770      	bx	lr

08002396 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002396:	b480      	push	{r7}
 8002398:	b083      	sub	sp, #12
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800239e:	bf00      	nop
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bc80      	pop	{r7}
 80023a6:	4770      	bx	lr

080023a8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bc80      	pop	{r7}
 80023b8:	4770      	bx	lr

080023ba <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b083      	sub	sp, #12
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80023c2:	bf00      	nop
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bc80      	pop	{r7}
 80023ca:	4770      	bx	lr

080023cc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	bc80      	pop	{r7}
 80023dc:	4770      	bx	lr

080023de <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80023de:	b480      	push	{r7}
 80023e0:	b083      	sub	sp, #12
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80023e6:	bf00      	nop
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr

080023f0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bc80      	pop	{r7}
 8002400:	4770      	bx	lr

08002402 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002402:	b480      	push	{r7}
 8002404:	b083      	sub	sp, #12
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr

08002414 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	bc80      	pop	{r7}
 8002424:	4770      	bx	lr

08002426 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002426:	b480      	push	{r7}
 8002428:	b083      	sub	sp, #12
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr

08002438 <__NVIC_SetPriorityGrouping>:
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f003 0307 	and.w	r3, r3, #7
 8002446:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002448:	4b0c      	ldr	r3, [pc, #48]	@ (800247c <__NVIC_SetPriorityGrouping+0x44>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800244e:	68ba      	ldr	r2, [r7, #8]
 8002450:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002454:	4013      	ands	r3, r2
 8002456:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002460:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002464:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002468:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800246a:	4a04      	ldr	r2, [pc, #16]	@ (800247c <__NVIC_SetPriorityGrouping+0x44>)
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	60d3      	str	r3, [r2, #12]
}
 8002470:	bf00      	nop
 8002472:	3714      	adds	r7, #20
 8002474:	46bd      	mov	sp, r7
 8002476:	bc80      	pop	{r7}
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	e000ed00 	.word	0xe000ed00

08002480 <__NVIC_GetPriorityGrouping>:
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002484:	4b04      	ldr	r3, [pc, #16]	@ (8002498 <__NVIC_GetPriorityGrouping+0x18>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	0a1b      	lsrs	r3, r3, #8
 800248a:	f003 0307 	and.w	r3, r3, #7
}
 800248e:	4618      	mov	r0, r3
 8002490:	46bd      	mov	sp, r7
 8002492:	bc80      	pop	{r7}
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	e000ed00 	.word	0xe000ed00

0800249c <__NVIC_EnableIRQ>:
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	db0b      	blt.n	80024c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ae:	79fb      	ldrb	r3, [r7, #7]
 80024b0:	f003 021f 	and.w	r2, r3, #31
 80024b4:	4906      	ldr	r1, [pc, #24]	@ (80024d0 <__NVIC_EnableIRQ+0x34>)
 80024b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ba:	095b      	lsrs	r3, r3, #5
 80024bc:	2001      	movs	r0, #1
 80024be:	fa00 f202 	lsl.w	r2, r0, r2
 80024c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bc80      	pop	{r7}
 80024ce:	4770      	bx	lr
 80024d0:	e000e100 	.word	0xe000e100

080024d4 <__NVIC_ClearPendingIRQ>:
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	db0c      	blt.n	8002500 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024e6:	79fb      	ldrb	r3, [r7, #7]
 80024e8:	f003 021f 	and.w	r2, r3, #31
 80024ec:	4907      	ldr	r1, [pc, #28]	@ (800250c <__NVIC_ClearPendingIRQ+0x38>)
 80024ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f2:	095b      	lsrs	r3, r3, #5
 80024f4:	2001      	movs	r0, #1
 80024f6:	fa00 f202 	lsl.w	r2, r0, r2
 80024fa:	3360      	adds	r3, #96	@ 0x60
 80024fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	bc80      	pop	{r7}
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	e000e100 	.word	0xe000e100

08002510 <__NVIC_SetPriority>:
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	4603      	mov	r3, r0
 8002518:	6039      	str	r1, [r7, #0]
 800251a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800251c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002520:	2b00      	cmp	r3, #0
 8002522:	db0a      	blt.n	800253a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	b2da      	uxtb	r2, r3
 8002528:	490c      	ldr	r1, [pc, #48]	@ (800255c <__NVIC_SetPriority+0x4c>)
 800252a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252e:	0112      	lsls	r2, r2, #4
 8002530:	b2d2      	uxtb	r2, r2
 8002532:	440b      	add	r3, r1
 8002534:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002538:	e00a      	b.n	8002550 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	b2da      	uxtb	r2, r3
 800253e:	4908      	ldr	r1, [pc, #32]	@ (8002560 <__NVIC_SetPriority+0x50>)
 8002540:	79fb      	ldrb	r3, [r7, #7]
 8002542:	f003 030f 	and.w	r3, r3, #15
 8002546:	3b04      	subs	r3, #4
 8002548:	0112      	lsls	r2, r2, #4
 800254a:	b2d2      	uxtb	r2, r2
 800254c:	440b      	add	r3, r1
 800254e:	761a      	strb	r2, [r3, #24]
}
 8002550:	bf00      	nop
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	bc80      	pop	{r7}
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	e000e100 	.word	0xe000e100
 8002560:	e000ed00 	.word	0xe000ed00

08002564 <NVIC_EncodePriority>:
{
 8002564:	b480      	push	{r7}
 8002566:	b089      	sub	sp, #36	@ 0x24
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f003 0307 	and.w	r3, r3, #7
 8002576:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	f1c3 0307 	rsb	r3, r3, #7
 800257e:	2b04      	cmp	r3, #4
 8002580:	bf28      	it	cs
 8002582:	2304      	movcs	r3, #4
 8002584:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	3304      	adds	r3, #4
 800258a:	2b06      	cmp	r3, #6
 800258c:	d902      	bls.n	8002594 <NVIC_EncodePriority+0x30>
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	3b03      	subs	r3, #3
 8002592:	e000      	b.n	8002596 <NVIC_EncodePriority+0x32>
 8002594:	2300      	movs	r3, #0
 8002596:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002598:	f04f 32ff 	mov.w	r2, #4294967295
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	43da      	mvns	r2, r3
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	401a      	ands	r2, r3
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025ac:	f04f 31ff 	mov.w	r1, #4294967295
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	fa01 f303 	lsl.w	r3, r1, r3
 80025b6:	43d9      	mvns	r1, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025bc:	4313      	orrs	r3, r2
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3724      	adds	r7, #36	@ 0x24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr

080025c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3b01      	subs	r3, #1
 80025d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025d8:	d301      	bcc.n	80025de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025da:	2301      	movs	r3, #1
 80025dc:	e00f      	b.n	80025fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025de:	4a0a      	ldr	r2, [pc, #40]	@ (8002608 <SysTick_Config+0x40>)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	3b01      	subs	r3, #1
 80025e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025e6:	210f      	movs	r1, #15
 80025e8:	f04f 30ff 	mov.w	r0, #4294967295
 80025ec:	f7ff ff90 	bl	8002510 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025f0:	4b05      	ldr	r3, [pc, #20]	@ (8002608 <SysTick_Config+0x40>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025f6:	4b04      	ldr	r3, [pc, #16]	@ (8002608 <SysTick_Config+0x40>)
 80025f8:	2207      	movs	r2, #7
 80025fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	e000e010 	.word	0xe000e010

0800260c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f7ff ff0f 	bl	8002438 <__NVIC_SetPriorityGrouping>
}
 800261a:	bf00      	nop
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002622:	b580      	push	{r7, lr}
 8002624:	b086      	sub	sp, #24
 8002626:	af00      	add	r7, sp, #0
 8002628:	4603      	mov	r3, r0
 800262a:	60b9      	str	r1, [r7, #8]
 800262c:	607a      	str	r2, [r7, #4]
 800262e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002630:	2300      	movs	r3, #0
 8002632:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002634:	f7ff ff24 	bl	8002480 <__NVIC_GetPriorityGrouping>
 8002638:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	68b9      	ldr	r1, [r7, #8]
 800263e:	6978      	ldr	r0, [r7, #20]
 8002640:	f7ff ff90 	bl	8002564 <NVIC_EncodePriority>
 8002644:	4602      	mov	r2, r0
 8002646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800264a:	4611      	mov	r1, r2
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff ff5f 	bl	8002510 <__NVIC_SetPriority>
}
 8002652:	bf00      	nop
 8002654:	3718      	adds	r7, #24
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b082      	sub	sp, #8
 800265e:	af00      	add	r7, sp, #0
 8002660:	4603      	mov	r3, r0
 8002662:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff ff17 	bl	800249c <__NVIC_EnableIRQ>
}
 800266e:	bf00      	nop
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b082      	sub	sp, #8
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7ff ffa2 	bl	80025c8 <SysTick_Config>
 8002684:	4603      	mov	r3, r0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b082      	sub	sp, #8
 8002692:	af00      	add	r7, sp, #0
 8002694:	4603      	mov	r3, r0
 8002696:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff ff19 	bl	80024d4 <__NVIC_ClearPendingIRQ>
}
 80026a2:	bf00      	nop
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
	...

080026ac <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80026ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026ae:	b087      	sub	sp, #28
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80026be:	2300      	movs	r3, #0
 80026c0:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80026c2:	2300      	movs	r3, #0
 80026c4:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80026c6:	4b2f      	ldr	r3, [pc, #188]	@ (8002784 <HAL_FLASH_Program+0xd8>)
 80026c8:	7e1b      	ldrb	r3, [r3, #24]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d101      	bne.n	80026d2 <HAL_FLASH_Program+0x26>
 80026ce:	2302      	movs	r3, #2
 80026d0:	e054      	b.n	800277c <HAL_FLASH_Program+0xd0>
 80026d2:	4b2c      	ldr	r3, [pc, #176]	@ (8002784 <HAL_FLASH_Program+0xd8>)
 80026d4:	2201      	movs	r2, #1
 80026d6:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80026d8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80026dc:	f000 f9a4 	bl	8002a28 <FLASH_WaitForLastOperation>
 80026e0:	4603      	mov	r3, r0
 80026e2:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80026e4:	7dfb      	ldrb	r3, [r7, #23]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d144      	bne.n	8002774 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d102      	bne.n	80026f6 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80026f0:	2301      	movs	r3, #1
 80026f2:	757b      	strb	r3, [r7, #21]
 80026f4:	e007      	b.n	8002706 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d102      	bne.n	8002702 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80026fc:	2302      	movs	r3, #2
 80026fe:	757b      	strb	r3, [r7, #21]
 8002700:	e001      	b.n	8002706 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002702:	2304      	movs	r3, #4
 8002704:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8002706:	2300      	movs	r3, #0
 8002708:	75bb      	strb	r3, [r7, #22]
 800270a:	e02d      	b.n	8002768 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800270c:	7dbb      	ldrb	r3, [r7, #22]
 800270e:	005a      	lsls	r2, r3, #1
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	eb02 0c03 	add.w	ip, r2, r3
 8002716:	7dbb      	ldrb	r3, [r7, #22]
 8002718:	0119      	lsls	r1, r3, #4
 800271a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800271e:	f1c1 0620 	rsb	r6, r1, #32
 8002722:	f1a1 0020 	sub.w	r0, r1, #32
 8002726:	fa22 f401 	lsr.w	r4, r2, r1
 800272a:	fa03 f606 	lsl.w	r6, r3, r6
 800272e:	4334      	orrs	r4, r6
 8002730:	fa23 f000 	lsr.w	r0, r3, r0
 8002734:	4304      	orrs	r4, r0
 8002736:	fa23 f501 	lsr.w	r5, r3, r1
 800273a:	b2a3      	uxth	r3, r4
 800273c:	4619      	mov	r1, r3
 800273e:	4660      	mov	r0, ip
 8002740:	f000 f956 	bl	80029f0 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002744:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002748:	f000 f96e 	bl	8002a28 <FLASH_WaitForLastOperation>
 800274c:	4603      	mov	r3, r0
 800274e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002750:	4b0d      	ldr	r3, [pc, #52]	@ (8002788 <HAL_FLASH_Program+0xdc>)
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	4a0c      	ldr	r2, [pc, #48]	@ (8002788 <HAL_FLASH_Program+0xdc>)
 8002756:	f023 0301 	bic.w	r3, r3, #1
 800275a:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 800275c:	7dfb      	ldrb	r3, [r7, #23]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d107      	bne.n	8002772 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8002762:	7dbb      	ldrb	r3, [r7, #22]
 8002764:	3301      	adds	r3, #1
 8002766:	75bb      	strb	r3, [r7, #22]
 8002768:	7dba      	ldrb	r2, [r7, #22]
 800276a:	7d7b      	ldrb	r3, [r7, #21]
 800276c:	429a      	cmp	r2, r3
 800276e:	d3cd      	bcc.n	800270c <HAL_FLASH_Program+0x60>
 8002770:	e000      	b.n	8002774 <HAL_FLASH_Program+0xc8>
      {
        break;
 8002772:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002774:	4b03      	ldr	r3, [pc, #12]	@ (8002784 <HAL_FLASH_Program+0xd8>)
 8002776:	2200      	movs	r2, #0
 8002778:	761a      	strb	r2, [r3, #24]

  return status;
 800277a:	7dfb      	ldrb	r3, [r7, #23]
}
 800277c:	4618      	mov	r0, r3
 800277e:	371c      	adds	r7, #28
 8002780:	46bd      	mov	sp, r7
 8002782:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002784:	20000128 	.word	0x20000128
 8002788:	40022000 	.word	0x40022000

0800278c <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8002792:	2300      	movs	r3, #0
 8002794:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK1) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK1) || \
    (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2)))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002796:	4b6b      	ldr	r3, [pc, #428]	@ (8002944 <HAL_FLASH_IRQHandler+0x1b8>)
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	f003 0310 	and.w	r3, r3, #16
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d105      	bne.n	80027ae <HAL_FLASH_IRQHandler+0x22>
 80027a2:	4b68      	ldr	r3, [pc, #416]	@ (8002944 <HAL_FLASH_IRQHandler+0x1b8>)
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	f003 0304 	and.w	r3, r3, #4
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00e      	beq.n	80027cc <HAL_FLASH_IRQHandler+0x40>
#endif /* FLASH_BANK2_END */
  {
    /* Return the faulty address */
    addresstmp = pFlash.Address;
 80027ae:	4b66      	ldr	r3, [pc, #408]	@ (8002948 <HAL_FLASH_IRQHandler+0x1bc>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	607b      	str	r3, [r7, #4]
    /* Reset address */
    pFlash.Address = 0xFFFFFFFFU;
 80027b4:	4b64      	ldr	r3, [pc, #400]	@ (8002948 <HAL_FLASH_IRQHandler+0x1bc>)
 80027b6:	f04f 32ff 	mov.w	r2, #4294967295
 80027ba:	609a      	str	r2, [r3, #8]
  
    /* Save the Error code */
    FLASH_SetErrorCode();
 80027bc:	f000 f97a 	bl	8002ab4 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 f8cc 	bl	800295e <HAL_FLASH_OperationErrorCallback>

    /* Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80027c6:	4b60      	ldr	r3, [pc, #384]	@ (8002948 <HAL_FLASH_IRQHandler+0x1bc>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	701a      	strb	r2, [r3, #0]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP_BANK1))
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP_BANK1);
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80027cc:	4b5d      	ldr	r3, [pc, #372]	@ (8002944 <HAL_FLASH_IRQHandler+0x1b8>)
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	f003 0320 	and.w	r3, r3, #32
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 80a0 	beq.w	800291a <HAL_FLASH_IRQHandler+0x18e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80027da:	4b5a      	ldr	r3, [pc, #360]	@ (8002944 <HAL_FLASH_IRQHandler+0x1b8>)
 80027dc:	2220      	movs	r2, #32
 80027de:	60da      	str	r2, [r3, #12]
#endif /* FLASH_BANK2_END */
    
    /* Process can continue only if no error detected */
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 80027e0:	4b59      	ldr	r3, [pc, #356]	@ (8002948 <HAL_FLASH_IRQHandler+0x1bc>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f000 8097 	beq.w	800291a <HAL_FLASH_IRQHandler+0x18e>
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 80027ec:	4b56      	ldr	r3, [pc, #344]	@ (8002948 <HAL_FLASH_IRQHandler+0x1bc>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d12d      	bne.n	8002852 <HAL_FLASH_IRQHandler+0xc6>
      {
        /* Nb of pages to erased can be decreased */
        pFlash.DataRemaining--;
 80027f6:	4b54      	ldr	r3, [pc, #336]	@ (8002948 <HAL_FLASH_IRQHandler+0x1bc>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	3b01      	subs	r3, #1
 80027fc:	4a52      	ldr	r2, [pc, #328]	@ (8002948 <HAL_FLASH_IRQHandler+0x1bc>)
 80027fe:	6053      	str	r3, [r2, #4]

        /* Check if there are still pages to erase */
        if(pFlash.DataRemaining != 0U)
 8002800:	4b51      	ldr	r3, [pc, #324]	@ (8002948 <HAL_FLASH_IRQHandler+0x1bc>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d017      	beq.n	8002838 <HAL_FLASH_IRQHandler+0xac>
        {
          addresstmp = pFlash.Address;
 8002808:	4b4f      	ldr	r3, [pc, #316]	@ (8002948 <HAL_FLASH_IRQHandler+0x1bc>)
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	607b      	str	r3, [r7, #4]
          /*Indicate user which sector has been erased */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 f89c 	bl	800294c <HAL_FLASH_EndOfOperationCallback>

          /*Increment sector number*/
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 8002814:	4b4c      	ldr	r3, [pc, #304]	@ (8002948 <HAL_FLASH_IRQHandler+0x1bc>)
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800281c:	607b      	str	r3, [r7, #4]
          pFlash.Address = addresstmp;
 800281e:	4a4a      	ldr	r2, [pc, #296]	@ (8002948 <HAL_FLASH_IRQHandler+0x1bc>)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6093      	str	r3, [r2, #8]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002824:	4b47      	ldr	r3, [pc, #284]	@ (8002944 <HAL_FLASH_IRQHandler+0x1b8>)
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	4a46      	ldr	r2, [pc, #280]	@ (8002944 <HAL_FLASH_IRQHandler+0x1b8>)
 800282a:	f023 0302 	bic.w	r3, r3, #2
 800282e:	6113      	str	r3, [r2, #16]

          FLASH_PageErase(addresstmp);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 fa17 	bl	8002c64 <FLASH_PageErase>
 8002836:	e070      	b.n	800291a <HAL_FLASH_IRQHandler+0x18e>
        }
        else
        {
          /* No more pages to Erase, user callback can be called. */
          /* Reset Sector and stop Erase pages procedure */
          pFlash.Address = addresstmp = 0xFFFFFFFFU;
 8002838:	f04f 33ff 	mov.w	r3, #4294967295
 800283c:	607b      	str	r3, [r7, #4]
 800283e:	4a42      	ldr	r2, [pc, #264]	@ (8002948 <HAL_FLASH_IRQHandler+0x1bc>)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6093      	str	r3, [r2, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002844:	4b40      	ldr	r3, [pc, #256]	@ (8002948 <HAL_FLASH_IRQHandler+0x1bc>)
 8002846:	2200      	movs	r2, #0
 8002848:	701a      	strb	r2, [r3, #0]
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 f87e 	bl	800294c <HAL_FLASH_EndOfOperationCallback>
 8002850:	e063      	b.n	800291a <HAL_FLASH_IRQHandler+0x18e>
        }
      }
      else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8002852:	4b3d      	ldr	r3, [pc, #244]	@ (8002948 <HAL_FLASH_IRQHandler+0x1bc>)
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d10c      	bne.n	8002876 <HAL_FLASH_IRQHandler+0xea>
      {
        /* Operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800285c:	4b39      	ldr	r3, [pc, #228]	@ (8002944 <HAL_FLASH_IRQHandler+0x1b8>)
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	4a38      	ldr	r2, [pc, #224]	@ (8002944 <HAL_FLASH_IRQHandler+0x1b8>)
 8002862:	f023 0304 	bic.w	r3, r3, #4
 8002866:	6113      	str	r3, [r2, #16]
        if (HAL_IS_BIT_CLR(FLASH->CR2, FLASH_CR2_MER))
        {
#endif /* FLASH_BANK2_END */
          /* MassErase ended. Return the selected bank */
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(0U);
 8002868:	2000      	movs	r0, #0
 800286a:	f000 f86f 	bl	800294c <HAL_FLASH_EndOfOperationCallback>

          /* Stop Mass Erase procedure*/
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800286e:	4b36      	ldr	r3, [pc, #216]	@ (8002948 <HAL_FLASH_IRQHandler+0x1bc>)
 8002870:	2200      	movs	r2, #0
 8002872:	701a      	strb	r2, [r3, #0]
 8002874:	e051      	b.n	800291a <HAL_FLASH_IRQHandler+0x18e>
      }
#endif /* FLASH_BANK2_END */
      else
      {
        /* Nb of 16-bit data to program can be decreased */
        pFlash.DataRemaining--;
 8002876:	4b34      	ldr	r3, [pc, #208]	@ (8002948 <HAL_FLASH_IRQHandler+0x1bc>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	3b01      	subs	r3, #1
 800287c:	4a32      	ldr	r2, [pc, #200]	@ (8002948 <HAL_FLASH_IRQHandler+0x1bc>)
 800287e:	6053      	str	r3, [r2, #4]
        
        /* Check if there are still 16-bit data to program */
        if(pFlash.DataRemaining != 0U)
 8002880:	4b31      	ldr	r3, [pc, #196]	@ (8002948 <HAL_FLASH_IRQHandler+0x1bc>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d024      	beq.n	80028d2 <HAL_FLASH_IRQHandler+0x146>
        {
          /* Increment address to 16-bit */
          pFlash.Address += 2U;
 8002888:	4b2f      	ldr	r3, [pc, #188]	@ (8002948 <HAL_FLASH_IRQHandler+0x1bc>)
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	3302      	adds	r3, #2
 800288e:	4a2e      	ldr	r2, [pc, #184]	@ (8002948 <HAL_FLASH_IRQHandler+0x1bc>)
 8002890:	6093      	str	r3, [r2, #8]
          addresstmp = pFlash.Address;
 8002892:	4b2d      	ldr	r3, [pc, #180]	@ (8002948 <HAL_FLASH_IRQHandler+0x1bc>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	607b      	str	r3, [r7, #4]
          
          /* Shift to have next 16-bit data */
          pFlash.Data = (pFlash.Data >> 16U);
 8002898:	4b2b      	ldr	r3, [pc, #172]	@ (8002948 <HAL_FLASH_IRQHandler+0x1bc>)
 800289a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800289e:	f04f 0200 	mov.w	r2, #0
 80028a2:	f04f 0300 	mov.w	r3, #0
 80028a6:	0c02      	lsrs	r2, r0, #16
 80028a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80028ac:	0c0b      	lsrs	r3, r1, #16
 80028ae:	4926      	ldr	r1, [pc, #152]	@ (8002948 <HAL_FLASH_IRQHandler+0x1bc>)
 80028b0:	e9c1 2304 	strd	r2, r3, [r1, #16]
          
          /* Operation is completed, disable the PG Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80028b4:	4b23      	ldr	r3, [pc, #140]	@ (8002944 <HAL_FLASH_IRQHandler+0x1b8>)
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	4a22      	ldr	r2, [pc, #136]	@ (8002944 <HAL_FLASH_IRQHandler+0x1b8>)
 80028ba:	f023 0301 	bic.w	r3, r3, #1
 80028be:	6113      	str	r3, [r2, #16]

          /*Program halfword (16-bit) at a specified address.*/
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 80028c0:	4b21      	ldr	r3, [pc, #132]	@ (8002948 <HAL_FLASH_IRQHandler+0x1bc>)
 80028c2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80028c6:	b293      	uxth	r3, r2
 80028c8:	4619      	mov	r1, r3
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 f890 	bl	80029f0 <FLASH_Program_HalfWord>
 80028d0:	e023      	b.n	800291a <HAL_FLASH_IRQHandler+0x18e>
        }
        else
        {
          /* Program ended. Return the selected address */
          /* FLASH EOP interrupt user callback */
          if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
 80028d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002948 <HAL_FLASH_IRQHandler+0x1bc>)
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b03      	cmp	r3, #3
 80028da:	d105      	bne.n	80028e8 <HAL_FLASH_IRQHandler+0x15c>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 80028dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002948 <HAL_FLASH_IRQHandler+0x1bc>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f000 f833 	bl	800294c <HAL_FLASH_EndOfOperationCallback>
 80028e6:	e011      	b.n	800290c <HAL_FLASH_IRQHandler+0x180>
          }
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 80028e8:	4b17      	ldr	r3, [pc, #92]	@ (8002948 <HAL_FLASH_IRQHandler+0x1bc>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b04      	cmp	r3, #4
 80028f0:	d106      	bne.n	8002900 <HAL_FLASH_IRQHandler+0x174>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 80028f2:	4b15      	ldr	r3, [pc, #84]	@ (8002948 <HAL_FLASH_IRQHandler+0x1bc>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	3b02      	subs	r3, #2
 80028f8:	4618      	mov	r0, r3
 80028fa:	f000 f827 	bl	800294c <HAL_FLASH_EndOfOperationCallback>
 80028fe:	e005      	b.n	800290c <HAL_FLASH_IRQHandler+0x180>
          }
          else 
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 8002900:	4b11      	ldr	r3, [pc, #68]	@ (8002948 <HAL_FLASH_IRQHandler+0x1bc>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	3b06      	subs	r3, #6
 8002906:	4618      	mov	r0, r3
 8002908:	f000 f820 	bl	800294c <HAL_FLASH_EndOfOperationCallback>
          }
        
          /* Reset Address and stop Program procedure */
          pFlash.Address = 0xFFFFFFFFU;
 800290c:	4b0e      	ldr	r3, [pc, #56]	@ (8002948 <HAL_FLASH_IRQHandler+0x1bc>)
 800290e:	f04f 32ff 	mov.w	r2, #4294967295
 8002912:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002914:	4b0c      	ldr	r3, [pc, #48]	@ (8002948 <HAL_FLASH_IRQHandler+0x1bc>)
 8002916:	2200      	movs	r2, #0
 8002918:	701a      	strb	r2, [r3, #0]
      }
    }
  }
#endif 

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 800291a:	4b0b      	ldr	r3, [pc, #44]	@ (8002948 <HAL_FLASH_IRQHandler+0x1bc>)
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10b      	bne.n	800293c <HAL_FLASH_IRQHandler+0x1b0>
  
    /* Disable End of FLASH Operation and Error source interrupts for both banks */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP_BANK1 | FLASH_IT_ERR_BANK1 | FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
#else
    /* Operation is completed, disable the PG, PER and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
 8002924:	4b07      	ldr	r3, [pc, #28]	@ (8002944 <HAL_FLASH_IRQHandler+0x1b8>)
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	4a06      	ldr	r2, [pc, #24]	@ (8002944 <HAL_FLASH_IRQHandler+0x1b8>)
 800292a:	f023 0307 	bic.w	r3, r3, #7
 800292e:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation and Error source interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 8002930:	4b04      	ldr	r3, [pc, #16]	@ (8002944 <HAL_FLASH_IRQHandler+0x1b8>)
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	4a03      	ldr	r2, [pc, #12]	@ (8002944 <HAL_FLASH_IRQHandler+0x1b8>)
 8002936:	f423 53a0 	bic.w	r3, r3, #5120	@ 0x1400
 800293a:	6113      	str	r3, [r2, #16]
#endif /* FLASH_BANK2_END */

  }
}
 800293c:	bf00      	nop
 800293e:	3708      	adds	r7, #8
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40022000 	.word	0x40022000
 8002948:	20000128 	.word	0x20000128

0800294c <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	bc80      	pop	{r7}
 800295c:	4770      	bx	lr

0800295e <HAL_FLASH_OperationErrorCallback>:
  *                 - Pages Erase: Address of the page which returned an error
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 800295e:	b480      	push	{r7}
 8002960:	b083      	sub	sp, #12
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8002966:	bf00      	nop
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	bc80      	pop	{r7}
 800296e:	4770      	bx	lr

08002970 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002976:	2300      	movs	r3, #0
 8002978:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800297a:	4b0d      	ldr	r3, [pc, #52]	@ (80029b0 <HAL_FLASH_Unlock+0x40>)
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002982:	2b00      	cmp	r3, #0
 8002984:	d00d      	beq.n	80029a2 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002986:	4b0a      	ldr	r3, [pc, #40]	@ (80029b0 <HAL_FLASH_Unlock+0x40>)
 8002988:	4a0a      	ldr	r2, [pc, #40]	@ (80029b4 <HAL_FLASH_Unlock+0x44>)
 800298a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800298c:	4b08      	ldr	r3, [pc, #32]	@ (80029b0 <HAL_FLASH_Unlock+0x40>)
 800298e:	4a0a      	ldr	r2, [pc, #40]	@ (80029b8 <HAL_FLASH_Unlock+0x48>)
 8002990:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002992:	4b07      	ldr	r3, [pc, #28]	@ (80029b0 <HAL_FLASH_Unlock+0x40>)
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80029a2:	79fb      	ldrb	r3, [r7, #7]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	40022000 	.word	0x40022000
 80029b4:	45670123 	.word	0x45670123
 80029b8:	cdef89ab 	.word	0xcdef89ab

080029bc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80029c0:	4b05      	ldr	r3, [pc, #20]	@ (80029d8 <HAL_FLASH_Lock+0x1c>)
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	4a04      	ldr	r2, [pc, #16]	@ (80029d8 <HAL_FLASH_Lock+0x1c>)
 80029c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029ca:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bc80      	pop	{r7}
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	40022000 	.word	0x40022000

080029dc <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 80029e0:	4b02      	ldr	r3, [pc, #8]	@ (80029ec <HAL_FLASH_GetError+0x10>)
 80029e2:	69db      	ldr	r3, [r3, #28]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr
 80029ec:	20000128 	.word	0x20000128

080029f0 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	460b      	mov	r3, r1
 80029fa:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80029fc:	4b08      	ldr	r3, [pc, #32]	@ (8002a20 <FLASH_Program_HalfWord+0x30>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002a02:	4b08      	ldr	r3, [pc, #32]	@ (8002a24 <FLASH_Program_HalfWord+0x34>)
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	4a07      	ldr	r2, [pc, #28]	@ (8002a24 <FLASH_Program_HalfWord+0x34>)
 8002a08:	f043 0301 	orr.w	r3, r3, #1
 8002a0c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	887a      	ldrh	r2, [r7, #2]
 8002a12:	801a      	strh	r2, [r3, #0]
}
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bc80      	pop	{r7}
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	20000128 	.word	0x20000128
 8002a24:	40022000 	.word	0x40022000

08002a28 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002a30:	f7fe fe68 	bl	8001704 <HAL_GetTick>
 8002a34:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002a36:	e010      	b.n	8002a5a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a3e:	d00c      	beq.n	8002a5a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d007      	beq.n	8002a56 <FLASH_WaitForLastOperation+0x2e>
 8002a46:	f7fe fe5d 	bl	8001704 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d201      	bcs.n	8002a5a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e025      	b.n	8002aa6 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002a5a:	4b15      	ldr	r3, [pc, #84]	@ (8002ab0 <FLASH_WaitForLastOperation+0x88>)
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1e8      	bne.n	8002a38 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002a66:	4b12      	ldr	r3, [pc, #72]	@ (8002ab0 <FLASH_WaitForLastOperation+0x88>)
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	f003 0320 	and.w	r3, r3, #32
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d002      	beq.n	8002a78 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002a72:	4b0f      	ldr	r3, [pc, #60]	@ (8002ab0 <FLASH_WaitForLastOperation+0x88>)
 8002a74:	2220      	movs	r2, #32
 8002a76:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002a78:	4b0d      	ldr	r3, [pc, #52]	@ (8002ab0 <FLASH_WaitForLastOperation+0x88>)
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	f003 0310 	and.w	r3, r3, #16
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d10b      	bne.n	8002a9c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002a84:	4b0a      	ldr	r3, [pc, #40]	@ (8002ab0 <FLASH_WaitForLastOperation+0x88>)
 8002a86:	69db      	ldr	r3, [r3, #28]
 8002a88:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d105      	bne.n	8002a9c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002a90:	4b07      	ldr	r3, [pc, #28]	@ (8002ab0 <FLASH_WaitForLastOperation+0x88>)
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d003      	beq.n	8002aa4 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002a9c:	f000 f80a 	bl	8002ab4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e000      	b.n	8002aa6 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	40022000 	.word	0x40022000

08002ab4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002aba:	2300      	movs	r3, #0
 8002abc:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002abe:	4b23      	ldr	r3, [pc, #140]	@ (8002b4c <FLASH_SetErrorCode+0x98>)
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	f003 0310 	and.w	r3, r3, #16
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d009      	beq.n	8002ade <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002aca:	4b21      	ldr	r3, [pc, #132]	@ (8002b50 <FLASH_SetErrorCode+0x9c>)
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	f043 0302 	orr.w	r3, r3, #2
 8002ad2:	4a1f      	ldr	r2, [pc, #124]	@ (8002b50 <FLASH_SetErrorCode+0x9c>)
 8002ad4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f043 0310 	orr.w	r3, r3, #16
 8002adc:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002ade:	4b1b      	ldr	r3, [pc, #108]	@ (8002b4c <FLASH_SetErrorCode+0x98>)
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	f003 0304 	and.w	r3, r3, #4
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d009      	beq.n	8002afe <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002aea:	4b19      	ldr	r3, [pc, #100]	@ (8002b50 <FLASH_SetErrorCode+0x9c>)
 8002aec:	69db      	ldr	r3, [r3, #28]
 8002aee:	f043 0301 	orr.w	r3, r3, #1
 8002af2:	4a17      	ldr	r2, [pc, #92]	@ (8002b50 <FLASH_SetErrorCode+0x9c>)
 8002af4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f043 0304 	orr.w	r3, r3, #4
 8002afc:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002afe:	4b13      	ldr	r3, [pc, #76]	@ (8002b4c <FLASH_SetErrorCode+0x98>)
 8002b00:	69db      	ldr	r3, [r3, #28]
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00b      	beq.n	8002b22 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002b0a:	4b11      	ldr	r3, [pc, #68]	@ (8002b50 <FLASH_SetErrorCode+0x9c>)
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	f043 0304 	orr.w	r3, r3, #4
 8002b12:	4a0f      	ldr	r2, [pc, #60]	@ (8002b50 <FLASH_SetErrorCode+0x9c>)
 8002b14:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002b16:	4b0d      	ldr	r3, [pc, #52]	@ (8002b4c <FLASH_SetErrorCode+0x98>)
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	4a0c      	ldr	r2, [pc, #48]	@ (8002b4c <FLASH_SetErrorCode+0x98>)
 8002b1c:	f023 0301 	bic.w	r3, r3, #1
 8002b20:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f240 1201 	movw	r2, #257	@ 0x101
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d106      	bne.n	8002b3a <FLASH_SetErrorCode+0x86>
 8002b2c:	4b07      	ldr	r3, [pc, #28]	@ (8002b4c <FLASH_SetErrorCode+0x98>)
 8002b2e:	69db      	ldr	r3, [r3, #28]
 8002b30:	4a06      	ldr	r2, [pc, #24]	@ (8002b4c <FLASH_SetErrorCode+0x98>)
 8002b32:	f023 0301 	bic.w	r3, r3, #1
 8002b36:	61d3      	str	r3, [r2, #28]
}  
 8002b38:	e002      	b.n	8002b40 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002b3a:	4a04      	ldr	r2, [pc, #16]	@ (8002b4c <FLASH_SetErrorCode+0x98>)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	60d3      	str	r3, [r2, #12]
}  
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bc80      	pop	{r7}
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	40022000 	.word	0x40022000
 8002b50:	20000128 	.word	0x20000128

08002b54 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8002b62:	2300      	movs	r3, #0
 8002b64:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002b66:	4b2f      	ldr	r3, [pc, #188]	@ (8002c24 <HAL_FLASHEx_Erase+0xd0>)
 8002b68:	7e1b      	ldrb	r3, [r3, #24]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d101      	bne.n	8002b72 <HAL_FLASHEx_Erase+0x1e>
 8002b6e:	2302      	movs	r3, #2
 8002b70:	e053      	b.n	8002c1a <HAL_FLASHEx_Erase+0xc6>
 8002b72:	4b2c      	ldr	r3, [pc, #176]	@ (8002c24 <HAL_FLASHEx_Erase+0xd0>)
 8002b74:	2201      	movs	r2, #1
 8002b76:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d116      	bne.n	8002bae <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002b80:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002b84:	f7ff ff50 	bl	8002a28 <FLASH_WaitForLastOperation>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d141      	bne.n	8002c12 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8002b8e:	2001      	movs	r0, #1
 8002b90:	f000 f84c 	bl	8002c2c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b94:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002b98:	f7ff ff46 	bl	8002a28 <FLASH_WaitForLastOperation>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002ba0:	4b21      	ldr	r3, [pc, #132]	@ (8002c28 <HAL_FLASHEx_Erase+0xd4>)
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	4a20      	ldr	r2, [pc, #128]	@ (8002c28 <HAL_FLASHEx_Erase+0xd4>)
 8002ba6:	f023 0304 	bic.w	r3, r3, #4
 8002baa:	6113      	str	r3, [r2, #16]
 8002bac:	e031      	b.n	8002c12 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002bae:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002bb2:	f7ff ff39 	bl	8002a28 <FLASH_WaitForLastOperation>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d12a      	bne.n	8002c12 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8002bc2:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	60bb      	str	r3, [r7, #8]
 8002bca:	e019      	b.n	8002c00 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002bcc:	68b8      	ldr	r0, [r7, #8]
 8002bce:	f000 f849 	bl	8002c64 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002bd2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002bd6:	f7ff ff27 	bl	8002a28 <FLASH_WaitForLastOperation>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002bde:	4b12      	ldr	r3, [pc, #72]	@ (8002c28 <HAL_FLASHEx_Erase+0xd4>)
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	4a11      	ldr	r2, [pc, #68]	@ (8002c28 <HAL_FLASHEx_Erase+0xd4>)
 8002be4:	f023 0302 	bic.w	r3, r3, #2
 8002be8:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8002bea:	7bfb      	ldrb	r3, [r7, #15]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d003      	beq.n	8002bf8 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	68ba      	ldr	r2, [r7, #8]
 8002bf4:	601a      	str	r2, [r3, #0]
            break;
 8002bf6:	e00c      	b.n	8002c12 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002bfe:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	029a      	lsls	r2, r3, #10
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	68ba      	ldr	r2, [r7, #8]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d3dc      	bcc.n	8002bcc <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002c12:	4b04      	ldr	r3, [pc, #16]	@ (8002c24 <HAL_FLASHEx_Erase+0xd0>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	761a      	strb	r2, [r3, #24]

  return status;
 8002c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	20000128 	.word	0x20000128
 8002c28:	40022000 	.word	0x40022000

08002c2c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002c34:	4b09      	ldr	r3, [pc, #36]	@ (8002c5c <FLASH_MassErase+0x30>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002c3a:	4b09      	ldr	r3, [pc, #36]	@ (8002c60 <FLASH_MassErase+0x34>)
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	4a08      	ldr	r2, [pc, #32]	@ (8002c60 <FLASH_MassErase+0x34>)
 8002c40:	f043 0304 	orr.w	r3, r3, #4
 8002c44:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002c46:	4b06      	ldr	r3, [pc, #24]	@ (8002c60 <FLASH_MassErase+0x34>)
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	4a05      	ldr	r2, [pc, #20]	@ (8002c60 <FLASH_MassErase+0x34>)
 8002c4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c50:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bc80      	pop	{r7}
 8002c5a:	4770      	bx	lr
 8002c5c:	20000128 	.word	0x20000128
 8002c60:	40022000 	.word	0x40022000

08002c64 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c9c <FLASH_PageErase+0x38>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002c72:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca0 <FLASH_PageErase+0x3c>)
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	4a0a      	ldr	r2, [pc, #40]	@ (8002ca0 <FLASH_PageErase+0x3c>)
 8002c78:	f043 0302 	orr.w	r3, r3, #2
 8002c7c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002c7e:	4a08      	ldr	r2, [pc, #32]	@ (8002ca0 <FLASH_PageErase+0x3c>)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002c84:	4b06      	ldr	r3, [pc, #24]	@ (8002ca0 <FLASH_PageErase+0x3c>)
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	4a05      	ldr	r2, [pc, #20]	@ (8002ca0 <FLASH_PageErase+0x3c>)
 8002c8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c8e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bc80      	pop	{r7}
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	20000128 	.word	0x20000128
 8002ca0:	40022000 	.word	0x40022000

08002ca4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b08b      	sub	sp, #44	@ 0x2c
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cb6:	e169      	b.n	8002f8c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002cb8:	2201      	movs	r2, #1
 8002cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	69fa      	ldr	r2, [r7, #28]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	f040 8158 	bne.w	8002f86 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	4a9a      	ldr	r2, [pc, #616]	@ (8002f44 <HAL_GPIO_Init+0x2a0>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d05e      	beq.n	8002d9e <HAL_GPIO_Init+0xfa>
 8002ce0:	4a98      	ldr	r2, [pc, #608]	@ (8002f44 <HAL_GPIO_Init+0x2a0>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d875      	bhi.n	8002dd2 <HAL_GPIO_Init+0x12e>
 8002ce6:	4a98      	ldr	r2, [pc, #608]	@ (8002f48 <HAL_GPIO_Init+0x2a4>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d058      	beq.n	8002d9e <HAL_GPIO_Init+0xfa>
 8002cec:	4a96      	ldr	r2, [pc, #600]	@ (8002f48 <HAL_GPIO_Init+0x2a4>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d86f      	bhi.n	8002dd2 <HAL_GPIO_Init+0x12e>
 8002cf2:	4a96      	ldr	r2, [pc, #600]	@ (8002f4c <HAL_GPIO_Init+0x2a8>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d052      	beq.n	8002d9e <HAL_GPIO_Init+0xfa>
 8002cf8:	4a94      	ldr	r2, [pc, #592]	@ (8002f4c <HAL_GPIO_Init+0x2a8>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d869      	bhi.n	8002dd2 <HAL_GPIO_Init+0x12e>
 8002cfe:	4a94      	ldr	r2, [pc, #592]	@ (8002f50 <HAL_GPIO_Init+0x2ac>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d04c      	beq.n	8002d9e <HAL_GPIO_Init+0xfa>
 8002d04:	4a92      	ldr	r2, [pc, #584]	@ (8002f50 <HAL_GPIO_Init+0x2ac>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d863      	bhi.n	8002dd2 <HAL_GPIO_Init+0x12e>
 8002d0a:	4a92      	ldr	r2, [pc, #584]	@ (8002f54 <HAL_GPIO_Init+0x2b0>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d046      	beq.n	8002d9e <HAL_GPIO_Init+0xfa>
 8002d10:	4a90      	ldr	r2, [pc, #576]	@ (8002f54 <HAL_GPIO_Init+0x2b0>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d85d      	bhi.n	8002dd2 <HAL_GPIO_Init+0x12e>
 8002d16:	2b12      	cmp	r3, #18
 8002d18:	d82a      	bhi.n	8002d70 <HAL_GPIO_Init+0xcc>
 8002d1a:	2b12      	cmp	r3, #18
 8002d1c:	d859      	bhi.n	8002dd2 <HAL_GPIO_Init+0x12e>
 8002d1e:	a201      	add	r2, pc, #4	@ (adr r2, 8002d24 <HAL_GPIO_Init+0x80>)
 8002d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d24:	08002d9f 	.word	0x08002d9f
 8002d28:	08002d79 	.word	0x08002d79
 8002d2c:	08002d8b 	.word	0x08002d8b
 8002d30:	08002dcd 	.word	0x08002dcd
 8002d34:	08002dd3 	.word	0x08002dd3
 8002d38:	08002dd3 	.word	0x08002dd3
 8002d3c:	08002dd3 	.word	0x08002dd3
 8002d40:	08002dd3 	.word	0x08002dd3
 8002d44:	08002dd3 	.word	0x08002dd3
 8002d48:	08002dd3 	.word	0x08002dd3
 8002d4c:	08002dd3 	.word	0x08002dd3
 8002d50:	08002dd3 	.word	0x08002dd3
 8002d54:	08002dd3 	.word	0x08002dd3
 8002d58:	08002dd3 	.word	0x08002dd3
 8002d5c:	08002dd3 	.word	0x08002dd3
 8002d60:	08002dd3 	.word	0x08002dd3
 8002d64:	08002dd3 	.word	0x08002dd3
 8002d68:	08002d81 	.word	0x08002d81
 8002d6c:	08002d95 	.word	0x08002d95
 8002d70:	4a79      	ldr	r2, [pc, #484]	@ (8002f58 <HAL_GPIO_Init+0x2b4>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d013      	beq.n	8002d9e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d76:	e02c      	b.n	8002dd2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	623b      	str	r3, [r7, #32]
          break;
 8002d7e:	e029      	b.n	8002dd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	3304      	adds	r3, #4
 8002d86:	623b      	str	r3, [r7, #32]
          break;
 8002d88:	e024      	b.n	8002dd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	3308      	adds	r3, #8
 8002d90:	623b      	str	r3, [r7, #32]
          break;
 8002d92:	e01f      	b.n	8002dd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	330c      	adds	r3, #12
 8002d9a:	623b      	str	r3, [r7, #32]
          break;
 8002d9c:	e01a      	b.n	8002dd4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d102      	bne.n	8002dac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002da6:	2304      	movs	r3, #4
 8002da8:	623b      	str	r3, [r7, #32]
          break;
 8002daa:	e013      	b.n	8002dd4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d105      	bne.n	8002dc0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002db4:	2308      	movs	r3, #8
 8002db6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	69fa      	ldr	r2, [r7, #28]
 8002dbc:	611a      	str	r2, [r3, #16]
          break;
 8002dbe:	e009      	b.n	8002dd4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002dc0:	2308      	movs	r3, #8
 8002dc2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	69fa      	ldr	r2, [r7, #28]
 8002dc8:	615a      	str	r2, [r3, #20]
          break;
 8002dca:	e003      	b.n	8002dd4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	623b      	str	r3, [r7, #32]
          break;
 8002dd0:	e000      	b.n	8002dd4 <HAL_GPIO_Init+0x130>
          break;
 8002dd2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	2bff      	cmp	r3, #255	@ 0xff
 8002dd8:	d801      	bhi.n	8002dde <HAL_GPIO_Init+0x13a>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	e001      	b.n	8002de2 <HAL_GPIO_Init+0x13e>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	3304      	adds	r3, #4
 8002de2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	2bff      	cmp	r3, #255	@ 0xff
 8002de8:	d802      	bhi.n	8002df0 <HAL_GPIO_Init+0x14c>
 8002dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	e002      	b.n	8002df6 <HAL_GPIO_Init+0x152>
 8002df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df2:	3b08      	subs	r3, #8
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	210f      	movs	r1, #15
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	fa01 f303 	lsl.w	r3, r1, r3
 8002e04:	43db      	mvns	r3, r3
 8002e06:	401a      	ands	r2, r3
 8002e08:	6a39      	ldr	r1, [r7, #32]
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e10:	431a      	orrs	r2, r3
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f000 80b1 	beq.w	8002f86 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e24:	4b4d      	ldr	r3, [pc, #308]	@ (8002f5c <HAL_GPIO_Init+0x2b8>)
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	4a4c      	ldr	r2, [pc, #304]	@ (8002f5c <HAL_GPIO_Init+0x2b8>)
 8002e2a:	f043 0301 	orr.w	r3, r3, #1
 8002e2e:	6193      	str	r3, [r2, #24]
 8002e30:	4b4a      	ldr	r3, [pc, #296]	@ (8002f5c <HAL_GPIO_Init+0x2b8>)
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	60bb      	str	r3, [r7, #8]
 8002e3a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e3c:	4a48      	ldr	r2, [pc, #288]	@ (8002f60 <HAL_GPIO_Init+0x2bc>)
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e40:	089b      	lsrs	r3, r3, #2
 8002e42:	3302      	adds	r3, #2
 8002e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e48:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4c:	f003 0303 	and.w	r3, r3, #3
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	220f      	movs	r2, #15
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a40      	ldr	r2, [pc, #256]	@ (8002f64 <HAL_GPIO_Init+0x2c0>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d013      	beq.n	8002e90 <HAL_GPIO_Init+0x1ec>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a3f      	ldr	r2, [pc, #252]	@ (8002f68 <HAL_GPIO_Init+0x2c4>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d00d      	beq.n	8002e8c <HAL_GPIO_Init+0x1e8>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a3e      	ldr	r2, [pc, #248]	@ (8002f6c <HAL_GPIO_Init+0x2c8>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d007      	beq.n	8002e88 <HAL_GPIO_Init+0x1e4>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a3d      	ldr	r2, [pc, #244]	@ (8002f70 <HAL_GPIO_Init+0x2cc>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d101      	bne.n	8002e84 <HAL_GPIO_Init+0x1e0>
 8002e80:	2303      	movs	r3, #3
 8002e82:	e006      	b.n	8002e92 <HAL_GPIO_Init+0x1ee>
 8002e84:	2304      	movs	r3, #4
 8002e86:	e004      	b.n	8002e92 <HAL_GPIO_Init+0x1ee>
 8002e88:	2302      	movs	r3, #2
 8002e8a:	e002      	b.n	8002e92 <HAL_GPIO_Init+0x1ee>
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e000      	b.n	8002e92 <HAL_GPIO_Init+0x1ee>
 8002e90:	2300      	movs	r3, #0
 8002e92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e94:	f002 0203 	and.w	r2, r2, #3
 8002e98:	0092      	lsls	r2, r2, #2
 8002e9a:	4093      	lsls	r3, r2
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002ea2:	492f      	ldr	r1, [pc, #188]	@ (8002f60 <HAL_GPIO_Init+0x2bc>)
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea6:	089b      	lsrs	r3, r3, #2
 8002ea8:	3302      	adds	r3, #2
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d006      	beq.n	8002eca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ebc:	4b2d      	ldr	r3, [pc, #180]	@ (8002f74 <HAL_GPIO_Init+0x2d0>)
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	492c      	ldr	r1, [pc, #176]	@ (8002f74 <HAL_GPIO_Init+0x2d0>)
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	608b      	str	r3, [r1, #8]
 8002ec8:	e006      	b.n	8002ed8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002eca:	4b2a      	ldr	r3, [pc, #168]	@ (8002f74 <HAL_GPIO_Init+0x2d0>)
 8002ecc:	689a      	ldr	r2, [r3, #8]
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	4928      	ldr	r1, [pc, #160]	@ (8002f74 <HAL_GPIO_Init+0x2d0>)
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d006      	beq.n	8002ef2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ee4:	4b23      	ldr	r3, [pc, #140]	@ (8002f74 <HAL_GPIO_Init+0x2d0>)
 8002ee6:	68da      	ldr	r2, [r3, #12]
 8002ee8:	4922      	ldr	r1, [pc, #136]	@ (8002f74 <HAL_GPIO_Init+0x2d0>)
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	60cb      	str	r3, [r1, #12]
 8002ef0:	e006      	b.n	8002f00 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ef2:	4b20      	ldr	r3, [pc, #128]	@ (8002f74 <HAL_GPIO_Init+0x2d0>)
 8002ef4:	68da      	ldr	r2, [r3, #12]
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	491e      	ldr	r1, [pc, #120]	@ (8002f74 <HAL_GPIO_Init+0x2d0>)
 8002efc:	4013      	ands	r3, r2
 8002efe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d006      	beq.n	8002f1a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002f0c:	4b19      	ldr	r3, [pc, #100]	@ (8002f74 <HAL_GPIO_Init+0x2d0>)
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	4918      	ldr	r1, [pc, #96]	@ (8002f74 <HAL_GPIO_Init+0x2d0>)
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	604b      	str	r3, [r1, #4]
 8002f18:	e006      	b.n	8002f28 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f1a:	4b16      	ldr	r3, [pc, #88]	@ (8002f74 <HAL_GPIO_Init+0x2d0>)
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	43db      	mvns	r3, r3
 8002f22:	4914      	ldr	r1, [pc, #80]	@ (8002f74 <HAL_GPIO_Init+0x2d0>)
 8002f24:	4013      	ands	r3, r2
 8002f26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d021      	beq.n	8002f78 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002f34:	4b0f      	ldr	r3, [pc, #60]	@ (8002f74 <HAL_GPIO_Init+0x2d0>)
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	490e      	ldr	r1, [pc, #56]	@ (8002f74 <HAL_GPIO_Init+0x2d0>)
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	600b      	str	r3, [r1, #0]
 8002f40:	e021      	b.n	8002f86 <HAL_GPIO_Init+0x2e2>
 8002f42:	bf00      	nop
 8002f44:	10320000 	.word	0x10320000
 8002f48:	10310000 	.word	0x10310000
 8002f4c:	10220000 	.word	0x10220000
 8002f50:	10210000 	.word	0x10210000
 8002f54:	10120000 	.word	0x10120000
 8002f58:	10110000 	.word	0x10110000
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	40010000 	.word	0x40010000
 8002f64:	40010800 	.word	0x40010800
 8002f68:	40010c00 	.word	0x40010c00
 8002f6c:	40011000 	.word	0x40011000
 8002f70:	40011400 	.word	0x40011400
 8002f74:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f78:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa8 <HAL_GPIO_Init+0x304>)
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	43db      	mvns	r3, r3
 8002f80:	4909      	ldr	r1, [pc, #36]	@ (8002fa8 <HAL_GPIO_Init+0x304>)
 8002f82:	4013      	ands	r3, r2
 8002f84:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f88:	3301      	adds	r3, #1
 8002f8a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f92:	fa22 f303 	lsr.w	r3, r2, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f47f ae8e 	bne.w	8002cb8 <HAL_GPIO_Init+0x14>
  }
}
 8002f9c:	bf00      	nop
 8002f9e:	bf00      	nop
 8002fa0:	372c      	adds	r7, #44	@ 0x2c
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bc80      	pop	{r7}
 8002fa6:	4770      	bx	lr
 8002fa8:	40010400 	.word	0x40010400

08002fac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	807b      	strh	r3, [r7, #2]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fbc:	787b      	ldrb	r3, [r7, #1]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fc2:	887a      	ldrh	r2, [r7, #2]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002fc8:	e003      	b.n	8002fd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002fca:	887b      	ldrh	r3, [r7, #2]
 8002fcc:	041a      	lsls	r2, r3, #16
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	611a      	str	r2, [r3, #16]
}
 8002fd2:	bf00      	nop
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bc80      	pop	{r7}
 8002fda:	4770      	bx	lr

08002fdc <HAL_PWR_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8002fe0:	4b06      	ldr	r3, [pc, #24]	@ (8002ffc <HAL_PWR_PVD_IRQHandler+0x20>)
 8002fe2:	695b      	ldr	r3, [r3, #20]
 8002fe4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d005      	beq.n	8002ff8 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8002fec:	f000 f808 	bl	8003000 <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8002ff0:	4b02      	ldr	r3, [pc, #8]	@ (8002ffc <HAL_PWR_PVD_IRQHandler+0x20>)
 8002ff2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002ff6:	615a      	str	r2, [r3, #20]
  }
}
 8002ff8:	bf00      	nop
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	40010400 	.word	0x40010400

08003000 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8003004:	bf00      	nop
 8003006:	46bd      	mov	sp, r7
 8003008:	bc80      	pop	{r7}
 800300a:	4770      	bx	lr

0800300c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e272      	b.n	8003504 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b00      	cmp	r3, #0
 8003028:	f000 8087 	beq.w	800313a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800302c:	4b92      	ldr	r3, [pc, #584]	@ (8003278 <HAL_RCC_OscConfig+0x26c>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f003 030c 	and.w	r3, r3, #12
 8003034:	2b04      	cmp	r3, #4
 8003036:	d00c      	beq.n	8003052 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003038:	4b8f      	ldr	r3, [pc, #572]	@ (8003278 <HAL_RCC_OscConfig+0x26c>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f003 030c 	and.w	r3, r3, #12
 8003040:	2b08      	cmp	r3, #8
 8003042:	d112      	bne.n	800306a <HAL_RCC_OscConfig+0x5e>
 8003044:	4b8c      	ldr	r3, [pc, #560]	@ (8003278 <HAL_RCC_OscConfig+0x26c>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800304c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003050:	d10b      	bne.n	800306a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003052:	4b89      	ldr	r3, [pc, #548]	@ (8003278 <HAL_RCC_OscConfig+0x26c>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d06c      	beq.n	8003138 <HAL_RCC_OscConfig+0x12c>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d168      	bne.n	8003138 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e24c      	b.n	8003504 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003072:	d106      	bne.n	8003082 <HAL_RCC_OscConfig+0x76>
 8003074:	4b80      	ldr	r3, [pc, #512]	@ (8003278 <HAL_RCC_OscConfig+0x26c>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a7f      	ldr	r2, [pc, #508]	@ (8003278 <HAL_RCC_OscConfig+0x26c>)
 800307a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800307e:	6013      	str	r3, [r2, #0]
 8003080:	e02e      	b.n	80030e0 <HAL_RCC_OscConfig+0xd4>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10c      	bne.n	80030a4 <HAL_RCC_OscConfig+0x98>
 800308a:	4b7b      	ldr	r3, [pc, #492]	@ (8003278 <HAL_RCC_OscConfig+0x26c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a7a      	ldr	r2, [pc, #488]	@ (8003278 <HAL_RCC_OscConfig+0x26c>)
 8003090:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003094:	6013      	str	r3, [r2, #0]
 8003096:	4b78      	ldr	r3, [pc, #480]	@ (8003278 <HAL_RCC_OscConfig+0x26c>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a77      	ldr	r2, [pc, #476]	@ (8003278 <HAL_RCC_OscConfig+0x26c>)
 800309c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030a0:	6013      	str	r3, [r2, #0]
 80030a2:	e01d      	b.n	80030e0 <HAL_RCC_OscConfig+0xd4>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030ac:	d10c      	bne.n	80030c8 <HAL_RCC_OscConfig+0xbc>
 80030ae:	4b72      	ldr	r3, [pc, #456]	@ (8003278 <HAL_RCC_OscConfig+0x26c>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a71      	ldr	r2, [pc, #452]	@ (8003278 <HAL_RCC_OscConfig+0x26c>)
 80030b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030b8:	6013      	str	r3, [r2, #0]
 80030ba:	4b6f      	ldr	r3, [pc, #444]	@ (8003278 <HAL_RCC_OscConfig+0x26c>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a6e      	ldr	r2, [pc, #440]	@ (8003278 <HAL_RCC_OscConfig+0x26c>)
 80030c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030c4:	6013      	str	r3, [r2, #0]
 80030c6:	e00b      	b.n	80030e0 <HAL_RCC_OscConfig+0xd4>
 80030c8:	4b6b      	ldr	r3, [pc, #428]	@ (8003278 <HAL_RCC_OscConfig+0x26c>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a6a      	ldr	r2, [pc, #424]	@ (8003278 <HAL_RCC_OscConfig+0x26c>)
 80030ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030d2:	6013      	str	r3, [r2, #0]
 80030d4:	4b68      	ldr	r3, [pc, #416]	@ (8003278 <HAL_RCC_OscConfig+0x26c>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a67      	ldr	r2, [pc, #412]	@ (8003278 <HAL_RCC_OscConfig+0x26c>)
 80030da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d013      	beq.n	8003110 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e8:	f7fe fb0c 	bl	8001704 <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030f0:	f7fe fb08 	bl	8001704 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b64      	cmp	r3, #100	@ 0x64
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e200      	b.n	8003504 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003102:	4b5d      	ldr	r3, [pc, #372]	@ (8003278 <HAL_RCC_OscConfig+0x26c>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d0f0      	beq.n	80030f0 <HAL_RCC_OscConfig+0xe4>
 800310e:	e014      	b.n	800313a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003110:	f7fe faf8 	bl	8001704 <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003118:	f7fe faf4 	bl	8001704 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b64      	cmp	r3, #100	@ 0x64
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e1ec      	b.n	8003504 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800312a:	4b53      	ldr	r3, [pc, #332]	@ (8003278 <HAL_RCC_OscConfig+0x26c>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1f0      	bne.n	8003118 <HAL_RCC_OscConfig+0x10c>
 8003136:	e000      	b.n	800313a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003138:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d063      	beq.n	800320e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003146:	4b4c      	ldr	r3, [pc, #304]	@ (8003278 <HAL_RCC_OscConfig+0x26c>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f003 030c 	and.w	r3, r3, #12
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00b      	beq.n	800316a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003152:	4b49      	ldr	r3, [pc, #292]	@ (8003278 <HAL_RCC_OscConfig+0x26c>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f003 030c 	and.w	r3, r3, #12
 800315a:	2b08      	cmp	r3, #8
 800315c:	d11c      	bne.n	8003198 <HAL_RCC_OscConfig+0x18c>
 800315e:	4b46      	ldr	r3, [pc, #280]	@ (8003278 <HAL_RCC_OscConfig+0x26c>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d116      	bne.n	8003198 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800316a:	4b43      	ldr	r3, [pc, #268]	@ (8003278 <HAL_RCC_OscConfig+0x26c>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d005      	beq.n	8003182 <HAL_RCC_OscConfig+0x176>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d001      	beq.n	8003182 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e1c0      	b.n	8003504 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003182:	4b3d      	ldr	r3, [pc, #244]	@ (8003278 <HAL_RCC_OscConfig+0x26c>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	4939      	ldr	r1, [pc, #228]	@ (8003278 <HAL_RCC_OscConfig+0x26c>)
 8003192:	4313      	orrs	r3, r2
 8003194:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003196:	e03a      	b.n	800320e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d020      	beq.n	80031e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031a0:	4b36      	ldr	r3, [pc, #216]	@ (800327c <HAL_RCC_OscConfig+0x270>)
 80031a2:	2201      	movs	r2, #1
 80031a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a6:	f7fe faad 	bl	8001704 <HAL_GetTick>
 80031aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ac:	e008      	b.n	80031c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031ae:	f7fe faa9 	bl	8001704 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d901      	bls.n	80031c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e1a1      	b.n	8003504 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031c0:	4b2d      	ldr	r3, [pc, #180]	@ (8003278 <HAL_RCC_OscConfig+0x26c>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d0f0      	beq.n	80031ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031cc:	4b2a      	ldr	r3, [pc, #168]	@ (8003278 <HAL_RCC_OscConfig+0x26c>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	695b      	ldr	r3, [r3, #20]
 80031d8:	00db      	lsls	r3, r3, #3
 80031da:	4927      	ldr	r1, [pc, #156]	@ (8003278 <HAL_RCC_OscConfig+0x26c>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	600b      	str	r3, [r1, #0]
 80031e0:	e015      	b.n	800320e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031e2:	4b26      	ldr	r3, [pc, #152]	@ (800327c <HAL_RCC_OscConfig+0x270>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e8:	f7fe fa8c 	bl	8001704 <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031f0:	f7fe fa88 	bl	8001704 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e180      	b.n	8003504 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003202:	4b1d      	ldr	r3, [pc, #116]	@ (8003278 <HAL_RCC_OscConfig+0x26c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1f0      	bne.n	80031f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0308 	and.w	r3, r3, #8
 8003216:	2b00      	cmp	r3, #0
 8003218:	d03a      	beq.n	8003290 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d019      	beq.n	8003256 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003222:	4b17      	ldr	r3, [pc, #92]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 8003224:	2201      	movs	r2, #1
 8003226:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003228:	f7fe fa6c 	bl	8001704 <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003230:	f7fe fa68 	bl	8001704 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e160      	b.n	8003504 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003242:	4b0d      	ldr	r3, [pc, #52]	@ (8003278 <HAL_RCC_OscConfig+0x26c>)
 8003244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d0f0      	beq.n	8003230 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800324e:	2001      	movs	r0, #1
 8003250:	f000 fa9c 	bl	800378c <RCC_Delay>
 8003254:	e01c      	b.n	8003290 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003256:	4b0a      	ldr	r3, [pc, #40]	@ (8003280 <HAL_RCC_OscConfig+0x274>)
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800325c:	f7fe fa52 	bl	8001704 <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003262:	e00f      	b.n	8003284 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003264:	f7fe fa4e 	bl	8001704 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d908      	bls.n	8003284 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e146      	b.n	8003504 <HAL_RCC_OscConfig+0x4f8>
 8003276:	bf00      	nop
 8003278:	40021000 	.word	0x40021000
 800327c:	42420000 	.word	0x42420000
 8003280:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003284:	4b92      	ldr	r3, [pc, #584]	@ (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 8003286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1e9      	bne.n	8003264 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0304 	and.w	r3, r3, #4
 8003298:	2b00      	cmp	r3, #0
 800329a:	f000 80a6 	beq.w	80033ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800329e:	2300      	movs	r3, #0
 80032a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032a2:	4b8b      	ldr	r3, [pc, #556]	@ (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10d      	bne.n	80032ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032ae:	4b88      	ldr	r3, [pc, #544]	@ (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	4a87      	ldr	r2, [pc, #540]	@ (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 80032b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032b8:	61d3      	str	r3, [r2, #28]
 80032ba:	4b85      	ldr	r3, [pc, #532]	@ (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032c2:	60bb      	str	r3, [r7, #8]
 80032c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032c6:	2301      	movs	r3, #1
 80032c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ca:	4b82      	ldr	r3, [pc, #520]	@ (80034d4 <HAL_RCC_OscConfig+0x4c8>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d118      	bne.n	8003308 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032d6:	4b7f      	ldr	r3, [pc, #508]	@ (80034d4 <HAL_RCC_OscConfig+0x4c8>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a7e      	ldr	r2, [pc, #504]	@ (80034d4 <HAL_RCC_OscConfig+0x4c8>)
 80032dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032e2:	f7fe fa0f 	bl	8001704 <HAL_GetTick>
 80032e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e8:	e008      	b.n	80032fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ea:	f7fe fa0b 	bl	8001704 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	2b64      	cmp	r3, #100	@ 0x64
 80032f6:	d901      	bls.n	80032fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e103      	b.n	8003504 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032fc:	4b75      	ldr	r3, [pc, #468]	@ (80034d4 <HAL_RCC_OscConfig+0x4c8>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003304:	2b00      	cmp	r3, #0
 8003306:	d0f0      	beq.n	80032ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d106      	bne.n	800331e <HAL_RCC_OscConfig+0x312>
 8003310:	4b6f      	ldr	r3, [pc, #444]	@ (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 8003312:	6a1b      	ldr	r3, [r3, #32]
 8003314:	4a6e      	ldr	r2, [pc, #440]	@ (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 8003316:	f043 0301 	orr.w	r3, r3, #1
 800331a:	6213      	str	r3, [r2, #32]
 800331c:	e02d      	b.n	800337a <HAL_RCC_OscConfig+0x36e>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d10c      	bne.n	8003340 <HAL_RCC_OscConfig+0x334>
 8003326:	4b6a      	ldr	r3, [pc, #424]	@ (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	4a69      	ldr	r2, [pc, #420]	@ (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 800332c:	f023 0301 	bic.w	r3, r3, #1
 8003330:	6213      	str	r3, [r2, #32]
 8003332:	4b67      	ldr	r3, [pc, #412]	@ (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 8003334:	6a1b      	ldr	r3, [r3, #32]
 8003336:	4a66      	ldr	r2, [pc, #408]	@ (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 8003338:	f023 0304 	bic.w	r3, r3, #4
 800333c:	6213      	str	r3, [r2, #32]
 800333e:	e01c      	b.n	800337a <HAL_RCC_OscConfig+0x36e>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	2b05      	cmp	r3, #5
 8003346:	d10c      	bne.n	8003362 <HAL_RCC_OscConfig+0x356>
 8003348:	4b61      	ldr	r3, [pc, #388]	@ (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	4a60      	ldr	r2, [pc, #384]	@ (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 800334e:	f043 0304 	orr.w	r3, r3, #4
 8003352:	6213      	str	r3, [r2, #32]
 8003354:	4b5e      	ldr	r3, [pc, #376]	@ (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 8003356:	6a1b      	ldr	r3, [r3, #32]
 8003358:	4a5d      	ldr	r2, [pc, #372]	@ (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 800335a:	f043 0301 	orr.w	r3, r3, #1
 800335e:	6213      	str	r3, [r2, #32]
 8003360:	e00b      	b.n	800337a <HAL_RCC_OscConfig+0x36e>
 8003362:	4b5b      	ldr	r3, [pc, #364]	@ (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	4a5a      	ldr	r2, [pc, #360]	@ (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 8003368:	f023 0301 	bic.w	r3, r3, #1
 800336c:	6213      	str	r3, [r2, #32]
 800336e:	4b58      	ldr	r3, [pc, #352]	@ (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	4a57      	ldr	r2, [pc, #348]	@ (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 8003374:	f023 0304 	bic.w	r3, r3, #4
 8003378:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d015      	beq.n	80033ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003382:	f7fe f9bf 	bl	8001704 <HAL_GetTick>
 8003386:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003388:	e00a      	b.n	80033a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800338a:	f7fe f9bb 	bl	8001704 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003398:	4293      	cmp	r3, r2
 800339a:	d901      	bls.n	80033a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e0b1      	b.n	8003504 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033a0:	4b4b      	ldr	r3, [pc, #300]	@ (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	f003 0302 	and.w	r3, r3, #2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d0ee      	beq.n	800338a <HAL_RCC_OscConfig+0x37e>
 80033ac:	e014      	b.n	80033d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ae:	f7fe f9a9 	bl	8001704 <HAL_GetTick>
 80033b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033b4:	e00a      	b.n	80033cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033b6:	f7fe f9a5 	bl	8001704 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d901      	bls.n	80033cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e09b      	b.n	8003504 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033cc:	4b40      	ldr	r3, [pc, #256]	@ (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	f003 0302 	and.w	r3, r3, #2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1ee      	bne.n	80033b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033d8:	7dfb      	ldrb	r3, [r7, #23]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d105      	bne.n	80033ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033de:	4b3c      	ldr	r3, [pc, #240]	@ (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	4a3b      	ldr	r2, [pc, #236]	@ (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 80033e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	69db      	ldr	r3, [r3, #28]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f000 8087 	beq.w	8003502 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033f4:	4b36      	ldr	r3, [pc, #216]	@ (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f003 030c 	and.w	r3, r3, #12
 80033fc:	2b08      	cmp	r3, #8
 80033fe:	d061      	beq.n	80034c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	69db      	ldr	r3, [r3, #28]
 8003404:	2b02      	cmp	r3, #2
 8003406:	d146      	bne.n	8003496 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003408:	4b33      	ldr	r3, [pc, #204]	@ (80034d8 <HAL_RCC_OscConfig+0x4cc>)
 800340a:	2200      	movs	r2, #0
 800340c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800340e:	f7fe f979 	bl	8001704 <HAL_GetTick>
 8003412:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003414:	e008      	b.n	8003428 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003416:	f7fe f975 	bl	8001704 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	2b02      	cmp	r3, #2
 8003422:	d901      	bls.n	8003428 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e06d      	b.n	8003504 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003428:	4b29      	ldr	r3, [pc, #164]	@ (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d1f0      	bne.n	8003416 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a1b      	ldr	r3, [r3, #32]
 8003438:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800343c:	d108      	bne.n	8003450 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800343e:	4b24      	ldr	r3, [pc, #144]	@ (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	4921      	ldr	r1, [pc, #132]	@ (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 800344c:	4313      	orrs	r3, r2
 800344e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003450:	4b1f      	ldr	r3, [pc, #124]	@ (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a19      	ldr	r1, [r3, #32]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003460:	430b      	orrs	r3, r1
 8003462:	491b      	ldr	r1, [pc, #108]	@ (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 8003464:	4313      	orrs	r3, r2
 8003466:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003468:	4b1b      	ldr	r3, [pc, #108]	@ (80034d8 <HAL_RCC_OscConfig+0x4cc>)
 800346a:	2201      	movs	r2, #1
 800346c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346e:	f7fe f949 	bl	8001704 <HAL_GetTick>
 8003472:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003474:	e008      	b.n	8003488 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003476:	f7fe f945 	bl	8001704 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d901      	bls.n	8003488 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e03d      	b.n	8003504 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003488:	4b11      	ldr	r3, [pc, #68]	@ (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d0f0      	beq.n	8003476 <HAL_RCC_OscConfig+0x46a>
 8003494:	e035      	b.n	8003502 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003496:	4b10      	ldr	r3, [pc, #64]	@ (80034d8 <HAL_RCC_OscConfig+0x4cc>)
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800349c:	f7fe f932 	bl	8001704 <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034a4:	f7fe f92e 	bl	8001704 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e026      	b.n	8003504 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034b6:	4b06      	ldr	r3, [pc, #24]	@ (80034d0 <HAL_RCC_OscConfig+0x4c4>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1f0      	bne.n	80034a4 <HAL_RCC_OscConfig+0x498>
 80034c2:	e01e      	b.n	8003502 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	69db      	ldr	r3, [r3, #28]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d107      	bne.n	80034dc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e019      	b.n	8003504 <HAL_RCC_OscConfig+0x4f8>
 80034d0:	40021000 	.word	0x40021000
 80034d4:	40007000 	.word	0x40007000
 80034d8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034dc:	4b0b      	ldr	r3, [pc, #44]	@ (800350c <HAL_RCC_OscConfig+0x500>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a1b      	ldr	r3, [r3, #32]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d106      	bne.n	80034fe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d001      	beq.n	8003502 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e000      	b.n	8003504 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3718      	adds	r7, #24
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	40021000 	.word	0x40021000

08003510 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d101      	bne.n	8003524 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e0d0      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003524:	4b6a      	ldr	r3, [pc, #424]	@ (80036d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0307 	and.w	r3, r3, #7
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	429a      	cmp	r2, r3
 8003530:	d910      	bls.n	8003554 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003532:	4b67      	ldr	r3, [pc, #412]	@ (80036d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f023 0207 	bic.w	r2, r3, #7
 800353a:	4965      	ldr	r1, [pc, #404]	@ (80036d0 <HAL_RCC_ClockConfig+0x1c0>)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	4313      	orrs	r3, r2
 8003540:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003542:	4b63      	ldr	r3, [pc, #396]	@ (80036d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0307 	and.w	r3, r3, #7
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	429a      	cmp	r2, r3
 800354e:	d001      	beq.n	8003554 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e0b8      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d020      	beq.n	80035a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0304 	and.w	r3, r3, #4
 8003568:	2b00      	cmp	r3, #0
 800356a:	d005      	beq.n	8003578 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800356c:	4b59      	ldr	r3, [pc, #356]	@ (80036d4 <HAL_RCC_ClockConfig+0x1c4>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	4a58      	ldr	r2, [pc, #352]	@ (80036d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003572:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003576:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0308 	and.w	r3, r3, #8
 8003580:	2b00      	cmp	r3, #0
 8003582:	d005      	beq.n	8003590 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003584:	4b53      	ldr	r3, [pc, #332]	@ (80036d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	4a52      	ldr	r2, [pc, #328]	@ (80036d4 <HAL_RCC_ClockConfig+0x1c4>)
 800358a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800358e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003590:	4b50      	ldr	r3, [pc, #320]	@ (80036d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	494d      	ldr	r1, [pc, #308]	@ (80036d4 <HAL_RCC_ClockConfig+0x1c4>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d040      	beq.n	8003630 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d107      	bne.n	80035c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035b6:	4b47      	ldr	r3, [pc, #284]	@ (80036d4 <HAL_RCC_ClockConfig+0x1c4>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d115      	bne.n	80035ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e07f      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d107      	bne.n	80035de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ce:	4b41      	ldr	r3, [pc, #260]	@ (80036d4 <HAL_RCC_ClockConfig+0x1c4>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d109      	bne.n	80035ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e073      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035de:	4b3d      	ldr	r3, [pc, #244]	@ (80036d4 <HAL_RCC_ClockConfig+0x1c4>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e06b      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035ee:	4b39      	ldr	r3, [pc, #228]	@ (80036d4 <HAL_RCC_ClockConfig+0x1c4>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f023 0203 	bic.w	r2, r3, #3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	4936      	ldr	r1, [pc, #216]	@ (80036d4 <HAL_RCC_ClockConfig+0x1c4>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003600:	f7fe f880 	bl	8001704 <HAL_GetTick>
 8003604:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003606:	e00a      	b.n	800361e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003608:	f7fe f87c 	bl	8001704 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003616:	4293      	cmp	r3, r2
 8003618:	d901      	bls.n	800361e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e053      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800361e:	4b2d      	ldr	r3, [pc, #180]	@ (80036d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f003 020c 	and.w	r2, r3, #12
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	429a      	cmp	r2, r3
 800362e:	d1eb      	bne.n	8003608 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003630:	4b27      	ldr	r3, [pc, #156]	@ (80036d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0307 	and.w	r3, r3, #7
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	429a      	cmp	r2, r3
 800363c:	d210      	bcs.n	8003660 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800363e:	4b24      	ldr	r3, [pc, #144]	@ (80036d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f023 0207 	bic.w	r2, r3, #7
 8003646:	4922      	ldr	r1, [pc, #136]	@ (80036d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	4313      	orrs	r3, r2
 800364c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800364e:	4b20      	ldr	r3, [pc, #128]	@ (80036d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0307 	and.w	r3, r3, #7
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	429a      	cmp	r2, r3
 800365a:	d001      	beq.n	8003660 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e032      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	2b00      	cmp	r3, #0
 800366a:	d008      	beq.n	800367e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800366c:	4b19      	ldr	r3, [pc, #100]	@ (80036d4 <HAL_RCC_ClockConfig+0x1c4>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	4916      	ldr	r1, [pc, #88]	@ (80036d4 <HAL_RCC_ClockConfig+0x1c4>)
 800367a:	4313      	orrs	r3, r2
 800367c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0308 	and.w	r3, r3, #8
 8003686:	2b00      	cmp	r3, #0
 8003688:	d009      	beq.n	800369e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800368a:	4b12      	ldr	r3, [pc, #72]	@ (80036d4 <HAL_RCC_ClockConfig+0x1c4>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	490e      	ldr	r1, [pc, #56]	@ (80036d4 <HAL_RCC_ClockConfig+0x1c4>)
 800369a:	4313      	orrs	r3, r2
 800369c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800369e:	f000 f821 	bl	80036e4 <HAL_RCC_GetSysClockFreq>
 80036a2:	4602      	mov	r2, r0
 80036a4:	4b0b      	ldr	r3, [pc, #44]	@ (80036d4 <HAL_RCC_ClockConfig+0x1c4>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	091b      	lsrs	r3, r3, #4
 80036aa:	f003 030f 	and.w	r3, r3, #15
 80036ae:	490a      	ldr	r1, [pc, #40]	@ (80036d8 <HAL_RCC_ClockConfig+0x1c8>)
 80036b0:	5ccb      	ldrb	r3, [r1, r3]
 80036b2:	fa22 f303 	lsr.w	r3, r2, r3
 80036b6:	4a09      	ldr	r2, [pc, #36]	@ (80036dc <HAL_RCC_ClockConfig+0x1cc>)
 80036b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036ba:	4b09      	ldr	r3, [pc, #36]	@ (80036e0 <HAL_RCC_ClockConfig+0x1d0>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4618      	mov	r0, r3
 80036c0:	f7fd ffde 	bl	8001680 <HAL_InitTick>

  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	40022000 	.word	0x40022000
 80036d4:	40021000 	.word	0x40021000
 80036d8:	08003838 	.word	0x08003838
 80036dc:	20000010 	.word	0x20000010
 80036e0:	20000014 	.word	0x20000014

080036e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b087      	sub	sp, #28
 80036e8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	60fb      	str	r3, [r7, #12]
 80036ee:	2300      	movs	r3, #0
 80036f0:	60bb      	str	r3, [r7, #8]
 80036f2:	2300      	movs	r3, #0
 80036f4:	617b      	str	r3, [r7, #20]
 80036f6:	2300      	movs	r3, #0
 80036f8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80036fa:	2300      	movs	r3, #0
 80036fc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80036fe:	4b1e      	ldr	r3, [pc, #120]	@ (8003778 <HAL_RCC_GetSysClockFreq+0x94>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f003 030c 	and.w	r3, r3, #12
 800370a:	2b04      	cmp	r3, #4
 800370c:	d002      	beq.n	8003714 <HAL_RCC_GetSysClockFreq+0x30>
 800370e:	2b08      	cmp	r3, #8
 8003710:	d003      	beq.n	800371a <HAL_RCC_GetSysClockFreq+0x36>
 8003712:	e027      	b.n	8003764 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003714:	4b19      	ldr	r3, [pc, #100]	@ (800377c <HAL_RCC_GetSysClockFreq+0x98>)
 8003716:	613b      	str	r3, [r7, #16]
      break;
 8003718:	e027      	b.n	800376a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	0c9b      	lsrs	r3, r3, #18
 800371e:	f003 030f 	and.w	r3, r3, #15
 8003722:	4a17      	ldr	r2, [pc, #92]	@ (8003780 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003724:	5cd3      	ldrb	r3, [r2, r3]
 8003726:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d010      	beq.n	8003754 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003732:	4b11      	ldr	r3, [pc, #68]	@ (8003778 <HAL_RCC_GetSysClockFreq+0x94>)
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	0c5b      	lsrs	r3, r3, #17
 8003738:	f003 0301 	and.w	r3, r3, #1
 800373c:	4a11      	ldr	r2, [pc, #68]	@ (8003784 <HAL_RCC_GetSysClockFreq+0xa0>)
 800373e:	5cd3      	ldrb	r3, [r2, r3]
 8003740:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a0d      	ldr	r2, [pc, #52]	@ (800377c <HAL_RCC_GetSysClockFreq+0x98>)
 8003746:	fb03 f202 	mul.w	r2, r3, r2
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003750:	617b      	str	r3, [r7, #20]
 8003752:	e004      	b.n	800375e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a0c      	ldr	r2, [pc, #48]	@ (8003788 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003758:	fb02 f303 	mul.w	r3, r2, r3
 800375c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	613b      	str	r3, [r7, #16]
      break;
 8003762:	e002      	b.n	800376a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003764:	4b05      	ldr	r3, [pc, #20]	@ (800377c <HAL_RCC_GetSysClockFreq+0x98>)
 8003766:	613b      	str	r3, [r7, #16]
      break;
 8003768:	bf00      	nop
    }
  }
  return sysclockfreq;
 800376a:	693b      	ldr	r3, [r7, #16]
}
 800376c:	4618      	mov	r0, r3
 800376e:	371c      	adds	r7, #28
 8003770:	46bd      	mov	sp, r7
 8003772:	bc80      	pop	{r7}
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	40021000 	.word	0x40021000
 800377c:	007a1200 	.word	0x007a1200
 8003780:	08003848 	.word	0x08003848
 8003784:	08003858 	.word	0x08003858
 8003788:	003d0900 	.word	0x003d0900

0800378c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800378c:	b480      	push	{r7}
 800378e:	b085      	sub	sp, #20
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003794:	4b0a      	ldr	r3, [pc, #40]	@ (80037c0 <RCC_Delay+0x34>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a0a      	ldr	r2, [pc, #40]	@ (80037c4 <RCC_Delay+0x38>)
 800379a:	fba2 2303 	umull	r2, r3, r2, r3
 800379e:	0a5b      	lsrs	r3, r3, #9
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	fb02 f303 	mul.w	r3, r2, r3
 80037a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80037a8:	bf00      	nop
  }
  while (Delay --);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	1e5a      	subs	r2, r3, #1
 80037ae:	60fa      	str	r2, [r7, #12]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1f9      	bne.n	80037a8 <RCC_Delay+0x1c>
}
 80037b4:	bf00      	nop
 80037b6:	bf00      	nop
 80037b8:	3714      	adds	r7, #20
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bc80      	pop	{r7}
 80037be:	4770      	bx	lr
 80037c0:	20000010 	.word	0x20000010
 80037c4:	10624dd3 	.word	0x10624dd3

080037c8 <memset>:
 80037c8:	4603      	mov	r3, r0
 80037ca:	4402      	add	r2, r0
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d100      	bne.n	80037d2 <memset+0xa>
 80037d0:	4770      	bx	lr
 80037d2:	f803 1b01 	strb.w	r1, [r3], #1
 80037d6:	e7f9      	b.n	80037cc <memset+0x4>

080037d8 <__libc_init_array>:
 80037d8:	b570      	push	{r4, r5, r6, lr}
 80037da:	2600      	movs	r6, #0
 80037dc:	4d0c      	ldr	r5, [pc, #48]	@ (8003810 <__libc_init_array+0x38>)
 80037de:	4c0d      	ldr	r4, [pc, #52]	@ (8003814 <__libc_init_array+0x3c>)
 80037e0:	1b64      	subs	r4, r4, r5
 80037e2:	10a4      	asrs	r4, r4, #2
 80037e4:	42a6      	cmp	r6, r4
 80037e6:	d109      	bne.n	80037fc <__libc_init_array+0x24>
 80037e8:	f000 f81a 	bl	8003820 <_init>
 80037ec:	2600      	movs	r6, #0
 80037ee:	4d0a      	ldr	r5, [pc, #40]	@ (8003818 <__libc_init_array+0x40>)
 80037f0:	4c0a      	ldr	r4, [pc, #40]	@ (800381c <__libc_init_array+0x44>)
 80037f2:	1b64      	subs	r4, r4, r5
 80037f4:	10a4      	asrs	r4, r4, #2
 80037f6:	42a6      	cmp	r6, r4
 80037f8:	d105      	bne.n	8003806 <__libc_init_array+0x2e>
 80037fa:	bd70      	pop	{r4, r5, r6, pc}
 80037fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003800:	4798      	blx	r3
 8003802:	3601      	adds	r6, #1
 8003804:	e7ee      	b.n	80037e4 <__libc_init_array+0xc>
 8003806:	f855 3b04 	ldr.w	r3, [r5], #4
 800380a:	4798      	blx	r3
 800380c:	3601      	adds	r6, #1
 800380e:	e7f2      	b.n	80037f6 <__libc_init_array+0x1e>
 8003810:	0800385c 	.word	0x0800385c
 8003814:	0800385c 	.word	0x0800385c
 8003818:	0800385c 	.word	0x0800385c
 800381c:	08003860 	.word	0x08003860

08003820 <_init>:
 8003820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003822:	bf00      	nop
 8003824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003826:	bc08      	pop	{r3}
 8003828:	469e      	mov	lr, r3
 800382a:	4770      	bx	lr

0800382c <_fini>:
 800382c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800382e:	bf00      	nop
 8003830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003832:	bc08      	pop	{r3}
 8003834:	469e      	mov	lr, r3
 8003836:	4770      	bx	lr
