#include "Nvm.h"
#include "EncCal.h"
#include "string.h"
#include "Dem.h"

EncCal_VOData_t EncCal_VODataComplete_Default =
{
        /* model */
        {
                0x38, 0x20, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73
        },
        /* VIN*/
        {
                0x57, 0x42, 0x41, 0x45, 0x47, 0x32, 0x33, 0x31,
                0x31, 0x4D, 0x43, 0x32, 0x39, 0x31, 0x31, 0x34,
                0x33
        },
        /* chassisNumber*/
        {
                0x46, 0x39, 0x33
        },

        /* up-holstery */
        {
                0x62, 0x6C, 0x61, 0x63, 0x6B, 0x20, 0x2F, 0x20,
                0x4D, 0x38, 0x47, 0x54, 0x45,
                0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        },

        /* swVersion*/
        {
                { 0x31, 0x2E, 0x31, 0x2E, 0x31 },
                { 0x31, 0x2E, 0x31, 0x2E, 0x31 },
                { 0x31, 0x2E, 0x31, 0x2E, 0x31 },
                { 0x31, 0x2E, 0x31, 0x2E, 0x31 }
        },

        /* hwVersion*/
        {
                { 0x31, 0x2E, 0x31, 0x2E, 0x31 },
                { 0x31, 0x2E, 0x31, 0x2E, 0x31 },
                { 0x31, 0x2E, 0x31, 0x2E, 0x31 },
                { 0x31, 0x2E, 0x31, 0x2E, 0x31 }
        },

        /* calibrationVersion */
        {
                { 0x31, 0x2E, 0x31, 0x2E, 0x31 },
                { 0x31, 0x2E, 0x31, 0x2E, 0x31 },
                { 0x31, 0x2E, 0x31, 0x2E, 0x31 },
                { 0x31, 0x2E, 0x31, 0x2E, 0x31 }
        },

        /* codingVersion */
        {
                { 0x31, 0x2E, 0x31, 0x2E, 0x31 },
                { 0x31, 0x2E, 0x31, 0x2E, 0x31 },
                { 0x31, 0x2E, 0x31, 0x2E, 0x31 },
                { 0x31, 0x2E, 0x31, 0x2E, 0x31 }
        },

        /* optionList:
         */
        {

                {
                        0x53,0x74,0x65,0x65,0x72,0x2D,0x62,0x79,0x2D,0x77,0x69,0x72,0x65,0x42,0x72,0x61,
                        0x6B,0x65,0x2D,0x62,0x79,0x2D,0x77,0x69,0x72,0x65,0x42,0x6C,0x75,0x65,0x74,0x6F,
                        0x6F,0x74,0x68,0x20,0x63,0x6F,0x6E,0x74,0x72,0x6F,0x6C,0x52,0x65,0x6D,0x6F,0x74,
                        0x65,0x20,0x76,0x65,0x6E,0x74,0x69,0x6C,0x61,0x74,0x69,0x6F,0x6E,0x41,0x75,0x74
                },
                {
                        0x6F,0x6D,0x61,0x74,0x69,0x63,0x20,0x63,0x6C,0x69,0x6D,0x61,0x74,0x65,0x20,0x63,
                        0x6F,0x6E,0x74,0x72,0x6F,0x6C,0x57,0x69,0x6E,0x64,0x73,0x68,0x69,0x65,0x6C,0x64,
                        0x20,0x77,0x69,0x70,0x65,0x72,0x20,0x6E,0x6F,0x72,0x6D,0x61,0x6C,0x20,0x73,0x70,
                        0x65,0x65,0x64,0x44,0x69,0x67,0x69,0x74,0x61,0x6C,0x20,0x43,0x6C,0x75,0x73,0x74
                },
                {
                        0x65,0x72,0x52,0x65,0x76,0x65,0x72,0x73,0x65,0x20,0x63,0x61,0x6D,0x65,0x72,0x61,
                        0x43,0x6F,0x6C,0x6C,0x69,0x73,0x69,0x6F,0x6E,0x20,0x61,0x73,0x73,0x69,0x73,0x74,
                        0x43,0x65,0x6E,0x74,0x72,0x61,0x6C,0x20,0x6C,0x6F,0x63,0x6B,0x69,0x6E,0x67,0x41,
                        0x75,0x74,0x6F,0x6D,0x61,0x74,0x69,0x63,0x20,0x6C,0x69,0x67,0x68,0x74,0x73
                },
                {
                        0x41,0x75,0x74,0x6F,0x6D,0x61,0x74,0x69,0x63,0x20,0x77,0x69,0x70,0x65,0x72,0x73,
                        0x41,0x75,0x74,0x6F,0x6D,0x61,0x74,0x69,0x63,0x20,0x74,0x72,0x61,0x6E,0x73,0x6D,
                        0x69,0x73,0x73,0x69,0x6F,0x6E,0x20,0x2F,0x20,0x65,0x6C,0x65,0x63,0x74,0x72,0x69,
                        0x63,0x20,0x64,0x72,0x69,0x76,0x65,0x74,0x72,0x61,0x69,0x6E,0x52,0x65,0x6D,0x6F
                },
                {
                        0x74,0x65,0x20,0x73,0x74,0x61,0x72,0x74,0x35,0x56,0x20,0x65,0x6C,0x65,0x63,0x74,
                        0x72,0x69,0x63,0x20,0x64,0x72,0x69,0x76,0x65,0x74,0x72,0x61,0x69,0x6E,0x00,0x00,
                        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
                },
                /* Rows 5..19: all zeros (no more text) */
                { {0} }, { {0} }, { {0} }, { {0} }, { {0} },
                { {0} }, { {0} }, { {0} }, { {0} }, { {0} },
                { {0} }, { {0} }, { {0} }, { {0} }, { {0} }
        },
        {
                0x30, 0x31, 0x2E, 0x30, 0x35, 0x2E, 0x32, 0x35
        },
        /* modulesList*/
        {

                {
                        0x43,0x65,0x6E,0x74,0x72,0x61,0x6C,0x20,0x42,0x6F,0x64,0x79,0x20,0x4D,0x6F,0x64,
                        0x75,0x6C,0x65,0x20,0x31,0x20,0x2D,0x20,0x43,0x42,0x4D,0x31,0x44,0x69,0x67,0x69,
                        0x74,0x61,0x6C,0x20,0x4D,0x61,0x69,0x6E,0x20,0x55,0x6E,0x69,0x74,0x20,0x31,0x20,
                        0x2D,0x20,0x44,0x4D,0x55,0x31,0x50,0x6F,0x77,0x65,0x72,0x20,0x44,0x69,0x73,0x74
                },
                {
                        0x72,0x69,0x62,0x75,0x74,0x69,0x6F,0x6E,0x20,0x4D,0x6F,0x64,0x75,0x6C,0x65,0x20,
                        0x31,0x20,0x2D,0x20,0x50,0x44,0x4D,0x31,0x44,0x72,0x69,0x76,0x65,0x20,0x45,0x6C,
                        0x65,0x63,0x74,0x72,0x6F,0x6E,0x69,0x63,0x20,0x43,0x6F,0x6E,0x74,0x72,0x6F,0x6C,
                        0x6C,0x65,0x72,0x20,0x31,0x20,0x2D,0x20,0x44,0x45,0x43,0x31,0x00,0x00,0x00,0x00
                },
                { {0} },
                { {0} }
        }
};
EncCal_VOData_t EncCal_VODataComplete;
uint32 EncCal_Calibration_Buffer[ENCCAL_CALIBRATION_SIZE];
uint32 EncCal_Calibration_DefaultBuffer[ENCCAL_CALIBRATION_SIZE] =
{
        50u,30u,15u,10u,80u,0xFFFFU,0xdfu,0xdfu
};
uint32 EncCal_Calibration_ColDet_StableDistanceCm                               = 0u;
uint32 EncCal_Calibration_ColDet_TtcWarn                                        = 0u;
uint32 EncCal_Calibration_ColDet_TtcBrake                                       = 0u;
uint32 EncCal_Calibration_ColDet_MinDist                                        = 0u;
uint32 EncCal_Calibration_ColDet_MaxDist                                        = 0u;
uint32 EncCal_Calibration_ColDet_InvalidDist                                    = 0u;
uint32 EncCal_Calibration_EnergyMgmt_CurrentConsumptionTimer                    = 0u;
uint32 EncCal_Calibration_EnergyMgmt_MaxOutputCurrent                           = 0u;
uint32 EncCal_Calibration_EnergyMgmt_UnderVoltageTh                             = 0u;
uint8 EncCal_Coding_DefaultBuffer[ENCCAL_CODING_SIZE] =
{
        1u,1u,1u,1u,1u,0xdfu,0xdfu,0xdfu
};
uint8 EncCal_Coding_Buffer[ENCCAL_CODING_SIZE];
uint8 EncCal_Coding_IgnCtrl = 0u;
uint8 EncCal_Coding_CenLoc = 0u;
uint8 EncCal_Coding_Hc05 = 0u;
uint8 EncCal_Coding_Hc05Vent = 0u;
uint8 EncCal_Coding_Lsen = 0u;
uint8 EncCal_CodingValidResult = 0u;
uint8 EncCal_CalibrationValidResult = 0u;
uint8 EncCal_IsVoDataValid = 0u;
uint8 EncCal_CheckResult_Coding = 0u;
uint8 EncCal_CheckResult_Calibration = 0u;
uint8 EncCal_CheckResult_VoData = 0u;
uint8 zeroBuffer[sizeof(EncCal_VODataComplete)];

void EncCal_InitVoData(void);
void EncCal_WriteVoData(uint32* data);
void EncCal_ReadVoData(uint32* data);
void EncCal_InitCalibration(void);
void EncCal_InitCoding(void);
uint8 EncCal_CodingValidity(void);
uint8 EncCal_CalibrationValidity(void);
void EncCal_ReadCalibration(uint32* data);
void EncCal_ReadCoding(uint32* data);
void EncCal_WriteCalibration(uint32* data);
void EncCal_WriteCoding(uint32* data);
void EncCal_MainFunction(void);

void EncCal_InitVoData(void)
{
    EncCal_IsVoDataValid = (memcmp(&EncCal_VODataComplete, zeroBuffer, sizeof(EncCal_VODataComplete)) == 0u);

    if(1u == EncCal_IsVoDataValid)
    {
        memcpy(&EncCal_VODataComplete, &EncCal_VODataComplete_Default, sizeof(EncCal_VODataComplete));
    }
    else
    {
        EncCal_IsVoDataValid = 2u;
    }
}

void EncCal_WriteVoData(uint32* data)
{
    Nvm_WriteBlock(3u, data);
}

void EncCal_ReadVoData(uint32* data)
{
    Nvm_ReadBlock(3u, data);
}

uint8 EncCal_CalibrationValidity(void)
{
    static uint8 retVal = 0u;

    if(45u > EncCal_Calibration_ColDet_StableDistanceCm || 55u < EncCal_Calibration_ColDet_StableDistanceCm)
    {
        EncCal_Calibration_ColDet_StableDistanceCm = 50u;
        retVal = 1u;
    }
    else
    {
        /* Do nothing. */
    }

    if(30u > EncCal_Calibration_ColDet_TtcWarn || 40u < EncCal_Calibration_ColDet_TtcWarn)
    {
        EncCal_Calibration_ColDet_TtcWarn = 30u;
        retVal = 1u;
    }
    else
    {
        /* Do nothing. */
    }

    if(15u > EncCal_Calibration_ColDet_TtcBrake || 25u < EncCal_Calibration_ColDet_TtcBrake)
    {
        EncCal_Calibration_ColDet_TtcBrake = 15u;
        retVal = 1u;
    }
    else
    {
        /* Do nothing. */
    }

    if(1u > EncCal_Calibration_ColDet_MinDist || 15u < EncCal_Calibration_ColDet_MinDist)
    {
        EncCal_Calibration_ColDet_MinDist = 10u;
        retVal = 1u;
    }
    else
    {
        /* Do nothing. */
    }

    if(75u > EncCal_Calibration_ColDet_MaxDist || 90u < EncCal_Calibration_ColDet_MaxDist)
    {
        EncCal_Calibration_ColDet_MaxDist = 80u;
        retVal = 1u;
    }
    else
    {
        /* Do nothing. */
    }

    if(0xFFFFU != EncCal_Calibration_ColDet_InvalidDist)
    {
        EncCal_Calibration_ColDet_InvalidDist = 0xFFFFU;
        retVal = 1u;
    }
    else
    {
        /* Do nothing. */
    }

    return retVal;
}

uint8 EncCal_CodingValidity(void)
{
    static uint8 retVal = 0u;

    if(2u < EncCal_Coding_IgnCtrl)
    {
        EncCal_Coding_IgnCtrl = 1u;
        retVal = 1u;
    }
    else
    {
        /* Do nothing. */
    }

    if(2u < EncCal_Coding_CenLoc)
    {
        EncCal_Coding_CenLoc = 1u;
        retVal = 1u;
    }
    else
    {
        /* Do nothing. */
    }

    if(2u < EncCal_Coding_Hc05)
    {
        EncCal_Coding_Hc05 = 1u;
        retVal = 1u;
    }
    else
    {
        /* Do nothing. */
    }

    if(2u < EncCal_Coding_Hc05Vent)
    {
        EncCal_Coding_Hc05Vent = 1u;
        retVal = 1u;
    }
    else
    {
        /* Do nothing. */
    }

    if(2u < EncCal_Coding_Lsen)
    {
        EncCal_Coding_Lsen = 1u;
        retVal = 1u;
    }
    else
    {
        /* Do nothing. */
    }

    return retVal;
}

void EncCal_InitCalibration(void)
{
    static uint8 i = 0u;
    static uint8 checkBufferNotEmptyFlag = 0u;

    for(i = 0u; i < ENCCAL_CALIBRATION_SIZE; i++)
    {
        if(0xFFu != EncCal_Calibration_Buffer[i] && 0x00u != EncCal_Calibration_Buffer[i])
        {
            checkBufferNotEmptyFlag = 1u;
        }
        else
        {
            checkBufferNotEmptyFlag = 0u;
            break;
        }
    }

    if(1u == checkBufferNotEmptyFlag)
    {
        /* Do nothing. */
    }
    else
    {
        memcpy(EncCal_Calibration_Buffer, EncCal_Calibration_DefaultBuffer, sizeof(EncCal_Calibration_Buffer));
    }

    EncCal_Calibration_ColDet_StableDistanceCm                               = EncCal_Calibration_Buffer[0u];
    EncCal_Calibration_ColDet_TtcWarn                                        = EncCal_Calibration_Buffer[1u];
    EncCal_Calibration_ColDet_TtcBrake                                       = EncCal_Calibration_Buffer[2u];
    EncCal_Calibration_ColDet_MinDist                                        = EncCal_Calibration_Buffer[3u];
    EncCal_Calibration_ColDet_MaxDist                                        = EncCal_Calibration_Buffer[4u];
    EncCal_Calibration_ColDet_InvalidDist                                    = EncCal_Calibration_Buffer[5u];
    EncCal_CalibrationValidResult = EncCal_CalibrationValidity();
}

void EncCal_InitCoding(void)
{
    static uint8 i = 0u;
    static uint8 checkBufferNotEmptyFlag = 0u;

    for(i = 0u; i < ENCCAL_CODING_SIZE; i++)
    {
        if(0xFFu != EncCal_Coding_Buffer[i] && 0x00u != EncCal_Coding_Buffer[i])
        {
            checkBufferNotEmptyFlag = 1u;
        }
        else
        {
            checkBufferNotEmptyFlag = 0u;
            break;
        }
    }

    if(1u == checkBufferNotEmptyFlag)
    {
        /* Do nothing. */
    }
    else
    {
        memcpy(EncCal_Coding_Buffer, EncCal_Coding_DefaultBuffer, sizeof(EncCal_Coding_Buffer));
    }

    EncCal_Coding_IgnCtrl           = (uint8)EncCal_Coding_Buffer[0u];
    EncCal_Coding_CenLoc            = (uint8)EncCal_Coding_Buffer[1u];
    EncCal_Coding_Hc05              = (uint8)EncCal_Coding_Buffer[2u];
    EncCal_Coding_Hc05Vent          = (uint8)EncCal_Coding_Buffer[3u];
    EncCal_Coding_Lsen              = (uint8)EncCal_Coding_Buffer[4u];
    EncCal_CodingValidResult = EncCal_CodingValidity();
}

void EncCal_ReadCalibration(uint32* data)
{
    Nvm_ReadBlock(1u, data);
}

void EncCal_ReadCoding(uint32* data)
{
    Nvm_ReadBlock(2u, data);
}

void EncCal_WriteCalibration(uint32* data)
{
    Nvm_WriteBlock(1u, data);
}

void EncCal_WriteCoding(uint32* data)
{
    Nvm_WriteBlock(2u, data);
}

void EncCal_MainFunction(void)
{
    static uint8 firstCall = 0u;

    EncCal_InitCalibration();
    EncCal_InitCoding();
    EncCal_InitVoData();

    if(0u == firstCall)
    {
        if(1u == EncCal_CalibrationValidResult)
        {
            Dem_SetDtc(ENCCAL_INVALID_CALIBRATION, 1u, 34u);
        }
        else
        {
            Dem_SetDtc(ENCCAL_INVALID_CALIBRATION, 0u, 34u);
        }

        if(1u == EncCal_CodingValidResult)
        {
            Dem_SetDtc(ENCCAL_INVALID_CODING, 1u, 33u);
        }
        else
        {
            Dem_SetDtc(ENCCAL_INVALID_CODING, 0u, 33u);
        }

        if(1u == EncCal_IsVoDataValid)
        {
            Dem_SetDtc(ENCCAL_INVALID_VODATA, 1u, 35u);
        }
        else
        {
            Dem_SetDtc(ENCCAL_INVALID_VODATA, 0u, 35u);
        }

        firstCall = 1u;
    }
    else
    {
        /* Do nothing. */
    }
}
