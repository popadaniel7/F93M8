/**********************************************************************************************************************
 * \file SafetyKit_Main.c
 * \copyright Copyright (C) Infineon Technologies AG 2019
 *
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are solely in the form of
 * machine-executable object code generated by a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *********************************************************************************************************************/


/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/
#include "SafetyKit_Dma.h"
#include "SafetyKit_Emem.h"
#include "SafetyKit_Fce.h"
#include "SafetyKit_Isr_Monitor.h"
#include "SafetyKit_LmuDam.h"
#include "SafetyKit_NvmPflash.h"
#include "SafetyKit_Pflash_Programming.h"
#include "SafetyKit_Sri_Error_Handling.h"
#include "SafetyKit_StmMon.h"
#include "SafetyKit_Sent_Channel_Redundancy.h"
#include "SafetyKit_QSPI_Safe_Communication.h"
#include "SafetyKit_AA_FUC0.h"
#include "SafetyKit_AA_FUC1.h"
#include "SafetyKit_AA_FUC2.h"
#include "SafetyKit_AA_FUC3.h"
#include "SafetyKit_AA_FUC4.h"
#include "SafetyKit_DAcq_FUC0.h"
#include "SafetyKit_DAcq_FUC1.h"
#include "SafetyKit_DAcq_FUC2.h"
#include "SafetyKit_DAct_FUC0.h"
#include "SafetyKit_DAct_FUC1.h"
#include "SafetyKit_DAct_FUC2.h"
#include "SafetyKit_DAct_FUC3.h"
#include "09_Fault_Injection/SafetyKit_Lockstep.h"
#include "09_Fault_Injection/SafetyKit_StallCpu.h"
#include "09_Fault_Injection/SafetyKit_TriggerSmuAlarm.h"
#include "09_Fault_Injection/SafetyKit_TriggerStmAlarm.h"
#include "09_Fault_Injection/SafetyKit_UndervoltageSimulation.h"
#include "AppKit_Main.h"
#include "SafetyKit_Main.h"
#include "SafetyKit_Cfg.h"
#include "SafetyKit_RegMon.h"
#include "SafetyKit_DieTemp.h"
#include "SafetyKit_VoltMon.h"
#include "SafetyKit_EmergencyStop.h"
#include "SafetyKit_Tlf35584.h"
#include "SafetyKit_InternalWatchdogs.h"
#include "SMU.h"
#include "SMU_Test_output.h"
#include "SafetyKit_SmuCmds.h"

#include "IfxGtm.h"
#include "IfxGtm_Cmu.h"

#include "IfxSmu.h"
#include "IfxSmu_Smu.h"

#include "safetyKit_PortLoopBack.h"
#include "safetyKit_PortRedundancy.h"
#include "SafetyKit_ClockPlausibility.h"
#include "SafetyKit_SSW_02_MCU_FW_CHECK.h"


/*********************************************************************************************************************/
/*------------------------------------------------------Macros-------------------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*-------------------------------------------------Global variables--------------------------------------------------*/
/*********************************************************************************************************************/
SafetyKitStatusType             g_SafetyKitStatus;        /* global variable for safety kit status                   */
volatile Ifx_SMU_AG             g_SafetyKitSmuAlarmRegStatusEnlessLoop[IFXSMU_NUM_ALARM_GROUPS]; /* SMM Alarm Array  */
IFX_EXTERN RuntimeAlarmHandle   alarmsThatAreDisabled[USER_ALARM_NUMBER]; /* disable alarm array                     */
IFX_EXTERN uint16               nbrAlarmsThatAreDisabled;
static uint32 lastDigitalAcqActMode = noDigitalAcquisitionOrActuation; /* last digital Acquisition/actuation mode    */
static uint32 lastAnalogAcquisitionMode = noAnalogAcquisitionMode;  /* last analog Acquisition mode                  */

/*********************************************************************************************************************/
/*-------------------------------------------------Data Structures---------------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*------------------------------------------------Function Prototypes------------------------------------------------*/
/*********************************************************************************************************************/
void initSafetyKitLEDs(void);
void initGTM(void);
void runSMOnlyOnce(void);
void checkIfSmuAlarmIsActive(void);

/*********************************************************************************************************************/
/*---------------------------------------------Function Implementations----------------------------------------------*/
/*********************************************************************************************************************/
/*
 * initial LEDs of safety kit
 * */
void initSafetyKitLEDs(void)
{
    /* Set pin of STARTUP_FINIESHED_LED as output and disable LED by default */
    IfxPort_setPinModeOutput(STARTUP_FINISHED_LED.port, STARTUP_FINISHED_LED.pinIndex, IfxPort_OutputMode_pushPull,
            IfxPort_OutputIdx_general);
    IfxPort_setPinHigh(STARTUP_FINISHED_LED.port, STARTUP_FINISHED_LED.pinIndex);

    /* Set pin of LIFEHOLD_LED as output and disable LED by default */
    IfxPort_setPinModeOutput(LIFEHOLD_LED.port, LIFEHOLD_LED.pinIndex, IfxPort_OutputMode_pushPull,
            IfxPort_OutputIdx_general);
    IfxPort_setPinHigh(LIFEHOLD_LED.port, LIFEHOLD_LED.pinIndex);

    /* Set pin of SMU_ALARM_DETECTED_LED as output and disable LED by default */
    IfxPort_setPinModeOutput(SMU_ALARM_DETECTED_LED.port, SMU_ALARM_DETECTED_LED.pinIndex, IfxPort_OutputMode_pushPull,
            IfxPort_OutputIdx_general);
    IfxPort_setPinHigh(SMU_ALARM_DETECTED_LED.port, SMU_ALARM_DETECTED_LED.pinIndex);

    /* Set pin of ISR_MONITOR_LED_D8 as output and disable LED by default */
    IfxPort_setPinModeOutput(ISR_MONITOR_LED_D8.port, ISR_MONITOR_LED_D8.pinIndex, IfxPort_OutputMode_pushPull,
            IfxPort_OutputIdx_general);
    IfxPort_setPinHigh(ISR_MONITOR_LED_D8.port, ISR_MONITOR_LED_D8.pinIndex);

    /* Set pin of LED_D9_PORT as output and disable LED by default */
    IfxPort_setPinModeOutput(LED_D9_PORT, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
    IfxPort_setPinHigh(LED_D9_PORT);
}

/* initialize the GTM module */
void initGTM(void)
{
    /* enable GTM module */
    IfxGtm_enable(&MODULE_GTM);

    /* set the global clock to 50MHz */
    IfxGtm_Cmu_setGclkFrequency(&MODULE_GTM, 50000000.0f);

    /* set CMU0 frequency to 50MHz */
    IfxGtm_Cmu_setClkFrequency(&MODULE_GTM, IfxGtm_Cmu_Clk_0, 50000000.0f);

    /* enable CMU0 clock */
    IfxGtm_Cmu_enableClocks(&MODULE_GTM, IFXGTM_CMU_CLKEN_CLK0);

    /* enable FX clock*/
    IfxGtm_Cmu_enableClocks(&MODULE_GTM, IFXGTM_CMU_CLKEN_FXCLK);
}

/*
 * initialize safety kit
 * */
void initSafetyKit(void)
{
    /* Initialize EMEM module */
    initEMEM();
    /* Execute SM:REG_MONITOR_TEST */
    safetyKitRunRegMonitorTest();
    /* Clear all SMU alarms, some alarm flags might be set due to start up software */
    safetyKitClearAllSmuAlarms();
    /* Initialize the SMU to configure and map the alarms
     * SM:SMU:CONFIG and Enable the security Key test */
    initSMUModule();
    /* Initialize Secondary Voltage monitors and their threshold values */
    initVoltageMonitors();
    /* Initialize under voltage simulation */
    initUndervoltageSimulation();
    /* SM:FCE:CRC_CFG */
    initFCECRC();
    /* Initialization of SafetyKit is done */
    g_SafetyKitStatus.safetyKitInitDone = TRUE;
    /* SMs which only need to run once in the beginning */
    runSMOnlyOnce();
}
/*
 * This function is to run SMs which are required only once
 * */
void runSMOnlyOnce(void)
{
    /* run SM:PFLASH:INTEGRITY_CHECK, needed only once */
    runIntegrityCheckPFLASH();
}
