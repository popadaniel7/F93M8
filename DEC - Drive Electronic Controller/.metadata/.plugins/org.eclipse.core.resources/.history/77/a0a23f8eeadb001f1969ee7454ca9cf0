#include "ColDet.h"
#include "Ain.h"
#include <stdio.h>
#include <stdbool.h>
#include <math.h>
#include "time.h"

typedef enum
{
    INIT = 255U,
    SAFE = 0U,
    WARNING = 1U,
    BRAKE = 2U,
    ERROR = 254U
} ColDet_State_t;

static const float DISTANCE_STABLE_THRESHOLD_CM = 2.0f;         // If distance changes less than +-2 centimeters, treat as stable
static const float TIME_TO_COLLISION_WARN       = 2.0f;         // If TTC < 2s => go to WARNING
static const float TIME_TO_COLLISION_BRAKE      = 1.0f;         // If TTC < 1s => go to BRAKE
static ColDet_State_t g_collisionState = INIT;
static float g_lastDistanceCm = 0xFFFFu;                         // Start with some large distance

static uint32 ColDet_MainCounter = 0u;
uint8 ColDet_CanTx_IrSenStat = 0u;
float ColDet_CalculatedSpeed = 0u;

void ColDet_MainFunction(void);

void ColDet_MainFunction(void)
{
    static float distCm = 0u;
    static float vehicleSpeed = 0u;
    static float deltaDistCm = 0u;
    static float approachSpeedMps = 0.0f;
    static float distanceChangeMeters = 0u;
    static float ttcSeconds = 0.0f;
    static float distM = 0.0f;
    static uint32 timestamp = 0u;
    static uint32 warnDurationSec = 0u;

    distCm = IRSensorValue;
    vehicleSpeed = ColDet_CalculatedSpeed;  /* used to see if we are moving at all. */
    deltaDistCm = distCm - g_lastDistanceCm;
    g_lastDistanceCm  = distCm;
    /* If our car is basically not moving, skip everything => Remain SAFE. */
    if(vehicleSpeed < 0.01f)
    {
        if(g_collisionState != BRAKE)
        {
            g_collisionState = SAFE;
        }
        else
        {
            /* Do nothing. */
        }
    }
    else
    {
        /* Do nothing. */
    }

    if(deltaDistCm < -DISTANCE_STABLE_THRESHOLD_CM)
    {
        /* Negative deltaDist => distance decreased => We approach the front car. */
        distanceChangeMeters = -(deltaDistCm / 100.0f); /* Convert centimeters -> meters and invert sign. */
        approachSpeedMps = distanceChangeMeters / 0.04f;
        /* If distance changed by -5 centimeters in 0.05s => 0.05m / 0.05s => approachSpeed = 1.0 m/s. */
    }
    else
    {
        /* Distance stable or increasing => no approach. */
        approachSpeedMps = 0.0f;
    }
    /* Compute Time to Collision if approachSpeed > 0. */
    ttcSeconds = 99999.0f;
    distM      = distCm / 100.0f; /* Convert to meters. */

    if(approachSpeedMps > 0.01f)
    {
        ttcSeconds = distM / approachSpeedMps;
    }
    else
    {
        /* Do nothing. */
    }
    /* State machine logic. */
    switch(g_collisionState)
    {
        case SAFE:
        {
            /* If we're not approaching or TTC > TIME_TO_COLLISION_WARN => remain SAFE. */
            if(ttcSeconds > TIME_TO_COLLISION_WARN)
            {
                /* Do nothing. */
            }
            else if(ttcSeconds < TIME_TO_COLLISION_BRAKE)
            {
                /* immediate brake if TTC < 1 second. */
                g_collisionState = BRAKE;
            }
            else
            {
                /* TTC is between 1 second and 2 seconds => WARNING. */
                g_collisionState   = WARNING;
                timestamp = ColDet_MainCounter * 5u;
            }
            break;
        }
        case WARNING:
        {
            /* If we become safe again (TTC > TIME_TO_COLLISION_WARN), revert to SAFE. */
            if(ttcSeconds > TIME_TO_COLLISION_WARN)
            {
                g_collisionState = SAFE;
                break;
            }
            else
            {
                /* Do nothing. */
            }
            /* Remain in WARNING if TTC between 1 second and 2 seconds. */
            warnDurationSec = (ColDet_MainCounter * 40U) - timestamp;
            /* If TTC < 1 second => we want to brake, but let's ensure we gave at least MIN_WARNING_DURATION. */
            if((ttcSeconds < TIME_TO_COLLISION_BRAKE))
            {
                g_collisionState = BRAKE;
            }
            else
            {
                /* Do nothing. */
            }
            break;
        }
        case BRAKE:
        {
            /* If we are now safe => release brake. */
            if(ttcSeconds > TIME_TO_COLLISION_WARN)
            {
                g_collisionState = SAFE;
            }
            else
            {
                /* Do nothing. */
            }
            break;
        }
        default:
            break;
    }

    if(0xFFFFu == IRSensorValue)
    {
        g_collisionState = ERROR;
    }
    else
    {
        /* Do nothing. */
    }

    ColDet_CanTx_IrSenStat = g_collisionState;

    ColDet_MainCounter++;
}
