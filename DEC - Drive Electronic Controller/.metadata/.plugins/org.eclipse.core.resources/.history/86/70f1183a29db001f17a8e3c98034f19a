/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/
#include "Ifx_Types.h"
#include "IfxCpu_reg.h"
#include "IfxMtu.h"
/*********************************************************************************************************************/
/*------------------------------------------------------Macros-------------------------------------------------------*/
/*********************************************************************************************************************/
#define DPR_GRANULARITY                 8                           /* Data Protection Range granularity in bytes   */
#define CPR_GRANULARITY                 32                          /* Code Protection Range granularity in bytes   */
/* Data Protection Ranges */
#define DATA_PROTECTION_RANGE_0         0
#define DATA_PROTECTION_RANGE_1         1
#define DATA_PROTECTION_RANGE_2         2
#define DATA_PROTECTION_RANGE_3         3
#define DATA_PROTECTION_RANGE_4         4
#define DATA_PROTECTION_RANGE_5         5
#define DATA_PROTECTION_RANGE_6         6
#define DATA_PROTECTION_RANGE_7         7
#define DATA_PROTECTION_RANGE_8         8
#define DATA_PROTECTION_RANGE_9         9
#define DATA_PROTECTION_RANGE_10        10
#define DATA_PROTECTION_RANGE_11        11
#define DATA_PROTECTION_RANGE_12        12
#define DATA_PROTECTION_RANGE_13        13
#define DATA_PROTECTION_RANGE_14        14
#define DATA_PROTECTION_RANGE_15        15
#define DATA_PROTECTION_RANGE_16        16
#define DATA_PROTECTION_RANGE_17        17
/* Code Protection Ranges */
#define CODE_PROTECTION_RANGE_0         0
#define CODE_PROTECTION_RANGE_1         1
#define CODE_PROTECTION_RANGE_2         2
#define CODE_PROTECTION_RANGE_3         3
#define CODE_PROTECTION_RANGE_4         4
#define CODE_PROTECTION_RANGE_5         5
#define CODE_PROTECTION_RANGE_6         6
#define CODE_PROTECTION_RANGE_7         7
#define CODE_PROTECTION_RANGE_8         8
#define CODE_PROTECTION_RANGE_9         9
/* Protection Sets */
#define PROTECTION_SET_0                0
#define PROTECTION_SET_1                1
#define PROTECTION_SET_2                2
#define PROTECTION_SET_3                3
#define PROTECTION_SET_4                4
#define PROTECTION_SET_5                5

extern uint8 g_isMeasureAvailable;  /* Variable to store availability of new measurements */
/*********************************************************************************************************************/
/*------------------------------------------------Function Prototypes------------------------------------------------*/
/*********************************************************************************************************************/
/* MPU control functions */
void McuSm_InitializeBusMpu(void);
void McuSm_EnableBusMpu(void);
void McuSm_InitializeDataProtectionRange(uint32 lowerBoundAddress, uint32 upperBoundAddress, uint8 range);
void McuSm_InitializeCodeProtectionRange(uint32 lowerBoundAddress, uint32 upperBoundAddress, uint8 range);
void McuSm_EnableDataRead(uint8 protectionSet, uint8 range);
void McuSm_EnableDataWrite(uint8 protectionSet, uint8 range);
void McuSm_EnableCodeExecution(uint8 protectionSet, uint8 range);
IFX_INLINE void McuSm_SetActiveProtectionSet(uint8 protectionSet);
void McuSm_MbistManager(void);
void McuSm_MbistTest(IfxMtu_MbistSel mbistSel);
uint32 McuSm_GetMbistErrors(IfxMtu_MbistSel mbistSel);
void McuSm_ClearMbistErrors(IfxMtu_MbistSel mbistSel);
void McuSm_PerformReset(void);
void McuSm_PerformResetHook(uint32 resetReason, uint32 resetInformation);
/*********************************************************************************************************************/
/*---------------------------------------------Function Implementations----------------------------------------------*/
/*********************************************************************************************************************/
/* Function to set the given Protection Set as active.
 * This function needs to be declared as in-line because the Program Status Word (PSW) is one of the registers
 * automatically saved to the Context Save Area (CSA) when a function is called.
 * If this function was not declared as in-line, the Upper Context (16 registers including the PSW) would be
 * automatically saved to the CSA and re-loaded when the function return, thus losing the change in the PSW.
 */
IFX_INLINE void McuSm_SetActiveProtectionSet(uint8 protectionSet)
{
    Ifx_CPU_PSW PSWRegisterValue;
    PSWRegisterValue.U = __mfcr(CPU_PSW);               /* Get the Program Status Word (PSW) register value         */
    PSWRegisterValue.B.PRS = protectionSet;             /* Set the PRS bit-field to enable the Protection Set        */
    __mtcr(CPU_PSW, PSWRegisterValue.U);                /* Set the Program Status Word (PSW) register               */
}
