/**********************************************************************************************************************
 * \file ADC_Filtering.c
 * \copyright Copyright (C) Infineon Technologies AG 2019
 *
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are solely in the form of
 * machine-executable object code generated by a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *********************************************************************************************************************/
/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/
#include "Ain_Filtering.h"
#include "Dma.h"
#include "Ain.h"
/*********************************************************************************************************************/
/*------------------------------------------------------Macros-------------------------------------------------------*/
/*********************************************************************************************************************/
/* Possible values for FIR/IIR filter coefficients:
 * --------------------------------------------------------------------------------------------------------
 * |          Average filter          | * |          FIR filter         | * |         IIR filter          |
 * ------------------------------------ * ------------------------------- * -------------------------------
 * | DMM | DRCTR | Accumulated values | * | DMM | DRCTR | COEFFICIENTS  | * | DMM | DRCTR | COEFFICIENTS  |
 * ------------------------------------ * ------------------------------- * -------------------------------
 * | 0x0 |  0x0  | Disabled           | * | 0x1 |  0x0  | a=2, b=1, c=0 | * | 0x1 |  0xE  | a=2, b=2      |
 * | 0x0 |  0x1  | 2 results average  | * | 0x1 |  0x1  | a=1, b=2, c=0 | * |>0x1 |  0xF  | a=3, b=4      |
 * | 0x0 |  0x2  | 3 results average  | * | 0x1 |  0x2  | a=2, b=0, c=1 | * |     |       |               |
 * |>0x0 |  0x3  | 4 results average  | * | 0x1 |  0x3  | a=1, b=1, c=1 | * |     |       |               |
 * | 0x0 |  0x2  | 5 results average  | * |>0x1 |  0x4  | a=1, b=0, c=2 | * |     |       |               |
 * | 0x0 |  0x2  | 6 results average  | * | 0x1 |  0x5  | a=3, b=1, c=0 | * |     |       |               |
 * | 0x0 |  0x2  | 7 results average  | * | 0x1 |  0x6  | a=2, b=2, c=0 | * |     |       |               |
 * | 0x0 |  0x2  | 8 results average  | * | 0x1 |  0x7  | a=1, b=3, c=0 | * |     |       |               |
 * | 0x0 |  0x2  | 9 results average  | * | 0x1 |  0x8  | a=3, b=0, c=1 | * |     |       |               |
 * | 0x0 |  0x2  | 10 results average | * | 0x1 |  0x9  | a=2, b=1, c=1 | * |     |       |               |
 * | 0x0 |  0x2  | 11 results average | * | 0x1 |  0xA  | a=1, b=2, c=1 | * |     |       |               |
 * | 0x0 |  0x2  | 12 results average | * | 0x1 |  0xB  | a=2, b=0, c=2 | * |     |       |               |
 * | 0x0 |  0x2  | 13 results average | * | 0x1 |  0xC  | a=1, b=1, c=2 | * |     |       |               |
 * | 0x0 |  0x2  | 14 results average | * | 0x1 |  0xD  | a=1, b=0, c=3 | * |     |       |               |
 * | 0x0 |  0x2  | 15 results average | * |     |       |               | * |     |       |               |
 * | 0x0 |  0x2  | 16 results average | * |     |       |               | * |     |       |               |
 * --------------------------------------------------------------------------------------------------------
 *
 * When selecting different coefficients, make sure to set the correct DIV_FACTOR.
 */
/*********************************************************************************************************************/
/*------------------------------------------------Function Prototypes------------------------------------------------*/
/*********************************************************************************************************************/
void Ain_Filtering_InitEvAdcModule(void);   /* Function to initialize the EVADC module with default parameters      */
void Ain_Filtering_InitEvAdcGroup(void);    /* Function to initialize the EVADC group                               */
void Ain_Filtering_InitEvAdcChannels(void); /* Function to initialize the EVADC used channels                       */
void Ain_Filtering_ApplyFiltering(void);    /* Function to apply the filters to the EVADC channels                  */
extern void Ain_QueuedScan_FillAndStartQueue(void); /* Function to add each channel to the queue and start it */
/*********************************************************************************************************************/
/*-------------------------------------------------Global variables--------------------------------------------------*/
/*********************************************************************************************************************/
/* Variables for the EVADC */
IfxEvadc_Adc g_evadc;                                     /* Global variable for configuring the EVADC module       */
IfxEvadc_Adc_Group g_evadcGroup;                          /* Global variable for configuring the EVADC group        */
IfxEvadc_Adc_Channel g_evadcChannel[CHANNELS_NUM];        /* Global array for configuring the EVADC channels        */
channel g_chn[] =
{
        {&IfxEvadc_G0CH0_AN0_IN,  IfxEvadc_ChannelResult_0},
        {&IfxEvadc_G0CH1_AN1_IN,  IfxEvadc_ChannelResult_1},
        {&IfxEvadc_G0CH2_AN2_IN,  IfxEvadc_ChannelResult_2},
        {&IfxEvadc_G0CH3_AN3_IN,  IfxEvadc_ChannelResult_3},
        {&IfxEvadc_G0CH4_AN4_IN,  IfxEvadc_ChannelResult_4},
        {&IfxEvadc_G0CH5_AN5_IN,  IfxEvadc_ChannelResult_5},
        {&IfxEvadc_G0CH6_AN6_IN,  IfxEvadc_ChannelResult_6},
        {&IfxEvadc_G0CH7_AN7_IN,  IfxEvadc_ChannelResult_7}
};
/*********************************************************************************************************************/
/*---------------------------------------------Function Implementations----------------------------------------------*/
/*********************************************************************************************************************/
/* Function to initialize the EVADC module */
void Ain_FilteringInit(void)
{
    Ain_Filtering_InitEvAdcModule();                                                  /* Initialize the EVADC module              */
    Ain_Filtering_InitEvAdcGroup();                                                   /* Initialize the EVADC group               */
    Ain_Filtering_InitEvAdcChannels();                                                /* Initialize the used channels             */
    Ain_Filtering_ApplyFiltering();                                                   /* Configure the Data Modification registers*/
    /* Start the scan */
    IfxEvadc_Adc_startQueue(&g_evadcGroup, IfxEvadc_RequestSource_queue0);
}
/* Function to initialize the EVADC module with default parameters */
void Ain_Filtering_InitEvAdcModule(void)
{
    IfxEvadc_Adc_Config adcConf;                                        /* Define a configuration structure         */
    IfxEvadc_Adc_initModuleConfig(&adcConf, &MODULE_EVADC);             /* Fill it with default values              */
    IfxEvadc_Adc_initModule(&g_evadc, &adcConf);                        /* Apply the default configuration          */
}
/* Function to initialize the EVADC group */
void Ain_Filtering_InitEvAdcGroup(void)
{
    /* Initialize the group */
    IfxEvadc_Adc_GroupConfig adcGroupConf;                              /* Define a configuration structure         */
    IfxEvadc_Adc_initGroupConfig(&adcGroupConf, &g_evadc);              /* Fill it with default values              */
    /* Enable queue 0 source */
    adcGroupConf.arbiter.requestSlotQueue0Enabled = TRUE;
    /* Enable the gate in "always" mode (no edge detection) */
    adcGroupConf.queueRequest[0].triggerConfig.gatingMode = IfxEvadc_GatingMode_always;
    /* Set the group 0 as master group */
    adcGroupConf.master = IfxEvadc_GroupId_0;
    /* Initialize the used group */
    adcGroupConf.groupId = IfxEvadc_GroupId_0;                          /* Select the group                         */
    /* Apply the configuration to the group */
    IfxEvadc_Adc_initGroup(&g_evadcGroup, &adcGroupConf);
}
/* Function to initialize the used EVADC channels */
void Ain_Filtering_InitEvAdcChannels(void)
{
    IfxEvadc_Adc_ChannelConfig adcChannelConf;                  /* Configuration structure                          */
    uint16 chnNum;

    for(chnNum = 0; chnNum < CHANNELS_NUM; chnNum++)            /* The channels included in g_chn are initialized   */
    {
        /* Fill the configuration with default values */
        IfxEvadc_Adc_initChannelConfig(&adcChannelConf, &g_evadcGroup);
        /* Set the channel ID and the corresponding result register */
        adcChannelConf.channelId = g_chn[chnNum].analogInput->channelId;
        adcChannelConf.resultRegister = g_chn[chnNum].resultRegister;
        adcChannelConf.resultPriority = DMA_CHANNEL;
        adcChannelConf.resultServProvider = IfxSrc_Tos_dma;
        /* Apply the channel configuration */
        IfxEvadc_Adc_initChannel(&g_evadcChannel[chnNum], &adcChannelConf);
        /* Add channel to queue with refill option enabled */
        IfxEvadc_Adc_addToQueue(&g_evadcChannel[chnNum], IfxEvadc_RequestSource_queue0, IFXEVADC_QUEUE_REFILL);
    }
}
/* Function to apply the filters to the EVADC channels */
void Ain_Filtering_ApplyFiltering(void)
{
    /* Apply a 1st-order Infinite Impulse Response Filter (IIR) to all six analog inputs (AN0 to AN5) */
    EVADC_G0_RCR0.B.DMM = IfxEvadc_DataModificationMode_resultFilteringMode;  /* Set Data Modification Mode to Result Filtering Mode */
    EVADC_G0_RCR0.B.DRCTR = IfxEvadc_DataReductionControlMode_15;             /* Configure RCR0 for IIR filter (a=3, b=4) for AN0 */
    EVADC_G0_RCR1.B.DMM = IfxEvadc_DataModificationMode_resultFilteringMode;  /* Set Data Modification Mode to Result Filtering Mode */
    EVADC_G0_RCR1.B.DRCTR = IfxEvadc_DataReductionControlMode_15;             /* Configure RCR1 for IIR filter (a=3, b=4) for AN1 */
    EVADC_G0_RCR2.B.DMM = IfxEvadc_DataModificationMode_resultFilteringMode;  /* Set Data Modification Mode to Result Filtering Mode */
    EVADC_G0_RCR2.B.DRCTR = IfxEvadc_DataReductionControlMode_15;             /* Configure RCR2 for IIR filter (a=3, b=4) for AN2 */
    EVADC_G0_RCR3.B.DMM = IfxEvadc_DataModificationMode_resultFilteringMode;  /* Set Data Modification Mode to Result Filtering Mode */
    EVADC_G0_RCR3.B.DRCTR = IfxEvadc_DataReductionControlMode_15;             /* Configure RCR3 for IIR filter (a=3, b=4) for AN3 */
    EVADC_G0_RCR4.B.DMM = IfxEvadc_DataModificationMode_resultFilteringMode;  /* Set Data Modification Mode to Result Filtering Mode */
    EVADC_G0_RCR4.B.DRCTR = IfxEvadc_DataReductionControlMode_15;             /* Configure RCR4 for IIR filter (a=3, b=4) for AN4 */
    EVADC_G0_RCR5.B.DMM = IfxEvadc_DataModificationMode_resultFilteringMode;  /* Set Data Modification Mode to Result Filtering Mode */
    EVADC_G0_RCR5.B.DRCTR = IfxEvadc_DataReductionControlMode_15;             /* Configure RCR5 for IIR filter (a=3, b=4) for AN5 */
    EVADC_G0_RCR6.B.DMM = IfxEvadc_DataModificationMode_resultFilteringMode;  /* Set Data Modification Mode to Result Filtering Mode */
    EVADC_G0_RCR6.B.DRCTR = IfxEvadc_DataReductionControlMode_15;             /* Configure RCR5 for IIR filter (a=3, b=4) for AN5 */
    EVADC_G0_RCR7.B.DMM = IfxEvadc_DataModificationMode_resultFilteringMode;  /* Set Data Modification Mode to Result Filtering Mode */
    EVADC_G0_RCR7.B.DRCTR = IfxEvadc_DataReductionControlMode_15;             /* Configure RCR5 for IIR filter (a=3, b=4) for AN5 */
}
