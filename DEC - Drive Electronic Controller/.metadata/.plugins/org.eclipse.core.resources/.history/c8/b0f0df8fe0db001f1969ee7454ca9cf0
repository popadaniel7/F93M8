/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/
#include "Ifx_Types.h"
#include "IfxCpu_reg.h"
#include "IfxMtu.h"
#include "IfxScuRcu.h"
#include "Ifx_Cfg_Trap.h"
#include "IfxDts_Dts.h"
/*********************************************************************************************************************/
/*------------------------------------------------------Macros-------------------------------------------------------*/
/*********************************************************************************************************************/
#define DPR_GRANULARITY                 8                           /* Data Protection Range granularity in bytes   */
#define CPR_GRANULARITY                 32                          /* Code Protection Range granularity in bytes   */
/* Data Protection Ranges */
#define DATA_PROTECTION_RANGE_0         0
#define DATA_PROTECTION_RANGE_1         1
#define DATA_PROTECTION_RANGE_2         2
#define DATA_PROTECTION_RANGE_3         3
#define DATA_PROTECTION_RANGE_4         4
#define DATA_PROTECTION_RANGE_5         5
#define DATA_PROTECTION_RANGE_6         6
#define DATA_PROTECTION_RANGE_7         7
#define DATA_PROTECTION_RANGE_8         8
#define DATA_PROTECTION_RANGE_9         9
#define DATA_PROTECTION_RANGE_10        10
#define DATA_PROTECTION_RANGE_11        11
#define DATA_PROTECTION_RANGE_12        12
#define DATA_PROTECTION_RANGE_13        13
#define DATA_PROTECTION_RANGE_14        14
#define DATA_PROTECTION_RANGE_15        15
#define DATA_PROTECTION_RANGE_16        16
#define DATA_PROTECTION_RANGE_17        17
/* Code Protection Ranges */
#define CODE_PROTECTION_RANGE_0         0
#define CODE_PROTECTION_RANGE_1         1
#define CODE_PROTECTION_RANGE_2         2
#define CODE_PROTECTION_RANGE_3         3
#define CODE_PROTECTION_RANGE_4         4
#define CODE_PROTECTION_RANGE_5         5
#define CODE_PROTECTION_RANGE_6         6
#define CODE_PROTECTION_RANGE_7         7
#define CODE_PROTECTION_RANGE_8         8
#define CODE_PROTECTION_RANGE_9         9
/* Protection Sets */
#define PROTECTION_SET_0                0
#define PROTECTION_SET_1                1
#define PROTECTION_SET_2                2
#define PROTECTION_SET_3                3
#define PROTECTION_SET_4                4
#define PROTECTION_SET_5                5
#define FIRST_ADDR                      0x00000000U
#define LAST_ADDR                       0xFFFFFFFFU
#define MBIST_TEST_RANGE_ENABLE         0x1U                                /* Enable range mode                        */
#define MBIST_TEST_LOWER_RANGE_LIMIT    0x00U                               /* Lower address range limit                */
#define MBIST_TEST_HIGHER_RANGE_LIMIT   0xFFU                               /* Higher address range limit               */
#define MTU_CLEAR_FAULTSTS_OPERR0_MSK   0x3E                                /* Mask for clearing bit 0 of OPERR bit-field in MCi_FAULTSTS (i=0-95) register        */
#define MIN_TEMP_LIMIT                  -40                                 /* Lower temperature limit              */
#define MAX_TEMP_LIMIT                  140U                                /* Upper temperature limit              */
#define RESET_SRC                       APPLICATION_RESET                   /* Macro used to set the type of software reset */
#define APPLICATION_RESET               IfxScuRcu_ResetType_application
#define SYSTEM_RESET                    IfxScuRcu_ResetType_system

extern uint8 g_isMeasureAvailable;  /* Variable to store availability of new measurements */
extern volatile Ifx_CSA McuSm_CSA_capture[IFXCPU_NUM_MODULES][CSA_CAPTURE_LIMIT];
extern volatile uint32 McuSm_STACK_capture[IFXCPU_NUM_MODULES][STACK_CAPTURE_LIMIT][STACK_CAPTURE_SIZE];
extern volatile Ifx_CPU_PIETR McuSm_PIETR_capture[IFXCPU_NUM_MODULES];
extern volatile Ifx_CPU_PIEAR McuSm_PIEAR_capture[IFXCPU_NUM_MODULES];
extern volatile Ifx_CPU_DIETR McuSm_DIETR_capture[IFXCPU_NUM_MODULES];
extern volatile Ifx_CPU_DIEAR McuSm_DIEAR_capture[IFXCPU_NUM_MODULES];
extern volatile Ifx_CPU_DATR McuSm_DATR_capture[IFXCPU_NUM_MODULES];
extern volatile Ifx_CPU_DEADD McuSm_DEADD_capture[IFXCPU_NUM_MODULES];
extern volatile Ifx_SMU_AG McuSm_AG_capture[IFXCPU_NUM_MODULES][12];
/*********************************************************************************************************************/
/*------------------------------------------------Function Prototypes------------------------------------------------*/
/*********************************************************************************************************************/
/* MPU control functions */
IFX_INLINE void McuSm_SetActiveProtectionSet(uint8 protectionSet);
extern void McuSm_InitializeBusMpu(void);
extern void McuSm_EnableBusMpu(void);
extern void McuSm_InitializeDataProtectionRange(uint32 lowerBoundAddress, uint32 upperBoundAddress, uint8 range);
extern void McuSm_InitializeCodeProtectionRange(uint32 lowerBoundAddress, uint32 upperBoundAddress, uint8 range);
extern void McuSm_EnableDataRead(uint8 protectionSet, uint8 range);
extern void McuSm_EnableDataWrite(uint8 protectionSet, uint8 range);
extern void McuSm_EnableCodeExecution(uint8 protectionSet, uint8 range);
extern void McuSm_MbistManager(void);
extern void McuSm_MbistTest(IfxMtu_MbistSel mbistSel);
extern uint32 McuSm_GetMbistErrors(IfxMtu_MbistSel mbistSel);
extern void McuSm_ClearMbistErrors(IfxMtu_MbistSel mbistSel);
extern void McuSm_PerformResetHook(uint32 resetReason, uint32 resetInformation);
/*********************************************************************************************************************/
/*---------------------------------------------Function Implementations----------------------------------------------*/
/*********************************************************************************************************************/
/* Function to set the given Protection Set as active.
 * This function needs to be declared as in-line because the Program Status Word (PSW) is one of the registers
 * automatically saved to the Context Save Area (CSA) when a function is called.
 * If this function was not declared as in-line, the Upper Context (16 registers including the PSW) would be
 * automatically saved to the CSA and re-loaded when the function return, thus losing the change in the PSW.
 */
IFX_INLINE void McuSm_SetActiveProtectionSet(uint8 protectionSet)
{
    Ifx_CPU_PSW PSWRegisterValue;
    PSWRegisterValue.U = __mfcr(CPU_PSW);               /* Get the Program Status Word (PSW) register value         */
    PSWRegisterValue.B.PRS = protectionSet;             /* Set the PRS bit-field to enable the Protection Set        */
    __mtcr(CPU_PSW, PSWRegisterValue.U);                /* Set the Program Status Word (PSW) register               */
}
