#include "Can.h"
#include "Irq.h"
#include "IfxCan.h"
#include "ComMaster.h"
#include "aurix_pin_mappings.h"
#include "DiagMaster.h"
#include "EncCal.h"
#include "Dcm.h"

McmcanType g_mcmcan;
Can_RxMsg_t Can_RxMessageBuffer[50u];
uint32 Can_BufferIndex_ReceivedMessages = 0u;
uint32 Can_MainCounter = 0u;
uint8 Can_BusOff_Flag = 0u;
uint8 Can_Alrt_Flag = 0u;
uint8 Can_Moer_Flag = 0u;
uint8 Can_Loi_Flag = 0u;
Can_Status_t Can_State = CAN_INIT;
Can_TransmitType_t Can_TransmitTable[COMMASTER_NO_TX_MSG];
Can_ReceiveType_t Can_ReceiveTable[COMMASTER_NO_RX_MSG];
uint32 Can_Rx_DiagBufCnt = 0u;
Can_RxMsg_t Can_Rx_DiagnosticBuffer[50u];
uint8 Can_ActivityOnTheBus = 0u;
uint8 Can_DedBuff = 0u;
uint8  isoTpRxBuffer[ISO_TP_MAX_PAYLOAD];  // Reassembly buffer for ISO-TP payload
uint16 isoTpRxLength = 0;                  // Number of bytes reassembled so far
uint16 isoTpRxExpectedLength = 0;          // Total expected payload length (from FF)
bool   isoTpRxInProgress = false;          // Flag: multi-frame reception ongoing
uint8  isoTpNextSeq = 0;                   // Next expected consecutive frame sequence
// Storage arrays for diagnostic data coming from the tester (Group B)
uint8 storedData_04[ENCCAL_CODING_SIZE];  // For sub-function 0x04
uint8 storedData_05[ENCCAL_CALIBRATION_SIZE];  // For sub-function 0x05
uint8 storedData_06[sizeof(EncCal_VOData_t)];  // For sub-function 0x06

extern uint8 SysMgr_Core0OnIdlePowerDown;

extern void McuSm_PerformResetHook(uint32 resetReason, uint32 resetInformation);

void Can_Init(void);
void Can_ReInitAfterError(void);
bool Can_Tx(McmcanType message);
void Can_Rx(void);
void Can_Sleep(void);
void Can_TransmitAllMessages(void);
void Can_ProcessReceivedMessages(void);
void Can_TransmitScheduleTable(void);
bool Can_IsoTp_SendFrame(uint16 canId, const uint8 *data, uint8 size);
void Can_MainFunction(void);
// ISO-TP transmit: sends a full ISO-TP message (single or multi-frame)
bool CanIsoTpTransmit(uint16 txId, const uint8 *data, uint16 length);
// ISO-TP processing for one incoming CAN frame
void Can_ProcessIsoTpMessage(const CanMsg *msg);
// Transmit a Flow Control frame in response to a First Frame
void Can_SendFlowControlFrame(void);

void Can_ReInitAfterError(void)
{
    IfxScuWdt_clearCpuEndinit(IfxScuWdt_getCpuWatchdogPassword());
    IfxScuWdt_clearSafetyEndinit(IfxScuWdt_getSafetyWatchdogPassword());
    IfxCan_Can_initModuleConfig(&g_mcmcan.canConfig, &MODULE_CAN0);
    IfxCan_Can_initModule(&g_mcmcan.canModule, &g_mcmcan.canConfig);
    IfxCan_Can_initNodeConfig(&g_mcmcan.canNodeConfig, &g_mcmcan.canModule);
    g_mcmcan.canNodeConfig.baudRate.baudrate = 500000u;
    g_mcmcan.canNodeConfig.baudRate.prescaler = 3u;
    g_mcmcan.canNodeConfig.baudRate.samplePoint = 8095;
    g_mcmcan.canNodeConfig.baudRate.syncJumpWidth = 0u;
    g_mcmcan.canNodeConfig.baudRate.timeSegment1 = 14u;
    g_mcmcan.canNodeConfig.baudRate.timeSegment2 = 3u;
    g_mcmcan.canNodeConfig.calculateBitTimingValues = FALSE;
    g_mcmcan.canNodeConfig.busLoopbackEnabled = FALSE;
    g_mcmcan.canNodeConfig.txConfig.txMode = IfxCan_TxMode_dedicatedBuffers;
    g_mcmcan.canNodeConfig.txConfig.dedicatedTxBuffersNumber = 63u;
    g_mcmcan.canNodeConfig.txConfig.txBufferDataFieldSize = IfxCan_DataFieldSize_8;
    g_mcmcan.canNodeConfig.frame.mode = IfxCan_FrameMode_standard;
    g_mcmcan.canNodeConfig.frame.type = IfxCan_FrameType_transmitAndReceive;
    g_mcmcan.canNodeConfig.nodeId = IfxCan_NodeId_0;
    g_mcmcan.canNodeConfig.rxConfig.rxMode = IfxCan_RxMode_dedicatedBuffers;
    g_mcmcan.canNodeConfig.rxConfig.rxBufferDataFieldSize = IfxCan_DataFieldSize_8;
    g_mcmcan.canNodeConfig.interruptConfig.messageRAMAccessFailureEnabled = TRUE;
    g_mcmcan.canNodeConfig.interruptConfig.timeoutOccurredEnabled = TRUE;
    g_mcmcan.canNodeConfig.interruptConfig.errorLoggingOverflowEnabled = TRUE;
    g_mcmcan.canNodeConfig.interruptConfig.errorPassiveEnabled = TRUE;
    g_mcmcan.canNodeConfig.interruptConfig.errorLoggingOverflowEnabled = TRUE;
    g_mcmcan.canNodeConfig.interruptConfig.warningStatusEnabled = TRUE;
    g_mcmcan.canNodeConfig.interruptConfig.busOffStatusEnabled = TRUE;
    g_mcmcan.canNodeConfig.interruptConfig.protocolErrorArbitrationEnabled = TRUE;
    g_mcmcan.canNodeConfig.interruptConfig.protocolErrorDataEnabled = TRUE;
    g_mcmcan.canNodeConfig.interruptConfig.alrt.priority = ISR_PRIORITY_CAN_ALRT;
    g_mcmcan.canNodeConfig.interruptConfig.alrt.interruptLine = IfxCan_InterruptLine_1;
    g_mcmcan.canNodeConfig.interruptConfig.alrt.typeOfService = IfxSrc_Tos_cpu0;
    g_mcmcan.canNodeConfig.interruptConfig.moer.priority = ISR_PRIORITY_CAN_MOER;
    g_mcmcan.canNodeConfig.interruptConfig.moer.interruptLine = IfxCan_InterruptLine_2;
    g_mcmcan.canNodeConfig.interruptConfig.moer.typeOfService = IfxSrc_Tos_cpu0;
    g_mcmcan.canNodeConfig.interruptConfig.boff.priority = ISR_PRIORITY_CAN_BOFF;
    g_mcmcan.canNodeConfig.interruptConfig.boff.interruptLine = IfxCan_InterruptLine_3;
    g_mcmcan.canNodeConfig.interruptConfig.boff.typeOfService = IfxSrc_Tos_cpu0;
    g_mcmcan.canNodeConfig.interruptConfig.loi.priority = ISR_PRIORITY_CAN_LOI;
    g_mcmcan.canNodeConfig.interruptConfig.loi.interruptLine = IfxCan_InterruptLine_4;
    g_mcmcan.canNodeConfig.interruptConfig.loi.typeOfService = IfxSrc_Tos_cpu0;
    g_mcmcan.canNodeConfig.interruptConfig.messageStoredToDedicatedRxBufferEnabled = TRUE;
    g_mcmcan.canNodeConfig.interruptConfig.reint.priority = IRQ_CANRX_CHANNEL;
    g_mcmcan.canNodeConfig.interruptConfig.reint.interruptLine = IfxCan_InterruptLine_0;
    g_mcmcan.canNodeConfig.interruptConfig.reint.typeOfService = IfxSrc_Tos_cpu0;
    /* Message RAM configuration */
    g_mcmcan.canNodeConfig.messageRAM.baseAddress = (uint32)(g_mcmcan.canNodeConfig.can);
    g_mcmcan.canNodeConfig.messageRAM.standardFilterListStartAddress = 0x0u;
    g_mcmcan.canNodeConfig.messageRAM.extendedFilterListStartAddress = 0x0u;
    g_mcmcan.canNodeConfig.messageRAM.rxFifo0StartAddress = 0x0u;
    g_mcmcan.canNodeConfig.messageRAM.rxFifo1StartAddress = 0x0u;
    g_mcmcan.canNodeConfig.messageRAM.rxBuffersStartAddress = 0x120;
    g_mcmcan.canNodeConfig.messageRAM.txEventFifoStartAddress = 0x0u;
    g_mcmcan.canNodeConfig.messageRAM.txBuffersStartAddress = 0x520u;
    /* Setup CAN node handles */
    g_mcmcan.canDstNode.can = &MODULE_CAN0;
    g_mcmcan.canDstNode.frameMode = IfxCan_FrameMode_standard;
    g_mcmcan.canSrcNode.can = &MODULE_CAN0;
    g_mcmcan.canSrcNode.frameMode = IfxCan_FrameMode_standard;
    g_mcmcan.canNodeConfig.filterConfig.messageIdLength = IfxCan_MessageIdLength_standard;
    g_mcmcan.canNodeConfig.filterConfig.standardListSize = 11u;
    g_mcmcan.canNodeConfig.filterConfig.extendedListSize = 0u;
    g_mcmcan.canNodeConfig.filterConfig.standardFilterForNonMatchingFrames = IfxCan_NonMatchingFrame_reject;
    g_mcmcan.canNodeConfig.filterConfig.extendedFilterForNonMatchingFrames = IfxCan_NonMatchingFrame_reject;
    g_mcmcan.canNodeConfig.filterConfig.rejectRemoteFramesWithStandardId = TRUE;
    g_mcmcan.canNodeConfig.filterConfig.rejectRemoteFramesWithExtendedId = TRUE;
    /* Initialize the node */
    IfxCan_Can_initNode(&g_mcmcan.canDstNode, &g_mcmcan.canNodeConfig);
    /* Apply the standard filter */
    g_mcmcan.canFilter.elementConfiguration = IfxCan_FilterElementConfiguration_storeInRxBuffer;
    g_mcmcan.canFilter.number = 0u;
    g_mcmcan.canFilter.id1 = 0x10Au;
    g_mcmcan.canFilter.rxBufferOffset = IfxCan_RxBufferId_0;
    IfxCan_Can_setStandardFilter(&g_mcmcan.canDstNode, &g_mcmcan.canFilter);
    g_mcmcan.canFilter.elementConfiguration = IfxCan_FilterElementConfiguration_storeInRxBuffer;
    g_mcmcan.canFilter.number = 1u;
    g_mcmcan.canFilter.id1 = 0x100u;
    g_mcmcan.canFilter.rxBufferOffset = IfxCan_RxBufferId_1;
    /* Apply the standard filter */
    IfxCan_Can_setStandardFilter(&g_mcmcan.canDstNode, &g_mcmcan.canFilter);
    g_mcmcan.canFilter.elementConfiguration = IfxCan_FilterElementConfiguration_storeInRxBuffer;
    g_mcmcan.canFilter.number = 2u;
    g_mcmcan.canFilter.id1 = 0x101u;
    g_mcmcan.canFilter.rxBufferOffset = IfxCan_RxBufferId_2;
    /* Apply the standard filter */
    IfxCan_Can_setStandardFilter(&g_mcmcan.canDstNode, &g_mcmcan.canFilter);
    g_mcmcan.canFilter.elementConfiguration = IfxCan_FilterElementConfiguration_storeInRxBuffer;
    g_mcmcan.canFilter.number = 3u;
    g_mcmcan.canFilter.id1 = 0x108u;
    g_mcmcan.canFilter.rxBufferOffset = IfxCan_RxBufferId_3;
    /* Apply the standard filter */
    IfxCan_Can_setStandardFilter(&g_mcmcan.canDstNode, &g_mcmcan.canFilter);
    g_mcmcan.canFilter.elementConfiguration = IfxCan_FilterElementConfiguration_storeInRxBuffer;
    g_mcmcan.canFilter.number = 4u;
    g_mcmcan.canFilter.id1 = 0x10Cu;
    g_mcmcan.canFilter.rxBufferOffset = IfxCan_RxBufferId_4;
    /* Apply the standard filter */
    IfxCan_Can_setStandardFilter(&g_mcmcan.canDstNode, &g_mcmcan.canFilter);
    g_mcmcan.canFilter.elementConfiguration = IfxCan_FilterElementConfiguration_storeInRxBuffer;
    g_mcmcan.canFilter.number = 5u;
    g_mcmcan.canFilter.id1 = 0x701u;
    g_mcmcan.canFilter.rxBufferOffset = IfxCan_RxBufferId_5;
    /* Apply the standard filter */
    IfxCan_Can_setStandardFilter(&g_mcmcan.canDstNode, &g_mcmcan.canFilter);
    g_mcmcan.canFilter.elementConfiguration = IfxCan_FilterElementConfiguration_storeInRxBuffer;
    g_mcmcan.canFilter.number = 6u;
    g_mcmcan.canFilter.id1 = 0x703u;
    g_mcmcan.canFilter.rxBufferOffset = IfxCan_RxBufferId_6;
    /* Apply the standard filter */
    IfxCan_Can_setStandardFilter(&g_mcmcan.canDstNode, &g_mcmcan.canFilter);
    g_mcmcan.canFilter.elementConfiguration = IfxCan_FilterElementConfiguration_storeInRxBuffer;
    g_mcmcan.canFilter.number = 7u;
    g_mcmcan.canFilter.id1 = 0x6FEu;
    g_mcmcan.canFilter.rxBufferOffset = IfxCan_RxBufferId_7;
    /* Apply the standard filter */
    IfxCan_Can_setStandardFilter(&g_mcmcan.canDstNode, &g_mcmcan.canFilter);
    g_mcmcan.canFilter.elementConfiguration = IfxCan_FilterElementConfiguration_storeInRxBuffer;
    g_mcmcan.canFilter.number = 8u;
    g_mcmcan.canFilter.id1 = 0x001u;
    g_mcmcan.canFilter.rxBufferOffset = IfxCan_RxBufferId_8;
    /* Apply the standard filter */
    IfxCan_Can_setStandardFilter(&g_mcmcan.canDstNode, &g_mcmcan.canFilter);
    IfxScuWdt_setCpuEndinit(IfxScuWdt_getCpuWatchdogPassword());
    IfxScuWdt_setSafetyEndinit(IfxScuWdt_getSafetyWatchdogPassword());
    Can_State = CAN_PROCESS_RXTX;
}
/* Function to initialize MCMCAN module and nodes related */
void Can_Init(void)
{
    Can_State = CAN_INIT;
    IfxScuWdt_clearCpuEndinit(IfxScuWdt_getCpuWatchdogPassword());
    IfxScuWdt_clearSafetyEndinit(IfxScuWdt_getSafetyWatchdogPassword());
    IfxPort_setPinModeOutput(&MODULE_P20, 6, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
    IfxPort_setPinLow(&MODULE_P20, 6);
    IfxCan_Can_initModuleConfig(&g_mcmcan.canConfig, &MODULE_CAN0);
    IfxCan_Can_initModule(&g_mcmcan.canModule, &g_mcmcan.canConfig);
    IfxCan_Can_initNodeConfig(&g_mcmcan.canNodeConfig, &g_mcmcan.canModule);
    IfxScuCcu_setMcanFrequency(40000000.0f);
    g_mcmcan.canNodeConfig.baudRate.baudrate = 500000u;
    g_mcmcan.canNodeConfig.baudRate.prescaler = 3u;
    g_mcmcan.canNodeConfig.baudRate.samplePoint = 8095;
    g_mcmcan.canNodeConfig.baudRate.syncJumpWidth = 0u;
    g_mcmcan.canNodeConfig.baudRate.timeSegment1 = 14u;
    g_mcmcan.canNodeConfig.baudRate.timeSegment2 = 3u;
    g_mcmcan.canNodeConfig.calculateBitTimingValues = FALSE;
    g_mcmcan.canNodeConfig.busLoopbackEnabled = FALSE;
    g_mcmcan.canNodeConfig.txConfig.txMode = IfxCan_TxMode_dedicatedBuffers;
    g_mcmcan.canNodeConfig.txConfig.dedicatedTxBuffersNumber = 63u;
    g_mcmcan.canNodeConfig.txConfig.txBufferDataFieldSize = IfxCan_DataFieldSize_8;
    g_mcmcan.canNodeConfig.frame.mode = IfxCan_FrameMode_standard;
    g_mcmcan.canNodeConfig.frame.type = IfxCan_FrameType_transmitAndReceive;
    g_mcmcan.canNodeConfig.nodeId = IfxCan_NodeId_0;
    g_mcmcan.canNodeConfig.rxConfig.rxMode = IfxCan_RxMode_dedicatedBuffers;
    g_mcmcan.canNodeConfig.rxConfig.rxBufferDataFieldSize = IfxCan_DataFieldSize_8;
    g_mcmcan.canNodeConfig.interruptConfig.messageRAMAccessFailureEnabled = TRUE;
    g_mcmcan.canNodeConfig.interruptConfig.timeoutOccurredEnabled = TRUE;
    g_mcmcan.canNodeConfig.interruptConfig.errorLoggingOverflowEnabled = TRUE;
    g_mcmcan.canNodeConfig.interruptConfig.errorPassiveEnabled = TRUE;
    g_mcmcan.canNodeConfig.interruptConfig.errorLoggingOverflowEnabled = TRUE;
    g_mcmcan.canNodeConfig.interruptConfig.warningStatusEnabled = TRUE;
    g_mcmcan.canNodeConfig.interruptConfig.busOffStatusEnabled = TRUE;
    g_mcmcan.canNodeConfig.interruptConfig.protocolErrorArbitrationEnabled = TRUE;
    g_mcmcan.canNodeConfig.interruptConfig.protocolErrorDataEnabled = TRUE;
    g_mcmcan.canNodeConfig.interruptConfig.alrt.priority = ISR_PRIORITY_CAN_ALRT;
    g_mcmcan.canNodeConfig.interruptConfig.alrt.interruptLine = IfxCan_InterruptLine_1;
    g_mcmcan.canNodeConfig.interruptConfig.alrt.typeOfService = IfxSrc_Tos_cpu0;
    g_mcmcan.canNodeConfig.interruptConfig.moer.priority = ISR_PRIORITY_CAN_MOER;
    g_mcmcan.canNodeConfig.interruptConfig.moer.interruptLine = IfxCan_InterruptLine_2;
    g_mcmcan.canNodeConfig.interruptConfig.moer.typeOfService = IfxSrc_Tos_cpu0;
    g_mcmcan.canNodeConfig.interruptConfig.boff.priority = ISR_PRIORITY_CAN_BOFF;
    g_mcmcan.canNodeConfig.interruptConfig.boff.interruptLine = IfxCan_InterruptLine_3;
    g_mcmcan.canNodeConfig.interruptConfig.boff.typeOfService = IfxSrc_Tos_cpu0;
    g_mcmcan.canNodeConfig.interruptConfig.loi.priority = ISR_PRIORITY_CAN_LOI;
    g_mcmcan.canNodeConfig.interruptConfig.loi.interruptLine = IfxCan_InterruptLine_4;
    g_mcmcan.canNodeConfig.interruptConfig.loi.typeOfService = IfxSrc_Tos_cpu0;
    g_mcmcan.canNodeConfig.interruptConfig.messageStoredToDedicatedRxBufferEnabled = TRUE;
    g_mcmcan.canNodeConfig.interruptConfig.reint.priority = IRQ_CANRX_CHANNEL;
    g_mcmcan.canNodeConfig.interruptConfig.reint.interruptLine = IfxCan_InterruptLine_0;
    g_mcmcan.canNodeConfig.interruptConfig.reint.typeOfService = IfxSrc_Tos_cpu0;
    /* Message RAM configuration */
    g_mcmcan.canNodeConfig.messageRAM.baseAddress = (uint32)(g_mcmcan.canNodeConfig.can);
    g_mcmcan.canNodeConfig.messageRAM.standardFilterListStartAddress = 0x0u;
    g_mcmcan.canNodeConfig.messageRAM.extendedFilterListStartAddress = 0x0u;
    g_mcmcan.canNodeConfig.messageRAM.rxFifo0StartAddress = 0x0u;
    g_mcmcan.canNodeConfig.messageRAM.rxFifo1StartAddress = 0x0u;
    g_mcmcan.canNodeConfig.messageRAM.rxBuffersStartAddress = 0x120;
    g_mcmcan.canNodeConfig.messageRAM.txEventFifoStartAddress = 0x0u;
    g_mcmcan.canNodeConfig.messageRAM.txBuffersStartAddress = 0x520u;
    /* Setup CAN node handles */
    g_mcmcan.canDstNode.can = &MODULE_CAN0;
    g_mcmcan.canDstNode.frameMode = IfxCan_FrameMode_standard;
    g_mcmcan.canSrcNode.can = &MODULE_CAN0;
    g_mcmcan.canSrcNode.frameMode = IfxCan_FrameMode_standard;
    g_mcmcan.canNodeConfig.filterConfig.messageIdLength = IfxCan_MessageIdLength_standard;
    g_mcmcan.canNodeConfig.filterConfig.standardListSize = 17u;
    g_mcmcan.canNodeConfig.filterConfig.extendedListSize = 0u;
    g_mcmcan.canNodeConfig.filterConfig.standardFilterForNonMatchingFrames = IfxCan_NonMatchingFrame_reject;
    g_mcmcan.canNodeConfig.filterConfig.extendedFilterForNonMatchingFrames = IfxCan_NonMatchingFrame_reject;
    g_mcmcan.canNodeConfig.filterConfig.rejectRemoteFramesWithStandardId = TRUE;
    g_mcmcan.canNodeConfig.filterConfig.rejectRemoteFramesWithExtendedId = TRUE;
    /* Initialize the node */
    IfxCan_Can_initNode(&g_mcmcan.canDstNode, &g_mcmcan.canNodeConfig);
    /* Apply the standard filter */
    g_mcmcan.canFilter.elementConfiguration = IfxCan_FilterElementConfiguration_storeInRxBuffer;
    g_mcmcan.canFilter.number = 7u;
    g_mcmcan.canFilter.id1 = 0x10Au;
    g_mcmcan.canFilter.rxBufferOffset = IfxCan_RxBufferId_7;
    IfxCan_Can_setStandardFilter(&g_mcmcan.canDstNode, &g_mcmcan.canFilter);
    g_mcmcan.canFilter.elementConfiguration = IfxCan_FilterElementConfiguration_storeInRxBuffer;
    g_mcmcan.canFilter.number = 1u;
    g_mcmcan.canFilter.id1 = 0x100u;
    g_mcmcan.canFilter.rxBufferOffset = IfxCan_RxBufferId_1;
    /* Apply the standard filter */
    IfxCan_Can_setStandardFilter(&g_mcmcan.canDstNode, &g_mcmcan.canFilter);
    g_mcmcan.canFilter.elementConfiguration = IfxCan_FilterElementConfiguration_storeInRxBuffer;
    g_mcmcan.canFilter.number = 2u;
    g_mcmcan.canFilter.id1 = 0x101u;
    g_mcmcan.canFilter.rxBufferOffset = IfxCan_RxBufferId_2;
    /* Apply the standard filter */
    IfxCan_Can_setStandardFilter(&g_mcmcan.canDstNode, &g_mcmcan.canFilter);
    g_mcmcan.canFilter.elementConfiguration = IfxCan_FilterElementConfiguration_storeInRxBuffer;
    g_mcmcan.canFilter.number = 3u;
    g_mcmcan.canFilter.id1 = 0x108u;
    g_mcmcan.canFilter.rxBufferOffset = IfxCan_RxBufferId_3;
    /* Apply the standard filter */
    IfxCan_Can_setStandardFilter(&g_mcmcan.canDstNode, &g_mcmcan.canFilter);
    g_mcmcan.canFilter.elementConfiguration = IfxCan_FilterElementConfiguration_storeInRxBuffer;
    g_mcmcan.canFilter.number = 4u;
    g_mcmcan.canFilter.id1 = 0x10Cu;
    g_mcmcan.canFilter.rxBufferOffset = IfxCan_RxBufferId_4;
    /* Apply the standard filter */
    IfxCan_Can_setStandardFilter(&g_mcmcan.canDstNode, &g_mcmcan.canFilter);
    g_mcmcan.canFilter.elementConfiguration = IfxCan_FilterElementConfiguration_storeInRxBuffer;
    g_mcmcan.canFilter.number = 5u;
    g_mcmcan.canFilter.id1 = 0x701u;
    g_mcmcan.canFilter.rxBufferOffset = IfxCan_RxBufferId_5;
    /* Apply the standard filter */
    IfxCan_Can_setStandardFilter(&g_mcmcan.canDstNode, &g_mcmcan.canFilter);
    g_mcmcan.canFilter.elementConfiguration = IfxCan_FilterElementConfiguration_storeInRxBuffer;
    g_mcmcan.canFilter.number = 6u;
    g_mcmcan.canFilter.id1 = 0x703u;
    g_mcmcan.canFilter.rxBufferOffset = IfxCan_RxBufferId_6;
    /* Apply the standard filter */
    IfxCan_Can_setStandardFilter(&g_mcmcan.canDstNode, &g_mcmcan.canFilter);
    g_mcmcan.canFilter.elementConfiguration = IfxCan_FilterElementConfiguration_storeInRxBuffer;
    g_mcmcan.canFilter.number = 0u;
    g_mcmcan.canFilter.id1 = 0x6FEu;
    g_mcmcan.canFilter.rxBufferOffset = IfxCan_RxBufferId_0;
    /* Apply the standard filter */
    IfxCan_Can_setStandardFilter(&g_mcmcan.canDstNode, &g_mcmcan.canFilter);
    g_mcmcan.canFilter.elementConfiguration = IfxCan_FilterElementConfiguration_storeInRxBuffer;
    g_mcmcan.canFilter.number = 8u;
    g_mcmcan.canFilter.id1 = 0x001u;
    g_mcmcan.canFilter.rxBufferOffset = IfxCan_RxBufferId_8;
    /* Apply the standard filter */
    IfxCan_Can_setStandardFilter(&g_mcmcan.canDstNode, &g_mcmcan.canFilter);
    IfxCan_Node_initRxPin(g_mcmcan.canDstNode.node, &IfxCan_RXD00B_P20_7_IN, IfxPort_Mode_inputPullUp, IfxPort_PadDriver_cmosAutomotiveSpeed1);
    IfxCan_Node_initTxPin(&IfxCan_TXD00_P20_8_OUT, IfxPort_OutputMode_pushPull, IfxPort_PadDriver_cmosAutomotiveSpeed4);
    IfxScuWdt_setCpuEndinit(IfxScuWdt_getCpuWatchdogPassword());
    IfxScuWdt_setSafetyEndinit(IfxScuWdt_getSafetyWatchdogPassword());
    Can_State = CAN_INIT_SUCCESFUL;
}
/* Function to initialize both TX and RX messages with the default data values.
 * After initialization of the messages, the TX message is transmitted.
 */
bool Can_Tx(McmcanType message)
{
    if(0x000u == message.txMsg.messageId) __debug();
    return IfxCan_Can_sendMessage(&message.canDstNode, &message.txMsg, (uint32*)message.txData);
}

void Can_Rx(void)
{
    if(1u == SysMgr_Core0OnIdlePowerDown)
    {
        SysMgr_Core0OnIdlePowerDown = 0u;
        McuSm_PerformResetHook(0xEFEFU, 0u);
    }
    else
    {
        /* Do nothing. */
    }

    if(1u == Can_DedBuff)
    {
        IfxCan_Node_clearInterruptFlag(g_mcmcan.canDstNode.node, IfxCan_Interrupt_messageStoredToDedicatedRxBuffer);
        Can_DedBuff = 0u;
    }
    else
    {
        /* Do nothing. */
    }

    for(uint8 i = 0u ; i < 9u; i ++)
    {
        /* Read the received CAN message */
        g_mcmcan.rxMsg.bufferNumber = i;
        if(1U == IfxCan_Can_isNewDataReceived(&g_mcmcan.canDstNode, i))
        {
            IfxCan_Can_readMessage(&g_mcmcan.canDstNode, &g_mcmcan.rxMsg, (uint32*)&g_mcmcan.rxData[0u]);
        }
        else
        {
            IfxCan_Node_clearRxBufferNewDataFlag(g_mcmcan.canDstNode.node, i);
        }

        if(0x6FEU == g_mcmcan.rxMsg.messageId)
        {
            if(0x10u <= g_mcmcan.rxData[0u] ||
                    (((0x10 > g_mcmcan.rxData[0u])
                                            && (0x19u == g_mcmcan.rxData[1u]))
                                            || (0x31 == g_mcmcan.rxData[1u]
                                                                        && (0x14 == g_mcmcan.rxData[4u] ||
                                                                                0x15 == g_mcmcan.rxData[4u] ||
                                                                                0x16 == g_mcmcan.rxData[4u] ||
                                                                                0x04 == g_mcmcan.rxData[4u]))))
            {
                if(1u <= DiagMaster_DiagnosticModeActivated)
                {
                    CanMsg msg;
                    for(uint8 k = 0u; k < 8u; k++) msg.data[k] = g_mcmcan.rxData[k];
                    msg.id = (uint16)g_mcmcan.rxMsg.messageId;
                    msg.dlc = g_mcmcan.rxMsg.dataLengthCode;
                    Can_ProcessIsoTpMessage(&msg);
                    memset(g_mcmcan.rxData, 0u, sizeof(g_mcmcan.rxData));
                    g_mcmcan.rxMsg.messageId = 0u;
                }
                else
                {
                    /* Do nothing.*/
                }
            }
            else
            {
                /* Do nothing.*/
            }
        }
        else
        {
            /* Do nothing. */
        }

        if(0u != g_mcmcan.rxMsg.messageId && 50u > Can_BufferIndex_ReceivedMessages)
        {
            IfxCan_Node_clearRxBufferNewDataFlag(g_mcmcan.canDstNode.node, i);
            Can_RxMessageBuffer[Can_BufferIndex_ReceivedMessages].rxMsg = g_mcmcan.rxMsg;
            memcpy(Can_RxMessageBuffer[Can_BufferIndex_ReceivedMessages].rxData, g_mcmcan.rxData, sizeof(g_mcmcan.rxData));
            memset(g_mcmcan.rxData, 0u, sizeof(g_mcmcan.rxData));
            g_mcmcan.rxMsg.messageId = 0u;
            Can_BufferIndex_ReceivedMessages++;
            Can_ActivityOnTheBus = 1u;            
        }
        else
        {
            /* Do nothing. */
        }
    }
}

void Can_ProcessIsoTpMessage(const CanMsg *msg)
{
    // Extract the Protocol Control Information (PCI) type
    uint8 pciType = msg->data[0u] & 0xF0u;

    if (pciType == 0x00u)
    {
        // ----- Single Frame (SF) -----
        // Lower nibble contains data length (max 7 bytes)
        uint8 sfDataLength = msg->data[0u] & 0x0Fu;

        if (msg->dlc < (1u + sfDataLength))
        {
            // Invalid frame length; ignore message.
            return;
        }
        else
        {
            /* Do nothing. */
        }
        // Copy the payload bytes from SF (starting at index 1) into the reassembly buffer.
        memcpy(isoTpRxBuffer, &msg->data[1u], sfDataLength);
        isoTpRxLength = sfDataLength;
        isoTpRxInProgress = false;  // Single frame; no further frames expected.
        // Now process the complete diagnostic request.
        Dcm_ProcessDiagnosticRequest(isoTpRxBuffer, isoTpRxLength);
    }
    else if (pciType == 0x10u)
    {
        // ----- First Frame (FF) -----
        // The first 12 bits give the total message length.
        uint16 totalLength = ((msg->data[0u] & 0x0Fu) << 8u) | msg->data[1u];

        isoTpRxExpectedLength = totalLength;
        // The remaining data in this frame (bytes 2..dlc-1) is the start of the payload.

        uint8 firstFrameDataLength = (msg->dlc > 2u) ? (msg->dlc - 2u) : 0u;

        memcpy(isoTpRxBuffer, &msg->data[2u], firstFrameDataLength);
        isoTpRxLength = firstFrameDataLength;
        isoTpRxInProgress = true;
        isoTpNextSeq = 1u;  // Expect sequence number 1 in the next Consecutive Frame.
        // Send a Flow Control (FC) frame to the tester to allow transmission of the remaining frames.
        Can_SendFlowControlFrame();
    }
    else if (pciType == 0x20u)
    {
        // ----- Consecutive Frame (CF) -----
        if (!isoTpRxInProgress)
        {
            // No multi-frame transfer in progress; ignore this CF.
            return;
        }
        else
        {
            /* Do nothing. */
        }

        uint8 seqNumber = msg->data[0u] & 0x0Fu;

        if (seqNumber != isoTpNextSeq)
        {
            // Sequence mismatch detected: abort the ISO-TP reception.
            isoTpRxInProgress = false;
            isoTpRxLength = 0u;
            return;
        }
        else
        {
            /* Do nothing. */
        }
        // Data in CF starts at index 1.
        uint8 cfDataLength = (msg->dlc > 1u) ? (msg->dlc - 1u) : 0u;
        memcpy(&isoTpRxBuffer[isoTpRxLength], &msg->data[1u], cfDataLength);
        isoTpRxLength += cfDataLength;
        // Update expected sequence number (wrap around every 16 frames)
        isoTpNextSeq = (isoTpNextSeq + 1u) & 0x0Fu;
        // Check if the full payload has been reassembled.
        if(isoTpRxLength >= isoTpRxExpectedLength)
        {
            // Reassembly complete: process the diagnostic request.
            Dcm_ProcessDiagnosticRequest(isoTpRxBuffer, isoTpRxExpectedLength);
            isoTpRxInProgress = false;
        }
    }
    else if (pciType == 0x30u)
    {
        // ----- Flow Control (FC) -----
        // In this implementation, FC frames are not expected on the tester request channel.
        // So simply ignore them.
    }
    else
    {
        /* Do nothing. */
    }
}

void Can_SendFlowControlFrame(void)
{
    uint8 fcFrame[8u] = {0u};
    fcFrame[0u] = 0x30u; // Flow Control: 0x3 (FC) with status "CTS" in lower nibble (0x0)
    fcFrame[1u] = 0x00u; // Block Size = 0 (no block limit)
    fcFrame[2u] = 0x00u; // STmin = 0 ms separation time
    // Transmit the FC frame from ECU diagnostic ID (0x6FF) to tester (0x6FE)
    Can_IsoTp_SendFrame(0x6FF, fcFrame, 3u);
}

bool CanIsoTpTransmit(uint16 txId, const uint8 *data, uint16 length)
{
    // If the payload length is 7 bytes or less, send as a Single Frame.
    if (length <= 7u)
    {
        uint8 frame[8u] = {0u};
        // Set PCI: Single Frame with payload length in lower nibble.
        frame[0u] = (uint8)(length & 0x0Fu);
        memcpy(&frame[1u], data, length);
        return Can_IsoTp_SendFrame(txId, frame, (uint8)(length + 1u));
    }
    else
    {
        // ----- Multi-frame Transmission -----
        // Prepare and send the First Frame (FF)
        uint8 ff[8u] = {0u};
        // PCI for First Frame: 0x10 in high nibble and the high 4 bits of length.
        ff[0u] = 0x10u | ((length >> 8u) & 0x0Fu);
        ff[1u] = length & 0xFFu;
        // Copy up to 6 bytes of payload into the FF.
        uint8 bytesInFF = (length >= 6u) ? 6u : (uint8)length;
        memcpy(&ff[2u], data, bytesInFF);
        if (!Can_IsoTp_SendFrame(txId, ff, 8u))
        {
            return false;
        }
        else
        {
            /* Do nothing. */
        }

        uint16 bytesSent = bytesInFF;
        uint8 seqNumber = 1u;
        // In a full implementation, you would wait for a Flow Control frame here.
        // For this demo, we assume the tester accepts our transmission immediately.
        while (bytesSent < length)
        {
            uint8 cf[8u] = {0u};
            // PCI for Consecutive Frame: 0x20 with sequence number in lower nibble.
            cf[0u] = 0x20u | (seqNumber & 0x0Fu);

            uint8 bytesToSend = (length - bytesSent > 7u) ? 7u : (length - bytesSent);

            memcpy(&cf[1], &data[bytesSent], bytesToSend);
            if (!Can_IsoTp_SendFrame(txId, cf, bytesToSend + 1u))
            {
                return false;
            }
            else
            {
                /* Do nothing. */
            }
            bytesSent += bytesToSend;
            seqNumber = (seqNumber + 1u) & 0x0Fu;
        }
        return true;
    }
}


void Can_TransmitAllMessages(void)
{
    IfxCpu_disableInterrupts();
    memcpy(Can_TransmitTable, ComMaster_TransmitTable, sizeof(Can_TransmitType_t));
    IfxCpu_enableInterrupts();
    for(uint8 i = 0u; i < COMMASTER_NO_TX_MSG; i++)
    {
        if(1u == Can_TransmitTable[i].transmitFlag)
        {
            IfxCpu_disableInterrupts();
            g_mcmcan.txMsg = Can_TransmitTable[i].transmitMessage.txMsg;
            memcpy(g_mcmcan.txData, Can_TransmitTable[i].transmitMessage.txData, sizeof(Can_TransmitTable[i].transmitMessage.txData));
            IfxCpu_enableInterrupts();
            Can_Tx(g_mcmcan);
            Can_TransmitTable[i].transmitFlag = 0u;
        }
        else
        {
            /* Do nothing. */
        }
    }
}

void Can_ProcessReceivedMessages(void)
{
    IfxCpu_disableInterrupts();
    for(uint8 i = 0u; i < Can_BufferIndex_ReceivedMessages; i++)
    {
        switch(Can_RxMessageBuffer[i].rxMsg.messageId)
        {
            case 0x001u:
                Can_ReceiveTable[5u].receiveMessage.rxMsg = Can_RxMessageBuffer[i].rxMsg;
                memcpy(Can_ReceiveTable[5u].receiveMessage.rxData, Can_RxMessageBuffer[i].rxData, sizeof(Can_RxMessageBuffer[i].rxData));
                break;
            case 0x100u:
                Can_ReceiveTable[0u].receiveMessage.rxMsg = Can_RxMessageBuffer[i].rxMsg;
                memcpy(Can_ReceiveTable[0u].receiveMessage.rxData, Can_RxMessageBuffer[i].rxData, sizeof(Can_RxMessageBuffer[i].rxData));
                break;
            case 0x101u:
                Can_ReceiveTable[1u].receiveMessage.rxMsg = Can_RxMessageBuffer[i].rxMsg;
                memcpy(Can_ReceiveTable[1u].receiveMessage.rxData, Can_RxMessageBuffer[i].rxData, sizeof(Can_RxMessageBuffer[i].rxData));
                break;
            case 0x108u:
                Can_ReceiveTable[2u].receiveMessage.rxMsg = Can_RxMessageBuffer[i].rxMsg;
                memcpy(Can_ReceiveTable[2u].receiveMessage.rxData, Can_RxMessageBuffer[i].rxData, sizeof(Can_RxMessageBuffer[i].rxData));
                break;
            case 0x10Au:
                Can_ReceiveTable[3u].receiveMessage.rxMsg = Can_RxMessageBuffer[i].rxMsg;
                memcpy(Can_ReceiveTable[3u].receiveMessage.rxData, Can_RxMessageBuffer[i].rxData, sizeof(Can_RxMessageBuffer[i].rxData));
                break;
            case 0x10Cu:
                Can_ReceiveTable[4u].receiveMessage.rxMsg = Can_RxMessageBuffer[i].rxMsg;
                memcpy(Can_ReceiveTable[4u].receiveMessage.rxData, Can_RxMessageBuffer[i].rxData, sizeof(Can_RxMessageBuffer[i].rxData));
                break;
            case 0x701u:
                Can_Rx_DiagnosticBuffer[Can_Rx_DiagBufCnt].rxMsg = Can_RxMessageBuffer[i].rxMsg;
                memcpy(Can_Rx_DiagnosticBuffer[Can_Rx_DiagBufCnt].rxData, Can_RxMessageBuffer[i].rxData, sizeof(Can_RxMessageBuffer[i].rxData));
                Can_Rx_DiagBufCnt++;
                break;
            case 0x703u:
                Can_Rx_DiagnosticBuffer[Can_Rx_DiagBufCnt].rxMsg = Can_RxMessageBuffer[i].rxMsg;
                memcpy(Can_Rx_DiagnosticBuffer[Can_Rx_DiagBufCnt].rxData, Can_RxMessageBuffer[i].rxData, sizeof(Can_RxMessageBuffer[i].rxData));
                Can_Rx_DiagBufCnt++;
                break;
            case 0x6FEu:
                Can_Rx_DiagnosticBuffer[Can_Rx_DiagBufCnt].rxMsg = Can_RxMessageBuffer[i].rxMsg;
                memcpy(Can_Rx_DiagnosticBuffer[Can_Rx_DiagBufCnt].rxData, Can_RxMessageBuffer[i].rxData, sizeof(Can_RxMessageBuffer[i].rxData));
                Can_Rx_DiagBufCnt++;
                break;
            default:
                break;
        }
        memset(&Can_RxMessageBuffer[i], 0u, sizeof(Can_RxMessageBuffer[i]));
    }
    memcpy(&DiagMaster_Receive_DiagnosticMessageBuffer->diagnosticMessage,
            &Can_Rx_DiagnosticBuffer,
            sizeof(DiagMaster_Receive_DiagnosticMessageBuffer));
    memset(&Can_Rx_DiagnosticBuffer,
            0u,
            sizeof(Can_Rx_DiagnosticBuffer));
    DiagMaster_Rx_DiagBufCnt = Can_Rx_DiagBufCnt;
    Can_Rx_DiagBufCnt = 0u;
    Can_BufferIndex_ReceivedMessages = 0u;
    IfxCpu_enableInterrupts();
}

void Can_TransmitScheduleTable(void)
{
    IfxCpu_disableInterrupts();
    for(uint8 i = 0u; i < COMMASTER_NO_TX_MSG; i++)
    {
        if(1u == Can_TransmitTable[i].transmitFlag)
        {
            g_mcmcan.txMsg = Can_TransmitTable[i].transmitMessage.txMsg;
            memcpy(g_mcmcan.txData, Can_TransmitTable[i].transmitMessage.txData, sizeof(Can_TransmitTable[i].transmitMessage.txData));
            Can_TransmitTable[i].transmitFlag = 0u;
            Can_Tx(g_mcmcan);
            for(uint8 j = 0u; j < COMMASTER_NO_TX_MSG; j++)
            {
                Can_TransmitTable[i].transmitMessage.txData[j] = 0u;
            }
        }
        else
        {
            /* Do nothing. */
        }
    }
    IfxCpu_enableInterrupts();
}

void Can_Sleep(void)
{
    Can_ReInitAfterError();
    IfxCan_setSleepMode(g_mcmcan.canModule.can, TRUE);
}

void Can_MainFunction(void)
{
    static uint8 localBusOff = 0u;
    static uint8 localWarningStatus = 0u;

    localBusOff = IfxCan_Node_getBusOffStatus(g_mcmcan.canDstNode.node);
    localWarningStatus = IfxCan_Node_getWarningStatus(g_mcmcan.canDstNode.node);

    if(0u != localBusOff || 0u != localWarningStatus)
    {
        Can_ReInitAfterError();
    }
    else
    {
        /* Do nothing. */
    }

    switch(Can_State)
    {
        case CAN_INIT_SUCCESFUL:
            Can_State = CAN_FIRST_TRANSMIT;
            break;
        case CAN_FIRST_TRANSMIT:
            Can_TransmitAllMessages();
            Can_State = CAN_PROCESS_RXTX;
            break;
        case CAN_PROCESS_RXTX:
            Can_ProcessReceivedMessages();
            Can_TransmitScheduleTable();
            break;
        default:
            break;
    }

    Can_MainCounter++;
}

bool Can_IsoTp_SendFrame(uint16 canId, const uint8 *data, uint8 size)
{
    McmcanType localMcmcan;
    bool status = false;
    IfxCpu_disableInterrupts();
    memcpy(&localMcmcan, &g_mcmcan, sizeof(g_mcmcan));
    IfxCan_Can_initMessage(&localMcmcan.txMsg);
    localMcmcan.txMsg.messageId = canId;
    localMcmcan.txMsg.dataLengthCode = size;
    for(uint8 i = 0u; i < size; i++) localMcmcan.txData[i] = data[i];
    status = Can_Tx(localMcmcan);
    IfxCpu_enableInterrupts();
    return status;
}
