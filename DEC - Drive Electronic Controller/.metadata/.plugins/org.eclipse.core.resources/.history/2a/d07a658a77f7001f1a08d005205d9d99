#include "Scr_Io_sdcc.h"
#include "Scr_Scu_sdcc.h"
#include "Scr_Rtc_sdcc.h"
#include "Scr_Irq_sdcc.h"

__at(0x1600) uint8 Scr_WakeupReason;
__at(0x1601) uint8 Scr_Counter;
__at(0x1602) uint8 Scr_IsrCounter1;
__at(0x1603) uint8 Scr_IsrCounter2;

void Scr_WCAN_Interrupt(void) __interrupt (ECAN);
void Scr_NMIECC_Interrupt(void) __interrupt (NMIRAMECC);

void main()
{
    //    SCR_SCU_PAGE = 0x01u;                   // switch to page 1
    //    SCR_PMCON1 = 0x49u;                     // switch OCDS
    //    SCR_SCU_PAGE = 0x00u;                   // switch to page 0
    //    SCR_IO_PAGE = 0x02u;                    // switch to IO Page 2
    //    SCR_P01_PDISC = 0x00;                   // enable all P01 pins
    //    SCR_MODPISEL0 = 0x00;                   // select WCANRXDA
    //    SCR_IEN1 = 0x01u;                       // select EWCAN interrupt
    //    SCR_NMICON = 0x01u;                     // select NMI ECC interrupt
    //    SCR_IO_PAGE = 0x01u;                    // switch to IO Page 1
    //    SCR_P01_IOCR2 = 0x20u;                  // configure P33.10 / P01.2 as input pull-up
    //    SCR_WCAN_PAGE = 0x00u;                  // switch to WCAN Page 0
    //    SCR_WCAN_CFG = 0x09u;                   // set WCAN_EN to 1, SELWK_EN to 0, CCE to 1
    //    SCR_WCAN_CFG = 0x01u;                   // set WCAN_EN to 1, SELWK_EN to 0, CCE to 0
    //    SCR_WCAN_INTMRSLT = 0x0CU;              // set WUFMASK to 1, WUPMASK to 1
    //    SCR_WCAN_CFG = 0x07u;                   // set WCAN_EN to 1, SELWK_EN to 3, CCE to 0
    //    SCR_WCAN_PAGE = 0x01u;                  // switch to WCAN Page 1
    //    while(SCR_WCAN_INTESTAT0 != 0x01u);     // check if configuration is fine
    //    while(SCR_WCAN_INTESTAT1 != 0x04u);     // check if configuration is fine

    char result = 0;
    unsigned char volatile TempVar = 0;

    /////////////////////////////////////////////////////////////////////////////
    // Setup WCAN as wakeup source
    /////////////////////////////////////////////////////////////////////////////

    // Program SCU for CAN wakeup
    // Set pads to input mode, pull-up enable
    SCR_IO_PAGE = 0x1;
    // Pull-up control before enable
    SCR_P00_IOCR2 = 0x20 ; // WCANRXDG(P33.02)

    SCR_IO_PAGE = 0x2;
    SCR_P00_PDISC = 0x04 ; // WCANRXDG(P33.02)

    SCR_SCU_PAGE = 0x1;
    SCR_SCU_RSTCON = 0x1 ; // Disable WDT and ECC reset
    SCR_SCU_STDBYWKP = 0x4; // Select WCAN as wakeup source

    /* From SCR ITS
     * 17.2.5 WCAN Initialization Sequence
     * 1. Set CFG.SCR_WCAN_EN = 1
     * 2. Set CFG.CCE = 1
     * 3. Configure CDR,CAN FD and Baud Rate Configuration registers
     * 4. Reset CFG.CCE = 0
     * 5. Reset CFG.SELWK_EN = 0
     * 6. Configure WUF Configuration registers
     * 7. Set CFG.SELWK_EN = 1
     * 8. Wait until INTESTAT0.SWKACK = 1
     */

    /**************************
     * 1. Set CFG.SCR_WCAN_EN = 1
     * 2. Set CFG.CCE = 1
     **************************/
    SCR_SCU_PAGE = 1;
    SCR_PMCON1 &= ~(1<< 3); // enable WCAN clock (bit_3), default: WCAN is disabled

    SCR_SCU_PAGE = 0x2;
    //TempVar = SCR_MODPISEL0 & MaskWCANRXDIS; // Mask WCAN bits
    SCR_MODPISEL0 = 16;//TempVar | (SetWCANRXDG<<4); // Enable CAN on P33.02

    SCR_WCAN_PAGE = 0x0 ;
    SCR_WCAN_CFG = (1<<3)|(0<<2)|(1<<0) ; // CCE=1, SELWK_EN=0, WCAN_EN=1 --> according to UM
    SCR_WCAN_INTMRSLT = (0<<3)|(1<<2)|(0<<1)|(0<<0); // WUP=0, WUF=1, ERR=0, CANTO=0 --> enable WUF interrupt

    /*****************************************************************
     * 3. Configure CDR,CAN FD and Baud Rate Configuration registers
     *****************************************************************/
    SCR_WCAN_PAGE = 0x1;
    SCR_WCAN_DLC_CTRL = 0x8 ; // 8 bytes of data
    SCR_WCAN_BTL1_CTRL = 0x64 ; // Configure Baud Rate of 500 kbits/s (see table 747 and register WCAN_BTL2_CTRL)
    SCR_WCAN_BTL2_CTRL = (1<<6) | (0x33<<0) ; // BRP=01(Divide by 2) and SP=0x33 represents ~80%SP

    /*****************************
     * 4. Reset CFG.CCE = 0
     * 5. Reset CFG.SELWK_EN = 0
     *****************************/
    SCR_WCAN_PAGE = 0x0 ;
    SCR_WCAN_CFG &= ~((1<<3)|(1<<2)|(0<<0)); // reset CCE=1, SELWK_EN=1, WCAN_EN=0 according to UM

    /********************************************
     * 6. Configure WUF Configuration registers
     ********************************************/
    SCR_WCAN_PAGE = 0x2 ;
    SCR_WCAN_ID0_CTRL = 0x00 ; // ID = 0x555 (11-bit)
    SCR_WCAN_ID1_CTRL = 0x00 ;
    SCR_WCAN_ID2_CTRL = 0x54 ;
    SCR_WCAN_ID3_CTRL = 0x54 ; // RTR=0 ; IDE = 0

    SCR_WCAN_MASK_ID0_CTRL = 0xFF ;
    SCR_WCAN_MASK_ID1_CTRL = 0xFF ;
    SCR_WCAN_MASK_ID2_CTRL = 0xFF ;
    SCR_WCAN_MASK_ID3_CTRL = 0xFF ;

    SCR_WCAN_PAGE = 0x3 ;
    SCR_WCAN_DATA7_CTRL = 0x01 ; // Data Frame = 0x01 23 45 67 89 ab cd ef (byte8...byte1)
    SCR_WCAN_DATA6_CTRL = 0x23 ;
    SCR_WCAN_DATA5_CTRL = 0x45 ;
    SCR_WCAN_DATA4_CTRL = 0x67 ;
    SCR_WCAN_DATA3_CTRL = 0x89 ;
    SCR_WCAN_DATA2_CTRL = 0xab ;
    SCR_WCAN_DATA1_CTRL = 0xcd ;
    SCR_WCAN_DATA0_CTRL = 0xef ;

    /********************************************
     * 7. Set CFG.SELWK_EN = 1
     ********************************************/
    SCR_WCAN_PAGE = 0x0 ;
    SCR_WCAN_CFG |= ((0<<3)|(1<<2)|(0<<0)); //set CCE=0, SELWK_EN=1, WCAN_EN=0

    /********************************************
     * 8. Wait until INTESTAT0.SWKACK = 1
     ********************************************/
    SCR_WCAN_PAGE = 0x1 ;
    while ((SCR_WCAN_INTESTAT0 & 0x1) != 0x1) { } ; // selective wake up enable protocol handle is activated

    while(1)
    {
        Scr_Counter++;
    }
}

void Scr_WCAN_Interrupt(void) __interrupt (ECAN)
        {
    Scr_IsrCounter1++;
    Scr_WakeupReason = 0x01u;
    SCR_SCU_PAGE = 0x01u;           // set SCU PAGE to 1
    SCR_SCU_STDBYWKP = 0x11u;       // request SCRWKP and ECCWKSEL
        }

void Scr_NMIECC_Interrupt(void) __interrupt (NMIRAMECC)
        {
    Scr_IsrCounter2++;
    Scr_WakeupReason = 0x02u;
    SCR_SCU_PAGE = 0x01u;           // set SCU PAGE to 1
    SCR_SCU_STDBYWKP = 0x05u;       // request SCRWKP and WCANWKSEL
        }
