#include "Ifx_Types.h"
#include "EncCal.h"

#define NVM_MAX_BLOCKS              3u
#define DFLASH_EMPTY_WORD           0xFFFFFFFFu
#define NVM_HEADER_SIZE_U32         (7u)/* Compute header size in uint32 units (header fields except data payload) */
/* Header: crc, blockId, blockSize, blockStatus, markedForReadAll, markedForWriteAll, padding */

typedef struct
{
        uint32 crc;
        /* The data follows in flash, whose length is in blockSize */
        /* Instead of storing a pointer (which is not valid in flash), we store blockSize and use Nvm_BlockList separately */
        uint16 blockId;
        uint16 blockSize; /* Number of uint32 words */
        uint8 blockStatus;
        uint8 markedForReadAll;
        uint8 markedForWriteAll;
        uint8 padding;
} Nvm_BlockHeaderType;
/* In RAM, we have a list of persistent blocks info. */
typedef struct
{
        Nvm_BlockHeaderType header;
        uint32* actualBlockValues;
} Nvm_BlockType;

extern uint32 ActiveSectorAddress = DFLASH_STARTING_ADDRESS; /* Active Sector */
extern uint32 InactiveSectorAddress = ((DFLASH_STARTING_ADDRESS == 0u) ? (DFLASH_STARTING_ADDRESS + DFLASH_SECTOR_SIZE) : DFLASH_STARTING_ADDRESS);
/* Flag indicating if the inactive sector is erased and ready */
extern uint8 InactiveSectorReady = 0u;
extern Nvm_BlockType Nvm_BlockList[NVM_MAX_BLOCKS] =
{
        {{0u, 1u, (uint16)ENCCAL_CALIBRATION_SIZE, 0u, 1u, 0u, 0u}, EncCal_Calibration_Buffer},
        {{0u, 2u, (uint16)ENCCAL_CODING_SIZE, 0u, 1u, 0u, 0u}, (uint32*)EncCal_Coding_Buffer},
        {{0u, 3u, (uint16)sizeof(EncCal_VODataComplete)/sizeof(uint32), 0u, 1u, 0u, 0u}, (uint32*)&EncCal_VODataComplete},
};
uint8 Nvm_WriteAllFinished = 0u;
uint8 Nvm_ReadAllFinished = 0u;

extern void Nvm_SwitchActiveSector(void);
extern uint32 Nvm_CalculateCrc(uint32 *data, uint32 length);
extern uint32 Nvm_FindBlockAddress(uint32 blockId);
extern uint32 Nvm_FindNextWriteAddress(void);
extern void Nvm_RestorePersistentBlocks(uint32 newSectorAddress);
extern void Nvm_SwitchActiveSector(void);
extern void Nvm_WriteBlock(uint16 blockId, uint32 *data, uint16 length);
extern void Nvm_ReadBlock(uint32 blockId, uint32 *data, uint32 length);
extern void Nvm_WriteAll(void);
extern void Nvm_ReadAll(void);
extern void Nvm_LoadDefaults(void);
extern uint8 Nvm_GetBlockStatus(uint32 blockId);
extern uint32 Nvm_GetBlockCrc(uint32 blockId);
