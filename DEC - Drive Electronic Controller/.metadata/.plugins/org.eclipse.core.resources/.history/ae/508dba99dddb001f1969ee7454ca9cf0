/**********************************************************************************************************************
 * \file ERU_Interrupt.c
 * \copyright Copyright (C) Infineon Technologies AG 2019
 *
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are solely in the form of
 * machine-executable object code generated by a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *********************************************************************************************************************/

/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/
#include "Eru.h"
#include "Irq.h"
/*********************************************************************************************************************/
/*------------------------------------------------------Macros-------------------------------------------------------*/
/*********************************************************************************************************************/
#define REQ_IN                      &IfxScu_REQ4A_P33_7_IN   /* External request pin for Encoder A */
#define TRIGGER_PIN                 &MODULE_P33,7            /* Physical pin connected to Encoder A */
#define REQ_IN2                     &IfxScu_REQ6D_P11_10_IN   /* External request pin for Encoder B */
#define TRIGGER_PIN2                &MODULE_P11,10            /* Physical pin connected to Encoder B */
#define REQ_IN3                     &IfxScu_REQ0A_P15_4_IN   /* External request pin for Encoder A */
#define TRIGGER_PIN3                &MODULE_P15,4            /* Physical pin connected to Encoder A */
#define REQ_IN4                     &IfxScu_REQ0C_P00_4_IN   /* External request pin for Encoder B */
#define TRIGGER_PIN4                &MODULE_P00,4            /* Physical pin connected to Encoder B */
/*********************************************************************************************************************/
/*-------------------------------------------------Global variables--------------------------------------------------*/
/*********************************************************************************************************************/
ERUconfig g_ERUconfig;   /* ERU configuration for Encoder A */
ERUconfig g_ERUconfig2;   /* ERU configuration for Encoder B */
ERUconfig g_ERUconfig3;   /* ERU configuration */
ERUconfig g_ERUconfig4;   /* ERU configuration */
/* Global Variables for Encoder */
volatile sint32 encoderCount = 0u;
volatile sint8 direction = 0u; // 1 for forward, -1 for backward
volatile uint8 lastEncodedA = 0u;
volatile uint8 lastEncodedB = 0u;
uint32 Eru_PpsSpeedSenStat = 0u;
uint8 Eru_TempSenStat = 0u;
/*********************************************************************************************************************/
/*----------------------------------------------Function Implementations---------------------------------------------*/
/*********************************************************************************************************************/
/* Macro to define Interrupt Service Routine.
 * This macro makes the following definitions:
 * 1) Define linker section as .intvec_tc<vector number>_<interrupt priority>.
 * 2) Define compiler specific attribute for the interrupt functions.
 * 3) Define the Interrupt Service Routine as ISR function.
 *
 * IFX_INTERRUPT(isr, vectabNum, priority)
 *  - isr: Name of the ISR function.
 *  - vectabNum: Vector table number.
 *  - priority: Interrupt priority. Refer Usage of Interrupt Macro for more details.
 */
void Eru_Init(void);
void Eru_EncoderA(void);
void Eru_EncoderB(void);
void Eru_SpeedSen(void);
void Eru_TempSen(void);

void Eru_SpeedSen(void)
{
    IfxScuEru_clearEventFlag(g_ERUconfig3.inputChannel);
    IfxSrc_clearRequest(g_ERUconfig3.src);
    Eru_PpsSpeedSenStat++;
}

void Eru_TempSen(void)
{
    IfxScuEru_clearEventFlag(g_ERUconfig4.inputChannel);
    IfxSrc_clearRequest(g_ERUconfig4.src);
    Eru_TempSenStat = !Eru_TempSenStat;
}
/* This functions initializes the output pin for the LED and the pin which toggles the state for generating
 * the falling and rising edges which are used to trigger the interrupt.
 * Additionally this function is configuring the ERU module including the service request configuration */
void Eru_Init(void)
{
    /* Initialize pins which are used to trigger and visualize the interrupt and set the default states */
    IfxPort_setPinMode(TRIGGER_PIN, IfxPort_Mode_inputPullUp);              /* Initialize TRIGGER_PIN port pin  */
    IfxPort_setPinMode(TRIGGER_PIN2, IfxPort_Mode_inputPullUp);              /* Initialize TRIGGER_PIN port pin  */
    IfxPort_setPinMode(TRIGGER_PIN3, IfxPort_Mode_inputPullUp);              /* Initialize TRIGGER_PIN port pin  */
    IfxPort_setPinMode(TRIGGER_PIN4, IfxPort_Mode_inputPullUp);              /* Initialize TRIGGER_PIN port pin  */
    /* Trigger pin */
    g_ERUconfig.reqPin = REQ_IN; /* Select external request pin */
    g_ERUconfig2.reqPin = REQ_IN2;
    g_ERUconfig3.reqPin = REQ_IN3; /* Select external request pin */
    g_ERUconfig4.reqPin = REQ_IN4;
    /* Initialize this pin with pull-down enabled
     * This function will also configure the input multiplexers of the ERU (Register EXISx)
     */
    IfxScuEru_initReqPin(g_ERUconfig.reqPin, IfxPort_InputMode_pullDown);
    IfxScuEru_initReqPin(g_ERUconfig2.reqPin, IfxPort_InputMode_pullDown);
    IfxScuEru_initReqPin(g_ERUconfig3.reqPin, IfxPort_InputMode_pullDown);
    IfxScuEru_initReqPin(g_ERUconfig4.reqPin, IfxPort_InputMode_pullDown);
    /* Determine input channel depending on input pin */
    g_ERUconfig.inputChannel = (IfxScuEru_InputChannel) g_ERUconfig.reqPin->channelId;
    g_ERUconfig2.inputChannel = (IfxScuEru_InputChannel) g_ERUconfig2.reqPin->channelId;
    g_ERUconfig3.inputChannel = (IfxScuEru_InputChannel) g_ERUconfig3.reqPin->channelId;
    g_ERUconfig4.inputChannel = (IfxScuEru_InputChannel) g_ERUconfig4.reqPin->channelId;
    /* Input channel configuration */
    IfxScuEru_enableRisingEdgeDetection(g_ERUconfig.inputChannel);          /* Interrupt triggers on rising edge (Register RENx) and  */
    IfxScuEru_enableFallingEdgeDetection(g_ERUconfig.inputChannel);         /* on falling edge (Register FENx)  */
    IfxScuEru_enableRisingEdgeDetection(g_ERUconfig2.inputChannel);          /* Interrupt triggers on rising edge (Register RENx) and  */
    IfxScuEru_enableFallingEdgeDetection(g_ERUconfig2.inputChannel);         /* on falling edge (Register FENx)  */
    IfxScuEru_enableRisingEdgeDetection(g_ERUconfig3.inputChannel);          /* Interrupt triggers on rising edge (Register RENx) and  */
    IfxScuEru_enableFallingEdgeDetection(g_ERUconfig3.inputChannel);         /* on falling edge (Register FENx)  */
    IfxScuEru_enableRisingEdgeDetection(g_ERUconfig4.inputChannel);          /* Interrupt triggers on rising edge (Register RENx) and  */
    IfxScuEru_enableFallingEdgeDetection(g_ERUconfig4.inputChannel);         /* on falling edge (Register FENx)  */
    /* Signal destination */
    g_ERUconfig.outputChannel = IfxScuEru_OutputChannel_0;                  /* OGU channel 0                    */
    g_ERUconfig2.outputChannel = IfxScuEru_OutputChannel_1;                  /* OGU channel 1                    */
    g_ERUconfig3.outputChannel = IfxScuEru_OutputChannel_2;                  /* OGU channel 0                    */
    g_ERUconfig4.outputChannel = IfxScuEru_OutputChannel_3;                  /* OGU channel 1                    */
    /* Event from input ETL0 triggers output OGU0 (signal TRx0) */
    g_ERUconfig.triggerSelect = IfxScuEru_InputNodePointer_0;
    g_ERUconfig2.triggerSelect = IfxScuEru_InputNodePointer_1;
    g_ERUconfig3.triggerSelect = IfxScuEru_InputNodePointer_0;
    g_ERUconfig4.triggerSelect = IfxScuEru_InputNodePointer_1;
    /* Connecting Matrix, Event Trigger Logic ETL block */
    /* Enable generation of trigger event (Register EIENx) */
    IfxScuEru_enableTriggerPulse(g_ERUconfig.inputChannel);
    IfxScuEru_enableTriggerPulse(g_ERUconfig2.inputChannel);
    IfxScuEru_enableTriggerPulse(g_ERUconfig3.inputChannel);
    IfxScuEru_enableTriggerPulse(g_ERUconfig4.inputChannel);
    /* Determination of output channel for trigger event (Register INPx) */
    IfxScuEru_connectTrigger(g_ERUconfig.inputChannel, g_ERUconfig.triggerSelect);
    IfxScuEru_connectTrigger(g_ERUconfig2.inputChannel, g_ERUconfig2.triggerSelect);
    IfxScuEru_connectTrigger(g_ERUconfig3.inputChannel, g_ERUconfig3.triggerSelect);
    IfxScuEru_connectTrigger(g_ERUconfig4.inputChannel, g_ERUconfig4.triggerSelect);
    /* Configure Output channels, OutputGating Unit OGU (Register IGPy) */
    IfxScuEru_setInterruptGatingPattern(g_ERUconfig.outputChannel, IfxScuEru_InterruptGatingPattern_alwaysActive);
    IfxScuEru_setInterruptGatingPattern(g_ERUconfig2.outputChannel, IfxScuEru_InterruptGatingPattern_alwaysActive);
    IfxScuEru_setInterruptGatingPattern(g_ERUconfig3.outputChannel, IfxScuEru_InterruptGatingPattern_alwaysActive);
    IfxScuEru_setInterruptGatingPattern(g_ERUconfig4.outputChannel, IfxScuEru_InterruptGatingPattern_alwaysActive);
    /* Service request configuration */
    /* Get source pointer depending on outputChannel (SRC_SCUERU0 for outputChannel0) */
    g_ERUconfig.src = &MODULE_SRC.SCU.SCUERU[(int) g_ERUconfig.outputChannel % 8];
    g_ERUconfig2.src = &MODULE_SRC.SCU.SCUERU[(int) g_ERUconfig2.outputChannel % 8];
    g_ERUconfig3.src = &MODULE_SRC.SCU.SCUERU[(int) g_ERUconfig3.outputChannel % 8];
    g_ERUconfig4.src = &MODULE_SRC.SCU.SCUERU[(int) g_ERUconfig4.outputChannel % 8];
    IfxSrc_init(g_ERUconfig.src, IfxSrc_Tos_cpu0, ISR_PRIORITY_SCUERU_INT0);
    IfxSrc_enable(g_ERUconfig.src);
    IfxSrc_init(g_ERUconfig2.src, IfxSrc_Tos_cpu0, ISR_PRIORITY_SCUERU_INT1);
    IfxSrc_enable(g_ERUconfig2.src);
    IfxSrc_init(g_ERUconfig3.src, IfxSrc_Tos_cpu0, ISR_PRIORITY_SCUERU_INT3);
    IfxSrc_enable(g_ERUconfig3.src);
    IfxSrc_init(g_ERUconfig4.src, IfxSrc_Tos_cpu0, ISR_PRIORITY_SCUERU_INT4);
    IfxSrc_enable(g_ERUconfig4.src);
}

void Eru_EncoderA(void)
{
    /* Clear the interrupt flag for Encoder A */
    IfxScuEru_clearEventFlag(g_ERUconfig.inputChannel);
    IfxSrc_clearRequest(g_ERUconfig.src);
    /* Read current state of Encoder A and Encoder B */
    uint8 A = IfxPort_getPinState(TRIGGER_PIN); /* Read Encoder A state */
    uint8 B = IfxPort_getPinState(TRIGGER_PIN2); /* Read Encoder B state */
    /* Encode current state */
    uint8 encoded = (A << 1) | B;
    /* Compute state transition */
    uint8 sum = (lastEncodedA << 2) | encoded;
    /* Quadrature decoding logic */
    switch(sum)
    {
        case 0x01:
        case 0x02:
        case 0x04:
        case 0x0B:
            encoderCount++;
            direction = 1; // Forward
            break;
        case 0x0E:
        case 0x07:
        case 0x03:
        case 0x08:
            encoderCount--;
            direction = -1; // Backward
            break;
        default:
            // Invalid transition, can be ignored or handled as needed
            break;
    }
    /* Update lastEncoded */
    lastEncodedA = encoded;
}

void Eru_EncoderB(void)
{
    /* Clear the interrupt flag for Encoder B */
    IfxScuEru_clearEventFlag(g_ERUconfig2.inputChannel);
    IfxSrc_clearRequest(g_ERUconfig2.src);
    /* Read current state of Encoder A and Encoder B */
    uint8 A = IfxPort_getPinState(TRIGGER_PIN); /* Read Encoder A state */
    uint8 B = IfxPort_getPinState(TRIGGER_PIN2); /* Read Encoder B state */
    /* Encode current state */
    uint8 encoded = (A << 1) | B;
    /* Compute state transition */
    uint8 sum = (lastEncodedB << 2) | encoded;
    /* Quadrature decoding logic */
    switch(sum)
    {
        case 0x01:
        case 0x02:
        case 0x04:
        case 0x0B:
            encoderCount++;
            direction = 1; // Forward
            break;
        case 0x0E:
        case 0x07:
        case 0x03:
        case 0x08:
            encoderCount--;
            direction = -1; // Backward
            break;
        default:
            // Invalid transition, can be ignored or handled as needed
            break;
    }
    /* Update lastEncoded */
    lastEncodedB = encoded;
}
