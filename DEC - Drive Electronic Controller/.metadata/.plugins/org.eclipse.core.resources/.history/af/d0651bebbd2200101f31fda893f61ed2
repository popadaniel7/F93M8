/**********************************************************************************************************************
 * \file SafetyKit_SSW_03_MCU_STARTUP.c
 * \copyright Copyright (C) Infineon Technologies AG 2019
 *
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are solely in the form of
 * machine-executable object code generated by a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *********************************************************************************************************************/
/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/
#include "SafetyKit_SSW_03_MCU_STARTUP.h"
#include "SafetyKit_Main.h"
#include "IfxFce_reg.h"
/*********************************************************************************************************************/
/*------------------------------------------------------Macros-------------------------------------------------------*/
/*********************************************************************************************************************/
#define MCU_STARTUP_EXPECTED_CRC 0x32CB1E1C//0xB4F361B7
/*********************************************************************************************************************/
/*-------------------------------------------------Data Structures---------------------------------------------------*/
/*********************************************************************************************************************/
typedef struct
{
        volatile Ifx_UReg_32Bit* regUnderTest;
        uint32  mask;
} McuStartupType;

const McuStartupType mcuStartupCheck [] =
{
        /* regUnderTest,                mask        */
        { &DMU_HP_PROCONP00.U,       0xFFFFFFFFU     },
        { &DMU_HP_PROCONP01.U,       0xFFFFFFFFU     },
        { &DMU_HP_PROCONP02.U,       0xFFFFFFFFU     },
        { &DMU_HP_PROCONP03.U,       0xFFFFFFFFU     },
        { &DMU_HP_PROCONP04.U,       0xFFFFFFFFU     },
        { &DMU_HP_PROCONP04.U,       0xFFFFFFFFU     },
        { &DMU_HP_PROCONP05.U,       0xFFFFFFFFU     },
        { &DMU_HP_PROCONP10.U,       0xFFFFFFFFU     },
        { &DMU_HP_PROCONP11.U,       0xFFFFFFFFU     },
        { &DMU_HP_PROCONP12.U,       0xFFFFFFFFU     },
        { &DMU_HP_PROCONP13.U,       0xFFFFFFFFU     },
        { &DMU_HP_PROCONP14.U,       0xFFFFFFFFU     },
        { &DMU_HP_PROCONP15.U,       0xFFFFFFFFU     },
        { &DMU_HF_PROCONPF.U,        0x80000000U     },
        { &DMU_HF_PROCONUSR.U,       0xFFFFFFFFU     },
        { &DMU_HF_PROCONDF.U,        0xFFFFFFFFU     },
        { &DMU_HF_PROCONRAM.U,       0xFFFFFFFFU     },
        { &DMU_HF_PROCONDBG.U,       0xFFFFFFFFU     }, /* only if in use */
        { &DMU_SP_PROCONHSM.U,       0xFFFFFFFFU     }, /* only if in use */
        { &DMU_SF_PROCONUSR.U,       0xFFFFFFFFU     },
        { &DMU_SP_PROCONHSMCBS.U,    0xFFFFFFFFU     }, /* only if in use */
        { &DMU_SP_PROCONHSMCX0.U,    0xFFFFFFFFU     }, /* only if in use */
        { &DMU_SP_PROCONHSMCX1.U,    0xFFFFFFFFU     }, /* only if in use */
        { &DMU_SP_PROCONHSMCOTP0.U,  0xFFFFFFFFU     }, /* only if in use */
        { &DMU_SP_PROCONHSMCOTP1.U,  0xFFFFFFFFU     }, /* only if in use */
        { &DMU_SP_PROCONHSMCFG.U,    0xFFFFFFFFU     }, /* only if in use */
        { &DMU_HP_PROCONOTP00.U,     0xFFFFFFFFU     },
        { &DMU_HP_PROCONOTP01.U,     0xFFFFFFFFU     },
        { &DMU_HP_PROCONOTP02.U,     0xFFFFFFFFU     },
        { &DMU_HP_PROCONOTP03.U,     0xFFFFFFFFU     },
        { &DMU_HP_PROCONOTP04.U,     0xFFFFFFFFU     },
        { &DMU_HP_PROCONOTP05.U,     0xFFFFFFFFU     },
        { &DMU_HP_PROCONOTP10.U,     0xFFFFFFFFU     },
        { &DMU_HP_PROCONOTP11.U,     0xFFFFFFFFU     },
        { &DMU_HP_PROCONOTP12.U,     0xFFFFFFFFU     },
        { &DMU_HP_PROCONOTP13.U,     0xFFFFFFFFU     },
        { &DMU_HP_PROCONOTP14.U,     0xFFFFFFFFU     },
        { &DMU_HP_PROCONOTP15.U,     0xFFFFFFFFU     },
        { &DMU_HP_PROCONWOP00.U,     0xFFFFFFFFU     },
        { &DMU_HP_PROCONWOP01.U,     0xFFFFFFFFU     },
        { &DMU_HP_PROCONWOP02.U,     0xFFFFFFFFU     },
        { &DMU_HP_PROCONWOP03.U,     0xFFFFFFFFU     },
        { &DMU_HP_PROCONWOP04.U,     0xFFFFFFFFU     },
        { &DMU_HP_PROCONWOP05.U,     0xFFFFFFFFU     },
        { &DMU_HP_PROCONWOP10.U,     0xFFFFFFFFU     },
        { &DMU_HP_PROCONWOP11.U,     0xFFFFFFFFU     },
        { &DMU_HP_PROCONWOP12.U,     0xFFFFFFFFU     },
        { &DMU_HP_PROCONWOP13.U,     0xFFFFFFFFU     },
        { &DMU_HP_PROCONWOP14.U,     0xFFFFFFFFU     },
        { &DMU_HP_PROCONWOP15.U,     0xFFFFFFFFU     },
        { &DMU_HF_PROCONTP.U,        0xFFFFFFFFU     },
        { &SCU_STSTAT.U,             0x000000FFU     }, /*Exception for TC33x and TC32 -> PMSWSTAT.HWCFGEVR.U */
};
const int mcuStartupCheckSize = sizeof(mcuStartupCheck) / sizeof (McuStartupType);
/*********************************************************************************************************************/
/*-------------------------------------------------Global variables--------------------------------------------------*/
/*********************************************************************************************************************/
/*********************************************************************************************************************/
/*------------------------------------------------Function Prototypes------------------------------------------------*/
/*********************************************************************************************************************/
void initFCE(void);
uint32 calculateCRC32P4(uint32 seedVal, uint32 inputData);
/*********************************************************************************************************************/
/*---------------------------------------------Function Implementations----------------------------------------------*/
/*********************************************************************************************************************/
/*
 * SM:MCU_STARTUP
 * */
void safetyKitSswMcuStartup(void)
{
    /* Initialize FCE module for CRC calculation
     * Note: FCE module is used as there is a CRC instruction bug with the TASKING compiler version used in ADS */
    initFCE();
    /* Set crc_value to initial seed value */
    uint32 initialSeed = 0xFFFFFFFF;
    uint32 crcValue    = initialSeed;
    /* And start to calculate the CRC value for all register values */
    for(uint8 i = 0; i < mcuStartupCheckSize; i++)
    {
        uint32 currentRegValue = *(volatile uint32 *)mcuStartupCheck[i].regUnderTest;
        crcValue = calculateCRC32P4(crcValue, (currentRegValue & mcuStartupCheck[i].mask));
    }
    /* If value is not as expected appropriate reaction shall be taken */
    if(crcValue != MCU_STARTUP_EXPECTED_CRC)
    {
        g_SafetyKitStatus.sswStatus.mcuStartupStatus = failed;
    }
    else
    {
        g_SafetyKitStatus.sswStatus.mcuStartupStatus = passed;
    }
}
/*---------------------------------------------------------------------------------------------*/
/*                                           FCE                                               */
/*---------------------------------------------------------------------------------------------*/
/*
 * Initialize Kernel 1 of FCE module for AUTOSAR safety polynomial CRC32P4
 * */
void initFCE(void)
{
    uint16 password = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(password);
    /* Enable FCE */
    FCE_CLC.B.DISR = 0x0;

    Ifx_FCE_IN_CFG fcecfg;

    fcecfg.U = 0;
    fcecfg.B.KERNEL     = 1;    /* For AUTOSAR safety polynomial CRC32P4 */
    fcecfg.B.XSEL       = 1;    /* XOR with 0xFFFFFFFF */
    fcecfg.B.REFIN      = 1;    /* Reflect input */
    fcecfg.B.REFOUT     = 1;    /* Reflect output */
    FCE_CFG0.U = fcecfg.U;

    IfxScuWdt_setCpuEndinit(password);
}
/*
 * Note: FCE module is used as there is a CRC instruction bug with the TASKING compiler version used in ADS
 * */
uint32 calculateCRC32P4(uint32 seedVal, uint32 inputData)
{
    /* Set CRC initial value (seed) */
    FCE_CRC0.U = seedVal;
    /* Write input_val into the FCE input register */
    FCE_IN0_IR.U = inputData;
    /* Return the calculated CRC result */
    return FCE_IN0_RES.U;
}
