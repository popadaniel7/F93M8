/*
 * FreeRTOS_core0 Kernel V10.5.1
 * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
 *
 * SPDX-License-Identifier: MIT
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * https://www.FreeRTOS_core0.org
 * https://github.com/FreeRTOS_core0
 *
 */

/* Standard includes. */
#include <stdlib.h>
#include <string.h>

/* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE_core0 prevents task_core0.h from redefining
 * all the API functions to use the MPU wrappers.  That should only be done when
 * task_core0.h is included from an application file. */
#define MPU_WRAPPERS_INCLUDED_FROM_API_FILE_core0

/* FreeRTOS_core0 includes. */
#include "FreeRTOS_core0.h"
#include "task_core0.h"
#include "timers_core0.h"
#include "stack_macros_core0.h"

/* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
 * because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE_core0 to be defined
 * for the header files above, but not in this file, in order to generate the
 * correct privileged Vs unprivileged linkage and placement. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE_core0 /*lint !e961 !e750 !e9021. */

/* Set configUSE_STATS_FORMATTING_FUNCTIONS_core0 to 2 to include the stats formatting
 * functions but without including stdio.h here. */
#if ( configUSE_STATS_FORMATTING_FUNCTIONS_core0 == 1 )

/* At the bottom of this file are two optional functions that can be used
 * to generate human readable text from the raw data generated by the
 * uxTaskGetSystemState() function.  Note the formatting functions are provided
 * for convenience only, and are NOT considered part of the kernel. */
    #include <stdio.h>
#endif /* configUSE_STATS_FORMATTING_FUNCTIONS_core0 == 1 ) */

#if ( configUSE_PREEMPTION_core0 == 0 )

/* If the cooperative scheduler is being used then a yield should not be
 * performed just because a higher priority task_core0 has been woken. */
    #define taskYIELD_IF_USING_PREEMPTION_core0()
#else
    #define taskYIELD_IF_USING_PREEMPTION_core0()    portYIELD_WITHIN_API_core0()
#endif

/* Values that can be assigned to the ucNotifyState_core0 member of the TCB. */
#define taskNOT_WAITING_NOTIFICATION_core0              ( ( uint8_t ) 0 ) /* Must be zero as it is the initialised value. */
#define taskWAITING_NOTIFICATION_core0                  ( ( uint8_t ) 1 )
#define taskNOTIFICATION_RECEIVED_core0                 ( ( uint8_t ) 2 )

/*
 * The value used to fill the stack of a task_core0 when the task_core0 is created.  This
 * is used purely for checking the high water mark for tasks.
 */
#define tskSTACK_FILL_BYTE_core0                        ( 0xa5U )

/* Bits used to record how a task_core0's stack and TCB were allocated. */
#define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB_core0    ( ( uint8_t ) 0 )
#define tskSTATICALLY_ALLOCATED_STACK_ONLY_core0        ( ( uint8_t ) 1 )
#define tskSTATICALLY_ALLOCATED_STACK_AND_TCB_core0     ( ( uint8_t ) 2 )

/* If any of the following are set then task_core0 stacks are filled with a known
 * value so the high water mark can be determined.  If none of the following are
 * set then don't fill the stack so there is no unnecessary dependency on memset. */
#if ( ( configCHECK_FOR_STACK_OVERFLOW_core0 > 1 ) || ( configUSE_TRACE_FACILITY_core0 == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark_core0 == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2_core0 == 1 ) )
    #define tskSET_NEW_STACKS_TO_KNOWN_VALUE_core0    1
#else
    #define tskSET_NEW_STACKS_TO_KNOWN_VALUE_core0    0
#endif

/*
 * Macros used by vListTask to indicate which state a task_core0 is in.
 */
#define tskRUNNING_CHAR_core0      ( 'X' )
#define tskBLOCKED_CHAR_core0      ( 'B' )
#define tskREADY_CHAR_core0        ( 'R' )
#define tskDELETED_CHAR_core0      ( 'D' )
#define tskSUSPENDED_CHAR_core0    ( 'S' )

/*
 * Some kernel aware debuggers require the data the debugger needs access to to
 * be global, rather than file scope.
 */
#ifdef portREMOVE_STATIC_QUALIFIER_core0
    #define static
#endif

/* The name allocated to the Idle task_core0.  This can be overridden by defining
 * configIDLE_TASK_NAME_core0 in FreeRTOSConfig.h. */
#ifndef configIDLE_TASK_NAME_core0
    #define configIDLE_TASK_NAME_core0    "IDLE_core0"
#endif

#if ( configUSE_PORT_OPTIMISED_TASK_SELECTION_core0 == 0 )

/* If configUSE_PORT_OPTIMISED_TASK_SELECTION_core0 is 0 then task_core0 selection is
 * performed in a generic way that is not optimised to any particular
 * microcontroller architecture. */

/* uxTopReadyPriority_core0 holds the priority of the highest priority ready
 * state task_core0. */
    #define taskRECORD_READY_PRIORITY_core0( uxPriority_core0 ) \
    {                                               \
        if( ( uxPriority_core0 ) > uxTopReadyPriority_core0 )   \
        {                                           \
            uxTopReadyPriority_core0 = ( uxPriority_core0 );    \
        }                                           \
    } /* taskRECORD_READY_PRIORITY_core0 */

/*-----------------------------------------------------------*/

    #define taskSELECT_HIGHEST_PRIORITY_TASK_core0()                                \
    {                                                                         \
        UBaseType_t_core0 uxTopPriority_core0 = uxTopReadyPriority_core0;                       \
                                                                              \
        /* Find the highest priority queue that contains ready tasks. */      \
        while( listLIST_IS_EMPTY_core0( &( pxReadyTasksLists_core0[ uxTopPriority_core0 ] ) ) ) \
        {                                                                     \
            configASSERT_core0( uxTopPriority_core0 );                                    \
            --uxTopPriority_core0;                                                  \
        }                                                                     \
                                                                              \
        /* listGET_OWNER_OF_NEXT_ENTRY_core0 indexes through the list, so the tasks of \
         * the  same priority get an equal share of the processor time. */                    \
        listGET_OWNER_OF_NEXT_ENTRY_core0( pxCurrentTCB_core0, &( pxReadyTasksLists_core0[ uxTopPriority_core0 ] ) ); \
        uxTopReadyPriority_core0 = uxTopPriority_core0;                                                   \
    } /* taskSELECT_HIGHEST_PRIORITY_TASK_core0 */

/*-----------------------------------------------------------*/

/* Define away taskRESET_READY_PRIORITY_core0() and portRESET_READY_PRIORITY_core0() as
 * they are only required when a port optimised method of task_core0 selection is
 * being used. */
    #define taskRESET_READY_PRIORITY_core0( uxPriority_core0 )
    #define portRESET_READY_PRIORITY_core0( uxPriority_core0, uxTopReadyPriority_core0 )

#else /* configUSE_PORT_OPTIMISED_TASK_SELECTION_core0 */

/* If configUSE_PORT_OPTIMISED_TASK_SELECTION_core0 is 1 then task_core0 selection is
 * performed in a way that is tailored to the particular microcontroller
 * architecture being used. */

/* A port optimised version is provided.  Call the port defined macros. */
    #define taskRECORD_READY_PRIORITY_core0( uxPriority_core0 )    portRECORD_READY_PRIORITY_core0( ( uxPriority_core0 ), uxTopReadyPriority_core0 )

/*-----------------------------------------------------------*/

    #define taskSELECT_HIGHEST_PRIORITY_TASK_core0()                                                  \
    {                                                                                           \
        UBaseType_t_core0 uxTopPriority_core0;                                                              \
                                                                                                \
        /* Find the highest priority list that contains ready tasks. */                         \
        portGET_HIGHEST_PRIORITY_core0( uxTopPriority_core0, uxTopReadyPriority_core0 );                          \
        configASSERT_core0( listCURRENT_LIST_LENGTH_core0( &( pxReadyTasksLists_core0[ uxTopPriority_core0 ] ) ) > 0 ); \
        listGET_OWNER_OF_NEXT_ENTRY_core0( pxCurrentTCB_core0, &( pxReadyTasksLists_core0[ uxTopPriority_core0 ] ) );   \
    } /* taskSELECT_HIGHEST_PRIORITY_TASK_core0() */

/*-----------------------------------------------------------*/

/* A port optimised version is provided, call it only if the TCB being reset
 * is being referenced from a ready list.  If it is referenced from a delayed
 * or suspended list then it won't be in a ready list. */
    #define taskRESET_READY_PRIORITY_core0( uxPriority_core0 )                                                     \
    {                                                                                                  \
        if( listCURRENT_LIST_LENGTH_core0( &( pxReadyTasksLists_core0[ ( uxPriority_core0 ) ] ) ) == ( UBaseType_t_core0 ) 0 ) \
        {                                                                                              \
            portRESET_READY_PRIORITY_core0( ( uxPriority_core0 ), ( uxTopReadyPriority_core0 ) );                        \
        }                                                                                              \
    }

#endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION_core0 */

/*-----------------------------------------------------------*/

/* pxDelayedTaskList_core0 and pxOverflowDelayedTaskList_core0 are switched when the tick
 * count overflows. */
#define taskSWITCH_DELAYED_LISTS_core0()                                                \
    {                                                                             \
        List_t_core0 * pxTemp_core0;                                                          \
                                                                                  \
        /* The delayed tasks list should be empty when the lists are switched. */ \
        configASSERT_core0( ( listLIST_IS_EMPTY_core0( pxDelayedTaskList_core0 ) ) );               \
                                                                                  \
        pxTemp_core0 = pxDelayedTaskList_core0;                                               \
        pxDelayedTaskList_core0 = pxOverflowDelayedTaskList_core0;                            \
        pxOverflowDelayedTaskList_core0 = pxTemp_core0;                                       \
        xNumOfOverflows_core0++;                                                        \
        prvResetNextTaskUnblockTime_core0();                                            \
    }

/*-----------------------------------------------------------*/

/*
 * Place the task_core0 represented by pxTCB_core0 into the appropriate ready list for
 * the task_core0.  It is inserted at the end of the list.
 */
#define prvAddTaskToReadyList_core0( pxTCB_core0 )                                                                 \
    traceMOVED_TASK_TO_READY_STATE_core0( pxTCB_core0 );                                                           \
    taskRECORD_READY_PRIORITY_core0( ( pxTCB_core0 )->uxPriority_core0 );                                                \
    listINSERT_END_core0( &( pxReadyTasksLists_core0[ ( pxTCB_core0 )->uxPriority_core0 ] ), &( ( pxTCB_core0 )->xStateListItem_core0 ) ); \
    tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB_core0 )
/*-----------------------------------------------------------*/

/*
 * Several functions take a TaskHandle_t_core0 parameter that can optionally be NULL,
 * where NULL is used to indicate that the handle of the currently executing
 * task_core0 should be used in place of the parameter.  This macro simply checks to
 * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 */
#define prvGetTCBFromHandle_core0( pxHandle_core0 )    ( ( ( pxHandle_core0 ) == NULL ) ? pxCurrentTCB_core0 : ( pxHandle_core0 ) )

/* The item value of the event list item is normally used to hold the priority
 * of the task_core0 to which it belongs (coded to allow it to be held in reverse
 * priority order).  However, it is occasionally borrowed for other purposes.  It
 * is important its value is not updated due to a task_core0 priority change while it is
 * being used for another purpose.  The following bit definition is used to inform
 * the scheduler that the value should not be changed - in which case it is the
 * responsibility of whichever module is using the value to ensure it gets set back
 * to its original value when it is released. */
#if ( configUSE_16_BIT_TICKS_core0 == 1 )
    #define taskEVENT_LIST_ITEM_VALUE_IN_USE_core0    0x8000U
#else
    #define taskEVENT_LIST_ITEM_VALUE_IN_USE_core0    0x80000000UL
#endif

/*
 * Task control block.  A task_core0 control block (TCB) is allocated for each task_core0,
 * and stores task_core0 state information, including a pointer to the task_core0's context
 * (the task_core0's run time environment, including register values)
 */
typedef struct tskTaskControlBlock_core0       /* The old naming convention is used to prevent breaking kernel aware debuggers. */
{
    volatile StackType_t_core0 * pxTopOfStack_core0; /*< Points to the location of the last item placed on the tasks stack.  THIS MUST BE THE FIRST MEMBER OF THE TCB STRUCT. */

    #if ( portUSING_MPU_WRAPPERS_core0 == 1 )
        xMPU_SETTINGS_core0 xMPUSettings_core0; /*< The MPU settings are defined as part of the port layer.  THIS MUST BE THE SECOND MEMBER OF THE TCB STRUCT. */
    #endif

    ListItem_t_core0 xStateListItem_core0;                  /*< The list that the state list item of a task_core0 is reference from denotes the state of that task_core0 (Ready, Blocked, Suspended ). */
    ListItem_t_core0 xEventListItem_core0;                  /*< Used to reference a task_core0 from an event list. */
    UBaseType_t_core0 uxPriority_core0;                     /*< The priority of the task_core0.  0 is the lowest priority. */
    StackType_t_core0 * pxStack_core0;                      /*< Points to the start of the stack. */
    char pcTaskName_core0[ configMAX_TASK_NAME_LEN_core0 ]; /*< Descriptive name given to the task_core0 when created.  Facilitates debugging only. */ /*lint !e971 Unqualified char types are allowed for strings and single characters only. */

    #if ( ( portSTACK_GROWTH_core0 > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS_core0 == 1 ) )
        StackType_t_core0 * pxEndOfStack_core0; /*< Points to the highest valid address for the stack. */
    #endif

    #if ( portCRITICAL_NESTING_IN_TCB_core0 == 1 )
        UBaseType_t_core0 uxCriticalNesting_core0; /*< Holds the critical section nesting depth for ports that do not maintain their own count in the port layer. */
    #endif

    #if ( configUSE_TRACE_FACILITY_core0 == 1 )
        UBaseType_t_core0 uxTCBNumber_core0;  /*< Stores a number that increments each time a TCB is created.  It allows debuggers to determine when a task_core0 has been deleted and then recreated. */
        UBaseType_t_core0 uxTaskNumber_core0; /*< Stores a number specifically for use by third party trace code. */
    #endif

    #if ( configUSE_MUTEXES_core0 == 1 )
        UBaseType_t_core0 uxBasePriority_core0; /*< The priority last assigned to the task_core0 - used by the priority inheritance mechanism. */
        UBaseType_t_core0 uxMutexesHeld_core0;
    #endif

    #if ( configUSE_APPLICATION_TASK_TAG_core0 == 1 )
        TaskHookFunction_t_core0 pxTaskTag_core0;
    #endif

    #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS_core0 > 0 )
        void * pvThreadLocalStoragePointers_core0[ configNUM_THREAD_LOCAL_STORAGE_POINTERS_core0 ];
    #endif

    #if ( configGENERATE_RUN_TIME_STATS_core0 == 1 )
        configRUN_TIME_COUNTER_TYPE_core0 ulRunTimeCounter_core0; /*< Stores the amount of time the task_core0 has spent in the Running state. */
    #endif

    #if ( ( configUSE_NEWLIB_REENTRANT_core0 == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT_core0 == 1 ) )
        configTLS_BLOCK_TYPE_core0 xTLSBlock_core0; /*< Memory block used as Thread Local Storage (TLS) Block for the task_core0. */
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS_core0 == 1 )
        volatile uint32_t ulNotifiedValue_core0[ configTASK_NOTIFICATION_ARRAY_ENTRIES_core0 ];
        volatile uint8_t ucNotifyState_core0[ configTASK_NOTIFICATION_ARRAY_ENTRIES_core0 ];
    #endif

    /* See the comments in FreeRTOS_core0.h with the definition of
     * tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE_core0. */
    #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE_core0 != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        uint8_t ucStaticallyAllocated_core0;                     /*< Set to pdTRUE_core0 if the task_core0 is a statically allocated to ensure no attempt is made to free the memory. */
    #endif

    #if ( INCLUDE_xTaskAbortDelay_core0 == 1 )
        uint8_t ucDelayAborted_core0;
    #endif

    #if ( configUSE_POSIX_ERRNO_core0 == 1 )
        int iTaskErrno_core0;
    #endif
} tskTCB_core0;

/* The old tskTCB_core0 name is maintained above then typedefed to the new TCB_t_core0 name
 * below to enable the use of older kernel aware debuggers. */
typedef tskTCB_core0 TCB_t_core0;

/*lint -save -e956 A manual analysis and inspection has been used to determine
 * which static variables must be declared volatile. */
portDONT_DISCARD_core0 PRIVILEGED_DATA_core0 TCB_t_core0 * volatile pxCurrentTCB_core0 = NULL;

/* Lists for ready and blocked tasks. --------------------
 * xDelayedTaskList1_core0 and xDelayedTaskList2_core0 could be moved to function scope but
 * doing so breaks some kernel aware debuggers and debuggers that rely on removing
 * the static qualifier. */
PRIVILEGED_DATA_core0 static List_t_core0 pxReadyTasksLists_core0[ configMAX_PRIORITIES_core0 ]; /*< Prioritised ready tasks. */
PRIVILEGED_DATA_core0 static List_t_core0 xDelayedTaskList1_core0;                         /*< Delayed tasks. */
PRIVILEGED_DATA_core0 static List_t_core0 xDelayedTaskList2_core0;                         /*< Delayed tasks (two lists are used - one for delays that have overflowed the current tick count. */
PRIVILEGED_DATA_core0 static List_t_core0 * volatile pxDelayedTaskList_core0;              /*< Points to the delayed task_core0 list currently being used. */
PRIVILEGED_DATA_core0 static List_t_core0 * volatile pxOverflowDelayedTaskList_core0;      /*< Points to the delayed task_core0 list currently being used to hold tasks that have overflowed the current tick count. */
PRIVILEGED_DATA_core0 static List_t_core0 xPendingReadyList_core0;                         /*< Tasks that have been readied while the scheduler was suspended.  They will be moved to the ready list when the scheduler is resumed. */

#if ( INCLUDE_vTaskDelete_core0 == 1 )

    PRIVILEGED_DATA_core0 static List_t_core0 xTasksWaitingTermination_core0; /*< Tasks that have been deleted - but their memory not yet freed. */
    PRIVILEGED_DATA_core0 static volatile UBaseType_t_core0 uxDeletedTasksWaitingCleanUp_core0 = ( UBaseType_t_core0 ) 0U;

#endif

#if ( INCLUDE_vTaskSuspend_core0 == 1 )

    PRIVILEGED_DATA_core0 static List_t_core0 xSuspendedTaskList_core0; /*< Tasks that are currently suspended. */

#endif

/* Global POSIX errno. Its value is changed upon context switching to match
 * the errno of the currently running task_core0. */
#if ( configUSE_POSIX_ERRNO_core0 == 1 )
    int FreeRTOS_errno_core0 = 0;
#endif

/* Other file private variables. --------------------------------*/
PRIVILEGED_DATA_core0 static volatile UBaseType_t_core0 uxCurrentNumberOfTasks_core0 = ( UBaseType_t_core0 ) 0U;
PRIVILEGED_DATA_core0 static volatile TickType_t_core0 xTickCount_core0 = ( TickType_t_core0 ) configINITIAL_TICK_COUNT_core0;
PRIVILEGED_DATA_core0 static volatile UBaseType_t_core0 uxTopReadyPriority_core0 = tskIDLE_PRIORITY_core0;
PRIVILEGED_DATA_core0 static volatile BaseType_t_core0 xSchedulerRunning_core0 = pdFALSE_core0;
PRIVILEGED_DATA_core0 static volatile TickType_t_core0 xPendedTicks_core0 = ( TickType_t_core0 ) 0U;
PRIVILEGED_DATA_core0 static volatile BaseType_t_core0 xYieldPending_core0 = pdFALSE_core0;
PRIVILEGED_DATA_core0 static volatile BaseType_t_core0 xNumOfOverflows_core0 = ( BaseType_t_core0 ) 0;
PRIVILEGED_DATA_core0 static UBaseType_t_core0 uxTaskNumber_core0 = ( UBaseType_t_core0 ) 0U;
PRIVILEGED_DATA_core0 static volatile TickType_t_core0 xNextTaskUnblockTime_core0 = ( TickType_t_core0 ) 0U; /* Initialised to portMAX_DELAY_core0 before the scheduler starts. */
PRIVILEGED_DATA_core0 static TaskHandle_t_core0 xIdleTaskHandle_core0 = NULL;                          /*< Holds the handle of the idle task_core0.  The idle task_core0 is created automatically when the scheduler is started. */

/* Improve support for OpenOCD. The kernel tracks Ready tasks via priority lists.
 * For tracking the state of remote threads, OpenOCD uses uxTopUsedPriority_core0
 * to determine the number of priority lists to read back from the remote target. */
const volatile UBaseType_t_core0 uxTopUsedPriority_core0 = configMAX_PRIORITIES_core0 - 1U;

/* Context switches are held pending while the scheduler is suspended.  Also,
 * interrupts must not manipulate the xStateListItem_core0 of a TCB, or any of the
 * lists the xStateListItem_core0 can be referenced from, if the scheduler is suspended.
 * If an interrupt needs to unblock a task_core0 while the scheduler is suspended then it
 * moves the task_core0's event list item into the xPendingReadyList_core0, ready for the
 * kernel to move the task_core0 from the pending ready list into the real ready list
 * when the scheduler is unsuspended.  The pending ready list itself can only be
 * accessed from a critical section. */
PRIVILEGED_DATA_core0 static volatile UBaseType_t_core0 uxSchedulerSuspended_core0 = ( UBaseType_t_core0 ) pdFALSE_core0;

#if ( configGENERATE_RUN_TIME_STATS_core0 == 1 )

/* Do not move these variables to function scope as doing so prevents the
 * code working with debuggers that need to remove the static qualifier. */
    PRIVILEGED_DATA_core0 static configRUN_TIME_COUNTER_TYPE_core0 ulTaskSwitchedInTime_core0 = 0UL;    /*< Holds the value of a timer/counter the last time a task_core0 was switched in. */
    PRIVILEGED_DATA_core0 static volatile configRUN_TIME_COUNTER_TYPE_core0 ulTotalRunTime_core0 = 0UL; /*< Holds the total amount of execution time as defined by the run time counter clock. */

#endif

/*lint -restore */

/*-----------------------------------------------------------*/

/* File private functions. --------------------------------*/

/**
 * Utility task_core0 that simply returns pdTRUE_core0 if the task_core0 referenced by xTask_core0 is
 * currently in the Suspended state, or pdFALSE_core0 if the task_core0 referenced by xTask_core0
 * is in any other state.
 */
#if ( INCLUDE_vTaskSuspend_core0 == 1 )

    static BaseType_t_core0 prvTaskIsTaskSuspended_core0( const TaskHandle_t_core0 xTask_core0 ) PRIVILEGED_FUNCTION_core0;

#endif /* INCLUDE_vTaskSuspend_core0 */

/*
 * Utility to ready all the lists used by the scheduler.  This is called
 * automatically upon the creation of the first task_core0.
 */
static void prvInitialiseTaskLists_core0( void ) PRIVILEGED_FUNCTION_core0;

/*
 * The idle task_core0, which as all tasks is implemented as a never ending loop.
 * The idle task_core0 is automatically created and added to the ready lists upon
 * creation of the first user task_core0.
 *
 * The portTASK_FUNCTION_PROTO_core0() macro is used to allow port/compiler specific
 * language extensions.  The equivalent prototype for this function is:
 *
 * void prvIdleTask_core0( void *pvParameters_core0 );
 *
 */
static portTASK_FUNCTION_PROTO_core0( prvIdleTask_core0, pvParameters_core0 ) PRIVILEGED_FUNCTION_core0;

/*
 * Utility to free all memory allocated by the scheduler to hold a TCB,
 * including the stack pointed to by the TCB.
 *
 * This does not free memory allocated by the task_core0 itself (i.e. memory
 * allocated by calls to pvPortMalloc_core0 from within the tasks application code).
 */
#if ( INCLUDE_vTaskDelete_core0 == 1 )

    static void prvDeleteTCB_core0( TCB_t_core0 * pxTCB_core0 ) PRIVILEGED_FUNCTION_core0;

#endif

/*
 * Used only by the idle task_core0.  This checks to see if anything has been placed
 * in the list of tasks waiting to be deleted.  If so the task_core0 is cleaned up
 * and its TCB deleted.
 */
static void prvCheckTasksWaitingTermination_core0( void ) PRIVILEGED_FUNCTION_core0;

/*
 * The currently executing task_core0 is entering the Blocked state.  Add the task_core0 to
 * either the current or the overflow delayed task_core0 list.
 */
static void prvAddCurrentTaskToDelayedList_core0( TickType_t_core0 xTicksToWait_core0,
                                            const BaseType_t_core0 xCanBlockIndefinitely_core0 ) PRIVILEGED_FUNCTION_core0;

/*
 * Fills an TaskStatus_t_core0 structure with information on each task_core0 that is
 * referenced from the pxList_core0 list (which may be a ready list, a delayed list,
 * a suspended list, etc.).
 *
 * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 * NORMAL APPLICATION CODE.
 */
#if ( configUSE_TRACE_FACILITY_core0 == 1 )

    static UBaseType_t_core0 prvListTasksWithinSingleList_core0( TaskStatus_t_core0 * pxTaskStatusArray_core0,
                                                     List_t_core0 * pxList_core0,
                                                     eTaskState_core0 eState_core0 ) PRIVILEGED_FUNCTION_core0;

#endif

/*
 * Searches pxList_core0 for a task_core0 with name pcNameToQuery_core0 - returning a handle to
 * the task_core0 if it is found, or NULL if the task_core0 is not found.
 */
#if ( INCLUDE_xTaskGetHandle_core0 == 1 )

    static TCB_t_core0 * prvSearchForNameWithinSingleList_core0( List_t_core0 * pxList_core0,
                                                     const char pcNameToQuery_core0[] ) PRIVILEGED_FUNCTION_core0;

#endif

/*
 * When a task_core0 is created, the stack of the task_core0 is filled with a known value.
 * This function determines the 'high water mark' of the task_core0 stack by
 * determining how much of the stack remains at the original preset value.
 */
#if ( ( configUSE_TRACE_FACILITY_core0 == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark_core0 == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2_core0 == 1 ) )

    static configSTACK_DEPTH_TYPE_core0 prvTaskCheckFreeStackSpace_core0( const uint8_t * pucStackByte_core0 ) PRIVILEGED_FUNCTION_core0;

#endif

/*
 * Return the amount of time, in ticks, that will pass before the kernel will
 * next move a task_core0 from the Blocked state to the Running state.
 *
 * This conditional compilation should use inequality to 0, not equality to 1.
 * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 * defined low power mode implementations require configUSE_TICKLESS_IDLE_core0 to be
 * set to a value other than 1.
 */
#if ( configUSE_TICKLESS_IDLE_core0 != 0 )

    static TickType_t_core0 prvGetExpectedIdleTime_core0( void ) PRIVILEGED_FUNCTION_core0;

#endif

/*
 * Set xNextTaskUnblockTime_core0 to the time at which the next Blocked state task_core0
 * will exit the Blocked state.
 */
static void prvResetNextTaskUnblockTime_core0( void ) PRIVILEGED_FUNCTION_core0;

#if ( configUSE_STATS_FORMATTING_FUNCTIONS_core0 > 0 )

/*
 * Helper function used to pad task_core0 names with spaces when printing out
 * human readable tables of task_core0 information.
 */
    static char * prvWriteNameToBuffer_core0( char * pcBuffer_core0,
                                        const char * pcTaskName_core0 ) PRIVILEGED_FUNCTION_core0;

#endif

/*
 * Called after a Task_t structure has been allocated either statically or
 * dynamically to fill in the structure's members.
 */
static void prvInitialiseNewTask_core0( TaskFunction_t_core0 pxTaskCode_core0,
                                  const char * const pcName_core0, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                  const uint32_t ulStackDepth_core0,
                                  void * const pvParameters_core0,
                                  UBaseType_t_core0 uxPriority_core0,
                                  TaskHandle_t_core0 * const pxCreatedTask_core0,
                                  TCB_t_core0 * pxNewTCB_core0,
                                  const MemoryRegion_t_core0 * const xRegions_core0 ) PRIVILEGED_FUNCTION_core0;

/*
 * Called after a new task_core0 has been created and initialised to place the task_core0
 * under the control of the scheduler.
 */
static void prvAddNewTaskToReadyList_core0( TCB_t_core0 * pxNewTCB_core0 ) PRIVILEGED_FUNCTION_core0;

/*
 * freertos_tasks_c_additions_init_core0() should only be called if the user definable
 * macro FREERTOS_TASKS_C_ADDITIONS_INIT_core0() is defined, as that is the only macro
 * called by the function.
 */
#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT_core0

    static void freertos_tasks_c_additions_init_core0( void ) PRIVILEGED_FUNCTION_core0;

#endif

/*-----------------------------------------------------------*/

#if ( configSUPPORT_STATIC_ALLOCATION_core0 == 1 )

    TaskHandle_t_core0 xTaskCreateStatic_core0( TaskFunction_t_core0 pxTaskCode_core0,
                                    const char * const pcName_core0, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const uint32_t ulStackDepth_core0,
                                    void * const pvParameters_core0,
                                    UBaseType_t_core0 uxPriority_core0,
                                    StackType_t_core0 * const puxStackBuffer_core0,
                                    StaticTask_t_core0 * const pxTaskBuffer_core0 )
    {
        TCB_t_core0 * pxNewTCB_core0;
        TaskHandle_t_core0 xReturn_core0;

        configASSERT_core0( puxStackBuffer_core0 != NULL );
        configASSERT_core0( pxTaskBuffer_core0 != NULL );

        #if ( configASSERT_DEFINED_core0 == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t_core0 equals the size of the real task_core0
             * structure. */
            volatile size_t xSize_core0 = sizeof( StaticTask_t_core0 );
            configASSERT_core0( xSize_core0 == sizeof( TCB_t_core0 ) );
            ( void ) xSize_core0; /* Prevent lint warning when configASSERT_core0() is not used. */
        }
        #endif /* configASSERT_DEFINED_core0 */

        if( ( pxTaskBuffer_core0 != NULL ) && ( puxStackBuffer_core0 != NULL ) )
        {
            /* The memory used for the task_core0's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB_core0 = ( TCB_t_core0 * ) pxTaskBuffer_core0; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
            memset( ( void * ) pxNewTCB_core0, 0x00, sizeof( TCB_t_core0 ) );
            pxNewTCB_core0->pxStack_core0 = ( StackType_t_core0 * ) puxStackBuffer_core0;

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE_core0 != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task_core0 was created statically in case the task_core0 is later deleted. */
                pxNewTCB_core0->ucStaticallyAllocated_core0 = tskSTATICALLY_ALLOCATED_STACK_AND_TCB_core0;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE_core0 */

            prvInitialiseNewTask_core0( pxTaskCode_core0, pcName_core0, ulStackDepth_core0, pvParameters_core0, uxPriority_core0, &xReturn_core0, pxNewTCB_core0, NULL );
            prvAddNewTaskToReadyList_core0( pxNewTCB_core0 );
        }
        else
        {
            xReturn_core0 = NULL;
        }

        return xReturn_core0;
    }

#endif /* SUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

#if ( ( portUSING_MPU_WRAPPERS_core0 == 1 ) && ( configSUPPORT_STATIC_ALLOCATION_core0 == 1 ) )

    BaseType_t_core0 xTaskCreateRestrictedStatic_core0( const TaskParameters_t_core0 * const pxTaskDefinition_core0,
                                            TaskHandle_t_core0 * pxCreatedTask_core0 )
    {
        TCB_t_core0 * pxNewTCB_core0;
        BaseType_t_core0 xReturn_core0 = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY_core0;

        configASSERT_core0( pxTaskDefinition_core0->puxStackBuffer_core0 != NULL );
        configASSERT_core0( pxTaskDefinition_core0->pxTaskBuffer_core0 != NULL );

        if( ( pxTaskDefinition_core0->puxStackBuffer_core0 != NULL ) && ( pxTaskDefinition_core0->pxTaskBuffer_core0 != NULL ) )
        {
            /* Allocate space for the TCB.  Where the memory comes from depends
             * on the implementation of the port malloc function and whether or
             * not static allocation is being used. */
            pxNewTCB_core0 = ( TCB_t_core0 * ) pxTaskDefinition_core0->pxTaskBuffer_core0;
            memset( ( void * ) pxNewTCB_core0, 0x00, sizeof( TCB_t_core0 ) );

            /* Store the stack location in the TCB. */
            pxNewTCB_core0->pxStack_core0 = pxTaskDefinition_core0->puxStackBuffer_core0;

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE_core0 != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task_core0 was created statically in case the task_core0 is later deleted. */
                pxNewTCB_core0->ucStaticallyAllocated_core0 = tskSTATICALLY_ALLOCATED_STACK_AND_TCB_core0;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE_core0 */

            prvInitialiseNewTask_core0( pxTaskDefinition_core0->pvTaskCode_core0,
                                  pxTaskDefinition_core0->pcName_core0,
                                  ( uint32_t ) pxTaskDefinition_core0->usStackDepth_core0,
                                  pxTaskDefinition_core0->pvParameters_core0,
                                  pxTaskDefinition_core0->uxPriority_core0,
                                  pxCreatedTask_core0, pxNewTCB_core0,
                                  pxTaskDefinition_core0->xRegions_core0 );

            prvAddNewTaskToReadyList_core0( pxNewTCB_core0 );
            xReturn_core0 = pdPASS_core0;
        }

        return xReturn_core0;
    }

#endif /* ( portUSING_MPU_WRAPPERS_core0 == 1 ) && ( configSUPPORT_STATIC_ALLOCATION_core0 == 1 ) */
/*-----------------------------------------------------------*/

#if ( ( portUSING_MPU_WRAPPERS_core0 == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION_core0 == 1 ) )

    BaseType_t_core0 xTaskCreateRestricted_core0( const TaskParameters_t_core0 * const pxTaskDefinition_core0,
                                      TaskHandle_t_core0 * pxCreatedTask_core0 )
    {
        TCB_t_core0 * pxNewTCB_core0;
        BaseType_t_core0 xReturn_core0 = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY_core0;

        configASSERT_core0( pxTaskDefinition_core0->puxStackBuffer_core0 );

        if( pxTaskDefinition_core0->puxStackBuffer_core0 != NULL )
        {
            /* Allocate space for the TCB.  Where the memory comes from depends
             * on the implementation of the port malloc function and whether or
             * not static allocation is being used. */
            pxNewTCB_core0 = ( TCB_t_core0 * ) pvPortMalloc_core0( sizeof( TCB_t_core0 ) );

            if( pxNewTCB_core0 != NULL )
            {
                memset( ( void * ) pxNewTCB_core0, 0x00, sizeof( TCB_t_core0 ) );

                /* Store the stack location in the TCB. */
                pxNewTCB_core0->pxStack_core0 = pxTaskDefinition_core0->puxStackBuffer_core0;

                #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE_core0 != 0 )
                {
                    /* Tasks can be created statically or dynamically, so note
                     * this task_core0 had a statically allocated stack in case it is
                     * later deleted.  The TCB was allocated dynamically. */
                    pxNewTCB_core0->ucStaticallyAllocated_core0 = tskSTATICALLY_ALLOCATED_STACK_ONLY_core0;
                }
                #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE_core0 */

                prvInitialiseNewTask_core0( pxTaskDefinition_core0->pvTaskCode_core0,
                                      pxTaskDefinition_core0->pcName_core0,
                                      ( uint32_t ) pxTaskDefinition_core0->usStackDepth_core0,
                                      pxTaskDefinition_core0->pvParameters_core0,
                                      pxTaskDefinition_core0->uxPriority_core0,
                                      pxCreatedTask_core0, pxNewTCB_core0,
                                      pxTaskDefinition_core0->xRegions_core0 );

                prvAddNewTaskToReadyList_core0( pxNewTCB_core0 );
                xReturn_core0 = pdPASS_core0;
            }
        }

        return xReturn_core0;
    }

#endif /* portUSING_MPU_WRAPPERS_core0 */
/*-----------------------------------------------------------*/

#if ( configSUPPORT_DYNAMIC_ALLOCATION_core0 == 1 )

    BaseType_t_core0 xTaskCreate_core0( TaskFunction_t_core0 pxTaskCode_core0,
                            const char * const pcName_core0, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE_core0 usStackDepth_core0,
                            void * const pvParameters_core0,
                            UBaseType_t_core0 uxPriority_core0,
                            TaskHandle_t_core0 * const pxCreatedTask_core0 )
    {
        TCB_t_core0 * pxNewTCB_core0;
        BaseType_t_core0 xReturn_core0;

        /* If the stack grows down then allocate the stack then the TCB so the stack
         * does not grow into the TCB.  Likewise if the stack grows up then allocate
         * the TCB then the stack. */
        #if ( portSTACK_GROWTH_core0 > 0 )
        {
            /* Allocate space for the TCB.  Where the memory comes from depends on
             * the implementation of the port malloc function and whether or not static
             * allocation is being used. */
            pxNewTCB_core0 = ( TCB_t_core0 * ) pvPortMalloc_core0( sizeof( TCB_t_core0 ) );

            if( pxNewTCB_core0 != NULL )
            {
                memset( ( void * ) pxNewTCB_core0, 0x00, sizeof( TCB_t_core0 ) );

                /* Allocate space for the stack used by the task_core0 being created.
                 * The base of the stack memory stored in the TCB so the task_core0 can
                 * be deleted later if required. */
                pxNewTCB_core0->pxStack_core0 = ( StackType_t_core0 * ) pvPortMallocStack_core0( ( ( ( size_t ) usStackDepth_core0 ) * sizeof( StackType_t_core0 ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

                if( pxNewTCB_core0->pxStack_core0 == NULL )
                {
                    /* Could not allocate the stack.  Delete the allocated TCB. */
                    vPortFree_core0( pxNewTCB_core0 );
                    pxNewTCB_core0 = NULL;
                }
            }
        }
        #else /* portSTACK_GROWTH_core0 */
        {
            StackType_t_core0 * pxStack_core0;

            /* Allocate space for the stack used by the task_core0 being created. */
            pxStack_core0 = pvPortMallocStack_core0( ( ( ( size_t ) usStackDepth_core0 ) * sizeof( StackType_t_core0 ) ) ); /*lint !e9079 All values returned by pvPortMalloc_core0() have at least the alignment required by the MCU's stack and this allocation is the stack. */

            if( pxStack_core0 != NULL )
            {
                /* Allocate space for the TCB. */
                pxNewTCB_core0 = ( TCB_t_core0 * ) pvPortMalloc_core0( sizeof( TCB_t_core0 ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc_core0() have at least the alignment required by the MCU's stack, and the first member of TCB_t_core0 is always a pointer to the task_core0's stack. */

                if( pxNewTCB_core0 != NULL )
                {
                    memset( ( void * ) pxNewTCB_core0, 0x00, sizeof( TCB_t_core0 ) );

                    /* Store the stack location in the TCB. */
                    pxNewTCB_core0->pxStack_core0 = pxStack_core0;
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack_core0( pxStack_core0 );
                }
            }
            else
            {
                pxNewTCB_core0 = NULL;
            }
        }
        #endif /* portSTACK_GROWTH_core0 */

        if( pxNewTCB_core0 != NULL )
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE_core0 != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task_core0 was created dynamically in case it is later deleted. */
                pxNewTCB_core0->ucStaticallyAllocated_core0 = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB_core0;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE_core0 */

            prvInitialiseNewTask_core0( pxTaskCode_core0, pcName_core0, ( uint32_t ) usStackDepth_core0, pvParameters_core0, uxPriority_core0, pxCreatedTask_core0, pxNewTCB_core0, NULL );
            prvAddNewTaskToReadyList_core0( pxNewTCB_core0 );
            xReturn_core0 = pdPASS_core0;
        }
        else
        {
            xReturn_core0 = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY_core0;
        }

        return xReturn_core0;
    }

#endif /* configSUPPORT_DYNAMIC_ALLOCATION_core0 */
/*-----------------------------------------------------------*/

static void prvInitialiseNewTask_core0( TaskFunction_t_core0 pxTaskCode_core0,
                                  const char * const pcName_core0, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                  const uint32_t ulStackDepth_core0,
                                  void * const pvParameters_core0,
                                  UBaseType_t_core0 uxPriority_core0,
                                  TaskHandle_t_core0 * const pxCreatedTask_core0,
                                  TCB_t_core0 * pxNewTCB_core0,
                                  const MemoryRegion_t_core0 * const xRegions_core0 )
{
    StackType_t_core0 * pxTopOfStack_core0;
    UBaseType_t_core0 x;

    #if ( portUSING_MPU_WRAPPERS_core0 == 1 )
        /* Should the task_core0 be created in privileged mode? */
        BaseType_t_core0 xRunPrivileged_core0;

        if( ( uxPriority_core0 & portPRIVILEGE_BIT_core0 ) != 0U )
        {
            xRunPrivileged_core0 = pdTRUE_core0;
        }
        else
        {
            xRunPrivileged_core0 = pdFALSE_core0;
        }
        uxPriority_core0 &= ~portPRIVILEGE_BIT_core0;
    #endif /* portUSING_MPU_WRAPPERS_core0 == 1 */

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE_core0 == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB_core0->pxStack_core0, ( int ) tskSTACK_FILL_BYTE_core0, ( size_t ) ulStackDepth_core0 * sizeof( StackType_t_core0 ) );
    }
    #endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE_core0 */

    /* Calculate the top of stack address.  This depends on whether the stack
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH_core0 is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH_core0 < 0 )
    {
        pxTopOfStack_core0 = &( pxNewTCB_core0->pxStack_core0[ ulStackDepth_core0 - ( uint32_t ) 1 ] );
        pxTopOfStack_core0 = ( StackType_t_core0 * ) ( ( ( portPOINTER_SIZE_TYPE_core0 ) pxTopOfStack_core0 ) & ( ~( ( portPOINTER_SIZE_TYPE_core0 ) portBYTE_ALIGNMENT_MASK_core0 ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE_core0 type.  Checked by assert(). */

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT_core0( ( ( ( portPOINTER_SIZE_TYPE_core0 ) pxTopOfStack_core0 & ( portPOINTER_SIZE_TYPE_core0 ) portBYTE_ALIGNMENT_MASK_core0 ) == 0UL ) );

        #if ( configRECORD_STACK_HIGH_ADDRESS_core0 == 1 )
        {
            /* Also record the stack's high address, which may assist
             * debugging. */
            pxNewTCB_core0->pxEndOfStack_core0 = pxTopOfStack_core0;
        }
        #endif /* configRECORD_STACK_HIGH_ADDRESS_core0 */
    }
    #else /* portSTACK_GROWTH_core0 */
    {
        pxTopOfStack_core0 = pxNewTCB_core0->pxStack_core0;

        /* Check the alignment of the stack buffer is correct. */
        configASSERT_core0( ( ( ( portPOINTER_SIZE_TYPE_core0 ) pxNewTCB_core0->pxStack_core0 & ( portPOINTER_SIZE_TYPE_core0 ) portBYTE_ALIGNMENT_MASK_core0 ) == 0UL ) );

        /* The other extreme of the stack space is required if stack checking is
         * performed. */
        pxNewTCB_core0->pxEndOfStack_core0 = pxNewTCB_core0->pxStack_core0 + ( ulStackDepth_core0 - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH_core0 */

    /* Store the task_core0 name in the TCB. */
    if( pcName_core0 != NULL )
    {
        for( x = ( UBaseType_t_core0 ) 0; x < ( UBaseType_t_core0 ) configMAX_TASK_NAME_LEN_core0; x++ )
        {
            pxNewTCB_core0->pcTaskName_core0[ x ] = pcName_core0[ x ];

            /* Don't copy all configMAX_TASK_NAME_LEN_core0 if the string is shorter than
             * configMAX_TASK_NAME_LEN_core0 characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName_core0[ x ] == ( char ) 0x00 )
            {
                break;
            }
            else
            {
                mtCOVERAGE_TEST_MARKER_core0();
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN_core0. */
        pxNewTCB_core0->pcTaskName_core0[ configMAX_TASK_NAME_LEN_core0 - 1 ] = '\0';
    }
    else
    {
        mtCOVERAGE_TEST_MARKER_core0();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT_core0( uxPriority_core0 < configMAX_PRIORITIES_core0 );

    if( uxPriority_core0 >= ( UBaseType_t_core0 ) configMAX_PRIORITIES_core0 )
    {
        uxPriority_core0 = ( UBaseType_t_core0 ) configMAX_PRIORITIES_core0 - ( UBaseType_t_core0 ) 1U;
    }
    else
    {
        mtCOVERAGE_TEST_MARKER_core0();
    }

    pxNewTCB_core0->uxPriority_core0 = uxPriority_core0;
    #if ( configUSE_MUTEXES_core0 == 1 )
    {
        pxNewTCB_core0->uxBasePriority_core0 = uxPriority_core0;
    }
    #endif /* configUSE_MUTEXES_core0 */

    vListInitialiseItem_core0( &( pxNewTCB_core0->xStateListItem_core0 ) );
    vListInitialiseItem_core0( &( pxNewTCB_core0->xEventListItem_core0 ) );

    /* Set the pxNewTCB_core0 as a link back from the ListItem_t_core0.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER_core0( &( pxNewTCB_core0->xStateListItem_core0 ), pxNewTCB_core0 );

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE_core0( &( pxNewTCB_core0->xEventListItem_core0 ), ( TickType_t_core0 ) configMAX_PRIORITIES_core0 - ( TickType_t_core0 ) uxPriority_core0 ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    listSET_LIST_ITEM_OWNER_core0( &( pxNewTCB_core0->xEventListItem_core0 ), pxNewTCB_core0 );

    #if ( portUSING_MPU_WRAPPERS_core0 == 1 )
    {
        vPortStoreTaskMPUSettings_core0( &( pxNewTCB_core0->xMPUSettings_core0 ), xRegions_core0, pxNewTCB_core0->pxStack_core0, ulStackDepth_core0 );
    }
    #else
    {
        /* Avoid compiler warning about unreferenced parameter. */
        ( void ) xRegions_core0;
    }
    #endif

    #if ( ( configUSE_NEWLIB_REENTRANT_core0 == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT_core0 == 1 ) )
    {
        /* Allocate and initialize memory for the task_core0's TLS Block. */
        configINIT_TLS_BLOCK_core0( pxNewTCB_core0->xTLSBlock_core0 );
    }
    #endif

    /* Initialize the TCB stack to look as if the task_core0 was already running,
     * but had been interrupted by the scheduler.  The return address is set
     * to the start of the task_core0 function. Once the stack has been initialised
     * the top of stack variable is updated. */
    #if ( portUSING_MPU_WRAPPERS_core0 == 1 )
    {
        /* If the port has capability to detect stack overflow,
         * pass the stack end address to the stack initialization
         * function as well. */
        #if ( portHAS_STACK_OVERFLOW_CHECKING_core0 == 1 )
        {
            #if ( portSTACK_GROWTH_core0 < 0 )
            {
                pxNewTCB_core0->pxTopOfStack_core0 = pxPortInitialiseStack_core0( pxTopOfStack_core0, pxNewTCB_core0->pxStack_core0, pxTaskCode_core0, pvParameters_core0, xRunPrivileged_core0 );
            }
            #else /* portSTACK_GROWTH_core0 */
            {
                pxNewTCB_core0->pxTopOfStack_core0 = pxPortInitialiseStack_core0( pxTopOfStack_core0, pxNewTCB_core0->pxEndOfStack_core0, pxTaskCode_core0, pvParameters_core0, xRunPrivileged_core0 );
            }
            #endif /* portSTACK_GROWTH_core0 */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING_core0 */
        {
            pxNewTCB_core0->pxTopOfStack_core0 = pxPortInitialiseStack_core0( pxTopOfStack_core0, pxTaskCode_core0, pvParameters_core0, xRunPrivileged_core0 );
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING_core0 */
    }
    #else /* portUSING_MPU_WRAPPERS_core0 */
    {
        /* If the port has capability to detect stack overflow,
         * pass the stack end address to the stack initialization
         * function as well. */
        #if ( portHAS_STACK_OVERFLOW_CHECKING_core0 == 1 )
        {
            #if ( portSTACK_GROWTH_core0 < 0 )
            {
                pxNewTCB_core0->pxTopOfStack_core0 = pxPortInitialiseStack_core0( pxTopOfStack_core0, pxNewTCB_core0->pxStack_core0, pxTaskCode_core0, pvParameters_core0 );
            }
            #else /* portSTACK_GROWTH_core0 */
            {
                pxNewTCB_core0->pxTopOfStack_core0 = pxPortInitialiseStack_core0( pxTopOfStack_core0, pxNewTCB_core0->pxEndOfStack_core0, pxTaskCode_core0, pvParameters_core0 );
            }
            #endif /* portSTACK_GROWTH_core0 */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING_core0 */
        {
            pxNewTCB_core0->pxTopOfStack_core0 = pxPortInitialiseStack_core0( pxTopOfStack_core0, pxTaskCode_core0, pvParameters_core0 );
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING_core0 */
    }
    #endif /* portUSING_MPU_WRAPPERS_core0 */

    if( pxCreatedTask_core0 != NULL )
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task_core0's priority, delete the created task_core0, etc.*/
        *pxCreatedTask_core0 = ( TaskHandle_t_core0 ) pxNewTCB_core0;
    }
    else
    {
        mtCOVERAGE_TEST_MARKER_core0();
    }
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList_core0( TCB_t_core0 * pxNewTCB_core0 )
{
    /* Ensure interrupts don't access the task_core0 lists while the lists are being
     * updated. */
    taskENTER_CRITICAL_core0();
    {
        uxCurrentNumberOfTasks_core0++;

        if( pxCurrentTCB_core0 == NULL )
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task_core0. */
            pxCurrentTCB_core0 = pxNewTCB_core0;

            if( uxCurrentNumberOfTasks_core0 == ( UBaseType_t_core0 ) 1 )
            {
                /* This is the first task_core0 to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists_core0();
            }
            else
            {
                mtCOVERAGE_TEST_MARKER_core0();
            }
        }
        else
        {
            /* If the scheduler is not already running, make this task_core0 the
             * current task_core0 if it is the highest priority task_core0 to be created
             * so far. */
            if( xSchedulerRunning_core0 == pdFALSE_core0 )
            {
                if( pxCurrentTCB_core0->uxPriority_core0 <= pxNewTCB_core0->uxPriority_core0 )
                {
                    pxCurrentTCB_core0 = pxNewTCB_core0;
                }
                else
                {
                    mtCOVERAGE_TEST_MARKER_core0();
                }
            }
            else
            {
                mtCOVERAGE_TEST_MARKER_core0();
            }
        }

        uxTaskNumber_core0++;

        #if ( configUSE_TRACE_FACILITY_core0 == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB_core0->uxTCBNumber_core0 = uxTaskNumber_core0;
        }
        #endif /* configUSE_TRACE_FACILITY_core0 */
        traceTASK_CREATE_core0( pxNewTCB_core0 );

        prvAddTaskToReadyList_core0( pxNewTCB_core0 );

        portSETUP_TCB( pxNewTCB_core0 );
    }
    taskEXIT_CRITICAL_core0();

    if( xSchedulerRunning_core0 != pdFALSE_core0 )
    {
        /* If the created task_core0 is of a higher priority than the current task_core0
         * then it should run now. */
        if( pxCurrentTCB_core0->uxPriority_core0 < pxNewTCB_core0->uxPriority_core0 )
        {
            taskYIELD_IF_USING_PREEMPTION_core0();
        }
        else
        {
            mtCOVERAGE_TEST_MARKER_core0();
        }
    }
    else
    {
        mtCOVERAGE_TEST_MARKER_core0();
    }
}
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete_core0 == 1 )

    void vTaskDelete_core0( TaskHandle_t_core0 xTaskToDelete_core0 )
    {
        TCB_t_core0 * pxTCB_core0;

        taskENTER_CRITICAL_core0();
        {
            /* If null is passed in here then it is the calling task_core0 that is
             * being deleted. */
            pxTCB_core0 = prvGetTCBFromHandle_core0( xTaskToDelete_core0 );

            /* Remove task_core0 from the ready/delayed list. */
            if( uxListRemove_core0( &( pxTCB_core0->xStateListItem_core0 ) ) == ( UBaseType_t_core0 ) 0 )
            {
                taskRESET_READY_PRIORITY_core0( pxTCB_core0->uxPriority_core0 );
            }
            else
            {
                mtCOVERAGE_TEST_MARKER_core0();
            }

            /* Is the task_core0 waiting on an event also? */
            if( listLIST_ITEM_CONTAINER_core0( &( pxTCB_core0->xEventListItem_core0 ) ) != NULL )
            {
                ( void ) uxListRemove_core0( &( pxTCB_core0->xEventListItem_core0 ) );
            }
            else
            {
                mtCOVERAGE_TEST_MARKER_core0();
            }

            /* Increment the uxTaskNumber_core0 also so kernel aware debuggers can
             * detect that the task_core0 lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK_core0() as in the Windows port that macro will
             * not return. */
            uxTaskNumber_core0++;

            if( pxTCB_core0 == pxCurrentTCB_core0 )
            {
                /* A task_core0 is deleting itself.  This cannot complete within the
                 * task_core0 itself, as a context switch to another task_core0 is required.
                 * Place the task_core0 in the termination list.  The idle task_core0 will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task_core0. */
                vListInsertEnd_core0( &xTasksWaitingTermination_core0, &( pxTCB_core0->xStateListItem_core0 ) );

                /* Increment the ucTasksDeleted variable so the idle task_core0 knows
                 * there is a task_core0 that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination_core0 list. */
                ++uxDeletedTasksWaitingCleanUp_core0;

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK_core0() as
                 * portPRE_TASK_DELETE_HOOK_core0() does not return in the Win32 port. */
                traceTASK_DELETE_core0( pxTCB_core0 );

                /* The pre-delete hook is primarily for the Windows simulator,
                 * in which Windows specific clean up operations are performed,
                 * after which it is not possible to yield away from this task_core0 -
                 * hence xYieldPending_core0 is used to latch that a context switch is
                 * required. */
                portPRE_TASK_DELETE_HOOK_core0( pxTCB_core0, &xYieldPending_core0 );
            }
            else
            {
                --uxCurrentNumberOfTasks_core0;
                traceTASK_DELETE_core0( pxTCB_core0 );

                /* Reset the next expected unblock time in case it referred to
                 * the task_core0 that has just been deleted. */
                prvResetNextTaskUnblockTime_core0();
            }
        }
        taskEXIT_CRITICAL_core0();

        /* If the task_core0 is not deleting itself, call prvDeleteTCB_core0 from outside of
         * critical section. If a task_core0 deletes itself, prvDeleteTCB_core0 is called
         * from prvCheckTasksWaitingTermination_core0 which is called from Idle task_core0. */
        if( pxTCB_core0 != pxCurrentTCB_core0 )
        {
            prvDeleteTCB_core0( pxTCB_core0 );
        }

        /* Force a reschedule if it is the currently running task_core0 that has just
         * been deleted. */
        if( xSchedulerRunning_core0 != pdFALSE_core0 )
        {
            if( pxTCB_core0 == pxCurrentTCB_core0 )
            {
                configASSERT_core0( uxSchedulerSuspended_core0 == 0 );
                portYIELD_WITHIN_API_core0();
            }
            else
            {
                mtCOVERAGE_TEST_MARKER_core0();
            }
        }
    }

#endif /* INCLUDE_vTaskDelete_core0 */
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskDelayUntil_core0 == 1 )

    BaseType_t_core0 xTaskDelayUntil( TickType_t_core0 * const pxPreviousWakeTime_core0,
                                const TickType_t_core0 xTimeIncrement_core0 )
    {
        TickType_t_core0 xTimeToWake_core0;
        BaseType_t_core0 xAlreadyYielded_core0, xShouldDelay_core0 = pdFALSE_core0;

        configASSERT_core0( pxPreviousWakeTime_core0 );
        configASSERT_core0( ( xTimeIncrement_core0 > 0U ) );
        configASSERT_core0( uxSchedulerSuspended_core0 == 0 );

        vTaskSuspendAll_core0();
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t_core0 xConstTickCount_core0 = xTickCount_core0;

            /* Generate the tick time at which the task_core0 wants to wake. */
            xTimeToWake_core0 = *pxPreviousWakeTime_core0 + xTimeIncrement_core0;

            if( xConstTickCount_core0 < *pxPreviousWakeTime_core0 )
            {
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake_core0 < *pxPreviousWakeTime_core0 ) && ( xTimeToWake_core0 > xConstTickCount_core0 ) )
                {
                    xShouldDelay_core0 = pdTRUE_core0;
                }
                else
                {
                    mtCOVERAGE_TEST_MARKER_core0();
                }
            }
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake_core0 < *pxPreviousWakeTime_core0 ) || ( xTimeToWake_core0 > xConstTickCount_core0 ) )
                {
                    xShouldDelay_core0 = pdTRUE_core0;
                }
                else
                {
                    mtCOVERAGE_TEST_MARKER_core0();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime_core0 = xTimeToWake_core0;

            if( xShouldDelay_core0 != pdFALSE_core0 )
            {
                traceTASK_DELAY_UNTIL( xTimeToWake_core0 );

                /* prvAddCurrentTaskToDelayedList_core0() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList_core0( xTimeToWake_core0 - xConstTickCount_core0, pdFALSE_core0 );
            }
            else
            {
                mtCOVERAGE_TEST_MARKER_core0();
            }
        }
        xAlreadyYielded_core0 = xTaskResumeAll_core0();

        /* Force a reschedule if xTaskResumeAll_core0 has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded_core0 == pdFALSE_core0 )
        {
            portYIELD_WITHIN_API_core0();
        }
        else
        {
            mtCOVERAGE_TEST_MARKER_core0();
        }

        return xShouldDelay_core0;
    }

#endif /* INCLUDE_xTaskDelayUntil_core0 */
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay_core0 == 1 )

    void vTaskDelay_core0( const TickType_t_core0 xTicksToDelay_core0 )
    {
        BaseType_t_core0 xAlreadyYielded_core0 = pdFALSE_core0;

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay_core0 > ( TickType_t_core0 ) 0U )
        {
            configASSERT_core0( uxSchedulerSuspended_core0 == 0 );
            vTaskSuspendAll_core0();
            {
                traceTASK_DELAY_core0();

                /* A task_core0 that is removed from the event list while the
                 * scheduler is suspended will not get placed in the ready
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task_core0 cannot be in an event list as it is the currently
                 * executing task_core0. */
                prvAddCurrentTaskToDelayedList_core0( xTicksToDelay_core0, pdFALSE_core0 );
            }
            xAlreadyYielded_core0 = xTaskResumeAll_core0();
        }
        else
        {
            mtCOVERAGE_TEST_MARKER_core0();
        }

        /* Force a reschedule if xTaskResumeAll_core0 has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded_core0 == pdFALSE_core0 )
        {
            portYIELD_WITHIN_API_core0();
        }
        else
        {
            mtCOVERAGE_TEST_MARKER_core0();
        }
    }

#endif /* INCLUDE_vTaskDelay_core0 */
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_eTaskGetState_core0 == 1 ) || ( configUSE_TRACE_FACILITY_core0 == 1 ) || ( INCLUDE_xTaskAbortDelay_core0 == 1 ) )

    eTaskState_core0 eTaskGetState_core0( TaskHandle_t_core0 xTask_core0 )
    {
        eTaskState_core0 eReturn_core0;
        List_t_core0 const * pxStateList_core0;
        List_t_core0 const * pxDelayedList_core0;
        List_t_core0 const * pxOverflowedDelayedList_core0;
        const TCB_t_core0 * const pxTCB_core0 = xTask_core0;

        configASSERT_core0( pxTCB_core0 );

        if( pxTCB_core0 == pxCurrentTCB_core0 )
        {
            /* The task_core0 calling this function is querying its own state. */
            eReturn_core0 = eRunning_core0;
        }
        else
        {
            taskENTER_CRITICAL_core0();
            {
                pxStateList_core0 = listLIST_ITEM_CONTAINER_core0( &( pxTCB_core0->xStateListItem_core0 ) );
                pxDelayedList_core0 = pxDelayedTaskList_core0;
                pxOverflowedDelayedList_core0 = pxOverflowDelayedTaskList_core0;
            }
            taskEXIT_CRITICAL_core0();

            if( ( pxStateList_core0 == pxDelayedList_core0 ) || ( pxStateList_core0 == pxOverflowedDelayedList_core0 ) )
            {
                /* The task_core0 being queried is referenced from one of the Blocked
                 * lists. */
                eReturn_core0 = eBlocked_core0;
            }

            #if ( INCLUDE_vTaskSuspend_core0 == 1 )
                else if( pxStateList_core0 == &xSuspendedTaskList_core0 )
                {
                    /* The task_core0 being queried is referenced from the suspended
                     * list.  Is it genuinely suspended or is it blocked
                     * indefinitely? */
                    if( listLIST_ITEM_CONTAINER_core0( &( pxTCB_core0->xEventListItem_core0 ) ) == NULL )
                    {
                        #if ( configUSE_TASK_NOTIFICATIONS_core0 == 1 )
                        {
                            BaseType_t_core0 x;

                            /* The task_core0 does not appear on the event list item of
                             * and of the RTOS objects, but could still be in the
                             * blocked state if it is waiting on its notification
                             * rather than waiting on an object.  If not, is
                             * suspended. */
                            eReturn_core0 = eSuspended_core0;

                            for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES_core0; x++ )
                            {
                                if( pxTCB_core0->ucNotifyState_core0[ x ] == taskWAITING_NOTIFICATION_core0 )
                                {
                                    eReturn_core0 = eBlocked_core0;
                                    break;
                                }
                            }
                        }
                        #else /* if ( configUSE_TASK_NOTIFICATIONS_core0 == 1 ) */
                        {
                            eReturn_core0 = eSuspended_core0;
                        }
                        #endif /* if ( configUSE_TASK_NOTIFICATIONS_core0 == 1 ) */
                    }
                    else
                    {
                        eReturn_core0 = eBlocked_core0;
                    }
                }
            #endif /* if ( INCLUDE_vTaskSuspend_core0 == 1 ) */

            #if ( INCLUDE_vTaskDelete_core0 == 1 )
                else if( ( pxStateList_core0 == &xTasksWaitingTermination_core0 ) || ( pxStateList_core0 == NULL ) )
                {
                    /* The task_core0 being queried is referenced from the deleted
                     * tasks list, or it is not referenced from any lists at
                     * all. */
                    eReturn_core0 = eDeleted_core0;
                }
            #endif

            else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
            {
                /* If the task_core0 is not in any other state, it must be in the
                 * Ready (including pending ready) state. */
                eReturn_core0 = eReady_core0;
            }
        }

        return eReturn_core0;
    } /*lint !e818 xTask_core0 cannot be a pointer to const because it is a typedef. */

#endif /* INCLUDE_eTaskGetState_core0 */
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet_core0 == 1 )

    UBaseType_t_core0 uxTaskPriorityGet_core0( const TaskHandle_t_core0 xTask_core0 )
    {
        TCB_t_core0 const * pxTCB_core0;
        UBaseType_t_core0 uxReturn_core0;

        taskENTER_CRITICAL_core0();
        {
            /* If null is passed in here then it is the priority of the task_core0
             * that called uxTaskPriorityGet_core0() that is being queried. */
            pxTCB_core0 = prvGetTCBFromHandle_core0( xTask_core0 );
            uxReturn_core0 = pxTCB_core0->uxPriority_core0;
        }
        taskEXIT_CRITICAL_core0();

        return uxReturn_core0;
    }

#endif /* INCLUDE_uxTaskPriorityGet_core0 */
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet_core0 == 1 )

    UBaseType_t_core0 uxTaskPriorityGetFromISR_core0( const TaskHandle_t_core0 xTask_core0 )
    {
        TCB_t_core0 const * pxTCB_core0;
        UBaseType_t_core0 uxReturn_core0, uxSavedInterruptState_core0;

        /* RTOS ports that support interrupt nesting have the concept of a
         * maximum  system call (or maximum API call) interrupt priority.
         * Interrupts that are  above the maximum system call priority are keep
         * permanently enabled, even when the RTOS kernel is in a critical section,
         * but cannot make any calls to FreeRTOS_core0 API functions.  If configASSERT_core0()
         * is defined in FreeRTOSConfig.h then
         * portASSERT_IF_INTERRUPT_PRIORITY_INVALID_core0() will result in an assertion
         * failure if a FreeRTOS_core0 API function is called from an interrupt that has
         * been assigned a priority above the configured maximum system call
         * priority.  Only FreeRTOS_core0 functions that end in FromISR can be called
         * from interrupts  that have been assigned a priority at or (logically)
         * below the maximum system call interrupt priority.  FreeRTOS_core0 maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS_core0.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID_core0();

        uxSavedInterruptState_core0 = portSET_INTERRUPT_MASK_FROM_ISR_core0();
        {
            /* If null is passed in here then it is the priority of the calling
             * task_core0 that is being queried. */
            pxTCB_core0 = prvGetTCBFromHandle_core0( xTask_core0 );
            uxReturn_core0 = pxTCB_core0->uxPriority_core0;
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR_core0( uxSavedInterruptState_core0 );

        return uxReturn_core0;
    }

#endif /* INCLUDE_uxTaskPriorityGet_core0 */
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet_core0 == 1 )

    void vTaskPrioritySet_core0( TaskHandle_t_core0 xTask_core0,
                           UBaseType_t_core0 uxNewPriority_core0 )
    {
        TCB_t_core0 * pxTCB_core0;
        UBaseType_t_core0 uxCurrentBasePriority_core0, uxPriorityUsedOnEntry_core0;
        BaseType_t_core0 xYieldRequired_core0 = pdFALSE_core0;

        configASSERT_core0( uxNewPriority_core0 < configMAX_PRIORITIES_core0 );

        /* Ensure the new priority is valid. */
        if( uxNewPriority_core0 >= ( UBaseType_t_core0 ) configMAX_PRIORITIES_core0 )
        {
            uxNewPriority_core0 = ( UBaseType_t_core0 ) configMAX_PRIORITIES_core0 - ( UBaseType_t_core0 ) 1U;
        }
        else
        {
            mtCOVERAGE_TEST_MARKER_core0();
        }

        taskENTER_CRITICAL_core0();
        {
            /* If null is passed in here then it is the priority of the calling
             * task_core0 that is being changed. */
            pxTCB_core0 = prvGetTCBFromHandle_core0( xTask_core0 );

            traceTASK_PRIORITY_SET_core0( pxTCB_core0, uxNewPriority_core0 );

            #if ( configUSE_MUTEXES_core0 == 1 )
            {
                uxCurrentBasePriority_core0 = pxTCB_core0->uxBasePriority_core0;
            }
            #else
            {
                uxCurrentBasePriority_core0 = pxTCB_core0->uxPriority_core0;
            }
            #endif

            if( uxCurrentBasePriority_core0 != uxNewPriority_core0 )
            {
                /* The priority change may have readied a task_core0 of higher
                 * priority than the calling task_core0. */
                if( uxNewPriority_core0 > uxCurrentBasePriority_core0 )
                {
                    if( pxTCB_core0 != pxCurrentTCB_core0 )
                    {
                        /* The priority of a task_core0 other than the currently
                         * running task_core0 is being raised.  Is the priority being
                         * raised above that of the running task_core0? */
                        if( uxNewPriority_core0 >= pxCurrentTCB_core0->uxPriority_core0 )
                        {
                            xYieldRequired_core0 = pdTRUE_core0;
                        }
                        else
                        {
                            mtCOVERAGE_TEST_MARKER_core0();
                        }
                    }
                    else
                    {
                        /* The priority of the running task_core0 is being raised,
                         * but the running task_core0 must already be the highest
                         * priority task_core0 able to run so no yield is required. */
                    }
                }
                else if( pxTCB_core0 == pxCurrentTCB_core0 )
                {
                    /* Setting the priority of the running task_core0 down means
                     * there may now be another task_core0 of higher priority that
                     * is ready to execute. */
                    xYieldRequired_core0 = pdTRUE_core0;
                }
                else
                {
                    /* Setting the priority of any other task_core0 down does not
                     * require a yield as the running task_core0 must be above the
                     * new priority of the task_core0 being modified. */
                }

                /* Remember the ready list the task_core0 might be referenced from
                 * before its uxPriority_core0 member is changed so the
                 * taskRESET_READY_PRIORITY_core0() macro can function correctly. */
                uxPriorityUsedOnEntry_core0 = pxTCB_core0->uxPriority_core0;

                #if ( configUSE_MUTEXES_core0 == 1 )
                {
                    /* Only change the priority being used if the task_core0 is not
                     * currently using an inherited priority. */
                    if( pxTCB_core0->uxBasePriority_core0 == pxTCB_core0->uxPriority_core0 )
                    {
                        pxTCB_core0->uxPriority_core0 = uxNewPriority_core0;
                    }
                    else
                    {
                        mtCOVERAGE_TEST_MARKER_core0();
                    }

                    /* The base priority gets set whatever. */
                    pxTCB_core0->uxBasePriority_core0 = uxNewPriority_core0;
                }
                #else /* if ( configUSE_MUTEXES_core0 == 1 ) */
                {
                    pxTCB_core0->uxPriority_core0 = uxNewPriority_core0;
                }
                #endif /* if ( configUSE_MUTEXES_core0 == 1 ) */

                /* Only reset the event list item value if the value is not
                 * being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE_core0( &( pxTCB_core0->xEventListItem_core0 ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE_core0 ) == 0UL )
                {
                    listSET_LIST_ITEM_VALUE_core0( &( pxTCB_core0->xEventListItem_core0 ), ( ( TickType_t_core0 ) configMAX_PRIORITIES_core0 - ( TickType_t_core0 ) uxNewPriority_core0 ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
                }
                else
                {
                    mtCOVERAGE_TEST_MARKER_core0();
                }

                /* If the task_core0 is in the blocked or suspended list we need do
                 * nothing more than change its priority variable. However, if
                 * the task_core0 is in a ready list it needs to be removed and placed
                 * in the list appropriate to its new priority. */
                if( listIS_CONTAINED_WITHIN_core0( &( pxReadyTasksLists_core0[ uxPriorityUsedOnEntry_core0 ] ), &( pxTCB_core0->xStateListItem_core0 ) ) != pdFALSE_core0 )
                {
                    /* The task_core0 is currently in its ready list - remove before
                     * adding it to its new ready list.  As we are in a critical
                     * section we can do this even if the scheduler is suspended. */
                    if( uxListRemove_core0( &( pxTCB_core0->xStateListItem_core0 ) ) == ( UBaseType_t_core0 ) 0 )
                    {
                        /* It is known that the task_core0 is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY_core0( uxPriorityUsedOnEntry_core0, uxTopReadyPriority_core0 );
                    }
                    else
                    {
                        mtCOVERAGE_TEST_MARKER_core0();
                    }

                    prvAddTaskToReadyList_core0( pxTCB_core0 );
                }
                else
                {
                    mtCOVERAGE_TEST_MARKER_core0();
                }

                if( xYieldRequired_core0 != pdFALSE_core0 )
                {
                    taskYIELD_IF_USING_PREEMPTION_core0();
                }
                else
                {
                    mtCOVERAGE_TEST_MARKER_core0();
                }

                /* Remove compiler warning about unused variables when the port
                 * optimised task_core0 selection is not being used. */
                ( void ) uxPriorityUsedOnEntry_core0;
            }
        }
        taskEXIT_CRITICAL_core0();
    }

#endif /* INCLUDE_vTaskPrioritySet_core0 */
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend_core0 == 1 )

    void vTaskSuspend_core0( TaskHandle_t_core0 xTaskToSuspend_core0 )
    {
        TCB_t_core0 * pxTCB_core0;

        taskENTER_CRITICAL_core0();
        {
            /* If null is passed in here then it is the running task_core0 that is
             * being suspended. */
            pxTCB_core0 = prvGetTCBFromHandle_core0( xTaskToSuspend_core0 );

            traceTASK_SUSPEND_core0( pxTCB_core0 );

            /* Remove task_core0 from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove_core0( &( pxTCB_core0->xStateListItem_core0 ) ) == ( UBaseType_t_core0 ) 0 )
            {
                taskRESET_READY_PRIORITY_core0( pxTCB_core0->uxPriority_core0 );
            }
            else
            {
                mtCOVERAGE_TEST_MARKER_core0();
            }

            /* Is the task_core0 waiting on an event also? */
            if( listLIST_ITEM_CONTAINER_core0( &( pxTCB_core0->xEventListItem_core0 ) ) != NULL )
            {
                ( void ) uxListRemove_core0( &( pxTCB_core0->xEventListItem_core0 ) );
            }
            else
            {
                mtCOVERAGE_TEST_MARKER_core0();
            }

            vListInsertEnd_core0( &xSuspendedTaskList_core0, &( pxTCB_core0->xStateListItem_core0 ) );

            #if ( configUSE_TASK_NOTIFICATIONS_core0 == 1 )
            {
                BaseType_t_core0 x;

                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES_core0; x++ )
                {
                    if( pxTCB_core0->ucNotifyState_core0[ x ] == taskWAITING_NOTIFICATION_core0 )
                    {
                        /* The task_core0 was blocked to wait for a notification, but is
                         * now suspended, so no notification was received. */
                        pxTCB_core0->ucNotifyState_core0[ x ] = taskNOT_WAITING_NOTIFICATION_core0;
                    }
                }
            }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS_core0 == 1 ) */
        }
        taskEXIT_CRITICAL_core0();

        if( xSchedulerRunning_core0 != pdFALSE_core0 )
        {
            /* Reset the next expected unblock time in case it referred to the
             * task_core0 that is now in the Suspended state. */
            taskENTER_CRITICAL_core0();
            {
                prvResetNextTaskUnblockTime_core0();
            }
            taskEXIT_CRITICAL_core0();
        }
        else
        {
            mtCOVERAGE_TEST_MARKER_core0();
        }

        if( pxTCB_core0 == pxCurrentTCB_core0 )
        {
            if( xSchedulerRunning_core0 != pdFALSE_core0 )
            {
                /* The current task_core0 has just been suspended. */
                configASSERT_core0( uxSchedulerSuspended_core0 == 0 );
                portYIELD_WITHIN_API_core0();
            }
            else
            {
                /* The scheduler is not running, but the task_core0 that was pointed
                 * to by pxCurrentTCB_core0 has just been suspended and pxCurrentTCB_core0
                 * must be adjusted to point to a different task_core0. */
                if( listCURRENT_LIST_LENGTH_core0( &xSuspendedTaskList_core0 ) == uxCurrentNumberOfTasks_core0 ) /*lint !e931 Right has no side effect, just volatile. */
                {
                    /* No other tasks are ready, so set pxCurrentTCB_core0 back to
                     * NULL so when the next task_core0 is created pxCurrentTCB_core0 will
                     * be set to point to it no matter what its relative priority
                     * is. */
                    pxCurrentTCB_core0 = NULL;
                }
                else
                {
                    vTaskSwitchContext_core0();
                }
            }
        }
        else
        {
            mtCOVERAGE_TEST_MARKER_core0();
        }
    }

#endif /* INCLUDE_vTaskSuspend_core0 */
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend_core0 == 1 )

    static BaseType_t_core0 prvTaskIsTaskSuspended_core0( const TaskHandle_t_core0 xTask_core0 )
    {
        BaseType_t_core0 xReturn_core0 = pdFALSE_core0;
        const TCB_t_core0 * const pxTCB_core0 = xTask_core0;

        /* Accesses xPendingReadyList_core0 so must be called from a critical
         * section. */

        /* It does not make sense to check if the calling task_core0 is suspended. */
        configASSERT_core0( xTask_core0 );

        /* Is the task_core0 being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN_core0( &xSuspendedTaskList_core0, &( pxTCB_core0->xStateListItem_core0 ) ) != pdFALSE_core0 )
        {
            /* Has the task_core0 already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN_core0( &xPendingReadyList_core0, &( pxTCB_core0->xEventListItem_core0 ) ) == pdFALSE_core0 )
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN_core0( NULL, &( pxTCB_core0->xEventListItem_core0 ) ) != pdFALSE_core0 ) /*lint !e961.  The cast is only redundant when NULL is used. */
                {
                    xReturn_core0 = pdTRUE_core0;
                }
                else
                {
                    mtCOVERAGE_TEST_MARKER_core0();
                }
            }
            else
            {
                mtCOVERAGE_TEST_MARKER_core0();
            }
        }
        else
        {
            mtCOVERAGE_TEST_MARKER_core0();
        }

        return xReturn_core0;
    } /*lint !e818 xTask_core0 cannot be a pointer to const because it is a typedef. */

#endif /* INCLUDE_vTaskSuspend_core0 */
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend_core0 == 1 )

    void vTaskResume_core0( TaskHandle_t_core0 xTaskToResume_core0 )
    {
        TCB_t_core0 * const pxTCB_core0 = xTaskToResume_core0;

        /* It does not make sense to resume the calling task_core0. */
        configASSERT_core0( xTaskToResume_core0 );

        /* The parameter cannot be NULL as it is impossible to resume the
         * currently executing task_core0. */
        if( ( pxTCB_core0 != pxCurrentTCB_core0 ) && ( pxTCB_core0 != NULL ) )
        {
            taskENTER_CRITICAL_core0();
            {
                if( prvTaskIsTaskSuspended_core0( pxTCB_core0 ) != pdFALSE_core0 )
                {
                    traceTASK_RESUME_core0( pxTCB_core0 );

                    /* The ready list can be accessed even if the scheduler is
                     * suspended because this is inside a critical section. */
                    ( void ) uxListRemove_core0( &( pxTCB_core0->xStateListItem_core0 ) );
                    prvAddTaskToReadyList_core0( pxTCB_core0 );

                    /* A higher priority task_core0 may have just been resumed. */
                    if( pxTCB_core0->uxPriority_core0 >= pxCurrentTCB_core0->uxPriority_core0 )
                    {
                        /* This yield may not cause the task_core0 just resumed to run,
                         * but will leave the lists in the correct state for the
                         * next yield. */
                        taskYIELD_IF_USING_PREEMPTION_core0();
                    }
                    else
                    {
                        mtCOVERAGE_TEST_MARKER_core0();
                    }
                }
                else
                {
                    mtCOVERAGE_TEST_MARKER_core0();
                }
            }
            taskEXIT_CRITICAL_core0();
        }
        else
        {
            mtCOVERAGE_TEST_MARKER_core0();
        }
    }

#endif /* INCLUDE_vTaskSuspend_core0 */

/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend_core0 == 1 ) )

    BaseType_t_core0 xTaskResumeFromISR_core0( TaskHandle_t_core0 xTaskToResume_core0 )
    {
        BaseType_t_core0 xYieldRequired_core0 = pdFALSE_core0;
        TCB_t_core0 * const pxTCB_core0 = xTaskToResume_core0;
        UBaseType_t_core0 uxSavedInterruptStatus_core0;

        configASSERT_core0( xTaskToResume_core0 );

        /* RTOS ports that support interrupt nesting have the concept of a
         * maximum  system call (or maximum API call) interrupt priority.
         * Interrupts that are  above the maximum system call priority are keep
         * permanently enabled, even when the RTOS kernel is in a critical section,
         * but cannot make any calls to FreeRTOS_core0 API functions.  If configASSERT_core0()
         * is defined in FreeRTOSConfig.h then
         * portASSERT_IF_INTERRUPT_PRIORITY_INVALID_core0() will result in an assertion
         * failure if a FreeRTOS_core0 API function is called from an interrupt that has
         * been assigned a priority above the configured maximum system call
         * priority.  Only FreeRTOS_core0 functions that end in FromISR can be called
         * from interrupts  that have been assigned a priority at or (logically)
         * below the maximum system call interrupt priority.  FreeRTOS_core0 maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS_core0.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID_core0();

        uxSavedInterruptStatus_core0 = portSET_INTERRUPT_MASK_FROM_ISR_core0();
        {
            if( prvTaskIsTaskSuspended_core0( pxTCB_core0 ) != pdFALSE_core0 )
            {
                traceTASK_RESUME_FROM_ISR_core0( pxTCB_core0 );

                /* Check the ready lists can be accessed. */
                if( uxSchedulerSuspended_core0 == ( UBaseType_t_core0 ) pdFALSE_core0 )
                {
                    /* Ready lists can be accessed so move the task_core0 from the
                     * suspended list to the ready list directly. */
                    if( pxTCB_core0->uxPriority_core0 >= pxCurrentTCB_core0->uxPriority_core0 )
                    {
                        xYieldRequired_core0 = pdTRUE_core0;

                        /* Mark that a yield is pending in case the user is not
                         * using the return value to initiate a context switch
                         * from the ISR using portYIELD_FROM_ISR. */
                        xYieldPending_core0 = pdTRUE_core0;
                    }
                    else
                    {
                        mtCOVERAGE_TEST_MARKER_core0();
                    }

                    ( void ) uxListRemove_core0( &( pxTCB_core0->xStateListItem_core0 ) );
                    prvAddTaskToReadyList_core0( pxTCB_core0 );
                }
                else
                {
                    /* The delayed or ready lists cannot be accessed so the task_core0
                     * is held in the pending ready list until the scheduler is
                     * unsuspended. */
                    vListInsertEnd_core0( &( xPendingReadyList_core0 ), &( pxTCB_core0->xEventListItem_core0 ) );
                }
            }
            else
            {
                mtCOVERAGE_TEST_MARKER_core0();
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR_core0( uxSavedInterruptStatus_core0 );

        return xYieldRequired_core0;
    }

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend_core0 == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler_core0( void )
{
    BaseType_t_core0 xReturn_core0;

    /* Add the idle task_core0 at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION_core0 == 1 )
    {
        StaticTask_t_core0 * pxIdleTaskTCBBuffer_core0 = NULL;
        StackType_t_core0 * pxIdleTaskStackBuffer_core0 = NULL;
        uint32_t ulIdleTaskStackSize_core0;

        /* The Idle task_core0 is created using user provided RAM - obtain the
         * address of the RAM then create the idle task_core0. */
        vApplicationGetIdleTaskMemory_core0( &pxIdleTaskTCBBuffer_core0, &pxIdleTaskStackBuffer_core0, &ulIdleTaskStackSize_core0 );
        xIdleTaskHandle_core0 = xTaskCreateStatic_core0( prvIdleTask_core0,
                                             configIDLE_TASK_NAME_core0,
                                             ulIdleTaskStackSize_core0,
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT_core0,     /* In effect ( tskIDLE_PRIORITY_core0 | portPRIVILEGE_BIT_core0 ), but tskIDLE_PRIORITY_core0 is zero. */
                                             pxIdleTaskStackBuffer_core0,
                                             pxIdleTaskTCBBuffer_core0 ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle_core0 != NULL )
        {
            xReturn_core0 = pdPASS_core0;
        }
        else
        {
            xReturn_core0 = pdFAIL_core0;
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION_core0 == 1 ) */
    {
        /* The Idle task_core0 is being created using dynamically allocated RAM. */
        xReturn_core0 = xTaskCreate_core0( prvIdleTask_core0,
                               configIDLE_TASK_NAME_core0,
                               configMINIMAL_STACK_SIZE_core0,
                               ( void * ) NULL,
                               portPRIVILEGE_BIT_core0,  /* In effect ( tskIDLE_PRIORITY_core0 | portPRIVILEGE_BIT_core0 ), but tskIDLE_PRIORITY_core0 is zero. */
                               &xIdleTaskHandle_core0 ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION_core0 */

    #if ( configUSE_TIMERS_core0 == 1 )
    {
        if( xReturn_core0 == pdPASS_core0 )
        {
            xReturn_core0 = xTimerCreateTimerTask();
        }
        else
        {
            mtCOVERAGE_TEST_MARKER_core0();
        }
    }
    #endif /* configUSE_TIMERS_core0 */

    if( xReturn_core0 == pdPASS_core0 )
    {
        /* freertos_tasks_c_additions_init_core0() should only be called if the user
         * definable macro FREERTOS_TASKS_C_ADDITIONS_INIT_core0() is defined, as that is
         * the only macro called by the function. */
        #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT_core0
        {
            freertos_tasks_c_additions_init_core0();
        }
        #endif

        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler_core0().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task_core0
         * starts to run. */
        portDISABLE_INTERRUPTS_core0();

        #if ( ( configUSE_NEWLIB_REENTRANT_core0 == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT_core0 == 1 ) )
        {
            /* Switch C-Runtime's TLS Block to point to the TLS
             * block specific to the task_core0 that will run first. */
            configSET_TLS_BLOCK_core0( pxCurrentTCB_core0->xTLSBlock_core0 );
        }
        #endif

        xNextTaskUnblockTime_core0 = portMAX_DELAY_core0;
        xSchedulerRunning_core0 = pdTRUE_core0;
        xTickCount_core0 = ( TickType_t_core0 ) configINITIAL_TICK_COUNT_core0;

        /* If configGENERATE_RUN_TIME_STATS_core0 is defined then the following
         * macro must be defined to configure the timer/counter used to generate
         * the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS_core0
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        //portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN_core0();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler_core0();

        /* In most cases, xPortStartScheduler_core0() will not return. If it
         * returns pdTRUE_core0 then there was not enough heap memory available
         * to create either the Idle or the Timer task_core0. If it returned
         * pdFALSE_core0, then the application called xTaskEndScheduler().
         * Most ports don't implement xTaskEndScheduler() as there is
         * nothing to return to. */
    }
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS_core0 heap to create the idle task_core0
         * or the timer task_core0. */
        configASSERT_core0( xReturn_core0 != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY_core0 );
    }

    /* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
     * meaning xIdleTaskHandle_core0 is not used anywhere else. */
    ( void ) xIdleTaskHandle_core0;

    /* OpenOCD makes use of uxTopUsedPriority_core0 for thread debugging. Prevent uxTopUsedPriority_core0
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority_core0;
}
/*-----------------------------------------------------------*/

void vTaskEndScheduler_core0( void )
{
    /* Stop the scheduler interrupts and call the portable scheduler end
     * routine so the original ISRs can be restored if necessary.  The port
     * layer must ensure interrupts enable  bit is left in the correct state. */
    portDISABLE_INTERRUPTS_core0();
    xSchedulerRunning_core0 = pdFALSE_core0;
    vPortEndScheduler_core0();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll_core0( void )
{
    /* A critical section is not required as the variable is of type
     * BaseType_t_core0.  Please read Richard Barry's reply in the following link to a
     * post in the FreeRTOS_core0 support forum before reporting this as a bug! -
     * https://goo.gl/wu4acr */

    /* portSOFTWARE_BARRIER_core0() is only implemented for emulated/simulated ports that
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER_core0();

    /* The scheduler is suspended if uxSchedulerSuspended_core0 is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll_core0() to nest. */
    ++uxSchedulerSuspended_core0;

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER_core0();
}
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE_core0 != 0 )

    static TickType_t_core0 prvGetExpectedIdleTime_core0( void )
    {
        TickType_t_core0 xReturn_core0;
        UBaseType_t_core0 uxHigherPriorityReadyTasks_core0 = pdFALSE_core0;

        /* uxHigherPriorityReadyTasks_core0 takes care of the case where
         * configUSE_PREEMPTION_core0 is 0, so there may be tasks above the idle priority
         * task_core0 that are in the Ready state, even though the idle task_core0 is
         * running. */
        #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION_core0 == 0 )
        {
            if( uxTopReadyPriority_core0 > tskIDLE_PRIORITY_core0 )
            {
                uxHigherPriorityReadyTasks_core0 = pdTRUE_core0;
            }
        }
        #else
        {
            const UBaseType_t_core0 uxLeastSignificantBit_core0 = ( UBaseType_t_core0 ) 0x01;

            /* When port optimised task_core0 selection is used the uxTopReadyPriority_core0
             * variable is used as a bit map.  If bits other than the least
             * significant bit are set then there are tasks that have a priority
             * above the idle priority that are in the Ready state.  This takes
             * care of the case where the co-operative scheduler is in use. */
            if( uxTopReadyPriority_core0 > uxLeastSignificantBit_core0 )
            {
                uxHigherPriorityReadyTasks_core0 = pdTRUE_core0;
            }
        }
        #endif /* if ( configUSE_PORT_OPTIMISED_TASK_SELECTION_core0 == 0 ) */

        if( pxCurrentTCB_core0->uxPriority_core0 > tskIDLE_PRIORITY_core0 )
        {
            xReturn_core0 = 0;
        }
        else if( listCURRENT_LIST_LENGTH_core0( &( pxReadyTasksLists_core0[ tskIDLE_PRIORITY_core0 ] ) ) > 1 )
        {
            /* There are other idle priority tasks in the ready state.  If
             * time slicing is used then the very next tick interrupt must be
             * processed. */
            xReturn_core0 = 0;
        }
        else if( uxHigherPriorityReadyTasks_core0 != pdFALSE_core0 )
        {
            /* There are tasks in the Ready state that have a priority above the
             * idle priority.  This path can only be reached if
             * configUSE_PREEMPTION_core0 is 0. */
            xReturn_core0 = 0;
        }
        else
        {
            xReturn_core0 = xNextTaskUnblockTime_core0 - xTickCount_core0;
        }

        return xReturn_core0;
    }

#endif /* configUSE_TICKLESS_IDLE_core0 */
/*----------------------------------------------------------*/

BaseType_t_core0 xTaskResumeAll_core0( void )
{
    TCB_t_core0 * pxTCB_core0 = NULL;
    BaseType_t_core0 xAlreadyYielded_core0 = pdFALSE_core0;

    /* If uxSchedulerSuspended_core0 is zero then this function does not match a
     * previous call to vTaskSuspendAll_core0(). */
    configASSERT_core0( uxSchedulerSuspended_core0 );

    /* It is possible that an ISR caused a task_core0 to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task_core0 will have been added to the xPendingReadyList_core0.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL_core0();
    {
        --uxSchedulerSuspended_core0;

        if( uxSchedulerSuspended_core0 == ( UBaseType_t_core0 ) pdFALSE_core0 )
        {
            if( uxCurrentNumberOfTasks_core0 > ( UBaseType_t_core0 ) 0U )
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY_core0( &xPendingReadyList_core0 ) == pdFALSE_core0 )
                {
                    pxTCB_core0 = listGET_OWNER_OF_HEAD_ENTRY_core0( ( &xPendingReadyList_core0 ) ); /*lint !e9079 void * is used as this macro is used with timers_core0 and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
                    listREMOVE_ITEM_core0( &( pxTCB_core0->xEventListItem_core0 ) );
                    portMEMORY_BARRIER_core0();
                    listREMOVE_ITEM_core0( &( pxTCB_core0->xStateListItem_core0 ) );
                    prvAddTaskToReadyList_core0( pxTCB_core0 );

                    /* If the moved task_core0 has a priority higher than or equal to
                     * the current task_core0 then a yield must be performed. */
                    if( pxTCB_core0->uxPriority_core0 >= pxCurrentTCB_core0->uxPriority_core0 )
                    {
                        xYieldPending_core0 = pdTRUE_core0;
                    }
                    else
                    {
                        mtCOVERAGE_TEST_MARKER_core0();
                    }
                }

                if( pxTCB_core0 != NULL )
                {
                    /* A task_core0 was unblocked while the scheduler was suspended,
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime_core0();
                }

                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t_core0 xPendedCounts_core0 = xPendedTicks_core0; /* Non-volatile copy. */

                    if( xPendedCounts_core0 > ( TickType_t_core0 ) 0U )
                    {
                        do
                        {
                            if( xTaskIncrementTick_core0() != pdFALSE_core0 )
                            {
                                xYieldPending_core0 = pdTRUE_core0;
                            }
                            else
                            {
                                mtCOVERAGE_TEST_MARKER_core0();
                            }

                            --xPendedCounts_core0;
                        } while( xPendedCounts_core0 > ( TickType_t_core0 ) 0U );

                        xPendedTicks_core0 = 0;
                    }
                    else
                    {
                        mtCOVERAGE_TEST_MARKER_core0();
                    }
                }

                if( xYieldPending_core0 != pdFALSE_core0 )
                {
                    #if ( configUSE_PREEMPTION_core0 != 0 )
                    {
                        xAlreadyYielded_core0 = pdTRUE_core0;
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION_core0();
                }
                else
                {
                    mtCOVERAGE_TEST_MARKER_core0();
                }
            }
        }
        else
        {
            mtCOVERAGE_TEST_MARKER_core0();
        }
    }
    taskEXIT_CRITICAL_core0();

    return xAlreadyYielded_core0;
}
/*-----------------------------------------------------------*/

TickType_t_core0 xTaskGetTickCount_core0( void )
{
    TickType_t_core0 xTicks_core0;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL_core0();
    {
        xTicks_core0 = xTickCount_core0;
    }
    portTICK_TYPE_EXIT_CRITICAL_core0();

    return xTicks_core0;
}
/*-----------------------------------------------------------*/

TickType_t_core0 xTaskGetTickCountFromISR_core0( void )
{
    TickType_t_core0 xReturn_core0;
    UBaseType_t_core0 uxSavedInterruptStatus_core0;

    /* RTOS ports that support interrupt nesting have the concept of a maximum
     * system call (or maximum API call) interrupt priority.  Interrupts that are
     * above the maximum system call priority are kept permanently enabled, even
     * when the RTOS kernel is in a critical section, but cannot make any calls to
     * FreeRTOS_core0 API functions.  If configASSERT_core0() is defined in FreeRTOSConfig.h
     * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID_core0() will result in an assertion
     * failure if a FreeRTOS_core0 API function is called from an interrupt that has been
     * assigned a priority above the configured maximum system call priority.
     * Only FreeRTOS_core0 functions that end in FromISR can be called from interrupts
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS_core0 maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS_core0.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID_core0();

    uxSavedInterruptStatus_core0 = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR_core0();
    {
        xReturn_core0 = xTickCount_core0;
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR_core0( uxSavedInterruptStatus_core0 );

    return xReturn_core0;
}
/*-----------------------------------------------------------*/

UBaseType_t_core0 uxTaskGetNumberOfTasks_core0( void )
{
    /* A critical section is not required because the variables are of type
     * BaseType_t_core0. */
    return uxCurrentNumberOfTasks_core0;
}
/*-----------------------------------------------------------*/

char * pcTaskGetName_core0( TaskHandle_t_core0 xTaskToQuery_core0 ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    TCB_t_core0 * pxTCB_core0;

    /* If null is passed in here then the name of the calling task_core0 is being
     * queried. */
    pxTCB_core0 = prvGetTCBFromHandle_core0( xTaskToQuery_core0 );
    configASSERT_core0( pxTCB_core0 );
    return &( pxTCB_core0->pcTaskName_core0[ 0 ] );
}
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle_core0 == 1 )

    static TCB_t_core0 * prvSearchForNameWithinSingleList_core0( List_t_core0 * pxList_core0,
                                                     const char pcNameToQuery_core0[] )
    {
        TCB_t_core0 * pxNextTCB_core0;
        TCB_t_core0 * pxFirstTCB_core0;
        TCB_t_core0 * pxReturn_core0 = NULL;
        UBaseType_t_core0 x;
        char cNextChar_core0;
        BaseType_t_core0 xBreakLoop_core0;

        /* This function is called with the scheduler suspended. */

        if( listCURRENT_LIST_LENGTH_core0( pxList_core0 ) > ( UBaseType_t_core0 ) 0 )
        {
            listGET_OWNER_OF_NEXT_ENTRY_core0( pxFirstTCB_core0, pxList_core0 ); /*lint !e9079 void * is used as this macro is used with timers_core0 and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */

            do
            {
                listGET_OWNER_OF_NEXT_ENTRY_core0( pxNextTCB_core0, pxList_core0 ); /*lint !e9079 void * is used as this macro is used with timers_core0 and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */

                /* Check each character in the name looking for a match or
                 * mismatch. */
                xBreakLoop_core0 = pdFALSE_core0;

                for( x = ( UBaseType_t_core0 ) 0; x < ( UBaseType_t_core0 ) configMAX_TASK_NAME_LEN_core0; x++ )
                {
                    cNextChar_core0 = pxNextTCB_core0->pcTaskName_core0[ x ];

                    if( cNextChar_core0 != pcNameToQuery_core0[ x ] )
                    {
                        /* Characters didn't match. */
                        xBreakLoop_core0 = pdTRUE_core0;
                    }
                    else if( cNextChar_core0 == ( char ) 0x00 )
                    {
                        /* Both strings terminated, a match must have been
                         * found. */
                        pxReturn_core0 = pxNextTCB_core0;
                        xBreakLoop_core0 = pdTRUE_core0;
                    }
                    else
                    {
                        mtCOVERAGE_TEST_MARKER_core0();
                    }

                    if( xBreakLoop_core0 != pdFALSE_core0 )
                    {
                        break;
                    }
                }

                if( pxReturn_core0 != NULL )
                {
                    /* The handle has been found. */
                    break;
                }
            } while( pxNextTCB_core0 != pxFirstTCB_core0 );
        }
        else
        {
            mtCOVERAGE_TEST_MARKER_core0();
        }

        return pxReturn_core0;
    }

#endif /* INCLUDE_xTaskGetHandle_core0 */
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle_core0 == 1 )

    TaskHandle_t_core0 xTaskGetHandle( const char * pcNameToQuery_core0 ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
        UBaseType_t_core0 uxQueue = configMAX_PRIORITIES_core0;
        TCB_t_core0 * pxTCB_core0;

        /* Task names will be truncated to configMAX_TASK_NAME_LEN_core0 - 1 bytes. */
        configASSERT_core0( strlen( pcNameToQuery_core0 ) < configMAX_TASK_NAME_LEN_core0 );

        vTaskSuspendAll_core0();
        {
            /* Search the ready lists. */
            do
            {
                uxQueue--;
                pxTCB_core0 = prvSearchForNameWithinSingleList_core0( ( List_t_core0 * ) &( pxReadyTasksLists_core0[ uxQueue ] ), pcNameToQuery_core0 );

                if( pxTCB_core0 != NULL )
                {
                    /* Found the handle. */
                    break;
                }
            } while( uxQueue > ( UBaseType_t_core0 ) tskIDLE_PRIORITY_core0 ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

            /* Search the delayed lists. */
            if( pxTCB_core0 == NULL )
            {
                pxTCB_core0 = prvSearchForNameWithinSingleList_core0( ( List_t_core0 * ) pxDelayedTaskList_core0, pcNameToQuery_core0 );
            }

            if( pxTCB_core0 == NULL )
            {
                pxTCB_core0 = prvSearchForNameWithinSingleList_core0( ( List_t_core0 * ) pxOverflowDelayedTaskList_core0, pcNameToQuery_core0 );
            }

            #if ( INCLUDE_vTaskSuspend_core0 == 1 )
            {
                if( pxTCB_core0 == NULL )
                {
                    /* Search the suspended list. */
                    pxTCB_core0 = prvSearchForNameWithinSingleList_core0( &xSuspendedTaskList_core0, pcNameToQuery_core0 );
                }
            }
            #endif

            #if ( INCLUDE_vTaskDelete_core0 == 1 )
            {
                if( pxTCB_core0 == NULL )
                {
                    /* Search the deleted list. */
                    pxTCB_core0 = prvSearchForNameWithinSingleList_core0( &xTasksWaitingTermination_core0, pcNameToQuery_core0 );
                }
            }
            #endif
        }
        ( void ) xTaskResumeAll_core0();

        return pxTCB_core0;
    }

#endif /* INCLUDE_xTaskGetHandle_core0 */
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY_core0 == 1 )

    UBaseType_t_core0 uxTaskGetSystemState( TaskStatus_t_core0 * const pxTaskStatusArray_core0,
                                      const UBaseType_t_core0 uxArraySize,
                                      configRUN_TIME_COUNTER_TYPE_core0 * const pulTotalRunTime )
    {
        UBaseType_t_core0 uxTask = 0, uxQueue = configMAX_PRIORITIES_core0;

        vTaskSuspendAll_core0();
        {
            /* Is there a space in the array for each task_core0 in the system? */
            if( uxArraySize >= uxCurrentNumberOfTasks_core0 )
            {
                /* Fill in an TaskStatus_t_core0 structure with information on each
                 * task_core0 in the Ready state. */
                do
                {
                    uxQueue--;
                    uxTask += prvListTasksWithinSingleList_core0( &( pxTaskStatusArray_core0[ uxTask ] ), &( pxReadyTasksLists_core0[ uxQueue ] ), eReady_core0 );
                } while( uxQueue > ( UBaseType_t_core0 ) tskIDLE_PRIORITY_core0 ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

                /* Fill in an TaskStatus_t_core0 structure with information on each
                 * task_core0 in the Blocked state. */
                uxTask += prvListTasksWithinSingleList_core0( &( pxTaskStatusArray_core0[ uxTask ] ), ( List_t_core0 * ) pxDelayedTaskList_core0, eBlocked_core0 );
                uxTask += prvListTasksWithinSingleList_core0( &( pxTaskStatusArray_core0[ uxTask ] ), ( List_t_core0 * ) pxOverflowDelayedTaskList_core0, eBlocked_core0 );

                #if ( INCLUDE_vTaskDelete_core0 == 1 )
                {
                    /* Fill in an TaskStatus_t_core0 structure with information on
                     * each task_core0 that has been deleted but not yet cleaned up. */
                    uxTask += prvListTasksWithinSingleList_core0( &( pxTaskStatusArray_core0[ uxTask ] ), &xTasksWaitingTermination_core0, eDeleted_core0 );
                }
                #endif

                #if ( INCLUDE_vTaskSuspend_core0 == 1 )
                {
                    /* Fill in an TaskStatus_t_core0 structure with information on
                     * each task_core0 in the Suspended state. */
                    uxTask += prvListTasksWithinSingleList_core0( &( pxTaskStatusArray_core0[ uxTask ] ), &xSuspendedTaskList_core0, eSuspended_core0 );
                }
                #endif

                #if ( configGENERATE_RUN_TIME_STATS_core0 == 1 )
                {
                    if( pulTotalRunTime != NULL )
                    {
                        #ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
                            portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
                        #else
                            *pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
                        #endif
                    }
                }
                #else /* if ( configGENERATE_RUN_TIME_STATS_core0 == 1 ) */
                {
                    if( pulTotalRunTime != NULL )
                    {
                        *pulTotalRunTime = 0;
                    }
                }
                #endif /* if ( configGENERATE_RUN_TIME_STATS_core0 == 1 ) */
            }
            else
            {
                mtCOVERAGE_TEST_MARKER_core0();
            }
        }
        ( void ) xTaskResumeAll_core0();

        return uxTask;
    }

#endif /* configUSE_TRACE_FACILITY_core0 */
/*----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )

    TaskHandle_t_core0 xTaskGetIdleTaskHandle( void )
    {
        /* If xTaskGetIdleTaskHandle() is called before the scheduler has been
         * started, then xIdleTaskHandle_core0 will be NULL. */
        configASSERT_core0( ( xIdleTaskHandle_core0 != NULL ) );
        return xIdleTaskHandle_core0;
    }

#endif /* INCLUDE_xTaskGetIdleTaskHandle */
/*----------------------------------------------------------*/

/* This conditional compilation should use inequality to 0, not equality to 1.
 * This is to ensure vTaskStepTick() is available when user defined low power mode
 * implementations require configUSE_TICKLESS_IDLE_core0 to be set to a value other than
 * 1. */
#if ( configUSE_TICKLESS_IDLE_core0 != 0 )

    void vTaskStepTick( TickType_t_core0 xTicksToJump )
    {
        /* Correct the tick count value after a period during which the tick
         * was suppressed.  Note this does *not* call the tick hook function for
         * each stepped tick. */
        configASSERT_core0( ( xTickCount_core0 + xTicksToJump ) <= xNextTaskUnblockTime_core0 );

        if( ( xTickCount_core0 + xTicksToJump ) == xNextTaskUnblockTime_core0 )
        {
            /* Arrange for xTickCount_core0 to reach xNextTaskUnblockTime_core0 in
             * xTaskIncrementTick_core0() when the scheduler resumes.  This ensures
             * that any delayed tasks are resumed at the correct time. */
            configASSERT_core0( uxSchedulerSuspended_core0 );
            configASSERT_core0( xTicksToJump != ( TickType_t_core0 ) 0 );

            /* Prevent the tick interrupt modifying xPendedTicks_core0 simultaneously. */
            taskENTER_CRITICAL_core0();
            {
                xPendedTicks_core0++;
            }
            taskEXIT_CRITICAL_core0();
            xTicksToJump--;
        }
        else
        {
            mtCOVERAGE_TEST_MARKER_core0();
        }

        xTickCount_core0 += xTicksToJump;
        traceINCREASE_TICK_COUNT( xTicksToJump );
    }

#endif /* configUSE_TICKLESS_IDLE_core0 */
/*----------------------------------------------------------*/

BaseType_t_core0 xTaskCatchUpTicks( TickType_t_core0 xTicksToCatchUp )
{
    BaseType_t_core0 xYieldOccurred;

    /* Must not be called with the scheduler suspended as the implementation
     * relies on xPendedTicks_core0 being wound down to 0 in xTaskResumeAll_core0(). */
    configASSERT_core0( uxSchedulerSuspended_core0 == 0 );

    /* Use xPendedTicks_core0 to mimic xTicksToCatchUp number of ticks occurring when
     * the scheduler is suspended so the ticks are executed in xTaskResumeAll_core0(). */
    vTaskSuspendAll_core0();

    /* Prevent the tick interrupt modifying xPendedTicks_core0 simultaneously. */
    taskENTER_CRITICAL_core0();
    {
        xPendedTicks_core0 += xTicksToCatchUp;
    }
    taskEXIT_CRITICAL_core0();
    xYieldOccurred = xTaskResumeAll_core0();

    return xYieldOccurred;
}
/*----------------------------------------------------------*/

#if ( INCLUDE_xTaskAbortDelay_core0 == 1 )

    BaseType_t_core0 xTaskAbortDelay( TaskHandle_t_core0 xTask_core0 )
    {
        TCB_t_core0 * pxTCB_core0 = xTask_core0;
        BaseType_t_core0 xReturn_core0;

        configASSERT_core0( pxTCB_core0 );

        vTaskSuspendAll_core0();
        {
            /* A task_core0 can only be prematurely removed from the Blocked state if
             * it is actually in the Blocked state. */
            if( eTaskGetState_core0( xTask_core0 ) == eBlocked_core0 )
            {
                xReturn_core0 = pdPASS_core0;

                /* Remove the reference to the task_core0 from the blocked list.  An
                 * interrupt won't touch the xStateListItem_core0 because the
                 * scheduler is suspended. */
                ( void ) uxListRemove_core0( &( pxTCB_core0->xStateListItem_core0 ) );

                /* Is the task_core0 waiting on an event also?  If so remove it from
                 * the event list too.  Interrupts can touch the event list item,
                 * even though the scheduler is suspended, so a critical section
                 * is used. */
                taskENTER_CRITICAL_core0();
                {
                    if( listLIST_ITEM_CONTAINER_core0( &( pxTCB_core0->xEventListItem_core0 ) ) != NULL )
                    {
                        ( void ) uxListRemove_core0( &( pxTCB_core0->xEventListItem_core0 ) );

                        /* This lets the task_core0 know it was forcibly removed from the
                         * blocked state so it should not re-evaluate its block time and
                         * then block again. */
                        pxTCB_core0->ucDelayAborted_core0 = pdTRUE_core0;
                    }
                    else
                    {
                        mtCOVERAGE_TEST_MARKER_core0();
                    }
                }
                taskEXIT_CRITICAL_core0();

                /* Place the unblocked task_core0 into the appropriate ready list. */
                prvAddTaskToReadyList_core0( pxTCB_core0 );

                /* A task_core0 being unblocked cannot cause an immediate context
                 * switch if preemption is turned off. */
                #if ( configUSE_PREEMPTION_core0 == 1 )
                {
                    /* Preemption is on, but a context switch should only be
                     * performed if the unblocked task_core0 has a priority that is
                     * higher than the currently executing task_core0. */
                    if( pxTCB_core0->uxPriority_core0 > pxCurrentTCB_core0->uxPriority_core0 )
                    {
                        /* Pend the yield to be performed when the scheduler
                         * is unsuspended. */
                        xYieldPending_core0 = pdTRUE_core0;
                    }
                    else
                    {
                        mtCOVERAGE_TEST_MARKER_core0();
                    }
                }
                #endif /* configUSE_PREEMPTION_core0 */
            }
            else
            {
                xReturn_core0 = pdFAIL_core0;
            }
        }
        ( void ) xTaskResumeAll_core0();

        return xReturn_core0;
    }

#endif /* INCLUDE_xTaskAbortDelay_core0 */
/*----------------------------------------------------------*/

BaseType_t_core0 xTaskIncrementTick_core0( void )
{
    TCB_t_core0 * pxTCB_core0;
    TickType_t_core0 xItemValue;
    BaseType_t_core0 xSwitchRequired = pdFALSE_core0;

    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount_core0 );

    if( uxSchedulerSuspended_core0 == ( UBaseType_t_core0 ) pdFALSE_core0 )
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t_core0 xConstTickCount_core0 = xTickCount_core0 + ( TickType_t_core0 ) 1;

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount_core0 = xConstTickCount_core0;

        if( xConstTickCount_core0 == ( TickType_t_core0 ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
        {
            taskSWITCH_DELAYED_LISTS_core0();
        }
        else
        {
            mtCOVERAGE_TEST_MARKER_core0();
        }

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task_core0
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount_core0 >= xNextTaskUnblockTime_core0 )
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY_core0( pxDelayedTaskList_core0 ) != pdFALSE_core0 )
                {
                    /* The delayed list is empty.  Set xNextTaskUnblockTime_core0
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount_core0 >= xNextTaskUnblockTime_core0 ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime_core0 = portMAX_DELAY_core0; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
                    break;
                }
                else
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task_core0 at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB_core0 = listGET_OWNER_OF_HEAD_ENTRY_core0( pxDelayedTaskList_core0 ); /*lint !e9079 void * is used as this macro is used with timers_core0 and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
                    xItemValue = listGET_LIST_ITEM_VALUE_core0( &( pxTCB_core0->xStateListItem_core0 ) );

                    if( xConstTickCount_core0 < xItemValue )
                    {
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task_core0 at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime_core0. */
                        xNextTaskUnblockTime_core0 = xItemValue;
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
                    }
                    else
                    {
                        mtCOVERAGE_TEST_MARKER_core0();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM_core0( &( pxTCB_core0->xStateListItem_core0 ) );

                    /* Is the task_core0 waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER_core0( &( pxTCB_core0->xEventListItem_core0 ) ) != NULL )
                    {
                        listREMOVE_ITEM_core0( &( pxTCB_core0->xEventListItem_core0 ) );
                    }
                    else
                    {
                        mtCOVERAGE_TEST_MARKER_core0();
                    }

                    /* Place the unblocked task_core0 into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList_core0( pxTCB_core0 );

                    /* A task_core0 being unblocked cannot cause an immediate
                     * context switch if preemption is turned off. */
                    #if ( configUSE_PREEMPTION_core0 == 1 )
                    {
                        /* Preemption is on, but a context switch should
                         * only be performed if the unblocked task_core0's
                         * priority is higher than the currently executing
                         * task_core0.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB_core0->uxPriority_core0 > pxCurrentTCB_core0->uxPriority_core0 )
                        {
                            xSwitchRequired = pdTRUE_core0;
                        }
                        else
                        {
                            mtCOVERAGE_TEST_MARKER_core0();
                        }
                    }
                    #endif /* configUSE_PREEMPTION_core0 */
                }
            }
        }

        /* Tasks of equal priority to the currently running task_core0 will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION_core0 == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH_core0( &( pxReadyTasksLists_core0[ pxCurrentTCB_core0->uxPriority_core0 ] ) ) > ( UBaseType_t_core0 ) 1 )
            {
                xSwitchRequired = pdTRUE_core0;
            }
            else
            {
                mtCOVERAGE_TEST_MARKER_core0();
            }
        }
        #endif /* ( ( configUSE_PREEMPTION_core0 == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */

        #if ( configUSE_TICK_HOOK_core0 == 1 )
        {
            /* Guard against the tick hook being called when the pended tick
             * count is being unwound (when the scheduler is being unlocked). */
            if( xPendedTicks_core0 == ( TickType_t_core0 ) 0 )
            {
                vApplicationTickHook();
            }
            else
            {
                mtCOVERAGE_TEST_MARKER_core0();
            }
        }
        #endif /* configUSE_TICK_HOOK_core0 */

        #if ( configUSE_PREEMPTION_core0 == 1 )
        {
            if( xYieldPending_core0 != pdFALSE_core0 )
            {
                xSwitchRequired = pdTRUE_core0;
            }
            else
            {
                mtCOVERAGE_TEST_MARKER_core0();
            }
        }
        #endif /* configUSE_PREEMPTION_core0 */
    }
    else
    {
        ++xPendedTicks_core0;

        /* The tick hook gets called at regular intervals, even if the
         * scheduler is locked. */
        #if ( configUSE_TICK_HOOK_core0 == 1 )
        {
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
}
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG_core0 == 1 )

    void vTaskSetApplicationTaskTag( TaskHandle_t_core0 xTask_core0,
                                     TaskHookFunction_t_core0 pxHookFunction )
    {
        TCB_t_core0 * xTCB;

        /* If xTask_core0 is NULL then it is the task_core0 hook of the calling task_core0 that is
         * getting set. */
        if( xTask_core0 == NULL )
        {
            xTCB = ( TCB_t_core0 * ) pxCurrentTCB_core0;
        }
        else
        {
            xTCB = xTask_core0;
        }

        /* Save the hook function in the TCB.  A critical section is required as
         * the value can be accessed from an interrupt. */
        taskENTER_CRITICAL_core0();
        {
            xTCB->pxTaskTag_core0 = pxHookFunction;
        }
        taskEXIT_CRITICAL_core0();
    }

#endif /* configUSE_APPLICATION_TASK_TAG_core0 */
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG_core0 == 1 )

    TaskHookFunction_t_core0 xTaskGetApplicationTaskTag( TaskHandle_t_core0 xTask_core0 )
    {
        TCB_t_core0 * pxTCB_core0;
        TaskHookFunction_t_core0 xReturn_core0;

        /* If xTask_core0 is NULL then set the calling task_core0's hook. */
        pxTCB_core0 = prvGetTCBFromHandle_core0( xTask_core0 );

        /* Save the hook function in the TCB.  A critical section is required as
         * the value can be accessed from an interrupt. */
        taskENTER_CRITICAL_core0();
        {
            xReturn_core0 = pxTCB_core0->pxTaskTag_core0;
        }
        taskEXIT_CRITICAL_core0();

        return xReturn_core0;
    }

#endif /* configUSE_APPLICATION_TASK_TAG_core0 */
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG_core0 == 1 )

    TaskHookFunction_t_core0 xTaskGetApplicationTaskTagFromISR( TaskHandle_t_core0 xTask_core0 )
    {
        TCB_t_core0 * pxTCB_core0;
        TaskHookFunction_t_core0 xReturn_core0;
        UBaseType_t_core0 uxSavedInterruptStatus_core0;

        /* If xTask_core0 is NULL then set the calling task_core0's hook. */
        pxTCB_core0 = prvGetTCBFromHandle_core0( xTask_core0 );

        /* Save the hook function in the TCB.  A critical section is required as
         * the value can be accessed from an interrupt. */
        uxSavedInterruptStatus_core0 = portSET_INTERRUPT_MASK_FROM_ISR_core0();
        {
            xReturn_core0 = pxTCB_core0->pxTaskTag_core0;
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR_core0( uxSavedInterruptStatus_core0 );

        return xReturn_core0;
    }

#endif /* configUSE_APPLICATION_TASK_TAG_core0 */
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG_core0 == 1 )

    BaseType_t_core0 xTaskCallApplicationTaskHook( TaskHandle_t_core0 xTask_core0,
                                             void * pvParameter )
    {
        TCB_t_core0 * xTCB;
        BaseType_t_core0 xReturn_core0;

        /* If xTask_core0 is NULL then we are calling our own task_core0 hook. */
        if( xTask_core0 == NULL )
        {
            xTCB = pxCurrentTCB_core0;
        }
        else
        {
            xTCB = xTask_core0;
        }

        if( xTCB->pxTaskTag_core0 != NULL )
        {
            xReturn_core0 = xTCB->pxTaskTag_core0( pvParameter );
        }
        else
        {
            xReturn_core0 = pdFAIL_core0;
        }

        return xReturn_core0;
    }

#endif /* configUSE_APPLICATION_TASK_TAG_core0 */
/*-----------------------------------------------------------*/

void vTaskSwitchContext_core0( void )
{
    if( uxSchedulerSuspended_core0 != ( UBaseType_t_core0 ) pdFALSE_core0 )
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending_core0 = pdTRUE_core0;
    }
    else
    {
        xYieldPending_core0 = pdFALSE_core0;
        traceTASK_SWITCHED_OUT();

        #if ( configGENERATE_RUN_TIME_STATS_core0 == 1 )
        {
            #ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
                portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime_core0 );
            #else
                ulTotalRunTime_core0 = portGET_RUN_TIME_COUNTER_VALUE();
            #endif

            /* Add the amount of time the task_core0 has been running to the
             * accumulated time so far.  The time the task_core0 started running was
             * stored in ulTaskSwitchedInTime_core0.  Note that there is no overflow
             * protection here so count values are only valid until the timer
             * overflows.  The guard against negative values is to protect
             * against suspect run time stat counter implementations - which
             * are provided by the application, not the kernel. */
            if( ulTotalRunTime_core0 > ulTaskSwitchedInTime_core0 )
            {
                pxCurrentTCB_core0->ulRunTimeCounter_core0 += ( ulTotalRunTime_core0 - ulTaskSwitchedInTime_core0 );
            }
            else
            {
                mtCOVERAGE_TEST_MARKER_core0();
            }

            ulTaskSwitchedInTime_core0 = ulTotalRunTime_core0;
        }
        #endif /* configGENERATE_RUN_TIME_STATS_core0 */

        /* Check for stack overflow, if configured. */
        taskCHECK_FOR_STACK_OVERFLOW();

        /* Before the currently running task_core0 is switched out, save its errno. */
        #if ( configUSE_POSIX_ERRNO_core0 == 1 )
        {
            pxCurrentTCB_core0->iTaskErrno_core0 = FreeRTOS_errno_core0;
        }
        #endif

        /* Select a new task_core0 to run using either the generic C or port
         * optimised asm code. */
        taskSELECT_HIGHEST_PRIORITY_TASK_core0(); /*lint !e9079 void * is used as this macro is used with timers_core0 and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
        traceTASK_SWITCHED_IN_core0();

        /* After the new task_core0 is switched in, update the global errno. */
        #if ( configUSE_POSIX_ERRNO_core0 == 1 )
        {
            FreeRTOS_errno_core0 = pxCurrentTCB_core0->iTaskErrno_core0;
        }
        #endif

        #if ( ( configUSE_NEWLIB_REENTRANT_core0 == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT_core0 == 1 ) )
        {
            /* Switch C-Runtime's TLS Block to point to the TLS
             * Block specific to this task_core0. */
            configSET_TLS_BLOCK_core0( pxCurrentTCB_core0->xTLSBlock_core0 );
        }
        #endif
    }
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t_core0 * const pxEventList,
                            const TickType_t_core0 xTicksToWait_core0 )
{
    configASSERT_core0( pxEventList );

    /* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
     * SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task_core0
     * is the first to be woken by the event.
     *
     * Note: Lists are sorted in ascending order by ListItem_t_core0.xItemValue.
     * Normally, the xItemValue of a TCB's ListItem_t_core0 members is:
     *      xItemValue = ( configMAX_PRIORITIES_core0 - uxPriority_core0 )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert_core0( pxEventList, &( pxCurrentTCB_core0->xEventListItem_core0 ) );

    prvAddCurrentTaskToDelayedList_core0( xTicksToWait_core0, pdTRUE_core0 );
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t_core0 * pxEventList,
                                     const TickType_t_core0 xItemValue,
                                     const TickType_t_core0 xTicksToWait_core0 )
{
    configASSERT_core0( pxEventList );

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event groups implementation. */
    configASSERT_core0( uxSchedulerSuspended_core0 != 0 );

    /* Store the item value in the event list item.  It is safe to access the
     * event list item here as interrupts won't access the event list item of a
     * task_core0 that is not in the Blocked state. */
    listSET_LIST_ITEM_VALUE_core0( &( pxCurrentTCB_core0->xEventListItem_core0 ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE_core0 );

    /* Place the event list item of the TCB at the end of the appropriate event
     * list.  It is safe to access the event list here because it is part of an
     * event group implementation - and interrupts don't access event groups
     * directly (instead they access them indirectly by pending function calls to
     * the task_core0 level). */
    listINSERT_END_core0( pxEventList, &( pxCurrentTCB_core0->xEventListItem_core0 ) );

    prvAddCurrentTaskToDelayedList_core0( xTicksToWait_core0, pdTRUE_core0 );
}
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS_core0 == 1 )

    void vTaskPlaceOnEventListRestricted( List_t_core0 * const pxEventList,
                                          TickType_t_core0 xTicksToWait_core0,
                                          const BaseType_t_core0 xWaitIndefinitely )
    {
        configASSERT_core0( pxEventList );

        /* This function should not be called by application code hence the
         * 'Restricted' in its name.  It is not part of the public API.  It is
         * designed for use by kernel code, and has special calling requirements -
         * it should be called with the scheduler suspended. */


        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task_core0 that is going to
         * be waiting on this event list, so the faster vListInsertEnd_core0() function
         * can be used in place of vListInsert_core0. */
        listINSERT_END_core0( pxEventList, &( pxCurrentTCB_core0->xEventListItem_core0 ) );

        /* If the task_core0 should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList_core0() function. */
        if( xWaitIndefinitely != pdFALSE_core0 )
        {
            xTicksToWait_core0 = portMAX_DELAY_core0;
        }

        traceTASK_DELAY_UNTIL( ( xTickCount_core0 + xTicksToWait_core0 ) );
        prvAddCurrentTaskToDelayedList_core0( xTicksToWait_core0, xWaitIndefinitely );
    }

#endif /* configUSE_TIMERS_core0 */
/*-----------------------------------------------------------*/

BaseType_t_core0 xTaskRemoveFromEventList( const List_t_core0 * const pxEventList )
{
    TCB_t_core0 * pxUnblockedTCB;
    BaseType_t_core0 xReturn_core0;

    /* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
     * called from a critical section within an ISR. */

    /* The event list is sorted in priority order, so the first in the list can
     * be removed as it is known to be the highest priority.  Remove the TCB from
     * the delayed list, and add it to the ready list.
     *
     * If an event is for a queue that is locked then this function will never
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY_core0( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers_core0 and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    configASSERT_core0( pxUnblockedTCB );
    listREMOVE_ITEM_core0( &( pxUnblockedTCB->xEventListItem_core0 ) );

    if( uxSchedulerSuspended_core0 == ( UBaseType_t_core0 ) pdFALSE_core0 )
    {
        listREMOVE_ITEM_core0( &( pxUnblockedTCB->xStateListItem_core0 ) );
        prvAddTaskToReadyList_core0( pxUnblockedTCB );

        #if ( configUSE_TICKLESS_IDLE_core0 != 0 )
        {
            /* If a task_core0 is blocked on a kernel object then xNextTaskUnblockTime_core0
             * might be set to the blocked task_core0's time out time.  If the task_core0 is
             * unblocked for a reason other than a timeout xNextTaskUnblockTime_core0 is
             * normally left unchanged, because it is automatically reset to a new
             * value when the tick count equals xNextTaskUnblockTime_core0.  However if
             * tickless idling is used it might be more important to enter sleep mode
             * at the earliest possible time - so reset xNextTaskUnblockTime_core0 here to
             * ensure it is updated at the earliest possible time. */
            prvResetNextTaskUnblockTime_core0();
        }
        #endif
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task_core0
         * pending until the scheduler is resumed. */
        listINSERT_END_core0( &( xPendingReadyList_core0 ), &( pxUnblockedTCB->xEventListItem_core0 ) );
    }

    if( pxUnblockedTCB->uxPriority_core0 > pxCurrentTCB_core0->uxPriority_core0 )
    {
        /* Return true if the task_core0 removed from the event list has a higher
         * priority than the calling task_core0.  This allows the calling task_core0 to know if
         * it should force a context switch now. */
        xReturn_core0 = pdTRUE_core0;

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS_core0 function. */
        xYieldPending_core0 = pdTRUE_core0;
    }
    else
    {
        xReturn_core0 = pdFALSE_core0;
    }

    return xReturn_core0;
}
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t_core0 * pxEventListItem,
                                        const TickType_t_core0 xItemValue )
{
    TCB_t_core0 * pxUnblockedTCB;

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event flags implementation. */
    configASSERT_core0( uxSchedulerSuspended_core0 != pdFALSE_core0 );

    /* Store the new item value in the event list. */
    listSET_LIST_ITEM_VALUE_core0( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE_core0 );

    /* Remove the event list form the event flag.  Interrupts do not access
     * event flags. */
    pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers_core0 and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    configASSERT_core0( pxUnblockedTCB );
    listREMOVE_ITEM_core0( pxEventListItem );

    #if ( configUSE_TICKLESS_IDLE_core0 != 0 )
    {
        /* If a task_core0 is blocked on a kernel object then xNextTaskUnblockTime_core0
         * might be set to the blocked task_core0's time out time.  If the task_core0 is
         * unblocked for a reason other than a timeout xNextTaskUnblockTime_core0 is
         * normally left unchanged, because it is automatically reset to a new
         * value when the tick count equals xNextTaskUnblockTime_core0.  However if
         * tickless idling is used it might be more important to enter sleep mode
         * at the earliest possible time - so reset xNextTaskUnblockTime_core0 here to
         * ensure it is updated at the earliest possible time. */
        prvResetNextTaskUnblockTime_core0();
    }
    #endif

    /* Remove the task_core0 from the delayed list and add it to the ready list.  The
     * scheduler is suspended so interrupts will not be accessing the ready
     * lists. */
    listREMOVE_ITEM_core0( &( pxUnblockedTCB->xStateListItem_core0 ) );
    prvAddTaskToReadyList_core0( pxUnblockedTCB );

    if( pxUnblockedTCB->uxPriority_core0 > pxCurrentTCB_core0->uxPriority_core0 )
    {
        /* The unblocked task_core0 has a priority above that of the calling task_core0, so
         * a context switch is required.  This function is called with the
         * scheduler suspended so xYieldPending_core0 is set so the context switch
         * occurs immediately that the scheduler is resumed (unsuspended). */
        xYieldPending_core0 = pdTRUE_core0;
    }
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    configASSERT_core0( pxTimeOut );
    taskENTER_CRITICAL_core0();
    {
        pxTimeOut->xOverflowCount = xNumOfOverflows_core0;
        pxTimeOut->xTimeOnEntering = xTickCount_core0;
    }
    taskEXIT_CRITICAL_core0();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows_core0;
    pxTimeOut->xTimeOnEntering = xTickCount_core0;
}
/*-----------------------------------------------------------*/

BaseType_t_core0 xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t_core0 * const pxTicksToWait )
{
    BaseType_t_core0 xReturn_core0;

    configASSERT_core0( pxTimeOut );
    configASSERT_core0( pxTicksToWait );

    taskENTER_CRITICAL_core0();
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t_core0 xConstTickCount_core0 = xTickCount_core0;
        const TickType_t_core0 xElapsedTime = xConstTickCount_core0 - pxTimeOut->xTimeOnEntering;

        #if ( INCLUDE_xTaskAbortDelay_core0 == 1 )
            if( pxCurrentTCB_core0->ucDelayAborted_core0 != ( uint8_t ) pdFALSE_core0 )
            {
                /* The delay was aborted, which is not the same as a time out,
                 * but has the same result. */
                pxCurrentTCB_core0->ucDelayAborted_core0 = pdFALSE_core0;
                xReturn_core0 = pdTRUE_core0;
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend_core0 == 1 )
            if( *pxTicksToWait == portMAX_DELAY_core0 )
            {
                /* If INCLUDE_vTaskSuspend_core0 is set to 1 and the block time
                 * specified is the maximum block time then the task_core0 should block
                 * indefinitely, and therefore never time out. */
                xReturn_core0 = pdFALSE_core0;
            }
            else
        #endif

        if( ( xNumOfOverflows_core0 != pxTimeOut->xOverflowCount ) && ( xConstTickCount_core0 >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
        {
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn_core0 = pdTRUE_core0;
            *pxTicksToWait = ( TickType_t_core0 ) 0;
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
            vTaskInternalSetTimeOutState( pxTimeOut );
            xReturn_core0 = pdFALSE_core0;
        }
        else
        {
            *pxTicksToWait = ( TickType_t_core0 ) 0;
            xReturn_core0 = pdTRUE_core0;
        }
    }
    taskEXIT_CRITICAL_core0();

    return xReturn_core0;
}
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    xYieldPending_core0 = pdTRUE_core0;
}
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY_core0 == 1 )

    UBaseType_t_core0 uxTaskGetTaskNumber( TaskHandle_t_core0 xTask_core0 )
    {
        UBaseType_t_core0 uxReturn_core0;
        TCB_t_core0 const * pxTCB_core0;

        if( xTask_core0 != NULL )
        {
            pxTCB_core0 = xTask_core0;
            uxReturn_core0 = pxTCB_core0->uxTaskNumber_core0;
        }
        else
        {
            uxReturn_core0 = 0U;
        }

        return uxReturn_core0;
    }

#endif /* configUSE_TRACE_FACILITY_core0 */
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY_core0 == 1 )

    void vTaskSetTaskNumber( TaskHandle_t_core0 xTask_core0,
                             const UBaseType_t_core0 uxHandle )
    {
        TCB_t_core0 * pxTCB_core0;

        if( xTask_core0 != NULL )
        {
            pxTCB_core0 = xTask_core0;
            pxTCB_core0->uxTaskNumber_core0 = uxHandle;
        }
    }

#endif /* configUSE_TRACE_FACILITY_core0 */

/*
 * -----------------------------------------------------------
 * The Idle task_core0.
 * ----------------------------------------------------------
 *
 * The portTASK_FUNCTION() macro is used to allow port/compiler specific
 * language extensions.  The equivalent prototype for this function is:
 *
 * void prvIdleTask_core0( void *pvParameters_core0 );
 *
 */
static portTASK_FUNCTION( prvIdleTask_core0, pvParameters_core0 )
{
    /* Stop warnings. */
    ( void ) pvParameters_core0;

    /** THIS IS THE RTOS IDLE_core0 TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
     * SCHEDULER IS STARTED. **/

    /* In case a task_core0 that has a secure context deletes itself, in which case
     * the idle task_core0 is responsible for deleting the task_core0's secure context, if
     * any. */
    portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task_core0
         * is responsible for freeing the deleted task_core0's TCB and stack. */
        prvCheckTasksWaitingTermination_core0();

        #if ( configUSE_PREEMPTION_core0 == 0 )
        {
            /* If we are not using preemption we keep forcing a task_core0 switch to
             * see if any other task_core0 has become available.  If we are using
             * preemption we don't need to do this as any task_core0 becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
        }
        #endif /* configUSE_PREEMPTION_core0 */

        #if ( ( configUSE_PREEMPTION_core0 == 1 ) && ( configIDLE_SHOULD_YIELD_core0 == 1 ) )
        {
            /* When using preemption tasks of equal priority will be
             * timesliced.  If a task_core0 that is sharing the idle priority is ready
             * to run then the idle task_core0 should yield before the end of the
             * timeslice.
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task_core0
             * then a task_core0 other than the idle task_core0 is ready to execute. */
            if( listCURRENT_LIST_LENGTH_core0( &( pxReadyTasksLists_core0[ tskIDLE_PRIORITY_core0 ] ) ) > ( UBaseType_t_core0 ) 1 )
            {
                taskYIELD();
            }
            else
            {
                mtCOVERAGE_TEST_MARKER_core0();
            }
        }
        #endif /* ( ( configUSE_PREEMPTION_core0 == 1 ) && ( configIDLE_SHOULD_YIELD_core0 == 1 ) ) */

        #if ( configUSE_IDLE_HOOK_core0 == 1 )
        {
            extern void vApplicationIdleHook( void );

            /* Call the user defined function from within the idle task_core0.  This
             * allows the application designer to add background functionality
             * without the overhead of a separate task_core0.
             * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
             * CALL A FUNCTION THAT MIGHT BLOCK. */
            vApplicationIdleHook();
        }
        #endif /* configUSE_IDLE_HOOK_core0 */

        /* This conditional compilation should use inequality to 0, not equality
         * to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
         * user defined low power mode  implementations require
         * configUSE_TICKLESS_IDLE_core0 to be set to a value other than 1. */
        #if ( configUSE_TICKLESS_IDLE_core0 != 0 )
        {
            TickType_t_core0 xExpectedIdleTime;

            /* It is not desirable to suspend then resume the scheduler on
             * each iteration of the idle task_core0.  Therefore, a preliminary
             * test of the expected idle time is performed without the
             * scheduler suspended.  The result here is not necessarily
             * valid. */
            xExpectedIdleTime = prvGetExpectedIdleTime_core0();

            if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
            {
                vTaskSuspendAll_core0();
                {
                    /* Now the scheduler is suspended, the expected idle
                     * time can be sampled again, and this time its value can
                     * be used. */
                    configASSERT_core0( xNextTaskUnblockTime_core0 >= xTickCount_core0 );
                    xExpectedIdleTime = prvGetExpectedIdleTime_core0();

                    /* Define the following macro to set xExpectedIdleTime to 0
                     * if the application does not want
                     * portSUPPRESS_TICKS_AND_SLEEP() to be called. */
                    configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

                    if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
                    {
                        traceLOW_POWER_IDLE_BEGIN();
                        portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
                        traceLOW_POWER_IDLE_END();
                    }
                    else
                    {
                        mtCOVERAGE_TEST_MARKER_core0();
                    }
                }
                ( void ) xTaskResumeAll_core0();
            }
            else
            {
                mtCOVERAGE_TEST_MARKER_core0();
            }
        }
        #endif /* configUSE_TICKLESS_IDLE_core0 */
    }
}
/*-----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE_core0 != 0 )

    eSleepModeStatus eTaskConfirmSleepModeStatus( void )
    {
        #if ( INCLUDE_vTaskSuspend_core0 == 1 )
            /* The idle task_core0 exists in addition to the application tasks. */
            const UBaseType_t_core0 uxNonApplicationTasks = 1;
        #endif /* INCLUDE_vTaskSuspend_core0 */

        eSleepModeStatus eReturn_core0 = eStandardSleep;

        /* This function must be called from a critical section. */

        if( listCURRENT_LIST_LENGTH_core0( &xPendingReadyList_core0 ) != 0 )
        {
            /* A task_core0 was made ready while the scheduler was suspended. */
            eReturn_core0 = eAbortSleep;
        }
        else if( xYieldPending_core0 != pdFALSE_core0 )
        {
            /* A yield was pended while the scheduler was suspended. */
            eReturn_core0 = eAbortSleep;
        }
        else if( xPendedTicks_core0 != 0 )
        {
            /* A tick interrupt has already occurred but was held pending
             * because the scheduler is suspended. */
            eReturn_core0 = eAbortSleep;
        }

        #if ( INCLUDE_vTaskSuspend_core0 == 1 )
            else if( listCURRENT_LIST_LENGTH_core0( &xSuspendedTaskList_core0 ) == ( uxCurrentNumberOfTasks_core0 - uxNonApplicationTasks ) )
            {
                /* If all the tasks are in the suspended list (which might mean they
                 * have an infinite block time rather than actually being suspended)
                 * then it is safe to turn all clocks off and just wait for external
                 * interrupts. */
                eReturn_core0 = eNoTasksWaitingTimeout;
            }
        #endif /* INCLUDE_vTaskSuspend_core0 */
        else
        {
            mtCOVERAGE_TEST_MARKER_core0();
        }

        return eReturn_core0;
    }

#endif /* configUSE_TICKLESS_IDLE_core0 */
/*-----------------------------------------------------------*/

#if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS_core0 != 0 )

    void vTaskSetThreadLocalStoragePointer( TaskHandle_t_core0 xTaskToSet,
                                            BaseType_t_core0 xIndex,
                                            void * pvValue )
    {
        TCB_t_core0 * pxTCB_core0;

        if( ( xIndex >= 0 ) &&
            ( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS_core0 ) )
        {
            pxTCB_core0 = prvGetTCBFromHandle_core0( xTaskToSet );
            configASSERT_core0( pxTCB_core0 != NULL );
            pxTCB_core0->pvThreadLocalStoragePointers_core0[ xIndex ] = pvValue;
        }
    }

#endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS_core0 */
/*-----------------------------------------------------------*/

#if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS_core0 != 0 )

    void * pvTaskGetThreadLocalStoragePointer( TaskHandle_t_core0 xTaskToQuery_core0,
                                               BaseType_t_core0 xIndex )
    {
        void * pvReturn_core0 = NULL;
        TCB_t_core0 * pxTCB_core0;

        if( ( xIndex >= 0 ) &&
            ( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS_core0 ) )
        {
            pxTCB_core0 = prvGetTCBFromHandle_core0( xTaskToQuery_core0 );
            pvReturn_core0 = pxTCB_core0->pvThreadLocalStoragePointers_core0[ xIndex ];
        }
        else
        {
            pvReturn_core0 = NULL;
        }

        return pvReturn_core0;
    }

#endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS_core0 */
/*-----------------------------------------------------------*/

#if ( portUSING_MPU_WRAPPERS_core0 == 1 )

    void vTaskAllocateMPURegions( TaskHandle_t_core0 xTaskToModify,
                                  const MemoryRegion_t_core0 * const xRegions_core0 )
    {
        TCB_t_core0 * pxTCB_core0;

        /* If null is passed in here then we are modifying the MPU settings of
         * the calling task_core0. */
        pxTCB_core0 = prvGetTCBFromHandle_core0( xTaskToModify );

        vPortStoreTaskMPUSettings_core0( &( pxTCB_core0->xMPUSettings_core0 ), xRegions_core0, NULL, 0 );
    }

#endif /* portUSING_MPU_WRAPPERS_core0 */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists_core0( void )
{
    UBaseType_t_core0 uxPriority_core0;

    for( uxPriority_core0 = ( UBaseType_t_core0 ) 0U; uxPriority_core0 < ( UBaseType_t_core0 ) configMAX_PRIORITIES_core0; uxPriority_core0++ )
    {
        vListInitialise_core0( &( pxReadyTasksLists_core0[ uxPriority_core0 ] ) );
    }

    vListInitialise_core0( &xDelayedTaskList1_core0 );
    vListInitialise_core0( &xDelayedTaskList2_core0 );
    vListInitialise_core0( &xPendingReadyList_core0 );

    #if ( INCLUDE_vTaskDelete_core0 == 1 )
    {
        vListInitialise_core0( &xTasksWaitingTermination_core0 );
    }
    #endif /* INCLUDE_vTaskDelete_core0 */

    #if ( INCLUDE_vTaskSuspend_core0 == 1 )
    {
        vListInitialise_core0( &xSuspendedTaskList_core0 );
    }
    #endif /* INCLUDE_vTaskSuspend_core0 */

    /* Start with pxDelayedTaskList_core0 using list1 and the pxOverflowDelayedTaskList_core0
     * using list2. */
    pxDelayedTaskList_core0 = &xDelayedTaskList1_core0;
    pxOverflowDelayedTaskList_core0 = &xDelayedTaskList2_core0;
}
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination_core0( void )
{
    /** THIS FUNCTION IS CALLED FROM THE RTOS IDLE_core0 TASK **/

    #if ( INCLUDE_vTaskDelete_core0 == 1 )
    {
        TCB_t_core0 * pxTCB_core0;

        /* uxDeletedTasksWaitingCleanUp_core0 is used to prevent taskENTER_CRITICAL_core0()
         * being called too often in the idle task_core0. */
        while( uxDeletedTasksWaitingCleanUp_core0 > ( UBaseType_t_core0 ) 0U )
        {
            taskENTER_CRITICAL_core0();
            {
                pxTCB_core0 = listGET_OWNER_OF_HEAD_ENTRY_core0( ( &xTasksWaitingTermination_core0 ) ); /*lint !e9079 void * is used as this macro is used with timers_core0 and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
                ( void ) uxListRemove_core0( &( pxTCB_core0->xStateListItem_core0 ) );
                --uxCurrentNumberOfTasks_core0;
                --uxDeletedTasksWaitingCleanUp_core0;
            }
            taskEXIT_CRITICAL_core0();

            prvDeleteTCB_core0( pxTCB_core0 );
        }
    }
    #endif /* INCLUDE_vTaskDelete_core0 */
}
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY_core0 == 1 )

    void vTaskGetInfo( TaskHandle_t_core0 xTask_core0,
                       TaskStatus_t_core0 * pxTaskStatus,
                       BaseType_t_core0 xGetFreeStackSpace,
                       eTaskState_core0 eState_core0 )
    {
        TCB_t_core0 * pxTCB_core0;

        /* xTask_core0 is NULL then get the state of the calling task_core0. */
        pxTCB_core0 = prvGetTCBFromHandle_core0( xTask_core0 );

        pxTaskStatus->xHandle = ( TaskHandle_t_core0 ) pxTCB_core0;
        pxTaskStatus->pcTaskName_core0 = ( const char * ) &( pxTCB_core0->pcTaskName_core0[ 0 ] );
        pxTaskStatus->uxCurrentPriority = pxTCB_core0->uxPriority_core0;
        pxTaskStatus->pxStackBase = pxTCB_core0->pxStack_core0;
        #if ( ( portSTACK_GROWTH_core0 > 0 ) && ( configRECORD_STACK_HIGH_ADDRESS_core0 == 1 ) )
            pxTaskStatus->pxTopOfStack_core0 = pxTCB_core0->pxTopOfStack_core0;
            pxTaskStatus->pxEndOfStack_core0 = pxTCB_core0->pxEndOfStack_core0;
        #endif
        pxTaskStatus->xTaskNumber = pxTCB_core0->uxTCBNumber_core0;

        #if ( configUSE_MUTEXES_core0 == 1 )
        {
            pxTaskStatus->uxBasePriority_core0 = pxTCB_core0->uxBasePriority_core0;
        }
        #else
        {
            pxTaskStatus->uxBasePriority_core0 = 0;
        }
        #endif

        #if ( configGENERATE_RUN_TIME_STATS_core0 == 1 )
        {
            pxTaskStatus->ulRunTimeCounter_core0 = pxTCB_core0->ulRunTimeCounter_core0;
        }
        #else
        {
            pxTaskStatus->ulRunTimeCounter_core0 = ( configRUN_TIME_COUNTER_TYPE_core0 ) 0;
        }
        #endif

        /* Obtaining the task_core0 state is a little fiddly, so is only done if the
         * value of eState_core0 passed into this function is eInvalid - otherwise the
         * state is just set to whatever is passed in. */
        if( eState_core0 != eInvalid )
        {
            if( pxTCB_core0 == pxCurrentTCB_core0 )
            {
                pxTaskStatus->eCurrentState = eRunning_core0;
            }
            else
            {
                pxTaskStatus->eCurrentState = eState_core0;

                #if ( INCLUDE_vTaskSuspend_core0 == 1 )
                {
                    /* If the task_core0 is in the suspended list then there is a
                     *  chance it is actually just blocked indefinitely - so really
                     *  it should be reported as being in the Blocked state. */
                    if( eState_core0 == eSuspended_core0 )
                    {
                        vTaskSuspendAll_core0();
                        {
                            if( listLIST_ITEM_CONTAINER_core0( &( pxTCB_core0->xEventListItem_core0 ) ) != NULL )
                            {
                                pxTaskStatus->eCurrentState = eBlocked_core0;
                            }
                        }
                        ( void ) xTaskResumeAll_core0();
                    }
                }
                #endif /* INCLUDE_vTaskSuspend_core0 */
            }
        }
        else
        {
            pxTaskStatus->eCurrentState = eTaskGetState_core0( pxTCB_core0 );
        }

        /* Obtaining the stack space takes some time, so the xGetFreeStackSpace
         * parameter is provided to allow it to be skipped. */
        if( xGetFreeStackSpace != pdFALSE_core0 )
        {
            #if ( portSTACK_GROWTH_core0 > 0 )
            {
                pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace_core0( ( uint8_t * ) pxTCB_core0->pxEndOfStack_core0 );
            }
            #else
            {
                pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace_core0( ( uint8_t * ) pxTCB_core0->pxStack_core0 );
            }
            #endif
        }
        else
        {
            pxTaskStatus->usStackHighWaterMark = 0;
        }
    }

#endif /* configUSE_TRACE_FACILITY_core0 */
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY_core0 == 1 )

    static UBaseType_t_core0 prvListTasksWithinSingleList_core0( TaskStatus_t_core0 * pxTaskStatusArray_core0,
                                                     List_t_core0 * pxList_core0,
                                                     eTaskState_core0 eState_core0 )
    {
        configLIST_VOLATILE TCB_t_core0 * pxNextTCB_core0;
        configLIST_VOLATILE TCB_t_core0 * pxFirstTCB_core0;
        UBaseType_t_core0 uxTask = 0;

        if( listCURRENT_LIST_LENGTH_core0( pxList_core0 ) > ( UBaseType_t_core0 ) 0 )
        {
            listGET_OWNER_OF_NEXT_ENTRY_core0( pxFirstTCB_core0, pxList_core0 ); /*lint !e9079 void * is used as this macro is used with timers_core0 and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */

            /* Populate an TaskStatus_t_core0 structure within the
             * pxTaskStatusArray_core0 array for each task_core0 that is referenced from
             * pxList_core0.  See the definition of TaskStatus_t_core0 in task_core0.h for the
             * meaning of each TaskStatus_t_core0 structure member. */
            do
            {
                listGET_OWNER_OF_NEXT_ENTRY_core0( pxNextTCB_core0, pxList_core0 ); /*lint !e9079 void * is used as this macro is used with timers_core0 and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
                vTaskGetInfo( ( TaskHandle_t_core0 ) pxNextTCB_core0, &( pxTaskStatusArray_core0[ uxTask ] ), pdTRUE_core0, eState_core0 );
                uxTask++;
            } while( pxNextTCB_core0 != pxFirstTCB_core0 );
        }
        else
        {
            mtCOVERAGE_TEST_MARKER_core0();
        }

        return uxTask;
    }

#endif /* configUSE_TRACE_FACILITY_core0 */
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY_core0 == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark_core0 == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2_core0 == 1 ) )

    static configSTACK_DEPTH_TYPE_core0 prvTaskCheckFreeStackSpace_core0( const uint8_t * pucStackByte_core0 )
    {
        uint32_t ulCount = 0U;

        while( *pucStackByte_core0 == ( uint8_t ) tskSTACK_FILL_BYTE_core0 )
        {
            pucStackByte_core0 -= portSTACK_GROWTH_core0;
            ulCount++;
        }

        ulCount /= ( uint32_t ) sizeof( StackType_t_core0 ); /*lint !e961 Casting is not redundant on smaller architectures. */

        return ( configSTACK_DEPTH_TYPE_core0 ) ulCount;
    }

#endif /* ( ( configUSE_TRACE_FACILITY_core0 == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark_core0 == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2_core0 == 1 ) ) */
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark2_core0 == 1 )

/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
 * same except for their return type.  Using configSTACK_DEPTH_TYPE_core0 allows the
 * user to determine the return type.  It gets around the problem of the value
 * overflowing on 8-bit types without breaking backward compatibility for
 * applications that expect an 8-bit return type. */
    configSTACK_DEPTH_TYPE_core0 uxTaskGetStackHighWaterMark2( TaskHandle_t_core0 xTask_core0 )
    {
        TCB_t_core0 * pxTCB_core0;
        uint8_t * pucEndOfStack;
        configSTACK_DEPTH_TYPE_core0 uxReturn_core0;

        /* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
         * the same except for their return type.  Using configSTACK_DEPTH_TYPE_core0
         * allows the user to determine the return type.  It gets around the
         * problem of the value overflowing on 8-bit types without breaking
         * backward compatibility for applications that expect an 8-bit return
         * type. */

        pxTCB_core0 = prvGetTCBFromHandle_core0( xTask_core0 );

        #if portSTACK_GROWTH_core0 < 0
        {
            pucEndOfStack = ( uint8_t * ) pxTCB_core0->pxStack_core0;
        }
        #else
        {
            pucEndOfStack = ( uint8_t * ) pxTCB_core0->pxEndOfStack_core0;
        }
        #endif

        uxReturn_core0 = prvTaskCheckFreeStackSpace_core0( pucEndOfStack );

        return uxReturn_core0;
    }

#endif /* INCLUDE_uxTaskGetStackHighWaterMark2_core0 */
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark_core0 == 1 )

    UBaseType_t_core0 uxTaskGetStackHighWaterMark( TaskHandle_t_core0 xTask_core0 )
    {
        TCB_t_core0 * pxTCB_core0;
        uint8_t * pucEndOfStack;
        UBaseType_t_core0 uxReturn_core0;

        pxTCB_core0 = prvGetTCBFromHandle_core0( xTask_core0 );

        #if portSTACK_GROWTH_core0 < 0
        {
            pucEndOfStack = ( uint8_t * ) pxTCB_core0->pxStack_core0;
        }
        #else
        {
            pucEndOfStack = ( uint8_t * ) pxTCB_core0->pxEndOfStack_core0;
        }
        #endif

        uxReturn_core0 = ( UBaseType_t_core0 ) prvTaskCheckFreeStackSpace_core0( pucEndOfStack );

        return uxReturn_core0;
    }

#endif /* INCLUDE_uxTaskGetStackHighWaterMark_core0 */
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete_core0 == 1 )

    static void prvDeleteTCB_core0( TCB_t_core0 * pxTCB_core0 )
    {
        /* This call is required specifically for the TriCore port.  It must be
         * above the vPortFree_core0() calls.  The call is also used by ports/demos that
         * want to allocate and clean RAM statically. */
        portCLEAN_UP_TCB( pxTCB_core0 );

        #if ( ( configUSE_NEWLIB_REENTRANT_core0 == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT_core0 == 1 ) )
        {
            /* Free up the memory allocated for the task_core0's TLS Block. */
            configDEINIT_TLS_BLOCK( pxCurrentTCB_core0->xTLSBlock_core0 );
        }
        #endif

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION_core0 == 1 ) && ( configSUPPORT_STATIC_ALLOCATION_core0 == 0 ) && ( portUSING_MPU_WRAPPERS_core0 == 0 ) )
        {
            /* The task_core0 can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack_core0( pxTCB_core0->pxStack_core0 );
            vPortFree_core0( pxTCB_core0 );
        }
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE_core0 != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task_core0 could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB_core0->ucStaticallyAllocated_core0 == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB_core0 )
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack_core0( pxTCB_core0->pxStack_core0 );
                vPortFree_core0( pxTCB_core0 );
            }
            else if( pxTCB_core0->ucStaticallyAllocated_core0 == tskSTATICALLY_ALLOCATED_STACK_ONLY_core0 )
            {
                /* Only the stack was statically allocated, so the TCB is the
                 * only memory that must be freed. */
                vPortFree_core0( pxTCB_core0 );
            }
            else
            {
                /* Neither the stack nor the TCB were allocated dynamically, so
                 * nothing needs to be freed. */
                configASSERT_core0( pxTCB_core0->ucStaticallyAllocated_core0 == tskSTATICALLY_ALLOCATED_STACK_AND_TCB_core0 );
                mtCOVERAGE_TEST_MARKER_core0();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION_core0 */
    }

#endif /* INCLUDE_vTaskDelete_core0 */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime_core0( void )
{
    if( listLIST_IS_EMPTY_core0( pxDelayedTaskList_core0 ) != pdFALSE_core0 )
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime_core0 to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount_core0 >= xNextTaskUnblockTime_core0 ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime_core0 = portMAX_DELAY_core0;
    }
    else
    {
        /* The new current delayed list is not empty, get the value of
         * the item at the head of the delayed list.  This is the time at
         * which the task_core0 at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime_core0 = listGET_ITEM_VALUE_OF_HEAD_ENTRY_core0( pxDelayedTaskList_core0 );
    }
}
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES_core0 == 1 ) )

    TaskHandle_t_core0 xTaskGetCurrentTaskHandle( void )
    {
        TaskHandle_t_core0 xReturn_core0;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn_core0 = pxCurrentTCB_core0;

        return xReturn_core0;
    }

#endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES_core0 == 1 ) ) */
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS_core0 == 1 ) )

    BaseType_t_core0 xTaskGetSchedulerState_core0( void )
    {
        BaseType_t_core0 xReturn_core0;

        if( xSchedulerRunning_core0 == pdFALSE_core0 )
        {
            xReturn_core0 = taskSCHEDULER_NOT_STARTED;
        }
        else
        {
            if( uxSchedulerSuspended_core0 == ( UBaseType_t_core0 ) pdFALSE_core0 )
            {
                xReturn_core0 = taskSCHEDULER_RUNNING_core0;
            }
            else
            {
                xReturn_core0 = taskSCHEDULER_SUSPENDED;
            }
        }

        return xReturn_core0;
    }

#endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS_core0 == 1 ) ) */
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES_core0 == 1 )

    BaseType_t_core0 xTaskPriorityInherit( TaskHandle_t_core0 const pxMutexHolder )
    {
        TCB_t_core0 * const pxMutexHolderTCB = pxMutexHolder;
        BaseType_t_core0 xReturn_core0 = pdFALSE_core0;

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task_core0 attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task_core0 attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority_core0 < pxCurrentTCB_core0->uxPriority_core0 )
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE_core0( &( pxMutexHolderTCB->xEventListItem_core0 ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE_core0 ) == 0UL )
                {
                    listSET_LIST_ITEM_VALUE_core0( &( pxMutexHolderTCB->xEventListItem_core0 ), ( TickType_t_core0 ) configMAX_PRIORITIES_core0 - ( TickType_t_core0 ) pxCurrentTCB_core0->uxPriority_core0 ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
                }
                else
                {
                    mtCOVERAGE_TEST_MARKER_core0();
                }

                /* If the task_core0 being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN_core0( &( pxReadyTasksLists_core0[ pxMutexHolderTCB->uxPriority_core0 ] ), &( pxMutexHolderTCB->xStateListItem_core0 ) ) != pdFALSE_core0 )
                {
                    if( uxListRemove_core0( &( pxMutexHolderTCB->xStateListItem_core0 ) ) == ( UBaseType_t_core0 ) 0 )
                    {
                        /* It is known that the task_core0 is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY_core0( pxMutexHolderTCB->uxPriority_core0, uxTopReadyPriority_core0 );
                    }
                    else
                    {
                        mtCOVERAGE_TEST_MARKER_core0();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority_core0 = pxCurrentTCB_core0->uxPriority_core0;
                    prvAddTaskToReadyList_core0( pxMutexHolderTCB );
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority_core0 = pxCurrentTCB_core0->uxPriority_core0;
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB_core0->uxPriority_core0 );

                /* Inheritance occurred. */
                xReturn_core0 = pdTRUE_core0;
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority_core0 < pxCurrentTCB_core0->uxPriority_core0 )
                {
                    /* The base priority of the mutex holder is lower than the
                     * priority of the task_core0 attempting to take the mutex, but the
                     * current priority of the mutex holder is not lower than the
                     * priority of the task_core0 attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn_core0 = pdTRUE_core0;
                }
                else
                {
                    mtCOVERAGE_TEST_MARKER_core0();
                }
            }
        }
        else
        {
            mtCOVERAGE_TEST_MARKER_core0();
        }

        return xReturn_core0;
    }

#endif /* configUSE_MUTEXES_core0 */
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES_core0 == 1 )

    BaseType_t_core0 xTaskPriorityDisinherit( TaskHandle_t_core0 const pxMutexHolder )
    {
        TCB_t_core0 * const pxTCB_core0 = pxMutexHolder;
        BaseType_t_core0 xReturn_core0 = pdFALSE_core0;

        if( pxMutexHolder != NULL )
        {
            /* A task_core0 can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task_core0 then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task_core0 then it must
             * be the running state task_core0. */
            configASSERT_core0( pxTCB_core0 == pxCurrentTCB_core0 );
            configASSERT_core0( pxTCB_core0->uxMutexesHeld_core0 );
            ( pxTCB_core0->uxMutexesHeld_core0 )--;

            /* Has the holder of the mutex inherited the priority of another
             * task_core0? */
            if( pxTCB_core0->uxPriority_core0 != pxTCB_core0->uxBasePriority_core0 )
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB_core0->uxMutexesHeld_core0 == ( UBaseType_t_core0 ) 0 )
                {
                    /* A task_core0 can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task_core0 then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task_core0 then it must be the running state task_core0.  Remove
                     * the holding task_core0 from the ready list. */
                    if( uxListRemove_core0( &( pxTCB_core0->xStateListItem_core0 ) ) == ( UBaseType_t_core0 ) 0 )
                    {
                        portRESET_READY_PRIORITY_core0( pxTCB_core0->uxPriority_core0, uxTopReadyPriority_core0 );
                    }
                    else
                    {
                        mtCOVERAGE_TEST_MARKER_core0();
                    }

                    /* Disinherit the priority before adding the task_core0 into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB_core0, pxTCB_core0->uxBasePriority_core0 );
                    pxTCB_core0->uxPriority_core0 = pxTCB_core0->uxBasePriority_core0;

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task_core0 is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE_core0( &( pxTCB_core0->xEventListItem_core0 ), ( TickType_t_core0 ) configMAX_PRIORITIES_core0 - ( TickType_t_core0 ) pxTCB_core0->uxPriority_core0 ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
                    prvAddTaskToReadyList_core0( pxTCB_core0 );

                    /* Return true to indicate that a context switch is required.
                     * This is only actually required in the corner case whereby
                     * multiple mutexes were held and the mutexes were given back
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task_core0 was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task_core0 is waiting on it or not. */
                    xReturn_core0 = pdTRUE_core0;
                }
                else
                {
                    mtCOVERAGE_TEST_MARKER_core0();
                }
            }
            else
            {
                mtCOVERAGE_TEST_MARKER_core0();
            }
        }
        else
        {
            mtCOVERAGE_TEST_MARKER_core0();
        }

        return xReturn_core0;
    }

#endif /* configUSE_MUTEXES_core0 */
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES_core0 == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t_core0 const pxMutexHolder,
                                              UBaseType_t_core0 uxHighestPriorityWaitingTask )
    {
        TCB_t_core0 * const pxTCB_core0 = pxMutexHolder;
        UBaseType_t_core0 uxPriorityUsedOnEntry_core0, uxPriorityToUse;
        const UBaseType_t_core0 uxOnlyOneMutexHeld = ( UBaseType_t_core0 ) 1;

        if( pxMutexHolder != NULL )
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT_core0( pxTCB_core0->uxMutexesHeld_core0 );

            /* Determine the priority to which the priority of the task_core0 that
             * holds the mutex should be set.  This will be the greater of the
             * holding task_core0's base priority and the priority of the highest
             * priority task_core0 that is waiting to obtain the mutex. */
            if( pxTCB_core0->uxBasePriority_core0 < uxHighestPriorityWaitingTask )
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
            }
            else
            {
                uxPriorityToUse = pxTCB_core0->uxBasePriority_core0;
            }

            /* Does the priority need to change? */
            if( pxTCB_core0->uxPriority_core0 != uxPriorityToUse )
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task_core0 that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB_core0->uxMutexesHeld_core0 == uxOnlyOneMutexHeld )
                {
                    /* If a task_core0 has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT_core0( pxTCB_core0 != pxCurrentTCB_core0 );

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task_core0's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB_core0, uxPriorityToUse );
                    uxPriorityUsedOnEntry_core0 = pxTCB_core0->uxPriority_core0;
                    pxTCB_core0->uxPriority_core0 = uxPriorityToUse;

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE_core0( &( pxTCB_core0->xEventListItem_core0 ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE_core0 ) == 0UL )
                    {
                        listSET_LIST_ITEM_VALUE_core0( &( pxTCB_core0->xEventListItem_core0 ), ( TickType_t_core0 ) configMAX_PRIORITIES_core0 - ( TickType_t_core0 ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
                    }
                    else
                    {
                        mtCOVERAGE_TEST_MARKER_core0();
                    }

                    /* If the running task_core0 is not the task_core0 that holds the mutex
                     * then the task_core0 that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task_core0
                     * from its current state list if it is in the Ready state as
                     * the task_core0's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN_core0( &( pxReadyTasksLists_core0[ uxPriorityUsedOnEntry_core0 ] ), &( pxTCB_core0->xStateListItem_core0 ) ) != pdFALSE_core0 )
                    {
                        if( uxListRemove_core0( &( pxTCB_core0->xStateListItem_core0 ) ) == ( UBaseType_t_core0 ) 0 )
                        {
                            /* It is known that the task_core0 is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY_core0( pxTCB_core0->uxPriority_core0, uxTopReadyPriority_core0 );
                        }
                        else
                        {
                            mtCOVERAGE_TEST_MARKER_core0();
                        }

                        prvAddTaskToReadyList_core0( pxTCB_core0 );
                    }
                    else
                    {
                        mtCOVERAGE_TEST_MARKER_core0();
                    }
                }
                else
                {
                    mtCOVERAGE_TEST_MARKER_core0();
                }
            }
            else
            {
                mtCOVERAGE_TEST_MARKER_core0();
            }
        }
        else
        {
            mtCOVERAGE_TEST_MARKER_core0();
        }
    }

#endif /* configUSE_MUTEXES_core0 */
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB_core0 == 1 )

    void vTaskEnterCritical( void )
    {
        portDISABLE_INTERRUPTS_core0();

        if( xSchedulerRunning_core0 != pdFALSE_core0 )
        {
            ( pxCurrentTCB_core0->uxCriticalNesting_core0 )++;

            /* This is not the interrupt safe version of the enter critical
             * function so  assert() if it is being called from an interrupt
             * context.  Only API functions that end in "FromISR" can be used in an
             * interrupt.  Only assert if the critical nesting count is 1 to
             * protect against recursive calls if the assert function also uses a
             * critical section. */
            if( pxCurrentTCB_core0->uxCriticalNesting_core0 == 1 )
            {
                portASSERT_IF_IN_ISR();
            }
        }
        else
        {
            mtCOVERAGE_TEST_MARKER_core0();
        }
    }

#endif /* portCRITICAL_NESTING_IN_TCB_core0 */
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB_core0 == 1 )

    void vTaskExitCritical( void )
    {
        if( xSchedulerRunning_core0 != pdFALSE_core0 )
        {
            if( pxCurrentTCB_core0->uxCriticalNesting_core0 > 0U )
            {
                ( pxCurrentTCB_core0->uxCriticalNesting_core0 )--;

                if( pxCurrentTCB_core0->uxCriticalNesting_core0 == 0U )
                {
                    portENABLE_INTERRUPTS();
                }
                else
                {
                    mtCOVERAGE_TEST_MARKER_core0();
                }
            }
            else
            {
                mtCOVERAGE_TEST_MARKER_core0();
            }
        }
        else
        {
            mtCOVERAGE_TEST_MARKER_core0();
        }
    }

#endif /* portCRITICAL_NESTING_IN_TCB_core0 */
/*-----------------------------------------------------------*/

#if ( configUSE_STATS_FORMATTING_FUNCTIONS_core0 > 0 )

    static char * prvWriteNameToBuffer_core0( char * pcBuffer_core0,
                                        const char * pcTaskName_core0 )
    {
        size_t x;

        /* Start by copying the entire string. */
        strcpy( pcBuffer_core0, pcTaskName_core0 );

        /* Pad the end of the string with spaces to ensure columns line up when
         * printed out. */
        for( x = strlen( pcBuffer_core0 ); x < ( size_t ) ( configMAX_TASK_NAME_LEN_core0 - 1 ); x++ )
        {
            pcBuffer_core0[ x ] = ' ';
        }

        /* Terminate. */
        pcBuffer_core0[ x ] = ( char ) 0x00;

        /* Return the new end of string. */
        return &( pcBuffer_core0[ x ] );
    }

#endif /* ( configUSE_STATS_FORMATTING_FUNCTIONS_core0 > 0 ) */
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY_core0 == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS_core0 > 0 ) )

    void vTaskList( char * pcWriteBuffer )
    {
        TaskStatus_t_core0 * pxTaskStatusArray_core0;
        UBaseType_t_core0 uxArraySize, x;
        char cStatus;

        /*
         * PLEASE NOTE:
         *
         * This function is provided for convenience only, and is used by many
         * of the demo applications.  Do not consider it to be part of the
         * scheduler.
         *
         * vTaskList() calls uxTaskGetSystemState(), then formats part of the
         * uxTaskGetSystemState() output into a human readable table that
         * displays task_core0: names, states, priority, stack usage and task_core0 number.
         * Stack usage specified as the number of unused StackType_t_core0 words stack can hold
         * on top of stack - not the number of bytes.
         *
         * vTaskList() has a dependency on the sprintf() C library function that
         * might bloat the code size, use a lot of stack, and provide different
         * results on different platforms.  An alternative, tiny, third party,
         * and limited functionality implementation of sprintf() is provided in
         * many of the FreeRTOS_core0/Demo sub-directories in a file called
         * printf-stdarg.c (note printf-stdarg.c does not provide a full
         * snprintf() implementation!).
         *
         * It is recommended that production systems call uxTaskGetSystemState()
         * directly to get access to raw stats data, rather than indirectly
         * through a call to vTaskList().
         */


        /* Make sure the write buffer does not contain a string. */
        *pcWriteBuffer = ( char ) 0x00;

        /* Take a snapshot of the number of tasks in case it changes while this
         * function is executing. */
        uxArraySize = uxCurrentNumberOfTasks_core0;

        /* Allocate an array index for each task_core0.  NOTE!  if
         * configSUPPORT_DYNAMIC_ALLOCATION_core0 is set to 0 then pvPortMalloc_core0() will
         * equate to NULL. */
        pxTaskStatusArray_core0 = pvPortMalloc_core0( uxCurrentNumberOfTasks_core0 * sizeof( TaskStatus_t_core0 ) ); /*lint !e9079 All values returned by pvPortMalloc_core0() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */

        if( pxTaskStatusArray_core0 != NULL )
        {
            /* Generate the (binary) data. */
            uxArraySize = uxTaskGetSystemState( pxTaskStatusArray_core0, uxArraySize, NULL );

            /* Create a human readable table from the binary data. */
            for( x = 0; x < uxArraySize; x++ )
            {
                switch( pxTaskStatusArray_core0[ x ].eCurrentState )
                {
                    case eRunning_core0:
                        cStatus = tskRUNNING_CHAR_core0;
                        break;

                    case eReady_core0:
                        cStatus = tskREADY_CHAR_core0;
                        break;

                    case eBlocked_core0:
                        cStatus = tskBLOCKED_CHAR_core0;
                        break;

                    case eSuspended_core0:
                        cStatus = tskSUSPENDED_CHAR_core0;
                        break;

                    case eDeleted_core0:
                        cStatus = tskDELETED_CHAR_core0;
                        break;

                    case eInvalid: /* Fall through. */
                    default:       /* Should not get here, but it is included
                                    * to prevent static checking errors. */
                        cStatus = ( char ) 0x00;
                        break;
                }

                /* Write the task_core0 name to the string, padding with spaces so it
                 * can be printed in tabular form more easily. */
                pcWriteBuffer = prvWriteNameToBuffer_core0( pcWriteBuffer, pxTaskStatusArray_core0[ x ].pcTaskName_core0 );

                /* Write the rest of the string. */
                sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray_core0[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray_core0[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray_core0[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
                pcWriteBuffer += strlen( pcWriteBuffer );                                                                                                                                                                                                /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
            }

            /* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION_core0
             * is 0 then vPortFree_core0() will be #defined to nothing. */
            vPortFree_core0( pxTaskStatusArray_core0 );
        }
        else
        {
            mtCOVERAGE_TEST_MARKER_core0();
        }
    }

#endif /* ( ( configUSE_TRACE_FACILITY_core0 == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS_core0 > 0 ) ) */
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS_core0 == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS_core0 > 0 ) && ( configUSE_TRACE_FACILITY_core0 == 1 ) )

    void vTaskGetRunTimeStats( char * pcWriteBuffer )
    {
        TaskStatus_t_core0 * pxTaskStatusArray_core0;
        UBaseType_t_core0 uxArraySize, x;
        configRUN_TIME_COUNTER_TYPE_core0 ulTotalTime, ulStatsAsPercentage;

        /*
         * PLEASE NOTE:
         *
         * This function is provided for convenience only, and is used by many
         * of the demo applications.  Do not consider it to be part of the
         * scheduler.
         *
         * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
         * of the uxTaskGetSystemState() output into a human readable table that
         * displays the amount of time each task_core0 has spent in the Running state
         * in both absolute and percentage terms.
         *
         * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
         * function that might bloat the code size, use a lot of stack, and
         * provide different results on different platforms.  An alternative,
         * tiny, third party, and limited functionality implementation of
         * sprintf() is provided in many of the FreeRTOS_core0/Demo sub-directories in
         * a file called printf-stdarg.c (note printf-stdarg.c does not provide
         * a full snprintf() implementation!).
         *
         * It is recommended that production systems call uxTaskGetSystemState()
         * directly to get access to raw stats data, rather than indirectly
         * through a call to vTaskGetRunTimeStats().
         */

        /* Make sure the write buffer does not contain a string. */
        *pcWriteBuffer = ( char ) 0x00;

        /* Take a snapshot of the number of tasks in case it changes while this
         * function is executing. */
        uxArraySize = uxCurrentNumberOfTasks_core0;

        /* Allocate an array index for each task_core0.  NOTE!  If
         * configSUPPORT_DYNAMIC_ALLOCATION_core0 is set to 0 then pvPortMalloc_core0() will
         * equate to NULL. */
        pxTaskStatusArray_core0 = pvPortMalloc_core0( uxCurrentNumberOfTasks_core0 * sizeof( TaskStatus_t_core0 ) ); /*lint !e9079 All values returned by pvPortMalloc_core0() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */

        if( pxTaskStatusArray_core0 != NULL )
        {
            /* Generate the (binary) data. */
            uxArraySize = uxTaskGetSystemState( pxTaskStatusArray_core0, uxArraySize, &ulTotalTime );

            /* For percentage calculations. */
            ulTotalTime /= 100UL;

            /* Avoid divide by zero errors. */
            if( ulTotalTime > 0UL )
            {
                /* Create a human readable table from the binary data. */
                for( x = 0; x < uxArraySize; x++ )
                {
                    /* What percentage of the total run time has the task_core0 used?
                     * This will always be rounded down to the nearest integer.
                     * ulTotalRunTime_core0 has already been divided by 100. */
                    ulStatsAsPercentage = pxTaskStatusArray_core0[ x ].ulRunTimeCounter_core0 / ulTotalTime;

                    /* Write the task_core0 name to the string, padding with
                     * spaces so it can be printed in tabular form more
                     * easily. */
                    pcWriteBuffer = prvWriteNameToBuffer_core0( pcWriteBuffer, pxTaskStatusArray_core0[ x ].pcTaskName_core0 );

                    if( ulStatsAsPercentage > 0UL )
                    {
                        #ifdef portLU_PRINTF_SPECIFIER_REQUIRED
                        {
                            sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray_core0[ x ].ulRunTimeCounter_core0, ulStatsAsPercentage );
                        }
                        #else
                        {
                            /* sizeof( int ) == sizeof( long ) so a smaller
                             * printf() library can be used. */
                            sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray_core0[ x ].ulRunTimeCounter_core0, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
                        }
                        #endif
                    }
                    else
                    {
                        /* If the percentage is zero here then the task_core0 has
                         * consumed less than 1% of the total run time. */
                        #ifdef portLU_PRINTF_SPECIFIER_REQUIRED
                        {
                            sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray_core0[ x ].ulRunTimeCounter_core0 );
                        }
                        #else
                        {
                            /* sizeof( int ) == sizeof( long ) so a smaller
                             * printf() library can be used. */
                            sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray_core0[ x ].ulRunTimeCounter_core0 ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
                        }
                        #endif
                    }

                    pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
                }
            }
            else
            {
                mtCOVERAGE_TEST_MARKER_core0();
            }

            /* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION_core0
             * is 0 then vPortFree_core0() will be #defined to nothing. */
            vPortFree_core0( pxTaskStatusArray_core0 );
        }
        else
        {
            mtCOVERAGE_TEST_MARKER_core0();
        }
    }

#endif /* ( ( configGENERATE_RUN_TIME_STATS_core0 == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS_core0 > 0 ) ) */
/*-----------------------------------------------------------*/

TickType_t_core0 uxTaskResetEventItemValue( void )
{
    TickType_t_core0 uxReturn_core0;

    uxReturn_core0 = listGET_LIST_ITEM_VALUE_core0( &( pxCurrentTCB_core0->xEventListItem_core0 ) );

    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE_core0( &( pxCurrentTCB_core0->xEventListItem_core0 ), ( ( TickType_t_core0 ) configMAX_PRIORITIES_core0 - ( TickType_t_core0 ) pxCurrentTCB_core0->uxPriority_core0 ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

    return uxReturn_core0;
}
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES_core0 == 1 )

    TaskHandle_t_core0 pvTaskIncrementMutexHeldCount( void )
    {
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB_core0 will be NULL. */
        if( pxCurrentTCB_core0 != NULL )
        {
            ( pxCurrentTCB_core0->uxMutexesHeld_core0 )++;
        }

        return pxCurrentTCB_core0;
    }

#endif /* configUSE_MUTEXES_core0 */
/*-----------------------------------------------------------*/

#if ( configUSE_TASK_NOTIFICATIONS_core0 == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t_core0 uxIndexToWait,
                                      BaseType_t_core0 xClearCountOnExit,
                                      TickType_t_core0 xTicksToWait_core0 )
    {
        uint32_t ulReturn;

        configASSERT_core0( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES_core0 );

        taskENTER_CRITICAL_core0();
        {
            /* Only block if the notification count is not already non-zero. */
            if( pxCurrentTCB_core0->ulNotifiedValue_core0[ uxIndexToWait ] == 0UL )
            {
                /* Mark this task_core0 as waiting for a notification. */
                pxCurrentTCB_core0->ucNotifyState_core0[ uxIndexToWait ] = taskWAITING_NOTIFICATION_core0;

                if( xTicksToWait_core0 > ( TickType_t_core0 ) 0 )
                {
                    prvAddCurrentTaskToDelayedList_core0( xTicksToWait_core0, pdTRUE_core0 );
                    traceTASK_NOTIFY_TAKE_BLOCK( uxIndexToWait );

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API_core0();
                }
                else
                {
                    mtCOVERAGE_TEST_MARKER_core0();
                }
            }
            else
            {
                mtCOVERAGE_TEST_MARKER_core0();
            }
        }
        taskEXIT_CRITICAL_core0();

        taskENTER_CRITICAL_core0();
        {
            traceTASK_NOTIFY_TAKE( uxIndexToWait );
            ulReturn = pxCurrentTCB_core0->ulNotifiedValue_core0[ uxIndexToWait ];

            if( ulReturn != 0UL )
            {
                if( xClearCountOnExit != pdFALSE_core0 )
                {
                    pxCurrentTCB_core0->ulNotifiedValue_core0[ uxIndexToWait ] = 0UL;
                }
                else
                {
                    pxCurrentTCB_core0->ulNotifiedValue_core0[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
                }
            }
            else
            {
                mtCOVERAGE_TEST_MARKER_core0();
            }

            pxCurrentTCB_core0->ucNotifyState_core0[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION_core0;
        }
        taskEXIT_CRITICAL_core0();

        return ulReturn;
    }

#endif /* configUSE_TASK_NOTIFICATIONS_core0 */
/*-----------------------------------------------------------*/

#if ( configUSE_TASK_NOTIFICATIONS_core0 == 1 )

    BaseType_t_core0 xTaskGenericNotifyWait( UBaseType_t_core0 uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t_core0 xTicksToWait_core0 )
    {
        BaseType_t_core0 xReturn_core0;

        configASSERT_core0( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES_core0 );

        taskENTER_CRITICAL_core0();
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB_core0->ucNotifyState_core0[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED_core0 )
            {
                /* Clear bits in the task_core0's notification value as bits may get
                 * set  by the notifying task_core0 or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB_core0->ulNotifiedValue_core0[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;

                /* Mark this task_core0 as waiting for a notification. */
                pxCurrentTCB_core0->ucNotifyState_core0[ uxIndexToWait ] = taskWAITING_NOTIFICATION_core0;

                if( xTicksToWait_core0 > ( TickType_t_core0 ) 0 )
                {
                    prvAddCurrentTaskToDelayedList_core0( xTicksToWait_core0, pdTRUE_core0 );
                    traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWait );

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API_core0();
                }
                else
                {
                    mtCOVERAGE_TEST_MARKER_core0();
                }
            }
            else
            {
                mtCOVERAGE_TEST_MARKER_core0();
            }
        }
        taskEXIT_CRITICAL_core0();

        taskENTER_CRITICAL_core0();
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWait );

            if( pulNotificationValue != NULL )
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB_core0->ulNotifiedValue_core0[ uxIndexToWait ];
            }

            /* If ucNotifyValue is set then either the task_core0 never entered the
             * blocked state (because a notification was already pending) or the
             * task_core0 unblocked because of a notification.  Otherwise the task_core0
             * unblocked because of a timeout. */
            if( pxCurrentTCB_core0->ucNotifyState_core0[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED_core0 )
            {
                /* A notification was not received. */
                xReturn_core0 = pdFALSE_core0;
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task_core0 was waiting. */
                pxCurrentTCB_core0->ulNotifiedValue_core0[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
                xReturn_core0 = pdTRUE_core0;
            }

            pxCurrentTCB_core0->ucNotifyState_core0[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION_core0;
        }
        taskEXIT_CRITICAL_core0();

        return xReturn_core0;
    }

#endif /* configUSE_TASK_NOTIFICATIONS_core0 */
/*-----------------------------------------------------------*/

#if ( configUSE_TASK_NOTIFICATIONS_core0 == 1 )

    BaseType_t_core0 xTaskGenericNotify( TaskHandle_t_core0 xTaskToNotify,
                                   UBaseType_t_core0 uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
        TCB_t_core0 * pxTCB_core0;
        BaseType_t_core0 xReturn_core0 = pdPASS_core0;
        uint8_t ucOriginalNotifyState;

        configASSERT_core0( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES_core0 );
        configASSERT_core0( xTaskToNotify );
        pxTCB_core0 = xTaskToNotify;

        taskENTER_CRITICAL_core0();
        {
            if( pulPreviousNotificationValue != NULL )
            {
                *pulPreviousNotificationValue = pxTCB_core0->ulNotifiedValue_core0[ uxIndexToNotify ];
            }

            ucOriginalNotifyState = pxTCB_core0->ucNotifyState_core0[ uxIndexToNotify ];

            pxTCB_core0->ucNotifyState_core0[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED_core0;

            switch( eAction )
            {
                case eSetBits:
                    pxTCB_core0->ulNotifiedValue_core0[ uxIndexToNotify ] |= ulValue;
                    break;

                case eIncrement:
                    ( pxTCB_core0->ulNotifiedValue_core0[ uxIndexToNotify ] )++;
                    break;

                case eSetValueWithOverwrite:
                    pxTCB_core0->ulNotifiedValue_core0[ uxIndexToNotify ] = ulValue;
                    break;

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED_core0 )
                    {
                        pxTCB_core0->ulNotifiedValue_core0[ uxIndexToNotify ] = ulValue;
                    }
                    else
                    {
                        /* The value could not be written to the task_core0. */
                        xReturn_core0 = pdFAIL_core0;
                    }

                    break;

                case eNoAction:

                    /* The task_core0 is being notified without its notify value being
                     * updated. */
                    break;

                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT_core0( xTickCount_core0 == ( TickType_t_core0 ) 0 );

                    break;
            }

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task_core0 is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION_core0 )
            {
                listREMOVE_ITEM_core0( &( pxTCB_core0->xStateListItem_core0 ) );
                prvAddTaskToReadyList_core0( pxTCB_core0 );

                /* The task_core0 should not have been on an event list. */
                configASSERT_core0( listLIST_ITEM_CONTAINER_core0( &( pxTCB_core0->xEventListItem_core0 ) ) == NULL );

                #if ( configUSE_TICKLESS_IDLE_core0 != 0 )
                {
                    /* If a task_core0 is blocked waiting for a notification then
                     * xNextTaskUnblockTime_core0 might be set to the blocked task_core0's time
                     * out time.  If the task_core0 is unblocked for a reason other than
                     * a timeout xNextTaskUnblockTime_core0 is normally left unchanged,
                     * because it will automatically get reset to a new value when
                     * the tick count equals xNextTaskUnblockTime_core0.  However if
                     * tickless idling is used it might be more important to enter
                     * sleep mode at the earliest possible time - so reset
                     * xNextTaskUnblockTime_core0 here to ensure it is updated at the
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime_core0();
                }
                #endif

                if( pxTCB_core0->uxPriority_core0 > pxCurrentTCB_core0->uxPriority_core0 )
                {
                    /* The notified task_core0 has a priority above the currently
                     * executing task_core0 so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION_core0();
                }
                else
                {
                    mtCOVERAGE_TEST_MARKER_core0();
                }
            }
            else
            {
                mtCOVERAGE_TEST_MARKER_core0();
            }
        }
        taskEXIT_CRITICAL_core0();

        return xReturn_core0;
    }

#endif /* configUSE_TASK_NOTIFICATIONS_core0 */
/*-----------------------------------------------------------*/

#if ( configUSE_TASK_NOTIFICATIONS_core0 == 1 )

    BaseType_t_core0 xTaskGenericNotifyFromISR( TaskHandle_t_core0 xTaskToNotify,
                                          UBaseType_t_core0 uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t_core0 * pxHigherPriorityTaskWoken_core0 )
    {
        TCB_t_core0 * pxTCB_core0;
        uint8_t ucOriginalNotifyState;
        BaseType_t_core0 xReturn_core0 = pdPASS_core0;
        UBaseType_t_core0 uxSavedInterruptStatus_core0;

        configASSERT_core0( xTaskToNotify );
        configASSERT_core0( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES_core0 );

        /* RTOS ports that support interrupt nesting have the concept of a
         * maximum  system call (or maximum API call) interrupt priority.
         * Interrupts that are  above the maximum system call priority are keep
         * permanently enabled, even when the RTOS kernel is in a critical section,
         * but cannot make any calls to FreeRTOS_core0 API functions.  If configASSERT_core0()
         * is defined in FreeRTOSConfig.h then
         * portASSERT_IF_INTERRUPT_PRIORITY_INVALID_core0() will result in an assertion
         * failure if a FreeRTOS_core0 API function is called from an interrupt that has
         * been assigned a priority above the configured maximum system call
         * priority.  Only FreeRTOS_core0 functions that end in FromISR can be called
         * from interrupts  that have been assigned a priority at or (logically)
         * below the maximum system call interrupt priority.  FreeRTOS_core0 maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS_core0.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID_core0();

        pxTCB_core0 = xTaskToNotify;

        uxSavedInterruptStatus_core0 = portSET_INTERRUPT_MASK_FROM_ISR_core0();
        {
            if( pulPreviousNotificationValue != NULL )
            {
                *pulPreviousNotificationValue = pxTCB_core0->ulNotifiedValue_core0[ uxIndexToNotify ];
            }

            ucOriginalNotifyState = pxTCB_core0->ucNotifyState_core0[ uxIndexToNotify ];
            pxTCB_core0->ucNotifyState_core0[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED_core0;

            switch( eAction )
            {
                case eSetBits_core0:
                    pxTCB_core0->ulNotifiedValue_core0[ uxIndexToNotify ] |= ulValue;
                    break;

                case eIncrement_core0:
                    ( pxTCB_core0->ulNotifiedValue_core0[ uxIndexToNotify ] )++;
                    break;

                case eSetValueWithOverwrite_core0:
                    pxTCB_core0->ulNotifiedValue_core0[ uxIndexToNotify ] = ulValue;
                    break;

                case eSetValueWithoutOverwrite_core0:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED_core0 )
                    {
                        pxTCB_core0->ulNotifiedValue_core0[ uxIndexToNotify ] = ulValue;
                    }
                    else
                    {
                        /* The value could not be written to the task_core0. */
                        xReturn_core0 = pdFAIL_core0;
                    }

                    break;

                case eNoAction_core0:

                    /* The task_core0 is being notified without its notify value being
                     * updated. */
                    break;

                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT_core0( xTickCount_core0 == ( TickType_t_core0 ) 0 );
                    break;
            }

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task_core0 is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION_core0 )
            {
                /* The task_core0 should not have been on an event list. */
                configASSERT_core0( listLIST_ITEM_CONTAINER_core0( &( pxTCB_core0->xEventListItem_core0 ) ) == NULL );

                if( uxSchedulerSuspended_core0 == ( UBaseType_t_core0 ) pdFALSE_core0 )
                {
                    listREMOVE_ITEM_core0( &( pxTCB_core0->xStateListItem_core0 ) );
                    prvAddTaskToReadyList_core0( pxTCB_core0 );
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task_core0 pending until the scheduler is resumed. */
                    listINSERT_END_core0( &( xPendingReadyList_core0 ), &( pxTCB_core0->xEventListItem_core0 ) );
                }

                if( pxTCB_core0->uxPriority_core0 > pxCurrentTCB_core0->uxPriority_core0 )
                {
                    /* The notified task_core0 has a priority above the currently
                     * executing task_core0 so a yield is required. */
                    if( pxHigherPriorityTaskWoken_core0 != NULL )
                    {
                        *pxHigherPriorityTaskWoken_core0 = pdTRUE_core0;
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS_core0 function. */
                    xYieldPending_core0 = pdTRUE_core0;
                }
                else
                {
                    mtCOVERAGE_TEST_MARKER_core0();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR_core0( uxSavedInterruptStatus_core0 );

        return xReturn_core0;
    }

#endif /* configUSE_TASK_NOTIFICATIONS_core0 */
/*-----------------------------------------------------------*/

#if ( configUSE_TASK_NOTIFICATIONS_core0 == 1 )

    void vTaskGenericNotifyGiveFromISR( TaskHandle_t_core0 xTaskToNotify,
                                        UBaseType_t_core0 uxIndexToNotify,
                                        BaseType_t_core0 * pxHigherPriorityTaskWoken_core0 )
    {
        TCB_t_core0 * pxTCB_core0;
        uint8_t ucOriginalNotifyState;
        UBaseType_t_core0 uxSavedInterruptStatus_core0;

        configASSERT_core0( xTaskToNotify );
        configASSERT_core0( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES_core0 );

        /* RTOS ports that support interrupt nesting have the concept of a
         * maximum  system call (or maximum API call) interrupt priority.
         * Interrupts that are  above the maximum system call priority are keep
         * permanently enabled, even when the RTOS kernel is in a critical section,
         * but cannot make any calls to FreeRTOS_core0 API functions.  If configASSERT_core0()
         * is defined in FreeRTOSConfig.h then
         * portASSERT_IF_INTERRUPT_PRIORITY_INVALID_core0() will result in an assertion
         * failure if a FreeRTOS_core0 API function is called from an interrupt that has
         * been assigned a priority above the configured maximum system call
         * priority.  Only FreeRTOS_core0 functions that end in FromISR can be called
         * from interrupts  that have been assigned a priority at or (logically)
         * below the maximum system call interrupt priority.  FreeRTOS_core0 maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS_core0.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID_core0();

        pxTCB_core0 = xTaskToNotify;

        uxSavedInterruptStatus_core0 = portSET_INTERRUPT_MASK_FROM_ISR_core0();
        {
            ucOriginalNotifyState = pxTCB_core0->ucNotifyState_core0[ uxIndexToNotify ];
            pxTCB_core0->ucNotifyState_core0[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED_core0;

            /* 'Giving' is equivalent to incrementing a count in a counting
             * semaphore. */
            ( pxTCB_core0->ulNotifiedValue_core0[ uxIndexToNotify ] )++;

            traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );

            /* If the task_core0 is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION_core0 )
            {
                /* The task_core0 should not have been on an event list. */
                configASSERT_core0( listLIST_ITEM_CONTAINER_core0( &( pxTCB_core0->xEventListItem_core0 ) ) == NULL );

                if( uxSchedulerSuspended_core0 == ( UBaseType_t_core0 ) pdFALSE_core0 )
                {
                    listREMOVE_ITEM_core0( &( pxTCB_core0->xStateListItem_core0 ) );
                    prvAddTaskToReadyList_core0( pxTCB_core0 );
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task_core0 pending until the scheduler is resumed. */
                    listINSERT_END_core0( &( xPendingReadyList_core0 ), &( pxTCB_core0->xEventListItem_core0 ) );
                }

                if( pxTCB_core0->uxPriority_core0 > pxCurrentTCB_core0->uxPriority_core0 )
                {
                    /* The notified task_core0 has a priority above the currently
                     * executing task_core0 so a yield is required. */
                    if( pxHigherPriorityTaskWoken_core0 != NULL )
                    {
                        *pxHigherPriorityTaskWoken_core0 = pdTRUE_core0;
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter in an ISR
                     * safe FreeRTOS_core0 function. */
                    xYieldPending_core0 = pdTRUE_core0;
                }
                else
                {
                    mtCOVERAGE_TEST_MARKER_core0();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR_core0( uxSavedInterruptStatus_core0 );
    }

#endif /* configUSE_TASK_NOTIFICATIONS_core0 */
/*-----------------------------------------------------------*/

#if ( configUSE_TASK_NOTIFICATIONS_core0 == 1 )

    BaseType_t_core0 xTaskGenericNotifyStateClear( TaskHandle_t_core0 xTask_core0,
                                             UBaseType_t_core0 uxIndexToClear )
    {
        TCB_t_core0 * pxTCB_core0;
        BaseType_t_core0 xReturn_core0;

        configASSERT_core0( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES_core0 );

        /* If null is passed in here then it is the calling task_core0 that is having
         * its notification state cleared. */
        pxTCB_core0 = prvGetTCBFromHandle_core0( xTask_core0 );

        taskENTER_CRITICAL_core0();
        {
            if( pxTCB_core0->ucNotifyState_core0[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED_core0 )
            {
                pxTCB_core0->ucNotifyState_core0[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION_core0;
                xReturn_core0 = pdPASS_core0;
            }
            else
            {
                xReturn_core0 = pdFAIL_core0;
            }
        }
        taskEXIT_CRITICAL_core0();

        return xReturn_core0;
    }

#endif /* configUSE_TASK_NOTIFICATIONS_core0 */
/*-----------------------------------------------------------*/

#if ( configUSE_TASK_NOTIFICATIONS_core0 == 1 )

    uint32_t ulTaskGenericNotifyValueClear( TaskHandle_t_core0 xTask_core0,
                                            UBaseType_t_core0 uxIndexToClear,
                                            uint32_t ulBitsToClear )
    {
        TCB_t_core0 * pxTCB_core0;
        uint32_t ulReturn;

        /* If null is passed in here then it is the calling task_core0 that is having
         * its notification state cleared. */
        pxTCB_core0 = prvGetTCBFromHandle_core0( xTask_core0 );

        taskENTER_CRITICAL_core0();
        {
            /* Return the notification as it was before the bits were cleared,
             * then clear the bit mask. */
            ulReturn = pxTCB_core0->ulNotifiedValue_core0[ uxIndexToClear ];
            pxTCB_core0->ulNotifiedValue_core0[ uxIndexToClear ] &= ~ulBitsToClear;
        }
        taskEXIT_CRITICAL_core0();

        return ulReturn;
    }

#endif /* configUSE_TASK_NOTIFICATIONS_core0 */
/*-----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS_core0 == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )

    configRUN_TIME_COUNTER_TYPE_core0 ulTaskGetIdleRunTimeCounter( void )
    {
        return xIdleTaskHandle_core0->ulRunTimeCounter_core0;
    }

#endif
/*-----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS_core0 == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )

    configRUN_TIME_COUNTER_TYPE_core0 ulTaskGetIdleRunTimePercent( void )
    {
        configRUN_TIME_COUNTER_TYPE_core0 ulTotalTime, ulReturn;

        ulTotalTime = portGET_RUN_TIME_COUNTER_VALUE();

        /* For percentage calculations. */
        ulTotalTime /= ( configRUN_TIME_COUNTER_TYPE_core0 ) 100;

        /* Avoid divide by zero errors. */
        if( ulTotalTime > ( configRUN_TIME_COUNTER_TYPE_core0 ) 0 )
        {
            ulReturn = xIdleTaskHandle_core0->ulRunTimeCounter_core0 / ulTotalTime;
        }
        else
        {
            ulReturn = 0;
        }

        return ulReturn;
    }

#endif /* if ( ( configGENERATE_RUN_TIME_STATS_core0 == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList_core0( TickType_t_core0 xTicksToWait_core0,
                                            const BaseType_t_core0 xCanBlockIndefinitely_core0 )
{
    TickType_t_core0 xTimeToWake_core0;
    const TickType_t_core0 xConstTickCount_core0 = xTickCount_core0;

    #if ( INCLUDE_xTaskAbortDelay_core0 == 1 )
    {
        /* About to enter a delayed list, so ensure the ucDelayAborted_core0 flag is
         * reset to pdFALSE_core0 so it can be detected as having been set to pdTRUE_core0
         * when the task_core0 leaves the Blocked state. */
        pxCurrentTCB_core0->ucDelayAborted_core0 = pdFALSE_core0;
    }
    #endif

    /* Remove the task_core0 from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove_core0( &( pxCurrentTCB_core0->xStateListItem_core0 ) ) == ( UBaseType_t_core0 ) 0 )
    {
        /* The current task_core0 must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY_core0( pxCurrentTCB_core0->uxPriority_core0, uxTopReadyPriority_core0 ); /*lint !e931 pxCurrentTCB_core0 cannot change as it is the calling task_core0.  pxCurrentTCB_core0->uxPriority_core0 and uxTopReadyPriority_core0 cannot change as called with scheduler suspended or in a critical section. */
    }
    else
    {
        mtCOVERAGE_TEST_MARKER_core0();
    }

    #if ( INCLUDE_vTaskSuspend_core0 == 1 )
    {
        if( ( xTicksToWait_core0 == portMAX_DELAY_core0 ) && ( xCanBlockIndefinitely_core0 != pdFALSE_core0 ) )
        {
            /* Add the task_core0 to the suspended task_core0 list instead of a delayed task_core0
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END_core0( &xSuspendedTaskList_core0, &( pxCurrentTCB_core0->xStateListItem_core0 ) );
        }
        else
        {
            /* Calculate the time at which the task_core0 should be woken if the event
             * does not occur.  This may overflow but this doesn't matter, the
             * kernel will manage it correctly. */
            xTimeToWake_core0 = xConstTickCount_core0 + xTicksToWait_core0;

            /* The list item will be inserted in wake time order. */
            listSET_LIST_ITEM_VALUE_core0( &( pxCurrentTCB_core0->xStateListItem_core0 ), xTimeToWake_core0 );

            if( xTimeToWake_core0 < xConstTickCount_core0 )
            {
                /* Wake time has overflowed.  Place this item in the overflow
                 * list. */
                vListInsert_core0( pxOverflowDelayedTaskList_core0, &( pxCurrentTCB_core0->xStateListItem_core0 ) );
            }
            else
            {
                /* The wake time has not overflowed, so the current block list
                 * is used. */
                vListInsert_core0( pxDelayedTaskList_core0, &( pxCurrentTCB_core0->xStateListItem_core0 ) );

                /* If the task_core0 entering the blocked state was placed at the
                 * head of the list of blocked tasks then xNextTaskUnblockTime_core0
                 * needs to be updated too. */
                if( xTimeToWake_core0 < xNextTaskUnblockTime_core0 )
                {
                    xNextTaskUnblockTime_core0 = xTimeToWake_core0;
                }
                else
                {
                    mtCOVERAGE_TEST_MARKER_core0();
                }
            }
        }
    }
    #else /* INCLUDE_vTaskSuspend_core0 */
    {
        /* Calculate the time at which the task_core0 should be woken if the event
         * does not occur.  This may overflow but this doesn't matter, the kernel
         * will manage it correctly. */
        xTimeToWake_core0 = xConstTickCount_core0 + xTicksToWait_core0;

        /* The list item will be inserted in wake time order. */
        listSET_LIST_ITEM_VALUE_core0( &( pxCurrentTCB_core0->xStateListItem_core0 ), xTimeToWake_core0 );

        if( xTimeToWake_core0 < xConstTickCount_core0 )
        {
            /* Wake time has overflowed.  Place this item in the overflow list. */
            vListInsert_core0( pxOverflowDelayedTaskList_core0, &( pxCurrentTCB_core0->xStateListItem_core0 ) );
        }
        else
        {
            /* The wake time has not overflowed, so the current block list is used. */
            vListInsert_core0( pxDelayedTaskList_core0, &( pxCurrentTCB_core0->xStateListItem_core0 ) );

            /* If the task_core0 entering the blocked state was placed at the head of the
             * list of blocked tasks then xNextTaskUnblockTime_core0 needs to be updated
             * too. */
            if( xTimeToWake_core0 < xNextTaskUnblockTime_core0 )
            {
                xNextTaskUnblockTime_core0 = xTimeToWake_core0;
            }
            else
            {
                mtCOVERAGE_TEST_MARKER_core0();
            }
        }

        /* Avoid compiler warning when INCLUDE_vTaskSuspend_core0 is not 1. */
        ( void ) xCanBlockIndefinitely_core0;
    }
    #endif /* INCLUDE_vTaskSuspend_core0 */
}

/* Code below here allows additional code to be inserted into this source file,
 * especially where access to file scope functions and data is needed (for example
 * when performing module tests). */

#ifdef FREERTOS_MODULE_TEST
    #include "tasks_test_access_functions.h"
#endif


#if ( configINCLUDE_FREERTOS_TASK_C_ADDITIONS_H == 1 )

    #include "freertos_tasks_c_additions.h"

    #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT_core0
        static void freertos_tasks_c_additions_init_core0( void )
        {
            FREERTOS_TASKS_C_ADDITIONS_INIT_core0();
        }
    #endif

#endif /* if ( configINCLUDE_FREERTOS_TASK_C_ADDITIONS_H == 1 ) */
