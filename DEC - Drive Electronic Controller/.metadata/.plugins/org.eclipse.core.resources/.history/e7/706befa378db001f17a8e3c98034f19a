/**********************************************************************************************************************
 * \file Flash_Programming.c
 * \copyright Copyright (C) Infineon Technologies AG 2019
 *
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are solely in the form of
 * machine-executable object code generated by a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *********************************************************************************************************************/

/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/
#include <string.h>
#include "Ifx_Types.h"
#include "Fls.h"
#include "IfxFlash.h"
#include "IfxCpu.h"
/*********************************************************************************************************************/
/*------------------------------------------------------Macros-------------------------------------------------------*/
/*********************************************************************************************************************/
/*********************************************************************************************************************/
/*------------------------------------------------Function Prototypes------------------------------------------------*/
/*********************************************************************************************************************/
void Fls_WriteBlock(uint32 BlockAddress, uint32 *BlockData, uint32 DataLength);      /* Function that flashes the Data Flash memory     */
void Fls_ReadBlock(uint32 BlockAddress, uint32 *BlockData, uint32 DataLength);
void Fls_Erase(uint32 sectorAddress);
/*********************************************************************************************************************/
/*-------------------------------------------------Global variables--------------------------------------------------*/
/*********************************************************************************************************************/
/*********************************************************************************************************************/
/*---------------------------------------------Function Implementations----------------------------------------------*/
/*********************************************************************************************************************/
void Fls_ReadBlock(uint32 BlockAddress, uint32 *BlockData, uint32 DataLength)
{
    uint32 numPages = (DataLength + DFLASH_PAGE_LENGTH - 1) / DFLASH_PAGE_LENGTH; /* Calculate required pages */

    for (uint32 page = 0; page < numPages; page++)
    {
        uint32 pageAddr = BlockAddress + (page * DFLASH_PAGE_LENGTH); /* Calculate the address for each page */

        /* Read the data directly from the Data Flash memory */
        uint32 dataIndex = page * (DFLASH_PAGE_LENGTH / sizeof(uint32));

        if (dataIndex < DataLength)
        {
            BlockData[dataIndex] = MEM(pageAddr);
        }
        if ((dataIndex + 1) < DataLength)
        {
            BlockData[dataIndex + 1] = MEM(pageAddr + 4);
        }
    }
}
/* This function flashes the Data Flash memory.
 * It is not needed to run this function from the PSPR, thus functions from the Program Flash memory can be called
 * inside.
 */
void Fls_WriteBlock(uint32 BlockAddress, uint32 *BlockData, uint32 DataLength)
{
    uint16 endInitSafetyPassword = IfxScuWdt_getSafetyWatchdogPassword();

    /* Calculate the number of pages needed */
    uint32 numPages = (DataLength + DFLASH_PAGE_LENGTH - 1) / DFLASH_PAGE_LENGTH;

    for (uint32 page = 0; page < numPages; page++)
    {
        uint32 pageAddr = BlockAddress + (page * DFLASH_PAGE_LENGTH); /* Get correct address */

        /* Enter in page mode */
        IfxFlash_enterPageMode(pageAddr);
        IfxFlash_waitUnbusy(FLASH_MODULE, IfxFlash_FlashType_D0);

        /* Load two words of data at a time */
        uint32 dataIndex = page * (DFLASH_PAGE_LENGTH / sizeof(uint32));
        uint32 data1 = (dataIndex < DataLength) ? BlockData[dataIndex] : 0xFFFFFFFF;
        uint32 data2 = ((dataIndex + 1) < DataLength) ? BlockData[dataIndex + 1] : 0xFFFFFFFF;

        IfxFlash_loadPage2X32(pageAddr, data1, data2);

        /* Write the loaded page */
        IfxScuWdt_clearSafetyEndinit(endInitSafetyPassword);
        IfxFlash_writePage(pageAddr);
        IfxScuWdt_setSafetyEndinit(endInitSafetyPassword);

        /* Wait until the data is written */
        IfxFlash_waitUnbusy(FLASH_MODULE, IfxFlash_FlashType_D0);
    }
}

void Fls_Erase(uint32 sectorAddress)
{
    uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
    IfxScuWdt_clearSafetyEndinit(password);
    IfxFlash_eraseSector(sectorAddress);
    IfxScuWdt_setSafetyEndinit(password);
}
