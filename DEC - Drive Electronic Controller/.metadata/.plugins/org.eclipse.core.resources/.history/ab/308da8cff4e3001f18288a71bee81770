#include "DiagMaster.h"
#include "Can.h"
#include "Dcm.h"

typedef struct
{
        Can_RxMsg_t diagnosticMessage;
        uint8 isAllowed;
}DiagMaster_DiagReq_t;

DiagMaster_DiagReq_t DiagMaster_Receive_DiagnosticMessageBuffer[50u];
DiagMaster_DiagReq_t DiagMaster_Transmit_DiagnosticMessageBuffer[50u];

void DiagMaster_MainFunction(void);

void DiagMaster_MainFunction(void)
{
    memcpy(&DiagMaster_Receive_DiagnosticMessageBuffer.diagnosticMessage,
            &Can_Rx_DiagnosticBuffer,
            sizeof(DiagMaster_Receive_DiagnosticMessageBuffer));

    for(uint8 i = 0u; i < Can_Rx_DiagBufCnt; i++)
    {
        if(DiagMaster_Receive_DiagnosticMessageBuffer[Can_Rx_DiagBufCnt].diagnosticMessage.rxData[0] >= 0x10)
        {
            DiagMaster_Receive_DiagnosticMessageBuffer[Can_Rx_DiagBufCnt].isAllowed = 1u;
            memcpy(&Dcm_Receive_DiagnosticMessageBuffer[Can_Rx_DiagBufCnt],
                    &DiagMaster_Receive_DiagnosticMessageBuffer[Can_Rx_DiagBufCnt],
                    sizeof(DiagMaster_Receive_DiagnosticMessageBuffer[Can_Rx_DiagBufCnt]));
        }
        else
        {
            switch(DiagMaster_Receive_DiagnosticMessageBuffer[Can_Rx_DiagBufCnt].diagnosticMessage.rxData[1])
            {
                case 0x10u:
                    DiagMaster_Receive_DiagnosticMessageBuffer[Can_Rx_DiagBufCnt].isAllowed = 1u;
                    break;
                case 0x11u:
                    DiagMaster_Receive_DiagnosticMessageBuffer[Can_Rx_DiagBufCnt].isAllowed = 1u;
                    break;
                case 0x27u:
                    DiagMaster_Receive_DiagnosticMessageBuffer[Can_Rx_DiagBufCnt].isAllowed = 1u;
                    break;
                case 0x3E:
                    DiagMaster_Receive_DiagnosticMessageBuffer[Can_Rx_DiagBufCnt].isAllowed = 1u;
                    break;
                case 0x85u:
                    DiagMaster_Receive_DiagnosticMessageBuffer[Can_Rx_DiagBufCnt].isAllowed = 1u;
                    break;
                case 0x22u:
                    DiagMaster_Receive_DiagnosticMessageBuffer[Can_Rx_DiagBufCnt].isAllowed = 1u;
                    break;
                case 0x2Au:
                    DiagMaster_Receive_DiagnosticMessageBuffer[Can_Rx_DiagBufCnt].isAllowed = 1u;
                    break;
                case 0x2Eu:
                    DiagMaster_Receive_DiagnosticMessageBuffer[Can_Rx_DiagBufCnt].isAllowed = 1u;
                    break;
                case 0x14u:
                    DiagMaster_Receive_DiagnosticMessageBuffer[Can_Rx_DiagBufCnt].isAllowed = 1u;
                    break;
                case 0x19u:
                    DiagMaster_Receive_DiagnosticMessageBuffer[Can_Rx_DiagBufCnt].isAllowed = 1u;
                    break;
                case 0x31u:
                    DiagMaster_Receive_DiagnosticMessageBuffer[Can_Rx_DiagBufCnt].isAllowed = 1u;
                    break;
                case 0x34u:
                    DiagMaster_Receive_DiagnosticMessageBuffer[Can_Rx_DiagBufCnt].isAllowed = 1u;
                    break;
                case 0x36u:
                    DiagMaster_Receive_DiagnosticMessageBuffer[Can_Rx_DiagBufCnt].isAllowed = 1u;
                    break;
                case 0x37u:
                    DiagMaster_Receive_DiagnosticMessageBuffer[Can_Rx_DiagBufCnt].isAllowed = 1u;
                    break;
                default:
                    break;
            }
            memcpy(&Dcm_Receive_DiagnosticMessageBuffer[Can_Rx_DiagBufCnt],
                                &DiagMaster_Receive_DiagnosticMessageBuffer[Can_Rx_DiagBufCnt],
                                sizeof(DiagMaster_Receive_DiagnosticMessageBuffer[Can_Rx_DiagBufCnt]));
        }
    }


}
