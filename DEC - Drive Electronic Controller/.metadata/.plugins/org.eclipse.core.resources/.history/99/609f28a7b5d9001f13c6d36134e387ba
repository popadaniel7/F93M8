/**********************************************************************************************************************
 * \file ERU_Interrupt.c
 * \copyright Copyright (C) Infineon Technologies AG 2019
 *
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are solely in the form of
 * machine-executable object code generated by a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *********************************************************************************************************************/

/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/
#include "Eru.h"
#include "Irq.h"
/*********************************************************************************************************************/
/*------------------------------------------------------Macros-------------------------------------------------------*/
/*********************************************************************************************************************/
#define REQ_IN_PIN_A               &IfxScu_REQ4A_P33_7_IN   /* External request pin for Encoder A */
#define TRIGGER_PIN_A              &MODULE_P33,7            /* Physical pin connected to Encoder A */
#define REQ_IN_PIN_B               &IfxScu_REQ3C_P02_0_IN   /* External request pin for Encoder B */
#define TRIGGER_PIN_B              &MODULE_P02,0            /* Physical pin connected to Encoder B */
/*********************************************************************************************************************/
/*-------------------------------------------------Global variables--------------------------------------------------*/
/*********************************************************************************************************************/
ERUconfig g_ERUconfigA;   /* ERU configuration for Encoder A */
ERUconfig g_ERUconfigB;   /* ERU configuration for Encoder B */
/*********************************************************************************************************************/
/*----------------------------------------------Function Implementations---------------------------------------------*/
/*********************************************************************************************************************/
/* Macro to define Interrupt Service Routine.
 * This macro makes the following definitions:
 * 1) Define linker section as .intvec_tc<vector number>_<interrupt priority>.
 * 2) Define compiler specific attribute for the interrupt functions.
 * 3) Define the Interrupt Service Routine as ISR function.
 *
 * IFX_INTERRUPT(isr, vectabNum, priority)
 *  - isr: Name of the ISR function.
 *  - vectabNum: Vector table number.
 *  - priority: Interrupt priority. Refer Usage of Interrupt Macro for more details.
 */
void Eru_Init(void);
void Eru_EncoderA(void);
void Eru_EncoderB(void);
/* This functions initializes the output pin for the LED and the pin which toggles the state for generating
 * the falling and rising edges which are used to trigger the interrupt.
 * Additionally this function is configuring the ERU module including the service request configuration */
void Eru_Init(void)
{
    /* Initialize physical pins connected to Encoder A and Encoder B as inputs with pull-up resistors */
    IfxPort_setPinMode(TRIGGER_PIN_A, IfxPort_Mode_inputPullUp);  /* Initialize Encoder A pin */
    IfxPort_setPinMode(TRIGGER_PIN_B, IfxPort_Mode_inputPullUp);  /* Initialize Encoder B pin */

    /* Configure ERU for Encoder A */
    g_ERUconfigA.reqPin = REQ_IN_PIN_A; /* Assign external request pin for Encoder A */
    IfxScuEru_initReqPin(g_ERUconfigA.reqPin, IfxPort_InputMode_pullDown); /* Initialize with pull-down if required */
    g_ERUconfigA.inputChannel = (IfxScuEru_InputChannel) g_ERUconfigA.reqPin->channelId; /* Determine input channel */

    /* Enable both rising and falling edge detection for Encoder A */
    IfxScuEru_enableRisingEdgeDetection(g_ERUconfigA.inputChannel);
    IfxScuEru_enableFallingEdgeDetection(g_ERUconfigA.inputChannel);

    /* Configure output channel for Encoder A */
    g_ERUconfigA.outputChannel = IfxScuEru_OutputChannel_0; /* Assign OGU channel 0 for Encoder A */
    g_ERUconfigA.triggerSelect = IfxScuEru_InputNodePointer_0; /* Assign trigger node pointer */

    /* Enable trigger pulse and connect trigger for Encoder A */
    IfxScuEru_enableTriggerPulse(g_ERUconfigA.inputChannel);
    IfxScuEru_connectTrigger(g_ERUconfigA.inputChannel, g_ERUconfigA.triggerSelect);

    /* Set interrupt gating pattern to always active for Encoder A */
    IfxScuEru_setInterruptGatingPattern(g_ERUconfigA.outputChannel, IfxScuEru_InterruptGatingPattern_alwaysActive);

    /* Configure service request for Encoder A */
    g_ERUconfigA.src = &MODULE_SRC.SCU.SCUERU[g_ERUconfigA.outputChannel % 4];
    IfxSrc_init(g_ERUconfigA.src, IfxSrc_Tos_cpu0, ISR_PRIORITY_SCUERU_INT0); /* Assign ISR for Encoder A */
    IfxSrc_enable(g_ERUconfigA.src);

    /* Configure ERU for Encoder B */
    g_ERUconfigB.reqPin = REQ_IN_PIN_B; /* Assign external request pin for Encoder B */
    IfxScuEru_initReqPin(g_ERUconfigB.reqPin, IfxPort_InputMode_pullDown); /* Initialize with pull-down if required */
    g_ERUconfigB.inputChannel = (IfxScuEru_InputChannel) g_ERUconfigB.reqPin->channelId; /* Determine input channel */

    /* Enable both rising and falling edge detection for Encoder B */
    IfxScuEru_enableRisingEdgeDetection(g_ERUconfigB.inputChannel);
    IfxScuEru_enableFallingEdgeDetection(g_ERUconfigB.inputChannel);

    /* Configure output channel for Encoder B */
    g_ERUconfigB.outputChannel = IfxScuEru_OutputChannel_1; /* Assign OGU channel 1 for Encoder B */
    g_ERUconfigB.triggerSelect = IfxScuEru_InputNodePointer_1; /* Assign trigger node pointer */

    /* Enable trigger pulse and connect trigger for Encoder B */
    IfxScuEru_enableTriggerPulse(g_ERUconfigB.inputChannel);
    IfxScuEru_connectTrigger(g_ERUconfigB.inputChannel, g_ERUconfigB.triggerSelect);

    /* Set interrupt gating pattern to always active for Encoder B */
    IfxScuEru_setInterruptGatingPattern(g_ERUconfigB.outputChannel, IfxScuEru_InterruptGatingPattern_alwaysActive);

    /* Configure service request for Encoder B */
    g_ERUconfigB.src = &MODULE_SRC.SCU.SCUERU[g_ERUconfigB.outputChannel % 4];
    IfxSrc_init(g_ERUconfigB.src, IfxSrc_Tos_cpu0, ISR_PRIORITY_SCUERU_INT1); /* Assign ISR for Encoder B */
    IfxSrc_enable(g_ERUconfigB.src);

    /* Install and enable ISRs */
    IfxCpu_enableInterrupts(); /* Enable global interrupts */

    /* Associate ISRs with their respective service requests */
    IfxCpu_Irq_installServiceRequest(&g_ERUconfigA.src, Eru_EncoderA); /* Associate Encoder A ISR */
    IfxCpu_Irq_installServiceRequest(&g_ERUconfigB.src, Eru_EncoderB); /* Associate Encoder B ISR */

}

void Eru_EncoderA(void)
{

}

void Eru_EncoderB(void)
{

}
