#include "Ain.h"
#include "Ain_Filtering.h"
#include <math.h>

static uint32 Ain_MainCounter = AIN_ZERO;
uint32 Ain_AuxBufferDma[CHANNELS_NUM] = {AIN_ZERO};
float Ain_IRSensorValue = AIN_ZERO;
uint8 Ain_CanRx_MeasuredVoltage = AIN_ZERO;

Ifx_EVADC_G_RES Ain_Results[CHANNELS_NUM];

extern IfxEvadc_Adc_Channel g_evadcChannel[CHANNELS_NUM];

void Ain_MainFunction(void);
float Ain_AdcToVoltage(float rawAdc, float refVoltage);
float Ain_ConvertVoltageToDistanceGP2Y0A21YK0F(float voltage);
void Ain_ProcessIRSensorValue(void);

void Ain_ProcessIRSensorValue(void)
{
    static float actualVoltageReference = AIN_ZERO;
    static float localVoltageCalculated = AIN_ZERO;
    static uint16 localRefValue = AIN_ZERO;

    localRefValue  = ADC_VREF_VALUE;
    actualVoltageReference = localRefValue | Ain_CanRx_MeasuredVoltage;
    localVoltageCalculated = Ain_AdcToVoltage((float)Ain_AuxBufferDma[0u], actualVoltageReference);
    Ain_IRSensorValue = Ain_ConvertVoltageToDistanceGP2Y0A21YK0F(localVoltageCalculated);
}

/* Approximate GP2Y0A21YK0F distance calculation from sensor voltage */
float Ain_ConvertVoltageToDistanceGP2Y0A21YK0F(float voltage)
{
    float distanceCm = AIN_ZERO;
    if (voltage <= AIN_GP2Y0A21YK0F_BLINDVOLTAGE)
    {
        return AIN_INVALIDVALUE;
    }
    else
    {
        /* Do nothing. */
    }

    distanceCm = 27.728f * powf(voltage, -1.2045f);

    if (distanceCm < AIN_GP2Y0A21YK0F_MINDIST)
    {
        distanceCm = AIN_GP2Y0A21YK0F_MINDIST;
    }
    else if (distanceCm > AIN_GP2Y0A21YK0F_MAXDIST)
    {
        distanceCm = AIN_GP2Y0A21YK0F_MAXDIST;
    }
    else
    {
        /* Do nothing. */
    }

    return distanceCm;
}

float Ain_AdcToVoltage(float rawAdc, float refVoltage)
{
    return ((float)rawAdc / ADC_MAX_VALUE) * (float)(refVoltage / AIN_DIVISIONFACTOR_TEN);
}

void Ain_MainFunction(void)
{
    static uint8 localCounter = 0u;
    static uint8 localAvg = 0u;

    for(uint8 i = 0; i < CHANNELS_NUM; i++)
    {
        /* Wait for a valid result */
        Ifx_EVADC_G_RES conversionResult;
        do
        {
            conversionResult = IfxEvadc_Adc_getResult(&g_evadcChannel[i]); /* Read the result of the selected channel */
        } while(!conversionResult.B.VF);

        /* Store result */
        Ain_Results[i] = conversionResult;
    }

    if(8u > localCounter)
    {
        localAvg += Ain_Results[0].B.RESULT;
        localCounter++;
    }
    else
    {
        localAvg += Ain_Results[0].B.RESULT;
        localCounter++;
        Ain_AuxBufferDma[0u] = localAvg / localCounter;
        Ain_ProcessIRSensorValue();
    }

    Ain_MainCounter++;
}
