#include "Ifx_Types.h"
#include "IfxCpu.h"
#include "IfxScuWdt.h"
#include "Os.h"
#include "Ain_Filtering.h"
#include "Dma.h"
#include "Eru.h"
#include "Gtm_Atom.h"
#include "Gtm_Pwm.h"
#include "Can.h"
#include "Nvm.h"
#include "Dem.h"
#include "Dcm.h"
#include "McuSm.h"
#include "EncCal.h"
#include "SysMgr.h"
#include "Wdg.h"
#include "Smu.h"
#include "Crc.h"

#define DEBUG_CODE_ACTIVATED 1u

uint8 OsInit_C0 = 0u;

uint8 retval = 0;

extern void Ifx_Ssw_Lbist(void);
extern void Ifx_Ssw_Monbist(void);
extern void Ssw_StartCores(void);
void McuSm_Mbist_tryout(void);

void core0_main(void)
{
#if DEBUG_CODE_ACTIVATED == 1u
    while(MODULE_SCU.RSTSTAT.U >= 40000000)
    {
        __debug();
    }
#endif
    /* LBIST Tests and evaluation */
    Ifx_Ssw_Lbist();
    /* MONBIST Tests and evaluation */
    Ifx_Ssw_Monbist();
    /* MBIST Tests and evaluation */
    McuSm_Mbist_tryout();
    /* Start core 1 and core 2. */
    Ssw_StartCores();
    SysMgr_EcuState = SYSMGR_STARTUP;
    IfxCpu_enableInterrupts();
    IfxScuWdt_disableCpuWatchdog(IfxScuWdt_getCpuWatchdogPassword());
    IfxScuWdt_disableSafetyWatchdog(IfxScuWdt_getSafetyWatchdogPassword());
    McuSm_InitializeDts();
    Ain_FilteringInit();
    Dma_Init();
    Smu_Init();
    McuSm_InitializeBusMpu();
    Eru_Init();
    Can_Init();
    Crc_Init();
    Nvm_ReadAll();
    Dem_Init();
    Dcm_Init();
    EncCal_MainFunction();
    SysMgr_WakeupInitScr();
    SysMgr_ProcessResetDtc();
    Os_Init_C0();
    OsInit_C0 = 1u;
    vTaskStartScheduler_core0();
}

void McuSm_Mbist_tryout(void)
{
    uint8 i = 0;

    while(McuSm_MbistConfigSsh[i] != 254u)
    {
        IfxMtu_enableModule();

        if(McuSm_GetMbistErrors(McuSm_MbistConfigSsh[i]))
        {
            /* Clear the alarm status flags to enable a correct error tracking */
            McuSm_ClearMbistErrors(McuSm_MbistConfigSsh[i]);
        }
        else
        {
            /* Do nothing. */
        }
    }
}
