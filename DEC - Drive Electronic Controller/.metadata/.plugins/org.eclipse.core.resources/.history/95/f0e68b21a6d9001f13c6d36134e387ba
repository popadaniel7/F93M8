/**********************************************************************************************************************
 * \file GTM_ATOM_PWM.c
 * \copyright Copyright (C) Infineon Technologies AG 2019
 *
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are solely in the form of
 * machine-executable object code generated by a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *********************************************************************************************************************/
/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/
#include "Gtm_Pwm.h"
#include "Irq.h"
/*********************************************************************************************************************/
/*------------------------------------------------------Macros-------------------------------------------------------*/
/*********************************************************************************************************************/
#define CLK_FREQ            1000000.0f                          /* CMU clock frequency, in Hertz                    */
#define PWM_PERIOD          5000                                /* PWM period for the ATOM, in ticks                */
#define CLK_FREQ2           1000000.0f                          /* CMU clock frequency, in Hertz                    */
#define PWM_PERIOD2         5000                                /* PWM period for the ATOM, in ticks                */
#define CLK_FREQ3           1000000.0f                          /* CMU clock frequency, in Hertz                    */
#define PWM_PERIOD3         5000                                /* PWM period for the ATOM, in ticks                */
#define CLK_FREQ4           1000000.0f                          /* CMU clock frequency, in Hertz                    */
#define PWM_PERIOD4         5000                                /* PWM period for the ATOM, in ticks                */
#define CLK_FREQ5           1000000.0f                          /* CMU clock frequency, in Hertz                    */
#define PWM_PERIOD5         20000                               /* PWM period for the ATOM, in ticks                */ /* SG90 */
/*********************************************************************************************************************/
/*-------------------------------------------------Global variables--------------------------------------------------*/
/*********************************************************************************************************************/
IfxGtm_Atom_Pwm_Config g_atomConfig;                            /* Timer configuration structure                    */
IfxGtm_Atom_Pwm_Driver g_atomDriver;                            /* Timer Driver structure                           */
IfxGtm_Atom_Pwm_Config g_atomConfig2;                           /* Timer configuration structure                    */
IfxGtm_Atom_Pwm_Driver g_atomDriver2;                           /* Timer Driver structure                           */
IfxGtm_Atom_Pwm_Config g_atomConfig3;                           /* Timer configuration structure                    */
IfxGtm_Atom_Pwm_Driver g_atomDriver3;                           /* Timer Driver structure                           */
IfxGtm_Atom_Pwm_Config g_atomConfig4;                           /* Timer configuration structure                    */
IfxGtm_Atom_Pwm_Driver g_atomDriver4;                           /* Timer Driver structure                           */
IfxGtm_Atom_Pwm_Config g_atomConfig5;                           /* Timer configuration structure                    */
IfxGtm_Atom_Pwm_Driver g_atomDriver5;                           /* Timer Driver structure                           */ /* SG90 */
/*********************************************************************************************************************/
/*-----------------------------------------------Function Prototypes-------------------------------------------------*/
/*********************************************************************************************************************/
void Gtm_Pwm_SetDutyCycle(uint32 dutyCycle, IfxGtm_Atom_Pwm_Config gATOMCfg, IfxGtm_Atom_Pwm_Driver gATOMDriver);
/*********************************************************************************************************************/
/*--------------------------------------------Function Implementations-----------------------------------------------*/
/*********************************************************************************************************************/
/* This function initializes the ATOM */
void Gtm_Pwm_Init(void)
{
    IfxGtm_Cmu_setClkFrequency(&MODULE_GTM, IfxGtm_Cmu_Clk_0, CLK_FREQ); /* Set the CMU clock 0 frequency        */
    IfxGtm_Cmu_enableClocks(&MODULE_GTM, IFXGTM_CMU_CLKEN_CLK0);         /* Enable the CMU clock 0               */
    IfxGtm_Atom_Pwm_initConfig(&g_atomConfig, &MODULE_GTM);              /* Initialize default parameters        */
    g_atomConfig.atom = IfxGtm_ATOM1_0_TOUT0_P02_0_OUT.atom;             /* Select the ATOM                      */
    g_atomConfig.atomChannel = IfxGtm_ATOM1_0_TOUT0_P02_0_OUT.channel;   /* Select the channel                   */
    g_atomConfig.period = PWM_PERIOD;                                    /* Set timer period                     */
    g_atomConfig.pin.outputPin = &IfxGtm_ATOM1_0_TOUT0_P02_0_OUT;        /* Set output                           */
    g_atomConfig.synchronousUpdateEnabled = TRUE;                        /* Enable synchronous update            */
    IfxGtm_Atom_Pwm_init(&g_atomDriver, &g_atomConfig);                  /* Initialize the PWM                   */
    IfxGtm_Atom_Pwm_start(&g_atomDriver, TRUE);                          /* Start the PWM                        */

    IfxGtm_Atom_Pwm_initConfig(&g_atomConfig2, &MODULE_GTM);             /* Initialize default parameters       */
    g_atomConfig.atom = IfxGtm_ATOM1_6N_TOUT1_P02_1_OUT.atom;            /* Select the ATOM                     */
    g_atomConfig.atomChannel = IfxGtm_ATOM1_6N_TOUT1_P02_1_OUT.channel;  /* Select the channel                  */
    g_atomConfig.period = PWM_PERIOD2;                                   /* Set timer period                    */
    g_atomConfig.pin.outputPin = &IfxGtm_ATOM1_6N_TOUT1_P02_1_OUT;       /* Set output                          */
    g_atomConfig.synchronousUpdateEnabled = TRUE;                        /* Enable synchronous update           */
    IfxGtm_Atom_Pwm_init(&g_atomDriver2, &g_atomConfig2);                /* Initialize the PWM                  */
    IfxGtm_Atom_Pwm_start(&g_atomDriver2, TRUE);                         /* Start the PWM                       */

    IfxGtm_Atom_Pwm_initConfig(&g_atomConfig3, &MODULE_GTM);             /* Initialize default parameters       */
    g_atomConfig.atom = IfxGtm_ATOM3_1N_TOUT14_P00_5_OUT.atom;           /* Select the ATOM                     */
    g_atomConfig.atomChannel = IfxGtm_ATOM3_1N_TOUT14_P00_5_OUT.channel; /* Select the channel                  */
    g_atomConfig.period = PWM_PERIOD3;                                   /* Set timer period                    */
    g_atomConfig.pin.outputPin = &IfxGtm_ATOM3_1N_TOUT14_P00_5_OUT;      /* Set output                          */
    g_atomConfig.synchronousUpdateEnabled = TRUE;                        /* Enable synchronous update           */
    IfxGtm_Atom_Pwm_init(&g_atomDriver3, &g_atomConfig3);                /* Initialize the PWM                  */
    IfxGtm_Atom_Pwm_start(&g_atomDriver3, TRUE);                         /* Start the PWM                       */

    IfxGtm_Atom_Pwm_initConfig(&g_atomConfig4, &MODULE_GTM);             /* Initialize default parameters        */
    g_atomConfig.atom = IfxGtm_ATOM3_2N_TOUT15_P00_6_OUT.atom;           /* Select the ATOM                      */
    g_atomConfig.atomChannel = IfxGtm_ATOM3_2N_TOUT15_P00_6_OUT.channel; /* Select the channel                   */
    g_atomConfig.period = PWM_PERIOD4;                                   /* Set timer period                     */
    g_atomConfig.pin.outputPin = &IfxGtm_ATOM3_2N_TOUT15_P00_6_OUT;      /* Set output                           */
    g_atomConfig.synchronousUpdateEnabled = TRUE;                        /* Enable synchronous update            */
    IfxGtm_Atom_Pwm_init(&g_atomDriver4, &g_atomConfig4);                /* Initialize the PWM                   */
    IfxGtm_Atom_Pwm_start(&g_atomDriver4, TRUE);                         /* Start the PWM                        */

    IfxGtm_Atom_Pwm_initConfig(&g_atomConfig5, &MODULE_GTM);             /* Initialize default parameters        */
    g_atomConfig.atom = IfxGtm_ATOM1_2_TOUT2_P02_2_OUT.atom;             /* Select the ATOM                      */
    g_atomConfig.atomChannel = IfxGtm_ATOM1_2_TOUT2_P02_2_OUT.channel;   /* Select the channel                   */
    g_atomConfig.period = PWM_PERIOD5;                                   /* Set timer period                     */
    g_atomConfig.pin.outputPin = &IfxGtm_ATOM1_2_TOUT2_P02_2_OUT;        /* Set output                           */
    g_atomConfig.synchronousUpdateEnabled = TRUE;                        /* Enable synchronous update            */
    IfxGtm_Atom_Pwm_init(&g_atomDriver5, &g_atomConfig5);                /* Initialize the PWM                   */
    IfxGtm_Atom_Pwm_start(&g_atomDriver5, TRUE);                         /* Start the PWM                        */
}
/* This function sets the duty cycle of the PWM */
void Gtm_Pwm_SetDutyCycle(uint32 dutyCycle, IfxGtm_Atom_Pwm_Config gATOMCfg, IfxGtm_Atom_Pwm_Driver gATOMDriver)
{
    g_atomConfig.dutyCycle = dutyCycle;                 /* Set duty cycle                                           */
    IfxGtm_Atom_Pwm_init(&gATOMDriver, &gATOMCfg);      /* Re-initialize the PWM                                    */
}
