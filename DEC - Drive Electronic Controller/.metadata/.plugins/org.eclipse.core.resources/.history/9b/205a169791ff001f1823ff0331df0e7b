#include "Nvm.h"
#include "EncCal.h"
#include "string.h"
#include "Dem.h"

uint8 EncCal_VODataComplete_Default =
{
        0x38,0x57,0x42,0x41,0x45,0x47,0x32,0x33,0x31,0x31,0x4D,0x43,0x32,0x39,0x31,0x31,0x34,0x33,0x46,0x39,0x33,
        0x62,0x6C,0x61,0x63,0x6B,0x2F,0x47,0x54,0x45,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
        0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,
        0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,
        0x42,0x54, 0x43, 0x52, 0x56, 0x45, 0x4E, 0x54,0x43, 0x4C, 0x49, 0x4D, 0x41, 0x44, 0x49, 0x47,0x43, 0x4C, 0x53, 0x52,
        0x45, 0x56, 0x43, 0x41,0x4D, 0x43, 0x4F, 0x4C, 0x4C, 0x41, 0x53, 0x53, 0x49, 0x53, 0x54, 0x43, 0x45, 0x4E, 0x4C, 0x4F, 0x43, 0x41, 0x4C, 0x41, 0x57,0x50, 0x30, 0x31, 0x30, 0x35, 0x32,
        0x35,0x43, 0x42, 0x4D, 0x31, 0x44, 0x4D, 0x55, 0x31, 0x44, 0x45, 0x43, 0x31
        0x00,0x00,0x00,0x00,0x00,0x00
};
EncCal_VOData_t EncCal_VODataComplete;
uint8 EncCal_Calibration_Buffer[ENCCAL_CALIBRATION_SIZE];
uint8 EncCal_Calibration_DefaultBuffer[ENCCAL_CALIBRATION_SIZE] =
{
        50u,30u,15u,10u,80u,0xFFU,0xdfu,0xdfu
};
uint8 EncCal_Calibration_ColDet_StableDistanceCm                               = 0u;
uint8 EncCal_Calibration_ColDet_TtcWarn                                        = 0u;
uint8 EncCal_Calibration_ColDet_TtcBrake                                       = 0u;
uint8 EncCal_Calibration_ColDet_MinDist                                        = 0u;
uint8 EncCal_Calibration_ColDet_MaxDist                                        = 0u;
uint8 EncCal_Calibration_ColDet_InvalidDist                                    = 0u;
uint8 EncCal_Coding_DefaultBuffer[ENCCAL_CODING_SIZE] =
{
        1u,1u,1u,1u,1u,0xdfu,0xdfu,0xdfu
};
uint8 EncCal_Coding_Buffer[ENCCAL_CODING_SIZE];
uint8 EncCal_Coding_IgnCtrl = 0u;
uint8 EncCal_Coding_CenLoc = 0u;
uint8 EncCal_Coding_Hc05 = 0u;
uint8 EncCal_Coding_Hc05Vent = 0u;
uint8 EncCal_Coding_Lsen = 0u;
uint8 EncCal_CodingValidResult = 0u;
uint8 EncCal_CalibrationValidResult = 0u;
uint8 EncCal_IsVoDataValid = 0u;
uint8 EncCal_CheckResult_Coding = 0u;
uint8 EncCal_CheckResult_Calibration = 0u;
uint8 EncCal_CheckResult_VoData = 0u;
uint8 zeroBuffer[sizeof(EncCal_VODataComplete)];

void EncCal_InitVoData(void);
void EncCal_InitCalibration(void);
void EncCal_InitCoding(void);
uint8 EncCal_CodingValidity(void);
uint8 EncCal_CalibrationValidity(void);
void EncCal_MainFunction(void);

void EncCal_InitVoData(void)
{
    EncCal_IsVoDataValid = (memcmp(&EncCal_VODataComplete, zeroBuffer, sizeof(EncCal_VODataComplete)) == 0u);

    if(1u == EncCal_IsVoDataValid)
    {
        memcpy(&EncCal_VODataComplete, &EncCal_VODataComplete_Default, sizeof(EncCal_VODataComplete));
    }
    else
    {
        EncCal_IsVoDataValid = 2u;
    }
}

uint8 EncCal_CalibrationValidity(void)
{
    static uint8 retVal = 0u;

    if(45u > EncCal_Calibration_ColDet_StableDistanceCm || 55u < EncCal_Calibration_ColDet_StableDistanceCm)
    {
        EncCal_Calibration_ColDet_StableDistanceCm = 50u;
        retVal = 1u;
    }
    else
    {
        /* Do nothing. */
    }

    if(30u > EncCal_Calibration_ColDet_TtcWarn || 40u < EncCal_Calibration_ColDet_TtcWarn)
    {
        EncCal_Calibration_ColDet_TtcWarn = 30u;
        retVal = 1u;
    }
    else
    {
        /* Do nothing. */
    }

    if(15u > EncCal_Calibration_ColDet_TtcBrake || 25u < EncCal_Calibration_ColDet_TtcBrake)
    {
        EncCal_Calibration_ColDet_TtcBrake = 15u;
        retVal = 1u;
    }
    else
    {
        /* Do nothing. */
    }

    if(1u > EncCal_Calibration_ColDet_MinDist || 15u < EncCal_Calibration_ColDet_MinDist)
    {
        EncCal_Calibration_ColDet_MinDist = 10u;
        retVal = 1u;
    }
    else
    {
        /* Do nothing. */
    }

    if(75u > EncCal_Calibration_ColDet_MaxDist || 90u < EncCal_Calibration_ColDet_MaxDist)
    {
        EncCal_Calibration_ColDet_MaxDist = 80u;
        retVal = 1u;
    }
    else
    {
        /* Do nothing. */
    }

    if(0xFFU != EncCal_Calibration_ColDet_InvalidDist)
    {
        EncCal_Calibration_ColDet_InvalidDist = 0xFFU;
        retVal = 1u;
    }
    else
    {
        /* Do nothing. */
    }

    return retVal;
}

uint8 EncCal_CodingValidity(void)
{
    static uint8 retVal = 0u;

    if(2u < EncCal_Coding_IgnCtrl)
    {
        EncCal_Coding_IgnCtrl = 1u;
        retVal = 1u;
    }
    else
    {
        /* Do nothing. */
    }

    if(2u < EncCal_Coding_CenLoc)
    {
        EncCal_Coding_CenLoc = 1u;
        retVal = 1u;
    }
    else
    {
        /* Do nothing. */
    }

    if(2u < EncCal_Coding_Hc05)
    {
        EncCal_Coding_Hc05 = 1u;
        retVal = 1u;
    }
    else
    {
        /* Do nothing. */
    }

    if(2u < EncCal_Coding_Hc05Vent)
    {
        EncCal_Coding_Hc05Vent = 1u;
        retVal = 1u;
    }
    else
    {
        /* Do nothing. */
    }

    if(2u < EncCal_Coding_Lsen)
    {
        EncCal_Coding_Lsen = 1u;
        retVal = 1u;
    }
    else
    {
        /* Do nothing. */
    }

    return retVal;
}

void EncCal_InitCalibration(void)
{
    EncCal_Calibration_ColDet_StableDistanceCm                               = EncCal_Calibration_Buffer[0u];
    EncCal_Calibration_ColDet_TtcWarn                                        = EncCal_Calibration_Buffer[1u];
    EncCal_Calibration_ColDet_TtcBrake                                       = EncCal_Calibration_Buffer[2u];
    EncCal_Calibration_ColDet_MinDist                                        = EncCal_Calibration_Buffer[3u];
    EncCal_Calibration_ColDet_MaxDist                                        = EncCal_Calibration_Buffer[4u];
    EncCal_Calibration_ColDet_InvalidDist                                    = EncCal_Calibration_Buffer[5u];
    EncCal_CalibrationValidResult = EncCal_CalibrationValidity();
}

void EncCal_InitCoding(void)
{
    EncCal_Coding_IgnCtrl           = (uint8)EncCal_Coding_Buffer[0u];
    EncCal_Coding_CenLoc            = (uint8)EncCal_Coding_Buffer[1u];
    EncCal_Coding_Hc05              = (uint8)EncCal_Coding_Buffer[2u];
    EncCal_Coding_Hc05Vent          = (uint8)EncCal_Coding_Buffer[3u];
    EncCal_Coding_Lsen              = (uint8)EncCal_Coding_Buffer[4u];
    EncCal_CodingValidResult = EncCal_CodingValidity();
}

void EncCal_MainFunction(void)
{
    static uint8 firstCall = 0u;

    EncCal_InitCalibration();
    EncCal_InitCoding();
    EncCal_InitVoData();

    if(0u == firstCall)
    {
        if(1u == EncCal_CalibrationValidResult)
        {
            Dem_SetDtc(ENCCAL_INVALID_CALIBRATION, 1u, 34u);
        }
        else
        {
            Dem_SetDtc(ENCCAL_INVALID_CALIBRATION, 0u, 34u);
        }

        if(1u == EncCal_CodingValidResult)
        {
            Dem_SetDtc(ENCCAL_INVALID_CODING, 1u, 33u);
        }
        else
        {
            Dem_SetDtc(ENCCAL_INVALID_CODING, 0u, 33u);
        }

        if(1u == EncCal_IsVoDataValid)
        {
            Dem_SetDtc(ENCCAL_INVALID_VODATA, 1u, 35u);
        }
        else
        {
            Dem_SetDtc(ENCCAL_INVALID_VODATA, 0u, 35u);
        }

        firstCall = 1u;
    }
    else
    {
        /* Do nothing. */
    }
}
