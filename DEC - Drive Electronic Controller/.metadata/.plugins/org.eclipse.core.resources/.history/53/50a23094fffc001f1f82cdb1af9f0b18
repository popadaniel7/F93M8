#include "Dcm.h"
#include "DiagMaster.h"
#include "string.h"
#include "EncCal.h"

void Dcm_Init(void);
void Dcm_MainFunction(void);

void Dcm_DSC_DefaultSession(uint8* data);
void Dcm_DSC_ProgrammingSession(uint8* data);
void Dcm_DSC_ExtendedSession(uint8* data);
void Dcm_DSC_CodingSession(uint8* data);
void Dcm_DSC_CalibrationSession(uint8* data);
void Dcm_ER_HardReset(uint8* data);
void Dcm_ER_SoftReset(uint8* data);
void Dcm_TP_TesterPresent(uint8* data);
void Dcm_RDTCI_ReadSupportDTCInformation(uint8* data);
void Dcm_CDTCI_ClearDTCInformation(uint8* data);
void Dcm_CC_CommunicationControl(uint8* data);
void Dcm_CDTCS_ControlDTCSetting(uint8* data);
void Dcm_RC_WriteCoding(uint8* data);
void Dcm_RC_ReadCoding(uint8* data);
void Dcm_RC_WriteCalibration(uint8* data);
void Dcm_RC_ReadCalibration(uint8* data);
void Dcm_RC_WriteVOData(uint8* data);
void Dcm_RC_ReadVOData(uint8* data);
void Dcm_RC_RequestDiagnosticModeActive(uint8* data);
void Dcm_RDBI_AliveTime(uint8* data);
void Dcm_RDBI_SWVersion(uint8* data);
void Dcm_RDBI_ActiveDiagnosticSession(uint8* data);
void Dcm_RC_Request701Active(uint8* data);
void Dcm_RC_Request703Active(uint8* data);
void Dcm_RC_RequestMasterActive(uint8* data);
void Dcm_RC_ResetDcy(uint8* data);

typedef struct
{
        Can_RxMsg_t diagnosticMessage;
        uint8 isAllowed;
        uint8 msgType;
        uint8 masterDiagReqId;
}Dcm_DiagReq_t;

Dcm_DiagReq_t Dcm_Receive_DiagnosticMessageBuffer[50u];
uint32 Dcm_Rx_DiagBufCnt = 0u;
static uint32 Dcm_MainCounter = 0u;

typedef void (*FuncPtr_t)(uint8*);
FuncPtr_t Dcm_FuncPtr[26u] =
{
        Dcm_DSC_DefaultSession,
        Dcm_DSC_ProgrammingSession,
        Dcm_DSC_ExtendedSession,
        Dcm_DSC_CodingSession,
        Dcm_DSC_CalibrationSession,
        Dcm_ER_HardReset,
        Dcm_ER_SoftReset,
        Dcm_TP_TesterPresent,
        Dcm_RDTCI_ReadSupportDTCInformation,
        Dcm_CDTCI_ClearDTCInformation,
        Dcm_CC_CommunicationControl,
        Dcm_CDTCS_ControlDTCSetting,
        Dcm_RC_WriteCoding,
        Dcm_RC_ReadCoding,
        Dcm_RC_WriteCalibration,
        Dcm_RC_ReadCalibration,
        Dcm_RC_WriteVOData,
        Dcm_RC_ReadVOData,
        Dcm_RC_RequestDiagnosticModeActive,
        Dcm_RDBI_SWVersion,
        Dcm_RDBI_ActiveDiagnosticSession,
        Dcm_RDBI_AliveTime,
        Dcm_RC_Request701Active,
        Dcm_RC_Request703Active,
        Dcm_RC_RequestMasterActive,
        Dcm_RC_ResetDcy
};

void Dcm_MainFunction(void)
{
    static uint8 localData = 0u;
    static uint32* localArr;
    /* Copy data in exclusive area. */
    IfxCpu_disableInterrupts();
    memcpy(&Dcm_Receive_DiagnosticMessageBuffer,
            &DiagMaster_Transmit_DiagnosticMessageBuffer,
            sizeof(Dcm_Receive_DiagnosticMessageBuffer));
    IfxCpu_enableInterrupts();
    /* Process the queue. */
    while(Dcm_Rx_DiagBufCnt > 0u)
    {
        /* Check if the request is for master only. */
        if(0x6FFu == Dcm_Receive_DiagnosticMessageBuffer[Dcm_Rx_DiagBufCnt].diagnosticMessage.rxMsg.messageId)
        {
            /* Process master response. */
            if(1u == Dcm_Receive_DiagnosticMessageBuffer[Dcm_Rx_DiagBufCnt].isAllowed)
            {
                if(DIAGMASTER_ISOTPRXTX_TYPE == Dcm_Receive_DiagnosticMessageBuffer[Dcm_Rx_DiagBufCnt].msgType)
                {
                    switch(Dcm_Receive_DiagnosticMessageBuffer[Dcm_Rx_DiagBufCnt].masterDiagReqId)
                    {
                        case 0x04u:
                        {
                            EncCal_ReadCoding(localArr);
                            /* Get ISO-TP message in ISO-TP buffer. */
                            Can_IsoTp_OnCanReceive((uint16)Dcm_Receive_DiagnosticMessageBuffer[Dcm_Rx_DiagBufCnt].diagnosticMessage.rxMsg.messageId,
                                    (uint8*)localArr,
                                    ENCCAL_CODING_SIZE);
                            /* Process ISO-TP request. */
                            Can_IsoTp_MainFunction();
                            break;
                        }

                        case 0x05u:
                        {
                            EncCal_ReadCalibration(localArr);
                            /* Get ISO-TP message in ISO-TP buffer. */
                            Can_IsoTp_OnCanReceive((uint16)Dcm_Receive_DiagnosticMessageBuffer[Dcm_Rx_DiagBufCnt].diagnosticMessage.rxMsg.messageId,
                                    (uint8*)localArr,
                                    ENCCAL_CALIBRATION_SIZE);
                            /* Process ISO-TP request. */
                            Can_IsoTp_MainFunction();
                            break;
                        }
                        default:
                            break;
                    }
                }
                else
                {
                    Dcm_FuncPtr[Dcm_Receive_DiagnosticMessageBuffer[Dcm_Rx_DiagBufCnt].masterDiagReqId]((uint8*)Dcm_Receive_DiagnosticMessageBuffer[Dcm_Rx_DiagBufCnt].diagnosticMessage.rxData);
                    Can_IsoTp_SendFrame((uint16)Dcm_Receive_DiagnosticMessageBuffer[Dcm_Rx_DiagBufCnt].diagnosticMessage.rxMsg.messageId,
                            (uint8*)Dcm_Receive_DiagnosticMessageBuffer[Dcm_Rx_DiagBufCnt].diagnosticMessage.rxData,
                            (Dcm_Receive_DiagnosticMessageBuffer[Dcm_Rx_DiagBufCnt].diagnosticMessage.rxData[0u] & 0x0Fu));
                }
            }
            else
            {
                Dcm_Receive_DiagnosticMessageBuffer[Dcm_Rx_DiagBufCnt].diagnosticMessage.rxData[0u] = 0x03u;
                localData = (uint8)Dcm_Receive_DiagnosticMessageBuffer[Dcm_Rx_DiagBufCnt].diagnosticMessage.rxData[1u];
                Dcm_Receive_DiagnosticMessageBuffer[Dcm_Rx_DiagBufCnt].diagnosticMessage.rxData[1u] = 0x7Fu;
                Dcm_Receive_DiagnosticMessageBuffer[Dcm_Rx_DiagBufCnt].diagnosticMessage.rxData[2u] = localData;
                Dcm_Receive_DiagnosticMessageBuffer[Dcm_Rx_DiagBufCnt].diagnosticMessage.rxData[3u] = 0u;
                Dcm_Receive_DiagnosticMessageBuffer[Dcm_Rx_DiagBufCnt].diagnosticMessage.rxData[4u] = 0u;
                Dcm_Receive_DiagnosticMessageBuffer[Dcm_Rx_DiagBufCnt].diagnosticMessage.rxData[5u] = 0u;
                Dcm_Receive_DiagnosticMessageBuffer[Dcm_Rx_DiagBufCnt].diagnosticMessage.rxData[6u] = 0u;
                Dcm_Receive_DiagnosticMessageBuffer[Dcm_Rx_DiagBufCnt].diagnosticMessage.rxData[7u] = 0u;

                Can_IsoTp_SendFrame((uint16)Dcm_Receive_DiagnosticMessageBuffer[Dcm_Rx_DiagBufCnt].diagnosticMessage.rxMsg.messageId,
                        (uint8*)Dcm_Receive_DiagnosticMessageBuffer[Dcm_Rx_DiagBufCnt].diagnosticMessage.rxData,
                        (Dcm_Receive_DiagnosticMessageBuffer[Dcm_Rx_DiagBufCnt].diagnosticMessage.rxData[0u] & 0x0F));
            }
        }
        else
        {
            /* Check if we are allowed to respond to the tester. */
            if(1u == Dcm_Receive_DiagnosticMessageBuffer[Dcm_Rx_DiagBufCnt].isAllowed)
            {
                /* Check if response type shall be ISO-TP. */
                if(DIAGMASTER_ISOTPRXTX_TYPE == Dcm_Receive_DiagnosticMessageBuffer[Dcm_Rx_DiagBufCnt].msgType)
                {
                    /* Get ISO-TP message in ISO-TP buffer. */
                    Can_IsoTp_OnCanReceive((uint16)Dcm_Receive_DiagnosticMessageBuffer[Dcm_Rx_DiagBufCnt].diagnosticMessage.rxMsg.messageId,
                            (uint8*)Dcm_Receive_DiagnosticMessageBuffer[Dcm_Rx_DiagBufCnt].diagnosticMessage.rxData,
                            (Dcm_Receive_DiagnosticMessageBuffer[Dcm_Rx_DiagBufCnt].diagnosticMessage.rxData[0u] & 0x0F));
                    /* Process ISO-TP request. */
                    Can_IsoTp_MainFunction();
                }
                else
                {
                    /* Non-ISO-TP request. */
                    /* Slave request or response. */
                    /* We do not know, we do not care. As long as it is allowed. */
                    /* Even though it is not an ISO-TP frame, we have everything we need in the ISO-TP Send Frame function call. */
                    Can_IsoTp_SendFrame((uint16)Dcm_Receive_DiagnosticMessageBuffer[Dcm_Rx_DiagBufCnt].diagnosticMessage.rxMsg.messageId,
                            (uint8*)Dcm_Receive_DiagnosticMessageBuffer[Dcm_Rx_DiagBufCnt].diagnosticMessage.rxData,
                            (Dcm_Receive_DiagnosticMessageBuffer[Dcm_Rx_DiagBufCnt].diagnosticMessage.rxData[0u] & 0x0F));
                }
            }
            else
            {
                Dcm_Receive_DiagnosticMessageBuffer[Dcm_Rx_DiagBufCnt].diagnosticMessage.rxData[0u] = 0x03u;
                localData = (uint8)Dcm_Receive_DiagnosticMessageBuffer[Dcm_Rx_DiagBufCnt].diagnosticMessage.rxData[1u];
                Dcm_Receive_DiagnosticMessageBuffer[Dcm_Rx_DiagBufCnt].diagnosticMessage.rxData[1u] = 0x7Fu;
                Dcm_Receive_DiagnosticMessageBuffer[Dcm_Rx_DiagBufCnt].diagnosticMessage.rxData[2u] = localData;
                Dcm_Receive_DiagnosticMessageBuffer[Dcm_Rx_DiagBufCnt].diagnosticMessage.rxData[3u] = 0u;
                Dcm_Receive_DiagnosticMessageBuffer[Dcm_Rx_DiagBufCnt].diagnosticMessage.rxData[4u] = 0u;
                Dcm_Receive_DiagnosticMessageBuffer[Dcm_Rx_DiagBufCnt].diagnosticMessage.rxData[5u] = 0u;
                Dcm_Receive_DiagnosticMessageBuffer[Dcm_Rx_DiagBufCnt].diagnosticMessage.rxData[6u] = 0u;
                Dcm_Receive_DiagnosticMessageBuffer[Dcm_Rx_DiagBufCnt].diagnosticMessage.rxData[7u] = 0u;

                Can_IsoTp_SendFrame((uint16)Dcm_Receive_DiagnosticMessageBuffer[Dcm_Rx_DiagBufCnt].diagnosticMessage.rxMsg.messageId,
                        (uint8*)Dcm_Receive_DiagnosticMessageBuffer[Dcm_Rx_DiagBufCnt].diagnosticMessage.rxData,
                        (Dcm_Receive_DiagnosticMessageBuffer[Dcm_Rx_DiagBufCnt].diagnosticMessage.rxData[0u] & 0x0Fu));
            }
        }
        /* Clear this message. */
        memset(&Dcm_Receive_DiagnosticMessageBuffer[Dcm_Rx_DiagBufCnt], 0u, sizeof(Dcm_Receive_DiagnosticMessageBuffer[Dcm_Rx_DiagBufCnt]));
        /* Decrement the queue counter. */
        Dcm_Rx_DiagBufCnt--;
        localData = 0u;
    }

    Dcm_MainCounter++;
}

void Dcm_Init(void)
{
    Can_IsoTp_Init();
}

void Dcm_DSC_DefaultSession(uint8* data)
{
    data[1] = data[1] + 0x40u;
    DiagMaster_ActiveSessionState = 1u;
}

void Dcm_DSC_ProgrammingSession(uint8* data)
{
    data[1] = data[1] + 0x40u;
    DiagMaster_ActiveSessionState = 2u;
}

void Dcm_DSC_ExtendedSession(uint8* data)
{
    data[1] = data[1] + 0x40u;
    DiagMaster_ActiveSessionState = 3u;
}

void Dcm_DSC_CodingSession(uint8* data)
{
    data[1] = data[1] + 0x40u;
    DiagMaster_ActiveSessionState = 4u;
}

void Dcm_DSC_CalibrationSession(uint8* data)
{
    data[1] = data[1] + 0x40u;
    DiagMaster_ActiveSessionState = 5u;
}

void Dcm_ER_HardReset(uint8* data)
{
    (void)data;
    Dcm_Receive_DiagnosticMessageBuffer[Dcm_Rx_DiagBufCnt].diagnosticMessage.rxData[1] += 0x40u;
    Can_IsoTp_SendFrame((uint16)Dcm_Receive_DiagnosticMessageBuffer[Dcm_Rx_DiagBufCnt].diagnosticMessage.rxMsg.messageId,
            (uint8*)Dcm_Receive_DiagnosticMessageBuffer[Dcm_Rx_DiagBufCnt].diagnosticMessage.rxData,
            (Dcm_Receive_DiagnosticMessageBuffer[Dcm_Rx_DiagBufCnt].diagnosticMessage.rxData[0u] & 0x0Fu));
    McuSm_PerformResetHook(0u, 0u)
}

void Dcm_ER_SoftReset(uint8* data)
{
    data[1] = data[1] + 0x40u;
}

void Dcm_TP_TesterPresent(uint8* data)
{
    data[1] = data[1] + 0x40u;
}

void Dcm_RDTCI_ReadSupportDTCInformation(uint8* data)
{
    data[1] = data[1] + 0x40u;
}

void Dcm_CDTCI_ClearDTCInformation(uint8* data)
{
    data[1] = data[1] + 0x40u;
}

void Dcm_CC_CommunicationControl(uint8* data)
{
    data[1] = data[1] + 0x40u;
}

void Dcm_CDTCS_ControlDTCSetting(uint8* data)
{
    data[1] = data[1] + 0x40u;
}

void Dcm_RC_WriteCoding(uint8* data)
{
    data[1] = data[1] + 0x40u;
}

void Dcm_RC_ReadCoding(uint8* data)
{
    data[1] = data[1] + 0x40u;
}

void Dcm_RC_WriteCalibration(uint8* data)
{
    data[1] = data[1] + 0x40u;
}

void Dcm_RC_ReadCalibration(uint8* data)
{
    data[1] = data[1] + 0x40u;
}

void Dcm_RC_WriteVOData(uint8* data)
{
    data[1] = data[1] + 0x40u;
}

void Dcm_RC_ReadVOData(uint8* data)
{
    data[1] = data[1] + 0x40u;
}

void Dcm_RC_RequestDiagnosticModeActive(uint8* data)
{
    data[1] = data[1] + 0x40u;
}

void Dcm_RDBI_AliveTime(uint8* data)
{
    data[0] = data[0] + 0x04u;
    data[1] = data[1] + 0x40u;
}

void Dcm_RDBI_SWVersion(uint8* data)
{
    data[0] = data[0] + 0x02u;
    data[1] = data[1] + 0x40u;
}

void Dcm_RDBI_ActiveDiagnosticSession(uint8* data)
{
    data[0] = data[0] + 0x01u;
    data[1] = data[1] + 0x40u;
    data[4] = DiagMaster_ActiveSessionState;
}

void Dcm_RC_Request701Active(uint8* data)
{
    data[1] = data[1] + 0x40u;
}

void Dcm_RC_Request703Active(uint8* data)
{
    data[1] = data[1] + 0x40u;
}

void Dcm_RC_RequestMasterActive(uint8* data)
{
    data[1] = data[1] + 0x40u;
}

void Dcm_RC_ResetDcy(uint8* data)
{
    data[1] = data[1] + 0x40u;
}
