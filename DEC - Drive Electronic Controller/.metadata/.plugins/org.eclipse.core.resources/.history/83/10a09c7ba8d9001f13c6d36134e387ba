/**********************************************************************************************************************
 * \file GTM_TIM_Capture.c
 * \brief  GTM TIM Capture for Quadrature Encoder
 * \copyright Copyright (C) Infineon Technologies AG 2019
 *
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are solely in the form of
 * machine-executable object code generated by a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *********************************************************************************************************************/

/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/
#include "Ifx_Types.h"
#include "IfxGtm_Tim_In.h"
#include "IfxGtm_Tom_Pwm.h"
#include "IfxCpu.h"
#include "IfxGtm.h"
/*********************************************************************************************************************/
/*------------------------------------------------------Macros-------------------------------------------------------*/
/*********************************************************************************************************************/
#define ENCODER_A        IfxGtm_TIM0_0_P02_0_IN  /* Encoder Channel A */
#define ENCODER_B        IfxGtm_TIM0_1_P02_1_IN  /* Encoder Channel B */

/*********************************************************************************************************************/
/*-------------------------------------------------Global variables--------------------------------------------------*/
/*********************************************************************************************************************/
volatile int32 g_encoderCount = 0;                        /* Global variable for encoder count          */
boolean g_dataCoherent = FALSE;                            /* Boolean to know if the measured data is coherent */

IfxGtm_Tim_In g_driverTIM_A;                               /* TIM driver structure for Encoder A         */
IfxGtm_Tim_In g_driverTIM_B;                               /* TIM driver structure for Encoder B         */

/* State variables for quadrature decoding */
volatile IfxGtm_Tim_In_State g_encoderAState = IFXGTM_TIM_IN_STATE_LOW;
volatile IfxGtm_Tim_In_State g_encoderBState = IFXGTM_TIM_IN_STATE_LOW;

/*********************************************************************************************************************/
/*---------------------------------------------Function Implementations----------------------------------------------*/
/*********************************************************************************************************************/
void Gtm_Tim_Capture_Init(void);
void Gtm_Tim_Capture_EncoderBIsr(void);
void Gtm_Tim_Capture_EncoderAIsr(void);
/* This function initializes the TIM to capture quadrature encoder signals */
void Gtm_Tim_Capture_Init(void)
{
    /* Enable the GTM module */
    IfxGtm_enable(&MODULE_GTM);

    /* Enable the CMU clock 0 for GTM */
    IfxGtm_Cmu_enableClocks(&MODULE_GTM, IFXGTM_CMU_CLKEN_CLK0);

    /* Configure Encoder A TIM */
    IfxGtm_Tim_In_Config configTIM_A, configTIM_B;

    IfxGtm_Tim_In_initConfig(&configTIM_A, &MODULE_GTM);            /* Initialize default parameters for A */
    configTIM_A.filter.inputPin = &ENCODER_A;                      /* Select input port pin for Encoder A */
    configTIM_A.filter.inputPinMode = IfxPort_InputMode_pullUp;    /* Select input port pin mode (pull-up recommended for encoders) */
    configTIM_A.mode = IfxGtm_Tim_In_Mode_capture;                 /* Set mode to capture */
    configTIM_A.captureEdge = IfxGtm_Tim_In_Edge_all;              /* Capture on both rising and falling edges */
    configTIM_A.isrPriority = ISR_PRIORITY_TIM_A;                  /* Set ISR priority for Encoder A */
    configTIM_A.isrProvider = ISR_PROVIDER_TIM_A;                  /* Set ISR provider for Encoder A */
    configTIM_A.callback = &TIM_A_ISR;                             /* Set ISR handler for Encoder A */
    IfxGtm_Tim_In_init(&g_driverTIM_A, &configTIM_A);              /* Initialize the TIM for Encoder A */

    /* Configure Encoder B TIM */
    IfxGtm_Tim_In_initConfig(&configTIM_B, &MODULE_GTM);            /* Initialize default parameters for B */
    configTIM_B.filter.inputPin = &ENCODER_B;                      /* Select input port pin for Encoder B */
    configTIM_B.filter.inputPinMode = IfxPort_InputMode_pullUp;    /* Select input port pin mode (pull-up recommended for encoders) */
    configTIM_B.mode = IfxGtm_Tim_In_Mode_capture;                 /* Set mode to capture */
    configTIM_B.captureEdge = IfxGtm_Tim_In_Edge_all;              /* Capture on both rising and falling edges */
    configTIM_B.isrPriority = ISR_PRIORITY_TIM_B;                  /* Set ISR priority for Encoder B */
    configTIM_B.isrProvider = ISR_PROVIDER_TIM_B;                  /* Set ISR provider for Encoder B */
    configTIM_B.callback = &TIM_B_ISR;                             /* Set ISR handler for Encoder B */
    IfxGtm_Tim_In_init(&g_driverTIM_B, &configTIM_B);              /* Initialize the TIM for Encoder B */

    /* Initialize encoder states based on current pin levels */
    g_encoderAState = IfxGtm_Tim_In_getState(&g_driverTIM_A);
    g_encoderBState = IfxGtm_Tim_In_getState(&g_driverTIM_B);

    /* Clear any pending interrupts */
    IfxGtm_Tim_In_clearInterrupt(&g_driverTIM_A);
    IfxGtm_Tim_In_clearInterrupt(&g_driverTIM_B);

    /* Enable interrupts in the GTM module */
    IfxGtm_Tim_In_enableInterrupt(&g_driverTIM_A);
    IfxGtm_Tim_In_enableInterrupt(&g_driverTIM_B);
}




void Gtm_Tim_Capture_EncoderAIsr(void)
{
    /* Clear the interrupt flag */
        IfxGtm_Tim_In_clearInterrupt(&g_driverTIM_A);

        /* Read current states */
        g_encoderAState = IfxGtm_Tim_In_getState(&g_driverTIM_A);
        g_encoderBState = IfxGtm_Tim_In_getState(&g_driverTIM_B);

        /* Quadrature decoding logic */
        if (g_encoderAState == IFXGTM_TIM_IN_STATE_RISING)
        {
            if (g_encoderBState == IFXGTM_TIM_IN_STATE_HIGH)
            {
                g_encoderCount++;
            }
            else
            {
                g_encoderCount--;
            }
        }
        else if (g_encoderAState == IFXGTM_TIM_IN_STATE_FALLING)
        {
            if (g_encoderBState == IFXGTM_TIM_IN_STATE_LOW)
            {
                g_encoderCount++;
            }
            else
            {
                g_encoderCount--;
            }
        }
}

void Gtm_Tim_Capture_EncoderBIsr(void)
{
    /* Clear the interrupt flag */
        IfxGtm_Tim_In_clearInterrupt(&g_driverTIM_B);

        /* Read current states */
        g_encoderAState = IfxGtm_Tim_In_getState(&g_driverTIM_A);
        g_encoderBState = IfxGtm_Tim_In_getState(&g_driverTIM_B);

        /* Quadrature decoding logic */
        if (g_encoderBState == IFXGTM_TIM_IN_STATE_RISING)
        {
            if (g_encoderAState == IFXGTM_TIM_IN_STATE_HIGH)
            {
                g_encoderCount--;
            }
            else
            {
                g_encoderCount++;
            }
        }
        else if (g_encoderBState == IFXGTM_TIM_IN_STATE_FALLING)
        {
            if (g_encoderAState == IFXGTM_TIM_IN_STATE_LOW)
            {
                g_encoderCount--;
            }
            else
            {
                g_encoderCount++;
            }
        }
}


/* Function to retrieve the current encoder count */
uint32 Gtm_Tim_Capture_GetEncoderCount(void)
{
    return g_encoderCount;
}

/* Function to reset the encoder count */
void Gtm_Tim_Capture_ResetEncoderCount(void)
{
    g_encoderCount = 0;
}
