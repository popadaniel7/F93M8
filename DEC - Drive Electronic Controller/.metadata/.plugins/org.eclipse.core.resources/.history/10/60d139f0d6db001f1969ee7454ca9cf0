/**********************************************************************************************************************
 * \file DMA_ADC_Transfer.c
 * \copyright Copyright (C) Infineon Technologies AG 2019
 *
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are solely in the form of
 * machine-executable object code generated by a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *********************************************************************************************************************/

/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/
#include "Dma.h"
/*********************************************************************************************************************/
/*-------------------------------------------------Global variables--------------------------------------------------*/
/*********************************************************************************************************************/
/* DMA channel handle */
IfxDma_Dma_Channel g_DMAchn;
/* DMA buffer */
uint32 Dma_DestinationAdcBuffer[N_TRANSFER];
/*********************************************************************************************************************/
/*---------------------------------------------Function Implementations----------------------------------------------*/
/*********************************************************************************************************************/
/* Function to configure and initialize the DMA transaction (transfers, moves, addresses...) */
void Dma_Init(void)
{
    /* Create module configuration */
    IfxDma_Dma_Config dmaConfig;
    IfxDma_Dma_initModuleConfig(&dmaConfig, &MODULE_DMA);
    /* Initialize module */
    IfxDma_Dma dma;
    IfxDma_Dma_initModule(&dma, &dmaConfig);
    /* Initial configuration for the channel */
    IfxDma_Dma_ChannelConfig dmaChnsCfg;
    IfxDma_Dma_initChannelConfig(&dmaChnsCfg, &dma);
    dmaChnsCfg.transferCount = CHANNELS_NUM;                                                      /* Number of transfers per transaction                          */
    dmaChnsCfg.requestMode = IfxDma_ChannelRequestMode_completeTransactionPerRequest;           /* Complete a full transaction on request                       */
    dmaChnsCfg.moveSize = IfxDma_ChannelMoveSize_32bit;                                         /* Size of the data to be moved                                 */
    dmaChnsCfg.operationMode = IfxDma_ChannelOperationMode_continuous;                          /* DMA channel stays enabled after one request                  */
    dmaChnsCfg.hardwareRequestEnabled = TRUE;                                                   /* DMA as Interrupt Service Provider                            */
    /* Source and destination addresses */
    dmaChnsCfg.destinationAddressCircularRange = IfxDma_ChannelIncrementCircular_32;            /* Source address remains the same after transfer               */
    dmaChnsCfg.sourceCircularBufferEnabled = TRUE;                                              /* Enable the source circular buffering                         */
    dmaChnsCfg.sourceAddressCircularRange = IfxDma_ChannelIncrementCircular_32;                 /* Destination address remains the same after transfer          */
    dmaChnsCfg.destinationCircularBufferEnabled = TRUE;                                         /* Enable the destination circular buffering                    */
    /* Interrupt generated after transactions */
    dmaChnsCfg.channelInterruptEnabled = TRUE;                                                  /* Enable the interrupt generation                              */
    dmaChnsCfg.channelInterruptControl = IfxDma_ChannelInterruptControl_thresholdLimitMatch;    /* DMA triggers an interrupt once the full transaction is done  */
    dmaChnsCfg.channelInterruptTypeOfService = IfxSrc_Tos_cpu0;                                 /* CPU0 is the Interrupt Service Provider of this interrupt     */
    dmaChnsCfg.channelInterruptPriority = ISR_PRIORITY_DMA;                                     /* Assign a priority to the interrupt                           */
    /* Channel specific configurations */
    dmaChnsCfg.channelId = (IfxDma_ChannelId) DMA_CHANNEL;                                      /* Select the Channel 1                                         */
    dmaChnsCfg.sourceAddress = SRC_ADDR;                                                        /* Address of EVADC Group 0 Result Register 0                   */
    dmaChnsCfg.sourceAddressIncrementStep = sizeof(uint32);
    dmaChnsCfg.destinationAddress = (uint32)&Dma_DestinationAdcBuffer[0];                               /* Start address of DSPR0                                       */
    dmaChnsCfg.destinationAddressIncrementStep = sizeof(uint32);
    /* Initialize the DMA channel */
    IfxDma_Dma_initChannel(&g_DMAchn, &dmaChnsCfg);
}
