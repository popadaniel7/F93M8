
DEC_FBL.elf:     file format elf32-tricore

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .CPU2.ustack  00000800  50014e00  50014e00  000003d4  2**0
                  ALLOC
  1 .CPU2.istack  00000400  50015700  50015700  000003d4  2**0
                  ALLOC
  2 .CPU2.csa     00002000  50015c00  50015c00  000003d4  2**0
                  ALLOC
  3 .CPU1.ustack  00000800  60038e00  60038e00  000003d4  2**0
                  ALLOC
  4 .CPU1.istack  00000400  60039700  60039700  000003d4  2**0
                  ALLOC
  5 .CPU1.csa     00002000  60039c00  60039c00  000003d4  2**0
                  ALLOC
  6 .CPU0.ustack  00000800  70038e00  70038e00  000003d4  2**0
                  ALLOC
  7 .CPU0.istack  00000400  70039700  70039700  000003d4  2**0
                  ALLOC
  8 .CPU0.csa     00002000  70039c00  70039c00  000003d4  2**0
                  ALLOC
  9 .start_tc0    0000000c  a0000000  a0000000  0000339e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .traptab_tc0  00000100  80000100  80000100  000003e0  2**5
                  CONTENTS, ALLOC, LOAD, CODE
 11 .traptab_tc1  00000100  80300000  80300000  00002dc0  2**5
                  CONTENTS, ALLOC, LOAD, CODE
 12 .traptab_tc2  00000100  80300100  80300100  00002ec0  2**5
                  CONTENTS, ALLOC, LOAD, CODE
 13 .start_tc1    0000000c  a0300200  a0300200  000033aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .start_tc2    0000000c  a0300220  a0300220  000033b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .inttab_tc0_000 00000000  802fe000  802fe000  00004364  2**0
                  CONTENTS
 16 .inttab_tc0_001 00000000  802fe020  802fe020  00004364  2**0
                  CONTENTS
 17 .inttab_tc0_002 00000000  802fe040  802fe040  00004364  2**0
                  CONTENTS
 18 .inttab_tc0_003 00000000  802fe060  802fe060  00004364  2**0
                  CONTENTS
 19 .inttab_tc0_004 00000000  802fe080  802fe080  00004364  2**0
                  CONTENTS
 20 .inttab_tc0_005 00000000  802fe0a0  802fe0a0  00004364  2**0
                  CONTENTS
 21 .inttab_tc0_006 00000000  802fe0c0  802fe0c0  00004364  2**0
                  CONTENTS
 22 .inttab_tc0_007 00000000  802fe0e0  802fe0e0  00004364  2**0
                  CONTENTS
 23 .inttab_tc0_008 00000000  802fe100  802fe100  00004364  2**0
                  CONTENTS
 24 .inttab_tc0_009 00000000  802fe120  802fe120  00004364  2**0
                  CONTENTS
 25 .inttab_tc0_00A 00000000  802fe140  802fe140  00004364  2**0
                  CONTENTS
 26 .inttab_tc0_00B 00000000  802fe160  802fe160  00004364  2**0
                  CONTENTS
 27 .inttab_tc0_00C 00000000  802fe180  802fe180  00004364  2**0
                  CONTENTS
 28 .inttab_tc0_00D 00000000  802fe1a0  802fe1a0  00004364  2**0
                  CONTENTS
 29 .inttab_tc0_00E 00000000  802fe1c0  802fe1c0  00004364  2**0
                  CONTENTS
 30 .inttab_tc0_00F 00000000  802fe1e0  802fe1e0  00004364  2**0
                  CONTENTS
 31 .inttab_tc0_010 00000000  802fe200  802fe200  00004364  2**0
                  CONTENTS
 32 .inttab_tc0_011 00000000  802fe220  802fe220  00004364  2**0
                  CONTENTS
 33 .inttab_tc0_012 00000000  802fe240  802fe240  00004364  2**0
                  CONTENTS
 34 .inttab_tc0_013 00000000  802fe260  802fe260  00004364  2**0
                  CONTENTS
 35 .inttab_tc0_014 00000000  802fe280  802fe280  00004364  2**0
                  CONTENTS
 36 .inttab_tc0_015 00000000  802fe2a0  802fe2a0  00004364  2**0
                  CONTENTS
 37 .inttab_tc0_016 00000000  802fe2c0  802fe2c0  00004364  2**0
                  CONTENTS
 38 .inttab_tc0_017 00000000  802fe2e0  802fe2e0  00004364  2**0
                  CONTENTS
 39 .inttab_tc0_018 00000000  802fe300  802fe300  00004364  2**0
                  CONTENTS
 40 .inttab_tc0_019 00000000  802fe320  802fe320  00004364  2**0
                  CONTENTS
 41 .inttab_tc0_01A 00000000  802fe340  802fe340  00004364  2**0
                  CONTENTS
 42 .inttab_tc0_01B 00000000  802fe360  802fe360  00004364  2**0
                  CONTENTS
 43 .inttab_tc0_01C 00000000  802fe380  802fe380  00004364  2**0
                  CONTENTS
 44 .inttab_tc0_01D 00000000  802fe3a0  802fe3a0  00004364  2**0
                  CONTENTS
 45 .inttab_tc0_01E 00000000  802fe3c0  802fe3c0  00004364  2**0
                  CONTENTS
 46 .inttab_tc0_01F 00000000  802fe3e0  802fe3e0  00004364  2**0
                  CONTENTS
 47 .inttab_tc0_020 00000000  802fe400  802fe400  00004364  2**0
                  CONTENTS
 48 .inttab_tc0_021 00000000  802fe420  802fe420  00004364  2**0
                  CONTENTS
 49 .inttab_tc0_022 00000000  802fe440  802fe440  00004364  2**0
                  CONTENTS
 50 .inttab_tc0_023 00000000  802fe460  802fe460  00004364  2**0
                  CONTENTS
 51 .inttab_tc0_024 00000000  802fe480  802fe480  00004364  2**0
                  CONTENTS
 52 .inttab_tc0_025 00000000  802fe4a0  802fe4a0  00004364  2**0
                  CONTENTS
 53 .inttab_tc0_026 00000000  802fe4c0  802fe4c0  00004364  2**0
                  CONTENTS
 54 .inttab_tc0_027 00000000  802fe4e0  802fe4e0  00004364  2**0
                  CONTENTS
 55 .inttab_tc0_028 00000000  802fe500  802fe500  00004364  2**0
                  CONTENTS
 56 .inttab_tc0_029 00000000  802fe520  802fe520  00004364  2**0
                  CONTENTS
 57 .inttab_tc0_02A 00000000  802fe540  802fe540  00004364  2**0
                  CONTENTS
 58 .inttab_tc0_02B 00000000  802fe560  802fe560  00004364  2**0
                  CONTENTS
 59 .inttab_tc0_02C 00000000  802fe580  802fe580  00004364  2**0
                  CONTENTS
 60 .inttab_tc0_02D 00000000  802fe5a0  802fe5a0  00004364  2**0
                  CONTENTS
 61 .inttab_tc0_02E 00000000  802fe5c0  802fe5c0  00004364  2**0
                  CONTENTS
 62 .inttab_tc0_02F 00000000  802fe5e0  802fe5e0  00004364  2**0
                  CONTENTS
 63 .inttab_tc0_030 00000000  802fe600  802fe600  00004364  2**0
                  CONTENTS
 64 .inttab_tc0_031 00000000  802fe620  802fe620  00004364  2**0
                  CONTENTS
 65 .inttab_tc0_032 00000000  802fe640  802fe640  00004364  2**0
                  CONTENTS
 66 .inttab_tc0_033 00000000  802fe660  802fe660  00004364  2**0
                  CONTENTS
 67 .inttab_tc0_034 00000000  802fe680  802fe680  00004364  2**0
                  CONTENTS
 68 .inttab_tc0_035 00000000  802fe6a0  802fe6a0  00004364  2**0
                  CONTENTS
 69 .inttab_tc0_036 00000000  802fe6c0  802fe6c0  00004364  2**0
                  CONTENTS
 70 .inttab_tc0_037 00000000  802fe6e0  802fe6e0  00004364  2**0
                  CONTENTS
 71 .inttab_tc0_038 00000000  802fe700  802fe700  00004364  2**0
                  CONTENTS
 72 .inttab_tc0_039 00000000  802fe720  802fe720  00004364  2**0
                  CONTENTS
 73 .inttab_tc0_03A 00000000  802fe740  802fe740  00004364  2**0
                  CONTENTS
 74 .inttab_tc0_03B 00000000  802fe760  802fe760  00004364  2**0
                  CONTENTS
 75 .inttab_tc0_03C 00000000  802fe780  802fe780  00004364  2**0
                  CONTENTS
 76 .inttab_tc0_03D 00000000  802fe7a0  802fe7a0  00004364  2**0
                  CONTENTS
 77 .inttab_tc0_03E 00000000  802fe7c0  802fe7c0  00004364  2**0
                  CONTENTS
 78 .inttab_tc0_03F 00000000  802fe7e0  802fe7e0  00004364  2**0
                  CONTENTS
 79 .inttab_tc0_040 00000000  802fe800  802fe800  00004364  2**0
                  CONTENTS
 80 .inttab_tc0_041 00000000  802fe820  802fe820  00004364  2**0
                  CONTENTS
 81 .inttab_tc0_042 00000000  802fe840  802fe840  00004364  2**0
                  CONTENTS
 82 .inttab_tc0_043 00000000  802fe860  802fe860  00004364  2**0
                  CONTENTS
 83 .inttab_tc0_044 00000000  802fe880  802fe880  00004364  2**0
                  CONTENTS
 84 .inttab_tc0_045 00000000  802fe8a0  802fe8a0  00004364  2**0
                  CONTENTS
 85 .inttab_tc0_046 00000000  802fe8c0  802fe8c0  00004364  2**0
                  CONTENTS
 86 .inttab_tc0_047 00000000  802fe8e0  802fe8e0  00004364  2**0
                  CONTENTS
 87 .inttab_tc0_048 00000000  802fe900  802fe900  00004364  2**0
                  CONTENTS
 88 .inttab_tc0_049 00000000  802fe920  802fe920  00004364  2**0
                  CONTENTS
 89 .inttab_tc0_04A 00000000  802fe940  802fe940  00004364  2**0
                  CONTENTS
 90 .inttab_tc0_04B 00000000  802fe960  802fe960  00004364  2**0
                  CONTENTS
 91 .inttab_tc0_04C 00000000  802fe980  802fe980  00004364  2**0
                  CONTENTS
 92 .inttab_tc0_04D 00000000  802fe9a0  802fe9a0  00004364  2**0
                  CONTENTS
 93 .inttab_tc0_04E 00000000  802fe9c0  802fe9c0  00004364  2**0
                  CONTENTS
 94 .inttab_tc0_04F 00000000  802fe9e0  802fe9e0  00004364  2**0
                  CONTENTS
 95 .inttab_tc0_050 00000000  802fea00  802fea00  00004364  2**0
                  CONTENTS
 96 .inttab_tc0_051 00000000  802fea20  802fea20  00004364  2**0
                  CONTENTS
 97 .inttab_tc0_052 00000000  802fea40  802fea40  00004364  2**0
                  CONTENTS
 98 .inttab_tc0_053 00000000  802fea60  802fea60  00004364  2**0
                  CONTENTS
 99 .inttab_tc0_054 00000000  802fea80  802fea80  00004364  2**0
                  CONTENTS
100 .inttab_tc0_055 00000000  802feaa0  802feaa0  00004364  2**0
                  CONTENTS
101 .inttab_tc0_056 00000000  802feac0  802feac0  00004364  2**0
                  CONTENTS
102 .inttab_tc0_057 00000000  802feae0  802feae0  00004364  2**0
                  CONTENTS
103 .inttab_tc0_058 00000000  802feb00  802feb00  00004364  2**0
                  CONTENTS
104 .inttab_tc0_059 00000000  802feb20  802feb20  00004364  2**0
                  CONTENTS
105 .inttab_tc0_05A 00000000  802feb40  802feb40  00004364  2**0
                  CONTENTS
106 .inttab_tc0_05B 00000000  802feb60  802feb60  00004364  2**0
                  CONTENTS
107 .inttab_tc0_05C 00000000  802feb80  802feb80  00004364  2**0
                  CONTENTS
108 .inttab_tc0_05D 00000000  802feba0  802feba0  00004364  2**0
                  CONTENTS
109 .inttab_tc0_05E 00000000  802febc0  802febc0  00004364  2**0
                  CONTENTS
110 .inttab_tc0_05F 00000000  802febe0  802febe0  00004364  2**0
                  CONTENTS
111 .inttab_tc0_060 00000000  802fec00  802fec00  00004364  2**0
                  CONTENTS
112 .inttab_tc0_061 00000000  802fec20  802fec20  00004364  2**0
                  CONTENTS
113 .inttab_tc0_062 00000000  802fec40  802fec40  00004364  2**0
                  CONTENTS
114 .inttab_tc0_063 00000000  802fec60  802fec60  00004364  2**0
                  CONTENTS
115 .inttab_tc0_064 00000000  802fec80  802fec80  00004364  2**0
                  CONTENTS
116 .inttab_tc0_065 00000000  802feca0  802feca0  00004364  2**0
                  CONTENTS
117 .inttab_tc0_066 00000000  802fecc0  802fecc0  00004364  2**0
                  CONTENTS
118 .inttab_tc0_067 00000000  802fece0  802fece0  00004364  2**0
                  CONTENTS
119 .inttab_tc0_068 00000000  802fed00  802fed00  00004364  2**0
                  CONTENTS
120 .inttab_tc0_069 00000000  802fed20  802fed20  00004364  2**0
                  CONTENTS
121 .inttab_tc0_06A 00000000  802fed40  802fed40  00004364  2**0
                  CONTENTS
122 .inttab_tc0_06B 00000000  802fed60  802fed60  00004364  2**0
                  CONTENTS
123 .inttab_tc0_06C 00000000  802fed80  802fed80  00004364  2**0
                  CONTENTS
124 .inttab_tc0_06D 00000000  802feda0  802feda0  00004364  2**0
                  CONTENTS
125 .inttab_tc0_06E 00000000  802fedc0  802fedc0  00004364  2**0
                  CONTENTS
126 .inttab_tc0_06F 00000000  802fede0  802fede0  00004364  2**0
                  CONTENTS
127 .inttab_tc0_070 00000000  802fee00  802fee00  00004364  2**0
                  CONTENTS
128 .inttab_tc0_071 00000000  802fee20  802fee20  00004364  2**0
                  CONTENTS
129 .inttab_tc0_072 00000000  802fee40  802fee40  00004364  2**0
                  CONTENTS
130 .inttab_tc0_073 00000000  802fee60  802fee60  00004364  2**0
                  CONTENTS
131 .inttab_tc0_074 00000000  802fee80  802fee80  00004364  2**0
                  CONTENTS
132 .inttab_tc0_075 00000000  802feea0  802feea0  00004364  2**0
                  CONTENTS
133 .inttab_tc0_076 00000000  802feec0  802feec0  00004364  2**0
                  CONTENTS
134 .inttab_tc0_077 00000000  802feee0  802feee0  00004364  2**0
                  CONTENTS
135 .inttab_tc0_078 00000000  802fef00  802fef00  00004364  2**0
                  CONTENTS
136 .inttab_tc0_079 00000000  802fef20  802fef20  00004364  2**0
                  CONTENTS
137 .inttab_tc0_07A 00000000  802fef40  802fef40  00004364  2**0
                  CONTENTS
138 .inttab_tc0_07B 00000000  802fef60  802fef60  00004364  2**0
                  CONTENTS
139 .inttab_tc0_07C 00000000  802fef80  802fef80  00004364  2**0
                  CONTENTS
140 .inttab_tc0_07D 00000000  802fefa0  802fefa0  00004364  2**0
                  CONTENTS
141 .inttab_tc0_07E 00000000  802fefc0  802fefc0  00004364  2**0
                  CONTENTS
142 .inttab_tc0_07F 00000000  802fefe0  802fefe0  00004364  2**0
                  CONTENTS
143 .inttab_tc0_080 00000000  802ff000  802ff000  00004364  2**0
                  CONTENTS
144 .inttab_tc0_081 00000000  802ff020  802ff020  00004364  2**0
                  CONTENTS
145 .inttab_tc0_082 00000000  802ff040  802ff040  00004364  2**0
                  CONTENTS
146 .inttab_tc0_083 00000000  802ff060  802ff060  00004364  2**0
                  CONTENTS
147 .inttab_tc0_084 00000000  802ff080  802ff080  00004364  2**0
                  CONTENTS
148 .inttab_tc0_085 00000000  802ff0a0  802ff0a0  00004364  2**0
                  CONTENTS
149 .inttab_tc0_086 00000000  802ff0c0  802ff0c0  00004364  2**0
                  CONTENTS
150 .inttab_tc0_087 00000000  802ff0e0  802ff0e0  00004364  2**0
                  CONTENTS
151 .inttab_tc0_088 00000000  802ff100  802ff100  00004364  2**0
                  CONTENTS
152 .inttab_tc0_089 00000000  802ff120  802ff120  00004364  2**0
                  CONTENTS
153 .inttab_tc0_08A 00000000  802ff140  802ff140  00004364  2**0
                  CONTENTS
154 .inttab_tc0_08B 00000000  802ff160  802ff160  00004364  2**0
                  CONTENTS
155 .inttab_tc0_08C 00000000  802ff180  802ff180  00004364  2**0
                  CONTENTS
156 .inttab_tc0_08D 00000000  802ff1a0  802ff1a0  00004364  2**0
                  CONTENTS
157 .inttab_tc0_08E 00000000  802ff1c0  802ff1c0  00004364  2**0
                  CONTENTS
158 .inttab_tc0_08F 00000000  802ff1e0  802ff1e0  00004364  2**0
                  CONTENTS
159 .inttab_tc0_090 00000000  802ff200  802ff200  00004364  2**0
                  CONTENTS
160 .inttab_tc0_091 00000000  802ff220  802ff220  00004364  2**0
                  CONTENTS
161 .inttab_tc0_092 00000000  802ff240  802ff240  00004364  2**0
                  CONTENTS
162 .inttab_tc0_093 00000000  802ff260  802ff260  00004364  2**0
                  CONTENTS
163 .inttab_tc0_094 00000000  802ff280  802ff280  00004364  2**0
                  CONTENTS
164 .inttab_tc0_095 00000000  802ff2a0  802ff2a0  00004364  2**0
                  CONTENTS
165 .inttab_tc0_096 00000000  802ff2c0  802ff2c0  00004364  2**0
                  CONTENTS
166 .inttab_tc0_097 00000000  802ff2e0  802ff2e0  00004364  2**0
                  CONTENTS
167 .inttab_tc0_098 00000000  802ff300  802ff300  00004364  2**0
                  CONTENTS
168 .inttab_tc0_099 00000000  802ff320  802ff320  00004364  2**0
                  CONTENTS
169 .inttab_tc0_09A 00000000  802ff340  802ff340  00004364  2**0
                  CONTENTS
170 .inttab_tc0_09B 00000000  802ff360  802ff360  00004364  2**0
                  CONTENTS
171 .inttab_tc0_09C 00000000  802ff380  802ff380  00004364  2**0
                  CONTENTS
172 .inttab_tc0_09D 00000000  802ff3a0  802ff3a0  00004364  2**0
                  CONTENTS
173 .inttab_tc0_09E 00000000  802ff3c0  802ff3c0  00004364  2**0
                  CONTENTS
174 .inttab_tc0_09F 00000000  802ff3e0  802ff3e0  00004364  2**0
                  CONTENTS
175 .inttab_tc0_0A0 00000000  802ff400  802ff400  00004364  2**0
                  CONTENTS
176 .inttab_tc0_0A1 00000000  802ff420  802ff420  00004364  2**0
                  CONTENTS
177 .inttab_tc0_0A2 00000000  802ff440  802ff440  00004364  2**0
                  CONTENTS
178 .inttab_tc0_0A3 00000000  802ff460  802ff460  00004364  2**0
                  CONTENTS
179 .inttab_tc0_0A4 00000000  802ff480  802ff480  00004364  2**0
                  CONTENTS
180 .inttab_tc0_0A5 00000000  802ff4a0  802ff4a0  00004364  2**0
                  CONTENTS
181 .inttab_tc0_0A6 00000000  802ff4c0  802ff4c0  00004364  2**0
                  CONTENTS
182 .inttab_tc0_0A7 00000000  802ff4e0  802ff4e0  00004364  2**0
                  CONTENTS
183 .inttab_tc0_0A8 00000000  802ff500  802ff500  00004364  2**0
                  CONTENTS
184 .inttab_tc0_0A9 00000000  802ff520  802ff520  00004364  2**0
                  CONTENTS
185 .inttab_tc0_0AA 00000000  802ff540  802ff540  00004364  2**0
                  CONTENTS
186 .inttab_tc0_0AB 00000000  802ff560  802ff560  00004364  2**0
                  CONTENTS
187 .inttab_tc0_0AC 00000000  802ff580  802ff580  00004364  2**0
                  CONTENTS
188 .inttab_tc0_0AD 00000000  802ff5a0  802ff5a0  00004364  2**0
                  CONTENTS
189 .inttab_tc0_0AE 00000000  802ff5c0  802ff5c0  00004364  2**0
                  CONTENTS
190 .inttab_tc0_0AF 00000000  802ff5e0  802ff5e0  00004364  2**0
                  CONTENTS
191 .inttab_tc0_0B0 00000000  802ff600  802ff600  00004364  2**0
                  CONTENTS
192 .inttab_tc0_0B1 00000000  802ff620  802ff620  00004364  2**0
                  CONTENTS
193 .inttab_tc0_0B2 00000000  802ff640  802ff640  00004364  2**0
                  CONTENTS
194 .inttab_tc0_0B3 00000000  802ff660  802ff660  00004364  2**0
                  CONTENTS
195 .inttab_tc0_0B4 00000000  802ff680  802ff680  00004364  2**0
                  CONTENTS
196 .inttab_tc0_0B5 00000000  802ff6a0  802ff6a0  00004364  2**0
                  CONTENTS
197 .inttab_tc0_0B6 00000000  802ff6c0  802ff6c0  00004364  2**0
                  CONTENTS
198 .inttab_tc0_0B7 00000000  802ff6e0  802ff6e0  00004364  2**0
                  CONTENTS
199 .inttab_tc0_0B8 00000000  802ff700  802ff700  00004364  2**0
                  CONTENTS
200 .inttab_tc0_0B9 00000000  802ff720  802ff720  00004364  2**0
                  CONTENTS
201 .inttab_tc0_0BA 00000000  802ff740  802ff740  00004364  2**0
                  CONTENTS
202 .inttab_tc0_0BB 00000000  802ff760  802ff760  00004364  2**0
                  CONTENTS
203 .inttab_tc0_0BC 00000000  802ff780  802ff780  00004364  2**0
                  CONTENTS
204 .inttab_tc0_0BD 00000000  802ff7a0  802ff7a0  00004364  2**0
                  CONTENTS
205 .inttab_tc0_0BE 00000000  802ff7c0  802ff7c0  00004364  2**0
                  CONTENTS
206 .inttab_tc0_0BF 00000000  802ff7e0  802ff7e0  00004364  2**0
                  CONTENTS
207 .inttab_tc0_0C0 00000000  802ff800  802ff800  00004364  2**0
                  CONTENTS
208 .inttab_tc0_0C1 00000000  802ff820  802ff820  00004364  2**0
                  CONTENTS
209 .inttab_tc0_0C2 00000000  802ff840  802ff840  00004364  2**0
                  CONTENTS
210 .inttab_tc0_0C3 00000000  802ff860  802ff860  00004364  2**0
                  CONTENTS
211 .inttab_tc0_0C4 00000000  802ff880  802ff880  00004364  2**0
                  CONTENTS
212 .inttab_tc0_0C5 00000000  802ff8a0  802ff8a0  00004364  2**0
                  CONTENTS
213 .inttab_tc0_0C6 00000000  802ff8c0  802ff8c0  00004364  2**0
                  CONTENTS
214 .inttab_tc0_0C7 00000000  802ff8e0  802ff8e0  00004364  2**0
                  CONTENTS
215 .inttab_tc0_0C8 00000000  802ff900  802ff900  00004364  2**0
                  CONTENTS
216 .inttab_tc0_0C9 00000000  802ff920  802ff920  00004364  2**0
                  CONTENTS
217 .inttab_tc0_0CA 00000000  802ff940  802ff940  00004364  2**0
                  CONTENTS
218 .inttab_tc0_0CB 00000000  802ff960  802ff960  00004364  2**0
                  CONTENTS
219 .inttab_tc0_0CC 00000000  802ff980  802ff980  00004364  2**0
                  CONTENTS
220 .inttab_tc0_0CD 00000000  802ff9a0  802ff9a0  00004364  2**0
                  CONTENTS
221 .inttab_tc0_0CE 00000000  802ff9c0  802ff9c0  00004364  2**0
                  CONTENTS
222 .inttab_tc0_0CF 00000000  802ff9e0  802ff9e0  00004364  2**0
                  CONTENTS
223 .inttab_tc0_0D0 00000000  802ffa00  802ffa00  00004364  2**0
                  CONTENTS
224 .inttab_tc0_0D1 00000000  802ffa20  802ffa20  00004364  2**0
                  CONTENTS
225 .inttab_tc0_0D2 00000000  802ffa40  802ffa40  00004364  2**0
                  CONTENTS
226 .inttab_tc0_0D3 00000000  802ffa60  802ffa60  00004364  2**0
                  CONTENTS
227 .inttab_tc0_0D4 00000000  802ffa80  802ffa80  00004364  2**0
                  CONTENTS
228 .inttab_tc0_0D5 00000000  802ffaa0  802ffaa0  00004364  2**0
                  CONTENTS
229 .inttab_tc0_0D6 00000000  802ffac0  802ffac0  00004364  2**0
                  CONTENTS
230 .inttab_tc0_0D7 00000000  802ffae0  802ffae0  00004364  2**0
                  CONTENTS
231 .inttab_tc0_0D8 00000000  802ffb00  802ffb00  00004364  2**0
                  CONTENTS
232 .inttab_tc0_0D9 00000000  802ffb20  802ffb20  00004364  2**0
                  CONTENTS
233 .inttab_tc0_0DA 00000000  802ffb40  802ffb40  00004364  2**0
                  CONTENTS
234 .inttab_tc0_0DB 00000000  802ffb60  802ffb60  00004364  2**0
                  CONTENTS
235 .inttab_tc0_0DC 00000000  802ffb80  802ffb80  00004364  2**0
                  CONTENTS
236 .inttab_tc0_0DD 00000000  802ffba0  802ffba0  00004364  2**0
                  CONTENTS
237 .inttab_tc0_0DE 00000000  802ffbc0  802ffbc0  00004364  2**0
                  CONTENTS
238 .inttab_tc0_0DF 00000000  802ffbe0  802ffbe0  00004364  2**0
                  CONTENTS
239 .inttab_tc0_0E0 00000000  802ffc00  802ffc00  00004364  2**0
                  CONTENTS
240 .inttab_tc0_0E1 00000000  802ffc20  802ffc20  00004364  2**0
                  CONTENTS
241 .inttab_tc0_0E2 00000000  802ffc40  802ffc40  00004364  2**0
                  CONTENTS
242 .inttab_tc0_0E3 00000000  802ffc60  802ffc60  00004364  2**0
                  CONTENTS
243 .inttab_tc0_0E4 00000000  802ffc80  802ffc80  00004364  2**0
                  CONTENTS
244 .inttab_tc0_0E5 00000000  802ffca0  802ffca0  00004364  2**0
                  CONTENTS
245 .inttab_tc0_0E6 00000000  802ffcc0  802ffcc0  00004364  2**0
                  CONTENTS
246 .inttab_tc0_0E7 00000000  802ffce0  802ffce0  00004364  2**0
                  CONTENTS
247 .inttab_tc0_0E8 00000000  802ffd00  802ffd00  00004364  2**0
                  CONTENTS
248 .inttab_tc0_0E9 00000000  802ffd20  802ffd20  00004364  2**0
                  CONTENTS
249 .inttab_tc0_0EA 00000000  802ffd40  802ffd40  00004364  2**0
                  CONTENTS
250 .inttab_tc0_0EB 00000000  802ffd60  802ffd60  00004364  2**0
                  CONTENTS
251 .inttab_tc0_0EC 00000000  802ffd80  802ffd80  00004364  2**0
                  CONTENTS
252 .inttab_tc0_0ED 00000000  802ffda0  802ffda0  00004364  2**0
                  CONTENTS
253 .inttab_tc0_0EE 00000000  802ffdc0  802ffdc0  00004364  2**0
                  CONTENTS
254 .inttab_tc0_0EF 00000000  802ffde0  802ffde0  00004364  2**0
                  CONTENTS
255 .inttab_tc0_0F0 00000000  802ffe00  802ffe00  00004364  2**0
                  CONTENTS
256 .inttab_tc0_0F1 00000000  802ffe20  802ffe20  00004364  2**0
                  CONTENTS
257 .inttab_tc0_0F2 00000000  802ffe40  802ffe40  00004364  2**0
                  CONTENTS
258 .inttab_tc0_0F3 00000000  802ffe60  802ffe60  00004364  2**0
                  CONTENTS
259 .inttab_tc0_0F4 00000000  802ffe80  802ffe80  00004364  2**0
                  CONTENTS
260 .inttab_tc0_0F5 00000000  802ffea0  802ffea0  00004364  2**0
                  CONTENTS
261 .inttab_tc0_0F6 00000000  802ffec0  802ffec0  00004364  2**0
                  CONTENTS
262 .inttab_tc0_0F7 00000000  802ffee0  802ffee0  00004364  2**0
                  CONTENTS
263 .inttab_tc0_0F8 00000000  802fff00  802fff00  00004364  2**0
                  CONTENTS
264 .inttab_tc0_0F9 00000000  802fff20  802fff20  00004364  2**0
                  CONTENTS
265 .inttab_tc0_0FA 00000000  802fff40  802fff40  00004364  2**0
                  CONTENTS
266 .inttab_tc0_0FB 00000000  802fff60  802fff60  00004364  2**0
                  CONTENTS
267 .inttab_tc0_0FC 00000000  802fff80  802fff80  00004364  2**0
                  CONTENTS
268 .inttab_tc0_0FD 00000000  802fffa0  802fffa0  00004364  2**0
                  CONTENTS
269 .inttab_tc0_0FE 00000000  802fffc0  802fffc0  00004364  2**0
                  CONTENTS
270 .inttab_tc0_0FF 00000000  802fffe0  802fffe0  00004364  2**0
                  CONTENTS
271 .inttab_tc1_000 00000000  805fc000  805fc000  00004364  2**0
                  CONTENTS
272 .inttab_tc1_001 00000000  805fc020  805fc020  00004364  2**0
                  CONTENTS
273 .inttab_tc1_002 00000000  805fc040  805fc040  00004364  2**0
                  CONTENTS
274 .inttab_tc1_003 00000000  805fc060  805fc060  00004364  2**0
                  CONTENTS
275 .inttab_tc1_004 00000000  805fc080  805fc080  00004364  2**0
                  CONTENTS
276 .inttab_tc1_005 00000000  805fc0a0  805fc0a0  00004364  2**0
                  CONTENTS
277 .inttab_tc1_006 00000000  805fc0c0  805fc0c0  00004364  2**0
                  CONTENTS
278 .inttab_tc1_007 00000000  805fc0e0  805fc0e0  00004364  2**0
                  CONTENTS
279 .inttab_tc1_008 00000000  805fc100  805fc100  00004364  2**0
                  CONTENTS
280 .inttab_tc1_009 00000000  805fc120  805fc120  00004364  2**0
                  CONTENTS
281 .inttab_tc1_00A 00000000  805fc140  805fc140  00004364  2**0
                  CONTENTS
282 .inttab_tc1_00B 00000000  805fc160  805fc160  00004364  2**0
                  CONTENTS
283 .inttab_tc1_00C 00000000  805fc180  805fc180  00004364  2**0
                  CONTENTS
284 .inttab_tc1_00D 00000000  805fc1a0  805fc1a0  00004364  2**0
                  CONTENTS
285 .inttab_tc1_00E 00000000  805fc1c0  805fc1c0  00004364  2**0
                  CONTENTS
286 .inttab_tc1_00F 00000000  805fc1e0  805fc1e0  00004364  2**0
                  CONTENTS
287 .inttab_tc1_010 00000000  805fc200  805fc200  00004364  2**0
                  CONTENTS
288 .inttab_tc1_011 00000000  805fc220  805fc220  00004364  2**0
                  CONTENTS
289 .inttab_tc1_012 00000000  805fc240  805fc240  00004364  2**0
                  CONTENTS
290 .inttab_tc1_013 00000000  805fc260  805fc260  00004364  2**0
                  CONTENTS
291 .inttab_tc1_014 00000000  805fc280  805fc280  00004364  2**0
                  CONTENTS
292 .inttab_tc1_015 00000000  805fc2a0  805fc2a0  00004364  2**0
                  CONTENTS
293 .inttab_tc1_016 00000000  805fc2c0  805fc2c0  00004364  2**0
                  CONTENTS
294 .inttab_tc1_017 00000000  805fc2e0  805fc2e0  00004364  2**0
                  CONTENTS
295 .inttab_tc1_018 00000000  805fc300  805fc300  00004364  2**0
                  CONTENTS
296 .inttab_tc1_019 00000000  805fc320  805fc320  00004364  2**0
                  CONTENTS
297 .inttab_tc1_01A 00000000  805fc340  805fc340  00004364  2**0
                  CONTENTS
298 .inttab_tc1_01B 00000000  805fc360  805fc360  00004364  2**0
                  CONTENTS
299 .inttab_tc1_01C 00000000  805fc380  805fc380  00004364  2**0
                  CONTENTS
300 .inttab_tc1_01D 00000000  805fc3a0  805fc3a0  00004364  2**0
                  CONTENTS
301 .inttab_tc1_01E 00000000  805fc3c0  805fc3c0  00004364  2**0
                  CONTENTS
302 .inttab_tc1_01F 00000000  805fc3e0  805fc3e0  00004364  2**0
                  CONTENTS
303 .inttab_tc1_020 00000000  805fc400  805fc400  00004364  2**0
                  CONTENTS
304 .inttab_tc1_021 00000000  805fc420  805fc420  00004364  2**0
                  CONTENTS
305 .inttab_tc1_022 00000000  805fc440  805fc440  00004364  2**0
                  CONTENTS
306 .inttab_tc1_023 00000000  805fc460  805fc460  00004364  2**0
                  CONTENTS
307 .inttab_tc1_024 00000000  805fc480  805fc480  00004364  2**0
                  CONTENTS
308 .inttab_tc1_025 00000000  805fc4a0  805fc4a0  00004364  2**0
                  CONTENTS
309 .inttab_tc1_026 00000000  805fc4c0  805fc4c0  00004364  2**0
                  CONTENTS
310 .inttab_tc1_027 00000000  805fc4e0  805fc4e0  00004364  2**0
                  CONTENTS
311 .inttab_tc1_028 00000000  805fc500  805fc500  00004364  2**0
                  CONTENTS
312 .inttab_tc1_029 00000000  805fc520  805fc520  00004364  2**0
                  CONTENTS
313 .inttab_tc1_02A 00000000  805fc540  805fc540  00004364  2**0
                  CONTENTS
314 .inttab_tc1_02B 00000000  805fc560  805fc560  00004364  2**0
                  CONTENTS
315 .inttab_tc1_02C 00000000  805fc580  805fc580  00004364  2**0
                  CONTENTS
316 .inttab_tc1_02D 00000000  805fc5a0  805fc5a0  00004364  2**0
                  CONTENTS
317 .inttab_tc1_02E 00000000  805fc5c0  805fc5c0  00004364  2**0
                  CONTENTS
318 .inttab_tc1_02F 00000000  805fc5e0  805fc5e0  00004364  2**0
                  CONTENTS
319 .inttab_tc1_030 00000000  805fc600  805fc600  00004364  2**0
                  CONTENTS
320 .inttab_tc1_031 00000000  805fc620  805fc620  00004364  2**0
                  CONTENTS
321 .inttab_tc1_032 00000000  805fc640  805fc640  00004364  2**0
                  CONTENTS
322 .inttab_tc1_033 00000000  805fc660  805fc660  00004364  2**0
                  CONTENTS
323 .inttab_tc1_034 00000000  805fc680  805fc680  00004364  2**0
                  CONTENTS
324 .inttab_tc1_035 00000000  805fc6a0  805fc6a0  00004364  2**0
                  CONTENTS
325 .inttab_tc1_036 00000000  805fc6c0  805fc6c0  00004364  2**0
                  CONTENTS
326 .inttab_tc1_037 00000000  805fc6e0  805fc6e0  00004364  2**0
                  CONTENTS
327 .inttab_tc1_038 00000000  805fc700  805fc700  00004364  2**0
                  CONTENTS
328 .inttab_tc1_039 00000000  805fc720  805fc720  00004364  2**0
                  CONTENTS
329 .inttab_tc1_03A 00000000  805fc740  805fc740  00004364  2**0
                  CONTENTS
330 .inttab_tc1_03B 00000000  805fc760  805fc760  00004364  2**0
                  CONTENTS
331 .inttab_tc1_03C 00000000  805fc780  805fc780  00004364  2**0
                  CONTENTS
332 .inttab_tc1_03D 00000000  805fc7a0  805fc7a0  00004364  2**0
                  CONTENTS
333 .inttab_tc1_03E 00000000  805fc7c0  805fc7c0  00004364  2**0
                  CONTENTS
334 .inttab_tc1_03F 00000000  805fc7e0  805fc7e0  00004364  2**0
                  CONTENTS
335 .inttab_tc1_040 00000000  805fc800  805fc800  00004364  2**0
                  CONTENTS
336 .inttab_tc1_041 00000000  805fc820  805fc820  00004364  2**0
                  CONTENTS
337 .inttab_tc1_042 00000000  805fc840  805fc840  00004364  2**0
                  CONTENTS
338 .inttab_tc1_043 00000000  805fc860  805fc860  00004364  2**0
                  CONTENTS
339 .inttab_tc1_044 00000000  805fc880  805fc880  00004364  2**0
                  CONTENTS
340 .inttab_tc1_045 00000000  805fc8a0  805fc8a0  00004364  2**0
                  CONTENTS
341 .inttab_tc1_046 00000000  805fc8c0  805fc8c0  00004364  2**0
                  CONTENTS
342 .inttab_tc1_047 00000000  805fc8e0  805fc8e0  00004364  2**0
                  CONTENTS
343 .inttab_tc1_048 00000000  805fc900  805fc900  00004364  2**0
                  CONTENTS
344 .inttab_tc1_049 00000000  805fc920  805fc920  00004364  2**0
                  CONTENTS
345 .inttab_tc1_04A 00000000  805fc940  805fc940  00004364  2**0
                  CONTENTS
346 .inttab_tc1_04B 00000000  805fc960  805fc960  00004364  2**0
                  CONTENTS
347 .inttab_tc1_04C 00000000  805fc980  805fc980  00004364  2**0
                  CONTENTS
348 .inttab_tc1_04D 00000000  805fc9a0  805fc9a0  00004364  2**0
                  CONTENTS
349 .inttab_tc1_04E 00000000  805fc9c0  805fc9c0  00004364  2**0
                  CONTENTS
350 .inttab_tc1_04F 00000000  805fc9e0  805fc9e0  00004364  2**0
                  CONTENTS
351 .inttab_tc1_050 00000000  805fca00  805fca00  00004364  2**0
                  CONTENTS
352 .inttab_tc1_051 00000000  805fca20  805fca20  00004364  2**0
                  CONTENTS
353 .inttab_tc1_052 00000000  805fca40  805fca40  00004364  2**0
                  CONTENTS
354 .inttab_tc1_053 00000000  805fca60  805fca60  00004364  2**0
                  CONTENTS
355 .inttab_tc1_054 00000000  805fca80  805fca80  00004364  2**0
                  CONTENTS
356 .inttab_tc1_055 00000000  805fcaa0  805fcaa0  00004364  2**0
                  CONTENTS
357 .inttab_tc1_056 00000000  805fcac0  805fcac0  00004364  2**0
                  CONTENTS
358 .inttab_tc1_057 00000000  805fcae0  805fcae0  00004364  2**0
                  CONTENTS
359 .inttab_tc1_058 00000000  805fcb00  805fcb00  00004364  2**0
                  CONTENTS
360 .inttab_tc1_059 00000000  805fcb20  805fcb20  00004364  2**0
                  CONTENTS
361 .inttab_tc1_05A 00000000  805fcb40  805fcb40  00004364  2**0
                  CONTENTS
362 .inttab_tc1_05B 00000000  805fcb60  805fcb60  00004364  2**0
                  CONTENTS
363 .inttab_tc1_05C 00000000  805fcb80  805fcb80  00004364  2**0
                  CONTENTS
364 .inttab_tc1_05D 00000000  805fcba0  805fcba0  00004364  2**0
                  CONTENTS
365 .inttab_tc1_05E 00000000  805fcbc0  805fcbc0  00004364  2**0
                  CONTENTS
366 .inttab_tc1_05F 00000000  805fcbe0  805fcbe0  00004364  2**0
                  CONTENTS
367 .inttab_tc1_060 00000000  805fcc00  805fcc00  00004364  2**0
                  CONTENTS
368 .inttab_tc1_061 00000000  805fcc20  805fcc20  00004364  2**0
                  CONTENTS
369 .inttab_tc1_062 00000000  805fcc40  805fcc40  00004364  2**0
                  CONTENTS
370 .inttab_tc1_063 00000000  805fcc60  805fcc60  00004364  2**0
                  CONTENTS
371 .inttab_tc1_064 00000000  805fcc80  805fcc80  00004364  2**0
                  CONTENTS
372 .inttab_tc1_065 00000000  805fcca0  805fcca0  00004364  2**0
                  CONTENTS
373 .inttab_tc1_066 00000000  805fccc0  805fccc0  00004364  2**0
                  CONTENTS
374 .inttab_tc1_067 00000000  805fcce0  805fcce0  00004364  2**0
                  CONTENTS
375 .inttab_tc1_068 00000000  805fcd00  805fcd00  00004364  2**0
                  CONTENTS
376 .inttab_tc1_069 00000000  805fcd20  805fcd20  00004364  2**0
                  CONTENTS
377 .inttab_tc1_06A 00000000  805fcd40  805fcd40  00004364  2**0
                  CONTENTS
378 .inttab_tc1_06B 00000000  805fcd60  805fcd60  00004364  2**0
                  CONTENTS
379 .inttab_tc1_06C 00000000  805fcd80  805fcd80  00004364  2**0
                  CONTENTS
380 .inttab_tc1_06D 00000000  805fcda0  805fcda0  00004364  2**0
                  CONTENTS
381 .inttab_tc1_06E 00000000  805fcdc0  805fcdc0  00004364  2**0
                  CONTENTS
382 .inttab_tc1_06F 00000000  805fcde0  805fcde0  00004364  2**0
                  CONTENTS
383 .inttab_tc1_070 00000000  805fce00  805fce00  00004364  2**0
                  CONTENTS
384 .inttab_tc1_071 00000000  805fce20  805fce20  00004364  2**0
                  CONTENTS
385 .inttab_tc1_072 00000000  805fce40  805fce40  00004364  2**0
                  CONTENTS
386 .inttab_tc1_073 00000000  805fce60  805fce60  00004364  2**0
                  CONTENTS
387 .inttab_tc1_074 00000000  805fce80  805fce80  00004364  2**0
                  CONTENTS
388 .inttab_tc1_075 00000000  805fcea0  805fcea0  00004364  2**0
                  CONTENTS
389 .inttab_tc1_076 00000000  805fcec0  805fcec0  00004364  2**0
                  CONTENTS
390 .inttab_tc1_077 00000000  805fcee0  805fcee0  00004364  2**0
                  CONTENTS
391 .inttab_tc1_078 00000000  805fcf00  805fcf00  00004364  2**0
                  CONTENTS
392 .inttab_tc1_079 00000000  805fcf20  805fcf20  00004364  2**0
                  CONTENTS
393 .inttab_tc1_07A 00000000  805fcf40  805fcf40  00004364  2**0
                  CONTENTS
394 .inttab_tc1_07B 00000000  805fcf60  805fcf60  00004364  2**0
                  CONTENTS
395 .inttab_tc1_07C 00000000  805fcf80  805fcf80  00004364  2**0
                  CONTENTS
396 .inttab_tc1_07D 00000000  805fcfa0  805fcfa0  00004364  2**0
                  CONTENTS
397 .inttab_tc1_07E 00000000  805fcfc0  805fcfc0  00004364  2**0
                  CONTENTS
398 .inttab_tc1_07F 00000000  805fcfe0  805fcfe0  00004364  2**0
                  CONTENTS
399 .inttab_tc1_080 00000000  805fd000  805fd000  00004364  2**0
                  CONTENTS
400 .inttab_tc1_081 00000000  805fd020  805fd020  00004364  2**0
                  CONTENTS
401 .inttab_tc1_082 00000000  805fd040  805fd040  00004364  2**0
                  CONTENTS
402 .inttab_tc1_083 00000000  805fd060  805fd060  00004364  2**0
                  CONTENTS
403 .inttab_tc1_084 00000000  805fd080  805fd080  00004364  2**0
                  CONTENTS
404 .inttab_tc1_085 00000000  805fd0a0  805fd0a0  00004364  2**0
                  CONTENTS
405 .inttab_tc1_086 00000000  805fd0c0  805fd0c0  00004364  2**0
                  CONTENTS
406 .inttab_tc1_087 00000000  805fd0e0  805fd0e0  00004364  2**0
                  CONTENTS
407 .inttab_tc1_088 00000000  805fd100  805fd100  00004364  2**0
                  CONTENTS
408 .inttab_tc1_089 00000000  805fd120  805fd120  00004364  2**0
                  CONTENTS
409 .inttab_tc1_08A 00000000  805fd140  805fd140  00004364  2**0
                  CONTENTS
410 .inttab_tc1_08B 00000000  805fd160  805fd160  00004364  2**0
                  CONTENTS
411 .inttab_tc1_08C 00000000  805fd180  805fd180  00004364  2**0
                  CONTENTS
412 .inttab_tc1_08D 00000000  805fd1a0  805fd1a0  00004364  2**0
                  CONTENTS
413 .inttab_tc1_08E 00000000  805fd1c0  805fd1c0  00004364  2**0
                  CONTENTS
414 .inttab_tc1_08F 00000000  805fd1e0  805fd1e0  00004364  2**0
                  CONTENTS
415 .inttab_tc1_090 00000000  805fd200  805fd200  00004364  2**0
                  CONTENTS
416 .inttab_tc1_091 00000000  805fd220  805fd220  00004364  2**0
                  CONTENTS
417 .inttab_tc1_092 00000000  805fd240  805fd240  00004364  2**0
                  CONTENTS
418 .inttab_tc1_093 00000000  805fd260  805fd260  00004364  2**0
                  CONTENTS
419 .inttab_tc1_094 00000000  805fd280  805fd280  00004364  2**0
                  CONTENTS
420 .inttab_tc1_095 00000000  805fd2a0  805fd2a0  00004364  2**0
                  CONTENTS
421 .inttab_tc1_096 00000000  805fd2c0  805fd2c0  00004364  2**0
                  CONTENTS
422 .inttab_tc1_097 00000000  805fd2e0  805fd2e0  00004364  2**0
                  CONTENTS
423 .inttab_tc1_098 00000000  805fd300  805fd300  00004364  2**0
                  CONTENTS
424 .inttab_tc1_099 00000000  805fd320  805fd320  00004364  2**0
                  CONTENTS
425 .inttab_tc1_09A 00000000  805fd340  805fd340  00004364  2**0
                  CONTENTS
426 .inttab_tc1_09B 00000000  805fd360  805fd360  00004364  2**0
                  CONTENTS
427 .inttab_tc1_09C 00000000  805fd380  805fd380  00004364  2**0
                  CONTENTS
428 .inttab_tc1_09D 00000000  805fd3a0  805fd3a0  00004364  2**0
                  CONTENTS
429 .inttab_tc1_09E 00000000  805fd3c0  805fd3c0  00004364  2**0
                  CONTENTS
430 .inttab_tc1_09F 00000000  805fd3e0  805fd3e0  00004364  2**0
                  CONTENTS
431 .inttab_tc1_0A0 00000000  805fd400  805fd400  00004364  2**0
                  CONTENTS
432 .inttab_tc1_0A1 00000000  805fd420  805fd420  00004364  2**0
                  CONTENTS
433 .inttab_tc1_0A2 00000000  805fd440  805fd440  00004364  2**0
                  CONTENTS
434 .inttab_tc1_0A3 00000000  805fd460  805fd460  00004364  2**0
                  CONTENTS
435 .inttab_tc1_0A4 00000000  805fd480  805fd480  00004364  2**0
                  CONTENTS
436 .inttab_tc1_0A5 00000000  805fd4a0  805fd4a0  00004364  2**0
                  CONTENTS
437 .inttab_tc1_0A6 00000000  805fd4c0  805fd4c0  00004364  2**0
                  CONTENTS
438 .inttab_tc1_0A7 00000000  805fd4e0  805fd4e0  00004364  2**0
                  CONTENTS
439 .inttab_tc1_0A8 00000000  805fd500  805fd500  00004364  2**0
                  CONTENTS
440 .inttab_tc1_0A9 00000000  805fd520  805fd520  00004364  2**0
                  CONTENTS
441 .inttab_tc1_0AA 00000000  805fd540  805fd540  00004364  2**0
                  CONTENTS
442 .inttab_tc1_0AB 00000000  805fd560  805fd560  00004364  2**0
                  CONTENTS
443 .inttab_tc1_0AC 00000000  805fd580  805fd580  00004364  2**0
                  CONTENTS
444 .inttab_tc1_0AD 00000000  805fd5a0  805fd5a0  00004364  2**0
                  CONTENTS
445 .inttab_tc1_0AE 00000000  805fd5c0  805fd5c0  00004364  2**0
                  CONTENTS
446 .inttab_tc1_0AF 00000000  805fd5e0  805fd5e0  00004364  2**0
                  CONTENTS
447 .inttab_tc1_0B0 00000000  805fd600  805fd600  00004364  2**0
                  CONTENTS
448 .inttab_tc1_0B1 00000000  805fd620  805fd620  00004364  2**0
                  CONTENTS
449 .inttab_tc1_0B2 00000000  805fd640  805fd640  00004364  2**0
                  CONTENTS
450 .inttab_tc1_0B3 00000000  805fd660  805fd660  00004364  2**0
                  CONTENTS
451 .inttab_tc1_0B4 00000000  805fd680  805fd680  00004364  2**0
                  CONTENTS
452 .inttab_tc1_0B5 00000000  805fd6a0  805fd6a0  00004364  2**0
                  CONTENTS
453 .inttab_tc1_0B6 00000000  805fd6c0  805fd6c0  00004364  2**0
                  CONTENTS
454 .inttab_tc1_0B7 00000000  805fd6e0  805fd6e0  00004364  2**0
                  CONTENTS
455 .inttab_tc1_0B8 00000000  805fd700  805fd700  00004364  2**0
                  CONTENTS
456 .inttab_tc1_0B9 00000000  805fd720  805fd720  00004364  2**0
                  CONTENTS
457 .inttab_tc1_0BA 00000000  805fd740  805fd740  00004364  2**0
                  CONTENTS
458 .inttab_tc1_0BB 00000000  805fd760  805fd760  00004364  2**0
                  CONTENTS
459 .inttab_tc1_0BC 00000000  805fd780  805fd780  00004364  2**0
                  CONTENTS
460 .inttab_tc1_0BD 00000000  805fd7a0  805fd7a0  00004364  2**0
                  CONTENTS
461 .inttab_tc1_0BE 00000000  805fd7c0  805fd7c0  00004364  2**0
                  CONTENTS
462 .inttab_tc1_0BF 00000000  805fd7e0  805fd7e0  00004364  2**0
                  CONTENTS
463 .inttab_tc1_0C0 00000000  805fd800  805fd800  00004364  2**0
                  CONTENTS
464 .inttab_tc1_0C1 00000000  805fd820  805fd820  00004364  2**0
                  CONTENTS
465 .inttab_tc1_0C2 00000000  805fd840  805fd840  00004364  2**0
                  CONTENTS
466 .inttab_tc1_0C3 00000000  805fd860  805fd860  00004364  2**0
                  CONTENTS
467 .inttab_tc1_0C4 00000000  805fd880  805fd880  00004364  2**0
                  CONTENTS
468 .inttab_tc1_0C5 00000000  805fd8a0  805fd8a0  00004364  2**0
                  CONTENTS
469 .inttab_tc1_0C6 00000000  805fd8c0  805fd8c0  00004364  2**0
                  CONTENTS
470 .inttab_tc1_0C7 00000000  805fd8e0  805fd8e0  00004364  2**0
                  CONTENTS
471 .inttab_tc1_0C8 00000000  805fd900  805fd900  00004364  2**0
                  CONTENTS
472 .inttab_tc1_0C9 00000000  805fd920  805fd920  00004364  2**0
                  CONTENTS
473 .inttab_tc1_0CA 00000000  805fd940  805fd940  00004364  2**0
                  CONTENTS
474 .inttab_tc1_0CB 00000000  805fd960  805fd960  00004364  2**0
                  CONTENTS
475 .inttab_tc1_0CC 00000000  805fd980  805fd980  00004364  2**0
                  CONTENTS
476 .inttab_tc1_0CD 00000000  805fd9a0  805fd9a0  00004364  2**0
                  CONTENTS
477 .inttab_tc1_0CE 00000000  805fd9c0  805fd9c0  00004364  2**0
                  CONTENTS
478 .inttab_tc1_0CF 00000000  805fd9e0  805fd9e0  00004364  2**0
                  CONTENTS
479 .inttab_tc1_0D0 00000000  805fda00  805fda00  00004364  2**0
                  CONTENTS
480 .inttab_tc1_0D1 00000000  805fda20  805fda20  00004364  2**0
                  CONTENTS
481 .inttab_tc1_0D2 00000000  805fda40  805fda40  00004364  2**0
                  CONTENTS
482 .inttab_tc1_0D3 00000000  805fda60  805fda60  00004364  2**0
                  CONTENTS
483 .inttab_tc1_0D4 00000000  805fda80  805fda80  00004364  2**0
                  CONTENTS
484 .inttab_tc1_0D5 00000000  805fdaa0  805fdaa0  00004364  2**0
                  CONTENTS
485 .inttab_tc1_0D6 00000000  805fdac0  805fdac0  00004364  2**0
                  CONTENTS
486 .inttab_tc1_0D7 00000000  805fdae0  805fdae0  00004364  2**0
                  CONTENTS
487 .inttab_tc1_0D8 00000000  805fdb00  805fdb00  00004364  2**0
                  CONTENTS
488 .inttab_tc1_0D9 00000000  805fdb20  805fdb20  00004364  2**0
                  CONTENTS
489 .inttab_tc1_0DA 00000000  805fdb40  805fdb40  00004364  2**0
                  CONTENTS
490 .inttab_tc1_0DB 00000000  805fdb60  805fdb60  00004364  2**0
                  CONTENTS
491 .inttab_tc1_0DC 00000000  805fdb80  805fdb80  00004364  2**0
                  CONTENTS
492 .inttab_tc1_0DD 00000000  805fdba0  805fdba0  00004364  2**0
                  CONTENTS
493 .inttab_tc1_0DE 00000000  805fdbc0  805fdbc0  00004364  2**0
                  CONTENTS
494 .inttab_tc1_0DF 00000000  805fdbe0  805fdbe0  00004364  2**0
                  CONTENTS
495 .inttab_tc1_0E0 00000000  805fdc00  805fdc00  00004364  2**0
                  CONTENTS
496 .inttab_tc1_0E1 00000000  805fdc20  805fdc20  00004364  2**0
                  CONTENTS
497 .inttab_tc1_0E2 00000000  805fdc40  805fdc40  00004364  2**0
                  CONTENTS
498 .inttab_tc1_0E3 00000000  805fdc60  805fdc60  00004364  2**0
                  CONTENTS
499 .inttab_tc1_0E4 00000000  805fdc80  805fdc80  00004364  2**0
                  CONTENTS
500 .inttab_tc1_0E5 00000000  805fdca0  805fdca0  00004364  2**0
                  CONTENTS
501 .inttab_tc1_0E6 00000000  805fdcc0  805fdcc0  00004364  2**0
                  CONTENTS
502 .inttab_tc1_0E7 00000000  805fdce0  805fdce0  00004364  2**0
                  CONTENTS
503 .inttab_tc1_0E8 00000000  805fdd00  805fdd00  00004364  2**0
                  CONTENTS
504 .inttab_tc1_0E9 00000000  805fdd20  805fdd20  00004364  2**0
                  CONTENTS
505 .inttab_tc1_0EA 00000000  805fdd40  805fdd40  00004364  2**0
                  CONTENTS
506 .inttab_tc1_0EB 00000000  805fdd60  805fdd60  00004364  2**0
                  CONTENTS
507 .inttab_tc1_0EC 00000000  805fdd80  805fdd80  00004364  2**0
                  CONTENTS
508 .inttab_tc1_0ED 00000000  805fdda0  805fdda0  00004364  2**0
                  CONTENTS
509 .inttab_tc1_0EE 00000000  805fddc0  805fddc0  00004364  2**0
                  CONTENTS
510 .inttab_tc1_0EF 00000000  805fdde0  805fdde0  00004364  2**0
                  CONTENTS
511 .inttab_tc1_0F0 00000000  805fde00  805fde00  00004364  2**0
                  CONTENTS
512 .inttab_tc1_0F1 00000000  805fde20  805fde20  00004364  2**0
                  CONTENTS
513 .inttab_tc1_0F2 00000000  805fde40  805fde40  00004364  2**0
                  CONTENTS
514 .inttab_tc1_0F3 00000000  805fde60  805fde60  00004364  2**0
                  CONTENTS
515 .inttab_tc1_0F4 00000000  805fde80  805fde80  00004364  2**0
                  CONTENTS
516 .inttab_tc1_0F5 00000000  805fdea0  805fdea0  00004364  2**0
                  CONTENTS
517 .inttab_tc1_0F6 00000000  805fdec0  805fdec0  00004364  2**0
                  CONTENTS
518 .inttab_tc1_0F7 00000000  805fdee0  805fdee0  00004364  2**0
                  CONTENTS
519 .inttab_tc1_0F8 00000000  805fdf00  805fdf00  00004364  2**0
                  CONTENTS
520 .inttab_tc1_0F9 00000000  805fdf20  805fdf20  00004364  2**0
                  CONTENTS
521 .inttab_tc1_0FA 00000000  805fdf40  805fdf40  00004364  2**0
                  CONTENTS
522 .inttab_tc1_0FB 00000000  805fdf60  805fdf60  00004364  2**0
                  CONTENTS
523 .inttab_tc1_0FC 00000000  805fdf80  805fdf80  00004364  2**0
                  CONTENTS
524 .inttab_tc1_0FD 00000000  805fdfa0  805fdfa0  00004364  2**0
                  CONTENTS
525 .inttab_tc1_0FE 00000000  805fdfc0  805fdfc0  00004364  2**0
                  CONTENTS
526 .inttab_tc1_0FF 00000000  805fdfe0  805fdfe0  00004364  2**0
                  CONTENTS
527 .inttab_tc2_000 00000000  805fe000  805fe000  00004364  2**0
                  CONTENTS
528 .inttab_tc2_001 00000000  805fe020  805fe020  00004364  2**0
                  CONTENTS
529 .inttab_tc2_002 00000000  805fe040  805fe040  00004364  2**0
                  CONTENTS
530 .inttab_tc2_003 00000000  805fe060  805fe060  00004364  2**0
                  CONTENTS
531 .inttab_tc2_004 00000000  805fe080  805fe080  00004364  2**0
                  CONTENTS
532 .inttab_tc2_005 00000000  805fe0a0  805fe0a0  00004364  2**0
                  CONTENTS
533 .inttab_tc2_006 00000000  805fe0c0  805fe0c0  00004364  2**0
                  CONTENTS
534 .inttab_tc2_007 00000000  805fe0e0  805fe0e0  00004364  2**0
                  CONTENTS
535 .inttab_tc2_008 00000000  805fe100  805fe100  00004364  2**0
                  CONTENTS
536 .inttab_tc2_009 00000000  805fe120  805fe120  00004364  2**0
                  CONTENTS
537 .inttab_tc2_00A 00000000  805fe140  805fe140  00004364  2**0
                  CONTENTS
538 .inttab_tc2_00B 00000000  805fe160  805fe160  00004364  2**0
                  CONTENTS
539 .inttab_tc2_00C 00000000  805fe180  805fe180  00004364  2**0
                  CONTENTS
540 .inttab_tc2_00D 00000000  805fe1a0  805fe1a0  00004364  2**0
                  CONTENTS
541 .inttab_tc2_00E 00000000  805fe1c0  805fe1c0  00004364  2**0
                  CONTENTS
542 .inttab_tc2_00F 00000000  805fe1e0  805fe1e0  00004364  2**0
                  CONTENTS
543 .inttab_tc2_010 00000000  805fe200  805fe200  00004364  2**0
                  CONTENTS
544 .inttab_tc2_011 00000000  805fe220  805fe220  00004364  2**0
                  CONTENTS
545 .inttab_tc2_012 00000000  805fe240  805fe240  00004364  2**0
                  CONTENTS
546 .inttab_tc2_013 00000000  805fe260  805fe260  00004364  2**0
                  CONTENTS
547 .inttab_tc2_014 00000000  805fe280  805fe280  00004364  2**0
                  CONTENTS
548 .inttab_tc2_015 00000000  805fe2a0  805fe2a0  00004364  2**0
                  CONTENTS
549 .inttab_tc2_016 00000000  805fe2c0  805fe2c0  00004364  2**0
                  CONTENTS
550 .inttab_tc2_017 00000000  805fe2e0  805fe2e0  00004364  2**0
                  CONTENTS
551 .inttab_tc2_018 00000000  805fe300  805fe300  00004364  2**0
                  CONTENTS
552 .inttab_tc2_019 00000000  805fe320  805fe320  00004364  2**0
                  CONTENTS
553 .inttab_tc2_01A 00000000  805fe340  805fe340  00004364  2**0
                  CONTENTS
554 .inttab_tc2_01B 00000000  805fe360  805fe360  00004364  2**0
                  CONTENTS
555 .inttab_tc2_01C 00000000  805fe380  805fe380  00004364  2**0
                  CONTENTS
556 .inttab_tc2_01D 00000000  805fe3a0  805fe3a0  00004364  2**0
                  CONTENTS
557 .inttab_tc2_01E 00000000  805fe3c0  805fe3c0  00004364  2**0
                  CONTENTS
558 .inttab_tc2_01F 00000000  805fe3e0  805fe3e0  00004364  2**0
                  CONTENTS
559 .inttab_tc2_020 00000000  805fe400  805fe400  00004364  2**0
                  CONTENTS
560 .inttab_tc2_021 00000000  805fe420  805fe420  00004364  2**0
                  CONTENTS
561 .inttab_tc2_022 00000000  805fe440  805fe440  00004364  2**0
                  CONTENTS
562 .inttab_tc2_023 00000000  805fe460  805fe460  00004364  2**0
                  CONTENTS
563 .inttab_tc2_024 00000000  805fe480  805fe480  00004364  2**0
                  CONTENTS
564 .inttab_tc2_025 00000000  805fe4a0  805fe4a0  00004364  2**0
                  CONTENTS
565 .inttab_tc2_026 00000000  805fe4c0  805fe4c0  00004364  2**0
                  CONTENTS
566 .inttab_tc2_027 00000000  805fe4e0  805fe4e0  00004364  2**0
                  CONTENTS
567 .inttab_tc2_028 00000000  805fe500  805fe500  00004364  2**0
                  CONTENTS
568 .inttab_tc2_029 00000000  805fe520  805fe520  00004364  2**0
                  CONTENTS
569 .inttab_tc2_02A 00000000  805fe540  805fe540  00004364  2**0
                  CONTENTS
570 .inttab_tc2_02B 00000000  805fe560  805fe560  00004364  2**0
                  CONTENTS
571 .inttab_tc2_02C 00000000  805fe580  805fe580  00004364  2**0
                  CONTENTS
572 .inttab_tc2_02D 00000000  805fe5a0  805fe5a0  00004364  2**0
                  CONTENTS
573 .inttab_tc2_02E 00000000  805fe5c0  805fe5c0  00004364  2**0
                  CONTENTS
574 .inttab_tc2_02F 00000000  805fe5e0  805fe5e0  00004364  2**0
                  CONTENTS
575 .inttab_tc2_030 00000000  805fe600  805fe600  00004364  2**0
                  CONTENTS
576 .inttab_tc2_031 00000000  805fe620  805fe620  00004364  2**0
                  CONTENTS
577 .inttab_tc2_032 00000000  805fe640  805fe640  00004364  2**0
                  CONTENTS
578 .inttab_tc2_033 00000000  805fe660  805fe660  00004364  2**0
                  CONTENTS
579 .inttab_tc2_034 00000000  805fe680  805fe680  00004364  2**0
                  CONTENTS
580 .inttab_tc2_035 00000000  805fe6a0  805fe6a0  00004364  2**0
                  CONTENTS
581 .inttab_tc2_036 00000000  805fe6c0  805fe6c0  00004364  2**0
                  CONTENTS
582 .inttab_tc2_037 00000000  805fe6e0  805fe6e0  00004364  2**0
                  CONTENTS
583 .inttab_tc2_038 00000000  805fe700  805fe700  00004364  2**0
                  CONTENTS
584 .inttab_tc2_039 00000000  805fe720  805fe720  00004364  2**0
                  CONTENTS
585 .inttab_tc2_03A 00000000  805fe740  805fe740  00004364  2**0
                  CONTENTS
586 .inttab_tc2_03B 00000000  805fe760  805fe760  00004364  2**0
                  CONTENTS
587 .inttab_tc2_03C 00000000  805fe780  805fe780  00004364  2**0
                  CONTENTS
588 .inttab_tc2_03D 00000000  805fe7a0  805fe7a0  00004364  2**0
                  CONTENTS
589 .inttab_tc2_03E 00000000  805fe7c0  805fe7c0  00004364  2**0
                  CONTENTS
590 .inttab_tc2_03F 00000000  805fe7e0  805fe7e0  00004364  2**0
                  CONTENTS
591 .inttab_tc2_040 00000000  805fe800  805fe800  00004364  2**0
                  CONTENTS
592 .inttab_tc2_041 00000000  805fe820  805fe820  00004364  2**0
                  CONTENTS
593 .inttab_tc2_042 00000000  805fe840  805fe840  00004364  2**0
                  CONTENTS
594 .inttab_tc2_043 00000000  805fe860  805fe860  00004364  2**0
                  CONTENTS
595 .inttab_tc2_044 00000000  805fe880  805fe880  00004364  2**0
                  CONTENTS
596 .inttab_tc2_045 00000000  805fe8a0  805fe8a0  00004364  2**0
                  CONTENTS
597 .inttab_tc2_046 00000000  805fe8c0  805fe8c0  00004364  2**0
                  CONTENTS
598 .inttab_tc2_047 00000000  805fe8e0  805fe8e0  00004364  2**0
                  CONTENTS
599 .inttab_tc2_048 00000000  805fe900  805fe900  00004364  2**0
                  CONTENTS
600 .inttab_tc2_049 00000000  805fe920  805fe920  00004364  2**0
                  CONTENTS
601 .inttab_tc2_04A 00000000  805fe940  805fe940  00004364  2**0
                  CONTENTS
602 .inttab_tc2_04B 00000000  805fe960  805fe960  00004364  2**0
                  CONTENTS
603 .inttab_tc2_04C 00000000  805fe980  805fe980  00004364  2**0
                  CONTENTS
604 .inttab_tc2_04D 00000000  805fe9a0  805fe9a0  00004364  2**0
                  CONTENTS
605 .inttab_tc2_04E 00000000  805fe9c0  805fe9c0  00004364  2**0
                  CONTENTS
606 .inttab_tc2_04F 00000000  805fe9e0  805fe9e0  00004364  2**0
                  CONTENTS
607 .inttab_tc2_050 00000000  805fea00  805fea00  00004364  2**0
                  CONTENTS
608 .inttab_tc2_051 00000000  805fea20  805fea20  00004364  2**0
                  CONTENTS
609 .inttab_tc2_052 00000000  805fea40  805fea40  00004364  2**0
                  CONTENTS
610 .inttab_tc2_053 00000000  805fea60  805fea60  00004364  2**0
                  CONTENTS
611 .inttab_tc2_054 00000000  805fea80  805fea80  00004364  2**0
                  CONTENTS
612 .inttab_tc2_055 00000000  805feaa0  805feaa0  00004364  2**0
                  CONTENTS
613 .inttab_tc2_056 00000000  805feac0  805feac0  00004364  2**0
                  CONTENTS
614 .inttab_tc2_057 00000000  805feae0  805feae0  00004364  2**0
                  CONTENTS
615 .inttab_tc2_058 00000000  805feb00  805feb00  00004364  2**0
                  CONTENTS
616 .inttab_tc2_059 00000000  805feb20  805feb20  00004364  2**0
                  CONTENTS
617 .inttab_tc2_05A 00000000  805feb40  805feb40  00004364  2**0
                  CONTENTS
618 .inttab_tc2_05B 00000000  805feb60  805feb60  00004364  2**0
                  CONTENTS
619 .inttab_tc2_05C 00000000  805feb80  805feb80  00004364  2**0
                  CONTENTS
620 .inttab_tc2_05D 00000000  805feba0  805feba0  00004364  2**0
                  CONTENTS
621 .inttab_tc2_05E 00000000  805febc0  805febc0  00004364  2**0
                  CONTENTS
622 .inttab_tc2_05F 00000000  805febe0  805febe0  00004364  2**0
                  CONTENTS
623 .inttab_tc2_060 00000000  805fec00  805fec00  00004364  2**0
                  CONTENTS
624 .inttab_tc2_061 00000000  805fec20  805fec20  00004364  2**0
                  CONTENTS
625 .inttab_tc2_062 00000000  805fec40  805fec40  00004364  2**0
                  CONTENTS
626 .inttab_tc2_063 00000000  805fec60  805fec60  00004364  2**0
                  CONTENTS
627 .inttab_tc2_064 00000000  805fec80  805fec80  00004364  2**0
                  CONTENTS
628 .inttab_tc2_065 00000000  805feca0  805feca0  00004364  2**0
                  CONTENTS
629 .inttab_tc2_066 00000000  805fecc0  805fecc0  00004364  2**0
                  CONTENTS
630 .inttab_tc2_067 00000000  805fece0  805fece0  00004364  2**0
                  CONTENTS
631 .inttab_tc2_068 00000000  805fed00  805fed00  00004364  2**0
                  CONTENTS
632 .inttab_tc2_069 00000000  805fed20  805fed20  00004364  2**0
                  CONTENTS
633 .inttab_tc2_06A 00000000  805fed40  805fed40  00004364  2**0
                  CONTENTS
634 .inttab_tc2_06B 00000000  805fed60  805fed60  00004364  2**0
                  CONTENTS
635 .inttab_tc2_06C 00000000  805fed80  805fed80  00004364  2**0
                  CONTENTS
636 .inttab_tc2_06D 00000000  805feda0  805feda0  00004364  2**0
                  CONTENTS
637 .inttab_tc2_06E 00000000  805fedc0  805fedc0  00004364  2**0
                  CONTENTS
638 .inttab_tc2_06F 00000000  805fede0  805fede0  00004364  2**0
                  CONTENTS
639 .inttab_tc2_070 00000000  805fee00  805fee00  00004364  2**0
                  CONTENTS
640 .inttab_tc2_071 00000000  805fee20  805fee20  00004364  2**0
                  CONTENTS
641 .inttab_tc2_072 00000000  805fee40  805fee40  00004364  2**0
                  CONTENTS
642 .inttab_tc2_073 00000000  805fee60  805fee60  00004364  2**0
                  CONTENTS
643 .inttab_tc2_074 00000000  805fee80  805fee80  00004364  2**0
                  CONTENTS
644 .inttab_tc2_075 00000000  805feea0  805feea0  00004364  2**0
                  CONTENTS
645 .inttab_tc2_076 00000000  805feec0  805feec0  00004364  2**0
                  CONTENTS
646 .inttab_tc2_077 00000000  805feee0  805feee0  00004364  2**0
                  CONTENTS
647 .inttab_tc2_078 00000000  805fef00  805fef00  00004364  2**0
                  CONTENTS
648 .inttab_tc2_079 00000000  805fef20  805fef20  00004364  2**0
                  CONTENTS
649 .inttab_tc2_07A 00000000  805fef40  805fef40  00004364  2**0
                  CONTENTS
650 .inttab_tc2_07B 00000000  805fef60  805fef60  00004364  2**0
                  CONTENTS
651 .inttab_tc2_07C 00000000  805fef80  805fef80  00004364  2**0
                  CONTENTS
652 .inttab_tc2_07D 00000000  805fefa0  805fefa0  00004364  2**0
                  CONTENTS
653 .inttab_tc2_07E 00000000  805fefc0  805fefc0  00004364  2**0
                  CONTENTS
654 .inttab_tc2_07F 00000000  805fefe0  805fefe0  00004364  2**0
                  CONTENTS
655 .inttab_tc2_080 00000000  805ff000  805ff000  00004364  2**0
                  CONTENTS
656 .inttab_tc2_081 00000000  805ff020  805ff020  00004364  2**0
                  CONTENTS
657 .inttab_tc2_082 00000000  805ff040  805ff040  00004364  2**0
                  CONTENTS
658 .inttab_tc2_083 00000000  805ff060  805ff060  00004364  2**0
                  CONTENTS
659 .inttab_tc2_084 00000000  805ff080  805ff080  00004364  2**0
                  CONTENTS
660 .inttab_tc2_085 00000000  805ff0a0  805ff0a0  00004364  2**0
                  CONTENTS
661 .inttab_tc2_086 00000000  805ff0c0  805ff0c0  00004364  2**0
                  CONTENTS
662 .inttab_tc2_087 00000000  805ff0e0  805ff0e0  00004364  2**0
                  CONTENTS
663 .inttab_tc2_088 00000000  805ff100  805ff100  00004364  2**0
                  CONTENTS
664 .inttab_tc2_089 00000000  805ff120  805ff120  00004364  2**0
                  CONTENTS
665 .inttab_tc2_08A 00000000  805ff140  805ff140  00004364  2**0
                  CONTENTS
666 .inttab_tc2_08B 00000000  805ff160  805ff160  00004364  2**0
                  CONTENTS
667 .inttab_tc2_08C 00000000  805ff180  805ff180  00004364  2**0
                  CONTENTS
668 .inttab_tc2_08D 00000000  805ff1a0  805ff1a0  00004364  2**0
                  CONTENTS
669 .inttab_tc2_08E 00000000  805ff1c0  805ff1c0  00004364  2**0
                  CONTENTS
670 .inttab_tc2_08F 00000000  805ff1e0  805ff1e0  00004364  2**0
                  CONTENTS
671 .inttab_tc2_090 00000000  805ff200  805ff200  00004364  2**0
                  CONTENTS
672 .inttab_tc2_091 00000000  805ff220  805ff220  00004364  2**0
                  CONTENTS
673 .inttab_tc2_092 00000000  805ff240  805ff240  00004364  2**0
                  CONTENTS
674 .inttab_tc2_093 00000000  805ff260  805ff260  00004364  2**0
                  CONTENTS
675 .inttab_tc2_094 00000000  805ff280  805ff280  00004364  2**0
                  CONTENTS
676 .inttab_tc2_095 00000000  805ff2a0  805ff2a0  00004364  2**0
                  CONTENTS
677 .inttab_tc2_096 00000000  805ff2c0  805ff2c0  00004364  2**0
                  CONTENTS
678 .inttab_tc2_097 00000000  805ff2e0  805ff2e0  00004364  2**0
                  CONTENTS
679 .inttab_tc2_098 00000000  805ff300  805ff300  00004364  2**0
                  CONTENTS
680 .inttab_tc2_099 00000000  805ff320  805ff320  00004364  2**0
                  CONTENTS
681 .inttab_tc2_09A 00000000  805ff340  805ff340  00004364  2**0
                  CONTENTS
682 .inttab_tc2_09B 00000000  805ff360  805ff360  00004364  2**0
                  CONTENTS
683 .inttab_tc2_09C 00000000  805ff380  805ff380  00004364  2**0
                  CONTENTS
684 .inttab_tc2_09D 00000000  805ff3a0  805ff3a0  00004364  2**0
                  CONTENTS
685 .inttab_tc2_09E 00000000  805ff3c0  805ff3c0  00004364  2**0
                  CONTENTS
686 .inttab_tc2_09F 00000000  805ff3e0  805ff3e0  00004364  2**0
                  CONTENTS
687 .inttab_tc2_0A0 00000000  805ff400  805ff400  00004364  2**0
                  CONTENTS
688 .inttab_tc2_0A1 00000000  805ff420  805ff420  00004364  2**0
                  CONTENTS
689 .inttab_tc2_0A2 00000000  805ff440  805ff440  00004364  2**0
                  CONTENTS
690 .inttab_tc2_0A3 00000000  805ff460  805ff460  00004364  2**0
                  CONTENTS
691 .inttab_tc2_0A4 00000000  805ff480  805ff480  00004364  2**0
                  CONTENTS
692 .inttab_tc2_0A5 00000000  805ff4a0  805ff4a0  00004364  2**0
                  CONTENTS
693 .inttab_tc2_0A6 00000000  805ff4c0  805ff4c0  00004364  2**0
                  CONTENTS
694 .inttab_tc2_0A7 00000000  805ff4e0  805ff4e0  00004364  2**0
                  CONTENTS
695 .inttab_tc2_0A8 00000000  805ff500  805ff500  00004364  2**0
                  CONTENTS
696 .inttab_tc2_0A9 00000000  805ff520  805ff520  00004364  2**0
                  CONTENTS
697 .inttab_tc2_0AA 00000000  805ff540  805ff540  00004364  2**0
                  CONTENTS
698 .inttab_tc2_0AB 00000000  805ff560  805ff560  00004364  2**0
                  CONTENTS
699 .inttab_tc2_0AC 00000000  805ff580  805ff580  00004364  2**0
                  CONTENTS
700 .inttab_tc2_0AD 00000000  805ff5a0  805ff5a0  00004364  2**0
                  CONTENTS
701 .inttab_tc2_0AE 00000000  805ff5c0  805ff5c0  00004364  2**0
                  CONTENTS
702 .inttab_tc2_0AF 00000000  805ff5e0  805ff5e0  00004364  2**0
                  CONTENTS
703 .inttab_tc2_0B0 00000000  805ff600  805ff600  00004364  2**0
                  CONTENTS
704 .inttab_tc2_0B1 00000000  805ff620  805ff620  00004364  2**0
                  CONTENTS
705 .inttab_tc2_0B2 00000000  805ff640  805ff640  00004364  2**0
                  CONTENTS
706 .inttab_tc2_0B3 00000000  805ff660  805ff660  00004364  2**0
                  CONTENTS
707 .inttab_tc2_0B4 00000000  805ff680  805ff680  00004364  2**0
                  CONTENTS
708 .inttab_tc2_0B5 00000000  805ff6a0  805ff6a0  00004364  2**0
                  CONTENTS
709 .inttab_tc2_0B6 00000000  805ff6c0  805ff6c0  00004364  2**0
                  CONTENTS
710 .inttab_tc2_0B7 00000000  805ff6e0  805ff6e0  00004364  2**0
                  CONTENTS
711 .inttab_tc2_0B8 00000000  805ff700  805ff700  00004364  2**0
                  CONTENTS
712 .inttab_tc2_0B9 00000000  805ff720  805ff720  00004364  2**0
                  CONTENTS
713 .inttab_tc2_0BA 00000000  805ff740  805ff740  00004364  2**0
                  CONTENTS
714 .inttab_tc2_0BB 00000000  805ff760  805ff760  00004364  2**0
                  CONTENTS
715 .inttab_tc2_0BC 00000000  805ff780  805ff780  00004364  2**0
                  CONTENTS
716 .inttab_tc2_0BD 00000000  805ff7a0  805ff7a0  00004364  2**0
                  CONTENTS
717 .inttab_tc2_0BE 00000000  805ff7c0  805ff7c0  00004364  2**0
                  CONTENTS
718 .inttab_tc2_0BF 00000000  805ff7e0  805ff7e0  00004364  2**0
                  CONTENTS
719 .inttab_tc2_0C0 00000000  805ff800  805ff800  00004364  2**0
                  CONTENTS
720 .inttab_tc2_0C1 00000000  805ff820  805ff820  00004364  2**0
                  CONTENTS
721 .inttab_tc2_0C2 00000000  805ff840  805ff840  00004364  2**0
                  CONTENTS
722 .inttab_tc2_0C3 00000000  805ff860  805ff860  00004364  2**0
                  CONTENTS
723 .inttab_tc2_0C4 00000000  805ff880  805ff880  00004364  2**0
                  CONTENTS
724 .inttab_tc2_0C5 00000000  805ff8a0  805ff8a0  00004364  2**0
                  CONTENTS
725 .inttab_tc2_0C6 00000000  805ff8c0  805ff8c0  00004364  2**0
                  CONTENTS
726 .inttab_tc2_0C7 00000000  805ff8e0  805ff8e0  00004364  2**0
                  CONTENTS
727 .inttab_tc2_0C8 00000000  805ff900  805ff900  00004364  2**0
                  CONTENTS
728 .inttab_tc2_0C9 00000000  805ff920  805ff920  00004364  2**0
                  CONTENTS
729 .inttab_tc2_0CA 00000000  805ff940  805ff940  00004364  2**0
                  CONTENTS
730 .inttab_tc2_0CB 00000000  805ff960  805ff960  00004364  2**0
                  CONTENTS
731 .inttab_tc2_0CC 00000000  805ff980  805ff980  00004364  2**0
                  CONTENTS
732 .inttab_tc2_0CD 00000000  805ff9a0  805ff9a0  00004364  2**0
                  CONTENTS
733 .inttab_tc2_0CE 00000000  805ff9c0  805ff9c0  00004364  2**0
                  CONTENTS
734 .inttab_tc2_0CF 00000000  805ff9e0  805ff9e0  00004364  2**0
                  CONTENTS
735 .inttab_tc2_0D0 00000000  805ffa00  805ffa00  00004364  2**0
                  CONTENTS
736 .inttab_tc2_0D1 00000000  805ffa20  805ffa20  00004364  2**0
                  CONTENTS
737 .inttab_tc2_0D2 00000000  805ffa40  805ffa40  00004364  2**0
                  CONTENTS
738 .inttab_tc2_0D3 00000000  805ffa60  805ffa60  00004364  2**0
                  CONTENTS
739 .inttab_tc2_0D4 00000000  805ffa80  805ffa80  00004364  2**0
                  CONTENTS
740 .inttab_tc2_0D5 00000000  805ffaa0  805ffaa0  00004364  2**0
                  CONTENTS
741 .inttab_tc2_0D6 00000000  805ffac0  805ffac0  00004364  2**0
                  CONTENTS
742 .inttab_tc2_0D7 00000000  805ffae0  805ffae0  00004364  2**0
                  CONTENTS
743 .inttab_tc2_0D8 00000000  805ffb00  805ffb00  00004364  2**0
                  CONTENTS
744 .inttab_tc2_0D9 00000000  805ffb20  805ffb20  00004364  2**0
                  CONTENTS
745 .inttab_tc2_0DA 00000000  805ffb40  805ffb40  00004364  2**0
                  CONTENTS
746 .inttab_tc2_0DB 00000000  805ffb60  805ffb60  00004364  2**0
                  CONTENTS
747 .inttab_tc2_0DC 00000000  805ffb80  805ffb80  00004364  2**0
                  CONTENTS
748 .inttab_tc2_0DD 00000000  805ffba0  805ffba0  00004364  2**0
                  CONTENTS
749 .inttab_tc2_0DE 00000000  805ffbc0  805ffbc0  00004364  2**0
                  CONTENTS
750 .inttab_tc2_0DF 00000000  805ffbe0  805ffbe0  00004364  2**0
                  CONTENTS
751 .inttab_tc2_0E0 00000000  805ffc00  805ffc00  00004364  2**0
                  CONTENTS
752 .inttab_tc2_0E1 00000000  805ffc20  805ffc20  00004364  2**0
                  CONTENTS
753 .inttab_tc2_0E2 00000000  805ffc40  805ffc40  00004364  2**0
                  CONTENTS
754 .inttab_tc2_0E3 00000000  805ffc60  805ffc60  00004364  2**0
                  CONTENTS
755 .inttab_tc2_0E4 00000000  805ffc80  805ffc80  00004364  2**0
                  CONTENTS
756 .inttab_tc2_0E5 00000000  805ffca0  805ffca0  00004364  2**0
                  CONTENTS
757 .inttab_tc2_0E6 00000000  805ffcc0  805ffcc0  00004364  2**0
                  CONTENTS
758 .inttab_tc2_0E7 00000000  805ffce0  805ffce0  00004364  2**0
                  CONTENTS
759 .inttab_tc2_0E8 00000000  805ffd00  805ffd00  00004364  2**0
                  CONTENTS
760 .inttab_tc2_0E9 00000000  805ffd20  805ffd20  00004364  2**0
                  CONTENTS
761 .inttab_tc2_0EA 00000000  805ffd40  805ffd40  00004364  2**0
                  CONTENTS
762 .inttab_tc2_0EB 00000000  805ffd60  805ffd60  00004364  2**0
                  CONTENTS
763 .inttab_tc2_0EC 00000000  805ffd80  805ffd80  00004364  2**0
                  CONTENTS
764 .inttab_tc2_0ED 00000000  805ffda0  805ffda0  00004364  2**0
                  CONTENTS
765 .inttab_tc2_0EE 00000000  805ffdc0  805ffdc0  00004364  2**0
                  CONTENTS
766 .inttab_tc2_0EF 00000000  805ffde0  805ffde0  00004364  2**0
                  CONTENTS
767 .inttab_tc2_0F0 00000000  805ffe00  805ffe00  00004364  2**0
                  CONTENTS
768 .inttab_tc2_0F1 00000000  805ffe20  805ffe20  00004364  2**0
                  CONTENTS
769 .inttab_tc2_0F2 00000000  805ffe40  805ffe40  00004364  2**0
                  CONTENTS
770 .inttab_tc2_0F3 00000000  805ffe60  805ffe60  00004364  2**0
                  CONTENTS
771 .inttab_tc2_0F4 00000000  805ffe80  805ffe80  00004364  2**0
                  CONTENTS
772 .inttab_tc2_0F5 00000000  805ffea0  805ffea0  00004364  2**0
                  CONTENTS
773 .inttab_tc2_0F6 00000000  805ffec0  805ffec0  00004364  2**0
                  CONTENTS
774 .inttab_tc2_0F7 00000000  805ffee0  805ffee0  00004364  2**0
                  CONTENTS
775 .inttab_tc2_0F8 00000000  805fff00  805fff00  00004364  2**0
                  CONTENTS
776 .inttab_tc2_0F9 00000000  805fff20  805fff20  00004364  2**0
                  CONTENTS
777 .inttab_tc2_0FA 00000000  805fff40  805fff40  00004364  2**0
                  CONTENTS
778 .inttab_tc2_0FB 00000000  805fff60  805fff60  00004364  2**0
                  CONTENTS
779 .inttab_tc2_0FC 00000000  805fff80  805fff80  00004364  2**0
                  CONTENTS
780 .inttab_tc2_0FD 00000000  805fffa0  805fffa0  00004364  2**0
                  CONTENTS
781 .inttab_tc2_0FE 00000000  805fffc0  805fffc0  00004364  2**0
                  CONTENTS
782 .inttab_tc2_0FF 00000000  805fffe0  805fffe0  00004364  2**0
                  CONTENTS
783 .bmhd_0_org   000001f4  af400000  af400000  000033c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
784 .bmhd_1_org   000001f4  af400200  af400200  000035b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
785 .bmhd_2_org   000001f4  af400400  af400400  000037ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
786 .bmhd_3_org   000001f4  af400600  af400600  000039a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
787 .bmhd_0_copy  000001f4  af401000  af401000  00003b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
788 .bmhd_1_copy  000001f4  af401200  af401200  00003d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
789 .bmhd_2_copy  000001f4  af401400  af401400  00003f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
790 .bmhd_3_copy  000001f4  af401600  af401600  00004170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
791 .CPU2.zdata   00000000  50000000  50000000  00004364  2**0
                  CONTENTS
792 .CPU1.zdata   00000000  60000000  60000000  00004364  2**0
                  CONTENTS
793 .CPU0.zdata   00000000  70000000  70000000  00004364  2**0
                  CONTENTS
794 .zdata_powerOn 00000000  70000000  70000000  00004364  2**0
                  CONTENTS
795 .zdata        00000000  70000000  70000000  00004364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
796 .lmuzdata     00000000  90000000  90000000  00004364  2**0
                  CONTENTS
797 .sdata        00000000  70000000  70000000  00004364  2**0
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
798 .CPU2.data    00000000  50000000  50000000  00004364  2**0
                  CONTENTS
799 .CPU2.lmudata 00000000  90020000  90020000  00004364  2**0
                  CONTENTS
800 .CPU1.data    00000000  60000000  60000000  00004364  2**0
                  CONTENTS
801 .CPU1.lmudata 00000000  90010000  90010000  00004364  2**0
                  CONTENTS
802 .CPU0.data    00000000  70000000  70000000  00004364  2**0
                  CONTENTS
803 .CPU0.lmudata 00000000  90000000  90000000  00004364  2**0
                  CONTENTS
804 .sdata4       00000000  90000000  90000000  00004364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
805 .data         00000000  70000000  70000000  00004364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
806 .bss          0000000c  70000000  80000200  000004e0  2**3
                  ALLOC
807 .heap         00001000  7000000c  80000200  000004e0  2**0
                  ALLOC
808 .lmudata      00000000  90000000  90000000  00004364  2**0
                  CONTENTS
809 .rodata       00000480  80000200  80000200  000004e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
810 .CPU0.psram_text 00000000  70100000  70100000  00004364  2**0
                  CONTENTS
811 .CPU1.psram_text 00000000  60100000  60100000  00004364  2**0
                  CONTENTS
812 .CPU2.psram_text 00000000  50100000  50100000  00004364  2**0
                  CONTENTS
813 .CPU0.text    000003ba  80000680  80000680  00000960  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
814 .init         0000000c  80000a3c  80000a3c  00000d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
815 .fini         00000008  80000a48  80000a48  00000d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
816 .CPU1.text    000001f8  8030022c  8030022c  00002fc0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
817 .CPU2.text    000001e6  80300424  80300424  000031b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
818 .text         00002064  80000a50  80000a50  00000d30  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
819 .eh_frame     00000004  80002ab4  80002ab4  00002d94  2**0
                  ALLOC
820 .ctors        00000010  80002ab8  80002ab8  00002d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
821 .dtors        00000010  80002ac8  80002ac8  00002da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
822 .comment      00000082  00000000  00000000  00004364  2**0
                  CONTENTS, READONLY
823 .debug_aranges 00000778  00000000  00000000  000043e8  2**3
                  CONTENTS, READONLY, DEBUGGING
824 .debug_info   00071cc2  00000000  00000000  00004b60  2**0
                  CONTENTS, READONLY, DEBUGGING
825 .debug_abbrev 00003a54  00000000  00000000  00076822  2**0
                  CONTENTS, READONLY, DEBUGGING
826 .debug_line   0000df19  00000000  00000000  0007a276  2**0
                  CONTENTS, READONLY, DEBUGGING
827 .debug_frame  00000f60  00000000  00000000  00088190  2**2
                  CONTENTS, READONLY, DEBUGGING
828 .debug_str    000017a6  00000000  00000000  000890f0  2**0
                  CONTENTS, READONLY, DEBUGGING
829 .debug_loc    00005736  00000000  00000000  0008a896  2**0
                  CONTENTS, READONLY, DEBUGGING
830 .debug_ranges 00000a88  00000000  00000000  0008ffd0  2**3
                  CONTENTS, READONLY, DEBUGGING
831 .debug_macro  00016122  00000000  00000000  00090a58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .start_tc0:

a0000000 <_START>:
}


IFX_SSW_INLINE void Ifx_Ssw_jumpToFunction(void (*fun)(void))
{
    __asm__ volatile ("ji %0" ::"a" (fun));
a0000000:	91 00 00 28 	movh.a %a2,32768
a0000004:	d9 22 a8 10 	lea %a2,[%a2]2152 <80000868 <__StartUpSoftware>>
a0000008:	dc 02       	ji %a2
#endif

void _START(void)
{
    Ifx_Ssw_jumpToFunction(__StartUpSoftware);
}
a000000a:	00 90       	ret 

Disassembly of section .traptab_tc0:

80000100 <IfxCpu_Trap_vectorTable0>:
#pragma ghs section
#pragma ghs section text=".traptab_cpu0"
#endif
void IfxCpu_Trap_vectorTable0(void)
{
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_memoryManagementError);
80000100:	0d 00 00 02 	svlcx 
80000104:	02 f4       	mov %d4,%d15
80000106:	91 00 00 28 	movh.a %a2,32768
8000010a:	d9 22 be 21 	lea %a2,[%a2]6334 <800018be <IfxCpu_Trap_memoryManagementError>>
8000010e:	dc 02       	ji %a2
80000110:	00 80       	rfe 
	...
8000011e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_internalProtectionError);
80000120:	0d 00 00 02 	svlcx 
80000124:	02 f4       	mov %d4,%d15
80000126:	91 00 00 28 	movh.a %a2,32768
8000012a:	d9 22 ac 31 	lea %a2,[%a2]6380 <800018ec <IfxCpu_Trap_internalProtectionError>>
8000012e:	dc 02       	ji %a2
80000130:	00 80       	rfe 
	...
8000013e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_instructionError);
80000140:	0d 00 00 02 	svlcx 
80000144:	02 f4       	mov %d4,%d15
80000146:	91 00 00 28 	movh.a %a2,32768
8000014a:	d9 22 9a 41 	lea %a2,[%a2]6426 <8000191a <IfxCpu_Trap_instructionError>>
8000014e:	dc 02       	ji %a2
80000150:	00 80       	rfe 
	...
8000015e:	00 00       	nop 
    IfxCpu_Tsr_CallCSATSR(IfxCpu_Trap_contextManagementError);
80000160:	02 f4       	mov %d4,%d15
80000162:	91 00 00 28 	movh.a %a2,32768
80000166:	d9 22 88 51 	lea %a2,[%a2]6472 <80001948 <IfxCpu_Trap_contextManagementError>>
8000016a:	dc 02       	ji %a2
8000016c:	00 80       	rfe 
	...
8000017e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_busError);
80000180:	0d 00 00 02 	svlcx 
80000184:	02 f4       	mov %d4,%d15
80000186:	91 00 00 28 	movh.a %a2,32768
8000018a:	d9 22 b6 51 	lea %a2,[%a2]6518 <80001976 <IfxCpu_Trap_busError>>
8000018e:	dc 02       	ji %a2
80000190:	00 80       	rfe 
	...
8000019e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_assertion);
800001a0:	0d 00 00 02 	svlcx 
800001a4:	02 f4       	mov %d4,%d15
800001a6:	91 00 00 28 	movh.a %a2,32768
800001aa:	d9 22 a4 61 	lea %a2,[%a2]6564 <800019a4 <IfxCpu_Trap_assertion>>
800001ae:	dc 02       	ji %a2
800001b0:	00 80       	rfe 
	...
800001be:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_systemCall_Cpu0);
800001c0:	0d 00 00 02 	svlcx 
800001c4:	02 f4       	mov %d4,%d15
800001c6:	91 00 00 28 	movh.a %a2,32768
800001ca:	d9 22 98 71 	lea %a2,[%a2]6616 <800019d8 <IfxCpu_Trap_systemCall_Cpu0>>
800001ce:	dc 02       	ji %a2
800001d0:	00 80       	rfe 
	...
800001de:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_nonMaskableInterrupt);
800001e0:	0d 00 00 02 	svlcx 
800001e4:	02 f4       	mov %d4,%d15
800001e6:	91 00 00 28 	movh.a %a2,32768
800001ea:	d9 22 9c 91 	lea %a2,[%a2]6748 <80001a5c <IfxCpu_Trap_nonMaskableInterrupt>>
800001ee:	dc 02       	ji %a2
800001f0:	00 80       	rfe 
}
800001f2:	00 90       	ret 

800001f4 <IfxCpu_Trap_vectorTable0_end>:
	...

Disassembly of section .traptab_tc1:

80300000 <IfxCpu_Trap_vectorTable1>:
#pragma ghs section
#pragma ghs section text=".traptab_cpu1"
#endif
void IfxCpu_Trap_vectorTable1(void)
{
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_memoryManagementError);
80300000:	0d 00 00 02 	svlcx 
80300004:	02 f4       	mov %d4,%d15
80300006:	91 00 00 28 	movh.a %a2,32768
8030000a:	d9 22 be 21 	lea %a2,[%a2]6334 <800018be <IfxCpu_Trap_memoryManagementError>>
8030000e:	dc 02       	ji %a2
80300010:	00 80       	rfe 
	...
8030001e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_internalProtectionError);
80300020:	0d 00 00 02 	svlcx 
80300024:	02 f4       	mov %d4,%d15
80300026:	91 00 00 28 	movh.a %a2,32768
8030002a:	d9 22 ac 31 	lea %a2,[%a2]6380 <800018ec <IfxCpu_Trap_internalProtectionError>>
8030002e:	dc 02       	ji %a2
80300030:	00 80       	rfe 
	...
8030003e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_instructionError);
80300040:	0d 00 00 02 	svlcx 
80300044:	02 f4       	mov %d4,%d15
80300046:	91 00 00 28 	movh.a %a2,32768
8030004a:	d9 22 9a 41 	lea %a2,[%a2]6426 <8000191a <IfxCpu_Trap_instructionError>>
8030004e:	dc 02       	ji %a2
80300050:	00 80       	rfe 
	...
8030005e:	00 00       	nop 
    IfxCpu_Tsr_CallCSATSR(IfxCpu_Trap_contextManagementError);
80300060:	02 f4       	mov %d4,%d15
80300062:	91 00 00 28 	movh.a %a2,32768
80300066:	d9 22 88 51 	lea %a2,[%a2]6472 <80001948 <IfxCpu_Trap_contextManagementError>>
8030006a:	dc 02       	ji %a2
8030006c:	00 80       	rfe 
	...
8030007e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_busError);
80300080:	0d 00 00 02 	svlcx 
80300084:	02 f4       	mov %d4,%d15
80300086:	91 00 00 28 	movh.a %a2,32768
8030008a:	d9 22 b6 51 	lea %a2,[%a2]6518 <80001976 <IfxCpu_Trap_busError>>
8030008e:	dc 02       	ji %a2
80300090:	00 80       	rfe 
	...
8030009e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_assertion);
803000a0:	0d 00 00 02 	svlcx 
803000a4:	02 f4       	mov %d4,%d15
803000a6:	91 00 00 28 	movh.a %a2,32768
803000aa:	d9 22 a4 61 	lea %a2,[%a2]6564 <800019a4 <IfxCpu_Trap_assertion>>
803000ae:	dc 02       	ji %a2
803000b0:	00 80       	rfe 
	...
803000be:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_systemCall_Cpu1);
803000c0:	0d 00 00 02 	svlcx 
803000c4:	02 f4       	mov %d4,%d15
803000c6:	91 00 00 28 	movh.a %a2,32768
803000ca:	d9 22 84 81 	lea %a2,[%a2]6660 <80001a04 <IfxCpu_Trap_systemCall_Cpu1>>
803000ce:	dc 02       	ji %a2
803000d0:	00 80       	rfe 
	...
803000de:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_nonMaskableInterrupt);
803000e0:	0d 00 00 02 	svlcx 
803000e4:	02 f4       	mov %d4,%d15
803000e6:	91 00 00 28 	movh.a %a2,32768
803000ea:	d9 22 9c 91 	lea %a2,[%a2]6748 <80001a5c <IfxCpu_Trap_nonMaskableInterrupt>>
803000ee:	dc 02       	ji %a2
803000f0:	00 80       	rfe 
}
803000f2:	00 90       	ret 

803000f4 <IfxCpu_Trap_vectorTable1_end>:
	...

Disassembly of section .traptab_tc2:

80300100 <IfxCpu_Trap_vectorTable2>:
#pragma ghs section text=".traptab_cpu2"
#endif

void IfxCpu_Trap_vectorTable2(void)
{
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_memoryManagementError);
80300100:	0d 00 00 02 	svlcx 
80300104:	02 f4       	mov %d4,%d15
80300106:	91 00 00 28 	movh.a %a2,32768
8030010a:	d9 22 be 21 	lea %a2,[%a2]6334 <800018be <IfxCpu_Trap_memoryManagementError>>
8030010e:	dc 02       	ji %a2
80300110:	00 80       	rfe 
	...
8030011e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_internalProtectionError);
80300120:	0d 00 00 02 	svlcx 
80300124:	02 f4       	mov %d4,%d15
80300126:	91 00 00 28 	movh.a %a2,32768
8030012a:	d9 22 ac 31 	lea %a2,[%a2]6380 <800018ec <IfxCpu_Trap_internalProtectionError>>
8030012e:	dc 02       	ji %a2
80300130:	00 80       	rfe 
	...
8030013e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_instructionError);
80300140:	0d 00 00 02 	svlcx 
80300144:	02 f4       	mov %d4,%d15
80300146:	91 00 00 28 	movh.a %a2,32768
8030014a:	d9 22 9a 41 	lea %a2,[%a2]6426 <8000191a <IfxCpu_Trap_instructionError>>
8030014e:	dc 02       	ji %a2
80300150:	00 80       	rfe 
	...
8030015e:	00 00       	nop 
    IfxCpu_Tsr_CallCSATSR(IfxCpu_Trap_contextManagementError);
80300160:	02 f4       	mov %d4,%d15
80300162:	91 00 00 28 	movh.a %a2,32768
80300166:	d9 22 88 51 	lea %a2,[%a2]6472 <80001948 <IfxCpu_Trap_contextManagementError>>
8030016a:	dc 02       	ji %a2
8030016c:	00 80       	rfe 
	...
8030017e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_busError);
80300180:	0d 00 00 02 	svlcx 
80300184:	02 f4       	mov %d4,%d15
80300186:	91 00 00 28 	movh.a %a2,32768
8030018a:	d9 22 b6 51 	lea %a2,[%a2]6518 <80001976 <IfxCpu_Trap_busError>>
8030018e:	dc 02       	ji %a2
80300190:	00 80       	rfe 
	...
8030019e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_assertion);
803001a0:	0d 00 00 02 	svlcx 
803001a4:	02 f4       	mov %d4,%d15
803001a6:	91 00 00 28 	movh.a %a2,32768
803001aa:	d9 22 a4 61 	lea %a2,[%a2]6564 <800019a4 <IfxCpu_Trap_assertion>>
803001ae:	dc 02       	ji %a2
803001b0:	00 80       	rfe 
	...
803001be:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_systemCall_Cpu2);
803001c0:	0d 00 00 02 	svlcx 
803001c4:	02 f4       	mov %d4,%d15
803001c6:	91 00 00 28 	movh.a %a2,32768
803001ca:	d9 22 b0 81 	lea %a2,[%a2]6704 <80001a30 <IfxCpu_Trap_systemCall_Cpu2>>
803001ce:	dc 02       	ji %a2
803001d0:	00 80       	rfe 
	...
803001de:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_nonMaskableInterrupt);
803001e0:	0d 00 00 02 	svlcx 
803001e4:	02 f4       	mov %d4,%d15
803001e6:	91 00 00 28 	movh.a %a2,32768
803001ea:	d9 22 9c 91 	lea %a2,[%a2]6748 <80001a5c <IfxCpu_Trap_nonMaskableInterrupt>>
803001ee:	dc 02       	ji %a2
803001f0:	00 80       	rfe 
}
803001f2:	00 90       	ret 

803001f4 <IfxCpu_Trap_vectorTable2_end>:
	...

Disassembly of section .start_tc1:

a0300200 <_START1>:
a0300200:	91 00 03 28 	movh.a %a2,32816
a0300204:	d9 22 2c 80 	lea %a2,[%a2]556 <8030022c <__Core1_start>>
a0300208:	dc 02       	ji %a2
#endif

void _START1(void)
{
    Ifx_Ssw_jumpToFunction(__Core1_start);
}
a030020a:	00 90       	ret 

Disassembly of section .start_tc2:

a0300220 <_START2>:
a0300220:	91 00 03 28 	movh.a %a2,32816
a0300224:	d9 22 64 00 	lea %a2,[%a2]1060 <80300424 <__Core2_start>>
a0300228:	dc 02       	ji %a2
#endif

void _START2(void)
{
    Ifx_Ssw_jumpToFunction(__Core2_start);
}
a030022a:	00 90       	ret 

Disassembly of section .CPU0.text:

80000680 <__StartUpSoftware_Phase2>:
}


IFX_SSW_INLINE void Ifx_Ssw_jumpToFunctionWithLink(void *fun)
{
    __asm__ volatile ("jli %0" ::"a" (fun));
80000680:	91 00 00 28 	movh.a %a2,32768
80000684:	d9 22 ce d1 	lea %a2,[%a2]8014 <80001f4e <Ifx_Ssw_Pms_Init>>
80000688:	2d 02 20 00 	jli %a2
8000068c:	91 00 00 28 	movh.a %a2,32768
80000690:	d9 22 34 12 	lea %a2,[%a2]8308 <80002074 <Ifx_Ssw_Pms_InitCheck>>
80000694:	2d 02 20 00 	jli %a2
    __asm__ volatile ("ji %0" ::"a" (fun));
80000698:	91 00 00 28 	movh.a %a2,32768
8000069c:	d9 22 64 a0 	lea %a2,[%a2]1700 <800006a4 <__StartUpSoftware_Phase3PowerOnResetPath>>
800006a0:	dc 02       	ji %a2
}
800006a2:	00 90       	ret 

800006a4 <__StartUpSoftware_Phase3PowerOnResetPath>:
    IFX_SSW_INIT_CONTEXT();
800006a4:	91 40 00 a7 	movh.a %sp,28676
800006a8:	d9 aa 40 89 	lea %sp,[%sp]-27136 <70039600 <__USTACK0>>
    __asm__ volatile ("dsync" : : : "memory");
800006ac:	0d 00 80 04 	dsync 
{
    unsigned int  k;
    unsigned int  nxt_cxi_val = 0U;
    unsigned int *prvCsa      = csaBegin;
    unsigned int *nxtCsa      = csaBegin;
    unsigned int numOfCsa     = (((unsigned int)csaEnd - (unsigned int)csaBegin) / 64U);
800006b0:	91 40 00 37 	movh.a %a3,28676
800006b4:	91 40 00 27 	movh.a %a2,28676
800006b8:	d9 33 c0 09 	lea %a3,[%a3]-25600 <70039c00 <__CSA0>>
800006bc:	d9 22 c0 0b 	lea %a2,[%a2]-17408 <7003bc00 <__CSA0_END>>
800006c0:	01 32 20 20 	sub.a %a2,%a2,%a3
800006c4:	80 22       	mov.d %d2,%a2
800006c6:	8f a2 1f 60 	sh %d6,%d2,-6
    unsigned int *prvCsa      = csaBegin;
800006ca:	40 32       	mov.aa %a2,%a3
        else
        {
            *prvCsa = nxt_cxi_val;
        }

        if (k == (numOfCsa - 3U))
800006cc:	1b d6 ff 0f 	addi %d0,%d6,-3
    for (k = 0U; k < numOfCsa; k++)
800006d0:	82 03       	mov %d3,0
    unsigned int *nxtCsa      = csaBegin;
800006d2:	80 32       	mov.d %d2,%a3
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
800006d4:	7b f0 00 70 	movh %d7,15
    for (k = 0U; k < numOfCsa; k++)
800006d8:	df 06 2d 00 	jeq %d6,0,80000732 <__StartUpSoftware_Phase3PowerOnResetPath+0x8e>
                      ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFFFFU << 6U)) >> 6U);
800006dc:	37 02 70 43 	extr.u %d4,%d2,6,16
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
800006e0:	8f 42 1f 50 	sh %d5,%d2,-12
800006e4:	26 75       	and %d5,%d7
800006e6:	a6 54       	or %d4,%d5
        if (k == 0U)
800006e8:	df 03 14 00 	jeq %d3,0,80000710 <__StartUpSoftware_Phase3PowerOnResetPath+0x6c>
            *prvCsa = nxt_cxi_val;
800006ec:	74 24       	st.w [%a2],%d4
        if (k == (numOfCsa - 3U))
800006ee:	5f 03 15 00 	jeq %d3,%d0,80000718 <__StartUpSoftware_Phase3PowerOnResetPath+0x74>
    for (k = 0U; k < numOfCsa; k++)
800006f2:	c2 13       	add %d3,1
800006f4:	60 22       	mov.a %a2,%d2
        {
            Ifx_Ssw_MTCR(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
        }

        prvCsa  = (unsigned int *)nxtCsa;
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
800006f6:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
800006fa:	5f 36 17 00 	jeq %d6,%d3,80000728 <__StartUpSoftware_Phase3PowerOnResetPath+0x84>
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
800006fe:	02 42       	mov %d2,%d4
                      ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFFFFU << 6U)) >> 6U);
80000700:	37 02 70 43 	extr.u %d4,%d2,6,16
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
80000704:	8f 42 1f 50 	sh %d5,%d2,-12
80000708:	26 75       	and %d5,%d7
8000070a:	a6 54       	or %d4,%d5
        if (k == 0U)
8000070c:	df 03 f0 ff 	jne %d3,0,800006ec <__StartUpSoftware_Phase3PowerOnResetPath+0x48>
            Ifx_Ssw_MTCR(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
80000710:	cd 84 e3 0f 	mtcr $fcx,%d4
        if (k == (numOfCsa - 3U))
80000714:	5f 03 ef ff 	jne %d3,%d0,800006f2 <__StartUpSoftware_Phase3PowerOnResetPath+0x4e>
            Ifx_Ssw_MTCR(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
80000718:	cd c4 e3 0f 	mtcr $lcx,%d4
    for (k = 0U; k < numOfCsa; k++)
8000071c:	c2 13       	add %d3,1
8000071e:	60 22       	mov.a %a2,%d2
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
80000720:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
80000724:	5f 36 ed ff 	jne %d6,%d3,800006fe <__StartUpSoftware_Phase3PowerOnResetPath+0x5a>
80000728:	1b f6 ff 2f 	addi %d2,%d6,-1
8000072c:	06 62       	sh %d2,6
8000072e:	01 32 00 26 	addsc.a %a2,%a3,%d2,0
    }

    *prvCsa = 0U;                       /* Store null pointer in last CSA (= very first time!) */
80000732:	82 02       	mov %d2,0
80000734:	74 22       	st.w [%a2],%d2
80000736:	0d 00 80 04 	dsync 
    __asm__ volatile ("isync" : : : "memory");
8000073a:	0d 00 c0 04 	isync 
    __asm__ volatile ("ji %0" ::"a" (fun));
8000073e:	91 00 00 28 	movh.a %a2,32768
80000742:	d9 22 9a 00 	lea %a2,[%a2]2074 <8000081a <__StartUpSoftware_Phase4>>
80000746:	dc 02       	ji %a2
}
80000748:	00 90       	ret 

8000074a <__StartUpSoftware_Phase3ApplicationResetPath>:
    IFX_SSW_INIT_CONTEXT();
8000074a:	91 40 00 a7 	movh.a %sp,28676
8000074e:	d9 aa 40 89 	lea %sp,[%sp]-27136 <70039600 <__USTACK0>>
    __asm__ volatile ("dsync" : : : "memory");
80000752:	0d 00 80 04 	dsync 
    unsigned int numOfCsa     = (((unsigned int)csaEnd - (unsigned int)csaBegin) / 64U);
80000756:	91 40 00 37 	movh.a %a3,28676
8000075a:	91 40 00 27 	movh.a %a2,28676
8000075e:	d9 33 c0 09 	lea %a3,[%a3]-25600 <70039c00 <__CSA0>>
80000762:	d9 22 c0 0b 	lea %a2,[%a2]-17408 <7003bc00 <__CSA0_END>>
80000766:	01 32 20 20 	sub.a %a2,%a2,%a3
8000076a:	80 22       	mov.d %d2,%a2
8000076c:	8f a2 1f 60 	sh %d6,%d2,-6
    unsigned int *prvCsa      = csaBegin;
80000770:	40 32       	mov.aa %a2,%a3
        if (k == (numOfCsa - 3U))
80000772:	1b d6 ff 0f 	addi %d0,%d6,-3
    for (k = 0U; k < numOfCsa; k++)
80000776:	82 03       	mov %d3,0
    unsigned int *nxtCsa      = csaBegin;
80000778:	80 32       	mov.d %d2,%a3
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
8000077a:	7b f0 00 70 	movh %d7,15
    for (k = 0U; k < numOfCsa; k++)
8000077e:	df 06 2d 00 	jeq %d6,0,800007d8 <__StartUpSoftware_Phase3ApplicationResetPath+0x8e>
                      ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFFFFU << 6U)) >> 6U);
80000782:	37 02 70 43 	extr.u %d4,%d2,6,16
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
80000786:	8f 42 1f 50 	sh %d5,%d2,-12
8000078a:	26 75       	and %d5,%d7
8000078c:	a6 54       	or %d4,%d5
        if (k == 0U)
8000078e:	df 03 14 00 	jeq %d3,0,800007b6 <__StartUpSoftware_Phase3ApplicationResetPath+0x6c>
            *prvCsa = nxt_cxi_val;
80000792:	74 24       	st.w [%a2],%d4
        if (k == (numOfCsa - 3U))
80000794:	5f 03 15 00 	jeq %d3,%d0,800007be <__StartUpSoftware_Phase3ApplicationResetPath+0x74>
    for (k = 0U; k < numOfCsa; k++)
80000798:	c2 13       	add %d3,1
8000079a:	60 22       	mov.a %a2,%d2
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
8000079c:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
800007a0:	5f 36 17 00 	jeq %d6,%d3,800007ce <__StartUpSoftware_Phase3ApplicationResetPath+0x84>
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
800007a4:	02 42       	mov %d2,%d4
                      ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFFFFU << 6U)) >> 6U);
800007a6:	37 02 70 43 	extr.u %d4,%d2,6,16
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
800007aa:	8f 42 1f 50 	sh %d5,%d2,-12
800007ae:	26 75       	and %d5,%d7
800007b0:	a6 54       	or %d4,%d5
        if (k == 0U)
800007b2:	df 03 f0 ff 	jne %d3,0,80000792 <__StartUpSoftware_Phase3ApplicationResetPath+0x48>
            Ifx_Ssw_MTCR(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
800007b6:	cd 84 e3 0f 	mtcr $fcx,%d4
        if (k == (numOfCsa - 3U))
800007ba:	5f 03 ef ff 	jne %d3,%d0,80000798 <__StartUpSoftware_Phase3ApplicationResetPath+0x4e>
            Ifx_Ssw_MTCR(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
800007be:	cd c4 e3 0f 	mtcr $lcx,%d4
    for (k = 0U; k < numOfCsa; k++)
800007c2:	c2 13       	add %d3,1
800007c4:	60 22       	mov.a %a2,%d2
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
800007c6:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
800007ca:	5f 36 ed ff 	jne %d6,%d3,800007a4 <__StartUpSoftware_Phase3ApplicationResetPath+0x5a>
800007ce:	1b f6 ff 2f 	addi %d2,%d6,-1
800007d2:	06 62       	sh %d2,6
800007d4:	01 32 00 26 	addsc.a %a2,%a3,%d2,0
    *prvCsa = 0U;                       /* Store null pointer in last CSA (= very first time!) */
800007d8:	82 02       	mov %d2,0
800007da:	74 22       	st.w [%a2],%d2
800007dc:	0d 00 80 04 	dsync 
    __asm__ volatile ("isync" : : : "memory");
800007e0:	0d 00 c0 04 	isync 
    __asm__ volatile ("ji %0" ::"a" (fun));
800007e4:	91 00 00 28 	movh.a %a2,32768
800007e8:	d9 22 70 f0 	lea %a2,[%a2]2032 <800007f0 <__StartUpSoftware_Phase5>>
800007ec:	dc 02       	ji %a2
}
800007ee:	00 90       	ret 

800007f0 <__StartUpSoftware_Phase5>:
800007f0:	91 00 00 28 	movh.a %a2,32768
800007f4:	d9 22 7c f0 	lea %a2,[%a2]2044 <800007fc <__StartUpSoftware_Phase6>>
800007f8:	dc 02       	ji %a2
}
800007fa:	00 90       	ret 

800007fc <__StartUpSoftware_Phase6>:
    Ifx_Ssw_startCore(&MODULE_CPU1, (unsigned int)__START(1));           /*The status returned by function call is ignored */
800007fc:	91 00 03 2a 	movh.a %a2,41008
80000800:	80 22       	mov.d %d2,%a2
80000802:	1b 02 20 40 	addi %d4,%d2,512
80000806:	91 20 88 4f 	movh.a %a4,63618
8000080a:	6d 00 91 0a 	call 80001d2c <Ifx_Ssw_startCore>
8000080e:	91 00 00 28 	movh.a %a2,32768
80000812:	d9 22 ac 30 	lea %a2,[%a2]2284 <800008ec <__Core0_start>>
80000816:	dc 02       	ji %a2
}
80000818:	00 90       	ret 

8000081a <__StartUpSoftware_Phase4>:
    password  = watchdog->CON0.B.PW;
8000081a:	91 30 00 4f 	movh.a %a4,61443
8000081e:	19 44 0c 96 	ld.w %d4,[%a4]25164 <f003624c <bmhd_3_copy+0x40c34c4c>>
    password  = watchdog->CON0.B.PW;
80000822:	91 30 00 2f 	movh.a %a2,61443
80000826:	19 28 28 a6 	ld.w %d8,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
    password  = watchdog->CON0.B.PW;
8000082a:	37 04 6e 41 	extr.u %d4,%d4,2,14
8000082e:	d9 44 0c 96 	lea %a4,[%a4]25164 <f003624c <bmhd_3_copy+0x40c34c4c>>
    password  = watchdog->CON0.B.PW;
80000832:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
        Ifx_Ssw_serviceCpuWatchdog(&MODULE_SCU.WDTCPU[0], cpuWdtPassword);
80000836:	8f f4 83 41 	xor %d4,%d4,63
8000083a:	37 08 6e 81 	extr.u %d8,%d8,2,14
8000083e:	6d 00 db 09 	call 80001bf4 <Ifx_Ssw_serviceCpuWatchdog>
        Ifx_Ssw_serviceSafetyWatchdog(safetyWdtPassword);
80000842:	8f f8 83 41 	xor %d4,%d8,63
80000846:	6d 00 ee 09 	call 80001c22 <Ifx_Ssw_serviceSafetyWatchdog>
    IFX_CFG_SSW_CALLOUT_PLL_INIT();
8000084a:	91 00 00 48 	movh.a %a4,32768
8000084e:	d9 44 1c 80 	lea %a4,[%a4]540 <8000021c <IfxScuCcu_defaultClockConfig>>
80000852:	6d 00 1f 03 	call 80000e90 <IfxScuCcu_init>
80000856:	df 12 03 80 	jne %d2,1,8000085c <__StartUpSoftware_Phase4+0x42>

/** Insert DEBUG instruction
 */
IFX_INLINE void Ifx__debug(void)
{
    __asm__ volatile ("debug" : : : "memory");
8000085a:	00 a0       	debug 
8000085c:	91 00 00 28 	movh.a %a2,32768
80000860:	d9 22 70 f0 	lea %a2,[%a2]2032 <800007f0 <__StartUpSoftware_Phase5>>
80000864:	dc 02       	ji %a2
}
80000866:	00 90       	ret 

80000868 <__StartUpSoftware>:
    Ifx_Ssw_setAddressReg(a1, __SDATA2(0));
80000868:	91 10 00 18 	movh.a %a1,32769
8000086c:	d9 11 00 08 	lea %a1,[%a1]-32768 <80008000 <_SMALL_DATA2_>>
    Ifx_Ssw_MTCR(CPU_PSW, IFX_CFG_SSW_PSW_DEFAULT);
80000870:	3b 00 98 20 	mov %d2,2432
80000874:	cd 42 e0 0f 	mtcr $psw,%d2
    unsigned int  tempValue = SCU_RSTSTAT.U;
80000878:	91 30 00 2f 	movh.a %a2,61443
8000087c:	19 22 10 16 	ld.w %d2,[%a2]24656 <f0036050 <bmhd_3_copy+0x40c34a50>>
    if ((tempValue & IFX_SSW_POWERONRESET_MASK) > 0U)
80000880:	7b d0 38 31 	movh %d3,5005
80000884:	26 23       	and %d3,%d2
    unsigned int  tempValue = SCU_RSTSTAT.U;
80000886:	d9 22 10 16 	lea %a2,[%a2]24656 <f0036050 <bmhd_3_copy+0x40c34a50>>
    if ((tempValue & IFX_SSW_POWERONRESET_MASK) > 0U)
8000088a:	df 03 15 80 	jne %d3,0,800008b4 <__StartUpSoftware+0x4c>
    else if ((tempValue & IFX_SSW_APPLICATIONRESET_MASK) > 0U)
8000088e:	8f b2 0f 31 	and %d3,%d2,251
80000892:	df 03 17 00 	jeq %d3,0,800008c0 <__StartUpSoftware+0x58>
        tempValue = (SCU_RSTCON.U >> ((31U - Ifx_Ssw_CLZ(tempValue)) << 1U)) & 3U;
80000896:	91 30 00 2f 	movh.a %a2,61443
8000089a:	0f 03 b0 21 	clz %d2,%d3
8000089e:	8b f2 01 21 	rsub %d2,%d2,31
800008a2:	19 23 18 16 	ld.w %d3,[%a2]24664 <f0036058 <bmhd_3_copy+0x40c34a58>>
800008a6:	06 12       	sh %d2,1
800008a8:	57 03 62 22 	extr.u %d2,%d3,%d2,2
800008ac:	d9 22 18 16 	lea %a2,[%a2]24664 <f0036058 <bmhd_3_copy+0x40c34a58>>
        if (tempValue == IFX_SSW_APPLICATIONRESET)
800008b0:	df 22 0a 00 	jeq %d2,2,800008c4 <__StartUpSoftware+0x5c>
800008b4:	91 00 00 28 	movh.a %a2,32768
800008b8:	d9 22 40 a0 	lea %a2,[%a2]1664 <80000680 <__StartUpSoftware_Phase2>>
800008bc:	dc 02       	ji %a2
}
800008be:	00 90       	ret 
    else if (((unsigned int)tempValue & ((unsigned int)IFX_SCU_RSTSTAT_CB3_MSK << IFX_SCU_RSTSTAT_CB3_OFF)))
800008c0:	ef 42 08 00 	jz.t %d2,20,800008d0 <__StartUpSoftware+0x68>
    __asm__ volatile ("ji %0" ::"a" (fun));
800008c4:	91 00 00 28 	movh.a %a2,32768
800008c8:	d9 22 4a d0 	lea %a2,[%a2]1866 <8000074a <__StartUpSoftware_Phase3ApplicationResetPath>>
800008cc:	dc 02       	ji %a2
}
800008ce:	00 90       	ret 
    else if (CPU0_KRST0.B.RSTSTAT != 0)   /*CPU0 KRST status */
800008d0:	91 10 88 2f 	movh.a %a2,63617
800008d4:	19 22 00 0d 	ld.w %d2,[%a2]-12288 <f880d000 <bmhd_3_copy+0x4940ba00>>
800008d8:	d9 22 00 0d 	lea %a2,[%a2]-12288 <f880d000 <bmhd_3_copy+0x4940ba00>>
800008dc:	37 02 e2 20 	extr.u %d2,%d2,1,2
800008e0:	df 02 f2 ff 	jne %d2,0,800008c4 <__StartUpSoftware+0x5c>
800008e4:	1d ff e8 ff 	j 800008b4 <__StartUpSoftware+0x4c>

800008e8 <hardware_init_hook>:
{}
800008e8:	00 90       	ret 

800008ea <software_init_hook>:
{}
800008ea:	00 90       	ret 

800008ec <__Core0_start>:
    password  = watchdog->CON0.B.PW;
800008ec:	91 30 00 2f 	movh.a %a2,61443
    password  = watchdog->CON0.B.PW;
800008f0:	91 30 00 3f 	movh.a %a3,61443
    password  = watchdog->CON0.B.PW;
800008f4:	19 23 0c 96 	ld.w %d3,[%a2]25164 <f003624c <bmhd_3_copy+0x40c34c4c>>
    password  = watchdog->CON0.B.PW;
800008f8:	19 32 28 a6 	ld.w %d2,[%a3]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
    password  = watchdog->CON0.B.PW;
800008fc:	37 03 6e 31 	extr.u %d3,%d3,2,14
    password  = watchdog->CON0.B.PW;
80000900:	37 02 6e 21 	extr.u %d2,%d2,2,14
    if (watchdog->CON0.B.LCK)
80000904:	19 24 0c 96 	ld.w %d4,[%a2]25164 <f003624c <bmhd_3_copy+0x40c34c4c>>
80000908:	8f f3 83 81 	xor %d8,%d3,63
    password  = watchdog->CON0.B.PW;
8000090c:	d9 22 0c 96 	lea %a2,[%a2]25164 <f003624c <bmhd_3_copy+0x40c34c4c>>
    password  = watchdog->CON0.B.PW;
80000910:	d9 33 28 a6 	lea %a3,[%a3]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80000914:	8f f2 83 91 	xor %d9,%d2,63
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80000918:	8f 28 00 20 	sh %d2,%d8,2
    if (watchdog->CON0.B.LCK)
8000091c:	6f 14 0b 00 	jz.t %d4,1,80000932 <__Core0_start+0x46>
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80000920:	54 23       	ld.w %d3,[%a2]
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80000922:	8f 28 00 20 	sh %d2,%d8,2
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80000926:	b7 03 10 30 	insert %d3,%d3,0,0,16
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000092a:	a6 23       	or %d3,%d2
8000092c:	8f 13 40 31 	or %d3,%d3,1
        watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80000930:	74 23       	st.w [%a2],%d3
                       ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80000932:	91 30 00 2f 	movh.a %a2,61443
80000936:	19 24 0c 96 	ld.w %d4,[%a2]25164 <f003624c <bmhd_3_copy+0x40c34c4c>>
8000093a:	d9 22 0c 96 	lea %a2,[%a2]25164 <f003624c <bmhd_3_copy+0x40c34c4c>>
8000093e:	b7 04 10 40 	insert %d4,%d4,0,0,16
        Ifx_Ssw_MTCR(CPU_PCON0, pcon0.U);
80000942:	82 03       	mov %d3,0
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80000944:	a6 24       	or %d4,%d2
80000946:	8f 24 40 41 	or %d4,%d4,2
    watchdog->CON0.U = ((unsigned int)0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000094a:	74 24       	st.w [%a2],%d4
    watchdog->CON0.U;
8000094c:	54 24       	ld.w %d4,[%a2]
8000094e:	cd c3 20 09 	mtcr $pcon0,%d3
    __asm__ volatile ("isync" : : : "memory");
80000952:	0d 00 c0 04 	isync 
        Ifx_Ssw_MTCR(CPU_DCON0, dcon0.U);
80000956:	cd 03 04 09 	mtcr $dcon0,%d3
8000095a:	0d 00 c0 04 	isync 
    Ifx_Ssw_setAddressReg(a0, __SDATA1(0));
8000095e:	91 10 00 07 	movh.a %a0,28673
80000962:	d9 00 00 08 	lea %a0,[%a0]-32768 <70008000 <_SMALL_DATA_>>
    Ifx_Ssw_setAddressReg(a8, __SDATA3(0));
80000966:	91 10 00 88 	movh.a %a8,32769
8000096a:	d9 88 00 08 	lea %a8,[%a8]-32768 <80008000 <_SMALL_DATA2_>>
    Ifx_Ssw_setAddressReg(a9, __SDATA4(0));
8000096e:	91 10 00 99 	movh.a %a9,36865
80000972:	d9 99 00 08 	lea %a9,[%a9]-32768 <90008000 <_SMALL_DATA4_>>
    Ifx_Ssw_MTCR(CPU_BTV, (unsigned int)__TRAPTAB(0));
80000976:	91 00 00 38 	movh.a %a3,32768
8000097a:	80 33       	mov.d %d3,%a3
8000097c:	1b 03 10 30 	addi %d3,%d3,256
80000980:	cd 43 e2 0f 	mtcr $btv,%d3
    Ifx_Ssw_MTCR(CPU_BIV, (unsigned int)__INTTAB(0));
80000984:	91 00 03 38 	movh.a %a3,32816
80000988:	80 33       	mov.d %d3,%a3
8000098a:	1b 03 00 3e 	addi %d3,%d3,-8192
8000098e:	cd 03 e2 0f 	mtcr $biv,%d3
    Ifx_Ssw_MTCR(CPU_ISP, (unsigned int)__ISTACK(0));
80000992:	91 40 00 37 	movh.a %a3,28676
80000996:	80 33       	mov.d %d3,%a3
80000998:	1b 03 b0 39 	addi %d3,%d3,-25856
8000099c:	cd 83 e2 0f 	mtcr $isp,%d3
    if (watchdog->CON0.B.LCK)
800009a0:	54 23       	ld.w %d3,[%a2]
800009a2:	6f 13 09 00 	jz.t %d3,1,800009b4 <__Core0_start+0xc8>
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800009a6:	54 23       	ld.w %d3,[%a2]
800009a8:	b7 03 10 30 	insert %d3,%d3,0,0,16
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800009ac:	a6 23       	or %d3,%d2
800009ae:	8f 13 40 31 	or %d3,%d3,1
        watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800009b2:	74 23       	st.w [%a2],%d3
                       ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800009b4:	91 30 00 cf 	movh.a %a12,61443
800009b8:	19 c3 0c 96 	ld.w %d3,[%a12]25164 <f003624c <bmhd_3_copy+0x40c34c4c>>
800009bc:	d9 cc 0c 96 	lea %a12,[%a12]25164 <f003624c <bmhd_3_copy+0x40c34c4c>>
800009c0:	b7 03 10 30 	insert %d3,%d3,0,0,16
    Ifx_Ssw_disableCpuWatchdog(&MODULE_SCU.WDTCPU[0], cpuWdtPassword);
800009c4:	40 c4       	mov.aa %a4,%a12
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800009c6:	a6 32       	or %d2,%d3
800009c8:	8f 32 40 21 	or %d2,%d2,3
800009cc:	02 84       	mov %d4,%d8
    watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800009ce:	74 c2       	st.w [%a12],%d2
    watchdog->CON0.U;
800009d0:	54 c2       	ld.w %d2,[%a12]
800009d2:	6d 00 47 09 	call 80001c60 <Ifx_Ssw_disableCpuWatchdog>
    Ifx_Ssw_disableSafetyWatchdog(safetyWdtPassword);
800009d6:	02 94       	mov %d4,%d9
800009d8:	6d 00 86 09 	call 80001ce4 <Ifx_Ssw_disableSafetyWatchdog>
	hardware_init_hook();
800009dc:	6d ff 86 ff 	call 800008e8 <hardware_init_hook>
	(void)Ifx_Ssw_doCppInit();
800009e0:	6d 00 18 0a 	call 80001e10 <Ifx_Ssw_doCppInit>
	software_init_hook();
800009e4:	6d ff 83 ff 	call 800008ea <software_init_hook>
    Ifx_Ssw_enableSafetyWatchdog(safetyWdtPassword);
800009e8:	02 94       	mov %d4,%d9
800009ea:	6d 00 8f 09 	call 80001d08 <Ifx_Ssw_enableSafetyWatchdog>
    Ifx_Ssw_enableCpuWatchdog(&MODULE_SCU.WDTCPU[0], cpuWdtPassword);
800009ee:	02 84       	mov %d4,%d8
800009f0:	40 c4       	mov.aa %a4,%a12
800009f2:	6d 00 58 09 	call 80001ca2 <Ifx_Ssw_enableCpuWatchdog>
    __asm__ volatile ("ji %0" ::"a" (fun));
800009f6:	91 00 00 28 	movh.a %a2,32768
800009fa:	d9 22 86 80 	lea %a2,[%a2]2566 <80000a06 <core0_main>>
800009fe:	dc 02       	ji %a2

80000a00 <x>:
    __asm__ volatile ("ji %a11");
}

IFX_SSW_INLINE void Ifx_Ssw_infiniteLoop(void)
{
    __asm("x: loopu\t x");
80000a00:	fd 00 00 80 	loopu 80000a00 <x>
}
80000a04:	00 90       	ret 

80000a06 <core0_main>:
#include "IfxScuWdt.h"

IFX_ALIGN(4) IfxCpu_syncEvent g_cpuSyncEvent = 0;

void core0_main(void)
{
80000a06:	40 ae       	mov.aa %a14,%sp
}


IFX_INLINE void IfxCpu_enableInterrupts(void)
{
    __enable();
80000a08:	0d 00 00 03 	enable 
    IfxCpu_enableInterrupts();
    
    /* !!WATCHDOG0 AND SAFETY WATCHDOG ARE DISABLED HERE!!
     * Enable the watchdogs and service them periodically if it is required
     */
    IfxScuWdt_disableCpuWatchdog(IfxScuWdt_getCpuWatchdogPassword());
80000a0c:	6d 00 14 07 	call 80001834 <IfxScuWdt_getCpuWatchdogPassword>
80000a10:	02 24       	mov %d4,%d2
80000a12:	6d 00 83 06 	call 80001718 <IfxScuWdt_disableCpuWatchdog>
    IfxScuWdt_disableSafetyWatchdog(IfxScuWdt_getSafetyWatchdogPassword());
80000a16:	6d 00 21 07 	call 80001858 <IfxScuWdt_getSafetyWatchdogPassword>
80000a1a:	02 24       	mov %d4,%d2
80000a1c:	6d 00 bd 06 	call 80001796 <IfxScuWdt_disableSafetyWatchdog>
    
    /* Wait for CPU sync event */
    IfxCpu_emitEvent(&g_cpuSyncEvent);
80000a20:	91 00 00 c7 	movh.a %a12,28672
80000a24:	d9 cc 08 00 	lea %a12,[%a12]8 <70000008 <g_cpuSyncEvent>>
80000a28:	40 c4       	mov.aa %a4,%a12
80000a2a:	6d 00 70 08 	call 80001b0a <IfxCpu_emitEvent>
    IfxCpu_waitEvent(&g_cpuSyncEvent, 1);
80000a2e:	82 14       	mov %d4,1
80000a30:	40 c4       	mov.aa %a4,%a12
80000a32:	6d 00 2b 08 	call 80001a88 <IfxCpu_waitEvent>
    
    
    while(1)
80000a36:	1d 00 00 00 	j 80000a36 <core0_main+0x30>

Disassembly of section .init:

80000a3c <_init>:
80000a3c:	6d 00 6e 00 	call 80000b18 <frame_dummy>
80000a40:	6d 00 26 10 	call 80002a8c <__do_global_ctors_aux>
80000a44:	00 90       	ret 
	...

Disassembly of section .fini:

80000a48 <_fini>:
80000a48:	6d 00 36 00 	call 80000ab4 <__do_global_dtors_aux>
80000a4c:	00 90       	ret 
	...

Disassembly of section .CPU1.text:

8030022c <__Core1_start>:
    password  = watchdog->CON0.B.PW;
8030022c:	91 30 00 2f 	movh.a %a2,61443
80300230:	d9 22 18 96 	lea %a2,[%a2]25176 <f0036258 <bmhd_3_copy+0x40c34c58>>
    unsigned int   stmCountBegin = STM0_TIM0.U;     /* it is necessary to get this value to have minimum 100uS delay in subsequent CPU start */
80300234:	85 f8 10 01 	ld.w %d8,f0001010 <bmhd_3_copy+0x40bffa10>
80300238:	54 22       	ld.w %d2,[%a2]
8030023a:	37 02 6e 21 	extr.u %d2,%d2,2,14
    password ^= IFX_SSW_WDT_PASSWORD_INVERT_MSK;
8030023e:	8f f2 83 21 	xor %d2,%d2,63
    Ifx_Ssw_setAddressReg(sp, __USTACK(1));
80300242:	91 40 00 a6 	movh.a %sp,24580
80300246:	d9 aa 40 89 	lea %sp,[%sp]-27136 <60039600 <__USTACK1>>
    __asm__ volatile ("dsync" : : : "memory");
8030024a:	0d 00 80 04 	dsync 
    Ifx_Ssw_MTCR(CPU_PSW, IFX_CFG_SSW_PSW_DEFAULT);
8030024e:	3b 00 98 30 	mov %d3,2432
80300252:	cd 43 e0 0f 	mtcr $psw,%d3
    if (watchdog->CON0.B.LCK)
80300256:	54 23       	ld.w %d3,[%a2]
80300258:	6f 13 c7 80 	jnz.t %d3,1,803003e6 <x+0x6>
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8030025c:	06 22       	sh %d2,2
                       ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8030025e:	91 30 00 2f 	movh.a %a2,61443
80300262:	19 24 18 96 	ld.w %d4,[%a2]25176 <f0036258 <bmhd_3_copy+0x40c34c58>>
80300266:	d9 22 18 96 	lea %a2,[%a2]25176 <f0036258 <bmhd_3_copy+0x40c34c58>>
8030026a:	b7 04 10 40 	insert %d4,%d4,0,0,16
        Ifx_Ssw_MTCR(CPU_PCON0, pcon0.U);
8030026e:	82 03       	mov %d3,0
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80300270:	a6 24       	or %d4,%d2
80300272:	8f 24 40 41 	or %d4,%d4,2
    watchdog->CON0.U = ((unsigned int)0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80300276:	74 24       	st.w [%a2],%d4
    watchdog->CON0.U;
80300278:	54 24       	ld.w %d4,[%a2]
8030027a:	cd c3 20 09 	mtcr $pcon0,%d3
    __asm__ volatile ("isync" : : : "memory");
8030027e:	0d 00 c0 04 	isync 
        Ifx_Ssw_MTCR(CPU_DCON0, dcon0.U);
80300282:	cd 03 04 09 	mtcr $dcon0,%d3
80300286:	0d 00 c0 04 	isync 
    Ifx_Ssw_MTCR(CPU_BTV, (unsigned int)__TRAPTAB(1));
8030028a:	91 00 03 38 	movh.a %a3,32816
8030028e:	80 33       	mov.d %d3,%a3
80300290:	1b 03 00 30 	addi %d3,%d3,0
80300294:	cd 43 e2 0f 	mtcr $btv,%d3
    Ifx_Ssw_MTCR(CPU_BIV, (unsigned int)__INTTAB(1));
80300298:	91 00 06 38 	movh.a %a3,32864
8030029c:	80 33       	mov.d %d3,%a3
8030029e:	1b 03 00 3c 	addi %d3,%d3,-16384
803002a2:	cd 03 e2 0f 	mtcr $biv,%d3
    Ifx_Ssw_MTCR(CPU_ISP, (unsigned int)__ISTACK(1));
803002a6:	91 40 00 36 	movh.a %a3,24580
803002aa:	80 33       	mov.d %d3,%a3
803002ac:	1b 03 b0 39 	addi %d3,%d3,-25856
803002b0:	cd 83 e2 0f 	mtcr $isp,%d3
    if (watchdog->CON0.B.LCK)
803002b4:	54 23       	ld.w %d3,[%a2]
803002b6:	6f 13 09 00 	jz.t %d3,1,803002c8 <__Core1_start+0x9c>
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
803002ba:	54 23       	ld.w %d3,[%a2]
803002bc:	b7 03 10 30 	insert %d3,%d3,0,0,16
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803002c0:	a6 23       	or %d3,%d2
803002c2:	8f 13 40 31 	or %d3,%d3,1
        watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
803002c6:	74 23       	st.w [%a2],%d3
                       ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
803002c8:	91 30 00 2f 	movh.a %a2,61443
803002cc:	19 23 18 96 	ld.w %d3,[%a2]25176 <f0036258 <bmhd_3_copy+0x40c34c58>>
803002d0:	d9 22 18 96 	lea %a2,[%a2]25176 <f0036258 <bmhd_3_copy+0x40c34c58>>
803002d4:	b7 03 10 30 	insert %d3,%d3,0,0,16
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803002d8:	a6 32       	or %d2,%d3
803002da:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
803002de:	74 22       	st.w [%a2],%d2
    watchdog->CON0.U;
803002e0:	54 22       	ld.w %d2,[%a2]
    Ifx_Ssw_setAddressReg(a0, __SDATA1(1));
803002e2:	91 10 00 07 	movh.a %a0,28673
803002e6:	d9 00 00 08 	lea %a0,[%a0]-32768 <70008000 <_SMALL_DATA_>>
    Ifx_Ssw_setAddressReg(a1, __SDATA2(1));
803002ea:	91 10 00 18 	movh.a %a1,32769
803002ee:	d9 11 00 08 	lea %a1,[%a1]-32768 <80008000 <_SMALL_DATA2_>>
    Ifx_Ssw_setAddressReg(a8, __SDATA3(1));
803002f2:	91 10 00 88 	movh.a %a8,32769
803002f6:	d9 88 00 08 	lea %a8,[%a8]-32768 <80008000 <_SMALL_DATA2_>>
    Ifx_Ssw_setAddressReg(a9, __SDATA4(1));
803002fa:	91 10 00 99 	movh.a %a9,36865
803002fe:	d9 99 00 08 	lea %a9,[%a9]-32768 <90008000 <_SMALL_DATA4_>>
    unsigned int numOfCsa     = (((unsigned int)csaEnd - (unsigned int)csaBegin) / 64U);
80300302:	91 40 00 36 	movh.a %a3,24580
80300306:	91 40 00 26 	movh.a %a2,24580
8030030a:	d9 33 c0 09 	lea %a3,[%a3]-25600 <60039c00 <__CSA1>>
8030030e:	d9 22 c0 0b 	lea %a2,[%a2]-17408 <6003bc00 <__CSA1_END>>
80300312:	01 32 20 20 	sub.a %a2,%a2,%a3
80300316:	80 22       	mov.d %d2,%a2
80300318:	8f a2 1f 60 	sh %d6,%d2,-6
    unsigned int *prvCsa      = csaBegin;
8030031c:	40 32       	mov.aa %a2,%a3
        if (k == (numOfCsa - 3U))
8030031e:	1b d6 ff 0f 	addi %d0,%d6,-3
    for (k = 0U; k < numOfCsa; k++)
80300322:	82 03       	mov %d3,0
    unsigned int *nxtCsa      = csaBegin;
80300324:	80 32       	mov.d %d2,%a3
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
80300326:	7b f0 00 70 	movh %d7,15
    for (k = 0U; k < numOfCsa; k++)
8030032a:	df 06 2d 00 	jeq %d6,0,80300384 <__Core1_start+0x158>
                      ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFFFFU << 6U)) >> 6U);
8030032e:	37 02 70 43 	extr.u %d4,%d2,6,16
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
80300332:	8f 42 1f 50 	sh %d5,%d2,-12
80300336:	26 75       	and %d5,%d7
80300338:	a6 54       	or %d4,%d5
        if (k == 0U)
8030033a:	df 03 14 00 	jeq %d3,0,80300362 <__Core1_start+0x136>
            *prvCsa = nxt_cxi_val;
8030033e:	74 24       	st.w [%a2],%d4
        if (k == (numOfCsa - 3U))
80300340:	5f 03 15 00 	jeq %d3,%d0,8030036a <__Core1_start+0x13e>
    for (k = 0U; k < numOfCsa; k++)
80300344:	c2 13       	add %d3,1
80300346:	60 22       	mov.a %a2,%d2
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
80300348:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
8030034c:	5f 36 17 00 	jeq %d6,%d3,8030037a <__Core1_start+0x14e>
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
80300350:	02 42       	mov %d2,%d4
                      ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFFFFU << 6U)) >> 6U);
80300352:	37 02 70 43 	extr.u %d4,%d2,6,16
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
80300356:	8f 42 1f 50 	sh %d5,%d2,-12
8030035a:	26 75       	and %d5,%d7
8030035c:	a6 54       	or %d4,%d5
        if (k == 0U)
8030035e:	df 03 f0 ff 	jne %d3,0,8030033e <__Core1_start+0x112>
            Ifx_Ssw_MTCR(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
80300362:	cd 84 e3 0f 	mtcr $fcx,%d4
        if (k == (numOfCsa - 3U))
80300366:	5f 03 ef ff 	jne %d3,%d0,80300344 <__Core1_start+0x118>
            Ifx_Ssw_MTCR(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
8030036a:	cd c4 e3 0f 	mtcr $lcx,%d4
    for (k = 0U; k < numOfCsa; k++)
8030036e:	c2 13       	add %d3,1
80300370:	60 22       	mov.a %a2,%d2
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
80300372:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
80300376:	5f 36 ed ff 	jne %d6,%d3,80300350 <__Core1_start+0x124>
8030037a:	1b f6 ff 2f 	addi %d2,%d6,-1
8030037e:	06 62       	sh %d2,6
80300380:	01 32 00 26 	addsc.a %a2,%a3,%d2,0
    *prvCsa = 0U;                       /* Store null pointer in last CSA (= very first time!) */
80300384:	82 02       	mov %d2,0
80300386:	74 22       	st.w [%a2],%d2
    __asm__ volatile ("dsync" : : : "memory");
80300388:	0d 00 80 04 	dsync 
    __asm__ volatile ("isync" : : : "memory");
8030038c:	0d 00 c0 04 	isync 
    stmCount = (unsigned int)(Ifx_Ssw_getStmFrequency() * IFX_CFG_SSW_STARTCPU_WAIT_TIME_IN_SECONDS);
80300390:	6d e8 ec 0c 	call 80001d68 <Ifx_Ssw_getStmFrequency>
80300394:	02 24       	mov %d4,%d2
80300396:	6d e8 bf 0e 	call 80002114 <__extendsfdf2>
8030039a:	0b 23 10 48 	mov %e4,%d3,%d2
8030039e:	7b c0 b1 6e 	movh %d6,60188
803003a2:	7b a0 f1 73 	movh %d7,16154
803003a6:	1b d6 32 64 	addi %d6,%d6,17197
803003aa:	1b 27 6e 73 	addi %d7,%d7,14050
803003ae:	6d e8 1b 10 	call 800023e4 <__muldf3>
803003b2:	0b 23 10 48 	mov %e4,%d3,%d2
803003b6:	6d e8 93 0e 	call 800020dc <__fixunsdfsi>
    while ((unsigned int)(STM0_TIM0.U - stmCountBegin) < stmCount)
803003ba:	85 f3 10 01 	ld.w %d3,f0001010 <bmhd_3_copy+0x40bffa10>
803003be:	a2 83       	sub %d3,%d8
803003c0:	3f 23 fd ff 	jlt.u %d3,%d2,803003ba <__Core1_start+0x18e>
    (void)Ifx_Ssw_startCore(&MODULE_CPU2, (unsigned int)__START(2));       /*The status returned by function call is ignored */
803003c4:	91 00 03 2a 	movh.a %a2,41008
803003c8:	80 22       	mov.d %d2,%a2
803003ca:	1b 02 22 40 	addi %d4,%d2,544
803003ce:	91 40 88 4f 	movh.a %a4,63620
803003d2:	6d e8 ad 0c 	call 80001d2c <Ifx_Ssw_startCore>
    __asm__ volatile ("ji %0" ::"a" (fun));
803003d6:	91 00 03 28 	movh.a %a2,32816
803003da:	d9 22 3a f0 	lea %a2,[%a2]1018 <803003fa <core1_main>>
803003de:	dc 02       	ji %a2

803003e0 <x>:
    __asm("x: loopu\t x");
803003e0:	fd 00 00 80 	loopu 803003e0 <x>
}
803003e4:	00 90       	ret 
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
803003e6:	54 23       	ld.w %d3,[%a2]
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803003e8:	06 22       	sh %d2,2
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
803003ea:	b7 03 10 30 	insert %d3,%d3,0,0,16
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803003ee:	a6 23       	or %d3,%d2
803003f0:	8f 13 40 31 	or %d3,%d3,1
        watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
803003f4:	74 23       	st.w [%a2],%d3
803003f6:	1d ff 34 ff 	j 8030025e <__Core1_start+0x32>

803003fa <core1_main>:
#include "IfxScuWdt.h"

extern IfxCpu_syncEvent g_cpuSyncEvent;

void core1_main(void)
{
803003fa:	40 ae       	mov.aa %a14,%sp
803003fc:	0d 00 00 03 	enable 
    IfxCpu_enableInterrupts();
    
    /* !!WATCHDOG1 IS DISABLED HERE!!
     * Enable the watchdog and service it periodically if it is required
     */
    IfxScuWdt_disableCpuWatchdog(IfxScuWdt_getCpuWatchdogPassword());
80300400:	6d e8 1a 0a 	call 80001834 <IfxScuWdt_getCpuWatchdogPassword>
80300404:	02 24       	mov %d4,%d2
80300406:	6d e8 89 09 	call 80001718 <IfxScuWdt_disableCpuWatchdog>
    
    /* Wait for CPU sync event */
    IfxCpu_emitEvent(&g_cpuSyncEvent);
8030040a:	91 00 00 c7 	movh.a %a12,28672
8030040e:	d9 cc 08 00 	lea %a12,[%a12]8 <70000008 <g_cpuSyncEvent>>
80300412:	40 c4       	mov.aa %a4,%a12
80300414:	6d e8 7b 0b 	call 80001b0a <IfxCpu_emitEvent>
    IfxCpu_waitEvent(&g_cpuSyncEvent, 1);
80300418:	82 14       	mov %d4,1
8030041a:	40 c4       	mov.aa %a4,%a12
8030041c:	6d e8 36 0b 	call 80001a88 <IfxCpu_waitEvent>
    
    while(1)
80300420:	1d 00 00 00 	j 80300420 <core1_main+0x26>

Disassembly of section .CPU2.text:

80300424 <__Core2_start>:
    password  = watchdog->CON0.B.PW;
80300424:	91 30 00 2f 	movh.a %a2,61443
80300428:	d9 22 24 96 	lea %a2,[%a2]25188 <f0036264 <bmhd_3_copy+0x40c34c64>>
    unsigned int   stmCountBegin = STM0_TIM0.U;     /* it is necessary to get this value to have minimum 100uS delay in subsequent CPU start */
8030042c:	85 f8 10 01 	ld.w %d8,f0001010 <bmhd_3_copy+0x40bffa10>
80300430:	54 22       	ld.w %d2,[%a2]
80300432:	37 02 6e 21 	extr.u %d2,%d2,2,14
    password ^= IFX_SSW_WDT_PASSWORD_INVERT_MSK;
80300436:	8f f2 83 21 	xor %d2,%d2,63
    Ifx_Ssw_setAddressReg(sp, __USTACK(2));
8030043a:	91 10 00 a5 	movh.a %sp,20481
8030043e:	d9 aa 40 85 	lea %sp,[%sp]22016 <50015600 <__USTACK2>>
    __asm__ volatile ("dsync" : : : "memory");
80300442:	0d 00 80 04 	dsync 
    Ifx_Ssw_MTCR(CPU_PSW, IFX_CFG_SSW_PSW_DEFAULT);
80300446:	3b 00 98 30 	mov %d3,2432
8030044a:	cd 43 e0 0f 	mtcr $psw,%d3
    if (watchdog->CON0.B.LCK)
8030044e:	54 23       	ld.w %d3,[%a2]
80300450:	6f 13 be 80 	jnz.t %d3,1,803005cc <x+0x6>
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80300454:	06 22       	sh %d2,2
                       ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80300456:	91 30 00 2f 	movh.a %a2,61443
8030045a:	19 24 24 96 	ld.w %d4,[%a2]25188 <f0036264 <bmhd_3_copy+0x40c34c64>>
8030045e:	d9 22 24 96 	lea %a2,[%a2]25188 <f0036264 <bmhd_3_copy+0x40c34c64>>
80300462:	b7 04 10 40 	insert %d4,%d4,0,0,16
        Ifx_Ssw_MTCR(CPU_PCON0, pcon0.U);
80300466:	82 03       	mov %d3,0
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80300468:	a6 24       	or %d4,%d2
8030046a:	8f 24 40 41 	or %d4,%d4,2
    watchdog->CON0.U = ((unsigned int)0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8030046e:	74 24       	st.w [%a2],%d4
    watchdog->CON0.U;
80300470:	54 24       	ld.w %d4,[%a2]
80300472:	cd c3 20 09 	mtcr $pcon0,%d3
    __asm__ volatile ("isync" : : : "memory");
80300476:	0d 00 c0 04 	isync 
        Ifx_Ssw_MTCR(CPU_DCON0, dcon0.U);
8030047a:	cd 03 04 09 	mtcr $dcon0,%d3
8030047e:	0d 00 c0 04 	isync 
    Ifx_Ssw_MTCR(CPU_BTV, (unsigned int)__TRAPTAB(2));
80300482:	91 00 03 38 	movh.a %a3,32816
80300486:	80 33       	mov.d %d3,%a3
80300488:	1b 03 10 30 	addi %d3,%d3,256
8030048c:	cd 43 e2 0f 	mtcr $btv,%d3
    Ifx_Ssw_MTCR(CPU_BIV, (unsigned int)__INTTAB(2));
80300490:	91 00 06 38 	movh.a %a3,32864
80300494:	80 33       	mov.d %d3,%a3
80300496:	1b 03 00 3e 	addi %d3,%d3,-8192
8030049a:	cd 03 e2 0f 	mtcr $biv,%d3
    Ifx_Ssw_MTCR(CPU_ISP, (unsigned int)__ISTACK(2));
8030049e:	91 10 00 35 	movh.a %a3,20481
803004a2:	80 33       	mov.d %d3,%a3
803004a4:	1b 03 b0 35 	addi %d3,%d3,23296
803004a8:	cd 83 e2 0f 	mtcr $isp,%d3
    if (watchdog->CON0.B.LCK)
803004ac:	54 23       	ld.w %d3,[%a2]
803004ae:	6f 13 09 00 	jz.t %d3,1,803004c0 <__Core2_start+0x9c>
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
803004b2:	54 23       	ld.w %d3,[%a2]
803004b4:	b7 03 10 30 	insert %d3,%d3,0,0,16
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803004b8:	a6 23       	or %d3,%d2
803004ba:	8f 13 40 31 	or %d3,%d3,1
        watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
803004be:	74 23       	st.w [%a2],%d3
                       ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
803004c0:	91 30 00 2f 	movh.a %a2,61443
803004c4:	19 23 24 96 	ld.w %d3,[%a2]25188 <f0036264 <bmhd_3_copy+0x40c34c64>>
803004c8:	d9 22 24 96 	lea %a2,[%a2]25188 <f0036264 <bmhd_3_copy+0x40c34c64>>
803004cc:	b7 03 10 30 	insert %d3,%d3,0,0,16
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803004d0:	a6 32       	or %d2,%d3
803004d2:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
803004d6:	74 22       	st.w [%a2],%d2
    watchdog->CON0.U;
803004d8:	54 22       	ld.w %d2,[%a2]
    Ifx_Ssw_setAddressReg(a0, __SDATA1(2));
803004da:	91 10 00 07 	movh.a %a0,28673
803004de:	d9 00 00 08 	lea %a0,[%a0]-32768 <70008000 <_SMALL_DATA_>>
    Ifx_Ssw_setAddressReg(a1, __SDATA2(2));
803004e2:	91 10 00 18 	movh.a %a1,32769
803004e6:	d9 11 00 08 	lea %a1,[%a1]-32768 <80008000 <_SMALL_DATA2_>>
    Ifx_Ssw_setAddressReg(a8, __SDATA3(2));
803004ea:	91 10 00 88 	movh.a %a8,32769
803004ee:	d9 88 00 08 	lea %a8,[%a8]-32768 <80008000 <_SMALL_DATA2_>>
    Ifx_Ssw_setAddressReg(a9, __SDATA4(2));
803004f2:	91 10 00 99 	movh.a %a9,36865
803004f6:	d9 99 00 08 	lea %a9,[%a9]-32768 <90008000 <_SMALL_DATA4_>>
    unsigned int numOfCsa     = (((unsigned int)csaEnd - (unsigned int)csaBegin) / 64U);
803004fa:	91 10 00 35 	movh.a %a3,20481
803004fe:	91 10 00 25 	movh.a %a2,20481
80300502:	d9 33 c0 05 	lea %a3,[%a3]23552 <50015c00 <__CSA2>>
80300506:	d9 22 c0 07 	lea %a2,[%a2]31744 <50017c00 <__CSA2_END>>
8030050a:	01 32 20 20 	sub.a %a2,%a2,%a3
8030050e:	80 22       	mov.d %d2,%a2
80300510:	8f a2 1f 60 	sh %d6,%d2,-6
    unsigned int *prvCsa      = csaBegin;
80300514:	40 32       	mov.aa %a2,%a3
        if (k == (numOfCsa - 3U))
80300516:	1b d6 ff 0f 	addi %d0,%d6,-3
    for (k = 0U; k < numOfCsa; k++)
8030051a:	82 03       	mov %d3,0
    unsigned int *nxtCsa      = csaBegin;
8030051c:	80 32       	mov.d %d2,%a3
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
8030051e:	7b f0 00 70 	movh %d7,15
    for (k = 0U; k < numOfCsa; k++)
80300522:	df 06 2d 00 	jeq %d6,0,8030057c <__Core2_start+0x158>
                      ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFFFFU << 6U)) >> 6U);
80300526:	37 02 70 43 	extr.u %d4,%d2,6,16
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
8030052a:	8f 42 1f 50 	sh %d5,%d2,-12
8030052e:	26 75       	and %d5,%d7
80300530:	a6 54       	or %d4,%d5
        if (k == 0U)
80300532:	df 03 14 00 	jeq %d3,0,8030055a <__Core2_start+0x136>
            *prvCsa = nxt_cxi_val;
80300536:	74 24       	st.w [%a2],%d4
        if (k == (numOfCsa - 3U))
80300538:	5f 03 15 00 	jeq %d3,%d0,80300562 <__Core2_start+0x13e>
    for (k = 0U; k < numOfCsa; k++)
8030053c:	c2 13       	add %d3,1
8030053e:	60 22       	mov.a %a2,%d2
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
80300540:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
80300544:	5f 36 17 00 	jeq %d6,%d3,80300572 <__Core2_start+0x14e>
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
80300548:	02 42       	mov %d2,%d4
                      ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFFFFU << 6U)) >> 6U);
8030054a:	37 02 70 43 	extr.u %d4,%d2,6,16
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
8030054e:	8f 42 1f 50 	sh %d5,%d2,-12
80300552:	26 75       	and %d5,%d7
80300554:	a6 54       	or %d4,%d5
        if (k == 0U)
80300556:	df 03 f0 ff 	jne %d3,0,80300536 <__Core2_start+0x112>
            Ifx_Ssw_MTCR(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
8030055a:	cd 84 e3 0f 	mtcr $fcx,%d4
        if (k == (numOfCsa - 3U))
8030055e:	5f 03 ef ff 	jne %d3,%d0,8030053c <__Core2_start+0x118>
            Ifx_Ssw_MTCR(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
80300562:	cd c4 e3 0f 	mtcr $lcx,%d4
    for (k = 0U; k < numOfCsa; k++)
80300566:	c2 13       	add %d3,1
80300568:	60 22       	mov.a %a2,%d2
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
8030056a:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
8030056e:	5f 36 ed ff 	jne %d6,%d3,80300548 <__Core2_start+0x124>
80300572:	1b f6 ff 2f 	addi %d2,%d6,-1
80300576:	06 62       	sh %d2,6
80300578:	01 32 00 26 	addsc.a %a2,%a3,%d2,0
    *prvCsa = 0U;                       /* Store null pointer in last CSA (= very first time!) */
8030057c:	82 02       	mov %d2,0
8030057e:	74 22       	st.w [%a2],%d2
    __asm__ volatile ("dsync" : : : "memory");
80300580:	0d 00 80 04 	dsync 
    __asm__ volatile ("isync" : : : "memory");
80300584:	0d 00 c0 04 	isync 
    stmCount = (unsigned int)(Ifx_Ssw_getStmFrequency() * IFX_CFG_SSW_STARTCPU_WAIT_TIME_IN_SECONDS);
80300588:	6d e8 f0 0b 	call 80001d68 <Ifx_Ssw_getStmFrequency>
8030058c:	02 24       	mov %d4,%d2
8030058e:	6d e8 c3 0d 	call 80002114 <__extendsfdf2>
80300592:	0b 23 10 48 	mov %e4,%d3,%d2
80300596:	7b c0 b1 6e 	movh %d6,60188
8030059a:	7b a0 f1 73 	movh %d7,16154
8030059e:	1b d6 32 64 	addi %d6,%d6,17197
803005a2:	1b 27 6e 73 	addi %d7,%d7,14050
803005a6:	6d e8 1f 0f 	call 800023e4 <__muldf3>
803005aa:	0b 23 10 48 	mov %e4,%d3,%d2
803005ae:	6d e8 97 0d 	call 800020dc <__fixunsdfsi>
    while ((unsigned int)(STM0_TIM0.U - stmCountBegin) < stmCount)
803005b2:	85 f3 10 01 	ld.w %d3,f0001010 <bmhd_3_copy+0x40bffa10>
803005b6:	a2 83       	sub %d3,%d8
803005b8:	3f 23 fd ff 	jlt.u %d3,%d2,803005b2 <__Core2_start+0x18e>
    __asm__ volatile ("ji %0" ::"a" (fun));
803005bc:	91 00 03 28 	movh.a %a2,32816
803005c0:	d9 22 60 70 	lea %a2,[%a2]1504 <803005e0 <core2_main>>
803005c4:	dc 02       	ji %a2

803005c6 <x>:
    __asm("x: loopu\t x");
803005c6:	fd 00 00 80 	loopu 803005c6 <x>
}
803005ca:	00 90       	ret 
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
803005cc:	54 23       	ld.w %d3,[%a2]
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803005ce:	06 22       	sh %d2,2
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
803005d0:	b7 03 10 30 	insert %d3,%d3,0,0,16
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803005d4:	a6 23       	or %d3,%d2
803005d6:	8f 13 40 31 	or %d3,%d3,1
        watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
803005da:	74 23       	st.w [%a2],%d3
803005dc:	1d ff 3d ff 	j 80300456 <__Core2_start+0x32>

803005e0 <core2_main>:
#include "IfxScuWdt.h"

extern IfxCpu_syncEvent g_cpuSyncEvent;

void core2_main(void)
{
803005e0:	40 ae       	mov.aa %a14,%sp
803005e2:	0d 00 00 03 	enable 
    IfxCpu_enableInterrupts();
    
    /* !!WATCHDOG2 IS DISABLED HERE!!
     * Enable the watchdog and service it periodically if it is required
     */
    IfxScuWdt_disableCpuWatchdog(IfxScuWdt_getCpuWatchdogPassword());
803005e6:	6d e8 27 09 	call 80001834 <IfxScuWdt_getCpuWatchdogPassword>
803005ea:	02 24       	mov %d4,%d2
803005ec:	6d e8 96 08 	call 80001718 <IfxScuWdt_disableCpuWatchdog>
    
    /* Wait for CPU sync event */
    IfxCpu_emitEvent(&g_cpuSyncEvent);
803005f0:	91 00 00 c7 	movh.a %a12,28672
803005f4:	d9 cc 08 00 	lea %a12,[%a12]8 <70000008 <g_cpuSyncEvent>>
803005f8:	40 c4       	mov.aa %a4,%a12
803005fa:	6d e8 88 0a 	call 80001b0a <IfxCpu_emitEvent>
    IfxCpu_waitEvent(&g_cpuSyncEvent, 1);
803005fe:	82 14       	mov %d4,1
80300600:	40 c4       	mov.aa %a4,%a12
80300602:	6d e8 43 0a 	call 80001a88 <IfxCpu_waitEvent>
    
    while(1)
80300606:	1d 00 00 00 	j 80300606 <core2_main+0x26>

Disassembly of section .text:

80000a50 <deregister_tm_clones>:
80000a50:	7b 00 00 27 	movh %d2,28672
80000a54:	1b 02 00 20 	addi %d2,%d2,0
80000a58:	91 00 00 47 	movh.a %a4,28672
80000a5c:	60 22       	mov.a %a2,%d2
80000a5e:	d9 44 00 00 	lea %a4,[%a4]0 <70000000 <__TMC_END__>>
80000a62:	7d 42 0a 00 	jeq.a %a2,%a4,80000a76 <deregister_tm_clones+0x26>
80000a66:	91 00 00 20 	movh.a %a2,0
80000a6a:	d9 22 00 00 	lea %a2,[%a2]0 <0 <__TRICORE_DERIVATE_MEMORY_MAP__-0x380>>
80000a6e:	bd 02 04 00 	jz.a %a2,80000a76 <deregister_tm_clones+0x26>
80000a72:	2d 02 00 00 	calli %a2
80000a76:	00 90       	ret 

80000a78 <register_tm_clones>:
80000a78:	7b 00 00 27 	movh %d2,28672
80000a7c:	1b 02 00 20 	addi %d2,%d2,0
80000a80:	91 00 00 47 	movh.a %a4,28672
80000a84:	60 22       	mov.a %a2,%d2
80000a86:	d9 44 00 00 	lea %a4,[%a4]0 <70000000 <__TMC_END__>>
80000a8a:	01 42 20 20 	sub.a %a2,%a2,%a4
80000a8e:	80 22       	mov.d %d2,%a2
80000a90:	8f e2 3f 30 	sha %d3,%d2,-2
80000a94:	8f 12 1e 20 	sh %d2,%d2,-31
80000a98:	42 32       	add %d2,%d3
80000a9a:	8f f2 3f 40 	sha %d4,%d2,-1
80000a9e:	df 04 0a 00 	jeq %d4,0,80000ab2 <register_tm_clones+0x3a>
80000aa2:	91 00 00 20 	movh.a %a2,0
80000aa6:	d9 22 00 00 	lea %a2,[%a2]0 <0 <__TRICORE_DERIVATE_MEMORY_MAP__-0x380>>
80000aaa:	bd 02 04 00 	jz.a %a2,80000ab2 <register_tm_clones+0x3a>
80000aae:	2d 02 00 00 	calli %a2
80000ab2:	00 90       	ret 

80000ab4 <__do_global_dtors_aux>:
80000ab4:	91 00 00 e7 	movh.a %a14,28672
80000ab8:	39 e2 00 00 	ld.bu %d2,[%a14]0 <70000000 <__TMC_END__>>
80000abc:	df 02 2d 80 	jne %d2,0,80000b16 <__do_global_dtors_aux+0x62>
80000ac0:	91 00 00 38 	movh.a %a3,32768
80000ac4:	91 00 00 28 	movh.a %a2,32768
80000ac8:	d9 33 98 b2 	lea %a3,[%a3]10968 <80002ad8 <__DTOR_END__>>
80000acc:	d9 22 8c b2 	lea %a2,[%a2]10956 <80002acc <__DTOR_LIST__>>
80000ad0:	01 23 20 20 	sub.a %a2,%a3,%a2
80000ad4:	80 22       	mov.d %d2,%a2
80000ad6:	86 e2       	sha %d2,-2
80000ad8:	1b f2 ff 8f 	addi %d8,%d2,-1
80000adc:	91 00 00 c7 	movh.a %a12,28672
80000ae0:	7b 00 00 28 	movh %d2,32768
80000ae4:	1b c2 ac 22 	addi %d2,%d2,10956
80000ae8:	60 2d       	mov.a %a13,%d2
80000aea:	19 c2 04 00 	ld.w %d2,[%a12]4 <70000004 <dtor_idx.0>>
80000aee:	7f 82 0f 80 	jge.u %d2,%d8,80000b0c <__do_global_dtors_aux+0x58>
80000af2:	d9 cc 04 00 	lea %a12,[%a12]4 <70000004 <dtor_idx.0>>
80000af6:	c2 12       	add %d2,1
80000af8:	74 c2       	st.w [%a12],%d2
80000afa:	06 22       	sh %d2,2
80000afc:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
80000b00:	d4 22       	ld.a %a2,[%a2]
80000b02:	2d 02 00 00 	calli %a2
80000b06:	54 c2       	ld.w %d2,[%a12]
80000b08:	3f 82 f7 ff 	jlt.u %d2,%d8,80000af6 <__do_global_dtors_aux+0x42>
80000b0c:	6d ff a2 ff 	call 80000a50 <deregister_tm_clones>
80000b10:	82 12       	mov %d2,1
80000b12:	e9 e2 00 00 	st.b [%a14]0 <70000000 <__TMC_END__>>,%d2
80000b16:	00 90       	ret 

80000b18 <frame_dummy>:
80000b18:	6d ff b0 ff 	call 80000a78 <register_tm_clones>
80000b1c:	00 90       	ret 

80000b1e <IfxScuCcu_calRGainParameters>:
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxScuCcu_calRGainParameters(IfxScuCcu_ModulationAmplitude modamp, IfxScuCcu_RGain_Values *RGain_P)
{
80000b1e:	40 ae       	mov.aa %a14,%sp
    float32  mod_amp       = IfxScuCcu_MA_percent[modamp];
80000b20:	8f 24 00 20 	sh %d2,%d4,2
80000b24:	91 00 00 28 	movh.a %a2,32768
80000b28:	d9 22 3c 90 	lea %a2,[%a2]636 <8000027c <IfxScuCcu_MA_percent>>
80000b2c:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80000b30:	54 22       	ld.w %d2,[%a2]

IFX_INLINE float32 IfxScuCcu_getOscFrequency(void)
{
    float32 freq;

    if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fOsc1)
80000b32:	91 30 00 2f 	movh.a %a2,61443
80000b36:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <bmhd_3_copy+0x40c34a18>>
80000b3a:	54 23       	ld.w %d3,[%a2]
80000b3c:	8f 23 1e 30 	sh %d3,%d3,-30
80000b40:	df 03 15 00 	jeq %d3,0,80000b6a <IfxScuCcu_calRGainParameters+0x4c>
    {
        freq = IFXSCU_EVR_OSC_FREQUENCY;
    }
    else if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fOsc0)
80000b44:	54 23       	ld.w %d3,[%a2]
80000b46:	8f 23 1e 30 	sh %d3,%d3,-30
80000b4a:	df 13 47 00 	jeq %d3,1,80000bd8 <IfxScuCcu_calRGainParameters+0xba>
    {
        freq = (float32)IFX_CFG_SCU_XTAL_FREQUENCY;
    }
    else if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fSysclk)
80000b4e:	54 23       	ld.w %d3,[%a2]
80000b50:	8f 23 1e 30 	sh %d3,%d3,-30
80000b54:	df 23 05 00 	jeq %d3,2,80000b5e <IfxScuCcu_calRGainParameters+0x40>
        freq = IFX_CFG_SCU_SYSCLK_FREQUENCY;
    }
    else
    {
        /* Reserved values, this */
        freq = 0.0f;
80000b58:	82 04       	mov %d4,0
80000b5a:	1d 00 0c 00 	j 80000b72 <IfxScuCcu_calRGainParameters+0x54>
        freq = IFX_CFG_SCU_SYSCLK_FREQUENCY;
80000b5e:	7b 90 b9 44 	movh %d4,19353
80000b62:	1b 04 68 49 	addi %d4,%d4,-27008
80000b66:	1d 00 06 00 	j 80000b72 <IfxScuCcu_calRGainParameters+0x54>
        freq = IFXSCU_EVR_OSC_FREQUENCY;
80000b6a:	7b f0 cb 44 	movh %d4,19647
80000b6e:	1b 04 c2 4b 	addi %d4,%d4,-17376
    float32 *RGainNom_Temp = &(RGain_P->RGainNom);
    uint16  *RGain_Temp    = &(RGain_P->RGainHex);

    Ifx_SCU *scu           = &MODULE_SCU;
    float32  Fosc_Hz       = IfxScuCcu_getOscFrequency();
    float32  Fdco_hz       = (Fosc_Hz * (scu->SYSPLLCON0.B.NDIV + 1)) / (scu->SYSPLLCON0.B.PDIV + 1);
80000b72:	91 30 00 2f 	movh.a %a2,61443
80000b76:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <bmhd_3_copy+0x40c34a00>>
80000b7a:	d9 23 18 00 	lea %a3,[%a2]24 <f0030018 <bmhd_3_copy+0x40c2ea18>>
80000b7e:	19 23 18 00 	ld.w %d3,[%a2]24 <f0030018 <bmhd_3_copy+0x40c2ea18>>
80000b82:	37 03 e7 34 	extr.u %d3,%d3,9,7
80000b86:	c2 13       	add %d3,1
80000b88:	4b 03 41 31 	itof %d3,%d3
80000b8c:	4b 43 41 40 	mul.f %d4,%d3,%d4
80000b90:	54 33       	ld.w %d3,[%a3]
80000b92:	37 03 63 3c 	extr.u %d3,%d3,24,3
80000b96:	c2 13       	add %d3,1
80000b98:	4b 03 41 31 	itof %d3,%d3
80000b9c:	4b 34 51 40 	div.f %d4,%d4,%d3

    *RGainNom_Temp = IFXSCUCCU_GET_RGAIN_NOM(mod_amp, Fdco_hz);
80000ba0:	7b 80 2c 34 	movh %d3,17096
80000ba4:	4b 32 51 30 	div.f %d3,%d2,%d3
80000ba8:	6b 03 21 33 	add.f %d3,%d3,%d3
80000bac:	7b c0 a5 24 	movh %d2,19036
80000bb0:	1b 02 a0 2b 	addi %d2,%d2,-17920
80000bb4:	4b 24 51 20 	div.f %d2,%d4,%d2
80000bb8:	4b 23 41 20 	mul.f %d2,%d3,%d2
80000bbc:	74 42       	st.w [%a4],%d2
    *RGain_Temp    = IFXSCUCCU_GET_RGAIN_HEX(*RGainNom_Temp);
80000bbe:	7b 00 20 34 	movh %d3,16896
80000bc2:	4b 32 41 20 	mul.f %d2,%d2,%d3
80000bc6:	7b 00 f0 33 	movh %d3,16128
80000bca:	6b 03 21 22 	add.f %d2,%d2,%d3
80000bce:	4b 02 71 21 	ftouz %d2,%d2
80000bd2:	f9 42 04 00 	st.h [%a4]4,%d2
}
80000bd6:	00 90       	ret 
        freq = (float32)IFX_CFG_SCU_XTAL_FREQUENCY;
80000bd8:	7b 90 b9 44 	movh %d4,19353
80000bdc:	1b 04 68 49 	addi %d4,%d4,-27008
80000be0:	1d ff c9 ff 	j 80000b72 <IfxScuCcu_calRGainParameters+0x54>

80000be4 <IfxScuCcu_getPerPllFrequency1>:
    return mscFreq;
}


float32 IfxScuCcu_getPerPllFrequency1(void)
{
80000be4:	40 ae       	mov.aa %a14,%sp
    if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fOsc1)
80000be6:	91 30 00 2f 	movh.a %a2,61443
80000bea:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <bmhd_3_copy+0x40c34a18>>
80000bee:	54 22       	ld.w %d2,[%a2]
80000bf0:	8f 22 1e 20 	sh %d2,%d2,-30
80000bf4:	df 02 15 00 	jeq %d2,0,80000c1e <IfxScuCcu_getPerPllFrequency1+0x3a>
    else if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fOsc0)
80000bf8:	54 22       	ld.w %d2,[%a2]
80000bfa:	8f 22 1e 20 	sh %d2,%d2,-30
80000bfe:	df 12 32 00 	jeq %d2,1,80000c62 <IfxScuCcu_getPerPllFrequency1+0x7e>
    else if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fSysclk)
80000c02:	54 22       	ld.w %d2,[%a2]
80000c04:	8f 22 1e 20 	sh %d2,%d2,-30
80000c08:	df 22 05 00 	jeq %d2,2,80000c12 <IfxScuCcu_getPerPllFrequency1+0x2e>
        freq = 0.0f;
80000c0c:	82 04       	mov %d4,0
80000c0e:	1d 00 0c 00 	j 80000c26 <IfxScuCcu_getPerPllFrequency1+0x42>
        freq = IFX_CFG_SCU_SYSCLK_FREQUENCY;
80000c12:	7b 90 b9 44 	movh %d4,19353
80000c16:	1b 04 68 49 	addi %d4,%d4,-27008
80000c1a:	1d 00 06 00 	j 80000c26 <IfxScuCcu_getPerPllFrequency1+0x42>
        freq = IFXSCU_EVR_OSC_FREQUENCY;
80000c1e:	7b f0 cb 44 	movh %d4,19647
80000c22:	1b 04 c2 4b 	addi %d4,%d4,-17376
    Ifx_SCU *scu = &MODULE_SCU;
    float32  pllFrequency1;
    float32  oscFreq;
    oscFreq       = IfxScuCcu_getOscFrequency();

    pllFrequency1 = (oscFreq * (scu->PERPLLCON0.B.NDIV + 1)) / ((scu->PERPLLCON0.B.PDIV + 1) * (scu->PERPLLCON1.B.K2DIV + 1));
80000c26:	91 30 00 2f 	movh.a %a2,61443
80000c2a:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <bmhd_3_copy+0x40c34a00>>
80000c2e:	d9 23 28 00 	lea %a3,[%a2]40 <f0030028 <bmhd_3_copy+0x40c2ea28>>
80000c32:	19 22 28 00 	ld.w %d2,[%a2]40 <f0030028 <bmhd_3_copy+0x40c2ea28>>
80000c36:	37 02 e7 24 	extr.u %d2,%d2,9,7
80000c3a:	c2 12       	add %d2,1
80000c3c:	4b 02 41 21 	itof %d2,%d2
80000c40:	4b 42 41 40 	mul.f %d4,%d2,%d4
80000c44:	54 32       	ld.w %d2,[%a3]
80000c46:	37 02 63 2c 	extr.u %d2,%d2,24,3
80000c4a:	19 23 2c 00 	ld.w %d3,[%a2]44 <f003002c <bmhd_3_copy+0x40c2ea2c>>
80000c4e:	8f 73 00 31 	and %d3,%d3,7
80000c52:	c2 13       	add %d3,1
80000c54:	03 32 0a 23 	madd %d2,%d3,%d2,%d3
80000c58:	4b 02 41 21 	itof %d2,%d2

    return pllFrequency1;
}
80000c5c:	4b 24 51 20 	div.f %d2,%d4,%d2
80000c60:	00 90       	ret 
        freq = (float32)IFX_CFG_SCU_XTAL_FREQUENCY;
80000c62:	7b 90 b9 44 	movh %d4,19353
80000c66:	1b 04 68 49 	addi %d4,%d4,-27008
80000c6a:	1d ff de ff 	j 80000c26 <IfxScuCcu_getPerPllFrequency1+0x42>

80000c6e <IfxScuCcu_getPerPllFrequency2>:


float32 IfxScuCcu_getPerPllFrequency2(void)
{
80000c6e:	40 ae       	mov.aa %a14,%sp
    if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fOsc1)
80000c70:	91 30 00 2f 	movh.a %a2,61443
80000c74:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <bmhd_3_copy+0x40c34a18>>
80000c78:	54 22       	ld.w %d2,[%a2]
80000c7a:	8f 22 1e 20 	sh %d2,%d2,-30
80000c7e:	df 02 15 00 	jeq %d2,0,80000ca8 <IfxScuCcu_getPerPllFrequency2+0x3a>
    else if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fOsc0)
80000c82:	54 22       	ld.w %d2,[%a2]
80000c84:	8f 22 1e 20 	sh %d2,%d2,-30
80000c88:	df 12 40 00 	jeq %d2,1,80000d08 <IfxScuCcu_getPerPllFrequency2+0x9a>
    else if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fSysclk)
80000c8c:	54 22       	ld.w %d2,[%a2]
80000c8e:	8f 22 1e 20 	sh %d2,%d2,-30
80000c92:	df 22 05 00 	jeq %d2,2,80000c9c <IfxScuCcu_getPerPllFrequency2+0x2e>
        freq = 0.0f;
80000c96:	82 02       	mov %d2,0
80000c98:	1d 00 0c 00 	j 80000cb0 <IfxScuCcu_getPerPllFrequency2+0x42>
        freq = IFX_CFG_SCU_SYSCLK_FREQUENCY;
80000c9c:	7b 90 b9 24 	movh %d2,19353
80000ca0:	1b 02 68 29 	addi %d2,%d2,-27008
80000ca4:	1d 00 06 00 	j 80000cb0 <IfxScuCcu_getPerPllFrequency2+0x42>
        freq = IFXSCU_EVR_OSC_FREQUENCY;
80000ca8:	7b f0 cb 24 	movh %d2,19647
80000cac:	1b 02 c2 2b 	addi %d2,%d2,-17376
    Ifx_SCU *scu = &MODULE_SCU;
    float32  pllFrequency2;
    float32  oscFreq;
    oscFreq = IfxScuCcu_getOscFrequency();

    if (!(scu->PERPLLCON0.B.DIVBY))
80000cb0:	91 30 00 2f 	movh.a %a2,61443
80000cb4:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <bmhd_3_copy+0x40c34a00>>
80000cb8:	19 23 28 00 	ld.w %d3,[%a2]40 <f0030028 <bmhd_3_copy+0x40c2ea28>>
80000cbc:	6f 03 2c 80 	jnz.t %d3,0,80000d14 <IfxScuCcu_getPerPllFrequency2+0xa6>
    {
        pllFrequency2 = (oscFreq * (scu->PERPLLCON0.B.NDIV + 1)) / ((scu->PERPLLCON0.B.PDIV + 1) * (scu->PERPLLCON1.B.K3DIV + 1) * 1.6f);
80000cc0:	91 30 00 2f 	movh.a %a2,61443
80000cc4:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <bmhd_3_copy+0x40c34a00>>
80000cc8:	d9 23 28 00 	lea %a3,[%a2]40 <f0030028 <bmhd_3_copy+0x40c2ea28>>
80000ccc:	19 23 28 00 	ld.w %d3,[%a2]40 <f0030028 <bmhd_3_copy+0x40c2ea28>>
80000cd0:	37 03 e7 34 	extr.u %d3,%d3,9,7
80000cd4:	c2 13       	add %d3,1
80000cd6:	4b 03 41 31 	itof %d3,%d3
80000cda:	4b 23 41 30 	mul.f %d3,%d3,%d2
80000cde:	54 34       	ld.w %d4,[%a3]
80000ce0:	37 04 63 4c 	extr.u %d4,%d4,24,3
80000ce4:	19 22 2c 00 	ld.w %d2,[%a2]44 <f003002c <bmhd_3_copy+0x40c2ea2c>>
80000ce8:	37 02 63 24 	extr.u %d2,%d2,8,3
80000cec:	c2 12       	add %d2,1
80000cee:	03 24 0a 22 	madd %d2,%d2,%d4,%d2
80000cf2:	4b 02 41 21 	itof %d2,%d2
80000cf6:	7b d0 fc 43 	movh %d4,16333
80000cfa:	1b d4 cc 4c 	addi %d4,%d4,-13107
80000cfe:	4b 42 41 20 	mul.f %d2,%d2,%d4
80000d02:	4b 23 51 20 	div.f %d2,%d3,%d2
80000d06:	00 90       	ret 
        freq = (float32)IFX_CFG_SCU_XTAL_FREQUENCY;
80000d08:	7b 90 b9 24 	movh %d2,19353
80000d0c:	1b 02 68 29 	addi %d2,%d2,-27008
80000d10:	1d ff d0 ff 	j 80000cb0 <IfxScuCcu_getPerPllFrequency2+0x42>
    }
    else
    {
        pllFrequency2 = (oscFreq * (scu->PERPLLCON0.B.NDIV + 1)) / ((scu->PERPLLCON0.B.PDIV + 1) * (scu->PERPLLCON1.B.K3DIV + 1) * 2);
80000d14:	91 30 00 2f 	movh.a %a2,61443
80000d18:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <bmhd_3_copy+0x40c34a00>>
80000d1c:	d9 23 28 00 	lea %a3,[%a2]40 <f0030028 <bmhd_3_copy+0x40c2ea28>>
80000d20:	19 23 28 00 	ld.w %d3,[%a2]40 <f0030028 <bmhd_3_copy+0x40c2ea28>>
80000d24:	37 03 e7 34 	extr.u %d3,%d3,9,7
80000d28:	c2 13       	add %d3,1
80000d2a:	4b 03 41 31 	itof %d3,%d3
80000d2e:	4b 23 41 30 	mul.f %d3,%d3,%d2
80000d32:	54 34       	ld.w %d4,[%a3]
80000d34:	37 04 63 4c 	extr.u %d4,%d4,24,3
80000d38:	19 22 2c 00 	ld.w %d2,[%a2]44 <f003002c <bmhd_3_copy+0x40c2ea2c>>
80000d3c:	37 02 63 24 	extr.u %d2,%d2,8,3
80000d40:	c2 12       	add %d2,1
80000d42:	03 24 0a 22 	madd %d2,%d2,%d4,%d2
80000d46:	06 12       	sh %d2,1
80000d48:	4b 02 41 21 	itof %d2,%d2
80000d4c:	4b 23 51 20 	div.f %d2,%d3,%d2
    }

    return pllFrequency2;
}
80000d50:	00 90       	ret 

80000d52 <IfxScuCcu_getPllFrequency>:


float32 IfxScuCcu_getPllFrequency(void)
{
80000d52:	40 ae       	mov.aa %a14,%sp
    if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fOsc1)
80000d54:	91 30 00 2f 	movh.a %a2,61443
80000d58:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <bmhd_3_copy+0x40c34a18>>
80000d5c:	54 22       	ld.w %d2,[%a2]
80000d5e:	8f 22 1e 20 	sh %d2,%d2,-30
80000d62:	df 02 15 00 	jeq %d2,0,80000d8c <IfxScuCcu_getPllFrequency+0x3a>
    else if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fOsc0)
80000d66:	54 22       	ld.w %d2,[%a2]
80000d68:	8f 22 1e 20 	sh %d2,%d2,-30
80000d6c:	df 12 31 00 	jeq %d2,1,80000dce <IfxScuCcu_getPllFrequency+0x7c>
    else if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fSysclk)
80000d70:	54 22       	ld.w %d2,[%a2]
80000d72:	8f 22 1e 20 	sh %d2,%d2,-30
80000d76:	df 22 05 00 	jeq %d2,2,80000d80 <IfxScuCcu_getPllFrequency+0x2e>
        freq = 0.0f;
80000d7a:	82 04       	mov %d4,0
80000d7c:	1d 00 0c 00 	j 80000d94 <IfxScuCcu_getPllFrequency+0x42>
        freq = IFX_CFG_SCU_SYSCLK_FREQUENCY;
80000d80:	7b 90 b9 44 	movh %d4,19353
80000d84:	1b 04 68 49 	addi %d4,%d4,-27008
80000d88:	1d 00 06 00 	j 80000d94 <IfxScuCcu_getPllFrequency+0x42>
        freq = IFXSCU_EVR_OSC_FREQUENCY;
80000d8c:	7b f0 cb 44 	movh %d4,19647
80000d90:	1b 04 c2 4b 	addi %d4,%d4,-17376
    Ifx_SCU *scu = &MODULE_SCU;
    float32  oscFreq;
    float32  freq;

    oscFreq = IfxScuCcu_getOscFrequency();
    freq    = (oscFreq * (scu->SYSPLLCON0.B.NDIV + 1)) / ((scu->SYSPLLCON1.B.K2DIV + 1) * (scu->SYSPLLCON0.B.PDIV + 1));
80000d94:	91 30 00 2f 	movh.a %a2,61443
80000d98:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <bmhd_3_copy+0x40c34a00>>
80000d9c:	19 22 18 00 	ld.w %d2,[%a2]24 <f0030018 <bmhd_3_copy+0x40c2ea18>>
80000da0:	37 02 e7 24 	extr.u %d2,%d2,9,7
80000da4:	c2 12       	add %d2,1
80000da6:	4b 02 41 21 	itof %d2,%d2
80000daa:	4b 42 41 40 	mul.f %d4,%d2,%d4
80000dae:	19 22 1c 00 	ld.w %d2,[%a2]28 <f003001c <bmhd_3_copy+0x40c2ea1c>>
80000db2:	8f 72 00 21 	and %d2,%d2,7
80000db6:	19 23 18 00 	ld.w %d3,[%a2]24 <f0030018 <bmhd_3_copy+0x40c2ea18>>
80000dba:	37 03 63 3c 	extr.u %d3,%d3,24,3
80000dbe:	c2 13       	add %d3,1
80000dc0:	03 32 0a 23 	madd %d2,%d3,%d2,%d3
80000dc4:	4b 02 41 21 	itof %d2,%d2
    return freq;
}
80000dc8:	4b 24 51 20 	div.f %d2,%d4,%d2
80000dcc:	00 90       	ret 
        freq = (float32)IFX_CFG_SCU_XTAL_FREQUENCY;
80000dce:	7b 90 b9 44 	movh %d4,19353
80000dd2:	1b 04 68 49 	addi %d4,%d4,-27008
80000dd6:	1d ff df ff 	j 80000d94 <IfxScuCcu_getPllFrequency+0x42>

80000dda <IfxScuCcu_getSourceFrequency>:
    return freq;
}


float32 IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource fsource)
{
80000dda:	40 ae       	mov.aa %a14,%sp
    float32 sourcefreq;

    switch (SCU_CCUCON0.B.CLKSEL)
80000ddc:	91 30 00 2f 	movh.a %a2,61443
80000de0:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <bmhd_3_copy+0x40c34a30>>
80000de4:	54 22       	ld.w %d2,[%a2]
80000de6:	37 02 62 2e 	extr.u %d2,%d2,28,2
80000dea:	df 02 20 00 	jeq %d2,0,80000e2a <IfxScuCcu_getSourceFrequency+0x50>
80000dee:	df 12 23 80 	jne %d2,1,80000e34 <IfxScuCcu_getSourceFrequency+0x5a>
    case IfxScu_CCUCON0_CLKSEL_fBack:
        sourcefreq = IfxScuCcu_getEvrFrequency();
        break;
    case IfxScu_CCUCON0_CLKSEL_fPll:

        switch (fsource)
80000df2:	df 14 0b 00 	jeq %d4,1,80000e08 <IfxScuCcu_getSourceFrequency+0x2e>
80000df6:	df 24 17 00 	jeq %d4,2,80000e24 <IfxScuCcu_getSourceFrequency+0x4a>
80000dfa:	df 04 04 00 	jeq %d4,0,80000e02 <IfxScuCcu_getSourceFrequency+0x28>
80000dfe:	82 02       	mov %d2,0
        sourcefreq = 0;
        break;
    }

    return sourcefreq;
}
80000e00:	00 90       	ret 
            sourcefreq = IfxScuCcu_getPllFrequency();
80000e02:	6d ff a8 ff 	call 80000d52 <IfxScuCcu_getPllFrequency>
            break;
80000e06:	00 90       	ret 
            sourcefreq = IfxScuCcu_getPerPllFrequency1();
80000e08:	6d ff ee fe 	call 80000be4 <IfxScuCcu_getPerPllFrequency1>
            if (SCU_CCUCON1.B.PLL1DIVDIS == 0)
80000e0c:	91 30 00 2f 	movh.a %a2,61443
80000e10:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <bmhd_3_copy+0x40c34a34>>
80000e14:	54 23       	ld.w %d3,[%a2]
80000e16:	6f 73 f5 ff 	jnz.t %d3,7,80000e00 <IfxScuCcu_getSourceFrequency+0x26>
                sourcefreq = sourcefreq / 2.0f;
80000e1a:	7b 00 f0 33 	movh %d3,16128
80000e1e:	4b 32 41 20 	mul.f %d2,%d2,%d3
80000e22:	00 90       	ret 
            sourcefreq = IfxScuCcu_getPerPllFrequency2();
80000e24:	6d ff 25 ff 	call 80000c6e <IfxScuCcu_getPerPllFrequency2>
            break;
80000e28:	00 90       	ret 
    switch (SCU_CCUCON0.B.CLKSEL)
80000e2a:	7b f0 cb 24 	movh %d2,19647
80000e2e:	1b 02 c2 2b 	addi %d2,%d2,-17376
80000e32:	00 90       	ret 
        sourcefreq = 0;
80000e34:	82 02       	mov %d2,0
80000e36:	00 90       	ret 

80000e38 <IfxScuCcu_modulation_init>:
    *cfg = IfxScuCcu_defaultClockConfig;
}


void IfxScuCcu_modulation_init(const IfxScuCcu_Mod_Config *Mod_Cfg)
{
80000e38:	40 ae       	mov.aa %a14,%sp
80000e3a:	20 08       	sub.a %sp,8
    uint16                        endinitSfty_pw;
    IfxScuCcu_RGain_Values        RGain_P;
    IfxScuCcu_ModEn               mod_enable = Mod_Cfg->Mod_Enable;
80000e3c:	54 42       	ld.w %d2,[%a4]
    IfxScuCcu_ModulationAmplitude Mod_Amp    = Mod_Cfg->Mod_Amp;
80000e3e:	19 44 04 00 	ld.w %d4,[%a4]4

    Ifx_SCU_SYSPLLCON0            syspllcon0;
    Ifx_SCU_SYSPLLCON2            syspllcon2;

    if (mod_enable == IfxScuCcu_ModEn_enabled)  /* do this only if modulation is enabled */
80000e42:	df 12 03 00 	jeq %d2,1,80000e48 <IfxScuCcu_modulation_init+0x10>
        SCU_SYSPLLCON0.U   = syspllcon0.U;

        /* set the endinit protection again */
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
    }
}
80000e46:	00 90       	ret 
        IfxScuCcu_calRGainParameters(Mod_Amp, &RGain_P);
80000e48:	d9 e4 f8 ff 	lea %a4,[%a14]-8
80000e4c:	6d ff 69 fe 	call 80000b1e <IfxScuCcu_calRGainParameters>
        endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
80000e50:	6d 00 04 05 	call 80001858 <IfxScuWdt_getSafetyWatchdogPassword>
80000e54:	02 28       	mov %d8,%d2
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80000e56:	02 24       	mov %d4,%d2
80000e58:	6d 00 38 04 	call 800016c8 <IfxScuWdt_clearSafetyEndinit>
        syspllcon2.U        = SCU_SYSPLLCON2.U;
80000e5c:	91 30 00 2f 	movh.a %a2,61443
80000e60:	d9 22 20 06 	lea %a2,[%a2]24608 <f0036020 <bmhd_3_copy+0x40c34a20>>
80000e64:	54 22       	ld.w %d2,[%a2]
        syspllcon2.B.MODCFG = IFXSCUCCU_GET_MODCFG(RGain_P.RGainHex);
80000e66:	b9 e3 fc ff 	ld.hu %d3,[%a14]-4 <f0036020 <bmhd_3_copy+0x40c34a20>>
80000e6a:	3b 00 40 4f 	mov %d4,-3072
80000e6e:	a6 43       	or %d3,%d4
80000e70:	37 32 10 20 	insert %d2,%d2,%d3,0,16
        SCU_SYSPLLCON2.U    = syspllcon2.U;
80000e74:	74 22       	st.w [%a2],%d2
        syspllcon0.U       = SCU_SYSPLLCON0.U;
80000e76:	91 30 00 2f 	movh.a %a2,61443
80000e7a:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <bmhd_3_copy+0x40c34a18>>
80000e7e:	54 22       	ld.w %d2,[%a2]
        syspllcon0.B.MODEN = (uint32)IfxScuCcu_ModEn_enabled;
80000e80:	b7 12 01 21 	insert %d2,%d2,1,2,1
        SCU_SYSPLLCON0.U   = syspllcon0.U;
80000e84:	74 22       	st.w [%a2],%d2
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80000e86:	02 84       	mov %d4,%d8
80000e88:	6d 00 f3 04 	call 8000186e <IfxScuWdt_setSafetyEndinit>
}
80000e8c:	1d ff dd ff 	j 80000e46 <IfxScuCcu_modulation_init+0xe>

80000e90 <IfxScuCcu_init>:
{
80000e90:	40 ae       	mov.aa %a14,%sp
80000e92:	40 4c       	mov.aa %a12,%a4
    Ifx_SCU_WDTS *watchdog = &MODULE_SCU.WDTS;

    /* Read Password from Safety WDT CON0 register
     * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
     * to toggle them before returning password */
    password  = watchdog->CON0.B.PW;
80000e94:	91 30 00 2f 	movh.a %a2,61443
80000e98:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80000e9c:	54 22       	ld.w %d2,[%a2]
80000e9e:	37 02 6e 21 	extr.u %d2,%d2,2,14
    IfxScuWdt_clearSafetyEndinitInline(endinitSfty_pw);
80000ea2:	8f f2 83 21 	xor %d2,%d2,63
    if (SCU_WDTS_CON0.B.LCK)
80000ea6:	54 23       	ld.w %d3,[%a2]
80000ea8:	6f 13 0b 00 	jz.t %d3,1,80000ebe <IfxScuCcu_init+0x2e>
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80000eac:	8f 22 00 40 	sh %d4,%d2,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80000eb0:	8f 14 40 41 	or %d4,%d4,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80000eb4:	54 23       	ld.w %d3,[%a2]
80000eb6:	b7 03 10 30 	insert %d3,%d3,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80000eba:	a6 43       	or %d3,%d4
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80000ebc:	74 23       	st.w [%a2],%d3
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80000ebe:	8f 22 00 50 	sh %d5,%d2,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80000ec2:	8f 25 40 31 	or %d3,%d5,2
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80000ec6:	91 30 00 2f 	movh.a %a2,61443
80000eca:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80000ece:	54 22       	ld.w %d2,[%a2]
80000ed0:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80000ed4:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80000ed6:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80000ed8:	91 30 00 2f 	movh.a %a2,61443
80000edc:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80000ee0:	54 22       	ld.w %d2,[%a2]
80000ee2:	6f 02 fb ff 	jnz.t %d2,0,80000ed8 <IfxScuCcu_init+0x48>
    timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
80000ee6:	3b 00 00 21 	mov %d2,4096
    while (SCU_CCUCON0.B.LCK != 0U)
80000eea:	91 30 00 2f 	movh.a %a2,61443
80000eee:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <bmhd_3_copy+0x40c34a30>>
80000ef2:	54 23       	ld.w %d3,[%a2]
80000ef4:	ff 03 08 00 	jge %d3,0,80000f04 <IfxScuCcu_init+0x74>
        IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80000ef8:	c2 f2       	add %d2,-1
80000efa:	ff 12 f8 7f 	jge %d2,1,80000eea <IfxScuCcu_init+0x5a>
80000efe:	82 19       	mov %d9,1
80000f00:	1d 00 03 00 	j 80000f06 <IfxScuCcu_init+0x76>
    uint8                                initError = 0;
80000f04:	82 09       	mov %d9,0
        scuCcucon0.U        = SCU_CCUCON0.U;
80000f06:	91 30 00 2f 	movh.a %a2,61443
80000f0a:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <bmhd_3_copy+0x40c34a30>>
80000f0e:	54 22       	ld.w %d2,[%a2]
        scuCcucon0.B.CLKSEL = 0; /*Select the EVR as fsource0/1/2 for the clock distribution */
80000f10:	b7 02 02 2e 	insert %d2,%d2,0,28,2
        scuCcucon0.B.UP     = 1; /*Update the ccucon0 register */
80000f14:	b7 12 01 2f 	insert %d2,%d2,1,30,1
        SCU_CCUCON0.U       = scuCcucon0.U;
80000f18:	74 22       	st.w [%a2],%d2
    timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
80000f1a:	3b 00 00 21 	mov %d2,4096
    while (SCU_CCUCON0.B.LCK != 0U)
80000f1e:	91 30 00 2f 	movh.a %a2,61443
80000f22:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <bmhd_3_copy+0x40c34a30>>
80000f26:	54 23       	ld.w %d3,[%a2]
80000f28:	ff 03 06 00 	jge %d3,0,80000f34 <IfxScuCcu_init+0xa4>
        IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80000f2c:	c2 f2       	add %d2,-1
80000f2e:	ff 12 f8 7f 	jge %d2,1,80000f1e <IfxScuCcu_init+0x8e>
80000f32:	82 19       	mov %d9,1
        SMU_KEYS.U    = (uint32)0xBCU;        /* Enable access to SMU registers */
80000f34:	91 30 00 2f 	movh.a %a2,61443
80000f38:	d9 22 b4 06 	lea %a2,[%a2]26676 <f0036834 <bmhd_3_copy+0x40c35234>>
80000f3c:	3b c0 0b 20 	mov %d2,188
80000f40:	74 22       	st.w [%a2],%d2
        SMU_AG8CF0.U &= ~IFXSCUCCU_SMUALARM_MASK;
80000f42:	91 30 00 3f 	movh.a %a3,61443
80000f46:	d9 33 a0 56 	lea %a3,[%a3]26976 <f0036960 <bmhd_3_copy+0x40c35360>>
80000f4a:	54 32       	ld.w %d2,[%a3]
80000f4c:	8f d2 c1 21 	andn %d2,%d2,29
80000f50:	74 32       	st.w [%a3],%d2
        SMU_AG8CF1.U &= ~IFXSCUCCU_SMUALARM_MASK;
80000f52:	91 30 00 3f 	movh.a %a3,61443
80000f56:	d9 33 a4 56 	lea %a3,[%a3]26980 <f0036964 <bmhd_3_copy+0x40c35364>>
80000f5a:	54 32       	ld.w %d2,[%a3]
80000f5c:	8f d2 c1 21 	andn %d2,%d2,29
80000f60:	74 32       	st.w [%a3],%d2
        SMU_AG8CF2.U &= ~IFXSCUCCU_SMUALARM_MASK;
80000f62:	91 30 00 3f 	movh.a %a3,61443
80000f66:	d9 33 a8 56 	lea %a3,[%a3]26984 <f0036968 <bmhd_3_copy+0x40c35368>>
80000f6a:	54 32       	ld.w %d2,[%a3]
80000f6c:	8f d2 c1 21 	andn %d2,%d2,29
80000f70:	74 32       	st.w [%a3],%d2
        SMU_KEYS.U    = (uint32)0U;
80000f72:	82 02       	mov %d2,0
80000f74:	74 22       	st.w [%a2],%d2
    SCU_SYSPLLCON0.B.PLLPWD = 0;
80000f76:	91 30 00 2f 	movh.a %a2,61443
80000f7a:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <bmhd_3_copy+0x40c34a18>>
80000f7e:	54 22       	ld.w %d2,[%a2]
80000f80:	7b f0 ff 3f 	movh %d3,65535
80000f84:	c2 f3       	add %d3,-1
80000f86:	26 32       	and %d2,%d3
80000f88:	74 22       	st.w [%a2],%d2
    SCU_PERPLLCON0.B.PLLPWD = 0;
80000f8a:	91 30 00 2f 	movh.a %a2,61443
80000f8e:	d9 22 28 06 	lea %a2,[%a2]24616 <f0036028 <bmhd_3_copy+0x40c34a28>>
80000f92:	54 22       	ld.w %d2,[%a2]
80000f94:	26 32       	and %d2,%d3
80000f96:	74 22       	st.w [%a2],%d2
    timeoutCycleCount       = IFXSCUCCU_SYSPLLSTAT_PWDSTAT_TIMEOUT_COUNT;
80000f98:	3b 00 00 23 	mov %d2,12288
    while ((SCU_SYSPLLSTAT.B.PWDSTAT == 0) || (SCU_PERPLLSTAT.B.PWDSTAT == 0))
80000f9c:	1d 00 05 00 	j 80000fa6 <IfxScuCcu_init+0x116>
        IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80000fa0:	c2 f2       	add %d2,-1
80000fa2:	bf 12 45 00 	jlt %d2,1,8000102c <IfxScuCcu_init+0x19c>
    while ((SCU_SYSPLLSTAT.B.PWDSTAT == 0) || (SCU_PERPLLSTAT.B.PWDSTAT == 0))
80000fa6:	91 30 00 2f 	movh.a %a2,61443
80000faa:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <bmhd_3_copy+0x40c34a14>>
80000fae:	54 23       	ld.w %d3,[%a2]
80000fb0:	6f 13 f8 7f 	jz.t %d3,1,80000fa0 <IfxScuCcu_init+0x110>
80000fb4:	91 30 00 2f 	movh.a %a2,61443
80000fb8:	d9 22 24 06 	lea %a2,[%a2]24612 <f0036024 <bmhd_3_copy+0x40c34a24>>
80000fbc:	54 23       	ld.w %d3,[%a2]
80000fbe:	6f 13 f1 7f 	jz.t %d3,1,80000fa0 <IfxScuCcu_init+0x110>
    if ((pllsParamCfg->pllInputClockSelection == IfxScuCcu_PllInputClockSelection_fOsc0) || (pllsParamCfg->pllInputClockSelection == IfxScuCcu_PllInputClockSelection_fSysclk))
80000fc2:	19 c2 04 00 	ld.w %d2,[%a12]4
80000fc6:	c2 f2       	add %d2,-1
80000fc8:	bf 22 35 80 	jlt.u %d2,2,80001032 <IfxScuCcu_init+0x1a2>
        sysPllCon0.U       = SCU_SYSPLLCON0.U;
80000fcc:	91 30 00 3f 	movh.a %a3,61443
80000fd0:	d9 33 18 06 	lea %a3,[%a3]24600 <f0036018 <bmhd_3_copy+0x40c34a18>>
80000fd4:	54 32       	ld.w %d2,[%a3]
        sysPllCon0.B.PDIV  = pllsParamCfg->sysPllConfig.pDivider;
80000fd6:	39 c3 08 00 	ld.bu %d3,[%a12]8 <f0036018 <bmhd_3_copy+0x40c34a18>>
80000fda:	37 32 03 2c 	insert %d2,%d2,%d3,24,3
        sysPllCon0.B.NDIV  = pllsParamCfg->sysPllConfig.nDivider;
80000fde:	39 c3 09 00 	ld.bu %d3,[%a12]9
80000fe2:	37 32 87 24 	insert %d2,%d2,%d3,9,7
        sysPllCon0.B.INSEL = pllsParamCfg->pllInputClockSelection;
80000fe6:	19 c3 04 00 	ld.w %d3,[%a12]4
80000fea:	37 32 02 2f 	insert %d2,%d2,%d3,30,2
        SCU_SYSPLLCON0.U   = sysPllCon0.U;
80000fee:	74 32       	st.w [%a3],%d2
        scuPerPllCon0.U       = SCU_PERPLLCON0.U;
80000ff0:	91 30 00 2f 	movh.a %a2,61443
80000ff4:	d9 22 28 06 	lea %a2,[%a2]24616 <f0036028 <bmhd_3_copy+0x40c34a28>>
80000ff8:	54 22       	ld.w %d2,[%a2]
        scuPerPllCon0.B.DIVBY = pllsParamCfg->perPllConfig.k3DividerBypass;
80000ffa:	39 c3 10 00 	ld.bu %d3,[%a12]16 <f0036028 <bmhd_3_copy+0x40c34a28>>
80000ffe:	67 32 00 20 	ins.t %d2,%d2,0,%d3,0
        scuPerPllCon0.B.PDIV  = pllsParamCfg->perPllConfig.pDivider;
80001002:	39 c3 0c 00 	ld.bu %d3,[%a12]12
80001006:	37 32 03 2c 	insert %d2,%d2,%d3,24,3
        scuPerPllCon0.B.NDIV  = pllsParamCfg->perPllConfig.nDivider;
8000100a:	39 c3 0d 00 	ld.bu %d3,[%a12]13
8000100e:	37 32 87 24 	insert %d2,%d2,%d3,9,7
        SCU_PERPLLCON0.U      = scuPerPllCon0.U;
80001012:	74 22       	st.w [%a2],%d2
    SCU_SYSPLLCON0.B.PLLPWD = 1;
80001014:	54 32       	ld.w %d2,[%a3]
80001016:	b7 12 01 28 	insert %d2,%d2,1,16,1
8000101a:	74 32       	st.w [%a3],%d2
    SCU_PERPLLCON0.B.PLLPWD = 1;
8000101c:	54 22       	ld.w %d2,[%a2]
8000101e:	b7 12 01 28 	insert %d2,%d2,1,16,1
80001022:	74 22       	st.w [%a2],%d2
    timeoutCycleCount       = IFXSCUCCU_SYSPLLSTAT_PWDSTAT_TIMEOUT_COUNT;
80001024:	3b 00 00 23 	mov %d2,12288
    while ((SCU_SYSPLLSTAT.B.PWDSTAT == 1) || (SCU_PERPLLSTAT.B.PWDSTAT == 1))
80001028:	1d 00 1f 00 	j 80001066 <IfxScuCcu_init+0x1d6>
        IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
8000102c:	82 19       	mov %d9,1
8000102e:	1d ff ca ff 	j 80000fc2 <IfxScuCcu_init+0x132>
        scuOsccon.U      = SCU_OSCCON.U;
80001032:	91 30 00 2f 	movh.a %a2,61443
80001036:	d9 22 10 06 	lea %a2,[%a2]24592 <f0036010 <bmhd_3_copy+0x40c34a10>>
8000103a:	54 24       	ld.w %d4,[%a2]
        scuOsccon.B.MODE = 0U;
8000103c:	8f 04 c6 41 	andn %d4,%d4,96
        scuOsccon.B.OSCVAL = (uint32)(pllsParamCfg->xtalFrequency / 1000000U) - 15; /*XTAL range 16MHz to 40MHz*/
80001040:	54 c3       	ld.w %d3,[%a12]
80001042:	7b c0 31 24 	movh %d2,17180
80001046:	1b 32 e8 2d 	addi %d2,%d2,-8573
8000104a:	73 23 68 20 	mul.u %e2,%d3,%d2
8000104e:	8f e3 1e 20 	sh %d2,%d3,-18
80001052:	1b 12 ff 2f 	addi %d2,%d2,-15
80001056:	37 24 05 48 	insert %d4,%d4,%d2,16,5
        SCU_OSCCON.U       = scuOsccon.U;
8000105a:	74 24       	st.w [%a2],%d4
8000105c:	1d ff b8 ff 	j 80000fcc <IfxScuCcu_init+0x13c>
        IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80001060:	c2 f2       	add %d2,-1
80001062:	bf 12 14 00 	jlt %d2,1,8000108a <IfxScuCcu_init+0x1fa>
    while ((SCU_SYSPLLSTAT.B.PWDSTAT == 1) || (SCU_PERPLLSTAT.B.PWDSTAT == 1))
80001066:	91 30 00 2f 	movh.a %a2,61443
8000106a:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <bmhd_3_copy+0x40c34a14>>
8000106e:	54 23       	ld.w %d3,[%a2]
80001070:	6f 13 f8 ff 	jnz.t %d3,1,80001060 <IfxScuCcu_init+0x1d0>
80001074:	91 30 00 2f 	movh.a %a2,61443
80001078:	d9 22 24 06 	lea %a2,[%a2]24612 <f0036024 <bmhd_3_copy+0x40c34a24>>
8000107c:	54 23       	ld.w %d3,[%a2]
8000107e:	6f 13 f1 ff 	jnz.t %d3,1,80001060 <IfxScuCcu_init+0x1d0>
    timeoutCycleCount = IFXSCUCCU_PLL_KRDY_TIMEOUT_COUNT;
80001082:	3b 00 00 26 	mov %d2,24576
    while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
80001086:	1d 00 08 00 	j 80001096 <IfxScuCcu_init+0x206>
        IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
8000108a:	82 19       	mov %d9,1
8000108c:	1d ff fb ff 	j 80001082 <IfxScuCcu_init+0x1f2>
        IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80001090:	c2 f2       	add %d2,-1
80001092:	bf 12 2f 00 	jlt %d2,1,800010f0 <IfxScuCcu_init+0x260>
    while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
80001096:	91 30 00 2f 	movh.a %a2,61443
8000109a:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <bmhd_3_copy+0x40c34a14>>
8000109e:	54 23       	ld.w %d3,[%a2]
           (SCU_PERPLLSTAT.B.K2RDY == 0U) ||
800010a0:	6f 53 f8 7f 	jz.t %d3,5,80001090 <IfxScuCcu_init+0x200>
800010a4:	91 30 00 2f 	movh.a %a2,61443
800010a8:	d9 22 24 06 	lea %a2,[%a2]24612 <f0036024 <bmhd_3_copy+0x40c34a24>>
800010ac:	54 23       	ld.w %d3,[%a2]
    while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
800010ae:	6f 53 f1 7f 	jz.t %d3,5,80001090 <IfxScuCcu_init+0x200>
           (SCU_PERPLLSTAT.B.K3RDY == 0U))
800010b2:	54 23       	ld.w %d3,[%a2]
           (SCU_PERPLLSTAT.B.K2RDY == 0U) ||
800010b4:	6f 43 ee 7f 	jz.t %d3,4,80001090 <IfxScuCcu_init+0x200>
    SCU_SYSPLLCON1.B.K2DIV = pllsParamCfg->sysPllConfig.k2Divider;
800010b8:	39 c3 0a 00 	ld.bu %d3,[%a12]10
800010bc:	91 30 00 2f 	movh.a %a2,61443
800010c0:	d9 22 1c 06 	lea %a2,[%a2]24604 <f003601c <bmhd_3_copy+0x40c34a1c>>
800010c4:	54 22       	ld.w %d2,[%a2]
800010c6:	37 32 03 20 	insert %d2,%d2,%d3,0,3
800010ca:	74 22       	st.w [%a2],%d2
        scuPerPllCon1.U       = SCU_PERPLLCON1.U;
800010cc:	91 30 00 2f 	movh.a %a2,61443
800010d0:	d9 22 2c 06 	lea %a2,[%a2]24620 <f003602c <bmhd_3_copy+0x40c34a2c>>
800010d4:	54 22       	ld.w %d2,[%a2]
        scuPerPllCon1.B.K2DIV = pllsParamCfg->perPllConfig.k2Divider;
800010d6:	39 c3 0e 00 	ld.bu %d3,[%a12]14 <f003602c <bmhd_3_copy+0x40c34a2c>>
800010da:	37 32 03 20 	insert %d2,%d2,%d3,0,3
        scuPerPllCon1.B.K3DIV = pllsParamCfg->perPllConfig.k3Divider;
800010de:	39 c3 0f 00 	ld.bu %d3,[%a12]15
800010e2:	37 32 03 24 	insert %d2,%d2,%d3,8,3
        SCU_PERPLLCON1.U      = scuPerPllCon1.U;
800010e6:	74 22       	st.w [%a2],%d2
    timeoutCycleCount = IFXSCUCCU_PLL_KRDY_TIMEOUT_COUNT;
800010e8:	3b 00 00 26 	mov %d2,24576
    while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
800010ec:	1d 00 08 00 	j 800010fc <IfxScuCcu_init+0x26c>
        IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
800010f0:	82 19       	mov %d9,1
800010f2:	1d ff e3 ff 	j 800010b8 <IfxScuCcu_init+0x228>
        IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
800010f6:	c2 f2       	add %d2,-1
800010f8:	bf 12 39 00 	jlt %d2,1,8000116a <IfxScuCcu_init+0x2da>
    while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
800010fc:	91 30 00 2f 	movh.a %a2,61443
80001100:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <bmhd_3_copy+0x40c34a14>>
80001104:	54 23       	ld.w %d3,[%a2]
           (SCU_PERPLLSTAT.B.K2RDY == 0U) ||
80001106:	6f 53 f8 7f 	jz.t %d3,5,800010f6 <IfxScuCcu_init+0x266>
8000110a:	91 30 00 2f 	movh.a %a2,61443
8000110e:	d9 22 24 06 	lea %a2,[%a2]24612 <f0036024 <bmhd_3_copy+0x40c34a24>>
80001112:	54 23       	ld.w %d3,[%a2]
    while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
80001114:	6f 53 f1 7f 	jz.t %d3,5,800010f6 <IfxScuCcu_init+0x266>
           (SCU_PERPLLSTAT.B.K3RDY == 0U))
80001118:	54 23       	ld.w %d3,[%a2]
           (SCU_PERPLLSTAT.B.K2RDY == 0U) ||
8000111a:	6f 43 ee 7f 	jz.t %d3,4,800010f6 <IfxScuCcu_init+0x266>
    timeoutCycleCount = IFXSCUCCU_OSCCON_PLLLV_OR_HV_TIMEOUT_COUNT;
8000111e:	7b 50 00 20 	movh %d2,5
80001122:	1b 02 3e 29 	addi %d2,%d2,-27680
    while ((SCU_OSCCON.B.PLLLV == 0) && (SCU_OSCCON.B.PLLHV == 0))
80001126:	91 30 00 2f 	movh.a %a2,61443
8000112a:	d9 22 10 06 	lea %a2,[%a2]24592 <f0036010 <bmhd_3_copy+0x40c34a10>>
8000112e:	54 23       	ld.w %d3,[%a2]
80001130:	6f 13 09 80 	jnz.t %d3,1,80001142 <IfxScuCcu_init+0x2b2>
80001134:	54 23       	ld.w %d3,[%a2]
80001136:	6f 83 06 80 	jnz.t %d3,8,80001142 <IfxScuCcu_init+0x2b2>
        IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
8000113a:	c2 f2       	add %d2,-1
8000113c:	ff 12 f5 7f 	jge %d2,1,80001126 <IfxScuCcu_init+0x296>
80001140:	82 19       	mov %d9,1
        SCU_SYSPLLCON0.B.RESLD = 1;             /* Restart Sys PLL lock detection */
80001142:	91 30 00 2f 	movh.a %a2,61443
80001146:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <bmhd_3_copy+0x40c34a18>>
8000114a:	54 22       	ld.w %d2,[%a2]
8000114c:	b7 12 01 29 	insert %d2,%d2,1,18,1
80001150:	74 22       	st.w [%a2],%d2
        SCU_PERPLLCON0.B.RESLD = 1;             /* Restart Per PLL lock detection */
80001152:	91 30 00 2f 	movh.a %a2,61443
80001156:	d9 22 28 06 	lea %a2,[%a2]24616 <f0036028 <bmhd_3_copy+0x40c34a28>>
8000115a:	54 22       	ld.w %d2,[%a2]
8000115c:	b7 12 01 29 	insert %d2,%d2,1,18,1
80001160:	74 22       	st.w [%a2],%d2
        timeoutCycleCount      = IFXSCUCCU_PLL_LOCK_TIMEOUT_COUNT;
80001162:	3b 00 00 23 	mov %d2,12288
        while ((SCU_SYSPLLSTAT.B.LOCK == 0) || (SCU_PERPLLSTAT.B.LOCK == 0))
80001166:	1d 00 08 00 	j 80001176 <IfxScuCcu_init+0x2e6>
        IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
8000116a:	82 19       	mov %d9,1
8000116c:	1d ff d9 ff 	j 8000111e <IfxScuCcu_init+0x28e>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80001170:	c2 f2       	add %d2,-1
80001172:	bf 12 b7 00 	jlt %d2,1,800012e0 <IfxScuCcu_init+0x450>
        while ((SCU_SYSPLLSTAT.B.LOCK == 0) || (SCU_PERPLLSTAT.B.LOCK == 0))
80001176:	91 30 00 2f 	movh.a %a2,61443
8000117a:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <bmhd_3_copy+0x40c34a14>>
8000117e:	54 23       	ld.w %d3,[%a2]
80001180:	6f 23 f8 7f 	jz.t %d3,2,80001170 <IfxScuCcu_init+0x2e0>
80001184:	91 30 00 2f 	movh.a %a2,61443
80001188:	d9 22 24 06 	lea %a2,[%a2]24612 <f0036024 <bmhd_3_copy+0x40c34a24>>
8000118c:	54 23       	ld.w %d3,[%a2]
8000118e:	6f 23 f1 7f 	jz.t %d3,2,80001170 <IfxScuCcu_init+0x2e0>
        SMU_KEYS.U = (uint32)0xBCU;           /* Enable access to SMU registers */
80001192:	91 30 00 2f 	movh.a %a2,61443
80001196:	d9 22 b4 06 	lea %a2,[%a2]26676 <f0036834 <bmhd_3_copy+0x40c35234>>
8000119a:	3b c0 0b 20 	mov %d2,188
8000119e:	74 22       	st.w [%a2],%d2
        SMU_CMD.U  = (uint32)0x00000005;
800011a0:	91 30 00 3f 	movh.a %a3,61443
800011a4:	d9 33 a0 06 	lea %a3,[%a3]26656 <f0036820 <bmhd_3_copy+0x40c35220>>
800011a8:	82 52       	mov %d2,5
800011aa:	74 32       	st.w [%a3],%d2
        SMU_AG8.U  = IFXSCUCCU_SMUALARM_MASK; /* Clear SMU Alarms*/
800011ac:	91 30 00 3f 	movh.a %a3,61443
800011b0:	d9 33 a0 76 	lea %a3,[%a3]27104 <f00369e0 <bmhd_3_copy+0x40c353e0>>
800011b4:	3b d0 01 20 	mov %d2,29
800011b8:	74 32       	st.w [%a3],%d2
        SMU_KEYS.U = (uint32)0U;
800011ba:	82 02       	mov %d2,0
800011bc:	74 22       	st.w [%a2],%d2
        scu_ccucon0.U        = SCU_CCUCON0.U;
800011be:	91 30 00 2f 	movh.a %a2,61443
800011c2:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <bmhd_3_copy+0x40c34a30>>
800011c6:	54 24       	ld.w %d4,[%a2]
        scu_ccucon0.B.CLKSEL = 1; /*Select the PLLs for fsource0/1/2 */
800011c8:	b7 14 02 4e 	insert %d4,%d4,1,28,2
        scu_ccucon0.B.UP     = 1; /*Update the ccucon0 register */
800011cc:	b7 14 01 4f 	insert %d4,%d4,1,30,1
        timeoutCycleCount    = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
800011d0:	3b 00 00 21 	mov %d2,4096
        while (SCU_CCUCON0.B.LCK != 0U)
800011d4:	91 30 00 2f 	movh.a %a2,61443
800011d8:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <bmhd_3_copy+0x40c34a30>>
800011dc:	54 23       	ld.w %d3,[%a2]
800011de:	ff 03 06 00 	jge %d3,0,800011ea <IfxScuCcu_init+0x35a>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
800011e2:	c2 f2       	add %d2,-1
800011e4:	ff 12 f8 7f 	jge %d2,1,800011d4 <IfxScuCcu_init+0x344>
800011e8:	82 19       	mov %d9,1
        SCU_CCUCON0.U     = scu_ccucon0.U;
800011ea:	91 30 00 2f 	movh.a %a2,61443
800011ee:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <bmhd_3_copy+0x40c34a30>>
800011f2:	74 24       	st.w [%a2],%d4
        timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
800011f4:	3b 00 00 21 	mov %d2,4096
        while (SCU_CCUCON0.B.LCK != 0U)
800011f8:	91 30 00 2f 	movh.a %a2,61443
800011fc:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <bmhd_3_copy+0x40c34a30>>
80001200:	54 23       	ld.w %d3,[%a2]
80001202:	ff 03 06 00 	jge %d3,0,8000120e <IfxScuCcu_init+0x37e>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80001206:	c2 f2       	add %d2,-1
80001208:	ff 12 f8 7f 	jge %d2,1,800011f8 <IfxScuCcu_init+0x368>
8000120c:	82 19       	mov %d9,1
}


IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
8000120e:	91 30 00 2f 	movh.a %a2,61443
80001212:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80001216:	54 22       	ld.w %d2,[%a2]
80001218:	6f 12 09 00 	jz.t %d2,1,8000122a <IfxScuCcu_init+0x39a>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
8000121c:	8f 15 40 31 	or %d3,%d5,1
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80001220:	54 22       	ld.w %d2,[%a2]
80001222:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001226:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80001228:	74 22       	st.w [%a2],%d2
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
8000122a:	8f 35 40 51 	or %d5,%d5,3
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8000122e:	91 30 00 2f 	movh.a %a2,61443
80001232:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80001236:	54 22       	ld.w %d2,[%a2]
80001238:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000123c:	a6 52       	or %d2,%d5
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000123e:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
80001240:	91 30 00 2f 	movh.a %a2,61443
80001244:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80001248:	54 22       	ld.w %d2,[%a2]
8000124a:	6f 02 fb 7f 	jz.t %d2,0,80001240 <IfxScuCcu_init+0x3b0>
    if (!status)
8000124e:	df 09 4c 00 	jeq %d9,0,800012e6 <IfxScuCcu_init+0x456>
    if (!status)
80001252:	df 09 a3 81 	jne %d9,0,80001598 <IfxScuCcu_init+0x708>
    password  = watchdog->CON0.B.PW;
80001256:	91 30 00 2f 	movh.a %a2,61443
8000125a:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
8000125e:	54 22       	ld.w %d2,[%a2]
80001260:	37 02 6e 21 	extr.u %d2,%d2,2,14
    IfxScuWdt_clearSafetyEndinitInline(endinitSfty_pw);
80001264:	8f f2 83 21 	xor %d2,%d2,63
    if (SCU_WDTS_CON0.B.LCK)
80001268:	54 23       	ld.w %d3,[%a2]
8000126a:	6f 13 0b 00 	jz.t %d3,1,80001280 <IfxScuCcu_init+0x3f0>
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000126e:	8f 22 00 40 	sh %d4,%d2,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001272:	8f 14 40 41 	or %d4,%d4,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80001276:	54 23       	ld.w %d3,[%a2]
80001278:	b7 03 10 30 	insert %d3,%d3,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000127c:	a6 43       	or %d3,%d4
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000127e:	74 23       	st.w [%a2],%d3
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001280:	8f 22 00 50 	sh %d5,%d2,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001284:	8f 25 40 31 	or %d3,%d5,2
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80001288:	91 30 00 2f 	movh.a %a2,61443
8000128c:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80001290:	54 22       	ld.w %d2,[%a2]
80001292:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001296:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80001298:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
8000129a:	91 30 00 2f 	movh.a %a2,61443
8000129e:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
800012a2:	54 22       	ld.w %d2,[%a2]
800012a4:	6f 02 fb ff 	jnz.t %d2,0,8000129a <IfxScuCcu_init+0x40a>
        ccucon0.U         = SCU_CCUCON0.U & ~clockDistributionConfig->ccucon0.mask;
800012a8:	91 30 00 2f 	movh.a %a2,61443
800012ac:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <bmhd_3_copy+0x40c34a30>>
800012b0:	54 22       	ld.w %d2,[%a2]
800012b2:	19 c4 24 00 	ld.w %d4,[%a12]36 <f0036030 <bmhd_3_copy+0x40c34a30>>
800012b6:	0f 42 e0 20 	andn %d2,%d2,%d4
        ccucon0.U        |= (clockDistributionConfig->ccucon0.mask & clockDistributionConfig->ccucon0.value);
800012ba:	19 c3 20 00 	ld.w %d3,[%a12]32
800012be:	26 34       	and %d4,%d3
800012c0:	a6 24       	or %d4,%d2
        timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
800012c2:	3b 00 00 21 	mov %d2,4096
        while (SCU_CCUCON0.B.LCK != 0U)
800012c6:	91 30 00 2f 	movh.a %a2,61443
800012ca:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <bmhd_3_copy+0x40c34a30>>
800012ce:	54 23       	ld.w %d3,[%a2]
800012d0:	ff 03 11 00 	jge %d3,0,800012f2 <IfxScuCcu_init+0x462>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
800012d4:	c2 f2       	add %d2,-1
800012d6:	ff 12 f8 7f 	jge %d2,1,800012c6 <IfxScuCcu_init+0x436>
800012da:	82 19       	mov %d9,1
800012dc:	1d 00 0c 00 	j 800012f4 <IfxScuCcu_init+0x464>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
800012e0:	82 19       	mov %d9,1
800012e2:	1d ff 58 ff 	j 80001192 <IfxScuCcu_init+0x302>
        IfxScuCcu_modulation_init(config->modulationConfig);  /* initialize modulation */
800012e6:	99 c4 1c 10 	ld.a %a4,[%a12]92
800012ea:	6d ff a7 fd 	call 80000e38 <IfxScuCcu_modulation_init>
800012ee:	1d ff b2 ff 	j 80001252 <IfxScuCcu_init+0x3c2>
    uint32 initError = 0;
800012f2:	82 09       	mov %d9,0
        SCU_CCUCON0.U     = ccucon0.U;      /*Set update bit explicitly to make above configurations effective */
800012f4:	91 30 00 2f 	movh.a %a2,61443
800012f8:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <bmhd_3_copy+0x40c34a30>>
800012fc:	74 24       	st.w [%a2],%d4
        timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
800012fe:	3b 00 00 21 	mov %d2,4096
        while (SCU_CCUCON0.B.LCK != 0U)
80001302:	91 30 00 2f 	movh.a %a2,61443
80001306:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <bmhd_3_copy+0x40c34a30>>
8000130a:	54 23       	ld.w %d3,[%a2]
8000130c:	ff 03 06 00 	jge %d3,0,80001318 <IfxScuCcu_init+0x488>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80001310:	c2 f2       	add %d2,-1
80001312:	ff 12 f8 7f 	jge %d2,1,80001302 <IfxScuCcu_init+0x472>
80001316:	82 19       	mov %d9,1
        ccucon1.U = SCU_CCUCON1.U;
80001318:	91 30 00 2f 	movh.a %a2,61443
8000131c:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <bmhd_3_copy+0x40c34a34>>
80001320:	54 22       	ld.w %d2,[%a2]
            || ccucon1.B.CLKSELQSPI)
80001322:	7b 00 03 33 	movh %d3,12336
80001326:	1b 03 03 30 	addi %d3,%d3,48
8000132a:	26 32       	and %d2,%d3
        if (ccucon1.B.CLKSELMCAN
8000132c:	df 02 30 00 	jeq %d2,0,8000138c <IfxScuCcu_init+0x4fc>
            ccucon1.U  = SCU_CCUCON1.U & ~clockDistributionConfig->ccucon1.mask;
80001330:	54 22       	ld.w %d2,[%a2]
80001332:	19 c4 2c 00 	ld.w %d4,[%a12]44
80001336:	0f 42 e0 20 	andn %d2,%d2,%d4
            ccucon1.U |= (clockDistributionConfig->ccucon1.mask & clockDistributionConfig->ccucon1.value);
8000133a:	19 c3 28 00 	ld.w %d3,[%a12]40
8000133e:	26 34       	and %d4,%d3
80001340:	a6 24       	or %d4,%d2
            ccucon1.B.CLKSELMCAN = (uint32)0;
80001342:	8f 04 c3 41 	andn %d4,%d4,48
            ccucon1.B.CLKSELMSC  = (uint32)0;
80001346:	b7 04 02 4a 	insert %d4,%d4,0,20,2
            ccucon1.B.CLKSELQSPI = (uint32)0;
8000134a:	b7 04 02 4e 	insert %d4,%d4,0,28,2
            timeoutCycleCount    = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
8000134e:	3b 00 00 21 	mov %d2,4096
            while (SCU_CCUCON1.B.LCK != 0U)
80001352:	91 30 00 2f 	movh.a %a2,61443
80001356:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <bmhd_3_copy+0x40c34a34>>
8000135a:	54 23       	ld.w %d3,[%a2]
8000135c:	ff 03 06 00 	jge %d3,0,80001368 <IfxScuCcu_init+0x4d8>
                IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80001360:	c2 f2       	add %d2,-1
80001362:	ff 12 f8 7f 	jge %d2,1,80001352 <IfxScuCcu_init+0x4c2>
80001366:	82 19       	mov %d9,1
            SCU_CCUCON1.U     = ccucon1.U;
80001368:	91 30 00 2f 	movh.a %a2,61443
8000136c:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <bmhd_3_copy+0x40c34a34>>
80001370:	74 24       	st.w [%a2],%d4
            timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
80001372:	3b 00 00 21 	mov %d2,4096
            while (SCU_CCUCON1.B.LCK != 0U)
80001376:	91 30 00 2f 	movh.a %a2,61443
8000137a:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <bmhd_3_copy+0x40c34a34>>
8000137e:	54 23       	ld.w %d3,[%a2]
80001380:	ff 03 06 00 	jge %d3,0,8000138c <IfxScuCcu_init+0x4fc>
                IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80001384:	c2 f2       	add %d2,-1
80001386:	ff 12 f8 7f 	jge %d2,1,80001376 <IfxScuCcu_init+0x4e6>
8000138a:	82 19       	mov %d9,1
        ccucon1.U         = SCU_CCUCON1.U & ~clockDistributionConfig->ccucon1.mask;
8000138c:	91 30 00 2f 	movh.a %a2,61443
80001390:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <bmhd_3_copy+0x40c34a34>>
80001394:	54 22       	ld.w %d2,[%a2]
80001396:	19 c4 2c 00 	ld.w %d4,[%a12]44 <f0036034 <bmhd_3_copy+0x40c34a34>>
8000139a:	0f 42 e0 20 	andn %d2,%d2,%d4
        ccucon1.U        |= (clockDistributionConfig->ccucon1.mask & clockDistributionConfig->ccucon1.value);
8000139e:	19 c3 28 00 	ld.w %d3,[%a12]40
800013a2:	26 34       	and %d4,%d3
800013a4:	a6 24       	or %d4,%d2
        timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
800013a6:	3b 00 00 21 	mov %d2,4096
        while (SCU_CCUCON1.B.LCK != 0U)
800013aa:	91 30 00 2f 	movh.a %a2,61443
800013ae:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <bmhd_3_copy+0x40c34a34>>
800013b2:	54 23       	ld.w %d3,[%a2]
800013b4:	ff 03 06 00 	jge %d3,0,800013c0 <IfxScuCcu_init+0x530>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
800013b8:	c2 f2       	add %d2,-1
800013ba:	ff 12 f8 7f 	jge %d2,1,800013aa <IfxScuCcu_init+0x51a>
800013be:	82 19       	mov %d9,1
        SCU_CCUCON1.U     = ccucon1.U;
800013c0:	91 30 00 2f 	movh.a %a2,61443
800013c4:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <bmhd_3_copy+0x40c34a34>>
800013c8:	74 24       	st.w [%a2],%d4
        timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
800013ca:	3b 00 00 21 	mov %d2,4096
        while (SCU_CCUCON1.B.LCK != 0U)
800013ce:	91 30 00 2f 	movh.a %a2,61443
800013d2:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <bmhd_3_copy+0x40c34a34>>
800013d6:	54 23       	ld.w %d3,[%a2]
800013d8:	ff 03 06 00 	jge %d3,0,800013e4 <IfxScuCcu_init+0x554>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
800013dc:	c2 f2       	add %d2,-1
800013de:	ff 12 f8 7f 	jge %d2,1,800013ce <IfxScuCcu_init+0x53e>
800013e2:	82 19       	mov %d9,1
        ccucon2.U = SCU_CCUCON2.U;
800013e4:	91 30 00 2f 	movh.a %a2,61443
800013e8:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <bmhd_3_copy+0x40c34a40>>
800013ec:	54 22       	ld.w %d2,[%a2]
        if (ccucon2.B.CLKSELASCLINS)
800013ee:	3b 00 00 33 	mov %d3,12288
800013f2:	26 32       	and %d2,%d3
800013f4:	df 02 2c 00 	jeq %d2,0,8000144c <IfxScuCcu_init+0x5bc>
            ccucon2.U               = SCU_CCUCON2.U & ~clockDistributionConfig->ccucon2.mask;
800013f8:	54 22       	ld.w %d2,[%a2]
800013fa:	19 c4 34 00 	ld.w %d4,[%a12]52
800013fe:	0f 42 e0 20 	andn %d2,%d2,%d4
            ccucon2.U              |= (clockDistributionConfig->ccucon2.mask & clockDistributionConfig->ccucon2.value);
80001402:	19 c3 30 00 	ld.w %d3,[%a12]48
80001406:	26 34       	and %d4,%d3
80001408:	a6 24       	or %d4,%d2
            ccucon2.B.CLKSELASCLINS = (uint32)0;
8000140a:	b7 04 02 46 	insert %d4,%d4,0,12,2
            timeoutCycleCount       = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
8000140e:	3b 00 00 21 	mov %d2,4096
            while (SCU_CCUCON2.B.LCK != 0U)
80001412:	91 30 00 2f 	movh.a %a2,61443
80001416:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <bmhd_3_copy+0x40c34a40>>
8000141a:	54 23       	ld.w %d3,[%a2]
8000141c:	ff 03 06 00 	jge %d3,0,80001428 <IfxScuCcu_init+0x598>
                IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80001420:	c2 f2       	add %d2,-1
80001422:	ff 12 f8 7f 	jge %d2,1,80001412 <IfxScuCcu_init+0x582>
80001426:	82 19       	mov %d9,1
            SCU_CCUCON2.U     = ccucon2.U;
80001428:	91 30 00 2f 	movh.a %a2,61443
8000142c:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <bmhd_3_copy+0x40c34a40>>
80001430:	74 24       	st.w [%a2],%d4
            timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
80001432:	3b 00 00 21 	mov %d2,4096
            while (SCU_CCUCON2.B.LCK != 0U)
80001436:	91 30 00 2f 	movh.a %a2,61443
8000143a:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <bmhd_3_copy+0x40c34a40>>
8000143e:	54 23       	ld.w %d3,[%a2]
80001440:	ff 03 06 00 	jge %d3,0,8000144c <IfxScuCcu_init+0x5bc>
                IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80001444:	c2 f2       	add %d2,-1
80001446:	ff 12 f8 7f 	jge %d2,1,80001436 <IfxScuCcu_init+0x5a6>
8000144a:	82 19       	mov %d9,1
        ccucon2.U         = SCU_CCUCON2.U & ~clockDistributionConfig->ccucon2.mask;
8000144c:	91 30 00 2f 	movh.a %a2,61443
80001450:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <bmhd_3_copy+0x40c34a40>>
80001454:	54 22       	ld.w %d2,[%a2]
80001456:	19 c4 34 00 	ld.w %d4,[%a12]52 <f0036040 <bmhd_3_copy+0x40c34a40>>
8000145a:	0f 42 e0 20 	andn %d2,%d2,%d4
        ccucon2.U        |= (clockDistributionConfig->ccucon2.mask & clockDistributionConfig->ccucon2.value);
8000145e:	19 c3 30 00 	ld.w %d3,[%a12]48
80001462:	26 34       	and %d4,%d3
80001464:	a6 24       	or %d4,%d2
        timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
80001466:	3b 00 00 21 	mov %d2,4096
        while (SCU_CCUCON2.B.LCK != 0U)
8000146a:	91 30 00 2f 	movh.a %a2,61443
8000146e:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <bmhd_3_copy+0x40c34a40>>
80001472:	54 23       	ld.w %d3,[%a2]
80001474:	ff 03 06 00 	jge %d3,0,80001480 <IfxScuCcu_init+0x5f0>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80001478:	c2 f2       	add %d2,-1
8000147a:	ff 12 f8 7f 	jge %d2,1,8000146a <IfxScuCcu_init+0x5da>
8000147e:	82 19       	mov %d9,1
        SCU_CCUCON2.U     = ccucon2.U;
80001480:	91 30 00 2f 	movh.a %a2,61443
80001484:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <bmhd_3_copy+0x40c34a40>>
80001488:	74 24       	st.w [%a2],%d4
        timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
8000148a:	3b 00 00 21 	mov %d2,4096
        while (SCU_CCUCON2.B.LCK != 0U)
8000148e:	91 30 00 2f 	movh.a %a2,61443
80001492:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <bmhd_3_copy+0x40c34a40>>
80001496:	54 23       	ld.w %d3,[%a2]
80001498:	ff 03 06 00 	jge %d3,0,800014a4 <IfxScuCcu_init+0x614>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
8000149c:	c2 f2       	add %d2,-1
8000149e:	ff 12 f8 7f 	jge %d2,1,8000148e <IfxScuCcu_init+0x5fe>
800014a2:	82 19       	mov %d9,1
        ccucon5.U         = SCU_CCUCON5.U & ~clockDistributionConfig->ccucon5.mask;
800014a4:	91 30 00 2f 	movh.a %a2,61443
800014a8:	d9 22 0c 16 	lea %a2,[%a2]24652 <f003604c <bmhd_3_copy+0x40c34a4c>>
800014ac:	54 22       	ld.w %d2,[%a2]
800014ae:	19 c4 3c 00 	ld.w %d4,[%a12]60 <f003604c <bmhd_3_copy+0x40c34a4c>>
800014b2:	0f 42 e0 20 	andn %d2,%d2,%d4
        ccucon5.U        |= (clockDistributionConfig->ccucon5.mask & clockDistributionConfig->ccucon5.value);
800014b6:	19 c3 38 00 	ld.w %d3,[%a12]56
800014ba:	26 34       	and %d4,%d3
800014bc:	a6 24       	or %d4,%d2
        ccucon5.B.UP      = 1;
800014be:	b7 14 01 4f 	insert %d4,%d4,1,30,1
        timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
800014c2:	3b 00 00 21 	mov %d2,4096
        while (SCU_CCUCON5.B.LCK != 0U)
800014c6:	91 30 00 2f 	movh.a %a2,61443
800014ca:	d9 22 0c 16 	lea %a2,[%a2]24652 <f003604c <bmhd_3_copy+0x40c34a4c>>
800014ce:	54 23       	ld.w %d3,[%a2]
800014d0:	ff 03 06 00 	jge %d3,0,800014dc <IfxScuCcu_init+0x64c>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
800014d4:	c2 f2       	add %d2,-1
800014d6:	ff 12 f8 7f 	jge %d2,1,800014c6 <IfxScuCcu_init+0x636>
800014da:	82 19       	mov %d9,1
        SCU_CCUCON5.U     = ccucon5.U;
800014dc:	91 30 00 2f 	movh.a %a2,61443
800014e0:	d9 22 0c 16 	lea %a2,[%a2]24652 <f003604c <bmhd_3_copy+0x40c34a4c>>
800014e4:	74 24       	st.w [%a2],%d4
        timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
800014e6:	3b 00 00 21 	mov %d2,4096
        while (SCU_CCUCON5.B.LCK != 0U)
800014ea:	91 30 00 2f 	movh.a %a2,61443
800014ee:	d9 22 0c 16 	lea %a2,[%a2]24652 <f003604c <bmhd_3_copy+0x40c34a4c>>
800014f2:	54 23       	ld.w %d3,[%a2]
800014f4:	ff 03 06 00 	jge %d3,0,80001500 <IfxScuCcu_init+0x670>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
800014f8:	c2 f2       	add %d2,-1
800014fa:	ff 12 f8 7f 	jge %d2,1,800014ea <IfxScuCcu_init+0x65a>
800014fe:	82 19       	mov %d9,1
        ccucon6.U     = SCU_CCUCON6.U & ~clockDistributionConfig->ccucon6.mask;
80001500:	91 30 00 2f 	movh.a %a2,61443
80001504:	d9 22 00 26 	lea %a2,[%a2]24704 <f0036080 <bmhd_3_copy+0x40c34a80>>
80001508:	54 23       	ld.w %d3,[%a2]
8000150a:	19 c4 04 10 	ld.w %d4,[%a12]68 <f0036080 <bmhd_3_copy+0x40c34a80>>
8000150e:	0f 43 e0 30 	andn %d3,%d3,%d4
        ccucon6.U    |= (clockDistributionConfig->ccucon6.mask & clockDistributionConfig->ccucon6.value);
80001512:	19 c2 00 10 	ld.w %d2,[%a12]64
80001516:	26 42       	and %d2,%d4
80001518:	a6 32       	or %d2,%d3
        SCU_CCUCON6.U = ccucon6.U;
8000151a:	74 22       	st.w [%a2],%d2
        ccucon7.U     = SCU_CCUCON7.U & ~clockDistributionConfig->ccucon7.mask;
8000151c:	91 30 00 2f 	movh.a %a2,61443
80001520:	d9 22 04 26 	lea %a2,[%a2]24708 <f0036084 <bmhd_3_copy+0x40c34a84>>
80001524:	54 23       	ld.w %d3,[%a2]
80001526:	19 c4 0c 10 	ld.w %d4,[%a12]76 <f0036084 <bmhd_3_copy+0x40c34a84>>
8000152a:	0f 43 e0 30 	andn %d3,%d3,%d4
        ccucon7.U    |= (clockDistributionConfig->ccucon7.mask & clockDistributionConfig->ccucon7.value);
8000152e:	19 c2 08 10 	ld.w %d2,[%a12]72
80001532:	26 42       	and %d2,%d4
80001534:	a6 32       	or %d2,%d3
        SCU_CCUCON7.U = ccucon7.U;
80001536:	74 22       	st.w [%a2],%d2
        ccucon8.U     = SCU_CCUCON8.U & ~clockDistributionConfig->ccucon8.mask;
80001538:	91 30 00 2f 	movh.a %a2,61443
8000153c:	d9 22 08 26 	lea %a2,[%a2]24712 <f0036088 <bmhd_3_copy+0x40c34a88>>
80001540:	54 23       	ld.w %d3,[%a2]
80001542:	19 c4 14 10 	ld.w %d4,[%a12]84 <f0036088 <bmhd_3_copy+0x40c34a88>>
80001546:	0f 43 e0 30 	andn %d3,%d3,%d4
        ccucon8.U    |= (clockDistributionConfig->ccucon8.mask & clockDistributionConfig->ccucon8.value);
8000154a:	19 c2 10 10 	ld.w %d2,[%a12]80
8000154e:	26 42       	and %d2,%d4
80001550:	a6 32       	or %d2,%d3
        SCU_CCUCON8.U = ccucon8.U;
80001552:	74 22       	st.w [%a2],%d2
    if (SCU_WDTS_CON0.B.LCK)
80001554:	91 30 00 2f 	movh.a %a2,61443
80001558:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
8000155c:	54 22       	ld.w %d2,[%a2]
8000155e:	6f 12 09 00 	jz.t %d2,1,80001570 <IfxScuCcu_init+0x6e0>
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001562:	8f 15 40 31 	or %d3,%d5,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80001566:	54 22       	ld.w %d2,[%a2]
80001568:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000156c:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000156e:	74 22       	st.w [%a2],%d2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001570:	8f 35 40 51 	or %d5,%d5,3
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80001574:	91 30 00 2f 	movh.a %a2,61443
80001578:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
8000157c:	54 22       	ld.w %d2,[%a2]
8000157e:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001582:	a6 52       	or %d2,%d5
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80001584:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
80001586:	91 30 00 2f 	movh.a %a2,61443
8000158a:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
8000158e:	54 22       	ld.w %d2,[%a2]
80001590:	6f 02 fb 7f 	jz.t %d2,0,80001586 <IfxScuCcu_init+0x6f6>
    return (boolean)initError;
80001594:	8f f9 0f 91 	and %d9,%d9,255
    if (!status)
80001598:	df 09 96 80 	jne %d9,0,800016c4 <IfxScuCcu_init+0x834>
    password  = watchdog->CON0.B.PW;
8000159c:	91 30 00 2f 	movh.a %a2,61443
800015a0:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
800015a4:	54 22       	ld.w %d2,[%a2]
800015a6:	37 02 6e 21 	extr.u %d2,%d2,2,14
    password ^= 0x003F;
800015aa:	8f f2 83 b1 	xor %d11,%d2,63

    /*get the watch-dog passwords for usage with this function*/
    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPasswordInline();

    /*Start Pll ramp up sequence */
    for (pllStepsCount = 0; pllStepsCount < pllThrottleConfig->numOfSteps; pllStepsCount++)
800015ae:	02 98       	mov %d8,%d9
800015b0:	1d 00 53 00 	j 80001656 <IfxScuCcu_init+0x7c6>
            {
                IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
            }

            /*Now set the K2 divider value for the step corresponding to step count */
            SCU_SYSPLLCON1.B.K2DIV = pllThrottleConfig->pllSteps[pllStepsCount].k2Step;
800015b4:	8f 38 00 50 	sh %d5,%d8,3
800015b8:	99 c2 1c 00 	ld.a %a2,[%a12]28
800015bc:	01 25 00 26 	addsc.a %a2,%a2,%d5,0
800015c0:	14 23       	ld.bu %d3,[%a2]
800015c2:	91 30 00 2f 	movh.a %a2,61443
800015c6:	d9 22 1c 06 	lea %a2,[%a2]24604 <f003601c <bmhd_3_copy+0x40c34a1c>>
800015ca:	54 22       	ld.w %d2,[%a2]
800015cc:	37 32 03 20 	insert %d2,%d2,%d3,0,3
800015d0:	74 22       	st.w [%a2],%d2
    if (SCU_WDTS_CON0.B.LCK)
800015d2:	91 30 00 2f 	movh.a %a2,61443
800015d6:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
800015da:	54 22       	ld.w %d2,[%a2]
800015dc:	6f 12 09 00 	jz.t %d2,1,800015ee <IfxScuCcu_init+0x75e>
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
800015e0:	8f 14 40 31 	or %d3,%d4,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800015e4:	54 22       	ld.w %d2,[%a2]
800015e6:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800015ea:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800015ec:	74 22       	st.w [%a2],%d2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
800015ee:	8f 34 40 41 	or %d4,%d4,3
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800015f2:	91 30 00 2f 	movh.a %a2,61443
800015f6:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
800015fa:	54 22       	ld.w %d2,[%a2]
800015fc:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001600:	a6 42       	or %d2,%d4
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80001602:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
80001604:	91 30 00 2f 	movh.a %a2,61443
80001608:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
8000160c:	54 22       	ld.w %d2,[%a2]
8000160e:	6f 02 fb 7f 	jz.t %d2,0,80001604 <IfxScuCcu_init+0x774>
            IfxScuWdt_setSafetyEndinitInline(endinitSfty_pw);
        }

        /*Wait for waitCounter corresponding to the pll step */
        IfxScuCcu_wait(pllThrottleConfig->pllSteps[pllStepsCount].waitTime);
80001612:	99 c2 1c 00 	ld.a %a2,[%a12]28
80001616:	01 25 00 26 	addsc.a %a2,%a2,%d5,0
8000161a:	19 2a 04 00 	ld.w %d10,[%a2]4
    return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_0) / SCU_CCUCON0.B.STMDIV;
8000161e:	82 04       	mov %d4,0
80001620:	6d ff dd fb 	call 80000dda <IfxScuCcu_getSourceFrequency>
80001624:	91 30 00 2f 	movh.a %a2,61443
80001628:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <bmhd_3_copy+0x40c34a30>>
8000162c:	54 23       	ld.w %d3,[%a2]
8000162e:	8f f3 00 31 	and %d3,%d3,15
80001632:	4b 03 41 31 	itof %d3,%d3
80001636:	4b 32 51 20 	div.f %d2,%d2,%d3
}


IFX_INLINE void IfxScuCcu_wait(float32 timeSec)
{
    uint32 stmCount      = (uint32)(IfxScuCcu_getStmFrequency() * timeSec);
8000163a:	4b 2a 41 20 	mul.f %d2,%d10,%d2
8000163e:	4b 02 71 31 	ftouz %d3,%d2
    uint32 stmCountBegin = STM0_TIM0.U;
80001642:	85 f4 10 01 	ld.w %d4,f0001010 <bmhd_3_copy+0x40bffa10>

    while ((uint32)(STM0_TIM0.U - stmCountBegin) < stmCount)
80001646:	85 f2 10 01 	ld.w %d2,f0001010 <bmhd_3_copy+0x40bffa10>
8000164a:	a2 42       	sub %d2,%d4
8000164c:	3f 32 fd ff 	jlt.u %d2,%d3,80001646 <IfxScuCcu_init+0x7b6>
    for (pllStepsCount = 0; pllStepsCount < pllThrottleConfig->numOfSteps; pllStepsCount++)
80001650:	c2 18       	add %d8,1
80001652:	8f f8 0f 81 	and %d8,%d8,255
80001656:	39 c2 18 00 	ld.bu %d2,[%a12]24
8000165a:	7f 28 35 80 	jge.u %d8,%d2,800016c4 <IfxScuCcu_init+0x834>
    if (SCU_WDTS_CON0.B.LCK)
8000165e:	91 30 00 2f 	movh.a %a2,61443
80001662:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80001666:	54 22       	ld.w %d2,[%a2]
80001668:	6f 12 0b 00 	jz.t %d2,1,8000167e <IfxScuCcu_init+0x7ee>
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000166c:	8f 2b 00 30 	sh %d3,%d11,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001670:	8f 13 40 31 	or %d3,%d3,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80001674:	54 22       	ld.w %d2,[%a2]
80001676:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000167a:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000167c:	74 22       	st.w [%a2],%d2
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000167e:	8f 2b 00 40 	sh %d4,%d11,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001682:	8f 24 40 31 	or %d3,%d4,2
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80001686:	91 30 00 2f 	movh.a %a2,61443
8000168a:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
8000168e:	54 22       	ld.w %d2,[%a2]
80001690:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001694:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80001696:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80001698:	91 30 00 2f 	movh.a %a2,61443
8000169c:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
800016a0:	54 22       	ld.w %d2,[%a2]
800016a2:	6f 02 fb ff 	jnz.t %d2,0,80001698 <IfxScuCcu_init+0x808>
            timeoutCycleCount = IFXSCUCCU_PLL_KRDY_TIMEOUT_COUNT;
800016a6:	3b 00 00 26 	mov %d2,24576
            while (SCU_SYSPLLSTAT.B.K2RDY == 0U)
800016aa:	91 30 00 2f 	movh.a %a2,61443
800016ae:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <bmhd_3_copy+0x40c34a14>>
800016b2:	54 23       	ld.w %d3,[%a2]
800016b4:	6f 53 80 ff 	jnz.t %d3,5,800015b4 <IfxScuCcu_init+0x724>
                IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
800016b8:	c2 f2       	add %d2,-1
800016ba:	ff 12 f8 7f 	jge %d2,1,800016aa <IfxScuCcu_init+0x81a>
800016be:	82 19       	mov %d9,1
800016c0:	1d ff 7a ff 	j 800015b4 <IfxScuCcu_init+0x724>
}
800016c4:	02 92       	mov %d2,%d9
800016c6:	00 90       	ret 

800016c8 <IfxScuWdt_clearSafetyEndinit>:
    {}
}


void IfxScuWdt_clearSafetyEndinit(uint16 password)
{
800016c8:	40 ae       	mov.aa %a14,%sp
800016ca:	37 04 70 40 	extr.u %d4,%d4,0,16
}


IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
800016ce:	91 30 00 2f 	movh.a %a2,61443
800016d2:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
800016d6:	54 22       	ld.w %d2,[%a2]
800016d8:	6f 12 0b 00 	jz.t %d2,1,800016ee <IfxScuWdt_clearSafetyEndinit+0x26>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800016dc:	8f 24 00 30 	sh %d3,%d4,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
800016e0:	8f 13 40 31 	or %d3,%d3,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800016e4:	54 22       	ld.w %d2,[%a2]
800016e6:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800016ea:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800016ec:	74 22       	st.w [%a2],%d2
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800016ee:	8f 24 00 30 	sh %d3,%d4,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
800016f2:	8f 23 40 31 	or %d3,%d3,2
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800016f6:	91 30 00 2f 	movh.a %a2,61443
800016fa:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
800016fe:	54 22       	ld.w %d2,[%a2]
80001700:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001704:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80001706:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80001708:	91 30 00 2f 	movh.a %a2,61443
8000170c:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80001710:	54 22       	ld.w %d2,[%a2]
80001712:	6f 02 fb ff 	jnz.t %d2,0,80001708 <IfxScuWdt_clearSafetyEndinit+0x40>
    IfxScuWdt_clearSafetyEndinitInline(password);
}
80001716:	00 90       	ret 

80001718 <IfxScuWdt_disableCpuWatchdog>:


void IfxScuWdt_disableCpuWatchdog(uint16 password)
{
80001718:	40 ae       	mov.aa %a14,%sp


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
8000171a:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
8000171e:	8f 72 00 21 	and %d2,%d2,7
    /* Select CPU Watchdog based on Core Id */
    uint32          coreId = (uint32)IfxCpu_getCoreIndex();
    Ifx_SCU_WDTCPU *wdt    = &MODULE_SCU.WDTCPU[coreId];
80001722:	7b 30 00 3f 	movh %d3,61443
80001726:	1b c3 24 36 	addi %d3,%d3,25164
8000172a:	13 c2 20 23 	madd %d2,%d3,%d2,12
8000172e:	60 22       	mov.a %a2,%d2
    if (watchdog->CON0.B.LCK)
80001730:	54 22       	ld.w %d2,[%a2]
80001732:	6f 12 0b 00 	jz.t %d2,1,80001748 <IfxScuWdt_disableCpuWatchdog+0x30>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001736:	8f 24 00 30 	sh %d3,%d4,2
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
8000173a:	8f 13 40 31 	or %d3,%d3,1
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000173e:	54 22       	ld.w %d2,[%a2]
80001740:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001744:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001746:	74 22       	st.w [%a2],%d2
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001748:	06 24       	sh %d4,2
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
8000174a:	8f 24 40 31 	or %d3,%d4,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000174e:	54 22       	ld.w %d2,[%a2]
80001750:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001754:	a6 32       	or %d2,%d3
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001756:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
80001758:	54 22       	ld.w %d2,[%a2]
8000175a:	6f 02 ff ff 	jnz.t %d2,0,80001758 <IfxScuWdt_disableCpuWatchdog+0x40>

    IfxScuWdt_clearCpuEndinitInline(wdt, password);
    wdt->CON1.B.DR = 1;         //Set DR bit in Config_1 register
8000175e:	d9 23 04 00 	lea %a3,[%a2]4
80001762:	19 22 04 00 	ld.w %d2,[%a2]4
80001766:	b7 12 81 21 	insert %d2,%d2,1,3,1
8000176a:	74 32       	st.w [%a3],%d2
}


IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
8000176c:	54 22       	ld.w %d2,[%a2]
8000176e:	6f 12 09 00 	jz.t %d2,1,80001780 <IfxScuWdt_disableCpuWatchdog+0x68>
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80001772:	8f 14 40 31 	or %d3,%d4,1
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001776:	54 22       	ld.w %d2,[%a2]
80001778:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000177c:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000177e:	74 22       	st.w [%a2],%d2
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80001780:	8f 34 40 41 	or %d4,%d4,3
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001784:	54 22       	ld.w %d2,[%a2]
80001786:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000178a:	a6 42       	or %d2,%d4
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000178c:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
8000178e:	54 22       	ld.w %d2,[%a2]
80001790:	6f 02 ff 7f 	jz.t %d2,0,8000178e <IfxScuWdt_disableCpuWatchdog+0x76>
    IfxScuWdt_setCpuEndinitInline(wdt, password);
}
80001794:	00 90       	ret 

80001796 <IfxScuWdt_disableSafetyWatchdog>:


void IfxScuWdt_disableSafetyWatchdog(uint16 password)
{
80001796:	40 ae       	mov.aa %a14,%sp
80001798:	37 04 70 40 	extr.u %d4,%d4,0,16
    if (SCU_WDTS_CON0.B.LCK)
8000179c:	91 30 00 2f 	movh.a %a2,61443
800017a0:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
800017a4:	54 22       	ld.w %d2,[%a2]
800017a6:	6f 12 0b 00 	jz.t %d2,1,800017bc <IfxScuWdt_disableSafetyWatchdog+0x26>
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800017aa:	8f 24 00 30 	sh %d3,%d4,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
800017ae:	8f 13 40 31 	or %d3,%d3,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800017b2:	54 22       	ld.w %d2,[%a2]
800017b4:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800017b8:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800017ba:	74 22       	st.w [%a2],%d2
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800017bc:	06 24       	sh %d4,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
800017be:	8f 24 40 31 	or %d3,%d4,2
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800017c2:	91 30 00 2f 	movh.a %a2,61443
800017c6:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
800017ca:	54 22       	ld.w %d2,[%a2]
800017cc:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800017d0:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800017d2:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
800017d4:	91 30 00 2f 	movh.a %a2,61443
800017d8:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
800017dc:	54 22       	ld.w %d2,[%a2]
800017de:	6f 02 fb ff 	jnz.t %d2,0,800017d4 <IfxScuWdt_disableSafetyWatchdog+0x3e>
    IfxScuWdt_clearSafetyEndinitInline(password);
    SCU_WDTS_CON1.B.DR = 1;     //Set DR bit in Config_1 register
800017e2:	91 30 00 2f 	movh.a %a2,61443
800017e6:	d9 22 2c a6 	lea %a2,[%a2]25260 <f00362ac <bmhd_3_copy+0x40c34cac>>
800017ea:	54 22       	ld.w %d2,[%a2]
800017ec:	b7 12 81 21 	insert %d2,%d2,1,3,1
800017f0:	74 22       	st.w [%a2],%d2
}


IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
800017f2:	91 30 00 2f 	movh.a %a2,61443
800017f6:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
800017fa:	54 22       	ld.w %d2,[%a2]
800017fc:	6f 12 09 00 	jz.t %d2,1,8000180e <IfxScuWdt_disableSafetyWatchdog+0x78>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001800:	8f 14 40 31 	or %d3,%d4,1
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80001804:	54 22       	ld.w %d2,[%a2]
80001806:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000180a:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000180c:	74 22       	st.w [%a2],%d2
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
8000180e:	8f 34 40 41 	or %d4,%d4,3
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80001812:	91 30 00 2f 	movh.a %a2,61443
80001816:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
8000181a:	54 22       	ld.w %d2,[%a2]
8000181c:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001820:	a6 42       	or %d2,%d4
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80001822:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
80001824:	91 30 00 2f 	movh.a %a2,61443
80001828:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
8000182c:	54 22       	ld.w %d2,[%a2]
8000182e:	6f 02 fb 7f 	jz.t %d2,0,80001824 <IfxScuWdt_disableSafetyWatchdog+0x8e>
    IfxScuWdt_setSafetyEndinitInline(password);
}
80001832:	00 90       	ret 

80001834 <IfxScuWdt_getCpuWatchdogPassword>:
    IfxScuWdt_setSafetyEndinitInline(password);
}


uint16 IfxScuWdt_getCpuWatchdogPassword(void)
{
80001834:	40 ae       	mov.aa %a14,%sp
    reg.U = __mfcr(CPU_CORE_ID);
80001836:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
8000183a:	8f 72 00 21 	and %d2,%d2,7
    return IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()]);
8000183e:	7b 30 00 3f 	movh %d3,61443
80001842:	1b c3 24 36 	addi %d3,%d3,25164
80001846:	13 c2 20 23 	madd %d2,%d3,%d2,12
    password  = watchdog->CON0.B.PW;
8000184a:	60 22       	mov.a %a2,%d2
8000184c:	54 22       	ld.w %d2,[%a2]
8000184e:	37 02 6e 21 	extr.u %d2,%d2,2,14
}
80001852:	8f f2 83 21 	xor %d2,%d2,63
80001856:	00 90       	ret 

80001858 <IfxScuWdt_getSafetyWatchdogPassword>:
    return password;
}


uint16 IfxScuWdt_getSafetyWatchdogPassword(void)
{
80001858:	40 ae       	mov.aa %a14,%sp
    password  = watchdog->CON0.B.PW;
8000185a:	91 30 00 2f 	movh.a %a2,61443
8000185e:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80001862:	54 22       	ld.w %d2,[%a2]
80001864:	37 02 6e 21 	extr.u %d2,%d2,2,14
    return IfxScuWdt_getSafetyWatchdogPasswordInline();
}
80001868:	8f f2 83 21 	xor %d2,%d2,63
8000186c:	00 90       	ret 

8000186e <IfxScuWdt_setSafetyEndinit>:
    {}
}


void IfxScuWdt_setSafetyEndinit(uint16 password)
{
8000186e:	40 ae       	mov.aa %a14,%sp
80001870:	37 04 70 40 	extr.u %d4,%d4,0,16
    if (SCU_WDTS_CON0.B.LCK)
80001874:	91 30 00 2f 	movh.a %a2,61443
80001878:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
8000187c:	54 22       	ld.w %d2,[%a2]
8000187e:	6f 12 0b 00 	jz.t %d2,1,80001894 <IfxScuWdt_setSafetyEndinit+0x26>
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001882:	8f 24 00 30 	sh %d3,%d4,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001886:	8f 13 40 31 	or %d3,%d3,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8000188a:	54 22       	ld.w %d2,[%a2]
8000188c:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001890:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80001892:	74 22       	st.w [%a2],%d2
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001894:	8f 24 00 30 	sh %d3,%d4,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001898:	8f 33 40 31 	or %d3,%d3,3
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8000189c:	91 30 00 2f 	movh.a %a2,61443
800018a0:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
800018a4:	54 22       	ld.w %d2,[%a2]
800018a6:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800018aa:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800018ac:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
800018ae:	91 30 00 2f 	movh.a %a2,61443
800018b2:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
800018b6:	54 22       	ld.w %d2,[%a2]
800018b8:	6f 02 fb 7f 	jz.t %d2,0,800018ae <IfxScuWdt_setSafetyEndinit+0x40>
    IfxScuWdt_setSafetyEndinitInline(password);
}
800018bc:	00 90       	ret 

800018be <IfxCpu_Trap_memoryManagementError>:
{
800018be:	40 ae       	mov.aa %a14,%sp
800018c0:	20 08       	sub.a %sp,8
}

IFX_INLINE void* Ifx__getA11(void)
{
    uint32 *res;
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
800018c2:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
800018c4:	8f f4 0f 41 	and %d4,%d4,255
    reg.U = __mfcr(CPU_CORE_ID);
800018c8:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
800018cc:	8f 72 00 21 	and %d2,%d2,7
800018d0:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
800018d4:	80 22       	mov.d %d2,%a2
800018d6:	0f 54 a0 30 	or %d3,%d4,%d5
800018da:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_MME_HOOK(trapWatch);
800018de:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
800018e2:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
800018e4:	0d 00 40 02 	rslcx 
    __asm("rfe");
800018e8:	00 80       	rfe 
}
800018ea:	00 90       	ret 

800018ec <IfxCpu_Trap_internalProtectionError>:
{
800018ec:	40 ae       	mov.aa %a14,%sp
800018ee:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
800018f0:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
800018f2:	b7 14 18 44 	insert %d4,%d4,1,8,24
800018f6:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
800018fa:	8f 72 00 21 	and %d2,%d2,7
800018fe:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80001902:	80 22       	mov.d %d2,%a2
80001904:	0f 54 a0 30 	or %d3,%d4,%d5
80001908:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_IPE_HOOK(trapWatch);
8000190c:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
80001910:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80001912:	0d 00 40 02 	rslcx 
    __asm("rfe");
80001916:	00 80       	rfe 
}
80001918:	00 90       	ret 

8000191a <IfxCpu_Trap_instructionError>:
{
8000191a:	40 ae       	mov.aa %a14,%sp
8000191c:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
8000191e:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80001920:	b7 24 18 44 	insert %d4,%d4,2,8,24
80001924:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80001928:	8f 72 00 21 	and %d2,%d2,7
8000192c:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80001930:	80 22       	mov.d %d2,%a2
80001932:	0f 54 a0 30 	or %d3,%d4,%d5
80001936:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_IE_HOOK(trapWatch);
8000193a:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
8000193e:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80001940:	0d 00 40 02 	rslcx 
    __asm("rfe");
80001944:	00 80       	rfe 
}
80001946:	00 90       	ret 

80001948 <IfxCpu_Trap_contextManagementError>:
{
80001948:	40 ae       	mov.aa %a14,%sp
8000194a:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
8000194c:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
8000194e:	b7 34 18 44 	insert %d4,%d4,3,8,24
80001952:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80001956:	8f 72 00 21 	and %d2,%d2,7
8000195a:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
8000195e:	80 22       	mov.d %d2,%a2
80001960:	0f 54 a0 30 	or %d3,%d4,%d5
80001964:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_CME_HOOK(trapWatch);
80001968:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
8000196c:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
8000196e:	0d 00 40 02 	rslcx 
    __asm("rfe");
80001972:	00 80       	rfe 
}
80001974:	00 90       	ret 

80001976 <IfxCpu_Trap_busError>:
{
80001976:	40 ae       	mov.aa %a14,%sp
80001978:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
8000197a:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
8000197c:	b7 44 18 44 	insert %d4,%d4,4,8,24
80001980:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80001984:	8f 72 00 21 	and %d2,%d2,7
80001988:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
8000198c:	80 22       	mov.d %d2,%a2
8000198e:	0f 54 a0 30 	or %d3,%d4,%d5
80001992:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_BE_HOOK(trapWatch);
80001996:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
8000199a:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
8000199c:	0d 00 40 02 	rslcx 
    __asm("rfe");
800019a0:	00 80       	rfe 
}
800019a2:	00 90       	ret 

800019a4 <IfxCpu_Trap_assertion>:
{
800019a4:	40 ae       	mov.aa %a14,%sp
800019a6:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
800019a8:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
800019aa:	8f f4 0f 41 	and %d4,%d4,255
800019ae:	3b 00 50 20 	mov %d2,1280
800019b2:	a6 24       	or %d4,%d2
800019b4:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
800019b8:	8f 72 00 21 	and %d2,%d2,7
800019bc:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
800019c0:	80 22       	mov.d %d2,%a2
800019c2:	0f 54 a0 30 	or %d3,%d4,%d5
800019c6:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_ASSERT_HOOK(trapWatch);
800019ca:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
800019ce:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
800019d0:	0d 00 40 02 	rslcx 
    __asm("rfe");
800019d4:	00 80       	rfe 
}
800019d6:	00 90       	ret 

800019d8 <IfxCpu_Trap_systemCall_Cpu0>:
{
800019d8:	40 ae       	mov.aa %a14,%sp
800019da:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
800019dc:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
800019de:	b7 64 18 44 	insert %d4,%d4,6,8,24
800019e2:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
800019e6:	8f 72 00 21 	and %d2,%d2,7
800019ea:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
800019ee:	80 22       	mov.d %d2,%a2
800019f0:	0f 54 a0 30 	or %d3,%d4,%d5
800019f4:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_SYSCALL_CPU0_HOOK(trapWatch);
800019f8:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
800019fc:	0d 00 40 02 	rslcx 
    __asm("rfe");
80001a00:	00 80       	rfe 
}
80001a02:	00 90       	ret 

80001a04 <IfxCpu_Trap_systemCall_Cpu1>:
{
80001a04:	40 ae       	mov.aa %a14,%sp
80001a06:	20 08       	sub.a %sp,8
80001a08:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80001a0a:	b7 64 18 44 	insert %d4,%d4,6,8,24
80001a0e:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80001a12:	8f 72 00 21 	and %d2,%d2,7
80001a16:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80001a1a:	80 22       	mov.d %d2,%a2
80001a1c:	0f 54 a0 30 	or %d3,%d4,%d5
80001a20:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_SYSCALL_CPU1_HOOK(trapWatch);
80001a24:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80001a28:	0d 00 40 02 	rslcx 
    __asm("rfe");
80001a2c:	00 80       	rfe 
}
80001a2e:	00 90       	ret 

80001a30 <IfxCpu_Trap_systemCall_Cpu2>:
{
80001a30:	40 ae       	mov.aa %a14,%sp
80001a32:	20 08       	sub.a %sp,8
80001a34:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80001a36:	b7 64 18 44 	insert %d4,%d4,6,8,24
80001a3a:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80001a3e:	8f 72 00 21 	and %d2,%d2,7
80001a42:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80001a46:	80 22       	mov.d %d2,%a2
80001a48:	0f 54 a0 30 	or %d3,%d4,%d5
80001a4c:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_SYSCALL_CPU2_HOOK(trapWatch);
80001a50:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80001a54:	0d 00 40 02 	rslcx 
    __asm("rfe");
80001a58:	00 80       	rfe 
}
80001a5a:	00 90       	ret 

80001a5c <IfxCpu_Trap_nonMaskableInterrupt>:
{
80001a5c:	40 ae       	mov.aa %a14,%sp
80001a5e:	20 08       	sub.a %sp,8
80001a60:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80001a62:	b7 74 18 44 	insert %d4,%d4,7,8,24
80001a66:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80001a6a:	8f 72 00 21 	and %d2,%d2,7
80001a6e:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80001a72:	80 22       	mov.d %d2,%a2
80001a74:	0f 54 a0 30 	or %d3,%d4,%d5
80001a78:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_NMI_HOOK(trapWatch);    
80001a7c:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80001a80:	0d 00 40 02 	rslcx 
    __asm("rfe");
80001a84:	00 80       	rfe 
}
80001a86:	00 90       	ret 

80001a88 <IfxCpu_waitEvent>:
    return retVal;
}


boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec)
{
80001a88:	40 ae       	mov.aa %a14,%sp
80001a8a:	40 4c       	mov.aa %a12,%a4
80001a8c:	02 48       	mov %d8,%d4
    volatile uint32 *sync          = (volatile uint32 *)IFXCPU_GLB_ADDR_DSPR(__mfcr(CPU_CORE_ID), event);
80001a8e:	80 42       	mov.d %d2,%a4
80001a90:	b7 02 1c 20 	insert %d2,%d2,0,0,28
80001a94:	7b 00 00 3d 	movh %d3,53248
80001a98:	5f 32 29 00 	jeq %d2,%d3,80001aea <IfxCpu_waitEvent+0x62>
}


IFX_INLINE float32 IfxScuCcu_getStmFrequency(void)
{
    return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_0) / SCU_CCUCON0.B.STMDIV;
80001a9c:	82 04       	mov %d4,0
80001a9e:	6d ff 9e f9 	call 80000dda <IfxScuCcu_getSourceFrequency>
80001aa2:	91 30 00 2f 	movh.a %a2,61443
80001aa6:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <bmhd_3_copy+0x40c34a30>>
80001aaa:	54 23       	ld.w %d3,[%a2]
80001aac:	8f f3 00 31 	and %d3,%d3,15
80001ab0:	4b 03 41 31 	itof %d3,%d3
80001ab4:	4b 32 51 20 	div.f %d2,%d2,%d3

    boolean          errorcnt      = 0U;
    /* Divide with 1000, gives the count value equivalent to milliseconds */
    uint32           stmCount      = (uint32)((IfxScuCcu_getStmFrequency() / 1000) * timeoutMilliSec);
80001ab8:	7b a0 47 34 	movh %d3,17530
80001abc:	4b 32 51 20 	div.f %d2,%d2,%d3
80001ac0:	4b 08 61 41 	utof %d4,%d8
80001ac4:	4b 24 41 40 	mul.f %d4,%d4,%d2
80001ac8:	4b 04 71 31 	ftouz %d3,%d4
    uint32           stmCountBegin = STM0_TIM0.U;
80001acc:	85 f4 10 01 	ld.w %d4,f0001010 <bmhd_3_copy+0x40bffa10>

    while ((*sync & IFXCPU_CFG_ALLCORE_DONE) != IFXCPU_CFG_ALLCORE_DONE)
80001ad0:	54 c2       	ld.w %d2,[%a12]
80001ad2:	8f 72 00 21 	and %d2,%d2,7
80001ad6:	df 72 18 00 	jeq %d2,7,80001b06 <IfxCpu_waitEvent+0x7e>
    __asm__ volatile ("nop" : : : "memory");
80001ada:	00 00       	nop 
    {
        __nop();

        if ((uint32)(STM0_TIM0.U - stmCountBegin) >= stmCount)
80001adc:	85 f2 10 01 	ld.w %d2,f0001010 <bmhd_3_copy+0x40bffa10>
80001ae0:	a2 42       	sub %d2,%d4
80001ae2:	3f 32 f7 ff 	jlt.u %d2,%d3,80001ad0 <IfxCpu_waitEvent+0x48>
        {
            errorcnt = 1;
80001ae6:	82 12       	mov %d2,1
         *     stmCountNow = 0x00000002 (before overflow)
         *     diff= stmCountNow - stmCountBegin = 4 as expected.*/
    }

    return errorcnt;
}
80001ae8:	00 90       	ret 
    volatile uint32 *sync          = (volatile uint32 *)IFXCPU_GLB_ADDR_DSPR(__mfcr(CPU_CORE_ID), event);
80001aea:	80 42       	mov.d %d2,%a4
80001aec:	b7 02 0c 3a 	insert %d3,%d2,0,20,12
80001af0:	b7 f3 03 3e 	insert %d3,%d3,15,28,3
80001af4:	4d c0 e1 2f 	mfcr %d2,$core_id
80001af8:	8f c2 01 20 	sh %d2,%d2,28
80001afc:	0b 23 80 20 	sub %d2,%d3,%d2
80001b00:	60 2c       	mov.a %a12,%d2
80001b02:	1d ff cd ff 	j 80001a9c <IfxCpu_waitEvent+0x14>
    boolean          errorcnt      = 0U;
80001b06:	82 02       	mov %d2,0
80001b08:	00 90       	ret 

80001b0a <IfxCpu_emitEvent>:


void IfxCpu_emitEvent(IfxCpu_syncEvent *event)
{
80001b0a:	40 ae       	mov.aa %a14,%sp
    Ifx__imaskldmst(event, 1, __mfcr(CPU_CORE_ID), 1);
80001b0c:	4d c0 e1 2f 	mfcr %d2,$core_id
80001b10:	82 13       	mov %d3,1
80001b12:	57 30 21 22 	imask %e2,%d3,%d2,1
80001b16:	49 42 40 08 	ldmst [%a4]0,%e2
}
80001b1a:	00 90       	ret 

80001b1c <Ifx_Ssw_clearCpuEndinit>:
    return Ifx_Ssw_getSafetyWatchdogPasswordInline();
}


void Ifx_Ssw_clearCpuEndinit(Ifx_SCU_WDTCPU *watchdog, unsigned short password)
{
80001b1c:	40 ae       	mov.aa %a14,%sp
    if (watchdog->CON0.B.LCK)
80001b1e:	54 42       	ld.w %d2,[%a4]
80001b20:	6f 12 0b 00 	jz.t %d2,1,80001b36 <Ifx_Ssw_clearCpuEndinit+0x1a>
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001b24:	8f 24 00 30 	sh %d3,%d4,2
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001b28:	54 42       	ld.w %d2,[%a4]
80001b2a:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001b2e:	a6 32       	or %d2,%d3
80001b30:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001b34:	74 42       	st.w [%a4],%d2
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001b36:	06 24       	sh %d4,2
                       ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001b38:	54 42       	ld.w %d2,[%a4]
80001b3a:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001b3e:	a6 42       	or %d2,%d4
80001b40:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = ((unsigned int)0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001b44:	74 42       	st.w [%a4],%d2
    watchdog->CON0.U;
80001b46:	54 42       	ld.w %d2,[%a4]
    Ifx_Ssw_clearCpuEndinitInline(watchdog, password);
}
80001b48:	00 90       	ret 

80001b4a <Ifx_Ssw_setCpuEndinit>:


void Ifx_Ssw_setCpuEndinit(Ifx_SCU_WDTCPU *watchdog, unsigned short password)
{
80001b4a:	40 ae       	mov.aa %a14,%sp
    if (watchdog->CON0.B.LCK)
80001b4c:	54 42       	ld.w %d2,[%a4]
80001b4e:	6f 12 0b 00 	jz.t %d2,1,80001b64 <Ifx_Ssw_setCpuEndinit+0x1a>
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001b52:	8f 24 00 30 	sh %d3,%d4,2
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001b56:	54 42       	ld.w %d2,[%a4]
80001b58:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001b5c:	a6 32       	or %d2,%d3
80001b5e:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001b62:	74 42       	st.w [%a4],%d2
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001b64:	06 24       	sh %d4,2
                       ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001b66:	54 42       	ld.w %d2,[%a4]
80001b68:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001b6c:	a6 42       	or %d2,%d4
80001b6e:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001b72:	74 42       	st.w [%a4],%d2
    watchdog->CON0.U;
80001b74:	54 42       	ld.w %d2,[%a4]
    Ifx_Ssw_setCpuEndinitInline(watchdog, password);
}
80001b76:	00 90       	ret 

80001b78 <Ifx_Ssw_clearSafetyEndinit>:


void Ifx_Ssw_clearSafetyEndinit(unsigned short password)
{
80001b78:	40 ae       	mov.aa %a14,%sp
    if (SCU_WDTS_CON0.B.LCK)
80001b7a:	91 30 00 2f 	movh.a %a2,61443
80001b7e:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80001b82:	54 22       	ld.w %d2,[%a2]
80001b84:	6f 12 0b 00 	jz.t %d2,1,80001b9a <Ifx_Ssw_clearSafetyEndinit+0x22>
                          ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001b88:	8f 24 00 30 	sh %d3,%d4,2
                          ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80001b8c:	54 22       	ld.w %d2,[%a2]
80001b8e:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001b92:	a6 32       	or %d2,%d3
80001b94:	8f 12 40 21 	or %d2,%d2,1
        SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80001b98:	74 22       	st.w [%a2],%d2
                      ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001b9a:	06 24       	sh %d4,2
                      ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80001b9c:	91 30 00 2f 	movh.a %a2,61443
80001ba0:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80001ba4:	54 22       	ld.w %d2,[%a2]
80001ba6:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001baa:	a6 42       	or %d2,%d4
80001bac:	8f 22 40 21 	or %d2,%d2,2
    SCU_WDTS_CON0.U = ((unsigned int)0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80001bb0:	74 22       	st.w [%a2],%d2
    SCU_WDTS_CON0.U;
80001bb2:	54 22       	ld.w %d2,[%a2]
    Ifx_Ssw_clearSafetyEndinitInline(password);
}
80001bb4:	00 90       	ret 

80001bb6 <Ifx_Ssw_setSafetyEndinit>:


void Ifx_Ssw_setSafetyEndinit(unsigned short password)
{
80001bb6:	40 ae       	mov.aa %a14,%sp
    if (SCU_WDTS_CON0.B.LCK)
80001bb8:	91 30 00 2f 	movh.a %a2,61443
80001bbc:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80001bc0:	54 22       	ld.w %d2,[%a2]
80001bc2:	6f 12 0b 00 	jz.t %d2,1,80001bd8 <Ifx_Ssw_setSafetyEndinit+0x22>
                          ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001bc6:	8f 24 00 30 	sh %d3,%d4,2
                          ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80001bca:	54 22       	ld.w %d2,[%a2]
80001bcc:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001bd0:	a6 32       	or %d2,%d3
80001bd2:	8f 12 40 21 	or %d2,%d2,1
        SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80001bd6:	74 22       	st.w [%a2],%d2
                      ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001bd8:	06 24       	sh %d4,2
                      ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80001bda:	91 30 00 2f 	movh.a %a2,61443
80001bde:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80001be2:	54 22       	ld.w %d2,[%a2]
80001be4:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001be8:	a6 42       	or %d2,%d4
80001bea:	8f 32 40 21 	or %d2,%d2,3
    SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80001bee:	74 22       	st.w [%a2],%d2
    SCU_WDTS_CON0.U;
80001bf0:	54 22       	ld.w %d2,[%a2]
    Ifx_Ssw_setSafetyEndinitInline(password);
}
80001bf2:	00 90       	ret 

80001bf4 <Ifx_Ssw_serviceCpuWatchdog>:


void Ifx_Ssw_serviceCpuWatchdog(Ifx_SCU_WDTCPU *watchdog, unsigned short password)
{
80001bf4:	40 ae       	mov.aa %a14,%sp
    if (watchdog->CON0.B.LCK)
80001bf6:	54 42       	ld.w %d2,[%a4]
80001bf8:	6f 12 0b 00 	jz.t %d2,1,80001c0e <Ifx_Ssw_serviceCpuWatchdog+0x1a>
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001bfc:	8f 24 00 30 	sh %d3,%d4,2
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001c00:	54 42       	ld.w %d2,[%a4]
80001c02:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001c06:	a6 32       	or %d2,%d3
80001c08:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001c0c:	74 42       	st.w [%a4],%d2
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001c0e:	06 24       	sh %d4,2
                       ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001c10:	54 42       	ld.w %d2,[%a4]
80001c12:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001c16:	a6 42       	or %d2,%d4
80001c18:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001c1c:	74 42       	st.w [%a4],%d2
    watchdog->CON0.U;
80001c1e:	54 42       	ld.w %d2,[%a4]
    Ifx_Ssw_setCpuEndinitInline(watchdog, password);
}
80001c20:	00 90       	ret 

80001c22 <Ifx_Ssw_serviceSafetyWatchdog>:


void Ifx_Ssw_serviceSafetyWatchdog(unsigned short password)
{
80001c22:	40 ae       	mov.aa %a14,%sp
    if (SCU_WDTS_CON0.B.LCK)
80001c24:	91 30 00 2f 	movh.a %a2,61443
80001c28:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80001c2c:	54 22       	ld.w %d2,[%a2]
80001c2e:	6f 12 0b 00 	jz.t %d2,1,80001c44 <Ifx_Ssw_serviceSafetyWatchdog+0x22>
                          ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001c32:	8f 24 00 30 	sh %d3,%d4,2
                          ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80001c36:	54 22       	ld.w %d2,[%a2]
80001c38:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001c3c:	a6 32       	or %d2,%d3
80001c3e:	8f 12 40 21 	or %d2,%d2,1
        SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80001c42:	74 22       	st.w [%a2],%d2
                      ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001c44:	06 24       	sh %d4,2
                      ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80001c46:	91 30 00 2f 	movh.a %a2,61443
80001c4a:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80001c4e:	54 22       	ld.w %d2,[%a2]
80001c50:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001c54:	a6 42       	or %d2,%d4
80001c56:	8f 32 40 21 	or %d2,%d2,3
    SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80001c5a:	74 22       	st.w [%a2],%d2
    SCU_WDTS_CON0.U;
80001c5c:	54 22       	ld.w %d2,[%a2]
    Ifx_Ssw_setSafetyEndinitInline(password);
}
80001c5e:	00 90       	ret 

80001c60 <Ifx_Ssw_disableCpuWatchdog>:


void Ifx_Ssw_disableCpuWatchdog(Ifx_SCU_WDTCPU *watchdog, unsigned short password)
{
80001c60:	40 ae       	mov.aa %a14,%sp
80001c62:	37 04 70 80 	extr.u %d8,%d4,0,16
    /* Select CPU Watchdog based on Core Id */
    unsigned int    cpuIndex;
    cpuIndex = Ifx_Ssw_MFCR(CPU_CORE_ID);
80001c66:	4d c0 e1 2f 	mfcr %d2,$core_id
    cpuIndex = (unsigned int)((unsigned int)cpuIndex >> IFX_CPU_CORE_ID_CORE_ID_OFF) & IFX_CPU_CORE_ID_CORE_ID_MSK;
80001c6a:	8f 72 00 21 	and %d2,%d2,7
    __asm__ volatile ("min.u %0, %1, %2" : "=d" (res) : "d" (a), "d" (b));
80001c6e:	82 53       	mov %d3,5
80001c70:	0b 32 90 21 	min.u %d2,%d2,%d3
    cpuIndex = Ifx_Ssw_MINU(cpuIndex, 5);
    Ifx_SCU_WDTCPU *wdt = &MODULE_SCU.WDTCPU[cpuIndex];
80001c74:	7b 30 00 3f 	movh %d3,61443
80001c78:	1b c3 24 36 	addi %d3,%d3,25164
80001c7c:	13 c2 20 23 	madd %d2,%d3,%d2,12
80001c80:	60 2c       	mov.a %a12,%d2

    Ifx_Ssw_clearCpuEndinit(wdt, password);
80001c82:	02 84       	mov %d4,%d8
80001c84:	60 24       	mov.a %a4,%d2
80001c86:	6d ff 4b ff 	call 80001b1c <Ifx_Ssw_clearCpuEndinit>
    wdt->CON1.B.DR = 1U;         /* Set DR bit in Config_1 register */
80001c8a:	d9 c2 04 00 	lea %a2,[%a12]4
80001c8e:	19 c2 04 00 	ld.w %d2,[%a12]4
80001c92:	b7 12 81 21 	insert %d2,%d2,1,3,1
80001c96:	74 22       	st.w [%a2],%d2
    Ifx_Ssw_setCpuEndinit(wdt, password);
80001c98:	02 84       	mov %d4,%d8
80001c9a:	40 c4       	mov.aa %a4,%a12
80001c9c:	6d ff 57 ff 	call 80001b4a <Ifx_Ssw_setCpuEndinit>
}
80001ca0:	00 90       	ret 

80001ca2 <Ifx_Ssw_enableCpuWatchdog>:


void Ifx_Ssw_enableCpuWatchdog(Ifx_SCU_WDTCPU *watchdog, unsigned short password)
{
80001ca2:	40 ae       	mov.aa %a14,%sp
80001ca4:	37 04 70 80 	extr.u %d8,%d4,0,16
    /* Select CPU Watchdog based on Core Id */
    unsigned int    cpuIndex;
    cpuIndex = Ifx_Ssw_MFCR(CPU_CORE_ID);
80001ca8:	4d c0 e1 2f 	mfcr %d2,$core_id
    cpuIndex = (unsigned int)((unsigned int)cpuIndex >> IFX_CPU_CORE_ID_CORE_ID_OFF) & IFX_CPU_CORE_ID_CORE_ID_MSK;
80001cac:	8f 72 00 21 	and %d2,%d2,7
80001cb0:	82 53       	mov %d3,5
80001cb2:	0b 32 90 21 	min.u %d2,%d2,%d3
    cpuIndex = Ifx_Ssw_MINU(cpuIndex, 5);
    Ifx_SCU_WDTCPU *wdt = &MODULE_SCU.WDTCPU[cpuIndex];
80001cb6:	7b 30 00 3f 	movh %d3,61443
80001cba:	1b c3 24 36 	addi %d3,%d3,25164
80001cbe:	13 c2 20 23 	madd %d2,%d3,%d2,12
80001cc2:	60 2c       	mov.a %a12,%d2

    Ifx_Ssw_clearCpuEndinit(wdt, password);
80001cc4:	02 84       	mov %d4,%d8
80001cc6:	60 24       	mov.a %a4,%d2
80001cc8:	6d ff 2a ff 	call 80001b1c <Ifx_Ssw_clearCpuEndinit>
    wdt->CON1.B.DR = 0U;         /* Clear DR bit in Config_1 register */
80001ccc:	d9 c2 04 00 	lea %a2,[%a12]4
80001cd0:	19 c2 04 00 	ld.w %d2,[%a12]4
80001cd4:	8f 82 c0 21 	andn %d2,%d2,8
80001cd8:	74 22       	st.w [%a2],%d2
    Ifx_Ssw_setCpuEndinit(wdt, password);
80001cda:	02 84       	mov %d4,%d8
80001cdc:	40 c4       	mov.aa %a4,%a12
80001cde:	6d ff 36 ff 	call 80001b4a <Ifx_Ssw_setCpuEndinit>
}
80001ce2:	00 90       	ret 

80001ce4 <Ifx_Ssw_disableSafetyWatchdog>:


void Ifx_Ssw_disableSafetyWatchdog(unsigned short password)
{
80001ce4:	40 ae       	mov.aa %a14,%sp
80001ce6:	37 04 70 80 	extr.u %d8,%d4,0,16
    Ifx_Ssw_clearSafetyEndinit(password);
80001cea:	02 84       	mov %d4,%d8
80001cec:	6d ff 46 ff 	call 80001b78 <Ifx_Ssw_clearSafetyEndinit>
    SCU_WDTS_CON1.B.DR = 1U;     /* Set DR bit in Config_1 register */
80001cf0:	91 30 00 2f 	movh.a %a2,61443
80001cf4:	d9 22 2c a6 	lea %a2,[%a2]25260 <f00362ac <bmhd_3_copy+0x40c34cac>>
80001cf8:	54 22       	ld.w %d2,[%a2]
80001cfa:	b7 12 81 21 	insert %d2,%d2,1,3,1
80001cfe:	74 22       	st.w [%a2],%d2
    Ifx_Ssw_setSafetyEndinit(password);
80001d00:	02 84       	mov %d4,%d8
80001d02:	6d ff 5a ff 	call 80001bb6 <Ifx_Ssw_setSafetyEndinit>
}
80001d06:	00 90       	ret 

80001d08 <Ifx_Ssw_enableSafetyWatchdog>:


void Ifx_Ssw_enableSafetyWatchdog(unsigned short password)
{
80001d08:	40 ae       	mov.aa %a14,%sp
80001d0a:	37 04 70 80 	extr.u %d8,%d4,0,16
    Ifx_Ssw_clearSafetyEndinit(password);
80001d0e:	02 84       	mov %d4,%d8
80001d10:	6d ff 34 ff 	call 80001b78 <Ifx_Ssw_clearSafetyEndinit>
    SCU_WDTS_CON1.B.DR = 0U;     /* Clear DR bit in Config_1 register */
80001d14:	91 30 00 2f 	movh.a %a2,61443
80001d18:	d9 22 2c a6 	lea %a2,[%a2]25260 <f00362ac <bmhd_3_copy+0x40c34cac>>
80001d1c:	54 22       	ld.w %d2,[%a2]
80001d1e:	8f 82 c0 21 	andn %d2,%d2,8
80001d22:	74 22       	st.w [%a2],%d2
    Ifx_Ssw_setSafetyEndinit(password);
80001d24:	02 84       	mov %d4,%d8
80001d26:	6d ff 48 ff 	call 80001bb6 <Ifx_Ssw_setSafetyEndinit>
}
80001d2a:	00 90       	ret 

80001d2c <Ifx_Ssw_startCore>:


void Ifx_Ssw_startCore(Ifx_CPU *cpu, unsigned int programCounter)
{
80001d2c:	40 ae       	mov.aa %a14,%sp
    /* Set the PC */
    cpu->PC.B.PC = (unsigned int)programCounter >> 1U;
80001d2e:	7b 20 00 20 	movh %d2,2
80001d32:	1b 82 e0 2f 	addi %d2,%d2,-504
80001d36:	01 42 00 26 	addsc.a %a2,%a4,%d2,0
80001d3a:	54 22       	ld.w %d2,[%a2]
80001d3c:	37 24 01 20 	insert %d2,%d4,%d2,0,1
80001d40:	74 22       	st.w [%a2],%d2

    /* release boot halt mode if required */
    Ifx_CPU_SYSCON syscon;
    syscon = cpu->SYSCON;
80001d42:	7b 20 00 20 	movh %d2,2
80001d46:	1b 42 e1 2f 	addi %d2,%d2,-492
80001d4a:	01 42 00 26 	addsc.a %a2,%a4,%d2,0
80001d4e:	54 22       	ld.w %d2,[%a2]

    if (syscon.B.BHALT)
80001d50:	ef 82 0b 00 	jz.t %d2,24,80001d66 <Ifx_Ssw_startCore+0x3a>
    {
        syscon.B.BHALT = 0U;
80001d54:	b7 02 01 2c 	insert %d2,%d2,0,24,1
        cpu->SYSCON    = syscon;
80001d58:	7b 20 00 40 	movh %d4,2
80001d5c:	1b 44 e1 4f 	addi %d4,%d4,-492
80001d60:	01 44 00 26 	addsc.a %a2,%a4,%d4,0
80001d64:	74 22       	st.w [%a2],%d2
    }

}
80001d66:	00 90       	ret 

80001d68 <Ifx_Ssw_getStmFrequency>:
    Ifx_Ssw_setCpuEndinit(wdt, cpuWdtPw);
}


float Ifx_Ssw_getStmFrequency(void)
{
80001d68:	40 ae       	mov.aa %a14,%sp
    float        oscFreq    = IFX_CFG_SSW_XTAL_FREQUENCY;
    float        sourcefreq = IFX_CFG_SSW_EVR_OSC_FREQUENCY;
    unsigned int insel      = SCU_SYSPLLCON0.B.INSEL;
80001d6a:	91 30 00 2f 	movh.a %a2,61443
80001d6e:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <bmhd_3_copy+0x40c34a18>>
80001d72:	54 22       	ld.w %d2,[%a2]
80001d74:	8f 22 1e 20 	sh %d2,%d2,-30

    if (insel == 2U)
80001d78:	df 22 40 00 	jeq %d2,2,80001df8 <Ifx_Ssw_getStmFrequency+0x90>
    {
        oscFreq = IFX_CFG_SSW_SYSCLK_PIN_FREQUENCY;
    }
    else if (insel == 1U)
80001d7c:	df 12 38 00 	jeq %d2,1,80001dec <Ifx_Ssw_getStmFrequency+0x84>
    {
        oscFreq = IFX_CFG_SSW_XTAL_FREQUENCY;
    }
    else
    {
        oscFreq = IFX_CFG_SSW_EVR_OSC_FREQUENCY;
80001d80:	7b f0 cb 34 	movh %d3,19647
80001d84:	1b 03 c2 3b 	addi %d3,%d3,-17376
    }

    if (SCU_CCUCON0.B.CLKSEL != 0U)
80001d88:	91 30 00 2f 	movh.a %a2,61443
80001d8c:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <bmhd_3_copy+0x40c34a30>>
80001d90:	54 22       	ld.w %d2,[%a2]
80001d92:	37 02 62 2e 	extr.u %d2,%d2,28,2
80001d96:	df 02 37 00 	jeq %d2,0,80001e04 <Ifx_Ssw_getStmFrequency+0x9c>
    {
        sourcefreq = (oscFreq * (SCU_SYSPLLCON0.B.NDIV + 1U)) /
80001d9a:	91 30 00 2f 	movh.a %a2,61443
80001d9e:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <bmhd_3_copy+0x40c34a18>>
80001da2:	54 22       	ld.w %d2,[%a2]
80001da4:	37 02 e7 24 	extr.u %d2,%d2,9,7
80001da8:	c2 12       	add %d2,1
80001daa:	4b 02 61 21 	utof %d2,%d2
80001dae:	4b 32 41 30 	mul.f %d3,%d2,%d3
                     ((SCU_SYSPLLCON0.B.PDIV + 1U) * (SCU_SYSPLLCON1.B.K2DIV + 1U));
80001db2:	54 24       	ld.w %d4,[%a2]
80001db4:	37 04 63 4c 	extr.u %d4,%d4,24,3
80001db8:	91 30 00 2f 	movh.a %a2,61443
80001dbc:	d9 22 1c 06 	lea %a2,[%a2]24604 <f003601c <bmhd_3_copy+0x40c34a1c>>
80001dc0:	54 22       	ld.w %d2,[%a2]
80001dc2:	8f 72 00 21 	and %d2,%d2,7
80001dc6:	c2 12       	add %d2,1
80001dc8:	03 24 0a 22 	madd %d2,%d2,%d4,%d2
        sourcefreq = (oscFreq * (SCU_SYSPLLCON0.B.NDIV + 1U)) /
80001dcc:	4b 02 61 21 	utof %d2,%d2
80001dd0:	4b 23 51 40 	div.f %d4,%d3,%d2
    }

    return sourcefreq / SCU_CCUCON0.B.STMDIV;
80001dd4:	91 30 00 2f 	movh.a %a2,61443
80001dd8:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <bmhd_3_copy+0x40c34a30>>
80001ddc:	54 22       	ld.w %d2,[%a2]
80001dde:	8f f2 00 21 	and %d2,%d2,15
80001de2:	4b 02 41 21 	itof %d2,%d2
}
80001de6:	4b 24 51 20 	div.f %d2,%d4,%d2
80001dea:	00 90       	ret 
        oscFreq = IFX_CFG_SSW_XTAL_FREQUENCY;
80001dec:	7b 90 b9 34 	movh %d3,19353
80001df0:	1b 03 68 39 	addi %d3,%d3,-27008
80001df4:	1d ff ca ff 	j 80001d88 <Ifx_Ssw_getStmFrequency+0x20>
        oscFreq = IFX_CFG_SSW_SYSCLK_PIN_FREQUENCY;
80001df8:	7b 90 b9 34 	movh %d3,19353
80001dfc:	1b 03 68 39 	addi %d3,%d3,-27008
80001e00:	1d ff c4 ff 	j 80001d88 <Ifx_Ssw_getStmFrequency+0x20>
    float        sourcefreq = IFX_CFG_SSW_EVR_OSC_FREQUENCY;
80001e04:	7b f0 cb 44 	movh %d4,19647
80001e08:	1b 04 c2 4b 	addi %d4,%d4,-17376
80001e0c:	1d ff e4 ff 	j 80001dd4 <Ifx_Ssw_getStmFrequency+0x6c>

80001e10 <Ifx_Ssw_doCppInit>:

void Ifx_Ssw_doCppInit(void)
{
80001e10:	40 ae       	mov.aa %a14,%sp
80001e12:	20 08       	sub.a %sp,8
{
    Ifx_Ssw_CTablePtr pBlockDest, pBlockSrc;
    unsigned int      uiLength, uiCnt;
    unsigned int     *pTable;
    /* clear table */
    pTable = (unsigned int *)&__clear_table;
80001e14:	91 00 00 28 	movh.a %a2,32768
80001e18:	d9 22 44 40 	lea %a2,[%a2]1284 <80000504 <__clear_table>>

    while (pTable)
80001e1c:	1d 00 32 00 	j 80001e80 <Ifx_Ssw_doCppInit+0x70>
            break;
        }

        uiCnt = uiLength / 8;

        while (uiCnt--)
80001e20:	91 00 00 28 	movh.a %a2,32768
80001e24:	d9 22 4c 60 	lea %a2,[%a2]1420 <8000058c <__copy_table>>
80001e28:	1d 00 7c 00 	j 80001f20 <Ifx_Ssw_doCppInit+0x110>
            *pBlockDest.ullPtr++ = 0;
80001e2c:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
80001e30:	80 22       	mov.d %d2,%a2
80001e32:	1b 82 00 20 	addi %d2,%d2,8
80001e36:	59 e2 f8 ff 	st.w [%a14]-8,%d2
80001e3a:	d2 02       	mov %e2,0
80001e3c:	89 22 40 09 	st.d [%a2],%e2
        while (uiCnt--)
80001e40:	02 52       	mov %d2,%d5
80001e42:	1b f2 ff 5f 	addi %d5,%d2,-1
80001e46:	df 02 f3 ff 	jne %d2,0,80001e2c <Ifx_Ssw_doCppInit+0x1c>
        if (uiLength & 0x4)
80001e4a:	6f 24 0a 00 	jz.t %d4,2,80001e5e <Ifx_Ssw_doCppInit+0x4e>
            *pBlockDest.uiPtr++ = 0;
80001e4e:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
80001e52:	80 22       	mov.d %d2,%a2
80001e54:	c2 42       	add %d2,4
80001e56:	59 e2 f8 ff 	st.w [%a14]-8,%d2
80001e5a:	82 02       	mov %d2,0
80001e5c:	74 22       	st.w [%a2],%d2
        if (uiLength & 0x2)
80001e5e:	6f 14 0a 00 	jz.t %d4,1,80001e72 <Ifx_Ssw_doCppInit+0x62>
            *pBlockDest.usPtr++ = 0;
80001e62:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
80001e66:	80 22       	mov.d %d2,%a2
80001e68:	c2 22       	add %d2,2
80001e6a:	59 e2 f8 ff 	st.w [%a14]-8,%d2
80001e6e:	82 02       	mov %d2,0
80001e70:	b4 22       	st.h [%a2],%d2
        if (uiLength & 0x1)
80001e72:	6f 04 06 00 	jz.t %d4,0,80001e7e <Ifx_Ssw_doCppInit+0x6e>
            *pBlockDest.ucPtr = 0;
80001e76:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
80001e7a:	82 02       	mov %d2,0
80001e7c:	34 22       	st.b [%a2],%d2
        while (uiCnt--)
80001e7e:	40 32       	mov.aa %a2,%a3
    while (pTable)
80001e80:	bd 02 d0 7f 	jz.a %a2,80001e20 <Ifx_Ssw_doCppInit+0x10>
        pBlockDest.uiPtr = (unsigned int *)*pTable++;
80001e84:	d9 23 08 00 	lea %a3,[%a2]8
80001e88:	54 22       	ld.w %d2,[%a2]
80001e8a:	59 e2 f8 ff 	st.w [%a14]-8,%d2
        uiLength         = *pTable++;
80001e8e:	19 24 04 00 	ld.w %d4,[%a2]4
        if (uiLength == 0xFFFFFFFF)
80001e92:	df f4 c7 7f 	jeq %d4,-1,80001e20 <Ifx_Ssw_doCppInit+0x10>
        uiCnt = uiLength / 8;
80001e96:	8f d4 1f 20 	sh %d2,%d4,-3
        while (uiCnt--)
80001e9a:	1d ff d4 ff 	j 80001e42 <Ifx_Ssw_doCppInit+0x32>
        {
            *pBlockDest.ullPtr++ = *pBlockSrc.ullPtr++;
80001e9e:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80001ea2:	80 22       	mov.d %d2,%a2
80001ea4:	1b 82 00 20 	addi %d2,%d2,8
80001ea8:	59 e2 fc ff 	st.w [%a14]-4,%d2
80001eac:	99 e3 f8 ff 	ld.a %a3,[%a14]-8
80001eb0:	80 32       	mov.d %d2,%a3
80001eb2:	1b 82 00 20 	addi %d2,%d2,8
80001eb6:	59 e2 f8 ff 	st.w [%a14]-8,%d2
80001eba:	09 26 40 09 	ld.d %e6,[%a2]
80001ebe:	89 36 40 09 	st.d [%a3],%e6
        while (uiCnt--)
80001ec2:	02 42       	mov %d2,%d4
80001ec4:	1b f2 ff 4f 	addi %d4,%d2,-1
80001ec8:	df 02 eb ff 	jne %d2,0,80001e9e <Ifx_Ssw_doCppInit+0x8e>
        }

        if (uiLength & 0x4)
80001ecc:	6f 23 10 00 	jz.t %d3,2,80001eec <Ifx_Ssw_doCppInit+0xdc>
        {
            *pBlockDest.uiPtr++ = *pBlockSrc.uiPtr++;
80001ed0:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80001ed4:	80 22       	mov.d %d2,%a2
80001ed6:	c2 42       	add %d2,4
80001ed8:	59 e2 fc ff 	st.w [%a14]-4,%d2
80001edc:	99 e3 f8 ff 	ld.a %a3,[%a14]-8
80001ee0:	80 32       	mov.d %d2,%a3
80001ee2:	c2 42       	add %d2,4
80001ee4:	59 e2 f8 ff 	st.w [%a14]-8,%d2
80001ee8:	54 22       	ld.w %d2,[%a2]
80001eea:	74 32       	st.w [%a3],%d2
        }

        if (uiLength & 0x2)
80001eec:	6f 13 11 00 	jz.t %d3,1,80001f0e <Ifx_Ssw_doCppInit+0xfe>
        {
            *pBlockDest.usPtr++ = *pBlockSrc.usPtr++;
80001ef0:	99 e3 fc ff 	ld.a %a3,[%a14]-4
80001ef4:	80 32       	mov.d %d2,%a3
80001ef6:	c2 22       	add %d2,2
80001ef8:	59 e2 fc ff 	st.w [%a14]-4,%d2
80001efc:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
80001f00:	80 22       	mov.d %d2,%a2
80001f02:	c2 22       	add %d2,2
80001f04:	59 e2 f8 ff 	st.w [%a14]-8,%d2
80001f08:	b9 32 00 00 	ld.hu %d2,[%a3]0
80001f0c:	b4 22       	st.h [%a2],%d2
        }

        if (uiLength & 0x1)
80001f0e:	6f 03 08 00 	jz.t %d3,0,80001f1e <Ifx_Ssw_doCppInit+0x10e>
        {
            *pBlockDest.ucPtr = *pBlockSrc.ucPtr;
80001f12:	99 e3 fc ff 	ld.a %a3,[%a14]-4
80001f16:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
80001f1a:	14 32       	ld.bu %d2,[%a3]
80001f1c:	34 22       	st.b [%a2],%d2
        while (uiCnt--)
80001f1e:	60 52       	mov.a %a2,%d5
    while (pTable)
80001f20:	bd 02 14 00 	jz.a %a2,80001f48 <Ifx_Ssw_doCppInit+0x138>
        pBlockSrc.uiPtr  = (unsigned int *)*pTable++;
80001f24:	54 22       	ld.w %d2,[%a2]
80001f26:	59 e2 fc ff 	st.w [%a14]-4,%d2
        pBlockDest.uiPtr = (unsigned int *)*pTable++;
80001f2a:	19 22 04 00 	ld.w %d2,[%a2]4
80001f2e:	59 e2 f8 ff 	st.w [%a14]-8,%d2
        uiLength         = *pTable++;
80001f32:	80 22       	mov.d %d2,%a2
80001f34:	1b c2 00 50 	addi %d5,%d2,12
80001f38:	19 23 08 00 	ld.w %d3,[%a2]8
        if (uiLength == 0xFFFFFFFF)
80001f3c:	df f3 06 00 	jeq %d3,-1,80001f48 <Ifx_Ssw_doCppInit+0x138>
        uiCnt = uiLength / 8;
80001f40:	8f d3 1f 20 	sh %d2,%d3,-3
        while (uiCnt--)
80001f44:	1d ff c0 ff 	j 80001ec4 <Ifx_Ssw_doCppInit+0xb4>
	#elif defined(__HIGHTEC__) && !defined(__clang__)
		extern void _init(void); /* cpp initialization */
		_init();
	#elif defined(__GNUC__) && !defined(__HIGHTEC__)
		extern void _init(void); /* cpp initialization */
		_init();
80001f48:	6d ff 7a f5 	call 80000a3c <_init>
	#elif defined(__ghs__)
		extern void _main(void); /* cpp initialization */
		_main();
	#endif
}
80001f4c:	00 90       	ret 

80001f4e <Ifx_Ssw_Pms_Init>:
#pragma GCC optimize ("O1")
#endif

#if (IFX_CFG_SSW_ENABLE_PMS_INIT == 1U)
void Ifx_Ssw_Pms_Init(void)
{
80001f4e:	40 ae       	mov.aa %a14,%sp
    uint16 password = MODULE_SCU.SEICON0.B.EPW ^ 0x003F;
80001f50:	91 30 00 2f 	movh.a %a2,61443
80001f54:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <bmhd_3_copy+0x40c34a00>>
80001f58:	19 22 34 a0 	ld.w %d2,[%a2]692 <f00302b4 <bmhd_3_copy+0x40c2ecb4>>
80001f5c:	37 02 6e 21 	extr.u %d2,%d2,2,14
    uint32                                      regVal;
    uint16                                      endinitSfty_pw = IfxScuWdt_getGlobalSafetyEndinitPasswordInline();
    const IfxPmsEvr_initSequencePhase          *phaseConfig;
    const IfxPmsEvr_StepDownRegulatorRegConfig *regConfig;

    if (PMS_EVRSTAT.B.EVRC == 1U)
80001f60:	91 50 02 2f 	movh.a %a2,61477
80001f64:	d9 22 2c 08 	lea %a2,[%a2]-32724 <f024802c <bmhd_3_copy+0x40e46a2c>>
80001f68:	54 23       	ld.w %d3,[%a2]
80001f6a:	6f 03 04 80 	jnz.t %d3,0,80001f72 <Ifx_Ssw_Pms_Init+0x24>
}


IFX_SSW_INLINE void Ifx_Ssw_jumpBackToLink(void)
{
    __asm__ volatile ("ji %a11");
80001f6e:	dc 0b       	ji %a11
        __debug();
        /* Application may have call to error handling here */
    }

    Ifx_Ssw_jumpBackToLink();
}
80001f70:	00 90       	ret 
    {
        /*Loop through each configured phase*/
        for (phaseConfig = &sequence->phaseConfig[0];
80001f72:	91 00 00 28 	movh.a %a2,32768
80001f76:	d9 23 04 f0 	lea %a3,[%a2]964 <800003c4 <IfxPmsEvr_cfgSequenceDefault>>
80001f7a:	b0 43       	add.a %a3,4
80001f7c:	d4 33       	ld.a %a3,[%a3]
             phaseConfig < &sequence->phaseConfig[sequence->numOfPhases];
80001f7e:	39 27 04 f0 	ld.bu %d7,[%a2]964 <800003c4 <IfxPmsEvr_cfgSequenceDefault>>
80001f82:	53 c7 20 70 	mul %d7,%d7,12
80001f86:	80 33       	mov.d %d3,%a3
80001f88:	42 73       	add %d3,%d7
80001f8a:	80 34       	mov.d %d4,%a3
80001f8c:	7f 34 f1 ff 	jge.u %d4,%d3,80001f6e <Ifx_Ssw_Pms_Init+0x20>
             phaseConfig++)
        {
            IfxScuWdt_clearGlobalSafetyEndinitInline(endinitSfty_pw);
80001f90:	8f f2 83 21 	xor %d2,%d2,63
    MODULE_SCU.SEICON0.U = (0xFFFCU << 16U) | (password << IFX_SCU_SEICON0_EPW_OFF);
80001f94:	06 22       	sh %d2,2
80001f96:	7b c0 ff 1f 	movh %d1,65532
80001f9a:	a6 21       	or %d1,%d2
    MODULE_SCU.SEICON0.U = (0xFFFCU << 16U) | (password << IFX_SCU_SEICON0_EPW_OFF) | (1 << IFX_SCU_SEICON0_ENDINIT_OFF);
80001f9c:	7b c0 ff 0f 	movh %d0,65532
80001fa0:	c2 20       	add %d0,2
80001fa2:	a6 20       	or %d0,%d2
    boolean                                     pmsInitDone    = TRUE;
80001fa4:	82 18       	mov %d8,1
    MODULE_SCU.SEICON0.U = (0xFFFCU << 16U) | (password << IFX_SCU_SEICON0_EPW_OFF);
80001fa6:	91 30 00 4f 	movh.a %a4,61443
80001faa:	d9 44 00 06 	lea %a4,[%a4]24576 <f0036000 <bmhd_3_copy+0x40c34a00>>
    while (MODULE_SCU.SEICON0.B.ENDINIT == 1)
80001fae:	02 84       	mov %d4,%d8
                 * However, for this function, as this is used only with CPU0 startup no wait required
                 */
                (*((volatile uint32 *)regConfig->regAddr)) = regVal; /*Write to the physical register*/
            }

            PMS_EVRSDCTRL0.B.UP = 1;
80001fb0:	91 50 02 5f 	movh.a %a5,61477
80001fb4:	d9 55 08 48 	lea %a5,[%a5]-32504 <f0248108 <bmhd_3_copy+0x40e46b08>>
            /*Now, wait for the UP bit at EVRSDCTRL0 is reset, which is to indicate the configurations are done*/
            do
            {
                if (--timeoutCount <= 0)
                {
                    pmsInitDone = FALSE;
80001fb8:	82 09       	mov %d9,0
}


IFX_INLINE void IfxPmsEvr_wait(float32 waitInSec)
{
    uint32 stmCount      = (uint32)((float32)33000000UL * waitInSec);
80001fba:	7b c0 bf 64 	movh %d6,19452
80001fbe:	1b 06 52 6c 	addi %d6,%d6,-15072
    uint32 stmCountBegin = STM0_TIM0.U;     /* it is necessary to get this value to have minimum 100uS delay in subsequent CPU start */
80001fc2:	c5 f6 10 01 	lea %a6,f0001010 <bmhd_3_copy+0x40bffa10>
             phaseConfig < &sequence->phaseConfig[sequence->numOfPhases];
80001fc6:	d9 2c 04 f0 	lea %a12,[%a2]964 <800003c4 <IfxPmsEvr_cfgSequenceDefault>>
80001fca:	1d 00 15 00 	j 80001ff4 <Ifx_Ssw_Pms_Init+0xa6>
    uint32 stmCount      = (uint32)((float32)33000000UL * waitInSec);
80001fce:	19 32 08 00 	ld.w %d2,[%a3]8
80001fd2:	4b 26 41 20 	mul.f %d2,%d6,%d2
80001fd6:	4b 02 71 31 	ftouz %d3,%d2
    uint32 stmCountBegin = STM0_TIM0.U;     /* it is necessary to get this value to have minimum 100uS delay in subsequent CPU start */
80001fda:	54 65       	ld.w %d5,[%a6]

    while ((uint32)(STM0_TIM0.U - stmCountBegin) < stmCount)
80001fdc:	54 62       	ld.w %d2,[%a6]
80001fde:	a2 52       	sub %d2,%d5
80001fe0:	3f 32 fe ff 	jlt.u %d2,%d3,80001fdc <Ifx_Ssw_Pms_Init+0x8e>
             phaseConfig++)
80001fe4:	d9 33 0c 00 	lea %a3,[%a3]12
             phaseConfig < &sequence->phaseConfig[sequence->numOfPhases];
80001fe8:	19 c2 04 00 	ld.w %d2,[%a12]4
80001fec:	42 72       	add %d2,%d7
80001fee:	80 33       	mov.d %d3,%a3
80001ff0:	7f 23 3d 80 	jge.u %d3,%d2,8000206a <Ifx_Ssw_Pms_Init+0x11c>
    MODULE_SCU.SEICON0.U = (0xFFFCU << 16U) | (password << IFX_SCU_SEICON0_EPW_OFF);
80001ff4:	59 41 34 a0 	st.w [%a4]692 <f00302b4 <bmhd_3_copy+0x40c2ecb4>>,%d1
    while (MODULE_SCU.SEICON0.B.ENDINIT == 1)
80001ff8:	19 42 34 a0 	ld.w %d2,[%a4]692 <f00302b4 <bmhd_3_copy+0x40c2ecb4>>
80001ffc:	37 02 e1 20 	extr.u %d2,%d2,1,1
80002000:	5f 42 fc 7f 	jeq %d2,%d4,80001ff8 <Ifx_Ssw_Pms_Init+0xaa>
            for (regConfig = &phaseConfig->regConfig[0];
80002004:	99 32 04 00 	ld.a %a2,[%a3]4
                 regConfig < &phaseConfig->regConfig[phaseConfig->numOfRegisters];
80002008:	14 32       	ld.bu %d2,[%a3]
8000200a:	80 23       	mov.d %d3,%a2
8000200c:	13 c2 20 23 	madd %d2,%d3,%d2,12
80002010:	7f 23 16 80 	jge.u %d3,%d2,8000203c <Ifx_Ssw_Pms_Init+0xee>
                regVal  = (*((volatile uint32 *)regConfig->regAddr));
80002014:	d4 27       	ld.a %a7,[%a2]
80002016:	54 72       	ld.w %d2,[%a7]
                regVal &= ~regConfig->mask;
80002018:	19 23 08 00 	ld.w %d3,[%a2]8
8000201c:	0f 32 e0 20 	andn %d2,%d2,%d3
                regVal |= regConfig->value;
80002020:	19 23 04 00 	ld.w %d3,[%a2]4
80002024:	a6 32       	or %d2,%d3
                (*((volatile uint32 *)regConfig->regAddr)) = regVal; /*Write to the physical register*/
80002026:	74 72       	st.w [%a7],%d2
                 regConfig++)
80002028:	d9 22 0c 00 	lea %a2,[%a2]12
                 regConfig < &phaseConfig->regConfig[phaseConfig->numOfRegisters];
8000202c:	14 32       	ld.bu %d2,[%a3]
8000202e:	19 33 04 00 	ld.w %d3,[%a3]4
80002032:	13 c2 20 23 	madd %d2,%d3,%d2,12
80002036:	80 23       	mov.d %d3,%a2
80002038:	3f 23 ee ff 	jlt.u %d3,%d2,80002014 <Ifx_Ssw_Pms_Init+0xc6>
            PMS_EVRSDCTRL0.B.UP = 1;
8000203c:	54 52       	ld.w %d2,[%a5]
8000203e:	b7 12 01 2f 	insert %d2,%d2,1,30,1
80002042:	74 52       	st.w [%a5],%d2
    MODULE_SCU.SEICON0.U = (0xFFFCU << 16U) | (password << IFX_SCU_SEICON0_EPW_OFF) | (1 << IFX_SCU_SEICON0_ENDINIT_OFF);
80002044:	59 40 34 a0 	st.w [%a4]692 <f00302b4 <bmhd_3_copy+0x40c2ecb4>>,%d0
    while (MODULE_SCU.SEICON0.B.ENDINIT == 0)
80002048:	19 42 34 a0 	ld.w %d2,[%a4]692 <f00302b4 <bmhd_3_copy+0x40c2ecb4>>
8000204c:	6f 12 fe 7f 	jz.t %d2,1,80002048 <Ifx_Ssw_Pms_Init+0xfa>
80002050:	3b f0 0f 20 	mov %d2,255
            } while (PMS_EVRSDCTRL0.B.UP == 1);
80002054:	54 53       	ld.w %d3,[%a5]
80002056:	37 03 61 3f 	extr.u %d3,%d3,30,1
8000205a:	5f 43 ba ff 	jne %d3,%d4,80001fce <Ifx_Ssw_Pms_Init+0x80>
                if (--timeoutCount <= 0)
8000205e:	c2 f2       	add %d2,-1
80002060:	df 02 fa ff 	jne %d2,0,80002054 <Ifx_Ssw_Pms_Init+0x106>
                    pmsInitDone = FALSE;
80002064:	02 98       	mov %d8,%d9
80002066:	1d ff b4 ff 	j 80001fce <Ifx_Ssw_Pms_Init+0x80>
    if (IfxPmsEvr_runInitSequence(&IfxPmsEvr_cfgSequenceDefault) == 0)
8000206a:	df 08 82 ff 	jne %d8,0,80001f6e <Ifx_Ssw_Pms_Init+0x20>
    __asm__ volatile ("debug" : : : "memory");
8000206e:	00 a0       	debug 
}
80002070:	1d ff 7f ff 	j 80001f6e <Ifx_Ssw_Pms_Init+0x20>

80002074 <Ifx_Ssw_Pms_InitCheck>:

#if (IFX_CFG_SSW_ENABLE_PMS_INIT_CHECK == 1U)
void Ifx_Ssw_Pms_InitCheck(void)
{
80002074:	40 ae       	mov.aa %a14,%sp
    if (PMS_EVRSTAT.B.EVRC == 1U)
80002076:	91 50 02 2f 	movh.a %a2,61477
8000207a:	d9 22 2c 08 	lea %a2,[%a2]-32724 <f024802c <bmhd_3_copy+0x40e46a2c>>
8000207e:	54 22       	ld.w %d2,[%a2]
80002080:	6f 02 04 80 	jnz.t %d2,0,80002088 <Ifx_Ssw_Pms_InitCheck+0x14>
80002084:	dc 0b       	ji %a11
    {
        __debug();
        /* Application may have call to error handling here */
    }
    Ifx_Ssw_jumpBackToLink();
}
80002086:	00 90       	ret 
        for (regCfgCount = 0; regCfgCount < checkConfig->numOfRegisters; regCfgCount++)
80002088:	91 00 00 28 	movh.a %a2,32768
8000208c:	39 25 34 a0 	ld.bu %d5,[%a2]692 <800002b4 <IfxPmsEvr_checkRegCfgDefault>>
80002090:	bf 15 1d 00 	jlt %d5,1,800020ca <Ifx_Ssw_Pms_InitCheck+0x56>
            const IfxPmsEvr_StepDownRegulatorRegConfig *regConfig = &checkConfig->regConfig[regCfgCount];
80002094:	d9 22 34 a0 	lea %a2,[%a2]692 <800002b4 <IfxPmsEvr_checkRegCfgDefault>>
80002098:	b0 42       	add.a %a2,4
8000209a:	d4 22       	ld.a %a2,[%a2]
    boolean allRight = TRUE;
8000209c:	82 12       	mov %d2,1
        for (regCfgCount = 0; regCfgCount < checkConfig->numOfRegisters; regCfgCount++)
8000209e:	82 03       	mov %d3,0
            regVal  = (*((volatile uint32 *)regConfig->regAddr));
800020a0:	d4 23       	ld.a %a3,[%a2]
800020a2:	54 34       	ld.w %d4,[%a3]
            regVal &= regConfig->mask;
800020a4:	19 26 08 00 	ld.w %d6,[%a2]8
800020a8:	26 64       	and %d4,%d6
            if (regVal != regConfig->value)
800020aa:	19 26 04 00 	ld.w %d6,[%a2]4
                allRight = FALSE;
800020ae:	0b 64 00 41 	eq %d4,%d4,%d6
800020b2:	ab 02 80 24 	sel %d2,%d4,%d2,0
        for (regCfgCount = 0; regCfgCount < checkConfig->numOfRegisters; regCfgCount++)
800020b6:	c2 13       	add %d3,1
800020b8:	d9 22 0c 00 	lea %a2,[%a2]12
800020bc:	5f 53 f2 ff 	jne %d3,%d5,800020a0 <Ifx_Ssw_Pms_InitCheck+0x2c>
        if (allRight == TRUE)
800020c0:	df 12 05 00 	jeq %d2,1,800020ca <Ifx_Ssw_Pms_InitCheck+0x56>
    __asm__ volatile ("debug" : : : "memory");
800020c4:	00 a0       	debug 
}
800020c6:	1d ff df ff 	j 80002084 <Ifx_Ssw_Pms_InitCheck+0x10>
            if (PMS_EVRSTAT.B.SDVOK != 1)
800020ca:	91 50 02 2f 	movh.a %a2,61477
800020ce:	d9 22 2c 08 	lea %a2,[%a2]-32724 <f024802c <bmhd_3_copy+0x40e46a2c>>
800020d2:	54 22       	ld.w %d2,[%a2]
800020d4:	ef 52 d8 ff 	jnz.t %d2,21,80002084 <Ifx_Ssw_Pms_InitCheck+0x10>
800020d8:	1d ff f6 ff 	j 800020c4 <Ifx_Ssw_Pms_InitCheck+0x50>

800020dc <__fixunsdfsi>:
800020dc:	82 06       	mov %d6,0
800020de:	7b 00 1e 74 	movh %d7,16864
800020e2:	60 4d       	mov.a %a13,%d4
800020e4:	60 5c       	mov.a %a12,%d5
800020e6:	6d 00 91 02 	call 80002608 <__gedf2>
800020ea:	ff 02 07 00 	jge %d2,0,800020f8 <__fixunsdfsi+0x1c>
800020ee:	80 d4       	mov.d %d4,%a13
800020f0:	80 c5       	mov.d %d5,%a12
800020f2:	6d 00 ab 02 	call 80002648 <__fixdfsi>
800020f6:	00 90       	ret 
800020f8:	82 06       	mov %d6,0
800020fa:	7b 00 1e 74 	movh %d7,16864
800020fe:	80 d4       	mov.d %d4,%a13
80002100:	80 c5       	mov.d %d5,%a12
80002102:	6d 00 4e 01 	call 8000239e <__subdf3>
80002106:	0b 23 10 48 	mov %e4,%d3,%d2
8000210a:	6d 00 9f 02 	call 80002648 <__fixdfsi>
8000210e:	9b 02 00 28 	addih %d2,%d2,32768
80002112:	00 90       	ret 

80002114 <__extendsfdf2>:
80002114:	20 20       	sub.a %sp,32
80002116:	d9 a5 10 00 	lea %a5,[%sp]16
8000211a:	d9 a4 0c 00 	lea %a4,[%sp]12
8000211e:	59 a4 0c 00 	st.w [%sp]12,%d4
80002122:	6d 00 e1 02 	call 800026e4 <__unpack_f>
80002126:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000212a:	19 a6 18 00 	ld.w %d6,[%sp]24
8000212e:	53 12 40 40 	mul.u %e4,%d2,1
80002132:	77 45 00 3f 	dextr %d3,%d5,%d4,30
80002136:	8f e4 01 20 	sh %d2,%d4,30
8000213a:	19 a5 14 00 	ld.w %d5,[%sp]20
8000213e:	19 a4 10 00 	ld.w %d4,[%sp]16
80002142:	74 a2       	st.w [%sp],%d2
80002144:	59 a3 04 00 	st.w [%sp]4,%d3
80002148:	6d 00 be 02 	call 800026c4 <__make_dp>
8000214c:	00 90       	ret 

8000214e <_fpadd_parts>:
8000214e:	54 42       	ld.w %d2,[%a4]
80002150:	40 42       	mov.aa %a2,%a4
80002152:	bf 22 c2 80 	jlt.u %d2,2,800022d6 <_fpadd_parts+0x188>
80002156:	54 53       	ld.w %d3,[%a5]
80002158:	40 52       	mov.aa %a2,%a5
8000215a:	bf 23 be 80 	jlt.u %d3,2,800022d6 <_fpadd_parts+0x188>
8000215e:	df 42 e3 00 	jeq %d2,4,80002324 <_fpadd_parts+0x1d6>
80002162:	df 43 ba 00 	jeq %d3,4,800022d6 <_fpadd_parts+0x188>
80002166:	df 23 b9 00 	jeq %d3,2,800022d8 <_fpadd_parts+0x18a>
8000216a:	df 22 b6 00 	jeq %d2,2,800022d6 <_fpadd_parts+0x188>
8000216e:	19 40 08 00 	ld.w %d0,[%a4]8
80002172:	19 57 08 00 	ld.w %d7,[%a5]8
80002176:	09 44 4c 09 	ld.d %e4,[%a4]12
8000217a:	0b 70 80 60 	sub %d6,%d0,%d7
8000217e:	09 52 4c 09 	ld.d %e2,[%a5]12
80002182:	bf 06 c2 00 	jlt %d6,0,80002306 <_fpadd_parts+0x1b8>
80002186:	8b 06 84 12 	ge %d1,%d6,64
8000218a:	df 01 c4 80 	jne %d1,0,80002312 <_fpadd_parts+0x1c4>
8000218e:	df 06 2a 00 	jeq %d6,0,800021e2 <_fpadd_parts+0x94>
80002192:	8b 06 82 72 	ge %d7,%d6,32
80002196:	2b 32 50 97 	seln %d9,%d7,%d2,%d3
8000219a:	ab 03 a0 87 	seln %d8,%d7,%d3,0
8000219e:	8f f6 01 71 	and %d7,%d6,31
800021a2:	8b 07 02 11 	rsub %d1,%d7,32
800021a6:	17 98 80 11 	dextr %d1,%d8,%d9,%d1
800021aa:	2b 91 40 17 	sel %d1,%d7,%d1,%d9
800021ae:	8b 06 82 a2 	ge %d10,%d6,32
800021b2:	32 57       	rsub %d7
800021b4:	02 19       	mov %d9,%d1
800021b6:	8f f6 01 61 	and %d6,%d6,31
800021ba:	82 f1       	mov %d1,-1
800021bc:	0f 78 00 80 	sh %d8,%d8,%d7
800021c0:	17 11 80 76 	dextr %d7,%d1,%d1,%d6
800021c4:	0f 61 00 60 	sh %d6,%d1,%d6
800021c8:	2b 67 50 7a 	seln %d7,%d10,%d7,%d6
800021cc:	ab 06 a0 6a 	seln %d6,%d10,%d6,0
800021d0:	0f 62 e0 10 	andn %d1,%d2,%d6
800021d4:	0f 73 e0 60 	andn %d6,%d3,%d7
800021d8:	a6 16       	or %d6,%d1
800021da:	8b 06 00 95 	or.ne %d9,%d6,0
800021de:	0b 98 10 28 	mov %e2,%d8,%d9
800021e2:	19 41 04 00 	ld.w %d1,[%a4]4
800021e6:	19 56 04 00 	ld.w %d6,[%a5]4
800021ea:	5f 61 4c 00 	jeq %d1,%d6,80002282 <_fpadd_parts+0x134>
800021ee:	0b 24 c0 60 	subx %d6,%d4,%d2
800021f2:	0b 35 d0 70 	subc %d7,%d5,%d3
800021f6:	df 01 06 00 	jeq %d1,0,80002202 <_fpadd_parts+0xb4>
800021fa:	0b 42 c0 60 	subx %d6,%d2,%d4
800021fe:	0b 53 d0 70 	subc %d7,%d3,%d5
80002202:	8b 07 00 31 	rsub %d3,%d7,0
80002206:	8b 06 00 91 	rsub %d9,%d6,0
8000220a:	ab f3 1f 36 	cadd %d3,%d6,%d3,-1
8000220e:	82 12       	mov %d2,1
80002210:	bf 07 05 00 	jlt %d7,0,8000221a <_fpadd_parts+0xcc>
80002214:	02 69       	mov %d9,%d6
80002216:	02 73       	mov %d3,%d7
80002218:	82 02       	mov %d2,0
8000221a:	8b f9 9f 70 	addx %d7,%d9,-1
8000221e:	82 f5       	mov %d5,-1
80002220:	8b f3 bf 60 	addc %d6,%d3,-1
80002224:	06 c5       	sh %d5,-4
80002226:	59 62 04 00 	st.w [%a6]4,%d2
8000222a:	82 e1       	mov %d1,-2
8000222c:	0b 56 00 21 	eq %d2,%d6,%d5
80002230:	0b 71 30 22 	and.lt.u %d2,%d1,%d7
80002234:	59 60 08 00 	st.w [%a6]8,%d0
80002238:	59 69 0c 00 	st.w [%a6]12,%d9
8000223c:	59 63 10 00 	st.w [%a6]16,%d3
80002240:	0b 65 a0 22 	or.lt.u %d2,%d5,%d6
80002244:	df 02 2b 80 	jne %d2,0,8000229a <_fpadd_parts+0x14c>
80002248:	1b f0 ff 7f 	addi %d7,%d0,-1
8000224c:	77 93 80 30 	dextr %d3,%d3,%d9,1
80002250:	06 19       	sh %d9,1
80002252:	8b f9 9f 00 	addx %d0,%d9,-1
80002256:	8b f3 bf 60 	addc %d6,%d3,-1
8000225a:	0b 56 00 21 	eq %d2,%d6,%d5
8000225e:	0b 01 50 22 	and.ge.u %d2,%d1,%d0
80002262:	0b 56 a0 22 	or.lt.u %d2,%d6,%d5
80002266:	02 78       	mov %d8,%d7
80002268:	c2 f7       	add %d7,-1
8000226a:	df 02 f1 ff 	jne %d2,0,8000224c <_fpadd_parts+0xfe>
8000226e:	82 32       	mov %d2,3
80002270:	59 69 0c 00 	st.w [%a6]12,%d9
80002274:	59 63 10 00 	st.w [%a6]16,%d3
80002278:	59 68 08 00 	st.w [%a6]8,%d8
8000227c:	74 62       	st.w [%a6],%d2
8000227e:	40 62       	mov.aa %a2,%a6
80002280:	00 90       	ret 
80002282:	0b 24 40 90 	addx %d9,%d4,%d2
80002286:	0b 35 50 30 	addc %d3,%d5,%d3
8000228a:	59 61 04 00 	st.w [%a6]4,%d1
8000228e:	59 60 08 00 	st.w [%a6]8,%d0
80002292:	59 69 0c 00 	st.w [%a6]12,%d9
80002296:	59 63 10 00 	st.w [%a6]16,%d3
8000229a:	82 32       	mov %d2,3
8000229c:	7b 00 00 52 	movh %d5,8192
800022a0:	40 62       	mov.aa %a2,%a6
800022a2:	74 62       	st.w [%a6],%d2
800022a4:	0b 53 00 21 	eq %d2,%d3,%d5
800022a8:	b7 02 01 20 	insert %d2,%d2,0,0,1
800022ac:	0b 53 a0 22 	or.lt.u %d2,%d3,%d5
800022b0:	df 02 13 80 	jne %d2,0,800022d6 <_fpadd_parts+0x188>
800022b4:	8f f3 1f 20 	sh %d2,%d3,-1
800022b8:	77 93 80 5f 	dextr %d5,%d3,%d9,31
800022bc:	8f 19 00 31 	and %d3,%d9,1
800022c0:	59 62 10 00 	st.w [%a6]16,%d2
800022c4:	19 62 08 00 	ld.w %d2,[%a6]8
800022c8:	a6 53       	or %d3,%d5
800022ca:	c2 12       	add %d2,1
800022cc:	d9 63 08 00 	lea %a3,[%a6]8
800022d0:	59 63 0c 00 	st.w [%a6]12,%d3
800022d4:	74 32       	st.w [%a3],%d2
800022d6:	00 90       	ret 
800022d8:	40 42       	mov.aa %a2,%a4
800022da:	df 22 fe ff 	jne %d2,2,800022d6 <_fpadd_parts+0x188>
800022de:	40 63       	mov.aa %a3,%a6
800022e0:	09 44 48 01 	ld.d %e4,[%a4+]8
800022e4:	89 34 48 01 	st.d [%a3+]8,%e4
800022e8:	09 44 48 01 	ld.d %e4,[%a4+]8
800022ec:	89 34 48 01 	st.d [%a3+]8,%e4
800022f0:	44 44       	ld.w %d4,[%a4+]
800022f2:	64 34       	st.w [%a3+],%d4
800022f4:	19 23 04 00 	ld.w %d3,[%a2]4
800022f8:	19 52 04 00 	ld.w %d2,[%a5]4
800022fc:	40 62       	mov.aa %a2,%a6
800022fe:	26 32       	and %d2,%d3
80002300:	59 62 04 00 	st.w [%a6]4,%d2
80002304:	00 90       	ret 
80002306:	0b 07 80 60 	sub %d6,%d7,%d0
8000230a:	8b 06 44 12 	lt %d1,%d6,64
8000230e:	df 01 1d 80 	jne %d1,0,80002348 <_fpadd_parts+0x1fa>
80002312:	3f 07 06 00 	jlt %d7,%d0,8000231e <_fpadd_parts+0x1d0>
80002316:	d2 04       	mov %e4,0
80002318:	02 70       	mov %d0,%d7
8000231a:	1d ff 64 ff 	j 800021e2 <_fpadd_parts+0x94>
8000231e:	d2 02       	mov %e2,0
80002320:	1d ff 61 ff 	j 800021e2 <_fpadd_parts+0x94>
80002324:	40 42       	mov.aa %a2,%a4
80002326:	df 43 d8 ff 	jne %d3,4,800022d6 <_fpadd_parts+0x188>
8000232a:	19 43 04 00 	ld.w %d3,[%a4]4
8000232e:	19 52 04 00 	ld.w %d2,[%a5]4
80002332:	7b 00 00 48 	movh %d4,32768
80002336:	0b 23 10 21 	ne %d2,%d3,%d2
8000233a:	1b 04 20 40 	addi %d4,%d4,512
8000233e:	80 43       	mov.d %d3,%a4
80002340:	2b 43 50 22 	seln %d2,%d2,%d3,%d4
80002344:	60 22       	mov.a %a2,%d2
80002346:	00 90       	ret 
80002348:	8b 06 82 02 	ge %d0,%d6,32
8000234c:	2b 54 50 90 	seln %d9,%d0,%d4,%d5
80002350:	ab 05 a0 80 	seln %d8,%d0,%d5,0
80002354:	8f f6 01 01 	and %d0,%d6,31
80002358:	8b 00 02 11 	rsub %d1,%d0,32
8000235c:	17 98 80 11 	dextr %d1,%d8,%d9,%d1
80002360:	2b 91 40 10 	sel %d1,%d0,%d1,%d9
80002364:	8b 06 82 a2 	ge %d10,%d6,32
80002368:	32 50       	rsub %d0
8000236a:	02 19       	mov %d9,%d1
8000236c:	8f f6 01 61 	and %d6,%d6,31
80002370:	82 f1       	mov %d1,-1
80002372:	0f 08 00 80 	sh %d8,%d8,%d0
80002376:	17 11 80 06 	dextr %d0,%d1,%d1,%d6
8000237a:	0f 61 00 60 	sh %d6,%d1,%d6
8000237e:	2b 60 50 0a 	seln %d0,%d10,%d0,%d6
80002382:	ab 06 a0 6a 	seln %d6,%d10,%d6,0
80002386:	0f 64 e0 10 	andn %d1,%d4,%d6
8000238a:	0f 05 e0 60 	andn %d6,%d5,%d0
8000238e:	a6 16       	or %d6,%d1
80002390:	8b 06 00 95 	or.ne %d9,%d6,0
80002394:	0b 98 10 48 	mov %e4,%d8,%d9
80002398:	02 70       	mov %d0,%d7
8000239a:	1d ff 24 ff 	j 800021e2 <_fpadd_parts+0x94>

8000239e <__subdf3>:
8000239e:	20 50       	sub.a %sp,80
800023a0:	d9 a5 14 00 	lea %a5,[%sp]20
800023a4:	d9 a4 04 00 	lea %a4,[%sp]4
800023a8:	89 a4 44 09 	st.d [%sp]4,%e4
800023ac:	89 a6 4c 09 	st.d [%sp]12,%e6
800023b0:	6d 00 ad 02 	call 8000290a <__unpack_d>
800023b4:	d9 a5 28 00 	lea %a5,[%sp]40
800023b8:	d9 a4 0c 00 	lea %a4,[%sp]12
800023bc:	6d 00 a7 02 	call 8000290a <__unpack_d>
800023c0:	19 a2 2c 00 	ld.w %d2,[%sp]44
800023c4:	d9 a4 14 00 	lea %a4,[%sp]20
800023c8:	8f 12 80 21 	xor %d2,%d2,1
800023cc:	d9 a6 3c 00 	lea %a6,[%sp]60
800023d0:	d9 a5 28 00 	lea %a5,[%sp]40
800023d4:	59 a2 2c 00 	st.w [%sp]44,%d2
800023d8:	6d ff bb fe 	call 8000214e <_fpadd_parts>
800023dc:	40 24       	mov.aa %a4,%a2
800023de:	6d 00 c7 01 	call 8000276c <__pack_d>
800023e2:	00 90       	ret 

800023e4 <__muldf3>:
800023e4:	20 50       	sub.a %sp,80
800023e6:	d9 a5 14 00 	lea %a5,[%sp]20
800023ea:	d9 a4 04 00 	lea %a4,[%sp]4
800023ee:	89 a4 44 09 	st.d [%sp]4,%e4
800023f2:	89 a6 4c 09 	st.d [%sp]12,%e6
800023f6:	6d 00 8a 02 	call 8000290a <__unpack_d>
800023fa:	d9 a5 28 00 	lea %a5,[%sp]40
800023fe:	d9 a4 0c 00 	lea %a4,[%sp]12
80002402:	6d 00 84 02 	call 8000290a <__unpack_d>
80002406:	19 a2 14 00 	ld.w %d2,[%sp]20
8000240a:	ff 22 0f 80 	jge.u %d2,2,80002428 <__muldf3+0x44>
8000240e:	19 a3 18 00 	ld.w %d3,[%sp]24
80002412:	19 a2 2c 00 	ld.w %d2,[%sp]44
80002416:	d9 a4 14 00 	lea %a4,[%sp]20
8000241a:	0b 23 10 21 	ne %d2,%d3,%d2
8000241e:	59 a2 18 00 	st.w [%sp]24,%d2
80002422:	6d 00 a5 01 	call 8000276c <__pack_d>
80002426:	00 90       	ret 
80002428:	19 a3 28 00 	ld.w %d3,[%sp]40
8000242c:	bf 23 14 80 	jlt.u %d3,2,80002454 <__muldf3+0x70>
80002430:	df 42 0a 80 	jne %d2,4,80002444 <__muldf3+0x60>
80002434:	91 00 00 48 	movh.a %a4,32768
80002438:	d9 44 00 80 	lea %a4,[%a4]512 <80000200 <__thenan_df>>
8000243c:	df 23 f3 7f 	jeq %d3,2,80002422 <__muldf3+0x3e>
80002440:	1d ff e7 ff 	j 8000240e <__muldf3+0x2a>
80002444:	df 43 15 80 	jne %d3,4,8000246e <__muldf3+0x8a>
80002448:	91 00 00 48 	movh.a %a4,32768
8000244c:	d9 44 00 80 	lea %a4,[%a4]512 <80000200 <__thenan_df>>
80002450:	df 22 e9 7f 	jeq %d2,2,80002422 <__muldf3+0x3e>
80002454:	19 a2 2c 00 	ld.w %d2,[%sp]44
80002458:	19 a3 18 00 	ld.w %d3,[%sp]24
8000245c:	d9 a4 28 00 	lea %a4,[%sp]40
80002460:	0b 23 10 21 	ne %d2,%d3,%d2
80002464:	59 a2 2c 00 	st.w [%sp]44,%d2
80002468:	6d 00 82 01 	call 8000276c <__pack_d>
8000246c:	00 90       	ret 
8000246e:	19 a5 2c 00 	ld.w %d5,[%sp]44
80002472:	19 a4 18 00 	ld.w %d4,[%sp]24
80002476:	0b 45 10 a1 	ne %d10,%d5,%d4
8000247a:	df 22 aa 00 	jeq %d2,2,800025ce <__muldf3+0x1ea>
8000247e:	df 23 ae 00 	jeq %d3,2,800025da <__muldf3+0x1f6>
80002482:	19 a6 34 00 	ld.w %d6,[%sp]52
80002486:	19 a4 20 00 	ld.w %d4,[%sp]32
8000248a:	82 03       	mov %d3,0
8000248c:	73 46 68 00 	mul.u %e0,%d6,%d4
80002490:	19 a2 38 00 	ld.w %d2,[%sp]56
80002494:	82 0b       	mov %d11,0
80002496:	03 36 0a 11 	madd %d1,%d1,%d6,%d3
8000249a:	02 48       	mov %d8,%d4
8000249c:	19 a7 24 00 	ld.w %d7,[%sp]36
800024a0:	03 4b 0a 11 	madd %d1,%d1,%d11,%d4
800024a4:	73 42 68 40 	mul.u %e4,%d2,%d4
800024a8:	82 0d       	mov %d13,0
800024aa:	82 0c       	mov %d12,0
800024ac:	03 32 0a 55 	madd %d5,%d5,%d2,%d3
800024b0:	03 8d 0a 55 	madd %d5,%d5,%d13,%d8
800024b4:	73 27 68 80 	mul.u %e8,%d7,%d2
800024b8:	03 d7 0a 99 	madd %d9,%d9,%d7,%d13
800024bc:	03 2c 0a 99 	madd %d9,%d9,%d12,%d2
800024c0:	03 67 68 24 	madd.u %e2,%e4,%d7,%d6
800024c4:	03 b7 0a 33 	madd %d3,%d3,%d7,%d11
800024c8:	03 6c 0a 33 	madd %d3,%d3,%d12,%d6
800024cc:	0b 35 00 61 	eq %d6,%d5,%d3
800024d0:	0b 42 30 62 	and.lt.u %d6,%d2,%d4
800024d4:	0b 53 a0 62 	or.lt.u %d6,%d3,%d5
800024d8:	02 67       	mov %d7,%d6
800024da:	82 06       	mov %d6,0
800024dc:	0b 06 40 60 	addx %d6,%d6,%d0
800024e0:	0b 12 50 50 	addc %d5,%d2,%d1
800024e4:	0b 51 00 41 	eq %d4,%d1,%d5
800024e8:	0b 06 50 42 	and.ge.u %d4,%d6,%d0
800024ec:	0b 51 a0 42 	or.lt.u %d4,%d1,%d5
800024f0:	df 04 06 80 	jne %d4,0,800024fc <__muldf3+0x118>
800024f4:	8b 1b 80 b0 	addx %d11,%d11,1
800024f8:	8b 07 a0 70 	addc %d7,%d7,0
800024fc:	82 04       	mov %d4,0
800024fe:	0b 83 40 30 	addx %d3,%d3,%d8
80002502:	0b 94 50 20 	addc %d2,%d4,%d9
80002506:	0b b3 40 30 	addx %d3,%d3,%d11
8000250a:	0b 72 50 20 	addc %d2,%d2,%d7
8000250e:	19 a4 1c 00 	ld.w %d4,[%sp]28
80002512:	19 a7 30 00 	ld.w %d7,[%sp]48
80002516:	59 aa 00 10 	st.w [%sp]64,%d10
8000251a:	0b 74 00 10 	add %d1,%d4,%d7
8000251e:	7b 00 00 42 	movh %d4,8192
80002522:	1b 41 00 00 	addi %d0,%d1,4
80002526:	0b 42 00 71 	eq %d7,%d2,%d4
8000252a:	b7 07 01 70 	insert %d7,%d7,0,0,1
8000252e:	59 a0 04 10 	st.w [%sp]68,%d0
80002532:	0b 42 a0 72 	or.lt.u %d7,%d2,%d4
80002536:	df 07 2b 80 	jne %d7,0,8000258c <__muldf3+0x1a8>
8000253a:	1b 51 00 70 	addi %d7,%d1,5
8000253e:	8f 13 00 01 	and %d0,%d3,1
80002542:	02 71       	mov %d1,%d7
80002544:	df 00 07 00 	jeq %d0,0,80002552 <__muldf3+0x16e>
80002548:	77 65 80 6f 	dextr %d6,%d5,%d6,31
8000254c:	06 f5       	sh %d5,-1
8000254e:	b7 f5 81 5f 	insert %d5,%d5,15,31,1
80002552:	77 32 80 3f 	dextr %d3,%d2,%d3,31
80002556:	06 f2       	sh %d2,-1
80002558:	0b 24 30 01 	lt.u %d0,%d4,%d2
8000255c:	0b 24 70 02 	or.eq %d0,%d4,%d2
80002560:	c2 17       	add %d7,1
80002562:	df 00 ee ff 	jne %d0,0,8000253e <__muldf3+0x15a>
80002566:	59 a1 04 10 	st.w [%sp]68,%d1
8000256a:	8f f3 0f 41 	and %d4,%d3,255
8000256e:	8b 04 28 42 	ne %d4,%d4,128
80002572:	df 04 3a 00 	jeq %d4,0,800025e6 <__muldf3+0x202>
80002576:	59 a2 0c 10 	st.w [%sp]76,%d2
8000257a:	82 32       	mov %d2,3
8000257c:	59 a3 08 10 	st.w [%sp]72,%d3
80002580:	d9 a4 3c 00 	lea %a4,[%sp]60
80002584:	59 a2 3c 00 	st.w [%sp]60,%d2
80002588:	1d ff 4d ff 	j 80002422 <__muldf3+0x3e>
8000258c:	7b 00 00 71 	movh %d7,4096
80002590:	0b 27 30 41 	lt.u %d4,%d7,%d2
80002594:	0b 27 70 42 	or.eq %d4,%d7,%d2
80002598:	df 04 e9 ff 	jne %d4,0,8000256a <__muldf3+0x186>
8000259c:	77 32 80 20 	dextr %d2,%d2,%d3,1
800025a0:	c2 f0       	add %d0,-1
800025a2:	06 13       	sh %d3,1
800025a4:	ff 05 06 00 	jge %d5,0,800025b0 <__muldf3+0x1cc>
800025a8:	8f 13 40 11 	or %d1,%d3,1
800025ac:	0b 21 10 28 	mov %e2,%d1,%d2
800025b0:	0b 72 00 41 	eq %d4,%d2,%d7
800025b4:	b7 04 01 40 	insert %d4,%d4,0,0,1
800025b8:	77 65 80 50 	dextr %d5,%d5,%d6,1
800025bc:	0b 72 a0 42 	or.lt.u %d4,%d2,%d7
800025c0:	06 16       	sh %d6,1
800025c2:	df 04 ed ff 	jne %d4,0,8000259c <__muldf3+0x1b8>
800025c6:	59 a0 04 10 	st.w [%sp]68,%d0
800025ca:	1d ff d0 ff 	j 8000256a <__muldf3+0x186>
800025ce:	59 aa 18 00 	st.w [%sp]24,%d10
800025d2:	d9 a4 14 00 	lea %a4,[%sp]20
800025d6:	1d ff 26 ff 	j 80002422 <__muldf3+0x3e>
800025da:	59 aa 2c 00 	st.w [%sp]44,%d10
800025de:	d9 a4 28 00 	lea %a4,[%sp]40
800025e2:	1d ff 20 ff 	j 80002422 <__muldf3+0x3e>
800025e6:	77 32 00 4c 	dextr %d4,%d2,%d3,24
800025ea:	a6 65       	or %d5,%d6
800025ec:	8b 05 20 52 	ne %d5,%d5,0
800025f0:	0f 45 e0 40 	andn %d4,%d5,%d4
800025f4:	df 04 c1 7f 	jeq %d4,0,80002576 <__muldf3+0x192>
800025f8:	8b 03 88 30 	addx %d3,%d3,128
800025fc:	8b 02 a0 20 	addc %d2,%d2,0
80002600:	8f f3 cf 31 	andn %d3,%d3,255
80002604:	1d ff b9 ff 	j 80002576 <__muldf3+0x192>

80002608 <__gedf2>:
80002608:	20 38       	sub.a %sp,56
8000260a:	d9 a5 10 00 	lea %a5,[%sp]16
8000260e:	40 a4       	mov.aa %a4,%sp
80002610:	89 a4 40 09 	st.d [%sp],%e4
80002614:	89 a6 48 09 	st.d [%sp]8,%e6
80002618:	6d 00 79 01 	call 8000290a <__unpack_d>
8000261c:	d9 a5 24 00 	lea %a5,[%sp]36
80002620:	d9 a4 08 00 	lea %a4,[%sp]8
80002624:	6d 00 73 01 	call 8000290a <__unpack_d>
80002628:	19 a3 10 00 	ld.w %d3,[%sp]16
8000262c:	82 f2       	mov %d2,-1
8000262e:	bf 23 0c 80 	jlt.u %d3,2,80002646 <__gedf2+0x3e>
80002632:	19 a3 24 00 	ld.w %d3,[%sp]36
80002636:	bf 23 08 80 	jlt.u %d3,2,80002646 <__gedf2+0x3e>
8000263a:	d9 a5 24 00 	lea %a5,[%sp]36
8000263e:	d9 a4 10 00 	lea %a4,[%sp]16
80002642:	6d 00 c3 01 	call 800029c8 <__fpcmp_parts_d>
80002646:	00 90       	ret 

80002648 <__fixdfsi>:
80002648:	20 20       	sub.a %sp,32
8000264a:	d9 a5 0c 00 	lea %a5,[%sp]12
8000264e:	d9 a4 04 00 	lea %a4,[%sp]4
80002652:	89 a4 44 09 	st.d [%sp]4,%e4
80002656:	6d 00 5a 01 	call 8000290a <__unpack_d>
8000265a:	19 a3 0c 00 	ld.w %d3,[%sp]12
8000265e:	82 02       	mov %d2,0
80002660:	bf 33 25 80 	jlt.u %d3,3,800026aa <__fixdfsi+0x62>
80002664:	df 43 29 00 	jeq %d3,4,800026b6 <__fixdfsi+0x6e>
80002668:	19 a3 14 00 	ld.w %d3,[%sp]20
8000266c:	bf 03 1f 00 	jlt %d3,0,800026aa <__fixdfsi+0x62>
80002670:	8b f3 41 22 	lt %d2,%d3,31
80002674:	19 a6 10 00 	ld.w %d6,[%sp]16
80002678:	df 02 1a 00 	jeq %d2,0,800026ac <__fixdfsi+0x64>
8000267c:	8b c3 03 21 	rsub %d2,%d3,60
80002680:	19 a5 1c 00 	ld.w %d5,[%sp]28
80002684:	19 a4 18 00 	ld.w %d4,[%sp]24
80002688:	8b 02 82 32 	ge %d3,%d2,32
8000268c:	2b 54 50 43 	seln %d4,%d3,%d4,%d5
80002690:	ab 05 a0 53 	seln %d5,%d3,%d5,0
80002694:	8f f2 01 31 	and %d3,%d2,31
80002698:	8b 03 02 21 	rsub %d2,%d3,32
8000269c:	17 45 80 22 	dextr %d2,%d5,%d4,%d2
800026a0:	2b 42 40 23 	sel %d2,%d3,%d2,%d4
800026a4:	df 06 03 00 	jeq %d6,0,800026aa <__fixdfsi+0x62>
800026a8:	32 52       	rsub %d2
800026aa:	00 90       	ret 
800026ac:	82 f2       	mov %d2,-1
800026ae:	06 f2       	sh %d2,-1
800026b0:	ab 12 00 26 	cadd %d2,%d6,%d2,1
800026b4:	00 90       	ret 
800026b6:	19 a3 10 00 	ld.w %d3,[%sp]16
800026ba:	82 f2       	mov %d2,-1
800026bc:	06 f2       	sh %d2,-1
800026be:	ab 12 00 23 	cadd %d2,%d3,%d2,1
800026c2:	00 90       	ret 

800026c4 <__make_dp>:
800026c4:	20 18       	sub.a %sp,24
800026c6:	09 a2 d8 09 	ld.da %a2,[%sp]24
800026ca:	d9 a4 04 00 	lea %a4,[%sp]4
800026ce:	59 a4 04 00 	st.w [%sp]4,%d4
800026d2:	59 a5 08 00 	st.w [%sp]8,%d5
800026d6:	59 a6 0c 00 	st.w [%sp]12,%d6
800026da:	89 a2 d0 09 	st.da [%sp]16,%a2
800026de:	6d 00 47 00 	call 8000276c <__pack_d>
800026e2:	00 90       	ret 

800026e4 <__unpack_f>:
800026e4:	54 42       	ld.w %d2,[%a4]
800026e6:	8f 12 1e 50 	sh %d5,%d2,-31
800026ea:	37 02 e8 3b 	extr.u %d3,%d2,23,8
800026ee:	b7 02 89 4b 	insert %d4,%d2,0,23,9
800026f2:	59 55 04 00 	st.w [%a5]4,%d5
800026f6:	df 03 16 80 	jne %d3,0,80002722 <__unpack_f+0x3e>
800026fa:	df 04 25 00 	jeq %d4,0,80002744 <__unpack_f+0x60>
800026fe:	82 33       	mov %d3,3
80002700:	8f 74 00 20 	sh %d2,%d4,7
80002704:	7b 00 00 54 	movh %d5,16384
80002708:	74 53       	st.w [%a5],%d3
8000270a:	3b 10 f8 3f 	mov %d3,-127
8000270e:	06 12       	sh %d2,1
80002710:	02 34       	mov %d4,%d3
80002712:	c2 f3       	add %d3,-1
80002714:	3f 52 fd ff 	jlt.u %d2,%d5,8000270e <__unpack_f+0x2a>
80002718:	59 54 08 00 	st.w [%a5]8,%d4
8000271c:	59 52 0c 00 	st.w [%a5]12,%d2
80002720:	00 90       	ret 
80002722:	8b f3 2f 52 	ne %d5,%d3,255
80002726:	df 05 12 00 	jeq %d5,0,8000274a <__unpack_f+0x66>
8000272a:	82 32       	mov %d2,3
8000272c:	1b 13 f8 3f 	addi %d3,%d3,-127
80002730:	74 52       	st.w [%a5],%d2
80002732:	8f 74 00 20 	sh %d2,%d4,7
80002736:	b7 f2 01 2f 	insert %d2,%d2,15,30,1
8000273a:	59 53 08 00 	st.w [%a5]8,%d3
8000273e:	59 52 0c 00 	st.w [%a5]12,%d2
80002742:	00 90       	ret 
80002744:	82 22       	mov %d2,2
80002746:	74 52       	st.w [%a5],%d2
80002748:	00 90       	ret 
8000274a:	df 04 05 80 	jne %d4,0,80002754 <__unpack_f+0x70>
8000274e:	82 42       	mov %d2,4
80002750:	74 52       	st.w [%a5],%d2
80002752:	00 90       	ret 
80002754:	37 02 61 3b 	extr.u %d3,%d2,22,1
80002758:	06 72       	sh %d2,7
8000275a:	74 53       	st.w [%a5],%d3
8000275c:	7b 00 00 32 	movh %d3,8192
80002760:	1b 03 f8 3f 	addi %d3,%d3,-128
80002764:	26 32       	and %d2,%d3
80002766:	59 52 0c 00 	st.w [%a5]12,%d2
8000276a:	00 90       	ret 

8000276c <__pack_d>:
8000276c:	54 44       	ld.w %d4,[%a4]
8000276e:	19 43 0c 00 	ld.w %d3,[%a4]12
80002772:	19 42 10 00 	ld.w %d2,[%a4]16
80002776:	19 41 04 00 	ld.w %d1,[%a4]4
8000277a:	bf 24 56 80 	jlt.u %d4,2,80002826 <__pack_d+0xba>
8000277e:	7b 00 ff 57 	movh %d5,32752
80002782:	d2 06       	mov %e6,0
80002784:	df 44 0b 00 	jeq %d4,4,8000279a <__pack_d+0x2e>
80002788:	0f 23 a0 50 	or %d5,%d3,%d2
8000278c:	8b 05 00 02 	eq %d0,%d5,0
80002790:	8b 24 e0 04 	or.eq %d0,%d4,2
80002794:	82 05       	mov %d5,0
80002796:	df 00 0c 00 	jeq %d0,0,800027ae <__pack_d+0x42>
8000279a:	0b 10 00 28 	mov %e2,%d1
8000279e:	a6 75       	or %d5,%d7
800027a0:	8f f2 01 20 	sh %d2,%d2,31
800027a4:	0f 25 a0 40 	or %d4,%d5,%d2
800027a8:	02 43       	mov %d3,%d4
800027aa:	02 62       	mov %d2,%d6
800027ac:	00 90       	ret 
800027ae:	19 44 08 00 	ld.w %d4,[%a4]8
800027b2:	3b 20 c0 0f 	mov %d0,-1022
800027b6:	3f 04 41 00 	jlt %d4,%d0,80002838 <__pack_d+0xcc>
800027ba:	3b 00 40 00 	mov %d0,1024
800027be:	7b 00 ff 57 	movh %d5,32752
800027c2:	7f 04 ec 7f 	jge %d4,%d0,8000279a <__pack_d+0x2e>
800027c6:	8f f3 0f 51 	and %d5,%d3,255
800027ca:	8b 05 28 52 	ne %d5,%d5,128
800027ce:	df 05 1b 00 	jeq %d5,0,80002804 <__pack_d+0x98>
800027d2:	8b f3 87 30 	addx %d3,%d3,127
800027d6:	8b 02 a0 20 	addc %d2,%d2,0
800027da:	7b 00 00 52 	movh %d5,8192
800027de:	0b 25 30 61 	lt.u %d6,%d5,%d2
800027e2:	0b 25 70 62 	or.eq %d6,%d5,%d2
800027e6:	df 06 19 80 	jne %d6,0,80002818 <__pack_d+0xac>
800027ea:	1b f4 3f 40 	addi %d4,%d4,1023
800027ee:	0b 40 00 48 	mov %e4,%d4
800027f2:	77 32 00 6c 	dextr %d6,%d2,%d3,24
800027f6:	06 82       	sh %d2,-8
800027f8:	b7 02 0c 7a 	insert %d7,%d2,0,20,12
800027fc:	8f 44 01 50 	sh %d5,%d4,20
80002800:	1d ff cd ff 	j 8000279a <__pack_d+0x2e>
80002804:	8f 03 10 51 	and %d5,%d3,256
80002808:	df 05 e9 7f 	jeq %d5,0,800027da <__pack_d+0x6e>
8000280c:	8b 03 88 30 	addx %d3,%d3,128
80002810:	8b 02 a0 20 	addc %d2,%d2,0
80002814:	1d ff e3 ff 	j 800027da <__pack_d+0x6e>
80002818:	77 32 80 3f 	dextr %d3,%d2,%d3,31
8000281c:	1b 04 40 40 	addi %d4,%d4,1024
80002820:	06 f2       	sh %d2,-1
80002822:	1d ff e6 ff 	j 800027ee <__pack_d+0x82>
80002826:	77 32 00 6c 	dextr %d6,%d2,%d3,24
8000282a:	06 82       	sh %d2,-8
8000282c:	b7 12 8d 79 	insert %d7,%d2,1,19,13
80002830:	7b 00 ff 57 	movh %d5,32752
80002834:	1d ff b3 ff 	j 8000279a <__pack_d+0x2e>
80002838:	0b 40 80 40 	sub %d4,%d0,%d4
8000283c:	8b 94 83 02 	ge %d0,%d4,57
80002840:	df 00 ad ff 	jne %d0,0,8000279a <__pack_d+0x2e>
80002844:	8b 04 82 52 	ge %d5,%d4,32
80002848:	2b 23 50 05 	seln %d0,%d5,%d3,%d2
8000284c:	ab 02 a0 75 	seln %d7,%d5,%d2,0
80002850:	8f f4 01 51 	and %d5,%d4,31
80002854:	8b 05 02 61 	rsub %d6,%d5,32
80002858:	17 07 80 66 	dextr %d6,%d7,%d0,%d6
8000285c:	2b 06 40 65 	sel %d6,%d5,%d6,%d0
80002860:	8b 04 82 82 	ge %d8,%d4,32
80002864:	32 55       	rsub %d5
80002866:	02 60       	mov %d0,%d6
80002868:	8f f4 01 41 	and %d4,%d4,31
8000286c:	82 f6       	mov %d6,-1
8000286e:	0f 57 00 70 	sh %d7,%d7,%d5
80002872:	17 66 80 54 	dextr %d5,%d6,%d6,%d4
80002876:	0f 46 00 40 	sh %d4,%d6,%d4
8000287a:	2b 45 50 58 	seln %d5,%d8,%d5,%d4
8000287e:	ab 04 a0 48 	seln %d4,%d8,%d4,0
80002882:	0f 43 e0 30 	andn %d3,%d3,%d4
80002886:	0f 52 e0 20 	andn %d2,%d2,%d5
8000288a:	a6 32       	or %d2,%d3
8000288c:	02 03       	mov %d3,%d0
8000288e:	8b 02 00 35 	or.ne %d3,%d2,0
80002892:	8f f3 0f 51 	and %d5,%d3,255
80002896:	82 12       	mov %d2,1
80002898:	8b 05 08 24 	and.eq %d2,%d5,128
8000289c:	02 74       	mov %d4,%d7
8000289e:	df 02 14 80 	jne %d2,0,800028c6 <__pack_d+0x15a>
800028a2:	8b f3 87 30 	addx %d3,%d3,127
800028a6:	8b 07 a0 20 	addc %d2,%d7,0
800028aa:	77 32 00 6c 	dextr %d6,%d2,%d3,24
800028ae:	7b 00 00 31 	movh %d3,4096
800028b2:	8f 82 1f 70 	sh %d7,%d2,-8
800028b6:	0b 32 50 21 	ge.u %d2,%d2,%d3
800028ba:	b7 07 0c 7a 	insert %d7,%d7,0,20,12
800028be:	8f 42 01 50 	sh %d5,%d2,20
800028c2:	1d ff 6c ff 	j 8000279a <__pack_d+0x2e>
800028c6:	8b 03 88 60 	addx %d6,%d3,128
800028ca:	8b 07 a0 20 	addc %d2,%d7,0
800028ce:	7b 00 00 a1 	movh %d10,4096
800028d2:	8f 82 1f 70 	sh %d7,%d2,-8
800028d6:	77 62 00 6c 	dextr %d6,%d2,%d6,24
800028da:	0b a2 50 21 	ge.u %d2,%d2,%d10
800028de:	53 12 40 80 	mul.u %e8,%d2,1
800028e2:	8f 03 10 01 	and %d0,%d3,256
800028e6:	b7 07 0c 7a 	insert %d7,%d7,0,20,12
800028ea:	8f 48 01 50 	sh %d5,%d8,20
800028ee:	df 00 56 ff 	jne %d0,0,8000279a <__pack_d+0x2e>
800028f2:	8f 84 1f 70 	sh %d7,%d4,-8
800028f6:	0b a4 50 21 	ge.u %d2,%d4,%d10
800028fa:	77 34 00 6c 	dextr %d6,%d4,%d3,24
800028fe:	b7 07 0c 7a 	insert %d7,%d7,0,20,12
80002902:	8f 42 01 50 	sh %d5,%d2,20
80002906:	1d ff 4a ff 	j 8000279a <__pack_d+0x2e>

8000290a <__unpack_d>:
8000290a:	09 48 40 09 	ld.d %e8,[%a4]
8000290e:	3b f0 7f 00 	mov %d0,2047
80002912:	8f 19 1e 70 	sh %d7,%d9,-31
80002916:	37 09 6b 5a 	extr.u %d5,%d9,20,11
8000291a:	b7 09 0c 6a 	insert %d6,%d9,0,20,12
8000291e:	59 57 04 00 	st.w [%a5]4,%d7
80002922:	df 05 26 80 	jne %d5,0,8000296e <__unpack_d+0x64>
80002926:	8b 08 20 22 	ne %d2,%d8,0
8000292a:	8b 06 00 25 	or.ne %d2,%d6,0
8000292e:	df 02 33 00 	jeq %d2,0,80002994 <__unpack_d+0x8a>
80002932:	82 32       	mov %d2,3
80002934:	77 86 00 34 	dextr %d3,%d6,%d8,8
80002938:	8f 88 00 40 	sh %d4,%d8,8
8000293c:	74 52       	st.w [%a5],%d2
8000293e:	3b 10 c0 5f 	mov %d5,-1023
80002942:	7b 00 00 61 	movh %d6,4096
80002946:	77 43 80 30 	dextr %d3,%d3,%d4,1
8000294a:	02 57       	mov %d7,%d5
8000294c:	0b 63 00 21 	eq %d2,%d3,%d6
80002950:	b7 02 01 20 	insert %d2,%d2,0,0,1
80002954:	06 14       	sh %d4,1
80002956:	0b 63 a0 22 	or.lt.u %d2,%d3,%d6
8000295a:	c2 f5       	add %d5,-1
8000295c:	df 02 f5 ff 	jne %d2,0,80002946 <__unpack_d+0x3c>
80002960:	59 57 08 00 	st.w [%a5]8,%d7
80002964:	59 54 0c 00 	st.w [%a5]12,%d4
80002968:	59 53 10 00 	st.w [%a5]16,%d3
8000296c:	00 90       	ret 
8000296e:	5f 05 16 00 	jeq %d5,%d0,8000299a <__unpack_d+0x90>
80002972:	82 32       	mov %d2,3
80002974:	1b 15 c0 5f 	addi %d5,%d5,-1023
80002978:	8f 88 00 40 	sh %d4,%d8,8
8000297c:	74 52       	st.w [%a5],%d2
8000297e:	77 86 00 24 	dextr %d2,%d6,%d8,8
80002982:	59 55 08 00 	st.w [%a5]8,%d5
80002986:	b7 f2 01 2e 	insert %d2,%d2,15,28,1
8000298a:	59 54 0c 00 	st.w [%a5]12,%d4
8000298e:	59 52 10 00 	st.w [%a5]16,%d2
80002992:	00 90       	ret 
80002994:	82 22       	mov %d2,2
80002996:	74 52       	st.w [%a5],%d2
80002998:	00 90       	ret 
8000299a:	8b 08 20 52 	ne %d5,%d8,0
8000299e:	8b 06 00 55 	or.ne %d5,%d6,0
800029a2:	df 05 05 80 	jne %d5,0,800029ac <__unpack_d+0xa2>
800029a6:	82 42       	mov %d2,4
800029a8:	74 52       	st.w [%a5],%d2
800029aa:	00 90       	ret 
800029ac:	77 89 00 34 	dextr %d3,%d9,%d8,8
800029b0:	37 09 e1 49 	extr.u %d4,%d9,19,1
800029b4:	b7 03 85 3d 	insert %d3,%d3,0,27,5
800029b8:	8f 88 00 20 	sh %d2,%d8,8
800029bc:	74 54       	st.w [%a5],%d4
800029be:	59 52 0c 00 	st.w [%a5]12,%d2
800029c2:	59 53 10 00 	st.w [%a5]16,%d3
800029c6:	00 90       	ret 

800029c8 <__fpcmp_parts_d>:
800029c8:	54 43       	ld.w %d3,[%a4]
800029ca:	82 12       	mov %d2,1
800029cc:	bf 23 45 80 	jlt.u %d3,2,80002a56 <__fpcmp_parts_d+0x8e>
800029d0:	54 54       	ld.w %d4,[%a5]
800029d2:	bf 24 42 80 	jlt.u %d4,2,80002a56 <__fpcmp_parts_d+0x8e>
800029d6:	8b 44 00 52 	eq %d5,%d4,4
800029da:	8b 43 00 54 	and.eq %d5,%d3,4
800029de:	df 05 50 80 	jne %d5,0,80002a7e <__fpcmp_parts_d+0xb6>
800029e2:	df 43 45 00 	jeq %d3,4,80002a6c <__fpcmp_parts_d+0xa4>
800029e6:	df 44 3d 00 	jeq %d4,4,80002a60 <__fpcmp_parts_d+0x98>
800029ea:	8b 24 00 52 	eq %d5,%d4,2
800029ee:	8b 23 00 54 	and.eq %d5,%d3,2
800029f2:	82 02       	mov %d2,0
800029f4:	df 05 31 80 	jne %d5,0,80002a56 <__fpcmp_parts_d+0x8e>
800029f8:	df 23 34 00 	jeq %d3,2,80002a60 <__fpcmp_parts_d+0x98>
800029fc:	19 42 04 00 	ld.w %d2,[%a4]4
80002a00:	df 24 2c 00 	jeq %d4,2,80002a58 <__fpcmp_parts_d+0x90>
80002a04:	19 53 04 00 	ld.w %d3,[%a5]4
80002a08:	5f 23 28 80 	jne %d3,%d2,80002a58 <__fpcmp_parts_d+0x90>
80002a0c:	19 44 08 00 	ld.w %d4,[%a4]8
80002a10:	19 53 08 00 	ld.w %d3,[%a5]8
80002a14:	3f 43 22 00 	jlt %d3,%d4,80002a58 <__fpcmp_parts_d+0x90>
80002a18:	3f 34 2f 00 	jlt %d4,%d3,80002a76 <__fpcmp_parts_d+0xae>
80002a1c:	19 45 10 00 	ld.w %d5,[%a4]16
80002a20:	19 56 10 00 	ld.w %d6,[%a5]16
80002a24:	19 40 0c 00 	ld.w %d0,[%a4]12
80002a28:	0b 65 00 41 	eq %d4,%d5,%d6
80002a2c:	19 57 0c 00 	ld.w %d7,[%a5]12
80002a30:	02 43       	mov %d3,%d4
80002a32:	0b 07 50 32 	and.ge.u %d3,%d7,%d0
80002a36:	0b 70 50 42 	and.ge.u %d4,%d0,%d7
80002a3a:	0b 65 a0 32 	or.lt.u %d3,%d5,%d6
80002a3e:	0b 56 a0 42 	or.lt.u %d4,%d6,%d5
80002a42:	82 f5       	mov %d5,-1
80002a44:	ab 15 a0 52 	seln %d5,%d2,%d5,1
80002a48:	82 16       	mov %d6,1
80002a4a:	ab f6 bf 22 	seln %d2,%d2,%d6,-1
80002a4e:	ab 05 a0 44 	seln %d4,%d4,%d5,0
80002a52:	2b 24 40 23 	sel %d2,%d3,%d4,%d2
80002a56:	00 90       	ret 
80002a58:	82 13       	mov %d3,1
80002a5a:	ab f3 bf 22 	seln %d2,%d2,%d3,-1
80002a5e:	00 90       	ret 
80002a60:	19 53 04 00 	ld.w %d3,[%a5]4
80002a64:	82 f2       	mov %d2,-1
80002a66:	ab 12 a0 23 	seln %d2,%d3,%d2,1
80002a6a:	00 90       	ret 
80002a6c:	19 43 04 00 	ld.w %d3,[%a4]4
80002a70:	ab f2 bf 23 	seln %d2,%d3,%d2,-1
80002a74:	00 90       	ret 
80002a76:	82 f3       	mov %d3,-1
80002a78:	ab 13 a0 22 	seln %d2,%d2,%d3,1
80002a7c:	00 90       	ret 
80002a7e:	19 53 04 00 	ld.w %d3,[%a5]4
80002a82:	19 42 04 00 	ld.w %d2,[%a4]4
80002a86:	0b 23 80 20 	sub %d2,%d3,%d2
80002a8a:	00 90       	ret 

80002a8c <__do_global_ctors_aux>:
80002a8c:	91 00 00 28 	movh.a %a2,32768
80002a90:	d9 22 80 b2 	lea %a2,[%a2]10944 <80002ac0 <__CTOR_END__>>
80002a94:	19 22 fc ff 	ld.w %d2,[%a2]-4 <7ffffffc <__CSA0_END+0xffc43fc>>
80002a98:	d9 23 fc ff 	lea %a3,[%a2]-4 <7ffffffc <__CSA0_END+0xffc43fc>>
80002a9c:	df f2 0a 00 	jeq %d2,-1,80002ab0 <__do_global_ctors_aux+0x24>
80002aa0:	40 3c       	mov.aa %a12,%a3
80002aa2:	60 22       	mov.a %a2,%d2
80002aa4:	b0 cc       	add.a %a12,-4
80002aa6:	2d 02 00 00 	calli %a2
80002aaa:	54 c2       	ld.w %d2,[%a12]
80002aac:	df f2 fb ff 	jne %d2,-1,80002aa2 <__do_global_ctors_aux+0x16>
80002ab0:	00 90       	ret 
	...
