/**********************************************************************************************************************
 * \file SafetyKit_SSW_02_MCU_FW_CHECK_tables_TC39B.h
 * \copyright Copyright (C) Infineon Technologies AG 2019
 *
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are solely in the form of
 * machine-executable object code generated by a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *********************************************************************************************************************/
#ifndef SAFETYKIT_SSW_02_MCU_FW_CHECK_TABLES_TC39B_H_
#define SAFETYKIT_SSW_02_MCU_FW_CHECK_TABLES_TC39B_H_ 1
/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/
#include "SafetyKit_Cfg.h"
#include "Ifx_Types.h"
#include "IfxCpu.h"
#include "IfxSmu_reg.h"
#include "SafetyKit_SSW_02_MCU_FW_CHECK.h"
/* Note: This file is created based on the tables for the AURIX TC39B device in the Appendix A of the Safety Manual.
 * In case an other device is used, the parameters have to be adjusted respectively. Also the variables used in the
 * file SafetyKit_SSW_02_MCU_FW_CHECK.c need to be changed.
 */
/*********************************************************************************************************************/
/*------------------------------------------------------Macros-------------------------------------------------------*/
/*********************************************************************************************************************/
#define SAFETYKIT_FWCHECK_DEFAULT_MASK      ((uint32)0xFFFFFFFFU)
#define SAFETYKIT_FWCHECK_CLEAR_BIT_14_0    ((uint32)0xFFFFBFFEU)
#define SAFETYKIT_FWCHECK_CLEAR_BIT_14      ((uint32)0xFFFFBFFFU)
#define SAFETYKIT_FWCHECK_CLEAR_BIT_1_0     ((uint32)0xFFFFFFFCU)
#define RAM_INIT_AT_COLD_WARM 0x0
#define RAM_INIT_AT_COLD_ONLY 0x2
#define CPU_MEM_TYPE        0x01
#define LMU_MEM_TYPE        0x02
#define NON_INIT_MEM_TYPE   0x04
#define CPU0_RAMINSEL_MSK   0x01   /* bit0 in ramisel bitfield for CPU0 ram auto-init (table 143 in tsv2.4) */
#define CPU1_RAMINSEL_MSK   0x02   /* bit1 in ramisel bitfield for CPU1 ram auto-init (table 143 in tsv2.4) */
#define CPU2_RAMINSEL_MSK   0x04   /* bit2 in ramisel bitfield for CPU2 ram auto-init (table 143 in tsv2.4) */
#define CPU0_LMUINSEL_MSK   0x01   /* bit0 in lmuisel bitfield for CPU0 lmu auto-init (table 143 in tsv2.4) */
#define CPU1_LMUINSEL_MSK   0x02   /* bit1 in lmuisel bitfield for CPU1 lmu auto-init (table 143 in tsv2.4) */
#define CPU2_LMUINSEL_MSK   0x04   /* bit2 in lmuisel bitfield for CPU2 lmu auto-init (table 143 in tsv2.4) */
#define AMURAM_LMUINSEL_MSK 0x40   /* bit6 in lmuisel bitfield for CPU6 lmu auto-init (table 143 in tsv2.4) */
#define NOT_APPLICABLE 0xFF        /* mask for non auto-init memories */
/*********************************************************************************************************************/
/*---------------------------------------------------Enumerations----------------------------------------------------*/
/*********************************************************************************************************************/
/*********************************************************************************************************************/
/*-------------------------------------------------Global variables--------------------------------------------------*/
/*********************************************************************************************************************/
/*********************************************************************************************************************/
/*-------------------------------------------------Data Structures---------------------------------------------------*/
/*********************************************************************************************************************/
typedef enum
{
    fwCheckSMUAG0        = 0,
    fwCheckSMUAG1        = 1,
    fwCheckSMUAG2        = 2,
    fwCheckSMUAG3        = 3,
    fwCheckSMUAG4        = 4,
    fwCheckSMUAG5        = 5,
    fwCheckSMUAG6        = 6,
    fwCheckSMUAG7        = 7,
    fwCheckSMUAG8        = 8,
    fwCheckSMUAG9        = 9,
    fwCheckSMUAG10       = 10,
    fwCheckSMUAG11       = 11,
    fwCheckSCUSTMEM3     = 12,
    fwCheckSCUSTMEM4     = 13,
    fwCheckSCUSTMEM5     = 14,
    fwCheckSCUSTMEM6     = 15,
    fwCheckSCULCLCON0    = 16,
    fwCheckSCULCLCON1    = 17,
} FwChectRegUnderTest;
typedef struct _FwCheckVerificationStruct
{
    FwChectRegUnderTest   regUnderTest;
    boolean               testHasPassed;
    uint32                regVal;
} FwCheckVerificationStruct;
typedef struct _FwCheckRegisterCheckStruct
{
    uint32 expectedRegVal;
    uint32 mask;
} FwCheckRegisterCheckStruct;
typedef struct _FwCheckStruct
{
    volatile Ifx_UReg_32Bit*        regUnderTest;
    FwCheckRegisterCheckStruct  coldPORST;
    FwCheckRegisterCheckStruct  warmPORST;
    FwCheckRegisterCheckStruct  systemReset;
    FwCheckRegisterCheckStruct  applicationReset;
} FwCheckStruct;
FwCheckVerificationStruct fwCheckVerificationSMU[] =
{
    /*  regUnderTest,  testHasPassed, regVal  */
    {   fwCheckSMUAG0,    FALSE,   0x00000000 },
    {   fwCheckSMUAG1,    FALSE,   0x00000000 },
    {   fwCheckSMUAG2,    FALSE,   0x00000000 },
    {   fwCheckSMUAG3,    FALSE,   0x00000000 },
    {   fwCheckSMUAG4,    FALSE,   0x00000000 },
    {   fwCheckSMUAG5,    FALSE,   0x00000000 },
    {   fwCheckSMUAG6,    FALSE,   0x00000000 },
    {   fwCheckSMUAG7,    FALSE,   0x00000000 },
    {   fwCheckSMUAG8,    FALSE,   0x00000000 },
    {   fwCheckSMUAG9,    FALSE,   0x00000000 },
    {   fwCheckSMUAG10,   FALSE,   0x00000000 },
    {   fwCheckSMUAG11,   FALSE,   0x00000000 },
};
const FwCheckStruct fwCheckSMUTC39B [] =
{
    /* regUnderTest,       ColdPORST                          ,       WarmPorst                           ,       SystemReset                         ,       ApplicationReset                 */
    { &SMU_AG0.U,   {0x2490,   SAFETYKIT_FWCHECK_DEFAULT_MASK}, {0x2490,   SAFETYKIT_FWCHECK_DEFAULT_MASK}, {0x2490,   SAFETYKIT_FWCHECK_DEFAULT_MASK}, {0x400, SAFETYKIT_FWCHECK_DEFAULT_MASK} },
    { &SMU_AG1.U,   {0x2490,   SAFETYKIT_FWCHECK_DEFAULT_MASK}, {0x2490,   SAFETYKIT_FWCHECK_DEFAULT_MASK}, {0x2490,   SAFETYKIT_FWCHECK_DEFAULT_MASK}, {0x400, SAFETYKIT_FWCHECK_DEFAULT_MASK} },
    { &SMU_AG2.U,   {0x2490,   SAFETYKIT_FWCHECK_DEFAULT_MASK}, {0x2490,   SAFETYKIT_FWCHECK_DEFAULT_MASK}, {0x2490,   SAFETYKIT_FWCHECK_DEFAULT_MASK}, {0x0,   SAFETYKIT_FWCHECK_DEFAULT_MASK} },
    { &SMU_AG6.U,   {0x124800, SAFETYKIT_FWCHECK_DEFAULT_MASK}, {0x124800, SAFETYKIT_FWCHECK_DEFAULT_MASK}, {0x124800, SAFETYKIT_FWCHECK_DEFAULT_MASK}, {0x0,   SAFETYKIT_FWCHECK_DEFAULT_MASK} },
    { &SMU_AG7.U,   {0x02,     SAFETYKIT_FWCHECK_CLEAR_BIT_14_0}, {0x00000002,   SAFETYKIT_FWCHECK_CLEAR_BIT_14}, {0x02,     SAFETYKIT_FWCHECK_DEFAULT_MASK}, {0x0,   SAFETYKIT_FWCHECK_DEFAULT_MASK} },/* ALM7[0] and ALM7[14] masked to 0 in the code             */      /* bit 14 shall be masked to 0 (see BROM TC.H011)  */
    { &SMU_AG8.U,   {0x20,     SAFETYKIT_FWCHECK_DEFAULT_MASK},   {0x0,    SAFETYKIT_FWCHECK_DEFAULT_MASK}, {0x0,      SAFETYKIT_FWCHECK_DEFAULT_MASK}, {0x0,   SAFETYKIT_FWCHECK_DEFAULT_MASK} },/* ALM8[5] is only set if LBIST was executed                */
    { &SMU_AG9.U,   {0x0,      SAFETYKIT_FWCHECK_CLEAR_BIT_1_0},  {0x0,    SAFETYKIT_FWCHECK_DEFAULT_MASK}, {0x0,      SAFETYKIT_FWCHECK_DEFAULT_MASK}, {0x0,   SAFETYKIT_FWCHECK_DEFAULT_MASK} },/* ALM9[1] and ALM9[0] masked to 0 (see DTS_TC.H002)        */
    { &SMU_AG10.U,  {0x0,      SAFETYKIT_FWCHECK_DEFAULT_MASK},   {0x0,    SAFETYKIT_FWCHECK_DEFAULT_MASK}, {0x0,      SAFETYKIT_FWCHECK_DEFAULT_MASK}, {0x0,   SAFETYKIT_FWCHECK_DEFAULT_MASK} },
    { &SMU_AG11.U,  {0x0,      SAFETYKIT_FWCHECK_DEFAULT_MASK},   {0x0,    SAFETYKIT_FWCHECK_DEFAULT_MASK}, {0x0,      SAFETYKIT_FWCHECK_DEFAULT_MASK}, {0x0,   SAFETYKIT_FWCHECK_DEFAULT_MASK} },
};
const int fwCheckSMUTC39BSize = sizeof(fwCheckSMUTC39B) / sizeof (FwCheckStruct);
FwCheckVerificationStruct fwCheckVerificationSTMEM[] =
{
    /*  regUnderTest,      testHasPassed, regVal   */
    {   fwCheckSCUSTMEM3,   FALSE,   0x00000000    },
    {   fwCheckSCUSTMEM4,   FALSE,   0x00000000    },
    {   fwCheckSCUSTMEM5,   FALSE,   0x00000000    },
    {   fwCheckSCUSTMEM6,   FALSE,   0x00000000    },
};
const FwCheckStruct fwCheckSTMEMTC39B[] =
{
    /* regUnderTest,       ColdPORST                             ,       WarmPorst                             ,       SystemReset                           ,       ApplicationReset                      */
    { &SCU_STMEM3.U, {0xA0F3FB1F, SAFETYKIT_FWCHECK_DEFAULT_MASK}, {0xA020F82F, SAFETYKIT_FWCHECK_DEFAULT_MASK}, {0x20E0B84F, SAFETYKIT_FWCHECK_DEFAULT_MASK}, {0x20E0088F, SAFETYKIT_FWCHECK_DEFAULT_MASK} },
    { &SCU_STMEM4.U, {0x00000001, SAFETYKIT_FWCHECK_DEFAULT_MASK}, {0x00000001, SAFETYKIT_FWCHECK_DEFAULT_MASK}, {0x00000001, SAFETYKIT_FWCHECK_DEFAULT_MASK}, {0x00000001, SAFETYKIT_FWCHECK_DEFAULT_MASK} },
    { &SCU_STMEM5.U, {0xA0F3FB1F, SAFETYKIT_FWCHECK_DEFAULT_MASK}, {0xA020F82F, SAFETYKIT_FWCHECK_DEFAULT_MASK}, {0x20E0B84F, SAFETYKIT_FWCHECK_DEFAULT_MASK}, {0x20E0088F, SAFETYKIT_FWCHECK_DEFAULT_MASK} },
    { &SCU_STMEM6.U, {0xA0F3FB1F, SAFETYKIT_FWCHECK_DEFAULT_MASK}, {0xA020F82F, SAFETYKIT_FWCHECK_DEFAULT_MASK}, {0x20E0B84F, SAFETYKIT_FWCHECK_DEFAULT_MASK}, {0x20E0088F, SAFETYKIT_FWCHECK_DEFAULT_MASK} },
};
const int fwCheckSTMEMTC39BSize = sizeof(fwCheckSTMEMTC39B) / sizeof (FwCheckStruct);
FwCheckVerificationStruct fwCheckVerificationLCLCON[] =
{
    /*  regUnderTest   , testHasPassed, regVal        */
    { fwCheckSCULCLCON0,   FALSE,       0x00000000    },
    { fwCheckSCULCLCON1,   FALSE,       0x00000000    },
};
const FwCheckStruct fwCheckLCLCONTC39B[] =
{
    /* regUnderTest ,       ColdPORST                             ,       WarmPorst                             ,       SystemReset                           ,       ApplicationReset                      */
    { &SCU_LCLCON0.U, {0x80018001, SAFETYKIT_FWCHECK_DEFAULT_MASK}, {0x80018000, SAFETYKIT_FWCHECK_DEFAULT_MASK}, {0x80018001, SAFETYKIT_FWCHECK_DEFAULT_MASK}, {0x80018001, SAFETYKIT_FWCHECK_DEFAULT_MASK} },
    { &SCU_LCLCON1.U, {0x80018001, SAFETYKIT_FWCHECK_DEFAULT_MASK}, {0x80018000, SAFETYKIT_FWCHECK_DEFAULT_MASK}, {0x80018001, SAFETYKIT_FWCHECK_DEFAULT_MASK}, {0x80018001, SAFETYKIT_FWCHECK_DEFAULT_MASK} },
};
const int fwCheckLCLCONTC39BSize = sizeof(fwCheckLCLCONTC39B) / sizeof (FwCheckStruct);
/*----------------------------------------------------------------------------*/
/*                                COLD RESET                                  */
/*----------------------------------------------------------------------------*/
                                    /* ECCD    , FAULTSTS      , ERRINFO[0] */
#define SSH_DEFAULT_INIT_RAM        {0x5,    0x9,            0x0}
#define SSH_DEFAULT_NOT_INIT_RAM    {0x5,    0x1,            0x0}
#define SSH_SYSTEM_RESET            {0x5,    0x1,            0x0}
#define SSH_APPLICATION_RESET       {0x5,    0x1,            0x0}
#define SSH_EMEM_EXCEPTION          {0x5,    0x601,          0x0}
#define SSH_XRAM_EXCEPTION          {0x0,    0x0,            0x0}
#define SSH_LMU_STB_EXCEPTION       {0x5,    0x1,            0x0}
#define SSH_XRAM_STB_EXCEPTION      {0x0,    0x0,            0x0}
const MemoryTestedStruct coldPorstSSHTC39B[] =
{
/*     SSH                              mem_type,       INSEL_mask,             SSH registers default,      SSH registers after standby */
    /* CPU0 */
    { IfxMtu_MbistSel_cpu0Dspr,         CPU_MEM_TYPE,   CPU0_RAMINSEL_MSK,      SSH_DEFAULT_INIT_RAM,       SSH_DEFAULT_INIT_RAM },
    { IfxMtu_MbistSel_cpu0Dspr1,        CPU_MEM_TYPE,   CPU0_RAMINSEL_MSK,      SSH_DEFAULT_INIT_RAM,       SSH_DEFAULT_INIT_RAM },
    { IfxMtu_MbistSel_cpu0Dtag,         CPU_MEM_TYPE,   CPU0_RAMINSEL_MSK,      SSH_DEFAULT_INIT_RAM,       SSH_DEFAULT_INIT_RAM },
    { IfxMtu_MbistSel_cpu0Pspr,         CPU_MEM_TYPE,   CPU0_RAMINSEL_MSK,      SSH_DEFAULT_INIT_RAM,       SSH_DEFAULT_INIT_RAM },
    { IfxMtu_MbistSel_cpu0Ptag,         CPU_MEM_TYPE,   CPU0_RAMINSEL_MSK,      SSH_DEFAULT_INIT_RAM,       SSH_DEFAULT_INIT_RAM },
    { IfxMtu_MbistSel_cpu0Dlmu,         LMU_MEM_TYPE,   CPU0_LMUINSEL_MSK,      SSH_DEFAULT_INIT_RAM,       SSH_LMU_STB_EXCEPTION}, /* Standby exception */
    /* CPU1 */
    { IfxMtu_MbistSel_cpu1Dspr,         CPU_MEM_TYPE,   CPU1_RAMINSEL_MSK,      SSH_DEFAULT_INIT_RAM,       SSH_DEFAULT_INIT_RAM },
    { IfxMtu_MbistSel_cpu1Dspr1,        CPU_MEM_TYPE,   CPU1_RAMINSEL_MSK,      SSH_DEFAULT_INIT_RAM,       SSH_DEFAULT_INIT_RAM },
    { IfxMtu_MbistSel_cpu1Dtag,         CPU_MEM_TYPE,   CPU1_RAMINSEL_MSK,      SSH_DEFAULT_INIT_RAM,       SSH_DEFAULT_INIT_RAM },
    { IfxMtu_MbistSel_cpu1Pspr,         CPU_MEM_TYPE,   CPU1_RAMINSEL_MSK,      SSH_DEFAULT_INIT_RAM,       SSH_DEFAULT_INIT_RAM },
    { IfxMtu_MbistSel_cpu1Ptag,         CPU_MEM_TYPE,   CPU1_RAMINSEL_MSK,      SSH_DEFAULT_INIT_RAM,       SSH_DEFAULT_INIT_RAM },
    { IfxMtu_MbistSel_cpu1Dlmu,         LMU_MEM_TYPE,   CPU1_LMUINSEL_MSK,      SSH_DEFAULT_INIT_RAM,       SSH_LMU_STB_EXCEPTION}, /* Standby exception */
    /* CPU2 */
    { IfxMtu_MbistSel_cpu2Dspr,         CPU_MEM_TYPE,   CPU2_RAMINSEL_MSK,      SSH_DEFAULT_INIT_RAM,       SSH_DEFAULT_INIT_RAM },
    { IfxMtu_MbistSel_cpu2Dtag,         CPU_MEM_TYPE,   CPU2_RAMINSEL_MSK,      SSH_DEFAULT_INIT_RAM,       SSH_DEFAULT_INIT_RAM },
    { IfxMtu_MbistSel_cpu2Pspr,         CPU_MEM_TYPE,   CPU2_RAMINSEL_MSK,      SSH_DEFAULT_INIT_RAM,       SSH_DEFAULT_INIT_RAM },
    { IfxMtu_MbistSel_cpu2Ptag,         CPU_MEM_TYPE,   CPU2_RAMINSEL_MSK,      SSH_DEFAULT_INIT_RAM,       SSH_DEFAULT_INIT_RAM },
    { IfxMtu_MbistSel_cpu2Dlmu,         LMU_MEM_TYPE,   CPU2_LMUINSEL_MSK,      SSH_DEFAULT_INIT_RAM,       SSH_DEFAULT_INIT_RAM },
    /* DAM0,1 */
    { IfxMtu_MbistSel_dam0,             LMU_MEM_TYPE,   AMURAM_LMUINSEL_MSK,    SSH_DEFAULT_NOT_INIT_RAM,   SSH_DEFAULT_NOT_INIT_RAM },
    /* peripherals */
    { IfxMtu_MbistSel_dma,              NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_DEFAULT_NOT_INIT_RAM,   SSH_DEFAULT_NOT_INIT_RAM },
    { IfxMtu_MbistSel_gtmFifo,          NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_DEFAULT_NOT_INIT_RAM,   SSH_DEFAULT_NOT_INIT_RAM },
    { IfxMtu_MbistSel_gtmMcs0Fast,      NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_DEFAULT_NOT_INIT_RAM,   SSH_DEFAULT_NOT_INIT_RAM },
    { IfxMtu_MbistSel_gtmMcs1Fast,      NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_DEFAULT_NOT_INIT_RAM,   SSH_DEFAULT_NOT_INIT_RAM },
    { IfxMtu_MbistSel_gtmDpll1a,        NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_DEFAULT_NOT_INIT_RAM,   SSH_DEFAULT_NOT_INIT_RAM },
    { IfxMtu_MbistSel_gtmDpll1b,        NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_DEFAULT_NOT_INIT_RAM,   SSH_DEFAULT_NOT_INIT_RAM },
    { IfxMtu_MbistSel_gtmDpll2,         NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_DEFAULT_NOT_INIT_RAM,   SSH_DEFAULT_NOT_INIT_RAM },
    { IfxMtu_MbistSel_mcan0,            NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_DEFAULT_NOT_INIT_RAM,   SSH_DEFAULT_NOT_INIT_RAM },
    { IfxMtu_MbistSel_mcan1,            NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_DEFAULT_NOT_INIT_RAM,   SSH_DEFAULT_NOT_INIT_RAM },
    { IfxMtu_MbistSel_psi5,             NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_DEFAULT_NOT_INIT_RAM,   SSH_DEFAULT_NOT_INIT_RAM },
    { IfxMtu_MbistSel_eray0Obf,         NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_DEFAULT_NOT_INIT_RAM,   SSH_DEFAULT_NOT_INIT_RAM },
    { IfxMtu_MbistSel_eray0IbfTbf,      NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_DEFAULT_NOT_INIT_RAM,   SSH_DEFAULT_NOT_INIT_RAM },
    { IfxMtu_MbistSel_eray0Mbf,         NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_DEFAULT_NOT_INIT_RAM,   SSH_DEFAULT_NOT_INIT_RAM },
    { IfxMtu_MbistSel_scrXram,          NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_DEFAULT_INIT_RAM,       SSH_XRAM_STB_EXCEPTION   }, /* Standby exception */
    { IfxMtu_MbistSel_scrIram,          NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_DEFAULT_INIT_RAM,       SSH_XRAM_STB_EXCEPTION   }, /* Standby exception */
    { IfxMtu_MbistSel_ethermacRx,       NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_DEFAULT_NOT_INIT_RAM,   SSH_DEFAULT_NOT_INIT_RAM },
    { IfxMtu_MbistSel_ethermacTx,       NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_DEFAULT_NOT_INIT_RAM,   SSH_DEFAULT_NOT_INIT_RAM },
};
const int coldPorstSSHTC39BSize = sizeof(coldPorstSSHTC39B) / sizeof (MemoryTestedStruct);
/*----------------------------------------------------------------------------*/
/*                                WARM RESET                                  */
/*----------------------------------------------------------------------------*/
const MemoryTestedStruct warmPorstSSHTC39B[] =
{
    /* SSH                              mem_type,       INSEL_mask,             SSH registers default,      SSH registers after standby */
    /* CPU0 */
    { IfxMtu_MbistSel_cpu0Dspr,         CPU_MEM_TYPE,   CPU0_RAMINSEL_MSK,      SSH_DEFAULT_INIT_RAM,       SSH_DEFAULT_INIT_RAM },
    { IfxMtu_MbistSel_cpu0Dspr1,        CPU_MEM_TYPE,   CPU0_RAMINSEL_MSK,      SSH_DEFAULT_INIT_RAM,       SSH_DEFAULT_INIT_RAM },
    { IfxMtu_MbistSel_cpu0Dtag,         CPU_MEM_TYPE,   CPU0_RAMINSEL_MSK,      SSH_DEFAULT_INIT_RAM,       SSH_DEFAULT_INIT_RAM },
    { IfxMtu_MbistSel_cpu0Pspr,         CPU_MEM_TYPE,   CPU0_RAMINSEL_MSK,      SSH_DEFAULT_INIT_RAM,       SSH_DEFAULT_INIT_RAM },
    { IfxMtu_MbistSel_cpu0Ptag,         CPU_MEM_TYPE,   CPU0_RAMINSEL_MSK,      SSH_DEFAULT_INIT_RAM,       SSH_DEFAULT_INIT_RAM },
    { IfxMtu_MbistSel_cpu0Dlmu,         LMU_MEM_TYPE,   CPU0_LMUINSEL_MSK,      SSH_DEFAULT_INIT_RAM,       SSH_DEFAULT_INIT_RAM },
    /* CPU1 */
    { IfxMtu_MbistSel_cpu1Dspr,         CPU_MEM_TYPE,   CPU1_RAMINSEL_MSK,      SSH_DEFAULT_INIT_RAM,       SSH_DEFAULT_INIT_RAM },
    { IfxMtu_MbistSel_cpu1Dspr1,        CPU_MEM_TYPE,   CPU1_RAMINSEL_MSK,      SSH_DEFAULT_INIT_RAM,       SSH_DEFAULT_INIT_RAM },
    { IfxMtu_MbistSel_cpu1Dtag,         CPU_MEM_TYPE,   CPU1_RAMINSEL_MSK,      SSH_DEFAULT_INIT_RAM,       SSH_DEFAULT_INIT_RAM },
    { IfxMtu_MbistSel_cpu1Pspr,         CPU_MEM_TYPE,   CPU1_RAMINSEL_MSK,      SSH_DEFAULT_INIT_RAM,       SSH_DEFAULT_INIT_RAM },
    { IfxMtu_MbistSel_cpu1Ptag,         CPU_MEM_TYPE,   CPU1_RAMINSEL_MSK,      SSH_DEFAULT_INIT_RAM,       SSH_DEFAULT_INIT_RAM },
    { IfxMtu_MbistSel_cpu1Dlmu,         LMU_MEM_TYPE,   CPU1_LMUINSEL_MSK,      SSH_DEFAULT_INIT_RAM,       SSH_DEFAULT_INIT_RAM },
    /* CPU2 */
    { IfxMtu_MbistSel_cpu2Dspr,         CPU_MEM_TYPE,   CPU2_RAMINSEL_MSK,      SSH_DEFAULT_INIT_RAM,       SSH_DEFAULT_INIT_RAM },
    { IfxMtu_MbistSel_cpu2Dtag,         CPU_MEM_TYPE,   CPU2_RAMINSEL_MSK,      SSH_DEFAULT_INIT_RAM,       SSH_DEFAULT_INIT_RAM },
    { IfxMtu_MbistSel_cpu2Pspr,         CPU_MEM_TYPE,   CPU2_RAMINSEL_MSK,      SSH_DEFAULT_INIT_RAM,       SSH_DEFAULT_INIT_RAM },
    { IfxMtu_MbistSel_cpu2Ptag,         CPU_MEM_TYPE,   CPU2_RAMINSEL_MSK,      SSH_DEFAULT_INIT_RAM,       SSH_DEFAULT_INIT_RAM },
    { IfxMtu_MbistSel_cpu2Dlmu,         LMU_MEM_TYPE,   CPU2_LMUINSEL_MSK,      SSH_DEFAULT_INIT_RAM,       SSH_DEFAULT_INIT_RAM },
    /* DAM0,1 */
    { IfxMtu_MbistSel_dam0,             LMU_MEM_TYPE,   AMURAM_LMUINSEL_MSK,    SSH_DEFAULT_NOT_INIT_RAM,   SSH_DEFAULT_NOT_INIT_RAM },
    /* peripherals */
    { IfxMtu_MbistSel_dma,              NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_DEFAULT_NOT_INIT_RAM,   SSH_DEFAULT_NOT_INIT_RAM },
    { IfxMtu_MbistSel_gtmFifo,          NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_DEFAULT_NOT_INIT_RAM,   SSH_DEFAULT_NOT_INIT_RAM },
    { IfxMtu_MbistSel_gtmMcs0Fast,      NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_DEFAULT_NOT_INIT_RAM,   SSH_DEFAULT_NOT_INIT_RAM },
    { IfxMtu_MbistSel_gtmMcs1Fast,      NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_DEFAULT_NOT_INIT_RAM,   SSH_DEFAULT_NOT_INIT_RAM },
    { IfxMtu_MbistSel_gtmDpll1a,        NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_DEFAULT_NOT_INIT_RAM,   SSH_DEFAULT_NOT_INIT_RAM },
    { IfxMtu_MbistSel_gtmDpll1b,        NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_DEFAULT_NOT_INIT_RAM,   SSH_DEFAULT_NOT_INIT_RAM },
    { IfxMtu_MbistSel_gtmDpll2,         NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_DEFAULT_NOT_INIT_RAM,   SSH_DEFAULT_NOT_INIT_RAM },
    { IfxMtu_MbistSel_mcan0,            NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_DEFAULT_NOT_INIT_RAM,   SSH_DEFAULT_NOT_INIT_RAM },
    { IfxMtu_MbistSel_mcan1,            NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_DEFAULT_NOT_INIT_RAM,   SSH_DEFAULT_NOT_INIT_RAM },
    { IfxMtu_MbistSel_psi5,             NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_DEFAULT_NOT_INIT_RAM,   SSH_DEFAULT_NOT_INIT_RAM },
    { IfxMtu_MbistSel_eray0Obf,         NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_DEFAULT_NOT_INIT_RAM,   SSH_DEFAULT_NOT_INIT_RAM },
    { IfxMtu_MbistSel_eray0IbfTbf,      NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_DEFAULT_NOT_INIT_RAM,   SSH_DEFAULT_NOT_INIT_RAM },
    { IfxMtu_MbistSel_eray0Mbf,         NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_DEFAULT_NOT_INIT_RAM,   SSH_DEFAULT_NOT_INIT_RAM },
    { IfxMtu_MbistSel_scrXram,          NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_XRAM_EXCEPTION,         SSH_XRAM_EXCEPTION       },
    { IfxMtu_MbistSel_scrIram,          NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_XRAM_EXCEPTION,         SSH_XRAM_EXCEPTION       },
    { IfxMtu_MbistSel_ethermacRx,       NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_DEFAULT_NOT_INIT_RAM,   SSH_DEFAULT_NOT_INIT_RAM },
    { IfxMtu_MbistSel_ethermacTx,       NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_DEFAULT_NOT_INIT_RAM,   SSH_DEFAULT_NOT_INIT_RAM }
};
const int warmPorstSSHTC39BSize = sizeof(warmPorstSSHTC39B) / sizeof (MemoryTestedStruct);
/*----------------------------------------------------------------------------*/
/*                               SYSTEM RESET                                 */
/*----------------------------------------------------------------------------*/
const MemoryTestedStruct systemSSHTC39B[] =
{
    /* SSH                              mem_type,           INSEL_mask,         SSH registers default,  SSH registers after standby */
    /* CPU0 */
    { IfxMtu_MbistSel_cpu0Dspr,         NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_SYSTEM_RESET,       SSH_SYSTEM_RESET },
    { IfxMtu_MbistSel_cpu0Dspr1,        NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_SYSTEM_RESET,       SSH_SYSTEM_RESET },
    { IfxMtu_MbistSel_cpu0Dtag,         NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_SYSTEM_RESET,       SSH_SYSTEM_RESET },
    { IfxMtu_MbistSel_cpu0Pspr,         NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_SYSTEM_RESET,       SSH_SYSTEM_RESET },
    { IfxMtu_MbistSel_cpu0Ptag,         NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_SYSTEM_RESET,       SSH_SYSTEM_RESET },
    { IfxMtu_MbistSel_cpu0Dlmu,         NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_SYSTEM_RESET,       SSH_SYSTEM_RESET },
    /* CPU1 */
    { IfxMtu_MbistSel_cpu1Dspr,         NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_SYSTEM_RESET,       SSH_SYSTEM_RESET },
    { IfxMtu_MbistSel_cpu1Dspr1,        NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_SYSTEM_RESET,       SSH_SYSTEM_RESET },
    { IfxMtu_MbistSel_cpu1Dtag,         NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_SYSTEM_RESET,       SSH_SYSTEM_RESET },
    { IfxMtu_MbistSel_cpu1Pspr,         NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_SYSTEM_RESET,       SSH_SYSTEM_RESET },
    { IfxMtu_MbistSel_cpu1Ptag,         NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_SYSTEM_RESET,       SSH_SYSTEM_RESET },
    { IfxMtu_MbistSel_cpu1Dlmu,         NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_SYSTEM_RESET,       SSH_SYSTEM_RESET },
    /* CPU2 */
    { IfxMtu_MbistSel_cpu2Dspr,         NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_SYSTEM_RESET,       SSH_SYSTEM_RESET },
    { IfxMtu_MbistSel_cpu2Dtag,         NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_SYSTEM_RESET,       SSH_SYSTEM_RESET },
    { IfxMtu_MbistSel_cpu2Pspr,         NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_SYSTEM_RESET,       SSH_SYSTEM_RESET },
    { IfxMtu_MbistSel_cpu2Ptag,         NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_SYSTEM_RESET,       SSH_SYSTEM_RESET },
    { IfxMtu_MbistSel_cpu2Dlmu,         NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_SYSTEM_RESET,       SSH_SYSTEM_RESET },
    /* DAM0,1 */
    { IfxMtu_MbistSel_dam0,             NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_SYSTEM_RESET,       SSH_SYSTEM_RESET },
    /* peripherals */
    { IfxMtu_MbistSel_dma,              NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_SYSTEM_RESET,       SSH_SYSTEM_RESET },
    { IfxMtu_MbistSel_gtmFifo,          NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_SYSTEM_RESET,       SSH_SYSTEM_RESET },
    { IfxMtu_MbistSel_gtmMcs0Fast,      NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_SYSTEM_RESET,       SSH_SYSTEM_RESET },
    { IfxMtu_MbistSel_gtmMcs1Fast,      NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_SYSTEM_RESET,       SSH_SYSTEM_RESET }, /* ECCD = 0x83E5 when coming from COLD */
    { IfxMtu_MbistSel_gtmDpll1a,        NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_SYSTEM_RESET,       SSH_SYSTEM_RESET },
    { IfxMtu_MbistSel_gtmDpll1b,        NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_SYSTEM_RESET,       SSH_SYSTEM_RESET },
    { IfxMtu_MbistSel_gtmDpll2,         NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_SYSTEM_RESET,       SSH_SYSTEM_RESET },
    { IfxMtu_MbistSel_mcan0,            NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_SYSTEM_RESET,       SSH_SYSTEM_RESET },
    { IfxMtu_MbistSel_mcan1,            NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_SYSTEM_RESET,       SSH_SYSTEM_RESET },
    { IfxMtu_MbistSel_psi5,             NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_SYSTEM_RESET,       SSH_SYSTEM_RESET },
    { IfxMtu_MbistSel_eray0Obf,         NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_SYSTEM_RESET,       SSH_SYSTEM_RESET },
    { IfxMtu_MbistSel_eray0IbfTbf,      NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_SYSTEM_RESET,       SSH_SYSTEM_RESET },
    { IfxMtu_MbistSel_eray0Mbf,         NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_SYSTEM_RESET,       SSH_SYSTEM_RESET },
    { IfxMtu_MbistSel_scrXram,          NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_XRAM_EXCEPTION,     SSH_XRAM_EXCEPTION },
    { IfxMtu_MbistSel_scrIram,          NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_XRAM_EXCEPTION,     SSH_XRAM_EXCEPTION },
    { IfxMtu_MbistSel_ethermacRx,       NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_SYSTEM_RESET,       SSH_SYSTEM_RESET },
    { IfxMtu_MbistSel_ethermacTx,       NON_INIT_MEM_TYPE,  NOT_APPLICABLE,     SSH_SYSTEM_RESET,       SSH_SYSTEM_RESET },
};
const int systemSSHTC39BSize = sizeof(systemSSHTC39B) / sizeof (MemoryTestedStruct);
/*----------------------------------------------------------------------------*/
/*                             APPLICATION RESET                              */
/*----------------------------------------------------------------------------*/
const MemoryTestedStruct applicationSSHTC39B[] =
{
    /* SSH                              mem_type,       INSEL_mask,     SSH registers default, SSH registers after standby */
    { IfxMtu_MbistSel_cpu0Dspr,         NOT_APPLICABLE, NOT_APPLICABLE, SSH_APPLICATION_RESET, SSH_APPLICATION_RESET },
    { IfxMtu_MbistSel_cpu0Dspr1,        NOT_APPLICABLE, NOT_APPLICABLE, SSH_APPLICATION_RESET, SSH_APPLICATION_RESET },
    { IfxMtu_MbistSel_cpu1Dspr1,        NOT_APPLICABLE, NOT_APPLICABLE, SSH_APPLICATION_RESET, SSH_APPLICATION_RESET },
};
const int applicationSSHTC39BSize = sizeof(applicationSSHTC39B) / sizeof (MemoryTestedStruct);
/*********************************************************************************************************************/
/*------------------------------------------------Function Prototypes------------------------------------------------*/
/*********************************************************************************************************************/
#endif /* SAFETYKIT_SSW_02_MCU_FW_CHECK_TABLES_TC39B_H_ */
