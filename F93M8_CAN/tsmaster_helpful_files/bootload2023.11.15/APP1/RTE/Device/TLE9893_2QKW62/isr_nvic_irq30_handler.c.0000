/*
 ***********************************************************************************************************************
 *
 * Copyright (c) 2015, Infineon Technologies AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,are permitted provided that the
 * following conditions are met:
 *
 *   Redistributions of source code must retain the above copyright notice, this list of conditions and the  following
 *   disclaimer.
 *
 *   Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
 *   following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 *   Neither the name of the copyright holders nor the names of its contributors may be used to endorse or promote
 *   products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  OF THE
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 **********************************************************************************************************************/

/*******************************************************************************
**                                  Includes                                  **
*******************************************************************************/
#include "tle989x.h"
#include "isr.h"
#include "isr_defines.h"


/* Check if NVIC node 30 is enabled */
#if ((CPU_NVIC_ISER & CPU_NVIC_ISER_IRQEN30_Msk) == (1u << CPU_NVIC_ISER_IRQEN30_Pos))

/*******************************************************************************
**                        Global Variable Definitions                         **
*******************************************************************************/
#if (NVIC_IRQ30_HANDLER_INT_CHECK == 1)
  uint8 u8_interrupt_cnt_irq30;
#endif

/*******************************************************************************
**                        Global Function Declarations                        **
*******************************************************************************/
extern void DMA_CH0_CALLBACK(void);
extern void DMA_CH1_CALLBACK(void);
extern void DMA_CH2_CALLBACK(void);
extern void DMA_CH3_CALLBACK(void);
extern void DMA_CH4_CALLBACK(void);
extern void DMA_CH5_CALLBACK(void);
extern void DMA_CH6_CALLBACK(void);
extern void DMA_CH7_CALLBACK(void);
extern void DMA_ERROR_CALLBACK(void);


/*******************************************************************************
**                         Global Function Definitions                        **
*******************************************************************************/
void NVIC_IRQ30_Handler(void)
{
  #if (NVIC_IRQ30_HANDLER_INT_CHECK == 1)
    u8_interrupt_cnt_irq30 = 0;
  #endif
  /* DMA Ch0 */
  #if (DMA_CH0_INT_EN == 1)
    #if ((SCU_INP7 & SCU_INP7_INP_DMACH0_Msk) >>  SCU_INP7_INP_DMACH0_Pos == DMA_INP_NVIC_IRQ30)
      if ((uint8)SCU->DMAIEN.bit.DMACH0EN == (uint8)1)
      {
        if ((uint8)SCU->DMAIS.bit.DMACH0 == (uint8)1)
        {
          DMA_CH0_CALLBACK();
          SCU->DMAISC.bit.DMACH0CLR = 1u;
          #if (NVIC_IRQ30_HANDLER_INT_CHECK == 1)
            u8_interrupt_cnt_irq30 += 1;
          #endif
        }
      }
    #endif /* Interrupt assigned to this Node */
  #endif /* Interrupt enabled */

  /* DMA Ch1 */
  #if (DMA_CH1_INT_EN == 1)
    #if ((SCU_INP7 & SCU_INP7_INP_DMACH1_Msk) >>  SCU_INP7_INP_DMACH1_Pos == DMA_INP_NVIC_IRQ30)
      if ((uint8)SCU->DMAIEN.bit.DMACH1EN == (uint8)1)
      {
        if ((uint8)SCU->DMAIS.bit.DMACH1 == (uint8)1)
        {
          DMA_CH1_CALLBACK();
          SCU->DMAISC.bit.DMACH1CLR = 1u;
          #if (NVIC_IRQ30_HANDLER_INT_CHECK == 1)
            u8_interrupt_cnt_irq30 += 1;
          #endif
        }
      }
    #endif /* Interrupt assigned to this Node */
  #endif /* Interrupt enabled */

  /* DMA Ch2 */
  #if (DMA_CH2_INT_EN == 1)
    #if ((SCU_INP7 & SCU_INP7_INP_DMACH2_Msk) >>  SCU_INP7_INP_DMACH2_Pos == DMA_INP_NVIC_IRQ30)
      if ((uint8)SCU->DMAIEN.bit.DMACH2EN == (uint8)1)
      {
        if ((uint8)SCU->DMAIS.bit.DMACH2 == (uint8)1)
        {
          DMA_CH2_CALLBACK();
          SCU->DMAISC.bit.DMACH2CLR = 1u;
          #if (NVIC_IRQ30_HANDLER_INT_CHECK == 1)
            u8_interrupt_cnt_irq30 += 1;
          #endif
        }
      }
    #endif /* Interrupt assigned to this Node */
  #endif /* Interrupt enabled */

  /* DMA Ch3 */
  #if (DMA_CH3_INT_EN == 1)
    #if ((SCU_INP7 & SCU_INP7_INP_DMACH3_Msk) >>  SCU_INP7_INP_DMACH3_Pos == DMA_INP_NVIC_IRQ30)
      if ((uint8)SCU->DMAIEN.bit.DMACH3EN == (uint8)1)
      {
        if ((uint8)SCU->DMAIS.bit.DMACH3 == (uint8)1)
        {
          DMA_CH3_CALLBACK();
          SCU->DMAISC.bit.DMACH3CLR = 1u;
          #if (NVIC_IRQ30_HANDLER_INT_CHECK == 1)
            u8_interrupt_cnt_irq30 += 1;
          #endif
        }
      }
    #endif /* Interrupt assigned to this Node */
  #endif /* Interrupt enabled */

  /* DMA Ch4 */
  #if (DMA_CH4_INT_EN == 1)
    #if ((SCU_INP7 & SCU_INP7_INP_DMACH4_Msk) >>  SCU_INP7_INP_DMACH4_Pos == DMA_INP_NVIC_IRQ30)
      if ((uint8)SCU->DMAIEN.bit.DMACH4EN == (uint8)1)
      {
        if ((uint8)SCU->DMAIS.bit.DMACH4 == (uint8)1)
        {
          DMA_CH4_CALLBACK();
          SCU->DMAISC.bit.DMACH4CLR = 1u;
          #if (NVIC_IRQ30_HANDLER_INT_CHECK == 1)
            u8_interrupt_cnt_irq30 += 1;
          #endif
        }
      }
    #endif /* Interrupt assigned to this Node */
  #endif /* Interrupt enabled */

  /* DMA Ch5 */
  #if (DMA_CH5_INT_EN == 1)
    #if ((SCU_INP7 & SCU_INP7_INP_DMACH5_Msk) >>  SCU_INP7_INP_DMACH5_Pos == DMA_INP_NVIC_IRQ30)
      if ((uint8)SCU->DMAIEN.bit.DMACH5EN == (uint8)1)
      {
        if ((uint8)SCU->DMAIS.bit.DMACH5 == (uint8)1)
        {
          DMA_CH5_CALLBACK();
          SCU->DMAISC.bit.DMACH5CLR = 1u;
          #if (NVIC_IRQ30_HANDLER_INT_CHECK == 1)
            u8_interrupt_cnt_irq30 += 1;
          #endif
        }
      }
    #endif /* Interrupt assigned to this Node */
  #endif /* Interrupt enabled */

  /* DMA Ch6 */
  #if (DMA_CH6_INT_EN == 1)
    #if ((SCU_INP7 & SCU_INP7_INP_DMACH6_Msk) >>  SCU_INP7_INP_DMACH6_Pos == DMA_INP_NVIC_IRQ30)
      if ((uint8)SCU->DMAIEN.bit.DMACH6EN == (uint8)1)
      {
        if ((uint8)SCU->DMAIS.bit.DMACH6 == (uint8)1)
        {
          DMA_CH6_CALLBACK();
          SCU->DMAISC.bit.DMACH6CLR = 1u;
          #if (NVIC_IRQ30_HANDLER_INT_CHECK == 1)
            u8_interrupt_cnt_irq30 += 1;
          #endif
        }
      }
    #endif /* Interrupt assigned to this Node */
  #endif /* Interrupt enabled */

  /* DMA Ch7 */
  #if (DMA_CH7_INT_EN == 1)
    #if ((SCU_INP7 & SCU_INP7_INP_DMACH7_Msk) >>  SCU_INP7_INP_DMACH7_Pos == DMA_INP_NVIC_IRQ30)
      if ((uint8)SCU->DMAIEN.bit.DMACH7EN == (uint8)1)
      {
        if ((uint8)SCU->DMAIS.bit.DMACH7 == (uint8)1)
        {
          DMA_CH7_CALLBACK();
          SCU->DMAISC.bit.DMACH7CLR = 1u;
          #if (NVIC_IRQ30_HANDLER_INT_CHECK == 1)
            u8_interrupt_cnt_irq30 += 1;
          #endif
        }
      }
    #endif /* Interrupt assigned to this Node */
  #endif /* Interrupt enabled */

  /* DMA Error */
  #if (DMA_ERROR_INT_EN == 1)
    #if ((SCU_INP7 & SCU_INP7_INP_DMATRERR_Msk) >>  SCU_INP7_INP_DMATRERR_Pos == DMA_INP_NVIC_IRQ30)
      if ((uint8)SCU->DMAIEN.bit.DMATRERREN == (uint8)1)
      {
        if ((uint8)DMA->ERR_CLR.bit.ERR_CLR == (uint8)1)
        {
          DMA_ERROR_CALLBACK();
          DMA->ERR_CLR.bit.ERR_CLR = 1u;
          #if (NVIC_IRQ30_HANDLER_INT_CHECK == 1)
            u8_interrupt_cnt_irq30 += 1;
          #endif
        }
      }
    #endif /* Interrupt assigned to this Node */
  #endif /* Interrupt enabled */

}
#endif /* ((CPU_NVIC_ISER & CPU_NVIC_ISER_IRQEN30_Msk) == 1u) */
