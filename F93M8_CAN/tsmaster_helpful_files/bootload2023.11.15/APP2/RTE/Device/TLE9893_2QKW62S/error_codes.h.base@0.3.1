/* ===================================================================
** Copyright (C) Infineon Technologies AG
** All rights reserved.
** ===================================================================
**
** ===================================================================
** This document contains proprietary information. Passing on and
** copying of this document, and communication of its contents is not
** permitted without prior written authorization.
** ===================================================================
**
** @brief This file contains the BootRom error codes that
**         returned by the sub-functions. Each error code
**         number is unique for the overall BootRom
**
**         THIS FILE IS AUTOMATICALLY GENERATED
**
**         DO NOT MODIFY IT MANUALLY.
**
* */

/**
 * \file     error_codes.h
 *
 * \brief    Error codes definition
 *
 * \version  V0.3.1
 * \date     25. Apr 2022
 *
 */

/*******************************************************************************
**                             Author(s) Identity                             **
********************************************************************************
** Initials     Name                                                          **
** ---------------------------------------------------------------------------**
** JO           Julia Ott                                                     **
** BG           Blandine Guillot                                              **
** DM           Daniel Mysliwitz                                              **
*******************************************************************************/

/*******************************************************************************
**                          Revision Control History                          **
********************************************************************************
** V0.1.0: 2020-10-06, BG:   Initial version of revision history              **
** V0.1.1: 2020-11-26, JO:   EP-624: Removed internal error codes             **
** V0.2.0: 2021-07-12, JO:   EP-863: Added error codes for AB design step     **
** V0.2.1: 2021-11-12, JO:   EP-937: Updated copyright and branding           **
** V0.3.0: 2021-11-30, BG:   EP-875: Added error codes for AK design step     **
**                           Removed error codes for AA and AB design steps   **
** V0.3.1: 2022-04-25, JO:   EP-1039: Corrected MISRA violations              **
*******************************************************************************/


#ifndef _ERROR_CODES_H_
#define _ERROR_CODES_H_

/*******************************************************************************
**                                  Includes                                  **
*******************************************************************************/
#include "RTE_Components.h"


/*******************************************************************************
**                          Global Macro Declarations                         **
*******************************************************************************/

/** No Error */
#define ERR_LOG_SUCCESS                                              0

/** Standard Error */
#define ERR_LOG_ERROR                                                (-1)

/** Invalid user API function ID */
#define ERR_LOG_CODE_INVALID_USER_FID                                (0xFE000000U)

/** Invalid user API function ID */
#define ERR_LOG_CODE_UNPRIVILEGED                                    (0xFF000000U)

/** Mismatch in received number of bytes for the BSL command */
#define ERR_LOG_CODE_BSL_RECV_BYTES_MISMATCH                         (-2)

/** Invalid BSL parameters to NVM erase command */
#define ERR_LOG_CODE_NVM_ERASE_PARAMS_INVALID                        (-3)

/** Specified customer configured UBSL size is invalid */
#define ERR_LOG_CODE_INVALID_CUSTOMER_CONFIG_UBSL_SIZE               (-4)

/** Customer configured UBSL size or privilege already programmed or read error */
#define ERR_LOG_CODE_UBSL_CONFIG_ALREADY_SET_OR_READ_ERR             (-5)

/** Customer configured UBSL size can't be changed when code is present in NVM */
#define ERR_LOG_CODE_NVM_CODE_PROGRAMMED                             (-6)

/** BSL: Calculated NVM checksum does not match */
#define ERR_LOG_CODE_BSL_NVM_CALC_CHECKSUM_MISMATCH                  (-7)

/** Memory address range is invalid */
#define ERR_LOG_CODE_MEM_ADDR_RANGE_INVALID                          (-8)

/** Invalid baudrate parameter or current BSL interface does not support it */
#define ERR_LOG_CODE_BAUDRATE_SET_FAIL                               (-9)

/** BSL command validity failed */
#define ERR_LOG_CODE_CMD_VALIDITY_FAIL                               (-12)

/** Received unknown BSL command ID */
#define ERR_LOG_CODE_BSL_CID_INVALID                                 (-13)

/** Key write failed due to protection setting */
#define ERR_LOG_CODE_KEY_PROTECTED                                   (-14)

/** Key write failed due to invalid key version */
#define ERR_LOG_CODE_KEY_VERSION                                     (-15)

/** Key write failed due to invalid key size */
#define ERR_LOG_CODE_KEY_SIZE                                        (-16)

/**{ */
#define ERR_LOG_CODE_KEY_ERASE_FAIL                                  (-17)

/** Key slot contains mismatch data between main and backup pages */
#define ERR_LOG_CODE_KEY_SLOT_MISMATCH                               (-18)

/** Key slot contains unrecoverable error */
#define ERR_LOG_CODE_KEY_SLOT_CORRUPTED                              (-19)

/** Key slot contained unrecoverable error and was erased */
#define ERR_LOG_CODE_KEY_VERIFY_FAIL                                 (-20)

/** CMAC verification operation resulted in a mismatch */
#define ERR_LOG_CODE_CMAC_VERIFY_FAIL                                (-21)

/** AES library unsupported error */
#define ERR_LOG_CODE_AES_UNSUPPORTED_ERROR                           (-22)

/** AES library reseed required error */
#define ERR_LOG_CODE_AES_RESEED_NEEDED_ERROR                         (-23)

/** AES library buffer too small error */
#define ERR_LOG_CODE_AES_BUFFER_SMALL_ERROR                          (-24)

/** AES library error */
#define ERR_LOG_CODE_AES_ERROR                                       (-25)

/** Crypto functions are not available */
#define ERR_LOG_CODE_AES_UNAVAILABLE_ERROR                           (-26)

/** Invalid pointer address */
#define ERR_LOG_CODE_USER_POINTER_RAM_RANGE_INVALID                  (-27)

/** Access is not allowed when target segment is protected */
#define ERR_LOG_CODE_SEGMENT_PROTECTED                               (-29)

/** Nested calls are not allowed */
#define ERR_LOG_CODE_SEMAPHORE_RESERVED                              (-30)

/** Factory test BootROM signature read error */
#define ERR_LOG_CODE_FTEST_BOOTROM_SIGNATURE_READ                    (-31)

/** Factory test power module test, P0.1 was not low */
#define ERR_LOG_CODE_TEST_HTOL_PWR_LOW_TEST_FAIL                     (-32)

/** Factory test power module test, P0.1 was not high */
#define ERR_LOG_CODE_TEST_HTOL_PWR_HIGH_TEST_FAIL                    (-33)

/** Factory test HTOL functional burn-in XRAM verification failed */
#define ERR_LOG_CODE_TEST_HTOL_FBI_RAM_FAIL                          (-34)

/** SA encountered an error not possible to repair */
#define ERR_LOG_CODE_SA_UNRECOVERABLE                                (-35)

/** indicate to verification: Only set GPTRC with single mapram sector range init failure */
#define ERR_LOG_CODE_MAPRAM_SECTOR_RANGE_INIT_FAIL                   (-36)

/** Mapped page ECC2 error when trying to init mapRAM */
#define ERR_LOG_CODE_MAPRAM_INIT_PAGE_FAIL                           (-37)

/** Mapped page has double mapping error when trying to init mapRAM */
#define ERR_LOG_CODE_MAPRAM_INIT_DM_PAGE_FAIL                        (-38)

/** Error when setting the assembly buffer to mode 1 or 2 */
#define ERR_LOG_CODE_ACCESS_AB_MODE_ERROR                            (-39)

/** ECC2 data error generated while reading from a NVM page */
#define ERR_LOG_CODE_NVM_ECC2_DATA_ERROR                             (-40)

/** 2 or more bit errors detected in NVM page when verifying NVM data */
#define ERR_LOG_CODE_NVM_VER_ERROR                                   (-41)

/** Mapped page has double mapping or ECC2 error when trying to init mapRAM */
#define ERR_LOG_CODE_MAPRAM_INIT_FAIL                                (-42)

/** NVM programming and mapRAM init update failed after mapped page programming */
#define ERR_LOG_CODE_VERIFY_AND_MAPRAM_INIT_FAIL                     (-43)

/** ECC2 mapBlock error generated while reading from a NVM page */
#define ERR_LOG_CODE_NVM_ECC2_MAPBLOCK_ERROR                         (-44)

/** MAPRAM physical page number for a given logical sector/page is larger than the number of physical pages in a sector */
#define ERR_LOG_CODE_NVM_SPARE_PAGE_NOT_AVAILABLE                    (-45)

/** ECC2 mapRAM error generated while reading mapRAM */
#define ERR_LOG_CODE_NVM_ECC2_MAPRAM_ERROR                           (-46)

/** NVM page is not mapped */
#define ERR_LOG_CODE_NVM_PAGE_NOT_MAPPED                             (-47)

/** Applying of NVM protection from NVM CS failed during bootup */
#define ERR_LOG_CODE_NVM_APPLY_PROTECTION_FAIL                       (-48)

/** NVM HW is not available during startup */
#define ERR_LOG_CODE_NVM_NOT_AVAILABLE                               (-49)

/** ECC2 error, don't trust the data */
#define ERR_LOG_CODE_VIRGIN                                          (-50)

/** Attempt to access NVM 100TP page address outside of the valid range */
#define ERR_LOG_CODE_100TP_PAGE_INVALID                              (-51)

/** NVM 100TP page write count was exceeded */
#define ERR_LOG_CODE_100TP_WRITE_COUNT_EXCEEDED                      (-52)

/** Attempt to access NVM address range which is crossing NVM page boundary */
#define ERR_LOG_CODE_ADDRESS_RANGE_CROSSING_PAGE_BOUNDARY            (-53)

/** NVM config sector checksum calculation failed */
#define ERR_LOG_CODE_CS_PAGE_CHECKSUM                                (-54)

/** MBIST test detected on error */
#define ERR_LOG_CODE_MBIST_FAILED                                    (-55)

/** Boot page checksum size is larger than UBSL region */
#define ERR_LOG_CODE_CHKSUM_SIZE_INVALID                             (-56)

/** Invalid reset handler in boot page */
#define ERR_LOG_CODE_INVALID_BOOT_CONFIG                             (-57)

/** An ECC2 error occurred while reading boot page */
#define ERR_LOG_CODE_START_PAGE_ECC2READ                             (-58)

/** Analog trimming address check failed */
#define ERR_LOG_CODE_ANA_TRIM_ADDRESS                                (-59)

/** Analog trimming data block contains wrong magic field */
#define ERR_LOG_CODE_ANA_TRIM_MAGIC                                  (-60)

/** Analog trimming data block is not 32-bit aligned */
#define ERR_LOG_CODE_ANA_TRIM_NOT_ALIGNED                            (-61)

/** First phase internal analog module trimming failed */
#define ERR_LOG_CODE_AM_TRIM_INTERNAL_1                              (-62)

/** Second phase internal analog module trimming failed */
#define ERR_LOG_CODE_AM_TRIM_INTERNAL_2                              (-63)

/** Customer analog module trimming phase failed */
#define ERR_LOG_CODE_AM_TRIM_CUSTOMER                                (-64)

/** Analog module trimming data validity check failed */
#define ERR_LOG_CODE_AM_TRIM_DATA_NOT_VALID                          (-65)

/** Invalid parameter */
#define ERR_LOG_CODE_PARAM_INVALID                                   (-66)

/** Single ECC event has occurred */
#define ERR_LOG_CODE_ECC1READ_ERROR                                  (-67)

/** Double or more ECC event has occurred */
#define ERR_LOG_CODE_ECC2READ_ERROR                                  (-68)

/** Invalid passphrase or passphrase not configured */
#define ERR_LOG_CODE_USER_PROTECT_WRONG_PASSWORD                     (-69)

/** user_ram_mbist() RAM range for MBIST is invalid */
#define ERR_LOG_CODE_MBIST_RAM_RANGE_INVALID                         (-70)

/** Invalid secure container size */
#define ERR_LOG_CODE_SIZE_INVALID                                    (-72)

#endif /* _ERROR_CODES_H_ */

