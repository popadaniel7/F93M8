/*
 ***********************************************************************************************************************
 *
 * Copyright (c) Infineon Technologies AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,are permitted provided that the
 * following conditions are met:
 *
 *   Redistributions of source code must retain the above copyright notice, this list of conditions and the  following
 *   disclaimer.
 *
 *   Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
 *   following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 *   Neither the name of the copyright holders nor the names of its contributors may be used to endorse or promote
 *   products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  OF THE
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 **********************************************************************************************************************/
/**
 * \file     adc1.h
 *
 * \brief    ADC1 low level access library
 *
 * \version  V0.4.6
 * \date     12. Nov 2021
 *
 * \note
 */

/** \addtogroup ADC1_api
 *  @{
 */
 
/* Generated by generate_functions_02_xlsx2func.py, version 1.0.1 on 09. Feb 2021
 * from File 'adc1.xlsx', version 0.2.1
 */

/*******************************************************************************
**                             Author(s) Identity                             **
********************************************************************************
** Initials     Name                                                          **
** ---------------------------------------------------------------------------**
** JO           Julia Ott                                                     **
** BG           Blandine Guillot                                              **
** DM           Daniel Mysliwitz                                              **
*******************************************************************************/

/*******************************************************************************
**                          Revision Control History                          **
********************************************************************************
** V0.1.0: 2020-05-26, DM:   Initial version                                  **
** V0.1.1: 2020-08-11, JO:   EP-449: Disabled compiler warnings for ARMCC v6  **
**                           locally where violations can't be avoided        **
** V0.1.2: 2020-10-06, BG:   EP-492: Removed MISRA 2012 errors                **
** V0.2.0: 2020-10-16, JO:   EP-523: Updated parameter names                  **
**                           Added functions for sequence configuration       **
**                           Removed functions that access                    **
**                           ADC1->GLOBCONF.bit.LOWSUP, DSCAL, CPCLK_HV_FAST, **
**                           EN_CONV_TIMOUT (bits have been removed)          **
** V0.2.1: 2020-10-21, BG:   EP-539: Considered the enable checkbox in CW in  **
**                           the initialization function                      **
** V0.3.0: 2020-10-22, JO:   EP-543: Corrected check of return value in       **
**                           ADC1_getChResult_mV and ADC1_getChFiltResult_mV  **
** V0.3.1: 2020-10-27, BG:   EP-561: Renamed split compare up/low bits        **
** V0.3.2: 2020-11-04, JO:   EP-556: Removed functions that are related to    **
**                           ADC EOC Fail Interrupt                           **
** V0.3.3: 2020-11-12, JO:   EP-590: Removed \param none and \return none to  **
**                           avoid doxygen warning                            **
**                           Updated stype of parameter of type pointer       **
** V0.3.4: 2020-11-17, BG:   EP-598: Added VAREF-related functions            **
** V0.3.5: 2020-11-18, DM:   EP-579: Fixed filtout value for postprocessing   **
**                           private function declaration removed from h-file **
** V0.3.6: 2020-11-20, BG:   EP-610: Corrected MISRA 2012 errors              **
**                           The following rules are globally deactivated:    **
**                           - Info 774: Boolean within 'if' always evaluates **
**                             to False/True                                  **
** V0.3.7: 2020-12-03, JO:   EP-610: Fixed ARMCC v6 compiler warnings         **
** V0.3.8: 2020-12-16, DM:   EP-650: Replaced NOP loop in the ADC1_init() by  **
**                           wait for ADC1 ready                              **
** V0.3.9: 2020-12-18, DM:   EP-642: add separate seq. shadow transfer enable **
**                           prior to trigger seq. shadow transfer            **
** V0.4.0: 2020-12-18, BG:   EP-652: Corrected name of error code variable    **
** V0.4.1: 2021-02-09, JO:   EP-696: Changed from anonymous to named typedefs **
**                           to prevent MISRA warning                         **
** V0.4.2: 2021-03-04, BG:   EP-718: Added enums for trigger sources          **
** V0.4.3: 2021-04-06, BG:   EP-760: Replaced if instructions to check if the **
**                           module is enabled with preprocessor directives to**
**                           avoid compiler warnings                          **
** V0.4.4: 2021-04-23, NI:   EP-706: Added function instead of direct field   **
**                           access in ADC1_init()                            **
**                           Added missing elses for range check if() in      **
**                           several functions.                               **
** V0.4.5: 2021-08-06, BG:   EP-695: Removed the check of the VALID bit in    **
**                           ADC1_getChResult()                               **
**                           Updated documentation for ADC1_getChResult() and **
**                           ADC1_getChResult_mV()                            **
** V0.4.6: 2021-11-12, JO:   EP-937: Updated copyright and branding           **
*******************************************************************************/

#ifndef _ADC1_H
#define _ADC1_H

/*******************************************************************************
**                                  Includes                                  **
*******************************************************************************/

#include "tle_variants.h"
#include "types.h"
#include "adc1_defines.h"
#include "tle989x.h"

/*******************************************************************************
**                          Global Macro Declarations                         **
*******************************************************************************/

/** \brief ADC1 number of digital channels */
#define ADC1_DCH_CNT (20u)
/** \brief ADC1 number of analog intputs */
#define ADC1_AI_CNT (27u)
/** \brief ADC1 number of filter channels */
#define ADC1_FILT_CNT (4u)
/** \brief ADC1 number of sequencer channels */
#define ADC1_SEQ_CNT (4u)
/** \brief ADC1 number of channel slots per sequencer channels */
#define ADC1_SLOT_CNT (4u)
/** \brief ADC1 filter channel disabled */
#define ADC1_FILT_CH_DIS (4u)
/** \brief ADC1 sequencer shadow transfer, enable shadow transfer */
#define ADC1_SHADOWTRANS_EN (0x00700000u)
/** \brief ADC1 sequencer shadow transfer, Software Mode trigger */
#define ADC1_SHADOWTRANS_BY_SW (0x00770000u)
/** \brief ADC1 all digital channel mask, 9..0 */
#define ADC1_ALL_DCH_MSK (0xFFFFFu)
/** \brief ADC1 all sequence status mask, 11..0 */
#define ADC1_ALL_SQSTS_MSK (0xFFFu)
/** \brief ADC1 all filter status mask, 3..0 */
#define ADC1_ALL_FILTSTS_MSK (0xFu)
/** \brief ADC1 all compare status mask, 23..16, 7..0 */
#define ADC1_ALL_CMPSTS_MSK (0xFF00FFu)
/** \brief ADC1 reference voltage 5.0V */
#define ADC1_VREF_5000mV (5000u)
/** \brief ADC1 resolution mask (14bit) incl. two bit shift due to calibration */
#define ADC1_MAX_RESOLUTION (0x3FFFu)
/** \brief ADC1 attenuator type 0 (102/512) */
#define ADC1_ATT_TYPE0 (102u)
/** \brief ADC1 attenuator type 1 (72/512) */
#define ADC1_ATT_TYPE1 (72u)
/** \brief ADC1 attenuator type 2 (512/512) */
#define ADC1_ATT_TYPE2 (512u)
/** \brief ADC1 attenuator denominator (512) */
#define ADC1_ATT_DENOM (512u)
/** \brief ADC1 digital channel selection macro, channel 0 */
#define ADC1_DCH0 (0u)
/** \brief ADC1 digital channel selection macro, channel 1 */
#define ADC1_DCH1 (1u)
/** \brief ADC1 digital channel selection macro, channel 2 */
#define ADC1_DCH2 (2u)
/** \brief ADC1 digital channel selection macro, channel 3 */
#define ADC1_DCH3 (3u)
/** \brief ADC1 digital channel selection macro, channel 4 */
#define ADC1_DCH4 (4u)
/** \brief ADC1 digital channel selection macro, channel 5 */
#define ADC1_DCH5 (5u)
/** \brief ADC1 digital channel selection macro, channel 6 */
#define ADC1_DCH6 (6u)
/** \brief ADC1 digital channel selection macro, channel 7 */
#define ADC1_DCH7 (7u)
/** \brief ADC1 digital channel selection macro, channel 8 */
#define ADC1_DCH8 (8u)
/** \brief ADC1 digital channel selection macro, channel 9 */
#define ADC1_DCH9 (9u)
/** \brief ADC1 digital channel selection macro, channel 10 */
#define ADC1_DCH10 (10u)
/** \brief ADC1 digital channel selection macro, channel 11 */
#define ADC1_DCH11 (11u)
/** \brief ADC1 digital channel selection macro, channel 12 */
#define ADC1_DCH12 (12u)
/** \brief ADC1 digital channel selection macro, channel 13 */
#define ADC1_DCH13 (13u)
/** \brief ADC1 digital channel selection macro, channel 14 */
#define ADC1_DCH14 (14u)
/** \brief ADC1 digital channel selection macro, channel 15 */
#define ADC1_DCH15 (15u)
/** \brief ADC1 digital channel selection macro, channel 16 */
#define ADC1_DCH16 (16u)
/** \brief ADC1 digital channel selection macro, channel 17 */
#define ADC1_DCH17 (17u)
/** \brief ADC1 digital channel selection macro, channel 18 */
#define ADC1_DCH18 (18u)
/** \brief ADC1 digital channel selection macro, channel 19 */
#define ADC1_DCH19 (19u)

/** \brief ADC1 sequencer channel selection macro, sequencer channel 0 */
#define ADC1_SEQ0 (0u)
/** \brief ADC1 sequencer channel selection macro, sequencer channel 1 */
#define ADC1_SEQ1 (1u)
/** \brief ADC1 sequencer channel selection macro, sequencer channel 2 */
#define ADC1_SEQ2 (2u)
/** \brief ADC1 sequencer channel selection macro, sequencer channel 3 */
#define ADC1_SEQ3 (3u)

/** \brief ADC1 sequencer slot selection, slot 0 */
#define ADC1_SEQ_SLOT0 (0u)
/** \brief ADC1 sequencer slot selection, slot 1 */
#define ADC1_SEQ_SLOT1 (1u)
/** \brief ADC1 sequencer slot selection, slot 2 */
#define ADC1_SEQ_SLOT2 (2u)
/** \brief ADC1 sequencer slot selection, slot 3 */
#define ADC1_SEQ_SLOT3 (3u)

/** \brief ADC1 software trigger selection */
#define ADC1_SW_TRIGGER (0u)

/*******************************************************************************
**                          Global Type Declarations                          **
*******************************************************************************/

#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wpadded"
#endif

/** \enum tADC1_Seq0Trig
 *  \brief Enumeration for the trigger source of the sequence 0
 */
typedef enum _tADC1_Seq0Trig
{
  ADC1_Seq0Trig_SW           = 0u,            /*!< 0 Software Trigger */
  ADC1_Seq0Trig_T12ZM        = 1u,            /*!< 1 T12 Zero Match */
  ADC1_Seq0Trig_T12PM        = 2u,            /*!< 2 T12 Period Match */
  ADC1_Seq0Trig_T13PM        = 4u,            /*!< 4 T13 Period Match */
  ADC1_Seq0Trig_T16CM        = 5u,            /*!< 5 T16 Compare Match */
  ADC1_Seq0Trig_HallCorrect  = 6u,            /*!< 6 Correct Hall Event */
  ADC1_Seq0Trig_Seq0Complete = 7u,            /*!< 7 Sequence 0 complete */
  ADC1_Seq0Trig_Seq3Complete = 8u             /*!< 8 Sequence 3 complete */
} tADC1_Seq0Trig;

/** \enum tADC1_Seq1Trig
 *  \brief Enumeration for the trigger source of the sequence 1
 */
typedef enum _tADC1_Seq1Trig
{
  ADC1_Seq1Trig_SW           = 0u,            /*!< 0 Software Trigger */
  ADC1_Seq1Trig_T12ZM        = 1u,            /*!< 1 T12 Zero Match */
  ADC1_Seq1Trig_T12CC70ACM   = 2u,            /*!< 2 T12 CC70A Compare Match */
  ADC1_Seq1Trig_T12C72BCM    = 3u,            /*!< 3 T12 C72B Compare Match */
  ADC1_Seq1Trig_T14PM        = 4u,            /*!< 4 T14 Period Match */
  ADC1_Seq1Trig_T13CM        = 5u,            /*!< 5 T13 Compare Match */
  ADC1_Seq1Trig_GPT1         = 6u,            /*!< 6 GPT1 */
  ADC1_Seq1Trig_Seq1Complete = 7u,            /*!< 7 Sequence 1 complete */
  ADC1_Seq1Trig_Seq0Complete = 8u             /*!< 8 Sequence 0 complete */
} tADC1_Seq1Trig;

/** \enum tADC1_Seq2Trig
 *  \brief Enumeration for the trigger source of the sequence 2
 */
typedef enum _tADC1_Seq2Trig
{
  ADC1_Seq2Trig_SW           = 0u,            /*!< 0 Software Trigger */
  ADC1_Seq2Trig_T12ZM        = 1u,            /*!< 1 T12 Zero Match */
  ADC1_Seq2Trig_T12CC71ACM   = 2u,            /*!< 2 T12 CC71A Compare Match */
  ADC1_Seq2Trig_T12C70BCM    = 3u,            /*!< 3 T12 C70B Compare Match */
  ADC1_Seq2Trig_T15PM        = 4u,            /*!< 4 T15 Period Match */
  ADC1_Seq2Trig_T14CM        = 5u,            /*!< 5 T14 Compare Match */
  ADC1_Seq2Trig_GPT2         = 6u,            /*!< 6 GPT2 */
  ADC1_Seq2Trig_Seq2Complete = 7u,            /*!< 7 Sequence 2 complete */
  ADC1_Seq2Trig_Seq1Complete = 8u             /*!< 8 Sequence 1 complete */
} tADC1_Seq2Trig;

/** \enum tADC1_Seq3Trig
 *  \brief Enumeration for the trigger source of the sequence 3
 */
typedef enum _tADC1_Seq3Trig
{
  ADC1_SQ3Trig_SW           = 0u,            /*!< 0 Software Trigger */
  ADC1_SQ3Trig_T12ZM        = 1u,            /*!< 1 T12 Zero Match */
  ADC1_SQ3Trig_T12CC72ACM   = 2u,            /*!< 2 T12 CC72A Compare Match */
  ADC1_SQ3Trig_T12C71BCM    = 3u,            /*!< 3 T12 C71B Compare Match */
  ADC1_SQ3Trig_T16PM        = 4u,            /*!< 4 T16 Period Match */
  ADC1_SQ3Trig_T15CM        = 5u,            /*!< 5 T15 Compare Match */
  ADC1_SQ3Trig_Seq3Complete = 7u,            /*!< 7 Sequence 3 complete */
  ADC1_SQ3Trig_Seq2Complete = 8u             /*!< 8 Sequence 2 complete */
} tADC1_Seq3Trig;

/** \struct tADC1_SQCFGx
 *  \brief Structure for the ADC1 Sequence Configuration Register
 */
typedef union _tADC1_SQCFGx
{
  uint32 reg;                         /*!< Sequence Configuration Register */
  struct
  {
    uint32 SLOTS      : 3;            /*!< [2..0] Number of used Slots in Sequence */
    uint32            : 1;
    uint32 SQREP      : 2;            /*!< [5..4] Sequence repetition */
    uint32 COLLCFG    : 1;            /*!< [6..6] Collision Config */
    uint32 WFRCFG     : 1;            /*!< [7..7] Wait for Read Enable */
    uint32 TRGSEL     : 4;            /*!< [11..8] Trigger Select */
    uint32 GTSEL      : 2;            /*!< [13..12] Gating Select */
    uint32 TRGSW      : 1;            /*!< [14..14] Software Trigger Bit */
    uint32 GTSW       : 1;            /*!< [15..15] Trigger Software Gating */
  } bit;
} tADC1_SQCFGx;

/** \struct tADC1_SQSLOTx
 *  \brief Structure for the ADC1 SQ Channel Slot Register
 */
typedef union _tADC1_SQSLOTx
{
  uint32 reg;                         /*!< SQ Channel Slot Register */
  struct
  {
    uint32 CHSEL0     : 5;            /*!< [4..0] Channel Select */
    uint32            : 3;
    uint32 CHSEL1     : 5;            /*!< [12..8] Channel Select */
    uint32            : 3;
    uint32 CHSEL2     : 5;            /*!< [20..16] Channel Select */
    uint32            : 3;
    uint32 CHSEL3     : 5;            /*!< [28..24] Channel Select */
  } bit;
} tADC1_SQSLOTx;

/** \struct tADC1_CHCFGx
 *  \brief Structure for the ADC1 Channel Configuration Register
 */
typedef union _tADC1_CHCFGx
{
  uint32 reg;                         /*!< Channel Configuration Register */
  struct
  {
    uint32 INSEL      : 5;            /*!< [4..0] ADC Input Selection */
    uint32            : 3;
    uint32 CHREP      : 4;            /*!< [11..8] Channel Repetition */
    uint32            : 4;
    uint32 FILSEL     : 3;            /*!< [18..16] Filter Selection */
    uint32 CMPSEL     : 3;            /*!< [21..19] Compare Selection */
    uint32 CLASSEL    : 2;            /*!< [23..22] Conversion Class Selection */
  } bit;
} tADC1_CHCFGx;

/** \struct tADC1_CONVCFGx
 *  \brief Structure for the ADC1 Channel Configuration Register
 */
typedef union _tADC1_CONVCFGx
{
  uint32 reg;                         /*!< Channel Configuration Register */
  struct
  {
    uint32 TCONF      : 2;            /*!< [1..0] Tracking Conversion config */
    uint32 OVERS      : 2;            /*!< [3..2] Oversampling config */
    uint32 STC        : 4;            /*!< [7..4] Sample Time config */
    uint32 SESP       : 1;            /*!< [8..8] Spreaded early sample point config */
    uint32            : 1;
    uint32 MSBD       : 1;            /*!< [10..10] MSB doubling enable */
    uint32 PCAL       : 1;            /*!< [11..11] Post Calibration enable */
    uint32 BWD        : 2;            /*!< [13..12] BWD timing config */
    uint32 BWD_HI_CUR : 1;            /*!< [14..14] BWD current configuration */
  } bit;
} tADC1_CONVCFGx;

/** \struct tADC1_CMPCFGx
 *  \brief Structure for the ADC1 Compare Channel 0 Control Register
 */
typedef union _tADC1_CMPCFGx
{
  uint32 reg;                         /*!< Compare Channel 0 Control Register */
  struct
  {
    uint32 LOWER      : 8;            /*!< [7..0] Lower Compare Value */
    uint32 INP_SEL    : 1;            /*!< [8..8] Input selection for the comparator unit */
    uint32            : 3;
    uint32 HYST_LO    : 2;            /*!< [13..12] Hysteresis set for lower compare threshold */
    uint32            : 2;
    uint32 UPPER      : 8;            /*!< [23..16] Upper Compare Value */
    uint32 BLANK_TIME : 3;            /*!< [26..24] Blank Time configuration */
    uint32 RST_BLANK_TIME: 1;            /*!< [27..27] Restart Blank time */
    uint32 HYST_UP    : 2;            /*!< [29..28] Hysteresis setting for upper compare threshold */
    uint32 MODE       : 2;            /*!< [31..30] Compare Mode */
  } bit;
} tADC1_CMPCFGx;

#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic pop
#endif

/*******************************************************************************
**                         Global Function Declarations                       **
*******************************************************************************/

sint8 ADC1_init(void);
sint8 ADC1_getChResult(uint16 *u16p_digValue, uint8 u8_channel);
sint8 ADC1_getChResult_mV(uint16 *u16p_digValue_mV, uint8 u8_channel);
sint8 ADC1_getChFiltResult(uint16 *u16p_filtDigValue, uint8 u8_channel);
sint8 ADC1_getChFiltResult_mV(uint16 *u16p_filtDigValue_mV, uint8 u8_channel);
sint8 ADC1_getSeqResult(uint16 *u16p_DigValue, uint8 u8_seqIdx, uint8 u8_slotIdx);
sint8 ADC1_getSeqResult_mV(uint16 *u16p_digValue_mV, uint8 u8_seqIdx, uint8 u8_slotIdx);
sint8 ADC1_startSequence(uint8 u8_seqIdx);
uint8 ADC1_getEndOfConvSts(uint8 u8_seqIdx, uint8 u8_slotIdx);
INLINE void ADC1_enPower(void);
INLINE void ADC1_disPower(void);
INLINE void ADC1_setClockDiv(uint8 u8_value);
INLINE uint8 ADC1_getClockDiv(void);
INLINE void ADC1_enSuspend(void);
INLINE void ADC1_disSuspend(void);
INLINE void ADC1_setSuspendMode(uint8 u8_value);
INLINE uint8 ADC1_getSuspendMode(void);
INLINE uint8 ADC1_getSuspendSts(void);
INLINE uint8 ADC1_getReady(void);
INLINE void ADC1_setSeq0Config(tADC1_SQCFGx s_value);
INLINE void ADC1_setSeq0Repetition(uint8 u8_value);
INLINE uint8 ADC1_getSeq0Repetition(void);
INLINE void ADC1_enSeq0CollisionDetect(void);
INLINE void ADC1_disSeq0CollisionDetect(void);
INLINE void ADC1_enSeq0WaitForRead(void);
INLINE void ADC1_disSeq0WaitForRead(void);
INLINE void ADC1_setSeq0TriggerSelect(tADC1_Seq0Trig e_Seq0Trig);
INLINE uint8 ADC1_getSeq0TriggerSelect(void);
INLINE void ADC1_setSeq0GatingSelect(uint8 u8_value);
INLINE uint8 ADC1_getSeq0GatingSelect(void);
INLINE void ADC1_enSeq0TriggerGate(void);
INLINE void ADC1_disSeq0TriggerGate(void);
INLINE void ADC1_setSeq0Slot0(uint8 u8_value);
INLINE uint8 ADC1_getSeq0Slot0(void);
INLINE void ADC1_setSeq0Slot1(uint8 u8_value);
INLINE uint8 ADC1_getSeq0Slot1(void);
INLINE void ADC1_setSeq0Slot2(uint8 u8_value);
INLINE uint8 ADC1_getSeq0Slot2(void);
INLINE void ADC1_setSeq0Slot3(uint8 u8_value);
INLINE uint8 ADC1_getSeq0Slot3(void);
INLINE void ADC1_setSeq1Config(tADC1_SQCFGx s_value);
INLINE void ADC1_setSeq1Repetition(uint8 u8_value);
INLINE uint8 ADC1_getSeq1Repetition(void);
INLINE void ADC1_enSeq1CollisionDetect(void);
INLINE void ADC1_disSeq1CollisionDetect(void);
INLINE void ADC1_enSeq1WaitForRead(void);
INLINE void ADC1_disSeq1WaitForRead(void);
INLINE void ADC1_setSeq1TriggerSelect(tADC1_Seq1Trig e_Seq1Trig);
INLINE uint8 ADC1_getSeq1TriggerSelect(void);
INLINE void ADC1_setSeq1GatingSelect(uint8 u8_value);
INLINE uint8 ADC1_getSeq1GatingSelect(void);
INLINE void ADC1_enSeq1TriggerGate(void);
INLINE void ADC1_disSeq1TriggerGate(void);
INLINE void ADC1_setSeq1Slot0(uint8 u8_value);
INLINE uint8 ADC1_getSeq1Slot0(void);
INLINE void ADC1_setSeq1Slot1(uint8 u8_value);
INLINE uint8 ADC1_getSeq1Slot1(void);
INLINE void ADC1_setSeq1Slot2(uint8 u8_value);
INLINE uint8 ADC1_getSeq1Slot2(void);
INLINE void ADC1_setSeq1Slot3(uint8 u8_value);
INLINE uint8 ADC1_getSeq1Slot3(void);
INLINE void ADC1_setSeq2Config(tADC1_SQCFGx s_value);
INLINE void ADC1_setSeq2Repetition(uint8 u8_value);
INLINE uint8 ADC1_getSeq2Repetition(void);
INLINE void ADC1_enSeq2CollisionDetect(void);
INLINE void ADC1_disSeq2CollisionDetect(void);
INLINE void ADC1_enSeq2WaitForRead(void);
INLINE void ADC1_disSeq2WaitForRead(void);
INLINE void ADC1_setSeq2TriggerSelect(tADC1_Seq2Trig e_Seq2Trig);
INLINE uint8 ADC1_getSeq2TriggerSelect(void);
INLINE void ADC1_setSeq2GatingSelect(uint8 u8_value);
INLINE uint8 ADC1_getSeq2GatingSelect(void);
INLINE void ADC1_enSeq2TriggerGate(void);
INLINE void ADC1_disSeq2TriggerGate(void);
INLINE void ADC1_setSeq2Slot0(uint8 u8_value);
INLINE uint8 ADC1_getSeq2Slot0(void);
INLINE void ADC1_setSeq2Slot1(uint8 u8_value);
INLINE uint8 ADC1_getSeq2Slot1(void);
INLINE void ADC1_setSeq2Slot2(uint8 u8_value);
INLINE uint8 ADC1_getSeq2Slot2(void);
INLINE void ADC1_setSeq2Slot3(uint8 u8_value);
INLINE uint8 ADC1_getSeq2Slot3(void);
INLINE void ADC1_setSeq3Config(tADC1_SQCFGx s_value);
INLINE void ADC1_setSeq3Repetition(uint8 u8_value);
INLINE uint8 ADC1_getSeq3Repetition(void);
INLINE void ADC1_enSeq3CollisionDetect(void);
INLINE void ADC1_disSeq3CollisionDetect(void);
INLINE void ADC1_enSeq3WaitForRead(void);
INLINE void ADC1_disSeq3WaitForRead(void);
INLINE void ADC1_setSeq3TriggerSelect(tADC1_Seq3Trig e_Seq3Trig);
INLINE uint8 ADC1_getSeq3TriggerSelect(void);
INLINE void ADC1_setSeq3GatingSelect(uint8 u8_value);
INLINE uint8 ADC1_getSeq3GatingSelect(void);
INLINE void ADC1_enSeq3TriggerGate(void);
INLINE void ADC1_disSeq3TriggerGate(void);
INLINE void ADC1_setSeq3Slot0(uint8 u8_value);
INLINE uint8 ADC1_getSeq3Slot0(void);
INLINE void ADC1_setSeq3Slot1(uint8 u8_value);
INLINE uint8 ADC1_getSeq3Slot1(void);
INLINE void ADC1_setSeq3Slot2(uint8 u8_value);
INLINE uint8 ADC1_getSeq3Slot2(void);
INLINE void ADC1_setSeq3Slot3(uint8 u8_value);
INLINE uint8 ADC1_getSeq3Slot3(void);
INLINE uint8 ADC1_getSeq0WaitForRead(void);
INLINE uint8 ADC1_getSeq1WaitForRead(void);
INLINE uint8 ADC1_getSeq2WaitForRead(void);
INLINE uint8 ADC1_getSeq3WaitForRead(void);
INLINE uint8 ADC1_getSeq0CollSts(void);
INLINE uint8 ADC1_getSeq1CollSts(void);
INLINE uint8 ADC1_getSeq2CollSts(void);
INLINE uint8 ADC1_getSeq3CollSts(void);
INLINE uint8 ADC1_getSeq0IntSts(void);
INLINE uint8 ADC1_getSeq1IntSts(void);
INLINE uint8 ADC1_getSeq2IntSts(void);
INLINE uint8 ADC1_getSeq3IntSts(void);
INLINE uint8 ADC1_getCurrSeq(void);
INLINE void ADC1_clrSeq0WaitForRead(void);
INLINE void ADC1_clrSeq1WaitForRead(void);
INLINE void ADC1_clrSeq2WaitForRead(void);
INLINE void ADC1_clrSeq3WaitForRead(void);
INLINE void ADC1_clrSeq0CollSts(void);
INLINE void ADC1_clrSeq1CollSts(void);
INLINE void ADC1_clrSeq2CollSts(void);
INLINE void ADC1_clrSeq3CollSts(void);
INLINE void ADC1_clrSeq0IntSts(void);
INLINE void ADC1_clrSeq1IntSts(void);
INLINE void ADC1_clrSeq2IntSts(void);
INLINE void ADC1_clrSeq3IntSts(void);
INLINE void ADC1_setSeq0WaitForRead(void);
INLINE void ADC1_setSeq1WaitForRead(void);
INLINE void ADC1_setSeq2WaitForRead(void);
INLINE void ADC1_setSeq3WaitForRead(void);
INLINE void ADC1_setSeq0CollSts(void);
INLINE void ADC1_setSeq1CollSts(void);
INLINE void ADC1_setSeq2CollSts(void);
INLINE void ADC1_setSeq3CollSts(void);
INLINE void ADC1_setSeq0IntSts(void);
INLINE void ADC1_setSeq1IntSts(void);
INLINE void ADC1_setSeq2IntSts(void);
INLINE void ADC1_setSeq3IntSts(void);
INLINE void ADC1_setCh0Config(tADC1_CHCFGx s_value);
INLINE void ADC1_setCh1Config(tADC1_CHCFGx s_value);
INLINE void ADC1_setCh2Config(tADC1_CHCFGx s_value);
INLINE void ADC1_setCh3Config(tADC1_CHCFGx s_value);
INLINE void ADC1_setCh4Config(tADC1_CHCFGx s_value);
INLINE void ADC1_setCh5Config(tADC1_CHCFGx s_value);
INLINE void ADC1_setCh6Config(tADC1_CHCFGx s_value);
INLINE void ADC1_setCh7Config(tADC1_CHCFGx s_value);
INLINE void ADC1_setCh8Config(tADC1_CHCFGx s_value);
INLINE void ADC1_setCh9Config(tADC1_CHCFGx s_value);
INLINE void ADC1_setCh10Config(tADC1_CHCFGx s_value);
INLINE void ADC1_setCh11Config(tADC1_CHCFGx s_value);
INLINE void ADC1_setCh12Config(tADC1_CHCFGx s_value);
INLINE void ADC1_setCh13Config(tADC1_CHCFGx s_value);
INLINE void ADC1_setCh14Config(tADC1_CHCFGx s_value);
INLINE void ADC1_setCh15Config(tADC1_CHCFGx s_value);
INLINE void ADC1_setCh16Config(tADC1_CHCFGx s_value);
INLINE void ADC1_setCh17Config(tADC1_CHCFGx s_value);
INLINE void ADC1_setCh18Config(tADC1_CHCFGx s_value);
INLINE void ADC1_setCh19Config(tADC1_CHCFGx s_value);
INLINE uint8 ADC1_getCh0EndOfConvSts(void);
INLINE uint8 ADC1_getCh1EndOfConvSts(void);
INLINE uint8 ADC1_getCh2EndOfConvSts(void);
INLINE uint8 ADC1_getCh3EndOfConvSts(void);
INLINE uint8 ADC1_getCh4EndOfConvSts(void);
INLINE uint8 ADC1_getCh5EndOfConvSts(void);
INLINE uint8 ADC1_getCh6EndOfConvSts(void);
INLINE uint8 ADC1_getCh7EndOfConvSts(void);
INLINE uint8 ADC1_getCh8EndOfConvSts(void);
INLINE uint8 ADC1_getCh9EndOfConvSts(void);
INLINE uint8 ADC1_getCh10EndOfConvSts(void);
INLINE uint8 ADC1_getCh11EndOfConvSts(void);
INLINE uint8 ADC1_getCh12EndOfConvSts(void);
INLINE uint8 ADC1_getCh13EndOfConvSts(void);
INLINE uint8 ADC1_getCh14EndOfConvSts(void);
INLINE uint8 ADC1_getCh15EndOfConvSts(void);
INLINE uint8 ADC1_getCh16EndOfConvSts(void);
INLINE uint8 ADC1_getCh17EndOfConvSts(void);
INLINE uint8 ADC1_getCh18EndOfConvSts(void);
INLINE uint8 ADC1_getCh19EndOfConvSts(void);
INLINE uint8 ADC1_getCurrChannel(void);
INLINE void ADC1_clrCh0EndOfConvSts(void);
INLINE void ADC1_clrCh1EndOfConvSts(void);
INLINE void ADC1_clrCh2EndOfConvSts(void);
INLINE void ADC1_clrCh3EndOfConvSts(void);
INLINE void ADC1_clrCh4EndOfConvSts(void);
INLINE void ADC1_clrCh5EndOfConvSts(void);
INLINE void ADC1_clrCh6EndOfConvSts(void);
INLINE void ADC1_clrCh7EndOfConvSts(void);
INLINE void ADC1_clrCh8EndOfConvSts(void);
INLINE void ADC1_clrCh9EndOfConvSts(void);
INLINE void ADC1_clrCh10EndOfConvSts(void);
INLINE void ADC1_clrCh11EndOfConvSts(void);
INLINE void ADC1_clrCh12EndOfConvSts(void);
INLINE void ADC1_clrCh13EndOfConvSts(void);
INLINE void ADC1_clrCh14EndOfConvSts(void);
INLINE void ADC1_clrCh15EndOfConvSts(void);
INLINE void ADC1_clrCh16EndOfConvSts(void);
INLINE void ADC1_clrCh17EndOfConvSts(void);
INLINE void ADC1_clrCh18EndOfConvSts(void);
INLINE void ADC1_clrCh19EndOfConvSts(void);
INLINE void ADC1_setCh0EndOfConvSts(void);
INLINE void ADC1_setCh1EndOfConvSts(void);
INLINE void ADC1_setCh2EndOfConvSts(void);
INLINE void ADC1_setCh3EndOfConvSts(void);
INLINE void ADC1_setCh4EndOfConvSts(void);
INLINE void ADC1_setCh5EndOfConvSts(void);
INLINE void ADC1_setCh6EndOfConvSts(void);
INLINE void ADC1_setCh7EndOfConvSts(void);
INLINE void ADC1_setCh8EndOfConvSts(void);
INLINE void ADC1_setCh9EndOfConvSts(void);
INLINE void ADC1_setCh10EndOfConvSts(void);
INLINE void ADC1_setCh11EndOfConvSts(void);
INLINE void ADC1_setCh12EndOfConvSts(void);
INLINE void ADC1_setCh13EndOfConvSts(void);
INLINE void ADC1_setCh14EndOfConvSts(void);
INLINE void ADC1_setCh15EndOfConvSts(void);
INLINE void ADC1_setCh16EndOfConvSts(void);
INLINE void ADC1_setCh17EndOfConvSts(void);
INLINE void ADC1_setCh18EndOfConvSts(void);
INLINE void ADC1_setCh19EndOfConvSts(void);
INLINE void ADC1_setConvClass0Config(tADC1_CONVCFGx s_value);
INLINE void ADC1_setConvClass1Config(tADC1_CONVCFGx s_value);
INLINE void ADC1_setConvClass2Config(tADC1_CONVCFGx s_value);
INLINE void ADC1_setConvClass3Config(tADC1_CONVCFGx s_value);
INLINE void ADC1_enCalibCh0 (void);
INLINE void ADC1_disCalibCh0 (void);
INLINE void ADC1_enCalibCh1 (void);
INLINE void ADC1_disCalibCh1 (void);
INLINE void ADC1_enCalibCh2 (void);
INLINE void ADC1_disCalibCh2 (void);
INLINE void ADC1_enCalibCh3 (void);
INLINE void ADC1_disCalibCh3 (void);
INLINE void ADC1_enCalibCh4 (void);
INLINE void ADC1_disCalibCh4 (void);
INLINE void ADC1_enCalibCh5 (void);
INLINE void ADC1_disCalibCh5 (void);
INLINE void ADC1_enCalibCh6 (void);
INLINE void ADC1_disCalibCh6 (void);
INLINE void ADC1_enCalibCh7 (void);
INLINE void ADC1_disCalibCh7 (void);
INLINE void ADC1_enCalibCh8 (void);
INLINE void ADC1_disCalibCh8 (void);
INLINE void ADC1_enCalibCh9 (void);
INLINE void ADC1_disCalibCh9 (void);
INLINE void ADC1_enCalibCh10(void);
INLINE void ADC1_disCalibCh10(void);
INLINE void ADC1_enCalibCh11(void);
INLINE void ADC1_disCalibCh11(void);
INLINE void ADC1_enCalibCh12(void);
INLINE void ADC1_disCalibCh12(void);
INLINE void ADC1_enCalibCh13(void);
INLINE void ADC1_disCalibCh13(void);
INLINE void ADC1_enCalibCh14(void);
INLINE void ADC1_disCalibCh14(void);
INLINE void ADC1_enCalibCh15(void);
INLINE void ADC1_disCalibCh15(void);
INLINE void ADC1_enCalibCh16(void);
INLINE void ADC1_disCalibCh16(void);
INLINE void ADC1_enCalibCh17(void);
INLINE void ADC1_disCalibCh17(void);
INLINE void ADC1_enCalibCh18(void);
INLINE void ADC1_disCalibCh18(void);
INLINE void ADC1_enCalibCh19(void);
INLINE void ADC1_disCalibCh19(void);
INLINE void ADC1_enCalibCh20(void);
INLINE void ADC1_disCalibCh20(void);
INLINE void ADC1_enCalibCh21(void);
INLINE void ADC1_disCalibCh21(void);
INLINE void ADC1_enCalibCh22(void);
INLINE void ADC1_disCalibCh22(void);
INLINE void ADC1_enCalibCh23(void);
INLINE void ADC1_disCalibCh23(void);
INLINE void ADC1_enCalibCh24(void);
INLINE void ADC1_disCalibCh24(void);
INLINE void ADC1_enCalibCh25(void);
INLINE void ADC1_disCalibCh25(void);
INLINE void ADC1_enCalibCh26(void);
INLINE void ADC1_disCalibCh26(void);
INLINE void ADC1_enCalibProtCh0 (void);
INLINE void ADC1_disCalibProtCh0 (void);
INLINE void ADC1_enCalibProtCh1 (void);
INLINE void ADC1_disCalibProtCh1 (void);
INLINE void ADC1_enCalibProtCh2 (void);
INLINE void ADC1_disCalibProtCh2 (void);
INLINE void ADC1_enCalibProtCh3 (void);
INLINE void ADC1_disCalibProtCh3 (void);
INLINE void ADC1_enCalibProtCh4 (void);
INLINE void ADC1_disCalibProtCh4 (void);
INLINE void ADC1_enCalibProtCh5 (void);
INLINE void ADC1_disCalibProtCh5 (void);
INLINE void ADC1_enCalibProtCh6 (void);
INLINE void ADC1_disCalibProtCh6 (void);
INLINE void ADC1_enCalibProtCh7 (void);
INLINE void ADC1_disCalibProtCh7 (void);
INLINE void ADC1_enCalibProtCh8 (void);
INLINE void ADC1_disCalibProtCh8 (void);
INLINE void ADC1_enCalibProtCh9 (void);
INLINE void ADC1_disCalibProtCh9 (void);
INLINE void ADC1_enCalibProtCh10(void);
INLINE void ADC1_disCalibProtCh10(void);
INLINE void ADC1_enCalibProtCh11(void);
INLINE void ADC1_disCalibProtCh11(void);
INLINE void ADC1_enCalibProtCh12(void);
INLINE void ADC1_disCalibProtCh12(void);
INLINE void ADC1_enCalibProtCh13(void);
INLINE void ADC1_disCalibProtCh13(void);
INLINE void ADC1_enCalibProtCh14(void);
INLINE void ADC1_disCalibProtCh14(void);
INLINE void ADC1_enCalibProtCh15(void);
INLINE void ADC1_disCalibProtCh15(void);
INLINE void ADC1_enCalibProtCh16(void);
INLINE void ADC1_disCalibProtCh16(void);
INLINE void ADC1_enCalibProtCh17(void);
INLINE void ADC1_disCalibProtCh17(void);
INLINE void ADC1_enCalibProtCh18(void);
INLINE void ADC1_disCalibProtCh18(void);
INLINE void ADC1_enCalibProtCh19(void);
INLINE void ADC1_disCalibProtCh19(void);
INLINE void ADC1_enCalibProtCh20(void);
INLINE void ADC1_disCalibProtCh20(void);
INLINE void ADC1_enCalibProtCh21(void);
INLINE void ADC1_disCalibProtCh21(void);
INLINE void ADC1_enCalibProtCh22(void);
INLINE void ADC1_disCalibProtCh22(void);
INLINE void ADC1_enCalibProtCh23(void);
INLINE void ADC1_disCalibProtCh23(void);
INLINE void ADC1_enCalibProtCh24(void);
INLINE void ADC1_disCalibProtCh24(void);
INLINE void ADC1_enCalibProtCh25(void);
INLINE void ADC1_disCalibProtCh25(void);
INLINE void ADC1_enCalibProtCh26(void);
INLINE void ADC1_disCalibProtCh26(void);
INLINE void ADC1_setFilter0Coeff(uint8 u8_value);
INLINE uint8 ADC1_getFilter0Coeff(void);
INLINE void ADC1_setFilter1Coeff(uint8 u8_value);
INLINE uint8 ADC1_getFilter1Coeff(void);
INLINE void ADC1_setFilter2Coeff(uint8 u8_value);
INLINE uint8 ADC1_getFilter2Coeff(void);
INLINE void ADC1_setFilter3Coeff(uint8 u8_value);
INLINE uint8 ADC1_getFilter3Coeff(void);
INLINE uint16 ADC1_getFilter0Result(void);
INLINE uint16 ADC1_getFilter1Result(void);
INLINE uint16 ADC1_getFilter2Result(void);
INLINE uint16 ADC1_getFilter3Result(void);
INLINE uint8 ADC1_getFilter0Sts(void);
INLINE uint8 ADC1_getFilter1Sts(void);
INLINE uint8 ADC1_getFilter2Sts(void);
INLINE uint8 ADC1_getFilter3Sts(void);
INLINE void ADC1_clrFilter0Sts(void);
INLINE void ADC1_clrFilter1Sts(void);
INLINE void ADC1_clrFilter2Sts(void);
INLINE void ADC1_clrFilter3Sts(void);
INLINE void ADC1_setFilter0Sts(void);
INLINE void ADC1_setFilter1Sts(void);
INLINE void ADC1_setFilter2Sts(void);
INLINE void ADC1_setFilter3Sts(void);
INLINE uint16 ADC1_getCh0Result(void);
INLINE uint8 ADC1_getCh0ResultValidSts(void);
INLINE uint16 ADC1_getCh1Result(void);
INLINE uint8 ADC1_getCh1ResultValidSts(void);
INLINE uint16 ADC1_getCh2Result(void);
INLINE uint8 ADC1_getCh2ResultValidSts(void);
INLINE uint16 ADC1_getCh3Result(void);
INLINE uint8 ADC1_getCh3ResultValidSts(void);
INLINE uint16 ADC1_getCh4Result(void);
INLINE uint8 ADC1_getCh4ResultValidSts(void);
INLINE uint16 ADC1_getCh5Result(void);
INLINE uint8 ADC1_getCh5ResultValidSts(void);
INLINE uint16 ADC1_getCh6Result(void);
INLINE uint8 ADC1_getCh6ResultValidSts(void);
INLINE uint16 ADC1_getCh7Result(void);
INLINE uint8 ADC1_getCh7ResultValidSts(void);
INLINE uint16 ADC1_getCh8Result(void);  
INLINE uint8 ADC1_getCh8ResultValidSts(void);
INLINE uint16 ADC1_getCh9Result(void);
INLINE uint8 ADC1_getCh9ResultValidSts(void);
INLINE uint16 ADC1_getCh10Result(void);
INLINE uint8 ADC1_getCh10ResultValidSts(void);
INLINE uint16 ADC1_getCh11Result(void);
INLINE uint8 ADC1_getCh11ResultValidSts(void);
INLINE uint16 ADC1_getCh12Result(void);
INLINE uint8 ADC1_getCh12ResultValidSts(void);
INLINE uint16 ADC1_getCh13Result(void);
INLINE uint8 ADC1_getCh13ResultValidSts(void);
INLINE uint16 ADC1_getCh14Result(void);
INLINE uint8 ADC1_getCh14ResultValidSts(void);
INLINE uint16 ADC1_getCh15Result(void);
INLINE uint8 ADC1_getCh15ResultValidSts(void);
INLINE uint16 ADC1_getCh16Result(void);
INLINE uint8 ADC1_getCh16ResultValidSts(void);
INLINE uint16 ADC1_getCh17Result(void);
INLINE uint8 ADC1_getCh17ResultValidSts(void);
INLINE uint16 ADC1_getCh18Result(void);
INLINE uint8 ADC1_getCh18ResultValidSts(void);
INLINE uint16 ADC1_getCh19Result(void);
INLINE uint8 ADC1_getCh19ResultValidSts(void);
INLINE void ADC1_setCmp0Config(tADC1_CMPCFGx s_value);
INLINE void ADC1_setCmp1Config(tADC1_CMPCFGx s_value);
INLINE void ADC1_setCmp2Config(tADC1_CMPCFGx s_value);
INLINE void ADC1_setCmp3Config(tADC1_CMPCFGx s_value);
INLINE uint8 ADC1_getCmp0UpIntSts(void);
INLINE uint8 ADC1_getCmp1UpIntSts(void);
INLINE uint8 ADC1_getCmp2UpIntSts(void);
INLINE uint8 ADC1_getCmp3UpIntSts(void);
INLINE uint8 ADC1_getCmp0UpThSts(void);
INLINE uint8 ADC1_getCmp1UpThSts(void);
INLINE uint8 ADC1_getCmp2UpThSts(void);
INLINE uint8 ADC1_getCmp3UpThSts(void);
INLINE uint8 ADC1_getCmp0LoIntSts(void);
INLINE uint8 ADC1_getCmp1LoIntSts(void);
INLINE uint8 ADC1_getCmp2LoIntSts(void);
INLINE uint8 ADC1_getCmp3LoIntSts(void);
INLINE uint8 ADC1_getCmp0LoThSts(void);
INLINE uint8 ADC1_getCmp1LoThSts(void);
INLINE uint8 ADC1_getCmp2LoThSts(void);
INLINE uint8 ADC1_getCmp3LoThSts(void);
INLINE void ADC1_clrCmp0UpIntSts(void);
INLINE void ADC1_clrCmp1UpIntSts(void);
INLINE void ADC1_clrCmp2UpIntSts(void);
INLINE void ADC1_clrCmp3UpIntSts(void);
INLINE void ADC1_clrCmp0UpThSts(void);
INLINE void ADC1_clrCmp1UpThSts(void);
INLINE void ADC1_clrCmp2UpThSts(void);
INLINE void ADC1_clrCmp3UpThSts(void);
INLINE void ADC1_clrCmp0LoIntSts(void);
INLINE void ADC1_clrCmp1LoIntSts(void);
INLINE void ADC1_clrCmp2LoIntSts(void);
INLINE void ADC1_clrCmp3LoIntSts(void);
INLINE void ADC1_clrCmp0LoThSts(void);
INLINE void ADC1_clrCmp1LoThSts(void);
INLINE void ADC1_clrCmp2LoThSts(void);
INLINE void ADC1_clrCmp3LoThSts(void);
INLINE void ADC1_setCmp0UpIntSts(void);
INLINE void ADC1_setCmp1UpIntSts(void);
INLINE void ADC1_setCmp2UpIntSts(void);
INLINE void ADC1_setCmp3UpIntSts(void);
INLINE void ADC1_setCmp0UpThSts(void);
INLINE void ADC1_setCmp1UpThSts(void);
INLINE void ADC1_setCmp2UpThSts(void);
INLINE void ADC1_setCmp3UpThSts(void);
INLINE void ADC1_setCmp0LoIntSts(void);
INLINE void ADC1_setCmp1LoIntSts(void);
INLINE void ADC1_setCmp2LoIntSts(void);
INLINE void ADC1_setCmp3LoIntSts(void);
INLINE void ADC1_setCmp0LoThSts(void);
INLINE void ADC1_setCmp1LoThSts(void);
INLINE void ADC1_setCmp2LoThSts(void);
INLINE void ADC1_setCmp3LoThSts(void);
INLINE void ADC1_enCmp0UpInt(void);
INLINE void ADC1_disCmp0UpInt(void);
INLINE void ADC1_enCmp1UpInt(void);
INLINE void ADC1_disCmp1UpInt(void);
INLINE void ADC1_enCmp2UpInt(void);
INLINE void ADC1_disCmp2UpInt(void);
INLINE void ADC1_enCmp3UpInt(void);
INLINE void ADC1_disCmp3UpInt(void);
INLINE void ADC1_enCmp0LoInt(void);
INLINE void ADC1_disCmp0LoInt(void);
INLINE void ADC1_enCmp1LoInt(void);
INLINE void ADC1_disCmp1LoInt(void);
INLINE void ADC1_enCmp2LoInt(void);
INLINE void ADC1_disCmp2LoInt(void);
INLINE void ADC1_enCmp3LoInt(void);
INLINE void ADC1_disCmp3LoInt(void);
INLINE void ADC1_enSeq0Int(void);
INLINE void ADC1_disSeq0Int(void);
INLINE void ADC1_enSeq1Int(void);
INLINE void ADC1_disSeq1Int(void);
INLINE void ADC1_enSeq2Int(void);
INLINE void ADC1_disSeq2Int(void);
INLINE void ADC1_enSeq3Int(void);
INLINE void ADC1_disSeq3Int(void);
INLINE void ADC1_enCh0Int(void);
INLINE void ADC1_disCh0Int(void);
INLINE void ADC1_enCh1Int(void);
INLINE void ADC1_disCh1Int(void);
INLINE void ADC1_enCh2Int(void);
INLINE void ADC1_disCh2Int(void);
INLINE void ADC1_enCh3Int(void);
INLINE void ADC1_disCh3Int(void);
INLINE void ADC1_enCh4Int(void);
INLINE void ADC1_disCh4Int(void);
INLINE void ADC1_enCh5Int(void);
INLINE void ADC1_disCh5Int(void);
INLINE void ADC1_enCh6Int(void);
INLINE void ADC1_disCh6Int(void);
INLINE void ADC1_enCh7Int(void);
INLINE void ADC1_disCh7Int(void);
INLINE void ADC1_enCh8Int(void);
INLINE void ADC1_disCh8Int(void);
INLINE void ADC1_enCh9Int(void);
INLINE void ADC1_disCh9Int(void);
INLINE void ADC1_enCh10Int(void);
INLINE void ADC1_disCh10Int(void);
INLINE void ADC1_enCh11Int(void);
INLINE void ADC1_disCh11Int(void);
INLINE void ADC1_enCh12Int(void);
INLINE void ADC1_disCh12Int(void);
INLINE void ADC1_enCh13Int(void);
INLINE void ADC1_disCh13Int(void);
INLINE void ADC1_enCh14Int(void);
INLINE void ADC1_disCh14Int(void);
INLINE void ADC1_enCh15Int(void);
INLINE void ADC1_disCh15Int(void);
INLINE void ADC1_enCh16Int(void);
INLINE void ADC1_disCh16Int(void);
INLINE void ADC1_enCh17Int(void);
INLINE void ADC1_disCh17Int(void);
INLINE void ADC1_enCh18Int(void);
INLINE void ADC1_disCh18Int(void);
INLINE void ADC1_enCh19Int(void);
INLINE void ADC1_disCh19Int(void);
INLINE void ADC1_enSeq0WaitForReadInt(void);
INLINE void ADC1_disSeq0WaitForReadInt(void);
INLINE void ADC1_enSeq1WaitForReadInt(void);
INLINE void ADC1_disSeq1WaitForReadInt(void);
INLINE void ADC1_enSeq2WaitForReadInt(void);
INLINE void ADC1_disSeq2WaitForReadInt(void);
INLINE void ADC1_enSeq3WaitForReadInt(void);
INLINE void ADC1_disSeq3WaitForReadInt(void);
INLINE void ADC1_enSeq0CollInt(void);
INLINE void ADC1_disSeq0CollInt(void);
INLINE void ADC1_enSeq1CollInt(void);
INLINE void ADC1_disSeq1CollInt(void);
INLINE void ADC1_enSeq2CollInt(void);
INLINE void ADC1_disSeq2CollInt(void);
INLINE void ADC1_enSeq3CollInt(void);
INLINE void ADC1_disSeq3CollInt(void);
INLINE uint8 ADC1_getCh0IntNodePtr(void);
INLINE uint8 ADC1_getCh1IntNodePtr(void);
INLINE uint8 ADC1_getCh2IntNodePtr(void);
INLINE uint8 ADC1_getCh3IntNodePtr(void);
INLINE uint8 ADC1_getCh4IntNodePtr(void);
INLINE uint8 ADC1_getCh5IntNodePtr(void);
INLINE uint8 ADC1_getCh6IntNodePtr(void);
INLINE uint8 ADC1_getCh7IntNodePtr(void);
INLINE uint8 ADC1_getCh8IntNodePtr(void);
INLINE uint8 ADC1_getCh9IntNodePtr(void);
INLINE uint8 ADC1_getCh10IntNodePtr(void);
INLINE uint8 ADC1_getCh11IntNodePtr(void);
INLINE uint8 ADC1_getCh12IntNodePtr(void);
INLINE uint8 ADC1_getCh13IntNodePtr(void);
INLINE uint8 ADC1_getCh14IntNodePtr(void);
INLINE uint8 ADC1_getCh15IntNodePtr(void);
INLINE uint8 ADC1_getCh16IntNodePtr(void);
INLINE uint8 ADC1_getCh17IntNodePtr(void);
INLINE uint8 ADC1_getCh18IntNodePtr(void);
INLINE uint8 ADC1_getCh19IntNodePtr(void);
INLINE uint8 ADC1_getCmp0LoIntNodePtr(void);
INLINE uint8 ADC1_getCmp1LoIntNodePtr(void);
INLINE uint8 ADC1_getCmp2LoIntNodePtr(void);
INLINE uint8 ADC1_getCmp3LoIntNodePtr(void);
INLINE uint8 ADC1_getCmp0UpIntNodePtr(void);
INLINE uint8 ADC1_getCmp1UpIntNodePtr(void);
INLINE uint8 ADC1_getCmp2UpIntNodePtr(void);
INLINE uint8 ADC1_getCmp3UpIntNodePtr(void);
INLINE uint8 ADC1_getSeq0IntNodePtr(void);
INLINE uint8 ADC1_getSeq1IntNodePtr(void);
INLINE uint8 ADC1_getSeq2IntNodePtr(void);
INLINE uint8 ADC1_getSeq3IntNodePtr(void);
INLINE uint8 ADC1_getSeq0CollIntNodePtr(void);
INLINE uint8 ADC1_getSeq1CollIntNodePtr(void);
INLINE uint8 ADC1_getSeq2CollIntNodePtr(void);
INLINE uint8 ADC1_getSeq3CollIntNodePtr(void);
INLINE uint8 ADC1_getSeq0WaitForReadIntNodePtr(void);
INLINE uint8 ADC1_getSeq1WaitForReadIntNodePtr(void);
INLINE uint8 ADC1_getSeq2WaitForReadIntNodePtr(void);
INLINE uint8 ADC1_getSeq3WaitForReadIntNodePtr(void);
INLINE void ADC1_setSeqHwShadowTrans(uint8 u8_value);
INLINE uint8 ADC1_getSeqHwShadowTrans(void);
INLINE void ADC1_setTriggHwShadowTrans(uint8 u8_value);
INLINE uint8 ADC1_getTriggHwShadowTrans(void);
INLINE void ADC1_setGateHwShadowTrans(uint8 u8_value);
INLINE uint8 ADC1_getGateHwShadowTrans(void);
INLINE void ADC1_enSeqHwShadowTrans(void);
INLINE void ADC1_disSeqHwShadowTrans(void);
INLINE void ADC1_enTriggHwShadowTrans(void);
INLINE void ADC1_disTriggHwShadowTrans(void);
INLINE void ADC1_enGateHwShadowTrans(void);
INLINE void ADC1_disGateHwShadowTrans(void);
INLINE void ADC1_setSeqSwShadowTrans(void);
INLINE uint8 ADC1_getSeqSwShadowTrans(void);
INLINE void ADC1_setTriggSwShadowTrans(void);
INLINE uint8 ADC1_getTriggSwShadowTrans(void);
INLINE void ADC1_setGateSwShadowTrans(void);
INLINE uint8 ADC1_getGateSwShadowTrans(void);
INLINE void ADC1_enSeqSwShadowTrans(void);
INLINE void ADC1_disSeqSwShadowTrans(void);
INLINE void ADC1_enTriggSwShadowTrans(void);
INLINE void ADC1_disTriggSwShadowTrans(void);
INLINE void ADC1_enGateSwShadowTrans(void);
INLINE void ADC1_disGateSwShadowTrans(void);
INLINE void ADC1_setCalibOffsAnaIn1(uint8 u8_value);
INLINE uint8 ADC1_getCalibOffsAnaIn1(void);
INLINE void ADC1_setCalibGainAnaIn1(uint16 u16_value);
INLINE uint16 ADC1_getCalibGainAnaIn1(void);
INLINE void ADC1_setCalibOffsAnaIn3(uint8 u8_value);
INLINE uint8 ADC1_getCalibOffsAnaIn3(void);
INLINE void ADC1_setCalibGainAnaIn3(uint16 u16_value);
INLINE uint16 ADC1_getCalibGainAnaIn3(void);
INLINE void ADC1_setCalibOffsAnaIn5(uint8 u8_value);
INLINE uint8 ADC1_getCalibOffsAnaIn5(void);
INLINE void ADC1_setCalibGainAnaIn5(uint16 u16_value);
INLINE uint16 ADC1_getCalibGainAnaIn5(void);
INLINE void ADC1_setCalibOffsAnaIn7(uint8 u8_value);
INLINE uint8 ADC1_getCalibOffsAnaIn7(void);
INLINE void ADC1_setCalibGainAnaIn7(uint16 u16_value);
INLINE uint16 ADC1_getCalibGainAnaIn7(void);
INLINE void ADC1_setCalibOffsAnaIn9(uint8 u8_value);
INLINE uint8 ADC1_getCalibOffsAnaIn9(void);
INLINE void ADC1_setCalibGainAnaIn9(uint16 u16_value);
INLINE uint16 ADC1_getCalibGainAnaIn9(void);
INLINE void ADC1_setCalibOffsAnaIn11(uint8 u8_value);
INLINE uint8 ADC1_getCalibOffsAnaIn11(void);
INLINE void ADC1_setCalibGainAnaIn11(uint16 u16_value);
INLINE uint16 ADC1_getCalibGainAnaIn11(void);
INLINE void ADC1_setCalibOffsAnaIn13(uint8 u8_value);
INLINE uint8 ADC1_getCalibOffsAnaIn13(void);
INLINE void ADC1_setCalibGainAnaIn13(uint16 u16_value);
INLINE uint16 ADC1_getCalibGainAnaIn13(void);
INLINE void ADC1_setCalibOffsAnaIn15(uint8 u8_value);
INLINE uint8 ADC1_getCalibOffsAnaIn15(void);
INLINE void ADC1_setCalibGainAnaIn15(uint16 u16_value);
INLINE uint16 ADC1_getCalibGainAnaIn15(void);
INLINE void ADC1_setCalibOffsAnaIn16(uint8 u8_value);
INLINE uint8 ADC1_getCalibOffsAnaIn16(void);
INLINE void ADC1_setCalibGainAnaIn16(uint16 u16_value);
INLINE uint16 ADC1_getCalibGainAnaIn16(void);
INLINE void ADC1_setCalibOffsAnaIn17(uint8 u8_value);
INLINE uint8 ADC1_getCalibOffsAnaIn17(void);
INLINE void ADC1_setCalibGainAnaIn17(uint16 u16_value);
INLINE uint16 ADC1_getCalibGainAnaIn17(void);
INLINE void ADC1_setCalibOffsAnaIn18(uint8 u8_value);
INLINE uint8 ADC1_getCalibOffsAnaIn18(void);
INLINE void ADC1_setCalibGainAnaIn18(uint16 u16_value);
INLINE uint16 ADC1_getCalibGainAnaIn18(void);
INLINE void ADC1_setCalibOffsAnaIn19(uint8 u8_value);
INLINE uint8 ADC1_getCalibOffsAnaIn19(void);
INLINE void ADC1_setCalibGainAnaIn19(uint16 u16_value);
INLINE uint16 ADC1_getCalibGainAnaIn19(void);
INLINE void ADC1_setCalibOffsAnaIn20(uint8 u8_value);
INLINE uint8 ADC1_getCalibOffsAnaIn20(void);
INLINE void ADC1_setCalibGainAnaIn20(uint16 u16_value);
INLINE uint16 ADC1_getCalibGainAnaIn20(void);
INLINE void ADC1_setCalibOffsAnaIn21(uint8 u8_value);
INLINE uint8 ADC1_getCalibOffsAnaIn21(void);
INLINE void ADC1_setCalibGainAnaIn21(uint16 u16_value);
INLINE uint16 ADC1_getCalibGainAnaIn21(void);
INLINE void ADC1_setCalibOffsAnaIn22(uint8 u8_value);
INLINE uint8 ADC1_getCalibOffsAnaIn22(void);
INLINE void ADC1_setCalibGainAnaIn22(uint16 u16_value);
INLINE uint16 ADC1_getCalibGainAnaIn22(void);
INLINE void ADC1_setCalibOffsAnaIn23(uint8 u8_value);
INLINE uint8 ADC1_getCalibOffsAnaIn23(void);
INLINE void ADC1_setCalibGainAnaIn23(uint16 u16_value);
INLINE uint16 ADC1_getCalibGainAnaIn23(void);
INLINE void ADC1_setCalibOffsAnaIn24(uint8 u8_value);
INLINE uint8 ADC1_getCalibOffsAnaIn24(void);
INLINE void ADC1_setCalibGainAnaIn24(uint16 u16_value);
INLINE uint16 ADC1_getCalibGainAnaIn24(void);
INLINE void ADC1_setCalibOffsAnaIn25(uint8 u8_value);
INLINE uint8 ADC1_getCalibOffsAnaIn25(void);
INLINE void ADC1_setCalibGainAnaIn25(uint16 u16_value);
INLINE uint16 ADC1_getCalibGainAnaIn25(void);
INLINE void ADC1_setCalibOffsAnaIn26(uint8 u8_value);
INLINE uint8 ADC1_getCalibOffsAnaIn26(void);
INLINE void ADC1_setCalibGainAnaIn26(uint16 u16_value);
INLINE uint16 ADC1_getCalibGainAnaIn26(void);
INLINE void ARVG_enVAREF(void);
INLINE void ARVG_disVAREF(void);
INLINE void ARVG_enVAREFOvercurrentInt(void);
INLINE void ARVG_disVAREFOvercurrentInt(void);
INLINE uint8 ARVG_getVAREFOvercurrentIntSts(void);
INLINE uint8 ARVG_getVAREFOvercurrentSts(void);
INLINE void ARVG_clrVAREFOvercurrentIntSts(void);
INLINE void ARVG_clrVAREFOvercurrentSts(void);


/*******************************************************************************
**                       Deprecated Function Declarations                     **
*******************************************************************************/

/** \brief Set Channel 0 Interrupt Node Pointer
 * \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void ADC1_setCh0IntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));

/** \brief Set Channel 1 Interrupt Node Pointer
 * \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void ADC1_setCh1IntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));

/** \brief Set Channel 2 Interrupt Node Pointer
 * \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void ADC1_setCh2IntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));

/** \brief Set Channel 3 Interrupt Node Pointer
 * \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void ADC1_setCh3IntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));

/** \brief Set Channel 4 Interrupt Node Pointer
 * \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void ADC1_setCh4IntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));

/** \brief Set Channel 5 Interrupt Node Pointer
 * \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void ADC1_setCh5IntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));

/** \brief Set Channel 6 Interrupt Node Pointer
 * \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void ADC1_setCh6IntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));

/** \brief Set Channel 7 Interrupt Node Pointer
 * \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void ADC1_setCh7IntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));

/** \brief Set Channel 8 Interrupt Node Pointer
 * \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void ADC1_setCh8IntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));

/** \brief Set Channel 9 Interrupt Node Pointer
 * \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void ADC1_setCh9IntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));

/** \brief Set Channel 10 Interrupt Node Pointer
 * \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void ADC1_setCh10IntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));

/** \brief Set Channel 11 Interrupt Node Pointer
 * \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void ADC1_setCh11IntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));

/** \brief Set Channel 12 Interrupt Node Pointer
 * \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void ADC1_setCh12IntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));

/** \brief Set Channel 13 Interrupt Node Pointer
 * \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void ADC1_setCh13IntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));

/** \brief Set Channel 14 Interrupt Node Pointer
 * \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void ADC1_setCh14IntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));

/** \brief Set Channel 15 Interrupt Node Pointer
 * \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void ADC1_setCh15IntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));

/** \brief Set Channel 16 Interrupt Node Pointer
 * \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void ADC1_setCh16IntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));

/** \brief Set Channel 17 Interrupt Node Pointer
 * \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void ADC1_setCh17IntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));

/** \brief Set Channel 18 Interrupt Node Pointer
 * \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void ADC1_setCh18IntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));

/** \brief Set Channel 19 Interrupt Node Pointer
 * \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void ADC1_setCh19IntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));

/** \brief Set Compare Lo Interrupt Node Pointer
 * \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void ADC1_setCmp0LoIntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));

/** \brief Set Compare Lo Interrupt Node Pointer
 * \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void ADC1_setCmp1LoIntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));

/** \brief Set Compare Lo Interrupt Node Pointer
 * \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void ADC1_setCmp2LoIntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));

/** \brief Set Compare Lo Interrupt Node Pointer
 * \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void ADC1_setCmp3LoIntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));

/** \brief Set Compare Up Interrupt Node Pointer
 * \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void ADC1_setCmp0UpIntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));

/** \brief Set Compare Up Interrupt Node Pointer
 * \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void ADC1_setCmp1UpIntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));

/** \brief Set Compare Up Interrupt Node Pointer
 * \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void ADC1_setCmp2UpIntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));

/** \brief Set Compare Up Interrupt Node Pointer
 * \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void ADC1_setCmp3UpIntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));

/** \brief Set Sequence Interrupt Node Pointer
 * \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void ADC1_setSeq0IntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));

/** \brief Set Sequence Interrupt Node Pointer
 * \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void ADC1_setSeq1IntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));

/** \brief Set Sequence Interrupt Node Pointer
 * \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void ADC1_setSeq2IntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));

/** \brief Set Sequence Interrupt Node Pointer
 * \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void ADC1_setSeq3IntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));

/** \brief Set Collision Interrupt Node Pointer
 * \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void ADC1_setSeq0CollIntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));

/** \brief Set Collision Interrupt Node Pointer
 * \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void ADC1_setSeq1CollIntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));

/** \brief Set Collision Interrupt Node Pointer
 * \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void ADC1_setSeq2CollIntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));

/** \brief Set Collision Interrupt Node Pointer
 * \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void ADC1_setSeq3CollIntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));

/** \brief Set Wait for read  Interrupt Node Pointer
 * \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void ADC1_setSeq0WaitForReadIntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));

/** \brief Set Wait for read  Interrupt Node Pointer
 * \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void ADC1_setSeq1WaitForReadIntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));

/** \brief Set Wait for read  Interrupt Node Pointer
 * \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void ADC1_setSeq2WaitForReadIntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));

/** \brief Set Wait for read  Interrupt Node Pointer
 * \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void ADC1_setSeq3WaitForReadIntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));


/*******************************************************************************
**                      Global Inline Function Definitions                    **
*******************************************************************************/

/** \brief Enable ADC1 Module
 */
INLINE void ADC1_enPower(void)
{
  ADC1->GLOBCONF.bit.EN = 1u;
}

/** \brief Disable ADC1 Module
 */
INLINE void ADC1_disPower(void)
{
  ADC1->GLOBCONF.bit.EN = 0u;
}

/** \brief Set Clock Divider Settings
 *
 *  \param u8_value Clock Divider Settings
 */
INLINE void ADC1_setClockDiv(uint8 u8_value)
{
  ADC1->CLKCON.bit.CLKDIV = u8_value;
}

/** \brief Get Clock Divider Settings
 *
 * \return uint8 Clock Divider Settings
 */
INLINE uint8 ADC1_getClockDiv(void)
{
  return (uint8)ADC1->CLKCON.bit.CLKDIV;
}

/** \brief Enable ADC1 Suspend
 */
INLINE void ADC1_enSuspend(void)
{
  ADC1->SUSCTR.bit.SUSEN = 1u;
}

/** \brief Disable ADC1 Suspend
 */
INLINE void ADC1_disSuspend(void)
{
  ADC1->SUSCTR.bit.SUSEN = 0u;
}

/** \brief Set Suspend Mode
 *
 *  \param u8_value Suspend Mode
 */
INLINE void ADC1_setSuspendMode(uint8 u8_value)
{
  ADC1->SUSCTR.bit.SUSMOD = u8_value;
}

/** \brief Get Suspend Mode
 *
 * \return uint8 Suspend Mode
 */
INLINE uint8 ADC1_getSuspendMode(void)
{
  return (uint8)ADC1->SUSCTR.bit.SUSMOD;
}

/** \brief Get Suspend Mode Status
 *
 * \return uint8 Suspend Mode Status
 */
INLINE uint8 ADC1_getSuspendSts(void)
{
  return (uint8)ADC1->SUSSTAT.bit.STAT;
}

/** \brief Get Module Ready
 *
 * \return uint8 Module Ready
 */
INLINE uint8 ADC1_getReady(void)
{
  return (uint8)ADC1->SUSSTAT.bit.READY;
}

/** \brief Set Sequence 0 configuration
 *
 *  \param s_value Sequence 0 configuration
 */
INLINE void ADC1_setSeq0Config(tADC1_SQCFGx s_value)
{
  ADC1->SQCFG0.reg = (uint32)s_value.reg;
}

/** \brief Set Sequence repetition
 * 
 *  \param u8_value Sequence repetition
 */
INLINE void ADC1_setSeq0Repetition(uint8 u8_value)
{
  ADC1->SQCFG0.bit.SQREP = u8_value;
}

/** \brief Get Sequence repetition
 * 
 *  \return uint8 Sequence repetition
 */
INLINE uint8 ADC1_getSeq0Repetition(void)
{
  return (uint8)ADC1->SQCFG0.bit.SQREP;
}

/** \brief Enable Collision Config
 */
INLINE void ADC1_enSeq0CollisionDetect(void)
{
  ADC1->SQCFG0.bit.COLLCFG = 1u;
}

/** \brief Disable Collision Config
 */
INLINE void ADC1_disSeq0CollisionDetect(void)
{
  ADC1->SQCFG0.bit.COLLCFG = 0u;
}

/** \brief Enable Wait for Read Enable
 */
INLINE void ADC1_enSeq0WaitForRead(void)
{
  ADC1->SQCFG0.bit.WFRCFG = 1u;
}

/** \brief Disable Wait for Read Enable
 */
INLINE void ADC1_disSeq0WaitForRead(void)
{
  ADC1->SQCFG0.bit.WFRCFG = 0u;
}

/** \brief Set Trigger Select
 * 
 *  \param e_Seq0Trig Trigger Select
 */
INLINE void ADC1_setSeq0TriggerSelect(tADC1_Seq0Trig e_Seq0Trig)
{
  ADC1->SQCFG0.bit.TRGSEL = (uint8)e_Seq0Trig;
}

/** \brief Get Trigger Select
 * 
 *  \return uint8 Trigger Select
 */
INLINE uint8 ADC1_getSeq0TriggerSelect(void)
{
  return ADC1->SQCFG0.bit.TRGSEL;
}

/** \brief Set Gating Select
 * 
 *  \param u8_value Gating Select
 */
INLINE void ADC1_setSeq0GatingSelect(uint8 u8_value)
{
  ADC1->SQCFG0.bit.GTSEL = u8_value;
}

/** \brief Get Gating Select
 * 
 *  \return uint8 Gating Select
 */
INLINE uint8 ADC1_getSeq0GatingSelect(void)
{
  return (uint8)ADC1->SQCFG0.bit.GTSEL;
}

/** \brief Enable Trigger Software Gating
 */
INLINE void ADC1_enSeq0TriggerGate(void)
{
  ADC1->SQCFG0.bit.GTSW = 1u;
}

/** \brief Disable Trigger Software Gating
 */
INLINE void ADC1_disSeq0TriggerGate(void)
{
  ADC1->SQCFG0.bit.GTSW = 0u;
}

/** \brief Set Channel Select for Sequence 0 Slot 0
 *
 *  \param u8_value Channel Select for Sequence 0 Slot 0
 */
INLINE void ADC1_setSeq0Slot0(uint8 u8_value)
{
  ADC1->SQSLOT0.bit.CHSEL0 = u8_value;
}

/** \brief Get Channel Select for Sequence 0 Slot 0
 *
 * \return uint8 Channel Select for Sequence 0 Slot 0
 */
INLINE uint8 ADC1_getSeq0Slot0(void)
{
  return (uint8)ADC1->SQSLOT0.bit.CHSEL0;
}

/** \brief Set Channel Select for Sequence 0 Slot 1
 *
 *  \param u8_value Channel Select for Sequence 0 Slot 1
 */
INLINE void ADC1_setSeq0Slot1(uint8 u8_value)
{
  ADC1->SQSLOT0.bit.CHSEL1 = u8_value;
}

/** \brief Get Channel Select for Sequence 0 Slot 1
 *
 * \return uint8 Channel Select for Sequence 0 Slot 1
 */
INLINE uint8 ADC1_getSeq0Slot1(void)
{
  return (uint8)ADC1->SQSLOT0.bit.CHSEL1;
}

/** \brief Set Channel Select for Sequence 0 Slot 2
 *
 *  \param u8_value Channel Select for Sequence 0 Slot 2
 */
INLINE void ADC1_setSeq0Slot2(uint8 u8_value)
{
  ADC1->SQSLOT0.bit.CHSEL2 = u8_value;
}

/** \brief Get Channel Select for Sequence 0 Slot 2
 *
 * \return uint8 Channel Select for Sequence 0 Slot 2
 */
INLINE uint8 ADC1_getSeq0Slot2(void)
{
  return (uint8)ADC1->SQSLOT0.bit.CHSEL2;
}

/** \brief Set Channel Select for Sequence 0 Slot 3
 *
 *  \param u8_value Channel Select for Sequence 0 Slot 3
 */
INLINE void ADC1_setSeq0Slot3(uint8 u8_value)
{
  ADC1->SQSLOT0.bit.CHSEL3 = u8_value;
}

/** \brief Get Channel Select for Sequence 0 Slot 3
 *
 * \return uint8 Channel Select for Sequence 0 Slot 3
 */
INLINE uint8 ADC1_getSeq0Slot3(void)
{
  return (uint8)ADC1->SQSLOT0.bit.CHSEL3;
}

/** \brief Set Sequence 1 configuration
 *
 *  \param s_value Sequence 1 configuration
 */
INLINE void ADC1_setSeq1Config(tADC1_SQCFGx s_value)
{
  ADC1->SQCFG1.reg = (uint32)s_value.reg;
}

/** \brief Set Sequence repetition
 * 
 *  \param u8_value Sequence repetition
 */
INLINE void ADC1_setSeq1Repetition(uint8 u8_value)
{
  ADC1->SQCFG1.bit.SQREP = u8_value;
}

/** \brief Get Sequence repetition
 * 
 *  \return uint8 Sequence repetition
 */
INLINE uint8 ADC1_getSeq1Repetition(void)
{
  return (uint8)ADC1->SQCFG1.bit.SQREP;
}

/** \brief Enable Collision Config
 */
INLINE void ADC1_enSeq1CollisionDetect(void)
{
  ADC1->SQCFG1.bit.COLLCFG = 1u;
}

/** \brief Disable Collision Config
 */
INLINE void ADC1_disSeq1CollisionDetect(void)
{
  ADC1->SQCFG1.bit.COLLCFG = 0u;
}

/** \brief Enable Wait for Read Enable
 */
INLINE void ADC1_enSeq1WaitForRead(void)
{
  ADC1->SQCFG1.bit.WFRCFG = 1u;
}

/** \brief Disable Wait for Read Enable
 */
INLINE void ADC1_disSeq1WaitForRead(void)
{
  ADC1->SQCFG1.bit.WFRCFG = 0u;
}

/** \brief Set Trigger Select
 * 
 *  \param e_Seq1Trig Trigger Select
 */
INLINE void ADC1_setSeq1TriggerSelect(tADC1_Seq1Trig e_Seq1Trig)
{
  ADC1->SQCFG1.bit.TRGSEL = (uint8)e_Seq1Trig;
}

/** \brief Get Trigger Select
 * 
 *  \return uint8 Trigger Select
 */
INLINE uint8 ADC1_getSeq1TriggerSelect(void)
{
  return ADC1->SQCFG1.bit.TRGSEL;
}

/** \brief Set Gating Select
 * 
 *  \param u8_value Gating Select
 */
INLINE void ADC1_setSeq1GatingSelect(uint8 u8_value)
{
  ADC1->SQCFG1.bit.GTSEL = u8_value;
}

/** \brief Get Gating Select
 * 
 *  \return uint8 Gating Select
 */
INLINE uint8 ADC1_getSeq1GatingSelect(void)
{
  return (uint8)ADC1->SQCFG1.bit.GTSEL;
}

/** \brief Enable Trigger Software Gating
 */
INLINE void ADC1_enSeq1TriggerGate(void)
{
  ADC1->SQCFG1.bit.GTSW = 1u;
}

/** \brief Disable Trigger Software Gating
 */
INLINE void ADC1_disSeq1TriggerGate(void)
{
  ADC1->SQCFG1.bit.GTSW = 0u;
}

/** \brief Set Channel Select for Sequence 1 Slot 0
 *
 *  \param u8_value Channel Select for Sequence 1 Slot 0
 */
INLINE void ADC1_setSeq1Slot0(uint8 u8_value)
{
  ADC1->SQSLOT1.bit.CHSEL0 = u8_value;
}

/** \brief Get Channel Select for Sequence 1 Slot 0
 *
 * \return uint8 Channel Select for Sequence 1 Slot 0
 */
INLINE uint8 ADC1_getSeq1Slot0(void)
{
  return (uint8)ADC1->SQSLOT1.bit.CHSEL0;
}

/** \brief Set Channel Select for Sequence 1 Slot 1
 *
 *  \param u8_value Channel Select for Sequence 1 Slot 1
 */
INLINE void ADC1_setSeq1Slot1(uint8 u8_value)
{
  ADC1->SQSLOT1.bit.CHSEL1 = u8_value;
}

/** \brief Get Channel Select for Sequence 1 Slot 1
 *
 * \return uint8 Channel Select for Sequence 1 Slot 1
 */
INLINE uint8 ADC1_getSeq1Slot1(void)
{
  return (uint8)ADC1->SQSLOT1.bit.CHSEL1;
}

/** \brief Set Channel Select for Sequence 1 Slot 2
 *
 *  \param u8_value Channel Select for Sequence 1 Slot 2
 */
INLINE void ADC1_setSeq1Slot2(uint8 u8_value)
{
  ADC1->SQSLOT1.bit.CHSEL2 = u8_value;
}

/** \brief Get Channel Select for Sequence 1 Slot 2
 *
 * \return uint8 Channel Select for Sequence 1 Slot 2
 */
INLINE uint8 ADC1_getSeq1Slot2(void)
{
  return (uint8)ADC1->SQSLOT1.bit.CHSEL2;
}

/** \brief Set Channel Select for Sequence 1 Slot 3
 *
 *  \param u8_value Channel Select for Sequence 1 Slot 3
 */
INLINE void ADC1_setSeq1Slot3(uint8 u8_value)
{
  ADC1->SQSLOT1.bit.CHSEL3 = u8_value;
}

/** \brief Get Channel Select for Sequence 1 Slot 3
 *
 * \return uint8 Channel Select for Sequence 1 Slot 3
 */
INLINE uint8 ADC1_getSeq1Slot3(void)
{
  return (uint8)ADC1->SQSLOT1.bit.CHSEL3;
}

/** \brief Set Sequence 2 configuration
 *
 *  \param s_value Sequence 2 configuration
 */
INLINE void ADC1_setSeq2Config(tADC1_SQCFGx s_value)
{
  ADC1->SQCFG2.reg = (uint32)s_value.reg;
}

/** \brief Set Sequence repetition
 * 
 *  \param u8_value Sequence repetition
 */
INLINE void ADC1_setSeq2Repetition(uint8 u8_value)
{
  ADC1->SQCFG2.bit.SQREP = u8_value;
}

/** \brief Get Sequence repetition
 * 
 *  \return uint8 Sequence repetition
 */
INLINE uint8 ADC1_getSeq2Repetition(void)
{
  return (uint8)ADC1->SQCFG2.bit.SQREP;
}

/** \brief Enable Collision Config
 */
INLINE void ADC1_enSeq2CollisionDetect(void)
{
  ADC1->SQCFG2.bit.COLLCFG = 1u;
}

/** \brief Disable Collision Config
 */
INLINE void ADC1_disSeq2CollisionDetect(void)
{
  ADC1->SQCFG2.bit.COLLCFG = 0u;
}

/** \brief Enable Wait for Read Enable
 */
INLINE void ADC1_enSeq2WaitForRead(void)
{
  ADC1->SQCFG2.bit.WFRCFG = 1u;
}

/** \brief Disable Wait for Read Enable
 */
INLINE void ADC1_disSeq2WaitForRead(void)
{
  ADC1->SQCFG2.bit.WFRCFG = 0u;
}

/** \brief Set Trigger Select
 * 
 *  \param e_Seq2Trig Trigger Select
 */
INLINE void ADC1_setSeq2TriggerSelect(tADC1_Seq2Trig e_Seq2Trig)
{
  ADC1->SQCFG2.bit.TRGSEL = (uint8)e_Seq2Trig;
}

/** \brief Get Trigger Select
 * 
 *  \return uint8 Trigger Select
 */
INLINE uint8 ADC1_getSeq2TriggerSelect(void)
{
  return ADC1->SQCFG2.bit.TRGSEL;
}

/** \brief Set Gating Select
 * 
 *  \param u8_value Gating Select
 */
INLINE void ADC1_setSeq2GatingSelect(uint8 u8_value)
{
  ADC1->SQCFG2.bit.GTSEL = u8_value;
}

/** \brief Get Gating Select
 * 
 *  \return uint8 Gating Select
 */
INLINE uint8 ADC1_getSeq2GatingSelect(void)
{
  return (uint8)ADC1->SQCFG2.bit.GTSEL;
}

/** \brief Enable Trigger Software Gating
 */
INLINE void ADC1_enSeq2TriggerGate(void)
{
  ADC1->SQCFG2.bit.GTSW = 1u;
}

/** \brief Disable Trigger Software Gating
 */
INLINE void ADC1_disSeq2TriggerGate(void)
{
  ADC1->SQCFG2.bit.GTSW = 0u;
}

/** \brief Set Channel Select for Sequence 2 Slot 0
 *
 *  \param u8_value Channel Select for Sequence 2 Slot 0
 */
INLINE void ADC1_setSeq2Slot0(uint8 u8_value)
{
  ADC1->SQSLOT2.bit.CHSEL0 = u8_value;
}

/** \brief Get Channel Select for Sequence 2 Slot 0
 *
 * \return uint8 Channel Select for Sequence 2 Slot 0
 */
INLINE uint8 ADC1_getSeq2Slot0(void)
{
  return (uint8)ADC1->SQSLOT2.bit.CHSEL0;
}

/** \brief Set Channel Select for Sequence 2 Slot 1
 *
 *  \param u8_value Channel Select for Sequence 2 Slot 1
 */
INLINE void ADC1_setSeq2Slot1(uint8 u8_value)
{
  ADC1->SQSLOT2.bit.CHSEL1 = u8_value;
}

/** \brief Get Channel Select for Sequence 2 Slot 1
 *
 * \return uint8 Channel Select for Sequence 2 Slot 1
 */
INLINE uint8 ADC1_getSeq2Slot1(void)
{
  return (uint8)ADC1->SQSLOT2.bit.CHSEL1;
}

/** \brief Set Channel Select for Sequence 2 Slot 2
 *
 *  \param u8_value Channel Select for Sequence 2 Slot 2
 */
INLINE void ADC1_setSeq2Slot2(uint8 u8_value)
{
  ADC1->SQSLOT2.bit.CHSEL2 = u8_value;
}

/** \brief Get Channel Select for Sequence 2 Slot 2
 *
 * \return uint8 Channel Select for Sequence 2 Slot 2
 */
INLINE uint8 ADC1_getSeq2Slot2(void)
{
  return (uint8)ADC1->SQSLOT2.bit.CHSEL2;
}

/** \brief Set Channel Select for Sequence 2 Slot 3
 *
 *  \param u8_value Channel Select for Sequence 2 Slot 3
 */
INLINE void ADC1_setSeq2Slot3(uint8 u8_value)
{
  ADC1->SQSLOT2.bit.CHSEL3 = u8_value;
}

/** \brief Get Channel Select for Sequence 2 Slot 3
 *
 * \return uint8 Channel Select for Sequence 2 Slot 3
 */
INLINE uint8 ADC1_getSeq2Slot3(void)
{
  return (uint8)ADC1->SQSLOT2.bit.CHSEL3;
}

/** \brief Set Sequence 3 configuration
 *
 *  \param s_value Sequence 3 configuration
 */
INLINE void ADC1_setSeq3Config(tADC1_SQCFGx s_value)
{
  ADC1->SQCFG3.reg = (uint32)s_value.reg;
}

/** \brief Set Sequence repetition
 * 
 *  \param u8_value Sequence repetition
 */
INLINE void ADC1_setSeq3Repetition(uint8 u8_value)
{
  ADC1->SQCFG3.bit.SQREP = u8_value;
}

/** \brief Get Sequence repetition
 * 
 *  \return uint8 Sequence repetition
 */
INLINE uint8 ADC1_getSeq3Repetition(void)
{
  return (uint8)ADC1->SQCFG3.bit.SQREP;
}

/** \brief Enable Collision Config
 */
INLINE void ADC1_enSeq3CollisionDetect(void)
{
  ADC1->SQCFG3.bit.COLLCFG = 1u;
}

/** \brief Disable Collision Config
 */
INLINE void ADC1_disSeq3CollisionDetect(void)
{
  ADC1->SQCFG3.bit.COLLCFG = 0u;
}

/** \brief Enable Wait for Read Enable
 */
INLINE void ADC1_enSeq3WaitForRead(void)
{
  ADC1->SQCFG3.bit.WFRCFG = 1u;
}

/** \brief Disable Wait for Read Enable
 */
INLINE void ADC1_disSeq3WaitForRead(void)
{
  ADC1->SQCFG3.bit.WFRCFG = 0u;
}

/** \brief Set Trigger Select
 * 
 *  \param e_Seq3Trig Trigger Select
 */
INLINE void ADC1_setSeq3TriggerSelect(tADC1_Seq3Trig e_Seq3Trig)
{
  ADC1->SQCFG3.bit.TRGSEL = (uint8)e_Seq3Trig;
}

/** \brief Get Trigger Select
 * 
 *  \return uint8 Trigger Select
 */
INLINE uint8 ADC1_getSeq3TriggerSelect(void)
{
  return ADC1->SQCFG3.bit.TRGSEL;
}

/** \brief Set Gating Select
 * 
 *  \param u8_value Gating Select
 */
INLINE void ADC1_setSeq3GatingSelect(uint8 u8_value)
{
  ADC1->SQCFG3.bit.GTSEL = u8_value;
}

/** \brief Get Gating Select
 * 
 *  \return uint8 Gating Select
 */
INLINE uint8 ADC1_getSeq3GatingSelect(void)
{
  return (uint8)ADC1->SQCFG3.bit.GTSEL;
}

/** \brief Enable Trigger Software Gating
 */
INLINE void ADC1_enSeq3TriggerGate(void)
{
  ADC1->SQCFG3.bit.GTSW = 1u;
}

/** \brief Disable Trigger Software Gating
 */
INLINE void ADC1_disSeq3TriggerGate(void)
{
  ADC1->SQCFG3.bit.GTSW = 0u;
}

/** \brief Set Channel Select for Sequence 3 Slot 0
 *
 *  \param u8_value Channel Select for Sequence 3 Slot 0
 */
INLINE void ADC1_setSeq3Slot0(uint8 u8_value)
{
  ADC1->SQSLOT3.bit.CHSEL0 = u8_value;
}

/** \brief Get Channel Select for Sequence 3 Slot 0
 *
 * \return uint8 Channel Select for Sequence 3 Slot 0
 */
INLINE uint8 ADC1_getSeq3Slot0(void)
{
  return (uint8)ADC1->SQSLOT3.bit.CHSEL0;
}

/** \brief Set Channel Select for Sequence 3 Slot 1
 *
 *  \param u8_value Channel Select for Sequence 3 Slot 1
 */
INLINE void ADC1_setSeq3Slot1(uint8 u8_value)
{
  ADC1->SQSLOT3.bit.CHSEL1 = u8_value;
}

/** \brief Get Channel Select for Sequence 3 Slot 1
 *
 * \return uint8 Channel Select for Sequence 3 Slot 1
 */
INLINE uint8 ADC1_getSeq3Slot1(void)
{
  return (uint8)ADC1->SQSLOT3.bit.CHSEL1;
}

/** \brief Set Channel Select for Sequence 3 Slot 2
 *
 *  \param u8_value Channel Select for Sequence 3 Slot 2
 */
INLINE void ADC1_setSeq3Slot2(uint8 u8_value)
{
  ADC1->SQSLOT3.bit.CHSEL2 = u8_value;
}

/** \brief Get Channel Select for Sequence 3 Slot 2
 *
 * \return uint8 Channel Select for Sequence 3 Slot 2
 */
INLINE uint8 ADC1_getSeq3Slot2(void)
{
  return (uint8)ADC1->SQSLOT3.bit.CHSEL2;
}

/** \brief Set Channel Select for Sequence 3 Slot 3
 *
 *  \param u8_value Channel Select for Sequence 3 Slot 3
 */
INLINE void ADC1_setSeq3Slot3(uint8 u8_value)
{
  ADC1->SQSLOT3.bit.CHSEL3 = u8_value;
}

/** \brief Get Channel Select for Sequence 3 Slot 3
 *
 * \return uint8 Channel Select for Sequence 3 Slot 3
 */
INLINE uint8 ADC1_getSeq3Slot3(void)
{
  return (uint8)ADC1->SQSLOT3.bit.CHSEL3;
}

/** \brief Get Sequence 0 Wait for Read Status
 *
 * \return uint8 Sequence 0 Wait for Read Status
 */
INLINE uint8 ADC1_getSeq0WaitForRead(void)
{
  return (uint8)ADC1->SQSTAT.bit.WFR0;
}

/** \brief Get Sequence 1 Wait for Read Status
 *
 * \return uint8 Sequence 1 Wait for Read Status
 */
INLINE uint8 ADC1_getSeq1WaitForRead(void)
{
  return (uint8)ADC1->SQSTAT.bit.WFR1;
}

/** \brief Get Sequence 2 Wait for Read Status
 *
 * \return uint8 Sequence 2 Wait for Read Status
 */
INLINE uint8 ADC1_getSeq2WaitForRead(void)
{
  return (uint8)ADC1->SQSTAT.bit.WFR2;
}

/** \brief Get Sequence 3 Wait for Read Status
 *
 * \return uint8 Sequence 3 Wait for Read Status
 */
INLINE uint8 ADC1_getSeq3WaitForRead(void)
{
  return (uint8)ADC1->SQSTAT.bit.WFR3;
}

/** \brief Get Sequence 0 Collision Status
 *
 * \return uint8 Sequence 0 Collision Status
 */
INLINE uint8 ADC1_getSeq0CollSts(void)
{
  return (uint8)ADC1->SQSTAT.bit.COLL0;
}

/** \brief Get Sequence 1 Collision Status
 *
 * \return uint8 Sequence 1 Collision Status
 */
INLINE uint8 ADC1_getSeq1CollSts(void)
{
  return (uint8)ADC1->SQSTAT.bit.COLL1;
}

/** \brief Get Sequence 2 Collision Status
 *
 * \return uint8 Sequence 2 Collision Status
 */
INLINE uint8 ADC1_getSeq2CollSts(void)
{
  return (uint8)ADC1->SQSTAT.bit.COLL2;
}

/** \brief Get Sequence 3 Collision Status
 *
 * \return uint8 Sequence 3 Collision Status
 */
INLINE uint8 ADC1_getSeq3CollSts(void)
{
  return (uint8)ADC1->SQSTAT.bit.COLL3;
}

/** \brief Get Sequence 0 Interrupt Status
 *
 * \return uint8 Sequence 0 Interrupt Status
 */
INLINE uint8 ADC1_getSeq0IntSts(void)
{
  return (uint8)ADC1->SQSTAT.bit.SQ0;
}

/** \brief Get Sequence 1 Interrupt Status
 *
 * \return uint8 Sequence 1 Interrupt Status
 */
INLINE uint8 ADC1_getSeq1IntSts(void)
{
  return (uint8)ADC1->SQSTAT.bit.SQ1;
}

/** \brief Get Sequence 2 Interrupt Status
 *
 * \return uint8 Sequence 2 Interrupt Status
 */
INLINE uint8 ADC1_getSeq2IntSts(void)
{
  return (uint8)ADC1->SQSTAT.bit.SQ2;
}

/** \brief Get Sequence 3 Interrupt Status
 *
 * \return uint8 Sequence 3 Interrupt Status
 */
INLINE uint8 ADC1_getSeq3IntSts(void)
{
  return (uint8)ADC1->SQSTAT.bit.SQ3;
}

/** \brief Get Actual  Sequence processed
 *
 * \return uint8 Actual  Sequence processed
 */
INLINE uint8 ADC1_getCurrSeq(void)
{
  return (uint8)ADC1->SQSTAT.bit.SQNUM;
}

/** \brief Clear Sequence 0 Wait for Read Status
 */
INLINE void ADC1_clrSeq0WaitForRead(void)
{
  ADC1->SQSTATCLR.bit.WFR0CLR = 1u;
}

/** \brief Clear Sequence 1 Wait for Read Status
 */
INLINE void ADC1_clrSeq1WaitForRead(void)
{
  ADC1->SQSTATCLR.bit.WFR1CLR = 1u;
}

/** \brief Clear Sequence 2 Wait for Read Status
 */
INLINE void ADC1_clrSeq2WaitForRead(void)
{
  ADC1->SQSTATCLR.bit.WFR2CLR = 1u;
}

/** \brief Clear Sequence 3 Wait for Read Status
 */
INLINE void ADC1_clrSeq3WaitForRead(void)
{
  ADC1->SQSTATCLR.bit.WFR3CLR = 1u;
}

/** \brief Clear Sequence 0 Collision Status
 */
INLINE void ADC1_clrSeq0CollSts(void)
{
  ADC1->SQSTATCLR.bit.COLL0CLR = 1u;
}

/** \brief Clear Sequence 1 Collision Status
 */
INLINE void ADC1_clrSeq1CollSts(void)
{
  ADC1->SQSTATCLR.bit.COLL1CLR = 1u;
}

/** \brief Clear Sequence 2 Collision Status
 */
INLINE void ADC1_clrSeq2CollSts(void)
{
  ADC1->SQSTATCLR.bit.COLL2CLR = 1u;
}

/** \brief Clear Sequence 3 Collision Status
 */
INLINE void ADC1_clrSeq3CollSts(void)
{
  ADC1->SQSTATCLR.bit.COLL3CLR = 1u;
}

/** \brief Clear Sequence 0 Interrupt Status
 */
INLINE void ADC1_clrSeq0IntSts(void)
{
  ADC1->SQSTATCLR.bit.SQ0CLR = 1u;
}

/** \brief Clear Sequence 1 Interrupt Status
 */
INLINE void ADC1_clrSeq1IntSts(void)
{
  ADC1->SQSTATCLR.bit.SQ1CLR = 1u;
}

/** \brief Clear Sequence 2 Interrupt Status
 */
INLINE void ADC1_clrSeq2IntSts(void)
{
  ADC1->SQSTATCLR.bit.SQ2CLR = 1u;
}

/** \brief Clear Sequence 3 Interrupt Status
 */
INLINE void ADC1_clrSeq3IntSts(void)
{
  ADC1->SQSTATCLR.bit.SQ3CLR = 1u;
}

/** \brief Set Sequence 0 Wait for Read Status
 */
INLINE void ADC1_setSeq0WaitForRead(void)
{
  ADC1->SQSTATSET.bit.WFR0SET = 1u;
}

/** \brief Set Sequence 1 Wait for Read Status
 */
INLINE void ADC1_setSeq1WaitForRead(void)
{
  ADC1->SQSTATSET.bit.WFR1SET = 1u;
}

/** \brief Set Sequence 2 Wait for Read Status
 */
INLINE void ADC1_setSeq2WaitForRead(void)
{
  ADC1->SQSTATSET.bit.WFR2SET = 1u;
}

/** \brief Set Sequence 3 Wait for Read Status
 */
INLINE void ADC1_setSeq3WaitForRead(void)
{
  ADC1->SQSTATSET.bit.WFR3SET = 1u;
}

/** \brief Set Sequence 0 Collision Status
 */
INLINE void ADC1_setSeq0CollSts(void)
{
  ADC1->SQSTATSET.bit.COLL0SET = 1u;
}

/** \brief Set Sequence 1 Collision Status
 */
INLINE void ADC1_setSeq1CollSts(void)
{
  ADC1->SQSTATSET.bit.COLL1SET = 1u;
}

/** \brief Set Sequence 2 Collision Status
 */
INLINE void ADC1_setSeq2CollSts(void)
{
  ADC1->SQSTATSET.bit.COLL2SET = 1u;
}

/** \brief Set Sequence 3 Collision Status
 */
INLINE void ADC1_setSeq3CollSts(void)
{
  ADC1->SQSTATSET.bit.COLL3SET = 1u;
}

/** \brief Set Sequence 0 Interrupt Status
 */
INLINE void ADC1_setSeq0IntSts(void)
{
  ADC1->SQSTATSET.bit.SQ0SET = 1u;
}

/** \brief Set Sequence 1 Interrupt Status
 */
INLINE void ADC1_setSeq1IntSts(void)
{
  ADC1->SQSTATSET.bit.SQ1SET = 1u;
}

/** \brief Set Sequence 2 Interrupt Status
 */
INLINE void ADC1_setSeq2IntSts(void)
{
  ADC1->SQSTATSET.bit.SQ2SET = 1u;
}

/** \brief Set Sequence 3 Interrupt Status
 */
INLINE void ADC1_setSeq3IntSts(void)
{
  ADC1->SQSTATSET.bit.SQ3SET = 1u;
}

/** \brief Set Channel 0 configuration
 *
 *  \param s_value Channel 0 configuration
 */
INLINE void ADC1_setCh0Config(tADC1_CHCFGx s_value)
{
  ADC1->CHCFG0.reg = (uint32)s_value.reg;
}

/** \brief Set Channel 1 configuration
 *
 *  \param s_value Channel 1 configuration
 */
INLINE void ADC1_setCh1Config(tADC1_CHCFGx s_value)
{
  ADC1->CHCFG1.reg = (uint32)s_value.reg;
}

/** \brief Set Channel 2 configuration
 *
 *  \param s_value Channel 2 configuration
 */
INLINE void ADC1_setCh2Config(tADC1_CHCFGx s_value)
{
  ADC1->CHCFG2.reg = (uint32)s_value.reg;
}

/** \brief Set Channel 3 configuration
 *
 *  \param s_value Channel 3 configuration
 */
INLINE void ADC1_setCh3Config(tADC1_CHCFGx s_value)
{
  ADC1->CHCFG3.reg = (uint32)s_value.reg;
}

/** \brief Set Channel 4 configuration
 *
 *  \param s_value Channel 4 configuration
 */
INLINE void ADC1_setCh4Config(tADC1_CHCFGx s_value)
{
  ADC1->CHCFG4.reg = (uint32)s_value.reg;
}

/** \brief Set Channel 5 configuration
 *
 *  \param s_value Channel 5 configuration
 */
INLINE void ADC1_setCh5Config(tADC1_CHCFGx s_value)
{
  ADC1->CHCFG5.reg = (uint32)s_value.reg;
}

/** \brief Set Channel 6 configuration
 *
 *  \param s_value Channel 6 configuration
 */
INLINE void ADC1_setCh6Config(tADC1_CHCFGx s_value)
{
  ADC1->CHCFG6.reg = (uint32)s_value.reg;
}

/** \brief Set Channel 7 configuration
 *
 *  \param s_value Channel 7 configuration
 */
INLINE void ADC1_setCh7Config(tADC1_CHCFGx s_value)
{
  ADC1->CHCFG7.reg = (uint32)s_value.reg;
}

/** \brief Set Channel 8 configuration
 *
 *  \param s_value Channel 8 configuration
 */
INLINE void ADC1_setCh8Config(tADC1_CHCFGx s_value)
{
  ADC1->CHCFG8.reg = (uint32)s_value.reg;
}

/** \brief Set Channel 9 configuration
 *
 *  \param s_value Channel 9 configuration
 */
INLINE void ADC1_setCh9Config(tADC1_CHCFGx s_value)
{
  ADC1->CHCFG9.reg = (uint32)s_value.reg;
}

/** \brief Set Channel 10 configuration
 *
 *  \param s_value Channel 10 configuration
 */
INLINE void ADC1_setCh10Config(tADC1_CHCFGx s_value)
{
  ADC1->CHCFG10.reg = (uint32)s_value.reg;
}

/** \brief Set Channel 11 configuration
 *
 *  \param s_value Channel 11 configuration
 */
INLINE void ADC1_setCh11Config(tADC1_CHCFGx s_value)
{
  ADC1->CHCFG11.reg = (uint32)s_value.reg;
}

/** \brief Set Channel 12 configuration
 *
 *  \param s_value Channel 12 configuration
 */
INLINE void ADC1_setCh12Config(tADC1_CHCFGx s_value)
{
  ADC1->CHCFG12.reg = (uint32)s_value.reg;
}

/** \brief Set Channel 13 configuration
 *
 *  \param s_value Channel 13 configuration
 */
INLINE void ADC1_setCh13Config(tADC1_CHCFGx s_value)
{
  ADC1->CHCFG13.reg = (uint32)s_value.reg;
}

/** \brief Set Channel 14 configuration
 *
 *  \param s_value Channel 14 configuration
 */
INLINE void ADC1_setCh14Config(tADC1_CHCFGx s_value)
{
  ADC1->CHCFG14.reg = (uint32)s_value.reg;
}

/** \brief Set Channel 15 configuration
 *
 *  \param s_value Channel 15 configuration
 */
INLINE void ADC1_setCh15Config(tADC1_CHCFGx s_value)
{
  ADC1->CHCFG15.reg = (uint32)s_value.reg;
}

/** \brief Set Channel 16 configuration
 *
 *  \param s_value Channel 16 configuration
 */
INLINE void ADC1_setCh16Config(tADC1_CHCFGx s_value)
{
  ADC1->CHCFG16.reg = (uint32)s_value.reg;
}

/** \brief Set Channel 17 configuration
 *
 *  \param s_value Channel 17 configuration
 */
INLINE void ADC1_setCh17Config(tADC1_CHCFGx s_value)
{
  ADC1->CHCFG17.reg = (uint32)s_value.reg;
}

/** \brief Set Channel 18 configuration
 *
 *  \param s_value Channel 18 configuration
 */
INLINE void ADC1_setCh18Config(tADC1_CHCFGx s_value)
{
  ADC1->CHCFG18.reg = (uint32)s_value.reg;
}

/** \brief Set Channel 19 configuration
 *
 *  \param s_value Channel 19 configuration
 */
INLINE void ADC1_setCh19Config(tADC1_CHCFGx s_value)
{
  ADC1->CHCFG19.reg = (uint32)s_value.reg;
}

/** \brief Get Channel 0 End Of Conversion Status
 *
 * \return uint8 Channel 0 End Of Conversion Status
 */
INLINE uint8 ADC1_getCh0EndOfConvSts(void)
{
  return (uint8)ADC1->CHSTAT.bit.CH0;
}

/** \brief Get Channel 1 End Of Conversion Status
 *
 * \return uint8 Channel 1 End Of Conversion Status
 */
INLINE uint8 ADC1_getCh1EndOfConvSts(void)
{
  return (uint8)ADC1->CHSTAT.bit.CH1;
}

/** \brief Get Channel 2 End Of Conversion Status
 *
 * \return uint8 Channel 2 End Of Conversion Status
 */
INLINE uint8 ADC1_getCh2EndOfConvSts(void)
{
  return (uint8)ADC1->CHSTAT.bit.CH2;
}

/** \brief Get Channel 3 End Of Conversion Status
 *
 * \return uint8 Channel 3 End Of Conversion Status
 */
INLINE uint8 ADC1_getCh3EndOfConvSts(void)
{
  return (uint8)ADC1->CHSTAT.bit.CH3;
}

/** \brief Get Channel 4 End Of Conversion Status
 *
 * \return uint8 Channel 4 End Of Conversion Status
 */
INLINE uint8 ADC1_getCh4EndOfConvSts(void)
{
  return (uint8)ADC1->CHSTAT.bit.CH4;
}

/** \brief Get Channel 5 End Of Conversion Status
 *
 * \return uint8 Channel 5 End Of Conversion Status
 */
INLINE uint8 ADC1_getCh5EndOfConvSts(void)
{
  return (uint8)ADC1->CHSTAT.bit.CH5;
}

/** \brief Get Channel 6 End Of Conversion Status
 *
 * \return uint8 Channel 6 End Of Conversion Status
 */
INLINE uint8 ADC1_getCh6EndOfConvSts(void)
{
  return (uint8)ADC1->CHSTAT.bit.CH6;
}

/** \brief Get Channel 7 End Of Conversion Status
 *
 * \return uint8 Channel 7 End Of Conversion Status
 */
INLINE uint8 ADC1_getCh7EndOfConvSts(void)
{
  return (uint8)ADC1->CHSTAT.bit.CH7;
}

/** \brief Get Channel 8 End Of Conversion Status
 *
 * \return uint8 Channel 8 End Of Conversion Status
 */
INLINE uint8 ADC1_getCh8EndOfConvSts(void)
{
  return (uint8)ADC1->CHSTAT.bit.CH8;
}

/** \brief Get Channel 9 End Of Conversion Status
 *
 * \return uint8 Channel 9 End Of Conversion Status
 */
INLINE uint8 ADC1_getCh9EndOfConvSts(void)
{
  return (uint8)ADC1->CHSTAT.bit.CH9;
}

/** \brief Get Channel 10 End Of Conversion Status
 *
 * \return uint8 Channel 10 End Of Conversion Status
 */
INLINE uint8 ADC1_getCh10EndOfConvSts(void)
{
  return (uint8)ADC1->CHSTAT.bit.CH10;
}

/** \brief Get Channel 11 End Of Conversion Status
 *
 * \return uint8 Channel 11 End Of Conversion Status
 */
INLINE uint8 ADC1_getCh11EndOfConvSts(void)
{
  return (uint8)ADC1->CHSTAT.bit.CH11;
}

/** \brief Get Channel 12 End Of Conversion Status
 *
 * \return uint8 Channel 12 End Of Conversion Status
 */
INLINE uint8 ADC1_getCh12EndOfConvSts(void)
{
  return (uint8)ADC1->CHSTAT.bit.CH12;
}

/** \brief Get Channel 13 End Of Conversion Status
 *
 * \return uint8 Channel 13 End Of Conversion Status
 */
INLINE uint8 ADC1_getCh13EndOfConvSts(void)
{
  return (uint8)ADC1->CHSTAT.bit.CH13;
}

/** \brief Get Channel 14 End Of Conversion Status
 *
 * \return uint8 Channel 14 End Of Conversion Status
 */
INLINE uint8 ADC1_getCh14EndOfConvSts(void)
{
  return (uint8)ADC1->CHSTAT.bit.CH14;
}

/** \brief Get Channel 15 End Of Conversion Status
 *
 * \return uint8 Channel 15 End Of Conversion Status
 */
INLINE uint8 ADC1_getCh15EndOfConvSts(void)
{
  return (uint8)ADC1->CHSTAT.bit.CH15;
}

/** \brief Get Channel 16 End Of Conversion Status
 *
 * \return uint8 Channel 16 End Of Conversion Status
 */
INLINE uint8 ADC1_getCh16EndOfConvSts(void)
{
  return (uint8)ADC1->CHSTAT.bit.CH16;
}

/** \brief Get Channel 17 End Of Conversion Status
 *
 * \return uint8 Channel 17 End Of Conversion Status
 */
INLINE uint8 ADC1_getCh17EndOfConvSts(void)
{
  return (uint8)ADC1->CHSTAT.bit.CH17;
}

/** \brief Get Channel 18 End Of Conversion Status
 *
 * \return uint8 Channel 18 End Of Conversion Status
 */
INLINE uint8 ADC1_getCh18EndOfConvSts(void)
{
  return (uint8)ADC1->CHSTAT.bit.CH18;
}

/** \brief Get Channel 19 End Of Conversion Status
 *
 * \return uint8 Channel 19 End Of Conversion Status
 */
INLINE uint8 ADC1_getCh19EndOfConvSts(void)
{
  return (uint8)ADC1->CHSTAT.bit.CH19;
}

/** \brief Get Current Channel under conversion
 *
 * \return uint8 Current Channel under conversion
 */
INLINE uint8 ADC1_getCurrChannel(void)
{
  return (uint8)ADC1->CHSTAT.bit.CHNUM;
}

/** \brief Clear Channel 0 End Of Conversion Status
 */
INLINE void ADC1_clrCh0EndOfConvSts(void)
{
  ADC1->CHSTATCLR.bit.CH0CLR = 1u;
}

/** \brief Clear Channel 1 End Of Conversion Status
 */
INLINE void ADC1_clrCh1EndOfConvSts(void)
{
  ADC1->CHSTATCLR.bit.CH1CLR = 1u;
}

/** \brief Clear Channel 2 End Of Conversion Status
 */
INLINE void ADC1_clrCh2EndOfConvSts(void)
{
  ADC1->CHSTATCLR.bit.CH2CLR = 1u;
}

/** \brief Clear Channel 3 End Of Conversion Status
 */
INLINE void ADC1_clrCh3EndOfConvSts(void)
{
  ADC1->CHSTATCLR.bit.CH3CLR = 1u;
}

/** \brief Clear Channel 4 End Of Conversion Status
 */
INLINE void ADC1_clrCh4EndOfConvSts(void)
{
  ADC1->CHSTATCLR.bit.CH4CLR = 1u;
}

/** \brief Clear Channel 5 End Of Conversion Status
 */
INLINE void ADC1_clrCh5EndOfConvSts(void)
{
  ADC1->CHSTATCLR.bit.CH5CLR = 1u;
}

/** \brief Clear Channel 6 End Of Conversion Status
 */
INLINE void ADC1_clrCh6EndOfConvSts(void)
{
  ADC1->CHSTATCLR.bit.CH6CLR = 1u;
}

/** \brief Clear Channel 7 End Of Conversion Status
 */
INLINE void ADC1_clrCh7EndOfConvSts(void)
{
  ADC1->CHSTATCLR.bit.CH7CLR = 1u;
}

/** \brief Clear Channel 8 End Of Conversion Status
 */
INLINE void ADC1_clrCh8EndOfConvSts(void)
{
  ADC1->CHSTATCLR.bit.CH8CLR = 1u;
}

/** \brief Clear Channel 9 End Of Conversion Status
 */
INLINE void ADC1_clrCh9EndOfConvSts(void)
{
  ADC1->CHSTATCLR.bit.CH9CLR = 1u;
}

/** \brief Clear Channel 10 End Of Conversion Status
 */
INLINE void ADC1_clrCh10EndOfConvSts(void)
{
  ADC1->CHSTATCLR.bit.CH10CLR = 1u;
}

/** \brief Clear Channel 11 End Of Conversion Status
 */
INLINE void ADC1_clrCh11EndOfConvSts(void)
{
  ADC1->CHSTATCLR.bit.CH11CLR = 1u;
}

/** \brief Clear Channel 12 End Of Conversion Status
 */
INLINE void ADC1_clrCh12EndOfConvSts(void)
{
  ADC1->CHSTATCLR.bit.CH12CLR = 1u;
}

/** \brief Clear Channel 13 End Of Conversion Status
 */
INLINE void ADC1_clrCh13EndOfConvSts(void)
{
  ADC1->CHSTATCLR.bit.CH13CLR = 1u;
}

/** \brief Clear Channel 14 End Of Conversion Status
 */
INLINE void ADC1_clrCh14EndOfConvSts(void)
{
  ADC1->CHSTATCLR.bit.CH14CLR = 1u;
}

/** \brief Clear Channel 15 End Of Conversion Status
 */
INLINE void ADC1_clrCh15EndOfConvSts(void)
{
  ADC1->CHSTATCLR.bit.CH15CLR = 1u;
}

/** \brief Clear Channel 16 End Of Conversion Status
 */
INLINE void ADC1_clrCh16EndOfConvSts(void)
{
  ADC1->CHSTATCLR.bit.CH16CLR = 1u;
}

/** \brief Clear Channel 17 End Of Conversion Status
 */
INLINE void ADC1_clrCh17EndOfConvSts(void)
{
  ADC1->CHSTATCLR.bit.CH17CLR = 1u;
}

/** \brief Clear Channel 18 End Of Conversion Status
 */
INLINE void ADC1_clrCh18EndOfConvSts(void)
{
  ADC1->CHSTATCLR.bit.CH18CLR = 1u;
}

/** \brief Clear Channel 19 End Of Conversion Status
 */
INLINE void ADC1_clrCh19EndOfConvSts(void)
{
  ADC1->CHSTATCLR.bit.CH19CLR = 1u;
}

/** \brief Set Channel 0 End Of Conversion Status
 */
INLINE void ADC1_setCh0EndOfConvSts(void)
{
  ADC1->CHSTATSET.bit.CH0SET = 1u;
}

/** \brief Set Channel 1 End Of Conversion Status
 */
INLINE void ADC1_setCh1EndOfConvSts(void)
{
  ADC1->CHSTATSET.bit.CH1SET = 1u;
}

/** \brief Set Channel 2 End Of Conversion Status
 */
INLINE void ADC1_setCh2EndOfConvSts(void)
{
  ADC1->CHSTATSET.bit.CH2SET = 1u;
}

/** \brief Set Channel 3 End Of Conversion Status
 */
INLINE void ADC1_setCh3EndOfConvSts(void)
{
  ADC1->CHSTATSET.bit.CH3SET = 1u;
}

/** \brief Set Channel 4 End Of Conversion Status
 */
INLINE void ADC1_setCh4EndOfConvSts(void)
{
  ADC1->CHSTATSET.bit.CH4SET = 1u;
}

/** \brief Set Channel 5 End Of Conversion Status
 */
INLINE void ADC1_setCh5EndOfConvSts(void)
{
  ADC1->CHSTATSET.bit.CH5SET = 1u;
}

/** \brief Set Channel 6 End Of Conversion Status
 */
INLINE void ADC1_setCh6EndOfConvSts(void)
{
  ADC1->CHSTATSET.bit.CH6SET = 1u;
}

/** \brief Set Channel 7 End Of Conversion Status
 */
INLINE void ADC1_setCh7EndOfConvSts(void)
{
  ADC1->CHSTATSET.bit.CH7SET = 1u;
}

/** \brief Set Channel 8 End Of Conversion Status
 */
INLINE void ADC1_setCh8EndOfConvSts(void)
{
  ADC1->CHSTATSET.bit.CH8SET = 1u;
}

/** \brief Set Channel 9 End Of Conversion Status
 */
INLINE void ADC1_setCh9EndOfConvSts(void)
{
  ADC1->CHSTATSET.bit.CH9SET = 1u;
}

/** \brief Set Channel 10 End Of Conversion Status
 */
INLINE void ADC1_setCh10EndOfConvSts(void)
{
  ADC1->CHSTATSET.bit.CH10SET = 1u;
}

/** \brief Set Channel 11 End Of Conversion Status
 */
INLINE void ADC1_setCh11EndOfConvSts(void)
{
  ADC1->CHSTATSET.bit.CH11SET = 1u;
}

/** \brief Set Channel 12 End Of Conversion Status
 */
INLINE void ADC1_setCh12EndOfConvSts(void)
{
  ADC1->CHSTATSET.bit.CH12SET = 1u;
}

/** \brief Set Channel 13 End Of Conversion Status
 */
INLINE void ADC1_setCh13EndOfConvSts(void)
{
  ADC1->CHSTATSET.bit.CH13SET = 1u;
}

/** \brief Set Channel 14 End Of Conversion Status
 */
INLINE void ADC1_setCh14EndOfConvSts(void)
{
  ADC1->CHSTATSET.bit.CH14SET = 1u;
}

/** \brief Set Channel 15 End Of Conversion Status
 */
INLINE void ADC1_setCh15EndOfConvSts(void)
{
  ADC1->CHSTATSET.bit.CH15SET = 1u;
}

/** \brief Set Channel 16 End Of Conversion Status
 */
INLINE void ADC1_setCh16EndOfConvSts(void)
{
  ADC1->CHSTATSET.bit.CH16SET = 1u;
}

/** \brief Set Channel 17 End Of Conversion Status
 */
INLINE void ADC1_setCh17EndOfConvSts(void)
{
  ADC1->CHSTATSET.bit.CH17SET = 1u;
}

/** \brief Set Channel 18 End Of Conversion Status
 */
INLINE void ADC1_setCh18EndOfConvSts(void)
{
  ADC1->CHSTATSET.bit.CH18SET = 1u;
}

/** \brief Set Channel 19 End Of Conversion Status
 */
INLINE void ADC1_setCh19EndOfConvSts(void)
{
  ADC1->CHSTATSET.bit.CH19SET = 1u;
}

/** \brief Set Conversion Class 0
 *
 *  \param s_value Conversion Class 0
 */
INLINE void ADC1_setConvClass0Config(tADC1_CONVCFGx s_value)
{
  ADC1->CONVCFG0.reg = (uint32)s_value.reg;
}

/** \brief Set Conversion Class 1
 *
 *  \param s_value Conversion Class 1
 */
INLINE void ADC1_setConvClass1Config(tADC1_CONVCFGx s_value)
{
  ADC1->CONVCFG1.reg = (uint32)s_value.reg;
}

/** \brief Set Conversion Class 2
 *
 *  \param s_value Conversion Class 2
 */
INLINE void ADC1_setConvClass2Config(tADC1_CONVCFGx s_value)
{
  ADC1->CONVCFG2.reg = (uint32)s_value.reg;
}

/** \brief Set Conversion Class 3
 *
 *  \param s_value Conversion Class 3
 */
INLINE void ADC1_setConvClass3Config(tADC1_CONVCFGx s_value)
{
  ADC1->CONVCFG3.reg = (uint32)s_value.reg;
}

/** \brief Enable Calibration Channel 0
 */
INLINE void ADC1_enCalibCh0 (void)
{
  ADC1->CALEN.bit.CALEN0 = 1u;
}

/** \brief Disable Calibration Channel 0
 */
INLINE void ADC1_disCalibCh0 (void)
{
  ADC1->CALEN.bit.CALEN0 = 0u;
}

/** \brief Enable Calibration Channel 1
 */
INLINE void ADC1_enCalibCh1 (void)
{
  ADC1->CALEN.bit.CALEN1 = 1u;
}

/** \brief Disable Calibration Channel 1
 */
INLINE void ADC1_disCalibCh1 (void)
{
  ADC1->CALEN.bit.CALEN1 = 0u;
}

/** \brief Enable Calibration Channel 2
 */
INLINE void ADC1_enCalibCh2 (void)
{
  ADC1->CALEN.bit.CALEN2 = 1u;
}

/** \brief Disable Calibration Channel 2
 */
INLINE void ADC1_disCalibCh2 (void)
{
  ADC1->CALEN.bit.CALEN2 = 0u;
}

/** \brief Enable Calibration Channel 3
 */
INLINE void ADC1_enCalibCh3 (void)
{
  ADC1->CALEN.bit.CALEN3 = 1u;
}

/** \brief Disable Calibration Channel 3
 */
INLINE void ADC1_disCalibCh3 (void)
{
  ADC1->CALEN.bit.CALEN3 = 0u;
}

/** \brief Enable Calibration Channel 4
 */
INLINE void ADC1_enCalibCh4 (void)
{
  ADC1->CALEN.bit.CALEN4 = 1u;
}

/** \brief Disable Calibration Channel 4
 */
INLINE void ADC1_disCalibCh4 (void)
{
  ADC1->CALEN.bit.CALEN4 = 0u;
}

/** \brief Enable Calibration Channel 5
 */
INLINE void ADC1_enCalibCh5 (void)
{
  ADC1->CALEN.bit.CALEN5 = 1u;
}

/** \brief Disable Calibration Channel 5
 */
INLINE void ADC1_disCalibCh5 (void)
{
  ADC1->CALEN.bit.CALEN5 = 0u;
}

/** \brief Enable Calibration Channel 6
 */
INLINE void ADC1_enCalibCh6 (void)
{
  ADC1->CALEN.bit.CALEN6 = 1u;
}

/** \brief Disable Calibration Channel 6
 */
INLINE void ADC1_disCalibCh6 (void)
{
  ADC1->CALEN.bit.CALEN6 = 0u;
}

/** \brief Enable Calibration Channel 7
 */
INLINE void ADC1_enCalibCh7 (void)
{
  ADC1->CALEN.bit.CALEN7 = 1u;
}

/** \brief Disable Calibration Channel 7
 */
INLINE void ADC1_disCalibCh7 (void)
{
  ADC1->CALEN.bit.CALEN7 = 0u;
}

/** \brief Enable Calibration Channel 8
 */
INLINE void ADC1_enCalibCh8 (void)
{
  ADC1->CALEN.bit.CALEN8 = 1u;
}

/** \brief Disable Calibration Channel 8
 */
INLINE void ADC1_disCalibCh8 (void)
{
  ADC1->CALEN.bit.CALEN8 = 0u;
}

/** \brief Enable Calibration Channel 9
 */
INLINE void ADC1_enCalibCh9 (void)
{
  ADC1->CALEN.bit.CALEN9 = 1u;
}

/** \brief Disable Calibration Channel 9
 */
INLINE void ADC1_disCalibCh9 (void)
{
  ADC1->CALEN.bit.CALEN9 = 0u;
}

/** \brief Enable Calibration Channel 10
 */
INLINE void ADC1_enCalibCh10(void)
{
  ADC1->CALEN.bit.CALEN10 = 1u;
}

/** \brief Disable Calibration Channel 10
 */
INLINE void ADC1_disCalibCh10(void)
{
  ADC1->CALEN.bit.CALEN10 = 0u;
}

/** \brief Enable Calibration Channel 11
 */
INLINE void ADC1_enCalibCh11(void)
{
  ADC1->CALEN.bit.CALEN11 = 1u;
}

/** \brief Disable Calibration Channel 11
 */
INLINE void ADC1_disCalibCh11(void)
{
  ADC1->CALEN.bit.CALEN11 = 0u;
}

/** \brief Enable Calibration Channel 12
 */
INLINE void ADC1_enCalibCh12(void)
{
  ADC1->CALEN.bit.CALEN12 = 1u;
}

/** \brief Disable Calibration Channel 12
 */
INLINE void ADC1_disCalibCh12(void)
{
  ADC1->CALEN.bit.CALEN12 = 0u;
}

/** \brief Enable Calibration Channel 13
 */
INLINE void ADC1_enCalibCh13(void)
{
  ADC1->CALEN.bit.CALEN13 = 1u;
}

/** \brief Disable Calibration Channel 13
 */
INLINE void ADC1_disCalibCh13(void)
{
  ADC1->CALEN.bit.CALEN13 = 0u;
}

/** \brief Enable Calibration Channel 14
 */
INLINE void ADC1_enCalibCh14(void)
{
  ADC1->CALEN.bit.CALEN14 = 1u;
}

/** \brief Disable Calibration Channel 14
 */
INLINE void ADC1_disCalibCh14(void)
{
  ADC1->CALEN.bit.CALEN14 = 0u;
}

/** \brief Enable Calibration Channel 15
 */
INLINE void ADC1_enCalibCh15(void)
{
  ADC1->CALEN.bit.CALEN15 = 1u;
}

/** \brief Disable Calibration Channel 15
 */
INLINE void ADC1_disCalibCh15(void)
{
  ADC1->CALEN.bit.CALEN15 = 0u;
}

/** \brief Enable Calibration Channel 16
 */
INLINE void ADC1_enCalibCh16(void)
{
  ADC1->CALEN.bit.CALEN16 = 1u;
}

/** \brief Disable Calibration Channel 16
 */
INLINE void ADC1_disCalibCh16(void)
{
  ADC1->CALEN.bit.CALEN16 = 0u;
}

/** \brief Enable Calibration Channel 17
 */
INLINE void ADC1_enCalibCh17(void)
{
  ADC1->CALEN.bit.CALEN17 = 1u;
}

/** \brief Disable Calibration Channel 17
 */
INLINE void ADC1_disCalibCh17(void)
{
  ADC1->CALEN.bit.CALEN17 = 0u;
}

/** \brief Enable Calibration Channel 18
 */
INLINE void ADC1_enCalibCh18(void)
{
  ADC1->CALEN.bit.CALEN18 = 1u;
}

/** \brief Disable Calibration Channel 18
 */
INLINE void ADC1_disCalibCh18(void)
{
  ADC1->CALEN.bit.CALEN18 = 0u;
}

/** \brief Enable Calibration Channel 19
 */
INLINE void ADC1_enCalibCh19(void)
{
  ADC1->CALEN.bit.CALEN19 = 1u;
}

/** \brief Disable Calibration Channel 19
 */
INLINE void ADC1_disCalibCh19(void)
{
  ADC1->CALEN.bit.CALEN19 = 0u;
}

/** \brief Enable Calibration Channel 20
 */
INLINE void ADC1_enCalibCh20(void)
{
  ADC1->CALEN.bit.CALEN20 = 1u;
}

/** \brief Disable Calibration Channel 20
 */
INLINE void ADC1_disCalibCh20(void)
{
  ADC1->CALEN.bit.CALEN20 = 0u;
}

/** \brief Enable Calibration Channel 21
 */
INLINE void ADC1_enCalibCh21(void)
{
  ADC1->CALEN.bit.CALEN21 = 1u;
}

/** \brief Disable Calibration Channel 21
 */
INLINE void ADC1_disCalibCh21(void)
{
  ADC1->CALEN.bit.CALEN21 = 0u;
}

/** \brief Enable Calibration Channel 22
 */
INLINE void ADC1_enCalibCh22(void)
{
  ADC1->CALEN.bit.CALEN22 = 1u;
}

/** \brief Disable Calibration Channel 22
 */
INLINE void ADC1_disCalibCh22(void)
{
  ADC1->CALEN.bit.CALEN22 = 0u;
}

/** \brief Enable Calibration Channel 23
 */
INLINE void ADC1_enCalibCh23(void)
{
  ADC1->CALEN.bit.CALEN23 = 1u;
}

/** \brief Disable Calibration Channel 23
 */
INLINE void ADC1_disCalibCh23(void)
{
  ADC1->CALEN.bit.CALEN23 = 0u;
}

/** \brief Enable Calibration Channel 24
 */
INLINE void ADC1_enCalibCh24(void)
{
  ADC1->CALEN.bit.CALEN24 = 1u;
}

/** \brief Disable Calibration Channel 24
 */
INLINE void ADC1_disCalibCh24(void)
{
  ADC1->CALEN.bit.CALEN24 = 0u;
}

/** \brief Enable Calibration Channel 25
 */
INLINE void ADC1_enCalibCh25(void)
{
  ADC1->CALEN.bit.CALEN25 = 1u;
}

/** \brief Disable Calibration Channel 25
 */
INLINE void ADC1_disCalibCh25(void)
{
  ADC1->CALEN.bit.CALEN25 = 0u;
}

/** \brief Enable Calibration Channel 26
 */
INLINE void ADC1_enCalibCh26(void)
{
  ADC1->CALEN.bit.CALEN26 = 1u;
}

/** \brief Disable Calibration Channel 26
 */
INLINE void ADC1_disCalibCh26(void)
{
  ADC1->CALEN.bit.CALEN26 = 0u;
}

/** \brief Enable Calibration Protection Channel 0
 */
INLINE void ADC1_enCalibProtCh0 (void)
{
  ADC1->CALPEN.bit.CALPEN0 = 1u;
}

/** \brief Disable Calibration Protection Channel 0
 */
INLINE void ADC1_disCalibProtCh0 (void)
{
  ADC1->CALPEN.bit.CALPEN0 = 0u;
}

/** \brief Enable Calibration Protection Channel 1
 */
INLINE void ADC1_enCalibProtCh1 (void)
{
  ADC1->CALPEN.bit.CALPEN1 = 1u;
}

/** \brief Disable Calibration Protection Channel 1
 */
INLINE void ADC1_disCalibProtCh1 (void)
{
  ADC1->CALPEN.bit.CALPEN1 = 0u;
}

/** \brief Enable Calibration Protection Channel 2
 */
INLINE void ADC1_enCalibProtCh2 (void)
{
  ADC1->CALPEN.bit.CALPEN2 = 1u;
}

/** \brief Disable Calibration Protection Channel 2
 */
INLINE void ADC1_disCalibProtCh2 (void)
{
  ADC1->CALPEN.bit.CALPEN2 = 0u;
}

/** \brief Enable Calibration Protection Channel 3
 */
INLINE void ADC1_enCalibProtCh3 (void)
{
  ADC1->CALPEN.bit.CALPEN3 = 1u;
}

/** \brief Disable Calibration Protection Channel 3
 */
INLINE void ADC1_disCalibProtCh3 (void)
{
  ADC1->CALPEN.bit.CALPEN3 = 0u;
}

/** \brief Enable Calibration Protection Channel 4
 */
INLINE void ADC1_enCalibProtCh4 (void)
{
  ADC1->CALPEN.bit.CALPEN4 = 1u;
}

/** \brief Disable Calibration Protection Channel 4
 */
INLINE void ADC1_disCalibProtCh4 (void)
{
  ADC1->CALPEN.bit.CALPEN4 = 0u;
}

/** \brief Enable Calibration Protection Channel 5
 */
INLINE void ADC1_enCalibProtCh5 (void)
{
  ADC1->CALPEN.bit.CALPEN5 = 1u;
}

/** \brief Disable Calibration Protection Channel 5
 */
INLINE void ADC1_disCalibProtCh5 (void)
{
  ADC1->CALPEN.bit.CALPEN5 = 0u;
}

/** \brief Enable Calibration Protection Channel 6
 */
INLINE void ADC1_enCalibProtCh6 (void)
{
  ADC1->CALPEN.bit.CALPEN6 = 1u;
}

/** \brief Disable Calibration Protection Channel 6
 */
INLINE void ADC1_disCalibProtCh6 (void)
{
  ADC1->CALPEN.bit.CALPEN6 = 0u;
}

/** \brief Enable Calibration Protection Channel 7
 */
INLINE void ADC1_enCalibProtCh7 (void)
{
  ADC1->CALPEN.bit.CALPEN7 = 1u;
}

/** \brief Disable Calibration Protection Channel 7
 */
INLINE void ADC1_disCalibProtCh7 (void)
{
  ADC1->CALPEN.bit.CALPEN7 = 0u;
}

/** \brief Enable Calibration Protection Channel 8
 */
INLINE void ADC1_enCalibProtCh8 (void)
{
  ADC1->CALPEN.bit.CALPEN8 = 1u;
}

/** \brief Disable Calibration Protection Channel 8
 */
INLINE void ADC1_disCalibProtCh8 (void)
{
  ADC1->CALPEN.bit.CALPEN8 = 0u;
}

/** \brief Enable Calibration Protection Channel 9
 */
INLINE void ADC1_enCalibProtCh9 (void)
{
  ADC1->CALPEN.bit.CALPEN9 = 1u;
}

/** \brief Disable Calibration Protection Channel 9
 */
INLINE void ADC1_disCalibProtCh9 (void)
{
  ADC1->CALPEN.bit.CALPEN9 = 0u;
}

/** \brief Enable Calibration Protection Channel 10
 */
INLINE void ADC1_enCalibProtCh10(void)
{
  ADC1->CALPEN.bit.CALPEN10 = 1u;
}

/** \brief Disable Calibration Protection Channel 10
 */
INLINE void ADC1_disCalibProtCh10(void)
{
  ADC1->CALPEN.bit.CALPEN10 = 0u;
}

/** \brief Enable Calibration Protection Channel 11
 */
INLINE void ADC1_enCalibProtCh11(void)
{
  ADC1->CALPEN.bit.CALPEN11 = 1u;
}

/** \brief Disable Calibration Protection Channel 11
 */
INLINE void ADC1_disCalibProtCh11(void)
{
  ADC1->CALPEN.bit.CALPEN11 = 0u;
}

/** \brief Enable Calibration Protection Channel 12
 */
INLINE void ADC1_enCalibProtCh12(void)
{
  ADC1->CALPEN.bit.CALPEN12 = 1u;
}

/** \brief Disable Calibration Protection Channel 12
 */
INLINE void ADC1_disCalibProtCh12(void)
{
  ADC1->CALPEN.bit.CALPEN12 = 0u;
}

/** \brief Enable Calibration Protection Channel 13
 */
INLINE void ADC1_enCalibProtCh13(void)
{
  ADC1->CALPEN.bit.CALPEN13 = 1u;
}

/** \brief Disable Calibration Protection Channel 13
 */
INLINE void ADC1_disCalibProtCh13(void)
{
  ADC1->CALPEN.bit.CALPEN13 = 0u;
}

/** \brief Enable Calibration Protection Channel 14
 */
INLINE void ADC1_enCalibProtCh14(void)
{
  ADC1->CALPEN.bit.CALPEN14 = 1u;
}

/** \brief Disable Calibration Protection Channel 14
 */
INLINE void ADC1_disCalibProtCh14(void)
{
  ADC1->CALPEN.bit.CALPEN14 = 0u;
}

/** \brief Enable Calibration Protection Channel 15
 */
INLINE void ADC1_enCalibProtCh15(void)
{
  ADC1->CALPEN.bit.CALPEN15 = 1u;
}

/** \brief Disable Calibration Protection Channel 15
 */
INLINE void ADC1_disCalibProtCh15(void)
{
  ADC1->CALPEN.bit.CALPEN15 = 0u;
}

/** \brief Enable Calibration Protection Channel 16
 */
INLINE void ADC1_enCalibProtCh16(void)
{
  ADC1->CALPEN.bit.CALPEN16 = 1u;
}

/** \brief Disable Calibration Protection Channel 16
 */
INLINE void ADC1_disCalibProtCh16(void)
{
  ADC1->CALPEN.bit.CALPEN16 = 0u;
}

/** \brief Enable Calibration Protection Channel 17
 */
INLINE void ADC1_enCalibProtCh17(void)
{
  ADC1->CALPEN.bit.CALPEN17 = 1u;
}

/** \brief Disable Calibration Protection Channel 17
 */
INLINE void ADC1_disCalibProtCh17(void)
{
  ADC1->CALPEN.bit.CALPEN17 = 0u;
}

/** \brief Enable Calibration Protection Channel 18
 */
INLINE void ADC1_enCalibProtCh18(void)
{
  ADC1->CALPEN.bit.CALPEN18 = 1u;
}

/** \brief Disable Calibration Protection Channel 18
 */
INLINE void ADC1_disCalibProtCh18(void)
{
  ADC1->CALPEN.bit.CALPEN18 = 0u;
}

/** \brief Enable Calibration Protection Channel 19
 */
INLINE void ADC1_enCalibProtCh19(void)
{
  ADC1->CALPEN.bit.CALPEN19 = 1u;
}

/** \brief Disable Calibration Protection Channel 19
 */
INLINE void ADC1_disCalibProtCh19(void)
{
  ADC1->CALPEN.bit.CALPEN19 = 0u;
}

/** \brief Enable Calibration Protection Channel 20
 */
INLINE void ADC1_enCalibProtCh20(void)
{
  ADC1->CALPEN.bit.CALPEN20 = 1u;
}

/** \brief Disable Calibration Protection Channel 20
 */
INLINE void ADC1_disCalibProtCh20(void)
{
  ADC1->CALPEN.bit.CALPEN20 = 0u;
}

/** \brief Enable Calibration Protection Channel 21
 */
INLINE void ADC1_enCalibProtCh21(void)
{
  ADC1->CALPEN.bit.CALPEN21 = 1u;
}

/** \brief Disable Calibration Protection Channel 21
 */
INLINE void ADC1_disCalibProtCh21(void)
{
  ADC1->CALPEN.bit.CALPEN21 = 0u;
}

/** \brief Enable Calibration Protection Channel 22
 */
INLINE void ADC1_enCalibProtCh22(void)
{
  ADC1->CALPEN.bit.CALPEN22 = 1u;
}

/** \brief Disable Calibration Protection Channel 22
 */
INLINE void ADC1_disCalibProtCh22(void)
{
  ADC1->CALPEN.bit.CALPEN22 = 0u;
}

/** \brief Enable Calibration Protection Channel 23
 */
INLINE void ADC1_enCalibProtCh23(void)
{
  ADC1->CALPEN.bit.CALPEN23 = 1u;
}

/** \brief Disable Calibration Protection Channel 23
 */
INLINE void ADC1_disCalibProtCh23(void)
{
  ADC1->CALPEN.bit.CALPEN23 = 0u;
}

/** \brief Enable Calibration Protection Channel 24
 */
INLINE void ADC1_enCalibProtCh24(void)
{
  ADC1->CALPEN.bit.CALPEN24 = 1u;
}

/** \brief Disable Calibration Protection Channel 24
 */
INLINE void ADC1_disCalibProtCh24(void)
{
  ADC1->CALPEN.bit.CALPEN24 = 0u;
}

/** \brief Enable Calibration Protection Channel 25
 */
INLINE void ADC1_enCalibProtCh25(void)
{
  ADC1->CALPEN.bit.CALPEN25 = 1u;
}

/** \brief Disable Calibration Protection Channel 25
 */
INLINE void ADC1_disCalibProtCh25(void)
{
  ADC1->CALPEN.bit.CALPEN25 = 0u;
}

/** \brief Enable Calibration Protection Channel 26
 */
INLINE void ADC1_enCalibProtCh26(void)
{
  ADC1->CALPEN.bit.CALPEN26 = 1u;
}

/** \brief Disable Calibration Protection Channel 26
 */
INLINE void ADC1_disCalibProtCh26(void)
{
  ADC1->CALPEN.bit.CALPEN26 = 0u;
}

/** \brief Set Filter 0 Coefficient
 *
 *  \param u8_value Filter 0 Coefficient
 */
INLINE void ADC1_setFilter0Coeff(uint8 u8_value)
{
  ADC1->FILTCFG.bit.COEF_A0 = u8_value;
}

/** \brief Get Filter 0 Coefficient
 *
 * \return uint8 Filter 0 Coefficient
 */
INLINE uint8 ADC1_getFilter0Coeff(void)
{
  return (uint8)ADC1->FILTCFG.bit.COEF_A0;
}

/** \brief Set Filter 1 Coefficient
 *
 *  \param u8_value Filter 1 Coefficient
 */
INLINE void ADC1_setFilter1Coeff(uint8 u8_value)
{
  ADC1->FILTCFG.bit.COEF_A1 = u8_value;
}

/** \brief Get Filter 1 Coefficient
 *
 * \return uint8 Filter 1 Coefficient
 */
INLINE uint8 ADC1_getFilter1Coeff(void)
{
  return (uint8)ADC1->FILTCFG.bit.COEF_A1;
}

/** \brief Set Filter 2 Coefficient
 *
 *  \param u8_value Filter 2 Coefficient
 */
INLINE void ADC1_setFilter2Coeff(uint8 u8_value)
{
  ADC1->FILTCFG.bit.COEF_A2 = u8_value;
}

/** \brief Get Filter 2 Coefficient
 *
 * \return uint8 Filter 2 Coefficient
 */
INLINE uint8 ADC1_getFilter2Coeff(void)
{
  return (uint8)ADC1->FILTCFG.bit.COEF_A2;
}

/** \brief Set Filter 3 Coefficient
 *
 *  \param u8_value Filter 3 Coefficient
 */
INLINE void ADC1_setFilter3Coeff(uint8 u8_value)
{
  ADC1->FILTCFG.bit.COEF_A3 = u8_value;
}

/** \brief Get Filter 3 Coefficient
 *
 * \return uint8 Filter 3 Coefficient
 */
INLINE uint8 ADC1_getFilter3Coeff(void)
{
  return (uint8)ADC1->FILTCFG.bit.COEF_A3;
}

/** \brief Get Result Value Filter 0
 *
 * \return uint16 Result Value Filter 0
 */
INLINE uint16 ADC1_getFilter0Result(void)
{
  return (uint16)ADC1->FIL0.bit.FILRESULT;
}

/** \brief Get Result Value Filter 1
 *
 * \return uint16 Result Value Filter 1
 */
INLINE uint16 ADC1_getFilter1Result(void)
{
  return (uint16)ADC1->FIL1.bit.FILRESULT;
}

/** \brief Get Result Value Filter 2
 *
 * \return uint16 Result Value Filter 2
 */
INLINE uint16 ADC1_getFilter2Result(void)
{
  return (uint16)ADC1->FIL2.bit.FILRESULT;
}

/** \brief Get Result Value Filter 3
 *
 * \return uint16 Result Value Filter 3
 */
INLINE uint16 ADC1_getFilter3Result(void)
{
  return (uint16)ADC1->FIL3.bit.FILRESULT;
}

/** \brief Get Filter 0 Event flag
 *
 * \return uint8 Filter 0 Event flag
 */
INLINE uint8 ADC1_getFilter0Sts(void)
{
  return (uint8)ADC1->FILSTAT.bit.FIL0;
}

/** \brief Get Filter 1 Event flag
 *
 * \return uint8 Filter 1 Event flag
 */
INLINE uint8 ADC1_getFilter1Sts(void)
{
  return (uint8)ADC1->FILSTAT.bit.FIL1;
}

/** \brief Get Filter 2 Event flag
 *
 * \return uint8 Filter 2 Event flag
 */
INLINE uint8 ADC1_getFilter2Sts(void)
{
  return (uint8)ADC1->FILSTAT.bit.FIL2;
}

/** \brief Get Filter 3 Event flag
 *
 * \return uint8 Filter 3 Event flag
 */
INLINE uint8 ADC1_getFilter3Sts(void)
{
  return (uint8)ADC1->FILSTAT.bit.FIL3;
}

/** \brief Clear Filter 0 Event flag
 */
INLINE void ADC1_clrFilter0Sts(void)
{
  ADC1->FILSTATCLR.bit.FIL0CLR = 1u;
}

/** \brief Clear Filter 1 Event flag
 */
INLINE void ADC1_clrFilter1Sts(void)
{
  ADC1->FILSTATCLR.bit.FIL1CLR = 1u;
}

/** \brief Clear Filter 2 Event flag
 */
INLINE void ADC1_clrFilter2Sts(void)
{
  ADC1->FILSTATCLR.bit.FIL2CLR = 1u;
}

/** \brief Clear Filter 3 Event flag
 */
INLINE void ADC1_clrFilter3Sts(void)
{
  ADC1->FILSTATCLR.bit.FIL3CLR = 1u;
}

/** \brief Set Filter 0 Event flag
 */
INLINE void ADC1_setFilter0Sts(void)
{
  ADC1->FILSTATSET.bit.FIL0SET = 1u;
}

/** \brief Set Filter 1 Event flag
 */
INLINE void ADC1_setFilter1Sts(void)
{
  ADC1->FILSTATSET.bit.FIL1SET = 1u;
}

/** \brief Set Filter 2 Event flag
 */
INLINE void ADC1_setFilter2Sts(void)
{
  ADC1->FILSTATSET.bit.FIL2SET = 1u;
}

/** \brief Set Filter 3 Event flag
 */
INLINE void ADC1_setFilter3Sts(void)
{
  ADC1->FILSTATSET.bit.FIL3SET = 1u;
}

/** \brief Get Result Value Channel 0
 *
 * \return uint16 Result Value Channel 0
 */
INLINE uint16 ADC1_getCh0Result(void)
{
  return (uint16)ADC1->RES0.bit.RESULT;
}

/** \brief Get Result Valid Flag Channel 0
 *
 * \return uint8 Result Valid Flag Channel 0
 */
INLINE uint8 ADC1_getCh0ResultValidSts(void)
{
  return (uint8)ADC1->RES0.bit.VALID;
}

/** \brief Get Result Value Channel 1
 *
 * \return uint16 Result Value Channel 1
 */
INLINE uint16 ADC1_getCh1Result(void)
{
  return (uint16)ADC1->RES1.bit.RESULT;
}

/** \brief Get Result Valid Flag Channel 1
 *
 * \return uint8 Result Valid Flag Channel 1
 */
INLINE uint8 ADC1_getCh1ResultValidSts(void)
{
  return (uint8)ADC1->RES1.bit.VALID;
}

/** \brief Get Result Value Channel 2
 *
 * \return uint16 Result Value Channel 2
 */
INLINE uint16 ADC1_getCh2Result(void)
{
  return (uint16)ADC1->RES2.bit.RESULT;
}

/** \brief Get Result Valid Flag Channel 2
 *
 * \return uint8 Result Valid Flag Channel 2
 */
INLINE uint8 ADC1_getCh2ResultValidSts(void)
{
  return (uint8)ADC1->RES2.bit.VALID;
}

/** \brief Get Result Value Channel 3
 *
 * \return uint16 Result Value Channel 3
 */
INLINE uint16 ADC1_getCh3Result(void)
{
  return (uint16)ADC1->RES3.bit.RESULT;
}

/** \brief Get Result Valid Flag Channel 3
 *
 * \return uint8 Result Valid Flag Channel 3
 */
INLINE uint8 ADC1_getCh3ResultValidSts(void)
{
  return (uint8)ADC1->RES3.bit.VALID;
}

/** \brief Get Result Value Channel 4
 *
 * \return uint16 Result Value Channel 4
 */
INLINE uint16 ADC1_getCh4Result(void)
{
  return (uint16)ADC1->RES4.bit.RESULT;
}

/** \brief Get Result Valid Flag Channel 4
 *
 * \return uint8 Result Valid Flag Channel 4
 */
INLINE uint8 ADC1_getCh4ResultValidSts(void)
{
  return (uint8)ADC1->RES4.bit.VALID;
}

/** \brief Get Result Value Channel 5
 *
 * \return uint16 Result Value Channel 5
 */
INLINE uint16 ADC1_getCh5Result(void)
{
  return (uint16)ADC1->RES5.bit.RESULT;
}

/** \brief Get Result Valid Flag Channel 5
 *
 * \return uint8 Result Valid Flag Channel 5
 */
INLINE uint8 ADC1_getCh5ResultValidSts(void)
{
  return (uint8)ADC1->RES5.bit.VALID;
}

/** \brief Get Result Value Channel 6
 *
 * \return uint16 Result Value Channel 6
 */
INLINE uint16 ADC1_getCh6Result(void)
{
  return (uint16)ADC1->RES6.bit.RESULT;
}

/** \brief Get Result Valid Flag Channel 6
 *
 * \return uint8 Result Valid Flag Channel 6
 */
INLINE uint8 ADC1_getCh6ResultValidSts(void)
{
  return (uint8)ADC1->RES6.bit.VALID;
}

/** \brief Get Result Value Channel 7
 *
 * \return uint16 Result Value Channel 7
 */
INLINE uint16 ADC1_getCh7Result(void)
{
  return (uint16)ADC1->RES7.bit.RESULT;
}

/** \brief Get Result Valid Flag Channel 7
 *
 * \return uint8 Result Valid Flag Channel 7
 */
INLINE uint8 ADC1_getCh7ResultValidSts(void)
{
  return (uint8)ADC1->RES7.bit.VALID;
}

/** \brief Get Result Value Channel 8
 *
 * \return uint16 Result Value Channel 8
 */
INLINE uint16 ADC1_getCh8Result(void)
{
  return (uint16)ADC1->RES8.bit.RESULT;
}

/** \brief Get Result Valid Flag Channel 8
 *
 * \return uint8 Result Valid Flag Channel 8
 */
INLINE uint8 ADC1_getCh8ResultValidSts(void)
{
  return (uint8)ADC1->RES8.bit.VALID;
}

/** \brief Get Result Value Channel 9
 *
 * \return uint16 Result Value Channel 9
 */
INLINE uint16 ADC1_getCh9Result(void)
{
  return (uint16)ADC1->RES9.bit.RESULT;
}

/** \brief Get Result Valid Flag Channel 9
 *
 * \return uint8 Result Valid Flag Channel 9
 */
INLINE uint8 ADC1_getCh9ResultValidSts(void)
{
  return (uint8)ADC1->RES9.bit.VALID;
}

/** \brief Get Result Value Channel 10
 *
 * \return uint16 Result Value Channel 10
 */
INLINE uint16 ADC1_getCh10Result(void)
{
  return (uint16)ADC1->RES10.bit.RESULT;
}

/** \brief Get Result Valid Flag Channel 10
 *
 * \return uint8 Result Valid Flag Channel 10
 */
INLINE uint8 ADC1_getCh10ResultValidSts(void)
{
  return (uint8)ADC1->RES10.bit.VALID;
}

/** \brief Get Result Value Channel 11
 *
 * \return uint16 Result Value Channel 11
 */
INLINE uint16 ADC1_getCh11Result(void)
{
  return (uint16)ADC1->RES11.bit.RESULT;
}

/** \brief Get Result Valid Flag Channel 11
 *
 * \return uint8 Result Valid Flag Channel 11
 */
INLINE uint8 ADC1_getCh11ResultValidSts(void)
{
  return (uint8)ADC1->RES11.bit.VALID;
}

/** \brief Get Result Value Channel 12
 *
 * \return uint16 Result Value Channel 12
 */
INLINE uint16 ADC1_getCh12Result(void)
{
  return (uint16)ADC1->RES12.bit.RESULT;
}

/** \brief Get Result Valid Flag Channel 12
 *
 * \return uint8 Result Valid Flag Channel 12
 */
INLINE uint8 ADC1_getCh12ResultValidSts(void)
{
  return (uint8)ADC1->RES12.bit.VALID;
}

/** \brief Get Result Value Channel 13
 *
 * \return uint16 Result Value Channel 13
 */
INLINE uint16 ADC1_getCh13Result(void)
{
  return (uint16)ADC1->RES13.bit.RESULT;
}

/** \brief Get Result Valid Flag Channel 13
 *
 * \return uint8 Result Valid Flag Channel 13
 */
INLINE uint8 ADC1_getCh13ResultValidSts(void)
{
  return (uint8)ADC1->RES13.bit.VALID;
}

/** \brief Get Result Value Channel 14
 *
 * \return uint16 Result Value Channel 14
 */
INLINE uint16 ADC1_getCh14Result(void)
{
  return (uint16)ADC1->RES14.bit.RESULT;
}

/** \brief Get Result Valid Flag Channel 14
 *
 * \return uint8 Result Valid Flag Channel 14
 */
INLINE uint8 ADC1_getCh14ResultValidSts(void)
{
  return (uint8)ADC1->RES14.bit.VALID;
}

/** \brief Get Result Value Channel 15
 *
 * \return uint16 Result Value Channel 15
 */
INLINE uint16 ADC1_getCh15Result(void)
{
  return (uint16)ADC1->RES15.bit.RESULT;
}

/** \brief Get Result Valid Flag Channel 15
 *
 * \return uint8 Result Valid Flag Channel 15
 */
INLINE uint8 ADC1_getCh15ResultValidSts(void)
{
  return (uint8)ADC1->RES15.bit.VALID;
}

/** \brief Get Result Value Channel 16
 *
 * \return uint16 Result Value Channel 16
 */
INLINE uint16 ADC1_getCh16Result(void)
{
  return (uint16)ADC1->RES16.bit.RESULT;
}

/** \brief Get Result Valid Flag Channel 16
 *
 * \return uint8 Result Valid Flag Channel 16
 */
INLINE uint8 ADC1_getCh16ResultValidSts(void)
{
  return (uint8)ADC1->RES16.bit.VALID;
}

/** \brief Get Result Value Channel 17
 *
 * \return uint16 Result Value Channel 17
 */
INLINE uint16 ADC1_getCh17Result(void)
{
  return (uint16)ADC1->RES17.bit.RESULT;
}

/** \brief Get Result Valid Flag Channel 17
 *
 * \return uint8 Result Valid Flag Channel 17
 */
INLINE uint8 ADC1_getCh17ResultValidSts(void)
{
  return (uint8)ADC1->RES17.bit.VALID;
}

/** \brief Get Result Value Channel 18
 *
 * \return uint16 Result Value Channel 18
 */
INLINE uint16 ADC1_getCh18Result(void)
{
  return (uint16)ADC1->RES18.bit.RESULT;
}

/** \brief Get Result Valid Flag Channel 18
 *
 * \return uint8 Result Valid Flag Channel 18
 */
INLINE uint8 ADC1_getCh18ResultValidSts(void)
{
  return (uint8)ADC1->RES18.bit.VALID;
}

/** \brief Get Result Value Channel 19
 *
 * \return uint16 Result Value Channel 19
 */
INLINE uint16 ADC1_getCh19Result(void)
{
  return (uint16)ADC1->RES19.bit.RESULT;
}

/** \brief Get Result Valid Flag Channel 19
 *
 * \return uint8 Result Valid Flag Channel 19
 */
INLINE uint8 ADC1_getCh19ResultValidSts(void)
{
  return (uint8)ADC1->RES19.bit.VALID;
}

/** \brief Set Compare Channel 0 configuration
 *
 *  \param s_value Compare Channel 0 configuration
 */
INLINE void ADC1_setCmp0Config(tADC1_CMPCFGx s_value)
{
  ADC1->CMPCFG0.reg = (uint32)s_value.reg;
}

/** \brief Set Compare Channel 1 configuration
 *
 *  \param s_value Compare Channel 1 configuration
 */
INLINE void ADC1_setCmp1Config(tADC1_CMPCFGx s_value)
{
  ADC1->CMPCFG1.reg = (uint32)s_value.reg;
}

/** \brief Set Compare Channel 2 configuration
 *
 *  \param s_value Compare Channel 2 configuration
 */
INLINE void ADC1_setCmp2Config(tADC1_CMPCFGx s_value)
{
  ADC1->CMPCFG2.reg = (uint32)s_value.reg;
}

/** \brief Set Compare Channel 3 configuration
 *
 *  \param s_value Compare Channel 3 configuration
 */
INLINE void ADC1_setCmp3Config(tADC1_CMPCFGx s_value)
{
  ADC1->CMPCFG3.reg = (uint32)s_value.reg;
}

/** \brief Get Compare 0 Upper Threshold Interrupt Status
 *
 * \return uint8 Compare 0 Upper Threshold Interrupt Status
 */
INLINE uint8 ADC1_getCmp0UpIntSts(void)
{
  return (uint8)ADC1->CMPSTAT.bit.CMP_UP0_IS;
}

/** \brief Get Compare 1 Upper Threshold Interrupt Status
 *
 * \return uint8 Compare 1 Upper Threshold Interrupt Status
 */
INLINE uint8 ADC1_getCmp1UpIntSts(void)
{
  return (uint8)ADC1->CMPSTAT.bit.CMP_UP1_IS;
}

/** \brief Get Compare 2 Upper Threshold Interrupt Status
 *
 * \return uint8 Compare 2 Upper Threshold Interrupt Status
 */
INLINE uint8 ADC1_getCmp2UpIntSts(void)
{
  return (uint8)ADC1->CMPSTAT.bit.CMP_UP2_IS;
}

/** \brief Get Compare 3 Upper Threshold Interrupt Status
 *
 * \return uint8 Compare 3 Upper Threshold Interrupt Status
 */
INLINE uint8 ADC1_getCmp3UpIntSts(void)
{
  return (uint8)ADC1->CMPSTAT.bit.CMP_UP3_IS;
}

/** \brief Get Compare 0 Upper Threshold Status
 *
 * \return uint8 Compare 0 Upper Threshold Status
 */
INLINE uint8 ADC1_getCmp0UpThSts(void)
{
  return (uint8)ADC1->CMPSTAT.bit.CMP_UP0_STS;
}

/** \brief Get Compare 1 Upper Threshold Status
 *
 * \return uint8 Compare 1 Upper Threshold Status
 */
INLINE uint8 ADC1_getCmp1UpThSts(void)
{
  return (uint8)ADC1->CMPSTAT.bit.CMP_UP1_STS;
}

/** \brief Get Compare 2 Upper Threshold Status
 *
 * \return uint8 Compare 2 Upper Threshold Status
 */
INLINE uint8 ADC1_getCmp2UpThSts(void)
{
  return (uint8)ADC1->CMPSTAT.bit.CMP_UP2_STS;
}

/** \brief Get Compare 3 Upper Threshold Status
 *
 * \return uint8 Compare 3 Upper Threshold Status
 */
INLINE uint8 ADC1_getCmp3UpThSts(void)
{
  return (uint8)ADC1->CMPSTAT.bit.CMP_UP3_STS;
}

/** \brief Get Compare 0 Lower Threshold Interrupt Status
 *
 * \return uint8 Compare 0 Lower Threshold Interrupt Status
 */
INLINE uint8 ADC1_getCmp0LoIntSts(void)
{
  return (uint8)ADC1->CMPSTAT.bit.CMP_LO0_IS;
}

/** \brief Get Compare 1 Lower Threshold Interrupt Status
 *
 * \return uint8 Compare 1 Lower Threshold Interrupt Status
 */
INLINE uint8 ADC1_getCmp1LoIntSts(void)
{
  return (uint8)ADC1->CMPSTAT.bit.CMP_LO1_IS;
}

/** \brief Get Compare 2 Lower Threshold Interrupt Status
 *
 * \return uint8 Compare 2 Lower Threshold Interrupt Status
 */
INLINE uint8 ADC1_getCmp2LoIntSts(void)
{
  return (uint8)ADC1->CMPSTAT.bit.CMP_LO2_IS;
}

/** \brief Get Compare 3 Lower Threshold Interrupt Status
 *
 * \return uint8 Compare 3 Lower Threshold Interrupt Status
 */
INLINE uint8 ADC1_getCmp3LoIntSts(void)
{
  return (uint8)ADC1->CMPSTAT.bit.CMP_LO3_IS;
}

/** \brief Get Compare 0 Lower Threshold Status
 *
 * \return uint8 Compare 0 Lower Threshold Status
 */
INLINE uint8 ADC1_getCmp0LoThSts(void)
{
  return (uint8)ADC1->CMPSTAT.bit.CMP_LO0_STS;
}

/** \brief Get Compare 1 Lower Threshold Status
 *
 * \return uint8 Compare 1 Lower Threshold Status
 */
INLINE uint8 ADC1_getCmp1LoThSts(void)
{
  return (uint8)ADC1->CMPSTAT.bit.CMP_LO1_STS;
}

/** \brief Get Compare 2 Lower Threshold Status
 *
 * \return uint8 Compare 2 Lower Threshold Status
 */
INLINE uint8 ADC1_getCmp2LoThSts(void)
{
  return (uint8)ADC1->CMPSTAT.bit.CMP_LO2_STS;
}

/** \brief Get Compare 3 Lower Threshold Status
 *
 * \return uint8 Compare 3 Lower Threshold Status
 */
INLINE uint8 ADC1_getCmp3LoThSts(void)
{
  return (uint8)ADC1->CMPSTAT.bit.CMP_LO3_STS;
}

/** \brief Clear Compare 0 Upper Threshold Interrupt Status
 */
INLINE void ADC1_clrCmp0UpIntSts(void)
{
  ADC1->CMPSTATCLR.bit.CMP_UP0_ISCLR = 1u;
}

/** \brief Clear Compare 1 Upper Threshold Interrupt Status
 */
INLINE void ADC1_clrCmp1UpIntSts(void)
{
  ADC1->CMPSTATCLR.bit.CMP_UP1_ISCLR = 1u;
}

/** \brief Clear Compare 2 Upper Threshold Interrupt Status
 */
INLINE void ADC1_clrCmp2UpIntSts(void)
{
  ADC1->CMPSTATCLR.bit.CMP_UP2_ISCLR = 1u;
}

/** \brief Clear Compare 3 Upper Threshold Interrupt Status
 */
INLINE void ADC1_clrCmp3UpIntSts(void)
{
  ADC1->CMPSTATCLR.bit.CMP_UP3_ISCLR = 1u;
}

/** \brief Clear Compare 0 Upper Threshold Status
 */
INLINE void ADC1_clrCmp0UpThSts(void)
{
  ADC1->CMPSTATCLR.bit.CMP_UP0_STSCLR = 1u;
}

/** \brief Clear Compare 1 Upper Threshold Status
 */
INLINE void ADC1_clrCmp1UpThSts(void)
{
  ADC1->CMPSTATCLR.bit.CMP_UP1_STSCLR = 1u;
}

/** \brief Clear Compare 2 Upper Threshold Status
 */
INLINE void ADC1_clrCmp2UpThSts(void)
{
  ADC1->CMPSTATCLR.bit.CMP_UP2_STSCLR = 1u;
}

/** \brief Clear Compare 3 Upper Threshold Status
 */
INLINE void ADC1_clrCmp3UpThSts(void)
{
  ADC1->CMPSTATCLR.bit.CMP_UP3_STSCLR = 1u;
}

/** \brief Clear Compare 0 Lower Threshold Interrupt Status
 */
INLINE void ADC1_clrCmp0LoIntSts(void)
{
  ADC1->CMPSTATCLR.bit.CMP_LO0_ISCLR = 1u;
}

/** \brief Clear Compare 1 Lower Threshold Interrupt Status
 */
INLINE void ADC1_clrCmp1LoIntSts(void)
{
  ADC1->CMPSTATCLR.bit.CMP_LO1_ISCLR = 1u;
}

/** \brief Clear Compare 2 Lower Threshold Interrupt Status
 */
INLINE void ADC1_clrCmp2LoIntSts(void)
{
  ADC1->CMPSTATCLR.bit.CMP_LO2_ISCLR = 1u;
}

/** \brief Clear Compare 3 Lower Threshold Interrupt Status
 */
INLINE void ADC1_clrCmp3LoIntSts(void)
{
  ADC1->CMPSTATCLR.bit.CMP_LO3_ISCLR = 1u;
}

/** \brief Clear Compare 0 Lower Threshold Status
 */
INLINE void ADC1_clrCmp0LoThSts(void)
{
  ADC1->CMPSTATCLR.bit.CMP_LO0_STSCLR = 1u;
}

/** \brief Clear Compare 1 Lower Threshold Status
 */
INLINE void ADC1_clrCmp1LoThSts(void)
{
  ADC1->CMPSTATCLR.bit.CMP_LO1_STSCLR = 1u;
}

/** \brief Clear Compare 2 Lower Threshold Status
 */
INLINE void ADC1_clrCmp2LoThSts(void)
{
  ADC1->CMPSTATCLR.bit.CMP_LO2_STSCLR = 1u;
}

/** \brief Clear Compare 3 Lower Threshold Status
 */
INLINE void ADC1_clrCmp3LoThSts(void)
{
  ADC1->CMPSTATCLR.bit.CMP_LO3_STSCLR = 1u;
}

/** \brief Set Compare 0 Upper Threshold Interrupt Status
 */
INLINE void ADC1_setCmp0UpIntSts(void)
{
  ADC1->CMPSTATSET.bit.CMP_UP0_ISSET = 1u;
}

/** \brief Set Compare 1 Upper Threshold Interrupt Status
 */
INLINE void ADC1_setCmp1UpIntSts(void)
{
  ADC1->CMPSTATSET.bit.CMP_UP1_ISSET = 1u;
}

/** \brief Set Compare 2 Upper Threshold Interrupt Status
 */
INLINE void ADC1_setCmp2UpIntSts(void)
{
  ADC1->CMPSTATSET.bit.CMP_UP2_ISSET = 1u;
}

/** \brief Set Compare 3 Upper Threshold Interrupt Status
 */
INLINE void ADC1_setCmp3UpIntSts(void)
{
  ADC1->CMPSTATSET.bit.CMP_UP3_ISSET = 1u;
}

/** \brief Set Compare 0 Upper Threshold Status
 */
INLINE void ADC1_setCmp0UpThSts(void)
{
  ADC1->CMPSTATSET.bit.CMP_UP0_STSSET = 1u;
}

/** \brief Set Compare 1 Upper Threshold Status
 */
INLINE void ADC1_setCmp1UpThSts(void)
{
  ADC1->CMPSTATSET.bit.CMP_UP1_STSSET = 1u;
}

/** \brief Set Compare 2 Upper Threshold Status
 */
INLINE void ADC1_setCmp2UpThSts(void)
{
  ADC1->CMPSTATSET.bit.CMP_UP2_STSSET = 1u;
}

/** \brief Set Compare 3 Upper Threshold Status
 */
INLINE void ADC1_setCmp3UpThSts(void)
{
  ADC1->CMPSTATSET.bit.CMP_UP3_STSSET = 1u;
}

/** \brief Set Compare 0 Lower Threshold Interrupt Status
 */
INLINE void ADC1_setCmp0LoIntSts(void)
{
  ADC1->CMPSTATSET.bit.CMP_LO0_ISSET = 1u;
}

/** \brief Set Compare 1 Lower Threshold Interrupt Status
 */
INLINE void ADC1_setCmp1LoIntSts(void)
{
  ADC1->CMPSTATSET.bit.CMP_LO1_ISSET = 1u;
}

/** \brief Set Compare 2 Lower Threshold Interrupt Status
 */
INLINE void ADC1_setCmp2LoIntSts(void)
{
  ADC1->CMPSTATSET.bit.CMP_LO2_ISSET = 1u;
}

/** \brief Set Compare 3 Lower Threshold Interrupt Status
 */
INLINE void ADC1_setCmp3LoIntSts(void)
{
  ADC1->CMPSTATSET.bit.CMP_LO3_ISSET = 1u;
}

/** \brief Set Compare 0 Lower Threshold Status
 */
INLINE void ADC1_setCmp0LoThSts(void)
{
  ADC1->CMPSTATSET.bit.CMP_LO0_STSSET = 1u;
}

/** \brief Set Compare 1 Lower Threshold Status
 */
INLINE void ADC1_setCmp1LoThSts(void)
{
  ADC1->CMPSTATSET.bit.CMP_LO1_STSSET = 1u;
}

/** \brief Set Compare 2 Lower Threshold Status
 */
INLINE void ADC1_setCmp2LoThSts(void)
{
  ADC1->CMPSTATSET.bit.CMP_LO2_STSSET = 1u;
}

/** \brief Set Compare 3 Lower Threshold Status
 */
INLINE void ADC1_setCmp3LoThSts(void)
{
  ADC1->CMPSTATSET.bit.CMP_LO3_STSSET = 1u;
}

/** \brief Enable Compare 0 Upper Threshold Interrupt
 */
INLINE void ADC1_enCmp0UpInt(void)
{
  ADC1->IEN0.bit.IEN_UP0 = 1u;
}

/** \brief Disable Compare 0 Upper Threshold Interrupt
 */
INLINE void ADC1_disCmp0UpInt(void)
{
  ADC1->IEN0.bit.IEN_UP0 = 0u;
}

/** \brief Enable Compare 1 Upper Threshold Interrupt
 */
INLINE void ADC1_enCmp1UpInt(void)
{
  ADC1->IEN0.bit.IEN_UP1 = 1u;
}

/** \brief Disable Compare 1 Upper Threshold Interrupt
 */
INLINE void ADC1_disCmp1UpInt(void)
{
  ADC1->IEN0.bit.IEN_UP1 = 0u;
}

/** \brief Enable Compare 2 Upper Threshold Interrupt
 */
INLINE void ADC1_enCmp2UpInt(void)
{
  ADC1->IEN0.bit.IEN_UP2 = 1u;
}

/** \brief Disable Compare 2 Upper Threshold Interrupt
 */
INLINE void ADC1_disCmp2UpInt(void)
{
  ADC1->IEN0.bit.IEN_UP2 = 0u;
}

/** \brief Enable Compare 3 Upper Threshold Interrupt
 */
INLINE void ADC1_enCmp3UpInt(void)
{
  ADC1->IEN0.bit.IEN_UP3 = 1u;
}

/** \brief Disable Compare 3 Upper Threshold Interrupt
 */
INLINE void ADC1_disCmp3UpInt(void)
{
  ADC1->IEN0.bit.IEN_UP3 = 0u;
}

/** \brief Enable Compare 0 Lower Threshold Interrupt
 */
INLINE void ADC1_enCmp0LoInt(void)
{
  ADC1->IEN0.bit.IEN_LO0 = 1u;
}

/** \brief Disable Compare 0 Lower Threshold Interrupt
 */
INLINE void ADC1_disCmp0LoInt(void)
{
  ADC1->IEN0.bit.IEN_LO0 = 0u;
}

/** \brief Enable Compare 1 Lower Threshold Interrupt
 */
INLINE void ADC1_enCmp1LoInt(void)
{
  ADC1->IEN0.bit.IEN_LO1 = 1u;
}

/** \brief Disable Compare 1 Lower Threshold Interrupt
 */
INLINE void ADC1_disCmp1LoInt(void)
{
  ADC1->IEN0.bit.IEN_LO1 = 0u;
}

/** \brief Enable Compare 2 Lower Threshold Interrupt
 */
INLINE void ADC1_enCmp2LoInt(void)
{
  ADC1->IEN0.bit.IEN_LO2 = 1u;
}

/** \brief Disable Compare 2 Lower Threshold Interrupt
 */
INLINE void ADC1_disCmp2LoInt(void)
{
  ADC1->IEN0.bit.IEN_LO2 = 0u;
}

/** \brief Enable Compare 3 Lower Threshold Interrupt
 */
INLINE void ADC1_enCmp3LoInt(void)
{
  ADC1->IEN0.bit.IEN_LO3 = 1u;
}

/** \brief Disable Compare 3 Lower Threshold Interrupt
 */
INLINE void ADC1_disCmp3LoInt(void)
{
  ADC1->IEN0.bit.IEN_LO3 = 0u;
}

/** \brief Enable Sequence 0 Interrupt
 */
INLINE void ADC1_enSeq0Int(void)
{
  ADC1->IEN0.bit.IEN_SQ0 = 1u;
}

/** \brief Disable Sequence 0 Interrupt
 */
INLINE void ADC1_disSeq0Int(void)
{
  ADC1->IEN0.bit.IEN_SQ0 = 0u;
}

/** \brief Enable Sequence 1 Interrupt
 */
INLINE void ADC1_enSeq1Int(void)
{
  ADC1->IEN0.bit.IEN_SQ1 = 1u;
}

/** \brief Disable Sequence 1 Interrupt
 */
INLINE void ADC1_disSeq1Int(void)
{
  ADC1->IEN0.bit.IEN_SQ1 = 0u;
}

/** \brief Enable Sequence 2 Interrupt
 */
INLINE void ADC1_enSeq2Int(void)
{
  ADC1->IEN0.bit.IEN_SQ2 = 1u;
}

/** \brief Disable Sequence 2 Interrupt
 */
INLINE void ADC1_disSeq2Int(void)
{
  ADC1->IEN0.bit.IEN_SQ2 = 0u;
}

/** \brief Enable Sequence 3 Interrupt
 */
INLINE void ADC1_enSeq3Int(void)
{
  ADC1->IEN0.bit.IEN_SQ3 = 1u;
}

/** \brief Disable Sequence 3 Interrupt
 */
INLINE void ADC1_disSeq3Int(void)
{
  ADC1->IEN0.bit.IEN_SQ3 = 0u;
}

/** \brief Enable Channel 0 Interrupt
 */
INLINE void ADC1_enCh0Int(void)
{
  ADC1->IEN0.bit.IEN_CH0 = 1u;
}

/** \brief Disable Channel 0 Interrupt
 */
INLINE void ADC1_disCh0Int(void)
{
  ADC1->IEN0.bit.IEN_CH0 = 0u;
}

/** \brief Enable Channel 1 Interrupt
 */
INLINE void ADC1_enCh1Int(void)
{
  ADC1->IEN0.bit.IEN_CH1 = 1u;
}

/** \brief Disable Channel 1 Interrupt
 */
INLINE void ADC1_disCh1Int(void)
{
  ADC1->IEN0.bit.IEN_CH1 = 0u;
}

/** \brief Enable Channel 2 Interrupt
 */
INLINE void ADC1_enCh2Int(void)
{
  ADC1->IEN0.bit.IEN_CH2 = 1u;
}

/** \brief Disable Channel 2 Interrupt
 */
INLINE void ADC1_disCh2Int(void)
{
  ADC1->IEN0.bit.IEN_CH2 = 0u;
}

/** \brief Enable Channel 3 Interrupt
 */
INLINE void ADC1_enCh3Int(void)
{
  ADC1->IEN0.bit.IEN_CH3 = 1u;
}

/** \brief Disable Channel 3 Interrupt
 */
INLINE void ADC1_disCh3Int(void)
{
  ADC1->IEN0.bit.IEN_CH3 = 0u;
}

/** \brief Enable Channel 4 Interrupt
 */
INLINE void ADC1_enCh4Int(void)
{
  ADC1->IEN0.bit.IEN_CH4 = 1u;
}

/** \brief Disable Channel 4 Interrupt
 */
INLINE void ADC1_disCh4Int(void)
{
  ADC1->IEN0.bit.IEN_CH4 = 0u;
}

/** \brief Enable Channel 5 Interrupt
 */
INLINE void ADC1_enCh5Int(void)
{
  ADC1->IEN0.bit.IEN_CH5 = 1u;
}

/** \brief Disable Channel 5 Interrupt
 */
INLINE void ADC1_disCh5Int(void)
{
  ADC1->IEN0.bit.IEN_CH5 = 0u;
}

/** \brief Enable Channel 6 Interrupt
 */
INLINE void ADC1_enCh6Int(void)
{
  ADC1->IEN0.bit.IEN_CH6 = 1u;
}

/** \brief Disable Channel 6 Interrupt
 */
INLINE void ADC1_disCh6Int(void)
{
  ADC1->IEN0.bit.IEN_CH6 = 0u;
}

/** \brief Enable Channel 7 Interrupt
 */
INLINE void ADC1_enCh7Int(void)
{
  ADC1->IEN0.bit.IEN_CH7 = 1u;
}

/** \brief Disable Channel 7 Interrupt
 */
INLINE void ADC1_disCh7Int(void)
{
  ADC1->IEN0.bit.IEN_CH7 = 0u;
}

/** \brief Enable Channel 8 Interrupt
 */
INLINE void ADC1_enCh8Int(void)
{
  ADC1->IEN0.bit.IEN_CH8 = 1u;
}

/** \brief Disable Channel 8 Interrupt
 */
INLINE void ADC1_disCh8Int(void)
{
  ADC1->IEN0.bit.IEN_CH8 = 0u;
}

/** \brief Enable Channel 9 Interrupt
 */
INLINE void ADC1_enCh9Int(void)
{
  ADC1->IEN0.bit.IEN_CH9 = 1u;
}

/** \brief Disable Channel 9 Interrupt
 */
INLINE void ADC1_disCh9Int(void)
{
  ADC1->IEN0.bit.IEN_CH9 = 0u;
}

/** \brief Enable Channel 10 Interrupt
 */
INLINE void ADC1_enCh10Int(void)
{
  ADC1->IEN0.bit.IEN_CH10 = 1u;
}

/** \brief Disable Channel 10 Interrupt
 */
INLINE void ADC1_disCh10Int(void)
{
  ADC1->IEN0.bit.IEN_CH10 = 0u;
}

/** \brief Enable Channel 11 Interrupt
 */
INLINE void ADC1_enCh11Int(void)
{
  ADC1->IEN0.bit.IEN_CH11 = 1u;
}

/** \brief Disable Channel 11 Interrupt
 */
INLINE void ADC1_disCh11Int(void)
{
  ADC1->IEN0.bit.IEN_CH11 = 0u;
}

/** \brief Enable Channel 12 Interrupt
 */
INLINE void ADC1_enCh12Int(void)
{
  ADC1->IEN0.bit.IEN_CH12 = 1u;
}

/** \brief Disable Channel 12 Interrupt
 */
INLINE void ADC1_disCh12Int(void)
{
  ADC1->IEN0.bit.IEN_CH12 = 0u;
}

/** \brief Enable Channel 13 Interrupt
 */
INLINE void ADC1_enCh13Int(void)
{
  ADC1->IEN0.bit.IEN_CH13 = 1u;
}

/** \brief Disable Channel 13 Interrupt
 */
INLINE void ADC1_disCh13Int(void)
{
  ADC1->IEN0.bit.IEN_CH13 = 0u;
}

/** \brief Enable Channel 14 Interrupt
 */
INLINE void ADC1_enCh14Int(void)
{
  ADC1->IEN0.bit.IEN_CH14 = 1u;
}

/** \brief Disable Channel 14 Interrupt
 */
INLINE void ADC1_disCh14Int(void)
{
  ADC1->IEN0.bit.IEN_CH14 = 0u;
}

/** \brief Enable Channel 15 Interrupt
 */
INLINE void ADC1_enCh15Int(void)
{
  ADC1->IEN0.bit.IEN_CH15 = 1u;
}

/** \brief Disable Channel 15 Interrupt
 */
INLINE void ADC1_disCh15Int(void)
{
  ADC1->IEN0.bit.IEN_CH15 = 0u;
}

/** \brief Enable Channel 16 Interrupt
 */
INLINE void ADC1_enCh16Int(void)
{
  ADC1->IEN0.bit.IEN_CH16 = 1u;
}

/** \brief Disable Channel 16 Interrupt
 */
INLINE void ADC1_disCh16Int(void)
{
  ADC1->IEN0.bit.IEN_CH16 = 0u;
}

/** \brief Enable Channel 17 Interrupt
 */
INLINE void ADC1_enCh17Int(void)
{
  ADC1->IEN0.bit.IEN_CH17 = 1u;
}

/** \brief Disable Channel 17 Interrupt
 */
INLINE void ADC1_disCh17Int(void)
{
  ADC1->IEN0.bit.IEN_CH17 = 0u;
}

/** \brief Enable Channel 18 Interrupt
 */
INLINE void ADC1_enCh18Int(void)
{
  ADC1->IEN0.bit.IEN_CH18 = 1u;
}

/** \brief Disable Channel 18 Interrupt
 */
INLINE void ADC1_disCh18Int(void)
{
  ADC1->IEN0.bit.IEN_CH18 = 0u;
}

/** \brief Enable Channel 19 Interrupt
 */
INLINE void ADC1_enCh19Int(void)
{
  ADC1->IEN0.bit.IEN_CH19 = 1u;
}

/** \brief Disable Channel 19 Interrupt
 */
INLINE void ADC1_disCh19Int(void)
{
  ADC1->IEN0.bit.IEN_CH19 = 0u;
}

/** \brief Enable Sequence 0 Wait for Read Interrupt
 */
INLINE void ADC1_enSeq0WaitForReadInt(void)
{
  ADC1->IEN1.bit.IEN_WFR0 = 1u;
}

/** \brief Disable Sequence 0 Wait for Read Interrupt
 */
INLINE void ADC1_disSeq0WaitForReadInt(void)
{
  ADC1->IEN1.bit.IEN_WFR0 = 0u;
}

/** \brief Enable Sequence 1 Wait for Read Interrupt
 */
INLINE void ADC1_enSeq1WaitForReadInt(void)
{
  ADC1->IEN1.bit.IEN_WFR1 = 1u;
}

/** \brief Disable Sequence 1 Wait for Read Interrupt
 */
INLINE void ADC1_disSeq1WaitForReadInt(void)
{
  ADC1->IEN1.bit.IEN_WFR1 = 0u;
}

/** \brief Enable Sequence 2 Wait for Read Interrupt
 */
INLINE void ADC1_enSeq2WaitForReadInt(void)
{
  ADC1->IEN1.bit.IEN_WFR2 = 1u;
}

/** \brief Disable Sequence 2 Wait for Read Interrupt
 */
INLINE void ADC1_disSeq2WaitForReadInt(void)
{
  ADC1->IEN1.bit.IEN_WFR2 = 0u;
}

/** \brief Enable Sequence 3 Wait for Read Interrupt
 */
INLINE void ADC1_enSeq3WaitForReadInt(void)
{
  ADC1->IEN1.bit.IEN_WFR3 = 1u;
}

/** \brief Disable Sequence 3 Wait for Read Interrupt
 */
INLINE void ADC1_disSeq3WaitForReadInt(void)
{
  ADC1->IEN1.bit.IEN_WFR3 = 0u;
}

/** \brief Enable Sequence 0 Collision Detection Interrupt
 */
INLINE void ADC1_enSeq0CollInt(void)
{
  ADC1->IEN1.bit.IEN_COLL0 = 1u;
}

/** \brief Disable Sequence 0 Collision Detection Interrupt
 */
INLINE void ADC1_disSeq0CollInt(void)
{
  ADC1->IEN1.bit.IEN_COLL0 = 0u;
}

/** \brief Enable Sequence 1 Collision Detection Interrupt
 */
INLINE void ADC1_enSeq1CollInt(void)
{
  ADC1->IEN1.bit.IEN_COLL1 = 1u;
}

/** \brief Disable Sequence 1 Collision Detection Interrupt
 */
INLINE void ADC1_disSeq1CollInt(void)
{
  ADC1->IEN1.bit.IEN_COLL1 = 0u;
}

/** \brief Enable Sequence 2 Collision Detection Interrupt
 */
INLINE void ADC1_enSeq2CollInt(void)
{
  ADC1->IEN1.bit.IEN_COLL2 = 1u;
}

/** \brief Disable Sequence 2 Collision Detection Interrupt
 */
INLINE void ADC1_disSeq2CollInt(void)
{
  ADC1->IEN1.bit.IEN_COLL2 = 0u;
}

/** \brief Enable Sequence 3 Collision Detection Interrupt
 */
INLINE void ADC1_enSeq3CollInt(void)
{
  ADC1->IEN1.bit.IEN_COLL3 = 1u;
}

/** \brief Disable Sequence 3 Collision Detection Interrupt
 */
INLINE void ADC1_disSeq3CollInt(void)
{
  ADC1->IEN1.bit.IEN_COLL3 = 0u;
}

/** \brief Get Channel 0 Interrupt Node Pointer
 *
 * \return uint8 Channel 0 Interrupt Node Pointer
 */
INLINE uint8 ADC1_getCh0IntNodePtr(void)
{
  return (uint8)ADC1->INP0.bit.INP_CH0;
}

/** \brief Get Channel 1 Interrupt Node Pointer
 *
 * \return uint8 Channel 1 Interrupt Node Pointer
 */
INLINE uint8 ADC1_getCh1IntNodePtr(void)
{
  return (uint8)ADC1->INP0.bit.INP_CH1;
}

/** \brief Get Channel 2 Interrupt Node Pointer
 *
 * \return uint8 Channel 2 Interrupt Node Pointer
 */
INLINE uint8 ADC1_getCh2IntNodePtr(void)
{
  return (uint8)ADC1->INP0.bit.INP_CH2;
}

/** \brief Get Channel 3 Interrupt Node Pointer
 *
 * \return uint8 Channel 3 Interrupt Node Pointer
 */
INLINE uint8 ADC1_getCh3IntNodePtr(void)
{
  return (uint8)ADC1->INP0.bit.INP_CH3;
}

/** \brief Get Channel 4 Interrupt Node Pointer
 *
 * \return uint8 Channel 4 Interrupt Node Pointer
 */
INLINE uint8 ADC1_getCh4IntNodePtr(void)
{
  return (uint8)ADC1->INP0.bit.INP_CH4;
}

/** \brief Get Channel 5 Interrupt Node Pointer
 *
 * \return uint8 Channel 5 Interrupt Node Pointer
 */
INLINE uint8 ADC1_getCh5IntNodePtr(void)
{
  return (uint8)ADC1->INP0.bit.INP_CH5;
}

/** \brief Get Channel 6 Interrupt Node Pointer
 *
 * \return uint8 Channel 6 Interrupt Node Pointer
 */
INLINE uint8 ADC1_getCh6IntNodePtr(void)
{
  return (uint8)ADC1->INP0.bit.INP_CH6;
}

/** \brief Get Channel 7 Interrupt Node Pointer
 *
 * \return uint8 Channel 7 Interrupt Node Pointer
 */
INLINE uint8 ADC1_getCh7IntNodePtr(void)
{
  return (uint8)ADC1->INP0.bit.INP_CH7;
}

/** \brief Get Channel 8 Interrupt Node Pointer
 *
 * \return uint8 Channel 8 Interrupt Node Pointer
 */
INLINE uint8 ADC1_getCh8IntNodePtr(void)
{
  return (uint8)ADC1->INP0.bit.INP_CH8;
}

/** \brief Get Channel 9 Interrupt Node Pointer
 *
 * \return uint8 Channel 9 Interrupt Node Pointer
 */
INLINE uint8 ADC1_getCh9IntNodePtr(void)
{
  return (uint8)ADC1->INP0.bit.INP_CH9;
}

/** \brief Get Channel 10 Interrupt Node Pointer
 *
 * \return uint8 Channel 10 Interrupt Node Pointer
 */
INLINE uint8 ADC1_getCh10IntNodePtr(void)
{
  return (uint8)ADC1->INP0.bit.INP_CH10;
}

/** \brief Get Channel 11 Interrupt Node Pointer
 *
 * \return uint8 Channel 11 Interrupt Node Pointer
 */
INLINE uint8 ADC1_getCh11IntNodePtr(void)
{
  return (uint8)ADC1->INP0.bit.INP_CH11;
}

/** \brief Get Channel 12 Interrupt Node Pointer
 *
 * \return uint8 Channel 12 Interrupt Node Pointer
 */
INLINE uint8 ADC1_getCh12IntNodePtr(void)
{
  return (uint8)ADC1->INP0.bit.INP_CH12;
}

/** \brief Get Channel 13 Interrupt Node Pointer
 *
 * \return uint8 Channel 13 Interrupt Node Pointer
 */
INLINE uint8 ADC1_getCh13IntNodePtr(void)
{
  return (uint8)ADC1->INP0.bit.INP_CH13;
}

/** \brief Get Channel 14 Interrupt Node Pointer
 *
 * \return uint8 Channel 14 Interrupt Node Pointer
 */
INLINE uint8 ADC1_getCh14IntNodePtr(void)
{
  return (uint8)ADC1->INP0.bit.INP_CH14;
}

/** \brief Get Channel 15 Interrupt Node Pointer
 *
 * \return uint8 Channel 15 Interrupt Node Pointer
 */
INLINE uint8 ADC1_getCh15IntNodePtr(void)
{
  return (uint8)ADC1->INP0.bit.INP_CH15;
}

/** \brief Get Channel 16 Interrupt Node Pointer
 *
 * \return uint8 Channel 16 Interrupt Node Pointer
 */
INLINE uint8 ADC1_getCh16IntNodePtr(void)
{
  return (uint8)ADC1->INP1.bit.INP_CH16;
}

/** \brief Get Channel 17 Interrupt Node Pointer
 *
 * \return uint8 Channel 17 Interrupt Node Pointer
 */
INLINE uint8 ADC1_getCh17IntNodePtr(void)
{
  return (uint8)ADC1->INP1.bit.INP_CH17;
}

/** \brief Get Channel 18 Interrupt Node Pointer
 *
 * \return uint8 Channel 18 Interrupt Node Pointer
 */
INLINE uint8 ADC1_getCh18IntNodePtr(void)
{
  return (uint8)ADC1->INP1.bit.INP_CH18;
}

/** \brief Get Channel 19 Interrupt Node Pointer
 *
 * \return uint8 Channel 19 Interrupt Node Pointer
 */
INLINE uint8 ADC1_getCh19IntNodePtr(void)
{
  return (uint8)ADC1->INP1.bit.INP_CH19;
}

/** \brief Get Compare Lo Interrupt Node Pointer
 *
 * \return uint8 Compare Lo Interrupt Node Pointer
 */
INLINE uint8 ADC1_getCmp0LoIntNodePtr(void)
{
  return (uint8)ADC1->INP2.bit.INP_CMP_LO0;
}

/** \brief Get Compare Lo Interrupt Node Pointer
 *
 * \return uint8 Compare Lo Interrupt Node Pointer
 */
INLINE uint8 ADC1_getCmp1LoIntNodePtr(void)
{
  return (uint8)ADC1->INP2.bit.INP_CMP_LO1;
}

/** \brief Get Compare Lo Interrupt Node Pointer
 *
 * \return uint8 Compare Lo Interrupt Node Pointer
 */
INLINE uint8 ADC1_getCmp2LoIntNodePtr(void)
{
  return (uint8)ADC1->INP2.bit.INP_CMP_LO2;
}

/** \brief Get Compare Lo Interrupt Node Pointer
 *
 * \return uint8 Compare Lo Interrupt Node Pointer
 */
INLINE uint8 ADC1_getCmp3LoIntNodePtr(void)
{
  return (uint8)ADC1->INP2.bit.INP_CMP_LO3;
}

/** \brief Get Compare Up Interrupt Node Pointer
 *
 * \return uint8 Compare Up Interrupt Node Pointer
 */
INLINE uint8 ADC1_getCmp0UpIntNodePtr(void)
{
  return (uint8)ADC1->INP2.bit.INP_CMP_UP0;
}

/** \brief Get Compare Up Interrupt Node Pointer
 *
 * \return uint8 Compare Up Interrupt Node Pointer
 */
INLINE uint8 ADC1_getCmp1UpIntNodePtr(void)
{
  return (uint8)ADC1->INP2.bit.INP_CMP_UP1;
}

/** \brief Get Compare Up Interrupt Node Pointer
 *
 * \return uint8 Compare Up Interrupt Node Pointer
 */
INLINE uint8 ADC1_getCmp2UpIntNodePtr(void)
{
  return (uint8)ADC1->INP2.bit.INP_CMP_UP2;
}

/** \brief Get Compare Up Interrupt Node Pointer
 *
 * \return uint8 Compare Up Interrupt Node Pointer
 */
INLINE uint8 ADC1_getCmp3UpIntNodePtr(void)
{
  return (uint8)ADC1->INP2.bit.INP_CMP_UP3;
}

/** \brief Get Sequence Interrupt Node Pointer
 *
 * \return uint8 Sequence Interrupt Node Pointer
 */
INLINE uint8 ADC1_getSeq0IntNodePtr(void)
{
  return (uint8)ADC1->INP3.bit.INP_SQ0;
}

/** \brief Get Sequence Interrupt Node Pointer
 *
 * \return uint8 Sequence Interrupt Node Pointer
 */
INLINE uint8 ADC1_getSeq1IntNodePtr(void)
{
  return (uint8)ADC1->INP3.bit.INP_SQ1;
}

/** \brief Get Sequence Interrupt Node Pointer
 *
 * \return uint8 Sequence Interrupt Node Pointer
 */
INLINE uint8 ADC1_getSeq2IntNodePtr(void)
{
  return (uint8)ADC1->INP3.bit.INP_SQ2;
}

/** \brief Get Sequence Interrupt Node Pointer
 *
 * \return uint8 Sequence Interrupt Node Pointer
 */
INLINE uint8 ADC1_getSeq3IntNodePtr(void)
{
  return (uint8)ADC1->INP3.bit.INP_SQ3;
}

/** \brief Get Collision Interrupt Node Pointer
 *
 * \return uint8 Collision Interrupt Node Pointer
 */
INLINE uint8 ADC1_getSeq0CollIntNodePtr(void)
{
  return (uint8)ADC1->INP3.bit.INP_COLL0;
}

/** \brief Get Collision Interrupt Node Pointer
 *
 * \return uint8 Collision Interrupt Node Pointer
 */
INLINE uint8 ADC1_getSeq1CollIntNodePtr(void)
{
  return (uint8)ADC1->INP3.bit.INP_COLL1;
}

/** \brief Get Collision Interrupt Node Pointer
 *
 * \return uint8 Collision Interrupt Node Pointer
 */
INLINE uint8 ADC1_getSeq2CollIntNodePtr(void)
{
  return (uint8)ADC1->INP3.bit.INP_COLL2;
}

/** \brief Get Collision Interrupt Node Pointer
 *
 * \return uint8 Collision Interrupt Node Pointer
 */
INLINE uint8 ADC1_getSeq3CollIntNodePtr(void)
{
  return (uint8)ADC1->INP3.bit.INP_COLL3;
}

/** \brief Get Wait for read  Interrupt Node Pointer
 *
 * \return uint8 Wait for read  Interrupt Node Pointer
 */
INLINE uint8 ADC1_getSeq0WaitForReadIntNodePtr(void)
{
  return (uint8)ADC1->INP3.bit.INP_WFR0;
}

/** \brief Get Wait for read  Interrupt Node Pointer
 *
 * \return uint8 Wait for read  Interrupt Node Pointer
 */
INLINE uint8 ADC1_getSeq1WaitForReadIntNodePtr(void)
{
  return (uint8)ADC1->INP3.bit.INP_WFR1;
}

/** \brief Get Wait for read  Interrupt Node Pointer
 *
 * \return uint8 Wait for read  Interrupt Node Pointer
 */
INLINE uint8 ADC1_getSeq2WaitForReadIntNodePtr(void)
{
  return (uint8)ADC1->INP3.bit.INP_WFR2;
}

/** \brief Get Wait for read  Interrupt Node Pointer
 *
 * \return uint8 Wait for read  Interrupt Node Pointer
 */
INLINE uint8 ADC1_getSeq3WaitForReadIntNodePtr(void)
{
  return (uint8)ADC1->INP3.bit.INP_WFR3;
}

/** \brief Set Sequence Shadow Transfer Selection
 *
 *  \param u8_value Sequence Shadow Transfer Selection
 */
INLINE void ADC1_setSeqHwShadowTrans(uint8 u8_value)
{
  ADC1->SHDCTR.bit.ST_SQSEL = u8_value;
}

/** \brief Get Sequence Shadow Transfer Selection
 *
 * \return uint8 Sequence Shadow Transfer Selection
 */
INLINE uint8 ADC1_getSeqHwShadowTrans(void)
{
  return (uint8)ADC1->SHDCTR.bit.ST_SQSEL;
}

/** \brief Set Trigger Shadow Transfer Selection
 *
 *  \param u8_value Trigger Shadow Transfer Selection
 */
INLINE void ADC1_setTriggHwShadowTrans(uint8 u8_value)
{
  ADC1->SHDCTR.bit.ST_TRGSEL = u8_value;
}

/** \brief Get Trigger Shadow Transfer Selection
 *
 * \return uint8 Trigger Shadow Transfer Selection
 */
INLINE uint8 ADC1_getTriggHwShadowTrans(void)
{
  return (uint8)ADC1->SHDCTR.bit.ST_TRGSEL;
}

/** \brief Set Gating Shadow Transfer Selection
 *
 *  \param u8_value Gating Shadow Transfer Selection
 */
INLINE void ADC1_setGateHwShadowTrans(uint8 u8_value)
{
  ADC1->SHDCTR.bit.ST_GTGSEL = u8_value;
}

/** \brief Get Gating Shadow Transfer Selection
 *
 * \return uint8 Gating Shadow Transfer Selection
 */
INLINE uint8 ADC1_getGateHwShadowTrans(void)
{
  return (uint8)ADC1->SHDCTR.bit.ST_GTGSEL;
}

/** \brief Enable Sequence Shadow Transfer Selection
 */
INLINE void ADC1_enSeqHwShadowTrans(void)
{
  ADC1->SHDCTR.bit.STE_SQSEL = 1u;
}

/** \brief Disable Sequence Shadow Transfer Selection
 */
INLINE void ADC1_disSeqHwShadowTrans(void)
{
  ADC1->SHDCTR.bit.STE_SQSEL = 0u;
}

/** \brief Enable Trigger Shadow Transfer Selection
 */
INLINE void ADC1_enTriggHwShadowTrans(void)
{
  ADC1->SHDCTR.bit.STE_TRGSEL = 1u;
}

/** \brief Disable Trigger Shadow Transfer Selection
 */
INLINE void ADC1_disTriggHwShadowTrans(void)
{
  ADC1->SHDCTR.bit.STE_TRGSEL = 0u;
}

/** \brief Enable Gating Shadow Transfer  Selection
 */
INLINE void ADC1_enGateHwShadowTrans(void)
{
  ADC1->SHDCTR.bit.STE_GTGSEL = 1u;
}

/** \brief Disable Gating Shadow Transfer  Selection
 */
INLINE void ADC1_disGateHwShadowTrans(void)
{
  ADC1->SHDCTR.bit.STE_GTGSEL = 0u;
}

/** \brief Set Sequence Software Shadow Transfer
 */
INLINE void ADC1_setSeqSwShadowTrans(void)
{
  ADC1->SHDCTR.bit.ST_SQSW = 1u;
}

/** \brief Get Sequence Software Shadow Transfer
 *
 * \return uint8 Sequence Software Shadow Transfer
 */
INLINE uint8 ADC1_getSeqSwShadowTrans(void)
{
  return (uint8)ADC1->SHDCTR.bit.ST_SQSW;
}

/** \brief Set Trigger Software Shadow Transfer
 */
INLINE void ADC1_setTriggSwShadowTrans(void)
{
  ADC1->SHDCTR.bit.ST_TRGSW = 1u;
}

/** \brief Get Trigger Software Shadow Transfer
 *
 * \return uint8 Trigger Software Shadow Transfer
 */
INLINE uint8 ADC1_getTriggSwShadowTrans(void)
{
  return (uint8)ADC1->SHDCTR.bit.ST_TRGSW;
}

/** \brief Set Gating Software Shadow Transfer
 */
INLINE void ADC1_setGateSwShadowTrans(void)
{
  ADC1->SHDCTR.bit.ST_GTGSW = 1u;
}

/** \brief Get Gating Software Shadow Transfer
 *
 * \return uint8 Gating Software Shadow Transfer
 */
INLINE uint8 ADC1_getGateSwShadowTrans(void)
{
  return (uint8)ADC1->SHDCTR.bit.ST_GTGSW;
}

/** \brief Enable Sequence Shadow Transfer
 */
INLINE void ADC1_enSeqSwShadowTrans(void)
{
  ADC1->SHDCTR.bit.STE_SQ = 1u;
}

/** \brief Disable Sequence Shadow Transfer
 */
INLINE void ADC1_disSeqSwShadowTrans(void)
{
  ADC1->SHDCTR.bit.STE_SQ = 0u;
}

/** \brief Enable Trigger Shadow Transfer
 */
INLINE void ADC1_enTriggSwShadowTrans(void)
{
  ADC1->SHDCTR.bit.STE_TRG = 1u;
}

/** \brief Disable Trigger Shadow Transfer
 */
INLINE void ADC1_disTriggSwShadowTrans(void)
{
  ADC1->SHDCTR.bit.STE_TRG = 0u;
}

/** \brief Enable Gating Shadow Transfer
 */
INLINE void ADC1_enGateSwShadowTrans(void)
{
  ADC1->SHDCTR.bit.STE_GTG = 1u;
}

/** \brief Disable Gating Shadow Transfer
 */
INLINE void ADC1_disGateSwShadowTrans(void)
{
  ADC1->SHDCTR.bit.STE_GTG = 0u;
}

/** \brief Set Calibration Offset analog input 1
 *
 *  \param u8_value Calibration Offset analog input 1
 */
INLINE void ADC1_setCalibOffsAnaIn1(uint8 u8_value)
{
  ADC1->CALAI1.bit.CALOFFS = u8_value;
}

/** \brief Get Calibration Offset analog input 1
 *
 * \return uint8 Calibration Offset analog input 1
 */
INLINE uint8 ADC1_getCalibOffsAnaIn1(void)
{
  return (uint8)ADC1->CALAI1.bit.CALOFFS;
}

/** \brief Set Calibration Gain analog input 1
 *
 * \param u16_value Calibration Gain analog input 1
 */
INLINE void ADC1_setCalibGainAnaIn1(uint16 u16_value)
{
  ADC1->CALAI1.bit.CALGAIN = u16_value;
}

/** \brief Get Calibration Gain analog input 1
 *
 *  \return uint16 Calibration Gain analog input 1
 */
INLINE uint16 ADC1_getCalibGainAnaIn1(void)
{
  return (uint16)ADC1->CALAI1.bit.CALGAIN;
}

/** \brief Set Calibration Offset analog input 3
 *
 *  \param u8_value Calibration Offset analog input 3
 */
INLINE void ADC1_setCalibOffsAnaIn3(uint8 u8_value)
{
  ADC1->CALAI3.bit.CALOFFS = u8_value;
}

/** \brief Get Calibration Offset analog input 3
 *
 *  \return uint8 Calibration Offset analog input 3
 */
INLINE uint8 ADC1_getCalibOffsAnaIn3(void)
{
  return (uint8)ADC1->CALAI3.bit.CALOFFS;
}

/** \brief Set Calibration Gain analog input 3
 *
 *  \param u16_value Calibration Gain analog input 3
 */
INLINE void ADC1_setCalibGainAnaIn3(uint16 u16_value)
{
  ADC1->CALAI3.bit.CALGAIN = u16_value;
}

/** \brief Get Calibration Gain analog input 3
 *
 *  \return uint16 Calibration Gain analog input 3
 */
INLINE uint16 ADC1_getCalibGainAnaIn3(void)
{
  return (uint16)ADC1->CALAI3.bit.CALGAIN;
}

/** \brief Set Calibration Offset analog input 5
 *
 *  \param u8_value Calibration Offset analog input 5
 */
INLINE void ADC1_setCalibOffsAnaIn5(uint8 u8_value)
{
  ADC1->CALAI5.bit.CALOFFS = u8_value;
}

/** \brief Get Calibration Offset analog input 5
 *
 *  \return uint8 Calibration Offset analog input 5
 */
INLINE uint8 ADC1_getCalibOffsAnaIn5(void)
{
  return (uint8)ADC1->CALAI5.bit.CALOFFS;
}

/** \brief Set Calibration Gain analog input 5
 *
 *  \param u16_value Calibration Gain analog input 5
 */
INLINE void ADC1_setCalibGainAnaIn5(uint16 u16_value)
{
  ADC1->CALAI5.bit.CALGAIN = u16_value;
}

/** \brief Get Calibration Gain analog input 5
 *
 *  \return uint16 Calibration Gain analog input 5
 */
INLINE uint16 ADC1_getCalibGainAnaIn5(void)
{
  return (uint16)ADC1->CALAI5.bit.CALGAIN;
}

/** \brief Set Calibration Offset analog input 7
 *
 *  \param u8_value Calibration Offset analog input 7
 */
INLINE void ADC1_setCalibOffsAnaIn7(uint8 u8_value)
{
  ADC1->CALAI7.bit.CALOFFS = u8_value;
}

/** \brief Get Calibration Offset analog input 7
 *
 *  \return uint8 Calibration Offset analog input 7
 */
INLINE uint8 ADC1_getCalibOffsAnaIn7(void)
{
  return (uint8)ADC1->CALAI7.bit.CALOFFS;
}

/** \brief Set Calibration Gain analog input 7
 *
 *  \param u16_value Calibration Gain analog input 7
 */
INLINE void ADC1_setCalibGainAnaIn7(uint16 u16_value)
{
  ADC1->CALAI7.bit.CALGAIN = u16_value;
}

/** \brief Get Calibration Gain analog input 7
 *
 *  \return uint16 Calibration Gain analog input 7
 */
INLINE uint16 ADC1_getCalibGainAnaIn7(void)
{
  return (uint16)ADC1->CALAI7.bit.CALGAIN;
}

/** \brief Set Calibration Offset analog input 9
 *
 *  \param u8_value Calibration Offset analog input 9
 */
INLINE void ADC1_setCalibOffsAnaIn9(uint8 u8_value)
{
  ADC1->CALAI9.bit.CALOFFS = u8_value;
}

/** \brief Get Calibration Offset analog input 9
 *
 *  \return uint8 Calibration Offset analog input 9
 */
INLINE uint8 ADC1_getCalibOffsAnaIn9(void)
{
  return (uint8)ADC1->CALAI9.bit.CALOFFS;
}

/** \brief Set Calibration Gain analog input 9
 *
 *  \param u16_value Calibration Gain analog input 9
 */
INLINE void ADC1_setCalibGainAnaIn9(uint16 u16_value)
{
  ADC1->CALAI9.bit.CALGAIN = u16_value;
}

/** \brief Get Calibration Gain analog input 9
 *
 *  \return uint16 Calibration Gain analog input 9
 */
INLINE uint16 ADC1_getCalibGainAnaIn9(void)
{
  return (uint16)ADC1->CALAI9.bit.CALGAIN;
}

/** \brief Set Calibration Offset analog input 11
 *
 *  \param u8_value Calibration Offset analog input 11
 */
INLINE void ADC1_setCalibOffsAnaIn11(uint8 u8_value)
{
  ADC1->CALAI11.bit.CALOFFS = u8_value;
}

/** \brief Get Calibration Offset analog input 11
 *
 *  \return uint8 Calibration Offset analog input 11
 */
INLINE uint8 ADC1_getCalibOffsAnaIn11(void)
{
  return (uint8)ADC1->CALAI11.bit.CALOFFS;
}

/** \brief Set Calibration Gain analog input 11
 *
 *  \param u16_value Calibration Gain analog input 11
 */
INLINE void ADC1_setCalibGainAnaIn11(uint16 u16_value)
{
  ADC1->CALAI11.bit.CALGAIN = u16_value;
}

/** \brief Get Calibration Gain analog input 11
 *
 *  \return uint16 Calibration Gain analog input 11
 */
INLINE uint16 ADC1_getCalibGainAnaIn11(void)
{
  return (uint16)ADC1->CALAI11.bit.CALGAIN;
}

/** \brief Set Calibration Offset analog input 13
 *
 *  \param u8_value Calibration Offset analog input 13
 */
INLINE void ADC1_setCalibOffsAnaIn13(uint8 u8_value)
{
  ADC1->CALAI13.bit.CALOFFS = u8_value;
}

/** \brief Get Calibration Offset analog input 13
 *
 *  \return uint8 Calibration Offset analog input 13
 */
INLINE uint8 ADC1_getCalibOffsAnaIn13(void)
{
  return (uint8)ADC1->CALAI13.bit.CALOFFS;
}

/** \brief Set Calibration Gain analog input 13
 *
 *  \param u16_value Calibration Gain analog input 13
 */
INLINE void ADC1_setCalibGainAnaIn13(uint16 u16_value)
{
  ADC1->CALAI13.bit.CALGAIN = u16_value;
}

/** \brief Get Calibration Gain analog input 13
 *
 *  \return uint16 Calibration Gain analog input 13
 */
INLINE uint16 ADC1_getCalibGainAnaIn13(void)
{
  return (uint16)ADC1->CALAI13.bit.CALGAIN;
}

/** \brief Set Calibration Offset analog input 15
 *
 *  \param u8_value Calibration Offset analog input 15
 */
INLINE void ADC1_setCalibOffsAnaIn15(uint8 u8_value)
{
  ADC1->CALAI15.bit.CALOFFS = u8_value;
}

/** \brief Get Calibration Offset analog input 15
 *
 *  \return uint8 Calibration Offset analog input 15
 */
INLINE uint8 ADC1_getCalibOffsAnaIn15(void)
{
  return (uint8)ADC1->CALAI15.bit.CALOFFS;
}

/** \brief Set Calibration Gain analog input 15
 *
 *  \param u16_value Calibration Gain analog input 15
 */
INLINE void ADC1_setCalibGainAnaIn15(uint16 u16_value)
{
  ADC1->CALAI15.bit.CALGAIN = u16_value;
}

/** \brief Get Calibration Gain analog input 15
 *
 *  \return uint16 Calibration Gain analog input 15
 */
INLINE uint16 ADC1_getCalibGainAnaIn15(void)
{
  return (uint16)ADC1->CALAI15.bit.CALGAIN;
}

/** \brief Set Calibration Offset analog input 16
 *
 *  \param u8_value Calibration Offset analog input 16
*/
INLINE void ADC1_setCalibOffsAnaIn16(uint8 u8_value)
{
  ADC1->CALAI16.bit.CALOFFS = u8_value;
}

/** \brief Get Calibration Offset analog input 16
 *
 *  \return uint8 Calibration Offset analog input 16
 */
INLINE uint8 ADC1_getCalibOffsAnaIn16(void)
{
  return (uint8)ADC1->CALAI16.bit.CALOFFS;
}

/** \brief Set Calibration Gain analog input 16
 *
 *  \param u16_value Calibration Gain analog input 16
 */
INLINE void ADC1_setCalibGainAnaIn16(uint16 u16_value)
{
  ADC1->CALAI16.bit.CALGAIN = u16_value;
}

/** \brief Get Calibration Gain analog input 16
 *
 *  \return uint16 Calibration Gain analog input 16
 */
INLINE uint16 ADC1_getCalibGainAnaIn16(void)
{
  return (uint16)ADC1->CALAI16.bit.CALGAIN;
}

/** \brief Set Calibration Offset analog input 17
 *
 *  \param u8_value Calibration Offset analog input 17
 */
INLINE void ADC1_setCalibOffsAnaIn17(uint8 u8_value)
{
  ADC1->CALAI17.bit.CALOFFS = u8_value;
}

/** \brief Get Calibration Offset analog input 17
 *
 *  \return uint8 Calibration Offset analog input 17
 */
INLINE uint8 ADC1_getCalibOffsAnaIn17(void)
{
  return (uint8)ADC1->CALAI17.bit.CALOFFS;
}

/** \brief Set Calibration Gain analog input 17
 *
 *  \param u16_value Calibration Gain analog input 17
 */
INLINE void ADC1_setCalibGainAnaIn17(uint16 u16_value)
{
  ADC1->CALAI17.bit.CALGAIN = u16_value;
}

/** \brief Get Calibration Gain analog input 17
 *
 *  \return uint16 Calibration Gain analog input 17
 */
INLINE uint16 ADC1_getCalibGainAnaIn17(void)
{
  return (uint16)ADC1->CALAI17.bit.CALGAIN;
}

/** \brief Set Calibration Offset analog input 18
 *
 *  \param u8_value Calibration Offset analog input 18
 */
INLINE void ADC1_setCalibOffsAnaIn18(uint8 u8_value)
{
  ADC1->CALAI18.bit.CALOFFS = u8_value;
}

/** \brief Get Calibration Offset analog input 18
 *
 *  \return uint8 Calibration Offset analog input 18
 */
INLINE uint8 ADC1_getCalibOffsAnaIn18(void)
{
  return (uint8)ADC1->CALAI18.bit.CALOFFS;
}

/** \brief Set Calibration Gain analog input 18
 *
 *  \param u16_value Calibration Gain analog input 18
 */
INLINE void ADC1_setCalibGainAnaIn18(uint16 u16_value)
{
  ADC1->CALAI18.bit.CALGAIN = u16_value;
}

/** \brief Get Calibration Gain analog input 18
 *
 *  \return uint16 Calibration Gain analog input 18
 */
INLINE uint16 ADC1_getCalibGainAnaIn18(void)
{
  return (uint16)ADC1->CALAI18.bit.CALGAIN;
}

/** \brief Set Calibration Offset analog input 19
 *
 *  \param u8_value Calibration Offset analog input 19
 */
INLINE void ADC1_setCalibOffsAnaIn19(uint8 u8_value)
{
  ADC1->CALAI19.bit.CALOFFS = u8_value;
}

/** \brief Get Calibration Offset analog input 19
 *
 *  \return uint8 Calibration Offset analog input 19
 */
INLINE uint8 ADC1_getCalibOffsAnaIn19(void)
{
  return (uint8)ADC1->CALAI19.bit.CALOFFS;
}

/** \brief Set Calibration Gain analog input 19
 *
 *  \param u16_value Calibration Gain analog input 19
 */
INLINE void ADC1_setCalibGainAnaIn19(uint16 u16_value)
{
  ADC1->CALAI19.bit.CALGAIN = u16_value;
}

/** \brief Get Calibration Gain analog input 19
 *
 *  \return uint16 Calibration Gain analog input 19
 */
INLINE uint16 ADC1_getCalibGainAnaIn19(void)
{
  return (uint16)ADC1->CALAI19.bit.CALGAIN;
}

/** \brief Set Calibration Offset analog input 20
 *
 *  \param u8_value Calibration Offset analog input 20
 */
INLINE void ADC1_setCalibOffsAnaIn20(uint8 u8_value)
{
  ADC1->CALAI20.bit.CALOFFS = u8_value;
}

/** \brief Get Calibration Offset analog input 20
 *
 *  \return uint8 Calibration Offset analog input 20
 */
INLINE uint8 ADC1_getCalibOffsAnaIn20(void)
{
  return (uint8)ADC1->CALAI20.bit.CALOFFS;
}

/** \brief Set Calibration Gain analog input 20
 *
 *  \param u16_value Calibration Gain analog input 20
 */
INLINE void ADC1_setCalibGainAnaIn20(uint16 u16_value)
{
  ADC1->CALAI20.bit.CALGAIN = u16_value;
}

/** \brief Get Calibration Gain analog input 20
 *
 *  \return uint16 Calibration Gain analog input 20
 */
INLINE uint16 ADC1_getCalibGainAnaIn20(void)
{
  return (uint16)ADC1->CALAI20.bit.CALGAIN;
}

/** \brief Set Calibration Offset analog input 21
 *
 *  \param u8_value Calibration Offset analog input 21
 */
INLINE void ADC1_setCalibOffsAnaIn21(uint8 u8_value)
{
  ADC1->CALAI21.bit.CALOFFS = u8_value;
}

/** \brief Get Calibration Offset analog input 21
 *
 *  \return uint8 Calibration Offset analog input 21
 */
INLINE uint8 ADC1_getCalibOffsAnaIn21(void)
{
  return (uint8)ADC1->CALAI21.bit.CALOFFS;
}

/** \brief Set Calibration Gain analog input 21
 *
 *  \param u16_value Calibration Gain analog input 21
 */
INLINE void ADC1_setCalibGainAnaIn21(uint16 u16_value)
{
  ADC1->CALAI21.bit.CALGAIN = u16_value;
}

/** \brief Get Calibration Gain analog input 21
 *
 *  \return uint16 Calibration Gain analog input 21
 */
INLINE uint16 ADC1_getCalibGainAnaIn21(void)
{
  return (uint16)ADC1->CALAI21.bit.CALGAIN;
}

/** \brief Set Calibration Offset analog input 22
 *
 *  \param u8_value Calibration Offset analog input 22
 */
INLINE void ADC1_setCalibOffsAnaIn22(uint8 u8_value)
{
  ADC1->CALAI22.bit.CALOFFS = u8_value;
}

/** \brief Get Calibration Offset analog input 22
 *
 *  \return uint8 Calibration Offset analog input 22
 */
INLINE uint8 ADC1_getCalibOffsAnaIn22(void)
{
  return (uint8)ADC1->CALAI22.bit.CALOFFS;
}

/** \brief Set Calibration Gain analog input 22
 *
 *  \param u16_value Calibration Gain analog input 22
 */
INLINE void ADC1_setCalibGainAnaIn22(uint16 u16_value)
{
  ADC1->CALAI22.bit.CALGAIN = u16_value;
}

/** \brief Get Calibration Gain analog input 22
 *
 *  \return uint16 Calibration Gain analog input 22
 */
INLINE uint16 ADC1_getCalibGainAnaIn22(void)
{
  return (uint16)ADC1->CALAI22.bit.CALGAIN;
}

/** \brief Set Calibration Offset analog input 23
 *
 *  \param u8_value Calibration Offset analog input 23
 */
INLINE void ADC1_setCalibOffsAnaIn23(uint8 u8_value)
{
  ADC1->CALAI23.bit.CALOFFS = u8_value;
}

/** \brief Get Calibration Offset analog input 23
 *
 *  \return uint8 Calibration Offset analog input 23
 */
INLINE uint8 ADC1_getCalibOffsAnaIn23(void)
{
  return (uint8)ADC1->CALAI23.bit.CALOFFS;
}

/** \brief Set Calibration Gain analog input 23
 *
 *  \param u16_value Calibration Gain analog input 23
 */
INLINE void ADC1_setCalibGainAnaIn23(uint16 u16_value)
{
  ADC1->CALAI23.bit.CALGAIN = u16_value;
}

/** \brief Get Calibration Gain analog input 23
 *
 *  \return uint16 Calibration Gain analog input 23
 */
INLINE uint16 ADC1_getCalibGainAnaIn23(void)
{
  return (uint16)ADC1->CALAI23.bit.CALGAIN;
}

/** \brief Set Calibration Offset analog input 24
 *
 *  \param u8_value Calibration Offset analog input 24
 */
INLINE void ADC1_setCalibOffsAnaIn24(uint8 u8_value)
{
  ADC1->CALAI24.bit.CALOFFS = u8_value;
}

/** \brief Get Calibration Offset analog input 24
 *
 *  \return uint8 Calibration Offset analog input 24
 */
INLINE uint8 ADC1_getCalibOffsAnaIn24(void)
{
  return (uint8)ADC1->CALAI24.bit.CALOFFS;
}

/** \brief Set Calibration Gain analog input 24
 *
 *  \param u16_value Calibration Gain analog input 24
 */
INLINE void ADC1_setCalibGainAnaIn24(uint16 u16_value)
{
  ADC1->CALAI24.bit.CALGAIN = u16_value;
}

/** \brief Get Calibration Gain analog input 24
 *
 *  \return uint16 Calibration Gain analog input 24
 */
INLINE uint16 ADC1_getCalibGainAnaIn24(void)
{
  return (uint16)ADC1->CALAI24.bit.CALGAIN;
}

/** \brief Set Calibration Offset analog input 25
 *
 *  \param u8_value Calibration Offset analog input 25
 */
INLINE void ADC1_setCalibOffsAnaIn25(uint8 u8_value)
{
  ADC1->CALAI25.bit.CALOFFS = u8_value;
}

/** \brief Get Calibration Offset analog input 25
 *
 *  \return uint8 Calibration Offset analog input 25
 */
INLINE uint8 ADC1_getCalibOffsAnaIn25(void)
{
  return (uint8)ADC1->CALAI25.bit.CALOFFS;
}

/** \brief Set Calibration Gain analog input 25
 *
 *  \param u16_value Calibration Gain analog input 25
 */
INLINE void ADC1_setCalibGainAnaIn25(uint16 u16_value)
{
  ADC1->CALAI25.bit.CALGAIN = u16_value;
}

/** \brief Get Calibration Gain analog input 25
 *
 *  \return uint16 Calibration Gain analog input 25
 */
INLINE uint16 ADC1_getCalibGainAnaIn25(void)
{
  return (uint16)ADC1->CALAI25.bit.CALGAIN;
}

/** \brief Set Calibration Offset analog input 26
 *
 *  \param u8_value Calibration Offset analog input 26
 */
INLINE void ADC1_setCalibOffsAnaIn26(uint8 u8_value)
{
  ADC1->CALAI26.bit.CALOFFS = u8_value;
}

/** \brief Get Calibration Offset analog input 26
 *
 *  \return uint8 Calibration Offset analog input 26
 */
INLINE uint8 ADC1_getCalibOffsAnaIn26(void)
{
  return (uint8)ADC1->CALAI26.bit.CALOFFS;
}

/** \brief Set Calibration Gain analog input 26
 *
 *  \param u16_value Calibration Gain analog input 26
 */
INLINE void ADC1_setCalibGainAnaIn26(uint16 u16_value)
{
  ADC1->CALAI26.bit.CALGAIN = u16_value;
}

/** \brief Get Calibration Gain analog input 26
 *
 *  \return uint16 Calibration Gain analog input 26
 */
INLINE uint16 ADC1_getCalibGainAnaIn26(void)
{
  return (uint16)ADC1->CALAI26.bit.CALGAIN;
}

/** \brief Enable VAREF
 */
INLINE void ARVG_enVAREF(void)
{
  ARVG->VAREF_CTRL.bit.EN = 1u;
}

/** \brief Disable VAREF
 */
INLINE void ARVG_disVAREF(void)
{
  ARVG->VAREF_CTRL.bit.EN = 0u;
}

/** \brief Enable VAREF Overcurrent Interrupt
 */
INLINE void ARVG_enVAREFOvercurrentInt(void)
{
  ARVG->VAREF_IEN.bit.OC_IEN = 1u;
}

/** \brief Disable VAREF Overcurrent Interrupt
 */
INLINE void ARVG_disVAREFOvercurrentInt(void)
{
  ARVG->VAREF_IEN.bit.OC_IEN = 0u;
}

/** \brief Get VAREF Overcurrent Interrupt Status
 *
 *  \return uint8 VAREF Overcurrent Interrupt Status
 */
INLINE uint8 ARVG_getVAREFOvercurrentIntSts(void)
{
  return (uint8)ARVG->VAREF_IRQ.bit.OC_IS;
}

/** \brief Get VAREF Overcurrent Status
 *
 *  \return uint8 VAREF Overcurrent Interrupt Status
 */
INLINE uint8 ARVG_getVAREFOvercurrentSts(void)
{
  return (uint8)ARVG->VAREF_IRQ.bit.OC_STS;
}

/** \brief Clear VAREF Overcurrent Interrupt Status
 */
INLINE void ARVG_clrVAREFOvercurrentIntSts(void)
{
  ARVG->VAREF_IRQ_CLR.bit.OC_IS_CLR = 1u;
}

/** \brief Clear VAREF Overcurrent Status
 */
INLINE void ARVG_clrVAREFOvercurrentSts(void)
{
  ARVG->VAREF_IRQ_CLR.bit.OC_STS_CLR = 1u;
}

/** @}*/

#endif /* _ADC1_H */

