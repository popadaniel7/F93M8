/*
 ***********************************************************************************************************************
 *
 * Copyright (c) 2015, Infineon Technologies AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,are permitted provided that the
 * following conditions are met:
 *
 *   Redistributions of source code must retain the above copyright notice, this list of conditions and the  following
 *   disclaimer.
 *
 *   Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
 *   following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 *   Neither the name of the copyright holders nor the names of its contributors may be used to endorse or promote
 *   products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  OF THE
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 **********************************************************************************************************************/

/*******************************************************************************
**                                  Includes                                  **
*******************************************************************************/

#include "pmu.h"

/*******************************************************************************
**                         Private Macro Declarations                         **
*******************************************************************************/

/*******************************************************************************
**                        Private Constant Definitions                        **
*******************************************************************************/

/*******************************************************************************
**                          Private Type Declarations                         **
*******************************************************************************/

/*******************************************************************************
**                        Private Variable Definitions                        **
*******************************************************************************/

static uint32 u32_failsafeWatchdogCnt;
static bool b_SOWactive = false;
static bool b_globFlag = false;


/*******************************************************************************
**                        Private Function Declarations                       **
*******************************************************************************/

/*******************************************************************************
**                         Global Function Definitions                        **
*******************************************************************************/

/** \brief Initialize all CW registers of the PMU module
 *
 * \param none
 * \return sint8 0: success, <0: error codes
 */
sint8 PMU_init(void)
{
  sint8 e_returnCode;
  uint32 u32_resetSts;
  u32_resetSts = (uint32)0;

  e_returnCode = ERR_LOG_SUCCESS;
  
  PMU->START_CONFIG.reg = (uint32)PMU_START_CONFIG;
  
  /* Configure the FIFO pull-up resistor */
  PMU->MISC_CTRL.reg = (uint32)PMU_MISC_CTRL;

  /* Check for possible reset trigger source(s) and reset the status flags if necessary */
  if (PMU->RESET_STS.reg > (uint32)1)
  {
    u32_resetSts = PMU->RESET_STS.reg;
    PMU->RESET_STS_CLR.reg = (uint32)0xFFFFFFFF;
  }

  PMU->RST_CTRL.reg = (uint32)PMU_RST_CTRL;

  /* Check for possible hardware failure trigger source(s) */
  if (PMU->WAKE_FAIL_STS.reg != (uint32)0)
  {
    e_returnCode = ERR_LOG_ERROR;
    //PMU->WAKE_FAIL_CLR.reg = (uint32)0xFFFFFFFF;
  }
  else
  {
    /* Check for possible wake-up trigger source(s) */
    if (PMU->WAKE_STS.reg != (uint32)0)
    {
      PMU->WAKE_STS_CLR.reg = (uint32)0xFFFFFFFF;
    }

    /* Configure the fail-safe watchdog - done in System_init */

    if (e_returnCode == ERR_LOG_SUCCESS)
    {
      /* Configure the safe-shutdown path */
      /* Already initialized in system_tle989x.c */
      /* Clear the voltage regulator related status registers */
      PMU->VDDP_STS_CLR.reg = (uint32)0xFFFFFFFF;
      PMU->VDDC_STS_CLR.reg = (uint32)0xFFFFFFFF;
      PMU->VDDEXT_STS_CLR.reg = (uint32)0xFFFFFFFF;
      /* Configure the voltage regulator */
      PMU->VDDP_CTRL.reg = (uint32)PMU_VDDP_CTRL;
      PMU->VDDC_CTRL.reg = (uint32)PMU_VDDC_CTRL;
      PMU->VDDEXT_CTRL.reg = (uint32)PMU_VDDEXT_CTRL;
      /* Configure the wake-up control unit */
      PMU->WAKE_FILT_CTRL.reg = (uint32)PMU_WAKE_FILT_CTRL;
      PMU->WAKE_GPIO_CTRL0.reg = (uint32)PMU_WAKE_GPIO_CTRL0;
      PMU->WAKE_GPIO_CTRL1.reg = (uint32)PMU_WAKE_GPIO_CTRL1;
      PMU->WAKE_GPIO_CTRL2.reg = (uint32)PMU_WAKE_GPIO_CTRL2;
      PMU->WAKE_GPIO_CTRL3.reg = (uint32)PMU_WAKE_GPIO_CTRL3;
      PMU->WAKE_GPIO_CTRL4.reg = (uint32)PMU_WAKE_GPIO_CTRL4;
      PMU->WAKE_GPIO_CTRL5.reg = (uint32)PMU_WAKE_GPIO_CTRL5;
      PMU->MON_CTRL1.reg = (uint32)PMU_MON_CTRL1;
      PMU->MON_CTRL2.reg = (uint32)PMU_MON_CTRL2;
      PMU->MON_CTRL3.reg = (uint32)PMU_MON_CTRL3;
      PMU->CYC_CTRL.reg = (uint32)PMU_CYC_CTRL;
      PMU->WAKE_CTRL.reg = (uint32)PMU_WAKE_CTRL;
    }
  }

  return e_returnCode;
}

/** \brief Count up since the last watchdog trigger
 *
 * \param none
 * \return none
 */
void PMU_countFailSafeWatchdog(void)
{
  u32_failsafeWatchdogCnt++;
}

/** \brief Initialize the fail-safe watchdog
 *
 * \param none
 * \return sint8 0: success, <0: error codes
 */
sint8 PMU_initFailSafeWatchdog(void)
{
  sint8 e_returnCode;
  uint32 u32_maxDelay_ticks;

  e_returnCode = ERR_LOG_SUCCESS;
  /* Maximum delay for the self-test of 2 seconds */
  u32_maxDelay_ticks = (uint32)2000;
  /* Initialisation of the tick counter */
  u32_failsafeWatchdogCnt = 0;

  /* A successful self-test of the fail-safe watchdog sets the FS_STS.WD_FAIL_STS bit */
  while (u32_failsafeWatchdogCnt < u32_maxDelay_ticks)
  {
    if (PMU->FS_STS.bit.WD_FAIL_STS == (uint8)1)
    {
      /* The watchdog starts in Long Open Window (typically 180 ms) */
      b_globFlag = true;
      /* The fail-safe watchdog period can only be programmed during the LOW phase */
      PMU->WD_CTRL.reg = (uint32)PMU_WD_CTRL;
      /* The bit TRIG needs to be toggled to provide a proper trigger */
      PMU->WD_TRIG.bit.TRIG ^= (uint8)1;
      break;
    }
  }

  if (u32_failsafeWatchdogCnt == u32_maxDelay_ticks)
  {
    /* Failed initialization of the fail-safe watchdog */
    e_returnCode = ERR_LOG_CODE_TIMEOUT;
  }

  return e_returnCode;
}


/** \brief Stop the fail-safe watchdog
 *
 * \param none
 * \return none
 */
void PMU_stopFailSafeWatchdog(void)
{
  /* Disable the SysTick Timer */
  CPU->SYSTICK_CS.bit.ENABLE = 0u;
}

/** \brief Service the fail-safe watchdog
 *
 * \param none
 * \return sint8 0: success, <0: error codes
 */
sint8 PMU_serviceFailSafeWatchdog(void)
{
  sint8 e_returnCode;
  e_returnCode = ERR_LOG_SUCCESS;

  /* Check if the counter is within the effective open window (safe trigger point) or if a SOW service has been done before */
  if ((u32_failsafeWatchdogCnt > PMU_SAFE_TRIGGER) || (b_SOWactive == true))
  {
    /* Service watchdog by toggling bit PMU->WD_TRIG.bit.TRIG */
    PMU->WD_TRIG.bit.TRIG ^= 1;
    /* Reset the fail-safe watchdog counter */
    u32_failsafeWatchdogCnt = (uint32)0;
    /* Reset "short open window" active flag */
    b_SOWactive = false;
    /* For the first normal window, the initialization of the fail-safe watchdog has to be completed */
    if (b_globFlag == true)
    {
      /* The bit FS_STS.WD_FAIL_STS is cleared automatically after a correct trigger during the 1st OW */
      /* Clear SSD_STS and FO_STS bits */
      PMU->FS_SSD_CLR.reg = (uint32)(PMU_FS_SSD_CLR_SSD_STS_CLR_Msk & PMU_FS_SSD_CLR_FO_STS_CLR_Msk);
      b_globFlag = false;
    }
      
  }
  else
  {
    e_returnCode = ERR_LOG_CODE_NO_TRIGGER;
  }

  return e_returnCode;
}

/** \brief Service a Short Open Window for the watchdog
 *
 * \param u8_nbSOW Number of successive SOW
 * \return sint8 0: success, <0: error codes
 */
sint8 PMU_serviceFailSafeWatchdogSOW(uint8 u8_nbSOW)
{
  sint8 e_returnCode;
  e_returnCode = ERR_LOG_SUCCESS;

  if (u8_nbSOW <= 3)
  {
    PMU->WD_CTRL.bit.SOW = u8_nbSOW;
    if (u8_nbSOW == 0)
    {
      b_SOWactive = false;
    }
    else
    {
      b_SOWactive = true;
    }
  }
  else
  {
    e_returnCode = ERR_LOG_CODE_PARAM_OUT_OF_RANGE;
  }

  return e_returnCode;
}
/*******************************************************************************
**                        Private Function Definitions                        **
*******************************************************************************/

/*******************************************************************************
**                       Deprecated Function Definitions                      **
*******************************************************************************/

void PMU_setVDDPUndervoltageWarnIntNodePtr(void)
{
  /* Do not change this at runtime, use the ConfigWizard to configure this feature! */
}

void PMU_setVDDPOvervoltageIntNodePtr(void)
{
  /* Do not change this at runtime, use the ConfigWizard to configure this feature! */
}

void PMU_setVDDCUndervoltageWarnIntNodePtr(void)
{
  /* Do not change this at runtime, use the ConfigWizard to configure this feature! */
}

void PMU_setVDDCOvervoltageIntNodePtr(void)
{
  /* Do not change this at runtime, use the ConfigWizard to configure this feature! */
}

void PMU_setVDDEXTUndervoltageIntNodePtr(void)
{
  /* Do not change this at runtime, use the ConfigWizard to configure this feature! */
}

void PMU_setVDDEXTOvertemperatureIntNodePtr(void)
{
  /* Do not change this at runtime, use the ConfigWizard to configure this feature! */
}

