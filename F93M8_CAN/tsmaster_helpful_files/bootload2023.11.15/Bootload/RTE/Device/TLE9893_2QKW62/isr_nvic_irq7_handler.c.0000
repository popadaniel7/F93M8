/*
 ***********************************************************************************************************************
 *
 * Copyright (c) 2015, Infineon Technologies AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,are permitted provided that the
 * following conditions are met:
 *
 *   Redistributions of source code must retain the above copyright notice, this list of conditions and the  following
 *   disclaimer.
 *
 *   Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
 *   following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 *   Neither the name of the copyright holders nor the names of its contributors may be used to endorse or promote
 *   products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  OF THE
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 **********************************************************************************************************************/

/*******************************************************************************
**                                  Includes                                  **
*******************************************************************************/
#include "tle989x.h"
#include "isr.h"
#include "isr_defines.h"


/* Check if NVIC node 7 is enabled */
#if ((CPU_NVIC_ISER & CPU_NVIC_ISER_IRQEN7_Msk) == (1u << CPU_NVIC_ISER_IRQEN7_Pos))

/*******************************************************************************
**                        Global Variable Definitions                         **
*******************************************************************************/
#if (NVIC_IRQ7_HANDLER_INT_CHECK == 1)
  uint8 u8_interrupt_cnt_irq7;
#endif

/*******************************************************************************
**                        Global Function Declarations                        **
*******************************************************************************/
extern void GPT12_GPT1T2_CALLBACK(void);
extern void GPT12_GPT1T3_CALLBACK(void);
extern void GPT12_GPT1T4_CALLBACK(void);
extern void GPT12_GPT2T5_CALLBACK(void);
extern void GPT12_GPT2T6_CALLBACK(void);
extern void GPT12_GPT2CAPREL_CALLBACK(void);


/*******************************************************************************
**                         Global Function Definitions                        **
*******************************************************************************/
void NVIC_IRQ7_Handler(void)
{
  #if (NVIC_IRQ7_HANDLER_INT_CHECK == 1)
    u8_interrupt_cnt_irq7 = 0;
  #endif
  /* GPT12 T2 */
  #if (GPT12_GPT1T2_INT_EN == 1)
    #if ((SCU_INP1 & SCU_INP1_INP_GPT1T2_Msk) >>  SCU_INP1_INP_GPT1T2_Pos == GPT12_INP_NVIC_IRQ7)
      if ((uint8)SCU->GPTIEN.bit.GPT1T2EN == (uint8)1)
      {
        if ((uint8)SCU->GPTIS.bit.GPT1T2 == (uint8)1)
        {
          GPT12_GPT1T2_CALLBACK();
          SCU->GPTISC.bit.GPT1T2CLR = 1u;
          #if (NVIC_IRQ7_HANDLER_INT_CHECK == 1)
            u8_interrupt_cnt_irq7 += 1;
          #endif
        }
      }
    #endif /* Interrupt assigned to this Node */
  #endif /* Interrupt enabled */

  /* GPT12 T3 */
  #if (GPT12_GPT1T3_INT_EN == 1)
    #if ((SCU_INP1 & SCU_INP1_INP_GPT1T3_Msk) >>  SCU_INP1_INP_GPT1T3_Pos == GPT12_INP_NVIC_IRQ7)
      if ((uint8)SCU->GPTIEN.bit.GPT1T3EN == (uint8)1)
      {
        if ((uint8)SCU->GPTIS.bit.GPT1T3 == (uint8)1)
        {
          GPT12_GPT1T3_CALLBACK();
          SCU->GPTISC.bit.GPT1T3CLR = 1u;
          #if (NVIC_IRQ7_HANDLER_INT_CHECK == 1)
            u8_interrupt_cnt_irq7 += 1;
          #endif
        }
      }
    #endif /* Interrupt assigned to this Node */
  #endif /* Interrupt enabled */

  /* GPT12 T4 */
  #if (GPT12_GPT1T4_INT_EN == 1)
    #if ((SCU_INP1 & SCU_INP1_INP_GPT1T4_Msk) >>  SCU_INP1_INP_GPT1T4_Pos == GPT12_INP_NVIC_IRQ7)
      if ((uint8)SCU->GPTIEN.bit.GPT1T4EN == (uint8)1)
      {
        if ((uint8)SCU->GPTIS.bit.GPT1T4 == (uint8)1)
        {
          GPT12_GPT1T4_CALLBACK();
          SCU->GPTISC.bit.GPT1T4CLR = 1u;
          #if (NVIC_IRQ7_HANDLER_INT_CHECK == 1)
            u8_interrupt_cnt_irq7 += 1;
          #endif
        }
      }
    #endif /* Interrupt assigned to this Node */
  #endif /* Interrupt enabled */

  /* GPT12 T5 */
  #if (GPT12_GPT2T5_INT_EN == 1)
    #if ((SCU_INP1 & SCU_INP1_INP_GPT2T5_Msk) >>  SCU_INP1_INP_GPT2T5_Pos == GPT12_INP_NVIC_IRQ7)
      if ((uint8)SCU->GPTIEN.bit.GPT2T5EN == (uint8)1)
      {
        if ((uint8)SCU->GPTIS.bit.GPT2T5 == (uint8)1)
        {
          GPT12_GPT2T5_CALLBACK();
          SCU->GPTISC.bit.GPT2T5CLR = 1u;
          #if (NVIC_IRQ7_HANDLER_INT_CHECK == 1)
            u8_interrupt_cnt_irq7 += 1;
          #endif
        }
      }
    #endif /* Interrupt assigned to this Node */
  #endif /* Interrupt enabled */

  /* GPT12 T6 */
  #if (GPT12_GPT2T6_INT_EN == 1)
    #if ((SCU_INP1 & SCU_INP1_INP_GPT2T6_Msk) >>  SCU_INP1_INP_GPT2T6_Pos == GPT12_INP_NVIC_IRQ7)
      if ((uint8)SCU->GPTIEN.bit.GPT2T6EN == (uint8)1)
      {
        if ((uint8)SCU->GPTIS.bit.GPT2T6 == (uint8)1)
        {
          GPT12_GPT2T6_CALLBACK();
          SCU->GPTISC.bit.GPT2T6CLR = 1u;
          #if (NVIC_IRQ7_HANDLER_INT_CHECK == 1)
            u8_interrupt_cnt_irq7 += 1;
          #endif
        }
      }
    #endif /* Interrupt assigned to this Node */
  #endif /* Interrupt enabled */

  /* GPT12 CAPREL */
  #if (GPT12_GPT2CAPREL_INT_EN == 1)
    #if ((SCU_INP1 & SCU_INP1_INP_GPT2CR_Msk) >>  SCU_INP1_INP_GPT2CR_Pos == GPT12_INP_NVIC_IRQ7)
      if ((uint8)SCU->GPTIEN.bit.GPT2CREN == (uint8)1)
      {
        if ((uint8)SCU->GPTIS.bit.GPT2CR == (uint8)1)
        {
          GPT12_GPT2CAPREL_CALLBACK();
          SCU->GPTISC.bit.GPT2CRCLR = 1u;
          #if (NVIC_IRQ7_HANDLER_INT_CHECK == 1)
            u8_interrupt_cnt_irq7 += 1;
          #endif
        }
      }
    #endif /* Interrupt assigned to this Node */
  #endif /* Interrupt enabled */

}
#endif /* ((CPU_NVIC_ISER & CPU_NVIC_ISER_IRQEN7_Msk) == 1u) */
