/*
 ***********************************************************************************************************************
 *
 * Copyright (c) 2015, Infineon Technologies AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,are permitted provided that the
 * following conditions are met:
 *
 *   Redistributions of source code must retain the above copyright notice, this list of conditions and the  following
 *   disclaimer.
 *
 *   Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
 *   following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 *   Neither the name of the copyright holders nor the names of its contributors may be used to endorse or promote
 *   products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  OF THE
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 **********************************************************************************************************************/

/* Generated by generate_functions_02_xlsx2func.py, version 0.9.0 on 15. Oct 2020
 * from File 'ccu7.xlsx', version 0.1.0
 */

/**
 * \file     ccu7.h
 *
 * \brief    CCU7 low level access library
 *
 * \version  V0.3.0
 * \date     18. Dec 2020
 *
 * \note
 */

/** \addtogroup CCU7_api
 *  @{
 */

/*******************************************************************************
**                             Author(s) Identity                             **
********************************************************************************
** Initials     Name                                                          **
** ---------------------------------------------------------------------------**
** JO           Julia Ott                                                     **
** BG           Blandine Guillot                                              **
** DM           Daniel Mysliwitz                                              **
*******************************************************************************/

/*******************************************************************************
**                          Revision Control History                          **
********************************************************************************
** V0.1.0: 2020-07-10, JO:   Initial version                                  **
** V0.2.0: 2020-08-03, JO:   Corrected functions CCU7_getT12Freq_Hz and       **
**                           CCU7_setT12Freq_Hz                               **
** V0.2.1: 2020-08-11, JO:   EP-449: Added typecasts to avoid ARMCC v6        **
**                           warnings                                         **
** V0.2.2: 2020-10-06, BG:   EP-492: Removed MISRA 2012 errors                **
** V0.2.3: 2020-10-15, JO:   EP-523: Updated parameter names                  **
** V0.2.4: 2020-10-21, BG:   EP-539: Considered the enable checkbox in CW in  **
**                           the initialization function                      **
** V0.2.5: 2020-10-22, JO:   EP-539: Added variable s8_returnCode to function **
**                           CCU7_enModule                                    **
** V0.2.6: 2020-11-12, JO:   EP-590: Removed \param none and \return none to  **
**                           avoid doxygen warning                            **
**                           Added end of group for doxygen                   **
** V0.2.7: 2020-11-20, BG:   EP-610: Corrected MISRA 2012 errors              **
**                           The following rules are globally deactivated:    **
**                           - Info 774: Boolean within 'if' always evaluates **
**                             to False/True                                  **
** V0.2.8: 2020-12-16, JO:   EP-651: Corrected wrong typecasts in case        **
**                           CCU7_T12_CLK contains a decimal point            **
** V0.2.9: 2020-12-18, BG:   EP-652: Corrected name of error code variable    **
** V0.3.0: 2020-12-18, JO:   EP-607: Use CCU7_T12_CLK_HZ insted of            **
**                           CCU7_T12_CLK for further calculation             **
*******************************************************************************/

#ifndef _CCU7_H
#define _CCU7_H

/*******************************************************************************
**                                  Includes                                  **
*******************************************************************************/

#include "types.h"
#include "tle989x.h"
#include "tle_variants.h"
#include "ccu7_defines.h"

/*******************************************************************************
**                          Global Type Declarations                          **
*******************************************************************************/

/** \enum tCCU7_HallSync
 *  \brief This enum lists the CCU7 Hall Synch Configuration.
 *         Used in function CCU7_setHallSync.
 */
typedef enum
{
  tCCU7_HallSync_CCPOS0x_Any_Edge     = 0u, /**< Hall Synchronization Event: Any edge at one of the inputs CCPOSx */
  tCCU7_HallSync_T13_CM               = 1u, /**< Hall Synchronization Event: T13 compare-match */
  tCCU7_HallSync_T13_PM               = 2u, /**< Hall Synchronization Event: T13 period-match */
  tCCU7_HallSync_HW_Hall_Sampling_Off = 3u, /**< Hall Synchronization Event: Hall */
  tCCU7_HallSync_T12_PM               = 4u, /**< Hall Synchronization Event: T12 period-match */
  tCCU7_HallSync_T12_OM               = 5u, /**< Hall Synchronization Event: T12 one-match */
  tCCU7_HallSync_T12_CM_Ch0_up        = 6u, /**< Hall Synchronization Event: T12 compare-match UP */
  tCCU7_HallSync_T12_CM_Ch0_down      = 7u  /**< Hall Synchronization Event: T12 compare-match DOWN */
} tCCU7_HallSync;

/** \enum tCCU7_MultiChMode_SWSEL
 *  \brief This enum lists the CCU7 Multi Channel Mode Switching Selection.
 *         Used in function CCU7_setMultiChModeShadowTransferTrig.
 */
typedef enum
{
  tCCU7_MultiChMode_SWSEL_No_Action    = 0u, /**< The trigger request sources for Switching Selection: No request */
  tCCU7_MultiChMode_SWSEL_Correct_Hall = 1u, /**< The trigger request sources for Switching Selection: Correct pattern */
  tCCU7_MultiChMode_SWSEL_T13_PM       = 2u, /**< The trigger request sources for Switching Selection: T13 period-match */
  tCCU7_MultiChMode_SWSEL_T12_OM       = 3u, /**< The trigger request sources for Switching Selection: T12 one-match */
  tCCU7_MultiChMode_SWSEL_T12_Ch1_CM   = 4u, /**< The trigger request sources for Switching Selection: T12 channel 1 compare-match */
  tCCU7_MultiChMode_SWSEL_T12_PM       = 5u  /**< The trigger request sources for Switching Selection: T12 period-match */
} tCCU7_MultiChMode_SWSEL;

/** \enum tCCU7_MultiChMode_SWSYN
 *  \brief This enum lists the CCU7 Multi Channel Mode Switching Selection.
 *         Used in function CCU7_setMultiChModeShadowTransferSync.
 */
typedef enum
{
  tCCU7_MultiChMode_SWSYN_Direct       = 0u, /**< The trigger request sources for Switching Synchronization: Direct */
  tCCU7_MultiChMode_SWSYN_T13_ZM       = 1u, /**< The trigger request sources for Switching Synchronization: T13 zero-match */
  tCCU7_MultiChMode_SWSYN_T12_ZM       = 2u  /**< The trigger request sources for Switching Synchronization: T12 zero-match */
} tCCU7_MultiChMode_SWSYN;

/*******************************************************************************
**                          Global Macro Declarations                         **
*******************************************************************************/

/*******************************************************************************
**                          Global Type Declarations                          **
*******************************************************************************/

/*******************************************************************************
**                        Global Function Declarations                        **
*******************************************************************************/

sint8 CCU7_init(void);
sint8 CCU7_enModule(void);
sint8 CCU7_disModule(void);
INLINE uint16 CCU7_getT12CntVal(void);
INLINE void   CCU7_setT12PerVal(uint16 u16_value);
INLINE uint16 CCU7_getT12PerVal(void);
INLINE sint8 CCU7_setT12Freq_Hz(uint32 u32_freq_hz);
INLINE uint32 CCU7_getT12Freq_Hz(void);
INLINE void   CCU7_setCh0DeadTimeRise_ticks(uint8 u8_value);
INLINE uint8 CCU7_getCh0DeadTimeRise_ticks(void);
INLINE void   CCU7_setCh0DeadTimeFall_ticks(uint8 u8_value);
INLINE uint8 CCU7_getCh0DeadTimeFall_ticks(void);
INLINE void   CCU7_setCh1DeadTimeRise_ticks(uint8 u8_value);
INLINE uint8 CCU7_getCh1DeadTimeRise_ticks(void);
INLINE void   CCU7_setCh1DeadTimeFall_ticks(uint8 u8_value);
INLINE uint8 CCU7_getCh1DeadTimeFall_ticks(void);
INLINE void   CCU7_setCh2DeadTimeRise_ticks(uint8 u8_value);
INLINE uint8 CCU7_getCh2DeadTimeRise_ticks(void);
INLINE void   CCU7_setCh2DeadTimeFall_ticks(uint8 u8_value);
INLINE uint8 CCU7_getCh2DeadTimeFall_ticks(void);
INLINE sint8 CCU7_setDeadTime_ns(uint8 u8_channel, uint32 u32_deadTimeRise_ns, uint32 u32_deadTimeFall_ns) ;
INLINE sint8 CCU7_getDeadTime_ns(uint8 u8_channel, uint32 *u32p_DeadTimeRise_ns, uint32 *u32p_DeadTimeFall_ns) ;
INLINE uint16 CCU7_getCC70AVal(void);
INLINE uint16 CCU7_getCC71AVal(void);
INLINE uint16 CCU7_getCC72AVal(void);
INLINE void   CCU7_setCC70AValShadow(uint16 u16_value);
INLINE void   CCU7_setCC71AValShadow(uint16 u16_value);
INLINE void   CCU7_setCC72AValShadow(uint16 u16_value);
INLINE uint16 CCU7_getC70BVal(void);
INLINE uint16 CCU7_getC71BVal(void);
INLINE uint16 CCU7_getC72BVal(void);
INLINE void   CCU7_setC70BValShadow(uint16 u16_value);
INLINE void   CCU7_setC71BValShadow(uint16 u16_value);
INLINE void   CCU7_setC72BValShadow(uint16 u16_value);
INLINE uint16 CCU7_getT13CntVal(void);
INLINE uint16 CCU7_getT14CntVal(void);
INLINE uint16 CCU7_getT15CntVal(void);
INLINE uint16 CCU7_getT16CntVal(void);
INLINE void   CCU7_setT13PerVal(uint16 u16_value);
INLINE uint16 CCU7_getT13PerVal(void);
INLINE void   CCU7_setT14PerVal(uint16 u16_value);
INLINE uint16 CCU7_getT14PerVal(void);
INLINE void   CCU7_setT15PerVal(uint16 u16_value);
INLINE uint16 CCU7_getT15PerVal(void);
INLINE void   CCU7_setT16PerVal(uint16 u16_value);
INLINE uint16 CCU7_getT16PerVal(void);
INLINE uint16 CCU7_getC73Val(void);
INLINE uint16 CCU7_getC74Val(void);
INLINE uint16 CCU7_getC75Val(void);
INLINE uint16 CCU7_getC76Val(void);
INLINE void   CCU7_setC73ValShadow(uint16 u16_value);
INLINE void   CCU7_setC74ValShadow(uint16 u16_value);
INLINE void   CCU7_setC75ValShadow(uint16 u16_value);
INLINE void   CCU7_setC76ValShadow(uint16 u16_value);
INLINE uint8 CCU7_getHallPatternSampled(void);
INLINE uint16 CCU7_getCmpSts(void);
INLINE void   CCU7_setHallSync(tCCU7_HallSync e_value);
INLINE void CCU7_enT12SingleShot(void);
INLINE void CCU7_disT12SingleShot(void);
INLINE void CCU7_enT13SingleShot(void);
INLINE void CCU7_disT13SingleShot(void);
INLINE void CCU7_enT14SingleShot(void);
INLINE void CCU7_disT14SingleShot(void);
INLINE void CCU7_enT15SingleShot(void);
INLINE void CCU7_disT15SingleShot(void);
INLINE void CCU7_enT16SingleShot(void);
INLINE void CCU7_disT16SingleShot(void);
INLINE void CCU7_stopT12(void);
INLINE void CCU7_startT12(void);
INLINE void CCU7_stopT13(void);
INLINE void CCU7_startT13(void);
INLINE void CCU7_stopT14(void);
INLINE void CCU7_startT14(void);
INLINE void CCU7_stopT15(void);
INLINE void CCU7_startT15(void);
INLINE void CCU7_stopT16(void);
INLINE void CCU7_startT16(void);
INLINE void   CCU7_setT12Modulation(uint8 u8_value);
INLINE void CCU7_enMultiChMode(void);
INLINE void CCU7_disMultiChMode(void);
INLINE void   CCU7_setT13Modulation(uint8 u8_value);
INLINE void CCU7_enTrap(void);
INLINE void CCU7_disTrap(void);
INLINE uint8 CCU7_getTrapConfig(void);
INLINE void CCU7_enTrapPin(void);
INLINE void CCU7_disTrapPin(void);
INLINE void   CCU7_setMultiChModePWMPatternShadow(uint8 u8_value);
INLINE void CCU7_setMultiChModeShadowTransferReq(void);
INLINE void   CCU7_setHallPatternExpectedShadow(uint8 u8_value);
INLINE void   CCU7_setHallPatternCurrentShadow(uint8 u8_value);
INLINE void CCU7_setHallShadowTransferReq(void);
INLINE uint8 CCU7_getMultiChModePWMPattern(void);
INLINE void   CCU7_setMultiChModeShadowTransferTrig(tCCU7_MultiChMode_SWSEL e_value);
INLINE void   CCU7_setMultiChModeShadowTransferSync(tCCU7_MultiChMode_SWSYN e_value);
INLINE void CCU7_clrLostBitEventSts(void);
INLINE uint8 CCU7_getLostBitEventSts(void);
INLINE void CCU7_enLostBitEventInt(void);
INLINE void CCU7_disLostBitEventInt(void);
INLINE uint8 CCU7_getCC70ACmpMatchRiseIntSts(void);
INLINE uint8 CCU7_getCC70ACmpMatchFallIntSts(void);
INLINE uint8 CCU7_getCC71ACmpMatchRiseIntSts(void);
INLINE uint8 CCU7_getCC71ACmpMatchFallIntSts(void);
INLINE uint8 CCU7_getCC72ACmpMatchRiseIntSts(void);
INLINE uint8 CCU7_getCC72ACmpMatchFallIntSts(void);
INLINE uint8 CCU7_getT12OneMatchIntSts(void);
INLINE uint8 CCU7_getT12PerMatchIntSts(void);
INLINE uint8 CCU7_getT13CmpMatchIntSts(void);
INLINE uint8 CCU7_getT13PerMatchIntSts(void);
INLINE uint8 CCU7_getTrapCond(void);
INLINE uint8 CCU7_getTrapIntSts(void);
INLINE uint8 CCU7_getHallEventCorrectIntSts(void);
INLINE uint8 CCU7_getHallEventWrongIntSts(void);
INLINE uint8 CCU7_getHallIdleIntSts(void);
INLINE uint8 CCU7_getMultiChModeShadowTransferReqIntSts(void);
INLINE void CCU7_clrCC70ACmpMatchRiseIntSts(void);
INLINE void CCU7_clrCC70ACmpMatchFallIntSts(void);
INLINE void CCU7_clrCC71ACmpMatchRiseIntSts(void);
INLINE void CCU7_clrCC71ACmpMatchFallIntSts(void);
INLINE void CCU7_clrCC72ACmpMatchRiseIntSts(void);
INLINE void CCU7_clrCC72ACmpMatchFallIntSts(void);
INLINE void CCU7_clrT12OneMatchIntSts(void);
INLINE void CCU7_clrT12PerMatchIntSts(void);
INLINE void CCU7_clrT13CmpMatchIntSts(void);
INLINE void CCU7_clrT13PerMatchIntSts(void);
INLINE void CCU7_clrTrapIntSts(void);
INLINE void CCU7_clrHallEventCorrectIntSts(void);
INLINE void CCU7_clrHallEventWrongIntSts(void);
INLINE void CCU7_clrHallIdleIntSts(void);
INLINE void CCU7_clrMultiChModeShadowTransferReqIntSts(void);
INLINE void CCU7_enCC70ACmpMatchRiseInt(void);
INLINE void CCU7_disCC70ACmpMatchRiseInt(void);
INLINE void CCU7_enCC70ACmpMatchFallInt(void);
INLINE void CCU7_disCC70ACmpMatchFallInt(void);
INLINE void CCU7_enCC71ACmpMatchRiseInt(void);
INLINE void CCU7_disCC71ACmpMatchRiseInt(void);
INLINE void CCU7_enCC71ACmpMatchFallInt(void);
INLINE void CCU7_disCC71ACmpMatchFallInt(void);
INLINE void CCU7_enCC72ACmpMatchRiseInt(void);
INLINE void CCU7_disCC72ACmpMatchRiseInt(void);
INLINE void CCU7_enCC72ACmpMatchFallInt(void);
INLINE void CCU7_disCC72ACmpMatchFallInt(void);
INLINE void CCU7_enT12OneMatchInt(void);
INLINE void CCU7_disT12OneMatchInt(void);
INLINE void CCU7_enT12PerMatchInt(void);
INLINE void CCU7_disT12PerMatchInt(void);
INLINE void CCU7_enT13CmpMatchInt(void);
INLINE void CCU7_disT13CmpMatchInt(void);
INLINE void CCU7_enT13PerMatchInt(void);
INLINE void CCU7_disT13PerMatchInt(void);
INLINE void CCU7_enTrapCondInt(void);
INLINE void CCU7_disTrapCondInt(void);
INLINE void CCU7_enHallEventCorrectInt(void);
INLINE void CCU7_disHallEventCorrectInt(void);
INLINE void CCU7_enHallEventWrongInt(void);
INLINE void CCU7_disHallEventWrongInt(void);
INLINE void CCU7_enHallIdleInt(void);
INLINE void CCU7_disHallIdleInt(void);
INLINE void CCU7_enMultiChModeShadowTransferReqInt(void);
INLINE void CCU7_disMultiChModeShadowTransferReqInt(void);
INLINE uint8 CCU7_getC70BCmpMatchRiseIntSts(void);
INLINE uint8 CCU7_getC70BCmpMatchFallIntSts(void);
INLINE uint8 CCU7_getC71BCmpMatchRiseIntSts(void);
INLINE uint8 CCU7_getC71BCmpMatchFallIntSts(void);
INLINE uint8 CCU7_getC72BCmpMatchRiseIntSts(void);
INLINE uint8 CCU7_getC72BCmpMatchFallIntSts(void);
INLINE uint8 CCU7_getT14CmpMatchIntSts(void);
INLINE uint8 CCU7_getT14PerMatchIntSts(void);
INLINE uint8 CCU7_getT15CmpMatchIntSts(void);
INLINE uint8 CCU7_getT15PerMatchIntSts(void);
INLINE uint8 CCU7_getT16CmpMatchIntSts(void);
INLINE uint8 CCU7_getT16PerMatchIntSts(void);
INLINE void CCU7_clrC70BCmpMatchRiseIntSts(void);
INLINE void CCU7_clrC70BCmpMatchFallIntSts(void);
INLINE void CCU7_clrC71BCmpMatchRiseIntSts(void);
INLINE void CCU7_clrC71BCmpMatchFallIntSts(void);
INLINE void CCU7_clrC72BCmpMatchRiseIntSts(void);
INLINE void CCU7_clrC72BCmpMatchFallIntSts(void);
INLINE void CCU7_clrT14CmpMatchIntSts(void);
INLINE void CCU7_clrT14PerMatchIntSts(void);
INLINE void CCU7_clrT15CmpMatchIntSts(void);
INLINE void CCU7_clrT15PerMatchIntSts(void);
INLINE void CCU7_clrT16CmpMatchIntSts(void);
INLINE void CCU7_clrT16PerMatchIntSts(void);
INLINE void CCU7_enC70BCmpMatchRiseInt(void);
INLINE void CCU7_disC70BCmpMatchRiseInt(void);
INLINE void CCU7_enC70BCmpMatchFallInt(void);
INLINE void CCU7_disC70BCmpMatchFallInt(void);
INLINE void CCU7_enC71BCmpMatchRiseInt(void);
INLINE void CCU7_disC71BCmpMatchRiseInt(void);
INLINE void CCU7_enC71BCmpMatchFallInt(void);
INLINE void CCU7_disC71BCmpMatchFallInt(void);
INLINE void CCU7_enC72BCmpMatchRiseInt(void);
INLINE void CCU7_disC72BCmpMatchRiseInt(void);
INLINE void CCU7_enC72BCmpMatchFallInt(void);
INLINE void CCU7_disC72BCmpMatchFallInt(void);
INLINE void CCU7_enT14CmpMatchInt(void);
INLINE void CCU7_disT14CmpMatchInt(void);
INLINE void CCU7_enT14PerMatchInt(void);
INLINE void CCU7_disT14PerMatchInt(void);
INLINE void CCU7_enT15CmpMatchInt(void);
INLINE void CCU7_disT15CmpMatchInt(void);
INLINE void CCU7_enT15PerMatchInt(void);
INLINE void CCU7_disT15PerMatchInt(void);
INLINE void CCU7_enT16CmpMatchInt(void);
INLINE void CCU7_disT16CmpMatchInt(void);
INLINE void CCU7_enT16PerMatchInt(void);
INLINE void CCU7_disT16PerMatchInt(void);
INLINE void CCU7_setT12ShadowTransferReq(void);
INLINE void CCU7_setT13ShadowTransferReq(void);
INLINE void CCU7_setT14ShadowTransferReq(void);
INLINE void CCU7_setT15ShadowTransferReq(void);
INLINE void CCU7_setT16ShadowTransferReq(void);

/*******************************************************************************
**                      Deprecated Function Declarations                      **
*******************************************************************************/
/** \brief Set Interrupt Node Pointer for CC70A Interrupts
 *  \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void CCU7_setCC70AIntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));

/** \brief Set Interrupt Node Pointer for CC71A Interrupts
 *  \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void CCU7_setCC71AIntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));

/** \brief Set Interrupt Node Pointer for CC72A Interrupts
 *  \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void CCU7_setCC72AIntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));

/** \brief Set Interrupt Node Pointer for the CHE Interrupt
 *  \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void CCU7_setCHEIntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));

/** \brief Set Interrupt Node Pointer for Error Interrupts
 *  \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void CCU7_setErrorIntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));

/** \brief Set Interrupt Node Pointer for T12 Interrupts
 *  \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void CCU7_setT12IntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));

/** \brief Set Interrupt Node Pointer for T13 Interrupts
 *  \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void CCU7_setT13IntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));

/** \brief Set Interrupt Node Pointer for C70B Interrupts
 *  \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void CCU7_setC70BIntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));

/** \brief Set Interrupt Node Pointer for C71B Interrupts
 *  \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void CCU7_setC71BIntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));

/** \brief Set Interrupt Node Pointer for C72B Interrupts
 *  \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void CCU7_setC72BIntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));

/** \brief Set Interrupt Node Pointer for T14 Interrupts
 *  \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void CCU7_setT14IntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));

/** \brief Set Interrupt Node Pointer for T15 Interrupts
 *  \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void CCU7_setT15IntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));

/** \brief Set Interrupt Node Pointer for T16 Interrupts
 *  \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void CCU7_setT16IntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));


/*******************************************************************************
**                     Global Inline Function Definitions                     **
*******************************************************************************/
/** \brief Get T12 Counter Value
 *
 * \return uint16 T12 Counter Value
 */
INLINE uint16 CCU7_getT12CntVal(void)
{
  return (uint16)CCU7->T12.bit.T12CV;
}

/** \brief Set T12 Period Value
 *
 *  \param u16_value T12 Period Value
 */
INLINE void CCU7_setT12PerVal(uint16 u16_value)
{
  CCU7->T12PR.bit.T12PV = u16_value;
}

/** \brief Get T12 Period Value
 *
 * \return uint16 T12 Period Value
 */
INLINE uint16 CCU7_getT12PerVal(void)
{
  return (uint16)CCU7->T12PR.bit.T12PV;
}

/** \brief Set T12 Period in Hz
 *  This function sets the T12 period value
 *  based on the input parameter u32_freq_hz related to the constant timer 12 clock CCU7_T12_CLK_HZ,
 *  taking the edge-/center-aligned mode into consideration.
 *  If the requested frequency by the parameter u32_freq_hz can be represented by the current clocking of the CCU7 module
 *  and the T12 width then this function returns '0' (success), else failure code (parameter out of range).
 *
 * \param u32_freq_hz Frequency in Hz
 * \return sint8 0: success, <0: error codes
 */
INLINE sint8 CCU7_setT12Freq_Hz(uint32 u32_freq_hz)
{
  sint8 s8_returnCode;
  uint32 u32_period_tick;
  
  s8_returnCode = ERR_LOG_SUCCESS;
  u32_period_tick = (uint32)(CCU7_T12_CLK_HZ / u32_freq_hz);

  if (CCU7->TCTR0.bit.CTM == 1)
  {
    /* Center aligned mode --> /2 */
    u32_period_tick = u32_period_tick / 2u;
  }

  u32_period_tick = u32_period_tick - 1u;

  if (u32_period_tick <= 0xFFFFu)
  {
    CCU7_setT12PerVal((uint16)u32_period_tick);
  }
  else
  {
    s8_returnCode = ERR_LOG_CODE_PARAM_OUT_OF_RANGE;
  }

  return s8_returnCode;
}

/** \brief Get T12 Period in Hz
 *  This function returns the T12 period value related to the constant CCU7_T12_CLK_HZ in Hz,
 *  taking the edge-/center-aligned mode into consideration.
 *
 * \return u32_period_Hz Frequency in Hz
 */
INLINE uint32 CCU7_getT12Freq_Hz(void)
{
  uint32 u32_period_Hz;
  uint32 u32_period_tick = (uint32)((uint32)CCU7_getT12PerVal() + 1u);

  if (CCU7->TCTR0.bit.CTM == 1u)
  {
    /* Center aligned mode --> *2 */
    u32_period_tick = u32_period_tick * 2u;
  }

  u32_period_Hz = (uint32)(CCU7_T12_CLK_HZ / u32_period_tick);
  return u32_period_Hz;
}

/** \brief Set Dead-Time for Channel 0 rise in ticks
 *
 *  \param u8_value Dead-Time for Channel 0 rise in ticks
 */
INLINE void CCU7_setCh0DeadTimeRise_ticks(uint8 u8_value)
{
  CCU7->T12DT0_VAL.bit.DTM_RISE = u8_value;
}

/** \brief Get Dead-Time for Channel 0 rise in ticks
 *
 * \return uint8 Dead-Time for Channel 0 rise in ticks
 */
INLINE uint8 CCU7_getCh0DeadTimeRise_ticks(void)
{
  return (uint8)CCU7->T12DT0_VAL.bit.DTM_RISE;
}

/** \brief Set Dead-Time for Channel 0 fall in ticks
 *
 *  \param u8_value Dead-Time for Channel 0 fall in ticks
 */
INLINE void CCU7_setCh0DeadTimeFall_ticks(uint8 u8_value)
{
  CCU7->T12DT0_VAL.bit.DTM_FALL = u8_value;
}

/** \brief Get Dead-Time for Channel 0 fall in ticks
 *
 * \return uint8 Dead-Time for Channel 0 fall in ticks
 */
INLINE uint8 CCU7_getCh0DeadTimeFall_ticks(void)
{
  return (uint8)CCU7->T12DT0_VAL.bit.DTM_FALL;
}

/** \brief Set Dead-Time for Channel 1 rise in ticks
 *
 *  \param u8_value Dead-Time for Channel 1 rise in ticks
 */
INLINE void CCU7_setCh1DeadTimeRise_ticks(uint8 u8_value)
{
  CCU7->T12DT1_VAL.bit.DTM_RISE = u8_value;
}

/** \brief Get Dead-Time for Channel 1 rise in ticks
 *
 * \return uint8 Dead-Time for Channel 1 rise in ticks
 */
INLINE uint8 CCU7_getCh1DeadTimeRise_ticks(void)
{
  return (uint8)CCU7->T12DT1_VAL.bit.DTM_RISE;
}

/** \brief Set Dead-Time for Channel 1 fall in ticks
 *
 *  \param u8_value Dead-Time for Channel 1 fall in ticks
 */
INLINE void CCU7_setCh1DeadTimeFall_ticks(uint8 u8_value)
{
  CCU7->T12DT1_VAL.bit.DTM_FALL = u8_value;
}

/** \brief Get Dead-Time for Channel 1 fall in ticks
 *
 * \return uint8 Dead-Time for Channel 1 fall in ticks
 */
INLINE uint8 CCU7_getCh1DeadTimeFall_ticks(void)
{
  return (uint8)CCU7->T12DT1_VAL.bit.DTM_FALL;
}

/** \brief Set Dead-Time for Channel 2 rise in ticks
 *
 *  \param u8_value Dead-Time for Channel 2 rise in ticks
 */
INLINE void CCU7_setCh2DeadTimeRise_ticks(uint8 u8_value)
{
  CCU7->T12DT2_VAL.bit.DTM_RISE = u8_value;
}

/** \brief Get Dead-Time for Channel 2 rise in ticks
 *
 * \return uint8 Dead-Time for Channel 2 rise in ticks
 */
INLINE uint8 CCU7_getCh2DeadTimeRise_ticks(void)
{
  return (uint8)CCU7->T12DT2_VAL.bit.DTM_RISE;
}

/** \brief Set Dead-Time for Channel 2 fall in ticks
 *
 *  \param u8_value Dead-Time for Channel 2 fall in ticks
 */
INLINE void CCU7_setCh2DeadTimeFall_ticks(uint8 u8_value)
{
  CCU7->T12DT2_VAL.bit.DTM_FALL = u8_value;
}

/** \brief Get Dead-Time for Channel 2 fall in ticks
 *
 * \return uint8 Dead-Time for Channel 2 fall in ticks
 */
INLINE uint8 CCU7_getCh2DeadTimeFall_ticks(void)
{
  return (uint8)CCU7->T12DT2_VAL.bit.DTM_FALL;
}

/** \brief Set the dead time values (rise/fall) for one Channel.
 *  This function sets the deadtime counter to a value given by the parameter deadTimeRise/Fall_ns
 *  with a relation to the constant clock value given in CCU7_DT_CLK.
 *  The deadtime is entered per channel, with u8_channel from 0..2, and as rising and falling value.
 *  If the requested deadtime, for either rising or falling, cannot be represented by the 8bit (overflow) deadtime counter,
 *  the function returns "parameter out of range" failure code, the previous dead time counter values for this channel remain unchanged.
 *  If the given input u8_channel is out of range a failure code "parameter out of range" is returned, no changes are made.
 *  If all parameters are valid the function returns "success".
 *  If the input deadtime is not given in multiple of the CCU7_DT_CLK, the deadtime will be rounded up to the next possible value,
 *  in this case the function still returns "success".
 *
 * \param u8_channel channel number (0...2)
 * \param u32_deadTimeRise_ns Dead time Rise value in nanoseconds
 * \param u32_deadTimeFall_ns Dead time Fall value in nanoseconds
 * \return sint8 0: success, <0: error codes
 */
INLINE sint8 CCU7_setDeadTime_ns(uint8 u8_channel, uint32 u32_deadTimeRise_ns, uint32 u32_deadTimeFall_ns)
{
  sint8 s8_returnCode;
  /* Local variables for dead time ticks */
  uint32 deadTimeRise_ticks;
  uint32 deadTimeFall_ticks;
  s8_returnCode = ERR_LOG_SUCCESS;
  /* Conversion of dead time [us] into dead time [ticks], division by 1000 to achieve correct unit */
  deadTimeRise_ticks = (uint32)((u32_deadTimeRise_ns * CCU7_T12_CLK) / 1000);
  deadTimeFall_ticks = (uint32)((u32_deadTimeFall_ns * CCU7_T12_CLK) / 1000);

  if ((deadTimeRise_ticks <= 255u) && (deadTimeFall_ticks <= 255u))
  {
    switch (u8_channel)
    {
      case 0:
      {
        CCU7_setCh0DeadTimeRise_ticks((uint8)deadTimeRise_ticks);
        CCU7_setCh0DeadTimeFall_ticks((uint8)deadTimeFall_ticks);
        break;
      }

      case 1:
      {
        CCU7_setCh1DeadTimeRise_ticks((uint8)deadTimeRise_ticks);
        CCU7_setCh1DeadTimeFall_ticks((uint8)deadTimeFall_ticks);
        break;
      }

      case 2:
      {
        CCU7_setCh2DeadTimeRise_ticks((uint8)deadTimeRise_ticks);
        CCU7_setCh2DeadTimeFall_ticks((uint8)deadTimeFall_ticks);
        break;
      }

      default:
      {
        s8_returnCode = ERR_LOG_CODE_PARAM_OUT_OF_RANGE;
        break;
      }
    }
  }
  else
  {
    s8_returnCode = ERR_LOG_CODE_PARAM_OUT_OF_RANGE;
  }

  return s8_returnCode;
}

/** \brief This function reads the dead time counter value for the given channel, with u8_channel from 0..2,
 *  into the provided pointers u32p_DeadTimeRise_ns and u32p_DeadTimeFall_ns.
 *  The input parameters u32p_DeadTimeRise_ns and u32p_DeadTimeFall_ns are checked to point to a valid RAM address.
 *  The dead time in nano seconds related to the constant clock CCU7_DT_CLK.
 *  If at least one of the provided parameters is out of range a failure code "parameter out of range" is returned,
 *  the pointers u32p_DeadTimeRise_ns and u32p_DeadTimeFall_ns are not updated in this case.
 *
 * \param u8_channel channel number (0...2)
 * \param u32p_DeadTimeRise_ns Dead time Rise value in nanoseconds
 * \param u32p_DeadTimeFall_ns Dead time Fall value in nanoseconds
 * \return sint8 0: success, <0: error codes
 */
INLINE sint8 CCU7_getDeadTime_ns(uint8 u8_channel, uint32 *u32p_DeadTimeRise_ns, uint32 *u32p_DeadTimeFall_ns)
{
  sint8 s8_returnCode;
  /* Local variables for dead time ticks */
  uint32 deadTimeRise_ticks = 0;
  uint32 deadTimeFall_ticks = 0;
  s8_returnCode = ERR_LOG_SUCCESS;

  if ((PtrRangeCheck(u32p_DeadTimeRise_ns) == true) && (PtrRangeCheck(u32p_DeadTimeFall_ns) == true))
  {
    switch (u8_channel)
    {
      case 0:
      {
        deadTimeRise_ticks = CCU7_getCh0DeadTimeRise_ticks();
        deadTimeFall_ticks = CCU7_getCh0DeadTimeFall_ticks();
        break;
      }

      case 1:
      {
        deadTimeRise_ticks = CCU7_getCh1DeadTimeRise_ticks();
        deadTimeFall_ticks = CCU7_getCh1DeadTimeFall_ticks();
        break;
      }

      case 2:
      {
        deadTimeRise_ticks = CCU7_getCh2DeadTimeRise_ticks();
        deadTimeFall_ticks = CCU7_getCh2DeadTimeFall_ticks();
        break;
      }

      default:
      {
        s8_returnCode = ERR_LOG_CODE_PARAM_OUT_OF_RANGE;
      }
    }

    if (s8_returnCode == ERR_LOG_SUCCESS)
    {
      *u32p_DeadTimeRise_ns = (uint32)((deadTimeRise_ticks * 1000) / CCU7_T12_CLK);
      *u32p_DeadTimeFall_ns = (uint32)((deadTimeFall_ticks * 1000) / CCU7_T12_CLK);
    }
  }
  else
  {
    s8_returnCode = ERR_LOG_CODE_PARAM_OUT_OF_RANGE;
  }

  return s8_returnCode;
}

/** \brief Get CC70A Capture/Compare Value
 *
 * \return uint16 CC70A Capture/Compare Value
 */
INLINE uint16 CCU7_getCC70AVal(void)
{
  return (uint16)CCU7->CC70R.bit.CCV;
}

/** \brief Get CC71A Capture/Compare Value
 *
 * \return uint16 CC71A Capture/Compare Value
 */
INLINE uint16 CCU7_getCC71AVal(void)
{
  return (uint16)CCU7->CC71R.bit.CCV;
}

/** \brief Get CC72A Capture/Compare Value
 *
 * \return uint16 CC72A Capture/Compare Value
 */
INLINE uint16 CCU7_getCC72AVal(void)
{
  return (uint16)CCU7->CC72R.bit.CCV;
}

/** \brief Set Shadow Register for CC70A Capture/Compare Value
 *
 *  \param u16_value Shadow Register for CC70A Capture/Compare Value
 */
INLINE void CCU7_setCC70AValShadow(uint16 u16_value)
{
  CCU7->CC70SR.bit.CCS = u16_value;
}

/** \brief Set Shadow Register for CC71A Capture/Compare Value
 *
 *  \param u16_value Shadow Register for CC71A Capture/Compare Value
 */
INLINE void CCU7_setCC71AValShadow(uint16 u16_value)
{
  CCU7->CC71SR.bit.CCS = u16_value;
}

/** \brief Set Shadow Register for CC72A Capture/Compare Value
 *
 *  \param u16_value Shadow Register for CC72A Capture/Compare Value
 */
INLINE void CCU7_setCC72AValShadow(uint16 u16_value)
{
  CCU7->CC72SR.bit.CCS = u16_value;
}

/** \brief Get C70B Compare Value
 *
 * \return uint16 C70B Compare Value
 */
INLINE uint16 CCU7_getC70BVal(void)
{
  return (uint16)CCU7->CC70BR.bit.CV;
}

/** \brief Get C71B Compare Value
 *
 * \return uint16 C71B Compare Value
 */
INLINE uint16 CCU7_getC71BVal(void)
{
  return (uint16)CCU7->CC71BR.bit.CV;
}

/** \brief Get C72B Compare Value
 *
 * \return uint16 C72B Compare Value
 */
INLINE uint16 CCU7_getC72BVal(void)
{
  return (uint16)CCU7->CC72BR.bit.CV;
}

/** \brief Set Shadow Register for C70B Compare Value
 *
 *  \param u16_value Shadow Register for C70B Compare Value
 */
INLINE void CCU7_setC70BValShadow(uint16 u16_value)
{
  CCU7->CC70BSR.bit.CS = u16_value;
}

/** \brief Set Shadow Register for C71B Compare Value
 *
 *  \param u16_value Shadow Register for C71B Compare Value
 */
INLINE void CCU7_setC71BValShadow(uint16 u16_value)
{
  CCU7->CC71BSR.bit.CS = u16_value;
}

/** \brief Set Shadow Register for C72B Compare Value
 *
 *  \param u16_value Shadow Register for C72B Compare Value
 */
INLINE void CCU7_setC72BValShadow(uint16 u16_value)
{
  CCU7->CC72BSR.bit.CS = u16_value;
}

/** \brief Get T13 Counter Value
 *
 * \return uint16 T13 Counter Value
 */
INLINE uint16 CCU7_getT13CntVal(void)
{
  return (uint16)CCU7->T13R.bit.T1xCV;
}

/** \brief Get T14 Counter Value
 *
 * \return uint16 T14 Counter Value
 */
INLINE uint16 CCU7_getT14CntVal(void)
{
  return (uint16)CCU7->T14R.bit.T1xCV;
}

/** \brief Get T15 Counter Value
 *
 * \return uint16 T15 Counter Value
 */
INLINE uint16 CCU7_getT15CntVal(void)
{
  return (uint16)CCU7->T15R.bit.T1xCV;
}

/** \brief Get T16 Counter Value
 *
 * \return uint16 T16 Counter Value
 */
INLINE uint16 CCU7_getT16CntVal(void)
{
  return (uint16)CCU7->T16R.bit.T1xCV;
}

/** \brief Set T13 Period Value
 *
 *  \param u16_value T13 Period Value
 */
INLINE void CCU7_setT13PerVal(uint16 u16_value)
{
  CCU7->T13PR.bit.T1xPV = u16_value;
}

/** \brief Get T13 Period Value
 *
 * \return uint16 T13 Period Value
 */
INLINE uint16 CCU7_getT13PerVal(void)
{
  return (uint16)CCU7->T13PR.bit.T1xPV;
}

/** \brief Set T14 Period Value
 *
 *  \param u16_value T14 Period Value
 */
INLINE void CCU7_setT14PerVal(uint16 u16_value)
{
  CCU7->T14PR.bit.T1xPV = u16_value;
}

/** \brief Get T14 Period Value
 *
 * \return uint16 T14 Period Value
 */
INLINE uint16 CCU7_getT14PerVal(void)
{
  return (uint16)CCU7->T14PR.bit.T1xPV;
}

/** \brief Set T15 Period Value
 *
 *  \param u16_value T15 Period Value
 */
INLINE void CCU7_setT15PerVal(uint16 u16_value)
{
  CCU7->T15PR.bit.T1xPV = u16_value;
}

/** \brief Get T15 Period Value
 *
 * \return uint16 T15 Period Value
 */
INLINE uint16 CCU7_getT15PerVal(void)
{
  return (uint16)CCU7->T15PR.bit.T1xPV;
}

/** \brief Set T16 Period Value
 *
 *  \param u16_value T16 Period Value
 */
INLINE void CCU7_setT16PerVal(uint16 u16_value)
{
  CCU7->T16PR.bit.T1xPV = u16_value;
}

/** \brief Get T16 Period Value
 *
 * \return uint16 T16 Period Value
 */
INLINE uint16 CCU7_getT16PerVal(void)
{
  return (uint16)CCU7->T16PR.bit.T1xPV;
}

/** \brief Get C73 Compare Value
 *
 * \return uint16 C73 Compare Value
 */
INLINE uint16 CCU7_getC73Val(void)
{
  return (uint16)CCU7->C73R.bit.CCV;
}

/** \brief Get C74 Compare Value
 *
 * \return uint16 C74 Compare Value
 */
INLINE uint16 CCU7_getC74Val(void)
{
  return (uint16)CCU7->C74R.bit.CCV;
}

/** \brief Get C75 Compare Value
 *
 * \return uint16 C75 Compare Value
 */
INLINE uint16 CCU7_getC75Val(void)
{
  return (uint16)CCU7->C75R.bit.CCV;
}

/** \brief Get C76 Compare Value
 *
 * \return uint16 C76 Compare Value
 */
INLINE uint16 CCU7_getC76Val(void)
{
  return (uint16)CCU7->C76R.bit.CCV;
}

/** \brief Set Shadow Register for C73 Compare Value
 *
 *  \param u16_value Shadow Register for C73 Compare Value
 */
INLINE void CCU7_setC73ValShadow(uint16 u16_value)
{
  CCU7->C73SR.bit.CCS = u16_value;
}

/** \brief Set Shadow Register for C74 Compare Value
 *
 *  \param u16_value Shadow Register for C74 Compare Value
 */
INLINE void CCU7_setC74ValShadow(uint16 u16_value)
{
  CCU7->C74SR.bit.CCS = u16_value;
}

/** \brief Set Shadow Register for C75 Compare Value
 *
 *  \param u16_value Shadow Register for C75 Compare Value
 */
INLINE void CCU7_setC75ValShadow(uint16 u16_value)
{
  CCU7->C75SR.bit.CCS = u16_value;
}

/** \brief Set Shadow Register for C76 Compare Value
 *
 *  \param u16_value Shadow Register for C76 Compare Value
 */
INLINE void CCU7_setC76ValShadow(uint16 u16_value)
{
  CCU7->C76SR.bit.CCS = u16_value;
}

/** \brief Get Sampled Hall Pattern
 *
 * \return uint8 Sampled Hall Pattern
 *          Bit 0: CCU7->CMPSTAT.bit.CCPOS0
 *          Bit 1: CCU7->CMPSTAT.bit.CCPOS1
 *          Bit 2: CCU7->CMPSTAT.bit.CCPOS2
 */
INLINE uint8 CCU7_getHallPatternSampled(void)
{
  return (uint8)((CCU7->CMPSTAT.reg & (CCU7_CMPSTAT_CCPOS0_Msk | CCU7_CMPSTAT_CCPOS1_Msk | CCU7_CMPSTAT_CCPOS2_Msk)) >> CCU7_CMPSTAT_CCPOS0_Pos);
}

/** \brief Get Compare State Bits for C70B, C71B, C72B, C74ST, C75ST, C76ST, CC70AST, CC71AST, CC72AST, and CC73ST
 *
 * \return uint16 Compare State Bits
 *          Bit0:  CCU7.CMPSTAT_2.bit.C70B
 *          Bit1:  CCU7.CMPSTAT_2.bit.C71B
 *          Bit2:  CCU7.CMPSTAT_2.bit.C72B
 *          Bit4:  CCU7.CMPSTAT_2.bit.C74ST
 *          Bit5:  CCU7.CMPSTAT_2.bit.C75ST
 *          Bit6:  CCU7.CMPSTAT_2.bit.C76ST
 *          Bit8:  CCU7.CMPSTAT_2.bit.CC70AST
 *          Bit9:  CCU7.CMPSTAT_2.bit.CC71AST
 *          Bit10: CCU7.CMPSTAT_2.bit.CC72AST
 *          Bit11: CCU7.CMPSTAT.bit.CC73ST
 */
INLINE uint16 CCU7_getCmpSts(void)
{
  /* CCU7->CMPSTAT_2 contains C70B, C71B, C72B, C74ST, C75ST, C76ST, CC70ST, CC71ST, and CC72ST */
  /* Shift CCU7->CMPSTAT.bit.CC73ST to bit position 11 (unused in CCU7->CMPSTAT_2) */
  return (uint16)((uint16)CCU7->CMPSTAT_2.reg | ((uint16)CCU7->CMPSTAT.bit.CC73ST << 11u));
}

/** \brief Set Hall Synchronization
 *
 *  \param e_value Hall Synchronization
 */
INLINE void CCU7_setHallSync(tCCU7_HallSync e_value)
{
  CCU7->T12MSEL.bit.HSYNC = (uint8)e_value;
}

/** \brief Enable T12 Single Shot Control
 */
INLINE void CCU7_enT12SingleShot(void)
{
  CCU7->TCTR2.bit.T12SSC = 1u;
}

/** \brief Disable T12 Single Shot Control
 */
INLINE void CCU7_disT12SingleShot(void)
{
  CCU7->TCTR2.bit.T12SSC = 0u;
}

/** \brief Enable T13 Single Shot Control
 */
INLINE void CCU7_enT13SingleShot(void)
{
  CCU7->TCTR2.bit.T13SSC = 1u;
}

/** \brief Disable T13 Single Shot Control
 */
INLINE void CCU7_disT13SingleShot(void)
{
  CCU7->TCTR2.bit.T13SSC = 0u;
}

/** \brief Enable T14 Single Shot Control
 */
INLINE void CCU7_enT14SingleShot(void)
{
  CCU7->TCTR24.bit.T1xSSC = 1u;
}

/** \brief Disable T14 Single Shot Control
 */
INLINE void CCU7_disT14SingleShot(void)
{
  CCU7->TCTR24.bit.T1xSSC = 0u;
}

/** \brief Enable T15 Single Shot Control
 */
INLINE void CCU7_enT15SingleShot(void)
{
  CCU7->TCTR25.bit.T1xSSC = 1u;
}

/** \brief Disable T15 Single Shot Control
 */
INLINE void CCU7_disT15SingleShot(void)
{
  CCU7->TCTR25.bit.T1xSSC = 0u;
}

/** \brief Enable T16 Single Shot Control
 */
INLINE void CCU7_enT16SingleShot(void)
{
  CCU7->TCTR26.bit.T1xSSC = 1u;
}

/** \brief Disable T16 Single Shot Control
 */
INLINE void CCU7_disT16SingleShot(void)
{
  CCU7->TCTR26.bit.T1xSSC = 0u;
}

/** \brief Stop T12
 */
INLINE void CCU7_stopT12(void)
{
  CCU7->TCTR4.bit.T12RR = 1u;
}

/** \brief Start T12
 */
INLINE void CCU7_startT12(void)
{
  CCU7->TCTR4.bit.T12RS = 1u;
}

/** \brief Stop T13
 */
INLINE void CCU7_stopT13(void)
{
  CCU7->TCTR4.bit.T13RR = 1u;
}

/** \brief Start T13
 */
INLINE void CCU7_startT13(void)
{
  CCU7->TCTR4.bit.T13RS = 1u;
}

/** \brief Stop T14
 */
INLINE void CCU7_stopT14(void)
{
  CCU7->TCTR44.bit.T1xRR = 1u;
}

/** \brief Start T14
 */
INLINE void CCU7_startT14(void)
{
  CCU7->TCTR44.bit.T1xRS = 1u;
}

/** \brief Stop T15
 */
INLINE void CCU7_stopT15(void)
{
  CCU7->TCTR45.bit.T1xRR = 1u;
}

/** \brief Start T15
 */
INLINE void CCU7_startT15(void)
{
  CCU7->TCTR45.bit.T1xRS = 1u;
}

/** \brief Stop T16
 */
INLINE void CCU7_stopT16(void)
{
  CCU7->TCTR46.bit.T1xRR = 1u;
}

/** \brief Start T16
 */
INLINE void CCU7_startT16(void)
{
  CCU7->TCTR46.bit.T1xRS = 1u;
}

/** \brief Set T12 Modulation
 *
 *  \param u8_value T12 Modulation
 */
INLINE void CCU7_setT12Modulation(uint8 u8_value)
{
  CCU7->MODCTR.bit.T12MODEN = u8_value;
}

/** \brief Enable Multi-Channel Mode
 */
INLINE void CCU7_enMultiChMode(void)
{
  CCU7->MODCTR.bit.MCMEN = 1u;
}

/** \brief Disable Multi-Channel Mode
 */
INLINE void CCU7_disMultiChMode(void)
{
  CCU7->MODCTR.bit.MCMEN = 0u;
}

/** \brief Set T13 Modulation
 *
 *  \param u8_value T13 Modulation
 */
INLINE void CCU7_setT13Modulation(uint8 u8_value)
{
  CCU7->MODCTR.bit.T13MODEN = u8_value;
}

/** \brief Enable Trap Control for all signals (CC70/1/2, COUT70/1/2)
 */
INLINE void CCU7_enTrap(void)
{
  CCU7->TRPCTR.bit.TRPEN = (uint8)0x3F;
}

/** \brief Disable Trap Control
 */
INLINE void CCU7_disTrap(void)
{
  CCU7->TRPCTR.bit.TRPEN = 0u;
}

/** \brief Get Trap Control
 *  This function returns '1' , if Trap is enabled for all signals (CC70/1/2, COUT70/1/2),
 *  otherwise it returns '0'.
 *
 * \return uint8 Trap Control
 */
INLINE uint8 CCU7_getTrapConfig(void)
{
  uint8 u8_trpen = 0u;

  if ((uint8)CCU7->TRPCTR.bit.TRPEN == 0x3Fu)
  {
    /* all bits set */
    u8_trpen = 1u;
  }

  return u8_trpen;
}

/** \brief Enable Trap Pin
 */
INLINE void CCU7_enTrapPin(void)
{
  CCU7->TRPCTR.bit.TRPPEN = 1u;
}

/** \brief Disable Trap Pin
 */
INLINE void CCU7_disTrapPin(void)
{
  CCU7->TRPCTR.bit.TRPPEN = 0u;
}

/** \brief Set Multi-Channel PWM Pattern Shadow
 *
 *  \param u8_value Multi-Channel PWM Pattern Shadow
 */
INLINE void CCU7_setMultiChModePWMPatternShadow(uint8 u8_value)
{
  CCU7->MCMOUTS.bit.MCMPS = u8_value;
}

/** \brief Set Shadow Transfer Request for Multi-Channel Mode
 */
INLINE void CCU7_setMultiChModeShadowTransferReq(void)
{
  CCU7->MCMOUTS.bit.STRMCM = 1u;
}

/** \brief Set Expected Hall Pattern Shadow
 *
 *  \param u8_value Expected Hall Pattern Shadow
 */
INLINE void CCU7_setHallPatternExpectedShadow(uint8 u8_value)
{
  CCU7->MCMOUTS.bit.EXPHS = u8_value;
}

/** \brief Set Current Hall Pattern Shadow
 *
 *  \param u8_value Current Hall Pattern Shadow
 */
INLINE void CCU7_setHallPatternCurrentShadow(uint8 u8_value)
{
  CCU7->MCMOUTS.bit.CURHS = u8_value;
}

/** \brief Set Shadow Transfer Request for the Hall Pattern
 */
INLINE void CCU7_setHallShadowTransferReq(void)
{
  CCU7->MCMOUTS.bit.STRHP = 1u;
}

/** \brief Get Multi-Channel PWM Pattern
 *
 * \return uint8 Multi-Channel PWM Pattern
 */
INLINE uint8 CCU7_getMultiChModePWMPattern(void)
{
  return (uint8)CCU7->MCMOUT.bit.MCMP;
}

/** \brief Set Switching Selection
 *
 *  \param e_value Switching Selection
 */
INLINE void CCU7_setMultiChModeShadowTransferTrig(tCCU7_MultiChMode_SWSEL e_value)
{
  CCU7->MCMCTR.bit.SWSEL = (uint8)e_value;
}

/** \brief Set Switching Synchronization
 *
 *  \param e_value Switching Synchronization
 */
INLINE void CCU7_setMultiChModeShadowTransferSync(tCCU7_MultiChMode_SWSYN e_value)
{
  CCU7->MCMCTR.bit.SWSYN = (uint8)e_value;
}

/** \brief Clear Lost Bit Event Flag
 */
INLINE void CCU7_clrLostBitEventSts(void)
{
  CCU7->IMON.bit.LBE = 1u;
}

/** \brief Get Lost Bit Event Flag
 *
 * \return uint8 Lost Bit Event Flag
 */
INLINE uint8 CCU7_getLostBitEventSts(void)
{
  return (uint8)CCU7->IMON.bit.LBE;
}

/** \brief Enable Interrupt for Lost Bit Event - LBEEN
 */
INLINE void CCU7_enLostBitEventInt(void)
{
  CCU7->LI.bit.LBEEN = 1u;
}

/** \brief Disable Interrupt for Lost Bit Event - LBEEN
 */
INLINE void CCU7_disLostBitEventInt(void)
{
  CCU7->LI.bit.LBEEN = 0u;
}

/** \brief Get Capture, Compare-Match Rising Edge Flag for CC70A
 *
 * \return uint8 Capture, Compare-Match Rising Edge Flag for CC70A
 */
INLINE uint8 CCU7_getCC70ACmpMatchRiseIntSts(void)
{
  return (uint8)CCU7->IS.bit.ICC70R;
}

/** \brief Get Capture, Compare-Match Falling Edge Flag for CC70A
 *
 * \return uint8 Capture, Compare-Match Falling Edge Flag for CC70A
 */
INLINE uint8 CCU7_getCC70ACmpMatchFallIntSts(void)
{
  return (uint8)CCU7->IS.bit.ICC70F;
}

/** \brief Get Capture, Compare-Match Rising Edge Flag for CC71A
 *
 * \return uint8 Capture, Compare-Match Rising Edge Flag for CC71A
 */
INLINE uint8 CCU7_getCC71ACmpMatchRiseIntSts(void)
{
  return (uint8)CCU7->IS.bit.ICC71R;
}

/** \brief Get Capture, Compare-Match Falling Edge Flag for CC71A
 *
 * \return uint8 Capture, Compare-Match Falling Edge Flag for CC71A
 */
INLINE uint8 CCU7_getCC71ACmpMatchFallIntSts(void)
{
  return (uint8)CCU7->IS.bit.ICC71F;
}

/** \brief Get Capture, Compare-Match Rising Edge Flag for CC72A
 *
 * \return uint8 Capture, Compare-Match Rising Edge Flag for CC72A
 */
INLINE uint8 CCU7_getCC72ACmpMatchRiseIntSts(void)
{
  return (uint8)CCU7->IS.bit.ICC72R;
}

/** \brief Get Capture, Compare-Match Falling Edge Flag for CC72A
 *
 * \return uint8 Capture, Compare-Match Falling Edge Flag for CC72A
 */
INLINE uint8 CCU7_getCC72ACmpMatchFallIntSts(void)
{
  return (uint8)CCU7->IS.bit.ICC72F;
}

/** \brief Get T12 One-Match Flag
 *
 * \return uint8 T12 One-Match Flag
 */
INLINE uint8 CCU7_getT12OneMatchIntSts(void)
{
  return (uint8)CCU7->IS.bit.T12OM;
}

/** \brief Get T12 Period-Match Flag
 *
 * \return uint8 T12 Period-Match Flag
 */
INLINE uint8 CCU7_getT12PerMatchIntSts(void)
{
  return (uint8)CCU7->IS.bit.T12PM;
}

/** \brief Get T13 Compare-Match Flag
 *
 * \return uint8 T13 Compare-Match Flag
 */
INLINE uint8 CCU7_getT13CmpMatchIntSts(void)
{
  return (uint8)CCU7->IS.bit.T13CM;
}

/** \brief Get T13 Period-Match Flag
 *
 * \return uint8 T13 Period-Match Flag
 */
INLINE uint8 CCU7_getT13PerMatchIntSts(void)
{
  return (uint8)CCU7->IS.bit.T13PM;
}

/** \brief Get Trap Flag (Trap condition fulfilled)
 *
 * \return uint8 Trap Flag
 */
INLINE uint8 CCU7_getTrapCond(void)
{
  return (uint8)CCU7->IS.bit.TRPF;
}

/** \brief Get Trap State (Synchronized to the event selected by CCU7-TRPCTR.bit.TRPM0 and CCU7-TRPCTR.bit.TRPM1). The selected outputs are set to the passive state while Trap State (TRPS) = 1.
 *
 * \return uint8 Trap State
 */
INLINE uint8 CCU7_getTrapIntSts(void)
{
  return (uint8)CCU7->IS.bit.TRPS;
}

/** \brief Get Correct Hall Event Flag
 *
 * \return uint8 Correct Hall Event Flag
 */
INLINE uint8 CCU7_getHallEventCorrectIntSts(void)
{
  return (uint8)CCU7->IS.bit.CHE;
}

/** \brief Get Wrong Hall Event Flag
 *
 * \return uint8 Wrong Hall Event Flag
 */
INLINE uint8 CCU7_getHallEventWrongIntSts(void)
{
  return (uint8)CCU7->IS.bit.WHE;
}

/** \brief Get Hall Idle State Flag
 *
 * \return uint8 Hall Idle State Flag
 */
INLINE uint8 CCU7_getHallIdleIntSts(void)
{
  return (uint8)CCU7->IS.bit.IDLE;
}

/** \brief Get Multi-Channel Mode Shadow Transfer Request Flag
 *
 * \return uint8 Multi-Channel Mode Shadow Transfer RequestFlag
 */
INLINE uint8 CCU7_getMultiChModeShadowTransferReqIntSts(void)
{
  return (uint8)CCU7->IS.bit.STR;
}

/** \brief Clear Capture, Compare-Match Rising Edge Flag for CC70A
 */
INLINE void CCU7_clrCC70ACmpMatchRiseIntSts(void)
{
  CCU7->ISR.bit.RCC70R = 1u;
}

/** \brief Clear Capture, Compare-Match Falling Edge Flag for CC70A
 */
INLINE void CCU7_clrCC70ACmpMatchFallIntSts(void)
{
  CCU7->ISR.bit.RCC70F = 1u;
}

/** \brief Clear Capture, Compare-Match Rising Edge Flag for CC71A
 */
INLINE void CCU7_clrCC71ACmpMatchRiseIntSts(void)
{
  CCU7->ISR.bit.RCC71R = 1u;
}

/** \brief Clear Capture, Compare-Match Falling Edge Flag for CC71A
 */
INLINE void CCU7_clrCC71ACmpMatchFallIntSts(void)
{
  CCU7->ISR.bit.RCC71F = 1u;
}

/** \brief Clear Capture, Compare-Match Rising Edge Flag for CC72A
 */
INLINE void CCU7_clrCC72ACmpMatchRiseIntSts(void)
{
  CCU7->ISR.bit.RCC72R = 1u;
}

/** \brief Clear Capture, Compare-Match Falling Edge Flag for CC72A
 */
INLINE void CCU7_clrCC72ACmpMatchFallIntSts(void)
{
  CCU7->ISR.bit.RCC72F = 1u;
}

/** \brief Clear T12 One-Match Flag
 */
INLINE void CCU7_clrT12OneMatchIntSts(void)
{
  CCU7->ISR.bit.RT12OM = 1u;
}

/** \brief Clear T12 Period-Match Flag
 */
INLINE void CCU7_clrT12PerMatchIntSts(void)
{
  CCU7->ISR.bit.RT12PM = 1u;
}

/** \brief Clear T13 Compare-Match Flag
 */
INLINE void CCU7_clrT13CmpMatchIntSts(void)
{
  CCU7->ISR.bit.RT13CM = 1u;
}

/** \brief Clear T13 Period-Match Flag
 */
INLINE void CCU7_clrT13PerMatchIntSts(void)
{
  CCU7->ISR.bit.RT13PM = 1u;
}

/** \brief Clear Trap Flag
 */
INLINE void CCU7_clrTrapIntSts(void)
{
  CCU7->ISR.bit.RTRPF = 1u;
}

/** \brief Clear Correct Hall Event Flag
 */
INLINE void CCU7_clrHallEventCorrectIntSts(void)
{
  CCU7->ISR.bit.RCHE = 1u;
}

/** \brief Clear Wrong Hall Event Flag
 */
INLINE void CCU7_clrHallEventWrongIntSts(void)
{
  CCU7->ISR.bit.RWHE = 1u;
}

/** \brief Clear Hall Idle Flag
 */
INLINE void CCU7_clrHallIdleIntSts(void)
{
  CCU7->ISR.bit.RIDLE = 1u;
}

/** \brief Clear Multi-Channel Mode STR Flag
 */
INLINE void CCU7_clrMultiChModeShadowTransferReqIntSts(void)
{
  CCU7->ISR.bit.RSTR = 1u;
}

/** \brief Enable Capture, Compare-Match Rising Edge Interrupt for CC70A
 */
INLINE void CCU7_enCC70ACmpMatchRiseInt(void)
{
  CCU7->IEN.bit.ENCC70R = 1u;
}

/** \brief Disable Capture, Compare-Match Rising Edge Interrupt for CC70A
 */
INLINE void CCU7_disCC70ACmpMatchRiseInt(void)
{
  CCU7->IEN.bit.ENCC70R = 0u;
}

/** \brief Enable Capture, Compare-Match Falling Edge Interrupt for CC70A
 */
INLINE void CCU7_enCC70ACmpMatchFallInt(void)
{
  CCU7->IEN.bit.ENCC70F = 1u;
}

/** \brief Disable Capture, Compare-Match Falling Edge Interrupt for CC70A
 */
INLINE void CCU7_disCC70ACmpMatchFallInt(void)
{
  CCU7->IEN.bit.ENCC70F = 0u;
}

/** \brief Enable Capture, Compare-Match Rising Edge Interrupt for CC71A
 */
INLINE void CCU7_enCC71ACmpMatchRiseInt(void)
{
  CCU7->IEN.bit.ENCC71R = 1u;
}

/** \brief Disable Capture, Compare-Match Rising Edge Interrupt for CC71A
 */
INLINE void CCU7_disCC71ACmpMatchRiseInt(void)
{
  CCU7->IEN.bit.ENCC71R = 0u;
}

/** \brief Enable Capture, Compare-Match Falling Edge Interrupt for CC71A
 */
INLINE void CCU7_enCC71ACmpMatchFallInt(void)
{
  CCU7->IEN.bit.ENCC71F = 1u;
}

/** \brief Disable Capture, Compare-Match Falling Edge Interrupt for CC71A
 */
INLINE void CCU7_disCC71ACmpMatchFallInt(void)
{
  CCU7->IEN.bit.ENCC71F = 0u;
}

/** \brief Enable Capture, Compare-Match Rising Edge Interrupt for CC72A
 */
INLINE void CCU7_enCC72ACmpMatchRiseInt(void)
{
  CCU7->IEN.bit.ENCC72R = 1u;
}

/** \brief Disable Capture, Compare-Match Rising Edge Interrupt for CC72A
 */
INLINE void CCU7_disCC72ACmpMatchRiseInt(void)
{
  CCU7->IEN.bit.ENCC72R = 0u;
}

/** \brief Enable Capture, Compare-Match Falling Edge Interrupt for CC72A
 */
INLINE void CCU7_enCC72ACmpMatchFallInt(void)
{
  CCU7->IEN.bit.ENCC72F = 1u;
}

/** \brief Disable Capture, Compare-Match Falling Edge Interrupt for CC72A
 */
INLINE void CCU7_disCC72ACmpMatchFallInt(void)
{
  CCU7->IEN.bit.ENCC72F = 0u;
}

/** \brief Enable Interrupt for T12 One-Match
 */
INLINE void CCU7_enT12OneMatchInt(void)
{
  CCU7->IEN.bit.ENT12OM = 1u;
}

/** \brief Disable Interrupt for T12 One-Match
 */
INLINE void CCU7_disT12OneMatchInt(void)
{
  CCU7->IEN.bit.ENT12OM = 0u;
}

/** \brief Enable Interrupt for T12 Period-Match
 */
INLINE void CCU7_enT12PerMatchInt(void)
{
  CCU7->IEN.bit.ENT12PM = 1u;
}

/** \brief Disable Interrupt for T12 Period-Match
 */
INLINE void CCU7_disT12PerMatchInt(void)
{
  CCU7->IEN.bit.ENT12PM = 0u;
}

/** \brief Enable Interrupt for T13 Compare-Match
 */
INLINE void CCU7_enT13CmpMatchInt(void)
{
  CCU7->IEN.bit.ENT13CM = 1u;
}

/** \brief Disable Interrupt for T13 Compare-Match
 */
INLINE void CCU7_disT13CmpMatchInt(void)
{
  CCU7->IEN.bit.ENT13CM = 0u;
}

/** \brief Enable Interrupt for T13 Period-Match
 */
INLINE void CCU7_enT13PerMatchInt(void)
{
  CCU7->IEN.bit.ENT13PM = 1u;
}

/** \brief Disable Interrupt for T13 Period-Match
 */
INLINE void CCU7_disT13PerMatchInt(void)
{
  CCU7->IEN.bit.ENT13PM = 0u;
}

/** \brief Enable Interrupt for Trap Flag (Trap condition fulfilled)
 */
INLINE void CCU7_enTrapCondInt(void)
{
  CCU7->IEN.bit.ENTRPF = 1u;
}

/** \brief Disable Interrupt for Trap Flag (Trap condition fulfilled)
 */
INLINE void CCU7_disTrapCondInt(void)
{
  CCU7->IEN.bit.ENTRPF = 0u;
}

/** \brief Enable Interrupt for Correct Hall Event
 */
INLINE void CCU7_enHallEventCorrectInt(void)
{
  CCU7->IEN.bit.ENCHE = 1u;
}

/** \brief Disable Interrupt for Correct Hall Event
 */
INLINE void CCU7_disHallEventCorrectInt(void)
{
  CCU7->IEN.bit.ENCHE = 0u;
}

/** \brief Enable Interrupt for Wrong Hall Event
 */
INLINE void CCU7_enHallEventWrongInt(void)
{
  CCU7->IEN.bit.ENWHE = 1u;
}

/** \brief Disable Interrupt for Wrong Hall Event
 */
INLINE void CCU7_disHallEventWrongInt(void)
{
  CCU7->IEN.bit.ENWHE = 0u;
}

/** \brief Enable Hall Idle Interrupt
 */
INLINE void CCU7_enHallIdleInt(void)
{
  CCU7->IEN.bit.ENIDLE = 1u;
}

/** \brief Disable Hall Idle Interrupt
 */
INLINE void CCU7_disHallIdleInt(void)
{
  CCU7->IEN.bit.ENIDLE = 0u;
}

/** \brief Enable Multi-Channel Mode Shadow Transfer Interrupt
 */
INLINE void CCU7_enMultiChModeShadowTransferReqInt(void)
{
  CCU7->IEN.bit.ENSTR = 1u;
}

/** \brief Disable Multi-Channel Mode Shadow Transfer Interrupt
 */
INLINE void CCU7_disMultiChModeShadowTransferReqInt(void)
{
  CCU7->IEN.bit.ENSTR = 0u;
}

/** \brief Get Compare-Match Rising Edge Flag for C70B
 *
 * \return uint8 Compare-Match Rising Edge Flag for C70B
 */
INLINE uint8 CCU7_getC70BCmpMatchRiseIntSts(void)
{
  return (uint8)CCU7->IS_2.bit.ICC70BR;
}

/** \brief Get Compare-Match Falling Edge Flag for C70B
 *
 * \return uint8 Compare-Match Falling Edge Flag for C70B
 */
INLINE uint8 CCU7_getC70BCmpMatchFallIntSts(void)
{
  return (uint8)CCU7->IS_2.bit.ICC70BF;
}

/** \brief Get Compare-Match Rising Edge Flag for C71B
 *
 * \return uint8 Compare-Match Rising Edge Flag for C71B
 */
INLINE uint8 CCU7_getC71BCmpMatchRiseIntSts(void)
{
  return (uint8)CCU7->IS_2.bit.ICC71BR;
}

/** \brief Get Compare-Match Falling Edge Flag for C71B
 *
 * \return uint8 Compare-Match Falling Edge Flag for C71B
 */
INLINE uint8 CCU7_getC71BCmpMatchFallIntSts(void)
{
  return (uint8)CCU7->IS_2.bit.ICC71BF;
}

/** \brief Get Compare-Match Rising Edge Flag for C72B
 *
 * \return uint8 Compare-Match Rising Edge Flag for C72B
 */
INLINE uint8 CCU7_getC72BCmpMatchRiseIntSts(void)
{
  return (uint8)CCU7->IS_2.bit.ICC72BR;
}

/** \brief Get Compare-Match Falling Edge Flag for C72B
 *
 * \return uint8 Compare-Match Falling Edge Flag for C72B
 */
INLINE uint8 CCU7_getC72BCmpMatchFallIntSts(void)
{
  return (uint8)CCU7->IS_2.bit.ICC72BF;
}

/** \brief Get T14 Compare-Match Flag
 *
 * \return uint8 T14 Compare-Match Flag
 */
INLINE uint8 CCU7_getT14CmpMatchIntSts(void)
{
  return (uint8)CCU7->IS_2.bit.T14CM;
}

/** \brief Get T14 Period-Match Flag
 *
 * \return uint8 T14 Period-Match Flag
 */
INLINE uint8 CCU7_getT14PerMatchIntSts(void)
{
  return (uint8)CCU7->IS_2.bit.T14PM;
}

/** \brief Get T15 Compare-Match Flag
 *
 * \return uint8 T15 Compare-Match Flag
 */
INLINE uint8 CCU7_getT15CmpMatchIntSts(void)
{
  return (uint8)CCU7->IS_2.bit.T15CM;
}

/** \brief Get T15 Period-Match Flag
 *
 * \return uint8 T15 Period-Match Flag
 */
INLINE uint8 CCU7_getT15PerMatchIntSts(void)
{
  return (uint8)CCU7->IS_2.bit.T15PM;
}

/** \brief Get T16 Compare-Match Flag
 *
 * \return uint8 T16 Compare-Match Flag
 */
INLINE uint8 CCU7_getT16CmpMatchIntSts(void)
{
  return (uint8)CCU7->IS_2.bit.T16CM;
}

/** \brief Get T16 Period-Match Flag
 *
 * \return uint8 T16 Period-Match Flag
 */
INLINE uint8 CCU7_getT16PerMatchIntSts(void)
{
  return (uint8)CCU7->IS_2.bit.T16PM;
}

/** \brief Clear Compare-Match Rising Edge Flag for C70B
 */
INLINE void CCU7_clrC70BCmpMatchRiseIntSts(void)
{
  CCU7->ISR_2.bit.RCC70BR = 1u;
}

/** \brief Clear Compare-Match Falling Edge Flag for C70B
 */
INLINE void CCU7_clrC70BCmpMatchFallIntSts(void)
{
  CCU7->ISR_2.bit.RCC70BF = 1u;
}

/** \brief Clear Compare-Match Rising Edge Flag for C71B
 */
INLINE void CCU7_clrC71BCmpMatchRiseIntSts(void)
{
  CCU7->ISR_2.bit.RCC71BR = 1u;
}

/** \brief Clear Compare-Match Falling Edge Flag for C71B
 */
INLINE void CCU7_clrC71BCmpMatchFallIntSts(void)
{
  CCU7->ISR_2.bit.RCC71BF = 1u;
}

/** \brief Clear Compare-Match Rising Edge Flag for C72B
 */
INLINE void CCU7_clrC72BCmpMatchRiseIntSts(void)
{
  CCU7->ISR_2.bit.RCC72BR = 1u;
}

/** \brief Clear Compare-Match Falling Edge Flag for C72B
 */
INLINE void CCU7_clrC72BCmpMatchFallIntSts(void)
{
  CCU7->ISR_2.bit.RCC72BF = 1u;
}

/** \brief Clear T14 Compare-Match Flag
 */
INLINE void CCU7_clrT14CmpMatchIntSts(void)
{
  CCU7->ISR_2.bit.RT14CM = 1u;
}

/** \brief Clear T14 Period-Match Flag
 */
INLINE void CCU7_clrT14PerMatchIntSts(void)
{
  CCU7->ISR_2.bit.RT14PM = 1u;
}

/** \brief Clear T15 Compare-Match Flag
 */
INLINE void CCU7_clrT15CmpMatchIntSts(void)
{
  CCU7->ISR_2.bit.RT15CM = 1u;
}

/** \brief Clear T15 Period-Match Flag
 */
INLINE void CCU7_clrT15PerMatchIntSts(void)
{
  CCU7->ISR_2.bit.RT15PM = 1u;
}

/** \brief Clear T16 Compare-Match Flag
 */
INLINE void CCU7_clrT16CmpMatchIntSts(void)
{
  CCU7->ISR_2.bit.RT16CM = 1u;
}

/** \brief Clear T16 Period-Match Flag
 */
INLINE void CCU7_clrT16PerMatchIntSts(void)
{
  CCU7->ISR_2.bit.RT16PM = 1u;
}

/** \brief Enable Compare-Match Rising Edge Interrupt for C70B
 */
INLINE void CCU7_enC70BCmpMatchRiseInt(void)
{
  CCU7->IEN_2.bit.ENCC70BR = 1u;
}

/** \brief Disable Compare-Match Rising Edge Interrupt for C70B
 */
INLINE void CCU7_disC70BCmpMatchRiseInt(void)
{
  CCU7->IEN_2.bit.ENCC70BR = 0u;
}

/** \brief Enable Compare-Match Falling Edge Interrupt for C70B
 */
INLINE void CCU7_enC70BCmpMatchFallInt(void)
{
  CCU7->IEN_2.bit.ENCC70BF = 1u;
}

/** \brief Disable Compare-Match Falling Edge Interrupt for C70B
 */
INLINE void CCU7_disC70BCmpMatchFallInt(void)
{
  CCU7->IEN_2.bit.ENCC70BF = 0u;
}

/** \brief Enable Compare-Match Rising Edge Interrupt for C71B
 */
INLINE void CCU7_enC71BCmpMatchRiseInt(void)
{
  CCU7->IEN_2.bit.ENCC71BR = 1u;
}

/** \brief Disable Compare-Match Rising Edge Interrupt for C71B
 */
INLINE void CCU7_disC71BCmpMatchRiseInt(void)
{
  CCU7->IEN_2.bit.ENCC71BR = 0u;
}

/** \brief Enable Compare-Match Falling Edge Interrupt for C71B
 */
INLINE void CCU7_enC71BCmpMatchFallInt(void)
{
  CCU7->IEN_2.bit.ENCC71BF = 1u;
}

/** \brief Disable Compare-Match Falling Edge Interrupt for C71B
 */
INLINE void CCU7_disC71BCmpMatchFallInt(void)
{
  CCU7->IEN_2.bit.ENCC71BF = 0u;
}

/** \brief Enable Compare-Match Rising Edge Interrupt for C72B
 */
INLINE void CCU7_enC72BCmpMatchRiseInt(void)
{
  CCU7->IEN_2.bit.ENCC72BR = 1u;
}

/** \brief Disable Compare-Match Rising Edge Interrupt for C72B
 */
INLINE void CCU7_disC72BCmpMatchRiseInt(void)
{
  CCU7->IEN_2.bit.ENCC72BR = 0u;
}

/** \brief Enable Compare-Match Falling Edge Interrupt for C72B
 */
INLINE void CCU7_enC72BCmpMatchFallInt(void)
{
  CCU7->IEN_2.bit.ENCC72BF = 1u;
}

/** \brief Disable Compare-Match Falling Edge Interrupt for C72B
 */
INLINE void CCU7_disC72BCmpMatchFallInt(void)
{
  CCU7->IEN_2.bit.ENCC72BF = 0u;
}

/** \brief Enable Interrupt for T14 Compare-Match
 */
INLINE void CCU7_enT14CmpMatchInt(void)
{
  CCU7->IEN_2.bit.ENT14CM = 1u;
}

/** \brief Disable Interrupt for T14 Compare-Match
 */
INLINE void CCU7_disT14CmpMatchInt(void)
{
  CCU7->IEN_2.bit.ENT14CM = 0u;
}

/** \brief Enable Interrupt for T14 Period-Match
 */
INLINE void CCU7_enT14PerMatchInt(void)
{
  CCU7->IEN_2.bit.ENT14PM = 1u;
}

/** \brief Disable Interrupt for T14 Period-Match
 */
INLINE void CCU7_disT14PerMatchInt(void)
{
  CCU7->IEN_2.bit.ENT14PM = 0u;
}

/** \brief Enable Interrupt for T15 Compare-Match
 */
INLINE void CCU7_enT15CmpMatchInt(void)
{
  CCU7->IEN_2.bit.ENT15CM = 1u;
}

/** \brief Disable Interrupt for T15 Compare-Match
 */
INLINE void CCU7_disT15CmpMatchInt(void)
{
  CCU7->IEN_2.bit.ENT15CM = 0u;
}

/** \brief Enable Interrupt for T15 Period-Match
 */
INLINE void CCU7_enT15PerMatchInt(void)
{
  CCU7->IEN_2.bit.ENT15PM = 1u;
}

/** \brief Disable Interrupt for T15 Period-Match
 */
INLINE void CCU7_disT15PerMatchInt(void)
{
  CCU7->IEN_2.bit.ENT15PM = 0u;
}

/** \brief Enable Interrupt for T16 Compare-Match
 */
INLINE void CCU7_enT16CmpMatchInt(void)
{
  CCU7->IEN_2.bit.ENT16CM = 1u;
}

/** \brief Disable Interrupt for T16 Compare-Match
 */
INLINE void CCU7_disT16CmpMatchInt(void)
{
  CCU7->IEN_2.bit.ENT16CM = 0u;
}

/** \brief Enable Interrupt for T16 Period-Match
 */
INLINE void CCU7_enT16PerMatchInt(void)
{
  CCU7->IEN_2.bit.ENT16PM = 1u;
}

/** \brief Disable Interrupt for T16 Period-Match
 */
INLINE void CCU7_disT16PerMatchInt(void)
{
  CCU7->IEN_2.bit.ENT16PM = 0u;
}

/** \brief Set T12 Shadow Transfer Request
 */
INLINE void CCU7_setT12ShadowTransferReq(void)
{
  CCU7->TCTR3.bit.T12STR = 1u;
}

/** \brief Set T13 Shadow Transfer Request
 */
INLINE void CCU7_setT13ShadowTransferReq(void)
{
  CCU7->TCTR3.bit.T13STR = 1u;
}

/** \brief Set T14 Shadow Transfer Request
 */
INLINE void CCU7_setT14ShadowTransferReq(void)
{
  CCU7->TCTR3.bit.T14STR = 1u;
}

/** \brief Set T15 Shadow Transfer Request
 */
INLINE void CCU7_setT15ShadowTransferReq(void)
{
  CCU7->TCTR3.bit.T15STR = 1u;
}

/** \brief Set T16 Shadow Transfer Request
 */
INLINE void CCU7_setT16ShadowTransferReq(void)
{
  CCU7->TCTR3.bit.T16STR = 1u;
}

/** @}*/

#endif /* _CCU7_H */

