/*
 ***********************************************************************************************************************
 *
 * Copyright (c) 2015, Infineon Technologies AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,are permitted provided that the
 * following conditions are met:
 *
 *   Redistributions of source code must retain the above copyright notice, this list of conditions and the  following
 *   disclaimer.
 *
 *   Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
 *   following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 *   Neither the name of the copyright holders nor the names of its contributors may be used to endorse or promote
 *   products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  OF THE
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 **********************************************************************************************************************/

/*******************************************************************************
**                                  Includes                                  **
*******************************************************************************/

#include "ssc.h"

/*******************************************************************************
**                        Private Constant Declarations                       **
*******************************************************************************/

/*******************************************************************************
**                         Private Macro Declarations                         **
*******************************************************************************/

/*******************************************************************************
**                        Private Variable Definitions                        **
*******************************************************************************/

/*******************************************************************************
**                        Private Function Declarations                       **
*******************************************************************************/

/*******************************************************************************
**                         Global Function Definitions                        **
*******************************************************************************/

/** \brief Initialize all CW registers of the SSC0 module
 *
 * \param none
 * \return sint8 0: success, <0: error codes
 */
sint8 SSC0_init(void)
{
  sint8 e_returnCode;
  e_returnCode = ERR_LOG_SUCCESS;

  if ((SCU_PMCON & SCU_PMCON_SSC0_DIS_Msk) == 0)
  {
    SSC0->CON.reg = (uint32)SSC0_CON;
    SSC0->INSEL.reg = (uint32)SSC0_INSEL;
    SSC0->CSTIM.reg = (uint32)SSC0_CSTIM;
    SSC0->BR.reg = (uint32)SSC0_BR;
  }
    else
  {
    e_returnCode = ERR_LOG_CODE_MODULE_DISABLED_IN_CW;
  }
  
  return e_returnCode;
}

/** \brief Initialize all CW registers of the SSC1 module
 *
 * \param none
 * \return sint8 0: success, <0: error codes
 */
sint8 SSC1_init(void)
{
  sint8 e_returnCode;
  e_returnCode = ERR_LOG_SUCCESS;

  if ((SCU_PMCON & SCU_PMCON_SSC1_DIS_Msk) == 0)
  {
    SSC1->CON.reg = (uint32)SSC1_CON;
    SSC1->INSEL.reg = (uint32)SSC1_INSEL;
    SSC1->CSTIM.reg = (uint32)SSC1_CSTIM;
    SSC1->BR.reg = (uint32)SSC1_BR;
  }
    else
  {
    e_returnCode = ERR_LOG_CODE_MODULE_DISABLED_IN_CW;
  }
  
  return e_returnCode;
}

/*******************************************************************************
**                       Deprecated Function Definitions                      **
*******************************************************************************/

void SSC0_setEmptyTXBufferIntSts(void)
{
  /* Do not change this at runtime, use the ConfigWizard to configure this feature! */
}

void SSC0_setEmptyRXBufferIntSts(void)
{
  /* Do not change this at runtime, use the ConfigWizard to configure this feature! */
}

void SSC0_setTXErrIntSts(void)
{
  /* Do not change this at runtime, use the ConfigWizard to configure this feature! */
}

void SSC0_setRXErrIntSts(void)
{
  /* Do not change this at runtime, use the ConfigWizard to configure this feature! */
}

void SSC0_setPhaseErrIntSts(void)
{
  /* Do not change this at runtime, use the ConfigWizard to configure this feature! */
}

void SSC0_setBaudrateErrIntSts(void)
{
  /* Do not change this at runtime, use the ConfigWizard to configure this feature! */
}

void SSC1_setEmptyTXBufferIntSts(void)
{
  /* Do not change this at runtime, use the ConfigWizard to configure this feature! */
}

void SSC1_setEmptyRXBufferIntSts(void)
{
  /* Do not change this at runtime, use the ConfigWizard to configure this feature! */
}

void SSC1_setTXErrIntSts(void)
{
  /* Do not change this at runtime, use the ConfigWizard to configure this feature! */
}

void SSC1_setRXErrIntSts(void)
{
  /* Do not change this at runtime, use the ConfigWizard to configure this feature! */
}

void SSC1_setPhaseErrIntSts(void)
{
  /* Do not change this at runtime, use the ConfigWizard to configure this feature! */
}

void SSC1_setBaudrateErrIntSts(void)
{
  /* Do not change this at runtime, use the ConfigWizard to configure this feature! */
}
