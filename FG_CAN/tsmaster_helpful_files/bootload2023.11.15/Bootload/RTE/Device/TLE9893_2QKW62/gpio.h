/*
 ***********************************************************************************************************************
 *
 * Copyright (c) Infineon Technologies AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,are permitted provided that the
 * following conditions are met:
 *
 *   Redistributions of source code must retain the above copyright notice, this list of conditions and the  following
 *   disclaimer.
 *
 *   Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
 *   following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 *   Neither the name of the copyright holders nor the names of its contributors may be used to endorse or promote
 *   products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  OF THE
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 **********************************************************************************************************************/
/**
 * \file     gpio.h
 *
 * \brief    GPIO low level access library
 *
 * \version  V0.2.4
 * \date     12. Nov 2021
 *
 * \note
 */

/** \addtogroup GPIO_api
 *  @{
 */

/* Generated by generate_functions_02_xlsx2func.py, version 1.0.1 on 10. Feb 2021
 * from File 'gpio.xlsx', version 0.3.0
 */

/*******************************************************************************
**                             Author(s) Identity                             **
********************************************************************************
** Initials     Name                                                          **
** ---------------------------------------------------------------------------**
** JO           Julia Ott                                                     **
** BG           Blandine Guillot                                              **
** DM           Daniel Mysliwitz                                              **
*******************************************************************************/

/*******************************************************************************
**                          Revision Control History                          **
********************************************************************************
** V0.1.0: 2020-08-04, JO:   Initial version                                  **
** V0.2.0: 2020-10-14, JO:   EP-516: Added functions to configure ATLSEL of   **
**                           the GPIOS (P0.x, P1.x)                           **
** V0.2.1: 2020-10-15, JO:   EP-523: Updated parameter names                  **
** V0.2.2: 2020-11-12, JO:   EP-590: Removed \param none and \return none to  **
**                           avoid doxygen warning                            **
**                           Added end of group for doxygen                   **
** V0.2.3: 2021-02-10, JO:   EP-696: Changed from anonymous to named typedefs **
**                           to prevent MISRA warning                         **
** V0.2.4: 2021-11-12, JO:   EP-937: Updated copyright and branding           **
*******************************************************************************/

#ifndef _GPIO_H
#define _GPIO_H

/*******************************************************************************
**                                  Includes                                  **
*******************************************************************************/
#include "tle_variants.h"
#include "types.h"
#include "gpio_defines.h"
#include "tle989x.h"

/*******************************************************************************
**                          Global Macro Declarations                         **
*******************************************************************************/

/*******************************************************************************
**                          Global Type Declarations                          **
*******************************************************************************/
/** \enum tGPIO_P0_0_ALTSEL
 *  \brief Enum for the GPIO Alternate output select
 */
typedef enum _tGPIO_P0_0_ALTSEL
{
  GPIO_P0_0_ALTSEL_GPIO = 0,
  GPIO_P0_0_ALTSEL_CCU7_CC72 = 1,
  GPIO_P0_0_ALTSEL_T21_EXF2 = 2,
  GPIO_P0_0_ALTSEL_UART0_RXDO = 3
} tGPIO_P0_0_ALTSEL;

/** \enum tGPIO_P0_1_ALTSEL
 *  \brief Enum for the GPIO Alternate output select
 */
typedef enum _tGPIO_P0_1_ALTSEL
{
  GPIO_P0_1_ALTSEL_GPIO = 0,
  GPIO_P0_1_ALTSEL_UART0_TXD = 1,
  GPIO_P0_1_ALTSEL_GPT12_T6OUT = 2,
  GPIO_P0_1_ALTSEL_MULTICAN_TXDC = 3,
  GPIO_P0_1_ALTSEL_CANTRX_RXD = 4,
  GPIO_P0_1_ALTSEL_SSC0_MTSR = 5,
  GPIO_P0_1_ALTSEL_BEMFC_PH1_ZC_STS = 6,
  GPIO_P0_1_ALTSEL_CCU7_COUT73 = 7
} tGPIO_P0_1_ALTSEL;

/** \enum tGPIO_P0_2_ALTSEL
 *  \brief Enum for the GPIO Alternate output select
 */
typedef enum _tGPIO_P0_2_ALTSEL
{
  GPIO_P0_2_ALTSEL_GPIO = 0,
  GPIO_P0_2_ALTSEL_UART1_TXD = 1,
  GPIO_P0_2_ALTSEL_GPT12_T3OUT = 2,
  GPIO_P0_2_ALTSEL_SSC0_MRST = 3,
  GPIO_P0_2_ALTSEL_SSC1_CS0 = 4,
  GPIO_P0_2_ALTSEL_BEMFC_PH2_ZC_STS = 5,
  GPIO_P0_2_ALTSEL_CCU7_COUT73 = 6
} tGPIO_P0_2_ALTSEL;

/** \enum tGPIO_P0_3_ALTSEL
 *  \brief Enum for the GPIO Alternate output select
 */
typedef enum _tGPIO_P0_3_ALTSEL
{
  GPIO_P0_3_ALTSEL_GPIO = 0,
  GPIO_P0_3_ALTSEL_SSC0_SCLK = 1,
  GPIO_P0_3_ALTSEL_BEMFC_PH3_ZC_STS = 2,
  GPIO_P0_3_ALTSEL_CCU7_COUT70 = 3,
  GPIO_P0_3_ALTSEL_SCU_CLKOUT = 4,
  GPIO_P0_3_ALTSEL_ADC1_CMPLO3 = 5,
  GPIO_P0_3_ALTSEL_UART0_TXD = 6,
  GPIO_P0_3_ALTSEL_SDADC_CMP1 = 7
} tGPIO_P0_3_ALTSEL;

/** \enum tGPIO_P0_4_ALTSEL
 *  \brief Enum for the GPIO Alternate output select
 */
typedef enum _tGPIO_P0_4_ALTSEL
{
  GPIO_P0_4_ALTSEL_GPIO = 0,
  GPIO_P0_4_ALTSEL_CCU7_CC70 = 1,
  GPIO_P0_4_ALTSEL_SDADC_DOUT0 = 2,
  GPIO_P0_4_ALTSEL_SSC0_MTSR = 3,
  GPIO_P0_4_ALTSEL_UART1_TXD = 4,
  GPIO_P0_4_ALTSEL_GPT12_T3OUT = 5
} tGPIO_P0_4_ALTSEL;

/** \enum tGPIO_P0_5_ALTSEL
 *  \brief Enum for the GPIO Alternate output select
 */
typedef enum _tGPIO_P0_5_ALTSEL
{
  GPIO_P0_5_ALTSEL_GPIO = 0,
  GPIO_P0_5_ALTSEL_CCU7_COUT70 = 1,
  GPIO_P0_5_ALTSEL_SDADC_DOUT0 = 2,
  GPIO_P0_5_ALTSEL_SSC0_SCLK = 3,
  GPIO_P0_5_ALTSEL_SDADC_CMP1 = 4
} tGPIO_P0_5_ALTSEL;

/** \enum tGPIO_P0_6_ALTSEL
 *  \brief Enum for the GPIO Alternate output select
 */
typedef enum _tGPIO_P0_6_ALTSEL
{
  GPIO_P0_6_ALTSEL_GPIO = 0,
  GPIO_P0_6_ALTSEL_CCU7_CC71 = 1,
  GPIO_P0_6_ALTSEL_SDADC_DOUT1 = 2,
  GPIO_P0_6_ALTSEL_SSC0_MRST = 3,
  GPIO_P0_6_ALTSEL_SSC1_CS3 = 4,
  GPIO_P0_6_ALTSEL_SDADC_CMP0 = 5,
  GPIO_P0_6_ALTSEL_ADC1_CMPUP3 = 6,
  GPIO_P0_6_ALTSEL_SSC0_MTSR = 7
} tGPIO_P0_6_ALTSEL;

/** \enum tGPIO_P0_7_ALTSEL
 *  \brief Enum for the GPIO Alternate output select
 */
typedef enum _tGPIO_P0_7_ALTSEL
{
  GPIO_P0_7_ALTSEL_GPIO = 0,
  GPIO_P0_7_ALTSEL_CCU7_COUT71 = 1,
  GPIO_P0_7_ALTSEL_SDADC_DOUT1 = 2,
  GPIO_P0_7_ALTSEL_SSC1_SCLK = 3,
  GPIO_P0_7_ALTSEL_MULTICAN_TXDC = 4,
  GPIO_P0_7_ALTSEL_UART0_TXD = 5,
  GPIO_P0_7_ALTSEL_GPT12_T6OUT = 6,
  GPIO_P0_7_ALTSEL_ADC2_CMPUP7 = 7
} tGPIO_P0_7_ALTSEL;

/** \enum tGPIO_P0_8_ALTSEL
 *  \brief Enum for the GPIO Alternate output select
 */
typedef enum _tGPIO_P0_8_ALTSEL
{
  GPIO_P0_8_ALTSEL_GPIO = 0,
  GPIO_P0_8_ALTSEL_CCU7_COUT72 = 1,
  GPIO_P0_8_ALTSEL_SDADC_MCLK = 2,
  GPIO_P0_8_ALTSEL_SSC1_MTSR = 3,
  GPIO_P0_8_ALTSEL_ADC1_CMPLO1 = 4
} tGPIO_P0_8_ALTSEL;

/** \enum tGPIO_P0_9_ALTSEL
 *  \brief Enum for the GPIO Alternate output select
 */
typedef enum _tGPIO_P0_9_ALTSEL
{
  GPIO_P0_9_ALTSEL_GPIO = 0,
  GPIO_P0_9_ALTSEL_CCU7_CC72 = 1,
  GPIO_P0_9_ALTSEL_SDADC_MCLK = 2,
  GPIO_P0_9_ALTSEL_SSC1_MRST = 3,
  GPIO_P0_9_ALTSEL_SSC0_CS3 = 4,
  GPIO_P0_9_ALTSEL_ADC1_CMPLO0 = 5,
  GPIO_P0_9_ALTSEL_SSC1_MTSR = 6
} tGPIO_P0_9_ALTSEL;

/** \enum tGPIO_P0_10_ALTSEL
 *  \brief Enum for the GPIO Alternate output select
 */
typedef enum _tGPIO_P0_10_ALTSEL
{
  GPIO_P0_10_ALTSEL_GPIO = 0,
  GPIO_P0_10_ALTSEL_SCU_RESET = 1,
  GPIO_P0_10_ALTSEL_SSC1_CS1 = 2,
  GPIO_P0_10_ALTSEL_SSC0_CS1 = 3,
  GPIO_P0_10_ALTSEL_ADC1_CMPLO2 = 4,
  GPIO_P0_10_ALTSEL_T20_EXF2 = 5,
  GPIO_P0_10_ALTSEL_CCU7_COUT72 = 6,
  GPIO_P0_10_ALTSEL_ADC2_CMPLO7 = 7
} tGPIO_P0_10_ALTSEL;

/** \enum tGPIO_DIR
 *  \brief Enum for the GPIO Direction control bit
 */
typedef enum _tGPIO_DIR
{
  GPIO_DIR_INPUT = 0,
  GPIO_DIR_OUTPUT = 1
} tGPIO_DIR;

/** \enum tGPIO_STATE
 *  \brief Enum for the GPIO Output bit
 */
typedef enum _tGPIO_STATE
{
  GPIO_STATE_HIGH =   0x00000001,
  GPIO_STATE_LOW =    0x00010000,
  GPIO_STATE_TOGGLE = 0x00010001
} tGPIO_STATE;

/** \enum tGPIO_P1_0_ALTSEL
 *  \brief Enum for the GPIO Alternate output select
 */
typedef enum _tGPIO_P1_0_ALTSEL
{
  GPIO_P1_0_ALTSEL_GPIO = 0,
  GPIO_P1_0_ALTSEL_SSC1_SCLK = 1,
  GPIO_P1_0_ALTSEL_CCU7_CC71 = 2,
  GPIO_P1_0_ALTSEL_GPT12_T6OUT = 3,
  GPIO_P1_0_ALTSEL_UART1_RXDO = 4,
  GPIO_P1_0_ALTSEL_ADC1_CMPUP2 = 5,
  GPIO_P1_0_ALTSEL_SDADC_CMP0 = 6,
  GPIO_P1_0_ALTSEL_ADC2_CMPLO6 = 7
} tGPIO_P1_0_ALTSEL;

/** \enum tGPIO_P1_1_ALTSEL
 *  \brief Enum for the GPIO Alternate output select
 */
typedef enum _tGPIO_P1_1_ALTSEL
{
  GPIO_P1_1_ALTSEL_GPIO = 0,
  GPIO_P1_1_ALTSEL_SSC1_MTSR = 1,
  GPIO_P1_1_ALTSEL_CCU7_COUT71 = 2,
  GPIO_P1_1_ALTSEL_UART1_TXD = 3,
  GPIO_P1_1_ALTSEL_GPT12_T3OUT = 4,
  GPIO_P1_1_ALTSEL_CANTRX_RXD = 5,
  GPIO_P1_1_ALTSEL_ADC1_CMPUP1 = 6,
  GPIO_P1_1_ALTSEL_ADC2_CMPUP6 = 7
} tGPIO_P1_1_ALTSEL;

/** \enum tGPIO_P1_2_ALTSEL
 *  \brief Enum for the GPIO Alternate output select
 */
typedef enum _tGPIO_P1_2_ALTSEL
{
  GPIO_P1_2_ALTSEL_GPIO = 0,
  GPIO_P1_2_ALTSEL_SSC1_MRST = 1,
  GPIO_P1_2_ALTSEL_CCU7_CC70 = 2,
  GPIO_P1_2_ALTSEL_SSC0_CS0 = 3,
  GPIO_P1_2_ALTSEL_SCU_CLKOUT = 4,
  GPIO_P1_2_ALTSEL_BEMFC_PH3_ZC_STS = 5,
  GPIO_P1_2_ALTSEL_ADC1_CMPUP0 = 6,
  GPIO_P1_2_ALTSEL_SSC1_MTSR = 7
} tGPIO_P1_2_ALTSEL;

/** \enum tGPIO_P1_3_ALTSEL
 *  \brief Enum for the GPIO Alternate output select
 */
typedef enum _tGPIO_P1_3_ALTSEL
{
  GPIO_P1_3_ALTSEL_GPIO = 0,
  GPIO_P1_3_ALTSEL_SSC0_CS2 = 1,
  GPIO_P1_3_ALTSEL_CCU7_COUT73 = 2,
  GPIO_P1_3_ALTSEL_MULTICAN_TXDC = 3,
  GPIO_P1_3_ALTSEL_UART0_TXD = 4,
  GPIO_P1_3_ALTSEL_GPT12_T6OUT = 5,
  GPIO_P1_3_ALTSEL_BEMFC_PH1_ZC_STS = 6
} tGPIO_P1_3_ALTSEL;

/** \enum tGPIO_P1_4_ALTSEL
 *  \brief Enum for the GPIO Alternate output select
 */
typedef enum _tGPIO_P1_4_ALTSEL
{
  GPIO_P1_4_ALTSEL_GPIO = 0,
  GPIO_P1_4_ALTSEL_SSC1_CS2 = 1,
  GPIO_P1_4_ALTSEL_SCU_CLKOUT = 2,
  GPIO_P1_4_ALTSEL_BEMFC_PH2_ZC_STS = 3,
  GPIO_P1_4_ALTSEL_T21_EXF2 = 4
} tGPIO_P1_4_ALTSEL;


/*******************************************************************************
**                        Global Function Declarations                        **
*******************************************************************************/
INLINE void   GPIO_setP00Altsel(tGPIO_P0_0_ALTSEL e_value);
INLINE void   GPIO_setP01Altsel(tGPIO_P0_1_ALTSEL e_value);
INLINE void   GPIO_setP02Altsel(tGPIO_P0_2_ALTSEL e_value);
INLINE void   GPIO_setP03Altsel(tGPIO_P0_3_ALTSEL e_value);
INLINE void   GPIO_setP04Altsel(tGPIO_P0_4_ALTSEL e_value);
INLINE void   GPIO_setP05Altsel(tGPIO_P0_5_ALTSEL e_value);
INLINE void   GPIO_setP06Altsel(tGPIO_P0_6_ALTSEL e_value);
INLINE void   GPIO_setP07Altsel(tGPIO_P0_7_ALTSEL e_value);
INLINE void   GPIO_setP08Altsel(tGPIO_P0_8_ALTSEL e_value);
INLINE void   GPIO_setP09Altsel(tGPIO_P0_9_ALTSEL e_value);
INLINE void   GPIO_setP010Altsel(tGPIO_P0_10_ALTSEL e_value);
INLINE void   GPIO_setP00Dir(tGPIO_DIR e_value);
INLINE void   GPIO_setP01Dir(tGPIO_DIR e_value);
INLINE void   GPIO_setP02Dir(tGPIO_DIR e_value);
INLINE void   GPIO_setP03Dir(tGPIO_DIR e_value);
INLINE void   GPIO_setP04Dir(tGPIO_DIR e_value);
INLINE void   GPIO_setP05Dir(tGPIO_DIR e_value);
INLINE void   GPIO_setP06Dir(tGPIO_DIR e_value);
INLINE void   GPIO_setP07Dir(tGPIO_DIR e_value);
INLINE void   GPIO_setP08Dir(tGPIO_DIR e_value);
INLINE void   GPIO_setP09Dir(tGPIO_DIR e_value);
INLINE void   GPIO_setP010Dir(tGPIO_DIR e_value);
INLINE uint8 GPIO_getP00State(void);
INLINE uint8 GPIO_getP01State(void);
INLINE uint8 GPIO_getP02State(void);
INLINE uint8 GPIO_getP03State(void);
INLINE uint8 GPIO_getP04State(void);
INLINE uint8 GPIO_getP05State(void);
INLINE uint8 GPIO_getP06State(void);
INLINE uint8 GPIO_getP07State(void);
INLINE uint8 GPIO_getP08State(void);
INLINE uint8 GPIO_getP09State(void);
INLINE uint8 GPIO_getP010State(void);
INLINE void   GPIO_setP00State(tGPIO_STATE e_value);
INLINE void   GPIO_setP01State(tGPIO_STATE e_value);
INLINE void   GPIO_setP02State(tGPIO_STATE e_value);
INLINE void   GPIO_setP03State(tGPIO_STATE e_value);
INLINE void   GPIO_setP04State(tGPIO_STATE e_value);
INLINE void   GPIO_setP05State(tGPIO_STATE e_value);
INLINE void   GPIO_setP06State(tGPIO_STATE e_value);
INLINE void   GPIO_setP07State(tGPIO_STATE e_value);
INLINE void   GPIO_setP08State(tGPIO_STATE e_value);
INLINE void   GPIO_setP09State(tGPIO_STATE e_value);
INLINE void   GPIO_setP010State(tGPIO_STATE e_value);
INLINE void   GPIO_setP10Altsel(tGPIO_P1_0_ALTSEL e_value);
INLINE void   GPIO_setP11Altsel(tGPIO_P1_1_ALTSEL e_value);
INLINE void   GPIO_setP12Altsel(tGPIO_P1_2_ALTSEL e_value);
INLINE void   GPIO_setP13Altsel(tGPIO_P1_3_ALTSEL e_value);
INLINE void   GPIO_setP14Altsel(tGPIO_P1_4_ALTSEL e_value);
INLINE void   GPIO_setP10Dir(tGPIO_DIR e_value);
INLINE void   GPIO_setP11Dir(tGPIO_DIR e_value);
INLINE void   GPIO_setP12Dir(tGPIO_DIR e_value);
INLINE void   GPIO_setP13Dir(tGPIO_DIR e_value);
INLINE void   GPIO_setP14Dir(tGPIO_DIR e_value);
INLINE uint8 GPIO_getP10State(void);
INLINE uint8 GPIO_getP11State(void);
INLINE uint8 GPIO_getP12State(void);
INLINE uint8 GPIO_getP13State(void);
INLINE uint8 GPIO_getP14State(void);
INLINE void   GPIO_setP10State(tGPIO_STATE e_value);
INLINE void   GPIO_setP11State(tGPIO_STATE e_value);
INLINE void   GPIO_setP12State(tGPIO_STATE e_value);
INLINE void   GPIO_setP13State(tGPIO_STATE e_value);
INLINE void   GPIO_setP14State(tGPIO_STATE e_value);
INLINE uint8 GPIO_getP20State(void);
INLINE uint8 GPIO_getP21State(void);
INLINE uint8 GPIO_getP22State(void);
INLINE uint8 GPIO_getP23State(void);
INLINE uint8 GPIO_getP24State(void);
INLINE uint8 GPIO_getP25State(void);
INLINE uint8 GPIO_getP26State(void);
INLINE uint8 GPIO_getP27State(void);
INLINE uint8 GPIO_getP28State(void);
INLINE uint8 GPIO_getP29State(void);
INLINE void GPIO_enP20Input(void);
INLINE void GPIO_disP20Input(void);
INLINE void GPIO_enP21Input(void);
INLINE void GPIO_disP21Input(void);
INLINE void GPIO_enP22Input(void);
INLINE void GPIO_disP22Input(void);
INLINE void GPIO_enP23Input(void);
INLINE void GPIO_disP23Input(void);
INLINE void GPIO_enP24Input(void);
INLINE void GPIO_disP24Input(void);
INLINE void GPIO_enP25Input(void);
INLINE void GPIO_disP25Input(void);
INLINE void GPIO_enP26Input(void);
INLINE void GPIO_disP26Input(void);
INLINE void GPIO_enP27Input(void);
INLINE void GPIO_disP27Input(void);
INLINE void GPIO_enP28Input(void);
INLINE void GPIO_disP28Input(void);
INLINE void GPIO_enP29Input(void);
INLINE void GPIO_disP29Input(void);
void GPIO_init(void);

/*******************************************************************************
**                     Global Inline Function Definitions                     **
*******************************************************************************/
/** \brief Set P0.0 Alternate Select
 * 
 *  \param e_value P0.0 Alternate Select
 */
INLINE void GPIO_setP00Altsel(tGPIO_P0_0_ALTSEL e_value)
{
  GPIO->P0_ALTSEL0.bit.ALTSEL0 = (uint8)e_value;
}

/** \brief Set P0.1 Alternate Select
 * 
 *  \param e_value P0.1 Alternate Select
 */
INLINE void GPIO_setP01Altsel(tGPIO_P0_1_ALTSEL e_value)
{
  GPIO->P0_ALTSEL0.bit.ALTSEL1 = (uint8)e_value;
}

/** \brief Set P0.2 Alternate Select
 * 
 *  \param e_value P0.2 Alternate Select
 */
INLINE void GPIO_setP02Altsel(tGPIO_P0_2_ALTSEL e_value)
{
  GPIO->P0_ALTSEL0.bit.ALTSEL2 = (uint8)e_value;
}

/** \brief Set P0.3 Alternate Select
 * 
 *  \param e_value P0.3 Alternate Select
 */
INLINE void GPIO_setP03Altsel(tGPIO_P0_3_ALTSEL e_value)
{
  GPIO->P0_ALTSEL0.bit.ALTSEL3 = (uint8)e_value;
}

/** \brief Set P0.4 Alternate Select
 * 
 *  \param e_value P0.4 Alternate Select
 */
INLINE void GPIO_setP04Altsel(tGPIO_P0_4_ALTSEL e_value)
{
  GPIO->P0_ALTSEL0.bit.ALTSEL4 = (uint8)e_value;
}

/** \brief Set P0.5 Alternate Select
 * 
 *  \param e_value P0.5 Alternate Select
 */
INLINE void GPIO_setP05Altsel(tGPIO_P0_5_ALTSEL e_value)
{
  GPIO->P0_ALTSEL0.bit.ALTSEL5 = (uint8)e_value;
}

/** \brief Set P0.6 Alternate Select
 * 
 *  \param e_value P0.6 Alternate Select
 */
INLINE void GPIO_setP06Altsel(tGPIO_P0_6_ALTSEL e_value)
{
  GPIO->P0_ALTSEL0.bit.ALTSEL6 = (uint8)e_value;
}

/** \brief Set P0.7 Alternate Select
 * 
 *  \param e_value P0.7 Alternate Select
 */
INLINE void GPIO_setP07Altsel(tGPIO_P0_7_ALTSEL e_value)
{
  GPIO->P0_ALTSEL0.bit.ALTSEL7 = (uint8)e_value;
}

/** \brief Set P0.8 Alternate Select
 * 
 *  \param e_value P0.8 Alternate Select
 */
INLINE void GPIO_setP08Altsel(tGPIO_P0_8_ALTSEL e_value)
{
  GPIO->P0_ALTSEL1.bit.ALTSEL8 = (uint8)e_value;
}

/** \brief Set P0.9 Alternate Select
 * 
 *  \param e_value P0.9 Alternate Select
 */
INLINE void GPIO_setP09Altsel(tGPIO_P0_9_ALTSEL e_value)
{
  GPIO->P0_ALTSEL1.bit.ALTSEL9 = (uint8)e_value;
}

/** \brief Set P0.10 Alternate Select
 * 
 *  \param e_value P0.10 Alternate Select
 */
INLINE void GPIO_setP010Altsel(tGPIO_P0_10_ALTSEL e_value)
{
  GPIO->P0_ALTSEL1.bit.ALTSEL10 = (uint8)e_value;
}

/** \brief Set P0.0 Direction
 *
 *  \param e_value P0.0 Direction
 */
INLINE void GPIO_setP00Dir(tGPIO_DIR e_value)
{
  GPIO->P0_DIR.bit.DIR0 = (uint8)e_value;
}

/** \brief Set P0.1 Direction
 *
 *  \param e_value P0.1 Direction
 */
INLINE void GPIO_setP01Dir(tGPIO_DIR e_value)
{
  GPIO->P0_DIR.bit.DIR1 = (uint8)e_value;
}

/** \brief Set P0.2 Direction
 *
 *  \param e_value P0.2 Direction
 */
INLINE void GPIO_setP02Dir(tGPIO_DIR e_value)
{
  GPIO->P0_DIR.bit.DIR2 = (uint8)e_value;
}

/** \brief Set P0.3 Direction
 *
 *  \param e_value P0.3 Direction
 */
INLINE void GPIO_setP03Dir(tGPIO_DIR e_value)
{
  GPIO->P0_DIR.bit.DIR3 = (uint8)e_value;
}

/** \brief Set P0.4 Direction
 *
 *  \param e_value P0.4 Direction
 */
INLINE void GPIO_setP04Dir(tGPIO_DIR e_value)
{
  GPIO->P0_DIR.bit.DIR4 = (uint8)e_value;
}

/** \brief Set P0.5 Direction
 *
 *  \param e_value P0.5 Direction
 */
INLINE void GPIO_setP05Dir(tGPIO_DIR e_value)
{
  GPIO->P0_DIR.bit.DIR5 = (uint8)e_value;
}

/** \brief Set P0.6 Direction
 *
 *  \param e_value P0.6 Direction
 */
INLINE void GPIO_setP06Dir(tGPIO_DIR e_value)
{
  GPIO->P0_DIR.bit.DIR6 = (uint8)e_value;
}

/** \brief Set P0.7 Direction
 *
 *  \param e_value P0.7 Direction
 */
INLINE void GPIO_setP07Dir(tGPIO_DIR e_value)
{
  GPIO->P0_DIR.bit.DIR7 = (uint8)e_value;
}

/** \brief Set P0.8 Direction
 *
 *  \param e_value P0.8 Direction
 */
INLINE void GPIO_setP08Dir(tGPIO_DIR e_value)
{
  GPIO->P0_DIR.bit.DIR8 = (uint8)e_value;
}

/** \brief Set P0.9 Direction
 *
 *  \param e_value P0.9 Direction
 */
INLINE void GPIO_setP09Dir(tGPIO_DIR e_value)
{
  GPIO->P0_DIR.bit.DIR9 = (uint8)e_value;
}

/** \brief Set P0.10 Direction
 *
 *  \param e_value P0.10 Direction
 */
INLINE void GPIO_setP010Dir(tGPIO_DIR e_value)
{
  GPIO->P0_DIR.bit.DIR10 = (uint8)e_value;
}

/** \brief Get P0.0 State
 *
 * \return uint8 P0.0 State
 */
INLINE uint8 GPIO_getP00State(void)
{
  return (uint8)GPIO->P0_IN.bit.PI0;
}

/** \brief Get P0.1 State
 *
 * \return uint8 P0.1 State
 */
INLINE uint8 GPIO_getP01State(void)
{
  return (uint8)GPIO->P0_IN.bit.PI1;
}

/** \brief Get P0.2 State
 *
 * \return uint8 P0.2 State
 */
INLINE uint8 GPIO_getP02State(void)
{
  return (uint8)GPIO->P0_IN.bit.PI2;
}

/** \brief Get P0.3 State
 *
 * \return uint8 P0.3 State
 */
INLINE uint8 GPIO_getP03State(void)
{
  return (uint8)GPIO->P0_IN.bit.PI3;
}

/** \brief Get P0.4 State
 *
 * \return uint8 P0.4 State
 */
INLINE uint8 GPIO_getP04State(void)
{
  return (uint8)GPIO->P0_IN.bit.PI4;
}

/** \brief Get P0.5 State
 *
 * \return uint8 P0.5 State
 */
INLINE uint8 GPIO_getP05State(void)
{
  return (uint8)GPIO->P0_IN.bit.PI5;
}

/** \brief Get P0.6 State
 *
 * \return uint8 P0.6 State
 */
INLINE uint8 GPIO_getP06State(void)
{
  return (uint8)GPIO->P0_IN.bit.PI6;
}

/** \brief Get P0.7 State
 *
 * \return uint8 P0.7 State
 */
INLINE uint8 GPIO_getP07State(void)
{
  return (uint8)GPIO->P0_IN.bit.PI7;
}

/** \brief Get P0.8 State
 *
 * \return uint8 P0.8 State
 */
INLINE uint8 GPIO_getP08State(void)
{
  return (uint8)GPIO->P0_IN.bit.PI8;
}

/** \brief Get P0.9 State
 *
 * \return uint8 P0.9 State
 */
INLINE uint8 GPIO_getP09State(void)
{
  return (uint8)GPIO->P0_IN.bit.PI9;
}

/** \brief Get P0.10 State
 *
 * \return uint8 P0.10 State
 */
INLINE uint8 GPIO_getP010State(void)
{
  return (uint8)GPIO->P0_IN.bit.PI10;
}

/** \brief Set P0.0 State
 *
 *  \param e_value P0.0 State
 */
INLINE void GPIO_setP00State(tGPIO_STATE e_value)
{
  GPIO->P0_OMR.reg = (uint32)e_value;
}

/** \brief Set P0.1 State
 *
 *  \param e_value P0.1 State
 */
INLINE void GPIO_setP01State(tGPIO_STATE e_value)
{
  GPIO->P0_OMR.reg = (uint32)e_value << GPIO_P0_OMR_PS1_Pos;
}

/** \brief Set P0.2 State
 *
 *  \param e_value P0.2 State
 */
INLINE void GPIO_setP02State(tGPIO_STATE e_value)
{
  GPIO->P0_OMR.reg = (uint32)e_value << GPIO_P0_OMR_PS2_Pos;
}

/** \brief Set P0.3 State
 *
 *  \param e_value P0.3 State
 */
INLINE void GPIO_setP03State(tGPIO_STATE e_value)
{
  GPIO->P0_OMR.reg = (uint32)e_value << GPIO_P0_OMR_PS3_Pos;
}

/** \brief Set P0.4 State
 *
 *  \param e_value P0.4 State
 */
INLINE void GPIO_setP04State(tGPIO_STATE e_value)
{
  GPIO->P0_OMR.reg = (uint32)e_value << GPIO_P0_OMR_PS4_Pos;
}

/** \brief Set P0.5 State
 *
 *  \param e_value P0.5 State
 */
INLINE void GPIO_setP05State(tGPIO_STATE e_value)
{
  GPIO->P0_OMR.reg = (uint32)e_value << GPIO_P0_OMR_PS5_Pos;
}

/** \brief Set P0.6 State
 *
 *  \param e_value P0.6 State
 */
INLINE void GPIO_setP06State(tGPIO_STATE e_value)
{
  GPIO->P0_OMR.reg = (uint32)e_value << GPIO_P0_OMR_PS6_Pos;
}

/** \brief Set P0.7 State
 *
 *  \param e_value P0.7 State
 */
INLINE void GPIO_setP07State(tGPIO_STATE e_value)
{
  GPIO->P0_OMR.reg = (uint32)e_value << GPIO_P0_OMR_PS7_Pos;
}

/** \brief Set P0.8 State
 *
 *  \param e_value P0.8 State
 */
INLINE void GPIO_setP08State(tGPIO_STATE e_value)
{
  GPIO->P0_OMR.reg = (uint32)e_value << GPIO_P0_OMR_PS8_Pos;
}

/** \brief Set P0.9 State
 *
 *  \param e_value P0.9 State
 */
INLINE void GPIO_setP09State(tGPIO_STATE e_value)
{
  GPIO->P0_OMR.reg = (uint32)e_value << GPIO_P0_OMR_PS9_Pos;
}

/** \brief Set P0.10 State
 *
 *  \param e_value P0.10 State
 */
INLINE void GPIO_setP010State(tGPIO_STATE e_value)
{
  GPIO->P0_OMR.reg = (uint32)e_value << GPIO_P0_OMR_PS10_Pos;
}

/** \brief Set P1.0 Alternate Select
 * 
 *  \param e_value P1.0 Alternate Select
 */
INLINE void GPIO_setP10Altsel(tGPIO_P1_0_ALTSEL e_value)
{
  GPIO->P1_ALTSEL0.bit.ALTSEL0 = (uint8)e_value;
}

/** \brief Set P1.1 Alternate Select
 * 
 *  \param e_value P1.1 Alternate Select
 */
INLINE void GPIO_setP11Altsel(tGPIO_P1_1_ALTSEL e_value)
{
  GPIO->P1_ALTSEL0.bit.ALTSEL1 = (uint8)e_value;
}

/** \brief Set P1.2 Alternate Select
 * 
 *  \param e_value P1.2 Alternate Select
 */
INLINE void GPIO_setP12Altsel(tGPIO_P1_2_ALTSEL e_value)
{
  GPIO->P1_ALTSEL0.bit.ALTSEL2 = (uint8)e_value;
}

/** \brief Set P1.3 Alternate Select
 * 
 *  \param e_value P1.3 Alternate Select
 */
INLINE void GPIO_setP13Altsel(tGPIO_P1_3_ALTSEL e_value)
{
  GPIO->P1_ALTSEL0.bit.ALTSEL3 = (uint8)e_value;
}

/** \brief Set P1.4 Alternate Select
 * 
 *  \param e_value P1.4 Alternate Select
 */
INLINE void GPIO_setP14Altsel(tGPIO_P1_4_ALTSEL e_value)
{
  GPIO->P1_ALTSEL0.bit.ALTSEL4 = (uint8)e_value;
}

/** \brief Set P1.0 Direction
 *
 *  \param e_value P1.0 Direction
 */
INLINE void GPIO_setP10Dir(tGPIO_DIR e_value)
{
  GPIO->P1_DIR.bit.DIR0 = (uint8)e_value;
}

/** \brief Set P1.1 Direction
 *
 *  \param e_value P1.1 Direction
 */
INLINE void GPIO_setP11Dir(tGPIO_DIR e_value)
{
  GPIO->P1_DIR.bit.DIR1 = (uint8)e_value;
}

/** \brief Set P1.2 Direction
 *
 *  \param e_value P1.2 Direction
 */
INLINE void GPIO_setP12Dir(tGPIO_DIR e_value)
{
  GPIO->P1_DIR.bit.DIR2 = (uint8)e_value;
}

/** \brief Set P1.3 Direction
 *
 *  \param e_value P1.3 Direction
 */
INLINE void GPIO_setP13Dir(tGPIO_DIR e_value)
{
  GPIO->P1_DIR.bit.DIR3 = (uint8)e_value;
}

/** \brief Set P1.4 Direction
 *
 *  \param e_value P1.4 Direction
 */
INLINE void GPIO_setP14Dir(tGPIO_DIR e_value)
{
  GPIO->P1_DIR.bit.DIR4 = (uint8)e_value;
}

/** \brief Get P1.0 State
 *
 * \return uint8 P1.0 State
 */
INLINE uint8 GPIO_getP10State(void)
{
  return (uint8)GPIO->P1_IN.bit.PI0;
}

/** \brief Get P1.1 State
 *
 * \return uint8 P1.1 State
 */
INLINE uint8 GPIO_getP11State(void)
{
  return (uint8)GPIO->P1_IN.bit.PI1;
}

/** \brief Get P1.2 State
 *
 * \return uint8 P1.2 State
 */
INLINE uint8 GPIO_getP12State(void)
{
  return (uint8)GPIO->P1_IN.bit.PI2;
}

/** \brief Get P1.3 State
 *
 * \return uint8 P1.3 State
 */
INLINE uint8 GPIO_getP13State(void)
{
  return (uint8)GPIO->P1_IN.bit.PI3;
}

/** \brief Get P1.4 State
 *
 * \return uint8 P1.4 State
 */
INLINE uint8 GPIO_getP14State(void)
{
  return (uint8)GPIO->P1_IN.bit.PI4;
}

/** \brief Set P1.0 State
 *
 *  \param e_value P1.0 State
 */
INLINE void GPIO_setP10State(tGPIO_STATE e_value)
{
  GPIO->P1_OMR.reg = (uint32)e_value << GPIO_P1_OMR_PS0_Pos;
}

/** \brief Set P1.1 State
 *
 *  \param e_value P1.1 State
 */
INLINE void GPIO_setP11State(tGPIO_STATE e_value)
{
  GPIO->P1_OMR.reg = (uint32)e_value << GPIO_P1_OMR_PS1_Pos;
}

/** \brief Set P1.2 State
 *
 *  \param e_value P1.2 State
 */
INLINE void GPIO_setP12State(tGPIO_STATE e_value)
{
  GPIO->P1_OMR.reg = (uint32)e_value << GPIO_P1_OMR_PS2_Pos;
}

/** \brief Set P1.3 State
 *
 *  \param e_value P1.3 State
 */
INLINE void GPIO_setP13State(tGPIO_STATE e_value)
{
  GPIO->P1_OMR.reg = (uint32)e_value << GPIO_P1_OMR_PS3_Pos;
}

/** \brief Set P1.4 State
 *
 *  \param e_value P1.4 State
 */
INLINE void GPIO_setP14State(tGPIO_STATE e_value)
{
  GPIO->P1_OMR.reg = (uint32)e_value << GPIO_P1_OMR_PS4_Pos;
}

/** \brief Get P2.0 State
 *
 * \return uint8 P2.0 State
 */
INLINE uint8 GPIO_getP20State(void)
{
  return (uint8)GPIO->P2_IN.bit.PI0;
}

/** \brief Get P2.1 State
 *
 * \return uint8 P2.1 State
 */
INLINE uint8 GPIO_getP21State(void)
{
  return (uint8)GPIO->P2_IN.bit.PI1;
}

/** \brief Get P2.2 State
 *
 * \return uint8 P2.2 State
 */
INLINE uint8 GPIO_getP22State(void)
{
  return (uint8)GPIO->P2_IN.bit.PI2;
}

/** \brief Get P2.3 State
 *
 * \return uint8 P2.3 State
 */
INLINE uint8 GPIO_getP23State(void)
{
  return (uint8)GPIO->P2_IN.bit.PI3;
}

/** \brief Get P2.4 State
 *
 * \return uint8 P2.4 State
 */
INLINE uint8 GPIO_getP24State(void)
{
  return (uint8)GPIO->P2_IN.bit.PI4;
}

/** \brief Get P2.5 State
 *
 * \return uint8 P2.5 State
 */
INLINE uint8 GPIO_getP25State(void)
{
  return (uint8)GPIO->P2_IN.bit.PI5;
}

/** \brief Get P2.6 State
 *
 * \return uint8 P2.6 State
 */
INLINE uint8 GPIO_getP26State(void)
{
  return (uint8)GPIO->P2_IN.bit.PI6;
}

/** \brief Get P2.7 State
 *
 * \return uint8 P2.7 State
 */
INLINE uint8 GPIO_getP27State(void)
{
  return (uint8)GPIO->P2_IN.bit.PI7;
}

/** \brief Get P2.8 State
 *
 * \return uint8 P2.8 State
 */
INLINE uint8 GPIO_getP28State(void)
{
  return (uint8)GPIO->P2_IN.bit.PI8;
}

/** \brief Get P2.9 State
 *
 * \return uint8 P2.9 State
 */
INLINE uint8 GPIO_getP29State(void)
{
  return (uint8)GPIO->P2_IN.bit.PI9;
}

/** \brief Enable P2.0 Digital Input
 */
INLINE void GPIO_enP20Input(void)
{
  GPIO->P2_INDIS.bit.INDIS0 = 0u;
}

/** \brief Disable P2.0 Digital Input
 */
INLINE void GPIO_disP20Input(void)
{
  GPIO->P2_INDIS.bit.INDIS0 = 1u;
}

/** \brief Enable P2.1 Digital Input
 */
INLINE void GPIO_enP21Input(void)
{
  GPIO->P2_INDIS.bit.INDIS1 = 0u;
}

/** \brief Disable P2.1 Digital Input
 */
INLINE void GPIO_disP21Input(void)
{
  GPIO->P2_INDIS.bit.INDIS1 = 1u;
}

/** \brief Enable P2.2 Digital Input
 */
INLINE void GPIO_enP22Input(void)
{
  GPIO->P2_INDIS.bit.INDIS2 = 0u;
}

/** \brief Disable P2.2 Digital Input
 */
INLINE void GPIO_disP22Input(void)
{
  GPIO->P2_INDIS.bit.INDIS2 = 1u;
}

/** \brief Enable P2.3 Digital Input
 */
INLINE void GPIO_enP23Input(void)
{
  GPIO->P2_INDIS.bit.INDIS3 = 0u;
}

/** \brief Disable P2.3 Digital Input
 */
INLINE void GPIO_disP23Input(void)
{
  GPIO->P2_INDIS.bit.INDIS3 = 1u;
}

/** \brief Enable P2.4 Digital Input
 */
INLINE void GPIO_enP24Input(void)
{
  GPIO->P2_INDIS.bit.INDIS4 = 0u;
}

/** \brief Disable P2.4 Digital Input
 */
INLINE void GPIO_disP24Input(void)
{
  GPIO->P2_INDIS.bit.INDIS4 = 1u;
}

/** \brief Enable P2.5 Digital Input
 */
INLINE void GPIO_enP25Input(void)
{
  GPIO->P2_INDIS.bit.INDIS5 = 0u;
}

/** \brief Disable P2.5 Digital Input
 */
INLINE void GPIO_disP25Input(void)
{
  GPIO->P2_INDIS.bit.INDIS5 = 1u;
}

/** \brief Enable P2.6 Digital Input
 */
INLINE void GPIO_enP26Input(void)
{
  GPIO->P2_INDIS.bit.INDIS6 = 0u;
}

/** \brief Disable P2.6 Digital Input
 */
INLINE void GPIO_disP26Input(void)
{
  GPIO->P2_INDIS.bit.INDIS6 = 1u;
}

/** \brief Enable P2.7 Digital Input
 */
INLINE void GPIO_enP27Input(void)
{
  GPIO->P2_INDIS.bit.INDIS7 = 0u;
}

/** \brief Disable P2.7 Digital Input
 */
INLINE void GPIO_disP27Input(void)
{
  GPIO->P2_INDIS.bit.INDIS7 = 1u;
}

/** \brief Enable P2.8 Digital Input
 */
INLINE void GPIO_enP28Input(void)
{
  GPIO->P2_INDIS.bit.INDIS8 = 0u;
}

/** \brief Disable P2.8 Digital Input
 */
INLINE void GPIO_disP28Input(void)
{
  GPIO->P2_INDIS.bit.INDIS8 = 1u;
}

/** \brief Enable P2.9 Digital Input
 */
INLINE void GPIO_enP29Input(void)
{
  GPIO->P2_INDIS.bit.INDIS9 = 0u;
}

/** \brief Disable P2.9 Digital Input
 */
INLINE void GPIO_disP29Input(void)
{
  GPIO->P2_INDIS.bit.INDIS9 = 1u;
}

/** @}*/

#endif /* _GPIO_H */

