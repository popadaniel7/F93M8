<?xml version="1.0" encoding="UTF-8" ?>
<!--file template_ssc_mode.xml                                                      -->
<!--brief Infineon MOTIX(TM) MCU Modules configuration                              -->
<!--                                                                                -->
<!--Copyright (c) Infineon Technologies AG                                          -->
<!--All rights reserved.                                                            -->
<!--                                                                                -->
<!--Redistribution and use in source and binary forms, with or without modification,-->
<!--are permitted provided that the following conditions are met:                   -->
<!--                                                                                -->
<!--  Redistributions of source code must retain the above copyright notice, this   -->
<!--  list of conditions and the following disclaimer.                              -->
<!--                                                                                -->
<!--  Redistributions in binary form must reproduce the above copyright notice,     -->
<!--  this list of conditions and the following disclaimer in the documentation     -->
<!--  and/or other materials provided with the distribution.                        -->
<!--                                                                                -->
<!--  Neither the name of the copyright holders nor the names of its contributors   -->
<!--  may be used to endorse or promote products derived from this software without -->
<!--  specific prior written permission.                                            -->
<!--                                                                                -->
<!--THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND -->
<!--ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED   -->
<!--WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE          -->
<!--DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE    -->
<!--FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL      -->
<!--DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR      -->
<!--SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER      -->
<!--CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,   -->
<!--OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE   -->
<!--OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.            -->
<!--                                                                                -->
<!--********************************************************************************-->
<!--                Infineon MOTIX(TM) MCU Module configuration file                -->
<!--********************************************************************************-->
<!--                                                                                -->
<!--********************************************************************************-->
<!--                               Author(s) Identity                               -->
<!--********************************************************************************-->
<!--   Initials     Name                                                            -->
<!--   DM           Daniel Mysliwitz                                                -->
<!--   JO           Julia Ott                                                       -->
<!--   BG           Blandine Guillot                                                -->
<!--********************************************************************************-->
<!--                                                                                -->
<!--********************************************************************************-->
<!--                            Revision Control History                            -->
<!--********************************************************************************-->
<!-- V0.0.1: 2020-09-11, BG:   Initial version                                      -->
<!-- V0.1.0: 2020-09-28, BG:   EP-482: Added doctype and checksum                   -->
<!-- V0.1.1: 2020-10-23, DM:   EP-546: Removed enable from top container            -->
<!-- V0.1.2: 2021-01-27, BG:   EP-677: Corrected module enabling behavior           -->
<!-- V0.1.3: 2021-02-08, BG:   EP-690: Updated CW minimal version to 2.6.2          -->
<!-- V0.1.4: 2021-09-21, BG:   EP-918: Replaced fSYS with the SSC frequency for the -->
<!--                           baudrate calculation                                 -->
<!--                           Updated include structure                            -->
<!-- V0.1.5: 2021-11-12, JO:   EP-937: Updated copyright and branding               -->
<!--********************************************************************************-->

<!-- Module Definition -->
<!-- IDX: SSC0, SSC1 -->

<ifxmlcfg version="2.6.2">
  <checksum>1a9981c3ab817bf0af5166b7a6faf9a16553371c5b46c10c80726ba69df59719</checksum>
  <version label="V0.1.5"/>
  <svd file="tle989x.svd"/>
  <usesPython/>
  <horizontalcontainer label="Module Definition" size="-1;600">
    <header file="ssc_defines.h">

      <!-- MODE -->
      <groupcontainer label="Mode Settings" font="Source Sans Pro,12,0,0,100,0,0,0,0,0" color="171;217;228" size="500;-1">
        <verticalcontainer>

          <!-- Mode Select -->
          <horizontalcontainer>
            <text label="Mode Selection"/>
            <combo define="$IDX$.CON.MS" default="label=Master Mode" setDef="SSC_CFG.run=1;$IDX$_UPDATE_MODE.run=1" size="320;-1">
              <item label="Slave Mode" override="value1"/>
              <item label="Master Mode" override="value2"/>
            </combo>
          </horizontalcontainer>

          <!-- Data to transfer: Width + Heading Control -->
          <horizontalcontainer>
            <text label="Data to Transfer"/>
            <spinbox define="$IDX$.CON_BM" svd="0" header="temp_defines.h" default="2" range="2;64" suffix=" bits" size="155;-1">
              <action event="changed" cmd="setDef" data="$IDX$_UPDATE_MODE.run=1"/>
            </spinbox>
            <combo define="$IDX$.CON.HB" default="label=LSB first" size="160;-1" setDef="$IDX$_UPDATE_MODE.run=1">
              <item label="LSB first" override="value1"/>
              <item label="MSB first" override="value2"/>
            </combo>
          </horizontalcontainer>

          <!-- Clock Phase Control -->
          <horizontalcontainer>
            <text label="Clock Phase"/>
            <combo define="$IDX$.CON.PH" default="label=Shift TX data on leading edge, latch on trailing edge" setDef="$IDX$_UPDATE_MODE.run=1" size="320;-1">
              <item label="Shift TX data on leading edge, latch on trailing edge" override="value1"/>
              <item label="Latch RX data on leading edge, shift on trailing edge" override="value2"/>
            </combo>
          </horizontalcontainer>

          <!-- Clock Polarity Control -->
          <horizontalcontainer>
            <text label="Clock Polarity"/>
            <combo define="$IDX$.CON.PO" default="label=Low idle, leading edge is low->high" setDef="$IDX$_UPDATE_MODE.run=1" size="320;-1">
              <item label="Low idle, leading edge is low->high" override="value1"/>
              <item label="High idle, leading edge is high->low" override="value2"/>
            </combo>
          </horizontalcontainer>

          <!-- Loop Back Control -->
          <horizontalcontainer>
            <text label="Loop Back Control"/>
            <combo define="$IDX$.CON.LB" default="label=Normal operation" setDef="$IDX$_UPDATE_MODE.run=1" size="320;-1">
              <item label="Normal operation" override="value1"/>
              <item label="Internal loopback mode (RX to TX)" override="value2"/>
            </combo>
          </horizontalcontainer>

          <include IDX="$IDX$">template_ssc_graph.xml</include>

        </verticalcontainer>
      </groupcontainer>

      <verticalcontainer>

        <!-- BAUDRATE GENERATION -->
        <groupcontainer label="Baudrate Generation" font="Source Sans Pro,12,0,0,100,0,0,0,0,0" color="206;217;164" size="375;-1">
          <verticalcontainer>
            <edit visible="false" label="$IDX$_BRA_MASTER" define="$IDX$_BRA_MASTER" default="1000000" svd="0" header=""/>
            <edit visible="false" label="$IDX$_BRA_SLAVE" define="$IDX$_BRA_SLAVE" default="1000000" svd="0" header=""/>

            <!-- Baudrate Value -->
            <radio define="$IDX$.BR_CONFIG" svd="0" header="temp_defines.h" default="0" setDef="$IDX$_UPDATE_MODE.run=1">
              <radiobutton label="Automatic Configuration">
                <action event="selected" cmd="setDef" data="$IDX$_UPDATE_MODE.run=1"/>
              </radiobutton>

              <horizontalcontainer define="CONT_$IDX$_BR_AUTO">
                <text label="Baudrate Value"/>
                <combo define="$IDX$.BR_VAL_AUTO_MASTER" default="label=1 MBaud" svd="0" header="temp_defines.h">
                  <item label="1 kBaud" value="1000" lockon="$IDX$_BRA_MASTER=1000"/>
                  <item label="10 kBaud" value="10000" lockon="$IDX$_BRA_MASTER=10000"/>
                  <item label="100 kBaud" value="100000" lockon="$IDX$_BRA_MASTER=100000"/>
                  <item label="500 kBaud" value="500000" lockon="$IDX$_BRA_MASTER=500000"/>
                  <item label="1 MBaud" value="1000000" lockon="$IDX$_BRA_MASTER=1000000"/>
                  <item label="15 MBaud" value="15000000" lockon="$IDX$_BRA_MASTER=15000000"/>
                  <item label="30 MBaud" value="30000000" lockon="$IDX$_BRA_MASTER=30000000"/>
                </combo>
                <combo define="$IDX$.BR_VAL_AUTO_SLAVE" default="label=1 MBaud" svd="0" header="temp_defines.h">
                  <item label="1 kBaud" value="1000" lockon="$IDX$_BRA_SLAVE=1000"/>
                  <item label="10 kBaud" value="10000" lockon="$IDX$_BRA_SLAVE=10000"/>
                  <item label="100 kBaud" value="100000" lockon="$IDX$_BRA_SLAVE=100000"/>
                  <item label="500 kBaud" value="500000" lockon="$IDX$_BRA_SLAVE=500000"/>
                  <item label="1 MBaud" value="1000000" lockon="$IDX$_BRA_SLAVE=1000000"/>
                  <item label="15 MBaud" value="15000000" lockon="$IDX$_BRA_SLAVE=15000000"/>
                </combo>
              </horizontalcontainer>

              <radiobutton label="Manual Configuration">
                <action event="selected" cmd="setDef" data="$IDX$_UPDATE_MODE.run=1"/>
              </radiobutton>

              <horizontalcontainer define="CONT_$IDX$_BR_MANUAL">
                <text label="Baudrate Value [kBaud]"/>
                <spinbox define="$IDX$.BR_VAL_MANUAL" default="1000" svd="0" header="temp_defines.h"/>
                <math visible="false" define="$IDX$_BRM" svd="0" header="temp_defines.h" formula="$IDX$.BR_VAL_MANUAL*1000"/>
              </horizontalcontainer>
            </radio>  

            <!-- Reload Value -->
            <horizontalcontainer>
              <text label="Reload Value: "/>
              <math define="$IDX$.BR.BR_VALUE" format="%04X" formula="trunc(SCU_fSSC_MHz*1000000/(2*(($IDX$.BR_CONFIG==1)?($IDX$_BRM:($IDX$.CON.MS==0?($IDX$_BRA_SLAVE:$IDX$_BRA_MASTER)))))-1)"/>
            </horizontalcontainer>

            <!-- Effective Baudrate -->
            <horizontalcontainer>
              <text label="Effective Baudrate:"/>
              <math define="$IDX$_EFFBR" unit=" kBaud" svd="0" header="temp_defines.h" format="%.3f" formula="SCU_fSSC_MHz*1000000/1000/(2*($IDX$.BR.BR_VALUE+1))"/>
            </horizontalcontainer>

          </verticalcontainer>
        </groupcontainer>

        <!-- PIN SELECT -->
      <include IDX="$IDX$" MODE="SLAVE" MODE_MTSR="Input" MODE_MRST="Output">template_ssc_pinsel.xml</include>
      <include IDX="$IDX$" MODE="MASTER" MODE_MTSR="Output" MODE_MRST="Input">template_ssc_pinsel.xml</include>

      </verticalcontainer>

      <!-- TRANSMIT CONTROL IN MASTER MODE -->
      <groupcontainer define="CONT_$IDX$_TXCTRL" label="Transmit Control in Master Mode" font="Source Sans Pro,12,0,0,100,0,0,0,0,0" color="255;224;84" size="500;-1">
        <verticalcontainer>

          <!-- Transmit Start -->
          <!-- Transmit Start Trigger -->
          <horizontalcontainer>
            <text label="Transmit Start Trigger"/>
            <combo define="$IDX$.CON_MSTXENSEL" svd="0" header="temp_defines.h" default="label=Write to TB0" setDef="$IDX$_UPDATE_MODE.run=1">
              <item label="Write to TB0"/>
            <item label="Write to MSTXSTART"/>
              <item label="TXEV rising edge"/>
            </combo>
          </horizontalcontainer>
          <!-- TX Start Event Input-->
          <horizontalcontainer>
            <text label="TX Start Event Input"/>
          <combo define="$IDX$.INSEL_TXEVSEL_M0" svd="0" header="temp_defines.h" default="label=none" setDef="$IDX$_UPDATE_MODE.run=1">
              <item label="P1.1" lockon="GPIO.P1_DIR.DIR1=0"/>
              <item label="SCU.INP1_IRQ1"/>
              <item label="CCU7.SR3"/>
            <item label="none" value="0xFF"/>
            </combo>
          <combo define="$IDX$.INSEL_TXEVSEL_M1" svd="0" header="temp_defines.h" default="label=none" setDef="$IDX$_UPDATE_MODE.run=1">
              <item label="P0.1" lockon="GPIO.P0_DIR.DIR1=0"/>
              <item label="SCU.INP1_IRQ1"/>
              <item label="CCU7.SR3"/>
              <item label="SCU.INP2_IRQ1"/>
            <item label="none" value="0xFF"/>
            </combo>
          </horizontalcontainer>

          <!-- In case Chip Select is enabled -->

          <!-- CS Low Time at Transmission Start -->
          <horizontalcontainer define="CONT_$IDX$_CSLOWSTART">
            <text label="Low Time at Transmission Start [7;63]"/>
            <spinbox define="$IDX$.CSTIM_ST" svd="0" header="temp_defines.h" default="7" range="7;63" suffix=" SSC clock cycles">
              <action event="changed" cmd="setDef" data="$IDX$_UPDATE_MODE.run=1"/>
            </spinbox>
          </horizontalcontainer>
          <!-- CS Low Time at Transmission Start - Register Value -->
          <!--horizontalcontainer define="CONT_$IDX$_CSLOWSTART_REG">
            <text label="Register Value:"/>
            <math define="$IDX$_CSLOWSTART_REG" svd="0" header="temp_defines.h" format="%02X" formula="$IDX$_CSLOWSTART"/>
          </horizontalcontainer-->

          <!-- CS Low Time at Transmission End -->
          <horizontalcontainer define="CONT_$IDX$_CSLOWEND">
            <text label="Low Time at Transmission End [2;64]"/>
            <spinbox define="$IDX$.CSTIM_END" svd="0" header="temp_defines.h" default="2" range="2;64" suffix=" SSC clock cycles">
              <action event="changed" cmd="setDef" data="$IDX$_UPDATE_MODE.run=1"/>
            </spinbox>
          </horizontalcontainer>
          <!-- CS Low Time at Transmission End - Register Value -->
          <!--horizontalcontainer define="CONT_$IDX$_CSLOWEND_REG">
            <text label="Register Value:"/>
            <math define="$IDX$_CSLOWEND_REG" svd="0" header="temp_defines.h" format="%02X" formula="$IDX$_CSLOWEND"/>
          </horizontalcontainer-->

          <!-- Min CS High Time after Transmission -->
          <horizontalcontainer define="CONT_$IDX$_MINCSHIGH">
            <text label="Low Time at Transmission End [3;64]"/>
            <spinbox define="$IDX$.CSTIM_HIGH" svd="0" header="temp_defines.h" default="3" range="3;64" suffix=" SSC clock cycles">
              <action event="changed" cmd="setDef" data="$IDX$_UPDATE_MODE.run=1"/>
            </spinbox>
          </horizontalcontainer>
          <!-- Min CS High Time after Transmission - Register Value -->
          <!--horizontalcontainer define="CONT_$IDX$_MINCSHIGH_REG">
            <text label="Register Value:"/>
            <math define="$IDX$_MINCSHIGH_REG" svd="0" header="temp_defines.h" format="%02X" formula="$IDX$_MINCSHIGH"/>
          </horizontalcontainer-->
        </verticalcontainer>
      </groupcontainer>

      <!-- INTERRUPT -->
      <groupcontainer label="Interrupts" font="Source Sans Pro,12,0,0,100,0,0,0,0,0" color="245;179;138" size="500;-1">
        <verticalcontainer>

          <!-- Transmit Interrupt -->
          <horizontalcontainer>
            <checkbox label="Transmit Interrupt" define="$IDX$.TI_INT_EN" svd="0" default="0" size="490;-1" header="isr_defines.h">
              <action event="checked" cmd="setDef" data="$IDX$_UPDATE_MODE.run=1"/>
              <action event="unchecked" cmd="setDef" data="$IDX$_UPDATE_MODE.run=1"/>
            </checkbox>
          </horizontalcontainer>
          <!-- Enable Transmit Interrupt -->
          <horizontalcontainer define="CONT_$IDX$_TIEN">
            <text label="Enable Transmit Interrupt"/>
            <checkbox define="$IDX$.IEN_TIREN" svd="0" default="0" size="300;-1" header="isr_defines.h">
              <action event="checked" cmd="setDef" data="$IDX$_UPDATE_MODE.run=1"/>
              <action event="unchecked" cmd="setDef" data="$IDX$_UPDATE_MODE.run=1"/>
            </checkbox>
          </horizontalcontainer>
          <!-- Transmit Interrupt Node Selection -->
          <horizontalcontainer define="CONT_$IDX$_TINODE">
            <text label="Node Selection"/>
            <combo define="SCU.INP6.INP_$IDX$_TIR" header="isr_defines.h" setDef="$IDX$_UPDATE_MODE.run=1" size="300;-1">
              <item label="SSC_INP0_NVIC_IRQn" override="value1" lockon="CPU.NVIC_ISER.IRQEN24=1"/>
              <item label="SSC_INP1_NVIC_IRQn" override="value2" lockon="CPU.NVIC_ISER.IRQEN25=1"/>
            </combo>
          </horizontalcontainer>
          <!-- Transmit Interrupt Callback -->
          <horizontalcontainer define="CONT_$IDX$_TICB">
            <text label="Callback"/>
          <edit define="$IDX$.TI_CALLBACK" svd="0" default="place_your_function_callback_here" size="300;-1" header="isr_defines.h"/>
          </horizontalcontainer>

          <!-- Receive Interrupt -->
          <horizontalcontainer>
            <checkbox label="Receive Interrupt" define="$IDX$.RI_INT_EN" svd="0" default="0" size="490;-1" header="isr_defines.h">
              <action event="checked" cmd="setDef" data="$IDX$_UPDATE_MODE.run=1"/>
              <action event="unchecked" cmd="setDef" data="$IDX$_UPDATE_MODE.run=1"/>
            </checkbox>
          </horizontalcontainer>
          <!-- Enable Receive Interrupt -->
          <horizontalcontainer define="CONT_$IDX$_RIEN">
            <text label="Enable Receive Interrupt"/>
            <checkbox define="$IDX$.IEN_RIREN" svd="0" default="0" size="300;-1" header="isr_defines.h">
              <action event="checked" cmd="setDef" data="$IDX$_UPDATE_MODE.run=1"/>
              <action event="unchecked" cmd="setDef" data="$IDX$_UPDATE_MODE.run=1"/>
            </checkbox>
          </horizontalcontainer>
          <!-- Receive Interrupt Node Selection -->
          <horizontalcontainer define="CONT_$IDX$_RINODE">
            <text label="Node Selection"/>
            <combo define="SCU.INP6.INP_$IDX$_RIR" header="isr_defines.h" setDef="$IDX$_UPDATE_MODE.run=1" size="300;-1">
              <item label="SSC_INP0_NVIC_IRQn" override="value1" lockon="CPU.NVIC_ISER.IRQEN24=1"/>
              <item label="SSC_INP1_NVIC_IRQn" override="value2" lockon="CPU.NVIC_ISER.IRQEN25=1"/>
            </combo>
          </horizontalcontainer>
          <!-- Transmit Interrupt Callback -->
          <horizontalcontainer define="CONT_$IDX$_RICB">
            <text label="Callback"/>
          <edit define="$IDX$.RI_CALLBACK" svd="0" default="place_your_function_callback_here" size="300;-1" header="isr_defines.h"/>
          </horizontalcontainer>

          <!-- Error Interrupt -->
          <horizontalcontainer>
            <checkbox label="Error Interrupt" define="$IDX$.ERR_INT_EN" svd="0" default="0" size="490;-1" header="isr_defines.h">
              <action event="checked" cmd="setDef" data="$IDX$_UPDATE_MODE.run=1"/>
              <action event="unchecked" cmd="setDef" data="$IDX$_UPDATE_MODE.run=1"/>
            </checkbox>
          </horizontalcontainer>
          <!-- Error Interrupt Node Selection -->
          <horizontalcontainer define="CONT_$IDX$_EINODE">
            <text label="Node Selection"/>
            <combo define="SCU.INP6.INP_$IDX$_EIR" header="isr_defines.h" setDef="$IDX$_UPDATE_MODE.run=1" size="300;-1">
              <item label="SSC_INP0_NVIC_IRQn" override="value1" lockon="CPU.NVIC_ISER.IRQEN24=1"/>
              <item label="SSC_INP1_NVIC_IRQn" override="value2" lockon="CPU.NVIC_ISER.IRQEN25=1"/>
            </combo>
          </horizontalcontainer>

          <!-- Enable Transmit Error Interrupt -->
          <horizontalcontainer define="CONT_$IDX$_TEIEN">
            <text label="Enable Transmit Error Interrupt"/>
            <checkbox define="$IDX$.IEN_TEIREN" svd="0" default="0" size="300;-1" header="isr_defines.h">
              <action event="checked" cmd="setDef" data="$IDX$_UPDATE_MODE.run=1"/>
              <action event="unchecked" cmd="setDef" data="$IDX$_UPDATE_MODE.run=1"/>
            </checkbox>
          </horizontalcontainer>
          <!-- Transmit Error Interrupt Callback -->
          <horizontalcontainer define="CONT_$IDX$_TEICB">
            <text label="Callback"/>
          <edit define="$IDX$.TEI_CALLBACK" svd="0" default="place_your_function_callback_here" size="300;-1" header="isr_defines.h"/>
          </horizontalcontainer>

          <!-- Enable Receive Error Interrupt -->
          <horizontalcontainer define="CONT_$IDX$_REIEN">
            <text label="Enable Receive Error Interrupt"/>
            <checkbox define="$IDX$.IEN_REIREN" svd="0" default="0" size="300;-1" header="isr_defines.h">
              <action event="checked" cmd="setDef" data="$IDX$_UPDATE_MODE.run=1"/>
              <action event="unchecked" cmd="setDef" data="$IDX$_UPDATE_MODE.run=1"/>
            </checkbox>
          </horizontalcontainer>
          <!-- Receive Error Interrupt Callback -->
          <horizontalcontainer define="CONT_$IDX$_REICB">
            <text label="Callback"/>
          <edit define="$IDX$.REI_CALLBACK" svd="0" default="place_your_function_callback_here" size="300;-1" header="isr_defines.h"/>
          </horizontalcontainer>

          <!-- Enable Phase Error Interrupt -->
          <horizontalcontainer define="CONT_$IDX$_PEIEN">
            <text label="Enable Phase Error Interrupt"/>
            <checkbox define="$IDX$.IEN_PEIREN" svd="0" default="0" size="300;-1" header="isr_defines.h">
              <action event="checked" cmd="setDef" data="$IDX$_UPDATE_MODE.run=1"/>
              <action event="unchecked" cmd="setDef" data="$IDX$_UPDATE_MODE.run=1"/>
            </checkbox>
          </horizontalcontainer>
          <!-- Phase Error Interrupt Callback -->
          <horizontalcontainer define="CONT_$IDX$_PEICB">
            <text label="Callback"/>
          <edit define="$IDX$.PEI_CALLBACK" svd="0" default="place_your_function_callback_here" size="300;-1" header="isr_defines.h"/>
          </horizontalcontainer>

          <!-- Enable Baudrate Error Interrupt -->
          <horizontalcontainer define="CONT_$IDX$_BEIEN">
            <text label="Enable Baudrate Error Interrupt"/>
            <checkbox define="$IDX$.IEN_BEIREN" svd="0" default="0" size="300;-1" header="isr_defines.h">
              <action event="checked" cmd="setDef" data="$IDX$_UPDATE_MODE.run=1"/>
              <action event="unchecked" cmd="setDef" data="$IDX$_UPDATE_MODE.run=1"/>
            </checkbox>
          </horizontalcontainer>
          <!-- Baudrate Error Interrupt Callback -->
          <horizontalcontainer define="CONT_$IDX$_BEICB">
            <text label="Callback"/>
          <edit define="$IDX$.BEI_CALLBACK" svd="0" default="place_your_function_callback_here" size="300;-1" header="isr_defines.h"/>
          </horizontalcontainer>

          <horizontalcontainer>
            <text label="Enable Automatic Reset"/>
            <checkbox define="$IDX$.CON.AREN" default="0" size="300;-1">
              <action event="checked" cmd="setDef" data="$IDX$_UPDATE_MODE.run=1"/>
              <action event="unchecked" cmd="setDef" data="$IDX$_UPDATE_MODE.run=1"/>
            </checkbox>
          </horizontalcontainer>
        </verticalcontainer>
      </groupcontainer>

    </header>
  </horizontalcontainer>          
</ifxmlcfg>

