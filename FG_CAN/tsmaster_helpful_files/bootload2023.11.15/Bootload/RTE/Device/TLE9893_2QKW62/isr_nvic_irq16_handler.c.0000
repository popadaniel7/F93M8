/*
 ***********************************************************************************************************************
 *
 * Copyright (c) 2015, Infineon Technologies AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,are permitted provided that the
 * following conditions are met:
 *
 *   Redistributions of source code must retain the above copyright notice, this list of conditions and the  following
 *   disclaimer.
 *
 *   Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
 *   following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 *   Neither the name of the copyright holders nor the names of its contributors may be used to endorse or promote
 *   products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  OF THE
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 **********************************************************************************************************************/

/*******************************************************************************
**                                  Includes                                  **
*******************************************************************************/
#include "tle989x.h"
#include "isr.h"
#include "isr_defines.h"


/* Check if NVIC node 16 is enabled */
#if ((CPU_NVIC_ISER & CPU_NVIC_ISER_IRQEN16_Msk) == (1u << CPU_NVIC_ISER_IRQEN16_Pos))

/*******************************************************************************
**                        Global Variable Declarations                        **
*******************************************************************************/
#if (NVIC_IRQ16_HANDLER_INT_CHECK == 1)
  uint8 u8_interrupt_cnt_irq16;
#endif

/*******************************************************************************
**                        Global Function Declarations                        **
*******************************************************************************/
extern void ADC1_CH0_CALLBACK(void);
extern void ADC1_CH1_CALLBACK(void);
extern void ADC1_CH2_CALLBACK(void);
extern void ADC1_CH3_CALLBACK(void);
extern void ADC1_CH4_CALLBACK(void);
extern void ADC1_CH5_CALLBACK(void);
extern void ADC1_CH6_CALLBACK(void);
extern void ADC1_CH7_CALLBACK(void);
extern void ADC1_CH8_CALLBACK(void);
extern void ADC1_CH9_CALLBACK(void);
extern void ADC1_CH10_CALLBACK(void);
extern void ADC1_CH11_CALLBACK(void);
extern void ADC1_CH12_CALLBACK(void);
extern void ADC1_CH13_CALLBACK(void);
extern void ADC1_CH14_CALLBACK(void);
extern void ADC1_CH15_CALLBACK(void);
extern void ADC1_CH16_CALLBACK(void);
extern void ADC1_CH17_CALLBACK(void);
extern void ADC1_CH18_CALLBACK(void);
extern void ADC1_CH19_CALLBACK(void);
extern void ADC1_SQ0_CALLBACK(void);
extern void ADC1_SQ1_CALLBACK(void);
extern void ADC1_SQ2_CALLBACK(void);
extern void ADC1_SQ3_CALLBACK(void);
extern void ADC1_LOTH0_CALLBACK(void);
extern void ADC1_LOTH1_CALLBACK(void);
extern void ADC1_LOTH2_CALLBACK(void);
extern void ADC1_LOTH3_CALLBACK(void);
extern void ADC1_UPTH0_CALLBACK(void);
extern void ADC1_UPTH1_CALLBACK(void);
extern void ADC1_UPTH2_CALLBACK(void);
extern void ADC1_UPTH3_CALLBACK(void);
extern void ADC1_COLL0_CALLBACK(void);
extern void ADC1_COLL1_CALLBACK(void);
extern void ADC1_COLL2_CALLBACK(void);
extern void ADC1_COLL3_CALLBACK(void);
extern void ADC1_WFR0_CALLBACK(void);
extern void ADC1_WFR1_CALLBACK(void);
extern void ADC1_WFR2_CALLBACK(void);
extern void ADC1_WFR3_CALLBACK(void);


/*******************************************************************************
**                         Global Function Definitions                        **
*******************************************************************************/
void NVIC_IRQ16_Handler(void)
{
#if (NVIC_IRQ16_HANDLER_INT_CHECK == 1)
  u8_interrupt_cnt_irq16 = 0;
#endif
  /* Ch0 */
#if (ADC1_CH0_INT_EN == 1)
#if ((ADC1_INP0 & ADC1_INP0_INP_CH0_Msk) >>  ADC1_INP0_INP_CH0_Pos == ADC1_INP_NVIC_IRQ16)

  if ((uint8)ADC1->IEN0.bit.IEN_CH0 == (uint8)1)
  {
    if ((uint8)ADC1->CHSTAT.bit.CH0 == (uint8)1)
    {
      ADC1_CH0_CALLBACK();
      ADC1->CHSTATCLR.bit.CH0CLR = 1u;
#if (NVIC_IRQ16_HANDLER_INT_CHECK == 1)
      u8_interrupt_cnt_irq16 += 1;
#endif
    }
  }

#endif /* Interrupt assigned to this Node */
#endif /* Interrupt enabled */
  /* Ch1 */
#if (ADC1_CH1_INT_EN == 1)
#if ((ADC1_INP0 & ADC1_INP0_INP_CH1_Msk) >>  ADC1_INP0_INP_CH1_Pos == ADC1_INP_NVIC_IRQ16)

  if ((uint8)ADC1->IEN0.bit.IEN_CH1 == (uint8)1)
  {
    if ((uint8)ADC1->CHSTAT.bit.CH1 == (uint8)1)
    {
      ADC1_CH1_CALLBACK();
      ADC1->CHSTATCLR.bit.CH1CLR = 1u;
#if (NVIC_IRQ16_HANDLER_INT_CHECK == 1)
      u8_interrupt_cnt_irq16 += 1;
#endif
    }
  }

#endif /* Interrupt assigned to this Node */
#endif /* Interrupt enabled */
  /* Ch2 */
#if (ADC1_CH2_INT_EN == 1)
#if ((ADC1_INP0 & ADC1_INP0_INP_CH2_Msk) >>  ADC1_INP0_INP_CH2_Pos == ADC1_INP_NVIC_IRQ16)

  if ((uint8)ADC1->IEN0.bit.IEN_CH2 == (uint8)1)
  {
    if ((uint8)ADC1->CHSTAT.bit.CH2 == (uint8)1)
    {
      ADC1_CH2_CALLBACK();
      ADC1->CHSTATCLR.bit.CH2CLR = 1u;
#if (NVIC_IRQ16_HANDLER_INT_CHECK == 1)
      u8_interrupt_cnt_irq16 += 1;
#endif
    }
  }

#endif /* Interrupt assigned to this Node */
#endif /* Interrupt enabled */
  /* Ch3 */
#if (ADC1_CH3_INT_EN == 1)
#if ((ADC1_INP0 & ADC1_INP0_INP_CH3_Msk) >>  ADC1_INP0_INP_CH3_Pos == ADC1_INP_NVIC_IRQ16)

  if ((uint8)ADC1->IEN0.bit.IEN_CH3 == (uint8)1)
  {
    if ((uint8)ADC1->CHSTAT.bit.CH3 == (uint8)1)
    {
      ADC1_CH3_CALLBACK();
      ADC1->CHSTATCLR.bit.CH3CLR = 1u;
#if (NVIC_IRQ16_HANDLER_INT_CHECK == 1)
      u8_interrupt_cnt_irq16 += 1;
#endif
    }
  }

#endif /* Interrupt assigned to this Node */
#endif /* Interrupt enabled */
  /* Ch4 */
#if (ADC1_CH4_INT_EN == 1)
#if ((ADC1_INP0 & ADC1_INP0_INP_CH4_Msk) >>  ADC1_INP0_INP_CH4_Pos == ADC1_INP_NVIC_IRQ16)

  if ((uint8)ADC1->IEN0.bit.IEN_CH4 == (uint8)1)
  {
    if ((uint8)ADC1->CHSTAT.bit.CH4 == (uint8)1)
    {
      ADC1_CH4_CALLBACK();
      ADC1->CHSTATCLR.bit.CH4CLR = 1u;
#if (NVIC_IRQ16_HANDLER_INT_CHECK == 1)
      u8_interrupt_cnt_irq16 += 1;
#endif
    }
  }

#endif /* Interrupt assigned to this Node */
#endif /* Interrupt enabled */
  /* Ch5 */
#if (ADC1_CH5_INT_EN == 1)
#if ((ADC1_INP0 & ADC1_INP0_INP_CH5_Msk) >>  ADC1_INP0_INP_CH5_Pos == ADC1_INP_NVIC_IRQ16)

  if ((uint8)ADC1->IEN0.bit.IEN_CH5 == (uint8)1)
  {
    if ((uint8)ADC1->CHSTAT.bit.CH5 == (uint8)1)
    {
      ADC1_CH5_CALLBACK();
      ADC1->CHSTATCLR.bit.CH5CLR = 1u;
#if (NVIC_IRQ16_HANDLER_INT_CHECK == 1)
      u8_interrupt_cnt_irq16 += 1;
#endif
    }
  }

#endif /* Interrupt assigned to this Node */
#endif /* Interrupt enabled */
  /* Ch6 */
#if (ADC1_CH6_INT_EN == 1)
#if ((ADC1_INP0 & ADC1_INP0_INP_CH6_Msk) >>  ADC1_INP0_INP_CH6_Pos == ADC1_INP_NVIC_IRQ16)

  if ((uint8)ADC1->IEN0.bit.IEN_CH6 == (uint8)1)
  {
    if ((uint8)ADC1->CHSTAT.bit.CH6 == (uint8)1)
    {
      ADC1_CH6_CALLBACK();
      ADC1->CHSTATCLR.bit.CH6CLR = 1u;
#if (NVIC_IRQ16_HANDLER_INT_CHECK == 1)
      u8_interrupt_cnt_irq16 += 1;
#endif
    }
  }

#endif /* Interrupt assigned to this Node */
#endif /* Interrupt enabled */
  /* Ch7 */
#if (ADC1_CH7_INT_EN == 1)
#if ((ADC1_INP0 & ADC1_INP0_INP_CH7_Msk) >>  ADC1_INP0_INP_CH7_Pos == ADC1_INP_NVIC_IRQ16)

  if ((uint8)ADC1->IEN0.bit.IEN_CH7 == (uint8)1)
  {
    if ((uint8)ADC1->CHSTAT.bit.CH7 == (uint8)1)
    {
      ADC1_CH7_CALLBACK();
      ADC1->CHSTATCLR.bit.CH7CLR = 1u;
#if (NVIC_IRQ16_HANDLER_INT_CHECK == 1)
      u8_interrupt_cnt_irq16 += 1;
#endif
    }
  }

#endif /* Interrupt assigned to this Node */
#endif /* Interrupt enabled */
  /* Ch8 */
#if (ADC1_CH8_INT_EN == 1)
#if ((ADC1_INP0 & ADC1_INP0_INP_CH8_Msk) >>  ADC1_INP0_INP_CH8_Pos == ADC1_INP_NVIC_IRQ16)

  if ((uint8)ADC1->IEN0.bit.IEN_CH8 == (uint8)1)
  {
    if ((uint8)ADC1->CHSTAT.bit.CH8 == (uint8)1)
    {
      ADC1_CH8_CALLBACK();
      ADC1->CHSTATCLR.bit.CH8CLR = 1u;
#if (NVIC_IRQ16_HANDLER_INT_CHECK == 1)
      u8_interrupt_cnt_irq16 += 1;
#endif
    }
  }

#endif /* Interrupt assigned to this Node */
#endif /* Interrupt enabled */
  /* Ch9 */
#if (ADC1_CH9_INT_EN == 1)
#if ((ADC1_INP0 & ADC1_INP0_INP_CH9_Msk) >>  ADC1_INP0_INP_CH9_Pos == ADC1_INP_NVIC_IRQ16)

  if ((uint8)ADC1->IEN0.bit.IEN_CH9 == (uint8)1)
  {
    if ((uint8)ADC1->CHSTAT.bit.CH9 == (uint8)1)
    {
      ADC1_CH9_CALLBACK();
      ADC1->CHSTATCLR.bit.CH9CLR = 1u;
#if (NVIC_IRQ16_HANDLER_INT_CHECK == 1)
      u8_interrupt_cnt_irq16 += 1;
#endif
    }
  }

#endif /* Interrupt assigned to this Node */
#endif /* Interrupt enabled */
  /* Ch10 */
#if (ADC1_CH10_INT_EN == 1)
#if ((ADC1_INP0 & ADC1_INP0_INP_CH10_Msk) >>  ADC1_INP0_INP_CH10_Pos == ADC1_INP_NVIC_IRQ16)

  if ((uint8)ADC1->IEN0.bit.IEN_CH10 == (uint8)1)
  {
    if ((uint8)ADC1->CHSTAT.bit.CH10 == (uint8)1)
    {
      ADC1_CH10_CALLBACK();
      ADC1->CHSTATCLR.bit.CH10CLR = 1u;
#if (NVIC_IRQ16_HANDLER_INT_CHECK == 1)
      u8_interrupt_cnt_irq16 += 1;
#endif
    }
  }

#endif /* Interrupt assigned to this Node */
#endif /* Interrupt enabled */
  /* Ch11 */
#if (ADC1_CH11_INT_EN == 1)
#if ((ADC1_INP0 & ADC1_INP0_INP_CH11_Msk) >>  ADC1_INP0_INP_CH11_Pos == ADC1_INP_NVIC_IRQ16)

  if ((uint8)ADC1->IEN0.bit.IEN_CH11 == (uint8)1)
  {
    if ((uint8)ADC1->CHSTAT.bit.CH11 == (uint8)1)
    {
      ADC1_CH11_CALLBACK();
      ADC1->CHSTATCLR.bit.CH11CLR = 1u;
#if (NVIC_IRQ16_HANDLER_INT_CHECK == 1)
      u8_interrupt_cnt_irq16 += 1;
#endif
    }
  }

#endif /* Interrupt assigned to this Node */
#endif /* Interrupt enabled */
  /* Ch12 */
#if (ADC1_CH12_INT_EN == 1)
#if ((ADC1_INP0 & ADC1_INP0_INP_CH12_Msk) >>  ADC1_INP0_INP_CH12_Pos == ADC1_INP_NVIC_IRQ16)

  if ((uint8)ADC1->IEN0.bit.IEN_CH12 == (uint8)1)
  {
    if ((uint8)ADC1->CHSTAT.bit.CH12 == (uint8)1)
    {
      ADC1_CH12_CALLBACK();
      ADC1->CHSTATCLR.bit.CH12CLR = 1u;
#if (NVIC_IRQ16_HANDLER_INT_CHECK == 1)
      u8_interrupt_cnt_irq16 += 1;
#endif
    }
  }

#endif /* Interrupt assigned to this Node */
#endif /* Interrupt enabled */
  /* Ch13 */
#if (ADC1_CH13_INT_EN == 1)
#if ((ADC1_INP0 & ADC1_INP0_INP_CH13_Msk) >>  ADC1_INP0_INP_CH13_Pos == ADC1_INP_NVIC_IRQ16)

  if ((uint8)ADC1->IEN0.bit.IEN_CH13 == (uint8)1)
  {
    if ((uint8)ADC1->CHSTAT.bit.CH13 == (uint8)1)
    {
      ADC1_CH13_CALLBACK();
      ADC1->CHSTATCLR.bit.CH13CLR = 1u;
#if (NVIC_IRQ16_HANDLER_INT_CHECK == 1)
      u8_interrupt_cnt_irq16 += 1;
#endif
    }
  }

#endif /* Interrupt assigned to this Node */
#endif /* Interrupt enabled */
  /* Ch14 */
#if (ADC1_CH14_INT_EN == 1)
#if ((ADC1_INP0 & ADC1_INP0_INP_CH14_Msk) >>  ADC1_INP0_INP_CH14_Pos == ADC1_INP_NVIC_IRQ16)

  if ((uint8)ADC1->IEN0.bit.IEN_CH14 == (uint8)1)
  {
    if ((uint8)ADC1->CHSTAT.bit.CH14 == (uint8)1)
    {
      ADC1_CH14_CALLBACK();
      ADC1->CHSTATCLR.bit.CH14CLR = 1u;
#if (NVIC_IRQ16_HANDLER_INT_CHECK == 1)
      u8_interrupt_cnt_irq16 += 1;
#endif
    }
  }

#endif /* Interrupt assigned to this Node */
#endif /* Interrupt enabled */
  /* Ch15 */
#if (ADC1_CH15_INT_EN == 1)
#if ((ADC1_INP0 & ADC1_INP0_INP_CH15_Msk) >>  ADC1_INP0_INP_CH15_Pos == ADC1_INP_NVIC_IRQ16)

  if ((uint8)ADC1->IEN0.bit.IEN_CH15 == (uint8)1)
  {
    if ((uint8)ADC1->CHSTAT.bit.CH15 == (uint8)1)
    {
      ADC1_CH15_CALLBACK();
      ADC1->CHSTATCLR.bit.CH15CLR = 1u;
#if (NVIC_IRQ16_HANDLER_INT_CHECK == 1)
      u8_interrupt_cnt_irq16 += 1;
#endif
    }
  }

#endif /* Interrupt assigned to this Node */
#endif /* Interrupt enabled */
  /* Ch16 */
#if (ADC1_CH16_INT_EN == 1)
#if ((ADC1_INP1 & ADC1_INP1_INP_CH16_Msk) >>  ADC1_INP1_INP_CH16_Pos == ADC1_INP_NVIC_IRQ16)

  if ((uint8)ADC1->IEN0.bit.IEN_CH16 == (uint8)1)
  {
    if ((uint8)ADC1->CHSTAT.bit.CH16 == (uint8)1)
    {
      ADC1_CH16_CALLBACK();
      ADC1->CHSTATCLR.bit.CH16CLR = 1u;
#if (NVIC_IRQ16_HANDLER_INT_CHECK == 1)
      u8_interrupt_cnt_irq16 += 1;
#endif
    }
  }

#endif /* Interrupt assigned to this Node */
#endif /* Interrupt enabled */
  /* Ch17 */
#if (ADC1_CH17_INT_EN == 1)
#if ((ADC1_INP1 & ADC1_INP1_INP_CH17_Msk) >>  ADC1_INP1_INP_CH17_Pos == ADC1_INP_NVIC_IRQ16)

  if ((uint8)ADC1->IEN0.bit.IEN_CH17 == (uint8)1)
  {
    if ((uint8)ADC1->CHSTAT.bit.CH17 == (uint8)1)
    {
      ADC1_CH17_CALLBACK();
      ADC1->CHSTATCLR.bit.CH17CLR = 1u;
#if (NVIC_IRQ16_HANDLER_INT_CHECK == 1)
      u8_interrupt_cnt_irq16 += 1;
#endif
    }
  }

#endif /* Interrupt assigned to this Node */
#endif /* Interrupt enabled */
  /* Ch18 */
#if (ADC1_CH18_INT_EN == 1)
#if ((ADC1_INP1 & ADC1_INP1_INP_CH18_Msk) >>  ADC1_INP1_INP_CH18_Pos == ADC1_INP_NVIC_IRQ16)

  if ((uint8)ADC1->IEN0.bit.IEN_CH18 == (uint8)1)
  {
    if ((uint8)ADC1->CHSTAT.bit.CH18 == (uint8)1)
    {
      ADC1_CH18_CALLBACK();
      ADC1->CHSTATCLR.bit.CH18CLR = 1u;
#if (NVIC_IRQ16_HANDLER_INT_CHECK == 1)
      u8_interrupt_cnt_irq16 += 1;
#endif
    }
  }

#endif /* Interrupt assigned to this Node */
#endif /* Interrupt enabled */
  /* Ch19 */
#if (ADC1_CH19_INT_EN == 1)
#if ((ADC1_INP1 & ADC1_INP1_INP_CH19_Msk) >>  ADC1_INP1_INP_CH19_Pos == ADC1_INP_NVIC_IRQ16)

  if ((uint8)ADC1->IEN0.bit.IEN_CH19 == (uint8)1)
  {
    if ((uint8)ADC1->CHSTAT.bit.CH19 == (uint8)1)
    {
      ADC1_CH19_CALLBACK();
      ADC1->CHSTATCLR.bit.CH19CLR = 1u;
#if (NVIC_IRQ16_HANDLER_INT_CHECK == 1)
      u8_interrupt_cnt_irq16 += 1;
#endif
    }
  }

#endif /* Interrupt assigned to this Node */
#endif /* Interrupt enabled */
  /* Sq0 */
#if (ADC1_SQ0_INT_EN == 1)
#if ((ADC1_INP3 & ADC1_INP3_INP_SQ0_Msk) >>  ADC1_INP3_INP_SQ0_Pos == ADC1_INP_NVIC_IRQ16)

  if ((uint8)ADC1->IEN0.bit.IEN_SQ0 == (uint8)1)
  {
    if ((uint8)ADC1->SQSTAT.bit.SQ0 == (uint8)1)
    {
      ADC1_SQ0_CALLBACK();
      ADC1->SQSTATCLR.bit.SQ0CLR = 1u;
#if (NVIC_IRQ16_HANDLER_INT_CHECK == 1)
      u8_interrupt_cnt_irq16 += 1;
#endif
    }
  }

#endif /* Interrupt assigned to this Node */
#endif /* Interrupt enabled */
  /* Sq1 */
#if (ADC1_SQ1_INT_EN == 1)
#if ((ADC1_INP3 & ADC1_INP3_INP_SQ1_Msk) >>  ADC1_INP3_INP_SQ1_Pos == ADC1_INP_NVIC_IRQ16)

  if ((uint8)ADC1->IEN0.bit.IEN_SQ1 == (uint8)1)
  {
    if ((uint8)ADC1->SQSTAT.bit.SQ1 == (uint8)1)
    {
      ADC1_SQ1_CALLBACK();
      ADC1->SQSTATCLR.bit.SQ1CLR = 1u;
#if (NVIC_IRQ16_HANDLER_INT_CHECK == 1)
      u8_interrupt_cnt_irq16 += 1;
#endif
    }
  }

#endif /* Interrupt assigned to this Node */
#endif /* Interrupt enabled */
  /* Sq2 */
#if (ADC1_SQ2_INT_EN == 1)
#if ((ADC1_INP3 & ADC1_INP3_INP_SQ2_Msk) >>  ADC1_INP3_INP_SQ2_Pos == ADC1_INP_NVIC_IRQ16)

  if ((uint8)ADC1->IEN0.bit.IEN_SQ2 == (uint8)1)
  {
    if ((uint8)ADC1->SQSTAT.bit.SQ2 == (uint8)1)
    {
      ADC1_SQ2_CALLBACK();
      ADC1->SQSTATCLR.bit.SQ2CLR = 1u;
#if (NVIC_IRQ16_HANDLER_INT_CHECK == 1)
      u8_interrupt_cnt_irq16 += 1;
#endif
    }
  }

#endif /* Interrupt assigned to this Node */
#endif /* Interrupt enabled */
  /* Sq3 */
#if (ADC1_SQ3_INT_EN == 1)
#if ((ADC1_INP3 & ADC1_INP3_INP_SQ3_Msk) >>  ADC1_INP3_INP_SQ3_Pos == ADC1_INP_NVIC_IRQ16)

  if ((uint8)ADC1->IEN0.bit.IEN_SQ3 == (uint8)1)
  {
    if ((uint8)ADC1->SQSTAT.bit.SQ3 == (uint8)1)
    {
      ADC1_SQ3_CALLBACK();
      ADC1->SQSTATCLR.bit.SQ3CLR = 1u;
#if (NVIC_IRQ16_HANDLER_INT_CHECK == 1)
      u8_interrupt_cnt_irq16 += 1;
#endif
    }
  }

#endif /* Interrupt assigned to this Node */
#endif /* Interrupt enabled */
  /* LOTH0 */
#if (ADC1_LOTH0_INT_EN == 1)
#if ((ADC1_INP2 & ADC1_INP2_INP_CMP_LO0_Msk) >>  ADC1_INP2_INP_CMP_LO0_Pos == ADC1_INP_NVIC_IRQ16)

  if ((uint8)ADC1->IEN0.bit.IEN_LO0 == (uint8)1)
  {
    if ((uint8)ADC1->CMPSTAT.bit.CMP_LO0_IS == (uint8)1)
    {
      ADC1_LOTH0_CALLBACK();
      ADC1->CMPSTATCLR.bit.CMP_LO0_ISCLR = 1u;
#if (NVIC_IRQ16_HANDLER_INT_CHECK == 1)
      u8_interrupt_cnt_irq16 += 1;
#endif
    }
  }

#endif /* Interrupt assigned to this Node */
#endif /* Interrupt enabled */
  /* LOTH1 */
#if (ADC1_LOTH1_INT_EN == 1)
#if ((ADC1_INP2 & ADC1_INP2_INP_CMP_LO1_Msk) >>  ADC1_INP2_INP_CMP_LO1_Pos == ADC1_INP_NVIC_IRQ16)

  if ((uint8)ADC1->IEN0.bit.IEN_LO1 == (uint8)1)
  {
    if ((uint8)ADC1->CMPSTAT.bit.CMP_LO1_IS == (uint8)1)
    {
      ADC1_LOTH1_CALLBACK();
      ADC1->CMPSTATCLR.bit.CMP_LO1_ISCLR = 1u;
#if (NVIC_IRQ16_HANDLER_INT_CHECK == 1)
      u8_interrupt_cnt_irq16 += 1;
#endif
    }
  }

#endif /* Interrupt assigned to this Node */
#endif /* Interrupt enabled */
  /* LOTH2 */
#if (ADC1_LOTH2_INT_EN == 1)
#if ((ADC1_INP2 & ADC1_INP2_INP_CMP_LO2_Msk) >>  ADC1_INP2_INP_CMP_LO2_Pos == ADC1_INP_NVIC_IRQ16)

  if ((uint8)ADC1->IEN0.bit.IEN_LO2 == (uint8)1)
  {
    if ((uint8)ADC1->CMPSTAT.bit.CMP_LO2_IS == (uint8)1)
    {
      ADC1_LOTH2_CALLBACK();
      ADC1->CMPSTATCLR.bit.CMP_LO2_ISCLR = 1u;
#if (NVIC_IRQ16_HANDLER_INT_CHECK == 1)
      u8_interrupt_cnt_irq16 += 1;
#endif
    }
  }

#endif /* Interrupt assigned to this Node */
#endif /* Interrupt enabled */
  /* LOTH3 */
#if (ADC1_LOTH3_INT_EN == 1)
#if ((ADC1_INP2 & ADC1_INP2_INP_CMP_LO3_Msk) >>  ADC1_INP2_INP_CMP_LO3_Pos == ADC1_INP_NVIC_IRQ16)

  if ((uint8)ADC1->IEN0.bit.IEN_LO3 == (uint8)1)
  {
    if ((uint8)ADC1->CMPSTAT.bit.CMP_LO3_IS == (uint8)1)
    {
      ADC1_LOTH3_CALLBACK();
      ADC1->CMPSTATCLR.bit.CMP_LO3_ISCLR = 1u;
#if (NVIC_IRQ16_HANDLER_INT_CHECK == 1)
      u8_interrupt_cnt_irq16 += 1;
#endif
    }
  }

#endif /* Interrupt assigned to this Node */
#endif /* Interrupt enabled */
  /* UPTH0 */
#if (ADC1_UPTH0_INT_EN == 1)
#if ((ADC1_INP2 & ADC1_INP2_INP_CMP_UP0_Msk) >>  ADC1_INP2_INP_CMP_UP0_Pos == ADC1_INP_NVIC_IRQ16)

  if ((uint8)ADC1->IEN0.bit.IEN_UP0 == (uint8)1)
  {
    if ((uint8)ADC1->CMPSTAT.bit.CMP_UP0_IS == (uint8)1)
    {
      ADC1_UPTH0_CALLBACK();
      ADC1->CMPSTATCLR.bit.CMP_UP0_ISCLR = 1u;
#if (NVIC_IRQ16_HANDLER_INT_CHECK == 1)
      u8_interrupt_cnt_irq16 += 1;
#endif
    }
  }

#endif /* Interrupt assigned to this Node */
#endif /* Interrupt enabled */
  /* UPTH1 */
#if (ADC1_UPTH1_INT_EN == 1)
#if ((ADC1_INP2 & ADC1_INP2_INP_CMP_UP1_Msk) >>  ADC1_INP2_INP_CMP_UP1_Pos == ADC1_INP_NVIC_IRQ16)

  if ((uint8)ADC1->IEN0.bit.IEN_UP1 == (uint8)1)
  {
    if ((uint8)ADC1->CMPSTAT.bit.CMP_UP1_IS == (uint8)1)
    {
      ADC1_UPTH1_CALLBACK();
      ADC1->CMPSTATCLR.bit.CMP_UP1_ISCLR = 1u;
#if (NVIC_IRQ16_HANDLER_INT_CHECK == 1)
      u8_interrupt_cnt_irq16 += 1;
#endif
    }
  }

#endif /* Interrupt assigned to this Node */
#endif /* Interrupt enabled */
  /* UPTH2 */
#if (ADC1_UPTH2_INT_EN == 1)
#if ((ADC1_INP2 & ADC1_INP2_INP_CMP_UP2_Msk) >>  ADC1_INP2_INP_CMP_UP2_Pos == ADC1_INP_NVIC_IRQ16)

  if ((uint8)ADC1->IEN0.bit.IEN_UP2 == (uint8)1)
  {
    if ((uint8)ADC1->CMPSTAT.bit.CMP_UP2_IS == (uint8)1)
    {
      ADC1_UPTH2_CALLBACK();
      ADC1->CMPSTATCLR.bit.CMP_UP2_ISCLR = 1u;
#if (NVIC_IRQ16_HANDLER_INT_CHECK == 1)
      u8_interrupt_cnt_irq16 += 1;
#endif
    }
  }

#endif /* Interrupt assigned to this Node */
#endif /* Interrupt enabled */
  /* UPTH3 */
#if (ADC1_UPTH3_INT_EN == 1)
#if ((ADC1_INP2 & ADC1_INP2_INP_CMP_UP3_Msk) >>  ADC1_INP2_INP_CMP_UP3_Pos == ADC1_INP_NVIC_IRQ16)

  if ((uint8)ADC1->IEN0.bit.IEN_UP3 == (uint8)1)
  {
    if ((uint8)ADC1->CMPSTAT.bit.CMP_UP3_IS == (uint8)1)
    {
      ADC1_UPTH3_CALLBACK();
      ADC1->CMPSTATCLR.bit.CMP_UP3_ISCLR = 1u;
#if (NVIC_IRQ16_HANDLER_INT_CHECK == 1)
      u8_interrupt_cnt_irq16 += 1;
#endif
    }
  }

#endif /* Interrupt assigned to this Node */
#endif /* Interrupt enabled */
  /* Coll0 */
#if (ADC1_COLL0_INT_EN == 1)
#if ((ADC1_INP3 & ADC1_INP3_INP_COLL0_Msk) >>  ADC1_INP3_INP_COLL0_Pos == ADC1_INP_NVIC_IRQ16)

  if ((uint8)ADC1->IEN1.bit.IEN_COLL0 == (uint8)1)
  {
    if ((uint8)ADC1->SQSTAT.bit.COLL0 == (uint8)1)
    {
      ADC1_COLL0_CALLBACK();
      ADC1->SQSTATCLR.bit.COLL0CLR = 1u;
#if (NVIC_IRQ16_HANDLER_INT_CHECK == 1)
      u8_interrupt_cnt_irq16 += 1;
#endif
    }
  }

#endif /* Interrupt assigned to this Node */
#endif /* Interrupt enabled */
  /* Coll1 */
#if (ADC1_COLL1_INT_EN == 1)
#if ((ADC1_INP3 & ADC1_INP3_INP_COLL1_Msk) >>  ADC1_INP3_INP_COLL1_Pos == ADC1_INP_NVIC_IRQ16)

  if ((uint8)ADC1->IEN1.bit.IEN_COLL1 == (uint8)1)
  {
    if ((uint8)ADC1->SQSTAT.bit.COLL1 == (uint8)1)
    {
      ADC1_COLL1_CALLBACK();
      ADC1->SQSTATCLR.bit.COLL1CLR = 1u;
#if (NVIC_IRQ16_HANDLER_INT_CHECK == 1)
      u8_interrupt_cnt_irq16 += 1;
#endif
    }
  }

#endif /* Interrupt assigned to this Node */
#endif /* Interrupt enabled */
  /* Coll2 */
#if (ADC1_COLL2_INT_EN == 1)
#if ((ADC1_INP3 & ADC1_INP3_INP_COLL2_Msk) >>  ADC1_INP3_INP_COLL2_Pos == ADC1_INP_NVIC_IRQ16)

  if ((uint8)ADC1->IEN1.bit.IEN_COLL2 == (uint8)1)
  {
    if ((uint8)ADC1->SQSTAT.bit.COLL2 == (uint8)1)
    {
      ADC1_COLL2_CALLBACK();
      ADC1->SQSTATCLR.bit.COLL2CLR = 1u;
#if (NVIC_IRQ16_HANDLER_INT_CHECK == 1)
      u8_interrupt_cnt_irq16 += 1;
#endif
    }
  }

#endif /* Interrupt assigned to this Node */
#endif /* Interrupt enabled */
  /* Coll3 */
#if (ADC1_COLL3_INT_EN == 1)
#if ((ADC1_INP3 & ADC1_INP3_INP_COLL3_Msk) >>  ADC1_INP3_INP_COLL3_Pos == ADC1_INP_NVIC_IRQ16)

  if ((uint8)ADC1->IEN1.bit.IEN_COLL3 == (uint8)1)
  {
    if ((uint8)ADC1->SQSTAT.bit.COLL3 == (uint8)1)
    {
      ADC1_COLL3_CALLBACK();
      ADC1->SQSTATCLR.bit.COLL3CLR = 1u;
#if (NVIC_IRQ16_HANDLER_INT_CHECK == 1)
      u8_interrupt_cnt_irq16 += 1;
#endif
    }
  }

#endif /* Interrupt assigned to this Node */
#endif /* Interrupt enabled */
  /* WFR0 */
#if (ADC1_WFR0_INT_EN == 1)
#if ((ADC1_INP3 & ADC1_INP3_INP_WFR0_Msk) >>  ADC1_INP3_INP_WFR0_Pos == ADC1_INP_NVIC_IRQ16)

  if ((uint8)ADC1->IEN1.bit.IEN_WFR0 == (uint8)1)
  {
    if ((uint8)ADC1->SQSTAT.bit.WFR0 == (uint8)1)
    {
      ADC1_WFR0_CALLBACK();
      ADC1->SQSTATCLR.bit.WFR0CLR = 1u;
#if (NVIC_IRQ16_HANDLER_INT_CHECK == 1)
      u8_interrupt_cnt_irq16 += 1;
#endif
    }
  }

#endif /* Interrupt assigned to this Node */
#endif /* Interrupt enabled */
  /* WFR1 */
#if (ADC1_WFR1_INT_EN == 1)
#if ((ADC1_INP3 & ADC1_INP3_INP_WFR1_Msk) >>  ADC1_INP3_INP_WFR1_Pos == ADC1_INP_NVIC_IRQ16)

  if ((uint8)ADC1->IEN1.bit.IEN_WFR1 == (uint8)1)
  {
    if ((uint8)ADC1->SQSTAT.bit.WFR1 == (uint8)1)
    {
      ADC1_WFR1_CALLBACK();
      ADC1->SQSTATCLR.bit.WFR1CLR = 1u;
#if (NVIC_IRQ16_HANDLER_INT_CHECK == 1)
      u8_interrupt_cnt_irq16 += 1;
#endif
    }
  }

#endif /* Interrupt assigned to this Node */
#endif /* Interrupt enabled */
  /* WFR2 */
#if (ADC1_WFR2_INT_EN == 1)
#if ((ADC1_INP3 & ADC1_INP3_INP_WFR2_Msk) >>  ADC1_INP3_INP_WFR2_Pos == ADC1_INP_NVIC_IRQ16)

  if ((uint8)ADC1->IEN1.bit.IEN_WFR2 == (uint8)1)
  {
    if ((uint8)ADC1->SQSTAT.bit.WFR2 == (uint8)1)
    {
      ADC1_WFR2_CALLBACK();
      ADC1->SQSTATCLR.bit.WFR2CLR = 1u;
#if (NVIC_IRQ16_HANDLER_INT_CHECK == 1)
      u8_interrupt_cnt_irq16 += 1;
#endif
    }
  }

#endif /* Interrupt assigned to this Node */
#endif /* Interrupt enabled */
  /* WFR3 */
#if (ADC1_WFR3_INT_EN == 1)
#if ((ADC1_INP3 & ADC1_INP3_INP_WFR3_Msk) >>  ADC1_INP3_INP_WFR3_Pos == ADC1_INP_NVIC_IRQ16)

  if ((uint8)ADC1->IEN1.bit.IEN_WFR3 == (uint8)1)
  {
    if ((uint8)ADC1->SQSTAT.bit.WFR3 == (uint8)1)
    {
      ADC1_WFR3_CALLBACK();
      ADC1->SQSTATCLR.bit.WFR3CLR = 1u;
#if (NVIC_IRQ16_HANDLER_INT_CHECK == 1)
      u8_interrupt_cnt_irq16 += 1;
#endif
    }
  }

#endif /* Interrupt assigned to this Node */
#endif /* Interrupt enabled */
}
#endif /* ((CPU_NVIC_ISER & CPU_NVIC_ISER_IRQEN16_Msk) == 1u) */
