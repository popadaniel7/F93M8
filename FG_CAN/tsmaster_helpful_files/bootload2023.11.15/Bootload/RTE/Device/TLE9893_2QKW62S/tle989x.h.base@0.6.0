/*
 * Copyright (c) 2009-2019 ARM Limited. All rights reserved.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * 
 * Licensed under the Apache License, Version 2.0 (the License); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @file     tle989x.h
 * @brief    CMSIS HeaderFile
 * @version  0.6.1
 * @date     10. June 2022
 * @note     Generated by SVDConv V3.3.39 on Wednesday, 01.12.2021 14:42:17
 *           from File 'tle989x.svd',
 *           last modified on Wednesday, 01.12.2021 13:41:45
 */

/*******************************************************************************
**                             Author(s) Identity                             **
********************************************************************************
** Initials     Name                                                          **
** ---------------------------------------------------------------------------**
** DM           Daniel Mysliwitz                                              **
** BG           Blandine Guillot                                              **
** JO           Julia Ott                                                     **
** VO           Vanessa Ongaro                                                **
*******************************************************************************/

/*******************************************************************************
**                          Revision Control History                          **
********************************************************************************
** V0.1.0: 2020-05-26, DM:   Initial version                                  **
** V0.2.0: 2020-07-08, JO:   Added external variables declaration for unit    **
**                           testing under condition UNIT_TESTING_OCN         **
** V0.2.1: 2020-08-11, JO:   EP-449: Disable warnirng 'Wpadded' locally where **
**                           violations can't be avoided                      **
** V0.3.0: 2020-09-13, BG:   Generated by SVDConv V3.3.35 on                  **
**                           Sunday, 13.09.2020 19:51:51 from File            **
**                           'tle989x.svd', last modified on                  **
**                           Sunday, 13.09.2020 16:03:21                      **
** V0.3.1: 2020-08-11, JO:   EP-484: Added external variables declaration for **
**                           unit testing under condition UNIT_TESTING_OCN    **
**                           again, with CACHE, without CANCONTR              **
** V0.3.2: 2020-10-02, BG:   EP-489: Added missing registers for MEMCTRL      **
** V0.3.3: 2020-10-06, BG:   EP-490: Separated CANCONTR registers into 3      **
**                           message objects                                  **
**                           Removed unused position and mask defines         **
** V0.3.4: 2020-10-06, BG:   EP-515: Added positions and masks for FS_SSD_CLR **
** V0.3.5: 2020-10-20, BG:   EP-532: Added positions and masks for XTALCON,   **
**                           XTALSTATC and NMISRC                             **
** V0.3.6: 2020-10-21, BG:   EP-539: Added positions and masks for GLOBCONF   **
**                           (ADC1), PMCON (SCU), GLOBCONF(ADC2)              **
** V0.3.7: 2020-10-27, BG:   EP-560: Renamed split compare bits for ADC2      **
** V0.3.8: 2020-10-27, BG:   EP-561: Renamed split compare bits for ADC1      **
** V0.3.9: 2020-11-16, BG:   EP-595: Added positions and masks for CP_CTRL    **
** V0.4.0: 2020-11-17, BG:   EP-600: Added position and mask for WD_CTRL.WDP  **
** V0.4.1: 2020-11-27, BG:   EP-610: Corrected MISRA 2012 errors              **
** V0.4.2: 2020-11-27, BG:   EP-627: Added positions and masks for CANTRX     **
** V0.4.3: 2020-12-02, BG:   EP-629: Updated interrupt naming                 **
** V0.4.4: 2020-12-04, JO:   EP-626: Added positions and masks for WAKE_CTRL  **
** V0.4.5: 2020-12-10, BG:   EP-622: Added positions and masks for SCON and   **
**                           BCON in UART                                     **
** V0.4.6: 2021-01-26, BG:   EP-680: Restructured the CANCONTR into CANNODE   **
**                           and CANNODEFD                                    **
**                           Removed unnecessary MOCTR and MOSTAT registers   **
**                           from CANMSGOBJ1 and CANMSGOBJ2                   **
** V0.4.7: 2021-02-26, BG:   EP-701: Added position and mask for WD_CTRL.SOW  **
** V0.4.8: 2021-04-16, JO:   EP-753: Removed CACHE_CONFIG register            **
**                           Added registers to control the cache             **
** V0.4.9: 2021-08-10, BG:   EP-898: Updated header file according to UM v0.2 **
** V0.5.0: 2021-09-28, BG:   EP-832: Updated NVIC priority number of bits     **
** V0.6.0: 2021-09-28, BG:   EP-899: Updated header file for AK design step   **
** V0.6.1: 2022-06-24, VO:   EP-1152: Added missing SCU register LOCKUPCFG    **
*******************************************************************************/                                                 


/** @addtogroup Infineon
  * @{
  */


/** @addtogroup tle989x
  * @{
  */


#ifndef TLE989X_H
#define TLE989X_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup Configuration_of_CMSIS
  * @{
  */



/* =========================================================================================================================== */
/* ================                                Interrupt Number Definition                                ================ */
/* =========================================================================================================================== */

typedef enum {
/* =======================================  ARM Cortex-M3 Specific Interrupt Numbers  ======================================== */
  Reset_IRQn                = -15,              /*!< -15  Reset Vector, invoked on Power up and warm reset                     */
  NonMaskableInt_IRQn       = -14,              /*!< -14  Non maskable Interrupt, cannot be stopped or preempted               */
  HardFault_IRQn            = -13,              /*!< -13  Hard Fault, all classes of Fault                                     */
  MemoryManagement_IRQn     = -12,              /*!< -12  Memory Management, MPU mismatch, including Access Violation
                                                     and No Match                                                              */
  BusFault_IRQn             = -11,              /*!< -11  Bus Fault, Pre-Fetch-, Memory Access Fault, other address/memory
                                                     related Fault                                                             */
  UsageFault_IRQn           = -10,              /*!< -10  Usage Fault, i.e. Undef Instruction, Illegal State Transition        */
  SVCall_IRQn               =  -5,              /*!< -5 System Service Call via SVC instruction                                */
  DebugMonitor_IRQn         =  -4,              /*!< -4 Debug Monitor                                                          */
  PendSV_IRQn               =  -2,              /*!< -2 Pendable request for system service                                    */
  SysTick_IRQn              =  -1,              /*!< -1 System Tick Timer                                                      */
/* ==========================================  tle989x Specific Interrupt Numbers  =========================================== */
  WARN_INP0_NVIC_IRQn       =   0,              /*!< 0  Interrupt node 0: warnings                                             */
  WARN_INP1_NVIC_IRQn       =   1,              /*!< 1  Interrupt node 1: warnings                                             */
  CCU7_INP0_NVIC_IRQn       =   2,              /*!< 2  Interrupt node 2: CCU7                                                 */
  CCU7_INP1_NVIC_IRQn       =   3,              /*!< 3  Interrupt node 3: CCU7                                                 */
  CCU7_INP2_NVIC_IRQn       =   4,              /*!< 4  Interrupt node 4: CCU7                                                 */
  CCU7_INP3_NVIC_IRQn       =   5,              /*!< 5  Interrupt node 5: CCU7                                                 */
  NVM_INP0_NVIC_IRQn        =   6,              /*!< 6  Interrupt node 6: NVM                                                  */
  GPT_INP0_NVIC_IRQn        =   7,              /*!< 7  Interrupt node 7: GPT                                                  */
  GPT_INP1_NVIC_IRQn        =   8,              /*!< 8  Interrupt node 8: GPT                                                  */
  T20_INP0_NVIC_IRQn        =   9,              /*!< 9  Interrupt node 9: T20                                                  */
  ADC2_INP0_NVIC_IRQn       =  10,              /*!< 10 Interrupt node 10: ADC2                                                */
  ADC2_INP1_NVIC_IRQn       =  11,              /*!< 11 Interrupt node 11: ADC2                                                */
  MON_INP0_NVIC_IRQn        =  12,              /*!< 12 Interrupt node 12: MONx                                                */
  MON_INP1_NVIC_IRQn        =  13,              /*!< 13 Interrupt node 13: MONx                                                */
  ADC1_INP0_NVIC_IRQn       =  14,              /*!< 14 Interrupt node 14: ADC1                                                */
  ADC1_INP1_NVIC_IRQn       =  15,              /*!< 15 Interrupt node 15: ADC1                                                */
  ADC1_INP2_NVIC_IRQn       =  16,              /*!< 16 Interrupt node 16: ADC1                                                */
  ADC1_INP3_NVIC_IRQn       =  17,              /*!< 17 Interrupt node 17: ADC1                                                */
  BEMF_SDADC_INP0_NVIC_IRQn =  18,              /*!< 18 Interrupt node 18: SDADC, BEMF                                         */
  BEMF_SDADC_INP1_NVIC_IRQn =  19,              /*!< 19 Interrupt node 19: SDADC, BEMF                                         */
  EXT_INP0_NVIC_IRQn        =  20,              /*!< 20 Interrupt node 20: ExtInt                                              */
  EXT_INP1_NVIC_IRQn        =  21,              /*!< 21 Interrupt node 21: ExtInt                                              */
  UART_INP0_NVIC_IRQn       =  22,              /*!< 22 Interrupt node 22: UARTx                                               */
  UART_INP1_NVIC_IRQn       =  23,              /*!< 23 Interrupt node 23: UARTx                                               */
  SSC_INP0_NVIC_IRQn        =  24,              /*!< 24 Interrupt node 24: SSCx                                                */
  SSC_INP1_NVIC_IRQn        =  25,              /*!< 25 Interrupt node 25: SSCx                                                */
  MCAN_INP0_NVIC_IRQn       =  26,              /*!< 26 Interrupt node 26: MultiCAN                                            */
  MCAN_INP1_NVIC_IRQn       =  27,              /*!< 27 Interrupt node 27: MultiCAN                                            */
  MCAN_INP2_NVIC_IRQn       =  28,              /*!< 28 Interrupt node 28: MultiCAN                                            */
  DMA_INP0_NVIC_IRQn        =  29,              /*!< 29 Interrupt node 29: DMA                                                 */
  DMA_INP1_NVIC_IRQn        =  30,              /*!< 30 Interrupt node 30: DMA                                                 */
  T21_INP0_NVIC_IRQn        =  31               /*!< 31 Interrupt node 31: T21                                                 */
} IRQn_Type;



/* =========================================================================================================================== */
/* ================                           Processor and Core Peripheral Section                           ================ */
/* =========================================================================================================================== */

/* ===========================  Configuration of the ARM Cortex-M3 Processor and Core Peripherals  =========================== */
#define __CM3_REV                 0x0201U       /*!< CM3 Core Revision                                                         */
#define __NVIC_PRIO_BITS               5        /*!< Number of Bits used for Priority Levels                                   */
#define __Vendor_SysTickConfig         0        /*!< Set to 1 if different SysTick Config is used                              */
#define __MPU_PRESENT                  0        /*!< MPU present                                                               */
#define __FPU_PRESENT                  0        /*!< FPU present                                                               */


/** @} */ /* End of group Configuration_of_CMSIS */

#include "core_cm3.h"                           /*!< ARM Cortex-M3 processor and core peripherals                              */
#include "system_tle989x.h"                     /*!< tle989x System                                                            */

#ifndef __IM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __IM   __I
#endif
#ifndef __OM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __OM   __O
#endif
#ifndef __IOM                                   /*!< Fallback for older CMSIS versions                                         */
  #define __IOM  __IO
#endif

#ifdef UNIT_TESTING_OCN
  #undef __IM
  #define __IM volatile
#endif

/* ========================================  Start of section using anonymous unions  ======================================== */
#if defined (__CC_ARM)
  #pragma push
  #pragma anon_unions
#elif defined (__ICCARM__)
  #pragma language=extended
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wpadded"
  #pragma clang diagnostic ignored "-Wc11-extensions"
  #pragma clang diagnostic ignored "-Wreserved-id-macro"
  #pragma clang diagnostic ignored "-Wgnu-anonymous-struct"
  #pragma clang diagnostic ignored "-Wnested-anon-types"
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning 586
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#else
  #warning Not supported compiler type
#endif


/* =========================================================================================================================== */
/* ================                            Device Specific Peripheral Section                             ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                           ADC1                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief ADC1 (ADC1)
  */

typedef struct {                                /*!< (@ 0x40000000) ADC1 Structure                                             */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Global Configuration Register                              */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Module Enable                                                      */
            uint32_t            : 4;
      __IOM uint32_t ISTE       : 1;            /*!< [5..5] Idle shadow transfer enable                                        */
            uint32_t            : 26;
    } bit;
  } GLOBCONF;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000004) Clock Control Register                                     */
    
    struct {
      __IOM uint32_t CLKDIV     : 4;            /*!< [3..0] Clock Divider Settings                                             */
            uint32_t            : 28;
    } bit;
  } CLKCON;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000008) Suspend Control Register                                   */
    
    struct {
      __IOM uint32_t SUSEN      : 1;            /*!< [0..0] ADC1 Suspend Enable                                                */
      __IOM uint32_t SUSMOD     : 1;            /*!< [1..1] Suspend Mode                                                       */
            uint32_t            : 30;
    } bit;
  } SUSCTR;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x0000000C) Suspend Status Register                                    */
    
    struct {
      __IM  uint32_t STAT       : 1;            /*!< [0..0] Suspend Mode Status                                                */
      __IM  uint32_t READY      : 1;            /*!< [1..1] Module Ready                                                       */
            uint32_t            : 30;
    } bit;
  } SUSSTAT;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) Sequence Configuration Register                            */
    
    struct {
      __IOM uint32_t SLOTS      : 3;            /*!< [2..0] Number of used Slots in Sequence                                   */
            uint32_t            : 1;
      __IOM uint32_t SQREP      : 2;            /*!< [5..4] Sequence repetition                                                */
      __IOM uint32_t COLLCFG    : 1;            /*!< [6..6] Collision Config                                                   */
      __IOM uint32_t WFRCFG     : 1;            /*!< [7..7] Wait for Read Enable                                               */
      __IOM uint32_t TRGSEL     : 4;            /*!< [11..8] Trigger Select                                                    */
      __IOM uint32_t GTSEL      : 2;            /*!< [13..12] Gating Select                                                    */
      __OM  uint32_t TRGSW      : 1;            /*!< [14..14] Software Trigger Bit                                             */
      __IOM uint32_t GTSW       : 1;            /*!< [15..15] Trigger Software Gating                                          */
            uint32_t            : 16;
    } bit;
  } SQCFG0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000014) SQ Channel Slot Register                                   */
    
    struct {
      __IOM uint32_t CHSEL0     : 5;            /*!< [4..0] Channel Select                                                     */
            uint32_t            : 3;
      __IOM uint32_t CHSEL1     : 5;            /*!< [12..8] Channel Select                                                    */
            uint32_t            : 3;
      __IOM uint32_t CHSEL2     : 5;            /*!< [20..16] Channel Select                                                   */
            uint32_t            : 3;
      __IOM uint32_t CHSEL3     : 5;            /*!< [28..24] Channel Select                                                   */
            uint32_t            : 3;
    } bit;
  } SQSLOT0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000018) Sequence Configuration Register                            */
    
    struct {
      __IOM uint32_t SLOTS      : 3;            /*!< [2..0] Number of used Slots in Sequence                                   */
            uint32_t            : 1;
      __IOM uint32_t SQREP      : 2;            /*!< [5..4] Sequence repetition                                                */
      __IOM uint32_t COLLCFG    : 1;            /*!< [6..6] Collision Config                                                   */
      __IOM uint32_t WFRCFG     : 1;            /*!< [7..7] Wait for Read Enable                                               */
      __IOM uint32_t TRGSEL     : 4;            /*!< [11..8] Trigger Select                                                    */
      __IOM uint32_t GTSEL      : 2;            /*!< [13..12] Gating Select                                                    */
      __OM  uint32_t TRGSW      : 1;            /*!< [14..14] Software Trigger Bit                                             */
      __IOM uint32_t GTSW       : 1;            /*!< [15..15] Trigger Software Gating                                          */
            uint32_t            : 16;
    } bit;
  } SQCFG1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000001C) SQ Channel Slot Register                                   */
    
    struct {
      __IOM uint32_t CHSEL0     : 5;            /*!< [4..0] Channel Select                                                     */
            uint32_t            : 3;
      __IOM uint32_t CHSEL1     : 5;            /*!< [12..8] Channel Select                                                    */
            uint32_t            : 3;
      __IOM uint32_t CHSEL2     : 5;            /*!< [20..16] Channel Select                                                   */
            uint32_t            : 3;
      __IOM uint32_t CHSEL3     : 5;            /*!< [28..24] Channel Select                                                   */
            uint32_t            : 3;
    } bit;
  } SQSLOT1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000020) Sequence Configuration Register                            */
    
    struct {
      __IOM uint32_t SLOTS      : 3;            /*!< [2..0] Number of used Slots in Sequence                                   */
            uint32_t            : 1;
      __IOM uint32_t SQREP      : 2;            /*!< [5..4] Sequence repetition                                                */
      __IOM uint32_t COLLCFG    : 1;            /*!< [6..6] Collision Config                                                   */
      __IOM uint32_t WFRCFG     : 1;            /*!< [7..7] Wait for Read Enable                                               */
      __IOM uint32_t TRGSEL     : 4;            /*!< [11..8] Trigger Select                                                    */
      __IOM uint32_t GTSEL      : 2;            /*!< [13..12] Gating Select                                                    */
      __OM  uint32_t TRGSW      : 1;            /*!< [14..14] Software Trigger Bit                                             */
      __IOM uint32_t GTSW       : 1;            /*!< [15..15] Trigger Software Gating                                          */
            uint32_t            : 16;
    } bit;
  } SQCFG2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000024) SQ Channel Slot Register                                   */
    
    struct {
      __IOM uint32_t CHSEL0     : 5;            /*!< [4..0] Channel Select                                                     */
            uint32_t            : 3;
      __IOM uint32_t CHSEL1     : 5;            /*!< [12..8] Channel Select                                                    */
            uint32_t            : 3;
      __IOM uint32_t CHSEL2     : 5;            /*!< [20..16] Channel Select                                                   */
            uint32_t            : 3;
      __IOM uint32_t CHSEL3     : 5;            /*!< [28..24] Channel Select                                                   */
            uint32_t            : 3;
    } bit;
  } SQSLOT2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000028) Sequence Configuration Register                            */
    
    struct {
      __IOM uint32_t SLOTS      : 3;            /*!< [2..0] Number of used Slots in Sequence                                   */
            uint32_t            : 1;
      __IOM uint32_t SQREP      : 2;            /*!< [5..4] Sequence repetition                                                */
      __IOM uint32_t COLLCFG    : 1;            /*!< [6..6] Collision Config                                                   */
      __IOM uint32_t WFRCFG     : 1;            /*!< [7..7] Wait for Read Enable                                               */
      __IOM uint32_t TRGSEL     : 4;            /*!< [11..8] Trigger Select                                                    */
      __IOM uint32_t GTSEL      : 2;            /*!< [13..12] Gating Select                                                    */
      __OM  uint32_t TRGSW      : 1;            /*!< [14..14] Software Trigger Bit                                             */
      __IOM uint32_t GTSW       : 1;            /*!< [15..15] Trigger Software Gating                                          */
            uint32_t            : 16;
    } bit;
  } SQCFG3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000002C) SQ Channel Slot Register                                   */
    
    struct {
      __IOM uint32_t CHSEL0     : 5;            /*!< [4..0] Channel Select                                                     */
            uint32_t            : 3;
      __IOM uint32_t CHSEL1     : 5;            /*!< [12..8] Channel Select                                                    */
            uint32_t            : 3;
      __IOM uint32_t CHSEL2     : 5;            /*!< [20..16] Channel Select                                                   */
            uint32_t            : 3;
      __IOM uint32_t CHSEL3     : 5;            /*!< [28..24] Channel Select                                                   */
            uint32_t            : 3;
    } bit;
  } SQSLOT3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000030) Sequence Status Register                                   */
    
    struct {
      __IOM uint32_t SQ0        : 1;            /*!< [0..0] SQ 0 Interrupt Status                                              */
      __IOM uint32_t SQ1        : 1;            /*!< [1..1] SQ 1 Interrupt Status                                              */
      __IOM uint32_t SQ2        : 1;            /*!< [2..2] SQ 2 Interrupt Status                                              */
      __IOM uint32_t SQ3        : 1;            /*!< [3..3] SQ 3 Interrupt Status                                              */
      __IOM uint32_t WFR0       : 1;            /*!< [4..4] Wait for Read 0 Status                                             */
      __IOM uint32_t WFR1       : 1;            /*!< [5..5] Wait for Read 1 Status                                             */
      __IOM uint32_t WFR2       : 1;            /*!< [6..6] Wait for Read 2 Status                                             */
      __IOM uint32_t WFR3       : 1;            /*!< [7..7] Wait for Read 3 Status                                             */
      __IOM uint32_t COLL0      : 1;            /*!< [8..8] Collision 0 Status                                                 */
      __IOM uint32_t COLL1      : 1;            /*!< [9..9] Collision 1 Status                                                 */
      __IOM uint32_t COLL2      : 1;            /*!< [10..10] Collision 2 Status                                               */
      __IOM uint32_t COLL3      : 1;            /*!< [11..11] Collision 3 Status                                               */
            uint32_t            : 4;
      __IOM uint32_t SQNUM      : 3;            /*!< [18..16] Actual Sequence processed                                        */
            uint32_t            : 13;
    } bit;
  } SQSTAT;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000034) Sequence Status Clear Register                             */
    
    struct {
      __IOM uint32_t SQ0CLR     : 1;            /*!< [0..0] SQ 0 Interrupt Status Clear                                        */
      __IOM uint32_t SQ1CLR     : 1;            /*!< [1..1] SQ 1 Interrupt Status Clear                                        */
      __IOM uint32_t SQ2CLR     : 1;            /*!< [2..2] SQ 2 Interrupt Status Clear                                        */
      __IOM uint32_t SQ3CLR     : 1;            /*!< [3..3] SQ 3 Interrupt Status Clear                                        */
      __IOM uint32_t WFR0CLR    : 1;            /*!< [4..4] Wait for Read 0 Status Clear                                       */
      __IOM uint32_t WFR1CLR    : 1;            /*!< [5..5] Wait for Read 1 Status Clear                                       */
      __IOM uint32_t WFR2CLR    : 1;            /*!< [6..6] Wait for Read 2 Status Clear                                       */
      __IOM uint32_t WFR3CLR    : 1;            /*!< [7..7] Wait for Read 3 Status Clear                                       */
      __IOM uint32_t COLL0CLR   : 1;            /*!< [8..8] Collision 0 Status Clear                                           */
      __IOM uint32_t COLL1CLR   : 1;            /*!< [9..9] Collision 1 Status Clear                                           */
      __IOM uint32_t COLL2CLR   : 1;            /*!< [10..10] Collision 2 Status Clear                                         */
      __IOM uint32_t COLL3CLR   : 1;            /*!< [11..11] Collision 3 Status Clear                                         */
            uint32_t            : 20;
    } bit;
  } SQSTATCLR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000038) Sequence Status Clear Register                             */
    
    struct {
      __IOM uint32_t SQ0SET     : 1;            /*!< [0..0] SQ 0 Interrupt Status Set                                          */
      __IOM uint32_t SQ1SET     : 1;            /*!< [1..1] SQ 1 Interrupt Status Set                                          */
      __IOM uint32_t SQ2SET     : 1;            /*!< [2..2] SQ 2 Interrupt Status Set                                          */
      __IOM uint32_t SQ3SET     : 1;            /*!< [3..3] SQ 3 Interrupt Status Set                                          */
      __IOM uint32_t WFR0SET    : 1;            /*!< [4..4] Wait for Read 0 Status Set                                         */
      __IOM uint32_t WFR1SET    : 1;            /*!< [5..5] Wait for Read 1 Status Set                                         */
      __IOM uint32_t WFR2SET    : 1;            /*!< [6..6] Wait for Read 2 Status Set                                         */
      __IOM uint32_t WFR3SET    : 1;            /*!< [7..7] Wait for Read 3 Status Set                                         */
      __IOM uint32_t COLL0SET   : 1;            /*!< [8..8] Collision 0 Status Set                                             */
      __IOM uint32_t COLL1SET   : 1;            /*!< [9..9] Collision 1 Status Set                                             */
      __IOM uint32_t COLL2SET   : 1;            /*!< [10..10] Collision 2 Status Set                                           */
      __IOM uint32_t COLL3SET   : 1;            /*!< [11..11] Collision 3 Status Set                                           */
            uint32_t            : 20;
    } bit;
  } SQSTATSET;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000003C) Channel Configuration Register                             */
    
    struct {
      __IOM uint32_t INSEL      : 5;            /*!< [4..0] ADC Input Selection                                                */
            uint32_t            : 3;
      __IOM uint32_t CHREP      : 4;            /*!< [11..8] Channel Repetition                                                */
            uint32_t            : 4;
      __IOM uint32_t FILSEL     : 3;            /*!< [18..16] Filter Selection                                                 */
      __IOM uint32_t CMPSEL     : 3;            /*!< [21..19] Compare Selection                                                */
      __IOM uint32_t CLASSEL    : 2;            /*!< [23..22] Conversion Class Selection                                       */
            uint32_t            : 8;
    } bit;
  } CHCFG0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000040) Channel Configuration Register                             */
    
    struct {
      __IOM uint32_t INSEL      : 5;            /*!< [4..0] ADC Input Selection                                                */
            uint32_t            : 3;
      __IOM uint32_t CHREP      : 4;            /*!< [11..8] Channel Repetition                                                */
            uint32_t            : 4;
      __IOM uint32_t FILSEL     : 3;            /*!< [18..16] Filter Selection                                                 */
      __IOM uint32_t CMPSEL     : 3;            /*!< [21..19] Compare Selection                                                */
      __IOM uint32_t CLASSEL    : 2;            /*!< [23..22] Conversion Class Selection                                       */
            uint32_t            : 8;
    } bit;
  } CHCFG1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000044) Channel Configuration Register                             */
    
    struct {
      __IOM uint32_t INSEL      : 5;            /*!< [4..0] ADC Input Selection                                                */
            uint32_t            : 3;
      __IOM uint32_t CHREP      : 4;            /*!< [11..8] Channel Repetition                                                */
            uint32_t            : 4;
      __IOM uint32_t FILSEL     : 3;            /*!< [18..16] Filter Selection                                                 */
      __IOM uint32_t CMPSEL     : 3;            /*!< [21..19] Compare Selection                                                */
      __IOM uint32_t CLASSEL    : 2;            /*!< [23..22] Conversion Class Selection                                       */
            uint32_t            : 8;
    } bit;
  } CHCFG2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000048) Channel Configuration Register                             */
    
    struct {
      __IOM uint32_t INSEL      : 5;            /*!< [4..0] ADC Input Selection                                                */
            uint32_t            : 3;
      __IOM uint32_t CHREP      : 4;            /*!< [11..8] Channel Repetition                                                */
            uint32_t            : 4;
      __IOM uint32_t FILSEL     : 3;            /*!< [18..16] Filter Selection                                                 */
      __IOM uint32_t CMPSEL     : 3;            /*!< [21..19] Compare Selection                                                */
      __IOM uint32_t CLASSEL    : 2;            /*!< [23..22] Conversion Class Selection                                       */
            uint32_t            : 8;
    } bit;
  } CHCFG3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000004C) Channel Configuration Register                             */
    
    struct {
      __IOM uint32_t INSEL      : 5;            /*!< [4..0] ADC Input Selection                                                */
            uint32_t            : 3;
      __IOM uint32_t CHREP      : 4;            /*!< [11..8] Channel Repetition                                                */
            uint32_t            : 4;
      __IOM uint32_t FILSEL     : 3;            /*!< [18..16] Filter Selection                                                 */
      __IOM uint32_t CMPSEL     : 3;            /*!< [21..19] Compare Selection                                                */
      __IOM uint32_t CLASSEL    : 2;            /*!< [23..22] Conversion Class Selection                                       */
            uint32_t            : 8;
    } bit;
  } CHCFG4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000050) Channel Configuration Register                             */
    
    struct {
      __IOM uint32_t INSEL      : 5;            /*!< [4..0] ADC Input Selection                                                */
            uint32_t            : 3;
      __IOM uint32_t CHREP      : 4;            /*!< [11..8] Channel Repetition                                                */
            uint32_t            : 4;
      __IOM uint32_t FILSEL     : 3;            /*!< [18..16] Filter Selection                                                 */
      __IOM uint32_t CMPSEL     : 3;            /*!< [21..19] Compare Selection                                                */
      __IOM uint32_t CLASSEL    : 2;            /*!< [23..22] Conversion Class Selection                                       */
            uint32_t            : 8;
    } bit;
  } CHCFG5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000054) Channel Configuration Register                             */
    
    struct {
      __IOM uint32_t INSEL      : 5;            /*!< [4..0] ADC Input Selection                                                */
            uint32_t            : 3;
      __IOM uint32_t CHREP      : 4;            /*!< [11..8] Channel Repetition                                                */
            uint32_t            : 4;
      __IOM uint32_t FILSEL     : 3;            /*!< [18..16] Filter Selection                                                 */
      __IOM uint32_t CMPSEL     : 3;            /*!< [21..19] Compare Selection                                                */
      __IOM uint32_t CLASSEL    : 2;            /*!< [23..22] Conversion Class Selection                                       */
            uint32_t            : 8;
    } bit;
  } CHCFG6;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000058) Channel Configuration Register                             */
    
    struct {
      __IOM uint32_t INSEL      : 5;            /*!< [4..0] ADC Input Selection                                                */
            uint32_t            : 3;
      __IOM uint32_t CHREP      : 4;            /*!< [11..8] Channel Repetition                                                */
            uint32_t            : 4;
      __IOM uint32_t FILSEL     : 3;            /*!< [18..16] Filter Selection                                                 */
      __IOM uint32_t CMPSEL     : 3;            /*!< [21..19] Compare Selection                                                */
      __IOM uint32_t CLASSEL    : 2;            /*!< [23..22] Conversion Class Selection                                       */
            uint32_t            : 8;
    } bit;
  } CHCFG7;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000005C) Channel Configuration Register                             */
    
    struct {
      __IOM uint32_t INSEL      : 5;            /*!< [4..0] ADC Input Selection                                                */
            uint32_t            : 3;
      __IOM uint32_t CHREP      : 4;            /*!< [11..8] Channel Repetition                                                */
            uint32_t            : 4;
      __IOM uint32_t FILSEL     : 3;            /*!< [18..16] Filter Selection                                                 */
      __IOM uint32_t CMPSEL     : 3;            /*!< [21..19] Compare Selection                                                */
      __IOM uint32_t CLASSEL    : 2;            /*!< [23..22] Conversion Class Selection                                       */
            uint32_t            : 8;
    } bit;
  } CHCFG8;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000060) Channel Configuration Register                             */
    
    struct {
      __IOM uint32_t INSEL      : 5;            /*!< [4..0] ADC Input Selection                                                */
            uint32_t            : 3;
      __IOM uint32_t CHREP      : 4;            /*!< [11..8] Channel Repetition                                                */
            uint32_t            : 4;
      __IOM uint32_t FILSEL     : 3;            /*!< [18..16] Filter Selection                                                 */
      __IOM uint32_t CMPSEL     : 3;            /*!< [21..19] Compare Selection                                                */
      __IOM uint32_t CLASSEL    : 2;            /*!< [23..22] Conversion Class Selection                                       */
            uint32_t            : 8;
    } bit;
  } CHCFG9;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000064) Channel Configuration Register                             */
    
    struct {
      __IOM uint32_t INSEL      : 5;            /*!< [4..0] ADC Input Selection                                                */
            uint32_t            : 3;
      __IOM uint32_t CHREP      : 4;            /*!< [11..8] Channel Repetition                                                */
            uint32_t            : 4;
      __IOM uint32_t FILSEL     : 3;            /*!< [18..16] Filter Selection                                                 */
      __IOM uint32_t CMPSEL     : 3;            /*!< [21..19] Compare Selection                                                */
      __IOM uint32_t CLASSEL    : 2;            /*!< [23..22] Conversion Class Selection                                       */
            uint32_t            : 8;
    } bit;
  } CHCFG10;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000068) Channel Configuration Register                             */
    
    struct {
      __IOM uint32_t INSEL      : 5;            /*!< [4..0] ADC Input Selection                                                */
            uint32_t            : 3;
      __IOM uint32_t CHREP      : 4;            /*!< [11..8] Channel Repetition                                                */
            uint32_t            : 4;
      __IOM uint32_t FILSEL     : 3;            /*!< [18..16] Filter Selection                                                 */
      __IOM uint32_t CMPSEL     : 3;            /*!< [21..19] Compare Selection                                                */
      __IOM uint32_t CLASSEL    : 2;            /*!< [23..22] Conversion Class Selection                                       */
            uint32_t            : 8;
    } bit;
  } CHCFG11;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000006C) Channel Configuration Register                             */
    
    struct {
      __IOM uint32_t INSEL      : 5;            /*!< [4..0] ADC Input Selection                                                */
            uint32_t            : 3;
      __IOM uint32_t CHREP      : 4;            /*!< [11..8] Channel Repetition                                                */
            uint32_t            : 4;
      __IOM uint32_t FILSEL     : 3;            /*!< [18..16] Filter Selection                                                 */
      __IOM uint32_t CMPSEL     : 3;            /*!< [21..19] Compare Selection                                                */
      __IOM uint32_t CLASSEL    : 2;            /*!< [23..22] Conversion Class Selection                                       */
            uint32_t            : 8;
    } bit;
  } CHCFG12;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000070) Channel Configuration Register                             */
    
    struct {
      __IOM uint32_t INSEL      : 5;            /*!< [4..0] ADC Input Selection                                                */
            uint32_t            : 3;
      __IOM uint32_t CHREP      : 4;            /*!< [11..8] Channel Repetition                                                */
            uint32_t            : 4;
      __IOM uint32_t FILSEL     : 3;            /*!< [18..16] Filter Selection                                                 */
      __IOM uint32_t CMPSEL     : 3;            /*!< [21..19] Compare Selection                                                */
      __IOM uint32_t CLASSEL    : 2;            /*!< [23..22] Conversion Class Selection                                       */
            uint32_t            : 8;
    } bit;
  } CHCFG13;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000074) Channel Configuration Register                             */
    
    struct {
      __IOM uint32_t INSEL      : 5;            /*!< [4..0] ADC Input Selection                                                */
            uint32_t            : 3;
      __IOM uint32_t CHREP      : 4;            /*!< [11..8] Channel Repetition                                                */
            uint32_t            : 4;
      __IOM uint32_t FILSEL     : 3;            /*!< [18..16] Filter Selection                                                 */
      __IOM uint32_t CMPSEL     : 3;            /*!< [21..19] Compare Selection                                                */
      __IOM uint32_t CLASSEL    : 2;            /*!< [23..22] Conversion Class Selection                                       */
            uint32_t            : 8;
    } bit;
  } CHCFG14;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000078) Channel Configuration Register                             */
    
    struct {
      __IOM uint32_t INSEL      : 5;            /*!< [4..0] ADC Input Selection                                                */
            uint32_t            : 3;
      __IOM uint32_t CHREP      : 4;            /*!< [11..8] Channel Repetition                                                */
            uint32_t            : 4;
      __IOM uint32_t FILSEL     : 3;            /*!< [18..16] Filter Selection                                                 */
      __IOM uint32_t CMPSEL     : 3;            /*!< [21..19] Compare Selection                                                */
      __IOM uint32_t CLASSEL    : 2;            /*!< [23..22] Conversion Class Selection                                       */
            uint32_t            : 8;
    } bit;
  } CHCFG15;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000007C) Channel Configuration Register                             */
    
    struct {
      __IOM uint32_t INSEL      : 5;            /*!< [4..0] ADC Input Selection                                                */
            uint32_t            : 3;
      __IOM uint32_t CHREP      : 4;            /*!< [11..8] Channel Repetition                                                */
            uint32_t            : 4;
      __IOM uint32_t FILSEL     : 3;            /*!< [18..16] Filter Selection                                                 */
      __IOM uint32_t CMPSEL     : 3;            /*!< [21..19] Compare Selection                                                */
      __IOM uint32_t CLASSEL    : 2;            /*!< [23..22] Conversion Class Selection                                       */
            uint32_t            : 8;
    } bit;
  } CHCFG16;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000080) Channel Configuration Register                             */
    
    struct {
      __IOM uint32_t INSEL      : 5;            /*!< [4..0] ADC Input Selection                                                */
            uint32_t            : 3;
      __IOM uint32_t CHREP      : 4;            /*!< [11..8] Channel Repetition                                                */
            uint32_t            : 4;
      __IOM uint32_t FILSEL     : 3;            /*!< [18..16] Filter Selection                                                 */
      __IOM uint32_t CMPSEL     : 3;            /*!< [21..19] Compare Selection                                                */
      __IOM uint32_t CLASSEL    : 2;            /*!< [23..22] Conversion Class Selection                                       */
            uint32_t            : 8;
    } bit;
  } CHCFG17;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000084) Channel Configuration Register                             */
    
    struct {
      __IOM uint32_t INSEL      : 5;            /*!< [4..0] ADC Input Selection                                                */
            uint32_t            : 3;
      __IOM uint32_t CHREP      : 4;            /*!< [11..8] Channel Repetition                                                */
            uint32_t            : 4;
      __IOM uint32_t FILSEL     : 3;            /*!< [18..16] Filter Selection                                                 */
      __IOM uint32_t CMPSEL     : 3;            /*!< [21..19] Compare Selection                                                */
      __IOM uint32_t CLASSEL    : 2;            /*!< [23..22] Conversion Class Selection                                       */
            uint32_t            : 8;
    } bit;
  } CHCFG18;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000088) Channel Configuration Register                             */
    
    struct {
      __IOM uint32_t INSEL      : 5;            /*!< [4..0] ADC Input Selection                                                */
            uint32_t            : 3;
      __IOM uint32_t CHREP      : 4;            /*!< [11..8] Channel Repetition                                                */
            uint32_t            : 4;
      __IOM uint32_t FILSEL     : 3;            /*!< [18..16] Filter Selection                                                 */
      __IOM uint32_t CMPSEL     : 3;            /*!< [21..19] Compare Selection                                                */
      __IOM uint32_t CLASSEL    : 2;            /*!< [23..22] Conversion Class Selection                                       */
            uint32_t            : 8;
    } bit;
  } CHCFG19;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000008C) Channel Status Register                                    */
    
    struct {
      __IOM uint32_t CH0        : 1;            /*!< [0..0] Channel 0 Status                                                   */
      __IOM uint32_t CH1        : 1;            /*!< [1..1] Channel 1 Status                                                   */
      __IOM uint32_t CH2        : 1;            /*!< [2..2] Channel 2 Status                                                   */
      __IOM uint32_t CH3        : 1;            /*!< [3..3] Channel 3 Status                                                   */
      __IOM uint32_t CH4        : 1;            /*!< [4..4] Channel 4 Status                                                   */
      __IOM uint32_t CH5        : 1;            /*!< [5..5] Channel 5 Status                                                   */
      __IOM uint32_t CH6        : 1;            /*!< [6..6] Channel 6 Status                                                   */
      __IOM uint32_t CH7        : 1;            /*!< [7..7] Channel 7 Status                                                   */
      __IOM uint32_t CH8        : 1;            /*!< [8..8] Channel 8 Status                                                   */
      __IOM uint32_t CH9        : 1;            /*!< [9..9] Channel 9 Status                                                   */
      __IOM uint32_t CH10       : 1;            /*!< [10..10] Channel 10 Status                                                */
      __IOM uint32_t CH11       : 1;            /*!< [11..11] Channel 11 Status                                                */
      __IOM uint32_t CH12       : 1;            /*!< [12..12] Channel 12 Status                                                */
      __IOM uint32_t CH13       : 1;            /*!< [13..13] Channel 13 Status                                                */
      __IOM uint32_t CH14       : 1;            /*!< [14..14] Channel 14 Status                                                */
      __IOM uint32_t CH15       : 1;            /*!< [15..15] Channel 15 Status                                                */
      __IOM uint32_t CH16       : 1;            /*!< [16..16] Channel 16 Status                                                */
      __IOM uint32_t CH17       : 1;            /*!< [17..17] Channel 17 Status                                                */
      __IOM uint32_t CH18       : 1;            /*!< [18..18] Channel 18 Status                                                */
      __IOM uint32_t CH19       : 1;            /*!< [19..19] Channel 19 Status                                                */
            uint32_t            : 4;
      __IOM uint32_t CHNUM      : 5;            /*!< [28..24] Current Channel under conversion                                 */
            uint32_t            : 3;
    } bit;
  } CHSTAT;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000090) Channel Status Register                                    */
    
    struct {
      __OM  uint32_t CH0CLR     : 1;            /*!< [0..0] Channel 0 Status clear flag                                        */
      __OM  uint32_t CH1CLR     : 1;            /*!< [1..1] Channel 1 Status clear flag                                        */
      __OM  uint32_t CH2CLR     : 1;            /*!< [2..2] Channel 2 Status clear flag                                        */
      __OM  uint32_t CH3CLR     : 1;            /*!< [3..3] Channel 3 Status clear flag                                        */
      __OM  uint32_t CH4CLR     : 1;            /*!< [4..4] Channel 4 Status clear flag                                        */
      __OM  uint32_t CH5CLR     : 1;            /*!< [5..5] Channel 5 Status clear flag                                        */
      __OM  uint32_t CH6CLR     : 1;            /*!< [6..6] Channel 6 Status clear flag                                        */
      __OM  uint32_t CH7CLR     : 1;            /*!< [7..7] Channel 7 Status clear flag                                        */
      __OM  uint32_t CH8CLR     : 1;            /*!< [8..8] Channel 8 Status clear flag                                        */
      __OM  uint32_t CH9CLR     : 1;            /*!< [9..9] Channel 9 Status clear flag                                        */
      __OM  uint32_t CH10CLR    : 1;            /*!< [10..10] Channel 10 Status clear flag                                     */
      __OM  uint32_t CH11CLR    : 1;            /*!< [11..11] Channel 11 Status clear flag                                     */
      __OM  uint32_t CH12CLR    : 1;            /*!< [12..12] Channel 12 Status clear flag                                     */
      __OM  uint32_t CH13CLR    : 1;            /*!< [13..13] Channel 13 Status clear flag                                     */
      __OM  uint32_t CH14CLR    : 1;            /*!< [14..14] Channel 14 Status clear flag                                     */
      __OM  uint32_t CH15CLR    : 1;            /*!< [15..15] Channel 15 Status clear flag                                     */
      __OM  uint32_t CH16CLR    : 1;            /*!< [16..16] Channel 16 Status clear flag                                     */
      __OM  uint32_t CH17CLR    : 1;            /*!< [17..17] Channel 17 Status clear flag                                     */
      __OM  uint32_t CH18CLR    : 1;            /*!< [18..18] Channel 18 Status clear flag                                     */
      __OM  uint32_t CH19CLR    : 1;            /*!< [19..19] Channel 19 Status clear flag                                     */
            uint32_t            : 12;
    } bit;
  } CHSTATCLR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000094) Channel Status Set Register                                */
    
    struct {
      __OM  uint32_t CH0SET     : 1;            /*!< [0..0] Channel 0 Status set flag                                          */
      __OM  uint32_t CH1SET     : 1;            /*!< [1..1] Channel 1 Status set flag                                          */
      __OM  uint32_t CH2SET     : 1;            /*!< [2..2] Channel 2 Status set flag                                          */
      __OM  uint32_t CH3SET     : 1;            /*!< [3..3] Channel 3 Status set flag                                          */
      __OM  uint32_t CH4SET     : 1;            /*!< [4..4] Channel 4 Status set flag                                          */
      __OM  uint32_t CH5SET     : 1;            /*!< [5..5] Channel 5 Status set flag                                          */
      __OM  uint32_t CH6SET     : 1;            /*!< [6..6] Channel 6 Status set flag                                          */
      __OM  uint32_t CH7SET     : 1;            /*!< [7..7] Channel 7 Status set flag                                          */
      __OM  uint32_t CH8SET     : 1;            /*!< [8..8] Channel 8 Status set flag                                          */
      __OM  uint32_t CH9SET     : 1;            /*!< [9..9] Channel 9 Status set flag                                          */
      __OM  uint32_t CH10SET    : 1;            /*!< [10..10] Channel 10 Status set flag                                       */
      __OM  uint32_t CH11SET    : 1;            /*!< [11..11] Channel 11 Status set flag                                       */
      __OM  uint32_t CH12SET    : 1;            /*!< [12..12] Channel 12 Status set flag                                       */
      __OM  uint32_t CH13SET    : 1;            /*!< [13..13] Channel 13 Status set flag                                       */
      __OM  uint32_t CH14SET    : 1;            /*!< [14..14] Channel 14 Status set flag                                       */
      __OM  uint32_t CH15SET    : 1;            /*!< [15..15] Channel 15 Status set flag                                       */
      __OM  uint32_t CH16SET    : 1;            /*!< [16..16] Channel 16 Status set flag                                       */
      __OM  uint32_t CH17SET    : 1;            /*!< [17..17] Channel 17 Status set flag                                       */
      __OM  uint32_t CH18SET    : 1;            /*!< [18..18] Channel 18 Status set flag                                       */
      __OM  uint32_t CH19SET    : 1;            /*!< [19..19] Channel 19 Status set flag                                       */
            uint32_t            : 12;
    } bit;
  } CHSTATSET;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000098) Channel Configuration Register                             */
    
    struct {
      __IOM uint32_t TCONF      : 2;            /*!< [1..0] Tracking Conversion config                                         */
      __IOM uint32_t OVERS      : 2;            /*!< [3..2] Oversampling config                                                */
      __IOM uint32_t STC        : 4;            /*!< [7..4] Sample Time config                                                 */
      __IOM uint32_t SESP       : 1;            /*!< [8..8] Spreaded early sample point config                                 */
            uint32_t            : 1;
      __IOM uint32_t MSBD       : 1;            /*!< [10..10] MSB doubling enable                                              */
      __IOM uint32_t PCAL       : 1;            /*!< [11..11] Post Calibration enable                                          */
      __IOM uint32_t BWD        : 2;            /*!< [13..12] BWD timing config                                                */
      __IOM uint32_t BWD_HI_CUR : 1;            /*!< [14..14] BWD current configuration                                        */
            uint32_t            : 17;
    } bit;
  } CONVCFG0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000009C) Channel Configuration Register                             */
    
    struct {
      __IOM uint32_t TCONF      : 2;            /*!< [1..0] Tracking Conversion config                                         */
      __IOM uint32_t OVERS      : 2;            /*!< [3..2] Oversampling config                                                */
      __IOM uint32_t STC        : 4;            /*!< [7..4] Sample Time config                                                 */
      __IOM uint32_t SESP       : 1;            /*!< [8..8] Spreaded early sample point config                                 */
            uint32_t            : 1;
      __IOM uint32_t MSBD       : 1;            /*!< [10..10] MSB doubling enable                                              */
      __IOM uint32_t PCAL       : 1;            /*!< [11..11] Post Calibration enable                                          */
      __IOM uint32_t BWD        : 2;            /*!< [13..12] BWD timing config                                                */
      __IOM uint32_t BWD_HI_CUR : 1;            /*!< [14..14] BWD current configuration                                        */
            uint32_t            : 17;
    } bit;
  } CONVCFG1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000A0) Channel Configuration Register                             */
    
    struct {
      __IOM uint32_t TCONF      : 2;            /*!< [1..0] Tracking Conversion config                                         */
      __IOM uint32_t OVERS      : 2;            /*!< [3..2] Oversampling config                                                */
      __IOM uint32_t STC        : 4;            /*!< [7..4] Sample Time config                                                 */
      __IOM uint32_t SESP       : 1;            /*!< [8..8] Spreaded early sample point config                                 */
            uint32_t            : 1;
      __IOM uint32_t MSBD       : 1;            /*!< [10..10] MSB doubling enable                                              */
      __IOM uint32_t PCAL       : 1;            /*!< [11..11] Post Calibration enable                                          */
      __IOM uint32_t BWD        : 2;            /*!< [13..12] BWD timing config                                                */
      __IOM uint32_t BWD_HI_CUR : 1;            /*!< [14..14] BWD current configuration                                        */
            uint32_t            : 17;
    } bit;
  } CONVCFG2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000A4) Channel Configuration Register                             */
    
    struct {
      __IOM uint32_t TCONF      : 2;            /*!< [1..0] Tracking Conversion config                                         */
      __IOM uint32_t OVERS      : 2;            /*!< [3..2] Oversampling config                                                */
      __IOM uint32_t STC        : 4;            /*!< [7..4] Sample Time config                                                 */
      __IOM uint32_t SESP       : 1;            /*!< [8..8] Spreaded early sample point config                                 */
            uint32_t            : 1;
      __IOM uint32_t MSBD       : 1;            /*!< [10..10] MSB doubling enable                                              */
      __IOM uint32_t PCAL       : 1;            /*!< [11..11] Post Calibration enable                                          */
      __IOM uint32_t BWD        : 2;            /*!< [13..12] BWD timing config                                                */
      __IOM uint32_t BWD_HI_CUR : 1;            /*!< [14..14] BWD current configuration                                        */
            uint32_t            : 17;
    } bit;
  } CONVCFG3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000A8) Calibration Enable                                         */
    
    struct {
      __IOM uint32_t CALEN0     : 1;            /*!< [0..0] Channel 0 Calibration Enable                                       */
      __IOM uint32_t CALEN1     : 1;            /*!< [1..1] Channel 1 Calibration Enable                                       */
      __IOM uint32_t CALEN2     : 1;            /*!< [2..2] Channel 2 Calibration Enable                                       */
      __IOM uint32_t CALEN3     : 1;            /*!< [3..3] Channel 3 Calibration Enable                                       */
      __IOM uint32_t CALEN4     : 1;            /*!< [4..4] Channel 4 Calibration Enable                                       */
      __IOM uint32_t CALEN5     : 1;            /*!< [5..5] Channel 5 Calibration Enable                                       */
      __IOM uint32_t CALEN6     : 1;            /*!< [6..6] Channel 6 Calibration Enable                                       */
      __IOM uint32_t CALEN7     : 1;            /*!< [7..7] Channel 7 Calibration Enable                                       */
      __IOM uint32_t CALEN8     : 1;            /*!< [8..8] Channel 8 Calibration Enable                                       */
      __IOM uint32_t CALEN9     : 1;            /*!< [9..9] Channel 9 Calibration Enable                                       */
      __IOM uint32_t CALEN10    : 1;            /*!< [10..10] Channel 10 Calibration Enable                                    */
      __IOM uint32_t CALEN11    : 1;            /*!< [11..11] Channel 11 Calibration Enable                                    */
      __IOM uint32_t CALEN12    : 1;            /*!< [12..12] Channel 12 Calibration Enable                                    */
      __IOM uint32_t CALEN13    : 1;            /*!< [13..13] Channel 13 Calibration Enable                                    */
      __IOM uint32_t CALEN14    : 1;            /*!< [14..14] Channel 14 Calibration Enable                                    */
      __IOM uint32_t CALEN15    : 1;            /*!< [15..15] Channel 15 Calibration Enable                                    */
      __IOM uint32_t CALEN16    : 1;            /*!< [16..16] Channel 16 Calibration Enable                                    */
      __IOM uint32_t CALEN17    : 1;            /*!< [17..17] Channel 17 Calibration Enable                                    */
      __IOM uint32_t CALEN18    : 1;            /*!< [18..18] Channel 18 Calibration Enable                                    */
      __IOM uint32_t CALEN19    : 1;            /*!< [19..19] Channel 19 Calibration Enable                                    */
      __IOM uint32_t CALEN20    : 1;            /*!< [20..20] Channel 20 Calibration Enable                                    */
      __IOM uint32_t CALEN21    : 1;            /*!< [21..21] Channel 21 Calibration Enable                                    */
      __IOM uint32_t CALEN22    : 1;            /*!< [22..22] Channel 22 Calibration Enable                                    */
      __IOM uint32_t CALEN23    : 1;            /*!< [23..23] Channel 23 Calibration Enable                                    */
      __IOM uint32_t CALEN24    : 1;            /*!< [24..24] Channel 24 Calibration Enable                                    */
      __IOM uint32_t CALEN25    : 1;            /*!< [25..25] Channel 25 Calibration Enable                                    */
      __IOM uint32_t CALEN26    : 1;            /*!< [26..26] Channel 26 Calibration Enable                                    */
            uint32_t            : 5;
    } bit;
  } CALEN;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000AC) Calibration Protection Enable                              */
    
    struct {
      __IOM uint32_t CALPEN0    : 1;            /*!< [0..0] Channel 0 Calibration Protection                                   */
      __IOM uint32_t CALPEN1    : 1;            /*!< [1..1] Channel 1 Calibration Protection                                   */
      __IOM uint32_t CALPEN2    : 1;            /*!< [2..2] Channel 2 Calibration Protection                                   */
      __IOM uint32_t CALPEN3    : 1;            /*!< [3..3] Channel 3 Calibration Protection                                   */
      __IOM uint32_t CALPEN4    : 1;            /*!< [4..4] Channel 4 Calibration Protection                                   */
      __IOM uint32_t CALPEN5    : 1;            /*!< [5..5] Channel 5 Calibration Protection                                   */
      __IOM uint32_t CALPEN6    : 1;            /*!< [6..6] Channel 6 Calibration Protection                                   */
      __IOM uint32_t CALPEN7    : 1;            /*!< [7..7] Channel 7 Calibration Protection                                   */
      __IOM uint32_t CALPEN8    : 1;            /*!< [8..8] Channel 8 Calibration Protection                                   */
      __IOM uint32_t CALPEN9    : 1;            /*!< [9..9] Channel 9 Calibration Protection                                   */
      __IOM uint32_t CALPEN10   : 1;            /*!< [10..10] Channel 10 Calibration Protection                                */
      __IOM uint32_t CALPEN11   : 1;            /*!< [11..11] Channel 11 Calibration Protection                                */
      __IOM uint32_t CALPEN12   : 1;            /*!< [12..12] Channel 12 Calibration Protection                                */
      __IOM uint32_t CALPEN13   : 1;            /*!< [13..13] Channel 13 Calibration Protection                                */
      __IOM uint32_t CALPEN14   : 1;            /*!< [14..14] Channel 14 Calibration Protection                                */
      __IOM uint32_t CALPEN15   : 1;            /*!< [15..15] Channel 15 Calibration Protection                                */
      __IOM uint32_t CALPEN16   : 1;            /*!< [16..16] Channel 16 Calibration Protection                                */
      __IOM uint32_t CALPEN17   : 1;            /*!< [17..17] Channel 17 Calibration Protection                                */
      __IOM uint32_t CALPEN18   : 1;            /*!< [18..18] Channel 18 Calibration Protection                                */
      __IOM uint32_t CALPEN19   : 1;            /*!< [19..19] Channel 19 Calibration Protection                                */
      __IOM uint32_t CALPEN20   : 1;            /*!< [20..20] Channel 20 Calibration Protection                                */
      __IOM uint32_t CALPEN21   : 1;            /*!< [21..21] Channel 21 Calibration Protection                                */
      __IOM uint32_t CALPEN22   : 1;            /*!< [22..22] Channel 22 Calibration Protection                                */
      __IOM uint32_t CALPEN23   : 1;            /*!< [23..23] Channel 23 Calibration Protection                                */
      __IOM uint32_t CALPEN24   : 1;            /*!< [24..24] Channel 24 Calibration Protection                                */
      __IOM uint32_t CALPEN25   : 1;            /*!< [25..25] Channel 25 Calibration Protection                                */
      __IOM uint32_t CALPEN26   : 1;            /*!< [26..26] Channel 26 Calibration Protection                                */
            uint32_t            : 5;
    } bit;
  } CALPEN;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000B0) Filter Configuration                                       */
    
    struct {
      __IOM uint32_t COEF_A0    : 2;            /*!< [1..0] Filter Coefficient                                                 */
            uint32_t            : 2;
      __IOM uint32_t COEF_A1    : 2;            /*!< [5..4] Filter Coefficient                                                 */
            uint32_t            : 2;
      __IOM uint32_t COEF_A2    : 2;            /*!< [9..8] Filter Coefficient                                                 */
            uint32_t            : 2;
      __IOM uint32_t COEF_A3    : 2;            /*!< [13..12] Filter Coefficient                                               */
            uint32_t            : 18;
    } bit;
  } FILTCFG;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x000000B4) Filter Result Register                                     */
    
    struct {
      __IM  uint32_t FILRESULT  : 16;           /*!< [15..0] Filter Result Value                                               */
            uint32_t            : 16;
    } bit;
  } FIL0;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x000000B8) Filter Result Register                                     */
    
    struct {
      __IM  uint32_t FILRESULT  : 16;           /*!< [15..0] Filter Result Value                                               */
            uint32_t            : 16;
    } bit;
  } FIL1;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x000000BC) Filter Result Register                                     */
    
    struct {
      __IM  uint32_t FILRESULT  : 16;           /*!< [15..0] Filter Result Value                                               */
            uint32_t            : 16;
    } bit;
  } FIL2;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x000000C0) Filter Result Register                                     */
    
    struct {
      __IM  uint32_t FILRESULT  : 16;           /*!< [15..0] Filter Result Value                                               */
            uint32_t            : 16;
    } bit;
  } FIL3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000C4) Filter Status Register                                     */
    
    struct {
      __IOM uint32_t FIL0       : 1;            /*!< [0..0] Filter 0 Event flag                                                */
      __IOM uint32_t FIL1       : 1;            /*!< [1..1] Filter 1 Event flag                                                */
      __IOM uint32_t FIL2       : 1;            /*!< [2..2] Filter 2 Event flag                                                */
      __IOM uint32_t FIL3       : 1;            /*!< [3..3] Filter 3 Event flag                                                */
            uint32_t            : 28;
    } bit;
  } FILSTAT;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000C8) Filter Status Clear Register                               */
    
    struct {
      __OM  uint32_t FIL0CLR    : 1;            /*!< [0..0] Filter 0 Event flag clear                                          */
      __OM  uint32_t FIL1CLR    : 1;            /*!< [1..1] Filter 1 Event flag clear                                          */
      __OM  uint32_t FIL2CLR    : 1;            /*!< [2..2] Filter 2 Event flag clear                                          */
      __OM  uint32_t FIL3CLR    : 1;            /*!< [3..3] Filter 3 Event flag clear                                          */
            uint32_t            : 28;
    } bit;
  } FILSTATCLR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000CC) Filter Status Set Register                                 */
    
    struct {
      __OM  uint32_t FIL0SET    : 1;            /*!< [0..0] Filter 0 Event flag set                                            */
      __OM  uint32_t FIL1SET    : 1;            /*!< [1..1] Filter 1 Event flag set                                            */
      __OM  uint32_t FIL2SET    : 1;            /*!< [2..2] Filter 2 Event flag set                                            */
      __OM  uint32_t FIL3SET    : 1;            /*!< [3..3] Filter 3 Event flag set                                            */
            uint32_t            : 28;
    } bit;
  } FILSTATSET;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x000000D0) Result Register                                            */
    
    struct {
      __IM  uint32_t RESULT     : 14;           /*!< [13..0] Result Value                                                      */
            uint32_t            : 1;
      __IM  uint32_t VALID      : 1;            /*!< [15..15] Valid flag                                                       */
            uint32_t            : 16;
    } bit;
  } RES0;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x000000D4) Result Register                                            */
    
    struct {
      __IM  uint32_t RESULT     : 14;           /*!< [13..0] Result Value                                                      */
            uint32_t            : 1;
      __IM  uint32_t VALID      : 1;            /*!< [15..15] Valid flag                                                       */
            uint32_t            : 16;
    } bit;
  } RES1;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x000000D8) Result Register                                            */
    
    struct {
      __IM  uint32_t RESULT     : 14;           /*!< [13..0] Result Value                                                      */
            uint32_t            : 1;
      __IM  uint32_t VALID      : 1;            /*!< [15..15] Valid flag                                                       */
            uint32_t            : 16;
    } bit;
  } RES2;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x000000DC) Result Register                                            */
    
    struct {
      __IM  uint32_t RESULT     : 14;           /*!< [13..0] Result Value                                                      */
            uint32_t            : 1;
      __IM  uint32_t VALID      : 1;            /*!< [15..15] Valid flag                                                       */
            uint32_t            : 16;
    } bit;
  } RES3;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x000000E0) Result Register                                            */
    
    struct {
      __IM  uint32_t RESULT     : 14;           /*!< [13..0] Result Value                                                      */
            uint32_t            : 1;
      __IM  uint32_t VALID      : 1;            /*!< [15..15] Valid flag                                                       */
            uint32_t            : 16;
    } bit;
  } RES4;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x000000E4) Result Register                                            */
    
    struct {
      __IM  uint32_t RESULT     : 14;           /*!< [13..0] Result Value                                                      */
            uint32_t            : 1;
      __IM  uint32_t VALID      : 1;            /*!< [15..15] Valid flag                                                       */
            uint32_t            : 16;
    } bit;
  } RES5;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x000000E8) Result Register                                            */
    
    struct {
      __IM  uint32_t RESULT     : 14;           /*!< [13..0] Result Value                                                      */
            uint32_t            : 1;
      __IM  uint32_t VALID      : 1;            /*!< [15..15] Valid flag                                                       */
            uint32_t            : 16;
    } bit;
  } RES6;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x000000EC) Result Register                                            */
    
    struct {
      __IM  uint32_t RESULT     : 14;           /*!< [13..0] Result Value                                                      */
            uint32_t            : 1;
      __IM  uint32_t VALID      : 1;            /*!< [15..15] Valid flag                                                       */
            uint32_t            : 16;
    } bit;
  } RES7;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x000000F0) Result Register                                            */
    
    struct {
      __IM  uint32_t RESULT     : 14;           /*!< [13..0] Result Value                                                      */
            uint32_t            : 1;
      __IM  uint32_t VALID      : 1;            /*!< [15..15] Valid flag                                                       */
            uint32_t            : 16;
    } bit;
  } RES8;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x000000F4) Result Register                                            */
    
    struct {
      __IM  uint32_t RESULT     : 14;           /*!< [13..0] Result Value                                                      */
            uint32_t            : 1;
      __IM  uint32_t VALID      : 1;            /*!< [15..15] Valid flag                                                       */
            uint32_t            : 16;
    } bit;
  } RES9;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x000000F8) Result Register                                            */
    
    struct {
      __IM  uint32_t RESULT     : 14;           /*!< [13..0] Result Value                                                      */
            uint32_t            : 1;
      __IM  uint32_t VALID      : 1;            /*!< [15..15] Valid flag                                                       */
            uint32_t            : 16;
    } bit;
  } RES10;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x000000FC) Result Register                                            */
    
    struct {
      __IM  uint32_t RESULT     : 14;           /*!< [13..0] Result Value                                                      */
            uint32_t            : 1;
      __IM  uint32_t VALID      : 1;            /*!< [15..15] Valid flag                                                       */
            uint32_t            : 16;
    } bit;
  } RES11;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000100) Result Register                                            */
    
    struct {
      __IM  uint32_t RESULT     : 14;           /*!< [13..0] Result Value                                                      */
            uint32_t            : 1;
      __IM  uint32_t VALID      : 1;            /*!< [15..15] Valid flag                                                       */
            uint32_t            : 16;
    } bit;
  } RES12;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000104) Result Register                                            */
    
    struct {
      __IM  uint32_t RESULT     : 14;           /*!< [13..0] Result Value                                                      */
            uint32_t            : 1;
      __IM  uint32_t VALID      : 1;            /*!< [15..15] Valid flag                                                       */
            uint32_t            : 16;
    } bit;
  } RES13;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000108) Result Register                                            */
    
    struct {
      __IM  uint32_t RESULT     : 14;           /*!< [13..0] Result Value                                                      */
            uint32_t            : 1;
      __IM  uint32_t VALID      : 1;            /*!< [15..15] Valid flag                                                       */
            uint32_t            : 16;
    } bit;
  } RES14;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x0000010C) Result Register                                            */
    
    struct {
      __IM  uint32_t RESULT     : 14;           /*!< [13..0] Result Value                                                      */
            uint32_t            : 1;
      __IM  uint32_t VALID      : 1;            /*!< [15..15] Valid flag                                                       */
            uint32_t            : 16;
    } bit;
  } RES15;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000110) Result Register                                            */
    
    struct {
      __IM  uint32_t RESULT     : 14;           /*!< [13..0] Result Value                                                      */
            uint32_t            : 1;
      __IM  uint32_t VALID      : 1;            /*!< [15..15] Valid flag                                                       */
            uint32_t            : 16;
    } bit;
  } RES16;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000114) Result Register                                            */
    
    struct {
      __IM  uint32_t RESULT     : 14;           /*!< [13..0] Result Value                                                      */
            uint32_t            : 1;
      __IM  uint32_t VALID      : 1;            /*!< [15..15] Valid flag                                                       */
            uint32_t            : 16;
    } bit;
  } RES17;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000118) Result Register                                            */
    
    struct {
      __IM  uint32_t RESULT     : 14;           /*!< [13..0] Result Value                                                      */
            uint32_t            : 1;
      __IM  uint32_t VALID      : 1;            /*!< [15..15] Valid flag                                                       */
            uint32_t            : 16;
    } bit;
  } RES18;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x0000011C) Result Register                                            */
    
    struct {
      __IM  uint32_t RESULT     : 14;           /*!< [13..0] Result Value                                                      */
            uint32_t            : 1;
      __IM  uint32_t VALID      : 1;            /*!< [15..15] Valid flag                                                       */
            uint32_t            : 16;
    } bit;
  } RES19;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000120) Compare Channel 0 Control Register                         */
    
    struct {
      __IOM uint32_t LOWER      : 8;            /*!< [7..0] Lower Compare Value                                                */
      __IOM uint32_t INP_SEL    : 1;            /*!< [8..8] Input selection for the comparator unit                            */
            uint32_t            : 3;
      __IOM uint32_t HYST_LO    : 2;            /*!< [13..12] Hysteresis set for lower compare threshold                       */
            uint32_t            : 2;
      __IOM uint32_t UPPER      : 8;            /*!< [23..16] Upper Compare Value                                              */
      __IOM uint32_t BLANK_TIME : 3;            /*!< [26..24] Blank Time configuration                                         */
      __IOM uint32_t RST_BLANK_TIME : 1;        /*!< [27..27] Restart Blank time                                               */
      __IOM uint32_t HYST_UP    : 2;            /*!< [29..28] Hysteresis setting for upper compare threshold                   */
      __IOM uint32_t MODE       : 2;            /*!< [31..30] Compare Mode                                                     */
    } bit;
  } CMPCFG0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000124) Compare Channel 1 Control Register                         */
    
    struct {
      __IOM uint32_t LOWER      : 8;            /*!< [7..0] Lower Compare Value                                                */
      __IOM uint32_t INP_SEL    : 1;            /*!< [8..8] Input selection for the comparator unit                            */
            uint32_t            : 3;
      __IOM uint32_t HYST_LO    : 2;            /*!< [13..12] Hysteresis set for lower compare threshold                       */
            uint32_t            : 2;
      __IOM uint32_t UPPER      : 8;            /*!< [23..16] Upper Compare Value                                              */
      __IOM uint32_t BLANK_TIME : 3;            /*!< [26..24] Blank Time configuration                                         */
      __IOM uint32_t RST_BLANK_TIME : 1;        /*!< [27..27] Restart Blank time                                               */
      __IOM uint32_t HYST_UP    : 2;            /*!< [29..28] Hysteresis setting for upper compare threshold                   */
      __IOM uint32_t MODE       : 2;            /*!< [31..30] Compare Mode                                                     */
    } bit;
  } CMPCFG1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000128) Compare Channel 2 Control Register                         */
    
    struct {
      __IOM uint32_t LOWER      : 8;            /*!< [7..0] Lower Compare Value                                                */
      __IOM uint32_t INP_SEL    : 1;            /*!< [8..8] Input selection for the comparator unit                            */
            uint32_t            : 3;
      __IOM uint32_t HYST_LO    : 2;            /*!< [13..12] Hysteresis set for lower compare threshold                       */
            uint32_t            : 2;
      __IOM uint32_t UPPER      : 8;            /*!< [23..16] Upper Compare Value                                              */
      __IOM uint32_t BLANK_TIME : 3;            /*!< [26..24] Blank Time configuration                                         */
      __IOM uint32_t RST_BLANK_TIME : 1;        /*!< [27..27] Restart Blank time                                               */
      __IOM uint32_t HYST_UP    : 2;            /*!< [29..28] Hysteresis setting for upper compare threshold                   */
      __IOM uint32_t MODE       : 2;            /*!< [31..30] Compare Mode                                                     */
    } bit;
  } CMPCFG2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000012C) Compare Channel 3 Control Register                         */
    
    struct {
      __IOM uint32_t LOWER      : 8;            /*!< [7..0] Lower Compare Value                                                */
      __IOM uint32_t INP_SEL    : 1;            /*!< [8..8] Input selection for the comparator unit                            */
            uint32_t            : 3;
      __IOM uint32_t HYST_LO    : 2;            /*!< [13..12] Hysteresis set for lower compare threshold                       */
            uint32_t            : 2;
      __IOM uint32_t UPPER      : 8;            /*!< [23..16] Upper Compare Value                                              */
      __IOM uint32_t BLANK_TIME : 3;            /*!< [26..24] Blank Time configuration                                         */
      __IOM uint32_t RST_BLANK_TIME : 1;        /*!< [27..27] Restart Blank time                                               */
      __IOM uint32_t HYST_UP    : 2;            /*!< [29..28] Hysteresis setting for upper compare threshold                   */
      __IOM uint32_t MODE       : 2;            /*!< [31..30] Compare Mode                                                     */
    } bit;
  } CMPCFG3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000130) Compare Status Register                                    */
    
    struct {
      __IOM uint32_t CMP_LO0_STS : 1;           /*!< [0..0] Compare 0 low Status                                               */
      __IOM uint32_t CMP_LO1_STS : 1;           /*!< [1..1] Compare 1 low Status                                               */
      __IOM uint32_t CMP_LO2_STS : 1;           /*!< [2..2] Compare 2 low Status                                               */
      __IOM uint32_t CMP_LO3_STS : 1;           /*!< [3..3] Compare 3 low Status                                               */
      __IOM uint32_t CMP_LO0_IS : 1;            /*!< [4..4] Compare 0 low Interrupt Status                                     */
      __IOM uint32_t CMP_LO1_IS : 1;            /*!< [5..5] Compare 1 low Interrupt Status                                     */
      __IOM uint32_t CMP_LO2_IS : 1;            /*!< [6..6] Compare 2 low Interrupt Status                                     */
      __IOM uint32_t CMP_LO3_IS : 1;            /*!< [7..7] Compare 3 low Interrupt Status                                     */
      __IM  uint32_t CMP_LO     : 4;            /*!< [11..8] Compare low Status                                                */
            uint32_t            : 4;
      __IOM uint32_t CMP_UP0_STS : 1;           /*!< [16..16] Compare 0 up Status                                              */
      __IOM uint32_t CMP_UP1_STS : 1;           /*!< [17..17] Compare 1 up Status                                              */
      __IOM uint32_t CMP_UP2_STS : 1;           /*!< [18..18] Compare 2 up Status                                              */
      __IOM uint32_t CMP_UP3_STS : 1;           /*!< [19..19] Compare 3 up Status                                              */
      __IOM uint32_t CMP_UP0_IS : 1;            /*!< [20..20] Compare 0 up Interrupt Status                                    */
      __IOM uint32_t CMP_UP1_IS : 1;            /*!< [21..21] Compare 1 up Interrupt Status                                    */
      __IOM uint32_t CMP_UP2_IS : 1;            /*!< [22..22] Compare 2 up Interrupt Status                                    */
      __IOM uint32_t CMP_UP3_IS : 1;            /*!< [23..23] Compare 3 up Interrupt Status                                    */
      __IM  uint32_t CMP_UP     : 4;            /*!< [27..24] Compare up Status                                                */
            uint32_t            : 4;
    } bit;
  } CMPSTAT;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000134) Compare Status Clear Register                              */
    
    struct {
      __OM  uint32_t CMP_LO0_STSCLR : 1;        /*!< [0..0] Compare 0 low Status clear                                         */
      __OM  uint32_t CMP_LO1_STSCLR : 1;        /*!< [1..1] Compare 1 low Status clear                                         */
      __OM  uint32_t CMP_LO2_STSCLR : 1;        /*!< [2..2] Compare 2 low Status clear                                         */
      __OM  uint32_t CMP_LO3_STSCLR : 1;        /*!< [3..3] Compare 3 low Status clear                                         */
      __OM  uint32_t CMP_LO0_ISCLR : 1;         /*!< [4..4] Compare 0 low Interrupt clear                                      */
      __OM  uint32_t CMP_LO1_ISCLR : 1;         /*!< [5..5] Compare 1 low Interrupt clear                                      */
      __OM  uint32_t CMP_LO2_ISCLR : 1;         /*!< [6..6] Compare 2 low Interrupt clear                                      */
      __OM  uint32_t CMP_LO3_ISCLR : 1;         /*!< [7..7] Compare 3 low Interrupt clear                                      */
            uint32_t            : 8;
      __OM  uint32_t CMP_UP0_STSCLR : 1;        /*!< [16..16] Compare 0 up Status clear                                        */
      __OM  uint32_t CMP_UP1_STSCLR : 1;        /*!< [17..17] Compare 1 up Status clear                                        */
      __OM  uint32_t CMP_UP2_STSCLR : 1;        /*!< [18..18] Compare 2 up Status clear                                        */
      __OM  uint32_t CMP_UP3_STSCLR : 1;        /*!< [19..19] Compare 3 up Status clear                                        */
      __OM  uint32_t CMP_UP0_ISCLR : 1;         /*!< [20..20] Compare 0 up Interrupt clear                                     */
      __OM  uint32_t CMP_UP1_ISCLR : 1;         /*!< [21..21] Compare 1 up Interrupt clear                                     */
      __OM  uint32_t CMP_UP2_ISCLR : 1;         /*!< [22..22] Compare 2 up Interrupt clear                                     */
      __OM  uint32_t CMP_UP3_ISCLR : 1;         /*!< [23..23] Compare 3 up Interrupt clear                                     */
            uint32_t            : 8;
    } bit;
  } CMPSTATCLR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000138) Compare Status Set Register                                */
    
    struct {
      __OM  uint32_t CMP_LO0_STSSET : 1;        /*!< [0..0] Compare 0 low Status set                                           */
      __OM  uint32_t CMP_LO1_STSSET : 1;        /*!< [1..1] Compare 1 low Status set                                           */
      __OM  uint32_t CMP_LO2_STSSET : 1;        /*!< [2..2] Compare 2 low Status set                                           */
      __OM  uint32_t CMP_LO3_STSSET : 1;        /*!< [3..3] Compare 3 low Status set                                           */
      __OM  uint32_t CMP_LO0_ISSET : 1;         /*!< [4..4] Compare 0 low Interupt set                                         */
      __OM  uint32_t CMP_LO1_ISSET : 1;         /*!< [5..5] Compare 1 low Interupt set                                         */
      __OM  uint32_t CMP_LO2_ISSET : 1;         /*!< [6..6] Compare 2 low Interupt set                                         */
      __OM  uint32_t CMP_LO3_ISSET : 1;         /*!< [7..7] Compare 3 low Interupt set                                         */
            uint32_t            : 8;
      __OM  uint32_t CMP_UP0_STSSET : 1;        /*!< [16..16] Compare 0 up Status set                                          */
      __OM  uint32_t CMP_UP1_STSSET : 1;        /*!< [17..17] Compare 1 up Status set                                          */
      __OM  uint32_t CMP_UP2_STSSET : 1;        /*!< [18..18] Compare 2 up Status set                                          */
      __OM  uint32_t CMP_UP3_STSSET : 1;        /*!< [19..19] Compare 3 up Status set                                          */
      __OM  uint32_t CMP_UP0_ISSET : 1;         /*!< [20..20] Compare 0 up Interrupt set                                       */
      __OM  uint32_t CMP_UP1_ISSET : 1;         /*!< [21..21] Compare 1 up Interrupt set                                       */
      __OM  uint32_t CMP_UP2_ISSET : 1;         /*!< [22..22] Compare 2 up Interrupt set                                       */
      __OM  uint32_t CMP_UP3_ISSET : 1;         /*!< [23..23] Compare 3 up Interrupt set                                       */
            uint32_t            : 8;
    } bit;
  } CMPSTATSET;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000013C) Interrupt Enable Register 0                                */
    
    struct {
      __IOM uint32_t IEN_CH0    : 1;            /*!< [0..0] Channel 0 Interrupt Enable                                         */
      __IOM uint32_t IEN_CH1    : 1;            /*!< [1..1] Channel 1 Interrupt Enable                                         */
      __IOM uint32_t IEN_CH2    : 1;            /*!< [2..2] Channel 2 Interrupt Enable                                         */
      __IOM uint32_t IEN_CH3    : 1;            /*!< [3..3] Channel 3 Interrupt Enable                                         */
      __IOM uint32_t IEN_CH4    : 1;            /*!< [4..4] Channel 4 Interrupt Enable                                         */
      __IOM uint32_t IEN_CH5    : 1;            /*!< [5..5] Channel 5 Interrupt Enable                                         */
      __IOM uint32_t IEN_CH6    : 1;            /*!< [6..6] Channel 6 Interrupt Enable                                         */
      __IOM uint32_t IEN_CH7    : 1;            /*!< [7..7] Channel 7 Interrupt Enable                                         */
      __IOM uint32_t IEN_CH8    : 1;            /*!< [8..8] Channel 8 Interrupt Enable                                         */
      __IOM uint32_t IEN_CH9    : 1;            /*!< [9..9] Channel 9 Interrupt Enable                                         */
      __IOM uint32_t IEN_CH10   : 1;            /*!< [10..10] Channel 10 Interrupt Enable                                      */
      __IOM uint32_t IEN_CH11   : 1;            /*!< [11..11] Channel 11 Interrupt Enable                                      */
      __IOM uint32_t IEN_CH12   : 1;            /*!< [12..12] Channel 12 Interrupt Enable                                      */
      __IOM uint32_t IEN_CH13   : 1;            /*!< [13..13] Channel 13 Interrupt Enable                                      */
      __IOM uint32_t IEN_CH14   : 1;            /*!< [14..14] Channel 14 Interrupt Enable                                      */
      __IOM uint32_t IEN_CH15   : 1;            /*!< [15..15] Channel 15 Interrupt Enable                                      */
      __IOM uint32_t IEN_CH16   : 1;            /*!< [16..16] Channel 16 Interrupt Enable                                      */
      __IOM uint32_t IEN_CH17   : 1;            /*!< [17..17] Channel 17 Interrupt Enable                                      */
      __IOM uint32_t IEN_CH18   : 1;            /*!< [18..18] Channel 18 Interrupt Enable                                      */
      __IOM uint32_t IEN_CH19   : 1;            /*!< [19..19] Channel 19 Interrupt Enable                                      */
      __IOM uint32_t IEN_SQ0    : 1;            /*!< [20..20] Sequence 0 Interrupt Enable                                      */
      __IOM uint32_t IEN_SQ1    : 1;            /*!< [21..21] Sequence 1 Interrupt Enable                                      */
      __IOM uint32_t IEN_SQ2    : 1;            /*!< [22..22] Sequence 2 Interrupt Enable                                      */
      __IOM uint32_t IEN_SQ3    : 1;            /*!< [23..23] Sequence 3 Interrupt Enable                                      */
      __IOM uint32_t IEN_LO0    : 1;            /*!< [24..24] Compare 0 LO Interrupt Enable                                    */
      __IOM uint32_t IEN_LO1    : 1;            /*!< [25..25] Compare 1 LO Interrupt Enable                                    */
      __IOM uint32_t IEN_LO2    : 1;            /*!< [26..26] Compare 2 LO Interrupt Enable                                    */
      __IOM uint32_t IEN_LO3    : 1;            /*!< [27..27] Compare 3 LO Interrupt Enable                                    */
      __IOM uint32_t IEN_UP0    : 1;            /*!< [28..28] Compare 0 UP Interrupt Enable                                    */
      __IOM uint32_t IEN_UP1    : 1;            /*!< [29..29] Compare 1 UP Interrupt Enable                                    */
      __IOM uint32_t IEN_UP2    : 1;            /*!< [30..30] Compare 2 UP Interrupt Enable                                    */
      __IOM uint32_t IEN_UP3    : 1;            /*!< [31..31] Compare 3 UP Interrupt Enable                                    */
    } bit;
  } IEN0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000140) Interrupt Enable Register 1                                */
    
    struct {
      __IOM uint32_t IEN_COLL0  : 1;            /*!< [0..0] Collision 0 Interrupt Enable                                       */
      __IOM uint32_t IEN_COLL1  : 1;            /*!< [1..1] Collision 1 Interrupt Enable                                       */
      __IOM uint32_t IEN_COLL2  : 1;            /*!< [2..2] Collision 2 Interrupt Enable                                       */
      __IOM uint32_t IEN_COLL3  : 1;            /*!< [3..3] Collision 3 Interrupt Enable                                       */
      __IOM uint32_t IEN_WFR0   : 1;            /*!< [4..4] WFR 0 Interrupt Enable                                             */
      __IOM uint32_t IEN_WFR1   : 1;            /*!< [5..5] WFR 1 Interrupt Enable                                             */
      __IOM uint32_t IEN_WFR2   : 1;            /*!< [6..6] WFR 2 Interrupt Enable                                             */
      __IOM uint32_t IEN_WFR3   : 1;            /*!< [7..7] WFR 3 Interrupt Enable                                             */
            uint32_t            : 24;
    } bit;
  } IEN1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000144) Interrupt Node Pointer Register 0                          */
    
    struct {
      __IOM uint32_t INP_CH0    : 2;            /*!< [1..0] Channel Interrupt Node Pointer                                     */
      __IOM uint32_t INP_CH1    : 2;            /*!< [3..2] Channel Interrupt Node Pointer                                     */
      __IOM uint32_t INP_CH2    : 2;            /*!< [5..4] Channel Interrupt Node Pointer                                     */
      __IOM uint32_t INP_CH3    : 2;            /*!< [7..6] Channel Interrupt Node Pointer                                     */
      __IOM uint32_t INP_CH4    : 2;            /*!< [9..8] Channel Interrupt Node Pointer                                     */
      __IOM uint32_t INP_CH5    : 2;            /*!< [11..10] Channel Interrupt Node Pointer                                   */
      __IOM uint32_t INP_CH6    : 2;            /*!< [13..12] Channel Interrupt Node Pointer                                   */
      __IOM uint32_t INP_CH7    : 2;            /*!< [15..14] Channel Interrupt Node Pointer                                   */
      __IOM uint32_t INP_CH8    : 2;            /*!< [17..16] Channel Interrupt Node Pointer                                   */
      __IOM uint32_t INP_CH9    : 2;            /*!< [19..18] Channel Interrupt Node Pointer                                   */
      __IOM uint32_t INP_CH10   : 2;            /*!< [21..20] Channel Interrupt Node Pointer                                   */
      __IOM uint32_t INP_CH11   : 2;            /*!< [23..22] Channel Interrupt Node Pointer                                   */
      __IOM uint32_t INP_CH12   : 2;            /*!< [25..24] Channel Interrupt Node Pointer                                   */
      __IOM uint32_t INP_CH13   : 2;            /*!< [27..26] Channel Interrupt Node Pointer                                   */
      __IOM uint32_t INP_CH14   : 2;            /*!< [29..28] Channel Interrupt Node Pointer                                   */
      __IOM uint32_t INP_CH15   : 2;            /*!< [31..30] Channel Interrupt Node Pointer                                   */
    } bit;
  } INP0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000148) Interrupt Node Pointer Register 1                          */
    
    struct {
      __IOM uint32_t INP_CH16   : 2;            /*!< [1..0] Channel Interrupt Node Pointer                                     */
      __IOM uint32_t INP_CH17   : 2;            /*!< [3..2] Channel Interrupt Node Pointer                                     */
      __IOM uint32_t INP_CH18   : 2;            /*!< [5..4] Channel Interrupt Node Pointer                                     */
      __IOM uint32_t INP_CH19   : 2;            /*!< [7..6] Channel Interrupt Node Pointer                                     */
            uint32_t            : 24;
    } bit;
  } INP1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000014C) Interrupt Node Pointer Register 2                          */
    
    struct {
      __IOM uint32_t INP_CMP_LO0 : 2;           /*!< [1..0] Compare Lo Interrupt Node Pointer                                  */
      __IOM uint32_t INP_CMP_LO1 : 2;           /*!< [3..2] Compare Lo Interrupt Node Pointer                                  */
      __IOM uint32_t INP_CMP_LO2 : 2;           /*!< [5..4] Compare Lo Interrupt Node Pointer                                  */
      __IOM uint32_t INP_CMP_LO3 : 2;           /*!< [7..6] Compare Lo Interrupt Node Pointer                                  */
      __IOM uint32_t INP_CMP_UP0 : 2;           /*!< [9..8] Compare Up Interrupt Node Pointer                                  */
      __IOM uint32_t INP_CMP_UP1 : 2;           /*!< [11..10] Compare Up Interrupt Node Pointer                                */
      __IOM uint32_t INP_CMP_UP2 : 2;           /*!< [13..12] Compare Up Interrupt Node Pointer                                */
      __IOM uint32_t INP_CMP_UP3 : 2;           /*!< [15..14] Compare Up Interrupt Node Pointer                                */
            uint32_t            : 16;
    } bit;
  } INP2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000150) Interrupt Node Pointer Register 3                          */
    
    struct {
      __IOM uint32_t INP_SQ0    : 2;            /*!< [1..0] Sequence Interrupt Node Pointer                                    */
      __IOM uint32_t INP_SQ1    : 2;            /*!< [3..2] Sequence Interrupt Node Pointer                                    */
      __IOM uint32_t INP_SQ2    : 2;            /*!< [5..4] Sequence Interrupt Node Pointer                                    */
      __IOM uint32_t INP_SQ3    : 2;            /*!< [7..6] Sequence Interrupt Node Pointer                                    */
      __IOM uint32_t INP_COLL0  : 2;            /*!< [9..8] Collision Interrupt Node Pointer                                   */
      __IOM uint32_t INP_COLL1  : 2;            /*!< [11..10] Collision Interrupt Node Pointer                                 */
      __IOM uint32_t INP_COLL2  : 2;            /*!< [13..12] Collision Interrupt Node Pointer                                 */
      __IOM uint32_t INP_COLL3  : 2;            /*!< [15..14] Collision Interrupt Node Pointer                                 */
      __IOM uint32_t INP_WFR0   : 2;            /*!< [17..16] Wait for read Interrupt Node Pointer                             */
      __IOM uint32_t INP_WFR1   : 2;            /*!< [19..18] Wait for read Interrupt Node Pointer                             */
      __IOM uint32_t INP_WFR2   : 2;            /*!< [21..20] Wait for read Interrupt Node Pointer                             */
      __IOM uint32_t INP_WFR3   : 2;            /*!< [23..22] Wait for read Interrupt Node Pointer                             */
            uint32_t            : 8;
    } bit;
  } INP3;
  __IM  uint32_t  RESERVED[4];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000164) Shadow Transfer Control Register                           */
    
    struct {
      __IOM uint32_t ST_SQSEL   : 3;            /*!< [2..0] Sequence Shadow Transfer Selection                                 */
            uint32_t            : 1;
      __IOM uint32_t ST_TRGSEL  : 3;            /*!< [6..4] Trigger Shadow Transfer Selection                                  */
            uint32_t            : 1;
      __IOM uint32_t ST_GTGSEL  : 3;            /*!< [10..8] Gating Shadow Transfer Selection                                  */
            uint32_t            : 1;
      __IOM uint32_t STE_SQSEL  : 1;            /*!< [12..12] Sequence Shadow Transfer Enable Selection                        */
      __IOM uint32_t STE_TRGSEL : 1;            /*!< [13..13] Trigger Shadow Transfer Enable Selection                         */
      __IOM uint32_t STE_GTGSEL : 1;            /*!< [14..14] Gating Shadow Transfer Enable Selection                          */
            uint32_t            : 1;
      __OM  uint32_t ST_SQSW    : 1;            /*!< [16..16] Sequence Software Shadow Transfer                                */
      __OM  uint32_t ST_TRGSW   : 1;            /*!< [17..17] Trigger Software Shadow Transfer                                 */
      __OM  uint32_t ST_GTGSW   : 1;            /*!< [18..18] Gating Software Shadow Transfer                                  */
            uint32_t            : 1;
      __IOM uint32_t STE_SQ     : 1;            /*!< [20..20] Sequence Shadow Transfer Enable                                  */
      __IOM uint32_t STE_TRG    : 1;            /*!< [21..21] Trigger Shadow Transfer Enable                                   */
      __IOM uint32_t STE_GTG    : 1;            /*!< [22..22] Gating Shadow Transfer Enable                                    */
            uint32_t            : 9;
    } bit;
  } SHDCTR;
  __IM  uint32_t  RESERVED1[4];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000178) Calibration Setting for Analog Input 1                     */
    
    struct {
      __IOM uint32_t CALOFFS    : 6;            /*!< [5..0] Calibration Offset                                                 */
            uint32_t            : 10;
      __IOM uint32_t CALGAIN    : 10;           /*!< [25..16] Calibration Gain                                                 */
            uint32_t            : 6;
    } bit;
  } CALAI1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000017C) Calibration Setting for Analog Input 3                     */
    
    struct {
      __IOM uint32_t CALOFFS    : 6;            /*!< [5..0] Calibration Offset                                                 */
            uint32_t            : 10;
      __IOM uint32_t CALGAIN    : 10;           /*!< [25..16] Calibration Gain                                                 */
            uint32_t            : 6;
    } bit;
  } CALAI3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000180) Calibration Setting for Analog Input 5                     */
    
    struct {
      __IOM uint32_t CALOFFS    : 6;            /*!< [5..0] Calibration Offset                                                 */
            uint32_t            : 10;
      __IOM uint32_t CALGAIN    : 10;           /*!< [25..16] Calibration Gain                                                 */
            uint32_t            : 6;
    } bit;
  } CALAI5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000184) Calibration Setting for Analog Input 7                     */
    
    struct {
      __IOM uint32_t CALOFFS    : 6;            /*!< [5..0] Calibration Offset                                                 */
            uint32_t            : 10;
      __IOM uint32_t CALGAIN    : 10;           /*!< [25..16] Calibration Gain                                                 */
            uint32_t            : 6;
    } bit;
  } CALAI7;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000188) Calibration Setting for Analog Input 9                     */
    
    struct {
      __IOM uint32_t CALOFFS    : 6;            /*!< [5..0] Calibration Offset                                                 */
            uint32_t            : 10;
      __IOM uint32_t CALGAIN    : 10;           /*!< [25..16] Calibration Gain                                                 */
            uint32_t            : 6;
    } bit;
  } CALAI9;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000018C) Calibration Setting for Analog Input 11                    */
    
    struct {
      __IOM uint32_t CALOFFS    : 6;            /*!< [5..0] Calibration Offset                                                 */
            uint32_t            : 10;
      __IOM uint32_t CALGAIN    : 10;           /*!< [25..16] Calibration Gain                                                 */
            uint32_t            : 6;
    } bit;
  } CALAI11;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000190) Calibration Setting for Analog Input 13                    */
    
    struct {
      __IOM uint32_t CALOFFS    : 6;            /*!< [5..0] Calibration Offset                                                 */
            uint32_t            : 10;
      __IOM uint32_t CALGAIN    : 10;           /*!< [25..16] Calibration Gain                                                 */
            uint32_t            : 6;
    } bit;
  } CALAI13;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000194) Calibration Setting for Analog Input 15                    */
    
    struct {
      __IOM uint32_t CALOFFS    : 6;            /*!< [5..0] Calibration Offset                                                 */
            uint32_t            : 10;
      __IOM uint32_t CALGAIN    : 10;           /*!< [25..16] Calibration Gain                                                 */
            uint32_t            : 6;
    } bit;
  } CALAI15;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000198) Calibration Setting for Analog Input 16                    */
    
    struct {
      __IOM uint32_t CALOFFS    : 6;            /*!< [5..0] Calibration Offset                                                 */
            uint32_t            : 10;
      __IOM uint32_t CALGAIN    : 10;           /*!< [25..16] Calibration Gain                                                 */
            uint32_t            : 6;
    } bit;
  } CALAI16;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000019C) Calibration Setting for Analog Input 17                    */
    
    struct {
      __IOM uint32_t CALOFFS    : 6;            /*!< [5..0] Calibration Offset                                                 */
            uint32_t            : 10;
      __IOM uint32_t CALGAIN    : 10;           /*!< [25..16] Calibration Gain                                                 */
            uint32_t            : 6;
    } bit;
  } CALAI17;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000001A0) Calibration Setting for Analog Input 18                    */
    
    struct {
      __IOM uint32_t CALOFFS    : 6;            /*!< [5..0] Calibration Offset                                                 */
            uint32_t            : 10;
      __IOM uint32_t CALGAIN    : 10;           /*!< [25..16] Calibration Gain                                                 */
            uint32_t            : 6;
    } bit;
  } CALAI18;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000001A4) Calibration Setting for Analog Input 19                    */
    
    struct {
      __IOM uint32_t CALOFFS    : 6;            /*!< [5..0] Calibration Offset                                                 */
            uint32_t            : 10;
      __IOM uint32_t CALGAIN    : 10;           /*!< [25..16] Calibration Gain                                                 */
            uint32_t            : 6;
    } bit;
  } CALAI19;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000001A8) Calibration Setting for Analog Input 20                    */
    
    struct {
      __IOM uint32_t CALOFFS    : 6;            /*!< [5..0] Calibration Offset                                                 */
            uint32_t            : 10;
      __IOM uint32_t CALGAIN    : 10;           /*!< [25..16] Calibration Gain                                                 */
            uint32_t            : 6;
    } bit;
  } CALAI20;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000001AC) Calibration Setting for Analog Input 21                    */
    
    struct {
      __IOM uint32_t CALOFFS    : 6;            /*!< [5..0] Calibration Offset                                                 */
            uint32_t            : 10;
      __IOM uint32_t CALGAIN    : 10;           /*!< [25..16] Calibration Gain                                                 */
            uint32_t            : 6;
    } bit;
  } CALAI21;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000001B0) Calibration Setting for Analog Input 22                    */
    
    struct {
      __IOM uint32_t CALOFFS    : 6;            /*!< [5..0] Calibration Offset                                                 */
            uint32_t            : 10;
      __IOM uint32_t CALGAIN    : 10;           /*!< [25..16] Calibration Gain                                                 */
            uint32_t            : 6;
    } bit;
  } CALAI22;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000001B4) Calibration Setting for Analog Input 23                    */
    
    struct {
      __IOM uint32_t CALOFFS    : 6;            /*!< [5..0] Calibration Offset                                                 */
            uint32_t            : 10;
      __IOM uint32_t CALGAIN    : 10;           /*!< [25..16] Calibration Gain                                                 */
            uint32_t            : 6;
    } bit;
  } CALAI23;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000001B8) Calibration Setting for Analog Input 24                    */
    
    struct {
      __IOM uint32_t CALOFFS    : 6;            /*!< [5..0] Calibration Offset                                                 */
            uint32_t            : 10;
      __IOM uint32_t CALGAIN    : 10;           /*!< [25..16] Calibration Gain                                                 */
            uint32_t            : 6;
    } bit;
  } CALAI24;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000001BC) Calibration Setting for Analog Input 25                    */
    
    struct {
      __IOM uint32_t CALOFFS    : 6;            /*!< [5..0] Calibration Offset                                                 */
            uint32_t            : 10;
      __IOM uint32_t CALGAIN    : 10;           /*!< [25..16] Calibration Gain                                                 */
            uint32_t            : 6;
    } bit;
  } CALAI25;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000001C0) Calibration Setting for Analog Input 26                    */
    
    struct {
      __IOM uint32_t CALOFFS    : 6;            /*!< [5..0] Calibration Offset                                                 */
            uint32_t            : 10;
      __IOM uint32_t CALGAIN    : 10;           /*!< [25..16] Calibration Gain                                                 */
            uint32_t            : 6;
    } bit;
  } CALAI26;
} ADC1_Type;                                    /*!< Size = 452 (0x1c4)                                                        */



/* =========================================================================================================================== */
/* ================                                           ADC2                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief ADC2 (ADC2)
  */

typedef struct {                                /*!< (@ 0x4804C000) ADC2 Structure                                             */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Global Configuration Register                              */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Module Enable                                                      */
            uint32_t            : 1;
      __IOM uint32_t ISTE       : 1;            /*!< [2..2] Idle shadow transfer enable                                        */
            uint32_t            : 29;
    } bit;
  } GLOBCONF;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000004) Clock Control Register                                     */
    
    struct {
      __IOM uint32_t CLKDIV     : 4;            /*!< [3..0] Clock Divider Settings                                             */
            uint32_t            : 28;
    } bit;
  } CLKCON;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000008) Suspend Control Register                                   */
    
    struct {
      __IOM uint32_t SUSEN      : 1;            /*!< [0..0] ADC1 Suspend Enable                                                */
      __IOM uint32_t SUSMOD     : 1;            /*!< [1..1] Suspend Mode                                                       */
            uint32_t            : 30;
    } bit;
  } SUSCTR;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x0000000C) Suspend Status Register                                    */
    
    struct {
      __IM  uint32_t STAT       : 1;            /*!< [0..0] Suspend Mode Status                                                */
            uint32_t            : 31;
    } bit;
  } SUSSTAT;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) Sequence Status Register                                   */
    
    struct {
      __IOM uint32_t SQ0        : 1;            /*!< [0..0] SQ 0 Interrupt Status                                              */
      __IOM uint32_t SQ1        : 1;            /*!< [1..1] SQ 1 Interrupt Status                                              */
      __IOM uint32_t SQ2        : 1;            /*!< [2..2] SQ 2 Interrupt Status                                              */
      __IOM uint32_t SQ3        : 1;            /*!< [3..3] SQ 3 Interrupt Status                                              */
            uint32_t            : 4;
      __IOM uint32_t COLL0      : 1;            /*!< [8..8] Collision 0 Status                                                 */
      __IOM uint32_t COLL1      : 1;            /*!< [9..9] Collision 1 Status                                                 */
      __IOM uint32_t COLL2      : 1;            /*!< [10..10] Collision 2 Status                                               */
      __IOM uint32_t COLL3      : 1;            /*!< [11..11] Collision 3 Status                                               */
            uint32_t            : 4;
      __IOM uint32_t SQNUM      : 3;            /*!< [18..16] Actual Sequence processed                                        */
            uint32_t            : 13;
    } bit;
  } SQSTAT;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000014) Sequence Status Clear Register                             */
    
    struct {
      __IOM uint32_t SQ0CLR     : 1;            /*!< [0..0] SQ 0 Interrupt Status Clear                                        */
      __IOM uint32_t SQ1CLR     : 1;            /*!< [1..1] SQ 1 Interrupt Status Clear                                        */
      __IOM uint32_t SQ2CLR     : 1;            /*!< [2..2] SQ 2 Interrupt Status Clear                                        */
      __IOM uint32_t SQ3CLR     : 1;            /*!< [3..3] SQ 3 Interrupt Status Clear                                        */
            uint32_t            : 4;
      __IOM uint32_t COLL0CLR   : 1;            /*!< [8..8] Collision 0 Status Clear                                           */
      __IOM uint32_t COLL1CLR   : 1;            /*!< [9..9] Collision 1 Status Clear                                           */
      __IOM uint32_t COLL2CLR   : 1;            /*!< [10..10] Collision 2 Status Clear                                         */
      __IOM uint32_t COLL3CLR   : 1;            /*!< [11..11] Collision 3 Status Clear                                         */
            uint32_t            : 20;
    } bit;
  } SQSTATCLR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000018) Sequence Status Clear Register                             */
    
    struct {
      __IOM uint32_t SQ0SET     : 1;            /*!< [0..0] SQ 0 Interrupt Status Set                                          */
      __IOM uint32_t SQ1SET     : 1;            /*!< [1..1] SQ 1 Interrupt Status Set                                          */
      __IOM uint32_t SQ2SET     : 1;            /*!< [2..2] SQ 2 Interrupt Status Set                                          */
      __IOM uint32_t SQ3SET     : 1;            /*!< [3..3] SQ 3 Interrupt Status Set                                          */
            uint32_t            : 4;
      __IOM uint32_t COLL0SET   : 1;            /*!< [8..8] Collision 0 Status Set                                             */
      __IOM uint32_t COLL1SET   : 1;            /*!< [9..9] Collision 1 Status Set                                             */
      __IOM uint32_t COLL2SET   : 1;            /*!< [10..10] Collision 2 Status Set                                           */
      __IOM uint32_t COLL3SET   : 1;            /*!< [11..11] Collision 3 Status Set                                           */
            uint32_t            : 20;
    } bit;
  } SQSTATSET;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000001C) Channel Status Register                                    */
    
    struct {
      __IOM uint32_t CH0        : 1;            /*!< [0..0] Channel 0 Status                                                   */
      __IOM uint32_t CH1        : 1;            /*!< [1..1] Channel 1 Status                                                   */
      __IOM uint32_t CH2        : 1;            /*!< [2..2] Channel 2 Status                                                   */
      __IOM uint32_t CH3        : 1;            /*!< [3..3] Channel 3 Status                                                   */
      __IOM uint32_t CH4        : 1;            /*!< [4..4] Channel 4 Status                                                   */
      __IOM uint32_t CH5        : 1;            /*!< [5..5] Channel 5 Status                                                   */
      __IOM uint32_t CH6        : 1;            /*!< [6..6] Channel 6 Status                                                   */
      __IOM uint32_t CH7        : 1;            /*!< [7..7] Channel 7 Status                                                   */
      __IOM uint32_t CH8        : 1;            /*!< [8..8] Channel 8 Status                                                   */
      __IOM uint32_t CH9        : 1;            /*!< [9..9] Channel 9 Status                                                   */
      __IOM uint32_t CH10       : 1;            /*!< [10..10] Channel 10 Status                                                */
      __IOM uint32_t CH11       : 1;            /*!< [11..11] Channel 11 Status                                                */
      __IOM uint32_t CH12       : 1;            /*!< [12..12] Channel 12 Status                                                */
      __IOM uint32_t CH13       : 1;            /*!< [13..13] Channel 13 Status                                                */
      __IOM uint32_t CH14       : 1;            /*!< [14..14] Channel 14 Status                                                */
            uint32_t            : 9;
      __IOM uint32_t CHNUM      : 4;            /*!< [27..24] Current Channel under conversion                                 */
            uint32_t            : 4;
    } bit;
  } CHSTAT;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000020) Channel Status Register                                    */
    
    struct {
      __OM  uint32_t CH0CLR     : 1;            /*!< [0..0] Channel 0 Status clear flag                                        */
      __OM  uint32_t CH1CLR     : 1;            /*!< [1..1] Channel 1 Status clear flag                                        */
      __OM  uint32_t CH2CLR     : 1;            /*!< [2..2] Channel 2 Status clear flag                                        */
      __OM  uint32_t CH3CLR     : 1;            /*!< [3..3] Channel 3 Status clear flag                                        */
      __OM  uint32_t CH4CLR     : 1;            /*!< [4..4] Channel 4 Status clear flag                                        */
      __OM  uint32_t CH5CLR     : 1;            /*!< [5..5] Channel 5 Status clear flag                                        */
      __OM  uint32_t CH6CLR     : 1;            /*!< [6..6] Channel 6 Status clear flag                                        */
      __OM  uint32_t CH7CLR     : 1;            /*!< [7..7] Channel 7 Status clear flag                                        */
      __OM  uint32_t CH8CLR     : 1;            /*!< [8..8] Channel 8 Status clear flag                                        */
      __OM  uint32_t CH9CLR     : 1;            /*!< [9..9] Channel 9 Status clear flag                                        */
      __OM  uint32_t CH10CLR    : 1;            /*!< [10..10] Channel 10 Status clear flag                                     */
      __OM  uint32_t CH11CLR    : 1;            /*!< [11..11] Channel 11 Status clear flag                                     */
      __OM  uint32_t CH12CLR    : 1;            /*!< [12..12] Channel 12 Status clear flag                                     */
      __OM  uint32_t CH13CLR    : 1;            /*!< [13..13] Channel 13 Status clear flag                                     */
      __OM  uint32_t CH14CLR    : 1;            /*!< [14..14] Channel 14 Status clear flag                                     */
            uint32_t            : 17;
    } bit;
  } CHSTATCLR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000024) Channel Status Register                                    */
    
    struct {
      __OM  uint32_t CH0SET     : 1;            /*!< [0..0] Channel 0 Status set flag                                          */
      __OM  uint32_t CH1SET     : 1;            /*!< [1..1] Channel 1 Status set flag                                          */
      __OM  uint32_t CH2SET     : 1;            /*!< [2..2] Channel 2 Status set flag                                          */
      __OM  uint32_t CH3SET     : 1;            /*!< [3..3] Channel 3 Status set flag                                          */
      __OM  uint32_t CH4SET     : 1;            /*!< [4..4] Channel 4 Status set flag                                          */
      __OM  uint32_t CH5SET     : 1;            /*!< [5..5] Channel 5 Status set flag                                          */
      __OM  uint32_t CH6SET     : 1;            /*!< [6..6] Channel 6 Status set flag                                          */
      __OM  uint32_t CH7SET     : 1;            /*!< [7..7] Channel 7 Status set flag                                          */
      __OM  uint32_t CH8SET     : 1;            /*!< [8..8] Channel 8 Status set flag                                          */
      __OM  uint32_t CH9SET     : 1;            /*!< [9..9] Channel 9 Status set flag                                          */
      __OM  uint32_t CH10SET    : 1;            /*!< [10..10] Channel 10 Status set flag                                       */
      __OM  uint32_t CH11SET    : 1;            /*!< [11..11] Channel 11 Status set flag                                       */
      __OM  uint32_t CH12SET    : 1;            /*!< [12..12] Channel 12 Status set flag                                       */
      __OM  uint32_t CH13SET    : 1;            /*!< [13..13] Channel 13 Status set flag                                       */
      __OM  uint32_t CH14SET    : 1;            /*!< [14..14] Channel 14 Status set flag                                       */
            uint32_t            : 17;
    } bit;
  } CHSTATSET;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000028) Calibration Enable                                         */
    
    struct {
      __IOM uint32_t CALEN0     : 1;            /*!< [0..0] Channel 0 Calibration Enable                                       */
      __IOM uint32_t CALEN1     : 1;            /*!< [1..1] Channel 1 Calibration Enable                                       */
      __IOM uint32_t CALEN2     : 1;            /*!< [2..2] Channel 2 Calibration Enable                                       */
      __IOM uint32_t CALEN3     : 1;            /*!< [3..3] Channel 3 Calibration Enable                                       */
      __IOM uint32_t CALEN4     : 1;            /*!< [4..4] Channel 4 Calibration Enable                                       */
      __IOM uint32_t CALEN5     : 1;            /*!< [5..5] Channel 5 Calibration Enable                                       */
      __IOM uint32_t CALEN6     : 1;            /*!< [6..6] Channel 6 Calibration Enable                                       */
      __IOM uint32_t CALEN7     : 1;            /*!< [7..7] Channel 7 Calibration Enable                                       */
      __IOM uint32_t CALEN8     : 1;            /*!< [8..8] Channel 8 Calibration Enable                                       */
      __IOM uint32_t CALEN9     : 1;            /*!< [9..9] Channel 9 Calibration Enable                                       */
      __IOM uint32_t CALEN10    : 1;            /*!< [10..10] Channel 10 Calibration Enable                                    */
      __IOM uint32_t CALEN11    : 1;            /*!< [11..11] Channel 11 Calibration Enable                                    */
      __IOM uint32_t CALEN12    : 1;            /*!< [12..12] Channel 12 Calibration Enable                                    */
      __IOM uint32_t CALEN13    : 1;            /*!< [13..13] Channel 13 Calibration Enable                                    */
      __IOM uint32_t CALEN14    : 1;            /*!< [14..14] Channel 14 Calibration Enable                                    */
            uint32_t            : 17;
    } bit;
  } CALEN;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000002C) Calibration Protection Enable                              */
    
    struct {
      __IOM uint32_t CALPEN0    : 1;            /*!< [0..0] Channel 0 Calibration Protection                                   */
      __IOM uint32_t CALPEN1    : 1;            /*!< [1..1] Channel 1 Calibration Protection                                   */
      __IOM uint32_t CALPEN2    : 1;            /*!< [2..2] Channel 2 Calibration Protection                                   */
      __IOM uint32_t CALPEN3    : 1;            /*!< [3..3] Channel 3 Calibration Protection                                   */
      __IOM uint32_t CALPEN4    : 1;            /*!< [4..4] Channel 4 Calibration Protection                                   */
      __IOM uint32_t CALPEN5    : 1;            /*!< [5..5] Channel 5 Calibration Protection                                   */
      __IOM uint32_t CALPEN6    : 1;            /*!< [6..6] Channel 6 Calibration Protection                                   */
      __IOM uint32_t CALPEN7    : 1;            /*!< [7..7] Channel 7 Calibration Protection                                   */
      __IOM uint32_t CALPEN8    : 1;            /*!< [8..8] Channel 8 Calibration Protection                                   */
      __IOM uint32_t CALPEN9    : 1;            /*!< [9..9] Channel 9 Calibration Protection                                   */
      __IOM uint32_t CALPEN10   : 1;            /*!< [10..10] Channel 10 Calibration Protection                                */
      __IOM uint32_t CALPEN11   : 1;            /*!< [11..11] Channel 11 Calibration Protection                                */
      __IOM uint32_t CALPEN12   : 1;            /*!< [12..12] Channel 12 Calibration Protection                                */
      __IOM uint32_t CALPEN13   : 1;            /*!< [13..13] Channel 13 Calibration Protection                                */
      __IOM uint32_t CALPEN14   : 1;            /*!< [14..14] Channel 14 Calibration Protection                                */
            uint32_t            : 17;
    } bit;
  } CALPEN;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000030) Filter Result Register                                     */
    
    struct {
      __IM  uint32_t FILRESULT  : 14;           /*!< [13..0] Filter Result Value                                               */
            uint32_t            : 18;
    } bit;
  } FIL0;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000034) Filter Result Register                                     */
    
    struct {
      __IM  uint32_t FILRESULT  : 14;           /*!< [13..0] Filter Result Value                                               */
            uint32_t            : 18;
    } bit;
  } FIL1;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000038) Filter Result Register                                     */
    
    struct {
      __IM  uint32_t FILRESULT  : 14;           /*!< [13..0] Filter Result Value                                               */
            uint32_t            : 18;
    } bit;
  } FIL2;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x0000003C) Filter Result Register                                     */
    
    struct {
      __IM  uint32_t FILRESULT  : 14;           /*!< [13..0] Filter Result Value                                               */
            uint32_t            : 18;
    } bit;
  } FIL3;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000040) Filter Result Register                                     */
    
    struct {
      __IM  uint32_t FILRESULT  : 14;           /*!< [13..0] Filter Result Value                                               */
            uint32_t            : 18;
    } bit;
  } FIL4;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000044) Filter Result Register                                     */
    
    struct {
      __IM  uint32_t FILRESULT  : 14;           /*!< [13..0] Filter Result Value                                               */
            uint32_t            : 18;
    } bit;
  } FIL5;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000048) Filter Result Register                                     */
    
    struct {
      __IM  uint32_t FILRESULT  : 14;           /*!< [13..0] Filter Result Value                                               */
            uint32_t            : 18;
    } bit;
  } FIL6;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x0000004C) Filter Result Register                                     */
    
    struct {
      __IM  uint32_t FILRESULT  : 14;           /*!< [13..0] Filter Result Value                                               */
            uint32_t            : 18;
    } bit;
  } FIL7;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000050) Filter Status Register                                     */
    
    struct {
      __IOM uint32_t FIL0       : 1;            /*!< [0..0] Filter 0 Event flag                                                */
      __IOM uint32_t FIL1       : 1;            /*!< [1..1] Filter 1 Event flag                                                */
      __IOM uint32_t FIL2       : 1;            /*!< [2..2] Filter 2 Event flag                                                */
      __IOM uint32_t FIL3       : 1;            /*!< [3..3] Filter 3 Event flag                                                */
      __IOM uint32_t FIL4       : 1;            /*!< [4..4] Filter 4 Event flag                                                */
      __IOM uint32_t FIL5       : 1;            /*!< [5..5] Filter 5 Event flag                                                */
      __IOM uint32_t FIL6       : 1;            /*!< [6..6] Filter 6 Event flag                                                */
      __IOM uint32_t FIL7       : 1;            /*!< [7..7] Filter 7 Event flag                                                */
            uint32_t            : 24;
    } bit;
  } FILSTAT;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000054) Filter Status Clear Register                               */
    
    struct {
      __OM  uint32_t FIL0CLR    : 1;            /*!< [0..0] Filter 0 Event flag clear                                          */
      __OM  uint32_t FIL1CLR    : 1;            /*!< [1..1] Filter 1 Event flag clear                                          */
      __OM  uint32_t FIL2CLR    : 1;            /*!< [2..2] Filter 2 Event flag clear                                          */
      __OM  uint32_t FIL3CLR    : 1;            /*!< [3..3] Filter 3 Event flag clear                                          */
      __OM  uint32_t FIL4CLR    : 1;            /*!< [4..4] Filter 4 Event flag clear                                          */
      __OM  uint32_t FIL5CLR    : 1;            /*!< [5..5] Filter 5 Event flag clear                                          */
      __OM  uint32_t FIL6CLR    : 1;            /*!< [6..6] Filter 6 Event flag clear                                          */
      __OM  uint32_t FIL7CLR    : 1;            /*!< [7..7] Filter 7 Event flag clear                                          */
            uint32_t            : 24;
    } bit;
  } FILSTATCLR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000058) Filter Status Clear Register                               */
    
    struct {
      __OM  uint32_t FIL0SET    : 1;            /*!< [0..0] Filter 0 Event flag set                                            */
      __OM  uint32_t FIL1SET    : 1;            /*!< [1..1] Filter 1 Event flag set                                            */
      __OM  uint32_t FIL2SET    : 1;            /*!< [2..2] Filter 2 Event flag set                                            */
      __OM  uint32_t FIL3SET    : 1;            /*!< [3..3] Filter 3 Event flag set                                            */
      __OM  uint32_t FIL4SET    : 1;            /*!< [4..4] Filter 4 Event flag set                                            */
      __OM  uint32_t FIL5SET    : 1;            /*!< [5..5] Filter 5 Event flag set                                            */
      __OM  uint32_t FIL6SET    : 1;            /*!< [6..6] Filter 6 Event flag set                                            */
      __OM  uint32_t FIL7SET    : 1;            /*!< [7..7] Filter 7 Event flag set                                            */
            uint32_t            : 24;
    } bit;
  } FILSTATSET;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x0000005C) Result Register                                            */
    
    struct {
      __IM  uint32_t RESULT     : 12;           /*!< [11..0] Result Value                                                      */
            uint32_t            : 3;
      __IM  uint32_t VALID      : 1;            /*!< [15..15] Valid flag                                                       */
            uint32_t            : 16;
    } bit;
  } RES0;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000060) Result Register                                            */
    
    struct {
      __IM  uint32_t RESULT     : 12;           /*!< [11..0] Result Value                                                      */
            uint32_t            : 3;
      __IM  uint32_t VALID      : 1;            /*!< [15..15] Valid flag                                                       */
            uint32_t            : 16;
    } bit;
  } RES1;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000064) Result Register                                            */
    
    struct {
      __IM  uint32_t RESULT     : 12;           /*!< [11..0] Result Value                                                      */
            uint32_t            : 3;
      __IM  uint32_t VALID      : 1;            /*!< [15..15] Valid flag                                                       */
            uint32_t            : 16;
    } bit;
  } RES2;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000068) Result Register                                            */
    
    struct {
      __IM  uint32_t RESULT     : 12;           /*!< [11..0] Result Value                                                      */
            uint32_t            : 3;
      __IM  uint32_t VALID      : 1;            /*!< [15..15] Valid flag                                                       */
            uint32_t            : 16;
    } bit;
  } RES3;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x0000006C) Result Register                                            */
    
    struct {
      __IM  uint32_t RESULT     : 12;           /*!< [11..0] Result Value                                                      */
            uint32_t            : 3;
      __IM  uint32_t VALID      : 1;            /*!< [15..15] Valid flag                                                       */
            uint32_t            : 16;
    } bit;
  } RES4;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000070) Result Register                                            */
    
    struct {
      __IM  uint32_t RESULT     : 12;           /*!< [11..0] Result Value                                                      */
            uint32_t            : 3;
      __IM  uint32_t VALID      : 1;            /*!< [15..15] Valid flag                                                       */
            uint32_t            : 16;
    } bit;
  } RES5;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000074) Result Register                                            */
    
    struct {
      __IM  uint32_t RESULT     : 12;           /*!< [11..0] Result Value                                                      */
            uint32_t            : 3;
      __IM  uint32_t VALID      : 1;            /*!< [15..15] Valid flag                                                       */
            uint32_t            : 16;
    } bit;
  } RES6;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000078) Result Register                                            */
    
    struct {
      __IM  uint32_t RESULT     : 12;           /*!< [11..0] Result Value                                                      */
            uint32_t            : 3;
      __IM  uint32_t VALID      : 1;            /*!< [15..15] Valid flag                                                       */
            uint32_t            : 16;
    } bit;
  } RES7;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x0000007C) Result Register                                            */
    
    struct {
      __IM  uint32_t RESULT     : 12;           /*!< [11..0] Result Value                                                      */
            uint32_t            : 3;
      __IM  uint32_t VALID      : 1;            /*!< [15..15] Valid flag                                                       */
            uint32_t            : 16;
    } bit;
  } RES8;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000080) Result Register                                            */
    
    struct {
      __IM  uint32_t RESULT     : 12;           /*!< [11..0] Result Value                                                      */
            uint32_t            : 3;
      __IM  uint32_t VALID      : 1;            /*!< [15..15] Valid flag                                                       */
            uint32_t            : 16;
    } bit;
  } RES9;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000084) Result Register                                            */
    
    struct {
      __IM  uint32_t RESULT     : 12;           /*!< [11..0] Result Value                                                      */
            uint32_t            : 3;
      __IM  uint32_t VALID      : 1;            /*!< [15..15] Valid flag                                                       */
            uint32_t            : 16;
    } bit;
  } RES10;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000088) Result Register                                            */
    
    struct {
      __IM  uint32_t RESULT     : 12;           /*!< [11..0] Result Value                                                      */
            uint32_t            : 3;
      __IM  uint32_t VALID      : 1;            /*!< [15..15] Valid flag                                                       */
            uint32_t            : 16;
    } bit;
  } RES11;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x0000008C) Result Register                                            */
    
    struct {
      __IM  uint32_t RESULT     : 12;           /*!< [11..0] Result Value                                                      */
            uint32_t            : 3;
      __IM  uint32_t VALID      : 1;            /*!< [15..15] Valid flag                                                       */
            uint32_t            : 16;
    } bit;
  } RES12;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000090) Result Register                                            */
    
    struct {
      __IM  uint32_t RESULT     : 12;           /*!< [11..0] Result Value                                                      */
            uint32_t            : 3;
      __IM  uint32_t VALID      : 1;            /*!< [15..15] Valid flag                                                       */
            uint32_t            : 16;
    } bit;
  } RES13;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000094) Result Register                                            */
    
    struct {
      __IM  uint32_t RESULT     : 12;           /*!< [11..0] Result Value                                                      */
            uint32_t            : 3;
      __IM  uint32_t VALID      : 1;            /*!< [15..15] Valid flag                                                       */
            uint32_t            : 16;
    } bit;
  } RES14;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000098) Compare Status Register                                    */
    
    struct {
      __IOM uint32_t CMP_LO0_STS : 1;           /*!< [0..0] Compare 0 low Status                                               */
      __IOM uint32_t CMP_LO1_STS : 1;           /*!< [1..1] Compare 1 low Status                                               */
      __IOM uint32_t CMP_LO2_STS : 1;           /*!< [2..2] Compare 2 low Status                                               */
      __IOM uint32_t CMP_LO3_STS : 1;           /*!< [3..3] Compare 3 low Status                                               */
      __IOM uint32_t CMP_LO4_STS : 1;           /*!< [4..4] Compare 4 low Status                                               */
      __IOM uint32_t CMP_LO5_STS : 1;           /*!< [5..5] Compare 5 low Status                                               */
      __IOM uint32_t CMP_LO6_STS : 1;           /*!< [6..6] Compare 6 low Status                                               */
      __IOM uint32_t CMP_LO7_STS : 1;           /*!< [7..7] Compare 7 low Status                                               */
      __IOM uint32_t CMP_LO0_IS : 1;            /*!< [8..8] Compare 0 low Interrupt Status                                     */
      __IOM uint32_t CMP_LO1_IS : 1;            /*!< [9..9] Compare 1 low Interrupt Status                                     */
      __IOM uint32_t CMP_LO2_IS : 1;            /*!< [10..10] Compare 2 low Interrupt Status                                   */
      __IOM uint32_t CMP_LO3_IS : 1;            /*!< [11..11] Compare 3 low Interrupt Status                                   */
      __IOM uint32_t CMP_LO4_IS : 1;            /*!< [12..12] Compare 4 low Interrupt Status                                   */
      __IOM uint32_t CMP_LO5_IS : 1;            /*!< [13..13] Compare 5 low Interrupt Status                                   */
      __IOM uint32_t CMP_LO6_IS : 1;            /*!< [14..14] Compare 6 low Interrupt Status                                   */
      __IOM uint32_t CMP_LO7_IS : 1;            /*!< [15..15] Compare 7 low Interrupt Status                                   */
      __IOM uint32_t CMP_UP0_STS : 1;           /*!< [16..16] Compare 0 up Status                                              */
      __IOM uint32_t CMP_UP1_STS : 1;           /*!< [17..17] Compare 1 up Status                                              */
      __IOM uint32_t CMP_UP2_STS : 1;           /*!< [18..18] Compare 2 up Status                                              */
      __IOM uint32_t CMP_UP3_STS : 1;           /*!< [19..19] Compare 3 up Status                                              */
      __IOM uint32_t CMP_UP4_STS : 1;           /*!< [20..20] Compare 4 up Status                                              */
      __IOM uint32_t CMP_UP5_STS : 1;           /*!< [21..21] Compare 5 up Status                                              */
      __IOM uint32_t CMP_UP6_STS : 1;           /*!< [22..22] Compare 6 up Status                                              */
      __IOM uint32_t CMP_UP7_STS : 1;           /*!< [23..23] Compare 7 up Status                                              */
      __IOM uint32_t CMP_UP0_IS : 1;            /*!< [24..24] Compare 0 up Interrupt Status                                    */
      __IOM uint32_t CMP_UP1_IS : 1;            /*!< [25..25] Compare 1 up Interrupt Status                                    */
      __IOM uint32_t CMP_UP2_IS : 1;            /*!< [26..26] Compare 2 up Interrupt Status                                    */
      __IOM uint32_t CMP_UP3_IS : 1;            /*!< [27..27] Compare 3 up Interrupt Status                                    */
      __IOM uint32_t CMP_UP4_IS : 1;            /*!< [28..28] Compare 4 up Interrupt Status                                    */
      __IOM uint32_t CMP_UP5_IS : 1;            /*!< [29..29] Compare 5 up Interrupt Status                                    */
      __IOM uint32_t CMP_UP6_IS : 1;            /*!< [30..30] Compare 6 up Interrupt Status                                    */
      __IOM uint32_t CMP_UP7_IS : 1;            /*!< [31..31] Compare 7 up Interrupt Status                                    */
    } bit;
  } CMPSTAT;
  
  union {
    __OM  uint32_t reg;                         /*!< (@ 0x0000009C) Compare Status Clear Register                              */
    
    struct {
      __OM  uint32_t CMP_LO0_STSCLR : 1;        /*!< [0..0] Compare 0 low Status clear                                         */
      __OM  uint32_t CMP_LO1_STSCLR : 1;        /*!< [1..1] Compare 1 low Status clear                                         */
      __OM  uint32_t CMP_LO2_STSCLR : 1;        /*!< [2..2] Compare 2 low Status clear                                         */
      __OM  uint32_t CMP_LO3_STSCLR : 1;        /*!< [3..3] Compare 3 low Status clear                                         */
      __OM  uint32_t CMP_LO4_STSCLR : 1;        /*!< [4..4] Compare 4 low Status clear                                         */
      __OM  uint32_t CMP_LO5_STSCLR : 1;        /*!< [5..5] Compare 5 low Status clear                                         */
      __OM  uint32_t CMP_LO6_STSCLR : 1;        /*!< [6..6] Compare 6 low Status clear                                         */
      __OM  uint32_t CMP_LO7_STSCLR : 1;        /*!< [7..7] Compare 7 low Status clear                                         */
      __OM  uint32_t CMP_LO0_ISCLR : 1;         /*!< [8..8] Compare 0 low Interrupt clear                                      */
      __OM  uint32_t CMP_LO1_ISCLR : 1;         /*!< [9..9] Compare 1 low Interrupt clear                                      */
      __OM  uint32_t CMP_LO2_ISCLR : 1;         /*!< [10..10] Compare 2 low Interrupt clear                                    */
      __OM  uint32_t CMP_LO3_ISCLR : 1;         /*!< [11..11] Compare 3 low Interrupt clear                                    */
      __OM  uint32_t CMP_LO4_ISCLR : 1;         /*!< [12..12] Compare 4 low Interrupt clear                                    */
      __OM  uint32_t CMP_LO5_ISCLR : 1;         /*!< [13..13] Compare 5 low Interrupt clear                                    */
      __OM  uint32_t CMP_LO6_ISCLR : 1;         /*!< [14..14] Compare 6 low Interrupt clear                                    */
      __OM  uint32_t CMP_LO7_ISCLR : 1;         /*!< [15..15] Compare 7 low Interrupt clear                                    */
      __OM  uint32_t CMP_UP0_STSCLR : 1;        /*!< [16..16] Compare 0 up Status clear                                        */
      __OM  uint32_t CMP_UP1_STSCLR : 1;        /*!< [17..17] Compare 1 up Status clear                                        */
      __OM  uint32_t CMP_UP2_STSCLR : 1;        /*!< [18..18] Compare 2 up Status clear                                        */
      __OM  uint32_t CMP_UP3_STSCLR : 1;        /*!< [19..19] Compare 3 up Status clear                                        */
      __OM  uint32_t CMP_UP4_STSCLR : 1;        /*!< [20..20] Compare 4 up Status clear                                        */
      __OM  uint32_t CMP_UP5_STSCLR : 1;        /*!< [21..21] Compare 5 up Status clear                                        */
      __OM  uint32_t CMP_UP6_STSCLR : 1;        /*!< [22..22] Compare 6 up Status clear                                        */
      __OM  uint32_t CMP_UP7_STSCLR : 1;        /*!< [23..23] Compare 7 up Status clear                                        */
      __OM  uint32_t CMP_UP0_ISCLR : 1;         /*!< [24..24] Compare 0 up Interrupt clear                                     */
      __OM  uint32_t CMP_UP1_ISCLR : 1;         /*!< [25..25] Compare 1 up Interrupt clear                                     */
      __OM  uint32_t CMP_UP2_ISCLR : 1;         /*!< [26..26] Compare 2 up Interrupt clear                                     */
      __OM  uint32_t CMP_UP3_ISCLR : 1;         /*!< [27..27] Compare 3 up Interrupt clear                                     */
      __OM  uint32_t CMP_UP4_ISCLR : 1;         /*!< [28..28] Compare 4 up Interrupt clear                                     */
      __OM  uint32_t CMP_UP5_ISCLR : 1;         /*!< [29..29] Compare 5 up Interrupt clear                                     */
      __OM  uint32_t CMP_UP6_ISCLR : 1;         /*!< [30..30] Compare 6 up Interrupt clear                                     */
      __OM  uint32_t CMP_UP7_ISCLR : 1;         /*!< [31..31] Compare 7 up Interrupt clear                                     */
    } bit;
  } CMPSTATCLR;
  
  union {
    __OM  uint32_t reg;                         /*!< (@ 0x000000A0) Compare Status Clear Register                              */
    
    struct {
      __OM  uint32_t CMP_LO0_STSSET : 1;        /*!< [0..0] Compare 0 low Status set                                           */
      __OM  uint32_t CMP_LO1_STSSET : 1;        /*!< [1..1] Compare 1 low Status set                                           */
      __OM  uint32_t CMP_LO2_STSSET : 1;        /*!< [2..2] Compare 2 low Status set                                           */
      __OM  uint32_t CMP_LO3_STSSET : 1;        /*!< [3..3] Compare 3 low Status set                                           */
      __OM  uint32_t CMP_LO4_STSSET : 1;        /*!< [4..4] Compare 4 low Status set                                           */
      __OM  uint32_t CMP_LO5_STSSET : 1;        /*!< [5..5] Compare 5 low Status set                                           */
      __OM  uint32_t CMP_LO6_STSSET : 1;        /*!< [6..6] Compare 6 low Status set                                           */
      __OM  uint32_t CMP_LO7_STSSET : 1;        /*!< [7..7] Compare 7 low Status set                                           */
      __OM  uint32_t CMP_LO0_ISSET : 1;         /*!< [8..8] Compare 0 low Interupt set                                         */
      __OM  uint32_t CMP_LO1_ISSET : 1;         /*!< [9..9] Compare 1 low Interupt set                                         */
      __OM  uint32_t CMP_LO2_ISSET : 1;         /*!< [10..10] Compare 2 low Interupt set                                       */
      __OM  uint32_t CMP_LO3_ISSET : 1;         /*!< [11..11] Compare 3 low Interupt set                                       */
      __OM  uint32_t CMP_LO4_ISSET : 1;         /*!< [12..12] Compare 4 low Interupt set                                       */
      __OM  uint32_t CMP_LO5_ISSET : 1;         /*!< [13..13] Compare 5 low Interupt set                                       */
      __OM  uint32_t CMP_LO6_ISSET : 1;         /*!< [14..14] Compare 6 low Interupt set                                       */
      __OM  uint32_t CMP_LO7_ISSET : 1;         /*!< [15..15] Compare 7 low Interupt set                                       */
      __OM  uint32_t CMP_UP0_STSSET : 1;        /*!< [16..16] Compare 0 up Status set                                          */
      __OM  uint32_t CMP_UP1_STSSET : 1;        /*!< [17..17] Compare 1 up Status set                                          */
      __OM  uint32_t CMP_UP2_STSSET : 1;        /*!< [18..18] Compare 2 up Status set                                          */
      __OM  uint32_t CMP_UP3_STSSET : 1;        /*!< [19..19] Compare 3 up Status set                                          */
      __OM  uint32_t CMP_UP4_STSSET : 1;        /*!< [20..20] Compare 4 up Status set                                          */
      __OM  uint32_t CMP_UP5_STSSET : 1;        /*!< [21..21] Compare 5 up Status set                                          */
      __OM  uint32_t CMP_UP6_STSSET : 1;        /*!< [22..22] Compare 6 up Status set                                          */
      __OM  uint32_t CMP_UP7_STSSET : 1;        /*!< [23..23] Compare 7 up Status set                                          */
      __OM  uint32_t CMP_UP0_ISSET : 1;         /*!< [24..24] Compare 0 up Interrupt set                                       */
      __OM  uint32_t CMP_UP1_ISSET : 1;         /*!< [25..25] Compare 1 up Interrupt set                                       */
      __OM  uint32_t CMP_UP2_ISSET : 1;         /*!< [26..26] Compare 2 up Interrupt set                                       */
      __OM  uint32_t CMP_UP3_ISSET : 1;         /*!< [27..27] Compare 3 up Interrupt set                                       */
      __OM  uint32_t CMP_UP4_ISSET : 1;         /*!< [28..28] Compare 4 up Interrupt set                                       */
      __OM  uint32_t CMP_UP5_ISSET : 1;         /*!< [29..29] Compare 5 up Interrupt set                                       */
      __OM  uint32_t CMP_UP6_ISSET : 1;         /*!< [30..30] Compare 6 up Interrupt set                                       */
      __OM  uint32_t CMP_UP7_ISSET : 1;         /*!< [31..31] Compare 7 up Interrupt set                                       */
    } bit;
  } CMPSTATSET;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000A4) Interrupt Enable Register 0                                */
    
    struct {
      __IOM uint32_t IEN_CH0    : 1;            /*!< [0..0] Channel 0 Interrupt Enable                                         */
      __IOM uint32_t IEN_CH1    : 1;            /*!< [1..1] Channel 1 Interrupt Enable                                         */
      __IOM uint32_t IEN_CH2    : 1;            /*!< [2..2] Channel 2 Interrupt Enable                                         */
      __IOM uint32_t IEN_CH3    : 1;            /*!< [3..3] Channel 3 Interrupt Enable                                         */
      __IOM uint32_t IEN_CH4    : 1;            /*!< [4..4] Channel 4 Interrupt Enable                                         */
      __IOM uint32_t IEN_CH5    : 1;            /*!< [5..5] Channel 5 Interrupt Enable                                         */
      __IOM uint32_t IEN_CH6    : 1;            /*!< [6..6] Channel 6 Interrupt Enable                                         */
      __IOM uint32_t IEN_CH7    : 1;            /*!< [7..7] Channel 7 Interrupt Enable                                         */
      __IOM uint32_t IEN_CH8    : 1;            /*!< [8..8] Channel 8 Interrupt Enable                                         */
      __IOM uint32_t IEN_CH9    : 1;            /*!< [9..9] Channel 9 Interrupt Enable                                         */
      __IOM uint32_t IEN_CH10   : 1;            /*!< [10..10] Channel 10 Interrupt Enable                                      */
      __IOM uint32_t IEN_CH11   : 1;            /*!< [11..11] Channel 11 Interrupt Enable                                      */
      __IOM uint32_t IEN_CH12   : 1;            /*!< [12..12] Channel 12 Interrupt Enable                                      */
      __IOM uint32_t IEN_CH13   : 1;            /*!< [13..13] Channel 13 Interrupt Enable                                      */
      __IOM uint32_t IEN_CH14   : 1;            /*!< [14..14] Channel 14 Interrupt Enable                                      */
            uint32_t            : 17;
    } bit;
  } IEN0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000A8) Interrupt Enable Register 1                                */
    
    struct {
      __IOM uint32_t IEN_SQ0    : 1;            /*!< [0..0] Sequence 0 Interrupt Enable                                        */
      __IOM uint32_t IEN_SQ1    : 1;            /*!< [1..1] Sequence 1 Interrupt Enable                                        */
      __IOM uint32_t IEN_SQ2    : 1;            /*!< [2..2] Sequence 2 Interrupt Enable                                        */
      __IOM uint32_t IEN_SQ3    : 1;            /*!< [3..3] Sequence 3 Interrupt Enable                                        */
      __IOM uint32_t IEN_COLL0  : 1;            /*!< [4..4] Collision 0 Interrupt Enable                                       */
      __IOM uint32_t IEN_COLL1  : 1;            /*!< [5..5] Collision 1 Interrupt Enable                                       */
      __IOM uint32_t IEN_COLL2  : 1;            /*!< [6..6] Collision 2 Interrupt Enable                                       */
      __IOM uint32_t IEN_COLL3  : 1;            /*!< [7..7] Collision 3 Interrupt Enable                                       */
            uint32_t            : 8;
      __IOM uint32_t IEN_LO0    : 1;            /*!< [16..16] Compare 0 LO Interrupt Enable                                    */
      __IOM uint32_t IEN_LO1    : 1;            /*!< [17..17] Compare 1 LO Interrupt Enable                                    */
      __IOM uint32_t IEN_LO2    : 1;            /*!< [18..18] Compare 2 LO Interrupt Enable                                    */
      __IOM uint32_t IEN_LO3    : 1;            /*!< [19..19] Compare 3 LO Interrupt Enable                                    */
      __IOM uint32_t IEN_LO4    : 1;            /*!< [20..20] Compare 4 LO Interrupt Enable                                    */
      __IOM uint32_t IEN_LO5    : 1;            /*!< [21..21] Compare 5 LO Interrupt Enable                                    */
      __IOM uint32_t IEN_LO6    : 1;            /*!< [22..22] Compare 6 LO Interrupt Enable                                    */
      __IOM uint32_t IEN_LO7    : 1;            /*!< [23..23] Compare 7 LO Interrupt Enable                                    */
      __IOM uint32_t IEN_UP0    : 1;            /*!< [24..24] Compare 0 UP Interrupt Enable                                    */
      __IOM uint32_t IEN_UP1    : 1;            /*!< [25..25] Compare 1 UP Interrupt Enable                                    */
      __IOM uint32_t IEN_UP2    : 1;            /*!< [26..26] Compare 2 UP Interrupt Enable                                    */
      __IOM uint32_t IEN_UP3    : 1;            /*!< [27..27] Compare 3 UP Interrupt Enable                                    */
      __IOM uint32_t IEN_UP4    : 1;            /*!< [28..28] Compare 4 UP Interrupt Enable                                    */
      __IOM uint32_t IEN_UP5    : 1;            /*!< [29..29] Compare 5 UP Interrupt Enable                                    */
      __IOM uint32_t IEN_UP6    : 1;            /*!< [30..30] Compare 6 UP Interrupt Enable                                    */
      __IOM uint32_t IEN_UP7    : 1;            /*!< [31..31] Compare 7 UP Interrupt Enable                                    */
    } bit;
  } IEN1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000AC) Interrupt Node Pointer Register 0                          */
    
    struct {
      __IOM uint32_t INP_CH0    : 2;            /*!< [1..0] Channel Interrupt Node Pointer                                     */
      __IOM uint32_t INP_CH1    : 2;            /*!< [3..2] Channel Interrupt Node Pointer                                     */
      __IOM uint32_t INP_CH2    : 2;            /*!< [5..4] Channel Interrupt Node Pointer                                     */
      __IOM uint32_t INP_CH3    : 2;            /*!< [7..6] Channel Interrupt Node Pointer                                     */
      __IOM uint32_t INP_CH4    : 2;            /*!< [9..8] Channel Interrupt Node Pointer                                     */
      __IOM uint32_t INP_CH5    : 2;            /*!< [11..10] Channel Interrupt Node Pointer                                   */
      __IOM uint32_t INP_CH6    : 2;            /*!< [13..12] Channel Interrupt Node Pointer                                   */
      __IOM uint32_t INP_CH7    : 2;            /*!< [15..14] Channel Interrupt Node Pointer                                   */
      __IOM uint32_t INP_CH8    : 2;            /*!< [17..16] Channel Interrupt Node Pointer                                   */
      __IOM uint32_t INP_CH9    : 2;            /*!< [19..18] Channel Interrupt Node Pointer                                   */
      __IOM uint32_t INP_CH10   : 2;            /*!< [21..20] Channel Interrupt Node Pointer                                   */
      __IOM uint32_t INP_CH11   : 2;            /*!< [23..22] Channel Interrupt Node Pointer                                   */
      __IOM uint32_t INP_CH12   : 2;            /*!< [25..24] Channel Interrupt Node Pointer                                   */
      __IOM uint32_t INP_CH13   : 2;            /*!< [27..26] Channel Interrupt Node Pointer                                   */
      __IOM uint32_t INP_CH14   : 2;            /*!< [29..28] Channel Interrupt Node Pointer                                   */
            uint32_t            : 2;
    } bit;
  } INP0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000B0) Interrupt Node Pointer Register 2                          */
    
    struct {
      __IOM uint32_t INP_CMP_LO0 : 2;           /*!< [1..0] Compare Lo Interrupt Node Pointer                                  */
      __IOM uint32_t INP_CMP_LO1 : 2;           /*!< [3..2] Compare Lo Interrupt Node Pointer                                  */
      __IOM uint32_t INP_CMP_LO2 : 2;           /*!< [5..4] Compare Lo Interrupt Node Pointer                                  */
      __IOM uint32_t INP_CMP_LO3 : 2;           /*!< [7..6] Compare Lo Interrupt Node Pointer                                  */
      __IOM uint32_t INP_CMP_LO4 : 2;           /*!< [9..8] Compare Lo Interrupt Node Pointer                                  */
      __IOM uint32_t INP_CMP_LO5 : 2;           /*!< [11..10] Compare Lo Interrupt Node Pointer                                */
      __IOM uint32_t INP_CMP_LO6 : 2;           /*!< [13..12] Compare Lo Interrupt Node Pointer                                */
      __IOM uint32_t INP_CMP_LO7 : 2;           /*!< [15..14] Compare Lo Interrupt Node Pointer                                */
      __IOM uint32_t INP_CMP_UP0 : 2;           /*!< [17..16] Compare Up Interrupt Node Pointer                                */
      __IOM uint32_t INP_CMP_UP1 : 2;           /*!< [19..18] Compare Up Interrupt Node Pointer                                */
      __IOM uint32_t INP_CMP_UP2 : 2;           /*!< [21..20] Compare Up Interrupt Node Pointer                                */
      __IOM uint32_t INP_CMP_UP3 : 2;           /*!< [23..22] Compare Up Interrupt Node Pointer                                */
      __IOM uint32_t INP_CMP_UP4 : 2;           /*!< [25..24] Compare Up Interrupt Node Pointer                                */
      __IOM uint32_t INP_CMP_UP5 : 2;           /*!< [27..26] Compare Up Interrupt Node Pointer                                */
      __IOM uint32_t INP_CMP_UP6 : 2;           /*!< [29..28] Compare Up Interrupt Node Pointer                                */
      __IOM uint32_t INP_CMP_UP7 : 2;           /*!< [31..30] Compare Up Interrupt Node Pointer                                */
    } bit;
  } INP2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000B4) Interrupt Node Pointer Register 3                          */
    
    struct {
      __IOM uint32_t INP_SQ0    : 2;            /*!< [1..0] Sequence Interrupt Node Pointer                                    */
      __IOM uint32_t INP_SQ1    : 2;            /*!< [3..2] Sequence Interrupt Node Pointer                                    */
      __IOM uint32_t INP_SQ2    : 2;            /*!< [5..4] Sequence Interrupt Node Pointer                                    */
      __IOM uint32_t INP_SQ3    : 2;            /*!< [7..6] Sequence Interrupt Node Pointer                                    */
      __IOM uint32_t INP_COLL0  : 2;            /*!< [9..8] Collision Interrupt Node Pointer                                   */
      __IOM uint32_t INP_COLL1  : 2;            /*!< [11..10] Collision Interrupt Node Pointer                                 */
      __IOM uint32_t INP_COLL2  : 2;            /*!< [13..12] Collision Interrupt Node Pointer                                 */
      __IOM uint32_t INP_COLL3  : 2;            /*!< [15..14] Collision Interrupt Node Pointer                                 */
            uint32_t            : 16;
    } bit;
  } INP3;
  __IM  uint32_t  RESERVED[4];
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x000000C8) Internal Configuration Register                            */
    
    struct {
      __IM  uint32_t LOW_VOLT_STS : 1;          /*!< [0..0] ADC2 low voltage Status                                            */
            uint32_t            : 31;
    } bit;
  } INTSTAT;
  __IM  uint32_t  RESERVED1[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000D8) Sequence Configuration Register 0                          */
    
    struct {
      __IOM uint32_t SLOTS      : 3;            /*!< [2..0] Number of used Slots in Sequence                                   */
            uint32_t            : 1;
      __IOM uint32_t SQREP      : 2;            /*!< [5..4] Sequence repetition                                                */
            uint32_t            : 2;
      __IOM uint32_t TRGSEL     : 2;            /*!< [9..8] Trigger Select                                                     */
            uint32_t            : 4;
      __OM  uint32_t TRGSW      : 1;            /*!< [14..14] Software Trigger Bit                                             */
            uint32_t            : 17;
    } bit;
  } SQCFG0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000DC) Sequence Configuration Register 1                          */
    
    struct {
      __IOM uint32_t SLOTS      : 3;            /*!< [2..0] Number of used Slots in Sequence                                   */
            uint32_t            : 1;
      __IOM uint32_t SQREP      : 2;            /*!< [5..4] Sequence repetition                                                */
            uint32_t            : 2;
      __IOM uint32_t TRGSEL     : 2;            /*!< [9..8] Trigger Select                                                     */
            uint32_t            : 4;
      __OM  uint32_t TRGSW      : 1;            /*!< [14..14] Software Trigger Bit                                             */
            uint32_t            : 17;
    } bit;
  } SQCFG1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000E0) Sequence Configuration Register 2                          */
    
    struct {
      __IOM uint32_t SLOTS      : 3;            /*!< [2..0] Number of used Slots in Sequence                                   */
            uint32_t            : 1;
      __IOM uint32_t SQREP      : 2;            /*!< [5..4] Sequence repetition                                                */
            uint32_t            : 2;
      __IOM uint32_t TRGSEL     : 2;            /*!< [9..8] Trigger Select                                                     */
            uint32_t            : 4;
      __OM  uint32_t TRGSW      : 1;            /*!< [14..14] Software Trigger Bit                                             */
            uint32_t            : 17;
    } bit;
  } SQCFG2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000E4) Sequence Configuration Register 3                          */
    
    struct {
      __IOM uint32_t SLOTS      : 3;            /*!< [2..0] Number of used Slots in Sequence                                   */
            uint32_t            : 1;
      __IOM uint32_t SQREP      : 2;            /*!< [5..4] Sequence repetition                                                */
            uint32_t            : 2;
      __IOM uint32_t TRGSEL     : 2;            /*!< [9..8] Trigger Select                                                     */
            uint32_t            : 4;
      __OM  uint32_t TRGSW      : 1;            /*!< [14..14] Software Trigger Bit                                             */
            uint32_t            : 17;
    } bit;
  } SQCFG3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000E8) Channel Configuration Register 0                           */
    
    struct {
            uint32_t            : 8;
      __IOM uint32_t CHREP      : 4;            /*!< [11..8] Channel Repetition                                                */
            uint32_t            : 4;
      __IOM uint32_t FILSEL     : 4;            /*!< [19..16] Filter Selection                                                 */
      __IOM uint32_t CMPSEL     : 4;            /*!< [23..20] Compare Selection                                                */
      __IOM uint32_t CLASSEL    : 2;            /*!< [25..24] Conversion Class Selection                                       */
            uint32_t            : 6;
    } bit;
  } CHCFG0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000EC) Channel Configuration Register 1                           */
    
    struct {
            uint32_t            : 8;
      __IOM uint32_t CHREP      : 4;            /*!< [11..8] Channel Repetition                                                */
            uint32_t            : 4;
      __IOM uint32_t FILSEL     : 4;            /*!< [19..16] Filter Selection                                                 */
      __IOM uint32_t CMPSEL     : 4;            /*!< [23..20] Compare Selection                                                */
      __IOM uint32_t CLASSEL    : 2;            /*!< [25..24] Conversion Class Selection                                       */
            uint32_t            : 6;
    } bit;
  } CHCFG1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000F0) Channel Configuration Register 2                           */
    
    struct {
            uint32_t            : 8;
      __IOM uint32_t CHREP      : 4;            /*!< [11..8] Channel Repetition                                                */
            uint32_t            : 4;
      __IOM uint32_t FILSEL     : 4;            /*!< [19..16] Filter Selection                                                 */
      __IOM uint32_t CMPSEL     : 4;            /*!< [23..20] Compare Selection                                                */
      __IOM uint32_t CLASSEL    : 2;            /*!< [25..24] Conversion Class Selection                                       */
            uint32_t            : 6;
    } bit;
  } CHCFG2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000F4) Channel Configuration Register 3                           */
    
    struct {
            uint32_t            : 8;
      __IOM uint32_t CHREP      : 4;            /*!< [11..8] Channel Repetition                                                */
            uint32_t            : 4;
      __IOM uint32_t FILSEL     : 4;            /*!< [19..16] Filter Selection                                                 */
      __IOM uint32_t CMPSEL     : 4;            /*!< [23..20] Compare Selection                                                */
      __IOM uint32_t CLASSEL    : 2;            /*!< [25..24] Conversion Class Selection                                       */
            uint32_t            : 6;
    } bit;
  } CHCFG3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000F8) Channel Configuration Register 4                           */
    
    struct {
            uint32_t            : 8;
      __IOM uint32_t CHREP      : 4;            /*!< [11..8] Channel Repetition                                                */
            uint32_t            : 4;
      __IOM uint32_t FILSEL     : 4;            /*!< [19..16] Filter Selection                                                 */
      __IOM uint32_t CMPSEL     : 4;            /*!< [23..20] Compare Selection                                                */
      __IOM uint32_t CLASSEL    : 2;            /*!< [25..24] Conversion Class Selection                                       */
            uint32_t            : 6;
    } bit;
  } CHCFG4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000FC) Channel Configuration Register 5                           */
    
    struct {
            uint32_t            : 8;
      __IOM uint32_t CHREP      : 4;            /*!< [11..8] Channel Repetition                                                */
            uint32_t            : 4;
      __IOM uint32_t FILSEL     : 4;            /*!< [19..16] Filter Selection                                                 */
      __IOM uint32_t CMPSEL     : 4;            /*!< [23..20] Compare Selection                                                */
      __IOM uint32_t CLASSEL    : 2;            /*!< [25..24] Conversion Class Selection                                       */
            uint32_t            : 6;
    } bit;
  } CHCFG5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000100) Channel Configuration Register 6                           */
    
    struct {
            uint32_t            : 8;
      __IOM uint32_t CHREP      : 4;            /*!< [11..8] Channel Repetition                                                */
            uint32_t            : 4;
      __IOM uint32_t FILSEL     : 4;            /*!< [19..16] Filter Selection                                                 */
      __IOM uint32_t CMPSEL     : 4;            /*!< [23..20] Compare Selection                                                */
      __IOM uint32_t CLASSEL    : 2;            /*!< [25..24] Conversion Class Selection                                       */
            uint32_t            : 6;
    } bit;
  } CHCFG6;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000104) Channel Configuration Register 7                           */
    
    struct {
            uint32_t            : 8;
      __IOM uint32_t CHREP      : 4;            /*!< [11..8] Channel Repetition                                                */
            uint32_t            : 4;
      __IOM uint32_t FILSEL     : 4;            /*!< [19..16] Filter Selection                                                 */
      __IOM uint32_t CMPSEL     : 4;            /*!< [23..20] Compare Selection                                                */
      __IOM uint32_t CLASSEL    : 2;            /*!< [25..24] Conversion Class Selection                                       */
            uint32_t            : 6;
    } bit;
  } CHCFG7;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000108) Channel Configuration Register 8                           */
    
    struct {
            uint32_t            : 8;
      __IOM uint32_t CHREP      : 4;            /*!< [11..8] Channel Repetition                                                */
            uint32_t            : 4;
      __IOM uint32_t FILSEL     : 4;            /*!< [19..16] Filter Selection                                                 */
      __IOM uint32_t CMPSEL     : 4;            /*!< [23..20] Compare Selection                                                */
      __IOM uint32_t CLASSEL    : 2;            /*!< [25..24] Conversion Class Selection                                       */
            uint32_t            : 6;
    } bit;
  } CHCFG8;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000010C) Channel Configuration Register 9                           */
    
    struct {
            uint32_t            : 8;
      __IOM uint32_t CHREP      : 4;            /*!< [11..8] Channel Repetition                                                */
            uint32_t            : 4;
      __IOM uint32_t FILSEL     : 4;            /*!< [19..16] Filter Selection                                                 */
      __IOM uint32_t CMPSEL     : 4;            /*!< [23..20] Compare Selection                                                */
      __IOM uint32_t CLASSEL    : 2;            /*!< [25..24] Conversion Class Selection                                       */
            uint32_t            : 6;
    } bit;
  } CHCFG9;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000110) Channel Configuration Register 10                          */
    
    struct {
            uint32_t            : 8;
      __IOM uint32_t CHREP      : 4;            /*!< [11..8] Channel Repetition                                                */
            uint32_t            : 4;
      __IOM uint32_t FILSEL     : 4;            /*!< [19..16] Filter Selection                                                 */
      __IOM uint32_t CMPSEL     : 4;            /*!< [23..20] Compare Selection                                                */
      __IOM uint32_t CLASSEL    : 2;            /*!< [25..24] Conversion Class Selection                                       */
            uint32_t            : 6;
    } bit;
  } CHCFG10;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000114) Channel Configuration Register 11                          */
    
    struct {
            uint32_t            : 8;
      __IOM uint32_t CHREP      : 4;            /*!< [11..8] Channel Repetition                                                */
            uint32_t            : 4;
      __IOM uint32_t FILSEL     : 4;            /*!< [19..16] Filter Selection                                                 */
      __IOM uint32_t CMPSEL     : 4;            /*!< [23..20] Compare Selection                                                */
      __IOM uint32_t CLASSEL    : 2;            /*!< [25..24] Conversion Class Selection                                       */
            uint32_t            : 6;
    } bit;
  } CHCFG11;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000118) Channel Configuration Register 12                          */
    
    struct {
            uint32_t            : 8;
      __IOM uint32_t CHREP      : 4;            /*!< [11..8] Channel Repetition                                                */
            uint32_t            : 4;
      __IOM uint32_t FILSEL     : 4;            /*!< [19..16] Filter Selection                                                 */
      __IOM uint32_t CMPSEL     : 4;            /*!< [23..20] Compare Selection                                                */
      __IOM uint32_t CLASSEL    : 2;            /*!< [25..24] Conversion Class Selection                                       */
            uint32_t            : 6;
    } bit;
  } CHCFG12;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000011C) Channel Configuration Register 13                          */
    
    struct {
            uint32_t            : 8;
      __IOM uint32_t CHREP      : 4;            /*!< [11..8] Channel Repetition                                                */
            uint32_t            : 4;
      __IOM uint32_t FILSEL     : 4;            /*!< [19..16] Filter Selection                                                 */
      __IOM uint32_t CMPSEL     : 4;            /*!< [23..20] Compare Selection                                                */
      __IOM uint32_t CLASSEL    : 2;            /*!< [25..24] Conversion Class Selection                                       */
            uint32_t            : 6;
    } bit;
  } CHCFG13;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000120) Channel Configuration Register 14                          */
    
    struct {
            uint32_t            : 8;
      __IOM uint32_t CHREP      : 4;            /*!< [11..8] Channel Repetition                                                */
            uint32_t            : 4;
      __IOM uint32_t FILSEL     : 4;            /*!< [19..16] Filter Selection                                                 */
      __IOM uint32_t CMPSEL     : 4;            /*!< [23..20] Compare Selection                                                */
      __IOM uint32_t CLASSEL    : 2;            /*!< [25..24] Conversion Class Selection                                       */
            uint32_t            : 6;
    } bit;
  } CHCFG14;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000124) Compare Status Register                                    */
    
    struct {
      __IM  uint32_t CMP_LO     : 8;            /*!< [7..0] Compare low Status                                                 */
            uint32_t            : 8;
      __IM  uint32_t CMP_UP     : 8;            /*!< [23..16] Compare up Status                                                */
            uint32_t            : 8;
    } bit;
  } CMPSTAT2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000128) Calibration Setting for Analog Inputs                      */
    
    struct {
      __IOM uint32_t CALOFFS    : 5;            /*!< [4..0] Calibration Offset                                                 */
            uint32_t            : 11;
      __IOM uint32_t CALGAIN    : 8;            /*!< [23..16] Calibration Gain                                                 */
            uint32_t            : 8;
    } bit;
  } CALAI0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000012C) Calibration Setting for Analog Inputs                      */
    
    struct {
      __IOM uint32_t CALOFFS    : 5;            /*!< [4..0] Calibration Offset                                                 */
            uint32_t            : 11;
      __IOM uint32_t CALGAIN    : 8;            /*!< [23..16] Calibration Gain                                                 */
            uint32_t            : 8;
    } bit;
  } CALAI1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000130) Calibration Setting for Analog Inputs                      */
    
    struct {
      __IOM uint32_t CALOFFS    : 5;            /*!< [4..0] Calibration Offset                                                 */
            uint32_t            : 11;
      __IOM uint32_t CALGAIN    : 8;            /*!< [23..16] Calibration Gain                                                 */
            uint32_t            : 8;
    } bit;
  } CALAI2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000134) Calibration Setting for Analog Inputs                      */
    
    struct {
      __IOM uint32_t CALOFFS    : 5;            /*!< [4..0] Calibration Offset                                                 */
            uint32_t            : 11;
      __IOM uint32_t CALGAIN    : 8;            /*!< [23..16] Calibration Gain                                                 */
            uint32_t            : 8;
    } bit;
  } CALAI3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000138) Calibration Setting for Analog Inputs                      */
    
    struct {
      __IOM uint32_t CALOFFS    : 5;            /*!< [4..0] Calibration Offset                                                 */
            uint32_t            : 11;
      __IOM uint32_t CALGAIN    : 8;            /*!< [23..16] Calibration Gain                                                 */
            uint32_t            : 8;
    } bit;
  } CALAI4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000013C) Calibration Setting for Analog Inputs                      */
    
    struct {
      __IOM uint32_t CALOFFS    : 5;            /*!< [4..0] Calibration Offset                                                 */
            uint32_t            : 11;
      __IOM uint32_t CALGAIN    : 8;            /*!< [23..16] Calibration Gain                                                 */
            uint32_t            : 8;
    } bit;
  } CALAI5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000140) Calibration Setting for Analog Inputs                      */
    
    struct {
      __IOM uint32_t CALOFFS    : 5;            /*!< [4..0] Calibration Offset                                                 */
            uint32_t            : 11;
      __IOM uint32_t CALGAIN    : 8;            /*!< [23..16] Calibration Gain                                                 */
            uint32_t            : 8;
    } bit;
  } CALAI6;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000144) Calibration Setting for Analog Inputs                      */
    
    struct {
      __IOM uint32_t CALOFFS    : 5;            /*!< [4..0] Calibration Offset                                                 */
            uint32_t            : 11;
      __IOM uint32_t CALGAIN    : 8;            /*!< [23..16] Calibration Gain                                                 */
            uint32_t            : 8;
    } bit;
  } CALAI7;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000148) Calibration Setting for Analog Inputs                      */
    
    struct {
      __IOM uint32_t CALOFFS    : 5;            /*!< [4..0] Calibration Offset                                                 */
            uint32_t            : 11;
      __IOM uint32_t CALGAIN    : 8;            /*!< [23..16] Calibration Gain                                                 */
            uint32_t            : 8;
    } bit;
  } CALAI8;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000014C) Calibration Setting for Analog Inputs                      */
    
    struct {
      __IOM uint32_t CALOFFS    : 5;            /*!< [4..0] Calibration Offset                                                 */
            uint32_t            : 11;
      __IOM uint32_t CALGAIN    : 8;            /*!< [23..16] Calibration Gain                                                 */
            uint32_t            : 8;
    } bit;
  } CALAI9;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000150) Calibration Setting for Analog Inputs                      */
    
    struct {
      __IOM uint32_t CALOFFS    : 5;            /*!< [4..0] Calibration Offset                                                 */
            uint32_t            : 11;
      __IOM uint32_t CALGAIN    : 8;            /*!< [23..16] Calibration Gain                                                 */
            uint32_t            : 8;
    } bit;
  } CALAI10;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000154) Calibration Setting for Analog Inputs                      */
    
    struct {
      __IOM uint32_t CALOFFS    : 5;            /*!< [4..0] Calibration Offset                                                 */
            uint32_t            : 11;
      __IOM uint32_t CALGAIN    : 8;            /*!< [23..16] Calibration Gain                                                 */
            uint32_t            : 8;
    } bit;
  } CALAI11;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000158) Calibration Setting for Analog Inputs                      */
    
    struct {
      __IOM uint32_t CALOFFS    : 5;            /*!< [4..0] Calibration Offset                                                 */
            uint32_t            : 11;
      __IOM uint32_t CALGAIN    : 8;            /*!< [23..16] Calibration Gain                                                 */
            uint32_t            : 8;
    } bit;
  } CALAI12;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000015C) Calibration Setting for Analog Inputs                      */
    
    struct {
      __IOM uint32_t CALOFFS    : 5;            /*!< [4..0] Calibration Offset                                                 */
            uint32_t            : 11;
      __IOM uint32_t CALGAIN    : 8;            /*!< [23..16] Calibration Gain                                                 */
            uint32_t            : 8;
    } bit;
  } CALAI13;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000160) Calibration Setting for Analog Inputs                      */
    
    struct {
      __IOM uint32_t CALOFFS    : 5;            /*!< [4..0] Calibration Offset                                                 */
            uint32_t            : 11;
      __IOM uint32_t CALGAIN    : 8;            /*!< [23..16] Calibration Gain                                                 */
            uint32_t            : 8;
    } bit;
  } CALAI14;
  __IM  uint32_t  RESERVED2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000168) SQ Channel Slot Register 0                                 */
    
    struct {
      __IOM uint32_t CHSEL0     : 4;            /*!< [3..0] Channel Select                                                     */
            uint32_t            : 4;
      __IOM uint32_t CHSEL1     : 4;            /*!< [11..8] Channel Select                                                    */
            uint32_t            : 4;
      __IOM uint32_t CHSEL2     : 4;            /*!< [19..16] Channel Select                                                   */
            uint32_t            : 4;
      __IOM uint32_t CHSEL3     : 4;            /*!< [27..24] Channel Select                                                   */
            uint32_t            : 4;
    } bit;
  } SQSLOT0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000016C) SQ Channel Slot Register 1                                 */
    
    struct {
      __IOM uint32_t CHSEL0     : 4;            /*!< [3..0] Channel Select                                                     */
            uint32_t            : 4;
      __IOM uint32_t CHSEL1     : 4;            /*!< [11..8] Channel Select                                                    */
            uint32_t            : 4;
      __IOM uint32_t CHSEL2     : 4;            /*!< [19..16] Channel Select                                                   */
            uint32_t            : 4;
      __IOM uint32_t CHSEL3     : 4;            /*!< [27..24] Channel Select                                                   */
            uint32_t            : 4;
    } bit;
  } SQSLOT1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000170) SQ Channel Slot Register 2                                 */
    
    struct {
      __IOM uint32_t CHSEL0     : 4;            /*!< [3..0] Channel Select                                                     */
            uint32_t            : 4;
      __IOM uint32_t CHSEL1     : 4;            /*!< [11..8] Channel Select                                                    */
            uint32_t            : 4;
      __IOM uint32_t CHSEL2     : 4;            /*!< [19..16] Channel Select                                                   */
            uint32_t            : 4;
      __IOM uint32_t CHSEL3     : 4;            /*!< [27..24] Channel Select                                                   */
            uint32_t            : 4;
    } bit;
  } SQSLOT2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000174) SQ Channel Slot Register 3                                 */
    
    struct {
      __IOM uint32_t CHSEL0     : 4;            /*!< [3..0] Channel Select                                                     */
            uint32_t            : 4;
      __IOM uint32_t CHSEL1     : 4;            /*!< [11..8] Channel Select                                                    */
            uint32_t            : 4;
      __IOM uint32_t CHSEL2     : 4;            /*!< [19..16] Channel Select                                                   */
            uint32_t            : 4;
      __IOM uint32_t CHSEL3     : 4;            /*!< [27..24] Channel Select                                                   */
            uint32_t            : 4;
    } bit;
  } SQSLOT3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000178) Channel Configuration Register 0                           */
    
    struct {
            uint32_t            : 4;
      __IOM uint32_t STC        : 4;            /*!< [7..4] Sample Time config                                                 */
            uint32_t            : 24;
    } bit;
  } CONVCFG0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000017C) Channel Configuration Register 1                           */
    
    struct {
            uint32_t            : 4;
      __IOM uint32_t STC        : 4;            /*!< [7..4] Sample Time config                                                 */
            uint32_t            : 24;
    } bit;
  } CONVCFG1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000180) Channel Configuration Register 2                           */
    
    struct {
            uint32_t            : 4;
      __IOM uint32_t STC        : 4;            /*!< [7..4] Sample Time config                                                 */
            uint32_t            : 24;
    } bit;
  } CONVCFG2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000184) Channel Configuration Register 3                           */
    
    struct {
            uint32_t            : 4;
      __IOM uint32_t STC        : 4;            /*!< [7..4] Sample Time config                                                 */
            uint32_t            : 24;
    } bit;
  } CONVCFG3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000188) Compare Channel 0 Control Register                         */
    
    struct {
      __IOM uint32_t LOWER      : 8;            /*!< [7..0] Lower Compare Value                                                */
      __IOM uint32_t INP_SEL    : 1;            /*!< [8..8] Input selection for the comparator unit                            */
            uint32_t            : 3;
      __IOM uint32_t HYST_LO    : 2;            /*!< [13..12] Hysteresis setting for lower compare threshold                   */
            uint32_t            : 2;
      __IOM uint32_t UPPER      : 8;            /*!< [23..16] Upper Compare Value                                              */
      __IOM uint32_t BLANK_TIME : 3;            /*!< [26..24] Blank Time configuration                                         */
      __IOM uint32_t RST_BLANK_TIME : 1;        /*!< [27..27] Restart Blank time                                               */
      __IOM uint32_t HYST_UP    : 2;            /*!< [29..28] Hysteresis setting for upper compare threshold                   */
      __IOM uint32_t MODE       : 2;            /*!< [31..30] Compare Mode                                                     */
    } bit;
  } CMPCFG0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000018C) Compare Channel 1 Control Register                         */
    
    struct {
      __IOM uint32_t LOWER      : 8;            /*!< [7..0] Lower Compare Value                                                */
      __IOM uint32_t INP_SEL    : 1;            /*!< [8..8] Input selection for the comparator unit                            */
            uint32_t            : 3;
      __IOM uint32_t HYST_LO    : 2;            /*!< [13..12] Hysteresis setting for lower compare threshold                   */
            uint32_t            : 2;
      __IOM uint32_t UPPER      : 8;            /*!< [23..16] Upper Compare Value                                              */
      __IOM uint32_t BLANK_TIME : 3;            /*!< [26..24] Blank Time configuration                                         */
      __IOM uint32_t RST_BLANK_TIME : 1;        /*!< [27..27] Restart Blank time                                               */
      __IOM uint32_t HYST_UP    : 2;            /*!< [29..28] Hysteresis setting for upper compare threshold                   */
      __IOM uint32_t MODE       : 2;            /*!< [31..30] Compare Mode                                                     */
    } bit;
  } CMPCFG1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000190) Compare Channel 2 Control Register                         */
    
    struct {
      __IOM uint32_t LOWER      : 8;            /*!< [7..0] Lower Compare Value                                                */
      __IOM uint32_t INP_SEL    : 1;            /*!< [8..8] Input selection for the comparator unit                            */
            uint32_t            : 3;
      __IOM uint32_t HYST_LO    : 2;            /*!< [13..12] Hysteresis setting for lower compare threshold                   */
            uint32_t            : 2;
      __IOM uint32_t UPPER      : 8;            /*!< [23..16] Upper Compare Value                                              */
      __IOM uint32_t BLANK_TIME : 3;            /*!< [26..24] Blank Time configuration                                         */
      __IOM uint32_t RST_BLANK_TIME : 1;        /*!< [27..27] Restart Blank time                                               */
      __IOM uint32_t HYST_UP    : 2;            /*!< [29..28] Hysteresis setting for upper compare threshold                   */
      __IOM uint32_t MODE       : 2;            /*!< [31..30] Compare Mode                                                     */
    } bit;
  } CMPCFG2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000194) Compare Channel 3 Control Register                         */
    
    struct {
      __IOM uint32_t LOWER      : 8;            /*!< [7..0] Lower Compare Value                                                */
      __IOM uint32_t INP_SEL    : 1;            /*!< [8..8] Input selection for the comparator unit                            */
            uint32_t            : 3;
      __IOM uint32_t HYST_LO    : 2;            /*!< [13..12] Hysteresis setting for lower compare threshold                   */
            uint32_t            : 2;
      __IOM uint32_t UPPER      : 8;            /*!< [23..16] Upper Compare Value                                              */
      __IOM uint32_t BLANK_TIME : 3;            /*!< [26..24] Blank Time configuration                                         */
      __IOM uint32_t RST_BLANK_TIME : 1;        /*!< [27..27] Restart Blank time                                               */
      __IOM uint32_t HYST_UP    : 2;            /*!< [29..28] Hysteresis setting for upper compare threshold                   */
      __IOM uint32_t MODE       : 2;            /*!< [31..30] Compare Mode                                                     */
    } bit;
  } CMPCFG3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000198) Compare Channel 4 Control Register                         */
    
    struct {
      __IOM uint32_t LOWER      : 8;            /*!< [7..0] Lower Compare Value                                                */
      __IOM uint32_t INP_SEL    : 1;            /*!< [8..8] Input selection for the comparator unit                            */
            uint32_t            : 3;
      __IOM uint32_t HYST_LO    : 2;            /*!< [13..12] Hysteresis setting for lower compare threshold                   */
            uint32_t            : 2;
      __IOM uint32_t UPPER      : 8;            /*!< [23..16] Upper Compare Value                                              */
      __IOM uint32_t BLANK_TIME : 3;            /*!< [26..24] Blank Time configuration                                         */
      __IOM uint32_t RST_BLANK_TIME : 1;        /*!< [27..27] Restart Blank time                                               */
      __IOM uint32_t HYST_UP    : 2;            /*!< [29..28] Hysteresis setting for upper compare threshold                   */
      __IOM uint32_t MODE       : 2;            /*!< [31..30] Compare Mode                                                     */
    } bit;
  } CMPCFG4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000019C) Compare Channel 5 Control Register                         */
    
    struct {
      __IOM uint32_t LOWER      : 8;            /*!< [7..0] Lower Compare Value                                                */
      __IOM uint32_t INP_SEL    : 1;            /*!< [8..8] Input selection for the comparator unit                            */
            uint32_t            : 3;
      __IOM uint32_t HYST_LO    : 2;            /*!< [13..12] Hysteresis setting for lower compare threshold                   */
            uint32_t            : 2;
      __IOM uint32_t UPPER      : 8;            /*!< [23..16] Upper Compare Value                                              */
      __IOM uint32_t BLANK_TIME : 3;            /*!< [26..24] Blank Time configuration                                         */
      __IOM uint32_t RST_BLANK_TIME : 1;        /*!< [27..27] Restart Blank time                                               */
      __IOM uint32_t HYST_UP    : 2;            /*!< [29..28] Hysteresis setting for upper compare threshold                   */
      __IOM uint32_t MODE       : 2;            /*!< [31..30] Compare Mode                                                     */
    } bit;
  } CMPCFG5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000001A0) Compare Channel 6 Control Register                         */
    
    struct {
      __IOM uint32_t LOWER      : 8;            /*!< [7..0] Lower Compare Value                                                */
      __IOM uint32_t INP_SEL    : 1;            /*!< [8..8] Input selection for the comparator unit                            */
            uint32_t            : 3;
      __IOM uint32_t HYST_LO    : 2;            /*!< [13..12] Hysteresis setting for lower compare threshold                   */
            uint32_t            : 2;
      __IOM uint32_t UPPER      : 8;            /*!< [23..16] Upper Compare Value                                              */
      __IOM uint32_t BLANK_TIME : 3;            /*!< [26..24] Blank Time configuration                                         */
      __IOM uint32_t RST_BLANK_TIME : 1;        /*!< [27..27] Restart Blank time                                               */
      __IOM uint32_t HYST_UP    : 2;            /*!< [29..28] Hysteresis setting for upper compare threshold                   */
      __IOM uint32_t MODE       : 2;            /*!< [31..30] Compare Mode                                                     */
    } bit;
  } CMPCFG6;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000001A4) Compare Channel 7 Control Register                         */
    
    struct {
      __IOM uint32_t LOWER      : 8;            /*!< [7..0] Lower Compare Value                                                */
      __IOM uint32_t INP_SEL    : 1;            /*!< [8..8] Input selection for the comparator unit                            */
            uint32_t            : 3;
      __IOM uint32_t HYST_LO    : 2;            /*!< [13..12] Hysteresis setting for lower compare threshold                   */
            uint32_t            : 2;
      __IOM uint32_t UPPER      : 8;            /*!< [23..16] Upper Compare Value                                              */
      __IOM uint32_t BLANK_TIME : 3;            /*!< [26..24] Blank Time configuration                                         */
      __IOM uint32_t RST_BLANK_TIME : 1;        /*!< [27..27] Restart Blank time                                               */
      __IOM uint32_t HYST_UP    : 2;            /*!< [29..28] Hysteresis setting for upper compare threshold                   */
      __IOM uint32_t MODE       : 2;            /*!< [31..30] Compare Mode                                                     */
    } bit;
  } CMPCFG7;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000001A8) Filter Configuration                                       */
    
    struct {
      __IOM uint32_t COEF_A0    : 2;            /*!< [1..0] Filter Coefficient 0                                               */
            uint32_t            : 2;
      __IOM uint32_t COEF_A1    : 2;            /*!< [5..4] Filter Coefficient 0                                               */
            uint32_t            : 2;
      __IOM uint32_t COEF_A2    : 2;            /*!< [9..8] Filter Coefficient 0                                               */
            uint32_t            : 2;
      __IOM uint32_t COEF_A3    : 2;            /*!< [13..12] Filter Coefficient 0                                             */
            uint32_t            : 2;
      __IOM uint32_t COEF_A4    : 2;            /*!< [17..16] Filter Coefficient 0                                             */
            uint32_t            : 2;
      __IOM uint32_t COEF_A5    : 2;            /*!< [21..20] Filter Coefficient 0                                             */
            uint32_t            : 2;
      __IOM uint32_t COEF_A6    : 2;            /*!< [25..24] Filter Coefficient 0                                             */
            uint32_t            : 2;
      __IOM uint32_t COEF_A7    : 2;            /*!< [29..28] Filter Coefficient 0                                             */
            uint32_t            : 2;
    } bit;
  } FILTCFG;
} ADC2_Type;                                    /*!< Size = 428 (0x1ac)                                                        */



/* =========================================================================================================================== */
/* ================                                           ARVG                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief ARVG (ARVG)
  */

typedef struct {                                /*!< (@ 0x48038000) ARVG Structure                                             */
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000000) CFU status register                                        */
    
    struct {
      __IM  uint32_t VREF1V2_UP : 1;            /*!< [0..0] Reference voltage status                                           */
            uint32_t            : 31;
    } bit;
  } CFU_STS;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000004) VAREF Interrupt Status Register                            */
    
    struct {
      __IOM uint32_t OC_IS      : 1;            /*!< [0..0] VAREF overcurrent (undervoltage) interrupt.                        */
            uint32_t            : 15;
      __IOM uint32_t OC_STS     : 1;            /*!< [16..16] VAREF overcurrent (undervoltage) status flag. The detection
                                                     circuit monitors VAREF voltage.                                           */
            uint32_t            : 15;
    } bit;
  } VAREF_IRQ;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000008) VAREF Interrupt Set Register                               */
    
    struct {
      __OM  uint32_t OC_IS_SET  : 1;            /*!< [0..0] VAREF overcurrent (undervoltage) interrupt set                     */
            uint32_t            : 15;
      __OM  uint32_t OC_STS_SET : 1;            /*!< [16..16] VAREF overcurrent (undervoltage) status flag set. Setting
                                                     this bit will trigger a VAREF switch off.                                 */
            uint32_t            : 15;
    } bit;
  } VAREF_IRQ_SET;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000000C) VAREF Interrupt Clear Register                             */
    
    struct {
      __OM  uint32_t OC_IS_CLR  : 1;            /*!< [0..0] VAREF overcurrent (undervoltage) interrupt clear                   */
            uint32_t            : 15;
      __OM  uint32_t OC_STS_CLR : 1;            /*!< [16..16] VAREF overcurrent (undervoltage) status flag clear               */
            uint32_t            : 15;
    } bit;
  } VAREF_IRQ_CLR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) VAREF Interrupt Enable Register                            */
    
    struct {
      __IOM uint32_t OC_IEN     : 1;            /*!< [0..0] VAREF Overcurrent (undervoltage) Interrupt Enable                  */
            uint32_t            : 31;
    } bit;
  } VAREF_IEN;
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000018) VAREF control register                                     */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] VAREF enable bit                                                   */
            uint32_t            : 31;
    } bit;
  } VAREF_CTRL;
} ARVG_Type;                                    /*!< Size = 28 (0x1c)                                                          */



/* =========================================================================================================================== */
/* ================                                           BDRV                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief BDRV (BDRV)
  */

typedef struct {                                /*!< (@ 0x4000C000) BDRV Structure                                             */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Bridge driver control 1                                    */
    
    struct {
      __IOM uint32_t HB1_EN     : 1;            /*!< [0..0] Half bridge 1 enable                                               */
      __IOM uint32_t LS1_PWM    : 1;            /*!< [1..1] Low-side driver 1 PWM enable                                       */
      __IOM uint32_t LS1_ON     : 1;            /*!< [2..2] Low-side driver 1 on                                               */
      __IOM uint32_t LS1_OC_SEL : 1;            /*!< [3..3] Low-side driver 1 overcurrent shutdown select                      */
            uint32_t            : 1;
      __IOM uint32_t HS1_PWM    : 1;            /*!< [5..5] High-side driver 1 PWM enable                                      */
      __IOM uint32_t HS1_ON     : 1;            /*!< [6..6] High-side driver 1 on                                              */
      __IOM uint32_t HS1_OC_SEL : 1;            /*!< [7..7] High-side driver 1 overcurrent shutdown select                     */
      __IOM uint32_t HB2_EN     : 1;            /*!< [8..8] Half bridge 2 enable                                               */
      __IOM uint32_t LS2_PWM    : 1;            /*!< [9..9] Low-side driver 2 PWM enable                                       */
      __IOM uint32_t LS2_ON     : 1;            /*!< [10..10] Low-side driver 2 on                                             */
      __IOM uint32_t LS2_OC_SEL : 1;            /*!< [11..11] Low-side driver 2 overcurrent shutdown select                    */
            uint32_t            : 1;
      __IOM uint32_t HS2_PWM    : 1;            /*!< [13..13] High-side driver 2 PWM enable                                    */
      __IOM uint32_t HS2_ON     : 1;            /*!< [14..14] High-side driver 2 on                                            */
      __IOM uint32_t HS2_OC_SEL : 1;            /*!< [15..15] High-side driver 2 overcurrent shutdown select                   */
      __IOM uint32_t HB3_EN     : 1;            /*!< [16..16] Half bridge 3 enable                                             */
      __IOM uint32_t LS3_PWM    : 1;            /*!< [17..17] Low-side driver 3 PWM enable                                     */
      __IOM uint32_t LS3_ON     : 1;            /*!< [18..18] Low-side driver 3 on                                             */
      __IOM uint32_t LS3_OC_SEL : 1;            /*!< [19..19] Low-side driver 3 overcurrent shutdown select                    */
            uint32_t            : 1;
      __IOM uint32_t HS3_PWM    : 1;            /*!< [21..21] High-side driver 3 PWM enable                                    */
      __IOM uint32_t HS3_ON     : 1;            /*!< [22..22] High-side driver 3 on                                            */
      __IOM uint32_t HS3_OC_SEL : 1;            /*!< [23..23] High-side driver 3 overcurrent shutdown select                   */
      __IOM uint32_t HS1_DCS_EN : 1;            /*!< [24..24] High-side driver 1 diagnosis current source enable               */
      __IOM uint32_t HS2_DCS_EN : 1;            /*!< [25..25] High-side driver 2 diagnosis current source enable               */
      __IOM uint32_t HS3_DCS_EN : 1;            /*!< [26..26] High-side driver 3 diagnosis current source enable               */
            uint32_t            : 1;
      __IM  uint32_t SUPERR_STS : 1;            /*!< [28..28] Supply error status                                              */
            uint32_t            : 3;
    } bit;
  } CTRL1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000004) Bridge driver control 2                                    */
    
    struct {
      __IOM uint32_t HB1ONSEQCNF : 1;           /*!< [0..0] Half bridge 1 sequencer switch-on configuration                    */
      __IOM uint32_t HB1OFFSEQCNF : 1;          /*!< [1..1] Half bridge 1 sequencer switch-off configuration                   */
            uint32_t            : 2;
      __IOM uint32_t HB2ONSEQCNF : 1;           /*!< [4..4] Half bridge 2 sequencer switch-on configuration                    */
      __IOM uint32_t HB2OFFSEQCNF : 1;          /*!< [5..5] Half bridge 2 sequencer switch-off configuration                   */
            uint32_t            : 2;
      __IOM uint32_t HB3ONSEQCNF : 1;           /*!< [8..8] Half bridge 3 sequencer switch-on configuration                    */
      __IOM uint32_t HB3OFFSEQCNF : 1;          /*!< [9..9] Half bridge 3 sequencer switch-off configuration                   */
            uint32_t            : 2;
      __IOM uint32_t ACTDRV_DET_EN : 1;         /*!< [12..12] Detection of active / free-wheeling MOSFET                       */
            uint32_t            : 3;
      __IOM uint32_t DSMONVTH   : 3;            /*!< [18..16] Voltage threshold for drain-source monitoring of external
                                                     MOSFETs                                                                   */
            uint32_t            : 1;
      __IOM uint32_t LSDRV_DS_TFILT_SEL : 2;    /*!< [21..20] Filter time for drain-source monitoring of low-side
                                                     drivers                                                                   */
      __IOM uint32_t HSDRV_DS_TFILT_SEL : 2;    /*!< [23..22] Filter time for drain-source monitoring of high-side
                                                     drivers                                                                   */
      __IOM uint32_t LS_HS_BT_TFILT_SEL : 2;    /*!< [25..24] Blanking time for drain-source monitoring of low-side/high-side
                                                     drivers                                                                   */
            uint32_t            : 2;
      __IOM uint32_t DRV_CCP_TIMSEL : 3;        /*!< [30..28] Minimum cross-conduction protection time setting                 */
      __IOM uint32_t DRV_CCP_DIS : 1;           /*!< [31..31] Dynamic cross-conduction protection disable                      */
    } bit;
  } CTRL2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000008) PWM source selection                                       */
    
    struct {
      __IOM uint32_t LS1_SRC_SEL : 3;           /*!< [2..0] Low-side driver 1 PWM source selection                             */
            uint32_t            : 1;
      __IOM uint32_t HS1_SRC_SEL : 3;           /*!< [6..4] High-side driver 1 PWM source selection                            */
            uint32_t            : 1;
      __IOM uint32_t LS2_SRC_SEL : 3;           /*!< [10..8] Low-side driver 2 PWM source selection                            */
            uint32_t            : 1;
      __IOM uint32_t HS2_SRC_SEL : 3;           /*!< [14..12] High-side driver 2 PWM source selection                          */
            uint32_t            : 1;
      __IOM uint32_t LS3_SRC_SEL : 3;           /*!< [18..16] Low-side driver 3 PWM source selection                           */
            uint32_t            : 1;
      __IOM uint32_t HS3_SRC_SEL : 3;           /*!< [22..20] High-side driver 3 PWM source selection                          */
            uint32_t            : 9;
    } bit;
  } PWMSRCSEL;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000000C) Sequencer mapping                                          */
    
    struct {
      __IOM uint32_t HB1_SEQMAP : 1;            /*!< [0..0] Half bridge 1 sequencer mapping                                    */
      __IM  uint32_t HB1_ACTDRV : 1;            /*!< [1..1] Half bridge 1 active driver detected at switch-on                  */
            uint32_t            : 6;
      __IOM uint32_t HB2_SEQMAP : 1;            /*!< [8..8] Half bridge 2 sequencer mapping                                    */
      __IM  uint32_t HB2_ACTDRV : 1;            /*!< [9..9] Half bridge 2 active driver detected at switch-on                  */
            uint32_t            : 6;
      __IOM uint32_t HB3_SEQMAP : 1;            /*!< [16..16] Half bridge 3 sequencer mapping                                  */
      __IM  uint32_t HB3_ACTDRV : 1;            /*!< [17..17] Half bridge 3 active driver detected at switch-on                */
            uint32_t            : 14;
    } bit;
  } SEQMAP;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) Delay diagnosis timer                                      */
    
    struct {
      __IM  uint32_t DLY_DIAG_TIM : 10;         /*!< [9..0] External power MOSFET switch-on/-off timer result register         */
            uint32_t            : 6;
      __IOM uint32_t DLY_DIAG_CHSEL : 3;        /*!< [18..16] External power MOSFET switch-on/-off timer channel
                                                     select                                                                    */
      __IOM uint32_t DLY_DIAG_DIRSEL : 1;       /*!< [19..19] External power MOSFET timer on/off select                        */
            uint32_t            : 4;
      __IM  uint32_t DLY_DIAG_STS : 1;          /*!< [24..24] External power MOSFET switch-on/-off timer valid flag            */
      __OM  uint32_t DLY_DIAG_SCLR : 1;         /*!< [25..25] External power MOSFET switch-on/-off timer valid flag
                                                     clear                                                                     */
      __OM  uint32_t DLY_DIAG_SSET : 1;         /*!< [26..26] External power MOSFET switch-on/-off timer valid flag
                                                     set                                                                       */
            uint32_t            : 5;
    } bit;
  } DLY_DIAG;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000014) Charge pump control                                        */
    
    struct {
      __IOM uint32_t CP_EN      : 1;            /*!< [0..0] Charge pump enable                                                 */
            uint32_t            : 1;
      __IOM uint32_t CP_RDY_EN  : 1;            /*!< [2..2] Bridge driver on charge pump ready enable                          */
            uint32_t            : 5;
      __IOM uint32_t VCP_LOWTH2 : 1;            /*!< [8..8] Charge pump output voltage comparator falling threshold            */
      __IOM uint32_t VCP_LOWSRC_SEL : 1;        /*!< [9..9] Charge pump low voltage detection source select                    */
      __IOM uint32_t CPLOW_TFILT_SEL : 2;       /*!< [11..10] Filter time for charge pump voltage low diagnosis                */
            uint32_t            : 4;
      __IOM uint32_t CP_1STAGE  : 1;            /*!< [16..16] Charge pump 1-stage mode select                                  */
      __IOM uint32_t CP_STG_AUTO : 1;           /*!< [17..17] Automatic switch to 1-stage mode and back to 2-stage
                                                     mode depending on VSD                                                     */
            uint32_t            : 14;
    } bit;
  } CP_CTRL;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000018) Charge pump clock control                                  */
    
    struct {
      __IOM uint32_t DITH_LOWER : 5;            /*!< [4..0] CP clock divider boundary for lower frequency during
                                                     dithering                                                                 */
            uint32_t            : 3;
      __IOM uint32_t DITH_UPPER : 5;            /*!< [12..8] CP clock divider boundary for upper frequency during
                                                     dithering                                                                 */
      __IOM uint32_t F_CP       : 2;            /*!< [14..13] MSB of CP clock divider                                          */
            uint32_t            : 1;
      __IOM uint32_t CPCLK_EN   : 1;            /*!< [16..16] Charge pump clock enable                                         */
      __IOM uint32_t CPCLKDIS_SET : 1;          /*!< [17..17] Charge pump clock value if disabled                              */
            uint32_t            : 14;
    } bit;
  } CP_CLK_CTRL;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000001C) Protection function control                                */
    
    struct {
      __IOM uint32_t LS1DRV_HCDISCHG_DIS : 1;   /*!< [0..0] Low-side driver 1 high-current discharge disable                   */
      __IOM uint32_t LS1DRV_OCSDN_DIS : 1;      /*!< [1..1] Low-side driver 1 overcurrent shutdown disable                     */
            uint32_t            : 2;
      __IOM uint32_t HS1DRV_HCDISCHG_DIS : 1;   /*!< [4..4] High-side driver 1 high-current discharge disable                  */
      __IOM uint32_t HS1DRV_OCSDN_DIS : 1;      /*!< [5..5] High-side driver 1 overcurrent shutdown disable                    */
            uint32_t            : 2;
      __IOM uint32_t LS2DRV_HCDISCHG_DIS : 1;   /*!< [8..8] Low-side driver 2 high-current discharge disable                   */
      __IOM uint32_t LS2DRV_OCSDN_DIS : 1;      /*!< [9..9] Low-side driver 2 overcurrent shutdown disable                     */
            uint32_t            : 2;
      __IOM uint32_t HS2DRV_HCDISCHG_DIS : 1;   /*!< [12..12] High-side driver 2 high-current discharge disable                */
      __IOM uint32_t HS2DRV_OCSDN_DIS : 1;      /*!< [13..13] High-side driver 2 overcurrent shutdown disable                  */
            uint32_t            : 2;
      __IOM uint32_t LS3DRV_HCDISCHG_DIS : 1;   /*!< [16..16] Low-side driver 3 high-current discharge disable                 */
      __IOM uint32_t LS3DRV_OCSDN_DIS : 1;      /*!< [17..17] Low-side driver 3 overcurrent shutdown disable                   */
            uint32_t            : 2;
      __IOM uint32_t HS3DRV_HCDISCHG_DIS : 1;   /*!< [20..20] High-side driver 3 high-current discharge disable                */
      __IOM uint32_t HS3DRV_OCSDN_DIS : 1;      /*!< [21..21] High-side driver 3 overcurrent shutdown disable                  */
            uint32_t            : 2;
      __IOM uint32_t DRVx_VCPLO_SDEN : 1;       /*!< [24..24] Driver shutdown on charge pump low voltage                       */
      __IOM uint32_t DRVx_VCPLO_DIS : 1;        /*!< [25..25] Disable driver discharge on charge pump low voltage              */
      __IOM uint32_t DRVx_VCPUP_DIS : 1;        /*!< [26..26] Disable driver discharge on charge pump high voltage             */
      __IOM uint32_t DRVx_VSDLO_DIS : 1;        /*!< [27..27] Disable driver discharge on VSD low voltage                      */
      __IOM uint32_t DRVx_VSDUP_DIS : 1;        /*!< [28..28] Disable driver discharge on VSD high voltage                     */
            uint32_t            : 3;
    } bit;
  } PROT_CTRL;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000020) Bridge driver status                                       */
    
    struct {
      __IM  uint32_t LS1_OC_STS : 1;            /*!< [0..0] External low-side 1 MOSFET overcurrent status                      */
      __IM  uint32_t LS1_DS_STS : 1;            /*!< [1..1] Low-side driver 1 off-state drain source monitoring status         */
            uint32_t            : 2;
      __IM  uint32_t HS1_OC_STS : 1;            /*!< [4..4] External high-side 1 MOSFET overcurrent status                     */
      __IM  uint32_t HS1_DS_STS : 1;            /*!< [5..5] High-side driver 1 off-state drain source monitoring
                                                     status                                                                    */
      __IM  uint32_t SH1_LOW_STS : 1;           /*!< [6..6] SH1 voltage low comparator status                                  */
      __IM  uint32_t SH1_HIGH_STS : 1;          /*!< [7..7] SH1 voltage high comparator status                                 */
      __IM  uint32_t LS2_OC_STS : 1;            /*!< [8..8] External low-side 2 MOSFET overcurrent status                      */
      __IM  uint32_t LS2_DS_STS : 1;            /*!< [9..9] Low-side driver 2 off-state drain source monitoring status         */
            uint32_t            : 2;
      __IM  uint32_t HS2_OC_STS : 1;            /*!< [12..12] External high-side 2 MOSFET overcurrent status                   */
      __IM  uint32_t HS2_DS_STS : 1;            /*!< [13..13] High-side driver 2 off-state drain source monitoring
                                                     status                                                                    */
      __IM  uint32_t SH2_LOW_STS : 1;           /*!< [14..14] SH2 voltage low comparator status                                */
      __IM  uint32_t SH2_HIGH_STS : 1;          /*!< [15..15] SH2 voltage high comparator status                               */
      __IM  uint32_t LS3_OC_STS : 1;            /*!< [16..16] External low-side 3 MOSFET overcurrent status                    */
      __IM  uint32_t LS3_DS_STS : 1;            /*!< [17..17] Low-side driver 3 off-state drain source monitoring
                                                     status                                                                    */
            uint32_t            : 2;
      __IM  uint32_t HS3_OC_STS : 1;            /*!< [20..20] External high-side 3 MOSFET overcurrent status                   */
      __IM  uint32_t HS3_DS_STS : 1;            /*!< [21..21] High-side driver 3 off-state drain source monitoring
                                                     status                                                                    */
      __IM  uint32_t SH3_LOW_STS : 1;           /*!< [22..22] SH3 voltage low comparator status                                */
      __IM  uint32_t SH3_HIGH_STS : 1;          /*!< [23..23] SH3 voltage high comparator status                               */
      __IM  uint32_t CP_OTSD_STS : 1;           /*!< [24..24] Charge pump temperature measurement status                       */
      __IM  uint32_t VCP_LOTH1_STS : 1;         /*!< [25..25] VCP measurement low voltage status                               */
      __IM  uint32_t VCP_UPTH_STS : 1;          /*!< [26..26] VCP measurement high voltage status                              */
      __IM  uint32_t VSD_LOTH_STS : 1;          /*!< [27..27] VSD measurement low voltage status                               */
      __IM  uint32_t VSD_UPTH_STS : 1;          /*!< [28..28] VSD measurement high voltage status                              */
      __IM  uint32_t VSD_CP1ST_STS : 1;         /*!< [29..29] VSD measurement status for automatic CP stage selection          */
      __IM  uint32_t VSD_OV_STS : 1;            /*!< [30..30] VSD overvoltage comparator status                                */
      __IM  uint32_t VCP_LOTH2_STS : 1;         /*!< [31..31] Charge pump analog comparator low voltage status                 */
    } bit;
  } STS;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000024) Bridge driver status clear                                 */
    
    struct {
      __OM  uint32_t LS1_OC_SC  : 1;            /*!< [0..0] External low-side 1 MOSFET overcurrent status clear                */
      __OM  uint32_t LS1_DS_SC  : 1;            /*!< [1..1] Low-side driver 1 off-state drain source monitoring status
                                                     clear                                                                     */
            uint32_t            : 2;
      __OM  uint32_t HS1_OC_SC  : 1;            /*!< [4..4] External high-side 1 MOSFET overcurrent status clear               */
      __OM  uint32_t HS1_DS_SC  : 1;            /*!< [5..5] High-side driver 1 off-state drain source monitoring
                                                     status clear                                                              */
            uint32_t            : 2;
      __OM  uint32_t LS2_OC_SC  : 1;            /*!< [8..8] External low-side 2 MOSFET overcurrent status clear                */
      __OM  uint32_t LS2_DS_SC  : 1;            /*!< [9..9] Low-side driver 2 off-state drain source monitoring status
                                                     clear                                                                     */
            uint32_t            : 2;
      __OM  uint32_t HS2_OC_SC  : 1;            /*!< [12..12] External high-side 2 MOSFET overcurrent status clear             */
      __OM  uint32_t HS2_DS_SC  : 1;            /*!< [13..13] High-side driver 2 off-state drain source monitoring
                                                     status clear                                                              */
            uint32_t            : 2;
      __OM  uint32_t LS3_OC_SC  : 1;            /*!< [16..16] External low-side 3 MOSFET overcurrent status clear              */
      __OM  uint32_t LS3_DS_SC  : 1;            /*!< [17..17] Low-side driver 3 off-state drain source monitoring
                                                     status clear                                                              */
            uint32_t            : 2;
      __OM  uint32_t HS3_OC_SC  : 1;            /*!< [20..20] External high-side 3 MOSFET overcurrent status clear             */
      __OM  uint32_t HS3_DS_SC  : 1;            /*!< [21..21] High-side driver 3 off-state drain source monitoring
                                                     status clear                                                              */
            uint32_t            : 9;
      __OM  uint32_t VCP_LOTH2_SC : 1;          /*!< [31..31] Charge pump comparator low voltage status clear                  */
    } bit;
  } STSCLR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000028) Bridge driver status set                                   */
    
    struct {
      __OM  uint32_t LS1_OC_SS  : 1;            /*!< [0..0] External low-side 1 MOSFET overcurrent status set                  */
      __OM  uint32_t LS1_DS_SS  : 1;            /*!< [1..1] Low-side driver 1 off-state drain source monitoring status
                                                     set                                                                       */
            uint32_t            : 2;
      __OM  uint32_t HS1_OC_SS  : 1;            /*!< [4..4] External high-side 1 MOSFET overcurrent status set                 */
      __OM  uint32_t HS1_DS_SS  : 1;            /*!< [5..5] High-side driver 1 off-state drain source monitoring
                                                     status set                                                                */
            uint32_t            : 2;
      __OM  uint32_t LS2_OC_SS  : 1;            /*!< [8..8] External low-side 2 MOSFET overcurrent status set                  */
      __OM  uint32_t LS2_DS_SS  : 1;            /*!< [9..9] Low-side driver 2 off-state drain source monitoring status
                                                     set                                                                       */
            uint32_t            : 2;
      __OM  uint32_t HS2_OC_SS  : 1;            /*!< [12..12] External high-side 2 MOSFET overcurrent status set               */
      __OM  uint32_t HS2_DS_SS  : 1;            /*!< [13..13] High-side driver 2 off-state drain source monitoring
                                                     status set                                                                */
            uint32_t            : 2;
      __OM  uint32_t LS3_OC_SS  : 1;            /*!< [16..16] External low-side 3 MOSFET overcurrent status set                */
      __OM  uint32_t LS3_DS_SS  : 1;            /*!< [17..17] Low-side driver 3 off-state drain source monitoring
                                                     status set                                                                */
            uint32_t            : 2;
      __OM  uint32_t HS3_OC_SS  : 1;            /*!< [20..20] External high-side 3 MOSFET overcurrent status set               */
      __OM  uint32_t HS3_DS_SS  : 1;            /*!< [21..21] High-side driver 3 off-state drain source monitoring
                                                     status set                                                                */
            uint32_t            : 9;
      __OM  uint32_t VCP_LOTH2_SS : 1;          /*!< [31..31] Charge pump comparator low voltage status set                    */
    } bit;
  } STSSET;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x0000002C) Bridge driver interrupt status                             */
    
    struct {
      __IM  uint32_t LS1_OC_IS  : 1;            /*!< [0..0] External low-side 1 MOSFET overcurrent interrupt status            */
      __IM  uint32_t LS1_DS_IS  : 1;            /*!< [1..1] Low-side driver 1 off-state drain source monitoring interrupt
                                                     status                                                                    */
            uint32_t            : 2;
      __IM  uint32_t HS1_OC_IS  : 1;            /*!< [4..4] External high-side 1 MOSFET overcurrent interrupt status           */
      __IM  uint32_t HS1_DS_IS  : 1;            /*!< [5..5] High-side driver 1 off-state drain source monitoring
                                                     interrupt status                                                          */
            uint32_t            : 2;
      __IM  uint32_t LS2_OC_IS  : 1;            /*!< [8..8] External low-side 2 MOSFET overcurrent interrupt status            */
      __IM  uint32_t LS2_DS_IS  : 1;            /*!< [9..9] Low-side driver 2 off-state drain source monitoring interrupt
                                                     status                                                                    */
            uint32_t            : 2;
      __IM  uint32_t HS2_OC_IS  : 1;            /*!< [12..12] External high-side 2 MOSFET overcurrent interrupt status         */
      __IM  uint32_t HS2_DS_IS  : 1;            /*!< [13..13] High-side driver 2 off-state drain source monitoring
                                                     interrupt status                                                          */
            uint32_t            : 2;
      __IM  uint32_t LS3_OC_IS  : 1;            /*!< [16..16] External low-side 3 MOSFET overcurrent interrupt status          */
      __IM  uint32_t LS3_DS_IS  : 1;            /*!< [17..17] Low-side driver 3 off-state drain source monitoring
                                                     interrupt status                                                          */
            uint32_t            : 2;
      __IM  uint32_t HS3_OC_IS  : 1;            /*!< [20..20] External high-side 3 MOSFET overcurrent interrupt status         */
      __IM  uint32_t HS3_DS_IS  : 1;            /*!< [21..21] High-side driver 3 off-state drain source monitoring
                                                     interrupt status                                                          */
            uint32_t            : 2;
      __IM  uint32_t HB1_ASEQ_IS : 1;           /*!< [24..24] Half bridge 1 adaptive sequencer interrupt status                */
      __IM  uint32_t HB2_ASEQ_IS : 1;           /*!< [25..25] Half bridge 2 adaptive sequencer interrupt status                */
      __IM  uint32_t HB3_ASEQ_IS : 1;           /*!< [26..26] Half bridge 3 adaptive sequencer interrupt status                */
      __IM  uint32_t SEQ_ERR_IS : 1;            /*!< [27..27] Driver sequence error interrupt status                           */
      __IM  uint32_t HB1_ACTDRV_IS : 1;         /*!< [28..28] Half bridge 1 active driver detection interrupt status           */
      __IM  uint32_t HB2_ACTDRV_IS : 1;         /*!< [29..29] Half bridge 2 active driver detection interrupt status           */
      __IM  uint32_t HB3_ACTDRV_IS : 1;         /*!< [30..30] Half bridge 3 active driver detection interrupt status           */
      __IM  uint32_t VCP_LOTH2_IS : 1;          /*!< [31..31] Charge pump comparator low voltage interrupt status              */
    } bit;
  } IRQS;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000030) Bridge driver interrupt status clear                       */
    
    struct {
      __OM  uint32_t LS1_OC_ISC : 1;            /*!< [0..0] External low-side 1 MOSFET overcurrent interrupt status
                                                     clear                                                                     */
      __OM  uint32_t LS1_DS_ISC : 1;            /*!< [1..1] Low-side driver 1 off-state drain source monitoring interrupt
                                                     status clear                                                              */
            uint32_t            : 2;
      __OM  uint32_t HS1_OC_ISC : 1;            /*!< [4..4] External high-side 1 MOSFET overcurrent interrupt status
                                                     clear                                                                     */
      __OM  uint32_t HS1_DS_ISC : 1;            /*!< [5..5] High-side driver 1 off-state drain source monitoring
                                                     interrupt status clear                                                    */
            uint32_t            : 2;
      __OM  uint32_t LS2_OC_ISC : 1;            /*!< [8..8] External low-side 2 MOSFET overcurrent interrupt status
                                                     clear                                                                     */
      __OM  uint32_t LS2_DS_ISC : 1;            /*!< [9..9] Low-side driver 2 off-state drain source monitoring interrupt
                                                     status clear                                                              */
            uint32_t            : 2;
      __OM  uint32_t HS2_OC_ISC : 1;            /*!< [12..12] External high-side 2 MOSFET overcurrent interrupt status
                                                     clear                                                                     */
      __OM  uint32_t HS2_DS_ISC : 1;            /*!< [13..13] High-side driver 2 off-state drain source monitoring
                                                     interrupt status clear                                                    */
            uint32_t            : 2;
      __OM  uint32_t LS3_OC_ISC : 1;            /*!< [16..16] External low-side 3 MOSFET overcurrent interrupt status
                                                     clear                                                                     */
      __OM  uint32_t LS3_DS_ISC : 1;            /*!< [17..17] Low-side driver 3 off-state drain source monitoring
                                                     interrupt status clear                                                    */
            uint32_t            : 2;
      __OM  uint32_t HS3_OC_ISC : 1;            /*!< [20..20] External high-side 3 MOSFET overcurrent interrupt status
                                                     clear                                                                     */
      __OM  uint32_t HS3_DS_ISC : 1;            /*!< [21..21] High-side driver 3 off-state drain source monitoring
                                                     interrupt status clear                                                    */
            uint32_t            : 2;
      __OM  uint32_t HB1_ASEQ_ISC : 1;          /*!< [24..24] Half bridge 1 adaptive sequencer interrupt status clear          */
      __OM  uint32_t HB2_ASEQ_ISC : 1;          /*!< [25..25] Half bridge 2 adaptive sequencer interrupt status clear          */
      __OM  uint32_t HB3_ASEQ_ISC : 1;          /*!< [26..26] Half bridge 3 adaptive sequencer interrupt status clear          */
      __OM  uint32_t SEQ_ERR_ISC : 1;           /*!< [27..27] Driver sequence error interrupt status clear                     */
      __OM  uint32_t HB1_ACTDRV_ISC : 1;        /*!< [28..28] Half bridge 1 active driver detection interrupt status
                                                     clear                                                                     */
      __OM  uint32_t HB2_ACTDRV_ISC : 1;        /*!< [29..29] Half bridge 2 active driver detection interrupt status
                                                     clear                                                                     */
      __OM  uint32_t HB3_ACTDRV_ISC : 1;        /*!< [30..30] Half bridge 3 active driver detection interrupt status
                                                     clear                                                                     */
      __OM  uint32_t VCP_LOTH2_ISC : 1;         /*!< [31..31] Charge pump comparator low voltage interrupt status
                                                     clear                                                                     */
    } bit;
  } IRQCLR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000034) Bridge driver interrupt status set                         */
    
    struct {
      __OM  uint32_t LS1_OC_ISS : 1;            /*!< [0..0] External low-side 1 MOSFET overcurrent interrupt status
                                                     set                                                                       */
      __OM  uint32_t LS1_DS_ISS : 1;            /*!< [1..1] Low-side driver 1 off-state drain source monitoring interrupt
                                                     status set                                                                */
            uint32_t            : 2;
      __OM  uint32_t HS1_OC_ISS : 1;            /*!< [4..4] External high-side 1 MOSFET overcurrent interrupt status
                                                     set                                                                       */
      __OM  uint32_t HS1_DS_ISS : 1;            /*!< [5..5] High-side driver 1 off-state drain source monitoring
                                                     interrupt status set                                                      */
            uint32_t            : 2;
      __OM  uint32_t LS2_OC_ISS : 1;            /*!< [8..8] External low-side 2 MOSFET overcurrent interrupt status
                                                     set                                                                       */
      __OM  uint32_t LS2_DS_ISS : 1;            /*!< [9..9] Low-side driver 2 off-state drain source monitoring interrupt
                                                     status set                                                                */
            uint32_t            : 2;
      __OM  uint32_t HS2_OC_ISS : 1;            /*!< [12..12] External high-side 2 MOSFET overcurrent interrupt status
                                                     set                                                                       */
      __OM  uint32_t HS2_DS_ISS : 1;            /*!< [13..13] High-side driver 2 off-state drain source monitoring
                                                     interrupt status set                                                      */
            uint32_t            : 2;
      __OM  uint32_t LS3_OC_ISS : 1;            /*!< [16..16] External low-side 3 MOSFET overcurrent interrupt status
                                                     set                                                                       */
      __OM  uint32_t LS3_DS_ISS : 1;            /*!< [17..17] Low-side driver 3 off-state drain source monitoring
                                                     interrupt status set                                                      */
            uint32_t            : 2;
      __OM  uint32_t HS3_OC_ISS : 1;            /*!< [20..20] External high-side 3 MOSFET overcurrent interrupt status
                                                     set                                                                       */
      __OM  uint32_t HS3_DS_ISS : 1;            /*!< [21..21] High-side driver 3 off-state drain source monitoring
                                                     interrupt status set                                                      */
            uint32_t            : 2;
      __OM  uint32_t HB1_ASEQ_ISS : 1;          /*!< [24..24] Half bridge 1 adaptive sequencer interrupt status set            */
      __OM  uint32_t HB2_ASEQ_ISS : 1;          /*!< [25..25] Half bridge 2 adaptive sequencer interrupt status set            */
      __OM  uint32_t HB3_ASEQ_ISS : 1;          /*!< [26..26] Half bridge 3 adaptive sequencer interrupt status set            */
      __OM  uint32_t SEQ_ERR_ISS : 1;           /*!< [27..27] Driver sequence error interrupt status set                       */
      __OM  uint32_t HB1_ACTDRV_ISS : 1;        /*!< [28..28] Half bridge 1 active driver detection interrupt status
                                                     set                                                                       */
      __OM  uint32_t HB2_ACTDRV_ISS : 1;        /*!< [29..29] Half bridge 2 active driver detection interrupt status
                                                     set                                                                       */
      __OM  uint32_t HB3_ACTDRV_ISS : 1;        /*!< [30..30] Half bridge 3 active driver detection interrupt status
                                                     set                                                                       */
      __OM  uint32_t VCP_LOTH2_ISS : 1;         /*!< [31..31] Charge pump comparator low voltage interrupt status
                                                     set                                                                       */
    } bit;
  } IRQSET;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000038) Bridge driver interrupt enable                             */
    
    struct {
      __IOM uint32_t LS1_OC_IEN : 1;            /*!< [0..0] External low-side 1 MOSFET overcurrent interrupt enable            */
      __IOM uint32_t LS1_DS_IEN : 1;            /*!< [1..1] Low-side driver 1 off-state drain source monitoring interrupt
                                                     enable                                                                    */
            uint32_t            : 2;
      __IOM uint32_t HS1_OC_IEN : 1;            /*!< [4..4] External high-side 1 MOSFET overcurrent interrupt enable           */
      __IOM uint32_t HS1_DS_IEN : 1;            /*!< [5..5] High-side driver 1 off-state drain source monitoring
                                                     interrupt enable                                                          */
            uint32_t            : 2;
      __IOM uint32_t LS2_OC_IEN : 1;            /*!< [8..8] External low-side 2 MOSFET overcurrent interrupt enable            */
      __IOM uint32_t LS2_DS_IEN : 1;            /*!< [9..9] Low-side driver 2 off-state drain source monitoring interrupt
                                                     enable                                                                    */
            uint32_t            : 2;
      __IOM uint32_t HS2_OC_IEN : 1;            /*!< [12..12] External high-side 2 MOSFET overcurrent interrupt enable         */
      __IOM uint32_t HS2_DS_IEN : 1;            /*!< [13..13] High-side driver 2 off-state drain source monitoring
                                                     interrupt enable                                                          */
            uint32_t            : 2;
      __IOM uint32_t LS3_OC_IEN : 1;            /*!< [16..16] External low-side 3 MOSFET overcurrent interrupt enable          */
      __IOM uint32_t LS3_DS_IEN : 1;            /*!< [17..17] Low-side driver 3 off-state drain source monitoring
                                                     interrupt enable                                                          */
            uint32_t            : 2;
      __IOM uint32_t HS3_OC_IEN : 1;            /*!< [20..20] External high-side 3 MOSFET overcurrent interrupt enable         */
      __IOM uint32_t HS3_DS_IEN : 1;            /*!< [21..21] High-side driver 3 off-state drain source monitoring
                                                     interrupt enable                                                          */
            uint32_t            : 2;
      __IOM uint32_t HB1_ASEQ_IEN : 1;          /*!< [24..24] Half bridge 1 adaptive sequencer interrupt enable                */
      __IOM uint32_t HB2_ASEQ_IEN : 1;          /*!< [25..25] Half bridge 2 adaptive sequencer interrupt enable                */
      __IOM uint32_t HB3_ASEQ_IEN : 1;          /*!< [26..26] Half bridge 3 adaptive sequencer interrupt enable                */
      __IOM uint32_t SEQ_ERR_IEN : 1;           /*!< [27..27] Driver sequence error interrupt enable                           */
      __IOM uint32_t HB1_ACTDRV_IEN : 1;        /*!< [28..28] Half bridge 1 active driver detection interrupt enable           */
      __IOM uint32_t HB2_ACTDRV_IEN : 1;        /*!< [29..29] Half bridge 2 active driver detection interrupt enable           */
      __IOM uint32_t HB3_ACTDRV_IEN : 1;        /*!< [30..30] Half bridge 3 active driver detection interrupt enable           */
      __IOM uint32_t VCP_LOTH2_IEN : 1;         /*!< [31..31] Charge pump comparator low voltage interrupt enable              */
    } bit;
  } IRQEN;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000003C) Half bridge 1 gate current clamping value                  */
    
    struct {
      __IOM uint32_t HB1_ICLMPON : 6;           /*!< [5..0] Half bridge 1 current clamping value for on state                  */
            uint32_t            : 2;
      __IOM uint32_t HB1_ICLMPOFF : 6;          /*!< [13..8] Half bridge 1 current clamping value for off state                */
            uint32_t            : 18;
    } bit;
  } HB1IGATECLMPC;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000040) Half bridge 2 gate current clamping value                  */
    
    struct {
      __IOM uint32_t HB2_ICLMPON : 6;           /*!< [5..0] Half bridge 2 current clamping value for on state                  */
            uint32_t            : 2;
      __IOM uint32_t HB2_ICLMPOFF : 6;          /*!< [13..8] Half bridge 2 current clamping value for off state                */
            uint32_t            : 18;
    } bit;
  } HB2IGATECLMPC;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000044) Half bridge 3 gate current clamping value                  */
    
    struct {
      __IOM uint32_t HB3_ICLMPON : 6;           /*!< [5..0] Half bridge 3 current clamping value for on state                  */
            uint32_t            : 2;
      __IOM uint32_t HB3_ICLMPOFF : 6;          /*!< [13..8] Half bridge 3 current clamping value for off state                */
            uint32_t            : 18;
    } bit;
  } HB3IGATECLMPC;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000048) Low-side driver 1 active free-wheeling time control        */
    
    struct {
      __IOM uint32_t LS1_TAFOFF : 8;            /*!< [7..0] Low-side driver 1 active free-wheeling switch-off time
                                                     setting                                                                   */
      __IOM uint32_t LS1_TAFON  : 8;            /*!< [15..8] Low-side driver 1 active free-wheeling switch-on time
                                                     setting                                                                   */
            uint32_t            : 16;
    } bit;
  } LS1AFTC;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000004C) Low-side driver 1 active free-wheeling current
                                                                    control                                                    */
    
    struct {
      __IOM uint32_t LS1_IAFOFF : 6;            /*!< [5..0] Low-side driver 1 active free-wheeling switch-off current
                                                     setting                                                                   */
            uint32_t            : 2;
      __IOM uint32_t LS1_IAFON  : 6;            /*!< [13..8] Low-side driver 1 active free-wheeling switch-on current
                                                     setting                                                                   */
            uint32_t            : 18;
    } bit;
  } LS1AFIC;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000050) High-side driver 1 active free-wheeling time
                                                                    control                                                    */
    
    struct {
      __IOM uint32_t HS1_TAFOFF : 8;            /*!< [7..0] High-side driver 1 active free-wheeling switch-off time
                                                     setting                                                                   */
      __IOM uint32_t HS1_TAFON  : 8;            /*!< [15..8] High-side driver 1 active free-wheeling switch-on time
                                                     setting                                                                   */
            uint32_t            : 16;
    } bit;
  } HS1AFTC;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000054) High-side driver 1 active free-wheeling current
                                                                    control                                                    */
    
    struct {
      __IOM uint32_t HS1_IAFOFF : 6;            /*!< [5..0] High-side driver 1 active free-wheeling switch-off current
                                                     setting                                                                   */
            uint32_t            : 2;
      __IOM uint32_t HS1_IAFON  : 6;            /*!< [13..8] High-side driver 1 active free-wheeling switch-on current
                                                     setting                                                                   */
            uint32_t            : 18;
    } bit;
  } HS1AFIC;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000058) Low-side driver 1 switch-off time control                  */
    
    struct {
      __IOM uint32_t LS1_T1OFF  : 8;            /*!< [7..0] Low-side driver 1 sequencer switch-off phase 1 and constant
                                                     switch-off time setting                                                   */
      __IOM uint32_t LS1_T2OFF  : 6;            /*!< [13..8] Low-side driver 1 sequencer switch-off phase 2 time
                                                     setting                                                                   */
            uint32_t            : 2;
      __IOM uint32_t LS1_T3OFF  : 6;            /*!< [21..16] Low-side driver 1 sequencer switch-off phase 3 time
                                                     setting                                                                   */
            uint32_t            : 10;
    } bit;
  } LS1SEQOFFTC;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000005C) Low-side driver 1 switch-off current control               */
    
    struct {
      __IOM uint32_t LS1_I1OFF  : 6;            /*!< [5..0] Low-side driver 1 sequencer switch-off phase 1 and constant
                                                     switch-off current setting                                                */
            uint32_t            : 2;
      __IOM uint32_t LS1_I2OFF  : 6;            /*!< [13..8] Low-side driver 1 sequencer switch-off phase 2 current
                                                     setting                                                                   */
            uint32_t            : 2;
      __IOM uint32_t LS1_I3OFF  : 6;            /*!< [21..16] Low-side driver 1 sequencer switch-off phase 3 current
                                                     setting                                                                   */
            uint32_t            : 10;
    } bit;
  } LS1SEQOFFIC;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000060) Low-side driver 1 switch-on time control                   */
    
    struct {
      __IOM uint32_t LS1_T1ON   : 8;            /*!< [7..0] Low-side driver 1 sequencer switch-on phase 1 and constant
                                                     switch-on time setting                                                    */
      __IOM uint32_t LS1_T2ON   : 6;            /*!< [13..8] Low-side driver 1 sequencer switch-on phase 2 time setting        */
            uint32_t            : 2;
      __IOM uint32_t LS1_T3ON   : 6;            /*!< [21..16] Low-side driver 1 sequencer switch-on phase 3 time
                                                     setting                                                                   */
            uint32_t            : 2;
      __IOM uint32_t LS1_T4ON   : 6;            /*!< [29..24] Low-side driver 1 sequencer switch-on phase 4 time
                                                     setting                                                                   */
            uint32_t            : 2;
    } bit;
  } LS1SEQONTC;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000064) Low-side driver 1 switch-on current control                */
    
    struct {
      __IOM uint32_t LS1_I1ON   : 6;            /*!< [5..0] Low-side driver 1 sequencer switch-on phase 1 and constant
                                                     switch-on current setting                                                 */
            uint32_t            : 2;
      __IOM uint32_t LS1_I2ON   : 6;            /*!< [13..8] Low-side driver 1 sequencer switch-on phase 2 current
                                                     setting                                                                   */
            uint32_t            : 2;
      __IOM uint32_t LS1_I3ON   : 6;            /*!< [21..16] Low-side driver 1 sequencer switch-on phase 3 current
                                                     setting                                                                   */
            uint32_t            : 2;
      __IOM uint32_t LS1_I4ON   : 6;            /*!< [29..24] Low-side driver 1 sequencer switch-on phase 4 current
                                                     setting                                                                   */
            uint32_t            : 2;
    } bit;
  } LS1SEQONIC;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000068) High-side driver 1 switch-off time control                 */
    
    struct {
      __IOM uint32_t HS1_T1OFF  : 8;            /*!< [7..0] High-side driver 1 sequencer switch-off phase 1 and constant
                                                     switch-off time setting                                                   */
      __IOM uint32_t HS1_T2OFF  : 6;            /*!< [13..8] High-side driver 1 sequencer switch-off phase 2 time
                                                     setting                                                                   */
            uint32_t            : 2;
      __IOM uint32_t HS1_T3OFF  : 6;            /*!< [21..16] High-side driver 1 sequencer switch-off phase 3 time
                                                     setting                                                                   */
            uint32_t            : 10;
    } bit;
  } HS1SEQOFFTC;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000006C) High-side driver 1 switch-off current control              */
    
    struct {
      __IOM uint32_t HS1_I1OFF  : 6;            /*!< [5..0] High-side driver 1 sequencer switch-off phase 1 and constant
                                                     switch-off current setting                                                */
            uint32_t            : 2;
      __IOM uint32_t HS1_I2OFF  : 6;            /*!< [13..8] High-side driver 1 sequencer switch-off phase 2 current
                                                     setting                                                                   */
            uint32_t            : 2;
      __IOM uint32_t HS1_I3OFF  : 6;            /*!< [21..16] High-side driver 1 sequencer switch-off phase 3 current
                                                     setting                                                                   */
            uint32_t            : 10;
    } bit;
  } HS1SEQOFFIC;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000070) High-side driver 1 switch-on time control                  */
    
    struct {
      __IOM uint32_t HS1_T1ON   : 8;            /*!< [7..0] High-side driver 1 sequencer switch-on phase 1 and constant
                                                     switch-on time setting                                                    */
      __IOM uint32_t HS1_T2ON   : 6;            /*!< [13..8] High-side driver 1 sequencer switch-on phase 2 time
                                                     setting                                                                   */
            uint32_t            : 2;
      __IOM uint32_t HS1_T3ON   : 6;            /*!< [21..16] High-side driver 1 sequencer switch-on phase 3 time
                                                     setting                                                                   */
            uint32_t            : 2;
      __IOM uint32_t HS1_T4ON   : 6;            /*!< [29..24] High-side driver 1 sequencer switch-on phase 4 time
                                                     setting                                                                   */
            uint32_t            : 2;
    } bit;
  } HS1SEQONTC;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000074) High-side driver 1 switch-on current control               */
    
    struct {
      __IOM uint32_t HS1_I1ON   : 6;            /*!< [5..0] High-side driver 1 sequencer switch-on phase 1 and constant
                                                     switch-on current setting                                                 */
            uint32_t            : 2;
      __IOM uint32_t HS1_I2ON   : 6;            /*!< [13..8] High-side driver 1 sequencer switch-on phase 2 current
                                                     setting                                                                   */
            uint32_t            : 2;
      __IOM uint32_t HS1_I3ON   : 6;            /*!< [21..16] High-side driver 1 sequencer switch-on phase 3 current
                                                     setting                                                                   */
            uint32_t            : 2;
      __IOM uint32_t HS1_I4ON   : 6;            /*!< [29..24] High-side driver 1 sequencer switch-on phase 4 current
                                                     setting                                                                   */
            uint32_t            : 2;
    } bit;
  } HS1SEQONIC;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000078) Low-side driver 2 active free-wheeling time control        */
    
    struct {
      __IOM uint32_t LS2_TAFOFF : 8;            /*!< [7..0] Low-side driver 2 active free-wheeling switch-off time
                                                     setting                                                                   */
      __IOM uint32_t LS2_TAFON  : 8;            /*!< [15..8] Low-side driver 2 active free-wheeling switch-on time
                                                     setting                                                                   */
            uint32_t            : 16;
    } bit;
  } LS2AFTC;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000007C) Low-side driver 2 active free-wheeling current
                                                                    control                                                    */
    
    struct {
      __IOM uint32_t LS2_IAFOFF : 6;            /*!< [5..0] Low-side driver 2 active free-wheeling switch-off current
                                                     setting                                                                   */
            uint32_t            : 2;
      __IOM uint32_t LS2_IAFON  : 6;            /*!< [13..8] Low-side driver 2 active free-wheeling switch-on current
                                                     setting                                                                   */
            uint32_t            : 18;
    } bit;
  } LS2AFIC;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000080) High-side driver 2 active free-wheeling time
                                                                    control                                                    */
    
    struct {
      __IOM uint32_t HS2_TAFOFF : 8;            /*!< [7..0] High-side driver 2 active free-wheeling switch-off time
                                                     setting                                                                   */
      __IOM uint32_t HS2_TAFON  : 8;            /*!< [15..8] High-side driver 2 active free-wheeling switch-on time
                                                     setting                                                                   */
            uint32_t            : 16;
    } bit;
  } HS2AFTC;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000084) High-side driver 2 active free-wheeling current
                                                                    control                                                    */
    
    struct {
      __IOM uint32_t HS2_IAFOFF : 6;            /*!< [5..0] High-side driver 2 active free-wheeling switch-off current
                                                     setting                                                                   */
            uint32_t            : 2;
      __IOM uint32_t HS2_IAFON  : 6;            /*!< [13..8] High-side driver 2 active free-wheeling switch-on current
                                                     setting                                                                   */
            uint32_t            : 18;
    } bit;
  } HS2AFIC;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000088) Low-side driver 2 switch-off time control                  */
    
    struct {
      __IOM uint32_t LS2_T1OFF  : 8;            /*!< [7..0] Low-side driver 2 sequencer switch-off phase 1 and constant
                                                     switch-off time setting                                                   */
      __IOM uint32_t LS2_T2OFF  : 6;            /*!< [13..8] Low-side driver 2 sequencer switch-off phase 2 time
                                                     setting                                                                   */
            uint32_t            : 2;
      __IOM uint32_t LS2_T3OFF  : 6;            /*!< [21..16] Low-side driver 2 sequencer switch-off phase 3 time
                                                     setting                                                                   */
            uint32_t            : 10;
    } bit;
  } LS2SEQOFFTC;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000008C) Low-side driver 2 switch-off current control               */
    
    struct {
      __IOM uint32_t LS2_I1OFF  : 6;            /*!< [5..0] Low-side driver 2 sequencer switch-off phase 1 and constant
                                                     switch-off current setting                                                */
            uint32_t            : 2;
      __IOM uint32_t LS2_I2OFF  : 6;            /*!< [13..8] Low-side driver 2 sequencer switch-off phase 2 current
                                                     setting                                                                   */
            uint32_t            : 2;
      __IOM uint32_t LS2_I3OFF  : 6;            /*!< [21..16] Low-side driver 2 sequencer switch-off phase 3 current
                                                     setting                                                                   */
            uint32_t            : 10;
    } bit;
  } LS2SEQOFFIC;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000090) Low-side driver 2 switch-on time control                   */
    
    struct {
      __IOM uint32_t LS2_T1ON   : 8;            /*!< [7..0] Low-side driver 2 sequencer switch-on phase 1 and constant
                                                     switch-on time setting                                                    */
      __IOM uint32_t LS2_T2ON   : 6;            /*!< [13..8] Low-side driver 2 sequencer switch-on phase 2 time setting        */
            uint32_t            : 2;
      __IOM uint32_t LS2_T3ON   : 6;            /*!< [21..16] Low-side driver 2 sequencer switch-on phase 3 time
                                                     setting                                                                   */
            uint32_t            : 2;
      __IOM uint32_t LS2_T4ON   : 6;            /*!< [29..24] Low-side driver 2 sequencer switch-on phase 4 time
                                                     setting                                                                   */
            uint32_t            : 2;
    } bit;
  } LS2SEQONTC;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000094) Low-side driver 2 switch-on current control                */
    
    struct {
      __IOM uint32_t LS2_I1ON   : 6;            /*!< [5..0] Low-side driver 2 sequencer switch-on phase 1 and constant
                                                     switch-on current setting                                                 */
            uint32_t            : 2;
      __IOM uint32_t LS2_I2ON   : 6;            /*!< [13..8] Low-side driver 2 sequencer switch-on phase 2 current
                                                     setting                                                                   */
            uint32_t            : 2;
      __IOM uint32_t LS2_I3ON   : 6;            /*!< [21..16] Low-side driver 2 sequencer switch-on phase 3 current
                                                     setting                                                                   */
            uint32_t            : 2;
      __IOM uint32_t LS2_I4ON   : 6;            /*!< [29..24] Low-side driver 2 sequencer switch-on phase 4 current
                                                     setting                                                                   */
            uint32_t            : 2;
    } bit;
  } LS2SEQONIC;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000098) High-side driver 2 switch-off time control                 */
    
    struct {
      __IOM uint32_t HS2_T1OFF  : 8;            /*!< [7..0] High-side driver 2 sequencer switch-off phase 1 and constant
                                                     switch-off time setting                                                   */
      __IOM uint32_t HS2_T2OFF  : 6;            /*!< [13..8] High-side driver 2 sequencer switch-off phase 2 time
                                                     setting                                                                   */
            uint32_t            : 2;
      __IOM uint32_t HS2_T3OFF  : 6;            /*!< [21..16] High-side driver 2 sequencer switch-off phase 3 time
                                                     setting                                                                   */
            uint32_t            : 10;
    } bit;
  } HS2SEQOFFTC;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000009C) High-side driver 2 switch-off current control              */
    
    struct {
      __IOM uint32_t HS2_I1OFF  : 6;            /*!< [5..0] High-side driver 2 sequencer switch-off phase 1 and constant
                                                     switch-off current setting                                                */
            uint32_t            : 2;
      __IOM uint32_t HS2_I2OFF  : 6;            /*!< [13..8] High-side driver 2 sequencer switch-off phase 2 current
                                                     setting                                                                   */
            uint32_t            : 2;
      __IOM uint32_t HS2_I3OFF  : 6;            /*!< [21..16] High-side driver 2 sequencer switch-off phase 3 current
                                                     setting                                                                   */
            uint32_t            : 10;
    } bit;
  } HS2SEQOFFIC;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000A0) High-side driver 2 switch-on time control                  */
    
    struct {
      __IOM uint32_t HS2_T1ON   : 8;            /*!< [7..0] High-side driver 2 sequencer switch-on phase 1 and constant
                                                     switch-on time setting                                                    */
      __IOM uint32_t HS2_T2ON   : 6;            /*!< [13..8] High-side driver 2 sequencer switch-on phase 2 time
                                                     setting                                                                   */
            uint32_t            : 2;
      __IOM uint32_t HS2_T3ON   : 6;            /*!< [21..16] High-side driver 2 sequencer switch-on phase 3 time
                                                     setting                                                                   */
            uint32_t            : 2;
      __IOM uint32_t HS2_T4ON   : 6;            /*!< [29..24] High-side driver 2 sequencer switch-on phase 4 time
                                                     setting                                                                   */
            uint32_t            : 2;
    } bit;
  } HS2SEQONTC;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000A4) High-side driver 2 switch-on current control               */
    
    struct {
      __IOM uint32_t HS2_I1ON   : 6;            /*!< [5..0] High-side driver 2 sequencer switch-on phase 1 and constant
                                                     switch-on current setting                                                 */
            uint32_t            : 2;
      __IOM uint32_t HS2_I2ON   : 6;            /*!< [13..8] High-side driver 2 sequencer switch-on phase 2 current
                                                     setting                                                                   */
            uint32_t            : 2;
      __IOM uint32_t HS2_I3ON   : 6;            /*!< [21..16] High-side driver 2 sequencer switch-on phase 3 current
                                                     setting                                                                   */
            uint32_t            : 2;
      __IOM uint32_t HS2_I4ON   : 6;            /*!< [29..24] High-side driver 2 sequencer switch-on phase 4 current
                                                     setting                                                                   */
            uint32_t            : 2;
    } bit;
  } HS2SEQONIC;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000A8) Low-side driver 3 active free-wheeling time control        */
    
    struct {
      __IOM uint32_t LS3_TAFOFF : 8;            /*!< [7..0] Low-side driver 3 active free-wheeling switch-off time
                                                     setting                                                                   */
      __IOM uint32_t LS3_TAFON  : 8;            /*!< [15..8] Low-side driver 3 active free-wheeling switch-on time
                                                     setting                                                                   */
            uint32_t            : 16;
    } bit;
  } LS3AFTC;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000AC) Low-side driver 3 active free-wheeling current
                                                                    control                                                    */
    
    struct {
      __IOM uint32_t LS3_IAFOFF : 6;            /*!< [5..0] Low-side driver 3 active free-wheeling switch-off current
                                                     setting                                                                   */
            uint32_t            : 2;
      __IOM uint32_t LS3_IAFON  : 6;            /*!< [13..8] Low-side driver 3 active free-wheeling switch-on current
                                                     setting                                                                   */
            uint32_t            : 18;
    } bit;
  } LS3AFIC;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000B0) High-side driver 3 active free-wheeling time
                                                                    control                                                    */
    
    struct {
      __IOM uint32_t HS3_TAFOFF : 8;            /*!< [7..0] High-side driver 3 active free-wheeling switch-off time
                                                     setting                                                                   */
      __IOM uint32_t HS3_TAFON  : 8;            /*!< [15..8] High-side driver 3 active free-wheeling switch-on time
                                                     setting                                                                   */
            uint32_t            : 16;
    } bit;
  } HS3AFTC;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000B4) High-side driver 3 active free-wheeling current
                                                                    control                                                    */
    
    struct {
      __IOM uint32_t HS3_IAFOFF : 6;            /*!< [5..0] High-side driver 3 active free-wheeling switch-off current
                                                     setting                                                                   */
            uint32_t            : 2;
      __IOM uint32_t HS3_IAFON  : 6;            /*!< [13..8] High-side driver 3 active free-wheeling switch-on current
                                                     setting                                                                   */
            uint32_t            : 18;
    } bit;
  } HS3AFIC;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000B8) Low-side driver 3 switch-off time control                  */
    
    struct {
      __IOM uint32_t LS3_T1OFF  : 8;            /*!< [7..0] Low-side driver 3 sequencer switch-off phase 1 and constant
                                                     switch-off time setting                                                   */
      __IOM uint32_t LS3_T2OFF  : 6;            /*!< [13..8] Low-side driver 3 sequencer switch-off phase 2 time
                                                     setting                                                                   */
            uint32_t            : 2;
      __IOM uint32_t LS3_T3OFF  : 6;            /*!< [21..16] Low-side driver 3 sequencer switch-off phase 3 time
                                                     setting                                                                   */
            uint32_t            : 10;
    } bit;
  } LS3SEQOFFTC;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000BC) Low-side driver 3 switch-off current control               */
    
    struct {
      __IOM uint32_t LS3_I1OFF  : 6;            /*!< [5..0] Low-side driver 3 sequencer switch-off phase 1 and constant
                                                     switch-off current setting                                                */
            uint32_t            : 2;
      __IOM uint32_t LS3_I2OFF  : 6;            /*!< [13..8] Low-side driver 3 sequencer switch-off phase 2 current
                                                     setting                                                                   */
            uint32_t            : 2;
      __IOM uint32_t LS3_I3OFF  : 6;            /*!< [21..16] Low-side driver 3 sequencer switch-off phase 3 current
                                                     setting                                                                   */
            uint32_t            : 10;
    } bit;
  } LS3SEQOFFIC;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000C0) Low-side driver 3 switch-on time control                   */
    
    struct {
      __IOM uint32_t LS3_T1ON   : 8;            /*!< [7..0] Low-side driver 3 sequencer switch-on phase 1 and constant
                                                     switch-on time setting                                                    */
      __IOM uint32_t LS3_T2ON   : 6;            /*!< [13..8] Low-side driver 3 sequencer switch-on phase 2 time setting        */
            uint32_t            : 2;
      __IOM uint32_t LS3_T3ON   : 6;            /*!< [21..16] Low-side driver 3 sequencer switch-on phase 3 time
                                                     setting                                                                   */
            uint32_t            : 2;
      __IOM uint32_t LS3_T4ON   : 6;            /*!< [29..24] Low-side driver 3 sequencer switch-on phase 4 time
                                                     setting                                                                   */
            uint32_t            : 2;
    } bit;
  } LS3SEQONTC;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000C4) Low-side driver 3 switch-on current control                */
    
    struct {
      __IOM uint32_t LS3_I1ON   : 6;            /*!< [5..0] Low-side driver 3 sequencer switch-on phase 1 and constant
                                                     switch-on current setting                                                 */
            uint32_t            : 2;
      __IOM uint32_t LS3_I2ON   : 6;            /*!< [13..8] Low-side driver 3 sequencer switch-on phase 2 current
                                                     setting                                                                   */
            uint32_t            : 2;
      __IOM uint32_t LS3_I3ON   : 6;            /*!< [21..16] Low-side driver 3 sequencer switch-on phase 3 current
                                                     setting                                                                   */
            uint32_t            : 2;
      __IOM uint32_t LS3_I4ON   : 6;            /*!< [29..24] Low-side driver 3 sequencer switch-on phase 4 current
                                                     setting                                                                   */
            uint32_t            : 2;
    } bit;
  } LS3SEQONIC;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000C8) High-side driver 3 switch-off time control                 */
    
    struct {
      __IOM uint32_t HS3_T1OFF  : 8;            /*!< [7..0] High-side driver 3 sequencer switch-off phase 1 and constant
                                                     switch-off time setting                                                   */
      __IOM uint32_t HS3_T2OFF  : 6;            /*!< [13..8] High-side driver 3 sequencer switch-off phase 2 time
                                                     setting                                                                   */
            uint32_t            : 2;
      __IOM uint32_t HS3_T3OFF  : 6;            /*!< [21..16] High-side driver 3 sequencer switch-off phase 3 time
                                                     setting                                                                   */
            uint32_t            : 10;
    } bit;
  } HS3SEQOFFTC;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000CC) High-side driver 3 switch-off current control              */
    
    struct {
      __IOM uint32_t HS3_I1OFF  : 6;            /*!< [5..0] High-side driver 3 sequencer switch-off phase 1 and constant
                                                     switch-off current setting                                                */
            uint32_t            : 2;
      __IOM uint32_t HS3_I2OFF  : 6;            /*!< [13..8] High-side driver 3 sequencer switch-off phase 2 current
                                                     setting                                                                   */
            uint32_t            : 2;
      __IOM uint32_t HS3_I3OFF  : 6;            /*!< [21..16] High-side driver 3 sequencer switch-off phase 3 current
                                                     setting                                                                   */
            uint32_t            : 10;
    } bit;
  } HS3SEQOFFIC;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000D0) High-side driver 3 switch-on time control                  */
    
    struct {
      __IOM uint32_t HS3_T1ON   : 8;            /*!< [7..0] High-side driver 3 sequencer switch-on phase 1 and constant
                                                     switch-on time setting                                                    */
      __IOM uint32_t HS3_T2ON   : 6;            /*!< [13..8] High-side driver 3 sequencer switch-on phase 2 time
                                                     setting                                                                   */
            uint32_t            : 2;
      __IOM uint32_t HS3_T3ON   : 6;            /*!< [21..16] High-side driver 3 sequencer switch-on phase 3 time
                                                     setting                                                                   */
            uint32_t            : 2;
      __IOM uint32_t HS3_T4ON   : 6;            /*!< [29..24] High-side driver 3 sequencer switch-on phase 4 time
                                                     setting                                                                   */
            uint32_t            : 2;
    } bit;
  } HS3SEQONTC;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000D4) High-side driver 3 switch-on current control               */
    
    struct {
      __IOM uint32_t HS3_I1ON   : 6;            /*!< [5..0] High-side driver 3 sequencer switch-on phase 1 and constant
                                                     switch-on current setting                                                 */
            uint32_t            : 2;
      __IOM uint32_t HS3_I2ON   : 6;            /*!< [13..8] High-side driver 3 sequencer switch-on phase 2 current
                                                     setting                                                                   */
            uint32_t            : 2;
      __IOM uint32_t HS3_I3ON   : 6;            /*!< [21..16] High-side driver 3 sequencer switch-on phase 3 current
                                                     setting                                                                   */
            uint32_t            : 2;
      __IOM uint32_t HS3_I4ON   : 6;            /*!< [29..24] High-side driver 3 sequencer switch-on phase 4 current
                                                     setting                                                                   */
            uint32_t            : 2;
    } bit;
  } HS3SEQONIC;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000D8) Sequencer switch-off phase 4 time and current
                                                                    control                                                    */
    
    struct {
      __IOM uint32_t T4OFF      : 6;            /*!< [5..0] Sequencer switch-off phase 4 time setting for all drivers          */
            uint32_t            : 10;
      __IOM uint32_t I4OFF      : 6;            /*!< [21..16] Sequencer switch-off phase 4 current setting for all
                                                     drivers                                                                   */
            uint32_t            : 10;
    } bit;
  } SEQOFFT4I4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000DC) High-current discharge mode control                        */
    
    struct {
      __IOM uint32_t IHCDIS     : 6;            /*!< [5..0] High-current discharge mode current setting for all drivers        */
            uint32_t            : 10;
      __IOM uint32_t HCDIS_SSO  : 1;            /*!< [16..16] High-current discharge mode with safe switch-off                 */
            uint32_t            : 15;
    } bit;
  } HCDIS;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000E0) Half bridge 1 switch-on measurement values                 */
    
    struct {
      __IM  uint32_t HB1_TONDLY : 8;            /*!< [7..0] Half bridge 1 switch-on delay time value measured until
                                                     VSH voltage starts to change                                              */
      __IM  uint32_t HB1_I1ONVAL : 6;           /*!< [13..8] Half bridge 1 switch-on phase 1 current setting from
                                                     adaptive sequencer                                                        */
            uint32_t            : 2;
      __IM  uint32_t HB1_TONDUR : 6;            /*!< [21..16] Half bridge 1 switch-on voltage slope duration time
                                                     value                                                                     */
      __IM  uint32_t HB1_TONDURMERR : 1;        /*!< [22..22] Half bridge 1 switch-on voltage slope time measurement
                                                     error                                                                     */
            uint32_t            : 5;
      __IM  uint32_t HB1_ACTDRV_ON : 1;         /*!< [28..28] Half bridge 1 switch-on active driver                            */
      __IOM uint32_t HB1_ONVALVF : 1;           /*!< [29..29] Half bridge 1 switch-on measurement values valid flag            */
      __OM  uint32_t HB1_ONVALVF_CLR : 1;       /*!< [30..30] Half bridge 1 switch-on measurement values valid flag
                                                     clear                                                                     */
      __OM  uint32_t HB1_ONVALVF_SET : 1;       /*!< [31..31] Half bridge 1 switch-on measurement values valid flag
                                                     set                                                                       */
    } bit;
  } HB1ONVAL;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000E4) Half bridge 1 switch-off measurement values                */
    
    struct {
      __IM  uint32_t HB1_TOFFDLY : 8;           /*!< [7..0] Half bridge 1 switch-off delay time value measured until
                                                     VSH voltage starts to change                                              */
      __IM  uint32_t HB1_I1OFFVAL : 6;          /*!< [13..8] Half bridge 1 switch-off phase 1 current setting from
                                                     adaptive sequencer                                                        */
            uint32_t            : 2;
      __IM  uint32_t HB1_TOFFDUR : 6;           /*!< [21..16] Half bridge 1 switch-off voltage slope duration time
                                                     value                                                                     */
      __IM  uint32_t HB1_TOFFDURMERR : 1;       /*!< [22..22] Half bridge 1 switch-off voltage slope time measurement
                                                     error                                                                     */
            uint32_t            : 5;
      __IM  uint32_t HB1_ACTDRV_OFF : 1;        /*!< [28..28] Half bridge 1 switch-off active driver                           */
      __IOM uint32_t HB1_OFFVALVF : 1;          /*!< [29..29] Half bridge 1 switch-off measurement values valid flag           */
      __OM  uint32_t HB1_OFFVALVF_CLR : 1;      /*!< [30..30] Half bridge 1 switch-off measurement values valid flag
                                                     clear                                                                     */
      __OM  uint32_t HB1_OFFVALVF_SET : 1;      /*!< [31..31] Half bridge 1 switch-off measurement values valid flag
                                                     set                                                                       */
    } bit;
  } HB1OFFVAL;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000E8) Half bridge 2 switch-on measurement values                 */
    
    struct {
      __IM  uint32_t HB2_TONDLY : 8;            /*!< [7..0] Half bridge 2 switch-on delay time value measured until
                                                     VSH voltage starts to change                                              */
      __IM  uint32_t HB2_I1ONVAL : 6;           /*!< [13..8] Half bridge 2 switch-on phase 1 current setting from
                                                     adaptive sequencer                                                        */
            uint32_t            : 2;
      __IM  uint32_t HB2_TONDUR : 6;            /*!< [21..16] Half bridge 2 switch-on voltage slope duration time
                                                     value                                                                     */
      __IM  uint32_t HB2_TONDURMERR : 1;        /*!< [22..22] Half bridge 2 switch-on voltage slope time measurement
                                                     error                                                                     */
            uint32_t            : 5;
      __IM  uint32_t HB2_ACTDRV_ON : 1;         /*!< [28..28] Half bridge 2 switch-on active driver                            */
      __IOM uint32_t HB2_ONVALVF : 1;           /*!< [29..29] Half bridge 2 switch-on measurement values valid flag            */
      __OM  uint32_t HB2_ONVALVF_CLR : 1;       /*!< [30..30] Half bridge 2 switch-on measurement values valid flag
                                                     clear                                                                     */
      __OM  uint32_t HB2_ONVALVF_SET : 1;       /*!< [31..31] Half bridge 2 switch-on measurement values valid flag
                                                     set                                                                       */
    } bit;
  } HB2ONVAL;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000EC) Half bridge 2 switch-off measurement values                */
    
    struct {
      __IM  uint32_t HB2_TOFFDLY : 8;           /*!< [7..0] Half bridge 2 switch-off delay time value measured until
                                                     VSH voltage starts to change                                              */
      __IM  uint32_t HB2_I1OFFVAL : 6;          /*!< [13..8] Half bridge 2 switch-off phase 1 current setting from
                                                     adaptive sequencer                                                        */
            uint32_t            : 2;
      __IM  uint32_t HB2_TOFFDUR : 6;           /*!< [21..16] Half bridge 2 switch-off voltage slope duration time
                                                     value                                                                     */
      __IM  uint32_t HB2_TOFFDURMERR : 1;       /*!< [22..22] Half bridge 2 switch-off voltage slope time measurement
                                                     error                                                                     */
            uint32_t            : 5;
      __IM  uint32_t HB2_ACTDRV_OFF : 1;        /*!< [28..28] Half bridge 2 switch-off active driver                           */
      __IOM uint32_t HB2_OFFVALVF : 1;          /*!< [29..29] Half bridge 2 switch-off measurement values valid flag           */
      __OM  uint32_t HB2_OFFVALVF_CLR : 1;      /*!< [30..30] Half bridge 2 switch-off measurement values valid flag
                                                     clear                                                                     */
      __OM  uint32_t HB2_OFFVALVF_SET : 1;      /*!< [31..31] Half bridge 2 switch-off measurement values valid flag
                                                     set                                                                       */
    } bit;
  } HB2OFFVAL;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000F0) Half bridge 3 switch-on measurement values                 */
    
    struct {
      __IM  uint32_t HB3_TONDLY : 8;            /*!< [7..0] Half bridge 3 switch-on delay time value measured until
                                                     VSH voltage starts to change                                              */
      __IM  uint32_t HB3_I1ONVAL : 6;           /*!< [13..8] Half bridge 3 switch-on phase 1 current setting from
                                                     adaptive sequencer                                                        */
            uint32_t            : 2;
      __IM  uint32_t HB3_TONDUR : 6;            /*!< [21..16] Half bridge 3 switch-on voltage slope duration time
                                                     value                                                                     */
      __IM  uint32_t HB3_TONDURMERR : 1;        /*!< [22..22] Half bridge 3 switch-on voltage slope time measurement
                                                     error                                                                     */
            uint32_t            : 5;
      __IM  uint32_t HB3_ACTDRV_ON : 1;         /*!< [28..28] Half bridge 3 switch-on active driver                            */
      __IOM uint32_t HB3_ONVALVF : 1;           /*!< [29..29] Half bridge 3 switch-on measurement values valid flag            */
      __OM  uint32_t HB3_ONVALVF_CLR : 1;       /*!< [30..30] Half bridge 3 switch-on measurement values valid flag
                                                     clear                                                                     */
      __OM  uint32_t HB3_ONVALVF_SET : 1;       /*!< [31..31] Half bridge 3 switch-on measurement values valid flag
                                                     set                                                                       */
    } bit;
  } HB3ONVAL;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000F4) Half bridge 3 switch-off measurement values                */
    
    struct {
      __IM  uint32_t HB3_TOFFDLY : 8;           /*!< [7..0] Half bridge 3 switch-off delay time value measured until
                                                     VSH voltage starts to change                                              */
      __IM  uint32_t HB3_I1OFFVAL : 6;          /*!< [13..8] Half bridge 3 switch-off phase 1 current setting from
                                                     adaptive sequencer                                                        */
            uint32_t            : 2;
      __IM  uint32_t HB3_TOFFDUR : 6;           /*!< [21..16] Half bridge 3 switch-off voltage slope duration time
                                                     value                                                                     */
      __IM  uint32_t HB3_TOFFDURMERR : 1;       /*!< [22..22] Half bridge 3 switch-off voltage slope time measurement
                                                     error                                                                     */
            uint32_t            : 5;
      __IM  uint32_t HB3_ACTDRV_OFF : 1;        /*!< [28..28] Half bridge 3 switch-off active driver                           */
      __IOM uint32_t HB3_OFFVALVF : 1;          /*!< [29..29] Half bridge 3 switch-off measurement values valid flag           */
      __OM  uint32_t HB3_OFFVALVF_CLR : 1;      /*!< [30..30] Half bridge 3 switch-off measurement values valid flag
                                                     clear                                                                     */
      __OM  uint32_t HB3_OFFVALVF_SET : 1;      /*!< [31..31] Half bridge 3 switch-off measurement values valid flag
                                                     set                                                                       */
    } bit;
  } HB3OFFVAL;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000F8) Adaptive sequencer control                                 */
    
    struct {
      __IOM uint32_t HB1ASMONEN : 1;            /*!< [0..0] Half bridge 1 adaptive sequencer for switch-on                     */
      __IOM uint32_t HB1ASMOFFEN : 1;           /*!< [1..1] Half bridge 1 adaptive sequencer for switch-off                    */
            uint32_t            : 4;
      __IOM uint32_t HB1ONHYSTEN : 1;           /*!< [6..6] Half bridge 1 optimizer hysteresis for switch-on                   */
      __IOM uint32_t HB1OFFHYSTEN : 1;          /*!< [7..7] Half bridge 1 optimizer hysteresis for switch-off                  */
      __IOM uint32_t HB2ASMONEN : 1;            /*!< [8..8] Half bridge 2 adaptive sequencer for switch-on                     */
      __IOM uint32_t HB2ASMOFFEN : 1;           /*!< [9..9] Half bridge 2 adaptive sequencer for switch-off                    */
            uint32_t            : 4;
      __IOM uint32_t HB2ONHYSTEN : 1;           /*!< [14..14] Half bridge 2 optimizer hysteresis for switch-on                 */
      __IOM uint32_t HB2OFFHYSTEN : 1;          /*!< [15..15] Half bridge 2 optimizer hysteresis for switch-off                */
      __IOM uint32_t HB3ASMONEN : 1;            /*!< [16..16] Half bridge 3 adaptive sequencer for switch-on                   */
      __IOM uint32_t HB3ASMOFFEN : 1;           /*!< [17..17] Half bridge 3 adaptive sequencer for switch-off                  */
            uint32_t            : 4;
      __IOM uint32_t HB3ONHYSTEN : 1;           /*!< [22..22] Half bridge 3 optimizer hysteresis for switch-on                 */
      __IOM uint32_t HB3OFFHYSTEN : 1;          /*!< [23..23] Half bridge 3 optimizer hysteresis for switch-off                */
            uint32_t            : 8;
    } bit;
  } ASEQC;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x000000FC) Adaptive sequencer switch-on status                        */
    
    struct {
      __IM  uint32_t HB1T12ONMAX : 1;           /*!< [0..0] Half bridge 1 max T12ON value reached                              */
      __IM  uint32_t HB1I1ONMAX : 1;            /*!< [1..1] Half bridge 1 max I1ON value reached                               */
      __IM  uint32_t HB1T12ONMIN : 1;           /*!< [2..2] Half bridge 1 min T12ON value reached                              */
      __IM  uint32_t HB1I1ONMIN : 1;            /*!< [3..3] Half bridge 1 min I1ON value reached                               */
      __IM  uint32_t HB1ONMF    : 1;            /*!< [4..4] Half bridge 1 adaptive sequencer switch-on measurement
                                                     failure                                                                   */
            uint32_t            : 2;
      __IM  uint32_t HB1ONFAILDRV : 1;          /*!< [7..7] Half bridge 1 switch-on failed gate driver                         */
      __IM  uint32_t HB2T12ONMAX : 1;           /*!< [8..8] Half bridge 2 max T12ON value reached                              */
      __IM  uint32_t HB2I1ONMAX : 1;            /*!< [9..9] Half bridge 2 max I1ON value reached                               */
      __IM  uint32_t HB2T12ONMIN : 1;           /*!< [10..10] Half bridge 2 min T12ON value reached                            */
      __IM  uint32_t HB2I1ONMIN : 1;            /*!< [11..11] Half bridge 2 min I1ON value reached                             */
      __IM  uint32_t HB2ONMF    : 1;            /*!< [12..12] Half bridge 2 adaptive sequencer switch-on measurement
                                                     failure                                                                   */
            uint32_t            : 2;
      __IM  uint32_t HB2ONFAILDRV : 1;          /*!< [15..15] Half bridge 2 switch-on failed gate driver                       */
      __IM  uint32_t HB3T12ONMAX : 1;           /*!< [16..16] Half bridge 3 max T12ON value reached                            */
      __IM  uint32_t HB3I1ONMAX : 1;            /*!< [17..17] Half bridge 3 max I1ON value reached                             */
      __IM  uint32_t HB3T12ONMIN : 1;           /*!< [18..18] Half bridge 3 min T12ON value reached                            */
      __IM  uint32_t HB3I1ONMIN : 1;            /*!< [19..19] Half bridge 3 min I1ON value reached                             */
      __IM  uint32_t HB3ONMF    : 1;            /*!< [20..20] Half bridge 3 adaptive sequencer switch-on measurement
                                                     failure                                                                   */
            uint32_t            : 2;
      __IM  uint32_t HB3ONFAILDRV : 1;          /*!< [23..23] Half bridge 3 switch-on failed gate driver                       */
            uint32_t            : 8;
    } bit;
  } ASEQONSTS;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000100) Adaptive sequencer switch-off status                       */
    
    struct {
      __IM  uint32_t HB1T1OFFMAX : 1;           /*!< [0..0] Half bridge 1 max T1OFF value reached                              */
      __IM  uint32_t HB1I1OFFMAX : 1;           /*!< [1..1] Half bridge 1 max I1OFF value reached                              */
      __IM  uint32_t HB1T1OFFMIN : 1;           /*!< [2..2] Half bridge 1 min T1OFF value reached                              */
      __IM  uint32_t HB1I1OFFMIN : 1;           /*!< [3..3] Half bridge 1 min I1OFF value reached                              */
      __IM  uint32_t HB1OFFMF   : 1;            /*!< [4..4] Half bridge 1 adaptive sequencer switch-off measurement
                                                     failure                                                                   */
            uint32_t            : 2;
      __IM  uint32_t HB1OFFFAILDRV : 1;         /*!< [7..7] Half bridge 1 switch-off failed gate driver                        */
      __IM  uint32_t HB2T1OFFMAX : 1;           /*!< [8..8] Half bridge 2 max T1OFF value reached                              */
      __IM  uint32_t HB2I1OFFMAX : 1;           /*!< [9..9] Half bridge 2 max I1OFF value reached                              */
      __IM  uint32_t HB2T1OFFMIN : 1;           /*!< [10..10] Half bridge 2 min T1OFF value reached                            */
      __IM  uint32_t HB2I1OFFMIN : 1;           /*!< [11..11] Half bridge 2 min I1OFF value reached                            */
      __IM  uint32_t HB2OFFMF   : 1;            /*!< [12..12] Half bridge 2 adaptive sequencer switch-off measurement
                                                     failure                                                                   */
            uint32_t            : 2;
      __IM  uint32_t HB2OFFFAILDRV : 1;         /*!< [15..15] Half bridge 2 switch-off failed gate driver                      */
      __IM  uint32_t HB3T1OFFMAX : 1;           /*!< [16..16] Half bridge 3 max T1OFF value reached                            */
      __IM  uint32_t HB3I1OFFMAX : 1;           /*!< [17..17] Half bridge 3 max I1OFF value reached                            */
      __IM  uint32_t HB3T1OFFMIN : 1;           /*!< [18..18] Half bridge 3 min T1OFF value reached                            */
      __IM  uint32_t HB3I1OFFMIN : 1;           /*!< [19..19] Half bridge 3 min I1OFF value reached                            */
      __IM  uint32_t HB3OFFMF   : 1;            /*!< [20..20] Half bridge 3 adaptive sequencer switch-off measurement
                                                     failure                                                                   */
            uint32_t            : 2;
      __IM  uint32_t HB3OFFFAILDRV : 1;         /*!< [23..23] Half bridge 3 switch-off failed gate driver                      */
            uint32_t            : 8;
    } bit;
  } ASEQOFFSTS;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000104) Adaptive sequencer error counter control                   */
    
    struct {
      __IOM uint32_t HB1T1OFFERRCNT : 2;        /*!< [1..0] Half bridge 1 T1OFF error counter setting                          */
      __IOM uint32_t HB1T12ONERRCNT : 2;        /*!< [3..2] Half bridge 1 T12ON error counter setting                          */
      __IOM uint32_t HB1MFERRCNT : 2;           /*!< [5..4] Half bridge 1 measurement failure error counter setting            */
            uint32_t            : 2;
      __IOM uint32_t HB2T1OFFERRCNT : 2;        /*!< [9..8] Half bridge 2 T1OFF error counter setting                          */
      __IOM uint32_t HB2T12ONERRCNT : 2;        /*!< [11..10] Half bridge 2 T12ON error counter setting                        */
      __IOM uint32_t HB2MFERRCNT : 2;           /*!< [13..12] Half bridge 2 measurement failure error counter setting          */
            uint32_t            : 2;
      __IOM uint32_t HB3T1OFFERRCNT : 2;        /*!< [17..16] Half bridge 3 T1OFF error counter setting                        */
      __IOM uint32_t HB3T12ONERRCNT : 2;        /*!< [19..18] Half bridge 3 T12ON error counter setting                        */
      __IOM uint32_t HB3MFERRCNT : 2;           /*!< [21..20] Half bridge 3 measurement failure error counter setting          */
            uint32_t            : 10;
    } bit;
  } ASEQERRCNT;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000108) Adaptive sequencer minimum switch-on time setting          */
    
    struct {
      __IOM uint32_t T12ONMIN   : 8;            /*!< [7..0] Switch-on phases 1 and 2 minimum time setting                      */
            uint32_t            : 24;
    } bit;
  } ASEQONTMIN;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000010C) Adaptive sequencer minimum switch-off time setting         */
    
    struct {
      __IOM uint32_t T1OFFMIN   : 8;            /*!< [7..0] Switch-off phase 1 minimum time setting                            */
            uint32_t            : 24;
    } bit;
  } ASEQOFFTMIN;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000110) Adaptive sequencer minimum switch-on current
                                                                    setting                                                    */
    
    struct {
      __IOM uint32_t I1ONMIN    : 6;            /*!< [5..0] Switch-on phase 1 minimum current setting                          */
            uint32_t            : 26;
    } bit;
  } ASEQONIMIN;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000114) Adaptive sequencer minimum switch-off current
                                                                    setting                                                    */
    
    struct {
      __IOM uint32_t I1OFFMIN   : 6;            /*!< [5..0] Switch-off phase 1 minimum current setting                         */
            uint32_t            : 26;
    } bit;
  } ASEQOFFIMIN;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000118) Adaptive sequencer maximum switch-on time setting          */
    
    struct {
      __IOM uint32_t T12ONMAX   : 8;            /*!< [7..0] Switch-on phases 1 and 2 maximum time setting                      */
            uint32_t            : 24;
    } bit;
  } ASEQONTMAX;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000011C) Adaptive sequencer maximum switch-off time setting         */
    
    struct {
      __IOM uint32_t T1OFFMAX   : 8;            /*!< [7..0] Switch-off phase 1 maximum time setting                            */
            uint32_t            : 24;
    } bit;
  } ASEQOFFTMAX;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000120) Adaptive sequencer maximum switch-on current
                                                                    setting                                                    */
    
    struct {
      __IOM uint32_t I1ONMAX    : 6;            /*!< [5..0] Switch-on phase 1 maximum current setting                          */
            uint32_t            : 26;
    } bit;
  } ASEQONIMAX;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000124) Adaptive sequencer maximum switch-off current
                                                                    setting                                                    */
    
    struct {
      __IOM uint32_t I1OFFMAX   : 6;            /*!< [5..0] Switch-off phase 1 maximum current setting                         */
            uint32_t            : 26;
    } bit;
  } ASEQOFFIMAX;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000128) Adaptive sequencer additional switch-off delay
                                                                    setting                                                    */
    
    struct {
      __IOM uint32_t LS1T1OFFADDDLY : 4;        /*!< [3..0] Low-side driver 1 adaptive sequencer T1OFF additional
                                                     delay setting                                                             */
      __IOM uint32_t HS1T1OFFADDDLY : 4;        /*!< [7..4] High-side driver 1 adaptive sequencer T1OFF additional
                                                     delay setting                                                             */
      __IOM uint32_t LS2T1OFFADDDLY : 4;        /*!< [11..8] Low-side driver 2 adaptive sequencer T1OFF additional
                                                     delay setting                                                             */
      __IOM uint32_t HS2T1OFFADDDLY : 4;        /*!< [15..12] High-side driver 2 adaptive sequencer T1OFF additional
                                                     delay setting                                                             */
      __IOM uint32_t LS3T1OFFADDDLY : 4;        /*!< [19..16] Low-side driver 3 adaptive sequencer T1OFF additional
                                                     delay setting                                                             */
      __IOM uint32_t HS3T1OFFADDDLY : 4;        /*!< [23..20] High-side driver 3 adaptive sequencer T1OFF additional
                                                     delay setting                                                             */
            uint32_t            : 8;
    } bit;
  } ASEQOFFADDDLY;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000012C) BEMF comparator control and status                         */
    
    struct {
      __IOM uint32_t PH1_COMP_EN : 1;           /*!< [0..0] Phase 1 comparator enable                                          */
      __IOM uint32_t PH2_COMP_EN : 1;           /*!< [1..1] Phase 2 comparator enable                                          */
      __IOM uint32_t PH3_COMP_EN : 1;           /*!< [2..2] Phase 3 comparator enable                                          */
            uint32_t            : 1;
      __IOM uint32_t PH1_COMP_DIS_SET : 1;      /*!< [4..4] Phase 1 comparator output status value if disabled                 */
      __IOM uint32_t PH2_COMP_DIS_SET : 1;      /*!< [5..5] Phase 2 comparator output status value if disabled                 */
      __IOM uint32_t PH3_COMP_DIS_SET : 1;      /*!< [6..6] Phase 3 comparator output status value if disabled                 */
            uint32_t            : 1;
      __IOM uint32_t CMP_TFILT_SEL : 2;         /*!< [9..8] Symmetrical spike filter time for BEMF comparators                 */
      __IOM uint32_t TBLNK_SEL  : 3;            /*!< [12..10] Blanking time for BEMF comparators                               */
      __IOM uint32_t DEMAG_FILT_BYP : 1;        /*!< [13..13] Demagnetisation filter bypass                                    */
      __IOM uint32_t BLNK_FILT_BYP : 1;         /*!< [14..14] Blanking time and demagnetisation filter bypass                  */
            uint32_t            : 1;
      __IOM uint32_t TRIG_SEL   : 2;            /*!< [17..16] Trigger output selector                                          */
      __IOM uint32_t IN_SEL     : 1;            /*!< [18..18] Deactivate INA/B/C as sample pulse sources                       */
      __IOM uint32_t TRIGA_SEL  : 1;            /*!< [19..19] Deactivate TRIGA as sample pulse source                          */
      __IOM uint32_t TRIGB_SEL  : 1;            /*!< [20..20] Deactivate TRIGB as sample pulse source                          */
            uint32_t            : 3;
      __IOM uint32_t SW_TRIG    : 1;            /*!< [24..24] Software trigger for output to timer                             */
      __IM  uint32_t PH1_ZC_STS : 1;            /*!< [25..25] Phase 1 zero crossing comparator status                          */
      __IM  uint32_t PH2_ZC_STS : 1;            /*!< [26..26] Phase 2 zero crossing comparator status                          */
      __IM  uint32_t PH3_ZC_STS : 1;            /*!< [27..27] Phase 3 zero crossing comparator status                          */
            uint32_t            : 4;
    } bit;
  } BEMFC_CTRL;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000130) BEMF comparator interrupt status                           */
    
    struct {
      __IM  uint32_t PH1_ZCFALL_IS : 1;         /*!< [0..0] Phase 1 zero crossing falling interrupt status                     */
      __IM  uint32_t PH1_ZCRISE_IS : 1;         /*!< [1..1] Phase 1 zero crossing rising interrupt status                      */
      __IM  uint32_t PH2_ZCFALL_IS : 1;         /*!< [2..2] Phase 2 zero crossing falling interrupt status                     */
      __IM  uint32_t PH2_ZCRISE_IS : 1;         /*!< [3..3] Phase 2 zero crossing rising interrupt status                      */
      __IM  uint32_t PH3_ZCFALL_IS : 1;         /*!< [4..4] Phase 3 zero crossing falling interrupt status                     */
      __IM  uint32_t PH3_ZCRISE_IS : 1;         /*!< [5..5] Phase 3 zero crossing rising interrupt status                      */
            uint32_t            : 26;
    } bit;
  } BEMFC_IRQS;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000134) BEMF comparator interrupt status clear                     */
    
    struct {
      __OM  uint32_t PH1_ZCFALL_ISC : 1;        /*!< [0..0] Phase 1 zero crossing falling interrupt status clear               */
      __OM  uint32_t PH1_ZCRISE_ISC : 1;        /*!< [1..1] Phase 1 zero crossing rising interrupt status clear                */
      __OM  uint32_t PH2_ZCFALL_ISC : 1;        /*!< [2..2] Phase 2 zero crossing falling interrupt status clear               */
      __OM  uint32_t PH2_ZCRISE_ISC : 1;        /*!< [3..3] Phase 2 zero crossing rising interrupt status clear                */
      __OM  uint32_t PH3_ZCFALL_ISC : 1;        /*!< [4..4] Phase 3 zero crossing falling interrupt status clear               */
      __OM  uint32_t PH3_ZCRISE_ISC : 1;        /*!< [5..5] Phase 3 zero crossing rising interrupt status clear                */
            uint32_t            : 26;
    } bit;
  } BEMFC_IRQCLR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000138) BEMF comparator interrupt status set                       */
    
    struct {
      __OM  uint32_t PH1_ZCFALL_ISS : 1;        /*!< [0..0] Phase 1 zero crossing falling interrupt status set                 */
      __OM  uint32_t PH1_ZCRISE_ISS : 1;        /*!< [1..1] Phase 1 zero crossing rising interrupt status set                  */
      __OM  uint32_t PH2_ZCFALL_ISS : 1;        /*!< [2..2] Phase 2 zero crossing falling interrupt status set                 */
      __OM  uint32_t PH2_ZCRISE_ISS : 1;        /*!< [3..3] Phase 2 zero crossing rising interrupt status set                  */
      __OM  uint32_t PH3_ZCFALL_ISS : 1;        /*!< [4..4] Phase 3 zero crossing falling interrupt status set                 */
      __OM  uint32_t PH3_ZCRISE_ISS : 1;        /*!< [5..5] Phase 3 zero crossing rising interrupt status set                  */
            uint32_t            : 26;
    } bit;
  } BEMFC_IRQSET;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000013C) BEMF comparator interrupt enable                           */
    
    struct {
      __IOM uint32_t PH1_ZCFALL_IEN : 1;        /*!< [0..0] Phase 1 zero crossing falling interrupt enable                     */
      __IOM uint32_t PH1_ZCRISE_IEN : 1;        /*!< [1..1] Phase 1 zero crossing rising interrupt enable                      */
      __IOM uint32_t PH2_ZCFALL_IEN : 1;        /*!< [2..2] Phase 2 zero crossing falling interrupt enable                     */
      __IOM uint32_t PH2_ZCRISE_IEN : 1;        /*!< [3..3] Phase 2 zero crossing rising interrupt enable                      */
      __IOM uint32_t PH3_ZCFALL_IEN : 1;        /*!< [4..4] Phase 3 zero crossing falling interrupt enable                     */
      __IOM uint32_t PH3_ZCRISE_IEN : 1;        /*!< [5..5] Phase 3 zero crossing rising interrupt enable                      */
            uint32_t            : 26;
    } bit;
  } BEMFC_IRQEN;
} BDRV_Type;                                    /*!< Size = 320 (0x140)                                                        */



/* =========================================================================================================================== */
/* ================                                           CACHE                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief CACHE (CACHE)
  */

typedef struct {                                /*!< (@ 0x48048000) CACHE Structure                                            */
  __IM  uint32_t  RESERVED[64];
  
  union {
    __OM  uint32_t reg;                         /*!< (@ 0x00000100) Cache All Clean Register                                   */
    
    struct {
      __OM  uint32_t Clean      : 32;           /*!< [31..0] Clean all valid blocks from the cache                             */
    } bit;
  } CACHE_AC;
  
  union {
    __OM  uint32_t reg;                         /*!< (@ 0x00000104) Cache Set Clean Register                                   */
    
    struct {
      __OM  uint32_t ADDR       : 32;           /*!< [31..0] Clean all valid blocks of one set at a specified address          */
    } bit;
  } CACHE_SC;
  __IM  uint32_t  RESERVED1[3];
  
  union {
    __OM  uint32_t reg;                         /*!< (@ 0x00000114) Cache Block Touch Register                                 */
    
    struct {
      __OM  uint32_t ADDR       : 32;           /*!< [31..0] Load a memory block from a specified address into the
                                                     cache                                                                     */
    } bit;
  } CACHE_BT;
  
  union {
    __OM  uint32_t reg;                         /*!< (@ 0x00000118) Cache Block Lock Register                                  */
    
    struct {
      __OM  uint32_t ADDR       : 32;           /*!< [31..0] Lock a memory block from a specified address in the
                                                     cache                                                                     */
    } bit;
  } CACHE_BL;
  
  union {
    __OM  uint32_t reg;                         /*!< (@ 0x0000011C) Cache Block Unlock Register                                */
    
    struct {
      __OM  uint32_t ADDR       : 32;           /*!< [31..0] Unlock a memory block from a specified address                    */
    } bit;
  } CACHE_BU;
} CACHE_Type;                                   /*!< Size = 288 (0x120)                                                        */



/* =========================================================================================================================== */
/* ================                                          CANNODE                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief CAN Node (CANNODE)
  */

typedef struct {                                /*!< (@ 0x48010000) CANNODE Structure                                          */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) CAN Clock Control Register                                 */
    
    struct {
      __IOM uint32_t DISR       : 1;            /*!< [0..0] Module Disable Request Bit                                         */
      __IM  uint32_t DISS       : 1;            /*!< [1..1] Module Disable Status Bit                                          */
            uint32_t            : 1;
      __IOM uint32_t EDIS       : 1;            /*!< [3..3] Sleep Mode Enable Control                                          */
            uint32_t            : 28;
    } bit;
  } CLC;
  __IM  uint32_t  RESERVED;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000008) Module Identification Register                             */
    
    struct {
      __IM  uint32_t MOD_REV    : 8;            /*!< [7..0] Module Revision Number                                             */
      __IM  uint32_t MOD_TYPE   : 8;            /*!< [15..8] Module Type                                                       */
      __IM  uint32_t MOD_NUMBER : 16;           /*!< [31..16] Module Number Value                                              */
    } bit;
  } ID;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000000C) CAN Fractional Divider Register                            */
    
    struct {
      __IOM uint32_t STEP       : 10;           /*!< [9..0] Step Value                                                         */
            uint32_t            : 4;
      __IOM uint32_t DM         : 2;            /*!< [15..14] Divider Mode                                                     */
            uint32_t            : 16;
    } bit;
  } FDR;
  __IM  uint32_t  RESERVED1[60];
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000100) List Register 0                                            */
    
    struct {
      __IM  uint32_t BEGIN      : 8;            /*!< [7..0] List Begin                                                         */
      __IM  uint32_t END        : 8;            /*!< [15..8] List End                                                          */
      __IM  uint32_t SIZE       : 8;            /*!< [23..16] List Size                                                        */
      __IM  uint32_t EMPTY      : 1;            /*!< [24..24] List Empty Indication                                            */
            uint32_t            : 7;
    } bit;
  } LIST0;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000104) List Register 1                                            */
    
    struct {
      __IM  uint32_t BEGIN      : 8;            /*!< [7..0] List Begin                                                         */
      __IM  uint32_t END        : 8;            /*!< [15..8] List End                                                          */
      __IM  uint32_t SIZE       : 8;            /*!< [23..16] List Size                                                        */
      __IM  uint32_t EMPTY      : 1;            /*!< [24..24] List Empty Indication                                            */
            uint32_t            : 7;
    } bit;
  } LIST1;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000108) List Register 2                                            */
    
    struct {
      __IM  uint32_t BEGIN      : 8;            /*!< [7..0] List Begin                                                         */
      __IM  uint32_t END        : 8;            /*!< [15..8] List End                                                          */
      __IM  uint32_t SIZE       : 8;            /*!< [23..16] List Size                                                        */
      __IM  uint32_t EMPTY      : 1;            /*!< [24..24] List Empty Indication                                            */
            uint32_t            : 7;
    } bit;
  } LIST2;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x0000010C) List Register 3                                            */
    
    struct {
      __IM  uint32_t BEGIN      : 8;            /*!< [7..0] List Begin                                                         */
      __IM  uint32_t END        : 8;            /*!< [15..8] List End                                                          */
      __IM  uint32_t SIZE       : 8;            /*!< [23..16] List Size                                                        */
      __IM  uint32_t EMPTY      : 1;            /*!< [24..24] List Empty Indication                                            */
            uint32_t            : 7;
    } bit;
  } LIST3;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000110) List Register 4                                            */
    
    struct {
      __IM  uint32_t BEGIN      : 8;            /*!< [7..0] List Begin                                                         */
      __IM  uint32_t END        : 8;            /*!< [15..8] List End                                                          */
      __IM  uint32_t SIZE       : 8;            /*!< [23..16] List Size                                                        */
      __IM  uint32_t EMPTY      : 1;            /*!< [24..24] List Empty Indication                                            */
            uint32_t            : 7;
    } bit;
  } LIST4;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000114) List Register 5                                            */
    
    struct {
      __IM  uint32_t BEGIN      : 8;            /*!< [7..0] List Begin                                                         */
      __IM  uint32_t END        : 8;            /*!< [15..8] List End                                                          */
      __IM  uint32_t SIZE       : 8;            /*!< [23..16] List Size                                                        */
      __IM  uint32_t EMPTY      : 1;            /*!< [24..24] List Empty Indication                                            */
            uint32_t            : 7;
    } bit;
  } LIST5;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000118) List Register 6                                            */
    
    struct {
      __IM  uint32_t BEGIN      : 8;            /*!< [7..0] List Begin                                                         */
      __IM  uint32_t END        : 8;            /*!< [15..8] List End                                                          */
      __IM  uint32_t SIZE       : 8;            /*!< [23..16] List Size                                                        */
      __IM  uint32_t EMPTY      : 1;            /*!< [24..24] List Empty Indication                                            */
            uint32_t            : 7;
    } bit;
  } LIST6;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x0000011C) List Register 7                                            */
    
    struct {
      __IM  uint32_t BEGIN      : 8;            /*!< [7..0] List Begin                                                         */
      __IM  uint32_t END        : 8;            /*!< [15..8] List End                                                          */
      __IM  uint32_t SIZE       : 8;            /*!< [23..16] List Size                                                        */
      __IM  uint32_t EMPTY      : 1;            /*!< [24..24] List Empty Indication                                            */
            uint32_t            : 7;
    } bit;
  } LIST7;
  __IM  uint32_t  RESERVED2[8];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000140) Message Pending Register 0                                 */
    
    struct {
      __IOM uint32_t PND        : 32;           /*!< [31..0] Message Pending                                                   */
    } bit;
  } MSPND0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000144) Message Pending Register 1                                 */
    
    struct {
      __IOM uint32_t PND        : 32;           /*!< [31..0] Message Pending                                                   */
    } bit;
  } MSPND1;
  __IM  uint32_t  RESERVED3[14];
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000180) Message Index Register 0                                   */
    
    struct {
      __IM  uint32_t INDEX      : 6;            /*!< [5..0] Message Pending Index                                              */
            uint32_t            : 26;
    } bit;
  } MSID0;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000184) Message Index Register 1                                   */
    
    struct {
      __IM  uint32_t INDEX      : 6;            /*!< [5..0] Message Pending Index                                              */
            uint32_t            : 26;
    } bit;
  } MSID1;
  __IM  uint32_t  RESERVED4[14];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000001C0) Message Index Mask Register                                */
    
    struct {
      __IOM uint32_t IM         : 32;           /*!< [31..0] Message Index Mask                                                */
    } bit;
  } MSIMASK;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000001C4) Panel Control Register                                     */
    
    struct {
      __IOM uint32_t PANCMD     : 8;            /*!< [7..0] Panel Command                                                      */
      __IM  uint32_t BUSY       : 1;            /*!< [8..8] Panel Busy Flag                                                    */
      __IM  uint32_t RBUSY      : 1;            /*!< [9..9] Result Busy Flag                                                   */
            uint32_t            : 6;
      __IOM uint32_t PANAR1     : 8;            /*!< [23..16] Panel Argument 1                                                 */
      __IOM uint32_t PANAR2     : 8;            /*!< [31..24] Panel Argument 2                                                 */
    } bit;
  } PANCTR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000001C8) Module Control Register                                    */
    
    struct {
      __IOM uint32_t CLKSEL     : 4;            /*!< [3..0] Baud Rate Logic Clock Select                                       */
            uint32_t            : 8;
      __IOM uint32_t MPSEL      : 4;            /*!< [15..12] Message Pending Selector                                         */
            uint32_t            : 16;
    } bit;
  } MCR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000001CC) Module Interrupt Trigger Register                          */
    
    struct {
      __OM  uint32_t IT         : 8;            /*!< [7..0] Interrupt Trigger                                                  */
            uint32_t            : 24;
    } bit;
  } MITR;
  __IM  uint32_t  RESERVED5[12];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000200) Node 0 Control Register                                    */
    
    struct {
      __IOM uint32_t INIT       : 1;            /*!< [0..0] Node Initialization                                                */
      __IOM uint32_t TRIE       : 1;            /*!< [1..1] Transfer Interrupt Enable                                          */
      __IOM uint32_t LECIE      : 1;            /*!< [2..2] LEC Indicated Error Interrupt Enable                               */
      __IOM uint32_t ALIE       : 1;            /*!< [3..3] Alert Interrupt Enable                                             */
      __IOM uint32_t CANDIS     : 1;            /*!< [4..4] CAN Disable                                                        */
      __IOM uint32_t TXDIS      : 1;            /*!< [5..5] Transmit Disable                                                   */
      __IOM uint32_t CCE        : 1;            /*!< [6..6] Configuration Change Enable                                        */
      __IOM uint32_t CALM       : 1;            /*!< [7..7] CAN Analyzer Mode                                                  */
            uint32_t            : 1;
      __IOM uint32_t FDEN       : 1;            /*!< [9..9] CAN Flexible Data-Rate Enable                                      */
      __IOM uint32_t PED        : 1;            /*!< [10..10] Protocol Exeption Disable                                        */
            uint32_t            : 4;
      __IOM uint32_t NISO       : 1;            /*!< [15..15] Non ISO Operation                                                */
            uint32_t            : 16;
    } bit;
  } CAN_NCR0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000204) Node 0 Status Register                                     */
    
    struct {
      __IOM uint32_t LEC        : 3;            /*!< [2..0] Last Error Code                                                    */
      __IOM uint32_t TXOK       : 1;            /*!< [3..3] Message Transmitted Successfully                                   */
      __IOM uint32_t RXOK       : 1;            /*!< [4..4] Message Received Successfully                                      */
      __IOM uint32_t ALERT      : 1;            /*!< [5..5] Alert Warning                                                      */
      __IM  uint32_t EWRN       : 1;            /*!< [6..6] Error Warning Status                                               */
      __IM  uint32_t BOFF       : 1;            /*!< [7..7] Bus-off Status                                                     */
      __IOM uint32_t LLE        : 1;            /*!< [8..8] List Length Error                                                  */
      __IOM uint32_t LOE        : 1;            /*!< [9..9] List Object Error                                                  */
            uint32_t            : 1;
      __IOM uint32_t RESI       : 1;            /*!< [11..11] Received Error State Indicator Flag                              */
      __IOM uint32_t FLEC       : 3;            /*!< [14..12] Fast Last Error Code                                             */
            uint32_t            : 17;
    } bit;
  } CAN_NSR0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000208) Node 0 Interrupt Pointer Register                          */
    
    struct {
      __IOM uint32_t ALINP      : 4;            /*!< [3..0] Alert Interrupt Node Pointer                                       */
      __IOM uint32_t LECINP     : 4;            /*!< [7..4] Last Error Code Interrupt Node Pointer                             */
      __IOM uint32_t TRINP      : 4;            /*!< [11..8] Transfer OK Interrupt Node Pointer                                */
      __IOM uint32_t CFCINP     : 4;            /*!< [15..12] Frame Counter Interrupt Node Pointer                             */
            uint32_t            : 16;
    } bit;
  } CAN_NIPR0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000020C) Node 0 Port Control Register                               */
    
    struct {
      __IOM uint32_t RXSEL      : 3;            /*!< [2..0] Receive Select                                                     */
            uint32_t            : 5;
      __IOM uint32_t LBM        : 1;            /*!< [8..8] Loop-Back Mode                                                     */
            uint32_t            : 23;
    } bit;
  } CAN_NPCR0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000210) Node 0 Bit Timing Register                                 */
    
    struct {
      __IOM uint32_t BRP        : 6;            /*!< [5..0] Baud Rate Prescaler                                                */
      __IOM uint32_t SJW        : 2;            /*!< [7..6] (Re) Synchronization Jump Width                                    */
      __IOM uint32_t TSEG1      : 4;            /*!< [11..8] Time Segment Before Sample Point                                  */
      __IOM uint32_t TSEG2      : 3;            /*!< [14..12] Time Segment After Sample Point                                  */
      __IOM uint32_t DIV8       : 1;            /*!< [15..15] Divide Prescaler Clock by 8                                      */
            uint32_t            : 16;
    } bit;
  } CAN_NBTR0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000214) Node 0 Error Counter Register                              */
    
    struct {
      __IOM uint32_t REC        : 8;            /*!< [7..0] Receive Error Counter                                              */
      __IOM uint32_t TEC        : 8;            /*!< [15..8] Transmit Error Counter                                            */
      __IOM uint32_t EWRNLVL    : 8;            /*!< [23..16] Error Warning Level                                              */
      __IM  uint32_t LETD       : 1;            /*!< [24..24] Last Error Transfer Direction                                    */
      __IM  uint32_t LEINC      : 1;            /*!< [25..25] Last Error Increment                                             */
            uint32_t            : 6;
    } bit;
  } CAN_NECNT0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000218) Node 0 Frame Counter Register                              */
    
    struct {
      __IOM uint32_t CFC        : 16;           /*!< [15..0] CAN Frame Counter - CFC                                           */
      __IOM uint32_t CFSEL      : 3;            /*!< [18..16] CAN Frame Count Selection - CFSEL                                */
      __IOM uint32_t CFMOD      : 2;            /*!< [20..19] CAN Frame Counter Mode - CFMOD                                   */
            uint32_t            : 1;
      __IOM uint32_t CFCIE      : 1;            /*!< [22..22] CAN Frame Count Interrupt Enable - CFCIE                         */
      __IOM uint32_t CFCOV      : 1;            /*!< [23..23] CAN Frame Counter Overflow Flag - CFCOV                          */
            uint32_t            : 8;
    } bit;
  } CAN_NFCR0;
} CANNODE_Type;                                 /*!< Size = 540 (0x21c)                                                        */



/* =========================================================================================================================== */
/* ================                                         CANNODEFD                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief CAN Node FD (CANNODEFD)
  */

typedef struct {                                /*!< (@ 0x48010010) CANNODEFD Structure                                        */
  __IM  uint32_t  RESERVED[128];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000200) Node 0 Bit Timing Extended View Register                   */
    
    struct {
      __IOM uint32_t BRP        : 6;            /*!< [5..0] Baud Rate Prescaler                                                */
            uint32_t            : 2;
      __IOM uint32_t SJW        : 4;            /*!< [11..8] (Re) Synchronization Jump Width                                   */
            uint32_t            : 3;
      __IOM uint32_t DIV8       : 1;            /*!< [15..15] Divide Prescaler Clock by 8                                      */
      __IOM uint32_t TSEG2      : 5;            /*!< [20..16] Time Segment After Sample Point                                  */
            uint32_t            : 1;
      __IOM uint32_t TSEG1      : 6;            /*!< [27..22] Time Segment Before Sample Point                                 */
            uint32_t            : 4;
    } bit;
  } CAN_NBTEVR0;
  __IM  uint32_t  RESERVED1[9];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000228) Fast Node 0 Bit Timing Register                            */
    
    struct {
      __IOM uint32_t FBRP       : 6;            /*!< [5..0] Fast Baud Rate Prescaler                                           */
      __IOM uint32_t FSJW       : 2;            /*!< [7..6] Fast (Re) Synchronization Jump Width                               */
      __IOM uint32_t FTSEG1     : 4;            /*!< [11..8] Fast Time Segment Before Sample Point                             */
      __IOM uint32_t FTSEG2     : 3;            /*!< [14..12] Fast Time Segment After Sample Point                             */
            uint32_t            : 17;
    } bit;
  } CAN_FNBTR0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000022C) Node 0 Transmitter Delay Compensation Register             */
    
    struct {
      __IM  uint32_t TDCV       : 6;            /*!< [5..0] Transmitter Delay Compensation Value                               */
            uint32_t            : 2;
      __IOM uint32_t TDCO       : 4;            /*!< [11..8] Transmitter Delay Compensation Offset                             */
            uint32_t            : 3;
      __IOM uint32_t TDC        : 1;            /*!< [15..15] Transmitter Delay Compensation Enable                            */
            uint32_t            : 16;
    } bit;
  } CAN_NTDCR0;
} CANNODEFD_Type;                               /*!< Size = 560 (0x230)                                                        */



/* =========================================================================================================================== */
/* ================                                        CANMSGOBJ0                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief CAN Message Object 0 (CANMSGOBJ0)
  */

typedef struct {                                /*!< (@ 0x48010100) CANMSGOBJ0 Structure                                       */
  __IM  uint32_t  RESERVED[960];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F00) Message Object 0 Function Control Register                 */
    
    struct {
      __IOM uint32_t MMC        : 4;            /*!< [3..0] Message Mode Control                                               */
            uint32_t            : 1;
      __IOM uint32_t BRS        : 1;            /*!< [5..5] Bit Rate Switch                                                    */
      __IOM uint32_t FDF        : 1;            /*!< [6..6] CAN FD Frame Format                                                */
            uint32_t            : 1;
      __IOM uint32_t GDFS       : 1;            /*!< [8..8] Gateway Data Frame Send                                            */
      __IOM uint32_t IDC        : 1;            /*!< [9..9] Identifier Copy                                                    */
      __IOM uint32_t DLCC       : 1;            /*!< [10..10] Data Length Code Copy                                            */
      __IOM uint32_t DATC       : 1;            /*!< [11..11] Data Copy                                                        */
            uint32_t            : 4;
      __IOM uint32_t RXIE       : 1;            /*!< [16..16] Receive Interrupt Enable                                         */
      __IOM uint32_t TXIE       : 1;            /*!< [17..17] Transmit Interrupt Enable                                        */
      __IOM uint32_t OVIE       : 1;            /*!< [18..18] Overflow Interrupt Enable                                        */
            uint32_t            : 1;
      __IOM uint32_t FRREN      : 1;            /*!< [20..20] Foreign Remote Request Enable                                    */
      __IOM uint32_t RMM        : 1;            /*!< [21..21] Transmit Object Remote Monitoring                                */
      __IOM uint32_t SDT        : 1;            /*!< [22..22] Single Data Transfer                                             */
      __IOM uint32_t STT        : 1;            /*!< [23..23] Single Transmit Trial                                            */
      __IOM uint32_t DLC        : 4;            /*!< [27..24] Data Length Code                                                 */
            uint32_t            : 4;
    } bit;
  } CAN_MOFCR0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F04) Message Object 0 FIFO/Gateway Pointer Register             */
    
    struct {
      __IOM uint32_t BOT        : 8;            /*!< [7..0] Bottom Pointer                                                     */
      __IOM uint32_t TOP        : 8;            /*!< [15..8] Top Pointer                                                       */
      __IOM uint32_t CUR        : 8;            /*!< [23..16] Current Object Pointer                                           */
      __IOM uint32_t SEL        : 8;            /*!< [31..24] Object Select Pointer                                            */
    } bit;
  } CAN_MOFGPR0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F08) Message Object 0 Interrupt Pointer Register                */
    
    struct {
      __IOM uint32_t RXINP      : 4;            /*!< [3..0] Receive Interrupt Node Pointer                                     */
      __IOM uint32_t TXINP      : 4;            /*!< [7..4] Transmit Interrupt Node Pointer                                    */
      __IOM uint32_t MPN        : 8;            /*!< [15..8] Message Pending Number                                            */
      __IOM uint32_t CFCVAL     : 16;           /*!< [31..16] CAN Frame Counter Value                                          */
    } bit;
  } CAN_MOIPR0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F0C) Message Object 0 Acceptance Mask Register                  */
    
    struct {
      __IOM uint32_t AM         : 29;           /*!< [28..0] Acceptance Mask for Message Identifier                            */
      __IOM uint32_t MIDE       : 1;            /*!< [29..29] Acceptance Mask Bit for Message IDE Bit                          */
            uint32_t            : 2;
    } bit;
  } CAN_MOAMR0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F10) Message Object 0 Data Register Low                         */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_MODATAL0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F14) Message Object 0 Data Register High                        */
    
    struct {
      __IOM uint32_t DB4        : 8;            /*!< [7..0] Data Byte 4 of Message Object n                                    */
      __IOM uint32_t DB5        : 8;            /*!< [15..8] Data Byte 5 of Message Object n                                   */
      __IOM uint32_t DB6        : 8;            /*!< [23..16] Data Byte 6 of Message Object n                                  */
      __IOM uint32_t DB7        : 8;            /*!< [31..24] Data Byte 7 of Message Object n                                  */
    } bit;
  } CAN_MODATAH0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F18) Message Object 0 Arbitration Register                      */
    
    struct {
      __IOM uint32_t ID         : 29;           /*!< [28..0] CAN Identifier of Message Object n                                */
      __IOM uint32_t IDE        : 1;            /*!< [29..29] Identifier Extension Bit of Message Object n                     */
      __IOM uint32_t PRI        : 2;            /*!< [31..30] Priority Class                                                   */
    } bit;
  } CAN_MOAR0;
  
  union {
    union {
      __OM  uint32_t reg;                       /*!< (@ 0x00000F1C) Message Object 0 Control Register                          */
      
      struct {
        __OM  uint32_t RESRXPND : 1;            /*!< [0..0] Reset Receive Pending                                              */
        __OM  uint32_t RESTXPND : 1;            /*!< [1..1] Reset Transmit Pending                                             */
        __OM  uint32_t RESRXUPD : 1;            /*!< [2..2] Reset Receive Updating                                             */
        __OM  uint32_t RESNEWDAT : 1;           /*!< [3..3] Reset New Data                                                     */
        __OM  uint32_t RESMSGLST : 1;           /*!< [4..4] Reset Message Lost                                                 */
        __OM  uint32_t RESMSGVAL : 1;           /*!< [5..5] Reset Message Valid                                                */
        __OM  uint32_t RESRTSEL : 1;            /*!< [6..6] Reset Receive/Transmit Selected                                    */
        __OM  uint32_t RESRXEN  : 1;            /*!< [7..7] Reset Receive Enable                                               */
        __OM  uint32_t RESTXRQ  : 1;            /*!< [8..8] Reset Transmit Request                                             */
        __OM  uint32_t RESTXEN0 : 1;            /*!< [9..9] Reset Transmit Enable 0                                            */
        __OM  uint32_t RESTXEN1 : 1;            /*!< [10..10] Reset Transmit Enable 1                                          */
        __OM  uint32_t RESDIR_SETDIR : 1;       /*!< [11..11] Reset Message Direction                                          */
              uint32_t          : 4;
        __OM  uint32_t SETRXPND : 1;            /*!< [16..16] Set Receive Pending                                              */
        __OM  uint32_t SETTXPND : 1;            /*!< [17..17] Set Transmit Pending                                             */
        __OM  uint32_t SETRXUPD : 1;            /*!< [18..18] Set Receive Updating                                             */
        __OM  uint32_t SETNEWDAT : 1;           /*!< [19..19] Set New Data                                                     */
        __OM  uint32_t SETMSGLST : 1;           /*!< [20..20] Set Message Lost                                                 */
        __OM  uint32_t SETMSGVAL : 1;           /*!< [21..21] Set Message Valid                                                */
        __OM  uint32_t SETRTSEL : 1;            /*!< [22..22] Set Receive/Transmit Selected                                    */
        __OM  uint32_t SETRXEN  : 1;            /*!< [23..23] Set Receive Enable                                               */
        __OM  uint32_t SETTXRQ  : 1;            /*!< [24..24] Set Transmit Request                                             */
        __OM  uint32_t SETTXEN0 : 1;            /*!< [25..25] Set Transmit Enable 0                                            */
        __OM  uint32_t SETTXEN1 : 1;            /*!< [26..26] Set Transmit Enable 1                                            */
        __OM  uint32_t SETDIR   : 1;            /*!< [27..27] Set Message Direction                                            */
              uint32_t          : 4;
      } bit;
    } CAN_MOCTR0;
    
    union {
      __IM  uint32_t reg;                       /*!< (@ 0x00000F1C) Message Object 0 Status Register                           */
      
      struct {
        __IM  uint32_t RXPND    : 1;            /*!< [0..0] Receive Pending                                                    */
        __IM  uint32_t TXPND    : 1;            /*!< [1..1] Transmit Pending                                                   */
        __IM  uint32_t RXUPD    : 1;            /*!< [2..2] Receive Updating                                                   */
        __IM  uint32_t NEWDAT   : 1;            /*!< [3..3] New Data                                                           */
        __IM  uint32_t MSGLST   : 1;            /*!< [4..4] Message Lost                                                       */
        __IM  uint32_t MSGVAL   : 1;            /*!< [5..5] Message Valid                                                      */
        __IM  uint32_t RTSEL    : 1;            /*!< [6..6] Receive/Transmit Selected                                          */
        __IM  uint32_t RXEN     : 1;            /*!< [7..7] Receive Enable                                                     */
        __IM  uint32_t TXRQ     : 1;            /*!< [8..8] Transmit Request                                                   */
        __IM  uint32_t TXEN0    : 1;            /*!< [9..9] Transmit Enable 0                                                  */
        __IM  uint32_t TXEN1    : 1;            /*!< [10..10] Transmit Enable 1                                                */
        __IM  uint32_t DIR      : 1;            /*!< [11..11] Message Direction                                                */
        __IM  uint32_t LIST     : 4;            /*!< [15..12] List Allocation                                                  */
        __IM  uint32_t PPREV    : 8;            /*!< [23..16] Pointer to Previous Message Object                               */
        __IM  uint32_t PNEXT    : 8;            /*!< [31..24] Pointer to Next Message Object                                   */
      } bit;
    } CAN_MOSTAT0;
  } OBJ0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F20) Message Object 1 Function Control Register                 */
    
    struct {
      __IOM uint32_t MMC        : 4;            /*!< [3..0] Message Mode Control                                               */
            uint32_t            : 1;
      __IOM uint32_t BRS        : 1;            /*!< [5..5] Bit Rate Switch                                                    */
      __IOM uint32_t FDF        : 1;            /*!< [6..6] CAN FD Frame Format                                                */
            uint32_t            : 1;
      __IOM uint32_t GDFS       : 1;            /*!< [8..8] Gateway Data Frame Send                                            */
      __IOM uint32_t IDC        : 1;            /*!< [9..9] Identifier Copy                                                    */
      __IOM uint32_t DLCC       : 1;            /*!< [10..10] Data Length Code Copy                                            */
      __IOM uint32_t DATC       : 1;            /*!< [11..11] Data Copy                                                        */
            uint32_t            : 4;
      __IOM uint32_t RXIE       : 1;            /*!< [16..16] Receive Interrupt Enable                                         */
      __IOM uint32_t TXIE       : 1;            /*!< [17..17] Transmit Interrupt Enable                                        */
      __IOM uint32_t OVIE       : 1;            /*!< [18..18] Overflow Interrupt Enable                                        */
            uint32_t            : 1;
      __IOM uint32_t FRREN      : 1;            /*!< [20..20] Foreign Remote Request Enable                                    */
      __IOM uint32_t RMM        : 1;            /*!< [21..21] Transmit Object Remote Monitoring                                */
      __IOM uint32_t SDT        : 1;            /*!< [22..22] Single Data Transfer                                             */
      __IOM uint32_t STT        : 1;            /*!< [23..23] Single Transmit Trial                                            */
      __IOM uint32_t DLC        : 4;            /*!< [27..24] Data Length Code                                                 */
            uint32_t            : 4;
    } bit;
  } CAN_MOFCR1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F24) Message Object 1 FIFO/Gateway Pointer Register             */
    
    struct {
      __IOM uint32_t BOT        : 8;            /*!< [7..0] Bottom Pointer                                                     */
      __IOM uint32_t TOP        : 8;            /*!< [15..8] Top Pointer                                                       */
      __IOM uint32_t CUR        : 8;            /*!< [23..16] Current Object Pointer                                           */
      __IOM uint32_t SEL        : 8;            /*!< [31..24] Object Select Pointer                                            */
    } bit;
  } CAN_MOFGPR1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F28) Message Object 1 Interrupt Pointer Register                */
    
    struct {
      __IOM uint32_t RXINP      : 4;            /*!< [3..0] Receive Interrupt Node Pointer                                     */
      __IOM uint32_t TXINP      : 4;            /*!< [7..4] Transmit Interrupt Node Pointer                                    */
      __IOM uint32_t MPN        : 8;            /*!< [15..8] Message Pending Number                                            */
      __IOM uint32_t CFCVAL     : 16;           /*!< [31..16] CAN Frame Counter Value                                          */
    } bit;
  } CAN_MOIPR1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F2C) Message Object 1 Acceptance Mask Register                  */
    
    struct {
      __IOM uint32_t AM         : 29;           /*!< [28..0] Acceptance Mask for Message Identifier                            */
      __IOM uint32_t MIDE       : 1;            /*!< [29..29] Acceptance Mask Bit for Message IDE Bit                          */
            uint32_t            : 2;
    } bit;
  } CAN_MOAMR1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F30) Message Object 1 Data Register Low                         */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_MODATAL1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F34) Message Object 1 Data Register High                        */
    
    struct {
      __IOM uint32_t DB4        : 8;            /*!< [7..0] Data Byte 4 of Message Object n                                    */
      __IOM uint32_t DB5        : 8;            /*!< [15..8] Data Byte 5 of Message Object n                                   */
      __IOM uint32_t DB6        : 8;            /*!< [23..16] Data Byte 6 of Message Object n                                  */
      __IOM uint32_t DB7        : 8;            /*!< [31..24] Data Byte 7 of Message Object n                                  */
    } bit;
  } CAN_MODATAH1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F38) Message Object 1 Arbitration Register                      */
    
    struct {
      __IOM uint32_t ID         : 29;           /*!< [28..0] CAN Identifier of Message Object n                                */
      __IOM uint32_t IDE        : 1;            /*!< [29..29] Identifier Extension Bit of Message Object n                     */
      __IOM uint32_t PRI        : 2;            /*!< [31..30] Priority Class                                                   */
    } bit;
  } CAN_MOAR1;
  
  union {
    union {
      __OM  uint32_t reg;                       /*!< (@ 0x00000F3C) Message Object 1 Control Register                          */
      
      struct {
        __OM  uint32_t RESRXPND : 1;            /*!< [0..0] Reset Receive Pending                                              */
        __OM  uint32_t RESTXPND : 1;            /*!< [1..1] Reset Transmit Pending                                             */
        __OM  uint32_t RESRXUPD : 1;            /*!< [2..2] Reset Receive Updating                                             */
        __OM  uint32_t RESNEWDAT : 1;           /*!< [3..3] Reset New Data                                                     */
        __OM  uint32_t RESMSGLST : 1;           /*!< [4..4] Reset Message Lost                                                 */
        __OM  uint32_t RESMSGVAL : 1;           /*!< [5..5] Reset Message Valid                                                */
        __OM  uint32_t RESRTSEL : 1;            /*!< [6..6] Reset Receive/Transmit Selected                                    */
        __OM  uint32_t RESRXEN  : 1;            /*!< [7..7] Reset Receive Enable                                               */
        __OM  uint32_t RESTXRQ  : 1;            /*!< [8..8] Reset Transmit Request                                             */
        __OM  uint32_t RESTXEN0 : 1;            /*!< [9..9] Reset Transmit Enable 0                                            */
        __OM  uint32_t RESTXEN1 : 1;            /*!< [10..10] Reset Transmit Enable 1                                          */
        __OM  uint32_t RESDIR_SETDIR : 1;       /*!< [11..11] Reset Message Direction                                          */
              uint32_t          : 4;
        __OM  uint32_t SETRXPND : 1;            /*!< [16..16] Set Receive Pending                                              */
        __OM  uint32_t SETTXPND : 1;            /*!< [17..17] Set Transmit Pending                                             */
        __OM  uint32_t SETRXUPD : 1;            /*!< [18..18] Set Receive Updating                                             */
        __OM  uint32_t SETNEWDAT : 1;           /*!< [19..19] Set New Data                                                     */
        __OM  uint32_t SETMSGLST : 1;           /*!< [20..20] Set Message Lost                                                 */
        __OM  uint32_t SETMSGVAL : 1;           /*!< [21..21] Set Message Valid                                                */
        __OM  uint32_t SETRTSEL : 1;            /*!< [22..22] Set Receive/Transmit Selected                                    */
        __OM  uint32_t SETRXEN  : 1;            /*!< [23..23] Set Receive Enable                                               */
        __OM  uint32_t SETTXRQ  : 1;            /*!< [24..24] Set Transmit Request                                             */
        __OM  uint32_t SETTXEN0 : 1;            /*!< [25..25] Set Transmit Enable 0                                            */
        __OM  uint32_t SETTXEN1 : 1;            /*!< [26..26] Set Transmit Enable 1                                            */
        __OM  uint32_t SETDIR   : 1;            /*!< [27..27] Set Message Direction                                            */
              uint32_t          : 4;
      } bit;
    } CAN_MOCTR1;
    
    union {
      __IM  uint32_t reg;                       /*!< (@ 0x00000F3C) Message Object 1 Status Register                           */
      
      struct {
        __IM  uint32_t RXPND    : 1;            /*!< [0..0] Receive Pending                                                    */
        __IM  uint32_t TXPND    : 1;            /*!< [1..1] Transmit Pending                                                   */
        __IM  uint32_t RXUPD    : 1;            /*!< [2..2] Receive Updating                                                   */
        __IM  uint32_t NEWDAT   : 1;            /*!< [3..3] New Data                                                           */
        __IM  uint32_t MSGLST   : 1;            /*!< [4..4] Message Lost                                                       */
        __IM  uint32_t MSGVAL   : 1;            /*!< [5..5] Message Valid                                                      */
        __IM  uint32_t RTSEL    : 1;            /*!< [6..6] Receive/Transmit Selected                                          */
        __IM  uint32_t RXEN     : 1;            /*!< [7..7] Receive Enable                                                     */
        __IM  uint32_t TXRQ     : 1;            /*!< [8..8] Transmit Request                                                   */
        __IM  uint32_t TXEN0    : 1;            /*!< [9..9] Transmit Enable 0                                                  */
        __IM  uint32_t TXEN1    : 1;            /*!< [10..10] Transmit Enable 1                                                */
        __IM  uint32_t DIR      : 1;            /*!< [11..11] Message Direction                                                */
        __IM  uint32_t LIST     : 4;            /*!< [15..12] List Allocation                                                  */
        __IM  uint32_t PPREV    : 8;            /*!< [23..16] Pointer to Previous Message Object                               */
        __IM  uint32_t PNEXT    : 8;            /*!< [31..24] Pointer to Next Message Object                                   */
      } bit;
    } CAN_MOSTAT1;
  } OBJ1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F40) Message Object 2 Function Control Register                 */
    
    struct {
      __IOM uint32_t MMC        : 4;            /*!< [3..0] Message Mode Control                                               */
            uint32_t            : 1;
      __IOM uint32_t BRS        : 1;            /*!< [5..5] Bit Rate Switch                                                    */
      __IOM uint32_t FDF        : 1;            /*!< [6..6] CAN FD Frame Format                                                */
            uint32_t            : 1;
      __IOM uint32_t GDFS       : 1;            /*!< [8..8] Gateway Data Frame Send                                            */
      __IOM uint32_t IDC        : 1;            /*!< [9..9] Identifier Copy                                                    */
      __IOM uint32_t DLCC       : 1;            /*!< [10..10] Data Length Code Copy                                            */
      __IOM uint32_t DATC       : 1;            /*!< [11..11] Data Copy                                                        */
            uint32_t            : 4;
      __IOM uint32_t RXIE       : 1;            /*!< [16..16] Receive Interrupt Enable                                         */
      __IOM uint32_t TXIE       : 1;            /*!< [17..17] Transmit Interrupt Enable                                        */
      __IOM uint32_t OVIE       : 1;            /*!< [18..18] Overflow Interrupt Enable                                        */
            uint32_t            : 1;
      __IOM uint32_t FRREN      : 1;            /*!< [20..20] Foreign Remote Request Enable                                    */
      __IOM uint32_t RMM        : 1;            /*!< [21..21] Transmit Object Remote Monitoring                                */
      __IOM uint32_t SDT        : 1;            /*!< [22..22] Single Data Transfer                                             */
      __IOM uint32_t STT        : 1;            /*!< [23..23] Single Transmit Trial                                            */
      __IOM uint32_t DLC        : 4;            /*!< [27..24] Data Length Code                                                 */
            uint32_t            : 4;
    } bit;
  } CAN_MOFCR2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F44) Message Object 2 FIFO/Gateway Pointer Register             */
    
    struct {
      __IOM uint32_t BOT        : 8;            /*!< [7..0] Bottom Pointer                                                     */
      __IOM uint32_t TOP        : 8;            /*!< [15..8] Top Pointer                                                       */
      __IOM uint32_t CUR        : 8;            /*!< [23..16] Current Object Pointer                                           */
      __IOM uint32_t SEL        : 8;            /*!< [31..24] Object Select Pointer                                            */
    } bit;
  } CAN_MOFGPR2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F48) Message Object 2 Interrupt Pointer Register                */
    
    struct {
      __IOM uint32_t RXINP      : 4;            /*!< [3..0] Receive Interrupt Node Pointer                                     */
      __IOM uint32_t TXINP      : 4;            /*!< [7..4] Transmit Interrupt Node Pointer                                    */
      __IOM uint32_t MPN        : 8;            /*!< [15..8] Message Pending Number                                            */
      __IOM uint32_t CFCVAL     : 16;           /*!< [31..16] CAN Frame Counter Value                                          */
    } bit;
  } CAN_MOIPR2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F4C) Message Object 2 Acceptance Mask Register                  */
    
    struct {
      __IOM uint32_t AM         : 29;           /*!< [28..0] Acceptance Mask for Message Identifier                            */
      __IOM uint32_t MIDE       : 1;            /*!< [29..29] Acceptance Mask Bit for Message IDE Bit                          */
            uint32_t            : 2;
    } bit;
  } CAN_MOAMR2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F50) Message Object 2 Data Register Low                         */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_MODATAL2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F54) Message Object 2 Data Register High                        */
    
    struct {
      __IOM uint32_t DB4        : 8;            /*!< [7..0] Data Byte 4 of Message Object n                                    */
      __IOM uint32_t DB5        : 8;            /*!< [15..8] Data Byte 5 of Message Object n                                   */
      __IOM uint32_t DB6        : 8;            /*!< [23..16] Data Byte 6 of Message Object n                                  */
      __IOM uint32_t DB7        : 8;            /*!< [31..24] Data Byte 7 of Message Object n                                  */
    } bit;
  } CAN_MODATAH2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F58) Message Object 2 Arbitration Register                      */
    
    struct {
      __IOM uint32_t ID         : 29;           /*!< [28..0] CAN Identifier of Message Object n                                */
      __IOM uint32_t IDE        : 1;            /*!< [29..29] Identifier Extension Bit of Message Object n                     */
      __IOM uint32_t PRI        : 2;            /*!< [31..30] Priority Class                                                   */
    } bit;
  } CAN_MOAR2;
  
  union {
    union {
      __OM  uint32_t reg;                       /*!< (@ 0x00000F5C) Message Object 2 Control Register                          */
      
      struct {
        __OM  uint32_t RESRXPND : 1;            /*!< [0..0] Reset Receive Pending                                              */
        __OM  uint32_t RESTXPND : 1;            /*!< [1..1] Reset Transmit Pending                                             */
        __OM  uint32_t RESRXUPD : 1;            /*!< [2..2] Reset Receive Updating                                             */
        __OM  uint32_t RESNEWDAT : 1;           /*!< [3..3] Reset New Data                                                     */
        __OM  uint32_t RESMSGLST : 1;           /*!< [4..4] Reset Message Lost                                                 */
        __OM  uint32_t RESMSGVAL : 1;           /*!< [5..5] Reset Message Valid                                                */
        __OM  uint32_t RESRTSEL : 1;            /*!< [6..6] Reset Receive/Transmit Selected                                    */
        __OM  uint32_t RESRXEN  : 1;            /*!< [7..7] Reset Receive Enable                                               */
        __OM  uint32_t RESTXRQ  : 1;            /*!< [8..8] Reset Transmit Request                                             */
        __OM  uint32_t RESTXEN0 : 1;            /*!< [9..9] Reset Transmit Enable 0                                            */
        __OM  uint32_t RESTXEN1 : 1;            /*!< [10..10] Reset Transmit Enable 1                                          */
        __OM  uint32_t RESDIR_SETDIR : 1;       /*!< [11..11] Reset Message Direction                                          */
              uint32_t          : 4;
        __OM  uint32_t SETRXPND : 1;            /*!< [16..16] Set Receive Pending                                              */
        __OM  uint32_t SETTXPND : 1;            /*!< [17..17] Set Transmit Pending                                             */
        __OM  uint32_t SETRXUPD : 1;            /*!< [18..18] Set Receive Updating                                             */
        __OM  uint32_t SETNEWDAT : 1;           /*!< [19..19] Set New Data                                                     */
        __OM  uint32_t SETMSGLST : 1;           /*!< [20..20] Set Message Lost                                                 */
        __OM  uint32_t SETMSGVAL : 1;           /*!< [21..21] Set Message Valid                                                */
        __OM  uint32_t SETRTSEL : 1;            /*!< [22..22] Set Receive/Transmit Selected                                    */
        __OM  uint32_t SETRXEN  : 1;            /*!< [23..23] Set Receive Enable                                               */
        __OM  uint32_t SETTXRQ  : 1;            /*!< [24..24] Set Transmit Request                                             */
        __OM  uint32_t SETTXEN0 : 1;            /*!< [25..25] Set Transmit Enable 0                                            */
        __OM  uint32_t SETTXEN1 : 1;            /*!< [26..26] Set Transmit Enable 1                                            */
        __OM  uint32_t SETDIR   : 1;            /*!< [27..27] Set Message Direction                                            */
              uint32_t          : 4;
      } bit;
    } CAN_MOCTR2;
    
    union {
      __IM  uint32_t reg;                       /*!< (@ 0x00000F5C) Message Object 2 Status Register                           */
      
      struct {
        __IM  uint32_t RXPND    : 1;            /*!< [0..0] Receive Pending                                                    */
        __IM  uint32_t TXPND    : 1;            /*!< [1..1] Transmit Pending                                                   */
        __IM  uint32_t RXUPD    : 1;            /*!< [2..2] Receive Updating                                                   */
        __IM  uint32_t NEWDAT   : 1;            /*!< [3..3] New Data                                                           */
        __IM  uint32_t MSGLST   : 1;            /*!< [4..4] Message Lost                                                       */
        __IM  uint32_t MSGVAL   : 1;            /*!< [5..5] Message Valid                                                      */
        __IM  uint32_t RTSEL    : 1;            /*!< [6..6] Receive/Transmit Selected                                          */
        __IM  uint32_t RXEN     : 1;            /*!< [7..7] Receive Enable                                                     */
        __IM  uint32_t TXRQ     : 1;            /*!< [8..8] Transmit Request                                                   */
        __IM  uint32_t TXEN0    : 1;            /*!< [9..9] Transmit Enable 0                                                  */
        __IM  uint32_t TXEN1    : 1;            /*!< [10..10] Transmit Enable 1                                                */
        __IM  uint32_t DIR      : 1;            /*!< [11..11] Message Direction                                                */
        __IM  uint32_t LIST     : 4;            /*!< [15..12] List Allocation                                                  */
        __IM  uint32_t PPREV    : 8;            /*!< [23..16] Pointer to Previous Message Object                               */
        __IM  uint32_t PNEXT    : 8;            /*!< [31..24] Pointer to Next Message Object                                   */
      } bit;
    } CAN_MOSTAT2;
  } OBJ2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F60) Message Object 3 Function Control Register                 */
    
    struct {
      __IOM uint32_t MMC        : 4;            /*!< [3..0] Message Mode Control                                               */
            uint32_t            : 1;
      __IOM uint32_t BRS        : 1;            /*!< [5..5] Bit Rate Switch                                                    */
      __IOM uint32_t FDF        : 1;            /*!< [6..6] CAN FD Frame Format                                                */
            uint32_t            : 1;
      __IOM uint32_t GDFS       : 1;            /*!< [8..8] Gateway Data Frame Send                                            */
      __IOM uint32_t IDC        : 1;            /*!< [9..9] Identifier Copy                                                    */
      __IOM uint32_t DLCC       : 1;            /*!< [10..10] Data Length Code Copy                                            */
      __IOM uint32_t DATC       : 1;            /*!< [11..11] Data Copy                                                        */
            uint32_t            : 4;
      __IOM uint32_t RXIE       : 1;            /*!< [16..16] Receive Interrupt Enable                                         */
      __IOM uint32_t TXIE       : 1;            /*!< [17..17] Transmit Interrupt Enable                                        */
      __IOM uint32_t OVIE       : 1;            /*!< [18..18] Overflow Interrupt Enable                                        */
            uint32_t            : 1;
      __IOM uint32_t FRREN      : 1;            /*!< [20..20] Foreign Remote Request Enable                                    */
      __IOM uint32_t RMM        : 1;            /*!< [21..21] Transmit Object Remote Monitoring                                */
      __IOM uint32_t SDT        : 1;            /*!< [22..22] Single Data Transfer                                             */
      __IOM uint32_t STT        : 1;            /*!< [23..23] Single Transmit Trial                                            */
      __IOM uint32_t DLC        : 4;            /*!< [27..24] Data Length Code                                                 */
            uint32_t            : 4;
    } bit;
  } CAN_MOFCR3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F64) Message Object 3 FIFO/Gateway Pointer Register             */
    
    struct {
      __IOM uint32_t BOT        : 8;            /*!< [7..0] Bottom Pointer                                                     */
      __IOM uint32_t TOP        : 8;            /*!< [15..8] Top Pointer                                                       */
      __IOM uint32_t CUR        : 8;            /*!< [23..16] Current Object Pointer                                           */
      __IOM uint32_t SEL        : 8;            /*!< [31..24] Object Select Pointer                                            */
    } bit;
  } CAN_MOFGPR3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F68) Message Object 3 Interrupt Pointer Register                */
    
    struct {
      __IOM uint32_t RXINP      : 4;            /*!< [3..0] Receive Interrupt Node Pointer                                     */
      __IOM uint32_t TXINP      : 4;            /*!< [7..4] Transmit Interrupt Node Pointer                                    */
      __IOM uint32_t MPN        : 8;            /*!< [15..8] Message Pending Number                                            */
      __IOM uint32_t CFCVAL     : 16;           /*!< [31..16] CAN Frame Counter Value                                          */
    } bit;
  } CAN_MOIPR3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F6C) Message Object 3 Acceptance Mask Register                  */
    
    struct {
      __IOM uint32_t AM         : 29;           /*!< [28..0] Acceptance Mask for Message Identifier                            */
      __IOM uint32_t MIDE       : 1;            /*!< [29..29] Acceptance Mask Bit for Message IDE Bit                          */
            uint32_t            : 2;
    } bit;
  } CAN_MOAMR3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F70) Message Object 3 Data Register Low                         */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_MODATAL3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F74) Message Object 3 Data Register High                        */
    
    struct {
      __IOM uint32_t DB4        : 8;            /*!< [7..0] Data Byte 4 of Message Object n                                    */
      __IOM uint32_t DB5        : 8;            /*!< [15..8] Data Byte 5 of Message Object n                                   */
      __IOM uint32_t DB6        : 8;            /*!< [23..16] Data Byte 6 of Message Object n                                  */
      __IOM uint32_t DB7        : 8;            /*!< [31..24] Data Byte 7 of Message Object n                                  */
    } bit;
  } CAN_MODATAH3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F78) Message Object 3 Arbitration Register                      */
    
    struct {
      __IOM uint32_t ID         : 29;           /*!< [28..0] CAN Identifier of Message Object n                                */
      __IOM uint32_t IDE        : 1;            /*!< [29..29] Identifier Extension Bit of Message Object n                     */
      __IOM uint32_t PRI        : 2;            /*!< [31..30] Priority Class                                                   */
    } bit;
  } CAN_MOAR3;
  
  union {
    union {
      __OM  uint32_t reg;                       /*!< (@ 0x00000F7C) Message Object 3 Control Register                          */
      
      struct {
        __OM  uint32_t RESRXPND : 1;            /*!< [0..0] Reset Receive Pending                                              */
        __OM  uint32_t RESTXPND : 1;            /*!< [1..1] Reset Transmit Pending                                             */
        __OM  uint32_t RESRXUPD : 1;            /*!< [2..2] Reset Receive Updating                                             */
        __OM  uint32_t RESNEWDAT : 1;           /*!< [3..3] Reset New Data                                                     */
        __OM  uint32_t RESMSGLST : 1;           /*!< [4..4] Reset Message Lost                                                 */
        __OM  uint32_t RESMSGVAL : 1;           /*!< [5..5] Reset Message Valid                                                */
        __OM  uint32_t RESRTSEL : 1;            /*!< [6..6] Reset Receive/Transmit Selected                                    */
        __OM  uint32_t RESRXEN  : 1;            /*!< [7..7] Reset Receive Enable                                               */
        __OM  uint32_t RESTXRQ  : 1;            /*!< [8..8] Reset Transmit Request                                             */
        __OM  uint32_t RESTXEN0 : 1;            /*!< [9..9] Reset Transmit Enable 0                                            */
        __OM  uint32_t RESTXEN1 : 1;            /*!< [10..10] Reset Transmit Enable 1                                          */
        __OM  uint32_t RESDIR_SETDIR : 1;       /*!< [11..11] Reset Message Direction                                          */
              uint32_t          : 4;
        __OM  uint32_t SETRXPND : 1;            /*!< [16..16] Set Receive Pending                                              */
        __OM  uint32_t SETTXPND : 1;            /*!< [17..17] Set Transmit Pending                                             */
        __OM  uint32_t SETRXUPD : 1;            /*!< [18..18] Set Receive Updating                                             */
        __OM  uint32_t SETNEWDAT : 1;           /*!< [19..19] Set New Data                                                     */
        __OM  uint32_t SETMSGLST : 1;           /*!< [20..20] Set Message Lost                                                 */
        __OM  uint32_t SETMSGVAL : 1;           /*!< [21..21] Set Message Valid                                                */
        __OM  uint32_t SETRTSEL : 1;            /*!< [22..22] Set Receive/Transmit Selected                                    */
        __OM  uint32_t SETRXEN  : 1;            /*!< [23..23] Set Receive Enable                                               */
        __OM  uint32_t SETTXRQ  : 1;            /*!< [24..24] Set Transmit Request                                             */
        __OM  uint32_t SETTXEN0 : 1;            /*!< [25..25] Set Transmit Enable 0                                            */
        __OM  uint32_t SETTXEN1 : 1;            /*!< [26..26] Set Transmit Enable 1                                            */
        __OM  uint32_t SETDIR   : 1;            /*!< [27..27] Set Message Direction                                            */
              uint32_t          : 4;
      } bit;
    } CAN_MOCTR3;
    
    union {
      __IM  uint32_t reg;                       /*!< (@ 0x00000F7C) Message Object 3 Status Register                           */
      
      struct {
        __IM  uint32_t RXPND    : 1;            /*!< [0..0] Receive Pending                                                    */
        __IM  uint32_t TXPND    : 1;            /*!< [1..1] Transmit Pending                                                   */
        __IM  uint32_t RXUPD    : 1;            /*!< [2..2] Receive Updating                                                   */
        __IM  uint32_t NEWDAT   : 1;            /*!< [3..3] New Data                                                           */
        __IM  uint32_t MSGLST   : 1;            /*!< [4..4] Message Lost                                                       */
        __IM  uint32_t MSGVAL   : 1;            /*!< [5..5] Message Valid                                                      */
        __IM  uint32_t RTSEL    : 1;            /*!< [6..6] Receive/Transmit Selected                                          */
        __IM  uint32_t RXEN     : 1;            /*!< [7..7] Receive Enable                                                     */
        __IM  uint32_t TXRQ     : 1;            /*!< [8..8] Transmit Request                                                   */
        __IM  uint32_t TXEN0    : 1;            /*!< [9..9] Transmit Enable 0                                                  */
        __IM  uint32_t TXEN1    : 1;            /*!< [10..10] Transmit Enable 1                                                */
        __IM  uint32_t DIR      : 1;            /*!< [11..11] Message Direction                                                */
        __IM  uint32_t LIST     : 4;            /*!< [15..12] List Allocation                                                  */
        __IM  uint32_t PPREV    : 8;            /*!< [23..16] Pointer to Previous Message Object                               */
        __IM  uint32_t PNEXT    : 8;            /*!< [31..24] Pointer to Next Message Object                                   */
      } bit;
    } CAN_MOSTAT3;
  } OBJ3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F80) Message Object 4 Function Control Register                 */
    
    struct {
      __IOM uint32_t MMC        : 4;            /*!< [3..0] Message Mode Control                                               */
            uint32_t            : 1;
      __IOM uint32_t BRS        : 1;            /*!< [5..5] Bit Rate Switch                                                    */
      __IOM uint32_t FDF        : 1;            /*!< [6..6] CAN FD Frame Format                                                */
            uint32_t            : 1;
      __IOM uint32_t GDFS       : 1;            /*!< [8..8] Gateway Data Frame Send                                            */
      __IOM uint32_t IDC        : 1;            /*!< [9..9] Identifier Copy                                                    */
      __IOM uint32_t DLCC       : 1;            /*!< [10..10] Data Length Code Copy                                            */
      __IOM uint32_t DATC       : 1;            /*!< [11..11] Data Copy                                                        */
            uint32_t            : 4;
      __IOM uint32_t RXIE       : 1;            /*!< [16..16] Receive Interrupt Enable                                         */
      __IOM uint32_t TXIE       : 1;            /*!< [17..17] Transmit Interrupt Enable                                        */
      __IOM uint32_t OVIE       : 1;            /*!< [18..18] Overflow Interrupt Enable                                        */
            uint32_t            : 1;
      __IOM uint32_t FRREN      : 1;            /*!< [20..20] Foreign Remote Request Enable                                    */
      __IOM uint32_t RMM        : 1;            /*!< [21..21] Transmit Object Remote Monitoring                                */
      __IOM uint32_t SDT        : 1;            /*!< [22..22] Single Data Transfer                                             */
      __IOM uint32_t STT        : 1;            /*!< [23..23] Single Transmit Trial                                            */
      __IOM uint32_t DLC        : 4;            /*!< [27..24] Data Length Code                                                 */
            uint32_t            : 4;
    } bit;
  } CAN_MOFCR4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F84) Message Object 4 FIFO/Gateway Pointer Register             */
    
    struct {
      __IOM uint32_t BOT        : 8;            /*!< [7..0] Bottom Pointer                                                     */
      __IOM uint32_t TOP        : 8;            /*!< [15..8] Top Pointer                                                       */
      __IOM uint32_t CUR        : 8;            /*!< [23..16] Current Object Pointer                                           */
      __IOM uint32_t SEL        : 8;            /*!< [31..24] Object Select Pointer                                            */
    } bit;
  } CAN_MOFGPR4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F88) Message Object 4 Interrupt Pointer Register                */
    
    struct {
      __IOM uint32_t RXINP      : 4;            /*!< [3..0] Receive Interrupt Node Pointer                                     */
      __IOM uint32_t TXINP      : 4;            /*!< [7..4] Transmit Interrupt Node Pointer                                    */
      __IOM uint32_t MPN        : 8;            /*!< [15..8] Message Pending Number                                            */
      __IOM uint32_t CFCVAL     : 16;           /*!< [31..16] CAN Frame Counter Value                                          */
    } bit;
  } CAN_MOIPR4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F8C) Message Object 4 Acceptance Mask Register                  */
    
    struct {
      __IOM uint32_t AM         : 29;           /*!< [28..0] Acceptance Mask for Message Identifier                            */
      __IOM uint32_t MIDE       : 1;            /*!< [29..29] Acceptance Mask Bit for Message IDE Bit                          */
            uint32_t            : 2;
    } bit;
  } CAN_MOAMR4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F90) Message Object 4 Data Register Low                         */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_MODATAL4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F94) Message Object 4 Data Register High                        */
    
    struct {
      __IOM uint32_t DB4        : 8;            /*!< [7..0] Data Byte 4 of Message Object n                                    */
      __IOM uint32_t DB5        : 8;            /*!< [15..8] Data Byte 5 of Message Object n                                   */
      __IOM uint32_t DB6        : 8;            /*!< [23..16] Data Byte 6 of Message Object n                                  */
      __IOM uint32_t DB7        : 8;            /*!< [31..24] Data Byte 7 of Message Object n                                  */
    } bit;
  } CAN_MODATAH4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F98) Message Object 4 Arbitration Register                      */
    
    struct {
      __IOM uint32_t ID         : 29;           /*!< [28..0] CAN Identifier of Message Object n                                */
      __IOM uint32_t IDE        : 1;            /*!< [29..29] Identifier Extension Bit of Message Object n                     */
      __IOM uint32_t PRI        : 2;            /*!< [31..30] Priority Class                                                   */
    } bit;
  } CAN_MOAR4;
  
  union {
    union {
      __OM  uint32_t reg;                       /*!< (@ 0x00000F9C) Message Object 4 Control Register                          */
      
      struct {
        __OM  uint32_t RESRXPND : 1;            /*!< [0..0] Reset Receive Pending                                              */
        __OM  uint32_t RESTXPND : 1;            /*!< [1..1] Reset Transmit Pending                                             */
        __OM  uint32_t RESRXUPD : 1;            /*!< [2..2] Reset Receive Updating                                             */
        __OM  uint32_t RESNEWDAT : 1;           /*!< [3..3] Reset New Data                                                     */
        __OM  uint32_t RESMSGLST : 1;           /*!< [4..4] Reset Message Lost                                                 */
        __OM  uint32_t RESMSGVAL : 1;           /*!< [5..5] Reset Message Valid                                                */
        __OM  uint32_t RESRTSEL : 1;            /*!< [6..6] Reset Receive/Transmit Selected                                    */
        __OM  uint32_t RESRXEN  : 1;            /*!< [7..7] Reset Receive Enable                                               */
        __OM  uint32_t RESTXRQ  : 1;            /*!< [8..8] Reset Transmit Request                                             */
        __OM  uint32_t RESTXEN0 : 1;            /*!< [9..9] Reset Transmit Enable 0                                            */
        __OM  uint32_t RESTXEN1 : 1;            /*!< [10..10] Reset Transmit Enable 1                                          */
        __OM  uint32_t RESDIR_SETDIR : 1;       /*!< [11..11] Reset Message Direction                                          */
              uint32_t          : 4;
        __OM  uint32_t SETRXPND : 1;            /*!< [16..16] Set Receive Pending                                              */
        __OM  uint32_t SETTXPND : 1;            /*!< [17..17] Set Transmit Pending                                             */
        __OM  uint32_t SETRXUPD : 1;            /*!< [18..18] Set Receive Updating                                             */
        __OM  uint32_t SETNEWDAT : 1;           /*!< [19..19] Set New Data                                                     */
        __OM  uint32_t SETMSGLST : 1;           /*!< [20..20] Set Message Lost                                                 */
        __OM  uint32_t SETMSGVAL : 1;           /*!< [21..21] Set Message Valid                                                */
        __OM  uint32_t SETRTSEL : 1;            /*!< [22..22] Set Receive/Transmit Selected                                    */
        __OM  uint32_t SETRXEN  : 1;            /*!< [23..23] Set Receive Enable                                               */
        __OM  uint32_t SETTXRQ  : 1;            /*!< [24..24] Set Transmit Request                                             */
        __OM  uint32_t SETTXEN0 : 1;            /*!< [25..25] Set Transmit Enable 0                                            */
        __OM  uint32_t SETTXEN1 : 1;            /*!< [26..26] Set Transmit Enable 1                                            */
        __OM  uint32_t SETDIR   : 1;            /*!< [27..27] Set Message Direction                                            */
              uint32_t          : 4;
      } bit;
    } CAN_MOCTR4;
    
    union {
      __IM  uint32_t reg;                       /*!< (@ 0x00000F9C) Message Object 4 Status Register                           */
      
      struct {
        __IM  uint32_t RXPND    : 1;            /*!< [0..0] Receive Pending                                                    */
        __IM  uint32_t TXPND    : 1;            /*!< [1..1] Transmit Pending                                                   */
        __IM  uint32_t RXUPD    : 1;            /*!< [2..2] Receive Updating                                                   */
        __IM  uint32_t NEWDAT   : 1;            /*!< [3..3] New Data                                                           */
        __IM  uint32_t MSGLST   : 1;            /*!< [4..4] Message Lost                                                       */
        __IM  uint32_t MSGVAL   : 1;            /*!< [5..5] Message Valid                                                      */
        __IM  uint32_t RTSEL    : 1;            /*!< [6..6] Receive/Transmit Selected                                          */
        __IM  uint32_t RXEN     : 1;            /*!< [7..7] Receive Enable                                                     */
        __IM  uint32_t TXRQ     : 1;            /*!< [8..8] Transmit Request                                                   */
        __IM  uint32_t TXEN0    : 1;            /*!< [9..9] Transmit Enable 0                                                  */
        __IM  uint32_t TXEN1    : 1;            /*!< [10..10] Transmit Enable 1                                                */
        __IM  uint32_t DIR      : 1;            /*!< [11..11] Message Direction                                                */
        __IM  uint32_t LIST     : 4;            /*!< [15..12] List Allocation                                                  */
        __IM  uint32_t PPREV    : 8;            /*!< [23..16] Pointer to Previous Message Object                               */
        __IM  uint32_t PNEXT    : 8;            /*!< [31..24] Pointer to Next Message Object                                   */
      } bit;
    } CAN_MOSTAT4;
  } OBJ4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000FA0) Message Object 5 Function Control Register                 */
    
    struct {
      __IOM uint32_t MMC        : 4;            /*!< [3..0] Message Mode Control                                               */
            uint32_t            : 1;
      __IOM uint32_t BRS        : 1;            /*!< [5..5] Bit Rate Switch                                                    */
      __IOM uint32_t FDF        : 1;            /*!< [6..6] CAN FD Frame Format                                                */
            uint32_t            : 1;
      __IOM uint32_t GDFS       : 1;            /*!< [8..8] Gateway Data Frame Send                                            */
      __IOM uint32_t IDC        : 1;            /*!< [9..9] Identifier Copy                                                    */
      __IOM uint32_t DLCC       : 1;            /*!< [10..10] Data Length Code Copy                                            */
      __IOM uint32_t DATC       : 1;            /*!< [11..11] Data Copy                                                        */
            uint32_t            : 4;
      __IOM uint32_t RXIE       : 1;            /*!< [16..16] Receive Interrupt Enable                                         */
      __IOM uint32_t TXIE       : 1;            /*!< [17..17] Transmit Interrupt Enable                                        */
      __IOM uint32_t OVIE       : 1;            /*!< [18..18] Overflow Interrupt Enable                                        */
            uint32_t            : 1;
      __IOM uint32_t FRREN      : 1;            /*!< [20..20] Foreign Remote Request Enable                                    */
      __IOM uint32_t RMM        : 1;            /*!< [21..21] Transmit Object Remote Monitoring                                */
      __IOM uint32_t SDT        : 1;            /*!< [22..22] Single Data Transfer                                             */
      __IOM uint32_t STT        : 1;            /*!< [23..23] Single Transmit Trial                                            */
      __IOM uint32_t DLC        : 4;            /*!< [27..24] Data Length Code                                                 */
            uint32_t            : 4;
    } bit;
  } CAN_MOFCR5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000FA4) Message Object 5 FIFO/Gateway Pointer Register             */
    
    struct {
      __IOM uint32_t BOT        : 8;            /*!< [7..0] Bottom Pointer                                                     */
      __IOM uint32_t TOP        : 8;            /*!< [15..8] Top Pointer                                                       */
      __IOM uint32_t CUR        : 8;            /*!< [23..16] Current Object Pointer                                           */
      __IOM uint32_t SEL        : 8;            /*!< [31..24] Object Select Pointer                                            */
    } bit;
  } CAN_MOFGPR5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000FA8) Message Object 5 Interrupt Pointer Register                */
    
    struct {
      __IOM uint32_t RXINP      : 4;            /*!< [3..0] Receive Interrupt Node Pointer                                     */
      __IOM uint32_t TXINP      : 4;            /*!< [7..4] Transmit Interrupt Node Pointer                                    */
      __IOM uint32_t MPN        : 8;            /*!< [15..8] Message Pending Number                                            */
      __IOM uint32_t CFCVAL     : 16;           /*!< [31..16] CAN Frame Counter Value                                          */
    } bit;
  } CAN_MOIPR5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000FAC) Message Object 5 Acceptance Mask Register                  */
    
    struct {
      __IOM uint32_t AM         : 29;           /*!< [28..0] Acceptance Mask for Message Identifier                            */
      __IOM uint32_t MIDE       : 1;            /*!< [29..29] Acceptance Mask Bit for Message IDE Bit                          */
            uint32_t            : 2;
    } bit;
  } CAN_MOAMR5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000FB0) Message Object 5 Data Register Low                         */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_MODATAL5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000FB4) Message Object 5 Data Register High                        */
    
    struct {
      __IOM uint32_t DB4        : 8;            /*!< [7..0] Data Byte 4 of Message Object n                                    */
      __IOM uint32_t DB5        : 8;            /*!< [15..8] Data Byte 5 of Message Object n                                   */
      __IOM uint32_t DB6        : 8;            /*!< [23..16] Data Byte 6 of Message Object n                                  */
      __IOM uint32_t DB7        : 8;            /*!< [31..24] Data Byte 7 of Message Object n                                  */
    } bit;
  } CAN_MODATAH5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000FB8) Message Object 5 Arbitration Register                      */
    
    struct {
      __IOM uint32_t ID         : 29;           /*!< [28..0] CAN Identifier of Message Object n                                */
      __IOM uint32_t IDE        : 1;            /*!< [29..29] Identifier Extension Bit of Message Object n                     */
      __IOM uint32_t PRI        : 2;            /*!< [31..30] Priority Class                                                   */
    } bit;
  } CAN_MOAR5;
  
  union {
    union {
      __OM  uint32_t reg;                       /*!< (@ 0x00000FBC) Message Object 5 Control Register                          */
      
      struct {
        __OM  uint32_t RESRXPND : 1;            /*!< [0..0] Reset Receive Pending                                              */
        __OM  uint32_t RESTXPND : 1;            /*!< [1..1] Reset Transmit Pending                                             */
        __OM  uint32_t RESRXUPD : 1;            /*!< [2..2] Reset Receive Updating                                             */
        __OM  uint32_t RESNEWDAT : 1;           /*!< [3..3] Reset New Data                                                     */
        __OM  uint32_t RESMSGLST : 1;           /*!< [4..4] Reset Message Lost                                                 */
        __OM  uint32_t RESMSGVAL : 1;           /*!< [5..5] Reset Message Valid                                                */
        __OM  uint32_t RESRTSEL : 1;            /*!< [6..6] Reset Receive/Transmit Selected                                    */
        __OM  uint32_t RESRXEN  : 1;            /*!< [7..7] Reset Receive Enable                                               */
        __OM  uint32_t RESTXRQ  : 1;            /*!< [8..8] Reset Transmit Request                                             */
        __OM  uint32_t RESTXEN0 : 1;            /*!< [9..9] Reset Transmit Enable 0                                            */
        __OM  uint32_t RESTXEN1 : 1;            /*!< [10..10] Reset Transmit Enable 1                                          */
        __OM  uint32_t RESDIR_SETDIR : 1;       /*!< [11..11] Reset Message Direction                                          */
              uint32_t          : 4;
        __OM  uint32_t SETRXPND : 1;            /*!< [16..16] Set Receive Pending                                              */
        __OM  uint32_t SETTXPND : 1;            /*!< [17..17] Set Transmit Pending                                             */
        __OM  uint32_t SETRXUPD : 1;            /*!< [18..18] Set Receive Updating                                             */
        __OM  uint32_t SETNEWDAT : 1;           /*!< [19..19] Set New Data                                                     */
        __OM  uint32_t SETMSGLST : 1;           /*!< [20..20] Set Message Lost                                                 */
        __OM  uint32_t SETMSGVAL : 1;           /*!< [21..21] Set Message Valid                                                */
        __OM  uint32_t SETRTSEL : 1;            /*!< [22..22] Set Receive/Transmit Selected                                    */
        __OM  uint32_t SETRXEN  : 1;            /*!< [23..23] Set Receive Enable                                               */
        __OM  uint32_t SETTXRQ  : 1;            /*!< [24..24] Set Transmit Request                                             */
        __OM  uint32_t SETTXEN0 : 1;            /*!< [25..25] Set Transmit Enable 0                                            */
        __OM  uint32_t SETTXEN1 : 1;            /*!< [26..26] Set Transmit Enable 1                                            */
        __OM  uint32_t SETDIR   : 1;            /*!< [27..27] Set Message Direction                                            */
              uint32_t          : 4;
      } bit;
    } CAN_MOCTR5;
    
    union {
      __IM  uint32_t reg;                       /*!< (@ 0x00000FBC) Message Object 5 Status Register                           */
      
      struct {
        __IM  uint32_t RXPND    : 1;            /*!< [0..0] Receive Pending                                                    */
        __IM  uint32_t TXPND    : 1;            /*!< [1..1] Transmit Pending                                                   */
        __IM  uint32_t RXUPD    : 1;            /*!< [2..2] Receive Updating                                                   */
        __IM  uint32_t NEWDAT   : 1;            /*!< [3..3] New Data                                                           */
        __IM  uint32_t MSGLST   : 1;            /*!< [4..4] Message Lost                                                       */
        __IM  uint32_t MSGVAL   : 1;            /*!< [5..5] Message Valid                                                      */
        __IM  uint32_t RTSEL    : 1;            /*!< [6..6] Receive/Transmit Selected                                          */
        __IM  uint32_t RXEN     : 1;            /*!< [7..7] Receive Enable                                                     */
        __IM  uint32_t TXRQ     : 1;            /*!< [8..8] Transmit Request                                                   */
        __IM  uint32_t TXEN0    : 1;            /*!< [9..9] Transmit Enable 0                                                  */
        __IM  uint32_t TXEN1    : 1;            /*!< [10..10] Transmit Enable 1                                                */
        __IM  uint32_t DIR      : 1;            /*!< [11..11] Message Direction                                                */
        __IM  uint32_t LIST     : 4;            /*!< [15..12] List Allocation                                                  */
        __IM  uint32_t PPREV    : 8;            /*!< [23..16] Pointer to Previous Message Object                               */
        __IM  uint32_t PNEXT    : 8;            /*!< [31..24] Pointer to Next Message Object                                   */
      } bit;
    } CAN_MOSTAT5;
  } OBJ5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000FC0) Message Object 6 Function Control Register                 */
    
    struct {
      __IOM uint32_t MMC        : 4;            /*!< [3..0] Message Mode Control                                               */
            uint32_t            : 1;
      __IOM uint32_t BRS        : 1;            /*!< [5..5] Bit Rate Switch                                                    */
      __IOM uint32_t FDF        : 1;            /*!< [6..6] CAN FD Frame Format                                                */
            uint32_t            : 1;
      __IOM uint32_t GDFS       : 1;            /*!< [8..8] Gateway Data Frame Send                                            */
      __IOM uint32_t IDC        : 1;            /*!< [9..9] Identifier Copy                                                    */
      __IOM uint32_t DLCC       : 1;            /*!< [10..10] Data Length Code Copy                                            */
      __IOM uint32_t DATC       : 1;            /*!< [11..11] Data Copy                                                        */
            uint32_t            : 4;
      __IOM uint32_t RXIE       : 1;            /*!< [16..16] Receive Interrupt Enable                                         */
      __IOM uint32_t TXIE       : 1;            /*!< [17..17] Transmit Interrupt Enable                                        */
      __IOM uint32_t OVIE       : 1;            /*!< [18..18] Overflow Interrupt Enable                                        */
            uint32_t            : 1;
      __IOM uint32_t FRREN      : 1;            /*!< [20..20] Foreign Remote Request Enable                                    */
      __IOM uint32_t RMM        : 1;            /*!< [21..21] Transmit Object Remote Monitoring                                */
      __IOM uint32_t SDT        : 1;            /*!< [22..22] Single Data Transfer                                             */
      __IOM uint32_t STT        : 1;            /*!< [23..23] Single Transmit Trial                                            */
      __IOM uint32_t DLC        : 4;            /*!< [27..24] Data Length Code                                                 */
            uint32_t            : 4;
    } bit;
  } CAN_MOFCR6;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000FC4) Message Object 6 FIFO/Gateway Pointer Register             */
    
    struct {
      __IOM uint32_t BOT        : 8;            /*!< [7..0] Bottom Pointer                                                     */
      __IOM uint32_t TOP        : 8;            /*!< [15..8] Top Pointer                                                       */
      __IOM uint32_t CUR        : 8;            /*!< [23..16] Current Object Pointer                                           */
      __IOM uint32_t SEL        : 8;            /*!< [31..24] Object Select Pointer                                            */
    } bit;
  } CAN_MOFGPR6;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000FC8) Message Object 6 Interrupt Pointer Register                */
    
    struct {
      __IOM uint32_t RXINP      : 4;            /*!< [3..0] Receive Interrupt Node Pointer                                     */
      __IOM uint32_t TXINP      : 4;            /*!< [7..4] Transmit Interrupt Node Pointer                                    */
      __IOM uint32_t MPN        : 8;            /*!< [15..8] Message Pending Number                                            */
      __IOM uint32_t CFCVAL     : 16;           /*!< [31..16] CAN Frame Counter Value                                          */
    } bit;
  } CAN_MOIPR6;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000FCC) Message Object 6 Acceptance Mask Register                  */
    
    struct {
      __IOM uint32_t AM         : 29;           /*!< [28..0] Acceptance Mask for Message Identifier                            */
      __IOM uint32_t MIDE       : 1;            /*!< [29..29] Acceptance Mask Bit for Message IDE Bit                          */
            uint32_t            : 2;
    } bit;
  } CAN_MOAMR6;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000FD0) Message Object 6 Data Register Low                         */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_MODATAL6;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000FD4) Message Object 6 Data Register High                        */
    
    struct {
      __IOM uint32_t DB4        : 8;            /*!< [7..0] Data Byte 4 of Message Object n                                    */
      __IOM uint32_t DB5        : 8;            /*!< [15..8] Data Byte 5 of Message Object n                                   */
      __IOM uint32_t DB6        : 8;            /*!< [23..16] Data Byte 6 of Message Object n                                  */
      __IOM uint32_t DB7        : 8;            /*!< [31..24] Data Byte 7 of Message Object n                                  */
    } bit;
  } CAN_MODATAH6;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000FD8) Message Object 6 Arbitration Register                      */
    
    struct {
      __IOM uint32_t ID         : 29;           /*!< [28..0] CAN Identifier of Message Object n                                */
      __IOM uint32_t IDE        : 1;            /*!< [29..29] Identifier Extension Bit of Message Object n                     */
      __IOM uint32_t PRI        : 2;            /*!< [31..30] Priority Class                                                   */
    } bit;
  } CAN_MOAR6;
  
  union {
    union {
      __OM  uint32_t reg;                       /*!< (@ 0x00000FDC) Message Object 6 Control Register                          */
      
      struct {
        __OM  uint32_t RESRXPND : 1;            /*!< [0..0] Reset Receive Pending                                              */
        __OM  uint32_t RESTXPND : 1;            /*!< [1..1] Reset Transmit Pending                                             */
        __OM  uint32_t RESRXUPD : 1;            /*!< [2..2] Reset Receive Updating                                             */
        __OM  uint32_t RESNEWDAT : 1;           /*!< [3..3] Reset New Data                                                     */
        __OM  uint32_t RESMSGLST : 1;           /*!< [4..4] Reset Message Lost                                                 */
        __OM  uint32_t RESMSGVAL : 1;           /*!< [5..5] Reset Message Valid                                                */
        __OM  uint32_t RESRTSEL : 1;            /*!< [6..6] Reset Receive/Transmit Selected                                    */
        __OM  uint32_t RESRXEN  : 1;            /*!< [7..7] Reset Receive Enable                                               */
        __OM  uint32_t RESTXRQ  : 1;            /*!< [8..8] Reset Transmit Request                                             */
        __OM  uint32_t RESTXEN0 : 1;            /*!< [9..9] Reset Transmit Enable 0                                            */
        __OM  uint32_t RESTXEN1 : 1;            /*!< [10..10] Reset Transmit Enable 1                                          */
        __OM  uint32_t RESDIR_SETDIR : 1;       /*!< [11..11] Reset Message Direction                                          */
              uint32_t          : 4;
        __OM  uint32_t SETRXPND : 1;            /*!< [16..16] Set Receive Pending                                              */
        __OM  uint32_t SETTXPND : 1;            /*!< [17..17] Set Transmit Pending                                             */
        __OM  uint32_t SETRXUPD : 1;            /*!< [18..18] Set Receive Updating                                             */
        __OM  uint32_t SETNEWDAT : 1;           /*!< [19..19] Set New Data                                                     */
        __OM  uint32_t SETMSGLST : 1;           /*!< [20..20] Set Message Lost                                                 */
        __OM  uint32_t SETMSGVAL : 1;           /*!< [21..21] Set Message Valid                                                */
        __OM  uint32_t SETRTSEL : 1;            /*!< [22..22] Set Receive/Transmit Selected                                    */
        __OM  uint32_t SETRXEN  : 1;            /*!< [23..23] Set Receive Enable                                               */
        __OM  uint32_t SETTXRQ  : 1;            /*!< [24..24] Set Transmit Request                                             */
        __OM  uint32_t SETTXEN0 : 1;            /*!< [25..25] Set Transmit Enable 0                                            */
        __OM  uint32_t SETTXEN1 : 1;            /*!< [26..26] Set Transmit Enable 1                                            */
        __OM  uint32_t SETDIR   : 1;            /*!< [27..27] Set Message Direction                                            */
              uint32_t          : 4;
      } bit;
    } CAN_MOCTR6;
    
    union {
      __IM  uint32_t reg;                       /*!< (@ 0x00000FDC) Message Object 6 Status Register                           */
      
      struct {
        __IM  uint32_t RXPND    : 1;            /*!< [0..0] Receive Pending                                                    */
        __IM  uint32_t TXPND    : 1;            /*!< [1..1] Transmit Pending                                                   */
        __IM  uint32_t RXUPD    : 1;            /*!< [2..2] Receive Updating                                                   */
        __IM  uint32_t NEWDAT   : 1;            /*!< [3..3] New Data                                                           */
        __IM  uint32_t MSGLST   : 1;            /*!< [4..4] Message Lost                                                       */
        __IM  uint32_t MSGVAL   : 1;            /*!< [5..5] Message Valid                                                      */
        __IM  uint32_t RTSEL    : 1;            /*!< [6..6] Receive/Transmit Selected                                          */
        __IM  uint32_t RXEN     : 1;            /*!< [7..7] Receive Enable                                                     */
        __IM  uint32_t TXRQ     : 1;            /*!< [8..8] Transmit Request                                                   */
        __IM  uint32_t TXEN0    : 1;            /*!< [9..9] Transmit Enable 0                                                  */
        __IM  uint32_t TXEN1    : 1;            /*!< [10..10] Transmit Enable 1                                                */
        __IM  uint32_t DIR      : 1;            /*!< [11..11] Message Direction                                                */
        __IM  uint32_t LIST     : 4;            /*!< [15..12] List Allocation                                                  */
        __IM  uint32_t PPREV    : 8;            /*!< [23..16] Pointer to Previous Message Object                               */
        __IM  uint32_t PNEXT    : 8;            /*!< [31..24] Pointer to Next Message Object                                   */
      } bit;
    } CAN_MOSTAT6;
  } OBJ6;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000FE0) Message Object 7 Function Control Register                 */
    
    struct {
      __IOM uint32_t MMC        : 4;            /*!< [3..0] Message Mode Control                                               */
            uint32_t            : 1;
      __IOM uint32_t BRS        : 1;            /*!< [5..5] Bit Rate Switch                                                    */
      __IOM uint32_t FDF        : 1;            /*!< [6..6] CAN FD Frame Format                                                */
            uint32_t            : 1;
      __IOM uint32_t GDFS       : 1;            /*!< [8..8] Gateway Data Frame Send                                            */
      __IOM uint32_t IDC        : 1;            /*!< [9..9] Identifier Copy                                                    */
      __IOM uint32_t DLCC       : 1;            /*!< [10..10] Data Length Code Copy                                            */
      __IOM uint32_t DATC       : 1;            /*!< [11..11] Data Copy                                                        */
            uint32_t            : 4;
      __IOM uint32_t RXIE       : 1;            /*!< [16..16] Receive Interrupt Enable                                         */
      __IOM uint32_t TXIE       : 1;            /*!< [17..17] Transmit Interrupt Enable                                        */
      __IOM uint32_t OVIE       : 1;            /*!< [18..18] Overflow Interrupt Enable                                        */
            uint32_t            : 1;
      __IOM uint32_t FRREN      : 1;            /*!< [20..20] Foreign Remote Request Enable                                    */
      __IOM uint32_t RMM        : 1;            /*!< [21..21] Transmit Object Remote Monitoring                                */
      __IOM uint32_t SDT        : 1;            /*!< [22..22] Single Data Transfer                                             */
      __IOM uint32_t STT        : 1;            /*!< [23..23] Single Transmit Trial                                            */
      __IOM uint32_t DLC        : 4;            /*!< [27..24] Data Length Code                                                 */
            uint32_t            : 4;
    } bit;
  } CAN_MOFCR7;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000FE4) Message Object 7 FIFO/Gateway Pointer Register             */
    
    struct {
      __IOM uint32_t BOT        : 8;            /*!< [7..0] Bottom Pointer                                                     */
      __IOM uint32_t TOP        : 8;            /*!< [15..8] Top Pointer                                                       */
      __IOM uint32_t CUR        : 8;            /*!< [23..16] Current Object Pointer                                           */
      __IOM uint32_t SEL        : 8;            /*!< [31..24] Object Select Pointer                                            */
    } bit;
  } CAN_MOFGPR7;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000FE8) Message Object 7 Interrupt Pointer Register                */
    
    struct {
      __IOM uint32_t RXINP      : 4;            /*!< [3..0] Receive Interrupt Node Pointer                                     */
      __IOM uint32_t TXINP      : 4;            /*!< [7..4] Transmit Interrupt Node Pointer                                    */
      __IOM uint32_t MPN        : 8;            /*!< [15..8] Message Pending Number                                            */
      __IOM uint32_t CFCVAL     : 16;           /*!< [31..16] CAN Frame Counter Value                                          */
    } bit;
  } CAN_MOIPR7;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000FEC) Message Object 7 Acceptance Mask Register                  */
    
    struct {
      __IOM uint32_t AM         : 29;           /*!< [28..0] Acceptance Mask for Message Identifier                            */
      __IOM uint32_t MIDE       : 1;            /*!< [29..29] Acceptance Mask Bit for Message IDE Bit                          */
            uint32_t            : 2;
    } bit;
  } CAN_MOAMR7;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000FF0) Message Object 7 Data Register Low                         */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_MODATAL7;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000FF4) Message Object 7 Data Register High                        */
    
    struct {
      __IOM uint32_t DB4        : 8;            /*!< [7..0] Data Byte 4 of Message Object n                                    */
      __IOM uint32_t DB5        : 8;            /*!< [15..8] Data Byte 5 of Message Object n                                   */
      __IOM uint32_t DB6        : 8;            /*!< [23..16] Data Byte 6 of Message Object n                                  */
      __IOM uint32_t DB7        : 8;            /*!< [31..24] Data Byte 7 of Message Object n                                  */
    } bit;
  } CAN_MODATAH7;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000FF8) Message Object 7 Arbitration Register                      */
    
    struct {
      __IOM uint32_t ID         : 29;           /*!< [28..0] CAN Identifier of Message Object n                                */
      __IOM uint32_t IDE        : 1;            /*!< [29..29] Identifier Extension Bit of Message Object n                     */
      __IOM uint32_t PRI        : 2;            /*!< [31..30] Priority Class                                                   */
    } bit;
  } CAN_MOAR7;
  
  union {
    union {
      __OM  uint32_t reg;                       /*!< (@ 0x00000FFC) Message Object 7 Control Register                          */
      
      struct {
        __OM  uint32_t RESRXPND : 1;            /*!< [0..0] Reset Receive Pending                                              */
        __OM  uint32_t RESTXPND : 1;            /*!< [1..1] Reset Transmit Pending                                             */
        __OM  uint32_t RESRXUPD : 1;            /*!< [2..2] Reset Receive Updating                                             */
        __OM  uint32_t RESNEWDAT : 1;           /*!< [3..3] Reset New Data                                                     */
        __OM  uint32_t RESMSGLST : 1;           /*!< [4..4] Reset Message Lost                                                 */
        __OM  uint32_t RESMSGVAL : 1;           /*!< [5..5] Reset Message Valid                                                */
        __OM  uint32_t RESRTSEL : 1;            /*!< [6..6] Reset Receive/Transmit Selected                                    */
        __OM  uint32_t RESRXEN  : 1;            /*!< [7..7] Reset Receive Enable                                               */
        __OM  uint32_t RESTXRQ  : 1;            /*!< [8..8] Reset Transmit Request                                             */
        __OM  uint32_t RESTXEN0 : 1;            /*!< [9..9] Reset Transmit Enable 0                                            */
        __OM  uint32_t RESTXEN1 : 1;            /*!< [10..10] Reset Transmit Enable 1                                          */
        __OM  uint32_t RESDIR_SETDIR : 1;       /*!< [11..11] Reset Message Direction                                          */
              uint32_t          : 4;
        __OM  uint32_t SETRXPND : 1;            /*!< [16..16] Set Receive Pending                                              */
        __OM  uint32_t SETTXPND : 1;            /*!< [17..17] Set Transmit Pending                                             */
        __OM  uint32_t SETRXUPD : 1;            /*!< [18..18] Set Receive Updating                                             */
        __OM  uint32_t SETNEWDAT : 1;           /*!< [19..19] Set New Data                                                     */
        __OM  uint32_t SETMSGLST : 1;           /*!< [20..20] Set Message Lost                                                 */
        __OM  uint32_t SETMSGVAL : 1;           /*!< [21..21] Set Message Valid                                                */
        __OM  uint32_t SETRTSEL : 1;            /*!< [22..22] Set Receive/Transmit Selected                                    */
        __OM  uint32_t SETRXEN  : 1;            /*!< [23..23] Set Receive Enable                                               */
        __OM  uint32_t SETTXRQ  : 1;            /*!< [24..24] Set Transmit Request                                             */
        __OM  uint32_t SETTXEN0 : 1;            /*!< [25..25] Set Transmit Enable 0                                            */
        __OM  uint32_t SETTXEN1 : 1;            /*!< [26..26] Set Transmit Enable 1                                            */
        __OM  uint32_t SETDIR   : 1;            /*!< [27..27] Set Message Direction                                            */
              uint32_t          : 4;
      } bit;
    } CAN_MOCTR7;
    
    union {
      __IM  uint32_t reg;                       /*!< (@ 0x00000FFC) Message Object 7 Status Register                           */
      
      struct {
        __IM  uint32_t RXPND    : 1;            /*!< [0..0] Receive Pending                                                    */
        __IM  uint32_t TXPND    : 1;            /*!< [1..1] Transmit Pending                                                   */
        __IM  uint32_t RXUPD    : 1;            /*!< [2..2] Receive Updating                                                   */
        __IM  uint32_t NEWDAT   : 1;            /*!< [3..3] New Data                                                           */
        __IM  uint32_t MSGLST   : 1;            /*!< [4..4] Message Lost                                                       */
        __IM  uint32_t MSGVAL   : 1;            /*!< [5..5] Message Valid                                                      */
        __IM  uint32_t RTSEL    : 1;            /*!< [6..6] Receive/Transmit Selected                                          */
        __IM  uint32_t RXEN     : 1;            /*!< [7..7] Receive Enable                                                     */
        __IM  uint32_t TXRQ     : 1;            /*!< [8..8] Transmit Request                                                   */
        __IM  uint32_t TXEN0    : 1;            /*!< [9..9] Transmit Enable 0                                                  */
        __IM  uint32_t TXEN1    : 1;            /*!< [10..10] Transmit Enable 1                                                */
        __IM  uint32_t DIR      : 1;            /*!< [11..11] Message Direction                                                */
        __IM  uint32_t LIST     : 4;            /*!< [15..12] List Allocation                                                  */
        __IM  uint32_t PPREV    : 8;            /*!< [23..16] Pointer to Previous Message Object                               */
        __IM  uint32_t PNEXT    : 8;            /*!< [31..24] Pointer to Next Message Object                                   */
      } bit;
    } CAN_MOSTAT7;
  } OBJ7;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001000) Message Object 8 Function Control Register                 */
    
    struct {
      __IOM uint32_t MMC        : 4;            /*!< [3..0] Message Mode Control                                               */
            uint32_t            : 1;
      __IOM uint32_t BRS        : 1;            /*!< [5..5] Bit Rate Switch                                                    */
      __IOM uint32_t FDF        : 1;            /*!< [6..6] CAN FD Frame Format                                                */
            uint32_t            : 1;
      __IOM uint32_t GDFS       : 1;            /*!< [8..8] Gateway Data Frame Send                                            */
      __IOM uint32_t IDC        : 1;            /*!< [9..9] Identifier Copy                                                    */
      __IOM uint32_t DLCC       : 1;            /*!< [10..10] Data Length Code Copy                                            */
      __IOM uint32_t DATC       : 1;            /*!< [11..11] Data Copy                                                        */
            uint32_t            : 4;
      __IOM uint32_t RXIE       : 1;            /*!< [16..16] Receive Interrupt Enable                                         */
      __IOM uint32_t TXIE       : 1;            /*!< [17..17] Transmit Interrupt Enable                                        */
      __IOM uint32_t OVIE       : 1;            /*!< [18..18] Overflow Interrupt Enable                                        */
            uint32_t            : 1;
      __IOM uint32_t FRREN      : 1;            /*!< [20..20] Foreign Remote Request Enable                                    */
      __IOM uint32_t RMM        : 1;            /*!< [21..21] Transmit Object Remote Monitoring                                */
      __IOM uint32_t SDT        : 1;            /*!< [22..22] Single Data Transfer                                             */
      __IOM uint32_t STT        : 1;            /*!< [23..23] Single Transmit Trial                                            */
      __IOM uint32_t DLC        : 4;            /*!< [27..24] Data Length Code                                                 */
            uint32_t            : 4;
    } bit;
  } CAN_MOFCR8;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001004) Message Object 8 FIFO/Gateway Pointer Register             */
    
    struct {
      __IOM uint32_t BOT        : 8;            /*!< [7..0] Bottom Pointer                                                     */
      __IOM uint32_t TOP        : 8;            /*!< [15..8] Top Pointer                                                       */
      __IOM uint32_t CUR        : 8;            /*!< [23..16] Current Object Pointer                                           */
      __IOM uint32_t SEL        : 8;            /*!< [31..24] Object Select Pointer                                            */
    } bit;
  } CAN_MOFGPR8;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001008) Message Object 8 Interrupt Pointer Register                */
    
    struct {
      __IOM uint32_t RXINP      : 4;            /*!< [3..0] Receive Interrupt Node Pointer                                     */
      __IOM uint32_t TXINP      : 4;            /*!< [7..4] Transmit Interrupt Node Pointer                                    */
      __IOM uint32_t MPN        : 8;            /*!< [15..8] Message Pending Number                                            */
      __IOM uint32_t CFCVAL     : 16;           /*!< [31..16] CAN Frame Counter Value                                          */
    } bit;
  } CAN_MOIPR8;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000100C) Message Object 8 Acceptance Mask Register                  */
    
    struct {
      __IOM uint32_t AM         : 29;           /*!< [28..0] Acceptance Mask for Message Identifier                            */
      __IOM uint32_t MIDE       : 1;            /*!< [29..29] Acceptance Mask Bit for Message IDE Bit                          */
            uint32_t            : 2;
    } bit;
  } CAN_MOAMR8;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001010) Message Object 8 Data Register Low                         */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_MODATAL8;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001014) Message Object 8 Data Register High                        */
    
    struct {
      __IOM uint32_t DB4        : 8;            /*!< [7..0] Data Byte 4 of Message Object n                                    */
      __IOM uint32_t DB5        : 8;            /*!< [15..8] Data Byte 5 of Message Object n                                   */
      __IOM uint32_t DB6        : 8;            /*!< [23..16] Data Byte 6 of Message Object n                                  */
      __IOM uint32_t DB7        : 8;            /*!< [31..24] Data Byte 7 of Message Object n                                  */
    } bit;
  } CAN_MODATAH8;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001018) Message Object 8 Arbitration Register                      */
    
    struct {
      __IOM uint32_t ID         : 29;           /*!< [28..0] CAN Identifier of Message Object n                                */
      __IOM uint32_t IDE        : 1;            /*!< [29..29] Identifier Extension Bit of Message Object n                     */
      __IOM uint32_t PRI        : 2;            /*!< [31..30] Priority Class                                                   */
    } bit;
  } CAN_MOAR8;
  
  union {
    union {
      __OM  uint32_t reg;                       /*!< (@ 0x0000101C) Message Object 8 Control Register                          */
      
      struct {
        __OM  uint32_t RESRXPND : 1;            /*!< [0..0] Reset Receive Pending                                              */
        __OM  uint32_t RESTXPND : 1;            /*!< [1..1] Reset Transmit Pending                                             */
        __OM  uint32_t RESRXUPD : 1;            /*!< [2..2] Reset Receive Updating                                             */
        __OM  uint32_t RESNEWDAT : 1;           /*!< [3..3] Reset New Data                                                     */
        __OM  uint32_t RESMSGLST : 1;           /*!< [4..4] Reset Message Lost                                                 */
        __OM  uint32_t RESMSGVAL : 1;           /*!< [5..5] Reset Message Valid                                                */
        __OM  uint32_t RESRTSEL : 1;            /*!< [6..6] Reset Receive/Transmit Selected                                    */
        __OM  uint32_t RESRXEN  : 1;            /*!< [7..7] Reset Receive Enable                                               */
        __OM  uint32_t RESTXRQ  : 1;            /*!< [8..8] Reset Transmit Request                                             */
        __OM  uint32_t RESTXEN0 : 1;            /*!< [9..9] Reset Transmit Enable 0                                            */
        __OM  uint32_t RESTXEN1 : 1;            /*!< [10..10] Reset Transmit Enable 1                                          */
        __OM  uint32_t RESDIR_SETDIR : 1;       /*!< [11..11] Reset Message Direction                                          */
              uint32_t          : 4;
        __OM  uint32_t SETRXPND : 1;            /*!< [16..16] Set Receive Pending                                              */
        __OM  uint32_t SETTXPND : 1;            /*!< [17..17] Set Transmit Pending                                             */
        __OM  uint32_t SETRXUPD : 1;            /*!< [18..18] Set Receive Updating                                             */
        __OM  uint32_t SETNEWDAT : 1;           /*!< [19..19] Set New Data                                                     */
        __OM  uint32_t SETMSGLST : 1;           /*!< [20..20] Set Message Lost                                                 */
        __OM  uint32_t SETMSGVAL : 1;           /*!< [21..21] Set Message Valid                                                */
        __OM  uint32_t SETRTSEL : 1;            /*!< [22..22] Set Receive/Transmit Selected                                    */
        __OM  uint32_t SETRXEN  : 1;            /*!< [23..23] Set Receive Enable                                               */
        __OM  uint32_t SETTXRQ  : 1;            /*!< [24..24] Set Transmit Request                                             */
        __OM  uint32_t SETTXEN0 : 1;            /*!< [25..25] Set Transmit Enable 0                                            */
        __OM  uint32_t SETTXEN1 : 1;            /*!< [26..26] Set Transmit Enable 1                                            */
        __OM  uint32_t SETDIR   : 1;            /*!< [27..27] Set Message Direction                                            */
              uint32_t          : 4;
      } bit;
    } CAN_MOCTR8;
    
    union {
      __IM  uint32_t reg;                       /*!< (@ 0x0000101C) Message Object 8 Status Register                           */
      
      struct {
        __IM  uint32_t RXPND    : 1;            /*!< [0..0] Receive Pending                                                    */
        __IM  uint32_t TXPND    : 1;            /*!< [1..1] Transmit Pending                                                   */
        __IM  uint32_t RXUPD    : 1;            /*!< [2..2] Receive Updating                                                   */
        __IM  uint32_t NEWDAT   : 1;            /*!< [3..3] New Data                                                           */
        __IM  uint32_t MSGLST   : 1;            /*!< [4..4] Message Lost                                                       */
        __IM  uint32_t MSGVAL   : 1;            /*!< [5..5] Message Valid                                                      */
        __IM  uint32_t RTSEL    : 1;            /*!< [6..6] Receive/Transmit Selected                                          */
        __IM  uint32_t RXEN     : 1;            /*!< [7..7] Receive Enable                                                     */
        __IM  uint32_t TXRQ     : 1;            /*!< [8..8] Transmit Request                                                   */
        __IM  uint32_t TXEN0    : 1;            /*!< [9..9] Transmit Enable 0                                                  */
        __IM  uint32_t TXEN1    : 1;            /*!< [10..10] Transmit Enable 1                                                */
        __IM  uint32_t DIR      : 1;            /*!< [11..11] Message Direction                                                */
        __IM  uint32_t LIST     : 4;            /*!< [15..12] List Allocation                                                  */
        __IM  uint32_t PPREV    : 8;            /*!< [23..16] Pointer to Previous Message Object                               */
        __IM  uint32_t PNEXT    : 8;            /*!< [31..24] Pointer to Next Message Object                                   */
      } bit;
    } CAN_MOSTAT8;
  } OBJ8;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001020) Message Object 9 Function Control Register                 */
    
    struct {
      __IOM uint32_t MMC        : 4;            /*!< [3..0] Message Mode Control                                               */
            uint32_t            : 1;
      __IOM uint32_t BRS        : 1;            /*!< [5..5] Bit Rate Switch                                                    */
      __IOM uint32_t FDF        : 1;            /*!< [6..6] CAN FD Frame Format                                                */
            uint32_t            : 1;
      __IOM uint32_t GDFS       : 1;            /*!< [8..8] Gateway Data Frame Send                                            */
      __IOM uint32_t IDC        : 1;            /*!< [9..9] Identifier Copy                                                    */
      __IOM uint32_t DLCC       : 1;            /*!< [10..10] Data Length Code Copy                                            */
      __IOM uint32_t DATC       : 1;            /*!< [11..11] Data Copy                                                        */
            uint32_t            : 4;
      __IOM uint32_t RXIE       : 1;            /*!< [16..16] Receive Interrupt Enable                                         */
      __IOM uint32_t TXIE       : 1;            /*!< [17..17] Transmit Interrupt Enable                                        */
      __IOM uint32_t OVIE       : 1;            /*!< [18..18] Overflow Interrupt Enable                                        */
            uint32_t            : 1;
      __IOM uint32_t FRREN      : 1;            /*!< [20..20] Foreign Remote Request Enable                                    */
      __IOM uint32_t RMM        : 1;            /*!< [21..21] Transmit Object Remote Monitoring                                */
      __IOM uint32_t SDT        : 1;            /*!< [22..22] Single Data Transfer                                             */
      __IOM uint32_t STT        : 1;            /*!< [23..23] Single Transmit Trial                                            */
      __IOM uint32_t DLC        : 4;            /*!< [27..24] Data Length Code                                                 */
            uint32_t            : 4;
    } bit;
  } CAN_MOFCR9;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001024) Message Object 9 FIFO/Gateway Pointer Register             */
    
    struct {
      __IOM uint32_t BOT        : 8;            /*!< [7..0] Bottom Pointer                                                     */
      __IOM uint32_t TOP        : 8;            /*!< [15..8] Top Pointer                                                       */
      __IOM uint32_t CUR        : 8;            /*!< [23..16] Current Object Pointer                                           */
      __IOM uint32_t SEL        : 8;            /*!< [31..24] Object Select Pointer                                            */
    } bit;
  } CAN_MOFGPR9;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001028) Message Object 9 Interrupt Pointer Register                */
    
    struct {
      __IOM uint32_t RXINP      : 4;            /*!< [3..0] Receive Interrupt Node Pointer                                     */
      __IOM uint32_t TXINP      : 4;            /*!< [7..4] Transmit Interrupt Node Pointer                                    */
      __IOM uint32_t MPN        : 8;            /*!< [15..8] Message Pending Number                                            */
      __IOM uint32_t CFCVAL     : 16;           /*!< [31..16] CAN Frame Counter Value                                          */
    } bit;
  } CAN_MOIPR9;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000102C) Message Object 9 Acceptance Mask Register                  */
    
    struct {
      __IOM uint32_t AM         : 29;           /*!< [28..0] Acceptance Mask for Message Identifier                            */
      __IOM uint32_t MIDE       : 1;            /*!< [29..29] Acceptance Mask Bit for Message IDE Bit                          */
            uint32_t            : 2;
    } bit;
  } CAN_MOAMR9;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001030) Message Object 9 Data Register Low                         */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_MODATAL9;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001034) Message Object 9 Data Register High                        */
    
    struct {
      __IOM uint32_t DB4        : 8;            /*!< [7..0] Data Byte 4 of Message Object n                                    */
      __IOM uint32_t DB5        : 8;            /*!< [15..8] Data Byte 5 of Message Object n                                   */
      __IOM uint32_t DB6        : 8;            /*!< [23..16] Data Byte 6 of Message Object n                                  */
      __IOM uint32_t DB7        : 8;            /*!< [31..24] Data Byte 7 of Message Object n                                  */
    } bit;
  } CAN_MODATAH9;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001038) Message Object 9 Arbitration Register                      */
    
    struct {
      __IOM uint32_t ID         : 29;           /*!< [28..0] CAN Identifier of Message Object n                                */
      __IOM uint32_t IDE        : 1;            /*!< [29..29] Identifier Extension Bit of Message Object n                     */
      __IOM uint32_t PRI        : 2;            /*!< [31..30] Priority Class                                                   */
    } bit;
  } CAN_MOAR9;
  
  union {
    union {
      __OM  uint32_t reg;                       /*!< (@ 0x0000103C) Message Object 9 Control Register                          */
      
      struct {
        __OM  uint32_t RESRXPND : 1;            /*!< [0..0] Reset Receive Pending                                              */
        __OM  uint32_t RESTXPND : 1;            /*!< [1..1] Reset Transmit Pending                                             */
        __OM  uint32_t RESRXUPD : 1;            /*!< [2..2] Reset Receive Updating                                             */
        __OM  uint32_t RESNEWDAT : 1;           /*!< [3..3] Reset New Data                                                     */
        __OM  uint32_t RESMSGLST : 1;           /*!< [4..4] Reset Message Lost                                                 */
        __OM  uint32_t RESMSGVAL : 1;           /*!< [5..5] Reset Message Valid                                                */
        __OM  uint32_t RESRTSEL : 1;            /*!< [6..6] Reset Receive/Transmit Selected                                    */
        __OM  uint32_t RESRXEN  : 1;            /*!< [7..7] Reset Receive Enable                                               */
        __OM  uint32_t RESTXRQ  : 1;            /*!< [8..8] Reset Transmit Request                                             */
        __OM  uint32_t RESTXEN0 : 1;            /*!< [9..9] Reset Transmit Enable 0                                            */
        __OM  uint32_t RESTXEN1 : 1;            /*!< [10..10] Reset Transmit Enable 1                                          */
        __OM  uint32_t RESDIR_SETDIR : 1;       /*!< [11..11] Reset Message Direction                                          */
              uint32_t          : 4;
        __OM  uint32_t SETRXPND : 1;            /*!< [16..16] Set Receive Pending                                              */
        __OM  uint32_t SETTXPND : 1;            /*!< [17..17] Set Transmit Pending                                             */
        __OM  uint32_t SETRXUPD : 1;            /*!< [18..18] Set Receive Updating                                             */
        __OM  uint32_t SETNEWDAT : 1;           /*!< [19..19] Set New Data                                                     */
        __OM  uint32_t SETMSGLST : 1;           /*!< [20..20] Set Message Lost                                                 */
        __OM  uint32_t SETMSGVAL : 1;           /*!< [21..21] Set Message Valid                                                */
        __OM  uint32_t SETRTSEL : 1;            /*!< [22..22] Set Receive/Transmit Selected                                    */
        __OM  uint32_t SETRXEN  : 1;            /*!< [23..23] Set Receive Enable                                               */
        __OM  uint32_t SETTXRQ  : 1;            /*!< [24..24] Set Transmit Request                                             */
        __OM  uint32_t SETTXEN0 : 1;            /*!< [25..25] Set Transmit Enable 0                                            */
        __OM  uint32_t SETTXEN1 : 1;            /*!< [26..26] Set Transmit Enable 1                                            */
        __OM  uint32_t SETDIR   : 1;            /*!< [27..27] Set Message Direction                                            */
              uint32_t          : 4;
      } bit;
    } CAN_MOCTR9;
    
    union {
      __IM  uint32_t reg;                       /*!< (@ 0x0000103C) Message Object 9 Status Register                           */
      
      struct {
        __IM  uint32_t RXPND    : 1;            /*!< [0..0] Receive Pending                                                    */
        __IM  uint32_t TXPND    : 1;            /*!< [1..1] Transmit Pending                                                   */
        __IM  uint32_t RXUPD    : 1;            /*!< [2..2] Receive Updating                                                   */
        __IM  uint32_t NEWDAT   : 1;            /*!< [3..3] New Data                                                           */
        __IM  uint32_t MSGLST   : 1;            /*!< [4..4] Message Lost                                                       */
        __IM  uint32_t MSGVAL   : 1;            /*!< [5..5] Message Valid                                                      */
        __IM  uint32_t RTSEL    : 1;            /*!< [6..6] Receive/Transmit Selected                                          */
        __IM  uint32_t RXEN     : 1;            /*!< [7..7] Receive Enable                                                     */
        __IM  uint32_t TXRQ     : 1;            /*!< [8..8] Transmit Request                                                   */
        __IM  uint32_t TXEN0    : 1;            /*!< [9..9] Transmit Enable 0                                                  */
        __IM  uint32_t TXEN1    : 1;            /*!< [10..10] Transmit Enable 1                                                */
        __IM  uint32_t DIR      : 1;            /*!< [11..11] Message Direction                                                */
        __IM  uint32_t LIST     : 4;            /*!< [15..12] List Allocation                                                  */
        __IM  uint32_t PPREV    : 8;            /*!< [23..16] Pointer to Previous Message Object                               */
        __IM  uint32_t PNEXT    : 8;            /*!< [31..24] Pointer to Next Message Object                                   */
      } bit;
    } CAN_MOSTAT9;
  } OBJ9;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001040) Message Object 10 Function Control Register                */
    
    struct {
      __IOM uint32_t MMC        : 4;            /*!< [3..0] Message Mode Control                                               */
            uint32_t            : 1;
      __IOM uint32_t BRS        : 1;            /*!< [5..5] Bit Rate Switch                                                    */
      __IOM uint32_t FDF        : 1;            /*!< [6..6] CAN FD Frame Format                                                */
            uint32_t            : 1;
      __IOM uint32_t GDFS       : 1;            /*!< [8..8] Gateway Data Frame Send                                            */
      __IOM uint32_t IDC        : 1;            /*!< [9..9] Identifier Copy                                                    */
      __IOM uint32_t DLCC       : 1;            /*!< [10..10] Data Length Code Copy                                            */
      __IOM uint32_t DATC       : 1;            /*!< [11..11] Data Copy                                                        */
            uint32_t            : 4;
      __IOM uint32_t RXIE       : 1;            /*!< [16..16] Receive Interrupt Enable                                         */
      __IOM uint32_t TXIE       : 1;            /*!< [17..17] Transmit Interrupt Enable                                        */
      __IOM uint32_t OVIE       : 1;            /*!< [18..18] Overflow Interrupt Enable                                        */
            uint32_t            : 1;
      __IOM uint32_t FRREN      : 1;            /*!< [20..20] Foreign Remote Request Enable                                    */
      __IOM uint32_t RMM        : 1;            /*!< [21..21] Transmit Object Remote Monitoring                                */
      __IOM uint32_t SDT        : 1;            /*!< [22..22] Single Data Transfer                                             */
      __IOM uint32_t STT        : 1;            /*!< [23..23] Single Transmit Trial                                            */
      __IOM uint32_t DLC        : 4;            /*!< [27..24] Data Length Code                                                 */
            uint32_t            : 4;
    } bit;
  } CAN_MOFCR10;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001044) Message Object 10 FIFO/Gateway Pointer Register            */
    
    struct {
      __IOM uint32_t BOT        : 8;            /*!< [7..0] Bottom Pointer                                                     */
      __IOM uint32_t TOP        : 8;            /*!< [15..8] Top Pointer                                                       */
      __IOM uint32_t CUR        : 8;            /*!< [23..16] Current Object Pointer                                           */
      __IOM uint32_t SEL        : 8;            /*!< [31..24] Object Select Pointer                                            */
    } bit;
  } CAN_MOFGPR10;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001048) Message Object 10 Interrupt Pointer Register               */
    
    struct {
      __IOM uint32_t RXINP      : 4;            /*!< [3..0] Receive Interrupt Node Pointer                                     */
      __IOM uint32_t TXINP      : 4;            /*!< [7..4] Transmit Interrupt Node Pointer                                    */
      __IOM uint32_t MPN        : 8;            /*!< [15..8] Message Pending Number                                            */
      __IOM uint32_t CFCVAL     : 16;           /*!< [31..16] CAN Frame Counter Value                                          */
    } bit;
  } CAN_MOIPR10;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000104C) Message Object 10 Acceptance Mask Register                 */
    
    struct {
      __IOM uint32_t AM         : 29;           /*!< [28..0] Acceptance Mask for Message Identifier                            */
      __IOM uint32_t MIDE       : 1;            /*!< [29..29] Acceptance Mask Bit for Message IDE Bit                          */
            uint32_t            : 2;
    } bit;
  } CAN_MOAMR10;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001050) Message Object 10 Data Register Low                        */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_MODATAL10;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001054) Message Object 10 Data Register High                       */
    
    struct {
      __IOM uint32_t DB4        : 8;            /*!< [7..0] Data Byte 4 of Message Object n                                    */
      __IOM uint32_t DB5        : 8;            /*!< [15..8] Data Byte 5 of Message Object n                                   */
      __IOM uint32_t DB6        : 8;            /*!< [23..16] Data Byte 6 of Message Object n                                  */
      __IOM uint32_t DB7        : 8;            /*!< [31..24] Data Byte 7 of Message Object n                                  */
    } bit;
  } CAN_MODATAH10;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001058) Message Object 10 Arbitration Register                     */
    
    struct {
      __IOM uint32_t ID         : 29;           /*!< [28..0] CAN Identifier of Message Object n                                */
      __IOM uint32_t IDE        : 1;            /*!< [29..29] Identifier Extension Bit of Message Object n                     */
      __IOM uint32_t PRI        : 2;            /*!< [31..30] Priority Class                                                   */
    } bit;
  } CAN_MOAR10;
  
  union {
    union {
      __OM  uint32_t reg;                       /*!< (@ 0x0000105C) Message Object 10 Control Register                         */
      
      struct {
        __OM  uint32_t RESRXPND : 1;            /*!< [0..0] Reset Receive Pending                                              */
        __OM  uint32_t RESTXPND : 1;            /*!< [1..1] Reset Transmit Pending                                             */
        __OM  uint32_t RESRXUPD : 1;            /*!< [2..2] Reset Receive Updating                                             */
        __OM  uint32_t RESNEWDAT : 1;           /*!< [3..3] Reset New Data                                                     */
        __OM  uint32_t RESMSGLST : 1;           /*!< [4..4] Reset Message Lost                                                 */
        __OM  uint32_t RESMSGVAL : 1;           /*!< [5..5] Reset Message Valid                                                */
        __OM  uint32_t RESRTSEL : 1;            /*!< [6..6] Reset Receive/Transmit Selected                                    */
        __OM  uint32_t RESRXEN  : 1;            /*!< [7..7] Reset Receive Enable                                               */
        __OM  uint32_t RESTXRQ  : 1;            /*!< [8..8] Reset Transmit Request                                             */
        __OM  uint32_t RESTXEN0 : 1;            /*!< [9..9] Reset Transmit Enable 0                                            */
        __OM  uint32_t RESTXEN1 : 1;            /*!< [10..10] Reset Transmit Enable 1                                          */
        __OM  uint32_t RESDIR_SETDIR : 1;       /*!< [11..11] Reset Message Direction                                          */
              uint32_t          : 4;
        __OM  uint32_t SETRXPND : 1;            /*!< [16..16] Set Receive Pending                                              */
        __OM  uint32_t SETTXPND : 1;            /*!< [17..17] Set Transmit Pending                                             */
        __OM  uint32_t SETRXUPD : 1;            /*!< [18..18] Set Receive Updating                                             */
        __OM  uint32_t SETNEWDAT : 1;           /*!< [19..19] Set New Data                                                     */
        __OM  uint32_t SETMSGLST : 1;           /*!< [20..20] Set Message Lost                                                 */
        __OM  uint32_t SETMSGVAL : 1;           /*!< [21..21] Set Message Valid                                                */
        __OM  uint32_t SETRTSEL : 1;            /*!< [22..22] Set Receive/Transmit Selected                                    */
        __OM  uint32_t SETRXEN  : 1;            /*!< [23..23] Set Receive Enable                                               */
        __OM  uint32_t SETTXRQ  : 1;            /*!< [24..24] Set Transmit Request                                             */
        __OM  uint32_t SETTXEN0 : 1;            /*!< [25..25] Set Transmit Enable 0                                            */
        __OM  uint32_t SETTXEN1 : 1;            /*!< [26..26] Set Transmit Enable 1                                            */
        __OM  uint32_t SETDIR   : 1;            /*!< [27..27] Set Message Direction                                            */
              uint32_t          : 4;
      } bit;
    } CAN_MOCTR10;
    
    union {
      __IM  uint32_t reg;                       /*!< (@ 0x0000105C) Message Object 10 Status Register                          */
      
      struct {
        __IM  uint32_t RXPND    : 1;            /*!< [0..0] Receive Pending                                                    */
        __IM  uint32_t TXPND    : 1;            /*!< [1..1] Transmit Pending                                                   */
        __IM  uint32_t RXUPD    : 1;            /*!< [2..2] Receive Updating                                                   */
        __IM  uint32_t NEWDAT   : 1;            /*!< [3..3] New Data                                                           */
        __IM  uint32_t MSGLST   : 1;            /*!< [4..4] Message Lost                                                       */
        __IM  uint32_t MSGVAL   : 1;            /*!< [5..5] Message Valid                                                      */
        __IM  uint32_t RTSEL    : 1;            /*!< [6..6] Receive/Transmit Selected                                          */
        __IM  uint32_t RXEN     : 1;            /*!< [7..7] Receive Enable                                                     */
        __IM  uint32_t TXRQ     : 1;            /*!< [8..8] Transmit Request                                                   */
        __IM  uint32_t TXEN0    : 1;            /*!< [9..9] Transmit Enable 0                                                  */
        __IM  uint32_t TXEN1    : 1;            /*!< [10..10] Transmit Enable 1                                                */
        __IM  uint32_t DIR      : 1;            /*!< [11..11] Message Direction                                                */
        __IM  uint32_t LIST     : 4;            /*!< [15..12] List Allocation                                                  */
        __IM  uint32_t PPREV    : 8;            /*!< [23..16] Pointer to Previous Message Object                               */
        __IM  uint32_t PNEXT    : 8;            /*!< [31..24] Pointer to Next Message Object                                   */
      } bit;
    } CAN_MOSTAT10;
  } OBJ10;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001060) Message Object 11 Function Control Register                */
    
    struct {
      __IOM uint32_t MMC        : 4;            /*!< [3..0] Message Mode Control                                               */
            uint32_t            : 1;
      __IOM uint32_t BRS        : 1;            /*!< [5..5] Bit Rate Switch                                                    */
      __IOM uint32_t FDF        : 1;            /*!< [6..6] CAN FD Frame Format                                                */
            uint32_t            : 1;
      __IOM uint32_t GDFS       : 1;            /*!< [8..8] Gateway Data Frame Send                                            */
      __IOM uint32_t IDC        : 1;            /*!< [9..9] Identifier Copy                                                    */
      __IOM uint32_t DLCC       : 1;            /*!< [10..10] Data Length Code Copy                                            */
      __IOM uint32_t DATC       : 1;            /*!< [11..11] Data Copy                                                        */
            uint32_t            : 4;
      __IOM uint32_t RXIE       : 1;            /*!< [16..16] Receive Interrupt Enable                                         */
      __IOM uint32_t TXIE       : 1;            /*!< [17..17] Transmit Interrupt Enable                                        */
      __IOM uint32_t OVIE       : 1;            /*!< [18..18] Overflow Interrupt Enable                                        */
            uint32_t            : 1;
      __IOM uint32_t FRREN      : 1;            /*!< [20..20] Foreign Remote Request Enable                                    */
      __IOM uint32_t RMM        : 1;            /*!< [21..21] Transmit Object Remote Monitoring                                */
      __IOM uint32_t SDT        : 1;            /*!< [22..22] Single Data Transfer                                             */
      __IOM uint32_t STT        : 1;            /*!< [23..23] Single Transmit Trial                                            */
      __IOM uint32_t DLC        : 4;            /*!< [27..24] Data Length Code                                                 */
            uint32_t            : 4;
    } bit;
  } CAN_MOFCR11;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001064) Message Object 11 FIFO/Gateway Pointer Register            */
    
    struct {
      __IOM uint32_t BOT        : 8;            /*!< [7..0] Bottom Pointer                                                     */
      __IOM uint32_t TOP        : 8;            /*!< [15..8] Top Pointer                                                       */
      __IOM uint32_t CUR        : 8;            /*!< [23..16] Current Object Pointer                                           */
      __IOM uint32_t SEL        : 8;            /*!< [31..24] Object Select Pointer                                            */
    } bit;
  } CAN_MOFGPR11;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001068) Message Object 11 Interrupt Pointer Register               */
    
    struct {
      __IOM uint32_t RXINP      : 4;            /*!< [3..0] Receive Interrupt Node Pointer                                     */
      __IOM uint32_t TXINP      : 4;            /*!< [7..4] Transmit Interrupt Node Pointer                                    */
      __IOM uint32_t MPN        : 8;            /*!< [15..8] Message Pending Number                                            */
      __IOM uint32_t CFCVAL     : 16;           /*!< [31..16] CAN Frame Counter Value                                          */
    } bit;
  } CAN_MOIPR11;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000106C) Message Object 11 Acceptance Mask Register                 */
    
    struct {
      __IOM uint32_t AM         : 29;           /*!< [28..0] Acceptance Mask for Message Identifier                            */
      __IOM uint32_t MIDE       : 1;            /*!< [29..29] Acceptance Mask Bit for Message IDE Bit                          */
            uint32_t            : 2;
    } bit;
  } CAN_MOAMR11;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001070) Message Object 11 Data Register Low                        */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_MODATAL11;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001074) Message Object 11 Data Register High                       */
    
    struct {
      __IOM uint32_t DB4        : 8;            /*!< [7..0] Data Byte 4 of Message Object n                                    */
      __IOM uint32_t DB5        : 8;            /*!< [15..8] Data Byte 5 of Message Object n                                   */
      __IOM uint32_t DB6        : 8;            /*!< [23..16] Data Byte 6 of Message Object n                                  */
      __IOM uint32_t DB7        : 8;            /*!< [31..24] Data Byte 7 of Message Object n                                  */
    } bit;
  } CAN_MODATAH11;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001078) Message Object 11 Arbitration Register                     */
    
    struct {
      __IOM uint32_t ID         : 29;           /*!< [28..0] CAN Identifier of Message Object n                                */
      __IOM uint32_t IDE        : 1;            /*!< [29..29] Identifier Extension Bit of Message Object n                     */
      __IOM uint32_t PRI        : 2;            /*!< [31..30] Priority Class                                                   */
    } bit;
  } CAN_MOAR11;
  
  union {
    union {
      __OM  uint32_t reg;                       /*!< (@ 0x0000107C) Message Object 11 Control Register                         */
      
      struct {
        __OM  uint32_t RESRXPND : 1;            /*!< [0..0] Reset Receive Pending                                              */
        __OM  uint32_t RESTXPND : 1;            /*!< [1..1] Reset Transmit Pending                                             */
        __OM  uint32_t RESRXUPD : 1;            /*!< [2..2] Reset Receive Updating                                             */
        __OM  uint32_t RESNEWDAT : 1;           /*!< [3..3] Reset New Data                                                     */
        __OM  uint32_t RESMSGLST : 1;           /*!< [4..4] Reset Message Lost                                                 */
        __OM  uint32_t RESMSGVAL : 1;           /*!< [5..5] Reset Message Valid                                                */
        __OM  uint32_t RESRTSEL : 1;            /*!< [6..6] Reset Receive/Transmit Selected                                    */
        __OM  uint32_t RESRXEN  : 1;            /*!< [7..7] Reset Receive Enable                                               */
        __OM  uint32_t RESTXRQ  : 1;            /*!< [8..8] Reset Transmit Request                                             */
        __OM  uint32_t RESTXEN0 : 1;            /*!< [9..9] Reset Transmit Enable 0                                            */
        __OM  uint32_t RESTXEN1 : 1;            /*!< [10..10] Reset Transmit Enable 1                                          */
        __OM  uint32_t RESDIR_SETDIR : 1;       /*!< [11..11] Reset Message Direction                                          */
              uint32_t          : 4;
        __OM  uint32_t SETRXPND : 1;            /*!< [16..16] Set Receive Pending                                              */
        __OM  uint32_t SETTXPND : 1;            /*!< [17..17] Set Transmit Pending                                             */
        __OM  uint32_t SETRXUPD : 1;            /*!< [18..18] Set Receive Updating                                             */
        __OM  uint32_t SETNEWDAT : 1;           /*!< [19..19] Set New Data                                                     */
        __OM  uint32_t SETMSGLST : 1;           /*!< [20..20] Set Message Lost                                                 */
        __OM  uint32_t SETMSGVAL : 1;           /*!< [21..21] Set Message Valid                                                */
        __OM  uint32_t SETRTSEL : 1;            /*!< [22..22] Set Receive/Transmit Selected                                    */
        __OM  uint32_t SETRXEN  : 1;            /*!< [23..23] Set Receive Enable                                               */
        __OM  uint32_t SETTXRQ  : 1;            /*!< [24..24] Set Transmit Request                                             */
        __OM  uint32_t SETTXEN0 : 1;            /*!< [25..25] Set Transmit Enable 0                                            */
        __OM  uint32_t SETTXEN1 : 1;            /*!< [26..26] Set Transmit Enable 1                                            */
        __OM  uint32_t SETDIR   : 1;            /*!< [27..27] Set Message Direction                                            */
              uint32_t          : 4;
      } bit;
    } CAN_MOCTR11;
    
    union {
      __IM  uint32_t reg;                       /*!< (@ 0x0000107C) Message Object 11 Status Register                          */
      
      struct {
        __IM  uint32_t RXPND    : 1;            /*!< [0..0] Receive Pending                                                    */
        __IM  uint32_t TXPND    : 1;            /*!< [1..1] Transmit Pending                                                   */
        __IM  uint32_t RXUPD    : 1;            /*!< [2..2] Receive Updating                                                   */
        __IM  uint32_t NEWDAT   : 1;            /*!< [3..3] New Data                                                           */
        __IM  uint32_t MSGLST   : 1;            /*!< [4..4] Message Lost                                                       */
        __IM  uint32_t MSGVAL   : 1;            /*!< [5..5] Message Valid                                                      */
        __IM  uint32_t RTSEL    : 1;            /*!< [6..6] Receive/Transmit Selected                                          */
        __IM  uint32_t RXEN     : 1;            /*!< [7..7] Receive Enable                                                     */
        __IM  uint32_t TXRQ     : 1;            /*!< [8..8] Transmit Request                                                   */
        __IM  uint32_t TXEN0    : 1;            /*!< [9..9] Transmit Enable 0                                                  */
        __IM  uint32_t TXEN1    : 1;            /*!< [10..10] Transmit Enable 1                                                */
        __IM  uint32_t DIR      : 1;            /*!< [11..11] Message Direction                                                */
        __IM  uint32_t LIST     : 4;            /*!< [15..12] List Allocation                                                  */
        __IM  uint32_t PPREV    : 8;            /*!< [23..16] Pointer to Previous Message Object                               */
        __IM  uint32_t PNEXT    : 8;            /*!< [31..24] Pointer to Next Message Object                                   */
      } bit;
    } CAN_MOSTAT11;
  } OBJ11;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001080) Message Object 12 Function Control Register                */
    
    struct {
      __IOM uint32_t MMC        : 4;            /*!< [3..0] Message Mode Control                                               */
            uint32_t            : 1;
      __IOM uint32_t BRS        : 1;            /*!< [5..5] Bit Rate Switch                                                    */
      __IOM uint32_t FDF        : 1;            /*!< [6..6] CAN FD Frame Format                                                */
            uint32_t            : 1;
      __IOM uint32_t GDFS       : 1;            /*!< [8..8] Gateway Data Frame Send                                            */
      __IOM uint32_t IDC        : 1;            /*!< [9..9] Identifier Copy                                                    */
      __IOM uint32_t DLCC       : 1;            /*!< [10..10] Data Length Code Copy                                            */
      __IOM uint32_t DATC       : 1;            /*!< [11..11] Data Copy                                                        */
            uint32_t            : 4;
      __IOM uint32_t RXIE       : 1;            /*!< [16..16] Receive Interrupt Enable                                         */
      __IOM uint32_t TXIE       : 1;            /*!< [17..17] Transmit Interrupt Enable                                        */
      __IOM uint32_t OVIE       : 1;            /*!< [18..18] Overflow Interrupt Enable                                        */
            uint32_t            : 1;
      __IOM uint32_t FRREN      : 1;            /*!< [20..20] Foreign Remote Request Enable                                    */
      __IOM uint32_t RMM        : 1;            /*!< [21..21] Transmit Object Remote Monitoring                                */
      __IOM uint32_t SDT        : 1;            /*!< [22..22] Single Data Transfer                                             */
      __IOM uint32_t STT        : 1;            /*!< [23..23] Single Transmit Trial                                            */
      __IOM uint32_t DLC        : 4;            /*!< [27..24] Data Length Code                                                 */
            uint32_t            : 4;
    } bit;
  } CAN_MOFCR12;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001084) Message Object 12 FIFO/Gateway Pointer Register            */
    
    struct {
      __IOM uint32_t BOT        : 8;            /*!< [7..0] Bottom Pointer                                                     */
      __IOM uint32_t TOP        : 8;            /*!< [15..8] Top Pointer                                                       */
      __IOM uint32_t CUR        : 8;            /*!< [23..16] Current Object Pointer                                           */
      __IOM uint32_t SEL        : 8;            /*!< [31..24] Object Select Pointer                                            */
    } bit;
  } CAN_MOFGPR12;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001088) Message Object 12 Interrupt Pointer Register               */
    
    struct {
      __IOM uint32_t RXINP      : 4;            /*!< [3..0] Receive Interrupt Node Pointer                                     */
      __IOM uint32_t TXINP      : 4;            /*!< [7..4] Transmit Interrupt Node Pointer                                    */
      __IOM uint32_t MPN        : 8;            /*!< [15..8] Message Pending Number                                            */
      __IOM uint32_t CFCVAL     : 16;           /*!< [31..16] CAN Frame Counter Value                                          */
    } bit;
  } CAN_MOIPR12;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000108C) Message Object 12 Acceptance Mask Register                 */
    
    struct {
      __IOM uint32_t AM         : 29;           /*!< [28..0] Acceptance Mask for Message Identifier                            */
      __IOM uint32_t MIDE       : 1;            /*!< [29..29] Acceptance Mask Bit for Message IDE Bit                          */
            uint32_t            : 2;
    } bit;
  } CAN_MOAMR12;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001090) Message Object 12 Data Register Low                        */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_MODATAL12;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001094) Message Object 12 Data Register High                       */
    
    struct {
      __IOM uint32_t DB4        : 8;            /*!< [7..0] Data Byte 4 of Message Object n                                    */
      __IOM uint32_t DB5        : 8;            /*!< [15..8] Data Byte 5 of Message Object n                                   */
      __IOM uint32_t DB6        : 8;            /*!< [23..16] Data Byte 6 of Message Object n                                  */
      __IOM uint32_t DB7        : 8;            /*!< [31..24] Data Byte 7 of Message Object n                                  */
    } bit;
  } CAN_MODATAH12;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001098) Message Object 12 Arbitration Register                     */
    
    struct {
      __IOM uint32_t ID         : 29;           /*!< [28..0] CAN Identifier of Message Object n                                */
      __IOM uint32_t IDE        : 1;            /*!< [29..29] Identifier Extension Bit of Message Object n                     */
      __IOM uint32_t PRI        : 2;            /*!< [31..30] Priority Class                                                   */
    } bit;
  } CAN_MOAR12;
  
  union {
    union {
      __OM  uint32_t reg;                       /*!< (@ 0x0000109C) Message Object 12 Control Register                         */
      
      struct {
        __OM  uint32_t RESRXPND : 1;            /*!< [0..0] Reset Receive Pending                                              */
        __OM  uint32_t RESTXPND : 1;            /*!< [1..1] Reset Transmit Pending                                             */
        __OM  uint32_t RESRXUPD : 1;            /*!< [2..2] Reset Receive Updating                                             */
        __OM  uint32_t RESNEWDAT : 1;           /*!< [3..3] Reset New Data                                                     */
        __OM  uint32_t RESMSGLST : 1;           /*!< [4..4] Reset Message Lost                                                 */
        __OM  uint32_t RESMSGVAL : 1;           /*!< [5..5] Reset Message Valid                                                */
        __OM  uint32_t RESRTSEL : 1;            /*!< [6..6] Reset Receive/Transmit Selected                                    */
        __OM  uint32_t RESRXEN  : 1;            /*!< [7..7] Reset Receive Enable                                               */
        __OM  uint32_t RESTXRQ  : 1;            /*!< [8..8] Reset Transmit Request                                             */
        __OM  uint32_t RESTXEN0 : 1;            /*!< [9..9] Reset Transmit Enable 0                                            */
        __OM  uint32_t RESTXEN1 : 1;            /*!< [10..10] Reset Transmit Enable 1                                          */
        __OM  uint32_t RESDIR_SETDIR : 1;       /*!< [11..11] Reset Message Direction                                          */
              uint32_t          : 4;
        __OM  uint32_t SETRXPND : 1;            /*!< [16..16] Set Receive Pending                                              */
        __OM  uint32_t SETTXPND : 1;            /*!< [17..17] Set Transmit Pending                                             */
        __OM  uint32_t SETRXUPD : 1;            /*!< [18..18] Set Receive Updating                                             */
        __OM  uint32_t SETNEWDAT : 1;           /*!< [19..19] Set New Data                                                     */
        __OM  uint32_t SETMSGLST : 1;           /*!< [20..20] Set Message Lost                                                 */
        __OM  uint32_t SETMSGVAL : 1;           /*!< [21..21] Set Message Valid                                                */
        __OM  uint32_t SETRTSEL : 1;            /*!< [22..22] Set Receive/Transmit Selected                                    */
        __OM  uint32_t SETRXEN  : 1;            /*!< [23..23] Set Receive Enable                                               */
        __OM  uint32_t SETTXRQ  : 1;            /*!< [24..24] Set Transmit Request                                             */
        __OM  uint32_t SETTXEN0 : 1;            /*!< [25..25] Set Transmit Enable 0                                            */
        __OM  uint32_t SETTXEN1 : 1;            /*!< [26..26] Set Transmit Enable 1                                            */
        __OM  uint32_t SETDIR   : 1;            /*!< [27..27] Set Message Direction                                            */
              uint32_t          : 4;
      } bit;
    } CAN_MOCTR12;
    
    union {
      __IM  uint32_t reg;                       /*!< (@ 0x0000109C) Message Object 12 Status Register                          */
      
      struct {
        __IM  uint32_t RXPND    : 1;            /*!< [0..0] Receive Pending                                                    */
        __IM  uint32_t TXPND    : 1;            /*!< [1..1] Transmit Pending                                                   */
        __IM  uint32_t RXUPD    : 1;            /*!< [2..2] Receive Updating                                                   */
        __IM  uint32_t NEWDAT   : 1;            /*!< [3..3] New Data                                                           */
        __IM  uint32_t MSGLST   : 1;            /*!< [4..4] Message Lost                                                       */
        __IM  uint32_t MSGVAL   : 1;            /*!< [5..5] Message Valid                                                      */
        __IM  uint32_t RTSEL    : 1;            /*!< [6..6] Receive/Transmit Selected                                          */
        __IM  uint32_t RXEN     : 1;            /*!< [7..7] Receive Enable                                                     */
        __IM  uint32_t TXRQ     : 1;            /*!< [8..8] Transmit Request                                                   */
        __IM  uint32_t TXEN0    : 1;            /*!< [9..9] Transmit Enable 0                                                  */
        __IM  uint32_t TXEN1    : 1;            /*!< [10..10] Transmit Enable 1                                                */
        __IM  uint32_t DIR      : 1;            /*!< [11..11] Message Direction                                                */
        __IM  uint32_t LIST     : 4;            /*!< [15..12] List Allocation                                                  */
        __IM  uint32_t PPREV    : 8;            /*!< [23..16] Pointer to Previous Message Object                               */
        __IM  uint32_t PNEXT    : 8;            /*!< [31..24] Pointer to Next Message Object                                   */
      } bit;
    } CAN_MOSTAT12;
  } OBJ12;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000010A0) Message Object 13 Function Control Register                */
    
    struct {
      __IOM uint32_t MMC        : 4;            /*!< [3..0] Message Mode Control                                               */
            uint32_t            : 1;
      __IOM uint32_t BRS        : 1;            /*!< [5..5] Bit Rate Switch                                                    */
      __IOM uint32_t FDF        : 1;            /*!< [6..6] CAN FD Frame Format                                                */
            uint32_t            : 1;
      __IOM uint32_t GDFS       : 1;            /*!< [8..8] Gateway Data Frame Send                                            */
      __IOM uint32_t IDC        : 1;            /*!< [9..9] Identifier Copy                                                    */
      __IOM uint32_t DLCC       : 1;            /*!< [10..10] Data Length Code Copy                                            */
      __IOM uint32_t DATC       : 1;            /*!< [11..11] Data Copy                                                        */
            uint32_t            : 4;
      __IOM uint32_t RXIE       : 1;            /*!< [16..16] Receive Interrupt Enable                                         */
      __IOM uint32_t TXIE       : 1;            /*!< [17..17] Transmit Interrupt Enable                                        */
      __IOM uint32_t OVIE       : 1;            /*!< [18..18] Overflow Interrupt Enable                                        */
            uint32_t            : 1;
      __IOM uint32_t FRREN      : 1;            /*!< [20..20] Foreign Remote Request Enable                                    */
      __IOM uint32_t RMM        : 1;            /*!< [21..21] Transmit Object Remote Monitoring                                */
      __IOM uint32_t SDT        : 1;            /*!< [22..22] Single Data Transfer                                             */
      __IOM uint32_t STT        : 1;            /*!< [23..23] Single Transmit Trial                                            */
      __IOM uint32_t DLC        : 4;            /*!< [27..24] Data Length Code                                                 */
            uint32_t            : 4;
    } bit;
  } CAN_MOFCR13;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000010A4) Message Object 13 FIFO/Gateway Pointer Register            */
    
    struct {
      __IOM uint32_t BOT        : 8;            /*!< [7..0] Bottom Pointer                                                     */
      __IOM uint32_t TOP        : 8;            /*!< [15..8] Top Pointer                                                       */
      __IOM uint32_t CUR        : 8;            /*!< [23..16] Current Object Pointer                                           */
      __IOM uint32_t SEL        : 8;            /*!< [31..24] Object Select Pointer                                            */
    } bit;
  } CAN_MOFGPR13;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000010A8) Message Object 13 Interrupt Pointer Register               */
    
    struct {
      __IOM uint32_t RXINP      : 4;            /*!< [3..0] Receive Interrupt Node Pointer                                     */
      __IOM uint32_t TXINP      : 4;            /*!< [7..4] Transmit Interrupt Node Pointer                                    */
      __IOM uint32_t MPN        : 8;            /*!< [15..8] Message Pending Number                                            */
      __IOM uint32_t CFCVAL     : 16;           /*!< [31..16] CAN Frame Counter Value                                          */
    } bit;
  } CAN_MOIPR13;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000010AC) Message Object 13 Acceptance Mask Register                 */
    
    struct {
      __IOM uint32_t AM         : 29;           /*!< [28..0] Acceptance Mask for Message Identifier                            */
      __IOM uint32_t MIDE       : 1;            /*!< [29..29] Acceptance Mask Bit for Message IDE Bit                          */
            uint32_t            : 2;
    } bit;
  } CAN_MOAMR13;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000010B0) Message Object 13 Data Register Low                        */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_MODATAL13;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000010B4) Message Object 13 Data Register High                       */
    
    struct {
      __IOM uint32_t DB4        : 8;            /*!< [7..0] Data Byte 4 of Message Object n                                    */
      __IOM uint32_t DB5        : 8;            /*!< [15..8] Data Byte 5 of Message Object n                                   */
      __IOM uint32_t DB6        : 8;            /*!< [23..16] Data Byte 6 of Message Object n                                  */
      __IOM uint32_t DB7        : 8;            /*!< [31..24] Data Byte 7 of Message Object n                                  */
    } bit;
  } CAN_MODATAH13;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000010B8) Message Object 13 Arbitration Register                     */
    
    struct {
      __IOM uint32_t ID         : 29;           /*!< [28..0] CAN Identifier of Message Object n                                */
      __IOM uint32_t IDE        : 1;            /*!< [29..29] Identifier Extension Bit of Message Object n                     */
      __IOM uint32_t PRI        : 2;            /*!< [31..30] Priority Class                                                   */
    } bit;
  } CAN_MOAR13;
  
  union {
    union {
      __OM  uint32_t reg;                       /*!< (@ 0x000010BC) Message Object 13 Control Register                         */
      
      struct {
        __OM  uint32_t RESRXPND : 1;            /*!< [0..0] Reset Receive Pending                                              */
        __OM  uint32_t RESTXPND : 1;            /*!< [1..1] Reset Transmit Pending                                             */
        __OM  uint32_t RESRXUPD : 1;            /*!< [2..2] Reset Receive Updating                                             */
        __OM  uint32_t RESNEWDAT : 1;           /*!< [3..3] Reset New Data                                                     */
        __OM  uint32_t RESMSGLST : 1;           /*!< [4..4] Reset Message Lost                                                 */
        __OM  uint32_t RESMSGVAL : 1;           /*!< [5..5] Reset Message Valid                                                */
        __OM  uint32_t RESRTSEL : 1;            /*!< [6..6] Reset Receive/Transmit Selected                                    */
        __OM  uint32_t RESRXEN  : 1;            /*!< [7..7] Reset Receive Enable                                               */
        __OM  uint32_t RESTXRQ  : 1;            /*!< [8..8] Reset Transmit Request                                             */
        __OM  uint32_t RESTXEN0 : 1;            /*!< [9..9] Reset Transmit Enable 0                                            */
        __OM  uint32_t RESTXEN1 : 1;            /*!< [10..10] Reset Transmit Enable 1                                          */
        __OM  uint32_t RESDIR_SETDIR : 1;       /*!< [11..11] Reset Message Direction                                          */
              uint32_t          : 4;
        __OM  uint32_t SETRXPND : 1;            /*!< [16..16] Set Receive Pending                                              */
        __OM  uint32_t SETTXPND : 1;            /*!< [17..17] Set Transmit Pending                                             */
        __OM  uint32_t SETRXUPD : 1;            /*!< [18..18] Set Receive Updating                                             */
        __OM  uint32_t SETNEWDAT : 1;           /*!< [19..19] Set New Data                                                     */
        __OM  uint32_t SETMSGLST : 1;           /*!< [20..20] Set Message Lost                                                 */
        __OM  uint32_t SETMSGVAL : 1;           /*!< [21..21] Set Message Valid                                                */
        __OM  uint32_t SETRTSEL : 1;            /*!< [22..22] Set Receive/Transmit Selected                                    */
        __OM  uint32_t SETRXEN  : 1;            /*!< [23..23] Set Receive Enable                                               */
        __OM  uint32_t SETTXRQ  : 1;            /*!< [24..24] Set Transmit Request                                             */
        __OM  uint32_t SETTXEN0 : 1;            /*!< [25..25] Set Transmit Enable 0                                            */
        __OM  uint32_t SETTXEN1 : 1;            /*!< [26..26] Set Transmit Enable 1                                            */
        __OM  uint32_t SETDIR   : 1;            /*!< [27..27] Set Message Direction                                            */
              uint32_t          : 4;
      } bit;
    } CAN_MOCTR13;
    
    union {
      __IM  uint32_t reg;                       /*!< (@ 0x000010BC) Message Object 13 Status Register                          */
      
      struct {
        __IM  uint32_t RXPND    : 1;            /*!< [0..0] Receive Pending                                                    */
        __IM  uint32_t TXPND    : 1;            /*!< [1..1] Transmit Pending                                                   */
        __IM  uint32_t RXUPD    : 1;            /*!< [2..2] Receive Updating                                                   */
        __IM  uint32_t NEWDAT   : 1;            /*!< [3..3] New Data                                                           */
        __IM  uint32_t MSGLST   : 1;            /*!< [4..4] Message Lost                                                       */
        __IM  uint32_t MSGVAL   : 1;            /*!< [5..5] Message Valid                                                      */
        __IM  uint32_t RTSEL    : 1;            /*!< [6..6] Receive/Transmit Selected                                          */
        __IM  uint32_t RXEN     : 1;            /*!< [7..7] Receive Enable                                                     */
        __IM  uint32_t TXRQ     : 1;            /*!< [8..8] Transmit Request                                                   */
        __IM  uint32_t TXEN0    : 1;            /*!< [9..9] Transmit Enable 0                                                  */
        __IM  uint32_t TXEN1    : 1;            /*!< [10..10] Transmit Enable 1                                                */
        __IM  uint32_t DIR      : 1;            /*!< [11..11] Message Direction                                                */
        __IM  uint32_t LIST     : 4;            /*!< [15..12] List Allocation                                                  */
        __IM  uint32_t PPREV    : 8;            /*!< [23..16] Pointer to Previous Message Object                               */
        __IM  uint32_t PNEXT    : 8;            /*!< [31..24] Pointer to Next Message Object                                   */
      } bit;
    } CAN_MOSTAT13;
  } OBJ13;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000010C0) Message Object 14 Function Control Register                */
    
    struct {
      __IOM uint32_t MMC        : 4;            /*!< [3..0] Message Mode Control                                               */
            uint32_t            : 1;
      __IOM uint32_t BRS        : 1;            /*!< [5..5] Bit Rate Switch                                                    */
      __IOM uint32_t FDF        : 1;            /*!< [6..6] CAN FD Frame Format                                                */
            uint32_t            : 1;
      __IOM uint32_t GDFS       : 1;            /*!< [8..8] Gateway Data Frame Send                                            */
      __IOM uint32_t IDC        : 1;            /*!< [9..9] Identifier Copy                                                    */
      __IOM uint32_t DLCC       : 1;            /*!< [10..10] Data Length Code Copy                                            */
      __IOM uint32_t DATC       : 1;            /*!< [11..11] Data Copy                                                        */
            uint32_t            : 4;
      __IOM uint32_t RXIE       : 1;            /*!< [16..16] Receive Interrupt Enable                                         */
      __IOM uint32_t TXIE       : 1;            /*!< [17..17] Transmit Interrupt Enable                                        */
      __IOM uint32_t OVIE       : 1;            /*!< [18..18] Overflow Interrupt Enable                                        */
            uint32_t            : 1;
      __IOM uint32_t FRREN      : 1;            /*!< [20..20] Foreign Remote Request Enable                                    */
      __IOM uint32_t RMM        : 1;            /*!< [21..21] Transmit Object Remote Monitoring                                */
      __IOM uint32_t SDT        : 1;            /*!< [22..22] Single Data Transfer                                             */
      __IOM uint32_t STT        : 1;            /*!< [23..23] Single Transmit Trial                                            */
      __IOM uint32_t DLC        : 4;            /*!< [27..24] Data Length Code                                                 */
            uint32_t            : 4;
    } bit;
  } CAN_MOFCR14;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000010C4) Message Object 14 FIFO/Gateway Pointer Register            */
    
    struct {
      __IOM uint32_t BOT        : 8;            /*!< [7..0] Bottom Pointer                                                     */
      __IOM uint32_t TOP        : 8;            /*!< [15..8] Top Pointer                                                       */
      __IOM uint32_t CUR        : 8;            /*!< [23..16] Current Object Pointer                                           */
      __IOM uint32_t SEL        : 8;            /*!< [31..24] Object Select Pointer                                            */
    } bit;
  } CAN_MOFGPR14;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000010C8) Message Object 14 Interrupt Pointer Register               */
    
    struct {
      __IOM uint32_t RXINP      : 4;            /*!< [3..0] Receive Interrupt Node Pointer                                     */
      __IOM uint32_t TXINP      : 4;            /*!< [7..4] Transmit Interrupt Node Pointer                                    */
      __IOM uint32_t MPN        : 8;            /*!< [15..8] Message Pending Number                                            */
      __IOM uint32_t CFCVAL     : 16;           /*!< [31..16] CAN Frame Counter Value                                          */
    } bit;
  } CAN_MOIPR14;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000010CC) Message Object 14 Acceptance Mask Register                 */
    
    struct {
      __IOM uint32_t AM         : 29;           /*!< [28..0] Acceptance Mask for Message Identifier                            */
      __IOM uint32_t MIDE       : 1;            /*!< [29..29] Acceptance Mask Bit for Message IDE Bit                          */
            uint32_t            : 2;
    } bit;
  } CAN_MOAMR14;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000010D0) Message Object 14 Data Register Low                        */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_MODATAL14;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000010D4) Message Object 14 Data Register High                       */
    
    struct {
      __IOM uint32_t DB4        : 8;            /*!< [7..0] Data Byte 4 of Message Object n                                    */
      __IOM uint32_t DB5        : 8;            /*!< [15..8] Data Byte 5 of Message Object n                                   */
      __IOM uint32_t DB6        : 8;            /*!< [23..16] Data Byte 6 of Message Object n                                  */
      __IOM uint32_t DB7        : 8;            /*!< [31..24] Data Byte 7 of Message Object n                                  */
    } bit;
  } CAN_MODATAH14;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000010D8) Message Object 14 Arbitration Register                     */
    
    struct {
      __IOM uint32_t ID         : 29;           /*!< [28..0] CAN Identifier of Message Object n                                */
      __IOM uint32_t IDE        : 1;            /*!< [29..29] Identifier Extension Bit of Message Object n                     */
      __IOM uint32_t PRI        : 2;            /*!< [31..30] Priority Class                                                   */
    } bit;
  } CAN_MOAR14;
  
  union {
    union {
      __OM  uint32_t reg;                       /*!< (@ 0x000010DC) Message Object 14 Control Register                         */
      
      struct {
        __OM  uint32_t RESRXPND : 1;            /*!< [0..0] Reset Receive Pending                                              */
        __OM  uint32_t RESTXPND : 1;            /*!< [1..1] Reset Transmit Pending                                             */
        __OM  uint32_t RESRXUPD : 1;            /*!< [2..2] Reset Receive Updating                                             */
        __OM  uint32_t RESNEWDAT : 1;           /*!< [3..3] Reset New Data                                                     */
        __OM  uint32_t RESMSGLST : 1;           /*!< [4..4] Reset Message Lost                                                 */
        __OM  uint32_t RESMSGVAL : 1;           /*!< [5..5] Reset Message Valid                                                */
        __OM  uint32_t RESRTSEL : 1;            /*!< [6..6] Reset Receive/Transmit Selected                                    */
        __OM  uint32_t RESRXEN  : 1;            /*!< [7..7] Reset Receive Enable                                               */
        __OM  uint32_t RESTXRQ  : 1;            /*!< [8..8] Reset Transmit Request                                             */
        __OM  uint32_t RESTXEN0 : 1;            /*!< [9..9] Reset Transmit Enable 0                                            */
        __OM  uint32_t RESTXEN1 : 1;            /*!< [10..10] Reset Transmit Enable 1                                          */
        __OM  uint32_t RESDIR_SETDIR : 1;       /*!< [11..11] Reset Message Direction                                          */
              uint32_t          : 4;
        __OM  uint32_t SETRXPND : 1;            /*!< [16..16] Set Receive Pending                                              */
        __OM  uint32_t SETTXPND : 1;            /*!< [17..17] Set Transmit Pending                                             */
        __OM  uint32_t SETRXUPD : 1;            /*!< [18..18] Set Receive Updating                                             */
        __OM  uint32_t SETNEWDAT : 1;           /*!< [19..19] Set New Data                                                     */
        __OM  uint32_t SETMSGLST : 1;           /*!< [20..20] Set Message Lost                                                 */
        __OM  uint32_t SETMSGVAL : 1;           /*!< [21..21] Set Message Valid                                                */
        __OM  uint32_t SETRTSEL : 1;            /*!< [22..22] Set Receive/Transmit Selected                                    */
        __OM  uint32_t SETRXEN  : 1;            /*!< [23..23] Set Receive Enable                                               */
        __OM  uint32_t SETTXRQ  : 1;            /*!< [24..24] Set Transmit Request                                             */
        __OM  uint32_t SETTXEN0 : 1;            /*!< [25..25] Set Transmit Enable 0                                            */
        __OM  uint32_t SETTXEN1 : 1;            /*!< [26..26] Set Transmit Enable 1                                            */
        __OM  uint32_t SETDIR   : 1;            /*!< [27..27] Set Message Direction                                            */
              uint32_t          : 4;
      } bit;
    } CAN_MOCTR14;
    
    union {
      __IM  uint32_t reg;                       /*!< (@ 0x000010DC) Message Object 14 Status Register                          */
      
      struct {
        __IM  uint32_t RXPND    : 1;            /*!< [0..0] Receive Pending                                                    */
        __IM  uint32_t TXPND    : 1;            /*!< [1..1] Transmit Pending                                                   */
        __IM  uint32_t RXUPD    : 1;            /*!< [2..2] Receive Updating                                                   */
        __IM  uint32_t NEWDAT   : 1;            /*!< [3..3] New Data                                                           */
        __IM  uint32_t MSGLST   : 1;            /*!< [4..4] Message Lost                                                       */
        __IM  uint32_t MSGVAL   : 1;            /*!< [5..5] Message Valid                                                      */
        __IM  uint32_t RTSEL    : 1;            /*!< [6..6] Receive/Transmit Selected                                          */
        __IM  uint32_t RXEN     : 1;            /*!< [7..7] Receive Enable                                                     */
        __IM  uint32_t TXRQ     : 1;            /*!< [8..8] Transmit Request                                                   */
        __IM  uint32_t TXEN0    : 1;            /*!< [9..9] Transmit Enable 0                                                  */
        __IM  uint32_t TXEN1    : 1;            /*!< [10..10] Transmit Enable 1                                                */
        __IM  uint32_t DIR      : 1;            /*!< [11..11] Message Direction                                                */
        __IM  uint32_t LIST     : 4;            /*!< [15..12] List Allocation                                                  */
        __IM  uint32_t PPREV    : 8;            /*!< [23..16] Pointer to Previous Message Object                               */
        __IM  uint32_t PNEXT    : 8;            /*!< [31..24] Pointer to Next Message Object                                   */
      } bit;
    } CAN_MOSTAT14;
  } OBJ14;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000010E0) Message Object 15 Function Control Register                */
    
    struct {
      __IOM uint32_t MMC        : 4;            /*!< [3..0] Message Mode Control                                               */
            uint32_t            : 1;
      __IOM uint32_t BRS        : 1;            /*!< [5..5] Bit Rate Switch                                                    */
      __IOM uint32_t FDF        : 1;            /*!< [6..6] CAN FD Frame Format                                                */
            uint32_t            : 1;
      __IOM uint32_t GDFS       : 1;            /*!< [8..8] Gateway Data Frame Send                                            */
      __IOM uint32_t IDC        : 1;            /*!< [9..9] Identifier Copy                                                    */
      __IOM uint32_t DLCC       : 1;            /*!< [10..10] Data Length Code Copy                                            */
      __IOM uint32_t DATC       : 1;            /*!< [11..11] Data Copy                                                        */
            uint32_t            : 4;
      __IOM uint32_t RXIE       : 1;            /*!< [16..16] Receive Interrupt Enable                                         */
      __IOM uint32_t TXIE       : 1;            /*!< [17..17] Transmit Interrupt Enable                                        */
      __IOM uint32_t OVIE       : 1;            /*!< [18..18] Overflow Interrupt Enable                                        */
            uint32_t            : 1;
      __IOM uint32_t FRREN      : 1;            /*!< [20..20] Foreign Remote Request Enable                                    */
      __IOM uint32_t RMM        : 1;            /*!< [21..21] Transmit Object Remote Monitoring                                */
      __IOM uint32_t SDT        : 1;            /*!< [22..22] Single Data Transfer                                             */
      __IOM uint32_t STT        : 1;            /*!< [23..23] Single Transmit Trial                                            */
      __IOM uint32_t DLC        : 4;            /*!< [27..24] Data Length Code                                                 */
            uint32_t            : 4;
    } bit;
  } CAN_MOFCR15;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000010E4) Message Object 15 FIFO/Gateway Pointer Register            */
    
    struct {
      __IOM uint32_t BOT        : 8;            /*!< [7..0] Bottom Pointer                                                     */
      __IOM uint32_t TOP        : 8;            /*!< [15..8] Top Pointer                                                       */
      __IOM uint32_t CUR        : 8;            /*!< [23..16] Current Object Pointer                                           */
      __IOM uint32_t SEL        : 8;            /*!< [31..24] Object Select Pointer                                            */
    } bit;
  } CAN_MOFGPR15;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000010E8) Message Object 15 Interrupt Pointer Register               */
    
    struct {
      __IOM uint32_t RXINP      : 4;            /*!< [3..0] Receive Interrupt Node Pointer                                     */
      __IOM uint32_t TXINP      : 4;            /*!< [7..4] Transmit Interrupt Node Pointer                                    */
      __IOM uint32_t MPN        : 8;            /*!< [15..8] Message Pending Number                                            */
      __IOM uint32_t CFCVAL     : 16;           /*!< [31..16] CAN Frame Counter Value                                          */
    } bit;
  } CAN_MOIPR15;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000010EC) Message Object 15 Acceptance Mask Register                 */
    
    struct {
      __IOM uint32_t AM         : 29;           /*!< [28..0] Acceptance Mask for Message Identifier                            */
      __IOM uint32_t MIDE       : 1;            /*!< [29..29] Acceptance Mask Bit for Message IDE Bit                          */
            uint32_t            : 2;
    } bit;
  } CAN_MOAMR15;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000010F0) Message Object 15 Data Register Low                        */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_MODATAL15;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000010F4) Message Object 15 Data Register High                       */
    
    struct {
      __IOM uint32_t DB4        : 8;            /*!< [7..0] Data Byte 4 of Message Object n                                    */
      __IOM uint32_t DB5        : 8;            /*!< [15..8] Data Byte 5 of Message Object n                                   */
      __IOM uint32_t DB6        : 8;            /*!< [23..16] Data Byte 6 of Message Object n                                  */
      __IOM uint32_t DB7        : 8;            /*!< [31..24] Data Byte 7 of Message Object n                                  */
    } bit;
  } CAN_MODATAH15;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000010F8) Message Object 15 Arbitration Register                     */
    
    struct {
      __IOM uint32_t ID         : 29;           /*!< [28..0] CAN Identifier of Message Object n                                */
      __IOM uint32_t IDE        : 1;            /*!< [29..29] Identifier Extension Bit of Message Object n                     */
      __IOM uint32_t PRI        : 2;            /*!< [31..30] Priority Class                                                   */
    } bit;
  } CAN_MOAR15;
  
  union {
    union {
      __OM  uint32_t reg;                       /*!< (@ 0x000010FC) Message Object 15 Control Register                         */
      
      struct {
        __OM  uint32_t RESRXPND : 1;            /*!< [0..0] Reset Receive Pending                                              */
        __OM  uint32_t RESTXPND : 1;            /*!< [1..1] Reset Transmit Pending                                             */
        __OM  uint32_t RESRXUPD : 1;            /*!< [2..2] Reset Receive Updating                                             */
        __OM  uint32_t RESNEWDAT : 1;           /*!< [3..3] Reset New Data                                                     */
        __OM  uint32_t RESMSGLST : 1;           /*!< [4..4] Reset Message Lost                                                 */
        __OM  uint32_t RESMSGVAL : 1;           /*!< [5..5] Reset Message Valid                                                */
        __OM  uint32_t RESRTSEL : 1;            /*!< [6..6] Reset Receive/Transmit Selected                                    */
        __OM  uint32_t RESRXEN  : 1;            /*!< [7..7] Reset Receive Enable                                               */
        __OM  uint32_t RESTXRQ  : 1;            /*!< [8..8] Reset Transmit Request                                             */
        __OM  uint32_t RESTXEN0 : 1;            /*!< [9..9] Reset Transmit Enable 0                                            */
        __OM  uint32_t RESTXEN1 : 1;            /*!< [10..10] Reset Transmit Enable 1                                          */
        __OM  uint32_t RESDIR_SETDIR : 1;       /*!< [11..11] Reset Message Direction                                          */
              uint32_t          : 4;
        __OM  uint32_t SETRXPND : 1;            /*!< [16..16] Set Receive Pending                                              */
        __OM  uint32_t SETTXPND : 1;            /*!< [17..17] Set Transmit Pending                                             */
        __OM  uint32_t SETRXUPD : 1;            /*!< [18..18] Set Receive Updating                                             */
        __OM  uint32_t SETNEWDAT : 1;           /*!< [19..19] Set New Data                                                     */
        __OM  uint32_t SETMSGLST : 1;           /*!< [20..20] Set Message Lost                                                 */
        __OM  uint32_t SETMSGVAL : 1;           /*!< [21..21] Set Message Valid                                                */
        __OM  uint32_t SETRTSEL : 1;            /*!< [22..22] Set Receive/Transmit Selected                                    */
        __OM  uint32_t SETRXEN  : 1;            /*!< [23..23] Set Receive Enable                                               */
        __OM  uint32_t SETTXRQ  : 1;            /*!< [24..24] Set Transmit Request                                             */
        __OM  uint32_t SETTXEN0 : 1;            /*!< [25..25] Set Transmit Enable 0                                            */
        __OM  uint32_t SETTXEN1 : 1;            /*!< [26..26] Set Transmit Enable 1                                            */
        __OM  uint32_t SETDIR   : 1;            /*!< [27..27] Set Message Direction                                            */
              uint32_t          : 4;
      } bit;
    } CAN_MOCTR15;
    
    union {
      __IM  uint32_t reg;                       /*!< (@ 0x000010FC) Message Object 15 Status Register                          */
      
      struct {
        __IM  uint32_t RXPND    : 1;            /*!< [0..0] Receive Pending                                                    */
        __IM  uint32_t TXPND    : 1;            /*!< [1..1] Transmit Pending                                                   */
        __IM  uint32_t RXUPD    : 1;            /*!< [2..2] Receive Updating                                                   */
        __IM  uint32_t NEWDAT   : 1;            /*!< [3..3] New Data                                                           */
        __IM  uint32_t MSGLST   : 1;            /*!< [4..4] Message Lost                                                       */
        __IM  uint32_t MSGVAL   : 1;            /*!< [5..5] Message Valid                                                      */
        __IM  uint32_t RTSEL    : 1;            /*!< [6..6] Receive/Transmit Selected                                          */
        __IM  uint32_t RXEN     : 1;            /*!< [7..7] Receive Enable                                                     */
        __IM  uint32_t TXRQ     : 1;            /*!< [8..8] Transmit Request                                                   */
        __IM  uint32_t TXEN0    : 1;            /*!< [9..9] Transmit Enable 0                                                  */
        __IM  uint32_t TXEN1    : 1;            /*!< [10..10] Transmit Enable 1                                                */
        __IM  uint32_t DIR      : 1;            /*!< [11..11] Message Direction                                                */
        __IM  uint32_t LIST     : 4;            /*!< [15..12] List Allocation                                                  */
        __IM  uint32_t PPREV    : 8;            /*!< [23..16] Pointer to Previous Message Object                               */
        __IM  uint32_t PNEXT    : 8;            /*!< [31..24] Pointer to Next Message Object                                   */
      } bit;
    } CAN_MOSTAT15;
  } OBJ15;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001100) Message Object 16 Function Control Register                */
    
    struct {
      __IOM uint32_t MMC        : 4;            /*!< [3..0] Message Mode Control                                               */
            uint32_t            : 1;
      __IOM uint32_t BRS        : 1;            /*!< [5..5] Bit Rate Switch                                                    */
      __IOM uint32_t FDF        : 1;            /*!< [6..6] CAN FD Frame Format                                                */
            uint32_t            : 1;
      __IOM uint32_t GDFS       : 1;            /*!< [8..8] Gateway Data Frame Send                                            */
      __IOM uint32_t IDC        : 1;            /*!< [9..9] Identifier Copy                                                    */
      __IOM uint32_t DLCC       : 1;            /*!< [10..10] Data Length Code Copy                                            */
      __IOM uint32_t DATC       : 1;            /*!< [11..11] Data Copy                                                        */
            uint32_t            : 4;
      __IOM uint32_t RXIE       : 1;            /*!< [16..16] Receive Interrupt Enable                                         */
      __IOM uint32_t TXIE       : 1;            /*!< [17..17] Transmit Interrupt Enable                                        */
      __IOM uint32_t OVIE       : 1;            /*!< [18..18] Overflow Interrupt Enable                                        */
            uint32_t            : 1;
      __IOM uint32_t FRREN      : 1;            /*!< [20..20] Foreign Remote Request Enable                                    */
      __IOM uint32_t RMM        : 1;            /*!< [21..21] Transmit Object Remote Monitoring                                */
      __IOM uint32_t SDT        : 1;            /*!< [22..22] Single Data Transfer                                             */
      __IOM uint32_t STT        : 1;            /*!< [23..23] Single Transmit Trial                                            */
      __IOM uint32_t DLC        : 4;            /*!< [27..24] Data Length Code                                                 */
            uint32_t            : 4;
    } bit;
  } CAN_MOFCR16;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001104) Message Object 16 FIFO/Gateway Pointer Register            */
    
    struct {
      __IOM uint32_t BOT        : 8;            /*!< [7..0] Bottom Pointer                                                     */
      __IOM uint32_t TOP        : 8;            /*!< [15..8] Top Pointer                                                       */
      __IOM uint32_t CUR        : 8;            /*!< [23..16] Current Object Pointer                                           */
      __IOM uint32_t SEL        : 8;            /*!< [31..24] Object Select Pointer                                            */
    } bit;
  } CAN_MOFGPR16;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001108) Message Object 16 Interrupt Pointer Register               */
    
    struct {
      __IOM uint32_t RXINP      : 4;            /*!< [3..0] Receive Interrupt Node Pointer                                     */
      __IOM uint32_t TXINP      : 4;            /*!< [7..4] Transmit Interrupt Node Pointer                                    */
      __IOM uint32_t MPN        : 8;            /*!< [15..8] Message Pending Number                                            */
      __IOM uint32_t CFCVAL     : 16;           /*!< [31..16] CAN Frame Counter Value                                          */
    } bit;
  } CAN_MOIPR16;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000110C) Message Object 16 Acceptance Mask Register                 */
    
    struct {
      __IOM uint32_t AM         : 29;           /*!< [28..0] Acceptance Mask for Message Identifier                            */
      __IOM uint32_t MIDE       : 1;            /*!< [29..29] Acceptance Mask Bit for Message IDE Bit                          */
            uint32_t            : 2;
    } bit;
  } CAN_MOAMR16;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001110) Message Object 16 Data Register Low                        */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_MODATAL16;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001114) Message Object 16 Data Register High                       */
    
    struct {
      __IOM uint32_t DB4        : 8;            /*!< [7..0] Data Byte 4 of Message Object n                                    */
      __IOM uint32_t DB5        : 8;            /*!< [15..8] Data Byte 5 of Message Object n                                   */
      __IOM uint32_t DB6        : 8;            /*!< [23..16] Data Byte 6 of Message Object n                                  */
      __IOM uint32_t DB7        : 8;            /*!< [31..24] Data Byte 7 of Message Object n                                  */
    } bit;
  } CAN_MODATAH16;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001118) Message Object 16 Arbitration Register                     */
    
    struct {
      __IOM uint32_t ID         : 29;           /*!< [28..0] CAN Identifier of Message Object n                                */
      __IOM uint32_t IDE        : 1;            /*!< [29..29] Identifier Extension Bit of Message Object n                     */
      __IOM uint32_t PRI        : 2;            /*!< [31..30] Priority Class                                                   */
    } bit;
  } CAN_MOAR16;
  
  union {
    union {
      __OM  uint32_t reg;                       /*!< (@ 0x0000111C) Message Object 16 Control Register                         */
      
      struct {
        __OM  uint32_t RESRXPND : 1;            /*!< [0..0] Reset Receive Pending                                              */
        __OM  uint32_t RESTXPND : 1;            /*!< [1..1] Reset Transmit Pending                                             */
        __OM  uint32_t RESRXUPD : 1;            /*!< [2..2] Reset Receive Updating                                             */
        __OM  uint32_t RESNEWDAT : 1;           /*!< [3..3] Reset New Data                                                     */
        __OM  uint32_t RESMSGLST : 1;           /*!< [4..4] Reset Message Lost                                                 */
        __OM  uint32_t RESMSGVAL : 1;           /*!< [5..5] Reset Message Valid                                                */
        __OM  uint32_t RESRTSEL : 1;            /*!< [6..6] Reset Receive/Transmit Selected                                    */
        __OM  uint32_t RESRXEN  : 1;            /*!< [7..7] Reset Receive Enable                                               */
        __OM  uint32_t RESTXRQ  : 1;            /*!< [8..8] Reset Transmit Request                                             */
        __OM  uint32_t RESTXEN0 : 1;            /*!< [9..9] Reset Transmit Enable 0                                            */
        __OM  uint32_t RESTXEN1 : 1;            /*!< [10..10] Reset Transmit Enable 1                                          */
        __OM  uint32_t RESDIR_SETDIR : 1;       /*!< [11..11] Reset Message Direction                                          */
              uint32_t          : 4;
        __OM  uint32_t SETRXPND : 1;            /*!< [16..16] Set Receive Pending                                              */
        __OM  uint32_t SETTXPND : 1;            /*!< [17..17] Set Transmit Pending                                             */
        __OM  uint32_t SETRXUPD : 1;            /*!< [18..18] Set Receive Updating                                             */
        __OM  uint32_t SETNEWDAT : 1;           /*!< [19..19] Set New Data                                                     */
        __OM  uint32_t SETMSGLST : 1;           /*!< [20..20] Set Message Lost                                                 */
        __OM  uint32_t SETMSGVAL : 1;           /*!< [21..21] Set Message Valid                                                */
        __OM  uint32_t SETRTSEL : 1;            /*!< [22..22] Set Receive/Transmit Selected                                    */
        __OM  uint32_t SETRXEN  : 1;            /*!< [23..23] Set Receive Enable                                               */
        __OM  uint32_t SETTXRQ  : 1;            /*!< [24..24] Set Transmit Request                                             */
        __OM  uint32_t SETTXEN0 : 1;            /*!< [25..25] Set Transmit Enable 0                                            */
        __OM  uint32_t SETTXEN1 : 1;            /*!< [26..26] Set Transmit Enable 1                                            */
        __OM  uint32_t SETDIR   : 1;            /*!< [27..27] Set Message Direction                                            */
              uint32_t          : 4;
      } bit;
    } CAN_MOCTR16;
    
    union {
      __IM  uint32_t reg;                       /*!< (@ 0x0000111C) Message Object 16 Status Register                          */
      
      struct {
        __IM  uint32_t RXPND    : 1;            /*!< [0..0] Receive Pending                                                    */
        __IM  uint32_t TXPND    : 1;            /*!< [1..1] Transmit Pending                                                   */
        __IM  uint32_t RXUPD    : 1;            /*!< [2..2] Receive Updating                                                   */
        __IM  uint32_t NEWDAT   : 1;            /*!< [3..3] New Data                                                           */
        __IM  uint32_t MSGLST   : 1;            /*!< [4..4] Message Lost                                                       */
        __IM  uint32_t MSGVAL   : 1;            /*!< [5..5] Message Valid                                                      */
        __IM  uint32_t RTSEL    : 1;            /*!< [6..6] Receive/Transmit Selected                                          */
        __IM  uint32_t RXEN     : 1;            /*!< [7..7] Receive Enable                                                     */
        __IM  uint32_t TXRQ     : 1;            /*!< [8..8] Transmit Request                                                   */
        __IM  uint32_t TXEN0    : 1;            /*!< [9..9] Transmit Enable 0                                                  */
        __IM  uint32_t TXEN1    : 1;            /*!< [10..10] Transmit Enable 1                                                */
        __IM  uint32_t DIR      : 1;            /*!< [11..11] Message Direction                                                */
        __IM  uint32_t LIST     : 4;            /*!< [15..12] List Allocation                                                  */
        __IM  uint32_t PPREV    : 8;            /*!< [23..16] Pointer to Previous Message Object                               */
        __IM  uint32_t PNEXT    : 8;            /*!< [31..24] Pointer to Next Message Object                                   */
      } bit;
    } CAN_MOSTAT16;
  } OBJ16;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001120) Message Object 17 Function Control Register                */
    
    struct {
      __IOM uint32_t MMC        : 4;            /*!< [3..0] Message Mode Control                                               */
            uint32_t            : 1;
      __IOM uint32_t BRS        : 1;            /*!< [5..5] Bit Rate Switch                                                    */
      __IOM uint32_t FDF        : 1;            /*!< [6..6] CAN FD Frame Format                                                */
            uint32_t            : 1;
      __IOM uint32_t GDFS       : 1;            /*!< [8..8] Gateway Data Frame Send                                            */
      __IOM uint32_t IDC        : 1;            /*!< [9..9] Identifier Copy                                                    */
      __IOM uint32_t DLCC       : 1;            /*!< [10..10] Data Length Code Copy                                            */
      __IOM uint32_t DATC       : 1;            /*!< [11..11] Data Copy                                                        */
            uint32_t            : 4;
      __IOM uint32_t RXIE       : 1;            /*!< [16..16] Receive Interrupt Enable                                         */
      __IOM uint32_t TXIE       : 1;            /*!< [17..17] Transmit Interrupt Enable                                        */
      __IOM uint32_t OVIE       : 1;            /*!< [18..18] Overflow Interrupt Enable                                        */
            uint32_t            : 1;
      __IOM uint32_t FRREN      : 1;            /*!< [20..20] Foreign Remote Request Enable                                    */
      __IOM uint32_t RMM        : 1;            /*!< [21..21] Transmit Object Remote Monitoring                                */
      __IOM uint32_t SDT        : 1;            /*!< [22..22] Single Data Transfer                                             */
      __IOM uint32_t STT        : 1;            /*!< [23..23] Single Transmit Trial                                            */
      __IOM uint32_t DLC        : 4;            /*!< [27..24] Data Length Code                                                 */
            uint32_t            : 4;
    } bit;
  } CAN_MOFCR17;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001124) Message Object 17 FIFO/Gateway Pointer Register            */
    
    struct {
      __IOM uint32_t BOT        : 8;            /*!< [7..0] Bottom Pointer                                                     */
      __IOM uint32_t TOP        : 8;            /*!< [15..8] Top Pointer                                                       */
      __IOM uint32_t CUR        : 8;            /*!< [23..16] Current Object Pointer                                           */
      __IOM uint32_t SEL        : 8;            /*!< [31..24] Object Select Pointer                                            */
    } bit;
  } CAN_MOFGPR17;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001128) Message Object 17 Interrupt Pointer Register               */
    
    struct {
      __IOM uint32_t RXINP      : 4;            /*!< [3..0] Receive Interrupt Node Pointer                                     */
      __IOM uint32_t TXINP      : 4;            /*!< [7..4] Transmit Interrupt Node Pointer                                    */
      __IOM uint32_t MPN        : 8;            /*!< [15..8] Message Pending Number                                            */
      __IOM uint32_t CFCVAL     : 16;           /*!< [31..16] CAN Frame Counter Value                                          */
    } bit;
  } CAN_MOIPR17;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000112C) Message Object 17 Acceptance Mask Register                 */
    
    struct {
      __IOM uint32_t AM         : 29;           /*!< [28..0] Acceptance Mask for Message Identifier                            */
      __IOM uint32_t MIDE       : 1;            /*!< [29..29] Acceptance Mask Bit for Message IDE Bit                          */
            uint32_t            : 2;
    } bit;
  } CAN_MOAMR17;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001130) Message Object 17 Data Register Low                        */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_MODATAL17;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001134) Message Object 17 Data Register High                       */
    
    struct {
      __IOM uint32_t DB4        : 8;            /*!< [7..0] Data Byte 4 of Message Object n                                    */
      __IOM uint32_t DB5        : 8;            /*!< [15..8] Data Byte 5 of Message Object n                                   */
      __IOM uint32_t DB6        : 8;            /*!< [23..16] Data Byte 6 of Message Object n                                  */
      __IOM uint32_t DB7        : 8;            /*!< [31..24] Data Byte 7 of Message Object n                                  */
    } bit;
  } CAN_MODATAH17;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001138) Message Object 17 Arbitration Register                     */
    
    struct {
      __IOM uint32_t ID         : 29;           /*!< [28..0] CAN Identifier of Message Object n                                */
      __IOM uint32_t IDE        : 1;            /*!< [29..29] Identifier Extension Bit of Message Object n                     */
      __IOM uint32_t PRI        : 2;            /*!< [31..30] Priority Class                                                   */
    } bit;
  } CAN_MOAR17;
  
  union {
    union {
      __OM  uint32_t reg;                       /*!< (@ 0x0000113C) Message Object 17 Control Register                         */
      
      struct {
        __OM  uint32_t RESRXPND : 1;            /*!< [0..0] Reset Receive Pending                                              */
        __OM  uint32_t RESTXPND : 1;            /*!< [1..1] Reset Transmit Pending                                             */
        __OM  uint32_t RESRXUPD : 1;            /*!< [2..2] Reset Receive Updating                                             */
        __OM  uint32_t RESNEWDAT : 1;           /*!< [3..3] Reset New Data                                                     */
        __OM  uint32_t RESMSGLST : 1;           /*!< [4..4] Reset Message Lost                                                 */
        __OM  uint32_t RESMSGVAL : 1;           /*!< [5..5] Reset Message Valid                                                */
        __OM  uint32_t RESRTSEL : 1;            /*!< [6..6] Reset Receive/Transmit Selected                                    */
        __OM  uint32_t RESRXEN  : 1;            /*!< [7..7] Reset Receive Enable                                               */
        __OM  uint32_t RESTXRQ  : 1;            /*!< [8..8] Reset Transmit Request                                             */
        __OM  uint32_t RESTXEN0 : 1;            /*!< [9..9] Reset Transmit Enable 0                                            */
        __OM  uint32_t RESTXEN1 : 1;            /*!< [10..10] Reset Transmit Enable 1                                          */
        __OM  uint32_t RESDIR_SETDIR : 1;       /*!< [11..11] Reset Message Direction                                          */
              uint32_t          : 4;
        __OM  uint32_t SETRXPND : 1;            /*!< [16..16] Set Receive Pending                                              */
        __OM  uint32_t SETTXPND : 1;            /*!< [17..17] Set Transmit Pending                                             */
        __OM  uint32_t SETRXUPD : 1;            /*!< [18..18] Set Receive Updating                                             */
        __OM  uint32_t SETNEWDAT : 1;           /*!< [19..19] Set New Data                                                     */
        __OM  uint32_t SETMSGLST : 1;           /*!< [20..20] Set Message Lost                                                 */
        __OM  uint32_t SETMSGVAL : 1;           /*!< [21..21] Set Message Valid                                                */
        __OM  uint32_t SETRTSEL : 1;            /*!< [22..22] Set Receive/Transmit Selected                                    */
        __OM  uint32_t SETRXEN  : 1;            /*!< [23..23] Set Receive Enable                                               */
        __OM  uint32_t SETTXRQ  : 1;            /*!< [24..24] Set Transmit Request                                             */
        __OM  uint32_t SETTXEN0 : 1;            /*!< [25..25] Set Transmit Enable 0                                            */
        __OM  uint32_t SETTXEN1 : 1;            /*!< [26..26] Set Transmit Enable 1                                            */
        __OM  uint32_t SETDIR   : 1;            /*!< [27..27] Set Message Direction                                            */
              uint32_t          : 4;
      } bit;
    } CAN_MOCTR17;
    
    union {
      __IM  uint32_t reg;                       /*!< (@ 0x0000113C) Message Object 17 Status Register                          */
      
      struct {
        __IM  uint32_t RXPND    : 1;            /*!< [0..0] Receive Pending                                                    */
        __IM  uint32_t TXPND    : 1;            /*!< [1..1] Transmit Pending                                                   */
        __IM  uint32_t RXUPD    : 1;            /*!< [2..2] Receive Updating                                                   */
        __IM  uint32_t NEWDAT   : 1;            /*!< [3..3] New Data                                                           */
        __IM  uint32_t MSGLST   : 1;            /*!< [4..4] Message Lost                                                       */
        __IM  uint32_t MSGVAL   : 1;            /*!< [5..5] Message Valid                                                      */
        __IM  uint32_t RTSEL    : 1;            /*!< [6..6] Receive/Transmit Selected                                          */
        __IM  uint32_t RXEN     : 1;            /*!< [7..7] Receive Enable                                                     */
        __IM  uint32_t TXRQ     : 1;            /*!< [8..8] Transmit Request                                                   */
        __IM  uint32_t TXEN0    : 1;            /*!< [9..9] Transmit Enable 0                                                  */
        __IM  uint32_t TXEN1    : 1;            /*!< [10..10] Transmit Enable 1                                                */
        __IM  uint32_t DIR      : 1;            /*!< [11..11] Message Direction                                                */
        __IM  uint32_t LIST     : 4;            /*!< [15..12] List Allocation                                                  */
        __IM  uint32_t PPREV    : 8;            /*!< [23..16] Pointer to Previous Message Object                               */
        __IM  uint32_t PNEXT    : 8;            /*!< [31..24] Pointer to Next Message Object                                   */
      } bit;
    } CAN_MOSTAT17;
  } OBJ17;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001140) Message Object 18 Function Control Register                */
    
    struct {
      __IOM uint32_t MMC        : 4;            /*!< [3..0] Message Mode Control                                               */
            uint32_t            : 1;
      __IOM uint32_t BRS        : 1;            /*!< [5..5] Bit Rate Switch                                                    */
      __IOM uint32_t FDF        : 1;            /*!< [6..6] CAN FD Frame Format                                                */
            uint32_t            : 1;
      __IOM uint32_t GDFS       : 1;            /*!< [8..8] Gateway Data Frame Send                                            */
      __IOM uint32_t IDC        : 1;            /*!< [9..9] Identifier Copy                                                    */
      __IOM uint32_t DLCC       : 1;            /*!< [10..10] Data Length Code Copy                                            */
      __IOM uint32_t DATC       : 1;            /*!< [11..11] Data Copy                                                        */
            uint32_t            : 4;
      __IOM uint32_t RXIE       : 1;            /*!< [16..16] Receive Interrupt Enable                                         */
      __IOM uint32_t TXIE       : 1;            /*!< [17..17] Transmit Interrupt Enable                                        */
      __IOM uint32_t OVIE       : 1;            /*!< [18..18] Overflow Interrupt Enable                                        */
            uint32_t            : 1;
      __IOM uint32_t FRREN      : 1;            /*!< [20..20] Foreign Remote Request Enable                                    */
      __IOM uint32_t RMM        : 1;            /*!< [21..21] Transmit Object Remote Monitoring                                */
      __IOM uint32_t SDT        : 1;            /*!< [22..22] Single Data Transfer                                             */
      __IOM uint32_t STT        : 1;            /*!< [23..23] Single Transmit Trial                                            */
      __IOM uint32_t DLC        : 4;            /*!< [27..24] Data Length Code                                                 */
            uint32_t            : 4;
    } bit;
  } CAN_MOFCR18;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001144) Message Object 18 FIFO/Gateway Pointer Register            */
    
    struct {
      __IOM uint32_t BOT        : 8;            /*!< [7..0] Bottom Pointer                                                     */
      __IOM uint32_t TOP        : 8;            /*!< [15..8] Top Pointer                                                       */
      __IOM uint32_t CUR        : 8;            /*!< [23..16] Current Object Pointer                                           */
      __IOM uint32_t SEL        : 8;            /*!< [31..24] Object Select Pointer                                            */
    } bit;
  } CAN_MOFGPR18;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001148) Message Object 18 Interrupt Pointer Register               */
    
    struct {
      __IOM uint32_t RXINP      : 4;            /*!< [3..0] Receive Interrupt Node Pointer                                     */
      __IOM uint32_t TXINP      : 4;            /*!< [7..4] Transmit Interrupt Node Pointer                                    */
      __IOM uint32_t MPN        : 8;            /*!< [15..8] Message Pending Number                                            */
      __IOM uint32_t CFCVAL     : 16;           /*!< [31..16] CAN Frame Counter Value                                          */
    } bit;
  } CAN_MOIPR18;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000114C) Message Object 18 Acceptance Mask Register                 */
    
    struct {
      __IOM uint32_t AM         : 29;           /*!< [28..0] Acceptance Mask for Message Identifier                            */
      __IOM uint32_t MIDE       : 1;            /*!< [29..29] Acceptance Mask Bit for Message IDE Bit                          */
            uint32_t            : 2;
    } bit;
  } CAN_MOAMR18;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001150) Message Object 18 Data Register Low                        */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_MODATAL18;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001154) Message Object 18 Data Register High                       */
    
    struct {
      __IOM uint32_t DB4        : 8;            /*!< [7..0] Data Byte 4 of Message Object n                                    */
      __IOM uint32_t DB5        : 8;            /*!< [15..8] Data Byte 5 of Message Object n                                   */
      __IOM uint32_t DB6        : 8;            /*!< [23..16] Data Byte 6 of Message Object n                                  */
      __IOM uint32_t DB7        : 8;            /*!< [31..24] Data Byte 7 of Message Object n                                  */
    } bit;
  } CAN_MODATAH18;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001158) Message Object 18 Arbitration Register                     */
    
    struct {
      __IOM uint32_t ID         : 29;           /*!< [28..0] CAN Identifier of Message Object n                                */
      __IOM uint32_t IDE        : 1;            /*!< [29..29] Identifier Extension Bit of Message Object n                     */
      __IOM uint32_t PRI        : 2;            /*!< [31..30] Priority Class                                                   */
    } bit;
  } CAN_MOAR18;
  
  union {
    union {
      __OM  uint32_t reg;                       /*!< (@ 0x0000115C) Message Object 18 Control Register                         */
      
      struct {
        __OM  uint32_t RESRXPND : 1;            /*!< [0..0] Reset Receive Pending                                              */
        __OM  uint32_t RESTXPND : 1;            /*!< [1..1] Reset Transmit Pending                                             */
        __OM  uint32_t RESRXUPD : 1;            /*!< [2..2] Reset Receive Updating                                             */
        __OM  uint32_t RESNEWDAT : 1;           /*!< [3..3] Reset New Data                                                     */
        __OM  uint32_t RESMSGLST : 1;           /*!< [4..4] Reset Message Lost                                                 */
        __OM  uint32_t RESMSGVAL : 1;           /*!< [5..5] Reset Message Valid                                                */
        __OM  uint32_t RESRTSEL : 1;            /*!< [6..6] Reset Receive/Transmit Selected                                    */
        __OM  uint32_t RESRXEN  : 1;            /*!< [7..7] Reset Receive Enable                                               */
        __OM  uint32_t RESTXRQ  : 1;            /*!< [8..8] Reset Transmit Request                                             */
        __OM  uint32_t RESTXEN0 : 1;            /*!< [9..9] Reset Transmit Enable 0                                            */
        __OM  uint32_t RESTXEN1 : 1;            /*!< [10..10] Reset Transmit Enable 1                                          */
        __OM  uint32_t RESDIR_SETDIR : 1;       /*!< [11..11] Reset Message Direction                                          */
              uint32_t          : 4;
        __OM  uint32_t SETRXPND : 1;            /*!< [16..16] Set Receive Pending                                              */
        __OM  uint32_t SETTXPND : 1;            /*!< [17..17] Set Transmit Pending                                             */
        __OM  uint32_t SETRXUPD : 1;            /*!< [18..18] Set Receive Updating                                             */
        __OM  uint32_t SETNEWDAT : 1;           /*!< [19..19] Set New Data                                                     */
        __OM  uint32_t SETMSGLST : 1;           /*!< [20..20] Set Message Lost                                                 */
        __OM  uint32_t SETMSGVAL : 1;           /*!< [21..21] Set Message Valid                                                */
        __OM  uint32_t SETRTSEL : 1;            /*!< [22..22] Set Receive/Transmit Selected                                    */
        __OM  uint32_t SETRXEN  : 1;            /*!< [23..23] Set Receive Enable                                               */
        __OM  uint32_t SETTXRQ  : 1;            /*!< [24..24] Set Transmit Request                                             */
        __OM  uint32_t SETTXEN0 : 1;            /*!< [25..25] Set Transmit Enable 0                                            */
        __OM  uint32_t SETTXEN1 : 1;            /*!< [26..26] Set Transmit Enable 1                                            */
        __OM  uint32_t SETDIR   : 1;            /*!< [27..27] Set Message Direction                                            */
              uint32_t          : 4;
      } bit;
    } CAN_MOCTR18;
    
    union {
      __IM  uint32_t reg;                       /*!< (@ 0x0000115C) Message Object 18 Status Register                          */
      
      struct {
        __IM  uint32_t RXPND    : 1;            /*!< [0..0] Receive Pending                                                    */
        __IM  uint32_t TXPND    : 1;            /*!< [1..1] Transmit Pending                                                   */
        __IM  uint32_t RXUPD    : 1;            /*!< [2..2] Receive Updating                                                   */
        __IM  uint32_t NEWDAT   : 1;            /*!< [3..3] New Data                                                           */
        __IM  uint32_t MSGLST   : 1;            /*!< [4..4] Message Lost                                                       */
        __IM  uint32_t MSGVAL   : 1;            /*!< [5..5] Message Valid                                                      */
        __IM  uint32_t RTSEL    : 1;            /*!< [6..6] Receive/Transmit Selected                                          */
        __IM  uint32_t RXEN     : 1;            /*!< [7..7] Receive Enable                                                     */
        __IM  uint32_t TXRQ     : 1;            /*!< [8..8] Transmit Request                                                   */
        __IM  uint32_t TXEN0    : 1;            /*!< [9..9] Transmit Enable 0                                                  */
        __IM  uint32_t TXEN1    : 1;            /*!< [10..10] Transmit Enable 1                                                */
        __IM  uint32_t DIR      : 1;            /*!< [11..11] Message Direction                                                */
        __IM  uint32_t LIST     : 4;            /*!< [15..12] List Allocation                                                  */
        __IM  uint32_t PPREV    : 8;            /*!< [23..16] Pointer to Previous Message Object                               */
        __IM  uint32_t PNEXT    : 8;            /*!< [31..24] Pointer to Next Message Object                                   */
      } bit;
    } CAN_MOSTAT18;
  } OBJ18;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001160) Message Object 19 Function Control Register                */
    
    struct {
      __IOM uint32_t MMC        : 4;            /*!< [3..0] Message Mode Control                                               */
            uint32_t            : 1;
      __IOM uint32_t BRS        : 1;            /*!< [5..5] Bit Rate Switch                                                    */
      __IOM uint32_t FDF        : 1;            /*!< [6..6] CAN FD Frame Format                                                */
            uint32_t            : 1;
      __IOM uint32_t GDFS       : 1;            /*!< [8..8] Gateway Data Frame Send                                            */
      __IOM uint32_t IDC        : 1;            /*!< [9..9] Identifier Copy                                                    */
      __IOM uint32_t DLCC       : 1;            /*!< [10..10] Data Length Code Copy                                            */
      __IOM uint32_t DATC       : 1;            /*!< [11..11] Data Copy                                                        */
            uint32_t            : 4;
      __IOM uint32_t RXIE       : 1;            /*!< [16..16] Receive Interrupt Enable                                         */
      __IOM uint32_t TXIE       : 1;            /*!< [17..17] Transmit Interrupt Enable                                        */
      __IOM uint32_t OVIE       : 1;            /*!< [18..18] Overflow Interrupt Enable                                        */
            uint32_t            : 1;
      __IOM uint32_t FRREN      : 1;            /*!< [20..20] Foreign Remote Request Enable                                    */
      __IOM uint32_t RMM        : 1;            /*!< [21..21] Transmit Object Remote Monitoring                                */
      __IOM uint32_t SDT        : 1;            /*!< [22..22] Single Data Transfer                                             */
      __IOM uint32_t STT        : 1;            /*!< [23..23] Single Transmit Trial                                            */
      __IOM uint32_t DLC        : 4;            /*!< [27..24] Data Length Code                                                 */
            uint32_t            : 4;
    } bit;
  } CAN_MOFCR19;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001164) Message Object 19 FIFO/Gateway Pointer Register            */
    
    struct {
      __IOM uint32_t BOT        : 8;            /*!< [7..0] Bottom Pointer                                                     */
      __IOM uint32_t TOP        : 8;            /*!< [15..8] Top Pointer                                                       */
      __IOM uint32_t CUR        : 8;            /*!< [23..16] Current Object Pointer                                           */
      __IOM uint32_t SEL        : 8;            /*!< [31..24] Object Select Pointer                                            */
    } bit;
  } CAN_MOFGPR19;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001168) Message Object 19 Interrupt Pointer Register               */
    
    struct {
      __IOM uint32_t RXINP      : 4;            /*!< [3..0] Receive Interrupt Node Pointer                                     */
      __IOM uint32_t TXINP      : 4;            /*!< [7..4] Transmit Interrupt Node Pointer                                    */
      __IOM uint32_t MPN        : 8;            /*!< [15..8] Message Pending Number                                            */
      __IOM uint32_t CFCVAL     : 16;           /*!< [31..16] CAN Frame Counter Value                                          */
    } bit;
  } CAN_MOIPR19;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000116C) Message Object 19 Acceptance Mask Register                 */
    
    struct {
      __IOM uint32_t AM         : 29;           /*!< [28..0] Acceptance Mask for Message Identifier                            */
      __IOM uint32_t MIDE       : 1;            /*!< [29..29] Acceptance Mask Bit for Message IDE Bit                          */
            uint32_t            : 2;
    } bit;
  } CAN_MOAMR19;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001170) Message Object 19 Data Register Low                        */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_MODATAL19;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001174) Message Object 19 Data Register High                       */
    
    struct {
      __IOM uint32_t DB4        : 8;            /*!< [7..0] Data Byte 4 of Message Object n                                    */
      __IOM uint32_t DB5        : 8;            /*!< [15..8] Data Byte 5 of Message Object n                                   */
      __IOM uint32_t DB6        : 8;            /*!< [23..16] Data Byte 6 of Message Object n                                  */
      __IOM uint32_t DB7        : 8;            /*!< [31..24] Data Byte 7 of Message Object n                                  */
    } bit;
  } CAN_MODATAH19;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001178) Message Object 19 Arbitration Register                     */
    
    struct {
      __IOM uint32_t ID         : 29;           /*!< [28..0] CAN Identifier of Message Object n                                */
      __IOM uint32_t IDE        : 1;            /*!< [29..29] Identifier Extension Bit of Message Object n                     */
      __IOM uint32_t PRI        : 2;            /*!< [31..30] Priority Class                                                   */
    } bit;
  } CAN_MOAR19;
  
  union {
    union {
      __OM  uint32_t reg;                       /*!< (@ 0x0000117C) Message Object 19 Control Register                         */
      
      struct {
        __OM  uint32_t RESRXPND : 1;            /*!< [0..0] Reset Receive Pending                                              */
        __OM  uint32_t RESTXPND : 1;            /*!< [1..1] Reset Transmit Pending                                             */
        __OM  uint32_t RESRXUPD : 1;            /*!< [2..2] Reset Receive Updating                                             */
        __OM  uint32_t RESNEWDAT : 1;           /*!< [3..3] Reset New Data                                                     */
        __OM  uint32_t RESMSGLST : 1;           /*!< [4..4] Reset Message Lost                                                 */
        __OM  uint32_t RESMSGVAL : 1;           /*!< [5..5] Reset Message Valid                                                */
        __OM  uint32_t RESRTSEL : 1;            /*!< [6..6] Reset Receive/Transmit Selected                                    */
        __OM  uint32_t RESRXEN  : 1;            /*!< [7..7] Reset Receive Enable                                               */
        __OM  uint32_t RESTXRQ  : 1;            /*!< [8..8] Reset Transmit Request                                             */
        __OM  uint32_t RESTXEN0 : 1;            /*!< [9..9] Reset Transmit Enable 0                                            */
        __OM  uint32_t RESTXEN1 : 1;            /*!< [10..10] Reset Transmit Enable 1                                          */
        __OM  uint32_t RESDIR_SETDIR : 1;       /*!< [11..11] Reset Message Direction                                          */
              uint32_t          : 4;
        __OM  uint32_t SETRXPND : 1;            /*!< [16..16] Set Receive Pending                                              */
        __OM  uint32_t SETTXPND : 1;            /*!< [17..17] Set Transmit Pending                                             */
        __OM  uint32_t SETRXUPD : 1;            /*!< [18..18] Set Receive Updating                                             */
        __OM  uint32_t SETNEWDAT : 1;           /*!< [19..19] Set New Data                                                     */
        __OM  uint32_t SETMSGLST : 1;           /*!< [20..20] Set Message Lost                                                 */
        __OM  uint32_t SETMSGVAL : 1;           /*!< [21..21] Set Message Valid                                                */
        __OM  uint32_t SETRTSEL : 1;            /*!< [22..22] Set Receive/Transmit Selected                                    */
        __OM  uint32_t SETRXEN  : 1;            /*!< [23..23] Set Receive Enable                                               */
        __OM  uint32_t SETTXRQ  : 1;            /*!< [24..24] Set Transmit Request                                             */
        __OM  uint32_t SETTXEN0 : 1;            /*!< [25..25] Set Transmit Enable 0                                            */
        __OM  uint32_t SETTXEN1 : 1;            /*!< [26..26] Set Transmit Enable 1                                            */
        __OM  uint32_t SETDIR   : 1;            /*!< [27..27] Set Message Direction                                            */
              uint32_t          : 4;
      } bit;
    } CAN_MOCTR19;
    
    union {
      __IM  uint32_t reg;                       /*!< (@ 0x0000117C) Message Object 19 Status Register                          */
      
      struct {
        __IM  uint32_t RXPND    : 1;            /*!< [0..0] Receive Pending                                                    */
        __IM  uint32_t TXPND    : 1;            /*!< [1..1] Transmit Pending                                                   */
        __IM  uint32_t RXUPD    : 1;            /*!< [2..2] Receive Updating                                                   */
        __IM  uint32_t NEWDAT   : 1;            /*!< [3..3] New Data                                                           */
        __IM  uint32_t MSGLST   : 1;            /*!< [4..4] Message Lost                                                       */
        __IM  uint32_t MSGVAL   : 1;            /*!< [5..5] Message Valid                                                      */
        __IM  uint32_t RTSEL    : 1;            /*!< [6..6] Receive/Transmit Selected                                          */
        __IM  uint32_t RXEN     : 1;            /*!< [7..7] Receive Enable                                                     */
        __IM  uint32_t TXRQ     : 1;            /*!< [8..8] Transmit Request                                                   */
        __IM  uint32_t TXEN0    : 1;            /*!< [9..9] Transmit Enable 0                                                  */
        __IM  uint32_t TXEN1    : 1;            /*!< [10..10] Transmit Enable 1                                                */
        __IM  uint32_t DIR      : 1;            /*!< [11..11] Message Direction                                                */
        __IM  uint32_t LIST     : 4;            /*!< [15..12] List Allocation                                                  */
        __IM  uint32_t PPREV    : 8;            /*!< [23..16] Pointer to Previous Message Object                               */
        __IM  uint32_t PNEXT    : 8;            /*!< [31..24] Pointer to Next Message Object                                   */
      } bit;
    } CAN_MOSTAT19;
  } OBJ19;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001180) Message Object 20 Function Control Register                */
    
    struct {
      __IOM uint32_t MMC        : 4;            /*!< [3..0] Message Mode Control                                               */
            uint32_t            : 1;
      __IOM uint32_t BRS        : 1;            /*!< [5..5] Bit Rate Switch                                                    */
      __IOM uint32_t FDF        : 1;            /*!< [6..6] CAN FD Frame Format                                                */
            uint32_t            : 1;
      __IOM uint32_t GDFS       : 1;            /*!< [8..8] Gateway Data Frame Send                                            */
      __IOM uint32_t IDC        : 1;            /*!< [9..9] Identifier Copy                                                    */
      __IOM uint32_t DLCC       : 1;            /*!< [10..10] Data Length Code Copy                                            */
      __IOM uint32_t DATC       : 1;            /*!< [11..11] Data Copy                                                        */
            uint32_t            : 4;
      __IOM uint32_t RXIE       : 1;            /*!< [16..16] Receive Interrupt Enable                                         */
      __IOM uint32_t TXIE       : 1;            /*!< [17..17] Transmit Interrupt Enable                                        */
      __IOM uint32_t OVIE       : 1;            /*!< [18..18] Overflow Interrupt Enable                                        */
            uint32_t            : 1;
      __IOM uint32_t FRREN      : 1;            /*!< [20..20] Foreign Remote Request Enable                                    */
      __IOM uint32_t RMM        : 1;            /*!< [21..21] Transmit Object Remote Monitoring                                */
      __IOM uint32_t SDT        : 1;            /*!< [22..22] Single Data Transfer                                             */
      __IOM uint32_t STT        : 1;            /*!< [23..23] Single Transmit Trial                                            */
      __IOM uint32_t DLC        : 4;            /*!< [27..24] Data Length Code                                                 */
            uint32_t            : 4;
    } bit;
  } CAN_MOFCR20;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001184) Message Object 20 FIFO/Gateway Pointer Register            */
    
    struct {
      __IOM uint32_t BOT        : 8;            /*!< [7..0] Bottom Pointer                                                     */
      __IOM uint32_t TOP        : 8;            /*!< [15..8] Top Pointer                                                       */
      __IOM uint32_t CUR        : 8;            /*!< [23..16] Current Object Pointer                                           */
      __IOM uint32_t SEL        : 8;            /*!< [31..24] Object Select Pointer                                            */
    } bit;
  } CAN_MOFGPR20;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001188) Message Object 20 Interrupt Pointer Register               */
    
    struct {
      __IOM uint32_t RXINP      : 4;            /*!< [3..0] Receive Interrupt Node Pointer                                     */
      __IOM uint32_t TXINP      : 4;            /*!< [7..4] Transmit Interrupt Node Pointer                                    */
      __IOM uint32_t MPN        : 8;            /*!< [15..8] Message Pending Number                                            */
      __IOM uint32_t CFCVAL     : 16;           /*!< [31..16] CAN Frame Counter Value                                          */
    } bit;
  } CAN_MOIPR20;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000118C) Message Object 20 Acceptance Mask Register                 */
    
    struct {
      __IOM uint32_t AM         : 29;           /*!< [28..0] Acceptance Mask for Message Identifier                            */
      __IOM uint32_t MIDE       : 1;            /*!< [29..29] Acceptance Mask Bit for Message IDE Bit                          */
            uint32_t            : 2;
    } bit;
  } CAN_MOAMR20;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001190) Message Object 20 Data Register Low                        */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_MODATAL20;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001194) Message Object 20 Data Register High                       */
    
    struct {
      __IOM uint32_t DB4        : 8;            /*!< [7..0] Data Byte 4 of Message Object n                                    */
      __IOM uint32_t DB5        : 8;            /*!< [15..8] Data Byte 5 of Message Object n                                   */
      __IOM uint32_t DB6        : 8;            /*!< [23..16] Data Byte 6 of Message Object n                                  */
      __IOM uint32_t DB7        : 8;            /*!< [31..24] Data Byte 7 of Message Object n                                  */
    } bit;
  } CAN_MODATAH20;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001198) Message Object 20 Arbitration Register                     */
    
    struct {
      __IOM uint32_t ID         : 29;           /*!< [28..0] CAN Identifier of Message Object n                                */
      __IOM uint32_t IDE        : 1;            /*!< [29..29] Identifier Extension Bit of Message Object n                     */
      __IOM uint32_t PRI        : 2;            /*!< [31..30] Priority Class                                                   */
    } bit;
  } CAN_MOAR20;
  
  union {
    union {
      __OM  uint32_t reg;                       /*!< (@ 0x0000119C) Message Object 20 Control Register                         */
      
      struct {
        __OM  uint32_t RESRXPND : 1;            /*!< [0..0] Reset Receive Pending                                              */
        __OM  uint32_t RESTXPND : 1;            /*!< [1..1] Reset Transmit Pending                                             */
        __OM  uint32_t RESRXUPD : 1;            /*!< [2..2] Reset Receive Updating                                             */
        __OM  uint32_t RESNEWDAT : 1;           /*!< [3..3] Reset New Data                                                     */
        __OM  uint32_t RESMSGLST : 1;           /*!< [4..4] Reset Message Lost                                                 */
        __OM  uint32_t RESMSGVAL : 1;           /*!< [5..5] Reset Message Valid                                                */
        __OM  uint32_t RESRTSEL : 1;            /*!< [6..6] Reset Receive/Transmit Selected                                    */
        __OM  uint32_t RESRXEN  : 1;            /*!< [7..7] Reset Receive Enable                                               */
        __OM  uint32_t RESTXRQ  : 1;            /*!< [8..8] Reset Transmit Request                                             */
        __OM  uint32_t RESTXEN0 : 1;            /*!< [9..9] Reset Transmit Enable 0                                            */
        __OM  uint32_t RESTXEN1 : 1;            /*!< [10..10] Reset Transmit Enable 1                                          */
        __OM  uint32_t RESDIR_SETDIR : 1;       /*!< [11..11] Reset Message Direction                                          */
              uint32_t          : 4;
        __OM  uint32_t SETRXPND : 1;            /*!< [16..16] Set Receive Pending                                              */
        __OM  uint32_t SETTXPND : 1;            /*!< [17..17] Set Transmit Pending                                             */
        __OM  uint32_t SETRXUPD : 1;            /*!< [18..18] Set Receive Updating                                             */
        __OM  uint32_t SETNEWDAT : 1;           /*!< [19..19] Set New Data                                                     */
        __OM  uint32_t SETMSGLST : 1;           /*!< [20..20] Set Message Lost                                                 */
        __OM  uint32_t SETMSGVAL : 1;           /*!< [21..21] Set Message Valid                                                */
        __OM  uint32_t SETRTSEL : 1;            /*!< [22..22] Set Receive/Transmit Selected                                    */
        __OM  uint32_t SETRXEN  : 1;            /*!< [23..23] Set Receive Enable                                               */
        __OM  uint32_t SETTXRQ  : 1;            /*!< [24..24] Set Transmit Request                                             */
        __OM  uint32_t SETTXEN0 : 1;            /*!< [25..25] Set Transmit Enable 0                                            */
        __OM  uint32_t SETTXEN1 : 1;            /*!< [26..26] Set Transmit Enable 1                                            */
        __OM  uint32_t SETDIR   : 1;            /*!< [27..27] Set Message Direction                                            */
              uint32_t          : 4;
      } bit;
    } CAN_MOCTR20;
    
    union {
      __IM  uint32_t reg;                       /*!< (@ 0x0000119C) Message Object 20 Status Register                          */
      
      struct {
        __IM  uint32_t RXPND    : 1;            /*!< [0..0] Receive Pending                                                    */
        __IM  uint32_t TXPND    : 1;            /*!< [1..1] Transmit Pending                                                   */
        __IM  uint32_t RXUPD    : 1;            /*!< [2..2] Receive Updating                                                   */
        __IM  uint32_t NEWDAT   : 1;            /*!< [3..3] New Data                                                           */
        __IM  uint32_t MSGLST   : 1;            /*!< [4..4] Message Lost                                                       */
        __IM  uint32_t MSGVAL   : 1;            /*!< [5..5] Message Valid                                                      */
        __IM  uint32_t RTSEL    : 1;            /*!< [6..6] Receive/Transmit Selected                                          */
        __IM  uint32_t RXEN     : 1;            /*!< [7..7] Receive Enable                                                     */
        __IM  uint32_t TXRQ     : 1;            /*!< [8..8] Transmit Request                                                   */
        __IM  uint32_t TXEN0    : 1;            /*!< [9..9] Transmit Enable 0                                                  */
        __IM  uint32_t TXEN1    : 1;            /*!< [10..10] Transmit Enable 1                                                */
        __IM  uint32_t DIR      : 1;            /*!< [11..11] Message Direction                                                */
        __IM  uint32_t LIST     : 4;            /*!< [15..12] List Allocation                                                  */
        __IM  uint32_t PPREV    : 8;            /*!< [23..16] Pointer to Previous Message Object                               */
        __IM  uint32_t PNEXT    : 8;            /*!< [31..24] Pointer to Next Message Object                                   */
      } bit;
    } CAN_MOSTAT20;
  } OBJ20;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000011A0) Message Object 21 Function Control Register                */
    
    struct {
      __IOM uint32_t MMC        : 4;            /*!< [3..0] Message Mode Control                                               */
            uint32_t            : 1;
      __IOM uint32_t BRS        : 1;            /*!< [5..5] Bit Rate Switch                                                    */
      __IOM uint32_t FDF        : 1;            /*!< [6..6] CAN FD Frame Format                                                */
            uint32_t            : 1;
      __IOM uint32_t GDFS       : 1;            /*!< [8..8] Gateway Data Frame Send                                            */
      __IOM uint32_t IDC        : 1;            /*!< [9..9] Identifier Copy                                                    */
      __IOM uint32_t DLCC       : 1;            /*!< [10..10] Data Length Code Copy                                            */
      __IOM uint32_t DATC       : 1;            /*!< [11..11] Data Copy                                                        */
            uint32_t            : 4;
      __IOM uint32_t RXIE       : 1;            /*!< [16..16] Receive Interrupt Enable                                         */
      __IOM uint32_t TXIE       : 1;            /*!< [17..17] Transmit Interrupt Enable                                        */
      __IOM uint32_t OVIE       : 1;            /*!< [18..18] Overflow Interrupt Enable                                        */
            uint32_t            : 1;
      __IOM uint32_t FRREN      : 1;            /*!< [20..20] Foreign Remote Request Enable                                    */
      __IOM uint32_t RMM        : 1;            /*!< [21..21] Transmit Object Remote Monitoring                                */
      __IOM uint32_t SDT        : 1;            /*!< [22..22] Single Data Transfer                                             */
      __IOM uint32_t STT        : 1;            /*!< [23..23] Single Transmit Trial                                            */
      __IOM uint32_t DLC        : 4;            /*!< [27..24] Data Length Code                                                 */
            uint32_t            : 4;
    } bit;
  } CAN_MOFCR21;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000011A4) Message Object 21 FIFO/Gateway Pointer Register            */
    
    struct {
      __IOM uint32_t BOT        : 8;            /*!< [7..0] Bottom Pointer                                                     */
      __IOM uint32_t TOP        : 8;            /*!< [15..8] Top Pointer                                                       */
      __IOM uint32_t CUR        : 8;            /*!< [23..16] Current Object Pointer                                           */
      __IOM uint32_t SEL        : 8;            /*!< [31..24] Object Select Pointer                                            */
    } bit;
  } CAN_MOFGPR21;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000011A8) Message Object 21 Interrupt Pointer Register               */
    
    struct {
      __IOM uint32_t RXINP      : 4;            /*!< [3..0] Receive Interrupt Node Pointer                                     */
      __IOM uint32_t TXINP      : 4;            /*!< [7..4] Transmit Interrupt Node Pointer                                    */
      __IOM uint32_t MPN        : 8;            /*!< [15..8] Message Pending Number                                            */
      __IOM uint32_t CFCVAL     : 16;           /*!< [31..16] CAN Frame Counter Value                                          */
    } bit;
  } CAN_MOIPR21;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000011AC) Message Object 21 Acceptance Mask Register                 */
    
    struct {
      __IOM uint32_t AM         : 29;           /*!< [28..0] Acceptance Mask for Message Identifier                            */
      __IOM uint32_t MIDE       : 1;            /*!< [29..29] Acceptance Mask Bit for Message IDE Bit                          */
            uint32_t            : 2;
    } bit;
  } CAN_MOAMR21;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000011B0) Message Object 21 Data Register Low                        */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_MODATAL21;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000011B4) Message Object 21 Data Register High                       */
    
    struct {
      __IOM uint32_t DB4        : 8;            /*!< [7..0] Data Byte 4 of Message Object n                                    */
      __IOM uint32_t DB5        : 8;            /*!< [15..8] Data Byte 5 of Message Object n                                   */
      __IOM uint32_t DB6        : 8;            /*!< [23..16] Data Byte 6 of Message Object n                                  */
      __IOM uint32_t DB7        : 8;            /*!< [31..24] Data Byte 7 of Message Object n                                  */
    } bit;
  } CAN_MODATAH21;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000011B8) Message Object 21 Arbitration Register                     */
    
    struct {
      __IOM uint32_t ID         : 29;           /*!< [28..0] CAN Identifier of Message Object n                                */
      __IOM uint32_t IDE        : 1;            /*!< [29..29] Identifier Extension Bit of Message Object n                     */
      __IOM uint32_t PRI        : 2;            /*!< [31..30] Priority Class                                                   */
    } bit;
  } CAN_MOAR21;
  
  union {
    union {
      __OM  uint32_t reg;                       /*!< (@ 0x000011BC) Message Object 21 Control Register                         */
      
      struct {
        __OM  uint32_t RESRXPND : 1;            /*!< [0..0] Reset Receive Pending                                              */
        __OM  uint32_t RESTXPND : 1;            /*!< [1..1] Reset Transmit Pending                                             */
        __OM  uint32_t RESRXUPD : 1;            /*!< [2..2] Reset Receive Updating                                             */
        __OM  uint32_t RESNEWDAT : 1;           /*!< [3..3] Reset New Data                                                     */
        __OM  uint32_t RESMSGLST : 1;           /*!< [4..4] Reset Message Lost                                                 */
        __OM  uint32_t RESMSGVAL : 1;           /*!< [5..5] Reset Message Valid                                                */
        __OM  uint32_t RESRTSEL : 1;            /*!< [6..6] Reset Receive/Transmit Selected                                    */
        __OM  uint32_t RESRXEN  : 1;            /*!< [7..7] Reset Receive Enable                                               */
        __OM  uint32_t RESTXRQ  : 1;            /*!< [8..8] Reset Transmit Request                                             */
        __OM  uint32_t RESTXEN0 : 1;            /*!< [9..9] Reset Transmit Enable 0                                            */
        __OM  uint32_t RESTXEN1 : 1;            /*!< [10..10] Reset Transmit Enable 1                                          */
        __OM  uint32_t RESDIR_SETDIR : 1;       /*!< [11..11] Reset Message Direction                                          */
              uint32_t          : 4;
        __OM  uint32_t SETRXPND : 1;            /*!< [16..16] Set Receive Pending                                              */
        __OM  uint32_t SETTXPND : 1;            /*!< [17..17] Set Transmit Pending                                             */
        __OM  uint32_t SETRXUPD : 1;            /*!< [18..18] Set Receive Updating                                             */
        __OM  uint32_t SETNEWDAT : 1;           /*!< [19..19] Set New Data                                                     */
        __OM  uint32_t SETMSGLST : 1;           /*!< [20..20] Set Message Lost                                                 */
        __OM  uint32_t SETMSGVAL : 1;           /*!< [21..21] Set Message Valid                                                */
        __OM  uint32_t SETRTSEL : 1;            /*!< [22..22] Set Receive/Transmit Selected                                    */
        __OM  uint32_t SETRXEN  : 1;            /*!< [23..23] Set Receive Enable                                               */
        __OM  uint32_t SETTXRQ  : 1;            /*!< [24..24] Set Transmit Request                                             */
        __OM  uint32_t SETTXEN0 : 1;            /*!< [25..25] Set Transmit Enable 0                                            */
        __OM  uint32_t SETTXEN1 : 1;            /*!< [26..26] Set Transmit Enable 1                                            */
        __OM  uint32_t SETDIR   : 1;            /*!< [27..27] Set Message Direction                                            */
              uint32_t          : 4;
      } bit;
    } CAN_MOCTR21;
    
    union {
      __IM  uint32_t reg;                       /*!< (@ 0x000011BC) Message Object 21 Status Register                          */
      
      struct {
        __IM  uint32_t RXPND    : 1;            /*!< [0..0] Receive Pending                                                    */
        __IM  uint32_t TXPND    : 1;            /*!< [1..1] Transmit Pending                                                   */
        __IM  uint32_t RXUPD    : 1;            /*!< [2..2] Receive Updating                                                   */
        __IM  uint32_t NEWDAT   : 1;            /*!< [3..3] New Data                                                           */
        __IM  uint32_t MSGLST   : 1;            /*!< [4..4] Message Lost                                                       */
        __IM  uint32_t MSGVAL   : 1;            /*!< [5..5] Message Valid                                                      */
        __IM  uint32_t RTSEL    : 1;            /*!< [6..6] Receive/Transmit Selected                                          */
        __IM  uint32_t RXEN     : 1;            /*!< [7..7] Receive Enable                                                     */
        __IM  uint32_t TXRQ     : 1;            /*!< [8..8] Transmit Request                                                   */
        __IM  uint32_t TXEN0    : 1;            /*!< [9..9] Transmit Enable 0                                                  */
        __IM  uint32_t TXEN1    : 1;            /*!< [10..10] Transmit Enable 1                                                */
        __IM  uint32_t DIR      : 1;            /*!< [11..11] Message Direction                                                */
        __IM  uint32_t LIST     : 4;            /*!< [15..12] List Allocation                                                  */
        __IM  uint32_t PPREV    : 8;            /*!< [23..16] Pointer to Previous Message Object                               */
        __IM  uint32_t PNEXT    : 8;            /*!< [31..24] Pointer to Next Message Object                                   */
      } bit;
    } CAN_MOSTAT21;
  } OBJ21;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000011C0) Message Object 22 Function Control Register                */
    
    struct {
      __IOM uint32_t MMC        : 4;            /*!< [3..0] Message Mode Control                                               */
            uint32_t            : 1;
      __IOM uint32_t BRS        : 1;            /*!< [5..5] Bit Rate Switch                                                    */
      __IOM uint32_t FDF        : 1;            /*!< [6..6] CAN FD Frame Format                                                */
            uint32_t            : 1;
      __IOM uint32_t GDFS       : 1;            /*!< [8..8] Gateway Data Frame Send                                            */
      __IOM uint32_t IDC        : 1;            /*!< [9..9] Identifier Copy                                                    */
      __IOM uint32_t DLCC       : 1;            /*!< [10..10] Data Length Code Copy                                            */
      __IOM uint32_t DATC       : 1;            /*!< [11..11] Data Copy                                                        */
            uint32_t            : 4;
      __IOM uint32_t RXIE       : 1;            /*!< [16..16] Receive Interrupt Enable                                         */
      __IOM uint32_t TXIE       : 1;            /*!< [17..17] Transmit Interrupt Enable                                        */
      __IOM uint32_t OVIE       : 1;            /*!< [18..18] Overflow Interrupt Enable                                        */
            uint32_t            : 1;
      __IOM uint32_t FRREN      : 1;            /*!< [20..20] Foreign Remote Request Enable                                    */
      __IOM uint32_t RMM        : 1;            /*!< [21..21] Transmit Object Remote Monitoring                                */
      __IOM uint32_t SDT        : 1;            /*!< [22..22] Single Data Transfer                                             */
      __IOM uint32_t STT        : 1;            /*!< [23..23] Single Transmit Trial                                            */
      __IOM uint32_t DLC        : 4;            /*!< [27..24] Data Length Code                                                 */
            uint32_t            : 4;
    } bit;
  } CAN_MOFCR22;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000011C4) Message Object 22 FIFO/Gateway Pointer Register            */
    
    struct {
      __IOM uint32_t BOT        : 8;            /*!< [7..0] Bottom Pointer                                                     */
      __IOM uint32_t TOP        : 8;            /*!< [15..8] Top Pointer                                                       */
      __IOM uint32_t CUR        : 8;            /*!< [23..16] Current Object Pointer                                           */
      __IOM uint32_t SEL        : 8;            /*!< [31..24] Object Select Pointer                                            */
    } bit;
  } CAN_MOFGPR22;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000011C8) Message Object 22 Interrupt Pointer Register               */
    
    struct {
      __IOM uint32_t RXINP      : 4;            /*!< [3..0] Receive Interrupt Node Pointer                                     */
      __IOM uint32_t TXINP      : 4;            /*!< [7..4] Transmit Interrupt Node Pointer                                    */
      __IOM uint32_t MPN        : 8;            /*!< [15..8] Message Pending Number                                            */
      __IOM uint32_t CFCVAL     : 16;           /*!< [31..16] CAN Frame Counter Value                                          */
    } bit;
  } CAN_MOIPR22;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000011CC) Message Object 22 Acceptance Mask Register                 */
    
    struct {
      __IOM uint32_t AM         : 29;           /*!< [28..0] Acceptance Mask for Message Identifier                            */
      __IOM uint32_t MIDE       : 1;            /*!< [29..29] Acceptance Mask Bit for Message IDE Bit                          */
            uint32_t            : 2;
    } bit;
  } CAN_MOAMR22;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000011D0) Message Object 22 Data Register Low                        */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_MODATAL22;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000011D4) Message Object 22 Data Register High                       */
    
    struct {
      __IOM uint32_t DB4        : 8;            /*!< [7..0] Data Byte 4 of Message Object n                                    */
      __IOM uint32_t DB5        : 8;            /*!< [15..8] Data Byte 5 of Message Object n                                   */
      __IOM uint32_t DB6        : 8;            /*!< [23..16] Data Byte 6 of Message Object n                                  */
      __IOM uint32_t DB7        : 8;            /*!< [31..24] Data Byte 7 of Message Object n                                  */
    } bit;
  } CAN_MODATAH22;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000011D8) Message Object 22 Arbitration Register                     */
    
    struct {
      __IOM uint32_t ID         : 29;           /*!< [28..0] CAN Identifier of Message Object n                                */
      __IOM uint32_t IDE        : 1;            /*!< [29..29] Identifier Extension Bit of Message Object n                     */
      __IOM uint32_t PRI        : 2;            /*!< [31..30] Priority Class                                                   */
    } bit;
  } CAN_MOAR22;
  
  union {
    union {
      __OM  uint32_t reg;                       /*!< (@ 0x000011DC) Message Object 22 Control Register                         */
      
      struct {
        __OM  uint32_t RESRXPND : 1;            /*!< [0..0] Reset Receive Pending                                              */
        __OM  uint32_t RESTXPND : 1;            /*!< [1..1] Reset Transmit Pending                                             */
        __OM  uint32_t RESRXUPD : 1;            /*!< [2..2] Reset Receive Updating                                             */
        __OM  uint32_t RESNEWDAT : 1;           /*!< [3..3] Reset New Data                                                     */
        __OM  uint32_t RESMSGLST : 1;           /*!< [4..4] Reset Message Lost                                                 */
        __OM  uint32_t RESMSGVAL : 1;           /*!< [5..5] Reset Message Valid                                                */
        __OM  uint32_t RESRTSEL : 1;            /*!< [6..6] Reset Receive/Transmit Selected                                    */
        __OM  uint32_t RESRXEN  : 1;            /*!< [7..7] Reset Receive Enable                                               */
        __OM  uint32_t RESTXRQ  : 1;            /*!< [8..8] Reset Transmit Request                                             */
        __OM  uint32_t RESTXEN0 : 1;            /*!< [9..9] Reset Transmit Enable 0                                            */
        __OM  uint32_t RESTXEN1 : 1;            /*!< [10..10] Reset Transmit Enable 1                                          */
        __OM  uint32_t RESDIR_SETDIR : 1;       /*!< [11..11] Reset Message Direction                                          */
              uint32_t          : 4;
        __OM  uint32_t SETRXPND : 1;            /*!< [16..16] Set Receive Pending                                              */
        __OM  uint32_t SETTXPND : 1;            /*!< [17..17] Set Transmit Pending                                             */
        __OM  uint32_t SETRXUPD : 1;            /*!< [18..18] Set Receive Updating                                             */
        __OM  uint32_t SETNEWDAT : 1;           /*!< [19..19] Set New Data                                                     */
        __OM  uint32_t SETMSGLST : 1;           /*!< [20..20] Set Message Lost                                                 */
        __OM  uint32_t SETMSGVAL : 1;           /*!< [21..21] Set Message Valid                                                */
        __OM  uint32_t SETRTSEL : 1;            /*!< [22..22] Set Receive/Transmit Selected                                    */
        __OM  uint32_t SETRXEN  : 1;            /*!< [23..23] Set Receive Enable                                               */
        __OM  uint32_t SETTXRQ  : 1;            /*!< [24..24] Set Transmit Request                                             */
        __OM  uint32_t SETTXEN0 : 1;            /*!< [25..25] Set Transmit Enable 0                                            */
        __OM  uint32_t SETTXEN1 : 1;            /*!< [26..26] Set Transmit Enable 1                                            */
        __OM  uint32_t SETDIR   : 1;            /*!< [27..27] Set Message Direction                                            */
              uint32_t          : 4;
      } bit;
    } CAN_MOCTR22;
    
    union {
      __IM  uint32_t reg;                       /*!< (@ 0x000011DC) Message Object 22 Status Register                          */
      
      struct {
        __IM  uint32_t RXPND    : 1;            /*!< [0..0] Receive Pending                                                    */
        __IM  uint32_t TXPND    : 1;            /*!< [1..1] Transmit Pending                                                   */
        __IM  uint32_t RXUPD    : 1;            /*!< [2..2] Receive Updating                                                   */
        __IM  uint32_t NEWDAT   : 1;            /*!< [3..3] New Data                                                           */
        __IM  uint32_t MSGLST   : 1;            /*!< [4..4] Message Lost                                                       */
        __IM  uint32_t MSGVAL   : 1;            /*!< [5..5] Message Valid                                                      */
        __IM  uint32_t RTSEL    : 1;            /*!< [6..6] Receive/Transmit Selected                                          */
        __IM  uint32_t RXEN     : 1;            /*!< [7..7] Receive Enable                                                     */
        __IM  uint32_t TXRQ     : 1;            /*!< [8..8] Transmit Request                                                   */
        __IM  uint32_t TXEN0    : 1;            /*!< [9..9] Transmit Enable 0                                                  */
        __IM  uint32_t TXEN1    : 1;            /*!< [10..10] Transmit Enable 1                                                */
        __IM  uint32_t DIR      : 1;            /*!< [11..11] Message Direction                                                */
        __IM  uint32_t LIST     : 4;            /*!< [15..12] List Allocation                                                  */
        __IM  uint32_t PPREV    : 8;            /*!< [23..16] Pointer to Previous Message Object                               */
        __IM  uint32_t PNEXT    : 8;            /*!< [31..24] Pointer to Next Message Object                                   */
      } bit;
    } CAN_MOSTAT22;
  } OBJ22;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000011E0) Message Object 23 Function Control Register                */
    
    struct {
      __IOM uint32_t MMC        : 4;            /*!< [3..0] Message Mode Control                                               */
            uint32_t            : 1;
      __IOM uint32_t BRS        : 1;            /*!< [5..5] Bit Rate Switch                                                    */
      __IOM uint32_t FDF        : 1;            /*!< [6..6] CAN FD Frame Format                                                */
            uint32_t            : 1;
      __IOM uint32_t GDFS       : 1;            /*!< [8..8] Gateway Data Frame Send                                            */
      __IOM uint32_t IDC        : 1;            /*!< [9..9] Identifier Copy                                                    */
      __IOM uint32_t DLCC       : 1;            /*!< [10..10] Data Length Code Copy                                            */
      __IOM uint32_t DATC       : 1;            /*!< [11..11] Data Copy                                                        */
            uint32_t            : 4;
      __IOM uint32_t RXIE       : 1;            /*!< [16..16] Receive Interrupt Enable                                         */
      __IOM uint32_t TXIE       : 1;            /*!< [17..17] Transmit Interrupt Enable                                        */
      __IOM uint32_t OVIE       : 1;            /*!< [18..18] Overflow Interrupt Enable                                        */
            uint32_t            : 1;
      __IOM uint32_t FRREN      : 1;            /*!< [20..20] Foreign Remote Request Enable                                    */
      __IOM uint32_t RMM        : 1;            /*!< [21..21] Transmit Object Remote Monitoring                                */
      __IOM uint32_t SDT        : 1;            /*!< [22..22] Single Data Transfer                                             */
      __IOM uint32_t STT        : 1;            /*!< [23..23] Single Transmit Trial                                            */
      __IOM uint32_t DLC        : 4;            /*!< [27..24] Data Length Code                                                 */
            uint32_t            : 4;
    } bit;
  } CAN_MOFCR23;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000011E4) Message Object 23 FIFO/Gateway Pointer Register            */
    
    struct {
      __IOM uint32_t BOT        : 8;            /*!< [7..0] Bottom Pointer                                                     */
      __IOM uint32_t TOP        : 8;            /*!< [15..8] Top Pointer                                                       */
      __IOM uint32_t CUR        : 8;            /*!< [23..16] Current Object Pointer                                           */
      __IOM uint32_t SEL        : 8;            /*!< [31..24] Object Select Pointer                                            */
    } bit;
  } CAN_MOFGPR23;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000011E8) Message Object 23 Interrupt Pointer Register               */
    
    struct {
      __IOM uint32_t RXINP      : 4;            /*!< [3..0] Receive Interrupt Node Pointer                                     */
      __IOM uint32_t TXINP      : 4;            /*!< [7..4] Transmit Interrupt Node Pointer                                    */
      __IOM uint32_t MPN        : 8;            /*!< [15..8] Message Pending Number                                            */
      __IOM uint32_t CFCVAL     : 16;           /*!< [31..16] CAN Frame Counter Value                                          */
    } bit;
  } CAN_MOIPR23;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000011EC) Message Object 23 Acceptance Mask Register                 */
    
    struct {
      __IOM uint32_t AM         : 29;           /*!< [28..0] Acceptance Mask for Message Identifier                            */
      __IOM uint32_t MIDE       : 1;            /*!< [29..29] Acceptance Mask Bit for Message IDE Bit                          */
            uint32_t            : 2;
    } bit;
  } CAN_MOAMR23;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000011F0) Message Object 23 Data Register Low                        */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_MODATAL23;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000011F4) Message Object 23 Data Register High                       */
    
    struct {
      __IOM uint32_t DB4        : 8;            /*!< [7..0] Data Byte 4 of Message Object n                                    */
      __IOM uint32_t DB5        : 8;            /*!< [15..8] Data Byte 5 of Message Object n                                   */
      __IOM uint32_t DB6        : 8;            /*!< [23..16] Data Byte 6 of Message Object n                                  */
      __IOM uint32_t DB7        : 8;            /*!< [31..24] Data Byte 7 of Message Object n                                  */
    } bit;
  } CAN_MODATAH23;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000011F8) Message Object 23 Arbitration Register                     */
    
    struct {
      __IOM uint32_t ID         : 29;           /*!< [28..0] CAN Identifier of Message Object n                                */
      __IOM uint32_t IDE        : 1;            /*!< [29..29] Identifier Extension Bit of Message Object n                     */
      __IOM uint32_t PRI        : 2;            /*!< [31..30] Priority Class                                                   */
    } bit;
  } CAN_MOAR23;
  
  union {
    union {
      __OM  uint32_t reg;                       /*!< (@ 0x000011FC) Message Object 23 Control Register                         */
      
      struct {
        __OM  uint32_t RESRXPND : 1;            /*!< [0..0] Reset Receive Pending                                              */
        __OM  uint32_t RESTXPND : 1;            /*!< [1..1] Reset Transmit Pending                                             */
        __OM  uint32_t RESRXUPD : 1;            /*!< [2..2] Reset Receive Updating                                             */
        __OM  uint32_t RESNEWDAT : 1;           /*!< [3..3] Reset New Data                                                     */
        __OM  uint32_t RESMSGLST : 1;           /*!< [4..4] Reset Message Lost                                                 */
        __OM  uint32_t RESMSGVAL : 1;           /*!< [5..5] Reset Message Valid                                                */
        __OM  uint32_t RESRTSEL : 1;            /*!< [6..6] Reset Receive/Transmit Selected                                    */
        __OM  uint32_t RESRXEN  : 1;            /*!< [7..7] Reset Receive Enable                                               */
        __OM  uint32_t RESTXRQ  : 1;            /*!< [8..8] Reset Transmit Request                                             */
        __OM  uint32_t RESTXEN0 : 1;            /*!< [9..9] Reset Transmit Enable 0                                            */
        __OM  uint32_t RESTXEN1 : 1;            /*!< [10..10] Reset Transmit Enable 1                                          */
        __OM  uint32_t RESDIR_SETDIR : 1;       /*!< [11..11] Reset Message Direction                                          */
              uint32_t          : 4;
        __OM  uint32_t SETRXPND : 1;            /*!< [16..16] Set Receive Pending                                              */
        __OM  uint32_t SETTXPND : 1;            /*!< [17..17] Set Transmit Pending                                             */
        __OM  uint32_t SETRXUPD : 1;            /*!< [18..18] Set Receive Updating                                             */
        __OM  uint32_t SETNEWDAT : 1;           /*!< [19..19] Set New Data                                                     */
        __OM  uint32_t SETMSGLST : 1;           /*!< [20..20] Set Message Lost                                                 */
        __OM  uint32_t SETMSGVAL : 1;           /*!< [21..21] Set Message Valid                                                */
        __OM  uint32_t SETRTSEL : 1;            /*!< [22..22] Set Receive/Transmit Selected                                    */
        __OM  uint32_t SETRXEN  : 1;            /*!< [23..23] Set Receive Enable                                               */
        __OM  uint32_t SETTXRQ  : 1;            /*!< [24..24] Set Transmit Request                                             */
        __OM  uint32_t SETTXEN0 : 1;            /*!< [25..25] Set Transmit Enable 0                                            */
        __OM  uint32_t SETTXEN1 : 1;            /*!< [26..26] Set Transmit Enable 1                                            */
        __OM  uint32_t SETDIR   : 1;            /*!< [27..27] Set Message Direction                                            */
              uint32_t          : 4;
      } bit;
    } CAN_MOCTR23;
    
    union {
      __IM  uint32_t reg;                       /*!< (@ 0x000011FC) Message Object 23 Status Register                          */
      
      struct {
        __IM  uint32_t RXPND    : 1;            /*!< [0..0] Receive Pending                                                    */
        __IM  uint32_t TXPND    : 1;            /*!< [1..1] Transmit Pending                                                   */
        __IM  uint32_t RXUPD    : 1;            /*!< [2..2] Receive Updating                                                   */
        __IM  uint32_t NEWDAT   : 1;            /*!< [3..3] New Data                                                           */
        __IM  uint32_t MSGLST   : 1;            /*!< [4..4] Message Lost                                                       */
        __IM  uint32_t MSGVAL   : 1;            /*!< [5..5] Message Valid                                                      */
        __IM  uint32_t RTSEL    : 1;            /*!< [6..6] Receive/Transmit Selected                                          */
        __IM  uint32_t RXEN     : 1;            /*!< [7..7] Receive Enable                                                     */
        __IM  uint32_t TXRQ     : 1;            /*!< [8..8] Transmit Request                                                   */
        __IM  uint32_t TXEN0    : 1;            /*!< [9..9] Transmit Enable 0                                                  */
        __IM  uint32_t TXEN1    : 1;            /*!< [10..10] Transmit Enable 1                                                */
        __IM  uint32_t DIR      : 1;            /*!< [11..11] Message Direction                                                */
        __IM  uint32_t LIST     : 4;            /*!< [15..12] List Allocation                                                  */
        __IM  uint32_t PPREV    : 8;            /*!< [23..16] Pointer to Previous Message Object                               */
        __IM  uint32_t PNEXT    : 8;            /*!< [31..24] Pointer to Next Message Object                                   */
      } bit;
    } CAN_MOSTAT23;
  } OBJ23;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001200) Message Object 24 Function Control Register                */
    
    struct {
      __IOM uint32_t MMC        : 4;            /*!< [3..0] Message Mode Control                                               */
            uint32_t            : 1;
      __IOM uint32_t BRS        : 1;            /*!< [5..5] Bit Rate Switch                                                    */
      __IOM uint32_t FDF        : 1;            /*!< [6..6] CAN FD Frame Format                                                */
            uint32_t            : 1;
      __IOM uint32_t GDFS       : 1;            /*!< [8..8] Gateway Data Frame Send                                            */
      __IOM uint32_t IDC        : 1;            /*!< [9..9] Identifier Copy                                                    */
      __IOM uint32_t DLCC       : 1;            /*!< [10..10] Data Length Code Copy                                            */
      __IOM uint32_t DATC       : 1;            /*!< [11..11] Data Copy                                                        */
            uint32_t            : 4;
      __IOM uint32_t RXIE       : 1;            /*!< [16..16] Receive Interrupt Enable                                         */
      __IOM uint32_t TXIE       : 1;            /*!< [17..17] Transmit Interrupt Enable                                        */
      __IOM uint32_t OVIE       : 1;            /*!< [18..18] Overflow Interrupt Enable                                        */
            uint32_t            : 1;
      __IOM uint32_t FRREN      : 1;            /*!< [20..20] Foreign Remote Request Enable                                    */
      __IOM uint32_t RMM        : 1;            /*!< [21..21] Transmit Object Remote Monitoring                                */
      __IOM uint32_t SDT        : 1;            /*!< [22..22] Single Data Transfer                                             */
      __IOM uint32_t STT        : 1;            /*!< [23..23] Single Transmit Trial                                            */
      __IOM uint32_t DLC        : 4;            /*!< [27..24] Data Length Code                                                 */
            uint32_t            : 4;
    } bit;
  } CAN_MOFCR24;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001204) Message Object 24 FIFO/Gateway Pointer Register            */
    
    struct {
      __IOM uint32_t BOT        : 8;            /*!< [7..0] Bottom Pointer                                                     */
      __IOM uint32_t TOP        : 8;            /*!< [15..8] Top Pointer                                                       */
      __IOM uint32_t CUR        : 8;            /*!< [23..16] Current Object Pointer                                           */
      __IOM uint32_t SEL        : 8;            /*!< [31..24] Object Select Pointer                                            */
    } bit;
  } CAN_MOFGPR24;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001208) Message Object 24 Interrupt Pointer Register               */
    
    struct {
      __IOM uint32_t RXINP      : 4;            /*!< [3..0] Receive Interrupt Node Pointer                                     */
      __IOM uint32_t TXINP      : 4;            /*!< [7..4] Transmit Interrupt Node Pointer                                    */
      __IOM uint32_t MPN        : 8;            /*!< [15..8] Message Pending Number                                            */
      __IOM uint32_t CFCVAL     : 16;           /*!< [31..16] CAN Frame Counter Value                                          */
    } bit;
  } CAN_MOIPR24;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000120C) Message Object 24 Acceptance Mask Register                 */
    
    struct {
      __IOM uint32_t AM         : 29;           /*!< [28..0] Acceptance Mask for Message Identifier                            */
      __IOM uint32_t MIDE       : 1;            /*!< [29..29] Acceptance Mask Bit for Message IDE Bit                          */
            uint32_t            : 2;
    } bit;
  } CAN_MOAMR24;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001210) Message Object 24 Data Register Low                        */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_MODATAL24;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001214) Message Object 24 Data Register High                       */
    
    struct {
      __IOM uint32_t DB4        : 8;            /*!< [7..0] Data Byte 4 of Message Object n                                    */
      __IOM uint32_t DB5        : 8;            /*!< [15..8] Data Byte 5 of Message Object n                                   */
      __IOM uint32_t DB6        : 8;            /*!< [23..16] Data Byte 6 of Message Object n                                  */
      __IOM uint32_t DB7        : 8;            /*!< [31..24] Data Byte 7 of Message Object n                                  */
    } bit;
  } CAN_MODATAH24;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001218) Message Object 24 Arbitration Register                     */
    
    struct {
      __IOM uint32_t ID         : 29;           /*!< [28..0] CAN Identifier of Message Object n                                */
      __IOM uint32_t IDE        : 1;            /*!< [29..29] Identifier Extension Bit of Message Object n                     */
      __IOM uint32_t PRI        : 2;            /*!< [31..30] Priority Class                                                   */
    } bit;
  } CAN_MOAR24;
  
  union {
    union {
      __OM  uint32_t reg;                       /*!< (@ 0x0000121C) Message Object 24 Control Register                         */
      
      struct {
        __OM  uint32_t RESRXPND : 1;            /*!< [0..0] Reset Receive Pending                                              */
        __OM  uint32_t RESTXPND : 1;            /*!< [1..1] Reset Transmit Pending                                             */
        __OM  uint32_t RESRXUPD : 1;            /*!< [2..2] Reset Receive Updating                                             */
        __OM  uint32_t RESNEWDAT : 1;           /*!< [3..3] Reset New Data                                                     */
        __OM  uint32_t RESMSGLST : 1;           /*!< [4..4] Reset Message Lost                                                 */
        __OM  uint32_t RESMSGVAL : 1;           /*!< [5..5] Reset Message Valid                                                */
        __OM  uint32_t RESRTSEL : 1;            /*!< [6..6] Reset Receive/Transmit Selected                                    */
        __OM  uint32_t RESRXEN  : 1;            /*!< [7..7] Reset Receive Enable                                               */
        __OM  uint32_t RESTXRQ  : 1;            /*!< [8..8] Reset Transmit Request                                             */
        __OM  uint32_t RESTXEN0 : 1;            /*!< [9..9] Reset Transmit Enable 0                                            */
        __OM  uint32_t RESTXEN1 : 1;            /*!< [10..10] Reset Transmit Enable 1                                          */
        __OM  uint32_t RESDIR_SETDIR : 1;       /*!< [11..11] Reset Message Direction                                          */
              uint32_t          : 4;
        __OM  uint32_t SETRXPND : 1;            /*!< [16..16] Set Receive Pending                                              */
        __OM  uint32_t SETTXPND : 1;            /*!< [17..17] Set Transmit Pending                                             */
        __OM  uint32_t SETRXUPD : 1;            /*!< [18..18] Set Receive Updating                                             */
        __OM  uint32_t SETNEWDAT : 1;           /*!< [19..19] Set New Data                                                     */
        __OM  uint32_t SETMSGLST : 1;           /*!< [20..20] Set Message Lost                                                 */
        __OM  uint32_t SETMSGVAL : 1;           /*!< [21..21] Set Message Valid                                                */
        __OM  uint32_t SETRTSEL : 1;            /*!< [22..22] Set Receive/Transmit Selected                                    */
        __OM  uint32_t SETRXEN  : 1;            /*!< [23..23] Set Receive Enable                                               */
        __OM  uint32_t SETTXRQ  : 1;            /*!< [24..24] Set Transmit Request                                             */
        __OM  uint32_t SETTXEN0 : 1;            /*!< [25..25] Set Transmit Enable 0                                            */
        __OM  uint32_t SETTXEN1 : 1;            /*!< [26..26] Set Transmit Enable 1                                            */
        __OM  uint32_t SETDIR   : 1;            /*!< [27..27] Set Message Direction                                            */
              uint32_t          : 4;
      } bit;
    } CAN_MOCTR24;
    
    union {
      __IM  uint32_t reg;                       /*!< (@ 0x0000121C) Message Object 24 Status Register                          */
      
      struct {
        __IM  uint32_t RXPND    : 1;            /*!< [0..0] Receive Pending                                                    */
        __IM  uint32_t TXPND    : 1;            /*!< [1..1] Transmit Pending                                                   */
        __IM  uint32_t RXUPD    : 1;            /*!< [2..2] Receive Updating                                                   */
        __IM  uint32_t NEWDAT   : 1;            /*!< [3..3] New Data                                                           */
        __IM  uint32_t MSGLST   : 1;            /*!< [4..4] Message Lost                                                       */
        __IM  uint32_t MSGVAL   : 1;            /*!< [5..5] Message Valid                                                      */
        __IM  uint32_t RTSEL    : 1;            /*!< [6..6] Receive/Transmit Selected                                          */
        __IM  uint32_t RXEN     : 1;            /*!< [7..7] Receive Enable                                                     */
        __IM  uint32_t TXRQ     : 1;            /*!< [8..8] Transmit Request                                                   */
        __IM  uint32_t TXEN0    : 1;            /*!< [9..9] Transmit Enable 0                                                  */
        __IM  uint32_t TXEN1    : 1;            /*!< [10..10] Transmit Enable 1                                                */
        __IM  uint32_t DIR      : 1;            /*!< [11..11] Message Direction                                                */
        __IM  uint32_t LIST     : 4;            /*!< [15..12] List Allocation                                                  */
        __IM  uint32_t PPREV    : 8;            /*!< [23..16] Pointer to Previous Message Object                               */
        __IM  uint32_t PNEXT    : 8;            /*!< [31..24] Pointer to Next Message Object                                   */
      } bit;
    } CAN_MOSTAT24;
  } OBJ24;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001220) Message Object 25 Function Control Register                */
    
    struct {
      __IOM uint32_t MMC        : 4;            /*!< [3..0] Message Mode Control                                               */
            uint32_t            : 1;
      __IOM uint32_t BRS        : 1;            /*!< [5..5] Bit Rate Switch                                                    */
      __IOM uint32_t FDF        : 1;            /*!< [6..6] CAN FD Frame Format                                                */
            uint32_t            : 1;
      __IOM uint32_t GDFS       : 1;            /*!< [8..8] Gateway Data Frame Send                                            */
      __IOM uint32_t IDC        : 1;            /*!< [9..9] Identifier Copy                                                    */
      __IOM uint32_t DLCC       : 1;            /*!< [10..10] Data Length Code Copy                                            */
      __IOM uint32_t DATC       : 1;            /*!< [11..11] Data Copy                                                        */
            uint32_t            : 4;
      __IOM uint32_t RXIE       : 1;            /*!< [16..16] Receive Interrupt Enable                                         */
      __IOM uint32_t TXIE       : 1;            /*!< [17..17] Transmit Interrupt Enable                                        */
      __IOM uint32_t OVIE       : 1;            /*!< [18..18] Overflow Interrupt Enable                                        */
            uint32_t            : 1;
      __IOM uint32_t FRREN      : 1;            /*!< [20..20] Foreign Remote Request Enable                                    */
      __IOM uint32_t RMM        : 1;            /*!< [21..21] Transmit Object Remote Monitoring                                */
      __IOM uint32_t SDT        : 1;            /*!< [22..22] Single Data Transfer                                             */
      __IOM uint32_t STT        : 1;            /*!< [23..23] Single Transmit Trial                                            */
      __IOM uint32_t DLC        : 4;            /*!< [27..24] Data Length Code                                                 */
            uint32_t            : 4;
    } bit;
  } CAN_MOFCR25;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001224) Message Object 25 FIFO/Gateway Pointer Register            */
    
    struct {
      __IOM uint32_t BOT        : 8;            /*!< [7..0] Bottom Pointer                                                     */
      __IOM uint32_t TOP        : 8;            /*!< [15..8] Top Pointer                                                       */
      __IOM uint32_t CUR        : 8;            /*!< [23..16] Current Object Pointer                                           */
      __IOM uint32_t SEL        : 8;            /*!< [31..24] Object Select Pointer                                            */
    } bit;
  } CAN_MOFGPR25;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001228) Message Object 25 Interrupt Pointer Register               */
    
    struct {
      __IOM uint32_t RXINP      : 4;            /*!< [3..0] Receive Interrupt Node Pointer                                     */
      __IOM uint32_t TXINP      : 4;            /*!< [7..4] Transmit Interrupt Node Pointer                                    */
      __IOM uint32_t MPN        : 8;            /*!< [15..8] Message Pending Number                                            */
      __IOM uint32_t CFCVAL     : 16;           /*!< [31..16] CAN Frame Counter Value                                          */
    } bit;
  } CAN_MOIPR25;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000122C) Message Object 25 Acceptance Mask Register                 */
    
    struct {
      __IOM uint32_t AM         : 29;           /*!< [28..0] Acceptance Mask for Message Identifier                            */
      __IOM uint32_t MIDE       : 1;            /*!< [29..29] Acceptance Mask Bit for Message IDE Bit                          */
            uint32_t            : 2;
    } bit;
  } CAN_MOAMR25;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001230) Message Object 25 Data Register Low                        */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_MODATAL25;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001234) Message Object 25 Data Register High                       */
    
    struct {
      __IOM uint32_t DB4        : 8;            /*!< [7..0] Data Byte 4 of Message Object n                                    */
      __IOM uint32_t DB5        : 8;            /*!< [15..8] Data Byte 5 of Message Object n                                   */
      __IOM uint32_t DB6        : 8;            /*!< [23..16] Data Byte 6 of Message Object n                                  */
      __IOM uint32_t DB7        : 8;            /*!< [31..24] Data Byte 7 of Message Object n                                  */
    } bit;
  } CAN_MODATAH25;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001238) Message Object 25 Arbitration Register                     */
    
    struct {
      __IOM uint32_t ID         : 29;           /*!< [28..0] CAN Identifier of Message Object n                                */
      __IOM uint32_t IDE        : 1;            /*!< [29..29] Identifier Extension Bit of Message Object n                     */
      __IOM uint32_t PRI        : 2;            /*!< [31..30] Priority Class                                                   */
    } bit;
  } CAN_MOAR25;
  
  union {
    union {
      __OM  uint32_t reg;                       /*!< (@ 0x0000123C) Message Object 25 Control Register                         */
      
      struct {
        __OM  uint32_t RESRXPND : 1;            /*!< [0..0] Reset Receive Pending                                              */
        __OM  uint32_t RESTXPND : 1;            /*!< [1..1] Reset Transmit Pending                                             */
        __OM  uint32_t RESRXUPD : 1;            /*!< [2..2] Reset Receive Updating                                             */
        __OM  uint32_t RESNEWDAT : 1;           /*!< [3..3] Reset New Data                                                     */
        __OM  uint32_t RESMSGLST : 1;           /*!< [4..4] Reset Message Lost                                                 */
        __OM  uint32_t RESMSGVAL : 1;           /*!< [5..5] Reset Message Valid                                                */
        __OM  uint32_t RESRTSEL : 1;            /*!< [6..6] Reset Receive/Transmit Selected                                    */
        __OM  uint32_t RESRXEN  : 1;            /*!< [7..7] Reset Receive Enable                                               */
        __OM  uint32_t RESTXRQ  : 1;            /*!< [8..8] Reset Transmit Request                                             */
        __OM  uint32_t RESTXEN0 : 1;            /*!< [9..9] Reset Transmit Enable 0                                            */
        __OM  uint32_t RESTXEN1 : 1;            /*!< [10..10] Reset Transmit Enable 1                                          */
        __OM  uint32_t RESDIR_SETDIR : 1;       /*!< [11..11] Reset Message Direction                                          */
              uint32_t          : 4;
        __OM  uint32_t SETRXPND : 1;            /*!< [16..16] Set Receive Pending                                              */
        __OM  uint32_t SETTXPND : 1;            /*!< [17..17] Set Transmit Pending                                             */
        __OM  uint32_t SETRXUPD : 1;            /*!< [18..18] Set Receive Updating                                             */
        __OM  uint32_t SETNEWDAT : 1;           /*!< [19..19] Set New Data                                                     */
        __OM  uint32_t SETMSGLST : 1;           /*!< [20..20] Set Message Lost                                                 */
        __OM  uint32_t SETMSGVAL : 1;           /*!< [21..21] Set Message Valid                                                */
        __OM  uint32_t SETRTSEL : 1;            /*!< [22..22] Set Receive/Transmit Selected                                    */
        __OM  uint32_t SETRXEN  : 1;            /*!< [23..23] Set Receive Enable                                               */
        __OM  uint32_t SETTXRQ  : 1;            /*!< [24..24] Set Transmit Request                                             */
        __OM  uint32_t SETTXEN0 : 1;            /*!< [25..25] Set Transmit Enable 0                                            */
        __OM  uint32_t SETTXEN1 : 1;            /*!< [26..26] Set Transmit Enable 1                                            */
        __OM  uint32_t SETDIR   : 1;            /*!< [27..27] Set Message Direction                                            */
              uint32_t          : 4;
      } bit;
    } CAN_MOCTR25;
    
    union {
      __IM  uint32_t reg;                       /*!< (@ 0x0000123C) Message Object 25 Status Register                          */
      
      struct {
        __IM  uint32_t RXPND    : 1;            /*!< [0..0] Receive Pending                                                    */
        __IM  uint32_t TXPND    : 1;            /*!< [1..1] Transmit Pending                                                   */
        __IM  uint32_t RXUPD    : 1;            /*!< [2..2] Receive Updating                                                   */
        __IM  uint32_t NEWDAT   : 1;            /*!< [3..3] New Data                                                           */
        __IM  uint32_t MSGLST   : 1;            /*!< [4..4] Message Lost                                                       */
        __IM  uint32_t MSGVAL   : 1;            /*!< [5..5] Message Valid                                                      */
        __IM  uint32_t RTSEL    : 1;            /*!< [6..6] Receive/Transmit Selected                                          */
        __IM  uint32_t RXEN     : 1;            /*!< [7..7] Receive Enable                                                     */
        __IM  uint32_t TXRQ     : 1;            /*!< [8..8] Transmit Request                                                   */
        __IM  uint32_t TXEN0    : 1;            /*!< [9..9] Transmit Enable 0                                                  */
        __IM  uint32_t TXEN1    : 1;            /*!< [10..10] Transmit Enable 1                                                */
        __IM  uint32_t DIR      : 1;            /*!< [11..11] Message Direction                                                */
        __IM  uint32_t LIST     : 4;            /*!< [15..12] List Allocation                                                  */
        __IM  uint32_t PPREV    : 8;            /*!< [23..16] Pointer to Previous Message Object                               */
        __IM  uint32_t PNEXT    : 8;            /*!< [31..24] Pointer to Next Message Object                                   */
      } bit;
    } CAN_MOSTAT25;
  } OBJ25;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001240) Message Object 26 Function Control Register                */
    
    struct {
      __IOM uint32_t MMC        : 4;            /*!< [3..0] Message Mode Control                                               */
            uint32_t            : 1;
      __IOM uint32_t BRS        : 1;            /*!< [5..5] Bit Rate Switch                                                    */
      __IOM uint32_t FDF        : 1;            /*!< [6..6] CAN FD Frame Format                                                */
            uint32_t            : 1;
      __IOM uint32_t GDFS       : 1;            /*!< [8..8] Gateway Data Frame Send                                            */
      __IOM uint32_t IDC        : 1;            /*!< [9..9] Identifier Copy                                                    */
      __IOM uint32_t DLCC       : 1;            /*!< [10..10] Data Length Code Copy                                            */
      __IOM uint32_t DATC       : 1;            /*!< [11..11] Data Copy                                                        */
            uint32_t            : 4;
      __IOM uint32_t RXIE       : 1;            /*!< [16..16] Receive Interrupt Enable                                         */
      __IOM uint32_t TXIE       : 1;            /*!< [17..17] Transmit Interrupt Enable                                        */
      __IOM uint32_t OVIE       : 1;            /*!< [18..18] Overflow Interrupt Enable                                        */
            uint32_t            : 1;
      __IOM uint32_t FRREN      : 1;            /*!< [20..20] Foreign Remote Request Enable                                    */
      __IOM uint32_t RMM        : 1;            /*!< [21..21] Transmit Object Remote Monitoring                                */
      __IOM uint32_t SDT        : 1;            /*!< [22..22] Single Data Transfer                                             */
      __IOM uint32_t STT        : 1;            /*!< [23..23] Single Transmit Trial                                            */
      __IOM uint32_t DLC        : 4;            /*!< [27..24] Data Length Code                                                 */
            uint32_t            : 4;
    } bit;
  } CAN_MOFCR26;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001244) Message Object 26 FIFO/Gateway Pointer Register            */
    
    struct {
      __IOM uint32_t BOT        : 8;            /*!< [7..0] Bottom Pointer                                                     */
      __IOM uint32_t TOP        : 8;            /*!< [15..8] Top Pointer                                                       */
      __IOM uint32_t CUR        : 8;            /*!< [23..16] Current Object Pointer                                           */
      __IOM uint32_t SEL        : 8;            /*!< [31..24] Object Select Pointer                                            */
    } bit;
  } CAN_MOFGPR26;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001248) Message Object 26 Interrupt Pointer Register               */
    
    struct {
      __IOM uint32_t RXINP      : 4;            /*!< [3..0] Receive Interrupt Node Pointer                                     */
      __IOM uint32_t TXINP      : 4;            /*!< [7..4] Transmit Interrupt Node Pointer                                    */
      __IOM uint32_t MPN        : 8;            /*!< [15..8] Message Pending Number                                            */
      __IOM uint32_t CFCVAL     : 16;           /*!< [31..16] CAN Frame Counter Value                                          */
    } bit;
  } CAN_MOIPR26;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000124C) Message Object 26 Acceptance Mask Register                 */
    
    struct {
      __IOM uint32_t AM         : 29;           /*!< [28..0] Acceptance Mask for Message Identifier                            */
      __IOM uint32_t MIDE       : 1;            /*!< [29..29] Acceptance Mask Bit for Message IDE Bit                          */
            uint32_t            : 2;
    } bit;
  } CAN_MOAMR26;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001250) Message Object 26 Data Register Low                        */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_MODATAL26;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001254) Message Object 26 Data Register High                       */
    
    struct {
      __IOM uint32_t DB4        : 8;            /*!< [7..0] Data Byte 4 of Message Object n                                    */
      __IOM uint32_t DB5        : 8;            /*!< [15..8] Data Byte 5 of Message Object n                                   */
      __IOM uint32_t DB6        : 8;            /*!< [23..16] Data Byte 6 of Message Object n                                  */
      __IOM uint32_t DB7        : 8;            /*!< [31..24] Data Byte 7 of Message Object n                                  */
    } bit;
  } CAN_MODATAH26;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001258) Message Object 26 Arbitration Register                     */
    
    struct {
      __IOM uint32_t ID         : 29;           /*!< [28..0] CAN Identifier of Message Object n                                */
      __IOM uint32_t IDE        : 1;            /*!< [29..29] Identifier Extension Bit of Message Object n                     */
      __IOM uint32_t PRI        : 2;            /*!< [31..30] Priority Class                                                   */
    } bit;
  } CAN_MOAR26;
  
  union {
    union {
      __OM  uint32_t reg;                       /*!< (@ 0x0000125C) Message Object 26 Control Register                         */
      
      struct {
        __OM  uint32_t RESRXPND : 1;            /*!< [0..0] Reset Receive Pending                                              */
        __OM  uint32_t RESTXPND : 1;            /*!< [1..1] Reset Transmit Pending                                             */
        __OM  uint32_t RESRXUPD : 1;            /*!< [2..2] Reset Receive Updating                                             */
        __OM  uint32_t RESNEWDAT : 1;           /*!< [3..3] Reset New Data                                                     */
        __OM  uint32_t RESMSGLST : 1;           /*!< [4..4] Reset Message Lost                                                 */
        __OM  uint32_t RESMSGVAL : 1;           /*!< [5..5] Reset Message Valid                                                */
        __OM  uint32_t RESRTSEL : 1;            /*!< [6..6] Reset Receive/Transmit Selected                                    */
        __OM  uint32_t RESRXEN  : 1;            /*!< [7..7] Reset Receive Enable                                               */
        __OM  uint32_t RESTXRQ  : 1;            /*!< [8..8] Reset Transmit Request                                             */
        __OM  uint32_t RESTXEN0 : 1;            /*!< [9..9] Reset Transmit Enable 0                                            */
        __OM  uint32_t RESTXEN1 : 1;            /*!< [10..10] Reset Transmit Enable 1                                          */
        __OM  uint32_t RESDIR_SETDIR : 1;       /*!< [11..11] Reset Message Direction                                          */
              uint32_t          : 4;
        __OM  uint32_t SETRXPND : 1;            /*!< [16..16] Set Receive Pending                                              */
        __OM  uint32_t SETTXPND : 1;            /*!< [17..17] Set Transmit Pending                                             */
        __OM  uint32_t SETRXUPD : 1;            /*!< [18..18] Set Receive Updating                                             */
        __OM  uint32_t SETNEWDAT : 1;           /*!< [19..19] Set New Data                                                     */
        __OM  uint32_t SETMSGLST : 1;           /*!< [20..20] Set Message Lost                                                 */
        __OM  uint32_t SETMSGVAL : 1;           /*!< [21..21] Set Message Valid                                                */
        __OM  uint32_t SETRTSEL : 1;            /*!< [22..22] Set Receive/Transmit Selected                                    */
        __OM  uint32_t SETRXEN  : 1;            /*!< [23..23] Set Receive Enable                                               */
        __OM  uint32_t SETTXRQ  : 1;            /*!< [24..24] Set Transmit Request                                             */
        __OM  uint32_t SETTXEN0 : 1;            /*!< [25..25] Set Transmit Enable 0                                            */
        __OM  uint32_t SETTXEN1 : 1;            /*!< [26..26] Set Transmit Enable 1                                            */
        __OM  uint32_t SETDIR   : 1;            /*!< [27..27] Set Message Direction                                            */
              uint32_t          : 4;
      } bit;
    } CAN_MOCTR26;
    
    union {
      __IM  uint32_t reg;                       /*!< (@ 0x0000125C) Message Object 26 Status Register                          */
      
      struct {
        __IM  uint32_t RXPND    : 1;            /*!< [0..0] Receive Pending                                                    */
        __IM  uint32_t TXPND    : 1;            /*!< [1..1] Transmit Pending                                                   */
        __IM  uint32_t RXUPD    : 1;            /*!< [2..2] Receive Updating                                                   */
        __IM  uint32_t NEWDAT   : 1;            /*!< [3..3] New Data                                                           */
        __IM  uint32_t MSGLST   : 1;            /*!< [4..4] Message Lost                                                       */
        __IM  uint32_t MSGVAL   : 1;            /*!< [5..5] Message Valid                                                      */
        __IM  uint32_t RTSEL    : 1;            /*!< [6..6] Receive/Transmit Selected                                          */
        __IM  uint32_t RXEN     : 1;            /*!< [7..7] Receive Enable                                                     */
        __IM  uint32_t TXRQ     : 1;            /*!< [8..8] Transmit Request                                                   */
        __IM  uint32_t TXEN0    : 1;            /*!< [9..9] Transmit Enable 0                                                  */
        __IM  uint32_t TXEN1    : 1;            /*!< [10..10] Transmit Enable 1                                                */
        __IM  uint32_t DIR      : 1;            /*!< [11..11] Message Direction                                                */
        __IM  uint32_t LIST     : 4;            /*!< [15..12] List Allocation                                                  */
        __IM  uint32_t PPREV    : 8;            /*!< [23..16] Pointer to Previous Message Object                               */
        __IM  uint32_t PNEXT    : 8;            /*!< [31..24] Pointer to Next Message Object                                   */
      } bit;
    } CAN_MOSTAT26;
  } OBJ26;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001260) Message Object 27 Function Control Register                */
    
    struct {
      __IOM uint32_t MMC        : 4;            /*!< [3..0] Message Mode Control                                               */
            uint32_t            : 1;
      __IOM uint32_t BRS        : 1;            /*!< [5..5] Bit Rate Switch                                                    */
      __IOM uint32_t FDF        : 1;            /*!< [6..6] CAN FD Frame Format                                                */
            uint32_t            : 1;
      __IOM uint32_t GDFS       : 1;            /*!< [8..8] Gateway Data Frame Send                                            */
      __IOM uint32_t IDC        : 1;            /*!< [9..9] Identifier Copy                                                    */
      __IOM uint32_t DLCC       : 1;            /*!< [10..10] Data Length Code Copy                                            */
      __IOM uint32_t DATC       : 1;            /*!< [11..11] Data Copy                                                        */
            uint32_t            : 4;
      __IOM uint32_t RXIE       : 1;            /*!< [16..16] Receive Interrupt Enable                                         */
      __IOM uint32_t TXIE       : 1;            /*!< [17..17] Transmit Interrupt Enable                                        */
      __IOM uint32_t OVIE       : 1;            /*!< [18..18] Overflow Interrupt Enable                                        */
            uint32_t            : 1;
      __IOM uint32_t FRREN      : 1;            /*!< [20..20] Foreign Remote Request Enable                                    */
      __IOM uint32_t RMM        : 1;            /*!< [21..21] Transmit Object Remote Monitoring                                */
      __IOM uint32_t SDT        : 1;            /*!< [22..22] Single Data Transfer                                             */
      __IOM uint32_t STT        : 1;            /*!< [23..23] Single Transmit Trial                                            */
      __IOM uint32_t DLC        : 4;            /*!< [27..24] Data Length Code                                                 */
            uint32_t            : 4;
    } bit;
  } CAN_MOFCR27;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001264) Message Object 27 FIFO/Gateway Pointer Register            */
    
    struct {
      __IOM uint32_t BOT        : 8;            /*!< [7..0] Bottom Pointer                                                     */
      __IOM uint32_t TOP        : 8;            /*!< [15..8] Top Pointer                                                       */
      __IOM uint32_t CUR        : 8;            /*!< [23..16] Current Object Pointer                                           */
      __IOM uint32_t SEL        : 8;            /*!< [31..24] Object Select Pointer                                            */
    } bit;
  } CAN_MOFGPR27;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001268) Message Object 27 Interrupt Pointer Register               */
    
    struct {
      __IOM uint32_t RXINP      : 4;            /*!< [3..0] Receive Interrupt Node Pointer                                     */
      __IOM uint32_t TXINP      : 4;            /*!< [7..4] Transmit Interrupt Node Pointer                                    */
      __IOM uint32_t MPN        : 8;            /*!< [15..8] Message Pending Number                                            */
      __IOM uint32_t CFCVAL     : 16;           /*!< [31..16] CAN Frame Counter Value                                          */
    } bit;
  } CAN_MOIPR27;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000126C) Message Object 27 Acceptance Mask Register                 */
    
    struct {
      __IOM uint32_t AM         : 29;           /*!< [28..0] Acceptance Mask for Message Identifier                            */
      __IOM uint32_t MIDE       : 1;            /*!< [29..29] Acceptance Mask Bit for Message IDE Bit                          */
            uint32_t            : 2;
    } bit;
  } CAN_MOAMR27;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001270) Message Object 27 Data Register Low                        */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_MODATAL27;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001274) Message Object 27 Data Register High                       */
    
    struct {
      __IOM uint32_t DB4        : 8;            /*!< [7..0] Data Byte 4 of Message Object n                                    */
      __IOM uint32_t DB5        : 8;            /*!< [15..8] Data Byte 5 of Message Object n                                   */
      __IOM uint32_t DB6        : 8;            /*!< [23..16] Data Byte 6 of Message Object n                                  */
      __IOM uint32_t DB7        : 8;            /*!< [31..24] Data Byte 7 of Message Object n                                  */
    } bit;
  } CAN_MODATAH27;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001278) Message Object 27 Arbitration Register                     */
    
    struct {
      __IOM uint32_t ID         : 29;           /*!< [28..0] CAN Identifier of Message Object n                                */
      __IOM uint32_t IDE        : 1;            /*!< [29..29] Identifier Extension Bit of Message Object n                     */
      __IOM uint32_t PRI        : 2;            /*!< [31..30] Priority Class                                                   */
    } bit;
  } CAN_MOAR27;
  
  union {
    union {
      __OM  uint32_t reg;                       /*!< (@ 0x0000127C) Message Object 27 Control Register                         */
      
      struct {
        __OM  uint32_t RESRXPND : 1;            /*!< [0..0] Reset Receive Pending                                              */
        __OM  uint32_t RESTXPND : 1;            /*!< [1..1] Reset Transmit Pending                                             */
        __OM  uint32_t RESRXUPD : 1;            /*!< [2..2] Reset Receive Updating                                             */
        __OM  uint32_t RESNEWDAT : 1;           /*!< [3..3] Reset New Data                                                     */
        __OM  uint32_t RESMSGLST : 1;           /*!< [4..4] Reset Message Lost                                                 */
        __OM  uint32_t RESMSGVAL : 1;           /*!< [5..5] Reset Message Valid                                                */
        __OM  uint32_t RESRTSEL : 1;            /*!< [6..6] Reset Receive/Transmit Selected                                    */
        __OM  uint32_t RESRXEN  : 1;            /*!< [7..7] Reset Receive Enable                                               */
        __OM  uint32_t RESTXRQ  : 1;            /*!< [8..8] Reset Transmit Request                                             */
        __OM  uint32_t RESTXEN0 : 1;            /*!< [9..9] Reset Transmit Enable 0                                            */
        __OM  uint32_t RESTXEN1 : 1;            /*!< [10..10] Reset Transmit Enable 1                                          */
        __OM  uint32_t RESDIR_SETDIR : 1;       /*!< [11..11] Reset Message Direction                                          */
              uint32_t          : 4;
        __OM  uint32_t SETRXPND : 1;            /*!< [16..16] Set Receive Pending                                              */
        __OM  uint32_t SETTXPND : 1;            /*!< [17..17] Set Transmit Pending                                             */
        __OM  uint32_t SETRXUPD : 1;            /*!< [18..18] Set Receive Updating                                             */
        __OM  uint32_t SETNEWDAT : 1;           /*!< [19..19] Set New Data                                                     */
        __OM  uint32_t SETMSGLST : 1;           /*!< [20..20] Set Message Lost                                                 */
        __OM  uint32_t SETMSGVAL : 1;           /*!< [21..21] Set Message Valid                                                */
        __OM  uint32_t SETRTSEL : 1;            /*!< [22..22] Set Receive/Transmit Selected                                    */
        __OM  uint32_t SETRXEN  : 1;            /*!< [23..23] Set Receive Enable                                               */
        __OM  uint32_t SETTXRQ  : 1;            /*!< [24..24] Set Transmit Request                                             */
        __OM  uint32_t SETTXEN0 : 1;            /*!< [25..25] Set Transmit Enable 0                                            */
        __OM  uint32_t SETTXEN1 : 1;            /*!< [26..26] Set Transmit Enable 1                                            */
        __OM  uint32_t SETDIR   : 1;            /*!< [27..27] Set Message Direction                                            */
              uint32_t          : 4;
      } bit;
    } CAN_MOCTR27;
    
    union {
      __IM  uint32_t reg;                       /*!< (@ 0x0000127C) Message Object 27 Status Register                          */
      
      struct {
        __IM  uint32_t RXPND    : 1;            /*!< [0..0] Receive Pending                                                    */
        __IM  uint32_t TXPND    : 1;            /*!< [1..1] Transmit Pending                                                   */
        __IM  uint32_t RXUPD    : 1;            /*!< [2..2] Receive Updating                                                   */
        __IM  uint32_t NEWDAT   : 1;            /*!< [3..3] New Data                                                           */
        __IM  uint32_t MSGLST   : 1;            /*!< [4..4] Message Lost                                                       */
        __IM  uint32_t MSGVAL   : 1;            /*!< [5..5] Message Valid                                                      */
        __IM  uint32_t RTSEL    : 1;            /*!< [6..6] Receive/Transmit Selected                                          */
        __IM  uint32_t RXEN     : 1;            /*!< [7..7] Receive Enable                                                     */
        __IM  uint32_t TXRQ     : 1;            /*!< [8..8] Transmit Request                                                   */
        __IM  uint32_t TXEN0    : 1;            /*!< [9..9] Transmit Enable 0                                                  */
        __IM  uint32_t TXEN1    : 1;            /*!< [10..10] Transmit Enable 1                                                */
        __IM  uint32_t DIR      : 1;            /*!< [11..11] Message Direction                                                */
        __IM  uint32_t LIST     : 4;            /*!< [15..12] List Allocation                                                  */
        __IM  uint32_t PPREV    : 8;            /*!< [23..16] Pointer to Previous Message Object                               */
        __IM  uint32_t PNEXT    : 8;            /*!< [31..24] Pointer to Next Message Object                                   */
      } bit;
    } CAN_MOSTAT27;
  } OBJ27;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001280) Message Object 28 Function Control Register                */
    
    struct {
      __IOM uint32_t MMC        : 4;            /*!< [3..0] Message Mode Control                                               */
            uint32_t            : 1;
      __IOM uint32_t BRS        : 1;            /*!< [5..5] Bit Rate Switch                                                    */
      __IOM uint32_t FDF        : 1;            /*!< [6..6] CAN FD Frame Format                                                */
            uint32_t            : 1;
      __IOM uint32_t GDFS       : 1;            /*!< [8..8] Gateway Data Frame Send                                            */
      __IOM uint32_t IDC        : 1;            /*!< [9..9] Identifier Copy                                                    */
      __IOM uint32_t DLCC       : 1;            /*!< [10..10] Data Length Code Copy                                            */
      __IOM uint32_t DATC       : 1;            /*!< [11..11] Data Copy                                                        */
            uint32_t            : 4;
      __IOM uint32_t RXIE       : 1;            /*!< [16..16] Receive Interrupt Enable                                         */
      __IOM uint32_t TXIE       : 1;            /*!< [17..17] Transmit Interrupt Enable                                        */
      __IOM uint32_t OVIE       : 1;            /*!< [18..18] Overflow Interrupt Enable                                        */
            uint32_t            : 1;
      __IOM uint32_t FRREN      : 1;            /*!< [20..20] Foreign Remote Request Enable                                    */
      __IOM uint32_t RMM        : 1;            /*!< [21..21] Transmit Object Remote Monitoring                                */
      __IOM uint32_t SDT        : 1;            /*!< [22..22] Single Data Transfer                                             */
      __IOM uint32_t STT        : 1;            /*!< [23..23] Single Transmit Trial                                            */
      __IOM uint32_t DLC        : 4;            /*!< [27..24] Data Length Code                                                 */
            uint32_t            : 4;
    } bit;
  } CAN_MOFCR28;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001284) Message Object 28 FIFO/Gateway Pointer Register            */
    
    struct {
      __IOM uint32_t BOT        : 8;            /*!< [7..0] Bottom Pointer                                                     */
      __IOM uint32_t TOP        : 8;            /*!< [15..8] Top Pointer                                                       */
      __IOM uint32_t CUR        : 8;            /*!< [23..16] Current Object Pointer                                           */
      __IOM uint32_t SEL        : 8;            /*!< [31..24] Object Select Pointer                                            */
    } bit;
  } CAN_MOFGPR28;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001288) Message Object 28 Interrupt Pointer Register               */
    
    struct {
      __IOM uint32_t RXINP      : 4;            /*!< [3..0] Receive Interrupt Node Pointer                                     */
      __IOM uint32_t TXINP      : 4;            /*!< [7..4] Transmit Interrupt Node Pointer                                    */
      __IOM uint32_t MPN        : 8;            /*!< [15..8] Message Pending Number                                            */
      __IOM uint32_t CFCVAL     : 16;           /*!< [31..16] CAN Frame Counter Value                                          */
    } bit;
  } CAN_MOIPR28;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000128C) Message Object 28 Acceptance Mask Register                 */
    
    struct {
      __IOM uint32_t AM         : 29;           /*!< [28..0] Acceptance Mask for Message Identifier                            */
      __IOM uint32_t MIDE       : 1;            /*!< [29..29] Acceptance Mask Bit for Message IDE Bit                          */
            uint32_t            : 2;
    } bit;
  } CAN_MOAMR28;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001290) Message Object 28 Data Register Low                        */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_MODATAL28;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001294) Message Object 28 Data Register High                       */
    
    struct {
      __IOM uint32_t DB4        : 8;            /*!< [7..0] Data Byte 4 of Message Object n                                    */
      __IOM uint32_t DB5        : 8;            /*!< [15..8] Data Byte 5 of Message Object n                                   */
      __IOM uint32_t DB6        : 8;            /*!< [23..16] Data Byte 6 of Message Object n                                  */
      __IOM uint32_t DB7        : 8;            /*!< [31..24] Data Byte 7 of Message Object n                                  */
    } bit;
  } CAN_MODATAH28;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00001298) Message Object 28 Arbitration Register                     */
    
    struct {
      __IOM uint32_t ID         : 29;           /*!< [28..0] CAN Identifier of Message Object n                                */
      __IOM uint32_t IDE        : 1;            /*!< [29..29] Identifier Extension Bit of Message Object n                     */
      __IOM uint32_t PRI        : 2;            /*!< [31..30] Priority Class                                                   */
    } bit;
  } CAN_MOAR28;
  
  union {
    union {
      __OM  uint32_t reg;                       /*!< (@ 0x0000129C) Message Object 28 Control Register                         */
      
      struct {
        __OM  uint32_t RESRXPND : 1;            /*!< [0..0] Reset Receive Pending                                              */
        __OM  uint32_t RESTXPND : 1;            /*!< [1..1] Reset Transmit Pending                                             */
        __OM  uint32_t RESRXUPD : 1;            /*!< [2..2] Reset Receive Updating                                             */
        __OM  uint32_t RESNEWDAT : 1;           /*!< [3..3] Reset New Data                                                     */
        __OM  uint32_t RESMSGLST : 1;           /*!< [4..4] Reset Message Lost                                                 */
        __OM  uint32_t RESMSGVAL : 1;           /*!< [5..5] Reset Message Valid                                                */
        __OM  uint32_t RESRTSEL : 1;            /*!< [6..6] Reset Receive/Transmit Selected                                    */
        __OM  uint32_t RESRXEN  : 1;            /*!< [7..7] Reset Receive Enable                                               */
        __OM  uint32_t RESTXRQ  : 1;            /*!< [8..8] Reset Transmit Request                                             */
        __OM  uint32_t RESTXEN0 : 1;            /*!< [9..9] Reset Transmit Enable 0                                            */
        __OM  uint32_t RESTXEN1 : 1;            /*!< [10..10] Reset Transmit Enable 1                                          */
        __OM  uint32_t RESDIR_SETDIR : 1;       /*!< [11..11] Reset Message Direction                                          */
              uint32_t          : 4;
        __OM  uint32_t SETRXPND : 1;            /*!< [16..16] Set Receive Pending                                              */
        __OM  uint32_t SETTXPND : 1;            /*!< [17..17] Set Transmit Pending                                             */
        __OM  uint32_t SETRXUPD : 1;            /*!< [18..18] Set Receive Updating                                             */
        __OM  uint32_t SETNEWDAT : 1;           /*!< [19..19] Set New Data                                                     */
        __OM  uint32_t SETMSGLST : 1;           /*!< [20..20] Set Message Lost                                                 */
        __OM  uint32_t SETMSGVAL : 1;           /*!< [21..21] Set Message Valid                                                */
        __OM  uint32_t SETRTSEL : 1;            /*!< [22..22] Set Receive/Transmit Selected                                    */
        __OM  uint32_t SETRXEN  : 1;            /*!< [23..23] Set Receive Enable                                               */
        __OM  uint32_t SETTXRQ  : 1;            /*!< [24..24] Set Transmit Request                                             */
        __OM  uint32_t SETTXEN0 : 1;            /*!< [25..25] Set Transmit Enable 0                                            */
        __OM  uint32_t SETTXEN1 : 1;            /*!< [26..26] Set Transmit Enable 1                                            */
        __OM  uint32_t SETDIR   : 1;            /*!< [27..27] Set Message Direction                                            */
              uint32_t          : 4;
      } bit;
    } CAN_MOCTR28;
    
    union {
      __IM  uint32_t reg;                       /*!< (@ 0x0000129C) Message Object 28 Status Register                          */
      
      struct {
        __IM  uint32_t RXPND    : 1;            /*!< [0..0] Receive Pending                                                    */
        __IM  uint32_t TXPND    : 1;            /*!< [1..1] Transmit Pending                                                   */
        __IM  uint32_t RXUPD    : 1;            /*!< [2..2] Receive Updating                                                   */
        __IM  uint32_t NEWDAT   : 1;            /*!< [3..3] New Data                                                           */
        __IM  uint32_t MSGLST   : 1;            /*!< [4..4] Message Lost                                                       */
        __IM  uint32_t MSGVAL   : 1;            /*!< [5..5] Message Valid                                                      */
        __IM  uint32_t RTSEL    : 1;            /*!< [6..6] Receive/Transmit Selected                                          */
        __IM  uint32_t RXEN     : 1;            /*!< [7..7] Receive Enable                                                     */
        __IM  uint32_t TXRQ     : 1;            /*!< [8..8] Transmit Request                                                   */
        __IM  uint32_t TXEN0    : 1;            /*!< [9..9] Transmit Enable 0                                                  */
        __IM  uint32_t TXEN1    : 1;            /*!< [10..10] Transmit Enable 1                                                */
        __IM  uint32_t DIR      : 1;            /*!< [11..11] Message Direction                                                */
        __IM  uint32_t LIST     : 4;            /*!< [15..12] List Allocation                                                  */
        __IM  uint32_t PPREV    : 8;            /*!< [23..16] Pointer to Previous Message Object                               */
        __IM  uint32_t PNEXT    : 8;            /*!< [31..24] Pointer to Next Message Object                                   */
      } bit;
    } CAN_MOSTAT28;
  } OBJ28;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000012A0) Message Object 29 Function Control Register                */
    
    struct {
      __IOM uint32_t MMC        : 4;            /*!< [3..0] Message Mode Control                                               */
            uint32_t            : 1;
      __IOM uint32_t BRS        : 1;            /*!< [5..5] Bit Rate Switch                                                    */
      __IOM uint32_t FDF        : 1;            /*!< [6..6] CAN FD Frame Format                                                */
            uint32_t            : 1;
      __IOM uint32_t GDFS       : 1;            /*!< [8..8] Gateway Data Frame Send                                            */
      __IOM uint32_t IDC        : 1;            /*!< [9..9] Identifier Copy                                                    */
      __IOM uint32_t DLCC       : 1;            /*!< [10..10] Data Length Code Copy                                            */
      __IOM uint32_t DATC       : 1;            /*!< [11..11] Data Copy                                                        */
            uint32_t            : 4;
      __IOM uint32_t RXIE       : 1;            /*!< [16..16] Receive Interrupt Enable                                         */
      __IOM uint32_t TXIE       : 1;            /*!< [17..17] Transmit Interrupt Enable                                        */
      __IOM uint32_t OVIE       : 1;            /*!< [18..18] Overflow Interrupt Enable                                        */
            uint32_t            : 1;
      __IOM uint32_t FRREN      : 1;            /*!< [20..20] Foreign Remote Request Enable                                    */
      __IOM uint32_t RMM        : 1;            /*!< [21..21] Transmit Object Remote Monitoring                                */
      __IOM uint32_t SDT        : 1;            /*!< [22..22] Single Data Transfer                                             */
      __IOM uint32_t STT        : 1;            /*!< [23..23] Single Transmit Trial                                            */
      __IOM uint32_t DLC        : 4;            /*!< [27..24] Data Length Code                                                 */
            uint32_t            : 4;
    } bit;
  } CAN_MOFCR29;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000012A4) Message Object 29 FIFO/Gateway Pointer Register            */
    
    struct {
      __IOM uint32_t BOT        : 8;            /*!< [7..0] Bottom Pointer                                                     */
      __IOM uint32_t TOP        : 8;            /*!< [15..8] Top Pointer                                                       */
      __IOM uint32_t CUR        : 8;            /*!< [23..16] Current Object Pointer                                           */
      __IOM uint32_t SEL        : 8;            /*!< [31..24] Object Select Pointer                                            */
    } bit;
  } CAN_MOFGPR29;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000012A8) Message Object 29 Interrupt Pointer Register               */
    
    struct {
      __IOM uint32_t RXINP      : 4;            /*!< [3..0] Receive Interrupt Node Pointer                                     */
      __IOM uint32_t TXINP      : 4;            /*!< [7..4] Transmit Interrupt Node Pointer                                    */
      __IOM uint32_t MPN        : 8;            /*!< [15..8] Message Pending Number                                            */
      __IOM uint32_t CFCVAL     : 16;           /*!< [31..16] CAN Frame Counter Value                                          */
    } bit;
  } CAN_MOIPR29;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000012AC) Message Object 29 Acceptance Mask Register                 */
    
    struct {
      __IOM uint32_t AM         : 29;           /*!< [28..0] Acceptance Mask for Message Identifier                            */
      __IOM uint32_t MIDE       : 1;            /*!< [29..29] Acceptance Mask Bit for Message IDE Bit                          */
            uint32_t            : 2;
    } bit;
  } CAN_MOAMR29;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000012B0) Message Object 29 Data Register Low                        */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_MODATAL29;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000012B4) Message Object 29 Data Register High                       */
    
    struct {
      __IOM uint32_t DB4        : 8;            /*!< [7..0] Data Byte 4 of Message Object n                                    */
      __IOM uint32_t DB5        : 8;            /*!< [15..8] Data Byte 5 of Message Object n                                   */
      __IOM uint32_t DB6        : 8;            /*!< [23..16] Data Byte 6 of Message Object n                                  */
      __IOM uint32_t DB7        : 8;            /*!< [31..24] Data Byte 7 of Message Object n                                  */
    } bit;
  } CAN_MODATAH29;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000012B8) Message Object 29 Arbitration Register                     */
    
    struct {
      __IOM uint32_t ID         : 29;           /*!< [28..0] CAN Identifier of Message Object n                                */
      __IOM uint32_t IDE        : 1;            /*!< [29..29] Identifier Extension Bit of Message Object n                     */
      __IOM uint32_t PRI        : 2;            /*!< [31..30] Priority Class                                                   */
    } bit;
  } CAN_MOAR29;
  
  union {
    union {
      __OM  uint32_t reg;                       /*!< (@ 0x000012BC) Message Object 29 Control Register                         */
      
      struct {
        __OM  uint32_t RESRXPND : 1;            /*!< [0..0] Reset Receive Pending                                              */
        __OM  uint32_t RESTXPND : 1;            /*!< [1..1] Reset Transmit Pending                                             */
        __OM  uint32_t RESRXUPD : 1;            /*!< [2..2] Reset Receive Updating                                             */
        __OM  uint32_t RESNEWDAT : 1;           /*!< [3..3] Reset New Data                                                     */
        __OM  uint32_t RESMSGLST : 1;           /*!< [4..4] Reset Message Lost                                                 */
        __OM  uint32_t RESMSGVAL : 1;           /*!< [5..5] Reset Message Valid                                                */
        __OM  uint32_t RESRTSEL : 1;            /*!< [6..6] Reset Receive/Transmit Selected                                    */
        __OM  uint32_t RESRXEN  : 1;            /*!< [7..7] Reset Receive Enable                                               */
        __OM  uint32_t RESTXRQ  : 1;            /*!< [8..8] Reset Transmit Request                                             */
        __OM  uint32_t RESTXEN0 : 1;            /*!< [9..9] Reset Transmit Enable 0                                            */
        __OM  uint32_t RESTXEN1 : 1;            /*!< [10..10] Reset Transmit Enable 1                                          */
        __OM  uint32_t RESDIR_SETDIR : 1;       /*!< [11..11] Reset Message Direction                                          */
              uint32_t          : 4;
        __OM  uint32_t SETRXPND : 1;            /*!< [16..16] Set Receive Pending                                              */
        __OM  uint32_t SETTXPND : 1;            /*!< [17..17] Set Transmit Pending                                             */
        __OM  uint32_t SETRXUPD : 1;            /*!< [18..18] Set Receive Updating                                             */
        __OM  uint32_t SETNEWDAT : 1;           /*!< [19..19] Set New Data                                                     */
        __OM  uint32_t SETMSGLST : 1;           /*!< [20..20] Set Message Lost                                                 */
        __OM  uint32_t SETMSGVAL : 1;           /*!< [21..21] Set Message Valid                                                */
        __OM  uint32_t SETRTSEL : 1;            /*!< [22..22] Set Receive/Transmit Selected                                    */
        __OM  uint32_t SETRXEN  : 1;            /*!< [23..23] Set Receive Enable                                               */
        __OM  uint32_t SETTXRQ  : 1;            /*!< [24..24] Set Transmit Request                                             */
        __OM  uint32_t SETTXEN0 : 1;            /*!< [25..25] Set Transmit Enable 0                                            */
        __OM  uint32_t SETTXEN1 : 1;            /*!< [26..26] Set Transmit Enable 1                                            */
        __OM  uint32_t SETDIR   : 1;            /*!< [27..27] Set Message Direction                                            */
              uint32_t          : 4;
      } bit;
    } CAN_MOCTR29;
    
    union {
      __IM  uint32_t reg;                       /*!< (@ 0x000012BC) Message Object 29 Status Register                          */
      
      struct {
        __IM  uint32_t RXPND    : 1;            /*!< [0..0] Receive Pending                                                    */
        __IM  uint32_t TXPND    : 1;            /*!< [1..1] Transmit Pending                                                   */
        __IM  uint32_t RXUPD    : 1;            /*!< [2..2] Receive Updating                                                   */
        __IM  uint32_t NEWDAT   : 1;            /*!< [3..3] New Data                                                           */
        __IM  uint32_t MSGLST   : 1;            /*!< [4..4] Message Lost                                                       */
        __IM  uint32_t MSGVAL   : 1;            /*!< [5..5] Message Valid                                                      */
        __IM  uint32_t RTSEL    : 1;            /*!< [6..6] Receive/Transmit Selected                                          */
        __IM  uint32_t RXEN     : 1;            /*!< [7..7] Receive Enable                                                     */
        __IM  uint32_t TXRQ     : 1;            /*!< [8..8] Transmit Request                                                   */
        __IM  uint32_t TXEN0    : 1;            /*!< [9..9] Transmit Enable 0                                                  */
        __IM  uint32_t TXEN1    : 1;            /*!< [10..10] Transmit Enable 1                                                */
        __IM  uint32_t DIR      : 1;            /*!< [11..11] Message Direction                                                */
        __IM  uint32_t LIST     : 4;            /*!< [15..12] List Allocation                                                  */
        __IM  uint32_t PPREV    : 8;            /*!< [23..16] Pointer to Previous Message Object                               */
        __IM  uint32_t PNEXT    : 8;            /*!< [31..24] Pointer to Next Message Object                                   */
      } bit;
    } CAN_MOSTAT29;
  } OBJ29;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000012C0) Message Object 30 Function Control Register                */
    
    struct {
      __IOM uint32_t MMC        : 4;            /*!< [3..0] Message Mode Control                                               */
            uint32_t            : 1;
      __IOM uint32_t BRS        : 1;            /*!< [5..5] Bit Rate Switch                                                    */
      __IOM uint32_t FDF        : 1;            /*!< [6..6] CAN FD Frame Format                                                */
            uint32_t            : 1;
      __IOM uint32_t GDFS       : 1;            /*!< [8..8] Gateway Data Frame Send                                            */
      __IOM uint32_t IDC        : 1;            /*!< [9..9] Identifier Copy                                                    */
      __IOM uint32_t DLCC       : 1;            /*!< [10..10] Data Length Code Copy                                            */
      __IOM uint32_t DATC       : 1;            /*!< [11..11] Data Copy                                                        */
            uint32_t            : 4;
      __IOM uint32_t RXIE       : 1;            /*!< [16..16] Receive Interrupt Enable                                         */
      __IOM uint32_t TXIE       : 1;            /*!< [17..17] Transmit Interrupt Enable                                        */
      __IOM uint32_t OVIE       : 1;            /*!< [18..18] Overflow Interrupt Enable                                        */
            uint32_t            : 1;
      __IOM uint32_t FRREN      : 1;            /*!< [20..20] Foreign Remote Request Enable                                    */
      __IOM uint32_t RMM        : 1;            /*!< [21..21] Transmit Object Remote Monitoring                                */
      __IOM uint32_t SDT        : 1;            /*!< [22..22] Single Data Transfer                                             */
      __IOM uint32_t STT        : 1;            /*!< [23..23] Single Transmit Trial                                            */
      __IOM uint32_t DLC        : 4;            /*!< [27..24] Data Length Code                                                 */
            uint32_t            : 4;
    } bit;
  } CAN_MOFCR30;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000012C4) Message Object 30 FIFO/Gateway Pointer Register            */
    
    struct {
      __IOM uint32_t BOT        : 8;            /*!< [7..0] Bottom Pointer                                                     */
      __IOM uint32_t TOP        : 8;            /*!< [15..8] Top Pointer                                                       */
      __IOM uint32_t CUR        : 8;            /*!< [23..16] Current Object Pointer                                           */
      __IOM uint32_t SEL        : 8;            /*!< [31..24] Object Select Pointer                                            */
    } bit;
  } CAN_MOFGPR30;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000012C8) Message Object 30 Interrupt Pointer Register               */
    
    struct {
      __IOM uint32_t RXINP      : 4;            /*!< [3..0] Receive Interrupt Node Pointer                                     */
      __IOM uint32_t TXINP      : 4;            /*!< [7..4] Transmit Interrupt Node Pointer                                    */
      __IOM uint32_t MPN        : 8;            /*!< [15..8] Message Pending Number                                            */
      __IOM uint32_t CFCVAL     : 16;           /*!< [31..16] CAN Frame Counter Value                                          */
    } bit;
  } CAN_MOIPR30;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000012CC) Message Object 30 Acceptance Mask Register                 */
    
    struct {
      __IOM uint32_t AM         : 29;           /*!< [28..0] Acceptance Mask for Message Identifier                            */
      __IOM uint32_t MIDE       : 1;            /*!< [29..29] Acceptance Mask Bit for Message IDE Bit                          */
            uint32_t            : 2;
    } bit;
  } CAN_MOAMR30;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000012D0) Message Object 30 Data Register Low                        */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_MODATAL30;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000012D4) Message Object 30 Data Register High                       */
    
    struct {
      __IOM uint32_t DB4        : 8;            /*!< [7..0] Data Byte 4 of Message Object n                                    */
      __IOM uint32_t DB5        : 8;            /*!< [15..8] Data Byte 5 of Message Object n                                   */
      __IOM uint32_t DB6        : 8;            /*!< [23..16] Data Byte 6 of Message Object n                                  */
      __IOM uint32_t DB7        : 8;            /*!< [31..24] Data Byte 7 of Message Object n                                  */
    } bit;
  } CAN_MODATAH30;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000012D8) Message Object 30 Arbitration Register                     */
    
    struct {
      __IOM uint32_t ID         : 29;           /*!< [28..0] CAN Identifier of Message Object n                                */
      __IOM uint32_t IDE        : 1;            /*!< [29..29] Identifier Extension Bit of Message Object n                     */
      __IOM uint32_t PRI        : 2;            /*!< [31..30] Priority Class                                                   */
    } bit;
  } CAN_MOAR30;
  
  union {
    union {
      __OM  uint32_t reg;                       /*!< (@ 0x000012DC) Message Object 30 Control Register                         */
      
      struct {
        __OM  uint32_t RESRXPND : 1;            /*!< [0..0] Reset Receive Pending                                              */
        __OM  uint32_t RESTXPND : 1;            /*!< [1..1] Reset Transmit Pending                                             */
        __OM  uint32_t RESRXUPD : 1;            /*!< [2..2] Reset Receive Updating                                             */
        __OM  uint32_t RESNEWDAT : 1;           /*!< [3..3] Reset New Data                                                     */
        __OM  uint32_t RESMSGLST : 1;           /*!< [4..4] Reset Message Lost                                                 */
        __OM  uint32_t RESMSGVAL : 1;           /*!< [5..5] Reset Message Valid                                                */
        __OM  uint32_t RESRTSEL : 1;            /*!< [6..6] Reset Receive/Transmit Selected                                    */
        __OM  uint32_t RESRXEN  : 1;            /*!< [7..7] Reset Receive Enable                                               */
        __OM  uint32_t RESTXRQ  : 1;            /*!< [8..8] Reset Transmit Request                                             */
        __OM  uint32_t RESTXEN0 : 1;            /*!< [9..9] Reset Transmit Enable 0                                            */
        __OM  uint32_t RESTXEN1 : 1;            /*!< [10..10] Reset Transmit Enable 1                                          */
        __OM  uint32_t RESDIR_SETDIR : 1;       /*!< [11..11] Reset Message Direction                                          */
              uint32_t          : 4;
        __OM  uint32_t SETRXPND : 1;            /*!< [16..16] Set Receive Pending                                              */
        __OM  uint32_t SETTXPND : 1;            /*!< [17..17] Set Transmit Pending                                             */
        __OM  uint32_t SETRXUPD : 1;            /*!< [18..18] Set Receive Updating                                             */
        __OM  uint32_t SETNEWDAT : 1;           /*!< [19..19] Set New Data                                                     */
        __OM  uint32_t SETMSGLST : 1;           /*!< [20..20] Set Message Lost                                                 */
        __OM  uint32_t SETMSGVAL : 1;           /*!< [21..21] Set Message Valid                                                */
        __OM  uint32_t SETRTSEL : 1;            /*!< [22..22] Set Receive/Transmit Selected                                    */
        __OM  uint32_t SETRXEN  : 1;            /*!< [23..23] Set Receive Enable                                               */
        __OM  uint32_t SETTXRQ  : 1;            /*!< [24..24] Set Transmit Request                                             */
        __OM  uint32_t SETTXEN0 : 1;            /*!< [25..25] Set Transmit Enable 0                                            */
        __OM  uint32_t SETTXEN1 : 1;            /*!< [26..26] Set Transmit Enable 1                                            */
        __OM  uint32_t SETDIR   : 1;            /*!< [27..27] Set Message Direction                                            */
              uint32_t          : 4;
      } bit;
    } CAN_MOCTR30;
    
    union {
      __IM  uint32_t reg;                       /*!< (@ 0x000012DC) Message Object 30 Status Register                          */
      
      struct {
        __IM  uint32_t RXPND    : 1;            /*!< [0..0] Receive Pending                                                    */
        __IM  uint32_t TXPND    : 1;            /*!< [1..1] Transmit Pending                                                   */
        __IM  uint32_t RXUPD    : 1;            /*!< [2..2] Receive Updating                                                   */
        __IM  uint32_t NEWDAT   : 1;            /*!< [3..3] New Data                                                           */
        __IM  uint32_t MSGLST   : 1;            /*!< [4..4] Message Lost                                                       */
        __IM  uint32_t MSGVAL   : 1;            /*!< [5..5] Message Valid                                                      */
        __IM  uint32_t RTSEL    : 1;            /*!< [6..6] Receive/Transmit Selected                                          */
        __IM  uint32_t RXEN     : 1;            /*!< [7..7] Receive Enable                                                     */
        __IM  uint32_t TXRQ     : 1;            /*!< [8..8] Transmit Request                                                   */
        __IM  uint32_t TXEN0    : 1;            /*!< [9..9] Transmit Enable 0                                                  */
        __IM  uint32_t TXEN1    : 1;            /*!< [10..10] Transmit Enable 1                                                */
        __IM  uint32_t DIR      : 1;            /*!< [11..11] Message Direction                                                */
        __IM  uint32_t LIST     : 4;            /*!< [15..12] List Allocation                                                  */
        __IM  uint32_t PPREV    : 8;            /*!< [23..16] Pointer to Previous Message Object                               */
        __IM  uint32_t PNEXT    : 8;            /*!< [31..24] Pointer to Next Message Object                                   */
      } bit;
    } CAN_MOSTAT30;
  } OBJ30;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000012E0) Message Object 31 Function Control Register                */
    
    struct {
      __IOM uint32_t MMC        : 4;            /*!< [3..0] Message Mode Control                                               */
            uint32_t            : 1;
      __IOM uint32_t BRS        : 1;            /*!< [5..5] Bit Rate Switch                                                    */
      __IOM uint32_t FDF        : 1;            /*!< [6..6] CAN FD Frame Format                                                */
            uint32_t            : 1;
      __IOM uint32_t GDFS       : 1;            /*!< [8..8] Gateway Data Frame Send                                            */
      __IOM uint32_t IDC        : 1;            /*!< [9..9] Identifier Copy                                                    */
      __IOM uint32_t DLCC       : 1;            /*!< [10..10] Data Length Code Copy                                            */
      __IOM uint32_t DATC       : 1;            /*!< [11..11] Data Copy                                                        */
            uint32_t            : 4;
      __IOM uint32_t RXIE       : 1;            /*!< [16..16] Receive Interrupt Enable                                         */
      __IOM uint32_t TXIE       : 1;            /*!< [17..17] Transmit Interrupt Enable                                        */
      __IOM uint32_t OVIE       : 1;            /*!< [18..18] Overflow Interrupt Enable                                        */
            uint32_t            : 1;
      __IOM uint32_t FRREN      : 1;            /*!< [20..20] Foreign Remote Request Enable                                    */
      __IOM uint32_t RMM        : 1;            /*!< [21..21] Transmit Object Remote Monitoring                                */
      __IOM uint32_t SDT        : 1;            /*!< [22..22] Single Data Transfer                                             */
      __IOM uint32_t STT        : 1;            /*!< [23..23] Single Transmit Trial                                            */
      __IOM uint32_t DLC        : 4;            /*!< [27..24] Data Length Code                                                 */
            uint32_t            : 4;
    } bit;
  } CAN_MOFCR31;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000012E4) Message Object 31 FIFO/Gateway Pointer Register            */
    
    struct {
      __IOM uint32_t BOT        : 8;            /*!< [7..0] Bottom Pointer                                                     */
      __IOM uint32_t TOP        : 8;            /*!< [15..8] Top Pointer                                                       */
      __IOM uint32_t CUR        : 8;            /*!< [23..16] Current Object Pointer                                           */
      __IOM uint32_t SEL        : 8;            /*!< [31..24] Object Select Pointer                                            */
    } bit;
  } CAN_MOFGPR31;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000012E8) Message Object 31 Interrupt Pointer Register               */
    
    struct {
      __IOM uint32_t RXINP      : 4;            /*!< [3..0] Receive Interrupt Node Pointer                                     */
      __IOM uint32_t TXINP      : 4;            /*!< [7..4] Transmit Interrupt Node Pointer                                    */
      __IOM uint32_t MPN        : 8;            /*!< [15..8] Message Pending Number                                            */
      __IOM uint32_t CFCVAL     : 16;           /*!< [31..16] CAN Frame Counter Value                                          */
    } bit;
  } CAN_MOIPR31;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000012EC) Message Object 31 Acceptance Mask Register                 */
    
    struct {
      __IOM uint32_t AM         : 29;           /*!< [28..0] Acceptance Mask for Message Identifier                            */
      __IOM uint32_t MIDE       : 1;            /*!< [29..29] Acceptance Mask Bit for Message IDE Bit                          */
            uint32_t            : 2;
    } bit;
  } CAN_MOAMR31;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000012F0) Message Object 31 Data Register Low                        */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_MODATAL31;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000012F4) Message Object 31 Data Register High                       */
    
    struct {
      __IOM uint32_t DB4        : 8;            /*!< [7..0] Data Byte 4 of Message Object n                                    */
      __IOM uint32_t DB5        : 8;            /*!< [15..8] Data Byte 5 of Message Object n                                   */
      __IOM uint32_t DB6        : 8;            /*!< [23..16] Data Byte 6 of Message Object n                                  */
      __IOM uint32_t DB7        : 8;            /*!< [31..24] Data Byte 7 of Message Object n                                  */
    } bit;
  } CAN_MODATAH31;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000012F8) Message Object 31 Arbitration Register                     */
    
    struct {
      __IOM uint32_t ID         : 29;           /*!< [28..0] CAN Identifier of Message Object n                                */
      __IOM uint32_t IDE        : 1;            /*!< [29..29] Identifier Extension Bit of Message Object n                     */
      __IOM uint32_t PRI        : 2;            /*!< [31..30] Priority Class                                                   */
    } bit;
  } CAN_MOAR31;
  
  union {
    union {
      __OM  uint32_t reg;                       /*!< (@ 0x000012FC) Message Object 31 Control Register                         */
      
      struct {
        __OM  uint32_t RESRXPND : 1;            /*!< [0..0] Reset Receive Pending                                              */
        __OM  uint32_t RESTXPND : 1;            /*!< [1..1] Reset Transmit Pending                                             */
        __OM  uint32_t RESRXUPD : 1;            /*!< [2..2] Reset Receive Updating                                             */
        __OM  uint32_t RESNEWDAT : 1;           /*!< [3..3] Reset New Data                                                     */
        __OM  uint32_t RESMSGLST : 1;           /*!< [4..4] Reset Message Lost                                                 */
        __OM  uint32_t RESMSGVAL : 1;           /*!< [5..5] Reset Message Valid                                                */
        __OM  uint32_t RESRTSEL : 1;            /*!< [6..6] Reset Receive/Transmit Selected                                    */
        __OM  uint32_t RESRXEN  : 1;            /*!< [7..7] Reset Receive Enable                                               */
        __OM  uint32_t RESTXRQ  : 1;            /*!< [8..8] Reset Transmit Request                                             */
        __OM  uint32_t RESTXEN0 : 1;            /*!< [9..9] Reset Transmit Enable 0                                            */
        __OM  uint32_t RESTXEN1 : 1;            /*!< [10..10] Reset Transmit Enable 1                                          */
        __OM  uint32_t RESDIR_SETDIR : 1;       /*!< [11..11] Reset Message Direction                                          */
              uint32_t          : 4;
        __OM  uint32_t SETRXPND : 1;            /*!< [16..16] Set Receive Pending                                              */
        __OM  uint32_t SETTXPND : 1;            /*!< [17..17] Set Transmit Pending                                             */
        __OM  uint32_t SETRXUPD : 1;            /*!< [18..18] Set Receive Updating                                             */
        __OM  uint32_t SETNEWDAT : 1;           /*!< [19..19] Set New Data                                                     */
        __OM  uint32_t SETMSGLST : 1;           /*!< [20..20] Set Message Lost                                                 */
        __OM  uint32_t SETMSGVAL : 1;           /*!< [21..21] Set Message Valid                                                */
        __OM  uint32_t SETRTSEL : 1;            /*!< [22..22] Set Receive/Transmit Selected                                    */
        __OM  uint32_t SETRXEN  : 1;            /*!< [23..23] Set Receive Enable                                               */
        __OM  uint32_t SETTXRQ  : 1;            /*!< [24..24] Set Transmit Request                                             */
        __OM  uint32_t SETTXEN0 : 1;            /*!< [25..25] Set Transmit Enable 0                                            */
        __OM  uint32_t SETTXEN1 : 1;            /*!< [26..26] Set Transmit Enable 1                                            */
        __OM  uint32_t SETDIR   : 1;            /*!< [27..27] Set Message Direction                                            */
              uint32_t          : 4;
      } bit;
    } CAN_MOCTR31;
    
    union {
      __IM  uint32_t reg;                       /*!< (@ 0x000012FC) Message Object 31 Status Register                          */
      
      struct {
        __IM  uint32_t RXPND    : 1;            /*!< [0..0] Receive Pending                                                    */
        __IM  uint32_t TXPND    : 1;            /*!< [1..1] Transmit Pending                                                   */
        __IM  uint32_t RXUPD    : 1;            /*!< [2..2] Receive Updating                                                   */
        __IM  uint32_t NEWDAT   : 1;            /*!< [3..3] New Data                                                           */
        __IM  uint32_t MSGLST   : 1;            /*!< [4..4] Message Lost                                                       */
        __IM  uint32_t MSGVAL   : 1;            /*!< [5..5] Message Valid                                                      */
        __IM  uint32_t RTSEL    : 1;            /*!< [6..6] Receive/Transmit Selected                                          */
        __IM  uint32_t RXEN     : 1;            /*!< [7..7] Receive Enable                                                     */
        __IM  uint32_t TXRQ     : 1;            /*!< [8..8] Transmit Request                                                   */
        __IM  uint32_t TXEN0    : 1;            /*!< [9..9] Transmit Enable 0                                                  */
        __IM  uint32_t TXEN1    : 1;            /*!< [10..10] Transmit Enable 1                                                */
        __IM  uint32_t DIR      : 1;            /*!< [11..11] Message Direction                                                */
        __IM  uint32_t LIST     : 4;            /*!< [15..12] List Allocation                                                  */
        __IM  uint32_t PPREV    : 8;            /*!< [23..16] Pointer to Previous Message Object                               */
        __IM  uint32_t PNEXT    : 8;            /*!< [31..24] Pointer to Next Message Object                                   */
      } bit;
    } CAN_MOSTAT31;
  } OBJ31;
} CANMSGOBJ0_Type;                              /*!< Size = 4864 (0x1300)                                                      */



/* =========================================================================================================================== */
/* ================                                        CANMSGOBJ1                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief CAN Message Object 1 (CANMSGOBJ1)
  */

typedef struct {                                /*!< (@ 0x48010400) CANMSGOBJ1 Structure                                       */
  __IM  uint32_t  RESERVED[768];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000C00) Extended Message Object 0 Data 0 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO0DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000C04) Extended Message Object 0 Data 1 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO0DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000C08) Extended Message Object 0 Data 2 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO0DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000C0C) Extended Message Object 0 Data 3 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO0DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000C10) Extended Message Object 0 Data 4 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO0DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000C14) Extended Message Object 0 Data 5 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO0DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000C18) Extended Message Object 0 Data 6 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO0DATA6;
  __IM  uint32_t  RESERVED1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000C20) Extended Message Object 1 Data 0 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO1DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000C24) Extended Message Object 1 Data 1 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO1DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000C28) Extended Message Object 1 Data 2 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO1DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000C2C) Extended Message Object 1 Data 3 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO1DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000C30) Extended Message Object 1 Data 4 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO1DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000C34) Extended Message Object 1 Data 5 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO1DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000C38) Extended Message Object 1 Data 6 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO1DATA6;
  __IM  uint32_t  RESERVED2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000C40) Extended Message Object 2 Data 0 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO2DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000C44) Extended Message Object 2 Data 1 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO2DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000C48) Extended Message Object 2 Data 2 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO2DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000C4C) Extended Message Object 2 Data 3 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO2DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000C50) Extended Message Object 2 Data 4 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO2DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000C54) Extended Message Object 2 Data 5 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO2DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000C58) Extended Message Object 2 Data 6 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO2DATA6;
  __IM  uint32_t  RESERVED3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000C60) Extended Message Object 3 Data 0 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO3DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000C64) Extended Message Object 3 Data 1 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO3DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000C68) Extended Message Object 3 Data 2 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO3DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000C6C) Extended Message Object 3 Data 3 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO3DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000C70) Extended Message Object 3 Data 4 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO3DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000C74) Extended Message Object 3 Data 5 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO3DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000C78) Extended Message Object 3 Data 6 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO3DATA6;
  __IM  uint32_t  RESERVED4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000C80) Extended Message Object 4 Data 0 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO4DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000C84) Extended Message Object 4 Data 1 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO4DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000C88) Extended Message Object 4 Data 2 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO4DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000C8C) Extended Message Object 4 Data 3 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO4DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000C90) Extended Message Object 4 Data 4 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO4DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000C94) Extended Message Object 4 Data 5 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO4DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000C98) Extended Message Object 4 Data 6 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO4DATA6;
  __IM  uint32_t  RESERVED5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000CA0) Extended Message Object 5 Data 0 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO5DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000CA4) Extended Message Object 5 Data 1 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO5DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000CA8) Extended Message Object 5 Data 2 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO5DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000CAC) Extended Message Object 5 Data 3 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO5DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000CB0) Extended Message Object 5 Data 4 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO5DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000CB4) Extended Message Object 5 Data 5 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO5DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000CB8) Extended Message Object 5 Data 6 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO5DATA6;
  __IM  uint32_t  RESERVED6;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000CC0) Extended Message Object 6 Data 0 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO6DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000CC4) Extended Message Object 6 Data 1 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO6DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000CC8) Extended Message Object 6 Data 2 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO6DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000CCC) Extended Message Object 6 Data 3 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO6DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000CD0) Extended Message Object 6 Data 4 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO6DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000CD4) Extended Message Object 6 Data 5 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO6DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000CD8) Extended Message Object 6 Data 6 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO6DATA6;
  __IM  uint32_t  RESERVED7;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000CE0) Extended Message Object 7 Data 0 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO7DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000CE4) Extended Message Object 7 Data 1 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO7DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000CE8) Extended Message Object 7 Data 2 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO7DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000CEC) Extended Message Object 7 Data 3 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO7DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000CF0) Extended Message Object 7 Data 4 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO7DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000CF4) Extended Message Object 7 Data 5 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO7DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000CF8) Extended Message Object 7 Data 6 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO7DATA6;
  __IM  uint32_t  RESERVED8;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000D00) Extended Message Object 8 Data 0 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO8DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000D04) Extended Message Object 8 Data 1 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO8DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000D08) Extended Message Object 8 Data 2 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO8DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000D0C) Extended Message Object 8 Data 3 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO8DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000D10) Extended Message Object 8 Data 4 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO8DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000D14) Extended Message Object 8 Data 5 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO8DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000D18) Extended Message Object 8 Data 6 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO8DATA6;
  __IM  uint32_t  RESERVED9;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000D20) Extended Message Object 9 Data 0 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO9DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000D24) Extended Message Object 9 Data 1 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO9DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000D28) Extended Message Object 9 Data 2 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO9DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000D2C) Extended Message Object 9 Data 3 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO9DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000D30) Extended Message Object 9 Data 4 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO9DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000D34) Extended Message Object 9 Data 5 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO9DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000D38) Extended Message Object 9 Data 6 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO9DATA6;
  __IM  uint32_t  RESERVED10;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000D40) Extended Message Object 10 Data 0 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO10DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000D44) Extended Message Object 10 Data 1 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO10DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000D48) Extended Message Object 10 Data 2 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO10DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000D4C) Extended Message Object 10 Data 3 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO10DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000D50) Extended Message Object 10 Data 4 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO10DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000D54) Extended Message Object 10 Data 5 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO10DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000D58) Extended Message Object 10 Data 6 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO10DATA6;
  __IM  uint32_t  RESERVED11;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000D60) Extended Message Object 11 Data 0 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO11DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000D64) Extended Message Object 11 Data 1 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO11DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000D68) Extended Message Object 11 Data 2 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO11DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000D6C) Extended Message Object 11 Data 3 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO11DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000D70) Extended Message Object 11 Data 4 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO11DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000D74) Extended Message Object 11 Data 5 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO11DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000D78) Extended Message Object 11 Data 6 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO11DATA6;
  __IM  uint32_t  RESERVED12;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000D80) Extended Message Object 12 Data 0 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO12DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000D84) Extended Message Object 12 Data 1 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO12DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000D88) Extended Message Object 12 Data 2 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO12DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000D8C) Extended Message Object 12 Data 3 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO12DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000D90) Extended Message Object 12 Data 4 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO12DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000D94) Extended Message Object 12 Data 5 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO12DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000D98) Extended Message Object 12 Data 6 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO12DATA6;
  __IM  uint32_t  RESERVED13;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000DA0) Extended Message Object 13 Data 0 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO13DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000DA4) Extended Message Object 13 Data 1 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO13DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000DA8) Extended Message Object 13 Data 2 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO13DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000DAC) Extended Message Object 13 Data 3 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO13DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000DB0) Extended Message Object 13 Data 4 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO13DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000DB4) Extended Message Object 13 Data 5 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO13DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000DB8) Extended Message Object 13 Data 6 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO13DATA6;
  __IM  uint32_t  RESERVED14;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000DC0) Extended Message Object 14 Data 0 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO14DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000DC4) Extended Message Object 14 Data 1 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO14DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000DC8) Extended Message Object 14 Data 2 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO14DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000DCC) Extended Message Object 14 Data 3 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO14DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000DD0) Extended Message Object 14 Data 4 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO14DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000DD4) Extended Message Object 14 Data 5 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO14DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000DD8) Extended Message Object 14 Data 6 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO14DATA6;
  __IM  uint32_t  RESERVED15;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000DE0) Extended Message Object 15 Data 0 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO15DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000DE4) Extended Message Object 15 Data 1 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO15DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000DE8) Extended Message Object 15 Data 2 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO15DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000DEC) Extended Message Object 15 Data 3 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO15DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000DF0) Extended Message Object 15 Data 4 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO15DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000DF4) Extended Message Object 15 Data 5 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO15DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000DF8) Extended Message Object 15 Data 6 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO15DATA6;
  __IM  uint32_t  RESERVED16;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000E00) Extended Message Object 16 Data 0 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO16DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000E04) Extended Message Object 16 Data 1 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO16DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000E08) Extended Message Object 16 Data 2 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO16DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000E0C) Extended Message Object 16 Data 3 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO16DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000E10) Extended Message Object 16 Data 4 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO16DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000E14) Extended Message Object 16 Data 5 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO16DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000E18) Extended Message Object 16 Data 6 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO16DATA6;
  __IM  uint32_t  RESERVED17;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000E20) Extended Message Object 17 Data 0 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO17DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000E24) Extended Message Object 17 Data 1 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO17DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000E28) Extended Message Object 17 Data 2 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO17DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000E2C) Extended Message Object 17 Data 3 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO17DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000E30) Extended Message Object 17 Data 4 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO17DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000E34) Extended Message Object 17 Data 5 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO17DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000E38) Extended Message Object 17 Data 6 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO17DATA6;
  __IM  uint32_t  RESERVED18;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000E40) Extended Message Object 18 Data 0 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO18DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000E44) Extended Message Object 18 Data 1 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO18DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000E48) Extended Message Object 18 Data 2 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO18DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000E4C) Extended Message Object 18 Data 3 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO18DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000E50) Extended Message Object 18 Data 4 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO18DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000E54) Extended Message Object 18 Data 5 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO18DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000E58) Extended Message Object 18 Data 6 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO18DATA6;
  __IM  uint32_t  RESERVED19;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000E60) Extended Message Object 19 Data 0 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO19DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000E64) Extended Message Object 19 Data 1 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO19DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000E68) Extended Message Object 19 Data 2 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO19DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000E6C) Extended Message Object 19 Data 3 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO19DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000E70) Extended Message Object 19 Data 4 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO19DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000E74) Extended Message Object 19 Data 5 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO19DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000E78) Extended Message Object 19 Data 6 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO19DATA6;
  __IM  uint32_t  RESERVED20;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000E80) Extended Message Object 20 Data 0 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO20DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000E84) Extended Message Object 20 Data 1 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO20DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000E88) Extended Message Object 20 Data 2 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO20DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000E8C) Extended Message Object 20 Data 3 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO20DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000E90) Extended Message Object 20 Data 4 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO20DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000E94) Extended Message Object 20 Data 5 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO20DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000E98) Extended Message Object 20 Data 6 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO20DATA6;
  __IM  uint32_t  RESERVED21;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000EA0) Extended Message Object 21 Data 0 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO21DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000EA4) Extended Message Object 21 Data 1 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO21DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000EA8) Extended Message Object 21 Data 2 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO21DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000EAC) Extended Message Object 21 Data 3 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO21DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000EB0) Extended Message Object 21 Data 4 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO21DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000EB4) Extended Message Object 21 Data 5 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO21DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000EB8) Extended Message Object 21 Data 6 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO21DATA6;
  __IM  uint32_t  RESERVED22;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000EC0) Extended Message Object 22 Data 0 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO22DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000EC4) Extended Message Object 22 Data 1 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO22DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000EC8) Extended Message Object 22 Data 2 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO22DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000ECC) Extended Message Object 22 Data 3 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO22DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000ED0) Extended Message Object 22 Data 4 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO22DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000ED4) Extended Message Object 22 Data 5 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO22DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000ED8) Extended Message Object 22 Data 6 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO22DATA6;
  __IM  uint32_t  RESERVED23;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000EE0) Extended Message Object 23 Data 0 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO23DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000EE4) Extended Message Object 23 Data 1 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO23DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000EE8) Extended Message Object 23 Data 2 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO23DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000EEC) Extended Message Object 23 Data 3 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO23DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000EF0) Extended Message Object 23 Data 4 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO23DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000EF4) Extended Message Object 23 Data 5 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO23DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000EF8) Extended Message Object 23 Data 6 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO23DATA6;
  __IM  uint32_t  RESERVED24;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F00) Extended Message Object 24 Data 0 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO24DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F04) Extended Message Object 24 Data 1 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO24DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F08) Extended Message Object 24 Data 2 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO24DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F0C) Extended Message Object 24 Data 3 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO24DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F10) Extended Message Object 24 Data 4 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO24DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F14) Extended Message Object 24 Data 5 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO24DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F18) Extended Message Object 24 Data 6 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO24DATA6;
  __IM  uint32_t  RESERVED25;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F20) Extended Message Object 25 Data 0 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO25DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F24) Extended Message Object 25 Data 1 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO25DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F28) Extended Message Object 25 Data 2 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO25DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F2C) Extended Message Object 25 Data 3 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO25DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F30) Extended Message Object 25 Data 4 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO25DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F34) Extended Message Object 25 Data 5 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO25DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F38) Extended Message Object 25 Data 6 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO25DATA6;
  __IM  uint32_t  RESERVED26;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F40) Extended Message Object 26 Data 0 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO26DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F44) Extended Message Object 26 Data 1 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO26DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F48) Extended Message Object 26 Data 2 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO26DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F4C) Extended Message Object 26 Data 3 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO26DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F50) Extended Message Object 26 Data 4 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO26DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F54) Extended Message Object 26 Data 5 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO26DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F58) Extended Message Object 26 Data 6 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO26DATA6;
  __IM  uint32_t  RESERVED27;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F60) Extended Message Object 27 Data 0 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO27DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F64) Extended Message Object 27 Data 1 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO27DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F68) Extended Message Object 27 Data 2 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO27DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F6C) Extended Message Object 27 Data 3 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO27DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F70) Extended Message Object 27 Data 4 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO27DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F74) Extended Message Object 27 Data 5 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO27DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F78) Extended Message Object 27 Data 6 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO27DATA6;
  __IM  uint32_t  RESERVED28;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F80) Extended Message Object 28 Data 0 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO28DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F84) Extended Message Object 28 Data 1 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO28DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F88) Extended Message Object 28 Data 2 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO28DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F8C) Extended Message Object 28 Data 3 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO28DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F90) Extended Message Object 28 Data 4 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO28DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F94) Extended Message Object 28 Data 5 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO28DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F98) Extended Message Object 28 Data 6 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO28DATA6;
  __IM  uint32_t  RESERVED29;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000FA0) Extended Message Object 29 Data 0 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO29DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000FA4) Extended Message Object 29 Data 1 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO29DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000FA8) Extended Message Object 29 Data 2 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO29DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000FAC) Extended Message Object 29 Data 3 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO29DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000FB0) Extended Message Object 29 Data 4 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO29DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000FB4) Extended Message Object 29 Data 5 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO29DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000FB8) Extended Message Object 29 Data 6 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO29DATA6;
  __IM  uint32_t  RESERVED30;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000FC0) Extended Message Object 30 Data 0 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO30DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000FC4) Extended Message Object 30 Data 1 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO30DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000FC8) Extended Message Object 30 Data 2 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO30DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000FCC) Extended Message Object 30 Data 3 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO30DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000FD0) Extended Message Object 30 Data 4 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO30DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000FD4) Extended Message Object 30 Data 5 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO30DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000FD8) Extended Message Object 30 Data 6 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO30DATA6;
  __IM  uint32_t  RESERVED31;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000FE0) Extended Message Object 31 Data 0 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO31DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000FE4) Extended Message Object 31 Data 1 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO31DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000FE8) Extended Message Object 31 Data 2 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO31DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000FEC) Extended Message Object 31 Data 3 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO31DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000FF0) Extended Message Object 31 Data 4 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO31DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000FF4) Extended Message Object 31 Data 5 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO31DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000FF8) Extended Message Object 31 Data 6 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO31DATA6;
} CANMSGOBJ1_Type;                              /*!< Size = 4092 (0xffc)                                                       */



/* =========================================================================================================================== */
/* ================                                        CANMSGOBJ2                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief CAN Message Object 2 (CANMSGOBJ2)
  */

typedef struct {                                /*!< (@ 0x48010800) CANMSGOBJ2 Structure                                       */
  __IM  uint32_t  RESERVED[512];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000800) Extended Message Object 0 Data 0 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO0DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000804) Extended Message Object 0 Data 1 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO0DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000808) Extended Message Object 0 Data 2 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO0DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000080C) Extended Message Object 0 Data 3 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO0DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000810) Extended Message Object 0 Data 4 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO0DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000814) Extended Message Object 0 Data 5 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO0DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000818) Extended Message Object 0 Data 6 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO0DATA6;
  __IM  uint32_t  RESERVED1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000820) Extended Message Object 1 Data 0 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO1DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000824) Extended Message Object 1 Data 1 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO1DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000828) Extended Message Object 1 Data 2 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO1DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000082C) Extended Message Object 1 Data 3 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO1DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000830) Extended Message Object 1 Data 4 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO1DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000834) Extended Message Object 1 Data 5 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO1DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000838) Extended Message Object 1 Data 6 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO1DATA6;
  __IM  uint32_t  RESERVED2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000840) Extended Message Object 2 Data 0 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO2DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000844) Extended Message Object 2 Data 1 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO2DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000848) Extended Message Object 2 Data 2 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO2DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000084C) Extended Message Object 2 Data 3 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO2DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000850) Extended Message Object 2 Data 4 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO2DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000854) Extended Message Object 2 Data 5 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO2DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000858) Extended Message Object 2 Data 6 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO2DATA6;
  __IM  uint32_t  RESERVED3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000860) Extended Message Object 3 Data 0 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO3DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000864) Extended Message Object 3 Data 1 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO3DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000868) Extended Message Object 3 Data 2 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO3DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000086C) Extended Message Object 3 Data 3 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO3DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000870) Extended Message Object 3 Data 4 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO3DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000874) Extended Message Object 3 Data 5 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO3DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000878) Extended Message Object 3 Data 6 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO3DATA6;
  __IM  uint32_t  RESERVED4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000880) Extended Message Object 4 Data 0 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO4DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000884) Extended Message Object 4 Data 1 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO4DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000888) Extended Message Object 4 Data 2 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO4DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000088C) Extended Message Object 4 Data 3 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO4DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000890) Extended Message Object 4 Data 4 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO4DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000894) Extended Message Object 4 Data 5 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO4DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000898) Extended Message Object 4 Data 6 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO4DATA6;
  __IM  uint32_t  RESERVED5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000008A0) Extended Message Object 5 Data 0 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO5DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000008A4) Extended Message Object 5 Data 1 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO5DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000008A8) Extended Message Object 5 Data 2 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO5DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000008AC) Extended Message Object 5 Data 3 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO5DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000008B0) Extended Message Object 5 Data 4 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO5DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000008B4) Extended Message Object 5 Data 5 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO5DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000008B8) Extended Message Object 5 Data 6 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO5DATA6;
  __IM  uint32_t  RESERVED6;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000008C0) Extended Message Object 6 Data 0 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO6DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000008C4) Extended Message Object 6 Data 1 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO6DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000008C8) Extended Message Object 6 Data 2 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO6DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000008CC) Extended Message Object 6 Data 3 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO6DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000008D0) Extended Message Object 6 Data 4 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO6DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000008D4) Extended Message Object 6 Data 5 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO6DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000008D8) Extended Message Object 6 Data 6 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO6DATA6;
  __IM  uint32_t  RESERVED7;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000008E0) Extended Message Object 7 Data 0 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO7DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000008E4) Extended Message Object 7 Data 1 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO7DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000008E8) Extended Message Object 7 Data 2 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO7DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000008EC) Extended Message Object 7 Data 3 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO7DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000008F0) Extended Message Object 7 Data 4 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO7DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000008F4) Extended Message Object 7 Data 5 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO7DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000008F8) Extended Message Object 7 Data 6 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO7DATA6;
  __IM  uint32_t  RESERVED8;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000900) Extended Message Object 8 Data 0 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO8DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000904) Extended Message Object 8 Data 1 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO8DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000908) Extended Message Object 8 Data 2 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO8DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000090C) Extended Message Object 8 Data 3 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO8DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000910) Extended Message Object 8 Data 4 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO8DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000914) Extended Message Object 8 Data 5 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO8DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000918) Extended Message Object 8 Data 6 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO8DATA6;
  __IM  uint32_t  RESERVED9;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000920) Extended Message Object 9 Data 0 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO9DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000924) Extended Message Object 9 Data 1 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO9DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000928) Extended Message Object 9 Data 2 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO9DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000092C) Extended Message Object 9 Data 3 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO9DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000930) Extended Message Object 9 Data 4 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO9DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000934) Extended Message Object 9 Data 5 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO9DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000938) Extended Message Object 9 Data 6 Register                  */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO9DATA6;
  __IM  uint32_t  RESERVED10;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000940) Extended Message Object 10 Data 0 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO10DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000944) Extended Message Object 10 Data 1 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO10DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000948) Extended Message Object 10 Data 2 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO10DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000094C) Extended Message Object 10 Data 3 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO10DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000950) Extended Message Object 10 Data 4 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO10DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000954) Extended Message Object 10 Data 5 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO10DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000958) Extended Message Object 10 Data 6 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO10DATA6;
  __IM  uint32_t  RESERVED11;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000960) Extended Message Object 11 Data 0 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO11DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000964) Extended Message Object 11 Data 1 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO11DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000968) Extended Message Object 11 Data 2 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO11DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000096C) Extended Message Object 11 Data 3 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO11DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000970) Extended Message Object 11 Data 4 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO11DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000974) Extended Message Object 11 Data 5 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO11DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000978) Extended Message Object 11 Data 6 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO11DATA6;
  __IM  uint32_t  RESERVED12;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000980) Extended Message Object 12 Data 0 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO12DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000984) Extended Message Object 12 Data 1 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO12DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000988) Extended Message Object 12 Data 2 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO12DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000098C) Extended Message Object 12 Data 3 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO12DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000990) Extended Message Object 12 Data 4 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO12DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000994) Extended Message Object 12 Data 5 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO12DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000998) Extended Message Object 12 Data 6 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO12DATA6;
  __IM  uint32_t  RESERVED13;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000009A0) Extended Message Object 13 Data 0 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO13DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000009A4) Extended Message Object 13 Data 1 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO13DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000009A8) Extended Message Object 13 Data 2 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO13DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000009AC) Extended Message Object 13 Data 3 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO13DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000009B0) Extended Message Object 13 Data 4 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO13DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000009B4) Extended Message Object 13 Data 5 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO13DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000009B8) Extended Message Object 13 Data 6 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO13DATA6;
  __IM  uint32_t  RESERVED14;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000009C0) Extended Message Object 14 Data 0 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO14DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000009C4) Extended Message Object 14 Data 1 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO14DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000009C8) Extended Message Object 14 Data 2 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO14DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000009CC) Extended Message Object 14 Data 3 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO14DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000009D0) Extended Message Object 14 Data 4 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO14DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000009D4) Extended Message Object 14 Data 5 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO14DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000009D8) Extended Message Object 14 Data 6 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO14DATA6;
  __IM  uint32_t  RESERVED15;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000009E0) Extended Message Object 15 Data 0 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO15DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000009E4) Extended Message Object 15 Data 1 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO15DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000009E8) Extended Message Object 15 Data 2 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO15DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000009EC) Extended Message Object 15 Data 3 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO15DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000009F0) Extended Message Object 15 Data 4 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO15DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000009F4) Extended Message Object 15 Data 5 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO15DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000009F8) Extended Message Object 15 Data 6 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO15DATA6;
  __IM  uint32_t  RESERVED16;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000A00) Extended Message Object 16 Data 0 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO16DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000A04) Extended Message Object 16 Data 1 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO16DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000A08) Extended Message Object 16 Data 2 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO16DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000A0C) Extended Message Object 16 Data 3 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO16DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000A10) Extended Message Object 16 Data 4 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO16DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000A14) Extended Message Object 16 Data 5 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO16DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000A18) Extended Message Object 16 Data 6 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO16DATA6;
  __IM  uint32_t  RESERVED17;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000A20) Extended Message Object 17 Data 0 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO17DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000A24) Extended Message Object 17 Data 1 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO17DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000A28) Extended Message Object 17 Data 2 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO17DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000A2C) Extended Message Object 17 Data 3 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO17DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000A30) Extended Message Object 17 Data 4 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO17DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000A34) Extended Message Object 17 Data 5 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO17DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000A38) Extended Message Object 17 Data 6 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO17DATA6;
  __IM  uint32_t  RESERVED18;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000A40) Extended Message Object 18 Data 0 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO18DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000A44) Extended Message Object 18 Data 1 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO18DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000A48) Extended Message Object 18 Data 2 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO18DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000A4C) Extended Message Object 18 Data 3 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO18DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000A50) Extended Message Object 18 Data 4 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO18DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000A54) Extended Message Object 18 Data 5 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO18DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000A58) Extended Message Object 18 Data 6 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO18DATA6;
  __IM  uint32_t  RESERVED19;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000A60) Extended Message Object 19 Data 0 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO19DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000A64) Extended Message Object 19 Data 1 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO19DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000A68) Extended Message Object 19 Data 2 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO19DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000A6C) Extended Message Object 19 Data 3 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO19DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000A70) Extended Message Object 19 Data 4 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO19DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000A74) Extended Message Object 19 Data 5 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO19DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000A78) Extended Message Object 19 Data 6 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO19DATA6;
  __IM  uint32_t  RESERVED20;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000A80) Extended Message Object 20 Data 0 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO20DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000A84) Extended Message Object 20 Data 1 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO20DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000A88) Extended Message Object 20 Data 2 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO20DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000A8C) Extended Message Object 20 Data 3 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO20DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000A90) Extended Message Object 20 Data 4 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO20DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000A94) Extended Message Object 20 Data 5 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO20DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000A98) Extended Message Object 20 Data 6 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO20DATA6;
  __IM  uint32_t  RESERVED21;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000AA0) Extended Message Object 21 Data 0 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO21DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000AA4) Extended Message Object 21 Data 1 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO21DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000AA8) Extended Message Object 21 Data 2 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO21DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000AAC) Extended Message Object 21 Data 3 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO21DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000AB0) Extended Message Object 21 Data 4 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO21DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000AB4) Extended Message Object 21 Data 5 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO21DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000AB8) Extended Message Object 21 Data 6 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO21DATA6;
  __IM  uint32_t  RESERVED22;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000AC0) Extended Message Object 22 Data 0 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO22DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000AC4) Extended Message Object 22 Data 1 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO22DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000AC8) Extended Message Object 22 Data 2 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO22DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000ACC) Extended Message Object 22 Data 3 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO22DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000AD0) Extended Message Object 22 Data 4 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO22DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000AD4) Extended Message Object 22 Data 5 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO22DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000AD8) Extended Message Object 22 Data 6 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO22DATA6;
  __IM  uint32_t  RESERVED23;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000AE0) Extended Message Object 23 Data 0 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO23DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000AE4) Extended Message Object 23 Data 1 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO23DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000AE8) Extended Message Object 23 Data 2 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO23DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000AEC) Extended Message Object 23 Data 3 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO23DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000AF0) Extended Message Object 23 Data 4 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO23DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000AF4) Extended Message Object 23 Data 5 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO23DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000AF8) Extended Message Object 23 Data 6 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO23DATA6;
  __IM  uint32_t  RESERVED24;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000B00) Extended Message Object 24 Data 0 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO24DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000B04) Extended Message Object 24 Data 1 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO24DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000B08) Extended Message Object 24 Data 2 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO24DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000B0C) Extended Message Object 24 Data 3 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO24DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000B10) Extended Message Object 24 Data 4 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO24DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000B14) Extended Message Object 24 Data 5 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO24DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000B18) Extended Message Object 24 Data 6 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO24DATA6;
  __IM  uint32_t  RESERVED25;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000B20) Extended Message Object 25 Data 0 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO25DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000B24) Extended Message Object 25 Data 1 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO25DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000B28) Extended Message Object 25 Data 2 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO25DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000B2C) Extended Message Object 25 Data 3 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO25DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000B30) Extended Message Object 25 Data 4 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO25DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000B34) Extended Message Object 25 Data 5 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO25DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000B38) Extended Message Object 25 Data 6 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO25DATA6;
  __IM  uint32_t  RESERVED26;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000B40) Extended Message Object 26 Data 0 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO26DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000B44) Extended Message Object 26 Data 1 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO26DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000B48) Extended Message Object 26 Data 2 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO26DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000B4C) Extended Message Object 26 Data 3 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO26DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000B50) Extended Message Object 26 Data 4 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO26DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000B54) Extended Message Object 26 Data 5 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO26DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000B58) Extended Message Object 26 Data 6 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO26DATA6;
  __IM  uint32_t  RESERVED27;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000B60) Extended Message Object 27 Data 0 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO27DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000B64) Extended Message Object 27 Data 1 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO27DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000B68) Extended Message Object 27 Data 2 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO27DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000B6C) Extended Message Object 27 Data 3 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO27DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000B70) Extended Message Object 27 Data 4 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO27DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000B74) Extended Message Object 27 Data 5 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO27DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000B78) Extended Message Object 27 Data 6 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO27DATA6;
  __IM  uint32_t  RESERVED28;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000B80) Extended Message Object 28 Data 0 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO28DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000B84) Extended Message Object 28 Data 1 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO28DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000B88) Extended Message Object 28 Data 2 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO28DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000B8C) Extended Message Object 28 Data 3 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO28DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000B90) Extended Message Object 28 Data 4 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO28DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000B94) Extended Message Object 28 Data 5 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO28DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000B98) Extended Message Object 28 Data 6 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO28DATA6;
  __IM  uint32_t  RESERVED29;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000BA0) Extended Message Object 29 Data 0 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO29DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000BA4) Extended Message Object 29 Data 1 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO29DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000BA8) Extended Message Object 29 Data 2 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO29DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000BAC) Extended Message Object 29 Data 3 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO29DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000BB0) Extended Message Object 29 Data 4 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO29DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000BB4) Extended Message Object 29 Data 5 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO29DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000BB8) Extended Message Object 29 Data 6 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO29DATA6;
  __IM  uint32_t  RESERVED30;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000BC0) Extended Message Object 30 Data 0 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO30DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000BC4) Extended Message Object 30 Data 1 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO30DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000BC8) Extended Message Object 30 Data 2 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO30DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000BCC) Extended Message Object 30 Data 3 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO30DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000BD0) Extended Message Object 30 Data 4 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO30DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000BD4) Extended Message Object 30 Data 5 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO30DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000BD8) Extended Message Object 30 Data 6 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO30DATA6;
  __IM  uint32_t  RESERVED31;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000BE0) Extended Message Object 31 Data 0 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO31DATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000BE4) Extended Message Object 31 Data 1 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO31DATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000BE8) Extended Message Object 31 Data 2 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO31DATA2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000BEC) Extended Message Object 31 Data 3 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO31DATA3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000BF0) Extended Message Object 31 Data 4 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO31DATA4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000BF4) Extended Message Object 31 Data 5 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO31DATA5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000BF8) Extended Message Object 31 Data 6 Register                 */
    
    struct {
      __IOM uint32_t DB0        : 8;            /*!< [7..0] Data Byte 0 of Message Object n                                    */
      __IOM uint32_t DB1        : 8;            /*!< [15..8] Data Byte 1 of Message Object n                                   */
      __IOM uint32_t DB2        : 8;            /*!< [23..16] Data Byte 2 of Message Object n                                  */
      __IOM uint32_t DB3        : 8;            /*!< [31..24] Data Byte 3 of Message Object n                                  */
    } bit;
  } CAN_EMO31DATA6;
} CANMSGOBJ2_Type;                              /*!< Size = 3068 (0xbfc)                                                       */



/* =========================================================================================================================== */
/* ================                                          CANTRX                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief CANTRX (CANTRX)
  */

typedef struct {                                /*!< (@ 0x4800C000) CANTRX Structure                                           */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) CAN transceiver control                                    */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] CAN transceiver enable                                             */
      __IOM uint32_t MODE       : 2;            /*!< [2..1] CAN mode control                                                   */
            uint32_t            : 5;
      __IOM uint32_t EN_TXD_TO  : 1;            /*!< [8..8] Enable transmitter deactivation due to TXD dominant timeout        */
      __IOM uint32_t TSIL_EN    : 1;            /*!< [9..9] Enable tsilence counter                                            */
            uint32_t            : 6;
      __IOM uint32_t TXD_IN_SEL : 2;            /*!< [17..16] TXD input selector                                               */
            uint32_t            : 14;
    } bit;
  } CTRL;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000004) CAN transceiver interrupt status                           */
    
    struct {
      __IM  uint32_t BUS_TO_IS  : 1;            /*!< [0..0] Bus dominant timeout interrupt status                              */
      __IM  uint32_t TXD_TO_IS  : 1;            /*!< [1..1] TXD dominant timeout interrupt status                              */
      __IM  uint32_t OT_IS      : 1;            /*!< [2..2] CAN overtemperature interrupt status                               */
      __IM  uint32_t BUS_ACT_IS : 1;            /*!< [3..3] Bus active during CAN sleep interrupt status                       */
            uint32_t            : 12;
      __IM  uint32_t BUS_TO_STS : 1;            /*!< [16..16] Bus dominant timeout status                                      */
      __IM  uint32_t TXD_TO_STS : 1;            /*!< [17..17] TXD dominant timeout status                                      */
      __IM  uint32_t OT_STS     : 1;            /*!< [18..18] CAN overtemperature status                                       */
            uint32_t            : 1;
      __IM  uint32_t UV_STS     : 1;            /*!< [20..20] CAN supply undervoltage status                                   */
            uint32_t            : 11;
    } bit;
  } IRQS;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000008) CAN transceiver interrupt status register clear            */
    
    struct {
      __OM  uint32_t BUS_TO_ISC : 1;            /*!< [0..0] Bus dominant timeout interrupt status clear                        */
      __OM  uint32_t TXD_TO_ISC : 1;            /*!< [1..1] TXD dominant timeout interrupt status clear                        */
      __OM  uint32_t OT_ISC     : 1;            /*!< [2..2] CAN overtemperature interrupt status clear                         */
      __OM  uint32_t BUS_ACT_ISC : 1;           /*!< [3..3] Bus active during CAN sleep interrupt status clear                 */
            uint32_t            : 12;
      __OM  uint32_t BUS_TO_SC  : 1;            /*!< [16..16] Bus dominant timeout status clear                                */
      __OM  uint32_t TXD_TO_SC  : 1;            /*!< [17..17] TXD dominant timeout status clear                                */
      __OM  uint32_t OT_SC      : 1;            /*!< [18..18] CAN overtemperature status clear                                 */
            uint32_t            : 13;
    } bit;
  } IRQCLR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000000C) CAN transceiver interrupt status register set              */
    
    struct {
      __OM  uint32_t BUS_TO_ISS : 1;            /*!< [0..0] Bus dominant timeout interrupt status set                          */
      __OM  uint32_t TXD_TO_ISS : 1;            /*!< [1..1] TXD dominant timeout interrupt status set                          */
      __OM  uint32_t OT_ISS     : 1;            /*!< [2..2] CAN overtemperature interrupt status set                           */
      __OM  uint32_t BUS_ACT_ISS : 1;           /*!< [3..3] Bus active during CAN sleep interrupt status set                   */
            uint32_t            : 12;
      __OM  uint32_t BUS_TO_SS  : 1;            /*!< [16..16] Bus dominant timeout status set                                  */
      __OM  uint32_t TXD_TO_SS  : 1;            /*!< [17..17] TXD dominant timeout status set                                  */
      __OM  uint32_t OT_SS      : 1;            /*!< [18..18] CAN overtemperature status set                                   */
            uint32_t            : 13;
    } bit;
  } IRQSET;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) CAN transceiver interrupt enable                           */
    
    struct {
      __IOM uint32_t BUS_TO_IEN : 1;            /*!< [0..0] Bus dominant timeout interrupt enable                              */
      __IOM uint32_t TXD_TO_IEN : 1;            /*!< [1..1] TXD dominant timeout interrupt enable                              */
      __IOM uint32_t OT_IEN     : 1;            /*!< [2..2] CAN overtemperature interrupt enable                               */
      __IOM uint32_t BUS_ACT_IEN : 1;           /*!< [3..3] Bus active during CAN sleep interrupt enable                       */
            uint32_t            : 28;
    } bit;
  } IRQEN;
} CANTRX_Type;                                  /*!< Size = 20 (0x14)                                                          */



/* =========================================================================================================================== */
/* ================                                           CCU7                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief CCU7 (CCU7)
  */

typedef struct {                                /*!< (@ 0x40008000) CCU7 Structure                                             */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Clock Control Register                                     */
    
    struct {
      __IOM uint32_t DISR       : 1;            /*!< [0..0] Module Disable Request Bit - DISR                                  */
      __IM  uint32_t DISS       : 1;            /*!< [1..1] Module Disable Status Bit - DISS                                   */
            uint32_t            : 30;
    } bit;
  } CLC;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000004) Module Configuration Register                              */
    
    struct {
      __IOM uint32_t T12        : 1;            /*!< [0..0] T12 Available - T12                                                */
      __IOM uint32_t T13        : 1;            /*!< [1..1] T13 Available - T13                                                */
      __IOM uint32_t MCM        : 1;            /*!< [2..2] Multi-Channel Mode Available - MCM                                 */
            uint32_t            : 1;
      __IOM uint32_t T14        : 1;            /*!< [4..4] T14 Available -T14                                                 */
      __IOM uint32_t T15        : 1;            /*!< [5..5] T15 Available - T15                                                */
      __IOM uint32_t T16        : 1;            /*!< [6..6] T16 Available - T16                                                */
            uint32_t            : 8;
      __IOM uint32_t WREN       : 1;            /*!< [15..15] Write Enable - WREN                                              */
            uint32_t            : 16;
    } bit;
  } MCFG;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000008) Module Identification Register                             */
    
    struct {
      __IM  uint32_t MODREV     : 8;            /*!< [7..0] Module Revision Number - MODREV                                    */
      __IM  uint32_t MODNUM     : 8;            /*!< [15..8] Module Number Value - MODNUM                                      */
            uint32_t            : 16;
    } bit;
  } ID;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000000C) Port Input Select Register 0                               */
    
    struct {
      __IOM uint32_t ISCC70     : 2;            /*!< [1..0] Input Select for CC70                                              */
      __IOM uint32_t ISCC71     : 2;            /*!< [3..2] Input Select for CC71                                              */
      __IOM uint32_t ISCC72     : 2;            /*!< [5..4] Input Select for CC72                                              */
      __IOM uint32_t ISTRP      : 2;            /*!< [7..6] Input Select for CTRAP                                             */
      __IOM uint32_t ISPOS0     : 2;            /*!< [9..8] Input Select for CCPOS0                                            */
      __IOM uint32_t ISPOS1     : 2;            /*!< [11..10] Input Select for CCPOS1                                          */
      __IOM uint32_t ISPOS2     : 2;            /*!< [13..12] Input Select for CCPOS2                                          */
      __IOM uint32_t IST12HR    : 2;            /*!< [15..14] Input Select for T12HR                                           */
            uint32_t            : 16;
    } bit;
  } PISEL0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) Port Input Select Register 2                               */
    
    struct {
      __IOM uint32_t IST13HR    : 2;            /*!< [1..0] Input Select for T13HR                                             */
      __IOM uint32_t ISCNT12    : 2;            /*!< [3..2] Input Select for T12 Counting Input                                */
      __IOM uint32_t ISCNT13    : 2;            /*!< [5..4] Input Select for T13 Counting Input                                */
      __IOM uint32_t T12EXT     : 1;            /*!< [6..6] Extension for T12HR Inputs                                         */
      __IOM uint32_t T13EXT     : 1;            /*!< [7..7] Extension for T13HR Inputs                                         */
            uint32_t            : 24;
    } bit;
  } PISEL2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000014) Port Input Select Register 24                              */
    
    struct {
      __IOM uint32_t IST1xHR    : 2;            /*!< [1..0] Input Select for T1xHR                                             */
      __IOM uint32_t ISCNT1x    : 2;            /*!< [3..2] Input Select for T1x Counting Input                                */
      __IOM uint32_t T1xEXT     : 1;            /*!< [4..4] Extension for T1xHR Inputs                                         */
            uint32_t            : 27;
    } bit;
  } PISEL24;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000018) Port Input Select Register 25                              */
    
    struct {
      __IOM uint32_t IST1xHR    : 2;            /*!< [1..0] Input Select for T1xHR                                             */
      __IOM uint32_t ISCNT1x    : 2;            /*!< [3..2] Input Select for T1x Counting Input                                */
      __IOM uint32_t T1xEXT     : 1;            /*!< [4..4] Extension for T1xHR Inputs                                         */
            uint32_t            : 27;
    } bit;
  } PISEL25;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000001C) Port Input Select Register 26                              */
    
    struct {
      __IOM uint32_t IST1xHR    : 2;            /*!< [1..0] Input Select for T1xHR                                             */
      __IOM uint32_t ISCNT1x    : 2;            /*!< [3..2] Input Select for T1x Counting Input                                */
      __IOM uint32_t T1xEXT     : 1;            /*!< [4..4] Extension for T1xHR Inputs                                         */
            uint32_t            : 27;
    } bit;
  } PISEL26;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000020) Kernel State Control Sensitivity Register                  */
    
    struct {
      __IOM uint32_t SB0        : 1;            /*!< [0..0] Sensitivity Block x SBx (x=0,1,2,...)                              */
      __IOM uint32_t SB1        : 1;            /*!< [1..1] Sensitivity Block x SBx (x=0,1,2,...)                              */
      __IOM uint32_t SB2        : 1;            /*!< [2..2] Sensitivity Block x SBx (x=0,1,2,...)                              */
      __IOM uint32_t SB3        : 1;            /*!< [3..3] Sensitivity Block x SBx (x=0,1,2,...)                              */
      __IOM uint32_t SB4        : 1;            /*!< [4..4] Sensitivity Block x SBx (x=0,1,2,...)                              */
      __IOM uint32_t SB5        : 1;            /*!< [5..5] Sensitivity Block x SBx (x=0,1,2,...)                              */
      __IOM uint32_t SB6        : 1;            /*!< [6..6] Sensitivity Block x SBx (x=0,1,2,...)                              */
            uint32_t            : 25;
    } bit;
  } KSCSR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000024) Timer T12 Counter Register                                 */
    
    struct {
      __IOM uint32_t T12CV      : 16;           /*!< [15..0] Timer T12 Counter Value                                           */
            uint32_t            : 16;
    } bit;
  } T12;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000028) Timer T12 Period Register                                  */
    
    struct {
      __IOM uint32_t T12PV      : 16;           /*!< [15..0] T12 Period Value                                                  */
            uint32_t            : 16;
    } bit;
  } T12PR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000002C) Dead-Time Control Register for Timer T12 Low               */
    
    struct {
      __IOM uint32_t DTE0       : 1;            /*!< [0..0] Dead-Time Enable Bit 0                                             */
      __IOM uint32_t DTE1       : 1;            /*!< [1..1] Dead-Time Enable Bit 1                                             */
      __IOM uint32_t DTE2       : 1;            /*!< [2..2] Dead-Time Enable Bit 2                                             */
            uint32_t            : 5;
      __IM  uint32_t DTR0       : 1;            /*!< [8..8] Dead-Time Run Indication Bit 0                                     */
      __IM  uint32_t DTR1       : 1;            /*!< [9..9] Dead-Time Run Indication Bit 1                                     */
      __IM  uint32_t DTR2       : 1;            /*!< [10..10] Dead-Time Run Indication Bit 2                                   */
            uint32_t            : 21;
    } bit;
  } T12DTC;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000030) Dead-Time value Register CC7$x                             */
    
    struct {
      __IOM uint32_t DTM_RISE   : 8;            /*!< [7..0] Dead-Time rise                                                     */
      __IOM uint32_t DTM_FALL   : 8;            /*!< [15..8] Dead-Time fall                                                    */
            uint32_t            : 16;
    } bit;
  } T12DT0_VAL;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000034) Dead-Time value Register CC7$x                             */
    
    struct {
      __IOM uint32_t DTM_RISE   : 8;            /*!< [7..0] Dead-Time rise                                                     */
      __IOM uint32_t DTM_FALL   : 8;            /*!< [15..8] Dead-Time fall                                                    */
            uint32_t            : 16;
    } bit;
  } T12DT1_VAL;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000038) Dead-Time value Register CC7$x                             */
    
    struct {
      __IOM uint32_t DTM_RISE   : 8;            /*!< [7..0] Dead-Time rise                                                     */
      __IOM uint32_t DTM_FALL   : 8;            /*!< [15..8] Dead-Time fall                                                    */
            uint32_t            : 16;
    } bit;
  } T12DT2_VAL;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000003C) Dead-Time Input Selection Register (Demo in Windows)       */
    
    struct {
      __IOM uint32_t DTINSEL0   : 2;            /*!< [1..0] Deadtime Input selection 0                                         */
            uint32_t            : 2;
      __IOM uint32_t DTINSEL1   : 2;            /*!< [5..4] Deadtime Input selection 1                                         */
            uint32_t            : 2;
      __IOM uint32_t DTINSEL2   : 2;            /*!< [9..8] Deadtime Input selection 2                                         */
            uint32_t            : 22;
    } bit;
  } T12DTINSEL;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000040) Capture/Compare Register for Channel CC70                  */
    
    struct {
      __IM  uint32_t CCV        : 16;           /*!< [15..0] Capture/Compare Value - CCV                                       */
            uint32_t            : 16;
    } bit;
  } CC70R;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000044) Capture/Compare Register for Channel CC71                  */
    
    struct {
      __IM  uint32_t CCV        : 16;           /*!< [15..0] Capture/Compare Value - CCV                                       */
            uint32_t            : 16;
    } bit;
  } CC71R;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000048) Capture/Compare Register for Channel CC72                  */
    
    struct {
      __IM  uint32_t CCV        : 16;           /*!< [15..0] Capture/Compare Value - CCV                                       */
            uint32_t            : 16;
    } bit;
  } CC72R;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000004C) Capture/Compare Shadow Reg. for Channel CC70               */
    
    struct {
      __IOM uint32_t CCS        : 16;           /*!< [15..0] Shadow Register for Channel x Capture/Compare Value
                                                     - CCS                                                                     */
            uint32_t            : 16;
    } bit;
  } CC70SR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000050) Capture/Compare Shadow Reg. for Channel CC71               */
    
    struct {
      __IOM uint32_t CCS        : 16;           /*!< [15..0] Shadow Register for Channel x Capture/Compare Value
                                                     - CCS                                                                     */
            uint32_t            : 16;
    } bit;
  } CC71SR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000054) Capture/Compare Shadow Reg. for Channel CC72               */
    
    struct {
      __IOM uint32_t CCS        : 16;           /*!< [15..0] Shadow Register for Channel x Capture/Compare Value
                                                     - CCS                                                                     */
            uint32_t            : 16;
    } bit;
  } CC72SR;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000058) Compare Register for Channel C70B                          */
    
    struct {
      __IM  uint32_t CV         : 16;           /*!< [15..0] Compare Value - CV                                                */
            uint32_t            : 16;
    } bit;
  } CC70BR;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x0000005C) Compare Register for Channel C71B                          */
    
    struct {
      __IM  uint32_t CV         : 16;           /*!< [15..0] Compare Value - CV                                                */
            uint32_t            : 16;
    } bit;
  } CC71BR;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000060) Compare Register for Channel C72B                          */
    
    struct {
      __IM  uint32_t CV         : 16;           /*!< [15..0] Compare Value - CV                                                */
            uint32_t            : 16;
    } bit;
  } CC72BR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000064) Compare Shadow Reg. for Channel C70BSR                     */
    
    struct {
      __IOM uint32_t CS         : 16;           /*!< [15..0] Shadow Register for Channel x Compare Value - CS                  */
            uint32_t            : 16;
    } bit;
  } CC70BSR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000068) Compare Shadow Reg. for Channel C71BSR                     */
    
    struct {
      __IOM uint32_t CS         : 16;           /*!< [15..0] Shadow Register for Channel x Compare Value - CS                  */
            uint32_t            : 16;
    } bit;
  } CC71BSR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000006C) Compare Shadow Reg. for Channel C72BSR                     */
    
    struct {
      __IOM uint32_t CS         : 16;           /*!< [15..0] Shadow Register for Channel x Compare Value - CS                  */
            uint32_t            : 16;
    } bit;
  } CC72BSR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000070) Timer T13 Counter Register                                 */
    
    struct {
      __IOM uint32_t T1xCV      : 16;           /*!< [15..0] Timer T1x Counter Value                                           */
            uint32_t            : 16;
    } bit;
  } T13R;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000074) Timer T14 Counter Register                                 */
    
    struct {
      __IOM uint32_t T1xCV      : 16;           /*!< [15..0] Timer T1x Counter Value                                           */
            uint32_t            : 16;
    } bit;
  } T14R;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000078) Timer T15 Counter Register                                 */
    
    struct {
      __IOM uint32_t T1xCV      : 16;           /*!< [15..0] Timer T1x Counter Value                                           */
            uint32_t            : 16;
    } bit;
  } T15R;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000007C) Timer T16 Counter Register                                 */
    
    struct {
      __IOM uint32_t T1xCV      : 16;           /*!< [15..0] Timer T1x Counter Value                                           */
            uint32_t            : 16;
    } bit;
  } T16R;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000080) Timer T13 Period Register                                  */
    
    struct {
      __IOM uint32_t T1xPV      : 16;           /*!< [15..0] T1x Period Value                                                  */
            uint32_t            : 16;
    } bit;
  } T13PR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000084) Timer T14 Period Register                                  */
    
    struct {
      __IOM uint32_t T1xPV      : 16;           /*!< [15..0] T1x Period Value                                                  */
            uint32_t            : 16;
    } bit;
  } T14PR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000088) Timer T15 Period Register                                  */
    
    struct {
      __IOM uint32_t T1xPV      : 16;           /*!< [15..0] T1x Period Value                                                  */
            uint32_t            : 16;
    } bit;
  } T15PR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000008C) Timer T16 Period Register                                  */
    
    struct {
      __IOM uint32_t T1xPV      : 16;           /*!< [15..0] T1x Period Value                                                  */
            uint32_t            : 16;
    } bit;
  } T16PR;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000090) Compare Register for Channel C73                           */
    
    struct {
      __IM  uint32_t CCV        : 16;           /*!< [15..0] Channel C7x Compare Value - CCV                                   */
            uint32_t            : 16;
    } bit;
  } C73R;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000094) Compare Register for Channel C74                           */
    
    struct {
      __IM  uint32_t CCV        : 16;           /*!< [15..0] Channel C7x Compare Value - CCV                                   */
            uint32_t            : 16;
    } bit;
  } C74R;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000098) Compare Register for Channel C75                           */
    
    struct {
      __IM  uint32_t CCV        : 16;           /*!< [15..0] Channel C7x Compare Value - CCV                                   */
            uint32_t            : 16;
    } bit;
  } C75R;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x0000009C) Compare Register for Channel C76                           */
    
    struct {
      __IM  uint32_t CCV        : 16;           /*!< [15..0] Channel C7x Compare Value - CCV                                   */
            uint32_t            : 16;
    } bit;
  } C76R;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000A0) Compare Shadow Reg. for Channel CC73                       */
    
    struct {
      __IOM uint32_t CCS        : 16;           /*!< [15..0] Shadow Register for Channel CC73 Compare Value                    */
            uint32_t            : 16;
    } bit;
  } C73SR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000A4) Compare Shadow Reg. for Channel CC74                       */
    
    struct {
      __IOM uint32_t CCS        : 16;           /*!< [15..0] Shadow Register for Channel CC74 Compare Value                    */
            uint32_t            : 16;
    } bit;
  } C74SR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000A8) Compare Shadow Reg. for Channel CC75                       */
    
    struct {
      __IOM uint32_t CCS        : 16;           /*!< [15..0] Shadow Register for Channel CC75 Compare Value                    */
            uint32_t            : 16;
    } bit;
  } C75SR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000AC) Compare Shadow Reg. for Channel CC76                       */
    
    struct {
      __IOM uint32_t CCS        : 16;           /*!< [15..0] Shadow Register for Channel CC76 Compare Value                    */
            uint32_t            : 16;
    } bit;
  } C76SR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000B0) Compare State Register                                     */
    
    struct {
      __IM  uint32_t CC70ST     : 1;            /*!< [0..0] Capture/Compare State Bits                                         */
      __IM  uint32_t CC71ST     : 1;            /*!< [1..1] Capture/Compare State Bits                                         */
      __IM  uint32_t CC72ST     : 1;            /*!< [2..2] Capture/Compare State Bits                                         */
      __IM  uint32_t CCPOS0     : 1;            /*!< [3..3] Sampled Hall Pattern Bit 0                                         */
      __IM  uint32_t CCPOS1     : 1;            /*!< [4..4] Sampled Hall Pattern Bit 1                                         */
      __IM  uint32_t CCPOS2     : 1;            /*!< [5..5] Sampled Hall Pattern Bit 2                                         */
      __IM  uint32_t CC73ST     : 1;            /*!< [6..6] Compare State Bits                                                 */
            uint32_t            : 1;
      __IOM uint32_t CC70PS     : 1;            /*!< [8..8] Passive State Select for Compare Outputs                           */
      __IOM uint32_t COUT70PS   : 1;            /*!< [9..9] Passive State Select for Compare Outputs                           */
      __IOM uint32_t CC71PS     : 1;            /*!< [10..10] Passive State Select for Compare Outputs                         */
      __IOM uint32_t COUT71PS   : 1;            /*!< [11..11] Passive State Select for Compare Outputs                         */
      __IOM uint32_t CC72PS     : 1;            /*!< [12..12] Passive State Select for Compare Outputs                         */
      __IOM uint32_t COUT72PS   : 1;            /*!< [13..13] Passive State Select for Compare Outputs                         */
      __IOM uint32_t COUT73PS   : 1;            /*!< [14..14] Passive State Select for Compare Outputs                         */
      __IOM uint32_t T13IM      : 1;            /*!< [15..15] T13 Inverted Modulation                                          */
            uint32_t            : 16;
    } bit;
  } CMPSTAT;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x000000B4) Compare State Register 2                                   */
    
    struct {
      __IM  uint32_t C70BST     : 1;            /*!< [0..0] Compare State Bits B                                               */
      __IM  uint32_t C71BST     : 1;            /*!< [1..1] Compare State Bits B                                               */
      __IM  uint32_t C72BST     : 1;            /*!< [2..2] Compare State Bits B                                               */
            uint32_t            : 1;
      __IM  uint32_t C74ST      : 1;            /*!< [4..4] Compare State Bits                                                 */
      __IM  uint32_t C75ST      : 1;            /*!< [5..5] Compare State Bits                                                 */
      __IM  uint32_t C76ST      : 1;            /*!< [6..6] Compare State Bits                                                 */
            uint32_t            : 1;
      __IM  uint32_t CC70ST     : 1;            /*!< [8..8] Capture/Compare State Bits                                         */
      __IM  uint32_t CC71ST     : 1;            /*!< [9..9] Capture/Compare State Bits                                         */
      __IM  uint32_t CC72ST     : 1;            /*!< [10..10] Capture/Compare State Bits                                       */
            uint32_t            : 21;
    } bit;
  } CMPSTAT_2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000B8) Compare State Modification Register                        */
    
    struct {
      __OM  uint32_t MCC70S     : 1;            /*!< [0..0] Capture/Compare Status Modification Bit 0 (Set)                    */
      __OM  uint32_t MCC71S     : 1;            /*!< [1..1] Capture/Compare Status Modification Bit 1 (Set)                    */
      __OM  uint32_t MCC72S     : 1;            /*!< [2..2] Capture/Compare Status Modification Bit 2 (Set)                    */
      __OM  uint32_t MCC70BS    : 1;            /*!< [3..3] Compare B Status Modification Bit 0 (Set)                          */
      __OM  uint32_t MCC71BS    : 1;            /*!< [4..4] Compare B Status Modification Bit 1 (Set)                          */
      __OM  uint32_t MCC72BS    : 1;            /*!< [5..5] Compare B Status Modification Bit 2 (Set)                          */
      __OM  uint32_t MCC73S     : 1;            /*!< [6..6] Capture/Compare Status Modification Bits (Set)                     */
            uint32_t            : 1;
      __OM  uint32_t MCC70R     : 1;            /*!< [8..8] Capture/Compare Status Modification Bit 0(Reset)                   */
      __OM  uint32_t MCC71R     : 1;            /*!< [9..9] Capture/Compare Status Modification Bit 1(Reset)                   */
      __OM  uint32_t MCC72R     : 1;            /*!< [10..10] Capture/Compare Status Modification Bit 2(Reset)                 */
      __OM  uint32_t MCC70BR    : 1;            /*!< [11..11] Compare B Status Modification Bit 0(Reset)                       */
      __OM  uint32_t MCC71BR    : 1;            /*!< [12..12] Compare B Status Modification Bit 1(Reset)                       */
      __OM  uint32_t MCC72BR    : 1;            /*!< [13..13] Compare B Status Modification Bit 2(Reset)                       */
      __OM  uint32_t MCC73R     : 1;            /*!< [14..14] Capture/Compare Status Modification Bits (Reset)                 */
            uint32_t            : 17;
    } bit;
  } CMPMODIF;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000BC) Compare State Modification Register 2                      */
    
    struct {
      __OM  uint32_t MC74S      : 1;            /*!< [0..0] Compare Status Modification Bit 4 (Set)                            */
      __OM  uint32_t MC75S      : 1;            /*!< [1..1] Compare Status Modification Bit 5 (Set)                            */
      __OM  uint32_t MC76S      : 1;            /*!< [2..2] Compare Status Modification Bit 6 (Set)                            */
            uint32_t            : 1;
      __IOM uint32_t CC70INV    : 1;            /*!< [4..4] Output channel CC70ST Inversion Enable                             */
      __IOM uint32_t CC71INV    : 1;            /*!< [5..5] Output channel CC71ST Inversion Enable                             */
      __IOM uint32_t CC72INV    : 1;            /*!< [6..6] Output channel CC72ST Inversion Enable                             */
            uint32_t            : 1;
      __OM  uint32_t MC74R      : 1;            /*!< [8..8] Compare Status Modification Bit 4(Reset)                           */
      __OM  uint32_t MC75R      : 1;            /*!< [9..9] Compare Status Modification Bit 5(Reset)                           */
      __OM  uint32_t MC76R      : 1;            /*!< [10..10] Compare Status Modification Bit 6(Reset)                         */
            uint32_t            : 1;
      __IOM uint32_t C70BINV    : 1;            /*!< [12..12] Output channel C70BST Inversion Enable                           */
      __IOM uint32_t C71BINV    : 1;            /*!< [13..13] Output channel C71BST Inversion Enable                           */
      __IOM uint32_t C72BINV    : 1;            /*!< [14..14] Output channel C72BST Inversion Enable                           */
            uint32_t            : 17;
    } bit;
  } CMPMODIF_2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000C0) T12 Capture/Compare Mode Select Register                   */
    
    struct {
      __IOM uint32_t MSEL70     : 4;            /*!< [3..0] Capture/Compare Mode Selection MSEL7x (x=0,1,2)                    */
      __IOM uint32_t MSEL71     : 4;            /*!< [7..4] Capture/Compare Mode Selection MSEL7x (x=0,1,2)                    */
      __IOM uint32_t MSEL72     : 4;            /*!< [11..8] Capture/Compare Mode Selection MSEL7x (x=0,1,2)                   */
      __IOM uint32_t HSYNC      : 3;            /*!< [14..12] Hall Synchronization                                             */
      __IOM uint32_t DBYP       : 1;            /*!< [15..15] Delay Bypass                                                     */
            uint32_t            : 16;
    } bit;
  } T12MSEL;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000C4) Timer Control Register 0                                   */
    
    struct {
            uint32_t            : 3;
      __IOM uint32_t T12PRE     : 1;            /*!< [3..3] Timer T12 Prescaler Bit                                            */
      __IM  uint32_t T12R       : 1;            /*!< [4..4] Timer T12 Run Bit                                                  */
      __IM  uint32_t STE12      : 1;            /*!< [5..5] Timer T12 Shadow Transfer Enable                                   */
      __IM  uint32_t CDIR       : 1;            /*!< [6..6] Count Direction of Timer T12                                       */
      __IOM uint32_t CTM        : 1;            /*!< [7..7] T12 Operating Mode                                                 */
            uint32_t            : 3;
      __IOM uint32_t T13PRE     : 1;            /*!< [11..11] Timer T13 Prescaler Bit                                          */
      __IM  uint32_t T13R       : 1;            /*!< [12..12] Timer T13 Run Bit                                                */
      __IM  uint32_t STE13      : 1;            /*!< [13..13] Timer T13 Shadow Transfer Enable                                 */
            uint32_t            : 18;
    } bit;
  } TCTR0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000C8) Timer Control Register 1                                   */
    
    struct {
            uint32_t            : 3;
      __IOM uint32_t T1xPRE     : 1;            /*!< [3..3] Timer T14 / 15 /16 Prescaler Bit                                   */
      __IM  uint32_t T14R       : 1;            /*!< [4..4] Timer T14 Run Bit                                                  */
      __IM  uint32_t STE14      : 1;            /*!< [5..5] Timer T14 Shadow Transfer Enable                                   */
            uint32_t            : 2;
      __IM  uint32_t T15R       : 1;            /*!< [8..8] Timer T15 Run Bit                                                  */
      __IM  uint32_t STE15      : 1;            /*!< [9..9] Timer T15 Shadow Transfer Enable                                   */
            uint32_t            : 2;
      __IM  uint32_t T16R       : 1;            /*!< [12..12] Timer T16 Run Bit                                                */
      __IM  uint32_t STE16      : 1;            /*!< [13..13] Timer T16 Shadow Transfer Enable                                 */
      __IM  uint32_t STE12      : 1;            /*!< [14..14] Timer T12 Shadow Transfer Enable                                 */
      __IM  uint32_t STE13      : 1;            /*!< [15..15] Timer T13 Shadow Transfer Enable                                 */
            uint32_t            : 16;
    } bit;
  } TCTR1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000CC) Timer Control Register 2                                   */
    
    struct {
      __IOM uint32_t T12SSC     : 1;            /*!< [0..0] Timer T12 Single Shot Control                                      */
      __IOM uint32_t T13SSC     : 1;            /*!< [1..1] Timer T13 Single Shot Control                                      */
      __IOM uint32_t T13TEC     : 3;            /*!< [4..2] T13 Trigger Event Control                                          */
      __IOM uint32_t T13TED     : 2;            /*!< [6..5] Timer T13 Trigger Event Direction                                  */
            uint32_t            : 1;
      __IOM uint32_t T12RSEL    : 2;            /*!< [9..8] Timer T12 External Run Selection                                   */
      __IOM uint32_t T13RSEL    : 2;            /*!< [11..10] Timer T13 External Run Selection                                 */
            uint32_t            : 20;
    } bit;
  } TCTR2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000D0) Timer Control Register 24                                  */
    
    struct {
      __IOM uint32_t T1xSSC     : 1;            /*!< [0..0] Timer T1x Single Shot Control                                      */
      __IOM uint32_t T1xTEC     : 3;            /*!< [3..1] T1x Trigger Event Control                                          */
      __IOM uint32_t T1xTED     : 2;            /*!< [5..4] Timer T1x Trigger Event Direction                                  */
            uint32_t            : 2;
      __IOM uint32_t T1xRSEL    : 2;            /*!< [9..8] Timer T1x External Run Selection                                   */
            uint32_t            : 22;
    } bit;
  } TCTR24;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000D4) Timer Control Register 25                                  */
    
    struct {
      __IOM uint32_t T1xSSC     : 1;            /*!< [0..0] Timer T1x Single Shot Control                                      */
      __IOM uint32_t T1xTEC     : 3;            /*!< [3..1] T1x Trigger Event Control                                          */
      __IOM uint32_t T1xTED     : 2;            /*!< [5..4] Timer T1x Trigger Event Direction                                  */
            uint32_t            : 2;
      __IOM uint32_t T1xRSEL    : 2;            /*!< [9..8] Timer T1x External Run Selection                                   */
            uint32_t            : 22;
    } bit;
  } TCTR25;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000D8) Timer Control Register 26                                  */
    
    struct {
      __IOM uint32_t T1xSSC     : 1;            /*!< [0..0] Timer T1x Single Shot Control                                      */
      __IOM uint32_t T1xTEC     : 3;            /*!< [3..1] T1x Trigger Event Control                                          */
      __IOM uint32_t T1xTED     : 2;            /*!< [5..4] Timer T1x Trigger Event Direction                                  */
            uint32_t            : 2;
      __IOM uint32_t T1xRSEL    : 2;            /*!< [9..8] Timer T1x External Run Selection                                   */
            uint32_t            : 22;
    } bit;
  } TCTR26;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000DC) Timer Control Register 4                                   */
    
    struct {
      __OM  uint32_t T12RR      : 1;            /*!< [0..0] Timer T12 Run Reset                                                */
      __OM  uint32_t T12RS      : 1;            /*!< [1..1] Timer T12 Run Set                                                  */
      __OM  uint32_t T12RES     : 1;            /*!< [2..2] Timer T12 Reset                                                    */
      __OM  uint32_t DTRES      : 1;            /*!< [3..3] Dead-Time Counter Reset                                            */
            uint32_t            : 1;
      __OM  uint32_t T12CNT     : 1;            /*!< [5..5] Timer T12 Count Event                                              */
      __OM  uint32_t T12STR     : 1;            /*!< [6..6] Timer T12 Shadow Transfer Request                                  */
      __OM  uint32_t T12STD     : 1;            /*!< [7..7] Timer T12 Shadow Transfer Disable                                  */
      __OM  uint32_t T13RR      : 1;            /*!< [8..8] Timer T13 Run Reset                                                */
      __OM  uint32_t T13RS      : 1;            /*!< [9..9] Timer T13 Run Set                                                  */
      __OM  uint32_t T13RES     : 1;            /*!< [10..10] Timer T13 Reset                                                  */
            uint32_t            : 2;
      __OM  uint32_t T13CNT     : 1;            /*!< [13..13] Timer T13 Count Event                                            */
      __OM  uint32_t T13STR     : 1;            /*!< [14..14] Timer T13 Shadow Transfer Request                                */
      __OM  uint32_t T13STD     : 1;            /*!< [15..15] Timer T13 Shadow Transfer Disable                                */
            uint32_t            : 16;
    } bit;
  } TCTR4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000E0) Timer Control Register 44                                  */
    
    struct {
      __OM  uint32_t T1xRR      : 1;            /*!< [0..0] Timer T1x Run Reset                                                */
      __OM  uint32_t T1xRS      : 1;            /*!< [1..1] Timer T1x Run Set                                                  */
      __OM  uint32_t T1xRES     : 1;            /*!< [2..2] Timer T1x Reset                                                    */
            uint32_t            : 1;
      __OM  uint32_t T1xCNT     : 1;            /*!< [4..4] Timer T1x Count Event                                              */
      __OM  uint32_t T1xSTR     : 1;            /*!< [5..5] Timer T1x Shadow Transfer Request                                  */
      __OM  uint32_t T1xSTD     : 1;            /*!< [6..6] Timer T1x Shadow Transfer Disable                                  */
            uint32_t            : 25;
    } bit;
  } TCTR44;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000E4) Timer Control Register 45                                  */
    
    struct {
      __OM  uint32_t T1xRR      : 1;            /*!< [0..0] Timer T1x Run Reset                                                */
      __OM  uint32_t T1xRS      : 1;            /*!< [1..1] Timer T1x Run Set                                                  */
      __OM  uint32_t T1xRES     : 1;            /*!< [2..2] Timer T1x Reset                                                    */
            uint32_t            : 1;
      __OM  uint32_t T1xCNT     : 1;            /*!< [4..4] Timer T1x Count Event                                              */
      __OM  uint32_t T1xSTR     : 1;            /*!< [5..5] Timer T1x Shadow Transfer Request                                  */
      __OM  uint32_t T1xSTD     : 1;            /*!< [6..6] Timer T1x Shadow Transfer Disable                                  */
            uint32_t            : 25;
    } bit;
  } TCTR45;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000E8) Timer Control Register 46                                  */
    
    struct {
      __OM  uint32_t T1xRR      : 1;            /*!< [0..0] Timer T1x Run Reset                                                */
      __OM  uint32_t T1xRS      : 1;            /*!< [1..1] Timer T1x Run Set                                                  */
      __OM  uint32_t T1xRES     : 1;            /*!< [2..2] Timer T1x Reset                                                    */
            uint32_t            : 1;
      __OM  uint32_t T1xCNT     : 1;            /*!< [4..4] Timer T1x Count Event                                              */
      __OM  uint32_t T1xSTR     : 1;            /*!< [5..5] Timer T1x Shadow Transfer Request                                  */
      __OM  uint32_t T1xSTD     : 1;            /*!< [6..6] Timer T1x Shadow Transfer Disable                                  */
            uint32_t            : 25;
    } bit;
  } TCTR46;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000EC) Modulation Control Register                                */
    
    struct {
      __IOM uint32_t T12MODEN_CC70 : 1;         /*!< [0..0] T12 Modulation Enable                                              */
      __IOM uint32_t T12MODEN_COUT70 : 1;       /*!< [1..1] T12 Modulation Enable                                              */
      __IOM uint32_t T12MODEN_CC71 : 1;         /*!< [2..2] T12 Modulation Enable                                              */
      __IOM uint32_t T12MODEN_COUT71 : 1;       /*!< [3..3] T12 Modulation Enable                                              */
      __IOM uint32_t T12MODEN_CC72 : 1;         /*!< [4..4] T12 Modulation Enable                                              */
      __IOM uint32_t T12MODEN_COUT72 : 1;       /*!< [5..5] T12 Modulation Enable                                              */
            uint32_t            : 1;
      __IOM uint32_t MCMEN      : 1;            /*!< [7..7] Multi-Channel Mode Enable                                          */
      __IOM uint32_t T13MODEN_CC70 : 1;         /*!< [8..8] T13 Modulation Enable                                              */
      __IOM uint32_t T13MODEN_COUT70 : 1;       /*!< [9..9] T13 Modulation Enable                                              */
      __IOM uint32_t T13MODEN_CC71 : 1;         /*!< [10..10] T13 Modulation Enable                                            */
      __IOM uint32_t T13MODEN_COUT71 : 1;       /*!< [11..11] T13 Modulation Enable                                            */
      __IOM uint32_t T13MODEN_CC72 : 1;         /*!< [12..12] T13 Modulation Enable                                            */
      __IOM uint32_t T13MODEN_COUT72 : 1;       /*!< [13..13] T13 Modulation Enable                                            */
            uint32_t            : 1;
      __IOM uint32_t ECT13O     : 1;            /*!< [15..15] Enable Compare Timer T13 Output                                  */
            uint32_t            : 16;
    } bit;
  } MODCTR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000F0) Trap Control Register                                      */
    
    struct {
      __IOM uint32_t TRPM0      : 1;            /*!< [0..0] Trap Mode Control Bit 0 - TRPM0                                    */
      __IOM uint32_t TRPM1      : 1;            /*!< [1..1] Trap Mode Control Bit 1 - TRPM1                                    */
      __IOM uint32_t TRPM2      : 1;            /*!< [2..2] Trap Mode Control Bit 2 - TRPM2                                    */
            uint32_t            : 5;
      __IOM uint32_t TRPEN      : 6;            /*!< [13..8] Trap Enable Control                                               */
      __IOM uint32_t TRPEN13    : 1;            /*!< [14..14] Trap Enable Control for Timer T13                                */
      __IOM uint32_t TRPPEN     : 1;            /*!< [15..15] Trap Pin Enable - TRPPEN                                         */
            uint32_t            : 16;
    } bit;
  } TRPCTR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000F4) Passive State Level Register                               */
    
    struct {
      __IOM uint32_t PSL_CC70   : 1;            /*!< [0..0] Compare Outputs Passive State Level                                */
      __IOM uint32_t PSL_COUT70 : 1;            /*!< [1..1] Compare Outputs Passive State Level                                */
      __IOM uint32_t PSL_CC71   : 1;            /*!< [2..2] Compare Outputs Passive State Level                                */
      __IOM uint32_t PSL_COUT71 : 1;            /*!< [3..3] Compare Outputs Passive State Level                                */
      __IOM uint32_t PSL_CC72   : 1;            /*!< [4..4] Compare Outputs Passive State Level                                */
      __IOM uint32_t PSL_COUT72 : 1;            /*!< [5..5] Compare Outputs Passive State Level                                */
            uint32_t            : 1;
      __IOM uint32_t PSL73      : 1;            /*!< [7..7] Passive State Level of Output COUT73                               */
            uint32_t            : 24;
    } bit;
  } PSLR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000F8) Multi-Channel Mode Output Shadow Register                  */
    
    struct {
      __IOM uint32_t MCMPS      : 6;            /*!< [5..0] Multi-Channel PWM Pattern Shadow                                   */
            uint32_t            : 1;
      __OM  uint32_t STRMCM     : 1;            /*!< [7..7] Shadow Transfer Request for MCMPS - STRMCM                         */
      __IOM uint32_t EXPHS      : 3;            /*!< [10..8] Expected Hall Pattern Shadow                                      */
      __IOM uint32_t CURHS      : 3;            /*!< [13..11] Current Hall Pattern Shadow                                      */
            uint32_t            : 1;
      __OM  uint32_t STRHP      : 1;            /*!< [15..15] Shadow Transfer Request for the Hall Pattern - STRHP             */
            uint32_t            : 16;
    } bit;
  } MCMOUTS;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x000000FC) Multi-Channel Mode Output Register                         */
    
    struct {
      __IM  uint32_t MCMP       : 6;            /*!< [5..0] Multi-Channel PWM Pattern                                          */
      __IM  uint32_t R          : 1;            /*!< [6..6] Reminder Flag                                                      */
            uint32_t            : 1;
      __IM  uint32_t EXPH       : 3;            /*!< [10..8] Expected Hall Pattern - EXPH                                      */
      __IM  uint32_t CURH       : 3;            /*!< [13..11] Current Hall Pattern - CURH                                      */
            uint32_t            : 18;
    } bit;
  } MCMOUT;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000100) Multi-Channel Mode Control Register                        */
    
    struct {
      __IOM uint32_t SWSEL      : 3;            /*!< [2..0] Switching Selection                                                */
            uint32_t            : 1;
      __IOM uint32_t SWSYN      : 2;            /*!< [5..4] Switching Synchronization                                          */
            uint32_t            : 2;
      __IOM uint32_t STE12U     : 1;            /*!< [8..8] Shadow Transfer Enable for T12 Upcounting                          */
      __IOM uint32_t STE12D     : 1;            /*!< [9..9] Shadow Transfer Enable for T12 Downcounting                        */
      __IOM uint32_t STE13U     : 1;            /*!< [10..10] Shadow Transfer Enable for T13 Upcounting                        */
            uint32_t            : 21;
    } bit;
  } MCMCTR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000104) Input Monitoring Register                                  */
    
    struct {
      __IOM uint32_t LBE        : 1;            /*!< [0..0] Lost Bit Event - LBE                                               */
      __IOM uint32_t CCPOS0I    : 1;            /*!< [1..1] Event indication for input signal CCPOS0 - CCPOS0I                 */
      __IOM uint32_t CCPOS1I    : 1;            /*!< [2..2] Event indication for input signal CCPOS1 - CCPOS1I                 */
      __IOM uint32_t CCPOS2I    : 1;            /*!< [3..3] Event indication for input signal CCPOS2 - CCPOS2I                 */
      __IOM uint32_t CC70INI    : 1;            /*!< [4..4] Event indication for input signal CC70IN - CC70INI                 */
      __IOM uint32_t CC71INI    : 1;            /*!< [5..5] Event indication for input signal CC71IN - CC71INI                 */
      __IOM uint32_t CC72INI    : 1;            /*!< [6..6] Event indication for input signal CC72IN - CC72INI                 */
      __IOM uint32_t CTRAPI     : 1;            /*!< [7..7] Event indication for input signal CTRAP - CTRAPI                   */
      __IOM uint32_t T12HRI     : 1;            /*!< [8..8] Event indication for input signal T12HR - T12HRI                   */
      __IOM uint32_t T13HRI     : 1;            /*!< [9..9] Event indication for input signal T13HR - T13HRI                   */
            uint32_t            : 22;
    } bit;
  } IMON;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000108) Lost Indicator Register                                    */
    
    struct {
            uint32_t            : 1;
      __IOM uint32_t CCPOS0EN   : 1;            /*!< [1..1] Lost Indicator Enable for input signal CCPOS0 - CCPOS0EN           */
      __IOM uint32_t CCPOS1EN   : 1;            /*!< [2..2] Lost Indicator Enable for input signal CCPOS1 - CCPOS1EN           */
      __IOM uint32_t CCPOS2EN   : 1;            /*!< [3..3] Lost Indicator Enable for input signal CCPOS2 - CCPOS2EN           */
      __IOM uint32_t CC70INEN   : 1;            /*!< [4..4] Lost Indicator Enable for input signal CC70IN - CC70INEN           */
      __IOM uint32_t CC71INEN   : 1;            /*!< [5..5] Lost Indicator Enable for input signal CC71IN - CC71INEN           */
      __IOM uint32_t CC72INEN   : 1;            /*!< [6..6] Lost Indicator Enable for input signal CC72IN - CC72INEN           */
      __IOM uint32_t CTRAPEN    : 1;            /*!< [7..7] Lost Indicator Enable for input signal CTRAP - CTRAPEN             */
      __IOM uint32_t T12HREN    : 1;            /*!< [8..8] Lost Indicator Enable for input signal T12HR - T12HREN             */
      __IOM uint32_t T13HREN    : 1;            /*!< [9..9] Lost Indicator Enable for input signal T13HR - T13HREN             */
            uint32_t            : 3;
      __IOM uint32_t LBEEN      : 1;            /*!< [13..13] Interrupt Enable for Lost Bit Event - LBEEN                      */
      __IOM uint32_t INPLBE     : 2;            /*!< [15..14] Interrupt Node Pointer for lost bit event - INPLBE               */
            uint32_t            : 16;
    } bit;
  } LI;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x0000010C) Capture/Compare Interrupt Status Register 1                */
    
    struct {
      __IM  uint32_t ICC70R     : 1;            /*!< [0..0] Capture, Compare-Match Rising Edge Flag                            */
      __IM  uint32_t ICC70F     : 1;            /*!< [1..1] Capture, Compare-Match Falling Edge Flag                           */
      __IM  uint32_t ICC71R     : 1;            /*!< [2..2] Capture, Compare-Match Rising Edge Flag                            */
      __IM  uint32_t ICC71F     : 1;            /*!< [3..3] Capture, Compare-Match Falling Edge Flag                           */
      __IM  uint32_t ICC72R     : 1;            /*!< [4..4] Capture, Compare-Match Rising Edge Flag                            */
      __IM  uint32_t ICC72F     : 1;            /*!< [5..5] Capture, Compare-Match Falling Edge Flag                           */
      __IM  uint32_t T12OM      : 1;            /*!< [6..6] Timer T12 One-Match Flag                                           */
      __IM  uint32_t T12PM      : 1;            /*!< [7..7] Timer T12 Period-Match Flag                                        */
      __IM  uint32_t T13CM      : 1;            /*!< [8..8] Timer T13 Compare-Match Flag                                       */
      __IM  uint32_t T13PM      : 1;            /*!< [9..9] Timer T13 Period-Match Flag                                        */
      __IM  uint32_t TRPF       : 1;            /*!< [10..10] Trap Flag                                                        */
      __IM  uint32_t TRPS       : 1;            /*!< [11..11] Trap State                                                       */
      __IM  uint32_t CHE        : 1;            /*!< [12..12] Correct Hall Event                                               */
      __IM  uint32_t WHE        : 1;            /*!< [13..13] Wrong Hall Event                                                 */
      __IM  uint32_t IDLE       : 1;            /*!< [14..14] IDLE State                                                       */
      __IM  uint32_t STR        : 1;            /*!< [15..15] Multi-Channel Mode Shadow Transfer Request                       */
            uint32_t            : 16;
    } bit;
  } IS;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000110) Capture/Compare Interrupt Status Set Register
                                                                    1                                                          */
    
    struct {
      __OM  uint32_t SCC70R     : 1;            /*!< [0..0] Set Capture, Compare-Match Rising Edge Flag                        */
      __OM  uint32_t SCC70F     : 1;            /*!< [1..1] Set Capture, Compare-Match Falling Edge Flag                       */
      __OM  uint32_t SCC71R     : 1;            /*!< [2..2] Set Capture, Compare-Match Rising Edge Flag                        */
      __OM  uint32_t SCC71F     : 1;            /*!< [3..3] Set Capture, Compare-Match Falling Edge Flag                       */
      __OM  uint32_t SCC72R     : 1;            /*!< [4..4] Set Capture, Compare-Match Rising Edge Flag                        */
      __OM  uint32_t SCC72F     : 1;            /*!< [5..5] Set Capture, Compare-Match Falling Edge Flag                       */
      __OM  uint32_t ST12OM     : 1;            /*!< [6..6] Set Timer T12 One-Match Flag                                       */
      __OM  uint32_t ST12PM     : 1;            /*!< [7..7] Set Timer T12 Period-Match Flag                                    */
      __OM  uint32_t ST13CM     : 1;            /*!< [8..8] Set Timer T13 Compare-Match Flag                                   */
      __OM  uint32_t ST13PM     : 1;            /*!< [9..9] Set Timer T13 Period-Match Flag                                    */
      __OM  uint32_t STRPF      : 1;            /*!< [10..10] Set Trap Flag                                                    */
      __OM  uint32_t SWHC       : 1;            /*!< [11..11] Software Hall Compare                                            */
      __OM  uint32_t SCHE       : 1;            /*!< [12..12] Set Correct Hall Event Flag                                      */
      __OM  uint32_t SWHE       : 1;            /*!< [13..13] Set Wrong Hall Event Flag                                        */
      __OM  uint32_t SIDLE      : 1;            /*!< [14..14] Set IDLE Flag                                                    */
      __OM  uint32_t SSTR       : 1;            /*!< [15..15] Set STR Flag                                                     */
            uint32_t            : 16;
    } bit;
  } ISS;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000114) Capture/Compare Interrupt Status Reset Register
                                                                    1                                                          */
    
    struct {
      __OM  uint32_t RCC70R     : 1;            /*!< [0..0] Reset Capture, Compare-Match Rising Edge Flag                      */
      __OM  uint32_t RCC70F     : 1;            /*!< [1..1] Reset Capture, Compare-Match Falling Edge Flag                     */
      __OM  uint32_t RCC71R     : 1;            /*!< [2..2] Reset Capture, Compare-Match Rising Edge Flag                      */
      __OM  uint32_t RCC71F     : 1;            /*!< [3..3] Reset Capture, Compare-Match Falling Edge Flag                     */
      __OM  uint32_t RCC72R     : 1;            /*!< [4..4] Reset Capture, Compare-Match Rising Edge Flag                      */
      __OM  uint32_t RCC72F     : 1;            /*!< [5..5] Reset Capture, Compare-Match Falling Edge Flag                     */
      __OM  uint32_t RT12OM     : 1;            /*!< [6..6] Reset Timer T12 One-Match Flag                                     */
      __OM  uint32_t RT12PM     : 1;            /*!< [7..7] Reset Timer T12 Period-Match Flag                                  */
      __OM  uint32_t RT13CM     : 1;            /*!< [8..8] Reset Timer T13 Compare-Match Flag                                 */
      __OM  uint32_t RT13PM     : 1;            /*!< [9..9] Reset Timer T13 Period-Match Flag                                  */
      __OM  uint32_t RTRPF      : 1;            /*!< [10..10] Reset Trap Flag                                                  */
            uint32_t            : 1;
      __OM  uint32_t RCHE       : 1;            /*!< [12..12] Reset Correct Hall Event Flag                                    */
      __OM  uint32_t RWHE       : 1;            /*!< [13..13] Reset Wrong Hall Event Flag                                      */
      __OM  uint32_t RIDLE      : 1;            /*!< [14..14] Reset IDLE Flag                                                  */
      __OM  uint32_t RSTR       : 1;            /*!< [15..15] Reset STR Flag                                                   */
            uint32_t            : 16;
    } bit;
  } ISR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000118) Capture/Compare Interrupt Node Pointer Register
                                                                    1                                                          */
    
    struct {
      __IOM uint32_t INPCC70    : 2;            /*!< [1..0] Interrupt Node Pointer for Channel 0 Interrupts                    */
      __IOM uint32_t INPCC71    : 2;            /*!< [3..2] Interrupt Node Pointer for Channel 1 Interrupts                    */
      __IOM uint32_t INPCC72    : 2;            /*!< [5..4] Interrupt Node Pointer for Channel 2 Interrupts                    */
      __IOM uint32_t INPCHE     : 2;            /*!< [7..6] Interrupt Node Pointer for the CHE Interrupt                       */
      __IOM uint32_t INPERR     : 2;            /*!< [9..8] Interrupt Node Pointer for Error Interrupts                        */
      __IOM uint32_t INPT12     : 2;            /*!< [11..10] Interrupt Node Pointer for Timer T12 Interrupts                  */
      __IOM uint32_t INPT13     : 2;            /*!< [13..12] Interrupt Node Pointer for Timer T13 Interrupts                  */
            uint32_t            : 18;
    } bit;
  } INP;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000011C) Capture/Compare Interrupt Enable Register 1                */
    
    struct {
      __IOM uint32_t ENCC70R    : 1;            /*!< [0..0] Capture, Compare-Match Rising Edge Interrupt Enable for
                                                     Channel 0                                                                 */
      __IOM uint32_t ENCC70F    : 1;            /*!< [1..1] Capture, Compare-Match Falling Edge Interrupt Enable
                                                     for Channel 0                                                             */
      __IOM uint32_t ENCC71R    : 1;            /*!< [2..2] Capture, Compare-Match Rising Edge Interrupt Enable for
                                                     Channel 1                                                                 */
      __IOM uint32_t ENCC71F    : 1;            /*!< [3..3] Capture, Compare-Match Falling Edge Interrupt Enable
                                                     for Channel 1                                                             */
      __IOM uint32_t ENCC72R    : 1;            /*!< [4..4] Capture, Compare-Match Rising Edge Interrupt Enable for
                                                     Channel 2                                                                 */
      __IOM uint32_t ENCC72F    : 1;            /*!< [5..5] Capture, Compare-Match Falling Edge Interrupt Enable
                                                     for Channel 2                                                             */
      __IOM uint32_t ENT12OM    : 1;            /*!< [6..6] Enable Interrupt for T12 One-Match                                 */
      __IOM uint32_t ENT12PM    : 1;            /*!< [7..7] Enable Interrupt for T12 Period-Match                              */
      __IOM uint32_t ENT13CM    : 1;            /*!< [8..8] Enable Interrupt for T13 Compare-Match                             */
      __IOM uint32_t ENT13PM    : 1;            /*!< [9..9] Enable Interrupt for T13 Period-Match                              */
      __IOM uint32_t ENTRPF     : 1;            /*!< [10..10] Enable Interrupt for Trap Flag                                   */
            uint32_t            : 1;
      __IOM uint32_t ENCHE      : 1;            /*!< [12..12] Enable Interrupt for Correct Hall Event                          */
      __IOM uint32_t ENWHE      : 1;            /*!< [13..13] Enable Interrupt for Wrong Hall Event                            */
      __IOM uint32_t ENIDLE     : 1;            /*!< [14..14] Enable Idle                                                      */
      __IOM uint32_t ENSTR      : 1;            /*!< [15..15] Enable Multi-Channel Mode Shadow Transfer Interrupt              */
            uint32_t            : 16;
    } bit;
  } IEN;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000120) Capture/Compare Interrupt Status Register 2                */
    
    struct {
      __IM  uint32_t ICC70BR    : 1;            /*!< [0..0] Capture, Compare-Match Rising Edge Flag                            */
      __IM  uint32_t ICC70BF    : 1;            /*!< [1..1] Capture, Compare-Match Falling Edge Flag                           */
      __IM  uint32_t ICC71BR    : 1;            /*!< [2..2] Capture, Compare-Match Rising Edge Flag                            */
      __IM  uint32_t ICC71BF    : 1;            /*!< [3..3] Capture, Compare-Match Falling Edge Flag                           */
      __IM  uint32_t ICC72BR    : 1;            /*!< [4..4] Capture, Compare-Match Rising Edge Flag                            */
      __IM  uint32_t ICC72BF    : 1;            /*!< [5..5] Capture, Compare-Match Falling Edge Flag                           */
            uint32_t            : 2;
      __IM  uint32_t T14CM      : 1;            /*!< [8..8] Timer T14 Compare-Match Flag                                       */
      __IM  uint32_t T14PM      : 1;            /*!< [9..9] Timer T14 Period-Match Flag                                        */
      __IM  uint32_t T15CM      : 1;            /*!< [10..10] Timer T15 Compare-Match Flag                                     */
      __IM  uint32_t T15PM      : 1;            /*!< [11..11] Timer T15 Period-Match Flag                                      */
      __IM  uint32_t T16CM      : 1;            /*!< [12..12] Timer T16 Compare-Match Flag                                     */
      __IM  uint32_t T16PM      : 1;            /*!< [13..13] Timer T16 Period-Match Flag                                      */
            uint32_t            : 18;
    } bit;
  } IS_2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000124) Capture/Compare Interrupt Status Set Register
                                                                    2                                                          */
    
    struct {
      __OM  uint32_t SCC70BR    : 1;            /*!< [0..0] Set Capture, Compare-Match Rising Edge Flag                        */
      __OM  uint32_t SCC70BF    : 1;            /*!< [1..1] Set Capture, Compare-Match Falling Edge Flag                       */
      __OM  uint32_t SCC71BR    : 1;            /*!< [2..2] Set Capture, Compare-Match Rising Edge Flag                        */
      __OM  uint32_t SCC71BF    : 1;            /*!< [3..3] Set Capture, Compare-Match Falling Edge Flag                       */
      __OM  uint32_t SCC72BR    : 1;            /*!< [4..4] Set Capture, Compare-Match Rising Edge Flag                        */
      __OM  uint32_t SCC72BF    : 1;            /*!< [5..5] Set Capture, Compare-Match Falling Edge Flag                       */
            uint32_t            : 2;
      __OM  uint32_t ST14CM     : 1;            /*!< [8..8] Set Timer T14 Compare-Match Flag                                   */
      __OM  uint32_t ST14PM     : 1;            /*!< [9..9] Set Timer T14 Period-Match Flag                                    */
      __OM  uint32_t ST15CM     : 1;            /*!< [10..10] Set Timer T15 Compare-Match Flag                                 */
      __OM  uint32_t ST15PM     : 1;            /*!< [11..11] Set Timer T15 Period-Match Flag                                  */
      __OM  uint32_t ST16CM     : 1;            /*!< [12..12] Set Timer T16 Compare-Match Flag                                 */
      __OM  uint32_t ST16PM     : 1;            /*!< [13..13] Set Timer T16 Period-Match Flag                                  */
            uint32_t            : 18;
    } bit;
  } ISS_2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000128) Capture/Compare Interrupt Status Reset Register
                                                                    2                                                          */
    
    struct {
      __OM  uint32_t RCC70BR    : 1;            /*!< [0..0] Reset Capture, Compare-Match Rising Edge Flag                      */
      __OM  uint32_t RCC70BF    : 1;            /*!< [1..1] Reset Capture, Compare-Match Falling Edge Flag                     */
      __OM  uint32_t RCC71BR    : 1;            /*!< [2..2] Reset Capture, Compare-Match Rising Edge Flag                      */
      __OM  uint32_t RCC71BF    : 1;            /*!< [3..3] Reset Capture, Compare-Match Falling Edge Flag                     */
      __OM  uint32_t RCC72BR    : 1;            /*!< [4..4] Reset Capture, Compare-Match Rising Edge Flag                      */
      __OM  uint32_t RCC72BF    : 1;            /*!< [5..5] Reset Capture, Compare-Match Falling Edge Flag                     */
            uint32_t            : 2;
      __OM  uint32_t RT14CM     : 1;            /*!< [8..8] Reset Timer T14 Compare-Match Flag                                 */
      __OM  uint32_t RT14PM     : 1;            /*!< [9..9] Reset Timer T14 Period-Match Flag                                  */
      __OM  uint32_t RT15CM     : 1;            /*!< [10..10] Reset Timer T15 Compare-Match Flag                               */
      __OM  uint32_t RT15PM     : 1;            /*!< [11..11] Reset Timer T15 Period-Match Flag                                */
      __OM  uint32_t RT16CM     : 1;            /*!< [12..12] Reset Timer T16 Compare-Match Flag                               */
      __OM  uint32_t RT16PM     : 1;            /*!< [13..13] Reset Timer T16 Period-Match Flag                                */
            uint32_t            : 18;
    } bit;
  } ISR_2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000012C) Capture/Compare Interrupt Node Pointer Register
                                                                    2                                                          */
    
    struct {
      __IOM uint32_t INPCC70B   : 2;            /*!< [1..0] Interrupt Node Pointer for Channel 0 Interrupts                    */
      __IOM uint32_t INPCC71B   : 2;            /*!< [3..2] Interrupt Node Pointer for Channel 1 Interrupts                    */
      __IOM uint32_t INPCC72B   : 2;            /*!< [5..4] Interrupt Node Pointer for Channel 2 Interrupts                    */
            uint32_t            : 2;
      __IOM uint32_t INPT14     : 2;            /*!< [9..8] Interrupt Node Pointer for Timer T14 Interrupts                    */
      __IOM uint32_t INPT15     : 2;            /*!< [11..10] Interrupt Node Pointer for Timer T15 Interrupts                  */
      __IOM uint32_t INPT16     : 2;            /*!< [13..12] Interrupt Node Pointer for Timer T16 Interrupts                  */
            uint32_t            : 18;
    } bit;
  } INP_2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000130) Capture/Compare Interrupt Enable Register 2                */
    
    struct {
      __IOM uint32_t ENCC70BR   : 1;            /*!< [0..0] Capture, Compare-Match Rising Edge Interrupt Enable for
                                                     Channel 0                                                                 */
      __IOM uint32_t ENCC70BF   : 1;            /*!< [1..1] Capture, Compare-Match Falling Edge Interrupt Enable
                                                     for Channel 0                                                             */
      __IOM uint32_t ENCC71BR   : 1;            /*!< [2..2] Capture, Compare-Match Rising Edge Interrupt Enable for
                                                     Channel 1                                                                 */
      __IOM uint32_t ENCC71BF   : 1;            /*!< [3..3] Capture, Compare-Match Falling Edge Interrupt Enable
                                                     for Channel 1                                                             */
      __IOM uint32_t ENCC72BR   : 1;            /*!< [4..4] Capture, Compare-Match Rising Edge Interrupt Enable for
                                                     Channel 2                                                                 */
      __IOM uint32_t ENCC72BF   : 1;            /*!< [5..5] Capture, Compare-Match Falling Edge Interrupt Enable
                                                     for Channel 2                                                             */
            uint32_t            : 2;
      __IOM uint32_t ENT14CM    : 1;            /*!< [8..8] Enable Interrupt for T14 Compare-Match                             */
      __IOM uint32_t ENT14PM    : 1;            /*!< [9..9] Enable Interrupt for T14 Period-Match                              */
      __IOM uint32_t ENT15CM    : 1;            /*!< [10..10] Enable Interrupt for T15 Compare-Match                           */
      __IOM uint32_t ENT15PM    : 1;            /*!< [11..11] Enable Interrupt for T15 Period-Match                            */
      __IOM uint32_t ENT16CM    : 1;            /*!< [12..12] Enable Interrupt for T16 Compare-Match                           */
      __IOM uint32_t ENT16PM    : 1;            /*!< [13..13] Enable Interrupt for T16 Period-Match                            */
            uint32_t            : 18;
    } bit;
  } IEN_2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000134) OCDS Control and Status Register                           */
    
    struct {
            uint32_t            : 24;
      __IOM uint32_t SUS        : 4;            /*!< [27..24] OCDS Suspend Control - SUS                                       */
      __OM  uint32_t SUS_P      : 1;            /*!< [28..28] SUS Write Protection - SUS_P                                     */
      __IM  uint32_t SUSSTA     : 1;            /*!< [29..29] Suspend State - SUSSTA                                           */
            uint32_t            : 2;
    } bit;
  } OCS;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000138) Fractional Divider$x                                       */
    
    struct {
      __IOM uint32_t PQ         : 16;           /*!< [15..0] PQ                                                                */
            uint32_t            : 16;
    } bit;
  } T_FDIV0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000013C) Fractional Divider$x                                       */
    
    struct {
      __IOM uint32_t PQ         : 16;           /*!< [15..0] PQ                                                                */
            uint32_t            : 16;
    } bit;
  } T_FDIV1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000140) Timer Clock Selection                                      */
    
    struct {
      __IOM uint32_t T12_CLK_SEL : 2;           /*!< [1..0] Clock selector for Timer 12                                        */
      __IOM uint32_t T13_CLK_SEL : 2;           /*!< [3..2] Clock selector for Timer 13                                        */
      __IOM uint32_t T14_CLK_SEL : 2;           /*!< [5..4] Clock selector for Timer 14                                        */
      __IOM uint32_t T15_CLK_SEL : 2;           /*!< [7..6] Clock selector for Timer 15                                        */
      __IOM uint32_t T16_CLK_SEL : 2;           /*!< [9..8] Clock selector for Timer 16                                        */
      __IOM uint32_t DT_CLK_SEL : 2;            /*!< [11..10] Clock Selector for dead time control                             */
      __IOM uint32_t FDIV0_SEL  : 1;            /*!< [12..12] FDIV0 Mode Selection                                             */
      __IOM uint32_t FDIV1_SEL  : 1;            /*!< [13..13] FDIV1 Mode Selection                                             */
            uint32_t            : 18;
    } bit;
  } T_CLK_CTRL;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000144) Timer Control Register 3                                   */
    
    struct {
      __OM  uint32_t T12STR     : 1;            /*!< [0..0] Timer T12 Shadow Transfer Request                                  */
      __OM  uint32_t T13STR     : 1;            /*!< [1..1] Timer T13 Shadow Transfer Request                                  */
      __OM  uint32_t T14STR     : 1;            /*!< [2..2] Timer T14 Shadow Transfer Request                                  */
      __OM  uint32_t T15STR     : 1;            /*!< [3..3] Timer T15 Shadow Transfer Request                                  */
      __OM  uint32_t T16STR     : 1;            /*!< [4..4] Timer T16 Shadow Transfer Request                                  */
            uint32_t            : 3;
      __OM  uint32_t T12STD     : 1;            /*!< [8..8] Timer T12 Shadow Transfer Disable                                  */
      __OM  uint32_t T13STD     : 1;            /*!< [9..9] Timer T13 Shadow Transfer Disable                                  */
      __OM  uint32_t T14STD     : 1;            /*!< [10..10] Timer T14 Shadow Transfer Disable                                */
      __OM  uint32_t T15STD     : 1;            /*!< [11..11] Timer T15 Shadow Transfer Disable                                */
      __OM  uint32_t T16STD     : 1;            /*!< [12..12] Timer T16 Shadow Transfer Disable                                */
            uint32_t            : 19;
    } bit;
  } TCTR3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000148) Interupt gating Register                                   */
    
    struct {
      __IOM uint32_t GT0        : 2;            /*!< [1..0] Gating SR0                                                         */
            uint32_t            : 2;
      __IOM uint32_t GT1        : 2;            /*!< [5..4] Gating SR1                                                         */
            uint32_t            : 2;
      __IOM uint32_t GT2        : 2;            /*!< [9..8] Gating SR2                                                         */
            uint32_t            : 2;
      __IOM uint32_t GT3        : 2;            /*!< [13..12] Gating SR3                                                       */
            uint32_t            : 18;
    } bit;
  } IGT;
} CCU7_Type;                                    /*!< Size = 332 (0x14c)                                                        */



/* =========================================================================================================================== */
/* ================                                            CPU                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief CPU (CPU)
  */

typedef struct {                                /*!< (@ 0xE000E000) CPU Structure                                              */
  __IM  uint32_t  RESERVED;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000004) Interrupt Controller Type                                  */
    
    struct {
      __IM  uint32_t INTLINESNUM : 5;           /*!< [4..0] Total number of interrupt lines                                    */
            uint32_t            : 27;
    } bit;
  } ICT;
  __IM  uint32_t  RESERVED1[2];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) SysTick Control and Status                                 */
    
    struct {
      __IOM uint32_t ENABLE     : 1;            /*!< [0..0] SysTick counter enable                                             */
      __IOM uint32_t TICKINT    : 1;            /*!< [1..1] TICKINT                                                            */
      __IOM uint32_t CLKSOURCE  : 1;            /*!< [2..2] CLK SysTick timer clock source selection                           */
            uint32_t            : 13;
      __IM  uint32_t COUNTFLAG  : 1;            /*!< [16..16] Count Flag                                                       */
            uint32_t            : 15;
    } bit;
  } SYSTICK_CS;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000014) SysTick Reload Value                                       */
    
    struct {
      __IOM uint32_t RELOAD     : 24;           /*!< [23..0] Reload value for SysTick                                          */
            uint32_t            : 8;
    } bit;
  } SYSTICK_RL;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000018) SysTick Current Value                                      */
    
    struct {
      __IOM uint32_t CURRENT    : 24;           /*!< [23..0] Current value of SysTick                                          */
            uint32_t            : 8;
    } bit;
  } SYSTICK_CUR;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x0000001C) SysTick Calibration Value                                  */
    
    struct {
      __IM  uint32_t TENMS      : 24;           /*!< [23..0] Reload value used for 10 ms timing                                */
            uint32_t            : 6;
      __IM  uint32_t SKEW       : 1;            /*!< [30..30] Skew                                                             */
      __IM  uint32_t NOREF      : 1;            /*!< [31..31] Presence of a reference clock                                    */
    } bit;
  } SYSTICK_CAL;
  __IM  uint32_t  RESERVED2[56];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000100) Interrupt Set-Enable                                       */
    
    struct {
      __IOM uint32_t IRQEN0     : 1;            /*!< [0..0] IRQx interrupt set enable                                          */
      __IOM uint32_t IRQEN1     : 1;            /*!< [1..1] IRQx interrupt set enable                                          */
      __IOM uint32_t IRQEN2     : 1;            /*!< [2..2] IRQx interrupt set enable                                          */
      __IOM uint32_t IRQEN3     : 1;            /*!< [3..3] IRQx interrupt set enable                                          */
      __IOM uint32_t IRQEN4     : 1;            /*!< [4..4] IRQx interrupt set enable                                          */
      __IOM uint32_t IRQEN5     : 1;            /*!< [5..5] IRQx interrupt set enable                                          */
      __IOM uint32_t IRQEN6     : 1;            /*!< [6..6] IRQx interrupt set enable                                          */
      __IOM uint32_t IRQEN7     : 1;            /*!< [7..7] IRQx interrupt set enable                                          */
      __IOM uint32_t IRQEN8     : 1;            /*!< [8..8] IRQx interrupt set enable                                          */
      __IOM uint32_t IRQEN9     : 1;            /*!< [9..9] IRQx interrupt set enable                                          */
      __IOM uint32_t IRQEN10    : 1;            /*!< [10..10] IRQx interrupt set enable                                        */
      __IOM uint32_t IRQEN11    : 1;            /*!< [11..11] IRQx interrupt set enable                                        */
      __IOM uint32_t IRQEN12    : 1;            /*!< [12..12] IRQx interrupt set enable                                        */
      __IOM uint32_t IRQEN13    : 1;            /*!< [13..13] IRQx interrupt set enable                                        */
      __IOM uint32_t IRQEN14    : 1;            /*!< [14..14] IRQx interrupt set enable                                        */
      __IOM uint32_t IRQEN15    : 1;            /*!< [15..15] IRQx interrupt set enable                                        */
      __IOM uint32_t IRQEN16    : 1;            /*!< [16..16] IRQx interrupt set enable                                        */
      __IOM uint32_t IRQEN17    : 1;            /*!< [17..17] IRQx interrupt set enable                                        */
      __IOM uint32_t IRQEN18    : 1;            /*!< [18..18] IRQx interrupt set enable                                        */
      __IOM uint32_t IRQEN19    : 1;            /*!< [19..19] IRQx interrupt set enable                                        */
      __IOM uint32_t IRQEN20    : 1;            /*!< [20..20] IRQx interrupt set enable                                        */
      __IOM uint32_t IRQEN21    : 1;            /*!< [21..21] IRQx interrupt set enable                                        */
      __IOM uint32_t IRQEN22    : 1;            /*!< [22..22] IRQx interrupt set enable                                        */
      __IOM uint32_t IRQEN23    : 1;            /*!< [23..23] IRQx interrupt set enable                                        */
      __IOM uint32_t IRQEN24    : 1;            /*!< [24..24] IRQx interrupt set enable                                        */
      __IOM uint32_t IRQEN25    : 1;            /*!< [25..25] IRQx interrupt set enable                                        */
      __IOM uint32_t IRQEN26    : 1;            /*!< [26..26] IRQx interrupt set enable                                        */
      __IOM uint32_t IRQEN27    : 1;            /*!< [27..27] IRQx interrupt set enable                                        */
      __IOM uint32_t IRQEN28    : 1;            /*!< [28..28] IRQx interrupt set enable                                        */
      __IOM uint32_t IRQEN29    : 1;            /*!< [29..29] IRQx interrupt set enable                                        */
      __IOM uint32_t IRQEN30    : 1;            /*!< [30..30] IRQx interrupt set enable                                        */
      __IOM uint32_t IRQEN31    : 1;            /*!< [31..31] IRQx interrupt set enable                                        */
    } bit;
  } NVIC_ISER;
  __IM  uint32_t  RESERVED3[31];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000180) Interrupt Clear-Enable                                     */
    
    struct {
      __IOM uint32_t IRQCLREN0  : 1;            /*!< [0..0] IRQx interrupt clear enable                                        */
      __IOM uint32_t IRQCLREN1  : 1;            /*!< [1..1] IRQx interrupt clear enable                                        */
      __IOM uint32_t IRQCLREN2  : 1;            /*!< [2..2] IRQx interrupt clear enable                                        */
      __IOM uint32_t IRQCLREN3  : 1;            /*!< [3..3] IRQx interrupt clear enable                                        */
      __IOM uint32_t IRQCLREN4  : 1;            /*!< [4..4] IRQx interrupt clear enable                                        */
      __IOM uint32_t IRQCLREN5  : 1;            /*!< [5..5] IRQx interrupt clear enable                                        */
      __IOM uint32_t IRQCLREN6  : 1;            /*!< [6..6] IRQx interrupt clear enable                                        */
      __IOM uint32_t IRQCLREN7  : 1;            /*!< [7..7] IRQx interrupt clear enable                                        */
      __IOM uint32_t IRQCLREN8  : 1;            /*!< [8..8] IRQx interrupt clear enable                                        */
      __IOM uint32_t IRQCLREN9  : 1;            /*!< [9..9] IRQx interrupt clear enable                                        */
      __IOM uint32_t IRQCLREN10 : 1;            /*!< [10..10] IRQx interrupt clear enable                                      */
      __IOM uint32_t IRQCLREN11 : 1;            /*!< [11..11] IRQx interrupt clear enable                                      */
      __IOM uint32_t IRQCLREN12 : 1;            /*!< [12..12] IRQx interrupt clear enable                                      */
      __IOM uint32_t IRQCLREN13 : 1;            /*!< [13..13] IRQx interrupt clear enable                                      */
      __IOM uint32_t IRQCLREN14 : 1;            /*!< [14..14] IRQx interrupt clear enable                                      */
      __IOM uint32_t IRQCLREN15 : 1;            /*!< [15..15] IRQx interrupt clear enable                                      */
      __IOM uint32_t IRQCLREN16 : 1;            /*!< [16..16] IRQx interrupt clear enable                                      */
      __IOM uint32_t IRQCLREN17 : 1;            /*!< [17..17] IRQx interrupt clear enable                                      */
      __IOM uint32_t IRQCLREN18 : 1;            /*!< [18..18] IRQx interrupt clear enable                                      */
      __IOM uint32_t IRQCLREN19 : 1;            /*!< [19..19] IRQx interrupt clear enable                                      */
      __IOM uint32_t IRQCLREN20 : 1;            /*!< [20..20] IRQx interrupt clear enable                                      */
      __IOM uint32_t IRQCLREN21 : 1;            /*!< [21..21] IRQx interrupt clear enable                                      */
      __IOM uint32_t IRQCLREN22 : 1;            /*!< [22..22] IRQx interrupt clear enable                                      */
      __IOM uint32_t IRQCLREN23 : 1;            /*!< [23..23] IRQx interrupt clear enable                                      */
      __IOM uint32_t IRQCLREN24 : 1;            /*!< [24..24] IRQx interrupt clear enable                                      */
      __IOM uint32_t IRQCLREN25 : 1;            /*!< [25..25] IRQx interrupt clear enable                                      */
      __IOM uint32_t IRQCLREN26 : 1;            /*!< [26..26] IRQx interrupt clear enable                                      */
      __IOM uint32_t IRQCLREN27 : 1;            /*!< [27..27] IRQx interrupt clear enable                                      */
      __IOM uint32_t IRQCLREN28 : 1;            /*!< [28..28] IRQx interrupt clear enable                                      */
      __IOM uint32_t IRQCLREN29 : 1;            /*!< [29..29] IRQx interrupt clear enable                                      */
      __IOM uint32_t IRQCLREN30 : 1;            /*!< [30..30] IRQx interrupt clear enable                                      */
      __IOM uint32_t IRQCLREN31 : 1;            /*!< [31..31] IRQx interrupt clear enable                                      */
    } bit;
  } NVIC_ICER;
  __IM  uint32_t  RESERVED4[31];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000200) Interrupt Set-Pending                                      */
    
    struct {
      __IOM uint32_t IRQSETPEND0 : 1;           /*!< [0..0] IRQx interrupt set pending                                         */
      __IOM uint32_t IRQSETPEND1 : 1;           /*!< [1..1] IRQx interrupt set pending                                         */
      __IOM uint32_t IRQSETPEND2 : 1;           /*!< [2..2] IRQx interrupt set pending                                         */
      __IOM uint32_t IRQSETPEND3 : 1;           /*!< [3..3] IRQx interrupt set pending                                         */
      __IOM uint32_t IRQSETPEND4 : 1;           /*!< [4..4] IRQx interrupt set pending                                         */
      __IOM uint32_t IRQSETPEND5 : 1;           /*!< [5..5] IRQx interrupt set pending                                         */
      __IOM uint32_t IRQSETPEND6 : 1;           /*!< [6..6] IRQx interrupt set pending                                         */
      __IOM uint32_t IRQSETPEND7 : 1;           /*!< [7..7] IRQx interrupt set pending                                         */
      __IOM uint32_t IRQSETPEND8 : 1;           /*!< [8..8] IRQx interrupt set pending                                         */
      __IOM uint32_t IRQSETPEND9 : 1;           /*!< [9..9] IRQx interrupt set pending                                         */
      __IOM uint32_t IRQSETPEND10 : 1;          /*!< [10..10] IRQx interrupt set pending                                       */
      __IOM uint32_t IRQSETPEND11 : 1;          /*!< [11..11] IRQx interrupt set pending                                       */
      __IOM uint32_t IRQSETPEND12 : 1;          /*!< [12..12] IRQx interrupt set pending                                       */
      __IOM uint32_t IRQSETPEND13 : 1;          /*!< [13..13] IRQx interrupt set pending                                       */
      __IOM uint32_t IRQSETPEND14 : 1;          /*!< [14..14] IRQx interrupt set pending                                       */
      __IOM uint32_t IRQSETPEND15 : 1;          /*!< [15..15] IRQx interrupt set pending                                       */
      __IOM uint32_t IRQSETPEND16 : 1;          /*!< [16..16] IRQx interrupt set pending                                       */
      __IOM uint32_t IRQSETPEND17 : 1;          /*!< [17..17] IRQx interrupt set pending                                       */
      __IOM uint32_t IRQSETPEND18 : 1;          /*!< [18..18] IRQx interrupt set pending                                       */
      __IOM uint32_t IRQSETPEND19 : 1;          /*!< [19..19] IRQx interrupt set pending                                       */
      __IOM uint32_t IRQSETPEND20 : 1;          /*!< [20..20] IRQx interrupt set pending                                       */
      __IOM uint32_t IRQSETPEND21 : 1;          /*!< [21..21] IRQx interrupt set pending                                       */
      __IOM uint32_t IRQSETPEND22 : 1;          /*!< [22..22] IRQx interrupt set pending                                       */
      __IOM uint32_t IRQSETPEND23 : 1;          /*!< [23..23] IRQx interrupt set pending                                       */
      __IOM uint32_t IRQSETPEND24 : 1;          /*!< [24..24] IRQx interrupt set pending                                       */
      __IOM uint32_t IRQSETPEND25 : 1;          /*!< [25..25] IRQx interrupt set pending                                       */
      __IOM uint32_t IRQSETPEND26 : 1;          /*!< [26..26] IRQx interrupt set pending                                       */
      __IOM uint32_t IRQSETPEND27 : 1;          /*!< [27..27] IRQx interrupt set pending                                       */
      __IOM uint32_t IRQSETPEND28 : 1;          /*!< [28..28] IRQx interrupt set pending                                       */
      __IOM uint32_t IRQSETPEND29 : 1;          /*!< [29..29] IRQx interrupt set pending                                       */
      __IOM uint32_t IRQSETPEND30 : 1;          /*!< [30..30] IRQx interrupt set pending                                       */
      __IOM uint32_t IRQSETPEND31 : 1;          /*!< [31..31] IRQx interrupt set pending                                       */
    } bit;
  } NVIC_ISPR;
  __IM  uint32_t  RESERVED5[31];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000280) Interrupt Clear-Pending                                    */
    
    struct {
      __IOM uint32_t IRQCLRPEND0 : 1;           /*!< [0..0] IRQx interrupt clear pending                                       */
      __IOM uint32_t IRQCLRPEND1 : 1;           /*!< [1..1] IRQx interrupt clear pending                                       */
      __IOM uint32_t IRQCLRPEND2 : 1;           /*!< [2..2] IRQx interrupt clear pending                                       */
      __IOM uint32_t IRQCLRPEND3 : 1;           /*!< [3..3] IRQx interrupt clear pending                                       */
      __IOM uint32_t IRQCLRPEND4 : 1;           /*!< [4..4] IRQx interrupt clear pending                                       */
      __IOM uint32_t IRQCLRPEND5 : 1;           /*!< [5..5] IRQx interrupt clear pending                                       */
      __IOM uint32_t IRQCLRPEND6 : 1;           /*!< [6..6] IRQx interrupt clear pending                                       */
      __IOM uint32_t IRQCLRPEND7 : 1;           /*!< [7..7] IRQx interrupt clear pending                                       */
      __IOM uint32_t IRQCLRPEND8 : 1;           /*!< [8..8] IRQx interrupt clear pending                                       */
      __IOM uint32_t IRQCLRPEND9 : 1;           /*!< [9..9] IRQx interrupt clear pending                                       */
      __IOM uint32_t IRQCLRPEND10 : 1;          /*!< [10..10] IRQx interrupt clear pending                                     */
      __IOM uint32_t IRQCLRPEND11 : 1;          /*!< [11..11] IRQx interrupt clear pending                                     */
      __IOM uint32_t IRQCLRPEND12 : 1;          /*!< [12..12] IRQx interrupt clear pending                                     */
      __IOM uint32_t IRQCLRPEND13 : 1;          /*!< [13..13] IRQx interrupt clear pending                                     */
      __IOM uint32_t IRQCLRPEND14 : 1;          /*!< [14..14] IRQx interrupt clear pending                                     */
      __IOM uint32_t IRQCLRPEND15 : 1;          /*!< [15..15] IRQx interrupt clear pending                                     */
      __IOM uint32_t IRQCLRPEND16 : 1;          /*!< [16..16] IRQx interrupt clear pending                                     */
      __IOM uint32_t IRQCLRPEND17 : 1;          /*!< [17..17] IRQx interrupt clear pending                                     */
      __IOM uint32_t IRQCLRPEND18 : 1;          /*!< [18..18] IRQx interrupt clear pending                                     */
      __IOM uint32_t IRQCLRPEND19 : 1;          /*!< [19..19] IRQx interrupt clear pending                                     */
      __IOM uint32_t IRQCLRPEND20 : 1;          /*!< [20..20] IRQx interrupt clear pending                                     */
      __IOM uint32_t IRQCLRPEND21 : 1;          /*!< [21..21] IRQx interrupt clear pending                                     */
      __IOM uint32_t IRQCLRPEND22 : 1;          /*!< [22..22] IRQx interrupt clear pending                                     */
      __IOM uint32_t IRQCLRPEND23 : 1;          /*!< [23..23] IRQx interrupt clear pending                                     */
      __IOM uint32_t IRQCLRPEND24 : 1;          /*!< [24..24] IRQx interrupt clear pending                                     */
      __IOM uint32_t IRQCLRPEND25 : 1;          /*!< [25..25] IRQx interrupt clear pending                                     */
      __IOM uint32_t IRQCLRPEND26 : 1;          /*!< [26..26] IRQx interrupt clear pending                                     */
      __IOM uint32_t IRQCLRPEND27 : 1;          /*!< [27..27] IRQx interrupt clear pending                                     */
      __IOM uint32_t IRQCLRPEND28 : 1;          /*!< [28..28] IRQx interrupt clear pending                                     */
      __IOM uint32_t IRQCLRPEND29 : 1;          /*!< [29..29] IRQx interrupt clear pending                                     */
      __IOM uint32_t IRQCLRPEND30 : 1;          /*!< [30..30] IRQx interrupt clear pending                                     */
      __IOM uint32_t IRQCLRPEND31 : 1;          /*!< [31..31] IRQx interrupt clear pending                                     */
    } bit;
  } NVIC_ICPR;
  __IM  uint32_t  RESERVED6[31];
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000300) Active Bit Register                                        */
    
    struct {
      __IM  uint32_t IRQACTIVE0 : 1;            /*!< [0..0] IRQx interrupt active flag                                         */
      __IM  uint32_t IRQACTIVE1 : 1;            /*!< [1..1] IRQx interrupt active flag                                         */
      __IM  uint32_t IRQACTIVE2 : 1;            /*!< [2..2] IRQx interrupt active flag                                         */
      __IM  uint32_t IRQACTIVE3 : 1;            /*!< [3..3] IRQx interrupt active flag                                         */
      __IM  uint32_t IRQACTIVE4 : 1;            /*!< [4..4] IRQx interrupt active flag                                         */
      __IM  uint32_t IRQACTIVE5 : 1;            /*!< [5..5] IRQx interrupt active flag                                         */
      __IM  uint32_t IRQACTIVE6 : 1;            /*!< [6..6] IRQx interrupt active flag                                         */
      __IM  uint32_t IRQACTIVE7 : 1;            /*!< [7..7] IRQx interrupt active flag                                         */
      __IM  uint32_t IRQACTIVE8 : 1;            /*!< [8..8] IRQx interrupt active flag                                         */
      __IM  uint32_t IRQACTIVE9 : 1;            /*!< [9..9] IRQx interrupt active flag                                         */
      __IM  uint32_t IRQACTIVE10 : 1;           /*!< [10..10] IRQx interrupt active flag                                       */
      __IM  uint32_t IRQACTIVE11 : 1;           /*!< [11..11] IRQx interrupt active flag                                       */
      __IM  uint32_t IRQACTIVE12 : 1;           /*!< [12..12] IRQx interrupt active flag                                       */
      __IM  uint32_t IRQACTIVE13 : 1;           /*!< [13..13] IRQx interrupt active flag                                       */
      __IM  uint32_t IRQACTIVE14 : 1;           /*!< [14..14] IRQx interrupt active flag                                       */
      __IM  uint32_t IRQACTIVE15 : 1;           /*!< [15..15] IRQx interrupt active flag                                       */
      __IM  uint32_t IRQACTIVE16 : 1;           /*!< [16..16] IRQx interrupt active flag                                       */
      __IM  uint32_t IRQACTIVE17 : 1;           /*!< [17..17] IRQx interrupt active flag                                       */
      __IM  uint32_t IRQACTIVE18 : 1;           /*!< [18..18] IRQx interrupt active flag                                       */
      __IM  uint32_t IRQACTIVE19 : 1;           /*!< [19..19] IRQx interrupt active flag                                       */
      __IM  uint32_t IRQACTIVE20 : 1;           /*!< [20..20] IRQx interrupt active flag                                       */
      __IM  uint32_t IRQACTIVE21 : 1;           /*!< [21..21] IRQx interrupt active flag                                       */
      __IM  uint32_t IRQACTIVE22 : 1;           /*!< [22..22] IRQx interrupt active flag                                       */
      __IM  uint32_t IRQACTIVE23 : 1;           /*!< [23..23] IRQx interrupt active flag                                       */
      __IM  uint32_t IRQACTIVE24 : 1;           /*!< [24..24] IRQx interrupt active flag                                       */
      __IM  uint32_t IRQACTIVE25 : 1;           /*!< [25..25] IRQx interrupt active flag                                       */
      __IM  uint32_t IRQACTIVE26 : 1;           /*!< [26..26] IRQx interrupt active flag                                       */
      __IM  uint32_t IRQACTIVE27 : 1;           /*!< [27..27] IRQx interrupt active flag                                       */
      __IM  uint32_t IRQACTIVE28 : 1;           /*!< [28..28] IRQx interrupt active flag                                       */
      __IM  uint32_t IRQACTIVE29 : 1;           /*!< [29..29] IRQx interrupt active flag                                       */
      __IM  uint32_t IRQACTIVE30 : 1;           /*!< [30..30] IRQx interrupt active flag                                       */
      __IM  uint32_t IRQACTIVE31 : 1;           /*!< [31..31] IRQx interrupt active flag                                       */
    } bit;
  } NVIC_IABR;
  __IM  uint32_t  RESERVED7[63];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000400) Interrupt Priority                                         */
    
    struct {
            uint32_t            : 3;
      __IOM uint32_t PRI_N0     : 5;            /*!< [7..3] IRQx interrupt priority                                            */
            uint32_t            : 3;
      __IOM uint32_t PRI_N1     : 5;            /*!< [15..11] IRQx interrupt priority                                          */
            uint32_t            : 3;
      __IOM uint32_t PRI_N2     : 5;            /*!< [23..19] IRQx interrupt priority                                          */
            uint32_t            : 3;
      __IOM uint32_t PRI_N3     : 5;            /*!< [31..27] IRQx interrupt priority                                          */
    } bit;
  } NVIC_IPR0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000404) Interrupt Priority                                         */
    
    struct {
            uint32_t            : 3;
      __IOM uint32_t PRI_N4     : 5;            /*!< [7..3] IRQx interrupt priority                                            */
            uint32_t            : 3;
      __IOM uint32_t PRI_N5     : 5;            /*!< [15..11] IRQx interrupt priority                                          */
            uint32_t            : 3;
      __IOM uint32_t PRI_N6     : 5;            /*!< [23..19] IRQx interrupt priority                                          */
            uint32_t            : 3;
      __IOM uint32_t PRI_N7     : 5;            /*!< [31..27] IRQx interrupt priority                                          */
    } bit;
  } NVIC_IPR1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000408) Interrupt Priority                                         */
    
    struct {
            uint32_t            : 3;
      __IOM uint32_t PRI_N8     : 5;            /*!< [7..3] IRQx interrupt priority                                            */
            uint32_t            : 3;
      __IOM uint32_t PRI_N9     : 5;            /*!< [15..11] IRQx interrupt priority                                          */
            uint32_t            : 3;
      __IOM uint32_t PRI_N10    : 5;            /*!< [23..19] IRQx interrupt priority                                          */
            uint32_t            : 3;
      __IOM uint32_t PRI_N11    : 5;            /*!< [31..27] IRQx interrupt priority                                          */
    } bit;
  } NVIC_IPR2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000040C) Interrupt Priority                                         */
    
    struct {
            uint32_t            : 3;
      __IOM uint32_t PRI_N12    : 5;            /*!< [7..3] IRQx interrupt priority                                            */
            uint32_t            : 3;
      __IOM uint32_t PRI_N13    : 5;            /*!< [15..11] IRQx interrupt priority                                          */
            uint32_t            : 3;
      __IOM uint32_t PRI_N14    : 5;            /*!< [23..19] IRQx interrupt priority                                          */
            uint32_t            : 3;
      __IOM uint32_t PRI_N15    : 5;            /*!< [31..27] IRQx interrupt priority                                          */
    } bit;
  } NVIC_IPR3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000410) Interrupt Priority                                         */
    
    struct {
            uint32_t            : 3;
      __IOM uint32_t PRI_N16    : 5;            /*!< [7..3] IRQx interrupt priority                                            */
            uint32_t            : 3;
      __IOM uint32_t PRI_N17    : 5;            /*!< [15..11] IRQx interrupt priority                                          */
            uint32_t            : 3;
      __IOM uint32_t PRI_N18    : 5;            /*!< [23..19] IRQx interrupt priority                                          */
            uint32_t            : 3;
      __IOM uint32_t PRI_N19    : 5;            /*!< [31..27] IRQx interrupt priority                                          */
    } bit;
  } NVIC_IPR4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000414) Interrupt Priority                                         */
    
    struct {
            uint32_t            : 3;
      __IOM uint32_t PRI_N20    : 5;            /*!< [7..3] IRQx interrupt priority                                            */
            uint32_t            : 3;
      __IOM uint32_t PRI_N21    : 5;            /*!< [15..11] IRQx interrupt priority                                          */
            uint32_t            : 3;
      __IOM uint32_t PRI_N22    : 5;            /*!< [23..19] IRQx interrupt priority                                          */
            uint32_t            : 3;
      __IOM uint32_t PRI_N23    : 5;            /*!< [31..27] IRQx interrupt priority                                          */
    } bit;
  } NVIC_IPR5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000418) Interrupt Priority                                         */
    
    struct {
            uint32_t            : 3;
      __IOM uint32_t PRI_N24    : 5;            /*!< [7..3] IRQx interrupt priority                                            */
            uint32_t            : 3;
      __IOM uint32_t PRI_N25    : 5;            /*!< [15..11] IRQx interrupt priority                                          */
            uint32_t            : 3;
      __IOM uint32_t PRI_N26    : 5;            /*!< [23..19] IRQx interrupt priority                                          */
            uint32_t            : 3;
      __IOM uint32_t PRI_N27    : 5;            /*!< [31..27] IRQx interrupt priority                                          */
    } bit;
  } NVIC_IPR6;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000041C) Interrupt Priority                                         */
    
    struct {
            uint32_t            : 3;
      __IOM uint32_t PRI_N28    : 5;            /*!< [7..3] IRQx interrupt priority                                            */
            uint32_t            : 3;
      __IOM uint32_t PRI_N29    : 5;            /*!< [15..11] IRQx interrupt priority                                          */
            uint32_t            : 3;
      __IOM uint32_t PRI_N30    : 5;            /*!< [23..19] IRQx interrupt priority                                          */
            uint32_t            : 3;
      __IOM uint32_t PRI_N31    : 5;            /*!< [31..27] IRQx interrupt priority                                          */
    } bit;
  } NVIC_IPR7;
  __IM  uint32_t  RESERVED8[568];
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000D00) CPU ID Base Register                                       */
    
    struct {
      __IM  uint32_t REVISION   : 4;            /*!< [3..0] Revision Number                                                    */
      __IM  uint32_t PARTNO     : 12;           /*!< [15..4] Part Number                                                       */
      __IM  uint32_t ARCHITECTURE : 4;          /*!< [19..16] Architecture                                                     */
      __IM  uint32_t VARIANT    : 4;            /*!< [23..20] Variant Number                                                   */
      __IM  uint32_t IMPLEMENTER : 8;           /*!< [31..24] Implementer Code                                                 */
    } bit;
  } CPUID;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000D04) Interrupt Control State Register                           */
    
    struct {
      __IM  uint32_t VECTACTIVE : 9;            /*!< [8..0] Active exception number                                            */
            uint32_t            : 2;
      __IM  uint32_t RETTOBASE  : 1;            /*!< [11..11] Presence of preempted active exceptions                          */
      __IM  uint32_t VECTPending : 9;           /*!< [20..12] Exception number with the highest priority pending
                                                     enabled exception                                                         */
            uint32_t            : 1;
      __IM  uint32_t ISRPending : 1;            /*!< [22..22] External interrupt generated by the NVIC pending flag            */
      __IM  uint32_t ISRPREEMPT : 1;            /*!< [23..23] Service of a pending exception on exit from debug halt
                                                     state                                                                     */
            uint32_t            : 1;
      __IOM uint32_t PENDSTCLR  : 1;            /*!< [25..25] SysTick exception clear pending                                  */
      __IOM uint32_t PENDSTSET  : 1;            /*!< [26..26] SysTick exception set pending                                    */
      __IOM uint32_t PENDSVCLR  : 1;            /*!< [27..27] PendSV clear pending                                             */
      __IOM uint32_t PENDSVSET  : 1;            /*!< [28..28] PendSV set pending                                               */
            uint32_t            : 2;
      __IOM uint32_t NMIPENDSET : 1;            /*!< [31..31] NMI set pending                                                  */
    } bit;
  } ICSR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000D08) Vector Table Offset Register                               */
    
    struct {
            uint32_t            : 7;
      __IOM uint32_t TBLOFF     : 25;           /*!< [31..7] Vector Table Offset                                               */
    } bit;
  } VTOR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000D0C) Application Interrupt/Reset Control Register               */
    
    struct {
      __IOM uint32_t VECTRESET  : 1;            /*!< [0..0] Local system reset                                                 */
      __IOM uint32_t VECTCLRACTIVE : 1;         /*!< [1..1] Active status information clear for fixed and configurable
                                                     exception                                                                 */
      __IOM uint32_t SYSRESETREQ : 1;           /*!< [2..2] System Reset Request                                               */
            uint32_t            : 5;
      __IOM uint32_t PRIGROUP   : 3;            /*!< [10..8] Priority Grouping                                                 */
            uint32_t            : 4;
      __IM  uint32_t ENDIANNESS : 1;            /*!< [15..15] Data endianness
                                                                                                                               */
      __IOM uint32_t VECTKEY    : 16;           /*!< [31..16] Vector Key                                                       */
    } bit;
  } AIRCR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000D10) System Control Register                                    */
    
    struct {
            uint32_t            : 1;
      __IOM uint32_t SLEEPONEXIT : 1;           /*!< [1..1] Sleep on exit when returning from Handler mode to Thread
                                                     mode                                                                      */
      __IOM uint32_t SLEEPDEEP  : 1;            /*!< [2..2] Selection of sleep mode or deep sleep mode as low power
                                                     mode                                                                      */
            uint32_t            : 1;
      __IOM uint32_t SEVONPEND  : 1;            /*!< [4..4] Send event on pending                                              */
            uint32_t            : 27;
    } bit;
  } SCR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000D14) Configuration Control Register                             */
    
    struct {
      __IOM uint32_t NONBASETHRDENA : 1;        /*!< [0..0] Control of the processor entry point into the Thread
                                                     mode                                                                      */
      __IOM uint32_t USERSETMPEND : 1;          /*!< [1..1] Unprivileged software access to the STIR enable                    */
            uint32_t            : 1;
      __IOM uint32_t UNALIGN_TRP : 1;           /*!< [3..3] Unaligned access traps enable                                      */
      __IOM uint32_t DIV_0_TRP  : 1;            /*!< [4..4] Trap divide by zero enable                                         */
            uint32_t            : 3;
      __IOM uint32_t BFHFMIGN   : 1;            /*!< [8..8] Effect of precise data access faults on handlers running
                                                     at a priority -1 or -2                                                    */
      __IOM uint32_t STKALIGN   : 1;            /*!< [9..9] Stack frame alignment on exception entry                           */
            uint32_t            : 22;
    } bit;
  } CCR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000D18) System Handler Priority Register 1                         */
    
    struct {
            uint32_t            : 3;
      __IOM uint32_t PRI_4      : 5;            /*!< [7..3] Priority of System Handler 4, MemManage                            */
            uint32_t            : 3;
      __IOM uint32_t PRI_5      : 5;            /*!< [15..11] Priority of System Handler 5, BusFault                           */
            uint32_t            : 3;
      __IOM uint32_t PRI_6      : 5;            /*!< [23..19] Priority of System Handler 6, UsageFault                         */
            uint32_t            : 3;
      __IOM uint32_t PRI_7      : 5;            /*!< [31..27] Reserved for Priority of System Handler 7                        */
    } bit;
  } SHPR1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000D1C) System Handler Priority Register 2                         */
    
    struct {
            uint32_t            : 3;
      __IOM uint32_t PRI_8      : 5;            /*!< [7..3] Reserved for Priority of System Handler 8                          */
            uint32_t            : 3;
      __IOM uint32_t PRI_9      : 5;            /*!< [15..11] Reserved for Priority of System Handler 9                        */
            uint32_t            : 3;
      __IOM uint32_t PRI_10     : 5;            /*!< [23..19] Reserved for Priority of System Handler 10                       */
            uint32_t            : 3;
      __IOM uint32_t PRI_11     : 5;            /*!< [31..27] Priority of System Handler 11, SVCall                            */
    } bit;
  } SHPR2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000D20) System Handler Priority Register 3                         */
    
    struct {
            uint32_t            : 3;
      __IOM uint32_t PRI_12     : 5;            /*!< [7..3] Priority of System Handler 12, DebugMonitor                        */
            uint32_t            : 3;
      __IOM uint32_t PRI_13     : 5;            /*!< [15..11] Reserved for Priority of System Handler 13                       */
            uint32_t            : 3;
      __IOM uint32_t PRI_14     : 5;            /*!< [23..19] Priority of System Handler 14, PendSV                            */
            uint32_t            : 3;
      __IOM uint32_t PRI_15     : 5;            /*!< [31..27] Priority of System Handler 15, SysTick                           */
    } bit;
  } SHPR3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000D24) System Handler Control and State Register                  */
    
    struct {
      __IOM uint32_t MEMFAULTACT : 1;           /*!< [0..0] MemManage exception status                                         */
      __IOM uint32_t BUSFAULTACT : 1;           /*!< [1..1] BusFault exception status                                          */
            uint32_t            : 1;
      __IOM uint32_t USGFAULTACT : 1;           /*!< [3..3] UsageFault exception status                                        */
            uint32_t            : 3;
      __IOM uint32_t SVCALLACT  : 1;            /*!< [7..7] SVCall status                                                      */
      __IOM uint32_t MONITORACT : 1;            /*!< [8..8] Debug monitor status                                               */
            uint32_t            : 1;
      __IOM uint32_t PENDSVACT  : 1;            /*!< [10..10] PendSV exception status                                          */
      __IOM uint32_t SYSTICKACT : 1;            /*!< [11..11] SysTick exception status                                         */
      __IOM uint32_t USGFAULTPENDED : 1;        /*!< [12..12] UsageFault exception pending status                              */
      __IOM uint32_t MEMFAULTPENDED : 1;        /*!< [13..13] MemManage exception pending status                               */
      __IOM uint32_t BUSFAULTPENDED : 1;        /*!< [14..14] BusFault exception pending status                                */
      __IOM uint32_t SVCALLPENDED : 1;          /*!< [15..15] SVCall exception pending status                                  */
      __IOM uint32_t MEMFAULTENA : 1;           /*!< [16..16] MemManage enable                                                 */
      __IOM uint32_t BUSFAULTENA : 1;           /*!< [17..17] BusFault enable                                                  */
      __IOM uint32_t USGFAULTENA : 1;           /*!< [18..18] UsageFault enable                                                */
            uint32_t            : 13;
    } bit;
  } SHCSR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000D28) Configurable Fault Status Register                         */
    
    struct {
      __IOM uint32_t IACCVIOL   : 1;            /*!< [0..0] Instruction access violation flag                                  */
      __IOM uint32_t DACCVIOL   : 1;            /*!< [1..1] Data access violation flag                                         */
            uint32_t            : 1;
      __IOM uint32_t MUNSTKERR  : 1;            /*!< [3..3] MemManage fault on unstacking for a return from exception          */
      __IOM uint32_t MSTERR     : 1;            /*!< [4..4] MemManage fault on stacking for exception entry                    */
      __IOM uint32_t MLSPERR    : 1;            /*!< [5..5] MemManage fault during FP lazy state preservation                  */
            uint32_t            : 1;
      __IOM uint32_t MMARVALID  : 1;            /*!< [7..7] MemManage Fault Address Register (MMFAR) valid flag                */
      __IOM uint32_t IBUSERR    : 1;            /*!< [8..8] Instruction bus error                                              */
      __IOM uint32_t PRECISERR  : 1;            /*!< [9..9] Precise data bus error                                             */
      __IOM uint32_t IMPRECISERR : 1;           /*!< [10..10] Imprecise data bus error                                         */
      __IOM uint32_t UNSTKERR   : 1;            /*!< [11..11] BusFault on unstacking for a return from exception               */
      __IOM uint32_t STKERR     : 1;            /*!< [12..12] BusFault on stacking for exception entry                         */
      __IOM uint32_t LSPERR     : 1;            /*!< [13..13] BusFault during FP lazy state preservation                       */
            uint32_t            : 1;
      __IOM uint32_t BFARVALID  : 1;            /*!< [15..15] BusFault Address Register (BFAR) valid flag                      */
      __IOM uint32_t UNDEFINSTR : 1;            /*!< [16..16] Undefined instruction UsageFault                                 */
      __IOM uint32_t INVSTATE   : 1;            /*!< [17..17] Invalid state UsageFault                                         */
      __IOM uint32_t INVPC      : 1;            /*!< [18..18] Invalid PC load UsageFault                                       */
      __IOM uint32_t NOCP       : 1;            /*!< [19..19] No coprocessor UsageFault                                        */
            uint32_t            : 4;
      __IOM uint32_t UNALIGNED  : 1;            /*!< [24..24] Unaligned access UsageFault                                      */
      __IOM uint32_t DIVBYZERO  : 1;            /*!< [25..25] Divide by zero UsageFault                                        */
            uint32_t            : 6;
    } bit;
  } CFSR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000D2C) Hard Fault Status Register                                 */
    
    struct {
            uint32_t            : 1;
      __IOM uint32_t VECTTBL    : 1;            /*!< [1..1] BusFault flag on a vector table read during exception
                                                     processing                                                                */
            uint32_t            : 28;
      __IOM uint32_t FORCED     : 1;            /*!< [30..30] Forced HardFault flag                                            */
      __IOM uint32_t DEBUGEVT   : 1;            /*!< [31..31] Debug Event                                                      */
    } bit;
  } HFSR;
  __IM  uint32_t  RESERVED9;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000D34) MemManage Fault Address Register                           */
    
    struct {
      __IOM uint32_t ADDRESS    : 32;           /*!< [31..0] Address of the location that generated a MemManage fault          */
    } bit;
  } MMFAR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000D38) Bus Fault Address Register                                 */
    
    struct {
      __IOM uint32_t ADDRESS    : 32;           /*!< [31..0] Address of the location that generated a BusFault                 */
    } bit;
  } BFAR;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000D3C) Auxiliary Fault Status Register                            */
    
    struct {
      __IM  uint32_t AUXFAULT   : 32;           /*!< [31..0] Additional system fault information                               */
    } bit;
  } AFSR;
  __IM  uint32_t  RESERVED10[112];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000F00) Software Triggered Interrupt                               */
    
    struct {
      __OM  uint32_t INTID      : 9;            /*!< [8..0] Interrupt ID to be triggered. The value written is (ExceptionNumber
                                                     - 16)                                                                     */
            uint32_t            : 23;
    } bit;
  } STIR;
} CPU_Type;                                     /*!< Size = 3844 (0xf04)                                                       */



/* =========================================================================================================================== */
/* ================                                          CSACSC                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief CSA and CSC (CSACSC)
  */

typedef struct {                                /*!< (@ 0x40010000) CSACSC Structure                                           */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Current sense amplifier and comparator control             */
    
    struct {
      __IOM uint32_t CSAC_EN    : 1;            /*!< [0..0] Current sense amplifier and comparator enable                      */
            uint32_t            : 7;
      __IOM uint32_t GAIN_MIN   : 4;            /*!< [11..8] Current sense amplifier minimum gain setting                      */
      __IOM uint32_t OFFS_MIN   : 4;            /*!< [15..12] Current sense amplifier minimum output offset setting            */
      __IOM uint32_t THR_MAX    : 10;           /*!< [25..16] Current sense comparator maximum threshold setting               */
            uint32_t            : 6;
    } bit;
  } CTRL1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000004) Current sense amplifier and comparator control             */
    
    struct {
      __IOM uint32_t ADD_INP_OFFS : 1;          /*!< [0..0] Additional input offset setting                                    */
      __IOM uint32_t GAIN_SEL   : 2;            /*!< [2..1] Current sense amplifier gain setting                               */
      __IOM uint32_t OFFS_SEL   : 2;            /*!< [4..3] Current sense amplifier output offset setting                      */
            uint32_t            : 3;
      __IOM uint32_t VOUT_SEL   : 1;            /*!< [8..8] Current sense output selection                                     */
            uint32_t            : 7;
      __IOM uint32_t THR_SEL    : 5;            /*!< [20..16] Current sense comparator threshold setting                       */
            uint32_t            : 3;
      __IOM uint32_t TFILT_SEL  : 2;            /*!< [25..24] Filter time for current sense comparator                         */
            uint32_t            : 6;
    } bit;
  } CTRL2;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000008) Current sense amplifier/comparator interrupt
                                                                    status                                                     */
    
    struct {
      __IM  uint32_t CSC_OC_IS  : 1;            /*!< [0..0] Overcurrent event interrupt status                                 */
      __IM  uint32_t SEL_ERR_IS : 1;            /*!< [1..1] CSA minimum gain or offset selection error interrupt
                                                     status                                                                    */
            uint32_t            : 14;
      __IM  uint32_t CSC_OC_STS : 1;            /*!< [16..16] Overcurrent event status                                         */
            uint32_t            : 7;
      __IM  uint32_t CSC_OC_OUT : 1;            /*!< [24..24] Overcurrent comparator output                                    */
      __IM  uint32_t CSC_BIST_STS : 1;          /*!< [25..25] CSC built-in self test status                                    */
            uint32_t            : 6;
    } bit;
  } IRQS;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000000C) Current sense amplifier/comparator interrupt
                                                                    status clear                                               */
    
    struct {
      __OM  uint32_t CSC_OC_ISC : 1;            /*!< [0..0] Overcurrent event interrupt status clear                           */
      __OM  uint32_t SEL_ERR_ISC : 1;           /*!< [1..1] CSA minimum gain or offset selection error interrupt
                                                     status clear                                                              */
            uint32_t            : 14;
      __OM  uint32_t CSC_OC_SC  : 1;            /*!< [16..16] Overcurrent event status clear                                   */
            uint32_t            : 15;
    } bit;
  } IRQCLR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) Current sense amplifier/comparator interrupt
                                                                    status set                                                 */
    
    struct {
      __OM  uint32_t CSC_OC_ISS : 1;            /*!< [0..0] Overcurrent event interrupt status set                             */
      __OM  uint32_t SEL_ERR_ISS : 1;           /*!< [1..1] CSA minimum gain or offset selection error interrupt
                                                     status set                                                                */
            uint32_t            : 14;
      __OM  uint32_t CSC_OC_SS  : 1;            /*!< [16..16] Overcurrent event status set                                     */
            uint32_t            : 15;
    } bit;
  } IRQSET;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000014) Current sense amplifier/comparator interrupt
                                                                    enable                                                     */
    
    struct {
      __IOM uint32_t CSC_OC_IEN : 1;            /*!< [0..0] Overcurrent event interrupt enable                                 */
      __IOM uint32_t SEL_ERR_IEN : 1;           /*!< [1..1] CSA minimum gain or offset selection error interrupt
                                                     enable                                                                    */
            uint32_t            : 30;
    } bit;
  } IRQEN;
} CSACSC_Type;                                  /*!< Size = 24 (0x18)                                                          */



/* =========================================================================================================================== */
/* ================                                            DMA                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief DMA (DMA)
  */

typedef struct {                                /*!< (@ 0x48034000) DMA Structure                                              */
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000000) DMA Status Register                                        */
    
    struct {
      __IM  uint32_t MASTER_ENABLE : 1;         /*!< [0..0] Controller Status Enable                                           */
            uint32_t            : 3;
      __IM  uint32_t STATE      : 4;            /*!< [7..4] Current State of the Control State Machine                         */
            uint32_t            : 8;
      __IM  uint32_t CHNLS_MINUS1 : 5;          /*!< [20..16] Number of DMA Channels                                           */
            uint32_t            : 11;
    } bit;
  } DMA_STATUS;
  
  union {
    __OM  uint32_t reg;                         /*!< (@ 0x00000004) DMA Configuration Register                                 */
    
    struct {
      __OM  uint32_t MASTER_ENABLE : 1;         /*!< [0..0] DMA Controller Enable                                              */
            uint32_t            : 4;
      __OM  uint32_t CHN1_PROT_CTRL : 3;        /*!< [7..5] AHB Protection                                                     */
            uint32_t            : 24;
    } bit;
  } DMA_CFG;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000008) Channel Control Data Base Pointer Register                 */
    
    struct {
            uint32_t            : 8;
      __IOM uint32_t CTRL_BASE_PTR : 24;        /*!< [31..8] Pointer to the base address of the primary data structure         */
    } bit;
  } CTRL_BASE_PTR;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x0000000C) Channel Alternate Control Data Base Pointer Register       */
    
    struct {
      __IM  uint32_t ALT_CTRL_BASE_PTR : 32;    /*!< [31..0] Base Address of the Alternate Data Structure                      */
    } bit;
  } ALT_CTRL_BASE_PTR;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000010) Channel Wait on Request Status Register                    */
    
    struct {
      __IM  uint32_t DMA_WAITONREQ_STATUS : 8;  /*!< [7..0] Channel Wait on Request Status                                     */
            uint32_t            : 24;
    } bit;
  } DMA_WAITONREQ_STATUS;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000014) Channel Software Request Register                          */
    
    struct {
      __OM  uint32_t CHNL_SW_REQUEST : 8;       /*!< [7..0] Software DMA Request                                               */
            uint32_t            : 24;
    } bit;
  } CHNL_SW_REQUEST;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000018) Channel Useburst Set Register                              */
    
    struct {
      __IOM uint32_t CHNL_USEBURST_SET : 8;     /*!< [7..0] Channel Useburst Set                                               */
            uint32_t            : 24;
    } bit;
  } CHNL_USEBURST_SET;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000001C) Channel Useburst Clear Register                            */
    
    struct {
      __OM  uint32_t CHNL_USEBURST_CLR : 8;     /*!< [7..0] Channel Useburst Clear                                             */
            uint32_t            : 24;
    } bit;
  } CHNL_USEBURST_CLR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000020) Channel Request Mask Set Register                          */
    
    struct {
      __IOM uint32_t CHNL_REQ_MASK_SET : 8;     /*!< [7..0] Channel Request Mask Set                                           */
            uint32_t            : 24;
    } bit;
  } CHNL_REQ_MASK_SET;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000024) Channel Request Mask Clear Register                        */
    
    struct {
      __OM  uint32_t CHNL_REQ_MASK_CLR : 8;     /*!< [7..0] Channel Request Mask Clear                                         */
            uint32_t            : 24;
    } bit;
  } CHNL_REQ_MASK_CLR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000028) Channel Enable Set Register                                */
    
    struct {
      __IOM uint32_t CHNL_ENABLE_SET : 8;       /*!< [7..0] Channel Enable Set                                                 */
            uint32_t            : 24;
    } bit;
  } CHNL_ENABLE_SET;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000002C) Channel Enable Clear Register                              */
    
    struct {
      __OM  uint32_t CHNL_ENABLE_CLR : 8;       /*!< [7..0] Channel Enable Clear                                               */
            uint32_t            : 24;
    } bit;
  } CHNL_ENABLE_CLR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000030) Channel Primary-Alternate Set Register                     */
    
    struct {
      __IOM uint32_t CHNL_PRI_ALT_SET : 8;      /*!< [7..0] Channel Primary Alternate Set                                      */
            uint32_t            : 24;
    } bit;
  } CHNL_PRI_ALT_SET;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000034) Channel Primary-Alternate Clear Register                   */
    
    struct {
      __OM  uint32_t CHNL_PRI_ALT_CLR : 8;      /*!< [7..0] Channel Primary Alternate Clear                                    */
            uint32_t            : 24;
    } bit;
  } CHNL_PRI_ALT_CLR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000038) Channel Priority Set Register                              */
    
    struct {
      __IOM uint32_t CHNL_PRIORITY_SET : 8;     /*!< [7..0] Channel Priority Set                                               */
            uint32_t            : 24;
    } bit;
  } CHNL_PRIORITY_SET;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000003C) Channel Priority Clear Register                            */
    
    struct {
      __OM  uint32_t CHNL_PRIORITY_CLR : 8;     /*!< [7..0] Channel Priority Clear                                             */
            uint32_t            : 24;
    } bit;
  } CHNL_PRIORITY_CLR;
  __IM  uint32_t  RESERVED[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000004C) Bus Error Status and Clear Register                        */
    
    struct {
      __IOM uint32_t ERR_CLR    : 1;            /*!< [0..0] Error Clear                                                        */
            uint32_t            : 31;
    } bit;
  } ERR_CLR;
} DMA_Type;                                     /*!< Size = 80 (0x50)                                                          */



/* =========================================================================================================================== */
/* ================                                           GPIO                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief GPIO (GPIO)
  */

typedef struct {                                /*!< (@ 0x48030000) GPIO Structure                                             */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Port 0 output register                                     */
    
    struct {
      __IOM uint32_t PO0        : 1;            /*!< [0..0] Output bit                                                         */
      __IOM uint32_t PO1        : 1;            /*!< [1..1] Output bit                                                         */
      __IOM uint32_t PO2        : 1;            /*!< [2..2] Output bit                                                         */
      __IOM uint32_t PO3        : 1;            /*!< [3..3] Output bit                                                         */
      __IOM uint32_t PO4        : 1;            /*!< [4..4] Output bit                                                         */
      __IOM uint32_t PO5        : 1;            /*!< [5..5] Output bit                                                         */
      __IOM uint32_t PO6        : 1;            /*!< [6..6] Output bit                                                         */
      __IOM uint32_t PO7        : 1;            /*!< [7..7] Output bit                                                         */
      __IOM uint32_t PO8        : 1;            /*!< [8..8] Output bit                                                         */
      __IOM uint32_t PO9        : 1;            /*!< [9..9] Output bit                                                         */
      __IOM uint32_t PO10       : 1;            /*!< [10..10] Output bit                                                       */
            uint32_t            : 21;
    } bit;
  } P0_OUT;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000004) Port 0 output modification register                        */
    
    struct {
      __OM  uint32_t PS0        : 1;            /*!< [0..0] Output set bit                                                     */
      __OM  uint32_t PS1        : 1;            /*!< [1..1] Output set bit                                                     */
      __OM  uint32_t PS2        : 1;            /*!< [2..2] Output set bit                                                     */
      __OM  uint32_t PS3        : 1;            /*!< [3..3] Output set bit                                                     */
      __OM  uint32_t PS4        : 1;            /*!< [4..4] Output set bit                                                     */
      __OM  uint32_t PS5        : 1;            /*!< [5..5] Output set bit                                                     */
      __OM  uint32_t PS6        : 1;            /*!< [6..6] Output set bit                                                     */
      __OM  uint32_t PS7        : 1;            /*!< [7..7] Output set bit                                                     */
      __OM  uint32_t PS8        : 1;            /*!< [8..8] Output set bit                                                     */
      __OM  uint32_t PS9        : 1;            /*!< [9..9] Output set bit                                                     */
      __OM  uint32_t PS10       : 1;            /*!< [10..10] Output set bit                                                   */
            uint32_t            : 5;
      __OM  uint32_t PR0        : 1;            /*!< [16..16] Output reset bit                                                 */
      __OM  uint32_t PR1        : 1;            /*!< [17..17] Output reset bit                                                 */
      __OM  uint32_t PR2        : 1;            /*!< [18..18] Output reset bit                                                 */
      __OM  uint32_t PR3        : 1;            /*!< [19..19] Output reset bit                                                 */
      __OM  uint32_t PR4        : 1;            /*!< [20..20] Output reset bit                                                 */
      __OM  uint32_t PR5        : 1;            /*!< [21..21] Output reset bit                                                 */
      __OM  uint32_t PR6        : 1;            /*!< [22..22] Output reset bit                                                 */
      __OM  uint32_t PR7        : 1;            /*!< [23..23] Output reset bit                                                 */
      __OM  uint32_t PR8        : 1;            /*!< [24..24] Output reset bit                                                 */
      __OM  uint32_t PR9        : 1;            /*!< [25..25] Output reset bit                                                 */
      __OM  uint32_t PR10       : 1;            /*!< [26..26] Output reset bit                                                 */
            uint32_t            : 5;
    } bit;
  } P0_OMR;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000008) Port 0 input register                                      */
    
    struct {
      __IM  uint32_t PI0        : 1;            /*!< [0..0] Input bit                                                          */
      __IM  uint32_t PI1        : 1;            /*!< [1..1] Input bit                                                          */
      __IM  uint32_t PI2        : 1;            /*!< [2..2] Input bit                                                          */
      __IM  uint32_t PI3        : 1;            /*!< [3..3] Input bit                                                          */
      __IM  uint32_t PI4        : 1;            /*!< [4..4] Input bit                                                          */
      __IM  uint32_t PI5        : 1;            /*!< [5..5] Input bit                                                          */
      __IM  uint32_t PI6        : 1;            /*!< [6..6] Input bit                                                          */
      __IM  uint32_t PI7        : 1;            /*!< [7..7] Input bit                                                          */
      __IM  uint32_t PI8        : 1;            /*!< [8..8] Input bit                                                          */
      __IM  uint32_t PI9        : 1;            /*!< [9..9] Input bit                                                          */
      __IM  uint32_t PI10       : 1;            /*!< [10..10] Input bit                                                        */
            uint32_t            : 21;
    } bit;
  } P0_IN;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000000C) Port 0 direction control                                   */
    
    struct {
      __IOM uint32_t DIR0       : 1;            /*!< [0..0] Direction control bit                                              */
      __IOM uint32_t DIR1       : 1;            /*!< [1..1] Direction control bit                                              */
      __IOM uint32_t DIR2       : 1;            /*!< [2..2] Direction control bit                                              */
      __IOM uint32_t DIR3       : 1;            /*!< [3..3] Direction control bit                                              */
      __IOM uint32_t DIR4       : 1;            /*!< [4..4] Direction control bit                                              */
      __IOM uint32_t DIR5       : 1;            /*!< [5..5] Direction control bit                                              */
      __IOM uint32_t DIR6       : 1;            /*!< [6..6] Direction control bit                                              */
      __IOM uint32_t DIR7       : 1;            /*!< [7..7] Direction control bit                                              */
      __IOM uint32_t DIR8       : 1;            /*!< [8..8] Direction control bit                                              */
      __IOM uint32_t DIR9       : 1;            /*!< [9..9] Direction control bit                                              */
      __IOM uint32_t DIR10      : 1;            /*!< [10..10] Direction control bit                                            */
            uint32_t            : 21;
    } bit;
  } P0_DIR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) Port 0 open drain control                                  */
    
    struct {
      __IOM uint32_t OD0        : 1;            /*!< [0..0] Open drain control bit                                             */
      __IOM uint32_t OD1        : 1;            /*!< [1..1] Open drain control bit                                             */
      __IOM uint32_t OD2        : 1;            /*!< [2..2] Open drain control bit                                             */
      __IOM uint32_t OD3        : 1;            /*!< [3..3] Open drain control bit                                             */
      __IOM uint32_t OD4        : 1;            /*!< [4..4] Open drain control bit                                             */
      __IOM uint32_t OD5        : 1;            /*!< [5..5] Open drain control bit                                             */
      __IOM uint32_t OD6        : 1;            /*!< [6..6] Open drain control bit                                             */
      __IOM uint32_t OD7        : 1;            /*!< [7..7] Open drain control bit                                             */
      __IOM uint32_t OD8        : 1;            /*!< [8..8] Open drain control bit                                             */
      __IOM uint32_t OD9        : 1;            /*!< [9..9] Open drain control bit                                             */
      __IOM uint32_t OD10       : 1;            /*!< [10..10] Open drain control bit                                           */
            uint32_t            : 21;
    } bit;
  } P0_OD;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000014) Port 0 pull-up/pull-down control                           */
    
    struct {
      __IOM uint32_t PUDEN0     : 1;            /*!< [0..0] Pull-up/pull-down enable bit                                       */
      __IOM uint32_t PUDEN1     : 1;            /*!< [1..1] Pull-up/pull-down enable bit                                       */
      __IOM uint32_t PUDEN2     : 1;            /*!< [2..2] Pull-up/pull-down enable bit                                       */
      __IOM uint32_t PUDEN3     : 1;            /*!< [3..3] Pull-up/pull-down enable bit                                       */
      __IOM uint32_t PUDEN4     : 1;            /*!< [4..4] Pull-up/pull-down enable bit                                       */
      __IOM uint32_t PUDEN5     : 1;            /*!< [5..5] Pull-up/pull-down enable bit                                       */
      __IOM uint32_t PUDEN6     : 1;            /*!< [6..6] Pull-up/pull-down enable bit                                       */
      __IOM uint32_t PUDEN7     : 1;            /*!< [7..7] Pull-up/pull-down enable bit                                       */
      __IOM uint32_t PUDEN8     : 1;            /*!< [8..8] Pull-up/pull-down enable bit                                       */
      __IOM uint32_t PUDEN9     : 1;            /*!< [9..9] Pull-up/pull-down enable bit                                       */
      __IOM uint32_t PUDEN10    : 1;            /*!< [10..10] Pull-up/pull-down enable bit                                     */
            uint32_t            : 5;
      __IOM uint32_t PUDSEL0    : 1;            /*!< [16..16] Pull-up/pull-down select bit                                     */
      __IOM uint32_t PUDSEL1    : 1;            /*!< [17..17] Pull-up/pull-down select bit                                     */
      __IOM uint32_t PUDSEL2    : 1;            /*!< [18..18] Pull-up/pull-down select bit                                     */
      __IOM uint32_t PUDSEL3    : 1;            /*!< [19..19] Pull-up/pull-down select bit                                     */
      __IOM uint32_t PUDSEL4    : 1;            /*!< [20..20] Pull-up/pull-down select bit                                     */
      __IOM uint32_t PUDSEL5    : 1;            /*!< [21..21] Pull-up/pull-down select bit                                     */
      __IOM uint32_t PUDSEL6    : 1;            /*!< [22..22] Pull-up/pull-down select bit                                     */
      __IOM uint32_t PUDSEL7    : 1;            /*!< [23..23] Pull-up/pull-down select bit                                     */
      __IOM uint32_t PUDSEL8    : 1;            /*!< [24..24] Pull-up/pull-down select bit                                     */
      __IOM uint32_t PUDSEL9    : 1;            /*!< [25..25] Pull-up/pull-down select bit                                     */
      __IOM uint32_t PUDSEL10   : 1;            /*!< [26..26] Pull-up/pull-down select bit                                     */
            uint32_t            : 5;
    } bit;
  } P0_PUD;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000018) Port 0 alternate output select 0                           */
    
    struct {
      __IOM uint32_t ALTSEL0    : 3;            /*!< [2..0] Alternate output select                                            */
            uint32_t            : 1;
      __IOM uint32_t ALTSEL1    : 3;            /*!< [6..4] Alternate output select                                            */
            uint32_t            : 1;
      __IOM uint32_t ALTSEL2    : 3;            /*!< [10..8] Alternate output select                                           */
            uint32_t            : 1;
      __IOM uint32_t ALTSEL3    : 3;            /*!< [14..12] Alternate output select                                          */
            uint32_t            : 1;
      __IOM uint32_t ALTSEL4    : 3;            /*!< [18..16] Alternate output select                                          */
            uint32_t            : 1;
      __IOM uint32_t ALTSEL5    : 3;            /*!< [22..20] Alternate output select                                          */
            uint32_t            : 1;
      __IOM uint32_t ALTSEL6    : 3;            /*!< [26..24] Alternate output select                                          */
            uint32_t            : 1;
      __IOM uint32_t ALTSEL7    : 3;            /*!< [30..28] Alternate output select                                          */
            uint32_t            : 1;
    } bit;
  } P0_ALTSEL0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000001C) Port 0 alternate output select 1                           */
    
    struct {
      __IOM uint32_t ALTSEL8    : 3;            /*!< [2..0] Alternate output select                                            */
            uint32_t            : 1;
      __IOM uint32_t ALTSEL9    : 3;            /*!< [6..4] Alternate output select                                            */
            uint32_t            : 1;
      __IOM uint32_t ALTSEL10   : 3;            /*!< [10..8] Alternate output select                                           */
            uint32_t            : 21;
    } bit;
  } P0_ALTSEL1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000020) Port 0 output driver control                               */
    
    struct {
      __IOM uint32_t PDM0       : 2;            /*!< [1..0] Output driver mode control                                         */
      __IOM uint32_t PDM1       : 2;            /*!< [3..2] Output driver mode control                                         */
      __IOM uint32_t PDM2       : 2;            /*!< [5..4] Output driver mode control                                         */
      __IOM uint32_t PDM3       : 2;            /*!< [7..6] Output driver mode control                                         */
      __IOM uint32_t PDM4       : 2;            /*!< [9..8] Output driver mode control                                         */
      __IOM uint32_t PDM5       : 2;            /*!< [11..10] Output driver mode control                                       */
      __IOM uint32_t PDM6       : 2;            /*!< [13..12] Output driver mode control                                       */
      __IOM uint32_t PDM7       : 2;            /*!< [15..14] Output driver mode control                                       */
      __IOM uint32_t PDM8       : 2;            /*!< [17..16] Output driver mode control                                       */
      __IOM uint32_t PDM9       : 2;            /*!< [19..18] Output driver mode control                                       */
      __IOM uint32_t PDM10      : 2;            /*!< [21..20] Output driver mode control                                       */
            uint32_t            : 10;
    } bit;
  } P0_POCON;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000024) Port 1 output register                                     */
    
    struct {
      __IOM uint32_t PO0        : 1;            /*!< [0..0] Output bit                                                         */
      __IOM uint32_t PO1        : 1;            /*!< [1..1] Output bit                                                         */
      __IOM uint32_t PO2        : 1;            /*!< [2..2] Output bit                                                         */
      __IOM uint32_t PO3        : 1;            /*!< [3..3] Output bit                                                         */
      __IOM uint32_t PO4        : 1;            /*!< [4..4] Output bit                                                         */
            uint32_t            : 27;
    } bit;
  } P1_OUT;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000028) Port 1 output modification register                        */
    
    struct {
      __OM  uint32_t PS0        : 1;            /*!< [0..0] Output set bit                                                     */
      __OM  uint32_t PS1        : 1;            /*!< [1..1] Output set bit                                                     */
      __OM  uint32_t PS2        : 1;            /*!< [2..2] Output set bit                                                     */
      __OM  uint32_t PS3        : 1;            /*!< [3..3] Output set bit                                                     */
      __OM  uint32_t PS4        : 1;            /*!< [4..4] Output set bit                                                     */
            uint32_t            : 11;
      __OM  uint32_t PR0        : 1;            /*!< [16..16] Output reset bit                                                 */
      __OM  uint32_t PR1        : 1;            /*!< [17..17] Output reset bit                                                 */
      __OM  uint32_t PR2        : 1;            /*!< [18..18] Output reset bit                                                 */
      __OM  uint32_t PR3        : 1;            /*!< [19..19] Output reset bit                                                 */
      __OM  uint32_t PR4        : 1;            /*!< [20..20] Output reset bit                                                 */
            uint32_t            : 11;
    } bit;
  } P1_OMR;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x0000002C) Port 1 input register                                      */
    
    struct {
      __IM  uint32_t PI0        : 1;            /*!< [0..0] Input bit                                                          */
      __IM  uint32_t PI1        : 1;            /*!< [1..1] Input bit                                                          */
      __IM  uint32_t PI2        : 1;            /*!< [2..2] Input bit                                                          */
      __IM  uint32_t PI3        : 1;            /*!< [3..3] Input bit                                                          */
      __IM  uint32_t PI4        : 1;            /*!< [4..4] Input bit                                                          */
            uint32_t            : 27;
    } bit;
  } P1_IN;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000030) Port 1 direction control                                   */
    
    struct {
      __IOM uint32_t DIR0       : 1;            /*!< [0..0] Direction control bit                                              */
      __IOM uint32_t DIR1       : 1;            /*!< [1..1] Direction control bit                                              */
      __IOM uint32_t DIR2       : 1;            /*!< [2..2] Direction control bit                                              */
      __IOM uint32_t DIR3       : 1;            /*!< [3..3] Direction control bit                                              */
      __IOM uint32_t DIR4       : 1;            /*!< [4..4] Direction control bit                                              */
            uint32_t            : 27;
    } bit;
  } P1_DIR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000034) Port 1 open drain control                                  */
    
    struct {
      __IOM uint32_t OD0        : 1;            /*!< [0..0] Open drain control bit                                             */
      __IOM uint32_t OD1        : 1;            /*!< [1..1] Open drain control bit                                             */
      __IOM uint32_t OD2        : 1;            /*!< [2..2] Open drain control bit                                             */
      __IOM uint32_t OD3        : 1;            /*!< [3..3] Open drain control bit                                             */
      __IOM uint32_t OD4        : 1;            /*!< [4..4] Open drain control bit                                             */
            uint32_t            : 27;
    } bit;
  } P1_OD;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000038) Port 1 pull-up/pull-down control                           */
    
    struct {
      __IOM uint32_t PUDEN0     : 1;            /*!< [0..0] Pull-up/pull-down enable bit                                       */
      __IOM uint32_t PUDEN1     : 1;            /*!< [1..1] Pull-up/pull-down enable bit                                       */
      __IOM uint32_t PUDEN2     : 1;            /*!< [2..2] Pull-up/pull-down enable bit                                       */
      __IOM uint32_t PUDEN3     : 1;            /*!< [3..3] Pull-up/pull-down enable bit                                       */
      __IOM uint32_t PUDEN4     : 1;            /*!< [4..4] Pull-up/pull-down enable bit                                       */
            uint32_t            : 11;
      __IOM uint32_t PUDSEL0    : 1;            /*!< [16..16] Pull-up/pull-down select bit                                     */
      __IOM uint32_t PUDSEL1    : 1;            /*!< [17..17] Pull-up/pull-down select bit                                     */
      __IOM uint32_t PUDSEL2    : 1;            /*!< [18..18] Pull-up/pull-down select bit                                     */
      __IOM uint32_t PUDSEL3    : 1;            /*!< [19..19] Pull-up/pull-down select bit                                     */
      __IOM uint32_t PUDSEL4    : 1;            /*!< [20..20] Pull-up/pull-down select bit                                     */
            uint32_t            : 11;
    } bit;
  } P1_PUD;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000003C) Port 1 alternate output select 0                           */
    
    struct {
      __IOM uint32_t ALTSEL0    : 3;            /*!< [2..0] Alternate output select                                            */
            uint32_t            : 1;
      __IOM uint32_t ALTSEL1    : 3;            /*!< [6..4] Alternate output select                                            */
            uint32_t            : 1;
      __IOM uint32_t ALTSEL2    : 3;            /*!< [10..8] Alternate output select                                           */
            uint32_t            : 1;
      __IOM uint32_t ALTSEL3    : 3;            /*!< [14..12] Alternate output select                                          */
            uint32_t            : 1;
      __IOM uint32_t ALTSEL4    : 3;            /*!< [18..16] Alternate output select                                          */
            uint32_t            : 13;
    } bit;
  } P1_ALTSEL0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000040) Port 1 output driver control                               */
    
    struct {
      __IOM uint32_t PDM0       : 2;            /*!< [1..0] Output driver mode control                                         */
      __IOM uint32_t PDM1       : 2;            /*!< [3..2] Output driver mode control                                         */
      __IOM uint32_t PDM2       : 2;            /*!< [5..4] Output driver mode control                                         */
      __IOM uint32_t PDM3       : 2;            /*!< [7..6] Output driver mode control                                         */
      __IOM uint32_t PDM4       : 2;            /*!< [9..8] Output driver mode control                                         */
            uint32_t            : 22;
    } bit;
  } P1_POCON;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000044) Port 2 input register                                      */
    
    struct {
      __IM  uint32_t PI0        : 1;            /*!< [0..0] Input bit                                                          */
      __IM  uint32_t PI1        : 1;            /*!< [1..1] Input bit                                                          */
      __IM  uint32_t PI2        : 1;            /*!< [2..2] Input bit                                                          */
      __IM  uint32_t PI3        : 1;            /*!< [3..3] Input bit                                                          */
      __IM  uint32_t PI4        : 1;            /*!< [4..4] Input bit                                                          */
      __IM  uint32_t PI5        : 1;            /*!< [5..5] Input bit                                                          */
      __IM  uint32_t PI6        : 1;            /*!< [6..6] Input bit                                                          */
      __IM  uint32_t PI7        : 1;            /*!< [7..7] Input bit                                                          */
      __IM  uint32_t PI8        : 1;            /*!< [8..8] Input bit                                                          */
      __IM  uint32_t PI9        : 1;            /*!< [9..9] Input bit                                                          */
            uint32_t            : 22;
    } bit;
  } P2_IN;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000048) Port 2 input disable register                              */
    
    struct {
      __IOM uint32_t INDIS0     : 1;            /*!< [0..0] Input disable control bit                                          */
      __IOM uint32_t INDIS1     : 1;            /*!< [1..1] Input disable control bit                                          */
      __IOM uint32_t INDIS2     : 1;            /*!< [2..2] Input disable control bit                                          */
      __IOM uint32_t INDIS3     : 1;            /*!< [3..3] Input disable control bit                                          */
      __IOM uint32_t INDIS4     : 1;            /*!< [4..4] Input disable control bit                                          */
      __IOM uint32_t INDIS5     : 1;            /*!< [5..5] Input disable control bit                                          */
      __IOM uint32_t INDIS6     : 1;            /*!< [6..6] Input disable control bit                                          */
      __IOM uint32_t INDIS7     : 1;            /*!< [7..7] Input disable control bit                                          */
      __IOM uint32_t INDIS8     : 1;            /*!< [8..8] Input disable control bit                                          */
      __IOM uint32_t INDIS9     : 1;            /*!< [9..9] Input disable control bit                                          */
            uint32_t            : 22;
    } bit;
  } P2_INDIS;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000004C) Port 2 pull-up/pull-down control                           */
    
    struct {
      __IOM uint32_t PUDEN0     : 1;            /*!< [0..0] Pull-up/pull-down enable bit                                       */
      __IOM uint32_t PUDEN1     : 1;            /*!< [1..1] Pull-up/pull-down enable bit                                       */
      __IOM uint32_t PUDEN2     : 1;            /*!< [2..2] Pull-up/pull-down enable bit                                       */
      __IOM uint32_t PUDEN3     : 1;            /*!< [3..3] Pull-up/pull-down enable bit                                       */
      __IOM uint32_t PUDEN4     : 1;            /*!< [4..4] Pull-up/pull-down enable bit                                       */
      __IOM uint32_t PUDEN5     : 1;            /*!< [5..5] Pull-up/pull-down enable bit                                       */
      __IOM uint32_t PUDEN6     : 1;            /*!< [6..6] Pull-up/pull-down enable bit                                       */
      __IOM uint32_t PUDEN7     : 1;            /*!< [7..7] Pull-up/pull-down enable bit                                       */
      __IOM uint32_t PUDEN8     : 1;            /*!< [8..8] Pull-up/pull-down enable bit                                       */
      __IOM uint32_t PUDEN9     : 1;            /*!< [9..9] Pull-up/pull-down enable bit                                       */
            uint32_t            : 6;
      __IOM uint32_t PUDSEL0    : 1;            /*!< [16..16] Pull-up/pull-down select bit                                     */
      __IOM uint32_t PUDSEL1    : 1;            /*!< [17..17] Pull-up/pull-down select bit                                     */
      __IOM uint32_t PUDSEL2    : 1;            /*!< [18..18] Pull-up/pull-down select bit                                     */
      __IOM uint32_t PUDSEL3    : 1;            /*!< [19..19] Pull-up/pull-down select bit                                     */
      __IOM uint32_t PUDSEL4    : 1;            /*!< [20..20] Pull-up/pull-down select bit                                     */
      __IOM uint32_t PUDSEL5    : 1;            /*!< [21..21] Pull-up/pull-down select bit                                     */
      __IOM uint32_t PUDSEL6    : 1;            /*!< [22..22] Pull-up/pull-down select bit                                     */
      __IOM uint32_t PUDSEL7    : 1;            /*!< [23..23] Pull-up/pull-down select bit                                     */
      __IOM uint32_t PUDSEL8    : 1;            /*!< [24..24] Pull-up/pull-down select bit                                     */
      __IOM uint32_t PUDSEL9    : 1;            /*!< [25..25] Pull-up/pull-down select bit                                     */
            uint32_t            : 6;
    } bit;
  } P2_PUD;
} GPIO_Type;                                    /*!< Size = 80 (0x50)                                                          */



/* =========================================================================================================================== */
/* ================                                           GPT12                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief GPT12 (GPT12)
  */

typedef struct {                                /*!< (@ 0x40014000) GPT12 Structure                                            */
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000000) Module Identification Register                             */
    
    struct {
      __IM  uint32_t MOD_REV    : 8;            /*!< [7..0] Module Revision Number                                             */
      __IM  uint32_t MOD_TYPE   : 8;            /*!< [15..8] Module Identification Number                                      */
            uint32_t            : 16;
    } bit;
  } ID;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000004) Port Input Select Register                                 */
    
    struct {
      __IOM uint32_t IST2IN     : 1;            /*!< [0..0] Input Select for T2IN                                              */
      __IOM uint32_t IST2EUD    : 1;            /*!< [1..1] Input Select for T2EUD                                             */
      __IOM uint32_t IST3IN     : 2;            /*!< [3..2] Input Select for T3IN                                              */
      __IOM uint32_t IST3EUD    : 2;            /*!< [5..4] Input Select for T3EUD                                             */
      __IOM uint32_t IST4IN     : 2;            /*!< [7..6] Input Select for T4IN                                              */
      __IOM uint32_t IST4EUD    : 2;            /*!< [9..8] Input Select for TEUD                                              */
      __IOM uint32_t IST5IN     : 1;            /*!< [10..10] Input Select for T5IN                                            */
      __IOM uint32_t IST5EUD    : 1;            /*!< [11..11] Input Select for T5EUD                                           */
      __IOM uint32_t IST6IN     : 1;            /*!< [12..12] Input Select for T6IN                                            */
      __IOM uint32_t IST6EUD    : 1;            /*!< [13..13] Input Select for T6EUD                                           */
      __IOM uint32_t ISCAPIN    : 2;            /*!< [15..14] Input Select for CAPIN                                           */
            uint32_t            : 16;
    } bit;
  } PISEL;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000008) Timer T2 Control Register                                  */
    
    struct {
      __IOM uint32_t T2I        : 3;            /*!< [2..0] Timer T2 Input Parameter Selection                                 */
      __IOM uint32_t T2M        : 3;            /*!< [5..3] Timer T2 Input Mode Control                                        */
      __IOM uint32_t T2R        : 1;            /*!< [6..6] Timer T2 Input Run Bit                                             */
      __IOM uint32_t T2UD       : 1;            /*!< [7..7] Timer T2 Up/Down Control                                           */
      __IOM uint32_t T2UDE      : 1;            /*!< [8..8] Timer T2 External Up/Down Enable                                   */
      __IOM uint32_t T2RC       : 1;            /*!< [9..9] Timer T2 Remote Control                                            */
            uint32_t            : 2;
      __IOM uint32_t T2IRIDIS   : 1;            /*!< [12..12] Timer T2 Interrupt Disable                                       */
      __IOM uint32_t T2EDGE     : 1;            /*!< [13..13] Timer T2 Edge Detection                                          */
      __IOM uint32_t T2CHDIR    : 1;            /*!< [14..14] Timer T2 Count Direction Change                                  */
      __IM  uint32_t T2DIR      : 1;            /*!< [15..15] Timer T2 Rotation Direction                                      */
            uint32_t            : 16;
    } bit;
  } T2CON;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000000C) Timer T3 Control Register                                  */
    
    struct {
      __IOM uint32_t T3I        : 3;            /*!< [2..0] Timer T3 Input Parameter Selection                                 */
      __IOM uint32_t T3M        : 3;            /*!< [5..3] Timer T3 Input Mode Control                                        */
      __IOM uint32_t T3R        : 1;            /*!< [6..6] Timer T3 Input Run Bit                                             */
      __IOM uint32_t T3UD       : 1;            /*!< [7..7] Timer T3 Up/Down Control                                           */
      __IOM uint32_t T3UDE      : 1;            /*!< [8..8] Timer T3 External Up/Down Enable                                   */
      __IOM uint32_t T3OE       : 1;            /*!< [9..9] Overflow/Underflow Output Enable                                   */
      __IOM uint32_t T3OTL      : 1;            /*!< [10..10] Timer T3 Overflow Toggle Latch                                   */
      __IOM uint32_t BPS1       : 2;            /*!< [12..11] GPT1 Block Prescaler Control                                     */
      __IOM uint32_t T3EDGE     : 1;            /*!< [13..13] Timer T3 Edge Detection Flag                                     */
      __IOM uint32_t T3CHDIR    : 1;            /*!< [14..14] Timer T3 Count Direction Change Flag                             */
      __IM  uint32_t T3DIR      : 1;            /*!< [15..15] Timer T3 Rotation Direction Flag                                 */
            uint32_t            : 16;
    } bit;
  } T3CON;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) Timer T4 Control Register                                  */
    
    struct {
      __IOM uint32_t T4I        : 3;            /*!< [2..0] Timer T4 Input Parameter Selection                                 */
      __IOM uint32_t T4M        : 3;            /*!< [5..3] Timer T4 Mode Control (Basic Operating Mode)                       */
      __IOM uint32_t T4R        : 1;            /*!< [6..6] Timer T4 Input Run Bit                                             */
      __IOM uint32_t T4UD       : 1;            /*!< [7..7] Timer T2 Up/Down Control                                           */
      __IOM uint32_t T4UDE      : 1;            /*!< [8..8] Timer T4 External Up/Down Enable                                   */
      __IOM uint32_t T4RC       : 1;            /*!< [9..9] Timer T4 Remote Control                                            */
      __IOM uint32_t CLRT2EN    : 1;            /*!< [10..10] Clear Timer T2 Enable                                            */
      __IOM uint32_t CLRT3EN    : 1;            /*!< [11..11] Clear Timer T3 Enable                                            */
      __IOM uint32_t T4IRDIS    : 1;            /*!< [12..12] Timer T4 Interrupt Disable                                       */
      __IOM uint32_t T4EDGE     : 1;            /*!< [13..13] Timer T4 Edge Direction                                          */
      __IOM uint32_t T4CHDIR    : 1;            /*!< [14..14] Timer T4 Count Direction Change                                  */
      __IM  uint32_t T4RDIR     : 1;            /*!< [15..15] Timer T4 Rotation Direction                                      */
            uint32_t            : 16;
    } bit;
  } T4CON;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000014) Timer T5 Control Register                                  */
    
    struct {
      __IOM uint32_t T5I        : 3;            /*!< [2..0] Timer T5 Input Parameter Selection                                 */
      __IOM uint32_t T5M        : 2;            /*!< [4..3] Timer T5 Input Mode Control                                        */
            uint32_t            : 1;
      __IOM uint32_t T5R        : 1;            /*!< [6..6] Timer T5 Run Bit                                                   */
      __IOM uint32_t T5UD       : 1;            /*!< [7..7] Timer T2 Up/Down Control                                           */
      __IOM uint32_t T5UDE      : 1;            /*!< [8..8] Timer T5 External Up/Down Enable                                   */
      __IOM uint32_t T5RC       : 1;            /*!< [9..9] Timer T5 Remote Control                                            */
      __IOM uint32_t CT3        : 1;            /*!< [10..10] Timer T3 Capture Trigger Enable                                  */
            uint32_t            : 1;
      __IOM uint32_t CI         : 2;            /*!< [13..12] Register CAPREL Capture Trigger Selection                        */
      __IOM uint32_t T5CLR      : 1;            /*!< [14..14] Timer T5 Clear Enable Bit                                        */
      __IOM uint32_t T5SC       : 1;            /*!< [15..15] Timer T5 Capture Mode Enable                                     */
            uint32_t            : 16;
    } bit;
  } T5CON;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000018) Timer T6 Control Register                                  */
    
    struct {
      __IOM uint32_t T6I        : 3;            /*!< [2..0] Timer T6 Input Parameter Selection                                 */
      __IOM uint32_t T6M        : 3;            /*!< [5..3] Timer T6 Mode Control                                              */
      __IOM uint32_t T6R        : 1;            /*!< [6..6] Timer T6 Input Run Bit                                             */
      __IOM uint32_t T6UD       : 1;            /*!< [7..7] Timer T6 Up/Down Control                                           */
      __IOM uint32_t T6UDE      : 1;            /*!< [8..8] Timer T6 External Up/Down Enable                                   */
      __IOM uint32_t T6OE       : 1;            /*!< [9..9] Overflow/Underflow Output Enable                                   */
      __IOM uint32_t T6OTL      : 1;            /*!< [10..10] Timer T6 Overflow Toggle Latch                                   */
      __IOM uint32_t BPS2       : 2;            /*!< [12..11] GPT2 Block Prescaler Control                                     */
            uint32_t            : 1;
      __IOM uint32_t T6CLR      : 1;            /*!< [14..14] Timer T6 Clear Enable Bit                                        */
      __IOM uint32_t T6SR       : 1;            /*!< [15..15] Timer T6 Reload Mode Enable                                      */
            uint32_t            : 16;
    } bit;
  } T6CON;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000001C) Capture/Reload Register                                    */
    
    struct {
      __IOM uint32_t CAPREL     : 16;           /*!< [15..0] Current reload value or Captured value                            */
            uint32_t            : 16;
    } bit;
  } CAPREL;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000020) Timer T2 Count Register                                    */
    
    struct {
      __IOM uint32_t T2         : 16;           /*!< [15..0] Timer T2 Current Value                                            */
            uint32_t            : 16;
    } bit;
  } T2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000024) Timer T3 Count Register                                    */
    
    struct {
      __IOM uint32_t T3         : 16;           /*!< [15..0] Timer T3 Current Value                                            */
            uint32_t            : 16;
    } bit;
  } T3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000028) Timer T4 Count Register                                    */
    
    struct {
      __IOM uint32_t T4         : 16;           /*!< [15..0] Timer T4 Current Value                                            */
            uint32_t            : 16;
    } bit;
  } T4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000002C) Timer 5 Count Register                                     */
    
    struct {
      __IOM uint32_t T5         : 16;           /*!< [15..0] Timer T5 Current Value                                            */
            uint32_t            : 16;
    } bit;
  } T5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000030) Timer 6 Count Register                                     */
    
    struct {
      __IOM uint32_t T6         : 16;           /*!< [15..0] Timer T6 Current Value                                            */
            uint32_t            : 16;
    } bit;
  } T6;
} GPT12_Type;                                   /*!< Size = 52 (0x34)                                                          */



/* =========================================================================================================================== */
/* ================                                          MEMCTRL                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief MEMCTRL (MEMCTRL)
  */

typedef struct {                                /*!< (@ 0x48044000) MEMCTRL Structure                                          */
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000000) Bus Fault Status Register                                  */
    
    struct {
      __IM  uint32_t DBFSTS     : 1;            /*!< [0..0] Data Bus Fault Status Valid Flag                                   */
      __IM  uint32_t SBFSTS     : 1;            /*!< [1..1] System Bus Fault Status Valid Flag                                 */
            uint32_t            : 30;
    } bit;
  } BFSTS;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000004) Bus Fault Status Clear Register                            */
    
    struct {
      __OM  uint32_t DBFSTSCLR  : 1;            /*!< [0..0] Data Bus Fault Status Valid Flag Clear                             */
      __OM  uint32_t SBFSTSCLR  : 1;            /*!< [1..1] System Bus Fault Status Valid Flag Clear                           */
            uint32_t            : 30;
    } bit;
  } BFSTSC;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000008) Bus Fault Status Set Register                              */
    
    struct {
      __OM  uint32_t DBFSTSSET  : 1;            /*!< [0..0] Data Bus Fault Status Valid Flag Set                               */
      __OM  uint32_t SBFSTSSET  : 1;            /*!< [1..1] System Bus Fault Status Valid Flag Set                             */
            uint32_t            : 30;
    } bit;
  } BFSTSS;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x0000000C) Data Bus Fault Address Register                            */
    
    struct {
      __IM  uint32_t DBFA       : 32;           /*!< [31..0] Data Bus Fault Address                                            */
    } bit;
  } DBFA;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000010) System Bus Fault Address Register                          */
    
    struct {
      __IM  uint32_t SBFA       : 32;           /*!< [31..0] System Bus Fault Address                                          */
    } bit;
  } SBFA;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000014) NMI Control Register                                       */
    
    struct {
      __IOM uint32_t NMIDSEN    : 1;            /*!< [0..0] DSRAM Double Bit ECC Error NMI Enable                              */
      __IOM uint32_t NMIPSEN    : 1;            /*!< [1..1] PSRAM Double Bit ECC Error NMI Enable                              */
      __IOM uint32_t NMICDEN    : 1;            /*!< [2..2] Cache Data RAM Double Bit ECC Error NMI Enable                     */
      __IOM uint32_t NMINVM0EN  : 1;            /*!< [3..3] NVM0 Double Bit ECC Error NMI Enable                               */
      __IOM uint32_t NMINVM1EN  : 1;            /*!< [4..4] NVM1 Double Bit ECC Error NMI Enable                               */
      __IOM uint32_t NMIMAP0EN  : 1;            /*!< [5..5] NVM0 MAP Error NMI Enable                                          */
      __IOM uint32_t NMIMAP1EN  : 1;            /*!< [6..6] NVM1 MAP Error NMI Enable                                          */
      __IOM uint32_t NMIWDTEN   : 1;            /*!< [7..7] Watchdog Timer NMI Enable                                          */
      __IOM uint32_t NMISTOFEN  : 1;            /*!< [8..8] Stack Overflow NMI Enable                                          */
            uint32_t            : 23;
    } bit;
  } NMICON;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000018) NMI Status Register                                        */
    
    struct {
      __IM  uint32_t NMIDS      : 1;            /*!< [0..0] DSRAM Double Bit ECC Error NMI Status                              */
      __IM  uint32_t NMIPS      : 1;            /*!< [1..1] PSRAM Double Bit ECC Error NMI Status                              */
      __IM  uint32_t NMICD      : 1;            /*!< [2..2] Cache Data RAM Double Bit ECC Error NMI Status                     */
      __IM  uint32_t NMINVM0    : 1;            /*!< [3..3] NVM0 Double Bit ECC Error NMI Status                               */
      __IM  uint32_t NMINVM1    : 1;            /*!< [4..4] NVM1 Double Bit ECC Error NMI Status                               */
      __IM  uint32_t NMIMAP0    : 1;            /*!< [5..5] NVM0 MAP Error NMI Status                                          */
      __IM  uint32_t NMIMAP1    : 1;            /*!< [6..6] NVM1 MAP Error NMI Status                                          */
      __IM  uint32_t NMIWDT     : 1;            /*!< [7..7] Watchdog Timer NMI Status                                          */
      __IM  uint32_t NMISTOF    : 1;            /*!< [8..8] Stack Overflow NMI Status                                          */
            uint32_t            : 23;
    } bit;
  } NMISR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000001C) NMI Status Clear Register                                  */
    
    struct {
      __OM  uint32_t NMIDSCLR   : 1;            /*!< [0..0] DSRAM Double Bit ECC Error NMI Status Clear                        */
      __OM  uint32_t NMIPSCLR   : 1;            /*!< [1..1] PSRAM Double Bit ECC Error NMI Status Clear                        */
      __OM  uint32_t NMICDCLR   : 1;            /*!< [2..2] Cache Data RAM Double Bit ECC Error NMI Status Clear               */
      __OM  uint32_t NMINVM0CLR : 1;            /*!< [3..3] NVM 0 Double Bit ECC Error NMI Status Clear                        */
      __OM  uint32_t NMINVM1CLR : 1;            /*!< [4..4] NVM1 Double Bit ECC Error NMI Status Clear                         */
      __OM  uint32_t NMIMAP0CLR : 1;            /*!< [5..5] NVM0 MAP Error NMI Status Clear                                    */
      __OM  uint32_t NMIMAP1CLR : 1;            /*!< [6..6] NVM1 MAP Error NMI Status Clear                                    */
      __OM  uint32_t NMIWDTCLR  : 1;            /*!< [7..7] Watchdog Timer NMI Status Clear                                    */
      __OM  uint32_t NMISTOFCLR : 1;            /*!< [8..8] Stack Overflow NMI Status Clear                                    */
            uint32_t            : 23;
    } bit;
  } NMISRC;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000020) NMI Status Set Register                                    */
    
    struct {
      __OM  uint32_t NMIDSSET   : 1;            /*!< [0..0] DSRAM Double Bit ECC Error NMI Status Set                          */
      __OM  uint32_t NMIPSSET   : 1;            /*!< [1..1] PSRAM Double Bit ECC Error NMI Status Set                          */
      __OM  uint32_t NMICDSET   : 1;            /*!< [2..2] Cache Data RAM Double Bit ECC Error NMI Status Set                 */
      __OM  uint32_t NMINVM0SET : 1;            /*!< [3..3] NVM 0 Double Bit ECC Error NMI Status Set                          */
      __OM  uint32_t NMINVM1SET : 1;            /*!< [4..4] NVM1 Double Bit ECC Error NMI Status Set                           */
      __OM  uint32_t NMIMAP0SET : 1;            /*!< [5..5] NVM0 MAP Error NMI Status Set                                      */
      __OM  uint32_t NMIMAP1SET : 1;            /*!< [6..6] NVM1 MAP Error NMI Status Set                                      */
      __OM  uint32_t NMIWDTSET  : 1;            /*!< [7..7] Watchdog Timer NMI Status Set                                      */
      __OM  uint32_t NMISTOFSET : 1;            /*!< [8..8] Stack Overflow NMI Status Set                                      */
            uint32_t            : 23;
    } bit;
  } NMISRS;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000024) MEMCTRL Interrupt Enable Register                          */
    
    struct {
      __IOM uint32_t NVM0OPCIEN : 1;            /*!< [0..0] NVM0 Operation Complete Interrupt Enable                           */
      __IOM uint32_t NVM1OPCIEN : 1;            /*!< [1..1] NVM1 Operation Complete Interrupt Enable                           */
            uint32_t            : 30;
    } bit;
  } IEN;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000028) MEMCTRL Interrupt Status Register                          */
    
    struct {
      __IM  uint32_t NVM0OPC    : 1;            /*!< [0..0] NVM0 Operation Complete Interrupt Status                           */
      __IM  uint32_t NVM1OPC    : 1;            /*!< [1..1] NVM1 Operation Complete Interrupt Status                           */
            uint32_t            : 30;
    } bit;
  } IS;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000002C) MEMCTRL Interrupt Status Clear Register                    */
    
    struct {
      __OM  uint32_t NVM0OPCLR  : 1;            /*!< [0..0] NVM0 Operation Complete Interrupt Status Clear                     */
      __OM  uint32_t NVM1OPCLR  : 1;            /*!< [1..1] NVM1 Operation Complete Interrupt Status Clear                     */
            uint32_t            : 30;
    } bit;
  } ISC;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000030) MEMCTRL Interrupt Status Set Register                      */
    
    struct {
      __OM  uint32_t NVM0OPSET  : 1;            /*!< [0..0] NVM0 Operation Complete Interrupt Status Set                       */
      __OM  uint32_t NVM1OPSET  : 1;            /*!< [1..1] NVM1 Operation Complete Interrupt Status Set                       */
            uint32_t            : 30;
    } bit;
  } ISS;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000034) Memory Protection and Error Status Register                */
    
    struct {
      __IM  uint32_t NVM0_PROT_ERR : 1;         /*!< [0..0] NVM0 Access Protection Error                                       */
      __IM  uint32_t NVM0_ADDR_ERR : 1;         /*!< [1..1] NVM0 Address Protection Error                                      */
      __IM  uint32_t NVM0_SFR_PROT_ERR : 1;     /*!< [2..2] NVM0 SFR Access Protection Error                                   */
      __IM  uint32_t NVM0_SFR_ADDR_ERR : 1;     /*!< [3..3] NVM0 SFR Address Protection Error                                  */
      __IM  uint32_t NVM1_PROT_ERR : 1;         /*!< [4..4] NVM1 Access Protection Error                                       */
      __IM  uint32_t NVM1_ADDR_ERR : 1;         /*!< [5..5] NVM1 Address Protection Error                                      */
      __IM  uint32_t NVM1_SFR_PROT_ERR : 1;     /*!< [6..6] NVM1 SFR Access Protection Error                                   */
      __IM  uint32_t NVM1_SFR_ADDR_ERR : 1;     /*!< [7..7] NVM1 SFR Address Protection Error                                  */
      __IM  uint32_t ROM_PROT_ERR : 1;          /*!< [8..8] ROM Access Protection Error                                        */
      __IM  uint32_t DSRAM_PROT_ERR : 1;        /*!< [9..9] DSRAM Access Protection Error                                      */
      __IM  uint32_t PSRAM_PROT_ERR : 1;        /*!< [10..10] PSRAM Access Protection Error                                    */
            uint32_t            : 5;
      __IM  uint32_t DSSBE      : 1;            /*!< [16..16] DSRAM Single Bit Error Status                                    */
      __IM  uint32_t PSSBE      : 1;            /*!< [17..17] PSRAM Single Bit Error Status                                    */
      __IM  uint32_t CDSBE      : 1;            /*!< [18..18] Cache Data RAM Single Bit Error Status                           */
            uint32_t            : 13;
    } bit;
  } MEMSTS;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000038) Memory Protection and Error Status Register Clear          */
    
    struct {
      __OM  uint32_t NVM0_PROT_ERRCLR : 1;      /*!< [0..0] NVM0Access Protection Error Clear                                  */
      __OM  uint32_t NVM0_ADDR_ERRCLR : 1;      /*!< [1..1] NVM0 Address Protection Error Clear                                */
      __OM  uint32_t NVM0_SFR_PROT_ERRCLR : 1;  /*!< [2..2] NVM0 SFR Access Protection Error Clear                             */
      __OM  uint32_t NVM0_SFR_ADDR_ERRCLR : 1;  /*!< [3..3] NVM0 SFR Address Protection Error Clear                            */
      __OM  uint32_t NVM1_PROT_ERRCLR : 1;      /*!< [4..4] NVM1 Access Protection Error Clear                                 */
      __OM  uint32_t NVM1_ADDR_ERRCLR : 1;      /*!< [5..5] NVM1 Address Protection Error Clear                                */
      __OM  uint32_t NVM1_SFR_PROT_ERRCLR : 1;  /*!< [6..6] NVM1 SFR Access Protection Error Clear                             */
      __OM  uint32_t NVM1_SFR_ADDR_ERRCLR : 1;  /*!< [7..7] NVM1 SFR Address Protection Error Clear                            */
      __OM  uint32_t ROM_PROT_ERRCLR : 1;       /*!< [8..8] ROM Access Protection Error Clear                                  */
      __OM  uint32_t DSRAM_PROT_ERRCLR : 1;     /*!< [9..9] DSRAM Access Protection Error Clear                                */
      __OM  uint32_t PSRAM_PROT_ERRCLR : 1;     /*!< [10..10] PSRAM Access Protection Error Clear                              */
            uint32_t            : 5;
      __OM  uint32_t DSSBECLR   : 1;            /*!< [16..16] DSRAM Single Bit Error Status Clear                              */
      __OM  uint32_t PSSBECLR   : 1;            /*!< [17..17] PSRAM Single Bit Error Status Clear                              */
      __OM  uint32_t CDSBECLR   : 1;            /*!< [18..18] Cache Data RAM Single Bit Error Status Clear                     */
            uint32_t            : 13;
    } bit;
  } MEMSTSC;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000003C) Memory Protection and Error Status Register Set            */
    
    struct {
      __OM  uint32_t NVM0_PROT_ERRSET : 1;      /*!< [0..0] NVM0 Access Protection Error Set                                   */
      __OM  uint32_t NVM0_ADDR_ERRSET : 1;      /*!< [1..1] NVM0 Address Protection Error Set                                  */
      __OM  uint32_t NVM0_SFR_PROT_ERRSET : 1;  /*!< [2..2] NVM0 SFR Access Protection Error Set                               */
      __OM  uint32_t NVM0_SFR_ADDR_ERRSET : 1;  /*!< [3..3] NVM0 SFR Address Protection Error Set                              */
      __OM  uint32_t NVM1_PROT_ERRSET : 1;      /*!< [4..4] NVM1 Access Protection Error Set                                   */
      __OM  uint32_t NVM1_ADDR_ERRSET : 1;      /*!< [5..5] NVM1 Address Protection Error Set                                  */
      __OM  uint32_t NVM1_SFR_PROT_ERRSET : 1;  /*!< [6..6] NVM1 SFR Access Protection Error Set                               */
      __OM  uint32_t NVM1_SFR_ADDR_ERRSET : 1;  /*!< [7..7] NVM1 SFR Address Protection Error Set                              */
      __OM  uint32_t ROM_PROT_ERRSET : 1;       /*!< [8..8] ROM Access Protection Error Set                                    */
      __OM  uint32_t DSRAM_PROT_ERRSET : 1;     /*!< [9..9] DSRAM Access Protection Error Set                                  */
      __OM  uint32_t PSRAM_PROT_ERRSET : 1;     /*!< [10..10] PSRAM Access Protection Error Set                                */
            uint32_t            : 5;
      __OM  uint32_t DSSBESET   : 1;            /*!< [16..16] DSRAM Single Bit Error Status Set                                */
      __OM  uint32_t PSSBESET   : 1;            /*!< [17..17] PSRAM Single Bit Error Status Set                                */
      __OM  uint32_t CDSBESET   : 1;            /*!< [18..18] Cache Data RAM Single Bit Error Status Set                       */
            uint32_t            : 13;
    } bit;
  } MEMSTSS;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000040) Memory Control Register                                    */
    
    struct {
      __IOM uint32_t ROMAWSEN   : 1;            /*!< [0..0] ROM AHB Wait State Enable                                          */
      __IOM uint32_t MEM_DBG_ERR : 1;           /*!< [1..1] Mem Debug Error                                                    */
      __IOM uint32_t CACHEEN    : 1;            /*!< [2..2] NVM1 Cache Enable                                                  */
            uint32_t            : 29;
    } bit;
  } MEMCONTROL;
  __IM  uint32_t  RESERVED[19];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000090) System Startup Status Register                             */
    
    struct {
      __IOM uint32_t MRAMINITSTS : 1;           /*!< [0..0] Map RAM Initialization Status                                      */
      __IOM uint32_t PG100TP_CHKS_ERR : 1;      /*!< [1..1] 100TP Page Checksum Error                                          */
            uint32_t            : 14;
      __IOM uint32_t MAPRAM1_MBISTEXEC : 1;     /*!< [16..16] Map RAM 1 MBIST Execution Status Flag                            */
      __IOM uint32_t MAPRAM0_MBISTEXEC : 1;     /*!< [17..17] Map RAM 0 MBIST Execution Status Flag                            */
      __IOM uint32_t CDRAM_MBISTEXEC : 1;       /*!< [18..18] Cache Data RAM MBIST Execution Status Flag                       */
      __IOM uint32_t CTRAM_MBISTEXEC : 1;       /*!< [19..19] Cache Tag RAM MBIST Execution Status Flag                        */
      __IOM uint32_t CMRAM_MBISTEXEC : 1;       /*!< [20..20] CAN Msg RAM MBIST Execution Status Flag                          */
      __IOM uint32_t PSRAM_MBISTEXEC : 1;       /*!< [21..21] PSRAM MBIST Execution Status Flag                                */
      __IOM uint32_t DSRAM_MBISTEXEC : 1;       /*!< [22..22] DSRAM MBIST Execution Status Flag                                */
            uint32_t            : 1;
      __IOM uint32_t MAPRAM1_MBISTFAIL : 1;     /*!< [24..24] Map RAM 1 MBIST Execution Fail Flag                              */
      __IOM uint32_t MAPRAM0_MBISTFAIL : 1;     /*!< [25..25] Map RAM 0 MBIST Execution Fail Flag                              */
      __IOM uint32_t CDRAM_MBISTFAIL : 1;       /*!< [26..26] Cache Data RAM MBIST Execution Fail Flag                         */
      __IOM uint32_t CTRAM_MBISTFAIL : 1;       /*!< [27..27] Cache Tag RAM MBIST Execution Fail Flag                          */
      __IOM uint32_t CMRAM_MBISTFAIL : 1;       /*!< [28..28] CAN Msg RAM MBIST Execution Fail Flag                            */
      __IOM uint32_t PSRAM_MBISTFAIL : 1;       /*!< [29..29] PSRAM MBIST Execution Fail Flag                                  */
      __IOM uint32_t DSRAM_MBISTFAIL : 1;       /*!< [30..30] DSRAM MBIST Execution Fail Flag                                  */
            uint32_t            : 1;
    } bit;
  } SYS_STRTUP_STS;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000094) NVM Protection Status Register                             */
    
    struct {
      __IOM uint32_t RDEN_UBSL  : 1;            /*!< [0..0] NVM0 Read Protection of Data in User BSL Region                    */
      __IOM uint32_t WREN_UBSL  : 1;            /*!< [1..1] NVM0 Write Protection of Data in User BSL Region                   */
      __IOM uint32_t RDEN_UCODE : 1;            /*!< [2..2] NVM1 Read Protection of Data in User Code Sectors                  */
      __IOM uint32_t WREN_UCODE : 1;            /*!< [3..3] NVM1 Write Protection of Data in User Code Sectors                 */
      __IOM uint32_t RDEN_UDATA : 1;            /*!< [4..4] NVM0 Read Protection of Data in User Data Sectors                  */
      __IOM uint32_t WREN_UDATA : 1;            /*!< [5..5] NVM0 Write Protection of Data in User Data Sectors                 */
      __IOM uint32_t WREN_CS0   : 1;            /*!< [6..6] NVM0 Config Sector Write Protection                                */
      __IOM uint32_t WREN_CS1   : 1;            /*!< [7..7] NVM1 Config Sector Write Protection                                */
      __IOM uint32_t RDEN_CS0   : 1;            /*!< [8..8] NVM0 Read Protection of Config Sector 0                            */
      __IOM uint32_t RDEN_CS1   : 1;            /*!< [9..9] NVM0 Read Protection of Config Sector 1                            */
      __IOM uint32_t WREN_CRYPTO : 1;           /*!< [10..10] NVM1 Write Protection of Data in Crypto Lib Sectors              */
      __IOM uint32_t WREN_MCTRL : 1;            /*!< [11..11] NVM1 Write Protection of Data in Motor Control Lib
                                                     Sectors                                                                   */
      __IOM uint32_t SFR_PROT_DIS : 1;          /*!< [12..12] NVM1 SFR Access Protection                                       */
      __IOM uint32_t RDEN_CRYPTO : 1;           /*!< [13..13] NVM1 Read Protection of Crypto Lib                               */
      __IOM uint32_t RDEN_MCTRL : 1;            /*!< [14..14] NVM1 Read Protection of Secure Lib                               */
            uint32_t            : 1;
      __IOM uint32_t ROM_PROT_DIS : 1;          /*!< [16..16] Disable ROM Protection                                           */
      __IOM uint32_t DSRAM_PROT_DIS : 1;        /*!< [17..17] Disable DSRAM Protection                                         */
      __IOM uint32_t PSRAM_PROT_DIS : 1;        /*!< [18..18] Disable PSRAM Protection                                         */
      __IOM uint32_t NVM0_PROT_DIS : 1;         /*!< [19..19] Disable NVM0 Protection                                          */
      __IOM uint32_t NVM1_PROT_DIS : 1;         /*!< [20..20] Disable NVM1 Protection                                          */
      __IOM uint32_t NVMSFR_PROT_DIS : 1;       /*!< [21..21] Disable NVMSFR Protection                                        */
            uint32_t            : 2;
      __IOM uint32_t UBSL_SIZE  : 3;            /*!< [26..24] User BSL Region Size Definition                                  */
      __IOM uint32_t UBSL_PRIV  : 1;            /*!< [27..27] User BSL Privilege Setting                                       */
            uint32_t            : 4;
    } bit;
  } NVM_PROT_STS;
  __IM  uint32_t  RESERVED1[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000A4) Memory Status Register                                     */
    
    struct {
      __IOM uint32_t SECTORINFO : 6;            /*!< [5..0] Sector number where the Service Algorithm is running
                                                                                                                               */
      __IOM uint32_t SASTATUS   : 2;            /*!< [7..6] Service Algorithm Status                                           */
            uint32_t            : 24;
    } bit;
  } MEMSTAT;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000A8) Stack Overflow Control Register                            */
    
    struct {
      __IOM uint32_t STOF_EN    : 1;            /*!< [0..0] Stack Overflow Enable                                              */
            uint32_t            : 31;
    } bit;
  } STACK_OVF_CTRL;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000AC) Stack Overflow Address Register                            */
    
    struct {
            uint32_t            : 2;
      __IOM uint32_t STOF_ADDR_OFF_L : 13;      /*!< [14..2] Lower DSRAM address offset boundary for stack overflow
                                                     protection                                                                */
            uint32_t            : 3;
      __IOM uint32_t STOF_ADDR_OFF_H : 13;      /*!< [30..18] Higher DSRAM address offset boundary for stack overflow
                                                     protection                                                                */
            uint32_t            : 1;
    } bit;
  } STACK_OVF_ADDR;
  __IM  uint32_t  RESERVED2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000B4) System Tick Calibration Register                           */
    
    struct {
      __IOM uint32_t STCALIB    : 26;           /*!< [25..0] System Tick Calibration                                           */
            uint32_t            : 6;
    } bit;
  } STCALIB;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000B8) System Watchdog Timer Control Register                     */
    
    struct {
      __IOM uint32_t WDTIN      : 1;            /*!< [0..0] Watchdog Timer Input Frequency Selection                           */
      __IOM uint32_t WDTRS      : 1;            /*!< [1..1] WDT Refresh Start                                                  */
      __IOM uint32_t WDTEN      : 1;            /*!< [2..2] WDT Enable                                                         */
            uint32_t            : 1;
      __IM  uint32_t WDTPR      : 1;            /*!< [4..4] Watchdog Prewarning Mode Flag                                      */
      __IOM uint32_t WDTBEN     : 1;            /*!< [5..5] Watchdog Window-Boundary Enable                                    */
            uint32_t            : 26;
    } bit;
  } SYSWDTCON;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000BC) System Watchdog Timer Reload Register                      */
    
    struct {
      __IOM uint32_t WDTREL     : 8;            /*!< [7..0] Watchdog Timer Reload Value - Upper Watchdog Timer Byte            */
            uint32_t            : 24;
    } bit;
  } SYSWDTREL;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x000000C0) System Watchdog Timer Value                                */
    
    struct {
      __IM  uint32_t WDT        : 16;           /*!< [15..0] Watchdog Timer Current Value                                      */
            uint32_t            : 16;
    } bit;
  } SYSWDT;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000C4) System Watchdog Window-Boundary Count                      */
    
    struct {
      __IOM uint32_t WDTWINB    : 8;            /*!< [7..0] Watchdog Window-Boundary Count Value                               */
            uint32_t            : 24;
    } bit;
  } SYSWDTWINB;
  __IM  uint32_t  RESERVED3[4];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000D8) NVM0 AEP Control Register                                  */
    
    struct {
      __IOM uint32_t NVM0_ACCDIS : 1;           /*!< [0..0] NVM0 Access Disable for AEP                                        */
            uint32_t            : 31;
    } bit;
  } AEP_CTRL;
} MEMCTRL_Type;                                 /*!< Size = 220 (0xdc)                                                         */



/* =========================================================================================================================== */
/* ================                                            PLL                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief PLL (PLL)
  */

typedef struct {                                /*!< (@ 0x48008000) PLL Structure                                              */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) PLL0 Control Register                                      */
    
    struct {
      __IOM uint32_t NDIV       : 8;            /*!< [7..0] N-Divider Setting                                                  */
      __IOM uint32_t PDIV       : 6;            /*!< [13..8] P-Divider Setting                                                 */
            uint32_t            : 2;
      __IOM uint32_t K2DIV      : 3;            /*!< [18..16] K2-Divider Setting                                               */
            uint32_t            : 1;
      __IOM uint32_t INSEL      : 2;            /*!< [21..20] PLL Reference Clock Select                                       */
            uint32_t            : 2;
      __IOM uint32_t FREERUN    : 1;            /*!< [24..24] Freerunning Mode Select                                          */
      __OM  uint32_t RESLD      : 1;            /*!< [25..25] Lock Detection Reset                                             */
            uint32_t            : 5;
      __IOM uint32_t PLLEN      : 1;            /*!< [31..31] PLL Enable                                                       */
    } bit;
  } CON0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000004) PLL1 Control Register                                      */
    
    struct {
      __IOM uint32_t NDIV       : 8;            /*!< [7..0] N-Divider Setting                                                  */
      __IOM uint32_t PDIV       : 6;            /*!< [13..8] P-Divider Setting                                                 */
            uint32_t            : 2;
      __IOM uint32_t K2DIV      : 3;            /*!< [18..16] K2-Divider Setting                                               */
            uint32_t            : 1;
      __IOM uint32_t INSEL      : 2;            /*!< [21..20] PLL Reference Clock Select                                       */
            uint32_t            : 2;
      __IOM uint32_t FREERUN    : 1;            /*!< [24..24] Freerunning Mode Select                                          */
      __OM  uint32_t RESLD      : 1;            /*!< [25..25] Lock Detection Reset                                             */
            uint32_t            : 5;
      __IOM uint32_t PLLEN      : 1;            /*!< [31..31] PLL Enable                                                       */
    } bit;
  } CON1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000008) PLL NDIV Spread Control Register                           */
    
    struct {
      __IOM uint32_t SPEN0      : 1;            /*!< [0..0] NDIV PLL0 Spread Enable                                            */
            uint32_t            : 3;
      __IOM uint32_t SPRANGE0   : 2;            /*!< [5..4] PLL0 NDIV Spread Range Value                                       */
      __IOM uint32_t SPUPVAL0   : 10;           /*!< [15..6] PLL0 NDIV Spread Update Interval                                  */
      __IOM uint32_t SPEN1      : 1;            /*!< [16..16] NDIV PLL1 Spread Enable                                          */
            uint32_t            : 3;
      __IOM uint32_t SPRANGE1   : 2;            /*!< [21..20] PLL1 NDIV Spread Range Value                                     */
      __IOM uint32_t SPUPVAL1   : 10;           /*!< [31..22] PLL1 NDIV Spread Update Interval                                 */
    } bit;
  } SPCTR;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x0000000C) PLL Status Register                                        */
    
    struct {
      __IM  uint32_t LCK0       : 1;            /*!< [0..0] Lock Status PLL 0                                                  */
      __IM  uint32_t LCK1       : 1;            /*!< [1..1] Lock Status PLL1                                                   */
            uint32_t            : 2;
      __IM  uint32_t PLL0_LOL_STS : 1;          /*!< [4..4] PLL0 Loss Of Lock Status                                           */
      __IM  uint32_t PLL1_LOL_STS : 1;          /*!< [5..5] PLL1 Loss Of Lock Status                                           */
            uint32_t            : 10;
      __IM  uint32_t OSCSEL_STAT0 : 1;          /*!< [16..16] Oscillator Select Status PLL0                                    */
      __IM  uint32_t OSCSEL_STAT1 : 1;          /*!< [17..17] Oscillator Select Status PLL1                                    */
            uint32_t            : 14;
    } bit;
  } STAT;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) PLL Status Clear Register                                  */
    
    struct {
      __OM  uint32_t PLL0_LOL_STSCLR : 1;       /*!< [0..0] PLL0 Loss Of Lock Status Clear                                     */
      __OM  uint32_t PLL1_LOL_STSCLR : 1;       /*!< [1..1] PLL1 Loss Of Lock Status Clear                                     */
            uint32_t            : 30;
    } bit;
  } STATC;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000014) PLL Status Set Register                                    */
    
    struct {
      __OM  uint32_t PLL0_LOL_STSSET : 1;       /*!< [0..0] PLL0 Loss Of Lock Status Set                                       */
      __OM  uint32_t PLL1_LOL_STSSET : 1;       /*!< [1..1] PLL1 Loss Of Lock Status Set                                       */
            uint32_t            : 30;
    } bit;
  } STATS;
} PLL_Type;                                     /*!< Size = 24 (0x18)                                                          */



/* =========================================================================================================================== */
/* ================                                            PMU                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Power Management Unit (PMU)
  */

typedef struct {                                /*!< (@ 0x48000000) PMU Structure                                              */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) VDDP voltage regulator control register                    */
    
    struct {
      __IOM uint32_t MCNFSTOP   : 2;            /*!< [1..0] Stop mode configuration of VDDP regulator                          */
      __IOM uint32_t ITH_SEL    : 1;            /*!< [2..2] Select current threshold for LCM/HCM mode                          */
            uint32_t            : 29;
    } bit;
  } VDDP_CTRL;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000004) VDDP interrupt enable register                             */
    
    struct {
      __IOM uint32_t UVWARN_IEN : 1;            /*!< [0..0] VDDP undervoltage warning interrupt enable                         */
      __IOM uint32_t OV_IEN     : 1;            /*!< [1..1] VDDP overvoltage interrupt enable                                  */
            uint32_t            : 30;
    } bit;
  } VDDP_IRQEN;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000008) VDDP regulator status register                             */
    
    struct {
      __IM  uint32_t UVWARN_IS  : 1;            /*!< [0..0] VDDP undervoltage warning interrupt status                         */
      __IM  uint32_t OV_IS      : 1;            /*!< [1..1] VDDP overvoltage interrupt status                                  */
            uint32_t            : 14;
      __IM  uint32_t UVWARN_STS : 1;            /*!< [16..16] VDDP undervoltage warning status                                 */
            uint32_t            : 3;
      __IM  uint32_t ILIM_STS   : 1;            /*!< [20..20] VDDP current limitation status                                   */
      __IM  uint32_t HCM_STS    : 1;            /*!< [21..21] VDDP high current mode status                                    */
            uint32_t            : 10;
    } bit;
  } VDDP_STS;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000000C) VDDP regulator status clear register                       */
    
    struct {
      __OM  uint32_t UVWARN_IS_CLR : 1;         /*!< [0..0] VDDP undervoltage warning interrupt status clear                   */
      __OM  uint32_t OV_IS_CLR  : 1;            /*!< [1..1] VDDP overvoltage interrupt status clear                            */
            uint32_t            : 14;
      __OM  uint32_t UVWARN_STS_CLR : 1;        /*!< [16..16] VDDP undervoltage warning status clear                           */
            uint32_t            : 3;
      __OM  uint32_t ILIM_STS_CLR : 1;          /*!< [20..20] VDDP current limitation status clear                             */
      __OM  uint32_t HCM_STS_CLR : 1;           /*!< [21..21] VDDP high current mode status clear                              */
            uint32_t            : 10;
    } bit;
  } VDDP_STS_CLR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) VDDP regulator status set register                         */
    
    struct {
      __OM  uint32_t UVWARN_IS_SET : 1;         /*!< [0..0] VDDP undervoltage warning interrupt status set                     */
      __OM  uint32_t OV_IS_SET  : 1;            /*!< [1..1] VDDP overvoltage interrupt status set                              */
            uint32_t            : 14;
      __OM  uint32_t UVWARN_STS_SET : 1;        /*!< [16..16] VDDP undervoltage warning status set                             */
            uint32_t            : 3;
      __OM  uint32_t ILIM_STS_SET : 1;          /*!< [20..20] VDDP Ilimit status set                                           */
      __OM  uint32_t HCM_STS_SET : 1;           /*!< [21..21] VDDP high current mode status set                                */
            uint32_t            : 10;
    } bit;
  } VDDP_STS_SET;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000014) VDDC voltage regulator control register                    */
    
    struct {
      __IOM uint32_t MCNFSTOP   : 2;            /*!< [1..0] Stop mode configuration of VDDC regulator                          */
            uint32_t            : 30;
    } bit;
  } VDDC_CTRL;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000018) VDDC interrupt enable register                             */
    
    struct {
      __IOM uint32_t UVWARN_IEN : 1;            /*!< [0..0] VDDC undervoltage warning interrupt enable                         */
      __IOM uint32_t OV_IEN     : 1;            /*!< [1..1] VDDC overvoltage interrupt enable                                  */
            uint32_t            : 30;
    } bit;
  } VDDC_IRQEN;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x0000001C) VDDC regulator status register                             */
    
    struct {
      __IM  uint32_t UVWARN_IS  : 1;            /*!< [0..0] VDDC undervoltage warning interrupt status                         */
      __IM  uint32_t OV_IS      : 1;            /*!< [1..1] VDDC overvoltage interrupt status                                  */
            uint32_t            : 14;
      __IM  uint32_t UVWARN_STS : 1;            /*!< [16..16] VDDC undervoltage warning status                                 */
            uint32_t            : 4;
      __IM  uint32_t HCM_STS    : 1;            /*!< [21..21] VDDC high current mode status                                    */
            uint32_t            : 10;
    } bit;
  } VDDC_STS;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000020) VDDC regulator status clear register                       */
    
    struct {
      __OM  uint32_t UVWARN_IS_CLR : 1;         /*!< [0..0] VDDC undervoltage warning interrupt status clear                   */
      __OM  uint32_t OV_IS_CLR  : 1;            /*!< [1..1] Overvoltage interrupt status clear                                 */
            uint32_t            : 14;
      __OM  uint32_t UVWARN_STS_CLR : 1;        /*!< [16..16] VDDC undervoltage warning status clear                           */
            uint32_t            : 4;
      __OM  uint32_t HCM_STS_CLR : 1;           /*!< [21..21] VDDC high current mode status clear                              */
            uint32_t            : 10;
    } bit;
  } VDDC_STS_CLR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000024) VDDC regulator status set register                         */
    
    struct {
      __OM  uint32_t UVWARN_IS_SET : 1;         /*!< [0..0] VDDC undervoltage warning interrupt status set                     */
      __OM  uint32_t OV_IS_SET  : 1;            /*!< [1..1] VDDC overvoltage interrupt status set                              */
            uint32_t            : 14;
      __OM  uint32_t UVWARN_STS_SET : 1;        /*!< [16..16] VDDC undervoltage warning status set                             */
            uint32_t            : 4;
      __OM  uint32_t HCM_STS_SET : 1;           /*!< [21..21] VDDC high current mode status set                                */
            uint32_t            : 10;
    } bit;
  } VDDC_STS_SET;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000028) VDDEXT voltage regulator control register                  */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] VDDEXT enable                                                      */
      __IOM uint32_t CYC_EN     : 1;            /*!< [1..1] VDDEXT cyclic sense enable                                         */
            uint32_t            : 30;
    } bit;
  } VDDEXT_CTRL;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000002C) VDDEXT interrupt enable register                           */
    
    struct {
      __IOM uint32_t UV_IEN     : 1;            /*!< [0..0] VDDEXT undervoltage interrupt enable                               */
      __IOM uint32_t OT_IEN     : 1;            /*!< [1..1] VDDEXT overtemperature interrupt enable                            */
            uint32_t            : 30;
    } bit;
  } VDDEXT_IRQEN;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000030) VDDEXT regulator status register                           */
    
    struct {
      __IM  uint32_t UV_IS      : 1;            /*!< [0..0] VDDEXT undervoltage interrupt status                               */
      __IM  uint32_t OT_IS      : 1;            /*!< [1..1] VDDEXT overtemperature interrupt status                            */
            uint32_t            : 14;
      __IM  uint32_t UV_STS     : 1;            /*!< [16..16] VDDEXT undervoltage status                                       */
      __IM  uint32_t OT_STS     : 1;            /*!< [17..17] VDDEXT overtemperature status                                    */
            uint32_t            : 14;
    } bit;
  } VDDEXT_STS;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000034) VDDEXT regulator status register clear                     */
    
    struct {
      __OM  uint32_t UV_IS_CLR  : 1;            /*!< [0..0] VDDEXT undervoltage interrupt status clear                         */
      __OM  uint32_t OT_IS_CLR  : 1;            /*!< [1..1] VDDEXT overtemperature interrupt status clear                      */
            uint32_t            : 14;
      __OM  uint32_t UV_STS_CLR : 1;            /*!< [16..16] VDDEXT undervoltage status clear                                 */
      __OM  uint32_t OT_STS_CLR : 1;            /*!< [17..17] VDDEXT overtemperature status clear                              */
            uint32_t            : 14;
    } bit;
  } VDDEXT_STS_CLR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000038) VDDEXT regulator status register set                       */
    
    struct {
      __OM  uint32_t UV_IS_SET  : 1;            /*!< [0..0] VDDEXT undervoltage interrupt status set                           */
      __OM  uint32_t OT_IS_SET  : 1;            /*!< [1..1] VDDEXT overtemperature interrupt status set                        */
            uint32_t            : 14;
      __OM  uint32_t UV_STS_SET : 1;            /*!< [16..16] VDDEXT undervoltage status set                                   */
      __OM  uint32_t OT_STS_SET : 1;            /*!< [17..17] VDDEXT overtemperature status set                                */
            uint32_t            : 14;
    } bit;
  } VDDEXT_STS_SET;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x0000003C) Wake fail status register                                  */
    
    struct {
      __IM  uint32_t VDDP_TMOUT : 1;            /*!< [0..0] VDDP regulator timeout                                             */
      __IM  uint32_t VDDC_TMOUT : 1;            /*!< [1..1] VDDP regulator timeout                                             */
      __IM  uint32_t HPCLK_FAIL : 1;            /*!< [2..2] HP clock fail status                                               */
      __IM  uint32_t SYS_OT     : 1;            /*!< [3..3] System overtemperature status                                      */
      __IM  uint32_t FSWD_SEQ_FAIL : 1;         /*!< [4..4] Fail safe watchdog sequential fail status                          */
      __IM  uint32_t VDDP_OT    : 1;            /*!< [5..5] VDDP regulator overtemperature status                              */
      __IM  uint32_t VDDC_OC    : 1;            /*!< [6..6] VDDC overcurrent Status                                            */
            uint32_t            : 25;
    } bit;
  } WAKE_FAIL_STS;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000040) Wake fail status clear register                            */
    
    struct {
      __OM  uint32_t VDDP_TMOUT_CLR : 1;        /*!< [0..0] VDDP Regulator timeout Status Clear                                */
      __OM  uint32_t VDDC_TMOUT_CLR : 1;        /*!< [1..1] VDDP regulator timeout status clear                                */
      __OM  uint32_t HPCLK_FAIL_CLR : 1;        /*!< [2..2] HP clock fail status clear                                         */
      __OM  uint32_t SYS_OT_CLR : 1;            /*!< [3..3] System overtemperature status clear                                */
      __OM  uint32_t FSWD_SEQ_FAIL_CLR : 1;     /*!< [4..4] Fail safe watchdog sequential fail status clear                    */
      __OM  uint32_t VDDP_OT_CLR : 1;           /*!< [5..5] VDDP regulator overtemperature status clear                        */
      __OM  uint32_t VDDC_OC_CLR : 1;           /*!< [6..6] VDDC overcurrent status clear                                      */
            uint32_t            : 25;
    } bit;
  } WAKE_FAIL_CLR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000044) Wake fail status set register                              */
    
    struct {
      __OM  uint32_t VDDP_TMOUT_SET : 1;        /*!< [0..0] VDDP regulator timeout status set                                  */
      __OM  uint32_t VDDC_TMOUT_SET : 1;        /*!< [1..1] VDDP regulator timeout status set                                  */
      __OM  uint32_t HPCLK_FAIL_SET : 1;        /*!< [2..2] HP clock fail status set                                           */
      __OM  uint32_t SYS_OT_SET : 1;            /*!< [3..3] System overtemperature status set                                  */
      __OM  uint32_t FSWD_SEQ_FAIL_SET : 1;     /*!< [4..4] Fails safe watchdog sequential fail status set                     */
      __OM  uint32_t VDDP_OT_SET : 1;           /*!< [5..5] VDDP regulator overtemperature status set                          */
      __OM  uint32_t VDDC_OC_SET : 1;           /*!< [6..6] VDDC overcurrent status set                                        */
            uint32_t            : 25;
    } bit;
  } WAKE_FAIL_SET;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000048) RESET pin control register                                 */
    
    struct {
      __IOM uint32_t TFB        : 3;            /*!< [2..0] Reset blind time selection                                         */
            uint32_t            : 29;
    } bit;
  } RST_CTRL;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x0000004C) Reset status register                                      */
    
    struct {
      __IM  uint32_t VMSUP_UV_RST : 1;          /*!< [0..0] Master supply undervoltage reset status                            */
      __IM  uint32_t MCLK_WD_RST : 1;           /*!< [1..1] Master clock watchdog reset status                                 */
      __IM  uint32_t FS_SLEEPEX_RST : 1;        /*!< [2..2] Fail Sleep mode exit reset status                                  */
      __IM  uint32_t SLEEPEX_RST : 1;           /*!< [3..3] Sleep mode exit reset status                                       */
      __IM  uint32_t STOPEX_RST : 1;            /*!< [4..4] Stop mode exit reset status                                        */
      __IM  uint32_t PIN_RST    : 1;            /*!< [5..5] Pin-Reset reset status                                             */
      __IM  uint32_t FSWD_RST   : 1;            /*!< [6..6] Fail safe watchdog reset status                                    */
      __IM  uint32_t WDT_MCU_RST : 1;           /*!< [7..7] MCU watchdog timer reset status                                    */
      __IM  uint32_t SOFT_RST   : 1;            /*!< [8..8] Soft reset status                                                  */
      __IM  uint32_t LOCKUP_RST : 1;            /*!< [9..9] ARM core lockup reset status                                       */
      __IM  uint32_t VDDP_UV_RST : 1;           /*!< [10..10] VDDP undervoltage reset status                                   */
      __IM  uint32_t VDDC_UV_RST : 1;           /*!< [11..11] VDDC undervoltage reset status                                   */
      __IM  uint32_t SEC_STACK_RST : 1;         /*!< [12..12] Secure stack overflow reset status                               */
      __IM  uint32_t TMS_RST    : 1;            /*!< [13..13] TMS reset status                                                 */
            uint32_t            : 18;
    } bit;
  } RESET_STS;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000050) Reset status clear register                                */
    
    struct {
      __OM  uint32_t VMSUP_UV_RST_CLR : 1;      /*!< [0..0] Master supply undervoltage reset status clear                      */
      __OM  uint32_t MCLK_WD_RST_CLR : 1;       /*!< [1..1] Master clock watchdog reset status clear                           */
      __OM  uint32_t FS_SLEEPEX_RST_CLR : 1;    /*!< [2..2] Fail Sleep mode exit reset status clear                            */
      __OM  uint32_t SLEEPEX_RST_CLR : 1;       /*!< [3..3] Sleep mode exit reset status clear                                 */
      __OM  uint32_t STOPEX_RST_CLR : 1;        /*!< [4..4] Stop mode exit reset status clear                                  */
      __OM  uint32_t PIN_RST_CLR : 1;           /*!< [5..5] Pin reset Status Clear                                             */
      __OM  uint32_t FSWD_RST_CLR : 1;          /*!< [6..6] Fail safe watchdog reset status clear                              */
      __OM  uint32_t WDT_MCU_RST_CLR : 1;       /*!< [7..7] MCU watchdog timer reset status clear                              */
      __OM  uint32_t SOFT_RST_CLR : 1;          /*!< [8..8] Soft reset status clear                                            */
      __OM  uint32_t LOCKUP_RST_CLR : 1;        /*!< [9..9] ARM core lockup reset status                                       */
      __OM  uint32_t VDDP_UV_RST_CLR : 1;       /*!< [10..10] VDDP undervoltage reset status clear                             */
      __OM  uint32_t VDDC_UV_RST_CLR : 1;       /*!< [11..11] VDDC undervoltage reset status clear                             */
      __OM  uint32_t SEC_STACK_RST_CLR : 1;     /*!< [12..12] Secure stack overflow reset status clear                         */
      __OM  uint32_t TMS_RST_CLR : 1;           /*!< [13..13] TMS reset Status Clear                                           */
            uint32_t            : 18;
    } bit;
  } RESET_STS_CLR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000054) Reset status set register                                  */
    
    struct {
      __OM  uint32_t VMSUP_UV_RST_SET : 1;      /*!< [0..0] Master supply undervoltage reset status set                        */
      __OM  uint32_t MCLK_WD_RST_SET : 1;       /*!< [1..1] Master clock watchdog reset status set                             */
      __OM  uint32_t FS_SLEEPEX_RST_SET : 1;    /*!< [2..2] Fail Sleep mode exit reset status set                              */
      __OM  uint32_t SLEEPEX_RST_SET : 1;       /*!< [3..3] Sleep mode exit reset status set                                   */
      __OM  uint32_t STOPEX_RST_SET : 1;        /*!< [4..4] Stop mode exit reset status set                                    */
      __OM  uint32_t PIN_RST_SET : 1;           /*!< [5..5] Pin reset status set                                               */
      __OM  uint32_t FSWD_RST_SET : 1;          /*!< [6..6] Fail safe watchdog reset status set                                */
      __OM  uint32_t WDT_MCU_RST_SET : 1;       /*!< [7..7] MCU watchdog timer reset status set                                */
      __OM  uint32_t SOFT_RST_SET : 1;          /*!< [8..8] Soft reset status set                                              */
      __OM  uint32_t LOCKUP_RST_SET : 1;        /*!< [9..9] ARM core lockup reset status set                                   */
      __OM  uint32_t VDDP_UV_RST_SET : 1;       /*!< [10..10] VDDP undervoltage reset status set                               */
      __OM  uint32_t VDDC_UV_RST_SET : 1;       /*!< [11..11] VDDC undervoltage reset status set                               */
      __OM  uint32_t SEC_STACK_RST_SET : 1;     /*!< [12..12] Secure stack overflow reset status set                           */
      __OM  uint32_t TMS_RST_SET : 1;           /*!< [13..13] TNS reset status set                                             */
            uint32_t            : 18;
    } bit;
  } RESET_STS_SET;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000058) Wake up filter control register                            */
    
    struct {
            uint32_t            : 1;
      __IOM uint32_t MON_FT     : 1;            /*!< [1..1] MON wake up filter time selection                                  */
      __IOM uint32_t GPIO_FT    : 2;            /*!< [3..2] GPIO wake up filter time selection                                 */
            uint32_t            : 28;
    } bit;
  } WAKE_FILT_CTRL;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000005C) Cyclic sense / Cyclic wake control register                */
    
    struct {
      __IOM uint32_t CYC_SENSE_EN : 1;          /*!< [0..0] Cyclic sense enable                                                */
            uint32_t            : 3;
      __IOM uint32_t CYC_ON_TIME : 3;           /*!< [6..4] On time in cyclic sense mode                                       */
            uint32_t            : 9;
      __IOM uint32_t CYC_SENSE_M03 : 4;         /*!< [19..16] Cyclic sense timer mantissa                                      */
      __IOM uint32_t CYC_SENSE_E01 : 2;         /*!< [21..20] Cyclic sense timer exponent                                      */
            uint32_t            : 2;
      __IOM uint32_t CYC_WAKE_M03 : 4;          /*!< [27..24] Cyclic wake timer mantissa                                       */
      __IOM uint32_t CYC_WAKE_E01 : 2;          /*!< [29..28] Cyclic wake timer exponent                                       */
            uint32_t            : 2;
    } bit;
  } CYC_CTRL;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000060) GPIO wake control register                                 */
    
    struct {
      __IOM uint32_t RI         : 1;            /*!< [0..0] Rising edge wake enable                                            */
      __IOM uint32_t FA         : 1;            /*!< [1..1] Falling edge wake enable                                           */
      __IOM uint32_t CYC        : 1;            /*!< [2..2] Cyclic sense enable                                                */
            uint32_t            : 5;
      __IOM uint32_t INP        : 5;            /*!< [12..8] GPIO input pointer                                                */
            uint32_t            : 19;
    } bit;
  } WAKE_GPIO_CTRL0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000064) GPIO wake control register                                 */
    
    struct {
      __IOM uint32_t RI         : 1;            /*!< [0..0] Rising edge wake enable                                            */
      __IOM uint32_t FA         : 1;            /*!< [1..1] Falling edge wake enable                                           */
      __IOM uint32_t CYC        : 1;            /*!< [2..2] Cyclic sense enable                                                */
            uint32_t            : 5;
      __IOM uint32_t INP        : 5;            /*!< [12..8] GPIO input pointer                                                */
            uint32_t            : 19;
    } bit;
  } WAKE_GPIO_CTRL1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000068) GPIO wake control register                                 */
    
    struct {
      __IOM uint32_t RI         : 1;            /*!< [0..0] Rising edge wake enable                                            */
      __IOM uint32_t FA         : 1;            /*!< [1..1] Falling edge wake enable                                           */
      __IOM uint32_t CYC        : 1;            /*!< [2..2] Cyclic sense enable                                                */
            uint32_t            : 5;
      __IOM uint32_t INP        : 5;            /*!< [12..8] GPIO input pointer                                                */
            uint32_t            : 19;
    } bit;
  } WAKE_GPIO_CTRL2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000006C) GPIO wake control register                                 */
    
    struct {
      __IOM uint32_t RI         : 1;            /*!< [0..0] Rising edge wake enable                                            */
      __IOM uint32_t FA         : 1;            /*!< [1..1] Falling edge wake enable                                           */
      __IOM uint32_t CYC        : 1;            /*!< [2..2] Cyclic sense enable                                                */
            uint32_t            : 5;
      __IOM uint32_t INP        : 5;            /*!< [12..8] GPIO input pointer                                                */
            uint32_t            : 19;
    } bit;
  } WAKE_GPIO_CTRL3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000070) GPIO wake control register                                 */
    
    struct {
      __IOM uint32_t RI         : 1;            /*!< [0..0] Rising edge wake enable                                            */
      __IOM uint32_t FA         : 1;            /*!< [1..1] Falling edge wake enable                                           */
      __IOM uint32_t CYC        : 1;            /*!< [2..2] Cyclic sense enable                                                */
            uint32_t            : 5;
      __IOM uint32_t INP        : 5;            /*!< [12..8] GPIO input pointer                                                */
            uint32_t            : 19;
    } bit;
  } WAKE_GPIO_CTRL4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000074) GPIO wake control register                                 */
    
    struct {
      __IOM uint32_t RI         : 1;            /*!< [0..0] Rising edge wake enable                                            */
      __IOM uint32_t FA         : 1;            /*!< [1..1] Falling edge wake enable                                           */
      __IOM uint32_t CYC        : 1;            /*!< [2..2] Cyclic sense enable                                                */
            uint32_t            : 5;
      __IOM uint32_t INP        : 5;            /*!< [12..8] GPIO input pointer                                                */
            uint32_t            : 19;
    } bit;
  } WAKE_GPIO_CTRL5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000078) MON input control register                                 */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] MON input enable                                                   */
      __IOM uint32_t WAKE_RISE  : 1;            /*!< [1..1] Rising edge wake enable                                            */
      __IOM uint32_t WAKE_FALL  : 1;            /*!< [2..2] Falling edge wake enable                                           */
      __IOM uint32_t CYC_SENSE_EN : 1;          /*!< [3..3] Cyclic sense enable                                                */
      __IOM uint32_t PU         : 1;            /*!< [4..4] Input pull up current Source enable                                */
      __IOM uint32_t PD         : 1;            /*!< [5..5] Input pull down current source enable                              */
            uint32_t            : 26;
    } bit;
  } MON_CTRL1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000007C) MON input control register                                 */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] MON input enable                                                   */
      __IOM uint32_t WAKE_RISE  : 1;            /*!< [1..1] Rising edge wake enable                                            */
      __IOM uint32_t WAKE_FALL  : 1;            /*!< [2..2] Falling edge wake enable                                           */
      __IOM uint32_t CYC_SENSE_EN : 1;          /*!< [3..3] Cyclic sense enable                                                */
      __IOM uint32_t PU         : 1;            /*!< [4..4] Input pull up current Source enable                                */
      __IOM uint32_t PD         : 1;            /*!< [5..5] Input pull down current source enable                              */
            uint32_t            : 26;
    } bit;
  } MON_CTRL2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000080) MON input control register                                 */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] MON input enable                                                   */
      __IOM uint32_t WAKE_RISE  : 1;            /*!< [1..1] Rising edge wake enable                                            */
      __IOM uint32_t WAKE_FALL  : 1;            /*!< [2..2] Falling edge wake enable                                           */
      __IOM uint32_t CYC_SENSE_EN : 1;          /*!< [3..3] Cyclic sense enable                                                */
      __IOM uint32_t PU         : 1;            /*!< [4..4] Input pull up current Source enable                                */
      __IOM uint32_t PD         : 1;            /*!< [5..5] Input pull down current source enable                              */
            uint32_t            : 26;
    } bit;
  } MON_CTRL3;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000084) MON input status register                                  */
    
    struct {
      __IM  uint32_t MON1_STS   : 1;            /*!< [0..0] MON1 input status                                                  */
      __IM  uint32_t MON2_STS   : 1;            /*!< [1..1] MON2 input status                                                  */
      __IM  uint32_t MON3_STS   : 1;            /*!< [2..2] MON3 input status                                                  */
            uint32_t            : 29;
    } bit;
  } MON_STS;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000088) Wake control register                                      */
    
    struct {
      __IOM uint32_t CAN_WAKE_EN : 1;           /*!< [0..0] CAN wake enable                                                    */
            uint32_t            : 1;
      __IOM uint32_t CYC_WAKE_EN : 1;           /*!< [2..2] Cyclic wake enable                                                 */
            uint32_t            : 1;
      __IOM uint32_t GPIO0_WAKE_EN : 1;         /*!< [4..4] GPIO0 wake enable                                                  */
      __IOM uint32_t GPIO1_WAKE_EN : 1;         /*!< [5..5] GPIO1 wake enable                                                  */
      __IOM uint32_t GPIO2_WAKE_EN : 1;         /*!< [6..6] GPIO2 wake enable                                                  */
      __IOM uint32_t GPIO3_WAKE_EN : 1;         /*!< [7..7] GPIO3 wake enable                                                  */
      __IOM uint32_t GPIO4_WAKE_EN : 1;         /*!< [8..8] GPIO4 wake enable                                                  */
      __IOM uint32_t GPIO5_WAKE_EN : 1;         /*!< [9..9] GPIO5 wake enable                                                  */
            uint32_t            : 2;
      __IOM uint32_t MON1_WAKE_EN : 1;          /*!< [12..12] MON1 wake enable                                                 */
      __IOM uint32_t MON2_WAKE_EN : 1;          /*!< [13..13] MON2 wake enable                                                 */
      __IOM uint32_t MON3_WAKE_EN : 1;          /*!< [14..14] MON3 wake enable                                                 */
            uint32_t            : 1;
      __IOM uint32_t VDDP_UVWARN_WAKE_EN : 1;   /*!< [16..16] Stop mode VDDP undervoltage warning wake enable                  */
      __IOM uint32_t VDDP_OV_WAKE_EN : 1;       /*!< [17..17] Stop mode VDDP overvoltage wake enable                           */
      __IOM uint32_t VDDP_HCM_WAKE_EN : 1;      /*!< [18..18] Stop mode VDDP high current mode wake enable                     */
      __IOM uint32_t VDDC_UVWARN_WAKE_EN : 1;   /*!< [19..19] Stop mode VDDC undervoltage warning wake enable                  */
      __IOM uint32_t VDDC_OV_WAKE_EN : 1;       /*!< [20..20] Stop mode VDDC overvoltage wake enable                           */
      __IOM uint32_t VDDC_HCM_WAKE_EN : 1;      /*!< [21..21] Stop mode VDDC high current mode wake enable                     */
      __IOM uint32_t VDDEXT_OT_WAKE_EN : 1;     /*!< [22..22] Stop mode VDDEXT overtemperature wake enable                     */
      __IOM uint32_t VDDEXT_UV_WAKE_EN : 1;     /*!< [23..23] Stop mode VDDEXT undervoltage wake enable                        */
      __IOM uint32_t VSDOV_WAKE_EN : 1;         /*!< [24..24] VSD overvoltage wake enable                                      */
            uint32_t            : 3;
      __IOM uint32_t WAKE_W_RST : 1;            /*!< [28..28] Stop mode - Wake with reset enable                               */
      __IOM uint32_t VDDC_RED_EN : 1;           /*!< [29..29] Stop mode - VDDC output voltage reduction enable                 */
            uint32_t            : 2;
    } bit;
  } WAKE_CTRL;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000008C) Wake status register                                       */
    
    struct {
      __IM  uint32_t CAN        : 1;            /*!< [0..0] CAN wake status                                                    */
            uint32_t            : 1;
      __IM  uint32_t CYC_WAKE   : 1;            /*!< [2..2] Cyclic wake status                                                 */
            uint32_t            : 1;
      __IM  uint32_t GPIO0      : 1;            /*!< [4..4] GPIO0 wake status                                                  */
      __IM  uint32_t GPIO1      : 1;            /*!< [5..5] GPIO1 wake status                                                  */
      __IM  uint32_t GPIO2      : 1;            /*!< [6..6] GPIO2 wake status                                                  */
      __IM  uint32_t GPIO3      : 1;            /*!< [7..7] GPIO3 wake status                                                  */
      __IM  uint32_t GPIO4      : 1;            /*!< [8..8] GPIO4 wake status                                                  */
      __IM  uint32_t GPIO5      : 1;            /*!< [9..9] GPIO5 wake status                                                  */
            uint32_t            : 2;
      __IM  uint32_t MON1       : 1;            /*!< [12..12] MON1 wake status                                                 */
      __IM  uint32_t MON2       : 1;            /*!< [13..13] MON2 wake status                                                 */
      __IM  uint32_t MON3       : 1;            /*!< [14..14] MON3 wake status                                                 */
            uint32_t            : 1;
      __IM  uint32_t VDDP_UVWARN : 1;           /*!< [16..16] VDDP undervoltage warning wake status                            */
      __IM  uint32_t VDDP_OV    : 1;            /*!< [17..17] VDDP overvoltage wake status                                     */
      __IM  uint32_t VDDP_HCM   : 1;            /*!< [18..18] VDDP high current mode wake Status                               */
      __IM  uint32_t VDDC_UVWARN : 1;           /*!< [19..19] VDDC undervoltage warning wake status                            */
      __IM  uint32_t VDDC_OV    : 1;            /*!< [20..20] VDDC overvoltage wake status                                     */
      __IM  uint32_t VDDC_HCM   : 1;            /*!< [21..21] VDDC high current mode wake status                               */
      __IM  uint32_t VDDEXT_OT  : 1;            /*!< [22..22] VDDEXT overtemperture wake status                                */
      __IM  uint32_t VDDEXT_UV  : 1;            /*!< [23..23] VDDEXT undervoltage wake status                                  */
      __IOM uint32_t VSD_OV     : 1;            /*!< [24..24] VSD overvoltage wake status                                      */
            uint32_t            : 7;
    } bit;
  } WAKE_STS;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000090) Wake status clear register                                 */
    
    struct {
      __OM  uint32_t CAN_CLR    : 1;            /*!< [0..0] CAN wake status clear                                              */
            uint32_t            : 1;
      __OM  uint32_t CYC_WAKE_CLR : 1;          /*!< [2..2] Cyclic wake status                                                 */
            uint32_t            : 1;
      __OM  uint32_t GPIO0_CLR  : 1;            /*!< [4..4] GPIO0 wake status clear                                            */
      __OM  uint32_t GPIO1_CLR  : 1;            /*!< [5..5] GPIO1 wake status clear                                            */
      __OM  uint32_t GPIO2_CLR  : 1;            /*!< [6..6] GPIO2 wake status clear                                            */
      __OM  uint32_t GPIO3_CLR  : 1;            /*!< [7..7] GPIO3 wake status clear                                            */
      __OM  uint32_t GPIO4_CLR  : 1;            /*!< [8..8] GPIO4 wake status clear                                            */
      __OM  uint32_t GPIO5_CLR  : 1;            /*!< [9..9] GPIO5 wake status clear                                            */
            uint32_t            : 2;
      __OM  uint32_t MON1_CLR   : 1;            /*!< [12..12] MON1 wake status clear                                           */
      __OM  uint32_t MON2_CLR   : 1;            /*!< [13..13] MON2 wake status clear                                           */
      __OM  uint32_t MON3_CLR   : 1;            /*!< [14..14] MON3 wake status clear                                           */
            uint32_t            : 1;
      __OM  uint32_t VDDP_UVWARN_CLR : 1;       /*!< [16..16] VDDP undervoltage warning wake status clear                      */
      __OM  uint32_t VDDP_OV_CLR : 1;           /*!< [17..17] VDDP overvoltage wake status clear                               */
      __OM  uint32_t VDDP_HCM_CLR : 1;          /*!< [18..18] VDDP high current mode wake status clear                         */
      __OM  uint32_t VDDC_UVWARN_CLR : 1;       /*!< [19..19] VDDC undervoltage warning wake status clear                      */
      __OM  uint32_t VDDC_OV_CLR : 1;           /*!< [20..20] VDDC overvoltage wake status clear                               */
      __OM  uint32_t VDDC_HCM_CLR : 1;          /*!< [21..21] VDDC high current mode wake status clear                         */
      __OM  uint32_t VDDEXT_OT_CLR : 1;         /*!< [22..22] VDDEXT overtemperture wake status clear                          */
      __OM  uint32_t VDDEXT_UV_CLR : 1;         /*!< [23..23] VDDEXT undervoltage wake status clear                            */
      __OM  uint32_t VSD_OV_CLR : 1;            /*!< [24..24] VSD undervoltage wake status clear                               */
            uint32_t            : 7;
    } bit;
  } WAKE_STS_CLR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000094) Wake status set register                                   */
    
    struct {
      __OM  uint32_t CAN_SET    : 1;            /*!< [0..0] CAN wake status set                                                */
            uint32_t            : 1;
      __OM  uint32_t CYC_WAKE_SET : 1;          /*!< [2..2] Cyclic wake status set                                             */
            uint32_t            : 1;
      __OM  uint32_t GPIO0_SET  : 1;            /*!< [4..4] GPIO0 wake status set                                              */
      __OM  uint32_t GPIO1_SET  : 1;            /*!< [5..5] GPIO1 wake status set                                              */
      __OM  uint32_t GPIO2_SET  : 1;            /*!< [6..6] GPIO2 wake status set                                              */
      __OM  uint32_t GPIO3_SET  : 1;            /*!< [7..7] GPIO3 wake status set                                              */
      __OM  uint32_t GPIO4_SET  : 1;            /*!< [8..8] GPIO4 wake status set                                              */
      __OM  uint32_t GPIO5_SET  : 1;            /*!< [9..9] GPIO5 wake status set                                              */
            uint32_t            : 2;
      __OM  uint32_t MON1_SET   : 1;            /*!< [12..12] MON1 wake status set                                             */
      __OM  uint32_t MON2_SET   : 1;            /*!< [13..13] MON2 wake status set                                             */
      __OM  uint32_t MON3_SET   : 1;            /*!< [14..14] MON3 wake status set                                             */
            uint32_t            : 1;
      __OM  uint32_t VDDP_UVWARN_SET : 1;       /*!< [16..16] VDDP undervoltage warning wake status set                        */
      __OM  uint32_t VDDP_OV_SET : 1;           /*!< [17..17] VDDP overvoltage wake status set                                 */
      __OM  uint32_t VDDP_HCM_SET : 1;          /*!< [18..18] VDDP high current mode wake status set                           */
      __OM  uint32_t VDDC_UVWARN_SET : 1;       /*!< [19..19] VDDC undervoltage warning wake status set                        */
      __OM  uint32_t VDDC_OV_SET : 1;           /*!< [20..20] VDDC overvoltage wake status set                                 */
      __OM  uint32_t VDDC_HCM_SET : 1;          /*!< [21..21] VDDC high current mode wake status set                           */
      __OM  uint32_t VDDEXT_OT_SET : 1;         /*!< [22..22] VDDEXT overtemperature wake status set                           */
      __OM  uint32_t VDDEXT_UV_SET : 1;         /*!< [23..23] VDDEXT undervoltage wake status set                              */
      __OM  uint32_t VSD_OV_SET : 1;            /*!< [24..24] VSD overvoltage wake status set                                  */
            uint32_t            : 7;
    } bit;
  } WAKE_STS_SET;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000098) General purpose user data register                         */
    
    struct {
      __IOM uint32_t DATA       : 32;           /*!< [31..0] Data storage                                                      */
    } bit;
  } GPUDATA0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000009C) General purpose user data register                         */
    
    struct {
      __IOM uint32_t DATA       : 32;           /*!< [31..0] Data storage                                                      */
    } bit;
  } GPUDATA1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000A0) General purpose user data register                         */
    
    struct {
      __IOM uint32_t DATA       : 32;           /*!< [31..0] Data storage                                                      */
    } bit;
  } GPUDATA2;
  __IM  uint32_t  RESERVED[13];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000D8) Miscellaneous control register                             */
    
    struct {
      __IOM uint32_t FI_PU_EN   : 1;            /*!< [0..0] Failure input pull up enable                                       */
            uint32_t            : 15;
      __IOM uint32_t TRIG_RST   : 1;            /*!< [16..16] Trigger Pin Reset                                                */
            uint32_t            : 15;
    } bit;
  } MISC_CTRL;
  __IM  uint32_t  RESERVED1[2];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000E4) Start configuration control register                       */
    
    struct {
      __IOM uint32_t CONF       : 1;            /*!< [0..0] Start configuration                                                */
      __IOM uint32_t RST_PIN_EN : 1;            /*!< [1..1] Reset PIN enable                                                   */
            uint32_t            : 30;
    } bit;
  } START_CONFIG;
  __IM  uint32_t  RESERVED2[390];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000700) Watchdog control register                                  */
    
    struct {
      __IOM uint32_t EN         : 2;            /*!< [1..0] Watchdog enable                                                    */
            uint32_t            : 14;
      __IOM uint32_t WDP        : 6;            /*!< [21..16] Watchdog period selection                                        */
            uint32_t            : 2;
      __IOM uint32_t SOW        : 2;            /*!< [25..24] Short open window selection - Can only be configured
                                                     in LOW                                                                    */
            uint32_t            : 6;
    } bit;
  } WD_CTRL;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000704) Watchdog trigger register                                  */
    
    struct {
      __IOM uint32_t TRIG       : 1;            /*!< [0..0] Trigger bit for long open- /window Mode                            */
            uint32_t            : 31;
    } bit;
  } WD_TRIG;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000708) Watchdog SOW trigger register                              */
    
    struct {
      __IOM uint32_t TRIG       : 1;            /*!< [0..0] Trigger bit for short open window mode                             */
            uint32_t            : 31;
    } bit;
  } WD_TRIG_SOW;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x0000070C) Functional safety status register                          */
    
    struct {
      __IM  uint32_t MCLK_FAIL_STS : 1;         /*!< [0..0] Master clock watchdog fail status                                  */
      __IM  uint32_t VMSUP_UV_STS : 1;          /*!< [1..1] Master supply undervoltage status                                  */
      __IM  uint32_t VMSUP_OV_STS : 1;          /*!< [2..2] Master supply overvoltage status                                   */
      __IM  uint32_t WD_FAIL_STS : 1;           /*!< [3..3] Watchdog Fail status                                               */
      __IM  uint32_t WD_TEST_FAIL_STS : 1;      /*!< [4..4] Watchdog self test fail status                                     */
      __IM  uint32_t VDDC_UV_STS : 1;           /*!< [5..5] VDDC undervoltage status                                           */
      __IM  uint32_t VDDC_OV_STS : 1;           /*!< [6..6] VDDC overvoltage status                                            */
      __IM  uint32_t VDDP_UV_STS : 1;           /*!< [7..7] VDDP undervoltage status                                           */
      __IM  uint32_t VDDP_OV_STS : 1;           /*!< [8..8] VDDP overvoltage status                                            */
      __IM  uint32_t VDDP_OT_STS : 1;           /*!< [9..9] VDDP overtemperature status                                        */
      __IM  uint32_t VAREF_OV_STS : 1;          /*!< [10..10] VAREF overvoltage status                                         */
      __IM  uint32_t CSC_OC_STS : 1;            /*!< [11..11] Current Sense comparator overcurrent status                      */
      __IM  uint32_t CSC_BIST_FAIL_STS : 1;     /*!< [12..12] Current sense comparator self test fail status                   */
      __IM  uint32_t CSC_EN_FAIL_STS : 1;       /*!< [13..13] Current sense comparator enabling fail status                    */
      __IM  uint32_t PIN_MON_STS : 1;           /*!< [14..14] Pin monitor fail status (FI)                                     */
            uint32_t            : 1;
      __IM  uint32_t FO_OC_STS  : 1;            /*!< [16..16] FO overcurrent status (FO)                                       */
            uint32_t            : 15;
    } bit;
  } FS_STS;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000710) Functional safety status clear register                    */
    
    struct {
      __OM  uint32_t MCLK_FAIL_STS_CLR : 1;     /*!< [0..0] Master clock watchdog fail status                                  */
      __OM  uint32_t VMSUP_UV_STS_CLR : 1;      /*!< [1..1] Master supply undervoltage status                                  */
      __OM  uint32_t VMSUP_OV_STS_CLR : 1;      /*!< [2..2] Master supply overvoltage status                                   */
      __OM  uint32_t WD_FAIL_STS_CLR : 1;       /*!< [3..3] Watchdog fail status                                               */
      __OM  uint32_t WD_TEST_FAIL_STS_CLR : 1;  /*!< [4..4] Watchdog self test fail status                                     */
      __OM  uint32_t VDDC_UV_STS_CLR : 1;       /*!< [5..5] VDDC undervoltage status                                           */
      __OM  uint32_t VDDC_OV_STS_CLR : 1;       /*!< [6..6] VDDC overvoltage status                                            */
      __OM  uint32_t VDDP_UV_STS_CLR : 1;       /*!< [7..7] VDDP undervoltage status                                           */
      __OM  uint32_t VDDP_OV_STS_CLR : 1;       /*!< [8..8] VDDP overvoltage status                                            */
      __OM  uint32_t VDDP_OT_STS_CLR : 1;       /*!< [9..9] VDDP overtemperature status                                        */
      __OM  uint32_t VAREF_OV_STS_CLR : 1;      /*!< [10..10] VAREF overvoltage status                                         */
      __OM  uint32_t CSC_OC_STS_CLR : 1;        /*!< [11..11] Current sense comparator overcurrent status                      */
      __OM  uint32_t CSC_BIST_FAIL_STS_CLR : 1; /*!< [12..12] Current sense comparator self test fail status                   */
      __OM  uint32_t CSC_EN_FAIL_STS_CLR : 1;   /*!< [13..13] Current sense comparator enable fail status                      */
      __OM  uint32_t PIN_MON_STS_CLR : 1;       /*!< [14..14] Pin monitor fail status (FI)                                     */
            uint32_t            : 1;
      __OM  uint32_t FO_OC_STS_CLR : 1;         /*!< [16..16] FO overcurrent status clear (FO)                                 */
            uint32_t            : 15;
    } bit;
  } FS_STS_CLR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000714) Functional safety status set register                      */
    
    struct {
      __OM  uint32_t MCLK_FAIL_STS_SET : 1;     /*!< [0..0] Master clock watchdog fail status                                  */
      __OM  uint32_t VMSUP_UV_STS_SET : 1;      /*!< [1..1] Master supply undervoltage status                                  */
      __OM  uint32_t VMSUP_OV_STS_SET : 1;      /*!< [2..2] Master supply overvoltage status                                   */
      __OM  uint32_t WD_FAIL_STS_SET : 1;       /*!< [3..3] Watchdog fail status                                               */
      __OM  uint32_t WD_TEST_FAIL_STS_SET : 1;  /*!< [4..4] Watchdog self test fail status                                     */
      __OM  uint32_t VDDC_UV_STS_SET : 1;       /*!< [5..5] VDDC undervoltage status                                           */
      __OM  uint32_t VDDC_OV_STS_SET : 1;       /*!< [6..6] VDDC overvoltage status                                            */
      __OM  uint32_t VDDP_UV_STS_SET : 1;       /*!< [7..7] VDDP undervoltage status                                           */
      __OM  uint32_t VDDP_OV_STS_SET : 1;       /*!< [8..8] VDDP overvoltage status                                            */
      __OM  uint32_t VDDP_OT_STS_SET : 1;       /*!< [9..9] VDDP overtemperature status                                        */
      __OM  uint32_t VAREF_OV_STS_SET : 1;      /*!< [10..10] VAREF overvoltage status                                         */
      __OM  uint32_t CSC_OC_STS_SET : 1;        /*!< [11..11] Current sense comparator overcurrent status                      */
      __OM  uint32_t CSC_BIST_FAIL_STS_SET : 1; /*!< [12..12] Current sense comparator self test fail status                   */
      __OM  uint32_t CSC_EN_FAIL_STS_SET : 1;   /*!< [13..13] Current sense comparator enable fail status                      */
      __OM  uint32_t PIN_MON_STS_SET : 1;       /*!< [14..14] Pin monitor fail status (FI)                                     */
            uint32_t            : 1;
      __OM  uint32_t FO_OC_STS_SET : 1;         /*!< [16..16] FO overcurrent status set (FO)                                   */
            uint32_t            : 15;
    } bit;
  } FS_STS_SET;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000718) Safe state status register                                 */
    
    struct {
      __IM  uint32_t SSD_STS    : 2;            /*!< [1..0] Safe shutdown status                                               */
      __IM  uint32_t FO_STS     : 2;            /*!< [3..2] Fail output status (FO)                                            */
            uint32_t            : 28;
    } bit;
  } FS_SSD;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000071C) Safe state status clear register                           */
    
    struct {
      __OM  uint32_t SSD_STS_CLR : 1;           /*!< [0..0] Safe shutdown status clear                                         */
      __OM  uint32_t FO_STS_CLR : 1;            /*!< [1..1] Fail output status clear (FO)                                      */
            uint32_t            : 30;
    } bit;
  } FS_SSD_CLR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000720) Safe state status set register                             */
    
    struct {
      __OM  uint32_t SSD_STS_SET : 1;           /*!< [0..0] Safe shutdown status set                                           */
      __OM  uint32_t FO_STS_SET : 1;            /*!< [1..1] Fail output status set (FO)                                        */
            uint32_t            : 30;
    } bit;
  } FS_SSD_SET;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000724) Current sense comparator control register                  */
    
    struct {
      __IOM uint32_t CSC_DIS    : 1;            /*!< [0..0] Current sense comparator disable                                   */
            uint32_t            : 31;
    } bit;
  } CSC_CTRL;
} PMU_Type;                                     /*!< Size = 1832 (0x728)                                                       */



/* =========================================================================================================================== */
/* ================                                            SCU                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief SCU (SCU)
  */

typedef struct {                                /*!< (@ 0x48004000) SCU Structure                                              */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) System Clock Select Register                               */
    
    struct {
      __IOM uint32_t SELSYS0    : 2;            /*!< [1..0] System Clock fsys0 Select                                          */
      __IOM uint32_t SELSYS1    : 2;            /*!< [3..2] System Clock fsys1 Select                                          */
            uint32_t            : 12;
      __IOM uint32_t SELCLKOUT  : 3;            /*!< [18..16] CLKOUT Selection                                                 */
      __IOM uint32_t CLKOUTEN   : 1;            /*!< [19..19] CLKOUT Enable                                                    */
            uint32_t            : 12;
    } bit;
  } CLKSEL;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000004) Peripheral Clock Prescaler Register                        */
    
    struct {
      __IOM uint32_t PRECPU     : 3;            /*!< [2..0] CPU_CLK Prescaler Setting (based on sys0_clk)                      */
            uint32_t            : 1;
      __IOM uint32_t PREFILT    : 5;            /*!< [8..4] TFILT_CLK Prescaler Setting (based on sys0_clk)                    */
      __IOM uint32_t PREMI      : 3;            /*!< [11..9] MI_CLK Prescaler Setting (based on sys0_clk)                      */
            uint32_t            : 4;
      __IOM uint32_t PRECAN     : 3;            /*!< [18..16] CAN_CLK Prescaler Setting (based on sys1_clk)                    */
            uint32_t            : 1;
      __IOM uint32_t PREUART    : 3;            /*!< [22..20] UART_CLK Prescaler Setting (based on sys1_clk)                   */
            uint32_t            : 1;
      __IOM uint32_t PRECLKOUT  : 3;            /*!< [26..24] CLKOUT_CLK Prescaler Setting (based on selected clock
                                                     by SELCLKOUT)                                                             */
      __IOM uint32_t DIV2CLKOUT : 1;            /*!< [27..27] CLKOUT clock divider by2                                         */
            uint32_t            : 4;
    } bit;
  } CLKCON;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000008) Peripheral Clock Enable Register                           */
    
    struct {
      __IOM uint32_t UARTCLKEN  : 1;            /*!< [0..0] UART Clock Enable                                                  */
      __IOM uint32_t CANCLKEN   : 1;            /*!< [1..1] CAN Clock Enable                                                   */
            uint32_t            : 30;
    } bit;
  } CLKEN;
  __IM  uint32_t  RESERVED[2];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000014) XTAL Control Register                                      */
    
    struct {
      __IOM uint32_t XPD        : 1;            /*!< [0..0] XTAL Power Down Control                                            */
      __IOM uint32_t XTALHYSEN  : 1;            /*!< [1..1] XTAL Hysteresis Enable                                             */
            uint32_t            : 2;
      __IOM uint32_t XTALHYS    : 2;            /*!< [5..4] XTAL Hysteresis Control                                            */
            uint32_t            : 18;
      __IOM uint32_t XWDGEN     : 1;            /*!< [24..24] XTALWDG Enable                                                   */
            uint32_t            : 3;
      __OM  uint32_t XWDGRES    : 1;            /*!< [28..28] XTALWDG Reset                                                    */
            uint32_t            : 3;
    } bit;
  } XTALCON;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000018) XTAL Status Register                                       */
    
    struct {
      __IM  uint32_t XTAL_FAIL_STS : 1;         /*!< [0..0] XTAL Watchdog Fail Latched Status                                  */
            uint32_t            : 7;
      __IM  uint32_t XTALFAIL   : 1;            /*!< [8..8] XTAL Watchdog Fail Current Status                                  */
            uint32_t            : 23;
    } bit;
  } XTALSTAT;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000001C) XTAL Status Clear Register                                 */
    
    struct {
      __OM  uint32_t XTAL_FAIL_STSCLR : 1;      /*!< [0..0] XTAL Watchdog Fail Latched Status Clear                            */
            uint32_t            : 31;
    } bit;
  } XTALSTATC;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000020) XTAL Status Set Register                                   */
    
    struct {
      __OM  uint32_t XTAL_FAIL_STSSET : 1;      /*!< [0..0] XTAL Watchdog Fail Latched Status Set                              */
            uint32_t            : 31;
    } bit;
  } XTALSTATS;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000024) Interrupt Node 0 Mapping Register                          */
    
    struct {
      __IOM uint32_t INP_PMU    : 1;            /*!< [0..0] PMU Interrupt Mapping                                              */
      __IOM uint32_t INP_BDRV_IRQ0 : 1;         /*!< [1..1] Bridge Driver Interrupt 0 Mapping                                  */
      __IOM uint32_t INP_BDRV_IRQ1 : 1;         /*!< [2..2] Bridge Driver Interrupt 1 Mapping                                  */
      __IOM uint32_t INP_CANTX  : 1;            /*!< [3..3] CANTX Interrupt Mapping                                            */
      __IOM uint32_t INP_ARVG   : 1;            /*!< [4..4] ARVG Interrupt Mapping                                             */
      __IOM uint32_t INP_CSC    : 1;            /*!< [5..5] CSC Interrupt Mapping                                              */
            uint32_t            : 26;
    } bit;
  } INP0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000028) Interrupt Node 1 Mapping Register                          */
    
    struct {
      __IOM uint32_t INP_GPT1T2 : 1;            /*!< [0..0] GPT1T2 Interrupt Mapping                                           */
      __IOM uint32_t INP_GPT1T3 : 1;            /*!< [1..1] GPT1T3 Interrupt Mapping                                           */
      __IOM uint32_t INP_GPT1T4 : 1;            /*!< [2..2] GPT1T4 Interrupt Mapping                                           */
      __IOM uint32_t INP_GPT2T5 : 1;            /*!< [3..3] GPT2T5 Interrupt Mapping                                           */
      __IOM uint32_t INP_GPT2T6 : 1;            /*!< [4..4] GPT2T6 Interrupt Mapping                                           */
      __IOM uint32_t INP_GPT2CR : 1;            /*!< [5..5] GPT2CR Interrupt Mapping                                           */
            uint32_t            : 26;
    } bit;
  } INP1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000002C) Interrupt Node 2 Mapping Register                          */
    
    struct {
      __IOM uint32_t INP_MON1   : 1;            /*!< [0..0] MON1 Interrupt Mapping                                             */
      __IOM uint32_t INP_MON2   : 1;            /*!< [1..1] MON2 Interrupt Mapping                                             */
      __IOM uint32_t INP_MON3   : 1;            /*!< [2..2] MON3 Interrupt Mapping                                             */
            uint32_t            : 29;
    } bit;
  } INP2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000030) Interrupt Node 3 Mapping Register                          */
    
    struct {
      __IOM uint32_t INP_SDADC0 : 1;            /*!< [0..0] SDADC0 Interrupt Mapping                                           */
      __IOM uint32_t INP_SDADC1 : 1;            /*!< [1..1] SDADC1 Interrupt Mapping                                           */
      __IOM uint32_t INP_BEMF0  : 1;            /*!< [2..2] BEMF0 Interrupt Mapping                                            */
      __IOM uint32_t INP_BEMF1  : 1;            /*!< [3..3] BEMF1 Interrupt Mapping                                            */
      __IOM uint32_t INP_BEMF2  : 1;            /*!< [4..4] BEMF2 Interrupt Mapping                                            */
            uint32_t            : 27;
    } bit;
  } INP3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000034) Interrupt Node 4 Mapping Register                          */
    
    struct {
      __IOM uint32_t INP_EXINT0 : 1;            /*!< [0..0] EXINT0 Interrupt Mapping                                           */
      __IOM uint32_t INP_EXINT1 : 1;            /*!< [1..1] EXINT1 Interrupt Mapping                                           */
      __IOM uint32_t INP_EXINT2 : 1;            /*!< [2..2] EXINT2 Interrupt Mapping                                           */
      __IOM uint32_t INP_EXINT3 : 1;            /*!< [3..3] EXINT3 Interrupt Mapping                                           */
            uint32_t            : 28;
    } bit;
  } INP4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000038) Interrupt Node 5 Mapping Register                          */
    
    struct {
      __IOM uint32_t INP_LIN0_EOFSYN : 1;       /*!< [0..0] LIN0_EOFSYN Interrupt Mapping                                      */
      __IOM uint32_t INP_LIN0_ERRSYN : 1;       /*!< [1..1] LIN0_ERRSYN Interrupt Mapping                                      */
      __IOM uint32_t INP_LIN1_EOFSYN : 1;       /*!< [2..2] LIN1_EOFSYN Interrupt Mapping                                      */
      __IOM uint32_t INP_LIN1_ERRSYN : 1;       /*!< [3..3] LIN1_ERRSYN Interrupt Mapping                                      */
      __IOM uint32_t INP_UART0_RI : 1;          /*!< [4..4] UART0_RI Interrupt Mapping                                         */
      __IOM uint32_t INP_UART0_TI : 1;          /*!< [5..5] UART0_TI Interrupt Mapping                                         */
      __IOM uint32_t INP_UART1_RI : 1;          /*!< [6..6] UART1_RI Interrupt Mapping                                         */
      __IOM uint32_t INP_UART1_TI : 1;          /*!< [7..7] UART1_TI Interrupt Mapping                                         */
            uint32_t            : 24;
    } bit;
  } INP5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000003C) Interrupt Node 6 Mapping Register                          */
    
    struct {
      __IOM uint32_t INP_SSC0_RIR : 1;          /*!< [0..0] SSC0_RIR Interrupt Mapping                                         */
      __IOM uint32_t INP_SSC0_TIR : 1;          /*!< [1..1] SSC0_TIR Interrupt Mapping                                         */
      __IOM uint32_t INP_SSC0_EIR : 1;          /*!< [2..2] SSC0_EIR Interrupt Mapping                                         */
            uint32_t            : 1;
      __IOM uint32_t INP_SSC1_RIR : 1;          /*!< [4..4] SSC1_RIR Interrupt Mapping                                         */
      __IOM uint32_t INP_SSC1_TIR : 1;          /*!< [5..5] SSC1_TIR Interrupt Mapping                                         */
      __IOM uint32_t INP_SSC1_EIR : 1;          /*!< [6..6] SSC1_EIR Interrupt Mapping                                         */
            uint32_t            : 25;
    } bit;
  } INP6;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000040) Interrupt Node 7 Mapping Register                          */
    
    struct {
      __IOM uint32_t INP_DMACH0 : 1;            /*!< [0..0] DMACH0 Interrupt Mapping                                           */
      __IOM uint32_t INP_DMACH1 : 1;            /*!< [1..1] DMACH1 Interrupt Mapping                                           */
      __IOM uint32_t INP_DMACH2 : 1;            /*!< [2..2] DMACH2 Interrupt Mapping                                           */
      __IOM uint32_t INP_DMACH3 : 1;            /*!< [3..3] DMACH3 Interrupt Mapping                                           */
      __IOM uint32_t INP_DMACH4 : 1;            /*!< [4..4] DMACH4 Interrupt Mapping                                           */
      __IOM uint32_t INP_DMACH5 : 1;            /*!< [5..5] DMACH5 Interrupt Mapping                                           */
      __IOM uint32_t INP_DMACH6 : 1;            /*!< [6..6] DMACH6 Interrupt Mapping                                           */
      __IOM uint32_t INP_DMACH7 : 1;            /*!< [7..7] DMACH7 Interrupt Mapping                                           */
      __IOM uint32_t INP_DMATRERR : 1;          /*!< [8..8] DMATRERR Interrupt Mapping                                         */
            uint32_t            : 23;
    } bit;
  } INP7;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000044) NMI Control Register                                       */
    
    struct {
      __IOM uint32_t NMIXTALEN  : 1;            /*!< [0..0] XTAL Watchdog Fail NMI Enable                                      */
      __IOM uint32_t NMIPLL0EN  : 1;            /*!< [1..1] PLL0 Loss of Lock NMI Enable                                       */
      __IOM uint32_t NMIPLL1EN  : 1;            /*!< [2..2] PLL1 Loss of Lock NMI Enable                                       */
            uint32_t            : 29;
    } bit;
  } NMICON;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000048) NMI Status Register                                        */
    
    struct {
      __IM  uint32_t NMIXTAL    : 1;            /*!< [0..0] XTAL Watchdog Fail NMI Status                                      */
      __IM  uint32_t NMIPLL0    : 1;            /*!< [1..1] PLL0 Loss of Lock NMI Status                                       */
      __IM  uint32_t NMIPLL1    : 1;            /*!< [2..2] PLL1 Loss of Lock NMI Status                                       */
            uint32_t            : 29;
    } bit;
  } NMISR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000004C) NMI Status Clear Register                                  */
    
    struct {
      __OM  uint32_t NMIXTALCLR : 1;            /*!< [0..0] XTAL Watchdog Fail NMI Status Clear                                */
      __OM  uint32_t NMIPLL0CLR : 1;            /*!< [1..1] PLL0 Loss of Lock NMI Status Clear                                 */
      __OM  uint32_t NMIPLL1CLR : 1;            /*!< [2..2] PLL1 Loss of Lock NMI Status Clear                                 */
            uint32_t            : 29;
    } bit;
  } NMISRC;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000050) NMI Status Set Register                                    */
    
    struct {
      __OM  uint32_t NMIXTALSET : 1;            /*!< [0..0] XTAL Watchdog Fail NMI Status Set                                  */
      __OM  uint32_t NMIPLL0SET : 1;            /*!< [1..1] PLL0 Loss of Lock NMI Status Set                                   */
      __OM  uint32_t NMIPLL1SET : 1;            /*!< [2..2] PLL1 Loss of Lock NMI Status Set                                   */
            uint32_t            : 29;
    } bit;
  } NMISRS;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000054) MON Interrupt Enable Register                              */
    
    struct {
      __IOM uint32_t MON1EN     : 1;            /*!< [0..0] MON1 Interrupt Enable                                              */
      __IOM uint32_t MON2EN     : 1;            /*!< [1..1] MON2 Interrupt Enable                                              */
      __IOM uint32_t MON3EN     : 1;            /*!< [2..2] MON3 Interrupt Enable                                              */
            uint32_t            : 29;
    } bit;
  } MONIEN;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000058) MON Interrupt Status Register                              */
    
    struct {
      __IM  uint32_t MON1R      : 1;            /*!< [0..0] MON1 Rising Edge Interrupt Status                                  */
      __IM  uint32_t MON1F      : 1;            /*!< [1..1] MON1 Falling Edge Interrupt Status                                 */
      __IM  uint32_t MON2R      : 1;            /*!< [2..2] MON2 Rising Edge Interrupt Status                                  */
      __IM  uint32_t MON2F      : 1;            /*!< [3..3] MON2 Falling Edge Interrupt Status                                 */
      __IM  uint32_t MON3R      : 1;            /*!< [4..4] MON3 Rising Edge Interrupt Status                                  */
      __IM  uint32_t MON3F      : 1;            /*!< [5..5] MON3 Falling Edge Interrupt Status                                 */
            uint32_t            : 26;
    } bit;
  } MONIS;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000005C) MON Interrupt Status Clear Register                        */
    
    struct {
      __OM  uint32_t MON1RCLR   : 1;            /*!< [0..0] MON1 Rising Edge Interrupt Status Clear                            */
      __OM  uint32_t MON1FCLR   : 1;            /*!< [1..1] MON1 Falling Edge Interrupt Status Clear                           */
      __OM  uint32_t MON2RCLR   : 1;            /*!< [2..2] MON2 Rising Edge Interrupt Status Clear                            */
      __OM  uint32_t MON2FCLR   : 1;            /*!< [3..3] MON2 Falling Edge Interrupt Status Clear                           */
      __OM  uint32_t MON3RCLR   : 1;            /*!< [4..4] MON3 Rising Edge Interrupt Status Clear                            */
      __OM  uint32_t MON3FCLR   : 1;            /*!< [5..5] MON3 Falling Edge Interrupt Status Clear                           */
            uint32_t            : 26;
    } bit;
  } MONISC;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000060) MON Interrupt Status Set Register                          */
    
    struct {
      __OM  uint32_t MON1RSET   : 1;            /*!< [0..0] MON1 Rising Edge Interrupt Status Set                              */
      __OM  uint32_t MON1FSET   : 1;            /*!< [1..1] MON1 Fallinging Edge Interrupt Status Set                          */
      __OM  uint32_t MON2RSET   : 1;            /*!< [2..2] MON2 Rising Edge Interrupt Status Set                              */
      __OM  uint32_t MON2FSET   : 1;            /*!< [3..3] MON2 Fallinging Edge Interrupt Status Set                          */
      __OM  uint32_t MON3RSET   : 1;            /*!< [4..4] MON3 Rising Edge Interrupt Status Set                              */
      __OM  uint32_t MON3FSET   : 1;            /*!< [5..5] MON3 Fallinging Edge Interrupt Status Set                          */
            uint32_t            : 26;
    } bit;
  } MONISS;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000064) MON Interrupt Configuration Register                       */
    
    struct {
      __IOM uint32_t MON1IEV    : 2;            /*!< [1..0] MON1 Interrupt Event Select                                        */
      __IOM uint32_t MON2IEV    : 2;            /*!< [3..2] MON2 Interrupt Event Select                                        */
      __IOM uint32_t MON3IEV    : 2;            /*!< [5..4] MON3 Interrupt Event Select                                        */
            uint32_t            : 26;
    } bit;
  } MONCON;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000068) External Interrupt Enable Register                         */
    
    struct {
      __IOM uint32_t EXTINT0EN  : 1;            /*!< [0..0] External EXTINT0 Interrupt Enable                                  */
      __IOM uint32_t EXTINT1EN  : 1;            /*!< [1..1] External EXTINT1 Interrupt Enable                                  */
      __IOM uint32_t EXTINT2EN  : 1;            /*!< [2..2] External EXTINT2 Interrupt Enable                                  */
      __IOM uint32_t EXTINT3EN  : 1;            /*!< [3..3] External EXTINT3 Interrupt Enable                                  */
            uint32_t            : 28;
    } bit;
  } EXTIEN;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x0000006C) External Interrupt Status Register                         */
    
    struct {
      __IM  uint32_t EXTINT0R   : 1;            /*!< [0..0] External EXTINT0 Rising Edge Interrupt Status                      */
      __IM  uint32_t EXTINT0F   : 1;            /*!< [1..1] External EXTINT0 Falling Edge Interrupt Status                     */
      __IM  uint32_t EXTINT1R   : 1;            /*!< [2..2] External EXTINT1 Rising Edge Interrupt Status                      */
      __IM  uint32_t EXTINT1F   : 1;            /*!< [3..3] External EXTINT1 Falling Edge Interrupt Status                     */
      __IM  uint32_t EXTINT2R   : 1;            /*!< [4..4] External EXTINT2 Rising Edge Interrupt Status                      */
      __IM  uint32_t EXTINT2F   : 1;            /*!< [5..5] External EXTINT2 Falling Edge Interrupt Status                     */
      __IM  uint32_t EXTINT3R   : 1;            /*!< [6..6] External EXTINT3 Rising Edge Interrupt Status                      */
      __IM  uint32_t EXTINT3F   : 1;            /*!< [7..7] External EXTINT3 Falling Edge Interrupt Status                     */
            uint32_t            : 24;
    } bit;
  } EXTIS;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000070) External Interrupt Status Clear Register                   */
    
    struct {
      __OM  uint32_t EXTINT0RCLR : 1;           /*!< [0..0] External EXTINT0 Rising Edge Interrupt Status Clear                */
      __OM  uint32_t EXTINT0FCLR : 1;           /*!< [1..1] External EXTINT0 Falling Edge Interrupt Status Clear               */
      __OM  uint32_t EXTINT1RCLR : 1;           /*!< [2..2] External EXTINT1 Rising Edge Interrupt Status Clear                */
      __OM  uint32_t EXTINT1FCLR : 1;           /*!< [3..3] External EXTINT1 Falling Edge Interrupt Status Clear               */
      __OM  uint32_t EXTINT2RCLR : 1;           /*!< [4..4] External EXTINT2 Rising Edge Interrupt Status Clear                */
      __OM  uint32_t EXTINT2FCLR : 1;           /*!< [5..5] External EXTINT2 Falling Edge Interrupt Status Clear               */
      __OM  uint32_t EXTINT3RCLR : 1;           /*!< [6..6] External EXTINT3 Rising Edge Interrupt Status Clear                */
      __OM  uint32_t EXTINT3FCLR : 1;           /*!< [7..7] External EXTINT3 Falling Edge Interrupt Status Clear               */
            uint32_t            : 24;
    } bit;
  } EXTISC;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000074) External Interrupt Status Set Register                     */
    
    struct {
      __OM  uint32_t EXTINT0RSET : 1;           /*!< [0..0] External EXTINT0 Rising Edge Interrupt Status Set                  */
      __OM  uint32_t EXTINT0FSET : 1;           /*!< [1..1] External EXTINT0 Falling Edge Interrupt Status Set                 */
      __OM  uint32_t EXTINT1RSET : 1;           /*!< [2..2] External EXTINT1Rising Edge Interrupt Status Set                   */
      __OM  uint32_t EXTINT1FSET : 1;           /*!< [3..3] External EXTINT1Falling Edge Interrupt Status Set                  */
      __OM  uint32_t EXTINT2RSET : 1;           /*!< [4..4] External EXTINT2 Rising Edge Interrupt Status Set                  */
      __OM  uint32_t EXTINT2FSET : 1;           /*!< [5..5] External EXTINT2 Falling Edge Interrupt Status Set                 */
      __OM  uint32_t EXTINT3RSET : 1;           /*!< [6..6] External EXTINT3 Rising Edge Interrupt Status Set                  */
      __OM  uint32_t EXTINT3FSET : 1;           /*!< [7..7] External EXTINT3 Falling Edge Interrupt Status Set                 */
            uint32_t            : 24;
    } bit;
  } EXTISS;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000078) EXT Interrupt Configuration Register                       */
    
    struct {
      __IOM uint32_t EXTINT0IEV : 2;            /*!< [1..0] External EXTINT0 Interrupt Event Select                            */
      __IOM uint32_t EXTINT1IEV : 2;            /*!< [3..2] External EXTINT1 Interrupt Event Select                            */
      __IOM uint32_t EXTINT2IEV : 2;            /*!< [5..4] External EXTINT2 Interrupt Event Select                            */
      __IOM uint32_t EXTINT3IEV : 2;            /*!< [7..6] External EXTINT3Interrupt Event Select                             */
      __IOM uint32_t EXTINT0INSEL : 2;          /*!< [9..8] External EXTINT0 Input Select                                      */
      __IOM uint32_t EXTINT1INSEL : 2;          /*!< [11..10] External EXTINT1 Input Select                                    */
      __IOM uint32_t EXTINT2INSEL : 2;          /*!< [13..12] External EXTINT2 Input Select                                    */
      __IOM uint32_t EXTINT3INSEL : 2;          /*!< [15..14] External EXTINT3 Input Select                                    */
            uint32_t            : 16;
    } bit;
  } EXTCON;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000007C) General Purpose Timer 12 Interrupt Enable Register         */
    
    struct {
      __IOM uint32_t GPT1T2EN   : 1;            /*!< [0..0] General Purpose Timer 1 T2 Interrupt Enable                        */
      __IOM uint32_t GPT1T3EN   : 1;            /*!< [1..1] General Purpose Timer 1 T3 Interrupt Enable                        */
      __IOM uint32_t GPT1T4EN   : 1;            /*!< [2..2] General Purpose Timer 1 T4 Interrupt Enable                        */
      __IOM uint32_t GPT2T5EN   : 1;            /*!< [3..3] General Purpose Timer 2 T5 Interrupt Enable                        */
      __IOM uint32_t GPT2T6EN   : 1;            /*!< [4..4] General Purpose Timer 2 T6 Interrupt Enable                        */
      __IOM uint32_t GPT2CREN   : 1;            /*!< [5..5] General Purpose Timer 2 CR Interrupt Enable                        */
            uint32_t            : 26;
    } bit;
  } GPTIEN;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000080) General Purpose Timer 12 Interrupt Status Register         */
    
    struct {
      __IM  uint32_t GPT1T2     : 1;            /*!< [0..0] General Purpose Timer 1 T2 Interrupt Status                        */
      __IM  uint32_t GPT1T3     : 1;            /*!< [1..1] General Purpose Timer 1 T3 Interrupt Status                        */
      __IM  uint32_t GPT1T4     : 1;            /*!< [2..2] General Purpose Timer 1 T4 Interrupt Status                        */
      __IM  uint32_t GPT2T5     : 1;            /*!< [3..3] General Purpose Timer 2 T5 Interrupt Status                        */
      __IM  uint32_t GPT2T6     : 1;            /*!< [4..4] General Purpose Timer 2 T6 Interrupt Status                        */
      __IM  uint32_t GPT2CR     : 1;            /*!< [5..5] General Purpose Timer 2 CR Interrupt Status                        */
            uint32_t            : 26;
    } bit;
  } GPTIS;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000084) General Purpose Timer 12 Interrupt Status Clear
                                                                    Register                                                   */
    
    struct {
      __OM  uint32_t GPT1T2CLR  : 1;            /*!< [0..0] General Purpose Timer 1 T2 Interrupt Status Clear                  */
      __OM  uint32_t GPT1T3CLR  : 1;            /*!< [1..1] General Purpose Timer 1 T3 Interrupt Status Clear                  */
      __OM  uint32_t GPT1T4CLR  : 1;            /*!< [2..2] General Purpose Timer 1 T4 Interrupt Status Clear                  */
      __OM  uint32_t GPT2T5CLR  : 1;            /*!< [3..3] General Purpose Timer 2 T5 Interrupt Status Clear                  */
      __OM  uint32_t GPT2T6CLR  : 1;            /*!< [4..4] General Purpose Timer 2 T6 Interrupt Status Clear                  */
      __OM  uint32_t GPT2CRCLR  : 1;            /*!< [5..5] General Purpose Timer 2 CR Interrupt Status Clear                  */
            uint32_t            : 26;
    } bit;
  } GPTISC;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000088) General Purpose Timer 12 Interrupt Status Set
                                                                    Register                                                   */
    
    struct {
      __OM  uint32_t GPT1T2SET  : 1;            /*!< [0..0] General Purpose Timer 1 T2 Interrupt Status Set                    */
      __OM  uint32_t GPT1T3SET  : 1;            /*!< [1..1] General Purpose Timer 1 T3 Interrupt Status Set                    */
      __OM  uint32_t GPT1T4SET  : 1;            /*!< [2..2] General Purpose Timer 1 T4 Interrupt Status Set                    */
      __OM  uint32_t GPT2T5SET  : 1;            /*!< [3..3] General Purpose Timer 2 T5 Interrupt Status Set                    */
      __OM  uint32_t GPT2T6SET  : 1;            /*!< [4..4] General Purpose Timer 2 T6 Interrupt Status Set                    */
      __OM  uint32_t GPT2CRSET  : 1;            /*!< [5..5] General Purpose Timer 2 CR Interrupt Status Set                    */
            uint32_t            : 26;
    } bit;
  } GPTISS;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000008C) DMA Interrupt Enable Register                              */
    
    struct {
      __IOM uint32_t DMACH0EN   : 1;            /*!< [0..0] DMA Channel 0 Interrupt Enable                                     */
      __IOM uint32_t DMACH1EN   : 1;            /*!< [1..1] DMA Channel 1 Interrupt Enable                                     */
      __IOM uint32_t DMACH2EN   : 1;            /*!< [2..2] DMA Channel 2 Interrupt Enable                                     */
      __IOM uint32_t DMACH3EN   : 1;            /*!< [3..3] DMA Channel 3 Interrupt Enable                                     */
      __IOM uint32_t DMACH4EN   : 1;            /*!< [4..4] DMA Channel 4 Interrupt Enable                                     */
      __IOM uint32_t DMACH5EN   : 1;            /*!< [5..5] DMA Channel 5 Interrupt Enable                                     */
      __IOM uint32_t DMACH6EN   : 1;            /*!< [6..6] DMA Channel 6 Interrupt Enable                                     */
      __IOM uint32_t DMACH7EN   : 1;            /*!< [7..7] DMA Channel 7 Interrupt Enable                                     */
      __IOM uint32_t DMATRERREN : 1;            /*!< [8..8] DMA Error Interrupt Enable                                         */
            uint32_t            : 23;
    } bit;
  } DMAIEN;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000090) DMA Interrupt Status Register                              */
    
    struct {
      __IM  uint32_t DMACH0     : 1;            /*!< [0..0] DMA Channel 0 Interrupt Status                                     */
      __IM  uint32_t DMACH1     : 1;            /*!< [1..1] DMA Channel 1 Interrupt Status                                     */
      __IM  uint32_t DMACH2     : 1;            /*!< [2..2] DMA Channel 2 Interrupt Status                                     */
      __IM  uint32_t DMACH3     : 1;            /*!< [3..3] DMA Channel 3 Interrupt Status                                     */
      __IM  uint32_t DMACH4     : 1;            /*!< [4..4] DMA Channel 4 Interrupt Status                                     */
      __IM  uint32_t DMACH5     : 1;            /*!< [5..5] DMA Channel 5 Interrupt Status                                     */
      __IM  uint32_t DMACH6     : 1;            /*!< [6..6] DMA Channel 6 Interrupt Status                                     */
      __IM  uint32_t DMACH7     : 1;            /*!< [7..7] DMA Channel 7 Interrupt Status                                     */
            uint32_t            : 24;
    } bit;
  } DMAIS;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000094) DAM Interrupt Status Clear Register                        */
    
    struct {
      __OM  uint32_t DMACH0CLR  : 1;            /*!< [0..0] DMA Channel 0 Interrupt Status Clear                               */
      __OM  uint32_t DMACH1CLR  : 1;            /*!< [1..1] DMA Channel 1 Interrupt Status Clear                               */
      __OM  uint32_t DMACH2CLR  : 1;            /*!< [2..2] DMA Channel 2 Interrupt Status Clear                               */
      __OM  uint32_t DMACH3CLR  : 1;            /*!< [3..3] DMA Channel 3 Interrupt Status Clear                               */
      __OM  uint32_t DMACH4CLR  : 1;            /*!< [4..4] DMA Channel 4 Interrupt Status Clear                               */
      __OM  uint32_t DMACH5CLR  : 1;            /*!< [5..5] DMA Channel 5 Interrupt Status Clear                               */
      __OM  uint32_t DMACH6CLR  : 1;            /*!< [6..6] DMA Channel 6 Interrupt Status Clear                               */
      __OM  uint32_t DMACH7CLR  : 1;            /*!< [7..7] DMA Channel 7 Interrupt Status Clear                               */
            uint32_t            : 24;
    } bit;
  } DMAISC;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000098) DMA Interrupt Status Set Register                          */
    
    struct {
      __OM  uint32_t DMACH0SET  : 1;            /*!< [0..0] DMA Channel 0 Interrupt Status Set                                 */
      __OM  uint32_t DMACH1SET  : 1;            /*!< [1..1] DMA Channel 1 Interrupt Status Set                                 */
      __OM  uint32_t DMACH2SET  : 1;            /*!< [2..2] DMA Channel 2 Interrupt Status Set                                 */
      __OM  uint32_t DMACH3SET  : 1;            /*!< [3..3] DMA Channel 3 Interrupt Status Set                                 */
      __OM  uint32_t DMACH4SET  : 1;            /*!< [4..4] DMA Channel 4 Interrupt Status Set                                 */
      __OM  uint32_t DMACH5SET  : 1;            /*!< [5..5] DMA Channel 5 Interrupt Status Set                                 */
      __OM  uint32_t DMACH6SET  : 1;            /*!< [6..6] DMA Channel 6 Interrupt Status Set                                 */
      __OM  uint32_t DMACH7SET  : 1;            /*!< [7..7] DMA Channel 7 Interrupt Status Set                                 */
            uint32_t            : 24;
    } bit;
  } DMAISS;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000009C) DMA Channel Select Register CCU7                           */
    
    struct {
      __IOM uint32_t T12CM70    : 2;            /*!< [1..0] DMA Channel Request Select                                         */
      __IOM uint32_t T12CM71    : 2;            /*!< [3..2] DMA Channel Request Select                                         */
      __IOM uint32_t T12CM72    : 2;            /*!< [5..4] DMA Channel Request Select                                         */
      __IOM uint32_t T12PM      : 2;            /*!< [7..6] DMA Channel Request Select                                         */
      __IOM uint32_t T12ZM      : 2;            /*!< [9..8] DMA Channel Request Select                                         */
      __IOM uint32_t T13CM      : 2;            /*!< [11..10] DMA Channel Request Select                                       */
      __IOM uint32_t T13PM      : 2;            /*!< [13..12] DMA Channel Request Select                                       */
      __IOM uint32_t T13ZM      : 2;            /*!< [15..14] DMA Channel Request Select                                       */
      __IOM uint32_t T14CM      : 2;            /*!< [17..16] DMA Channel Request Select                                       */
      __IOM uint32_t T14PM      : 2;            /*!< [19..18] DMA Channel Request Select                                       */
      __IOM uint32_t T15CM      : 2;            /*!< [21..20] DMA Channel Request Select                                       */
      __IOM uint32_t T15PM      : 2;            /*!< [23..22] DMA Channel Request Select                                       */
      __IOM uint32_t T16CM      : 2;            /*!< [25..24] DMA Channel Request Select                                       */
      __IOM uint32_t T16PM      : 2;            /*!< [27..26] DMA Channel Request Select                                       */
      __IOM uint32_t CHE        : 2;            /*!< [29..28] DMA Channel Request Select                                       */
            uint32_t            : 2;
    } bit;
  } DMAP_CCU7;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000A0) DMA Channel Select Register ADCs                           */
    
    struct {
      __IOM uint32_t ADC1_RES0  : 2;            /*!< [1..0] DMA Channel Request Select                                         */
      __IOM uint32_t ADC1_RES1  : 2;            /*!< [3..2] DMA Channel Request Select                                         */
      __IOM uint32_t ADC1_RES2  : 2;            /*!< [5..4] DMA Channel Request Select                                         */
      __IOM uint32_t ADC1_RES3  : 2;            /*!< [7..6] DMA Channel Request Select                                         */
      __IOM uint32_t ADC1_RES4  : 2;            /*!< [9..8] DMA Channel Request Select                                         */
      __IOM uint32_t ADC1_RES5  : 2;            /*!< [11..10] DMA Channel Request Select                                       */
      __IOM uint32_t ADC1_RES6  : 2;            /*!< [13..12] DMA Channel Request Select                                       */
      __IOM uint32_t ADC1_RES7  : 2;            /*!< [15..14] DMA Channel Request Select                                       */
      __IOM uint32_t ADC1_SQ0   : 2;            /*!< [17..16] DMA Channel Request Select                                       */
      __IOM uint32_t ADC1_SQ1   : 2;            /*!< [19..18] DMA Channel Request Select                                       */
      __IOM uint32_t ADC1_CMPLO : 2;            /*!< [21..20] DMA Channel Request Select                                       */
      __IOM uint32_t ADC1_CMPHI : 2;            /*!< [23..22] DMA Channel Request Select                                       */
      __IOM uint32_t SDADC_RES0 : 2;            /*!< [25..24] DMA Channel Request Select                                       */
      __IOM uint32_t SDADC_RES1 : 2;            /*!< [27..26] DMA Channel Request Select                                       */
            uint32_t            : 4;
    } bit;
  } DMAP_ADC;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000A4) DMA Channel Select Register Timer                          */
    
    struct {
      __IOM uint32_t T2OV       : 1;            /*!< [0..0] DMA Channel Request Select                                         */
      __IOM uint32_t T21OV      : 1;            /*!< [1..1] DMA Channel Request Select                                         */
            uint32_t            : 6;
      __IOM uint32_t GPT12T2    : 1;            /*!< [8..8] DMA Channel Request Select                                         */
      __IOM uint32_t GPT12T3    : 1;            /*!< [9..9] DMA Channel Request Select                                         */
      __IOM uint32_t GPT12T4    : 1;            /*!< [10..10] DMA Channel Request Select                                       */
      __IOM uint32_t GPT12T5    : 1;            /*!< [11..11] DMA Channel Request Select                                       */
      __IOM uint32_t GPT12T6    : 1;            /*!< [12..12] DMA Channel Request Select                                       */
      __IOM uint32_t GPT12CR    : 1;            /*!< [13..13] DMA Channel Request Select                                       */
            uint32_t            : 18;
    } bit;
  } DMAP_TIM;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000A8) DMA Channel Select Register COM Modules                    */
    
    struct {
      __IOM uint32_t SSC0_RIR   : 2;            /*!< [1..0] DMA Channel Request Select                                         */
      __IOM uint32_t SSC0_TIR   : 2;            /*!< [3..2] DMA Channel Request Select                                         */
      __IOM uint32_t SSC1_RIR   : 2;            /*!< [5..4] DMA Channel Request Select                                         */
      __IOM uint32_t SSC1_TIR   : 2;            /*!< [7..6] DMA Channel Request Select                                         */
      __IOM uint32_t UART0_RI   : 2;            /*!< [9..8] DMA Channel Request Select                                         */
      __IOM uint32_t UART0_TI   : 2;            /*!< [11..10] DMA Channel Request Select                                       */
      __IOM uint32_t UART1_RI   : 2;            /*!< [13..12] DMA Channel Request Select                                       */
      __IOM uint32_t UART1_TI   : 2;            /*!< [15..14] DMA Channel Request Select                                       */
      __IOM uint32_t CAN_IR0    : 1;            /*!< [16..16] DMA Channel Request Select                                       */
            uint32_t            : 1;
      __IOM uint32_t CAN_IR1    : 1;            /*!< [18..18] DMA Channel Request Select                                       */
            uint32_t            : 13;
    } bit;
  } DMAP_COM;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000AC) Power Mode Control Register                                */
    
    struct {
            uint32_t            : 1;
      __OM  uint32_t SLEEP      : 1;            /*!< [1..1] Sleep Mode Enable                                                  */
      __OM  uint32_t STOP       : 1;            /*!< [2..2] STOP Mode Enable                                                   */
            uint32_t            : 29;
    } bit;
  } PMCON0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000B0) Peripheral Management Control Register                     */
    
    struct {
      __IOM uint32_t SSC0_DIS   : 1;            /*!< [0..0] SSC0 Module Disable                                                */
      __IOM uint32_t SSC1_DIS   : 1;            /*!< [1..1] SSC1 Module Disable                                                */
      __IOM uint32_t T2_DIS     : 1;            /*!< [2..2] Timer 20 Module Disable                                            */
      __IOM uint32_t T21_DIS    : 1;            /*!< [3..3] Timer 21 Module Disable                                            */
      __IOM uint32_t GPT12_DIS  : 1;            /*!< [4..4] Gerneral Purpose Timer 12 Module Disable                           */
            uint32_t            : 27;
    } bit;
  } PMCON;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000B4) Module Suspend Control Register                            */
    
    struct {
      __IOM uint32_t SSC0SUS    : 1;            /*!< [0..0] SSC0 Suspend                                                       */
      __IOM uint32_t SSC1SUS    : 1;            /*!< [1..1] SSC1 Suspend                                                       */
      __IOM uint32_t T2SUS      : 1;            /*!< [2..2] Timer 20 Suspend                                                   */
      __IOM uint32_t T21SUS     : 1;            /*!< [3..3] Timer 21 Suspend                                                   */
      __IOM uint32_t GPT12SUS   : 1;            /*!< [4..4] Gerneral Purpose Timer 12 Suspend                                  */
      __IOM uint32_t WDTSUS     : 1;            /*!< [5..5] SCU Watchdog Timer Suspend                                         */
            uint32_t            : 26;
    } bit;
  } SUSCTR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000B8) PCU Control Register                                       */
    
    struct {
      __IOM uint32_t OT_SLEEP_EN : 1;           /*!< [0..0] System Overtemperature Sleep Mode Enable                           */
            uint32_t            : 13;
      __IOM uint32_t OTWARN_SD_DIS : 1;         /*!< [14..14] Overtemperature Warning Peripherals Shutdown Disable             */
      __IOM uint32_t XTALWDG_SD_DIS : 1;        /*!< [15..15] XTAL Watchdog Peripherals Shutdown Disable                       */
            uint32_t            : 8;
      __IOM uint32_t BDRV_SD_EN : 1;            /*!< [24..24] BDRV Shutdown Enable                                             */
            uint32_t            : 7;
    } bit;
  } PCU_CTRL;
  __IM  uint32_t  RESERVED1[9];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000E0) DMA Control Register                                       */
    
    struct {
      __IOM uint32_t DEMEN_CH0  : 1;            /*!< [0..0] DMA Endless Mode Enable Channel 0                                  */
      __IOM uint32_t DEMEN_CH1  : 1;            /*!< [1..1] DMA Endless Mode Enable Channel 1                                  */
      __IOM uint32_t DEMEN_CH2  : 1;            /*!< [2..2] DMA Endless Mode Enable Channel 2                                  */
      __IOM uint32_t DEMEN_CH3  : 1;            /*!< [3..3] DMA Endless Mode Enable Channel 3                                  */
      __IOM uint32_t DEMEN_CH4  : 1;            /*!< [4..4] DMA Endless Mode Enable Channel 4                                  */
      __IOM uint32_t DEMEN_CH5  : 1;            /*!< [5..5] DMA Endless Mode Enable Channel 5                                  */
      __IOM uint32_t DEMEN_CH6  : 1;            /*!< [6..6] DMA Endless Mode Enable Channel 6                                  */
      __IOM uint32_t DEMEN_CH7  : 1;            /*!< [7..7] DMA Endless Mode Enable Channel 7                                  */
      __IOM uint32_t DMAREQINTEN_CH0 : 1;       /*!< [8..8] DMA Pending Request Interrupt Enable Channel 0                     */
      __IOM uint32_t DMAREQINTEN_CH1 : 1;       /*!< [9..9] DMA Pending Request Interrupt Enable Channel 1                     */
      __IOM uint32_t DMAREQINTEN_CH2 : 1;       /*!< [10..10] DMA Pending Request Interrupt Enable Channel 2                   */
      __IOM uint32_t DMAREQINTEN_CH3 : 1;       /*!< [11..11] DMA Pending Request Interrupt Enable Channel 3                   */
      __IOM uint32_t DMAREQINTEN_CH4 : 1;       /*!< [12..12] DMA Pending Request Interrupt Enable Channel 4                   */
      __IOM uint32_t DMAREQINTEN_CH5 : 1;       /*!< [13..13] DMA Pending Request Interrupt Enable Channel 5                   */
      __IOM uint32_t DMAREQINTEN_CH6 : 1;       /*!< [14..14] DMA Pending Request Interrupt Enable Channel 6                   */
      __IOM uint32_t DMAREQINTEN_CH7 : 1;       /*!< [15..15] DMA Pending Request Interrupt Enable Channel 7                   */
            uint32_t            : 16;
    } bit;
  } DMACTRL;
  __IM  uint32_t  RESERVED2;
 
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000E8) CPU LOCKUP Config Register                                 */
	
	struct {
      __IOM uint32_t LOCKUP_EN  : 1;            /*!< [0..0] CPU LOCKUP Reset Enable                                            */
	        uint32_t            : 31;
    } bit;
  } LOCKUPCFG;
} SCU_Type;                                     /*!< Size = 236 (0xec)                                                         */



/* =========================================================================================================================== */
/* ================                                           SDADC                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Sigma Delta Analog/Digital Converter (SDADC)
  */

typedef struct {                                /*!< (@ 0x40004000) SDADC Structure                                            */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Configuration Register 0                                   */
    
    struct {
      __IOM uint32_t EN0        : 1;            /*!< [0..0] Enable Channel 0                                                   */
      __IOM uint32_t CICMODE0   : 1;            /*!< [1..1] CIC Filter Mode channel 0                                          */
      __IOM uint32_t WFREN0     : 1;            /*!< [2..2] Wait for Read of Result Register Channel 0                         */
            uint32_t            : 5;
      __IOM uint32_t EN1        : 1;            /*!< [8..8] Enable Channel 1                                                   */
      __IOM uint32_t CICMODE1   : 1;            /*!< [9..9] CIC Filter Mode channel 1                                          */
      __IOM uint32_t WFREN1     : 1;            /*!< [10..10] Wait for Read of Result Register Channel 1                       */
            uint32_t            : 5;
      __IOM uint32_t PRE        : 3;            /*!< [18..16] Prescaler for Modulator and CIC clock                            */
      __IOM uint32_t DITHEREN   : 1;            /*!< [19..19] Dithering of SD ADC Clock for channel 0/1                        */
            uint32_t            : 12;
    } bit;
  } CFG0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000004) Configuration Register 1                                   */
    
    struct {
      __IOM uint32_t DECF0      : 9;            /*!< [8..0] Decimation Factor channel 0                                        */
            uint32_t            : 3;
      __IOM uint32_t RESSHIFT0  : 4;            /*!< [15..12] Result Left shift channel 0                                      */
      __IOM uint32_t DECF1      : 9;            /*!< [24..16] Decimation factor channel 1                                      */
            uint32_t            : 3;
      __IOM uint32_t RESSHIFT1  : 4;            /*!< [31..28] Result Left shift channel 1                                      */
    } bit;
  } CFG1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000008) Alternate function selection                               */
    
    struct {
      __IOM uint32_t MCLK       : 2;            /*!< [1..0] MCLK output mapping                                                */
            uint32_t            : 2;
      __IOM uint32_t DOUT0      : 2;            /*!< [5..4] DOUT0 mapping                                                      */
            uint32_t            : 2;
      __IOM uint32_t DOUT1      : 2;            /*!< [9..8] DOUT1 mapping                                                      */
            uint32_t            : 22;
    } bit;
  } ALTSEL;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000000C) Input Port Selection                                       */
    
    struct {
      __IOM uint32_t IN0PSEL    : 2;            /*!< [1..0] Selection for positive analog input of channel 0                   */
      __IOM uint32_t IN0NSEL    : 2;            /*!< [3..2] Selection for negative analog input of channel 0                   */
      __IOM uint32_t DIN0SEL    : 2;            /*!< [5..4] Selection of digital input of channel 0                            */
      __IOM uint32_t TRG0SEL    : 1;            /*!< [6..6] Trigger Event Selection                                            */
            uint32_t            : 9;
      __IOM uint32_t IN1PSEL    : 2;            /*!< [17..16] Selection for positive analog input of channel 0                 */
      __IOM uint32_t IN1NSEL    : 2;            /*!< [19..18] INN Input Select 1                                               */
      __IOM uint32_t DIN1SEL    : 2;            /*!< [21..20] External Digital Input Selection 1                               */
      __IOM uint32_t TRG1SEL    : 1;            /*!< [22..22] Trigger Event Selection                                          */
            uint32_t            : 9;
    } bit;
  } INSEL;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) Interrupt Enable Register                                  */
    
    struct {
      __IOM uint32_t RES0_EN    : 1;            /*!< [0..0] Result interupt channel 0                                          */
      __IOM uint32_t CMP0_UP_EN : 1;            /*!< [1..1] Upper Compare Level Interupt channel 0                             */
      __IOM uint32_t CMP0_LO_EN : 1;            /*!< [2..2] Lower compare level Interupt channel 0                             */
            uint32_t            : 1;
      __IOM uint32_t RES1_EN    : 1;            /*!< [4..4] Result interupt channel 1                                          */
      __IOM uint32_t CMP1_UP_EN : 1;            /*!< [5..5] Upper Compare Level Interupt channel 1                             */
      __IOM uint32_t CMP1_LO_EN : 1;            /*!< [6..6] Lower compare level Interupt channel 1                             */
            uint32_t            : 25;
    } bit;
  } IEN;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000014) Event Register                                             */
    
    struct {
      __IOM uint32_t RES0_IS    : 1;            /*!< [0..0] Result Interupt channel 0                                          */
      __IOM uint32_t CMP0_UP_IS : 1;            /*!< [1..1] Upper Compare level Interupt channel 0                             */
      __IOM uint32_t CMP0_LO_IS : 1;            /*!< [2..2] Lower compare level interupt channel 0                             */
            uint32_t            : 1;
      __IOM uint32_t RES1_IS    : 1;            /*!< [4..4] Result interupt channel 1                                          */
      __IOM uint32_t CMP1_UP_IS : 1;            /*!< [5..5] Upper Compare level Interupt channel 1                             */
      __IOM uint32_t CMP1_LO_IS : 1;            /*!< [6..6] Lower compare level interupt channel 1                             */
            uint32_t            : 25;
    } bit;
  } IS;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000018) Event Clear Register                                       */
    
    struct {
      __OM  uint32_t RES0_ISC   : 1;            /*!< [0..0] Result Interupt clear channel 0                                    */
      __OM  uint32_t CMP0_UP_ISC : 1;           /*!< [1..1] Upper Compare Level Interupt clear channel 0                       */
      __OM  uint32_t CMP0_LO_ISC : 1;           /*!< [2..2] Lower Compare Level Interupt clear channel 0                       */
            uint32_t            : 1;
      __OM  uint32_t RES1_ISC   : 1;            /*!< [4..4] Result Interupt clear channel 1                                    */
      __OM  uint32_t CMP1_UP_ISC : 1;           /*!< [5..5] Upper Compare Level Interupt clear channel 1                       */
      __OM  uint32_t CMP1_LO_ISC : 1;           /*!< [6..6] Lower Compare Level Interupt clear channel 1                       */
            uint32_t            : 25;
    } bit;
  } ISR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000001C) Event Set Register                                         */
    
    struct {
      __OM  uint32_t RES0_ISS   : 1;            /*!< [0..0] Result Interupt set channel 0                                      */
      __OM  uint32_t CMP0_UP_ISS : 1;           /*!< [1..1] Upper Compare Level Interupt set channel 0                         */
      __OM  uint32_t CMP0_LO_ISS : 1;           /*!< [2..2] Lower Compare Level Interrupt set channel 0                        */
            uint32_t            : 1;
      __OM  uint32_t RES1_ISS   : 1;            /*!< [4..4] Result Interupt set channel 1                                      */
      __OM  uint32_t CMP1_UP_ISS : 1;           /*!< [5..5] Upper Compare Level Interupt set channel 1                         */
      __OM  uint32_t CMP1_LO_ISS : 1;           /*!< [6..6] Lower Compare Level Interupt set channel 1                         */
            uint32_t            : 25;
    } bit;
  } ISS;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000020) Interupt Node Pointer                                      */
    
    struct {
      __IOM uint32_t RES0_INP   : 1;            /*!< [0..0] Result Interupt Node Pointer channel 0                             */
      __IOM uint32_t CMP0_UP_INP : 1;           /*!< [1..1] Upper Compare Level Interupt Pointer channel 0                     */
      __IOM uint32_t CMP0_LO_INP : 1;           /*!< [2..2] Lower Compare Level Interupt Pointer channel 0                     */
            uint32_t            : 1;
      __IOM uint32_t RES1_INP   : 1;            /*!< [4..4] Result Interupt Node Pointer channel 1                             */
      __IOM uint32_t CMP1_UP_INP : 1;           /*!< [5..5] Upper Compare Level Interupt Pointer channel 1                     */
      __IOM uint32_t CMP1_LO_INP : 1;           /*!< [6..6] Lower Compare Level Interupt Pointer channel 1                     */
            uint32_t            : 25;
    } bit;
  } INP;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000024) Suspend Control                                            */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Suspend Mode Enable                                                */
            uint32_t            : 31;
    } bit;
  } SUSCTR;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000028) Suspend Status                                             */
    
    struct {
      __IM  uint32_t STAT       : 1;            /*!< [0..0] Suspend Status                                                     */
            uint32_t            : 31;
    } bit;
  } SUSSTAT;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000002C) Compare Channel 0 Control Register                         */
    
    struct {
      __IOM uint32_t LOWER      : 9;            /*!< [8..0] Lower Compare Level for channel 0                                  */
            uint32_t            : 3;
      __IOM uint32_t HYST_LO    : 2;            /*!< [13..12] Hysteresis setting for lower compare threshold channel
                                                     0                                                                         */
      __IOM uint32_t UPLO_OUTSEL : 2;           /*!< [15..14] Signal output selection for UPLO output of channel
                                                     0                                                                         */
      __IOM uint32_t UPPER      : 9;            /*!< [24..16] Upper Compare Level for channel 0                                */
            uint32_t            : 3;
      __IOM uint32_t HYST_UP    : 2;            /*!< [29..28] Hysteresis setting for upper compare threshold channel
                                                     0                                                                         */
      __IOM uint32_t MODE       : 2;            /*!< [31..30] Compare Mode channel 0                                           */
    } bit;
  } CMP0_CTRL;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000030) Compare Channel 1 Control Register                         */
    
    struct {
      __IOM uint32_t LOWER      : 9;            /*!< [8..0] Lower Compare Level for channel 1                                  */
            uint32_t            : 3;
      __IOM uint32_t HYST_LO    : 2;            /*!< [13..12] Hysteresis setting for lower compare threshold channel
                                                     1                                                                         */
      __IOM uint32_t UPLO_OUTSEL : 2;           /*!< [15..14] Signal output selection for UPLO output of channel
                                                     1                                                                         */
      __IOM uint32_t UPPER      : 9;            /*!< [24..16] Upper Compare Level for channel 1                                */
            uint32_t            : 3;
      __IOM uint32_t HYST_UP    : 2;            /*!< [29..28] Hysteresis setting for upper compare threshold channel
                                                     1                                                                         */
      __IOM uint32_t MODE       : 2;            /*!< [31..30] Compare Mode channel 1                                           */
    } bit;
  } CMP1_CTRL;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000034) Result Register channel 0                                  */
    
    struct {
      __IM  uint32_t RESULT     : 16;           /*!< [15..0] Result Register 2s complement                                     */
      __IM  uint32_t TIMVAL     : 9;            /*!< [24..16] Timestamp Value                                                  */
            uint32_t            : 3;
      __IM  uint32_t VALCNT     : 3;            /*!< [30..28] Valid Counter                                                    */
      __IM  uint32_t RESVALID   : 1;            /*!< [31..31] Result valid                                                     */
    } bit;
  } RES0;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000038) Result Register channel 1                                  */
    
    struct {
      __IM  uint32_t RESULT     : 16;           /*!< [15..0] Result Register 2s complement                                     */
      __IM  uint32_t TIMVAL     : 9;            /*!< [24..16] Timestamp Value                                                  */
            uint32_t            : 3;
      __IM  uint32_t VALCNT     : 3;            /*!< [30..28] Valid Counter                                                    */
      __IM  uint32_t RESVALID   : 1;            /*!< [31..31] Result valid                                                     */
    } bit;
  } RES1;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x0000003C) Captured Timestamp channel 0                               */
    
    struct {
      __IM  uint32_t TIMVAL     : 9;            /*!< [8..0] Captured Timestamp Value                                           */
            uint32_t            : 23;
    } bit;
  } CTIM0;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000040) Captured Timestamp channel 1                               */
    
    struct {
      __IM  uint32_t TIMVAL     : 9;            /*!< [8..0] Captured Timestamp Value                                           */
            uint32_t            : 23;
    } bit;
  } CTIM1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000044) Dither Configuration Register                              */
    
    struct {
      __IOM uint32_t DITH_VOLT_SEL : 4;         /*!< [3..0] Dither voltage Selection                                           */
            uint32_t            : 28;
    } bit;
  } DITHCFG;
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000004C) Status Clear Register                                      */
    
    struct {
            uint32_t            : 1;
      __OM  uint32_t CMP0_UP_SC : 1;            /*!< [1..1] Upper Compare level Status clear channel 0                         */
      __OM  uint32_t CMP0_LO_SC : 1;            /*!< [2..2] Lower compare level Status clear channel 0                         */
      __OM  uint32_t WFR0_SC    : 1;            /*!< [3..3] Wait for Read Status clear channel 0                               */
            uint32_t            : 1;
      __OM  uint32_t CMP1_UP_SC : 1;            /*!< [5..5] Upper Compare level Status clear channel 1                         */
      __OM  uint32_t CMP1_LO_SC : 1;            /*!< [6..6] Lower compare level Status clear channel 1                         */
      __OM  uint32_t WFR1_SC    : 1;            /*!< [7..7] Wait for Read Status clear channel 1                               */
            uint32_t            : 24;
    } bit;
  } STSR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000050) Status Register                                            */
    
    struct {
            uint32_t            : 1;
      __IOM uint32_t CMP0_UP_STS : 1;           /*!< [1..1] Upper Compare level Status channel 0                               */
      __IOM uint32_t CMP0_LO_STS : 1;           /*!< [2..2] Lower compare level Status channel 0                               */
      __IOM uint32_t WFR0_STS   : 1;            /*!< [3..3] Result discarded channel 0                                         */
            uint32_t            : 1;
      __IOM uint32_t CMP1_UP_STS : 1;           /*!< [5..5] Upper Compare level Status channel 1                               */
      __IOM uint32_t CMP1_LO_STS : 1;           /*!< [6..6] Lower compare level Status channel 1                               */
      __IOM uint32_t WFR1_STS   : 1;            /*!< [7..7] Result discarded channel 1                                         */
            uint32_t            : 24;
    } bit;
  } STS;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000054) Status Set Register                                        */
    
    struct {
            uint32_t            : 1;
      __OM  uint32_t CMP0_UP_SS : 1;            /*!< [1..1] Upper Compare level Status set channel 0                           */
      __OM  uint32_t CMP0_LO_SS : 1;            /*!< [2..2] Lower compare level Status set channel 0                           */
      __OM  uint32_t WFR0_SS    : 1;            /*!< [3..3] Wait for Read Status set channel 0                                 */
            uint32_t            : 1;
      __OM  uint32_t CMP1_UP_SS : 1;            /*!< [5..5] Upper Compare level Status set channel 1                           */
      __OM  uint32_t CMP1_LO_SS : 1;            /*!< [6..6] Lower compare level Status set channel 1                           */
      __OM  uint32_t WFR1_SS    : 1;            /*!< [7..7] Wait for Read Status set channel 1                                 */
            uint32_t            : 24;
    } bit;
  } STSS;
} SDADC_Type;                                   /*!< Size = 88 (0x58)                                                          */



/* =========================================================================================================================== */
/* ================                                           SSC0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief SSC0 (SSC0)
  */

typedef struct {                                /*!< (@ 0x48020000) SSC0 Structure                                             */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Control Register                                           */
    
    struct {
      __IOM uint32_t BM         : 6;            /*!< [5..0] Data Width Selection - Number of bits per transfer                 */
      __IOM uint32_t HB         : 1;            /*!< [6..6] Heading Control                                                    */
      __IOM uint32_t PH         : 1;            /*!< [7..7] Clock Phase Control                                                */
      __IOM uint32_t PO         : 1;            /*!< [8..8] Clock Polarity Control                                             */
      __IOM uint32_t LB         : 1;            /*!< [9..9] Loop Back Control                                                  */
            uint32_t            : 2;
      __IOM uint32_t AREN       : 1;            /*!< [12..12] Automatic Reset Enable                                           */
            uint32_t            : 1;
      __IOM uint32_t MS         : 1;            /*!< [14..14] Master Select                                                    */
      __IOM uint32_t EN         : 1;            /*!< [15..15] Enable Bit                                                       */
      __IOM uint32_t SLCSEN     : 1;            /*!< [16..16] Slave Chip Select Enable                                         */
      __IOM uint32_t MSCSEN     : 1;            /*!< [17..17] Master Chip Select Enable                                        */
      __IOM uint32_t MSCSSEL    : 4;            /*!< [21..18] Master Chip Select Output Selection                              */
      __OM  uint32_t MSTXSTART  : 1;            /*!< [22..22] Master Mode Transmit Start Bit                                   */
      __IOM uint32_t MSTXENSEL  : 2;            /*!< [24..23] Master Mode Transmit Start Trigger Select                        */
            uint32_t            : 7;
    } bit;
  } CON;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000004) Port Input Select Register                                 */
    
    struct {
      __IOM uint32_t MRSTSEL    : 2;            /*!< [1..0] Master Mode Data Input Select                                      */
      __IOM uint32_t SLCLKSEL   : 2;            /*!< [3..2] Slave Mode Clock Input Select                                      */
      __IOM uint32_t MTSRSEL    : 2;            /*!< [5..4] Slave Mode Data Input Select                                       */
      __IOM uint32_t SLCSSEL    : 2;            /*!< [7..6] Slave Mode Chip Select Input Select                                */
      __IOM uint32_t TXEVSEL    : 2;            /*!< [9..8] Master Mode TX Start Event Input Select                            */
            uint32_t            : 22;
    } bit;
  } INSEL;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000008) Master Mode Chip Select Timings Register                   */
    
    struct {
      __IOM uint32_t ST         : 6;            /*!< [5..0] CS Low Time At Start Of Transmission                               */
            uint32_t            : 2;
      __IOM uint32_t END        : 6;            /*!< [13..8] CS Low Time At End Of Transmission                                */
            uint32_t            : 2;
      __IOM uint32_t HIGH       : 6;            /*!< [21..16] Minimum CS High Time After Transmission                          */
            uint32_t            : 10;
    } bit;
  } CSTIM;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000000C) Interrupt Enable Register                                  */
    
    struct {
      __IOM uint32_t TIREN      : 1;            /*!< [0..0] Transmit Buffer Empty Interrupt Enable                             */
      __IOM uint32_t RIREN      : 1;            /*!< [1..1] Receive Buffer Updated Interrupt Enable                            */
      __IOM uint32_t TEIREN     : 1;            /*!< [2..2] Transmit Error Interrupt Enable                                    */
      __IOM uint32_t REIREN     : 1;            /*!< [3..3] Receive Error Interrupt Enable                                     */
      __IOM uint32_t PEIREN     : 1;            /*!< [4..4] Phase Error Interrupt Enable                                       */
      __IOM uint32_t BEIREN     : 1;            /*!< [5..5] Baud Rate Error Interrupt Enable                                   */
            uint32_t            : 26;
    } bit;
  } IEN;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000010) Interrupt Status Register                                  */
    
    struct {
      __IM  uint32_t TIR        : 1;            /*!< [0..0] Transmit Buffer Empty Interrupt Flag                               */
      __IM  uint32_t RIR        : 1;            /*!< [1..1] Receive Buffer Full Interrupt Flag                                 */
      __IM  uint32_t TEIR       : 1;            /*!< [2..2] Transmit Error Interrupt Flag                                      */
      __IM  uint32_t REIR       : 1;            /*!< [3..3] Receive Error Interrupt Flag                                       */
      __IM  uint32_t PEIR       : 1;            /*!< [4..4] Phase Error Interrupt Flag                                         */
      __IM  uint32_t BEIR       : 1;            /*!< [5..5] Baud Rate Error Interrupt Flag                                     */
            uint32_t            : 26;
    } bit;
  } IS;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000014) Interrupt Status Set Register                              */
    
    struct {
      __OM  uint32_t TIRSET     : 1;            /*!< [0..0] Transmit Buffer Empty Interrupt Set                                */
      __OM  uint32_t RIRSET     : 1;            /*!< [1..1] Receive Buffer Updated Interrupt Set                               */
      __OM  uint32_t TEIRSET    : 1;            /*!< [2..2] Transmit Error Interrupt Set                                       */
      __OM  uint32_t REIRSET    : 1;            /*!< [3..3] Receive Error Interrupt Set                                        */
      __OM  uint32_t PEIRSET    : 1;            /*!< [4..4] Phase Error Interrupt Set                                          */
      __OM  uint32_t BEIRSET    : 1;            /*!< [5..5] Baud Rate Error Interrupt Set                                      */
            uint32_t            : 26;
    } bit;
  } ISS;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000018) Interrupt Status Clear Register                            */
    
    struct {
      __OM  uint32_t TIRCLR     : 1;            /*!< [0..0] Transmit Buffer Empty Interrupt Clear                              */
      __OM  uint32_t RIRCLR     : 1;            /*!< [1..1] Receive Buffer Updated Interrupt Clear                             */
      __OM  uint32_t TEIRCLR    : 1;            /*!< [2..2] Transmit Error Interrupt Clear                                     */
      __OM  uint32_t REIRCLR    : 1;            /*!< [3..3] Receive Error Interrupt Clear                                      */
      __OM  uint32_t PEIRCLR    : 1;            /*!< [4..4] Phase Error Interrupt Clear                                        */
      __OM  uint32_t BEIRCLR    : 1;            /*!< [5..5] Baud Rate Error Interrupt Clear                                    */
            uint32_t            : 26;
    } bit;
  } ISC;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000001C) Baud Rate Timer Register                                   */
    
    struct {
      __IOM uint32_t BR_VALUE   : 16;           /*!< [15..0] Baud Rate Timer Value                                             */
            uint32_t            : 16;
    } bit;
  } BR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000020) Transmitter Buffer Register Bits [31:0]                    */
    
    struct {
      __IOM uint32_t TB_VALUE_LOWER : 32;       /*!< [31..0] Transmit Data [31:0]                                              */
    } bit;
  } TB0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000024) Transmitter Buffer Register Bits [63:32]                   */
    
    struct {
      __IOM uint32_t TB_VALUE_UPPER : 32;       /*!< [31..0] Transmit Data [63:32]                                             */
    } bit;
  } TB1;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000028) Receiver Buffer Register Bits [31:0]                       */
    
    struct {
      __IM  uint32_t RB_VALUE_LOWER : 32;       /*!< [31..0] Receive Data [31:0]                                               */
    } bit;
  } RB0;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x0000002C) Receiver Buffer Register Bits [63:32]                      */
    
    struct {
      __IM  uint32_t RB_VALUE_UPPER : 32;       /*!< [31..0] Receive Data [63:32]                                              */
    } bit;
  } RB1;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000030) Status Register                                            */
    
    struct {
      __IM  uint32_t BC         : 6;            /*!< [5..0] Bit Count Field                                                    */
      __IM  uint32_t BSY        : 1;            /*!< [6..6] Busy Flag                                                          */
            uint32_t            : 25;
    } bit;
  } STAT;
} SSC0_Type;                                    /*!< Size = 52 (0x34)                                                          */



/* =========================================================================================================================== */
/* ================                                           SSC1                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief SSC1 (SSC1)
  */

typedef struct {                                /*!< (@ 0x48024000) SSC1 Structure                                             */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Control Register                                           */
    
    struct {
      __IOM uint32_t BM         : 6;            /*!< [5..0] Data Width Selection - Number of bits per transfer                 */
      __IOM uint32_t HB         : 1;            /*!< [6..6] Heading Control                                                    */
      __IOM uint32_t PH         : 1;            /*!< [7..7] Clock Phase Control                                                */
      __IOM uint32_t PO         : 1;            /*!< [8..8] Clock Polarity Control                                             */
      __IOM uint32_t LB         : 1;            /*!< [9..9] Loop Back Control                                                  */
            uint32_t            : 2;
      __IOM uint32_t AREN       : 1;            /*!< [12..12] Automatic Reset Enable                                           */
            uint32_t            : 1;
      __IOM uint32_t MS         : 1;            /*!< [14..14] Master Select                                                    */
      __IOM uint32_t EN         : 1;            /*!< [15..15] Enable Bit                                                       */
      __IOM uint32_t SLCSEN     : 1;            /*!< [16..16] Slave Chip Select Enable                                         */
      __IOM uint32_t MSCSEN     : 1;            /*!< [17..17] Master Chip Select Enable                                        */
      __IOM uint32_t MSCSSEL    : 4;            /*!< [21..18] Master Chip Select Output Selection                              */
      __OM  uint32_t MSTXSTART  : 1;            /*!< [22..22] Master Mode Transmit Start Bit                                   */
      __IOM uint32_t MSTXENSEL  : 2;            /*!< [24..23] Master Mode Transmit Start Trigger Select                        */
            uint32_t            : 7;
    } bit;
  } CON;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000004) Port Input Select Register                                 */
    
    struct {
      __IOM uint32_t MRSTSEL    : 2;            /*!< [1..0] Master Mode Data Input Select                                      */
      __IOM uint32_t SLCLKSEL   : 2;            /*!< [3..2] Slave Mode Clock Input Select                                      */
      __IOM uint32_t MTSRSEL    : 2;            /*!< [5..4] Slave Mode Data Input Select                                       */
      __IOM uint32_t SLCSSEL    : 2;            /*!< [7..6] Slave Mode Chip Select Input Select                                */
      __IOM uint32_t TXEVSEL    : 2;            /*!< [9..8] Master Mode TX Start Event Input Select                            */
            uint32_t            : 22;
    } bit;
  } INSEL;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000008) Master Mode Chip Select Timings Register                   */
    
    struct {
      __IOM uint32_t ST         : 6;            /*!< [5..0] CS Low Time At Start Of Transmission                               */
            uint32_t            : 2;
      __IOM uint32_t END        : 6;            /*!< [13..8] CS Low Time At End Of Transmission                                */
            uint32_t            : 2;
      __IOM uint32_t HIGH       : 6;            /*!< [21..16] Minimum CS High Time After Transmission                          */
            uint32_t            : 10;
    } bit;
  } CSTIM;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000000C) Interrupt Enable Register                                  */
    
    struct {
      __IOM uint32_t TIREN      : 1;            /*!< [0..0] Transmit Buffer Empty Interrupt Enable                             */
      __IOM uint32_t RIREN      : 1;            /*!< [1..1] Receive Buffer Updated Interrupt Enable                            */
      __IOM uint32_t TEIREN     : 1;            /*!< [2..2] Transmit Error Interrupt Enable                                    */
      __IOM uint32_t REIREN     : 1;            /*!< [3..3] Receive Error Interrupt Enable                                     */
      __IOM uint32_t PEIREN     : 1;            /*!< [4..4] Phase Error Interrupt Enable                                       */
      __IOM uint32_t BEIREN     : 1;            /*!< [5..5] Baud Rate Error Interrupt Enable                                   */
            uint32_t            : 26;
    } bit;
  } IEN;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000010) Interrupt Status Register                                  */
    
    struct {
      __IM  uint32_t TIR        : 1;            /*!< [0..0] Transmit Buffer Empty Interrupt Flag                               */
      __IM  uint32_t RIR        : 1;            /*!< [1..1] Receive Buffer Full Interrupt Flag                                 */
      __IM  uint32_t TEIR       : 1;            /*!< [2..2] Transmit Error Interrupt Flag                                      */
      __IM  uint32_t REIR       : 1;            /*!< [3..3] Receive Error Interrupt Flag                                       */
      __IM  uint32_t PEIR       : 1;            /*!< [4..4] Phase Error Interrupt Flag                                         */
      __IM  uint32_t BEIR       : 1;            /*!< [5..5] Baud Rate Error Interrupt Flag                                     */
            uint32_t            : 26;
    } bit;
  } IS;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000014) Interrupt Status Set Register                              */
    
    struct {
      __OM  uint32_t TIRSET     : 1;            /*!< [0..0] Transmit Buffer Empty Interrupt Set                                */
      __OM  uint32_t RIRSET     : 1;            /*!< [1..1] Receive Buffer Updated Interrupt Set                               */
      __OM  uint32_t TEIRSET    : 1;            /*!< [2..2] Transmit Error Interrupt Set                                       */
      __OM  uint32_t REIRSET    : 1;            /*!< [3..3] Receive Error Interrupt Set                                        */
      __OM  uint32_t PEIRSET    : 1;            /*!< [4..4] Phase Error Interrupt Set                                          */
      __OM  uint32_t BEIRSET    : 1;            /*!< [5..5] Baud Rate Error Interrupt Set                                      */
            uint32_t            : 26;
    } bit;
  } ISS;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000018) Interrupt Status Clear Register                            */
    
    struct {
      __OM  uint32_t TIRCLR     : 1;            /*!< [0..0] Transmit Buffer Empty Interrupt Clear                              */
      __OM  uint32_t RIRCLR     : 1;            /*!< [1..1] Receive Buffer Updated Interrupt Clear                             */
      __OM  uint32_t TEIRCLR    : 1;            /*!< [2..2] Transmit Error Interrupt Clear                                     */
      __OM  uint32_t REIRCLR    : 1;            /*!< [3..3] Receive Error Interrupt Clear                                      */
      __OM  uint32_t PEIRCLR    : 1;            /*!< [4..4] Phase Error Interrupt Clear                                        */
      __OM  uint32_t BEIRCLR    : 1;            /*!< [5..5] Baud Rate Error Interrupt Clear                                    */
            uint32_t            : 26;
    } bit;
  } ISC;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000001C) Baud Rate Timer Register                                   */
    
    struct {
      __IOM uint32_t BR_VALUE   : 16;           /*!< [15..0] Baud Rate Timer Value                                             */
            uint32_t            : 16;
    } bit;
  } BR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000020) Transmitter Buffer Register Bits [31:0]                    */
    
    struct {
      __IOM uint32_t TB_VALUE_LOWER : 32;       /*!< [31..0] Transmit Data [31:0]                                              */
    } bit;
  } TB0;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000024) Transmitter Buffer Register Bits [63:32]                   */
    
    struct {
      __IOM uint32_t TB_VALUE_UPPER : 32;       /*!< [31..0] Transmit Data [63:32]                                             */
    } bit;
  } TB1;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000028) Receiver Buffer Register Bits [31:0]                       */
    
    struct {
      __IM  uint32_t RB_VALUE_LOWER : 32;       /*!< [31..0] Receive Data [31:0]                                               */
    } bit;
  } RB0;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x0000002C) Receiver Buffer Register Bits [63:32]                      */
    
    struct {
      __IM  uint32_t RB_VALUE_UPPER : 32;       /*!< [31..0] Receive Data [63:32]                                              */
    } bit;
  } RB1;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000030) Status Register                                            */
    
    struct {
      __IM  uint32_t BC         : 6;            /*!< [5..0] Bit Count Field                                                    */
      __IM  uint32_t BSY        : 1;            /*!< [6..6] Busy Flag                                                          */
            uint32_t            : 25;
    } bit;
  } STAT;
} SSC1_Type;                                    /*!< Size = 52 (0x34)                                                          */



/* =========================================================================================================================== */
/* ================                                            T20                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief T20 (T20)
  */

typedef struct {                                /*!< (@ 0x48028000) T20 Structure                                              */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Timer 2 Control Register                                   */
    
    struct {
      __IOM uint32_t CP_RL2     : 1;            /*!< [0..0] Capture/Reload Select                                              */
      __IOM uint32_t C_T2       : 1;            /*!< [1..1] Timer or Counter Select                                            */
      __IOM uint32_t TR2        : 1;            /*!< [2..2] Timer 2 Start/Stop Control                                         */
      __IOM uint32_t EXEN2      : 1;            /*!< [3..3] Timer 2 External Enable Control                                    */
            uint32_t            : 2;
      __IM  uint32_t EXF2       : 1;            /*!< [6..6] Timer 2 External Flag                                              */
      __IM  uint32_t TF2        : 1;            /*!< [7..7] Timer 2 Overflow/Underflow Flag                                    */
      __IOM uint32_t T2INSEL    : 2;            /*!< [9..8] Timer 2 count input selection                                      */
      __IOM uint32_t T2EXINSEL  : 2;            /*!< [11..10] Timer 2 capture input selection                                  */
            uint32_t            : 20;
    } bit;
  } CON;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000004) Timer 2 Mode Register                                      */
    
    struct {
      __IOM uint32_t DCEN       : 1;            /*!< [0..0] Up/Down Counter Enable                                             */
      __IOM uint32_t T2PRE      : 3;            /*!< [3..1] Timer 2 Prescaler Bit                                              */
      __IOM uint32_t PREN       : 1;            /*!< [4..4] Prescaler Enable                                                   */
      __IOM uint32_t EDGESEL    : 1;            /*!< [5..5] Edge Select in Capture Mode/Reload Mode/Baud-rate Generator
                                                     Mode                                                                      */
      __IOM uint32_t T2RHEN     : 1;            /*!< [6..6] Timer 2 External Start Enable                                      */
      __IOM uint32_t T2REGS     : 1;            /*!< [7..7] Edge Select for Timer 2 External Start                             */
            uint32_t            : 24;
    } bit;
  } MOD;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000008) Timer 2 Reload/Capture Register                            */
    
    struct {
      __IOM uint32_t RCL2       : 8;            /*!< [7..0] Reload/Capture Value                                               */
      __IOM uint32_t RCH2       : 8;            /*!< [15..8] Reload/Capture Value                                              */
            uint32_t            : 16;
    } bit;
  } RC;
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) Timer 2 Count Register                                     */
    
    struct {
      __IOM uint32_t T2L        : 8;            /*!< [7..0] Timer 2 Value                                                      */
      __IOM uint32_t T2H        : 8;            /*!< [15..8] Timer 2 Value                                                     */
            uint32_t            : 16;
    } bit;
  } CNT;
  __IM  uint32_t  RESERVED1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000018) Timer 2 Interrupt Clear Register                           */
    
    struct {
            uint32_t            : 6;
      __OM  uint32_t EXF2CLR    : 1;            /*!< [6..6] External Interrupt Clear Flag                                      */
      __OM  uint32_t TF2CLR     : 1;            /*!< [7..7] Overflow/Underflow Interrupt Clear Flag                            */
            uint32_t            : 24;
    } bit;
  } ICLR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000001C) Timer 2 Control Register 1                                 */
    
    struct {
      __IOM uint32_t EXF2EN     : 1;            /*!< [0..0] External Interrupt Enable                                          */
      __IOM uint32_t TF2EN      : 1;            /*!< [1..1] Overflow/Underflow Interrupt Enable                                */
            uint32_t            : 30;
    } bit;
  } CON1;
} T20_Type;                                     /*!< Size = 32 (0x20)                                                          */



/* =========================================================================================================================== */
/* ================                                            T21                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief T21 (T21)
  */

typedef struct {                                /*!< (@ 0x4802C000) T21 Structure                                              */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Timer 2 Control Register                                   */
    
    struct {
      __IOM uint32_t CP_RL2     : 1;            /*!< [0..0] Capture/Reload Select                                              */
      __IOM uint32_t C_T2       : 1;            /*!< [1..1] Timer or Counter Select                                            */
      __IOM uint32_t TR2        : 1;            /*!< [2..2] Timer 2 Start/Stop Control                                         */
      __IOM uint32_t EXEN2      : 1;            /*!< [3..3] Timer 2 External Enable Control                                    */
            uint32_t            : 2;
      __IM  uint32_t EXF2       : 1;            /*!< [6..6] Timer 2 External Flag                                              */
      __IM  uint32_t TF2        : 1;            /*!< [7..7] Timer 2 Overflow/Underflow Flag                                    */
      __IOM uint32_t T2INSEL    : 2;            /*!< [9..8] Timer 2 count input selection                                      */
      __IOM uint32_t T2EXINSEL  : 2;            /*!< [11..10] Timer 2 capture input selection                                  */
            uint32_t            : 20;
    } bit;
  } CON;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000004) Timer 2 Mode Register                                      */
    
    struct {
      __IOM uint32_t DCEN       : 1;            /*!< [0..0] Up/Down Counter Enable                                             */
      __IOM uint32_t T2PRE      : 3;            /*!< [3..1] Timer 2 Prescaler Bit                                              */
      __IOM uint32_t PREN       : 1;            /*!< [4..4] Prescaler Enable                                                   */
      __IOM uint32_t EDGESEL    : 1;            /*!< [5..5] Edge Select in Capture Mode/Reload Mode/Baud-rate Generator
                                                     Mode                                                                      */
      __IOM uint32_t T2RHEN     : 1;            /*!< [6..6] Timer 2 External Start Enable                                      */
      __IOM uint32_t T2REGS     : 1;            /*!< [7..7] Edge Select for Timer 2 External Start                             */
            uint32_t            : 24;
    } bit;
  } MOD;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000008) Timer 2 Reload/Capture Register                            */
    
    struct {
      __IOM uint32_t RCL2       : 8;            /*!< [7..0] Reload/Capture Value                                               */
      __IOM uint32_t RCH2       : 8;            /*!< [15..8] Reload/Capture Value                                              */
            uint32_t            : 16;
    } bit;
  } RC;
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) Timer 2 Count Register                                     */
    
    struct {
      __IOM uint32_t T2L        : 8;            /*!< [7..0] Timer 2 Value                                                      */
      __IOM uint32_t T2H        : 8;            /*!< [15..8] Timer 2 Value                                                     */
            uint32_t            : 16;
    } bit;
  } CNT;
  __IM  uint32_t  RESERVED1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000018) Timer 2 Interrupt Clear Register                           */
    
    struct {
            uint32_t            : 6;
      __OM  uint32_t EXF2CLR    : 1;            /*!< [6..6] External Interrupt Clear Flag                                      */
      __OM  uint32_t TF2CLR     : 1;            /*!< [7..7] Overflow/Underflow Interrupt Clear Flag                            */
            uint32_t            : 24;
    } bit;
  } ICLR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000001C) Timer 2 Control Register 1                                 */
    
    struct {
      __IOM uint32_t EXF2EN     : 1;            /*!< [0..0] External Interrupt Enable                                          */
      __IOM uint32_t TF2EN      : 1;            /*!< [1..1] Overflow/Underflow Interrupt Enable                                */
            uint32_t            : 30;
    } bit;
  } CON1;
} T21_Type;                                     /*!< Size = 32 (0x20)                                                          */



/* =========================================================================================================================== */
/* ================                                           UART0                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief UART0 (UART0)
  */

typedef struct {                                /*!< (@ 0x48018000) UART0 Structure                                            */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Port Input Select Register                                 */
    
    struct {
      __IOM uint32_t RXDSEL     : 2;            /*!< [1..0] RXD Input Select                                                   */
      __IOM uint32_t TXEVSEL    : 2;            /*!< [3..2] TX Start Event Input Select                                        */
            uint32_t            : 28;
    } bit;
  } INSEL;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000004) Serial Channel Control Register                            */
    
    struct {
      __IOM uint32_t SM0        : 1;            /*!< [0..0] Serial Port Operating Mode Selection                               */
      __IOM uint32_t SM1        : 1;            /*!< [1..1] Serial Port Operating Mode Selection                               */
      __IOM uint32_t SM2        : 1;            /*!< [2..2] Enable Serial Port Multiprocessor Communication in Mode
                                                     2 and 3                                                                   */
      __IOM uint32_t REN        : 1;            /*!< [3..3] Enable Receiver of Serial Port                                     */
      __IOM uint32_t RMOD       : 1;            /*!< [4..4] Receiver Mode                                                      */
      __IOM uint32_t TXINV      : 1;            /*!< [5..5] TX Data Inverter Enable                                            */
            uint32_t            : 2;
      __IOM uint32_t TXENSEL    : 2;            /*!< [9..8] Transmit Start Trigger Select                                      */
            uint32_t            : 22;
    } bit;
  } SCON;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000008) Transmit Start Register                                    */
    
    struct {
      __OM  uint32_t TXSTART    : 1;            /*!< [0..0] Transmit Start Bit                                                 */
            uint32_t            : 31;
    } bit;
  } TSTART;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000000C) Serial TX Data Buffer                                      */
    
    struct {
      __IOM uint32_t TXDATA     : 8;            /*!< [7..0] Serial Interface TxBuffer Register                                 */
      __IOM uint32_t TB8        : 1;            /*!< [8..8] Serial Port Transmitter Bit 9                                      */
            uint32_t            : 23;
    } bit;
  } TXBUF;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000010) Serial RX Data Buffer                                      */
    
    struct {
      __IM  uint32_t RXDATA     : 8;            /*!< [7..0] Serial Interface RxBuffer Register                                 */
      __IM  uint32_t RB8        : 1;            /*!< [8..8] Serial Port Receiver Bit 9                                         */
            uint32_t            : 23;
    } bit;
  } RXBUF;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000014) Interrupt Enable Register                                  */
    
    struct {
      __IOM uint32_t TIEN       : 1;            /*!< [0..0] Transmit Interrupt Enable                                          */
      __IOM uint32_t RIEN       : 1;            /*!< [1..1] Receive Interrupt Enable                                           */
            uint32_t            : 6;
      __IOM uint32_t ERRSYNEN   : 1;            /*!< [8..8] SYN Error Interrupt Enable                                         */
      __IOM uint32_t EOFSYNEN   : 1;            /*!< [9..9] End of SYN Byte Interrupt Enable                                   */
            uint32_t            : 22;
    } bit;
  } IEN;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000018) Interrupt Status Register                                  */
    
    struct {
      __IM  uint32_t TI         : 1;            /*!< [0..0] Transmit Buffer Empty Interrupt Flag                               */
      __IM  uint32_t RI         : 1;            /*!< [1..1] Receive Interrupt Flag                                             */
            uint32_t            : 6;
      __IM  uint32_t ERRSYN     : 1;            /*!< [8..8] SYN Error Interrupt Flag                                           */
      __IM  uint32_t EOFSYN     : 1;            /*!< [9..9] End of SYN Byte Interrupt Flag                                     */
            uint32_t            : 22;
    } bit;
  } IS;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000001C) Interrupt Status Set Register                              */
    
    struct {
      __OM  uint32_t TISET      : 1;            /*!< [0..0] Transmit Interrupt Set                                             */
      __OM  uint32_t RISET      : 1;            /*!< [1..1] Receive Interrupt Set                                              */
            uint32_t            : 6;
      __OM  uint32_t ERRSYNSET  : 1;            /*!< [8..8] SYN Error Interrupt Set                                            */
      __OM  uint32_t EOFSYNSET  : 1;            /*!< [9..9] End of SYN Byte Interrupt Set                                      */
            uint32_t            : 22;
    } bit;
  } ISS;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000020) Interrupt Status Clear Register                            */
    
    struct {
      __OM  uint32_t TICLR      : 1;            /*!< [0..0] Transmit Interrupt Clear                                           */
      __OM  uint32_t RICLR      : 1;            /*!< [1..1] Receive Interrupt Clear                                            */
            uint32_t            : 6;
      __OM  uint32_t ERRSYNCLR  : 1;            /*!< [8..8] SYN Error Interrupt Clear                                          */
      __OM  uint32_t EOFSYNCLR  : 1;            /*!< [9..9] End of SYN Byte Interrupt Clear                                    */
            uint32_t            : 22;
    } bit;
  } ISC;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000024) Baud Rate Control Register                                 */
    
    struct {
      __IOM uint32_t BR_R       : 1;            /*!< [0..0] Baud Rate Generator Enable Bit                                     */
            uint32_t            : 3;
      __IOM uint32_t BR_PRE     : 3;            /*!< [6..4] Prescaler Bit                                                      */
            uint32_t            : 9;
      __IOM uint32_t BG_FD_SEL  : 5;            /*!< [20..16] Fractional Divider Selection                                     */
      __IOM uint32_t BG_BR_VALUE : 11;          /*!< [31..21] Baud Rate Reload Value                                           */
    } bit;
  } BCON;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000028) LIN Control Register                                       */
    
    struct {
      __IOM uint32_t BREN       : 1;            /*!< [0..0] Baud Rate Detection Enable                                         */
      __IOM uint32_t BGSEL      : 2;            /*!< [2..1] Baud Rate Select for Detection                                     */
            uint32_t            : 29;
    } bit;
  } LINCON;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x0000002C) LIN Status Register                                        */
    
    struct {
      __IM  uint32_t BRK        : 1;            /*!< [0..0] Break Field Detection Flag                                         */
            uint32_t            : 31;
    } bit;
  } LINST;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000030) LIN Status Clear Register                                  */
    
    struct {
      __OM  uint32_t BRKCLR     : 1;            /*!< [0..0] Break Field Flag Clear                                             */
            uint32_t            : 31;
    } bit;
  } LINSTC;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000034) LIN Status Set Register                                    */
    
    struct {
      __OM  uint32_t BRKSET     : 1;            /*!< [0..0] Break Field Flag Set                                               */
            uint32_t            : 31;
    } bit;
  } LINSTS;
} UART0_Type;                                   /*!< Size = 56 (0x38)                                                          */



/* =========================================================================================================================== */
/* ================                                           UART1                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief UART1 (UART1)
  */

typedef struct {                                /*!< (@ 0x4801C000) UART1 Structure                                            */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Port Input Select Register                                 */
    
    struct {
      __IOM uint32_t RXDSEL     : 2;            /*!< [1..0] RXD Input Select                                                   */
      __IOM uint32_t TXEVSEL    : 2;            /*!< [3..2] TX Start Event Input Select                                        */
            uint32_t            : 28;
    } bit;
  } INSEL;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000004) Serial Channel Control Register                            */
    
    struct {
      __IOM uint32_t SM0        : 1;            /*!< [0..0] Serial Port Operating Mode Selection                               */
      __IOM uint32_t SM1        : 1;            /*!< [1..1] Serial Port Operating Mode Selection                               */
      __IOM uint32_t SM2        : 1;            /*!< [2..2] Enable Serial Port Multiprocessor Communication in Mode
                                                     2 and 3                                                                   */
      __IOM uint32_t REN        : 1;            /*!< [3..3] Enable Receiver of Serial Port                                     */
      __IOM uint32_t RMOD       : 1;            /*!< [4..4] Receiver Mode                                                      */
      __IOM uint32_t TXINV      : 1;            /*!< [5..5] TX Data Inverter Enable                                            */
            uint32_t            : 2;
      __IOM uint32_t TXENSEL    : 2;            /*!< [9..8] Transmit Start Trigger Select                                      */
            uint32_t            : 22;
    } bit;
  } SCON;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000008) Transmit Start Register                                    */
    
    struct {
      __OM  uint32_t TXSTART    : 1;            /*!< [0..0] Transmit Start Bit                                                 */
            uint32_t            : 31;
    } bit;
  } TSTART;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000000C) Serial TX Data Buffer                                      */
    
    struct {
      __IOM uint32_t TXDATA     : 8;            /*!< [7..0] Serial Interface TxBuffer Register                                 */
      __IOM uint32_t TB8        : 1;            /*!< [8..8] Serial Port Transmitter Bit 9                                      */
            uint32_t            : 23;
    } bit;
  } TXBUF;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000010) Serial RX Data Buffer                                      */
    
    struct {
      __IM  uint32_t RXDATA     : 8;            /*!< [7..0] Serial Interface RxBuffer Register                                 */
      __IM  uint32_t RB8        : 1;            /*!< [8..8] Serial Port Receiver Bit 9                                         */
            uint32_t            : 23;
    } bit;
  } RXBUF;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000014) Interrupt Enable Register                                  */
    
    struct {
      __IOM uint32_t TIEN       : 1;            /*!< [0..0] Transmit Interrupt Enable                                          */
      __IOM uint32_t RIEN       : 1;            /*!< [1..1] Receive Interrupt Enable                                           */
            uint32_t            : 6;
      __IOM uint32_t ERRSYNEN   : 1;            /*!< [8..8] SYN Error Interrupt Enable                                         */
      __IOM uint32_t EOFSYNEN   : 1;            /*!< [9..9] End of SYN Byte Interrupt Enable                                   */
            uint32_t            : 22;
    } bit;
  } IEN;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000018) Interrupt Status Register                                  */
    
    struct {
      __IM  uint32_t TI         : 1;            /*!< [0..0] Transmit Buffer Empty Interrupt Flag                               */
      __IM  uint32_t RI         : 1;            /*!< [1..1] Receive Interrupt Flag                                             */
            uint32_t            : 6;
      __IM  uint32_t ERRSYN     : 1;            /*!< [8..8] SYN Error Interrupt Flag                                           */
      __IM  uint32_t EOFSYN     : 1;            /*!< [9..9] End of SYN Byte Interrupt Flag                                     */
            uint32_t            : 22;
    } bit;
  } IS;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000001C) Interrupt Status Set Register                              */
    
    struct {
      __OM  uint32_t TISET      : 1;            /*!< [0..0] Transmit Interrupt Set                                             */
      __OM  uint32_t RISET      : 1;            /*!< [1..1] Receive Interrupt Set                                              */
            uint32_t            : 6;
      __OM  uint32_t ERRSYNSET  : 1;            /*!< [8..8] SYN Error Interrupt Set                                            */
      __OM  uint32_t EOFSYNSET  : 1;            /*!< [9..9] End of SYN Byte Interrupt Set                                      */
            uint32_t            : 22;
    } bit;
  } ISS;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000020) Interrupt Status Clear Register                            */
    
    struct {
      __OM  uint32_t TICLR      : 1;            /*!< [0..0] Transmit Interrupt Clear                                           */
      __OM  uint32_t RICLR      : 1;            /*!< [1..1] Receive Interrupt Clear                                            */
            uint32_t            : 6;
      __OM  uint32_t ERRSYNCLR  : 1;            /*!< [8..8] SYN Error Interrupt Clear                                          */
      __OM  uint32_t EOFSYNCLR  : 1;            /*!< [9..9] End of SYN Byte Interrupt Clear                                    */
            uint32_t            : 22;
    } bit;
  } ISC;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000024) Baud Rate Control Register                                 */
    
    struct {
      __IOM uint32_t BR_R       : 1;            /*!< [0..0] Baud Rate Generator Enable Bit                                     */
            uint32_t            : 3;
      __IOM uint32_t BR_PRE     : 3;            /*!< [6..4] Prescaler Bit                                                      */
            uint32_t            : 9;
      __IOM uint32_t BG_FD_SEL  : 5;            /*!< [20..16] Fractional Divider Selection                                     */
      __IOM uint32_t BG_BR_VALUE : 11;          /*!< [31..21] Baud Rate Reload Value                                           */
    } bit;
  } BCON;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000028) LIN Control Register                                       */
    
    struct {
      __IOM uint32_t BREN       : 1;            /*!< [0..0] Baud Rate Detection Enable                                         */
      __IOM uint32_t BGSEL      : 2;            /*!< [2..1] Baud Rate Select for Detection                                     */
            uint32_t            : 29;
    } bit;
  } LINCON;
  
  union {
    __IM  uint32_t reg;                         /*!< (@ 0x0000002C) LIN Status Register                                        */
    
    struct {
      __IM  uint32_t BRK        : 1;            /*!< [0..0] Break Field Detection Flag                                         */
            uint32_t            : 31;
    } bit;
  } LINST;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000030) LIN Status Clear Register                                  */
    
    struct {
      __OM  uint32_t BRKCLR     : 1;            /*!< [0..0] Break Field Flag Clear                                             */
            uint32_t            : 31;
    } bit;
  } LINSTC;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000034) LIN Status Set Register                                    */
    
    struct {
      __OM  uint32_t BRKSET     : 1;            /*!< [0..0] Break Field Flag Set                                               */
            uint32_t            : 31;
    } bit;
  } LINSTS;
} UART1_Type;                                   /*!< Size = 56 (0x38)                                                          */


/** @} */ /* End of group Device_Peripheral_peripherals */


/* =========================================================================================================================== */
/* ================                          Device Specific Peripheral Address Map                           ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripheralAddr
  * @{
  */

#define ADC1_BASE                   0x40000000UL
#define ADC2_BASE                   0x4804C000UL
#define ARVG_BASE                   0x48038000UL
#define BDRV_BASE                   0x4000C000UL
#define CACHE_BASE                  0x48048000UL
#define CANNODE_BASE                0x48010000UL
#define CANNODEFD_BASE              0x48010010UL
#define CANMSGOBJ0_BASE             0x48010100UL
#define CANMSGOBJ1_BASE             0x48010400UL
#define CANMSGOBJ2_BASE             0x48010800UL
#define CANTRX_BASE                 0x4800C000UL
#define CCU7_BASE                   0x40008000UL
#define CPU_BASE                    0xE000E000UL
#define CSACSC_BASE                 0x40010000UL
#define DMA_BASE                    0x48034000UL
#define GPIO_BASE                   0x48030000UL
#define GPT12_BASE                  0x40014000UL
#define MEMCTRL_BASE                0x48044000UL
#define PLL_BASE                    0x48008000UL
#define PMU_BASE                    0x48000000UL
#define SCU_BASE                    0x48004000UL
#define SDADC_BASE                  0x40004000UL
#define SSC0_BASE                   0x48020000UL
#define SSC1_BASE                   0x48024000UL
#define T20_BASE                    0x48028000UL
#define T21_BASE                    0x4802C000UL
#define UART0_BASE                  0x48018000UL
#define UART1_BASE                  0x4801C000UL

/** @} */ /* End of group Device_Peripheral_peripheralAddr */


/* =========================================================================================================================== */
/* ================                                  Peripheral declaration                                   ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_declaration
  * @{
  */

#ifndef UNIT_TESTING_OCN                                                                                                   
#define ADC1                        ((ADC1_Type*)              ADC1_BASE)
#define ADC2                        ((ADC2_Type*)              ADC2_BASE)
#define ARVG                        ((ARVG_Type*)              ARVG_BASE)
#define BDRV                        ((BDRV_Type*)              BDRV_BASE)
#define CACHE                       ((CACHE_Type*)             CACHE_BASE)
#define CANNODE                     ((CANNODE_Type*)           CANNODE_BASE)
#define CANNODEFD                   ((CANNODEFD_Type*)         CANNODEFD_BASE)
#define CANMSGOBJ0                  ((CANMSGOBJ0_Type*)        CANMSGOBJ0_BASE)
#define CANMSGOBJ1                  ((CANMSGOBJ1_Type*)        CANMSGOBJ1_BASE)
#define CANMSGOBJ2                  ((CANMSGOBJ2_Type*)        CANMSGOBJ2_BASE)
#define CANTRX                      ((CANTRX_Type*)            CANTRX_BASE)
#define CCU7                        ((CCU7_Type*)              CCU7_BASE)
#define CPU                         ((CPU_Type*)               CPU_BASE)
#define CSACSC                      ((CSACSC_Type*)            CSACSC_BASE)
#define DMA                         ((DMA_Type*)               DMA_BASE)
#define GPIO                        ((GPIO_Type*)              GPIO_BASE)
#define GPT12                       ((GPT12_Type*)             GPT12_BASE)
#define MEMCTRL                     ((MEMCTRL_Type*)           MEMCTRL_BASE)
#define PLL                         ((PLL_Type*)               PLL_BASE)
#define PMU                         ((PMU_Type*)               PMU_BASE)
#define SCU                         ((SCU_Type*)               SCU_BASE)
#define SDADC                       ((SDADC_Type*)             SDADC_BASE)
#define SSC0                        ((SSC0_Type*)              SSC0_BASE)
#define SSC1                        ((SSC1_Type*)              SSC1_BASE)
#define T20                         ((T20_Type*)               T20_BASE)
#define T21                         ((T21_Type*)               T21_BASE)
#define UART0                       ((UART0_Type*)             UART0_BASE)
#define UART1                       ((UART1_Type*)             UART1_BASE)
#else
  extern ADC1_Type*         ADC1;
  extern ADC2_Type*         ADC2;
  extern ARVG_Type*         ARVG;
  extern BDRV_Type*         BDRV;
  extern CACHE_Type*        CACHE;
  extern CANTRX_Type*       CANTRX;
  extern CANNODE_Type*      CANNODE;
  extern CANNODEFD_Type*    CANNODEFD;
  extern CANMSGOBJ0_Type*   CANMSGOBJ0;
  extern CANMSGOBJ1_Type*   CANMSGOBJ1;
  extern CANMSGOBJ2_Type*   CANMSGOBJ2;
  extern CCU7_Type*         CCU7;
  extern CPU_Type*          CPU;
  extern CSACSC_Type*       CSACSC;
  extern DMA_Type*          DMA;
  extern GPIO_Type*         GPIO;
  extern GPT12_Type*        GPT12;
  extern MEMCTRL_Type*      MEMCTRL;
  extern PLL_Type*          PLL;
  extern PMU_Type*          PMU;
  extern SCU_Type*          SCU;
  extern SDADC_Type*        SDADC;
  extern SSC0_Type*         SSC0;
  extern SSC1_Type*         SSC1;
  extern T20_Type*          T20;
  extern T21_Type*          T21;
  extern UART0_Type*        UART0;
  extern UART1_Type*        UART1;
#endif /* UNIT_TESTING_OCN */     
/** @} */ /* End of group Device_Peripheral_declaration */

/* =========================================================================================================================== */
/* ================                                Pos/Mask Peripheral Section                                ================ */
/* =========================================================================================================================== */


/** @addtogroup PosMask_peripherals
  * @{
  */


/* =========================================================================================================================== */
/* ================                                           ADC1                                            ================ */
/* =========================================================================================================================== */

/* =======================================================  GLOBCONF  ======================================================== */
#define ADC1_GLOBCONF_EN_Pos              (0UL)                     /*!< EN (Bit 0)                                            */
#define ADC1_GLOBCONF_EN_Msk              (0x1UL)                   /*!< EN (Bitfield-Mask: 0x01)                              */
/* =========================================================  INP0  ========================================================== */
#define ADC1_INP0_INP_CH0_Pos             (0UL)                     /*!< INP_CH0 (Bit 0)                                       */
#define ADC1_INP0_INP_CH0_Msk             (0x3UL)                   /*!< INP_CH0 (Bitfield-Mask: 0x03)                         */
#define ADC1_INP0_INP_CH1_Pos             (2UL)                     /*!< INP_CH1 (Bit 2)                                       */
#define ADC1_INP0_INP_CH1_Msk             (0xcUL)                   /*!< INP_CH1 (Bitfield-Mask: 0x03)                         */
#define ADC1_INP0_INP_CH2_Pos             (4UL)                     /*!< INP_CH2 (Bit 4)                                       */
#define ADC1_INP0_INP_CH2_Msk             (0x30UL)                  /*!< INP_CH2 (Bitfield-Mask: 0x03)                         */
#define ADC1_INP0_INP_CH3_Pos             (6UL)                     /*!< INP_CH3 (Bit 6)                                       */
#define ADC1_INP0_INP_CH3_Msk             (0xc0UL)                  /*!< INP_CH3 (Bitfield-Mask: 0x03)                         */
#define ADC1_INP0_INP_CH4_Pos             (8UL)                     /*!< INP_CH4 (Bit 8)                                       */
#define ADC1_INP0_INP_CH4_Msk             (0x300UL)                 /*!< INP_CH4 (Bitfield-Mask: 0x03)                         */
#define ADC1_INP0_INP_CH5_Pos             (10UL)                    /*!< INP_CH5 (Bit 10)                                      */
#define ADC1_INP0_INP_CH5_Msk             (0xc00UL)                 /*!< INP_CH5 (Bitfield-Mask: 0x03)                         */
#define ADC1_INP0_INP_CH6_Pos             (12UL)                    /*!< INP_CH6 (Bit 12)                                      */
#define ADC1_INP0_INP_CH6_Msk             (0x3000UL)                /*!< INP_CH6 (Bitfield-Mask: 0x03)                         */
#define ADC1_INP0_INP_CH7_Pos             (14UL)                    /*!< INP_CH7 (Bit 14)                                      */
#define ADC1_INP0_INP_CH7_Msk             (0xc000UL)                /*!< INP_CH7 (Bitfield-Mask: 0x03)                         */
#define ADC1_INP0_INP_CH8_Pos             (16UL)                    /*!< INP_CH8 (Bit 16)                                      */
#define ADC1_INP0_INP_CH8_Msk             (0x30000UL)               /*!< INP_CH8 (Bitfield-Mask: 0x03)                         */
#define ADC1_INP0_INP_CH9_Pos             (18UL)                    /*!< INP_CH9 (Bit 18)                                      */
#define ADC1_INP0_INP_CH9_Msk             (0xc0000UL)               /*!< INP_CH9 (Bitfield-Mask: 0x03)                         */
#define ADC1_INP0_INP_CH10_Pos            (20UL)                    /*!< INP_CH10 (Bit 20)                                     */
#define ADC1_INP0_INP_CH10_Msk            (0x300000UL)              /*!< INP_CH10 (Bitfield-Mask: 0x03)                        */
#define ADC1_INP0_INP_CH11_Pos            (22UL)                    /*!< INP_CH11 (Bit 22)                                     */
#define ADC1_INP0_INP_CH11_Msk            (0xc00000UL)              /*!< INP_CH11 (Bitfield-Mask: 0x03)                        */
#define ADC1_INP0_INP_CH12_Pos            (24UL)                    /*!< INP_CH12 (Bit 24)                                     */
#define ADC1_INP0_INP_CH12_Msk            (0x3000000UL)             /*!< INP_CH12 (Bitfield-Mask: 0x03)                        */
#define ADC1_INP0_INP_CH13_Pos            (26UL)                    /*!< INP_CH13 (Bit 26)                                     */
#define ADC1_INP0_INP_CH13_Msk            (0xc000000UL)             /*!< INP_CH13 (Bitfield-Mask: 0x03)                        */
#define ADC1_INP0_INP_CH14_Pos            (28UL)                    /*!< INP_CH14 (Bit 28)                                     */
#define ADC1_INP0_INP_CH14_Msk            (0x30000000UL)            /*!< INP_CH14 (Bitfield-Mask: 0x03)                        */
#define ADC1_INP0_INP_CH15_Pos            (30UL)                    /*!< INP_CH15 (Bit 30)                                     */
#define ADC1_INP0_INP_CH15_Msk            (0xc0000000UL)            /*!< INP_CH15 (Bitfield-Mask: 0x03)                        */
/* =========================================================  INP1  ========================================================== */
#define ADC1_INP1_INP_CH16_Pos            (0UL)                     /*!< INP_CH16 (Bit 0)                                      */
#define ADC1_INP1_INP_CH16_Msk            (0x3UL)                   /*!< INP_CH16 (Bitfield-Mask: 0x03)                        */
#define ADC1_INP1_INP_CH17_Pos            (2UL)                     /*!< INP_CH17 (Bit 2)                                      */
#define ADC1_INP1_INP_CH17_Msk            (0xcUL)                   /*!< INP_CH17 (Bitfield-Mask: 0x03)                        */
#define ADC1_INP1_INP_CH18_Pos            (4UL)                     /*!< INP_CH18 (Bit 4)                                      */
#define ADC1_INP1_INP_CH18_Msk            (0x30UL)                  /*!< INP_CH18 (Bitfield-Mask: 0x03)                        */
#define ADC1_INP1_INP_CH19_Pos            (6UL)                     /*!< INP_CH19 (Bit 6)                                      */
#define ADC1_INP1_INP_CH19_Msk            (0xc0UL)                  /*!< INP_CH19 (Bitfield-Mask: 0x03)                        */
/* =========================================================  INP2  ========================================================== */
#define ADC1_INP2_INP_CMP_LO0_Pos         (0UL)                     /*!< INP_CMP_LO0 (Bit 0)                                   */
#define ADC1_INP2_INP_CMP_LO0_Msk         (0x3UL)                   /*!< INP_CMP_LO0 (Bitfield-Mask: 0x03)                     */
#define ADC1_INP2_INP_CMP_LO1_Pos         (2UL)                     /*!< INP_CMP_LO1 (Bit 2)                                   */
#define ADC1_INP2_INP_CMP_LO1_Msk         (0xcUL)                   /*!< INP_CMP_LO1 (Bitfield-Mask: 0x03)                     */
#define ADC1_INP2_INP_CMP_LO2_Pos         (4UL)                     /*!< INP_CMP_LO2 (Bit 4)                                   */
#define ADC1_INP2_INP_CMP_LO2_Msk         (0x30UL)                  /*!< INP_CMP_LO2 (Bitfield-Mask: 0x03)                     */
#define ADC1_INP2_INP_CMP_LO3_Pos         (6UL)                     /*!< INP_CMP_LO3 (Bit 6)                                   */
#define ADC1_INP2_INP_CMP_LO3_Msk         (0xc0UL)                  /*!< INP_CMP_LO3 (Bitfield-Mask: 0x03)                     */
#define ADC1_INP2_INP_CMP_UP0_Pos         (8UL)                     /*!< INP_CMP_UP0 (Bit 8)                                   */
#define ADC1_INP2_INP_CMP_UP0_Msk         (0x300UL)                 /*!< INP_CMP_UP0 (Bitfield-Mask: 0x03)                     */
#define ADC1_INP2_INP_CMP_UP1_Pos         (10UL)                    /*!< INP_CMP_UP1 (Bit 10)                                  */
#define ADC1_INP2_INP_CMP_UP1_Msk         (0xc00UL)                 /*!< INP_CMP_UP1 (Bitfield-Mask: 0x03)                     */
#define ADC1_INP2_INP_CMP_UP2_Pos         (12UL)                    /*!< INP_CMP_UP2 (Bit 12)                                  */
#define ADC1_INP2_INP_CMP_UP2_Msk         (0x3000UL)                /*!< INP_CMP_UP2 (Bitfield-Mask: 0x03)                     */
#define ADC1_INP2_INP_CMP_UP3_Pos         (14UL)                    /*!< INP_CMP_UP3 (Bit 14)                                  */
#define ADC1_INP2_INP_CMP_UP3_Msk         (0xc000UL)                /*!< INP_CMP_UP3 (Bitfield-Mask: 0x03)                     */
/* =========================================================  INP3  ========================================================== */
#define ADC1_INP3_INP_SQ0_Pos             (0UL)                     /*!< INP_SQ0 (Bit 0)                                       */
#define ADC1_INP3_INP_SQ0_Msk             (0x3UL)                   /*!< INP_SQ0 (Bitfield-Mask: 0x03)                         */
#define ADC1_INP3_INP_SQ1_Pos             (2UL)                     /*!< INP_SQ1 (Bit 2)                                       */
#define ADC1_INP3_INP_SQ1_Msk             (0xcUL)                   /*!< INP_SQ1 (Bitfield-Mask: 0x03)                         */
#define ADC1_INP3_INP_SQ2_Pos             (4UL)                     /*!< INP_SQ2 (Bit 4)                                       */
#define ADC1_INP3_INP_SQ2_Msk             (0x30UL)                  /*!< INP_SQ2 (Bitfield-Mask: 0x03)                         */
#define ADC1_INP3_INP_SQ3_Pos             (6UL)                     /*!< INP_SQ3 (Bit 6)                                       */
#define ADC1_INP3_INP_SQ3_Msk             (0xc0UL)                  /*!< INP_SQ3 (Bitfield-Mask: 0x03)                         */
#define ADC1_INP3_INP_COLL0_Pos           (8UL)                     /*!< INP_COLL0 (Bit 8)                                     */
#define ADC1_INP3_INP_COLL0_Msk           (0x300UL)                 /*!< INP_COLL0 (Bitfield-Mask: 0x03)                       */
#define ADC1_INP3_INP_COLL1_Pos           (10UL)                    /*!< INP_COLL1 (Bit 10)                                    */
#define ADC1_INP3_INP_COLL1_Msk           (0xc00UL)                 /*!< INP_COLL1 (Bitfield-Mask: 0x03)                       */
#define ADC1_INP3_INP_COLL2_Pos           (12UL)                    /*!< INP_COLL2 (Bit 12)                                    */
#define ADC1_INP3_INP_COLL2_Msk           (0x3000UL)                /*!< INP_COLL2 (Bitfield-Mask: 0x03)                       */
#define ADC1_INP3_INP_COLL3_Pos           (14UL)                    /*!< INP_COLL3 (Bit 14)                                    */
#define ADC1_INP3_INP_COLL3_Msk           (0xc000UL)                /*!< INP_COLL3 (Bitfield-Mask: 0x03)                       */
#define ADC1_INP3_INP_WFR0_Pos            (16UL)                    /*!< INP_WFR0 (Bit 16)                                     */
#define ADC1_INP3_INP_WFR0_Msk            (0x30000UL)               /*!< INP_WFR0 (Bitfield-Mask: 0x03)                        */
#define ADC1_INP3_INP_WFR1_Pos            (18UL)                    /*!< INP_WFR1 (Bit 18)                                     */
#define ADC1_INP3_INP_WFR1_Msk            (0xc0000UL)               /*!< INP_WFR1 (Bitfield-Mask: 0x03)                        */
#define ADC1_INP3_INP_WFR2_Pos            (20UL)                    /*!< INP_WFR2 (Bit 20)                                     */
#define ADC1_INP3_INP_WFR2_Msk            (0x300000UL)              /*!< INP_WFR2 (Bitfield-Mask: 0x03)                        */
#define ADC1_INP3_INP_WFR3_Pos            (22UL)                    /*!< INP_WFR3 (Bit 22)                                     */
#define ADC1_INP3_INP_WFR3_Msk            (0xc00000UL)              /*!< INP_WFR3 (Bitfield-Mask: 0x03)                        */

/* =========================================================================================================================== */
/* ================                                           ADC2                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  FILTCFG  ======================================================== */
#define ADC2_FILTCFG_COEF_A6_Pos          (24UL)                    /*!< COEF_A6 (Bit 24)                                      */
#define ADC2_FILTCFG_COEF_A6_Msk          (0x3000000UL)             /*!< COEF_A6 (Bitfield-Mask: 0x03)                         */
#define ADC2_FILTCFG_COEF_A7_Pos          (28UL)                    /*!< COEF_A7 (Bit 28)                                      */
#define ADC2_FILTCFG_COEF_A7_Msk          (0x30000000UL)            /*!< COEF_A7 (Bitfield-Mask: 0x03)                         */
/* =======================================================  GLOBCONF  ======================================================== */
#define ADC2_GLOBCONF_EN_Pos              (0UL)                     /*!< EN (Bit 0)                                            */
#define ADC2_GLOBCONF_EN_Msk              (0x1UL)                   /*!< EN (Bitfield-Mask: 0x01)                              */
/* =========================================================  INP0  ========================================================== */
#define ADC2_INP0_INP_CH0_Pos             (0UL)                     /*!< INP_CH0 (Bit 0)                                       */
#define ADC2_INP0_INP_CH0_Msk             (0x3UL)                   /*!< INP_CH0 (Bitfield-Mask: 0x03)                         */
#define ADC2_INP0_INP_CH1_Pos             (2UL)                     /*!< INP_CH1 (Bit 2)                                       */
#define ADC2_INP0_INP_CH1_Msk             (0xcUL)                   /*!< INP_CH1 (Bitfield-Mask: 0x03)                         */
#define ADC2_INP0_INP_CH2_Pos             (4UL)                     /*!< INP_CH2 (Bit 4)                                       */
#define ADC2_INP0_INP_CH2_Msk             (0x30UL)                  /*!< INP_CH2 (Bitfield-Mask: 0x03)                         */
#define ADC2_INP0_INP_CH3_Pos             (6UL)                     /*!< INP_CH3 (Bit 6)                                       */
#define ADC2_INP0_INP_CH3_Msk             (0xc0UL)                  /*!< INP_CH3 (Bitfield-Mask: 0x03)                         */
#define ADC2_INP0_INP_CH4_Pos             (8UL)                     /*!< INP_CH4 (Bit 8)                                       */
#define ADC2_INP0_INP_CH4_Msk             (0x300UL)                 /*!< INP_CH4 (Bitfield-Mask: 0x03)                         */
#define ADC2_INP0_INP_CH5_Pos             (10UL)                    /*!< INP_CH5 (Bit 10)                                      */
#define ADC2_INP0_INP_CH5_Msk             (0xc00UL)                 /*!< INP_CH5 (Bitfield-Mask: 0x03)                         */
#define ADC2_INP0_INP_CH6_Pos             (12UL)                    /*!< INP_CH6 (Bit 12)                                      */
#define ADC2_INP0_INP_CH6_Msk             (0x3000UL)                /*!< INP_CH6 (Bitfield-Mask: 0x03)                         */
#define ADC2_INP0_INP_CH7_Pos             (14UL)                    /*!< INP_CH7 (Bit 14)                                      */
#define ADC2_INP0_INP_CH7_Msk             (0xc000UL)                /*!< INP_CH7 (Bitfield-Mask: 0x03)                         */
#define ADC2_INP0_INP_CH8_Pos             (16UL)                    /*!< INP_CH8 (Bit 16)                                      */
#define ADC2_INP0_INP_CH8_Msk             (0x30000UL)               /*!< INP_CH8 (Bitfield-Mask: 0x03)                         */
#define ADC2_INP0_INP_CH9_Pos             (18UL)                    /*!< INP_CH9 (Bit 18)                                      */
#define ADC2_INP0_INP_CH9_Msk             (0xc0000UL)               /*!< INP_CH9 (Bitfield-Mask: 0x03)                         */
#define ADC2_INP0_INP_CH10_Pos            (20UL)                    /*!< INP_CH10 (Bit 20)                                     */
#define ADC2_INP0_INP_CH10_Msk            (0x300000UL)              /*!< INP_CH10 (Bitfield-Mask: 0x03)                        */
#define ADC2_INP0_INP_CH11_Pos            (22UL)                    /*!< INP_CH11 (Bit 22)                                     */
#define ADC2_INP0_INP_CH11_Msk            (0xc00000UL)              /*!< INP_CH11 (Bitfield-Mask: 0x03)                        */
#define ADC2_INP0_INP_CH12_Pos            (24UL)                    /*!< INP_CH12 (Bit 24)                                     */
#define ADC2_INP0_INP_CH12_Msk            (0x3000000UL)             /*!< INP_CH12 (Bitfield-Mask: 0x03)                        */
#define ADC2_INP0_INP_CH13_Pos            (26UL)                    /*!< INP_CH13 (Bit 26)                                     */
#define ADC2_INP0_INP_CH13_Msk            (0xc000000UL)             /*!< INP_CH13 (Bitfield-Mask: 0x03)                        */
#define ADC2_INP0_INP_CH14_Pos            (28UL)                    /*!< INP_CH14 (Bit 28)                                     */
#define ADC2_INP0_INP_CH14_Msk            (0x30000000UL)            /*!< INP_CH14 (Bitfield-Mask: 0x03)                        */
/* =========================================================  INP2  ========================================================== */
#define ADC2_INP2_INP_CMP_LO0_Pos         (0UL)                     /*!< INP_CMP_LO0 (Bit 0)                                   */
#define ADC2_INP2_INP_CMP_LO0_Msk         (0x3UL)                   /*!< INP_CMP_LO0 (Bitfield-Mask: 0x03)                     */
#define ADC2_INP2_INP_CMP_LO1_Pos         (2UL)                     /*!< INP_CMP_LO1 (Bit 2)                                   */
#define ADC2_INP2_INP_CMP_LO1_Msk         (0xcUL)                   /*!< INP_CMP_LO1 (Bitfield-Mask: 0x03)                     */
#define ADC2_INP2_INP_CMP_LO2_Pos         (4UL)                     /*!< INP_CMP_LO2 (Bit 4)                                   */
#define ADC2_INP2_INP_CMP_LO2_Msk         (0x30UL)                  /*!< INP_CMP_LO2 (Bitfield-Mask: 0x03)                     */
#define ADC2_INP2_INP_CMP_LO3_Pos         (6UL)                     /*!< INP_CMP_LO3 (Bit 6)                                   */
#define ADC2_INP2_INP_CMP_LO3_Msk         (0xc0UL)                  /*!< INP_CMP_LO3 (Bitfield-Mask: 0x03)                     */
#define ADC2_INP2_INP_CMP_LO4_Pos         (8UL)                     /*!< INP_CMP_LO4 (Bit 8)                                   */
#define ADC2_INP2_INP_CMP_LO4_Msk         (0x300UL)                 /*!< INP_CMP_LO4 (Bitfield-Mask: 0x03)                     */
#define ADC2_INP2_INP_CMP_LO5_Pos         (10UL)                    /*!< INP_CMP_LO5 (Bit 10)                                  */
#define ADC2_INP2_INP_CMP_LO5_Msk         (0xc00UL)                 /*!< INP_CMP_LO5 (Bitfield-Mask: 0x03)                     */
#define ADC2_INP2_INP_CMP_LO6_Pos         (12UL)                    /*!< INP_CMP_LO6 (Bit 12)                                  */
#define ADC2_INP2_INP_CMP_LO6_Msk         (0x3000UL)                /*!< INP_CMP_LO6 (Bitfield-Mask: 0x03)                     */
#define ADC2_INP2_INP_CMP_LO7_Pos         (14UL)                    /*!< INP_CMP_LO7 (Bit 14)                                  */
#define ADC2_INP2_INP_CMP_LO7_Msk         (0xc000UL)                /*!< INP_CMP_LO7 (Bitfield-Mask: 0x03)                     */
#define ADC2_INP2_INP_CMP_UP0_Pos         (16UL)                    /*!< INP_CMP_UP0 (Bit 16)                                  */
#define ADC2_INP2_INP_CMP_UP0_Msk         (0x30000UL)               /*!< INP_CMP_UP0 (Bitfield-Mask: 0x03)                     */
#define ADC2_INP2_INP_CMP_UP1_Pos         (18UL)                    /*!< INP_CMP_UP1 (Bit 18)                                  */
#define ADC2_INP2_INP_CMP_UP1_Msk         (0xc0000UL)               /*!< INP_CMP_UP1 (Bitfield-Mask: 0x03)                     */
#define ADC2_INP2_INP_CMP_UP2_Pos         (20UL)                    /*!< INP_CMP_UP2 (Bit 20)                                  */
#define ADC2_INP2_INP_CMP_UP2_Msk         (0x300000UL)              /*!< INP_CMP_UP2 (Bitfield-Mask: 0x03)                     */
#define ADC2_INP2_INP_CMP_UP3_Pos         (22UL)                    /*!< INP_CMP_UP3 (Bit 22)                                  */
#define ADC2_INP2_INP_CMP_UP3_Msk         (0xc00000UL)              /*!< INP_CMP_UP3 (Bitfield-Mask: 0x03)                     */
#define ADC2_INP2_INP_CMP_UP4_Pos         (24UL)                    /*!< INP_CMP_UP4 (Bit 24)                                  */
#define ADC2_INP2_INP_CMP_UP4_Msk         (0x3000000UL)             /*!< INP_CMP_UP4 (Bitfield-Mask: 0x03)                     */
#define ADC2_INP2_INP_CMP_UP5_Pos         (26UL)                    /*!< INP_CMP_UP5 (Bit 26)                                  */
#define ADC2_INP2_INP_CMP_UP5_Msk         (0xc000000UL)             /*!< INP_CMP_UP5 (Bitfield-Mask: 0x03)                     */
#define ADC2_INP2_INP_CMP_UP6_Pos         (28UL)                    /*!< INP_CMP_UP6 (Bit 28)                                  */
#define ADC2_INP2_INP_CMP_UP6_Msk         (0x30000000UL)            /*!< INP_CMP_UP6 (Bitfield-Mask: 0x03)                     */
#define ADC2_INP2_INP_CMP_UP7_Pos         (30UL)                    /*!< INP_CMP_UP7 (Bit 30)                                  */
#define ADC2_INP2_INP_CMP_UP7_Msk         (0xc0000000UL)            /*!< INP_CMP_UP7 (Bitfield-Mask: 0x03)                     */
/* =========================================================  INP3  ========================================================== */
#define ADC2_INP3_INP_SQ0_Pos             (0UL)                     /*!< INP_SQ0 (Bit 0)                                       */
#define ADC2_INP3_INP_SQ0_Msk             (0x3UL)                   /*!< INP_SQ0 (Bitfield-Mask: 0x03)                         */
#define ADC2_INP3_INP_SQ1_Pos             (2UL)                     /*!< INP_SQ1 (Bit 2)                                       */
#define ADC2_INP3_INP_SQ1_Msk             (0xcUL)                   /*!< INP_SQ1 (Bitfield-Mask: 0x03)                         */
#define ADC2_INP3_INP_SQ2_Pos             (4UL)                     /*!< INP_SQ2 (Bit 4)                                       */
#define ADC2_INP3_INP_SQ2_Msk             (0x30UL)                  /*!< INP_SQ2 (Bitfield-Mask: 0x03)                         */
#define ADC2_INP3_INP_SQ3_Pos             (6UL)                     /*!< INP_SQ3 (Bit 6)                                       */
#define ADC2_INP3_INP_SQ3_Msk             (0xc0UL)                  /*!< INP_SQ3 (Bitfield-Mask: 0x03)                         */
#define ADC2_INP3_INP_COLL0_Pos           (8UL)                     /*!< INP_COLL0 (Bit 8)                                     */
#define ADC2_INP3_INP_COLL0_Msk           (0x300UL)                 /*!< INP_COLL0 (Bitfield-Mask: 0x03)                       */
#define ADC2_INP3_INP_COLL1_Pos           (10UL)                    /*!< INP_COLL1 (Bit 10)                                    */
#define ADC2_INP3_INP_COLL1_Msk           (0xc00UL)                 /*!< INP_COLL1 (Bitfield-Mask: 0x03)                       */
#define ADC2_INP3_INP_COLL2_Pos           (12UL)                    /*!< INP_COLL2 (Bit 12)                                    */
#define ADC2_INP3_INP_COLL2_Msk           (0x3000UL)                /*!< INP_COLL2 (Bitfield-Mask: 0x03)                       */
#define ADC2_INP3_INP_COLL3_Pos           (14UL)                    /*!< INP_COLL3 (Bit 14)                                    */
#define ADC2_INP3_INP_COLL3_Msk           (0xc000UL)                /*!< INP_COLL3 (Bitfield-Mask: 0x03)                       */

/* =========================================================================================================================== */
/* ================                                           BDRV                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  CP_CTRL  ======================================================== */
#define BDRV_CP_CTRL_CP_RDY_EN_Pos        (2UL)                     /*!< CP_RDY_EN (Bit 2)                                     */
#define BDRV_CP_CTRL_CP_RDY_EN_Msk        (0x4UL)                   /*!< CP_RDY_EN (Bitfield-Mask: 0x01)                       */
#define BDRV_CP_CTRL_CP_1STAGE_Pos        (16UL)                    /*!< CP_1STAGE (Bit 16)                                    */
#define BDRV_CP_CTRL_CP_1STAGE_Msk        (0x10000UL)               /*!< CP_1STAGE (Bitfield-Mask: 0x01)                       */

/* =========================================================================================================================== */
/* ================                                         CANNODE                                           ================ */
/* =========================================================================================================================== */

/* =======================================================  CAN_NIPR0  ======================================================= */
#define CANNODE_CAN_NIPR0_ALINP_Pos       (0UL)                     /*!< ALINP (Bit 0)                                         */
#define CANNODE_CAN_NIPR0_ALINP_Msk       (0xfUL)                   /*!< ALINP (Bitfield-Mask: 0x0f)                           */
#define CANNODE_CAN_NIPR0_LECINP_Pos      (4UL)                     /*!< LECINP (Bit 4)                                        */
#define CANNODE_CAN_NIPR0_LECINP_Msk      (0xf0UL)                  /*!< LECINP (Bitfield-Mask: 0x0f)                          */
#define CANNODE_CAN_NIPR0_TRINP_Pos       (8UL)                     /*!< TRINP (Bit 8)                                         */
#define CANNODE_CAN_NIPR0_TRINP_Msk       (0xf00UL)                 /*!< TRINP (Bitfield-Mask: 0x0f)                           */
#define CANNODE_CAN_NIPR0_CFCINP_Pos      (12UL)                    /*!< CFCINP (Bit 12)                                       */
#define CANNODE_CAN_NIPR0_CFCINP_Msk      (0xf000UL)                /*!< CFCINP (Bitfield-Mask: 0x0f)                          */

/* =========================================================================================================================== */
/* ================                                          CANTRX                                           ================ */
/* =========================================================================================================================== */

/* =========================================================  CTRL  ========================================================== */
#define CANTRX_CTRL_EN_Pos                (0UL)                     /*!< EN (Bit 0)                                            */
#define CANTRX_CTRL_EN_Msk                (0x1UL)                   /*!< EN (Bitfield-Mask: 0x01)                              */

/* =========================================================================================================================== */
/* ================                                           CCU7                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  CMPSTAT  ======================================================== */
#define CCU7_CMPSTAT_CCPOS0_Pos           (3UL)                     /*!< CCPOS0 (Bit 3)                                        */
#define CCU7_CMPSTAT_CCPOS0_Msk           (0x8UL)                   /*!< CCPOS0 (Bitfield-Mask: 0x01)                          */
#define CCU7_CMPSTAT_CCPOS1_Pos           (4UL)                     /*!< CCPOS1 (Bit 4)                                        */
#define CCU7_CMPSTAT_CCPOS1_Msk           (0x10UL)                  /*!< CCPOS1 (Bitfield-Mask: 0x01)                          */
#define CCU7_CMPSTAT_CCPOS2_Pos           (5UL)                     /*!< CCPOS2 (Bit 5)                                        */
#define CCU7_CMPSTAT_CCPOS2_Msk           (0x20UL)                  /*!< CCPOS2 (Bitfield-Mask: 0x01)                          */
/* ==========================================================  INP  ========================================================== */
#define CCU7_INP_INPCC70_Pos              (0UL)                     /*!< INPCC70 (Bit 0)                                       */
#define CCU7_INP_INPCC70_Msk              (0x3UL)                   /*!< INPCC70 (Bitfield-Mask: 0x03)                         */
#define CCU7_INP_INPCC71_Pos              (2UL)                     /*!< INPCC71 (Bit 2)                                       */
#define CCU7_INP_INPCC71_Msk              (0xcUL)                   /*!< INPCC71 (Bitfield-Mask: 0x03)                         */
#define CCU7_INP_INPCC72_Pos              (4UL)                     /*!< INPCC72 (Bit 4)                                       */
#define CCU7_INP_INPCC72_Msk              (0x30UL)                  /*!< INPCC72 (Bitfield-Mask: 0x03)                         */
#define CCU7_INP_INPCHE_Pos               (6UL)                     /*!< INPCHE (Bit 6)                                        */
#define CCU7_INP_INPCHE_Msk               (0xc0UL)                  /*!< INPCHE (Bitfield-Mask: 0x03)                          */
#define CCU7_INP_INPERR_Pos               (8UL)                     /*!< INPERR (Bit 8)                                        */
#define CCU7_INP_INPERR_Msk               (0x300UL)                 /*!< INPERR (Bitfield-Mask: 0x03)                          */
#define CCU7_INP_INPT12_Pos               (10UL)                    /*!< INPT12 (Bit 10)                                       */
#define CCU7_INP_INPT12_Msk               (0xc00UL)                 /*!< INPT12 (Bitfield-Mask: 0x03)                          */
#define CCU7_INP_INPT13_Pos               (12UL)                    /*!< INPT13 (Bit 12)                                       */
#define CCU7_INP_INPT13_Msk               (0x3000UL)                /*!< INPT13 (Bitfield-Mask: 0x03)                          */
/* =========================================================  INP_2  ========================================================= */
#define CCU7_INP_2_INPCC70B_Pos           (0UL)                     /*!< INPCC70B (Bit 0)                                      */
#define CCU7_INP_2_INPCC70B_Msk           (0x3UL)                   /*!< INPCC70B (Bitfield-Mask: 0x03)                        */
#define CCU7_INP_2_INPCC71B_Pos           (2UL)                     /*!< INPCC71B (Bit 2)                                      */
#define CCU7_INP_2_INPCC71B_Msk           (0xcUL)                   /*!< INPCC71B (Bitfield-Mask: 0x03)                        */
#define CCU7_INP_2_INPCC72B_Pos           (4UL)                     /*!< INPCC72B (Bit 4)                                      */
#define CCU7_INP_2_INPCC72B_Msk           (0x30UL)                  /*!< INPCC72B (Bitfield-Mask: 0x03)                        */
#define CCU7_INP_2_INPT14_Pos             (8UL)                     /*!< INPT14 (Bit 8)                                        */
#define CCU7_INP_2_INPT14_Msk             (0x300UL)                 /*!< INPT14 (Bitfield-Mask: 0x03)                          */
#define CCU7_INP_2_INPT15_Pos             (10UL)                    /*!< INPT15 (Bit 10)                                       */
#define CCU7_INP_2_INPT15_Msk             (0xc00UL)                 /*!< INPT15 (Bitfield-Mask: 0x03)                          */
#define CCU7_INP_2_INPT16_Pos             (12UL)                    /*!< INPT16 (Bit 12)                                       */
#define CCU7_INP_2_INPT16_Msk             (0x3000UL)                /*!< INPT16 (Bitfield-Mask: 0x03)                          */
/* ==========================================================  LI  =========================================================== */
#define CCU7_LI_INPLBE_Pos                (14UL)                    /*!< INPLBE (Bit 14)                                       */
#define CCU7_LI_INPLBE_Msk                (0xc000UL)                /*!< INPLBE (Bitfield-Mask: 0x03)                          */

/* =========================================================================================================================== */
/* ================                                            CPU                                            ================ */
/* =========================================================================================================================== */

/* =======================================================  NVIC_ISER  ======================================================= */
#define CPU_NVIC_ISER_IRQEN0_Pos          (0UL)                     /*!< IRQEN0 (Bit 0)                                        */
#define CPU_NVIC_ISER_IRQEN0_Msk          (0x1UL)                   /*!< IRQEN0 (Bitfield-Mask: 0x01)                          */
#define CPU_NVIC_ISER_IRQEN1_Pos          (1UL)                     /*!< IRQEN1 (Bit 1)                                        */
#define CPU_NVIC_ISER_IRQEN1_Msk          (0x2UL)                   /*!< IRQEN1 (Bitfield-Mask: 0x01)                          */
#define CPU_NVIC_ISER_IRQEN2_Pos          (2UL)                     /*!< IRQEN2 (Bit 2)                                        */
#define CPU_NVIC_ISER_IRQEN2_Msk          (0x4UL)                   /*!< IRQEN2 (Bitfield-Mask: 0x01)                          */
#define CPU_NVIC_ISER_IRQEN3_Pos          (3UL)                     /*!< IRQEN3 (Bit 3)                                        */
#define CPU_NVIC_ISER_IRQEN3_Msk          (0x8UL)                   /*!< IRQEN3 (Bitfield-Mask: 0x01)                          */
#define CPU_NVIC_ISER_IRQEN4_Pos          (4UL)                     /*!< IRQEN4 (Bit 4)                                        */
#define CPU_NVIC_ISER_IRQEN4_Msk          (0x10UL)                  /*!< IRQEN4 (Bitfield-Mask: 0x01)                          */
#define CPU_NVIC_ISER_IRQEN5_Pos          (5UL)                     /*!< IRQEN5 (Bit 5)                                        */
#define CPU_NVIC_ISER_IRQEN5_Msk          (0x20UL)                  /*!< IRQEN5 (Bitfield-Mask: 0x01)                          */
#define CPU_NVIC_ISER_IRQEN6_Pos          (6UL)                     /*!< IRQEN6 (Bit 6)                                        */
#define CPU_NVIC_ISER_IRQEN6_Msk          (0x40UL)                  /*!< IRQEN6 (Bitfield-Mask: 0x01)                          */
#define CPU_NVIC_ISER_IRQEN7_Pos          (7UL)                     /*!< IRQEN7 (Bit 7)                                        */
#define CPU_NVIC_ISER_IRQEN7_Msk          (0x80UL)                  /*!< IRQEN7 (Bitfield-Mask: 0x01)                          */
#define CPU_NVIC_ISER_IRQEN8_Pos          (8UL)                     /*!< IRQEN8 (Bit 8)                                        */
#define CPU_NVIC_ISER_IRQEN8_Msk          (0x100UL)                 /*!< IRQEN8 (Bitfield-Mask: 0x01)                          */
#define CPU_NVIC_ISER_IRQEN9_Pos          (9UL)                     /*!< IRQEN9 (Bit 9)                                        */
#define CPU_NVIC_ISER_IRQEN9_Msk          (0x200UL)                 /*!< IRQEN9 (Bitfield-Mask: 0x01)                          */
#define CPU_NVIC_ISER_IRQEN10_Pos         (10UL)                    /*!< IRQEN10 (Bit 10)                                      */
#define CPU_NVIC_ISER_IRQEN10_Msk         (0x400UL)                 /*!< IRQEN10 (Bitfield-Mask: 0x01)                         */
#define CPU_NVIC_ISER_IRQEN11_Pos         (11UL)                    /*!< IRQEN11 (Bit 11)                                      */
#define CPU_NVIC_ISER_IRQEN11_Msk         (0x800UL)                 /*!< IRQEN11 (Bitfield-Mask: 0x01)                         */
#define CPU_NVIC_ISER_IRQEN12_Pos         (12UL)                    /*!< IRQEN12 (Bit 12)                                      */
#define CPU_NVIC_ISER_IRQEN12_Msk         (0x1000UL)                /*!< IRQEN12 (Bitfield-Mask: 0x01)                         */
#define CPU_NVIC_ISER_IRQEN13_Pos         (13UL)                    /*!< IRQEN13 (Bit 13)                                      */
#define CPU_NVIC_ISER_IRQEN13_Msk         (0x2000UL)                /*!< IRQEN13 (Bitfield-Mask: 0x01)                         */
#define CPU_NVIC_ISER_IRQEN14_Pos         (14UL)                    /*!< IRQEN14 (Bit 14)                                      */
#define CPU_NVIC_ISER_IRQEN14_Msk         (0x4000UL)                /*!< IRQEN14 (Bitfield-Mask: 0x01)                         */
#define CPU_NVIC_ISER_IRQEN15_Pos         (15UL)                    /*!< IRQEN15 (Bit 15)                                      */
#define CPU_NVIC_ISER_IRQEN15_Msk         (0x8000UL)                /*!< IRQEN15 (Bitfield-Mask: 0x01)                         */
#define CPU_NVIC_ISER_IRQEN16_Pos         (16UL)                    /*!< IRQEN16 (Bit 16)                                      */
#define CPU_NVIC_ISER_IRQEN16_Msk         (0x10000UL)               /*!< IRQEN16 (Bitfield-Mask: 0x01)                         */
#define CPU_NVIC_ISER_IRQEN17_Pos         (17UL)                    /*!< IRQEN17 (Bit 17)                                      */
#define CPU_NVIC_ISER_IRQEN17_Msk         (0x20000UL)               /*!< IRQEN17 (Bitfield-Mask: 0x01)                         */
#define CPU_NVIC_ISER_IRQEN18_Pos         (18UL)                    /*!< IRQEN18 (Bit 18)                                      */
#define CPU_NVIC_ISER_IRQEN18_Msk         (0x40000UL)               /*!< IRQEN18 (Bitfield-Mask: 0x01)                         */
#define CPU_NVIC_ISER_IRQEN19_Pos         (19UL)                    /*!< IRQEN19 (Bit 19)                                      */
#define CPU_NVIC_ISER_IRQEN19_Msk         (0x80000UL)               /*!< IRQEN19 (Bitfield-Mask: 0x01)                         */
#define CPU_NVIC_ISER_IRQEN20_Pos         (20UL)                    /*!< IRQEN20 (Bit 20)                                      */
#define CPU_NVIC_ISER_IRQEN20_Msk         (0x100000UL)              /*!< IRQEN20 (Bitfield-Mask: 0x01)                         */
#define CPU_NVIC_ISER_IRQEN21_Pos         (21UL)                    /*!< IRQEN21 (Bit 21)                                      */
#define CPU_NVIC_ISER_IRQEN21_Msk         (0x200000UL)              /*!< IRQEN21 (Bitfield-Mask: 0x01)                         */
#define CPU_NVIC_ISER_IRQEN22_Pos         (22UL)                    /*!< IRQEN22 (Bit 22)                                      */
#define CPU_NVIC_ISER_IRQEN22_Msk         (0x400000UL)              /*!< IRQEN22 (Bitfield-Mask: 0x01)                         */
#define CPU_NVIC_ISER_IRQEN23_Pos         (23UL)                    /*!< IRQEN23 (Bit 23)                                      */
#define CPU_NVIC_ISER_IRQEN23_Msk         (0x800000UL)              /*!< IRQEN23 (Bitfield-Mask: 0x01)                         */
#define CPU_NVIC_ISER_IRQEN24_Pos         (24UL)                    /*!< IRQEN24 (Bit 24)                                      */
#define CPU_NVIC_ISER_IRQEN24_Msk         (0x1000000UL)             /*!< IRQEN24 (Bitfield-Mask: 0x01)                         */
#define CPU_NVIC_ISER_IRQEN25_Pos         (25UL)                    /*!< IRQEN25 (Bit 25)                                      */
#define CPU_NVIC_ISER_IRQEN25_Msk         (0x2000000UL)             /*!< IRQEN25 (Bitfield-Mask: 0x01)                         */
#define CPU_NVIC_ISER_IRQEN26_Pos         (26UL)                    /*!< IRQEN26 (Bit 26)                                      */
#define CPU_NVIC_ISER_IRQEN26_Msk         (0x4000000UL)             /*!< IRQEN26 (Bitfield-Mask: 0x01)                         */
#define CPU_NVIC_ISER_IRQEN27_Pos         (27UL)                    /*!< IRQEN27 (Bit 27)                                      */
#define CPU_NVIC_ISER_IRQEN27_Msk         (0x8000000UL)             /*!< IRQEN27 (Bitfield-Mask: 0x01)                         */
#define CPU_NVIC_ISER_IRQEN28_Pos         (28UL)                    /*!< IRQEN28 (Bit 28)                                      */
#define CPU_NVIC_ISER_IRQEN28_Msk         (0x10000000UL)            /*!< IRQEN28 (Bitfield-Mask: 0x01)                         */
#define CPU_NVIC_ISER_IRQEN29_Pos         (29UL)                    /*!< IRQEN29 (Bit 29)                                      */
#define CPU_NVIC_ISER_IRQEN29_Msk         (0x20000000UL)            /*!< IRQEN29 (Bitfield-Mask: 0x01)                         */
#define CPU_NVIC_ISER_IRQEN30_Pos         (30UL)                    /*!< IRQEN30 (Bit 30)                                      */
#define CPU_NVIC_ISER_IRQEN30_Msk         (0x40000000UL)            /*!< IRQEN30 (Bitfield-Mask: 0x01)                         */
#define CPU_NVIC_ISER_IRQEN31_Pos         (31UL)                    /*!< IRQEN31 (Bit 31)                                      */
#define CPU_NVIC_ISER_IRQEN31_Msk         (0x80000000UL)            /*!< IRQEN31 (Bitfield-Mask: 0x01)                         */

/* =========================================================================================================================== */
/* ================                                          CSACSC                                           ================ */
/* =========================================================================================================================== */

/* =========================================================  CTRL1  ========================================================= */
#define CSACSC_CTRL1_CSAC_EN_Pos          (0UL)                     /*!< CSAC_EN (Bit 0)                                       */
#define CSACSC_CTRL1_CSAC_EN_Msk          (0x1UL)                   /*!< CSAC_EN (Bitfield-Mask: 0x01)                         */

/* =========================================================================================================================== */
/* ================                                           GPIO                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  P0_OMR  ========================================================= */
#define GPIO_P0_OMR_PS0_Pos               (0UL)                     /*!< PS0 (Bit 0)                                           */
#define GPIO_P0_OMR_PS0_Msk               (0x1UL)                   /*!< PS0 (Bitfield-Mask: 0x01)                             */
#define GPIO_P0_OMR_PS1_Pos               (1UL)                     /*!< PS1 (Bit 1)                                           */
#define GPIO_P0_OMR_PS1_Msk               (0x2UL)                   /*!< PS1 (Bitfield-Mask: 0x01)                             */
#define GPIO_P0_OMR_PS2_Pos               (2UL)                     /*!< PS2 (Bit 2)                                           */
#define GPIO_P0_OMR_PS2_Msk               (0x4UL)                   /*!< PS2 (Bitfield-Mask: 0x01)                             */
#define GPIO_P0_OMR_PS3_Pos               (3UL)                     /*!< PS3 (Bit 3)                                           */
#define GPIO_P0_OMR_PS3_Msk               (0x8UL)                   /*!< PS3 (Bitfield-Mask: 0x01)                             */
#define GPIO_P0_OMR_PS4_Pos               (4UL)                     /*!< PS4 (Bit 4)                                           */
#define GPIO_P0_OMR_PS4_Msk               (0x10UL)                  /*!< PS4 (Bitfield-Mask: 0x01)                             */
#define GPIO_P0_OMR_PS5_Pos               (5UL)                     /*!< PS5 (Bit 5)                                           */
#define GPIO_P0_OMR_PS5_Msk               (0x20UL)                  /*!< PS5 (Bitfield-Mask: 0x01)                             */
#define GPIO_P0_OMR_PS6_Pos               (6UL)                     /*!< PS6 (Bit 6)                                           */
#define GPIO_P0_OMR_PS6_Msk               (0x40UL)                  /*!< PS6 (Bitfield-Mask: 0x01)                             */
#define GPIO_P0_OMR_PS7_Pos               (7UL)                     /*!< PS7 (Bit 7)                                           */
#define GPIO_P0_OMR_PS7_Msk               (0x80UL)                  /*!< PS7 (Bitfield-Mask: 0x01)                             */
#define GPIO_P0_OMR_PS8_Pos               (8UL)                     /*!< PS8 (Bit 8)                                           */
#define GPIO_P0_OMR_PS8_Msk               (0x100UL)                 /*!< PS8 (Bitfield-Mask: 0x01)                             */
#define GPIO_P0_OMR_PS9_Pos               (9UL)                     /*!< PS9 (Bit 9)                                           */
#define GPIO_P0_OMR_PS9_Msk               (0x200UL)                 /*!< PS9 (Bitfield-Mask: 0x01)                             */
#define GPIO_P0_OMR_PS10_Pos              (10UL)                    /*!< PS10 (Bit 10)                                         */
#define GPIO_P0_OMR_PS10_Msk              (0x400UL)                 /*!< PS10 (Bitfield-Mask: 0x01)                            */
/* ========================================================  P1_OMR  ========================================================= */
#define GPIO_P1_OMR_PS0_Pos               (0UL)                     /*!< PS0 (Bit 0)                                           */
#define GPIO_P1_OMR_PS0_Msk               (0x1UL)                   /*!< PS0 (Bitfield-Mask: 0x01)                             */
#define GPIO_P1_OMR_PS1_Pos               (1UL)                     /*!< PS1 (Bit 1)                                           */
#define GPIO_P1_OMR_PS1_Msk               (0x2UL)                   /*!< PS1 (Bitfield-Mask: 0x01)                             */
#define GPIO_P1_OMR_PS2_Pos               (2UL)                     /*!< PS2 (Bit 2)                                           */
#define GPIO_P1_OMR_PS2_Msk               (0x4UL)                   /*!< PS2 (Bitfield-Mask: 0x01)                             */
#define GPIO_P1_OMR_PS3_Pos               (3UL)                     /*!< PS3 (Bit 3)                                           */
#define GPIO_P1_OMR_PS3_Msk               (0x8UL)                   /*!< PS3 (Bitfield-Mask: 0x01)                             */
#define GPIO_P1_OMR_PS4_Pos               (4UL)                     /*!< PS4 (Bit 4)                                           */
#define GPIO_P1_OMR_PS4_Msk               (0x10UL)                  /*!< PS4 (Bitfield-Mask: 0x01)                             */

/* =========================================================================================================================== */
/* ================                                            PLL                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  CON0  ========================================================== */
#define PLL_CON0_PLLEN_Pos                (31UL)                    /*!< PLLEN (Bit 31)                                        */
#define PLL_CON0_PLLEN_Msk                (0x80000000UL)            /*!< PLLEN (Bitfield-Mask: 0x01)                           */
/* =========================================================  CON1  ========================================================== */
#define PLL_CON1_PLLEN_Pos                (31UL)                    /*!< PLLEN (Bit 31)                                        */
#define PLL_CON1_PLLEN_Msk                (0x80000000UL)            /*!< PLLEN (Bitfield-Mask: 0x01)                           */
/* =========================================================  SPCTR  ========================================================= */
#define PLL_SPCTR_SPEN0_Pos               (0UL)                     /*!< SPEN0 (Bit 0)                                         */
#define PLL_SPCTR_SPEN0_Msk               (0x1UL)                   /*!< SPEN0 (Bitfield-Mask: 0x01)                           */
#define PLL_SPCTR_SPEN1_Pos               (16UL)                    /*!< SPEN1 (Bit 16)                                        */
#define PLL_SPCTR_SPEN1_Msk               (0x10000UL)               /*!< SPEN1 (Bitfield-Mask: 0x01)                           */
/* =========================================================  STATC  ========================================================= */
#define PLL_STATC_PLL0_LOL_STSCLR_Pos     (0UL)                     /*!< PLL0_LOL_STSCLR (Bit 0)                               */
#define PLL_STATC_PLL0_LOL_STSCLR_Msk     (0x1UL)                   /*!< PLL0_LOL_STSCLR (Bitfield-Mask: 0x01)                 */
#define PLL_STATC_PLL1_LOL_STSCLR_Pos     (1UL)                     /*!< PLL1_LOL_STSCLR (Bit 1)                               */
#define PLL_STATC_PLL1_LOL_STSCLR_Msk     (0x2UL)                   /*!< PLL1_LOL_STSCLR (Bitfield-Mask: 0x01)                 */

/* =========================================================================================================================== */
/* ================                                            PMU                                            ================ */
/* =========================================================================================================================== */

/* ======================================================  FS_SSD_CLR  ======================================================= */
#define PMU_FS_SSD_CLR_SSD_STS_CLR_Pos    (0UL)                     /*!< SSD_STS_CLR (Bit 0)                                   */
#define PMU_FS_SSD_CLR_SSD_STS_CLR_Msk    (0x1UL)                   /*!< SSD_STS_CLR (Bitfield-Mask: 0x01)                     */
#define PMU_FS_SSD_CLR_FO_STS_CLR_Pos     (1UL)                     /*!< FO_STS_CLR (Bit 1)                                    */
#define PMU_FS_SSD_CLR_FO_STS_CLR_Msk     (0x2UL)                   /*!< FO_STS_CLR (Bitfield-Mask: 0x01)                      */
/* =======================================================  WAKE_CTRL  ======================================================= */
#define PMU_WAKE_CTRL_CAN_WAKE_EN_Pos     (0UL)                     /*!< CAN_WAKE_EN (Bit 0)                                   */
#define PMU_WAKE_CTRL_CAN_WAKE_EN_Msk     (0x1UL)                   /*!< CAN_WAKE_EN (Bitfield-Mask: 0x01)                     */
#define PMU_WAKE_CTRL_MON1_WAKE_EN_Pos    (12UL)                    /*!< MON1_WAKE_EN (Bit 12)                                 */
#define PMU_WAKE_CTRL_MON1_WAKE_EN_Msk    (0x1000UL)                /*!< MON1_WAKE_EN (Bitfield-Mask: 0x01)                    */
#define PMU_WAKE_CTRL_MON2_WAKE_EN_Pos    (13UL)                    /*!< MON2_WAKE_EN (Bit 13)                                 */
#define PMU_WAKE_CTRL_MON2_WAKE_EN_Msk    (0x2000UL)                /*!< MON2_WAKE_EN (Bitfield-Mask: 0x01)                    */
#define PMU_WAKE_CTRL_MON3_WAKE_EN_Pos    (14UL)                    /*!< MON3_WAKE_EN (Bit 14)                                 */
#define PMU_WAKE_CTRL_MON3_WAKE_EN_Msk    (0x4000UL)                /*!< MON3_WAKE_EN (Bitfield-Mask: 0x01)                    */
#define PMU_WAKE_CTRL_GPIO0_WAKE_EN_Pos   (4UL)                     /*!< GPIO0_WAKE_EN (Bit 4)                                 */
#define PMU_WAKE_CTRL_GPIO0_WAKE_EN_Msk   (0x10UL)                  /*!< GPIO0_WAKE_EN (Bitfield-Mask: 0x01)                   */
#define PMU_WAKE_CTRL_GPIO1_WAKE_EN_Pos   (5UL)                     /*!< GPIO1_WAKE_EN (Bit 5)                                 */
#define PMU_WAKE_CTRL_GPIO1_WAKE_EN_Msk   (0x20UL)                  /*!< GPIO1_WAKE_EN (Bitfield-Mask: 0x01)                   */
#define PMU_WAKE_CTRL_GPIO2_WAKE_EN_Pos   (6UL)                     /*!< GPIO2_WAKE_EN (Bit 6)                                 */
#define PMU_WAKE_CTRL_GPIO2_WAKE_EN_Msk   (0x40UL)                  /*!< GPIO2_WAKE_EN (Bitfield-Mask: 0x01)                   */
#define PMU_WAKE_CTRL_GPIO3_WAKE_EN_Pos   (7UL)                     /*!< GPIO3_WAKE_EN (Bit 7)                                 */
#define PMU_WAKE_CTRL_GPIO3_WAKE_EN_Msk   (0x80UL)                  /*!< GPIO3_WAKE_EN (Bitfield-Mask: 0x01)                   */
#define PMU_WAKE_CTRL_GPIO4_WAKE_EN_Pos   (8UL)                     /*!< GPIO4_WAKE_EN (Bit 8)                                 */
#define PMU_WAKE_CTRL_GPIO4_WAKE_EN_Msk   (0x100UL)                 /*!< GPIO4_WAKE_EN (Bitfield-Mask: 0x01)                   */
#define PMU_WAKE_CTRL_GPIO5_WAKE_EN_Pos   (9UL)                     /*!< GPIO5_WAKE_EN (Bit 9)                                 */
#define PMU_WAKE_CTRL_GPIO5_WAKE_EN_Msk   (0x200UL)                 /*!< GPIO5_WAKE_EN (Bitfield-Mask: 0x01)                   */
#define PMU_WAKE_CTRL_CYC_WAKE_EN_Pos     (2UL)                     /*!< CYC_WAKE_EN (Bit 2)                                   */
#define PMU_WAKE_CTRL_CYC_WAKE_EN_Msk     (0x4UL)                   /*!< CYC_WAKE_EN (Bitfield-Mask: 0x01)                     */
#define PMU_WAKE_CTRL_VDDP_UVWARN_WAKE_EN_Pos (16UL)                /*!< VDDP_UVWARN_WAKE_EN (Bit 16)                          */
#define PMU_WAKE_CTRL_VDDP_UVWARN_WAKE_EN_Msk (0x10000UL)           /*!< VDDP_UVWARN_WAKE_EN (Bitfield-Mask: 0x01)             */
#define PMU_WAKE_CTRL_VDDP_OV_WAKE_EN_Pos (17UL)                    /*!< VDDP_OV_WAKE_EN (Bit 17)                              */
#define PMU_WAKE_CTRL_VDDP_OV_WAKE_EN_Msk (0x20000UL)               /*!< VDDP_OV_WAKE_EN (Bitfield-Mask: 0x01)                 */
#define PMU_WAKE_CTRL_VDDP_HCM_WAKE_EN_Pos (18UL)                   /*!< VDDP_HCM_WAKE_EN (Bit 18)                             */
#define PMU_WAKE_CTRL_VDDP_HCM_WAKE_EN_Msk (0x40000UL)              /*!< VDDP_HCM_WAKE_EN (Bitfield-Mask: 0x01)                */
#define PMU_WAKE_CTRL_VDDC_UVWARN_WAKE_EN_Pos (19UL)                /*!< VDDC_UVWARN_WAKE_EN (Bit 19)                          */
#define PMU_WAKE_CTRL_VDDC_UVWARN_WAKE_EN_Msk (0x80000UL)           /*!< VDDC_UVWARN_WAKE_EN (Bitfield-Mask: 0x01)             */
#define PMU_WAKE_CTRL_VDDC_OV_WAKE_EN_Pos (20UL)                    /*!< VDDC_OV_WAKE_EN (Bit 20)                              */
#define PMU_WAKE_CTRL_VDDC_OV_WAKE_EN_Msk (0x100000UL)              /*!< VDDC_OV_WAKE_EN (Bitfield-Mask: 0x01)                 */
#define PMU_WAKE_CTRL_VDDC_HCM_WAKE_EN_Pos (21UL)                   /*!< VDDC_HCM_WAKE_EN (Bit 21)                             */
#define PMU_WAKE_CTRL_VDDC_HCM_WAKE_EN_Msk (0x200000UL)             /*!< VDDC_HCM_WAKE_EN (Bitfield-Mask: 0x01)                */
#define PMU_WAKE_CTRL_VDDEXT_OT_WAKE_EN_Pos (22UL)                  /*!< VDDEXT_OT_WAKE_EN (Bit 22)                            */
#define PMU_WAKE_CTRL_VDDEXT_OT_WAKE_EN_Msk (0x400000UL)            /*!< VDDEXT_OT_WAKE_EN (Bitfield-Mask: 0x01)               */
#define PMU_WAKE_CTRL_VDDEXT_UV_WAKE_EN_Pos (23UL)                  /*!< VDDEXT_UV_WAKE_EN (Bit 23)                            */
#define PMU_WAKE_CTRL_VDDEXT_UV_WAKE_EN_Msk (0x800000UL)            /*!< VDDEXT_UV_WAKE_EN (Bitfield-Mask: 0x01)               */
#define PMU_WAKE_CTRL_VSDOV_WAKE_EN_Pos   (24UL)                    /*!< VSDOV_WAKE_EN (Bit 24)                                */
#define PMU_WAKE_CTRL_VSDOV_WAKE_EN_Msk   (0x1000000UL)             /*!< VSDOV_WAKE_EN (Bitfield-Mask: 0x01)                   */
#define PMU_WAKE_CTRL_WAKE_W_RST_Pos      (28UL)                    /*!< WAKE_W_RST (Bit 28)                                   */
#define PMU_WAKE_CTRL_WAKE_W_RST_Msk      (0x10000000UL)            /*!< WAKE_W_RST (Bitfield-Mask: 0x01)                      */
#define PMU_WAKE_CTRL_VDDC_RED_EN_Pos     (29UL)                    /*!< VDDC_RED_EN (Bit 29)                                  */
#define PMU_WAKE_CTRL_VDDC_RED_EN_Msk     (0x20000000UL)            /*!< VDDC_RED_EN (Bitfield-Mask: 0x01)                     */
/* ========================================================  WD_CTRL  ======================================================== */
#define PMU_WD_CTRL_WDP_Pos               (16UL)                    /*!< WDP (Bit 16)                                          */
#define PMU_WD_CTRL_WDP_Msk               (0x3f0000UL)              /*!< WDP (Bitfield-Mask: 0x3f)                             */
#define PMU_WD_CTRL_SOW_Pos               (24UL)                    /*!< SOW (Bit 24)                                          */
#define PMU_WD_CTRL_SOW_Msk               (0x3000000UL)             /*!< SOW (Bitfield-Mask: 0x03)                             */

/* =========================================================================================================================== */
/* ================                                            SCU                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  CLKSEL  ========================================================= */
#define SCU_CLKSEL_CLKOUTEN_Pos           (19UL)                    /*!< CLKOUTEN (Bit 19)                                     */
#define SCU_CLKSEL_CLKOUTEN_Msk           (0x80000UL)               /*!< CLKOUTEN (Bitfield-Mask: 0x01)                        */
/* =========================================================  INP0  ========================================================== */
#define SCU_INP0_INP_PMU_Pos              (0UL)                     /*!< INP_PMU (Bit 0)                                       */
#define SCU_INP0_INP_PMU_Msk              (0x1UL)                   /*!< INP_PMU (Bitfield-Mask: 0x01)                         */
#define SCU_INP0_INP_BDRV_IRQ0_Pos        (1UL)                     /*!< INP_BDRV_IRQ0 (Bit 1)                                 */
#define SCU_INP0_INP_BDRV_IRQ0_Msk        (0x2UL)                   /*!< INP_BDRV_IRQ0 (Bitfield-Mask: 0x01)                   */
#define SCU_INP0_INP_BDRV_IRQ1_Pos        (2UL)                     /*!< INP_BDRV_IRQ1 (Bit 2)                                 */
#define SCU_INP0_INP_BDRV_IRQ1_Msk        (0x4UL)                   /*!< INP_BDRV_IRQ1 (Bitfield-Mask: 0x01)                   */
#define SCU_INP0_INP_CANTX_Pos            (3UL)                     /*!< INP_CANTX (Bit 3)                                     */
#define SCU_INP0_INP_CANTX_Msk            (0x8UL)                   /*!< INP_CANTX (Bitfield-Mask: 0x01)                       */
#define SCU_INP0_INP_ARVG_Pos             (4UL)                     /*!< INP_ARVG (Bit 4)                                      */
#define SCU_INP0_INP_ARVG_Msk             (0x10UL)                  /*!< INP_ARVG (Bitfield-Mask: 0x01)                        */
#define SCU_INP0_INP_CSC_Pos              (5UL)                     /*!< INP_CSC (Bit 5)                                       */
#define SCU_INP0_INP_CSC_Msk              (0x20UL)                  /*!< INP_CSC (Bitfield-Mask: 0x01)                         */
/* =========================================================  INP1  ========================================================== */
#define SCU_INP1_INP_GPT1T2_Pos           (0UL)                     /*!< INP_GPT1T2 (Bit 0)                                    */
#define SCU_INP1_INP_GPT1T2_Msk           (0x1UL)                   /*!< INP_GPT1T2 (Bitfield-Mask: 0x01)                      */
#define SCU_INP1_INP_GPT1T3_Pos           (1UL)                     /*!< INP_GPT1T3 (Bit 1)                                    */
#define SCU_INP1_INP_GPT1T3_Msk           (0x2UL)                   /*!< INP_GPT1T3 (Bitfield-Mask: 0x01)                      */
#define SCU_INP1_INP_GPT1T4_Pos           (2UL)                     /*!< INP_GPT1T4 (Bit 2)                                    */
#define SCU_INP1_INP_GPT1T4_Msk           (0x4UL)                   /*!< INP_GPT1T4 (Bitfield-Mask: 0x01)                      */
#define SCU_INP1_INP_GPT2T5_Pos           (3UL)                     /*!< INP_GPT2T5 (Bit 3)                                    */
#define SCU_INP1_INP_GPT2T5_Msk           (0x8UL)                   /*!< INP_GPT2T5 (Bitfield-Mask: 0x01)                      */
#define SCU_INP1_INP_GPT2T6_Pos           (4UL)                     /*!< INP_GPT2T6 (Bit 4)                                    */
#define SCU_INP1_INP_GPT2T6_Msk           (0x10UL)                  /*!< INP_GPT2T6 (Bitfield-Mask: 0x01)                      */
#define SCU_INP1_INP_GPT2CR_Pos           (5UL)                     /*!< INP_GPT2CR (Bit 5)                                    */
#define SCU_INP1_INP_GPT2CR_Msk           (0x20UL)                  /*!< INP_GPT2CR (Bitfield-Mask: 0x01)                      */
/* =========================================================  INP2  ========================================================== */
#define SCU_INP2_INP_MON1_Pos             (0UL)                     /*!< INP_MON1 (Bit 0)                                      */
#define SCU_INP2_INP_MON1_Msk             (0x1UL)                   /*!< INP_MON1 (Bitfield-Mask: 0x01)                        */
#define SCU_INP2_INP_MON2_Pos             (1UL)                     /*!< INP_MON2 (Bit 1)                                      */
#define SCU_INP2_INP_MON2_Msk             (0x2UL)                   /*!< INP_MON2 (Bitfield-Mask: 0x01)                        */
#define SCU_INP2_INP_MON3_Pos             (2UL)                     /*!< INP_MON3 (Bit 2)                                      */
#define SCU_INP2_INP_MON3_Msk             (0x4UL)                   /*!< INP_MON3 (Bitfield-Mask: 0x01)                        */
/* =========================================================  INP3  ========================================================== */
#define SCU_INP3_INP_SDADC0_Pos           (0UL)                     /*!< INP_SDADC0 (Bit 0)                                    */
#define SCU_INP3_INP_SDADC0_Msk           (0x1UL)                   /*!< INP_SDADC0 (Bitfield-Mask: 0x01)                      */
#define SCU_INP3_INP_SDADC1_Pos           (1UL)                     /*!< INP_SDADC1 (Bit 1)                                    */
#define SCU_INP3_INP_SDADC1_Msk           (0x2UL)                   /*!< INP_SDADC1 (Bitfield-Mask: 0x01)                      */
#define SCU_INP3_INP_BEMF0_Pos            (2UL)                     /*!< INP_BEMF0 (Bit 2)                                     */
#define SCU_INP3_INP_BEMF0_Msk            (0x4UL)                   /*!< INP_BEMF0 (Bitfield-Mask: 0x01)                       */
#define SCU_INP3_INP_BEMF1_Pos            (3UL)                     /*!< INP_BEMF1 (Bit 3)                                     */
#define SCU_INP3_INP_BEMF1_Msk            (0x8UL)                   /*!< INP_BEMF1 (Bitfield-Mask: 0x01)                       */
#define SCU_INP3_INP_BEMF2_Pos            (4UL)                     /*!< INP_BEMF2 (Bit 4)                                     */
#define SCU_INP3_INP_BEMF2_Msk            (0x10UL)                  /*!< INP_BEMF2 (Bitfield-Mask: 0x01)                       */
/* =========================================================  INP4  ========================================================== */
#define SCU_INP4_INP_EXINT0_Pos           (0UL)                     /*!< INP_EXINT0 (Bit 0)                                    */
#define SCU_INP4_INP_EXINT0_Msk           (0x1UL)                   /*!< INP_EXINT0 (Bitfield-Mask: 0x01)                      */
#define SCU_INP4_INP_EXINT1_Pos           (1UL)                     /*!< INP_EXINT1 (Bit 1)                                    */
#define SCU_INP4_INP_EXINT1_Msk           (0x2UL)                   /*!< INP_EXINT1 (Bitfield-Mask: 0x01)                      */
#define SCU_INP4_INP_EXINT2_Pos           (2UL)                     /*!< INP_EXINT2 (Bit 2)                                    */
#define SCU_INP4_INP_EXINT2_Msk           (0x4UL)                   /*!< INP_EXINT2 (Bitfield-Mask: 0x01)                      */
#define SCU_INP4_INP_EXINT3_Pos           (3UL)                     /*!< INP_EXINT3 (Bit 3)                                    */
#define SCU_INP4_INP_EXINT3_Msk           (0x8UL)                   /*!< INP_EXINT3 (Bitfield-Mask: 0x01)                      */
/* =========================================================  INP5  ========================================================== */
#define SCU_INP5_INP_LIN0_EOFSYN_Pos      (0UL)                     /*!< INP_LIN0_EOFSYN (Bit 0)                               */
#define SCU_INP5_INP_LIN0_EOFSYN_Msk      (0x1UL)                   /*!< INP_LIN0_EOFSYN (Bitfield-Mask: 0x01)                 */
#define SCU_INP5_INP_LIN0_ERRSYN_Pos      (1UL)                     /*!< INP_LIN0_ERRSYN (Bit 1)                               */
#define SCU_INP5_INP_LIN0_ERRSYN_Msk      (0x2UL)                   /*!< INP_LIN0_ERRSYN (Bitfield-Mask: 0x01)                 */
#define SCU_INP5_INP_LIN1_EOFSYN_Pos      (2UL)                     /*!< INP_LIN1_EOFSYN (Bit 2)                               */
#define SCU_INP5_INP_LIN1_EOFSYN_Msk      (0x4UL)                   /*!< INP_LIN1_EOFSYN (Bitfield-Mask: 0x01)                 */
#define SCU_INP5_INP_LIN1_ERRSYN_Pos      (3UL)                     /*!< INP_LIN1_ERRSYN (Bit 3)                               */
#define SCU_INP5_INP_LIN1_ERRSYN_Msk      (0x8UL)                   /*!< INP_LIN1_ERRSYN (Bitfield-Mask: 0x01)                 */
#define SCU_INP5_INP_UART0_RI_Pos         (4UL)                     /*!< INP_UART0_RI (Bit 4)                                  */
#define SCU_INP5_INP_UART0_RI_Msk         (0x10UL)                  /*!< INP_UART0_RI (Bitfield-Mask: 0x01)                    */
#define SCU_INP5_INP_UART0_TI_Pos         (5UL)                     /*!< INP_UART0_TI (Bit 5)                                  */
#define SCU_INP5_INP_UART0_TI_Msk         (0x20UL)                  /*!< INP_UART0_TI (Bitfield-Mask: 0x01)                    */
#define SCU_INP5_INP_UART1_RI_Pos         (6UL)                     /*!< INP_UART1_RI (Bit 6)                                  */
#define SCU_INP5_INP_UART1_RI_Msk         (0x40UL)                  /*!< INP_UART1_RI (Bitfield-Mask: 0x01)                    */
#define SCU_INP5_INP_UART1_TI_Pos         (7UL)                     /*!< INP_UART1_TI (Bit 7)                                  */
#define SCU_INP5_INP_UART1_TI_Msk         (0x80UL)                  /*!< INP_UART1_TI (Bitfield-Mask: 0x01)                    */
/* =========================================================  INP6  ========================================================== */
#define SCU_INP6_INP_SSC0_RIR_Pos         (0UL)                     /*!< INP_SSC0_RIR (Bit 0)                                  */
#define SCU_INP6_INP_SSC0_RIR_Msk         (0x1UL)                   /*!< INP_SSC0_RIR (Bitfield-Mask: 0x01)                    */
#define SCU_INP6_INP_SSC0_TIR_Pos         (1UL)                     /*!< INP_SSC0_TIR (Bit 1)                                  */
#define SCU_INP6_INP_SSC0_TIR_Msk         (0x2UL)                   /*!< INP_SSC0_TIR (Bitfield-Mask: 0x01)                    */
#define SCU_INP6_INP_SSC0_EIR_Pos         (2UL)                     /*!< INP_SSC0_EIR (Bit 2)                                  */
#define SCU_INP6_INP_SSC0_EIR_Msk         (0x4UL)                   /*!< INP_SSC0_EIR (Bitfield-Mask: 0x01)                    */
#define SCU_INP6_INP_SSC1_RIR_Pos         (4UL)                     /*!< INP_SSC1_RIR (Bit 4)                                  */
#define SCU_INP6_INP_SSC1_RIR_Msk         (0x10UL)                  /*!< INP_SSC1_RIR (Bitfield-Mask: 0x01)                    */
#define SCU_INP6_INP_SSC1_TIR_Pos         (5UL)                     /*!< INP_SSC1_TIR (Bit 5)                                  */
#define SCU_INP6_INP_SSC1_TIR_Msk         (0x20UL)                  /*!< INP_SSC1_TIR (Bitfield-Mask: 0x01)                    */
#define SCU_INP6_INP_SSC1_EIR_Pos         (6UL)                     /*!< INP_SSC1_EIR (Bit 6)                                  */
#define SCU_INP6_INP_SSC1_EIR_Msk         (0x40UL)                  /*!< INP_SSC1_EIR (Bitfield-Mask: 0x01)                    */
/* =========================================================  INP7  ========================================================== */
#define SCU_INP7_INP_DMACH0_Pos           (0UL)                     /*!< INP_DMACH0 (Bit 0)                                    */
#define SCU_INP7_INP_DMACH0_Msk           (0x1UL)                   /*!< INP_DMACH0 (Bitfield-Mask: 0x01)                      */
#define SCU_INP7_INP_DMACH1_Pos           (1UL)                     /*!< INP_DMACH1 (Bit 1)                                    */
#define SCU_INP7_INP_DMACH1_Msk           (0x2UL)                   /*!< INP_DMACH1 (Bitfield-Mask: 0x01)                      */
#define SCU_INP7_INP_DMACH2_Pos           (2UL)                     /*!< INP_DMACH2 (Bit 2)                                    */
#define SCU_INP7_INP_DMACH2_Msk           (0x4UL)                   /*!< INP_DMACH2 (Bitfield-Mask: 0x01)                      */
#define SCU_INP7_INP_DMACH3_Pos           (3UL)                     /*!< INP_DMACH3 (Bit 3)                                    */
#define SCU_INP7_INP_DMACH3_Msk           (0x8UL)                   /*!< INP_DMACH3 (Bitfield-Mask: 0x01)                      */
#define SCU_INP7_INP_DMACH4_Pos           (4UL)                     /*!< INP_DMACH4 (Bit 4)                                    */
#define SCU_INP7_INP_DMACH4_Msk           (0x10UL)                  /*!< INP_DMACH4 (Bitfield-Mask: 0x01)                      */
#define SCU_INP7_INP_DMACH5_Pos           (5UL)                     /*!< INP_DMACH5 (Bit 5)                                    */
#define SCU_INP7_INP_DMACH5_Msk           (0x20UL)                  /*!< INP_DMACH5 (Bitfield-Mask: 0x01)                      */
#define SCU_INP7_INP_DMACH6_Pos           (6UL)                     /*!< INP_DMACH6 (Bit 6)                                    */
#define SCU_INP7_INP_DMACH6_Msk           (0x40UL)                  /*!< INP_DMACH6 (Bitfield-Mask: 0x01)                      */
#define SCU_INP7_INP_DMACH7_Pos           (7UL)                     /*!< INP_DMACH7 (Bit 7)                                    */
#define SCU_INP7_INP_DMACH7_Msk           (0x80UL)                  /*!< INP_DMACH7 (Bitfield-Mask: 0x01)                      */
#define SCU_INP7_INP_DMATRERR_Pos         (8UL)                     /*!< INP_DMATRERR (Bit 8)                                  */
#define SCU_INP7_INP_DMATRERR_Msk         (0x100UL)                 /*!< INP_DMATRERR (Bitfield-Mask: 0x01)                    */
/* ========================================================  NMISRC  ========================================================= */
#define SCU_NMISRC_NMIXTALCLR_Pos         (0UL)                     /*!< NMIXTALCLR (Bit 0)                                    */
#define SCU_NMISRC_NMIXTALCLR_Msk         (0x1UL)                   /*!< NMIXTALCLR (Bitfield-Mask: 0x01)                      */
#define SCU_NMISRC_NMIPLL0CLR_Pos         (1UL)                     /*!< NMIPLL0CLR (Bit 1)                                    */
#define SCU_NMISRC_NMIPLL0CLR_Msk         (0x2UL)                   /*!< NMIPLL0CLR (Bitfield-Mask: 0x01)                      */
#define SCU_NMISRC_NMIPLL1CLR_Pos         (2UL)                     /*!< NMIPLL1CLR (Bit 2)                                    */
#define SCU_NMISRC_NMIPLL1CLR_Msk         (0x4UL)                   /*!< NMIPLL1CLR (Bitfield-Mask: 0x01)                      */
/* =========================================================  PMCON  ========================================================= */
#define SCU_PMCON_SSC0_DIS_Pos            (0UL)                     /*!< SSC0_DIS (Bit 0)                                      */
#define SCU_PMCON_SSC0_DIS_Msk            (0x1UL)                   /*!< SSC0_DIS (Bitfield-Mask: 0x01)                        */
#define SCU_PMCON_SSC1_DIS_Pos            (1UL)                     /*!< SSC1_DIS (Bit 1)                                      */
#define SCU_PMCON_SSC1_DIS_Msk            (0x2UL)                   /*!< SSC1_DIS (Bitfield-Mask: 0x01)                        */
#define SCU_PMCON_T2_DIS_Pos              (2UL)                     /*!< T2_DIS (Bit 2)                                        */
#define SCU_PMCON_T2_DIS_Msk              (0x4UL)                   /*!< T2_DIS (Bitfield-Mask: 0x01)                          */
#define SCU_PMCON_T21_DIS_Pos             (3UL)                     /*!< T21_DIS (Bit 3)                                       */
#define SCU_PMCON_T21_DIS_Msk             (0x8UL)                   /*!< T21_DIS (Bitfield-Mask: 0x01)                         */
#define SCU_PMCON_GPT12_DIS_Pos           (4UL)                     /*!< GPT12_DIS (Bit 4)                                     */
#define SCU_PMCON_GPT12_DIS_Msk           (0x10UL)                  /*!< GPT12_DIS (Bitfield-Mask: 0x01)                       */
/* ========================================================  XTALCON  ======================================================== */
#define SCU_XTALCON_XPD_Pos               (0UL)                     /*!< XPD (Bit 0)                                           */
#define SCU_XTALCON_XPD_Msk               (0x1UL)                   /*!< XPD (Bitfield-Mask: 0x01)                             */
/* =======================================================  XTALSTATC  ======================================================= */
#define SCU_XTALSTATC_XTAL_FAIL_STSCLR_Pos (0UL)                    /*!< XTAL_FAIL_STSCLR (Bit 0)                              */
#define SCU_XTALSTATC_XTAL_FAIL_STSCLR_Msk (0x1UL)                  /*!< XTAL_FAIL_STSCLR (Bitfield-Mask: 0x01)                */

/* =========================================================================================================================== */
/* ================                                           UART0                                           ================ */
/* =========================================================================================================================== */

/* =========================================================  BCON  ========================================================== */
#define UART0_BCON_BR_R_Pos               (0UL)                     /*!< BR_R (Bit 0)                                          */
#define UART0_BCON_BR_R_Msk               (0x1UL)                   /*!< BR_R (Bitfield-Mask: 0x01)                            */
/* =========================================================  SCON  ========================================================== */
#define UART0_SCON_SM1_Pos                (1UL)                     /*!< SM1 (Bit 1)                                           */
#define UART0_SCON_SM1_Msk                (0x2UL)                   /*!< SM1 (Bitfield-Mask: 0x01)                             */

/* =========================================================================================================================== */
/* ================                                           UART1                                           ================ */
/* =========================================================================================================================== */

/* =========================================================  BCON  ========================================================== */
#define UART1_BCON_BR_R_Pos               (0UL)                     /*!< BR_R (Bit 0)                                          */
#define UART1_BCON_BR_R_Msk               (0x1UL)                   /*!< BR_R (Bitfield-Mask: 0x01)                            */
/* =========================================================  SCON  ========================================================== */
#define UART1_SCON_SM1_Pos                (1UL)                     /*!< SM1 (Bit 1)                                           */
#define UART1_SCON_SM1_Msk                (0x2UL)                   /*!< SM1 (Bitfield-Mask: 0x01)                             */


/** @} */ /* End of group PosMask_peripherals */

/* =========================================  End of section using anonymous unions  ========================================= */
#if defined (__CC_ARM)
  #pragma pop
#elif defined (__ICCARM__)
  /* leave anonymous unions enabled */
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic pop
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning restore
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#endif


#ifdef __cplusplus
}
#endif

#endif /* TLE989X_H */


/** @} */ /* End of group tle989x */

/** @} */ /* End of group Infineon */
