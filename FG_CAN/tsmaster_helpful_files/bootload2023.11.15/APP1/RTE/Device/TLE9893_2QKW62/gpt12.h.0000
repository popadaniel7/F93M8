/*
 ***********************************************************************************************************************
 *
 * Copyright (c) 2015, Infineon Technologies AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,are permitted provided that the
 * following conditions are met:
 *
 *   Redistributions of source code must retain the above copyright notice, this list of conditions and the  following
 *   disclaimer.
 *
 *   Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
 *   following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 *   Neither the name of the copyright holders nor the names of its contributors may be used to endorse or promote
 *   products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  OF THE
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 **********************************************************************************************************************/

/* Generated by generate_functions_02_xlsx2func.py, version 0.9.0 on 15. Oct 2020
 * from File 'gpt12.xlsx', version 0.2.0
 */

/**
 * \file     gpt12.h
 *
 * \brief    GPT12 low level access library
 *
 * \version  V0.5.4
 * \date     21. Oct 2020
 *
 * \note
 */

/** \addtogroup GPT12_api
 *  @{
 */

/*******************************************************************************
**                             Author(s) Identity                             **
********************************************************************************
** Initials     Name                                                          **
** ---------------------------------------------------------------------------**
** JO           Julia Ott                                                     **
** BG           Blandine Guillot                                              **
** DM           Daniel Mysliwitz                                              **
*******************************************************************************/

/*******************************************************************************
**                          Revision Control History                          **
********************************************************************************
** V0.1.0: 2019-10-28, DM:   Initial version                                  **
** V0.2.0: 2020-04-28, BG:   Updated revision history format                  **
** V0.3.0: 2020-04-28, BG:   Added first functions                            **
** V0.4.0: 2020-07-10, BG:   Added inline functions list                      **
** V0.4.1: 2020-09-16, BG:   Added interrupt enable/disable functions         **
** V0.4.2: 2020-09-24, JO:   EP-472: Added functions to start/stop the timers **
**                           and get/set the timer value/CapRel value         **
** V0.5.0: 2020-09-25, JO:   EP-475: Removed the GPT1 and GPT2 before Tx/CR   **
**                           in function names                                **
**                           Renamed CR to CapRel in function names           **
** V0.5.1: 2020-10-06, BG:   EP-492: Removed MISRA 2012 errors                **
** V0.5.2: 2020-10-15, JO:   EP-523: Updated parameter names                  **
** V0.5.3: 2020-10-20, BG:   EP-532: Matched deprecated function names        **
** V0.5.4: 2020-10-21, BG:   EP-539: Considered the enable checkbox in CW in  **
**                           the initialization function                      **
*******************************************************************************/

#ifndef _GPT12_H
#define _GPT12_H

/*******************************************************************************
**                                  Includes                                  **
*******************************************************************************/
#include "tle_variants.h"
#include "types.h"
#include "tle989x.h"
#include "gpt12_defines.h"
#include "scu_defines.h"

/*******************************************************************************
**                          Global Macro Declarations                         **
*******************************************************************************/

/*******************************************************************************
**                          Global Type Declarations                          **
*******************************************************************************/

/*******************************************************************************
**                        Global Function Declarations                        **
*******************************************************************************/

sint8 GPT12_init(void);
sint8 GPT12_setIntervalTimerT3(uint32 u32_timeInterval_us);
sint8 GPT12_setIntervalTimerT6(uint32 u32_timeInterval_us);
INLINE void   GPT12_setCapRelVal(uint16 u16_value);
INLINE uint16 GPT12_getCapRelVal(void);
INLINE void   GPT12_setT2Val(uint16 u16_value);
INLINE uint16 GPT12_getT2Val(void);
INLINE void   GPT12_startT2(void);
INLINE void   GPT12_stopT2(void);
INLINE void   GPT12_setT3Val(uint16 u16_value);
INLINE uint16 GPT12_getT3Val(void);
INLINE void   GPT12_startT3(void);
INLINE void   GPT12_stopT3(void);
INLINE void   GPT12_setT4Val(uint16 u16_value);
INLINE uint16 GPT12_getT4Val(void);
INLINE void   GPT12_startT4(void);
INLINE void   GPT12_stopT4(void);
INLINE void   GPT12_setT5Val(uint16 u16_value);
INLINE uint16 GPT12_getT5Val(void);
INLINE void   GPT12_startT5(void);
INLINE void   GPT12_stopT5(void);
INLINE void   GPT12_setT6Val(uint16 u16_value);
INLINE uint16 GPT12_getT6Val(void);
INLINE void   GPT12_startT6(void);
INLINE void   GPT12_stopT6(void);
INLINE void   GPT12_enT2Int(void);
INLINE void   GPT12_enT3Int(void);
INLINE void   GPT12_enT4Int(void);
INLINE void   GPT12_enT5Int(void);
INLINE void   GPT12_enT6Int(void);
INLINE void   GPT12_enCapRelInt(void);
INLINE void   GPT12_dis1T2Int(void);
INLINE void   GPT12_disT3Int(void);
INLINE void   GPT12_disT4Int(void);
INLINE void   GPT12_disT5Int(void);
INLINE void   GPT12_disT6Int(void);
INLINE void   GPT12_disCapRelInt(void);
INLINE uint8  GPT12_getT2IntSts(void);
INLINE uint8  GPT12_getT3IntSts(void);
INLINE uint8  GPT12_getT4IntSts(void);
INLINE uint8  GPT12_getT5IntSts(void);
INLINE uint8  GPT12_getT6IntSts(void);
INLINE uint8  GPT12_getCapRelIntSts(void);
INLINE void   GPT12_clrT2IntSts(void);
INLINE void   GPT12_clrT3IntSts(void);
INLINE void   GPT12_clrT4IntSts(void);
INLINE void   GPT12_clrT5IntSts(void);
INLINE void   GPT12_clrT6IntSts(void);
INLINE void   GPT12_clrCapRelIntSts(void);

/*******************************************************************************
**                       Deprecated Function Declarations                     **
*******************************************************************************/

/** \brief Set GPT1 T2 Interrupt Node Pointer
 * \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void GPT12_setT2IntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));

/** \brief Set GPT1 T3 Interrupt Node Pointer
 * \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void GPT12_setT3IntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));

/** \brief Set GPT1 T4 Interrupt Node Pointer
 * \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void GPT12_setT4IntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));

/** \brief Set GPT2 T5 Interrupt Node Pointer
 * \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void GPT12_setT5IntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));

/** \brief Set GPT2 T6 Interrupt Node Pointer
 * \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void GPT12_setT6IntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));

/** \brief Set GPT2 CAPREL Interrupt Node Pointer
 * \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void GPT12_setCapRelIntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));

/*******************************************************************************
**                     Global Inline Function Definitions                     **
*******************************************************************************/
/** \brief Set Current reload value or Captured value
 *
 *  \param u16_value Current reload value or Captured value
 */
INLINE void GPT12_setCapRelVal(uint16 u16_value)
{
  GPT12->CAPREL.bit.CAPREL = u16_value;
}

/** \brief Get Current reload value or Captured value
 *
 *  \return uint16 Current reload value or Captured value
 */
INLINE uint16 GPT12_getCapRelVal(void)
{
  return (uint16)GPT12->CAPREL.bit.CAPREL;
}

/** \brief Set Timer T2 Current Value
 *
 *  \param u16_value Timer T2 Current Value
 */
INLINE void GPT12_setT2Val(uint16 u16_value)
{
  GPT12->T2.bit.T2 = u16_value;
}

/** \brief Get Timer T2 Current Value
 *
 * \return uint16 Timer T2 Current Value
 */
INLINE uint16 GPT12_getT2Val(void)
{
  return (uint16)GPT12->T2.bit.T2;
}

/** \brief Start Timer T2
 */
INLINE void GPT12_startT2(void)
{
  GPT12->T2CON.bit.T2R = (uint8)1u;
}

/** \brief Stop Timer T2
 */
INLINE void GPT12_stopT2(void)
{
  GPT12->T2CON.bit.T2R = (uint8)0u;
}

/** \brief Set Timer T3 Current Value
 *
 *  \param u16_value Timer T3 Current Value
 */
INLINE void GPT12_setT3Val(uint16 u16_value)
{
  GPT12->T3.bit.T3 = u16_value;
}

/** \brief Get Timer T3 Current Value
 *
 * \return uint16 Timer T3 Current Value
 */
INLINE uint16 GPT12_getT3Val(void)
{
  return (uint16)GPT12->T3.bit.T3;
}

/** \brief Start Timer T3
 */
INLINE void GPT12_startT3(void)
{
  GPT12->T3CON.bit.T3R = (uint8)1u;
}

/** \brief Stop Timer T3
 */
INLINE void GPT12_stopT3(void)
{
  GPT12->T3CON.bit.T3R = (uint8)0u;
}

/** \brief Set Timer T4 Current Value
 *
 *  \param u16_value Timer T4 Current Value
 */
INLINE void GPT12_setT4Val(uint16 u16_value)
{
  GPT12->T4.bit.T4 = u16_value;
}

/** \brief Get Timer T4 Current Value
 *
 * \return uint16 Timer T4 Current Value
 */
INLINE uint16 GPT12_getT4Val(void)
{
  return (uint16)GPT12->T4.bit.T4;
}

/** \brief Start Timer T4
 */
INLINE void GPT12_startT4(void)
{
  GPT12->T4CON.bit.T4R = (uint8)1u;
}

/** \brief Stop Timer T4
 */
INLINE void GPT12_stopT4(void)
{
  GPT12->T4CON.bit.T4R = (uint8)0u;
}

/** \brief Set Timer T5 Current Value
 *
 *  \param u16_value Timer T5 Current Value
 */
INLINE void GPT12_setT5Val(uint16 u16_value)
{
  GPT12->T5.bit.T5 = u16_value;
}

/** \brief Get Timer T5 Current Value
 *
 * \return uint16 Timer T5 Current Value
 */
INLINE uint16 GPT12_getT5Val(void)
{
  return (uint16)GPT12->T5.bit.T5;
}

/** \brief Start Timer T5
 */
INLINE void GPT12_startT5(void)
{
  GPT12->T5CON.bit.T5R = (uint8)1u;
}

/** \brief Stop Timer T5
 */
INLINE void GPT12_stopT5(void)
{
  GPT12->T5CON.bit.T5R = (uint8)0u;
}

/** \brief Set Timer T6 Current Value
 *
 *  \param u16_value Timer T6 Current Value
 */
INLINE void GPT12_setT6Val(uint16 u16_value)
{
  GPT12->T6.bit.T6 = u16_value;
}

/** \brief Get Timer T6 Current Value
 *
 * \return uint16 Timer T6 Current Value
 */
INLINE uint16 GPT12_getT6Val(void)
{
  return (uint16)GPT12->T6.bit.T6;
}

/** \brief Start Timer T6
 */
INLINE void GPT12_startT6(void)
{
  GPT12->T6CON.bit.T6R = (uint8)1u;
}

/** \brief Stop Timer T6
 */
INLINE void GPT12_stopT6(void)
{
  GPT12->T6CON.bit.T6R = (uint8)0u;
}

/** \brief Enable GPT1.T2 Interrupt
 */
INLINE void GPT12_enT2Int(void)
{
  SCU->GPTIEN.bit.GPT1T2EN = (uint8)1;
}

/** \brief Enable GPT1.T3 Interrupt
 */
INLINE void GPT12_enT3Int(void)
{
  SCU->GPTIEN.bit.GPT1T3EN = (uint8)1;
}

/** \brief Enable GPT1.T4 Interrupt
 */
INLINE void GPT12_enT4Int(void)
{
  SCU->GPTIEN.bit.GPT1T4EN = (uint8)1;
}

/** \brief Enable GPT2.T5 Interrupt
 */
INLINE void GPT12_enT5Int(void)
{
  SCU->GPTIEN.bit.GPT2T5EN = (uint8)1;
}

/** \brief Enable GPT2.T6 Interrupt
 */
INLINE void GPT12_enT6Int(void)
{
  SCU->GPTIEN.bit.GPT2T6EN = (uint8)1;
}

/** \brief Enable GPT2.CR Interrupt
 */
INLINE void GPT12_enCapRelInt(void)
{
  SCU->GPTIEN.bit.GPT2CREN = (uint8)1;
}

/** \brief Disable GPT1.T2 Interrupt
 */
INLINE void GPT12_disT2Int(void)
{
  SCU->GPTIEN.bit.GPT1T2EN = (uint8)0;
}

/** \brief Disable GPT1.T3 Interrupt
 */
INLINE void GPT12_disT3Int(void)
{
  SCU->GPTIEN.bit.GPT1T3EN = (uint8)0;
}

/** \brief Disable GPT1.T4 Interrupt
 */
INLINE void GPT12_disT4Int(void)
{
  SCU->GPTIEN.bit.GPT1T4EN = (uint8)0;
}

/** \brief Disable GPT2.T5 Interrupt
 */
INLINE void GPT12_disT5Int(void)
{
  SCU->GPTIEN.bit.GPT2T5EN = (uint8)0;
}

/** \brief Disable GPT2.T6 Interrupt
 */
INLINE void GPT12_disT6Int(void)
{
  SCU->GPTIEN.bit.GPT2T6EN = (uint8)0;
}

/** \brief Disable GPT2.CR Interrupt
 */
INLINE void GPT12_disCapRelInt(void)
{
  SCU->GPTIEN.bit.GPT2CREN = (uint8)0;
}

/** \brief Get GPT1.T2 Interrupt Status SCU.GPTIS.GPT1T2
 *
 * \return uint8 GPT1.T2 Interrupt Status
 */
INLINE uint8 GPT12_getT2IntSts(void)
{
  return (uint8)SCU->GPTIS.bit.GPT1T2;
}

/** \brief Get GPT1.T3 Interrupt Status SCU.GPTIS.GPT1T3
 *
 * \return uint8 GPT1.T3 Interrupt Status
 */
INLINE uint8 GPT12_getT3IntSts(void)
{
  return (uint8)SCU->GPTIS.bit.GPT1T3;
}

/** \brief Get GPT1.T4 Interrupt Status SCU.GPTIS.GPT1T4
 *
 * \return uint8 GPT1.T4 Interrupt Status
 */
INLINE uint8 GPT12_getT4IntSts(void)
{
  return (uint8)SCU->GPTIS.bit.GPT1T4;
}

/** \brief Get GPT2.T5 Interrupt Status SCU.GPTIS.GPT2T5
 *
 * \return uint8 GPT2.T5 Interrupt Status
 */
INLINE uint8 GPT12_getT5IntSts(void)
{
  return (uint8)SCU->GPTIS.bit.GPT2T5;
}

/** \brief Get GPT2.T6 Interrupt Status SCU.GPTIS.GPT2T6
 *
 * \return uint8 GPT2.T6 Interrupt Status
 */
INLINE uint8 GPT12_getT6IntSts(void)
{
  return (uint8)SCU->GPTIS.bit.GPT2T6;
}

/** \brief Get GPT2.CR Interrupt Status SCU.GPTIS.GPT2CR
 *
 * \return uint8 GPT2.CR Interrupt Status
 */
INLINE uint8 GPT12_getCapRelIntSts(void)
{
  return (uint8)SCU->GPTIS.bit.GPT2CR;
}

/** \brief Clear GPT1.T2 Interrupt Status SCU.GPTISC.GPT1T2CLR
 */
INLINE void GPT12_clrT2IntSts(void)
{
  SCU->GPTISC.bit.GPT1T2CLR = (uint8)1;
}

/** \brief Clear GPT1.T3 Interrupt Status SCU.GPTISC.GPT1T3CLR
 */
INLINE void GPT12_clrT3IntSts(void)
{
  SCU->GPTISC.bit.GPT1T3CLR = (uint8)1;
}

/** \brief Clear GPT1.T4 Interrupt Status SCU.GPTISC.GPT1T4CLR
 */
INLINE void GPT12_clrT4IntSts(void)
{
  SCU->GPTISC.bit.GPT1T4CLR = (uint8)1;
}

/** \brief Clear GPT2.T5 Interrupt Status SCU.GPTISC.GPT2T5CLR
 */
INLINE void GPT12_clrT5IntSts(void)
{
  SCU->GPTISC.bit.GPT2T5CLR = (uint8)1;
}

/** \brief Clear GPT2.T6 Interrupt Status SCU.GPTISC.GPT2T6CLR
 */
INLINE void GPT12_clrT6IntSts(void)
{
  SCU->GPTISC.bit.GPT2T6CLR = (uint8)1;
}

/** \brief Clear GPT2.CR Interrupt Status SCU.GPTISC.GPT2CRCLR
 */
INLINE void GPT12_clrCapRelIntSts(void)
{
  SCU->GPTISC.bit.GPT2CRCLR = (uint8)1;
}

/** @}*/

#endif /* _GPT12_H */
