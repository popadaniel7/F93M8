/*
 ***********************************************************************************************************************
 *
 * Copyright (c) 2015, Infineon Technologies AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,are permitted provided that the
 * following conditions are met:
 *
 *   Redistributions of source code must retain the above copyright notice, this list of conditions and the  following
 *   disclaimer.
 *
 *   Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
 *   following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 *   Neither the name of the copyright holders nor the names of its contributors may be used to endorse or promote
 *   products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  OF THE
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 **********************************************************************************************************************/

/* Generated by generate_functions_02_xlsx2func.py, version 0.9.0 on 16. Oct 2020
 * from File 'csacsc.xlsx', version 0.1.0
 */

/**
 * \file     csacsc.h
 *
 * \brief    CSACSC low level access library
 *
 * \version  V0.1.7
 * \date     18. Dec 2020
 *
 * \note
 */

/** \addtogroup CSACSC_api
 *  @{
 */

/*******************************************************************************
**                             Author(s) Identity                             **
********************************************************************************
** Initials     Name                                                          **
** ---------------------------------------------------------------------------**
** JO           Julia Ott                                                     **
** BG           Blandine Guillot                                              **
** DM           Daniel Mysliwitz                                              **
*******************************************************************************/

/*******************************************************************************
**                          Revision Control History                          **
********************************************************************************
** V0.1.0: 2020-05-27, DM:   Initial version                                  **
** V0.1.1: 2020-10-06, BG:   EP-492: Removed MISRA 2012 errors                **
** V0.1.2: 2020-10-16, JO:   EP-523: Updated parameter names                  **
** V0.1.3: 2020-10-21, BG:   EP-539: Considered the enable checkbox in CW in  **
**                           the initialization function                      **
** V0.1.4: 2020-11-12, JO:   EP-590: Removed \param none and \return none to  **
**                           avoid doxygen warning                            **
**                           Added end of group for doxygen                   **
** V0.1.5: 2020-11-20, BG:   EP-610: Corrected MISRA 2012 errors              **
**                           The following rules are globally deactivated:    **
**                           - Info 774: Boolean within 'if' always evaluates **
**                             to False/True                                  **
** V0.1.6: 2020-12-18, DM:   EP-642: Added shadow transfer to function        **
**                           CSACSC_startCalibration(),                       **
**                           separate shadow transfer enable added before     **
**                           actual seq. shadow transfer                      **
**                           Replaced the __NOP loop in CSACSC_init() by      **
**                           SCU_delay_us() function to give BIST 50us time   **
**                           to finish                                        **
** V0.1.7: 2020-12-18, BG:   EP-652: Corrected name of error code variable    **
*******************************************************************************/

#ifndef _CSACSC_H
#define _CSACSC_H

/*******************************************************************************
**                                  Includes                                  **
*******************************************************************************/

#include "types.h"
#include "tle989x.h"
#include "tle_variants.h"
#include "adc1.h"
#include "csacsc_defines.h"
#include "isr_defines.h"

/*******************************************************************************
**                          Global Macro Declarations                         **
*******************************************************************************/

/*******************************************************************************
**                          Global Type Declarations                          **
*******************************************************************************/

/*******************************************************************************
**                         Global Function Declarations                       **
*******************************************************************************/

sint8 CSACSC_init(void);
sint8 CSACSC_startCalibration(uint16 *pu16_Val_mV);
INLINE void CSACSC_enPower(void);
INLINE void CSACSC_disPower(void);
INLINE void   CSACSC_setMinGain(uint8 u8_value);
INLINE uint8 CSACSC_getMinGain(void);
INLINE void   CSACSC_setMinOffset(uint8 u8_value);
INLINE uint8 CSACSC_getMinOffset(void);
INLINE void   CSACSC_setMaxThreshold(uint16 u16_value);
INLINE uint16 CSACSC_getMaxThreshold(void);
INLINE void   CSACSC_setAddInputOffset(uint8 u8_value);
INLINE uint8 CSACSC_getAddInputOffset(void);
INLINE void   CSACSC_setGain(uint8 u8_value);
INLINE uint8 CSACSC_getGain(void);
INLINE void   CSACSC_setOffset(uint8 u8_value);
INLINE uint8 CSACSC_getOffset(void);
INLINE void   CSACSC_setVout(uint8 u8_value);
INLINE uint8 CSACSC_getVout(void);
INLINE void   CSACSC_setThreshold(uint8 u8_value);
INLINE uint8 CSACSC_getThreshold(void);
INLINE void   CSACSC_setFilterTime(uint8 u8_value);
INLINE uint8 CSACSC_getFilterTime(void);
INLINE void CSACSC_clrOverCurrIntSts(void);
INLINE void CSACSC_clrParamErrorIntSts(void);
INLINE void CSACSC_clrOverCurrSts(void);
INLINE void CSACSC_enOverCurrInt(void);
INLINE void CSACSC_disOverCurrInt(void);
INLINE void CSACSC_enParamErrorInt(void);
INLINE void CSACSC_disParamErrorInt(void);
INLINE uint8 CSACSC_getOverCurrIntSts(void);
INLINE uint8 CSACSC_getParamErrorIntSts(void);
INLINE uint8 CSACSC_getOverCurrSts(void);
INLINE uint8 CSACSC_getOverCurrCmpOut(void);
INLINE uint8 CSACSC_getBistSts(void);

/*******************************************************************************
**                       Deprecated Function Declarations                     **
*******************************************************************************/

/** \brief Set Overcurrent Interrupt Node Pointer
 * \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void CSACSC_setOverCurrIntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));

/** \brief Set Parameter Error Interrupt Node Pointer
 * \warning Do not change this at runtime, use the ConfigWizard to configure this feature!
 */
void CSACSC_setParamErrorIntNodePtr(void) __attribute__((deprecated("Do not change this at runtime, use the ConfigWizard to configure this feature!")));

/*******************************************************************************
**                      Global Inline Function Definitions                    **
*******************************************************************************/
/** \brief Enable Current sense amplifier and comparator enable
 */
INLINE void CSACSC_enPower(void)
{
  CSACSC->CTRL1.bit.CSAC_EN = 1u;
}

/** \brief Disable Current sense amplifier and comparator enable
 */
INLINE void CSACSC_disPower(void)
{
  CSACSC->CTRL1.bit.CSAC_EN = 0u;
}

/** \brief Set Current sense amplifier minimum gain setting
 *
 *  \param u8_value Current sense amplifier minimum gain setting
 */
INLINE void CSACSC_setMinGain(uint8 u8_value)
{
  CSACSC->CTRL1.bit.GAIN_MIN = u8_value;
}

/** \brief Get Current sense amplifier minimum gain setting
 *
 * \return uint8 Current sense amplifier minimum gain setting
 */
INLINE uint8 CSACSC_getMinGain(void)
{
  return (uint8)CSACSC->CTRL1.bit.GAIN_MIN;
}

/** \brief Set Current sense amplifier minimum output offset setting
 *
 *  \param u8_value Current sense amplifier minimum output offset setting
 */
INLINE void CSACSC_setMinOffset(uint8 u8_value)
{
  CSACSC->CTRL1.bit.OFFS_MIN = u8_value;
}

/** \brief Get Current sense amplifier minimum output offset setting
 *
 * \return uint8 Current sense amplifier minimum output offset setting
 */
INLINE uint8 CSACSC_getMinOffset(void)
{
  return (uint8)CSACSC->CTRL1.bit.OFFS_MIN;
}

/** \brief Set Current sense comparator maximum threshold setting
 *
 *  \param u16_value Current sense comparator maximum threshold setting
 */
INLINE void CSACSC_setMaxThreshold(uint16 u16_value)
{
  CSACSC->CTRL1.bit.THR_MAX = u16_value;
}

/** \brief Get Current sense comparator maximum threshold setting
 *
 * \return uint16 Current sense comparator maximum threshold setting
 */
INLINE uint16 CSACSC_getMaxThreshold(void)
{
  return (uint16)CSACSC->CTRL1.bit.THR_MAX;
}

/** \brief Set Additional input offset setting
 *
 *  \param u8_value Additional input offset setting
 */
INLINE void CSACSC_setAddInputOffset(uint8 u8_value)
{
  CSACSC->CTRL2.bit.ADD_INP_OFFS = u8_value;
}

/** \brief Get Additional input offset setting
 *
 * \return uint8 Additional input offset setting
 */
INLINE uint8 CSACSC_getAddInputOffset(void)
{
  return (uint8)CSACSC->CTRL2.bit.ADD_INP_OFFS;
}

/** \brief Set Current sense amplifier gain setting
 *
 *  \param u8_value Current sense amplifier gain setting
 */
INLINE void CSACSC_setGain(uint8 u8_value)
{
  CSACSC->CTRL2.bit.GAIN_SEL = u8_value;
}

/** \brief Get Current sense amplifier gain setting
 *
 * \return uint8 Current sense amplifier gain setting
 */
INLINE uint8 CSACSC_getGain(void)
{
  return (uint8)CSACSC->CTRL2.bit.GAIN_SEL;
}

/** \brief Set Current sense amplifier output offset setting
 *
 *  \param u8_value Current sense amplifier output offset setting
 */
INLINE void CSACSC_setOffset(uint8 u8_value)
{
  CSACSC->CTRL2.bit.OFFS_SEL = u8_value;
}

/** \brief Get Current sense amplifier output offset setting
 *
 * \return uint8 Current sense amplifier output offset setting
 */
INLINE uint8 CSACSC_getOffset(void)
{
  return (uint8)CSACSC->CTRL2.bit.OFFS_SEL;
}

/** \brief Set Current sense output selection
 *
 *  \param u8_value Current sense output selection
 */
INLINE void CSACSC_setVout(uint8 u8_value)
{
  CSACSC->CTRL2.bit.VOUT_SEL = u8_value;
}

/** \brief Get Current sense output selection
 *
 * \return uint8 Current sense output selection
 */
INLINE uint8 CSACSC_getVout(void)
{
  return (uint8)CSACSC->CTRL2.bit.VOUT_SEL;
}

/** \brief Set Current sense comparator threshold setting
 *
 *  \param u8_value Current sense comparator threshold setting
 */
INLINE void CSACSC_setThreshold(uint8 u8_value)
{
  CSACSC->CTRL2.bit.THR_SEL = u8_value;
}

/** \brief Get Current sense comparator threshold setting
 *
 * \return uint8 Current sense comparator threshold setting
 */
INLINE uint8 CSACSC_getThreshold(void)
{
  return (uint8)CSACSC->CTRL2.bit.THR_SEL;
}

/** \brief Set Filter time for current sense comparator
 *
 *  \param u8_value Filter time for current sense comparator
 */
INLINE void CSACSC_setFilterTime(uint8 u8_value)
{
  CSACSC->CTRL2.bit.TFILT_SEL = u8_value;
}

/** \brief Get Filter time for current sense comparator
 *
 * \return uint8 Filter time for current sense comparator
 */
INLINE uint8 CSACSC_getFilterTime(void)
{
  return (uint8)CSACSC->CTRL2.bit.TFILT_SEL;
}

/** \brief Clear Overcurrent event interrupt status clear
 */
INLINE void CSACSC_clrOverCurrIntSts(void)
{
  CSACSC->IRQCLR.bit.CSC_OC_ISC = 1u;
}

/** \brief Clear CSA minimum gain or offset selection error interrupt status clear
 */
INLINE void CSACSC_clrParamErrorIntSts(void)
{
  CSACSC->IRQCLR.bit.SEL_ERR_ISC = 1u;
}

/** \brief Clear Overcurrent event status clear
 */
INLINE void CSACSC_clrOverCurrSts(void)
{
  CSACSC->IRQCLR.bit.CSC_OC_SC = 1u;
}

/** \brief Enable Overcurrent event interrupt enable
 */
INLINE void CSACSC_enOverCurrInt(void)
{
  CSACSC->IRQEN.bit.CSC_OC_IEN = 1u;
}

/** \brief Disable Overcurrent event interrupt enable
 */
INLINE void CSACSC_disOverCurrInt(void)
{
  CSACSC->IRQEN.bit.CSC_OC_IEN = 0u;
}

/** \brief Enable CSA minimum gain or offset selection error interrupt enable
 */
INLINE void CSACSC_enParamErrorInt(void)
{
  CSACSC->IRQEN.bit.SEL_ERR_IEN = 1u;
}

/** \brief Disable CSA minimum gain or offset selection error interrupt enable
 */
INLINE void CSACSC_disParamErrorInt(void)
{
  CSACSC->IRQEN.bit.SEL_ERR_IEN = 0u;
}

/** \brief Get Overcurrent event interrupt status
 *
 * \return uint8 Overcurrent event interrupt status
 */
INLINE uint8 CSACSC_getOverCurrIntSts(void)
{
  return (uint8)CSACSC->IRQS.bit.CSC_OC_IS;
}

/** \brief Get CSA minimum gain or offset selection error interrupt status
 *
 * \return uint8 CSA minimum gain or offset selection error interrupt status
 */
INLINE uint8 CSACSC_getParamErrorIntSts(void)
{
  return (uint8)CSACSC->IRQS.bit.SEL_ERR_IS;
}

/** \brief Get Overcurrent event status
 *
 * \return uint8 Overcurrent event status
 */
INLINE uint8 CSACSC_getOverCurrSts(void)
{
  return (uint8)CSACSC->IRQS.bit.CSC_OC_STS;
}

/** \brief Get Overcurrent comparator output
 *
 * \return uint8 Overcurrent comparator output
 */
INLINE uint8 CSACSC_getOverCurrCmpOut(void)
{
  return (uint8)CSACSC->IRQS.bit.CSC_OC_OUT;
}

/** \brief Get CSC built-in self test status
 *
 * \return uint8 CSC built-in self test status
 */
INLINE uint8 CSACSC_getBistSts(void)
{
  return (uint8)CSACSC->IRQS.bit.CSC_BIST_STS;
}

/** @}*/

#endif /* _CSACSC_H */
