/*
Copyright (c) 2022:Shanghai TOSUN Technology Ltd.

The software mentioned in this copyright statement includes the automatic code generator function module of TSMaster software and the embedded code it generates. Among them, the copyright of the automatic code generation function module of TSMaster software is owned by Shanghai TOSUN Technology Ltd..It is protected by the Copyright Law of the People's Republic of China, the Regulations on the Protection of Computer Software, the Intellectual Property Protection Law, the Patent Law of the People's Republic of China and relevant international copyright treaties, laws, regulations, and other intellectual property laws and treaties. 

The embedded code generated by the automatic code generation function of the TSMaster is a non-commercial code whose copyright belongs to Shanghai TOSUN Technology Ltd. or the original copyright owner of the embedded code, and is only for personal learning and use. Shanghai TOSUN Technology Ltd. does not provide any kind of warranty, whether express or implied. All risks are borne by the user, and Shanghai TOSUN Technology Ltd. does not assume any joint responsibility.

The semiconductor manufacturer's LOGO and product model displayed in the TSMaster are only for the convenience of user selection and useage,its copyright and ownership remain with the respective copyright owners,Shanghai TOSUN Technology Ltd. does not provide any guarantee and rights guarantee for this, and does not assume joint and several liability for any possible infringement.

Shanghai TOSUN Technology Ltd. reserves the right to modify and upgrade the software mentioned in this copyright statement without notifying users, and reserves the right to modify this license agreement.
*/
#ifndef _MCU_LOCK_
#define _MCU_LOCK_

#ifdef __cplusplus
extern "C" {
#endif


#include <stdint.h>

typedef unsigned int mcu_lock_t;
typedef unsigned int cpu_status_t;

#ifdef _WIN32

//In PC test environment, no interruption is needed.
#define MCU_LOCK_ENTER_CRITICAL do{cpu_sr = 1;}while(0)
#define MCU_LOCK_EXIT_CRITICAL do{cpu_sr = 0;}while(0)

#else

//These two macros are related to the specific MCU and need to be modified according to the actual situation.
/* Example£º
#define MCU_LOCK_ENTER_CRITICAL do{\
    cpu_sr=INTERRUPT_STATUS; \
DISABLE_INTERRUPT;}while(0)
#define MCU_LOCK_EXIT_CRITICAL do{INTERRUPT_STATUS = cpu_sr;}while(0)
*/
//Save the current interrupt status and close the interrupt
#define MCU_LOCK_ENTER_CRITICAL do{cpu_sr = 1;}while(0)
//Restore interruption status
#define MCU_LOCK_EXIT_CRITICAL do{cpu_sr = 0;}while(0)

#endif


void mcu_lock_init(mcu_lock_t *lock);
unsigned int mcu_lock_try_lock(register mcu_lock_t *lock);
void mcu_lock_unlock(mcu_lock_t *lock);

#ifdef __cplusplus
}
#endif
#endif
