
CBM_APPL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .ncrsection   000000aa  2001fda8  2001fda8  00013da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .isr_vector   00000198  08060000  08060000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00011268  080601a0  080601a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000007e8  08071408  08071408  00012408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08071bf0  08071bf0  00013e52  2**0
                  CONTENTS
  5 .ARM          00000008  08071bf0  08071bf0  00012bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08071bf8  08071bf8  00013e52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08071bf8  08071bf8  00012bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08071bfc  08071bfc  00012bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000180  20010000  08071c00  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000562c  20010180  08071d80  00013180  2**3
                  ALLOC
 11 ._user_heap_stack 00000804  200157ac  08071d80  000137ac  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00013e52  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002921d  00000000  00000000  00013e82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006761  00000000  00000000  0003d09f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000020b8  00000000  00000000  00043800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001948  00000000  00000000  000458b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001df7d  00000000  00000000  00047200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00032119  00000000  00000000  0006517d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ae044  00000000  00000000  00097296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001452da  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008700  00000000  00000000  00145320  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  0014da20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080601a0 <__do_global_dtors_aux>:
 80601a0:	b510      	push	{r4, lr}
 80601a2:	4c05      	ldr	r4, [pc, #20]	@ (80601b8 <__do_global_dtors_aux+0x18>)
 80601a4:	7823      	ldrb	r3, [r4, #0]
 80601a6:	b933      	cbnz	r3, 80601b6 <__do_global_dtors_aux+0x16>
 80601a8:	4b04      	ldr	r3, [pc, #16]	@ (80601bc <__do_global_dtors_aux+0x1c>)
 80601aa:	b113      	cbz	r3, 80601b2 <__do_global_dtors_aux+0x12>
 80601ac:	4804      	ldr	r0, [pc, #16]	@ (80601c0 <__do_global_dtors_aux+0x20>)
 80601ae:	f3af 8000 	nop.w
 80601b2:	2301      	movs	r3, #1
 80601b4:	7023      	strb	r3, [r4, #0]
 80601b6:	bd10      	pop	{r4, pc}
 80601b8:	20010180 	.word	0x20010180
 80601bc:	00000000 	.word	0x00000000
 80601c0:	080713f0 	.word	0x080713f0

080601c4 <frame_dummy>:
 80601c4:	b508      	push	{r3, lr}
 80601c6:	4b03      	ldr	r3, [pc, #12]	@ (80601d4 <frame_dummy+0x10>)
 80601c8:	b11b      	cbz	r3, 80601d2 <frame_dummy+0xe>
 80601ca:	4903      	ldr	r1, [pc, #12]	@ (80601d8 <frame_dummy+0x14>)
 80601cc:	4803      	ldr	r0, [pc, #12]	@ (80601dc <frame_dummy+0x18>)
 80601ce:	f3af 8000 	nop.w
 80601d2:	bd08      	pop	{r3, pc}
 80601d4:	00000000 	.word	0x00000000
 80601d8:	20010184 	.word	0x20010184
 80601dc:	080713f0 	.word	0x080713f0

080601e0 <__aeabi_uldivmod>:
 80601e0:	b953      	cbnz	r3, 80601f8 <__aeabi_uldivmod+0x18>
 80601e2:	b94a      	cbnz	r2, 80601f8 <__aeabi_uldivmod+0x18>
 80601e4:	2900      	cmp	r1, #0
 80601e6:	bf08      	it	eq
 80601e8:	2800      	cmpeq	r0, #0
 80601ea:	bf1c      	itt	ne
 80601ec:	f04f 31ff 	movne.w	r1, #4294967295
 80601f0:	f04f 30ff 	movne.w	r0, #4294967295
 80601f4:	f000 b96a 	b.w	80604cc <__aeabi_idiv0>
 80601f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80601fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8060200:	f000 f806 	bl	8060210 <__udivmoddi4>
 8060204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8060208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 806020c:	b004      	add	sp, #16
 806020e:	4770      	bx	lr

08060210 <__udivmoddi4>:
 8060210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8060214:	9d08      	ldr	r5, [sp, #32]
 8060216:	460c      	mov	r4, r1
 8060218:	2b00      	cmp	r3, #0
 806021a:	d14e      	bne.n	80602ba <__udivmoddi4+0xaa>
 806021c:	4694      	mov	ip, r2
 806021e:	458c      	cmp	ip, r1
 8060220:	4686      	mov	lr, r0
 8060222:	fab2 f282 	clz	r2, r2
 8060226:	d962      	bls.n	80602ee <__udivmoddi4+0xde>
 8060228:	b14a      	cbz	r2, 806023e <__udivmoddi4+0x2e>
 806022a:	f1c2 0320 	rsb	r3, r2, #32
 806022e:	4091      	lsls	r1, r2
 8060230:	fa20 f303 	lsr.w	r3, r0, r3
 8060234:	fa0c fc02 	lsl.w	ip, ip, r2
 8060238:	4319      	orrs	r1, r3
 806023a:	fa00 fe02 	lsl.w	lr, r0, r2
 806023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8060242:	fa1f f68c 	uxth.w	r6, ip
 8060246:	fbb1 f4f7 	udiv	r4, r1, r7
 806024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 806024e:	fb07 1114 	mls	r1, r7, r4, r1
 8060252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8060256:	fb04 f106 	mul.w	r1, r4, r6
 806025a:	4299      	cmp	r1, r3
 806025c:	d90a      	bls.n	8060274 <__udivmoddi4+0x64>
 806025e:	eb1c 0303 	adds.w	r3, ip, r3
 8060262:	f104 30ff 	add.w	r0, r4, #4294967295
 8060266:	f080 8112 	bcs.w	806048e <__udivmoddi4+0x27e>
 806026a:	4299      	cmp	r1, r3
 806026c:	f240 810f 	bls.w	806048e <__udivmoddi4+0x27e>
 8060270:	3c02      	subs	r4, #2
 8060272:	4463      	add	r3, ip
 8060274:	1a59      	subs	r1, r3, r1
 8060276:	fa1f f38e 	uxth.w	r3, lr
 806027a:	fbb1 f0f7 	udiv	r0, r1, r7
 806027e:	fb07 1110 	mls	r1, r7, r0, r1
 8060282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8060286:	fb00 f606 	mul.w	r6, r0, r6
 806028a:	429e      	cmp	r6, r3
 806028c:	d90a      	bls.n	80602a4 <__udivmoddi4+0x94>
 806028e:	eb1c 0303 	adds.w	r3, ip, r3
 8060292:	f100 31ff 	add.w	r1, r0, #4294967295
 8060296:	f080 80fc 	bcs.w	8060492 <__udivmoddi4+0x282>
 806029a:	429e      	cmp	r6, r3
 806029c:	f240 80f9 	bls.w	8060492 <__udivmoddi4+0x282>
 80602a0:	4463      	add	r3, ip
 80602a2:	3802      	subs	r0, #2
 80602a4:	1b9b      	subs	r3, r3, r6
 80602a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80602aa:	2100      	movs	r1, #0
 80602ac:	b11d      	cbz	r5, 80602b6 <__udivmoddi4+0xa6>
 80602ae:	40d3      	lsrs	r3, r2
 80602b0:	2200      	movs	r2, #0
 80602b2:	e9c5 3200 	strd	r3, r2, [r5]
 80602b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80602ba:	428b      	cmp	r3, r1
 80602bc:	d905      	bls.n	80602ca <__udivmoddi4+0xba>
 80602be:	b10d      	cbz	r5, 80602c4 <__udivmoddi4+0xb4>
 80602c0:	e9c5 0100 	strd	r0, r1, [r5]
 80602c4:	2100      	movs	r1, #0
 80602c6:	4608      	mov	r0, r1
 80602c8:	e7f5      	b.n	80602b6 <__udivmoddi4+0xa6>
 80602ca:	fab3 f183 	clz	r1, r3
 80602ce:	2900      	cmp	r1, #0
 80602d0:	d146      	bne.n	8060360 <__udivmoddi4+0x150>
 80602d2:	42a3      	cmp	r3, r4
 80602d4:	d302      	bcc.n	80602dc <__udivmoddi4+0xcc>
 80602d6:	4290      	cmp	r0, r2
 80602d8:	f0c0 80f0 	bcc.w	80604bc <__udivmoddi4+0x2ac>
 80602dc:	1a86      	subs	r6, r0, r2
 80602de:	eb64 0303 	sbc.w	r3, r4, r3
 80602e2:	2001      	movs	r0, #1
 80602e4:	2d00      	cmp	r5, #0
 80602e6:	d0e6      	beq.n	80602b6 <__udivmoddi4+0xa6>
 80602e8:	e9c5 6300 	strd	r6, r3, [r5]
 80602ec:	e7e3      	b.n	80602b6 <__udivmoddi4+0xa6>
 80602ee:	2a00      	cmp	r2, #0
 80602f0:	f040 8090 	bne.w	8060414 <__udivmoddi4+0x204>
 80602f4:	eba1 040c 	sub.w	r4, r1, ip
 80602f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80602fc:	fa1f f78c 	uxth.w	r7, ip
 8060300:	2101      	movs	r1, #1
 8060302:	fbb4 f6f8 	udiv	r6, r4, r8
 8060306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 806030a:	fb08 4416 	mls	r4, r8, r6, r4
 806030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8060312:	fb07 f006 	mul.w	r0, r7, r6
 8060316:	4298      	cmp	r0, r3
 8060318:	d908      	bls.n	806032c <__udivmoddi4+0x11c>
 806031a:	eb1c 0303 	adds.w	r3, ip, r3
 806031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8060322:	d202      	bcs.n	806032a <__udivmoddi4+0x11a>
 8060324:	4298      	cmp	r0, r3
 8060326:	f200 80cd 	bhi.w	80604c4 <__udivmoddi4+0x2b4>
 806032a:	4626      	mov	r6, r4
 806032c:	1a1c      	subs	r4, r3, r0
 806032e:	fa1f f38e 	uxth.w	r3, lr
 8060332:	fbb4 f0f8 	udiv	r0, r4, r8
 8060336:	fb08 4410 	mls	r4, r8, r0, r4
 806033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 806033e:	fb00 f707 	mul.w	r7, r0, r7
 8060342:	429f      	cmp	r7, r3
 8060344:	d908      	bls.n	8060358 <__udivmoddi4+0x148>
 8060346:	eb1c 0303 	adds.w	r3, ip, r3
 806034a:	f100 34ff 	add.w	r4, r0, #4294967295
 806034e:	d202      	bcs.n	8060356 <__udivmoddi4+0x146>
 8060350:	429f      	cmp	r7, r3
 8060352:	f200 80b0 	bhi.w	80604b6 <__udivmoddi4+0x2a6>
 8060356:	4620      	mov	r0, r4
 8060358:	1bdb      	subs	r3, r3, r7
 806035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 806035e:	e7a5      	b.n	80602ac <__udivmoddi4+0x9c>
 8060360:	f1c1 0620 	rsb	r6, r1, #32
 8060364:	408b      	lsls	r3, r1
 8060366:	fa22 f706 	lsr.w	r7, r2, r6
 806036a:	431f      	orrs	r7, r3
 806036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8060370:	fa04 f301 	lsl.w	r3, r4, r1
 8060374:	ea43 030c 	orr.w	r3, r3, ip
 8060378:	40f4      	lsrs	r4, r6
 806037a:	fa00 f801 	lsl.w	r8, r0, r1
 806037e:	0c38      	lsrs	r0, r7, #16
 8060380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8060384:	fbb4 fef0 	udiv	lr, r4, r0
 8060388:	fa1f fc87 	uxth.w	ip, r7
 806038c:	fb00 441e 	mls	r4, r0, lr, r4
 8060390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8060394:	fb0e f90c 	mul.w	r9, lr, ip
 8060398:	45a1      	cmp	r9, r4
 806039a:	fa02 f201 	lsl.w	r2, r2, r1
 806039e:	d90a      	bls.n	80603b6 <__udivmoddi4+0x1a6>
 80603a0:	193c      	adds	r4, r7, r4
 80603a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80603a6:	f080 8084 	bcs.w	80604b2 <__udivmoddi4+0x2a2>
 80603aa:	45a1      	cmp	r9, r4
 80603ac:	f240 8081 	bls.w	80604b2 <__udivmoddi4+0x2a2>
 80603b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80603b4:	443c      	add	r4, r7
 80603b6:	eba4 0409 	sub.w	r4, r4, r9
 80603ba:	fa1f f983 	uxth.w	r9, r3
 80603be:	fbb4 f3f0 	udiv	r3, r4, r0
 80603c2:	fb00 4413 	mls	r4, r0, r3, r4
 80603c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80603ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80603ce:	45a4      	cmp	ip, r4
 80603d0:	d907      	bls.n	80603e2 <__udivmoddi4+0x1d2>
 80603d2:	193c      	adds	r4, r7, r4
 80603d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80603d8:	d267      	bcs.n	80604aa <__udivmoddi4+0x29a>
 80603da:	45a4      	cmp	ip, r4
 80603dc:	d965      	bls.n	80604aa <__udivmoddi4+0x29a>
 80603de:	3b02      	subs	r3, #2
 80603e0:	443c      	add	r4, r7
 80603e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80603e6:	fba0 9302 	umull	r9, r3, r0, r2
 80603ea:	eba4 040c 	sub.w	r4, r4, ip
 80603ee:	429c      	cmp	r4, r3
 80603f0:	46ce      	mov	lr, r9
 80603f2:	469c      	mov	ip, r3
 80603f4:	d351      	bcc.n	806049a <__udivmoddi4+0x28a>
 80603f6:	d04e      	beq.n	8060496 <__udivmoddi4+0x286>
 80603f8:	b155      	cbz	r5, 8060410 <__udivmoddi4+0x200>
 80603fa:	ebb8 030e 	subs.w	r3, r8, lr
 80603fe:	eb64 040c 	sbc.w	r4, r4, ip
 8060402:	fa04 f606 	lsl.w	r6, r4, r6
 8060406:	40cb      	lsrs	r3, r1
 8060408:	431e      	orrs	r6, r3
 806040a:	40cc      	lsrs	r4, r1
 806040c:	e9c5 6400 	strd	r6, r4, [r5]
 8060410:	2100      	movs	r1, #0
 8060412:	e750      	b.n	80602b6 <__udivmoddi4+0xa6>
 8060414:	f1c2 0320 	rsb	r3, r2, #32
 8060418:	fa20 f103 	lsr.w	r1, r0, r3
 806041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8060420:	fa24 f303 	lsr.w	r3, r4, r3
 8060424:	4094      	lsls	r4, r2
 8060426:	430c      	orrs	r4, r1
 8060428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 806042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8060430:	fa1f f78c 	uxth.w	r7, ip
 8060434:	fbb3 f0f8 	udiv	r0, r3, r8
 8060438:	fb08 3110 	mls	r1, r8, r0, r3
 806043c:	0c23      	lsrs	r3, r4, #16
 806043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8060442:	fb00 f107 	mul.w	r1, r0, r7
 8060446:	4299      	cmp	r1, r3
 8060448:	d908      	bls.n	806045c <__udivmoddi4+0x24c>
 806044a:	eb1c 0303 	adds.w	r3, ip, r3
 806044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8060452:	d22c      	bcs.n	80604ae <__udivmoddi4+0x29e>
 8060454:	4299      	cmp	r1, r3
 8060456:	d92a      	bls.n	80604ae <__udivmoddi4+0x29e>
 8060458:	3802      	subs	r0, #2
 806045a:	4463      	add	r3, ip
 806045c:	1a5b      	subs	r3, r3, r1
 806045e:	b2a4      	uxth	r4, r4
 8060460:	fbb3 f1f8 	udiv	r1, r3, r8
 8060464:	fb08 3311 	mls	r3, r8, r1, r3
 8060468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 806046c:	fb01 f307 	mul.w	r3, r1, r7
 8060470:	42a3      	cmp	r3, r4
 8060472:	d908      	bls.n	8060486 <__udivmoddi4+0x276>
 8060474:	eb1c 0404 	adds.w	r4, ip, r4
 8060478:	f101 36ff 	add.w	r6, r1, #4294967295
 806047c:	d213      	bcs.n	80604a6 <__udivmoddi4+0x296>
 806047e:	42a3      	cmp	r3, r4
 8060480:	d911      	bls.n	80604a6 <__udivmoddi4+0x296>
 8060482:	3902      	subs	r1, #2
 8060484:	4464      	add	r4, ip
 8060486:	1ae4      	subs	r4, r4, r3
 8060488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 806048c:	e739      	b.n	8060302 <__udivmoddi4+0xf2>
 806048e:	4604      	mov	r4, r0
 8060490:	e6f0      	b.n	8060274 <__udivmoddi4+0x64>
 8060492:	4608      	mov	r0, r1
 8060494:	e706      	b.n	80602a4 <__udivmoddi4+0x94>
 8060496:	45c8      	cmp	r8, r9
 8060498:	d2ae      	bcs.n	80603f8 <__udivmoddi4+0x1e8>
 806049a:	ebb9 0e02 	subs.w	lr, r9, r2
 806049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80604a2:	3801      	subs	r0, #1
 80604a4:	e7a8      	b.n	80603f8 <__udivmoddi4+0x1e8>
 80604a6:	4631      	mov	r1, r6
 80604a8:	e7ed      	b.n	8060486 <__udivmoddi4+0x276>
 80604aa:	4603      	mov	r3, r0
 80604ac:	e799      	b.n	80603e2 <__udivmoddi4+0x1d2>
 80604ae:	4630      	mov	r0, r6
 80604b0:	e7d4      	b.n	806045c <__udivmoddi4+0x24c>
 80604b2:	46d6      	mov	lr, sl
 80604b4:	e77f      	b.n	80603b6 <__udivmoddi4+0x1a6>
 80604b6:	4463      	add	r3, ip
 80604b8:	3802      	subs	r0, #2
 80604ba:	e74d      	b.n	8060358 <__udivmoddi4+0x148>
 80604bc:	4606      	mov	r6, r0
 80604be:	4623      	mov	r3, r4
 80604c0:	4608      	mov	r0, r1
 80604c2:	e70f      	b.n	80602e4 <__udivmoddi4+0xd4>
 80604c4:	3e02      	subs	r6, #2
 80604c6:	4463      	add	r3, ip
 80604c8:	e730      	b.n	806032c <__udivmoddi4+0x11c>
 80604ca:	bf00      	nop

080604cc <__aeabi_idiv0>:
 80604cc:	4770      	bx	lr
 80604ce:	bf00      	nop

080604d0 <ActCtrl_ClimaMainFunction>:
void ActCtrl_ClimaMainFunction(void);
void ActCtrl_MainFunction(void);
/* PROTOTYPE END */
/* FUNCTIONS START */
void ActCtrl_ClimaMainFunction(void)
{
 80604d0:	b480      	push	{r7}
 80604d2:	af00      	add	r7, sp, #0
	/* Coefficient calculation. */
	static uint8 recirculationCalculatedValue = 0;
	/* Coefficient calculation. */
	static uint8 calculatedTemperatureValue = 0;
	/* Manual control. */
	if(0 == StatusBodyControl_Auto) calculatedPWM = 25 * StatusBodyControl_FanValue;
 80604d4:	4b59      	ldr	r3, [pc, #356]	@ (806063c <ActCtrl_ClimaMainFunction+0x16c>)
 80604d6:	781b      	ldrb	r3, [r3, #0]
 80604d8:	2b00      	cmp	r3, #0
 80604da:	d10d      	bne.n	80604f8 <ActCtrl_ClimaMainFunction+0x28>
 80604dc:	4b58      	ldr	r3, [pc, #352]	@ (8060640 <ActCtrl_ClimaMainFunction+0x170>)
 80604de:	781b      	ldrb	r3, [r3, #0]
 80604e0:	461a      	mov	r2, r3
 80604e2:	0092      	lsls	r2, r2, #2
 80604e4:	4413      	add	r3, r2
 80604e6:	461a      	mov	r2, r3
 80604e8:	0091      	lsls	r1, r2, #2
 80604ea:	461a      	mov	r2, r3
 80604ec:	460b      	mov	r3, r1
 80604ee:	4413      	add	r3, r2
 80604f0:	b2da      	uxtb	r2, r3
 80604f2:	4b54      	ldr	r3, [pc, #336]	@ (8060644 <ActCtrl_ClimaMainFunction+0x174>)
 80604f4:	701a      	strb	r2, [r3, #0]
 80604f6:	e073      	b.n	80605e0 <ActCtrl_ClimaMainFunction+0x110>
	else
	{
		/* Scale down. */
		autoFanValue = (StatusBodyControl_FanValue / 2) + 1;
 80604f8:	4b51      	ldr	r3, [pc, #324]	@ (8060640 <ActCtrl_ClimaMainFunction+0x170>)
 80604fa:	781b      	ldrb	r3, [r3, #0]
 80604fc:	085b      	lsrs	r3, r3, #1
 80604fe:	b2db      	uxtb	r3, r3
 8060500:	3301      	adds	r3, #1
 8060502:	b2da      	uxtb	r2, r3
 8060504:	4b50      	ldr	r3, [pc, #320]	@ (8060648 <ActCtrl_ClimaMainFunction+0x178>)
 8060506:	701a      	strb	r2, [r3, #0]
		/* Check requested recirculation state to be AUTO. */
		if(2 == StatusBodyControl_Recirc)
 8060508:	4b50      	ldr	r3, [pc, #320]	@ (806064c <ActCtrl_ClimaMainFunction+0x17c>)
 806050a:	781b      	ldrb	r3, [r3, #0]
 806050c:	2b02      	cmp	r3, #2
 806050e:	d11b      	bne.n	8060548 <ActCtrl_ClimaMainFunction+0x78>
		{
			/* Calculate recirculation coefficient that impacts the final PWM value of the climate fan.
			 * This does not have an impact on how should a climate fan in a car behave I would assume.
			 * But for the sake of example and demonstration of functionality, this is present here.
			 * So the fan acts according to the design, in the end! */
			if(1 == StatusList_ComOutValue[GSNS_ARRPOS] && 1 == StatusList_ComOutValue[AQSNS_ARRPOS]) recirculationCalculatedValue = 4;
 8060510:	4b4f      	ldr	r3, [pc, #316]	@ (8060650 <ActCtrl_ClimaMainFunction+0x180>)
 8060512:	7a1b      	ldrb	r3, [r3, #8]
 8060514:	2b01      	cmp	r3, #1
 8060516:	d107      	bne.n	8060528 <ActCtrl_ClimaMainFunction+0x58>
 8060518:	4b4d      	ldr	r3, [pc, #308]	@ (8060650 <ActCtrl_ClimaMainFunction+0x180>)
 806051a:	79db      	ldrb	r3, [r3, #7]
 806051c:	2b01      	cmp	r3, #1
 806051e:	d103      	bne.n	8060528 <ActCtrl_ClimaMainFunction+0x58>
 8060520:	4b4c      	ldr	r3, [pc, #304]	@ (8060654 <ActCtrl_ClimaMainFunction+0x184>)
 8060522:	2204      	movs	r2, #4
 8060524:	701a      	strb	r2, [r3, #0]
 8060526:	e012      	b.n	806054e <ActCtrl_ClimaMainFunction+0x7e>
			else if(1 == StatusList_ComOutValue[GSNS_ARRPOS] || 1 == StatusList_ComOutValue[AQSNS_ARRPOS]) recirculationCalculatedValue = 3;
 8060528:	4b49      	ldr	r3, [pc, #292]	@ (8060650 <ActCtrl_ClimaMainFunction+0x180>)
 806052a:	7a1b      	ldrb	r3, [r3, #8]
 806052c:	2b01      	cmp	r3, #1
 806052e:	d003      	beq.n	8060538 <ActCtrl_ClimaMainFunction+0x68>
 8060530:	4b47      	ldr	r3, [pc, #284]	@ (8060650 <ActCtrl_ClimaMainFunction+0x180>)
 8060532:	79db      	ldrb	r3, [r3, #7]
 8060534:	2b01      	cmp	r3, #1
 8060536:	d103      	bne.n	8060540 <ActCtrl_ClimaMainFunction+0x70>
 8060538:	4b46      	ldr	r3, [pc, #280]	@ (8060654 <ActCtrl_ClimaMainFunction+0x184>)
 806053a:	2203      	movs	r2, #3
 806053c:	701a      	strb	r2, [r3, #0]
 806053e:	e006      	b.n	806054e <ActCtrl_ClimaMainFunction+0x7e>
			else recirculationCalculatedValue = 2;
 8060540:	4b44      	ldr	r3, [pc, #272]	@ (8060654 <ActCtrl_ClimaMainFunction+0x184>)
 8060542:	2202      	movs	r2, #2
 8060544:	701a      	strb	r2, [r3, #0]
 8060546:	e002      	b.n	806054e <ActCtrl_ClimaMainFunction+0x7e>
		}
		else recirculationCalculatedValue = 1;
 8060548:	4b42      	ldr	r3, [pc, #264]	@ (8060654 <ActCtrl_ClimaMainFunction+0x184>)
 806054a:	2201      	movs	r2, #1
 806054c:	701a      	strb	r2, [r3, #0]
		/* Calculate the coefficient of the fan speed applied based on the difference of the temperature: requested versus outside. */
		if(0 == StatusBodyControl_OutsideTemp && 0 == StatusBodyControl_Temperature) calculatedTemperatureValue = 1;
 806054e:	4b42      	ldr	r3, [pc, #264]	@ (8060658 <ActCtrl_ClimaMainFunction+0x188>)
 8060550:	781b      	ldrb	r3, [r3, #0]
 8060552:	2b00      	cmp	r3, #0
 8060554:	d107      	bne.n	8060566 <ActCtrl_ClimaMainFunction+0x96>
 8060556:	4b41      	ldr	r3, [pc, #260]	@ (806065c <ActCtrl_ClimaMainFunction+0x18c>)
 8060558:	781b      	ldrb	r3, [r3, #0]
 806055a:	2b00      	cmp	r3, #0
 806055c:	d103      	bne.n	8060566 <ActCtrl_ClimaMainFunction+0x96>
 806055e:	4b40      	ldr	r3, [pc, #256]	@ (8060660 <ActCtrl_ClimaMainFunction+0x190>)
 8060560:	2201      	movs	r2, #1
 8060562:	701a      	strb	r2, [r3, #0]
 8060564:	e01a      	b.n	806059c <ActCtrl_ClimaMainFunction+0xcc>
		else
		{
			if(abs(StatusBodyControl_OutsideTemp - StatusBodyControl_Temperature) > 16) calculatedTemperatureValue = 16;
 8060566:	4b3c      	ldr	r3, [pc, #240]	@ (8060658 <ActCtrl_ClimaMainFunction+0x188>)
 8060568:	781b      	ldrb	r3, [r3, #0]
 806056a:	461a      	mov	r2, r3
 806056c:	4b3b      	ldr	r3, [pc, #236]	@ (806065c <ActCtrl_ClimaMainFunction+0x18c>)
 806056e:	781b      	ldrb	r3, [r3, #0]
 8060570:	1ad3      	subs	r3, r2, r3
 8060572:	2b00      	cmp	r3, #0
 8060574:	bfb8      	it	lt
 8060576:	425b      	neglt	r3, r3
 8060578:	2b10      	cmp	r3, #16
 806057a:	dd03      	ble.n	8060584 <ActCtrl_ClimaMainFunction+0xb4>
 806057c:	4b38      	ldr	r3, [pc, #224]	@ (8060660 <ActCtrl_ClimaMainFunction+0x190>)
 806057e:	2210      	movs	r2, #16
 8060580:	701a      	strb	r2, [r3, #0]
 8060582:	e00b      	b.n	806059c <ActCtrl_ClimaMainFunction+0xcc>
			else calculatedTemperatureValue = abs(StatusBodyControl_OutsideTemp - StatusBodyControl_Temperature);
 8060584:	4b34      	ldr	r3, [pc, #208]	@ (8060658 <ActCtrl_ClimaMainFunction+0x188>)
 8060586:	781b      	ldrb	r3, [r3, #0]
 8060588:	461a      	mov	r2, r3
 806058a:	4b34      	ldr	r3, [pc, #208]	@ (806065c <ActCtrl_ClimaMainFunction+0x18c>)
 806058c:	781b      	ldrb	r3, [r3, #0]
 806058e:	1ad3      	subs	r3, r2, r3
 8060590:	2b00      	cmp	r3, #0
 8060592:	bfb8      	it	lt
 8060594:	425b      	neglt	r3, r3
 8060596:	b2da      	uxtb	r2, r3
 8060598:	4b31      	ldr	r3, [pc, #196]	@ (8060660 <ActCtrl_ClimaMainFunction+0x190>)
 806059a:	701a      	strb	r2, [r3, #0]
		}
		/* Calculate the PWM value to be applied to the fan. */
		calculatedPWM = 8 * (calculatedTemperatureValue + recirculationCalculatedValue + autoFanValue);
 806059c:	4b30      	ldr	r3, [pc, #192]	@ (8060660 <ActCtrl_ClimaMainFunction+0x190>)
 806059e:	781b      	ldrb	r3, [r3, #0]
 80605a0:	461a      	mov	r2, r3
 80605a2:	4b2c      	ldr	r3, [pc, #176]	@ (8060654 <ActCtrl_ClimaMainFunction+0x184>)
 80605a4:	781b      	ldrb	r3, [r3, #0]
 80605a6:	4413      	add	r3, r2
 80605a8:	4a27      	ldr	r2, [pc, #156]	@ (8060648 <ActCtrl_ClimaMainFunction+0x178>)
 80605aa:	7812      	ldrb	r2, [r2, #0]
 80605ac:	4413      	add	r3, r2
 80605ae:	b2db      	uxtb	r3, r3
 80605b0:	00db      	lsls	r3, r3, #3
 80605b2:	b2da      	uxtb	r2, r3
 80605b4:	4b23      	ldr	r3, [pc, #140]	@ (8060644 <ActCtrl_ClimaMainFunction+0x174>)
 80605b6:	701a      	strb	r2, [r3, #0]
		/* Scale it down. */
		calculatedPWM = (calculatedPWM / 5) * 5;
 80605b8:	4b22      	ldr	r3, [pc, #136]	@ (8060644 <ActCtrl_ClimaMainFunction+0x174>)
 80605ba:	781b      	ldrb	r3, [r3, #0]
 80605bc:	4a29      	ldr	r2, [pc, #164]	@ (8060664 <ActCtrl_ClimaMainFunction+0x194>)
 80605be:	fba2 2303 	umull	r2, r3, r2, r3
 80605c2:	089b      	lsrs	r3, r3, #2
 80605c4:	b2db      	uxtb	r3, r3
 80605c6:	461a      	mov	r2, r3
 80605c8:	0092      	lsls	r2, r2, #2
 80605ca:	4413      	add	r3, r2
 80605cc:	b2da      	uxtb	r2, r3
 80605ce:	4b1d      	ldr	r3, [pc, #116]	@ (8060644 <ActCtrl_ClimaMainFunction+0x174>)
 80605d0:	701a      	strb	r2, [r3, #0]
		/* Fan value requested 0 means no fan. */
		if(0 == StatusBodyControl_FanValue) calculatedPWM = 0;
 80605d2:	4b1b      	ldr	r3, [pc, #108]	@ (8060640 <ActCtrl_ClimaMainFunction+0x170>)
 80605d4:	781b      	ldrb	r3, [r3, #0]
 80605d6:	2b00      	cmp	r3, #0
 80605d8:	d102      	bne.n	80605e0 <ActCtrl_ClimaMainFunction+0x110>
 80605da:	4b1a      	ldr	r3, [pc, #104]	@ (8060644 <ActCtrl_ClimaMainFunction+0x174>)
 80605dc:	2200      	movs	r2, #0
 80605de:	701a      	strb	r2, [r3, #0]
		{
			/* Do nothing. */
		}
	}
	/* Apply the correct PWM to the MOSFET board that controls the speed of the fan. */
	if(0 != calculatedPWM)
 80605e0:	4b18      	ldr	r3, [pc, #96]	@ (8060644 <ActCtrl_ClimaMainFunction+0x174>)
 80605e2:	781b      	ldrb	r3, [r3, #0]
 80605e4:	2b00      	cmp	r3, #0
 80605e6:	d01f      	beq.n	8060628 <ActCtrl_ClimaMainFunction+0x158>
	{
		if(calculatedPWM > htim2.Instance->CCR1) htim2.Instance->CCR1 += 5;
 80605e8:	4b16      	ldr	r3, [pc, #88]	@ (8060644 <ActCtrl_ClimaMainFunction+0x174>)
 80605ea:	781b      	ldrb	r3, [r3, #0]
 80605ec:	461a      	mov	r2, r3
 80605ee:	4b1e      	ldr	r3, [pc, #120]	@ (8060668 <ActCtrl_ClimaMainFunction+0x198>)
 80605f0:	681b      	ldr	r3, [r3, #0]
 80605f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80605f4:	429a      	cmp	r2, r3
 80605f6:	d907      	bls.n	8060608 <ActCtrl_ClimaMainFunction+0x138>
 80605f8:	4b1b      	ldr	r3, [pc, #108]	@ (8060668 <ActCtrl_ClimaMainFunction+0x198>)
 80605fa:	681b      	ldr	r3, [r3, #0]
 80605fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80605fe:	4b1a      	ldr	r3, [pc, #104]	@ (8060668 <ActCtrl_ClimaMainFunction+0x198>)
 8060600:	681b      	ldr	r3, [r3, #0]
 8060602:	3205      	adds	r2, #5
 8060604:	635a      	str	r2, [r3, #52]	@ 0x34
		{
			/* Do nothing. */
		}
	}
	else htim2.Instance->CCR1 = 0;
}
 8060606:	e013      	b.n	8060630 <ActCtrl_ClimaMainFunction+0x160>
		else if(calculatedPWM < htim2.Instance->CCR1) htim2.Instance->CCR1 -= 5;
 8060608:	4b0e      	ldr	r3, [pc, #56]	@ (8060644 <ActCtrl_ClimaMainFunction+0x174>)
 806060a:	781b      	ldrb	r3, [r3, #0]
 806060c:	461a      	mov	r2, r3
 806060e:	4b16      	ldr	r3, [pc, #88]	@ (8060668 <ActCtrl_ClimaMainFunction+0x198>)
 8060610:	681b      	ldr	r3, [r3, #0]
 8060612:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8060614:	429a      	cmp	r2, r3
 8060616:	d20b      	bcs.n	8060630 <ActCtrl_ClimaMainFunction+0x160>
 8060618:	4b13      	ldr	r3, [pc, #76]	@ (8060668 <ActCtrl_ClimaMainFunction+0x198>)
 806061a:	681b      	ldr	r3, [r3, #0]
 806061c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 806061e:	4b12      	ldr	r3, [pc, #72]	@ (8060668 <ActCtrl_ClimaMainFunction+0x198>)
 8060620:	681b      	ldr	r3, [r3, #0]
 8060622:	3a05      	subs	r2, #5
 8060624:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8060626:	e003      	b.n	8060630 <ActCtrl_ClimaMainFunction+0x160>
	else htim2.Instance->CCR1 = 0;
 8060628:	4b0f      	ldr	r3, [pc, #60]	@ (8060668 <ActCtrl_ClimaMainFunction+0x198>)
 806062a:	681b      	ldr	r3, [r3, #0]
 806062c:	2200      	movs	r2, #0
 806062e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8060630:	bf00      	nop
 8060632:	46bd      	mov	sp, r7
 8060634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8060638:	4770      	bx	lr
 806063a:	bf00      	nop
 806063c:	200101b2 	.word	0x200101b2
 8060640:	200101b1 	.word	0x200101b1
 8060644:	200101b6 	.word	0x200101b6
 8060648:	200101b7 	.word	0x200101b7
 806064c:	200101b3 	.word	0x200101b3
 8060650:	200102cc 	.word	0x200102cc
 8060654:	200101b8 	.word	0x200101b8
 8060658:	200101b5 	.word	0x200101b5
 806065c:	200101b4 	.word	0x200101b4
 8060660:	200101b9 	.word	0x200101b9
 8060664:	cccccccd 	.word	0xcccccccd
 8060668:	20010b70 	.word	0x20010b70

0806066c <ActCtrl_MainFunction>:

void ActCtrl_MainFunction(void)
{
 806066c:	b598      	push	{r3, r4, r7, lr}
 806066e:	af00      	add	r7, sp, #0
	/* Count how many times the wipers have travelled. */
	static uint32 washingCounter = 0;
	/* Wait before setting the wipers to default position. */
	static uint32 washingTimeStamp = 0;
	/* Process climate fan. */
	ActCtrl_ClimaMainFunction();
 8060670:	f7ff ff2e 	bl	80604d0 <ActCtrl_ClimaMainFunction>
	/* Process the PWM value based on CAN command. */
	/* Invalidate PWM registers if TIM error is detected. */
	if(Tim_ErrorStatus[0] == 0)
 8060674:	4b8c      	ldr	r3, [pc, #560]	@ (80608a8 <ActCtrl_MainFunction+0x23c>)
 8060676:	681b      	ldr	r3, [r3, #0]
 8060678:	2b00      	cmp	r3, #0
 806067a:	d003      	beq.n	8060684 <ActCtrl_MainFunction+0x18>
	{
		/* Do nothing. */
	}
	else htim2.Instance->CCR1 = 0;
 806067c:	4b8b      	ldr	r3, [pc, #556]	@ (80608ac <ActCtrl_MainFunction+0x240>)
 806067e:	681b      	ldr	r3, [r3, #0]
 8060680:	2200      	movs	r2, #0
 8060682:	635a      	str	r2, [r3, #52]	@ 0x34
	/* Invalidate PWM registers if TIM error is detected. */
	if(Tim_ErrorStatus[1] == 0)
 8060684:	4b88      	ldr	r3, [pc, #544]	@ (80608a8 <ActCtrl_MainFunction+0x23c>)
 8060686:	685b      	ldr	r3, [r3, #4]
 8060688:	2b00      	cmp	r3, #0
 806068a:	f040 824b 	bne.w	8060b24 <ActCtrl_MainFunction+0x4b8>
	{
		/* If latest command from received via BT is 1. */
		if(StatusList_OutputValue[HC05_ARRPOS] == 1)
 806068e:	4b88      	ldr	r3, [pc, #544]	@ (80608b0 <ActCtrl_MainFunction+0x244>)
 8060690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8060692:	2b01      	cmp	r3, #1
 8060694:	d12a      	bne.n	80606ec <ActCtrl_MainFunction+0x80>
		{
			/* Door lock left */
			if(1250 - Param_DoorLockPwmIncrement > htim3.Instance->CCR1) htim3.Instance->CCR1 += Param_DoorLockPwmIncrement;
 8060696:	4b87      	ldr	r3, [pc, #540]	@ (80608b4 <ActCtrl_MainFunction+0x248>)
 8060698:	781b      	ldrb	r3, [r3, #0]
 806069a:	f5c3 639c 	rsb	r3, r3, #1248	@ 0x4e0
 806069e:	3302      	adds	r3, #2
 80606a0:	461a      	mov	r2, r3
 80606a2:	4b85      	ldr	r3, [pc, #532]	@ (80608b8 <ActCtrl_MainFunction+0x24c>)
 80606a4:	681b      	ldr	r3, [r3, #0]
 80606a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80606a8:	429a      	cmp	r2, r3
 80606aa:	d909      	bls.n	80606c0 <ActCtrl_MainFunction+0x54>
 80606ac:	4b82      	ldr	r3, [pc, #520]	@ (80608b8 <ActCtrl_MainFunction+0x24c>)
 80606ae:	681b      	ldr	r3, [r3, #0]
 80606b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80606b2:	4b80      	ldr	r3, [pc, #512]	@ (80608b4 <ActCtrl_MainFunction+0x248>)
 80606b4:	781b      	ldrb	r3, [r3, #0]
 80606b6:	4619      	mov	r1, r3
 80606b8:	4b7f      	ldr	r3, [pc, #508]	@ (80608b8 <ActCtrl_MainFunction+0x24c>)
 80606ba:	681b      	ldr	r3, [r3, #0]
 80606bc:	440a      	add	r2, r1
 80606be:	635a      	str	r2, [r3, #52]	@ 0x34
			else
			{
				/* Do nothing. */
			}
			/* Door lock right */
			if(1250 - Param_DoorLockPwmIncrement > htim3.Instance->CCR2) htim3.Instance->CCR2 += Param_DoorLockPwmIncrement;
 80606c0:	4b7c      	ldr	r3, [pc, #496]	@ (80608b4 <ActCtrl_MainFunction+0x248>)
 80606c2:	781b      	ldrb	r3, [r3, #0]
 80606c4:	f5c3 639c 	rsb	r3, r3, #1248	@ 0x4e0
 80606c8:	3302      	adds	r3, #2
 80606ca:	461a      	mov	r2, r3
 80606cc:	4b7a      	ldr	r3, [pc, #488]	@ (80608b8 <ActCtrl_MainFunction+0x24c>)
 80606ce:	681b      	ldr	r3, [r3, #0]
 80606d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80606d2:	429a      	cmp	r2, r3
 80606d4:	d932      	bls.n	806073c <ActCtrl_MainFunction+0xd0>
 80606d6:	4b78      	ldr	r3, [pc, #480]	@ (80608b8 <ActCtrl_MainFunction+0x24c>)
 80606d8:	681b      	ldr	r3, [r3, #0]
 80606da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80606dc:	4b75      	ldr	r3, [pc, #468]	@ (80608b4 <ActCtrl_MainFunction+0x248>)
 80606de:	781b      	ldrb	r3, [r3, #0]
 80606e0:	4619      	mov	r1, r3
 80606e2:	4b75      	ldr	r3, [pc, #468]	@ (80608b8 <ActCtrl_MainFunction+0x24c>)
 80606e4:	681b      	ldr	r3, [r3, #0]
 80606e6:	440a      	add	r2, r1
 80606e8:	639a      	str	r2, [r3, #56]	@ 0x38
 80606ea:	e027      	b.n	806073c <ActCtrl_MainFunction+0xd0>
			else
			{
				/* Do nothing. */
			}
		}/* Else close the doors. */
		else if(StatusList_OutputValue[HC05_ARRPOS] == 2)
 80606ec:	4b70      	ldr	r3, [pc, #448]	@ (80608b0 <ActCtrl_MainFunction+0x244>)
 80606ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80606f0:	2b02      	cmp	r3, #2
 80606f2:	d123      	bne.n	806073c <ActCtrl_MainFunction+0xd0>
		{
			/* Door lock left */
			if(Param_DoorLockPwmIncrement < htim3.Instance->CCR1) htim3.Instance->CCR1 -= Param_DoorLockPwmIncrement;
 80606f4:	4b6f      	ldr	r3, [pc, #444]	@ (80608b4 <ActCtrl_MainFunction+0x248>)
 80606f6:	781b      	ldrb	r3, [r3, #0]
 80606f8:	461a      	mov	r2, r3
 80606fa:	4b6f      	ldr	r3, [pc, #444]	@ (80608b8 <ActCtrl_MainFunction+0x24c>)
 80606fc:	681b      	ldr	r3, [r3, #0]
 80606fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8060700:	429a      	cmp	r2, r3
 8060702:	d209      	bcs.n	8060718 <ActCtrl_MainFunction+0xac>
 8060704:	4b6c      	ldr	r3, [pc, #432]	@ (80608b8 <ActCtrl_MainFunction+0x24c>)
 8060706:	681b      	ldr	r3, [r3, #0]
 8060708:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 806070a:	4b6a      	ldr	r3, [pc, #424]	@ (80608b4 <ActCtrl_MainFunction+0x248>)
 806070c:	781b      	ldrb	r3, [r3, #0]
 806070e:	4619      	mov	r1, r3
 8060710:	4b69      	ldr	r3, [pc, #420]	@ (80608b8 <ActCtrl_MainFunction+0x24c>)
 8060712:	681b      	ldr	r3, [r3, #0]
 8060714:	1a52      	subs	r2, r2, r1
 8060716:	635a      	str	r2, [r3, #52]	@ 0x34
			else
			{
				/* Do nothing. */
			}
			/* Door lock right */
			if(Param_DoorLockPwmIncrement < htim3.Instance->CCR2) htim3.Instance->CCR2 -= Param_DoorLockPwmIncrement;
 8060718:	4b66      	ldr	r3, [pc, #408]	@ (80608b4 <ActCtrl_MainFunction+0x248>)
 806071a:	781b      	ldrb	r3, [r3, #0]
 806071c:	461a      	mov	r2, r3
 806071e:	4b66      	ldr	r3, [pc, #408]	@ (80608b8 <ActCtrl_MainFunction+0x24c>)
 8060720:	681b      	ldr	r3, [r3, #0]
 8060722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8060724:	429a      	cmp	r2, r3
 8060726:	d209      	bcs.n	806073c <ActCtrl_MainFunction+0xd0>
 8060728:	4b63      	ldr	r3, [pc, #396]	@ (80608b8 <ActCtrl_MainFunction+0x24c>)
 806072a:	681b      	ldr	r3, [r3, #0]
 806072c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 806072e:	4b61      	ldr	r3, [pc, #388]	@ (80608b4 <ActCtrl_MainFunction+0x248>)
 8060730:	781b      	ldrb	r3, [r3, #0]
 8060732:	4619      	mov	r1, r3
 8060734:	4b60      	ldr	r3, [pc, #384]	@ (80608b8 <ActCtrl_MainFunction+0x24c>)
 8060736:	681b      	ldr	r3, [r3, #0]
 8060738:	1a52      	subs	r2, r2, r1
 806073a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			/* Do nothing. */
		}
		/* Process the speed interval. */
		if(VehicleSpeed_VehicleState <= WiperSpeed_Vector[0]) wiperStatus_speedInterval = 1;
 806073c:	4b5f      	ldr	r3, [pc, #380]	@ (80608bc <ActCtrl_MainFunction+0x250>)
 806073e:	781a      	ldrb	r2, [r3, #0]
 8060740:	4b5f      	ldr	r3, [pc, #380]	@ (80608c0 <ActCtrl_MainFunction+0x254>)
 8060742:	781b      	ldrb	r3, [r3, #0]
 8060744:	429a      	cmp	r2, r3
 8060746:	d303      	bcc.n	8060750 <ActCtrl_MainFunction+0xe4>
 8060748:	4b5e      	ldr	r3, [pc, #376]	@ (80608c4 <ActCtrl_MainFunction+0x258>)
 806074a:	2201      	movs	r2, #1
 806074c:	701a      	strb	r2, [r3, #0]
 806074e:	e048      	b.n	80607e2 <ActCtrl_MainFunction+0x176>
		else if(VehicleSpeed_VehicleState > WiperSpeed_Vector[0] && VehicleSpeed_VehicleState <= WiperSpeed_Vector[1]) wiperStatus_speedInterval = 2;
 8060750:	4b5a      	ldr	r3, [pc, #360]	@ (80608bc <ActCtrl_MainFunction+0x250>)
 8060752:	781a      	ldrb	r2, [r3, #0]
 8060754:	4b5a      	ldr	r3, [pc, #360]	@ (80608c0 <ActCtrl_MainFunction+0x254>)
 8060756:	781b      	ldrb	r3, [r3, #0]
 8060758:	429a      	cmp	r2, r3
 806075a:	d209      	bcs.n	8060770 <ActCtrl_MainFunction+0x104>
 806075c:	4b57      	ldr	r3, [pc, #348]	@ (80608bc <ActCtrl_MainFunction+0x250>)
 806075e:	785a      	ldrb	r2, [r3, #1]
 8060760:	4b57      	ldr	r3, [pc, #348]	@ (80608c0 <ActCtrl_MainFunction+0x254>)
 8060762:	781b      	ldrb	r3, [r3, #0]
 8060764:	429a      	cmp	r2, r3
 8060766:	d303      	bcc.n	8060770 <ActCtrl_MainFunction+0x104>
 8060768:	4b56      	ldr	r3, [pc, #344]	@ (80608c4 <ActCtrl_MainFunction+0x258>)
 806076a:	2202      	movs	r2, #2
 806076c:	701a      	strb	r2, [r3, #0]
 806076e:	e038      	b.n	80607e2 <ActCtrl_MainFunction+0x176>
		else if(VehicleSpeed_VehicleState > WiperSpeed_Vector[1] && VehicleSpeed_VehicleState <= WiperSpeed_Vector[2]) wiperStatus_speedInterval = 3;
 8060770:	4b52      	ldr	r3, [pc, #328]	@ (80608bc <ActCtrl_MainFunction+0x250>)
 8060772:	785a      	ldrb	r2, [r3, #1]
 8060774:	4b52      	ldr	r3, [pc, #328]	@ (80608c0 <ActCtrl_MainFunction+0x254>)
 8060776:	781b      	ldrb	r3, [r3, #0]
 8060778:	429a      	cmp	r2, r3
 806077a:	d209      	bcs.n	8060790 <ActCtrl_MainFunction+0x124>
 806077c:	4b4f      	ldr	r3, [pc, #316]	@ (80608bc <ActCtrl_MainFunction+0x250>)
 806077e:	789a      	ldrb	r2, [r3, #2]
 8060780:	4b4f      	ldr	r3, [pc, #316]	@ (80608c0 <ActCtrl_MainFunction+0x254>)
 8060782:	781b      	ldrb	r3, [r3, #0]
 8060784:	429a      	cmp	r2, r3
 8060786:	d303      	bcc.n	8060790 <ActCtrl_MainFunction+0x124>
 8060788:	4b4e      	ldr	r3, [pc, #312]	@ (80608c4 <ActCtrl_MainFunction+0x258>)
 806078a:	2203      	movs	r2, #3
 806078c:	701a      	strb	r2, [r3, #0]
 806078e:	e028      	b.n	80607e2 <ActCtrl_MainFunction+0x176>
		else if(VehicleSpeed_VehicleState > WiperSpeed_Vector[2] && VehicleSpeed_VehicleState <= WiperSpeed_Vector[3]) wiperStatus_speedInterval = 4;
 8060790:	4b4a      	ldr	r3, [pc, #296]	@ (80608bc <ActCtrl_MainFunction+0x250>)
 8060792:	789a      	ldrb	r2, [r3, #2]
 8060794:	4b4a      	ldr	r3, [pc, #296]	@ (80608c0 <ActCtrl_MainFunction+0x254>)
 8060796:	781b      	ldrb	r3, [r3, #0]
 8060798:	429a      	cmp	r2, r3
 806079a:	d209      	bcs.n	80607b0 <ActCtrl_MainFunction+0x144>
 806079c:	4b47      	ldr	r3, [pc, #284]	@ (80608bc <ActCtrl_MainFunction+0x250>)
 806079e:	78da      	ldrb	r2, [r3, #3]
 80607a0:	4b47      	ldr	r3, [pc, #284]	@ (80608c0 <ActCtrl_MainFunction+0x254>)
 80607a2:	781b      	ldrb	r3, [r3, #0]
 80607a4:	429a      	cmp	r2, r3
 80607a6:	d303      	bcc.n	80607b0 <ActCtrl_MainFunction+0x144>
 80607a8:	4b46      	ldr	r3, [pc, #280]	@ (80608c4 <ActCtrl_MainFunction+0x258>)
 80607aa:	2204      	movs	r2, #4
 80607ac:	701a      	strb	r2, [r3, #0]
 80607ae:	e018      	b.n	80607e2 <ActCtrl_MainFunction+0x176>
		else if(VehicleSpeed_VehicleState > WiperSpeed_Vector[3] && VehicleSpeed_VehicleState <= WiperSpeed_Vector[4]) wiperStatus_speedInterval = 5;
 80607b0:	4b42      	ldr	r3, [pc, #264]	@ (80608bc <ActCtrl_MainFunction+0x250>)
 80607b2:	78da      	ldrb	r2, [r3, #3]
 80607b4:	4b42      	ldr	r3, [pc, #264]	@ (80608c0 <ActCtrl_MainFunction+0x254>)
 80607b6:	781b      	ldrb	r3, [r3, #0]
 80607b8:	429a      	cmp	r2, r3
 80607ba:	d209      	bcs.n	80607d0 <ActCtrl_MainFunction+0x164>
 80607bc:	4b3f      	ldr	r3, [pc, #252]	@ (80608bc <ActCtrl_MainFunction+0x250>)
 80607be:	791a      	ldrb	r2, [r3, #4]
 80607c0:	4b3f      	ldr	r3, [pc, #252]	@ (80608c0 <ActCtrl_MainFunction+0x254>)
 80607c2:	781b      	ldrb	r3, [r3, #0]
 80607c4:	429a      	cmp	r2, r3
 80607c6:	d303      	bcc.n	80607d0 <ActCtrl_MainFunction+0x164>
 80607c8:	4b3e      	ldr	r3, [pc, #248]	@ (80608c4 <ActCtrl_MainFunction+0x258>)
 80607ca:	2205      	movs	r2, #5
 80607cc:	701a      	strb	r2, [r3, #0]
 80607ce:	e008      	b.n	80607e2 <ActCtrl_MainFunction+0x176>
		else if(VehicleSpeed_VehicleState > WiperSpeed_Vector[4]) wiperStatus_speedInterval = 6;
 80607d0:	4b3a      	ldr	r3, [pc, #232]	@ (80608bc <ActCtrl_MainFunction+0x250>)
 80607d2:	791a      	ldrb	r2, [r3, #4]
 80607d4:	4b3a      	ldr	r3, [pc, #232]	@ (80608c0 <ActCtrl_MainFunction+0x254>)
 80607d6:	781b      	ldrb	r3, [r3, #0]
 80607d8:	429a      	cmp	r2, r3
 80607da:	d202      	bcs.n	80607e2 <ActCtrl_MainFunction+0x176>
 80607dc:	4b39      	ldr	r3, [pc, #228]	@ (80608c4 <ActCtrl_MainFunction+0x258>)
 80607de:	2206      	movs	r2, #6
 80607e0:	701a      	strb	r2, [r3, #0]
		else
		{
			/* Do nothing. */
		}
		/* If this is the first part of the wiping */
		if(wiperTravel_completed == 1)
 80607e2:	4b39      	ldr	r3, [pc, #228]	@ (80608c8 <ActCtrl_MainFunction+0x25c>)
 80607e4:	781b      	ldrb	r3, [r3, #0]
 80607e6:	2b01      	cmp	r3, #1
 80607e8:	d17c      	bne.n	80608e4 <ActCtrl_MainFunction+0x278>
		{
			/* Check the speed interval */
			if(wiperStatus_speedInterval < 6)
 80607ea:	4b36      	ldr	r3, [pc, #216]	@ (80608c4 <ActCtrl_MainFunction+0x258>)
 80607ec:	781b      	ldrb	r3, [r3, #0]
 80607ee:	2b05      	cmp	r3, #5
 80607f0:	d831      	bhi.n	8060856 <ActCtrl_MainFunction+0x1ea>
			{
				/* Update the PWM registers. */
				if(htim3.Instance->CCR3 < (1250 - Param_WindshieldWiperSlow_Calibration) && htim3.Instance->CCR4 < (1250 - Param_WindshieldWiperSlow_Calibration))
 80607f2:	4b31      	ldr	r3, [pc, #196]	@ (80608b8 <ActCtrl_MainFunction+0x24c>)
 80607f4:	681b      	ldr	r3, [r3, #0]
 80607f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80607f8:	4b34      	ldr	r3, [pc, #208]	@ (80608cc <ActCtrl_MainFunction+0x260>)
 80607fa:	781b      	ldrb	r3, [r3, #0]
 80607fc:	f5c3 639c 	rsb	r3, r3, #1248	@ 0x4e0
 8060800:	3302      	adds	r3, #2
 8060802:	429a      	cmp	r2, r3
 8060804:	d21e      	bcs.n	8060844 <ActCtrl_MainFunction+0x1d8>
 8060806:	4b2c      	ldr	r3, [pc, #176]	@ (80608b8 <ActCtrl_MainFunction+0x24c>)
 8060808:	681b      	ldr	r3, [r3, #0]
 806080a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 806080c:	4b2f      	ldr	r3, [pc, #188]	@ (80608cc <ActCtrl_MainFunction+0x260>)
 806080e:	781b      	ldrb	r3, [r3, #0]
 8060810:	f5c3 639c 	rsb	r3, r3, #1248	@ 0x4e0
 8060814:	3302      	adds	r3, #2
 8060816:	429a      	cmp	r2, r3
 8060818:	d214      	bcs.n	8060844 <ActCtrl_MainFunction+0x1d8>
				{
					htim3.Instance->CCR3 += Param_WindshieldWiperSlow_Calibration;
 806081a:	4b27      	ldr	r3, [pc, #156]	@ (80608b8 <ActCtrl_MainFunction+0x24c>)
 806081c:	681b      	ldr	r3, [r3, #0]
 806081e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8060820:	4b2a      	ldr	r3, [pc, #168]	@ (80608cc <ActCtrl_MainFunction+0x260>)
 8060822:	781b      	ldrb	r3, [r3, #0]
 8060824:	4619      	mov	r1, r3
 8060826:	4b24      	ldr	r3, [pc, #144]	@ (80608b8 <ActCtrl_MainFunction+0x24c>)
 8060828:	681b      	ldr	r3, [r3, #0]
 806082a:	440a      	add	r2, r1
 806082c:	63da      	str	r2, [r3, #60]	@ 0x3c
					htim3.Instance->CCR4 += Param_WindshieldWiperSlow_Calibration;
 806082e:	4b22      	ldr	r3, [pc, #136]	@ (80608b8 <ActCtrl_MainFunction+0x24c>)
 8060830:	681b      	ldr	r3, [r3, #0]
 8060832:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8060834:	4b25      	ldr	r3, [pc, #148]	@ (80608cc <ActCtrl_MainFunction+0x260>)
 8060836:	781b      	ldrb	r3, [r3, #0]
 8060838:	4619      	mov	r1, r3
 806083a:	4b1f      	ldr	r3, [pc, #124]	@ (80608b8 <ActCtrl_MainFunction+0x24c>)
 806083c:	681b      	ldr	r3, [r3, #0]
 806083e:	440a      	add	r2, r1
 8060840:	641a      	str	r2, [r3, #64]	@ 0x40
 8060842:	e0c0      	b.n	80609c6 <ActCtrl_MainFunction+0x35a>
				}
				else
				{
					/* Note that the first part of the wiping travel has been finished. */
					if(wiperTravel_completed == 1) wiperTravel_completed = 2;
 8060844:	4b20      	ldr	r3, [pc, #128]	@ (80608c8 <ActCtrl_MainFunction+0x25c>)
 8060846:	781b      	ldrb	r3, [r3, #0]
 8060848:	2b01      	cmp	r3, #1
 806084a:	f040 80bc 	bne.w	80609c6 <ActCtrl_MainFunction+0x35a>
 806084e:	4b1e      	ldr	r3, [pc, #120]	@ (80608c8 <ActCtrl_MainFunction+0x25c>)
 8060850:	2202      	movs	r2, #2
 8060852:	701a      	strb	r2, [r3, #0]
 8060854:	e0b7      	b.n	80609c6 <ActCtrl_MainFunction+0x35a>
				}
			}/* If the speed interval is the highest. */
			else
			{
				/* Update the PWM registers. */
				if(htim3.Instance->CCR3 < (1250 - Param_WindshieldWiperFast_Calibration) && htim3.Instance->CCR4 < (1250 - Param_WindshieldWiperFast_Calibration))
 8060856:	4b18      	ldr	r3, [pc, #96]	@ (80608b8 <ActCtrl_MainFunction+0x24c>)
 8060858:	681b      	ldr	r3, [r3, #0]
 806085a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 806085c:	4b1c      	ldr	r3, [pc, #112]	@ (80608d0 <ActCtrl_MainFunction+0x264>)
 806085e:	781b      	ldrb	r3, [r3, #0]
 8060860:	f5c3 639c 	rsb	r3, r3, #1248	@ 0x4e0
 8060864:	3302      	adds	r3, #2
 8060866:	429a      	cmp	r2, r3
 8060868:	d234      	bcs.n	80608d4 <ActCtrl_MainFunction+0x268>
 806086a:	4b13      	ldr	r3, [pc, #76]	@ (80608b8 <ActCtrl_MainFunction+0x24c>)
 806086c:	681b      	ldr	r3, [r3, #0]
 806086e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8060870:	4b17      	ldr	r3, [pc, #92]	@ (80608d0 <ActCtrl_MainFunction+0x264>)
 8060872:	781b      	ldrb	r3, [r3, #0]
 8060874:	f5c3 639c 	rsb	r3, r3, #1248	@ 0x4e0
 8060878:	3302      	adds	r3, #2
 806087a:	429a      	cmp	r2, r3
 806087c:	d22a      	bcs.n	80608d4 <ActCtrl_MainFunction+0x268>
				{
					htim3.Instance->CCR3 += Param_WindshieldWiperFast_Calibration;
 806087e:	4b0e      	ldr	r3, [pc, #56]	@ (80608b8 <ActCtrl_MainFunction+0x24c>)
 8060880:	681b      	ldr	r3, [r3, #0]
 8060882:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8060884:	4b12      	ldr	r3, [pc, #72]	@ (80608d0 <ActCtrl_MainFunction+0x264>)
 8060886:	781b      	ldrb	r3, [r3, #0]
 8060888:	4619      	mov	r1, r3
 806088a:	4b0b      	ldr	r3, [pc, #44]	@ (80608b8 <ActCtrl_MainFunction+0x24c>)
 806088c:	681b      	ldr	r3, [r3, #0]
 806088e:	440a      	add	r2, r1
 8060890:	63da      	str	r2, [r3, #60]	@ 0x3c
					htim3.Instance->CCR4 += Param_WindshieldWiperFast_Calibration;
 8060892:	4b09      	ldr	r3, [pc, #36]	@ (80608b8 <ActCtrl_MainFunction+0x24c>)
 8060894:	681b      	ldr	r3, [r3, #0]
 8060896:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8060898:	4b0d      	ldr	r3, [pc, #52]	@ (80608d0 <ActCtrl_MainFunction+0x264>)
 806089a:	781b      	ldrb	r3, [r3, #0]
 806089c:	4619      	mov	r1, r3
 806089e:	4b06      	ldr	r3, [pc, #24]	@ (80608b8 <ActCtrl_MainFunction+0x24c>)
 80608a0:	681b      	ldr	r3, [r3, #0]
 80608a2:	440a      	add	r2, r1
 80608a4:	641a      	str	r2, [r3, #64]	@ 0x40
 80608a6:	e08e      	b.n	80609c6 <ActCtrl_MainFunction+0x35a>
 80608a8:	2001061c 	.word	0x2001061c
 80608ac:	20010b70 	.word	0x20010b70
 80608b0:	200102a0 	.word	0x200102a0
 80608b4:	2001019e 	.word	0x2001019e
 80608b8:	20010c24 	.word	0x20010c24
 80608bc:	20010018 	.word	0x20010018
 80608c0:	200101ee 	.word	0x200101ee
 80608c4:	200101ba 	.word	0x200101ba
 80608c8:	200101bb 	.word	0x200101bb
 80608cc:	2001019c 	.word	0x2001019c
 80608d0:	2001019d 	.word	0x2001019d
				}
				else
				{
					/* Note that the first part of the wiping travel has been finished. */
					if(wiperTravel_completed == 1) wiperTravel_completed = 2;
 80608d4:	4b84      	ldr	r3, [pc, #528]	@ (8060ae8 <ActCtrl_MainFunction+0x47c>)
 80608d6:	781b      	ldrb	r3, [r3, #0]
 80608d8:	2b01      	cmp	r3, #1
 80608da:	d174      	bne.n	80609c6 <ActCtrl_MainFunction+0x35a>
 80608dc:	4b82      	ldr	r3, [pc, #520]	@ (8060ae8 <ActCtrl_MainFunction+0x47c>)
 80608de:	2202      	movs	r2, #2
 80608e0:	701a      	strb	r2, [r3, #0]
 80608e2:	e070      	b.n	80609c6 <ActCtrl_MainFunction+0x35a>
						/* Do nothing. */
					}
				}
			}
		}/* If this is the second part of the wiping. */
		else if(wiperTravel_completed == 2)
 80608e4:	4b80      	ldr	r3, [pc, #512]	@ (8060ae8 <ActCtrl_MainFunction+0x47c>)
 80608e6:	781b      	ldrb	r3, [r3, #0]
 80608e8:	2b02      	cmp	r3, #2
 80608ea:	d16c      	bne.n	80609c6 <ActCtrl_MainFunction+0x35a>
		{
			/* Check the speed interval */
			if(wiperStatus_speedInterval < 6)
 80608ec:	4b7f      	ldr	r3, [pc, #508]	@ (8060aec <ActCtrl_MainFunction+0x480>)
 80608ee:	781b      	ldrb	r3, [r3, #0]
 80608f0:	2b05      	cmp	r3, #5
 80608f2:	d832      	bhi.n	806095a <ActCtrl_MainFunction+0x2ee>
			{
				/* Update the PWM registers. */
				if(htim3.Instance->CCR3 > Param_WindshieldWiperSlow_Calibration && htim3.Instance->CCR4 > Param_WindshieldWiperSlow_Calibration)
 80608f4:	4b7e      	ldr	r3, [pc, #504]	@ (8060af0 <ActCtrl_MainFunction+0x484>)
 80608f6:	681b      	ldr	r3, [r3, #0]
 80608f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80608fa:	4a7e      	ldr	r2, [pc, #504]	@ (8060af4 <ActCtrl_MainFunction+0x488>)
 80608fc:	7812      	ldrb	r2, [r2, #0]
 80608fe:	4293      	cmp	r3, r2
 8060900:	d91b      	bls.n	806093a <ActCtrl_MainFunction+0x2ce>
 8060902:	4b7b      	ldr	r3, [pc, #492]	@ (8060af0 <ActCtrl_MainFunction+0x484>)
 8060904:	681b      	ldr	r3, [r3, #0]
 8060906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8060908:	4a7a      	ldr	r2, [pc, #488]	@ (8060af4 <ActCtrl_MainFunction+0x488>)
 806090a:	7812      	ldrb	r2, [r2, #0]
 806090c:	4293      	cmp	r3, r2
 806090e:	d914      	bls.n	806093a <ActCtrl_MainFunction+0x2ce>
				{
					htim3.Instance->CCR3 -= Param_WindshieldWiperSlow_Calibration;
 8060910:	4b77      	ldr	r3, [pc, #476]	@ (8060af0 <ActCtrl_MainFunction+0x484>)
 8060912:	681b      	ldr	r3, [r3, #0]
 8060914:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8060916:	4b77      	ldr	r3, [pc, #476]	@ (8060af4 <ActCtrl_MainFunction+0x488>)
 8060918:	781b      	ldrb	r3, [r3, #0]
 806091a:	4619      	mov	r1, r3
 806091c:	4b74      	ldr	r3, [pc, #464]	@ (8060af0 <ActCtrl_MainFunction+0x484>)
 806091e:	681b      	ldr	r3, [r3, #0]
 8060920:	1a52      	subs	r2, r2, r1
 8060922:	63da      	str	r2, [r3, #60]	@ 0x3c
					htim3.Instance->CCR4 -= Param_WindshieldWiperSlow_Calibration;
 8060924:	4b72      	ldr	r3, [pc, #456]	@ (8060af0 <ActCtrl_MainFunction+0x484>)
 8060926:	681b      	ldr	r3, [r3, #0]
 8060928:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 806092a:	4b72      	ldr	r3, [pc, #456]	@ (8060af4 <ActCtrl_MainFunction+0x488>)
 806092c:	781b      	ldrb	r3, [r3, #0]
 806092e:	4619      	mov	r1, r3
 8060930:	4b6f      	ldr	r3, [pc, #444]	@ (8060af0 <ActCtrl_MainFunction+0x484>)
 8060932:	681b      	ldr	r3, [r3, #0]
 8060934:	1a52      	subs	r2, r2, r1
 8060936:	641a      	str	r2, [r3, #64]	@ 0x40
 8060938:	e045      	b.n	80609c6 <ActCtrl_MainFunction+0x35a>
				}
				else
				{
					/* Note that the second part of the wiping travel has been finished. */
					if(wiperTravel_completed == 2)
 806093a:	4b6b      	ldr	r3, [pc, #428]	@ (8060ae8 <ActCtrl_MainFunction+0x47c>)
 806093c:	781b      	ldrb	r3, [r3, #0]
 806093e:	2b02      	cmp	r3, #2
 8060940:	d141      	bne.n	80609c6 <ActCtrl_MainFunction+0x35a>
					{
						wiperTravel_completed = 0;
 8060942:	4b69      	ldr	r3, [pc, #420]	@ (8060ae8 <ActCtrl_MainFunction+0x47c>)
 8060944:	2200      	movs	r2, #0
 8060946:	701a      	strb	r2, [r3, #0]
						htim3.Instance->CCR3 = 0;
 8060948:	4b69      	ldr	r3, [pc, #420]	@ (8060af0 <ActCtrl_MainFunction+0x484>)
 806094a:	681b      	ldr	r3, [r3, #0]
 806094c:	2200      	movs	r2, #0
 806094e:	63da      	str	r2, [r3, #60]	@ 0x3c
						htim3.Instance->CCR4 = 0;
 8060950:	4b67      	ldr	r3, [pc, #412]	@ (8060af0 <ActCtrl_MainFunction+0x484>)
 8060952:	681b      	ldr	r3, [r3, #0]
 8060954:	2200      	movs	r2, #0
 8060956:	641a      	str	r2, [r3, #64]	@ 0x40
 8060958:	e035      	b.n	80609c6 <ActCtrl_MainFunction+0x35a>
					{
						/* Do nothing. */
					}
				}
			}/* If the speed interval is the highest. */
			else if(wiperStatus_speedInterval == 6)
 806095a:	4b64      	ldr	r3, [pc, #400]	@ (8060aec <ActCtrl_MainFunction+0x480>)
 806095c:	781b      	ldrb	r3, [r3, #0]
 806095e:	2b06      	cmp	r3, #6
 8060960:	d131      	bne.n	80609c6 <ActCtrl_MainFunction+0x35a>
			{
				/* Update the PWM registers. */
				if(htim3.Instance->CCR3 > Param_WindshieldWiperFast_Calibration && htim3.Instance->CCR4 > Param_WindshieldWiperFast_Calibration)
 8060962:	4b63      	ldr	r3, [pc, #396]	@ (8060af0 <ActCtrl_MainFunction+0x484>)
 8060964:	681b      	ldr	r3, [r3, #0]
 8060966:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8060968:	4a63      	ldr	r2, [pc, #396]	@ (8060af8 <ActCtrl_MainFunction+0x48c>)
 806096a:	7812      	ldrb	r2, [r2, #0]
 806096c:	4293      	cmp	r3, r2
 806096e:	d91b      	bls.n	80609a8 <ActCtrl_MainFunction+0x33c>
 8060970:	4b5f      	ldr	r3, [pc, #380]	@ (8060af0 <ActCtrl_MainFunction+0x484>)
 8060972:	681b      	ldr	r3, [r3, #0]
 8060974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8060976:	4a60      	ldr	r2, [pc, #384]	@ (8060af8 <ActCtrl_MainFunction+0x48c>)
 8060978:	7812      	ldrb	r2, [r2, #0]
 806097a:	4293      	cmp	r3, r2
 806097c:	d914      	bls.n	80609a8 <ActCtrl_MainFunction+0x33c>
				{
					htim3.Instance->CCR3 -= Param_WindshieldWiperFast_Calibration;
 806097e:	4b5c      	ldr	r3, [pc, #368]	@ (8060af0 <ActCtrl_MainFunction+0x484>)
 8060980:	681b      	ldr	r3, [r3, #0]
 8060982:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8060984:	4b5c      	ldr	r3, [pc, #368]	@ (8060af8 <ActCtrl_MainFunction+0x48c>)
 8060986:	781b      	ldrb	r3, [r3, #0]
 8060988:	4619      	mov	r1, r3
 806098a:	4b59      	ldr	r3, [pc, #356]	@ (8060af0 <ActCtrl_MainFunction+0x484>)
 806098c:	681b      	ldr	r3, [r3, #0]
 806098e:	1a52      	subs	r2, r2, r1
 8060990:	63da      	str	r2, [r3, #60]	@ 0x3c
					htim3.Instance->CCR4 -= Param_WindshieldWiperFast_Calibration;
 8060992:	4b57      	ldr	r3, [pc, #348]	@ (8060af0 <ActCtrl_MainFunction+0x484>)
 8060994:	681b      	ldr	r3, [r3, #0]
 8060996:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8060998:	4b57      	ldr	r3, [pc, #348]	@ (8060af8 <ActCtrl_MainFunction+0x48c>)
 806099a:	781b      	ldrb	r3, [r3, #0]
 806099c:	4619      	mov	r1, r3
 806099e:	4b54      	ldr	r3, [pc, #336]	@ (8060af0 <ActCtrl_MainFunction+0x484>)
 80609a0:	681b      	ldr	r3, [r3, #0]
 80609a2:	1a52      	subs	r2, r2, r1
 80609a4:	641a      	str	r2, [r3, #64]	@ 0x40
 80609a6:	e00e      	b.n	80609c6 <ActCtrl_MainFunction+0x35a>
				}
				else
				{
					/* Note that the second part of the wiping travel has been finished. */
					if(wiperTravel_completed == 2)
 80609a8:	4b4f      	ldr	r3, [pc, #316]	@ (8060ae8 <ActCtrl_MainFunction+0x47c>)
 80609aa:	781b      	ldrb	r3, [r3, #0]
 80609ac:	2b02      	cmp	r3, #2
 80609ae:	d10a      	bne.n	80609c6 <ActCtrl_MainFunction+0x35a>
					{
						wiperTravel_completed = 0;
 80609b0:	4b4d      	ldr	r3, [pc, #308]	@ (8060ae8 <ActCtrl_MainFunction+0x47c>)
 80609b2:	2200      	movs	r2, #0
 80609b4:	701a      	strb	r2, [r3, #0]
						htim3.Instance->CCR3 = 0;
 80609b6:	4b4e      	ldr	r3, [pc, #312]	@ (8060af0 <ActCtrl_MainFunction+0x484>)
 80609b8:	681b      	ldr	r3, [r3, #0]
 80609ba:	2200      	movs	r2, #0
 80609bc:	63da      	str	r2, [r3, #60]	@ 0x3c
						htim3.Instance->CCR4 = 0;
 80609be:	4b4c      	ldr	r3, [pc, #304]	@ (8060af0 <ActCtrl_MainFunction+0x484>)
 80609c0:	681b      	ldr	r3, [r3, #0]
 80609c2:	2200      	movs	r2, #0
 80609c4:	641a      	str	r2, [r3, #64]	@ 0x40
		else
		{
			/* Do nothing. */
		}
		/* If auto mode is selected. */
		if(WiperStock_VehicleState == 1 && StatusList_OutputValue[RSNS_ARRPOS] >= 3000)
 80609c6:	4b4d      	ldr	r3, [pc, #308]	@ (8060afc <ActCtrl_MainFunction+0x490>)
 80609c8:	781b      	ldrb	r3, [r3, #0]
 80609ca:	2b01      	cmp	r3, #1
 80609cc:	d10d      	bne.n	80609ea <ActCtrl_MainFunction+0x37e>
 80609ce:	4b4c      	ldr	r3, [pc, #304]	@ (8060b00 <ActCtrl_MainFunction+0x494>)
 80609d0:	699b      	ldr	r3, [r3, #24]
 80609d2:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80609d6:	4293      	cmp	r3, r2
 80609d8:	d907      	bls.n	80609ea <ActCtrl_MainFunction+0x37e>
		{
			if(wiperTravel_completed == 0) wiperTravel_completed = 1;
 80609da:	4b43      	ldr	r3, [pc, #268]	@ (8060ae8 <ActCtrl_MainFunction+0x47c>)
 80609dc:	781b      	ldrb	r3, [r3, #0]
 80609de:	2b00      	cmp	r3, #0
 80609e0:	d151      	bne.n	8060a86 <ActCtrl_MainFunction+0x41a>
 80609e2:	4b41      	ldr	r3, [pc, #260]	@ (8060ae8 <ActCtrl_MainFunction+0x47c>)
 80609e4:	2201      	movs	r2, #1
 80609e6:	701a      	strb	r2, [r3, #0]
 80609e8:	e04d      	b.n	8060a86 <ActCtrl_MainFunction+0x41a>
			else
			{
				/* Do nothing. */
			}
		}/* Else if the manual mode is selected. */
		else if(WiperStock_VehicleState == 2 || WiperStock_VehicleState == 3)
 80609ea:	4b44      	ldr	r3, [pc, #272]	@ (8060afc <ActCtrl_MainFunction+0x490>)
 80609ec:	781b      	ldrb	r3, [r3, #0]
 80609ee:	2b02      	cmp	r3, #2
 80609f0:	d003      	beq.n	80609fa <ActCtrl_MainFunction+0x38e>
 80609f2:	4b42      	ldr	r3, [pc, #264]	@ (8060afc <ActCtrl_MainFunction+0x490>)
 80609f4:	781b      	ldrb	r3, [r3, #0]
 80609f6:	2b03      	cmp	r3, #3
 80609f8:	d12d      	bne.n	8060a56 <ActCtrl_MainFunction+0x3ea>
		{
			/* Check the previous state and re-init the delta time. */
			if(previousStatus_wiperTravel_completed != wiperTravel_completed)
 80609fa:	4b42      	ldr	r3, [pc, #264]	@ (8060b04 <ActCtrl_MainFunction+0x498>)
 80609fc:	781a      	ldrb	r2, [r3, #0]
 80609fe:	4b3a      	ldr	r3, [pc, #232]	@ (8060ae8 <ActCtrl_MainFunction+0x47c>)
 8060a00:	781b      	ldrb	r3, [r3, #0]
 8060a02:	429a      	cmp	r2, r3
 8060a04:	d006      	beq.n	8060a14 <ActCtrl_MainFunction+0x3a8>
			{
				previousStatus_wiperTravel_completed = wiperTravel_completed;
 8060a06:	4b38      	ldr	r3, [pc, #224]	@ (8060ae8 <ActCtrl_MainFunction+0x47c>)
 8060a08:	781a      	ldrb	r2, [r3, #0]
 8060a0a:	4b3e      	ldr	r3, [pc, #248]	@ (8060b04 <ActCtrl_MainFunction+0x498>)
 8060a0c:	701a      	strb	r2, [r3, #0]
				wiperDebounce_timer = 0;
 8060a0e:	4b3e      	ldr	r3, [pc, #248]	@ (8060b08 <ActCtrl_MainFunction+0x49c>)
 8060a10:	2200      	movs	r2, #0
 8060a12:	601a      	str	r2, [r3, #0]
			else
			{
				/* Do nothing. */
			}
			/* Take a time stamp. */
			if(wiperDebounce_timer == 0) wiperDebounce_timer = ActCtrl_MainCounter;
 8060a14:	4b3c      	ldr	r3, [pc, #240]	@ (8060b08 <ActCtrl_MainFunction+0x49c>)
 8060a16:	681b      	ldr	r3, [r3, #0]
 8060a18:	2b00      	cmp	r3, #0
 8060a1a:	d103      	bne.n	8060a24 <ActCtrl_MainFunction+0x3b8>
 8060a1c:	4b3b      	ldr	r3, [pc, #236]	@ (8060b0c <ActCtrl_MainFunction+0x4a0>)
 8060a1e:	681b      	ldr	r3, [r3, #0]
 8060a20:	4a39      	ldr	r2, [pc, #228]	@ (8060b08 <ActCtrl_MainFunction+0x49c>)
 8060a22:	6013      	str	r3, [r2, #0]
			else
			{
				/* Do nothing. */
			}
			/* If the time period has elapsed, start a new wiping process. */
			if(ActCtrl_MainCounter - wiperDebounce_timer >= WiperDelay_Vector[WiperStock_VehicleState - 2][wiperStatus_speedInterval - 1][0]) wiperTravel_completed = 1;
 8060a24:	4b39      	ldr	r3, [pc, #228]	@ (8060b0c <ActCtrl_MainFunction+0x4a0>)
 8060a26:	681a      	ldr	r2, [r3, #0]
 8060a28:	4b37      	ldr	r3, [pc, #220]	@ (8060b08 <ActCtrl_MainFunction+0x49c>)
 8060a2a:	681b      	ldr	r3, [r3, #0]
 8060a2c:	1ad1      	subs	r1, r2, r3
 8060a2e:	4b33      	ldr	r3, [pc, #204]	@ (8060afc <ActCtrl_MainFunction+0x490>)
 8060a30:	781b      	ldrb	r3, [r3, #0]
 8060a32:	1e9a      	subs	r2, r3, #2
 8060a34:	4b2d      	ldr	r3, [pc, #180]	@ (8060aec <ActCtrl_MainFunction+0x480>)
 8060a36:	781b      	ldrb	r3, [r3, #0]
 8060a38:	1e58      	subs	r0, r3, #1
 8060a3a:	4c35      	ldr	r4, [pc, #212]	@ (8060b10 <ActCtrl_MainFunction+0x4a4>)
 8060a3c:	4613      	mov	r3, r2
 8060a3e:	005b      	lsls	r3, r3, #1
 8060a40:	4413      	add	r3, r2
 8060a42:	005b      	lsls	r3, r3, #1
 8060a44:	4403      	add	r3, r0
 8060a46:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 8060a4a:	4299      	cmp	r1, r3
 8060a4c:	d31b      	bcc.n	8060a86 <ActCtrl_MainFunction+0x41a>
 8060a4e:	4b26      	ldr	r3, [pc, #152]	@ (8060ae8 <ActCtrl_MainFunction+0x47c>)
 8060a50:	2201      	movs	r2, #1
 8060a52:	701a      	strb	r2, [r3, #0]
 8060a54:	e017      	b.n	8060a86 <ActCtrl_MainFunction+0x41a>
			else
			{
				/* Do nothing. */
			}
		}/* Washing command. */
		else if(WiperStock_VehicleState == 4)
 8060a56:	4b29      	ldr	r3, [pc, #164]	@ (8060afc <ActCtrl_MainFunction+0x490>)
 8060a58:	781b      	ldrb	r3, [r3, #0]
 8060a5a:	2b04      	cmp	r3, #4
 8060a5c:	d10d      	bne.n	8060a7a <ActCtrl_MainFunction+0x40e>
		{
			/* Initialize the time stamp and the washing counter. */
			if(washingTimeStamp == 0)
 8060a5e:	4b2d      	ldr	r3, [pc, #180]	@ (8060b14 <ActCtrl_MainFunction+0x4a8>)
 8060a60:	681b      	ldr	r3, [r3, #0]
 8060a62:	2b00      	cmp	r3, #0
 8060a64:	d10f      	bne.n	8060a86 <ActCtrl_MainFunction+0x41a>
			{
				washingTimeStamp = ActCtrl_MainCounter;
 8060a66:	4b29      	ldr	r3, [pc, #164]	@ (8060b0c <ActCtrl_MainFunction+0x4a0>)
 8060a68:	681b      	ldr	r3, [r3, #0]
 8060a6a:	4a2a      	ldr	r2, [pc, #168]	@ (8060b14 <ActCtrl_MainFunction+0x4a8>)
 8060a6c:	6013      	str	r3, [r2, #0]
				washingCounter = WashingWipingCounter_CodingData;
 8060a6e:	4b2a      	ldr	r3, [pc, #168]	@ (8060b18 <ActCtrl_MainFunction+0x4ac>)
 8060a70:	781b      	ldrb	r3, [r3, #0]
 8060a72:	461a      	mov	r2, r3
 8060a74:	4b29      	ldr	r3, [pc, #164]	@ (8060b1c <ActCtrl_MainFunction+0x4b0>)
 8060a76:	601a      	str	r2, [r3, #0]
 8060a78:	e005      	b.n	8060a86 <ActCtrl_MainFunction+0x41a>
			}
		}
		else
		{
			/* Reset the delta time. */
			wiperDebounce_timer = 0;
 8060a7a:	4b23      	ldr	r3, [pc, #140]	@ (8060b08 <ActCtrl_MainFunction+0x49c>)
 8060a7c:	2200      	movs	r2, #0
 8060a7e:	601a      	str	r2, [r3, #0]
			/* Reset the previous state. */
			previousStatus_wiperTravel_completed = 0;
 8060a80:	4b20      	ldr	r3, [pc, #128]	@ (8060b04 <ActCtrl_MainFunction+0x498>)
 8060a82:	2200      	movs	r2, #0
 8060a84:	701a      	strb	r2, [r3, #0]
		}
		/* Wait before wiping. */
		if(((ActCtrl_MainCounter - washingTimeStamp) < WindshieldWashing_CodingData) &&
 8060a86:	4b21      	ldr	r3, [pc, #132]	@ (8060b0c <ActCtrl_MainFunction+0x4a0>)
 8060a88:	681a      	ldr	r2, [r3, #0]
 8060a8a:	4b22      	ldr	r3, [pc, #136]	@ (8060b14 <ActCtrl_MainFunction+0x4a8>)
 8060a8c:	681b      	ldr	r3, [r3, #0]
 8060a8e:	1ad3      	subs	r3, r2, r3
 8060a90:	4a23      	ldr	r2, [pc, #140]	@ (8060b20 <ActCtrl_MainFunction+0x4b4>)
 8060a92:	7812      	ldrb	r2, [r2, #0]
 8060a94:	4293      	cmp	r3, r2
 8060a96:	d20f      	bcs.n	8060ab8 <ActCtrl_MainFunction+0x44c>
				(washingTimeStamp != 0))
 8060a98:	4b1e      	ldr	r3, [pc, #120]	@ (8060b14 <ActCtrl_MainFunction+0x4a8>)
 8060a9a:	681b      	ldr	r3, [r3, #0]
		if(((ActCtrl_MainCounter - washingTimeStamp) < WindshieldWashing_CodingData) &&
 8060a9c:	2b00      	cmp	r3, #0
 8060a9e:	d00b      	beq.n	8060ab8 <ActCtrl_MainFunction+0x44c>
		{
			/* Start a new wipe cycle. */
			if(wiperTravel_completed == 0)
 8060aa0:	4b11      	ldr	r3, [pc, #68]	@ (8060ae8 <ActCtrl_MainFunction+0x47c>)
 8060aa2:	781b      	ldrb	r3, [r3, #0]
 8060aa4:	2b00      	cmp	r3, #0
 8060aa6:	d107      	bne.n	8060ab8 <ActCtrl_MainFunction+0x44c>
			{
				wiperTravel_completed = 1;
 8060aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8060ae8 <ActCtrl_MainFunction+0x47c>)
 8060aaa:	2201      	movs	r2, #1
 8060aac:	701a      	strb	r2, [r3, #0]
				washingCounter--;
 8060aae:	4b1b      	ldr	r3, [pc, #108]	@ (8060b1c <ActCtrl_MainFunction+0x4b0>)
 8060ab0:	681b      	ldr	r3, [r3, #0]
 8060ab2:	3b01      	subs	r3, #1
 8060ab4:	4a19      	ldr	r2, [pc, #100]	@ (8060b1c <ActCtrl_MainFunction+0x4b0>)
 8060ab6:	6013      	str	r3, [r2, #0]
		else
		{
			/* Do nothing. */
		}
		/* Start a new wipe cycle. */
		if(wiperTravel_completed == 0 && washingCounter > 0)
 8060ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8060ae8 <ActCtrl_MainFunction+0x47c>)
 8060aba:	781b      	ldrb	r3, [r3, #0]
 8060abc:	2b00      	cmp	r3, #0
 8060abe:	d10b      	bne.n	8060ad8 <ActCtrl_MainFunction+0x46c>
 8060ac0:	4b16      	ldr	r3, [pc, #88]	@ (8060b1c <ActCtrl_MainFunction+0x4b0>)
 8060ac2:	681b      	ldr	r3, [r3, #0]
 8060ac4:	2b00      	cmp	r3, #0
 8060ac6:	d007      	beq.n	8060ad8 <ActCtrl_MainFunction+0x46c>
		{
			wiperTravel_completed = 1;
 8060ac8:	4b07      	ldr	r3, [pc, #28]	@ (8060ae8 <ActCtrl_MainFunction+0x47c>)
 8060aca:	2201      	movs	r2, #1
 8060acc:	701a      	strb	r2, [r3, #0]
			washingCounter--;
 8060ace:	4b13      	ldr	r3, [pc, #76]	@ (8060b1c <ActCtrl_MainFunction+0x4b0>)
 8060ad0:	681b      	ldr	r3, [r3, #0]
 8060ad2:	3b01      	subs	r3, #1
 8060ad4:	4a11      	ldr	r2, [pc, #68]	@ (8060b1c <ActCtrl_MainFunction+0x4b0>)
 8060ad6:	6013      	str	r3, [r2, #0]
		else
		{
			/* Do nothing. */
		}
		/* If enough wiping have been performed, finish the sequence. */
		if(washingCounter == 0) washingTimeStamp = 0;
 8060ad8:	4b10      	ldr	r3, [pc, #64]	@ (8060b1c <ActCtrl_MainFunction+0x4b0>)
 8060ada:	681b      	ldr	r3, [r3, #0]
 8060adc:	2b00      	cmp	r3, #0
 8060ade:	d13d      	bne.n	8060b5c <ActCtrl_MainFunction+0x4f0>
 8060ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8060b14 <ActCtrl_MainFunction+0x4a8>)
 8060ae2:	2200      	movs	r2, #0
 8060ae4:	601a      	str	r2, [r3, #0]
 8060ae6:	e039      	b.n	8060b5c <ActCtrl_MainFunction+0x4f0>
 8060ae8:	200101bb 	.word	0x200101bb
 8060aec:	200101ba 	.word	0x200101ba
 8060af0:	20010c24 	.word	0x20010c24
 8060af4:	2001019c 	.word	0x2001019c
 8060af8:	2001019d 	.word	0x2001019d
 8060afc:	200101ef 	.word	0x200101ef
 8060b00:	200102a0 	.word	0x200102a0
 8060b04:	200101bc 	.word	0x200101bc
 8060b08:	200101c0 	.word	0x200101c0
 8060b0c:	200101c4 	.word	0x200101c4
 8060b10:	20010000 	.word	0x20010000
 8060b14:	200101c8 	.word	0x200101c8
 8060b18:	200101a0 	.word	0x200101a0
 8060b1c:	200101cc 	.word	0x200101cc
 8060b20:	2001019f 	.word	0x2001019f
		}
	}
	else
	{
		/* Reset registers and variables if error is detected. */
		htim3.Instance->CCR1 = 0;
 8060b24:	4b4b      	ldr	r3, [pc, #300]	@ (8060c54 <ActCtrl_MainFunction+0x5e8>)
 8060b26:	681b      	ldr	r3, [r3, #0]
 8060b28:	2200      	movs	r2, #0
 8060b2a:	635a      	str	r2, [r3, #52]	@ 0x34
		htim3.Instance->CCR2 = 0;
 8060b2c:	4b49      	ldr	r3, [pc, #292]	@ (8060c54 <ActCtrl_MainFunction+0x5e8>)
 8060b2e:	681b      	ldr	r3, [r3, #0]
 8060b30:	2200      	movs	r2, #0
 8060b32:	639a      	str	r2, [r3, #56]	@ 0x38
		htim3.Instance->CCR3 = 0;
 8060b34:	4b47      	ldr	r3, [pc, #284]	@ (8060c54 <ActCtrl_MainFunction+0x5e8>)
 8060b36:	681b      	ldr	r3, [r3, #0]
 8060b38:	2200      	movs	r2, #0
 8060b3a:	63da      	str	r2, [r3, #60]	@ 0x3c
		htim3.Instance->CCR4 = 0;
 8060b3c:	4b45      	ldr	r3, [pc, #276]	@ (8060c54 <ActCtrl_MainFunction+0x5e8>)
 8060b3e:	681b      	ldr	r3, [r3, #0]
 8060b40:	2200      	movs	r2, #0
 8060b42:	641a      	str	r2, [r3, #64]	@ 0x40
		wiperDebounce_timer = 0;
 8060b44:	4b44      	ldr	r3, [pc, #272]	@ (8060c58 <ActCtrl_MainFunction+0x5ec>)
 8060b46:	2200      	movs	r2, #0
 8060b48:	601a      	str	r2, [r3, #0]
		wiperTravel_completed = 0;
 8060b4a:	4b44      	ldr	r3, [pc, #272]	@ (8060c5c <ActCtrl_MainFunction+0x5f0>)
 8060b4c:	2200      	movs	r2, #0
 8060b4e:	701a      	strb	r2, [r3, #0]
		previousStatus_wiperTravel_completed = 0;
 8060b50:	4b43      	ldr	r3, [pc, #268]	@ (8060c60 <ActCtrl_MainFunction+0x5f4>)
 8060b52:	2200      	movs	r2, #0
 8060b54:	701a      	strb	r2, [r3, #0]
		wiperStatus_speedInterval = 0;
 8060b56:	4b43      	ldr	r3, [pc, #268]	@ (8060c64 <ActCtrl_MainFunction+0x5f8>)
 8060b58:	2200      	movs	r2, #0
 8060b5a:	701a      	strb	r2, [r3, #0]
	}
	/* Update the variables that are sent on CAN. */
	CmdList_RawValue[WWR_ARRPOS] = (htim3.Instance->CCR3 * 255) / 1250;
 8060b5c:	4b3d      	ldr	r3, [pc, #244]	@ (8060c54 <ActCtrl_MainFunction+0x5e8>)
 8060b5e:	681b      	ldr	r3, [r3, #0]
 8060b60:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8060b62:	4613      	mov	r3, r2
 8060b64:	021b      	lsls	r3, r3, #8
 8060b66:	1a9b      	subs	r3, r3, r2
 8060b68:	4a3f      	ldr	r2, [pc, #252]	@ (8060c68 <ActCtrl_MainFunction+0x5fc>)
 8060b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8060b6e:	0a9b      	lsrs	r3, r3, #10
 8060b70:	b2da      	uxtb	r2, r3
 8060b72:	4b3e      	ldr	r3, [pc, #248]	@ (8060c6c <ActCtrl_MainFunction+0x600>)
 8060b74:	701a      	strb	r2, [r3, #0]
	CmdList_RawValue[WWL_ARRPOS] = (htim3.Instance->CCR4  * 255) / 1250;
 8060b76:	4b37      	ldr	r3, [pc, #220]	@ (8060c54 <ActCtrl_MainFunction+0x5e8>)
 8060b78:	681b      	ldr	r3, [r3, #0]
 8060b7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8060b7c:	4613      	mov	r3, r2
 8060b7e:	021b      	lsls	r3, r3, #8
 8060b80:	1a9b      	subs	r3, r3, r2
 8060b82:	4a39      	ldr	r2, [pc, #228]	@ (8060c68 <ActCtrl_MainFunction+0x5fc>)
 8060b84:	fba2 2303 	umull	r2, r3, r2, r3
 8060b88:	0a9b      	lsrs	r3, r3, #10
 8060b8a:	b2da      	uxtb	r2, r3
 8060b8c:	4b37      	ldr	r3, [pc, #220]	@ (8060c6c <ActCtrl_MainFunction+0x600>)
 8060b8e:	705a      	strb	r2, [r3, #1]
	CmdList_RawValue[DLL_ARRPOS] = (htim3.Instance->CCR1  * 255) / 1250;
 8060b90:	4b30      	ldr	r3, [pc, #192]	@ (8060c54 <ActCtrl_MainFunction+0x5e8>)
 8060b92:	681b      	ldr	r3, [r3, #0]
 8060b94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8060b96:	4613      	mov	r3, r2
 8060b98:	021b      	lsls	r3, r3, #8
 8060b9a:	1a9b      	subs	r3, r3, r2
 8060b9c:	4a32      	ldr	r2, [pc, #200]	@ (8060c68 <ActCtrl_MainFunction+0x5fc>)
 8060b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8060ba2:	0a9b      	lsrs	r3, r3, #10
 8060ba4:	b2da      	uxtb	r2, r3
 8060ba6:	4b31      	ldr	r3, [pc, #196]	@ (8060c6c <ActCtrl_MainFunction+0x600>)
 8060ba8:	709a      	strb	r2, [r3, #2]
	CmdList_RawValue[DLR_ARRPOS] = (htim3.Instance->CCR2  * 255) / 1250;
 8060baa:	4b2a      	ldr	r3, [pc, #168]	@ (8060c54 <ActCtrl_MainFunction+0x5e8>)
 8060bac:	681b      	ldr	r3, [r3, #0]
 8060bae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8060bb0:	4613      	mov	r3, r2
 8060bb2:	021b      	lsls	r3, r3, #8
 8060bb4:	1a9b      	subs	r3, r3, r2
 8060bb6:	4a2c      	ldr	r2, [pc, #176]	@ (8060c68 <ActCtrl_MainFunction+0x5fc>)
 8060bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8060bbc:	0a9b      	lsrs	r3, r3, #10
 8060bbe:	b2da      	uxtb	r2, r3
 8060bc0:	4b2a      	ldr	r3, [pc, #168]	@ (8060c6c <ActCtrl_MainFunction+0x600>)
 8060bc2:	70da      	strb	r2, [r3, #3]
	CmdList_RawValue[CLIMA_ARRPOS] = (htim2.Instance->CCR1 * 255) / 100;
 8060bc4:	4b2a      	ldr	r3, [pc, #168]	@ (8060c70 <ActCtrl_MainFunction+0x604>)
 8060bc6:	681b      	ldr	r3, [r3, #0]
 8060bc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8060bca:	4613      	mov	r3, r2
 8060bcc:	021b      	lsls	r3, r3, #8
 8060bce:	1a9b      	subs	r3, r3, r2
 8060bd0:	4a28      	ldr	r2, [pc, #160]	@ (8060c74 <ActCtrl_MainFunction+0x608>)
 8060bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8060bd6:	095b      	lsrs	r3, r3, #5
 8060bd8:	b2da      	uxtb	r2, r3
 8060bda:	4b24      	ldr	r3, [pc, #144]	@ (8060c6c <ActCtrl_MainFunction+0x600>)
 8060bdc:	711a      	strb	r2, [r3, #4]
	CmdList_ActualValue[WWR_ARRPOS] = (htim3.Instance->CCR3 * 255) / 1250;
 8060bde:	4b1d      	ldr	r3, [pc, #116]	@ (8060c54 <ActCtrl_MainFunction+0x5e8>)
 8060be0:	681b      	ldr	r3, [r3, #0]
 8060be2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8060be4:	4613      	mov	r3, r2
 8060be6:	021b      	lsls	r3, r3, #8
 8060be8:	1a9b      	subs	r3, r3, r2
 8060bea:	4a1f      	ldr	r2, [pc, #124]	@ (8060c68 <ActCtrl_MainFunction+0x5fc>)
 8060bec:	fba2 2303 	umull	r2, r3, r2, r3
 8060bf0:	0a9b      	lsrs	r3, r3, #10
 8060bf2:	b2da      	uxtb	r2, r3
 8060bf4:	4b20      	ldr	r3, [pc, #128]	@ (8060c78 <ActCtrl_MainFunction+0x60c>)
 8060bf6:	701a      	strb	r2, [r3, #0]
	CmdList_ActualValue[WWL_ARRPOS] = (htim3.Instance->CCR4 * 255) / 1250;
 8060bf8:	4b16      	ldr	r3, [pc, #88]	@ (8060c54 <ActCtrl_MainFunction+0x5e8>)
 8060bfa:	681b      	ldr	r3, [r3, #0]
 8060bfc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8060bfe:	4613      	mov	r3, r2
 8060c00:	021b      	lsls	r3, r3, #8
 8060c02:	1a9b      	subs	r3, r3, r2
 8060c04:	4a18      	ldr	r2, [pc, #96]	@ (8060c68 <ActCtrl_MainFunction+0x5fc>)
 8060c06:	fba2 2303 	umull	r2, r3, r2, r3
 8060c0a:	0a9b      	lsrs	r3, r3, #10
 8060c0c:	b2da      	uxtb	r2, r3
 8060c0e:	4b1a      	ldr	r3, [pc, #104]	@ (8060c78 <ActCtrl_MainFunction+0x60c>)
 8060c10:	705a      	strb	r2, [r3, #1]
	CmdList_ActualValue[DLL_ARRPOS] = htim3.Instance->CCR1 / 255;
 8060c12:	4b10      	ldr	r3, [pc, #64]	@ (8060c54 <ActCtrl_MainFunction+0x5e8>)
 8060c14:	681b      	ldr	r3, [r3, #0]
 8060c16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8060c18:	4a18      	ldr	r2, [pc, #96]	@ (8060c7c <ActCtrl_MainFunction+0x610>)
 8060c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8060c1e:	09db      	lsrs	r3, r3, #7
 8060c20:	b2da      	uxtb	r2, r3
 8060c22:	4b15      	ldr	r3, [pc, #84]	@ (8060c78 <ActCtrl_MainFunction+0x60c>)
 8060c24:	709a      	strb	r2, [r3, #2]
	CmdList_ActualValue[DLR_ARRPOS] = htim3.Instance->CCR2 / 255;
 8060c26:	4b0b      	ldr	r3, [pc, #44]	@ (8060c54 <ActCtrl_MainFunction+0x5e8>)
 8060c28:	681b      	ldr	r3, [r3, #0]
 8060c2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8060c2c:	4a13      	ldr	r2, [pc, #76]	@ (8060c7c <ActCtrl_MainFunction+0x610>)
 8060c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8060c32:	09db      	lsrs	r3, r3, #7
 8060c34:	b2da      	uxtb	r2, r3
 8060c36:	4b10      	ldr	r3, [pc, #64]	@ (8060c78 <ActCtrl_MainFunction+0x60c>)
 8060c38:	70da      	strb	r2, [r3, #3]
	CmdList_ActualValue[CLIMA_ARRPOS] = htim2.Instance->CCR1;
 8060c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8060c70 <ActCtrl_MainFunction+0x604>)
 8060c3c:	681b      	ldr	r3, [r3, #0]
 8060c3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8060c40:	b2da      	uxtb	r2, r3
 8060c42:	4b0d      	ldr	r3, [pc, #52]	@ (8060c78 <ActCtrl_MainFunction+0x60c>)
 8060c44:	711a      	strb	r2, [r3, #4]
	/* Increment the main counter. */
	ActCtrl_MainCounter++;
 8060c46:	4b0e      	ldr	r3, [pc, #56]	@ (8060c80 <ActCtrl_MainFunction+0x614>)
 8060c48:	681b      	ldr	r3, [r3, #0]
 8060c4a:	3301      	adds	r3, #1
 8060c4c:	4a0c      	ldr	r2, [pc, #48]	@ (8060c80 <ActCtrl_MainFunction+0x614>)
 8060c4e:	6013      	str	r3, [r2, #0]
}
 8060c50:	bf00      	nop
 8060c52:	bd98      	pop	{r3, r4, r7, pc}
 8060c54:	20010c24 	.word	0x20010c24
 8060c58:	200101c0 	.word	0x200101c0
 8060c5c:	200101bb 	.word	0x200101bb
 8060c60:	200101bc 	.word	0x200101bc
 8060c64:	200101ba 	.word	0x200101ba
 8060c68:	d1b71759 	.word	0xd1b71759
 8060c6c:	200101a4 	.word	0x200101a4
 8060c70:	20010b70 	.word	0x20010b70
 8060c74:	51eb851f 	.word	0x51eb851f
 8060c78:	200101ac 	.word	0x200101ac
 8060c7c:	80808081 	.word	0x80808081
 8060c80:	200101c4 	.word	0x200101c4

08060c84 <InputCtrl_MainFunction>:
/* PROTOTYPE START */
void InputCtrl_MainFunction(void);
/* PROTOTYPE END */
/* FUNCTIONS START */
void InputCtrl_MainFunction(void)
{
 8060c84:	b580      	push	{r7, lr}
 8060c86:	b082      	sub	sp, #8
 8060c88:	af00      	add	r7, sp, #0
	/* Main counter. */
	static uint32 InputCtrl_MainCounter = 0;
	/* Invalidate inputs in case of ADC error. */
	for(uint8 i = 0; i < 3; i++)
 8060c8a:	2300      	movs	r3, #0
 8060c8c:	71fb      	strb	r3, [r7, #7]
 8060c8e:	e023      	b.n	8060cd8 <InputCtrl_MainFunction+0x54>
	{
		if(Adc_Error[i] != 0)
 8060c90:	79fb      	ldrb	r3, [r7, #7]
 8060c92:	4aaa      	ldr	r2, [pc, #680]	@ (8060f3c <InputCtrl_MainFunction+0x2b8>)
 8060c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8060c98:	2b00      	cmp	r3, #0
 8060c9a:	d01a      	beq.n	8060cd2 <InputCtrl_MainFunction+0x4e>
		{
			for(uint8 j = IGN_ARRPOS; j <= STATUS_GSNS_ARRPOS; j++)
 8060c9c:	2300      	movs	r3, #0
 8060c9e:	71bb      	strb	r3, [r7, #6]
 8060ca0:	e014      	b.n	8060ccc <InputCtrl_MainFunction+0x48>
			{
				StatusList_InputValue[j] = 0;
 8060ca2:	79bb      	ldrb	r3, [r7, #6]
 8060ca4:	4aa6      	ldr	r2, [pc, #664]	@ (8060f40 <InputCtrl_MainFunction+0x2bc>)
 8060ca6:	2100      	movs	r1, #0
 8060ca8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				StatusList_OutputValue[j] = 0;
 8060cac:	79bb      	ldrb	r3, [r7, #6]
 8060cae:	4aa5      	ldr	r2, [pc, #660]	@ (8060f44 <InputCtrl_MainFunction+0x2c0>)
 8060cb0:	2100      	movs	r1, #0
 8060cb2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				StatusList_ComOutValue[j] = 0;
 8060cb6:	79bb      	ldrb	r3, [r7, #6]
 8060cb8:	4aa3      	ldr	r2, [pc, #652]	@ (8060f48 <InputCtrl_MainFunction+0x2c4>)
 8060cba:	2100      	movs	r1, #0
 8060cbc:	54d1      	strb	r1, [r2, r3]
				StatusList_RawValue[j] = 0;
 8060cbe:	79bb      	ldrb	r3, [r7, #6]
 8060cc0:	4aa2      	ldr	r2, [pc, #648]	@ (8060f4c <InputCtrl_MainFunction+0x2c8>)
 8060cc2:	2100      	movs	r1, #0
 8060cc4:	54d1      	strb	r1, [r2, r3]
			for(uint8 j = IGN_ARRPOS; j <= STATUS_GSNS_ARRPOS; j++)
 8060cc6:	79bb      	ldrb	r3, [r7, #6]
 8060cc8:	3301      	adds	r3, #1
 8060cca:	71bb      	strb	r3, [r7, #6]
 8060ccc:	79bb      	ldrb	r3, [r7, #6]
 8060cce:	2b08      	cmp	r3, #8
 8060cd0:	d9e7      	bls.n	8060ca2 <InputCtrl_MainFunction+0x1e>
	for(uint8 i = 0; i < 3; i++)
 8060cd2:	79fb      	ldrb	r3, [r7, #7]
 8060cd4:	3301      	adds	r3, #1
 8060cd6:	71fb      	strb	r3, [r7, #7]
 8060cd8:	79fb      	ldrb	r3, [r7, #7]
 8060cda:	2b02      	cmp	r3, #2
 8060cdc:	d9d8      	bls.n	8060c90 <InputCtrl_MainFunction+0xc>
		{
			/* Do nothing. */
		}
	}
	/* Invalidate inputs in case of UART error. */
	for(uint8 i = 0; i < 5; i++)
 8060cde:	2300      	movs	r3, #0
 8060ce0:	717b      	strb	r3, [r7, #5]
 8060ce2:	e01a      	b.n	8060d1a <InputCtrl_MainFunction+0x96>
	{
		if(UartH_ErrorArr[i] != 0)
 8060ce4:	797b      	ldrb	r3, [r7, #5]
 8060ce6:	4a9a      	ldr	r2, [pc, #616]	@ (8060f50 <InputCtrl_MainFunction+0x2cc>)
 8060ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8060cec:	2b00      	cmp	r3, #0
 8060cee:	d011      	beq.n	8060d14 <InputCtrl_MainFunction+0x90>
		{
			StatusList_InputValue[HC05_ARRPOS] = 0;
 8060cf0:	4b93      	ldr	r3, [pc, #588]	@ (8060f40 <InputCtrl_MainFunction+0x2bc>)
 8060cf2:	2200      	movs	r2, #0
 8060cf4:	625a      	str	r2, [r3, #36]	@ 0x24
			StatusList_OutputValue[HC05_ARRPOS] = 0;
 8060cf6:	4b93      	ldr	r3, [pc, #588]	@ (8060f44 <InputCtrl_MainFunction+0x2c0>)
 8060cf8:	2200      	movs	r2, #0
 8060cfa:	625a      	str	r2, [r3, #36]	@ 0x24
			StatusList_ComOutValue[HC05_ARRPOS] = 0;
 8060cfc:	4b92      	ldr	r3, [pc, #584]	@ (8060f48 <InputCtrl_MainFunction+0x2c4>)
 8060cfe:	2200      	movs	r2, #0
 8060d00:	725a      	strb	r2, [r3, #9]
			StatusList_InputStatus[HC05_ARRPOS].DCYStatus = 1;
 8060d02:	4b94      	ldr	r3, [pc, #592]	@ (8060f54 <InputCtrl_MainFunction+0x2d0>)
 8060d04:	2201      	movs	r2, #1
 8060d06:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
			StatusList_InputStatus[HC05_ARRPOS].errorStatus = 0xA;
 8060d0a:	4b92      	ldr	r3, [pc, #584]	@ (8060f54 <InputCtrl_MainFunction+0x2d0>)
 8060d0c:	220a      	movs	r2, #10
 8060d0e:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
			break;
 8060d12:	e005      	b.n	8060d20 <InputCtrl_MainFunction+0x9c>
	for(uint8 i = 0; i < 5; i++)
 8060d14:	797b      	ldrb	r3, [r7, #5]
 8060d16:	3301      	adds	r3, #1
 8060d18:	717b      	strb	r3, [r7, #5]
 8060d1a:	797b      	ldrb	r3, [r7, #5]
 8060d1c:	2b04      	cmp	r3, #4
 8060d1e:	d9e1      	bls.n	8060ce4 <InputCtrl_MainFunction+0x60>
		{
			/* Do nothing. */
		}
	}
	/* Process input status. */
	for(uint8 i = IGN_ARRPOS; i <= GSNS_ARRPOS; i++)
 8060d20:	2300      	movs	r3, #0
 8060d22:	713b      	strb	r3, [r7, #4]
 8060d24:	e051      	b.n	8060dca <InputCtrl_MainFunction+0x146>
	{
		/* If this has not been set this drive cycle status. */
		if(StatusList_InputStatus[i].DCYStatus == 0)
 8060d26:	793a      	ldrb	r2, [r7, #4]
 8060d28:	498a      	ldr	r1, [pc, #552]	@ (8060f54 <InputCtrl_MainFunction+0x2d0>)
 8060d2a:	4613      	mov	r3, r2
 8060d2c:	005b      	lsls	r3, r3, #1
 8060d2e:	4413      	add	r3, r2
 8060d30:	009b      	lsls	r3, r3, #2
 8060d32:	440b      	add	r3, r1
 8060d34:	3301      	adds	r3, #1
 8060d36:	781b      	ldrb	r3, [r3, #0]
 8060d38:	2b00      	cmp	r3, #0
 8060d3a:	d143      	bne.n	8060dc4 <InputCtrl_MainFunction+0x140>
		{
			/* Check the value to be under threshold. */
			if(StatusList_InputValue[i] < Param_UndervoltageThreshold_Calibration)
 8060d3c:	793b      	ldrb	r3, [r7, #4]
 8060d3e:	4a80      	ldr	r2, [pc, #512]	@ (8060f40 <InputCtrl_MainFunction+0x2bc>)
 8060d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8060d44:	4a84      	ldr	r2, [pc, #528]	@ (8060f58 <InputCtrl_MainFunction+0x2d4>)
 8060d46:	7812      	ldrb	r2, [r2, #0]
 8060d48:	4293      	cmp	r3, r2
 8060d4a:	d23b      	bcs.n	8060dc4 <InputCtrl_MainFunction+0x140>
			{
				/* Count the time period while the input retains the same value. */
				StatusList_InputStatus[i].debounceTimer_undervoltage++;
 8060d4c:	793a      	ldrb	r2, [r7, #4]
 8060d4e:	4981      	ldr	r1, [pc, #516]	@ (8060f54 <InputCtrl_MainFunction+0x2d0>)
 8060d50:	4613      	mov	r3, r2
 8060d52:	005b      	lsls	r3, r3, #1
 8060d54:	4413      	add	r3, r2
 8060d56:	009b      	lsls	r3, r3, #2
 8060d58:	440b      	add	r3, r1
 8060d5a:	3304      	adds	r3, #4
 8060d5c:	681b      	ldr	r3, [r3, #0]
 8060d5e:	1c59      	adds	r1, r3, #1
 8060d60:	487c      	ldr	r0, [pc, #496]	@ (8060f54 <InputCtrl_MainFunction+0x2d0>)
 8060d62:	4613      	mov	r3, r2
 8060d64:	005b      	lsls	r3, r3, #1
 8060d66:	4413      	add	r3, r2
 8060d68:	009b      	lsls	r3, r3, #2
 8060d6a:	4403      	add	r3, r0
 8060d6c:	3304      	adds	r3, #4
 8060d6e:	6019      	str	r1, [r3, #0]
				/* If enough time has elapsed with error. */
				if(StatusList_InputStatus[i].debounceTimer_undervoltage == Param_ErrorSettingDebouceThreshold_Calibration)
 8060d70:	793a      	ldrb	r2, [r7, #4]
 8060d72:	4978      	ldr	r1, [pc, #480]	@ (8060f54 <InputCtrl_MainFunction+0x2d0>)
 8060d74:	4613      	mov	r3, r2
 8060d76:	005b      	lsls	r3, r3, #1
 8060d78:	4413      	add	r3, r2
 8060d7a:	009b      	lsls	r3, r3, #2
 8060d7c:	440b      	add	r3, r1
 8060d7e:	3304      	adds	r3, #4
 8060d80:	681b      	ldr	r3, [r3, #0]
 8060d82:	4a76      	ldr	r2, [pc, #472]	@ (8060f5c <InputCtrl_MainFunction+0x2d8>)
 8060d84:	7812      	ldrb	r2, [r2, #0]
 8060d86:	4293      	cmp	r3, r2
 8060d88:	d11c      	bne.n	8060dc4 <InputCtrl_MainFunction+0x140>
				{
					/* Store the error. */
					StatusList_InputStatus[i].debounceTimer_undervoltage = 0;
 8060d8a:	793a      	ldrb	r2, [r7, #4]
 8060d8c:	4971      	ldr	r1, [pc, #452]	@ (8060f54 <InputCtrl_MainFunction+0x2d0>)
 8060d8e:	4613      	mov	r3, r2
 8060d90:	005b      	lsls	r3, r3, #1
 8060d92:	4413      	add	r3, r2
 8060d94:	009b      	lsls	r3, r3, #2
 8060d96:	440b      	add	r3, r1
 8060d98:	3304      	adds	r3, #4
 8060d9a:	2200      	movs	r2, #0
 8060d9c:	601a      	str	r2, [r3, #0]
					StatusList_InputStatus[i].DCYStatus = 1;
 8060d9e:	793a      	ldrb	r2, [r7, #4]
 8060da0:	496c      	ldr	r1, [pc, #432]	@ (8060f54 <InputCtrl_MainFunction+0x2d0>)
 8060da2:	4613      	mov	r3, r2
 8060da4:	005b      	lsls	r3, r3, #1
 8060da6:	4413      	add	r3, r2
 8060da8:	009b      	lsls	r3, r3, #2
 8060daa:	440b      	add	r3, r1
 8060dac:	3301      	adds	r3, #1
 8060dae:	2201      	movs	r2, #1
 8060db0:	701a      	strb	r2, [r3, #0]
					StatusList_InputStatus[i].errorStatus = 1;
 8060db2:	793a      	ldrb	r2, [r7, #4]
 8060db4:	4967      	ldr	r1, [pc, #412]	@ (8060f54 <InputCtrl_MainFunction+0x2d0>)
 8060db6:	4613      	mov	r3, r2
 8060db8:	005b      	lsls	r3, r3, #1
 8060dba:	4413      	add	r3, r2
 8060dbc:	009b      	lsls	r3, r3, #2
 8060dbe:	440b      	add	r3, r1
 8060dc0:	2201      	movs	r2, #1
 8060dc2:	701a      	strb	r2, [r3, #0]
	for(uint8 i = IGN_ARRPOS; i <= GSNS_ARRPOS; i++)
 8060dc4:	793b      	ldrb	r3, [r7, #4]
 8060dc6:	3301      	adds	r3, #1
 8060dc8:	713b      	strb	r3, [r7, #4]
 8060dca:	793b      	ldrb	r3, [r7, #4]
 8060dcc:	2b08      	cmp	r3, #8
 8060dce:	d9aa      	bls.n	8060d26 <InputCtrl_MainFunction+0xa2>
		{
			/* Do nothing. */
		}
	}
	/* Process the output values. */
	for(uint8 i = STATUS_IGN_ARRPOS; i <= STATUS_GSNS_ARRPOS; i++)
 8060dd0:	2300      	movs	r3, #0
 8060dd2:	70fb      	strb	r3, [r7, #3]
 8060dd4:	e02a      	b.n	8060e2c <InputCtrl_MainFunction+0x1a8>
	{
		/* In case of error is detected, invalidate the input. */
		if(StatusList_InputStatus[i].errorStatus == 0)
 8060dd6:	78fa      	ldrb	r2, [r7, #3]
 8060dd8:	495e      	ldr	r1, [pc, #376]	@ (8060f54 <InputCtrl_MainFunction+0x2d0>)
 8060dda:	4613      	mov	r3, r2
 8060ddc:	005b      	lsls	r3, r3, #1
 8060dde:	4413      	add	r3, r2
 8060de0:	009b      	lsls	r3, r3, #2
 8060de2:	440b      	add	r3, r1
 8060de4:	781b      	ldrb	r3, [r3, #0]
 8060de6:	2b00      	cmp	r3, #0
 8060de8:	d118      	bne.n	8060e1c <InputCtrl_MainFunction+0x198>
		{
			if(StatusList_InputValue[i] <= Param_Input_Calibration[i]) StatusList_OutputValue[i] = 0;
 8060dea:	78fb      	ldrb	r3, [r7, #3]
 8060dec:	4a54      	ldr	r2, [pc, #336]	@ (8060f40 <InputCtrl_MainFunction+0x2bc>)
 8060dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8060df2:	78fa      	ldrb	r2, [r7, #3]
 8060df4:	495a      	ldr	r1, [pc, #360]	@ (8060f60 <InputCtrl_MainFunction+0x2dc>)
 8060df6:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8060dfa:	4293      	cmp	r3, r2
 8060dfc:	d805      	bhi.n	8060e0a <InputCtrl_MainFunction+0x186>
 8060dfe:	78fb      	ldrb	r3, [r7, #3]
 8060e00:	4a50      	ldr	r2, [pc, #320]	@ (8060f44 <InputCtrl_MainFunction+0x2c0>)
 8060e02:	2100      	movs	r1, #0
 8060e04:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8060e08:	e00d      	b.n	8060e26 <InputCtrl_MainFunction+0x1a2>
			else StatusList_OutputValue[i] = StatusList_InputValue[i]; /* If no error have occurred, store the processed value. */
 8060e0a:	78fa      	ldrb	r2, [r7, #3]
 8060e0c:	78fb      	ldrb	r3, [r7, #3]
 8060e0e:	494c      	ldr	r1, [pc, #304]	@ (8060f40 <InputCtrl_MainFunction+0x2bc>)
 8060e10:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8060e14:	494b      	ldr	r1, [pc, #300]	@ (8060f44 <InputCtrl_MainFunction+0x2c0>)
 8060e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8060e1a:	e004      	b.n	8060e26 <InputCtrl_MainFunction+0x1a2>
		}
		else StatusList_OutputValue[i] = 0xFF;
 8060e1c:	78fb      	ldrb	r3, [r7, #3]
 8060e1e:	4a49      	ldr	r2, [pc, #292]	@ (8060f44 <InputCtrl_MainFunction+0x2c0>)
 8060e20:	21ff      	movs	r1, #255	@ 0xff
 8060e22:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(uint8 i = STATUS_IGN_ARRPOS; i <= STATUS_GSNS_ARRPOS; i++)
 8060e26:	78fb      	ldrb	r3, [r7, #3]
 8060e28:	3301      	adds	r3, #1
 8060e2a:	70fb      	strb	r3, [r7, #3]
 8060e2c:	78fb      	ldrb	r3, [r7, #3]
 8060e2e:	2b08      	cmp	r3, #8
 8060e30:	d9d1      	bls.n	8060dd6 <InputCtrl_MainFunction+0x152>
	}
	/* Process the raw value to be sent on CAN. */
	for(uint8 i = IGN_ARRPOS; i < RAW_INPUTS; i++) StatusList_RawValue[i] = (StatusList_InputValue[i] * 255) / 4095;
 8060e32:	2300      	movs	r3, #0
 8060e34:	70bb      	strb	r3, [r7, #2]
 8060e36:	e014      	b.n	8060e62 <InputCtrl_MainFunction+0x1de>
 8060e38:	78bb      	ldrb	r3, [r7, #2]
 8060e3a:	4a41      	ldr	r2, [pc, #260]	@ (8060f40 <InputCtrl_MainFunction+0x2bc>)
 8060e3c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8060e40:	4613      	mov	r3, r2
 8060e42:	021b      	lsls	r3, r3, #8
 8060e44:	1a9a      	subs	r2, r3, r2
 8060e46:	4b47      	ldr	r3, [pc, #284]	@ (8060f64 <InputCtrl_MainFunction+0x2e0>)
 8060e48:	fba3 1302 	umull	r1, r3, r3, r2
 8060e4c:	1ad2      	subs	r2, r2, r3
 8060e4e:	0852      	lsrs	r2, r2, #1
 8060e50:	4413      	add	r3, r2
 8060e52:	0ada      	lsrs	r2, r3, #11
 8060e54:	78bb      	ldrb	r3, [r7, #2]
 8060e56:	b2d1      	uxtb	r1, r2
 8060e58:	4a3c      	ldr	r2, [pc, #240]	@ (8060f4c <InputCtrl_MainFunction+0x2c8>)
 8060e5a:	54d1      	strb	r1, [r2, r3]
 8060e5c:	78bb      	ldrb	r3, [r7, #2]
 8060e5e:	3301      	adds	r3, #1
 8060e60:	70bb      	strb	r3, [r7, #2]
 8060e62:	78bb      	ldrb	r3, [r7, #2]
 8060e64:	2b08      	cmp	r3, #8
 8060e66:	d9e7      	bls.n	8060e38 <InputCtrl_MainFunction+0x1b4>
	/* Update the to-be-sent-on-CAN variables. */
	StatusList_ComOutValue[IGN_ARRPOS] = (StatusList_OutputValue[IGN_ARRPOS] * 2) / 4095;
 8060e68:	4b36      	ldr	r3, [pc, #216]	@ (8060f44 <InputCtrl_MainFunction+0x2c0>)
 8060e6a:	681b      	ldr	r3, [r3, #0]
 8060e6c:	005a      	lsls	r2, r3, #1
 8060e6e:	4b3d      	ldr	r3, [pc, #244]	@ (8060f64 <InputCtrl_MainFunction+0x2e0>)
 8060e70:	fba3 1302 	umull	r1, r3, r3, r2
 8060e74:	1ad2      	subs	r2, r2, r3
 8060e76:	0852      	lsrs	r2, r2, #1
 8060e78:	4413      	add	r3, r2
 8060e7a:	0adb      	lsrs	r3, r3, #11
 8060e7c:	b2da      	uxtb	r2, r3
 8060e7e:	4b32      	ldr	r3, [pc, #200]	@ (8060f48 <InputCtrl_MainFunction+0x2c4>)
 8060e80:	701a      	strb	r2, [r3, #0]
	StatusList_ComOutValue[ACC_ARRPOS] = (StatusList_OutputValue[ACC_ARRPOS] * 100) / 4095;
 8060e82:	4b30      	ldr	r3, [pc, #192]	@ (8060f44 <InputCtrl_MainFunction+0x2c0>)
 8060e84:	685b      	ldr	r3, [r3, #4]
 8060e86:	2264      	movs	r2, #100	@ 0x64
 8060e88:	fb03 f202 	mul.w	r2, r3, r2
 8060e8c:	4b35      	ldr	r3, [pc, #212]	@ (8060f64 <InputCtrl_MainFunction+0x2e0>)
 8060e8e:	fba3 1302 	umull	r1, r3, r3, r2
 8060e92:	1ad2      	subs	r2, r2, r3
 8060e94:	0852      	lsrs	r2, r2, #1
 8060e96:	4413      	add	r3, r2
 8060e98:	0adb      	lsrs	r3, r3, #11
 8060e9a:	b2da      	uxtb	r2, r3
 8060e9c:	4b2a      	ldr	r3, [pc, #168]	@ (8060f48 <InputCtrl_MainFunction+0x2c4>)
 8060e9e:	705a      	strb	r2, [r3, #1]
	StatusList_ComOutValue[BR_ARRPOS] = (StatusList_OutputValue[BR_ARRPOS] * 100) / 4095;
 8060ea0:	4b28      	ldr	r3, [pc, #160]	@ (8060f44 <InputCtrl_MainFunction+0x2c0>)
 8060ea2:	689b      	ldr	r3, [r3, #8]
 8060ea4:	2264      	movs	r2, #100	@ 0x64
 8060ea6:	fb03 f202 	mul.w	r2, r3, r2
 8060eaa:	4b2e      	ldr	r3, [pc, #184]	@ (8060f64 <InputCtrl_MainFunction+0x2e0>)
 8060eac:	fba3 1302 	umull	r1, r3, r3, r2
 8060eb0:	1ad2      	subs	r2, r2, r3
 8060eb2:	0852      	lsrs	r2, r2, #1
 8060eb4:	4413      	add	r3, r2
 8060eb6:	0adb      	lsrs	r3, r3, #11
 8060eb8:	b2da      	uxtb	r2, r3
 8060eba:	4b23      	ldr	r3, [pc, #140]	@ (8060f48 <InputCtrl_MainFunction+0x2c4>)
 8060ebc:	709a      	strb	r2, [r3, #2]
	StatusList_ComOutValue[PS_ARRPOS] = (StatusList_OutputValue[PS_ARRPOS] * 180) / 4095;
 8060ebe:	4b21      	ldr	r3, [pc, #132]	@ (8060f44 <InputCtrl_MainFunction+0x2c0>)
 8060ec0:	68db      	ldr	r3, [r3, #12]
 8060ec2:	22b4      	movs	r2, #180	@ 0xb4
 8060ec4:	fb03 f202 	mul.w	r2, r3, r2
 8060ec8:	4b26      	ldr	r3, [pc, #152]	@ (8060f64 <InputCtrl_MainFunction+0x2e0>)
 8060eca:	fba3 1302 	umull	r1, r3, r3, r2
 8060ece:	1ad2      	subs	r2, r2, r3
 8060ed0:	0852      	lsrs	r2, r2, #1
 8060ed2:	4413      	add	r3, r2
 8060ed4:	0adb      	lsrs	r3, r3, #11
 8060ed6:	b2da      	uxtb	r2, r3
 8060ed8:	4b1b      	ldr	r3, [pc, #108]	@ (8060f48 <InputCtrl_MainFunction+0x2c4>)
 8060eda:	70da      	strb	r2, [r3, #3]
	StatusList_ComOutValue[GB_ARRPOS] = (StatusList_OutputValue[GB_ARRPOS] * 2) / 4095;
 8060edc:	4b19      	ldr	r3, [pc, #100]	@ (8060f44 <InputCtrl_MainFunction+0x2c0>)
 8060ede:	691b      	ldr	r3, [r3, #16]
 8060ee0:	005a      	lsls	r2, r3, #1
 8060ee2:	4b20      	ldr	r3, [pc, #128]	@ (8060f64 <InputCtrl_MainFunction+0x2e0>)
 8060ee4:	fba3 1302 	umull	r1, r3, r3, r2
 8060ee8:	1ad2      	subs	r2, r2, r3
 8060eea:	0852      	lsrs	r2, r2, #1
 8060eec:	4413      	add	r3, r2
 8060eee:	0adb      	lsrs	r3, r3, #11
 8060ef0:	b2da      	uxtb	r2, r3
 8060ef2:	4b15      	ldr	r3, [pc, #84]	@ (8060f48 <InputCtrl_MainFunction+0x2c4>)
 8060ef4:	711a      	strb	r2, [r3, #4]
	StatusList_ComOutValue[HC05_ARRPOS] = StatusList_OutputValue[HC05_ARRPOS];
 8060ef6:	4b13      	ldr	r3, [pc, #76]	@ (8060f44 <InputCtrl_MainFunction+0x2c0>)
 8060ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8060efa:	b2da      	uxtb	r2, r3
 8060efc:	4b12      	ldr	r3, [pc, #72]	@ (8060f48 <InputCtrl_MainFunction+0x2c4>)
 8060efe:	725a      	strb	r2, [r3, #9]
	/* Process the input values of sensors. */
	for(uint8 i = LSNS_ARRPOS; i <= GSNS_ARRPOS; i++)
 8060f00:	2305      	movs	r3, #5
 8060f02:	707b      	strb	r3, [r7, #1]
 8060f04:	e013      	b.n	8060f2e <InputCtrl_MainFunction+0x2aa>
	{
		if(StatusList_OutputValue[i] > 3000) StatusList_ComOutValue[i] = 1;
 8060f06:	787b      	ldrb	r3, [r7, #1]
 8060f08:	4a0e      	ldr	r2, [pc, #56]	@ (8060f44 <InputCtrl_MainFunction+0x2c0>)
 8060f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8060f0e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8060f12:	4293      	cmp	r3, r2
 8060f14:	d904      	bls.n	8060f20 <InputCtrl_MainFunction+0x29c>
 8060f16:	787b      	ldrb	r3, [r7, #1]
 8060f18:	4a0b      	ldr	r2, [pc, #44]	@ (8060f48 <InputCtrl_MainFunction+0x2c4>)
 8060f1a:	2101      	movs	r1, #1
 8060f1c:	54d1      	strb	r1, [r2, r3]
 8060f1e:	e003      	b.n	8060f28 <InputCtrl_MainFunction+0x2a4>
		else StatusList_ComOutValue[i] = 0;
 8060f20:	787b      	ldrb	r3, [r7, #1]
 8060f22:	4a09      	ldr	r2, [pc, #36]	@ (8060f48 <InputCtrl_MainFunction+0x2c4>)
 8060f24:	2100      	movs	r1, #0
 8060f26:	54d1      	strb	r1, [r2, r3]
	for(uint8 i = LSNS_ARRPOS; i <= GSNS_ARRPOS; i++)
 8060f28:	787b      	ldrb	r3, [r7, #1]
 8060f2a:	3301      	adds	r3, #1
 8060f2c:	707b      	strb	r3, [r7, #1]
 8060f2e:	787b      	ldrb	r3, [r7, #1]
 8060f30:	2b08      	cmp	r3, #8
 8060f32:	d9e8      	bls.n	8060f06 <InputCtrl_MainFunction+0x282>
	}
	/* Process error discovered on inputs. */
	for(uint8 i = STATUS_IGN_ARRPOS; i < STATUS_NUMBER; i++)
 8060f34:	2300      	movs	r3, #0
 8060f36:	703b      	strb	r3, [r7, #0]
 8060f38:	e07c      	b.n	8061034 <InputCtrl_MainFunction+0x3b0>
 8060f3a:	bf00      	nop
 8060f3c:	200105fc 	.word	0x200105fc
 8060f40:	200101f0 	.word	0x200101f0
 8060f44:	200102a0 	.word	0x200102a0
 8060f48:	200102cc 	.word	0x200102cc
 8060f4c:	200102d8 	.word	0x200102d8
 8060f50:	200103e8 	.word	0x200103e8
 8060f54:	2001021c 	.word	0x2001021c
 8060f58:	200101d0 	.word	0x200101d0
 8060f5c:	200101d1 	.word	0x200101d1
 8060f60:	200101d8 	.word	0x200101d8
 8060f64:	00100101 	.word	0x00100101
	{
		/* If input is not coded, do not set a DTC. */
		if(i >= STATUS_LSNS_ARRPOS && i <= STATUS_GSNS_ARRPOS)
 8060f68:	783b      	ldrb	r3, [r7, #0]
 8060f6a:	2b04      	cmp	r3, #4
 8060f6c:	d91b      	bls.n	8060fa6 <InputCtrl_MainFunction+0x322>
 8060f6e:	783b      	ldrb	r3, [r7, #0]
 8060f70:	2b08      	cmp	r3, #8
 8060f72:	d818      	bhi.n	8060fa6 <InputCtrl_MainFunction+0x322>
		{
			if(InputCtrl_CodingData[i] == 1)
 8060f74:	783b      	ldrb	r3, [r7, #0]
 8060f76:	4a57      	ldr	r2, [pc, #348]	@ (80610d4 <InputCtrl_MainFunction+0x450>)
 8060f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8060f7c:	2b01      	cmp	r3, #1
 8060f7e:	d112      	bne.n	8060fa6 <InputCtrl_MainFunction+0x322>
			{
				StatusList_InputStatus[i].DCYStatus = 0;
 8060f80:	783a      	ldrb	r2, [r7, #0]
 8060f82:	4955      	ldr	r1, [pc, #340]	@ (80610d8 <InputCtrl_MainFunction+0x454>)
 8060f84:	4613      	mov	r3, r2
 8060f86:	005b      	lsls	r3, r3, #1
 8060f88:	4413      	add	r3, r2
 8060f8a:	009b      	lsls	r3, r3, #2
 8060f8c:	440b      	add	r3, r1
 8060f8e:	3301      	adds	r3, #1
 8060f90:	2200      	movs	r2, #0
 8060f92:	701a      	strb	r2, [r3, #0]
				StatusList_InputStatus[i].errorStatus = 0;
 8060f94:	783a      	ldrb	r2, [r7, #0]
 8060f96:	4950      	ldr	r1, [pc, #320]	@ (80610d8 <InputCtrl_MainFunction+0x454>)
 8060f98:	4613      	mov	r3, r2
 8060f9a:	005b      	lsls	r3, r3, #1
 8060f9c:	4413      	add	r3, r2
 8060f9e:	009b      	lsls	r3, r3, #2
 8060fa0:	440b      	add	r3, r1
 8060fa2:	2200      	movs	r2, #0
 8060fa4:	701a      	strb	r2, [r3, #0]
		else
		{
			/* Do nothing. */
		}
		/* Store DTCs in case of errors were detected. */
		if((StatusList_InputStatus[i].DCYStatus == 1) && (StatusList_InputStatus[i].errorStatus != 0))
 8060fa6:	783a      	ldrb	r2, [r7, #0]
 8060fa8:	494b      	ldr	r1, [pc, #300]	@ (80610d8 <InputCtrl_MainFunction+0x454>)
 8060faa:	4613      	mov	r3, r2
 8060fac:	005b      	lsls	r3, r3, #1
 8060fae:	4413      	add	r3, r2
 8060fb0:	009b      	lsls	r3, r3, #2
 8060fb2:	440b      	add	r3, r1
 8060fb4:	3301      	adds	r3, #1
 8060fb6:	781b      	ldrb	r3, [r3, #0]
 8060fb8:	2b01      	cmp	r3, #1
 8060fba:	d121      	bne.n	8061000 <InputCtrl_MainFunction+0x37c>
 8060fbc:	783a      	ldrb	r2, [r7, #0]
 8060fbe:	4946      	ldr	r1, [pc, #280]	@ (80610d8 <InputCtrl_MainFunction+0x454>)
 8060fc0:	4613      	mov	r3, r2
 8060fc2:	005b      	lsls	r3, r3, #1
 8060fc4:	4413      	add	r3, r2
 8060fc6:	009b      	lsls	r3, r3, #2
 8060fc8:	440b      	add	r3, r1
 8060fca:	781b      	ldrb	r3, [r3, #0]
 8060fcc:	2b00      	cmp	r3, #0
 8060fce:	d017      	beq.n	8061000 <InputCtrl_MainFunction+0x37c>
		{
			Dem_SaveDtc(i, StatusList_InputStatus[i].errorStatus);
 8060fd0:	783a      	ldrb	r2, [r7, #0]
 8060fd2:	4941      	ldr	r1, [pc, #260]	@ (80610d8 <InputCtrl_MainFunction+0x454>)
 8060fd4:	4613      	mov	r3, r2
 8060fd6:	005b      	lsls	r3, r3, #1
 8060fd8:	4413      	add	r3, r2
 8060fda:	009b      	lsls	r3, r3, #2
 8060fdc:	440b      	add	r3, r1
 8060fde:	781a      	ldrb	r2, [r3, #0]
 8060fe0:	783b      	ldrb	r3, [r7, #0]
 8060fe2:	4611      	mov	r1, r2
 8060fe4:	4618      	mov	r0, r3
 8060fe6:	f003 fc2f 	bl	8064848 <Dem_SaveDtc>
			StatusList_InputStatus[i].DCYStatus = 2;
 8060fea:	783a      	ldrb	r2, [r7, #0]
 8060fec:	493a      	ldr	r1, [pc, #232]	@ (80610d8 <InputCtrl_MainFunction+0x454>)
 8060fee:	4613      	mov	r3, r2
 8060ff0:	005b      	lsls	r3, r3, #1
 8060ff2:	4413      	add	r3, r2
 8060ff4:	009b      	lsls	r3, r3, #2
 8060ff6:	440b      	add	r3, r1
 8060ff8:	3301      	adds	r3, #1
 8060ffa:	2202      	movs	r2, #2
 8060ffc:	701a      	strb	r2, [r3, #0]
 8060ffe:	e016      	b.n	806102e <InputCtrl_MainFunction+0x3aa>
		}
		else if(StatusList_InputStatus[i].errorStatus == 0) Dem_SaveDtc(i, StatusList_InputStatus[i].errorStatus);
 8061000:	783a      	ldrb	r2, [r7, #0]
 8061002:	4935      	ldr	r1, [pc, #212]	@ (80610d8 <InputCtrl_MainFunction+0x454>)
 8061004:	4613      	mov	r3, r2
 8061006:	005b      	lsls	r3, r3, #1
 8061008:	4413      	add	r3, r2
 806100a:	009b      	lsls	r3, r3, #2
 806100c:	440b      	add	r3, r1
 806100e:	781b      	ldrb	r3, [r3, #0]
 8061010:	2b00      	cmp	r3, #0
 8061012:	d10c      	bne.n	806102e <InputCtrl_MainFunction+0x3aa>
 8061014:	783a      	ldrb	r2, [r7, #0]
 8061016:	4930      	ldr	r1, [pc, #192]	@ (80610d8 <InputCtrl_MainFunction+0x454>)
 8061018:	4613      	mov	r3, r2
 806101a:	005b      	lsls	r3, r3, #1
 806101c:	4413      	add	r3, r2
 806101e:	009b      	lsls	r3, r3, #2
 8061020:	440b      	add	r3, r1
 8061022:	781a      	ldrb	r2, [r3, #0]
 8061024:	783b      	ldrb	r3, [r7, #0]
 8061026:	4611      	mov	r1, r2
 8061028:	4618      	mov	r0, r3
 806102a:	f003 fc0d 	bl	8064848 <Dem_SaveDtc>
	for(uint8 i = STATUS_IGN_ARRPOS; i < STATUS_NUMBER; i++)
 806102e:	783b      	ldrb	r3, [r7, #0]
 8061030:	3301      	adds	r3, #1
 8061032:	703b      	strb	r3, [r7, #0]
 8061034:	783b      	ldrb	r3, [r7, #0]
 8061036:	2b0a      	cmp	r3, #10
 8061038:	d996      	bls.n	8060f68 <InputCtrl_MainFunction+0x2e4>
		{
			/* Do nothing. */
		}
	}
	/* Invalidate the input if not coded. */
	if(InputCtrl_CodingData[0] == 1) StatusList_ComOutValue[HC05_ARRPOS] = 0;
 806103a:	4b26      	ldr	r3, [pc, #152]	@ (80610d4 <InputCtrl_MainFunction+0x450>)
 806103c:	681b      	ldr	r3, [r3, #0]
 806103e:	2b01      	cmp	r3, #1
 8061040:	d102      	bne.n	8061048 <InputCtrl_MainFunction+0x3c4>
 8061042:	4b26      	ldr	r3, [pc, #152]	@ (80610dc <InputCtrl_MainFunction+0x458>)
 8061044:	2200      	movs	r2, #0
 8061046:	725a      	strb	r2, [r3, #9]
	else
	{
		/* Do nothing. */
	}
	/* Invalidate the input if not coded. */
	if(InputCtrl_CodingData[1] == 1)
 8061048:	4b22      	ldr	r3, [pc, #136]	@ (80610d4 <InputCtrl_MainFunction+0x450>)
 806104a:	685b      	ldr	r3, [r3, #4]
 806104c:	2b01      	cmp	r3, #1
 806104e:	d106      	bne.n	806105e <InputCtrl_MainFunction+0x3da>
	{
		if(StatusList_OutputValue[HC05_ARRPOS] == 0x03) StatusList_ComOutValue[HC05_ARRPOS] = 0;
 8061050:	4b23      	ldr	r3, [pc, #140]	@ (80610e0 <InputCtrl_MainFunction+0x45c>)
 8061052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8061054:	2b03      	cmp	r3, #3
 8061056:	d102      	bne.n	806105e <InputCtrl_MainFunction+0x3da>
 8061058:	4b20      	ldr	r3, [pc, #128]	@ (80610dc <InputCtrl_MainFunction+0x458>)
 806105a:	2200      	movs	r2, #0
 806105c:	725a      	strb	r2, [r3, #9]
	else
	{
		/* Do nothing. */
	}
	/* Invalidate the input if not coded. */
	if(InputCtrl_CodingData[2] == 1)
 806105e:	4b1d      	ldr	r3, [pc, #116]	@ (80610d4 <InputCtrl_MainFunction+0x450>)
 8061060:	689b      	ldr	r3, [r3, #8]
 8061062:	2b01      	cmp	r3, #1
 8061064:	d106      	bne.n	8061074 <InputCtrl_MainFunction+0x3f0>
	{
		if(StatusList_OutputValue[HC05_ARRPOS] == 0x04) StatusList_ComOutValue[HC05_ARRPOS] = 0;
 8061066:	4b1e      	ldr	r3, [pc, #120]	@ (80610e0 <InputCtrl_MainFunction+0x45c>)
 8061068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 806106a:	2b04      	cmp	r3, #4
 806106c:	d102      	bne.n	8061074 <InputCtrl_MainFunction+0x3f0>
 806106e:	4b1b      	ldr	r3, [pc, #108]	@ (80610dc <InputCtrl_MainFunction+0x458>)
 8061070:	2200      	movs	r2, #0
 8061072:	725a      	strb	r2, [r3, #9]
	else
	{
		/* Do nothing. */
	}
	/* Invalidate the input if not coded. */
	if(InputCtrl_CodingData[3] == 1)
 8061074:	4b17      	ldr	r3, [pc, #92]	@ (80610d4 <InputCtrl_MainFunction+0x450>)
 8061076:	68db      	ldr	r3, [r3, #12]
 8061078:	2b01      	cmp	r3, #1
 806107a:	d106      	bne.n	806108a <InputCtrl_MainFunction+0x406>
	{
		if(StatusList_OutputValue[HC05_ARRPOS] == 0x05) StatusList_ComOutValue[HC05_ARRPOS] = 0;
 806107c:	4b18      	ldr	r3, [pc, #96]	@ (80610e0 <InputCtrl_MainFunction+0x45c>)
 806107e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8061080:	2b05      	cmp	r3, #5
 8061082:	d102      	bne.n	806108a <InputCtrl_MainFunction+0x406>
 8061084:	4b15      	ldr	r3, [pc, #84]	@ (80610dc <InputCtrl_MainFunction+0x458>)
 8061086:	2200      	movs	r2, #0
 8061088:	725a      	strb	r2, [r3, #9]
	else
	{
		/* Do nothing. */
	}
	/* Invalidate the input if not coded. */
	if(InputCtrl_CodingData[4] == 1) StatusList_ComOutValue[RSNS_ARRPOS] = 0;
 806108a:	4b12      	ldr	r3, [pc, #72]	@ (80610d4 <InputCtrl_MainFunction+0x450>)
 806108c:	691b      	ldr	r3, [r3, #16]
 806108e:	2b01      	cmp	r3, #1
 8061090:	d102      	bne.n	8061098 <InputCtrl_MainFunction+0x414>
 8061092:	4b12      	ldr	r3, [pc, #72]	@ (80610dc <InputCtrl_MainFunction+0x458>)
 8061094:	2200      	movs	r2, #0
 8061096:	719a      	strb	r2, [r3, #6]
	else
	{
		/* Do nothing. */
	}
	/* Invalidate the input if not coded. */
	if(InputCtrl_CodingData[5] == 1) StatusList_ComOutValue[LSNS_ARRPOS] = 0;
 8061098:	4b0e      	ldr	r3, [pc, #56]	@ (80610d4 <InputCtrl_MainFunction+0x450>)
 806109a:	695b      	ldr	r3, [r3, #20]
 806109c:	2b01      	cmp	r3, #1
 806109e:	d102      	bne.n	80610a6 <InputCtrl_MainFunction+0x422>
 80610a0:	4b0e      	ldr	r3, [pc, #56]	@ (80610dc <InputCtrl_MainFunction+0x458>)
 80610a2:	2200      	movs	r2, #0
 80610a4:	715a      	strb	r2, [r3, #5]
	else
	{
		/* Do nothing. */
	}
	/* Invalidate the input if not coded. */
	if(InputCtrl_CodingData[6] == 1) StatusList_ComOutValue[AQSNS_ARRPOS] = 0;
 80610a6:	4b0b      	ldr	r3, [pc, #44]	@ (80610d4 <InputCtrl_MainFunction+0x450>)
 80610a8:	699b      	ldr	r3, [r3, #24]
 80610aa:	2b01      	cmp	r3, #1
 80610ac:	d102      	bne.n	80610b4 <InputCtrl_MainFunction+0x430>
 80610ae:	4b0b      	ldr	r3, [pc, #44]	@ (80610dc <InputCtrl_MainFunction+0x458>)
 80610b0:	2200      	movs	r2, #0
 80610b2:	71da      	strb	r2, [r3, #7]
	else
	{
		/* Do nothing. */
	}
	/* Invalidate the input if not coded. */
	if(InputCtrl_CodingData[7] == 1) StatusList_ComOutValue[GSNS_ARRPOS] = 0;
 80610b4:	4b07      	ldr	r3, [pc, #28]	@ (80610d4 <InputCtrl_MainFunction+0x450>)
 80610b6:	69db      	ldr	r3, [r3, #28]
 80610b8:	2b01      	cmp	r3, #1
 80610ba:	d102      	bne.n	80610c2 <InputCtrl_MainFunction+0x43e>
 80610bc:	4b07      	ldr	r3, [pc, #28]	@ (80610dc <InputCtrl_MainFunction+0x458>)
 80610be:	2200      	movs	r2, #0
 80610c0:	721a      	strb	r2, [r3, #8]
	else
	{
		/* Do nothing. */
	}
	/* Main counter. */
	InputCtrl_MainCounter++;
 80610c2:	4b08      	ldr	r3, [pc, #32]	@ (80610e4 <InputCtrl_MainFunction+0x460>)
 80610c4:	681b      	ldr	r3, [r3, #0]
 80610c6:	3301      	adds	r3, #1
 80610c8:	4a06      	ldr	r2, [pc, #24]	@ (80610e4 <InputCtrl_MainFunction+0x460>)
 80610ca:	6013      	str	r3, [r2, #0]
}
 80610cc:	bf00      	nop
 80610ce:	3708      	adds	r7, #8
 80610d0:	46bd      	mov	sp, r7
 80610d2:	bd80      	pop	{r7, pc}
 80610d4:	200102e4 	.word	0x200102e4
 80610d8:	2001021c 	.word	0x2001021c
 80610dc:	200102cc 	.word	0x200102cc
 80610e0:	200102a0 	.word	0x200102a0
 80610e4:	20010308 	.word	0x20010308

080610e8 <CanSpi_MainFunction>:
/* Receive function. */
uint8 CanSpi_Receive(CANSPI_uCAN_MSG *tempCanMsg);
/* FUNCTIONS STOP */
/* FUNCTIONS START */
void CanSpi_MainFunction(void)
{
 80610e8:	b5b0      	push	{r4, r5, r7, lr}
 80610ea:	b082      	sub	sp, #8
 80610ec:	af00      	add	r7, sp, #0
	/* Message received in buffers value. */
	static uint32 CanSpi_MessagesInBuffer_var = 0;
	/* Main counter. */
	static uint32 CanSpi_MainCounter = 0;
	/* Restore error state. */
	if(0 == hspi1.ErrorCode) for(uint8 i = 0; i < 7; i++) CanSpi_ErrorArr[i] = 0;
 80610ee:	4b0f      	ldr	r3, [pc, #60]	@ (806112c <CanSpi_MainFunction+0x44>)
 80610f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80610f2:	2b00      	cmp	r3, #0
 80610f4:	d10d      	bne.n	8061112 <CanSpi_MainFunction+0x2a>
 80610f6:	2300      	movs	r3, #0
 80610f8:	71fb      	strb	r3, [r7, #7]
 80610fa:	e007      	b.n	806110c <CanSpi_MainFunction+0x24>
 80610fc:	79fb      	ldrb	r3, [r7, #7]
 80610fe:	4a0c      	ldr	r2, [pc, #48]	@ (8061130 <CanSpi_MainFunction+0x48>)
 8061100:	2100      	movs	r1, #0
 8061102:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8061106:	79fb      	ldrb	r3, [r7, #7]
 8061108:	3301      	adds	r3, #1
 806110a:	71fb      	strb	r3, [r7, #7]
 806110c:	79fb      	ldrb	r3, [r7, #7]
 806110e:	2b06      	cmp	r3, #6
 8061110:	d9f4      	bls.n	80610fc <CanSpi_MainFunction+0x14>
	else
	{
		/* Do nothing. */
	}
	/* If XCP is active, call the XCP main function. */
	if(CanSpi_isXcpActive == 1) Xcp_MainFunction();
 8061112:	4b08      	ldr	r3, [pc, #32]	@ (8061134 <CanSpi_MainFunction+0x4c>)
 8061114:	781b      	ldrb	r3, [r3, #0]
 8061116:	2b01      	cmp	r3, #1
 8061118:	d101      	bne.n	806111e <CanSpi_MainFunction+0x36>
 806111a:	f001 faa9 	bl	8062670 <Xcp_MainFunction>
	else
	{
		/* Do nothing. */
	}
	/* Perform transceiver initialization. */
	if(CanSpi_MainCounter == 0) CanSpi_MCP2515_Reset();
 806111e:	4b06      	ldr	r3, [pc, #24]	@ (8061138 <CanSpi_MainFunction+0x50>)
 8061120:	681b      	ldr	r3, [r3, #0]
 8061122:	2b00      	cmp	r3, #0
 8061124:	d10a      	bne.n	806113c <CanSpi_MainFunction+0x54>
 8061126:	f000 ff57 	bl	8061fd8 <CanSpi_MCP2515_Reset>
 806112a:	e03f      	b.n	80611ac <CanSpi_MainFunction+0xc4>
 806112c:	20010a3c 	.word	0x20010a3c
 8061130:	20010318 	.word	0x20010318
 8061134:	200103c5 	.word	0x200103c5
 8061138:	200103c8 	.word	0x200103c8
	else if(1 == CanSpi_MainCounter)
 806113c:	4b97      	ldr	r3, [pc, #604]	@ (806139c <CanSpi_MainFunction+0x2b4>)
 806113e:	681b      	ldr	r3, [r3, #0]
 8061140:	2b01      	cmp	r3, #1
 8061142:	d133      	bne.n	80611ac <CanSpi_MainFunction+0xc4>
	{
		CanSpi_Initialize();
 8061144:	f000 fc0e 	bl	8061964 <CanSpi_Initialize>
		CanSpi_Communication_Status = PARTIAL_COMMUNICATION;
 8061148:	4b95      	ldr	r3, [pc, #596]	@ (80613a0 <CanSpi_MainFunction+0x2b8>)
 806114a:	2201      	movs	r2, #1
 806114c:	701a      	strb	r2, [r3, #0]
		CanSpi_TxFrame.frame.idType = 1;
 806114e:	4b95      	ldr	r3, [pc, #596]	@ (80613a4 <CanSpi_MainFunction+0x2bc>)
 8061150:	2201      	movs	r2, #1
 8061152:	701a      	strb	r2, [r3, #0]
		CanSpi_TxFrame.frame.id = 0x100;
 8061154:	4b93      	ldr	r3, [pc, #588]	@ (80613a4 <CanSpi_MainFunction+0x2bc>)
 8061156:	f44f 7280 	mov.w	r2, #256	@ 0x100
 806115a:	605a      	str	r2, [r3, #4]
		CanSpi_TxFrame.frame.dlc = 5;
 806115c:	4b91      	ldr	r3, [pc, #580]	@ (80613a4 <CanSpi_MainFunction+0x2bc>)
 806115e:	2205      	movs	r2, #5
 8061160:	721a      	strb	r2, [r3, #8]
		CanSpi_TxFrame.frame.data0 = 0;
 8061162:	4b90      	ldr	r3, [pc, #576]	@ (80613a4 <CanSpi_MainFunction+0x2bc>)
 8061164:	2200      	movs	r2, #0
 8061166:	725a      	strb	r2, [r3, #9]
		CanSpi_TxFrame.frame.data1 = 0;
 8061168:	4b8e      	ldr	r3, [pc, #568]	@ (80613a4 <CanSpi_MainFunction+0x2bc>)
 806116a:	2200      	movs	r2, #0
 806116c:	729a      	strb	r2, [r3, #10]
		CanSpi_TxFrame.frame.data2 = 0;
 806116e:	4b8d      	ldr	r3, [pc, #564]	@ (80613a4 <CanSpi_MainFunction+0x2bc>)
 8061170:	2200      	movs	r2, #0
 8061172:	72da      	strb	r2, [r3, #11]
		CanSpi_TxFrame.frame.data3 = 0;
 8061174:	4b8b      	ldr	r3, [pc, #556]	@ (80613a4 <CanSpi_MainFunction+0x2bc>)
 8061176:	2200      	movs	r2, #0
 8061178:	731a      	strb	r2, [r3, #12]
		CanSpi_TxFrame.frame.data4 = 0;
 806117a:	4b8a      	ldr	r3, [pc, #552]	@ (80613a4 <CanSpi_MainFunction+0x2bc>)
 806117c:	2200      	movs	r2, #0
 806117e:	735a      	strb	r2, [r3, #13]
		CanSpi_Transmit(&CanSpi_TxFrame);
 8061180:	4888      	ldr	r0, [pc, #544]	@ (80613a4 <CanSpi_MainFunction+0x2bc>)
 8061182:	f000 fc89 	bl	8061a98 <CanSpi_Transmit>
		CanSpi_TxFrame.frame.idType = 1;
 8061186:	4b87      	ldr	r3, [pc, #540]	@ (80613a4 <CanSpi_MainFunction+0x2bc>)
 8061188:	2201      	movs	r2, #1
 806118a:	701a      	strb	r2, [r3, #0]
		CanSpi_TxFrame.frame.id = 0x101;
 806118c:	4b85      	ldr	r3, [pc, #532]	@ (80613a4 <CanSpi_MainFunction+0x2bc>)
 806118e:	f240 1201 	movw	r2, #257	@ 0x101
 8061192:	605a      	str	r2, [r3, #4]
		CanSpi_TxFrame.frame.dlc = 2;
 8061194:	4b83      	ldr	r3, [pc, #524]	@ (80613a4 <CanSpi_MainFunction+0x2bc>)
 8061196:	2202      	movs	r2, #2
 8061198:	721a      	strb	r2, [r3, #8]
		CanSpi_TxFrame.frame.data0 = 0;
 806119a:	4b82      	ldr	r3, [pc, #520]	@ (80613a4 <CanSpi_MainFunction+0x2bc>)
 806119c:	2200      	movs	r2, #0
 806119e:	725a      	strb	r2, [r3, #9]
		CanSpi_TxFrame.frame.data1 = 0;
 80611a0:	4b80      	ldr	r3, [pc, #512]	@ (80613a4 <CanSpi_MainFunction+0x2bc>)
 80611a2:	2200      	movs	r2, #0
 80611a4:	729a      	strb	r2, [r3, #10]
		CanSpi_Transmit(&CanSpi_TxFrame);
 80611a6:	487f      	ldr	r0, [pc, #508]	@ (80613a4 <CanSpi_MainFunction+0x2bc>)
 80611a8:	f000 fc76 	bl	8061a98 <CanSpi_Transmit>
	else
	{
		/* Do nothing. */
	}
	/* Get the number of messages in the buffer now. */
	CanSpi_MessagesInBuffer_var = CanSpi_MessagesInBuffer();
 80611ac:	f000 fd75 	bl	8061c9a <CanSpi_MessagesInBuffer>
 80611b0:	4603      	mov	r3, r0
 80611b2:	4a7d      	ldr	r2, [pc, #500]	@ (80613a8 <CanSpi_MainFunction+0x2c0>)
 80611b4:	6013      	str	r3, [r2, #0]
	/* As long as there are messages in the buffers. */
	if(CanSpi_MessagesInBuffer_var != 0)
 80611b6:	4b7c      	ldr	r3, [pc, #496]	@ (80613a8 <CanSpi_MainFunction+0x2c0>)
 80611b8:	681b      	ldr	r3, [r3, #0]
 80611ba:	2b00      	cmp	r3, #0
 80611bc:	f000 8151 	beq.w	8061462 <CanSpi_MainFunction+0x37a>
	{
		/* Store them in the buffer 1 if it is empty. */
		if(CanSpi_RxFrame_Buffer0.frame.id == 0)
 80611c0:	4b7a      	ldr	r3, [pc, #488]	@ (80613ac <CanSpi_MainFunction+0x2c4>)
 80611c2:	685b      	ldr	r3, [r3, #4]
 80611c4:	2b00      	cmp	r3, #0
 80611c6:	d16d      	bne.n	80612a4 <CanSpi_MainFunction+0x1bc>
		{
			/* If RX is performed successfully. */
			if(CanSpi_Receive(&CanSpi_RxFrame_Buffer0) != 0)
 80611c8:	4878      	ldr	r0, [pc, #480]	@ (80613ac <CanSpi_MainFunction+0x2c4>)
 80611ca:	f000 fcdd 	bl	8061b88 <CanSpi_Receive>
 80611ce:	4603      	mov	r3, r0
 80611d0:	2b00      	cmp	r3, #0
 80611d2:	d067      	beq.n	80612a4 <CanSpi_MainFunction+0x1bc>
			{
				/* ClimateWiperControl */
				if(0x10A == CanSpi_RxFrame_Buffer0.frame.id)
 80611d4:	4b75      	ldr	r3, [pc, #468]	@ (80613ac <CanSpi_MainFunction+0x2c4>)
 80611d6:	685b      	ldr	r3, [r3, #4]
 80611d8:	f5b3 7f85 	cmp.w	r3, #266	@ 0x10a
 80611dc:	d113      	bne.n	8061206 <CanSpi_MainFunction+0x11e>
				{
					StatusBodyControl_FanValue = CanSpi_RxFrame_Buffer0.frame.data3;
 80611de:	4b73      	ldr	r3, [pc, #460]	@ (80613ac <CanSpi_MainFunction+0x2c4>)
 80611e0:	7b1a      	ldrb	r2, [r3, #12]
 80611e2:	4b73      	ldr	r3, [pc, #460]	@ (80613b0 <CanSpi_MainFunction+0x2c8>)
 80611e4:	701a      	strb	r2, [r3, #0]
					StatusBodyControl_Auto = CanSpi_RxFrame_Buffer0.frame.data0;
 80611e6:	4b71      	ldr	r3, [pc, #452]	@ (80613ac <CanSpi_MainFunction+0x2c4>)
 80611e8:	7a5a      	ldrb	r2, [r3, #9]
 80611ea:	4b72      	ldr	r3, [pc, #456]	@ (80613b4 <CanSpi_MainFunction+0x2cc>)
 80611ec:	701a      	strb	r2, [r3, #0]
					StatusBodyControl_Recirc = CanSpi_RxFrame_Buffer0.frame.data4;
 80611ee:	4b6f      	ldr	r3, [pc, #444]	@ (80613ac <CanSpi_MainFunction+0x2c4>)
 80611f0:	7b5a      	ldrb	r2, [r3, #13]
 80611f2:	4b71      	ldr	r3, [pc, #452]	@ (80613b8 <CanSpi_MainFunction+0x2d0>)
 80611f4:	701a      	strb	r2, [r3, #0]
					StatusBodyControl_Temperature = CanSpi_RxFrame_Buffer0.frame.data1;
 80611f6:	4b6d      	ldr	r3, [pc, #436]	@ (80613ac <CanSpi_MainFunction+0x2c4>)
 80611f8:	7a9a      	ldrb	r2, [r3, #10]
 80611fa:	4b70      	ldr	r3, [pc, #448]	@ (80613bc <CanSpi_MainFunction+0x2d4>)
 80611fc:	701a      	strb	r2, [r3, #0]
					WiperStock_VehicleState = CanSpi_RxFrame_Buffer0.frame.data6;
 80611fe:	4b6b      	ldr	r3, [pc, #428]	@ (80613ac <CanSpi_MainFunction+0x2c4>)
 8061200:	7bda      	ldrb	r2, [r3, #15]
 8061202:	4b6f      	ldr	r3, [pc, #444]	@ (80613c0 <CanSpi_MainFunction+0x2d8>)
 8061204:	701a      	strb	r2, [r3, #0]
				else
				{
					/* Do nothing. */
				}
				/* StatusBodyControl */
				if(0x98 == CanSpi_RxFrame_Buffer0.frame.id)
 8061206:	4b69      	ldr	r3, [pc, #420]	@ (80613ac <CanSpi_MainFunction+0x2c4>)
 8061208:	685b      	ldr	r3, [r3, #4]
 806120a:	2b98      	cmp	r3, #152	@ 0x98
 806120c:	d106      	bne.n	806121c <CanSpi_MainFunction+0x134>
				{
					StatusBodyControl_OutsideTemp = CanSpi_RxFrame_Buffer0.frame.data5;
 806120e:	4b67      	ldr	r3, [pc, #412]	@ (80613ac <CanSpi_MainFunction+0x2c4>)
 8061210:	7b9a      	ldrb	r2, [r3, #14]
 8061212:	4b6c      	ldr	r3, [pc, #432]	@ (80613c4 <CanSpi_MainFunction+0x2dc>)
 8061214:	701a      	strb	r2, [r3, #0]
					CanSpi_StatusBodyControl_MissCnt = 0;
 8061216:	4b6c      	ldr	r3, [pc, #432]	@ (80613c8 <CanSpi_MainFunction+0x2e0>)
 8061218:	2200      	movs	r2, #0
 806121a:	601a      	str	r2, [r3, #0]
				else
				{
					/* Do nothing. */
				}
				/* VehicleState Frame */
				if(CanSpi_RxFrame_Buffer0.frame.id == 0x097)
 806121c:	4b63      	ldr	r3, [pc, #396]	@ (80613ac <CanSpi_MainFunction+0x2c4>)
 806121e:	685b      	ldr	r3, [r3, #4]
 8061220:	2b97      	cmp	r3, #151	@ 0x97
 8061222:	d10a      	bne.n	806123a <CanSpi_MainFunction+0x152>
				{
					VehicleSpeed_VehicleState  = CanSpi_RxFrame_Buffer0.frame.data7;
 8061224:	4b61      	ldr	r3, [pc, #388]	@ (80613ac <CanSpi_MainFunction+0x2c4>)
 8061226:	7c1a      	ldrb	r2, [r3, #16]
 8061228:	4b68      	ldr	r3, [pc, #416]	@ (80613cc <CanSpi_MainFunction+0x2e4>)
 806122a:	701a      	strb	r2, [r3, #0]
					VehicleState_Rpm = CanSpi_RxFrame_Buffer0.frame.data6;
 806122c:	4b5f      	ldr	r3, [pc, #380]	@ (80613ac <CanSpi_MainFunction+0x2c4>)
 806122e:	7bda      	ldrb	r2, [r3, #15]
 8061230:	4b67      	ldr	r3, [pc, #412]	@ (80613d0 <CanSpi_MainFunction+0x2e8>)
 8061232:	701a      	strb	r2, [r3, #0]
					CanSpi_VehicleState_MissCnt = 0;
 8061234:	4b67      	ldr	r3, [pc, #412]	@ (80613d4 <CanSpi_MainFunction+0x2ec>)
 8061236:	2200      	movs	r2, #0
 8061238:	601a      	str	r2, [r3, #0]
				else
				{
					/* Do nothing. */
				}
				/* Networkmanagement3 Frame */
				if(CanSpi_RxFrame_Buffer0.frame.id == 0x510)
 806123a:	4b5c      	ldr	r3, [pc, #368]	@ (80613ac <CanSpi_MainFunction+0x2c4>)
 806123c:	685b      	ldr	r3, [r3, #4]
 806123e:	f5b3 6fa2 	cmp.w	r3, #1296	@ 0x510
 8061242:	d112      	bne.n	806126a <CanSpi_MainFunction+0x182>
				{
					if(CanSpi_RxFrame_Buffer0.frame.data0 == 0x10)
 8061244:	4b59      	ldr	r3, [pc, #356]	@ (80613ac <CanSpi_MainFunction+0x2c4>)
 8061246:	7a5b      	ldrb	r3, [r3, #9]
 8061248:	2b10      	cmp	r3, #16
 806124a:	d10e      	bne.n	806126a <CanSpi_MainFunction+0x182>
					{
						/* Update the status of the communication. */
						CanSpi_Networkmanagement3_Signal = CanSpi_RxFrame_Buffer0.frame.data0;
 806124c:	4b57      	ldr	r3, [pc, #348]	@ (80613ac <CanSpi_MainFunction+0x2c4>)
 806124e:	7a5a      	ldrb	r2, [r3, #9]
 8061250:	4b61      	ldr	r3, [pc, #388]	@ (80613d8 <CanSpi_MainFunction+0x2f0>)
 8061252:	701a      	strb	r2, [r3, #0]
						if(CC_ACTIVE != CanSpi_Communication_Status) CanSpi_Communication_Status = FULL_COMMUNICATION;
 8061254:	4b52      	ldr	r3, [pc, #328]	@ (80613a0 <CanSpi_MainFunction+0x2b8>)
 8061256:	781b      	ldrb	r3, [r3, #0]
 8061258:	2b03      	cmp	r3, #3
 806125a:	d002      	beq.n	8061262 <CanSpi_MainFunction+0x17a>
 806125c:	4b50      	ldr	r3, [pc, #320]	@ (80613a0 <CanSpi_MainFunction+0x2b8>)
 806125e:	2202      	movs	r2, #2
 8061260:	701a      	strb	r2, [r3, #0]
						else
						{
							/* Do nothing. */
						}
						CanSpi_Communication_StatusTimeout = 2000;
 8061262:	4b5e      	ldr	r3, [pc, #376]	@ (80613dc <CanSpi_MainFunction+0x2f4>)
 8061264:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8061268:	801a      	strh	r2, [r3, #0]
				else
				{
					/* Do nothing. */
				}
				/* XCP Frame */
				if(CanSpi_RxFrame_Buffer0.frame.id == 0x600)
 806126a:	4b50      	ldr	r3, [pc, #320]	@ (80613ac <CanSpi_MainFunction+0x2c4>)
 806126c:	685b      	ldr	r3, [r3, #4]
 806126e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8061272:	d10a      	bne.n	806128a <CanSpi_MainFunction+0x1a2>
				{
					CanSpi_isXcpActive = 1;
 8061274:	4b5a      	ldr	r3, [pc, #360]	@ (80613e0 <CanSpi_MainFunction+0x2f8>)
 8061276:	2201      	movs	r2, #1
 8061278:	701a      	strb	r2, [r3, #0]
					CanSpi_Xcp_RxBuffer = CanSpi_RxFrame_Buffer0;
 806127a:	4a5a      	ldr	r2, [pc, #360]	@ (80613e4 <CanSpi_MainFunction+0x2fc>)
 806127c:	4b4b      	ldr	r3, [pc, #300]	@ (80613ac <CanSpi_MainFunction+0x2c4>)
 806127e:	4614      	mov	r4, r2
 8061280:	461d      	mov	r5, r3
 8061282:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8061284:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8061286:	682b      	ldr	r3, [r5, #0]
 8061288:	6023      	str	r3, [r4, #0]
				else
				{
					/* Do nothing. */
				}
				/* Diagnostic request Frame */
				if(CanSpi_RxFrame_Buffer0.frame.id == 0x700) Dcm_DiagServiceRequest_Frame = CanSpi_RxFrame_Buffer0;
 806128a:	4b48      	ldr	r3, [pc, #288]	@ (80613ac <CanSpi_MainFunction+0x2c4>)
 806128c:	685b      	ldr	r3, [r3, #4]
 806128e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8061292:	d107      	bne.n	80612a4 <CanSpi_MainFunction+0x1bc>
 8061294:	4a54      	ldr	r2, [pc, #336]	@ (80613e8 <CanSpi_MainFunction+0x300>)
 8061296:	4b45      	ldr	r3, [pc, #276]	@ (80613ac <CanSpi_MainFunction+0x2c4>)
 8061298:	4614      	mov	r4, r2
 806129a:	461d      	mov	r5, r3
 806129c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 806129e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80612a0:	682b      	ldr	r3, [r5, #0]
 80612a2:	6023      	str	r3, [r4, #0]
		else
		{
			/* Do nothing. */
		}
		/* Store them in the buffer 2 if it is empty. */
		if(CanSpi_RxFrame_Buffer1.frame.id == 0)
 80612a4:	4b51      	ldr	r3, [pc, #324]	@ (80613ec <CanSpi_MainFunction+0x304>)
 80612a6:	685b      	ldr	r3, [r3, #4]
 80612a8:	2b00      	cmp	r3, #0
 80612aa:	d16d      	bne.n	8061388 <CanSpi_MainFunction+0x2a0>
		{
			if(CanSpi_Receive(&CanSpi_RxFrame_Buffer1) != 0)
 80612ac:	484f      	ldr	r0, [pc, #316]	@ (80613ec <CanSpi_MainFunction+0x304>)
 80612ae:	f000 fc6b 	bl	8061b88 <CanSpi_Receive>
 80612b2:	4603      	mov	r3, r0
 80612b4:	2b00      	cmp	r3, #0
 80612b6:	d067      	beq.n	8061388 <CanSpi_MainFunction+0x2a0>
			{
				/* ClimateWiperControl */
				if(0x10A == CanSpi_RxFrame_Buffer1.frame.id)
 80612b8:	4b4c      	ldr	r3, [pc, #304]	@ (80613ec <CanSpi_MainFunction+0x304>)
 80612ba:	685b      	ldr	r3, [r3, #4]
 80612bc:	f5b3 7f85 	cmp.w	r3, #266	@ 0x10a
 80612c0:	d113      	bne.n	80612ea <CanSpi_MainFunction+0x202>
				{
					StatusBodyControl_FanValue = CanSpi_RxFrame_Buffer1.frame.data3;
 80612c2:	4b4a      	ldr	r3, [pc, #296]	@ (80613ec <CanSpi_MainFunction+0x304>)
 80612c4:	7b1a      	ldrb	r2, [r3, #12]
 80612c6:	4b3a      	ldr	r3, [pc, #232]	@ (80613b0 <CanSpi_MainFunction+0x2c8>)
 80612c8:	701a      	strb	r2, [r3, #0]
					StatusBodyControl_Auto = CanSpi_RxFrame_Buffer1.frame.data0;
 80612ca:	4b48      	ldr	r3, [pc, #288]	@ (80613ec <CanSpi_MainFunction+0x304>)
 80612cc:	7a5a      	ldrb	r2, [r3, #9]
 80612ce:	4b39      	ldr	r3, [pc, #228]	@ (80613b4 <CanSpi_MainFunction+0x2cc>)
 80612d0:	701a      	strb	r2, [r3, #0]
					StatusBodyControl_Recirc = CanSpi_RxFrame_Buffer1.frame.data4;
 80612d2:	4b46      	ldr	r3, [pc, #280]	@ (80613ec <CanSpi_MainFunction+0x304>)
 80612d4:	7b5a      	ldrb	r2, [r3, #13]
 80612d6:	4b38      	ldr	r3, [pc, #224]	@ (80613b8 <CanSpi_MainFunction+0x2d0>)
 80612d8:	701a      	strb	r2, [r3, #0]
					StatusBodyControl_Temperature = CanSpi_RxFrame_Buffer1.frame.data1;
 80612da:	4b44      	ldr	r3, [pc, #272]	@ (80613ec <CanSpi_MainFunction+0x304>)
 80612dc:	7a9a      	ldrb	r2, [r3, #10]
 80612de:	4b37      	ldr	r3, [pc, #220]	@ (80613bc <CanSpi_MainFunction+0x2d4>)
 80612e0:	701a      	strb	r2, [r3, #0]
					WiperStock_VehicleState = CanSpi_RxFrame_Buffer1.frame.data6;
 80612e2:	4b42      	ldr	r3, [pc, #264]	@ (80613ec <CanSpi_MainFunction+0x304>)
 80612e4:	7bda      	ldrb	r2, [r3, #15]
 80612e6:	4b36      	ldr	r3, [pc, #216]	@ (80613c0 <CanSpi_MainFunction+0x2d8>)
 80612e8:	701a      	strb	r2, [r3, #0]
				else
				{
					/* Do nothing. */
				}
				/* StatusBodyControl */
				if(0x98 == CanSpi_RxFrame_Buffer1.frame.id)
 80612ea:	4b40      	ldr	r3, [pc, #256]	@ (80613ec <CanSpi_MainFunction+0x304>)
 80612ec:	685b      	ldr	r3, [r3, #4]
 80612ee:	2b98      	cmp	r3, #152	@ 0x98
 80612f0:	d106      	bne.n	8061300 <CanSpi_MainFunction+0x218>
				{
					StatusBodyControl_OutsideTemp = CanSpi_RxFrame_Buffer1.frame.data5;
 80612f2:	4b3e      	ldr	r3, [pc, #248]	@ (80613ec <CanSpi_MainFunction+0x304>)
 80612f4:	7b9a      	ldrb	r2, [r3, #14]
 80612f6:	4b33      	ldr	r3, [pc, #204]	@ (80613c4 <CanSpi_MainFunction+0x2dc>)
 80612f8:	701a      	strb	r2, [r3, #0]
					CanSpi_StatusBodyControl_MissCnt = 0;
 80612fa:	4b33      	ldr	r3, [pc, #204]	@ (80613c8 <CanSpi_MainFunction+0x2e0>)
 80612fc:	2200      	movs	r2, #0
 80612fe:	601a      	str	r2, [r3, #0]
				else
				{
					/* Do nothing. */
				}
				/* VehicleState Frame */
				if(CanSpi_RxFrame_Buffer1.frame.id == 0x097)
 8061300:	4b3a      	ldr	r3, [pc, #232]	@ (80613ec <CanSpi_MainFunction+0x304>)
 8061302:	685b      	ldr	r3, [r3, #4]
 8061304:	2b97      	cmp	r3, #151	@ 0x97
 8061306:	d10a      	bne.n	806131e <CanSpi_MainFunction+0x236>
				{
					VehicleSpeed_VehicleState  = CanSpi_RxFrame_Buffer1.frame.data7;
 8061308:	4b38      	ldr	r3, [pc, #224]	@ (80613ec <CanSpi_MainFunction+0x304>)
 806130a:	7c1a      	ldrb	r2, [r3, #16]
 806130c:	4b2f      	ldr	r3, [pc, #188]	@ (80613cc <CanSpi_MainFunction+0x2e4>)
 806130e:	701a      	strb	r2, [r3, #0]
					VehicleState_Rpm = CanSpi_RxFrame_Buffer1.frame.data6;
 8061310:	4b36      	ldr	r3, [pc, #216]	@ (80613ec <CanSpi_MainFunction+0x304>)
 8061312:	7bda      	ldrb	r2, [r3, #15]
 8061314:	4b2e      	ldr	r3, [pc, #184]	@ (80613d0 <CanSpi_MainFunction+0x2e8>)
 8061316:	701a      	strb	r2, [r3, #0]
					CanSpi_VehicleState_MissCnt = 0;
 8061318:	4b2e      	ldr	r3, [pc, #184]	@ (80613d4 <CanSpi_MainFunction+0x2ec>)
 806131a:	2200      	movs	r2, #0
 806131c:	601a      	str	r2, [r3, #0]
				else
				{
					/* Do nothing. */
				}
				/* Networkmanagement3 Frame */
				if(CanSpi_RxFrame_Buffer1.frame.id == 0x510)
 806131e:	4b33      	ldr	r3, [pc, #204]	@ (80613ec <CanSpi_MainFunction+0x304>)
 8061320:	685b      	ldr	r3, [r3, #4]
 8061322:	f5b3 6fa2 	cmp.w	r3, #1296	@ 0x510
 8061326:	d112      	bne.n	806134e <CanSpi_MainFunction+0x266>
				{
					if(CanSpi_RxFrame_Buffer1.frame.data0 == 0x10)
 8061328:	4b30      	ldr	r3, [pc, #192]	@ (80613ec <CanSpi_MainFunction+0x304>)
 806132a:	7a5b      	ldrb	r3, [r3, #9]
 806132c:	2b10      	cmp	r3, #16
 806132e:	d10e      	bne.n	806134e <CanSpi_MainFunction+0x266>
					{
						/* Update the status of the communication. */
						CanSpi_Networkmanagement3_Signal = CanSpi_RxFrame_Buffer1.frame.data0;
 8061330:	4b2e      	ldr	r3, [pc, #184]	@ (80613ec <CanSpi_MainFunction+0x304>)
 8061332:	7a5a      	ldrb	r2, [r3, #9]
 8061334:	4b28      	ldr	r3, [pc, #160]	@ (80613d8 <CanSpi_MainFunction+0x2f0>)
 8061336:	701a      	strb	r2, [r3, #0]
						if(CC_ACTIVE != CanSpi_Communication_Status) CanSpi_Communication_Status = FULL_COMMUNICATION;
 8061338:	4b19      	ldr	r3, [pc, #100]	@ (80613a0 <CanSpi_MainFunction+0x2b8>)
 806133a:	781b      	ldrb	r3, [r3, #0]
 806133c:	2b03      	cmp	r3, #3
 806133e:	d002      	beq.n	8061346 <CanSpi_MainFunction+0x25e>
 8061340:	4b17      	ldr	r3, [pc, #92]	@ (80613a0 <CanSpi_MainFunction+0x2b8>)
 8061342:	2202      	movs	r2, #2
 8061344:	701a      	strb	r2, [r3, #0]
						else
						{
							/* Do nothing. */
						}
						CanSpi_Communication_StatusTimeout = 2000;
 8061346:	4b25      	ldr	r3, [pc, #148]	@ (80613dc <CanSpi_MainFunction+0x2f4>)
 8061348:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 806134c:	801a      	strh	r2, [r3, #0]
				else
				{
					/* Do nothing. */
				}
				/* XCP Frame */
				if(CanSpi_RxFrame_Buffer1.frame.id == 0x600)
 806134e:	4b27      	ldr	r3, [pc, #156]	@ (80613ec <CanSpi_MainFunction+0x304>)
 8061350:	685b      	ldr	r3, [r3, #4]
 8061352:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8061356:	d10a      	bne.n	806136e <CanSpi_MainFunction+0x286>
				{
					CanSpi_isXcpActive = 1;
 8061358:	4b21      	ldr	r3, [pc, #132]	@ (80613e0 <CanSpi_MainFunction+0x2f8>)
 806135a:	2201      	movs	r2, #1
 806135c:	701a      	strb	r2, [r3, #0]
					CanSpi_Xcp_RxBuffer = CanSpi_RxFrame_Buffer1;
 806135e:	4a21      	ldr	r2, [pc, #132]	@ (80613e4 <CanSpi_MainFunction+0x2fc>)
 8061360:	4b22      	ldr	r3, [pc, #136]	@ (80613ec <CanSpi_MainFunction+0x304>)
 8061362:	4614      	mov	r4, r2
 8061364:	461d      	mov	r5, r3
 8061366:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8061368:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 806136a:	682b      	ldr	r3, [r5, #0]
 806136c:	6023      	str	r3, [r4, #0]
				else
				{
					/* Do nothing. */
				}
				/* Diagnostic request Frame */
				if(CanSpi_RxFrame_Buffer1.frame.id == 0x700) Dcm_DiagServiceRequest_Frame = CanSpi_RxFrame_Buffer1;
 806136e:	4b1f      	ldr	r3, [pc, #124]	@ (80613ec <CanSpi_MainFunction+0x304>)
 8061370:	685b      	ldr	r3, [r3, #4]
 8061372:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8061376:	d107      	bne.n	8061388 <CanSpi_MainFunction+0x2a0>
 8061378:	4a1b      	ldr	r2, [pc, #108]	@ (80613e8 <CanSpi_MainFunction+0x300>)
 806137a:	4b1c      	ldr	r3, [pc, #112]	@ (80613ec <CanSpi_MainFunction+0x304>)
 806137c:	4614      	mov	r4, r2
 806137e:	461d      	mov	r5, r3
 8061380:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8061382:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8061384:	682b      	ldr	r3, [r5, #0]
 8061386:	6023      	str	r3, [r4, #0]
		else
		{
			/* Do nothing. */
		}
		/* Reset the buffers. */
		CanSpi_RxFrame_Buffer0.frame.idType = 0;
 8061388:	4b08      	ldr	r3, [pc, #32]	@ (80613ac <CanSpi_MainFunction+0x2c4>)
 806138a:	2200      	movs	r2, #0
 806138c:	701a      	strb	r2, [r3, #0]
		CanSpi_RxFrame_Buffer0.frame.id = 0;
 806138e:	4b07      	ldr	r3, [pc, #28]	@ (80613ac <CanSpi_MainFunction+0x2c4>)
 8061390:	2200      	movs	r2, #0
 8061392:	605a      	str	r2, [r3, #4]
		CanSpi_RxFrame_Buffer0.frame.dlc = 0;
 8061394:	4b05      	ldr	r3, [pc, #20]	@ (80613ac <CanSpi_MainFunction+0x2c4>)
 8061396:	2200      	movs	r2, #0
 8061398:	721a      	strb	r2, [r3, #8]
 806139a:	e029      	b.n	80613f0 <CanSpi_MainFunction+0x308>
 806139c:	200103c8 	.word	0x200103c8
 80613a0:	20010348 	.word	0x20010348
 80613a4:	200103cc 	.word	0x200103cc
 80613a8:	200103e0 	.word	0x200103e0
 80613ac:	2001034c 	.word	0x2001034c
 80613b0:	200101b1 	.word	0x200101b1
 80613b4:	200101b2 	.word	0x200101b2
 80613b8:	200101b3 	.word	0x200101b3
 80613bc:	200101b4 	.word	0x200101b4
 80613c0:	200101ef 	.word	0x200101ef
 80613c4:	200101b5 	.word	0x200101b5
 80613c8:	20010310 	.word	0x20010310
 80613cc:	200101ee 	.word	0x200101ee
 80613d0:	2001030c 	.word	0x2001030c
 80613d4:	20010314 	.word	0x20010314
 80613d8:	200103c4 	.word	0x200103c4
 80613dc:	2001001e 	.word	0x2001001e
 80613e0:	200103c5 	.word	0x200103c5
 80613e4:	2001039c 	.word	0x2001039c
 80613e8:	20010388 	.word	0x20010388
 80613ec:	20010360 	.word	0x20010360
		CanSpi_RxFrame_Buffer0.frame.data0 = 0;
 80613f0:	4ba1      	ldr	r3, [pc, #644]	@ (8061678 <CanSpi_MainFunction+0x590>)
 80613f2:	2200      	movs	r2, #0
 80613f4:	725a      	strb	r2, [r3, #9]
		CanSpi_RxFrame_Buffer0.frame.data1 = 0;
 80613f6:	4ba0      	ldr	r3, [pc, #640]	@ (8061678 <CanSpi_MainFunction+0x590>)
 80613f8:	2200      	movs	r2, #0
 80613fa:	729a      	strb	r2, [r3, #10]
		CanSpi_RxFrame_Buffer0.frame.data2 = 0;
 80613fc:	4b9e      	ldr	r3, [pc, #632]	@ (8061678 <CanSpi_MainFunction+0x590>)
 80613fe:	2200      	movs	r2, #0
 8061400:	72da      	strb	r2, [r3, #11]
		CanSpi_RxFrame_Buffer0.frame.data3 = 0;
 8061402:	4b9d      	ldr	r3, [pc, #628]	@ (8061678 <CanSpi_MainFunction+0x590>)
 8061404:	2200      	movs	r2, #0
 8061406:	731a      	strb	r2, [r3, #12]
		CanSpi_RxFrame_Buffer0.frame.data4 = 0;
 8061408:	4b9b      	ldr	r3, [pc, #620]	@ (8061678 <CanSpi_MainFunction+0x590>)
 806140a:	2200      	movs	r2, #0
 806140c:	735a      	strb	r2, [r3, #13]
		CanSpi_RxFrame_Buffer0.frame.data5 = 0;
 806140e:	4b9a      	ldr	r3, [pc, #616]	@ (8061678 <CanSpi_MainFunction+0x590>)
 8061410:	2200      	movs	r2, #0
 8061412:	739a      	strb	r2, [r3, #14]
		CanSpi_RxFrame_Buffer0.frame.data6 = 0;
 8061414:	4b98      	ldr	r3, [pc, #608]	@ (8061678 <CanSpi_MainFunction+0x590>)
 8061416:	2200      	movs	r2, #0
 8061418:	73da      	strb	r2, [r3, #15]
		CanSpi_RxFrame_Buffer0.frame.data7 = 0;
 806141a:	4b97      	ldr	r3, [pc, #604]	@ (8061678 <CanSpi_MainFunction+0x590>)
 806141c:	2200      	movs	r2, #0
 806141e:	741a      	strb	r2, [r3, #16]
		CanSpi_RxFrame_Buffer1.frame.idType = 0;
 8061420:	4b96      	ldr	r3, [pc, #600]	@ (806167c <CanSpi_MainFunction+0x594>)
 8061422:	2200      	movs	r2, #0
 8061424:	701a      	strb	r2, [r3, #0]
		CanSpi_RxFrame_Buffer1.frame.id = 0;
 8061426:	4b95      	ldr	r3, [pc, #596]	@ (806167c <CanSpi_MainFunction+0x594>)
 8061428:	2200      	movs	r2, #0
 806142a:	605a      	str	r2, [r3, #4]
		CanSpi_RxFrame_Buffer1.frame.dlc = 0;
 806142c:	4b93      	ldr	r3, [pc, #588]	@ (806167c <CanSpi_MainFunction+0x594>)
 806142e:	2200      	movs	r2, #0
 8061430:	721a      	strb	r2, [r3, #8]
		CanSpi_RxFrame_Buffer1.frame.data0 = 0;
 8061432:	4b92      	ldr	r3, [pc, #584]	@ (806167c <CanSpi_MainFunction+0x594>)
 8061434:	2200      	movs	r2, #0
 8061436:	725a      	strb	r2, [r3, #9]
		CanSpi_RxFrame_Buffer1.frame.data1 = 0;
 8061438:	4b90      	ldr	r3, [pc, #576]	@ (806167c <CanSpi_MainFunction+0x594>)
 806143a:	2200      	movs	r2, #0
 806143c:	729a      	strb	r2, [r3, #10]
		CanSpi_RxFrame_Buffer1.frame.data2 = 0;
 806143e:	4b8f      	ldr	r3, [pc, #572]	@ (806167c <CanSpi_MainFunction+0x594>)
 8061440:	2200      	movs	r2, #0
 8061442:	72da      	strb	r2, [r3, #11]
		CanSpi_RxFrame_Buffer1.frame.data3 = 0;
 8061444:	4b8d      	ldr	r3, [pc, #564]	@ (806167c <CanSpi_MainFunction+0x594>)
 8061446:	2200      	movs	r2, #0
 8061448:	731a      	strb	r2, [r3, #12]
		CanSpi_RxFrame_Buffer1.frame.data4 = 0;
 806144a:	4b8c      	ldr	r3, [pc, #560]	@ (806167c <CanSpi_MainFunction+0x594>)
 806144c:	2200      	movs	r2, #0
 806144e:	735a      	strb	r2, [r3, #13]
		CanSpi_RxFrame_Buffer1.frame.data5 = 0;
 8061450:	4b8a      	ldr	r3, [pc, #552]	@ (806167c <CanSpi_MainFunction+0x594>)
 8061452:	2200      	movs	r2, #0
 8061454:	739a      	strb	r2, [r3, #14]
		CanSpi_RxFrame_Buffer1.frame.data6 = 0;
 8061456:	4b89      	ldr	r3, [pc, #548]	@ (806167c <CanSpi_MainFunction+0x594>)
 8061458:	2200      	movs	r2, #0
 806145a:	73da      	strb	r2, [r3, #15]
		CanSpi_RxFrame_Buffer1.frame.data7 = 0;
 806145c:	4b87      	ldr	r3, [pc, #540]	@ (806167c <CanSpi_MainFunction+0x594>)
 806145e:	2200      	movs	r2, #0
 8061460:	741a      	strb	r2, [r3, #16]
	}
	/* Get the error status. */
	errorStatus = HAL_SPI_GetError(&hspi1);
 8061462:	4887      	ldr	r0, [pc, #540]	@ (8061680 <CanSpi_MainFunction+0x598>)
 8061464:	f009 fae8 	bl	806aa38 <HAL_SPI_GetError>
 8061468:	4603      	mov	r3, r0
 806146a:	4a86      	ldr	r2, [pc, #536]	@ (8061684 <CanSpi_MainFunction+0x59c>)
 806146c:	6013      	str	r3, [r2, #0]
	/* If error is detected, call the callback. */
	if(errorStatus != 0) HAL_SPI_ErrorCallback(&hspi1);
 806146e:	4b85      	ldr	r3, [pc, #532]	@ (8061684 <CanSpi_MainFunction+0x59c>)
 8061470:	681b      	ldr	r3, [r3, #0]
 8061472:	2b00      	cmp	r3, #0
 8061474:	d002      	beq.n	806147c <CanSpi_MainFunction+0x394>
 8061476:	4882      	ldr	r0, [pc, #520]	@ (8061680 <CanSpi_MainFunction+0x598>)
 8061478:	f000 f9de 	bl	8061838 <HAL_SPI_ErrorCallback>
	else
	{
		/* Do nothing. */
	}
	/* Check for RX error. */
	if(CanSpi_IsRxErrorPassive() != 0 && 0 == CanSpi_MainCounter % 20 && 0 != CanSpi_MainCounter) CanSpi_Bus_ErrorArr[0]++;
 806147c:	f000 fc48 	bl	8061d10 <CanSpi_IsRxErrorPassive>
 8061480:	4603      	mov	r3, r0
 8061482:	2b00      	cmp	r3, #0
 8061484:	d016      	beq.n	80614b4 <CanSpi_MainFunction+0x3cc>
 8061486:	4b80      	ldr	r3, [pc, #512]	@ (8061688 <CanSpi_MainFunction+0x5a0>)
 8061488:	6819      	ldr	r1, [r3, #0]
 806148a:	4b80      	ldr	r3, [pc, #512]	@ (806168c <CanSpi_MainFunction+0x5a4>)
 806148c:	fba3 2301 	umull	r2, r3, r3, r1
 8061490:	091a      	lsrs	r2, r3, #4
 8061492:	4613      	mov	r3, r2
 8061494:	009b      	lsls	r3, r3, #2
 8061496:	4413      	add	r3, r2
 8061498:	009b      	lsls	r3, r3, #2
 806149a:	1aca      	subs	r2, r1, r3
 806149c:	2a00      	cmp	r2, #0
 806149e:	d109      	bne.n	80614b4 <CanSpi_MainFunction+0x3cc>
 80614a0:	4b79      	ldr	r3, [pc, #484]	@ (8061688 <CanSpi_MainFunction+0x5a0>)
 80614a2:	681b      	ldr	r3, [r3, #0]
 80614a4:	2b00      	cmp	r3, #0
 80614a6:	d005      	beq.n	80614b4 <CanSpi_MainFunction+0x3cc>
 80614a8:	4b79      	ldr	r3, [pc, #484]	@ (8061690 <CanSpi_MainFunction+0x5a8>)
 80614aa:	681b      	ldr	r3, [r3, #0]
 80614ac:	3301      	adds	r3, #1
 80614ae:	4a78      	ldr	r2, [pc, #480]	@ (8061690 <CanSpi_MainFunction+0x5a8>)
 80614b0:	6013      	str	r3, [r2, #0]
 80614b2:	e002      	b.n	80614ba <CanSpi_MainFunction+0x3d2>
	else CanSpi_Bus_ErrorArr[0] = 0;
 80614b4:	4b76      	ldr	r3, [pc, #472]	@ (8061690 <CanSpi_MainFunction+0x5a8>)
 80614b6:	2200      	movs	r2, #0
 80614b8:	601a      	str	r2, [r3, #0]
	/* Check for TX error. */
	if(CanSpi_IsTxErrorPassive() != 0 && 0 == CanSpi_MainCounter % 20 && 0 != CanSpi_MainCounter) CanSpi_Bus_ErrorArr[1]++;
 80614ba:	f000 fc42 	bl	8061d42 <CanSpi_IsTxErrorPassive>
 80614be:	4603      	mov	r3, r0
 80614c0:	2b00      	cmp	r3, #0
 80614c2:	d016      	beq.n	80614f2 <CanSpi_MainFunction+0x40a>
 80614c4:	4b70      	ldr	r3, [pc, #448]	@ (8061688 <CanSpi_MainFunction+0x5a0>)
 80614c6:	6819      	ldr	r1, [r3, #0]
 80614c8:	4b70      	ldr	r3, [pc, #448]	@ (806168c <CanSpi_MainFunction+0x5a4>)
 80614ca:	fba3 2301 	umull	r2, r3, r3, r1
 80614ce:	091a      	lsrs	r2, r3, #4
 80614d0:	4613      	mov	r3, r2
 80614d2:	009b      	lsls	r3, r3, #2
 80614d4:	4413      	add	r3, r2
 80614d6:	009b      	lsls	r3, r3, #2
 80614d8:	1aca      	subs	r2, r1, r3
 80614da:	2a00      	cmp	r2, #0
 80614dc:	d109      	bne.n	80614f2 <CanSpi_MainFunction+0x40a>
 80614de:	4b6a      	ldr	r3, [pc, #424]	@ (8061688 <CanSpi_MainFunction+0x5a0>)
 80614e0:	681b      	ldr	r3, [r3, #0]
 80614e2:	2b00      	cmp	r3, #0
 80614e4:	d005      	beq.n	80614f2 <CanSpi_MainFunction+0x40a>
 80614e6:	4b6a      	ldr	r3, [pc, #424]	@ (8061690 <CanSpi_MainFunction+0x5a8>)
 80614e8:	685b      	ldr	r3, [r3, #4]
 80614ea:	3301      	adds	r3, #1
 80614ec:	4a68      	ldr	r2, [pc, #416]	@ (8061690 <CanSpi_MainFunction+0x5a8>)
 80614ee:	6053      	str	r3, [r2, #4]
 80614f0:	e002      	b.n	80614f8 <CanSpi_MainFunction+0x410>
	else CanSpi_Bus_ErrorArr[1] = 0;
 80614f2:	4b67      	ldr	r3, [pc, #412]	@ (8061690 <CanSpi_MainFunction+0x5a8>)
 80614f4:	2200      	movs	r2, #0
 80614f6:	605a      	str	r2, [r3, #4]
	/* Check for bus off error. */
	if(CanSpi_IsBussOff() != 0 && 0 == CanSpi_MainCounter % 20 && 0 != CanSpi_MainCounter)
 80614f8:	f000 fbf1 	bl	8061cde <CanSpi_IsBussOff>
 80614fc:	4603      	mov	r3, r0
 80614fe:	2b00      	cmp	r3, #0
 8061500:	d01a      	beq.n	8061538 <CanSpi_MainFunction+0x450>
 8061502:	4b61      	ldr	r3, [pc, #388]	@ (8061688 <CanSpi_MainFunction+0x5a0>)
 8061504:	6819      	ldr	r1, [r3, #0]
 8061506:	4b61      	ldr	r3, [pc, #388]	@ (806168c <CanSpi_MainFunction+0x5a4>)
 8061508:	fba3 2301 	umull	r2, r3, r3, r1
 806150c:	091a      	lsrs	r2, r3, #4
 806150e:	4613      	mov	r3, r2
 8061510:	009b      	lsls	r3, r3, #2
 8061512:	4413      	add	r3, r2
 8061514:	009b      	lsls	r3, r3, #2
 8061516:	1aca      	subs	r2, r1, r3
 8061518:	2a00      	cmp	r2, #0
 806151a:	d10d      	bne.n	8061538 <CanSpi_MainFunction+0x450>
 806151c:	4b5a      	ldr	r3, [pc, #360]	@ (8061688 <CanSpi_MainFunction+0x5a0>)
 806151e:	681b      	ldr	r3, [r3, #0]
 8061520:	2b00      	cmp	r3, #0
 8061522:	d009      	beq.n	8061538 <CanSpi_MainFunction+0x450>
	{
		CanSpi_Bus_ErrorArr[2]++;
 8061524:	4b5a      	ldr	r3, [pc, #360]	@ (8061690 <CanSpi_MainFunction+0x5a8>)
 8061526:	689b      	ldr	r3, [r3, #8]
 8061528:	3301      	adds	r3, #1
 806152a:	4a59      	ldr	r2, [pc, #356]	@ (8061690 <CanSpi_MainFunction+0x5a8>)
 806152c:	6093      	str	r3, [r2, #8]
		Dem_SaveDtc(0x0D, 1);
 806152e:	2101      	movs	r1, #1
 8061530:	200d      	movs	r0, #13
 8061532:	f003 f989 	bl	8064848 <Dem_SaveDtc>
 8061536:	e006      	b.n	8061546 <CanSpi_MainFunction+0x45e>
	}
	else
	{
		CanSpi_Bus_ErrorArr[2] = 0;
 8061538:	4b55      	ldr	r3, [pc, #340]	@ (8061690 <CanSpi_MainFunction+0x5a8>)
 806153a:	2200      	movs	r2, #0
 806153c:	609a      	str	r2, [r3, #8]
		Dem_SaveDtc(0x0D, 0);
 806153e:	2100      	movs	r1, #0
 8061540:	200d      	movs	r0, #13
 8061542:	f003 f981 	bl	8064848 <Dem_SaveDtc>
	}
	/* If ignition processed value is greater than zero. */
	if((StatusList_ComOutValue[0] != 0))
 8061546:	4b53      	ldr	r3, [pc, #332]	@ (8061694 <CanSpi_MainFunction+0x5ac>)
 8061548:	781b      	ldrb	r3, [r3, #0]
 806154a:	2b00      	cmp	r3, #0
 806154c:	d007      	beq.n	806155e <CanSpi_MainFunction+0x476>
	{
		/* Set the communication status. */
		if(CanSpi_Communication_Status == NO_COMMUNICATION) CanSpi_Communication_Status = PARTIAL_COMMUNICATION;
 806154e:	4b52      	ldr	r3, [pc, #328]	@ (8061698 <CanSpi_MainFunction+0x5b0>)
 8061550:	781b      	ldrb	r3, [r3, #0]
 8061552:	2b00      	cmp	r3, #0
 8061554:	d10a      	bne.n	806156c <CanSpi_MainFunction+0x484>
 8061556:	4b50      	ldr	r3, [pc, #320]	@ (8061698 <CanSpi_MainFunction+0x5b0>)
 8061558:	2201      	movs	r2, #1
 806155a:	701a      	strb	r2, [r3, #0]
 806155c:	e006      	b.n	806156c <CanSpi_MainFunction+0x484>
		}
	}
	else
	{
		/* Set the communication status. */
		if(CanSpi_Communication_Status == PARTIAL_COMMUNICATION) CanSpi_Communication_Status = NO_COMMUNICATION;
 806155e:	4b4e      	ldr	r3, [pc, #312]	@ (8061698 <CanSpi_MainFunction+0x5b0>)
 8061560:	781b      	ldrb	r3, [r3, #0]
 8061562:	2b01      	cmp	r3, #1
 8061564:	d102      	bne.n	806156c <CanSpi_MainFunction+0x484>
 8061566:	4b4c      	ldr	r3, [pc, #304]	@ (8061698 <CanSpi_MainFunction+0x5b0>)
 8061568:	2200      	movs	r2, #0
 806156a:	701a      	strb	r2, [r3, #0]
		{
			/* Do nothing. */
		}
	}
	/* Decrease the timeout counter. */
	if(CanSpi_Communication_StatusTimeout != 0) CanSpi_Communication_StatusTimeout--;
 806156c:	4b4b      	ldr	r3, [pc, #300]	@ (806169c <CanSpi_MainFunction+0x5b4>)
 806156e:	881b      	ldrh	r3, [r3, #0]
 8061570:	2b00      	cmp	r3, #0
 8061572:	d006      	beq.n	8061582 <CanSpi_MainFunction+0x49a>
 8061574:	4b49      	ldr	r3, [pc, #292]	@ (806169c <CanSpi_MainFunction+0x5b4>)
 8061576:	881b      	ldrh	r3, [r3, #0]
 8061578:	3b01      	subs	r3, #1
 806157a:	b29a      	uxth	r2, r3
 806157c:	4b47      	ldr	r3, [pc, #284]	@ (806169c <CanSpi_MainFunction+0x5b4>)
 806157e:	801a      	strh	r2, [r3, #0]
 8061580:	e00a      	b.n	8061598 <CanSpi_MainFunction+0x4b0>
	/* Set the communication status. */
	else if((CanSpi_Communication_StatusTimeout == 0) && (CanSpi_Communication_Status == FULL_COMMUNICATION)) CanSpi_Communication_Status = PARTIAL_COMMUNICATION;
 8061582:	4b46      	ldr	r3, [pc, #280]	@ (806169c <CanSpi_MainFunction+0x5b4>)
 8061584:	881b      	ldrh	r3, [r3, #0]
 8061586:	2b00      	cmp	r3, #0
 8061588:	d106      	bne.n	8061598 <CanSpi_MainFunction+0x4b0>
 806158a:	4b43      	ldr	r3, [pc, #268]	@ (8061698 <CanSpi_MainFunction+0x5b0>)
 806158c:	781b      	ldrb	r3, [r3, #0]
 806158e:	2b02      	cmp	r3, #2
 8061590:	d102      	bne.n	8061598 <CanSpi_MainFunction+0x4b0>
 8061592:	4b41      	ldr	r3, [pc, #260]	@ (8061698 <CanSpi_MainFunction+0x5b0>)
 8061594:	2201      	movs	r2, #1
 8061596:	701a      	strb	r2, [r3, #0]
	else
	{
		/* Do nothing. */
	}
	/* If communication status is full or partial. */
	if(CanSpi_Bus_ErrorArr[0] == 0
 8061598:	4b3d      	ldr	r3, [pc, #244]	@ (8061690 <CanSpi_MainFunction+0x5a8>)
 806159a:	681b      	ldr	r3, [r3, #0]
 806159c:	2b00      	cmp	r3, #0
 806159e:	f040 8116 	bne.w	80617ce <CanSpi_MainFunction+0x6e6>
			&& CanSpi_Bus_ErrorArr[1] == 0
 80615a2:	4b3b      	ldr	r3, [pc, #236]	@ (8061690 <CanSpi_MainFunction+0x5a8>)
 80615a4:	685b      	ldr	r3, [r3, #4]
 80615a6:	2b00      	cmp	r3, #0
 80615a8:	f040 8111 	bne.w	80617ce <CanSpi_MainFunction+0x6e6>
			&& CanSpi_Bus_ErrorArr[2] == 0
 80615ac:	4b38      	ldr	r3, [pc, #224]	@ (8061690 <CanSpi_MainFunction+0x5a8>)
 80615ae:	689b      	ldr	r3, [r3, #8]
 80615b0:	2b00      	cmp	r3, #0
 80615b2:	f040 810c 	bne.w	80617ce <CanSpi_MainFunction+0x6e6>
			&& CanSpi_ErrorArr[0] == 0
 80615b6:	4b3a      	ldr	r3, [pc, #232]	@ (80616a0 <CanSpi_MainFunction+0x5b8>)
 80615b8:	681b      	ldr	r3, [r3, #0]
 80615ba:	2b00      	cmp	r3, #0
 80615bc:	f040 8107 	bne.w	80617ce <CanSpi_MainFunction+0x6e6>
			&& CanSpi_ErrorArr[1] == 0
 80615c0:	4b37      	ldr	r3, [pc, #220]	@ (80616a0 <CanSpi_MainFunction+0x5b8>)
 80615c2:	685b      	ldr	r3, [r3, #4]
 80615c4:	2b00      	cmp	r3, #0
 80615c6:	f040 8102 	bne.w	80617ce <CanSpi_MainFunction+0x6e6>
			&& CanSpi_ErrorArr[2] == 0
 80615ca:	4b35      	ldr	r3, [pc, #212]	@ (80616a0 <CanSpi_MainFunction+0x5b8>)
 80615cc:	689b      	ldr	r3, [r3, #8]
 80615ce:	2b00      	cmp	r3, #0
 80615d0:	f040 80fd 	bne.w	80617ce <CanSpi_MainFunction+0x6e6>
			&& CanSpi_ErrorArr[3] == 0
 80615d4:	4b32      	ldr	r3, [pc, #200]	@ (80616a0 <CanSpi_MainFunction+0x5b8>)
 80615d6:	68db      	ldr	r3, [r3, #12]
 80615d8:	2b00      	cmp	r3, #0
 80615da:	f040 80f8 	bne.w	80617ce <CanSpi_MainFunction+0x6e6>
			&& CanSpi_ErrorArr[4] == 0
 80615de:	4b30      	ldr	r3, [pc, #192]	@ (80616a0 <CanSpi_MainFunction+0x5b8>)
 80615e0:	691b      	ldr	r3, [r3, #16]
 80615e2:	2b00      	cmp	r3, #0
 80615e4:	f040 80f3 	bne.w	80617ce <CanSpi_MainFunction+0x6e6>
			&& CanSpi_ErrorArr[5] == 0
 80615e8:	4b2d      	ldr	r3, [pc, #180]	@ (80616a0 <CanSpi_MainFunction+0x5b8>)
 80615ea:	695b      	ldr	r3, [r3, #20]
 80615ec:	2b00      	cmp	r3, #0
 80615ee:	f040 80ee 	bne.w	80617ce <CanSpi_MainFunction+0x6e6>
			&& CanSpi_ErrorArr[6] == 0
 80615f2:	4b2b      	ldr	r3, [pc, #172]	@ (80616a0 <CanSpi_MainFunction+0x5b8>)
 80615f4:	699b      	ldr	r3, [r3, #24]
 80615f6:	2b00      	cmp	r3, #0
 80615f8:	f040 80e9 	bne.w	80617ce <CanSpi_MainFunction+0x6e6>
			&& CanSpi_ErrorArr[7] == 0
 80615fc:	4b28      	ldr	r3, [pc, #160]	@ (80616a0 <CanSpi_MainFunction+0x5b8>)
 80615fe:	69db      	ldr	r3, [r3, #28]
 8061600:	2b00      	cmp	r3, #0
 8061602:	f040 80e4 	bne.w	80617ce <CanSpi_MainFunction+0x6e6>
			&& CanSpi_ErrorArr[8] == 0
 8061606:	4b26      	ldr	r3, [pc, #152]	@ (80616a0 <CanSpi_MainFunction+0x5b8>)
 8061608:	6a1b      	ldr	r3, [r3, #32]
 806160a:	2b00      	cmp	r3, #0
 806160c:	f040 80df 	bne.w	80617ce <CanSpi_MainFunction+0x6e6>
			&& CanSpi_Communication_Status != NO_COMMUNICATION
 8061610:	4b21      	ldr	r3, [pc, #132]	@ (8061698 <CanSpi_MainFunction+0x5b0>)
 8061612:	781b      	ldrb	r3, [r3, #0]
 8061614:	2b00      	cmp	r3, #0
 8061616:	f000 80da 	beq.w	80617ce <CanSpi_MainFunction+0x6e6>
			&& CanSpi_Communication_Status != CC_ACTIVE
 806161a:	4b1f      	ldr	r3, [pc, #124]	@ (8061698 <CanSpi_MainFunction+0x5b0>)
 806161c:	781b      	ldrb	r3, [r3, #0]
 806161e:	2b03      	cmp	r3, #3
 8061620:	f000 80d5 	beq.w	80617ce <CanSpi_MainFunction+0x6e6>
			&& CanSpi_Communication_Status != PARTIAL_COMMUNICATION
 8061624:	4b1c      	ldr	r3, [pc, #112]	@ (8061698 <CanSpi_MainFunction+0x5b0>)
 8061626:	781b      	ldrb	r3, [r3, #0]
 8061628:	2b01      	cmp	r3, #1
 806162a:	f000 80d0 	beq.w	80617ce <CanSpi_MainFunction+0x6e6>
			&& EcuM_State == RUN)
 806162e:	4b1d      	ldr	r3, [pc, #116]	@ (80616a4 <CanSpi_MainFunction+0x5bc>)
 8061630:	781b      	ldrb	r3, [r3, #0]
 8061632:	2b02      	cmp	r3, #2
 8061634:	f040 80cb 	bne.w	80617ce <CanSpi_MainFunction+0x6e6>
	{
		CanSpi_StatusBodyControl_MissCnt++;
 8061638:	4b1b      	ldr	r3, [pc, #108]	@ (80616a8 <CanSpi_MainFunction+0x5c0>)
 806163a:	681b      	ldr	r3, [r3, #0]
 806163c:	3301      	adds	r3, #1
 806163e:	4a1a      	ldr	r2, [pc, #104]	@ (80616a8 <CanSpi_MainFunction+0x5c0>)
 8061640:	6013      	str	r3, [r2, #0]
		CanSpi_VehicleState_MissCnt++;
 8061642:	4b1a      	ldr	r3, [pc, #104]	@ (80616ac <CanSpi_MainFunction+0x5c4>)
 8061644:	681b      	ldr	r3, [r3, #0]
 8061646:	3301      	adds	r3, #1
 8061648:	4a18      	ldr	r2, [pc, #96]	@ (80616ac <CanSpi_MainFunction+0x5c4>)
 806164a:	6013      	str	r3, [r2, #0]
		if(200 < CanSpi_StatusBodyControl_MissCnt) Dem_SaveDtc(0x0A, 1);
 806164c:	4b16      	ldr	r3, [pc, #88]	@ (80616a8 <CanSpi_MainFunction+0x5c0>)
 806164e:	681b      	ldr	r3, [r3, #0]
 8061650:	2bc8      	cmp	r3, #200	@ 0xc8
 8061652:	d904      	bls.n	806165e <CanSpi_MainFunction+0x576>
 8061654:	2101      	movs	r1, #1
 8061656:	200a      	movs	r0, #10
 8061658:	f003 f8f6 	bl	8064848 <Dem_SaveDtc>
 806165c:	e003      	b.n	8061666 <CanSpi_MainFunction+0x57e>
		else Dem_SaveDtc(0x0A, 0);
 806165e:	2100      	movs	r1, #0
 8061660:	200a      	movs	r0, #10
 8061662:	f003 f8f1 	bl	8064848 <Dem_SaveDtc>
		if(200 < CanSpi_VehicleState_MissCnt) Dem_SaveDtc(0x0B, 1);
 8061666:	4b11      	ldr	r3, [pc, #68]	@ (80616ac <CanSpi_MainFunction+0x5c4>)
 8061668:	681b      	ldr	r3, [r3, #0]
 806166a:	2bc8      	cmp	r3, #200	@ 0xc8
 806166c:	d920      	bls.n	80616b0 <CanSpi_MainFunction+0x5c8>
 806166e:	2101      	movs	r1, #1
 8061670:	200b      	movs	r0, #11
 8061672:	f003 f8e9 	bl	8064848 <Dem_SaveDtc>
 8061676:	e01f      	b.n	80616b8 <CanSpi_MainFunction+0x5d0>
 8061678:	2001034c 	.word	0x2001034c
 806167c:	20010360 	.word	0x20010360
 8061680:	20010a3c 	.word	0x20010a3c
 8061684:	200103e4 	.word	0x200103e4
 8061688:	200103c8 	.word	0x200103c8
 806168c:	cccccccd 	.word	0xcccccccd
 8061690:	2001033c 	.word	0x2001033c
 8061694:	200102cc 	.word	0x200102cc
 8061698:	20010348 	.word	0x20010348
 806169c:	2001001e 	.word	0x2001001e
 80616a0:	20010318 	.word	0x20010318
 80616a4:	20010821 	.word	0x20010821
 80616a8:	20010310 	.word	0x20010310
 80616ac:	20010314 	.word	0x20010314
		else Dem_SaveDtc(0x0B, 0);
 80616b0:	2100      	movs	r1, #0
 80616b2:	200b      	movs	r0, #11
 80616b4:	f003 f8c8 	bl	8064848 <Dem_SaveDtc>
		/* Status Center Console List 1 */
		if(CanSpi_MainCounter % 4 == 0)
 80616b8:	4b5a      	ldr	r3, [pc, #360]	@ (8061824 <CanSpi_MainFunction+0x73c>)
 80616ba:	681b      	ldr	r3, [r3, #0]
 80616bc:	f003 0303 	and.w	r3, r3, #3
 80616c0:	2b00      	cmp	r3, #0
 80616c2:	d141      	bne.n	8061748 <CanSpi_MainFunction+0x660>
		{
			CanSpi_TxFrame.frame.idType = 1;
 80616c4:	4b58      	ldr	r3, [pc, #352]	@ (8061828 <CanSpi_MainFunction+0x740>)
 80616c6:	2201      	movs	r2, #1
 80616c8:	701a      	strb	r2, [r3, #0]
			CanSpi_TxFrame.frame.id = 0x100;
 80616ca:	4b57      	ldr	r3, [pc, #348]	@ (8061828 <CanSpi_MainFunction+0x740>)
 80616cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80616d0:	605a      	str	r2, [r3, #4]
			CanSpi_TxFrame.frame.dlc = 5;
 80616d2:	4b55      	ldr	r3, [pc, #340]	@ (8061828 <CanSpi_MainFunction+0x740>)
 80616d4:	2205      	movs	r2, #5
 80616d6:	721a      	strb	r2, [r3, #8]
			CanSpi_TxFrame.frame.data0 = StatusList_ComOutValue[1];
 80616d8:	4b54      	ldr	r3, [pc, #336]	@ (806182c <CanSpi_MainFunction+0x744>)
 80616da:	785a      	ldrb	r2, [r3, #1]
 80616dc:	4b52      	ldr	r3, [pc, #328]	@ (8061828 <CanSpi_MainFunction+0x740>)
 80616de:	725a      	strb	r2, [r3, #9]
			CanSpi_TxFrame.frame.data1 = StatusList_ComOutValue[2];
 80616e0:	4b52      	ldr	r3, [pc, #328]	@ (806182c <CanSpi_MainFunction+0x744>)
 80616e2:	789a      	ldrb	r2, [r3, #2]
 80616e4:	4b50      	ldr	r3, [pc, #320]	@ (8061828 <CanSpi_MainFunction+0x740>)
 80616e6:	729a      	strb	r2, [r3, #10]
			CanSpi_TxFrame.frame.data2 = StatusList_ComOutValue[4];
 80616e8:	4b50      	ldr	r3, [pc, #320]	@ (806182c <CanSpi_MainFunction+0x744>)
 80616ea:	791a      	ldrb	r2, [r3, #4]
 80616ec:	4b4e      	ldr	r3, [pc, #312]	@ (8061828 <CanSpi_MainFunction+0x740>)
 80616ee:	72da      	strb	r2, [r3, #11]
			CanSpi_TxFrame.frame.data3 = StatusList_ComOutValue[0];
 80616f0:	4b4e      	ldr	r3, [pc, #312]	@ (806182c <CanSpi_MainFunction+0x744>)
 80616f2:	781a      	ldrb	r2, [r3, #0]
 80616f4:	4b4c      	ldr	r3, [pc, #304]	@ (8061828 <CanSpi_MainFunction+0x740>)
 80616f6:	731a      	strb	r2, [r3, #12]
			CanSpi_TxFrame.frame.data4 = StatusList_ComOutValue[3];
 80616f8:	4b4c      	ldr	r3, [pc, #304]	@ (806182c <CanSpi_MainFunction+0x744>)
 80616fa:	78da      	ldrb	r2, [r3, #3]
 80616fc:	4b4a      	ldr	r3, [pc, #296]	@ (8061828 <CanSpi_MainFunction+0x740>)
 80616fe:	735a      	strb	r2, [r3, #13]
			CanSpi_Transmit(&CanSpi_TxFrame);
 8061700:	4849      	ldr	r0, [pc, #292]	@ (8061828 <CanSpi_MainFunction+0x740>)
 8061702:	f000 f9c9 	bl	8061a98 <CanSpi_Transmit>
			CanSpi_TxFrame.frame.idType = 0;
 8061706:	4b48      	ldr	r3, [pc, #288]	@ (8061828 <CanSpi_MainFunction+0x740>)
 8061708:	2200      	movs	r2, #0
 806170a:	701a      	strb	r2, [r3, #0]
			CanSpi_TxFrame.frame.id = 0;
 806170c:	4b46      	ldr	r3, [pc, #280]	@ (8061828 <CanSpi_MainFunction+0x740>)
 806170e:	2200      	movs	r2, #0
 8061710:	605a      	str	r2, [r3, #4]
			CanSpi_TxFrame.frame.dlc = 0;
 8061712:	4b45      	ldr	r3, [pc, #276]	@ (8061828 <CanSpi_MainFunction+0x740>)
 8061714:	2200      	movs	r2, #0
 8061716:	721a      	strb	r2, [r3, #8]
			CanSpi_TxFrame.frame.data0 = 0;
 8061718:	4b43      	ldr	r3, [pc, #268]	@ (8061828 <CanSpi_MainFunction+0x740>)
 806171a:	2200      	movs	r2, #0
 806171c:	725a      	strb	r2, [r3, #9]
			CanSpi_TxFrame.frame.data1 = 0;
 806171e:	4b42      	ldr	r3, [pc, #264]	@ (8061828 <CanSpi_MainFunction+0x740>)
 8061720:	2200      	movs	r2, #0
 8061722:	729a      	strb	r2, [r3, #10]
			CanSpi_TxFrame.frame.data2 = 0;
 8061724:	4b40      	ldr	r3, [pc, #256]	@ (8061828 <CanSpi_MainFunction+0x740>)
 8061726:	2200      	movs	r2, #0
 8061728:	72da      	strb	r2, [r3, #11]
			CanSpi_TxFrame.frame.data3 = 0;
 806172a:	4b3f      	ldr	r3, [pc, #252]	@ (8061828 <CanSpi_MainFunction+0x740>)
 806172c:	2200      	movs	r2, #0
 806172e:	731a      	strb	r2, [r3, #12]
			CanSpi_TxFrame.frame.data4 = 0;
 8061730:	4b3d      	ldr	r3, [pc, #244]	@ (8061828 <CanSpi_MainFunction+0x740>)
 8061732:	2200      	movs	r2, #0
 8061734:	735a      	strb	r2, [r3, #13]
			CanSpi_TxFrame.frame.data5 = 0;
 8061736:	4b3c      	ldr	r3, [pc, #240]	@ (8061828 <CanSpi_MainFunction+0x740>)
 8061738:	2200      	movs	r2, #0
 806173a:	739a      	strb	r2, [r3, #14]
			CanSpi_TxFrame.frame.data6 = 0;
 806173c:	4b3a      	ldr	r3, [pc, #232]	@ (8061828 <CanSpi_MainFunction+0x740>)
 806173e:	2200      	movs	r2, #0
 8061740:	73da      	strb	r2, [r3, #15]
			CanSpi_TxFrame.frame.data7 = 0;
 8061742:	4b39      	ldr	r3, [pc, #228]	@ (8061828 <CanSpi_MainFunction+0x740>)
 8061744:	2200      	movs	r2, #0
 8061746:	741a      	strb	r2, [r3, #16]
		else
		{
			/* Do nothing. */
		}
		/* Status Command Actuator */
		if(CanSpi_MainCounter % 20 == 0)
 8061748:	4b36      	ldr	r3, [pc, #216]	@ (8061824 <CanSpi_MainFunction+0x73c>)
 806174a:	6819      	ldr	r1, [r3, #0]
 806174c:	4b38      	ldr	r3, [pc, #224]	@ (8061830 <CanSpi_MainFunction+0x748>)
 806174e:	fba3 2301 	umull	r2, r3, r3, r1
 8061752:	091a      	lsrs	r2, r3, #4
 8061754:	4613      	mov	r3, r2
 8061756:	009b      	lsls	r3, r3, #2
 8061758:	4413      	add	r3, r2
 806175a:	009b      	lsls	r3, r3, #2
 806175c:	1aca      	subs	r2, r1, r3
 806175e:	2a00      	cmp	r2, #0
 8061760:	d135      	bne.n	80617ce <CanSpi_MainFunction+0x6e6>
		{
			CanSpi_TxFrame.frame.idType = 1;
 8061762:	4b31      	ldr	r3, [pc, #196]	@ (8061828 <CanSpi_MainFunction+0x740>)
 8061764:	2201      	movs	r2, #1
 8061766:	701a      	strb	r2, [r3, #0]
			CanSpi_TxFrame.frame.id = 0x101;
 8061768:	4b2f      	ldr	r3, [pc, #188]	@ (8061828 <CanSpi_MainFunction+0x740>)
 806176a:	f240 1201 	movw	r2, #257	@ 0x101
 806176e:	605a      	str	r2, [r3, #4]
			CanSpi_TxFrame.frame.dlc = 2;
 8061770:	4b2d      	ldr	r3, [pc, #180]	@ (8061828 <CanSpi_MainFunction+0x740>)
 8061772:	2202      	movs	r2, #2
 8061774:	721a      	strb	r2, [r3, #8]
			CanSpi_TxFrame.frame.data0 = CmdList_ActualValue[2];
 8061776:	4b2f      	ldr	r3, [pc, #188]	@ (8061834 <CanSpi_MainFunction+0x74c>)
 8061778:	789a      	ldrb	r2, [r3, #2]
 806177a:	4b2b      	ldr	r3, [pc, #172]	@ (8061828 <CanSpi_MainFunction+0x740>)
 806177c:	725a      	strb	r2, [r3, #9]
			CanSpi_TxFrame.frame.data1 = CmdList_ActualValue[3];
 806177e:	4b2d      	ldr	r3, [pc, #180]	@ (8061834 <CanSpi_MainFunction+0x74c>)
 8061780:	78da      	ldrb	r2, [r3, #3]
 8061782:	4b29      	ldr	r3, [pc, #164]	@ (8061828 <CanSpi_MainFunction+0x740>)
 8061784:	729a      	strb	r2, [r3, #10]
			CanSpi_Transmit(&CanSpi_TxFrame);
 8061786:	4828      	ldr	r0, [pc, #160]	@ (8061828 <CanSpi_MainFunction+0x740>)
 8061788:	f000 f986 	bl	8061a98 <CanSpi_Transmit>
			CanSpi_TxFrame.frame.idType = 0;
 806178c:	4b26      	ldr	r3, [pc, #152]	@ (8061828 <CanSpi_MainFunction+0x740>)
 806178e:	2200      	movs	r2, #0
 8061790:	701a      	strb	r2, [r3, #0]
			CanSpi_TxFrame.frame.id = 0;
 8061792:	4b25      	ldr	r3, [pc, #148]	@ (8061828 <CanSpi_MainFunction+0x740>)
 8061794:	2200      	movs	r2, #0
 8061796:	605a      	str	r2, [r3, #4]
			CanSpi_TxFrame.frame.dlc = 0;
 8061798:	4b23      	ldr	r3, [pc, #140]	@ (8061828 <CanSpi_MainFunction+0x740>)
 806179a:	2200      	movs	r2, #0
 806179c:	721a      	strb	r2, [r3, #8]
			CanSpi_TxFrame.frame.data0 = 0;
 806179e:	4b22      	ldr	r3, [pc, #136]	@ (8061828 <CanSpi_MainFunction+0x740>)
 80617a0:	2200      	movs	r2, #0
 80617a2:	725a      	strb	r2, [r3, #9]
			CanSpi_TxFrame.frame.data1 = 0;
 80617a4:	4b20      	ldr	r3, [pc, #128]	@ (8061828 <CanSpi_MainFunction+0x740>)
 80617a6:	2200      	movs	r2, #0
 80617a8:	729a      	strb	r2, [r3, #10]
			CanSpi_TxFrame.frame.data2 = 0;
 80617aa:	4b1f      	ldr	r3, [pc, #124]	@ (8061828 <CanSpi_MainFunction+0x740>)
 80617ac:	2200      	movs	r2, #0
 80617ae:	72da      	strb	r2, [r3, #11]
			CanSpi_TxFrame.frame.data3 = 0;
 80617b0:	4b1d      	ldr	r3, [pc, #116]	@ (8061828 <CanSpi_MainFunction+0x740>)
 80617b2:	2200      	movs	r2, #0
 80617b4:	731a      	strb	r2, [r3, #12]
			CanSpi_TxFrame.frame.data4 = 0;
 80617b6:	4b1c      	ldr	r3, [pc, #112]	@ (8061828 <CanSpi_MainFunction+0x740>)
 80617b8:	2200      	movs	r2, #0
 80617ba:	735a      	strb	r2, [r3, #13]
			CanSpi_TxFrame.frame.data5 = 0;
 80617bc:	4b1a      	ldr	r3, [pc, #104]	@ (8061828 <CanSpi_MainFunction+0x740>)
 80617be:	2200      	movs	r2, #0
 80617c0:	739a      	strb	r2, [r3, #14]
			CanSpi_TxFrame.frame.data6 = 0;
 80617c2:	4b19      	ldr	r3, [pc, #100]	@ (8061828 <CanSpi_MainFunction+0x740>)
 80617c4:	2200      	movs	r2, #0
 80617c6:	73da      	strb	r2, [r3, #15]
			CanSpi_TxFrame.frame.data7 = 0;
 80617c8:	4b17      	ldr	r3, [pc, #92]	@ (8061828 <CanSpi_MainFunction+0x740>)
 80617ca:	2200      	movs	r2, #0
 80617cc:	741a      	strb	r2, [r3, #16]
	else
	{
		/* Do nothing. */
	}
	/* Refresh TX buffer. */
	CanSpi_TxFrame.frame.idType = 0;
 80617ce:	4b16      	ldr	r3, [pc, #88]	@ (8061828 <CanSpi_MainFunction+0x740>)
 80617d0:	2200      	movs	r2, #0
 80617d2:	701a      	strb	r2, [r3, #0]
	CanSpi_TxFrame.frame.id = 0;
 80617d4:	4b14      	ldr	r3, [pc, #80]	@ (8061828 <CanSpi_MainFunction+0x740>)
 80617d6:	2200      	movs	r2, #0
 80617d8:	605a      	str	r2, [r3, #4]
	CanSpi_TxFrame.frame.dlc = 0;
 80617da:	4b13      	ldr	r3, [pc, #76]	@ (8061828 <CanSpi_MainFunction+0x740>)
 80617dc:	2200      	movs	r2, #0
 80617de:	721a      	strb	r2, [r3, #8]
	CanSpi_TxFrame.frame.data0 = 0;
 80617e0:	4b11      	ldr	r3, [pc, #68]	@ (8061828 <CanSpi_MainFunction+0x740>)
 80617e2:	2200      	movs	r2, #0
 80617e4:	725a      	strb	r2, [r3, #9]
	CanSpi_TxFrame.frame.data1 = 0;
 80617e6:	4b10      	ldr	r3, [pc, #64]	@ (8061828 <CanSpi_MainFunction+0x740>)
 80617e8:	2200      	movs	r2, #0
 80617ea:	729a      	strb	r2, [r3, #10]
	CanSpi_TxFrame.frame.data2 = 0;
 80617ec:	4b0e      	ldr	r3, [pc, #56]	@ (8061828 <CanSpi_MainFunction+0x740>)
 80617ee:	2200      	movs	r2, #0
 80617f0:	72da      	strb	r2, [r3, #11]
	CanSpi_TxFrame.frame.data3 = 0;
 80617f2:	4b0d      	ldr	r3, [pc, #52]	@ (8061828 <CanSpi_MainFunction+0x740>)
 80617f4:	2200      	movs	r2, #0
 80617f6:	731a      	strb	r2, [r3, #12]
	CanSpi_TxFrame.frame.data4 = 0;
 80617f8:	4b0b      	ldr	r3, [pc, #44]	@ (8061828 <CanSpi_MainFunction+0x740>)
 80617fa:	2200      	movs	r2, #0
 80617fc:	735a      	strb	r2, [r3, #13]
	CanSpi_TxFrame.frame.data5 = 0;
 80617fe:	4b0a      	ldr	r3, [pc, #40]	@ (8061828 <CanSpi_MainFunction+0x740>)
 8061800:	2200      	movs	r2, #0
 8061802:	739a      	strb	r2, [r3, #14]
	CanSpi_TxFrame.frame.data6 = 0;
 8061804:	4b08      	ldr	r3, [pc, #32]	@ (8061828 <CanSpi_MainFunction+0x740>)
 8061806:	2200      	movs	r2, #0
 8061808:	73da      	strb	r2, [r3, #15]
	CanSpi_TxFrame.frame.data7 = 0;
 806180a:	4b07      	ldr	r3, [pc, #28]	@ (8061828 <CanSpi_MainFunction+0x740>)
 806180c:	2200      	movs	r2, #0
 806180e:	741a      	strb	r2, [r3, #16]
	/* Increase the main counter. */
	CanSpi_MainCounter++;
 8061810:	4b04      	ldr	r3, [pc, #16]	@ (8061824 <CanSpi_MainFunction+0x73c>)
 8061812:	681b      	ldr	r3, [r3, #0]
 8061814:	3301      	adds	r3, #1
 8061816:	4a03      	ldr	r2, [pc, #12]	@ (8061824 <CanSpi_MainFunction+0x73c>)
 8061818:	6013      	str	r3, [r2, #0]
}
 806181a:	bf00      	nop
 806181c:	3708      	adds	r7, #8
 806181e:	46bd      	mov	sp, r7
 8061820:	bdb0      	pop	{r4, r5, r7, pc}
 8061822:	bf00      	nop
 8061824:	200103c8 	.word	0x200103c8
 8061828:	200103cc 	.word	0x200103cc
 806182c:	200102cc 	.word	0x200102cc
 8061830:	cccccccd 	.word	0xcccccccd
 8061834:	200101ac 	.word	0x200101ac

08061838 <HAL_SPI_ErrorCallback>:
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8061838:	b480      	push	{r7}
 806183a:	b083      	sub	sp, #12
 806183c:	af00      	add	r7, sp, #0
 806183e:	6078      	str	r0, [r7, #4]
	switch(hspi->ErrorCode)
 8061840:	687b      	ldr	r3, [r7, #4]
 8061842:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8061844:	2b20      	cmp	r3, #32
 8061846:	d847      	bhi.n	80618d8 <HAL_SPI_ErrorCallback+0xa0>
 8061848:	2b00      	cmp	r3, #0
 806184a:	d072      	beq.n	8061932 <HAL_SPI_ErrorCallback+0xfa>
 806184c:	3b01      	subs	r3, #1
 806184e:	2b1f      	cmp	r3, #31
 8061850:	d86f      	bhi.n	8061932 <HAL_SPI_ErrorCallback+0xfa>
 8061852:	a201      	add	r2, pc, #4	@ (adr r2, 8061858 <HAL_SPI_ErrorCallback+0x20>)
 8061854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8061858:	080618df 	.word	0x080618df
 806185c:	080618eb 	.word	0x080618eb
 8061860:	08061933 	.word	0x08061933
 8061864:	080618f7 	.word	0x080618f7
 8061868:	08061933 	.word	0x08061933
 806186c:	08061933 	.word	0x08061933
 8061870:	08061933 	.word	0x08061933
 8061874:	08061903 	.word	0x08061903
 8061878:	08061933 	.word	0x08061933
 806187c:	08061933 	.word	0x08061933
 8061880:	08061933 	.word	0x08061933
 8061884:	08061933 	.word	0x08061933
 8061888:	08061933 	.word	0x08061933
 806188c:	08061933 	.word	0x08061933
 8061890:	08061933 	.word	0x08061933
 8061894:	0806190f 	.word	0x0806190f
 8061898:	08061933 	.word	0x08061933
 806189c:	08061933 	.word	0x08061933
 80618a0:	08061933 	.word	0x08061933
 80618a4:	08061933 	.word	0x08061933
 80618a8:	08061933 	.word	0x08061933
 80618ac:	08061933 	.word	0x08061933
 80618b0:	08061933 	.word	0x08061933
 80618b4:	08061933 	.word	0x08061933
 80618b8:	08061933 	.word	0x08061933
 80618bc:	08061933 	.word	0x08061933
 80618c0:	08061933 	.word	0x08061933
 80618c4:	08061933 	.word	0x08061933
 80618c8:	08061933 	.word	0x08061933
 80618cc:	08061933 	.word	0x08061933
 80618d0:	08061933 	.word	0x08061933
 80618d4:	0806191b 	.word	0x0806191b
 80618d8:	2b40      	cmp	r3, #64	@ 0x40
 80618da:	d024      	beq.n	8061926 <HAL_SPI_ErrorCallback+0xee>
		break;
	case HAL_SPI_ERROR_ABORT:
		CanSpi_ErrorArr[6]++;
		break;
	default:
		break;
 80618dc:	e029      	b.n	8061932 <HAL_SPI_ErrorCallback+0xfa>
		CanSpi_ErrorArr[0]++;
 80618de:	4b18      	ldr	r3, [pc, #96]	@ (8061940 <HAL_SPI_ErrorCallback+0x108>)
 80618e0:	681b      	ldr	r3, [r3, #0]
 80618e2:	3301      	adds	r3, #1
 80618e4:	4a16      	ldr	r2, [pc, #88]	@ (8061940 <HAL_SPI_ErrorCallback+0x108>)
 80618e6:	6013      	str	r3, [r2, #0]
		break;
 80618e8:	e024      	b.n	8061934 <HAL_SPI_ErrorCallback+0xfc>
		CanSpi_ErrorArr[1]++;
 80618ea:	4b15      	ldr	r3, [pc, #84]	@ (8061940 <HAL_SPI_ErrorCallback+0x108>)
 80618ec:	685b      	ldr	r3, [r3, #4]
 80618ee:	3301      	adds	r3, #1
 80618f0:	4a13      	ldr	r2, [pc, #76]	@ (8061940 <HAL_SPI_ErrorCallback+0x108>)
 80618f2:	6053      	str	r3, [r2, #4]
		break;
 80618f4:	e01e      	b.n	8061934 <HAL_SPI_ErrorCallback+0xfc>
		CanSpi_ErrorArr[2]++;
 80618f6:	4b12      	ldr	r3, [pc, #72]	@ (8061940 <HAL_SPI_ErrorCallback+0x108>)
 80618f8:	689b      	ldr	r3, [r3, #8]
 80618fa:	3301      	adds	r3, #1
 80618fc:	4a10      	ldr	r2, [pc, #64]	@ (8061940 <HAL_SPI_ErrorCallback+0x108>)
 80618fe:	6093      	str	r3, [r2, #8]
		break;
 8061900:	e018      	b.n	8061934 <HAL_SPI_ErrorCallback+0xfc>
		CanSpi_ErrorArr[3]++;
 8061902:	4b0f      	ldr	r3, [pc, #60]	@ (8061940 <HAL_SPI_ErrorCallback+0x108>)
 8061904:	68db      	ldr	r3, [r3, #12]
 8061906:	3301      	adds	r3, #1
 8061908:	4a0d      	ldr	r2, [pc, #52]	@ (8061940 <HAL_SPI_ErrorCallback+0x108>)
 806190a:	60d3      	str	r3, [r2, #12]
		break;
 806190c:	e012      	b.n	8061934 <HAL_SPI_ErrorCallback+0xfc>
		CanSpi_ErrorArr[4]++;
 806190e:	4b0c      	ldr	r3, [pc, #48]	@ (8061940 <HAL_SPI_ErrorCallback+0x108>)
 8061910:	691b      	ldr	r3, [r3, #16]
 8061912:	3301      	adds	r3, #1
 8061914:	4a0a      	ldr	r2, [pc, #40]	@ (8061940 <HAL_SPI_ErrorCallback+0x108>)
 8061916:	6113      	str	r3, [r2, #16]
		break;
 8061918:	e00c      	b.n	8061934 <HAL_SPI_ErrorCallback+0xfc>
		CanSpi_ErrorArr[5]++;
 806191a:	4b09      	ldr	r3, [pc, #36]	@ (8061940 <HAL_SPI_ErrorCallback+0x108>)
 806191c:	695b      	ldr	r3, [r3, #20]
 806191e:	3301      	adds	r3, #1
 8061920:	4a07      	ldr	r2, [pc, #28]	@ (8061940 <HAL_SPI_ErrorCallback+0x108>)
 8061922:	6153      	str	r3, [r2, #20]
		break;
 8061924:	e006      	b.n	8061934 <HAL_SPI_ErrorCallback+0xfc>
		CanSpi_ErrorArr[6]++;
 8061926:	4b06      	ldr	r3, [pc, #24]	@ (8061940 <HAL_SPI_ErrorCallback+0x108>)
 8061928:	699b      	ldr	r3, [r3, #24]
 806192a:	3301      	adds	r3, #1
 806192c:	4a04      	ldr	r2, [pc, #16]	@ (8061940 <HAL_SPI_ErrorCallback+0x108>)
 806192e:	6193      	str	r3, [r2, #24]
		break;
 8061930:	e000      	b.n	8061934 <HAL_SPI_ErrorCallback+0xfc>
		break;
 8061932:	bf00      	nop
	}
}
 8061934:	bf00      	nop
 8061936:	370c      	adds	r7, #12
 8061938:	46bd      	mov	sp, r7
 806193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 806193e:	4770      	bx	lr
 8061940:	20010318 	.word	0x20010318

08061944 <CanSpi_Sleep>:
void CanSpi_Sleep(void)
{
 8061944:	b580      	push	{r7, lr}
 8061946:	af00      	add	r7, sp, #0
	CanSpi_MCP2515_BitModify(CANSPI_MCP2515_CANINTF, 0x40, 0x00);
 8061948:	2200      	movs	r2, #0
 806194a:	2140      	movs	r1, #64	@ 0x40
 806194c:	202c      	movs	r0, #44	@ 0x2c
 806194e:	f000 fc6b 	bl	8062228 <CanSpi_MCP2515_BitModify>
	CanSpi_MCP2515_BitModify(CANSPI_MCP2515_CANINTE, 0x40, 0x40);
 8061952:	2240      	movs	r2, #64	@ 0x40
 8061954:	2140      	movs	r1, #64	@ 0x40
 8061956:	202b      	movs	r0, #43	@ 0x2b
 8061958:	f000 fc66 	bl	8062228 <CanSpi_MCP2515_BitModify>
	CanSpi_MCP2515_SetSleepMode();
 806195c:	f000 fb1e 	bl	8061f9c <CanSpi_MCP2515_SetSleepMode>
}
 8061960:	bf00      	nop
 8061962:	bd80      	pop	{r7, pc}

08061964 <CanSpi_Initialize>:
uint8 CanSpi_Initialize(void)
{
 8061964:	b580      	push	{r7, lr}
 8061966:	b088      	sub	sp, #32
 8061968:	af00      	add	r7, sp, #0
	CanSpi_MCP2515_Reset();
 806196a:	f000 fb35 	bl	8061fd8 <CanSpi_MCP2515_Reset>
	CANSPI_RXF3 RXF3reg;
	CANSPI_RXF4 RXF4reg;
	CANSPI_RXF5 RXF5reg;
	CANSPI_RXM0 RXM0reg;
	CANSPI_RXM1 RXM1reg;
	RXM0reg.RXM0SIDH = 0xFF;
 806196e:	23ff      	movs	r3, #255	@ 0xff
 8061970:	713b      	strb	r3, [r7, #4]
	RXM0reg.RXM0SIDL = 0xE0;
 8061972:	23e0      	movs	r3, #224	@ 0xe0
 8061974:	717b      	strb	r3, [r7, #5]
	RXM0reg.RXM0EID8 = 0x00;
 8061976:	2300      	movs	r3, #0
 8061978:	71bb      	strb	r3, [r7, #6]
	RXM0reg.RXM0EID0 = 0x00;
 806197a:	2300      	movs	r3, #0
 806197c:	71fb      	strb	r3, [r7, #7]
	RXM1reg.RXM1SIDH = 0xFF;
 806197e:	23ff      	movs	r3, #255	@ 0xff
 8061980:	703b      	strb	r3, [r7, #0]
	RXM1reg.RXM1SIDL = 0xE0;
 8061982:	23e0      	movs	r3, #224	@ 0xe0
 8061984:	707b      	strb	r3, [r7, #1]
	RXM1reg.RXM1EID8 = 0x00;
 8061986:	2300      	movs	r3, #0
 8061988:	70bb      	strb	r3, [r7, #2]
	RXM1reg.RXM1EID0 = 0x00;
 806198a:	2300      	movs	r3, #0
 806198c:	70fb      	strb	r3, [r7, #3]
	RXF0reg.RXF0SIDH = 0x12;
 806198e:	2312      	movs	r3, #18
 8061990:	773b      	strb	r3, [r7, #28]
	RXF0reg.RXF0SIDL = 0xE0;
 8061992:	23e0      	movs	r3, #224	@ 0xe0
 8061994:	777b      	strb	r3, [r7, #29]
	RXF0reg.RXF0EID8 = 0x00;
 8061996:	2300      	movs	r3, #0
 8061998:	77bb      	strb	r3, [r7, #30]
	RXF0reg.RXF0EID0 = 0x00;
 806199a:	2300      	movs	r3, #0
 806199c:	77fb      	strb	r3, [r7, #31]
	RXF1reg.RXF1SIDH = 0x13;
 806199e:	2313      	movs	r3, #19
 80619a0:	763b      	strb	r3, [r7, #24]
	RXF1reg.RXF1SIDL = 0x00;
 80619a2:	2300      	movs	r3, #0
 80619a4:	767b      	strb	r3, [r7, #25]
	RXF1reg.RXF1EID8 = 0x00;
 80619a6:	2300      	movs	r3, #0
 80619a8:	76bb      	strb	r3, [r7, #26]
	RXF1reg.RXF1EID0 = 0x00;
 80619aa:	2300      	movs	r3, #0
 80619ac:	76fb      	strb	r3, [r7, #27]
	RXF2reg.RXF2SIDH = 0xE0;
 80619ae:	23e0      	movs	r3, #224	@ 0xe0
 80619b0:	753b      	strb	r3, [r7, #20]
	RXF2reg.RXF2SIDL = 0x00;
 80619b2:	2300      	movs	r3, #0
 80619b4:	757b      	strb	r3, [r7, #21]
	RXF2reg.RXF2EID8 = 0x00;
 80619b6:	2300      	movs	r3, #0
 80619b8:	75bb      	strb	r3, [r7, #22]
	RXF2reg.RXF2EID0 = 0x00;
 80619ba:	2300      	movs	r3, #0
 80619bc:	75fb      	strb	r3, [r7, #23]
	RXF3reg.RXF3SIDH = 0xC0;
 80619be:	23c0      	movs	r3, #192	@ 0xc0
 80619c0:	743b      	strb	r3, [r7, #16]
	RXF3reg.RXF3SIDL = 0x00;
 80619c2:	2300      	movs	r3, #0
 80619c4:	747b      	strb	r3, [r7, #17]
	RXF3reg.RXF3EID8 = 0x00;
 80619c6:	2300      	movs	r3, #0
 80619c8:	74bb      	strb	r3, [r7, #18]
	RXF3reg.RXF3EID0 = 0x00;
 80619ca:	2300      	movs	r3, #0
 80619cc:	74fb      	strb	r3, [r7, #19]
	RXF4reg.RXF4SIDH = 0xA2;
 80619ce:	23a2      	movs	r3, #162	@ 0xa2
 80619d0:	733b      	strb	r3, [r7, #12]
	RXF4reg.RXF4SIDL = 0x00;
 80619d2:	2300      	movs	r3, #0
 80619d4:	737b      	strb	r3, [r7, #13]
	RXF4reg.RXF4EID8 = 0x00;
 80619d6:	2300      	movs	r3, #0
 80619d8:	73bb      	strb	r3, [r7, #14]
	RXF4reg.RXF4EID0 = 0x00;
 80619da:	2300      	movs	r3, #0
 80619dc:	73fb      	strb	r3, [r7, #15]
	RXF5reg.RXF5SIDH = 0x00;
 80619de:	2300      	movs	r3, #0
 80619e0:	723b      	strb	r3, [r7, #8]
	RXF5reg.RXF5SIDL = 0x00;
 80619e2:	2300      	movs	r3, #0
 80619e4:	727b      	strb	r3, [r7, #9]
	RXF5reg.RXF5EID8 = 0x00;
 80619e6:	2300      	movs	r3, #0
 80619e8:	72bb      	strb	r3, [r7, #10]
	RXF5reg.RXF5EID0 = 0x00;
 80619ea:	2300      	movs	r3, #0
 80619ec:	72fb      	strb	r3, [r7, #11]
	CanSpi_MCP2515_Initialize();
 80619ee:	f000 fa77 	bl	8061ee0 <CanSpi_MCP2515_Initialize>
	CanSpi_MCP2515_SetConfigMode();
 80619f2:	f000 fa97 	bl	8061f24 <CanSpi_MCP2515_SetConfigMode>
	CanSpi_MCP2515_WriteByteSequence(CANSPI_MCP2515_RXM0SIDH, CANSPI_MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 80619f6:	1d3b      	adds	r3, r7, #4
 80619f8:	461a      	mov	r2, r3
 80619fa:	2123      	movs	r1, #35	@ 0x23
 80619fc:	2020      	movs	r0, #32
 80619fe:	f000 fb69 	bl	80620d4 <CanSpi_MCP2515_WriteByteSequence>
	CanSpi_MCP2515_WriteByteSequence(CANSPI_MCP2515_RXM1SIDH, CANSPI_MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 8061a02:	463b      	mov	r3, r7
 8061a04:	461a      	mov	r2, r3
 8061a06:	2127      	movs	r1, #39	@ 0x27
 8061a08:	2024      	movs	r0, #36	@ 0x24
 8061a0a:	f000 fb63 	bl	80620d4 <CanSpi_MCP2515_WriteByteSequence>
	CanSpi_MCP2515_WriteByteSequence(CANSPI_MCP2515_RXF0SIDH, CANSPI_MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 8061a0e:	f107 031c 	add.w	r3, r7, #28
 8061a12:	461a      	mov	r2, r3
 8061a14:	2103      	movs	r1, #3
 8061a16:	2000      	movs	r0, #0
 8061a18:	f000 fb5c 	bl	80620d4 <CanSpi_MCP2515_WriteByteSequence>
	CanSpi_MCP2515_WriteByteSequence(CANSPI_MCP2515_RXF1SIDH, CANSPI_MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 8061a1c:	f107 0318 	add.w	r3, r7, #24
 8061a20:	461a      	mov	r2, r3
 8061a22:	2107      	movs	r1, #7
 8061a24:	2004      	movs	r0, #4
 8061a26:	f000 fb55 	bl	80620d4 <CanSpi_MCP2515_WriteByteSequence>
	CanSpi_MCP2515_WriteByteSequence(CANSPI_MCP2515_RXF2SIDH, CANSPI_MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 8061a2a:	f107 0314 	add.w	r3, r7, #20
 8061a2e:	461a      	mov	r2, r3
 8061a30:	210b      	movs	r1, #11
 8061a32:	2008      	movs	r0, #8
 8061a34:	f000 fb4e 	bl	80620d4 <CanSpi_MCP2515_WriteByteSequence>
	CanSpi_MCP2515_WriteByteSequence(CANSPI_MCP2515_RXF3SIDH, CANSPI_MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 8061a38:	f107 0310 	add.w	r3, r7, #16
 8061a3c:	461a      	mov	r2, r3
 8061a3e:	2113      	movs	r1, #19
 8061a40:	2010      	movs	r0, #16
 8061a42:	f000 fb47 	bl	80620d4 <CanSpi_MCP2515_WriteByteSequence>
	CanSpi_MCP2515_WriteByteSequence(CANSPI_MCP2515_RXF4SIDH, CANSPI_MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 8061a46:	f107 030c 	add.w	r3, r7, #12
 8061a4a:	461a      	mov	r2, r3
 8061a4c:	2117      	movs	r1, #23
 8061a4e:	2014      	movs	r0, #20
 8061a50:	f000 fb40 	bl	80620d4 <CanSpi_MCP2515_WriteByteSequence>
	CanSpi_MCP2515_WriteByteSequence(CANSPI_MCP2515_RXF5SIDH, CANSPI_MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 8061a54:	f107 0308 	add.w	r3, r7, #8
 8061a58:	461a      	mov	r2, r3
 8061a5a:	211b      	movs	r1, #27
 8061a5c:	2018      	movs	r0, #24
 8061a5e:	f000 fb39 	bl	80620d4 <CanSpi_MCP2515_WriteByteSequence>
	CanSpi_MCP2515_WriteByte(CANSPI_MCP2515_RXB0CTRL, 0x04);
 8061a62:	2104      	movs	r1, #4
 8061a64:	2060      	movs	r0, #96	@ 0x60
 8061a66:	f000 fb11 	bl	806208c <CanSpi_MCP2515_WriteByte>
	CanSpi_MCP2515_WriteByte(CANSPI_MCP2515_RXB1CTRL, 0x01);
 8061a6a:	2101      	movs	r1, #1
 8061a6c:	2070      	movs	r0, #112	@ 0x70
 8061a6e:	f000 fb0d 	bl	806208c <CanSpi_MCP2515_WriteByte>
	CanSpi_MCP2515_WriteByte(CANSPI_MCP2515_CNF1, 0x00);
 8061a72:	2100      	movs	r1, #0
 8061a74:	202a      	movs	r0, #42	@ 0x2a
 8061a76:	f000 fb09 	bl	806208c <CanSpi_MCP2515_WriteByte>
	CanSpi_MCP2515_WriteByte(CANSPI_MCP2515_CNF2, 0x90);
 8061a7a:	2190      	movs	r1, #144	@ 0x90
 8061a7c:	2029      	movs	r0, #41	@ 0x29
 8061a7e:	f000 fb05 	bl	806208c <CanSpi_MCP2515_WriteByte>
	CanSpi_MCP2515_WriteByte(CANSPI_MCP2515_CNF3, 0x82);
 8061a82:	2182      	movs	r1, #130	@ 0x82
 8061a84:	2028      	movs	r0, #40	@ 0x28
 8061a86:	f000 fb01 	bl	806208c <CanSpi_MCP2515_WriteByte>
	CanSpi_MCP2515_SetNormalMode();
 8061a8a:	f000 fa69 	bl	8061f60 <CanSpi_MCP2515_SetNormalMode>
	return 1;
 8061a8e:	2301      	movs	r3, #1
}
 8061a90:	4618      	mov	r0, r3
 8061a92:	3720      	adds	r7, #32
 8061a94:	46bd      	mov	sp, r7
 8061a96:	bd80      	pop	{r7, pc}

08061a98 <CanSpi_Transmit>:
uint8 CanSpi_Transmit(CANSPI_uCAN_MSG *tempCanMsg)
{
 8061a98:	b580      	push	{r7, lr}
 8061a9a:	b086      	sub	sp, #24
 8061a9c:	af00      	add	r7, sp, #0
 8061a9e:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8061aa0:	b672      	cpsid	i
}
 8061aa2:	bf00      	nop
	__disable_irq();
	uint8 returnValue = 0;
 8061aa4:	2300      	movs	r3, #0
 8061aa6:	75fb      	strb	r3, [r7, #23]
	CANSPI_id_reg_t idReg = {0};
 8061aa8:	2300      	movs	r3, #0
 8061aaa:	613b      	str	r3, [r7, #16]
	CANSPI_CtrlStatus_t ctrlStatus = {0};
 8061aac:	2300      	movs	r3, #0
 8061aae:	60fb      	str	r3, [r7, #12]
	idReg.tempSIDH = 0;
 8061ab0:	2300      	movs	r3, #0
 8061ab2:	743b      	strb	r3, [r7, #16]
	idReg.tempSIDL = 0;
 8061ab4:	2300      	movs	r3, #0
 8061ab6:	747b      	strb	r3, [r7, #17]
	idReg.tempEID8 = 0;
 8061ab8:	2300      	movs	r3, #0
 8061aba:	74bb      	strb	r3, [r7, #18]
	idReg.tempEID0 = 0;
 8061abc:	2300      	movs	r3, #0
 8061abe:	74fb      	strb	r3, [r7, #19]
	ctrlStatus.CtrlStatus = CanSpi_MCP2515_ReadStatus();
 8061ac0:	f000 fb76 	bl	80621b0 <CanSpi_MCP2515_ReadStatus>
 8061ac4:	4603      	mov	r3, r0
 8061ac6:	733b      	strb	r3, [r7, #12]
	if (ctrlStatus.TXB0REQ != 1)
 8061ac8:	7b3b      	ldrb	r3, [r7, #12]
 8061aca:	f003 0304 	and.w	r3, r3, #4
 8061ace:	b2db      	uxtb	r3, r3
 8061ad0:	2b00      	cmp	r3, #0
 8061ad2:	d117      	bne.n	8061b04 <CanSpi_Transmit+0x6c>
	{
		CanSpi_ConvertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8061ad4:	687b      	ldr	r3, [r7, #4]
 8061ad6:	6858      	ldr	r0, [r3, #4]
 8061ad8:	687b      	ldr	r3, [r7, #4]
 8061ada:	781b      	ldrb	r3, [r3, #0]
 8061adc:	f107 0210 	add.w	r2, r7, #16
 8061ae0:	4619      	mov	r1, r3
 8061ae2:	f000 f9a8 	bl	8061e36 <CanSpi_ConvertCANid2Reg>
		CanSpi_MCP2515_LoadTxSequence(CANSPI_MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8061ae6:	687b      	ldr	r3, [r7, #4]
 8061ae8:	7a1a      	ldrb	r2, [r3, #8]
 8061aea:	687b      	ldr	r3, [r7, #4]
 8061aec:	3309      	adds	r3, #9
 8061aee:	f107 0110 	add.w	r1, r7, #16
 8061af2:	2040      	movs	r0, #64	@ 0x40
 8061af4:	f000 fb18 	bl	8062128 <CanSpi_MCP2515_LoadTxSequence>
		CanSpi_MCP2515_RequestToSend(CANSPI_MCP2515_RTS_TX0);
 8061af8:	2081      	movs	r0, #129	@ 0x81
 8061afa:	f000 fb3f 	bl	806217c <CanSpi_MCP2515_RequestToSend>
		returnValue = 1;
 8061afe:	2301      	movs	r3, #1
 8061b00:	75fb      	strb	r3, [r7, #23]
 8061b02:	e03a      	b.n	8061b7a <CanSpi_Transmit+0xe2>
	}
	else if (ctrlStatus.TXB1REQ != 1)
 8061b04:	7b3b      	ldrb	r3, [r7, #12]
 8061b06:	f003 0310 	and.w	r3, r3, #16
 8061b0a:	b2db      	uxtb	r3, r3
 8061b0c:	2b00      	cmp	r3, #0
 8061b0e:	d117      	bne.n	8061b40 <CanSpi_Transmit+0xa8>
	{
		CanSpi_ConvertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8061b10:	687b      	ldr	r3, [r7, #4]
 8061b12:	6858      	ldr	r0, [r3, #4]
 8061b14:	687b      	ldr	r3, [r7, #4]
 8061b16:	781b      	ldrb	r3, [r3, #0]
 8061b18:	f107 0210 	add.w	r2, r7, #16
 8061b1c:	4619      	mov	r1, r3
 8061b1e:	f000 f98a 	bl	8061e36 <CanSpi_ConvertCANid2Reg>
		CanSpi_MCP2515_LoadTxSequence(CANSPI_MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8061b22:	687b      	ldr	r3, [r7, #4]
 8061b24:	7a1a      	ldrb	r2, [r3, #8]
 8061b26:	687b      	ldr	r3, [r7, #4]
 8061b28:	3309      	adds	r3, #9
 8061b2a:	f107 0110 	add.w	r1, r7, #16
 8061b2e:	2042      	movs	r0, #66	@ 0x42
 8061b30:	f000 fafa 	bl	8062128 <CanSpi_MCP2515_LoadTxSequence>
		CanSpi_MCP2515_RequestToSend(CANSPI_MCP2515_RTS_TX1);
 8061b34:	2082      	movs	r0, #130	@ 0x82
 8061b36:	f000 fb21 	bl	806217c <CanSpi_MCP2515_RequestToSend>
		returnValue = 1;
 8061b3a:	2301      	movs	r3, #1
 8061b3c:	75fb      	strb	r3, [r7, #23]
 8061b3e:	e01c      	b.n	8061b7a <CanSpi_Transmit+0xe2>
	}
	else if (ctrlStatus.TXB2REQ != 1)
 8061b40:	7b3b      	ldrb	r3, [r7, #12]
 8061b42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8061b46:	b2db      	uxtb	r3, r3
 8061b48:	2b00      	cmp	r3, #0
 8061b4a:	d116      	bne.n	8061b7a <CanSpi_Transmit+0xe2>
	{
		CanSpi_ConvertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8061b4c:	687b      	ldr	r3, [r7, #4]
 8061b4e:	6858      	ldr	r0, [r3, #4]
 8061b50:	687b      	ldr	r3, [r7, #4]
 8061b52:	781b      	ldrb	r3, [r3, #0]
 8061b54:	f107 0210 	add.w	r2, r7, #16
 8061b58:	4619      	mov	r1, r3
 8061b5a:	f000 f96c 	bl	8061e36 <CanSpi_ConvertCANid2Reg>
		CanSpi_MCP2515_LoadTxSequence(CANSPI_MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8061b5e:	687b      	ldr	r3, [r7, #4]
 8061b60:	7a1a      	ldrb	r2, [r3, #8]
 8061b62:	687b      	ldr	r3, [r7, #4]
 8061b64:	3309      	adds	r3, #9
 8061b66:	f107 0110 	add.w	r1, r7, #16
 8061b6a:	2044      	movs	r0, #68	@ 0x44
 8061b6c:	f000 fadc 	bl	8062128 <CanSpi_MCP2515_LoadTxSequence>
		CanSpi_MCP2515_RequestToSend(CANSPI_MCP2515_RTS_TX2);
 8061b70:	2084      	movs	r0, #132	@ 0x84
 8061b72:	f000 fb03 	bl	806217c <CanSpi_MCP2515_RequestToSend>
		returnValue = 1;
 8061b76:	2301      	movs	r3, #1
 8061b78:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsie i" : : : "memory");
 8061b7a:	b662      	cpsie	i
}
 8061b7c:	bf00      	nop
	else
	{
		/* Do nothing. */
	}
	__enable_irq();
	return (returnValue);
 8061b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8061b80:	4618      	mov	r0, r3
 8061b82:	3718      	adds	r7, #24
 8061b84:	46bd      	mov	sp, r7
 8061b86:	bd80      	pop	{r7, pc}

08061b88 <CanSpi_Receive>:
uint8 CanSpi_Receive(CANSPI_uCAN_MSG *tempCanMsg)
{
 8061b88:	b580      	push	{r7, lr}
 8061b8a:	b088      	sub	sp, #32
 8061b8c:	af00      	add	r7, sp, #0
 8061b8e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8061b90:	b672      	cpsid	i
}
 8061b92:	bf00      	nop
	__disable_irq();
	uint8 returnValue = 0;
 8061b94:	2300      	movs	r3, #0
 8061b96:	77fb      	strb	r3, [r7, #31]
	CANSPI_rx_reg_t rxReg = {0};
 8061b98:	f107 0310 	add.w	r3, r7, #16
 8061b9c:	2200      	movs	r2, #0
 8061b9e:	601a      	str	r2, [r3, #0]
 8061ba0:	605a      	str	r2, [r3, #4]
 8061ba2:	609a      	str	r2, [r3, #8]
 8061ba4:	731a      	strb	r2, [r3, #12]
	CANSPI_CtrlRxStatus_t rxStatus = {0};
 8061ba6:	2300      	movs	r3, #0
 8061ba8:	60fb      	str	r3, [r7, #12]
	rxStatus.CtrlRxStatus = CanSpi_MCP2515_GetRxStatus();
 8061baa:	f000 fb1f 	bl	80621ec <CanSpi_MCP2515_GetRxStatus>
 8061bae:	4603      	mov	r3, r0
 8061bb0:	733b      	strb	r3, [r7, #12]

	if (rxStatus.rxBuffer != 0)
 8061bb2:	7b3b      	ldrb	r3, [r7, #12]
 8061bb4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8061bb8:	b2db      	uxtb	r3, r3
 8061bba:	2b00      	cmp	r3, #0
 8061bbc:	d066      	beq.n	8061c8c <CanSpi_Receive+0x104>
	{
		if ((rxStatus.rxBuffer == CANSPI_MSG_IN_RXB0)|(rxStatus.rxBuffer == CANSPI_MSG_IN_BOTH_BUFFERS))
 8061bbe:	7b3b      	ldrb	r3, [r7, #12]
 8061bc0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8061bc4:	b2db      	uxtb	r3, r3
 8061bc6:	2b40      	cmp	r3, #64	@ 0x40
 8061bc8:	bf0c      	ite	eq
 8061bca:	2301      	moveq	r3, #1
 8061bcc:	2300      	movne	r3, #0
 8061bce:	b2da      	uxtb	r2, r3
 8061bd0:	7b3b      	ldrb	r3, [r7, #12]
 8061bd2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8061bd6:	b2db      	uxtb	r3, r3
 8061bd8:	2bc0      	cmp	r3, #192	@ 0xc0
 8061bda:	bf0c      	ite	eq
 8061bdc:	2301      	moveq	r3, #1
 8061bde:	2300      	movne	r3, #0
 8061be0:	b2db      	uxtb	r3, r3
 8061be2:	4313      	orrs	r3, r2
 8061be4:	b2db      	uxtb	r3, r3
 8061be6:	2b00      	cmp	r3, #0
 8061be8:	d007      	beq.n	8061bfa <CanSpi_Receive+0x72>
		{
			CanSpi_MCP2515_ReadRxSequence(CANSPI_MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8061bea:	f107 0310 	add.w	r3, r7, #16
 8061bee:	220d      	movs	r2, #13
 8061bf0:	4619      	mov	r1, r3
 8061bf2:	2090      	movs	r0, #144	@ 0x90
 8061bf4:	f000 fa28 	bl	8062048 <CanSpi_MCP2515_ReadRxSequence>
 8061bf8:	e00c      	b.n	8061c14 <CanSpi_Receive+0x8c>
		}
		else if (rxStatus.rxBuffer == CANSPI_MSG_IN_RXB1)
 8061bfa:	7b3b      	ldrb	r3, [r7, #12]
 8061bfc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8061c00:	b2db      	uxtb	r3, r3
 8061c02:	2b80      	cmp	r3, #128	@ 0x80
 8061c04:	d106      	bne.n	8061c14 <CanSpi_Receive+0x8c>
		{
			CanSpi_MCP2515_ReadRxSequence(CANSPI_MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8061c06:	f107 0310 	add.w	r3, r7, #16
 8061c0a:	220d      	movs	r2, #13
 8061c0c:	4619      	mov	r1, r3
 8061c0e:	2094      	movs	r0, #148	@ 0x94
 8061c10:	f000 fa1a 	bl	8062048 <CanSpi_MCP2515_ReadRxSequence>
		else
		{
			/* Do nothing. */
		}

		if (rxStatus.msgType == CANSPI_dEXTENDED_CAN_MSG_ID_2_0B)
 8061c14:	7b3b      	ldrb	r3, [r7, #12]
 8061c16:	f003 0318 	and.w	r3, r3, #24
 8061c1a:	b2db      	uxtb	r3, r3
 8061c1c:	2b10      	cmp	r3, #16
 8061c1e:	d10c      	bne.n	8061c3a <CanSpi_Receive+0xb2>
		{
			tempCanMsg->frame.idType = (uint8) CANSPI_dEXTENDED_CAN_MSG_ID_2_0B;
 8061c20:	687b      	ldr	r3, [r7, #4]
 8061c22:	2202      	movs	r2, #2
 8061c24:	701a      	strb	r2, [r3, #0]
			tempCanMsg->frame.id = CanSpi_ConvertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8061c26:	7cb8      	ldrb	r0, [r7, #18]
 8061c28:	7cf9      	ldrb	r1, [r7, #19]
 8061c2a:	7c3a      	ldrb	r2, [r7, #16]
 8061c2c:	7c7b      	ldrb	r3, [r7, #17]
 8061c2e:	f000 f8a1 	bl	8061d74 <CanSpi_ConvertReg2ExtendedCANid>
 8061c32:	4602      	mov	r2, r0
 8061c34:	687b      	ldr	r3, [r7, #4]
 8061c36:	605a      	str	r2, [r3, #4]
 8061c38:	e00b      	b.n	8061c52 <CanSpi_Receive+0xca>
		}
		else
		{
			tempCanMsg->frame.idType = (uint8) CANSPI_dSTANDARD_CAN_MSG_ID_2_0B;
 8061c3a:	687b      	ldr	r3, [r7, #4]
 8061c3c:	2201      	movs	r2, #1
 8061c3e:	701a      	strb	r2, [r3, #0]
			tempCanMsg->frame.id = CanSpi_ConvertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8061c40:	7c3b      	ldrb	r3, [r7, #16]
 8061c42:	7c7a      	ldrb	r2, [r7, #17]
 8061c44:	4611      	mov	r1, r2
 8061c46:	4618      	mov	r0, r3
 8061c48:	f000 f8d6 	bl	8061df8 <CanSpi_ConvertReg2StandardCANid>
 8061c4c:	4602      	mov	r2, r0
 8061c4e:	687b      	ldr	r3, [r7, #4]
 8061c50:	605a      	str	r2, [r3, #4]
		}
		tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 8061c52:	7d3a      	ldrb	r2, [r7, #20]
 8061c54:	687b      	ldr	r3, [r7, #4]
 8061c56:	721a      	strb	r2, [r3, #8]
		tempCanMsg->frame.data0 = rxReg.RXBnD0;
 8061c58:	7d7a      	ldrb	r2, [r7, #21]
 8061c5a:	687b      	ldr	r3, [r7, #4]
 8061c5c:	725a      	strb	r2, [r3, #9]
		tempCanMsg->frame.data1 = rxReg.RXBnD1;
 8061c5e:	7dba      	ldrb	r2, [r7, #22]
 8061c60:	687b      	ldr	r3, [r7, #4]
 8061c62:	729a      	strb	r2, [r3, #10]
		tempCanMsg->frame.data2 = rxReg.RXBnD2;
 8061c64:	7dfa      	ldrb	r2, [r7, #23]
 8061c66:	687b      	ldr	r3, [r7, #4]
 8061c68:	72da      	strb	r2, [r3, #11]
		tempCanMsg->frame.data3 = rxReg.RXBnD3;
 8061c6a:	7e3a      	ldrb	r2, [r7, #24]
 8061c6c:	687b      	ldr	r3, [r7, #4]
 8061c6e:	731a      	strb	r2, [r3, #12]
		tempCanMsg->frame.data4 = rxReg.RXBnD4;
 8061c70:	7e7a      	ldrb	r2, [r7, #25]
 8061c72:	687b      	ldr	r3, [r7, #4]
 8061c74:	735a      	strb	r2, [r3, #13]
		tempCanMsg->frame.data5 = rxReg.RXBnD5;
 8061c76:	7eba      	ldrb	r2, [r7, #26]
 8061c78:	687b      	ldr	r3, [r7, #4]
 8061c7a:	739a      	strb	r2, [r3, #14]
		tempCanMsg->frame.data6 = rxReg.RXBnD6;
 8061c7c:	7efa      	ldrb	r2, [r7, #27]
 8061c7e:	687b      	ldr	r3, [r7, #4]
 8061c80:	73da      	strb	r2, [r3, #15]
		tempCanMsg->frame.data7 = rxReg.RXBnD7;
 8061c82:	7f3a      	ldrb	r2, [r7, #28]
 8061c84:	687b      	ldr	r3, [r7, #4]
 8061c86:	741a      	strb	r2, [r3, #16]
		returnValue = 1;
 8061c88:	2301      	movs	r3, #1
 8061c8a:	77fb      	strb	r3, [r7, #31]
  __ASM volatile ("cpsie i" : : : "memory");
 8061c8c:	b662      	cpsie	i
}
 8061c8e:	bf00      	nop
	else
	{
		/* Do nothing. */
	}
	__enable_irq();
	return (returnValue);
 8061c90:	7ffb      	ldrb	r3, [r7, #31]
}
 8061c92:	4618      	mov	r0, r3
 8061c94:	3720      	adds	r7, #32
 8061c96:	46bd      	mov	sp, r7
 8061c98:	bd80      	pop	{r7, pc}

08061c9a <CanSpi_MessagesInBuffer>:
static uint32 CanSpi_MessagesInBuffer(void)
{
 8061c9a:	b580      	push	{r7, lr}
 8061c9c:	b082      	sub	sp, #8
 8061c9e:	af00      	add	r7, sp, #0
	CANSPI_CtrlStatus_t ctrlStatus = {0};
 8061ca0:	2300      	movs	r3, #0
 8061ca2:	603b      	str	r3, [r7, #0]
	uint8 messageCount = 0;
 8061ca4:	2300      	movs	r3, #0
 8061ca6:	71fb      	strb	r3, [r7, #7]
	ctrlStatus.CtrlStatus = CanSpi_MCP2515_ReadStatus();
 8061ca8:	f000 fa82 	bl	80621b0 <CanSpi_MCP2515_ReadStatus>
 8061cac:	4603      	mov	r3, r0
 8061cae:	703b      	strb	r3, [r7, #0]
	if(ctrlStatus.RX0IF != 0) messageCount++;
 8061cb0:	783b      	ldrb	r3, [r7, #0]
 8061cb2:	f003 0301 	and.w	r3, r3, #1
 8061cb6:	b2db      	uxtb	r3, r3
 8061cb8:	2b00      	cmp	r3, #0
 8061cba:	d002      	beq.n	8061cc2 <CanSpi_MessagesInBuffer+0x28>
 8061cbc:	79fb      	ldrb	r3, [r7, #7]
 8061cbe:	3301      	adds	r3, #1
 8061cc0:	71fb      	strb	r3, [r7, #7]
	else
	{
		/* Do nothing */
	}
	if(ctrlStatus.RX1IF != 0) messageCount++;
 8061cc2:	783b      	ldrb	r3, [r7, #0]
 8061cc4:	f003 0302 	and.w	r3, r3, #2
 8061cc8:	b2db      	uxtb	r3, r3
 8061cca:	2b00      	cmp	r3, #0
 8061ccc:	d002      	beq.n	8061cd4 <CanSpi_MessagesInBuffer+0x3a>
 8061cce:	79fb      	ldrb	r3, [r7, #7]
 8061cd0:	3301      	adds	r3, #1
 8061cd2:	71fb      	strb	r3, [r7, #7]
	else
	{
		/* Do nothing */
	}
	return (messageCount);
 8061cd4:	79fb      	ldrb	r3, [r7, #7]
}
 8061cd6:	4618      	mov	r0, r3
 8061cd8:	3708      	adds	r7, #8
 8061cda:	46bd      	mov	sp, r7
 8061cdc:	bd80      	pop	{r7, pc}

08061cde <CanSpi_IsBussOff>:
static uint8 CanSpi_IsBussOff(void)
{
 8061cde:	b580      	push	{r7, lr}
 8061ce0:	b082      	sub	sp, #8
 8061ce2:	af00      	add	r7, sp, #0
	CANSPI_CtrlErrorStatus_t errorStatus = {0};
 8061ce4:	2300      	movs	r3, #0
 8061ce6:	603b      	str	r3, [r7, #0]
	uint8 returnValue = 0;
 8061ce8:	2300      	movs	r3, #0
 8061cea:	71fb      	strb	r3, [r7, #7]
	errorStatus.CtrlErrorStatus = CanSpi_MCP2515_ReadByte(CANSPI_MCP2515_EFLG);
 8061cec:	202d      	movs	r0, #45	@ 0x2d
 8061cee:	f000 f987 	bl	8062000 <CanSpi_MCP2515_ReadByte>
 8061cf2:	4603      	mov	r3, r0
 8061cf4:	703b      	strb	r3, [r7, #0]
	if(errorStatus.TXBO == 1) returnValue = 1;
 8061cf6:	783b      	ldrb	r3, [r7, #0]
 8061cf8:	f003 0320 	and.w	r3, r3, #32
 8061cfc:	b2db      	uxtb	r3, r3
 8061cfe:	2b00      	cmp	r3, #0
 8061d00:	d001      	beq.n	8061d06 <CanSpi_IsBussOff+0x28>
 8061d02:	2301      	movs	r3, #1
 8061d04:	71fb      	strb	r3, [r7, #7]
	else
	{
		/* Do nothing. */
	}
	return (returnValue);
 8061d06:	79fb      	ldrb	r3, [r7, #7]
}
 8061d08:	4618      	mov	r0, r3
 8061d0a:	3708      	adds	r7, #8
 8061d0c:	46bd      	mov	sp, r7
 8061d0e:	bd80      	pop	{r7, pc}

08061d10 <CanSpi_IsRxErrorPassive>:
static uint8 CanSpi_IsRxErrorPassive(void)
{
 8061d10:	b580      	push	{r7, lr}
 8061d12:	b082      	sub	sp, #8
 8061d14:	af00      	add	r7, sp, #0
	CANSPI_CtrlErrorStatus_t errorStatus = {0};
 8061d16:	2300      	movs	r3, #0
 8061d18:	603b      	str	r3, [r7, #0]
	uint8 returnValue = 0;
 8061d1a:	2300      	movs	r3, #0
 8061d1c:	71fb      	strb	r3, [r7, #7]
	errorStatus.CtrlErrorStatus = CanSpi_MCP2515_ReadByte(CANSPI_MCP2515_EFLG);
 8061d1e:	202d      	movs	r0, #45	@ 0x2d
 8061d20:	f000 f96e 	bl	8062000 <CanSpi_MCP2515_ReadByte>
 8061d24:	4603      	mov	r3, r0
 8061d26:	703b      	strb	r3, [r7, #0]
	if(errorStatus.RXEP == 1) returnValue = 1;
 8061d28:	783b      	ldrb	r3, [r7, #0]
 8061d2a:	f003 0308 	and.w	r3, r3, #8
 8061d2e:	b2db      	uxtb	r3, r3
 8061d30:	2b00      	cmp	r3, #0
 8061d32:	d001      	beq.n	8061d38 <CanSpi_IsRxErrorPassive+0x28>
 8061d34:	2301      	movs	r3, #1
 8061d36:	71fb      	strb	r3, [r7, #7]
	else
	{
		/* Do nothing. */
	}
	return (returnValue);
 8061d38:	79fb      	ldrb	r3, [r7, #7]
}
 8061d3a:	4618      	mov	r0, r3
 8061d3c:	3708      	adds	r7, #8
 8061d3e:	46bd      	mov	sp, r7
 8061d40:	bd80      	pop	{r7, pc}

08061d42 <CanSpi_IsTxErrorPassive>:
static uint8 CanSpi_IsTxErrorPassive(void)
{
 8061d42:	b580      	push	{r7, lr}
 8061d44:	b082      	sub	sp, #8
 8061d46:	af00      	add	r7, sp, #0
	CANSPI_CtrlErrorStatus_t errorStatus = {0};
 8061d48:	2300      	movs	r3, #0
 8061d4a:	603b      	str	r3, [r7, #0]
	uint8 returnValue = 0;
 8061d4c:	2300      	movs	r3, #0
 8061d4e:	71fb      	strb	r3, [r7, #7]
	errorStatus.CtrlErrorStatus = CanSpi_MCP2515_ReadByte(CANSPI_MCP2515_EFLG);
 8061d50:	202d      	movs	r0, #45	@ 0x2d
 8061d52:	f000 f955 	bl	8062000 <CanSpi_MCP2515_ReadByte>
 8061d56:	4603      	mov	r3, r0
 8061d58:	703b      	strb	r3, [r7, #0]
	if(errorStatus.TXEP == 1) returnValue = 1;
 8061d5a:	783b      	ldrb	r3, [r7, #0]
 8061d5c:	f003 0310 	and.w	r3, r3, #16
 8061d60:	b2db      	uxtb	r3, r3
 8061d62:	2b00      	cmp	r3, #0
 8061d64:	d001      	beq.n	8061d6a <CanSpi_IsTxErrorPassive+0x28>
 8061d66:	2301      	movs	r3, #1
 8061d68:	71fb      	strb	r3, [r7, #7]
	else
	{
		/* Do nothing. */
	}
	return (returnValue);
 8061d6a:	79fb      	ldrb	r3, [r7, #7]
}
 8061d6c:	4618      	mov	r0, r3
 8061d6e:	3708      	adds	r7, #8
 8061d70:	46bd      	mov	sp, r7
 8061d72:	bd80      	pop	{r7, pc}

08061d74 <CanSpi_ConvertReg2ExtendedCANid>:
static uint32 CanSpi_ConvertReg2ExtendedCANid(uint8 tempRXBn_EIDH, uint8 tempRXBn_EIDL, uint8 tempRXBn_SIDH, uint8 tempRXBn_SIDL)
{
 8061d74:	b490      	push	{r4, r7}
 8061d76:	b086      	sub	sp, #24
 8061d78:	af00      	add	r7, sp, #0
 8061d7a:	4604      	mov	r4, r0
 8061d7c:	4608      	mov	r0, r1
 8061d7e:	4611      	mov	r1, r2
 8061d80:	461a      	mov	r2, r3
 8061d82:	4623      	mov	r3, r4
 8061d84:	71fb      	strb	r3, [r7, #7]
 8061d86:	4603      	mov	r3, r0
 8061d88:	71bb      	strb	r3, [r7, #6]
 8061d8a:	460b      	mov	r3, r1
 8061d8c:	717b      	strb	r3, [r7, #5]
 8061d8e:	4613      	mov	r3, r2
 8061d90:	713b      	strb	r3, [r7, #4]
	uint32 returnValue = 0;
 8061d92:	2300      	movs	r3, #0
 8061d94:	617b      	str	r3, [r7, #20]
	uint32 ConvertedID = 0;
 8061d96:	2300      	movs	r3, #0
 8061d98:	613b      	str	r3, [r7, #16]
	uint8 CAN_standardLo_ID_lo2bits = 0;
 8061d9a:	2300      	movs	r3, #0
 8061d9c:	73fb      	strb	r3, [r7, #15]
	uint8 CAN_standardLo_ID_hi3bits = 0;
 8061d9e:	2300      	movs	r3, #0
 8061da0:	73bb      	strb	r3, [r7, #14]
	CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 8061da2:	793b      	ldrb	r3, [r7, #4]
 8061da4:	f003 0303 	and.w	r3, r3, #3
 8061da8:	73fb      	strb	r3, [r7, #15]
	CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 8061daa:	793b      	ldrb	r3, [r7, #4]
 8061dac:	095b      	lsrs	r3, r3, #5
 8061dae:	73bb      	strb	r3, [r7, #14]
	ConvertedID = (tempRXBn_SIDH << 3);
 8061db0:	797b      	ldrb	r3, [r7, #5]
 8061db2:	00db      	lsls	r3, r3, #3
 8061db4:	613b      	str	r3, [r7, #16]
	ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 8061db6:	7bbb      	ldrb	r3, [r7, #14]
 8061db8:	693a      	ldr	r2, [r7, #16]
 8061dba:	4413      	add	r3, r2
 8061dbc:	613b      	str	r3, [r7, #16]
	ConvertedID = (ConvertedID << 2);
 8061dbe:	693b      	ldr	r3, [r7, #16]
 8061dc0:	009b      	lsls	r3, r3, #2
 8061dc2:	613b      	str	r3, [r7, #16]
	ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 8061dc4:	7bfb      	ldrb	r3, [r7, #15]
 8061dc6:	693a      	ldr	r2, [r7, #16]
 8061dc8:	4413      	add	r3, r2
 8061dca:	613b      	str	r3, [r7, #16]
	ConvertedID = (ConvertedID << 8);
 8061dcc:	693b      	ldr	r3, [r7, #16]
 8061dce:	021b      	lsls	r3, r3, #8
 8061dd0:	613b      	str	r3, [r7, #16]
	ConvertedID = ConvertedID + tempRXBn_EIDH;
 8061dd2:	79fb      	ldrb	r3, [r7, #7]
 8061dd4:	693a      	ldr	r2, [r7, #16]
 8061dd6:	4413      	add	r3, r2
 8061dd8:	613b      	str	r3, [r7, #16]
	ConvertedID = (ConvertedID << 8);
 8061dda:	693b      	ldr	r3, [r7, #16]
 8061ddc:	021b      	lsls	r3, r3, #8
 8061dde:	613b      	str	r3, [r7, #16]
	ConvertedID = ConvertedID + tempRXBn_EIDL;
 8061de0:	79bb      	ldrb	r3, [r7, #6]
 8061de2:	693a      	ldr	r2, [r7, #16]
 8061de4:	4413      	add	r3, r2
 8061de6:	613b      	str	r3, [r7, #16]
	returnValue = ConvertedID;
 8061de8:	693b      	ldr	r3, [r7, #16]
 8061dea:	617b      	str	r3, [r7, #20]
	return (returnValue);
 8061dec:	697b      	ldr	r3, [r7, #20]
}
 8061dee:	4618      	mov	r0, r3
 8061df0:	3718      	adds	r7, #24
 8061df2:	46bd      	mov	sp, r7
 8061df4:	bc90      	pop	{r4, r7}
 8061df6:	4770      	bx	lr

08061df8 <CanSpi_ConvertReg2StandardCANid>:
static uint32 CanSpi_ConvertReg2StandardCANid(uint8 tempRXBn_SIDH, uint8 tempRXBn_SIDL)
{
 8061df8:	b480      	push	{r7}
 8061dfa:	b085      	sub	sp, #20
 8061dfc:	af00      	add	r7, sp, #0
 8061dfe:	4603      	mov	r3, r0
 8061e00:	460a      	mov	r2, r1
 8061e02:	71fb      	strb	r3, [r7, #7]
 8061e04:	4613      	mov	r3, r2
 8061e06:	71bb      	strb	r3, [r7, #6]
	uint32 returnValue = 0;
 8061e08:	2300      	movs	r3, #0
 8061e0a:	60fb      	str	r3, [r7, #12]
	uint32 ConvertedID = 0;
 8061e0c:	2300      	movs	r3, #0
 8061e0e:	60bb      	str	r3, [r7, #8]
	ConvertedID = (tempRXBn_SIDH << 3);
 8061e10:	79fb      	ldrb	r3, [r7, #7]
 8061e12:	00db      	lsls	r3, r3, #3
 8061e14:	60bb      	str	r3, [r7, #8]
	ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 8061e16:	79bb      	ldrb	r3, [r7, #6]
 8061e18:	095b      	lsrs	r3, r3, #5
 8061e1a:	b2db      	uxtb	r3, r3
 8061e1c:	461a      	mov	r2, r3
 8061e1e:	68bb      	ldr	r3, [r7, #8]
 8061e20:	4413      	add	r3, r2
 8061e22:	60bb      	str	r3, [r7, #8]
	returnValue = ConvertedID;
 8061e24:	68bb      	ldr	r3, [r7, #8]
 8061e26:	60fb      	str	r3, [r7, #12]
	return (returnValue);
 8061e28:	68fb      	ldr	r3, [r7, #12]
}
 8061e2a:	4618      	mov	r0, r3
 8061e2c:	3714      	adds	r7, #20
 8061e2e:	46bd      	mov	sp, r7
 8061e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8061e34:	4770      	bx	lr

08061e36 <CanSpi_ConvertCANid2Reg>:
static void CanSpi_ConvertCANid2Reg(uint32 tempPassedInID, uint8 canIdType, CANSPI_id_reg_t *passedIdReg)
{
 8061e36:	b480      	push	{r7}
 8061e38:	b087      	sub	sp, #28
 8061e3a:	af00      	add	r7, sp, #0
 8061e3c:	60f8      	str	r0, [r7, #12]
 8061e3e:	460b      	mov	r3, r1
 8061e40:	607a      	str	r2, [r7, #4]
 8061e42:	72fb      	strb	r3, [r7, #11]
	uint8 wipSIDL = 0;
 8061e44:	2300      	movs	r3, #0
 8061e46:	75fb      	strb	r3, [r7, #23]
	if (canIdType == CANSPI_dEXTENDED_CAN_MSG_ID_2_0B)
 8061e48:	7afb      	ldrb	r3, [r7, #11]
 8061e4a:	2b02      	cmp	r3, #2
 8061e4c:	d12e      	bne.n	8061eac <CanSpi_ConvertCANid2Reg+0x76>
	{
		passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 8061e4e:	68fb      	ldr	r3, [r7, #12]
 8061e50:	b2da      	uxtb	r2, r3
 8061e52:	687b      	ldr	r3, [r7, #4]
 8061e54:	70da      	strb	r2, [r3, #3]
		tempPassedInID = tempPassedInID >> 8;
 8061e56:	68fb      	ldr	r3, [r7, #12]
 8061e58:	0a1b      	lsrs	r3, r3, #8
 8061e5a:	60fb      	str	r3, [r7, #12]
		passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 8061e5c:	68fb      	ldr	r3, [r7, #12]
 8061e5e:	b2da      	uxtb	r2, r3
 8061e60:	687b      	ldr	r3, [r7, #4]
 8061e62:	709a      	strb	r2, [r3, #2]
		tempPassedInID = tempPassedInID >> 8;
 8061e64:	68fb      	ldr	r3, [r7, #12]
 8061e66:	0a1b      	lsrs	r3, r3, #8
 8061e68:	60fb      	str	r3, [r7, #12]
		wipSIDL = 0x03 & tempPassedInID;
 8061e6a:	68fb      	ldr	r3, [r7, #12]
 8061e6c:	b2db      	uxtb	r3, r3
 8061e6e:	f003 0303 	and.w	r3, r3, #3
 8061e72:	75fb      	strb	r3, [r7, #23]
		tempPassedInID = tempPassedInID << 3;
 8061e74:	68fb      	ldr	r3, [r7, #12]
 8061e76:	00db      	lsls	r3, r3, #3
 8061e78:	60fb      	str	r3, [r7, #12]
		wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 8061e7a:	68fb      	ldr	r3, [r7, #12]
 8061e7c:	b2db      	uxtb	r3, r3
 8061e7e:	f023 031f 	bic.w	r3, r3, #31
 8061e82:	b2da      	uxtb	r2, r3
 8061e84:	7dfb      	ldrb	r3, [r7, #23]
 8061e86:	4413      	add	r3, r2
 8061e88:	75fb      	strb	r3, [r7, #23]
		wipSIDL = wipSIDL + 0x08;
 8061e8a:	7dfb      	ldrb	r3, [r7, #23]
 8061e8c:	3308      	adds	r3, #8
 8061e8e:	75fb      	strb	r3, [r7, #23]
		passedIdReg->tempSIDL = 0xEB & wipSIDL;
 8061e90:	7dfb      	ldrb	r3, [r7, #23]
 8061e92:	f023 0314 	bic.w	r3, r3, #20
 8061e96:	b2da      	uxtb	r2, r3
 8061e98:	687b      	ldr	r3, [r7, #4]
 8061e9a:	705a      	strb	r2, [r3, #1]
		tempPassedInID = tempPassedInID >> 8;
 8061e9c:	68fb      	ldr	r3, [r7, #12]
 8061e9e:	0a1b      	lsrs	r3, r3, #8
 8061ea0:	60fb      	str	r3, [r7, #12]
		passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 8061ea2:	68fb      	ldr	r3, [r7, #12]
 8061ea4:	b2da      	uxtb	r2, r3
 8061ea6:	687b      	ldr	r3, [r7, #4]
 8061ea8:	701a      	strb	r2, [r3, #0]
		tempPassedInID = tempPassedInID << 5;
		passedIdReg->tempSIDL = 0xFF & tempPassedInID;
		tempPassedInID = tempPassedInID >> 8;
		passedIdReg->tempSIDH = 0xFF & tempPassedInID;
	}
}
 8061eaa:	e013      	b.n	8061ed4 <CanSpi_ConvertCANid2Reg+0x9e>
		passedIdReg->tempEID8 = 0;
 8061eac:	687b      	ldr	r3, [r7, #4]
 8061eae:	2200      	movs	r2, #0
 8061eb0:	709a      	strb	r2, [r3, #2]
		passedIdReg->tempEID0 = 0;
 8061eb2:	687b      	ldr	r3, [r7, #4]
 8061eb4:	2200      	movs	r2, #0
 8061eb6:	70da      	strb	r2, [r3, #3]
		tempPassedInID = tempPassedInID << 5;
 8061eb8:	68fb      	ldr	r3, [r7, #12]
 8061eba:	015b      	lsls	r3, r3, #5
 8061ebc:	60fb      	str	r3, [r7, #12]
		passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 8061ebe:	68fb      	ldr	r3, [r7, #12]
 8061ec0:	b2da      	uxtb	r2, r3
 8061ec2:	687b      	ldr	r3, [r7, #4]
 8061ec4:	705a      	strb	r2, [r3, #1]
		tempPassedInID = tempPassedInID >> 8;
 8061ec6:	68fb      	ldr	r3, [r7, #12]
 8061ec8:	0a1b      	lsrs	r3, r3, #8
 8061eca:	60fb      	str	r3, [r7, #12]
		passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 8061ecc:	68fb      	ldr	r3, [r7, #12]
 8061ece:	b2da      	uxtb	r2, r3
 8061ed0:	687b      	ldr	r3, [r7, #4]
 8061ed2:	701a      	strb	r2, [r3, #0]
}
 8061ed4:	bf00      	nop
 8061ed6:	371c      	adds	r7, #28
 8061ed8:	46bd      	mov	sp, r7
 8061eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8061ede:	4770      	bx	lr

08061ee0 <CanSpi_MCP2515_Initialize>:
static bool CanSpi_MCP2515_Initialize(void)
{
 8061ee0:	b580      	push	{r7, lr}
 8061ee2:	b082      	sub	sp, #8
 8061ee4:	af00      	add	r7, sp, #0
	uint8 loop = 10;
 8061ee6:	230a      	movs	r3, #10
 8061ee8:	71fb      	strb	r3, [r7, #7]
	CANSPI_MCP2515_CS_HIGH();
 8061eea:	2201      	movs	r2, #1
 8061eec:	2110      	movs	r1, #16
 8061eee:	480b      	ldr	r0, [pc, #44]	@ (8061f1c <CanSpi_MCP2515_Initialize+0x3c>)
 8061ef0:	f006 ffc6 	bl	8068e80 <HAL_GPIO_WritePin>
	do
	{
		if(HAL_SPI_GetState(CANSPI_SPI_CAN) == HAL_SPI_STATE_READY) return true;
 8061ef4:	480a      	ldr	r0, [pc, #40]	@ (8061f20 <CanSpi_MCP2515_Initialize+0x40>)
 8061ef6:	f008 fd91 	bl	806aa1c <HAL_SPI_GetState>
 8061efa:	4603      	mov	r3, r0
 8061efc:	2b01      	cmp	r3, #1
 8061efe:	d101      	bne.n	8061f04 <CanSpi_MCP2515_Initialize+0x24>
 8061f00:	2301      	movs	r3, #1
 8061f02:	e006      	b.n	8061f12 <CanSpi_MCP2515_Initialize+0x32>
		else
		{
			/* Do nothing. */
		}
		loop--;
 8061f04:	79fb      	ldrb	r3, [r7, #7]
 8061f06:	3b01      	subs	r3, #1
 8061f08:	71fb      	strb	r3, [r7, #7]
	}while(loop > 0);
 8061f0a:	79fb      	ldrb	r3, [r7, #7]
 8061f0c:	2b00      	cmp	r3, #0
 8061f0e:	d1f1      	bne.n	8061ef4 <CanSpi_MCP2515_Initialize+0x14>
	return false;
 8061f10:	2300      	movs	r3, #0
}
 8061f12:	4618      	mov	r0, r3
 8061f14:	3708      	adds	r7, #8
 8061f16:	46bd      	mov	sp, r7
 8061f18:	bd80      	pop	{r7, pc}
 8061f1a:	bf00      	nop
 8061f1c:	40020800 	.word	0x40020800
 8061f20:	20010a3c 	.word	0x20010a3c

08061f24 <CanSpi_MCP2515_SetConfigMode>:
static bool CanSpi_MCP2515_SetConfigMode(void)
{
 8061f24:	b580      	push	{r7, lr}
 8061f26:	b082      	sub	sp, #8
 8061f28:	af00      	add	r7, sp, #0
	uint8 loop = 10;
 8061f2a:	230a      	movs	r3, #10
 8061f2c:	71fb      	strb	r3, [r7, #7]
	CanSpi_MCP2515_WriteByte(CANSPI_MCP2515_CANCTRL, 0x80);
 8061f2e:	2180      	movs	r1, #128	@ 0x80
 8061f30:	200f      	movs	r0, #15
 8061f32:	f000 f8ab 	bl	806208c <CanSpi_MCP2515_WriteByte>
	do
	{
		if((CanSpi_MCP2515_ReadByte(CANSPI_MCP2515_CANSTAT) & 0xE0) == 0x80) return true;
 8061f36:	200e      	movs	r0, #14
 8061f38:	f000 f862 	bl	8062000 <CanSpi_MCP2515_ReadByte>
 8061f3c:	4603      	mov	r3, r0
 8061f3e:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8061f42:	2b80      	cmp	r3, #128	@ 0x80
 8061f44:	d101      	bne.n	8061f4a <CanSpi_MCP2515_SetConfigMode+0x26>
 8061f46:	2301      	movs	r3, #1
 8061f48:	e006      	b.n	8061f58 <CanSpi_MCP2515_SetConfigMode+0x34>
		else
		{
			/* Do nothing. */
		}
		loop--;
 8061f4a:	79fb      	ldrb	r3, [r7, #7]
 8061f4c:	3b01      	subs	r3, #1
 8061f4e:	71fb      	strb	r3, [r7, #7]
	}while(loop > 0);
 8061f50:	79fb      	ldrb	r3, [r7, #7]
 8061f52:	2b00      	cmp	r3, #0
 8061f54:	d1ef      	bne.n	8061f36 <CanSpi_MCP2515_SetConfigMode+0x12>
	return false;
 8061f56:	2300      	movs	r3, #0
}
 8061f58:	4618      	mov	r0, r3
 8061f5a:	3708      	adds	r7, #8
 8061f5c:	46bd      	mov	sp, r7
 8061f5e:	bd80      	pop	{r7, pc}

08061f60 <CanSpi_MCP2515_SetNormalMode>:
static bool CanSpi_MCP2515_SetNormalMode(void)
{
 8061f60:	b580      	push	{r7, lr}
 8061f62:	b082      	sub	sp, #8
 8061f64:	af00      	add	r7, sp, #0
	uint8 loop = 10;
 8061f66:	230a      	movs	r3, #10
 8061f68:	71fb      	strb	r3, [r7, #7]
	CanSpi_MCP2515_WriteByte(CANSPI_MCP2515_CANCTRL, 0x00);
 8061f6a:	2100      	movs	r1, #0
 8061f6c:	200f      	movs	r0, #15
 8061f6e:	f000 f88d 	bl	806208c <CanSpi_MCP2515_WriteByte>
	do
	{
		if((CanSpi_MCP2515_ReadByte(CANSPI_MCP2515_CANSTAT) & 0xE0) == 0x00) return true;
 8061f72:	200e      	movs	r0, #14
 8061f74:	f000 f844 	bl	8062000 <CanSpi_MCP2515_ReadByte>
 8061f78:	4603      	mov	r3, r0
 8061f7a:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8061f7e:	2b00      	cmp	r3, #0
 8061f80:	d101      	bne.n	8061f86 <CanSpi_MCP2515_SetNormalMode+0x26>
 8061f82:	2301      	movs	r3, #1
 8061f84:	e006      	b.n	8061f94 <CanSpi_MCP2515_SetNormalMode+0x34>
		else
		{
			/* Do nothing. */
		}
		loop--;
 8061f86:	79fb      	ldrb	r3, [r7, #7]
 8061f88:	3b01      	subs	r3, #1
 8061f8a:	71fb      	strb	r3, [r7, #7]
	}while(loop > 0);
 8061f8c:	79fb      	ldrb	r3, [r7, #7]
 8061f8e:	2b00      	cmp	r3, #0
 8061f90:	d1ef      	bne.n	8061f72 <CanSpi_MCP2515_SetNormalMode+0x12>
	return false;
 8061f92:	2300      	movs	r3, #0
}
 8061f94:	4618      	mov	r0, r3
 8061f96:	3708      	adds	r7, #8
 8061f98:	46bd      	mov	sp, r7
 8061f9a:	bd80      	pop	{r7, pc}

08061f9c <CanSpi_MCP2515_SetSleepMode>:
static bool CanSpi_MCP2515_SetSleepMode(void)
{
 8061f9c:	b580      	push	{r7, lr}
 8061f9e:	b082      	sub	sp, #8
 8061fa0:	af00      	add	r7, sp, #0
	uint8 loop = 10;
 8061fa2:	230a      	movs	r3, #10
 8061fa4:	71fb      	strb	r3, [r7, #7]
	CanSpi_MCP2515_WriteByte(CANSPI_MCP2515_CANCTRL, 0x20);
 8061fa6:	2120      	movs	r1, #32
 8061fa8:	200f      	movs	r0, #15
 8061faa:	f000 f86f 	bl	806208c <CanSpi_MCP2515_WriteByte>
	do
	{
		if((CanSpi_MCP2515_ReadByte(CANSPI_MCP2515_CANSTAT) & 0xE0) == 0x20) return true;
 8061fae:	200e      	movs	r0, #14
 8061fb0:	f000 f826 	bl	8062000 <CanSpi_MCP2515_ReadByte>
 8061fb4:	4603      	mov	r3, r0
 8061fb6:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8061fba:	2b20      	cmp	r3, #32
 8061fbc:	d101      	bne.n	8061fc2 <CanSpi_MCP2515_SetSleepMode+0x26>
 8061fbe:	2301      	movs	r3, #1
 8061fc0:	e006      	b.n	8061fd0 <CanSpi_MCP2515_SetSleepMode+0x34>
		else
		{
			/* Do nothing. */
		}

		loop--;
 8061fc2:	79fb      	ldrb	r3, [r7, #7]
 8061fc4:	3b01      	subs	r3, #1
 8061fc6:	71fb      	strb	r3, [r7, #7]
	}while(loop > 0);
 8061fc8:	79fb      	ldrb	r3, [r7, #7]
 8061fca:	2b00      	cmp	r3, #0
 8061fcc:	d1ef      	bne.n	8061fae <CanSpi_MCP2515_SetSleepMode+0x12>
	return false;
 8061fce:	2300      	movs	r3, #0
}
 8061fd0:	4618      	mov	r0, r3
 8061fd2:	3708      	adds	r7, #8
 8061fd4:	46bd      	mov	sp, r7
 8061fd6:	bd80      	pop	{r7, pc}

08061fd8 <CanSpi_MCP2515_Reset>:
static void CanSpi_MCP2515_Reset(void)
{
 8061fd8:	b580      	push	{r7, lr}
 8061fda:	af00      	add	r7, sp, #0
	CANSPI_MCP2515_CS_LOW();
 8061fdc:	2200      	movs	r2, #0
 8061fde:	2110      	movs	r1, #16
 8061fe0:	4806      	ldr	r0, [pc, #24]	@ (8061ffc <CanSpi_MCP2515_Reset+0x24>)
 8061fe2:	f006 ff4d 	bl	8068e80 <HAL_GPIO_WritePin>
	CanSpi_SPI_Tx(CANSPI_MCP2515_RESET);
 8061fe6:	20c0      	movs	r0, #192	@ 0xc0
 8061fe8:	f000 f946 	bl	8062278 <CanSpi_SPI_Tx>
	CANSPI_MCP2515_CS_HIGH();
 8061fec:	2201      	movs	r2, #1
 8061fee:	2110      	movs	r1, #16
 8061ff0:	4802      	ldr	r0, [pc, #8]	@ (8061ffc <CanSpi_MCP2515_Reset+0x24>)
 8061ff2:	f006 ff45 	bl	8068e80 <HAL_GPIO_WritePin>
}
 8061ff6:	bf00      	nop
 8061ff8:	bd80      	pop	{r7, pc}
 8061ffa:	bf00      	nop
 8061ffc:	40020800 	.word	0x40020800

08062000 <CanSpi_MCP2515_ReadByte>:
static uint8 CanSpi_MCP2515_ReadByte (uint8 address)
{
 8062000:	b580      	push	{r7, lr}
 8062002:	b084      	sub	sp, #16
 8062004:	af00      	add	r7, sp, #0
 8062006:	4603      	mov	r3, r0
 8062008:	71fb      	strb	r3, [r7, #7]
	uint8 retVal = 0;
 806200a:	2300      	movs	r3, #0
 806200c:	73fb      	strb	r3, [r7, #15]
	CANSPI_MCP2515_CS_LOW();
 806200e:	2200      	movs	r2, #0
 8062010:	2110      	movs	r1, #16
 8062012:	480c      	ldr	r0, [pc, #48]	@ (8062044 <CanSpi_MCP2515_ReadByte+0x44>)
 8062014:	f006 ff34 	bl	8068e80 <HAL_GPIO_WritePin>
	CanSpi_SPI_Tx(CANSPI_MCP2515_READ);
 8062018:	2003      	movs	r0, #3
 806201a:	f000 f92d 	bl	8062278 <CanSpi_SPI_Tx>
	CanSpi_SPI_Tx(address);
 806201e:	79fb      	ldrb	r3, [r7, #7]
 8062020:	4618      	mov	r0, r3
 8062022:	f000 f929 	bl	8062278 <CanSpi_SPI_Tx>
	retVal = CanSpi_SPI_Rx();
 8062026:	f000 f94d 	bl	80622c4 <CanSpi_SPI_Rx>
 806202a:	4603      	mov	r3, r0
 806202c:	73fb      	strb	r3, [r7, #15]
	CANSPI_MCP2515_CS_HIGH();
 806202e:	2201      	movs	r2, #1
 8062030:	2110      	movs	r1, #16
 8062032:	4804      	ldr	r0, [pc, #16]	@ (8062044 <CanSpi_MCP2515_ReadByte+0x44>)
 8062034:	f006 ff24 	bl	8068e80 <HAL_GPIO_WritePin>
	return retVal;
 8062038:	7bfb      	ldrb	r3, [r7, #15]
}
 806203a:	4618      	mov	r0, r3
 806203c:	3710      	adds	r7, #16
 806203e:	46bd      	mov	sp, r7
 8062040:	bd80      	pop	{r7, pc}
 8062042:	bf00      	nop
 8062044:	40020800 	.word	0x40020800

08062048 <CanSpi_MCP2515_ReadRxSequence>:
static void CanSpi_MCP2515_ReadRxSequence(uint8 instruction, uint8 *data, uint8 length)
{
 8062048:	b580      	push	{r7, lr}
 806204a:	b082      	sub	sp, #8
 806204c:	af00      	add	r7, sp, #0
 806204e:	4603      	mov	r3, r0
 8062050:	6039      	str	r1, [r7, #0]
 8062052:	71fb      	strb	r3, [r7, #7]
 8062054:	4613      	mov	r3, r2
 8062056:	71bb      	strb	r3, [r7, #6]
	CANSPI_MCP2515_CS_LOW();
 8062058:	2200      	movs	r2, #0
 806205a:	2110      	movs	r1, #16
 806205c:	480a      	ldr	r0, [pc, #40]	@ (8062088 <CanSpi_MCP2515_ReadRxSequence+0x40>)
 806205e:	f006 ff0f 	bl	8068e80 <HAL_GPIO_WritePin>
	CanSpi_SPI_Tx(instruction);
 8062062:	79fb      	ldrb	r3, [r7, #7]
 8062064:	4618      	mov	r0, r3
 8062066:	f000 f907 	bl	8062278 <CanSpi_SPI_Tx>
	CanSpi_SPI_RxBuffer(data, length);
 806206a:	79bb      	ldrb	r3, [r7, #6]
 806206c:	4619      	mov	r1, r3
 806206e:	6838      	ldr	r0, [r7, #0]
 8062070:	f000 f93a 	bl	80622e8 <CanSpi_SPI_RxBuffer>
	CANSPI_MCP2515_CS_HIGH();
 8062074:	2201      	movs	r2, #1
 8062076:	2110      	movs	r1, #16
 8062078:	4803      	ldr	r0, [pc, #12]	@ (8062088 <CanSpi_MCP2515_ReadRxSequence+0x40>)
 806207a:	f006 ff01 	bl	8068e80 <HAL_GPIO_WritePin>
}
 806207e:	bf00      	nop
 8062080:	3708      	adds	r7, #8
 8062082:	46bd      	mov	sp, r7
 8062084:	bd80      	pop	{r7, pc}
 8062086:	bf00      	nop
 8062088:	40020800 	.word	0x40020800

0806208c <CanSpi_MCP2515_WriteByte>:
static void CanSpi_MCP2515_WriteByte(uint8 address, uint8 data)
{
 806208c:	b580      	push	{r7, lr}
 806208e:	b082      	sub	sp, #8
 8062090:	af00      	add	r7, sp, #0
 8062092:	4603      	mov	r3, r0
 8062094:	460a      	mov	r2, r1
 8062096:	71fb      	strb	r3, [r7, #7]
 8062098:	4613      	mov	r3, r2
 806209a:	71bb      	strb	r3, [r7, #6]
	CANSPI_MCP2515_CS_LOW();
 806209c:	2200      	movs	r2, #0
 806209e:	2110      	movs	r1, #16
 80620a0:	480b      	ldr	r0, [pc, #44]	@ (80620d0 <CanSpi_MCP2515_WriteByte+0x44>)
 80620a2:	f006 feed 	bl	8068e80 <HAL_GPIO_WritePin>
	CanSpi_SPI_Tx(CANSPI_MCP2515_WRITE);
 80620a6:	2002      	movs	r0, #2
 80620a8:	f000 f8e6 	bl	8062278 <CanSpi_SPI_Tx>
	CanSpi_SPI_Tx(address);
 80620ac:	79fb      	ldrb	r3, [r7, #7]
 80620ae:	4618      	mov	r0, r3
 80620b0:	f000 f8e2 	bl	8062278 <CanSpi_SPI_Tx>
	CanSpi_SPI_Tx(data);
 80620b4:	79bb      	ldrb	r3, [r7, #6]
 80620b6:	4618      	mov	r0, r3
 80620b8:	f000 f8de 	bl	8062278 <CanSpi_SPI_Tx>
	CANSPI_MCP2515_CS_HIGH();
 80620bc:	2201      	movs	r2, #1
 80620be:	2110      	movs	r1, #16
 80620c0:	4803      	ldr	r0, [pc, #12]	@ (80620d0 <CanSpi_MCP2515_WriteByte+0x44>)
 80620c2:	f006 fedd 	bl	8068e80 <HAL_GPIO_WritePin>
}
 80620c6:	bf00      	nop
 80620c8:	3708      	adds	r7, #8
 80620ca:	46bd      	mov	sp, r7
 80620cc:	bd80      	pop	{r7, pc}
 80620ce:	bf00      	nop
 80620d0:	40020800 	.word	0x40020800

080620d4 <CanSpi_MCP2515_WriteByteSequence>:
static void CanSpi_MCP2515_WriteByteSequence(uint8 startAddress, uint8 endAddress, uint8 *data)
{
 80620d4:	b580      	push	{r7, lr}
 80620d6:	b082      	sub	sp, #8
 80620d8:	af00      	add	r7, sp, #0
 80620da:	4603      	mov	r3, r0
 80620dc:	603a      	str	r2, [r7, #0]
 80620de:	71fb      	strb	r3, [r7, #7]
 80620e0:	460b      	mov	r3, r1
 80620e2:	71bb      	strb	r3, [r7, #6]
	CANSPI_MCP2515_CS_LOW();
 80620e4:	2200      	movs	r2, #0
 80620e6:	2110      	movs	r1, #16
 80620e8:	480e      	ldr	r0, [pc, #56]	@ (8062124 <CanSpi_MCP2515_WriteByteSequence+0x50>)
 80620ea:	f006 fec9 	bl	8068e80 <HAL_GPIO_WritePin>
	CanSpi_SPI_Tx(CANSPI_MCP2515_WRITE);
 80620ee:	2002      	movs	r0, #2
 80620f0:	f000 f8c2 	bl	8062278 <CanSpi_SPI_Tx>
	CanSpi_SPI_Tx(startAddress);
 80620f4:	79fb      	ldrb	r3, [r7, #7]
 80620f6:	4618      	mov	r0, r3
 80620f8:	f000 f8be 	bl	8062278 <CanSpi_SPI_Tx>
	CanSpi_SPI_TxBuffer(data, (endAddress - startAddress + 1));
 80620fc:	79ba      	ldrb	r2, [r7, #6]
 80620fe:	79fb      	ldrb	r3, [r7, #7]
 8062100:	1ad3      	subs	r3, r2, r3
 8062102:	b2db      	uxtb	r3, r3
 8062104:	3301      	adds	r3, #1
 8062106:	b2db      	uxtb	r3, r3
 8062108:	4619      	mov	r1, r3
 806210a:	6838      	ldr	r0, [r7, #0]
 806210c:	f000 f8c6 	bl	806229c <CanSpi_SPI_TxBuffer>
	CANSPI_MCP2515_CS_HIGH();
 8062110:	2201      	movs	r2, #1
 8062112:	2110      	movs	r1, #16
 8062114:	4803      	ldr	r0, [pc, #12]	@ (8062124 <CanSpi_MCP2515_WriteByteSequence+0x50>)
 8062116:	f006 feb3 	bl	8068e80 <HAL_GPIO_WritePin>
}
 806211a:	bf00      	nop
 806211c:	3708      	adds	r7, #8
 806211e:	46bd      	mov	sp, r7
 8062120:	bd80      	pop	{r7, pc}
 8062122:	bf00      	nop
 8062124:	40020800 	.word	0x40020800

08062128 <CanSpi_MCP2515_LoadTxSequence>:
static void CanSpi_MCP2515_LoadTxSequence(uint8 instruction, uint8 *idReg, uint8 dlc, uint8 *data)
{
 8062128:	b580      	push	{r7, lr}
 806212a:	b084      	sub	sp, #16
 806212c:	af00      	add	r7, sp, #0
 806212e:	60b9      	str	r1, [r7, #8]
 8062130:	607b      	str	r3, [r7, #4]
 8062132:	4603      	mov	r3, r0
 8062134:	73fb      	strb	r3, [r7, #15]
 8062136:	4613      	mov	r3, r2
 8062138:	73bb      	strb	r3, [r7, #14]
	CANSPI_MCP2515_CS_LOW();
 806213a:	2200      	movs	r2, #0
 806213c:	2110      	movs	r1, #16
 806213e:	480e      	ldr	r0, [pc, #56]	@ (8062178 <CanSpi_MCP2515_LoadTxSequence+0x50>)
 8062140:	f006 fe9e 	bl	8068e80 <HAL_GPIO_WritePin>
	CanSpi_SPI_Tx(instruction);
 8062144:	7bfb      	ldrb	r3, [r7, #15]
 8062146:	4618      	mov	r0, r3
 8062148:	f000 f896 	bl	8062278 <CanSpi_SPI_Tx>
	CanSpi_SPI_TxBuffer(idReg, 4);
 806214c:	2104      	movs	r1, #4
 806214e:	68b8      	ldr	r0, [r7, #8]
 8062150:	f000 f8a4 	bl	806229c <CanSpi_SPI_TxBuffer>
	CanSpi_SPI_Tx(dlc);
 8062154:	7bbb      	ldrb	r3, [r7, #14]
 8062156:	4618      	mov	r0, r3
 8062158:	f000 f88e 	bl	8062278 <CanSpi_SPI_Tx>
	CanSpi_SPI_TxBuffer(data, dlc);
 806215c:	7bbb      	ldrb	r3, [r7, #14]
 806215e:	4619      	mov	r1, r3
 8062160:	6878      	ldr	r0, [r7, #4]
 8062162:	f000 f89b 	bl	806229c <CanSpi_SPI_TxBuffer>
	CANSPI_MCP2515_CS_HIGH();
 8062166:	2201      	movs	r2, #1
 8062168:	2110      	movs	r1, #16
 806216a:	4803      	ldr	r0, [pc, #12]	@ (8062178 <CanSpi_MCP2515_LoadTxSequence+0x50>)
 806216c:	f006 fe88 	bl	8068e80 <HAL_GPIO_WritePin>
}
 8062170:	bf00      	nop
 8062172:	3710      	adds	r7, #16
 8062174:	46bd      	mov	sp, r7
 8062176:	bd80      	pop	{r7, pc}
 8062178:	40020800 	.word	0x40020800

0806217c <CanSpi_MCP2515_RequestToSend>:
static void CanSpi_MCP2515_RequestToSend(uint8 instruction)
{
 806217c:	b580      	push	{r7, lr}
 806217e:	b082      	sub	sp, #8
 8062180:	af00      	add	r7, sp, #0
 8062182:	4603      	mov	r3, r0
 8062184:	71fb      	strb	r3, [r7, #7]
	CANSPI_MCP2515_CS_LOW();
 8062186:	2200      	movs	r2, #0
 8062188:	2110      	movs	r1, #16
 806218a:	4808      	ldr	r0, [pc, #32]	@ (80621ac <CanSpi_MCP2515_RequestToSend+0x30>)
 806218c:	f006 fe78 	bl	8068e80 <HAL_GPIO_WritePin>
	CanSpi_SPI_Tx(instruction);
 8062190:	79fb      	ldrb	r3, [r7, #7]
 8062192:	4618      	mov	r0, r3
 8062194:	f000 f870 	bl	8062278 <CanSpi_SPI_Tx>
	CANSPI_MCP2515_CS_HIGH();
 8062198:	2201      	movs	r2, #1
 806219a:	2110      	movs	r1, #16
 806219c:	4803      	ldr	r0, [pc, #12]	@ (80621ac <CanSpi_MCP2515_RequestToSend+0x30>)
 806219e:	f006 fe6f 	bl	8068e80 <HAL_GPIO_WritePin>
}
 80621a2:	bf00      	nop
 80621a4:	3708      	adds	r7, #8
 80621a6:	46bd      	mov	sp, r7
 80621a8:	bd80      	pop	{r7, pc}
 80621aa:	bf00      	nop
 80621ac:	40020800 	.word	0x40020800

080621b0 <CanSpi_MCP2515_ReadStatus>:
static uint8 CanSpi_MCP2515_ReadStatus(void)
{
 80621b0:	b580      	push	{r7, lr}
 80621b2:	b082      	sub	sp, #8
 80621b4:	af00      	add	r7, sp, #0
	uint8 retVal = 0;
 80621b6:	2300      	movs	r3, #0
 80621b8:	71fb      	strb	r3, [r7, #7]
	CANSPI_MCP2515_CS_LOW();
 80621ba:	2200      	movs	r2, #0
 80621bc:	2110      	movs	r1, #16
 80621be:	480a      	ldr	r0, [pc, #40]	@ (80621e8 <CanSpi_MCP2515_ReadStatus+0x38>)
 80621c0:	f006 fe5e 	bl	8068e80 <HAL_GPIO_WritePin>
	CanSpi_SPI_Tx(CANSPI_MCP2515_READ_STATUS);
 80621c4:	20a0      	movs	r0, #160	@ 0xa0
 80621c6:	f000 f857 	bl	8062278 <CanSpi_SPI_Tx>
	retVal = CanSpi_SPI_Rx();
 80621ca:	f000 f87b 	bl	80622c4 <CanSpi_SPI_Rx>
 80621ce:	4603      	mov	r3, r0
 80621d0:	71fb      	strb	r3, [r7, #7]
	CANSPI_MCP2515_CS_HIGH();
 80621d2:	2201      	movs	r2, #1
 80621d4:	2110      	movs	r1, #16
 80621d6:	4804      	ldr	r0, [pc, #16]	@ (80621e8 <CanSpi_MCP2515_ReadStatus+0x38>)
 80621d8:	f006 fe52 	bl	8068e80 <HAL_GPIO_WritePin>
	return retVal;
 80621dc:	79fb      	ldrb	r3, [r7, #7]
}
 80621de:	4618      	mov	r0, r3
 80621e0:	3708      	adds	r7, #8
 80621e2:	46bd      	mov	sp, r7
 80621e4:	bd80      	pop	{r7, pc}
 80621e6:	bf00      	nop
 80621e8:	40020800 	.word	0x40020800

080621ec <CanSpi_MCP2515_GetRxStatus>:
static uint8 CanSpi_MCP2515_GetRxStatus(void)
{
 80621ec:	b580      	push	{r7, lr}
 80621ee:	b082      	sub	sp, #8
 80621f0:	af00      	add	r7, sp, #0
	uint8 retVal = 0;
 80621f2:	2300      	movs	r3, #0
 80621f4:	71fb      	strb	r3, [r7, #7]
	CANSPI_MCP2515_CS_LOW();
 80621f6:	2200      	movs	r2, #0
 80621f8:	2110      	movs	r1, #16
 80621fa:	480a      	ldr	r0, [pc, #40]	@ (8062224 <CanSpi_MCP2515_GetRxStatus+0x38>)
 80621fc:	f006 fe40 	bl	8068e80 <HAL_GPIO_WritePin>
	CanSpi_SPI_Tx(CANSPI_MCP2515_RX_STATUS);
 8062200:	20b0      	movs	r0, #176	@ 0xb0
 8062202:	f000 f839 	bl	8062278 <CanSpi_SPI_Tx>
	retVal = CanSpi_SPI_Rx();
 8062206:	f000 f85d 	bl	80622c4 <CanSpi_SPI_Rx>
 806220a:	4603      	mov	r3, r0
 806220c:	71fb      	strb	r3, [r7, #7]
	CANSPI_MCP2515_CS_HIGH();
 806220e:	2201      	movs	r2, #1
 8062210:	2110      	movs	r1, #16
 8062212:	4804      	ldr	r0, [pc, #16]	@ (8062224 <CanSpi_MCP2515_GetRxStatus+0x38>)
 8062214:	f006 fe34 	bl	8068e80 <HAL_GPIO_WritePin>
	return retVal;
 8062218:	79fb      	ldrb	r3, [r7, #7]
}
 806221a:	4618      	mov	r0, r3
 806221c:	3708      	adds	r7, #8
 806221e:	46bd      	mov	sp, r7
 8062220:	bd80      	pop	{r7, pc}
 8062222:	bf00      	nop
 8062224:	40020800 	.word	0x40020800

08062228 <CanSpi_MCP2515_BitModify>:
static void CanSpi_MCP2515_BitModify(uint8 address, uint8 mask, uint8 data)
{
 8062228:	b580      	push	{r7, lr}
 806222a:	b082      	sub	sp, #8
 806222c:	af00      	add	r7, sp, #0
 806222e:	4603      	mov	r3, r0
 8062230:	71fb      	strb	r3, [r7, #7]
 8062232:	460b      	mov	r3, r1
 8062234:	71bb      	strb	r3, [r7, #6]
 8062236:	4613      	mov	r3, r2
 8062238:	717b      	strb	r3, [r7, #5]
	CANSPI_MCP2515_CS_LOW();
 806223a:	2200      	movs	r2, #0
 806223c:	2110      	movs	r1, #16
 806223e:	480d      	ldr	r0, [pc, #52]	@ (8062274 <CanSpi_MCP2515_BitModify+0x4c>)
 8062240:	f006 fe1e 	bl	8068e80 <HAL_GPIO_WritePin>
	CanSpi_SPI_Tx(CANSPI_MCP2515_BIT_MOD);
 8062244:	2005      	movs	r0, #5
 8062246:	f000 f817 	bl	8062278 <CanSpi_SPI_Tx>
	CanSpi_SPI_Tx(address);
 806224a:	79fb      	ldrb	r3, [r7, #7]
 806224c:	4618      	mov	r0, r3
 806224e:	f000 f813 	bl	8062278 <CanSpi_SPI_Tx>
	CanSpi_SPI_Tx(mask);
 8062252:	79bb      	ldrb	r3, [r7, #6]
 8062254:	4618      	mov	r0, r3
 8062256:	f000 f80f 	bl	8062278 <CanSpi_SPI_Tx>
	CanSpi_SPI_Tx(data);
 806225a:	797b      	ldrb	r3, [r7, #5]
 806225c:	4618      	mov	r0, r3
 806225e:	f000 f80b 	bl	8062278 <CanSpi_SPI_Tx>
	CANSPI_MCP2515_CS_HIGH();
 8062262:	2201      	movs	r2, #1
 8062264:	2110      	movs	r1, #16
 8062266:	4803      	ldr	r0, [pc, #12]	@ (8062274 <CanSpi_MCP2515_BitModify+0x4c>)
 8062268:	f006 fe0a 	bl	8068e80 <HAL_GPIO_WritePin>
}
 806226c:	bf00      	nop
 806226e:	3708      	adds	r7, #8
 8062270:	46bd      	mov	sp, r7
 8062272:	bd80      	pop	{r7, pc}
 8062274:	40020800 	.word	0x40020800

08062278 <CanSpi_SPI_Tx>:
static void CanSpi_SPI_Tx(uint8 data)
{
 8062278:	b580      	push	{r7, lr}
 806227a:	b082      	sub	sp, #8
 806227c:	af00      	add	r7, sp, #0
 806227e:	4603      	mov	r3, r0
 8062280:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(CANSPI_SPI_CAN, &data, 1, 2);
 8062282:	1df9      	adds	r1, r7, #7
 8062284:	2302      	movs	r3, #2
 8062286:	2201      	movs	r2, #1
 8062288:	4803      	ldr	r0, [pc, #12]	@ (8062298 <CanSpi_SPI_Tx+0x20>)
 806228a:	f007 fe67 	bl	8069f5c <HAL_SPI_Transmit>
}
 806228e:	bf00      	nop
 8062290:	3708      	adds	r7, #8
 8062292:	46bd      	mov	sp, r7
 8062294:	bd80      	pop	{r7, pc}
 8062296:	bf00      	nop
 8062298:	20010a3c 	.word	0x20010a3c

0806229c <CanSpi_SPI_TxBuffer>:
static void CanSpi_SPI_TxBuffer(uint8 *buffer, uint8 length)
{
 806229c:	b580      	push	{r7, lr}
 806229e:	b082      	sub	sp, #8
 80622a0:	af00      	add	r7, sp, #0
 80622a2:	6078      	str	r0, [r7, #4]
 80622a4:	460b      	mov	r3, r1
 80622a6:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(CANSPI_SPI_CAN, buffer, length, 2);
 80622a8:	78fb      	ldrb	r3, [r7, #3]
 80622aa:	b29a      	uxth	r2, r3
 80622ac:	2302      	movs	r3, #2
 80622ae:	6879      	ldr	r1, [r7, #4]
 80622b0:	4803      	ldr	r0, [pc, #12]	@ (80622c0 <CanSpi_SPI_TxBuffer+0x24>)
 80622b2:	f007 fe53 	bl	8069f5c <HAL_SPI_Transmit>
}
 80622b6:	bf00      	nop
 80622b8:	3708      	adds	r7, #8
 80622ba:	46bd      	mov	sp, r7
 80622bc:	bd80      	pop	{r7, pc}
 80622be:	bf00      	nop
 80622c0:	20010a3c 	.word	0x20010a3c

080622c4 <CanSpi_SPI_Rx>:
static uint8 CanSpi_SPI_Rx(void)
{
 80622c4:	b580      	push	{r7, lr}
 80622c6:	b082      	sub	sp, #8
 80622c8:	af00      	add	r7, sp, #0
	uint8 retVal = 0;
 80622ca:	2300      	movs	r3, #0
 80622cc:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Receive(CANSPI_SPI_CAN, &retVal, 1, 2);
 80622ce:	1df9      	adds	r1, r7, #7
 80622d0:	2302      	movs	r3, #2
 80622d2:	2201      	movs	r2, #1
 80622d4:	4803      	ldr	r0, [pc, #12]	@ (80622e4 <CanSpi_SPI_Rx+0x20>)
 80622d6:	f007 ff95 	bl	806a204 <HAL_SPI_Receive>
	return retVal;
 80622da:	79fb      	ldrb	r3, [r7, #7]
}
 80622dc:	4618      	mov	r0, r3
 80622de:	3708      	adds	r7, #8
 80622e0:	46bd      	mov	sp, r7
 80622e2:	bd80      	pop	{r7, pc}
 80622e4:	20010a3c 	.word	0x20010a3c

080622e8 <CanSpi_SPI_RxBuffer>:
static void CanSpi_SPI_RxBuffer(uint8 *buffer, uint8 length)
{
 80622e8:	b580      	push	{r7, lr}
 80622ea:	b082      	sub	sp, #8
 80622ec:	af00      	add	r7, sp, #0
 80622ee:	6078      	str	r0, [r7, #4]
 80622f0:	460b      	mov	r3, r1
 80622f2:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(CANSPI_SPI_CAN, buffer, length, 2);
 80622f4:	78fb      	ldrb	r3, [r7, #3]
 80622f6:	b29a      	uxth	r2, r3
 80622f8:	2302      	movs	r3, #2
 80622fa:	6879      	ldr	r1, [r7, #4]
 80622fc:	4803      	ldr	r0, [pc, #12]	@ (806230c <CanSpi_SPI_RxBuffer+0x24>)
 80622fe:	f007 ff81 	bl	806a204 <HAL_SPI_Receive>
}
 8062302:	bf00      	nop
 8062304:	3708      	adds	r7, #8
 8062306:	46bd      	mov	sp, r7
 8062308:	bd80      	pop	{r7, pc}
 806230a:	bf00      	nop
 806230c:	20010a3c 	.word	0x20010a3c

08062310 <UartH_MainFunction>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart);
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart);
/* FUNCTIONS STOP */
/* FUNCTIONS START */
void UartH_MainFunction(void)
{
 8062310:	b580      	push	{r7, lr}
 8062312:	b082      	sub	sp, #8
 8062314:	af00      	add	r7, sp, #0
	/* Variable declaration. */
	static uint32 localState = 0;
	/* Get UART state. */
	localState = HAL_UART_GetState(&huart1);
 8062316:	485f      	ldr	r0, [pc, #380]	@ (8062494 <UartH_MainFunction+0x184>)
 8062318:	f00a ff84 	bl	806d224 <HAL_UART_GetState>
 806231c:	4603      	mov	r3, r0
 806231e:	461a      	mov	r2, r3
 8062320:	4b5d      	ldr	r3, [pc, #372]	@ (8062498 <UartH_MainFunction+0x188>)
 8062322:	601a      	str	r2, [r3, #0]
	/* Store the BT processed data. */
	if(UartH_BtcProcessedData != 0)
 8062324:	4b5d      	ldr	r3, [pc, #372]	@ (806249c <UartH_MainFunction+0x18c>)
 8062326:	781b      	ldrb	r3, [r3, #0]
 8062328:	2b00      	cmp	r3, #0
 806232a:	d007      	beq.n	806233c <UartH_MainFunction+0x2c>
	{
		StatusList_InputValue[9] = UartH_BtcProcessedData;
 806232c:	4b5b      	ldr	r3, [pc, #364]	@ (806249c <UartH_MainFunction+0x18c>)
 806232e:	781b      	ldrb	r3, [r3, #0]
 8062330:	461a      	mov	r2, r3
 8062332:	4b5b      	ldr	r3, [pc, #364]	@ (80624a0 <UartH_MainFunction+0x190>)
 8062334:	625a      	str	r2, [r3, #36]	@ 0x24
		UartH_BtcProcessedData = 0;
 8062336:	4b59      	ldr	r3, [pc, #356]	@ (806249c <UartH_MainFunction+0x18c>)
 8062338:	2200      	movs	r2, #0
 806233a:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* Do nothing. */
	}
	if(0 == huart1.ErrorCode) for(uint8 i = 0; i < 5; i++) UartH_ErrorArr[i] = 0;
 806233c:	4b55      	ldr	r3, [pc, #340]	@ (8062494 <UartH_MainFunction+0x184>)
 806233e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8062340:	2b00      	cmp	r3, #0
 8062342:	d10d      	bne.n	8062360 <UartH_MainFunction+0x50>
 8062344:	2300      	movs	r3, #0
 8062346:	71fb      	strb	r3, [r7, #7]
 8062348:	e007      	b.n	806235a <UartH_MainFunction+0x4a>
 806234a:	79fb      	ldrb	r3, [r7, #7]
 806234c:	4a55      	ldr	r2, [pc, #340]	@ (80624a4 <UartH_MainFunction+0x194>)
 806234e:	2100      	movs	r1, #0
 8062350:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8062354:	79fb      	ldrb	r3, [r7, #7]
 8062356:	3301      	adds	r3, #1
 8062358:	71fb      	strb	r3, [r7, #7]
 806235a:	79fb      	ldrb	r3, [r7, #7]
 806235c:	2b04      	cmp	r3, #4
 806235e:	d9f4      	bls.n	806234a <UartH_MainFunction+0x3a>
	else
	{
		/* Do nothing. */
	}
	switch(localState)
 8062360:	4b4d      	ldr	r3, [pc, #308]	@ (8062498 <UartH_MainFunction+0x188>)
 8062362:	681b      	ldr	r3, [r3, #0]
 8062364:	2be0      	cmp	r3, #224	@ 0xe0
 8062366:	f000 8083 	beq.w	8062470 <UartH_MainFunction+0x160>
 806236a:	2be0      	cmp	r3, #224	@ 0xe0
 806236c:	f200 8088 	bhi.w	8062480 <UartH_MainFunction+0x170>
 8062370:	2b24      	cmp	r3, #36	@ 0x24
 8062372:	d84f      	bhi.n	8062414 <UartH_MainFunction+0x104>
 8062374:	2b24      	cmp	r3, #36	@ 0x24
 8062376:	f200 8083 	bhi.w	8062480 <UartH_MainFunction+0x170>
 806237a:	a201      	add	r2, pc, #4	@ (adr r2, 8062380 <UartH_MainFunction+0x70>)
 806237c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8062380:	0806241b 	.word	0x0806241b
 8062384:	08062481 	.word	0x08062481
 8062388:	08062481 	.word	0x08062481
 806238c:	08062481 	.word	0x08062481
 8062390:	08062481 	.word	0x08062481
 8062394:	08062481 	.word	0x08062481
 8062398:	08062481 	.word	0x08062481
 806239c:	08062481 	.word	0x08062481
 80623a0:	08062481 	.word	0x08062481
 80623a4:	08062481 	.word	0x08062481
 80623a8:	08062481 	.word	0x08062481
 80623ac:	08062481 	.word	0x08062481
 80623b0:	08062481 	.word	0x08062481
 80623b4:	08062481 	.word	0x08062481
 80623b8:	08062481 	.word	0x08062481
 80623bc:	08062481 	.word	0x08062481
 80623c0:	08062481 	.word	0x08062481
 80623c4:	08062481 	.word	0x08062481
 80623c8:	08062481 	.word	0x08062481
 80623cc:	08062481 	.word	0x08062481
 80623d0:	08062481 	.word	0x08062481
 80623d4:	08062481 	.word	0x08062481
 80623d8:	08062481 	.word	0x08062481
 80623dc:	08062481 	.word	0x08062481
 80623e0:	08062481 	.word	0x08062481
 80623e4:	08062481 	.word	0x08062481
 80623e8:	08062481 	.word	0x08062481
 80623ec:	08062481 	.word	0x08062481
 80623f0:	08062481 	.word	0x08062481
 80623f4:	08062481 	.word	0x08062481
 80623f8:	08062481 	.word	0x08062481
 80623fc:	08062481 	.word	0x08062481
 8062400:	08062425 	.word	0x08062425
 8062404:	08062443 	.word	0x08062443
 8062408:	0806244d 	.word	0x0806244d
 806240c:	08062457 	.word	0x08062457
 8062410:	08062439 	.word	0x08062439
 8062414:	2ba0      	cmp	r3, #160	@ 0xa0
 8062416:	d023      	beq.n	8062460 <UartH_MainFunction+0x150>
	case HAL_UART_STATE_ERROR:
		Uart_BswState = localState;
		HAL_UART_ErrorCallback(&huart1);
		break;
	default:
		break;
 8062418:	e032      	b.n	8062480 <UartH_MainFunction+0x170>
		Uart_BswState = localState;
 806241a:	4b1f      	ldr	r3, [pc, #124]	@ (8062498 <UartH_MainFunction+0x188>)
 806241c:	681b      	ldr	r3, [r3, #0]
 806241e:	4a22      	ldr	r2, [pc, #136]	@ (80624a8 <UartH_MainFunction+0x198>)
 8062420:	6013      	str	r3, [r2, #0]
		break;
 8062422:	e02e      	b.n	8062482 <UartH_MainFunction+0x172>
		HAL_UART_Receive_IT(&huart1, &UartH_BtcRxData, 1);
 8062424:	2201      	movs	r2, #1
 8062426:	4921      	ldr	r1, [pc, #132]	@ (80624ac <UartH_MainFunction+0x19c>)
 8062428:	481a      	ldr	r0, [pc, #104]	@ (8062494 <UartH_MainFunction+0x184>)
 806242a:	f00a fbf5 	bl	806cc18 <HAL_UART_Receive_IT>
		Uart_BswState = localState;
 806242e:	4b1a      	ldr	r3, [pc, #104]	@ (8062498 <UartH_MainFunction+0x188>)
 8062430:	681b      	ldr	r3, [r3, #0]
 8062432:	4a1d      	ldr	r2, [pc, #116]	@ (80624a8 <UartH_MainFunction+0x198>)
 8062434:	6013      	str	r3, [r2, #0]
		break;
 8062436:	e024      	b.n	8062482 <UartH_MainFunction+0x172>
		Uart_BswState = localState;
 8062438:	4b17      	ldr	r3, [pc, #92]	@ (8062498 <UartH_MainFunction+0x188>)
 806243a:	681b      	ldr	r3, [r3, #0]
 806243c:	4a1a      	ldr	r2, [pc, #104]	@ (80624a8 <UartH_MainFunction+0x198>)
 806243e:	6013      	str	r3, [r2, #0]
		break;
 8062440:	e01f      	b.n	8062482 <UartH_MainFunction+0x172>
		Uart_BswState = localState;
 8062442:	4b15      	ldr	r3, [pc, #84]	@ (8062498 <UartH_MainFunction+0x188>)
 8062444:	681b      	ldr	r3, [r3, #0]
 8062446:	4a18      	ldr	r2, [pc, #96]	@ (80624a8 <UartH_MainFunction+0x198>)
 8062448:	6013      	str	r3, [r2, #0]
		break;
 806244a:	e01a      	b.n	8062482 <UartH_MainFunction+0x172>
		Uart_BswState = localState;
 806244c:	4b12      	ldr	r3, [pc, #72]	@ (8062498 <UartH_MainFunction+0x188>)
 806244e:	681b      	ldr	r3, [r3, #0]
 8062450:	4a15      	ldr	r2, [pc, #84]	@ (80624a8 <UartH_MainFunction+0x198>)
 8062452:	6013      	str	r3, [r2, #0]
		break;
 8062454:	e015      	b.n	8062482 <UartH_MainFunction+0x172>
		Uart_BswState = localState;
 8062456:	4b10      	ldr	r3, [pc, #64]	@ (8062498 <UartH_MainFunction+0x188>)
 8062458:	681b      	ldr	r3, [r3, #0]
 806245a:	4a13      	ldr	r2, [pc, #76]	@ (80624a8 <UartH_MainFunction+0x198>)
 806245c:	6013      	str	r3, [r2, #0]
		break;
 806245e:	e010      	b.n	8062482 <UartH_MainFunction+0x172>
		Uart_BswState = localState;
 8062460:	4b0d      	ldr	r3, [pc, #52]	@ (8062498 <UartH_MainFunction+0x188>)
 8062462:	681b      	ldr	r3, [r3, #0]
 8062464:	4a10      	ldr	r2, [pc, #64]	@ (80624a8 <UartH_MainFunction+0x198>)
 8062466:	6013      	str	r3, [r2, #0]
		HAL_UART_ErrorCallback(&huart1);
 8062468:	480a      	ldr	r0, [pc, #40]	@ (8062494 <UartH_MainFunction+0x184>)
 806246a:	f000 f823 	bl	80624b4 <HAL_UART_ErrorCallback>
		break;
 806246e:	e008      	b.n	8062482 <UartH_MainFunction+0x172>
		Uart_BswState = localState;
 8062470:	4b09      	ldr	r3, [pc, #36]	@ (8062498 <UartH_MainFunction+0x188>)
 8062472:	681b      	ldr	r3, [r3, #0]
 8062474:	4a0c      	ldr	r2, [pc, #48]	@ (80624a8 <UartH_MainFunction+0x198>)
 8062476:	6013      	str	r3, [r2, #0]
		HAL_UART_ErrorCallback(&huart1);
 8062478:	4806      	ldr	r0, [pc, #24]	@ (8062494 <UartH_MainFunction+0x184>)
 806247a:	f000 f81b 	bl	80624b4 <HAL_UART_ErrorCallback>
		break;
 806247e:	e000      	b.n	8062482 <UartH_MainFunction+0x172>
		break;
 8062480:	bf00      	nop
	}
	UartH_MainCounter++;
 8062482:	4b0b      	ldr	r3, [pc, #44]	@ (80624b0 <UartH_MainFunction+0x1a0>)
 8062484:	681b      	ldr	r3, [r3, #0]
 8062486:	3301      	adds	r3, #1
 8062488:	4a09      	ldr	r2, [pc, #36]	@ (80624b0 <UartH_MainFunction+0x1a0>)
 806248a:	6013      	str	r3, [r2, #0]
}
 806248c:	bf00      	nop
 806248e:	3708      	adds	r7, #8
 8062490:	46bd      	mov	sp, r7
 8062492:	bd80      	pop	{r7, pc}
 8062494:	20010d8c 	.word	0x20010d8c
 8062498:	20010410 	.word	0x20010410
 806249c:	20010408 	.word	0x20010408
 80624a0:	200101f0 	.word	0x200101f0
 80624a4:	200103e8 	.word	0x200103e8
 80624a8:	200103fc 	.word	0x200103fc
 80624ac:	20010400 	.word	0x20010400
 80624b0:	2001040c 	.word	0x2001040c

080624b4 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80624b4:	b580      	push	{r7, lr}
 80624b6:	b084      	sub	sp, #16
 80624b8:	af00      	add	r7, sp, #0
 80624ba:	6078      	str	r0, [r7, #4]
	uint32 receivedValue = HAL_UART_GetError(huart);
 80624bc:	6878      	ldr	r0, [r7, #4]
 80624be:	f00a fecf 	bl	806d260 <HAL_UART_GetError>
 80624c2:	60f8      	str	r0, [r7, #12]
	switch(receivedValue)
 80624c4:	68fb      	ldr	r3, [r7, #12]
 80624c6:	2b10      	cmp	r3, #16
 80624c8:	d842      	bhi.n	8062550 <HAL_UART_ErrorCallback+0x9c>
 80624ca:	a201      	add	r2, pc, #4	@ (adr r2, 80624d0 <HAL_UART_ErrorCallback+0x1c>)
 80624cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80624d0:	08062551 	.word	0x08062551
 80624d4:	08062515 	.word	0x08062515
 80624d8:	08062521 	.word	0x08062521
 80624dc:	08062551 	.word	0x08062551
 80624e0:	0806252d 	.word	0x0806252d
 80624e4:	08062551 	.word	0x08062551
 80624e8:	08062551 	.word	0x08062551
 80624ec:	08062551 	.word	0x08062551
 80624f0:	08062539 	.word	0x08062539
 80624f4:	08062551 	.word	0x08062551
 80624f8:	08062551 	.word	0x08062551
 80624fc:	08062551 	.word	0x08062551
 8062500:	08062551 	.word	0x08062551
 8062504:	08062551 	.word	0x08062551
 8062508:	08062551 	.word	0x08062551
 806250c:	08062551 	.word	0x08062551
 8062510:	08062545 	.word	0x08062545
	{
	case HAL_UART_ERROR_NONE:
		break;
	case HAL_UART_ERROR_PE:
		UartH_ErrorArr[0]++;
 8062514:	4b11      	ldr	r3, [pc, #68]	@ (806255c <HAL_UART_ErrorCallback+0xa8>)
 8062516:	681b      	ldr	r3, [r3, #0]
 8062518:	3301      	adds	r3, #1
 806251a:	4a10      	ldr	r2, [pc, #64]	@ (806255c <HAL_UART_ErrorCallback+0xa8>)
 806251c:	6013      	str	r3, [r2, #0]
		break;
 806251e:	e018      	b.n	8062552 <HAL_UART_ErrorCallback+0x9e>
	case HAL_UART_ERROR_NE:
		UartH_ErrorArr[1]++;
 8062520:	4b0e      	ldr	r3, [pc, #56]	@ (806255c <HAL_UART_ErrorCallback+0xa8>)
 8062522:	685b      	ldr	r3, [r3, #4]
 8062524:	3301      	adds	r3, #1
 8062526:	4a0d      	ldr	r2, [pc, #52]	@ (806255c <HAL_UART_ErrorCallback+0xa8>)
 8062528:	6053      	str	r3, [r2, #4]
		break;
 806252a:	e012      	b.n	8062552 <HAL_UART_ErrorCallback+0x9e>
	case HAL_UART_ERROR_FE:
		UartH_ErrorArr[2]++;
 806252c:	4b0b      	ldr	r3, [pc, #44]	@ (806255c <HAL_UART_ErrorCallback+0xa8>)
 806252e:	689b      	ldr	r3, [r3, #8]
 8062530:	3301      	adds	r3, #1
 8062532:	4a0a      	ldr	r2, [pc, #40]	@ (806255c <HAL_UART_ErrorCallback+0xa8>)
 8062534:	6093      	str	r3, [r2, #8]
		break;
 8062536:	e00c      	b.n	8062552 <HAL_UART_ErrorCallback+0x9e>
	case HAL_UART_ERROR_ORE:
		UartH_ErrorArr[3]++;
 8062538:	4b08      	ldr	r3, [pc, #32]	@ (806255c <HAL_UART_ErrorCallback+0xa8>)
 806253a:	68db      	ldr	r3, [r3, #12]
 806253c:	3301      	adds	r3, #1
 806253e:	4a07      	ldr	r2, [pc, #28]	@ (806255c <HAL_UART_ErrorCallback+0xa8>)
 8062540:	60d3      	str	r3, [r2, #12]
		break;
 8062542:	e006      	b.n	8062552 <HAL_UART_ErrorCallback+0x9e>
	case HAL_UART_ERROR_DMA:
		UartH_ErrorArr[4]++;
 8062544:	4b05      	ldr	r3, [pc, #20]	@ (806255c <HAL_UART_ErrorCallback+0xa8>)
 8062546:	691b      	ldr	r3, [r3, #16]
 8062548:	3301      	adds	r3, #1
 806254a:	4a04      	ldr	r2, [pc, #16]	@ (806255c <HAL_UART_ErrorCallback+0xa8>)
 806254c:	6113      	str	r3, [r2, #16]
		break;
 806254e:	e000      	b.n	8062552 <HAL_UART_ErrorCallback+0x9e>
	default:
		break;
 8062550:	bf00      	nop
	}
}
 8062552:	bf00      	nop
 8062554:	3710      	adds	r7, #16
 8062556:	46bd      	mov	sp, r7
 8062558:	bd80      	pop	{r7, pc}
 806255a:	bf00      	nop
 806255c:	200103e8 	.word	0x200103e8

08062560 <HAL_UART_RxCpltCallback>:
/* Process BT received data. */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8062560:	b580      	push	{r7, lr}
 8062562:	b082      	sub	sp, #8
 8062564:	af00      	add	r7, sp, #0
 8062566:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8062568:	687b      	ldr	r3, [r7, #4]
 806256a:	681b      	ldr	r3, [r3, #0]
 806256c:	4a19      	ldr	r2, [pc, #100]	@ (80625d4 <HAL_UART_RxCpltCallback+0x74>)
 806256e:	4293      	cmp	r3, r2
 8062570:	d12c      	bne.n	80625cc <HAL_UART_RxCpltCallback+0x6c>
	{
		if(UartH_BtcRxData == '\n')
 8062572:	4b19      	ldr	r3, [pc, #100]	@ (80625d8 <HAL_UART_RxCpltCallback+0x78>)
 8062574:	781b      	ldrb	r3, [r3, #0]
 8062576:	2b0a      	cmp	r3, #10
 8062578:	d10e      	bne.n	8062598 <HAL_UART_RxCpltCallback+0x38>
		{
			if(UartCounter_BtcRxCount <= 3) UartH_BtcProcessedData = atoi((char*)UartH_BtcDataBuffer);
 806257a:	4b18      	ldr	r3, [pc, #96]	@ (80625dc <HAL_UART_RxCpltCallback+0x7c>)
 806257c:	781b      	ldrb	r3, [r3, #0]
 806257e:	2b03      	cmp	r3, #3
 8062580:	d806      	bhi.n	8062590 <HAL_UART_RxCpltCallback+0x30>
 8062582:	4817      	ldr	r0, [pc, #92]	@ (80625e0 <HAL_UART_RxCpltCallback+0x80>)
 8062584:	f00e fdbf 	bl	8071106 <atoi>
 8062588:	4603      	mov	r3, r0
 806258a:	b2da      	uxtb	r2, r3
 806258c:	4b15      	ldr	r3, [pc, #84]	@ (80625e4 <HAL_UART_RxCpltCallback+0x84>)
 806258e:	701a      	strb	r2, [r3, #0]
			else
			{
				/* Do nothing. */
			}
			UartCounter_BtcRxCount = 0;
 8062590:	4b12      	ldr	r3, [pc, #72]	@ (80625dc <HAL_UART_RxCpltCallback+0x7c>)
 8062592:	2200      	movs	r2, #0
 8062594:	701a      	strb	r2, [r3, #0]
 8062596:	e014      	b.n	80625c2 <HAL_UART_RxCpltCallback+0x62>
		}
		else if(UartCounter_BtcRxCount < 3)
 8062598:	4b10      	ldr	r3, [pc, #64]	@ (80625dc <HAL_UART_RxCpltCallback+0x7c>)
 806259a:	781b      	ldrb	r3, [r3, #0]
 806259c:	2b02      	cmp	r3, #2
 806259e:	d80d      	bhi.n	80625bc <HAL_UART_RxCpltCallback+0x5c>
		{
			UartH_BtcDataBuffer[UartCounter_BtcRxCount] = UartH_BtcRxData;
 80625a0:	4b0e      	ldr	r3, [pc, #56]	@ (80625dc <HAL_UART_RxCpltCallback+0x7c>)
 80625a2:	781b      	ldrb	r3, [r3, #0]
 80625a4:	461a      	mov	r2, r3
 80625a6:	4b0c      	ldr	r3, [pc, #48]	@ (80625d8 <HAL_UART_RxCpltCallback+0x78>)
 80625a8:	7819      	ldrb	r1, [r3, #0]
 80625aa:	4b0d      	ldr	r3, [pc, #52]	@ (80625e0 <HAL_UART_RxCpltCallback+0x80>)
 80625ac:	5499      	strb	r1, [r3, r2]
			UartCounter_BtcRxCount++;
 80625ae:	4b0b      	ldr	r3, [pc, #44]	@ (80625dc <HAL_UART_RxCpltCallback+0x7c>)
 80625b0:	781b      	ldrb	r3, [r3, #0]
 80625b2:	3301      	adds	r3, #1
 80625b4:	b2da      	uxtb	r2, r3
 80625b6:	4b09      	ldr	r3, [pc, #36]	@ (80625dc <HAL_UART_RxCpltCallback+0x7c>)
 80625b8:	701a      	strb	r2, [r3, #0]
 80625ba:	e002      	b.n	80625c2 <HAL_UART_RxCpltCallback+0x62>
		}
		else UartCounter_BtcRxCount = 0;
 80625bc:	4b07      	ldr	r3, [pc, #28]	@ (80625dc <HAL_UART_RxCpltCallback+0x7c>)
 80625be:	2200      	movs	r2, #0
 80625c0:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(huart, &UartH_BtcRxData, 1);
 80625c2:	2201      	movs	r2, #1
 80625c4:	4904      	ldr	r1, [pc, #16]	@ (80625d8 <HAL_UART_RxCpltCallback+0x78>)
 80625c6:	6878      	ldr	r0, [r7, #4]
 80625c8:	f00a fb26 	bl	806cc18 <HAL_UART_Receive_IT>
	}
	else
	{
		/* do nothing */
	}
}
 80625cc:	bf00      	nop
 80625ce:	3708      	adds	r7, #8
 80625d0:	46bd      	mov	sp, r7
 80625d2:	bd80      	pop	{r7, pc}
 80625d4:	40011000 	.word	0x40011000
 80625d8:	20010400 	.word	0x20010400
 80625dc:	20010409 	.word	0x20010409
 80625e0:	20010404 	.word	0x20010404
 80625e4:	20010408 	.word	0x20010408

080625e8 <Xcp_PositiveAcknowledge>:
void Xcp_MainFunction(void);
/* FUNCTIONS STOP */
/* FUNCTIONS START */
/* Positive response to XCP request. */
void Xcp_PositiveAcknowledge(void)
{
 80625e8:	b580      	push	{r7, lr}
 80625ea:	af00      	add	r7, sp, #0
	CanSpi_Xcp_TxBuffer.frame.id = CanSpi_Xcp_RxBuffer.frame.id + 1;;
 80625ec:	4b1e      	ldr	r3, [pc, #120]	@ (8062668 <Xcp_PositiveAcknowledge+0x80>)
 80625ee:	685b      	ldr	r3, [r3, #4]
 80625f0:	3301      	adds	r3, #1
 80625f2:	4a1e      	ldr	r2, [pc, #120]	@ (806266c <Xcp_PositiveAcknowledge+0x84>)
 80625f4:	6053      	str	r3, [r2, #4]
	CanSpi_Xcp_TxBuffer.frame.idType = CanSpi_Xcp_RxBuffer.frame.idType;
 80625f6:	4b1c      	ldr	r3, [pc, #112]	@ (8062668 <Xcp_PositiveAcknowledge+0x80>)
 80625f8:	781a      	ldrb	r2, [r3, #0]
 80625fa:	4b1c      	ldr	r3, [pc, #112]	@ (806266c <Xcp_PositiveAcknowledge+0x84>)
 80625fc:	701a      	strb	r2, [r3, #0]
	CanSpi_Xcp_TxBuffer.frame.dlc = CanSpi_Xcp_RxBuffer.frame.dlc;
 80625fe:	4b1a      	ldr	r3, [pc, #104]	@ (8062668 <Xcp_PositiveAcknowledge+0x80>)
 8062600:	7a1a      	ldrb	r2, [r3, #8]
 8062602:	4b1a      	ldr	r3, [pc, #104]	@ (806266c <Xcp_PositiveAcknowledge+0x84>)
 8062604:	721a      	strb	r2, [r3, #8]
	CanSpi_Xcp_TxBuffer.frame.data0 = 0xFF;
 8062606:	4b19      	ldr	r3, [pc, #100]	@ (806266c <Xcp_PositiveAcknowledge+0x84>)
 8062608:	22ff      	movs	r2, #255	@ 0xff
 806260a:	725a      	strb	r2, [r3, #9]
	CanSpi_Xcp_TxBuffer.frame.data1 = 0x00;
 806260c:	4b17      	ldr	r3, [pc, #92]	@ (806266c <Xcp_PositiveAcknowledge+0x84>)
 806260e:	2200      	movs	r2, #0
 8062610:	729a      	strb	r2, [r3, #10]
	CanSpi_Xcp_TxBuffer.frame.data2 = CanSpi_Xcp_RxBuffer.frame.data1;
 8062612:	4b15      	ldr	r3, [pc, #84]	@ (8062668 <Xcp_PositiveAcknowledge+0x80>)
 8062614:	7a9a      	ldrb	r2, [r3, #10]
 8062616:	4b15      	ldr	r3, [pc, #84]	@ (806266c <Xcp_PositiveAcknowledge+0x84>)
 8062618:	72da      	strb	r2, [r3, #11]
	CanSpi_Transmit(&CanSpi_Xcp_TxBuffer);
 806261a:	4814      	ldr	r0, [pc, #80]	@ (806266c <Xcp_PositiveAcknowledge+0x84>)
 806261c:	f7ff fa3c 	bl	8061a98 <CanSpi_Transmit>
	CanSpi_Xcp_TxBuffer.frame.idType = 0;
 8062620:	4b12      	ldr	r3, [pc, #72]	@ (806266c <Xcp_PositiveAcknowledge+0x84>)
 8062622:	2200      	movs	r2, #0
 8062624:	701a      	strb	r2, [r3, #0]
	CanSpi_Xcp_TxBuffer.frame.id = 0;
 8062626:	4b11      	ldr	r3, [pc, #68]	@ (806266c <Xcp_PositiveAcknowledge+0x84>)
 8062628:	2200      	movs	r2, #0
 806262a:	605a      	str	r2, [r3, #4]
	CanSpi_Xcp_TxBuffer.frame.dlc = 0;
 806262c:	4b0f      	ldr	r3, [pc, #60]	@ (806266c <Xcp_PositiveAcknowledge+0x84>)
 806262e:	2200      	movs	r2, #0
 8062630:	721a      	strb	r2, [r3, #8]
	CanSpi_Xcp_TxBuffer.frame.data0 = 0;
 8062632:	4b0e      	ldr	r3, [pc, #56]	@ (806266c <Xcp_PositiveAcknowledge+0x84>)
 8062634:	2200      	movs	r2, #0
 8062636:	725a      	strb	r2, [r3, #9]
	CanSpi_Xcp_TxBuffer.frame.data1 = 0;
 8062638:	4b0c      	ldr	r3, [pc, #48]	@ (806266c <Xcp_PositiveAcknowledge+0x84>)
 806263a:	2200      	movs	r2, #0
 806263c:	729a      	strb	r2, [r3, #10]
	CanSpi_Xcp_TxBuffer.frame.data2 = 0;
 806263e:	4b0b      	ldr	r3, [pc, #44]	@ (806266c <Xcp_PositiveAcknowledge+0x84>)
 8062640:	2200      	movs	r2, #0
 8062642:	72da      	strb	r2, [r3, #11]
	CanSpi_Xcp_TxBuffer.frame.data3 = 0;
 8062644:	4b09      	ldr	r3, [pc, #36]	@ (806266c <Xcp_PositiveAcknowledge+0x84>)
 8062646:	2200      	movs	r2, #0
 8062648:	731a      	strb	r2, [r3, #12]
	CanSpi_Xcp_TxBuffer.frame.data4 = 0;
 806264a:	4b08      	ldr	r3, [pc, #32]	@ (806266c <Xcp_PositiveAcknowledge+0x84>)
 806264c:	2200      	movs	r2, #0
 806264e:	735a      	strb	r2, [r3, #13]
	CanSpi_Xcp_TxBuffer.frame.data5 = 0;
 8062650:	4b06      	ldr	r3, [pc, #24]	@ (806266c <Xcp_PositiveAcknowledge+0x84>)
 8062652:	2200      	movs	r2, #0
 8062654:	739a      	strb	r2, [r3, #14]
	CanSpi_Xcp_TxBuffer.frame.data6 = 0;
 8062656:	4b05      	ldr	r3, [pc, #20]	@ (806266c <Xcp_PositiveAcknowledge+0x84>)
 8062658:	2200      	movs	r2, #0
 806265a:	73da      	strb	r2, [r3, #15]
	CanSpi_Xcp_TxBuffer.frame.data7 = 0;
 806265c:	4b03      	ldr	r3, [pc, #12]	@ (806266c <Xcp_PositiveAcknowledge+0x84>)
 806265e:	2200      	movs	r2, #0
 8062660:	741a      	strb	r2, [r3, #16]
}
 8062662:	bf00      	nop
 8062664:	bd80      	pop	{r7, pc}
 8062666:	bf00      	nop
 8062668:	2001039c 	.word	0x2001039c
 806266c:	200103b0 	.word	0x200103b0

08062670 <Xcp_MainFunction>:
/* Main function. */
void Xcp_MainFunction(void)
{
 8062670:	b580      	push	{r7, lr}
 8062672:	b082      	sub	sp, #8
 8062674:	af00      	add	r7, sp, #0
	/* Main counter. */
	static uint32 Xcp_MainCounter = 0;
	/* Connect command. */
	if(CanSpi_Xcp_RxBuffer.frame.data0 == 0x01) Xcp_PositiveAcknowledge();
 8062676:	4b3d      	ldr	r3, [pc, #244]	@ (806276c <Xcp_MainFunction+0xfc>)
 8062678:	7a5b      	ldrb	r3, [r3, #9]
 806267a:	2b01      	cmp	r3, #1
 806267c:	d101      	bne.n	8062682 <Xcp_MainFunction+0x12>
 806267e:	f7ff ffb3 	bl	80625e8 <Xcp_PositiveAcknowledge>
	else
	{
		/* Do nothing. */
	}
	/* Set MTA command. */
	if(CanSpi_Xcp_RxBuffer.frame.data0 == 0x02)
 8062682:	4b3a      	ldr	r3, [pc, #232]	@ (806276c <Xcp_MainFunction+0xfc>)
 8062684:	7a5b      	ldrb	r3, [r3, #9]
 8062686:	2b02      	cmp	r3, #2
 8062688:	d112      	bne.n	80626b0 <Xcp_MainFunction+0x40>
	{
		/* Positive response. */
		Xcp_PositiveAcknowledge();
 806268a:	f7ff ffad 	bl	80625e8 <Xcp_PositiveAcknowledge>
		/* Get the address requested to be read. */
		Xcp_RequestedAddress = (CanSpi_Xcp_RxBuffer.frame.data7 << 24) \
 806268e:	4b37      	ldr	r3, [pc, #220]	@ (806276c <Xcp_MainFunction+0xfc>)
 8062690:	7c1b      	ldrb	r3, [r3, #16]
 8062692:	061a      	lsls	r2, r3, #24
				| (CanSpi_Xcp_RxBuffer.frame.data6 << 16) \
 8062694:	4b35      	ldr	r3, [pc, #212]	@ (806276c <Xcp_MainFunction+0xfc>)
 8062696:	7bdb      	ldrb	r3, [r3, #15]
 8062698:	041b      	lsls	r3, r3, #16
 806269a:	431a      	orrs	r2, r3
				| (CanSpi_Xcp_RxBuffer.frame.data5 << 8) \
 806269c:	4b33      	ldr	r3, [pc, #204]	@ (806276c <Xcp_MainFunction+0xfc>)
 806269e:	7b9b      	ldrb	r3, [r3, #14]
 80626a0:	021b      	lsls	r3, r3, #8
 80626a2:	4313      	orrs	r3, r2
				| CanSpi_Xcp_RxBuffer.frame.data4;
 80626a4:	4a31      	ldr	r2, [pc, #196]	@ (806276c <Xcp_MainFunction+0xfc>)
 80626a6:	7b52      	ldrb	r2, [r2, #13]
 80626a8:	4313      	orrs	r3, r2
 80626aa:	461a      	mov	r2, r3
		Xcp_RequestedAddress = (CanSpi_Xcp_RxBuffer.frame.data7 << 24) \
 80626ac:	4b30      	ldr	r3, [pc, #192]	@ (8062770 <Xcp_MainFunction+0x100>)
 80626ae:	601a      	str	r2, [r3, #0]
	else
	{
		/* Do nothing. */
	}
	/* Upload requested variable. */
	if(CanSpi_Xcp_RxBuffer.frame.data0 == 0x04)
 80626b0:	4b2e      	ldr	r3, [pc, #184]	@ (806276c <Xcp_MainFunction+0xfc>)
 80626b2:	7a5b      	ldrb	r3, [r3, #9]
 80626b4:	2b04      	cmp	r3, #4
 80626b6:	d11a      	bne.n	80626ee <Xcp_MainFunction+0x7e>
	{
		/* Process the address. */
		volatile uint32 *ptr = (volatile uint32*)(Xcp_RequestedAddress);
 80626b8:	4b2d      	ldr	r3, [pc, #180]	@ (8062770 <Xcp_MainFunction+0x100>)
 80626ba:	681b      	ldr	r3, [r3, #0]
 80626bc:	607b      	str	r3, [r7, #4]
		uint32 value = *ptr;
 80626be:	687b      	ldr	r3, [r7, #4]
 80626c0:	681b      	ldr	r3, [r3, #0]
 80626c2:	603b      	str	r3, [r7, #0]
		/* Respond with the requested value. */
		CanSpi_Xcp_TxBuffer.frame.data3 = (value >> 24) & 0xFF;
 80626c4:	683b      	ldr	r3, [r7, #0]
 80626c6:	0e1b      	lsrs	r3, r3, #24
 80626c8:	b2da      	uxtb	r2, r3
 80626ca:	4b2a      	ldr	r3, [pc, #168]	@ (8062774 <Xcp_MainFunction+0x104>)
 80626cc:	731a      	strb	r2, [r3, #12]
		CanSpi_Xcp_TxBuffer.frame.data4 = (value >> 16) & 0xFF;
 80626ce:	683b      	ldr	r3, [r7, #0]
 80626d0:	0c1b      	lsrs	r3, r3, #16
 80626d2:	b2da      	uxtb	r2, r3
 80626d4:	4b27      	ldr	r3, [pc, #156]	@ (8062774 <Xcp_MainFunction+0x104>)
 80626d6:	735a      	strb	r2, [r3, #13]
		CanSpi_Xcp_TxBuffer.frame.data5 = (value >> 8) & 0xFF;
 80626d8:	683b      	ldr	r3, [r7, #0]
 80626da:	0a1b      	lsrs	r3, r3, #8
 80626dc:	b2da      	uxtb	r2, r3
 80626de:	4b25      	ldr	r3, [pc, #148]	@ (8062774 <Xcp_MainFunction+0x104>)
 80626e0:	739a      	strb	r2, [r3, #14]
		CanSpi_Xcp_TxBuffer.frame.data6 = value & 0xFF;
 80626e2:	683b      	ldr	r3, [r7, #0]
 80626e4:	b2da      	uxtb	r2, r3
 80626e6:	4b23      	ldr	r3, [pc, #140]	@ (8062774 <Xcp_MainFunction+0x104>)
 80626e8:	73da      	strb	r2, [r3, #15]
		Xcp_PositiveAcknowledge();
 80626ea:	f7ff ff7d 	bl	80625e8 <Xcp_PositiveAcknowledge>
	else
	{
		/* Do nothing. */
	}
	/* GET CCP VERSION */
	if(CanSpi_Xcp_RxBuffer.frame.data0 == 0x1B) Xcp_PositiveAcknowledge();
 80626ee:	4b1f      	ldr	r3, [pc, #124]	@ (806276c <Xcp_MainFunction+0xfc>)
 80626f0:	7a5b      	ldrb	r3, [r3, #9]
 80626f2:	2b1b      	cmp	r3, #27
 80626f4:	d101      	bne.n	80626fa <Xcp_MainFunction+0x8a>
 80626f6:	f7ff ff77 	bl	80625e8 <Xcp_PositiveAcknowledge>
	else
	{
		/* Do nothing. */
	}
	/* EXCHANGE_ID */
	if(CanSpi_Xcp_RxBuffer.frame.data0 == 0x17) Xcp_PositiveAcknowledge();
 80626fa:	4b1c      	ldr	r3, [pc, #112]	@ (806276c <Xcp_MainFunction+0xfc>)
 80626fc:	7a5b      	ldrb	r3, [r3, #9]
 80626fe:	2b17      	cmp	r3, #23
 8062700:	d101      	bne.n	8062706 <Xcp_MainFunction+0x96>
 8062702:	f7ff ff71 	bl	80625e8 <Xcp_PositiveAcknowledge>
	else
	{
		/* Do nothing. */
	}
	/* DISCONNECT */
	if(CanSpi_Xcp_RxBuffer.frame.data0 == 0x07)
 8062706:	4b19      	ldr	r3, [pc, #100]	@ (806276c <Xcp_MainFunction+0xfc>)
 8062708:	7a5b      	ldrb	r3, [r3, #9]
 806270a:	2b07      	cmp	r3, #7
 806270c:	d104      	bne.n	8062718 <Xcp_MainFunction+0xa8>
	{
		Xcp_PositiveAcknowledge();
 806270e:	f7ff ff6b 	bl	80625e8 <Xcp_PositiveAcknowledge>
		CanSpi_isXcpActive = 0;
 8062712:	4b19      	ldr	r3, [pc, #100]	@ (8062778 <Xcp_MainFunction+0x108>)
 8062714:	2200      	movs	r2, #0
 8062716:	701a      	strb	r2, [r3, #0]
	else
	{
		/* Do nothing. */
	}
	/* Reset the buffers */
	CanSpi_Xcp_RxBuffer.frame.idType = 0;
 8062718:	4b14      	ldr	r3, [pc, #80]	@ (806276c <Xcp_MainFunction+0xfc>)
 806271a:	2200      	movs	r2, #0
 806271c:	701a      	strb	r2, [r3, #0]
	CanSpi_Xcp_RxBuffer.frame.id = 0;
 806271e:	4b13      	ldr	r3, [pc, #76]	@ (806276c <Xcp_MainFunction+0xfc>)
 8062720:	2200      	movs	r2, #0
 8062722:	605a      	str	r2, [r3, #4]
	CanSpi_Xcp_RxBuffer.frame.dlc = 0;
 8062724:	4b11      	ldr	r3, [pc, #68]	@ (806276c <Xcp_MainFunction+0xfc>)
 8062726:	2200      	movs	r2, #0
 8062728:	721a      	strb	r2, [r3, #8]
	CanSpi_Xcp_RxBuffer.frame.data0 = 0;
 806272a:	4b10      	ldr	r3, [pc, #64]	@ (806276c <Xcp_MainFunction+0xfc>)
 806272c:	2200      	movs	r2, #0
 806272e:	725a      	strb	r2, [r3, #9]
	CanSpi_Xcp_RxBuffer.frame.data1 = 0;
 8062730:	4b0e      	ldr	r3, [pc, #56]	@ (806276c <Xcp_MainFunction+0xfc>)
 8062732:	2200      	movs	r2, #0
 8062734:	729a      	strb	r2, [r3, #10]
	CanSpi_Xcp_RxBuffer.frame.data2 = 0;
 8062736:	4b0d      	ldr	r3, [pc, #52]	@ (806276c <Xcp_MainFunction+0xfc>)
 8062738:	2200      	movs	r2, #0
 806273a:	72da      	strb	r2, [r3, #11]
	CanSpi_Xcp_RxBuffer.frame.data3 = 0;
 806273c:	4b0b      	ldr	r3, [pc, #44]	@ (806276c <Xcp_MainFunction+0xfc>)
 806273e:	2200      	movs	r2, #0
 8062740:	731a      	strb	r2, [r3, #12]
	CanSpi_Xcp_RxBuffer.frame.data4 = 0;
 8062742:	4b0a      	ldr	r3, [pc, #40]	@ (806276c <Xcp_MainFunction+0xfc>)
 8062744:	2200      	movs	r2, #0
 8062746:	735a      	strb	r2, [r3, #13]
	CanSpi_Xcp_RxBuffer.frame.data5 = 0;
 8062748:	4b08      	ldr	r3, [pc, #32]	@ (806276c <Xcp_MainFunction+0xfc>)
 806274a:	2200      	movs	r2, #0
 806274c:	739a      	strb	r2, [r3, #14]
	CanSpi_Xcp_RxBuffer.frame.data6 = 0;
 806274e:	4b07      	ldr	r3, [pc, #28]	@ (806276c <Xcp_MainFunction+0xfc>)
 8062750:	2200      	movs	r2, #0
 8062752:	73da      	strb	r2, [r3, #15]
	CanSpi_Xcp_RxBuffer.frame.data7 = 0;
 8062754:	4b05      	ldr	r3, [pc, #20]	@ (806276c <Xcp_MainFunction+0xfc>)
 8062756:	2200      	movs	r2, #0
 8062758:	741a      	strb	r2, [r3, #16]
	/* Increment the counter. */
	Xcp_MainCounter++;
 806275a:	4b08      	ldr	r3, [pc, #32]	@ (806277c <Xcp_MainFunction+0x10c>)
 806275c:	681b      	ldr	r3, [r3, #0]
 806275e:	3301      	adds	r3, #1
 8062760:	4a06      	ldr	r2, [pc, #24]	@ (806277c <Xcp_MainFunction+0x10c>)
 8062762:	6013      	str	r3, [r2, #0]
}
 8062764:	bf00      	nop
 8062766:	3708      	adds	r7, #8
 8062768:	46bd      	mov	sp, r7
 806276a:	bd80      	pop	{r7, pc}
 806276c:	2001039c 	.word	0x2001039c
 8062770:	20010414 	.word	0x20010414
 8062774:	200103b0 	.word	0x200103b0
 8062778:	200103c5 	.word	0x200103c5
 806277c:	20010418 	.word	0x20010418

08062780 <Dcm_TxIsoTp>:
		{0x00, 0x04, 0x00, DiagService_RDBPI_ReadPeriodicRS},
};
/* VARIABLES STOP */
/* FUNCTIONS START */
void Dcm_TxIsoTp(uint8 *data, uint16 size)
{
 8062780:	b580      	push	{r7, lr}
 8062782:	b08a      	sub	sp, #40	@ 0x28
 8062784:	af00      	add	r7, sp, #0
 8062786:	6078      	str	r0, [r7, #4]
 8062788:	460b      	mov	r3, r1
 806278a:	807b      	strh	r3, [r7, #2]
	CANSPI_uCAN_MSG isoTpFrame = {0};
 806278c:	f107 030c 	add.w	r3, r7, #12
 8062790:	2200      	movs	r2, #0
 8062792:	601a      	str	r2, [r3, #0]
 8062794:	605a      	str	r2, [r3, #4]
 8062796:	609a      	str	r2, [r3, #8]
 8062798:	60da      	str	r2, [r3, #12]
 806279a:	611a      	str	r2, [r3, #16]
	uint16 remainingData = size;
 806279c:	887b      	ldrh	r3, [r7, #2]
 806279e:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint16 offset = 0;
 80627a0:	2300      	movs	r3, #0
 80627a2:	84bb      	strh	r3, [r7, #36]	@ 0x24
	uint8 seqNum = 1;
 80627a4:	2301      	movs	r3, #1
 80627a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	// Configure the basic frame details
	isoTpFrame.frame.id = 0x701;      // Replace with your CAN TX ID
 80627aa:	f240 7301 	movw	r3, #1793	@ 0x701
 80627ae:	613b      	str	r3, [r7, #16]
	isoTpFrame.frame.idType = 1;             // Standard ID
 80627b0:	2301      	movs	r3, #1
 80627b2:	733b      	strb	r3, [r7, #12]
	isoTpFrame.frame.dlc = 8; // Set default DLC to max CAN data length
 80627b4:	2308      	movs	r3, #8
 80627b6:	753b      	strb	r3, [r7, #20]
	// Send First Frame (FF)
	if (size > 7) // Data larger than 7 bytes requires First Frame
 80627b8:	887b      	ldrh	r3, [r7, #2]
 80627ba:	2b07      	cmp	r3, #7
 80627bc:	d921      	bls.n	8062802 <Dcm_TxIsoTp+0x82>
	{
		isoTpFrame.frame.data0 = 0x10 | ((size >> 8) & 0x0F); // FF, first nibble, total size (12 bits)
 80627be:	887b      	ldrh	r3, [r7, #2]
 80627c0:	0a1b      	lsrs	r3, r3, #8
 80627c2:	b29b      	uxth	r3, r3
 80627c4:	b25b      	sxtb	r3, r3
 80627c6:	f003 030f 	and.w	r3, r3, #15
 80627ca:	b25b      	sxtb	r3, r3
 80627cc:	f043 0310 	orr.w	r3, r3, #16
 80627d0:	b25b      	sxtb	r3, r3
 80627d2:	b2db      	uxtb	r3, r3
 80627d4:	757b      	strb	r3, [r7, #21]
		isoTpFrame.frame.data1 = size & 0xFF;                // Remaining total size bytes
 80627d6:	887b      	ldrh	r3, [r7, #2]
 80627d8:	b2db      	uxtb	r3, r3
 80627da:	75bb      	strb	r3, [r7, #22]
		memcpy(&isoTpFrame.frame.data2, &data[0], 6);        // First 6 bytes of data
 80627dc:	f107 030c 	add.w	r3, r7, #12
 80627e0:	330b      	adds	r3, #11
 80627e2:	2206      	movs	r2, #6
 80627e4:	6879      	ldr	r1, [r7, #4]
 80627e6:	4618      	mov	r0, r3
 80627e8:	f00e fdaa 	bl	8071340 <memcpy>
		offset = 6;
 80627ec:	2306      	movs	r3, #6
 80627ee:	84bb      	strh	r3, [r7, #36]	@ 0x24
		remainingData -= 6;
 80627f0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80627f2:	3b06      	subs	r3, #6
 80627f4:	84fb      	strh	r3, [r7, #38]	@ 0x26
		// Transmit First Frame
		CanSpi_Transmit(&isoTpFrame);
 80627f6:	f107 030c 	add.w	r3, r7, #12
 80627fa:	4618      	mov	r0, r3
 80627fc:	f7ff f94c 	bl	8061a98 <CanSpi_Transmit>
		CanSpi_Transmit(&isoTpFrame);
		return;  // No need for consecutive frames
	}

	// Send Consecutive Frames (CF)
	while (remainingData > 0)
 8062800:	e058      	b.n	80628b4 <Dcm_TxIsoTp+0x134>
		isoTpFrame.frame.data0 = size & 0x0F;                // SF, first nibble is length
 8062802:	887b      	ldrh	r3, [r7, #2]
 8062804:	b2db      	uxtb	r3, r3
 8062806:	f003 030f 	and.w	r3, r3, #15
 806280a:	b2db      	uxtb	r3, r3
 806280c:	757b      	strb	r3, [r7, #21]
		memcpy(&isoTpFrame.frame.data1, &data[0], size);     // Remaining data
 806280e:	887a      	ldrh	r2, [r7, #2]
 8062810:	f107 030c 	add.w	r3, r7, #12
 8062814:	330a      	adds	r3, #10
 8062816:	6879      	ldr	r1, [r7, #4]
 8062818:	4618      	mov	r0, r3
 806281a:	f00e fd91 	bl	8071340 <memcpy>
		isoTpFrame.frame.dlc = size + 1;                    // DLC is the actual data length
 806281e:	887b      	ldrh	r3, [r7, #2]
 8062820:	b2db      	uxtb	r3, r3
 8062822:	3301      	adds	r3, #1
 8062824:	b2db      	uxtb	r3, r3
 8062826:	753b      	strb	r3, [r7, #20]
		CanSpi_Transmit(&isoTpFrame);
 8062828:	f107 030c 	add.w	r3, r7, #12
 806282c:	4618      	mov	r0, r3
 806282e:	f7ff f933 	bl	8061a98 <CanSpi_Transmit>
 8062832:	e042      	b.n	80628ba <Dcm_TxIsoTp+0x13a>
	{
		isoTpFrame.frame.data0 = 0x20 | (seqNum & 0x0F); // CF with sequence number
 8062834:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8062838:	f003 030f 	and.w	r3, r3, #15
 806283c:	b25b      	sxtb	r3, r3
 806283e:	f043 0320 	orr.w	r3, r3, #32
 8062842:	b25b      	sxtb	r3, r3
 8062844:	b2db      	uxtb	r3, r3
 8062846:	757b      	strb	r3, [r7, #21]
		if (remainingData >= 7)
 8062848:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 806284a:	2b06      	cmp	r3, #6
 806284c:	d910      	bls.n	8062870 <Dcm_TxIsoTp+0xf0>
		{
			memcpy(&isoTpFrame.frame.data1, &data[offset], 7);
 806284e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8062850:	687a      	ldr	r2, [r7, #4]
 8062852:	18d1      	adds	r1, r2, r3
 8062854:	f107 030c 	add.w	r3, r7, #12
 8062858:	330a      	adds	r3, #10
 806285a:	2207      	movs	r2, #7
 806285c:	4618      	mov	r0, r3
 806285e:	f00e fd6f 	bl	8071340 <memcpy>
			offset += 7;
 8062862:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8062864:	3307      	adds	r3, #7
 8062866:	84bb      	strh	r3, [r7, #36]	@ 0x24
			remainingData -= 7;
 8062868:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 806286a:	3b07      	subs	r3, #7
 806286c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 806286e:	e014      	b.n	806289a <Dcm_TxIsoTp+0x11a>
		}
		else
		{
			// Last frame with remaining bytes
			memcpy(&isoTpFrame.frame.data1, &data[offset], remainingData);
 8062870:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8062872:	687a      	ldr	r2, [r7, #4]
 8062874:	18d1      	adds	r1, r2, r3
 8062876:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8062878:	f107 030c 	add.w	r3, r7, #12
 806287c:	330a      	adds	r3, #10
 806287e:	4618      	mov	r0, r3
 8062880:	f00e fd5e 	bl	8071340 <memcpy>
			isoTpFrame.frame.dlc = remainingData + 1; // DLC adjusted for remaining data
 8062884:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8062886:	b2db      	uxtb	r3, r3
 8062888:	3301      	adds	r3, #1
 806288a:	b2db      	uxtb	r3, r3
 806288c:	753b      	strb	r3, [r7, #20]
			offset += remainingData;
 806288e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8062890:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8062892:	4413      	add	r3, r2
 8062894:	84bb      	strh	r3, [r7, #36]	@ 0x24
			remainingData = 0;
 8062896:	2300      	movs	r3, #0
 8062898:	84fb      	strh	r3, [r7, #38]	@ 0x26
		}
		// Transmit Consecutive Frame
		CanSpi_Transmit(&isoTpFrame);
 806289a:	f107 030c 	add.w	r3, r7, #12
 806289e:	4618      	mov	r0, r3
 80628a0:	f7ff f8fa 	bl	8061a98 <CanSpi_Transmit>
		seqNum++;
 80628a4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80628a8:	3301      	adds	r3, #1
 80628aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		// Add delay between consecutive frames
		HAL_Delay(1); // Use your delay function equivalent
 80628ae:	2001      	movs	r0, #1
 80628b0:	f004 fb36 	bl	8066f20 <HAL_Delay>
	while (remainingData > 0)
 80628b4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80628b6:	2b00      	cmp	r3, #0
 80628b8:	d1bc      	bne.n	8062834 <Dcm_TxIsoTp+0xb4>
	}
}
 80628ba:	3728      	adds	r7, #40	@ 0x28
 80628bc:	46bd      	mov	sp, r7
 80628be:	bd80      	pop	{r7, pc}

080628c0 <DiagService_CDTCS_ControlDTCSetting>:
static void DiagService_CDTCS_ControlDTCSetting(void)
{
 80628c0:	b580      	push	{r7, lr}
 80628c2:	af00      	add	r7, sp, #0
	if(Dcm_DiagServiceRequest_Frame.frame.data2 == 0x01) Dem_ControlDtcSettingStatus = 1;
 80628c4:	4b34      	ldr	r3, [pc, #208]	@ (8062998 <DiagService_CDTCS_ControlDTCSetting+0xd8>)
 80628c6:	7adb      	ldrb	r3, [r3, #11]
 80628c8:	2b01      	cmp	r3, #1
 80628ca:	d103      	bne.n	80628d4 <DiagService_CDTCS_ControlDTCSetting+0x14>
 80628cc:	4b33      	ldr	r3, [pc, #204]	@ (806299c <DiagService_CDTCS_ControlDTCSetting+0xdc>)
 80628ce:	2201      	movs	r2, #1
 80628d0:	701a      	strb	r2, [r3, #0]
 80628d2:	e006      	b.n	80628e2 <DiagService_CDTCS_ControlDTCSetting+0x22>
	else if(Dcm_DiagServiceRequest_Frame.frame.data2 == 0x02) Dem_ControlDtcSettingStatus = 0;
 80628d4:	4b30      	ldr	r3, [pc, #192]	@ (8062998 <DiagService_CDTCS_ControlDTCSetting+0xd8>)
 80628d6:	7adb      	ldrb	r3, [r3, #11]
 80628d8:	2b02      	cmp	r3, #2
 80628da:	d102      	bne.n	80628e2 <DiagService_CDTCS_ControlDTCSetting+0x22>
 80628dc:	4b2f      	ldr	r3, [pc, #188]	@ (806299c <DiagService_CDTCS_ControlDTCSetting+0xdc>)
 80628de:	2200      	movs	r2, #0
 80628e0:	701a      	strb	r2, [r3, #0]
	else
	{
		/* Do nothing. */
	}
	Dcm_DiagServiceResponse_Frame.frame.dlc = 3;
 80628e2:	4b2f      	ldr	r3, [pc, #188]	@ (80629a0 <DiagService_CDTCS_ControlDTCSetting+0xe0>)
 80628e4:	2203      	movs	r2, #3
 80628e6:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceResponse_Frame.frame.id = 0x701;
 80628e8:	4b2d      	ldr	r3, [pc, #180]	@ (80629a0 <DiagService_CDTCS_ControlDTCSetting+0xe0>)
 80628ea:	f240 7201 	movw	r2, #1793	@ 0x701
 80628ee:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceResponse_Frame.frame.idType = 1;
 80628f0:	4b2b      	ldr	r3, [pc, #172]	@ (80629a0 <DiagService_CDTCS_ControlDTCSetting+0xe0>)
 80628f2:	2201      	movs	r2, #1
 80628f4:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceResponse_Frame.frame.data0 = 0x02;
 80628f6:	4b2a      	ldr	r3, [pc, #168]	@ (80629a0 <DiagService_CDTCS_ControlDTCSetting+0xe0>)
 80628f8:	2202      	movs	r2, #2
 80628fa:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceResponse_Frame.frame.data1 = 0xC5;
 80628fc:	4b28      	ldr	r3, [pc, #160]	@ (80629a0 <DiagService_CDTCS_ControlDTCSetting+0xe0>)
 80628fe:	22c5      	movs	r2, #197	@ 0xc5
 8062900:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceResponse_Frame.frame.data2 = Dcm_DiagServiceRequest_Frame.frame.data2;
 8062902:	4b25      	ldr	r3, [pc, #148]	@ (8062998 <DiagService_CDTCS_ControlDTCSetting+0xd8>)
 8062904:	7ada      	ldrb	r2, [r3, #11]
 8062906:	4b26      	ldr	r3, [pc, #152]	@ (80629a0 <DiagService_CDTCS_ControlDTCSetting+0xe0>)
 8062908:	72da      	strb	r2, [r3, #11]
	CanSpi_Transmit(&Dcm_DiagServiceResponse_Frame);
 806290a:	4825      	ldr	r0, [pc, #148]	@ (80629a0 <DiagService_CDTCS_ControlDTCSetting+0xe0>)
 806290c:	f7ff f8c4 	bl	8061a98 <CanSpi_Transmit>
	Dcm_DiagServiceResponse_Frame.frame.idType = 0;
 8062910:	4b23      	ldr	r3, [pc, #140]	@ (80629a0 <DiagService_CDTCS_ControlDTCSetting+0xe0>)
 8062912:	2200      	movs	r2, #0
 8062914:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceResponse_Frame.frame.id = 0;
 8062916:	4b22      	ldr	r3, [pc, #136]	@ (80629a0 <DiagService_CDTCS_ControlDTCSetting+0xe0>)
 8062918:	2200      	movs	r2, #0
 806291a:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceResponse_Frame.frame.dlc = 0;
 806291c:	4b20      	ldr	r3, [pc, #128]	@ (80629a0 <DiagService_CDTCS_ControlDTCSetting+0xe0>)
 806291e:	2200      	movs	r2, #0
 8062920:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceResponse_Frame.frame.data0 = 0;
 8062922:	4b1f      	ldr	r3, [pc, #124]	@ (80629a0 <DiagService_CDTCS_ControlDTCSetting+0xe0>)
 8062924:	2200      	movs	r2, #0
 8062926:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceResponse_Frame.frame.data1 = 0;
 8062928:	4b1d      	ldr	r3, [pc, #116]	@ (80629a0 <DiagService_CDTCS_ControlDTCSetting+0xe0>)
 806292a:	2200      	movs	r2, #0
 806292c:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceResponse_Frame.frame.data2 = 0;
 806292e:	4b1c      	ldr	r3, [pc, #112]	@ (80629a0 <DiagService_CDTCS_ControlDTCSetting+0xe0>)
 8062930:	2200      	movs	r2, #0
 8062932:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceResponse_Frame.frame.data3 = 0;
 8062934:	4b1a      	ldr	r3, [pc, #104]	@ (80629a0 <DiagService_CDTCS_ControlDTCSetting+0xe0>)
 8062936:	2200      	movs	r2, #0
 8062938:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceResponse_Frame.frame.data4 = 0;
 806293a:	4b19      	ldr	r3, [pc, #100]	@ (80629a0 <DiagService_CDTCS_ControlDTCSetting+0xe0>)
 806293c:	2200      	movs	r2, #0
 806293e:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceResponse_Frame.frame.data5 = 0;
 8062940:	4b17      	ldr	r3, [pc, #92]	@ (80629a0 <DiagService_CDTCS_ControlDTCSetting+0xe0>)
 8062942:	2200      	movs	r2, #0
 8062944:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceResponse_Frame.frame.data6 = 0;
 8062946:	4b16      	ldr	r3, [pc, #88]	@ (80629a0 <DiagService_CDTCS_ControlDTCSetting+0xe0>)
 8062948:	2200      	movs	r2, #0
 806294a:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceResponse_Frame.frame.data7 = 0;
 806294c:	4b14      	ldr	r3, [pc, #80]	@ (80629a0 <DiagService_CDTCS_ControlDTCSetting+0xe0>)
 806294e:	2200      	movs	r2, #0
 8062950:	741a      	strb	r2, [r3, #16]
	Dcm_DiagServiceRequest_Frame.frame.idType = 0;
 8062952:	4b11      	ldr	r3, [pc, #68]	@ (8062998 <DiagService_CDTCS_ControlDTCSetting+0xd8>)
 8062954:	2200      	movs	r2, #0
 8062956:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceRequest_Frame.frame.id = 0;
 8062958:	4b0f      	ldr	r3, [pc, #60]	@ (8062998 <DiagService_CDTCS_ControlDTCSetting+0xd8>)
 806295a:	2200      	movs	r2, #0
 806295c:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceRequest_Frame.frame.dlc = 0;
 806295e:	4b0e      	ldr	r3, [pc, #56]	@ (8062998 <DiagService_CDTCS_ControlDTCSetting+0xd8>)
 8062960:	2200      	movs	r2, #0
 8062962:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceRequest_Frame.frame.data0 = 0;
 8062964:	4b0c      	ldr	r3, [pc, #48]	@ (8062998 <DiagService_CDTCS_ControlDTCSetting+0xd8>)
 8062966:	2200      	movs	r2, #0
 8062968:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceRequest_Frame.frame.data1 = 0;
 806296a:	4b0b      	ldr	r3, [pc, #44]	@ (8062998 <DiagService_CDTCS_ControlDTCSetting+0xd8>)
 806296c:	2200      	movs	r2, #0
 806296e:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceRequest_Frame.frame.data2 = 0;
 8062970:	4b09      	ldr	r3, [pc, #36]	@ (8062998 <DiagService_CDTCS_ControlDTCSetting+0xd8>)
 8062972:	2200      	movs	r2, #0
 8062974:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceRequest_Frame.frame.data3 = 0;
 8062976:	4b08      	ldr	r3, [pc, #32]	@ (8062998 <DiagService_CDTCS_ControlDTCSetting+0xd8>)
 8062978:	2200      	movs	r2, #0
 806297a:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceRequest_Frame.frame.data4 = 0;
 806297c:	4b06      	ldr	r3, [pc, #24]	@ (8062998 <DiagService_CDTCS_ControlDTCSetting+0xd8>)
 806297e:	2200      	movs	r2, #0
 8062980:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceRequest_Frame.frame.data5 = 0;
 8062982:	4b05      	ldr	r3, [pc, #20]	@ (8062998 <DiagService_CDTCS_ControlDTCSetting+0xd8>)
 8062984:	2200      	movs	r2, #0
 8062986:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceRequest_Frame.frame.data6 = 0;
 8062988:	4b03      	ldr	r3, [pc, #12]	@ (8062998 <DiagService_CDTCS_ControlDTCSetting+0xd8>)
 806298a:	2200      	movs	r2, #0
 806298c:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceRequest_Frame.frame.data7 = 0;
 806298e:	4b02      	ldr	r3, [pc, #8]	@ (8062998 <DiagService_CDTCS_ControlDTCSetting+0xd8>)
 8062990:	2200      	movs	r2, #0
 8062992:	741a      	strb	r2, [r3, #16]
}
 8062994:	bf00      	nop
 8062996:	bd80      	pop	{r7, pc}
 8062998:	20010388 	.word	0x20010388
 806299c:	20010474 	.word	0x20010474
 80629a0:	20010374 	.word	0x20010374

080629a4 <DiagService_CC_CommunicationControl>:

static void DiagService_CC_CommunicationControl(void)
{
 80629a4:	b580      	push	{r7, lr}
 80629a6:	af00      	add	r7, sp, #0
	if(Dcm_DiagServiceRequest_Frame.frame.data2 == 0x01) CanSpi_Communication_Status = CC_ACTIVE;
 80629a8:	4b34      	ldr	r3, [pc, #208]	@ (8062a7c <DiagService_CC_CommunicationControl+0xd8>)
 80629aa:	7adb      	ldrb	r3, [r3, #11]
 80629ac:	2b01      	cmp	r3, #1
 80629ae:	d103      	bne.n	80629b8 <DiagService_CC_CommunicationControl+0x14>
 80629b0:	4b33      	ldr	r3, [pc, #204]	@ (8062a80 <DiagService_CC_CommunicationControl+0xdc>)
 80629b2:	2203      	movs	r2, #3
 80629b4:	701a      	strb	r2, [r3, #0]
 80629b6:	e006      	b.n	80629c6 <DiagService_CC_CommunicationControl+0x22>
	else if(Dcm_DiagServiceRequest_Frame.frame.data2 == 0x00) CanSpi_Communication_Status = FULL_COMMUNICATION;
 80629b8:	4b30      	ldr	r3, [pc, #192]	@ (8062a7c <DiagService_CC_CommunicationControl+0xd8>)
 80629ba:	7adb      	ldrb	r3, [r3, #11]
 80629bc:	2b00      	cmp	r3, #0
 80629be:	d102      	bne.n	80629c6 <DiagService_CC_CommunicationControl+0x22>
 80629c0:	4b2f      	ldr	r3, [pc, #188]	@ (8062a80 <DiagService_CC_CommunicationControl+0xdc>)
 80629c2:	2202      	movs	r2, #2
 80629c4:	701a      	strb	r2, [r3, #0]
	else
	{
		/* Do nothing. */
	}
	Dcm_DiagServiceResponse_Frame.frame.dlc = 3;
 80629c6:	4b2f      	ldr	r3, [pc, #188]	@ (8062a84 <DiagService_CC_CommunicationControl+0xe0>)
 80629c8:	2203      	movs	r2, #3
 80629ca:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceResponse_Frame.frame.id = 0x701;
 80629cc:	4b2d      	ldr	r3, [pc, #180]	@ (8062a84 <DiagService_CC_CommunicationControl+0xe0>)
 80629ce:	f240 7201 	movw	r2, #1793	@ 0x701
 80629d2:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceResponse_Frame.frame.idType = 1;
 80629d4:	4b2b      	ldr	r3, [pc, #172]	@ (8062a84 <DiagService_CC_CommunicationControl+0xe0>)
 80629d6:	2201      	movs	r2, #1
 80629d8:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceResponse_Frame.frame.data0 = 0x02;
 80629da:	4b2a      	ldr	r3, [pc, #168]	@ (8062a84 <DiagService_CC_CommunicationControl+0xe0>)
 80629dc:	2202      	movs	r2, #2
 80629de:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceResponse_Frame.frame.data1 = 0x68;
 80629e0:	4b28      	ldr	r3, [pc, #160]	@ (8062a84 <DiagService_CC_CommunicationControl+0xe0>)
 80629e2:	2268      	movs	r2, #104	@ 0x68
 80629e4:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceResponse_Frame.frame.data2 = Dcm_DiagServiceRequest_Frame.frame.data2;
 80629e6:	4b25      	ldr	r3, [pc, #148]	@ (8062a7c <DiagService_CC_CommunicationControl+0xd8>)
 80629e8:	7ada      	ldrb	r2, [r3, #11]
 80629ea:	4b26      	ldr	r3, [pc, #152]	@ (8062a84 <DiagService_CC_CommunicationControl+0xe0>)
 80629ec:	72da      	strb	r2, [r3, #11]
	CanSpi_Transmit(&Dcm_DiagServiceResponse_Frame);
 80629ee:	4825      	ldr	r0, [pc, #148]	@ (8062a84 <DiagService_CC_CommunicationControl+0xe0>)
 80629f0:	f7ff f852 	bl	8061a98 <CanSpi_Transmit>
	Dcm_DiagServiceResponse_Frame.frame.idType = 0;
 80629f4:	4b23      	ldr	r3, [pc, #140]	@ (8062a84 <DiagService_CC_CommunicationControl+0xe0>)
 80629f6:	2200      	movs	r2, #0
 80629f8:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceResponse_Frame.frame.id = 0;
 80629fa:	4b22      	ldr	r3, [pc, #136]	@ (8062a84 <DiagService_CC_CommunicationControl+0xe0>)
 80629fc:	2200      	movs	r2, #0
 80629fe:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceResponse_Frame.frame.dlc = 0;
 8062a00:	4b20      	ldr	r3, [pc, #128]	@ (8062a84 <DiagService_CC_CommunicationControl+0xe0>)
 8062a02:	2200      	movs	r2, #0
 8062a04:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceResponse_Frame.frame.data0 = 0;
 8062a06:	4b1f      	ldr	r3, [pc, #124]	@ (8062a84 <DiagService_CC_CommunicationControl+0xe0>)
 8062a08:	2200      	movs	r2, #0
 8062a0a:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceResponse_Frame.frame.data1 = 0;
 8062a0c:	4b1d      	ldr	r3, [pc, #116]	@ (8062a84 <DiagService_CC_CommunicationControl+0xe0>)
 8062a0e:	2200      	movs	r2, #0
 8062a10:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceResponse_Frame.frame.data2 = 0;
 8062a12:	4b1c      	ldr	r3, [pc, #112]	@ (8062a84 <DiagService_CC_CommunicationControl+0xe0>)
 8062a14:	2200      	movs	r2, #0
 8062a16:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceResponse_Frame.frame.data3 = 0;
 8062a18:	4b1a      	ldr	r3, [pc, #104]	@ (8062a84 <DiagService_CC_CommunicationControl+0xe0>)
 8062a1a:	2200      	movs	r2, #0
 8062a1c:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceResponse_Frame.frame.data4 = 0;
 8062a1e:	4b19      	ldr	r3, [pc, #100]	@ (8062a84 <DiagService_CC_CommunicationControl+0xe0>)
 8062a20:	2200      	movs	r2, #0
 8062a22:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceResponse_Frame.frame.data5 = 0;
 8062a24:	4b17      	ldr	r3, [pc, #92]	@ (8062a84 <DiagService_CC_CommunicationControl+0xe0>)
 8062a26:	2200      	movs	r2, #0
 8062a28:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceResponse_Frame.frame.data6 = 0;
 8062a2a:	4b16      	ldr	r3, [pc, #88]	@ (8062a84 <DiagService_CC_CommunicationControl+0xe0>)
 8062a2c:	2200      	movs	r2, #0
 8062a2e:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceResponse_Frame.frame.data7 = 0;
 8062a30:	4b14      	ldr	r3, [pc, #80]	@ (8062a84 <DiagService_CC_CommunicationControl+0xe0>)
 8062a32:	2200      	movs	r2, #0
 8062a34:	741a      	strb	r2, [r3, #16]
	Dcm_DiagServiceRequest_Frame.frame.idType = 0;
 8062a36:	4b11      	ldr	r3, [pc, #68]	@ (8062a7c <DiagService_CC_CommunicationControl+0xd8>)
 8062a38:	2200      	movs	r2, #0
 8062a3a:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceRequest_Frame.frame.id = 0;
 8062a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8062a7c <DiagService_CC_CommunicationControl+0xd8>)
 8062a3e:	2200      	movs	r2, #0
 8062a40:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceRequest_Frame.frame.dlc = 0;
 8062a42:	4b0e      	ldr	r3, [pc, #56]	@ (8062a7c <DiagService_CC_CommunicationControl+0xd8>)
 8062a44:	2200      	movs	r2, #0
 8062a46:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceRequest_Frame.frame.data0 = 0;
 8062a48:	4b0c      	ldr	r3, [pc, #48]	@ (8062a7c <DiagService_CC_CommunicationControl+0xd8>)
 8062a4a:	2200      	movs	r2, #0
 8062a4c:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceRequest_Frame.frame.data1 = 0;
 8062a4e:	4b0b      	ldr	r3, [pc, #44]	@ (8062a7c <DiagService_CC_CommunicationControl+0xd8>)
 8062a50:	2200      	movs	r2, #0
 8062a52:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceRequest_Frame.frame.data2 = 0;
 8062a54:	4b09      	ldr	r3, [pc, #36]	@ (8062a7c <DiagService_CC_CommunicationControl+0xd8>)
 8062a56:	2200      	movs	r2, #0
 8062a58:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceRequest_Frame.frame.data3 = 0;
 8062a5a:	4b08      	ldr	r3, [pc, #32]	@ (8062a7c <DiagService_CC_CommunicationControl+0xd8>)
 8062a5c:	2200      	movs	r2, #0
 8062a5e:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceRequest_Frame.frame.data4 = 0;
 8062a60:	4b06      	ldr	r3, [pc, #24]	@ (8062a7c <DiagService_CC_CommunicationControl+0xd8>)
 8062a62:	2200      	movs	r2, #0
 8062a64:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceRequest_Frame.frame.data5 = 0;
 8062a66:	4b05      	ldr	r3, [pc, #20]	@ (8062a7c <DiagService_CC_CommunicationControl+0xd8>)
 8062a68:	2200      	movs	r2, #0
 8062a6a:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceRequest_Frame.frame.data6 = 0;
 8062a6c:	4b03      	ldr	r3, [pc, #12]	@ (8062a7c <DiagService_CC_CommunicationControl+0xd8>)
 8062a6e:	2200      	movs	r2, #0
 8062a70:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceRequest_Frame.frame.data7 = 0;
 8062a72:	4b02      	ldr	r3, [pc, #8]	@ (8062a7c <DiagService_CC_CommunicationControl+0xd8>)
 8062a74:	2200      	movs	r2, #0
 8062a76:	741a      	strb	r2, [r3, #16]
}
 8062a78:	bf00      	nop
 8062a7a:	bd80      	pop	{r7, pc}
 8062a7c:	20010388 	.word	0x20010388
 8062a80:	20010348 	.word	0x20010348
 8062a84:	20010374 	.word	0x20010374

08062a88 <DiagService_TP_TesterPresent>:
static void DiagService_TP_TesterPresent(void)
{
 8062a88:	b580      	push	{r7, lr}
 8062a8a:	af00      	add	r7, sp, #0
	Dcm_DiagServiceResponse_Frame.frame.dlc = 3;
 8062a8c:	4b2c      	ldr	r3, [pc, #176]	@ (8062b40 <DiagService_TP_TesterPresent+0xb8>)
 8062a8e:	2203      	movs	r2, #3
 8062a90:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceResponse_Frame.frame.id = 0x701;
 8062a92:	4b2b      	ldr	r3, [pc, #172]	@ (8062b40 <DiagService_TP_TesterPresent+0xb8>)
 8062a94:	f240 7201 	movw	r2, #1793	@ 0x701
 8062a98:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceResponse_Frame.frame.idType = 1;
 8062a9a:	4b29      	ldr	r3, [pc, #164]	@ (8062b40 <DiagService_TP_TesterPresent+0xb8>)
 8062a9c:	2201      	movs	r2, #1
 8062a9e:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceResponse_Frame.frame.data0 = 0x02;
 8062aa0:	4b27      	ldr	r3, [pc, #156]	@ (8062b40 <DiagService_TP_TesterPresent+0xb8>)
 8062aa2:	2202      	movs	r2, #2
 8062aa4:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceResponse_Frame.frame.data1 = 0x7E;
 8062aa6:	4b26      	ldr	r3, [pc, #152]	@ (8062b40 <DiagService_TP_TesterPresent+0xb8>)
 8062aa8:	227e      	movs	r2, #126	@ 0x7e
 8062aaa:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceResponse_Frame.frame.data2 = 0x00;
 8062aac:	4b24      	ldr	r3, [pc, #144]	@ (8062b40 <DiagService_TP_TesterPresent+0xb8>)
 8062aae:	2200      	movs	r2, #0
 8062ab0:	72da      	strb	r2, [r3, #11]
	CanSpi_Transmit(&Dcm_DiagServiceResponse_Frame);
 8062ab2:	4823      	ldr	r0, [pc, #140]	@ (8062b40 <DiagService_TP_TesterPresent+0xb8>)
 8062ab4:	f7fe fff0 	bl	8061a98 <CanSpi_Transmit>
	Dcm_DiagServiceResponse_Frame.frame.idType = 0;
 8062ab8:	4b21      	ldr	r3, [pc, #132]	@ (8062b40 <DiagService_TP_TesterPresent+0xb8>)
 8062aba:	2200      	movs	r2, #0
 8062abc:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceResponse_Frame.frame.id = 0;
 8062abe:	4b20      	ldr	r3, [pc, #128]	@ (8062b40 <DiagService_TP_TesterPresent+0xb8>)
 8062ac0:	2200      	movs	r2, #0
 8062ac2:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceResponse_Frame.frame.dlc = 0;
 8062ac4:	4b1e      	ldr	r3, [pc, #120]	@ (8062b40 <DiagService_TP_TesterPresent+0xb8>)
 8062ac6:	2200      	movs	r2, #0
 8062ac8:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceResponse_Frame.frame.data0 = 0;
 8062aca:	4b1d      	ldr	r3, [pc, #116]	@ (8062b40 <DiagService_TP_TesterPresent+0xb8>)
 8062acc:	2200      	movs	r2, #0
 8062ace:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceResponse_Frame.frame.data1 = 0;
 8062ad0:	4b1b      	ldr	r3, [pc, #108]	@ (8062b40 <DiagService_TP_TesterPresent+0xb8>)
 8062ad2:	2200      	movs	r2, #0
 8062ad4:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceResponse_Frame.frame.data2 = 0;
 8062ad6:	4b1a      	ldr	r3, [pc, #104]	@ (8062b40 <DiagService_TP_TesterPresent+0xb8>)
 8062ad8:	2200      	movs	r2, #0
 8062ada:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceResponse_Frame.frame.data3 = 0;
 8062adc:	4b18      	ldr	r3, [pc, #96]	@ (8062b40 <DiagService_TP_TesterPresent+0xb8>)
 8062ade:	2200      	movs	r2, #0
 8062ae0:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceResponse_Frame.frame.data4 = 0;
 8062ae2:	4b17      	ldr	r3, [pc, #92]	@ (8062b40 <DiagService_TP_TesterPresent+0xb8>)
 8062ae4:	2200      	movs	r2, #0
 8062ae6:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceResponse_Frame.frame.data5 = 0;
 8062ae8:	4b15      	ldr	r3, [pc, #84]	@ (8062b40 <DiagService_TP_TesterPresent+0xb8>)
 8062aea:	2200      	movs	r2, #0
 8062aec:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceResponse_Frame.frame.data6 = 0;
 8062aee:	4b14      	ldr	r3, [pc, #80]	@ (8062b40 <DiagService_TP_TesterPresent+0xb8>)
 8062af0:	2200      	movs	r2, #0
 8062af2:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceResponse_Frame.frame.data7 = 0;
 8062af4:	4b12      	ldr	r3, [pc, #72]	@ (8062b40 <DiagService_TP_TesterPresent+0xb8>)
 8062af6:	2200      	movs	r2, #0
 8062af8:	741a      	strb	r2, [r3, #16]
	Dcm_DiagServiceRequest_Frame.frame.idType = 0;
 8062afa:	4b12      	ldr	r3, [pc, #72]	@ (8062b44 <DiagService_TP_TesterPresent+0xbc>)
 8062afc:	2200      	movs	r2, #0
 8062afe:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceRequest_Frame.frame.id = 0;
 8062b00:	4b10      	ldr	r3, [pc, #64]	@ (8062b44 <DiagService_TP_TesterPresent+0xbc>)
 8062b02:	2200      	movs	r2, #0
 8062b04:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceRequest_Frame.frame.dlc = 0;
 8062b06:	4b0f      	ldr	r3, [pc, #60]	@ (8062b44 <DiagService_TP_TesterPresent+0xbc>)
 8062b08:	2200      	movs	r2, #0
 8062b0a:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceRequest_Frame.frame.data0 = 0;
 8062b0c:	4b0d      	ldr	r3, [pc, #52]	@ (8062b44 <DiagService_TP_TesterPresent+0xbc>)
 8062b0e:	2200      	movs	r2, #0
 8062b10:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceRequest_Frame.frame.data1 = 0;
 8062b12:	4b0c      	ldr	r3, [pc, #48]	@ (8062b44 <DiagService_TP_TesterPresent+0xbc>)
 8062b14:	2200      	movs	r2, #0
 8062b16:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceRequest_Frame.frame.data2 = 0;
 8062b18:	4b0a      	ldr	r3, [pc, #40]	@ (8062b44 <DiagService_TP_TesterPresent+0xbc>)
 8062b1a:	2200      	movs	r2, #0
 8062b1c:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceRequest_Frame.frame.data3 = 0;
 8062b1e:	4b09      	ldr	r3, [pc, #36]	@ (8062b44 <DiagService_TP_TesterPresent+0xbc>)
 8062b20:	2200      	movs	r2, #0
 8062b22:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceRequest_Frame.frame.data4 = 0;
 8062b24:	4b07      	ldr	r3, [pc, #28]	@ (8062b44 <DiagService_TP_TesterPresent+0xbc>)
 8062b26:	2200      	movs	r2, #0
 8062b28:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceRequest_Frame.frame.data5 = 0;
 8062b2a:	4b06      	ldr	r3, [pc, #24]	@ (8062b44 <DiagService_TP_TesterPresent+0xbc>)
 8062b2c:	2200      	movs	r2, #0
 8062b2e:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceRequest_Frame.frame.data6 = 0;
 8062b30:	4b04      	ldr	r3, [pc, #16]	@ (8062b44 <DiagService_TP_TesterPresent+0xbc>)
 8062b32:	2200      	movs	r2, #0
 8062b34:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceRequest_Frame.frame.data7 = 0;
 8062b36:	4b03      	ldr	r3, [pc, #12]	@ (8062b44 <DiagService_TP_TesterPresent+0xbc>)
 8062b38:	2200      	movs	r2, #0
 8062b3a:	741a      	strb	r2, [r3, #16]
}
 8062b3c:	bf00      	nop
 8062b3e:	bd80      	pop	{r7, pc}
 8062b40:	20010374 	.word	0x20010374
 8062b44:	20010388 	.word	0x20010388

08062b48 <DiagService_WDBI_WriteCalibrationData>:
static void DiagService_WDBI_WriteCalibrationData(void)
{
 8062b48:	b580      	push	{r7, lr}
 8062b4a:	af00      	add	r7, sp, #0
	Dcm_DiagServiceResponse_Frame.frame.dlc = 4;
 8062b4c:	4b32      	ldr	r3, [pc, #200]	@ (8062c18 <DiagService_WDBI_WriteCalibrationData+0xd0>)
 8062b4e:	2204      	movs	r2, #4
 8062b50:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceResponse_Frame.frame.id = 0x701;
 8062b52:	4b31      	ldr	r3, [pc, #196]	@ (8062c18 <DiagService_WDBI_WriteCalibrationData+0xd0>)
 8062b54:	f240 7201 	movw	r2, #1793	@ 0x701
 8062b58:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceResponse_Frame.frame.idType = 1;
 8062b5a:	4b2f      	ldr	r3, [pc, #188]	@ (8062c18 <DiagService_WDBI_WriteCalibrationData+0xd0>)
 8062b5c:	2201      	movs	r2, #1
 8062b5e:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceResponse_Frame.frame.data0 = 0x03;
 8062b60:	4b2d      	ldr	r3, [pc, #180]	@ (8062c18 <DiagService_WDBI_WriteCalibrationData+0xd0>)
 8062b62:	2203      	movs	r2, #3
 8062b64:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceResponse_Frame.frame.data1 = 0x6E;
 8062b66:	4b2c      	ldr	r3, [pc, #176]	@ (8062c18 <DiagService_WDBI_WriteCalibrationData+0xd0>)
 8062b68:	226e      	movs	r2, #110	@ 0x6e
 8062b6a:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceResponse_Frame.frame.data2 = 0x00;
 8062b6c:	4b2a      	ldr	r3, [pc, #168]	@ (8062c18 <DiagService_WDBI_WriteCalibrationData+0xd0>)
 8062b6e:	2200      	movs	r2, #0
 8062b70:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceResponse_Frame.frame.data3 = 0x00;
 8062b72:	4b29      	ldr	r3, [pc, #164]	@ (8062c18 <DiagService_WDBI_WriteCalibrationData+0xd0>)
 8062b74:	2200      	movs	r2, #0
 8062b76:	731a      	strb	r2, [r3, #12]
	Dcm_DiagnosticCalibrationData[Dcm_DiagServiceRequest_Frame.frame.data4] = Dcm_DiagServiceRequest_Frame.frame.data5;
 8062b78:	4b28      	ldr	r3, [pc, #160]	@ (8062c1c <DiagService_WDBI_WriteCalibrationData+0xd4>)
 8062b7a:	7b99      	ldrb	r1, [r3, #14]
 8062b7c:	4b27      	ldr	r3, [pc, #156]	@ (8062c1c <DiagService_WDBI_WriteCalibrationData+0xd4>)
 8062b7e:	7b5b      	ldrb	r3, [r3, #13]
 8062b80:	461a      	mov	r2, r3
 8062b82:	4b27      	ldr	r3, [pc, #156]	@ (8062c20 <DiagService_WDBI_WriteCalibrationData+0xd8>)
 8062b84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	CanSpi_Transmit(&Dcm_DiagServiceResponse_Frame);
 8062b88:	4823      	ldr	r0, [pc, #140]	@ (8062c18 <DiagService_WDBI_WriteCalibrationData+0xd0>)
 8062b8a:	f7fe ff85 	bl	8061a98 <CanSpi_Transmit>
	Dcm_DiagServiceResponse_Frame.frame.idType = 0;
 8062b8e:	4b22      	ldr	r3, [pc, #136]	@ (8062c18 <DiagService_WDBI_WriteCalibrationData+0xd0>)
 8062b90:	2200      	movs	r2, #0
 8062b92:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceResponse_Frame.frame.id = 0;
 8062b94:	4b20      	ldr	r3, [pc, #128]	@ (8062c18 <DiagService_WDBI_WriteCalibrationData+0xd0>)
 8062b96:	2200      	movs	r2, #0
 8062b98:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceResponse_Frame.frame.dlc = 0;
 8062b9a:	4b1f      	ldr	r3, [pc, #124]	@ (8062c18 <DiagService_WDBI_WriteCalibrationData+0xd0>)
 8062b9c:	2200      	movs	r2, #0
 8062b9e:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceResponse_Frame.frame.data0 = 0;
 8062ba0:	4b1d      	ldr	r3, [pc, #116]	@ (8062c18 <DiagService_WDBI_WriteCalibrationData+0xd0>)
 8062ba2:	2200      	movs	r2, #0
 8062ba4:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceResponse_Frame.frame.data1 = 0;
 8062ba6:	4b1c      	ldr	r3, [pc, #112]	@ (8062c18 <DiagService_WDBI_WriteCalibrationData+0xd0>)
 8062ba8:	2200      	movs	r2, #0
 8062baa:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceResponse_Frame.frame.data2 = 0;
 8062bac:	4b1a      	ldr	r3, [pc, #104]	@ (8062c18 <DiagService_WDBI_WriteCalibrationData+0xd0>)
 8062bae:	2200      	movs	r2, #0
 8062bb0:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceResponse_Frame.frame.data3 = 0;
 8062bb2:	4b19      	ldr	r3, [pc, #100]	@ (8062c18 <DiagService_WDBI_WriteCalibrationData+0xd0>)
 8062bb4:	2200      	movs	r2, #0
 8062bb6:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceResponse_Frame.frame.data4 = 0;
 8062bb8:	4b17      	ldr	r3, [pc, #92]	@ (8062c18 <DiagService_WDBI_WriteCalibrationData+0xd0>)
 8062bba:	2200      	movs	r2, #0
 8062bbc:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceResponse_Frame.frame.data5 = 0;
 8062bbe:	4b16      	ldr	r3, [pc, #88]	@ (8062c18 <DiagService_WDBI_WriteCalibrationData+0xd0>)
 8062bc0:	2200      	movs	r2, #0
 8062bc2:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceResponse_Frame.frame.data6 = 0;
 8062bc4:	4b14      	ldr	r3, [pc, #80]	@ (8062c18 <DiagService_WDBI_WriteCalibrationData+0xd0>)
 8062bc6:	2200      	movs	r2, #0
 8062bc8:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceResponse_Frame.frame.data7 = 0;
 8062bca:	4b13      	ldr	r3, [pc, #76]	@ (8062c18 <DiagService_WDBI_WriteCalibrationData+0xd0>)
 8062bcc:	2200      	movs	r2, #0
 8062bce:	741a      	strb	r2, [r3, #16]
	Dcm_DiagServiceRequest_Frame.frame.idType = 0;
 8062bd0:	4b12      	ldr	r3, [pc, #72]	@ (8062c1c <DiagService_WDBI_WriteCalibrationData+0xd4>)
 8062bd2:	2200      	movs	r2, #0
 8062bd4:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceRequest_Frame.frame.id = 0;
 8062bd6:	4b11      	ldr	r3, [pc, #68]	@ (8062c1c <DiagService_WDBI_WriteCalibrationData+0xd4>)
 8062bd8:	2200      	movs	r2, #0
 8062bda:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceRequest_Frame.frame.dlc = 0;
 8062bdc:	4b0f      	ldr	r3, [pc, #60]	@ (8062c1c <DiagService_WDBI_WriteCalibrationData+0xd4>)
 8062bde:	2200      	movs	r2, #0
 8062be0:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceRequest_Frame.frame.data0 = 0;
 8062be2:	4b0e      	ldr	r3, [pc, #56]	@ (8062c1c <DiagService_WDBI_WriteCalibrationData+0xd4>)
 8062be4:	2200      	movs	r2, #0
 8062be6:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceRequest_Frame.frame.data1 = 0;
 8062be8:	4b0c      	ldr	r3, [pc, #48]	@ (8062c1c <DiagService_WDBI_WriteCalibrationData+0xd4>)
 8062bea:	2200      	movs	r2, #0
 8062bec:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceRequest_Frame.frame.data2 = 0;
 8062bee:	4b0b      	ldr	r3, [pc, #44]	@ (8062c1c <DiagService_WDBI_WriteCalibrationData+0xd4>)
 8062bf0:	2200      	movs	r2, #0
 8062bf2:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceRequest_Frame.frame.data3 = 0;
 8062bf4:	4b09      	ldr	r3, [pc, #36]	@ (8062c1c <DiagService_WDBI_WriteCalibrationData+0xd4>)
 8062bf6:	2200      	movs	r2, #0
 8062bf8:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceRequest_Frame.frame.data4 = 0;
 8062bfa:	4b08      	ldr	r3, [pc, #32]	@ (8062c1c <DiagService_WDBI_WriteCalibrationData+0xd4>)
 8062bfc:	2200      	movs	r2, #0
 8062bfe:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceRequest_Frame.frame.data5 = 0;
 8062c00:	4b06      	ldr	r3, [pc, #24]	@ (8062c1c <DiagService_WDBI_WriteCalibrationData+0xd4>)
 8062c02:	2200      	movs	r2, #0
 8062c04:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceRequest_Frame.frame.data6 = 0;
 8062c06:	4b05      	ldr	r3, [pc, #20]	@ (8062c1c <DiagService_WDBI_WriteCalibrationData+0xd4>)
 8062c08:	2200      	movs	r2, #0
 8062c0a:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceRequest_Frame.frame.data7 = 0;
 8062c0c:	4b03      	ldr	r3, [pc, #12]	@ (8062c1c <DiagService_WDBI_WriteCalibrationData+0xd4>)
 8062c0e:	2200      	movs	r2, #0
 8062c10:	741a      	strb	r2, [r3, #16]
}
 8062c12:	bf00      	nop
 8062c14:	bd80      	pop	{r7, pc}
 8062c16:	bf00      	nop
 8062c18:	20010374 	.word	0x20010374
 8062c1c:	20010388 	.word	0x20010388
 8062c20:	2001041c 	.word	0x2001041c

08062c24 <DiagService_DSC_CodingSession>:
static void DiagService_DSC_CodingSession(void)
{
 8062c24:	b580      	push	{r7, lr}
 8062c26:	af00      	add	r7, sp, #0
	Dcm_DiagServiceResponse_Frame.frame.dlc = 3;
 8062c28:	4b0f      	ldr	r3, [pc, #60]	@ (8062c68 <DiagService_DSC_CodingSession+0x44>)
 8062c2a:	2203      	movs	r2, #3
 8062c2c:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceResponse_Frame.frame.id = 0x701;
 8062c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8062c68 <DiagService_DSC_CodingSession+0x44>)
 8062c30:	f240 7201 	movw	r2, #1793	@ 0x701
 8062c34:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceResponse_Frame.frame.idType = 1;
 8062c36:	4b0c      	ldr	r3, [pc, #48]	@ (8062c68 <DiagService_DSC_CodingSession+0x44>)
 8062c38:	2201      	movs	r2, #1
 8062c3a:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceResponse_Frame.frame.data0 = 0x02;
 8062c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8062c68 <DiagService_DSC_CodingSession+0x44>)
 8062c3e:	2202      	movs	r2, #2
 8062c40:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceResponse_Frame.frame.data1 = 0x50;
 8062c42:	4b09      	ldr	r3, [pc, #36]	@ (8062c68 <DiagService_DSC_CodingSession+0x44>)
 8062c44:	2250      	movs	r2, #80	@ 0x50
 8062c46:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceResponse_Frame.frame.data2 = 0x04;
 8062c48:	4b07      	ldr	r3, [pc, #28]	@ (8062c68 <DiagService_DSC_CodingSession+0x44>)
 8062c4a:	2204      	movs	r2, #4
 8062c4c:	72da      	strb	r2, [r3, #11]
	Dcm_DiagnosticSession = CODING;
 8062c4e:	4b07      	ldr	r3, [pc, #28]	@ (8062c6c <DiagService_DSC_CodingSession+0x48>)
 8062c50:	2203      	movs	r2, #3
 8062c52:	701a      	strb	r2, [r3, #0]
	CanSpi_Transmit(&Dcm_DiagServiceResponse_Frame);
 8062c54:	4804      	ldr	r0, [pc, #16]	@ (8062c68 <DiagService_DSC_CodingSession+0x44>)
 8062c56:	f7fe ff1f 	bl	8061a98 <CanSpi_Transmit>
	NvM_WriteAll();
 8062c5a:	f002 faaf 	bl	80651bc <NvM_WriteAll>
	EcuM_PerformReset(0);
 8062c5e:	2000      	movs	r0, #0
 8062c60:	f002 fc1a 	bl	8065498 <EcuM_PerformReset>
}
 8062c64:	bf00      	nop
 8062c66:	bd80      	pop	{r7, pc}
 8062c68:	20010374 	.word	0x20010374
 8062c6c:	2001fda8 	.word	0x2001fda8

08062c70 <DiagService_DSC_CalibrationSession>:
static void DiagService_DSC_CalibrationSession(void)
{
 8062c70:	b580      	push	{r7, lr}
 8062c72:	af00      	add	r7, sp, #0
	Dcm_DiagServiceResponse_Frame.frame.dlc = 3;
 8062c74:	4b0f      	ldr	r3, [pc, #60]	@ (8062cb4 <DiagService_DSC_CalibrationSession+0x44>)
 8062c76:	2203      	movs	r2, #3
 8062c78:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceResponse_Frame.frame.id = 0x701;
 8062c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8062cb4 <DiagService_DSC_CalibrationSession+0x44>)
 8062c7c:	f240 7201 	movw	r2, #1793	@ 0x701
 8062c80:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceResponse_Frame.frame.idType = 1;
 8062c82:	4b0c      	ldr	r3, [pc, #48]	@ (8062cb4 <DiagService_DSC_CalibrationSession+0x44>)
 8062c84:	2201      	movs	r2, #1
 8062c86:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceResponse_Frame.frame.data0 = 0x02;
 8062c88:	4b0a      	ldr	r3, [pc, #40]	@ (8062cb4 <DiagService_DSC_CalibrationSession+0x44>)
 8062c8a:	2202      	movs	r2, #2
 8062c8c:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceResponse_Frame.frame.data1 = 0x50;
 8062c8e:	4b09      	ldr	r3, [pc, #36]	@ (8062cb4 <DiagService_DSC_CalibrationSession+0x44>)
 8062c90:	2250      	movs	r2, #80	@ 0x50
 8062c92:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceResponse_Frame.frame.data2 = 0x05;
 8062c94:	4b07      	ldr	r3, [pc, #28]	@ (8062cb4 <DiagService_DSC_CalibrationSession+0x44>)
 8062c96:	2205      	movs	r2, #5
 8062c98:	72da      	strb	r2, [r3, #11]
	Dcm_DiagnosticSession = CALIBRATION;
 8062c9a:	4b07      	ldr	r3, [pc, #28]	@ (8062cb8 <DiagService_DSC_CalibrationSession+0x48>)
 8062c9c:	2204      	movs	r2, #4
 8062c9e:	701a      	strb	r2, [r3, #0]
	CanSpi_Transmit(&Dcm_DiagServiceResponse_Frame);
 8062ca0:	4804      	ldr	r0, [pc, #16]	@ (8062cb4 <DiagService_DSC_CalibrationSession+0x44>)
 8062ca2:	f7fe fef9 	bl	8061a98 <CanSpi_Transmit>
	NvM_WriteAll();
 8062ca6:	f002 fa89 	bl	80651bc <NvM_WriteAll>
	EcuM_PerformReset(0);
 8062caa:	2000      	movs	r0, #0
 8062cac:	f002 fbf4 	bl	8065498 <EcuM_PerformReset>
}
 8062cb0:	bf00      	nop
 8062cb2:	bd80      	pop	{r7, pc}
 8062cb4:	20010374 	.word	0x20010374
 8062cb8:	2001fda8 	.word	0x2001fda8

08062cbc <DiagService_RDBI_ReadAwakeReasons>:
static void DiagService_RDBI_ReadAwakeReasons(void)
{
 8062cbc:	b580      	push	{r7, lr}
 8062cbe:	af00      	add	r7, sp, #0
	Dcm_DiagServiceResponse_Frame.frame.dlc = 7;
 8062cc0:	4b34      	ldr	r3, [pc, #208]	@ (8062d94 <DiagService_RDBI_ReadAwakeReasons+0xd8>)
 8062cc2:	2207      	movs	r2, #7
 8062cc4:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceResponse_Frame.frame.id = 0x701;
 8062cc6:	4b33      	ldr	r3, [pc, #204]	@ (8062d94 <DiagService_RDBI_ReadAwakeReasons+0xd8>)
 8062cc8:	f240 7201 	movw	r2, #1793	@ 0x701
 8062ccc:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceResponse_Frame.frame.idType = 1;
 8062cce:	4b31      	ldr	r3, [pc, #196]	@ (8062d94 <DiagService_RDBI_ReadAwakeReasons+0xd8>)
 8062cd0:	2201      	movs	r2, #1
 8062cd2:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceResponse_Frame.frame.data0 = 0x06;
 8062cd4:	4b2f      	ldr	r3, [pc, #188]	@ (8062d94 <DiagService_RDBI_ReadAwakeReasons+0xd8>)
 8062cd6:	2206      	movs	r2, #6
 8062cd8:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceResponse_Frame.frame.data1 = 0x62;
 8062cda:	4b2e      	ldr	r3, [pc, #184]	@ (8062d94 <DiagService_RDBI_ReadAwakeReasons+0xd8>)
 8062cdc:	2262      	movs	r2, #98	@ 0x62
 8062cde:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceResponse_Frame.frame.data2 = 0x00;
 8062ce0:	4b2c      	ldr	r3, [pc, #176]	@ (8062d94 <DiagService_RDBI_ReadAwakeReasons+0xd8>)
 8062ce2:	2200      	movs	r2, #0
 8062ce4:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceResponse_Frame.frame.data3 = 0x01;
 8062ce6:	4b2b      	ldr	r3, [pc, #172]	@ (8062d94 <DiagService_RDBI_ReadAwakeReasons+0xd8>)
 8062ce8:	2201      	movs	r2, #1
 8062cea:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceResponse_Frame.frame.data4 = CanSpi_Networkmanagement3_Signal;
 8062cec:	4b2a      	ldr	r3, [pc, #168]	@ (8062d98 <DiagService_RDBI_ReadAwakeReasons+0xdc>)
 8062cee:	781a      	ldrb	r2, [r3, #0]
 8062cf0:	4b28      	ldr	r3, [pc, #160]	@ (8062d94 <DiagService_RDBI_ReadAwakeReasons+0xd8>)
 8062cf2:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceResponse_Frame.frame.data5 = StatusList_ComOutValue[0];
 8062cf4:	4b29      	ldr	r3, [pc, #164]	@ (8062d9c <DiagService_RDBI_ReadAwakeReasons+0xe0>)
 8062cf6:	781a      	ldrb	r2, [r3, #0]
 8062cf8:	4b26      	ldr	r3, [pc, #152]	@ (8062d94 <DiagService_RDBI_ReadAwakeReasons+0xd8>)
 8062cfa:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceResponse_Frame.frame.data6 = StatusList_ComOutValue[9];
 8062cfc:	4b27      	ldr	r3, [pc, #156]	@ (8062d9c <DiagService_RDBI_ReadAwakeReasons+0xe0>)
 8062cfe:	7a5a      	ldrb	r2, [r3, #9]
 8062d00:	4b24      	ldr	r3, [pc, #144]	@ (8062d94 <DiagService_RDBI_ReadAwakeReasons+0xd8>)
 8062d02:	73da      	strb	r2, [r3, #15]
	CanSpi_Transmit(&Dcm_DiagServiceResponse_Frame);
 8062d04:	4823      	ldr	r0, [pc, #140]	@ (8062d94 <DiagService_RDBI_ReadAwakeReasons+0xd8>)
 8062d06:	f7fe fec7 	bl	8061a98 <CanSpi_Transmit>
	Dcm_DiagServiceResponse_Frame.frame.idType = 0;
 8062d0a:	4b22      	ldr	r3, [pc, #136]	@ (8062d94 <DiagService_RDBI_ReadAwakeReasons+0xd8>)
 8062d0c:	2200      	movs	r2, #0
 8062d0e:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceResponse_Frame.frame.id = 0;
 8062d10:	4b20      	ldr	r3, [pc, #128]	@ (8062d94 <DiagService_RDBI_ReadAwakeReasons+0xd8>)
 8062d12:	2200      	movs	r2, #0
 8062d14:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceResponse_Frame.frame.dlc = 0;
 8062d16:	4b1f      	ldr	r3, [pc, #124]	@ (8062d94 <DiagService_RDBI_ReadAwakeReasons+0xd8>)
 8062d18:	2200      	movs	r2, #0
 8062d1a:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceResponse_Frame.frame.data0 = 0;
 8062d1c:	4b1d      	ldr	r3, [pc, #116]	@ (8062d94 <DiagService_RDBI_ReadAwakeReasons+0xd8>)
 8062d1e:	2200      	movs	r2, #0
 8062d20:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceResponse_Frame.frame.data1 = 0;
 8062d22:	4b1c      	ldr	r3, [pc, #112]	@ (8062d94 <DiagService_RDBI_ReadAwakeReasons+0xd8>)
 8062d24:	2200      	movs	r2, #0
 8062d26:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceResponse_Frame.frame.data2 = 0;
 8062d28:	4b1a      	ldr	r3, [pc, #104]	@ (8062d94 <DiagService_RDBI_ReadAwakeReasons+0xd8>)
 8062d2a:	2200      	movs	r2, #0
 8062d2c:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceResponse_Frame.frame.data3 = 0;
 8062d2e:	4b19      	ldr	r3, [pc, #100]	@ (8062d94 <DiagService_RDBI_ReadAwakeReasons+0xd8>)
 8062d30:	2200      	movs	r2, #0
 8062d32:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceResponse_Frame.frame.data4 = 0;
 8062d34:	4b17      	ldr	r3, [pc, #92]	@ (8062d94 <DiagService_RDBI_ReadAwakeReasons+0xd8>)
 8062d36:	2200      	movs	r2, #0
 8062d38:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceResponse_Frame.frame.data5 = 0;
 8062d3a:	4b16      	ldr	r3, [pc, #88]	@ (8062d94 <DiagService_RDBI_ReadAwakeReasons+0xd8>)
 8062d3c:	2200      	movs	r2, #0
 8062d3e:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceResponse_Frame.frame.data6 = 0;
 8062d40:	4b14      	ldr	r3, [pc, #80]	@ (8062d94 <DiagService_RDBI_ReadAwakeReasons+0xd8>)
 8062d42:	2200      	movs	r2, #0
 8062d44:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceResponse_Frame.frame.data7 = 0;
 8062d46:	4b13      	ldr	r3, [pc, #76]	@ (8062d94 <DiagService_RDBI_ReadAwakeReasons+0xd8>)
 8062d48:	2200      	movs	r2, #0
 8062d4a:	741a      	strb	r2, [r3, #16]
	Dcm_DiagServiceRequest_Frame.frame.idType = 0;
 8062d4c:	4b14      	ldr	r3, [pc, #80]	@ (8062da0 <DiagService_RDBI_ReadAwakeReasons+0xe4>)
 8062d4e:	2200      	movs	r2, #0
 8062d50:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceRequest_Frame.frame.id = 0;
 8062d52:	4b13      	ldr	r3, [pc, #76]	@ (8062da0 <DiagService_RDBI_ReadAwakeReasons+0xe4>)
 8062d54:	2200      	movs	r2, #0
 8062d56:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceRequest_Frame.frame.dlc = 0;
 8062d58:	4b11      	ldr	r3, [pc, #68]	@ (8062da0 <DiagService_RDBI_ReadAwakeReasons+0xe4>)
 8062d5a:	2200      	movs	r2, #0
 8062d5c:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceRequest_Frame.frame.data0 = 0;
 8062d5e:	4b10      	ldr	r3, [pc, #64]	@ (8062da0 <DiagService_RDBI_ReadAwakeReasons+0xe4>)
 8062d60:	2200      	movs	r2, #0
 8062d62:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceRequest_Frame.frame.data1 = 0;
 8062d64:	4b0e      	ldr	r3, [pc, #56]	@ (8062da0 <DiagService_RDBI_ReadAwakeReasons+0xe4>)
 8062d66:	2200      	movs	r2, #0
 8062d68:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceRequest_Frame.frame.data2 = 0;
 8062d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8062da0 <DiagService_RDBI_ReadAwakeReasons+0xe4>)
 8062d6c:	2200      	movs	r2, #0
 8062d6e:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceRequest_Frame.frame.data3 = 0;
 8062d70:	4b0b      	ldr	r3, [pc, #44]	@ (8062da0 <DiagService_RDBI_ReadAwakeReasons+0xe4>)
 8062d72:	2200      	movs	r2, #0
 8062d74:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceRequest_Frame.frame.data4 = 0;
 8062d76:	4b0a      	ldr	r3, [pc, #40]	@ (8062da0 <DiagService_RDBI_ReadAwakeReasons+0xe4>)
 8062d78:	2200      	movs	r2, #0
 8062d7a:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceRequest_Frame.frame.data5 = 0;
 8062d7c:	4b08      	ldr	r3, [pc, #32]	@ (8062da0 <DiagService_RDBI_ReadAwakeReasons+0xe4>)
 8062d7e:	2200      	movs	r2, #0
 8062d80:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceRequest_Frame.frame.data6 = 0;
 8062d82:	4b07      	ldr	r3, [pc, #28]	@ (8062da0 <DiagService_RDBI_ReadAwakeReasons+0xe4>)
 8062d84:	2200      	movs	r2, #0
 8062d86:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceRequest_Frame.frame.data7 = 0;
 8062d88:	4b05      	ldr	r3, [pc, #20]	@ (8062da0 <DiagService_RDBI_ReadAwakeReasons+0xe4>)
 8062d8a:	2200      	movs	r2, #0
 8062d8c:	741a      	strb	r2, [r3, #16]
}
 8062d8e:	bf00      	nop
 8062d90:	bd80      	pop	{r7, pc}
 8062d92:	bf00      	nop
 8062d94:	20010374 	.word	0x20010374
 8062d98:	200103c4 	.word	0x200103c4
 8062d9c:	200102cc 	.word	0x200102cc
 8062da0:	20010388 	.word	0x20010388

08062da4 <DiagService_RDBI_ReadCodingData>:
static void DiagService_RDBI_ReadCodingData(void)
{
 8062da4:	b580      	push	{r7, lr}
 8062da6:	af00      	add	r7, sp, #0
	Dcm_DiagServiceResponse_Frame.frame.dlc = 8;
 8062da8:	4b3a      	ldr	r3, [pc, #232]	@ (8062e94 <DiagService_RDBI_ReadCodingData+0xf0>)
 8062daa:	2208      	movs	r2, #8
 8062dac:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceResponse_Frame.frame.id = 0x701;
 8062dae:	4b39      	ldr	r3, [pc, #228]	@ (8062e94 <DiagService_RDBI_ReadCodingData+0xf0>)
 8062db0:	f240 7201 	movw	r2, #1793	@ 0x701
 8062db4:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceResponse_Frame.frame.idType = 1;
 8062db6:	4b37      	ldr	r3, [pc, #220]	@ (8062e94 <DiagService_RDBI_ReadCodingData+0xf0>)
 8062db8:	2201      	movs	r2, #1
 8062dba:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceResponse_Frame.frame.data0 = 0x08;
 8062dbc:	4b35      	ldr	r3, [pc, #212]	@ (8062e94 <DiagService_RDBI_ReadCodingData+0xf0>)
 8062dbe:	2208      	movs	r2, #8
 8062dc0:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceResponse_Frame.frame.data1 = 0x62;
 8062dc2:	4b34      	ldr	r3, [pc, #208]	@ (8062e94 <DiagService_RDBI_ReadCodingData+0xf0>)
 8062dc4:	2262      	movs	r2, #98	@ 0x62
 8062dc6:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceResponse_Frame.frame.data2 = 0x00;
 8062dc8:	4b32      	ldr	r3, [pc, #200]	@ (8062e94 <DiagService_RDBI_ReadCodingData+0xf0>)
 8062dca:	2200      	movs	r2, #0
 8062dcc:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceResponse_Frame.frame.data3 = 0x02;
 8062dce:	4b31      	ldr	r3, [pc, #196]	@ (8062e94 <DiagService_RDBI_ReadCodingData+0xf0>)
 8062dd0:	2202      	movs	r2, #2
 8062dd2:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceResponse_Frame.frame.data4 = NvMBlock_Coding[0];
 8062dd4:	4b30      	ldr	r3, [pc, #192]	@ (8062e98 <DiagService_RDBI_ReadCodingData+0xf4>)
 8062dd6:	681b      	ldr	r3, [r3, #0]
 8062dd8:	b2da      	uxtb	r2, r3
 8062dda:	4b2e      	ldr	r3, [pc, #184]	@ (8062e94 <DiagService_RDBI_ReadCodingData+0xf0>)
 8062ddc:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceResponse_Frame.frame.data5 = NvMBlock_Coding[1];
 8062dde:	4b2e      	ldr	r3, [pc, #184]	@ (8062e98 <DiagService_RDBI_ReadCodingData+0xf4>)
 8062de0:	685b      	ldr	r3, [r3, #4]
 8062de2:	b2da      	uxtb	r2, r3
 8062de4:	4b2b      	ldr	r3, [pc, #172]	@ (8062e94 <DiagService_RDBI_ReadCodingData+0xf0>)
 8062de6:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceResponse_Frame.frame.data6 = NvMBlock_Coding[2];
 8062de8:	4b2b      	ldr	r3, [pc, #172]	@ (8062e98 <DiagService_RDBI_ReadCodingData+0xf4>)
 8062dea:	689b      	ldr	r3, [r3, #8]
 8062dec:	b2da      	uxtb	r2, r3
 8062dee:	4b29      	ldr	r3, [pc, #164]	@ (8062e94 <DiagService_RDBI_ReadCodingData+0xf0>)
 8062df0:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceResponse_Frame.frame.data7 = NvMBlock_Coding[3];
 8062df2:	4b29      	ldr	r3, [pc, #164]	@ (8062e98 <DiagService_RDBI_ReadCodingData+0xf4>)
 8062df4:	68db      	ldr	r3, [r3, #12]
 8062df6:	b2da      	uxtb	r2, r3
 8062df8:	4b26      	ldr	r3, [pc, #152]	@ (8062e94 <DiagService_RDBI_ReadCodingData+0xf0>)
 8062dfa:	741a      	strb	r2, [r3, #16]
	CanSpi_Transmit(&Dcm_DiagServiceResponse_Frame);
 8062dfc:	4825      	ldr	r0, [pc, #148]	@ (8062e94 <DiagService_RDBI_ReadCodingData+0xf0>)
 8062dfe:	f7fe fe4b 	bl	8061a98 <CanSpi_Transmit>
	Dcm_TxIsoTp((uint8*)NvMBlock_Coding, 40);
 8062e02:	2128      	movs	r1, #40	@ 0x28
 8062e04:	4824      	ldr	r0, [pc, #144]	@ (8062e98 <DiagService_RDBI_ReadCodingData+0xf4>)
 8062e06:	f7ff fcbb 	bl	8062780 <Dcm_TxIsoTp>
	Dcm_DiagServiceResponse_Frame.frame.idType = 0;
 8062e0a:	4b22      	ldr	r3, [pc, #136]	@ (8062e94 <DiagService_RDBI_ReadCodingData+0xf0>)
 8062e0c:	2200      	movs	r2, #0
 8062e0e:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceResponse_Frame.frame.id = 0;
 8062e10:	4b20      	ldr	r3, [pc, #128]	@ (8062e94 <DiagService_RDBI_ReadCodingData+0xf0>)
 8062e12:	2200      	movs	r2, #0
 8062e14:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceResponse_Frame.frame.dlc = 0;
 8062e16:	4b1f      	ldr	r3, [pc, #124]	@ (8062e94 <DiagService_RDBI_ReadCodingData+0xf0>)
 8062e18:	2200      	movs	r2, #0
 8062e1a:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceResponse_Frame.frame.data0 = 0;
 8062e1c:	4b1d      	ldr	r3, [pc, #116]	@ (8062e94 <DiagService_RDBI_ReadCodingData+0xf0>)
 8062e1e:	2200      	movs	r2, #0
 8062e20:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceResponse_Frame.frame.data1 = 0;
 8062e22:	4b1c      	ldr	r3, [pc, #112]	@ (8062e94 <DiagService_RDBI_ReadCodingData+0xf0>)
 8062e24:	2200      	movs	r2, #0
 8062e26:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceResponse_Frame.frame.data2 = 0;
 8062e28:	4b1a      	ldr	r3, [pc, #104]	@ (8062e94 <DiagService_RDBI_ReadCodingData+0xf0>)
 8062e2a:	2200      	movs	r2, #0
 8062e2c:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceResponse_Frame.frame.data3 = 0;
 8062e2e:	4b19      	ldr	r3, [pc, #100]	@ (8062e94 <DiagService_RDBI_ReadCodingData+0xf0>)
 8062e30:	2200      	movs	r2, #0
 8062e32:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceResponse_Frame.frame.data4 = 0;
 8062e34:	4b17      	ldr	r3, [pc, #92]	@ (8062e94 <DiagService_RDBI_ReadCodingData+0xf0>)
 8062e36:	2200      	movs	r2, #0
 8062e38:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceResponse_Frame.frame.data5 = 0;
 8062e3a:	4b16      	ldr	r3, [pc, #88]	@ (8062e94 <DiagService_RDBI_ReadCodingData+0xf0>)
 8062e3c:	2200      	movs	r2, #0
 8062e3e:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceResponse_Frame.frame.data6 = 0;
 8062e40:	4b14      	ldr	r3, [pc, #80]	@ (8062e94 <DiagService_RDBI_ReadCodingData+0xf0>)
 8062e42:	2200      	movs	r2, #0
 8062e44:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceResponse_Frame.frame.data7 = 0;
 8062e46:	4b13      	ldr	r3, [pc, #76]	@ (8062e94 <DiagService_RDBI_ReadCodingData+0xf0>)
 8062e48:	2200      	movs	r2, #0
 8062e4a:	741a      	strb	r2, [r3, #16]
	Dcm_DiagServiceRequest_Frame.frame.idType = 0;
 8062e4c:	4b13      	ldr	r3, [pc, #76]	@ (8062e9c <DiagService_RDBI_ReadCodingData+0xf8>)
 8062e4e:	2200      	movs	r2, #0
 8062e50:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceRequest_Frame.frame.id = 0;
 8062e52:	4b12      	ldr	r3, [pc, #72]	@ (8062e9c <DiagService_RDBI_ReadCodingData+0xf8>)
 8062e54:	2200      	movs	r2, #0
 8062e56:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceRequest_Frame.frame.dlc = 0;
 8062e58:	4b10      	ldr	r3, [pc, #64]	@ (8062e9c <DiagService_RDBI_ReadCodingData+0xf8>)
 8062e5a:	2200      	movs	r2, #0
 8062e5c:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceRequest_Frame.frame.data0 = 0;
 8062e5e:	4b0f      	ldr	r3, [pc, #60]	@ (8062e9c <DiagService_RDBI_ReadCodingData+0xf8>)
 8062e60:	2200      	movs	r2, #0
 8062e62:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceRequest_Frame.frame.data1 = 0;
 8062e64:	4b0d      	ldr	r3, [pc, #52]	@ (8062e9c <DiagService_RDBI_ReadCodingData+0xf8>)
 8062e66:	2200      	movs	r2, #0
 8062e68:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceRequest_Frame.frame.data2 = 0;
 8062e6a:	4b0c      	ldr	r3, [pc, #48]	@ (8062e9c <DiagService_RDBI_ReadCodingData+0xf8>)
 8062e6c:	2200      	movs	r2, #0
 8062e6e:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceRequest_Frame.frame.data3 = 0;
 8062e70:	4b0a      	ldr	r3, [pc, #40]	@ (8062e9c <DiagService_RDBI_ReadCodingData+0xf8>)
 8062e72:	2200      	movs	r2, #0
 8062e74:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceRequest_Frame.frame.data4 = 0;
 8062e76:	4b09      	ldr	r3, [pc, #36]	@ (8062e9c <DiagService_RDBI_ReadCodingData+0xf8>)
 8062e78:	2200      	movs	r2, #0
 8062e7a:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceRequest_Frame.frame.data5 = 0;
 8062e7c:	4b07      	ldr	r3, [pc, #28]	@ (8062e9c <DiagService_RDBI_ReadCodingData+0xf8>)
 8062e7e:	2200      	movs	r2, #0
 8062e80:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceRequest_Frame.frame.data6 = 0;
 8062e82:	4b06      	ldr	r3, [pc, #24]	@ (8062e9c <DiagService_RDBI_ReadCodingData+0xf8>)
 8062e84:	2200      	movs	r2, #0
 8062e86:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceRequest_Frame.frame.data7 = 0;
 8062e88:	4b04      	ldr	r3, [pc, #16]	@ (8062e9c <DiagService_RDBI_ReadCodingData+0xf8>)
 8062e8a:	2200      	movs	r2, #0
 8062e8c:	741a      	strb	r2, [r3, #16]
}
 8062e8e:	bf00      	nop
 8062e90:	bd80      	pop	{r7, pc}
 8062e92:	bf00      	nop
 8062e94:	20010374 	.word	0x20010374
 8062e98:	200107e0 	.word	0x200107e0
 8062e9c:	20010388 	.word	0x20010388

08062ea0 <DiagService_RDBI_ReadCalibrationData>:
static void DiagService_RDBI_ReadCalibrationData(void)
{
 8062ea0:	b580      	push	{r7, lr}
 8062ea2:	af00      	add	r7, sp, #0
	Dcm_DiagServiceResponse_Frame.frame.dlc = 8;
 8062ea4:	4b3a      	ldr	r3, [pc, #232]	@ (8062f90 <DiagService_RDBI_ReadCalibrationData+0xf0>)
 8062ea6:	2208      	movs	r2, #8
 8062ea8:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceResponse_Frame.frame.id = 0x701;
 8062eaa:	4b39      	ldr	r3, [pc, #228]	@ (8062f90 <DiagService_RDBI_ReadCalibrationData+0xf0>)
 8062eac:	f240 7201 	movw	r2, #1793	@ 0x701
 8062eb0:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceResponse_Frame.frame.idType = 1;
 8062eb2:	4b37      	ldr	r3, [pc, #220]	@ (8062f90 <DiagService_RDBI_ReadCalibrationData+0xf0>)
 8062eb4:	2201      	movs	r2, #1
 8062eb6:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceResponse_Frame.frame.data0 = 0x13;
 8062eb8:	4b35      	ldr	r3, [pc, #212]	@ (8062f90 <DiagService_RDBI_ReadCalibrationData+0xf0>)
 8062eba:	2213      	movs	r2, #19
 8062ebc:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceResponse_Frame.frame.data1 = 0x62;
 8062ebe:	4b34      	ldr	r3, [pc, #208]	@ (8062f90 <DiagService_RDBI_ReadCalibrationData+0xf0>)
 8062ec0:	2262      	movs	r2, #98	@ 0x62
 8062ec2:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceResponse_Frame.frame.data2 = 0x00;
 8062ec4:	4b32      	ldr	r3, [pc, #200]	@ (8062f90 <DiagService_RDBI_ReadCalibrationData+0xf0>)
 8062ec6:	2200      	movs	r2, #0
 8062ec8:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceResponse_Frame.frame.data3 = 0x03;
 8062eca:	4b31      	ldr	r3, [pc, #196]	@ (8062f90 <DiagService_RDBI_ReadCalibrationData+0xf0>)
 8062ecc:	2203      	movs	r2, #3
 8062ece:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceResponse_Frame.frame.data4 = NvMBlock_Calibration[0];
 8062ed0:	4b30      	ldr	r3, [pc, #192]	@ (8062f94 <DiagService_RDBI_ReadCalibrationData+0xf4>)
 8062ed2:	681b      	ldr	r3, [r3, #0]
 8062ed4:	b2da      	uxtb	r2, r3
 8062ed6:	4b2e      	ldr	r3, [pc, #184]	@ (8062f90 <DiagService_RDBI_ReadCalibrationData+0xf0>)
 8062ed8:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceResponse_Frame.frame.data5 = NvMBlock_Calibration[1];
 8062eda:	4b2e      	ldr	r3, [pc, #184]	@ (8062f94 <DiagService_RDBI_ReadCalibrationData+0xf4>)
 8062edc:	685b      	ldr	r3, [r3, #4]
 8062ede:	b2da      	uxtb	r2, r3
 8062ee0:	4b2b      	ldr	r3, [pc, #172]	@ (8062f90 <DiagService_RDBI_ReadCalibrationData+0xf0>)
 8062ee2:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceResponse_Frame.frame.data6 = NvMBlock_Calibration[2];
 8062ee4:	4b2b      	ldr	r3, [pc, #172]	@ (8062f94 <DiagService_RDBI_ReadCalibrationData+0xf4>)
 8062ee6:	689b      	ldr	r3, [r3, #8]
 8062ee8:	b2da      	uxtb	r2, r3
 8062eea:	4b29      	ldr	r3, [pc, #164]	@ (8062f90 <DiagService_RDBI_ReadCalibrationData+0xf0>)
 8062eec:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceResponse_Frame.frame.data7 = NvMBlock_Calibration[3];
 8062eee:	4b29      	ldr	r3, [pc, #164]	@ (8062f94 <DiagService_RDBI_ReadCalibrationData+0xf4>)
 8062ef0:	68db      	ldr	r3, [r3, #12]
 8062ef2:	b2da      	uxtb	r2, r3
 8062ef4:	4b26      	ldr	r3, [pc, #152]	@ (8062f90 <DiagService_RDBI_ReadCalibrationData+0xf0>)
 8062ef6:	741a      	strb	r2, [r3, #16]
	CanSpi_Transmit(&Dcm_DiagServiceResponse_Frame);
 8062ef8:	4825      	ldr	r0, [pc, #148]	@ (8062f90 <DiagService_RDBI_ReadCalibrationData+0xf0>)
 8062efa:	f7fe fdcd 	bl	8061a98 <CanSpi_Transmit>
	Dcm_TxIsoTp((uint8*)NvMBlock_Calibration, 68);
 8062efe:	2144      	movs	r1, #68	@ 0x44
 8062f00:	4824      	ldr	r0, [pc, #144]	@ (8062f94 <DiagService_RDBI_ReadCalibrationData+0xf4>)
 8062f02:	f7ff fc3d 	bl	8062780 <Dcm_TxIsoTp>
	Dcm_DiagServiceResponse_Frame.frame.idType = 0;
 8062f06:	4b22      	ldr	r3, [pc, #136]	@ (8062f90 <DiagService_RDBI_ReadCalibrationData+0xf0>)
 8062f08:	2200      	movs	r2, #0
 8062f0a:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceResponse_Frame.frame.id = 0;
 8062f0c:	4b20      	ldr	r3, [pc, #128]	@ (8062f90 <DiagService_RDBI_ReadCalibrationData+0xf0>)
 8062f0e:	2200      	movs	r2, #0
 8062f10:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceResponse_Frame.frame.dlc = 0;
 8062f12:	4b1f      	ldr	r3, [pc, #124]	@ (8062f90 <DiagService_RDBI_ReadCalibrationData+0xf0>)
 8062f14:	2200      	movs	r2, #0
 8062f16:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceResponse_Frame.frame.data0 = 0;
 8062f18:	4b1d      	ldr	r3, [pc, #116]	@ (8062f90 <DiagService_RDBI_ReadCalibrationData+0xf0>)
 8062f1a:	2200      	movs	r2, #0
 8062f1c:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceResponse_Frame.frame.data1 = 0;
 8062f1e:	4b1c      	ldr	r3, [pc, #112]	@ (8062f90 <DiagService_RDBI_ReadCalibrationData+0xf0>)
 8062f20:	2200      	movs	r2, #0
 8062f22:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceResponse_Frame.frame.data2 = 0;
 8062f24:	4b1a      	ldr	r3, [pc, #104]	@ (8062f90 <DiagService_RDBI_ReadCalibrationData+0xf0>)
 8062f26:	2200      	movs	r2, #0
 8062f28:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceResponse_Frame.frame.data3 = 0;
 8062f2a:	4b19      	ldr	r3, [pc, #100]	@ (8062f90 <DiagService_RDBI_ReadCalibrationData+0xf0>)
 8062f2c:	2200      	movs	r2, #0
 8062f2e:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceResponse_Frame.frame.data4 = 0;
 8062f30:	4b17      	ldr	r3, [pc, #92]	@ (8062f90 <DiagService_RDBI_ReadCalibrationData+0xf0>)
 8062f32:	2200      	movs	r2, #0
 8062f34:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceResponse_Frame.frame.data5 = 0;
 8062f36:	4b16      	ldr	r3, [pc, #88]	@ (8062f90 <DiagService_RDBI_ReadCalibrationData+0xf0>)
 8062f38:	2200      	movs	r2, #0
 8062f3a:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceResponse_Frame.frame.data6 = 0;
 8062f3c:	4b14      	ldr	r3, [pc, #80]	@ (8062f90 <DiagService_RDBI_ReadCalibrationData+0xf0>)
 8062f3e:	2200      	movs	r2, #0
 8062f40:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceResponse_Frame.frame.data7 = 0;
 8062f42:	4b13      	ldr	r3, [pc, #76]	@ (8062f90 <DiagService_RDBI_ReadCalibrationData+0xf0>)
 8062f44:	2200      	movs	r2, #0
 8062f46:	741a      	strb	r2, [r3, #16]
	Dcm_DiagServiceRequest_Frame.frame.idType = 0;
 8062f48:	4b13      	ldr	r3, [pc, #76]	@ (8062f98 <DiagService_RDBI_ReadCalibrationData+0xf8>)
 8062f4a:	2200      	movs	r2, #0
 8062f4c:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceRequest_Frame.frame.id = 0;
 8062f4e:	4b12      	ldr	r3, [pc, #72]	@ (8062f98 <DiagService_RDBI_ReadCalibrationData+0xf8>)
 8062f50:	2200      	movs	r2, #0
 8062f52:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceRequest_Frame.frame.dlc = 0;
 8062f54:	4b10      	ldr	r3, [pc, #64]	@ (8062f98 <DiagService_RDBI_ReadCalibrationData+0xf8>)
 8062f56:	2200      	movs	r2, #0
 8062f58:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceRequest_Frame.frame.data0 = 0;
 8062f5a:	4b0f      	ldr	r3, [pc, #60]	@ (8062f98 <DiagService_RDBI_ReadCalibrationData+0xf8>)
 8062f5c:	2200      	movs	r2, #0
 8062f5e:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceRequest_Frame.frame.data1 = 0;
 8062f60:	4b0d      	ldr	r3, [pc, #52]	@ (8062f98 <DiagService_RDBI_ReadCalibrationData+0xf8>)
 8062f62:	2200      	movs	r2, #0
 8062f64:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceRequest_Frame.frame.data2 = 0;
 8062f66:	4b0c      	ldr	r3, [pc, #48]	@ (8062f98 <DiagService_RDBI_ReadCalibrationData+0xf8>)
 8062f68:	2200      	movs	r2, #0
 8062f6a:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceRequest_Frame.frame.data3 = 0;
 8062f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8062f98 <DiagService_RDBI_ReadCalibrationData+0xf8>)
 8062f6e:	2200      	movs	r2, #0
 8062f70:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceRequest_Frame.frame.data4 = 0;
 8062f72:	4b09      	ldr	r3, [pc, #36]	@ (8062f98 <DiagService_RDBI_ReadCalibrationData+0xf8>)
 8062f74:	2200      	movs	r2, #0
 8062f76:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceRequest_Frame.frame.data5 = 0;
 8062f78:	4b07      	ldr	r3, [pc, #28]	@ (8062f98 <DiagService_RDBI_ReadCalibrationData+0xf8>)
 8062f7a:	2200      	movs	r2, #0
 8062f7c:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceRequest_Frame.frame.data6 = 0;
 8062f7e:	4b06      	ldr	r3, [pc, #24]	@ (8062f98 <DiagService_RDBI_ReadCalibrationData+0xf8>)
 8062f80:	2200      	movs	r2, #0
 8062f82:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceRequest_Frame.frame.data7 = 0;
 8062f84:	4b04      	ldr	r3, [pc, #16]	@ (8062f98 <DiagService_RDBI_ReadCalibrationData+0xf8>)
 8062f86:	2200      	movs	r2, #0
 8062f88:	741a      	strb	r2, [r3, #16]
}
 8062f8a:	bf00      	nop
 8062f8c:	bd80      	pop	{r7, pc}
 8062f8e:	bf00      	nop
 8062f90:	20010374 	.word	0x20010374
 8062f94:	2001079c 	.word	0x2001079c
 8062f98:	20010388 	.word	0x20010388

08062f9c <DiagService_RDBI_ReadWakeupHistory>:
static void DiagService_RDBI_ReadWakeupHistory(void)
{
 8062f9c:	b580      	push	{r7, lr}
 8062f9e:	af00      	add	r7, sp, #0
	Dcm_DiagServiceResponse_Frame.frame.dlc = 8;
 8062fa0:	4b36      	ldr	r3, [pc, #216]	@ (806307c <DiagService_RDBI_ReadWakeupHistory+0xe0>)
 8062fa2:	2208      	movs	r2, #8
 8062fa4:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceResponse_Frame.frame.id = 0x701;
 8062fa6:	4b35      	ldr	r3, [pc, #212]	@ (806307c <DiagService_RDBI_ReadWakeupHistory+0xe0>)
 8062fa8:	f240 7201 	movw	r2, #1793	@ 0x701
 8062fac:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceResponse_Frame.frame.idType = 1;
 8062fae:	4b33      	ldr	r3, [pc, #204]	@ (806307c <DiagService_RDBI_ReadWakeupHistory+0xe0>)
 8062fb0:	2201      	movs	r2, #1
 8062fb2:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceResponse_Frame.frame.data0 = 0x07;
 8062fb4:	4b31      	ldr	r3, [pc, #196]	@ (806307c <DiagService_RDBI_ReadWakeupHistory+0xe0>)
 8062fb6:	2207      	movs	r2, #7
 8062fb8:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceResponse_Frame.frame.data1 = 0x62;
 8062fba:	4b30      	ldr	r3, [pc, #192]	@ (806307c <DiagService_RDBI_ReadWakeupHistory+0xe0>)
 8062fbc:	2262      	movs	r2, #98	@ 0x62
 8062fbe:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceResponse_Frame.frame.data2 = 0x00;
 8062fc0:	4b2e      	ldr	r3, [pc, #184]	@ (806307c <DiagService_RDBI_ReadWakeupHistory+0xe0>)
 8062fc2:	2200      	movs	r2, #0
 8062fc4:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceResponse_Frame.frame.data3 = 0x04;
 8062fc6:	4b2d      	ldr	r3, [pc, #180]	@ (806307c <DiagService_RDBI_ReadWakeupHistory+0xe0>)
 8062fc8:	2204      	movs	r2, #4
 8062fca:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceResponse_Frame.frame.data4 = EcuM_WakeupHistory[0];
 8062fcc:	4b2c      	ldr	r3, [pc, #176]	@ (8063080 <DiagService_RDBI_ReadWakeupHistory+0xe4>)
 8062fce:	781a      	ldrb	r2, [r3, #0]
 8062fd0:	4b2a      	ldr	r3, [pc, #168]	@ (806307c <DiagService_RDBI_ReadWakeupHistory+0xe0>)
 8062fd2:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceResponse_Frame.frame.data5 = EcuM_WakeupHistory[1];
 8062fd4:	4b2a      	ldr	r3, [pc, #168]	@ (8063080 <DiagService_RDBI_ReadWakeupHistory+0xe4>)
 8062fd6:	785a      	ldrb	r2, [r3, #1]
 8062fd8:	4b28      	ldr	r3, [pc, #160]	@ (806307c <DiagService_RDBI_ReadWakeupHistory+0xe0>)
 8062fda:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceResponse_Frame.frame.data6 = EcuM_WakeupHistory[2];
 8062fdc:	4b28      	ldr	r3, [pc, #160]	@ (8063080 <DiagService_RDBI_ReadWakeupHistory+0xe4>)
 8062fde:	789a      	ldrb	r2, [r3, #2]
 8062fe0:	4b26      	ldr	r3, [pc, #152]	@ (806307c <DiagService_RDBI_ReadWakeupHistory+0xe0>)
 8062fe2:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceResponse_Frame.frame.data7 = EcuM_WakeupHistory[3];
 8062fe4:	4b26      	ldr	r3, [pc, #152]	@ (8063080 <DiagService_RDBI_ReadWakeupHistory+0xe4>)
 8062fe6:	78da      	ldrb	r2, [r3, #3]
 8062fe8:	4b24      	ldr	r3, [pc, #144]	@ (806307c <DiagService_RDBI_ReadWakeupHistory+0xe0>)
 8062fea:	741a      	strb	r2, [r3, #16]
	CanSpi_Transmit(&Dcm_DiagServiceResponse_Frame);
 8062fec:	4823      	ldr	r0, [pc, #140]	@ (806307c <DiagService_RDBI_ReadWakeupHistory+0xe0>)
 8062fee:	f7fe fd53 	bl	8061a98 <CanSpi_Transmit>
	Dcm_DiagServiceResponse_Frame.frame.idType = 0;
 8062ff2:	4b22      	ldr	r3, [pc, #136]	@ (806307c <DiagService_RDBI_ReadWakeupHistory+0xe0>)
 8062ff4:	2200      	movs	r2, #0
 8062ff6:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceResponse_Frame.frame.id = 0;
 8062ff8:	4b20      	ldr	r3, [pc, #128]	@ (806307c <DiagService_RDBI_ReadWakeupHistory+0xe0>)
 8062ffa:	2200      	movs	r2, #0
 8062ffc:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceResponse_Frame.frame.dlc = 0;
 8062ffe:	4b1f      	ldr	r3, [pc, #124]	@ (806307c <DiagService_RDBI_ReadWakeupHistory+0xe0>)
 8063000:	2200      	movs	r2, #0
 8063002:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceResponse_Frame.frame.data0 = 0;
 8063004:	4b1d      	ldr	r3, [pc, #116]	@ (806307c <DiagService_RDBI_ReadWakeupHistory+0xe0>)
 8063006:	2200      	movs	r2, #0
 8063008:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceResponse_Frame.frame.data1 = 0;
 806300a:	4b1c      	ldr	r3, [pc, #112]	@ (806307c <DiagService_RDBI_ReadWakeupHistory+0xe0>)
 806300c:	2200      	movs	r2, #0
 806300e:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceResponse_Frame.frame.data2 = 0;
 8063010:	4b1a      	ldr	r3, [pc, #104]	@ (806307c <DiagService_RDBI_ReadWakeupHistory+0xe0>)
 8063012:	2200      	movs	r2, #0
 8063014:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceResponse_Frame.frame.data3 = 0;
 8063016:	4b19      	ldr	r3, [pc, #100]	@ (806307c <DiagService_RDBI_ReadWakeupHistory+0xe0>)
 8063018:	2200      	movs	r2, #0
 806301a:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceResponse_Frame.frame.data4 = 0;
 806301c:	4b17      	ldr	r3, [pc, #92]	@ (806307c <DiagService_RDBI_ReadWakeupHistory+0xe0>)
 806301e:	2200      	movs	r2, #0
 8063020:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceResponse_Frame.frame.data5 = 0;
 8063022:	4b16      	ldr	r3, [pc, #88]	@ (806307c <DiagService_RDBI_ReadWakeupHistory+0xe0>)
 8063024:	2200      	movs	r2, #0
 8063026:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceResponse_Frame.frame.data6 = 0;
 8063028:	4b14      	ldr	r3, [pc, #80]	@ (806307c <DiagService_RDBI_ReadWakeupHistory+0xe0>)
 806302a:	2200      	movs	r2, #0
 806302c:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceResponse_Frame.frame.data7 = 0;
 806302e:	4b13      	ldr	r3, [pc, #76]	@ (806307c <DiagService_RDBI_ReadWakeupHistory+0xe0>)
 8063030:	2200      	movs	r2, #0
 8063032:	741a      	strb	r2, [r3, #16]
	Dcm_DiagServiceRequest_Frame.frame.idType = 0;
 8063034:	4b13      	ldr	r3, [pc, #76]	@ (8063084 <DiagService_RDBI_ReadWakeupHistory+0xe8>)
 8063036:	2200      	movs	r2, #0
 8063038:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceRequest_Frame.frame.id = 0;
 806303a:	4b12      	ldr	r3, [pc, #72]	@ (8063084 <DiagService_RDBI_ReadWakeupHistory+0xe8>)
 806303c:	2200      	movs	r2, #0
 806303e:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceRequest_Frame.frame.dlc = 0;
 8063040:	4b10      	ldr	r3, [pc, #64]	@ (8063084 <DiagService_RDBI_ReadWakeupHistory+0xe8>)
 8063042:	2200      	movs	r2, #0
 8063044:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceRequest_Frame.frame.data0 = 0;
 8063046:	4b0f      	ldr	r3, [pc, #60]	@ (8063084 <DiagService_RDBI_ReadWakeupHistory+0xe8>)
 8063048:	2200      	movs	r2, #0
 806304a:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceRequest_Frame.frame.data1 = 0;
 806304c:	4b0d      	ldr	r3, [pc, #52]	@ (8063084 <DiagService_RDBI_ReadWakeupHistory+0xe8>)
 806304e:	2200      	movs	r2, #0
 8063050:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceRequest_Frame.frame.data2 = 0;
 8063052:	4b0c      	ldr	r3, [pc, #48]	@ (8063084 <DiagService_RDBI_ReadWakeupHistory+0xe8>)
 8063054:	2200      	movs	r2, #0
 8063056:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceRequest_Frame.frame.data3 = 0;
 8063058:	4b0a      	ldr	r3, [pc, #40]	@ (8063084 <DiagService_RDBI_ReadWakeupHistory+0xe8>)
 806305a:	2200      	movs	r2, #0
 806305c:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceRequest_Frame.frame.data4 = 0;
 806305e:	4b09      	ldr	r3, [pc, #36]	@ (8063084 <DiagService_RDBI_ReadWakeupHistory+0xe8>)
 8063060:	2200      	movs	r2, #0
 8063062:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceRequest_Frame.frame.data5 = 0;
 8063064:	4b07      	ldr	r3, [pc, #28]	@ (8063084 <DiagService_RDBI_ReadWakeupHistory+0xe8>)
 8063066:	2200      	movs	r2, #0
 8063068:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceRequest_Frame.frame.data6 = 0;
 806306a:	4b06      	ldr	r3, [pc, #24]	@ (8063084 <DiagService_RDBI_ReadWakeupHistory+0xe8>)
 806306c:	2200      	movs	r2, #0
 806306e:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceRequest_Frame.frame.data7 = 0;
 8063070:	4b04      	ldr	r3, [pc, #16]	@ (8063084 <DiagService_RDBI_ReadWakeupHistory+0xe8>)
 8063072:	2200      	movs	r2, #0
 8063074:	741a      	strb	r2, [r3, #16]
}
 8063076:	bf00      	nop
 8063078:	bd80      	pop	{r7, pc}
 806307a:	bf00      	nop
 806307c:	20010374 	.word	0x20010374
 8063080:	2001fdb8 	.word	0x2001fdb8
 8063084:	20010388 	.word	0x20010388

08063088 <DiagService_RDBI_ReadSWVersion>:
static void DiagService_RDBI_ReadSWVersion(void)
{
 8063088:	b580      	push	{r7, lr}
 806308a:	af00      	add	r7, sp, #0
	Dcm_DiagServiceResponse_Frame.frame.dlc = 8;
 806308c:	4b36      	ldr	r3, [pc, #216]	@ (8063168 <DiagService_RDBI_ReadSWVersion+0xe0>)
 806308e:	2208      	movs	r2, #8
 8063090:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceResponse_Frame.frame.id = 0x701;
 8063092:	4b35      	ldr	r3, [pc, #212]	@ (8063168 <DiagService_RDBI_ReadSWVersion+0xe0>)
 8063094:	f240 7201 	movw	r2, #1793	@ 0x701
 8063098:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceResponse_Frame.frame.idType = 1;
 806309a:	4b33      	ldr	r3, [pc, #204]	@ (8063168 <DiagService_RDBI_ReadSWVersion+0xe0>)
 806309c:	2201      	movs	r2, #1
 806309e:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceResponse_Frame.frame.data0 = 0x07;
 80630a0:	4b31      	ldr	r3, [pc, #196]	@ (8063168 <DiagService_RDBI_ReadSWVersion+0xe0>)
 80630a2:	2207      	movs	r2, #7
 80630a4:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceResponse_Frame.frame.data1 = 0x62;
 80630a6:	4b30      	ldr	r3, [pc, #192]	@ (8063168 <DiagService_RDBI_ReadSWVersion+0xe0>)
 80630a8:	2262      	movs	r2, #98	@ 0x62
 80630aa:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceResponse_Frame.frame.data2 = 0xF1;
 80630ac:	4b2e      	ldr	r3, [pc, #184]	@ (8063168 <DiagService_RDBI_ReadSWVersion+0xe0>)
 80630ae:	22f1      	movs	r2, #241	@ 0xf1
 80630b0:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceResponse_Frame.frame.data3 = 0x80;
 80630b2:	4b2d      	ldr	r3, [pc, #180]	@ (8063168 <DiagService_RDBI_ReadSWVersion+0xe0>)
 80630b4:	2280      	movs	r2, #128	@ 0x80
 80630b6:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceResponse_Frame.frame.data4 = Dcm_SWVersion.FlashBootLoaderVersion;
 80630b8:	4b2c      	ldr	r3, [pc, #176]	@ (806316c <DiagService_RDBI_ReadSWVersion+0xe4>)
 80630ba:	785a      	ldrb	r2, [r3, #1]
 80630bc:	4b2a      	ldr	r3, [pc, #168]	@ (8063168 <DiagService_RDBI_ReadSWVersion+0xe0>)
 80630be:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceResponse_Frame.frame.data5 = Dcm_SWVersion.SoftwareVersion;
 80630c0:	4b2a      	ldr	r3, [pc, #168]	@ (806316c <DiagService_RDBI_ReadSWVersion+0xe4>)
 80630c2:	781a      	ldrb	r2, [r3, #0]
 80630c4:	4b28      	ldr	r3, [pc, #160]	@ (8063168 <DiagService_RDBI_ReadSWVersion+0xe0>)
 80630c6:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceResponse_Frame.frame.data6 = Dcm_SWVersion.CodingVersion;
 80630c8:	4b28      	ldr	r3, [pc, #160]	@ (806316c <DiagService_RDBI_ReadSWVersion+0xe4>)
 80630ca:	789a      	ldrb	r2, [r3, #2]
 80630cc:	4b26      	ldr	r3, [pc, #152]	@ (8063168 <DiagService_RDBI_ReadSWVersion+0xe0>)
 80630ce:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceResponse_Frame.frame.data7 = Dcm_SWVersion.CalibrationVersion;
 80630d0:	4b26      	ldr	r3, [pc, #152]	@ (806316c <DiagService_RDBI_ReadSWVersion+0xe4>)
 80630d2:	78da      	ldrb	r2, [r3, #3]
 80630d4:	4b24      	ldr	r3, [pc, #144]	@ (8063168 <DiagService_RDBI_ReadSWVersion+0xe0>)
 80630d6:	741a      	strb	r2, [r3, #16]
	CanSpi_Transmit(&Dcm_DiagServiceResponse_Frame);
 80630d8:	4823      	ldr	r0, [pc, #140]	@ (8063168 <DiagService_RDBI_ReadSWVersion+0xe0>)
 80630da:	f7fe fcdd 	bl	8061a98 <CanSpi_Transmit>
	Dcm_DiagServiceResponse_Frame.frame.idType = 0;
 80630de:	4b22      	ldr	r3, [pc, #136]	@ (8063168 <DiagService_RDBI_ReadSWVersion+0xe0>)
 80630e0:	2200      	movs	r2, #0
 80630e2:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceResponse_Frame.frame.id = 0;
 80630e4:	4b20      	ldr	r3, [pc, #128]	@ (8063168 <DiagService_RDBI_ReadSWVersion+0xe0>)
 80630e6:	2200      	movs	r2, #0
 80630e8:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceResponse_Frame.frame.dlc = 0;
 80630ea:	4b1f      	ldr	r3, [pc, #124]	@ (8063168 <DiagService_RDBI_ReadSWVersion+0xe0>)
 80630ec:	2200      	movs	r2, #0
 80630ee:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceResponse_Frame.frame.data0 = 0;
 80630f0:	4b1d      	ldr	r3, [pc, #116]	@ (8063168 <DiagService_RDBI_ReadSWVersion+0xe0>)
 80630f2:	2200      	movs	r2, #0
 80630f4:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceResponse_Frame.frame.data1 = 0;
 80630f6:	4b1c      	ldr	r3, [pc, #112]	@ (8063168 <DiagService_RDBI_ReadSWVersion+0xe0>)
 80630f8:	2200      	movs	r2, #0
 80630fa:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceResponse_Frame.frame.data2 = 0;
 80630fc:	4b1a      	ldr	r3, [pc, #104]	@ (8063168 <DiagService_RDBI_ReadSWVersion+0xe0>)
 80630fe:	2200      	movs	r2, #0
 8063100:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceResponse_Frame.frame.data3 = 0;
 8063102:	4b19      	ldr	r3, [pc, #100]	@ (8063168 <DiagService_RDBI_ReadSWVersion+0xe0>)
 8063104:	2200      	movs	r2, #0
 8063106:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceResponse_Frame.frame.data4 = 0;
 8063108:	4b17      	ldr	r3, [pc, #92]	@ (8063168 <DiagService_RDBI_ReadSWVersion+0xe0>)
 806310a:	2200      	movs	r2, #0
 806310c:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceResponse_Frame.frame.data5 = 0;
 806310e:	4b16      	ldr	r3, [pc, #88]	@ (8063168 <DiagService_RDBI_ReadSWVersion+0xe0>)
 8063110:	2200      	movs	r2, #0
 8063112:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceResponse_Frame.frame.data6 = 0;
 8063114:	4b14      	ldr	r3, [pc, #80]	@ (8063168 <DiagService_RDBI_ReadSWVersion+0xe0>)
 8063116:	2200      	movs	r2, #0
 8063118:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceResponse_Frame.frame.data7 = 0;
 806311a:	4b13      	ldr	r3, [pc, #76]	@ (8063168 <DiagService_RDBI_ReadSWVersion+0xe0>)
 806311c:	2200      	movs	r2, #0
 806311e:	741a      	strb	r2, [r3, #16]
	Dcm_DiagServiceRequest_Frame.frame.idType = 0;
 8063120:	4b13      	ldr	r3, [pc, #76]	@ (8063170 <DiagService_RDBI_ReadSWVersion+0xe8>)
 8063122:	2200      	movs	r2, #0
 8063124:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceRequest_Frame.frame.id = 0;
 8063126:	4b12      	ldr	r3, [pc, #72]	@ (8063170 <DiagService_RDBI_ReadSWVersion+0xe8>)
 8063128:	2200      	movs	r2, #0
 806312a:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceRequest_Frame.frame.dlc = 0;
 806312c:	4b10      	ldr	r3, [pc, #64]	@ (8063170 <DiagService_RDBI_ReadSWVersion+0xe8>)
 806312e:	2200      	movs	r2, #0
 8063130:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceRequest_Frame.frame.data0 = 0;
 8063132:	4b0f      	ldr	r3, [pc, #60]	@ (8063170 <DiagService_RDBI_ReadSWVersion+0xe8>)
 8063134:	2200      	movs	r2, #0
 8063136:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceRequest_Frame.frame.data1 = 0;
 8063138:	4b0d      	ldr	r3, [pc, #52]	@ (8063170 <DiagService_RDBI_ReadSWVersion+0xe8>)
 806313a:	2200      	movs	r2, #0
 806313c:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceRequest_Frame.frame.data2 = 0;
 806313e:	4b0c      	ldr	r3, [pc, #48]	@ (8063170 <DiagService_RDBI_ReadSWVersion+0xe8>)
 8063140:	2200      	movs	r2, #0
 8063142:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceRequest_Frame.frame.data3 = 0;
 8063144:	4b0a      	ldr	r3, [pc, #40]	@ (8063170 <DiagService_RDBI_ReadSWVersion+0xe8>)
 8063146:	2200      	movs	r2, #0
 8063148:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceRequest_Frame.frame.data4 = 0;
 806314a:	4b09      	ldr	r3, [pc, #36]	@ (8063170 <DiagService_RDBI_ReadSWVersion+0xe8>)
 806314c:	2200      	movs	r2, #0
 806314e:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceRequest_Frame.frame.data5 = 0;
 8063150:	4b07      	ldr	r3, [pc, #28]	@ (8063170 <DiagService_RDBI_ReadSWVersion+0xe8>)
 8063152:	2200      	movs	r2, #0
 8063154:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceRequest_Frame.frame.data6 = 0;
 8063156:	4b06      	ldr	r3, [pc, #24]	@ (8063170 <DiagService_RDBI_ReadSWVersion+0xe8>)
 8063158:	2200      	movs	r2, #0
 806315a:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceRequest_Frame.frame.data7 = 0;
 806315c:	4b04      	ldr	r3, [pc, #16]	@ (8063170 <DiagService_RDBI_ReadSWVersion+0xe8>)
 806315e:	2200      	movs	r2, #0
 8063160:	741a      	strb	r2, [r3, #16]
}
 8063162:	bf00      	nop
 8063164:	bd80      	pop	{r7, pc}
 8063166:	bf00      	nop
 8063168:	20010374 	.word	0x20010374
 806316c:	20010020 	.word	0x20010020
 8063170:	20010388 	.word	0x20010388

08063174 <DiagService_RDBI_ReadActiveDiagnosticSession>:

static void DiagService_RDBI_ReadActiveDiagnosticSession(void)
{
 8063174:	b580      	push	{r7, lr}
 8063176:	af00      	add	r7, sp, #0
	Dcm_DiagServiceResponse_Frame.frame.dlc = 5;
 8063178:	4b30      	ldr	r3, [pc, #192]	@ (806323c <DiagService_RDBI_ReadActiveDiagnosticSession+0xc8>)
 806317a:	2205      	movs	r2, #5
 806317c:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceResponse_Frame.frame.id = 0x701;
 806317e:	4b2f      	ldr	r3, [pc, #188]	@ (806323c <DiagService_RDBI_ReadActiveDiagnosticSession+0xc8>)
 8063180:	f240 7201 	movw	r2, #1793	@ 0x701
 8063184:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceResponse_Frame.frame.idType = 1;
 8063186:	4b2d      	ldr	r3, [pc, #180]	@ (806323c <DiagService_RDBI_ReadActiveDiagnosticSession+0xc8>)
 8063188:	2201      	movs	r2, #1
 806318a:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceResponse_Frame.frame.data0 = 0x04;
 806318c:	4b2b      	ldr	r3, [pc, #172]	@ (806323c <DiagService_RDBI_ReadActiveDiagnosticSession+0xc8>)
 806318e:	2204      	movs	r2, #4
 8063190:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceResponse_Frame.frame.data1 = 0x62;
 8063192:	4b2a      	ldr	r3, [pc, #168]	@ (806323c <DiagService_RDBI_ReadActiveDiagnosticSession+0xc8>)
 8063194:	2262      	movs	r2, #98	@ 0x62
 8063196:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceResponse_Frame.frame.data2 = 0xF1;
 8063198:	4b28      	ldr	r3, [pc, #160]	@ (806323c <DiagService_RDBI_ReadActiveDiagnosticSession+0xc8>)
 806319a:	22f1      	movs	r2, #241	@ 0xf1
 806319c:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceResponse_Frame.frame.data3 = 0x86;
 806319e:	4b27      	ldr	r3, [pc, #156]	@ (806323c <DiagService_RDBI_ReadActiveDiagnosticSession+0xc8>)
 80631a0:	2286      	movs	r2, #134	@ 0x86
 80631a2:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceResponse_Frame.frame.data4 = Dcm_DiagnosticSession;
 80631a4:	4b26      	ldr	r3, [pc, #152]	@ (8063240 <DiagService_RDBI_ReadActiveDiagnosticSession+0xcc>)
 80631a6:	781a      	ldrb	r2, [r3, #0]
 80631a8:	4b24      	ldr	r3, [pc, #144]	@ (806323c <DiagService_RDBI_ReadActiveDiagnosticSession+0xc8>)
 80631aa:	735a      	strb	r2, [r3, #13]
	CanSpi_Transmit(&Dcm_DiagServiceResponse_Frame);
 80631ac:	4823      	ldr	r0, [pc, #140]	@ (806323c <DiagService_RDBI_ReadActiveDiagnosticSession+0xc8>)
 80631ae:	f7fe fc73 	bl	8061a98 <CanSpi_Transmit>
	Dcm_DiagServiceResponse_Frame.frame.idType = 0;
 80631b2:	4b22      	ldr	r3, [pc, #136]	@ (806323c <DiagService_RDBI_ReadActiveDiagnosticSession+0xc8>)
 80631b4:	2200      	movs	r2, #0
 80631b6:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceResponse_Frame.frame.id = 0;
 80631b8:	4b20      	ldr	r3, [pc, #128]	@ (806323c <DiagService_RDBI_ReadActiveDiagnosticSession+0xc8>)
 80631ba:	2200      	movs	r2, #0
 80631bc:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceResponse_Frame.frame.dlc = 0;
 80631be:	4b1f      	ldr	r3, [pc, #124]	@ (806323c <DiagService_RDBI_ReadActiveDiagnosticSession+0xc8>)
 80631c0:	2200      	movs	r2, #0
 80631c2:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceResponse_Frame.frame.data0 = 0;
 80631c4:	4b1d      	ldr	r3, [pc, #116]	@ (806323c <DiagService_RDBI_ReadActiveDiagnosticSession+0xc8>)
 80631c6:	2200      	movs	r2, #0
 80631c8:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceResponse_Frame.frame.data1 = 0;
 80631ca:	4b1c      	ldr	r3, [pc, #112]	@ (806323c <DiagService_RDBI_ReadActiveDiagnosticSession+0xc8>)
 80631cc:	2200      	movs	r2, #0
 80631ce:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceResponse_Frame.frame.data2 = 0;
 80631d0:	4b1a      	ldr	r3, [pc, #104]	@ (806323c <DiagService_RDBI_ReadActiveDiagnosticSession+0xc8>)
 80631d2:	2200      	movs	r2, #0
 80631d4:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceResponse_Frame.frame.data3 = 0;
 80631d6:	4b19      	ldr	r3, [pc, #100]	@ (806323c <DiagService_RDBI_ReadActiveDiagnosticSession+0xc8>)
 80631d8:	2200      	movs	r2, #0
 80631da:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceResponse_Frame.frame.data4 = 0;
 80631dc:	4b17      	ldr	r3, [pc, #92]	@ (806323c <DiagService_RDBI_ReadActiveDiagnosticSession+0xc8>)
 80631de:	2200      	movs	r2, #0
 80631e0:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceResponse_Frame.frame.data5 = 0;
 80631e2:	4b16      	ldr	r3, [pc, #88]	@ (806323c <DiagService_RDBI_ReadActiveDiagnosticSession+0xc8>)
 80631e4:	2200      	movs	r2, #0
 80631e6:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceResponse_Frame.frame.data6 = 0;
 80631e8:	4b14      	ldr	r3, [pc, #80]	@ (806323c <DiagService_RDBI_ReadActiveDiagnosticSession+0xc8>)
 80631ea:	2200      	movs	r2, #0
 80631ec:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceResponse_Frame.frame.data7 = 0;
 80631ee:	4b13      	ldr	r3, [pc, #76]	@ (806323c <DiagService_RDBI_ReadActiveDiagnosticSession+0xc8>)
 80631f0:	2200      	movs	r2, #0
 80631f2:	741a      	strb	r2, [r3, #16]
	Dcm_DiagServiceRequest_Frame.frame.idType = 0;
 80631f4:	4b13      	ldr	r3, [pc, #76]	@ (8063244 <DiagService_RDBI_ReadActiveDiagnosticSession+0xd0>)
 80631f6:	2200      	movs	r2, #0
 80631f8:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceRequest_Frame.frame.id = 0;
 80631fa:	4b12      	ldr	r3, [pc, #72]	@ (8063244 <DiagService_RDBI_ReadActiveDiagnosticSession+0xd0>)
 80631fc:	2200      	movs	r2, #0
 80631fe:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceRequest_Frame.frame.dlc = 0;
 8063200:	4b10      	ldr	r3, [pc, #64]	@ (8063244 <DiagService_RDBI_ReadActiveDiagnosticSession+0xd0>)
 8063202:	2200      	movs	r2, #0
 8063204:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceRequest_Frame.frame.data0 = 0;
 8063206:	4b0f      	ldr	r3, [pc, #60]	@ (8063244 <DiagService_RDBI_ReadActiveDiagnosticSession+0xd0>)
 8063208:	2200      	movs	r2, #0
 806320a:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceRequest_Frame.frame.data1 = 0;
 806320c:	4b0d      	ldr	r3, [pc, #52]	@ (8063244 <DiagService_RDBI_ReadActiveDiagnosticSession+0xd0>)
 806320e:	2200      	movs	r2, #0
 8063210:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceRequest_Frame.frame.data2 = 0;
 8063212:	4b0c      	ldr	r3, [pc, #48]	@ (8063244 <DiagService_RDBI_ReadActiveDiagnosticSession+0xd0>)
 8063214:	2200      	movs	r2, #0
 8063216:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceRequest_Frame.frame.data3 = 0;
 8063218:	4b0a      	ldr	r3, [pc, #40]	@ (8063244 <DiagService_RDBI_ReadActiveDiagnosticSession+0xd0>)
 806321a:	2200      	movs	r2, #0
 806321c:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceRequest_Frame.frame.data4 = 0;
 806321e:	4b09      	ldr	r3, [pc, #36]	@ (8063244 <DiagService_RDBI_ReadActiveDiagnosticSession+0xd0>)
 8063220:	2200      	movs	r2, #0
 8063222:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceRequest_Frame.frame.data5 = 0;
 8063224:	4b07      	ldr	r3, [pc, #28]	@ (8063244 <DiagService_RDBI_ReadActiveDiagnosticSession+0xd0>)
 8063226:	2200      	movs	r2, #0
 8063228:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceRequest_Frame.frame.data6 = 0;
 806322a:	4b06      	ldr	r3, [pc, #24]	@ (8063244 <DiagService_RDBI_ReadActiveDiagnosticSession+0xd0>)
 806322c:	2200      	movs	r2, #0
 806322e:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceRequest_Frame.frame.data7 = 0;
 8063230:	4b04      	ldr	r3, [pc, #16]	@ (8063244 <DiagService_RDBI_ReadActiveDiagnosticSession+0xd0>)
 8063232:	2200      	movs	r2, #0
 8063234:	741a      	strb	r2, [r3, #16]
}
 8063236:	bf00      	nop
 8063238:	bd80      	pop	{r7, pc}
 806323a:	bf00      	nop
 806323c:	20010374 	.word	0x20010374
 8063240:	2001fda8 	.word	0x2001fda8
 8063244:	20010388 	.word	0x20010388

08063248 <DiagService_RDBI_ReadAliveTime>:
static void DiagService_RDBI_ReadAliveTime(void)
{
 8063248:	b580      	push	{r7, lr}
 806324a:	af00      	add	r7, sp, #0
	Dcm_DiagServiceResponse_Frame.frame.dlc = 5;
 806324c:	4b36      	ldr	r3, [pc, #216]	@ (8063328 <DiagService_RDBI_ReadAliveTime+0xe0>)
 806324e:	2205      	movs	r2, #5
 8063250:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceResponse_Frame.frame.id = 0x701;
 8063252:	4b35      	ldr	r3, [pc, #212]	@ (8063328 <DiagService_RDBI_ReadAliveTime+0xe0>)
 8063254:	f240 7201 	movw	r2, #1793	@ 0x701
 8063258:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceResponse_Frame.frame.idType = 1;
 806325a:	4b33      	ldr	r3, [pc, #204]	@ (8063328 <DiagService_RDBI_ReadAliveTime+0xe0>)
 806325c:	2201      	movs	r2, #1
 806325e:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceResponse_Frame.frame.data0 = 0x04;
 8063260:	4b31      	ldr	r3, [pc, #196]	@ (8063328 <DiagService_RDBI_ReadAliveTime+0xe0>)
 8063262:	2204      	movs	r2, #4
 8063264:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceResponse_Frame.frame.data1 = 0x62;
 8063266:	4b30      	ldr	r3, [pc, #192]	@ (8063328 <DiagService_RDBI_ReadAliveTime+0xe0>)
 8063268:	2262      	movs	r2, #98	@ 0x62
 806326a:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceResponse_Frame.frame.data2 = 0x00;
 806326c:	4b2e      	ldr	r3, [pc, #184]	@ (8063328 <DiagService_RDBI_ReadAliveTime+0xe0>)
 806326e:	2200      	movs	r2, #0
 8063270:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceResponse_Frame.frame.data3 = 0x05;
 8063272:	4b2d      	ldr	r3, [pc, #180]	@ (8063328 <DiagService_RDBI_ReadAliveTime+0xe0>)
 8063274:	2205      	movs	r2, #5
 8063276:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceResponse_Frame.frame.data4 = (uint8)((Dcm_AliveCounter * 5) / 60000 * 60);
 8063278:	4b2c      	ldr	r3, [pc, #176]	@ (806332c <DiagService_RDBI_ReadAliveTime+0xe4>)
 806327a:	681a      	ldr	r2, [r3, #0]
 806327c:	4613      	mov	r3, r2
 806327e:	009b      	lsls	r3, r3, #2
 8063280:	4413      	add	r3, r2
 8063282:	4a2b      	ldr	r2, [pc, #172]	@ (8063330 <DiagService_RDBI_ReadAliveTime+0xe8>)
 8063284:	fba2 2303 	umull	r2, r3, r2, r3
 8063288:	0b9b      	lsrs	r3, r3, #14
 806328a:	b2db      	uxtb	r3, r3
 806328c:	461a      	mov	r2, r3
 806328e:	0112      	lsls	r2, r2, #4
 8063290:	1ad3      	subs	r3, r2, r3
 8063292:	009b      	lsls	r3, r3, #2
 8063294:	b2da      	uxtb	r2, r3
 8063296:	4b24      	ldr	r3, [pc, #144]	@ (8063328 <DiagService_RDBI_ReadAliveTime+0xe0>)
 8063298:	735a      	strb	r2, [r3, #13]
	CanSpi_Transmit(&Dcm_DiagServiceResponse_Frame);
 806329a:	4823      	ldr	r0, [pc, #140]	@ (8063328 <DiagService_RDBI_ReadAliveTime+0xe0>)
 806329c:	f7fe fbfc 	bl	8061a98 <CanSpi_Transmit>
	Dcm_DiagServiceResponse_Frame.frame.idType = 0;
 80632a0:	4b21      	ldr	r3, [pc, #132]	@ (8063328 <DiagService_RDBI_ReadAliveTime+0xe0>)
 80632a2:	2200      	movs	r2, #0
 80632a4:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceResponse_Frame.frame.id = 0;
 80632a6:	4b20      	ldr	r3, [pc, #128]	@ (8063328 <DiagService_RDBI_ReadAliveTime+0xe0>)
 80632a8:	2200      	movs	r2, #0
 80632aa:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceResponse_Frame.frame.dlc = 0;
 80632ac:	4b1e      	ldr	r3, [pc, #120]	@ (8063328 <DiagService_RDBI_ReadAliveTime+0xe0>)
 80632ae:	2200      	movs	r2, #0
 80632b0:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceResponse_Frame.frame.data0 = 0;
 80632b2:	4b1d      	ldr	r3, [pc, #116]	@ (8063328 <DiagService_RDBI_ReadAliveTime+0xe0>)
 80632b4:	2200      	movs	r2, #0
 80632b6:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceResponse_Frame.frame.data1 = 0;
 80632b8:	4b1b      	ldr	r3, [pc, #108]	@ (8063328 <DiagService_RDBI_ReadAliveTime+0xe0>)
 80632ba:	2200      	movs	r2, #0
 80632bc:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceResponse_Frame.frame.data2 = 0;
 80632be:	4b1a      	ldr	r3, [pc, #104]	@ (8063328 <DiagService_RDBI_ReadAliveTime+0xe0>)
 80632c0:	2200      	movs	r2, #0
 80632c2:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceResponse_Frame.frame.data3 = 0;
 80632c4:	4b18      	ldr	r3, [pc, #96]	@ (8063328 <DiagService_RDBI_ReadAliveTime+0xe0>)
 80632c6:	2200      	movs	r2, #0
 80632c8:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceResponse_Frame.frame.data4 = 0;
 80632ca:	4b17      	ldr	r3, [pc, #92]	@ (8063328 <DiagService_RDBI_ReadAliveTime+0xe0>)
 80632cc:	2200      	movs	r2, #0
 80632ce:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceResponse_Frame.frame.data5 = 0;
 80632d0:	4b15      	ldr	r3, [pc, #84]	@ (8063328 <DiagService_RDBI_ReadAliveTime+0xe0>)
 80632d2:	2200      	movs	r2, #0
 80632d4:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceResponse_Frame.frame.data6 = 0;
 80632d6:	4b14      	ldr	r3, [pc, #80]	@ (8063328 <DiagService_RDBI_ReadAliveTime+0xe0>)
 80632d8:	2200      	movs	r2, #0
 80632da:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceResponse_Frame.frame.data7 = 0;
 80632dc:	4b12      	ldr	r3, [pc, #72]	@ (8063328 <DiagService_RDBI_ReadAliveTime+0xe0>)
 80632de:	2200      	movs	r2, #0
 80632e0:	741a      	strb	r2, [r3, #16]
	Dcm_DiagServiceRequest_Frame.frame.idType = 0;
 80632e2:	4b14      	ldr	r3, [pc, #80]	@ (8063334 <DiagService_RDBI_ReadAliveTime+0xec>)
 80632e4:	2200      	movs	r2, #0
 80632e6:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceRequest_Frame.frame.id = 0;
 80632e8:	4b12      	ldr	r3, [pc, #72]	@ (8063334 <DiagService_RDBI_ReadAliveTime+0xec>)
 80632ea:	2200      	movs	r2, #0
 80632ec:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceRequest_Frame.frame.dlc = 0;
 80632ee:	4b11      	ldr	r3, [pc, #68]	@ (8063334 <DiagService_RDBI_ReadAliveTime+0xec>)
 80632f0:	2200      	movs	r2, #0
 80632f2:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceRequest_Frame.frame.data0 = 0;
 80632f4:	4b0f      	ldr	r3, [pc, #60]	@ (8063334 <DiagService_RDBI_ReadAliveTime+0xec>)
 80632f6:	2200      	movs	r2, #0
 80632f8:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceRequest_Frame.frame.data1 = 0;
 80632fa:	4b0e      	ldr	r3, [pc, #56]	@ (8063334 <DiagService_RDBI_ReadAliveTime+0xec>)
 80632fc:	2200      	movs	r2, #0
 80632fe:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceRequest_Frame.frame.data2 = 0;
 8063300:	4b0c      	ldr	r3, [pc, #48]	@ (8063334 <DiagService_RDBI_ReadAliveTime+0xec>)
 8063302:	2200      	movs	r2, #0
 8063304:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceRequest_Frame.frame.data3 = 0;
 8063306:	4b0b      	ldr	r3, [pc, #44]	@ (8063334 <DiagService_RDBI_ReadAliveTime+0xec>)
 8063308:	2200      	movs	r2, #0
 806330a:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceRequest_Frame.frame.data4 = 0;
 806330c:	4b09      	ldr	r3, [pc, #36]	@ (8063334 <DiagService_RDBI_ReadAliveTime+0xec>)
 806330e:	2200      	movs	r2, #0
 8063310:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceRequest_Frame.frame.data5 = 0;
 8063312:	4b08      	ldr	r3, [pc, #32]	@ (8063334 <DiagService_RDBI_ReadAliveTime+0xec>)
 8063314:	2200      	movs	r2, #0
 8063316:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceRequest_Frame.frame.data6 = 0;
 8063318:	4b06      	ldr	r3, [pc, #24]	@ (8063334 <DiagService_RDBI_ReadAliveTime+0xec>)
 806331a:	2200      	movs	r2, #0
 806331c:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceRequest_Frame.frame.data7 = 0;
 806331e:	4b05      	ldr	r3, [pc, #20]	@ (8063334 <DiagService_RDBI_ReadAliveTime+0xec>)
 8063320:	2200      	movs	r2, #0
 8063322:	741a      	strb	r2, [r3, #16]
}
 8063324:	bf00      	nop
 8063326:	bd80      	pop	{r7, pc}
 8063328:	20010374 	.word	0x20010374
 806332c:	2001fdac 	.word	0x2001fdac
 8063330:	45e7b273 	.word	0x45e7b273
 8063334:	20010388 	.word	0x20010388

08063338 <DiagService_RDBPI_ReadPeriodicIgnitionCompleteStatus>:
static void DiagService_RDBPI_ReadPeriodicIgnitionCompleteStatus(void)
{
 8063338:	b580      	push	{r7, lr}
 806333a:	af00      	add	r7, sp, #0
	Dcm_DiagServiceResponse_Frame.frame.dlc = 8;
 806333c:	4b3c      	ldr	r3, [pc, #240]	@ (8063430 <DiagService_RDBPI_ReadPeriodicIgnitionCompleteStatus+0xf8>)
 806333e:	2208      	movs	r2, #8
 8063340:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceResponse_Frame.frame.id = 0x701;
 8063342:	4b3b      	ldr	r3, [pc, #236]	@ (8063430 <DiagService_RDBPI_ReadPeriodicIgnitionCompleteStatus+0xf8>)
 8063344:	f240 7201 	movw	r2, #1793	@ 0x701
 8063348:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceResponse_Frame.frame.idType = 1;
 806334a:	4b39      	ldr	r3, [pc, #228]	@ (8063430 <DiagService_RDBPI_ReadPeriodicIgnitionCompleteStatus+0xf8>)
 806334c:	2201      	movs	r2, #1
 806334e:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceResponse_Frame.frame.data0 = 0x07;
 8063350:	4b37      	ldr	r3, [pc, #220]	@ (8063430 <DiagService_RDBPI_ReadPeriodicIgnitionCompleteStatus+0xf8>)
 8063352:	2207      	movs	r2, #7
 8063354:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceResponse_Frame.frame.data1 = 0x6A;
 8063356:	4b36      	ldr	r3, [pc, #216]	@ (8063430 <DiagService_RDBPI_ReadPeriodicIgnitionCompleteStatus+0xf8>)
 8063358:	226a      	movs	r2, #106	@ 0x6a
 806335a:	729a      	strb	r2, [r3, #10]
	if(Dcm_DiagServiceRequest_Frame.frame.data2 != 0x04) Dcm_DiagServiceResponse_Frame.frame.data2 = 0x01;
 806335c:	4b35      	ldr	r3, [pc, #212]	@ (8063434 <DiagService_RDBPI_ReadPeriodicIgnitionCompleteStatus+0xfc>)
 806335e:	7adb      	ldrb	r3, [r3, #11]
 8063360:	2b04      	cmp	r3, #4
 8063362:	d003      	beq.n	806336c <DiagService_RDBPI_ReadPeriodicIgnitionCompleteStatus+0x34>
 8063364:	4b32      	ldr	r3, [pc, #200]	@ (8063430 <DiagService_RDBPI_ReadPeriodicIgnitionCompleteStatus+0xf8>)
 8063366:	2201      	movs	r2, #1
 8063368:	72da      	strb	r2, [r3, #11]
 806336a:	e006      	b.n	806337a <DiagService_RDBPI_ReadPeriodicIgnitionCompleteStatus+0x42>
	else if(Dcm_DiagServiceRequest_Frame.frame.data2 == 0x04) Dcm_DiagServiceResponse_Frame.frame.data2 = 0x04;
 806336c:	4b31      	ldr	r3, [pc, #196]	@ (8063434 <DiagService_RDBPI_ReadPeriodicIgnitionCompleteStatus+0xfc>)
 806336e:	7adb      	ldrb	r3, [r3, #11]
 8063370:	2b04      	cmp	r3, #4
 8063372:	d102      	bne.n	806337a <DiagService_RDBPI_ReadPeriodicIgnitionCompleteStatus+0x42>
 8063374:	4b2e      	ldr	r3, [pc, #184]	@ (8063430 <DiagService_RDBPI_ReadPeriodicIgnitionCompleteStatus+0xf8>)
 8063376:	2204      	movs	r2, #4
 8063378:	72da      	strb	r2, [r3, #11]
	else
	{
		/* Do nothing. */
	}
	Dcm_DiagServiceResponse_Frame.frame.data3 = 0x00;
 806337a:	4b2d      	ldr	r3, [pc, #180]	@ (8063430 <DiagService_RDBPI_ReadPeriodicIgnitionCompleteStatus+0xf8>)
 806337c:	2200      	movs	r2, #0
 806337e:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceResponse_Frame.frame.data4 = StatusList_ComOutValue[0];
 8063380:	4b2d      	ldr	r3, [pc, #180]	@ (8063438 <DiagService_RDBPI_ReadPeriodicIgnitionCompleteStatus+0x100>)
 8063382:	781a      	ldrb	r2, [r3, #0]
 8063384:	4b2a      	ldr	r3, [pc, #168]	@ (8063430 <DiagService_RDBPI_ReadPeriodicIgnitionCompleteStatus+0xf8>)
 8063386:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceResponse_Frame.frame.data5 = StatusList_RawValue[0];
 8063388:	4b2c      	ldr	r3, [pc, #176]	@ (806343c <DiagService_RDBPI_ReadPeriodicIgnitionCompleteStatus+0x104>)
 806338a:	781a      	ldrb	r2, [r3, #0]
 806338c:	4b28      	ldr	r3, [pc, #160]	@ (8063430 <DiagService_RDBPI_ReadPeriodicIgnitionCompleteStatus+0xf8>)
 806338e:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceResponse_Frame.frame.data6 = StatusList_InputStatus[0].errorStatus;
 8063390:	4b2b      	ldr	r3, [pc, #172]	@ (8063440 <DiagService_RDBPI_ReadPeriodicIgnitionCompleteStatus+0x108>)
 8063392:	781a      	ldrb	r2, [r3, #0]
 8063394:	4b26      	ldr	r3, [pc, #152]	@ (8063430 <DiagService_RDBPI_ReadPeriodicIgnitionCompleteStatus+0xf8>)
 8063396:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceResponse_Frame.frame.data7 = StatusList_InputStatus[0].DCYStatus;
 8063398:	4b29      	ldr	r3, [pc, #164]	@ (8063440 <DiagService_RDBPI_ReadPeriodicIgnitionCompleteStatus+0x108>)
 806339a:	785a      	ldrb	r2, [r3, #1]
 806339c:	4b24      	ldr	r3, [pc, #144]	@ (8063430 <DiagService_RDBPI_ReadPeriodicIgnitionCompleteStatus+0xf8>)
 806339e:	741a      	strb	r2, [r3, #16]
	CanSpi_Transmit(&Dcm_DiagServiceResponse_Frame);
 80633a0:	4823      	ldr	r0, [pc, #140]	@ (8063430 <DiagService_RDBPI_ReadPeriodicIgnitionCompleteStatus+0xf8>)
 80633a2:	f7fe fb79 	bl	8061a98 <CanSpi_Transmit>
	Dcm_DiagServiceResponse_Frame.frame.idType = 0;
 80633a6:	4b22      	ldr	r3, [pc, #136]	@ (8063430 <DiagService_RDBPI_ReadPeriodicIgnitionCompleteStatus+0xf8>)
 80633a8:	2200      	movs	r2, #0
 80633aa:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceResponse_Frame.frame.id = 0;
 80633ac:	4b20      	ldr	r3, [pc, #128]	@ (8063430 <DiagService_RDBPI_ReadPeriodicIgnitionCompleteStatus+0xf8>)
 80633ae:	2200      	movs	r2, #0
 80633b0:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceResponse_Frame.frame.dlc = 0;
 80633b2:	4b1f      	ldr	r3, [pc, #124]	@ (8063430 <DiagService_RDBPI_ReadPeriodicIgnitionCompleteStatus+0xf8>)
 80633b4:	2200      	movs	r2, #0
 80633b6:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceResponse_Frame.frame.data0 = 0;
 80633b8:	4b1d      	ldr	r3, [pc, #116]	@ (8063430 <DiagService_RDBPI_ReadPeriodicIgnitionCompleteStatus+0xf8>)
 80633ba:	2200      	movs	r2, #0
 80633bc:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceResponse_Frame.frame.data1 = 0;
 80633be:	4b1c      	ldr	r3, [pc, #112]	@ (8063430 <DiagService_RDBPI_ReadPeriodicIgnitionCompleteStatus+0xf8>)
 80633c0:	2200      	movs	r2, #0
 80633c2:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceResponse_Frame.frame.data2 = 0;
 80633c4:	4b1a      	ldr	r3, [pc, #104]	@ (8063430 <DiagService_RDBPI_ReadPeriodicIgnitionCompleteStatus+0xf8>)
 80633c6:	2200      	movs	r2, #0
 80633c8:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceResponse_Frame.frame.data3 = 0;
 80633ca:	4b19      	ldr	r3, [pc, #100]	@ (8063430 <DiagService_RDBPI_ReadPeriodicIgnitionCompleteStatus+0xf8>)
 80633cc:	2200      	movs	r2, #0
 80633ce:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceResponse_Frame.frame.data4 = 0;
 80633d0:	4b17      	ldr	r3, [pc, #92]	@ (8063430 <DiagService_RDBPI_ReadPeriodicIgnitionCompleteStatus+0xf8>)
 80633d2:	2200      	movs	r2, #0
 80633d4:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceResponse_Frame.frame.data5 = 0;
 80633d6:	4b16      	ldr	r3, [pc, #88]	@ (8063430 <DiagService_RDBPI_ReadPeriodicIgnitionCompleteStatus+0xf8>)
 80633d8:	2200      	movs	r2, #0
 80633da:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceResponse_Frame.frame.data6 = 0;
 80633dc:	4b14      	ldr	r3, [pc, #80]	@ (8063430 <DiagService_RDBPI_ReadPeriodicIgnitionCompleteStatus+0xf8>)
 80633de:	2200      	movs	r2, #0
 80633e0:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceResponse_Frame.frame.data7 = 0;
 80633e2:	4b13      	ldr	r3, [pc, #76]	@ (8063430 <DiagService_RDBPI_ReadPeriodicIgnitionCompleteStatus+0xf8>)
 80633e4:	2200      	movs	r2, #0
 80633e6:	741a      	strb	r2, [r3, #16]
	Dcm_DiagServiceRequest_Frame.frame.idType = 0;
 80633e8:	4b12      	ldr	r3, [pc, #72]	@ (8063434 <DiagService_RDBPI_ReadPeriodicIgnitionCompleteStatus+0xfc>)
 80633ea:	2200      	movs	r2, #0
 80633ec:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceRequest_Frame.frame.id = 0;
 80633ee:	4b11      	ldr	r3, [pc, #68]	@ (8063434 <DiagService_RDBPI_ReadPeriodicIgnitionCompleteStatus+0xfc>)
 80633f0:	2200      	movs	r2, #0
 80633f2:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceRequest_Frame.frame.dlc = 0;
 80633f4:	4b0f      	ldr	r3, [pc, #60]	@ (8063434 <DiagService_RDBPI_ReadPeriodicIgnitionCompleteStatus+0xfc>)
 80633f6:	2200      	movs	r2, #0
 80633f8:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceRequest_Frame.frame.data0 = 0;
 80633fa:	4b0e      	ldr	r3, [pc, #56]	@ (8063434 <DiagService_RDBPI_ReadPeriodicIgnitionCompleteStatus+0xfc>)
 80633fc:	2200      	movs	r2, #0
 80633fe:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceRequest_Frame.frame.data1 = 0;
 8063400:	4b0c      	ldr	r3, [pc, #48]	@ (8063434 <DiagService_RDBPI_ReadPeriodicIgnitionCompleteStatus+0xfc>)
 8063402:	2200      	movs	r2, #0
 8063404:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceRequest_Frame.frame.data2 = 0;
 8063406:	4b0b      	ldr	r3, [pc, #44]	@ (8063434 <DiagService_RDBPI_ReadPeriodicIgnitionCompleteStatus+0xfc>)
 8063408:	2200      	movs	r2, #0
 806340a:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceRequest_Frame.frame.data3 = 0;
 806340c:	4b09      	ldr	r3, [pc, #36]	@ (8063434 <DiagService_RDBPI_ReadPeriodicIgnitionCompleteStatus+0xfc>)
 806340e:	2200      	movs	r2, #0
 8063410:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceRequest_Frame.frame.data4 = 0;
 8063412:	4b08      	ldr	r3, [pc, #32]	@ (8063434 <DiagService_RDBPI_ReadPeriodicIgnitionCompleteStatus+0xfc>)
 8063414:	2200      	movs	r2, #0
 8063416:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceRequest_Frame.frame.data5 = 0;
 8063418:	4b06      	ldr	r3, [pc, #24]	@ (8063434 <DiagService_RDBPI_ReadPeriodicIgnitionCompleteStatus+0xfc>)
 806341a:	2200      	movs	r2, #0
 806341c:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceRequest_Frame.frame.data6 = 0;
 806341e:	4b05      	ldr	r3, [pc, #20]	@ (8063434 <DiagService_RDBPI_ReadPeriodicIgnitionCompleteStatus+0xfc>)
 8063420:	2200      	movs	r2, #0
 8063422:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceRequest_Frame.frame.data7 = 0;
 8063424:	4b03      	ldr	r3, [pc, #12]	@ (8063434 <DiagService_RDBPI_ReadPeriodicIgnitionCompleteStatus+0xfc>)
 8063426:	2200      	movs	r2, #0
 8063428:	741a      	strb	r2, [r3, #16]
}
 806342a:	bf00      	nop
 806342c:	bd80      	pop	{r7, pc}
 806342e:	bf00      	nop
 8063430:	20010374 	.word	0x20010374
 8063434:	20010388 	.word	0x20010388
 8063438:	200102cc 	.word	0x200102cc
 806343c:	200102d8 	.word	0x200102d8
 8063440:	2001021c 	.word	0x2001021c

08063444 <DiagService_RDBPI_ReadPeriodicGearboxSelectorCompleteStatus>:
static void DiagService_RDBPI_ReadPeriodicGearboxSelectorCompleteStatus(void)
{
 8063444:	b580      	push	{r7, lr}
 8063446:	af00      	add	r7, sp, #0
	Dcm_DiagServiceResponse_Frame.frame.dlc = 8;
 8063448:	4b3d      	ldr	r3, [pc, #244]	@ (8063540 <DiagService_RDBPI_ReadPeriodicGearboxSelectorCompleteStatus+0xfc>)
 806344a:	2208      	movs	r2, #8
 806344c:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceResponse_Frame.frame.id = 0x701;
 806344e:	4b3c      	ldr	r3, [pc, #240]	@ (8063540 <DiagService_RDBPI_ReadPeriodicGearboxSelectorCompleteStatus+0xfc>)
 8063450:	f240 7201 	movw	r2, #1793	@ 0x701
 8063454:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceResponse_Frame.frame.idType = 1;
 8063456:	4b3a      	ldr	r3, [pc, #232]	@ (8063540 <DiagService_RDBPI_ReadPeriodicGearboxSelectorCompleteStatus+0xfc>)
 8063458:	2201      	movs	r2, #1
 806345a:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceResponse_Frame.frame.data0 = 0x07;
 806345c:	4b38      	ldr	r3, [pc, #224]	@ (8063540 <DiagService_RDBPI_ReadPeriodicGearboxSelectorCompleteStatus+0xfc>)
 806345e:	2207      	movs	r2, #7
 8063460:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceResponse_Frame.frame.data1 = 0x6A;
 8063462:	4b37      	ldr	r3, [pc, #220]	@ (8063540 <DiagService_RDBPI_ReadPeriodicGearboxSelectorCompleteStatus+0xfc>)
 8063464:	226a      	movs	r2, #106	@ 0x6a
 8063466:	729a      	strb	r2, [r3, #10]
	if(Dcm_DiagServiceRequest_Frame.frame.data2 != 0x04) Dcm_DiagServiceResponse_Frame.frame.data2 = 0x01;
 8063468:	4b36      	ldr	r3, [pc, #216]	@ (8063544 <DiagService_RDBPI_ReadPeriodicGearboxSelectorCompleteStatus+0x100>)
 806346a:	7adb      	ldrb	r3, [r3, #11]
 806346c:	2b04      	cmp	r3, #4
 806346e:	d003      	beq.n	8063478 <DiagService_RDBPI_ReadPeriodicGearboxSelectorCompleteStatus+0x34>
 8063470:	4b33      	ldr	r3, [pc, #204]	@ (8063540 <DiagService_RDBPI_ReadPeriodicGearboxSelectorCompleteStatus+0xfc>)
 8063472:	2201      	movs	r2, #1
 8063474:	72da      	strb	r2, [r3, #11]
 8063476:	e006      	b.n	8063486 <DiagService_RDBPI_ReadPeriodicGearboxSelectorCompleteStatus+0x42>
	else if(Dcm_DiagServiceRequest_Frame.frame.data2 == 0x04) Dcm_DiagServiceResponse_Frame.frame.data2 = 0x04;
 8063478:	4b32      	ldr	r3, [pc, #200]	@ (8063544 <DiagService_RDBPI_ReadPeriodicGearboxSelectorCompleteStatus+0x100>)
 806347a:	7adb      	ldrb	r3, [r3, #11]
 806347c:	2b04      	cmp	r3, #4
 806347e:	d102      	bne.n	8063486 <DiagService_RDBPI_ReadPeriodicGearboxSelectorCompleteStatus+0x42>
 8063480:	4b2f      	ldr	r3, [pc, #188]	@ (8063540 <DiagService_RDBPI_ReadPeriodicGearboxSelectorCompleteStatus+0xfc>)
 8063482:	2204      	movs	r2, #4
 8063484:	72da      	strb	r2, [r3, #11]
	else
	{
		/* Do nothing. */
	}
	Dcm_DiagServiceResponse_Frame.frame.data3 = 0x01;
 8063486:	4b2e      	ldr	r3, [pc, #184]	@ (8063540 <DiagService_RDBPI_ReadPeriodicGearboxSelectorCompleteStatus+0xfc>)
 8063488:	2201      	movs	r2, #1
 806348a:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceResponse_Frame.frame.data4 = StatusList_ComOutValue[4];
 806348c:	4b2e      	ldr	r3, [pc, #184]	@ (8063548 <DiagService_RDBPI_ReadPeriodicGearboxSelectorCompleteStatus+0x104>)
 806348e:	791a      	ldrb	r2, [r3, #4]
 8063490:	4b2b      	ldr	r3, [pc, #172]	@ (8063540 <DiagService_RDBPI_ReadPeriodicGearboxSelectorCompleteStatus+0xfc>)
 8063492:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceResponse_Frame.frame.data5 = StatusList_RawValue[4];
 8063494:	4b2d      	ldr	r3, [pc, #180]	@ (806354c <DiagService_RDBPI_ReadPeriodicGearboxSelectorCompleteStatus+0x108>)
 8063496:	791a      	ldrb	r2, [r3, #4]
 8063498:	4b29      	ldr	r3, [pc, #164]	@ (8063540 <DiagService_RDBPI_ReadPeriodicGearboxSelectorCompleteStatus+0xfc>)
 806349a:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceResponse_Frame.frame.data6 = StatusList_InputStatus[4].errorStatus;
 806349c:	4b2c      	ldr	r3, [pc, #176]	@ (8063550 <DiagService_RDBPI_ReadPeriodicGearboxSelectorCompleteStatus+0x10c>)
 806349e:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 80634a2:	4b27      	ldr	r3, [pc, #156]	@ (8063540 <DiagService_RDBPI_ReadPeriodicGearboxSelectorCompleteStatus+0xfc>)
 80634a4:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceResponse_Frame.frame.data7 = StatusList_InputStatus[4].DCYStatus;
 80634a6:	4b2a      	ldr	r3, [pc, #168]	@ (8063550 <DiagService_RDBPI_ReadPeriodicGearboxSelectorCompleteStatus+0x10c>)
 80634a8:	f893 2031 	ldrb.w	r2, [r3, #49]	@ 0x31
 80634ac:	4b24      	ldr	r3, [pc, #144]	@ (8063540 <DiagService_RDBPI_ReadPeriodicGearboxSelectorCompleteStatus+0xfc>)
 80634ae:	741a      	strb	r2, [r3, #16]
	CanSpi_Transmit(&Dcm_DiagServiceResponse_Frame);
 80634b0:	4823      	ldr	r0, [pc, #140]	@ (8063540 <DiagService_RDBPI_ReadPeriodicGearboxSelectorCompleteStatus+0xfc>)
 80634b2:	f7fe faf1 	bl	8061a98 <CanSpi_Transmit>
	Dcm_DiagServiceResponse_Frame.frame.idType = 0;
 80634b6:	4b22      	ldr	r3, [pc, #136]	@ (8063540 <DiagService_RDBPI_ReadPeriodicGearboxSelectorCompleteStatus+0xfc>)
 80634b8:	2200      	movs	r2, #0
 80634ba:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceResponse_Frame.frame.id = 0;
 80634bc:	4b20      	ldr	r3, [pc, #128]	@ (8063540 <DiagService_RDBPI_ReadPeriodicGearboxSelectorCompleteStatus+0xfc>)
 80634be:	2200      	movs	r2, #0
 80634c0:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceResponse_Frame.frame.dlc = 0;
 80634c2:	4b1f      	ldr	r3, [pc, #124]	@ (8063540 <DiagService_RDBPI_ReadPeriodicGearboxSelectorCompleteStatus+0xfc>)
 80634c4:	2200      	movs	r2, #0
 80634c6:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceResponse_Frame.frame.data0 = 0;
 80634c8:	4b1d      	ldr	r3, [pc, #116]	@ (8063540 <DiagService_RDBPI_ReadPeriodicGearboxSelectorCompleteStatus+0xfc>)
 80634ca:	2200      	movs	r2, #0
 80634cc:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceResponse_Frame.frame.data1 = 0;
 80634ce:	4b1c      	ldr	r3, [pc, #112]	@ (8063540 <DiagService_RDBPI_ReadPeriodicGearboxSelectorCompleteStatus+0xfc>)
 80634d0:	2200      	movs	r2, #0
 80634d2:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceResponse_Frame.frame.data2 = 0;
 80634d4:	4b1a      	ldr	r3, [pc, #104]	@ (8063540 <DiagService_RDBPI_ReadPeriodicGearboxSelectorCompleteStatus+0xfc>)
 80634d6:	2200      	movs	r2, #0
 80634d8:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceResponse_Frame.frame.data3 = 0;
 80634da:	4b19      	ldr	r3, [pc, #100]	@ (8063540 <DiagService_RDBPI_ReadPeriodicGearboxSelectorCompleteStatus+0xfc>)
 80634dc:	2200      	movs	r2, #0
 80634de:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceResponse_Frame.frame.data4 = 0;
 80634e0:	4b17      	ldr	r3, [pc, #92]	@ (8063540 <DiagService_RDBPI_ReadPeriodicGearboxSelectorCompleteStatus+0xfc>)
 80634e2:	2200      	movs	r2, #0
 80634e4:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceResponse_Frame.frame.data5 = 0;
 80634e6:	4b16      	ldr	r3, [pc, #88]	@ (8063540 <DiagService_RDBPI_ReadPeriodicGearboxSelectorCompleteStatus+0xfc>)
 80634e8:	2200      	movs	r2, #0
 80634ea:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceResponse_Frame.frame.data6 = 0;
 80634ec:	4b14      	ldr	r3, [pc, #80]	@ (8063540 <DiagService_RDBPI_ReadPeriodicGearboxSelectorCompleteStatus+0xfc>)
 80634ee:	2200      	movs	r2, #0
 80634f0:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceResponse_Frame.frame.data7 = 0;
 80634f2:	4b13      	ldr	r3, [pc, #76]	@ (8063540 <DiagService_RDBPI_ReadPeriodicGearboxSelectorCompleteStatus+0xfc>)
 80634f4:	2200      	movs	r2, #0
 80634f6:	741a      	strb	r2, [r3, #16]
	Dcm_DiagServiceRequest_Frame.frame.idType = 0;
 80634f8:	4b12      	ldr	r3, [pc, #72]	@ (8063544 <DiagService_RDBPI_ReadPeriodicGearboxSelectorCompleteStatus+0x100>)
 80634fa:	2200      	movs	r2, #0
 80634fc:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceRequest_Frame.frame.id = 0;
 80634fe:	4b11      	ldr	r3, [pc, #68]	@ (8063544 <DiagService_RDBPI_ReadPeriodicGearboxSelectorCompleteStatus+0x100>)
 8063500:	2200      	movs	r2, #0
 8063502:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceRequest_Frame.frame.dlc = 0;
 8063504:	4b0f      	ldr	r3, [pc, #60]	@ (8063544 <DiagService_RDBPI_ReadPeriodicGearboxSelectorCompleteStatus+0x100>)
 8063506:	2200      	movs	r2, #0
 8063508:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceRequest_Frame.frame.data0 = 0;
 806350a:	4b0e      	ldr	r3, [pc, #56]	@ (8063544 <DiagService_RDBPI_ReadPeriodicGearboxSelectorCompleteStatus+0x100>)
 806350c:	2200      	movs	r2, #0
 806350e:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceRequest_Frame.frame.data1 = 0;
 8063510:	4b0c      	ldr	r3, [pc, #48]	@ (8063544 <DiagService_RDBPI_ReadPeriodicGearboxSelectorCompleteStatus+0x100>)
 8063512:	2200      	movs	r2, #0
 8063514:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceRequest_Frame.frame.data2 = 0;
 8063516:	4b0b      	ldr	r3, [pc, #44]	@ (8063544 <DiagService_RDBPI_ReadPeriodicGearboxSelectorCompleteStatus+0x100>)
 8063518:	2200      	movs	r2, #0
 806351a:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceRequest_Frame.frame.data3 = 0;
 806351c:	4b09      	ldr	r3, [pc, #36]	@ (8063544 <DiagService_RDBPI_ReadPeriodicGearboxSelectorCompleteStatus+0x100>)
 806351e:	2200      	movs	r2, #0
 8063520:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceRequest_Frame.frame.data4 = 0;
 8063522:	4b08      	ldr	r3, [pc, #32]	@ (8063544 <DiagService_RDBPI_ReadPeriodicGearboxSelectorCompleteStatus+0x100>)
 8063524:	2200      	movs	r2, #0
 8063526:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceRequest_Frame.frame.data5 = 0;
 8063528:	4b06      	ldr	r3, [pc, #24]	@ (8063544 <DiagService_RDBPI_ReadPeriodicGearboxSelectorCompleteStatus+0x100>)
 806352a:	2200      	movs	r2, #0
 806352c:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceRequest_Frame.frame.data6 = 0;
 806352e:	4b05      	ldr	r3, [pc, #20]	@ (8063544 <DiagService_RDBPI_ReadPeriodicGearboxSelectorCompleteStatus+0x100>)
 8063530:	2200      	movs	r2, #0
 8063532:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceRequest_Frame.frame.data7 = 0;
 8063534:	4b03      	ldr	r3, [pc, #12]	@ (8063544 <DiagService_RDBPI_ReadPeriodicGearboxSelectorCompleteStatus+0x100>)
 8063536:	2200      	movs	r2, #0
 8063538:	741a      	strb	r2, [r3, #16]
}
 806353a:	bf00      	nop
 806353c:	bd80      	pop	{r7, pc}
 806353e:	bf00      	nop
 8063540:	20010374 	.word	0x20010374
 8063544:	20010388 	.word	0x20010388
 8063548:	200102cc 	.word	0x200102cc
 806354c:	200102d8 	.word	0x200102d8
 8063550:	2001021c 	.word	0x2001021c

08063554 <DiagService_RDBPI_ReadPeriodicPowerSteeringCompleteStatus>:
static void DiagService_RDBPI_ReadPeriodicPowerSteeringCompleteStatus(void)
{
 8063554:	b580      	push	{r7, lr}
 8063556:	af00      	add	r7, sp, #0
	Dcm_DiagServiceResponse_Frame.frame.dlc = 8;
 8063558:	4b3d      	ldr	r3, [pc, #244]	@ (8063650 <DiagService_RDBPI_ReadPeriodicPowerSteeringCompleteStatus+0xfc>)
 806355a:	2208      	movs	r2, #8
 806355c:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceResponse_Frame.frame.id = 0x701;
 806355e:	4b3c      	ldr	r3, [pc, #240]	@ (8063650 <DiagService_RDBPI_ReadPeriodicPowerSteeringCompleteStatus+0xfc>)
 8063560:	f240 7201 	movw	r2, #1793	@ 0x701
 8063564:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceResponse_Frame.frame.idType = 1;
 8063566:	4b3a      	ldr	r3, [pc, #232]	@ (8063650 <DiagService_RDBPI_ReadPeriodicPowerSteeringCompleteStatus+0xfc>)
 8063568:	2201      	movs	r2, #1
 806356a:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceResponse_Frame.frame.data0 = 0x07;
 806356c:	4b38      	ldr	r3, [pc, #224]	@ (8063650 <DiagService_RDBPI_ReadPeriodicPowerSteeringCompleteStatus+0xfc>)
 806356e:	2207      	movs	r2, #7
 8063570:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceResponse_Frame.frame.data1 = 0x6A;
 8063572:	4b37      	ldr	r3, [pc, #220]	@ (8063650 <DiagService_RDBPI_ReadPeriodicPowerSteeringCompleteStatus+0xfc>)
 8063574:	226a      	movs	r2, #106	@ 0x6a
 8063576:	729a      	strb	r2, [r3, #10]
	if(Dcm_DiagServiceRequest_Frame.frame.data2 != 0x04) Dcm_DiagServiceResponse_Frame.frame.data2 = 0x01;
 8063578:	4b36      	ldr	r3, [pc, #216]	@ (8063654 <DiagService_RDBPI_ReadPeriodicPowerSteeringCompleteStatus+0x100>)
 806357a:	7adb      	ldrb	r3, [r3, #11]
 806357c:	2b04      	cmp	r3, #4
 806357e:	d003      	beq.n	8063588 <DiagService_RDBPI_ReadPeriodicPowerSteeringCompleteStatus+0x34>
 8063580:	4b33      	ldr	r3, [pc, #204]	@ (8063650 <DiagService_RDBPI_ReadPeriodicPowerSteeringCompleteStatus+0xfc>)
 8063582:	2201      	movs	r2, #1
 8063584:	72da      	strb	r2, [r3, #11]
 8063586:	e006      	b.n	8063596 <DiagService_RDBPI_ReadPeriodicPowerSteeringCompleteStatus+0x42>
	else if(Dcm_DiagServiceRequest_Frame.frame.data2 == 0x04) Dcm_DiagServiceResponse_Frame.frame.data2 = 0x04;
 8063588:	4b32      	ldr	r3, [pc, #200]	@ (8063654 <DiagService_RDBPI_ReadPeriodicPowerSteeringCompleteStatus+0x100>)
 806358a:	7adb      	ldrb	r3, [r3, #11]
 806358c:	2b04      	cmp	r3, #4
 806358e:	d102      	bne.n	8063596 <DiagService_RDBPI_ReadPeriodicPowerSteeringCompleteStatus+0x42>
 8063590:	4b2f      	ldr	r3, [pc, #188]	@ (8063650 <DiagService_RDBPI_ReadPeriodicPowerSteeringCompleteStatus+0xfc>)
 8063592:	2204      	movs	r2, #4
 8063594:	72da      	strb	r2, [r3, #11]
	else
	{
		/* Do nothing. */
	}
	Dcm_DiagServiceResponse_Frame.frame.data3 = 0x02;
 8063596:	4b2e      	ldr	r3, [pc, #184]	@ (8063650 <DiagService_RDBPI_ReadPeriodicPowerSteeringCompleteStatus+0xfc>)
 8063598:	2202      	movs	r2, #2
 806359a:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceResponse_Frame.frame.data4 = StatusList_ComOutValue[3];
 806359c:	4b2e      	ldr	r3, [pc, #184]	@ (8063658 <DiagService_RDBPI_ReadPeriodicPowerSteeringCompleteStatus+0x104>)
 806359e:	78da      	ldrb	r2, [r3, #3]
 80635a0:	4b2b      	ldr	r3, [pc, #172]	@ (8063650 <DiagService_RDBPI_ReadPeriodicPowerSteeringCompleteStatus+0xfc>)
 80635a2:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceResponse_Frame.frame.data5 = StatusList_RawValue[3];
 80635a4:	4b2d      	ldr	r3, [pc, #180]	@ (806365c <DiagService_RDBPI_ReadPeriodicPowerSteeringCompleteStatus+0x108>)
 80635a6:	78da      	ldrb	r2, [r3, #3]
 80635a8:	4b29      	ldr	r3, [pc, #164]	@ (8063650 <DiagService_RDBPI_ReadPeriodicPowerSteeringCompleteStatus+0xfc>)
 80635aa:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceResponse_Frame.frame.data6 = StatusList_InputStatus[3].errorStatus;
 80635ac:	4b2c      	ldr	r3, [pc, #176]	@ (8063660 <DiagService_RDBPI_ReadPeriodicPowerSteeringCompleteStatus+0x10c>)
 80635ae:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 80635b2:	4b27      	ldr	r3, [pc, #156]	@ (8063650 <DiagService_RDBPI_ReadPeriodicPowerSteeringCompleteStatus+0xfc>)
 80635b4:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceResponse_Frame.frame.data7 = StatusList_InputStatus[3].DCYStatus;
 80635b6:	4b2a      	ldr	r3, [pc, #168]	@ (8063660 <DiagService_RDBPI_ReadPeriodicPowerSteeringCompleteStatus+0x10c>)
 80635b8:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 80635bc:	4b24      	ldr	r3, [pc, #144]	@ (8063650 <DiagService_RDBPI_ReadPeriodicPowerSteeringCompleteStatus+0xfc>)
 80635be:	741a      	strb	r2, [r3, #16]
	CanSpi_Transmit(&Dcm_DiagServiceResponse_Frame);
 80635c0:	4823      	ldr	r0, [pc, #140]	@ (8063650 <DiagService_RDBPI_ReadPeriodicPowerSteeringCompleteStatus+0xfc>)
 80635c2:	f7fe fa69 	bl	8061a98 <CanSpi_Transmit>
	Dcm_DiagServiceResponse_Frame.frame.idType = 0;
 80635c6:	4b22      	ldr	r3, [pc, #136]	@ (8063650 <DiagService_RDBPI_ReadPeriodicPowerSteeringCompleteStatus+0xfc>)
 80635c8:	2200      	movs	r2, #0
 80635ca:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceResponse_Frame.frame.id = 0;
 80635cc:	4b20      	ldr	r3, [pc, #128]	@ (8063650 <DiagService_RDBPI_ReadPeriodicPowerSteeringCompleteStatus+0xfc>)
 80635ce:	2200      	movs	r2, #0
 80635d0:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceResponse_Frame.frame.dlc = 0;
 80635d2:	4b1f      	ldr	r3, [pc, #124]	@ (8063650 <DiagService_RDBPI_ReadPeriodicPowerSteeringCompleteStatus+0xfc>)
 80635d4:	2200      	movs	r2, #0
 80635d6:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceResponse_Frame.frame.data0 = 0;
 80635d8:	4b1d      	ldr	r3, [pc, #116]	@ (8063650 <DiagService_RDBPI_ReadPeriodicPowerSteeringCompleteStatus+0xfc>)
 80635da:	2200      	movs	r2, #0
 80635dc:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceResponse_Frame.frame.data1 = 0;
 80635de:	4b1c      	ldr	r3, [pc, #112]	@ (8063650 <DiagService_RDBPI_ReadPeriodicPowerSteeringCompleteStatus+0xfc>)
 80635e0:	2200      	movs	r2, #0
 80635e2:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceResponse_Frame.frame.data2 = 0;
 80635e4:	4b1a      	ldr	r3, [pc, #104]	@ (8063650 <DiagService_RDBPI_ReadPeriodicPowerSteeringCompleteStatus+0xfc>)
 80635e6:	2200      	movs	r2, #0
 80635e8:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceResponse_Frame.frame.data3 = 0;
 80635ea:	4b19      	ldr	r3, [pc, #100]	@ (8063650 <DiagService_RDBPI_ReadPeriodicPowerSteeringCompleteStatus+0xfc>)
 80635ec:	2200      	movs	r2, #0
 80635ee:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceResponse_Frame.frame.data4 = 0;
 80635f0:	4b17      	ldr	r3, [pc, #92]	@ (8063650 <DiagService_RDBPI_ReadPeriodicPowerSteeringCompleteStatus+0xfc>)
 80635f2:	2200      	movs	r2, #0
 80635f4:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceResponse_Frame.frame.data5 = 0;
 80635f6:	4b16      	ldr	r3, [pc, #88]	@ (8063650 <DiagService_RDBPI_ReadPeriodicPowerSteeringCompleteStatus+0xfc>)
 80635f8:	2200      	movs	r2, #0
 80635fa:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceResponse_Frame.frame.data6 = 0;
 80635fc:	4b14      	ldr	r3, [pc, #80]	@ (8063650 <DiagService_RDBPI_ReadPeriodicPowerSteeringCompleteStatus+0xfc>)
 80635fe:	2200      	movs	r2, #0
 8063600:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceResponse_Frame.frame.data7 = 0;
 8063602:	4b13      	ldr	r3, [pc, #76]	@ (8063650 <DiagService_RDBPI_ReadPeriodicPowerSteeringCompleteStatus+0xfc>)
 8063604:	2200      	movs	r2, #0
 8063606:	741a      	strb	r2, [r3, #16]
	Dcm_DiagServiceRequest_Frame.frame.idType = 0;
 8063608:	4b12      	ldr	r3, [pc, #72]	@ (8063654 <DiagService_RDBPI_ReadPeriodicPowerSteeringCompleteStatus+0x100>)
 806360a:	2200      	movs	r2, #0
 806360c:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceRequest_Frame.frame.id = 0;
 806360e:	4b11      	ldr	r3, [pc, #68]	@ (8063654 <DiagService_RDBPI_ReadPeriodicPowerSteeringCompleteStatus+0x100>)
 8063610:	2200      	movs	r2, #0
 8063612:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceRequest_Frame.frame.dlc = 0;
 8063614:	4b0f      	ldr	r3, [pc, #60]	@ (8063654 <DiagService_RDBPI_ReadPeriodicPowerSteeringCompleteStatus+0x100>)
 8063616:	2200      	movs	r2, #0
 8063618:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceRequest_Frame.frame.data0 = 0;
 806361a:	4b0e      	ldr	r3, [pc, #56]	@ (8063654 <DiagService_RDBPI_ReadPeriodicPowerSteeringCompleteStatus+0x100>)
 806361c:	2200      	movs	r2, #0
 806361e:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceRequest_Frame.frame.data1 = 0;
 8063620:	4b0c      	ldr	r3, [pc, #48]	@ (8063654 <DiagService_RDBPI_ReadPeriodicPowerSteeringCompleteStatus+0x100>)
 8063622:	2200      	movs	r2, #0
 8063624:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceRequest_Frame.frame.data2 = 0;
 8063626:	4b0b      	ldr	r3, [pc, #44]	@ (8063654 <DiagService_RDBPI_ReadPeriodicPowerSteeringCompleteStatus+0x100>)
 8063628:	2200      	movs	r2, #0
 806362a:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceRequest_Frame.frame.data3 = 0;
 806362c:	4b09      	ldr	r3, [pc, #36]	@ (8063654 <DiagService_RDBPI_ReadPeriodicPowerSteeringCompleteStatus+0x100>)
 806362e:	2200      	movs	r2, #0
 8063630:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceRequest_Frame.frame.data4 = 0;
 8063632:	4b08      	ldr	r3, [pc, #32]	@ (8063654 <DiagService_RDBPI_ReadPeriodicPowerSteeringCompleteStatus+0x100>)
 8063634:	2200      	movs	r2, #0
 8063636:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceRequest_Frame.frame.data5 = 0;
 8063638:	4b06      	ldr	r3, [pc, #24]	@ (8063654 <DiagService_RDBPI_ReadPeriodicPowerSteeringCompleteStatus+0x100>)
 806363a:	2200      	movs	r2, #0
 806363c:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceRequest_Frame.frame.data6 = 0;
 806363e:	4b05      	ldr	r3, [pc, #20]	@ (8063654 <DiagService_RDBPI_ReadPeriodicPowerSteeringCompleteStatus+0x100>)
 8063640:	2200      	movs	r2, #0
 8063642:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceRequest_Frame.frame.data7 = 0;
 8063644:	4b03      	ldr	r3, [pc, #12]	@ (8063654 <DiagService_RDBPI_ReadPeriodicPowerSteeringCompleteStatus+0x100>)
 8063646:	2200      	movs	r2, #0
 8063648:	741a      	strb	r2, [r3, #16]
}
 806364a:	bf00      	nop
 806364c:	bd80      	pop	{r7, pc}
 806364e:	bf00      	nop
 8063650:	20010374 	.word	0x20010374
 8063654:	20010388 	.word	0x20010388
 8063658:	200102cc 	.word	0x200102cc
 806365c:	200102d8 	.word	0x200102d8
 8063660:	2001021c 	.word	0x2001021c

08063664 <DiagService_RDBPI_ReadPeriodicAccelerationCompleteStatus>:
static void DiagService_RDBPI_ReadPeriodicAccelerationCompleteStatus(void)
{
 8063664:	b580      	push	{r7, lr}
 8063666:	af00      	add	r7, sp, #0
	Dcm_DiagServiceResponse_Frame.frame.dlc = 8;
 8063668:	4b3c      	ldr	r3, [pc, #240]	@ (806375c <DiagService_RDBPI_ReadPeriodicAccelerationCompleteStatus+0xf8>)
 806366a:	2208      	movs	r2, #8
 806366c:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceResponse_Frame.frame.id = 0x701;
 806366e:	4b3b      	ldr	r3, [pc, #236]	@ (806375c <DiagService_RDBPI_ReadPeriodicAccelerationCompleteStatus+0xf8>)
 8063670:	f240 7201 	movw	r2, #1793	@ 0x701
 8063674:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceResponse_Frame.frame.idType = 1;
 8063676:	4b39      	ldr	r3, [pc, #228]	@ (806375c <DiagService_RDBPI_ReadPeriodicAccelerationCompleteStatus+0xf8>)
 8063678:	2201      	movs	r2, #1
 806367a:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceResponse_Frame.frame.data0 = 0x07;
 806367c:	4b37      	ldr	r3, [pc, #220]	@ (806375c <DiagService_RDBPI_ReadPeriodicAccelerationCompleteStatus+0xf8>)
 806367e:	2207      	movs	r2, #7
 8063680:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceResponse_Frame.frame.data1 = 0x6A;
 8063682:	4b36      	ldr	r3, [pc, #216]	@ (806375c <DiagService_RDBPI_ReadPeriodicAccelerationCompleteStatus+0xf8>)
 8063684:	226a      	movs	r2, #106	@ 0x6a
 8063686:	729a      	strb	r2, [r3, #10]
	if(Dcm_DiagServiceRequest_Frame.frame.data2 != 0x04) Dcm_DiagServiceResponse_Frame.frame.data2 = 0x01;
 8063688:	4b35      	ldr	r3, [pc, #212]	@ (8063760 <DiagService_RDBPI_ReadPeriodicAccelerationCompleteStatus+0xfc>)
 806368a:	7adb      	ldrb	r3, [r3, #11]
 806368c:	2b04      	cmp	r3, #4
 806368e:	d003      	beq.n	8063698 <DiagService_RDBPI_ReadPeriodicAccelerationCompleteStatus+0x34>
 8063690:	4b32      	ldr	r3, [pc, #200]	@ (806375c <DiagService_RDBPI_ReadPeriodicAccelerationCompleteStatus+0xf8>)
 8063692:	2201      	movs	r2, #1
 8063694:	72da      	strb	r2, [r3, #11]
 8063696:	e006      	b.n	80636a6 <DiagService_RDBPI_ReadPeriodicAccelerationCompleteStatus+0x42>
	else if(Dcm_DiagServiceRequest_Frame.frame.data2 == 0x04) Dcm_DiagServiceResponse_Frame.frame.data2 = 0x04;
 8063698:	4b31      	ldr	r3, [pc, #196]	@ (8063760 <DiagService_RDBPI_ReadPeriodicAccelerationCompleteStatus+0xfc>)
 806369a:	7adb      	ldrb	r3, [r3, #11]
 806369c:	2b04      	cmp	r3, #4
 806369e:	d102      	bne.n	80636a6 <DiagService_RDBPI_ReadPeriodicAccelerationCompleteStatus+0x42>
 80636a0:	4b2e      	ldr	r3, [pc, #184]	@ (806375c <DiagService_RDBPI_ReadPeriodicAccelerationCompleteStatus+0xf8>)
 80636a2:	2204      	movs	r2, #4
 80636a4:	72da      	strb	r2, [r3, #11]
	else
	{
		/* Do nothing. */
	}
	Dcm_DiagServiceResponse_Frame.frame.data3 = 0x03;
 80636a6:	4b2d      	ldr	r3, [pc, #180]	@ (806375c <DiagService_RDBPI_ReadPeriodicAccelerationCompleteStatus+0xf8>)
 80636a8:	2203      	movs	r2, #3
 80636aa:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceResponse_Frame.frame.data4 = StatusList_ComOutValue[1];
 80636ac:	4b2d      	ldr	r3, [pc, #180]	@ (8063764 <DiagService_RDBPI_ReadPeriodicAccelerationCompleteStatus+0x100>)
 80636ae:	785a      	ldrb	r2, [r3, #1]
 80636b0:	4b2a      	ldr	r3, [pc, #168]	@ (806375c <DiagService_RDBPI_ReadPeriodicAccelerationCompleteStatus+0xf8>)
 80636b2:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceResponse_Frame.frame.data5 = StatusList_RawValue[1];
 80636b4:	4b2c      	ldr	r3, [pc, #176]	@ (8063768 <DiagService_RDBPI_ReadPeriodicAccelerationCompleteStatus+0x104>)
 80636b6:	785a      	ldrb	r2, [r3, #1]
 80636b8:	4b28      	ldr	r3, [pc, #160]	@ (806375c <DiagService_RDBPI_ReadPeriodicAccelerationCompleteStatus+0xf8>)
 80636ba:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceResponse_Frame.frame.data6 = StatusList_InputStatus[1].errorStatus;
 80636bc:	4b2b      	ldr	r3, [pc, #172]	@ (806376c <DiagService_RDBPI_ReadPeriodicAccelerationCompleteStatus+0x108>)
 80636be:	7b1a      	ldrb	r2, [r3, #12]
 80636c0:	4b26      	ldr	r3, [pc, #152]	@ (806375c <DiagService_RDBPI_ReadPeriodicAccelerationCompleteStatus+0xf8>)
 80636c2:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceResponse_Frame.frame.data7 = StatusList_InputStatus[1].DCYStatus;
 80636c4:	4b29      	ldr	r3, [pc, #164]	@ (806376c <DiagService_RDBPI_ReadPeriodicAccelerationCompleteStatus+0x108>)
 80636c6:	7b5a      	ldrb	r2, [r3, #13]
 80636c8:	4b24      	ldr	r3, [pc, #144]	@ (806375c <DiagService_RDBPI_ReadPeriodicAccelerationCompleteStatus+0xf8>)
 80636ca:	741a      	strb	r2, [r3, #16]
	CanSpi_Transmit(&Dcm_DiagServiceResponse_Frame);
 80636cc:	4823      	ldr	r0, [pc, #140]	@ (806375c <DiagService_RDBPI_ReadPeriodicAccelerationCompleteStatus+0xf8>)
 80636ce:	f7fe f9e3 	bl	8061a98 <CanSpi_Transmit>
	Dcm_DiagServiceResponse_Frame.frame.idType = 0;
 80636d2:	4b22      	ldr	r3, [pc, #136]	@ (806375c <DiagService_RDBPI_ReadPeriodicAccelerationCompleteStatus+0xf8>)
 80636d4:	2200      	movs	r2, #0
 80636d6:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceResponse_Frame.frame.id = 0;
 80636d8:	4b20      	ldr	r3, [pc, #128]	@ (806375c <DiagService_RDBPI_ReadPeriodicAccelerationCompleteStatus+0xf8>)
 80636da:	2200      	movs	r2, #0
 80636dc:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceResponse_Frame.frame.dlc = 0;
 80636de:	4b1f      	ldr	r3, [pc, #124]	@ (806375c <DiagService_RDBPI_ReadPeriodicAccelerationCompleteStatus+0xf8>)
 80636e0:	2200      	movs	r2, #0
 80636e2:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceResponse_Frame.frame.data0 = 0;
 80636e4:	4b1d      	ldr	r3, [pc, #116]	@ (806375c <DiagService_RDBPI_ReadPeriodicAccelerationCompleteStatus+0xf8>)
 80636e6:	2200      	movs	r2, #0
 80636e8:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceResponse_Frame.frame.data1 = 0;
 80636ea:	4b1c      	ldr	r3, [pc, #112]	@ (806375c <DiagService_RDBPI_ReadPeriodicAccelerationCompleteStatus+0xf8>)
 80636ec:	2200      	movs	r2, #0
 80636ee:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceResponse_Frame.frame.data2 = 0;
 80636f0:	4b1a      	ldr	r3, [pc, #104]	@ (806375c <DiagService_RDBPI_ReadPeriodicAccelerationCompleteStatus+0xf8>)
 80636f2:	2200      	movs	r2, #0
 80636f4:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceResponse_Frame.frame.data3 = 0;
 80636f6:	4b19      	ldr	r3, [pc, #100]	@ (806375c <DiagService_RDBPI_ReadPeriodicAccelerationCompleteStatus+0xf8>)
 80636f8:	2200      	movs	r2, #0
 80636fa:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceResponse_Frame.frame.data4 = 0;
 80636fc:	4b17      	ldr	r3, [pc, #92]	@ (806375c <DiagService_RDBPI_ReadPeriodicAccelerationCompleteStatus+0xf8>)
 80636fe:	2200      	movs	r2, #0
 8063700:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceResponse_Frame.frame.data5 = 0;
 8063702:	4b16      	ldr	r3, [pc, #88]	@ (806375c <DiagService_RDBPI_ReadPeriodicAccelerationCompleteStatus+0xf8>)
 8063704:	2200      	movs	r2, #0
 8063706:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceResponse_Frame.frame.data6 = 0;
 8063708:	4b14      	ldr	r3, [pc, #80]	@ (806375c <DiagService_RDBPI_ReadPeriodicAccelerationCompleteStatus+0xf8>)
 806370a:	2200      	movs	r2, #0
 806370c:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceResponse_Frame.frame.data7 = 0;
 806370e:	4b13      	ldr	r3, [pc, #76]	@ (806375c <DiagService_RDBPI_ReadPeriodicAccelerationCompleteStatus+0xf8>)
 8063710:	2200      	movs	r2, #0
 8063712:	741a      	strb	r2, [r3, #16]
	Dcm_DiagServiceRequest_Frame.frame.idType = 0;
 8063714:	4b12      	ldr	r3, [pc, #72]	@ (8063760 <DiagService_RDBPI_ReadPeriodicAccelerationCompleteStatus+0xfc>)
 8063716:	2200      	movs	r2, #0
 8063718:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceRequest_Frame.frame.id = 0;
 806371a:	4b11      	ldr	r3, [pc, #68]	@ (8063760 <DiagService_RDBPI_ReadPeriodicAccelerationCompleteStatus+0xfc>)
 806371c:	2200      	movs	r2, #0
 806371e:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceRequest_Frame.frame.dlc = 0;
 8063720:	4b0f      	ldr	r3, [pc, #60]	@ (8063760 <DiagService_RDBPI_ReadPeriodicAccelerationCompleteStatus+0xfc>)
 8063722:	2200      	movs	r2, #0
 8063724:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceRequest_Frame.frame.data0 = 0;
 8063726:	4b0e      	ldr	r3, [pc, #56]	@ (8063760 <DiagService_RDBPI_ReadPeriodicAccelerationCompleteStatus+0xfc>)
 8063728:	2200      	movs	r2, #0
 806372a:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceRequest_Frame.frame.data1 = 0;
 806372c:	4b0c      	ldr	r3, [pc, #48]	@ (8063760 <DiagService_RDBPI_ReadPeriodicAccelerationCompleteStatus+0xfc>)
 806372e:	2200      	movs	r2, #0
 8063730:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceRequest_Frame.frame.data2 = 0;
 8063732:	4b0b      	ldr	r3, [pc, #44]	@ (8063760 <DiagService_RDBPI_ReadPeriodicAccelerationCompleteStatus+0xfc>)
 8063734:	2200      	movs	r2, #0
 8063736:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceRequest_Frame.frame.data3 = 0;
 8063738:	4b09      	ldr	r3, [pc, #36]	@ (8063760 <DiagService_RDBPI_ReadPeriodicAccelerationCompleteStatus+0xfc>)
 806373a:	2200      	movs	r2, #0
 806373c:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceRequest_Frame.frame.data4 = 0;
 806373e:	4b08      	ldr	r3, [pc, #32]	@ (8063760 <DiagService_RDBPI_ReadPeriodicAccelerationCompleteStatus+0xfc>)
 8063740:	2200      	movs	r2, #0
 8063742:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceRequest_Frame.frame.data5 = 0;
 8063744:	4b06      	ldr	r3, [pc, #24]	@ (8063760 <DiagService_RDBPI_ReadPeriodicAccelerationCompleteStatus+0xfc>)
 8063746:	2200      	movs	r2, #0
 8063748:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceRequest_Frame.frame.data6 = 0;
 806374a:	4b05      	ldr	r3, [pc, #20]	@ (8063760 <DiagService_RDBPI_ReadPeriodicAccelerationCompleteStatus+0xfc>)
 806374c:	2200      	movs	r2, #0
 806374e:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceRequest_Frame.frame.data7 = 0;
 8063750:	4b03      	ldr	r3, [pc, #12]	@ (8063760 <DiagService_RDBPI_ReadPeriodicAccelerationCompleteStatus+0xfc>)
 8063752:	2200      	movs	r2, #0
 8063754:	741a      	strb	r2, [r3, #16]
}
 8063756:	bf00      	nop
 8063758:	bd80      	pop	{r7, pc}
 806375a:	bf00      	nop
 806375c:	20010374 	.word	0x20010374
 8063760:	20010388 	.word	0x20010388
 8063764:	200102cc 	.word	0x200102cc
 8063768:	200102d8 	.word	0x200102d8
 806376c:	2001021c 	.word	0x2001021c

08063770 <DiagService_RDBPI_ReadPeriodicBrakeCompleteStatus>:
static void DiagService_RDBPI_ReadPeriodicBrakeCompleteStatus(void)
{
 8063770:	b580      	push	{r7, lr}
 8063772:	af00      	add	r7, sp, #0
	Dcm_DiagServiceResponse_Frame.frame.dlc = 8;
 8063774:	4b3c      	ldr	r3, [pc, #240]	@ (8063868 <DiagService_RDBPI_ReadPeriodicBrakeCompleteStatus+0xf8>)
 8063776:	2208      	movs	r2, #8
 8063778:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceResponse_Frame.frame.id = 0x701;
 806377a:	4b3b      	ldr	r3, [pc, #236]	@ (8063868 <DiagService_RDBPI_ReadPeriodicBrakeCompleteStatus+0xf8>)
 806377c:	f240 7201 	movw	r2, #1793	@ 0x701
 8063780:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceResponse_Frame.frame.idType = 1;
 8063782:	4b39      	ldr	r3, [pc, #228]	@ (8063868 <DiagService_RDBPI_ReadPeriodicBrakeCompleteStatus+0xf8>)
 8063784:	2201      	movs	r2, #1
 8063786:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceResponse_Frame.frame.data0 = 0x07;
 8063788:	4b37      	ldr	r3, [pc, #220]	@ (8063868 <DiagService_RDBPI_ReadPeriodicBrakeCompleteStatus+0xf8>)
 806378a:	2207      	movs	r2, #7
 806378c:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceResponse_Frame.frame.data1 = 0x6A;
 806378e:	4b36      	ldr	r3, [pc, #216]	@ (8063868 <DiagService_RDBPI_ReadPeriodicBrakeCompleteStatus+0xf8>)
 8063790:	226a      	movs	r2, #106	@ 0x6a
 8063792:	729a      	strb	r2, [r3, #10]
	if(Dcm_DiagServiceRequest_Frame.frame.data2 != 0x04) Dcm_DiagServiceResponse_Frame.frame.data2 = 0x01;
 8063794:	4b35      	ldr	r3, [pc, #212]	@ (806386c <DiagService_RDBPI_ReadPeriodicBrakeCompleteStatus+0xfc>)
 8063796:	7adb      	ldrb	r3, [r3, #11]
 8063798:	2b04      	cmp	r3, #4
 806379a:	d003      	beq.n	80637a4 <DiagService_RDBPI_ReadPeriodicBrakeCompleteStatus+0x34>
 806379c:	4b32      	ldr	r3, [pc, #200]	@ (8063868 <DiagService_RDBPI_ReadPeriodicBrakeCompleteStatus+0xf8>)
 806379e:	2201      	movs	r2, #1
 80637a0:	72da      	strb	r2, [r3, #11]
 80637a2:	e006      	b.n	80637b2 <DiagService_RDBPI_ReadPeriodicBrakeCompleteStatus+0x42>
	else if(Dcm_DiagServiceRequest_Frame.frame.data2 == 0x04) Dcm_DiagServiceResponse_Frame.frame.data2 = 0x04;
 80637a4:	4b31      	ldr	r3, [pc, #196]	@ (806386c <DiagService_RDBPI_ReadPeriodicBrakeCompleteStatus+0xfc>)
 80637a6:	7adb      	ldrb	r3, [r3, #11]
 80637a8:	2b04      	cmp	r3, #4
 80637aa:	d102      	bne.n	80637b2 <DiagService_RDBPI_ReadPeriodicBrakeCompleteStatus+0x42>
 80637ac:	4b2e      	ldr	r3, [pc, #184]	@ (8063868 <DiagService_RDBPI_ReadPeriodicBrakeCompleteStatus+0xf8>)
 80637ae:	2204      	movs	r2, #4
 80637b0:	72da      	strb	r2, [r3, #11]
	else
	{
		/* Do nothing. */
	}
	Dcm_DiagServiceResponse_Frame.frame.data3 = 0x04;
 80637b2:	4b2d      	ldr	r3, [pc, #180]	@ (8063868 <DiagService_RDBPI_ReadPeriodicBrakeCompleteStatus+0xf8>)
 80637b4:	2204      	movs	r2, #4
 80637b6:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceResponse_Frame.frame.data4 = StatusList_ComOutValue[2];
 80637b8:	4b2d      	ldr	r3, [pc, #180]	@ (8063870 <DiagService_RDBPI_ReadPeriodicBrakeCompleteStatus+0x100>)
 80637ba:	789a      	ldrb	r2, [r3, #2]
 80637bc:	4b2a      	ldr	r3, [pc, #168]	@ (8063868 <DiagService_RDBPI_ReadPeriodicBrakeCompleteStatus+0xf8>)
 80637be:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceResponse_Frame.frame.data5 = StatusList_RawValue[2];
 80637c0:	4b2c      	ldr	r3, [pc, #176]	@ (8063874 <DiagService_RDBPI_ReadPeriodicBrakeCompleteStatus+0x104>)
 80637c2:	789a      	ldrb	r2, [r3, #2]
 80637c4:	4b28      	ldr	r3, [pc, #160]	@ (8063868 <DiagService_RDBPI_ReadPeriodicBrakeCompleteStatus+0xf8>)
 80637c6:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceResponse_Frame.frame.data6 = StatusList_InputStatus[2].errorStatus;
 80637c8:	4b2b      	ldr	r3, [pc, #172]	@ (8063878 <DiagService_RDBPI_ReadPeriodicBrakeCompleteStatus+0x108>)
 80637ca:	7e1a      	ldrb	r2, [r3, #24]
 80637cc:	4b26      	ldr	r3, [pc, #152]	@ (8063868 <DiagService_RDBPI_ReadPeriodicBrakeCompleteStatus+0xf8>)
 80637ce:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceResponse_Frame.frame.data7 = StatusList_InputStatus[2].DCYStatus;
 80637d0:	4b29      	ldr	r3, [pc, #164]	@ (8063878 <DiagService_RDBPI_ReadPeriodicBrakeCompleteStatus+0x108>)
 80637d2:	7e5a      	ldrb	r2, [r3, #25]
 80637d4:	4b24      	ldr	r3, [pc, #144]	@ (8063868 <DiagService_RDBPI_ReadPeriodicBrakeCompleteStatus+0xf8>)
 80637d6:	741a      	strb	r2, [r3, #16]
	CanSpi_Transmit(&Dcm_DiagServiceResponse_Frame);
 80637d8:	4823      	ldr	r0, [pc, #140]	@ (8063868 <DiagService_RDBPI_ReadPeriodicBrakeCompleteStatus+0xf8>)
 80637da:	f7fe f95d 	bl	8061a98 <CanSpi_Transmit>
	Dcm_DiagServiceResponse_Frame.frame.idType = 0;
 80637de:	4b22      	ldr	r3, [pc, #136]	@ (8063868 <DiagService_RDBPI_ReadPeriodicBrakeCompleteStatus+0xf8>)
 80637e0:	2200      	movs	r2, #0
 80637e2:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceResponse_Frame.frame.id = 0;
 80637e4:	4b20      	ldr	r3, [pc, #128]	@ (8063868 <DiagService_RDBPI_ReadPeriodicBrakeCompleteStatus+0xf8>)
 80637e6:	2200      	movs	r2, #0
 80637e8:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceResponse_Frame.frame.dlc = 0;
 80637ea:	4b1f      	ldr	r3, [pc, #124]	@ (8063868 <DiagService_RDBPI_ReadPeriodicBrakeCompleteStatus+0xf8>)
 80637ec:	2200      	movs	r2, #0
 80637ee:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceResponse_Frame.frame.data0 = 0;
 80637f0:	4b1d      	ldr	r3, [pc, #116]	@ (8063868 <DiagService_RDBPI_ReadPeriodicBrakeCompleteStatus+0xf8>)
 80637f2:	2200      	movs	r2, #0
 80637f4:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceResponse_Frame.frame.data1 = 0;
 80637f6:	4b1c      	ldr	r3, [pc, #112]	@ (8063868 <DiagService_RDBPI_ReadPeriodicBrakeCompleteStatus+0xf8>)
 80637f8:	2200      	movs	r2, #0
 80637fa:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceResponse_Frame.frame.data2 = 0;
 80637fc:	4b1a      	ldr	r3, [pc, #104]	@ (8063868 <DiagService_RDBPI_ReadPeriodicBrakeCompleteStatus+0xf8>)
 80637fe:	2200      	movs	r2, #0
 8063800:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceResponse_Frame.frame.data3 = 0;
 8063802:	4b19      	ldr	r3, [pc, #100]	@ (8063868 <DiagService_RDBPI_ReadPeriodicBrakeCompleteStatus+0xf8>)
 8063804:	2200      	movs	r2, #0
 8063806:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceResponse_Frame.frame.data4 = 0;
 8063808:	4b17      	ldr	r3, [pc, #92]	@ (8063868 <DiagService_RDBPI_ReadPeriodicBrakeCompleteStatus+0xf8>)
 806380a:	2200      	movs	r2, #0
 806380c:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceResponse_Frame.frame.data5 = 0;
 806380e:	4b16      	ldr	r3, [pc, #88]	@ (8063868 <DiagService_RDBPI_ReadPeriodicBrakeCompleteStatus+0xf8>)
 8063810:	2200      	movs	r2, #0
 8063812:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceResponse_Frame.frame.data6 = 0;
 8063814:	4b14      	ldr	r3, [pc, #80]	@ (8063868 <DiagService_RDBPI_ReadPeriodicBrakeCompleteStatus+0xf8>)
 8063816:	2200      	movs	r2, #0
 8063818:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceResponse_Frame.frame.data7 = 0;
 806381a:	4b13      	ldr	r3, [pc, #76]	@ (8063868 <DiagService_RDBPI_ReadPeriodicBrakeCompleteStatus+0xf8>)
 806381c:	2200      	movs	r2, #0
 806381e:	741a      	strb	r2, [r3, #16]
	Dcm_DiagServiceRequest_Frame.frame.idType = 0;
 8063820:	4b12      	ldr	r3, [pc, #72]	@ (806386c <DiagService_RDBPI_ReadPeriodicBrakeCompleteStatus+0xfc>)
 8063822:	2200      	movs	r2, #0
 8063824:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceRequest_Frame.frame.id = 0;
 8063826:	4b11      	ldr	r3, [pc, #68]	@ (806386c <DiagService_RDBPI_ReadPeriodicBrakeCompleteStatus+0xfc>)
 8063828:	2200      	movs	r2, #0
 806382a:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceRequest_Frame.frame.dlc = 0;
 806382c:	4b0f      	ldr	r3, [pc, #60]	@ (806386c <DiagService_RDBPI_ReadPeriodicBrakeCompleteStatus+0xfc>)
 806382e:	2200      	movs	r2, #0
 8063830:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceRequest_Frame.frame.data0 = 0;
 8063832:	4b0e      	ldr	r3, [pc, #56]	@ (806386c <DiagService_RDBPI_ReadPeriodicBrakeCompleteStatus+0xfc>)
 8063834:	2200      	movs	r2, #0
 8063836:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceRequest_Frame.frame.data1 = 0;
 8063838:	4b0c      	ldr	r3, [pc, #48]	@ (806386c <DiagService_RDBPI_ReadPeriodicBrakeCompleteStatus+0xfc>)
 806383a:	2200      	movs	r2, #0
 806383c:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceRequest_Frame.frame.data2 = 0;
 806383e:	4b0b      	ldr	r3, [pc, #44]	@ (806386c <DiagService_RDBPI_ReadPeriodicBrakeCompleteStatus+0xfc>)
 8063840:	2200      	movs	r2, #0
 8063842:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceRequest_Frame.frame.data3 = 0;
 8063844:	4b09      	ldr	r3, [pc, #36]	@ (806386c <DiagService_RDBPI_ReadPeriodicBrakeCompleteStatus+0xfc>)
 8063846:	2200      	movs	r2, #0
 8063848:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceRequest_Frame.frame.data4 = 0;
 806384a:	4b08      	ldr	r3, [pc, #32]	@ (806386c <DiagService_RDBPI_ReadPeriodicBrakeCompleteStatus+0xfc>)
 806384c:	2200      	movs	r2, #0
 806384e:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceRequest_Frame.frame.data5 = 0;
 8063850:	4b06      	ldr	r3, [pc, #24]	@ (806386c <DiagService_RDBPI_ReadPeriodicBrakeCompleteStatus+0xfc>)
 8063852:	2200      	movs	r2, #0
 8063854:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceRequest_Frame.frame.data6 = 0;
 8063856:	4b05      	ldr	r3, [pc, #20]	@ (806386c <DiagService_RDBPI_ReadPeriodicBrakeCompleteStatus+0xfc>)
 8063858:	2200      	movs	r2, #0
 806385a:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceRequest_Frame.frame.data7 = 0;
 806385c:	4b03      	ldr	r3, [pc, #12]	@ (806386c <DiagService_RDBPI_ReadPeriodicBrakeCompleteStatus+0xfc>)
 806385e:	2200      	movs	r2, #0
 8063860:	741a      	strb	r2, [r3, #16]
}
 8063862:	bf00      	nop
 8063864:	bd80      	pop	{r7, pc}
 8063866:	bf00      	nop
 8063868:	20010374 	.word	0x20010374
 806386c:	20010388 	.word	0x20010388
 8063870:	200102cc 	.word	0x200102cc
 8063874:	200102d8 	.word	0x200102d8
 8063878:	2001021c 	.word	0x2001021c

0806387c <DiagService_RDBPI_ReadPeriodicDoorLockActuatorStatus>:
static void DiagService_RDBPI_ReadPeriodicDoorLockActuatorStatus(void)
{
 806387c:	b580      	push	{r7, lr}
 806387e:	af00      	add	r7, sp, #0
	Dcm_DiagServiceResponse_Frame.frame.dlc = 8;
 8063880:	4b3c      	ldr	r3, [pc, #240]	@ (8063974 <DiagService_RDBPI_ReadPeriodicDoorLockActuatorStatus+0xf8>)
 8063882:	2208      	movs	r2, #8
 8063884:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceResponse_Frame.frame.id = 0x701;
 8063886:	4b3b      	ldr	r3, [pc, #236]	@ (8063974 <DiagService_RDBPI_ReadPeriodicDoorLockActuatorStatus+0xf8>)
 8063888:	f240 7201 	movw	r2, #1793	@ 0x701
 806388c:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceResponse_Frame.frame.idType = 1;
 806388e:	4b39      	ldr	r3, [pc, #228]	@ (8063974 <DiagService_RDBPI_ReadPeriodicDoorLockActuatorStatus+0xf8>)
 8063890:	2201      	movs	r2, #1
 8063892:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceResponse_Frame.frame.data0 = 0x07;
 8063894:	4b37      	ldr	r3, [pc, #220]	@ (8063974 <DiagService_RDBPI_ReadPeriodicDoorLockActuatorStatus+0xf8>)
 8063896:	2207      	movs	r2, #7
 8063898:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceResponse_Frame.frame.data1 = 0x6A;
 806389a:	4b36      	ldr	r3, [pc, #216]	@ (8063974 <DiagService_RDBPI_ReadPeriodicDoorLockActuatorStatus+0xf8>)
 806389c:	226a      	movs	r2, #106	@ 0x6a
 806389e:	729a      	strb	r2, [r3, #10]
	if(Dcm_DiagServiceRequest_Frame.frame.data2 != 0x04) Dcm_DiagServiceResponse_Frame.frame.data2 = 0x01;
 80638a0:	4b35      	ldr	r3, [pc, #212]	@ (8063978 <DiagService_RDBPI_ReadPeriodicDoorLockActuatorStatus+0xfc>)
 80638a2:	7adb      	ldrb	r3, [r3, #11]
 80638a4:	2b04      	cmp	r3, #4
 80638a6:	d003      	beq.n	80638b0 <DiagService_RDBPI_ReadPeriodicDoorLockActuatorStatus+0x34>
 80638a8:	4b32      	ldr	r3, [pc, #200]	@ (8063974 <DiagService_RDBPI_ReadPeriodicDoorLockActuatorStatus+0xf8>)
 80638aa:	2201      	movs	r2, #1
 80638ac:	72da      	strb	r2, [r3, #11]
 80638ae:	e006      	b.n	80638be <DiagService_RDBPI_ReadPeriodicDoorLockActuatorStatus+0x42>
	else if(Dcm_DiagServiceRequest_Frame.frame.data2 == 0x04) Dcm_DiagServiceResponse_Frame.frame.data2 = 0x04;
 80638b0:	4b31      	ldr	r3, [pc, #196]	@ (8063978 <DiagService_RDBPI_ReadPeriodicDoorLockActuatorStatus+0xfc>)
 80638b2:	7adb      	ldrb	r3, [r3, #11]
 80638b4:	2b04      	cmp	r3, #4
 80638b6:	d102      	bne.n	80638be <DiagService_RDBPI_ReadPeriodicDoorLockActuatorStatus+0x42>
 80638b8:	4b2e      	ldr	r3, [pc, #184]	@ (8063974 <DiagService_RDBPI_ReadPeriodicDoorLockActuatorStatus+0xf8>)
 80638ba:	2204      	movs	r2, #4
 80638bc:	72da      	strb	r2, [r3, #11]
	else
	{
		/* Do nothing. */
	}
	Dcm_DiagServiceResponse_Frame.frame.data3 = 0x05;
 80638be:	4b2d      	ldr	r3, [pc, #180]	@ (8063974 <DiagService_RDBPI_ReadPeriodicDoorLockActuatorStatus+0xf8>)
 80638c0:	2205      	movs	r2, #5
 80638c2:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceResponse_Frame.frame.data4 = CmdList_RawValue[2];
 80638c4:	4b2d      	ldr	r3, [pc, #180]	@ (806397c <DiagService_RDBPI_ReadPeriodicDoorLockActuatorStatus+0x100>)
 80638c6:	789a      	ldrb	r2, [r3, #2]
 80638c8:	4b2a      	ldr	r3, [pc, #168]	@ (8063974 <DiagService_RDBPI_ReadPeriodicDoorLockActuatorStatus+0xf8>)
 80638ca:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceResponse_Frame.frame.data5 = CmdList_RawValue[3];
 80638cc:	4b2b      	ldr	r3, [pc, #172]	@ (806397c <DiagService_RDBPI_ReadPeriodicDoorLockActuatorStatus+0x100>)
 80638ce:	78da      	ldrb	r2, [r3, #3]
 80638d0:	4b28      	ldr	r3, [pc, #160]	@ (8063974 <DiagService_RDBPI_ReadPeriodicDoorLockActuatorStatus+0xf8>)
 80638d2:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceResponse_Frame.frame.data6 = CmdList_ActualValue[2];
 80638d4:	4b2a      	ldr	r3, [pc, #168]	@ (8063980 <DiagService_RDBPI_ReadPeriodicDoorLockActuatorStatus+0x104>)
 80638d6:	789a      	ldrb	r2, [r3, #2]
 80638d8:	4b26      	ldr	r3, [pc, #152]	@ (8063974 <DiagService_RDBPI_ReadPeriodicDoorLockActuatorStatus+0xf8>)
 80638da:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceResponse_Frame.frame.data7 = CmdList_ActualValue[3];
 80638dc:	4b28      	ldr	r3, [pc, #160]	@ (8063980 <DiagService_RDBPI_ReadPeriodicDoorLockActuatorStatus+0x104>)
 80638de:	78da      	ldrb	r2, [r3, #3]
 80638e0:	4b24      	ldr	r3, [pc, #144]	@ (8063974 <DiagService_RDBPI_ReadPeriodicDoorLockActuatorStatus+0xf8>)
 80638e2:	741a      	strb	r2, [r3, #16]
	CanSpi_Transmit(&Dcm_DiagServiceResponse_Frame);
 80638e4:	4823      	ldr	r0, [pc, #140]	@ (8063974 <DiagService_RDBPI_ReadPeriodicDoorLockActuatorStatus+0xf8>)
 80638e6:	f7fe f8d7 	bl	8061a98 <CanSpi_Transmit>
	Dcm_DiagServiceResponse_Frame.frame.idType = 0;
 80638ea:	4b22      	ldr	r3, [pc, #136]	@ (8063974 <DiagService_RDBPI_ReadPeriodicDoorLockActuatorStatus+0xf8>)
 80638ec:	2200      	movs	r2, #0
 80638ee:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceResponse_Frame.frame.id = 0;
 80638f0:	4b20      	ldr	r3, [pc, #128]	@ (8063974 <DiagService_RDBPI_ReadPeriodicDoorLockActuatorStatus+0xf8>)
 80638f2:	2200      	movs	r2, #0
 80638f4:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceResponse_Frame.frame.dlc = 0;
 80638f6:	4b1f      	ldr	r3, [pc, #124]	@ (8063974 <DiagService_RDBPI_ReadPeriodicDoorLockActuatorStatus+0xf8>)
 80638f8:	2200      	movs	r2, #0
 80638fa:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceResponse_Frame.frame.data0 = 0;
 80638fc:	4b1d      	ldr	r3, [pc, #116]	@ (8063974 <DiagService_RDBPI_ReadPeriodicDoorLockActuatorStatus+0xf8>)
 80638fe:	2200      	movs	r2, #0
 8063900:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceResponse_Frame.frame.data1 = 0;
 8063902:	4b1c      	ldr	r3, [pc, #112]	@ (8063974 <DiagService_RDBPI_ReadPeriodicDoorLockActuatorStatus+0xf8>)
 8063904:	2200      	movs	r2, #0
 8063906:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceResponse_Frame.frame.data2 = 0;
 8063908:	4b1a      	ldr	r3, [pc, #104]	@ (8063974 <DiagService_RDBPI_ReadPeriodicDoorLockActuatorStatus+0xf8>)
 806390a:	2200      	movs	r2, #0
 806390c:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceResponse_Frame.frame.data3 = 0;
 806390e:	4b19      	ldr	r3, [pc, #100]	@ (8063974 <DiagService_RDBPI_ReadPeriodicDoorLockActuatorStatus+0xf8>)
 8063910:	2200      	movs	r2, #0
 8063912:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceResponse_Frame.frame.data4 = 0;
 8063914:	4b17      	ldr	r3, [pc, #92]	@ (8063974 <DiagService_RDBPI_ReadPeriodicDoorLockActuatorStatus+0xf8>)
 8063916:	2200      	movs	r2, #0
 8063918:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceResponse_Frame.frame.data5 = 0;
 806391a:	4b16      	ldr	r3, [pc, #88]	@ (8063974 <DiagService_RDBPI_ReadPeriodicDoorLockActuatorStatus+0xf8>)
 806391c:	2200      	movs	r2, #0
 806391e:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceResponse_Frame.frame.data6 = 0;
 8063920:	4b14      	ldr	r3, [pc, #80]	@ (8063974 <DiagService_RDBPI_ReadPeriodicDoorLockActuatorStatus+0xf8>)
 8063922:	2200      	movs	r2, #0
 8063924:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceResponse_Frame.frame.data7 = 0;
 8063926:	4b13      	ldr	r3, [pc, #76]	@ (8063974 <DiagService_RDBPI_ReadPeriodicDoorLockActuatorStatus+0xf8>)
 8063928:	2200      	movs	r2, #0
 806392a:	741a      	strb	r2, [r3, #16]
	Dcm_DiagServiceRequest_Frame.frame.idType = 0;
 806392c:	4b12      	ldr	r3, [pc, #72]	@ (8063978 <DiagService_RDBPI_ReadPeriodicDoorLockActuatorStatus+0xfc>)
 806392e:	2200      	movs	r2, #0
 8063930:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceRequest_Frame.frame.id = 0;
 8063932:	4b11      	ldr	r3, [pc, #68]	@ (8063978 <DiagService_RDBPI_ReadPeriodicDoorLockActuatorStatus+0xfc>)
 8063934:	2200      	movs	r2, #0
 8063936:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceRequest_Frame.frame.dlc = 0;
 8063938:	4b0f      	ldr	r3, [pc, #60]	@ (8063978 <DiagService_RDBPI_ReadPeriodicDoorLockActuatorStatus+0xfc>)
 806393a:	2200      	movs	r2, #0
 806393c:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceRequest_Frame.frame.data0 = 0;
 806393e:	4b0e      	ldr	r3, [pc, #56]	@ (8063978 <DiagService_RDBPI_ReadPeriodicDoorLockActuatorStatus+0xfc>)
 8063940:	2200      	movs	r2, #0
 8063942:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceRequest_Frame.frame.data1 = 0;
 8063944:	4b0c      	ldr	r3, [pc, #48]	@ (8063978 <DiagService_RDBPI_ReadPeriodicDoorLockActuatorStatus+0xfc>)
 8063946:	2200      	movs	r2, #0
 8063948:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceRequest_Frame.frame.data2 = 0;
 806394a:	4b0b      	ldr	r3, [pc, #44]	@ (8063978 <DiagService_RDBPI_ReadPeriodicDoorLockActuatorStatus+0xfc>)
 806394c:	2200      	movs	r2, #0
 806394e:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceRequest_Frame.frame.data3 = 0;
 8063950:	4b09      	ldr	r3, [pc, #36]	@ (8063978 <DiagService_RDBPI_ReadPeriodicDoorLockActuatorStatus+0xfc>)
 8063952:	2200      	movs	r2, #0
 8063954:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceRequest_Frame.frame.data4 = 0;
 8063956:	4b08      	ldr	r3, [pc, #32]	@ (8063978 <DiagService_RDBPI_ReadPeriodicDoorLockActuatorStatus+0xfc>)
 8063958:	2200      	movs	r2, #0
 806395a:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceRequest_Frame.frame.data5 = 0;
 806395c:	4b06      	ldr	r3, [pc, #24]	@ (8063978 <DiagService_RDBPI_ReadPeriodicDoorLockActuatorStatus+0xfc>)
 806395e:	2200      	movs	r2, #0
 8063960:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceRequest_Frame.frame.data6 = 0;
 8063962:	4b05      	ldr	r3, [pc, #20]	@ (8063978 <DiagService_RDBPI_ReadPeriodicDoorLockActuatorStatus+0xfc>)
 8063964:	2200      	movs	r2, #0
 8063966:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceRequest_Frame.frame.data7 = 0;
 8063968:	4b03      	ldr	r3, [pc, #12]	@ (8063978 <DiagService_RDBPI_ReadPeriodicDoorLockActuatorStatus+0xfc>)
 806396a:	2200      	movs	r2, #0
 806396c:	741a      	strb	r2, [r3, #16]
}
 806396e:	bf00      	nop
 8063970:	bd80      	pop	{r7, pc}
 8063972:	bf00      	nop
 8063974:	20010374 	.word	0x20010374
 8063978:	20010388 	.word	0x20010388
 806397c:	200101a4 	.word	0x200101a4
 8063980:	200101ac 	.word	0x200101ac

08063984 <DiagService_RDBPI_ReadPeriodicWindshieldWiperActuatorStatus>:
static void DiagService_RDBPI_ReadPeriodicWindshieldWiperActuatorStatus(void)
{
 8063984:	b580      	push	{r7, lr}
 8063986:	af00      	add	r7, sp, #0
	Dcm_DiagServiceResponse_Frame.frame.dlc = 8;
 8063988:	4b3c      	ldr	r3, [pc, #240]	@ (8063a7c <DiagService_RDBPI_ReadPeriodicWindshieldWiperActuatorStatus+0xf8>)
 806398a:	2208      	movs	r2, #8
 806398c:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceResponse_Frame.frame.id = 0x701;
 806398e:	4b3b      	ldr	r3, [pc, #236]	@ (8063a7c <DiagService_RDBPI_ReadPeriodicWindshieldWiperActuatorStatus+0xf8>)
 8063990:	f240 7201 	movw	r2, #1793	@ 0x701
 8063994:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceResponse_Frame.frame.idType = 1;
 8063996:	4b39      	ldr	r3, [pc, #228]	@ (8063a7c <DiagService_RDBPI_ReadPeriodicWindshieldWiperActuatorStatus+0xf8>)
 8063998:	2201      	movs	r2, #1
 806399a:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceResponse_Frame.frame.data0 = 0x07;
 806399c:	4b37      	ldr	r3, [pc, #220]	@ (8063a7c <DiagService_RDBPI_ReadPeriodicWindshieldWiperActuatorStatus+0xf8>)
 806399e:	2207      	movs	r2, #7
 80639a0:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceResponse_Frame.frame.data1 = 0x6A;
 80639a2:	4b36      	ldr	r3, [pc, #216]	@ (8063a7c <DiagService_RDBPI_ReadPeriodicWindshieldWiperActuatorStatus+0xf8>)
 80639a4:	226a      	movs	r2, #106	@ 0x6a
 80639a6:	729a      	strb	r2, [r3, #10]
	if(Dcm_DiagServiceRequest_Frame.frame.data2 != 0x04) Dcm_DiagServiceResponse_Frame.frame.data2 = 0x01;
 80639a8:	4b35      	ldr	r3, [pc, #212]	@ (8063a80 <DiagService_RDBPI_ReadPeriodicWindshieldWiperActuatorStatus+0xfc>)
 80639aa:	7adb      	ldrb	r3, [r3, #11]
 80639ac:	2b04      	cmp	r3, #4
 80639ae:	d003      	beq.n	80639b8 <DiagService_RDBPI_ReadPeriodicWindshieldWiperActuatorStatus+0x34>
 80639b0:	4b32      	ldr	r3, [pc, #200]	@ (8063a7c <DiagService_RDBPI_ReadPeriodicWindshieldWiperActuatorStatus+0xf8>)
 80639b2:	2201      	movs	r2, #1
 80639b4:	72da      	strb	r2, [r3, #11]
 80639b6:	e006      	b.n	80639c6 <DiagService_RDBPI_ReadPeriodicWindshieldWiperActuatorStatus+0x42>
	else if(Dcm_DiagServiceRequest_Frame.frame.data2 == 0x04) Dcm_DiagServiceResponse_Frame.frame.data2 = 0x04;
 80639b8:	4b31      	ldr	r3, [pc, #196]	@ (8063a80 <DiagService_RDBPI_ReadPeriodicWindshieldWiperActuatorStatus+0xfc>)
 80639ba:	7adb      	ldrb	r3, [r3, #11]
 80639bc:	2b04      	cmp	r3, #4
 80639be:	d102      	bne.n	80639c6 <DiagService_RDBPI_ReadPeriodicWindshieldWiperActuatorStatus+0x42>
 80639c0:	4b2e      	ldr	r3, [pc, #184]	@ (8063a7c <DiagService_RDBPI_ReadPeriodicWindshieldWiperActuatorStatus+0xf8>)
 80639c2:	2204      	movs	r2, #4
 80639c4:	72da      	strb	r2, [r3, #11]
	else
	{
		/* Do nothing. */
	}
	Dcm_DiagServiceResponse_Frame.frame.data3 = 0x06;
 80639c6:	4b2d      	ldr	r3, [pc, #180]	@ (8063a7c <DiagService_RDBPI_ReadPeriodicWindshieldWiperActuatorStatus+0xf8>)
 80639c8:	2206      	movs	r2, #6
 80639ca:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceResponse_Frame.frame.data4 = CmdList_RawValue[0];
 80639cc:	4b2d      	ldr	r3, [pc, #180]	@ (8063a84 <DiagService_RDBPI_ReadPeriodicWindshieldWiperActuatorStatus+0x100>)
 80639ce:	781a      	ldrb	r2, [r3, #0]
 80639d0:	4b2a      	ldr	r3, [pc, #168]	@ (8063a7c <DiagService_RDBPI_ReadPeriodicWindshieldWiperActuatorStatus+0xf8>)
 80639d2:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceResponse_Frame.frame.data5 = CmdList_RawValue[1];
 80639d4:	4b2b      	ldr	r3, [pc, #172]	@ (8063a84 <DiagService_RDBPI_ReadPeriodicWindshieldWiperActuatorStatus+0x100>)
 80639d6:	785a      	ldrb	r2, [r3, #1]
 80639d8:	4b28      	ldr	r3, [pc, #160]	@ (8063a7c <DiagService_RDBPI_ReadPeriodicWindshieldWiperActuatorStatus+0xf8>)
 80639da:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceResponse_Frame.frame.data6 = CmdList_ActualValue[0];
 80639dc:	4b2a      	ldr	r3, [pc, #168]	@ (8063a88 <DiagService_RDBPI_ReadPeriodicWindshieldWiperActuatorStatus+0x104>)
 80639de:	781a      	ldrb	r2, [r3, #0]
 80639e0:	4b26      	ldr	r3, [pc, #152]	@ (8063a7c <DiagService_RDBPI_ReadPeriodicWindshieldWiperActuatorStatus+0xf8>)
 80639e2:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceResponse_Frame.frame.data7 = CmdList_ActualValue[1];
 80639e4:	4b28      	ldr	r3, [pc, #160]	@ (8063a88 <DiagService_RDBPI_ReadPeriodicWindshieldWiperActuatorStatus+0x104>)
 80639e6:	785a      	ldrb	r2, [r3, #1]
 80639e8:	4b24      	ldr	r3, [pc, #144]	@ (8063a7c <DiagService_RDBPI_ReadPeriodicWindshieldWiperActuatorStatus+0xf8>)
 80639ea:	741a      	strb	r2, [r3, #16]
	CanSpi_Transmit(&Dcm_DiagServiceResponse_Frame);
 80639ec:	4823      	ldr	r0, [pc, #140]	@ (8063a7c <DiagService_RDBPI_ReadPeriodicWindshieldWiperActuatorStatus+0xf8>)
 80639ee:	f7fe f853 	bl	8061a98 <CanSpi_Transmit>
	Dcm_DiagServiceResponse_Frame.frame.idType = 0;
 80639f2:	4b22      	ldr	r3, [pc, #136]	@ (8063a7c <DiagService_RDBPI_ReadPeriodicWindshieldWiperActuatorStatus+0xf8>)
 80639f4:	2200      	movs	r2, #0
 80639f6:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceResponse_Frame.frame.id = 0;
 80639f8:	4b20      	ldr	r3, [pc, #128]	@ (8063a7c <DiagService_RDBPI_ReadPeriodicWindshieldWiperActuatorStatus+0xf8>)
 80639fa:	2200      	movs	r2, #0
 80639fc:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceResponse_Frame.frame.dlc = 0;
 80639fe:	4b1f      	ldr	r3, [pc, #124]	@ (8063a7c <DiagService_RDBPI_ReadPeriodicWindshieldWiperActuatorStatus+0xf8>)
 8063a00:	2200      	movs	r2, #0
 8063a02:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceResponse_Frame.frame.data0 = 0;
 8063a04:	4b1d      	ldr	r3, [pc, #116]	@ (8063a7c <DiagService_RDBPI_ReadPeriodicWindshieldWiperActuatorStatus+0xf8>)
 8063a06:	2200      	movs	r2, #0
 8063a08:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceResponse_Frame.frame.data1 = 0;
 8063a0a:	4b1c      	ldr	r3, [pc, #112]	@ (8063a7c <DiagService_RDBPI_ReadPeriodicWindshieldWiperActuatorStatus+0xf8>)
 8063a0c:	2200      	movs	r2, #0
 8063a0e:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceResponse_Frame.frame.data2 = 0;
 8063a10:	4b1a      	ldr	r3, [pc, #104]	@ (8063a7c <DiagService_RDBPI_ReadPeriodicWindshieldWiperActuatorStatus+0xf8>)
 8063a12:	2200      	movs	r2, #0
 8063a14:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceResponse_Frame.frame.data3 = 0;
 8063a16:	4b19      	ldr	r3, [pc, #100]	@ (8063a7c <DiagService_RDBPI_ReadPeriodicWindshieldWiperActuatorStatus+0xf8>)
 8063a18:	2200      	movs	r2, #0
 8063a1a:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceResponse_Frame.frame.data4 = 0;
 8063a1c:	4b17      	ldr	r3, [pc, #92]	@ (8063a7c <DiagService_RDBPI_ReadPeriodicWindshieldWiperActuatorStatus+0xf8>)
 8063a1e:	2200      	movs	r2, #0
 8063a20:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceResponse_Frame.frame.data5 = 0;
 8063a22:	4b16      	ldr	r3, [pc, #88]	@ (8063a7c <DiagService_RDBPI_ReadPeriodicWindshieldWiperActuatorStatus+0xf8>)
 8063a24:	2200      	movs	r2, #0
 8063a26:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceResponse_Frame.frame.data6 = 0;
 8063a28:	4b14      	ldr	r3, [pc, #80]	@ (8063a7c <DiagService_RDBPI_ReadPeriodicWindshieldWiperActuatorStatus+0xf8>)
 8063a2a:	2200      	movs	r2, #0
 8063a2c:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceResponse_Frame.frame.data7 = 0;
 8063a2e:	4b13      	ldr	r3, [pc, #76]	@ (8063a7c <DiagService_RDBPI_ReadPeriodicWindshieldWiperActuatorStatus+0xf8>)
 8063a30:	2200      	movs	r2, #0
 8063a32:	741a      	strb	r2, [r3, #16]
	Dcm_DiagServiceRequest_Frame.frame.idType = 0;
 8063a34:	4b12      	ldr	r3, [pc, #72]	@ (8063a80 <DiagService_RDBPI_ReadPeriodicWindshieldWiperActuatorStatus+0xfc>)
 8063a36:	2200      	movs	r2, #0
 8063a38:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceRequest_Frame.frame.id = 0;
 8063a3a:	4b11      	ldr	r3, [pc, #68]	@ (8063a80 <DiagService_RDBPI_ReadPeriodicWindshieldWiperActuatorStatus+0xfc>)
 8063a3c:	2200      	movs	r2, #0
 8063a3e:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceRequest_Frame.frame.dlc = 0;
 8063a40:	4b0f      	ldr	r3, [pc, #60]	@ (8063a80 <DiagService_RDBPI_ReadPeriodicWindshieldWiperActuatorStatus+0xfc>)
 8063a42:	2200      	movs	r2, #0
 8063a44:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceRequest_Frame.frame.data0 = 0;
 8063a46:	4b0e      	ldr	r3, [pc, #56]	@ (8063a80 <DiagService_RDBPI_ReadPeriodicWindshieldWiperActuatorStatus+0xfc>)
 8063a48:	2200      	movs	r2, #0
 8063a4a:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceRequest_Frame.frame.data1 = 0;
 8063a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8063a80 <DiagService_RDBPI_ReadPeriodicWindshieldWiperActuatorStatus+0xfc>)
 8063a4e:	2200      	movs	r2, #0
 8063a50:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceRequest_Frame.frame.data2 = 0;
 8063a52:	4b0b      	ldr	r3, [pc, #44]	@ (8063a80 <DiagService_RDBPI_ReadPeriodicWindshieldWiperActuatorStatus+0xfc>)
 8063a54:	2200      	movs	r2, #0
 8063a56:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceRequest_Frame.frame.data3 = 0;
 8063a58:	4b09      	ldr	r3, [pc, #36]	@ (8063a80 <DiagService_RDBPI_ReadPeriodicWindshieldWiperActuatorStatus+0xfc>)
 8063a5a:	2200      	movs	r2, #0
 8063a5c:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceRequest_Frame.frame.data4 = 0;
 8063a5e:	4b08      	ldr	r3, [pc, #32]	@ (8063a80 <DiagService_RDBPI_ReadPeriodicWindshieldWiperActuatorStatus+0xfc>)
 8063a60:	2200      	movs	r2, #0
 8063a62:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceRequest_Frame.frame.data5 = 0;
 8063a64:	4b06      	ldr	r3, [pc, #24]	@ (8063a80 <DiagService_RDBPI_ReadPeriodicWindshieldWiperActuatorStatus+0xfc>)
 8063a66:	2200      	movs	r2, #0
 8063a68:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceRequest_Frame.frame.data6 = 0;
 8063a6a:	4b05      	ldr	r3, [pc, #20]	@ (8063a80 <DiagService_RDBPI_ReadPeriodicWindshieldWiperActuatorStatus+0xfc>)
 8063a6c:	2200      	movs	r2, #0
 8063a6e:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceRequest_Frame.frame.data7 = 0;
 8063a70:	4b03      	ldr	r3, [pc, #12]	@ (8063a80 <DiagService_RDBPI_ReadPeriodicWindshieldWiperActuatorStatus+0xfc>)
 8063a72:	2200      	movs	r2, #0
 8063a74:	741a      	strb	r2, [r3, #16]
}
 8063a76:	bf00      	nop
 8063a78:	bd80      	pop	{r7, pc}
 8063a7a:	bf00      	nop
 8063a7c:	20010374 	.word	0x20010374
 8063a80:	20010388 	.word	0x20010388
 8063a84:	200101a4 	.word	0x200101a4
 8063a88:	200101ac 	.word	0x200101ac

08063a8c <DiagService_RDBPI_ReadPeriodicClimaFanStatus>:
static void DiagService_RDBPI_ReadPeriodicClimaFanStatus(void)
{
 8063a8c:	b580      	push	{r7, lr}
 8063a8e:	af00      	add	r7, sp, #0
	Dcm_DiagServiceResponse_Frame.frame.dlc = 6;
 8063a90:	4b38      	ldr	r3, [pc, #224]	@ (8063b74 <DiagService_RDBPI_ReadPeriodicClimaFanStatus+0xe8>)
 8063a92:	2206      	movs	r2, #6
 8063a94:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceResponse_Frame.frame.id = 0x701;
 8063a96:	4b37      	ldr	r3, [pc, #220]	@ (8063b74 <DiagService_RDBPI_ReadPeriodicClimaFanStatus+0xe8>)
 8063a98:	f240 7201 	movw	r2, #1793	@ 0x701
 8063a9c:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceResponse_Frame.frame.idType = 1;
 8063a9e:	4b35      	ldr	r3, [pc, #212]	@ (8063b74 <DiagService_RDBPI_ReadPeriodicClimaFanStatus+0xe8>)
 8063aa0:	2201      	movs	r2, #1
 8063aa2:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceResponse_Frame.frame.data0 = 0x05;
 8063aa4:	4b33      	ldr	r3, [pc, #204]	@ (8063b74 <DiagService_RDBPI_ReadPeriodicClimaFanStatus+0xe8>)
 8063aa6:	2205      	movs	r2, #5
 8063aa8:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceResponse_Frame.frame.data1 = 0x6A;
 8063aaa:	4b32      	ldr	r3, [pc, #200]	@ (8063b74 <DiagService_RDBPI_ReadPeriodicClimaFanStatus+0xe8>)
 8063aac:	226a      	movs	r2, #106	@ 0x6a
 8063aae:	729a      	strb	r2, [r3, #10]
	if(Dcm_DiagServiceRequest_Frame.frame.data2 != 0x04) Dcm_DiagServiceResponse_Frame.frame.data2 = 0x01;
 8063ab0:	4b31      	ldr	r3, [pc, #196]	@ (8063b78 <DiagService_RDBPI_ReadPeriodicClimaFanStatus+0xec>)
 8063ab2:	7adb      	ldrb	r3, [r3, #11]
 8063ab4:	2b04      	cmp	r3, #4
 8063ab6:	d003      	beq.n	8063ac0 <DiagService_RDBPI_ReadPeriodicClimaFanStatus+0x34>
 8063ab8:	4b2e      	ldr	r3, [pc, #184]	@ (8063b74 <DiagService_RDBPI_ReadPeriodicClimaFanStatus+0xe8>)
 8063aba:	2201      	movs	r2, #1
 8063abc:	72da      	strb	r2, [r3, #11]
 8063abe:	e006      	b.n	8063ace <DiagService_RDBPI_ReadPeriodicClimaFanStatus+0x42>
	else if(Dcm_DiagServiceRequest_Frame.frame.data2 == 0x04) Dcm_DiagServiceResponse_Frame.frame.data2 = 0x04;
 8063ac0:	4b2d      	ldr	r3, [pc, #180]	@ (8063b78 <DiagService_RDBPI_ReadPeriodicClimaFanStatus+0xec>)
 8063ac2:	7adb      	ldrb	r3, [r3, #11]
 8063ac4:	2b04      	cmp	r3, #4
 8063ac6:	d102      	bne.n	8063ace <DiagService_RDBPI_ReadPeriodicClimaFanStatus+0x42>
 8063ac8:	4b2a      	ldr	r3, [pc, #168]	@ (8063b74 <DiagService_RDBPI_ReadPeriodicClimaFanStatus+0xe8>)
 8063aca:	2204      	movs	r2, #4
 8063acc:	72da      	strb	r2, [r3, #11]
	else
	{
		/* Do nothing. */
	}
	Dcm_DiagServiceResponse_Frame.frame.data3 = 0x07;
 8063ace:	4b29      	ldr	r3, [pc, #164]	@ (8063b74 <DiagService_RDBPI_ReadPeriodicClimaFanStatus+0xe8>)
 8063ad0:	2207      	movs	r2, #7
 8063ad2:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceResponse_Frame.frame.data4 = CmdList_RawValue[4];
 8063ad4:	4b29      	ldr	r3, [pc, #164]	@ (8063b7c <DiagService_RDBPI_ReadPeriodicClimaFanStatus+0xf0>)
 8063ad6:	791a      	ldrb	r2, [r3, #4]
 8063ad8:	4b26      	ldr	r3, [pc, #152]	@ (8063b74 <DiagService_RDBPI_ReadPeriodicClimaFanStatus+0xe8>)
 8063ada:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceResponse_Frame.frame.data5 = CmdList_ActualValue[4];
 8063adc:	4b28      	ldr	r3, [pc, #160]	@ (8063b80 <DiagService_RDBPI_ReadPeriodicClimaFanStatus+0xf4>)
 8063ade:	791a      	ldrb	r2, [r3, #4]
 8063ae0:	4b24      	ldr	r3, [pc, #144]	@ (8063b74 <DiagService_RDBPI_ReadPeriodicClimaFanStatus+0xe8>)
 8063ae2:	739a      	strb	r2, [r3, #14]
	CanSpi_Transmit(&Dcm_DiagServiceResponse_Frame);
 8063ae4:	4823      	ldr	r0, [pc, #140]	@ (8063b74 <DiagService_RDBPI_ReadPeriodicClimaFanStatus+0xe8>)
 8063ae6:	f7fd ffd7 	bl	8061a98 <CanSpi_Transmit>
	Dcm_DiagServiceResponse_Frame.frame.idType = 0;
 8063aea:	4b22      	ldr	r3, [pc, #136]	@ (8063b74 <DiagService_RDBPI_ReadPeriodicClimaFanStatus+0xe8>)
 8063aec:	2200      	movs	r2, #0
 8063aee:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceResponse_Frame.frame.id = 0;
 8063af0:	4b20      	ldr	r3, [pc, #128]	@ (8063b74 <DiagService_RDBPI_ReadPeriodicClimaFanStatus+0xe8>)
 8063af2:	2200      	movs	r2, #0
 8063af4:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceResponse_Frame.frame.dlc = 0;
 8063af6:	4b1f      	ldr	r3, [pc, #124]	@ (8063b74 <DiagService_RDBPI_ReadPeriodicClimaFanStatus+0xe8>)
 8063af8:	2200      	movs	r2, #0
 8063afa:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceResponse_Frame.frame.data0 = 0;
 8063afc:	4b1d      	ldr	r3, [pc, #116]	@ (8063b74 <DiagService_RDBPI_ReadPeriodicClimaFanStatus+0xe8>)
 8063afe:	2200      	movs	r2, #0
 8063b00:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceResponse_Frame.frame.data1 = 0;
 8063b02:	4b1c      	ldr	r3, [pc, #112]	@ (8063b74 <DiagService_RDBPI_ReadPeriodicClimaFanStatus+0xe8>)
 8063b04:	2200      	movs	r2, #0
 8063b06:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceResponse_Frame.frame.data2 = 0;
 8063b08:	4b1a      	ldr	r3, [pc, #104]	@ (8063b74 <DiagService_RDBPI_ReadPeriodicClimaFanStatus+0xe8>)
 8063b0a:	2200      	movs	r2, #0
 8063b0c:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceResponse_Frame.frame.data3 = 0;
 8063b0e:	4b19      	ldr	r3, [pc, #100]	@ (8063b74 <DiagService_RDBPI_ReadPeriodicClimaFanStatus+0xe8>)
 8063b10:	2200      	movs	r2, #0
 8063b12:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceResponse_Frame.frame.data4 = 0;
 8063b14:	4b17      	ldr	r3, [pc, #92]	@ (8063b74 <DiagService_RDBPI_ReadPeriodicClimaFanStatus+0xe8>)
 8063b16:	2200      	movs	r2, #0
 8063b18:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceResponse_Frame.frame.data5 = 0;
 8063b1a:	4b16      	ldr	r3, [pc, #88]	@ (8063b74 <DiagService_RDBPI_ReadPeriodicClimaFanStatus+0xe8>)
 8063b1c:	2200      	movs	r2, #0
 8063b1e:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceResponse_Frame.frame.data6 = 0;
 8063b20:	4b14      	ldr	r3, [pc, #80]	@ (8063b74 <DiagService_RDBPI_ReadPeriodicClimaFanStatus+0xe8>)
 8063b22:	2200      	movs	r2, #0
 8063b24:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceResponse_Frame.frame.data7 = 0;
 8063b26:	4b13      	ldr	r3, [pc, #76]	@ (8063b74 <DiagService_RDBPI_ReadPeriodicClimaFanStatus+0xe8>)
 8063b28:	2200      	movs	r2, #0
 8063b2a:	741a      	strb	r2, [r3, #16]
	Dcm_DiagServiceRequest_Frame.frame.idType = 0;
 8063b2c:	4b12      	ldr	r3, [pc, #72]	@ (8063b78 <DiagService_RDBPI_ReadPeriodicClimaFanStatus+0xec>)
 8063b2e:	2200      	movs	r2, #0
 8063b30:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceRequest_Frame.frame.id = 0;
 8063b32:	4b11      	ldr	r3, [pc, #68]	@ (8063b78 <DiagService_RDBPI_ReadPeriodicClimaFanStatus+0xec>)
 8063b34:	2200      	movs	r2, #0
 8063b36:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceRequest_Frame.frame.dlc = 0;
 8063b38:	4b0f      	ldr	r3, [pc, #60]	@ (8063b78 <DiagService_RDBPI_ReadPeriodicClimaFanStatus+0xec>)
 8063b3a:	2200      	movs	r2, #0
 8063b3c:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceRequest_Frame.frame.data0 = 0;
 8063b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8063b78 <DiagService_RDBPI_ReadPeriodicClimaFanStatus+0xec>)
 8063b40:	2200      	movs	r2, #0
 8063b42:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceRequest_Frame.frame.data1 = 0;
 8063b44:	4b0c      	ldr	r3, [pc, #48]	@ (8063b78 <DiagService_RDBPI_ReadPeriodicClimaFanStatus+0xec>)
 8063b46:	2200      	movs	r2, #0
 8063b48:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceRequest_Frame.frame.data2 = 0;
 8063b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8063b78 <DiagService_RDBPI_ReadPeriodicClimaFanStatus+0xec>)
 8063b4c:	2200      	movs	r2, #0
 8063b4e:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceRequest_Frame.frame.data3 = 0;
 8063b50:	4b09      	ldr	r3, [pc, #36]	@ (8063b78 <DiagService_RDBPI_ReadPeriodicClimaFanStatus+0xec>)
 8063b52:	2200      	movs	r2, #0
 8063b54:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceRequest_Frame.frame.data4 = 0;
 8063b56:	4b08      	ldr	r3, [pc, #32]	@ (8063b78 <DiagService_RDBPI_ReadPeriodicClimaFanStatus+0xec>)
 8063b58:	2200      	movs	r2, #0
 8063b5a:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceRequest_Frame.frame.data5 = 0;
 8063b5c:	4b06      	ldr	r3, [pc, #24]	@ (8063b78 <DiagService_RDBPI_ReadPeriodicClimaFanStatus+0xec>)
 8063b5e:	2200      	movs	r2, #0
 8063b60:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceRequest_Frame.frame.data6 = 0;
 8063b62:	4b05      	ldr	r3, [pc, #20]	@ (8063b78 <DiagService_RDBPI_ReadPeriodicClimaFanStatus+0xec>)
 8063b64:	2200      	movs	r2, #0
 8063b66:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceRequest_Frame.frame.data7 = 0;
 8063b68:	4b03      	ldr	r3, [pc, #12]	@ (8063b78 <DiagService_RDBPI_ReadPeriodicClimaFanStatus+0xec>)
 8063b6a:	2200      	movs	r2, #0
 8063b6c:	741a      	strb	r2, [r3, #16]
}
 8063b6e:	bf00      	nop
 8063b70:	bd80      	pop	{r7, pc}
 8063b72:	bf00      	nop
 8063b74:	20010374 	.word	0x20010374
 8063b78:	20010388 	.word	0x20010388
 8063b7c:	200101a4 	.word	0x200101a4
 8063b80:	200101ac 	.word	0x200101ac

08063b84 <DiagService_RDBPI_ReadPeriodicAQS>:
static void DiagService_RDBPI_ReadPeriodicAQS(void)
{
 8063b84:	b580      	push	{r7, lr}
 8063b86:	af00      	add	r7, sp, #0
	Dcm_DiagServiceResponse_Frame.frame.dlc = 8;
 8063b88:	4b3d      	ldr	r3, [pc, #244]	@ (8063c80 <DiagService_RDBPI_ReadPeriodicAQS+0xfc>)
 8063b8a:	2208      	movs	r2, #8
 8063b8c:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceResponse_Frame.frame.id = 0x701;
 8063b8e:	4b3c      	ldr	r3, [pc, #240]	@ (8063c80 <DiagService_RDBPI_ReadPeriodicAQS+0xfc>)
 8063b90:	f240 7201 	movw	r2, #1793	@ 0x701
 8063b94:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceResponse_Frame.frame.idType = 1;
 8063b96:	4b3a      	ldr	r3, [pc, #232]	@ (8063c80 <DiagService_RDBPI_ReadPeriodicAQS+0xfc>)
 8063b98:	2201      	movs	r2, #1
 8063b9a:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceResponse_Frame.frame.data0 = 0x07;
 8063b9c:	4b38      	ldr	r3, [pc, #224]	@ (8063c80 <DiagService_RDBPI_ReadPeriodicAQS+0xfc>)
 8063b9e:	2207      	movs	r2, #7
 8063ba0:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceResponse_Frame.frame.data1 = 0x6A;
 8063ba2:	4b37      	ldr	r3, [pc, #220]	@ (8063c80 <DiagService_RDBPI_ReadPeriodicAQS+0xfc>)
 8063ba4:	226a      	movs	r2, #106	@ 0x6a
 8063ba6:	729a      	strb	r2, [r3, #10]
	if(Dcm_DiagServiceRequest_Frame.frame.data2 != 0x04) Dcm_DiagServiceResponse_Frame.frame.data2 = 0x01;
 8063ba8:	4b36      	ldr	r3, [pc, #216]	@ (8063c84 <DiagService_RDBPI_ReadPeriodicAQS+0x100>)
 8063baa:	7adb      	ldrb	r3, [r3, #11]
 8063bac:	2b04      	cmp	r3, #4
 8063bae:	d003      	beq.n	8063bb8 <DiagService_RDBPI_ReadPeriodicAQS+0x34>
 8063bb0:	4b33      	ldr	r3, [pc, #204]	@ (8063c80 <DiagService_RDBPI_ReadPeriodicAQS+0xfc>)
 8063bb2:	2201      	movs	r2, #1
 8063bb4:	72da      	strb	r2, [r3, #11]
 8063bb6:	e006      	b.n	8063bc6 <DiagService_RDBPI_ReadPeriodicAQS+0x42>
	else if(Dcm_DiagServiceRequest_Frame.frame.data2 == 0x04) Dcm_DiagServiceResponse_Frame.frame.data2 = 0x04;
 8063bb8:	4b32      	ldr	r3, [pc, #200]	@ (8063c84 <DiagService_RDBPI_ReadPeriodicAQS+0x100>)
 8063bba:	7adb      	ldrb	r3, [r3, #11]
 8063bbc:	2b04      	cmp	r3, #4
 8063bbe:	d102      	bne.n	8063bc6 <DiagService_RDBPI_ReadPeriodicAQS+0x42>
 8063bc0:	4b2f      	ldr	r3, [pc, #188]	@ (8063c80 <DiagService_RDBPI_ReadPeriodicAQS+0xfc>)
 8063bc2:	2204      	movs	r2, #4
 8063bc4:	72da      	strb	r2, [r3, #11]
	else
	{
		/* Do nothing. */
	}
	Dcm_DiagServiceResponse_Frame.frame.data3 = 0x08;
 8063bc6:	4b2e      	ldr	r3, [pc, #184]	@ (8063c80 <DiagService_RDBPI_ReadPeriodicAQS+0xfc>)
 8063bc8:	2208      	movs	r2, #8
 8063bca:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceResponse_Frame.frame.data4 = StatusList_ComOutValue[7];
 8063bcc:	4b2e      	ldr	r3, [pc, #184]	@ (8063c88 <DiagService_RDBPI_ReadPeriodicAQS+0x104>)
 8063bce:	79da      	ldrb	r2, [r3, #7]
 8063bd0:	4b2b      	ldr	r3, [pc, #172]	@ (8063c80 <DiagService_RDBPI_ReadPeriodicAQS+0xfc>)
 8063bd2:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceResponse_Frame.frame.data5 = StatusList_RawValue[7];
 8063bd4:	4b2d      	ldr	r3, [pc, #180]	@ (8063c8c <DiagService_RDBPI_ReadPeriodicAQS+0x108>)
 8063bd6:	79da      	ldrb	r2, [r3, #7]
 8063bd8:	4b29      	ldr	r3, [pc, #164]	@ (8063c80 <DiagService_RDBPI_ReadPeriodicAQS+0xfc>)
 8063bda:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceResponse_Frame.frame.data6 = StatusList_InputStatus[7].errorStatus;
 8063bdc:	4b2c      	ldr	r3, [pc, #176]	@ (8063c90 <DiagService_RDBPI_ReadPeriodicAQS+0x10c>)
 8063bde:	f893 2054 	ldrb.w	r2, [r3, #84]	@ 0x54
 8063be2:	4b27      	ldr	r3, [pc, #156]	@ (8063c80 <DiagService_RDBPI_ReadPeriodicAQS+0xfc>)
 8063be4:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceResponse_Frame.frame.data7 = StatusList_InputStatus[7].DCYStatus;
 8063be6:	4b2a      	ldr	r3, [pc, #168]	@ (8063c90 <DiagService_RDBPI_ReadPeriodicAQS+0x10c>)
 8063be8:	f893 2055 	ldrb.w	r2, [r3, #85]	@ 0x55
 8063bec:	4b24      	ldr	r3, [pc, #144]	@ (8063c80 <DiagService_RDBPI_ReadPeriodicAQS+0xfc>)
 8063bee:	741a      	strb	r2, [r3, #16]
	CanSpi_Transmit(&Dcm_DiagServiceResponse_Frame);
 8063bf0:	4823      	ldr	r0, [pc, #140]	@ (8063c80 <DiagService_RDBPI_ReadPeriodicAQS+0xfc>)
 8063bf2:	f7fd ff51 	bl	8061a98 <CanSpi_Transmit>
	Dcm_DiagServiceResponse_Frame.frame.idType = 0;
 8063bf6:	4b22      	ldr	r3, [pc, #136]	@ (8063c80 <DiagService_RDBPI_ReadPeriodicAQS+0xfc>)
 8063bf8:	2200      	movs	r2, #0
 8063bfa:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceResponse_Frame.frame.id = 0;
 8063bfc:	4b20      	ldr	r3, [pc, #128]	@ (8063c80 <DiagService_RDBPI_ReadPeriodicAQS+0xfc>)
 8063bfe:	2200      	movs	r2, #0
 8063c00:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceResponse_Frame.frame.dlc = 0;
 8063c02:	4b1f      	ldr	r3, [pc, #124]	@ (8063c80 <DiagService_RDBPI_ReadPeriodicAQS+0xfc>)
 8063c04:	2200      	movs	r2, #0
 8063c06:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceResponse_Frame.frame.data0 = 0;
 8063c08:	4b1d      	ldr	r3, [pc, #116]	@ (8063c80 <DiagService_RDBPI_ReadPeriodicAQS+0xfc>)
 8063c0a:	2200      	movs	r2, #0
 8063c0c:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceResponse_Frame.frame.data1 = 0;
 8063c0e:	4b1c      	ldr	r3, [pc, #112]	@ (8063c80 <DiagService_RDBPI_ReadPeriodicAQS+0xfc>)
 8063c10:	2200      	movs	r2, #0
 8063c12:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceResponse_Frame.frame.data2 = 0;
 8063c14:	4b1a      	ldr	r3, [pc, #104]	@ (8063c80 <DiagService_RDBPI_ReadPeriodicAQS+0xfc>)
 8063c16:	2200      	movs	r2, #0
 8063c18:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceResponse_Frame.frame.data3 = 0;
 8063c1a:	4b19      	ldr	r3, [pc, #100]	@ (8063c80 <DiagService_RDBPI_ReadPeriodicAQS+0xfc>)
 8063c1c:	2200      	movs	r2, #0
 8063c1e:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceResponse_Frame.frame.data4 = 0;
 8063c20:	4b17      	ldr	r3, [pc, #92]	@ (8063c80 <DiagService_RDBPI_ReadPeriodicAQS+0xfc>)
 8063c22:	2200      	movs	r2, #0
 8063c24:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceResponse_Frame.frame.data5 = 0;
 8063c26:	4b16      	ldr	r3, [pc, #88]	@ (8063c80 <DiagService_RDBPI_ReadPeriodicAQS+0xfc>)
 8063c28:	2200      	movs	r2, #0
 8063c2a:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceResponse_Frame.frame.data6 = 0;
 8063c2c:	4b14      	ldr	r3, [pc, #80]	@ (8063c80 <DiagService_RDBPI_ReadPeriodicAQS+0xfc>)
 8063c2e:	2200      	movs	r2, #0
 8063c30:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceResponse_Frame.frame.data7 = 0;
 8063c32:	4b13      	ldr	r3, [pc, #76]	@ (8063c80 <DiagService_RDBPI_ReadPeriodicAQS+0xfc>)
 8063c34:	2200      	movs	r2, #0
 8063c36:	741a      	strb	r2, [r3, #16]
	Dcm_DiagServiceRequest_Frame.frame.idType = 0;
 8063c38:	4b12      	ldr	r3, [pc, #72]	@ (8063c84 <DiagService_RDBPI_ReadPeriodicAQS+0x100>)
 8063c3a:	2200      	movs	r2, #0
 8063c3c:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceRequest_Frame.frame.id = 0;
 8063c3e:	4b11      	ldr	r3, [pc, #68]	@ (8063c84 <DiagService_RDBPI_ReadPeriodicAQS+0x100>)
 8063c40:	2200      	movs	r2, #0
 8063c42:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceRequest_Frame.frame.dlc = 0;
 8063c44:	4b0f      	ldr	r3, [pc, #60]	@ (8063c84 <DiagService_RDBPI_ReadPeriodicAQS+0x100>)
 8063c46:	2200      	movs	r2, #0
 8063c48:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceRequest_Frame.frame.data0 = 0;
 8063c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8063c84 <DiagService_RDBPI_ReadPeriodicAQS+0x100>)
 8063c4c:	2200      	movs	r2, #0
 8063c4e:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceRequest_Frame.frame.data1 = 0;
 8063c50:	4b0c      	ldr	r3, [pc, #48]	@ (8063c84 <DiagService_RDBPI_ReadPeriodicAQS+0x100>)
 8063c52:	2200      	movs	r2, #0
 8063c54:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceRequest_Frame.frame.data2 = 0;
 8063c56:	4b0b      	ldr	r3, [pc, #44]	@ (8063c84 <DiagService_RDBPI_ReadPeriodicAQS+0x100>)
 8063c58:	2200      	movs	r2, #0
 8063c5a:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceRequest_Frame.frame.data3 = 0;
 8063c5c:	4b09      	ldr	r3, [pc, #36]	@ (8063c84 <DiagService_RDBPI_ReadPeriodicAQS+0x100>)
 8063c5e:	2200      	movs	r2, #0
 8063c60:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceRequest_Frame.frame.data4 = 0;
 8063c62:	4b08      	ldr	r3, [pc, #32]	@ (8063c84 <DiagService_RDBPI_ReadPeriodicAQS+0x100>)
 8063c64:	2200      	movs	r2, #0
 8063c66:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceRequest_Frame.frame.data5 = 0;
 8063c68:	4b06      	ldr	r3, [pc, #24]	@ (8063c84 <DiagService_RDBPI_ReadPeriodicAQS+0x100>)
 8063c6a:	2200      	movs	r2, #0
 8063c6c:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceRequest_Frame.frame.data6 = 0;
 8063c6e:	4b05      	ldr	r3, [pc, #20]	@ (8063c84 <DiagService_RDBPI_ReadPeriodicAQS+0x100>)
 8063c70:	2200      	movs	r2, #0
 8063c72:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceRequest_Frame.frame.data7 = 0;
 8063c74:	4b03      	ldr	r3, [pc, #12]	@ (8063c84 <DiagService_RDBPI_ReadPeriodicAQS+0x100>)
 8063c76:	2200      	movs	r2, #0
 8063c78:	741a      	strb	r2, [r3, #16]
}
 8063c7a:	bf00      	nop
 8063c7c:	bd80      	pop	{r7, pc}
 8063c7e:	bf00      	nop
 8063c80:	20010374 	.word	0x20010374
 8063c84:	20010388 	.word	0x20010388
 8063c88:	200102cc 	.word	0x200102cc
 8063c8c:	200102d8 	.word	0x200102d8
 8063c90:	2001021c 	.word	0x2001021c

08063c94 <DiagService_RDBPI_ReadPeriodicGS>:
static void DiagService_RDBPI_ReadPeriodicGS(void)
{
 8063c94:	b580      	push	{r7, lr}
 8063c96:	af00      	add	r7, sp, #0
	Dcm_DiagServiceResponse_Frame.frame.dlc = 8;
 8063c98:	4b3d      	ldr	r3, [pc, #244]	@ (8063d90 <DiagService_RDBPI_ReadPeriodicGS+0xfc>)
 8063c9a:	2208      	movs	r2, #8
 8063c9c:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceResponse_Frame.frame.id = 0x701;
 8063c9e:	4b3c      	ldr	r3, [pc, #240]	@ (8063d90 <DiagService_RDBPI_ReadPeriodicGS+0xfc>)
 8063ca0:	f240 7201 	movw	r2, #1793	@ 0x701
 8063ca4:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceResponse_Frame.frame.idType = 1;
 8063ca6:	4b3a      	ldr	r3, [pc, #232]	@ (8063d90 <DiagService_RDBPI_ReadPeriodicGS+0xfc>)
 8063ca8:	2201      	movs	r2, #1
 8063caa:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceResponse_Frame.frame.data0 = 0x07;
 8063cac:	4b38      	ldr	r3, [pc, #224]	@ (8063d90 <DiagService_RDBPI_ReadPeriodicGS+0xfc>)
 8063cae:	2207      	movs	r2, #7
 8063cb0:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceResponse_Frame.frame.data1 = 0x6A;
 8063cb2:	4b37      	ldr	r3, [pc, #220]	@ (8063d90 <DiagService_RDBPI_ReadPeriodicGS+0xfc>)
 8063cb4:	226a      	movs	r2, #106	@ 0x6a
 8063cb6:	729a      	strb	r2, [r3, #10]
	if(Dcm_DiagServiceRequest_Frame.frame.data2 != 0x04) Dcm_DiagServiceResponse_Frame.frame.data2 = 0x01;
 8063cb8:	4b36      	ldr	r3, [pc, #216]	@ (8063d94 <DiagService_RDBPI_ReadPeriodicGS+0x100>)
 8063cba:	7adb      	ldrb	r3, [r3, #11]
 8063cbc:	2b04      	cmp	r3, #4
 8063cbe:	d003      	beq.n	8063cc8 <DiagService_RDBPI_ReadPeriodicGS+0x34>
 8063cc0:	4b33      	ldr	r3, [pc, #204]	@ (8063d90 <DiagService_RDBPI_ReadPeriodicGS+0xfc>)
 8063cc2:	2201      	movs	r2, #1
 8063cc4:	72da      	strb	r2, [r3, #11]
 8063cc6:	e006      	b.n	8063cd6 <DiagService_RDBPI_ReadPeriodicGS+0x42>
	else if(Dcm_DiagServiceRequest_Frame.frame.data2 == 0x04) Dcm_DiagServiceResponse_Frame.frame.data2 = 0x04;
 8063cc8:	4b32      	ldr	r3, [pc, #200]	@ (8063d94 <DiagService_RDBPI_ReadPeriodicGS+0x100>)
 8063cca:	7adb      	ldrb	r3, [r3, #11]
 8063ccc:	2b04      	cmp	r3, #4
 8063cce:	d102      	bne.n	8063cd6 <DiagService_RDBPI_ReadPeriodicGS+0x42>
 8063cd0:	4b2f      	ldr	r3, [pc, #188]	@ (8063d90 <DiagService_RDBPI_ReadPeriodicGS+0xfc>)
 8063cd2:	2204      	movs	r2, #4
 8063cd4:	72da      	strb	r2, [r3, #11]
	else
	{
		/* Do nothing. */
	}
	Dcm_DiagServiceResponse_Frame.frame.data3 = 0x09;
 8063cd6:	4b2e      	ldr	r3, [pc, #184]	@ (8063d90 <DiagService_RDBPI_ReadPeriodicGS+0xfc>)
 8063cd8:	2209      	movs	r2, #9
 8063cda:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceResponse_Frame.frame.data4 = StatusList_ComOutValue[8];
 8063cdc:	4b2e      	ldr	r3, [pc, #184]	@ (8063d98 <DiagService_RDBPI_ReadPeriodicGS+0x104>)
 8063cde:	7a1a      	ldrb	r2, [r3, #8]
 8063ce0:	4b2b      	ldr	r3, [pc, #172]	@ (8063d90 <DiagService_RDBPI_ReadPeriodicGS+0xfc>)
 8063ce2:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceResponse_Frame.frame.data5 = StatusList_RawValue[8];
 8063ce4:	4b2d      	ldr	r3, [pc, #180]	@ (8063d9c <DiagService_RDBPI_ReadPeriodicGS+0x108>)
 8063ce6:	7a1a      	ldrb	r2, [r3, #8]
 8063ce8:	4b29      	ldr	r3, [pc, #164]	@ (8063d90 <DiagService_RDBPI_ReadPeriodicGS+0xfc>)
 8063cea:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceResponse_Frame.frame.data6 = StatusList_InputStatus[8].errorStatus;
 8063cec:	4b2c      	ldr	r3, [pc, #176]	@ (8063da0 <DiagService_RDBPI_ReadPeriodicGS+0x10c>)
 8063cee:	f893 2060 	ldrb.w	r2, [r3, #96]	@ 0x60
 8063cf2:	4b27      	ldr	r3, [pc, #156]	@ (8063d90 <DiagService_RDBPI_ReadPeriodicGS+0xfc>)
 8063cf4:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceResponse_Frame.frame.data7 = StatusList_InputStatus[8].DCYStatus;
 8063cf6:	4b2a      	ldr	r3, [pc, #168]	@ (8063da0 <DiagService_RDBPI_ReadPeriodicGS+0x10c>)
 8063cf8:	f893 2061 	ldrb.w	r2, [r3, #97]	@ 0x61
 8063cfc:	4b24      	ldr	r3, [pc, #144]	@ (8063d90 <DiagService_RDBPI_ReadPeriodicGS+0xfc>)
 8063cfe:	741a      	strb	r2, [r3, #16]
	CanSpi_Transmit(&Dcm_DiagServiceResponse_Frame);
 8063d00:	4823      	ldr	r0, [pc, #140]	@ (8063d90 <DiagService_RDBPI_ReadPeriodicGS+0xfc>)
 8063d02:	f7fd fec9 	bl	8061a98 <CanSpi_Transmit>
	Dcm_DiagServiceResponse_Frame.frame.idType = 0;
 8063d06:	4b22      	ldr	r3, [pc, #136]	@ (8063d90 <DiagService_RDBPI_ReadPeriodicGS+0xfc>)
 8063d08:	2200      	movs	r2, #0
 8063d0a:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceResponse_Frame.frame.id = 0;
 8063d0c:	4b20      	ldr	r3, [pc, #128]	@ (8063d90 <DiagService_RDBPI_ReadPeriodicGS+0xfc>)
 8063d0e:	2200      	movs	r2, #0
 8063d10:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceResponse_Frame.frame.dlc = 0;
 8063d12:	4b1f      	ldr	r3, [pc, #124]	@ (8063d90 <DiagService_RDBPI_ReadPeriodicGS+0xfc>)
 8063d14:	2200      	movs	r2, #0
 8063d16:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceResponse_Frame.frame.data0 = 0;
 8063d18:	4b1d      	ldr	r3, [pc, #116]	@ (8063d90 <DiagService_RDBPI_ReadPeriodicGS+0xfc>)
 8063d1a:	2200      	movs	r2, #0
 8063d1c:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceResponse_Frame.frame.data1 = 0;
 8063d1e:	4b1c      	ldr	r3, [pc, #112]	@ (8063d90 <DiagService_RDBPI_ReadPeriodicGS+0xfc>)
 8063d20:	2200      	movs	r2, #0
 8063d22:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceResponse_Frame.frame.data2 = 0;
 8063d24:	4b1a      	ldr	r3, [pc, #104]	@ (8063d90 <DiagService_RDBPI_ReadPeriodicGS+0xfc>)
 8063d26:	2200      	movs	r2, #0
 8063d28:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceResponse_Frame.frame.data3 = 0;
 8063d2a:	4b19      	ldr	r3, [pc, #100]	@ (8063d90 <DiagService_RDBPI_ReadPeriodicGS+0xfc>)
 8063d2c:	2200      	movs	r2, #0
 8063d2e:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceResponse_Frame.frame.data4 = 0;
 8063d30:	4b17      	ldr	r3, [pc, #92]	@ (8063d90 <DiagService_RDBPI_ReadPeriodicGS+0xfc>)
 8063d32:	2200      	movs	r2, #0
 8063d34:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceResponse_Frame.frame.data5 = 0;
 8063d36:	4b16      	ldr	r3, [pc, #88]	@ (8063d90 <DiagService_RDBPI_ReadPeriodicGS+0xfc>)
 8063d38:	2200      	movs	r2, #0
 8063d3a:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceResponse_Frame.frame.data6 = 0;
 8063d3c:	4b14      	ldr	r3, [pc, #80]	@ (8063d90 <DiagService_RDBPI_ReadPeriodicGS+0xfc>)
 8063d3e:	2200      	movs	r2, #0
 8063d40:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceResponse_Frame.frame.data7 = 0;
 8063d42:	4b13      	ldr	r3, [pc, #76]	@ (8063d90 <DiagService_RDBPI_ReadPeriodicGS+0xfc>)
 8063d44:	2200      	movs	r2, #0
 8063d46:	741a      	strb	r2, [r3, #16]
	Dcm_DiagServiceRequest_Frame.frame.idType = 0;
 8063d48:	4b12      	ldr	r3, [pc, #72]	@ (8063d94 <DiagService_RDBPI_ReadPeriodicGS+0x100>)
 8063d4a:	2200      	movs	r2, #0
 8063d4c:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceRequest_Frame.frame.id = 0;
 8063d4e:	4b11      	ldr	r3, [pc, #68]	@ (8063d94 <DiagService_RDBPI_ReadPeriodicGS+0x100>)
 8063d50:	2200      	movs	r2, #0
 8063d52:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceRequest_Frame.frame.dlc = 0;
 8063d54:	4b0f      	ldr	r3, [pc, #60]	@ (8063d94 <DiagService_RDBPI_ReadPeriodicGS+0x100>)
 8063d56:	2200      	movs	r2, #0
 8063d58:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceRequest_Frame.frame.data0 = 0;
 8063d5a:	4b0e      	ldr	r3, [pc, #56]	@ (8063d94 <DiagService_RDBPI_ReadPeriodicGS+0x100>)
 8063d5c:	2200      	movs	r2, #0
 8063d5e:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceRequest_Frame.frame.data1 = 0;
 8063d60:	4b0c      	ldr	r3, [pc, #48]	@ (8063d94 <DiagService_RDBPI_ReadPeriodicGS+0x100>)
 8063d62:	2200      	movs	r2, #0
 8063d64:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceRequest_Frame.frame.data2 = 0;
 8063d66:	4b0b      	ldr	r3, [pc, #44]	@ (8063d94 <DiagService_RDBPI_ReadPeriodicGS+0x100>)
 8063d68:	2200      	movs	r2, #0
 8063d6a:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceRequest_Frame.frame.data3 = 0;
 8063d6c:	4b09      	ldr	r3, [pc, #36]	@ (8063d94 <DiagService_RDBPI_ReadPeriodicGS+0x100>)
 8063d6e:	2200      	movs	r2, #0
 8063d70:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceRequest_Frame.frame.data4 = 0;
 8063d72:	4b08      	ldr	r3, [pc, #32]	@ (8063d94 <DiagService_RDBPI_ReadPeriodicGS+0x100>)
 8063d74:	2200      	movs	r2, #0
 8063d76:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceRequest_Frame.frame.data5 = 0;
 8063d78:	4b06      	ldr	r3, [pc, #24]	@ (8063d94 <DiagService_RDBPI_ReadPeriodicGS+0x100>)
 8063d7a:	2200      	movs	r2, #0
 8063d7c:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceRequest_Frame.frame.data6 = 0;
 8063d7e:	4b05      	ldr	r3, [pc, #20]	@ (8063d94 <DiagService_RDBPI_ReadPeriodicGS+0x100>)
 8063d80:	2200      	movs	r2, #0
 8063d82:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceRequest_Frame.frame.data7 = 0;
 8063d84:	4b03      	ldr	r3, [pc, #12]	@ (8063d94 <DiagService_RDBPI_ReadPeriodicGS+0x100>)
 8063d86:	2200      	movs	r2, #0
 8063d88:	741a      	strb	r2, [r3, #16]
}
 8063d8a:	bf00      	nop
 8063d8c:	bd80      	pop	{r7, pc}
 8063d8e:	bf00      	nop
 8063d90:	20010374 	.word	0x20010374
 8063d94:	20010388 	.word	0x20010388
 8063d98:	200102cc 	.word	0x200102cc
 8063d9c:	200102d8 	.word	0x200102d8
 8063da0:	2001021c 	.word	0x2001021c

08063da4 <DiagService_RDBPI_ReadPeriodicLS>:
static void DiagService_RDBPI_ReadPeriodicLS(void)
{
 8063da4:	b580      	push	{r7, lr}
 8063da6:	af00      	add	r7, sp, #0
	Dcm_DiagServiceResponse_Frame.frame.dlc = 8;
 8063da8:	4b3d      	ldr	r3, [pc, #244]	@ (8063ea0 <DiagService_RDBPI_ReadPeriodicLS+0xfc>)
 8063daa:	2208      	movs	r2, #8
 8063dac:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceResponse_Frame.frame.id = 0x701;
 8063dae:	4b3c      	ldr	r3, [pc, #240]	@ (8063ea0 <DiagService_RDBPI_ReadPeriodicLS+0xfc>)
 8063db0:	f240 7201 	movw	r2, #1793	@ 0x701
 8063db4:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceResponse_Frame.frame.idType = 1;
 8063db6:	4b3a      	ldr	r3, [pc, #232]	@ (8063ea0 <DiagService_RDBPI_ReadPeriodicLS+0xfc>)
 8063db8:	2201      	movs	r2, #1
 8063dba:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceResponse_Frame.frame.data0 = 0x07;
 8063dbc:	4b38      	ldr	r3, [pc, #224]	@ (8063ea0 <DiagService_RDBPI_ReadPeriodicLS+0xfc>)
 8063dbe:	2207      	movs	r2, #7
 8063dc0:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceResponse_Frame.frame.data1 = 0x6A;
 8063dc2:	4b37      	ldr	r3, [pc, #220]	@ (8063ea0 <DiagService_RDBPI_ReadPeriodicLS+0xfc>)
 8063dc4:	226a      	movs	r2, #106	@ 0x6a
 8063dc6:	729a      	strb	r2, [r3, #10]
	if(Dcm_DiagServiceRequest_Frame.frame.data2 != 0x04) Dcm_DiagServiceResponse_Frame.frame.data2 = 0x01;
 8063dc8:	4b36      	ldr	r3, [pc, #216]	@ (8063ea4 <DiagService_RDBPI_ReadPeriodicLS+0x100>)
 8063dca:	7adb      	ldrb	r3, [r3, #11]
 8063dcc:	2b04      	cmp	r3, #4
 8063dce:	d003      	beq.n	8063dd8 <DiagService_RDBPI_ReadPeriodicLS+0x34>
 8063dd0:	4b33      	ldr	r3, [pc, #204]	@ (8063ea0 <DiagService_RDBPI_ReadPeriodicLS+0xfc>)
 8063dd2:	2201      	movs	r2, #1
 8063dd4:	72da      	strb	r2, [r3, #11]
 8063dd6:	e006      	b.n	8063de6 <DiagService_RDBPI_ReadPeriodicLS+0x42>
	else if(Dcm_DiagServiceRequest_Frame.frame.data2 == 0x04) Dcm_DiagServiceResponse_Frame.frame.data2 = 0x04;
 8063dd8:	4b32      	ldr	r3, [pc, #200]	@ (8063ea4 <DiagService_RDBPI_ReadPeriodicLS+0x100>)
 8063dda:	7adb      	ldrb	r3, [r3, #11]
 8063ddc:	2b04      	cmp	r3, #4
 8063dde:	d102      	bne.n	8063de6 <DiagService_RDBPI_ReadPeriodicLS+0x42>
 8063de0:	4b2f      	ldr	r3, [pc, #188]	@ (8063ea0 <DiagService_RDBPI_ReadPeriodicLS+0xfc>)
 8063de2:	2204      	movs	r2, #4
 8063de4:	72da      	strb	r2, [r3, #11]
	else
	{
		/* Do nothing. */
	}
	Dcm_DiagServiceResponse_Frame.frame.data3 = 0x0A;
 8063de6:	4b2e      	ldr	r3, [pc, #184]	@ (8063ea0 <DiagService_RDBPI_ReadPeriodicLS+0xfc>)
 8063de8:	220a      	movs	r2, #10
 8063dea:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceResponse_Frame.frame.data4 = StatusList_ComOutValue[5];
 8063dec:	4b2e      	ldr	r3, [pc, #184]	@ (8063ea8 <DiagService_RDBPI_ReadPeriodicLS+0x104>)
 8063dee:	795a      	ldrb	r2, [r3, #5]
 8063df0:	4b2b      	ldr	r3, [pc, #172]	@ (8063ea0 <DiagService_RDBPI_ReadPeriodicLS+0xfc>)
 8063df2:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceResponse_Frame.frame.data5 = StatusList_RawValue[5];
 8063df4:	4b2d      	ldr	r3, [pc, #180]	@ (8063eac <DiagService_RDBPI_ReadPeriodicLS+0x108>)
 8063df6:	795a      	ldrb	r2, [r3, #5]
 8063df8:	4b29      	ldr	r3, [pc, #164]	@ (8063ea0 <DiagService_RDBPI_ReadPeriodicLS+0xfc>)
 8063dfa:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceResponse_Frame.frame.data6 = StatusList_InputStatus[5].errorStatus;
 8063dfc:	4b2c      	ldr	r3, [pc, #176]	@ (8063eb0 <DiagService_RDBPI_ReadPeriodicLS+0x10c>)
 8063dfe:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 8063e02:	4b27      	ldr	r3, [pc, #156]	@ (8063ea0 <DiagService_RDBPI_ReadPeriodicLS+0xfc>)
 8063e04:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceResponse_Frame.frame.data7 = StatusList_InputStatus[5].DCYStatus;
 8063e06:	4b2a      	ldr	r3, [pc, #168]	@ (8063eb0 <DiagService_RDBPI_ReadPeriodicLS+0x10c>)
 8063e08:	f893 203d 	ldrb.w	r2, [r3, #61]	@ 0x3d
 8063e0c:	4b24      	ldr	r3, [pc, #144]	@ (8063ea0 <DiagService_RDBPI_ReadPeriodicLS+0xfc>)
 8063e0e:	741a      	strb	r2, [r3, #16]
	CanSpi_Transmit(&Dcm_DiagServiceResponse_Frame);
 8063e10:	4823      	ldr	r0, [pc, #140]	@ (8063ea0 <DiagService_RDBPI_ReadPeriodicLS+0xfc>)
 8063e12:	f7fd fe41 	bl	8061a98 <CanSpi_Transmit>
	Dcm_DiagServiceResponse_Frame.frame.idType = 0;
 8063e16:	4b22      	ldr	r3, [pc, #136]	@ (8063ea0 <DiagService_RDBPI_ReadPeriodicLS+0xfc>)
 8063e18:	2200      	movs	r2, #0
 8063e1a:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceResponse_Frame.frame.id = 0;
 8063e1c:	4b20      	ldr	r3, [pc, #128]	@ (8063ea0 <DiagService_RDBPI_ReadPeriodicLS+0xfc>)
 8063e1e:	2200      	movs	r2, #0
 8063e20:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceResponse_Frame.frame.dlc = 0;
 8063e22:	4b1f      	ldr	r3, [pc, #124]	@ (8063ea0 <DiagService_RDBPI_ReadPeriodicLS+0xfc>)
 8063e24:	2200      	movs	r2, #0
 8063e26:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceResponse_Frame.frame.data0 = 0;
 8063e28:	4b1d      	ldr	r3, [pc, #116]	@ (8063ea0 <DiagService_RDBPI_ReadPeriodicLS+0xfc>)
 8063e2a:	2200      	movs	r2, #0
 8063e2c:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceResponse_Frame.frame.data1 = 0;
 8063e2e:	4b1c      	ldr	r3, [pc, #112]	@ (8063ea0 <DiagService_RDBPI_ReadPeriodicLS+0xfc>)
 8063e30:	2200      	movs	r2, #0
 8063e32:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceResponse_Frame.frame.data2 = 0;
 8063e34:	4b1a      	ldr	r3, [pc, #104]	@ (8063ea0 <DiagService_RDBPI_ReadPeriodicLS+0xfc>)
 8063e36:	2200      	movs	r2, #0
 8063e38:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceResponse_Frame.frame.data3 = 0;
 8063e3a:	4b19      	ldr	r3, [pc, #100]	@ (8063ea0 <DiagService_RDBPI_ReadPeriodicLS+0xfc>)
 8063e3c:	2200      	movs	r2, #0
 8063e3e:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceResponse_Frame.frame.data4 = 0;
 8063e40:	4b17      	ldr	r3, [pc, #92]	@ (8063ea0 <DiagService_RDBPI_ReadPeriodicLS+0xfc>)
 8063e42:	2200      	movs	r2, #0
 8063e44:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceResponse_Frame.frame.data5 = 0;
 8063e46:	4b16      	ldr	r3, [pc, #88]	@ (8063ea0 <DiagService_RDBPI_ReadPeriodicLS+0xfc>)
 8063e48:	2200      	movs	r2, #0
 8063e4a:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceResponse_Frame.frame.data6 = 0;
 8063e4c:	4b14      	ldr	r3, [pc, #80]	@ (8063ea0 <DiagService_RDBPI_ReadPeriodicLS+0xfc>)
 8063e4e:	2200      	movs	r2, #0
 8063e50:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceResponse_Frame.frame.data7 = 0;
 8063e52:	4b13      	ldr	r3, [pc, #76]	@ (8063ea0 <DiagService_RDBPI_ReadPeriodicLS+0xfc>)
 8063e54:	2200      	movs	r2, #0
 8063e56:	741a      	strb	r2, [r3, #16]
	Dcm_DiagServiceRequest_Frame.frame.idType = 0;
 8063e58:	4b12      	ldr	r3, [pc, #72]	@ (8063ea4 <DiagService_RDBPI_ReadPeriodicLS+0x100>)
 8063e5a:	2200      	movs	r2, #0
 8063e5c:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceRequest_Frame.frame.id = 0;
 8063e5e:	4b11      	ldr	r3, [pc, #68]	@ (8063ea4 <DiagService_RDBPI_ReadPeriodicLS+0x100>)
 8063e60:	2200      	movs	r2, #0
 8063e62:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceRequest_Frame.frame.dlc = 0;
 8063e64:	4b0f      	ldr	r3, [pc, #60]	@ (8063ea4 <DiagService_RDBPI_ReadPeriodicLS+0x100>)
 8063e66:	2200      	movs	r2, #0
 8063e68:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceRequest_Frame.frame.data0 = 0;
 8063e6a:	4b0e      	ldr	r3, [pc, #56]	@ (8063ea4 <DiagService_RDBPI_ReadPeriodicLS+0x100>)
 8063e6c:	2200      	movs	r2, #0
 8063e6e:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceRequest_Frame.frame.data1 = 0;
 8063e70:	4b0c      	ldr	r3, [pc, #48]	@ (8063ea4 <DiagService_RDBPI_ReadPeriodicLS+0x100>)
 8063e72:	2200      	movs	r2, #0
 8063e74:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceRequest_Frame.frame.data2 = 0;
 8063e76:	4b0b      	ldr	r3, [pc, #44]	@ (8063ea4 <DiagService_RDBPI_ReadPeriodicLS+0x100>)
 8063e78:	2200      	movs	r2, #0
 8063e7a:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceRequest_Frame.frame.data3 = 0;
 8063e7c:	4b09      	ldr	r3, [pc, #36]	@ (8063ea4 <DiagService_RDBPI_ReadPeriodicLS+0x100>)
 8063e7e:	2200      	movs	r2, #0
 8063e80:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceRequest_Frame.frame.data4 = 0;
 8063e82:	4b08      	ldr	r3, [pc, #32]	@ (8063ea4 <DiagService_RDBPI_ReadPeriodicLS+0x100>)
 8063e84:	2200      	movs	r2, #0
 8063e86:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceRequest_Frame.frame.data5 = 0;
 8063e88:	4b06      	ldr	r3, [pc, #24]	@ (8063ea4 <DiagService_RDBPI_ReadPeriodicLS+0x100>)
 8063e8a:	2200      	movs	r2, #0
 8063e8c:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceRequest_Frame.frame.data6 = 0;
 8063e8e:	4b05      	ldr	r3, [pc, #20]	@ (8063ea4 <DiagService_RDBPI_ReadPeriodicLS+0x100>)
 8063e90:	2200      	movs	r2, #0
 8063e92:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceRequest_Frame.frame.data7 = 0;
 8063e94:	4b03      	ldr	r3, [pc, #12]	@ (8063ea4 <DiagService_RDBPI_ReadPeriodicLS+0x100>)
 8063e96:	2200      	movs	r2, #0
 8063e98:	741a      	strb	r2, [r3, #16]
}
 8063e9a:	bf00      	nop
 8063e9c:	bd80      	pop	{r7, pc}
 8063e9e:	bf00      	nop
 8063ea0:	20010374 	.word	0x20010374
 8063ea4:	20010388 	.word	0x20010388
 8063ea8:	200102cc 	.word	0x200102cc
 8063eac:	200102d8 	.word	0x200102d8
 8063eb0:	2001021c 	.word	0x2001021c

08063eb4 <DiagService_RDBPI_ReadPeriodicRS>:
static void DiagService_RDBPI_ReadPeriodicRS(void)
{
 8063eb4:	b580      	push	{r7, lr}
 8063eb6:	af00      	add	r7, sp, #0
	Dcm_DiagServiceResponse_Frame.frame.dlc = 8;
 8063eb8:	4b3d      	ldr	r3, [pc, #244]	@ (8063fb0 <DiagService_RDBPI_ReadPeriodicRS+0xfc>)
 8063eba:	2208      	movs	r2, #8
 8063ebc:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceResponse_Frame.frame.id = 0x701;
 8063ebe:	4b3c      	ldr	r3, [pc, #240]	@ (8063fb0 <DiagService_RDBPI_ReadPeriodicRS+0xfc>)
 8063ec0:	f240 7201 	movw	r2, #1793	@ 0x701
 8063ec4:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceResponse_Frame.frame.idType = 1;
 8063ec6:	4b3a      	ldr	r3, [pc, #232]	@ (8063fb0 <DiagService_RDBPI_ReadPeriodicRS+0xfc>)
 8063ec8:	2201      	movs	r2, #1
 8063eca:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceResponse_Frame.frame.data0 = 0x07;
 8063ecc:	4b38      	ldr	r3, [pc, #224]	@ (8063fb0 <DiagService_RDBPI_ReadPeriodicRS+0xfc>)
 8063ece:	2207      	movs	r2, #7
 8063ed0:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceResponse_Frame.frame.data1 = 0x6A;
 8063ed2:	4b37      	ldr	r3, [pc, #220]	@ (8063fb0 <DiagService_RDBPI_ReadPeriodicRS+0xfc>)
 8063ed4:	226a      	movs	r2, #106	@ 0x6a
 8063ed6:	729a      	strb	r2, [r3, #10]
	if(Dcm_DiagServiceRequest_Frame.frame.data2 != 0x04) Dcm_DiagServiceResponse_Frame.frame.data2 = 0x01;
 8063ed8:	4b36      	ldr	r3, [pc, #216]	@ (8063fb4 <DiagService_RDBPI_ReadPeriodicRS+0x100>)
 8063eda:	7adb      	ldrb	r3, [r3, #11]
 8063edc:	2b04      	cmp	r3, #4
 8063ede:	d003      	beq.n	8063ee8 <DiagService_RDBPI_ReadPeriodicRS+0x34>
 8063ee0:	4b33      	ldr	r3, [pc, #204]	@ (8063fb0 <DiagService_RDBPI_ReadPeriodicRS+0xfc>)
 8063ee2:	2201      	movs	r2, #1
 8063ee4:	72da      	strb	r2, [r3, #11]
 8063ee6:	e006      	b.n	8063ef6 <DiagService_RDBPI_ReadPeriodicRS+0x42>
	else if(Dcm_DiagServiceRequest_Frame.frame.data2 == 0x04) Dcm_DiagServiceResponse_Frame.frame.data2 = 0x04;
 8063ee8:	4b32      	ldr	r3, [pc, #200]	@ (8063fb4 <DiagService_RDBPI_ReadPeriodicRS+0x100>)
 8063eea:	7adb      	ldrb	r3, [r3, #11]
 8063eec:	2b04      	cmp	r3, #4
 8063eee:	d102      	bne.n	8063ef6 <DiagService_RDBPI_ReadPeriodicRS+0x42>
 8063ef0:	4b2f      	ldr	r3, [pc, #188]	@ (8063fb0 <DiagService_RDBPI_ReadPeriodicRS+0xfc>)
 8063ef2:	2204      	movs	r2, #4
 8063ef4:	72da      	strb	r2, [r3, #11]
	else
	{
		/* Do nothing. */
	}
	Dcm_DiagServiceResponse_Frame.frame.data3 = 0x0B;
 8063ef6:	4b2e      	ldr	r3, [pc, #184]	@ (8063fb0 <DiagService_RDBPI_ReadPeriodicRS+0xfc>)
 8063ef8:	220b      	movs	r2, #11
 8063efa:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceResponse_Frame.frame.data4 = StatusList_ComOutValue[6];
 8063efc:	4b2e      	ldr	r3, [pc, #184]	@ (8063fb8 <DiagService_RDBPI_ReadPeriodicRS+0x104>)
 8063efe:	799a      	ldrb	r2, [r3, #6]
 8063f00:	4b2b      	ldr	r3, [pc, #172]	@ (8063fb0 <DiagService_RDBPI_ReadPeriodicRS+0xfc>)
 8063f02:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceResponse_Frame.frame.data5 = StatusList_RawValue[6];
 8063f04:	4b2d      	ldr	r3, [pc, #180]	@ (8063fbc <DiagService_RDBPI_ReadPeriodicRS+0x108>)
 8063f06:	799a      	ldrb	r2, [r3, #6]
 8063f08:	4b29      	ldr	r3, [pc, #164]	@ (8063fb0 <DiagService_RDBPI_ReadPeriodicRS+0xfc>)
 8063f0a:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceResponse_Frame.frame.data6 = StatusList_InputStatus[6].errorStatus;
 8063f0c:	4b2c      	ldr	r3, [pc, #176]	@ (8063fc0 <DiagService_RDBPI_ReadPeriodicRS+0x10c>)
 8063f0e:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8063f12:	4b27      	ldr	r3, [pc, #156]	@ (8063fb0 <DiagService_RDBPI_ReadPeriodicRS+0xfc>)
 8063f14:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceResponse_Frame.frame.data7 = StatusList_InputStatus[6].DCYStatus;
 8063f16:	4b2a      	ldr	r3, [pc, #168]	@ (8063fc0 <DiagService_RDBPI_ReadPeriodicRS+0x10c>)
 8063f18:	f893 2049 	ldrb.w	r2, [r3, #73]	@ 0x49
 8063f1c:	4b24      	ldr	r3, [pc, #144]	@ (8063fb0 <DiagService_RDBPI_ReadPeriodicRS+0xfc>)
 8063f1e:	741a      	strb	r2, [r3, #16]
	CanSpi_Transmit(&Dcm_DiagServiceResponse_Frame);
 8063f20:	4823      	ldr	r0, [pc, #140]	@ (8063fb0 <DiagService_RDBPI_ReadPeriodicRS+0xfc>)
 8063f22:	f7fd fdb9 	bl	8061a98 <CanSpi_Transmit>
	Dcm_DiagServiceResponse_Frame.frame.idType = 0;
 8063f26:	4b22      	ldr	r3, [pc, #136]	@ (8063fb0 <DiagService_RDBPI_ReadPeriodicRS+0xfc>)
 8063f28:	2200      	movs	r2, #0
 8063f2a:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceResponse_Frame.frame.id = 0;
 8063f2c:	4b20      	ldr	r3, [pc, #128]	@ (8063fb0 <DiagService_RDBPI_ReadPeriodicRS+0xfc>)
 8063f2e:	2200      	movs	r2, #0
 8063f30:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceResponse_Frame.frame.dlc = 0;
 8063f32:	4b1f      	ldr	r3, [pc, #124]	@ (8063fb0 <DiagService_RDBPI_ReadPeriodicRS+0xfc>)
 8063f34:	2200      	movs	r2, #0
 8063f36:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceResponse_Frame.frame.data0 = 0;
 8063f38:	4b1d      	ldr	r3, [pc, #116]	@ (8063fb0 <DiagService_RDBPI_ReadPeriodicRS+0xfc>)
 8063f3a:	2200      	movs	r2, #0
 8063f3c:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceResponse_Frame.frame.data1 = 0;
 8063f3e:	4b1c      	ldr	r3, [pc, #112]	@ (8063fb0 <DiagService_RDBPI_ReadPeriodicRS+0xfc>)
 8063f40:	2200      	movs	r2, #0
 8063f42:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceResponse_Frame.frame.data2 = 0;
 8063f44:	4b1a      	ldr	r3, [pc, #104]	@ (8063fb0 <DiagService_RDBPI_ReadPeriodicRS+0xfc>)
 8063f46:	2200      	movs	r2, #0
 8063f48:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceResponse_Frame.frame.data3 = 0;
 8063f4a:	4b19      	ldr	r3, [pc, #100]	@ (8063fb0 <DiagService_RDBPI_ReadPeriodicRS+0xfc>)
 8063f4c:	2200      	movs	r2, #0
 8063f4e:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceResponse_Frame.frame.data4 = 0;
 8063f50:	4b17      	ldr	r3, [pc, #92]	@ (8063fb0 <DiagService_RDBPI_ReadPeriodicRS+0xfc>)
 8063f52:	2200      	movs	r2, #0
 8063f54:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceResponse_Frame.frame.data5 = 0;
 8063f56:	4b16      	ldr	r3, [pc, #88]	@ (8063fb0 <DiagService_RDBPI_ReadPeriodicRS+0xfc>)
 8063f58:	2200      	movs	r2, #0
 8063f5a:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceResponse_Frame.frame.data6 = 0;
 8063f5c:	4b14      	ldr	r3, [pc, #80]	@ (8063fb0 <DiagService_RDBPI_ReadPeriodicRS+0xfc>)
 8063f5e:	2200      	movs	r2, #0
 8063f60:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceResponse_Frame.frame.data7 = 0;
 8063f62:	4b13      	ldr	r3, [pc, #76]	@ (8063fb0 <DiagService_RDBPI_ReadPeriodicRS+0xfc>)
 8063f64:	2200      	movs	r2, #0
 8063f66:	741a      	strb	r2, [r3, #16]
	Dcm_DiagServiceRequest_Frame.frame.idType = 0;
 8063f68:	4b12      	ldr	r3, [pc, #72]	@ (8063fb4 <DiagService_RDBPI_ReadPeriodicRS+0x100>)
 8063f6a:	2200      	movs	r2, #0
 8063f6c:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceRequest_Frame.frame.id = 0;
 8063f6e:	4b11      	ldr	r3, [pc, #68]	@ (8063fb4 <DiagService_RDBPI_ReadPeriodicRS+0x100>)
 8063f70:	2200      	movs	r2, #0
 8063f72:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceRequest_Frame.frame.dlc = 0;
 8063f74:	4b0f      	ldr	r3, [pc, #60]	@ (8063fb4 <DiagService_RDBPI_ReadPeriodicRS+0x100>)
 8063f76:	2200      	movs	r2, #0
 8063f78:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceRequest_Frame.frame.data0 = 0;
 8063f7a:	4b0e      	ldr	r3, [pc, #56]	@ (8063fb4 <DiagService_RDBPI_ReadPeriodicRS+0x100>)
 8063f7c:	2200      	movs	r2, #0
 8063f7e:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceRequest_Frame.frame.data1 = 0;
 8063f80:	4b0c      	ldr	r3, [pc, #48]	@ (8063fb4 <DiagService_RDBPI_ReadPeriodicRS+0x100>)
 8063f82:	2200      	movs	r2, #0
 8063f84:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceRequest_Frame.frame.data2 = 0;
 8063f86:	4b0b      	ldr	r3, [pc, #44]	@ (8063fb4 <DiagService_RDBPI_ReadPeriodicRS+0x100>)
 8063f88:	2200      	movs	r2, #0
 8063f8a:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceRequest_Frame.frame.data3 = 0;
 8063f8c:	4b09      	ldr	r3, [pc, #36]	@ (8063fb4 <DiagService_RDBPI_ReadPeriodicRS+0x100>)
 8063f8e:	2200      	movs	r2, #0
 8063f90:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceRequest_Frame.frame.data4 = 0;
 8063f92:	4b08      	ldr	r3, [pc, #32]	@ (8063fb4 <DiagService_RDBPI_ReadPeriodicRS+0x100>)
 8063f94:	2200      	movs	r2, #0
 8063f96:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceRequest_Frame.frame.data5 = 0;
 8063f98:	4b06      	ldr	r3, [pc, #24]	@ (8063fb4 <DiagService_RDBPI_ReadPeriodicRS+0x100>)
 8063f9a:	2200      	movs	r2, #0
 8063f9c:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceRequest_Frame.frame.data6 = 0;
 8063f9e:	4b05      	ldr	r3, [pc, #20]	@ (8063fb4 <DiagService_RDBPI_ReadPeriodicRS+0x100>)
 8063fa0:	2200      	movs	r2, #0
 8063fa2:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceRequest_Frame.frame.data7 = 0;
 8063fa4:	4b03      	ldr	r3, [pc, #12]	@ (8063fb4 <DiagService_RDBPI_ReadPeriodicRS+0x100>)
 8063fa6:	2200      	movs	r2, #0
 8063fa8:	741a      	strb	r2, [r3, #16]
}
 8063faa:	bf00      	nop
 8063fac:	bd80      	pop	{r7, pc}
 8063fae:	bf00      	nop
 8063fb0:	20010374 	.word	0x20010374
 8063fb4:	20010388 	.word	0x20010388
 8063fb8:	200102cc 	.word	0x200102cc
 8063fbc:	200102d8 	.word	0x200102d8
 8063fc0:	2001021c 	.word	0x2001021c

08063fc4 <DiagService_DSC_DefaultSession>:
static void DiagService_DSC_DefaultSession(void)
{
 8063fc4:	b580      	push	{r7, lr}
 8063fc6:	af00      	add	r7, sp, #0
	Dcm_DiagServiceResponse_Frame.frame.dlc = 3;
 8063fc8:	4b2e      	ldr	r3, [pc, #184]	@ (8064084 <DiagService_DSC_DefaultSession+0xc0>)
 8063fca:	2203      	movs	r2, #3
 8063fcc:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceResponse_Frame.frame.id = 0x701;
 8063fce:	4b2d      	ldr	r3, [pc, #180]	@ (8064084 <DiagService_DSC_DefaultSession+0xc0>)
 8063fd0:	f240 7201 	movw	r2, #1793	@ 0x701
 8063fd4:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceResponse_Frame.frame.idType = 1;
 8063fd6:	4b2b      	ldr	r3, [pc, #172]	@ (8064084 <DiagService_DSC_DefaultSession+0xc0>)
 8063fd8:	2201      	movs	r2, #1
 8063fda:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceResponse_Frame.frame.data0 = 0x02;
 8063fdc:	4b29      	ldr	r3, [pc, #164]	@ (8064084 <DiagService_DSC_DefaultSession+0xc0>)
 8063fde:	2202      	movs	r2, #2
 8063fe0:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceResponse_Frame.frame.data1 = 0x50;
 8063fe2:	4b28      	ldr	r3, [pc, #160]	@ (8064084 <DiagService_DSC_DefaultSession+0xc0>)
 8063fe4:	2250      	movs	r2, #80	@ 0x50
 8063fe6:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceResponse_Frame.frame.data2 = 0x01;
 8063fe8:	4b26      	ldr	r3, [pc, #152]	@ (8064084 <DiagService_DSC_DefaultSession+0xc0>)
 8063fea:	2201      	movs	r2, #1
 8063fec:	72da      	strb	r2, [r3, #11]
	Dcm_DiagnosticSession = DEFAULT;
 8063fee:	4b26      	ldr	r3, [pc, #152]	@ (8064088 <DiagService_DSC_DefaultSession+0xc4>)
 8063ff0:	2200      	movs	r2, #0
 8063ff2:	701a      	strb	r2, [r3, #0]
	CanSpi_Transmit(&Dcm_DiagServiceResponse_Frame);
 8063ff4:	4823      	ldr	r0, [pc, #140]	@ (8064084 <DiagService_DSC_DefaultSession+0xc0>)
 8063ff6:	f7fd fd4f 	bl	8061a98 <CanSpi_Transmit>
	Dcm_DiagServiceResponse_Frame.frame.idType = 0;
 8063ffa:	4b22      	ldr	r3, [pc, #136]	@ (8064084 <DiagService_DSC_DefaultSession+0xc0>)
 8063ffc:	2200      	movs	r2, #0
 8063ffe:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceResponse_Frame.frame.id = 0;
 8064000:	4b20      	ldr	r3, [pc, #128]	@ (8064084 <DiagService_DSC_DefaultSession+0xc0>)
 8064002:	2200      	movs	r2, #0
 8064004:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceResponse_Frame.frame.dlc = 0;
 8064006:	4b1f      	ldr	r3, [pc, #124]	@ (8064084 <DiagService_DSC_DefaultSession+0xc0>)
 8064008:	2200      	movs	r2, #0
 806400a:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceResponse_Frame.frame.data0 = 0;
 806400c:	4b1d      	ldr	r3, [pc, #116]	@ (8064084 <DiagService_DSC_DefaultSession+0xc0>)
 806400e:	2200      	movs	r2, #0
 8064010:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceResponse_Frame.frame.data1 = 0;
 8064012:	4b1c      	ldr	r3, [pc, #112]	@ (8064084 <DiagService_DSC_DefaultSession+0xc0>)
 8064014:	2200      	movs	r2, #0
 8064016:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceResponse_Frame.frame.data2 = 0;
 8064018:	4b1a      	ldr	r3, [pc, #104]	@ (8064084 <DiagService_DSC_DefaultSession+0xc0>)
 806401a:	2200      	movs	r2, #0
 806401c:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceResponse_Frame.frame.data3 = 0;
 806401e:	4b19      	ldr	r3, [pc, #100]	@ (8064084 <DiagService_DSC_DefaultSession+0xc0>)
 8064020:	2200      	movs	r2, #0
 8064022:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceResponse_Frame.frame.data4 = 0;
 8064024:	4b17      	ldr	r3, [pc, #92]	@ (8064084 <DiagService_DSC_DefaultSession+0xc0>)
 8064026:	2200      	movs	r2, #0
 8064028:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceResponse_Frame.frame.data5 = 0;
 806402a:	4b16      	ldr	r3, [pc, #88]	@ (8064084 <DiagService_DSC_DefaultSession+0xc0>)
 806402c:	2200      	movs	r2, #0
 806402e:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceResponse_Frame.frame.data6 = 0;
 8064030:	4b14      	ldr	r3, [pc, #80]	@ (8064084 <DiagService_DSC_DefaultSession+0xc0>)
 8064032:	2200      	movs	r2, #0
 8064034:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceResponse_Frame.frame.data7 = 0;
 8064036:	4b13      	ldr	r3, [pc, #76]	@ (8064084 <DiagService_DSC_DefaultSession+0xc0>)
 8064038:	2200      	movs	r2, #0
 806403a:	741a      	strb	r2, [r3, #16]
	Dcm_DiagServiceRequest_Frame.frame.idType = 0;
 806403c:	4b13      	ldr	r3, [pc, #76]	@ (806408c <DiagService_DSC_DefaultSession+0xc8>)
 806403e:	2200      	movs	r2, #0
 8064040:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceRequest_Frame.frame.id = 0;
 8064042:	4b12      	ldr	r3, [pc, #72]	@ (806408c <DiagService_DSC_DefaultSession+0xc8>)
 8064044:	2200      	movs	r2, #0
 8064046:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceRequest_Frame.frame.dlc = 0;
 8064048:	4b10      	ldr	r3, [pc, #64]	@ (806408c <DiagService_DSC_DefaultSession+0xc8>)
 806404a:	2200      	movs	r2, #0
 806404c:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceRequest_Frame.frame.data0 = 0;
 806404e:	4b0f      	ldr	r3, [pc, #60]	@ (806408c <DiagService_DSC_DefaultSession+0xc8>)
 8064050:	2200      	movs	r2, #0
 8064052:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceRequest_Frame.frame.data1 = 0;
 8064054:	4b0d      	ldr	r3, [pc, #52]	@ (806408c <DiagService_DSC_DefaultSession+0xc8>)
 8064056:	2200      	movs	r2, #0
 8064058:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceRequest_Frame.frame.data2 = 0;
 806405a:	4b0c      	ldr	r3, [pc, #48]	@ (806408c <DiagService_DSC_DefaultSession+0xc8>)
 806405c:	2200      	movs	r2, #0
 806405e:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceRequest_Frame.frame.data3 = 0;
 8064060:	4b0a      	ldr	r3, [pc, #40]	@ (806408c <DiagService_DSC_DefaultSession+0xc8>)
 8064062:	2200      	movs	r2, #0
 8064064:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceRequest_Frame.frame.data4 = 0;
 8064066:	4b09      	ldr	r3, [pc, #36]	@ (806408c <DiagService_DSC_DefaultSession+0xc8>)
 8064068:	2200      	movs	r2, #0
 806406a:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceRequest_Frame.frame.data5 = 0;
 806406c:	4b07      	ldr	r3, [pc, #28]	@ (806408c <DiagService_DSC_DefaultSession+0xc8>)
 806406e:	2200      	movs	r2, #0
 8064070:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceRequest_Frame.frame.data6 = 0;
 8064072:	4b06      	ldr	r3, [pc, #24]	@ (806408c <DiagService_DSC_DefaultSession+0xc8>)
 8064074:	2200      	movs	r2, #0
 8064076:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceRequest_Frame.frame.data7 = 0;
 8064078:	4b04      	ldr	r3, [pc, #16]	@ (806408c <DiagService_DSC_DefaultSession+0xc8>)
 806407a:	2200      	movs	r2, #0
 806407c:	741a      	strb	r2, [r3, #16]
}
 806407e:	bf00      	nop
 8064080:	bd80      	pop	{r7, pc}
 8064082:	bf00      	nop
 8064084:	20010374 	.word	0x20010374
 8064088:	2001fda8 	.word	0x2001fda8
 806408c:	20010388 	.word	0x20010388

08064090 <DiagService_DSC_ExtendedSession>:
static void DiagService_DSC_ExtendedSession(void)
{
 8064090:	b580      	push	{r7, lr}
 8064092:	af00      	add	r7, sp, #0
	Dcm_DiagServiceResponse_Frame.frame.dlc = 3;
 8064094:	4b2e      	ldr	r3, [pc, #184]	@ (8064150 <DiagService_DSC_ExtendedSession+0xc0>)
 8064096:	2203      	movs	r2, #3
 8064098:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceResponse_Frame.frame.id = 0x701;
 806409a:	4b2d      	ldr	r3, [pc, #180]	@ (8064150 <DiagService_DSC_ExtendedSession+0xc0>)
 806409c:	f240 7201 	movw	r2, #1793	@ 0x701
 80640a0:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceResponse_Frame.frame.idType = 1;
 80640a2:	4b2b      	ldr	r3, [pc, #172]	@ (8064150 <DiagService_DSC_ExtendedSession+0xc0>)
 80640a4:	2201      	movs	r2, #1
 80640a6:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceResponse_Frame.frame.data0 = 0x02;
 80640a8:	4b29      	ldr	r3, [pc, #164]	@ (8064150 <DiagService_DSC_ExtendedSession+0xc0>)
 80640aa:	2202      	movs	r2, #2
 80640ac:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceResponse_Frame.frame.data1 = 0x50;
 80640ae:	4b28      	ldr	r3, [pc, #160]	@ (8064150 <DiagService_DSC_ExtendedSession+0xc0>)
 80640b0:	2250      	movs	r2, #80	@ 0x50
 80640b2:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceResponse_Frame.frame.data2 = 0x03;
 80640b4:	4b26      	ldr	r3, [pc, #152]	@ (8064150 <DiagService_DSC_ExtendedSession+0xc0>)
 80640b6:	2203      	movs	r2, #3
 80640b8:	72da      	strb	r2, [r3, #11]
	Dcm_DiagnosticSession = EXTENDED;
 80640ba:	4b26      	ldr	r3, [pc, #152]	@ (8064154 <DiagService_DSC_ExtendedSession+0xc4>)
 80640bc:	2201      	movs	r2, #1
 80640be:	701a      	strb	r2, [r3, #0]
	CanSpi_Transmit(&Dcm_DiagServiceResponse_Frame);
 80640c0:	4823      	ldr	r0, [pc, #140]	@ (8064150 <DiagService_DSC_ExtendedSession+0xc0>)
 80640c2:	f7fd fce9 	bl	8061a98 <CanSpi_Transmit>
	Dcm_DiagServiceResponse_Frame.frame.idType = 0;
 80640c6:	4b22      	ldr	r3, [pc, #136]	@ (8064150 <DiagService_DSC_ExtendedSession+0xc0>)
 80640c8:	2200      	movs	r2, #0
 80640ca:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceResponse_Frame.frame.id = 0;
 80640cc:	4b20      	ldr	r3, [pc, #128]	@ (8064150 <DiagService_DSC_ExtendedSession+0xc0>)
 80640ce:	2200      	movs	r2, #0
 80640d0:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceResponse_Frame.frame.dlc = 0;
 80640d2:	4b1f      	ldr	r3, [pc, #124]	@ (8064150 <DiagService_DSC_ExtendedSession+0xc0>)
 80640d4:	2200      	movs	r2, #0
 80640d6:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceResponse_Frame.frame.data0 = 0;
 80640d8:	4b1d      	ldr	r3, [pc, #116]	@ (8064150 <DiagService_DSC_ExtendedSession+0xc0>)
 80640da:	2200      	movs	r2, #0
 80640dc:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceResponse_Frame.frame.data1 = 0;
 80640de:	4b1c      	ldr	r3, [pc, #112]	@ (8064150 <DiagService_DSC_ExtendedSession+0xc0>)
 80640e0:	2200      	movs	r2, #0
 80640e2:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceResponse_Frame.frame.data2 = 0;
 80640e4:	4b1a      	ldr	r3, [pc, #104]	@ (8064150 <DiagService_DSC_ExtendedSession+0xc0>)
 80640e6:	2200      	movs	r2, #0
 80640e8:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceResponse_Frame.frame.data3 = 0;
 80640ea:	4b19      	ldr	r3, [pc, #100]	@ (8064150 <DiagService_DSC_ExtendedSession+0xc0>)
 80640ec:	2200      	movs	r2, #0
 80640ee:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceResponse_Frame.frame.data4 = 0;
 80640f0:	4b17      	ldr	r3, [pc, #92]	@ (8064150 <DiagService_DSC_ExtendedSession+0xc0>)
 80640f2:	2200      	movs	r2, #0
 80640f4:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceResponse_Frame.frame.data5 = 0;
 80640f6:	4b16      	ldr	r3, [pc, #88]	@ (8064150 <DiagService_DSC_ExtendedSession+0xc0>)
 80640f8:	2200      	movs	r2, #0
 80640fa:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceResponse_Frame.frame.data6 = 0;
 80640fc:	4b14      	ldr	r3, [pc, #80]	@ (8064150 <DiagService_DSC_ExtendedSession+0xc0>)
 80640fe:	2200      	movs	r2, #0
 8064100:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceResponse_Frame.frame.data7 = 0;
 8064102:	4b13      	ldr	r3, [pc, #76]	@ (8064150 <DiagService_DSC_ExtendedSession+0xc0>)
 8064104:	2200      	movs	r2, #0
 8064106:	741a      	strb	r2, [r3, #16]
	Dcm_DiagServiceRequest_Frame.frame.idType = 0;
 8064108:	4b13      	ldr	r3, [pc, #76]	@ (8064158 <DiagService_DSC_ExtendedSession+0xc8>)
 806410a:	2200      	movs	r2, #0
 806410c:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceRequest_Frame.frame.id = 0;
 806410e:	4b12      	ldr	r3, [pc, #72]	@ (8064158 <DiagService_DSC_ExtendedSession+0xc8>)
 8064110:	2200      	movs	r2, #0
 8064112:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceRequest_Frame.frame.dlc = 0;
 8064114:	4b10      	ldr	r3, [pc, #64]	@ (8064158 <DiagService_DSC_ExtendedSession+0xc8>)
 8064116:	2200      	movs	r2, #0
 8064118:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceRequest_Frame.frame.data0 = 0;
 806411a:	4b0f      	ldr	r3, [pc, #60]	@ (8064158 <DiagService_DSC_ExtendedSession+0xc8>)
 806411c:	2200      	movs	r2, #0
 806411e:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceRequest_Frame.frame.data1 = 0;
 8064120:	4b0d      	ldr	r3, [pc, #52]	@ (8064158 <DiagService_DSC_ExtendedSession+0xc8>)
 8064122:	2200      	movs	r2, #0
 8064124:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceRequest_Frame.frame.data2 = 0;
 8064126:	4b0c      	ldr	r3, [pc, #48]	@ (8064158 <DiagService_DSC_ExtendedSession+0xc8>)
 8064128:	2200      	movs	r2, #0
 806412a:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceRequest_Frame.frame.data3 = 0;
 806412c:	4b0a      	ldr	r3, [pc, #40]	@ (8064158 <DiagService_DSC_ExtendedSession+0xc8>)
 806412e:	2200      	movs	r2, #0
 8064130:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceRequest_Frame.frame.data4 = 0;
 8064132:	4b09      	ldr	r3, [pc, #36]	@ (8064158 <DiagService_DSC_ExtendedSession+0xc8>)
 8064134:	2200      	movs	r2, #0
 8064136:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceRequest_Frame.frame.data5 = 0;
 8064138:	4b07      	ldr	r3, [pc, #28]	@ (8064158 <DiagService_DSC_ExtendedSession+0xc8>)
 806413a:	2200      	movs	r2, #0
 806413c:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceRequest_Frame.frame.data6 = 0;
 806413e:	4b06      	ldr	r3, [pc, #24]	@ (8064158 <DiagService_DSC_ExtendedSession+0xc8>)
 8064140:	2200      	movs	r2, #0
 8064142:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceRequest_Frame.frame.data7 = 0;
 8064144:	4b04      	ldr	r3, [pc, #16]	@ (8064158 <DiagService_DSC_ExtendedSession+0xc8>)
 8064146:	2200      	movs	r2, #0
 8064148:	741a      	strb	r2, [r3, #16]
}
 806414a:	bf00      	nop
 806414c:	bd80      	pop	{r7, pc}
 806414e:	bf00      	nop
 8064150:	20010374 	.word	0x20010374
 8064154:	2001fda8 	.word	0x2001fda8
 8064158:	20010388 	.word	0x20010388

0806415c <DiagService_DSC_ProgrammingSession>:
static void DiagService_DSC_ProgrammingSession(void)
{
 806415c:	b580      	push	{r7, lr}
 806415e:	af00      	add	r7, sp, #0
	Dcm_DiagServiceResponse_Frame.frame.dlc = 3;
 8064160:	4b0f      	ldr	r3, [pc, #60]	@ (80641a0 <DiagService_DSC_ProgrammingSession+0x44>)
 8064162:	2203      	movs	r2, #3
 8064164:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceResponse_Frame.frame.id = 0x701;
 8064166:	4b0e      	ldr	r3, [pc, #56]	@ (80641a0 <DiagService_DSC_ProgrammingSession+0x44>)
 8064168:	f240 7201 	movw	r2, #1793	@ 0x701
 806416c:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceResponse_Frame.frame.idType = 1;
 806416e:	4b0c      	ldr	r3, [pc, #48]	@ (80641a0 <DiagService_DSC_ProgrammingSession+0x44>)
 8064170:	2201      	movs	r2, #1
 8064172:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceResponse_Frame.frame.data0 = 0x02;
 8064174:	4b0a      	ldr	r3, [pc, #40]	@ (80641a0 <DiagService_DSC_ProgrammingSession+0x44>)
 8064176:	2202      	movs	r2, #2
 8064178:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceResponse_Frame.frame.data1 = 0x50;
 806417a:	4b09      	ldr	r3, [pc, #36]	@ (80641a0 <DiagService_DSC_ProgrammingSession+0x44>)
 806417c:	2250      	movs	r2, #80	@ 0x50
 806417e:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceResponse_Frame.frame.data2 = 0x02;
 8064180:	4b07      	ldr	r3, [pc, #28]	@ (80641a0 <DiagService_DSC_ProgrammingSession+0x44>)
 8064182:	2202      	movs	r2, #2
 8064184:	72da      	strb	r2, [r3, #11]
	Dcm_DiagnosticSession = PROGRAMMING;
 8064186:	4b07      	ldr	r3, [pc, #28]	@ (80641a4 <DiagService_DSC_ProgrammingSession+0x48>)
 8064188:	2202      	movs	r2, #2
 806418a:	701a      	strb	r2, [r3, #0]
	CanSpi_Transmit(&Dcm_DiagServiceResponse_Frame);
 806418c:	4804      	ldr	r0, [pc, #16]	@ (80641a0 <DiagService_DSC_ProgrammingSession+0x44>)
 806418e:	f7fd fc83 	bl	8061a98 <CanSpi_Transmit>
	NvM_WriteAll();
 8064192:	f001 f813 	bl	80651bc <NvM_WriteAll>
	EcuM_PerformReset(0);
 8064196:	2000      	movs	r0, #0
 8064198:	f001 f97e 	bl	8065498 <EcuM_PerformReset>
}
 806419c:	bf00      	nop
 806419e:	bd80      	pop	{r7, pc}
 80641a0:	20010374 	.word	0x20010374
 80641a4:	2001fda8 	.word	0x2001fda8

080641a8 <DiagService_ER_HardReset>:
static void DiagService_ER_HardReset(void)
{
 80641a8:	b580      	push	{r7, lr}
 80641aa:	af00      	add	r7, sp, #0
	Dcm_DiagServiceResponse_Frame.frame.dlc = 3;
 80641ac:	4b0f      	ldr	r3, [pc, #60]	@ (80641ec <DiagService_ER_HardReset+0x44>)
 80641ae:	2203      	movs	r2, #3
 80641b0:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceResponse_Frame.frame.id = 0x701;
 80641b2:	4b0e      	ldr	r3, [pc, #56]	@ (80641ec <DiagService_ER_HardReset+0x44>)
 80641b4:	f240 7201 	movw	r2, #1793	@ 0x701
 80641b8:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceResponse_Frame.frame.idType = 1;
 80641ba:	4b0c      	ldr	r3, [pc, #48]	@ (80641ec <DiagService_ER_HardReset+0x44>)
 80641bc:	2201      	movs	r2, #1
 80641be:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceResponse_Frame.frame.data0 = 0x02;
 80641c0:	4b0a      	ldr	r3, [pc, #40]	@ (80641ec <DiagService_ER_HardReset+0x44>)
 80641c2:	2202      	movs	r2, #2
 80641c4:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceResponse_Frame.frame.data1 = 0x51;
 80641c6:	4b09      	ldr	r3, [pc, #36]	@ (80641ec <DiagService_ER_HardReset+0x44>)
 80641c8:	2251      	movs	r2, #81	@ 0x51
 80641ca:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceResponse_Frame.frame.data2 = 0x01;
 80641cc:	4b07      	ldr	r3, [pc, #28]	@ (80641ec <DiagService_ER_HardReset+0x44>)
 80641ce:	2201      	movs	r2, #1
 80641d0:	72da      	strb	r2, [r3, #11]
	Dcm_DiagnosticSession = HARDRESET;
 80641d2:	4b07      	ldr	r3, [pc, #28]	@ (80641f0 <DiagService_ER_HardReset+0x48>)
 80641d4:	2205      	movs	r2, #5
 80641d6:	701a      	strb	r2, [r3, #0]
	CanSpi_Transmit(&Dcm_DiagServiceResponse_Frame);
 80641d8:	4804      	ldr	r0, [pc, #16]	@ (80641ec <DiagService_ER_HardReset+0x44>)
 80641da:	f7fd fc5d 	bl	8061a98 <CanSpi_Transmit>
	NvM_WriteAll();
 80641de:	f000 ffed 	bl	80651bc <NvM_WriteAll>
	EcuM_PerformReset(0);
 80641e2:	2000      	movs	r0, #0
 80641e4:	f001 f958 	bl	8065498 <EcuM_PerformReset>
}
 80641e8:	bf00      	nop
 80641ea:	bd80      	pop	{r7, pc}
 80641ec:	20010374 	.word	0x20010374
 80641f0:	2001fda8 	.word	0x2001fda8

080641f4 <DiagService_ER_SoftReset>:
static void DiagService_ER_SoftReset(void)
{
 80641f4:	b580      	push	{r7, lr}
 80641f6:	af00      	add	r7, sp, #0
	Dcm_DiagServiceResponse_Frame.frame.dlc = 3;
 80641f8:	4b0f      	ldr	r3, [pc, #60]	@ (8064238 <DiagService_ER_SoftReset+0x44>)
 80641fa:	2203      	movs	r2, #3
 80641fc:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceResponse_Frame.frame.id = 0x701;
 80641fe:	4b0e      	ldr	r3, [pc, #56]	@ (8064238 <DiagService_ER_SoftReset+0x44>)
 8064200:	f240 7201 	movw	r2, #1793	@ 0x701
 8064204:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceResponse_Frame.frame.idType = 1;
 8064206:	4b0c      	ldr	r3, [pc, #48]	@ (8064238 <DiagService_ER_SoftReset+0x44>)
 8064208:	2201      	movs	r2, #1
 806420a:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceResponse_Frame.frame.data0 = 0x02;
 806420c:	4b0a      	ldr	r3, [pc, #40]	@ (8064238 <DiagService_ER_SoftReset+0x44>)
 806420e:	2202      	movs	r2, #2
 8064210:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceResponse_Frame.frame.data1 = 0x51;
 8064212:	4b09      	ldr	r3, [pc, #36]	@ (8064238 <DiagService_ER_SoftReset+0x44>)
 8064214:	2251      	movs	r2, #81	@ 0x51
 8064216:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceResponse_Frame.frame.data2 = 0x03;
 8064218:	4b07      	ldr	r3, [pc, #28]	@ (8064238 <DiagService_ER_SoftReset+0x44>)
 806421a:	2203      	movs	r2, #3
 806421c:	72da      	strb	r2, [r3, #11]
	Dcm_DiagnosticSession = SOFTRESET;
 806421e:	4b07      	ldr	r3, [pc, #28]	@ (806423c <DiagService_ER_SoftReset+0x48>)
 8064220:	2206      	movs	r2, #6
 8064222:	701a      	strb	r2, [r3, #0]
	CanSpi_Transmit(&Dcm_DiagServiceResponse_Frame);
 8064224:	4804      	ldr	r0, [pc, #16]	@ (8064238 <DiagService_ER_SoftReset+0x44>)
 8064226:	f7fd fc37 	bl	8061a98 <CanSpi_Transmit>
	NvM_WriteAll();
 806422a:	f000 ffc7 	bl	80651bc <NvM_WriteAll>
	EcuM_PerformReset(0);
 806422e:	2000      	movs	r0, #0
 8064230:	f001 f932 	bl	8065498 <EcuM_PerformReset>
}
 8064234:	bf00      	nop
 8064236:	bd80      	pop	{r7, pc}
 8064238:	20010374 	.word	0x20010374
 806423c:	2001fda8 	.word	0x2001fda8

08064240 <DiagService_CDTCI_ClearDiagnosticInformation>:
static void DiagService_CDTCI_ClearDiagnosticInformation(void)
{
 8064240:	b580      	push	{r7, lr}
 8064242:	af00      	add	r7, sp, #0
	Dcm_DiagServiceResponse_Frame.frame.dlc = 2;
 8064244:	4b3f      	ldr	r3, [pc, #252]	@ (8064344 <DiagService_CDTCI_ClearDiagnosticInformation+0x104>)
 8064246:	2202      	movs	r2, #2
 8064248:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceResponse_Frame.frame.id = 0x701;
 806424a:	4b3e      	ldr	r3, [pc, #248]	@ (8064344 <DiagService_CDTCI_ClearDiagnosticInformation+0x104>)
 806424c:	f240 7201 	movw	r2, #1793	@ 0x701
 8064250:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceResponse_Frame.frame.idType = 1;
 8064252:	4b3c      	ldr	r3, [pc, #240]	@ (8064344 <DiagService_CDTCI_ClearDiagnosticInformation+0x104>)
 8064254:	2201      	movs	r2, #1
 8064256:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceResponse_Frame.frame.data0 = 0x01;
 8064258:	4b3a      	ldr	r3, [pc, #232]	@ (8064344 <DiagService_CDTCI_ClearDiagnosticInformation+0x104>)
 806425a:	2201      	movs	r2, #1
 806425c:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceResponse_Frame.frame.data1 = 0x54;
 806425e:	4b39      	ldr	r3, [pc, #228]	@ (8064344 <DiagService_CDTCI_ClearDiagnosticInformation+0x104>)
 8064260:	2254      	movs	r2, #84	@ 0x54
 8064262:	729a      	strb	r2, [r3, #10]
	memset(UartH_ErrorArr, 0, sizeof(UartH_ErrorArr));
 8064264:	2214      	movs	r2, #20
 8064266:	2100      	movs	r1, #0
 8064268:	4837      	ldr	r0, [pc, #220]	@ (8064348 <DiagService_CDTCI_ClearDiagnosticInformation+0x108>)
 806426a:	f00c ffe1 	bl	8071230 <memset>
	memset(EcuMSystem_OvwArr.faultArr, 0, sizeof(EcuMSystem_OvwArr.faultArr));
 806426e:	2238      	movs	r2, #56	@ 0x38
 8064270:	2100      	movs	r1, #0
 8064272:	4836      	ldr	r0, [pc, #216]	@ (806434c <DiagService_CDTCI_ClearDiagnosticInformation+0x10c>)
 8064274:	f00c ffdc 	bl	8071230 <memset>
	memset(EcuMSystem_OvwArr.resetArr, 0, sizeof(EcuMSystem_OvwArr.resetArr));
 8064278:	2258      	movs	r2, #88	@ 0x58
 806427a:	2100      	movs	r1, #0
 806427c:	4834      	ldr	r0, [pc, #208]	@ (8064350 <DiagService_CDTCI_ClearDiagnosticInformation+0x110>)
 806427e:	f00c ffd7 	bl	8071230 <memset>
	memset(CanSpi_ErrorArr, 0, sizeof(CanSpi_ErrorArr));
 8064282:	2224      	movs	r2, #36	@ 0x24
 8064284:	2100      	movs	r1, #0
 8064286:	4833      	ldr	r0, [pc, #204]	@ (8064354 <DiagService_CDTCI_ClearDiagnosticInformation+0x114>)
 8064288:	f00c ffd2 	bl	8071230 <memset>
	memset(CanSpi_Bus_ErrorArr, 0, sizeof(CanSpi_Bus_ErrorArr));
 806428c:	220c      	movs	r2, #12
 806428e:	2100      	movs	r1, #0
 8064290:	4831      	ldr	r0, [pc, #196]	@ (8064358 <DiagService_CDTCI_ClearDiagnosticInformation+0x118>)
 8064292:	f00c ffcd 	bl	8071230 <memset>
	memset(Adc_Error, 0, sizeof(Adc_Error));
 8064296:	220c      	movs	r2, #12
 8064298:	2100      	movs	r1, #0
 806429a:	4830      	ldr	r0, [pc, #192]	@ (806435c <DiagService_CDTCI_ClearDiagnosticInformation+0x11c>)
 806429c:	f00c ffc8 	bl	8071230 <memset>
	memset(Tim_ErrorStatus, 0, sizeof(Tim_ErrorStatus));
 80642a0:	2208      	movs	r2, #8
 80642a2:	2100      	movs	r1, #0
 80642a4:	482e      	ldr	r0, [pc, #184]	@ (8064360 <DiagService_CDTCI_ClearDiagnosticInformation+0x120>)
 80642a6:	f00c ffc3 	bl	8071230 <memset>
	memset(Dem_DTCStoreArray, 0, sizeof(Dem_DTCStoreArray));
 80642aa:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 80642ae:	2100      	movs	r1, #0
 80642b0:	482c      	ldr	r0, [pc, #176]	@ (8064364 <DiagService_CDTCI_ClearDiagnosticInformation+0x124>)
 80642b2:	f00c ffbd 	bl	8071230 <memset>
	CanSpi_Transmit(&Dcm_DiagServiceResponse_Frame);
 80642b6:	4823      	ldr	r0, [pc, #140]	@ (8064344 <DiagService_CDTCI_ClearDiagnosticInformation+0x104>)
 80642b8:	f7fd fbee 	bl	8061a98 <CanSpi_Transmit>
	Dcm_DiagServiceResponse_Frame.frame.idType = 0;
 80642bc:	4b21      	ldr	r3, [pc, #132]	@ (8064344 <DiagService_CDTCI_ClearDiagnosticInformation+0x104>)
 80642be:	2200      	movs	r2, #0
 80642c0:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceResponse_Frame.frame.id = 0;
 80642c2:	4b20      	ldr	r3, [pc, #128]	@ (8064344 <DiagService_CDTCI_ClearDiagnosticInformation+0x104>)
 80642c4:	2200      	movs	r2, #0
 80642c6:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceResponse_Frame.frame.dlc = 0;
 80642c8:	4b1e      	ldr	r3, [pc, #120]	@ (8064344 <DiagService_CDTCI_ClearDiagnosticInformation+0x104>)
 80642ca:	2200      	movs	r2, #0
 80642cc:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceResponse_Frame.frame.data0 = 0;
 80642ce:	4b1d      	ldr	r3, [pc, #116]	@ (8064344 <DiagService_CDTCI_ClearDiagnosticInformation+0x104>)
 80642d0:	2200      	movs	r2, #0
 80642d2:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceResponse_Frame.frame.data1 = 0;
 80642d4:	4b1b      	ldr	r3, [pc, #108]	@ (8064344 <DiagService_CDTCI_ClearDiagnosticInformation+0x104>)
 80642d6:	2200      	movs	r2, #0
 80642d8:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceResponse_Frame.frame.data2 = 0;
 80642da:	4b1a      	ldr	r3, [pc, #104]	@ (8064344 <DiagService_CDTCI_ClearDiagnosticInformation+0x104>)
 80642dc:	2200      	movs	r2, #0
 80642de:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceResponse_Frame.frame.data3 = 0;
 80642e0:	4b18      	ldr	r3, [pc, #96]	@ (8064344 <DiagService_CDTCI_ClearDiagnosticInformation+0x104>)
 80642e2:	2200      	movs	r2, #0
 80642e4:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceResponse_Frame.frame.data4 = 0;
 80642e6:	4b17      	ldr	r3, [pc, #92]	@ (8064344 <DiagService_CDTCI_ClearDiagnosticInformation+0x104>)
 80642e8:	2200      	movs	r2, #0
 80642ea:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceResponse_Frame.frame.data5 = 0;
 80642ec:	4b15      	ldr	r3, [pc, #84]	@ (8064344 <DiagService_CDTCI_ClearDiagnosticInformation+0x104>)
 80642ee:	2200      	movs	r2, #0
 80642f0:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceResponse_Frame.frame.data6 = 0;
 80642f2:	4b14      	ldr	r3, [pc, #80]	@ (8064344 <DiagService_CDTCI_ClearDiagnosticInformation+0x104>)
 80642f4:	2200      	movs	r2, #0
 80642f6:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceResponse_Frame.frame.data7 = 0;
 80642f8:	4b12      	ldr	r3, [pc, #72]	@ (8064344 <DiagService_CDTCI_ClearDiagnosticInformation+0x104>)
 80642fa:	2200      	movs	r2, #0
 80642fc:	741a      	strb	r2, [r3, #16]
	Dcm_DiagServiceRequest_Frame.frame.idType = 0;
 80642fe:	4b1a      	ldr	r3, [pc, #104]	@ (8064368 <DiagService_CDTCI_ClearDiagnosticInformation+0x128>)
 8064300:	2200      	movs	r2, #0
 8064302:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceRequest_Frame.frame.id = 0;
 8064304:	4b18      	ldr	r3, [pc, #96]	@ (8064368 <DiagService_CDTCI_ClearDiagnosticInformation+0x128>)
 8064306:	2200      	movs	r2, #0
 8064308:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceRequest_Frame.frame.dlc = 0;
 806430a:	4b17      	ldr	r3, [pc, #92]	@ (8064368 <DiagService_CDTCI_ClearDiagnosticInformation+0x128>)
 806430c:	2200      	movs	r2, #0
 806430e:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceRequest_Frame.frame.data0 = 0;
 8064310:	4b15      	ldr	r3, [pc, #84]	@ (8064368 <DiagService_CDTCI_ClearDiagnosticInformation+0x128>)
 8064312:	2200      	movs	r2, #0
 8064314:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceRequest_Frame.frame.data1 = 0;
 8064316:	4b14      	ldr	r3, [pc, #80]	@ (8064368 <DiagService_CDTCI_ClearDiagnosticInformation+0x128>)
 8064318:	2200      	movs	r2, #0
 806431a:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceRequest_Frame.frame.data2 = 0;
 806431c:	4b12      	ldr	r3, [pc, #72]	@ (8064368 <DiagService_CDTCI_ClearDiagnosticInformation+0x128>)
 806431e:	2200      	movs	r2, #0
 8064320:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceRequest_Frame.frame.data3 = 0;
 8064322:	4b11      	ldr	r3, [pc, #68]	@ (8064368 <DiagService_CDTCI_ClearDiagnosticInformation+0x128>)
 8064324:	2200      	movs	r2, #0
 8064326:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceRequest_Frame.frame.data4 = 0;
 8064328:	4b0f      	ldr	r3, [pc, #60]	@ (8064368 <DiagService_CDTCI_ClearDiagnosticInformation+0x128>)
 806432a:	2200      	movs	r2, #0
 806432c:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceRequest_Frame.frame.data5 = 0;
 806432e:	4b0e      	ldr	r3, [pc, #56]	@ (8064368 <DiagService_CDTCI_ClearDiagnosticInformation+0x128>)
 8064330:	2200      	movs	r2, #0
 8064332:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceRequest_Frame.frame.data6 = 0;
 8064334:	4b0c      	ldr	r3, [pc, #48]	@ (8064368 <DiagService_CDTCI_ClearDiagnosticInformation+0x128>)
 8064336:	2200      	movs	r2, #0
 8064338:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceRequest_Frame.frame.data7 = 0;
 806433a:	4b0b      	ldr	r3, [pc, #44]	@ (8064368 <DiagService_CDTCI_ClearDiagnosticInformation+0x128>)
 806433c:	2200      	movs	r2, #0
 806433e:	741a      	strb	r2, [r3, #16]
}
 8064340:	bf00      	nop
 8064342:	bd80      	pop	{r7, pc}
 8064344:	20010374 	.word	0x20010374
 8064348:	200103e8 	.word	0x200103e8
 806434c:	2001fdc0 	.word	0x2001fdc0
 8064350:	2001fdf8 	.word	0x2001fdf8
 8064354:	20010318 	.word	0x20010318
 8064358:	2001033c 	.word	0x2001033c
 806435c:	200105fc 	.word	0x200105fc
 8064360:	2001061c 	.word	0x2001061c
 8064364:	20010478 	.word	0x20010478
 8064368:	20010388 	.word	0x20010388

0806436c <DiagService_RDTCI_ReadDTCInformationSupportedDtc>:
static void DiagService_RDTCI_ReadDTCInformationSupportedDtc(void)
{
 806436c:	b580      	push	{r7, lr}
 806436e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8064370:	b672      	cpsid	i
}
 8064372:	bf00      	nop
	__disable_irq();
	Dcm_DiagServiceResponse_Frame.frame.dlc = 8;
 8064374:	4b0f      	ldr	r3, [pc, #60]	@ (80643b4 <DiagService_RDTCI_ReadDTCInformationSupportedDtc+0x48>)
 8064376:	2208      	movs	r2, #8
 8064378:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceResponse_Frame.frame.id = 0x701;
 806437a:	4b0e      	ldr	r3, [pc, #56]	@ (80643b4 <DiagService_RDTCI_ReadDTCInformationSupportedDtc+0x48>)
 806437c:	f240 7201 	movw	r2, #1793	@ 0x701
 8064380:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceResponse_Frame.frame.idType = 1;
 8064382:	4b0c      	ldr	r3, [pc, #48]	@ (80643b4 <DiagService_RDTCI_ReadDTCInformationSupportedDtc+0x48>)
 8064384:	2201      	movs	r2, #1
 8064386:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceResponse_Frame.frame.data0 = 0x02;
 8064388:	4b0a      	ldr	r3, [pc, #40]	@ (80643b4 <DiagService_RDTCI_ReadDTCInformationSupportedDtc+0x48>)
 806438a:	2202      	movs	r2, #2
 806438c:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceResponse_Frame.frame.data1 = 0x59;
 806438e:	4b09      	ldr	r3, [pc, #36]	@ (80643b4 <DiagService_RDTCI_ReadDTCInformationSupportedDtc+0x48>)
 8064390:	2259      	movs	r2, #89	@ 0x59
 8064392:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceResponse_Frame.frame.data2 = 0x0A;
 8064394:	4b07      	ldr	r3, [pc, #28]	@ (80643b4 <DiagService_RDTCI_ReadDTCInformationSupportedDtc+0x48>)
 8064396:	220a      	movs	r2, #10
 8064398:	72da      	strb	r2, [r3, #11]
	CanSpi_Transmit(&Dcm_DiagServiceResponse_Frame);
 806439a:	4806      	ldr	r0, [pc, #24]	@ (80643b4 <DiagService_RDTCI_ReadDTCInformationSupportedDtc+0x48>)
 806439c:	f7fd fb7c 	bl	8061a98 <CanSpi_Transmit>
	Dcm_TxIsoTp((uint8*)Dem_DTCStoreArray, 13 * sizeof(Dem_DTC_t));
 80643a0:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 80643a4:	4804      	ldr	r0, [pc, #16]	@ (80643b8 <DiagService_RDTCI_ReadDTCInformationSupportedDtc+0x4c>)
 80643a6:	f7fe f9eb 	bl	8062780 <Dcm_TxIsoTp>
  __ASM volatile ("cpsie i" : : : "memory");
 80643aa:	b662      	cpsie	i
}
 80643ac:	bf00      	nop
	__enable_irq();
}
 80643ae:	bf00      	nop
 80643b0:	bd80      	pop	{r7, pc}
 80643b2:	bf00      	nop
 80643b4:	20010374 	.word	0x20010374
 80643b8:	20010478 	.word	0x20010478

080643bc <Dcm_MainFunction>:
void Dcm_MainFunction(void)
{
 80643bc:	b580      	push	{r7, lr}
 80643be:	b082      	sub	sp, #8
 80643c0:	af00      	add	r7, sp, #0
	/* Main counter. */
	static uint32 Dcm_MainCounter = 0;
	/* Increment time without reset. */
	Dcm_AliveCounter++;
 80643c2:	4b83      	ldr	r3, [pc, #524]	@ (80645d0 <Dcm_MainFunction+0x214>)
 80643c4:	681b      	ldr	r3, [r3, #0]
 80643c6:	3301      	adds	r3, #1
 80643c8:	4a81      	ldr	r2, [pc, #516]	@ (80645d0 <Dcm_MainFunction+0x214>)
 80643ca:	6013      	str	r3, [r2, #0]
	/* Set diagnostic session to default. */
	if(Dcm_MainCounter == 0) Dcm_DiagnosticSession = DEFAULT;
 80643cc:	4b81      	ldr	r3, [pc, #516]	@ (80645d4 <Dcm_MainFunction+0x218>)
 80643ce:	681b      	ldr	r3, [r3, #0]
 80643d0:	2b00      	cmp	r3, #0
 80643d2:	d102      	bne.n	80643da <Dcm_MainFunction+0x1e>
 80643d4:	4b80      	ldr	r3, [pc, #512]	@ (80645d8 <Dcm_MainFunction+0x21c>)
 80643d6:	2200      	movs	r2, #0
 80643d8:	701a      	strb	r2, [r3, #0]
	else
	{
		/* Do nothing. */
	}
	if(Dcm_DiagServiceRequest_Frame.frame.data1 == 0x3E) DiagService_TP_TesterPresent();
 80643da:	4b80      	ldr	r3, [pc, #512]	@ (80645dc <Dcm_MainFunction+0x220>)
 80643dc:	7a9b      	ldrb	r3, [r3, #10]
 80643de:	2b3e      	cmp	r3, #62	@ 0x3e
 80643e0:	d101      	bne.n	80643e6 <Dcm_MainFunction+0x2a>
 80643e2:	f7fe fb51 	bl	8062a88 <DiagService_TP_TesterPresent>
	else
	{
		/* Do nothing. */
	}
	if(Dcm_DiagServiceRequest_Frame.frame.data1 == 0x28) DiagService_CC_CommunicationControl();
 80643e6:	4b7d      	ldr	r3, [pc, #500]	@ (80645dc <Dcm_MainFunction+0x220>)
 80643e8:	7a9b      	ldrb	r3, [r3, #10]
 80643ea:	2b28      	cmp	r3, #40	@ 0x28
 80643ec:	d101      	bne.n	80643f2 <Dcm_MainFunction+0x36>
 80643ee:	f7fe fad9 	bl	80629a4 <DiagService_CC_CommunicationControl>
	else
	{
		/* Do nothing. */
	}
	if(Dcm_DiagServiceRequest_Frame.frame.data1 == 0x85) DiagService_CDTCS_ControlDTCSetting();
 80643f2:	4b7a      	ldr	r3, [pc, #488]	@ (80645dc <Dcm_MainFunction+0x220>)
 80643f4:	7a9b      	ldrb	r3, [r3, #10]
 80643f6:	2b85      	cmp	r3, #133	@ 0x85
 80643f8:	d101      	bne.n	80643fe <Dcm_MainFunction+0x42>
 80643fa:	f7fe fa61 	bl	80628c0 <DiagService_CDTCS_ControlDTCSetting>
	else
	{
		/* Do nothing. */
	}
	/* Process diagnostic session control. */
	if(Dcm_DiagServiceRequest_Frame.frame.data1 == 0x10)
 80643fe:	4b77      	ldr	r3, [pc, #476]	@ (80645dc <Dcm_MainFunction+0x220>)
 8064400:	7a9b      	ldrb	r3, [r3, #10]
 8064402:	2b10      	cmp	r3, #16
 8064404:	d129      	bne.n	806445a <Dcm_MainFunction+0x9e>
	{
		/* DEFAULT */
		if(Dcm_DiagServiceRequest_Frame.frame.data2 == 0x01) DiagService_DSC_DefaultSession();
 8064406:	4b75      	ldr	r3, [pc, #468]	@ (80645dc <Dcm_MainFunction+0x220>)
 8064408:	7adb      	ldrb	r3, [r3, #11]
 806440a:	2b01      	cmp	r3, #1
 806440c:	d101      	bne.n	8064412 <Dcm_MainFunction+0x56>
 806440e:	f7ff fdd9 	bl	8063fc4 <DiagService_DSC_DefaultSession>
		else
		{
			/* Do nothing. */
		}
		/* EXTENDED */
		if(Dcm_DiagServiceRequest_Frame.frame.data2 == 0x03) DiagService_DSC_ExtendedSession();
 8064412:	4b72      	ldr	r3, [pc, #456]	@ (80645dc <Dcm_MainFunction+0x220>)
 8064414:	7adb      	ldrb	r3, [r3, #11]
 8064416:	2b03      	cmp	r3, #3
 8064418:	d101      	bne.n	806441e <Dcm_MainFunction+0x62>
 806441a:	f7ff fe39 	bl	8064090 <DiagService_DSC_ExtendedSession>
		else
		{
			/* Do nothing. */
		}
		/* PROGRAMMING */
		if(Dcm_DiagServiceRequest_Frame.frame.data2 == 0x02 && Dcm_DiagnosticSession == EXTENDED) DiagService_DSC_ProgrammingSession();
 806441e:	4b6f      	ldr	r3, [pc, #444]	@ (80645dc <Dcm_MainFunction+0x220>)
 8064420:	7adb      	ldrb	r3, [r3, #11]
 8064422:	2b02      	cmp	r3, #2
 8064424:	d105      	bne.n	8064432 <Dcm_MainFunction+0x76>
 8064426:	4b6c      	ldr	r3, [pc, #432]	@ (80645d8 <Dcm_MainFunction+0x21c>)
 8064428:	781b      	ldrb	r3, [r3, #0]
 806442a:	2b01      	cmp	r3, #1
 806442c:	d101      	bne.n	8064432 <Dcm_MainFunction+0x76>
 806442e:	f7ff fe95 	bl	806415c <DiagService_DSC_ProgrammingSession>
		else
		{
			/* Do nothing. */
		}
		/* CODING */
		if(Dcm_DiagServiceRequest_Frame.frame.data2 == 0x04 && Dcm_DiagnosticSession == EXTENDED) DiagService_DSC_CodingSession();
 8064432:	4b6a      	ldr	r3, [pc, #424]	@ (80645dc <Dcm_MainFunction+0x220>)
 8064434:	7adb      	ldrb	r3, [r3, #11]
 8064436:	2b04      	cmp	r3, #4
 8064438:	d105      	bne.n	8064446 <Dcm_MainFunction+0x8a>
 806443a:	4b67      	ldr	r3, [pc, #412]	@ (80645d8 <Dcm_MainFunction+0x21c>)
 806443c:	781b      	ldrb	r3, [r3, #0]
 806443e:	2b01      	cmp	r3, #1
 8064440:	d101      	bne.n	8064446 <Dcm_MainFunction+0x8a>
 8064442:	f7fe fbef 	bl	8062c24 <DiagService_DSC_CodingSession>
		else
		{
			/* Do nothing. */
		}
		/* CALIBRATION */
		if(Dcm_DiagServiceRequest_Frame.frame.data2 == 0x05 && Dcm_DiagnosticSession == EXTENDED) DiagService_DSC_CalibrationSession();
 8064446:	4b65      	ldr	r3, [pc, #404]	@ (80645dc <Dcm_MainFunction+0x220>)
 8064448:	7adb      	ldrb	r3, [r3, #11]
 806444a:	2b05      	cmp	r3, #5
 806444c:	d105      	bne.n	806445a <Dcm_MainFunction+0x9e>
 806444e:	4b62      	ldr	r3, [pc, #392]	@ (80645d8 <Dcm_MainFunction+0x21c>)
 8064450:	781b      	ldrb	r3, [r3, #0]
 8064452:	2b01      	cmp	r3, #1
 8064454:	d101      	bne.n	806445a <Dcm_MainFunction+0x9e>
 8064456:	f7fe fc0b 	bl	8062c70 <DiagService_DSC_CalibrationSession>
	else
	{
		/* Do nothing. */
	}

	if(Dcm_DiagServiceRequest_Frame.frame.data3 == 0x86 && Dcm_DiagServiceRequest_Frame.frame.data2 == 0xF1 && Dcm_DiagServiceRequest_Frame.frame.data1 == 0x22) DiagService_RDBI_ReadActiveDiagnosticSession();
 806445a:	4b60      	ldr	r3, [pc, #384]	@ (80645dc <Dcm_MainFunction+0x220>)
 806445c:	7b1b      	ldrb	r3, [r3, #12]
 806445e:	2b86      	cmp	r3, #134	@ 0x86
 8064460:	d109      	bne.n	8064476 <Dcm_MainFunction+0xba>
 8064462:	4b5e      	ldr	r3, [pc, #376]	@ (80645dc <Dcm_MainFunction+0x220>)
 8064464:	7adb      	ldrb	r3, [r3, #11]
 8064466:	2bf1      	cmp	r3, #241	@ 0xf1
 8064468:	d105      	bne.n	8064476 <Dcm_MainFunction+0xba>
 806446a:	4b5c      	ldr	r3, [pc, #368]	@ (80645dc <Dcm_MainFunction+0x220>)
 806446c:	7a9b      	ldrb	r3, [r3, #10]
 806446e:	2b22      	cmp	r3, #34	@ 0x22
 8064470:	d101      	bne.n	8064476 <Dcm_MainFunction+0xba>
 8064472:	f7fe fe7f 	bl	8063174 <DiagService_RDBI_ReadActiveDiagnosticSession>
	else
	{
		/* Do nothing. */
	}
	/* Execute hard reset. */
	if(Dcm_DiagServiceRequest_Frame.frame.data1 == 0x11 && Dcm_DiagServiceRequest_Frame.frame.data2 == 0x01 &&Dcm_DiagServiceRequest_Frame.frame.data0 == 0x02) DiagService_ER_HardReset();
 8064476:	4b59      	ldr	r3, [pc, #356]	@ (80645dc <Dcm_MainFunction+0x220>)
 8064478:	7a9b      	ldrb	r3, [r3, #10]
 806447a:	2b11      	cmp	r3, #17
 806447c:	d109      	bne.n	8064492 <Dcm_MainFunction+0xd6>
 806447e:	4b57      	ldr	r3, [pc, #348]	@ (80645dc <Dcm_MainFunction+0x220>)
 8064480:	7adb      	ldrb	r3, [r3, #11]
 8064482:	2b01      	cmp	r3, #1
 8064484:	d105      	bne.n	8064492 <Dcm_MainFunction+0xd6>
 8064486:	4b55      	ldr	r3, [pc, #340]	@ (80645dc <Dcm_MainFunction+0x220>)
 8064488:	7a5b      	ldrb	r3, [r3, #9]
 806448a:	2b02      	cmp	r3, #2
 806448c:	d101      	bne.n	8064492 <Dcm_MainFunction+0xd6>
 806448e:	f7ff fe8b 	bl	80641a8 <DiagService_ER_HardReset>
	else
	{
		/* Do nothing. */
	}
	/* Execute soft reset. */
	if(Dcm_DiagServiceRequest_Frame.frame.data1 == 0x11 && Dcm_DiagServiceRequest_Frame.frame.data2 == 0x03 && Dcm_DiagServiceRequest_Frame.frame.data0 == 0x02) DiagService_ER_SoftReset();
 8064492:	4b52      	ldr	r3, [pc, #328]	@ (80645dc <Dcm_MainFunction+0x220>)
 8064494:	7a9b      	ldrb	r3, [r3, #10]
 8064496:	2b11      	cmp	r3, #17
 8064498:	d109      	bne.n	80644ae <Dcm_MainFunction+0xf2>
 806449a:	4b50      	ldr	r3, [pc, #320]	@ (80645dc <Dcm_MainFunction+0x220>)
 806449c:	7adb      	ldrb	r3, [r3, #11]
 806449e:	2b03      	cmp	r3, #3
 80644a0:	d105      	bne.n	80644ae <Dcm_MainFunction+0xf2>
 80644a2:	4b4e      	ldr	r3, [pc, #312]	@ (80645dc <Dcm_MainFunction+0x220>)
 80644a4:	7a5b      	ldrb	r3, [r3, #9]
 80644a6:	2b02      	cmp	r3, #2
 80644a8:	d101      	bne.n	80644ae <Dcm_MainFunction+0xf2>
 80644aa:	f7ff fea3 	bl	80641f4 <DiagService_ER_SoftReset>
	else
	{
		/* Do nothing. */
	}
	/* Execute clear DTC. */
	if(Dcm_DiagServiceRequest_Frame.frame.data1 == 0x14) DiagService_CDTCI_ClearDiagnosticInformation();
 80644ae:	4b4b      	ldr	r3, [pc, #300]	@ (80645dc <Dcm_MainFunction+0x220>)
 80644b0:	7a9b      	ldrb	r3, [r3, #10]
 80644b2:	2b14      	cmp	r3, #20
 80644b4:	d101      	bne.n	80644ba <Dcm_MainFunction+0xfe>
 80644b6:	f7ff fec3 	bl	8064240 <DiagService_CDTCI_ClearDiagnosticInformation>
	else
	{
		/* Do nothing. */
	}
	/* Execute read DTC. */
	if(Dcm_DiagServiceRequest_Frame.frame.data1 == 0x19) DiagService_RDTCI_ReadDTCInformationSupportedDtc();
 80644ba:	4b48      	ldr	r3, [pc, #288]	@ (80645dc <Dcm_MainFunction+0x220>)
 80644bc:	7a9b      	ldrb	r3, [r3, #10]
 80644be:	2b19      	cmp	r3, #25
 80644c0:	d101      	bne.n	80644c6 <Dcm_MainFunction+0x10a>
 80644c2:	f7ff ff53 	bl	806436c <DiagService_RDTCI_ReadDTCInformationSupportedDtc>
	else
	{
		/* Do nothing. */
	}
	/* Extended session routines. */
	if(Dcm_DiagnosticSession == EXTENDED)
 80644c6:	4b44      	ldr	r3, [pc, #272]	@ (80645d8 <Dcm_MainFunction+0x21c>)
 80644c8:	781b      	ldrb	r3, [r3, #0]
 80644ca:	2b01      	cmp	r3, #1
 80644cc:	f040 80fd 	bne.w	80646ca <Dcm_MainFunction+0x30e>
	{
		/* Write calibration data. */
		if(Dcm_DiagServiceRequest_Frame.frame.data1 == 0x2E)
 80644d0:	4b42      	ldr	r3, [pc, #264]	@ (80645dc <Dcm_MainFunction+0x220>)
 80644d2:	7a9b      	ldrb	r3, [r3, #10]
 80644d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80644d6:	d109      	bne.n	80644ec <Dcm_MainFunction+0x130>
		{
			if(Dcm_DiagServiceRequest_Frame.frame.data2 == 0x00)
 80644d8:	4b40      	ldr	r3, [pc, #256]	@ (80645dc <Dcm_MainFunction+0x220>)
 80644da:	7adb      	ldrb	r3, [r3, #11]
 80644dc:	2b00      	cmp	r3, #0
 80644de:	d105      	bne.n	80644ec <Dcm_MainFunction+0x130>
			{
				if(Dcm_DiagServiceRequest_Frame.frame.data3 == 0x00) DiagService_WDBI_WriteCalibrationData();
 80644e0:	4b3e      	ldr	r3, [pc, #248]	@ (80645dc <Dcm_MainFunction+0x220>)
 80644e2:	7b1b      	ldrb	r3, [r3, #12]
 80644e4:	2b00      	cmp	r3, #0
 80644e6:	d101      	bne.n	80644ec <Dcm_MainFunction+0x130>
 80644e8:	f7fe fb2e 	bl	8062b48 <DiagService_WDBI_WriteCalibrationData>
		else
		{
			/* Do nothing. */
		}
		/* Process RDPBI. */
		if(Dcm_DiagServiceRequest_Frame.frame.data1 == 0x2A)
 80644ec:	4b3b      	ldr	r3, [pc, #236]	@ (80645dc <Dcm_MainFunction+0x220>)
 80644ee:	7a9b      	ldrb	r3, [r3, #10]
 80644f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80644f2:	d169      	bne.n	80645c8 <Dcm_MainFunction+0x20c>
		{
			if(Dcm_DiagServiceRequest_Frame.frame.data2 == 0x04)
 80644f4:	4b39      	ldr	r3, [pc, #228]	@ (80645dc <Dcm_MainFunction+0x220>)
 80644f6:	7adb      	ldrb	r3, [r3, #11]
 80644f8:	2b04      	cmp	r3, #4
 80644fa:	d12f      	bne.n	806455c <Dcm_MainFunction+0x1a0>
			{
				Dcm_RDBPI_Table[Dcm_DiagServiceRequest_Frame.frame.data3].IsFunctionActive = 0;
 80644fc:	4b37      	ldr	r3, [pc, #220]	@ (80645dc <Dcm_MainFunction+0x220>)
 80644fe:	7b1b      	ldrb	r3, [r3, #12]
 8064500:	4619      	mov	r1, r3
 8064502:	4a37      	ldr	r2, [pc, #220]	@ (80645e0 <Dcm_MainFunction+0x224>)
 8064504:	460b      	mov	r3, r1
 8064506:	005b      	lsls	r3, r3, #1
 8064508:	440b      	add	r3, r1
 806450a:	009b      	lsls	r3, r3, #2
 806450c:	4413      	add	r3, r2
 806450e:	2200      	movs	r2, #0
 8064510:	701a      	strb	r2, [r3, #0]
				Dcm_RDBPI_Table[Dcm_DiagServiceRequest_Frame.frame.data3].Timestamp = 0;
 8064512:	4b32      	ldr	r3, [pc, #200]	@ (80645dc <Dcm_MainFunction+0x220>)
 8064514:	7b1b      	ldrb	r3, [r3, #12]
 8064516:	4619      	mov	r1, r3
 8064518:	4a31      	ldr	r2, [pc, #196]	@ (80645e0 <Dcm_MainFunction+0x224>)
 806451a:	460b      	mov	r3, r1
 806451c:	005b      	lsls	r3, r3, #1
 806451e:	440b      	add	r3, r1
 8064520:	009b      	lsls	r3, r3, #2
 8064522:	4413      	add	r3, r2
 8064524:	3304      	adds	r3, #4
 8064526:	2200      	movs	r2, #0
 8064528:	601a      	str	r2, [r3, #0]
				Dcm_RDBPI_Table[Dcm_DiagServiceRequest_Frame.frame.data3].TransmissionMode = 0x04;
 806452a:	4b2c      	ldr	r3, [pc, #176]	@ (80645dc <Dcm_MainFunction+0x220>)
 806452c:	7b1b      	ldrb	r3, [r3, #12]
 806452e:	4619      	mov	r1, r3
 8064530:	4a2b      	ldr	r2, [pc, #172]	@ (80645e0 <Dcm_MainFunction+0x224>)
 8064532:	460b      	mov	r3, r1
 8064534:	005b      	lsls	r3, r3, #1
 8064536:	440b      	add	r3, r1
 8064538:	009b      	lsls	r3, r3, #2
 806453a:	4413      	add	r3, r2
 806453c:	3301      	adds	r3, #1
 806453e:	2204      	movs	r2, #4
 8064540:	701a      	strb	r2, [r3, #0]
				Dcm_RDBPI_Table[Dcm_DiagServiceRequest_Frame.frame.data3].FuncPtr();
 8064542:	4b26      	ldr	r3, [pc, #152]	@ (80645dc <Dcm_MainFunction+0x220>)
 8064544:	7b1b      	ldrb	r3, [r3, #12]
 8064546:	4619      	mov	r1, r3
 8064548:	4a25      	ldr	r2, [pc, #148]	@ (80645e0 <Dcm_MainFunction+0x224>)
 806454a:	460b      	mov	r3, r1
 806454c:	005b      	lsls	r3, r3, #1
 806454e:	440b      	add	r3, r1
 8064550:	009b      	lsls	r3, r3, #2
 8064552:	4413      	add	r3, r2
 8064554:	3308      	adds	r3, #8
 8064556:	681b      	ldr	r3, [r3, #0]
 8064558:	4798      	blx	r3
 806455a:	e035      	b.n	80645c8 <Dcm_MainFunction+0x20c>
			}
			else if(Dcm_DiagServiceRequest_Frame.frame.data2 != 0x04)
 806455c:	4b1f      	ldr	r3, [pc, #124]	@ (80645dc <Dcm_MainFunction+0x220>)
 806455e:	7adb      	ldrb	r3, [r3, #11]
 8064560:	2b04      	cmp	r3, #4
 8064562:	d031      	beq.n	80645c8 <Dcm_MainFunction+0x20c>
			{
				Dcm_RDBPI_Table[Dcm_DiagServiceRequest_Frame.frame.data3].IsFunctionActive = 1;
 8064564:	4b1d      	ldr	r3, [pc, #116]	@ (80645dc <Dcm_MainFunction+0x220>)
 8064566:	7b1b      	ldrb	r3, [r3, #12]
 8064568:	4619      	mov	r1, r3
 806456a:	4a1d      	ldr	r2, [pc, #116]	@ (80645e0 <Dcm_MainFunction+0x224>)
 806456c:	460b      	mov	r3, r1
 806456e:	005b      	lsls	r3, r3, #1
 8064570:	440b      	add	r3, r1
 8064572:	009b      	lsls	r3, r3, #2
 8064574:	4413      	add	r3, r2
 8064576:	2201      	movs	r2, #1
 8064578:	701a      	strb	r2, [r3, #0]
				Dcm_RDBPI_Table[Dcm_DiagServiceRequest_Frame.frame.data3].TransmissionMode = Dcm_DiagServiceRequest_Frame.frame.data2;
 806457a:	4b18      	ldr	r3, [pc, #96]	@ (80645dc <Dcm_MainFunction+0x220>)
 806457c:	7b1b      	ldrb	r3, [r3, #12]
 806457e:	4619      	mov	r1, r3
 8064580:	4b16      	ldr	r3, [pc, #88]	@ (80645dc <Dcm_MainFunction+0x220>)
 8064582:	7ad8      	ldrb	r0, [r3, #11]
 8064584:	4a16      	ldr	r2, [pc, #88]	@ (80645e0 <Dcm_MainFunction+0x224>)
 8064586:	460b      	mov	r3, r1
 8064588:	005b      	lsls	r3, r3, #1
 806458a:	440b      	add	r3, r1
 806458c:	009b      	lsls	r3, r3, #2
 806458e:	4413      	add	r3, r2
 8064590:	3301      	adds	r3, #1
 8064592:	4602      	mov	r2, r0
 8064594:	701a      	strb	r2, [r3, #0]
				Dcm_RDBPI_Table[Dcm_DiagServiceRequest_Frame.frame.data3].Timestamp = Dcm_MainCounter;
 8064596:	4b11      	ldr	r3, [pc, #68]	@ (80645dc <Dcm_MainFunction+0x220>)
 8064598:	7b1b      	ldrb	r3, [r3, #12]
 806459a:	4618      	mov	r0, r3
 806459c:	4b0d      	ldr	r3, [pc, #52]	@ (80645d4 <Dcm_MainFunction+0x218>)
 806459e:	681a      	ldr	r2, [r3, #0]
 80645a0:	490f      	ldr	r1, [pc, #60]	@ (80645e0 <Dcm_MainFunction+0x224>)
 80645a2:	4603      	mov	r3, r0
 80645a4:	005b      	lsls	r3, r3, #1
 80645a6:	4403      	add	r3, r0
 80645a8:	009b      	lsls	r3, r3, #2
 80645aa:	440b      	add	r3, r1
 80645ac:	3304      	adds	r3, #4
 80645ae:	601a      	str	r2, [r3, #0]
				Dcm_RDBPI_Table[Dcm_DiagServiceRequest_Frame.frame.data3].FuncPtr();
 80645b0:	4b0a      	ldr	r3, [pc, #40]	@ (80645dc <Dcm_MainFunction+0x220>)
 80645b2:	7b1b      	ldrb	r3, [r3, #12]
 80645b4:	4619      	mov	r1, r3
 80645b6:	4a0a      	ldr	r2, [pc, #40]	@ (80645e0 <Dcm_MainFunction+0x224>)
 80645b8:	460b      	mov	r3, r1
 80645ba:	005b      	lsls	r3, r3, #1
 80645bc:	440b      	add	r3, r1
 80645be:	009b      	lsls	r3, r3, #2
 80645c0:	4413      	add	r3, r2
 80645c2:	3308      	adds	r3, #8
 80645c4:	681b      	ldr	r3, [r3, #0]
 80645c6:	4798      	blx	r3
		else
		{
			/* Do nothing. */
		}
		/* Check if it is time to call RDBPI. */
		for(uint8 i = 0; i < 8; i++)
 80645c8:	2300      	movs	r3, #0
 80645ca:	71fb      	strb	r3, [r7, #7]
 80645cc:	e048      	b.n	8064660 <Dcm_MainFunction+0x2a4>
 80645ce:	bf00      	nop
 80645d0:	2001fdac 	.word	0x2001fdac
 80645d4:	2001045c 	.word	0x2001045c
 80645d8:	2001fda8 	.word	0x2001fda8
 80645dc:	20010388 	.word	0x20010388
 80645e0:	20010024 	.word	0x20010024
		{
			if(Dcm_RDBPI_Table[i].IsFunctionActive == 0x01)
 80645e4:	79fa      	ldrb	r2, [r7, #7]
 80645e6:	4994      	ldr	r1, [pc, #592]	@ (8064838 <Dcm_MainFunction+0x47c>)
 80645e8:	4613      	mov	r3, r2
 80645ea:	005b      	lsls	r3, r3, #1
 80645ec:	4413      	add	r3, r2
 80645ee:	009b      	lsls	r3, r3, #2
 80645f0:	440b      	add	r3, r1
 80645f2:	781b      	ldrb	r3, [r3, #0]
 80645f4:	2b01      	cmp	r3, #1
 80645f6:	d130      	bne.n	806465a <Dcm_MainFunction+0x29e>
			{
				if((Dcm_MainCounter - Dcm_RDBPI_Table[i].Timestamp) > ((250) / Dcm_RDBPI_Table[i].TransmissionMode))
 80645f8:	4b90      	ldr	r3, [pc, #576]	@ (806483c <Dcm_MainFunction+0x480>)
 80645fa:	6819      	ldr	r1, [r3, #0]
 80645fc:	79fa      	ldrb	r2, [r7, #7]
 80645fe:	488e      	ldr	r0, [pc, #568]	@ (8064838 <Dcm_MainFunction+0x47c>)
 8064600:	4613      	mov	r3, r2
 8064602:	005b      	lsls	r3, r3, #1
 8064604:	4413      	add	r3, r2
 8064606:	009b      	lsls	r3, r3, #2
 8064608:	4403      	add	r3, r0
 806460a:	3304      	adds	r3, #4
 806460c:	681b      	ldr	r3, [r3, #0]
 806460e:	1ac9      	subs	r1, r1, r3
 8064610:	79fa      	ldrb	r2, [r7, #7]
 8064612:	4889      	ldr	r0, [pc, #548]	@ (8064838 <Dcm_MainFunction+0x47c>)
 8064614:	4613      	mov	r3, r2
 8064616:	005b      	lsls	r3, r3, #1
 8064618:	4413      	add	r3, r2
 806461a:	009b      	lsls	r3, r3, #2
 806461c:	4403      	add	r3, r0
 806461e:	3301      	adds	r3, #1
 8064620:	781b      	ldrb	r3, [r3, #0]
 8064622:	461a      	mov	r2, r3
 8064624:	23fa      	movs	r3, #250	@ 0xfa
 8064626:	fb93 f3f2 	sdiv	r3, r3, r2
 806462a:	4299      	cmp	r1, r3
 806462c:	d915      	bls.n	806465a <Dcm_MainFunction+0x29e>
				{
					Dcm_RDBPI_Table[i].FuncPtr();
 806462e:	79fa      	ldrb	r2, [r7, #7]
 8064630:	4981      	ldr	r1, [pc, #516]	@ (8064838 <Dcm_MainFunction+0x47c>)
 8064632:	4613      	mov	r3, r2
 8064634:	005b      	lsls	r3, r3, #1
 8064636:	4413      	add	r3, r2
 8064638:	009b      	lsls	r3, r3, #2
 806463a:	440b      	add	r3, r1
 806463c:	3308      	adds	r3, #8
 806463e:	681b      	ldr	r3, [r3, #0]
 8064640:	4798      	blx	r3
					Dcm_RDBPI_Table[i].Timestamp = Dcm_MainCounter;
 8064642:	79fa      	ldrb	r2, [r7, #7]
 8064644:	4b7d      	ldr	r3, [pc, #500]	@ (806483c <Dcm_MainFunction+0x480>)
 8064646:	6819      	ldr	r1, [r3, #0]
 8064648:	487b      	ldr	r0, [pc, #492]	@ (8064838 <Dcm_MainFunction+0x47c>)
 806464a:	4613      	mov	r3, r2
 806464c:	005b      	lsls	r3, r3, #1
 806464e:	4413      	add	r3, r2
 8064650:	009b      	lsls	r3, r3, #2
 8064652:	4403      	add	r3, r0
 8064654:	3304      	adds	r3, #4
 8064656:	6019      	str	r1, [r3, #0]
					break;
 8064658:	e005      	b.n	8064666 <Dcm_MainFunction+0x2aa>
		for(uint8 i = 0; i < 8; i++)
 806465a:	79fb      	ldrb	r3, [r7, #7]
 806465c:	3301      	adds	r3, #1
 806465e:	71fb      	strb	r3, [r7, #7]
 8064660:	79fb      	ldrb	r3, [r7, #7]
 8064662:	2b07      	cmp	r3, #7
 8064664:	d9be      	bls.n	80645e4 <Dcm_MainFunction+0x228>
			{
				/* Do nothing. */
			}
		}
		/* Read data routines. */
		if(Dcm_DiagServiceRequest_Frame.frame.data1 == 0x22)
 8064666:	4b76      	ldr	r3, [pc, #472]	@ (8064840 <Dcm_MainFunction+0x484>)
 8064668:	7a9b      	ldrb	r3, [r3, #10]
 806466a:	2b22      	cmp	r3, #34	@ 0x22
 806466c:	f040 8098 	bne.w	80647a0 <Dcm_MainFunction+0x3e4>
		{
			if(Dcm_DiagServiceRequest_Frame.frame.data2 == 0x00)
 8064670:	4b73      	ldr	r3, [pc, #460]	@ (8064840 <Dcm_MainFunction+0x484>)
 8064672:	7adb      	ldrb	r3, [r3, #11]
 8064674:	2b00      	cmp	r3, #0
 8064676:	d11d      	bne.n	80646b4 <Dcm_MainFunction+0x2f8>
			{
				if(Dcm_DiagServiceRequest_Frame.frame.data3 == 0x01) DiagService_RDBI_ReadAwakeReasons();
 8064678:	4b71      	ldr	r3, [pc, #452]	@ (8064840 <Dcm_MainFunction+0x484>)
 806467a:	7b1b      	ldrb	r3, [r3, #12]
 806467c:	2b01      	cmp	r3, #1
 806467e:	d101      	bne.n	8064684 <Dcm_MainFunction+0x2c8>
 8064680:	f7fe fb1c 	bl	8062cbc <DiagService_RDBI_ReadAwakeReasons>
				else
				{
					/* Do nothing. */
				}
				if(Dcm_DiagServiceRequest_Frame.frame.data3 == 0x02) DiagService_RDBI_ReadCodingData();
 8064684:	4b6e      	ldr	r3, [pc, #440]	@ (8064840 <Dcm_MainFunction+0x484>)
 8064686:	7b1b      	ldrb	r3, [r3, #12]
 8064688:	2b02      	cmp	r3, #2
 806468a:	d101      	bne.n	8064690 <Dcm_MainFunction+0x2d4>
 806468c:	f7fe fb8a 	bl	8062da4 <DiagService_RDBI_ReadCodingData>
				else
				{
					/* Do nothing. */
				}
				if(Dcm_DiagServiceRequest_Frame.frame.data3 == 0x03) DiagService_RDBI_ReadCalibrationData();
 8064690:	4b6b      	ldr	r3, [pc, #428]	@ (8064840 <Dcm_MainFunction+0x484>)
 8064692:	7b1b      	ldrb	r3, [r3, #12]
 8064694:	2b03      	cmp	r3, #3
 8064696:	d101      	bne.n	806469c <Dcm_MainFunction+0x2e0>
 8064698:	f7fe fc02 	bl	8062ea0 <DiagService_RDBI_ReadCalibrationData>
				else
				{
					/* Do nothing. */
				}
				if(Dcm_DiagServiceRequest_Frame.frame.data3 == 0x04) DiagService_RDBI_ReadWakeupHistory();
 806469c:	4b68      	ldr	r3, [pc, #416]	@ (8064840 <Dcm_MainFunction+0x484>)
 806469e:	7b1b      	ldrb	r3, [r3, #12]
 80646a0:	2b04      	cmp	r3, #4
 80646a2:	d101      	bne.n	80646a8 <Dcm_MainFunction+0x2ec>
 80646a4:	f7fe fc7a 	bl	8062f9c <DiagService_RDBI_ReadWakeupHistory>
				else
				{
					/* Do nothing. */
				}
				if(Dcm_DiagServiceRequest_Frame.frame.data3 == 0x05) DiagService_RDBI_ReadAliveTime();
 80646a8:	4b65      	ldr	r3, [pc, #404]	@ (8064840 <Dcm_MainFunction+0x484>)
 80646aa:	7b1b      	ldrb	r3, [r3, #12]
 80646ac:	2b05      	cmp	r3, #5
 80646ae:	d101      	bne.n	80646b4 <Dcm_MainFunction+0x2f8>
 80646b0:	f7fe fdca 	bl	8063248 <DiagService_RDBI_ReadAliveTime>
			}
			else
			{
				/* Do nothing. */
			}
			if(Dcm_DiagServiceRequest_Frame.frame.data2 == 0xF1)
 80646b4:	4b62      	ldr	r3, [pc, #392]	@ (8064840 <Dcm_MainFunction+0x484>)
 80646b6:	7adb      	ldrb	r3, [r3, #11]
 80646b8:	2bf1      	cmp	r3, #241	@ 0xf1
 80646ba:	d171      	bne.n	80647a0 <Dcm_MainFunction+0x3e4>
			{
				if(Dcm_DiagServiceRequest_Frame.frame.data3 == 0x80) DiagService_RDBI_ReadSWVersion();
 80646bc:	4b60      	ldr	r3, [pc, #384]	@ (8064840 <Dcm_MainFunction+0x484>)
 80646be:	7b1b      	ldrb	r3, [r3, #12]
 80646c0:	2b80      	cmp	r3, #128	@ 0x80
 80646c2:	d16d      	bne.n	80647a0 <Dcm_MainFunction+0x3e4>
 80646c4:	f7fe fce0 	bl	8063088 <DiagService_RDBI_ReadSWVersion>
 80646c8:	e06a      	b.n	80647a0 <Dcm_MainFunction+0x3e4>
			/* Do nothing. */
		}
	}
	else
	{/* Send NRC conditionsNotCorrect. */
		if(Dcm_DiagServiceRequest_Frame.frame.data1 == 0x22 || (Dcm_DiagServiceRequest_Frame.frame.data1 == 0x10 && (Dcm_DiagServiceRequest_Frame.frame.data2 != 0x01 || Dcm_DiagServiceRequest_Frame.frame.data2 != 0x03)))
 80646ca:	4b5d      	ldr	r3, [pc, #372]	@ (8064840 <Dcm_MainFunction+0x484>)
 80646cc:	7a9b      	ldrb	r3, [r3, #10]
 80646ce:	2b22      	cmp	r3, #34	@ 0x22
 80646d0:	d00b      	beq.n	80646ea <Dcm_MainFunction+0x32e>
 80646d2:	4b5b      	ldr	r3, [pc, #364]	@ (8064840 <Dcm_MainFunction+0x484>)
 80646d4:	7a9b      	ldrb	r3, [r3, #10]
 80646d6:	2b10      	cmp	r3, #16
 80646d8:	d162      	bne.n	80647a0 <Dcm_MainFunction+0x3e4>
 80646da:	4b59      	ldr	r3, [pc, #356]	@ (8064840 <Dcm_MainFunction+0x484>)
 80646dc:	7adb      	ldrb	r3, [r3, #11]
 80646de:	2b01      	cmp	r3, #1
 80646e0:	d103      	bne.n	80646ea <Dcm_MainFunction+0x32e>
 80646e2:	4b57      	ldr	r3, [pc, #348]	@ (8064840 <Dcm_MainFunction+0x484>)
 80646e4:	7adb      	ldrb	r3, [r3, #11]
 80646e6:	2b03      	cmp	r3, #3
 80646e8:	d05a      	beq.n	80647a0 <Dcm_MainFunction+0x3e4>
		{
			Dcm_DiagServiceResponse_Frame.frame.dlc = 4;
 80646ea:	4b56      	ldr	r3, [pc, #344]	@ (8064844 <Dcm_MainFunction+0x488>)
 80646ec:	2204      	movs	r2, #4
 80646ee:	721a      	strb	r2, [r3, #8]
			Dcm_DiagServiceResponse_Frame.frame.id = 0x701;
 80646f0:	4b54      	ldr	r3, [pc, #336]	@ (8064844 <Dcm_MainFunction+0x488>)
 80646f2:	f240 7201 	movw	r2, #1793	@ 0x701
 80646f6:	605a      	str	r2, [r3, #4]
			Dcm_DiagServiceResponse_Frame.frame.idType = 1;
 80646f8:	4b52      	ldr	r3, [pc, #328]	@ (8064844 <Dcm_MainFunction+0x488>)
 80646fa:	2201      	movs	r2, #1
 80646fc:	701a      	strb	r2, [r3, #0]
			Dcm_DiagServiceResponse_Frame.frame.data0 = 0x03;
 80646fe:	4b51      	ldr	r3, [pc, #324]	@ (8064844 <Dcm_MainFunction+0x488>)
 8064700:	2203      	movs	r2, #3
 8064702:	725a      	strb	r2, [r3, #9]
			Dcm_DiagServiceResponse_Frame.frame.data1 = 0x7F;
 8064704:	4b4f      	ldr	r3, [pc, #316]	@ (8064844 <Dcm_MainFunction+0x488>)
 8064706:	227f      	movs	r2, #127	@ 0x7f
 8064708:	729a      	strb	r2, [r3, #10]
			Dcm_DiagServiceResponse_Frame.frame.data2 = 0x19;
 806470a:	4b4e      	ldr	r3, [pc, #312]	@ (8064844 <Dcm_MainFunction+0x488>)
 806470c:	2219      	movs	r2, #25
 806470e:	72da      	strb	r2, [r3, #11]
			Dcm_DiagServiceResponse_Frame.frame.data3 = 0x22;
 8064710:	4b4c      	ldr	r3, [pc, #304]	@ (8064844 <Dcm_MainFunction+0x488>)
 8064712:	2222      	movs	r2, #34	@ 0x22
 8064714:	731a      	strb	r2, [r3, #12]
			CanSpi_Transmit(&Dcm_DiagServiceResponse_Frame);
 8064716:	484b      	ldr	r0, [pc, #300]	@ (8064844 <Dcm_MainFunction+0x488>)
 8064718:	f7fd f9be 	bl	8061a98 <CanSpi_Transmit>
			Dcm_DiagServiceResponse_Frame.frame.idType = 0;
 806471c:	4b49      	ldr	r3, [pc, #292]	@ (8064844 <Dcm_MainFunction+0x488>)
 806471e:	2200      	movs	r2, #0
 8064720:	701a      	strb	r2, [r3, #0]
			Dcm_DiagServiceResponse_Frame.frame.id = 0;
 8064722:	4b48      	ldr	r3, [pc, #288]	@ (8064844 <Dcm_MainFunction+0x488>)
 8064724:	2200      	movs	r2, #0
 8064726:	605a      	str	r2, [r3, #4]
			Dcm_DiagServiceResponse_Frame.frame.dlc = 0;
 8064728:	4b46      	ldr	r3, [pc, #280]	@ (8064844 <Dcm_MainFunction+0x488>)
 806472a:	2200      	movs	r2, #0
 806472c:	721a      	strb	r2, [r3, #8]
			Dcm_DiagServiceResponse_Frame.frame.data0 = 0;
 806472e:	4b45      	ldr	r3, [pc, #276]	@ (8064844 <Dcm_MainFunction+0x488>)
 8064730:	2200      	movs	r2, #0
 8064732:	725a      	strb	r2, [r3, #9]
			Dcm_DiagServiceResponse_Frame.frame.data1 = 0;
 8064734:	4b43      	ldr	r3, [pc, #268]	@ (8064844 <Dcm_MainFunction+0x488>)
 8064736:	2200      	movs	r2, #0
 8064738:	729a      	strb	r2, [r3, #10]
			Dcm_DiagServiceResponse_Frame.frame.data2 = 0;
 806473a:	4b42      	ldr	r3, [pc, #264]	@ (8064844 <Dcm_MainFunction+0x488>)
 806473c:	2200      	movs	r2, #0
 806473e:	72da      	strb	r2, [r3, #11]
			Dcm_DiagServiceResponse_Frame.frame.data3 = 0;
 8064740:	4b40      	ldr	r3, [pc, #256]	@ (8064844 <Dcm_MainFunction+0x488>)
 8064742:	2200      	movs	r2, #0
 8064744:	731a      	strb	r2, [r3, #12]
			Dcm_DiagServiceResponse_Frame.frame.data4 = 0;
 8064746:	4b3f      	ldr	r3, [pc, #252]	@ (8064844 <Dcm_MainFunction+0x488>)
 8064748:	2200      	movs	r2, #0
 806474a:	735a      	strb	r2, [r3, #13]
			Dcm_DiagServiceResponse_Frame.frame.data5 = 0;
 806474c:	4b3d      	ldr	r3, [pc, #244]	@ (8064844 <Dcm_MainFunction+0x488>)
 806474e:	2200      	movs	r2, #0
 8064750:	739a      	strb	r2, [r3, #14]
			Dcm_DiagServiceResponse_Frame.frame.data6 = 0;
 8064752:	4b3c      	ldr	r3, [pc, #240]	@ (8064844 <Dcm_MainFunction+0x488>)
 8064754:	2200      	movs	r2, #0
 8064756:	73da      	strb	r2, [r3, #15]
			Dcm_DiagServiceResponse_Frame.frame.data7 = 0;
 8064758:	4b3a      	ldr	r3, [pc, #232]	@ (8064844 <Dcm_MainFunction+0x488>)
 806475a:	2200      	movs	r2, #0
 806475c:	741a      	strb	r2, [r3, #16]
			Dcm_DiagServiceRequest_Frame.frame.idType = 0;
 806475e:	4b38      	ldr	r3, [pc, #224]	@ (8064840 <Dcm_MainFunction+0x484>)
 8064760:	2200      	movs	r2, #0
 8064762:	701a      	strb	r2, [r3, #0]
			Dcm_DiagServiceRequest_Frame.frame.id = 0;
 8064764:	4b36      	ldr	r3, [pc, #216]	@ (8064840 <Dcm_MainFunction+0x484>)
 8064766:	2200      	movs	r2, #0
 8064768:	605a      	str	r2, [r3, #4]
			Dcm_DiagServiceRequest_Frame.frame.dlc = 0;
 806476a:	4b35      	ldr	r3, [pc, #212]	@ (8064840 <Dcm_MainFunction+0x484>)
 806476c:	2200      	movs	r2, #0
 806476e:	721a      	strb	r2, [r3, #8]
			Dcm_DiagServiceRequest_Frame.frame.data0 = 0;
 8064770:	4b33      	ldr	r3, [pc, #204]	@ (8064840 <Dcm_MainFunction+0x484>)
 8064772:	2200      	movs	r2, #0
 8064774:	725a      	strb	r2, [r3, #9]
			Dcm_DiagServiceRequest_Frame.frame.data1 = 0;
 8064776:	4b32      	ldr	r3, [pc, #200]	@ (8064840 <Dcm_MainFunction+0x484>)
 8064778:	2200      	movs	r2, #0
 806477a:	729a      	strb	r2, [r3, #10]
			Dcm_DiagServiceRequest_Frame.frame.data2 = 0;
 806477c:	4b30      	ldr	r3, [pc, #192]	@ (8064840 <Dcm_MainFunction+0x484>)
 806477e:	2200      	movs	r2, #0
 8064780:	72da      	strb	r2, [r3, #11]
			Dcm_DiagServiceRequest_Frame.frame.data3 = 0;
 8064782:	4b2f      	ldr	r3, [pc, #188]	@ (8064840 <Dcm_MainFunction+0x484>)
 8064784:	2200      	movs	r2, #0
 8064786:	731a      	strb	r2, [r3, #12]
			Dcm_DiagServiceRequest_Frame.frame.data4 = 0;
 8064788:	4b2d      	ldr	r3, [pc, #180]	@ (8064840 <Dcm_MainFunction+0x484>)
 806478a:	2200      	movs	r2, #0
 806478c:	735a      	strb	r2, [r3, #13]
			Dcm_DiagServiceRequest_Frame.frame.data5 = 0;
 806478e:	4b2c      	ldr	r3, [pc, #176]	@ (8064840 <Dcm_MainFunction+0x484>)
 8064790:	2200      	movs	r2, #0
 8064792:	739a      	strb	r2, [r3, #14]
			Dcm_DiagServiceRequest_Frame.frame.data6 = 0;
 8064794:	4b2a      	ldr	r3, [pc, #168]	@ (8064840 <Dcm_MainFunction+0x484>)
 8064796:	2200      	movs	r2, #0
 8064798:	73da      	strb	r2, [r3, #15]
			Dcm_DiagServiceRequest_Frame.frame.data7 = 0;
 806479a:	4b29      	ldr	r3, [pc, #164]	@ (8064840 <Dcm_MainFunction+0x484>)
 806479c:	2200      	movs	r2, #0
 806479e:	741a      	strb	r2, [r3, #16]
		{
			/* Do nothing. */
		}
	}
	/* Reset buffers. */
	Dcm_DiagServiceResponse_Frame.frame.idType = 0;
 80647a0:	4b28      	ldr	r3, [pc, #160]	@ (8064844 <Dcm_MainFunction+0x488>)
 80647a2:	2200      	movs	r2, #0
 80647a4:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceResponse_Frame.frame.id = 0;
 80647a6:	4b27      	ldr	r3, [pc, #156]	@ (8064844 <Dcm_MainFunction+0x488>)
 80647a8:	2200      	movs	r2, #0
 80647aa:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceResponse_Frame.frame.dlc = 0;
 80647ac:	4b25      	ldr	r3, [pc, #148]	@ (8064844 <Dcm_MainFunction+0x488>)
 80647ae:	2200      	movs	r2, #0
 80647b0:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceResponse_Frame.frame.data0 = 0;
 80647b2:	4b24      	ldr	r3, [pc, #144]	@ (8064844 <Dcm_MainFunction+0x488>)
 80647b4:	2200      	movs	r2, #0
 80647b6:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceResponse_Frame.frame.data1 = 0;
 80647b8:	4b22      	ldr	r3, [pc, #136]	@ (8064844 <Dcm_MainFunction+0x488>)
 80647ba:	2200      	movs	r2, #0
 80647bc:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceResponse_Frame.frame.data2 = 0;
 80647be:	4b21      	ldr	r3, [pc, #132]	@ (8064844 <Dcm_MainFunction+0x488>)
 80647c0:	2200      	movs	r2, #0
 80647c2:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceResponse_Frame.frame.data3 = 0;
 80647c4:	4b1f      	ldr	r3, [pc, #124]	@ (8064844 <Dcm_MainFunction+0x488>)
 80647c6:	2200      	movs	r2, #0
 80647c8:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceResponse_Frame.frame.data4 = 0;
 80647ca:	4b1e      	ldr	r3, [pc, #120]	@ (8064844 <Dcm_MainFunction+0x488>)
 80647cc:	2200      	movs	r2, #0
 80647ce:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceResponse_Frame.frame.data5 = 0;
 80647d0:	4b1c      	ldr	r3, [pc, #112]	@ (8064844 <Dcm_MainFunction+0x488>)
 80647d2:	2200      	movs	r2, #0
 80647d4:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceResponse_Frame.frame.data6 = 0;
 80647d6:	4b1b      	ldr	r3, [pc, #108]	@ (8064844 <Dcm_MainFunction+0x488>)
 80647d8:	2200      	movs	r2, #0
 80647da:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceResponse_Frame.frame.data7 = 0;
 80647dc:	4b19      	ldr	r3, [pc, #100]	@ (8064844 <Dcm_MainFunction+0x488>)
 80647de:	2200      	movs	r2, #0
 80647e0:	741a      	strb	r2, [r3, #16]
	Dcm_DiagServiceRequest_Frame.frame.idType = 0;
 80647e2:	4b17      	ldr	r3, [pc, #92]	@ (8064840 <Dcm_MainFunction+0x484>)
 80647e4:	2200      	movs	r2, #0
 80647e6:	701a      	strb	r2, [r3, #0]
	Dcm_DiagServiceRequest_Frame.frame.id = 0;
 80647e8:	4b15      	ldr	r3, [pc, #84]	@ (8064840 <Dcm_MainFunction+0x484>)
 80647ea:	2200      	movs	r2, #0
 80647ec:	605a      	str	r2, [r3, #4]
	Dcm_DiagServiceRequest_Frame.frame.dlc = 0;
 80647ee:	4b14      	ldr	r3, [pc, #80]	@ (8064840 <Dcm_MainFunction+0x484>)
 80647f0:	2200      	movs	r2, #0
 80647f2:	721a      	strb	r2, [r3, #8]
	Dcm_DiagServiceRequest_Frame.frame.data0 = 0;
 80647f4:	4b12      	ldr	r3, [pc, #72]	@ (8064840 <Dcm_MainFunction+0x484>)
 80647f6:	2200      	movs	r2, #0
 80647f8:	725a      	strb	r2, [r3, #9]
	Dcm_DiagServiceRequest_Frame.frame.data1 = 0;
 80647fa:	4b11      	ldr	r3, [pc, #68]	@ (8064840 <Dcm_MainFunction+0x484>)
 80647fc:	2200      	movs	r2, #0
 80647fe:	729a      	strb	r2, [r3, #10]
	Dcm_DiagServiceRequest_Frame.frame.data2 = 0;
 8064800:	4b0f      	ldr	r3, [pc, #60]	@ (8064840 <Dcm_MainFunction+0x484>)
 8064802:	2200      	movs	r2, #0
 8064804:	72da      	strb	r2, [r3, #11]
	Dcm_DiagServiceRequest_Frame.frame.data3 = 0;
 8064806:	4b0e      	ldr	r3, [pc, #56]	@ (8064840 <Dcm_MainFunction+0x484>)
 8064808:	2200      	movs	r2, #0
 806480a:	731a      	strb	r2, [r3, #12]
	Dcm_DiagServiceRequest_Frame.frame.data4 = 0;
 806480c:	4b0c      	ldr	r3, [pc, #48]	@ (8064840 <Dcm_MainFunction+0x484>)
 806480e:	2200      	movs	r2, #0
 8064810:	735a      	strb	r2, [r3, #13]
	Dcm_DiagServiceRequest_Frame.frame.data5 = 0;
 8064812:	4b0b      	ldr	r3, [pc, #44]	@ (8064840 <Dcm_MainFunction+0x484>)
 8064814:	2200      	movs	r2, #0
 8064816:	739a      	strb	r2, [r3, #14]
	Dcm_DiagServiceRequest_Frame.frame.data6 = 0;
 8064818:	4b09      	ldr	r3, [pc, #36]	@ (8064840 <Dcm_MainFunction+0x484>)
 806481a:	2200      	movs	r2, #0
 806481c:	73da      	strb	r2, [r3, #15]
	Dcm_DiagServiceRequest_Frame.frame.data7 = 0;
 806481e:	4b08      	ldr	r3, [pc, #32]	@ (8064840 <Dcm_MainFunction+0x484>)
 8064820:	2200      	movs	r2, #0
 8064822:	741a      	strb	r2, [r3, #16]
	Dcm_MainCounter++;
 8064824:	4b05      	ldr	r3, [pc, #20]	@ (806483c <Dcm_MainFunction+0x480>)
 8064826:	681b      	ldr	r3, [r3, #0]
 8064828:	3301      	adds	r3, #1
 806482a:	4a04      	ldr	r2, [pc, #16]	@ (806483c <Dcm_MainFunction+0x480>)
 806482c:	6013      	str	r3, [r2, #0]
}
 806482e:	bf00      	nop
 8064830:	3708      	adds	r7, #8
 8064832:	46bd      	mov	sp, r7
 8064834:	bd80      	pop	{r7, pc}
 8064836:	bf00      	nop
 8064838:	20010024 	.word	0x20010024
 806483c:	2001045c 	.word	0x2001045c
 8064840:	20010388 	.word	0x20010388
 8064844:	20010374 	.word	0x20010374

08064848 <Dem_SaveDtc>:
/* FUNCTIONS START */
void Dem_SaveDtc(uint8 index, uint8 status);
/* FUNCTIONS STOP */
/* FUNCTIONS START */
void Dem_SaveDtc(uint8 index, uint8 status)
{
 8064848:	b590      	push	{r4, r7, lr}
 806484a:	b083      	sub	sp, #12
 806484c:	af00      	add	r7, sp, #0
 806484e:	4603      	mov	r3, r0
 8064850:	460a      	mov	r2, r1
 8064852:	71fb      	strb	r3, [r7, #7]
 8064854:	4613      	mov	r3, r2
 8064856:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("cpsid i" : : : "memory");
 8064858:	b672      	cpsid	i
}
 806485a:	bf00      	nop
	__disable_irq();
	/* Store DTC. */
	if(0 == Dem_ControlDtcSettingStatus)
 806485c:	4b63      	ldr	r3, [pc, #396]	@ (80649ec <Dem_SaveDtc+0x1a4>)
 806485e:	781b      	ldrb	r3, [r3, #0]
 8064860:	2b00      	cmp	r3, #0
 8064862:	f040 80bc 	bne.w	80649de <Dem_SaveDtc+0x196>
	{
		if(3 > Dem_DTCStoreArray[index].counter)
 8064866:	79fa      	ldrb	r2, [r7, #7]
 8064868:	4961      	ldr	r1, [pc, #388]	@ (80649f0 <Dem_SaveDtc+0x1a8>)
 806486a:	4613      	mov	r3, r2
 806486c:	00db      	lsls	r3, r3, #3
 806486e:	1a9b      	subs	r3, r3, r2
 8064870:	009b      	lsls	r3, r3, #2
 8064872:	440b      	add	r3, r1
 8064874:	681b      	ldr	r3, [r3, #0]
 8064876:	2b02      	cmp	r3, #2
 8064878:	f200 80a4 	bhi.w	80649c4 <Dem_SaveDtc+0x17c>
		{
			if(1 == status && 0 == Dem_DTCStoreArray[index].isActiveNow)
 806487c:	79bb      	ldrb	r3, [r7, #6]
 806487e:	2b01      	cmp	r3, #1
 8064880:	f040 80a0 	bne.w	80649c4 <Dem_SaveDtc+0x17c>
 8064884:	79fa      	ldrb	r2, [r7, #7]
 8064886:	495a      	ldr	r1, [pc, #360]	@ (80649f0 <Dem_SaveDtc+0x1a8>)
 8064888:	4613      	mov	r3, r2
 806488a:	00db      	lsls	r3, r3, #3
 806488c:	1a9b      	subs	r3, r3, r2
 806488e:	009b      	lsls	r3, r3, #2
 8064890:	440b      	add	r3, r1
 8064892:	3304      	adds	r3, #4
 8064894:	681b      	ldr	r3, [r3, #0]
 8064896:	2b00      	cmp	r3, #0
 8064898:	f040 8094 	bne.w	80649c4 <Dem_SaveDtc+0x17c>
			{
				Dem_DtcMessage.frame.idType = 1;
 806489c:	4b55      	ldr	r3, [pc, #340]	@ (80649f4 <Dem_SaveDtc+0x1ac>)
 806489e:	2201      	movs	r2, #1
 80648a0:	701a      	strb	r2, [r3, #0]
				Dem_DtcMessage.frame.id = 0x10C;
 80648a2:	4b54      	ldr	r3, [pc, #336]	@ (80649f4 <Dem_SaveDtc+0x1ac>)
 80648a4:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80648a8:	605a      	str	r2, [r3, #4]
				Dem_DtcMessage.frame.dlc = 1;
 80648aa:	4b52      	ldr	r3, [pc, #328]	@ (80649f4 <Dem_SaveDtc+0x1ac>)
 80648ac:	2201      	movs	r2, #1
 80648ae:	721a      	strb	r2, [r3, #8]
				Dem_DtcMessage.frame.data0 = index;
 80648b0:	4a50      	ldr	r2, [pc, #320]	@ (80649f4 <Dem_SaveDtc+0x1ac>)
 80648b2:	79fb      	ldrb	r3, [r7, #7]
 80648b4:	7253      	strb	r3, [r2, #9]
				CanSpi_Transmit(&Dem_DtcMessage);
 80648b6:	484f      	ldr	r0, [pc, #316]	@ (80649f4 <Dem_SaveDtc+0x1ac>)
 80648b8:	f7fd f8ee 	bl	8061a98 <CanSpi_Transmit>

				Dem_DTCStoreArray[index].isActiveNow = status;
 80648bc:	79fa      	ldrb	r2, [r7, #7]
 80648be:	79b9      	ldrb	r1, [r7, #6]
 80648c0:	484b      	ldr	r0, [pc, #300]	@ (80649f0 <Dem_SaveDtc+0x1a8>)
 80648c2:	4613      	mov	r3, r2
 80648c4:	00db      	lsls	r3, r3, #3
 80648c6:	1a9b      	subs	r3, r3, r2
 80648c8:	009b      	lsls	r3, r3, #2
 80648ca:	4403      	add	r3, r0
 80648cc:	3304      	adds	r3, #4
 80648ce:	6019      	str	r1, [r3, #0]
				Dem_DTCStoreArray[index].IgnFF[Dem_DTCStoreArray[index].counter] = StatusList_ComOutValue[0];
 80648d0:	79fa      	ldrb	r2, [r7, #7]
 80648d2:	79f9      	ldrb	r1, [r7, #7]
 80648d4:	4846      	ldr	r0, [pc, #280]	@ (80649f0 <Dem_SaveDtc+0x1a8>)
 80648d6:	460b      	mov	r3, r1
 80648d8:	00db      	lsls	r3, r3, #3
 80648da:	1a5b      	subs	r3, r3, r1
 80648dc:	009b      	lsls	r3, r3, #2
 80648de:	4403      	add	r3, r0
 80648e0:	6819      	ldr	r1, [r3, #0]
 80648e2:	4b45      	ldr	r3, [pc, #276]	@ (80649f8 <Dem_SaveDtc+0x1b0>)
 80648e4:	781c      	ldrb	r4, [r3, #0]
 80648e6:	4842      	ldr	r0, [pc, #264]	@ (80649f0 <Dem_SaveDtc+0x1a8>)
 80648e8:	4613      	mov	r3, r2
 80648ea:	00db      	lsls	r3, r3, #3
 80648ec:	1a9b      	subs	r3, r3, r2
 80648ee:	009b      	lsls	r3, r3, #2
 80648f0:	4403      	add	r3, r0
 80648f2:	440b      	add	r3, r1
 80648f4:	3314      	adds	r3, #20
 80648f6:	4622      	mov	r2, r4
 80648f8:	701a      	strb	r2, [r3, #0]
				Dem_DTCStoreArray[index].RpmFF[Dem_DTCStoreArray[index].counter] = VehicleState_Rpm;
 80648fa:	79fa      	ldrb	r2, [r7, #7]
 80648fc:	79f9      	ldrb	r1, [r7, #7]
 80648fe:	483c      	ldr	r0, [pc, #240]	@ (80649f0 <Dem_SaveDtc+0x1a8>)
 8064900:	460b      	mov	r3, r1
 8064902:	00db      	lsls	r3, r3, #3
 8064904:	1a5b      	subs	r3, r3, r1
 8064906:	009b      	lsls	r3, r3, #2
 8064908:	4403      	add	r3, r0
 806490a:	6819      	ldr	r1, [r3, #0]
 806490c:	4b3b      	ldr	r3, [pc, #236]	@ (80649fc <Dem_SaveDtc+0x1b4>)
 806490e:	781c      	ldrb	r4, [r3, #0]
 8064910:	4837      	ldr	r0, [pc, #220]	@ (80649f0 <Dem_SaveDtc+0x1a8>)
 8064912:	4613      	mov	r3, r2
 8064914:	00db      	lsls	r3, r3, #3
 8064916:	1a9b      	subs	r3, r3, r2
 8064918:	009b      	lsls	r3, r3, #2
 806491a:	4403      	add	r3, r0
 806491c:	440b      	add	r3, r1
 806491e:	330e      	adds	r3, #14
 8064920:	4622      	mov	r2, r4
 8064922:	701a      	strb	r2, [r3, #0]
				Dem_DTCStoreArray[index].TimeFF[Dem_DTCStoreArray[index].counter] = Dcm_AliveCounter;
 8064924:	4b36      	ldr	r3, [pc, #216]	@ (8064a00 <Dem_SaveDtc+0x1b8>)
 8064926:	681c      	ldr	r4, [r3, #0]
 8064928:	79fa      	ldrb	r2, [r7, #7]
 806492a:	79f9      	ldrb	r1, [r7, #7]
 806492c:	4830      	ldr	r0, [pc, #192]	@ (80649f0 <Dem_SaveDtc+0x1a8>)
 806492e:	460b      	mov	r3, r1
 8064930:	00db      	lsls	r3, r3, #3
 8064932:	1a5b      	subs	r3, r3, r1
 8064934:	009b      	lsls	r3, r3, #2
 8064936:	4403      	add	r3, r0
 8064938:	6819      	ldr	r1, [r3, #0]
 806493a:	b2e4      	uxtb	r4, r4
 806493c:	482c      	ldr	r0, [pc, #176]	@ (80649f0 <Dem_SaveDtc+0x1a8>)
 806493e:	4613      	mov	r3, r2
 8064940:	00db      	lsls	r3, r3, #3
 8064942:	1a9b      	subs	r3, r3, r2
 8064944:	009b      	lsls	r3, r3, #2
 8064946:	4403      	add	r3, r0
 8064948:	440b      	add	r3, r1
 806494a:	3311      	adds	r3, #17
 806494c:	4622      	mov	r2, r4
 806494e:	701a      	strb	r2, [r3, #0]
				Dem_DTCStoreArray[index].VoltageFF[Dem_DTCStoreArray[index].counter] = VehicleState_Voltage;
 8064950:	79fa      	ldrb	r2, [r7, #7]
 8064952:	79f9      	ldrb	r1, [r7, #7]
 8064954:	4826      	ldr	r0, [pc, #152]	@ (80649f0 <Dem_SaveDtc+0x1a8>)
 8064956:	460b      	mov	r3, r1
 8064958:	00db      	lsls	r3, r3, #3
 806495a:	1a5b      	subs	r3, r3, r1
 806495c:	009b      	lsls	r3, r3, #2
 806495e:	4403      	add	r3, r0
 8064960:	6819      	ldr	r1, [r3, #0]
 8064962:	4b28      	ldr	r3, [pc, #160]	@ (8064a04 <Dem_SaveDtc+0x1bc>)
 8064964:	781c      	ldrb	r4, [r3, #0]
 8064966:	4822      	ldr	r0, [pc, #136]	@ (80649f0 <Dem_SaveDtc+0x1a8>)
 8064968:	4613      	mov	r3, r2
 806496a:	00db      	lsls	r3, r3, #3
 806496c:	1a9b      	subs	r3, r3, r2
 806496e:	009b      	lsls	r3, r3, #2
 8064970:	4403      	add	r3, r0
 8064972:	440b      	add	r3, r1
 8064974:	3308      	adds	r3, #8
 8064976:	4622      	mov	r2, r4
 8064978:	701a      	strb	r2, [r3, #0]
				Dem_DTCStoreArray[index].GearFF[Dem_DTCStoreArray[index].counter] = StatusList_ComOutValue[4];
 806497a:	79fa      	ldrb	r2, [r7, #7]
 806497c:	79f9      	ldrb	r1, [r7, #7]
 806497e:	481c      	ldr	r0, [pc, #112]	@ (80649f0 <Dem_SaveDtc+0x1a8>)
 8064980:	460b      	mov	r3, r1
 8064982:	00db      	lsls	r3, r3, #3
 8064984:	1a5b      	subs	r3, r3, r1
 8064986:	009b      	lsls	r3, r3, #2
 8064988:	4403      	add	r3, r0
 806498a:	6819      	ldr	r1, [r3, #0]
 806498c:	4b1a      	ldr	r3, [pc, #104]	@ (80649f8 <Dem_SaveDtc+0x1b0>)
 806498e:	791c      	ldrb	r4, [r3, #4]
 8064990:	4817      	ldr	r0, [pc, #92]	@ (80649f0 <Dem_SaveDtc+0x1a8>)
 8064992:	4613      	mov	r3, r2
 8064994:	00db      	lsls	r3, r3, #3
 8064996:	1a9b      	subs	r3, r3, r2
 8064998:	009b      	lsls	r3, r3, #2
 806499a:	4403      	add	r3, r0
 806499c:	440b      	add	r3, r1
 806499e:	3317      	adds	r3, #23
 80649a0:	4622      	mov	r2, r4
 80649a2:	701a      	strb	r2, [r3, #0]
				Dem_DTCStoreArray[index].counter++;
 80649a4:	79fa      	ldrb	r2, [r7, #7]
 80649a6:	4912      	ldr	r1, [pc, #72]	@ (80649f0 <Dem_SaveDtc+0x1a8>)
 80649a8:	4613      	mov	r3, r2
 80649aa:	00db      	lsls	r3, r3, #3
 80649ac:	1a9b      	subs	r3, r3, r2
 80649ae:	009b      	lsls	r3, r3, #2
 80649b0:	440b      	add	r3, r1
 80649b2:	681b      	ldr	r3, [r3, #0]
 80649b4:	1c59      	adds	r1, r3, #1
 80649b6:	480e      	ldr	r0, [pc, #56]	@ (80649f0 <Dem_SaveDtc+0x1a8>)
 80649b8:	4613      	mov	r3, r2
 80649ba:	00db      	lsls	r3, r3, #3
 80649bc:	1a9b      	subs	r3, r3, r2
 80649be:	009b      	lsls	r3, r3, #2
 80649c0:	4403      	add	r3, r0
 80649c2:	6019      	str	r1, [r3, #0]
		else
		{
			/* Do nothing. */
		}

		if(0 == status)
 80649c4:	79bb      	ldrb	r3, [r7, #6]
 80649c6:	2b00      	cmp	r3, #0
 80649c8:	d109      	bne.n	80649de <Dem_SaveDtc+0x196>
		{
			Dem_DTCStoreArray[index].isActiveNow = 0;
 80649ca:	79fa      	ldrb	r2, [r7, #7]
 80649cc:	4908      	ldr	r1, [pc, #32]	@ (80649f0 <Dem_SaveDtc+0x1a8>)
 80649ce:	4613      	mov	r3, r2
 80649d0:	00db      	lsls	r3, r3, #3
 80649d2:	1a9b      	subs	r3, r3, r2
 80649d4:	009b      	lsls	r3, r3, #2
 80649d6:	440b      	add	r3, r1
 80649d8:	3304      	adds	r3, #4
 80649da:	2200      	movs	r2, #0
 80649dc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80649de:	b662      	cpsie	i
}
 80649e0:	bf00      	nop
	else
	{
		/* Do nothing. */
	}
	__enable_irq();
}
 80649e2:	bf00      	nop
 80649e4:	370c      	adds	r7, #12
 80649e6:	46bd      	mov	sp, r7
 80649e8:	bd90      	pop	{r4, r7, pc}
 80649ea:	bf00      	nop
 80649ec:	20010474 	.word	0x20010474
 80649f0:	20010478 	.word	0x20010478
 80649f4:	20010460 	.word	0x20010460
 80649f8:	200102cc 	.word	0x200102cc
 80649fc:	2001030c 	.word	0x2001030c
 8064a00:	2001fdac 	.word	0x2001fdac
 8064a04:	2001030d 	.word	0x2001030d

08064a08 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc);
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc);
/* FUNCTIONS END */
/* FUNCTIONS START */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8064a08:	b480      	push	{r7}
 8064a0a:	b083      	sub	sp, #12
 8064a0c:	af00      	add	r7, sp, #0
 8064a0e:	6078      	str	r0, [r7, #4]
	Ain_ConversionComplete = 1;
 8064a10:	4b04      	ldr	r3, [pc, #16]	@ (8064a24 <HAL_ADC_ConvCpltCallback+0x1c>)
 8064a12:	2201      	movs	r2, #1
 8064a14:	701a      	strb	r2, [r3, #0]
}
 8064a16:	bf00      	nop
 8064a18:	370c      	adds	r7, #12
 8064a1a:	46bd      	mov	sp, r7
 8064a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8064a20:	4770      	bx	lr
 8064a22:	bf00      	nop
 8064a24:	200105e4 	.word	0x200105e4

08064a28 <HAL_ADC_ErrorCallback>:
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8064a28:	b580      	push	{r7, lr}
 8064a2a:	b082      	sub	sp, #8
 8064a2c:	af00      	add	r7, sp, #0
 8064a2e:	6078      	str	r0, [r7, #4]
	static uint32 status = 0;
	status = HAL_ADC_GetError(&hadc1);
 8064a30:	4813      	ldr	r0, [pc, #76]	@ (8064a80 <HAL_ADC_ErrorCallback+0x58>)
 8064a32:	f003 f821 	bl	8067a78 <HAL_ADC_GetError>
 8064a36:	4603      	mov	r3, r0
 8064a38:	4a12      	ldr	r2, [pc, #72]	@ (8064a84 <HAL_ADC_ErrorCallback+0x5c>)
 8064a3a:	6013      	str	r3, [r2, #0]
	switch(status)
 8064a3c:	4b11      	ldr	r3, [pc, #68]	@ (8064a84 <HAL_ADC_ErrorCallback+0x5c>)
 8064a3e:	681b      	ldr	r3, [r3, #0]
 8064a40:	2b04      	cmp	r3, #4
 8064a42:	d012      	beq.n	8064a6a <HAL_ADC_ErrorCallback+0x42>
 8064a44:	2b04      	cmp	r3, #4
 8064a46:	d816      	bhi.n	8064a76 <HAL_ADC_ErrorCallback+0x4e>
 8064a48:	2b01      	cmp	r3, #1
 8064a4a:	d002      	beq.n	8064a52 <HAL_ADC_ErrorCallback+0x2a>
 8064a4c:	2b02      	cmp	r3, #2
 8064a4e:	d006      	beq.n	8064a5e <HAL_ADC_ErrorCallback+0x36>
		break;
	case HAL_ADC_ERROR_DMA:
		Adc_Error[2]++;
		break;
	}
}
 8064a50:	e011      	b.n	8064a76 <HAL_ADC_ErrorCallback+0x4e>
		Adc_Error[0]++;
 8064a52:	4b0d      	ldr	r3, [pc, #52]	@ (8064a88 <HAL_ADC_ErrorCallback+0x60>)
 8064a54:	681b      	ldr	r3, [r3, #0]
 8064a56:	3301      	adds	r3, #1
 8064a58:	4a0b      	ldr	r2, [pc, #44]	@ (8064a88 <HAL_ADC_ErrorCallback+0x60>)
 8064a5a:	6013      	str	r3, [r2, #0]
		break;
 8064a5c:	e00b      	b.n	8064a76 <HAL_ADC_ErrorCallback+0x4e>
		Adc_Error[1]++;
 8064a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8064a88 <HAL_ADC_ErrorCallback+0x60>)
 8064a60:	685b      	ldr	r3, [r3, #4]
 8064a62:	3301      	adds	r3, #1
 8064a64:	4a08      	ldr	r2, [pc, #32]	@ (8064a88 <HAL_ADC_ErrorCallback+0x60>)
 8064a66:	6053      	str	r3, [r2, #4]
		break;
 8064a68:	e005      	b.n	8064a76 <HAL_ADC_ErrorCallback+0x4e>
		Adc_Error[2]++;
 8064a6a:	4b07      	ldr	r3, [pc, #28]	@ (8064a88 <HAL_ADC_ErrorCallback+0x60>)
 8064a6c:	689b      	ldr	r3, [r3, #8]
 8064a6e:	3301      	adds	r3, #1
 8064a70:	4a05      	ldr	r2, [pc, #20]	@ (8064a88 <HAL_ADC_ErrorCallback+0x60>)
 8064a72:	6093      	str	r3, [r2, #8]
		break;
 8064a74:	bf00      	nop
}
 8064a76:	bf00      	nop
 8064a78:	3708      	adds	r7, #8
 8064a7a:	46bd      	mov	sp, r7
 8064a7c:	bd80      	pop	{r7, pc}
 8064a7e:	bf00      	nop
 8064a80:	2001082c 	.word	0x2001082c
 8064a84:	20010608 	.word	0x20010608
 8064a88:	200105fc 	.word	0x200105fc

08064a8c <Ain_MainFunction>:
void Ain_MainFunction(void)
{
 8064a8c:	b580      	push	{r7, lr}
 8064a8e:	b082      	sub	sp, #8
 8064a90:	af00      	add	r7, sp, #0
	/* Main counter. */
	static uint32 Ain_MainCounter = 0;
	/* Muxer pin iterator. */
	static uint8 Ain_CounterMux = 0;
	/* Check for error. */
	status = HAL_ADC_GetError(&hadc1);
 8064a92:	4893      	ldr	r0, [pc, #588]	@ (8064ce0 <Ain_MainFunction+0x254>)
 8064a94:	f002 fff0 	bl	8067a78 <HAL_ADC_GetError>
 8064a98:	4603      	mov	r3, r0
 8064a9a:	4a92      	ldr	r2, [pc, #584]	@ (8064ce4 <Ain_MainFunction+0x258>)
 8064a9c:	6013      	str	r3, [r2, #0]
	/* Call the error callback in case of error. */
	if(status) HAL_ADC_ErrorCallback(&hadc1);
 8064a9e:	4b91      	ldr	r3, [pc, #580]	@ (8064ce4 <Ain_MainFunction+0x258>)
 8064aa0:	681b      	ldr	r3, [r3, #0]
 8064aa2:	2b00      	cmp	r3, #0
 8064aa4:	d003      	beq.n	8064aae <Ain_MainFunction+0x22>
 8064aa6:	488e      	ldr	r0, [pc, #568]	@ (8064ce0 <Ain_MainFunction+0x254>)
 8064aa8:	f7ff ffbe 	bl	8064a28 <HAL_ADC_ErrorCallback>
 8064aac:	e156      	b.n	8064d5c <Ain_MainFunction+0x2d0>
	else for(uint8 i = 0; i < 3; i++) Adc_Error[i] = 0;
 8064aae:	2300      	movs	r3, #0
 8064ab0:	71fb      	strb	r3, [r7, #7]
 8064ab2:	e007      	b.n	8064ac4 <Ain_MainFunction+0x38>
 8064ab4:	79fb      	ldrb	r3, [r7, #7]
 8064ab6:	4a8c      	ldr	r2, [pc, #560]	@ (8064ce8 <Ain_MainFunction+0x25c>)
 8064ab8:	2100      	movs	r1, #0
 8064aba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8064abe:	79fb      	ldrb	r3, [r7, #7]
 8064ac0:	3301      	adds	r3, #1
 8064ac2:	71fb      	strb	r3, [r7, #7]
 8064ac4:	79fb      	ldrb	r3, [r7, #7]
 8064ac6:	2b02      	cmp	r3, #2
 8064ac8:	d9f4      	bls.n	8064ab4 <Ain_MainFunction+0x28>
	{

	}
	/* Process the analog inputs coming from the muxer. */
	while(Ain_CounterMux < ADCMUX_NUMBER_OF_INPUTS)
 8064aca:	e147      	b.n	8064d5c <Ain_MainFunction+0x2d0>
	{
		switch(Ain_CounterMux)
 8064acc:	4b87      	ldr	r3, [pc, #540]	@ (8064cec <Ain_MainFunction+0x260>)
 8064ace:	781b      	ldrb	r3, [r3, #0]
 8064ad0:	2b09      	cmp	r3, #9
 8064ad2:	f200 80fd 	bhi.w	8064cd0 <Ain_MainFunction+0x244>
 8064ad6:	a201      	add	r2, pc, #4	@ (adr r2, 8064adc <Ain_MainFunction+0x50>)
 8064ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8064adc:	08064b05 	.word	0x08064b05
 8064ae0:	08064b33 	.word	0x08064b33
 8064ae4:	08064b61 	.word	0x08064b61
 8064ae8:	08064b8f 	.word	0x08064b8f
 8064aec:	08064bbd 	.word	0x08064bbd
 8064af0:	08064beb 	.word	0x08064beb
 8064af4:	08064c19 	.word	0x08064c19
 8064af8:	08064c47 	.word	0x08064c47
 8064afc:	08064c75 	.word	0x08064c75
 8064b00:	08064ca3 	.word	0x08064ca3
		{
		case 0:
			HAL_GPIO_WritePin(SIG0_ADCMUX_GPIO_Port, SIG0_ADCMUX_Pin, 1);
 8064b04:	2201      	movs	r2, #1
 8064b06:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8064b0a:	4879      	ldr	r0, [pc, #484]	@ (8064cf0 <Ain_MainFunction+0x264>)
 8064b0c:	f004 f9b8 	bl	8068e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SIG1_ADCMUX_GPIO_Port, SIG1_ADCMUX_Pin, 0);
 8064b10:	2200      	movs	r2, #0
 8064b12:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8064b16:	4877      	ldr	r0, [pc, #476]	@ (8064cf4 <Ain_MainFunction+0x268>)
 8064b18:	f004 f9b2 	bl	8068e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SIG2_ADCMUX_GPIO_Port, SIG2_ADCMUX_Pin, 0);
 8064b1c:	2200      	movs	r2, #0
 8064b1e:	2110      	movs	r1, #16
 8064b20:	4874      	ldr	r0, [pc, #464]	@ (8064cf4 <Ain_MainFunction+0x268>)
 8064b22:	f004 f9ad 	bl	8068e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SIG3_ADCMUX_GPIO_Port, SIG3_ADCMUX_Pin, 0);
 8064b26:	2200      	movs	r2, #0
 8064b28:	2120      	movs	r1, #32
 8064b2a:	4872      	ldr	r0, [pc, #456]	@ (8064cf4 <Ain_MainFunction+0x268>)
 8064b2c:	f004 f9a8 	bl	8068e80 <HAL_GPIO_WritePin>
			break;
 8064b30:	e0cf      	b.n	8064cd2 <Ain_MainFunction+0x246>
		case 1:
			HAL_GPIO_WritePin(SIG0_ADCMUX_GPIO_Port, SIG0_ADCMUX_Pin, 0);
 8064b32:	2200      	movs	r2, #0
 8064b34:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8064b38:	486d      	ldr	r0, [pc, #436]	@ (8064cf0 <Ain_MainFunction+0x264>)
 8064b3a:	f004 f9a1 	bl	8068e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SIG1_ADCMUX_GPIO_Port, SIG1_ADCMUX_Pin, 1);
 8064b3e:	2201      	movs	r2, #1
 8064b40:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8064b44:	486b      	ldr	r0, [pc, #428]	@ (8064cf4 <Ain_MainFunction+0x268>)
 8064b46:	f004 f99b 	bl	8068e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SIG2_ADCMUX_GPIO_Port, SIG2_ADCMUX_Pin, 0);
 8064b4a:	2200      	movs	r2, #0
 8064b4c:	2110      	movs	r1, #16
 8064b4e:	4869      	ldr	r0, [pc, #420]	@ (8064cf4 <Ain_MainFunction+0x268>)
 8064b50:	f004 f996 	bl	8068e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SIG3_ADCMUX_GPIO_Port, SIG3_ADCMUX_Pin, 0);
 8064b54:	2200      	movs	r2, #0
 8064b56:	2120      	movs	r1, #32
 8064b58:	4866      	ldr	r0, [pc, #408]	@ (8064cf4 <Ain_MainFunction+0x268>)
 8064b5a:	f004 f991 	bl	8068e80 <HAL_GPIO_WritePin>
			break;
 8064b5e:	e0b8      	b.n	8064cd2 <Ain_MainFunction+0x246>
		case 2:
			HAL_GPIO_WritePin(SIG0_ADCMUX_GPIO_Port, SIG0_ADCMUX_Pin, 1);
 8064b60:	2201      	movs	r2, #1
 8064b62:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8064b66:	4862      	ldr	r0, [pc, #392]	@ (8064cf0 <Ain_MainFunction+0x264>)
 8064b68:	f004 f98a 	bl	8068e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SIG1_ADCMUX_GPIO_Port, SIG1_ADCMUX_Pin, 1);
 8064b6c:	2201      	movs	r2, #1
 8064b6e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8064b72:	4860      	ldr	r0, [pc, #384]	@ (8064cf4 <Ain_MainFunction+0x268>)
 8064b74:	f004 f984 	bl	8068e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SIG2_ADCMUX_GPIO_Port, SIG2_ADCMUX_Pin, 0);
 8064b78:	2200      	movs	r2, #0
 8064b7a:	2110      	movs	r1, #16
 8064b7c:	485d      	ldr	r0, [pc, #372]	@ (8064cf4 <Ain_MainFunction+0x268>)
 8064b7e:	f004 f97f 	bl	8068e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SIG3_ADCMUX_GPIO_Port, SIG3_ADCMUX_Pin, 0);
 8064b82:	2200      	movs	r2, #0
 8064b84:	2120      	movs	r1, #32
 8064b86:	485b      	ldr	r0, [pc, #364]	@ (8064cf4 <Ain_MainFunction+0x268>)
 8064b88:	f004 f97a 	bl	8068e80 <HAL_GPIO_WritePin>
			break;
 8064b8c:	e0a1      	b.n	8064cd2 <Ain_MainFunction+0x246>
		case 3:
			HAL_GPIO_WritePin(SIG0_ADCMUX_GPIO_Port, SIG0_ADCMUX_Pin, 0);
 8064b8e:	2200      	movs	r2, #0
 8064b90:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8064b94:	4856      	ldr	r0, [pc, #344]	@ (8064cf0 <Ain_MainFunction+0x264>)
 8064b96:	f004 f973 	bl	8068e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SIG1_ADCMUX_GPIO_Port, SIG1_ADCMUX_Pin, 0);
 8064b9a:	2200      	movs	r2, #0
 8064b9c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8064ba0:	4854      	ldr	r0, [pc, #336]	@ (8064cf4 <Ain_MainFunction+0x268>)
 8064ba2:	f004 f96d 	bl	8068e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SIG2_ADCMUX_GPIO_Port, SIG2_ADCMUX_Pin, 1);
 8064ba6:	2201      	movs	r2, #1
 8064ba8:	2110      	movs	r1, #16
 8064baa:	4852      	ldr	r0, [pc, #328]	@ (8064cf4 <Ain_MainFunction+0x268>)
 8064bac:	f004 f968 	bl	8068e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SIG3_ADCMUX_GPIO_Port, SIG3_ADCMUX_Pin, 0);
 8064bb0:	2200      	movs	r2, #0
 8064bb2:	2120      	movs	r1, #32
 8064bb4:	484f      	ldr	r0, [pc, #316]	@ (8064cf4 <Ain_MainFunction+0x268>)
 8064bb6:	f004 f963 	bl	8068e80 <HAL_GPIO_WritePin>
			break;
 8064bba:	e08a      	b.n	8064cd2 <Ain_MainFunction+0x246>
		case 4:
			HAL_GPIO_WritePin(SIG0_ADCMUX_GPIO_Port, SIG0_ADCMUX_Pin, 1);
 8064bbc:	2201      	movs	r2, #1
 8064bbe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8064bc2:	484b      	ldr	r0, [pc, #300]	@ (8064cf0 <Ain_MainFunction+0x264>)
 8064bc4:	f004 f95c 	bl	8068e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SIG1_ADCMUX_GPIO_Port, SIG1_ADCMUX_Pin, 0);
 8064bc8:	2200      	movs	r2, #0
 8064bca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8064bce:	4849      	ldr	r0, [pc, #292]	@ (8064cf4 <Ain_MainFunction+0x268>)
 8064bd0:	f004 f956 	bl	8068e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SIG2_ADCMUX_GPIO_Port, SIG2_ADCMUX_Pin, 1);
 8064bd4:	2201      	movs	r2, #1
 8064bd6:	2110      	movs	r1, #16
 8064bd8:	4846      	ldr	r0, [pc, #280]	@ (8064cf4 <Ain_MainFunction+0x268>)
 8064bda:	f004 f951 	bl	8068e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SIG3_ADCMUX_GPIO_Port, SIG3_ADCMUX_Pin, 0);
 8064bde:	2200      	movs	r2, #0
 8064be0:	2120      	movs	r1, #32
 8064be2:	4844      	ldr	r0, [pc, #272]	@ (8064cf4 <Ain_MainFunction+0x268>)
 8064be4:	f004 f94c 	bl	8068e80 <HAL_GPIO_WritePin>
			break;
 8064be8:	e073      	b.n	8064cd2 <Ain_MainFunction+0x246>
		case 5:
			HAL_GPIO_WritePin(SIG0_ADCMUX_GPIO_Port, SIG0_ADCMUX_Pin, 0);
 8064bea:	2200      	movs	r2, #0
 8064bec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8064bf0:	483f      	ldr	r0, [pc, #252]	@ (8064cf0 <Ain_MainFunction+0x264>)
 8064bf2:	f004 f945 	bl	8068e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SIG1_ADCMUX_GPIO_Port, SIG1_ADCMUX_Pin, 1);
 8064bf6:	2201      	movs	r2, #1
 8064bf8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8064bfc:	483d      	ldr	r0, [pc, #244]	@ (8064cf4 <Ain_MainFunction+0x268>)
 8064bfe:	f004 f93f 	bl	8068e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SIG2_ADCMUX_GPIO_Port, SIG2_ADCMUX_Pin, 1);
 8064c02:	2201      	movs	r2, #1
 8064c04:	2110      	movs	r1, #16
 8064c06:	483b      	ldr	r0, [pc, #236]	@ (8064cf4 <Ain_MainFunction+0x268>)
 8064c08:	f004 f93a 	bl	8068e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SIG3_ADCMUX_GPIO_Port, SIG3_ADCMUX_Pin, 0);
 8064c0c:	2200      	movs	r2, #0
 8064c0e:	2120      	movs	r1, #32
 8064c10:	4838      	ldr	r0, [pc, #224]	@ (8064cf4 <Ain_MainFunction+0x268>)
 8064c12:	f004 f935 	bl	8068e80 <HAL_GPIO_WritePin>
			break;
 8064c16:	e05c      	b.n	8064cd2 <Ain_MainFunction+0x246>
		case 6:
			HAL_GPIO_WritePin(SIG0_ADCMUX_GPIO_Port, SIG0_ADCMUX_Pin, 1);
 8064c18:	2201      	movs	r2, #1
 8064c1a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8064c1e:	4834      	ldr	r0, [pc, #208]	@ (8064cf0 <Ain_MainFunction+0x264>)
 8064c20:	f004 f92e 	bl	8068e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SIG1_ADCMUX_GPIO_Port, SIG1_ADCMUX_Pin, 1);
 8064c24:	2201      	movs	r2, #1
 8064c26:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8064c2a:	4832      	ldr	r0, [pc, #200]	@ (8064cf4 <Ain_MainFunction+0x268>)
 8064c2c:	f004 f928 	bl	8068e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SIG2_ADCMUX_GPIO_Port, SIG2_ADCMUX_Pin, 1);
 8064c30:	2201      	movs	r2, #1
 8064c32:	2110      	movs	r1, #16
 8064c34:	482f      	ldr	r0, [pc, #188]	@ (8064cf4 <Ain_MainFunction+0x268>)
 8064c36:	f004 f923 	bl	8068e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SIG3_ADCMUX_GPIO_Port, SIG3_ADCMUX_Pin, 0);
 8064c3a:	2200      	movs	r2, #0
 8064c3c:	2120      	movs	r1, #32
 8064c3e:	482d      	ldr	r0, [pc, #180]	@ (8064cf4 <Ain_MainFunction+0x268>)
 8064c40:	f004 f91e 	bl	8068e80 <HAL_GPIO_WritePin>
			break;
 8064c44:	e045      	b.n	8064cd2 <Ain_MainFunction+0x246>
		case 7:
			HAL_GPIO_WritePin(SIG0_ADCMUX_GPIO_Port, SIG0_ADCMUX_Pin, 0);
 8064c46:	2200      	movs	r2, #0
 8064c48:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8064c4c:	4828      	ldr	r0, [pc, #160]	@ (8064cf0 <Ain_MainFunction+0x264>)
 8064c4e:	f004 f917 	bl	8068e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SIG1_ADCMUX_GPIO_Port, SIG1_ADCMUX_Pin, 0);
 8064c52:	2200      	movs	r2, #0
 8064c54:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8064c58:	4826      	ldr	r0, [pc, #152]	@ (8064cf4 <Ain_MainFunction+0x268>)
 8064c5a:	f004 f911 	bl	8068e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SIG2_ADCMUX_GPIO_Port, SIG2_ADCMUX_Pin, 0);
 8064c5e:	2200      	movs	r2, #0
 8064c60:	2110      	movs	r1, #16
 8064c62:	4824      	ldr	r0, [pc, #144]	@ (8064cf4 <Ain_MainFunction+0x268>)
 8064c64:	f004 f90c 	bl	8068e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SIG3_ADCMUX_GPIO_Port, SIG3_ADCMUX_Pin, 1);
 8064c68:	2201      	movs	r2, #1
 8064c6a:	2120      	movs	r1, #32
 8064c6c:	4821      	ldr	r0, [pc, #132]	@ (8064cf4 <Ain_MainFunction+0x268>)
 8064c6e:	f004 f907 	bl	8068e80 <HAL_GPIO_WritePin>
			break;
 8064c72:	e02e      	b.n	8064cd2 <Ain_MainFunction+0x246>
		case 8:
			HAL_GPIO_WritePin(SIG0_ADCMUX_GPIO_Port, SIG0_ADCMUX_Pin, 1);
 8064c74:	2201      	movs	r2, #1
 8064c76:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8064c7a:	481d      	ldr	r0, [pc, #116]	@ (8064cf0 <Ain_MainFunction+0x264>)
 8064c7c:	f004 f900 	bl	8068e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SIG1_ADCMUX_GPIO_Port, SIG1_ADCMUX_Pin, 0);
 8064c80:	2200      	movs	r2, #0
 8064c82:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8064c86:	481b      	ldr	r0, [pc, #108]	@ (8064cf4 <Ain_MainFunction+0x268>)
 8064c88:	f004 f8fa 	bl	8068e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SIG2_ADCMUX_GPIO_Port, SIG2_ADCMUX_Pin, 0);
 8064c8c:	2200      	movs	r2, #0
 8064c8e:	2110      	movs	r1, #16
 8064c90:	4818      	ldr	r0, [pc, #96]	@ (8064cf4 <Ain_MainFunction+0x268>)
 8064c92:	f004 f8f5 	bl	8068e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SIG3_ADCMUX_GPIO_Port, SIG3_ADCMUX_Pin, 1);
 8064c96:	2201      	movs	r2, #1
 8064c98:	2120      	movs	r1, #32
 8064c9a:	4816      	ldr	r0, [pc, #88]	@ (8064cf4 <Ain_MainFunction+0x268>)
 8064c9c:	f004 f8f0 	bl	8068e80 <HAL_GPIO_WritePin>
			break;
 8064ca0:	e017      	b.n	8064cd2 <Ain_MainFunction+0x246>
		case 9:
			HAL_GPIO_WritePin(SIG0_ADCMUX_GPIO_Port, SIG0_ADCMUX_Pin, 0);
 8064ca2:	2200      	movs	r2, #0
 8064ca4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8064ca8:	4811      	ldr	r0, [pc, #68]	@ (8064cf0 <Ain_MainFunction+0x264>)
 8064caa:	f004 f8e9 	bl	8068e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SIG1_ADCMUX_GPIO_Port, SIG1_ADCMUX_Pin, 1);
 8064cae:	2201      	movs	r2, #1
 8064cb0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8064cb4:	480f      	ldr	r0, [pc, #60]	@ (8064cf4 <Ain_MainFunction+0x268>)
 8064cb6:	f004 f8e3 	bl	8068e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SIG2_ADCMUX_GPIO_Port, SIG2_ADCMUX_Pin, 0);
 8064cba:	2200      	movs	r2, #0
 8064cbc:	2110      	movs	r1, #16
 8064cbe:	480d      	ldr	r0, [pc, #52]	@ (8064cf4 <Ain_MainFunction+0x268>)
 8064cc0:	f004 f8de 	bl	8068e80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SIG3_ADCMUX_GPIO_Port, SIG3_ADCMUX_Pin, 1);
 8064cc4:	2201      	movs	r2, #1
 8064cc6:	2120      	movs	r1, #32
 8064cc8:	480a      	ldr	r0, [pc, #40]	@ (8064cf4 <Ain_MainFunction+0x268>)
 8064cca:	f004 f8d9 	bl	8068e80 <HAL_GPIO_WritePin>
			break;
 8064cce:	e000      	b.n	8064cd2 <Ain_MainFunction+0x246>
		default:
			break;
 8064cd0:	bf00      	nop
		}
		/* Start the measurement. */
		HAL_ADC_Start_IT(&hadc1);
 8064cd2:	4803      	ldr	r0, [pc, #12]	@ (8064ce0 <Ain_MainFunction+0x254>)
 8064cd4:	f002 faca 	bl	806726c <HAL_ADC_Start_IT>
		/* Refresh the end-of-conversion variable. */
		Ain_ConversionComplete = 0;
 8064cd8:	4b07      	ldr	r3, [pc, #28]	@ (8064cf8 <Ain_MainFunction+0x26c>)
 8064cda:	2200      	movs	r2, #0
 8064cdc:	701a      	strb	r2, [r3, #0]
		/* Wait for conversion. */
		while(Ain_ConversionComplete == 0 && counter < 20000) counter++;
 8064cde:	e012      	b.n	8064d06 <Ain_MainFunction+0x27a>
 8064ce0:	2001082c 	.word	0x2001082c
 8064ce4:	2001060c 	.word	0x2001060c
 8064ce8:	200105fc 	.word	0x200105fc
 8064cec:	20010610 	.word	0x20010610
 8064cf0:	40020000 	.word	0x40020000
 8064cf4:	40020400 	.word	0x40020400
 8064cf8:	200105e4 	.word	0x200105e4
 8064cfc:	4b38      	ldr	r3, [pc, #224]	@ (8064de0 <Ain_MainFunction+0x354>)
 8064cfe:	681b      	ldr	r3, [r3, #0]
 8064d00:	3301      	adds	r3, #1
 8064d02:	4a37      	ldr	r2, [pc, #220]	@ (8064de0 <Ain_MainFunction+0x354>)
 8064d04:	6013      	str	r3, [r2, #0]
 8064d06:	4b37      	ldr	r3, [pc, #220]	@ (8064de4 <Ain_MainFunction+0x358>)
 8064d08:	781b      	ldrb	r3, [r3, #0]
 8064d0a:	2b00      	cmp	r3, #0
 8064d0c:	d105      	bne.n	8064d1a <Ain_MainFunction+0x28e>
 8064d0e:	4b34      	ldr	r3, [pc, #208]	@ (8064de0 <Ain_MainFunction+0x354>)
 8064d10:	681b      	ldr	r3, [r3, #0]
 8064d12:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8064d16:	4293      	cmp	r3, r2
 8064d18:	d9f0      	bls.n	8064cfc <Ain_MainFunction+0x270>
		if(20000 == counter) Dem_SaveDtc(10, 0xE);
 8064d1a:	4b31      	ldr	r3, [pc, #196]	@ (8064de0 <Ain_MainFunction+0x354>)
 8064d1c:	681b      	ldr	r3, [r3, #0]
 8064d1e:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8064d22:	4293      	cmp	r3, r2
 8064d24:	d103      	bne.n	8064d2e <Ain_MainFunction+0x2a2>
 8064d26:	210e      	movs	r1, #14
 8064d28:	200a      	movs	r0, #10
 8064d2a:	f7ff fd8d 	bl	8064848 <Dem_SaveDtc>
		else
		{
			/* Do nothing. */
		}
		counter = 0;
 8064d2e:	4b2c      	ldr	r3, [pc, #176]	@ (8064de0 <Ain_MainFunction+0x354>)
 8064d30:	2200      	movs	r2, #0
 8064d32:	601a      	str	r2, [r3, #0]
		/* Get the measured value. */
		Ain_Mux[Ain_CounterMux] = HAL_ADC_GetValue(&hadc1);
 8064d34:	482c      	ldr	r0, [pc, #176]	@ (8064de8 <Ain_MainFunction+0x35c>)
 8064d36:	f002 fd07 	bl	8067748 <HAL_ADC_GetValue>
 8064d3a:	4601      	mov	r1, r0
 8064d3c:	4b2b      	ldr	r3, [pc, #172]	@ (8064dec <Ain_MainFunction+0x360>)
 8064d3e:	781b      	ldrb	r3, [r3, #0]
 8064d40:	461a      	mov	r2, r3
 8064d42:	b289      	uxth	r1, r1
 8064d44:	4b2a      	ldr	r3, [pc, #168]	@ (8064df0 <Ain_MainFunction+0x364>)
 8064d46:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		/* Stop the measurement. */
		HAL_ADC_Stop_IT(&hadc1);
 8064d4a:	4827      	ldr	r0, [pc, #156]	@ (8064de8 <Ain_MainFunction+0x35c>)
 8064d4c:	f002 fb70 	bl	8067430 <HAL_ADC_Stop_IT>
		/* Get the next value in the muxer. */
		Ain_CounterMux++;
 8064d50:	4b26      	ldr	r3, [pc, #152]	@ (8064dec <Ain_MainFunction+0x360>)
 8064d52:	781b      	ldrb	r3, [r3, #0]
 8064d54:	3301      	adds	r3, #1
 8064d56:	b2da      	uxtb	r2, r3
 8064d58:	4b24      	ldr	r3, [pc, #144]	@ (8064dec <Ain_MainFunction+0x360>)
 8064d5a:	701a      	strb	r2, [r3, #0]
	while(Ain_CounterMux < ADCMUX_NUMBER_OF_INPUTS)
 8064d5c:	4b23      	ldr	r3, [pc, #140]	@ (8064dec <Ain_MainFunction+0x360>)
 8064d5e:	781b      	ldrb	r3, [r3, #0]
 8064d60:	2b09      	cmp	r3, #9
 8064d62:	f67f aeb3 	bls.w	8064acc <Ain_MainFunction+0x40>
	}
	/* Reset the muxer counter.  */
	if(Ain_CounterMux == ADCMUX_NUMBER_OF_INPUTS) Ain_CounterMux = 0;
 8064d66:	4b21      	ldr	r3, [pc, #132]	@ (8064dec <Ain_MainFunction+0x360>)
 8064d68:	781b      	ldrb	r3, [r3, #0]
 8064d6a:	2b0a      	cmp	r3, #10
 8064d6c:	d102      	bne.n	8064d74 <Ain_MainFunction+0x2e8>
 8064d6e:	4b1f      	ldr	r3, [pc, #124]	@ (8064dec <Ain_MainFunction+0x360>)
 8064d70:	2200      	movs	r2, #0
 8064d72:	701a      	strb	r2, [r3, #0]
	else
	{
		/* Do nothing. */
	}
	/* Store the measured values. */
	StatusList_InputValue[IGN_ARRPOS] = Ain_Mux[IGNPOT_POS];
 8064d74:	4b1e      	ldr	r3, [pc, #120]	@ (8064df0 <Ain_MainFunction+0x364>)
 8064d76:	881b      	ldrh	r3, [r3, #0]
 8064d78:	461a      	mov	r2, r3
 8064d7a:	4b1e      	ldr	r3, [pc, #120]	@ (8064df4 <Ain_MainFunction+0x368>)
 8064d7c:	601a      	str	r2, [r3, #0]
	StatusList_InputValue[ACC_ARRPOS] = Ain_Mux[ACCPOT_POS];
 8064d7e:	4b1c      	ldr	r3, [pc, #112]	@ (8064df0 <Ain_MainFunction+0x364>)
 8064d80:	885b      	ldrh	r3, [r3, #2]
 8064d82:	461a      	mov	r2, r3
 8064d84:	4b1b      	ldr	r3, [pc, #108]	@ (8064df4 <Ain_MainFunction+0x368>)
 8064d86:	605a      	str	r2, [r3, #4]
	StatusList_InputValue[BR_ARRPOS] = Ain_Mux[BRPOT_POS];
 8064d88:	4b19      	ldr	r3, [pc, #100]	@ (8064df0 <Ain_MainFunction+0x364>)
 8064d8a:	889b      	ldrh	r3, [r3, #4]
 8064d8c:	461a      	mov	r2, r3
 8064d8e:	4b19      	ldr	r3, [pc, #100]	@ (8064df4 <Ain_MainFunction+0x368>)
 8064d90:	609a      	str	r2, [r3, #8]
	StatusList_InputValue[PS_ARRPOS] = Ain_Mux[PSPOT_POS];
 8064d92:	4b17      	ldr	r3, [pc, #92]	@ (8064df0 <Ain_MainFunction+0x364>)
 8064d94:	899b      	ldrh	r3, [r3, #12]
 8064d96:	461a      	mov	r2, r3
 8064d98:	4b16      	ldr	r3, [pc, #88]	@ (8064df4 <Ain_MainFunction+0x368>)
 8064d9a:	60da      	str	r2, [r3, #12]
	StatusList_InputValue[GB_ARRPOS] = Ain_Mux[GBPOT_POS];
 8064d9c:	4b14      	ldr	r3, [pc, #80]	@ (8064df0 <Ain_MainFunction+0x364>)
 8064d9e:	89db      	ldrh	r3, [r3, #14]
 8064da0:	461a      	mov	r2, r3
 8064da2:	4b14      	ldr	r3, [pc, #80]	@ (8064df4 <Ain_MainFunction+0x368>)
 8064da4:	611a      	str	r2, [r3, #16]
	StatusList_InputValue[LSNS_ARRPOS] = Ain_Mux[LS_POS];
 8064da6:	4b12      	ldr	r3, [pc, #72]	@ (8064df0 <Ain_MainFunction+0x364>)
 8064da8:	8a1b      	ldrh	r3, [r3, #16]
 8064daa:	461a      	mov	r2, r3
 8064dac:	4b11      	ldr	r3, [pc, #68]	@ (8064df4 <Ain_MainFunction+0x368>)
 8064dae:	615a      	str	r2, [r3, #20]
	StatusList_InputValue[RSNS_ARRPOS] = Ain_Mux[RS_POS];
 8064db0:	4b0f      	ldr	r3, [pc, #60]	@ (8064df0 <Ain_MainFunction+0x364>)
 8064db2:	891b      	ldrh	r3, [r3, #8]
 8064db4:	461a      	mov	r2, r3
 8064db6:	4b0f      	ldr	r3, [pc, #60]	@ (8064df4 <Ain_MainFunction+0x368>)
 8064db8:	619a      	str	r2, [r3, #24]
	StatusList_InputValue[AQSNS_ARRPOS] = Ain_Mux[AQS_POS];
 8064dba:	4b0d      	ldr	r3, [pc, #52]	@ (8064df0 <Ain_MainFunction+0x364>)
 8064dbc:	88db      	ldrh	r3, [r3, #6]
 8064dbe:	461a      	mov	r2, r3
 8064dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8064df4 <Ain_MainFunction+0x368>)
 8064dc2:	61da      	str	r2, [r3, #28]
	StatusList_InputValue[GSNS_ARRPOS] = Ain_Mux[GS_POS];
 8064dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8064df0 <Ain_MainFunction+0x364>)
 8064dc6:	8a5b      	ldrh	r3, [r3, #18]
 8064dc8:	461a      	mov	r2, r3
 8064dca:	4b0a      	ldr	r3, [pc, #40]	@ (8064df4 <Ain_MainFunction+0x368>)
 8064dcc:	621a      	str	r2, [r3, #32]
	/* Increment the counter. */
	Ain_MainCounter++;
 8064dce:	4b0a      	ldr	r3, [pc, #40]	@ (8064df8 <Ain_MainFunction+0x36c>)
 8064dd0:	681b      	ldr	r3, [r3, #0]
 8064dd2:	3301      	adds	r3, #1
 8064dd4:	4a08      	ldr	r2, [pc, #32]	@ (8064df8 <Ain_MainFunction+0x36c>)
 8064dd6:	6013      	str	r3, [r2, #0]
}
 8064dd8:	bf00      	nop
 8064dda:	3708      	adds	r7, #8
 8064ddc:	46bd      	mov	sp, r7
 8064dde:	bd80      	pop	{r7, pc}
 8064de0:	20010614 	.word	0x20010614
 8064de4:	200105e4 	.word	0x200105e4
 8064de8:	2001082c 	.word	0x2001082c
 8064dec:	20010610 	.word	0x20010610
 8064df0:	200105e8 	.word	0x200105e8
 8064df4:	200101f0 	.word	0x200101f0
 8064df8:	20010618 	.word	0x20010618

08064dfc <TimH_MainFunction>:
/* FUNCTIONS START */
void TimH_MainFunction(void);
/* FUNCTIONS END */
/* FUNCTIONS START */
void TimH_MainFunction(void)
{
 8064dfc:	b580      	push	{r7, lr}
 8064dfe:	af00      	add	r7, sp, #0
	/* Main counter. */
	static uint32 TimH_MainCounter = 0;
	/* Initialize the timers. */
	if(TimH_MainCounter == 0)
 8064e00:	4b28      	ldr	r3, [pc, #160]	@ (8064ea4 <TimH_MainFunction+0xa8>)
 8064e02:	681b      	ldr	r3, [r3, #0]
 8064e04:	2b00      	cmp	r3, #0
 8064e06:	d127      	bne.n	8064e58 <TimH_MainFunction+0x5c>
	{
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8064e08:	2100      	movs	r1, #0
 8064e0a:	4827      	ldr	r0, [pc, #156]	@ (8064ea8 <TimH_MainFunction+0xac>)
 8064e0c:	f006 fa08 	bl	806b220 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8064e10:	2100      	movs	r1, #0
 8064e12:	4826      	ldr	r0, [pc, #152]	@ (8064eac <TimH_MainFunction+0xb0>)
 8064e14:	f006 fa04 	bl	806b220 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8064e18:	2104      	movs	r1, #4
 8064e1a:	4824      	ldr	r0, [pc, #144]	@ (8064eac <TimH_MainFunction+0xb0>)
 8064e1c:	f006 fa00 	bl	806b220 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8064e20:	2108      	movs	r1, #8
 8064e22:	4822      	ldr	r0, [pc, #136]	@ (8064eac <TimH_MainFunction+0xb0>)
 8064e24:	f006 f9fc 	bl	806b220 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8064e28:	210c      	movs	r1, #12
 8064e2a:	4820      	ldr	r0, [pc, #128]	@ (8064eac <TimH_MainFunction+0xb0>)
 8064e2c:	f006 f9f8 	bl	806b220 <HAL_TIM_PWM_Start>
		htim2.Instance->CCR1 = 0;
 8064e30:	4b1d      	ldr	r3, [pc, #116]	@ (8064ea8 <TimH_MainFunction+0xac>)
 8064e32:	681b      	ldr	r3, [r3, #0]
 8064e34:	2200      	movs	r2, #0
 8064e36:	635a      	str	r2, [r3, #52]	@ 0x34
		htim3.Instance->CCR1 = 0;
 8064e38:	4b1c      	ldr	r3, [pc, #112]	@ (8064eac <TimH_MainFunction+0xb0>)
 8064e3a:	681b      	ldr	r3, [r3, #0]
 8064e3c:	2200      	movs	r2, #0
 8064e3e:	635a      	str	r2, [r3, #52]	@ 0x34
		htim3.Instance->CCR2 = 0;
 8064e40:	4b1a      	ldr	r3, [pc, #104]	@ (8064eac <TimH_MainFunction+0xb0>)
 8064e42:	681b      	ldr	r3, [r3, #0]
 8064e44:	2200      	movs	r2, #0
 8064e46:	639a      	str	r2, [r3, #56]	@ 0x38
		htim3.Instance->CCR3 = 0;
 8064e48:	4b18      	ldr	r3, [pc, #96]	@ (8064eac <TimH_MainFunction+0xb0>)
 8064e4a:	681b      	ldr	r3, [r3, #0]
 8064e4c:	2200      	movs	r2, #0
 8064e4e:	63da      	str	r2, [r3, #60]	@ 0x3c
		htim3.Instance->CCR4 = 0;
 8064e50:	4b16      	ldr	r3, [pc, #88]	@ (8064eac <TimH_MainFunction+0xb0>)
 8064e52:	681b      	ldr	r3, [r3, #0]
 8064e54:	2200      	movs	r2, #0
 8064e56:	641a      	str	r2, [r3, #64]	@ 0x40
	else
	{
		/* Do nothing. */
	}
	/* Error checking. */
	if(HAL_TIM_Base_GetState(&htim2) == HAL_TIM_STATE_ERROR) Tim_ErrorStatus[0]++;
 8064e58:	4813      	ldr	r0, [pc, #76]	@ (8064ea8 <TimH_MainFunction+0xac>)
 8064e5a:	f007 f92d 	bl	806c0b8 <HAL_TIM_Base_GetState>
 8064e5e:	4603      	mov	r3, r0
 8064e60:	2b04      	cmp	r3, #4
 8064e62:	d105      	bne.n	8064e70 <TimH_MainFunction+0x74>
 8064e64:	4b12      	ldr	r3, [pc, #72]	@ (8064eb0 <TimH_MainFunction+0xb4>)
 8064e66:	681b      	ldr	r3, [r3, #0]
 8064e68:	3301      	adds	r3, #1
 8064e6a:	4a11      	ldr	r2, [pc, #68]	@ (8064eb0 <TimH_MainFunction+0xb4>)
 8064e6c:	6013      	str	r3, [r2, #0]
 8064e6e:	e002      	b.n	8064e76 <TimH_MainFunction+0x7a>
	else Tim_ErrorStatus[0] = 0;
 8064e70:	4b0f      	ldr	r3, [pc, #60]	@ (8064eb0 <TimH_MainFunction+0xb4>)
 8064e72:	2200      	movs	r2, #0
 8064e74:	601a      	str	r2, [r3, #0]
	/* Error checking. */
	if(HAL_TIM_Base_GetState(&htim3) == HAL_TIM_STATE_ERROR) Tim_ErrorStatus[1]++;
 8064e76:	480d      	ldr	r0, [pc, #52]	@ (8064eac <TimH_MainFunction+0xb0>)
 8064e78:	f007 f91e 	bl	806c0b8 <HAL_TIM_Base_GetState>
 8064e7c:	4603      	mov	r3, r0
 8064e7e:	2b04      	cmp	r3, #4
 8064e80:	d105      	bne.n	8064e8e <TimH_MainFunction+0x92>
 8064e82:	4b0b      	ldr	r3, [pc, #44]	@ (8064eb0 <TimH_MainFunction+0xb4>)
 8064e84:	685b      	ldr	r3, [r3, #4]
 8064e86:	3301      	adds	r3, #1
 8064e88:	4a09      	ldr	r2, [pc, #36]	@ (8064eb0 <TimH_MainFunction+0xb4>)
 8064e8a:	6053      	str	r3, [r2, #4]
 8064e8c:	e002      	b.n	8064e94 <TimH_MainFunction+0x98>
	else Tim_ErrorStatus[1] = 0;
 8064e8e:	4b08      	ldr	r3, [pc, #32]	@ (8064eb0 <TimH_MainFunction+0xb4>)
 8064e90:	2200      	movs	r2, #0
 8064e92:	605a      	str	r2, [r3, #4]
	/* Increment the counter. */
	TimH_MainCounter++;
 8064e94:	4b03      	ldr	r3, [pc, #12]	@ (8064ea4 <TimH_MainFunction+0xa8>)
 8064e96:	681b      	ldr	r3, [r3, #0]
 8064e98:	3301      	adds	r3, #1
 8064e9a:	4a02      	ldr	r2, [pc, #8]	@ (8064ea4 <TimH_MainFunction+0xa8>)
 8064e9c:	6013      	str	r3, [r2, #0]
}
 8064e9e:	bf00      	nop
 8064ea0:	bd80      	pop	{r7, pc}
 8064ea2:	bf00      	nop
 8064ea4:	20010624 	.word	0x20010624
 8064ea8:	20010b70 	.word	0x20010b70
 8064eac:	20010c24 	.word	0x20010c24
 8064eb0:	2001061c 	.word	0x2001061c

08064eb4 <NvM_ReadAll>:
void NvM_WriteAll(void);
void NvM_MainFunction(void);
/* FUNCTIONS END */
/* FUNCTIONS START */
void NvM_ReadAll(void)
{
 8064eb4:	b580      	push	{r7, lr}
 8064eb6:	b082      	sub	sp, #8
 8064eb8:	af00      	add	r7, sp, #0
	NvM_FlashReadData(NVMBLOCK_DTC_START_ADDR, (uint32*)NvMBlock_DemDTCArray, ((NVMBLOCK_DTC_SIZE * 28) / 4));
 8064eba:	225b      	movs	r2, #91	@ 0x5b
 8064ebc:	4985      	ldr	r1, [pc, #532]	@ (80650d4 <NvM_ReadAll+0x220>)
 8064ebe:	4886      	ldr	r0, [pc, #536]	@ (80650d8 <NvM_ReadAll+0x224>)
 8064ec0:	f000 faa0 	bl	8065404 <NvM_FlashReadData>
	NvM_FlashReadData(NVMBLOCK_CALIBRATION_START_ADDR, NvMBlock_Calibration, NVMBLOCK_CALIBRATION_SIZE);
 8064ec4:	2211      	movs	r2, #17
 8064ec6:	4985      	ldr	r1, [pc, #532]	@ (80650dc <NvM_ReadAll+0x228>)
 8064ec8:	4885      	ldr	r0, [pc, #532]	@ (80650e0 <NvM_ReadAll+0x22c>)
 8064eca:	f000 fa9b 	bl	8065404 <NvM_FlashReadData>
	NvM_FlashReadData(NVMBLOCK_CODING_START_ADDR, NvMBlock_Coding, NVMBLOCK_CODING_SIZE);
 8064ece:	220a      	movs	r2, #10
 8064ed0:	4984      	ldr	r1, [pc, #528]	@ (80650e4 <NvM_ReadAll+0x230>)
 8064ed2:	4885      	ldr	r0, [pc, #532]	@ (80650e8 <NvM_ReadAll+0x234>)
 8064ed4:	f000 fa96 	bl	8065404 <NvM_FlashReadData>

	if(0xFFFFFFFF == NvMBlock_DemDTCArray[0].counter) memset(NvMBlock_DemDTCArray, 0, sizeof(Dem_DTC_t) * NVMBLOCK_DTC_SIZE);
 8064ed8:	4b7e      	ldr	r3, [pc, #504]	@ (80650d4 <NvM_ReadAll+0x220>)
 8064eda:	681b      	ldr	r3, [r3, #0]
 8064edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8064ee0:	d106      	bne.n	8064ef0 <NvM_ReadAll+0x3c>
 8064ee2:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8064ee6:	2100      	movs	r1, #0
 8064ee8:	487a      	ldr	r0, [pc, #488]	@ (80650d4 <NvM_ReadAll+0x220>)
 8064eea:	f00c f9a1 	bl	8071230 <memset>
 8064eee:	e008      	b.n	8064f02 <NvM_ReadAll+0x4e>
	else memcpy(Dem_DTCStoreArray, NvMBlock_DemDTCArray, sizeof(Dem_DTC_t) * NVMBLOCK_DTC_SIZE);
 8064ef0:	4a7e      	ldr	r2, [pc, #504]	@ (80650ec <NvM_ReadAll+0x238>)
 8064ef2:	4b78      	ldr	r3, [pc, #480]	@ (80650d4 <NvM_ReadAll+0x220>)
 8064ef4:	4610      	mov	r0, r2
 8064ef6:	4619      	mov	r1, r3
 8064ef8:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 8064efc:	461a      	mov	r2, r3
 8064efe:	f00c fa1f 	bl	8071340 <memcpy>

	if(NvMBlock_Calibration[0] == 0xFFFFFFFF)
 8064f02:	4b76      	ldr	r3, [pc, #472]	@ (80650dc <NvM_ReadAll+0x228>)
 8064f04:	681b      	ldr	r3, [r3, #0]
 8064f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8064f0a:	d174      	bne.n	8064ff6 <NvM_ReadAll+0x142>
	{
		Param_Input_Calibration[0] = NvMBlockDefault_Calibration[0];
 8064f0c:	4b78      	ldr	r3, [pc, #480]	@ (80650f0 <NvM_ReadAll+0x23c>)
 8064f0e:	681b      	ldr	r3, [r3, #0]
 8064f10:	b29a      	uxth	r2, r3
 8064f12:	4b78      	ldr	r3, [pc, #480]	@ (80650f4 <NvM_ReadAll+0x240>)
 8064f14:	801a      	strh	r2, [r3, #0]
		Param_Input_Calibration[1] = NvMBlockDefault_Calibration[1];
 8064f16:	4b76      	ldr	r3, [pc, #472]	@ (80650f0 <NvM_ReadAll+0x23c>)
 8064f18:	685b      	ldr	r3, [r3, #4]
 8064f1a:	b29a      	uxth	r2, r3
 8064f1c:	4b75      	ldr	r3, [pc, #468]	@ (80650f4 <NvM_ReadAll+0x240>)
 8064f1e:	805a      	strh	r2, [r3, #2]
		Param_Input_Calibration[2] = NvMBlockDefault_Calibration[2];
 8064f20:	4b73      	ldr	r3, [pc, #460]	@ (80650f0 <NvM_ReadAll+0x23c>)
 8064f22:	689b      	ldr	r3, [r3, #8]
 8064f24:	b29a      	uxth	r2, r3
 8064f26:	4b73      	ldr	r3, [pc, #460]	@ (80650f4 <NvM_ReadAll+0x240>)
 8064f28:	809a      	strh	r2, [r3, #4]
		Param_Input_Calibration[3] = NvMBlockDefault_Calibration[3];
 8064f2a:	4b71      	ldr	r3, [pc, #452]	@ (80650f0 <NvM_ReadAll+0x23c>)
 8064f2c:	68db      	ldr	r3, [r3, #12]
 8064f2e:	b29a      	uxth	r2, r3
 8064f30:	4b70      	ldr	r3, [pc, #448]	@ (80650f4 <NvM_ReadAll+0x240>)
 8064f32:	80da      	strh	r2, [r3, #6]
		Param_Input_Calibration[4] = NvMBlockDefault_Calibration[4];
 8064f34:	4b6e      	ldr	r3, [pc, #440]	@ (80650f0 <NvM_ReadAll+0x23c>)
 8064f36:	691b      	ldr	r3, [r3, #16]
 8064f38:	b29a      	uxth	r2, r3
 8064f3a:	4b6e      	ldr	r3, [pc, #440]	@ (80650f4 <NvM_ReadAll+0x240>)
 8064f3c:	811a      	strh	r2, [r3, #8]
		Param_Input_Calibration[5] = NvMBlockDefault_Calibration[5];
 8064f3e:	4b6c      	ldr	r3, [pc, #432]	@ (80650f0 <NvM_ReadAll+0x23c>)
 8064f40:	695b      	ldr	r3, [r3, #20]
 8064f42:	b29a      	uxth	r2, r3
 8064f44:	4b6b      	ldr	r3, [pc, #428]	@ (80650f4 <NvM_ReadAll+0x240>)
 8064f46:	815a      	strh	r2, [r3, #10]
		Param_Input_Calibration[6] = NvMBlockDefault_Calibration[6];
 8064f48:	4b69      	ldr	r3, [pc, #420]	@ (80650f0 <NvM_ReadAll+0x23c>)
 8064f4a:	699b      	ldr	r3, [r3, #24]
 8064f4c:	b29a      	uxth	r2, r3
 8064f4e:	4b69      	ldr	r3, [pc, #420]	@ (80650f4 <NvM_ReadAll+0x240>)
 8064f50:	819a      	strh	r2, [r3, #12]
		Param_Input_Calibration[7] = NvMBlockDefault_Calibration[7];
 8064f52:	4b67      	ldr	r3, [pc, #412]	@ (80650f0 <NvM_ReadAll+0x23c>)
 8064f54:	69db      	ldr	r3, [r3, #28]
 8064f56:	b29a      	uxth	r2, r3
 8064f58:	4b66      	ldr	r3, [pc, #408]	@ (80650f4 <NvM_ReadAll+0x240>)
 8064f5a:	81da      	strh	r2, [r3, #14]
		Param_Input_Calibration[8] = NvMBlockDefault_Calibration[8];
 8064f5c:	4b64      	ldr	r3, [pc, #400]	@ (80650f0 <NvM_ReadAll+0x23c>)
 8064f5e:	6a1b      	ldr	r3, [r3, #32]
 8064f60:	b29a      	uxth	r2, r3
 8064f62:	4b64      	ldr	r3, [pc, #400]	@ (80650f4 <NvM_ReadAll+0x240>)
 8064f64:	821a      	strh	r2, [r3, #16]
		Param_Input_Calibration[9] = NvMBlockDefault_Calibration[9];
 8064f66:	4b62      	ldr	r3, [pc, #392]	@ (80650f0 <NvM_ReadAll+0x23c>)
 8064f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8064f6a:	b29a      	uxth	r2, r3
 8064f6c:	4b61      	ldr	r3, [pc, #388]	@ (80650f4 <NvM_ReadAll+0x240>)
 8064f6e:	825a      	strh	r2, [r3, #18]
		Param_DebouncePreviouState_Calibration = NvMBlockDefault_Calibration[10];
 8064f70:	4b5f      	ldr	r3, [pc, #380]	@ (80650f0 <NvM_ReadAll+0x23c>)
 8064f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8064f74:	b29a      	uxth	r2, r3
 8064f76:	4b60      	ldr	r3, [pc, #384]	@ (80650f8 <NvM_ReadAll+0x244>)
 8064f78:	801a      	strh	r2, [r3, #0]
		Param_OutofboundThreshold_Calibration = NvMBlockDefault_Calibration[11] * 3000 / 255;
 8064f7a:	4b5d      	ldr	r3, [pc, #372]	@ (80650f0 <NvM_ReadAll+0x23c>)
 8064f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8064f7e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8064f82:	fb02 f303 	mul.w	r3, r2, r3
 8064f86:	4a5d      	ldr	r2, [pc, #372]	@ (80650fc <NvM_ReadAll+0x248>)
 8064f88:	fba2 2303 	umull	r2, r3, r2, r3
 8064f8c:	09db      	lsrs	r3, r3, #7
 8064f8e:	b29a      	uxth	r2, r3
 8064f90:	4b5b      	ldr	r3, [pc, #364]	@ (8065100 <NvM_ReadAll+0x24c>)
 8064f92:	801a      	strh	r2, [r3, #0]
		Param_ErrorSettingDebouceThreshold_Calibration = NvMBlockDefault_Calibration[12];
 8064f94:	4b56      	ldr	r3, [pc, #344]	@ (80650f0 <NvM_ReadAll+0x23c>)
 8064f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8064f98:	b2da      	uxtb	r2, r3
 8064f9a:	4b5a      	ldr	r3, [pc, #360]	@ (8065104 <NvM_ReadAll+0x250>)
 8064f9c:	701a      	strb	r2, [r3, #0]
		Param_UndervoltageThreshold_Calibration = NvMBlockDefault_Calibration[13];
 8064f9e:	4b54      	ldr	r3, [pc, #336]	@ (80650f0 <NvM_ReadAll+0x23c>)
 8064fa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8064fa2:	b2da      	uxtb	r2, r3
 8064fa4:	4b58      	ldr	r3, [pc, #352]	@ (8065108 <NvM_ReadAll+0x254>)
 8064fa6:	701a      	strb	r2, [r3, #0]
		Param_WindshieldWiperFast_Calibration = NvMBlockDefault_Calibration[14];
 8064fa8:	4b51      	ldr	r3, [pc, #324]	@ (80650f0 <NvM_ReadAll+0x23c>)
 8064faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8064fac:	b2da      	uxtb	r2, r3
 8064fae:	4b57      	ldr	r3, [pc, #348]	@ (806510c <NvM_ReadAll+0x258>)
 8064fb0:	701a      	strb	r2, [r3, #0]
		Param_WindshieldWiperSlow_Calibration = NvMBlockDefault_Calibration[15];
 8064fb2:	4b4f      	ldr	r3, [pc, #316]	@ (80650f0 <NvM_ReadAll+0x23c>)
 8064fb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8064fb6:	b2da      	uxtb	r2, r3
 8064fb8:	4b55      	ldr	r3, [pc, #340]	@ (8065110 <NvM_ReadAll+0x25c>)
 8064fba:	701a      	strb	r2, [r3, #0]
		Param_DoorLockPwmIncrement = NvMBlockDefault_Calibration[16];
 8064fbc:	4b4c      	ldr	r3, [pc, #304]	@ (80650f0 <NvM_ReadAll+0x23c>)
 8064fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8064fc0:	b2da      	uxtb	r2, r3
 8064fc2:	4b54      	ldr	r3, [pc, #336]	@ (8065114 <NvM_ReadAll+0x260>)
 8064fc4:	701a      	strb	r2, [r3, #0]
		for(uint8 i = 0; i < NVMBLOCK_CALIBRATION_SIZE; i++) Dcm_DiagnosticCalibrationData[i] = NvMBlockDefault_Calibration[i];
 8064fc6:	2300      	movs	r3, #0
 8064fc8:	71fb      	strb	r3, [r7, #7]
 8064fca:	e00a      	b.n	8064fe2 <NvM_ReadAll+0x12e>
 8064fcc:	79fa      	ldrb	r2, [r7, #7]
 8064fce:	79fb      	ldrb	r3, [r7, #7]
 8064fd0:	4947      	ldr	r1, [pc, #284]	@ (80650f0 <NvM_ReadAll+0x23c>)
 8064fd2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8064fd6:	4950      	ldr	r1, [pc, #320]	@ (8065118 <NvM_ReadAll+0x264>)
 8064fd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8064fdc:	79fb      	ldrb	r3, [r7, #7]
 8064fde:	3301      	adds	r3, #1
 8064fe0:	71fb      	strb	r3, [r7, #7]
 8064fe2:	79fb      	ldrb	r3, [r7, #7]
 8064fe4:	2b10      	cmp	r3, #16
 8064fe6:	d9f1      	bls.n	8064fcc <NvM_ReadAll+0x118>
		NvM_FlashWriteData(NVMBLOCK_CALIBRATION_START_ADDR, NvMBlockDefault_Calibration, NVMBLOCK_CALIBRATION_SIZE, NVMBLOCK_CALIBRATION_SECTOR);
 8064fe8:	2302      	movs	r3, #2
 8064fea:	2211      	movs	r2, #17
 8064fec:	4940      	ldr	r1, [pc, #256]	@ (80650f0 <NvM_ReadAll+0x23c>)
 8064fee:	483c      	ldr	r0, [pc, #240]	@ (80650e0 <NvM_ReadAll+0x22c>)
 8064ff0:	f000 f9b2 	bl	8065358 <NvM_FlashWriteData>
 8064ff4:	e065      	b.n	80650c2 <NvM_ReadAll+0x20e>
	}
	else
	{
		Param_Input_Calibration[0] = NvMBlock_Calibration[0];
 8064ff6:	4b39      	ldr	r3, [pc, #228]	@ (80650dc <NvM_ReadAll+0x228>)
 8064ff8:	681b      	ldr	r3, [r3, #0]
 8064ffa:	b29a      	uxth	r2, r3
 8064ffc:	4b3d      	ldr	r3, [pc, #244]	@ (80650f4 <NvM_ReadAll+0x240>)
 8064ffe:	801a      	strh	r2, [r3, #0]
		Param_Input_Calibration[1] = NvMBlock_Calibration[1];
 8065000:	4b36      	ldr	r3, [pc, #216]	@ (80650dc <NvM_ReadAll+0x228>)
 8065002:	685b      	ldr	r3, [r3, #4]
 8065004:	b29a      	uxth	r2, r3
 8065006:	4b3b      	ldr	r3, [pc, #236]	@ (80650f4 <NvM_ReadAll+0x240>)
 8065008:	805a      	strh	r2, [r3, #2]
		Param_Input_Calibration[2] = NvMBlock_Calibration[2];
 806500a:	4b34      	ldr	r3, [pc, #208]	@ (80650dc <NvM_ReadAll+0x228>)
 806500c:	689b      	ldr	r3, [r3, #8]
 806500e:	b29a      	uxth	r2, r3
 8065010:	4b38      	ldr	r3, [pc, #224]	@ (80650f4 <NvM_ReadAll+0x240>)
 8065012:	809a      	strh	r2, [r3, #4]
		Param_Input_Calibration[3] = NvMBlock_Calibration[3];
 8065014:	4b31      	ldr	r3, [pc, #196]	@ (80650dc <NvM_ReadAll+0x228>)
 8065016:	68db      	ldr	r3, [r3, #12]
 8065018:	b29a      	uxth	r2, r3
 806501a:	4b36      	ldr	r3, [pc, #216]	@ (80650f4 <NvM_ReadAll+0x240>)
 806501c:	80da      	strh	r2, [r3, #6]
		Param_Input_Calibration[4] = NvMBlock_Calibration[4];
 806501e:	4b2f      	ldr	r3, [pc, #188]	@ (80650dc <NvM_ReadAll+0x228>)
 8065020:	691b      	ldr	r3, [r3, #16]
 8065022:	b29a      	uxth	r2, r3
 8065024:	4b33      	ldr	r3, [pc, #204]	@ (80650f4 <NvM_ReadAll+0x240>)
 8065026:	811a      	strh	r2, [r3, #8]
		Param_Input_Calibration[5] = NvMBlock_Calibration[5];
 8065028:	4b2c      	ldr	r3, [pc, #176]	@ (80650dc <NvM_ReadAll+0x228>)
 806502a:	695b      	ldr	r3, [r3, #20]
 806502c:	b29a      	uxth	r2, r3
 806502e:	4b31      	ldr	r3, [pc, #196]	@ (80650f4 <NvM_ReadAll+0x240>)
 8065030:	815a      	strh	r2, [r3, #10]
		Param_Input_Calibration[6] = NvMBlock_Calibration[6];
 8065032:	4b2a      	ldr	r3, [pc, #168]	@ (80650dc <NvM_ReadAll+0x228>)
 8065034:	699b      	ldr	r3, [r3, #24]
 8065036:	b29a      	uxth	r2, r3
 8065038:	4b2e      	ldr	r3, [pc, #184]	@ (80650f4 <NvM_ReadAll+0x240>)
 806503a:	819a      	strh	r2, [r3, #12]
		Param_Input_Calibration[7] = NvMBlock_Calibration[7];
 806503c:	4b27      	ldr	r3, [pc, #156]	@ (80650dc <NvM_ReadAll+0x228>)
 806503e:	69db      	ldr	r3, [r3, #28]
 8065040:	b29a      	uxth	r2, r3
 8065042:	4b2c      	ldr	r3, [pc, #176]	@ (80650f4 <NvM_ReadAll+0x240>)
 8065044:	81da      	strh	r2, [r3, #14]
		Param_Input_Calibration[8] = NvMBlock_Calibration[8];
 8065046:	4b25      	ldr	r3, [pc, #148]	@ (80650dc <NvM_ReadAll+0x228>)
 8065048:	6a1b      	ldr	r3, [r3, #32]
 806504a:	b29a      	uxth	r2, r3
 806504c:	4b29      	ldr	r3, [pc, #164]	@ (80650f4 <NvM_ReadAll+0x240>)
 806504e:	821a      	strh	r2, [r3, #16]
		Param_Input_Calibration[9] = NvMBlock_Calibration[9];
 8065050:	4b22      	ldr	r3, [pc, #136]	@ (80650dc <NvM_ReadAll+0x228>)
 8065052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8065054:	b29a      	uxth	r2, r3
 8065056:	4b27      	ldr	r3, [pc, #156]	@ (80650f4 <NvM_ReadAll+0x240>)
 8065058:	825a      	strh	r2, [r3, #18]
		Param_DebouncePreviouState_Calibration = NvMBlock_Calibration[10];
 806505a:	4b20      	ldr	r3, [pc, #128]	@ (80650dc <NvM_ReadAll+0x228>)
 806505c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 806505e:	b29a      	uxth	r2, r3
 8065060:	4b25      	ldr	r3, [pc, #148]	@ (80650f8 <NvM_ReadAll+0x244>)
 8065062:	801a      	strh	r2, [r3, #0]
		Param_OutofboundThreshold_Calibration = NvMBlock_Calibration[11];
 8065064:	4b1d      	ldr	r3, [pc, #116]	@ (80650dc <NvM_ReadAll+0x228>)
 8065066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8065068:	b29a      	uxth	r2, r3
 806506a:	4b25      	ldr	r3, [pc, #148]	@ (8065100 <NvM_ReadAll+0x24c>)
 806506c:	801a      	strh	r2, [r3, #0]
		Param_ErrorSettingDebouceThreshold_Calibration = NvMBlock_Calibration[12];
 806506e:	4b1b      	ldr	r3, [pc, #108]	@ (80650dc <NvM_ReadAll+0x228>)
 8065070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8065072:	b2da      	uxtb	r2, r3
 8065074:	4b23      	ldr	r3, [pc, #140]	@ (8065104 <NvM_ReadAll+0x250>)
 8065076:	701a      	strb	r2, [r3, #0]
		Param_UndervoltageThreshold_Calibration = NvMBlock_Calibration[13];
 8065078:	4b18      	ldr	r3, [pc, #96]	@ (80650dc <NvM_ReadAll+0x228>)
 806507a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 806507c:	b2da      	uxtb	r2, r3
 806507e:	4b22      	ldr	r3, [pc, #136]	@ (8065108 <NvM_ReadAll+0x254>)
 8065080:	701a      	strb	r2, [r3, #0]
		Param_WindshieldWiperSlow_Calibration = NvMBlock_Calibration[14];
 8065082:	4b16      	ldr	r3, [pc, #88]	@ (80650dc <NvM_ReadAll+0x228>)
 8065084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8065086:	b2da      	uxtb	r2, r3
 8065088:	4b21      	ldr	r3, [pc, #132]	@ (8065110 <NvM_ReadAll+0x25c>)
 806508a:	701a      	strb	r2, [r3, #0]
		Param_WindshieldWiperFast_Calibration = NvMBlock_Calibration[15];
 806508c:	4b13      	ldr	r3, [pc, #76]	@ (80650dc <NvM_ReadAll+0x228>)
 806508e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8065090:	b2da      	uxtb	r2, r3
 8065092:	4b1e      	ldr	r3, [pc, #120]	@ (806510c <NvM_ReadAll+0x258>)
 8065094:	701a      	strb	r2, [r3, #0]
		Param_DoorLockPwmIncrement = NvMBlock_Calibration[16];
 8065096:	4b11      	ldr	r3, [pc, #68]	@ (80650dc <NvM_ReadAll+0x228>)
 8065098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 806509a:	b2da      	uxtb	r2, r3
 806509c:	4b1d      	ldr	r3, [pc, #116]	@ (8065114 <NvM_ReadAll+0x260>)
 806509e:	701a      	strb	r2, [r3, #0]
		for(uint8 i = 0; i < NVMBLOCK_CALIBRATION_SIZE; i++) Dcm_DiagnosticCalibrationData[i] = NvMBlock_Calibration[i];
 80650a0:	2300      	movs	r3, #0
 80650a2:	71bb      	strb	r3, [r7, #6]
 80650a4:	e00a      	b.n	80650bc <NvM_ReadAll+0x208>
 80650a6:	79ba      	ldrb	r2, [r7, #6]
 80650a8:	79bb      	ldrb	r3, [r7, #6]
 80650aa:	490c      	ldr	r1, [pc, #48]	@ (80650dc <NvM_ReadAll+0x228>)
 80650ac:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80650b0:	4919      	ldr	r1, [pc, #100]	@ (8065118 <NvM_ReadAll+0x264>)
 80650b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80650b6:	79bb      	ldrb	r3, [r7, #6]
 80650b8:	3301      	adds	r3, #1
 80650ba:	71bb      	strb	r3, [r7, #6]
 80650bc:	79bb      	ldrb	r3, [r7, #6]
 80650be:	2b10      	cmp	r3, #16
 80650c0:	d9f1      	bls.n	80650a6 <NvM_ReadAll+0x1f2>
	}
	if(NvMBlock_Coding[0] == 0xFFFFFFFF)
 80650c2:	4b08      	ldr	r3, [pc, #32]	@ (80650e4 <NvM_ReadAll+0x230>)
 80650c4:	681b      	ldr	r3, [r3, #0]
 80650c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80650ca:	d146      	bne.n	806515a <NvM_ReadAll+0x2a6>
	{
		for(uint8 i = 0; i < NVMBLOCK_CODING_SIZE; i++) InputCtrl_CodingData[i] = NvMBlockDefault_Coding[i];
 80650cc:	2300      	movs	r3, #0
 80650ce:	717b      	strb	r3, [r7, #5]
 80650d0:	e02f      	b.n	8065132 <NvM_ReadAll+0x27e>
 80650d2:	bf00      	nop
 80650d4:	20010630 	.word	0x20010630
 80650d8:	08010000 	.word	0x08010000
 80650dc:	2001079c 	.word	0x2001079c
 80650e0:	08008000 	.word	0x08008000
 80650e4:	200107e0 	.word	0x200107e0
 80650e8:	0800c000 	.word	0x0800c000
 80650ec:	20010478 	.word	0x20010478
 80650f0:	200100b4 	.word	0x200100b4
 80650f4:	200101d8 	.word	0x200101d8
 80650f8:	200101d4 	.word	0x200101d4
 80650fc:	80808081 	.word	0x80808081
 8065100:	200101d2 	.word	0x200101d2
 8065104:	200101d1 	.word	0x200101d1
 8065108:	200101d0 	.word	0x200101d0
 806510c:	2001019d 	.word	0x2001019d
 8065110:	2001019c 	.word	0x2001019c
 8065114:	2001019e 	.word	0x2001019e
 8065118:	2001041c 	.word	0x2001041c
 806511c:	797a      	ldrb	r2, [r7, #5]
 806511e:	797b      	ldrb	r3, [r7, #5]
 8065120:	491f      	ldr	r1, [pc, #124]	@ (80651a0 <NvM_ReadAll+0x2ec>)
 8065122:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8065126:	491f      	ldr	r1, [pc, #124]	@ (80651a4 <NvM_ReadAll+0x2f0>)
 8065128:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 806512c:	797b      	ldrb	r3, [r7, #5]
 806512e:	3301      	adds	r3, #1
 8065130:	717b      	strb	r3, [r7, #5]
 8065132:	797b      	ldrb	r3, [r7, #5]
 8065134:	2b09      	cmp	r3, #9
 8065136:	d9f1      	bls.n	806511c <NvM_ReadAll+0x268>
		WindshieldWashing_CodingData = NvMBlockDefault_Coding[8];
 8065138:	4b19      	ldr	r3, [pc, #100]	@ (80651a0 <NvM_ReadAll+0x2ec>)
 806513a:	6a1b      	ldr	r3, [r3, #32]
 806513c:	b2da      	uxtb	r2, r3
 806513e:	4b1a      	ldr	r3, [pc, #104]	@ (80651a8 <NvM_ReadAll+0x2f4>)
 8065140:	701a      	strb	r2, [r3, #0]
		WashingWipingCounter_CodingData = NvMBlockDefault_Coding[9];
 8065142:	4b17      	ldr	r3, [pc, #92]	@ (80651a0 <NvM_ReadAll+0x2ec>)
 8065144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8065146:	b2da      	uxtb	r2, r3
 8065148:	4b18      	ldr	r3, [pc, #96]	@ (80651ac <NvM_ReadAll+0x2f8>)
 806514a:	701a      	strb	r2, [r3, #0]
		NvM_FlashWriteData(NVMBLOCK_CODING_START_ADDR, NvMBlockDefault_Coding, NVMBLOCK_CODING_SIZE, NVMBLOCK_CODING_SECTOR);
 806514c:	2303      	movs	r3, #3
 806514e:	220a      	movs	r2, #10
 8065150:	4913      	ldr	r1, [pc, #76]	@ (80651a0 <NvM_ReadAll+0x2ec>)
 8065152:	4817      	ldr	r0, [pc, #92]	@ (80651b0 <NvM_ReadAll+0x2fc>)
 8065154:	f000 f900 	bl	8065358 <NvM_FlashWriteData>
 8065158:	e01a      	b.n	8065190 <NvM_ReadAll+0x2dc>
	}
	else
	{
		for(uint8 i = 0; i < NVMBLOCK_CODING_SIZE; i++) InputCtrl_CodingData[i] = NvMBlock_Coding[i];
 806515a:	2300      	movs	r3, #0
 806515c:	713b      	strb	r3, [r7, #4]
 806515e:	e00a      	b.n	8065176 <NvM_ReadAll+0x2c2>
 8065160:	793a      	ldrb	r2, [r7, #4]
 8065162:	793b      	ldrb	r3, [r7, #4]
 8065164:	4913      	ldr	r1, [pc, #76]	@ (80651b4 <NvM_ReadAll+0x300>)
 8065166:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 806516a:	490e      	ldr	r1, [pc, #56]	@ (80651a4 <NvM_ReadAll+0x2f0>)
 806516c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8065170:	793b      	ldrb	r3, [r7, #4]
 8065172:	3301      	adds	r3, #1
 8065174:	713b      	strb	r3, [r7, #4]
 8065176:	793b      	ldrb	r3, [r7, #4]
 8065178:	2b09      	cmp	r3, #9
 806517a:	d9f1      	bls.n	8065160 <NvM_ReadAll+0x2ac>
		WindshieldWashing_CodingData = NvMBlock_Coding[8];
 806517c:	4b0d      	ldr	r3, [pc, #52]	@ (80651b4 <NvM_ReadAll+0x300>)
 806517e:	6a1b      	ldr	r3, [r3, #32]
 8065180:	b2da      	uxtb	r2, r3
 8065182:	4b09      	ldr	r3, [pc, #36]	@ (80651a8 <NvM_ReadAll+0x2f4>)
 8065184:	701a      	strb	r2, [r3, #0]
		WashingWipingCounter_CodingData = NvMBlock_Coding[9];
 8065186:	4b0b      	ldr	r3, [pc, #44]	@ (80651b4 <NvM_ReadAll+0x300>)
 8065188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 806518a:	b2da      	uxtb	r2, r3
 806518c:	4b07      	ldr	r3, [pc, #28]	@ (80651ac <NvM_ReadAll+0x2f8>)
 806518e:	701a      	strb	r2, [r3, #0]
	}
	NvM_ReadAll_Flag = 1;
 8065190:	4b09      	ldr	r3, [pc, #36]	@ (80651b8 <NvM_ReadAll+0x304>)
 8065192:	2201      	movs	r2, #1
 8065194:	701a      	strb	r2, [r3, #0]
}
 8065196:	bf00      	nop
 8065198:	3708      	adds	r7, #8
 806519a:	46bd      	mov	sp, r7
 806519c:	bd80      	pop	{r7, pc}
 806519e:	bf00      	nop
 80651a0:	200100f8 	.word	0x200100f8
 80651a4:	200102e4 	.word	0x200102e4
 80651a8:	2001019f 	.word	0x2001019f
 80651ac:	200101a0 	.word	0x200101a0
 80651b0:	0800c000 	.word	0x0800c000
 80651b4:	200107e0 	.word	0x200107e0
 80651b8:	2001062d 	.word	0x2001062d

080651bc <NvM_WriteAll>:
void NvM_WriteAll(void)
{
 80651bc:	b580      	push	{r7, lr}
 80651be:	b082      	sub	sp, #8
 80651c0:	af00      	add	r7, sp, #0
	for(uint8 i = 0; i < NVMBLOCK_CALIBRATION_SIZE; i++)
 80651c2:	2300      	movs	r3, #0
 80651c4:	71fb      	strb	r3, [r7, #7]
 80651c6:	e017      	b.n	80651f8 <NvM_WriteAll+0x3c>
	{
		if(Dcm_DiagnosticCalibrationData[i] != NvMBlock_Calibration[i])
 80651c8:	79fb      	ldrb	r3, [r7, #7]
 80651ca:	4a3b      	ldr	r2, [pc, #236]	@ (80652b8 <NvM_WriteAll+0xfc>)
 80651cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80651d0:	79fb      	ldrb	r3, [r7, #7]
 80651d2:	493a      	ldr	r1, [pc, #232]	@ (80652bc <NvM_WriteAll+0x100>)
 80651d4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80651d8:	429a      	cmp	r2, r3
 80651da:	d00a      	beq.n	80651f2 <NvM_WriteAll+0x36>
		{
			NvM_WriteFlag_Calibration = 1;
 80651dc:	4b38      	ldr	r3, [pc, #224]	@ (80652c0 <NvM_WriteAll+0x104>)
 80651de:	2201      	movs	r2, #1
 80651e0:	701a      	strb	r2, [r3, #0]
			NvMBlock_Calibration[i] = Dcm_DiagnosticCalibrationData[i];
 80651e2:	79fa      	ldrb	r2, [r7, #7]
 80651e4:	79fb      	ldrb	r3, [r7, #7]
 80651e6:	4934      	ldr	r1, [pc, #208]	@ (80652b8 <NvM_WriteAll+0xfc>)
 80651e8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80651ec:	4933      	ldr	r1, [pc, #204]	@ (80652bc <NvM_WriteAll+0x100>)
 80651ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(uint8 i = 0; i < NVMBLOCK_CALIBRATION_SIZE; i++)
 80651f2:	79fb      	ldrb	r3, [r7, #7]
 80651f4:	3301      	adds	r3, #1
 80651f6:	71fb      	strb	r3, [r7, #7]
 80651f8:	79fb      	ldrb	r3, [r7, #7]
 80651fa:	2b10      	cmp	r3, #16
 80651fc:	d9e4      	bls.n	80651c8 <NvM_WriteAll+0xc>
		{
			/* Do nothing. */
		}
	}

	if(NvM_WriteFlag_Calibration == 1)
 80651fe:	4b30      	ldr	r3, [pc, #192]	@ (80652c0 <NvM_WriteAll+0x104>)
 8065200:	781b      	ldrb	r3, [r3, #0]
 8065202:	2b01      	cmp	r3, #1
 8065204:	d108      	bne.n	8065218 <NvM_WriteAll+0x5c>
	{
		NvM_WriteFlag_Calibration = 0;
 8065206:	4b2e      	ldr	r3, [pc, #184]	@ (80652c0 <NvM_WriteAll+0x104>)
 8065208:	2200      	movs	r2, #0
 806520a:	701a      	strb	r2, [r3, #0]
		NvM_FlashWriteData(NVMBLOCK_CALIBRATION_START_ADDR, NvMBlock_Calibration, NVMBLOCK_CALIBRATION_SIZE, NVMBLOCK_CALIBRATION_SECTOR);
 806520c:	2302      	movs	r3, #2
 806520e:	2211      	movs	r2, #17
 8065210:	492a      	ldr	r1, [pc, #168]	@ (80652bc <NvM_WriteAll+0x100>)
 8065212:	482c      	ldr	r0, [pc, #176]	@ (80652c4 <NvM_WriteAll+0x108>)
 8065214:	f000 f8a0 	bl	8065358 <NvM_FlashWriteData>
	}
	else
	{
		/* Do nothing. */
	}
	for(uint8 i = 0; i < NVMBLOCK_DTC_SIZE; i++)
 8065218:	2300      	movs	r3, #0
 806521a:	71bb      	strb	r3, [r7, #6]
 806521c:	e034      	b.n	8065288 <NvM_WriteAll+0xcc>
	{
		if(NvMBlock_DemDTCArray[i].counter != Dem_DTCStoreArray[i].counter)
 806521e:	79ba      	ldrb	r2, [r7, #6]
 8065220:	4929      	ldr	r1, [pc, #164]	@ (80652c8 <NvM_WriteAll+0x10c>)
 8065222:	4613      	mov	r3, r2
 8065224:	00db      	lsls	r3, r3, #3
 8065226:	1a9b      	subs	r3, r3, r2
 8065228:	009b      	lsls	r3, r3, #2
 806522a:	440b      	add	r3, r1
 806522c:	6819      	ldr	r1, [r3, #0]
 806522e:	79ba      	ldrb	r2, [r7, #6]
 8065230:	4826      	ldr	r0, [pc, #152]	@ (80652cc <NvM_WriteAll+0x110>)
 8065232:	4613      	mov	r3, r2
 8065234:	00db      	lsls	r3, r3, #3
 8065236:	1a9b      	subs	r3, r3, r2
 8065238:	009b      	lsls	r3, r3, #2
 806523a:	4403      	add	r3, r0
 806523c:	681b      	ldr	r3, [r3, #0]
 806523e:	4299      	cmp	r1, r3
 8065240:	d01f      	beq.n	8065282 <NvM_WriteAll+0xc6>
		{
			NvM_WriteFlag_Dtc = 1;
 8065242:	4b23      	ldr	r3, [pc, #140]	@ (80652d0 <NvM_WriteAll+0x114>)
 8065244:	2201      	movs	r2, #1
 8065246:	701a      	strb	r2, [r3, #0]
			NvMBlock_DemDTCArray[i].isActiveNow = 0;
 8065248:	79ba      	ldrb	r2, [r7, #6]
 806524a:	491f      	ldr	r1, [pc, #124]	@ (80652c8 <NvM_WriteAll+0x10c>)
 806524c:	4613      	mov	r3, r2
 806524e:	00db      	lsls	r3, r3, #3
 8065250:	1a9b      	subs	r3, r3, r2
 8065252:	009b      	lsls	r3, r3, #2
 8065254:	440b      	add	r3, r1
 8065256:	3304      	adds	r3, #4
 8065258:	2200      	movs	r2, #0
 806525a:	601a      	str	r2, [r3, #0]
			Dem_DTCStoreArray[i].isActiveNow = 0;
 806525c:	79ba      	ldrb	r2, [r7, #6]
 806525e:	491b      	ldr	r1, [pc, #108]	@ (80652cc <NvM_WriteAll+0x110>)
 8065260:	4613      	mov	r3, r2
 8065262:	00db      	lsls	r3, r3, #3
 8065264:	1a9b      	subs	r3, r3, r2
 8065266:	009b      	lsls	r3, r3, #2
 8065268:	440b      	add	r3, r1
 806526a:	3304      	adds	r3, #4
 806526c:	2200      	movs	r2, #0
 806526e:	601a      	str	r2, [r3, #0]
			memcpy(NvMBlock_DemDTCArray, Dem_DTCStoreArray, sizeof(Dem_DTC_t) * NVMBLOCK_DTC_SIZE);
 8065270:	4a15      	ldr	r2, [pc, #84]	@ (80652c8 <NvM_WriteAll+0x10c>)
 8065272:	4b16      	ldr	r3, [pc, #88]	@ (80652cc <NvM_WriteAll+0x110>)
 8065274:	4610      	mov	r0, r2
 8065276:	4619      	mov	r1, r3
 8065278:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 806527c:	461a      	mov	r2, r3
 806527e:	f00c f85f 	bl	8071340 <memcpy>
	for(uint8 i = 0; i < NVMBLOCK_DTC_SIZE; i++)
 8065282:	79bb      	ldrb	r3, [r7, #6]
 8065284:	3301      	adds	r3, #1
 8065286:	71bb      	strb	r3, [r7, #6]
 8065288:	79bb      	ldrb	r3, [r7, #6]
 806528a:	2b0c      	cmp	r3, #12
 806528c:	d9c7      	bls.n	806521e <NvM_WriteAll+0x62>
		else
		{
			/* Do nothing. */
		}
	}
	if(NvM_WriteFlag_Dtc == 1)
 806528e:	4b10      	ldr	r3, [pc, #64]	@ (80652d0 <NvM_WriteAll+0x114>)
 8065290:	781b      	ldrb	r3, [r3, #0]
 8065292:	2b01      	cmp	r3, #1
 8065294:	d108      	bne.n	80652a8 <NvM_WriteAll+0xec>
	{
		NvM_WriteFlag_Dtc = 0;
 8065296:	4b0e      	ldr	r3, [pc, #56]	@ (80652d0 <NvM_WriteAll+0x114>)
 8065298:	2200      	movs	r2, #0
 806529a:	701a      	strb	r2, [r3, #0]
		NvM_FlashWriteData(NVMBLOCK_DTC_START_ADDR, (uint32*)NvMBlock_DemDTCArray, ((NVMBLOCK_DTC_SIZE * 28) / 4), NVMBLOCK_DTC_SECTOR);
 806529c:	2304      	movs	r3, #4
 806529e:	225b      	movs	r2, #91	@ 0x5b
 80652a0:	4909      	ldr	r1, [pc, #36]	@ (80652c8 <NvM_WriteAll+0x10c>)
 80652a2:	480c      	ldr	r0, [pc, #48]	@ (80652d4 <NvM_WriteAll+0x118>)
 80652a4:	f000 f858 	bl	8065358 <NvM_FlashWriteData>
	}
	else
	{
		/* Do nothing. */
	}
	NvM_WriteAll_Flag = 1;
 80652a8:	4b0b      	ldr	r3, [pc, #44]	@ (80652d8 <NvM_WriteAll+0x11c>)
 80652aa:	2201      	movs	r2, #1
 80652ac:	701a      	strb	r2, [r3, #0]
}
 80652ae:	bf00      	nop
 80652b0:	3708      	adds	r7, #8
 80652b2:	46bd      	mov	sp, r7
 80652b4:	bd80      	pop	{r7, pc}
 80652b6:	bf00      	nop
 80652b8:	2001041c 	.word	0x2001041c
 80652bc:	2001079c 	.word	0x2001079c
 80652c0:	20010809 	.word	0x20010809
 80652c4:	08008000 	.word	0x08008000
 80652c8:	20010630 	.word	0x20010630
 80652cc:	20010478 	.word	0x20010478
 80652d0:	20010808 	.word	0x20010808
 80652d4:	08010000 	.word	0x08010000
 80652d8:	2001062e 	.word	0x2001062e

080652dc <NvM_MainFunction>:
void NvM_MainFunction(void)
{
 80652dc:	b580      	push	{r7, lr}
 80652de:	af00      	add	r7, sp, #0
	if(EcuM_State == POSTRUN && NvM_WriteAll_Flag == 0) NvMState = WRITEALL;
 80652e0:	4b19      	ldr	r3, [pc, #100]	@ (8065348 <NvM_MainFunction+0x6c>)
 80652e2:	781b      	ldrb	r3, [r3, #0]
 80652e4:	2b03      	cmp	r3, #3
 80652e6:	d107      	bne.n	80652f8 <NvM_MainFunction+0x1c>
 80652e8:	4b18      	ldr	r3, [pc, #96]	@ (806534c <NvM_MainFunction+0x70>)
 80652ea:	781b      	ldrb	r3, [r3, #0]
 80652ec:	2b00      	cmp	r3, #0
 80652ee:	d103      	bne.n	80652f8 <NvM_MainFunction+0x1c>
 80652f0:	4b17      	ldr	r3, [pc, #92]	@ (8065350 <NvM_MainFunction+0x74>)
 80652f2:	2201      	movs	r2, #1
 80652f4:	701a      	strb	r2, [r3, #0]
 80652f6:	e006      	b.n	8065306 <NvM_MainFunction+0x2a>
	else if(EcuM_State == RUN) NvM_WriteAll_Flag = 0;
 80652f8:	4b13      	ldr	r3, [pc, #76]	@ (8065348 <NvM_MainFunction+0x6c>)
 80652fa:	781b      	ldrb	r3, [r3, #0]
 80652fc:	2b02      	cmp	r3, #2
 80652fe:	d102      	bne.n	8065306 <NvM_MainFunction+0x2a>
 8065300:	4b12      	ldr	r3, [pc, #72]	@ (806534c <NvM_MainFunction+0x70>)
 8065302:	2200      	movs	r2, #0
 8065304:	701a      	strb	r2, [r3, #0]
	else
	{
		/* Do nothing. */
	}

	switch(NvMState)
 8065306:	4b12      	ldr	r3, [pc, #72]	@ (8065350 <NvM_MainFunction+0x74>)
 8065308:	781b      	ldrb	r3, [r3, #0]
 806530a:	2b00      	cmp	r3, #0
 806530c:	d002      	beq.n	8065314 <NvM_MainFunction+0x38>
 806530e:	2b01      	cmp	r3, #1
 8065310:	d009      	beq.n	8065326 <NvM_MainFunction+0x4a>
		NvMState = PENDING;
		NvM_WriteAll();
		NvMState = READY;
		break;
	default:
		break;
 8065312:	e011      	b.n	8065338 <NvM_MainFunction+0x5c>
		NvMState = PENDING;
 8065314:	4b0e      	ldr	r3, [pc, #56]	@ (8065350 <NvM_MainFunction+0x74>)
 8065316:	2202      	movs	r2, #2
 8065318:	701a      	strb	r2, [r3, #0]
		NvM_ReadAll();
 806531a:	f7ff fdcb 	bl	8064eb4 <NvM_ReadAll>
		NvMState = READY;
 806531e:	4b0c      	ldr	r3, [pc, #48]	@ (8065350 <NvM_MainFunction+0x74>)
 8065320:	2203      	movs	r2, #3
 8065322:	701a      	strb	r2, [r3, #0]
		break;
 8065324:	e008      	b.n	8065338 <NvM_MainFunction+0x5c>
		NvMState = PENDING;
 8065326:	4b0a      	ldr	r3, [pc, #40]	@ (8065350 <NvM_MainFunction+0x74>)
 8065328:	2202      	movs	r2, #2
 806532a:	701a      	strb	r2, [r3, #0]
		NvM_WriteAll();
 806532c:	f7ff ff46 	bl	80651bc <NvM_WriteAll>
		NvMState = READY;
 8065330:	4b07      	ldr	r3, [pc, #28]	@ (8065350 <NvM_MainFunction+0x74>)
 8065332:	2203      	movs	r2, #3
 8065334:	701a      	strb	r2, [r3, #0]
		break;
 8065336:	bf00      	nop
	}
	NvM_MainCounter++;
 8065338:	4b06      	ldr	r3, [pc, #24]	@ (8065354 <NvM_MainFunction+0x78>)
 806533a:	681b      	ldr	r3, [r3, #0]
 806533c:	3301      	adds	r3, #1
 806533e:	4a05      	ldr	r2, [pc, #20]	@ (8065354 <NvM_MainFunction+0x78>)
 8065340:	6013      	str	r3, [r2, #0]
}
 8065342:	bf00      	nop
 8065344:	bd80      	pop	{r7, pc}
 8065346:	bf00      	nop
 8065348:	20010821 	.word	0x20010821
 806534c:	2001062e 	.word	0x2001062e
 8065350:	2001062c 	.word	0x2001062c
 8065354:	20010628 	.word	0x20010628

08065358 <NvM_FlashWriteData>:
static uint32 NvM_FlashWriteData(uint32 StartSectorAddress, uint32 *Data, uint16 numberofwords, uint32 Sector)
{
 8065358:	b5b0      	push	{r4, r5, r7, lr}
 806535a:	b088      	sub	sp, #32
 806535c:	af00      	add	r7, sp, #0
 806535e:	60f8      	str	r0, [r7, #12]
 8065360:	60b9      	str	r1, [r7, #8]
 8065362:	603b      	str	r3, [r7, #0]
 8065364:	4613      	mov	r3, r2
 8065366:	80fb      	strh	r3, [r7, #6]
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32 SECTORError;
	uint32 sofar=0;
 8065368:	2300      	movs	r3, #0
 806536a:	61fb      	str	r3, [r7, #28]
	uint32 StartSector = Sector;
 806536c:	683b      	ldr	r3, [r7, #0]
 806536e:	61bb      	str	r3, [r7, #24]
	uint32 EndSector = Sector;
 8065370:	683b      	ldr	r3, [r7, #0]
 8065372:	617b      	str	r3, [r7, #20]
	HAL_FLASH_Unlock();
 8065374:	f002 ff5a 	bl	806822c <HAL_FLASH_Unlock>
	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8065378:	4b21      	ldr	r3, [pc, #132]	@ (8065400 <NvM_FlashWriteData+0xa8>)
 806537a:	2200      	movs	r2, #0
 806537c:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 806537e:	4b20      	ldr	r3, [pc, #128]	@ (8065400 <NvM_FlashWriteData+0xa8>)
 8065380:	2202      	movs	r2, #2
 8065382:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Sector        = StartSector;
 8065384:	4a1e      	ldr	r2, [pc, #120]	@ (8065400 <NvM_FlashWriteData+0xa8>)
 8065386:	69bb      	ldr	r3, [r7, #24]
 8065388:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 806538a:	697a      	ldr	r2, [r7, #20]
 806538c:	69bb      	ldr	r3, [r7, #24]
 806538e:	1ad3      	subs	r3, r2, r3
 8065390:	3301      	adds	r3, #1
 8065392:	4a1b      	ldr	r2, [pc, #108]	@ (8065400 <NvM_FlashWriteData+0xa8>)
 8065394:	60d3      	str	r3, [r2, #12]
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK) return HAL_FLASH_GetError ();
 8065396:	f107 0310 	add.w	r3, r7, #16
 806539a:	4619      	mov	r1, r3
 806539c:	4818      	ldr	r0, [pc, #96]	@ (8065400 <NvM_FlashWriteData+0xa8>)
 806539e:	f003 f92f 	bl	8068600 <HAL_FLASHEx_Erase>
 80653a2:	4603      	mov	r3, r0
 80653a4:	2b00      	cmp	r3, #0
 80653a6:	d01f      	beq.n	80653e8 <NvM_FlashWriteData+0x90>
 80653a8:	f002 ff72 	bl	8068290 <HAL_FLASH_GetError>
 80653ac:	4603      	mov	r3, r0
 80653ae:	e022      	b.n	80653f6 <NvM_FlashWriteData+0x9e>
		/* Do nothing. */
	}

	while (sofar<numberofwords)
	{
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, Data[sofar]) == HAL_OK)
 80653b0:	69fb      	ldr	r3, [r7, #28]
 80653b2:	009b      	lsls	r3, r3, #2
 80653b4:	68ba      	ldr	r2, [r7, #8]
 80653b6:	4413      	add	r3, r2
 80653b8:	681b      	ldr	r3, [r3, #0]
 80653ba:	2200      	movs	r2, #0
 80653bc:	461c      	mov	r4, r3
 80653be:	4615      	mov	r5, r2
 80653c0:	4622      	mov	r2, r4
 80653c2:	462b      	mov	r3, r5
 80653c4:	68f9      	ldr	r1, [r7, #12]
 80653c6:	2002      	movs	r0, #2
 80653c8:	f002 fe1a 	bl	8068000 <HAL_FLASH_Program>
 80653cc:	4603      	mov	r3, r0
 80653ce:	2b00      	cmp	r3, #0
 80653d0:	d106      	bne.n	80653e0 <NvM_FlashWriteData+0x88>
		{
			StartSectorAddress += 4;
 80653d2:	68fb      	ldr	r3, [r7, #12]
 80653d4:	3304      	adds	r3, #4
 80653d6:	60fb      	str	r3, [r7, #12]
			sofar++;
 80653d8:	69fb      	ldr	r3, [r7, #28]
 80653da:	3301      	adds	r3, #1
 80653dc:	61fb      	str	r3, [r7, #28]
 80653de:	e003      	b.n	80653e8 <NvM_FlashWriteData+0x90>
		}
		else return HAL_FLASH_GetError ();
 80653e0:	f002 ff56 	bl	8068290 <HAL_FLASH_GetError>
 80653e4:	4603      	mov	r3, r0
 80653e6:	e006      	b.n	80653f6 <NvM_FlashWriteData+0x9e>
	while (sofar<numberofwords)
 80653e8:	88fb      	ldrh	r3, [r7, #6]
 80653ea:	69fa      	ldr	r2, [r7, #28]
 80653ec:	429a      	cmp	r2, r3
 80653ee:	d3df      	bcc.n	80653b0 <NvM_FlashWriteData+0x58>
	}
	HAL_FLASH_Lock();
 80653f0:	f002 ff3e 	bl	8068270 <HAL_FLASH_Lock>
	return 0;
 80653f4:	2300      	movs	r3, #0
}
 80653f6:	4618      	mov	r0, r3
 80653f8:	3720      	adds	r7, #32
 80653fa:	46bd      	mov	sp, r7
 80653fc:	bdb0      	pop	{r4, r5, r7, pc}
 80653fe:	bf00      	nop
 8065400:	2001080c 	.word	0x2001080c

08065404 <NvM_FlashReadData>:
static void NvM_FlashReadData(uint32 StartSectorAddress, uint32 *RxBuf, uint16 numberofwords)
{
 8065404:	b480      	push	{r7}
 8065406:	b087      	sub	sp, #28
 8065408:	af00      	add	r7, sp, #0
 806540a:	60f8      	str	r0, [r7, #12]
 806540c:	60b9      	str	r1, [r7, #8]
 806540e:	4613      	mov	r3, r2
 8065410:	80fb      	strh	r3, [r7, #6]
	for (uint16_t i = 0; i < numberofwords; i++) RxBuf[i] = *(__IO uint32_t *)(StartSectorAddress + (i * 4));
 8065412:	2300      	movs	r3, #0
 8065414:	82fb      	strh	r3, [r7, #22]
 8065416:	e00e      	b.n	8065436 <NvM_FlashReadData+0x32>
 8065418:	8afb      	ldrh	r3, [r7, #22]
 806541a:	009b      	lsls	r3, r3, #2
 806541c:	461a      	mov	r2, r3
 806541e:	68fb      	ldr	r3, [r7, #12]
 8065420:	4413      	add	r3, r2
 8065422:	4619      	mov	r1, r3
 8065424:	8afb      	ldrh	r3, [r7, #22]
 8065426:	009b      	lsls	r3, r3, #2
 8065428:	68ba      	ldr	r2, [r7, #8]
 806542a:	4413      	add	r3, r2
 806542c:	680a      	ldr	r2, [r1, #0]
 806542e:	601a      	str	r2, [r3, #0]
 8065430:	8afb      	ldrh	r3, [r7, #22]
 8065432:	3301      	adds	r3, #1
 8065434:	82fb      	strh	r3, [r7, #22]
 8065436:	8afa      	ldrh	r2, [r7, #22]
 8065438:	88fb      	ldrh	r3, [r7, #6]
 806543a:	429a      	cmp	r2, r3
 806543c:	d3ec      	bcc.n	8065418 <NvM_FlashReadData+0x14>
}
 806543e:	bf00      	nop
 8065440:	bf00      	nop
 8065442:	371c      	adds	r7, #28
 8065444:	46bd      	mov	sp, r7
 8065446:	f85d 7b04 	ldr.w	r7, [sp], #4
 806544a:	4770      	bx	lr

0806544c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 806544c:	b480      	push	{r7}
 806544e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8065450:	f3bf 8f4f 	dsb	sy
}
 8065454:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8065456:	4b06      	ldr	r3, [pc, #24]	@ (8065470 <__NVIC_SystemReset+0x24>)
 8065458:	68db      	ldr	r3, [r3, #12]
 806545a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 806545e:	4904      	ldr	r1, [pc, #16]	@ (8065470 <__NVIC_SystemReset+0x24>)
 8065460:	4b04      	ldr	r3, [pc, #16]	@ (8065474 <__NVIC_SystemReset+0x28>)
 8065462:	4313      	orrs	r3, r2
 8065464:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8065466:	f3bf 8f4f 	dsb	sy
}
 806546a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 806546c:	bf00      	nop
 806546e:	e7fd      	b.n	806546c <__NVIC_SystemReset+0x20>
 8065470:	e000ed00 	.word	0xe000ed00
 8065474:	05fa0004 	.word	0x05fa0004

08065478 <EcuM_MainFunction>:
static void EcuM_GoSleep(void);
static void EcuM_ProcessFaultState(void);
/* FUNCTIONS END */
/* FUNCTIONS START */
void EcuM_MainFunction(void)
{
 8065478:	b580      	push	{r7, lr}
 806547a:	af00      	add	r7, sp, #0
	EcuM_ProcessEcuState();
 806547c:	f000 fa14 	bl	80658a8 <EcuM_ProcessEcuState>
	EcuM_ProcessFaultState();
 8065480:	f000 f830 	bl	80654e4 <EcuM_ProcessFaultState>
	EcuM_MainCounter++;
 8065484:	4b03      	ldr	r3, [pc, #12]	@ (8065494 <EcuM_MainFunction+0x1c>)
 8065486:	681b      	ldr	r3, [r3, #0]
 8065488:	3301      	adds	r3, #1
 806548a:	4a02      	ldr	r2, [pc, #8]	@ (8065494 <EcuM_MainFunction+0x1c>)
 806548c:	6013      	str	r3, [r2, #0]
}
 806548e:	bf00      	nop
 8065490:	bd80      	pop	{r7, pc}
 8065492:	bf00      	nop
 8065494:	20010824 	.word	0x20010824

08065498 <EcuM_PerformReset>:
void EcuM_PerformReset(EcuMReset_t param)
{
 8065498:	b580      	push	{r7, lr}
 806549a:	b082      	sub	sp, #8
 806549c:	af00      	add	r7, sp, #0
 806549e:	4603      	mov	r3, r0
 80654a0:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 80654a2:	b672      	cpsid	i
}
 80654a4:	bf00      	nop
	__disable_irq();
	if(param)
 80654a6:	79fb      	ldrb	r3, [r7, #7]
 80654a8:	2b00      	cmp	r3, #0
 80654aa:	d014      	beq.n	80654d6 <EcuM_PerformReset+0x3e>
	{
		Dcm_AliveCounter = 0;
 80654ac:	4b0b      	ldr	r3, [pc, #44]	@ (80654dc <EcuM_PerformReset+0x44>)
 80654ae:	2200      	movs	r2, #0
 80654b0:	601a      	str	r2, [r3, #0]
		EcuMSystem_OvwArr.resetArr[param].reset = param;
 80654b2:	79fb      	ldrb	r3, [r7, #7]
 80654b4:	490a      	ldr	r1, [pc, #40]	@ (80654e0 <EcuM_PerformReset+0x48>)
 80654b6:	3307      	adds	r3, #7
 80654b8:	79fa      	ldrb	r2, [r7, #7]
 80654ba:	f801 2033 	strb.w	r2, [r1, r3, lsl #3]
		EcuMSystem_OvwArr.resetArr[param].counter++;
 80654be:	79fa      	ldrb	r2, [r7, #7]
 80654c0:	4907      	ldr	r1, [pc, #28]	@ (80654e0 <EcuM_PerformReset+0x48>)
 80654c2:	1dd3      	adds	r3, r2, #7
 80654c4:	00db      	lsls	r3, r3, #3
 80654c6:	440b      	add	r3, r1
 80654c8:	685b      	ldr	r3, [r3, #4]
 80654ca:	1c59      	adds	r1, r3, #1
 80654cc:	4804      	ldr	r0, [pc, #16]	@ (80654e0 <EcuM_PerformReset+0x48>)
 80654ce:	1dd3      	adds	r3, r2, #7
 80654d0:	00db      	lsls	r3, r3, #3
 80654d2:	4403      	add	r3, r0
 80654d4:	6059      	str	r1, [r3, #4]
	}
	else
	{
		/* Do nothing. */
	}
	__NVIC_SystemReset();
 80654d6:	f7ff ffb9 	bl	806544c <__NVIC_SystemReset>
 80654da:	bf00      	nop
 80654dc:	2001fdac 	.word	0x2001fdac
 80654e0:	2001fdc0 	.word	0x2001fdc0

080654e4 <EcuM_ProcessFaultState>:
}
static void EcuM_ProcessFaultState(void)
{
 80654e4:	b580      	push	{r7, lr}
 80654e6:	b082      	sub	sp, #8
 80654e8:	af00      	add	r7, sp, #0
	uint8 localCounter = 0;
 80654ea:	2300      	movs	r3, #0
 80654ec:	71fb      	strb	r3, [r7, #7]
	if((RCC->CSR & RCC_CSR_IWDGRSTF) != 0)
 80654ee:	4b90      	ldr	r3, [pc, #576]	@ (8065730 <EcuM_ProcessFaultState+0x24c>)
 80654f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80654f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80654f6:	2b00      	cmp	r3, #0
 80654f8:	d046      	beq.n	8065588 <EcuM_ProcessFaultState+0xa4>
	{
		/* Set the wake-up event. */
		if(EcuM_ErrorHistoryCounter < 8)
 80654fa:	4b8e      	ldr	r3, [pc, #568]	@ (8065734 <EcuM_ProcessFaultState+0x250>)
 80654fc:	781b      	ldrb	r3, [r3, #0]
 80654fe:	2b07      	cmp	r3, #7
 8065500:	d80c      	bhi.n	806551c <EcuM_ProcessFaultState+0x38>
		{
			EcuM_ErrorHistory[EcuM_ErrorHistoryCounter] = IWDG_RESET_H;
 8065502:	4b8c      	ldr	r3, [pc, #560]	@ (8065734 <EcuM_ProcessFaultState+0x250>)
 8065504:	781b      	ldrb	r3, [r3, #0]
 8065506:	461a      	mov	r2, r3
 8065508:	4b8b      	ldr	r3, [pc, #556]	@ (8065738 <EcuM_ProcessFaultState+0x254>)
 806550a:	2121      	movs	r1, #33	@ 0x21
 806550c:	5499      	strb	r1, [r3, r2]
			EcuM_ErrorHistoryCounter++;
 806550e:	4b89      	ldr	r3, [pc, #548]	@ (8065734 <EcuM_ProcessFaultState+0x250>)
 8065510:	781b      	ldrb	r3, [r3, #0]
 8065512:	3301      	adds	r3, #1
 8065514:	b2da      	uxtb	r2, r3
 8065516:	4b87      	ldr	r3, [pc, #540]	@ (8065734 <EcuM_ProcessFaultState+0x250>)
 8065518:	701a      	strb	r2, [r3, #0]
 806551a:	e00e      	b.n	806553a <EcuM_ProcessFaultState+0x56>
		}
		else
		{
			EcuM_ErrorHistoryCounter = 0;
 806551c:	4b85      	ldr	r3, [pc, #532]	@ (8065734 <EcuM_ProcessFaultState+0x250>)
 806551e:	2200      	movs	r2, #0
 8065520:	701a      	strb	r2, [r3, #0]
			EcuM_ErrorHistory[EcuM_ErrorHistoryCounter] = IWDG_RESET_H;
 8065522:	4b84      	ldr	r3, [pc, #528]	@ (8065734 <EcuM_ProcessFaultState+0x250>)
 8065524:	781b      	ldrb	r3, [r3, #0]
 8065526:	461a      	mov	r2, r3
 8065528:	4b83      	ldr	r3, [pc, #524]	@ (8065738 <EcuM_ProcessFaultState+0x254>)
 806552a:	2121      	movs	r1, #33	@ 0x21
 806552c:	5499      	strb	r1, [r3, r2]
			EcuM_ErrorHistoryCounter++;
 806552e:	4b81      	ldr	r3, [pc, #516]	@ (8065734 <EcuM_ProcessFaultState+0x250>)
 8065530:	781b      	ldrb	r3, [r3, #0]
 8065532:	3301      	adds	r3, #1
 8065534:	b2da      	uxtb	r2, r3
 8065536:	4b7f      	ldr	r3, [pc, #508]	@ (8065734 <EcuM_ProcessFaultState+0x250>)
 8065538:	701a      	strb	r2, [r3, #0]
		}
		if(EcuM_WakeupHistoryCounter < 8)
 806553a:	4b80      	ldr	r3, [pc, #512]	@ (806573c <EcuM_ProcessFaultState+0x258>)
 806553c:	781b      	ldrb	r3, [r3, #0]
 806553e:	2b07      	cmp	r3, #7
 8065540:	d80c      	bhi.n	806555c <EcuM_ProcessFaultState+0x78>
		{
			EcuM_WakeupHistory[EcuM_WakeupHistoryCounter] = IWDG_WAKEUP;
 8065542:	4b7e      	ldr	r3, [pc, #504]	@ (806573c <EcuM_ProcessFaultState+0x258>)
 8065544:	781b      	ldrb	r3, [r3, #0]
 8065546:	461a      	mov	r2, r3
 8065548:	4b7d      	ldr	r3, [pc, #500]	@ (8065740 <EcuM_ProcessFaultState+0x25c>)
 806554a:	2135      	movs	r1, #53	@ 0x35
 806554c:	5499      	strb	r1, [r3, r2]
			EcuM_WakeupHistoryCounter++;
 806554e:	4b7b      	ldr	r3, [pc, #492]	@ (806573c <EcuM_ProcessFaultState+0x258>)
 8065550:	781b      	ldrb	r3, [r3, #0]
 8065552:	3301      	adds	r3, #1
 8065554:	b2da      	uxtb	r2, r3
 8065556:	4b79      	ldr	r3, [pc, #484]	@ (806573c <EcuM_ProcessFaultState+0x258>)
 8065558:	701a      	strb	r2, [r3, #0]
 806555a:	e00e      	b.n	806557a <EcuM_ProcessFaultState+0x96>
		}
		else
		{
			EcuM_WakeupHistoryCounter = 0;
 806555c:	4b77      	ldr	r3, [pc, #476]	@ (806573c <EcuM_ProcessFaultState+0x258>)
 806555e:	2200      	movs	r2, #0
 8065560:	701a      	strb	r2, [r3, #0]
			EcuM_WakeupHistory[EcuM_WakeupHistoryCounter] = IWDG_WAKEUP;
 8065562:	4b76      	ldr	r3, [pc, #472]	@ (806573c <EcuM_ProcessFaultState+0x258>)
 8065564:	781b      	ldrb	r3, [r3, #0]
 8065566:	461a      	mov	r2, r3
 8065568:	4b75      	ldr	r3, [pc, #468]	@ (8065740 <EcuM_ProcessFaultState+0x25c>)
 806556a:	2135      	movs	r1, #53	@ 0x35
 806556c:	5499      	strb	r1, [r3, r2]
			EcuM_WakeupHistoryCounter++;
 806556e:	4b73      	ldr	r3, [pc, #460]	@ (806573c <EcuM_ProcessFaultState+0x258>)
 8065570:	781b      	ldrb	r3, [r3, #0]
 8065572:	3301      	adds	r3, #1
 8065574:	b2da      	uxtb	r2, r3
 8065576:	4b71      	ldr	r3, [pc, #452]	@ (806573c <EcuM_ProcessFaultState+0x258>)
 8065578:	701a      	strb	r2, [r3, #0]
		}
		/* Reset the flag. */
		RCC->CSR |= RCC_CSR_IWDGRSTF;
 806557a:	4b6d      	ldr	r3, [pc, #436]	@ (8065730 <EcuM_ProcessFaultState+0x24c>)
 806557c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 806557e:	4a6c      	ldr	r2, [pc, #432]	@ (8065730 <EcuM_ProcessFaultState+0x24c>)
 8065580:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8065584:	6753      	str	r3, [r2, #116]	@ 0x74
 8065586:	e032      	b.n	80655ee <EcuM_ProcessFaultState+0x10a>
	}
	else if((RCC->CSR & RCC_CSR_SFTRSTF) != 0)
 8065588:	4b69      	ldr	r3, [pc, #420]	@ (8065730 <EcuM_ProcessFaultState+0x24c>)
 806558a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 806558c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8065590:	2b00      	cmp	r3, #0
 8065592:	d02c      	beq.n	80655ee <EcuM_ProcessFaultState+0x10a>
	{
		/* Set the wake-up event. */
		if(EcuM_WakeupHistory[EcuM_WakeupHistoryCounter - 1] != HC05_WAKEUP)
 8065594:	4b69      	ldr	r3, [pc, #420]	@ (806573c <EcuM_ProcessFaultState+0x258>)
 8065596:	781b      	ldrb	r3, [r3, #0]
 8065598:	3b01      	subs	r3, #1
 806559a:	4a69      	ldr	r2, [pc, #420]	@ (8065740 <EcuM_ProcessFaultState+0x25c>)
 806559c:	5cd3      	ldrb	r3, [r2, r3]
 806559e:	2b33      	cmp	r3, #51	@ 0x33
 80655a0:	d01f      	beq.n	80655e2 <EcuM_ProcessFaultState+0xfe>
		{
			if(EcuM_WakeupHistoryCounter < 8)
 80655a2:	4b66      	ldr	r3, [pc, #408]	@ (806573c <EcuM_ProcessFaultState+0x258>)
 80655a4:	781b      	ldrb	r3, [r3, #0]
 80655a6:	2b07      	cmp	r3, #7
 80655a8:	d80c      	bhi.n	80655c4 <EcuM_ProcessFaultState+0xe0>
			{
				EcuM_WakeupHistory[EcuM_WakeupHistoryCounter] = RESET_WAKEUP;
 80655aa:	4b64      	ldr	r3, [pc, #400]	@ (806573c <EcuM_ProcessFaultState+0x258>)
 80655ac:	781b      	ldrb	r3, [r3, #0]
 80655ae:	461a      	mov	r2, r3
 80655b0:	4b63      	ldr	r3, [pc, #396]	@ (8065740 <EcuM_ProcessFaultState+0x25c>)
 80655b2:	2134      	movs	r1, #52	@ 0x34
 80655b4:	5499      	strb	r1, [r3, r2]
				EcuM_WakeupHistoryCounter++;
 80655b6:	4b61      	ldr	r3, [pc, #388]	@ (806573c <EcuM_ProcessFaultState+0x258>)
 80655b8:	781b      	ldrb	r3, [r3, #0]
 80655ba:	3301      	adds	r3, #1
 80655bc:	b2da      	uxtb	r2, r3
 80655be:	4b5f      	ldr	r3, [pc, #380]	@ (806573c <EcuM_ProcessFaultState+0x258>)
 80655c0:	701a      	strb	r2, [r3, #0]
 80655c2:	e00e      	b.n	80655e2 <EcuM_ProcessFaultState+0xfe>
			}
			else
			{
				EcuM_WakeupHistoryCounter = 0;
 80655c4:	4b5d      	ldr	r3, [pc, #372]	@ (806573c <EcuM_ProcessFaultState+0x258>)
 80655c6:	2200      	movs	r2, #0
 80655c8:	701a      	strb	r2, [r3, #0]
				EcuM_WakeupHistory[EcuM_WakeupHistoryCounter] = RESET_WAKEUP;
 80655ca:	4b5c      	ldr	r3, [pc, #368]	@ (806573c <EcuM_ProcessFaultState+0x258>)
 80655cc:	781b      	ldrb	r3, [r3, #0]
 80655ce:	461a      	mov	r2, r3
 80655d0:	4b5b      	ldr	r3, [pc, #364]	@ (8065740 <EcuM_ProcessFaultState+0x25c>)
 80655d2:	2134      	movs	r1, #52	@ 0x34
 80655d4:	5499      	strb	r1, [r3, r2]
				EcuM_WakeupHistoryCounter++;
 80655d6:	4b59      	ldr	r3, [pc, #356]	@ (806573c <EcuM_ProcessFaultState+0x258>)
 80655d8:	781b      	ldrb	r3, [r3, #0]
 80655da:	3301      	adds	r3, #1
 80655dc:	b2da      	uxtb	r2, r3
 80655de:	4b57      	ldr	r3, [pc, #348]	@ (806573c <EcuM_ProcessFaultState+0x258>)
 80655e0:	701a      	strb	r2, [r3, #0]
		else
		{
			/* Do nothing. */
		}
		/* Reset the flag. */
		RCC->CSR |= RCC_CSR_SFTRSTF;
 80655e2:	4b53      	ldr	r3, [pc, #332]	@ (8065730 <EcuM_ProcessFaultState+0x24c>)
 80655e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80655e6:	4a52      	ldr	r2, [pc, #328]	@ (8065730 <EcuM_ProcessFaultState+0x24c>)
 80655e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80655ec:	6753      	str	r3, [r2, #116]	@ 0x74
	}
	else
	{
		/* Do nothing.  */
	}
	RCC->CSR |= RCC_CSR_RMVF;
 80655ee:	4b50      	ldr	r3, [pc, #320]	@ (8065730 <EcuM_ProcessFaultState+0x24c>)
 80655f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80655f2:	4a4f      	ldr	r2, [pc, #316]	@ (8065730 <EcuM_ProcessFaultState+0x24c>)
 80655f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80655f8:	6753      	str	r3, [r2, #116]	@ 0x74
	for(uint8 i = 0; i < 9; i++)
 80655fa:	2300      	movs	r3, #0
 80655fc:	71bb      	strb	r3, [r7, #6]
 80655fe:	e038      	b.n	8065672 <EcuM_ProcessFaultState+0x18e>
	{
		if(CanSpi_ErrorArr[i] != 0)
 8065600:	79bb      	ldrb	r3, [r7, #6]
 8065602:	4a50      	ldr	r2, [pc, #320]	@ (8065744 <EcuM_ProcessFaultState+0x260>)
 8065604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8065608:	2b00      	cmp	r3, #0
 806560a:	d02f      	beq.n	806566c <EcuM_ProcessFaultState+0x188>
		{
			EcuMSystem_OvwArr.faultArr[SPI_ERROR].fault = SPI_ERROR;
 806560c:	4b4e      	ldr	r3, [pc, #312]	@ (8065748 <EcuM_ProcessFaultState+0x264>)
 806560e:	222d      	movs	r2, #45	@ 0x2d
 8065610:	f883 2168 	strb.w	r2, [r3, #360]	@ 0x168
			EcuMSystem_OvwArr.faultArr[SPI_ERROR].counter++;
 8065614:	4b4c      	ldr	r3, [pc, #304]	@ (8065748 <EcuM_ProcessFaultState+0x264>)
 8065616:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 806561a:	3301      	adds	r3, #1
 806561c:	4a4a      	ldr	r2, [pc, #296]	@ (8065748 <EcuM_ProcessFaultState+0x264>)
 806561e:	f8c2 316c 	str.w	r3, [r2, #364]	@ 0x16c
			if(EcuM_ErrorHistoryCounter < 8)
 8065622:	4b44      	ldr	r3, [pc, #272]	@ (8065734 <EcuM_ProcessFaultState+0x250>)
 8065624:	781b      	ldrb	r3, [r3, #0]
 8065626:	2b07      	cmp	r3, #7
 8065628:	d80c      	bhi.n	8065644 <EcuM_ProcessFaultState+0x160>
			{
				EcuM_ErrorHistory[EcuM_ErrorHistoryCounter] = SPI_ERROR_H;
 806562a:	4b42      	ldr	r3, [pc, #264]	@ (8065734 <EcuM_ProcessFaultState+0x250>)
 806562c:	781b      	ldrb	r3, [r3, #0]
 806562e:	461a      	mov	r2, r3
 8065630:	4b41      	ldr	r3, [pc, #260]	@ (8065738 <EcuM_ProcessFaultState+0x254>)
 8065632:	2111      	movs	r1, #17
 8065634:	5499      	strb	r1, [r3, r2]
				EcuM_ErrorHistoryCounter++;
 8065636:	4b3f      	ldr	r3, [pc, #252]	@ (8065734 <EcuM_ProcessFaultState+0x250>)
 8065638:	781b      	ldrb	r3, [r3, #0]
 806563a:	3301      	adds	r3, #1
 806563c:	b2da      	uxtb	r2, r3
 806563e:	4b3d      	ldr	r3, [pc, #244]	@ (8065734 <EcuM_ProcessFaultState+0x250>)
 8065640:	701a      	strb	r2, [r3, #0]
 8065642:	e00e      	b.n	8065662 <EcuM_ProcessFaultState+0x17e>
			}
			else
			{
				EcuM_ErrorHistoryCounter = 0;
 8065644:	4b3b      	ldr	r3, [pc, #236]	@ (8065734 <EcuM_ProcessFaultState+0x250>)
 8065646:	2200      	movs	r2, #0
 8065648:	701a      	strb	r2, [r3, #0]
				EcuM_ErrorHistory[EcuM_ErrorHistoryCounter] = SPI_ERROR_H;
 806564a:	4b3a      	ldr	r3, [pc, #232]	@ (8065734 <EcuM_ProcessFaultState+0x250>)
 806564c:	781b      	ldrb	r3, [r3, #0]
 806564e:	461a      	mov	r2, r3
 8065650:	4b39      	ldr	r3, [pc, #228]	@ (8065738 <EcuM_ProcessFaultState+0x254>)
 8065652:	2111      	movs	r1, #17
 8065654:	5499      	strb	r1, [r3, r2]
				EcuM_ErrorHistoryCounter++;
 8065656:	4b37      	ldr	r3, [pc, #220]	@ (8065734 <EcuM_ProcessFaultState+0x250>)
 8065658:	781b      	ldrb	r3, [r3, #0]
 806565a:	3301      	adds	r3, #1
 806565c:	b2da      	uxtb	r2, r3
 806565e:	4b35      	ldr	r3, [pc, #212]	@ (8065734 <EcuM_ProcessFaultState+0x250>)
 8065660:	701a      	strb	r2, [r3, #0]
			}
			CanSpi_ErrorArr[i] = 0;
 8065662:	79bb      	ldrb	r3, [r7, #6]
 8065664:	4a37      	ldr	r2, [pc, #220]	@ (8065744 <EcuM_ProcessFaultState+0x260>)
 8065666:	2100      	movs	r1, #0
 8065668:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(uint8 i = 0; i < 9; i++)
 806566c:	79bb      	ldrb	r3, [r7, #6]
 806566e:	3301      	adds	r3, #1
 8065670:	71bb      	strb	r3, [r7, #6]
 8065672:	79bb      	ldrb	r3, [r7, #6]
 8065674:	2b08      	cmp	r3, #8
 8065676:	d9c3      	bls.n	8065600 <EcuM_ProcessFaultState+0x11c>
		else
		{
			/* Do nothing. */
		}
	}
	for(uint8 i = 0; i < 3; i++)
 8065678:	2300      	movs	r3, #0
 806567a:	717b      	strb	r3, [r7, #5]
 806567c:	e0af      	b.n	80657de <EcuM_ProcessFaultState+0x2fa>
	{
		if(CanSpi_Bus_ErrorArr[i] != 0)
 806567e:	797b      	ldrb	r3, [r7, #5]
 8065680:	4a32      	ldr	r2, [pc, #200]	@ (806574c <EcuM_ProcessFaultState+0x268>)
 8065682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8065686:	2b00      	cmp	r3, #0
 8065688:	d02f      	beq.n	80656ea <EcuM_ProcessFaultState+0x206>
		{
			EcuMSystem_OvwArr.faultArr[CANBUS_ERROR].fault = CANBUS_ERROR;
 806568a:	4b2f      	ldr	r3, [pc, #188]	@ (8065748 <EcuM_ProcessFaultState+0x264>)
 806568c:	2232      	movs	r2, #50	@ 0x32
 806568e:	f883 2190 	strb.w	r2, [r3, #400]	@ 0x190
			EcuMSystem_OvwArr.faultArr[CANBUS_ERROR].counter++;
 8065692:	4b2d      	ldr	r3, [pc, #180]	@ (8065748 <EcuM_ProcessFaultState+0x264>)
 8065694:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 8065698:	3301      	adds	r3, #1
 806569a:	4a2b      	ldr	r2, [pc, #172]	@ (8065748 <EcuM_ProcessFaultState+0x264>)
 806569c:	f8c2 3194 	str.w	r3, [r2, #404]	@ 0x194
			if(EcuM_ErrorHistoryCounter < 8)
 80656a0:	4b24      	ldr	r3, [pc, #144]	@ (8065734 <EcuM_ProcessFaultState+0x250>)
 80656a2:	781b      	ldrb	r3, [r3, #0]
 80656a4:	2b07      	cmp	r3, #7
 80656a6:	d80c      	bhi.n	80656c2 <EcuM_ProcessFaultState+0x1de>
			{
				EcuM_ErrorHistory[EcuM_ErrorHistoryCounter] = CANBUS_ERROR_H;
 80656a8:	4b22      	ldr	r3, [pc, #136]	@ (8065734 <EcuM_ProcessFaultState+0x250>)
 80656aa:	781b      	ldrb	r3, [r3, #0]
 80656ac:	461a      	mov	r2, r3
 80656ae:	4b22      	ldr	r3, [pc, #136]	@ (8065738 <EcuM_ProcessFaultState+0x254>)
 80656b0:	2116      	movs	r1, #22
 80656b2:	5499      	strb	r1, [r3, r2]
				EcuM_ErrorHistoryCounter++;
 80656b4:	4b1f      	ldr	r3, [pc, #124]	@ (8065734 <EcuM_ProcessFaultState+0x250>)
 80656b6:	781b      	ldrb	r3, [r3, #0]
 80656b8:	3301      	adds	r3, #1
 80656ba:	b2da      	uxtb	r2, r3
 80656bc:	4b1d      	ldr	r3, [pc, #116]	@ (8065734 <EcuM_ProcessFaultState+0x250>)
 80656be:	701a      	strb	r2, [r3, #0]
 80656c0:	e00e      	b.n	80656e0 <EcuM_ProcessFaultState+0x1fc>
			}
			else
			{
				EcuM_ErrorHistoryCounter = 0;
 80656c2:	4b1c      	ldr	r3, [pc, #112]	@ (8065734 <EcuM_ProcessFaultState+0x250>)
 80656c4:	2200      	movs	r2, #0
 80656c6:	701a      	strb	r2, [r3, #0]
				EcuM_ErrorHistory[EcuM_ErrorHistoryCounter] = CANBUS_ERROR_H;
 80656c8:	4b1a      	ldr	r3, [pc, #104]	@ (8065734 <EcuM_ProcessFaultState+0x250>)
 80656ca:	781b      	ldrb	r3, [r3, #0]
 80656cc:	461a      	mov	r2, r3
 80656ce:	4b1a      	ldr	r3, [pc, #104]	@ (8065738 <EcuM_ProcessFaultState+0x254>)
 80656d0:	2116      	movs	r1, #22
 80656d2:	5499      	strb	r1, [r3, r2]
				EcuM_ErrorHistoryCounter++;
 80656d4:	4b17      	ldr	r3, [pc, #92]	@ (8065734 <EcuM_ProcessFaultState+0x250>)
 80656d6:	781b      	ldrb	r3, [r3, #0]
 80656d8:	3301      	adds	r3, #1
 80656da:	b2da      	uxtb	r2, r3
 80656dc:	4b15      	ldr	r3, [pc, #84]	@ (8065734 <EcuM_ProcessFaultState+0x250>)
 80656de:	701a      	strb	r2, [r3, #0]
			}
			CanSpi_Bus_ErrorArr[i] = 0;
 80656e0:	797b      	ldrb	r3, [r7, #5]
 80656e2:	4a1a      	ldr	r2, [pc, #104]	@ (806574c <EcuM_ProcessFaultState+0x268>)
 80656e4:	2100      	movs	r1, #0
 80656e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
		else
		{
			/* Do nothing. */
		}
		if(Adc_Error[i] != 0)
 80656ea:	797b      	ldrb	r3, [r7, #5]
 80656ec:	4a18      	ldr	r2, [pc, #96]	@ (8065750 <EcuM_ProcessFaultState+0x26c>)
 80656ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80656f2:	2b00      	cmp	r3, #0
 80656f4:	d042      	beq.n	806577c <EcuM_ProcessFaultState+0x298>
		{
			EcuMSystem_OvwArr.faultArr[ADC_ERROR].fault = ADC_ERROR;
 80656f6:	4b14      	ldr	r3, [pc, #80]	@ (8065748 <EcuM_ProcessFaultState+0x264>)
 80656f8:	2230      	movs	r2, #48	@ 0x30
 80656fa:	f883 2180 	strb.w	r2, [r3, #384]	@ 0x180
			EcuMSystem_OvwArr.faultArr[ADC_ERROR].counter++;
 80656fe:	4b12      	ldr	r3, [pc, #72]	@ (8065748 <EcuM_ProcessFaultState+0x264>)
 8065700:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 8065704:	3301      	adds	r3, #1
 8065706:	4a10      	ldr	r2, [pc, #64]	@ (8065748 <EcuM_ProcessFaultState+0x264>)
 8065708:	f8c2 3184 	str.w	r3, [r2, #388]	@ 0x184
			if(EcuM_ErrorHistoryCounter < 8)
 806570c:	4b09      	ldr	r3, [pc, #36]	@ (8065734 <EcuM_ProcessFaultState+0x250>)
 806570e:	781b      	ldrb	r3, [r3, #0]
 8065710:	2b07      	cmp	r3, #7
 8065712:	d81f      	bhi.n	8065754 <EcuM_ProcessFaultState+0x270>
			{
				EcuM_ErrorHistory[EcuM_ErrorHistoryCounter] = ADC_ERROR_H;
 8065714:	4b07      	ldr	r3, [pc, #28]	@ (8065734 <EcuM_ProcessFaultState+0x250>)
 8065716:	781b      	ldrb	r3, [r3, #0]
 8065718:	461a      	mov	r2, r3
 806571a:	4b07      	ldr	r3, [pc, #28]	@ (8065738 <EcuM_ProcessFaultState+0x254>)
 806571c:	2114      	movs	r1, #20
 806571e:	5499      	strb	r1, [r3, r2]
				EcuM_ErrorHistoryCounter++;
 8065720:	4b04      	ldr	r3, [pc, #16]	@ (8065734 <EcuM_ProcessFaultState+0x250>)
 8065722:	781b      	ldrb	r3, [r3, #0]
 8065724:	3301      	adds	r3, #1
 8065726:	b2da      	uxtb	r2, r3
 8065728:	4b02      	ldr	r3, [pc, #8]	@ (8065734 <EcuM_ProcessFaultState+0x250>)
 806572a:	701a      	strb	r2, [r3, #0]
 806572c:	e021      	b.n	8065772 <EcuM_ProcessFaultState+0x28e>
 806572e:	bf00      	nop
 8065730:	40023800 	.word	0x40023800
 8065734:	2001fe51 	.word	0x2001fe51
 8065738:	2001fdb0 	.word	0x2001fdb0
 806573c:	2001fe50 	.word	0x2001fe50
 8065740:	2001fdb8 	.word	0x2001fdb8
 8065744:	20010318 	.word	0x20010318
 8065748:	2001fdc0 	.word	0x2001fdc0
 806574c:	2001033c 	.word	0x2001033c
 8065750:	200105fc 	.word	0x200105fc
			}
			else
			{
				EcuM_ErrorHistoryCounter = 0;
 8065754:	4b4f      	ldr	r3, [pc, #316]	@ (8065894 <EcuM_ProcessFaultState+0x3b0>)
 8065756:	2200      	movs	r2, #0
 8065758:	701a      	strb	r2, [r3, #0]
				EcuM_ErrorHistory[EcuM_ErrorHistoryCounter] = ADC_ERROR_H;
 806575a:	4b4e      	ldr	r3, [pc, #312]	@ (8065894 <EcuM_ProcessFaultState+0x3b0>)
 806575c:	781b      	ldrb	r3, [r3, #0]
 806575e:	461a      	mov	r2, r3
 8065760:	4b4d      	ldr	r3, [pc, #308]	@ (8065898 <EcuM_ProcessFaultState+0x3b4>)
 8065762:	2114      	movs	r1, #20
 8065764:	5499      	strb	r1, [r3, r2]
				EcuM_ErrorHistoryCounter++;
 8065766:	4b4b      	ldr	r3, [pc, #300]	@ (8065894 <EcuM_ProcessFaultState+0x3b0>)
 8065768:	781b      	ldrb	r3, [r3, #0]
 806576a:	3301      	adds	r3, #1
 806576c:	b2da      	uxtb	r2, r3
 806576e:	4b49      	ldr	r3, [pc, #292]	@ (8065894 <EcuM_ProcessFaultState+0x3b0>)
 8065770:	701a      	strb	r2, [r3, #0]
			}
			Adc_Error[i] = 0;
 8065772:	797b      	ldrb	r3, [r7, #5]
 8065774:	4a49      	ldr	r2, [pc, #292]	@ (806589c <EcuM_ProcessFaultState+0x3b8>)
 8065776:	2100      	movs	r1, #0
 8065778:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
		else
		{
			/* Do nothing. */
		}
		if(i < 2)
 806577c:	797b      	ldrb	r3, [r7, #5]
 806577e:	2b01      	cmp	r3, #1
 8065780:	d82a      	bhi.n	80657d8 <EcuM_ProcessFaultState+0x2f4>
		{
			if(Tim_ErrorStatus[i] != 0)
 8065782:	797b      	ldrb	r3, [r7, #5]
 8065784:	4a46      	ldr	r2, [pc, #280]	@ (80658a0 <EcuM_ProcessFaultState+0x3bc>)
 8065786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 806578a:	2b00      	cmp	r3, #0
 806578c:	d024      	beq.n	80657d8 <EcuM_ProcessFaultState+0x2f4>
			{
				if(EcuM_ErrorHistoryCounter < 8)
 806578e:	4b41      	ldr	r3, [pc, #260]	@ (8065894 <EcuM_ProcessFaultState+0x3b0>)
 8065790:	781b      	ldrb	r3, [r3, #0]
 8065792:	2b07      	cmp	r3, #7
 8065794:	d80c      	bhi.n	80657b0 <EcuM_ProcessFaultState+0x2cc>
				{
					EcuM_ErrorHistory[EcuM_ErrorHistoryCounter] = TIM_ERROR_H;
 8065796:	4b3f      	ldr	r3, [pc, #252]	@ (8065894 <EcuM_ProcessFaultState+0x3b0>)
 8065798:	781b      	ldrb	r3, [r3, #0]
 806579a:	461a      	mov	r2, r3
 806579c:	4b3e      	ldr	r3, [pc, #248]	@ (8065898 <EcuM_ProcessFaultState+0x3b4>)
 806579e:	2115      	movs	r1, #21
 80657a0:	5499      	strb	r1, [r3, r2]
					EcuM_ErrorHistoryCounter++;
 80657a2:	4b3c      	ldr	r3, [pc, #240]	@ (8065894 <EcuM_ProcessFaultState+0x3b0>)
 80657a4:	781b      	ldrb	r3, [r3, #0]
 80657a6:	3301      	adds	r3, #1
 80657a8:	b2da      	uxtb	r2, r3
 80657aa:	4b3a      	ldr	r3, [pc, #232]	@ (8065894 <EcuM_ProcessFaultState+0x3b0>)
 80657ac:	701a      	strb	r2, [r3, #0]
 80657ae:	e00e      	b.n	80657ce <EcuM_ProcessFaultState+0x2ea>
				}
				else
				{
					EcuM_ErrorHistoryCounter = 0;
 80657b0:	4b38      	ldr	r3, [pc, #224]	@ (8065894 <EcuM_ProcessFaultState+0x3b0>)
 80657b2:	2200      	movs	r2, #0
 80657b4:	701a      	strb	r2, [r3, #0]
					EcuM_ErrorHistory[EcuM_ErrorHistoryCounter] = TIM_ERROR_H;
 80657b6:	4b37      	ldr	r3, [pc, #220]	@ (8065894 <EcuM_ProcessFaultState+0x3b0>)
 80657b8:	781b      	ldrb	r3, [r3, #0]
 80657ba:	461a      	mov	r2, r3
 80657bc:	4b36      	ldr	r3, [pc, #216]	@ (8065898 <EcuM_ProcessFaultState+0x3b4>)
 80657be:	2115      	movs	r1, #21
 80657c0:	5499      	strb	r1, [r3, r2]
					EcuM_ErrorHistoryCounter++;
 80657c2:	4b34      	ldr	r3, [pc, #208]	@ (8065894 <EcuM_ProcessFaultState+0x3b0>)
 80657c4:	781b      	ldrb	r3, [r3, #0]
 80657c6:	3301      	adds	r3, #1
 80657c8:	b2da      	uxtb	r2, r3
 80657ca:	4b32      	ldr	r3, [pc, #200]	@ (8065894 <EcuM_ProcessFaultState+0x3b0>)
 80657cc:	701a      	strb	r2, [r3, #0]
				}
				Tim_ErrorStatus[i] = 0;
 80657ce:	797b      	ldrb	r3, [r7, #5]
 80657d0:	4a33      	ldr	r2, [pc, #204]	@ (80658a0 <EcuM_ProcessFaultState+0x3bc>)
 80657d2:	2100      	movs	r1, #0
 80657d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(uint8 i = 0; i < 3; i++)
 80657d8:	797b      	ldrb	r3, [r7, #5]
 80657da:	3301      	adds	r3, #1
 80657dc:	717b      	strb	r3, [r7, #5]
 80657de:	797b      	ldrb	r3, [r7, #5]
 80657e0:	2b02      	cmp	r3, #2
 80657e2:	f67f af4c 	bls.w	806567e <EcuM_ProcessFaultState+0x19a>
			{
				/* Do nothing. */
			}
		}
	}
	for(uint8 i = 0; i < 12; i++)
 80657e6:	2300      	movs	r3, #0
 80657e8:	713b      	strb	r3, [r7, #4]
 80657ea:	e04a      	b.n	8065882 <EcuM_ProcessFaultState+0x39e>
	{
		if(EcuMSystem_OvwArr.resetArr[i].counter != 0)
 80657ec:	793b      	ldrb	r3, [r7, #4]
 80657ee:	4a2d      	ldr	r2, [pc, #180]	@ (80658a4 <EcuM_ProcessFaultState+0x3c0>)
 80657f0:	3307      	adds	r3, #7
 80657f2:	00db      	lsls	r3, r3, #3
 80657f4:	4413      	add	r3, r2
 80657f6:	685b      	ldr	r3, [r3, #4]
 80657f8:	2b00      	cmp	r3, #0
 80657fa:	d035      	beq.n	8065868 <EcuM_ProcessFaultState+0x384>
		{
			Dem_SaveDtc(10, 0xC);
 80657fc:	210c      	movs	r1, #12
 80657fe:	200a      	movs	r0, #10
 8065800:	f7ff f822 	bl	8064848 <Dem_SaveDtc>
			if(EcuM_ErrorHistoryCounter < 8)
 8065804:	4b23      	ldr	r3, [pc, #140]	@ (8065894 <EcuM_ProcessFaultState+0x3b0>)
 8065806:	781b      	ldrb	r3, [r3, #0]
 8065808:	2b07      	cmp	r3, #7
 806580a:	d811      	bhi.n	8065830 <EcuM_ProcessFaultState+0x34c>
			{
				EcuM_ErrorHistory[EcuM_ErrorHistoryCounter] = EcuMSystem_OvwArr.resetArr[i].reset - 11;
 806580c:	793b      	ldrb	r3, [r7, #4]
 806580e:	4a25      	ldr	r2, [pc, #148]	@ (80658a4 <EcuM_ProcessFaultState+0x3c0>)
 8065810:	3307      	adds	r3, #7
 8065812:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8065816:	4a1f      	ldr	r2, [pc, #124]	@ (8065894 <EcuM_ProcessFaultState+0x3b0>)
 8065818:	7812      	ldrb	r2, [r2, #0]
 806581a:	3b0b      	subs	r3, #11
 806581c:	b2d9      	uxtb	r1, r3
 806581e:	4b1e      	ldr	r3, [pc, #120]	@ (8065898 <EcuM_ProcessFaultState+0x3b4>)
 8065820:	5499      	strb	r1, [r3, r2]
				EcuM_ErrorHistoryCounter++;
 8065822:	4b1c      	ldr	r3, [pc, #112]	@ (8065894 <EcuM_ProcessFaultState+0x3b0>)
 8065824:	781b      	ldrb	r3, [r3, #0]
 8065826:	3301      	adds	r3, #1
 8065828:	b2da      	uxtb	r2, r3
 806582a:	4b1a      	ldr	r3, [pc, #104]	@ (8065894 <EcuM_ProcessFaultState+0x3b0>)
 806582c:	701a      	strb	r2, [r3, #0]
 806582e:	e013      	b.n	8065858 <EcuM_ProcessFaultState+0x374>
			}
			else
			{
				EcuM_ErrorHistoryCounter = 0;
 8065830:	4b18      	ldr	r3, [pc, #96]	@ (8065894 <EcuM_ProcessFaultState+0x3b0>)
 8065832:	2200      	movs	r2, #0
 8065834:	701a      	strb	r2, [r3, #0]
				EcuM_ErrorHistory[EcuM_ErrorHistoryCounter] = EcuMSystem_OvwArr.resetArr[i].reset - 11;
 8065836:	793b      	ldrb	r3, [r7, #4]
 8065838:	4a1a      	ldr	r2, [pc, #104]	@ (80658a4 <EcuM_ProcessFaultState+0x3c0>)
 806583a:	3307      	adds	r3, #7
 806583c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8065840:	4a14      	ldr	r2, [pc, #80]	@ (8065894 <EcuM_ProcessFaultState+0x3b0>)
 8065842:	7812      	ldrb	r2, [r2, #0]
 8065844:	3b0b      	subs	r3, #11
 8065846:	b2d9      	uxtb	r1, r3
 8065848:	4b13      	ldr	r3, [pc, #76]	@ (8065898 <EcuM_ProcessFaultState+0x3b4>)
 806584a:	5499      	strb	r1, [r3, r2]
				EcuM_ErrorHistoryCounter++;
 806584c:	4b11      	ldr	r3, [pc, #68]	@ (8065894 <EcuM_ProcessFaultState+0x3b0>)
 806584e:	781b      	ldrb	r3, [r3, #0]
 8065850:	3301      	adds	r3, #1
 8065852:	b2da      	uxtb	r2, r3
 8065854:	4b0f      	ldr	r3, [pc, #60]	@ (8065894 <EcuM_ProcessFaultState+0x3b0>)
 8065856:	701a      	strb	r2, [r3, #0]
			}
			EcuMSystem_OvwArr.resetArr[i].counter = 0;
 8065858:	793b      	ldrb	r3, [r7, #4]
 806585a:	4a12      	ldr	r2, [pc, #72]	@ (80658a4 <EcuM_ProcessFaultState+0x3c0>)
 806585c:	3307      	adds	r3, #7
 806585e:	00db      	lsls	r3, r3, #3
 8065860:	4413      	add	r3, r2
 8065862:	2200      	movs	r2, #0
 8065864:	605a      	str	r2, [r3, #4]
 8065866:	e009      	b.n	806587c <EcuM_ProcessFaultState+0x398>
		}
		else
		{
			localCounter++;
 8065868:	79fb      	ldrb	r3, [r7, #7]
 806586a:	3301      	adds	r3, #1
 806586c:	71fb      	strb	r3, [r7, #7]
			if(localCounter == 12) Dem_SaveDtc(10, 0);
 806586e:	79fb      	ldrb	r3, [r7, #7]
 8065870:	2b0c      	cmp	r3, #12
 8065872:	d103      	bne.n	806587c <EcuM_ProcessFaultState+0x398>
 8065874:	2100      	movs	r1, #0
 8065876:	200a      	movs	r0, #10
 8065878:	f7fe ffe6 	bl	8064848 <Dem_SaveDtc>
	for(uint8 i = 0; i < 12; i++)
 806587c:	793b      	ldrb	r3, [r7, #4]
 806587e:	3301      	adds	r3, #1
 8065880:	713b      	strb	r3, [r7, #4]
 8065882:	793b      	ldrb	r3, [r7, #4]
 8065884:	2b0b      	cmp	r3, #11
 8065886:	d9b1      	bls.n	80657ec <EcuM_ProcessFaultState+0x308>
			{
				/* Do nothing. */
			}
		}
	}
}
 8065888:	bf00      	nop
 806588a:	bf00      	nop
 806588c:	3708      	adds	r7, #8
 806588e:	46bd      	mov	sp, r7
 8065890:	bd80      	pop	{r7, pc}
 8065892:	bf00      	nop
 8065894:	2001fe51 	.word	0x2001fe51
 8065898:	2001fdb0 	.word	0x2001fdb0
 806589c:	200105fc 	.word	0x200105fc
 80658a0:	2001061c 	.word	0x2001061c
 80658a4:	2001fdc0 	.word	0x2001fdc0

080658a8 <EcuM_ProcessEcuState>:
void EcuM_ProcessEcuState(void)
{
 80658a8:	b580      	push	{r7, lr}
 80658aa:	af00      	add	r7, sp, #0
	if(EcuM_State == PRESLEEP) EcuM_GoSleep();
 80658ac:	4b2c      	ldr	r3, [pc, #176]	@ (8065960 <EcuM_ProcessEcuState+0xb8>)
 80658ae:	781b      	ldrb	r3, [r3, #0]
 80658b0:	2b04      	cmp	r3, #4
 80658b2:	d101      	bne.n	80658b8 <EcuM_ProcessEcuState+0x10>
 80658b4:	f000 f860 	bl	8065978 <EcuM_GoSleep>
	else
	{
		/* Do nothing. */
	}
	if(EcuM_State == STARTUP)
 80658b8:	4b29      	ldr	r3, [pc, #164]	@ (8065960 <EcuM_ProcessEcuState+0xb8>)
 80658ba:	781b      	ldrb	r3, [r3, #0]
 80658bc:	2b00      	cmp	r3, #0
 80658be:	d105      	bne.n	80658cc <EcuM_ProcessEcuState+0x24>
	{
		EcuM_State = RUN;
 80658c0:	4b27      	ldr	r3, [pc, #156]	@ (8065960 <EcuM_ProcessEcuState+0xb8>)
 80658c2:	2202      	movs	r2, #2
 80658c4:	701a      	strb	r2, [r3, #0]
		EcuM_PostrunTimer = 0;
 80658c6:	4b27      	ldr	r3, [pc, #156]	@ (8065964 <EcuM_ProcessEcuState+0xbc>)
 80658c8:	2200      	movs	r2, #0
 80658ca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		/* Do nothing. */
	}
	if(((CanSpi_Communication_Status == FULL_COMMUNICATION) || (Ain_Mux[3] >= 400) || (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1)))
 80658cc:	4b26      	ldr	r3, [pc, #152]	@ (8065968 <EcuM_ProcessEcuState+0xc0>)
 80658ce:	781b      	ldrb	r3, [r3, #0]
 80658d0:	2b02      	cmp	r3, #2
 80658d2:	d00b      	beq.n	80658ec <EcuM_ProcessEcuState+0x44>
 80658d4:	4b25      	ldr	r3, [pc, #148]	@ (806596c <EcuM_ProcessEcuState+0xc4>)
 80658d6:	88db      	ldrh	r3, [r3, #6]
 80658d8:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80658dc:	d206      	bcs.n	80658ec <EcuM_ProcessEcuState+0x44>
 80658de:	2101      	movs	r1, #1
 80658e0:	4823      	ldr	r0, [pc, #140]	@ (8065970 <EcuM_ProcessEcuState+0xc8>)
 80658e2:	f003 faad 	bl	8068e40 <HAL_GPIO_ReadPin>
 80658e6:	4603      	mov	r3, r0
 80658e8:	2b01      	cmp	r3, #1
 80658ea:	d105      	bne.n	80658f8 <EcuM_ProcessEcuState+0x50>
	{
		EcuM_State = RUN;
 80658ec:	4b1c      	ldr	r3, [pc, #112]	@ (8065960 <EcuM_ProcessEcuState+0xb8>)
 80658ee:	2202      	movs	r2, #2
 80658f0:	701a      	strb	r2, [r3, #0]
		EcuM_PostrunTimer = 0;
 80658f2:	4b1c      	ldr	r3, [pc, #112]	@ (8065964 <EcuM_ProcessEcuState+0xbc>)
 80658f4:	2200      	movs	r2, #0
 80658f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		/* Do nothing. */
	}
	if((CanSpi_Communication_Status == NO_COMMUNICATION) && (Ain_Mux[3] < 400) && (EcuM_State == RUN) && (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 0)) EcuM_State = POSTRUN;
 80658f8:	4b1b      	ldr	r3, [pc, #108]	@ (8065968 <EcuM_ProcessEcuState+0xc0>)
 80658fa:	781b      	ldrb	r3, [r3, #0]
 80658fc:	2b00      	cmp	r3, #0
 80658fe:	d112      	bne.n	8065926 <EcuM_ProcessEcuState+0x7e>
 8065900:	4b1a      	ldr	r3, [pc, #104]	@ (806596c <EcuM_ProcessEcuState+0xc4>)
 8065902:	88db      	ldrh	r3, [r3, #6]
 8065904:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8065908:	d20d      	bcs.n	8065926 <EcuM_ProcessEcuState+0x7e>
 806590a:	4b15      	ldr	r3, [pc, #84]	@ (8065960 <EcuM_ProcessEcuState+0xb8>)
 806590c:	781b      	ldrb	r3, [r3, #0]
 806590e:	2b02      	cmp	r3, #2
 8065910:	d109      	bne.n	8065926 <EcuM_ProcessEcuState+0x7e>
 8065912:	2101      	movs	r1, #1
 8065914:	4816      	ldr	r0, [pc, #88]	@ (8065970 <EcuM_ProcessEcuState+0xc8>)
 8065916:	f003 fa93 	bl	8068e40 <HAL_GPIO_ReadPin>
 806591a:	4603      	mov	r3, r0
 806591c:	2b00      	cmp	r3, #0
 806591e:	d102      	bne.n	8065926 <EcuM_ProcessEcuState+0x7e>
 8065920:	4b0f      	ldr	r3, [pc, #60]	@ (8065960 <EcuM_ProcessEcuState+0xb8>)
 8065922:	2203      	movs	r2, #3
 8065924:	701a      	strb	r2, [r3, #0]
	else
	{
		/* Do nothing. */
	}
	if(EcuM_State == POSTRUN)
 8065926:	4b0e      	ldr	r3, [pc, #56]	@ (8065960 <EcuM_ProcessEcuState+0xb8>)
 8065928:	781b      	ldrb	r3, [r3, #0]
 806592a:	2b03      	cmp	r3, #3
 806592c:	d116      	bne.n	806595c <EcuM_ProcessEcuState+0xb4>
	{
		if(EcuM_PostrunTimer == 0) EcuM_PostrunTimer = EcuM_MainCounter;
 806592e:	4b0d      	ldr	r3, [pc, #52]	@ (8065964 <EcuM_ProcessEcuState+0xbc>)
 8065930:	681b      	ldr	r3, [r3, #0]
 8065932:	2b00      	cmp	r3, #0
 8065934:	d103      	bne.n	806593e <EcuM_ProcessEcuState+0x96>
 8065936:	4b0f      	ldr	r3, [pc, #60]	@ (8065974 <EcuM_ProcessEcuState+0xcc>)
 8065938:	681b      	ldr	r3, [r3, #0]
 806593a:	4a0a      	ldr	r2, [pc, #40]	@ (8065964 <EcuM_ProcessEcuState+0xbc>)
 806593c:	6013      	str	r3, [r2, #0]
		else
		{
			/* Do nothing. */
		}
		if(((EcuM_MainCounter - EcuM_PostrunTimer) > 2000) && (EcuM_PostrunTimer != 0)) EcuM_State = PRESLEEP;
 806593e:	4b0d      	ldr	r3, [pc, #52]	@ (8065974 <EcuM_ProcessEcuState+0xcc>)
 8065940:	681a      	ldr	r2, [r3, #0]
 8065942:	4b08      	ldr	r3, [pc, #32]	@ (8065964 <EcuM_ProcessEcuState+0xbc>)
 8065944:	681b      	ldr	r3, [r3, #0]
 8065946:	1ad3      	subs	r3, r2, r3
 8065948:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 806594c:	d906      	bls.n	806595c <EcuM_ProcessEcuState+0xb4>
 806594e:	4b05      	ldr	r3, [pc, #20]	@ (8065964 <EcuM_ProcessEcuState+0xbc>)
 8065950:	681b      	ldr	r3, [r3, #0]
 8065952:	2b00      	cmp	r3, #0
 8065954:	d002      	beq.n	806595c <EcuM_ProcessEcuState+0xb4>
 8065956:	4b02      	ldr	r3, [pc, #8]	@ (8065960 <EcuM_ProcessEcuState+0xb8>)
 8065958:	2204      	movs	r2, #4
 806595a:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* Do nothing. */
	}
}
 806595c:	bf00      	nop
 806595e:	bd80      	pop	{r7, pc}
 8065960:	20010821 	.word	0x20010821
 8065964:	20010828 	.word	0x20010828
 8065968:	20010348 	.word	0x20010348
 806596c:	200105e8 	.word	0x200105e8
 8065970:	40020000 	.word	0x40020000
 8065974:	20010824 	.word	0x20010824

08065978 <EcuM_GoSleep>:

void EcuM_GoSleep(void)
{
 8065978:	b580      	push	{r7, lr}
 806597a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 806597c:	b672      	cpsid	i
}
 806597e:	bf00      	nop
	__disable_irq();
	CanSpi_Sleep();
 8065980:	f7fb ffe0 	bl	8061944 <CanSpi_Sleep>
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8065984:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8065988:	f003 faa6 	bl	8068ed8 <HAL_PWR_EnableWakeUpPin>
	HAL_PWR_EnterSTANDBYMode();
 806598c:	f003 fac0 	bl	8068f10 <HAL_PWR_EnterSTANDBYMode>
}
 8065990:	bf00      	nop
 8065992:	bd80      	pop	{r7, pc}

08065994 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8065994:	b580      	push	{r7, lr}
 8065996:	b084      	sub	sp, #16
 8065998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 806599a:	463b      	mov	r3, r7
 806599c:	2200      	movs	r2, #0
 806599e:	601a      	str	r2, [r3, #0]
 80659a0:	605a      	str	r2, [r3, #4]
 80659a2:	609a      	str	r2, [r3, #8]
 80659a4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */
  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80659a6:	4b21      	ldr	r3, [pc, #132]	@ (8065a2c <MX_ADC1_Init+0x98>)
 80659a8:	4a21      	ldr	r2, [pc, #132]	@ (8065a30 <MX_ADC1_Init+0x9c>)
 80659aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80659ac:	4b1f      	ldr	r3, [pc, #124]	@ (8065a2c <MX_ADC1_Init+0x98>)
 80659ae:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80659b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80659b4:	4b1d      	ldr	r3, [pc, #116]	@ (8065a2c <MX_ADC1_Init+0x98>)
 80659b6:	2200      	movs	r2, #0
 80659b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80659ba:	4b1c      	ldr	r3, [pc, #112]	@ (8065a2c <MX_ADC1_Init+0x98>)
 80659bc:	2200      	movs	r2, #0
 80659be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80659c0:	4b1a      	ldr	r3, [pc, #104]	@ (8065a2c <MX_ADC1_Init+0x98>)
 80659c2:	2200      	movs	r2, #0
 80659c4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80659c6:	4b19      	ldr	r3, [pc, #100]	@ (8065a2c <MX_ADC1_Init+0x98>)
 80659c8:	2200      	movs	r2, #0
 80659ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80659ce:	4b17      	ldr	r3, [pc, #92]	@ (8065a2c <MX_ADC1_Init+0x98>)
 80659d0:	2200      	movs	r2, #0
 80659d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80659d4:	4b15      	ldr	r3, [pc, #84]	@ (8065a2c <MX_ADC1_Init+0x98>)
 80659d6:	4a17      	ldr	r2, [pc, #92]	@ (8065a34 <MX_ADC1_Init+0xa0>)
 80659d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80659da:	4b14      	ldr	r3, [pc, #80]	@ (8065a2c <MX_ADC1_Init+0x98>)
 80659dc:	2200      	movs	r2, #0
 80659de:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80659e0:	4b12      	ldr	r3, [pc, #72]	@ (8065a2c <MX_ADC1_Init+0x98>)
 80659e2:	2201      	movs	r2, #1
 80659e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80659e6:	4b11      	ldr	r3, [pc, #68]	@ (8065a2c <MX_ADC1_Init+0x98>)
 80659e8:	2200      	movs	r2, #0
 80659ea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80659ee:	4b0f      	ldr	r3, [pc, #60]	@ (8065a2c <MX_ADC1_Init+0x98>)
 80659f0:	2201      	movs	r2, #1
 80659f2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80659f4:	480d      	ldr	r0, [pc, #52]	@ (8065a2c <MX_ADC1_Init+0x98>)
 80659f6:	f001 fab7 	bl	8066f68 <HAL_ADC_Init>
 80659fa:	4603      	mov	r3, r0
 80659fc:	2b00      	cmp	r3, #0
 80659fe:	d001      	beq.n	8065a04 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8065a00:	f000 fd1a 	bl	8066438 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8065a04:	2304      	movs	r3, #4
 8065a06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8065a08:	2301      	movs	r3, #1
 8065a0a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8065a0c:	2307      	movs	r3, #7
 8065a0e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8065a10:	463b      	mov	r3, r7
 8065a12:	4619      	mov	r1, r3
 8065a14:	4805      	ldr	r0, [pc, #20]	@ (8065a2c <MX_ADC1_Init+0x98>)
 8065a16:	f001 feb9 	bl	806778c <HAL_ADC_ConfigChannel>
 8065a1a:	4603      	mov	r3, r0
 8065a1c:	2b00      	cmp	r3, #0
 8065a1e:	d001      	beq.n	8065a24 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8065a20:	f000 fd0a 	bl	8066438 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  /* USER CODE END ADC1_Init 2 */

}
 8065a24:	bf00      	nop
 8065a26:	3710      	adds	r7, #16
 8065a28:	46bd      	mov	sp, r7
 8065a2a:	bd80      	pop	{r7, pc}
 8065a2c:	2001082c 	.word	0x2001082c
 8065a30:	40012000 	.word	0x40012000
 8065a34:	0f000001 	.word	0x0f000001

08065a38 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8065a38:	b580      	push	{r7, lr}
 8065a3a:	b08a      	sub	sp, #40	@ 0x28
 8065a3c:	af00      	add	r7, sp, #0
 8065a3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8065a40:	f107 0314 	add.w	r3, r7, #20
 8065a44:	2200      	movs	r2, #0
 8065a46:	601a      	str	r2, [r3, #0]
 8065a48:	605a      	str	r2, [r3, #4]
 8065a4a:	609a      	str	r2, [r3, #8]
 8065a4c:	60da      	str	r2, [r3, #12]
 8065a4e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8065a50:	687b      	ldr	r3, [r7, #4]
 8065a52:	681b      	ldr	r3, [r3, #0]
 8065a54:	4a17      	ldr	r2, [pc, #92]	@ (8065ab4 <HAL_ADC_MspInit+0x7c>)
 8065a56:	4293      	cmp	r3, r2
 8065a58:	d127      	bne.n	8065aaa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */
  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8065a5a:	2300      	movs	r3, #0
 8065a5c:	613b      	str	r3, [r7, #16]
 8065a5e:	4b16      	ldr	r3, [pc, #88]	@ (8065ab8 <HAL_ADC_MspInit+0x80>)
 8065a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8065a62:	4a15      	ldr	r2, [pc, #84]	@ (8065ab8 <HAL_ADC_MspInit+0x80>)
 8065a64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8065a68:	6453      	str	r3, [r2, #68]	@ 0x44
 8065a6a:	4b13      	ldr	r3, [pc, #76]	@ (8065ab8 <HAL_ADC_MspInit+0x80>)
 8065a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8065a6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8065a72:	613b      	str	r3, [r7, #16]
 8065a74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8065a76:	2300      	movs	r3, #0
 8065a78:	60fb      	str	r3, [r7, #12]
 8065a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8065ab8 <HAL_ADC_MspInit+0x80>)
 8065a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8065a7e:	4a0e      	ldr	r2, [pc, #56]	@ (8065ab8 <HAL_ADC_MspInit+0x80>)
 8065a80:	f043 0301 	orr.w	r3, r3, #1
 8065a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8065a86:	4b0c      	ldr	r3, [pc, #48]	@ (8065ab8 <HAL_ADC_MspInit+0x80>)
 8065a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8065a8a:	f003 0301 	and.w	r3, r3, #1
 8065a8e:	60fb      	str	r3, [r7, #12]
 8065a90:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = SIGADCMUX_Pin;
 8065a92:	2310      	movs	r3, #16
 8065a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8065a96:	2303      	movs	r3, #3
 8065a98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8065a9a:	2300      	movs	r3, #0
 8065a9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SIGADCMUX_GPIO_Port, &GPIO_InitStruct);
 8065a9e:	f107 0314 	add.w	r3, r7, #20
 8065aa2:	4619      	mov	r1, r3
 8065aa4:	4805      	ldr	r0, [pc, #20]	@ (8065abc <HAL_ADC_MspInit+0x84>)
 8065aa6:	f002 ff33 	bl	8068910 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */
  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8065aaa:	bf00      	nop
 8065aac:	3728      	adds	r7, #40	@ 0x28
 8065aae:	46bd      	mov	sp, r7
 8065ab0:	bd80      	pop	{r7, pc}
 8065ab2:	bf00      	nop
 8065ab4:	40012000 	.word	0x40012000
 8065ab8:	40023800 	.word	0x40023800
 8065abc:	40020000 	.word	0x40020000

08065ac0 <configureTimerForRunTimeStats>:
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 1 */
volatile unsigned long ulHighFrequencyTimerTicks;
void configureTimerForRunTimeStats(void)
{
 8065ac0:	b580      	push	{r7, lr}
 8065ac2:	af00      	add	r7, sp, #0
	ulHighFrequencyTimerTicks = 0;
 8065ac4:	4b03      	ldr	r3, [pc, #12]	@ (8065ad4 <configureTimerForRunTimeStats+0x14>)
 8065ac6:	2200      	movs	r2, #0
 8065ac8:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim9);
 8065aca:	4803      	ldr	r0, [pc, #12]	@ (8065ad8 <configureTimerForRunTimeStats+0x18>)
 8065acc:	f005 fa12 	bl	806aef4 <HAL_TIM_Base_Start_IT>
}
 8065ad0:	bf00      	nop
 8065ad2:	bd80      	pop	{r7, pc}
 8065ad4:	20010a34 	.word	0x20010a34
 8065ad8:	20010cd8 	.word	0x20010cd8

08065adc <getRunTimeCounterValue>:
unsigned long getRunTimeCounterValue(void)
{
 8065adc:	b480      	push	{r7}
 8065ade:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 8065ae0:	4b03      	ldr	r3, [pc, #12]	@ (8065af0 <getRunTimeCounterValue+0x14>)
 8065ae2:	681b      	ldr	r3, [r3, #0]
}
 8065ae4:	4618      	mov	r0, r3
 8065ae6:	46bd      	mov	sp, r7
 8065ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8065aec:	4770      	bx	lr
 8065aee:	bf00      	nop
 8065af0:	20010a34 	.word	0x20010a34

08065af4 <vApplicationIdleHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 8065af4:	b580      	push	{r7, lr}
 8065af6:	af00      	add	r7, sp, #0
	IDLE_Counter++;
 8065af8:	4b09      	ldr	r3, [pc, #36]	@ (8065b20 <vApplicationIdleHook+0x2c>)
 8065afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8065afe:	1c50      	adds	r0, r2, #1
 8065b00:	f143 0100 	adc.w	r1, r3, #0
 8065b04:	4b06      	ldr	r3, [pc, #24]	@ (8065b20 <vApplicationIdleHook+0x2c>)
 8065b06:	e9c3 0100 	strd	r0, r1, [r3]
	uxArraySize = uxTaskGetSystemState(xTaskStatusArray, 8, &ulTotalRunTime);
 8065b0a:	4a06      	ldr	r2, [pc, #24]	@ (8065b24 <vApplicationIdleHook+0x30>)
 8065b0c:	2108      	movs	r1, #8
 8065b0e:	4806      	ldr	r0, [pc, #24]	@ (8065b28 <vApplicationIdleHook+0x34>)
 8065b10:	f00a f8fc 	bl	806fd0c <uxTaskGetSystemState>
 8065b14:	4603      	mov	r3, r0
 8065b16:	4a05      	ldr	r2, [pc, #20]	@ (8065b2c <vApplicationIdleHook+0x38>)
 8065b18:	6013      	str	r3, [r2, #0]
}
 8065b1a:	bf00      	nop
 8065b1c:	bd80      	pop	{r7, pc}
 8065b1e:	bf00      	nop
 8065b20:	200108a0 	.word	0x200108a0
 8065b24:	200109cc 	.word	0x200109cc
 8065b28:	200108a8 	.word	0x200108a8
 8065b2c:	200109c8 	.word	0x200109c8

08065b30 <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 8065b30:	b480      	push	{r7}
 8065b32:	af00      	add	r7, sp, #0
	OS_Counter++;
 8065b34:	4b06      	ldr	r3, [pc, #24]	@ (8065b50 <vApplicationTickHook+0x20>)
 8065b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8065b3a:	1c50      	adds	r0, r2, #1
 8065b3c:	f143 0100 	adc.w	r1, r3, #0
 8065b40:	4b03      	ldr	r3, [pc, #12]	@ (8065b50 <vApplicationTickHook+0x20>)
 8065b42:	e9c3 0100 	strd	r0, r1, [r3]
}
 8065b46:	bf00      	nop
 8065b48:	46bd      	mov	sp, r7
 8065b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8065b4e:	4770      	bx	lr
 8065b50:	20010898 	.word	0x20010898

08065b54 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8065b54:	b580      	push	{r7, lr}
 8065b56:	b082      	sub	sp, #8
 8065b58:	af00      	add	r7, sp, #0
 8065b5a:	6078      	str	r0, [r7, #4]
 8065b5c:	6039      	str	r1, [r7, #0]
	EcuM_PerformReset(STACKOVERFLOW_RESET);
 8065b5e:	2023      	movs	r0, #35	@ 0x23
 8065b60:	f7ff fc9a 	bl	8065498 <EcuM_PerformReset>
}
 8065b64:	bf00      	nop
 8065b66:	3708      	adds	r7, #8
 8065b68:	46bd      	mov	sp, r7
 8065b6a:	bd80      	pop	{r7, pc}

08065b6c <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 8065b6c:	b580      	push	{r7, lr}
 8065b6e:	af00      	add	r7, sp, #0
	EcuM_PerformReset(MALLOC_RESET);
 8065b70:	2022      	movs	r0, #34	@ 0x22
 8065b72:	f7ff fc91 	bl	8065498 <EcuM_PerformReset>
}
 8065b76:	bf00      	nop
 8065b78:	bd80      	pop	{r7, pc}
	...

08065b7c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8065b7c:	b580      	push	{r7, lr}
 8065b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of Alarm5ms */
  Alarm5msHandle = osTimerNew(Alarm5ms_Callback, osTimerPeriodic, NULL, &Alarm5ms_attributes);
 8065b80:	4b33      	ldr	r3, [pc, #204]	@ (8065c50 <MX_FREERTOS_Init+0xd4>)
 8065b82:	2200      	movs	r2, #0
 8065b84:	2101      	movs	r1, #1
 8065b86:	4833      	ldr	r0, [pc, #204]	@ (8065c54 <MX_FREERTOS_Init+0xd8>)
 8065b88:	f008 f97a 	bl	806de80 <osTimerNew>
 8065b8c:	4603      	mov	r3, r0
 8065b8e:	4a32      	ldr	r2, [pc, #200]	@ (8065c58 <MX_FREERTOS_Init+0xdc>)
 8065b90:	6013      	str	r3, [r2, #0]

  /* creation of Alarm10ms */
  Alarm10msHandle = osTimerNew(Alarm10ms_Callback, osTimerPeriodic, NULL, &Alarm10ms_attributes);
 8065b92:	4b32      	ldr	r3, [pc, #200]	@ (8065c5c <MX_FREERTOS_Init+0xe0>)
 8065b94:	2200      	movs	r2, #0
 8065b96:	2101      	movs	r1, #1
 8065b98:	4831      	ldr	r0, [pc, #196]	@ (8065c60 <MX_FREERTOS_Init+0xe4>)
 8065b9a:	f008 f971 	bl	806de80 <osTimerNew>
 8065b9e:	4603      	mov	r3, r0
 8065ba0:	4a30      	ldr	r2, [pc, #192]	@ (8065c64 <MX_FREERTOS_Init+0xe8>)
 8065ba2:	6013      	str	r3, [r2, #0]

  /* creation of Alarm100ms */
  Alarm100msHandle = osTimerNew(Alarm100ms_Callback, osTimerPeriodic, NULL, &Alarm100ms_attributes);
 8065ba4:	4b30      	ldr	r3, [pc, #192]	@ (8065c68 <MX_FREERTOS_Init+0xec>)
 8065ba6:	2200      	movs	r2, #0
 8065ba8:	2101      	movs	r1, #1
 8065baa:	4830      	ldr	r0, [pc, #192]	@ (8065c6c <MX_FREERTOS_Init+0xf0>)
 8065bac:	f008 f968 	bl	806de80 <osTimerNew>
 8065bb0:	4603      	mov	r3, r0
 8065bb2:	4a2f      	ldr	r2, [pc, #188]	@ (8065c70 <MX_FREERTOS_Init+0xf4>)
 8065bb4:	6013      	str	r3, [r2, #0]

  /* creation of Alarm40ms */
  Alarm40msHandle = osTimerNew(Alarm40ms_Calback, osTimerPeriodic, NULL, &Alarm40ms_attributes);
 8065bb6:	4b2f      	ldr	r3, [pc, #188]	@ (8065c74 <MX_FREERTOS_Init+0xf8>)
 8065bb8:	2200      	movs	r2, #0
 8065bba:	2101      	movs	r1, #1
 8065bbc:	482e      	ldr	r0, [pc, #184]	@ (8065c78 <MX_FREERTOS_Init+0xfc>)
 8065bbe:	f008 f95f 	bl	806de80 <osTimerNew>
 8065bc2:	4603      	mov	r3, r0
 8065bc4:	4a2d      	ldr	r2, [pc, #180]	@ (8065c7c <MX_FREERTOS_Init+0x100>)
 8065bc6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
	osTimerStart(Alarm5msHandle, 5);
 8065bc8:	4b23      	ldr	r3, [pc, #140]	@ (8065c58 <MX_FREERTOS_Init+0xdc>)
 8065bca:	681b      	ldr	r3, [r3, #0]
 8065bcc:	2105      	movs	r1, #5
 8065bce:	4618      	mov	r0, r3
 8065bd0:	f008 f9d2 	bl	806df78 <osTimerStart>
	osTimerStart(Alarm10msHandle, 10);
 8065bd4:	4b23      	ldr	r3, [pc, #140]	@ (8065c64 <MX_FREERTOS_Init+0xe8>)
 8065bd6:	681b      	ldr	r3, [r3, #0]
 8065bd8:	210a      	movs	r1, #10
 8065bda:	4618      	mov	r0, r3
 8065bdc:	f008 f9cc 	bl	806df78 <osTimerStart>
	osTimerStart(Alarm100msHandle, 100);
 8065be0:	4b23      	ldr	r3, [pc, #140]	@ (8065c70 <MX_FREERTOS_Init+0xf4>)
 8065be2:	681b      	ldr	r3, [r3, #0]
 8065be4:	2164      	movs	r1, #100	@ 0x64
 8065be6:	4618      	mov	r0, r3
 8065be8:	f008 f9c6 	bl	806df78 <osTimerStart>
	osTimerStart(Alarm40msHandle, 40);
 8065bec:	4b23      	ldr	r3, [pc, #140]	@ (8065c7c <MX_FREERTOS_Init+0x100>)
 8065bee:	681b      	ldr	r3, [r3, #0]
 8065bf0:	2128      	movs	r1, #40	@ 0x28
 8065bf2:	4618      	mov	r0, r3
 8065bf4:	f008 f9c0 	bl	806df78 <osTimerStart>
	NvM_MainFunction();
 8065bf8:	f7ff fb70 	bl	80652dc <NvM_MainFunction>
  /* USER CODE BEGIN RTOS_QUEUES */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of QM_APPL_OS_TASK */
  QM_APPL_OS_TASKHandle = osThreadNew(QM_APPL, NULL, &QM_APPL_OS_TASK_attributes);
 8065bfc:	4a20      	ldr	r2, [pc, #128]	@ (8065c80 <MX_FREERTOS_Init+0x104>)
 8065bfe:	2100      	movs	r1, #0
 8065c00:	4820      	ldr	r0, [pc, #128]	@ (8065c84 <MX_FREERTOS_Init+0x108>)
 8065c02:	f008 f895 	bl	806dd30 <osThreadNew>
 8065c06:	4603      	mov	r3, r0
 8065c08:	4a1f      	ldr	r2, [pc, #124]	@ (8065c88 <MX_FREERTOS_Init+0x10c>)
 8065c0a:	6013      	str	r3, [r2, #0]

  /* creation of QM_BSW_OS_TASK */
  QM_BSW_OS_TASKHandle = osThreadNew(QM_BSW, NULL, &QM_BSW_OS_TASK_attributes);
 8065c0c:	4a1f      	ldr	r2, [pc, #124]	@ (8065c8c <MX_FREERTOS_Init+0x110>)
 8065c0e:	2100      	movs	r1, #0
 8065c10:	481f      	ldr	r0, [pc, #124]	@ (8065c90 <MX_FREERTOS_Init+0x114>)
 8065c12:	f008 f88d 	bl	806dd30 <osThreadNew>
 8065c16:	4603      	mov	r3, r0
 8065c18:	4a1e      	ldr	r2, [pc, #120]	@ (8065c94 <MX_FREERTOS_Init+0x118>)
 8065c1a:	6013      	str	r3, [r2, #0]

  /* creation of QM_NVM_OS_TASK */
  QM_NVM_OS_TASKHandle = osThreadNew(QM_NVM, NULL, &QM_NVM_OS_TASK_attributes);
 8065c1c:	4a1e      	ldr	r2, [pc, #120]	@ (8065c98 <MX_FREERTOS_Init+0x11c>)
 8065c1e:	2100      	movs	r1, #0
 8065c20:	481e      	ldr	r0, [pc, #120]	@ (8065c9c <MX_FREERTOS_Init+0x120>)
 8065c22:	f008 f885 	bl	806dd30 <osThreadNew>
 8065c26:	4603      	mov	r3, r0
 8065c28:	4a1d      	ldr	r2, [pc, #116]	@ (8065ca0 <MX_FREERTOS_Init+0x124>)
 8065c2a:	6013      	str	r3, [r2, #0]

  /* creation of QM_DIAG_OS_TASK */
  QM_DIAG_OS_TASKHandle = osThreadNew(QM_DIAG, NULL, &QM_DIAG_OS_TASK_attributes);
 8065c2c:	4a1d      	ldr	r2, [pc, #116]	@ (8065ca4 <MX_FREERTOS_Init+0x128>)
 8065c2e:	2100      	movs	r1, #0
 8065c30:	481d      	ldr	r0, [pc, #116]	@ (8065ca8 <MX_FREERTOS_Init+0x12c>)
 8065c32:	f008 f87d 	bl	806dd30 <osThreadNew>
 8065c36:	4603      	mov	r3, r0
 8065c38:	4a1c      	ldr	r2, [pc, #112]	@ (8065cac <MX_FREERTOS_Init+0x130>)
 8065c3a:	6013      	str	r3, [r2, #0]

  /* creation of QM_CPULOAD_MONITORING_OS_TASK */
  QM_CPULOAD_MONITORING_OS_TASKHandle = osThreadNew(QM_CPULOAD_MONITORING, NULL, &QM_CPULOAD_MONITORING_OS_TASK_attributes);
 8065c3c:	4a1c      	ldr	r2, [pc, #112]	@ (8065cb0 <MX_FREERTOS_Init+0x134>)
 8065c3e:	2100      	movs	r1, #0
 8065c40:	481c      	ldr	r0, [pc, #112]	@ (8065cb4 <MX_FREERTOS_Init+0x138>)
 8065c42:	f008 f875 	bl	806dd30 <osThreadNew>
 8065c46:	4603      	mov	r3, r0
 8065c48:	4a1b      	ldr	r2, [pc, #108]	@ (8065cb8 <MX_FREERTOS_Init+0x13c>)
 8065c4a:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* USER CODE END RTOS_EVENTS */

}
 8065c4c:	bf00      	nop
 8065c4e:	bd80      	pop	{r7, pc}
 8065c50:	08071a94 	.word	0x08071a94
 8065c54:	08065f19 	.word	0x08065f19
 8065c58:	20010a24 	.word	0x20010a24
 8065c5c:	08071aa4 	.word	0x08071aa4
 8065c60:	08065f65 	.word	0x08065f65
 8065c64:	20010a28 	.word	0x20010a28
 8065c68:	08071ab4 	.word	0x08071ab4
 8065c6c:	08065f99 	.word	0x08065f99
 8065c70:	20010a2c 	.word	0x20010a2c
 8065c74:	08071ac4 	.word	0x08071ac4
 8065c78:	08065fc1 	.word	0x08065fc1
 8065c7c:	20010a30 	.word	0x20010a30
 8065c80:	080719e0 	.word	0x080719e0
 8065c84:	08065cbd 	.word	0x08065cbd
 8065c88:	20010a10 	.word	0x20010a10
 8065c8c:	08071a04 	.word	0x08071a04
 8065c90:	08065d09 	.word	0x08065d09
 8065c94:	20010a14 	.word	0x20010a14
 8065c98:	08071a28 	.word	0x08071a28
 8065c9c:	08065d51 	.word	0x08065d51
 8065ca0:	20010a18 	.word	0x20010a18
 8065ca4:	08071a4c 	.word	0x08071a4c
 8065ca8:	08065d8d 	.word	0x08065d8d
 8065cac:	20010a1c 	.word	0x20010a1c
 8065cb0:	08071a70 	.word	0x08071a70
 8065cb4:	08065dcd 	.word	0x08065dcd
 8065cb8:	20010a20 	.word	0x20010a20

08065cbc <QM_APPL>:

/* USER CODE BEGIN Header_QM_APPL */
/* USER CODE END Header_QM_APPL */
void QM_APPL(void *argument)
{
 8065cbc:	b5b0      	push	{r4, r5, r7, lr}
 8065cbe:	b082      	sub	sp, #8
 8065cc0:	af00      	add	r7, sp, #0
 8065cc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN QM_APPL */
	for(;;)
	{
		if(Alarm10ms_QM_APPL == 1 && EcuM_State == RUN)
 8065cc4:	4b0d      	ldr	r3, [pc, #52]	@ (8065cfc <QM_APPL+0x40>)
 8065cc6:	781b      	ldrb	r3, [r3, #0]
 8065cc8:	2b01      	cmp	r3, #1
 8065cca:	d10a      	bne.n	8065ce2 <QM_APPL+0x26>
 8065ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8065d00 <QM_APPL+0x44>)
 8065cce:	781b      	ldrb	r3, [r3, #0]
 8065cd0:	2b02      	cmp	r3, #2
 8065cd2:	d106      	bne.n	8065ce2 <QM_APPL+0x26>
		{
			ActCtrl_MainFunction();
 8065cd4:	f7fa fcca 	bl	806066c <ActCtrl_MainFunction>
			InputCtrl_MainFunction();
 8065cd8:	f7fa ffd4 	bl	8060c84 <InputCtrl_MainFunction>
			Alarm10ms_QM_APPL = 0;
 8065cdc:	4b07      	ldr	r3, [pc, #28]	@ (8065cfc <QM_APPL+0x40>)
 8065cde:	2200      	movs	r2, #0
 8065ce0:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* Do nothing */
		}
		QM_APPL_Counter++;
 8065ce2:	4b08      	ldr	r3, [pc, #32]	@ (8065d04 <QM_APPL+0x48>)
 8065ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8065ce8:	1c54      	adds	r4, r2, #1
 8065cea:	f143 0500 	adc.w	r5, r3, #0
 8065cee:	4b05      	ldr	r3, [pc, #20]	@ (8065d04 <QM_APPL+0x48>)
 8065cf0:	e9c3 4500 	strd	r4, r5, [r3]
		vTaskSuspend(NULL);
 8065cf4:	2000      	movs	r0, #0
 8065cf6:	f009 fdd1 	bl	806f89c <vTaskSuspend>
		if(Alarm10ms_QM_APPL == 1 && EcuM_State == RUN)
 8065cfa:	e7e3      	b.n	8065cc4 <QM_APPL+0x8>
 8065cfc:	20010893 	.word	0x20010893
 8065d00:	20010821 	.word	0x20010821
 8065d04:	200109e8 	.word	0x200109e8

08065d08 <QM_BSW>:
}

/* USER CODE BEGIN Header_QM_BSW */
/* USER CODE END Header_QM_BSW */
void QM_BSW(void *argument)
{
 8065d08:	b5b0      	push	{r4, r5, r7, lr}
 8065d0a:	b082      	sub	sp, #8
 8065d0c:	af00      	add	r7, sp, #0
 8065d0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN QM_BSW */
	for(;;)
	{
		if(Alarm5ms_QM_BSW == 1)
 8065d10:	4b0d      	ldr	r3, [pc, #52]	@ (8065d48 <QM_BSW+0x40>)
 8065d12:	781b      	ldrb	r3, [r3, #0]
 8065d14:	2b01      	cmp	r3, #1
 8065d16:	d10a      	bne.n	8065d2e <QM_BSW+0x26>
		{
			EcuM_MainFunction();
 8065d18:	f7ff fbae 	bl	8065478 <EcuM_MainFunction>
			Ain_MainFunction();
 8065d1c:	f7fe feb6 	bl	8064a8c <Ain_MainFunction>
			TimH_MainFunction();
 8065d20:	f7ff f86c 	bl	8064dfc <TimH_MainFunction>
			UartH_MainFunction();
 8065d24:	f7fc faf4 	bl	8062310 <UartH_MainFunction>
			Alarm5ms_QM_BSW = 0;
 8065d28:	4b07      	ldr	r3, [pc, #28]	@ (8065d48 <QM_BSW+0x40>)
 8065d2a:	2200      	movs	r2, #0
 8065d2c:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* Do nothing. */
		}
		QM_BSW_Counter++;
 8065d2e:	4b07      	ldr	r3, [pc, #28]	@ (8065d4c <QM_BSW+0x44>)
 8065d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8065d34:	1c54      	adds	r4, r2, #1
 8065d36:	f143 0500 	adc.w	r5, r3, #0
 8065d3a:	4b04      	ldr	r3, [pc, #16]	@ (8065d4c <QM_BSW+0x44>)
 8065d3c:	e9c3 4500 	strd	r4, r5, [r3]
		vTaskSuspend(NULL);
 8065d40:	2000      	movs	r0, #0
 8065d42:	f009 fdab 	bl	806f89c <vTaskSuspend>
		if(Alarm5ms_QM_BSW == 1)
 8065d46:	e7e3      	b.n	8065d10 <QM_BSW+0x8>
 8065d48:	20010891 	.word	0x20010891
 8065d4c:	200109f0 	.word	0x200109f0

08065d50 <QM_NVM>:
}

/* USER CODE BEGIN Header_QM_NVM */
/* USER CODE END Header_QM_NVM */
void QM_NVM(void *argument)
{
 8065d50:	b5b0      	push	{r4, r5, r7, lr}
 8065d52:	b082      	sub	sp, #8
 8065d54:	af00      	add	r7, sp, #0
 8065d56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN QM_NVM */
	for(;;)
	{
		if(Alarm100ms_QM_NVM == 1)
 8065d58:	4b0a      	ldr	r3, [pc, #40]	@ (8065d84 <QM_NVM+0x34>)
 8065d5a:	781b      	ldrb	r3, [r3, #0]
 8065d5c:	2b01      	cmp	r3, #1
 8065d5e:	d104      	bne.n	8065d6a <QM_NVM+0x1a>
		{
			NvM_MainFunction();
 8065d60:	f7ff fabc 	bl	80652dc <NvM_MainFunction>
			Alarm100ms_QM_NVM = 0;
 8065d64:	4b07      	ldr	r3, [pc, #28]	@ (8065d84 <QM_NVM+0x34>)
 8065d66:	2200      	movs	r2, #0
 8065d68:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* Do nothing. */
		}
		QM_NVM_Counter++;
 8065d6a:	4b07      	ldr	r3, [pc, #28]	@ (8065d88 <QM_NVM+0x38>)
 8065d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8065d70:	1c54      	adds	r4, r2, #1
 8065d72:	f143 0500 	adc.w	r5, r3, #0
 8065d76:	4b04      	ldr	r3, [pc, #16]	@ (8065d88 <QM_NVM+0x38>)
 8065d78:	e9c3 4500 	strd	r4, r5, [r3]
		vTaskSuspend(NULL);
 8065d7c:	2000      	movs	r0, #0
 8065d7e:	f009 fd8d 	bl	806f89c <vTaskSuspend>
		if(Alarm100ms_QM_NVM == 1)
 8065d82:	e7e9      	b.n	8065d58 <QM_NVM+0x8>
 8065d84:	20010895 	.word	0x20010895
 8065d88:	200109f8 	.word	0x200109f8

08065d8c <QM_DIAG>:
}

/* USER CODE BEGIN Header_QM_DIAG */
/* USER CODE END Header_QM_DIAG */
void QM_DIAG(void *argument)
{
 8065d8c:	b5b0      	push	{r4, r5, r7, lr}
 8065d8e:	b082      	sub	sp, #8
 8065d90:	af00      	add	r7, sp, #0
 8065d92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN QM_DIAG */
	for(;;)
	{
		if(Alarm5ms_QM_DIAG == 1)
 8065d94:	4b0b      	ldr	r3, [pc, #44]	@ (8065dc4 <QM_DIAG+0x38>)
 8065d96:	781b      	ldrb	r3, [r3, #0]
 8065d98:	2b01      	cmp	r3, #1
 8065d9a:	d106      	bne.n	8065daa <QM_DIAG+0x1e>
		{
			CanSpi_MainFunction();
 8065d9c:	f7fb f9a4 	bl	80610e8 <CanSpi_MainFunction>
			Dcm_MainFunction();
 8065da0:	f7fe fb0c 	bl	80643bc <Dcm_MainFunction>
			Alarm5ms_QM_DIAG = 0;
 8065da4:	4b07      	ldr	r3, [pc, #28]	@ (8065dc4 <QM_DIAG+0x38>)
 8065da6:	2200      	movs	r2, #0
 8065da8:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			/* Do nothing. */
		}
		QM_DIAG_Counter++;
 8065daa:	4b07      	ldr	r3, [pc, #28]	@ (8065dc8 <QM_DIAG+0x3c>)
 8065dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8065db0:	1c54      	adds	r4, r2, #1
 8065db2:	f143 0500 	adc.w	r5, r3, #0
 8065db6:	4b04      	ldr	r3, [pc, #16]	@ (8065dc8 <QM_DIAG+0x3c>)
 8065db8:	e9c3 4500 	strd	r4, r5, [r3]
		vTaskSuspend(NULL);
 8065dbc:	2000      	movs	r0, #0
 8065dbe:	f009 fd6d 	bl	806f89c <vTaskSuspend>
		if(Alarm5ms_QM_DIAG == 1)
 8065dc2:	e7e7      	b.n	8065d94 <QM_DIAG+0x8>
 8065dc4:	20010892 	.word	0x20010892
 8065dc8:	20010a00 	.word	0x20010a00

08065dcc <QM_CPULOAD_MONITORING>:

/* USER CODE BEGIN Header_QM_CPULOAD_MONITORING */
static uint32 localTaskCounter = 0;
/* USER CODE END Header_QM_CPULOAD_MONITORING */
void QM_CPULOAD_MONITORING(void *argument)
{
 8065dcc:	b5b0      	push	{r4, r5, r7, lr}
 8065dce:	b082      	sub	sp, #8
 8065dd0:	af00      	add	r7, sp, #0
 8065dd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN QM_CPULOAD_MONITORING */
	for(;;)
	{
		localTaskCounter++;
 8065dd4:	4b44      	ldr	r3, [pc, #272]	@ (8065ee8 <QM_CPULOAD_MONITORING+0x11c>)
 8065dd6:	681b      	ldr	r3, [r3, #0]
 8065dd8:	3301      	adds	r3, #1
 8065dda:	4a43      	ldr	r2, [pc, #268]	@ (8065ee8 <QM_CPULOAD_MONITORING+0x11c>)
 8065ddc:	6013      	str	r3, [r2, #0]
		OS_DeltaIdleRunTime = abs(xTaskStatusArray[OS_IdleIndex].ulRunTimeCounter - OS_IdleRunTime);
 8065dde:	4b43      	ldr	r3, [pc, #268]	@ (8065eec <QM_CPULOAD_MONITORING+0x120>)
 8065de0:	781b      	ldrb	r3, [r3, #0]
 8065de2:	4619      	mov	r1, r3
 8065de4:	4a42      	ldr	r2, [pc, #264]	@ (8065ef0 <QM_CPULOAD_MONITORING+0x124>)
 8065de6:	460b      	mov	r3, r1
 8065de8:	00db      	lsls	r3, r3, #3
 8065dea:	440b      	add	r3, r1
 8065dec:	009b      	lsls	r3, r3, #2
 8065dee:	4413      	add	r3, r2
 8065df0:	3318      	adds	r3, #24
 8065df2:	681b      	ldr	r3, [r3, #0]
 8065df4:	ee07 3a90 	vmov	s15, r3
 8065df8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8065dfc:	4b3d      	ldr	r3, [pc, #244]	@ (8065ef4 <QM_CPULOAD_MONITORING+0x128>)
 8065dfe:	edd3 7a00 	vldr	s15, [r3]
 8065e02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8065e06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8065e0a:	ee17 3a90 	vmov	r3, s15
 8065e0e:	2b00      	cmp	r3, #0
 8065e10:	bfb8      	it	lt
 8065e12:	425b      	neglt	r3, r3
 8065e14:	ee07 3a90 	vmov	s15, r3
 8065e18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8065e1c:	4b36      	ldr	r3, [pc, #216]	@ (8065ef8 <QM_CPULOAD_MONITORING+0x12c>)
 8065e1e:	edc3 7a00 	vstr	s15, [r3]
		OS_CpuLoad = 100 - (OS_DeltaIdleRunTime / ulHighFrequencyTimerTicks) * 100;
 8065e22:	4b35      	ldr	r3, [pc, #212]	@ (8065ef8 <QM_CPULOAD_MONITORING+0x12c>)
 8065e24:	edd3 6a00 	vldr	s13, [r3]
 8065e28:	4b34      	ldr	r3, [pc, #208]	@ (8065efc <QM_CPULOAD_MONITORING+0x130>)
 8065e2a:	681b      	ldr	r3, [r3, #0]
 8065e2c:	ee07 3a90 	vmov	s15, r3
 8065e30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8065e34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8065e38:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8065f00 <QM_CPULOAD_MONITORING+0x134>
 8065e3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8065e40:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8065f00 <QM_CPULOAD_MONITORING+0x134>
 8065e44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8065e48:	4b2e      	ldr	r3, [pc, #184]	@ (8065f04 <QM_CPULOAD_MONITORING+0x138>)
 8065e4a:	edc3 7a00 	vstr	s15, [r3]
		OS_AverageCpuLoad += OS_CpuLoad;
 8065e4e:	4b2e      	ldr	r3, [pc, #184]	@ (8065f08 <QM_CPULOAD_MONITORING+0x13c>)
 8065e50:	ed93 7a00 	vldr	s14, [r3]
 8065e54:	4b2b      	ldr	r3, [pc, #172]	@ (8065f04 <QM_CPULOAD_MONITORING+0x138>)
 8065e56:	edd3 7a00 	vldr	s15, [r3]
 8065e5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8065e5e:	4b2a      	ldr	r3, [pc, #168]	@ (8065f08 <QM_CPULOAD_MONITORING+0x13c>)
 8065e60:	edc3 7a00 	vstr	s15, [r3]
		OS_IdleRunTime = xTaskStatusArray[OS_IdleIndex].ulRunTimeCounter;
 8065e64:	4b21      	ldr	r3, [pc, #132]	@ (8065eec <QM_CPULOAD_MONITORING+0x120>)
 8065e66:	781b      	ldrb	r3, [r3, #0]
 8065e68:	4619      	mov	r1, r3
 8065e6a:	4a21      	ldr	r2, [pc, #132]	@ (8065ef0 <QM_CPULOAD_MONITORING+0x124>)
 8065e6c:	460b      	mov	r3, r1
 8065e6e:	00db      	lsls	r3, r3, #3
 8065e70:	440b      	add	r3, r1
 8065e72:	009b      	lsls	r3, r3, #2
 8065e74:	4413      	add	r3, r2
 8065e76:	3318      	adds	r3, #24
 8065e78:	681b      	ldr	r3, [r3, #0]
 8065e7a:	ee07 3a90 	vmov	s15, r3
 8065e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8065e82:	4b1c      	ldr	r3, [pc, #112]	@ (8065ef4 <QM_CPULOAD_MONITORING+0x128>)
 8065e84:	edc3 7a00 	vstr	s15, [r3]
		ulHighFrequencyTimerTicks = 0;
 8065e88:	4b1c      	ldr	r3, [pc, #112]	@ (8065efc <QM_CPULOAD_MONITORING+0x130>)
 8065e8a:	2200      	movs	r2, #0
 8065e8c:	601a      	str	r2, [r3, #0]
		if(localTaskCounter % 12 == 0)
 8065e8e:	4b16      	ldr	r3, [pc, #88]	@ (8065ee8 <QM_CPULOAD_MONITORING+0x11c>)
 8065e90:	6819      	ldr	r1, [r3, #0]
 8065e92:	4b1e      	ldr	r3, [pc, #120]	@ (8065f0c <QM_CPULOAD_MONITORING+0x140>)
 8065e94:	fba3 2301 	umull	r2, r3, r3, r1
 8065e98:	08da      	lsrs	r2, r3, #3
 8065e9a:	4613      	mov	r3, r2
 8065e9c:	005b      	lsls	r3, r3, #1
 8065e9e:	4413      	add	r3, r2
 8065ea0:	009b      	lsls	r3, r3, #2
 8065ea2:	1aca      	subs	r2, r1, r3
 8065ea4:	2a00      	cmp	r2, #0
 8065ea6:	d112      	bne.n	8065ece <QM_CPULOAD_MONITORING+0x102>
		{
			CBM_OS_XCP_CPU_Load = OS_AverageCpuLoad / 12;
 8065ea8:	4b17      	ldr	r3, [pc, #92]	@ (8065f08 <QM_CPULOAD_MONITORING+0x13c>)
 8065eaa:	ed93 7a00 	vldr	s14, [r3]
 8065eae:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 8065eb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8065eb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8065eba:	edc7 7a00 	vstr	s15, [r7]
 8065ebe:	783b      	ldrb	r3, [r7, #0]
 8065ec0:	b2da      	uxtb	r2, r3
 8065ec2:	4b13      	ldr	r3, [pc, #76]	@ (8065f10 <QM_CPULOAD_MONITORING+0x144>)
 8065ec4:	701a      	strb	r2, [r3, #0]
			OS_AverageCpuLoad = 0;
 8065ec6:	4b10      	ldr	r3, [pc, #64]	@ (8065f08 <QM_CPULOAD_MONITORING+0x13c>)
 8065ec8:	f04f 0200 	mov.w	r2, #0
 8065ecc:	601a      	str	r2, [r3, #0]
		}
		else
		{
			/* Do nothing. */
		}
		QM_CPULOAD_Counter++;
 8065ece:	4b11      	ldr	r3, [pc, #68]	@ (8065f14 <QM_CPULOAD_MONITORING+0x148>)
 8065ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8065ed4:	1c54      	adds	r4, r2, #1
 8065ed6:	f143 0500 	adc.w	r5, r3, #0
 8065eda:	4b0e      	ldr	r3, [pc, #56]	@ (8065f14 <QM_CPULOAD_MONITORING+0x148>)
 8065edc:	e9c3 4500 	strd	r4, r5, [r3]
		vTaskSuspend(NULL);
 8065ee0:	2000      	movs	r0, #0
 8065ee2:	f009 fcdb 	bl	806f89c <vTaskSuspend>
		localTaskCounter++;
 8065ee6:	e775      	b.n	8065dd4 <QM_CPULOAD_MONITORING+0x8>
 8065ee8:	20010a38 	.word	0x20010a38
 8065eec:	200109d0 	.word	0x200109d0
 8065ef0:	200108a8 	.word	0x200108a8
 8065ef4:	200109d4 	.word	0x200109d4
 8065ef8:	200109d8 	.word	0x200109d8
 8065efc:	20010a34 	.word	0x20010a34
 8065f00:	42c80000 	.word	0x42c80000
 8065f04:	200109dc 	.word	0x200109dc
 8065f08:	200109e0 	.word	0x200109e0
 8065f0c:	aaaaaaab 	.word	0xaaaaaaab
 8065f10:	200109e4 	.word	0x200109e4
 8065f14:	20010a08 	.word	0x20010a08

08065f18 <Alarm5ms_Callback>:
  /* USER CODE END QM_CPULOAD_MONITORING */
}

/* Alarm5ms_Callback function */
void Alarm5ms_Callback(void *argument)
{
 8065f18:	b580      	push	{r7, lr}
 8065f1a:	b082      	sub	sp, #8
 8065f1c:	af00      	add	r7, sp, #0
 8065f1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Alarm5ms_Callback */
	Alarm5ms_QM_APPL = 1;
 8065f20:	4b0b      	ldr	r3, [pc, #44]	@ (8065f50 <Alarm5ms_Callback+0x38>)
 8065f22:	2201      	movs	r2, #1
 8065f24:	701a      	strb	r2, [r3, #0]
	Alarm5ms_QM_BSW = 1;
 8065f26:	4b0b      	ldr	r3, [pc, #44]	@ (8065f54 <Alarm5ms_Callback+0x3c>)
 8065f28:	2201      	movs	r2, #1
 8065f2a:	701a      	strb	r2, [r3, #0]
	Alarm5ms_QM_DIAG = 1;
 8065f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8065f58 <Alarm5ms_Callback+0x40>)
 8065f2e:	2201      	movs	r2, #1
 8065f30:	701a      	strb	r2, [r3, #0]
	vTaskResume(QM_BSW_OS_TASKHandle);
 8065f32:	4b0a      	ldr	r3, [pc, #40]	@ (8065f5c <Alarm5ms_Callback+0x44>)
 8065f34:	681b      	ldr	r3, [r3, #0]
 8065f36:	4618      	mov	r0, r3
 8065f38:	f009 fd58 	bl	806f9ec <vTaskResume>
	vTaskResume(QM_DIAG_OS_TASKHandle);
 8065f3c:	4b08      	ldr	r3, [pc, #32]	@ (8065f60 <Alarm5ms_Callback+0x48>)
 8065f3e:	681b      	ldr	r3, [r3, #0]
 8065f40:	4618      	mov	r0, r3
 8065f42:	f009 fd53 	bl	806f9ec <vTaskResume>
  /* USER CODE END Alarm5ms_Callback */
}
 8065f46:	bf00      	nop
 8065f48:	3708      	adds	r7, #8
 8065f4a:	46bd      	mov	sp, r7
 8065f4c:	bd80      	pop	{r7, pc}
 8065f4e:	bf00      	nop
 8065f50:	20010890 	.word	0x20010890
 8065f54:	20010891 	.word	0x20010891
 8065f58:	20010892 	.word	0x20010892
 8065f5c:	20010a14 	.word	0x20010a14
 8065f60:	20010a1c 	.word	0x20010a1c

08065f64 <Alarm10ms_Callback>:

/* Alarm10ms_Callback function */
void Alarm10ms_Callback(void *argument)
{
 8065f64:	b580      	push	{r7, lr}
 8065f66:	b082      	sub	sp, #8
 8065f68:	af00      	add	r7, sp, #0
 8065f6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Alarm10ms_Callback */
	Alarm10ms_QM_APPL = 1;
 8065f6c:	4b07      	ldr	r3, [pc, #28]	@ (8065f8c <Alarm10ms_Callback+0x28>)
 8065f6e:	2201      	movs	r2, #1
 8065f70:	701a      	strb	r2, [r3, #0]
	Alarm10ms_QM_BSW = 1;
 8065f72:	4b07      	ldr	r3, [pc, #28]	@ (8065f90 <Alarm10ms_Callback+0x2c>)
 8065f74:	2201      	movs	r2, #1
 8065f76:	701a      	strb	r2, [r3, #0]
	vTaskResume(QM_APPL_OS_TASKHandle);
 8065f78:	4b06      	ldr	r3, [pc, #24]	@ (8065f94 <Alarm10ms_Callback+0x30>)
 8065f7a:	681b      	ldr	r3, [r3, #0]
 8065f7c:	4618      	mov	r0, r3
 8065f7e:	f009 fd35 	bl	806f9ec <vTaskResume>
  /* USER CODE END Alarm10ms_Callback */
}
 8065f82:	bf00      	nop
 8065f84:	3708      	adds	r7, #8
 8065f86:	46bd      	mov	sp, r7
 8065f88:	bd80      	pop	{r7, pc}
 8065f8a:	bf00      	nop
 8065f8c:	20010893 	.word	0x20010893
 8065f90:	20010894 	.word	0x20010894
 8065f94:	20010a10 	.word	0x20010a10

08065f98 <Alarm100ms_Callback>:

/* Alarm100ms_Callback function */
void Alarm100ms_Callback(void *argument)
{
 8065f98:	b580      	push	{r7, lr}
 8065f9a:	b082      	sub	sp, #8
 8065f9c:	af00      	add	r7, sp, #0
 8065f9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Alarm100ms_Callback */
	Alarm100ms_QM_NVM = 1;
 8065fa0:	4b05      	ldr	r3, [pc, #20]	@ (8065fb8 <Alarm100ms_Callback+0x20>)
 8065fa2:	2201      	movs	r2, #1
 8065fa4:	701a      	strb	r2, [r3, #0]
	vTaskResume(QM_NVM_OS_TASKHandle);
 8065fa6:	4b05      	ldr	r3, [pc, #20]	@ (8065fbc <Alarm100ms_Callback+0x24>)
 8065fa8:	681b      	ldr	r3, [r3, #0]
 8065faa:	4618      	mov	r0, r3
 8065fac:	f009 fd1e 	bl	806f9ec <vTaskResume>
  /* USER CODE END Alarm100ms_Callback */
}
 8065fb0:	bf00      	nop
 8065fb2:	3708      	adds	r7, #8
 8065fb4:	46bd      	mov	sp, r7
 8065fb6:	bd80      	pop	{r7, pc}
 8065fb8:	20010895 	.word	0x20010895
 8065fbc:	20010a18 	.word	0x20010a18

08065fc0 <Alarm40ms_Calback>:

/* Alarm40ms_Calback function */
void Alarm40ms_Calback(void *argument)
{
 8065fc0:	b580      	push	{r7, lr}
 8065fc2:	b082      	sub	sp, #8
 8065fc4:	af00      	add	r7, sp, #0
 8065fc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Alarm40ms_Calback */
	vTaskResume(QM_CPULOAD_MONITORING_OS_TASKHandle);
 8065fc8:	4b04      	ldr	r3, [pc, #16]	@ (8065fdc <Alarm40ms_Calback+0x1c>)
 8065fca:	681b      	ldr	r3, [r3, #0]
 8065fcc:	4618      	mov	r0, r3
 8065fce:	f009 fd0d 	bl	806f9ec <vTaskResume>
  /* USER CODE END Alarm40ms_Calback */
}
 8065fd2:	bf00      	nop
 8065fd4:	3708      	adds	r7, #8
 8065fd6:	46bd      	mov	sp, r7
 8065fd8:	bd80      	pop	{r7, pc}
 8065fda:	bf00      	nop
 8065fdc:	20010a20 	.word	0x20010a20

08065fe0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8065fe0:	b580      	push	{r7, lr}
 8065fe2:	b08a      	sub	sp, #40	@ 0x28
 8065fe4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8065fe6:	f107 0314 	add.w	r3, r7, #20
 8065fea:	2200      	movs	r2, #0
 8065fec:	601a      	str	r2, [r3, #0]
 8065fee:	605a      	str	r2, [r3, #4]
 8065ff0:	609a      	str	r2, [r3, #8]
 8065ff2:	60da      	str	r2, [r3, #12]
 8065ff4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8065ff6:	2300      	movs	r3, #0
 8065ff8:	613b      	str	r3, [r7, #16]
 8065ffa:	4b8c      	ldr	r3, [pc, #560]	@ (806622c <MX_GPIO_Init+0x24c>)
 8065ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8065ffe:	4a8b      	ldr	r2, [pc, #556]	@ (806622c <MX_GPIO_Init+0x24c>)
 8066000:	f043 0304 	orr.w	r3, r3, #4
 8066004:	6313      	str	r3, [r2, #48]	@ 0x30
 8066006:	4b89      	ldr	r3, [pc, #548]	@ (806622c <MX_GPIO_Init+0x24c>)
 8066008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 806600a:	f003 0304 	and.w	r3, r3, #4
 806600e:	613b      	str	r3, [r7, #16]
 8066010:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8066012:	2300      	movs	r3, #0
 8066014:	60fb      	str	r3, [r7, #12]
 8066016:	4b85      	ldr	r3, [pc, #532]	@ (806622c <MX_GPIO_Init+0x24c>)
 8066018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 806601a:	4a84      	ldr	r2, [pc, #528]	@ (806622c <MX_GPIO_Init+0x24c>)
 806601c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8066020:	6313      	str	r3, [r2, #48]	@ 0x30
 8066022:	4b82      	ldr	r3, [pc, #520]	@ (806622c <MX_GPIO_Init+0x24c>)
 8066024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8066026:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 806602a:	60fb      	str	r3, [r7, #12]
 806602c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 806602e:	2300      	movs	r3, #0
 8066030:	60bb      	str	r3, [r7, #8]
 8066032:	4b7e      	ldr	r3, [pc, #504]	@ (806622c <MX_GPIO_Init+0x24c>)
 8066034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8066036:	4a7d      	ldr	r2, [pc, #500]	@ (806622c <MX_GPIO_Init+0x24c>)
 8066038:	f043 0301 	orr.w	r3, r3, #1
 806603c:	6313      	str	r3, [r2, #48]	@ 0x30
 806603e:	4b7b      	ldr	r3, [pc, #492]	@ (806622c <MX_GPIO_Init+0x24c>)
 8066040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8066042:	f003 0301 	and.w	r3, r3, #1
 8066046:	60bb      	str	r3, [r7, #8]
 8066048:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 806604a:	2300      	movs	r3, #0
 806604c:	607b      	str	r3, [r7, #4]
 806604e:	4b77      	ldr	r3, [pc, #476]	@ (806622c <MX_GPIO_Init+0x24c>)
 8066050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8066052:	4a76      	ldr	r2, [pc, #472]	@ (806622c <MX_GPIO_Init+0x24c>)
 8066054:	f043 0302 	orr.w	r3, r3, #2
 8066058:	6313      	str	r3, [r2, #48]	@ 0x30
 806605a:	4b74      	ldr	r3, [pc, #464]	@ (806622c <MX_GPIO_Init+0x24c>)
 806605c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 806605e:	f003 0302 	and.w	r3, r3, #2
 8066062:	607b      	str	r3, [r7, #4]
 8066064:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8066066:	2300      	movs	r3, #0
 8066068:	603b      	str	r3, [r7, #0]
 806606a:	4b70      	ldr	r3, [pc, #448]	@ (806622c <MX_GPIO_Init+0x24c>)
 806606c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 806606e:	4a6f      	ldr	r2, [pc, #444]	@ (806622c <MX_GPIO_Init+0x24c>)
 8066070:	f043 0308 	orr.w	r3, r3, #8
 8066074:	6313      	str	r3, [r2, #48]	@ 0x30
 8066076:	4b6d      	ldr	r3, [pc, #436]	@ (806622c <MX_GPIO_Init+0x24c>)
 8066078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 806607a:	f003 0308 	and.w	r3, r3, #8
 806607e:	603b      	str	r3, [r7, #0]
 8066080:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8066082:	2200      	movs	r2, #0
 8066084:	f64f 7123 	movw	r1, #65315	@ 0xff23
 8066088:	4869      	ldr	r0, [pc, #420]	@ (8066230 <MX_GPIO_Init+0x250>)
 806608a:	f002 fef9 	bl	8068e80 <HAL_GPIO_WritePin>
                          |GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|SIG0_ADCMUX_Pin, GPIO_PIN_RESET);
 806608e:	2200      	movs	r2, #0
 8066090:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8066094:	4867      	ldr	r0, [pc, #412]	@ (8066234 <MX_GPIO_Init+0x254>)
 8066096:	f002 fef3 	bl	8068e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCP_CS_GPIO_Port, MCP_CS_Pin, GPIO_PIN_SET);
 806609a:	2201      	movs	r2, #1
 806609c:	2110      	movs	r1, #16
 806609e:	4864      	ldr	r0, [pc, #400]	@ (8066230 <MX_GPIO_Init+0x250>)
 80660a0:	f002 feee 	bl	8068e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|SIG1_ADCMUX_Pin|GPIO_PIN_3|SIG2_ADCMUX_Pin
 80660a4:	2200      	movs	r2, #0
 80660a6:	f240 71fc 	movw	r1, #2044	@ 0x7fc
 80660aa:	4863      	ldr	r0, [pc, #396]	@ (8066238 <MX_GPIO_Init+0x258>)
 80660ac:	f002 fee8 	bl	8068e80 <HAL_GPIO_WritePin>
                          |SIG3_ADCMUX_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80660b0:	2200      	movs	r2, #0
 80660b2:	2104      	movs	r1, #4
 80660b4:	4861      	ldr	r0, [pc, #388]	@ (806623c <MX_GPIO_Init+0x25c>)
 80660b6:	f002 fee3 	bl	8068e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80660ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80660be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80660c0:	2301      	movs	r3, #1
 80660c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80660c4:	2300      	movs	r3, #0
 80660c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80660c8:	2300      	movs	r3, #0
 80660ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80660cc:	f107 0314 	add.w	r3, r7, #20
 80660d0:	4619      	mov	r1, r3
 80660d2:	4857      	ldr	r0, [pc, #348]	@ (8066230 <MX_GPIO_Init+0x250>)
 80660d4:	f002 fc1c 	bl	8068910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80660d8:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80660dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80660de:	2301      	movs	r3, #1
 80660e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80660e2:	2302      	movs	r3, #2
 80660e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80660e6:	2300      	movs	r3, #0
 80660e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80660ea:	f107 0314 	add.w	r3, r7, #20
 80660ee:	4619      	mov	r1, r3
 80660f0:	484f      	ldr	r0, [pc, #316]	@ (8066230 <MX_GPIO_Init+0x250>)
 80660f2:	f002 fc0d 	bl	8068910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC5 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_8
 80660f6:	f641 7323 	movw	r3, #7971	@ 0x1f23
 80660fa:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80660fc:	2301      	movs	r3, #1
 80660fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8066100:	2302      	movs	r3, #2
 8066102:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8066104:	2303      	movs	r3, #3
 8066106:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8066108:	f107 0314 	add.w	r3, r7, #20
 806610c:	4619      	mov	r1, r3
 806610e:	4848      	ldr	r0, [pc, #288]	@ (8066230 <MX_GPIO_Init+0x250>)
 8066110:	f002 fbfe 	bl	8068910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8066114:	230c      	movs	r3, #12
 8066116:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8066118:	2303      	movs	r3, #3
 806611a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 806611c:	2300      	movs	r3, #0
 806611e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8066120:	f107 0314 	add.w	r3, r7, #20
 8066124:	4619      	mov	r1, r3
 8066126:	4842      	ldr	r0, [pc, #264]	@ (8066230 <MX_GPIO_Init+0x250>)
 8066128:	f002 fbf2 	bl	8068910 <HAL_GPIO_Init>

  /*Configure GPIO pin : HC05_STATE_Pin */
  GPIO_InitStruct.Pin = HC05_STATE_Pin;
 806612c:	2301      	movs	r3, #1
 806612e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8066130:	2300      	movs	r3, #0
 8066132:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8066134:	2300      	movs	r3, #0
 8066136:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(HC05_STATE_GPIO_Port, &GPIO_InitStruct);
 8066138:	f107 0314 	add.w	r3, r7, #20
 806613c:	4619      	mov	r1, r3
 806613e:	483d      	ldr	r0, [pc, #244]	@ (8066234 <MX_GPIO_Init+0x254>)
 8066140:	f002 fbe6 	bl	8068910 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8066144:	2302      	movs	r3, #2
 8066146:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8066148:	2301      	movs	r3, #1
 806614a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 806614c:	2300      	movs	r3, #0
 806614e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8066150:	2300      	movs	r3, #0
 8066152:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8066154:	f107 0314 	add.w	r3, r7, #20
 8066158:	4619      	mov	r1, r3
 806615a:	4836      	ldr	r0, [pc, #216]	@ (8066234 <MX_GPIO_Init+0x254>)
 806615c:	f002 fbd8 	bl	8068910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_11|GPIO_PIN_12;
 8066160:	f641 030c 	movw	r3, #6156	@ 0x180c
 8066164:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8066166:	2303      	movs	r3, #3
 8066168:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 806616a:	2300      	movs	r3, #0
 806616c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 806616e:	f107 0314 	add.w	r3, r7, #20
 8066172:	4619      	mov	r1, r3
 8066174:	482f      	ldr	r0, [pc, #188]	@ (8066234 <MX_GPIO_Init+0x254>)
 8066176:	f002 fbcb 	bl	8068910 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCP_CS_Pin */
  GPIO_InitStruct.Pin = MCP_CS_Pin;
 806617a:	2310      	movs	r3, #16
 806617c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 806617e:	2301      	movs	r3, #1
 8066180:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8066182:	2301      	movs	r3, #1
 8066184:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8066186:	2303      	movs	r3, #3
 8066188:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MCP_CS_GPIO_Port, &GPIO_InitStruct);
 806618a:	f107 0314 	add.w	r3, r7, #20
 806618e:	4619      	mov	r1, r3
 8066190:	4827      	ldr	r0, [pc, #156]	@ (8066230 <MX_GPIO_Init+0x250>)
 8066192:	f002 fbbd 	bl	8068910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 SIG1_ADCMUX_Pin PB3 SIG2_ADCMUX_Pin
                           SIG3_ADCMUX_Pin PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|SIG1_ADCMUX_Pin|GPIO_PIN_3|SIG2_ADCMUX_Pin
 8066196:	f240 73bc 	movw	r3, #1980	@ 0x7bc
 806619a:	617b      	str	r3, [r7, #20]
                          |SIG3_ADCMUX_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 806619c:	2301      	movs	r3, #1
 806619e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80661a0:	2302      	movs	r3, #2
 80661a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80661a4:	2303      	movs	r3, #3
 80661a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80661a8:	f107 0314 	add.w	r3, r7, #20
 80661ac:	4619      	mov	r1, r3
 80661ae:	4822      	ldr	r0, [pc, #136]	@ (8066238 <MX_GPIO_Init+0x258>)
 80661b0:	f002 fbae 	bl	8068910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80661b4:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80661b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80661ba:	2303      	movs	r3, #3
 80661bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80661be:	2300      	movs	r3, #0
 80661c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80661c2:	f107 0314 	add.w	r3, r7, #20
 80661c6:	4619      	mov	r1, r3
 80661c8:	481b      	ldr	r0, [pc, #108]	@ (8066238 <MX_GPIO_Init+0x258>)
 80661ca:	f002 fba1 	bl	8068910 <HAL_GPIO_Init>

  /*Configure GPIO pin : SIG0_ADCMUX_Pin */
  GPIO_InitStruct.Pin = SIG0_ADCMUX_Pin;
 80661ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80661d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80661d4:	2301      	movs	r3, #1
 80661d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80661d8:	2302      	movs	r3, #2
 80661da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80661dc:	2303      	movs	r3, #3
 80661de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SIG0_ADCMUX_GPIO_Port, &GPIO_InitStruct);
 80661e0:	f107 0314 	add.w	r3, r7, #20
 80661e4:	4619      	mov	r1, r3
 80661e6:	4813      	ldr	r0, [pc, #76]	@ (8066234 <MX_GPIO_Init+0x254>)
 80661e8:	f002 fb92 	bl	8068910 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80661ec:	2304      	movs	r3, #4
 80661ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80661f0:	2301      	movs	r3, #1
 80661f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80661f4:	2302      	movs	r3, #2
 80661f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80661f8:	2303      	movs	r3, #3
 80661fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80661fc:	f107 0314 	add.w	r3, r7, #20
 8066200:	4619      	mov	r1, r3
 8066202:	480e      	ldr	r0, [pc, #56]	@ (806623c <MX_GPIO_Init+0x25c>)
 8066204:	f002 fb84 	bl	8068910 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8066208:	2340      	movs	r3, #64	@ 0x40
 806620a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 806620c:	2301      	movs	r3, #1
 806620e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8066210:	2300      	movs	r3, #0
 8066212:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8066214:	2300      	movs	r3, #0
 8066216:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8066218:	f107 0314 	add.w	r3, r7, #20
 806621c:	4619      	mov	r1, r3
 806621e:	4806      	ldr	r0, [pc, #24]	@ (8066238 <MX_GPIO_Init+0x258>)
 8066220:	f002 fb76 	bl	8068910 <HAL_GPIO_Init>

}
 8066224:	bf00      	nop
 8066226:	3728      	adds	r7, #40	@ 0x28
 8066228:	46bd      	mov	sp, r7
 806622a:	bd80      	pop	{r7, pc}
 806622c:	40023800 	.word	0x40023800
 8066230:	40020800 	.word	0x40020800
 8066234:	40020000 	.word	0x40020000
 8066238:	40020400 	.word	0x40020400
 806623c:	40020c00 	.word	0x40020c00

08066240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8066240:	b580      	push	{r7, lr}
 8066242:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8066244:	f000 fe2a 	bl	8066e9c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8066248:	f000 f828 	bl	806629c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 806624c:	f7ff fec8 	bl	8065fe0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8066250:	f7ff fba0 	bl	8065994 <MX_ADC1_Init>
  MX_SPI1_Init();
 8066254:	f000 f902 	bl	806645c <MX_SPI1_Init>
  MX_TIM3_Init();
 8066258:	f000 fb5e 	bl	8066918 <MX_TIM3_Init>
  MX_TIM2_Init();
 806625c:	f000 fae6 	bl	806682c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8066260:	f000 fcf8 	bl	8066c54 <MX_USART1_UART_Init>
  MX_TIM9_Init();
 8066264:	f000 fbf0 	bl	8066a48 <MX_TIM9_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8066268:	f000 f880 	bl	806636c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
	EcuM_WakeupReason = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 806626c:	2101      	movs	r1, #1
 806626e:	4809      	ldr	r0, [pc, #36]	@ (8066294 <main+0x54>)
 8066270:	f002 fde6 	bl	8068e40 <HAL_GPIO_ReadPin>
 8066274:	4603      	mov	r3, r0
 8066276:	461a      	mov	r2, r3
 8066278:	4b07      	ldr	r3, [pc, #28]	@ (8066298 <main+0x58>)
 806627a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 806627c:	f007 fd0e 	bl	806dc9c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8066280:	f7ff fc7c 	bl	8065b7c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8066284:	f007 fd2e 	bl	806dce4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	EcuM_PerformReset(OSFAIL_RESET);
 8066288:	202b      	movs	r0, #43	@ 0x2b
 806628a:	f7ff f905 	bl	8065498 <EcuM_PerformReset>
	while (1)
 806628e:	bf00      	nop
 8066290:	e7fd      	b.n	806628e <main+0x4e>
 8066292:	bf00      	nop
 8066294:	40020000 	.word	0x40020000
 8066298:	20010820 	.word	0x20010820

0806629c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 806629c:	b580      	push	{r7, lr}
 806629e:	b094      	sub	sp, #80	@ 0x50
 80662a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80662a2:	f107 0320 	add.w	r3, r7, #32
 80662a6:	2230      	movs	r2, #48	@ 0x30
 80662a8:	2100      	movs	r1, #0
 80662aa:	4618      	mov	r0, r3
 80662ac:	f00a ffc0 	bl	8071230 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80662b0:	f107 030c 	add.w	r3, r7, #12
 80662b4:	2200      	movs	r2, #0
 80662b6:	601a      	str	r2, [r3, #0]
 80662b8:	605a      	str	r2, [r3, #4]
 80662ba:	609a      	str	r2, [r3, #8]
 80662bc:	60da      	str	r2, [r3, #12]
 80662be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80662c0:	2300      	movs	r3, #0
 80662c2:	60bb      	str	r3, [r7, #8]
 80662c4:	4b27      	ldr	r3, [pc, #156]	@ (8066364 <SystemClock_Config+0xc8>)
 80662c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80662c8:	4a26      	ldr	r2, [pc, #152]	@ (8066364 <SystemClock_Config+0xc8>)
 80662ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80662ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80662d0:	4b24      	ldr	r3, [pc, #144]	@ (8066364 <SystemClock_Config+0xc8>)
 80662d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80662d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80662d8:	60bb      	str	r3, [r7, #8]
 80662da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80662dc:	2300      	movs	r3, #0
 80662de:	607b      	str	r3, [r7, #4]
 80662e0:	4b21      	ldr	r3, [pc, #132]	@ (8066368 <SystemClock_Config+0xcc>)
 80662e2:	681b      	ldr	r3, [r3, #0]
 80662e4:	4a20      	ldr	r2, [pc, #128]	@ (8066368 <SystemClock_Config+0xcc>)
 80662e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80662ea:	6013      	str	r3, [r2, #0]
 80662ec:	4b1e      	ldr	r3, [pc, #120]	@ (8066368 <SystemClock_Config+0xcc>)
 80662ee:	681b      	ldr	r3, [r3, #0]
 80662f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80662f4:	607b      	str	r3, [r7, #4]
 80662f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80662f8:	2301      	movs	r3, #1
 80662fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80662fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8066300:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8066302:	2302      	movs	r3, #2
 8066304:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8066306:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 806630a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 806630c:	2304      	movs	r3, #4
 806630e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8066310:	2364      	movs	r3, #100	@ 0x64
 8066312:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8066314:	2302      	movs	r3, #2
 8066316:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8066318:	2304      	movs	r3, #4
 806631a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 806631c:	f107 0320 	add.w	r3, r7, #32
 8066320:	4618      	mov	r0, r3
 8066322:	f002 fe27 	bl	8068f74 <HAL_RCC_OscConfig>
 8066326:	4603      	mov	r3, r0
 8066328:	2b00      	cmp	r3, #0
 806632a:	d001      	beq.n	8066330 <SystemClock_Config+0x94>
  {
    Error_Handler();
 806632c:	f000 f884 	bl	8066438 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8066330:	230f      	movs	r3, #15
 8066332:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8066334:	2302      	movs	r3, #2
 8066336:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8066338:	2300      	movs	r3, #0
 806633a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 806633c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8066340:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8066342:	2300      	movs	r3, #0
 8066344:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8066346:	f107 030c 	add.w	r3, r7, #12
 806634a:	2103      	movs	r1, #3
 806634c:	4618      	mov	r0, r3
 806634e:	f003 f93d 	bl	80695cc <HAL_RCC_ClockConfig>
 8066352:	4603      	mov	r3, r0
 8066354:	2b00      	cmp	r3, #0
 8066356:	d001      	beq.n	806635c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8066358:	f000 f86e 	bl	8066438 <Error_Handler>
  }
}
 806635c:	bf00      	nop
 806635e:	3750      	adds	r7, #80	@ 0x50
 8066360:	46bd      	mov	sp, r7
 8066362:	bd80      	pop	{r7, pc}
 8066364:	40023800 	.word	0x40023800
 8066368:	40007000 	.word	0x40007000

0806636c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 806636c:	b580      	push	{r7, lr}
 806636e:	af00      	add	r7, sp, #0
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 6, 0);
 8066370:	2200      	movs	r2, #0
 8066372:	2106      	movs	r1, #6
 8066374:	2005      	movs	r0, #5
 8066376:	f001 fd6d 	bl	8067e54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 806637a:	2005      	movs	r0, #5
 806637c:	f001 fd96 	bl	8067eac <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 6, 0);
 8066380:	2200      	movs	r2, #0
 8066382:	2106      	movs	r1, #6
 8066384:	2004      	movs	r0, #4
 8066386:	f001 fd65 	bl	8067e54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 806638a:	2004      	movs	r0, #4
 806638c:	f001 fd8e 	bl	8067eac <HAL_NVIC_EnableIRQ>
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 6, 0);
 8066390:	2200      	movs	r2, #0
 8066392:	2106      	movs	r1, #6
 8066394:	2001      	movs	r0, #1
 8066396:	f001 fd5d 	bl	8067e54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 806639a:	2001      	movs	r0, #1
 806639c:	f001 fd86 	bl	8067eac <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 80663a0:	2200      	movs	r2, #0
 80663a2:	2106      	movs	r1, #6
 80663a4:	201c      	movs	r0, #28
 80663a6:	f001 fd55 	bl	8067e54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80663aa:	201c      	movs	r0, #28
 80663ac:	f001 fd7e 	bl	8067eac <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 80663b0:	2200      	movs	r2, #0
 80663b2:	2106      	movs	r1, #6
 80663b4:	201d      	movs	r0, #29
 80663b6:	f001 fd4d 	bl	8067e54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80663ba:	201d      	movs	r0, #29
 80663bc:	f001 fd76 	bl	8067eac <HAL_NVIC_EnableIRQ>
  /* TIM1_BRK_TIM9_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 6, 0);
 80663c0:	2200      	movs	r2, #0
 80663c2:	2106      	movs	r1, #6
 80663c4:	2018      	movs	r0, #24
 80663c6:	f001 fd45 	bl	8067e54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80663ca:	2018      	movs	r0, #24
 80663cc:	f001 fd6e 	bl	8067eac <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 80663d0:	2200      	movs	r2, #0
 80663d2:	2106      	movs	r1, #6
 80663d4:	2025      	movs	r0, #37	@ 0x25
 80663d6:	f001 fd3d 	bl	8067e54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80663da:	2025      	movs	r0, #37	@ 0x25
 80663dc:	f001 fd66 	bl	8067eac <HAL_NVIC_EnableIRQ>
  /* SPI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI1_IRQn, 6, 0);
 80663e0:	2200      	movs	r2, #0
 80663e2:	2106      	movs	r1, #6
 80663e4:	2023      	movs	r0, #35	@ 0x23
 80663e6:	f001 fd35 	bl	8067e54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80663ea:	2023      	movs	r0, #35	@ 0x23
 80663ec:	f001 fd5e 	bl	8067eac <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 6, 0);
 80663f0:	2200      	movs	r2, #0
 80663f2:	2106      	movs	r1, #6
 80663f4:	2051      	movs	r0, #81	@ 0x51
 80663f6:	f001 fd2d 	bl	8067e54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80663fa:	2051      	movs	r0, #81	@ 0x51
 80663fc:	f001 fd56 	bl	8067eac <HAL_NVIC_EnableIRQ>
  /* ADC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8066400:	2200      	movs	r2, #0
 8066402:	2105      	movs	r1, #5
 8066404:	2012      	movs	r0, #18
 8066406:	f001 fd25 	bl	8067e54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 806640a:	2012      	movs	r0, #18
 806640c:	f001 fd4e 	bl	8067eac <HAL_NVIC_EnableIRQ>
}
 8066410:	bf00      	nop
 8066412:	bd80      	pop	{r7, pc}

08066414 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8066414:	b580      	push	{r7, lr}
 8066416:	b082      	sub	sp, #8
 8066418:	af00      	add	r7, sp, #0
 806641a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 806641c:	687b      	ldr	r3, [r7, #4]
 806641e:	681b      	ldr	r3, [r3, #0]
 8066420:	4a04      	ldr	r2, [pc, #16]	@ (8066434 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8066422:	4293      	cmp	r3, r2
 8066424:	d101      	bne.n	806642a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8066426:	f000 fd5b 	bl	8066ee0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 806642a:	bf00      	nop
 806642c:	3708      	adds	r7, #8
 806642e:	46bd      	mov	sp, r7
 8066430:	bd80      	pop	{r7, pc}
 8066432:	bf00      	nop
 8066434:	40000c00 	.word	0x40000c00

08066438 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8066438:	b580      	push	{r7, lr}
 806643a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	EcuM_PerformReset(ERRORHANDLER_RESET);
 806643c:	202a      	movs	r0, #42	@ 0x2a
 806643e:	f7ff f82b 	bl	8065498 <EcuM_PerformReset>
	while (1)
 8066442:	bf00      	nop
 8066444:	e7fd      	b.n	8066442 <Error_Handler+0xa>

08066446 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8066446:	b480      	push	{r7}
 8066448:	b083      	sub	sp, #12
 806644a:	af00      	add	r7, sp, #0
 806644c:	6078      	str	r0, [r7, #4]
 806644e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* USER CODE END 6 */
}
 8066450:	bf00      	nop
 8066452:	370c      	adds	r7, #12
 8066454:	46bd      	mov	sp, r7
 8066456:	f85d 7b04 	ldr.w	r7, [sp], #4
 806645a:	4770      	bx	lr

0806645c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 806645c:	b580      	push	{r7, lr}
 806645e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_Init 0 */
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */
  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8066460:	4b17      	ldr	r3, [pc, #92]	@ (80664c0 <MX_SPI1_Init+0x64>)
 8066462:	4a18      	ldr	r2, [pc, #96]	@ (80664c4 <MX_SPI1_Init+0x68>)
 8066464:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8066466:	4b16      	ldr	r3, [pc, #88]	@ (80664c0 <MX_SPI1_Init+0x64>)
 8066468:	f44f 7282 	mov.w	r2, #260	@ 0x104
 806646c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 806646e:	4b14      	ldr	r3, [pc, #80]	@ (80664c0 <MX_SPI1_Init+0x64>)
 8066470:	2200      	movs	r2, #0
 8066472:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8066474:	4b12      	ldr	r3, [pc, #72]	@ (80664c0 <MX_SPI1_Init+0x64>)
 8066476:	2200      	movs	r2, #0
 8066478:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 806647a:	4b11      	ldr	r3, [pc, #68]	@ (80664c0 <MX_SPI1_Init+0x64>)
 806647c:	2200      	movs	r2, #0
 806647e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8066480:	4b0f      	ldr	r3, [pc, #60]	@ (80664c0 <MX_SPI1_Init+0x64>)
 8066482:	2200      	movs	r2, #0
 8066484:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8066486:	4b0e      	ldr	r3, [pc, #56]	@ (80664c0 <MX_SPI1_Init+0x64>)
 8066488:	f44f 7200 	mov.w	r2, #512	@ 0x200
 806648c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 806648e:	4b0c      	ldr	r3, [pc, #48]	@ (80664c0 <MX_SPI1_Init+0x64>)
 8066490:	2218      	movs	r2, #24
 8066492:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8066494:	4b0a      	ldr	r3, [pc, #40]	@ (80664c0 <MX_SPI1_Init+0x64>)
 8066496:	2200      	movs	r2, #0
 8066498:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 806649a:	4b09      	ldr	r3, [pc, #36]	@ (80664c0 <MX_SPI1_Init+0x64>)
 806649c:	2200      	movs	r2, #0
 806649e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80664a0:	4b07      	ldr	r3, [pc, #28]	@ (80664c0 <MX_SPI1_Init+0x64>)
 80664a2:	2200      	movs	r2, #0
 80664a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80664a6:	4b06      	ldr	r3, [pc, #24]	@ (80664c0 <MX_SPI1_Init+0x64>)
 80664a8:	220a      	movs	r2, #10
 80664aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80664ac:	4804      	ldr	r0, [pc, #16]	@ (80664c0 <MX_SPI1_Init+0x64>)
 80664ae:	f003 fb87 	bl	8069bc0 <HAL_SPI_Init>
 80664b2:	4603      	mov	r3, r0
 80664b4:	2b00      	cmp	r3, #0
 80664b6:	d001      	beq.n	80664bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80664b8:	f7ff ffbe 	bl	8066438 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  /* USER CODE END SPI1_Init 2 */

}
 80664bc:	bf00      	nop
 80664be:	bd80      	pop	{r7, pc}
 80664c0:	20010a3c 	.word	0x20010a3c
 80664c4:	40013000 	.word	0x40013000

080664c8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80664c8:	b580      	push	{r7, lr}
 80664ca:	b08a      	sub	sp, #40	@ 0x28
 80664cc:	af00      	add	r7, sp, #0
 80664ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80664d0:	f107 0314 	add.w	r3, r7, #20
 80664d4:	2200      	movs	r2, #0
 80664d6:	601a      	str	r2, [r3, #0]
 80664d8:	605a      	str	r2, [r3, #4]
 80664da:	609a      	str	r2, [r3, #8]
 80664dc:	60da      	str	r2, [r3, #12]
 80664de:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80664e0:	687b      	ldr	r3, [r7, #4]
 80664e2:	681b      	ldr	r3, [r3, #0]
 80664e4:	4a19      	ldr	r2, [pc, #100]	@ (806654c <HAL_SPI_MspInit+0x84>)
 80664e6:	4293      	cmp	r3, r2
 80664e8:	d12b      	bne.n	8066542 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */
  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80664ea:	2300      	movs	r3, #0
 80664ec:	613b      	str	r3, [r7, #16]
 80664ee:	4b18      	ldr	r3, [pc, #96]	@ (8066550 <HAL_SPI_MspInit+0x88>)
 80664f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80664f2:	4a17      	ldr	r2, [pc, #92]	@ (8066550 <HAL_SPI_MspInit+0x88>)
 80664f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80664f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80664fa:	4b15      	ldr	r3, [pc, #84]	@ (8066550 <HAL_SPI_MspInit+0x88>)
 80664fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80664fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8066502:	613b      	str	r3, [r7, #16]
 8066504:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8066506:	2300      	movs	r3, #0
 8066508:	60fb      	str	r3, [r7, #12]
 806650a:	4b11      	ldr	r3, [pc, #68]	@ (8066550 <HAL_SPI_MspInit+0x88>)
 806650c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 806650e:	4a10      	ldr	r2, [pc, #64]	@ (8066550 <HAL_SPI_MspInit+0x88>)
 8066510:	f043 0301 	orr.w	r3, r3, #1
 8066514:	6313      	str	r3, [r2, #48]	@ 0x30
 8066516:	4b0e      	ldr	r3, [pc, #56]	@ (8066550 <HAL_SPI_MspInit+0x88>)
 8066518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 806651a:	f003 0301 	and.w	r3, r3, #1
 806651e:	60fb      	str	r3, [r7, #12]
 8066520:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = MCP_SCK_Pin|MCP_MISO_Pin|MCP_MOSI_Pin;
 8066522:	23e0      	movs	r3, #224	@ 0xe0
 8066524:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8066526:	2302      	movs	r3, #2
 8066528:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 806652a:	2300      	movs	r3, #0
 806652c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 806652e:	2303      	movs	r3, #3
 8066530:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8066532:	2305      	movs	r3, #5
 8066534:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8066536:	f107 0314 	add.w	r3, r7, #20
 806653a:	4619      	mov	r1, r3
 806653c:	4805      	ldr	r0, [pc, #20]	@ (8066554 <HAL_SPI_MspInit+0x8c>)
 806653e:	f002 f9e7 	bl	8068910 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */
  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8066542:	bf00      	nop
 8066544:	3728      	adds	r7, #40	@ 0x28
 8066546:	46bd      	mov	sp, r7
 8066548:	bd80      	pop	{r7, pc}
 806654a:	bf00      	nop
 806654c:	40013000 	.word	0x40013000
 8066550:	40023800 	.word	0x40023800
 8066554:	40020000 	.word	0x40020000

08066558 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8066558:	b580      	push	{r7, lr}
 806655a:	b082      	sub	sp, #8
 806655c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 806655e:	2300      	movs	r3, #0
 8066560:	607b      	str	r3, [r7, #4]
 8066562:	4b21      	ldr	r3, [pc, #132]	@ (80665e8 <HAL_MspInit+0x90>)
 8066564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8066566:	4a20      	ldr	r2, [pc, #128]	@ (80665e8 <HAL_MspInit+0x90>)
 8066568:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 806656c:	6453      	str	r3, [r2, #68]	@ 0x44
 806656e:	4b1e      	ldr	r3, [pc, #120]	@ (80665e8 <HAL_MspInit+0x90>)
 8066570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8066572:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8066576:	607b      	str	r3, [r7, #4]
 8066578:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 806657a:	2300      	movs	r3, #0
 806657c:	603b      	str	r3, [r7, #0]
 806657e:	4b1a      	ldr	r3, [pc, #104]	@ (80665e8 <HAL_MspInit+0x90>)
 8066580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8066582:	4a19      	ldr	r2, [pc, #100]	@ (80665e8 <HAL_MspInit+0x90>)
 8066584:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8066588:	6413      	str	r3, [r2, #64]	@ 0x40
 806658a:	4b17      	ldr	r3, [pc, #92]	@ (80665e8 <HAL_MspInit+0x90>)
 806658c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 806658e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8066592:	603b      	str	r3, [r7, #0]
 8066594:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 6, 0);
 8066596:	2200      	movs	r2, #0
 8066598:	2106      	movs	r1, #6
 806659a:	f06f 000b 	mvn.w	r0, #11
 806659e:	f001 fc59 	bl	8067e54 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 6, 0);
 80665a2:	2200      	movs	r2, #0
 80665a4:	2106      	movs	r1, #6
 80665a6:	f06f 000a 	mvn.w	r0, #10
 80665aa:	f001 fc53 	bl	8067e54 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 6, 0);
 80665ae:	2200      	movs	r2, #0
 80665b0:	2106      	movs	r1, #6
 80665b2:	f06f 0009 	mvn.w	r0, #9
 80665b6:	f001 fc4d 	bl	8067e54 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 6, 0);
 80665ba:	2200      	movs	r2, #0
 80665bc:	2106      	movs	r1, #6
 80665be:	f06f 0004 	mvn.w	r0, #4
 80665c2:	f001 fc47 	bl	8067e54 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 6, 0);
 80665c6:	2200      	movs	r2, #0
 80665c8:	2106      	movs	r1, #6
 80665ca:	f06f 0003 	mvn.w	r0, #3
 80665ce:	f001 fc41 	bl	8067e54 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80665d2:	2200      	movs	r2, #0
 80665d4:	210f      	movs	r1, #15
 80665d6:	f06f 0001 	mvn.w	r0, #1
 80665da:	f001 fc3b 	bl	8067e54 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */

  /* USER CODE BEGIN MspInit 1 */
  /* USER CODE END MspInit 1 */
}
 80665de:	bf00      	nop
 80665e0:	3708      	adds	r7, #8
 80665e2:	46bd      	mov	sp, r7
 80665e4:	bd80      	pop	{r7, pc}
 80665e6:	bf00      	nop
 80665e8:	40023800 	.word	0x40023800

080665ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80665ec:	b580      	push	{r7, lr}
 80665ee:	b08e      	sub	sp, #56	@ 0x38
 80665f0:	af00      	add	r7, sp, #0
 80665f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80665f4:	2300      	movs	r3, #0
 80665f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80665f8:	2300      	movs	r3, #0
 80665fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80665fc:	2300      	movs	r3, #0
 80665fe:	60fb      	str	r3, [r7, #12]
 8066600:	4b33      	ldr	r3, [pc, #204]	@ (80666d0 <HAL_InitTick+0xe4>)
 8066602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8066604:	4a32      	ldr	r2, [pc, #200]	@ (80666d0 <HAL_InitTick+0xe4>)
 8066606:	f043 0308 	orr.w	r3, r3, #8
 806660a:	6413      	str	r3, [r2, #64]	@ 0x40
 806660c:	4b30      	ldr	r3, [pc, #192]	@ (80666d0 <HAL_InitTick+0xe4>)
 806660e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8066610:	f003 0308 	and.w	r3, r3, #8
 8066614:	60fb      	str	r3, [r7, #12]
 8066616:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8066618:	f107 0210 	add.w	r2, r7, #16
 806661c:	f107 0314 	add.w	r3, r7, #20
 8066620:	4611      	mov	r1, r2
 8066622:	4618      	mov	r0, r3
 8066624:	f003 fa9a 	bl	8069b5c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8066628:	6a3b      	ldr	r3, [r7, #32]
 806662a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 806662c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 806662e:	2b00      	cmp	r3, #0
 8066630:	d103      	bne.n	806663a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8066632:	f003 fa6b 	bl	8069b0c <HAL_RCC_GetPCLK1Freq>
 8066636:	6378      	str	r0, [r7, #52]	@ 0x34
 8066638:	e004      	b.n	8066644 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 806663a:	f003 fa67 	bl	8069b0c <HAL_RCC_GetPCLK1Freq>
 806663e:	4603      	mov	r3, r0
 8066640:	005b      	lsls	r3, r3, #1
 8066642:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8066644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8066646:	4a23      	ldr	r2, [pc, #140]	@ (80666d4 <HAL_InitTick+0xe8>)
 8066648:	fba2 2303 	umull	r2, r3, r2, r3
 806664c:	0c9b      	lsrs	r3, r3, #18
 806664e:	3b01      	subs	r3, #1
 8066650:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8066652:	4b21      	ldr	r3, [pc, #132]	@ (80666d8 <HAL_InitTick+0xec>)
 8066654:	4a21      	ldr	r2, [pc, #132]	@ (80666dc <HAL_InitTick+0xf0>)
 8066656:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8066658:	4b1f      	ldr	r3, [pc, #124]	@ (80666d8 <HAL_InitTick+0xec>)
 806665a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 806665e:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8066660:	4a1d      	ldr	r2, [pc, #116]	@ (80666d8 <HAL_InitTick+0xec>)
 8066662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8066664:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8066666:	4b1c      	ldr	r3, [pc, #112]	@ (80666d8 <HAL_InitTick+0xec>)
 8066668:	2200      	movs	r2, #0
 806666a:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 806666c:	4b1a      	ldr	r3, [pc, #104]	@ (80666d8 <HAL_InitTick+0xec>)
 806666e:	2200      	movs	r2, #0
 8066670:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8066672:	4b19      	ldr	r3, [pc, #100]	@ (80666d8 <HAL_InitTick+0xec>)
 8066674:	2200      	movs	r2, #0
 8066676:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8066678:	4817      	ldr	r0, [pc, #92]	@ (80666d8 <HAL_InitTick+0xec>)
 806667a:	f004 fb41 	bl	806ad00 <HAL_TIM_Base_Init>
 806667e:	4603      	mov	r3, r0
 8066680:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8066684:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8066688:	2b00      	cmp	r3, #0
 806668a:	d11b      	bne.n	80666c4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 806668c:	4812      	ldr	r0, [pc, #72]	@ (80666d8 <HAL_InitTick+0xec>)
 806668e:	f004 fc31 	bl	806aef4 <HAL_TIM_Base_Start_IT>
 8066692:	4603      	mov	r3, r0
 8066694:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8066698:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 806669c:	2b00      	cmp	r3, #0
 806669e:	d111      	bne.n	80666c4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80666a0:	2032      	movs	r0, #50	@ 0x32
 80666a2:	f001 fc03 	bl	8067eac <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80666a6:	687b      	ldr	r3, [r7, #4]
 80666a8:	2b0f      	cmp	r3, #15
 80666aa:	d808      	bhi.n	80666be <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 80666ac:	2200      	movs	r2, #0
 80666ae:	6879      	ldr	r1, [r7, #4]
 80666b0:	2032      	movs	r0, #50	@ 0x32
 80666b2:	f001 fbcf 	bl	8067e54 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80666b6:	4a0a      	ldr	r2, [pc, #40]	@ (80666e0 <HAL_InitTick+0xf4>)
 80666b8:	687b      	ldr	r3, [r7, #4]
 80666ba:	6013      	str	r3, [r2, #0]
 80666bc:	e002      	b.n	80666c4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80666be:	2301      	movs	r3, #1
 80666c0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80666c4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80666c8:	4618      	mov	r0, r3
 80666ca:	3738      	adds	r7, #56	@ 0x38
 80666cc:	46bd      	mov	sp, r7
 80666ce:	bd80      	pop	{r7, pc}
 80666d0:	40023800 	.word	0x40023800
 80666d4:	431bde83 	.word	0x431bde83
 80666d8:	20010abc 	.word	0x20010abc
 80666dc:	40000c00 	.word	0x40000c00
 80666e0:	20010124 	.word	0x20010124

080666e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80666e4:	b580      	push	{r7, lr}
 80666e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	EcuM_PerformReset(NMI_RESET);
 80666e8:	2024      	movs	r0, #36	@ 0x24
 80666ea:	f7fe fed5 	bl	8065498 <EcuM_PerformReset>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80666ee:	bf00      	nop
 80666f0:	bd80      	pop	{r7, pc}

080666f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80666f2:	b580      	push	{r7, lr}
 80666f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	EcuM_PerformReset(HARDFAULT_RESET);
 80666f6:	2025      	movs	r0, #37	@ 0x25
 80666f8:	f7fe fece 	bl	8065498 <EcuM_PerformReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80666fc:	bf00      	nop
 80666fe:	e7fd      	b.n	80666fc <HardFault_Handler+0xa>

08066700 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8066700:	b580      	push	{r7, lr}
 8066702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	EcuM_PerformReset(MEMMANAGE_RESET);
 8066704:	2026      	movs	r0, #38	@ 0x26
 8066706:	f7fe fec7 	bl	8065498 <EcuM_PerformReset>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 806670a:	bf00      	nop
 806670c:	e7fd      	b.n	806670a <MemManage_Handler+0xa>

0806670e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 806670e:	b580      	push	{r7, lr}
 8066710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	EcuM_PerformReset(BUSFAULT_RESET);
 8066712:	2027      	movs	r0, #39	@ 0x27
 8066714:	f7fe fec0 	bl	8065498 <EcuM_PerformReset>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8066718:	bf00      	nop
 806671a:	e7fd      	b.n	8066718 <BusFault_Handler+0xa>

0806671c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 806671c:	b580      	push	{r7, lr}
 806671e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	EcuM_PerformReset(USAGEFAULT_RESET);
 8066720:	2028      	movs	r0, #40	@ 0x28
 8066722:	f7fe feb9 	bl	8065498 <EcuM_PerformReset>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8066726:	bf00      	nop
 8066728:	e7fd      	b.n	8066726 <UsageFault_Handler+0xa>

0806672a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 806672a:	b480      	push	{r7}
 806672c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */
  /* USER CODE END DebugMonitor_IRQn 1 */
}
 806672e:	bf00      	nop
 8066730:	46bd      	mov	sp, r7
 8066732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8066736:	4770      	bx	lr

08066738 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8066738:	b580      	push	{r7, lr}
 806673a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */
  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 806673c:	f002 fc00 	bl	8068f40 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */
  /* USER CODE END PVD_IRQn 1 */
}
 8066740:	bf00      	nop
 8066742:	bd80      	pop	{r7, pc}

08066744 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8066744:	b580      	push	{r7, lr}
 8066746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */
  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8066748:	f001 fcc0 	bl	80680cc <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */
  /* USER CODE END FLASH_IRQn 1 */
}
 806674c:	bf00      	nop
 806674e:	bd80      	pop	{r7, pc}

08066750 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8066750:	b480      	push	{r7}
 8066752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RCC_IRQn 0 */
  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */
  /* USER CODE END RCC_IRQn 1 */
}
 8066754:	bf00      	nop
 8066756:	46bd      	mov	sp, r7
 8066758:	f85d 7b04 	ldr.w	r7, [sp], #4
 806675c:	4770      	bx	lr
	...

08066760 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8066760:	b580      	push	{r7, lr}
 8066762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */
  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8066764:	4802      	ldr	r0, [pc, #8]	@ (8066770 <ADC_IRQHandler+0x10>)
 8066766:	f000 fead 	bl	80674c4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */
  /* USER CODE END ADC_IRQn 1 */
}
 806676a:	bf00      	nop
 806676c:	bd80      	pop	{r7, pc}
 806676e:	bf00      	nop
 8066770:	2001082c 	.word	0x2001082c

08066774 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8066774:	b580      	push	{r7, lr}
 8066776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */
	ulHighFrequencyTimerTicks++;
 8066778:	4b04      	ldr	r3, [pc, #16]	@ (806678c <TIM1_BRK_TIM9_IRQHandler+0x18>)
 806677a:	681b      	ldr	r3, [r3, #0]
 806677c:	3301      	adds	r3, #1
 806677e:	4a03      	ldr	r2, [pc, #12]	@ (806678c <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8066780:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8066782:	4803      	ldr	r0, [pc, #12]	@ (8066790 <TIM1_BRK_TIM9_IRQHandler+0x1c>)
 8066784:	f004 fe78 	bl	806b478 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */
  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8066788:	bf00      	nop
 806678a:	bd80      	pop	{r7, pc}
 806678c:	20010a34 	.word	0x20010a34
 8066790:	20010cd8 	.word	0x20010cd8

08066794 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8066794:	b580      	push	{r7, lr}
 8066796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8066798:	4802      	ldr	r0, [pc, #8]	@ (80667a4 <TIM2_IRQHandler+0x10>)
 806679a:	f004 fe6d 	bl	806b478 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  /* USER CODE END TIM2_IRQn 1 */
}
 806679e:	bf00      	nop
 80667a0:	bd80      	pop	{r7, pc}
 80667a2:	bf00      	nop
 80667a4:	20010b70 	.word	0x20010b70

080667a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80667a8:	b580      	push	{r7, lr}
 80667aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80667ac:	4802      	ldr	r0, [pc, #8]	@ (80667b8 <TIM3_IRQHandler+0x10>)
 80667ae:	f004 fe63 	bl	806b478 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  /* USER CODE END TIM3_IRQn 1 */
}
 80667b2:	bf00      	nop
 80667b4:	bd80      	pop	{r7, pc}
 80667b6:	bf00      	nop
 80667b8:	20010c24 	.word	0x20010c24

080667bc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80667bc:	b580      	push	{r7, lr}
 80667be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */
  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80667c0:	4802      	ldr	r0, [pc, #8]	@ (80667cc <SPI1_IRQHandler+0x10>)
 80667c2:	f003 ffef 	bl	806a7a4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */
  /* USER CODE END SPI1_IRQn 1 */
}
 80667c6:	bf00      	nop
 80667c8:	bd80      	pop	{r7, pc}
 80667ca:	bf00      	nop
 80667cc:	20010a3c 	.word	0x20010a3c

080667d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80667d0:	b580      	push	{r7, lr}
 80667d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80667d4:	4802      	ldr	r0, [pc, #8]	@ (80667e0 <USART1_IRQHandler+0x10>)
 80667d6:	f006 fa45 	bl	806cc64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  /* USER CODE END USART1_IRQn 1 */
}
 80667da:	bf00      	nop
 80667dc:	bd80      	pop	{r7, pc}
 80667de:	bf00      	nop
 80667e0:	20010d8c 	.word	0x20010d8c

080667e4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80667e4:	b580      	push	{r7, lr}
 80667e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80667e8:	4802      	ldr	r0, [pc, #8]	@ (80667f4 <TIM5_IRQHandler+0x10>)
 80667ea:	f004 fe45 	bl	806b478 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */
  /* USER CODE END TIM5_IRQn 1 */
}
 80667ee:	bf00      	nop
 80667f0:	bd80      	pop	{r7, pc}
 80667f2:	bf00      	nop
 80667f4:	20010abc 	.word	0x20010abc

080667f8 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 80667f8:	b480      	push	{r7}
 80667fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FPU_IRQn 0 */
  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */
  /* USER CODE END FPU_IRQn 1 */
}
 80667fc:	bf00      	nop
 80667fe:	46bd      	mov	sp, r7
 8066800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8066804:	4770      	bx	lr
	...

08066808 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8066808:	b480      	push	{r7}
 806680a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 806680c:	4b06      	ldr	r3, [pc, #24]	@ (8066828 <SystemInit+0x20>)
 806680e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8066812:	4a05      	ldr	r2, [pc, #20]	@ (8066828 <SystemInit+0x20>)
 8066814:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8066818:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 806681c:	bf00      	nop
 806681e:	46bd      	mov	sp, r7
 8066820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8066824:	4770      	bx	lr
 8066826:	bf00      	nop
 8066828:	e000ed00 	.word	0xe000ed00

0806682c <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim9;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 806682c:	b580      	push	{r7, lr}
 806682e:	b08e      	sub	sp, #56	@ 0x38
 8066830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8066832:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8066836:	2200      	movs	r2, #0
 8066838:	601a      	str	r2, [r3, #0]
 806683a:	605a      	str	r2, [r3, #4]
 806683c:	609a      	str	r2, [r3, #8]
 806683e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8066840:	f107 0320 	add.w	r3, r7, #32
 8066844:	2200      	movs	r2, #0
 8066846:	601a      	str	r2, [r3, #0]
 8066848:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 806684a:	1d3b      	adds	r3, r7, #4
 806684c:	2200      	movs	r2, #0
 806684e:	601a      	str	r2, [r3, #0]
 8066850:	605a      	str	r2, [r3, #4]
 8066852:	609a      	str	r2, [r3, #8]
 8066854:	60da      	str	r2, [r3, #12]
 8066856:	611a      	str	r2, [r3, #16]
 8066858:	615a      	str	r2, [r3, #20]
 806685a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 806685c:	4b2d      	ldr	r3, [pc, #180]	@ (8066914 <MX_TIM2_Init+0xe8>)
 806685e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8066862:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 5119;
 8066864:	4b2b      	ldr	r3, [pc, #172]	@ (8066914 <MX_TIM2_Init+0xe8>)
 8066866:	f241 32ff 	movw	r2, #5119	@ 0x13ff
 806686a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 806686c:	4b29      	ldr	r3, [pc, #164]	@ (8066914 <MX_TIM2_Init+0xe8>)
 806686e:	2200      	movs	r2, #0
 8066870:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 199;
 8066872:	4b28      	ldr	r3, [pc, #160]	@ (8066914 <MX_TIM2_Init+0xe8>)
 8066874:	22c7      	movs	r2, #199	@ 0xc7
 8066876:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8066878:	4b26      	ldr	r3, [pc, #152]	@ (8066914 <MX_TIM2_Init+0xe8>)
 806687a:	2200      	movs	r2, #0
 806687c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 806687e:	4b25      	ldr	r3, [pc, #148]	@ (8066914 <MX_TIM2_Init+0xe8>)
 8066880:	2200      	movs	r2, #0
 8066882:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8066884:	4823      	ldr	r0, [pc, #140]	@ (8066914 <MX_TIM2_Init+0xe8>)
 8066886:	f004 fa3b 	bl	806ad00 <HAL_TIM_Base_Init>
 806688a:	4603      	mov	r3, r0
 806688c:	2b00      	cmp	r3, #0
 806688e:	d001      	beq.n	8066894 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8066890:	f7ff fdd2 	bl	8066438 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8066894:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8066898:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 806689a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 806689e:	4619      	mov	r1, r3
 80668a0:	481c      	ldr	r0, [pc, #112]	@ (8066914 <MX_TIM2_Init+0xe8>)
 80668a2:	f005 f89f 	bl	806b9e4 <HAL_TIM_ConfigClockSource>
 80668a6:	4603      	mov	r3, r0
 80668a8:	2b00      	cmp	r3, #0
 80668aa:	d001      	beq.n	80668b0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80668ac:	f7ff fdc4 	bl	8066438 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80668b0:	4818      	ldr	r0, [pc, #96]	@ (8066914 <MX_TIM2_Init+0xe8>)
 80668b2:	f004 fbb1 	bl	806b018 <HAL_TIM_PWM_Init>
 80668b6:	4603      	mov	r3, r0
 80668b8:	2b00      	cmp	r3, #0
 80668ba:	d001      	beq.n	80668c0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80668bc:	f7ff fdbc 	bl	8066438 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80668c0:	2300      	movs	r3, #0
 80668c2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80668c4:	2300      	movs	r3, #0
 80668c6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80668c8:	f107 0320 	add.w	r3, r7, #32
 80668cc:	4619      	mov	r1, r3
 80668ce:	4811      	ldr	r0, [pc, #68]	@ (8066914 <MX_TIM2_Init+0xe8>)
 80668d0:	f006 f800 	bl	806c8d4 <HAL_TIMEx_MasterConfigSynchronization>
 80668d4:	4603      	mov	r3, r0
 80668d6:	2b00      	cmp	r3, #0
 80668d8:	d001      	beq.n	80668de <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80668da:	f7ff fdad 	bl	8066438 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80668de:	2360      	movs	r3, #96	@ 0x60
 80668e0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80668e2:	2300      	movs	r3, #0
 80668e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80668e6:	2300      	movs	r3, #0
 80668e8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80668ea:	2304      	movs	r3, #4
 80668ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80668ee:	1d3b      	adds	r3, r7, #4
 80668f0:	2200      	movs	r2, #0
 80668f2:	4619      	mov	r1, r3
 80668f4:	4807      	ldr	r0, [pc, #28]	@ (8066914 <MX_TIM2_Init+0xe8>)
 80668f6:	f004 fecf 	bl	806b698 <HAL_TIM_PWM_ConfigChannel>
 80668fa:	4603      	mov	r3, r0
 80668fc:	2b00      	cmp	r3, #0
 80668fe:	d001      	beq.n	8066904 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8066900:	f7ff fd9a 	bl	8066438 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8066904:	4803      	ldr	r0, [pc, #12]	@ (8066914 <MX_TIM2_Init+0xe8>)
 8066906:	f000 f925 	bl	8066b54 <HAL_TIM_MspPostInit>

}
 806690a:	bf00      	nop
 806690c:	3738      	adds	r7, #56	@ 0x38
 806690e:	46bd      	mov	sp, r7
 8066910:	bd80      	pop	{r7, pc}
 8066912:	bf00      	nop
 8066914:	20010b70 	.word	0x20010b70

08066918 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8066918:	b580      	push	{r7, lr}
 806691a:	b08e      	sub	sp, #56	@ 0x38
 806691c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */
  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 806691e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8066922:	2200      	movs	r2, #0
 8066924:	601a      	str	r2, [r3, #0]
 8066926:	605a      	str	r2, [r3, #4]
 8066928:	609a      	str	r2, [r3, #8]
 806692a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 806692c:	f107 0320 	add.w	r3, r7, #32
 8066930:	2200      	movs	r2, #0
 8066932:	601a      	str	r2, [r3, #0]
 8066934:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8066936:	1d3b      	adds	r3, r7, #4
 8066938:	2200      	movs	r2, #0
 806693a:	601a      	str	r2, [r3, #0]
 806693c:	605a      	str	r2, [r3, #4]
 806693e:	609a      	str	r2, [r3, #8]
 8066940:	60da      	str	r2, [r3, #12]
 8066942:	611a      	str	r2, [r3, #16]
 8066944:	615a      	str	r2, [r3, #20]
 8066946:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8066948:	4b3d      	ldr	r3, [pc, #244]	@ (8066a40 <MX_TIM3_Init+0x128>)
 806694a:	4a3e      	ldr	r2, [pc, #248]	@ (8066a44 <MX_TIM3_Init+0x12c>)
 806694c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 806694e:	4b3c      	ldr	r3, [pc, #240]	@ (8066a40 <MX_TIM3_Init+0x128>)
 8066950:	2263      	movs	r2, #99	@ 0x63
 8066952:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8066954:	4b3a      	ldr	r3, [pc, #232]	@ (8066a40 <MX_TIM3_Init+0x128>)
 8066956:	2200      	movs	r2, #0
 8066958:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 806695a:	4b39      	ldr	r3, [pc, #228]	@ (8066a40 <MX_TIM3_Init+0x128>)
 806695c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8066960:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8066962:	4b37      	ldr	r3, [pc, #220]	@ (8066a40 <MX_TIM3_Init+0x128>)
 8066964:	2200      	movs	r2, #0
 8066966:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8066968:	4b35      	ldr	r3, [pc, #212]	@ (8066a40 <MX_TIM3_Init+0x128>)
 806696a:	2200      	movs	r2, #0
 806696c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 806696e:	4834      	ldr	r0, [pc, #208]	@ (8066a40 <MX_TIM3_Init+0x128>)
 8066970:	f004 f9c6 	bl	806ad00 <HAL_TIM_Base_Init>
 8066974:	4603      	mov	r3, r0
 8066976:	2b00      	cmp	r3, #0
 8066978:	d001      	beq.n	806697e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 806697a:	f7ff fd5d 	bl	8066438 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 806697e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8066982:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8066984:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8066988:	4619      	mov	r1, r3
 806698a:	482d      	ldr	r0, [pc, #180]	@ (8066a40 <MX_TIM3_Init+0x128>)
 806698c:	f005 f82a 	bl	806b9e4 <HAL_TIM_ConfigClockSource>
 8066990:	4603      	mov	r3, r0
 8066992:	2b00      	cmp	r3, #0
 8066994:	d001      	beq.n	806699a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8066996:	f7ff fd4f 	bl	8066438 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 806699a:	4829      	ldr	r0, [pc, #164]	@ (8066a40 <MX_TIM3_Init+0x128>)
 806699c:	f004 fb3c 	bl	806b018 <HAL_TIM_PWM_Init>
 80669a0:	4603      	mov	r3, r0
 80669a2:	2b00      	cmp	r3, #0
 80669a4:	d001      	beq.n	80669aa <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80669a6:	f7ff fd47 	bl	8066438 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80669aa:	2300      	movs	r3, #0
 80669ac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80669ae:	2300      	movs	r3, #0
 80669b0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80669b2:	f107 0320 	add.w	r3, r7, #32
 80669b6:	4619      	mov	r1, r3
 80669b8:	4821      	ldr	r0, [pc, #132]	@ (8066a40 <MX_TIM3_Init+0x128>)
 80669ba:	f005 ff8b 	bl	806c8d4 <HAL_TIMEx_MasterConfigSynchronization>
 80669be:	4603      	mov	r3, r0
 80669c0:	2b00      	cmp	r3, #0
 80669c2:	d001      	beq.n	80669c8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80669c4:	f7ff fd38 	bl	8066438 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80669c8:	2360      	movs	r3, #96	@ 0x60
 80669ca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80669cc:	2300      	movs	r3, #0
 80669ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80669d0:	2300      	movs	r3, #0
 80669d2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80669d4:	2300      	movs	r3, #0
 80669d6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80669d8:	1d3b      	adds	r3, r7, #4
 80669da:	2200      	movs	r2, #0
 80669dc:	4619      	mov	r1, r3
 80669de:	4818      	ldr	r0, [pc, #96]	@ (8066a40 <MX_TIM3_Init+0x128>)
 80669e0:	f004 fe5a 	bl	806b698 <HAL_TIM_PWM_ConfigChannel>
 80669e4:	4603      	mov	r3, r0
 80669e6:	2b00      	cmp	r3, #0
 80669e8:	d001      	beq.n	80669ee <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80669ea:	f7ff fd25 	bl	8066438 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80669ee:	1d3b      	adds	r3, r7, #4
 80669f0:	2204      	movs	r2, #4
 80669f2:	4619      	mov	r1, r3
 80669f4:	4812      	ldr	r0, [pc, #72]	@ (8066a40 <MX_TIM3_Init+0x128>)
 80669f6:	f004 fe4f 	bl	806b698 <HAL_TIM_PWM_ConfigChannel>
 80669fa:	4603      	mov	r3, r0
 80669fc:	2b00      	cmp	r3, #0
 80669fe:	d001      	beq.n	8066a04 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8066a00:	f7ff fd1a 	bl	8066438 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8066a04:	1d3b      	adds	r3, r7, #4
 8066a06:	2208      	movs	r2, #8
 8066a08:	4619      	mov	r1, r3
 8066a0a:	480d      	ldr	r0, [pc, #52]	@ (8066a40 <MX_TIM3_Init+0x128>)
 8066a0c:	f004 fe44 	bl	806b698 <HAL_TIM_PWM_ConfigChannel>
 8066a10:	4603      	mov	r3, r0
 8066a12:	2b00      	cmp	r3, #0
 8066a14:	d001      	beq.n	8066a1a <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8066a16:	f7ff fd0f 	bl	8066438 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8066a1a:	1d3b      	adds	r3, r7, #4
 8066a1c:	220c      	movs	r2, #12
 8066a1e:	4619      	mov	r1, r3
 8066a20:	4807      	ldr	r0, [pc, #28]	@ (8066a40 <MX_TIM3_Init+0x128>)
 8066a22:	f004 fe39 	bl	806b698 <HAL_TIM_PWM_ConfigChannel>
 8066a26:	4603      	mov	r3, r0
 8066a28:	2b00      	cmp	r3, #0
 8066a2a:	d001      	beq.n	8066a30 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8066a2c:	f7ff fd04 	bl	8066438 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8066a30:	4803      	ldr	r0, [pc, #12]	@ (8066a40 <MX_TIM3_Init+0x128>)
 8066a32:	f000 f88f 	bl	8066b54 <HAL_TIM_MspPostInit>

}
 8066a36:	bf00      	nop
 8066a38:	3738      	adds	r7, #56	@ 0x38
 8066a3a:	46bd      	mov	sp, r7
 8066a3c:	bd80      	pop	{r7, pc}
 8066a3e:	bf00      	nop
 8066a40:	20010c24 	.word	0x20010c24
 8066a44:	40000400 	.word	0x40000400

08066a48 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8066a48:	b580      	push	{r7, lr}
 8066a4a:	b084      	sub	sp, #16
 8066a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */
  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8066a4e:	463b      	mov	r3, r7
 8066a50:	2200      	movs	r2, #0
 8066a52:	601a      	str	r2, [r3, #0]
 8066a54:	605a      	str	r2, [r3, #4]
 8066a56:	609a      	str	r2, [r3, #8]
 8066a58:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */
  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8066a5a:	4b16      	ldr	r3, [pc, #88]	@ (8066ab4 <MX_TIM9_Init+0x6c>)
 8066a5c:	4a16      	ldr	r2, [pc, #88]	@ (8066ab8 <MX_TIM9_Init+0x70>)
 8066a5e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 99;
 8066a60:	4b14      	ldr	r3, [pc, #80]	@ (8066ab4 <MX_TIM9_Init+0x6c>)
 8066a62:	2263      	movs	r2, #99	@ 0x63
 8066a64:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8066a66:	4b13      	ldr	r3, [pc, #76]	@ (8066ab4 <MX_TIM9_Init+0x6c>)
 8066a68:	2200      	movs	r2, #0
 8066a6a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 8066a6c:	4b11      	ldr	r3, [pc, #68]	@ (8066ab4 <MX_TIM9_Init+0x6c>)
 8066a6e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8066a72:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8066a74:	4b0f      	ldr	r3, [pc, #60]	@ (8066ab4 <MX_TIM9_Init+0x6c>)
 8066a76:	2200      	movs	r2, #0
 8066a78:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8066a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8066ab4 <MX_TIM9_Init+0x6c>)
 8066a7c:	2200      	movs	r2, #0
 8066a7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8066a80:	480c      	ldr	r0, [pc, #48]	@ (8066ab4 <MX_TIM9_Init+0x6c>)
 8066a82:	f004 f93d 	bl	806ad00 <HAL_TIM_Base_Init>
 8066a86:	4603      	mov	r3, r0
 8066a88:	2b00      	cmp	r3, #0
 8066a8a:	d001      	beq.n	8066a90 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8066a8c:	f7ff fcd4 	bl	8066438 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8066a90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8066a94:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8066a96:	463b      	mov	r3, r7
 8066a98:	4619      	mov	r1, r3
 8066a9a:	4806      	ldr	r0, [pc, #24]	@ (8066ab4 <MX_TIM9_Init+0x6c>)
 8066a9c:	f004 ffa2 	bl	806b9e4 <HAL_TIM_ConfigClockSource>
 8066aa0:	4603      	mov	r3, r0
 8066aa2:	2b00      	cmp	r3, #0
 8066aa4:	d001      	beq.n	8066aaa <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8066aa6:	f7ff fcc7 	bl	8066438 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */
  /* USER CODE END TIM9_Init 2 */

}
 8066aaa:	bf00      	nop
 8066aac:	3710      	adds	r7, #16
 8066aae:	46bd      	mov	sp, r7
 8066ab0:	bd80      	pop	{r7, pc}
 8066ab2:	bf00      	nop
 8066ab4:	20010cd8 	.word	0x20010cd8
 8066ab8:	40014000 	.word	0x40014000

08066abc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8066abc:	b480      	push	{r7}
 8066abe:	b087      	sub	sp, #28
 8066ac0:	af00      	add	r7, sp, #0
 8066ac2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8066ac4:	687b      	ldr	r3, [r7, #4]
 8066ac6:	681b      	ldr	r3, [r3, #0]
 8066ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8066acc:	d10e      	bne.n	8066aec <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */
  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8066ace:	2300      	movs	r3, #0
 8066ad0:	617b      	str	r3, [r7, #20]
 8066ad2:	4b1d      	ldr	r3, [pc, #116]	@ (8066b48 <HAL_TIM_Base_MspInit+0x8c>)
 8066ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8066ad6:	4a1c      	ldr	r2, [pc, #112]	@ (8066b48 <HAL_TIM_Base_MspInit+0x8c>)
 8066ad8:	f043 0301 	orr.w	r3, r3, #1
 8066adc:	6413      	str	r3, [r2, #64]	@ 0x40
 8066ade:	4b1a      	ldr	r3, [pc, #104]	@ (8066b48 <HAL_TIM_Base_MspInit+0x8c>)
 8066ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8066ae2:	f003 0301 	and.w	r3, r3, #1
 8066ae6:	617b      	str	r3, [r7, #20]
 8066ae8:	697b      	ldr	r3, [r7, #20]
    /* TIM9 clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */
  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8066aea:	e026      	b.n	8066b3a <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM3)
 8066aec:	687b      	ldr	r3, [r7, #4]
 8066aee:	681b      	ldr	r3, [r3, #0]
 8066af0:	4a16      	ldr	r2, [pc, #88]	@ (8066b4c <HAL_TIM_Base_MspInit+0x90>)
 8066af2:	4293      	cmp	r3, r2
 8066af4:	d10e      	bne.n	8066b14 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8066af6:	2300      	movs	r3, #0
 8066af8:	613b      	str	r3, [r7, #16]
 8066afa:	4b13      	ldr	r3, [pc, #76]	@ (8066b48 <HAL_TIM_Base_MspInit+0x8c>)
 8066afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8066afe:	4a12      	ldr	r2, [pc, #72]	@ (8066b48 <HAL_TIM_Base_MspInit+0x8c>)
 8066b00:	f043 0302 	orr.w	r3, r3, #2
 8066b04:	6413      	str	r3, [r2, #64]	@ 0x40
 8066b06:	4b10      	ldr	r3, [pc, #64]	@ (8066b48 <HAL_TIM_Base_MspInit+0x8c>)
 8066b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8066b0a:	f003 0302 	and.w	r3, r3, #2
 8066b0e:	613b      	str	r3, [r7, #16]
 8066b10:	693b      	ldr	r3, [r7, #16]
}
 8066b12:	e012      	b.n	8066b3a <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM9)
 8066b14:	687b      	ldr	r3, [r7, #4]
 8066b16:	681b      	ldr	r3, [r3, #0]
 8066b18:	4a0d      	ldr	r2, [pc, #52]	@ (8066b50 <HAL_TIM_Base_MspInit+0x94>)
 8066b1a:	4293      	cmp	r3, r2
 8066b1c:	d10d      	bne.n	8066b3a <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8066b1e:	2300      	movs	r3, #0
 8066b20:	60fb      	str	r3, [r7, #12]
 8066b22:	4b09      	ldr	r3, [pc, #36]	@ (8066b48 <HAL_TIM_Base_MspInit+0x8c>)
 8066b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8066b26:	4a08      	ldr	r2, [pc, #32]	@ (8066b48 <HAL_TIM_Base_MspInit+0x8c>)
 8066b28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8066b2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8066b2e:	4b06      	ldr	r3, [pc, #24]	@ (8066b48 <HAL_TIM_Base_MspInit+0x8c>)
 8066b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8066b32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8066b36:	60fb      	str	r3, [r7, #12]
 8066b38:	68fb      	ldr	r3, [r7, #12]
}
 8066b3a:	bf00      	nop
 8066b3c:	371c      	adds	r7, #28
 8066b3e:	46bd      	mov	sp, r7
 8066b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8066b44:	4770      	bx	lr
 8066b46:	bf00      	nop
 8066b48:	40023800 	.word	0x40023800
 8066b4c:	40000400 	.word	0x40000400
 8066b50:	40014000 	.word	0x40014000

08066b54 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8066b54:	b580      	push	{r7, lr}
 8066b56:	b08a      	sub	sp, #40	@ 0x28
 8066b58:	af00      	add	r7, sp, #0
 8066b5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8066b5c:	f107 0314 	add.w	r3, r7, #20
 8066b60:	2200      	movs	r2, #0
 8066b62:	601a      	str	r2, [r3, #0]
 8066b64:	605a      	str	r2, [r3, #4]
 8066b66:	609a      	str	r2, [r3, #8]
 8066b68:	60da      	str	r2, [r3, #12]
 8066b6a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8066b6c:	687b      	ldr	r3, [r7, #4]
 8066b6e:	681b      	ldr	r3, [r3, #0]
 8066b70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8066b74:	d11f      	bne.n	8066bb6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */
  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8066b76:	2300      	movs	r3, #0
 8066b78:	613b      	str	r3, [r7, #16]
 8066b7a:	4b31      	ldr	r3, [pc, #196]	@ (8066c40 <HAL_TIM_MspPostInit+0xec>)
 8066b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8066b7e:	4a30      	ldr	r2, [pc, #192]	@ (8066c40 <HAL_TIM_MspPostInit+0xec>)
 8066b80:	f043 0301 	orr.w	r3, r3, #1
 8066b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8066b86:	4b2e      	ldr	r3, [pc, #184]	@ (8066c40 <HAL_TIM_MspPostInit+0xec>)
 8066b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8066b8a:	f003 0301 	and.w	r3, r3, #1
 8066b8e:	613b      	str	r3, [r7, #16]
 8066b90:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PWM_CLIMAFAN_Pin;
 8066b92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8066b96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8066b98:	2302      	movs	r3, #2
 8066b9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8066b9c:	2301      	movs	r3, #1
 8066b9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8066ba0:	2303      	movs	r3, #3
 8066ba2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8066ba4:	2301      	movs	r3, #1
 8066ba6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_CLIMAFAN_GPIO_Port, &GPIO_InitStruct);
 8066ba8:	f107 0314 	add.w	r3, r7, #20
 8066bac:	4619      	mov	r1, r3
 8066bae:	4825      	ldr	r0, [pc, #148]	@ (8066c44 <HAL_TIM_MspPostInit+0xf0>)
 8066bb0:	f001 feae 	bl	8068910 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspPostInit 1 */
  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8066bb4:	e040      	b.n	8066c38 <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM3)
 8066bb6:	687b      	ldr	r3, [r7, #4]
 8066bb8:	681b      	ldr	r3, [r3, #0]
 8066bba:	4a23      	ldr	r2, [pc, #140]	@ (8066c48 <HAL_TIM_MspPostInit+0xf4>)
 8066bbc:	4293      	cmp	r3, r2
 8066bbe:	d13b      	bne.n	8066c38 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8066bc0:	2300      	movs	r3, #0
 8066bc2:	60fb      	str	r3, [r7, #12]
 8066bc4:	4b1e      	ldr	r3, [pc, #120]	@ (8066c40 <HAL_TIM_MspPostInit+0xec>)
 8066bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8066bc8:	4a1d      	ldr	r2, [pc, #116]	@ (8066c40 <HAL_TIM_MspPostInit+0xec>)
 8066bca:	f043 0302 	orr.w	r3, r3, #2
 8066bce:	6313      	str	r3, [r2, #48]	@ 0x30
 8066bd0:	4b1b      	ldr	r3, [pc, #108]	@ (8066c40 <HAL_TIM_MspPostInit+0xec>)
 8066bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8066bd4:	f003 0302 	and.w	r3, r3, #2
 8066bd8:	60fb      	str	r3, [r7, #12]
 8066bda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8066bdc:	2300      	movs	r3, #0
 8066bde:	60bb      	str	r3, [r7, #8]
 8066be0:	4b17      	ldr	r3, [pc, #92]	@ (8066c40 <HAL_TIM_MspPostInit+0xec>)
 8066be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8066be4:	4a16      	ldr	r2, [pc, #88]	@ (8066c40 <HAL_TIM_MspPostInit+0xec>)
 8066be6:	f043 0304 	orr.w	r3, r3, #4
 8066bea:	6313      	str	r3, [r2, #48]	@ 0x30
 8066bec:	4b14      	ldr	r3, [pc, #80]	@ (8066c40 <HAL_TIM_MspPostInit+0xec>)
 8066bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8066bf0:	f003 0304 	and.w	r3, r3, #4
 8066bf4:	60bb      	str	r3, [r7, #8]
 8066bf6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_WWL_Pin|PWM_WWR_Pin;
 8066bf8:	2303      	movs	r3, #3
 8066bfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8066bfc:	2302      	movs	r3, #2
 8066bfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8066c00:	2301      	movs	r3, #1
 8066c02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8066c04:	2303      	movs	r3, #3
 8066c06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8066c08:	2302      	movs	r3, #2
 8066c0a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8066c0c:	f107 0314 	add.w	r3, r7, #20
 8066c10:	4619      	mov	r1, r3
 8066c12:	480e      	ldr	r0, [pc, #56]	@ (8066c4c <HAL_TIM_MspPostInit+0xf8>)
 8066c14:	f001 fe7c 	bl	8068910 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_DLR_Pin|PWM_DLL_Pin;
 8066c18:	23c0      	movs	r3, #192	@ 0xc0
 8066c1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8066c1c:	2302      	movs	r3, #2
 8066c1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8066c20:	2301      	movs	r3, #1
 8066c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8066c24:	2303      	movs	r3, #3
 8066c26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8066c28:	2302      	movs	r3, #2
 8066c2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8066c2c:	f107 0314 	add.w	r3, r7, #20
 8066c30:	4619      	mov	r1, r3
 8066c32:	4807      	ldr	r0, [pc, #28]	@ (8066c50 <HAL_TIM_MspPostInit+0xfc>)
 8066c34:	f001 fe6c 	bl	8068910 <HAL_GPIO_Init>
}
 8066c38:	bf00      	nop
 8066c3a:	3728      	adds	r7, #40	@ 0x28
 8066c3c:	46bd      	mov	sp, r7
 8066c3e:	bd80      	pop	{r7, pc}
 8066c40:	40023800 	.word	0x40023800
 8066c44:	40020000 	.word	0x40020000
 8066c48:	40000400 	.word	0x40000400
 8066c4c:	40020400 	.word	0x40020400
 8066c50:	40020800 	.word	0x40020800

08066c54 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8066c54:	b580      	push	{r7, lr}
 8066c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_Init 0 */
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */
  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8066c58:	4b11      	ldr	r3, [pc, #68]	@ (8066ca0 <MX_USART1_UART_Init+0x4c>)
 8066c5a:	4a12      	ldr	r2, [pc, #72]	@ (8066ca4 <MX_USART1_UART_Init+0x50>)
 8066c5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8066c5e:	4b10      	ldr	r3, [pc, #64]	@ (8066ca0 <MX_USART1_UART_Init+0x4c>)
 8066c60:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8066c64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8066c66:	4b0e      	ldr	r3, [pc, #56]	@ (8066ca0 <MX_USART1_UART_Init+0x4c>)
 8066c68:	2200      	movs	r2, #0
 8066c6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8066c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8066ca0 <MX_USART1_UART_Init+0x4c>)
 8066c6e:	2200      	movs	r2, #0
 8066c70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8066c72:	4b0b      	ldr	r3, [pc, #44]	@ (8066ca0 <MX_USART1_UART_Init+0x4c>)
 8066c74:	2200      	movs	r2, #0
 8066c76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8066c78:	4b09      	ldr	r3, [pc, #36]	@ (8066ca0 <MX_USART1_UART_Init+0x4c>)
 8066c7a:	2204      	movs	r2, #4
 8066c7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8066c7e:	4b08      	ldr	r3, [pc, #32]	@ (8066ca0 <MX_USART1_UART_Init+0x4c>)
 8066c80:	2200      	movs	r2, #0
 8066c82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8066c84:	4b06      	ldr	r3, [pc, #24]	@ (8066ca0 <MX_USART1_UART_Init+0x4c>)
 8066c86:	2200      	movs	r2, #0
 8066c88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8066c8a:	4805      	ldr	r0, [pc, #20]	@ (8066ca0 <MX_USART1_UART_Init+0x4c>)
 8066c8c:	f005 fefe 	bl	806ca8c <HAL_UART_Init>
 8066c90:	4603      	mov	r3, r0
 8066c92:	2b00      	cmp	r3, #0
 8066c94:	d001      	beq.n	8066c9a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8066c96:	f7ff fbcf 	bl	8066438 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */

}
 8066c9a:	bf00      	nop
 8066c9c:	bd80      	pop	{r7, pc}
 8066c9e:	bf00      	nop
 8066ca0:	20010d8c 	.word	0x20010d8c
 8066ca4:	40011000 	.word	0x40011000

08066ca8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8066ca8:	b580      	push	{r7, lr}
 8066caa:	b08a      	sub	sp, #40	@ 0x28
 8066cac:	af00      	add	r7, sp, #0
 8066cae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8066cb0:	f107 0314 	add.w	r3, r7, #20
 8066cb4:	2200      	movs	r2, #0
 8066cb6:	601a      	str	r2, [r3, #0]
 8066cb8:	605a      	str	r2, [r3, #4]
 8066cba:	609a      	str	r2, [r3, #8]
 8066cbc:	60da      	str	r2, [r3, #12]
 8066cbe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8066cc0:	687b      	ldr	r3, [r7, #4]
 8066cc2:	681b      	ldr	r3, [r3, #0]
 8066cc4:	4a19      	ldr	r2, [pc, #100]	@ (8066d2c <HAL_UART_MspInit+0x84>)
 8066cc6:	4293      	cmp	r3, r2
 8066cc8:	d12c      	bne.n	8066d24 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */
  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8066cca:	2300      	movs	r3, #0
 8066ccc:	613b      	str	r3, [r7, #16]
 8066cce:	4b18      	ldr	r3, [pc, #96]	@ (8066d30 <HAL_UART_MspInit+0x88>)
 8066cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8066cd2:	4a17      	ldr	r2, [pc, #92]	@ (8066d30 <HAL_UART_MspInit+0x88>)
 8066cd4:	f043 0310 	orr.w	r3, r3, #16
 8066cd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8066cda:	4b15      	ldr	r3, [pc, #84]	@ (8066d30 <HAL_UART_MspInit+0x88>)
 8066cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8066cde:	f003 0310 	and.w	r3, r3, #16
 8066ce2:	613b      	str	r3, [r7, #16]
 8066ce4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8066ce6:	2300      	movs	r3, #0
 8066ce8:	60fb      	str	r3, [r7, #12]
 8066cea:	4b11      	ldr	r3, [pc, #68]	@ (8066d30 <HAL_UART_MspInit+0x88>)
 8066cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8066cee:	4a10      	ldr	r2, [pc, #64]	@ (8066d30 <HAL_UART_MspInit+0x88>)
 8066cf0:	f043 0301 	orr.w	r3, r3, #1
 8066cf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8066cf6:	4b0e      	ldr	r3, [pc, #56]	@ (8066d30 <HAL_UART_MspInit+0x88>)
 8066cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8066cfa:	f003 0301 	and.w	r3, r3, #1
 8066cfe:	60fb      	str	r3, [r7, #12]
 8066d00:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = NUCLEO_RX_UNUSED_Pin|TX_HC05_Pin;
 8066d02:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8066d06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8066d08:	2302      	movs	r3, #2
 8066d0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8066d0c:	2300      	movs	r3, #0
 8066d0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8066d10:	2303      	movs	r3, #3
 8066d12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8066d14:	2307      	movs	r3, #7
 8066d16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8066d18:	f107 0314 	add.w	r3, r7, #20
 8066d1c:	4619      	mov	r1, r3
 8066d1e:	4805      	ldr	r0, [pc, #20]	@ (8066d34 <HAL_UART_MspInit+0x8c>)
 8066d20:	f001 fdf6 	bl	8068910 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */
  /* USER CODE END USART1_MspInit 1 */
  }
}
 8066d24:	bf00      	nop
 8066d26:	3728      	adds	r7, #40	@ 0x28
 8066d28:	46bd      	mov	sp, r7
 8066d2a:	bd80      	pop	{r7, pc}
 8066d2c:	40011000 	.word	0x40011000
 8066d30:	40023800 	.word	0x40023800
 8066d34:	40020000 	.word	0x40020000

08066d38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8066d38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8066d70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8066d3c:	480d      	ldr	r0, [pc, #52]	@ (8066d74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8066d3e:	490e      	ldr	r1, [pc, #56]	@ (8066d78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8066d40:	4a0e      	ldr	r2, [pc, #56]	@ (8066d7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8066d42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8066d44:	e002      	b.n	8066d4c <LoopCopyDataInit>

08066d46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8066d46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8066d48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8066d4a:	3304      	adds	r3, #4

08066d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8066d4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8066d4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8066d50:	d3f9      	bcc.n	8066d46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8066d52:	4a0b      	ldr	r2, [pc, #44]	@ (8066d80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8066d54:	4c0b      	ldr	r4, [pc, #44]	@ (8066d84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8066d56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8066d58:	e001      	b.n	8066d5e <LoopFillZerobss>

08066d5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8066d5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8066d5c:	3204      	adds	r2, #4

08066d5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8066d5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8066d60:	d3fb      	bcc.n	8066d5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8066d62:	f7ff fd51 	bl	8066808 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8066d66:	f00a fac7 	bl	80712f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8066d6a:	f7ff fa69 	bl	8066240 <main>
  bx  lr    
 8066d6e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8066d70:	2001fc00 	.word	0x2001fc00
  ldr r0, =_sdata
 8066d74:	20010000 	.word	0x20010000
  ldr r1, =_edata
 8066d78:	20010180 	.word	0x20010180
  ldr r2, =_sidata
 8066d7c:	08071c00 	.word	0x08071c00
  ldr r2, =_sbss
 8066d80:	20010180 	.word	0x20010180
  ldr r4, =_ebss
 8066d84:	200157ac 	.word	0x200157ac

08066d88 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8066d88:	e7fe      	b.n	8066d88 <DMA1_Stream0_IRQHandler>

08066d8a <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8066d8a:	b580      	push	{r7, lr}
 8066d8c:	b084      	sub	sp, #16
 8066d8e:	af00      	add	r7, sp, #0
 8066d90:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8066d92:	687b      	ldr	r3, [r7, #4]
 8066d94:	2b00      	cmp	r3, #0
 8066d96:	d105      	bne.n	8066da4 <stm32_lock_acquire+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8066d98:	b672      	cpsid	i
}
 8066d9a:	bf00      	nop
 8066d9c:	f7ff fb4c 	bl	8066438 <Error_Handler>
 8066da0:	bf00      	nop
 8066da2:	e7fd      	b.n	8066da0 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8066da4:	687b      	ldr	r3, [r7, #4]
 8066da6:	7a1b      	ldrb	r3, [r3, #8]
 8066da8:	2b01      	cmp	r3, #1
 8066daa:	d905      	bls.n	8066db8 <stm32_lock_acquire+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 8066dac:	b672      	cpsid	i
}
 8066dae:	bf00      	nop
 8066db0:	f7ff fb42 	bl	8066438 <Error_Handler>
 8066db4:	bf00      	nop
 8066db6:	e7fd      	b.n	8066db4 <stm32_lock_acquire+0x2a>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8066db8:	687b      	ldr	r3, [r7, #4]
 8066dba:	7a1b      	ldrb	r3, [r3, #8]
 8066dbc:	1c5a      	adds	r2, r3, #1
 8066dbe:	b2d1      	uxtb	r1, r2
 8066dc0:	687a      	ldr	r2, [r7, #4]
 8066dc2:	7211      	strb	r1, [r2, #8]
 8066dc4:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8066dc6:	f3ef 8211 	mrs	r2, BASEPRI
 8066dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8066dce:	f383 8811 	msr	BASEPRI, r3
 8066dd2:	f3bf 8f6f 	isb	sy
 8066dd6:	f3bf 8f4f 	dsb	sy
 8066dda:	60fa      	str	r2, [r7, #12]
 8066ddc:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8066dde:	68fa      	ldr	r2, [r7, #12]
 8066de0:	687b      	ldr	r3, [r7, #4]
 8066de2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8066de6:	bf00      	nop
 8066de8:	3710      	adds	r7, #16
 8066dea:	46bd      	mov	sp, r7
 8066dec:	bd80      	pop	{r7, pc}

08066dee <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8066dee:	b580      	push	{r7, lr}
 8066df0:	b084      	sub	sp, #16
 8066df2:	af00      	add	r7, sp, #0
 8066df4:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8066df6:	687b      	ldr	r3, [r7, #4]
 8066df8:	2b00      	cmp	r3, #0
 8066dfa:	d105      	bne.n	8066e08 <stm32_lock_release+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8066dfc:	b672      	cpsid	i
}
 8066dfe:	bf00      	nop
 8066e00:	f7ff fb1a 	bl	8066438 <Error_Handler>
 8066e04:	bf00      	nop
 8066e06:	e7fd      	b.n	8066e04 <stm32_lock_release+0x16>
  lock->nesting_level--;
 8066e08:	687b      	ldr	r3, [r7, #4]
 8066e0a:	7a1b      	ldrb	r3, [r3, #8]
 8066e0c:	3b01      	subs	r3, #1
 8066e0e:	b2da      	uxtb	r2, r3
 8066e10:	687b      	ldr	r3, [r7, #4]
 8066e12:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8066e14:	687b      	ldr	r3, [r7, #4]
 8066e16:	7a1b      	ldrb	r3, [r3, #8]
 8066e18:	2b01      	cmp	r3, #1
 8066e1a:	d905      	bls.n	8066e28 <stm32_lock_release+0x3a>
  __ASM volatile ("cpsid i" : : : "memory");
 8066e1c:	b672      	cpsid	i
}
 8066e1e:	bf00      	nop
 8066e20:	f7ff fb0a 	bl	8066438 <Error_Handler>
 8066e24:	bf00      	nop
 8066e26:	e7fd      	b.n	8066e24 <stm32_lock_release+0x36>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8066e28:	687b      	ldr	r3, [r7, #4]
 8066e2a:	7a1b      	ldrb	r3, [r3, #8]
 8066e2c:	461a      	mov	r2, r3
 8066e2e:	687b      	ldr	r3, [r7, #4]
 8066e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8066e34:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8066e36:	68fb      	ldr	r3, [r7, #12]
 8066e38:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8066e3c:	bf00      	nop
}
 8066e3e:	bf00      	nop
 8066e40:	3710      	adds	r7, #16
 8066e42:	46bd      	mov	sp, r7
 8066e44:	bd80      	pop	{r7, pc}

08066e46 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8066e46:	b580      	push	{r7, lr}
 8066e48:	b082      	sub	sp, #8
 8066e4a:	af00      	add	r7, sp, #0
 8066e4c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8066e4e:	687b      	ldr	r3, [r7, #4]
 8066e50:	2b00      	cmp	r3, #0
 8066e52:	d105      	bne.n	8066e60 <__retarget_lock_acquire_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8066e54:	b672      	cpsid	i
}
 8066e56:	bf00      	nop
 8066e58:	f7ff faee 	bl	8066438 <Error_Handler>
 8066e5c:	bf00      	nop
 8066e5e:	e7fd      	b.n	8066e5c <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8066e60:	687b      	ldr	r3, [r7, #4]
 8066e62:	4618      	mov	r0, r3
 8066e64:	f7ff ff91 	bl	8066d8a <stm32_lock_acquire>
}
 8066e68:	bf00      	nop
 8066e6a:	3708      	adds	r7, #8
 8066e6c:	46bd      	mov	sp, r7
 8066e6e:	bd80      	pop	{r7, pc}

08066e70 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8066e70:	b580      	push	{r7, lr}
 8066e72:	b082      	sub	sp, #8
 8066e74:	af00      	add	r7, sp, #0
 8066e76:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8066e78:	687b      	ldr	r3, [r7, #4]
 8066e7a:	2b00      	cmp	r3, #0
 8066e7c:	d105      	bne.n	8066e8a <__retarget_lock_release_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8066e7e:	b672      	cpsid	i
}
 8066e80:	bf00      	nop
 8066e82:	f7ff fad9 	bl	8066438 <Error_Handler>
 8066e86:	bf00      	nop
 8066e88:	e7fd      	b.n	8066e86 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8066e8a:	687b      	ldr	r3, [r7, #4]
 8066e8c:	4618      	mov	r0, r3
 8066e8e:	f7ff ffae 	bl	8066dee <stm32_lock_release>
}
 8066e92:	bf00      	nop
 8066e94:	3708      	adds	r7, #8
 8066e96:	46bd      	mov	sp, r7
 8066e98:	bd80      	pop	{r7, pc}
	...

08066e9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8066e9c:	b580      	push	{r7, lr}
 8066e9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8066ea0:	4b0e      	ldr	r3, [pc, #56]	@ (8066edc <HAL_Init+0x40>)
 8066ea2:	681b      	ldr	r3, [r3, #0]
 8066ea4:	4a0d      	ldr	r2, [pc, #52]	@ (8066edc <HAL_Init+0x40>)
 8066ea6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8066eaa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8066eac:	4b0b      	ldr	r3, [pc, #44]	@ (8066edc <HAL_Init+0x40>)
 8066eae:	681b      	ldr	r3, [r3, #0]
 8066eb0:	4a0a      	ldr	r2, [pc, #40]	@ (8066edc <HAL_Init+0x40>)
 8066eb2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8066eb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8066eb8:	4b08      	ldr	r3, [pc, #32]	@ (8066edc <HAL_Init+0x40>)
 8066eba:	681b      	ldr	r3, [r3, #0]
 8066ebc:	4a07      	ldr	r2, [pc, #28]	@ (8066edc <HAL_Init+0x40>)
 8066ebe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8066ec2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8066ec4:	2003      	movs	r0, #3
 8066ec6:	f000 ffa5 	bl	8067e14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8066eca:	2000      	movs	r0, #0
 8066ecc:	f7ff fb8e 	bl	80665ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8066ed0:	f7ff fb42 	bl	8066558 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8066ed4:	2300      	movs	r3, #0
}
 8066ed6:	4618      	mov	r0, r3
 8066ed8:	bd80      	pop	{r7, pc}
 8066eda:	bf00      	nop
 8066edc:	40023c00 	.word	0x40023c00

08066ee0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8066ee0:	b480      	push	{r7}
 8066ee2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8066ee4:	4b06      	ldr	r3, [pc, #24]	@ (8066f00 <HAL_IncTick+0x20>)
 8066ee6:	781b      	ldrb	r3, [r3, #0]
 8066ee8:	461a      	mov	r2, r3
 8066eea:	4b06      	ldr	r3, [pc, #24]	@ (8066f04 <HAL_IncTick+0x24>)
 8066eec:	681b      	ldr	r3, [r3, #0]
 8066eee:	4413      	add	r3, r2
 8066ef0:	4a04      	ldr	r2, [pc, #16]	@ (8066f04 <HAL_IncTick+0x24>)
 8066ef2:	6013      	str	r3, [r2, #0]
}
 8066ef4:	bf00      	nop
 8066ef6:	46bd      	mov	sp, r7
 8066ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8066efc:	4770      	bx	lr
 8066efe:	bf00      	nop
 8066f00:	20010128 	.word	0x20010128
 8066f04:	20010e10 	.word	0x20010e10

08066f08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8066f08:	b480      	push	{r7}
 8066f0a:	af00      	add	r7, sp, #0
  return uwTick;
 8066f0c:	4b03      	ldr	r3, [pc, #12]	@ (8066f1c <HAL_GetTick+0x14>)
 8066f0e:	681b      	ldr	r3, [r3, #0]
}
 8066f10:	4618      	mov	r0, r3
 8066f12:	46bd      	mov	sp, r7
 8066f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8066f18:	4770      	bx	lr
 8066f1a:	bf00      	nop
 8066f1c:	20010e10 	.word	0x20010e10

08066f20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8066f20:	b580      	push	{r7, lr}
 8066f22:	b084      	sub	sp, #16
 8066f24:	af00      	add	r7, sp, #0
 8066f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8066f28:	f7ff ffee 	bl	8066f08 <HAL_GetTick>
 8066f2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8066f2e:	687b      	ldr	r3, [r7, #4]
 8066f30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8066f32:	68fb      	ldr	r3, [r7, #12]
 8066f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8066f38:	d005      	beq.n	8066f46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8066f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8066f64 <HAL_Delay+0x44>)
 8066f3c:	781b      	ldrb	r3, [r3, #0]
 8066f3e:	461a      	mov	r2, r3
 8066f40:	68fb      	ldr	r3, [r7, #12]
 8066f42:	4413      	add	r3, r2
 8066f44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8066f46:	bf00      	nop
 8066f48:	f7ff ffde 	bl	8066f08 <HAL_GetTick>
 8066f4c:	4602      	mov	r2, r0
 8066f4e:	68bb      	ldr	r3, [r7, #8]
 8066f50:	1ad3      	subs	r3, r2, r3
 8066f52:	68fa      	ldr	r2, [r7, #12]
 8066f54:	429a      	cmp	r2, r3
 8066f56:	d8f7      	bhi.n	8066f48 <HAL_Delay+0x28>
  {
  }
}
 8066f58:	bf00      	nop
 8066f5a:	bf00      	nop
 8066f5c:	3710      	adds	r7, #16
 8066f5e:	46bd      	mov	sp, r7
 8066f60:	bd80      	pop	{r7, pc}
 8066f62:	bf00      	nop
 8066f64:	20010128 	.word	0x20010128

08066f68 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8066f68:	b580      	push	{r7, lr}
 8066f6a:	b084      	sub	sp, #16
 8066f6c:	af00      	add	r7, sp, #0
 8066f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8066f70:	2300      	movs	r3, #0
 8066f72:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8066f74:	687b      	ldr	r3, [r7, #4]
 8066f76:	2b00      	cmp	r3, #0
 8066f78:	d101      	bne.n	8066f7e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8066f7a:	2301      	movs	r3, #1
 8066f7c:	e16f      	b.n	806725e <HAL_ADC_Init+0x2f6>
  }

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8066f7e:	687b      	ldr	r3, [r7, #4]
 8066f80:	681b      	ldr	r3, [r3, #0]
 8066f82:	4a93      	ldr	r2, [pc, #588]	@ (80671d0 <HAL_ADC_Init+0x268>)
 8066f84:	4293      	cmp	r3, r2
 8066f86:	d004      	beq.n	8066f92 <HAL_ADC_Init+0x2a>
 8066f88:	f44f 71a1 	mov.w	r1, #322	@ 0x142
 8066f8c:	4891      	ldr	r0, [pc, #580]	@ (80671d4 <HAL_ADC_Init+0x26c>)
 8066f8e:	f7ff fa5a 	bl	8066446 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8066f92:	687b      	ldr	r3, [r7, #4]
 8066f94:	685b      	ldr	r3, [r3, #4]
 8066f96:	2b00      	cmp	r3, #0
 8066f98:	d013      	beq.n	8066fc2 <HAL_ADC_Init+0x5a>
 8066f9a:	687b      	ldr	r3, [r7, #4]
 8066f9c:	685b      	ldr	r3, [r3, #4]
 8066f9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8066fa2:	d00e      	beq.n	8066fc2 <HAL_ADC_Init+0x5a>
 8066fa4:	687b      	ldr	r3, [r7, #4]
 8066fa6:	685b      	ldr	r3, [r3, #4]
 8066fa8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8066fac:	d009      	beq.n	8066fc2 <HAL_ADC_Init+0x5a>
 8066fae:	687b      	ldr	r3, [r7, #4]
 8066fb0:	685b      	ldr	r3, [r3, #4]
 8066fb2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8066fb6:	d004      	beq.n	8066fc2 <HAL_ADC_Init+0x5a>
 8066fb8:	f240 1143 	movw	r1, #323	@ 0x143
 8066fbc:	4885      	ldr	r0, [pc, #532]	@ (80671d4 <HAL_ADC_Init+0x26c>)
 8066fbe:	f7ff fa42 	bl	8066446 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8066fc2:	687b      	ldr	r3, [r7, #4]
 8066fc4:	689b      	ldr	r3, [r3, #8]
 8066fc6:	2b00      	cmp	r3, #0
 8066fc8:	d013      	beq.n	8066ff2 <HAL_ADC_Init+0x8a>
 8066fca:	687b      	ldr	r3, [r7, #4]
 8066fcc:	689b      	ldr	r3, [r3, #8]
 8066fce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8066fd2:	d00e      	beq.n	8066ff2 <HAL_ADC_Init+0x8a>
 8066fd4:	687b      	ldr	r3, [r7, #4]
 8066fd6:	689b      	ldr	r3, [r3, #8]
 8066fd8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8066fdc:	d009      	beq.n	8066ff2 <HAL_ADC_Init+0x8a>
 8066fde:	687b      	ldr	r3, [r7, #4]
 8066fe0:	689b      	ldr	r3, [r3, #8]
 8066fe2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8066fe6:	d004      	beq.n	8066ff2 <HAL_ADC_Init+0x8a>
 8066fe8:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 8066fec:	4879      	ldr	r0, [pc, #484]	@ (80671d4 <HAL_ADC_Init+0x26c>)
 8066fee:	f7ff fa2a 	bl	8066446 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 8066ff2:	687b      	ldr	r3, [r7, #4]
 8066ff4:	691b      	ldr	r3, [r3, #16]
 8066ff6:	2b00      	cmp	r3, #0
 8066ff8:	d008      	beq.n	806700c <HAL_ADC_Init+0xa4>
 8066ffa:	687b      	ldr	r3, [r7, #4]
 8066ffc:	691b      	ldr	r3, [r3, #16]
 8066ffe:	2b01      	cmp	r3, #1
 8067000:	d004      	beq.n	806700c <HAL_ADC_Init+0xa4>
 8067002:	f240 1145 	movw	r1, #325	@ 0x145
 8067006:	4873      	ldr	r0, [pc, #460]	@ (80671d4 <HAL_ADC_Init+0x26c>)
 8067008:	f7ff fa1d 	bl	8066446 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 806700c:	687b      	ldr	r3, [r7, #4]
 806700e:	7e1b      	ldrb	r3, [r3, #24]
 8067010:	2b00      	cmp	r3, #0
 8067012:	d008      	beq.n	8067026 <HAL_ADC_Init+0xbe>
 8067014:	687b      	ldr	r3, [r7, #4]
 8067016:	7e1b      	ldrb	r3, [r3, #24]
 8067018:	2b01      	cmp	r3, #1
 806701a:	d004      	beq.n	8067026 <HAL_ADC_Init+0xbe>
 806701c:	f44f 71a3 	mov.w	r1, #326	@ 0x146
 8067020:	486c      	ldr	r0, [pc, #432]	@ (80671d4 <HAL_ADC_Init+0x26c>)
 8067022:	f7ff fa10 	bl	8066446 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8067026:	687b      	ldr	r3, [r7, #4]
 8067028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 806702a:	2b00      	cmp	r3, #0
 806702c:	d054      	beq.n	80670d8 <HAL_ADC_Init+0x170>
 806702e:	687b      	ldr	r3, [r7, #4]
 8067030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8067032:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8067036:	d04f      	beq.n	80670d8 <HAL_ADC_Init+0x170>
 8067038:	687b      	ldr	r3, [r7, #4]
 806703a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 806703c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8067040:	d04a      	beq.n	80670d8 <HAL_ADC_Init+0x170>
 8067042:	687b      	ldr	r3, [r7, #4]
 8067044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8067046:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 806704a:	d045      	beq.n	80670d8 <HAL_ADC_Init+0x170>
 806704c:	687b      	ldr	r3, [r7, #4]
 806704e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8067050:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8067054:	d040      	beq.n	80670d8 <HAL_ADC_Init+0x170>
 8067056:	687b      	ldr	r3, [r7, #4]
 8067058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 806705a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 806705e:	d03b      	beq.n	80670d8 <HAL_ADC_Init+0x170>
 8067060:	687b      	ldr	r3, [r7, #4]
 8067062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8067064:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 8067068:	d036      	beq.n	80670d8 <HAL_ADC_Init+0x170>
 806706a:	687b      	ldr	r3, [r7, #4]
 806706c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 806706e:	f1b3 6fe0 	cmp.w	r3, #117440512	@ 0x7000000
 8067072:	d031      	beq.n	80670d8 <HAL_ADC_Init+0x170>
 8067074:	687b      	ldr	r3, [r7, #4]
 8067076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8067078:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 806707c:	d02c      	beq.n	80670d8 <HAL_ADC_Init+0x170>
 806707e:	687b      	ldr	r3, [r7, #4]
 8067080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8067082:	f1b3 6f10 	cmp.w	r3, #150994944	@ 0x9000000
 8067086:	d027      	beq.n	80670d8 <HAL_ADC_Init+0x170>
 8067088:	687b      	ldr	r3, [r7, #4]
 806708a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 806708c:	f1b3 6f20 	cmp.w	r3, #167772160	@ 0xa000000
 8067090:	d022      	beq.n	80670d8 <HAL_ADC_Init+0x170>
 8067092:	687b      	ldr	r3, [r7, #4]
 8067094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8067096:	f1b3 6f30 	cmp.w	r3, #184549376	@ 0xb000000
 806709a:	d01d      	beq.n	80670d8 <HAL_ADC_Init+0x170>
 806709c:	687b      	ldr	r3, [r7, #4]
 806709e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80670a0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80670a4:	d018      	beq.n	80670d8 <HAL_ADC_Init+0x170>
 80670a6:	687b      	ldr	r3, [r7, #4]
 80670a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80670aa:	f1b3 6f50 	cmp.w	r3, #218103808	@ 0xd000000
 80670ae:	d013      	beq.n	80670d8 <HAL_ADC_Init+0x170>
 80670b0:	687b      	ldr	r3, [r7, #4]
 80670b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80670b4:	f1b3 6f60 	cmp.w	r3, #234881024	@ 0xe000000
 80670b8:	d00e      	beq.n	80670d8 <HAL_ADC_Init+0x170>
 80670ba:	687b      	ldr	r3, [r7, #4]
 80670bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80670be:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80670c2:	d009      	beq.n	80670d8 <HAL_ADC_Init+0x170>
 80670c4:	687b      	ldr	r3, [r7, #4]
 80670c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80670c8:	4a43      	ldr	r2, [pc, #268]	@ (80671d8 <HAL_ADC_Init+0x270>)
 80670ca:	4293      	cmp	r3, r2
 80670cc:	d004      	beq.n	80670d8 <HAL_ADC_Init+0x170>
 80670ce:	f240 1147 	movw	r1, #327	@ 0x147
 80670d2:	4840      	ldr	r0, [pc, #256]	@ (80671d4 <HAL_ADC_Init+0x26c>)
 80670d4:	f7ff f9b7 	bl	8066446 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 80670d8:	687b      	ldr	r3, [r7, #4]
 80670da:	68db      	ldr	r3, [r3, #12]
 80670dc:	2b00      	cmp	r3, #0
 80670de:	d009      	beq.n	80670f4 <HAL_ADC_Init+0x18c>
 80670e0:	687b      	ldr	r3, [r7, #4]
 80670e2:	68db      	ldr	r3, [r3, #12]
 80670e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80670e8:	d004      	beq.n	80670f4 <HAL_ADC_Init+0x18c>
 80670ea:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 80670ee:	4839      	ldr	r0, [pc, #228]	@ (80671d4 <HAL_ADC_Init+0x26c>)
 80670f0:	f7ff f9a9 	bl	8066446 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80670f4:	687b      	ldr	r3, [r7, #4]
 80670f6:	69db      	ldr	r3, [r3, #28]
 80670f8:	2b00      	cmp	r3, #0
 80670fa:	d003      	beq.n	8067104 <HAL_ADC_Init+0x19c>
 80670fc:	687b      	ldr	r3, [r7, #4]
 80670fe:	69db      	ldr	r3, [r3, #28]
 8067100:	2b10      	cmp	r3, #16
 8067102:	d904      	bls.n	806710e <HAL_ADC_Init+0x1a6>
 8067104:	f240 1149 	movw	r1, #329	@ 0x149
 8067108:	4832      	ldr	r0, [pc, #200]	@ (80671d4 <HAL_ADC_Init+0x26c>)
 806710a:	f7ff f99c 	bl	8066446 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 806710e:	687b      	ldr	r3, [r7, #4]
 8067110:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8067114:	2b00      	cmp	r3, #0
 8067116:	d009      	beq.n	806712c <HAL_ADC_Init+0x1c4>
 8067118:	687b      	ldr	r3, [r7, #4]
 806711a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 806711e:	2b01      	cmp	r3, #1
 8067120:	d004      	beq.n	806712c <HAL_ADC_Init+0x1c4>
 8067122:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8067126:	482b      	ldr	r0, [pc, #172]	@ (80671d4 <HAL_ADC_Init+0x26c>)
 8067128:	f7ff f98d 	bl	8066446 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 806712c:	687b      	ldr	r3, [r7, #4]
 806712e:	695b      	ldr	r3, [r3, #20]
 8067130:	2b01      	cmp	r3, #1
 8067132:	d00c      	beq.n	806714e <HAL_ADC_Init+0x1e6>
 8067134:	687b      	ldr	r3, [r7, #4]
 8067136:	695b      	ldr	r3, [r3, #20]
 8067138:	2b00      	cmp	r3, #0
 806713a:	d008      	beq.n	806714e <HAL_ADC_Init+0x1e6>
 806713c:	687b      	ldr	r3, [r7, #4]
 806713e:	695b      	ldr	r3, [r3, #20]
 8067140:	2b02      	cmp	r3, #2
 8067142:	d004      	beq.n	806714e <HAL_ADC_Init+0x1e6>
 8067144:	f240 114b 	movw	r1, #331	@ 0x14b
 8067148:	4822      	ldr	r0, [pc, #136]	@ (80671d4 <HAL_ADC_Init+0x26c>)
 806714a:	f7ff f97c 	bl	8066446 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 806714e:	687b      	ldr	r3, [r7, #4]
 8067150:	f893 3020 	ldrb.w	r3, [r3, #32]
 8067154:	2b00      	cmp	r3, #0
 8067156:	d009      	beq.n	806716c <HAL_ADC_Init+0x204>
 8067158:	687b      	ldr	r3, [r7, #4]
 806715a:	f893 3020 	ldrb.w	r3, [r3, #32]
 806715e:	2b01      	cmp	r3, #1
 8067160:	d004      	beq.n	806716c <HAL_ADC_Init+0x204>
 8067162:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 8067166:	481b      	ldr	r0, [pc, #108]	@ (80671d4 <HAL_ADC_Init+0x26c>)
 8067168:	f7ff f96d 	bl	8066446 <assert_failed>

  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 806716c:	687b      	ldr	r3, [r7, #4]
 806716e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8067170:	4a19      	ldr	r2, [pc, #100]	@ (80671d8 <HAL_ADC_Init+0x270>)
 8067172:	4293      	cmp	r3, r2
 8067174:	d017      	beq.n	80671a6 <HAL_ADC_Init+0x23e>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8067176:	687b      	ldr	r3, [r7, #4]
 8067178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 806717a:	2b00      	cmp	r3, #0
 806717c:	d013      	beq.n	80671a6 <HAL_ADC_Init+0x23e>
 806717e:	687b      	ldr	r3, [r7, #4]
 8067180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8067182:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8067186:	d00e      	beq.n	80671a6 <HAL_ADC_Init+0x23e>
 8067188:	687b      	ldr	r3, [r7, #4]
 806718a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 806718c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8067190:	d009      	beq.n	80671a6 <HAL_ADC_Init+0x23e>
 8067192:	687b      	ldr	r3, [r7, #4]
 8067194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8067196:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 806719a:	d004      	beq.n	80671a6 <HAL_ADC_Init+0x23e>
 806719c:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 80671a0:	480c      	ldr	r0, [pc, #48]	@ (80671d4 <HAL_ADC_Init+0x26c>)
 80671a2:	f7ff f950 	bl	8066446 <assert_failed>
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80671a6:	687b      	ldr	r3, [r7, #4]
 80671a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80671aa:	2b00      	cmp	r3, #0
 80671ac:	d131      	bne.n	8067212 <HAL_ADC_Init+0x2aa>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 80671ae:	687b      	ldr	r3, [r7, #4]
 80671b0:	4a0a      	ldr	r2, [pc, #40]	@ (80671dc <HAL_ADC_Init+0x274>)
 80671b2:	649a      	str	r2, [r3, #72]	@ 0x48
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 80671b4:	687b      	ldr	r3, [r7, #4]
 80671b6:	4a0a      	ldr	r2, [pc, #40]	@ (80671e0 <HAL_ADC_Init+0x278>)
 80671b8:	64da      	str	r2, [r3, #76]	@ 0x4c
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 80671ba:	687b      	ldr	r3, [r7, #4]
 80671bc:	4a09      	ldr	r2, [pc, #36]	@ (80671e4 <HAL_ADC_Init+0x27c>)
 80671be:	651a      	str	r2, [r3, #80]	@ 0x50
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 80671c0:	687b      	ldr	r3, [r7, #4]
 80671c2:	4a09      	ldr	r2, [pc, #36]	@ (80671e8 <HAL_ADC_Init+0x280>)
 80671c4:	655a      	str	r2, [r3, #84]	@ 0x54
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 80671c6:	687b      	ldr	r3, [r7, #4]
 80671c8:	4a08      	ldr	r2, [pc, #32]	@ (80671ec <HAL_ADC_Init+0x284>)
 80671ca:	659a      	str	r2, [r3, #88]	@ 0x58
    if (hadc->MspInitCallback == NULL)
 80671cc:	687b      	ldr	r3, [r7, #4]
 80671ce:	e00f      	b.n	80671f0 <HAL_ADC_Init+0x288>
 80671d0:	40012000 	.word	0x40012000
 80671d4:	08071498 	.word	0x08071498
 80671d8:	0f000001 	.word	0x0f000001
 80671dc:	08064a09 	.word	0x08064a09
 80671e0:	08067763 	.word	0x08067763
 80671e4:	08067777 	.word	0x08067777
 80671e8:	08064a29 	.word	0x08064a29
 80671ec:	08067ca5 	.word	0x08067ca5
 80671f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80671f2:	2b00      	cmp	r3, #0
 80671f4:	d102      	bne.n	80671fc <HAL_ADC_Init+0x294>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 80671f6:	687b      	ldr	r3, [r7, #4]
 80671f8:	4a1b      	ldr	r2, [pc, #108]	@ (8067268 <HAL_ADC_Init+0x300>)
 80671fa:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 80671fc:	687b      	ldr	r3, [r7, #4]
 80671fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8067200:	6878      	ldr	r0, [r7, #4]
 8067202:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8067204:	687b      	ldr	r3, [r7, #4]
 8067206:	2200      	movs	r2, #0
 8067208:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 806720a:	687b      	ldr	r3, [r7, #4]
 806720c:	2200      	movs	r2, #0
 806720e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8067212:	687b      	ldr	r3, [r7, #4]
 8067214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8067216:	f003 0310 	and.w	r3, r3, #16
 806721a:	2b00      	cmp	r3, #0
 806721c:	d118      	bne.n	8067250 <HAL_ADC_Init+0x2e8>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 806721e:	687b      	ldr	r3, [r7, #4]
 8067220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8067222:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8067226:	f023 0302 	bic.w	r3, r3, #2
 806722a:	f043 0202 	orr.w	r2, r3, #2
 806722e:	687b      	ldr	r3, [r7, #4]
 8067230:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8067232:	6878      	ldr	r0, [r7, #4]
 8067234:	f000 fc2c 	bl	8067a90 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8067238:	687b      	ldr	r3, [r7, #4]
 806723a:	2200      	movs	r2, #0
 806723c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 806723e:	687b      	ldr	r3, [r7, #4]
 8067240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8067242:	f023 0303 	bic.w	r3, r3, #3
 8067246:	f043 0201 	orr.w	r2, r3, #1
 806724a:	687b      	ldr	r3, [r7, #4]
 806724c:	641a      	str	r2, [r3, #64]	@ 0x40
 806724e:	e001      	b.n	8067254 <HAL_ADC_Init+0x2ec>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8067250:	2301      	movs	r3, #1
 8067252:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8067254:	687b      	ldr	r3, [r7, #4]
 8067256:	2200      	movs	r2, #0
 8067258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 806725c:	7bfb      	ldrb	r3, [r7, #15]
}
 806725e:	4618      	mov	r0, r3
 8067260:	3710      	adds	r7, #16
 8067262:	46bd      	mov	sp, r7
 8067264:	bd80      	pop	{r7, pc}
 8067266:	bf00      	nop
 8067268:	08065a39 	.word	0x08065a39

0806726c <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 806726c:	b580      	push	{r7, lr}
 806726e:	b084      	sub	sp, #16
 8067270:	af00      	add	r7, sp, #0
 8067272:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8067274:	2300      	movs	r3, #0
 8067276:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;

  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8067278:	687b      	ldr	r3, [r7, #4]
 806727a:	7e1b      	ldrb	r3, [r3, #24]
 806727c:	2b00      	cmp	r3, #0
 806727e:	d008      	beq.n	8067292 <HAL_ADC_Start_IT+0x26>
 8067280:	687b      	ldr	r3, [r7, #4]
 8067282:	7e1b      	ldrb	r3, [r3, #24]
 8067284:	2b01      	cmp	r3, #1
 8067286:	d004      	beq.n	8067292 <HAL_ADC_Start_IT+0x26>
 8067288:	f240 4113 	movw	r1, #1043	@ 0x413
 806728c:	4863      	ldr	r0, [pc, #396]	@ (806741c <HAL_ADC_Start_IT+0x1b0>)
 806728e:	f7ff f8da 	bl	8066446 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8067292:	687b      	ldr	r3, [r7, #4]
 8067294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8067296:	2b00      	cmp	r3, #0
 8067298:	d013      	beq.n	80672c2 <HAL_ADC_Start_IT+0x56>
 806729a:	687b      	ldr	r3, [r7, #4]
 806729c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 806729e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80672a2:	d00e      	beq.n	80672c2 <HAL_ADC_Start_IT+0x56>
 80672a4:	687b      	ldr	r3, [r7, #4]
 80672a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80672a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80672ac:	d009      	beq.n	80672c2 <HAL_ADC_Start_IT+0x56>
 80672ae:	687b      	ldr	r3, [r7, #4]
 80672b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80672b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80672b6:	d004      	beq.n	80672c2 <HAL_ADC_Start_IT+0x56>
 80672b8:	f240 4114 	movw	r1, #1044	@ 0x414
 80672bc:	4857      	ldr	r0, [pc, #348]	@ (806741c <HAL_ADC_Start_IT+0x1b0>)
 80672be:	f7ff f8c2 	bl	8066446 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hadc);
 80672c2:	687b      	ldr	r3, [r7, #4]
 80672c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80672c8:	2b01      	cmp	r3, #1
 80672ca:	d101      	bne.n	80672d0 <HAL_ADC_Start_IT+0x64>
 80672cc:	2302      	movs	r3, #2
 80672ce:	e0a1      	b.n	8067414 <HAL_ADC_Start_IT+0x1a8>
 80672d0:	687b      	ldr	r3, [r7, #4]
 80672d2:	2201      	movs	r2, #1
 80672d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80672d8:	687b      	ldr	r3, [r7, #4]
 80672da:	681b      	ldr	r3, [r3, #0]
 80672dc:	689b      	ldr	r3, [r3, #8]
 80672de:	f003 0301 	and.w	r3, r3, #1
 80672e2:	2b01      	cmp	r3, #1
 80672e4:	d018      	beq.n	8067318 <HAL_ADC_Start_IT+0xac>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80672e6:	687b      	ldr	r3, [r7, #4]
 80672e8:	681b      	ldr	r3, [r3, #0]
 80672ea:	689a      	ldr	r2, [r3, #8]
 80672ec:	687b      	ldr	r3, [r7, #4]
 80672ee:	681b      	ldr	r3, [r3, #0]
 80672f0:	f042 0201 	orr.w	r2, r2, #1
 80672f4:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80672f6:	4b4a      	ldr	r3, [pc, #296]	@ (8067420 <HAL_ADC_Start_IT+0x1b4>)
 80672f8:	681b      	ldr	r3, [r3, #0]
 80672fa:	4a4a      	ldr	r2, [pc, #296]	@ (8067424 <HAL_ADC_Start_IT+0x1b8>)
 80672fc:	fba2 2303 	umull	r2, r3, r2, r3
 8067300:	0c9a      	lsrs	r2, r3, #18
 8067302:	4613      	mov	r3, r2
 8067304:	005b      	lsls	r3, r3, #1
 8067306:	4413      	add	r3, r2
 8067308:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 806730a:	e002      	b.n	8067312 <HAL_ADC_Start_IT+0xa6>
    {
      counter--;
 806730c:	68bb      	ldr	r3, [r7, #8]
 806730e:	3b01      	subs	r3, #1
 8067310:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8067312:	68bb      	ldr	r3, [r7, #8]
 8067314:	2b00      	cmp	r3, #0
 8067316:	d1f9      	bne.n	806730c <HAL_ADC_Start_IT+0xa0>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8067318:	687b      	ldr	r3, [r7, #4]
 806731a:	681b      	ldr	r3, [r3, #0]
 806731c:	689b      	ldr	r3, [r3, #8]
 806731e:	f003 0301 	and.w	r3, r3, #1
 8067322:	2b01      	cmp	r3, #1
 8067324:	d169      	bne.n	80673fa <HAL_ADC_Start_IT+0x18e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8067326:	687b      	ldr	r3, [r7, #4]
 8067328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 806732a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 806732e:	f023 0301 	bic.w	r3, r3, #1
 8067332:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8067336:	687b      	ldr	r3, [r7, #4]
 8067338:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 806733a:	687b      	ldr	r3, [r7, #4]
 806733c:	681b      	ldr	r3, [r3, #0]
 806733e:	685b      	ldr	r3, [r3, #4]
 8067340:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8067344:	2b00      	cmp	r3, #0
 8067346:	d007      	beq.n	8067358 <HAL_ADC_Start_IT+0xec>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8067348:	687b      	ldr	r3, [r7, #4]
 806734a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 806734c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8067350:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8067354:	687b      	ldr	r3, [r7, #4]
 8067356:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8067358:	687b      	ldr	r3, [r7, #4]
 806735a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 806735c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8067360:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8067364:	d106      	bne.n	8067374 <HAL_ADC_Start_IT+0x108>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8067366:	687b      	ldr	r3, [r7, #4]
 8067368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 806736a:	f023 0206 	bic.w	r2, r3, #6
 806736e:	687b      	ldr	r3, [r7, #4]
 8067370:	645a      	str	r2, [r3, #68]	@ 0x44
 8067372:	e002      	b.n	806737a <HAL_ADC_Start_IT+0x10e>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8067374:	687b      	ldr	r3, [r7, #4]
 8067376:	2200      	movs	r2, #0
 8067378:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 806737a:	687b      	ldr	r3, [r7, #4]
 806737c:	2200      	movs	r2, #0
 806737e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8067382:	4b29      	ldr	r3, [pc, #164]	@ (8067428 <HAL_ADC_Start_IT+0x1bc>)
 8067384:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8067386:	687b      	ldr	r3, [r7, #4]
 8067388:	681b      	ldr	r3, [r3, #0]
 806738a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 806738e:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8067390:	687b      	ldr	r3, [r7, #4]
 8067392:	681b      	ldr	r3, [r3, #0]
 8067394:	685b      	ldr	r3, [r3, #4]
 8067396:	687a      	ldr	r2, [r7, #4]
 8067398:	6812      	ldr	r2, [r2, #0]
 806739a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 806739e:	f043 0320 	orr.w	r3, r3, #32
 80673a2:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80673a4:	68fb      	ldr	r3, [r7, #12]
 80673a6:	685b      	ldr	r3, [r3, #4]
 80673a8:	f003 031f 	and.w	r3, r3, #31
 80673ac:	2b00      	cmp	r3, #0
 80673ae:	d10f      	bne.n	80673d0 <HAL_ADC_Start_IT+0x164>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80673b0:	687b      	ldr	r3, [r7, #4]
 80673b2:	681b      	ldr	r3, [r3, #0]
 80673b4:	689b      	ldr	r3, [r3, #8]
 80673b6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80673ba:	2b00      	cmp	r3, #0
 80673bc:	d129      	bne.n	8067412 <HAL_ADC_Start_IT+0x1a6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80673be:	687b      	ldr	r3, [r7, #4]
 80673c0:	681b      	ldr	r3, [r3, #0]
 80673c2:	689a      	ldr	r2, [r3, #8]
 80673c4:	687b      	ldr	r3, [r7, #4]
 80673c6:	681b      	ldr	r3, [r3, #0]
 80673c8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80673cc:	609a      	str	r2, [r3, #8]
 80673ce:	e020      	b.n	8067412 <HAL_ADC_Start_IT+0x1a6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80673d0:	687b      	ldr	r3, [r7, #4]
 80673d2:	681b      	ldr	r3, [r3, #0]
 80673d4:	4a15      	ldr	r2, [pc, #84]	@ (806742c <HAL_ADC_Start_IT+0x1c0>)
 80673d6:	4293      	cmp	r3, r2
 80673d8:	d11b      	bne.n	8067412 <HAL_ADC_Start_IT+0x1a6>
 80673da:	687b      	ldr	r3, [r7, #4]
 80673dc:	681b      	ldr	r3, [r3, #0]
 80673de:	689b      	ldr	r3, [r3, #8]
 80673e0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80673e4:	2b00      	cmp	r3, #0
 80673e6:	d114      	bne.n	8067412 <HAL_ADC_Start_IT+0x1a6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80673e8:	687b      	ldr	r3, [r7, #4]
 80673ea:	681b      	ldr	r3, [r3, #0]
 80673ec:	689a      	ldr	r2, [r3, #8]
 80673ee:	687b      	ldr	r3, [r7, #4]
 80673f0:	681b      	ldr	r3, [r3, #0]
 80673f2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80673f6:	609a      	str	r2, [r3, #8]
 80673f8:	e00b      	b.n	8067412 <HAL_ADC_Start_IT+0x1a6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80673fa:	687b      	ldr	r3, [r7, #4]
 80673fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80673fe:	f043 0210 	orr.w	r2, r3, #16
 8067402:	687b      	ldr	r3, [r7, #4]
 8067404:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8067406:	687b      	ldr	r3, [r7, #4]
 8067408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 806740a:	f043 0201 	orr.w	r2, r3, #1
 806740e:	687b      	ldr	r3, [r7, #4]
 8067410:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8067412:	2300      	movs	r3, #0
}
 8067414:	4618      	mov	r0, r3
 8067416:	3710      	adds	r7, #16
 8067418:	46bd      	mov	sp, r7
 806741a:	bd80      	pop	{r7, pc}
 806741c:	08071498 	.word	0x08071498
 8067420:	20010120 	.word	0x20010120
 8067424:	431bde83 	.word	0x431bde83
 8067428:	40012300 	.word	0x40012300
 806742c:	40012000 	.word	0x40012000

08067430 <HAL_ADC_Stop_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
 8067430:	b580      	push	{r7, lr}
 8067432:	b082      	sub	sp, #8
 8067434:	af00      	add	r7, sp, #0
 8067436:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8067438:	687b      	ldr	r3, [r7, #4]
 806743a:	681b      	ldr	r3, [r3, #0]
 806743c:	4a1f      	ldr	r2, [pc, #124]	@ (80674bc <HAL_ADC_Stop_IT+0x8c>)
 806743e:	4293      	cmp	r3, r2
 8067440:	d004      	beq.n	806744c <HAL_ADC_Stop_IT+0x1c>
 8067442:	f240 418d 	movw	r1, #1165	@ 0x48d
 8067446:	481e      	ldr	r0, [pc, #120]	@ (80674c0 <HAL_ADC_Stop_IT+0x90>)
 8067448:	f7fe fffd 	bl	8066446 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hadc);
 806744c:	687b      	ldr	r3, [r7, #4]
 806744e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8067452:	2b01      	cmp	r3, #1
 8067454:	d101      	bne.n	806745a <HAL_ADC_Stop_IT+0x2a>
 8067456:	2302      	movs	r3, #2
 8067458:	e02b      	b.n	80674b2 <HAL_ADC_Stop_IT+0x82>
 806745a:	687b      	ldr	r3, [r7, #4]
 806745c:	2201      	movs	r2, #1
 806745e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8067462:	687b      	ldr	r3, [r7, #4]
 8067464:	681b      	ldr	r3, [r3, #0]
 8067466:	689a      	ldr	r2, [r3, #8]
 8067468:	687b      	ldr	r3, [r7, #4]
 806746a:	681b      	ldr	r3, [r3, #0]
 806746c:	f022 0201 	bic.w	r2, r2, #1
 8067470:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8067472:	687b      	ldr	r3, [r7, #4]
 8067474:	681b      	ldr	r3, [r3, #0]
 8067476:	689b      	ldr	r3, [r3, #8]
 8067478:	f003 0301 	and.w	r3, r3, #1
 806747c:	2b00      	cmp	r3, #0
 806747e:	d113      	bne.n	80674a8 <HAL_ADC_Stop_IT+0x78>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8067480:	687b      	ldr	r3, [r7, #4]
 8067482:	681b      	ldr	r3, [r3, #0]
 8067484:	685b      	ldr	r3, [r3, #4]
 8067486:	687a      	ldr	r2, [r7, #4]
 8067488:	6812      	ldr	r2, [r2, #0]
 806748a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 806748e:	f023 0320 	bic.w	r3, r3, #32
 8067492:	6053      	str	r3, [r2, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8067494:	687b      	ldr	r3, [r7, #4]
 8067496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8067498:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 806749c:	f023 0301 	bic.w	r3, r3, #1
 80674a0:	f043 0201 	orr.w	r2, r3, #1
 80674a4:	687b      	ldr	r3, [r7, #4]
 80674a6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80674a8:	687b      	ldr	r3, [r7, #4]
 80674aa:	2200      	movs	r2, #0
 80674ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80674b0:	2300      	movs	r3, #0
}
 80674b2:	4618      	mov	r0, r3
 80674b4:	3708      	adds	r7, #8
 80674b6:	46bd      	mov	sp, r7
 80674b8:	bd80      	pop	{r7, pc}
 80674ba:	bf00      	nop
 80674bc:	40012000 	.word	0x40012000
 80674c0:	08071498 	.word	0x08071498

080674c4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80674c4:	b580      	push	{r7, lr}
 80674c6:	b086      	sub	sp, #24
 80674c8:	af00      	add	r7, sp, #0
 80674ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80674cc:	2300      	movs	r3, #0
 80674ce:	617b      	str	r3, [r7, #20]
 80674d0:	2300      	movs	r3, #0
 80674d2:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80674d4:	687b      	ldr	r3, [r7, #4]
 80674d6:	681b      	ldr	r3, [r3, #0]
 80674d8:	681b      	ldr	r3, [r3, #0]
 80674da:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80674dc:	687b      	ldr	r3, [r7, #4]
 80674de:	681b      	ldr	r3, [r3, #0]
 80674e0:	685b      	ldr	r3, [r3, #4]
 80674e2:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80674e4:	687b      	ldr	r3, [r7, #4]
 80674e6:	7e1b      	ldrb	r3, [r3, #24]
 80674e8:	2b00      	cmp	r3, #0
 80674ea:	d008      	beq.n	80674fe <HAL_ADC_IRQHandler+0x3a>
 80674ec:	687b      	ldr	r3, [r7, #4]
 80674ee:	7e1b      	ldrb	r3, [r3, #24]
 80674f0:	2b01      	cmp	r3, #1
 80674f2:	d004      	beq.n	80674fe <HAL_ADC_IRQHandler+0x3a>
 80674f4:	f240 41b7 	movw	r1, #1207	@ 0x4b7
 80674f8:	4892      	ldr	r0, [pc, #584]	@ (8067744 <HAL_ADC_IRQHandler+0x280>)
 80674fa:	f7fe ffa4 	bl	8066446 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80674fe:	687b      	ldr	r3, [r7, #4]
 8067500:	69db      	ldr	r3, [r3, #28]
 8067502:	2b00      	cmp	r3, #0
 8067504:	d003      	beq.n	806750e <HAL_ADC_IRQHandler+0x4a>
 8067506:	687b      	ldr	r3, [r7, #4]
 8067508:	69db      	ldr	r3, [r3, #28]
 806750a:	2b10      	cmp	r3, #16
 806750c:	d904      	bls.n	8067518 <HAL_ADC_IRQHandler+0x54>
 806750e:	f44f 6197 	mov.w	r1, #1208	@ 0x4b8
 8067512:	488c      	ldr	r0, [pc, #560]	@ (8067744 <HAL_ADC_IRQHandler+0x280>)
 8067514:	f7fe ff97 	bl	8066446 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8067518:	687b      	ldr	r3, [r7, #4]
 806751a:	695b      	ldr	r3, [r3, #20]
 806751c:	2b01      	cmp	r3, #1
 806751e:	d00c      	beq.n	806753a <HAL_ADC_IRQHandler+0x76>
 8067520:	687b      	ldr	r3, [r7, #4]
 8067522:	695b      	ldr	r3, [r3, #20]
 8067524:	2b00      	cmp	r3, #0
 8067526:	d008      	beq.n	806753a <HAL_ADC_IRQHandler+0x76>
 8067528:	687b      	ldr	r3, [r7, #4]
 806752a:	695b      	ldr	r3, [r3, #20]
 806752c:	2b02      	cmp	r3, #2
 806752e:	d004      	beq.n	806753a <HAL_ADC_IRQHandler+0x76>
 8067530:	f240 41b9 	movw	r1, #1209	@ 0x4b9
 8067534:	4883      	ldr	r0, [pc, #524]	@ (8067744 <HAL_ADC_IRQHandler+0x280>)
 8067536:	f7fe ff86 	bl	8066446 <assert_failed>

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 806753a:	68fb      	ldr	r3, [r7, #12]
 806753c:	f003 0302 	and.w	r3, r3, #2
 8067540:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8067542:	68bb      	ldr	r3, [r7, #8]
 8067544:	f003 0320 	and.w	r3, r3, #32
 8067548:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 806754a:	697b      	ldr	r3, [r7, #20]
 806754c:	2b00      	cmp	r3, #0
 806754e:	d04a      	beq.n	80675e6 <HAL_ADC_IRQHandler+0x122>
 8067550:	693b      	ldr	r3, [r7, #16]
 8067552:	2b00      	cmp	r3, #0
 8067554:	d047      	beq.n	80675e6 <HAL_ADC_IRQHandler+0x122>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8067556:	687b      	ldr	r3, [r7, #4]
 8067558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 806755a:	f003 0310 	and.w	r3, r3, #16
 806755e:	2b00      	cmp	r3, #0
 8067560:	d105      	bne.n	806756e <HAL_ADC_IRQHandler+0xaa>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8067562:	687b      	ldr	r3, [r7, #4]
 8067564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8067566:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 806756a:	687b      	ldr	r3, [r7, #4]
 806756c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 806756e:	687b      	ldr	r3, [r7, #4]
 8067570:	681b      	ldr	r3, [r3, #0]
 8067572:	689b      	ldr	r3, [r3, #8]
 8067574:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8067578:	2b00      	cmp	r3, #0
 806757a:	d12b      	bne.n	80675d4 <HAL_ADC_IRQHandler+0x110>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 806757c:	687b      	ldr	r3, [r7, #4]
 806757e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8067580:	2b00      	cmp	r3, #0
 8067582:	d127      	bne.n	80675d4 <HAL_ADC_IRQHandler+0x110>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8067584:	687b      	ldr	r3, [r7, #4]
 8067586:	681b      	ldr	r3, [r3, #0]
 8067588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 806758a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 806758e:	2b00      	cmp	r3, #0
 8067590:	d006      	beq.n	80675a0 <HAL_ADC_IRQHandler+0xdc>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8067592:	687b      	ldr	r3, [r7, #4]
 8067594:	681b      	ldr	r3, [r3, #0]
 8067596:	689b      	ldr	r3, [r3, #8]
 8067598:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 806759c:	2b00      	cmp	r3, #0
 806759e:	d119      	bne.n	80675d4 <HAL_ADC_IRQHandler+0x110>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80675a0:	687b      	ldr	r3, [r7, #4]
 80675a2:	681b      	ldr	r3, [r3, #0]
 80675a4:	685a      	ldr	r2, [r3, #4]
 80675a6:	687b      	ldr	r3, [r7, #4]
 80675a8:	681b      	ldr	r3, [r3, #0]
 80675aa:	f022 0220 	bic.w	r2, r2, #32
 80675ae:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80675b0:	687b      	ldr	r3, [r7, #4]
 80675b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80675b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80675b8:	687b      	ldr	r3, [r7, #4]
 80675ba:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80675bc:	687b      	ldr	r3, [r7, #4]
 80675be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80675c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80675c4:	2b00      	cmp	r3, #0
 80675c6:	d105      	bne.n	80675d4 <HAL_ADC_IRQHandler+0x110>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80675c8:	687b      	ldr	r3, [r7, #4]
 80675ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80675cc:	f043 0201 	orr.w	r2, r3, #1
 80675d0:	687b      	ldr	r3, [r7, #4]
 80675d2:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 80675d4:	687b      	ldr	r3, [r7, #4]
 80675d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80675d8:	6878      	ldr	r0, [r7, #4]
 80675da:	4798      	blx	r3
#else
    HAL_ADC_ConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80675dc:	687b      	ldr	r3, [r7, #4]
 80675de:	681b      	ldr	r3, [r3, #0]
 80675e0:	f06f 0212 	mvn.w	r2, #18
 80675e4:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80675e6:	68fb      	ldr	r3, [r7, #12]
 80675e8:	f003 0304 	and.w	r3, r3, #4
 80675ec:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80675ee:	68bb      	ldr	r3, [r7, #8]
 80675f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80675f4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80675f6:	697b      	ldr	r3, [r7, #20]
 80675f8:	2b00      	cmp	r3, #0
 80675fa:	d058      	beq.n	80676ae <HAL_ADC_IRQHandler+0x1ea>
 80675fc:	693b      	ldr	r3, [r7, #16]
 80675fe:	2b00      	cmp	r3, #0
 8067600:	d055      	beq.n	80676ae <HAL_ADC_IRQHandler+0x1ea>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8067602:	687b      	ldr	r3, [r7, #4]
 8067604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8067606:	f003 0310 	and.w	r3, r3, #16
 806760a:	2b00      	cmp	r3, #0
 806760c:	d105      	bne.n	806761a <HAL_ADC_IRQHandler+0x156>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 806760e:	687b      	ldr	r3, [r7, #4]
 8067610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8067612:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8067616:	687b      	ldr	r3, [r7, #4]
 8067618:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 806761a:	687b      	ldr	r3, [r7, #4]
 806761c:	681b      	ldr	r3, [r3, #0]
 806761e:	689b      	ldr	r3, [r3, #8]
 8067620:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8067624:	2b00      	cmp	r3, #0
 8067626:	d139      	bne.n	806769c <HAL_ADC_IRQHandler+0x1d8>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8067628:	687b      	ldr	r3, [r7, #4]
 806762a:	681b      	ldr	r3, [r3, #0]
 806762c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 806762e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8067632:	2b00      	cmp	r3, #0
 8067634:	d006      	beq.n	8067644 <HAL_ADC_IRQHandler+0x180>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8067636:	687b      	ldr	r3, [r7, #4]
 8067638:	681b      	ldr	r3, [r3, #0]
 806763a:	689b      	ldr	r3, [r3, #8]
 806763c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8067640:	2b00      	cmp	r3, #0
 8067642:	d12b      	bne.n	806769c <HAL_ADC_IRQHandler+0x1d8>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8067644:	687b      	ldr	r3, [r7, #4]
 8067646:	681b      	ldr	r3, [r3, #0]
 8067648:	685b      	ldr	r3, [r3, #4]
 806764a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 806764e:	2b00      	cmp	r3, #0
 8067650:	d124      	bne.n	806769c <HAL_ADC_IRQHandler+0x1d8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8067652:	687b      	ldr	r3, [r7, #4]
 8067654:	681b      	ldr	r3, [r3, #0]
 8067656:	689b      	ldr	r3, [r3, #8]
 8067658:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 806765c:	2b00      	cmp	r3, #0
 806765e:	d11d      	bne.n	806769c <HAL_ADC_IRQHandler+0x1d8>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8067660:	687b      	ldr	r3, [r7, #4]
 8067662:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8067664:	2b00      	cmp	r3, #0
 8067666:	d119      	bne.n	806769c <HAL_ADC_IRQHandler+0x1d8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8067668:	687b      	ldr	r3, [r7, #4]
 806766a:	681b      	ldr	r3, [r3, #0]
 806766c:	685a      	ldr	r2, [r3, #4]
 806766e:	687b      	ldr	r3, [r7, #4]
 8067670:	681b      	ldr	r3, [r3, #0]
 8067672:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8067676:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8067678:	687b      	ldr	r3, [r7, #4]
 806767a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 806767c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8067680:	687b      	ldr	r3, [r7, #4]
 8067682:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8067684:	687b      	ldr	r3, [r7, #4]
 8067686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8067688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 806768c:	2b00      	cmp	r3, #0
 806768e:	d105      	bne.n	806769c <HAL_ADC_IRQHandler+0x1d8>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8067690:	687b      	ldr	r3, [r7, #4]
 8067692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8067694:	f043 0201 	orr.w	r2, r3, #1
 8067698:	687b      	ldr	r3, [r7, #4]
 806769a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
 806769c:	687b      	ldr	r3, [r7, #4]
 806769e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80676a0:	6878      	ldr	r0, [r7, #4]
 80676a2:	4798      	blx	r3
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80676a4:	687b      	ldr	r3, [r7, #4]
 80676a6:	681b      	ldr	r3, [r3, #0]
 80676a8:	f06f 020c 	mvn.w	r2, #12
 80676ac:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80676ae:	68fb      	ldr	r3, [r7, #12]
 80676b0:	f003 0301 	and.w	r3, r3, #1
 80676b4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80676b6:	68bb      	ldr	r3, [r7, #8]
 80676b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80676bc:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80676be:	697b      	ldr	r3, [r7, #20]
 80676c0:	2b00      	cmp	r3, #0
 80676c2:	d018      	beq.n	80676f6 <HAL_ADC_IRQHandler+0x232>
 80676c4:	693b      	ldr	r3, [r7, #16]
 80676c6:	2b00      	cmp	r3, #0
 80676c8:	d015      	beq.n	80676f6 <HAL_ADC_IRQHandler+0x232>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80676ca:	687b      	ldr	r3, [r7, #4]
 80676cc:	681b      	ldr	r3, [r3, #0]
 80676ce:	681b      	ldr	r3, [r3, #0]
 80676d0:	f003 0301 	and.w	r3, r3, #1
 80676d4:	2b01      	cmp	r3, #1
 80676d6:	d10e      	bne.n	80676f6 <HAL_ADC_IRQHandler+0x232>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80676d8:	687b      	ldr	r3, [r7, #4]
 80676da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80676dc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80676e0:	687b      	ldr	r3, [r7, #4]
 80676e2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
 80676e4:	687b      	ldr	r3, [r7, #4]
 80676e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80676e8:	6878      	ldr	r0, [r7, #4]
 80676ea:	4798      	blx	r3
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80676ec:	687b      	ldr	r3, [r7, #4]
 80676ee:	681b      	ldr	r3, [r3, #0]
 80676f0:	f06f 0201 	mvn.w	r2, #1
 80676f4:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80676f6:	68fb      	ldr	r3, [r7, #12]
 80676f8:	f003 0320 	and.w	r3, r3, #32
 80676fc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80676fe:	68bb      	ldr	r3, [r7, #8]
 8067700:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8067704:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8067706:	697b      	ldr	r3, [r7, #20]
 8067708:	2b00      	cmp	r3, #0
 806770a:	d016      	beq.n	806773a <HAL_ADC_IRQHandler+0x276>
 806770c:	693b      	ldr	r3, [r7, #16]
 806770e:	2b00      	cmp	r3, #0
 8067710:	d013      	beq.n	806773a <HAL_ADC_IRQHandler+0x276>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8067712:	687b      	ldr	r3, [r7, #4]
 8067714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8067716:	f043 0202 	orr.w	r2, r3, #2
 806771a:	687b      	ldr	r3, [r7, #4]
 806771c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 806771e:	687b      	ldr	r3, [r7, #4]
 8067720:	681b      	ldr	r3, [r3, #0]
 8067722:	f06f 0220 	mvn.w	r2, #32
 8067726:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
 8067728:	687b      	ldr	r3, [r7, #4]
 806772a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 806772c:	6878      	ldr	r0, [r7, #4]
 806772e:	4798      	blx	r3
#else
    HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8067730:	687b      	ldr	r3, [r7, #4]
 8067732:	681b      	ldr	r3, [r3, #0]
 8067734:	f06f 0220 	mvn.w	r2, #32
 8067738:	601a      	str	r2, [r3, #0]
  }
}
 806773a:	bf00      	nop
 806773c:	3718      	adds	r7, #24
 806773e:	46bd      	mov	sp, r7
 8067740:	bd80      	pop	{r7, pc}
 8067742:	bf00      	nop
 8067744:	08071498 	.word	0x08071498

08067748 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8067748:	b480      	push	{r7}
 806774a:	b083      	sub	sp, #12
 806774c:	af00      	add	r7, sp, #0
 806774e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8067750:	687b      	ldr	r3, [r7, #4]
 8067752:	681b      	ldr	r3, [r3, #0]
 8067754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8067756:	4618      	mov	r0, r3
 8067758:	370c      	adds	r7, #12
 806775a:	46bd      	mov	sp, r7
 806775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8067760:	4770      	bx	lr

08067762 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8067762:	b480      	push	{r7}
 8067764:	b083      	sub	sp, #12
 8067766:	af00      	add	r7, sp, #0
 8067768:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 806776a:	bf00      	nop
 806776c:	370c      	adds	r7, #12
 806776e:	46bd      	mov	sp, r7
 8067770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8067774:	4770      	bx	lr

08067776 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8067776:	b480      	push	{r7}
 8067778:	b083      	sub	sp, #12
 806777a:	af00      	add	r7, sp, #0
 806777c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 806777e:	bf00      	nop
 8067780:	370c      	adds	r7, #12
 8067782:	46bd      	mov	sp, r7
 8067784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8067788:	4770      	bx	lr
	...

0806778c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 806778c:	b580      	push	{r7, lr}
 806778e:	b084      	sub	sp, #16
 8067790:	af00      	add	r7, sp, #0
 8067792:	6078      	str	r0, [r7, #4]
 8067794:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8067796:	2300      	movs	r3, #0
 8067798:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;

  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 806779a:	683b      	ldr	r3, [r7, #0]
 806779c:	681b      	ldr	r3, [r3, #0]
 806779e:	2b12      	cmp	r3, #18
 80677a0:	d909      	bls.n	80677b6 <HAL_ADC_ConfigChannel+0x2a>
 80677a2:	683b      	ldr	r3, [r7, #0]
 80677a4:	681b      	ldr	r3, [r3, #0]
 80677a6:	4a72      	ldr	r2, [pc, #456]	@ (8067970 <HAL_ADC_ConfigChannel+0x1e4>)
 80677a8:	4293      	cmp	r3, r2
 80677aa:	d004      	beq.n	80677b6 <HAL_ADC_ConfigChannel+0x2a>
 80677ac:	f240 618b 	movw	r1, #1675	@ 0x68b
 80677b0:	4870      	ldr	r0, [pc, #448]	@ (8067974 <HAL_ADC_ConfigChannel+0x1e8>)
 80677b2:	f7fe fe48 	bl	8066446 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80677b6:	683b      	ldr	r3, [r7, #0]
 80677b8:	685b      	ldr	r3, [r3, #4]
 80677ba:	2b00      	cmp	r3, #0
 80677bc:	d003      	beq.n	80677c6 <HAL_ADC_ConfigChannel+0x3a>
 80677be:	683b      	ldr	r3, [r7, #0]
 80677c0:	685b      	ldr	r3, [r3, #4]
 80677c2:	2b10      	cmp	r3, #16
 80677c4:	d904      	bls.n	80677d0 <HAL_ADC_ConfigChannel+0x44>
 80677c6:	f240 618c 	movw	r1, #1676	@ 0x68c
 80677ca:	486a      	ldr	r0, [pc, #424]	@ (8067974 <HAL_ADC_ConfigChannel+0x1e8>)
 80677cc:	f7fe fe3b 	bl	8066446 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80677d0:	683b      	ldr	r3, [r7, #0]
 80677d2:	689b      	ldr	r3, [r3, #8]
 80677d4:	2b00      	cmp	r3, #0
 80677d6:	d020      	beq.n	806781a <HAL_ADC_ConfigChannel+0x8e>
 80677d8:	683b      	ldr	r3, [r7, #0]
 80677da:	689b      	ldr	r3, [r3, #8]
 80677dc:	2b01      	cmp	r3, #1
 80677de:	d01c      	beq.n	806781a <HAL_ADC_ConfigChannel+0x8e>
 80677e0:	683b      	ldr	r3, [r7, #0]
 80677e2:	689b      	ldr	r3, [r3, #8]
 80677e4:	2b02      	cmp	r3, #2
 80677e6:	d018      	beq.n	806781a <HAL_ADC_ConfigChannel+0x8e>
 80677e8:	683b      	ldr	r3, [r7, #0]
 80677ea:	689b      	ldr	r3, [r3, #8]
 80677ec:	2b03      	cmp	r3, #3
 80677ee:	d014      	beq.n	806781a <HAL_ADC_ConfigChannel+0x8e>
 80677f0:	683b      	ldr	r3, [r7, #0]
 80677f2:	689b      	ldr	r3, [r3, #8]
 80677f4:	2b04      	cmp	r3, #4
 80677f6:	d010      	beq.n	806781a <HAL_ADC_ConfigChannel+0x8e>
 80677f8:	683b      	ldr	r3, [r7, #0]
 80677fa:	689b      	ldr	r3, [r3, #8]
 80677fc:	2b05      	cmp	r3, #5
 80677fe:	d00c      	beq.n	806781a <HAL_ADC_ConfigChannel+0x8e>
 8067800:	683b      	ldr	r3, [r7, #0]
 8067802:	689b      	ldr	r3, [r3, #8]
 8067804:	2b06      	cmp	r3, #6
 8067806:	d008      	beq.n	806781a <HAL_ADC_ConfigChannel+0x8e>
 8067808:	683b      	ldr	r3, [r7, #0]
 806780a:	689b      	ldr	r3, [r3, #8]
 806780c:	2b07      	cmp	r3, #7
 806780e:	d004      	beq.n	806781a <HAL_ADC_ConfigChannel+0x8e>
 8067810:	f240 618d 	movw	r1, #1677	@ 0x68d
 8067814:	4857      	ldr	r0, [pc, #348]	@ (8067974 <HAL_ADC_ConfigChannel+0x1e8>)
 8067816:	f7fe fe16 	bl	8066446 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hadc);
 806781a:	687b      	ldr	r3, [r7, #4]
 806781c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8067820:	2b01      	cmp	r3, #1
 8067822:	d101      	bne.n	8067828 <HAL_ADC_ConfigChannel+0x9c>
 8067824:	2302      	movs	r3, #2
 8067826:	e118      	b.n	8067a5a <HAL_ADC_ConfigChannel+0x2ce>
 8067828:	687b      	ldr	r3, [r7, #4]
 806782a:	2201      	movs	r2, #1
 806782c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8067830:	683b      	ldr	r3, [r7, #0]
 8067832:	681b      	ldr	r3, [r3, #0]
 8067834:	2b09      	cmp	r3, #9
 8067836:	d925      	bls.n	8067884 <HAL_ADC_ConfigChannel+0xf8>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8067838:	687b      	ldr	r3, [r7, #4]
 806783a:	681b      	ldr	r3, [r3, #0]
 806783c:	68d9      	ldr	r1, [r3, #12]
 806783e:	683b      	ldr	r3, [r7, #0]
 8067840:	681b      	ldr	r3, [r3, #0]
 8067842:	b29b      	uxth	r3, r3
 8067844:	461a      	mov	r2, r3
 8067846:	4613      	mov	r3, r2
 8067848:	005b      	lsls	r3, r3, #1
 806784a:	4413      	add	r3, r2
 806784c:	3b1e      	subs	r3, #30
 806784e:	2207      	movs	r2, #7
 8067850:	fa02 f303 	lsl.w	r3, r2, r3
 8067854:	43da      	mvns	r2, r3
 8067856:	687b      	ldr	r3, [r7, #4]
 8067858:	681b      	ldr	r3, [r3, #0]
 806785a:	400a      	ands	r2, r1
 806785c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 806785e:	687b      	ldr	r3, [r7, #4]
 8067860:	681b      	ldr	r3, [r3, #0]
 8067862:	68d9      	ldr	r1, [r3, #12]
 8067864:	683b      	ldr	r3, [r7, #0]
 8067866:	689a      	ldr	r2, [r3, #8]
 8067868:	683b      	ldr	r3, [r7, #0]
 806786a:	681b      	ldr	r3, [r3, #0]
 806786c:	b29b      	uxth	r3, r3
 806786e:	4618      	mov	r0, r3
 8067870:	4603      	mov	r3, r0
 8067872:	005b      	lsls	r3, r3, #1
 8067874:	4403      	add	r3, r0
 8067876:	3b1e      	subs	r3, #30
 8067878:	409a      	lsls	r2, r3
 806787a:	687b      	ldr	r3, [r7, #4]
 806787c:	681b      	ldr	r3, [r3, #0]
 806787e:	430a      	orrs	r2, r1
 8067880:	60da      	str	r2, [r3, #12]
 8067882:	e022      	b.n	80678ca <HAL_ADC_ConfigChannel+0x13e>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8067884:	687b      	ldr	r3, [r7, #4]
 8067886:	681b      	ldr	r3, [r3, #0]
 8067888:	6919      	ldr	r1, [r3, #16]
 806788a:	683b      	ldr	r3, [r7, #0]
 806788c:	681b      	ldr	r3, [r3, #0]
 806788e:	b29b      	uxth	r3, r3
 8067890:	461a      	mov	r2, r3
 8067892:	4613      	mov	r3, r2
 8067894:	005b      	lsls	r3, r3, #1
 8067896:	4413      	add	r3, r2
 8067898:	2207      	movs	r2, #7
 806789a:	fa02 f303 	lsl.w	r3, r2, r3
 806789e:	43da      	mvns	r2, r3
 80678a0:	687b      	ldr	r3, [r7, #4]
 80678a2:	681b      	ldr	r3, [r3, #0]
 80678a4:	400a      	ands	r2, r1
 80678a6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80678a8:	687b      	ldr	r3, [r7, #4]
 80678aa:	681b      	ldr	r3, [r3, #0]
 80678ac:	6919      	ldr	r1, [r3, #16]
 80678ae:	683b      	ldr	r3, [r7, #0]
 80678b0:	689a      	ldr	r2, [r3, #8]
 80678b2:	683b      	ldr	r3, [r7, #0]
 80678b4:	681b      	ldr	r3, [r3, #0]
 80678b6:	b29b      	uxth	r3, r3
 80678b8:	4618      	mov	r0, r3
 80678ba:	4603      	mov	r3, r0
 80678bc:	005b      	lsls	r3, r3, #1
 80678be:	4403      	add	r3, r0
 80678c0:	409a      	lsls	r2, r3
 80678c2:	687b      	ldr	r3, [r7, #4]
 80678c4:	681b      	ldr	r3, [r3, #0]
 80678c6:	430a      	orrs	r2, r1
 80678c8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80678ca:	683b      	ldr	r3, [r7, #0]
 80678cc:	685b      	ldr	r3, [r3, #4]
 80678ce:	2b06      	cmp	r3, #6
 80678d0:	d824      	bhi.n	806791c <HAL_ADC_ConfigChannel+0x190>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80678d2:	687b      	ldr	r3, [r7, #4]
 80678d4:	681b      	ldr	r3, [r3, #0]
 80678d6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80678d8:	683b      	ldr	r3, [r7, #0]
 80678da:	685a      	ldr	r2, [r3, #4]
 80678dc:	4613      	mov	r3, r2
 80678de:	009b      	lsls	r3, r3, #2
 80678e0:	4413      	add	r3, r2
 80678e2:	3b05      	subs	r3, #5
 80678e4:	221f      	movs	r2, #31
 80678e6:	fa02 f303 	lsl.w	r3, r2, r3
 80678ea:	43da      	mvns	r2, r3
 80678ec:	687b      	ldr	r3, [r7, #4]
 80678ee:	681b      	ldr	r3, [r3, #0]
 80678f0:	400a      	ands	r2, r1
 80678f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80678f4:	687b      	ldr	r3, [r7, #4]
 80678f6:	681b      	ldr	r3, [r3, #0]
 80678f8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80678fa:	683b      	ldr	r3, [r7, #0]
 80678fc:	681b      	ldr	r3, [r3, #0]
 80678fe:	b29b      	uxth	r3, r3
 8067900:	4618      	mov	r0, r3
 8067902:	683b      	ldr	r3, [r7, #0]
 8067904:	685a      	ldr	r2, [r3, #4]
 8067906:	4613      	mov	r3, r2
 8067908:	009b      	lsls	r3, r3, #2
 806790a:	4413      	add	r3, r2
 806790c:	3b05      	subs	r3, #5
 806790e:	fa00 f203 	lsl.w	r2, r0, r3
 8067912:	687b      	ldr	r3, [r7, #4]
 8067914:	681b      	ldr	r3, [r3, #0]
 8067916:	430a      	orrs	r2, r1
 8067918:	635a      	str	r2, [r3, #52]	@ 0x34
 806791a:	e051      	b.n	80679c0 <HAL_ADC_ConfigChannel+0x234>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 806791c:	683b      	ldr	r3, [r7, #0]
 806791e:	685b      	ldr	r3, [r3, #4]
 8067920:	2b0c      	cmp	r3, #12
 8067922:	d829      	bhi.n	8067978 <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8067924:	687b      	ldr	r3, [r7, #4]
 8067926:	681b      	ldr	r3, [r3, #0]
 8067928:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 806792a:	683b      	ldr	r3, [r7, #0]
 806792c:	685a      	ldr	r2, [r3, #4]
 806792e:	4613      	mov	r3, r2
 8067930:	009b      	lsls	r3, r3, #2
 8067932:	4413      	add	r3, r2
 8067934:	3b23      	subs	r3, #35	@ 0x23
 8067936:	221f      	movs	r2, #31
 8067938:	fa02 f303 	lsl.w	r3, r2, r3
 806793c:	43da      	mvns	r2, r3
 806793e:	687b      	ldr	r3, [r7, #4]
 8067940:	681b      	ldr	r3, [r3, #0]
 8067942:	400a      	ands	r2, r1
 8067944:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8067946:	687b      	ldr	r3, [r7, #4]
 8067948:	681b      	ldr	r3, [r3, #0]
 806794a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 806794c:	683b      	ldr	r3, [r7, #0]
 806794e:	681b      	ldr	r3, [r3, #0]
 8067950:	b29b      	uxth	r3, r3
 8067952:	4618      	mov	r0, r3
 8067954:	683b      	ldr	r3, [r7, #0]
 8067956:	685a      	ldr	r2, [r3, #4]
 8067958:	4613      	mov	r3, r2
 806795a:	009b      	lsls	r3, r3, #2
 806795c:	4413      	add	r3, r2
 806795e:	3b23      	subs	r3, #35	@ 0x23
 8067960:	fa00 f203 	lsl.w	r2, r0, r3
 8067964:	687b      	ldr	r3, [r7, #4]
 8067966:	681b      	ldr	r3, [r3, #0]
 8067968:	430a      	orrs	r2, r1
 806796a:	631a      	str	r2, [r3, #48]	@ 0x30
 806796c:	e028      	b.n	80679c0 <HAL_ADC_ConfigChannel+0x234>
 806796e:	bf00      	nop
 8067970:	10000012 	.word	0x10000012
 8067974:	08071498 	.word	0x08071498
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8067978:	687b      	ldr	r3, [r7, #4]
 806797a:	681b      	ldr	r3, [r3, #0]
 806797c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 806797e:	683b      	ldr	r3, [r7, #0]
 8067980:	685a      	ldr	r2, [r3, #4]
 8067982:	4613      	mov	r3, r2
 8067984:	009b      	lsls	r3, r3, #2
 8067986:	4413      	add	r3, r2
 8067988:	3b41      	subs	r3, #65	@ 0x41
 806798a:	221f      	movs	r2, #31
 806798c:	fa02 f303 	lsl.w	r3, r2, r3
 8067990:	43da      	mvns	r2, r3
 8067992:	687b      	ldr	r3, [r7, #4]
 8067994:	681b      	ldr	r3, [r3, #0]
 8067996:	400a      	ands	r2, r1
 8067998:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 806799a:	687b      	ldr	r3, [r7, #4]
 806799c:	681b      	ldr	r3, [r3, #0]
 806799e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80679a0:	683b      	ldr	r3, [r7, #0]
 80679a2:	681b      	ldr	r3, [r3, #0]
 80679a4:	b29b      	uxth	r3, r3
 80679a6:	4618      	mov	r0, r3
 80679a8:	683b      	ldr	r3, [r7, #0]
 80679aa:	685a      	ldr	r2, [r3, #4]
 80679ac:	4613      	mov	r3, r2
 80679ae:	009b      	lsls	r3, r3, #2
 80679b0:	4413      	add	r3, r2
 80679b2:	3b41      	subs	r3, #65	@ 0x41
 80679b4:	fa00 f203 	lsl.w	r2, r0, r3
 80679b8:	687b      	ldr	r3, [r7, #4]
 80679ba:	681b      	ldr	r3, [r3, #0]
 80679bc:	430a      	orrs	r2, r1
 80679be:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80679c0:	4b28      	ldr	r3, [pc, #160]	@ (8067a64 <HAL_ADC_ConfigChannel+0x2d8>)
 80679c2:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80679c4:	687b      	ldr	r3, [r7, #4]
 80679c6:	681b      	ldr	r3, [r3, #0]
 80679c8:	4a27      	ldr	r2, [pc, #156]	@ (8067a68 <HAL_ADC_ConfigChannel+0x2dc>)
 80679ca:	4293      	cmp	r3, r2
 80679cc:	d10f      	bne.n	80679ee <HAL_ADC_ConfigChannel+0x262>
 80679ce:	683b      	ldr	r3, [r7, #0]
 80679d0:	681b      	ldr	r3, [r3, #0]
 80679d2:	2b12      	cmp	r3, #18
 80679d4:	d10b      	bne.n	80679ee <HAL_ADC_ConfigChannel+0x262>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80679d6:	68fb      	ldr	r3, [r7, #12]
 80679d8:	685b      	ldr	r3, [r3, #4]
 80679da:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80679de:	68fb      	ldr	r3, [r7, #12]
 80679e0:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80679e2:	68fb      	ldr	r3, [r7, #12]
 80679e4:	685b      	ldr	r3, [r3, #4]
 80679e6:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80679ea:	68fb      	ldr	r3, [r7, #12]
 80679ec:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80679ee:	687b      	ldr	r3, [r7, #4]
 80679f0:	681b      	ldr	r3, [r3, #0]
 80679f2:	4a1d      	ldr	r2, [pc, #116]	@ (8067a68 <HAL_ADC_ConfigChannel+0x2dc>)
 80679f4:	4293      	cmp	r3, r2
 80679f6:	d12b      	bne.n	8067a50 <HAL_ADC_ConfigChannel+0x2c4>
 80679f8:	683b      	ldr	r3, [r7, #0]
 80679fa:	681b      	ldr	r3, [r3, #0]
 80679fc:	4a1b      	ldr	r2, [pc, #108]	@ (8067a6c <HAL_ADC_ConfigChannel+0x2e0>)
 80679fe:	4293      	cmp	r3, r2
 8067a00:	d003      	beq.n	8067a0a <HAL_ADC_ConfigChannel+0x27e>
 8067a02:	683b      	ldr	r3, [r7, #0]
 8067a04:	681b      	ldr	r3, [r3, #0]
 8067a06:	2b11      	cmp	r3, #17
 8067a08:	d122      	bne.n	8067a50 <HAL_ADC_ConfigChannel+0x2c4>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8067a0a:	68fb      	ldr	r3, [r7, #12]
 8067a0c:	685b      	ldr	r3, [r3, #4]
 8067a0e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8067a12:	68fb      	ldr	r3, [r7, #12]
 8067a14:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8067a16:	68fb      	ldr	r3, [r7, #12]
 8067a18:	685b      	ldr	r3, [r3, #4]
 8067a1a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8067a1e:	68fb      	ldr	r3, [r7, #12]
 8067a20:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8067a22:	683b      	ldr	r3, [r7, #0]
 8067a24:	681b      	ldr	r3, [r3, #0]
 8067a26:	4a11      	ldr	r2, [pc, #68]	@ (8067a6c <HAL_ADC_ConfigChannel+0x2e0>)
 8067a28:	4293      	cmp	r3, r2
 8067a2a:	d111      	bne.n	8067a50 <HAL_ADC_ConfigChannel+0x2c4>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8067a2c:	4b10      	ldr	r3, [pc, #64]	@ (8067a70 <HAL_ADC_ConfigChannel+0x2e4>)
 8067a2e:	681b      	ldr	r3, [r3, #0]
 8067a30:	4a10      	ldr	r2, [pc, #64]	@ (8067a74 <HAL_ADC_ConfigChannel+0x2e8>)
 8067a32:	fba2 2303 	umull	r2, r3, r2, r3
 8067a36:	0c9a      	lsrs	r2, r3, #18
 8067a38:	4613      	mov	r3, r2
 8067a3a:	009b      	lsls	r3, r3, #2
 8067a3c:	4413      	add	r3, r2
 8067a3e:	005b      	lsls	r3, r3, #1
 8067a40:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8067a42:	e002      	b.n	8067a4a <HAL_ADC_ConfigChannel+0x2be>
      {
        counter--;
 8067a44:	68bb      	ldr	r3, [r7, #8]
 8067a46:	3b01      	subs	r3, #1
 8067a48:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8067a4a:	68bb      	ldr	r3, [r7, #8]
 8067a4c:	2b00      	cmp	r3, #0
 8067a4e:	d1f9      	bne.n	8067a44 <HAL_ADC_ConfigChannel+0x2b8>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8067a50:	687b      	ldr	r3, [r7, #4]
 8067a52:	2200      	movs	r2, #0
 8067a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8067a58:	2300      	movs	r3, #0
}
 8067a5a:	4618      	mov	r0, r3
 8067a5c:	3710      	adds	r7, #16
 8067a5e:	46bd      	mov	sp, r7
 8067a60:	bd80      	pop	{r7, pc}
 8067a62:	bf00      	nop
 8067a64:	40012300 	.word	0x40012300
 8067a68:	40012000 	.word	0x40012000
 8067a6c:	10000012 	.word	0x10000012
 8067a70:	20010120 	.word	0x20010120
 8067a74:	431bde83 	.word	0x431bde83

08067a78 <HAL_ADC_GetError>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval ADC Error Code
  */
uint32_t HAL_ADC_GetError(ADC_HandleTypeDef *hadc)
{
 8067a78:	b480      	push	{r7}
 8067a7a:	b083      	sub	sp, #12
 8067a7c:	af00      	add	r7, sp, #0
 8067a7e:	6078      	str	r0, [r7, #4]
  return hadc->ErrorCode;
 8067a80:	687b      	ldr	r3, [r7, #4]
 8067a82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8067a84:	4618      	mov	r0, r3
 8067a86:	370c      	adds	r7, #12
 8067a88:	46bd      	mov	sp, r7
 8067a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8067a8e:	4770      	bx	lr

08067a90 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8067a90:	b580      	push	{r7, lr}
 8067a92:	b084      	sub	sp, #16
 8067a94:	af00      	add	r7, sp, #0
 8067a96:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8067a98:	4b7f      	ldr	r3, [pc, #508]	@ (8067c98 <ADC_Init+0x208>)
 8067a9a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8067a9c:	68fb      	ldr	r3, [r7, #12]
 8067a9e:	685b      	ldr	r3, [r3, #4]
 8067aa0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8067aa4:	68fb      	ldr	r3, [r7, #12]
 8067aa6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8067aa8:	68fb      	ldr	r3, [r7, #12]
 8067aaa:	685a      	ldr	r2, [r3, #4]
 8067aac:	687b      	ldr	r3, [r7, #4]
 8067aae:	685b      	ldr	r3, [r3, #4]
 8067ab0:	431a      	orrs	r2, r3
 8067ab2:	68fb      	ldr	r3, [r7, #12]
 8067ab4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8067ab6:	687b      	ldr	r3, [r7, #4]
 8067ab8:	681b      	ldr	r3, [r3, #0]
 8067aba:	685a      	ldr	r2, [r3, #4]
 8067abc:	687b      	ldr	r3, [r7, #4]
 8067abe:	681b      	ldr	r3, [r3, #0]
 8067ac0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8067ac4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8067ac6:	687b      	ldr	r3, [r7, #4]
 8067ac8:	681b      	ldr	r3, [r3, #0]
 8067aca:	6859      	ldr	r1, [r3, #4]
 8067acc:	687b      	ldr	r3, [r7, #4]
 8067ace:	691b      	ldr	r3, [r3, #16]
 8067ad0:	021a      	lsls	r2, r3, #8
 8067ad2:	687b      	ldr	r3, [r7, #4]
 8067ad4:	681b      	ldr	r3, [r3, #0]
 8067ad6:	430a      	orrs	r2, r1
 8067ad8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8067ada:	687b      	ldr	r3, [r7, #4]
 8067adc:	681b      	ldr	r3, [r3, #0]
 8067ade:	685a      	ldr	r2, [r3, #4]
 8067ae0:	687b      	ldr	r3, [r7, #4]
 8067ae2:	681b      	ldr	r3, [r3, #0]
 8067ae4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8067ae8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8067aea:	687b      	ldr	r3, [r7, #4]
 8067aec:	681b      	ldr	r3, [r3, #0]
 8067aee:	6859      	ldr	r1, [r3, #4]
 8067af0:	687b      	ldr	r3, [r7, #4]
 8067af2:	689a      	ldr	r2, [r3, #8]
 8067af4:	687b      	ldr	r3, [r7, #4]
 8067af6:	681b      	ldr	r3, [r3, #0]
 8067af8:	430a      	orrs	r2, r1
 8067afa:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8067afc:	687b      	ldr	r3, [r7, #4]
 8067afe:	681b      	ldr	r3, [r3, #0]
 8067b00:	689a      	ldr	r2, [r3, #8]
 8067b02:	687b      	ldr	r3, [r7, #4]
 8067b04:	681b      	ldr	r3, [r3, #0]
 8067b06:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8067b0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8067b0c:	687b      	ldr	r3, [r7, #4]
 8067b0e:	681b      	ldr	r3, [r3, #0]
 8067b10:	6899      	ldr	r1, [r3, #8]
 8067b12:	687b      	ldr	r3, [r7, #4]
 8067b14:	68da      	ldr	r2, [r3, #12]
 8067b16:	687b      	ldr	r3, [r7, #4]
 8067b18:	681b      	ldr	r3, [r3, #0]
 8067b1a:	430a      	orrs	r2, r1
 8067b1c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8067b1e:	687b      	ldr	r3, [r7, #4]
 8067b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8067b22:	4a5e      	ldr	r2, [pc, #376]	@ (8067c9c <ADC_Init+0x20c>)
 8067b24:	4293      	cmp	r3, r2
 8067b26:	d022      	beq.n	8067b6e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8067b28:	687b      	ldr	r3, [r7, #4]
 8067b2a:	681b      	ldr	r3, [r3, #0]
 8067b2c:	689a      	ldr	r2, [r3, #8]
 8067b2e:	687b      	ldr	r3, [r7, #4]
 8067b30:	681b      	ldr	r3, [r3, #0]
 8067b32:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8067b36:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8067b38:	687b      	ldr	r3, [r7, #4]
 8067b3a:	681b      	ldr	r3, [r3, #0]
 8067b3c:	6899      	ldr	r1, [r3, #8]
 8067b3e:	687b      	ldr	r3, [r7, #4]
 8067b40:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8067b42:	687b      	ldr	r3, [r7, #4]
 8067b44:	681b      	ldr	r3, [r3, #0]
 8067b46:	430a      	orrs	r2, r1
 8067b48:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8067b4a:	687b      	ldr	r3, [r7, #4]
 8067b4c:	681b      	ldr	r3, [r3, #0]
 8067b4e:	689a      	ldr	r2, [r3, #8]
 8067b50:	687b      	ldr	r3, [r7, #4]
 8067b52:	681b      	ldr	r3, [r3, #0]
 8067b54:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8067b58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8067b5a:	687b      	ldr	r3, [r7, #4]
 8067b5c:	681b      	ldr	r3, [r3, #0]
 8067b5e:	6899      	ldr	r1, [r3, #8]
 8067b60:	687b      	ldr	r3, [r7, #4]
 8067b62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8067b64:	687b      	ldr	r3, [r7, #4]
 8067b66:	681b      	ldr	r3, [r3, #0]
 8067b68:	430a      	orrs	r2, r1
 8067b6a:	609a      	str	r2, [r3, #8]
 8067b6c:	e00f      	b.n	8067b8e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8067b6e:	687b      	ldr	r3, [r7, #4]
 8067b70:	681b      	ldr	r3, [r3, #0]
 8067b72:	689a      	ldr	r2, [r3, #8]
 8067b74:	687b      	ldr	r3, [r7, #4]
 8067b76:	681b      	ldr	r3, [r3, #0]
 8067b78:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8067b7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8067b7e:	687b      	ldr	r3, [r7, #4]
 8067b80:	681b      	ldr	r3, [r3, #0]
 8067b82:	689a      	ldr	r2, [r3, #8]
 8067b84:	687b      	ldr	r3, [r7, #4]
 8067b86:	681b      	ldr	r3, [r3, #0]
 8067b88:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8067b8c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8067b8e:	687b      	ldr	r3, [r7, #4]
 8067b90:	681b      	ldr	r3, [r3, #0]
 8067b92:	689a      	ldr	r2, [r3, #8]
 8067b94:	687b      	ldr	r3, [r7, #4]
 8067b96:	681b      	ldr	r3, [r3, #0]
 8067b98:	f022 0202 	bic.w	r2, r2, #2
 8067b9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8067b9e:	687b      	ldr	r3, [r7, #4]
 8067ba0:	681b      	ldr	r3, [r3, #0]
 8067ba2:	6899      	ldr	r1, [r3, #8]
 8067ba4:	687b      	ldr	r3, [r7, #4]
 8067ba6:	7e1b      	ldrb	r3, [r3, #24]
 8067ba8:	005a      	lsls	r2, r3, #1
 8067baa:	687b      	ldr	r3, [r7, #4]
 8067bac:	681b      	ldr	r3, [r3, #0]
 8067bae:	430a      	orrs	r2, r1
 8067bb0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8067bb2:	687b      	ldr	r3, [r7, #4]
 8067bb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8067bb8:	2b00      	cmp	r3, #0
 8067bba:	d028      	beq.n	8067c0e <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8067bbc:	687b      	ldr	r3, [r7, #4]
 8067bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8067bc0:	2b00      	cmp	r3, #0
 8067bc2:	d003      	beq.n	8067bcc <ADC_Init+0x13c>
 8067bc4:	687b      	ldr	r3, [r7, #4]
 8067bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8067bc8:	2b08      	cmp	r3, #8
 8067bca:	d904      	bls.n	8067bd6 <ADC_Init+0x146>
 8067bcc:	f44f 61f5 	mov.w	r1, #1960	@ 0x7a8
 8067bd0:	4833      	ldr	r0, [pc, #204]	@ (8067ca0 <ADC_Init+0x210>)
 8067bd2:	f7fe fc38 	bl	8066446 <assert_failed>

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8067bd6:	687b      	ldr	r3, [r7, #4]
 8067bd8:	681b      	ldr	r3, [r3, #0]
 8067bda:	685a      	ldr	r2, [r3, #4]
 8067bdc:	687b      	ldr	r3, [r7, #4]
 8067bde:	681b      	ldr	r3, [r3, #0]
 8067be0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8067be4:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8067be6:	687b      	ldr	r3, [r7, #4]
 8067be8:	681b      	ldr	r3, [r3, #0]
 8067bea:	685a      	ldr	r2, [r3, #4]
 8067bec:	687b      	ldr	r3, [r7, #4]
 8067bee:	681b      	ldr	r3, [r3, #0]
 8067bf0:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8067bf4:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8067bf6:	687b      	ldr	r3, [r7, #4]
 8067bf8:	681b      	ldr	r3, [r3, #0]
 8067bfa:	6859      	ldr	r1, [r3, #4]
 8067bfc:	687b      	ldr	r3, [r7, #4]
 8067bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8067c00:	3b01      	subs	r3, #1
 8067c02:	035a      	lsls	r2, r3, #13
 8067c04:	687b      	ldr	r3, [r7, #4]
 8067c06:	681b      	ldr	r3, [r3, #0]
 8067c08:	430a      	orrs	r2, r1
 8067c0a:	605a      	str	r2, [r3, #4]
 8067c0c:	e007      	b.n	8067c1e <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8067c0e:	687b      	ldr	r3, [r7, #4]
 8067c10:	681b      	ldr	r3, [r3, #0]
 8067c12:	685a      	ldr	r2, [r3, #4]
 8067c14:	687b      	ldr	r3, [r7, #4]
 8067c16:	681b      	ldr	r3, [r3, #0]
 8067c18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8067c1c:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8067c1e:	687b      	ldr	r3, [r7, #4]
 8067c20:	681b      	ldr	r3, [r3, #0]
 8067c22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8067c24:	687b      	ldr	r3, [r7, #4]
 8067c26:	681b      	ldr	r3, [r3, #0]
 8067c28:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8067c2c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8067c2e:	687b      	ldr	r3, [r7, #4]
 8067c30:	681b      	ldr	r3, [r3, #0]
 8067c32:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8067c34:	687b      	ldr	r3, [r7, #4]
 8067c36:	69db      	ldr	r3, [r3, #28]
 8067c38:	3b01      	subs	r3, #1
 8067c3a:	051a      	lsls	r2, r3, #20
 8067c3c:	687b      	ldr	r3, [r7, #4]
 8067c3e:	681b      	ldr	r3, [r3, #0]
 8067c40:	430a      	orrs	r2, r1
 8067c42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8067c44:	687b      	ldr	r3, [r7, #4]
 8067c46:	681b      	ldr	r3, [r3, #0]
 8067c48:	689a      	ldr	r2, [r3, #8]
 8067c4a:	687b      	ldr	r3, [r7, #4]
 8067c4c:	681b      	ldr	r3, [r3, #0]
 8067c4e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8067c52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8067c54:	687b      	ldr	r3, [r7, #4]
 8067c56:	681b      	ldr	r3, [r3, #0]
 8067c58:	6899      	ldr	r1, [r3, #8]
 8067c5a:	687b      	ldr	r3, [r7, #4]
 8067c5c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8067c60:	025a      	lsls	r2, r3, #9
 8067c62:	687b      	ldr	r3, [r7, #4]
 8067c64:	681b      	ldr	r3, [r3, #0]
 8067c66:	430a      	orrs	r2, r1
 8067c68:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8067c6a:	687b      	ldr	r3, [r7, #4]
 8067c6c:	681b      	ldr	r3, [r3, #0]
 8067c6e:	689a      	ldr	r2, [r3, #8]
 8067c70:	687b      	ldr	r3, [r7, #4]
 8067c72:	681b      	ldr	r3, [r3, #0]
 8067c74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8067c78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8067c7a:	687b      	ldr	r3, [r7, #4]
 8067c7c:	681b      	ldr	r3, [r3, #0]
 8067c7e:	6899      	ldr	r1, [r3, #8]
 8067c80:	687b      	ldr	r3, [r7, #4]
 8067c82:	695b      	ldr	r3, [r3, #20]
 8067c84:	029a      	lsls	r2, r3, #10
 8067c86:	687b      	ldr	r3, [r7, #4]
 8067c88:	681b      	ldr	r3, [r3, #0]
 8067c8a:	430a      	orrs	r2, r1
 8067c8c:	609a      	str	r2, [r3, #8]
}
 8067c8e:	bf00      	nop
 8067c90:	3710      	adds	r7, #16
 8067c92:	46bd      	mov	sp, r7
 8067c94:	bd80      	pop	{r7, pc}
 8067c96:	bf00      	nop
 8067c98:	40012300 	.word	0x40012300
 8067c9c:	0f000001 	.word	0x0f000001
 8067ca0:	08071498 	.word	0x08071498

08067ca4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8067ca4:	b480      	push	{r7}
 8067ca6:	b083      	sub	sp, #12
 8067ca8:	af00      	add	r7, sp, #0
 8067caa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8067cac:	bf00      	nop
 8067cae:	370c      	adds	r7, #12
 8067cb0:	46bd      	mov	sp, r7
 8067cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8067cb6:	4770      	bx	lr

08067cb8 <__NVIC_SetPriorityGrouping>:
{
 8067cb8:	b480      	push	{r7}
 8067cba:	b085      	sub	sp, #20
 8067cbc:	af00      	add	r7, sp, #0
 8067cbe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8067cc0:	687b      	ldr	r3, [r7, #4]
 8067cc2:	f003 0307 	and.w	r3, r3, #7
 8067cc6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8067cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8067cfc <__NVIC_SetPriorityGrouping+0x44>)
 8067cca:	68db      	ldr	r3, [r3, #12]
 8067ccc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8067cce:	68ba      	ldr	r2, [r7, #8]
 8067cd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8067cd4:	4013      	ands	r3, r2
 8067cd6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8067cd8:	68fb      	ldr	r3, [r7, #12]
 8067cda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8067cdc:	68bb      	ldr	r3, [r7, #8]
 8067cde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8067ce0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8067ce4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8067ce8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8067cea:	4a04      	ldr	r2, [pc, #16]	@ (8067cfc <__NVIC_SetPriorityGrouping+0x44>)
 8067cec:	68bb      	ldr	r3, [r7, #8]
 8067cee:	60d3      	str	r3, [r2, #12]
}
 8067cf0:	bf00      	nop
 8067cf2:	3714      	adds	r7, #20
 8067cf4:	46bd      	mov	sp, r7
 8067cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8067cfa:	4770      	bx	lr
 8067cfc:	e000ed00 	.word	0xe000ed00

08067d00 <__NVIC_GetPriorityGrouping>:
{
 8067d00:	b480      	push	{r7}
 8067d02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8067d04:	4b04      	ldr	r3, [pc, #16]	@ (8067d18 <__NVIC_GetPriorityGrouping+0x18>)
 8067d06:	68db      	ldr	r3, [r3, #12]
 8067d08:	0a1b      	lsrs	r3, r3, #8
 8067d0a:	f003 0307 	and.w	r3, r3, #7
}
 8067d0e:	4618      	mov	r0, r3
 8067d10:	46bd      	mov	sp, r7
 8067d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8067d16:	4770      	bx	lr
 8067d18:	e000ed00 	.word	0xe000ed00

08067d1c <__NVIC_EnableIRQ>:
{
 8067d1c:	b480      	push	{r7}
 8067d1e:	b083      	sub	sp, #12
 8067d20:	af00      	add	r7, sp, #0
 8067d22:	4603      	mov	r3, r0
 8067d24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8067d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8067d2a:	2b00      	cmp	r3, #0
 8067d2c:	db0b      	blt.n	8067d46 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8067d2e:	79fb      	ldrb	r3, [r7, #7]
 8067d30:	f003 021f 	and.w	r2, r3, #31
 8067d34:	4907      	ldr	r1, [pc, #28]	@ (8067d54 <__NVIC_EnableIRQ+0x38>)
 8067d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8067d3a:	095b      	lsrs	r3, r3, #5
 8067d3c:	2001      	movs	r0, #1
 8067d3e:	fa00 f202 	lsl.w	r2, r0, r2
 8067d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8067d46:	bf00      	nop
 8067d48:	370c      	adds	r7, #12
 8067d4a:	46bd      	mov	sp, r7
 8067d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8067d50:	4770      	bx	lr
 8067d52:	bf00      	nop
 8067d54:	e000e100 	.word	0xe000e100

08067d58 <__NVIC_SetPriority>:
{
 8067d58:	b480      	push	{r7}
 8067d5a:	b083      	sub	sp, #12
 8067d5c:	af00      	add	r7, sp, #0
 8067d5e:	4603      	mov	r3, r0
 8067d60:	6039      	str	r1, [r7, #0]
 8067d62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8067d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8067d68:	2b00      	cmp	r3, #0
 8067d6a:	db0a      	blt.n	8067d82 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8067d6c:	683b      	ldr	r3, [r7, #0]
 8067d6e:	b2da      	uxtb	r2, r3
 8067d70:	490c      	ldr	r1, [pc, #48]	@ (8067da4 <__NVIC_SetPriority+0x4c>)
 8067d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8067d76:	0112      	lsls	r2, r2, #4
 8067d78:	b2d2      	uxtb	r2, r2
 8067d7a:	440b      	add	r3, r1
 8067d7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8067d80:	e00a      	b.n	8067d98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8067d82:	683b      	ldr	r3, [r7, #0]
 8067d84:	b2da      	uxtb	r2, r3
 8067d86:	4908      	ldr	r1, [pc, #32]	@ (8067da8 <__NVIC_SetPriority+0x50>)
 8067d88:	79fb      	ldrb	r3, [r7, #7]
 8067d8a:	f003 030f 	and.w	r3, r3, #15
 8067d8e:	3b04      	subs	r3, #4
 8067d90:	0112      	lsls	r2, r2, #4
 8067d92:	b2d2      	uxtb	r2, r2
 8067d94:	440b      	add	r3, r1
 8067d96:	761a      	strb	r2, [r3, #24]
}
 8067d98:	bf00      	nop
 8067d9a:	370c      	adds	r7, #12
 8067d9c:	46bd      	mov	sp, r7
 8067d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8067da2:	4770      	bx	lr
 8067da4:	e000e100 	.word	0xe000e100
 8067da8:	e000ed00 	.word	0xe000ed00

08067dac <NVIC_EncodePriority>:
{
 8067dac:	b480      	push	{r7}
 8067dae:	b089      	sub	sp, #36	@ 0x24
 8067db0:	af00      	add	r7, sp, #0
 8067db2:	60f8      	str	r0, [r7, #12]
 8067db4:	60b9      	str	r1, [r7, #8]
 8067db6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8067db8:	68fb      	ldr	r3, [r7, #12]
 8067dba:	f003 0307 	and.w	r3, r3, #7
 8067dbe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8067dc0:	69fb      	ldr	r3, [r7, #28]
 8067dc2:	f1c3 0307 	rsb	r3, r3, #7
 8067dc6:	2b04      	cmp	r3, #4
 8067dc8:	bf28      	it	cs
 8067dca:	2304      	movcs	r3, #4
 8067dcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8067dce:	69fb      	ldr	r3, [r7, #28]
 8067dd0:	3304      	adds	r3, #4
 8067dd2:	2b06      	cmp	r3, #6
 8067dd4:	d902      	bls.n	8067ddc <NVIC_EncodePriority+0x30>
 8067dd6:	69fb      	ldr	r3, [r7, #28]
 8067dd8:	3b03      	subs	r3, #3
 8067dda:	e000      	b.n	8067dde <NVIC_EncodePriority+0x32>
 8067ddc:	2300      	movs	r3, #0
 8067dde:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8067de0:	f04f 32ff 	mov.w	r2, #4294967295
 8067de4:	69bb      	ldr	r3, [r7, #24]
 8067de6:	fa02 f303 	lsl.w	r3, r2, r3
 8067dea:	43da      	mvns	r2, r3
 8067dec:	68bb      	ldr	r3, [r7, #8]
 8067dee:	401a      	ands	r2, r3
 8067df0:	697b      	ldr	r3, [r7, #20]
 8067df2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8067df4:	f04f 31ff 	mov.w	r1, #4294967295
 8067df8:	697b      	ldr	r3, [r7, #20]
 8067dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8067dfe:	43d9      	mvns	r1, r3
 8067e00:	687b      	ldr	r3, [r7, #4]
 8067e02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8067e04:	4313      	orrs	r3, r2
}
 8067e06:	4618      	mov	r0, r3
 8067e08:	3724      	adds	r7, #36	@ 0x24
 8067e0a:	46bd      	mov	sp, r7
 8067e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8067e10:	4770      	bx	lr
	...

08067e14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8067e14:	b580      	push	{r7, lr}
 8067e16:	b082      	sub	sp, #8
 8067e18:	af00      	add	r7, sp, #0
 8067e1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8067e1c:	687b      	ldr	r3, [r7, #4]
 8067e1e:	2b07      	cmp	r3, #7
 8067e20:	d00f      	beq.n	8067e42 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8067e22:	687b      	ldr	r3, [r7, #4]
 8067e24:	2b06      	cmp	r3, #6
 8067e26:	d00c      	beq.n	8067e42 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8067e28:	687b      	ldr	r3, [r7, #4]
 8067e2a:	2b05      	cmp	r3, #5
 8067e2c:	d009      	beq.n	8067e42 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8067e2e:	687b      	ldr	r3, [r7, #4]
 8067e30:	2b04      	cmp	r3, #4
 8067e32:	d006      	beq.n	8067e42 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8067e34:	687b      	ldr	r3, [r7, #4]
 8067e36:	2b03      	cmp	r3, #3
 8067e38:	d003      	beq.n	8067e42 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8067e3a:	2190      	movs	r1, #144	@ 0x90
 8067e3c:	4804      	ldr	r0, [pc, #16]	@ (8067e50 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8067e3e:	f7fe fb02 	bl	8066446 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8067e42:	6878      	ldr	r0, [r7, #4]
 8067e44:	f7ff ff38 	bl	8067cb8 <__NVIC_SetPriorityGrouping>
}
 8067e48:	bf00      	nop
 8067e4a:	3708      	adds	r7, #8
 8067e4c:	46bd      	mov	sp, r7
 8067e4e:	bd80      	pop	{r7, pc}
 8067e50:	0807150c 	.word	0x0807150c

08067e54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8067e54:	b580      	push	{r7, lr}
 8067e56:	b086      	sub	sp, #24
 8067e58:	af00      	add	r7, sp, #0
 8067e5a:	4603      	mov	r3, r0
 8067e5c:	60b9      	str	r1, [r7, #8]
 8067e5e:	607a      	str	r2, [r7, #4]
 8067e60:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8067e62:	2300      	movs	r3, #0
 8067e64:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8067e66:	687b      	ldr	r3, [r7, #4]
 8067e68:	2b0f      	cmp	r3, #15
 8067e6a:	d903      	bls.n	8067e74 <HAL_NVIC_SetPriority+0x20>
 8067e6c:	21a8      	movs	r1, #168	@ 0xa8
 8067e6e:	480e      	ldr	r0, [pc, #56]	@ (8067ea8 <HAL_NVIC_SetPriority+0x54>)
 8067e70:	f7fe fae9 	bl	8066446 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8067e74:	68bb      	ldr	r3, [r7, #8]
 8067e76:	2b0f      	cmp	r3, #15
 8067e78:	d903      	bls.n	8067e82 <HAL_NVIC_SetPriority+0x2e>
 8067e7a:	21a9      	movs	r1, #169	@ 0xa9
 8067e7c:	480a      	ldr	r0, [pc, #40]	@ (8067ea8 <HAL_NVIC_SetPriority+0x54>)
 8067e7e:	f7fe fae2 	bl	8066446 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8067e82:	f7ff ff3d 	bl	8067d00 <__NVIC_GetPriorityGrouping>
 8067e86:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8067e88:	687a      	ldr	r2, [r7, #4]
 8067e8a:	68b9      	ldr	r1, [r7, #8]
 8067e8c:	6978      	ldr	r0, [r7, #20]
 8067e8e:	f7ff ff8d 	bl	8067dac <NVIC_EncodePriority>
 8067e92:	4602      	mov	r2, r0
 8067e94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8067e98:	4611      	mov	r1, r2
 8067e9a:	4618      	mov	r0, r3
 8067e9c:	f7ff ff5c 	bl	8067d58 <__NVIC_SetPriority>
}
 8067ea0:	bf00      	nop
 8067ea2:	3718      	adds	r7, #24
 8067ea4:	46bd      	mov	sp, r7
 8067ea6:	bd80      	pop	{r7, pc}
 8067ea8:	0807150c 	.word	0x0807150c

08067eac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8067eac:	b580      	push	{r7, lr}
 8067eae:	b082      	sub	sp, #8
 8067eb0:	af00      	add	r7, sp, #0
 8067eb2:	4603      	mov	r3, r0
 8067eb4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8067eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8067eba:	2b00      	cmp	r3, #0
 8067ebc:	da03      	bge.n	8067ec6 <HAL_NVIC_EnableIRQ+0x1a>
 8067ebe:	21bc      	movs	r1, #188	@ 0xbc
 8067ec0:	4805      	ldr	r0, [pc, #20]	@ (8067ed8 <HAL_NVIC_EnableIRQ+0x2c>)
 8067ec2:	f7fe fac0 	bl	8066446 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8067ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8067eca:	4618      	mov	r0, r3
 8067ecc:	f7ff ff26 	bl	8067d1c <__NVIC_EnableIRQ>
}
 8067ed0:	bf00      	nop
 8067ed2:	3708      	adds	r7, #8
 8067ed4:	46bd      	mov	sp, r7
 8067ed6:	bd80      	pop	{r7, pc}
 8067ed8:	0807150c 	.word	0x0807150c

08067edc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8067edc:	b580      	push	{r7, lr}
 8067ede:	b084      	sub	sp, #16
 8067ee0:	af00      	add	r7, sp, #0
 8067ee2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8067ee4:	687b      	ldr	r3, [r7, #4]
 8067ee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8067ee8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8067eea:	f7ff f80d 	bl	8066f08 <HAL_GetTick>
 8067eee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8067ef0:	687b      	ldr	r3, [r7, #4]
 8067ef2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8067ef6:	b2db      	uxtb	r3, r3
 8067ef8:	2b02      	cmp	r3, #2
 8067efa:	d008      	beq.n	8067f0e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8067efc:	687b      	ldr	r3, [r7, #4]
 8067efe:	2280      	movs	r2, #128	@ 0x80
 8067f00:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8067f02:	687b      	ldr	r3, [r7, #4]
 8067f04:	2200      	movs	r2, #0
 8067f06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8067f0a:	2301      	movs	r3, #1
 8067f0c:	e052      	b.n	8067fb4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8067f0e:	687b      	ldr	r3, [r7, #4]
 8067f10:	681b      	ldr	r3, [r3, #0]
 8067f12:	681a      	ldr	r2, [r3, #0]
 8067f14:	687b      	ldr	r3, [r7, #4]
 8067f16:	681b      	ldr	r3, [r3, #0]
 8067f18:	f022 0216 	bic.w	r2, r2, #22
 8067f1c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8067f1e:	687b      	ldr	r3, [r7, #4]
 8067f20:	681b      	ldr	r3, [r3, #0]
 8067f22:	695a      	ldr	r2, [r3, #20]
 8067f24:	687b      	ldr	r3, [r7, #4]
 8067f26:	681b      	ldr	r3, [r3, #0]
 8067f28:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8067f2c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8067f2e:	687b      	ldr	r3, [r7, #4]
 8067f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8067f32:	2b00      	cmp	r3, #0
 8067f34:	d103      	bne.n	8067f3e <HAL_DMA_Abort+0x62>
 8067f36:	687b      	ldr	r3, [r7, #4]
 8067f38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8067f3a:	2b00      	cmp	r3, #0
 8067f3c:	d007      	beq.n	8067f4e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8067f3e:	687b      	ldr	r3, [r7, #4]
 8067f40:	681b      	ldr	r3, [r3, #0]
 8067f42:	681a      	ldr	r2, [r3, #0]
 8067f44:	687b      	ldr	r3, [r7, #4]
 8067f46:	681b      	ldr	r3, [r3, #0]
 8067f48:	f022 0208 	bic.w	r2, r2, #8
 8067f4c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8067f4e:	687b      	ldr	r3, [r7, #4]
 8067f50:	681b      	ldr	r3, [r3, #0]
 8067f52:	681a      	ldr	r2, [r3, #0]
 8067f54:	687b      	ldr	r3, [r7, #4]
 8067f56:	681b      	ldr	r3, [r3, #0]
 8067f58:	f022 0201 	bic.w	r2, r2, #1
 8067f5c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8067f5e:	e013      	b.n	8067f88 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8067f60:	f7fe ffd2 	bl	8066f08 <HAL_GetTick>
 8067f64:	4602      	mov	r2, r0
 8067f66:	68bb      	ldr	r3, [r7, #8]
 8067f68:	1ad3      	subs	r3, r2, r3
 8067f6a:	2b05      	cmp	r3, #5
 8067f6c:	d90c      	bls.n	8067f88 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8067f6e:	687b      	ldr	r3, [r7, #4]
 8067f70:	2220      	movs	r2, #32
 8067f72:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8067f74:	687b      	ldr	r3, [r7, #4]
 8067f76:	2203      	movs	r2, #3
 8067f78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8067f7c:	687b      	ldr	r3, [r7, #4]
 8067f7e:	2200      	movs	r2, #0
 8067f80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8067f84:	2303      	movs	r3, #3
 8067f86:	e015      	b.n	8067fb4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8067f88:	687b      	ldr	r3, [r7, #4]
 8067f8a:	681b      	ldr	r3, [r3, #0]
 8067f8c:	681b      	ldr	r3, [r3, #0]
 8067f8e:	f003 0301 	and.w	r3, r3, #1
 8067f92:	2b00      	cmp	r3, #0
 8067f94:	d1e4      	bne.n	8067f60 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8067f96:	687b      	ldr	r3, [r7, #4]
 8067f98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8067f9a:	223f      	movs	r2, #63	@ 0x3f
 8067f9c:	409a      	lsls	r2, r3
 8067f9e:	68fb      	ldr	r3, [r7, #12]
 8067fa0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8067fa2:	687b      	ldr	r3, [r7, #4]
 8067fa4:	2201      	movs	r2, #1
 8067fa6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8067faa:	687b      	ldr	r3, [r7, #4]
 8067fac:	2200      	movs	r2, #0
 8067fae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8067fb2:	2300      	movs	r3, #0
}
 8067fb4:	4618      	mov	r0, r3
 8067fb6:	3710      	adds	r7, #16
 8067fb8:	46bd      	mov	sp, r7
 8067fba:	bd80      	pop	{r7, pc}

08067fbc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8067fbc:	b480      	push	{r7}
 8067fbe:	b083      	sub	sp, #12
 8067fc0:	af00      	add	r7, sp, #0
 8067fc2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8067fc4:	687b      	ldr	r3, [r7, #4]
 8067fc6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8067fca:	b2db      	uxtb	r3, r3
 8067fcc:	2b02      	cmp	r3, #2
 8067fce:	d004      	beq.n	8067fda <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8067fd0:	687b      	ldr	r3, [r7, #4]
 8067fd2:	2280      	movs	r2, #128	@ 0x80
 8067fd4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8067fd6:	2301      	movs	r3, #1
 8067fd8:	e00c      	b.n	8067ff4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8067fda:	687b      	ldr	r3, [r7, #4]
 8067fdc:	2205      	movs	r2, #5
 8067fde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8067fe2:	687b      	ldr	r3, [r7, #4]
 8067fe4:	681b      	ldr	r3, [r3, #0]
 8067fe6:	681a      	ldr	r2, [r3, #0]
 8067fe8:	687b      	ldr	r3, [r7, #4]
 8067fea:	681b      	ldr	r3, [r3, #0]
 8067fec:	f022 0201 	bic.w	r2, r2, #1
 8067ff0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8067ff2:	2300      	movs	r3, #0
}
 8067ff4:	4618      	mov	r0, r3
 8067ff6:	370c      	adds	r7, #12
 8067ff8:	46bd      	mov	sp, r7
 8067ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8067ffe:	4770      	bx	lr

08068000 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8068000:	b580      	push	{r7, lr}
 8068002:	b086      	sub	sp, #24
 8068004:	af00      	add	r7, sp, #0
 8068006:	60f8      	str	r0, [r7, #12]
 8068008:	60b9      	str	r1, [r7, #8]
 806800a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 806800e:	2301      	movs	r3, #1
 8068010:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8068012:	4b2b      	ldr	r3, [pc, #172]	@ (80680c0 <HAL_FLASH_Program+0xc0>)
 8068014:	7e1b      	ldrb	r3, [r3, #24]
 8068016:	2b01      	cmp	r3, #1
 8068018:	d101      	bne.n	806801e <HAL_FLASH_Program+0x1e>
 806801a:	2302      	movs	r3, #2
 806801c:	e04b      	b.n	80680b6 <HAL_FLASH_Program+0xb6>
 806801e:	4b28      	ldr	r3, [pc, #160]	@ (80680c0 <HAL_FLASH_Program+0xc0>)
 8068020:	2201      	movs	r2, #1
 8068022:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 8068024:	68fb      	ldr	r3, [r7, #12]
 8068026:	2b00      	cmp	r3, #0
 8068028:	d00c      	beq.n	8068044 <HAL_FLASH_Program+0x44>
 806802a:	68fb      	ldr	r3, [r7, #12]
 806802c:	2b01      	cmp	r3, #1
 806802e:	d009      	beq.n	8068044 <HAL_FLASH_Program+0x44>
 8068030:	68fb      	ldr	r3, [r7, #12]
 8068032:	2b02      	cmp	r3, #2
 8068034:	d006      	beq.n	8068044 <HAL_FLASH_Program+0x44>
 8068036:	68fb      	ldr	r3, [r7, #12]
 8068038:	2b03      	cmp	r3, #3
 806803a:	d003      	beq.n	8068044 <HAL_FLASH_Program+0x44>
 806803c:	21a2      	movs	r1, #162	@ 0xa2
 806803e:	4821      	ldr	r0, [pc, #132]	@ (80680c4 <HAL_FLASH_Program+0xc4>)
 8068040:	f7fe fa01 	bl	8066446 <assert_failed>

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8068044:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8068048:	f000 f92e 	bl	80682a8 <FLASH_WaitForLastOperation>
 806804c:	4603      	mov	r3, r0
 806804e:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8068050:	7dfb      	ldrb	r3, [r7, #23]
 8068052:	2b00      	cmp	r3, #0
 8068054:	d12b      	bne.n	80680ae <HAL_FLASH_Program+0xae>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8068056:	68fb      	ldr	r3, [r7, #12]
 8068058:	2b00      	cmp	r3, #0
 806805a:	d105      	bne.n	8068068 <HAL_FLASH_Program+0x68>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 806805c:	783b      	ldrb	r3, [r7, #0]
 806805e:	4619      	mov	r1, r3
 8068060:	68b8      	ldr	r0, [r7, #8]
 8068062:	f000 fa2b 	bl	80684bc <FLASH_Program_Byte>
 8068066:	e016      	b.n	8068096 <HAL_FLASH_Program+0x96>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8068068:	68fb      	ldr	r3, [r7, #12]
 806806a:	2b01      	cmp	r3, #1
 806806c:	d105      	bne.n	806807a <HAL_FLASH_Program+0x7a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 806806e:	883b      	ldrh	r3, [r7, #0]
 8068070:	4619      	mov	r1, r3
 8068072:	68b8      	ldr	r0, [r7, #8]
 8068074:	f000 f9e4 	bl	8068440 <FLASH_Program_HalfWord>
 8068078:	e00d      	b.n	8068096 <HAL_FLASH_Program+0x96>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 806807a:	68fb      	ldr	r3, [r7, #12]
 806807c:	2b02      	cmp	r3, #2
 806807e:	d105      	bne.n	806808c <HAL_FLASH_Program+0x8c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8068080:	683b      	ldr	r3, [r7, #0]
 8068082:	4619      	mov	r1, r3
 8068084:	68b8      	ldr	r0, [r7, #8]
 8068086:	f000 f99d 	bl	80683c4 <FLASH_Program_Word>
 806808a:	e004      	b.n	8068096 <HAL_FLASH_Program+0x96>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 806808c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8068090:	68b8      	ldr	r0, [r7, #8]
 8068092:	f000 f949 	bl	8068328 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8068096:	f24c 3050 	movw	r0, #50000	@ 0xc350
 806809a:	f000 f905 	bl	80682a8 <FLASH_WaitForLastOperation>
 806809e:	4603      	mov	r3, r0
 80680a0:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80680a2:	4b09      	ldr	r3, [pc, #36]	@ (80680c8 <HAL_FLASH_Program+0xc8>)
 80680a4:	691b      	ldr	r3, [r3, #16]
 80680a6:	4a08      	ldr	r2, [pc, #32]	@ (80680c8 <HAL_FLASH_Program+0xc8>)
 80680a8:	f023 0301 	bic.w	r3, r3, #1
 80680ac:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80680ae:	4b04      	ldr	r3, [pc, #16]	@ (80680c0 <HAL_FLASH_Program+0xc0>)
 80680b0:	2200      	movs	r2, #0
 80680b2:	761a      	strb	r2, [r3, #24]

  return status;
 80680b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80680b6:	4618      	mov	r0, r3
 80680b8:	3718      	adds	r7, #24
 80680ba:	46bd      	mov	sp, r7
 80680bc:	bd80      	pop	{r7, pc}
 80680be:	bf00      	nop
 80680c0:	20010e14 	.word	0x20010e14
 80680c4:	08071584 	.word	0x08071584
 80680c8:	40023c00 	.word	0x40023c00

080680cc <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 80680cc:	b580      	push	{r7, lr}
 80680ce:	b082      	sub	sp, #8
 80680d0:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 80680d2:	2300      	movs	r3, #0
 80680d4:	607b      	str	r3, [r7, #4]

  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80680d6:	4b49      	ldr	r3, [pc, #292]	@ (80681fc <HAL_FLASH_IRQHandler+0x130>)
 80680d8:	68db      	ldr	r3, [r3, #12]
 80680da:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 80680de:	2b00      	cmp	r3, #0
 80680e0:	d020      	beq.n	8068124 <HAL_FLASH_IRQHandler+0x58>
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if (pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 80680e2:	4b47      	ldr	r3, [pc, #284]	@ (8068200 <HAL_FLASH_IRQHandler+0x134>)
 80680e4:	781b      	ldrb	r3, [r3, #0]
 80680e6:	b2db      	uxtb	r3, r3
 80680e8:	2b01      	cmp	r3, #1
 80680ea:	d107      	bne.n	80680fc <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 80680ec:	4b44      	ldr	r3, [pc, #272]	@ (8068200 <HAL_FLASH_IRQHandler+0x134>)
 80680ee:	68db      	ldr	r3, [r3, #12]
 80680f0:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 80680f2:	4b43      	ldr	r3, [pc, #268]	@ (8068200 <HAL_FLASH_IRQHandler+0x134>)
 80680f4:	f04f 32ff 	mov.w	r2, #4294967295
 80680f8:	60da      	str	r2, [r3, #12]
 80680fa:	e00b      	b.n	8068114 <HAL_FLASH_IRQHandler+0x48>
    }
    else if (pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 80680fc:	4b40      	ldr	r3, [pc, #256]	@ (8068200 <HAL_FLASH_IRQHandler+0x134>)
 80680fe:	781b      	ldrb	r3, [r3, #0]
 8068100:	b2db      	uxtb	r3, r3
 8068102:	2b02      	cmp	r3, #2
 8068104:	d103      	bne.n	806810e <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 8068106:	4b3e      	ldr	r3, [pc, #248]	@ (8068200 <HAL_FLASH_IRQHandler+0x134>)
 8068108:	691b      	ldr	r3, [r3, #16]
 806810a:	607b      	str	r3, [r7, #4]
 806810c:	e002      	b.n	8068114 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 806810e:	4b3c      	ldr	r3, [pc, #240]	@ (8068200 <HAL_FLASH_IRQHandler+0x134>)
 8068110:	695b      	ldr	r3, [r3, #20]
 8068112:	607b      	str	r3, [r7, #4]
    }

    /*Save the Error code*/
    FLASH_SetErrorCode();
 8068114:	f000 fa0e 	bl	8068534 <FLASH_SetErrorCode>

    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8068118:	6878      	ldr	r0, [r7, #4]
 806811a:	f000 f87d 	bl	8068218 <HAL_FLASH_OperationErrorCallback>

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 806811e:	4b38      	ldr	r3, [pc, #224]	@ (8068200 <HAL_FLASH_IRQHandler+0x134>)
 8068120:	2200      	movs	r2, #0
 8068122:	701a      	strb	r2, [r3, #0]
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8068124:	4b35      	ldr	r3, [pc, #212]	@ (80681fc <HAL_FLASH_IRQHandler+0x130>)
 8068126:	68db      	ldr	r3, [r3, #12]
 8068128:	f003 0301 	and.w	r3, r3, #1
 806812c:	2b00      	cmp	r3, #0
 806812e:	d04a      	beq.n	80681c6 <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8068130:	4b32      	ldr	r3, [pc, #200]	@ (80681fc <HAL_FLASH_IRQHandler+0x130>)
 8068132:	2201      	movs	r2, #1
 8068134:	60da      	str	r2, [r3, #12]

    if (pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8068136:	4b32      	ldr	r3, [pc, #200]	@ (8068200 <HAL_FLASH_IRQHandler+0x134>)
 8068138:	781b      	ldrb	r3, [r3, #0]
 806813a:	b2db      	uxtb	r3, r3
 806813c:	2b01      	cmp	r3, #1
 806813e:	d12d      	bne.n	806819c <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 8068140:	4b2f      	ldr	r3, [pc, #188]	@ (8068200 <HAL_FLASH_IRQHandler+0x134>)
 8068142:	685b      	ldr	r3, [r3, #4]
 8068144:	3b01      	subs	r3, #1
 8068146:	4a2e      	ldr	r2, [pc, #184]	@ (8068200 <HAL_FLASH_IRQHandler+0x134>)
 8068148:	6053      	str	r3, [r2, #4]

      /* Check if there are still sectors to erase*/
      if (pFlash.NbSectorsToErase != 0U)
 806814a:	4b2d      	ldr	r3, [pc, #180]	@ (8068200 <HAL_FLASH_IRQHandler+0x134>)
 806814c:	685b      	ldr	r3, [r3, #4]
 806814e:	2b00      	cmp	r3, #0
 8068150:	d015      	beq.n	806817e <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 8068152:	4b2b      	ldr	r3, [pc, #172]	@ (8068200 <HAL_FLASH_IRQHandler+0x134>)
 8068154:	68db      	ldr	r3, [r3, #12]
 8068156:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8068158:	6878      	ldr	r0, [r7, #4]
 806815a:	f000 f853 	bl	8068204 <HAL_FLASH_EndOfOperationCallback>

        /*Increment sector number*/
        pFlash.Sector++;
 806815e:	4b28      	ldr	r3, [pc, #160]	@ (8068200 <HAL_FLASH_IRQHandler+0x134>)
 8068160:	68db      	ldr	r3, [r3, #12]
 8068162:	3301      	adds	r3, #1
 8068164:	4a26      	ldr	r2, [pc, #152]	@ (8068200 <HAL_FLASH_IRQHandler+0x134>)
 8068166:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 8068168:	4b25      	ldr	r3, [pc, #148]	@ (8068200 <HAL_FLASH_IRQHandler+0x134>)
 806816a:	68db      	ldr	r3, [r3, #12]
 806816c:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 806816e:	4b24      	ldr	r3, [pc, #144]	@ (8068200 <HAL_FLASH_IRQHandler+0x134>)
 8068170:	7a1b      	ldrb	r3, [r3, #8]
 8068172:	b2db      	uxtb	r3, r3
 8068174:	4619      	mov	r1, r3
 8068176:	6878      	ldr	r0, [r7, #4]
 8068178:	f000 fb0e 	bl	8068798 <FLASH_Erase_Sector>
 806817c:	e023      	b.n	80681c6 <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 806817e:	f04f 33ff 	mov.w	r3, #4294967295
 8068182:	607b      	str	r3, [r7, #4]
 8068184:	4a1e      	ldr	r2, [pc, #120]	@ (8068200 <HAL_FLASH_IRQHandler+0x134>)
 8068186:	687b      	ldr	r3, [r7, #4]
 8068188:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 806818a:	4b1d      	ldr	r3, [pc, #116]	@ (8068200 <HAL_FLASH_IRQHandler+0x134>)
 806818c:	2200      	movs	r2, #0
 806818e:	701a      	strb	r2, [r3, #0]

        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches();
 8068190:	f000 fb78 	bl	8068884 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8068194:	6878      	ldr	r0, [r7, #4]
 8068196:	f000 f835 	bl	8068204 <HAL_FLASH_EndOfOperationCallback>
 806819a:	e014      	b.n	80681c6 <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else
    {
      if (pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 806819c:	4b18      	ldr	r3, [pc, #96]	@ (8068200 <HAL_FLASH_IRQHandler+0x134>)
 806819e:	781b      	ldrb	r3, [r3, #0]
 80681a0:	b2db      	uxtb	r3, r3
 80681a2:	2b02      	cmp	r3, #2
 80681a4:	d107      	bne.n	80681b6 <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches();
 80681a6:	f000 fb6d 	bl	8068884 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 80681aa:	4b15      	ldr	r3, [pc, #84]	@ (8068200 <HAL_FLASH_IRQHandler+0x134>)
 80681ac:	691b      	ldr	r3, [r3, #16]
 80681ae:	4618      	mov	r0, r3
 80681b0:	f000 f828 	bl	8068204 <HAL_FLASH_EndOfOperationCallback>
 80681b4:	e004      	b.n	80681c0 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 80681b6:	4b12      	ldr	r3, [pc, #72]	@ (8068200 <HAL_FLASH_IRQHandler+0x134>)
 80681b8:	695b      	ldr	r3, [r3, #20]
 80681ba:	4618      	mov	r0, r3
 80681bc:	f000 f822 	bl	8068204 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80681c0:	4b0f      	ldr	r3, [pc, #60]	@ (8068200 <HAL_FLASH_IRQHandler+0x134>)
 80681c2:	2200      	movs	r2, #0
 80681c4:	701a      	strb	r2, [r3, #0]
    }
  }

  if (pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 80681c6:	4b0e      	ldr	r3, [pc, #56]	@ (8068200 <HAL_FLASH_IRQHandler+0x134>)
 80681c8:	781b      	ldrb	r3, [r3, #0]
 80681ca:	b2db      	uxtb	r3, r3
 80681cc:	2b00      	cmp	r3, #0
 80681ce:	d111      	bne.n	80681f4 <HAL_FLASH_IRQHandler+0x128>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 80681d0:	4b0a      	ldr	r3, [pc, #40]	@ (80681fc <HAL_FLASH_IRQHandler+0x130>)
 80681d2:	691b      	ldr	r3, [r3, #16]
 80681d4:	4a09      	ldr	r2, [pc, #36]	@ (80681fc <HAL_FLASH_IRQHandler+0x130>)
 80681d6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80681da:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 80681dc:	4b07      	ldr	r3, [pc, #28]	@ (80681fc <HAL_FLASH_IRQHandler+0x130>)
 80681de:	691b      	ldr	r3, [r3, #16]
 80681e0:	4a06      	ldr	r2, [pc, #24]	@ (80681fc <HAL_FLASH_IRQHandler+0x130>)
 80681e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80681e6:	6113      	str	r3, [r2, #16]

    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 80681e8:	4b04      	ldr	r3, [pc, #16]	@ (80681fc <HAL_FLASH_IRQHandler+0x130>)
 80681ea:	691b      	ldr	r3, [r3, #16]
 80681ec:	4a03      	ldr	r2, [pc, #12]	@ (80681fc <HAL_FLASH_IRQHandler+0x130>)
 80681ee:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80681f2:	6113      	str	r3, [r2, #16]
  }
}
 80681f4:	bf00      	nop
 80681f6:	3708      	adds	r7, #8
 80681f8:	46bd      	mov	sp, r7
 80681fa:	bd80      	pop	{r7, pc}
 80681fc:	40023c00 	.word	0x40023c00
 8068200:	20010e14 	.word	0x20010e14

08068204 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8068204:	b480      	push	{r7}
 8068206:	b083      	sub	sp, #12
 8068208:	af00      	add	r7, sp, #0
 806820a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 806820c:	bf00      	nop
 806820e:	370c      	adds	r7, #12
 8068210:	46bd      	mov	sp, r7
 8068212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8068216:	4770      	bx	lr

08068218 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8068218:	b480      	push	{r7}
 806821a:	b083      	sub	sp, #12
 806821c:	af00      	add	r7, sp, #0
 806821e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 8068220:	bf00      	nop
 8068222:	370c      	adds	r7, #12
 8068224:	46bd      	mov	sp, r7
 8068226:	f85d 7b04 	ldr.w	r7, [sp], #4
 806822a:	4770      	bx	lr

0806822c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 806822c:	b480      	push	{r7}
 806822e:	b083      	sub	sp, #12
 8068230:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8068232:	2300      	movs	r3, #0
 8068234:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8068236:	4b0b      	ldr	r3, [pc, #44]	@ (8068264 <HAL_FLASH_Unlock+0x38>)
 8068238:	691b      	ldr	r3, [r3, #16]
 806823a:	2b00      	cmp	r3, #0
 806823c:	da0b      	bge.n	8068256 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 806823e:	4b09      	ldr	r3, [pc, #36]	@ (8068264 <HAL_FLASH_Unlock+0x38>)
 8068240:	4a09      	ldr	r2, [pc, #36]	@ (8068268 <HAL_FLASH_Unlock+0x3c>)
 8068242:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8068244:	4b07      	ldr	r3, [pc, #28]	@ (8068264 <HAL_FLASH_Unlock+0x38>)
 8068246:	4a09      	ldr	r2, [pc, #36]	@ (806826c <HAL_FLASH_Unlock+0x40>)
 8068248:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 806824a:	4b06      	ldr	r3, [pc, #24]	@ (8068264 <HAL_FLASH_Unlock+0x38>)
 806824c:	691b      	ldr	r3, [r3, #16]
 806824e:	2b00      	cmp	r3, #0
 8068250:	da01      	bge.n	8068256 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8068252:	2301      	movs	r3, #1
 8068254:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8068256:	79fb      	ldrb	r3, [r7, #7]
}
 8068258:	4618      	mov	r0, r3
 806825a:	370c      	adds	r7, #12
 806825c:	46bd      	mov	sp, r7
 806825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8068262:	4770      	bx	lr
 8068264:	40023c00 	.word	0x40023c00
 8068268:	45670123 	.word	0x45670123
 806826c:	cdef89ab 	.word	0xcdef89ab

08068270 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8068270:	b480      	push	{r7}
 8068272:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8068274:	4b05      	ldr	r3, [pc, #20]	@ (806828c <HAL_FLASH_Lock+0x1c>)
 8068276:	691b      	ldr	r3, [r3, #16]
 8068278:	4a04      	ldr	r2, [pc, #16]	@ (806828c <HAL_FLASH_Lock+0x1c>)
 806827a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 806827e:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8068280:	2300      	movs	r3, #0
}
 8068282:	4618      	mov	r0, r3
 8068284:	46bd      	mov	sp, r7
 8068286:	f85d 7b04 	ldr.w	r7, [sp], #4
 806828a:	4770      	bx	lr
 806828c:	40023c00 	.word	0x40023c00

08068290 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag
  */
uint32_t HAL_FLASH_GetError(void)
{
 8068290:	b480      	push	{r7}
 8068292:	af00      	add	r7, sp, #0
  return pFlash.ErrorCode;
 8068294:	4b03      	ldr	r3, [pc, #12]	@ (80682a4 <HAL_FLASH_GetError+0x14>)
 8068296:	69db      	ldr	r3, [r3, #28]
}
 8068298:	4618      	mov	r0, r3
 806829a:	46bd      	mov	sp, r7
 806829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80682a0:	4770      	bx	lr
 80682a2:	bf00      	nop
 80682a4:	20010e14 	.word	0x20010e14

080682a8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80682a8:	b580      	push	{r7, lr}
 80682aa:	b084      	sub	sp, #16
 80682ac:	af00      	add	r7, sp, #0
 80682ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80682b0:	2300      	movs	r3, #0
 80682b2:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80682b4:	4b1a      	ldr	r3, [pc, #104]	@ (8068320 <FLASH_WaitForLastOperation+0x78>)
 80682b6:	2200      	movs	r2, #0
 80682b8:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80682ba:	f7fe fe25 	bl	8066f08 <HAL_GetTick>
 80682be:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80682c0:	e010      	b.n	80682e4 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 80682c2:	687b      	ldr	r3, [r7, #4]
 80682c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80682c8:	d00c      	beq.n	80682e4 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80682ca:	687b      	ldr	r3, [r7, #4]
 80682cc:	2b00      	cmp	r3, #0
 80682ce:	d007      	beq.n	80682e0 <FLASH_WaitForLastOperation+0x38>
 80682d0:	f7fe fe1a 	bl	8066f08 <HAL_GetTick>
 80682d4:	4602      	mov	r2, r0
 80682d6:	68fb      	ldr	r3, [r7, #12]
 80682d8:	1ad3      	subs	r3, r2, r3
 80682da:	687a      	ldr	r2, [r7, #4]
 80682dc:	429a      	cmp	r2, r3
 80682de:	d201      	bcs.n	80682e4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80682e0:	2303      	movs	r3, #3
 80682e2:	e019      	b.n	8068318 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80682e4:	4b0f      	ldr	r3, [pc, #60]	@ (8068324 <FLASH_WaitForLastOperation+0x7c>)
 80682e6:	68db      	ldr	r3, [r3, #12]
 80682e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80682ec:	2b00      	cmp	r3, #0
 80682ee:	d1e8      	bne.n	80682c2 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80682f0:	4b0c      	ldr	r3, [pc, #48]	@ (8068324 <FLASH_WaitForLastOperation+0x7c>)
 80682f2:	68db      	ldr	r3, [r3, #12]
 80682f4:	f003 0301 	and.w	r3, r3, #1
 80682f8:	2b00      	cmp	r3, #0
 80682fa:	d002      	beq.n	8068302 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80682fc:	4b09      	ldr	r3, [pc, #36]	@ (8068324 <FLASH_WaitForLastOperation+0x7c>)
 80682fe:	2201      	movs	r2, #1
 8068300:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8068302:	4b08      	ldr	r3, [pc, #32]	@ (8068324 <FLASH_WaitForLastOperation+0x7c>)
 8068304:	68db      	ldr	r3, [r3, #12]
 8068306:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 806830a:	2b00      	cmp	r3, #0
 806830c:	d003      	beq.n	8068316 <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 806830e:	f000 f911 	bl	8068534 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8068312:	2301      	movs	r3, #1
 8068314:	e000      	b.n	8068318 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8068316:	2300      	movs	r3, #0

}
 8068318:	4618      	mov	r0, r3
 806831a:	3710      	adds	r7, #16
 806831c:	46bd      	mov	sp, r7
 806831e:	bd80      	pop	{r7, pc}
 8068320:	20010e14 	.word	0x20010e14
 8068324:	40023c00 	.word	0x40023c00

08068328 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8068328:	b580      	push	{r7, lr}
 806832a:	b084      	sub	sp, #16
 806832c:	af00      	add	r7, sp, #0
 806832e:	60f8      	str	r0, [r7, #12]
 8068330:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 8068334:	68fb      	ldr	r3, [r7, #12]
 8068336:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 806833a:	d303      	bcc.n	8068344 <FLASH_Program_DoubleWord+0x1c>
 806833c:	68fb      	ldr	r3, [r7, #12]
 806833e:	4a1c      	ldr	r2, [pc, #112]	@ (80683b0 <FLASH_Program_DoubleWord+0x88>)
 8068340:	4293      	cmp	r3, r2
 8068342:	d90c      	bls.n	806835e <FLASH_Program_DoubleWord+0x36>
 8068344:	68fb      	ldr	r3, [r7, #12]
 8068346:	4a1b      	ldr	r2, [pc, #108]	@ (80683b4 <FLASH_Program_DoubleWord+0x8c>)
 8068348:	4293      	cmp	r3, r2
 806834a:	d903      	bls.n	8068354 <FLASH_Program_DoubleWord+0x2c>
 806834c:	68fb      	ldr	r3, [r7, #12]
 806834e:	4a1a      	ldr	r2, [pc, #104]	@ (80683b8 <FLASH_Program_DoubleWord+0x90>)
 8068350:	4293      	cmp	r3, r2
 8068352:	d904      	bls.n	806835e <FLASH_Program_DoubleWord+0x36>
 8068354:	f240 215f 	movw	r1, #607	@ 0x25f
 8068358:	4818      	ldr	r0, [pc, #96]	@ (80683bc <FLASH_Program_DoubleWord+0x94>)
 806835a:	f7fe f874 	bl	8066446 <assert_failed>

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 806835e:	4b18      	ldr	r3, [pc, #96]	@ (80683c0 <FLASH_Program_DoubleWord+0x98>)
 8068360:	691b      	ldr	r3, [r3, #16]
 8068362:	4a17      	ldr	r2, [pc, #92]	@ (80683c0 <FLASH_Program_DoubleWord+0x98>)
 8068364:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8068368:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 806836a:	4b15      	ldr	r3, [pc, #84]	@ (80683c0 <FLASH_Program_DoubleWord+0x98>)
 806836c:	691b      	ldr	r3, [r3, #16]
 806836e:	4a14      	ldr	r2, [pc, #80]	@ (80683c0 <FLASH_Program_DoubleWord+0x98>)
 8068370:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8068374:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8068376:	4b12      	ldr	r3, [pc, #72]	@ (80683c0 <FLASH_Program_DoubleWord+0x98>)
 8068378:	691b      	ldr	r3, [r3, #16]
 806837a:	4a11      	ldr	r2, [pc, #68]	@ (80683c0 <FLASH_Program_DoubleWord+0x98>)
 806837c:	f043 0301 	orr.w	r3, r3, #1
 8068380:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8068382:	68fb      	ldr	r3, [r7, #12]
 8068384:	683a      	ldr	r2, [r7, #0]
 8068386:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8068388:	f3bf 8f6f 	isb	sy
}
 806838c:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 806838e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8068392:	f04f 0200 	mov.w	r2, #0
 8068396:	f04f 0300 	mov.w	r3, #0
 806839a:	000a      	movs	r2, r1
 806839c:	2300      	movs	r3, #0
 806839e:	68f9      	ldr	r1, [r7, #12]
 80683a0:	3104      	adds	r1, #4
 80683a2:	4613      	mov	r3, r2
 80683a4:	600b      	str	r3, [r1, #0]
}
 80683a6:	bf00      	nop
 80683a8:	3710      	adds	r7, #16
 80683aa:	46bd      	mov	sp, r7
 80683ac:	bd80      	pop	{r7, pc}
 80683ae:	bf00      	nop
 80683b0:	0807ffff 	.word	0x0807ffff
 80683b4:	1fff77ff 	.word	0x1fff77ff
 80683b8:	1fff7a0f 	.word	0x1fff7a0f
 80683bc:	08071584 	.word	0x08071584
 80683c0:	40023c00 	.word	0x40023c00

080683c4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80683c4:	b580      	push	{r7, lr}
 80683c6:	b082      	sub	sp, #8
 80683c8:	af00      	add	r7, sp, #0
 80683ca:	6078      	str	r0, [r7, #4]
 80683cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 80683ce:	687b      	ldr	r3, [r7, #4]
 80683d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80683d4:	d303      	bcc.n	80683de <FLASH_Program_Word+0x1a>
 80683d6:	687b      	ldr	r3, [r7, #4]
 80683d8:	4a14      	ldr	r2, [pc, #80]	@ (806842c <FLASH_Program_Word+0x68>)
 80683da:	4293      	cmp	r3, r2
 80683dc:	d90c      	bls.n	80683f8 <FLASH_Program_Word+0x34>
 80683de:	687b      	ldr	r3, [r7, #4]
 80683e0:	4a13      	ldr	r2, [pc, #76]	@ (8068430 <FLASH_Program_Word+0x6c>)
 80683e2:	4293      	cmp	r3, r2
 80683e4:	d903      	bls.n	80683ee <FLASH_Program_Word+0x2a>
 80683e6:	687b      	ldr	r3, [r7, #4]
 80683e8:	4a12      	ldr	r2, [pc, #72]	@ (8068434 <FLASH_Program_Word+0x70>)
 80683ea:	4293      	cmp	r3, r2
 80683ec:	d904      	bls.n	80683f8 <FLASH_Program_Word+0x34>
 80683ee:	f240 2181 	movw	r1, #641	@ 0x281
 80683f2:	4811      	ldr	r0, [pc, #68]	@ (8068438 <FLASH_Program_Word+0x74>)
 80683f4:	f7fe f827 	bl	8066446 <assert_failed>

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80683f8:	4b10      	ldr	r3, [pc, #64]	@ (806843c <FLASH_Program_Word+0x78>)
 80683fa:	691b      	ldr	r3, [r3, #16]
 80683fc:	4a0f      	ldr	r2, [pc, #60]	@ (806843c <FLASH_Program_Word+0x78>)
 80683fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8068402:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8068404:	4b0d      	ldr	r3, [pc, #52]	@ (806843c <FLASH_Program_Word+0x78>)
 8068406:	691b      	ldr	r3, [r3, #16]
 8068408:	4a0c      	ldr	r2, [pc, #48]	@ (806843c <FLASH_Program_Word+0x78>)
 806840a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 806840e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8068410:	4b0a      	ldr	r3, [pc, #40]	@ (806843c <FLASH_Program_Word+0x78>)
 8068412:	691b      	ldr	r3, [r3, #16]
 8068414:	4a09      	ldr	r2, [pc, #36]	@ (806843c <FLASH_Program_Word+0x78>)
 8068416:	f043 0301 	orr.w	r3, r3, #1
 806841a:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 806841c:	687b      	ldr	r3, [r7, #4]
 806841e:	683a      	ldr	r2, [r7, #0]
 8068420:	601a      	str	r2, [r3, #0]
}
 8068422:	bf00      	nop
 8068424:	3708      	adds	r7, #8
 8068426:	46bd      	mov	sp, r7
 8068428:	bd80      	pop	{r7, pc}
 806842a:	bf00      	nop
 806842c:	0807ffff 	.word	0x0807ffff
 8068430:	1fff77ff 	.word	0x1fff77ff
 8068434:	1fff7a0f 	.word	0x1fff7a0f
 8068438:	08071584 	.word	0x08071584
 806843c:	40023c00 	.word	0x40023c00

08068440 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8068440:	b580      	push	{r7, lr}
 8068442:	b082      	sub	sp, #8
 8068444:	af00      	add	r7, sp, #0
 8068446:	6078      	str	r0, [r7, #4]
 8068448:	460b      	mov	r3, r1
 806844a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 806844c:	687b      	ldr	r3, [r7, #4]
 806844e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8068452:	d303      	bcc.n	806845c <FLASH_Program_HalfWord+0x1c>
 8068454:	687b      	ldr	r3, [r7, #4]
 8068456:	4a14      	ldr	r2, [pc, #80]	@ (80684a8 <FLASH_Program_HalfWord+0x68>)
 8068458:	4293      	cmp	r3, r2
 806845a:	d90c      	bls.n	8068476 <FLASH_Program_HalfWord+0x36>
 806845c:	687b      	ldr	r3, [r7, #4]
 806845e:	4a13      	ldr	r2, [pc, #76]	@ (80684ac <FLASH_Program_HalfWord+0x6c>)
 8068460:	4293      	cmp	r3, r2
 8068462:	d903      	bls.n	806846c <FLASH_Program_HalfWord+0x2c>
 8068464:	687b      	ldr	r3, [r7, #4]
 8068466:	4a12      	ldr	r2, [pc, #72]	@ (80684b0 <FLASH_Program_HalfWord+0x70>)
 8068468:	4293      	cmp	r3, r2
 806846a:	d904      	bls.n	8068476 <FLASH_Program_HalfWord+0x36>
 806846c:	f240 219a 	movw	r1, #666	@ 0x29a
 8068470:	4810      	ldr	r0, [pc, #64]	@ (80684b4 <FLASH_Program_HalfWord+0x74>)
 8068472:	f7fd ffe8 	bl	8066446 <assert_failed>

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8068476:	4b10      	ldr	r3, [pc, #64]	@ (80684b8 <FLASH_Program_HalfWord+0x78>)
 8068478:	691b      	ldr	r3, [r3, #16]
 806847a:	4a0f      	ldr	r2, [pc, #60]	@ (80684b8 <FLASH_Program_HalfWord+0x78>)
 806847c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8068480:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8068482:	4b0d      	ldr	r3, [pc, #52]	@ (80684b8 <FLASH_Program_HalfWord+0x78>)
 8068484:	691b      	ldr	r3, [r3, #16]
 8068486:	4a0c      	ldr	r2, [pc, #48]	@ (80684b8 <FLASH_Program_HalfWord+0x78>)
 8068488:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 806848c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 806848e:	4b0a      	ldr	r3, [pc, #40]	@ (80684b8 <FLASH_Program_HalfWord+0x78>)
 8068490:	691b      	ldr	r3, [r3, #16]
 8068492:	4a09      	ldr	r2, [pc, #36]	@ (80684b8 <FLASH_Program_HalfWord+0x78>)
 8068494:	f043 0301 	orr.w	r3, r3, #1
 8068498:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 806849a:	687b      	ldr	r3, [r7, #4]
 806849c:	887a      	ldrh	r2, [r7, #2]
 806849e:	801a      	strh	r2, [r3, #0]
}
 80684a0:	bf00      	nop
 80684a2:	3708      	adds	r7, #8
 80684a4:	46bd      	mov	sp, r7
 80684a6:	bd80      	pop	{r7, pc}
 80684a8:	0807ffff 	.word	0x0807ffff
 80684ac:	1fff77ff 	.word	0x1fff77ff
 80684b0:	1fff7a0f 	.word	0x1fff7a0f
 80684b4:	08071584 	.word	0x08071584
 80684b8:	40023c00 	.word	0x40023c00

080684bc <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80684bc:	b580      	push	{r7, lr}
 80684be:	b082      	sub	sp, #8
 80684c0:	af00      	add	r7, sp, #0
 80684c2:	6078      	str	r0, [r7, #4]
 80684c4:	460b      	mov	r3, r1
 80684c6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 80684c8:	687b      	ldr	r3, [r7, #4]
 80684ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80684ce:	d303      	bcc.n	80684d8 <FLASH_Program_Byte+0x1c>
 80684d0:	687b      	ldr	r3, [r7, #4]
 80684d2:	4a13      	ldr	r2, [pc, #76]	@ (8068520 <FLASH_Program_Byte+0x64>)
 80684d4:	4293      	cmp	r3, r2
 80684d6:	d90c      	bls.n	80684f2 <FLASH_Program_Byte+0x36>
 80684d8:	687b      	ldr	r3, [r7, #4]
 80684da:	4a12      	ldr	r2, [pc, #72]	@ (8068524 <FLASH_Program_Byte+0x68>)
 80684dc:	4293      	cmp	r3, r2
 80684de:	d903      	bls.n	80684e8 <FLASH_Program_Byte+0x2c>
 80684e0:	687b      	ldr	r3, [r7, #4]
 80684e2:	4a11      	ldr	r2, [pc, #68]	@ (8068528 <FLASH_Program_Byte+0x6c>)
 80684e4:	4293      	cmp	r3, r2
 80684e6:	d904      	bls.n	80684f2 <FLASH_Program_Byte+0x36>
 80684e8:	f240 21b3 	movw	r1, #691	@ 0x2b3
 80684ec:	480f      	ldr	r0, [pc, #60]	@ (806852c <FLASH_Program_Byte+0x70>)
 80684ee:	f7fd ffaa 	bl	8066446 <assert_failed>

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80684f2:	4b0f      	ldr	r3, [pc, #60]	@ (8068530 <FLASH_Program_Byte+0x74>)
 80684f4:	691b      	ldr	r3, [r3, #16]
 80684f6:	4a0e      	ldr	r2, [pc, #56]	@ (8068530 <FLASH_Program_Byte+0x74>)
 80684f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80684fc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80684fe:	4b0c      	ldr	r3, [pc, #48]	@ (8068530 <FLASH_Program_Byte+0x74>)
 8068500:	4a0b      	ldr	r2, [pc, #44]	@ (8068530 <FLASH_Program_Byte+0x74>)
 8068502:	691b      	ldr	r3, [r3, #16]
 8068504:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8068506:	4b0a      	ldr	r3, [pc, #40]	@ (8068530 <FLASH_Program_Byte+0x74>)
 8068508:	691b      	ldr	r3, [r3, #16]
 806850a:	4a09      	ldr	r2, [pc, #36]	@ (8068530 <FLASH_Program_Byte+0x74>)
 806850c:	f043 0301 	orr.w	r3, r3, #1
 8068510:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8068512:	687b      	ldr	r3, [r7, #4]
 8068514:	78fa      	ldrb	r2, [r7, #3]
 8068516:	701a      	strb	r2, [r3, #0]
}
 8068518:	bf00      	nop
 806851a:	3708      	adds	r7, #8
 806851c:	46bd      	mov	sp, r7
 806851e:	bd80      	pop	{r7, pc}
 8068520:	0807ffff 	.word	0x0807ffff
 8068524:	1fff77ff 	.word	0x1fff77ff
 8068528:	1fff7a0f 	.word	0x1fff7a0f
 806852c:	08071584 	.word	0x08071584
 8068530:	40023c00 	.word	0x40023c00

08068534 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8068534:	b480      	push	{r7}
 8068536:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8068538:	4b2f      	ldr	r3, [pc, #188]	@ (80685f8 <FLASH_SetErrorCode+0xc4>)
 806853a:	68db      	ldr	r3, [r3, #12]
 806853c:	f003 0310 	and.w	r3, r3, #16
 8068540:	2b00      	cmp	r3, #0
 8068542:	d008      	beq.n	8068556 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8068544:	4b2d      	ldr	r3, [pc, #180]	@ (80685fc <FLASH_SetErrorCode+0xc8>)
 8068546:	69db      	ldr	r3, [r3, #28]
 8068548:	f043 0310 	orr.w	r3, r3, #16
 806854c:	4a2b      	ldr	r2, [pc, #172]	@ (80685fc <FLASH_SetErrorCode+0xc8>)
 806854e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8068550:	4b29      	ldr	r3, [pc, #164]	@ (80685f8 <FLASH_SetErrorCode+0xc4>)
 8068552:	2210      	movs	r2, #16
 8068554:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8068556:	4b28      	ldr	r3, [pc, #160]	@ (80685f8 <FLASH_SetErrorCode+0xc4>)
 8068558:	68db      	ldr	r3, [r3, #12]
 806855a:	f003 0320 	and.w	r3, r3, #32
 806855e:	2b00      	cmp	r3, #0
 8068560:	d008      	beq.n	8068574 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8068562:	4b26      	ldr	r3, [pc, #152]	@ (80685fc <FLASH_SetErrorCode+0xc8>)
 8068564:	69db      	ldr	r3, [r3, #28]
 8068566:	f043 0308 	orr.w	r3, r3, #8
 806856a:	4a24      	ldr	r2, [pc, #144]	@ (80685fc <FLASH_SetErrorCode+0xc8>)
 806856c:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 806856e:	4b22      	ldr	r3, [pc, #136]	@ (80685f8 <FLASH_SetErrorCode+0xc4>)
 8068570:	2220      	movs	r2, #32
 8068572:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8068574:	4b20      	ldr	r3, [pc, #128]	@ (80685f8 <FLASH_SetErrorCode+0xc4>)
 8068576:	68db      	ldr	r3, [r3, #12]
 8068578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 806857c:	2b00      	cmp	r3, #0
 806857e:	d008      	beq.n	8068592 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8068580:	4b1e      	ldr	r3, [pc, #120]	@ (80685fc <FLASH_SetErrorCode+0xc8>)
 8068582:	69db      	ldr	r3, [r3, #28]
 8068584:	f043 0304 	orr.w	r3, r3, #4
 8068588:	4a1c      	ldr	r2, [pc, #112]	@ (80685fc <FLASH_SetErrorCode+0xc8>)
 806858a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 806858c:	4b1a      	ldr	r3, [pc, #104]	@ (80685f8 <FLASH_SetErrorCode+0xc4>)
 806858e:	2240      	movs	r2, #64	@ 0x40
 8068590:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8068592:	4b19      	ldr	r3, [pc, #100]	@ (80685f8 <FLASH_SetErrorCode+0xc4>)
 8068594:	68db      	ldr	r3, [r3, #12]
 8068596:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 806859a:	2b00      	cmp	r3, #0
 806859c:	d008      	beq.n	80685b0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 806859e:	4b17      	ldr	r3, [pc, #92]	@ (80685fc <FLASH_SetErrorCode+0xc8>)
 80685a0:	69db      	ldr	r3, [r3, #28]
 80685a2:	f043 0302 	orr.w	r3, r3, #2
 80685a6:	4a15      	ldr	r2, [pc, #84]	@ (80685fc <FLASH_SetErrorCode+0xc8>)
 80685a8:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80685aa:	4b13      	ldr	r3, [pc, #76]	@ (80685f8 <FLASH_SetErrorCode+0xc4>)
 80685ac:	2280      	movs	r2, #128	@ 0x80
 80685ae:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80685b0:	4b11      	ldr	r3, [pc, #68]	@ (80685f8 <FLASH_SetErrorCode+0xc4>)
 80685b2:	68db      	ldr	r3, [r3, #12]
 80685b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80685b8:	2b00      	cmp	r3, #0
 80685ba:	d009      	beq.n	80685d0 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80685bc:	4b0f      	ldr	r3, [pc, #60]	@ (80685fc <FLASH_SetErrorCode+0xc8>)
 80685be:	69db      	ldr	r3, [r3, #28]
 80685c0:	f043 0301 	orr.w	r3, r3, #1
 80685c4:	4a0d      	ldr	r2, [pc, #52]	@ (80685fc <FLASH_SetErrorCode+0xc8>)
 80685c6:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80685c8:	4b0b      	ldr	r3, [pc, #44]	@ (80685f8 <FLASH_SetErrorCode+0xc4>)
 80685ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80685ce:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80685d0:	4b09      	ldr	r3, [pc, #36]	@ (80685f8 <FLASH_SetErrorCode+0xc4>)
 80685d2:	68db      	ldr	r3, [r3, #12]
 80685d4:	f003 0302 	and.w	r3, r3, #2
 80685d8:	2b00      	cmp	r3, #0
 80685da:	d008      	beq.n	80685ee <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80685dc:	4b07      	ldr	r3, [pc, #28]	@ (80685fc <FLASH_SetErrorCode+0xc8>)
 80685de:	69db      	ldr	r3, [r3, #28]
 80685e0:	f043 0320 	orr.w	r3, r3, #32
 80685e4:	4a05      	ldr	r2, [pc, #20]	@ (80685fc <FLASH_SetErrorCode+0xc8>)
 80685e6:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80685e8:	4b03      	ldr	r3, [pc, #12]	@ (80685f8 <FLASH_SetErrorCode+0xc4>)
 80685ea:	2202      	movs	r2, #2
 80685ec:	60da      	str	r2, [r3, #12]
  }
}
 80685ee:	bf00      	nop
 80685f0:	46bd      	mov	sp, r7
 80685f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80685f6:	4770      	bx	lr
 80685f8:	40023c00 	.word	0x40023c00
 80685fc:	20010e14 	.word	0x20010e14

08068600 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8068600:	b580      	push	{r7, lr}
 8068602:	b084      	sub	sp, #16
 8068604:	af00      	add	r7, sp, #0
 8068606:	6078      	str	r0, [r7, #4]
 8068608:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 806860a:	2301      	movs	r3, #1
 806860c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 806860e:	2300      	movs	r3, #0
 8068610:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8068612:	4b40      	ldr	r3, [pc, #256]	@ (8068714 <HAL_FLASHEx_Erase+0x114>)
 8068614:	7e1b      	ldrb	r3, [r3, #24]
 8068616:	2b01      	cmp	r3, #1
 8068618:	d101      	bne.n	806861e <HAL_FLASHEx_Erase+0x1e>
 806861a:	2302      	movs	r3, #2
 806861c:	e076      	b.n	806870c <HAL_FLASHEx_Erase+0x10c>
 806861e:	4b3d      	ldr	r3, [pc, #244]	@ (8068714 <HAL_FLASHEx_Erase+0x114>)
 8068620:	2201      	movs	r2, #1
 8068622:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 8068624:	687b      	ldr	r3, [r7, #4]
 8068626:	681b      	ldr	r3, [r3, #0]
 8068628:	2b00      	cmp	r3, #0
 806862a:	d007      	beq.n	806863c <HAL_FLASHEx_Erase+0x3c>
 806862c:	687b      	ldr	r3, [r7, #4]
 806862e:	681b      	ldr	r3, [r3, #0]
 8068630:	2b01      	cmp	r3, #1
 8068632:	d003      	beq.n	806863c <HAL_FLASHEx_Erase+0x3c>
 8068634:	21a9      	movs	r1, #169	@ 0xa9
 8068636:	4838      	ldr	r0, [pc, #224]	@ (8068718 <HAL_FLASHEx_Erase+0x118>)
 8068638:	f7fd ff05 	bl	8066446 <assert_failed>

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 806863c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8068640:	f7ff fe32 	bl	80682a8 <FLASH_WaitForLastOperation>
 8068644:	4603      	mov	r3, r0
 8068646:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8068648:	7bfb      	ldrb	r3, [r7, #15]
 806864a:	2b00      	cmp	r3, #0
 806864c:	d15a      	bne.n	8068704 <HAL_FLASHEx_Erase+0x104>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 806864e:	683b      	ldr	r3, [r7, #0]
 8068650:	f04f 32ff 	mov.w	r2, #4294967295
 8068654:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8068656:	687b      	ldr	r3, [r7, #4]
 8068658:	681b      	ldr	r3, [r3, #0]
 806865a:	2b01      	cmp	r3, #1
 806865c:	d115      	bne.n	806868a <HAL_FLASHEx_Erase+0x8a>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 806865e:	687b      	ldr	r3, [r7, #4]
 8068660:	691b      	ldr	r3, [r3, #16]
 8068662:	b2da      	uxtb	r2, r3
 8068664:	687b      	ldr	r3, [r7, #4]
 8068666:	685b      	ldr	r3, [r3, #4]
 8068668:	4619      	mov	r1, r3
 806866a:	4610      	mov	r0, r2
 806866c:	f000 f858 	bl	8068720 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8068670:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8068674:	f7ff fe18 	bl	80682a8 <FLASH_WaitForLastOperation>
 8068678:	4603      	mov	r3, r0
 806867a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 806867c:	4b27      	ldr	r3, [pc, #156]	@ (806871c <HAL_FLASHEx_Erase+0x11c>)
 806867e:	691b      	ldr	r3, [r3, #16]
 8068680:	4a26      	ldr	r2, [pc, #152]	@ (806871c <HAL_FLASHEx_Erase+0x11c>)
 8068682:	f023 0304 	bic.w	r3, r3, #4
 8068686:	6113      	str	r3, [r2, #16]
 8068688:	e03a      	b.n	8068700 <HAL_FLASHEx_Erase+0x100>
    }
    else
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));
 806868a:	687b      	ldr	r3, [r7, #4]
 806868c:	68da      	ldr	r2, [r3, #12]
 806868e:	687b      	ldr	r3, [r7, #4]
 8068690:	689b      	ldr	r3, [r3, #8]
 8068692:	4413      	add	r3, r2
 8068694:	2b00      	cmp	r3, #0
 8068696:	d006      	beq.n	80686a6 <HAL_FLASHEx_Erase+0xa6>
 8068698:	687b      	ldr	r3, [r7, #4]
 806869a:	68da      	ldr	r2, [r3, #12]
 806869c:	687b      	ldr	r3, [r7, #4]
 806869e:	689b      	ldr	r3, [r3, #8]
 80686a0:	4413      	add	r3, r2
 80686a2:	2b08      	cmp	r3, #8
 80686a4:	d903      	bls.n	80686ae <HAL_FLASHEx_Erase+0xae>
 80686a6:	21c1      	movs	r1, #193	@ 0xc1
 80686a8:	481b      	ldr	r0, [pc, #108]	@ (8068718 <HAL_FLASHEx_Erase+0x118>)
 80686aa:	f7fd fecc 	bl	8066446 <assert_failed>

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80686ae:	687b      	ldr	r3, [r7, #4]
 80686b0:	689b      	ldr	r3, [r3, #8]
 80686b2:	60bb      	str	r3, [r7, #8]
 80686b4:	e01c      	b.n	80686f0 <HAL_FLASHEx_Erase+0xf0>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80686b6:	687b      	ldr	r3, [r7, #4]
 80686b8:	691b      	ldr	r3, [r3, #16]
 80686ba:	b2db      	uxtb	r3, r3
 80686bc:	4619      	mov	r1, r3
 80686be:	68b8      	ldr	r0, [r7, #8]
 80686c0:	f000 f86a 	bl	8068798 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80686c4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80686c8:	f7ff fdee 	bl	80682a8 <FLASH_WaitForLastOperation>
 80686cc:	4603      	mov	r3, r0
 80686ce:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80686d0:	4b12      	ldr	r3, [pc, #72]	@ (806871c <HAL_FLASHEx_Erase+0x11c>)
 80686d2:	691b      	ldr	r3, [r3, #16]
 80686d4:	4a11      	ldr	r2, [pc, #68]	@ (806871c <HAL_FLASHEx_Erase+0x11c>)
 80686d6:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 80686da:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80686dc:	7bfb      	ldrb	r3, [r7, #15]
 80686de:	2b00      	cmp	r3, #0
 80686e0:	d003      	beq.n	80686ea <HAL_FLASHEx_Erase+0xea>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80686e2:	683b      	ldr	r3, [r7, #0]
 80686e4:	68ba      	ldr	r2, [r7, #8]
 80686e6:	601a      	str	r2, [r3, #0]
          break;
 80686e8:	e00a      	b.n	8068700 <HAL_FLASHEx_Erase+0x100>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80686ea:	68bb      	ldr	r3, [r7, #8]
 80686ec:	3301      	adds	r3, #1
 80686ee:	60bb      	str	r3, [r7, #8]
 80686f0:	687b      	ldr	r3, [r7, #4]
 80686f2:	68da      	ldr	r2, [r3, #12]
 80686f4:	687b      	ldr	r3, [r7, #4]
 80686f6:	689b      	ldr	r3, [r3, #8]
 80686f8:	4413      	add	r3, r2
 80686fa:	68ba      	ldr	r2, [r7, #8]
 80686fc:	429a      	cmp	r2, r3
 80686fe:	d3da      	bcc.n	80686b6 <HAL_FLASHEx_Erase+0xb6>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8068700:	f000 f8c0 	bl	8068884 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8068704:	4b03      	ldr	r3, [pc, #12]	@ (8068714 <HAL_FLASHEx_Erase+0x114>)
 8068706:	2200      	movs	r2, #0
 8068708:	761a      	strb	r2, [r3, #24]

  return status;
 806870a:	7bfb      	ldrb	r3, [r7, #15]
}
 806870c:	4618      	mov	r0, r3
 806870e:	3710      	adds	r7, #16
 8068710:	46bd      	mov	sp, r7
 8068712:	bd80      	pop	{r7, pc}
 8068714:	20010e14 	.word	0x20010e14
 8068718:	080715f8 	.word	0x080715f8
 806871c:	40023c00 	.word	0x40023c00

08068720 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8068720:	b580      	push	{r7, lr}
 8068722:	b082      	sub	sp, #8
 8068724:	af00      	add	r7, sp, #0
 8068726:	4603      	mov	r3, r0
 8068728:	6039      	str	r1, [r7, #0]
 806872a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 806872c:	79fb      	ldrb	r3, [r7, #7]
 806872e:	2b00      	cmp	r3, #0
 8068730:	d00d      	beq.n	806874e <FLASH_MassErase+0x2e>
 8068732:	79fb      	ldrb	r3, [r7, #7]
 8068734:	2b01      	cmp	r3, #1
 8068736:	d00a      	beq.n	806874e <FLASH_MassErase+0x2e>
 8068738:	79fb      	ldrb	r3, [r7, #7]
 806873a:	2b02      	cmp	r3, #2
 806873c:	d007      	beq.n	806874e <FLASH_MassErase+0x2e>
 806873e:	79fb      	ldrb	r3, [r7, #7]
 8068740:	2b03      	cmp	r3, #3
 8068742:	d004      	beq.n	806874e <FLASH_MassErase+0x2e>
 8068744:	f240 31b7 	movw	r1, #951	@ 0x3b7
 8068748:	4811      	ldr	r0, [pc, #68]	@ (8068790 <FLASH_MassErase+0x70>)
 806874a:	f7fd fe7c 	bl	8066446 <assert_failed>
  assert_param(IS_FLASH_BANK(Banks));
 806874e:	683b      	ldr	r3, [r7, #0]
 8068750:	2b01      	cmp	r3, #1
 8068752:	d004      	beq.n	806875e <FLASH_MassErase+0x3e>
 8068754:	f44f 716e 	mov.w	r1, #952	@ 0x3b8
 8068758:	480d      	ldr	r0, [pc, #52]	@ (8068790 <FLASH_MassErase+0x70>)
 806875a:	f7fd fe74 	bl	8066446 <assert_failed>

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 806875e:	4b0d      	ldr	r3, [pc, #52]	@ (8068794 <FLASH_MassErase+0x74>)
 8068760:	691b      	ldr	r3, [r3, #16]
 8068762:	4a0c      	ldr	r2, [pc, #48]	@ (8068794 <FLASH_MassErase+0x74>)
 8068764:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8068768:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 806876a:	4b0a      	ldr	r3, [pc, #40]	@ (8068794 <FLASH_MassErase+0x74>)
 806876c:	691b      	ldr	r3, [r3, #16]
 806876e:	4a09      	ldr	r2, [pc, #36]	@ (8068794 <FLASH_MassErase+0x74>)
 8068770:	f043 0304 	orr.w	r3, r3, #4
 8068774:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8068776:	4b07      	ldr	r3, [pc, #28]	@ (8068794 <FLASH_MassErase+0x74>)
 8068778:	691a      	ldr	r2, [r3, #16]
 806877a:	79fb      	ldrb	r3, [r7, #7]
 806877c:	021b      	lsls	r3, r3, #8
 806877e:	4313      	orrs	r3, r2
 8068780:	4a04      	ldr	r2, [pc, #16]	@ (8068794 <FLASH_MassErase+0x74>)
 8068782:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8068786:	6113      	str	r3, [r2, #16]
}
 8068788:	bf00      	nop
 806878a:	3708      	adds	r7, #8
 806878c:	46bd      	mov	sp, r7
 806878e:	bd80      	pop	{r7, pc}
 8068790:	080715f8 	.word	0x080715f8
 8068794:	40023c00 	.word	0x40023c00

08068798 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8068798:	b580      	push	{r7, lr}
 806879a:	b084      	sub	sp, #16
 806879c:	af00      	add	r7, sp, #0
 806879e:	6078      	str	r0, [r7, #4]
 80687a0:	460b      	mov	r3, r1
 80687a2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80687a4:	2300      	movs	r3, #0
 80687a6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
 80687a8:	687b      	ldr	r3, [r7, #4]
 80687aa:	2b00      	cmp	r3, #0
 80687ac:	d019      	beq.n	80687e2 <FLASH_Erase_Sector+0x4a>
 80687ae:	687b      	ldr	r3, [r7, #4]
 80687b0:	2b01      	cmp	r3, #1
 80687b2:	d016      	beq.n	80687e2 <FLASH_Erase_Sector+0x4a>
 80687b4:	687b      	ldr	r3, [r7, #4]
 80687b6:	2b02      	cmp	r3, #2
 80687b8:	d013      	beq.n	80687e2 <FLASH_Erase_Sector+0x4a>
 80687ba:	687b      	ldr	r3, [r7, #4]
 80687bc:	2b03      	cmp	r3, #3
 80687be:	d010      	beq.n	80687e2 <FLASH_Erase_Sector+0x4a>
 80687c0:	687b      	ldr	r3, [r7, #4]
 80687c2:	2b04      	cmp	r3, #4
 80687c4:	d00d      	beq.n	80687e2 <FLASH_Erase_Sector+0x4a>
 80687c6:	687b      	ldr	r3, [r7, #4]
 80687c8:	2b05      	cmp	r3, #5
 80687ca:	d00a      	beq.n	80687e2 <FLASH_Erase_Sector+0x4a>
 80687cc:	687b      	ldr	r3, [r7, #4]
 80687ce:	2b06      	cmp	r3, #6
 80687d0:	d007      	beq.n	80687e2 <FLASH_Erase_Sector+0x4a>
 80687d2:	687b      	ldr	r3, [r7, #4]
 80687d4:	2b07      	cmp	r3, #7
 80687d6:	d004      	beq.n	80687e2 <FLASH_Erase_Sector+0x4a>
 80687d8:	f240 31d6 	movw	r1, #982	@ 0x3d6
 80687dc:	4827      	ldr	r0, [pc, #156]	@ (806887c <FLASH_Erase_Sector+0xe4>)
 80687de:	f7fd fe32 	bl	8066446 <assert_failed>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 80687e2:	78fb      	ldrb	r3, [r7, #3]
 80687e4:	2b00      	cmp	r3, #0
 80687e6:	d00d      	beq.n	8068804 <FLASH_Erase_Sector+0x6c>
 80687e8:	78fb      	ldrb	r3, [r7, #3]
 80687ea:	2b01      	cmp	r3, #1
 80687ec:	d00a      	beq.n	8068804 <FLASH_Erase_Sector+0x6c>
 80687ee:	78fb      	ldrb	r3, [r7, #3]
 80687f0:	2b02      	cmp	r3, #2
 80687f2:	d007      	beq.n	8068804 <FLASH_Erase_Sector+0x6c>
 80687f4:	78fb      	ldrb	r3, [r7, #3]
 80687f6:	2b03      	cmp	r3, #3
 80687f8:	d004      	beq.n	8068804 <FLASH_Erase_Sector+0x6c>
 80687fa:	f240 31d7 	movw	r1, #983	@ 0x3d7
 80687fe:	481f      	ldr	r0, [pc, #124]	@ (806887c <FLASH_Erase_Sector+0xe4>)
 8068800:	f7fd fe21 	bl	8066446 <assert_failed>

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8068804:	78fb      	ldrb	r3, [r7, #3]
 8068806:	2b00      	cmp	r3, #0
 8068808:	d102      	bne.n	8068810 <FLASH_Erase_Sector+0x78>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 806880a:	2300      	movs	r3, #0
 806880c:	60fb      	str	r3, [r7, #12]
 806880e:	e010      	b.n	8068832 <FLASH_Erase_Sector+0x9a>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8068810:	78fb      	ldrb	r3, [r7, #3]
 8068812:	2b01      	cmp	r3, #1
 8068814:	d103      	bne.n	806881e <FLASH_Erase_Sector+0x86>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8068816:	f44f 7380 	mov.w	r3, #256	@ 0x100
 806881a:	60fb      	str	r3, [r7, #12]
 806881c:	e009      	b.n	8068832 <FLASH_Erase_Sector+0x9a>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 806881e:	78fb      	ldrb	r3, [r7, #3]
 8068820:	2b02      	cmp	r3, #2
 8068822:	d103      	bne.n	806882c <FLASH_Erase_Sector+0x94>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8068824:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8068828:	60fb      	str	r3, [r7, #12]
 806882a:	e002      	b.n	8068832 <FLASH_Erase_Sector+0x9a>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 806882c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8068830:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8068832:	4b13      	ldr	r3, [pc, #76]	@ (8068880 <FLASH_Erase_Sector+0xe8>)
 8068834:	691b      	ldr	r3, [r3, #16]
 8068836:	4a12      	ldr	r2, [pc, #72]	@ (8068880 <FLASH_Erase_Sector+0xe8>)
 8068838:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 806883c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 806883e:	4b10      	ldr	r3, [pc, #64]	@ (8068880 <FLASH_Erase_Sector+0xe8>)
 8068840:	691a      	ldr	r2, [r3, #16]
 8068842:	490f      	ldr	r1, [pc, #60]	@ (8068880 <FLASH_Erase_Sector+0xe8>)
 8068844:	68fb      	ldr	r3, [r7, #12]
 8068846:	4313      	orrs	r3, r2
 8068848:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 806884a:	4b0d      	ldr	r3, [pc, #52]	@ (8068880 <FLASH_Erase_Sector+0xe8>)
 806884c:	691b      	ldr	r3, [r3, #16]
 806884e:	4a0c      	ldr	r2, [pc, #48]	@ (8068880 <FLASH_Erase_Sector+0xe8>)
 8068850:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8068854:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8068856:	4b0a      	ldr	r3, [pc, #40]	@ (8068880 <FLASH_Erase_Sector+0xe8>)
 8068858:	691a      	ldr	r2, [r3, #16]
 806885a:	687b      	ldr	r3, [r7, #4]
 806885c:	00db      	lsls	r3, r3, #3
 806885e:	4313      	orrs	r3, r2
 8068860:	4a07      	ldr	r2, [pc, #28]	@ (8068880 <FLASH_Erase_Sector+0xe8>)
 8068862:	f043 0302 	orr.w	r3, r3, #2
 8068866:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8068868:	4b05      	ldr	r3, [pc, #20]	@ (8068880 <FLASH_Erase_Sector+0xe8>)
 806886a:	691b      	ldr	r3, [r3, #16]
 806886c:	4a04      	ldr	r2, [pc, #16]	@ (8068880 <FLASH_Erase_Sector+0xe8>)
 806886e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8068872:	6113      	str	r3, [r2, #16]
}
 8068874:	bf00      	nop
 8068876:	3710      	adds	r7, #16
 8068878:	46bd      	mov	sp, r7
 806887a:	bd80      	pop	{r7, pc}
 806887c:	080715f8 	.word	0x080715f8
 8068880:	40023c00 	.word	0x40023c00

08068884 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8068884:	b480      	push	{r7}
 8068886:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8068888:	4b20      	ldr	r3, [pc, #128]	@ (806890c <FLASH_FlushCaches+0x88>)
 806888a:	681b      	ldr	r3, [r3, #0]
 806888c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8068890:	2b00      	cmp	r3, #0
 8068892:	d017      	beq.n	80688c4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8068894:	4b1d      	ldr	r3, [pc, #116]	@ (806890c <FLASH_FlushCaches+0x88>)
 8068896:	681b      	ldr	r3, [r3, #0]
 8068898:	4a1c      	ldr	r2, [pc, #112]	@ (806890c <FLASH_FlushCaches+0x88>)
 806889a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 806889e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80688a0:	4b1a      	ldr	r3, [pc, #104]	@ (806890c <FLASH_FlushCaches+0x88>)
 80688a2:	681b      	ldr	r3, [r3, #0]
 80688a4:	4a19      	ldr	r2, [pc, #100]	@ (806890c <FLASH_FlushCaches+0x88>)
 80688a6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80688aa:	6013      	str	r3, [r2, #0]
 80688ac:	4b17      	ldr	r3, [pc, #92]	@ (806890c <FLASH_FlushCaches+0x88>)
 80688ae:	681b      	ldr	r3, [r3, #0]
 80688b0:	4a16      	ldr	r2, [pc, #88]	@ (806890c <FLASH_FlushCaches+0x88>)
 80688b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80688b6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80688b8:	4b14      	ldr	r3, [pc, #80]	@ (806890c <FLASH_FlushCaches+0x88>)
 80688ba:	681b      	ldr	r3, [r3, #0]
 80688bc:	4a13      	ldr	r2, [pc, #76]	@ (806890c <FLASH_FlushCaches+0x88>)
 80688be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80688c2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80688c4:	4b11      	ldr	r3, [pc, #68]	@ (806890c <FLASH_FlushCaches+0x88>)
 80688c6:	681b      	ldr	r3, [r3, #0]
 80688c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80688cc:	2b00      	cmp	r3, #0
 80688ce:	d017      	beq.n	8068900 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80688d0:	4b0e      	ldr	r3, [pc, #56]	@ (806890c <FLASH_FlushCaches+0x88>)
 80688d2:	681b      	ldr	r3, [r3, #0]
 80688d4:	4a0d      	ldr	r2, [pc, #52]	@ (806890c <FLASH_FlushCaches+0x88>)
 80688d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80688da:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80688dc:	4b0b      	ldr	r3, [pc, #44]	@ (806890c <FLASH_FlushCaches+0x88>)
 80688de:	681b      	ldr	r3, [r3, #0]
 80688e0:	4a0a      	ldr	r2, [pc, #40]	@ (806890c <FLASH_FlushCaches+0x88>)
 80688e2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80688e6:	6013      	str	r3, [r2, #0]
 80688e8:	4b08      	ldr	r3, [pc, #32]	@ (806890c <FLASH_FlushCaches+0x88>)
 80688ea:	681b      	ldr	r3, [r3, #0]
 80688ec:	4a07      	ldr	r2, [pc, #28]	@ (806890c <FLASH_FlushCaches+0x88>)
 80688ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80688f2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80688f4:	4b05      	ldr	r3, [pc, #20]	@ (806890c <FLASH_FlushCaches+0x88>)
 80688f6:	681b      	ldr	r3, [r3, #0]
 80688f8:	4a04      	ldr	r2, [pc, #16]	@ (806890c <FLASH_FlushCaches+0x88>)
 80688fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80688fe:	6013      	str	r3, [r2, #0]
  }
}
 8068900:	bf00      	nop
 8068902:	46bd      	mov	sp, r7
 8068904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8068908:	4770      	bx	lr
 806890a:	bf00      	nop
 806890c:	40023c00 	.word	0x40023c00

08068910 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8068910:	b580      	push	{r7, lr}
 8068912:	b088      	sub	sp, #32
 8068914:	af00      	add	r7, sp, #0
 8068916:	6078      	str	r0, [r7, #4]
 8068918:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 806891a:	2300      	movs	r3, #0
 806891c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 806891e:	2300      	movs	r3, #0
 8068920:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8068922:	2300      	movs	r3, #0
 8068924:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8068926:	687b      	ldr	r3, [r7, #4]
 8068928:	4a32      	ldr	r2, [pc, #200]	@ (80689f4 <HAL_GPIO_Init+0xe4>)
 806892a:	4293      	cmp	r3, r2
 806892c:	d017      	beq.n	806895e <HAL_GPIO_Init+0x4e>
 806892e:	687b      	ldr	r3, [r7, #4]
 8068930:	4a31      	ldr	r2, [pc, #196]	@ (80689f8 <HAL_GPIO_Init+0xe8>)
 8068932:	4293      	cmp	r3, r2
 8068934:	d013      	beq.n	806895e <HAL_GPIO_Init+0x4e>
 8068936:	687b      	ldr	r3, [r7, #4]
 8068938:	4a30      	ldr	r2, [pc, #192]	@ (80689fc <HAL_GPIO_Init+0xec>)
 806893a:	4293      	cmp	r3, r2
 806893c:	d00f      	beq.n	806895e <HAL_GPIO_Init+0x4e>
 806893e:	687b      	ldr	r3, [r7, #4]
 8068940:	4a2f      	ldr	r2, [pc, #188]	@ (8068a00 <HAL_GPIO_Init+0xf0>)
 8068942:	4293      	cmp	r3, r2
 8068944:	d00b      	beq.n	806895e <HAL_GPIO_Init+0x4e>
 8068946:	687b      	ldr	r3, [r7, #4]
 8068948:	4a2e      	ldr	r2, [pc, #184]	@ (8068a04 <HAL_GPIO_Init+0xf4>)
 806894a:	4293      	cmp	r3, r2
 806894c:	d007      	beq.n	806895e <HAL_GPIO_Init+0x4e>
 806894e:	687b      	ldr	r3, [r7, #4]
 8068950:	4a2d      	ldr	r2, [pc, #180]	@ (8068a08 <HAL_GPIO_Init+0xf8>)
 8068952:	4293      	cmp	r3, r2
 8068954:	d003      	beq.n	806895e <HAL_GPIO_Init+0x4e>
 8068956:	21ac      	movs	r1, #172	@ 0xac
 8068958:	482c      	ldr	r0, [pc, #176]	@ (8068a0c <HAL_GPIO_Init+0xfc>)
 806895a:	f7fd fd74 	bl	8066446 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 806895e:	683b      	ldr	r3, [r7, #0]
 8068960:	681b      	ldr	r3, [r3, #0]
 8068962:	b29b      	uxth	r3, r3
 8068964:	2b00      	cmp	r3, #0
 8068966:	d004      	beq.n	8068972 <HAL_GPIO_Init+0x62>
 8068968:	683b      	ldr	r3, [r7, #0]
 806896a:	681b      	ldr	r3, [r3, #0]
 806896c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8068970:	d303      	bcc.n	806897a <HAL_GPIO_Init+0x6a>
 8068972:	21ad      	movs	r1, #173	@ 0xad
 8068974:	4825      	ldr	r0, [pc, #148]	@ (8068a0c <HAL_GPIO_Init+0xfc>)
 8068976:	f7fd fd66 	bl	8066446 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 806897a:	683b      	ldr	r3, [r7, #0]
 806897c:	685b      	ldr	r3, [r3, #4]
 806897e:	2b00      	cmp	r3, #0
 8068980:	d035      	beq.n	80689ee <HAL_GPIO_Init+0xde>
 8068982:	683b      	ldr	r3, [r7, #0]
 8068984:	685b      	ldr	r3, [r3, #4]
 8068986:	2b01      	cmp	r3, #1
 8068988:	d031      	beq.n	80689ee <HAL_GPIO_Init+0xde>
 806898a:	683b      	ldr	r3, [r7, #0]
 806898c:	685b      	ldr	r3, [r3, #4]
 806898e:	2b11      	cmp	r3, #17
 8068990:	d02d      	beq.n	80689ee <HAL_GPIO_Init+0xde>
 8068992:	683b      	ldr	r3, [r7, #0]
 8068994:	685b      	ldr	r3, [r3, #4]
 8068996:	2b02      	cmp	r3, #2
 8068998:	d029      	beq.n	80689ee <HAL_GPIO_Init+0xde>
 806899a:	683b      	ldr	r3, [r7, #0]
 806899c:	685b      	ldr	r3, [r3, #4]
 806899e:	2b12      	cmp	r3, #18
 80689a0:	d025      	beq.n	80689ee <HAL_GPIO_Init+0xde>
 80689a2:	683b      	ldr	r3, [r7, #0]
 80689a4:	685b      	ldr	r3, [r3, #4]
 80689a6:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 80689aa:	d020      	beq.n	80689ee <HAL_GPIO_Init+0xde>
 80689ac:	683b      	ldr	r3, [r7, #0]
 80689ae:	685b      	ldr	r3, [r3, #4]
 80689b0:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 80689b4:	d01b      	beq.n	80689ee <HAL_GPIO_Init+0xde>
 80689b6:	683b      	ldr	r3, [r7, #0]
 80689b8:	685b      	ldr	r3, [r3, #4]
 80689ba:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 80689be:	d016      	beq.n	80689ee <HAL_GPIO_Init+0xde>
 80689c0:	683b      	ldr	r3, [r7, #0]
 80689c2:	685b      	ldr	r3, [r3, #4]
 80689c4:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 80689c8:	d011      	beq.n	80689ee <HAL_GPIO_Init+0xde>
 80689ca:	683b      	ldr	r3, [r7, #0]
 80689cc:	685b      	ldr	r3, [r3, #4]
 80689ce:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 80689d2:	d00c      	beq.n	80689ee <HAL_GPIO_Init+0xde>
 80689d4:	683b      	ldr	r3, [r7, #0]
 80689d6:	685b      	ldr	r3, [r3, #4]
 80689d8:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 80689dc:	d007      	beq.n	80689ee <HAL_GPIO_Init+0xde>
 80689de:	683b      	ldr	r3, [r7, #0]
 80689e0:	685b      	ldr	r3, [r3, #4]
 80689e2:	2b03      	cmp	r3, #3
 80689e4:	d003      	beq.n	80689ee <HAL_GPIO_Init+0xde>
 80689e6:	21ae      	movs	r1, #174	@ 0xae
 80689e8:	4808      	ldr	r0, [pc, #32]	@ (8068a0c <HAL_GPIO_Init+0xfc>)
 80689ea:	f7fd fd2c 	bl	8066446 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80689ee:	2300      	movs	r3, #0
 80689f0:	61fb      	str	r3, [r7, #28]
 80689f2:	e20b      	b.n	8068e0c <HAL_GPIO_Init+0x4fc>
 80689f4:	40020000 	.word	0x40020000
 80689f8:	40020400 	.word	0x40020400
 80689fc:	40020800 	.word	0x40020800
 8068a00:	40020c00 	.word	0x40020c00
 8068a04:	40021000 	.word	0x40021000
 8068a08:	40021c00 	.word	0x40021c00
 8068a0c:	08071670 	.word	0x08071670
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8068a10:	2201      	movs	r2, #1
 8068a12:	69fb      	ldr	r3, [r7, #28]
 8068a14:	fa02 f303 	lsl.w	r3, r2, r3
 8068a18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8068a1a:	683b      	ldr	r3, [r7, #0]
 8068a1c:	681b      	ldr	r3, [r3, #0]
 8068a1e:	697a      	ldr	r2, [r7, #20]
 8068a20:	4013      	ands	r3, r2
 8068a22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8068a24:	693a      	ldr	r2, [r7, #16]
 8068a26:	697b      	ldr	r3, [r7, #20]
 8068a28:	429a      	cmp	r2, r3
 8068a2a:	f040 81ec 	bne.w	8068e06 <HAL_GPIO_Init+0x4f6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8068a2e:	683b      	ldr	r3, [r7, #0]
 8068a30:	685b      	ldr	r3, [r3, #4]
 8068a32:	f003 0303 	and.w	r3, r3, #3
 8068a36:	2b01      	cmp	r3, #1
 8068a38:	d005      	beq.n	8068a46 <HAL_GPIO_Init+0x136>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8068a3a:	683b      	ldr	r3, [r7, #0]
 8068a3c:	685b      	ldr	r3, [r3, #4]
 8068a3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8068a42:	2b02      	cmp	r3, #2
 8068a44:	d144      	bne.n	8068ad0 <HAL_GPIO_Init+0x1c0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8068a46:	683b      	ldr	r3, [r7, #0]
 8068a48:	68db      	ldr	r3, [r3, #12]
 8068a4a:	2b00      	cmp	r3, #0
 8068a4c:	d00f      	beq.n	8068a6e <HAL_GPIO_Init+0x15e>
 8068a4e:	683b      	ldr	r3, [r7, #0]
 8068a50:	68db      	ldr	r3, [r3, #12]
 8068a52:	2b01      	cmp	r3, #1
 8068a54:	d00b      	beq.n	8068a6e <HAL_GPIO_Init+0x15e>
 8068a56:	683b      	ldr	r3, [r7, #0]
 8068a58:	68db      	ldr	r3, [r3, #12]
 8068a5a:	2b02      	cmp	r3, #2
 8068a5c:	d007      	beq.n	8068a6e <HAL_GPIO_Init+0x15e>
 8068a5e:	683b      	ldr	r3, [r7, #0]
 8068a60:	68db      	ldr	r3, [r3, #12]
 8068a62:	2b03      	cmp	r3, #3
 8068a64:	d003      	beq.n	8068a6e <HAL_GPIO_Init+0x15e>
 8068a66:	21c0      	movs	r1, #192	@ 0xc0
 8068a68:	4884      	ldr	r0, [pc, #528]	@ (8068c7c <HAL_GPIO_Init+0x36c>)
 8068a6a:	f7fd fcec 	bl	8066446 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8068a6e:	687b      	ldr	r3, [r7, #4]
 8068a70:	689b      	ldr	r3, [r3, #8]
 8068a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8068a74:	69fb      	ldr	r3, [r7, #28]
 8068a76:	005b      	lsls	r3, r3, #1
 8068a78:	2203      	movs	r2, #3
 8068a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8068a7e:	43db      	mvns	r3, r3
 8068a80:	69ba      	ldr	r2, [r7, #24]
 8068a82:	4013      	ands	r3, r2
 8068a84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8068a86:	683b      	ldr	r3, [r7, #0]
 8068a88:	68da      	ldr	r2, [r3, #12]
 8068a8a:	69fb      	ldr	r3, [r7, #28]
 8068a8c:	005b      	lsls	r3, r3, #1
 8068a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8068a92:	69ba      	ldr	r2, [r7, #24]
 8068a94:	4313      	orrs	r3, r2
 8068a96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8068a98:	687b      	ldr	r3, [r7, #4]
 8068a9a:	69ba      	ldr	r2, [r7, #24]
 8068a9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8068a9e:	687b      	ldr	r3, [r7, #4]
 8068aa0:	685b      	ldr	r3, [r3, #4]
 8068aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8068aa4:	2201      	movs	r2, #1
 8068aa6:	69fb      	ldr	r3, [r7, #28]
 8068aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8068aac:	43db      	mvns	r3, r3
 8068aae:	69ba      	ldr	r2, [r7, #24]
 8068ab0:	4013      	ands	r3, r2
 8068ab2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8068ab4:	683b      	ldr	r3, [r7, #0]
 8068ab6:	685b      	ldr	r3, [r3, #4]
 8068ab8:	091b      	lsrs	r3, r3, #4
 8068aba:	f003 0201 	and.w	r2, r3, #1
 8068abe:	69fb      	ldr	r3, [r7, #28]
 8068ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8068ac4:	69ba      	ldr	r2, [r7, #24]
 8068ac6:	4313      	orrs	r3, r2
 8068ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8068aca:	687b      	ldr	r3, [r7, #4]
 8068acc:	69ba      	ldr	r2, [r7, #24]
 8068ace:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8068ad0:	683b      	ldr	r3, [r7, #0]
 8068ad2:	685b      	ldr	r3, [r3, #4]
 8068ad4:	f003 0303 	and.w	r3, r3, #3
 8068ad8:	2b03      	cmp	r3, #3
 8068ada:	d027      	beq.n	8068b2c <HAL_GPIO_Init+0x21c>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8068adc:	683b      	ldr	r3, [r7, #0]
 8068ade:	689b      	ldr	r3, [r3, #8]
 8068ae0:	2b00      	cmp	r3, #0
 8068ae2:	d00b      	beq.n	8068afc <HAL_GPIO_Init+0x1ec>
 8068ae4:	683b      	ldr	r3, [r7, #0]
 8068ae6:	689b      	ldr	r3, [r3, #8]
 8068ae8:	2b01      	cmp	r3, #1
 8068aea:	d007      	beq.n	8068afc <HAL_GPIO_Init+0x1ec>
 8068aec:	683b      	ldr	r3, [r7, #0]
 8068aee:	689b      	ldr	r3, [r3, #8]
 8068af0:	2b02      	cmp	r3, #2
 8068af2:	d003      	beq.n	8068afc <HAL_GPIO_Init+0x1ec>
 8068af4:	21d1      	movs	r1, #209	@ 0xd1
 8068af6:	4861      	ldr	r0, [pc, #388]	@ (8068c7c <HAL_GPIO_Init+0x36c>)
 8068af8:	f7fd fca5 	bl	8066446 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8068afc:	687b      	ldr	r3, [r7, #4]
 8068afe:	68db      	ldr	r3, [r3, #12]
 8068b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8068b02:	69fb      	ldr	r3, [r7, #28]
 8068b04:	005b      	lsls	r3, r3, #1
 8068b06:	2203      	movs	r2, #3
 8068b08:	fa02 f303 	lsl.w	r3, r2, r3
 8068b0c:	43db      	mvns	r3, r3
 8068b0e:	69ba      	ldr	r2, [r7, #24]
 8068b10:	4013      	ands	r3, r2
 8068b12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8068b14:	683b      	ldr	r3, [r7, #0]
 8068b16:	689a      	ldr	r2, [r3, #8]
 8068b18:	69fb      	ldr	r3, [r7, #28]
 8068b1a:	005b      	lsls	r3, r3, #1
 8068b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8068b20:	69ba      	ldr	r2, [r7, #24]
 8068b22:	4313      	orrs	r3, r2
 8068b24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8068b26:	687b      	ldr	r3, [r7, #4]
 8068b28:	69ba      	ldr	r2, [r7, #24]
 8068b2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8068b2c:	683b      	ldr	r3, [r7, #0]
 8068b2e:	685b      	ldr	r3, [r3, #4]
 8068b30:	f003 0303 	and.w	r3, r3, #3
 8068b34:	2b02      	cmp	r3, #2
 8068b36:	f040 80a3 	bne.w	8068c80 <HAL_GPIO_Init+0x370>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8068b3a:	683b      	ldr	r3, [r7, #0]
 8068b3c:	691b      	ldr	r3, [r3, #16]
 8068b3e:	2b00      	cmp	r3, #0
 8068b40:	d077      	beq.n	8068c32 <HAL_GPIO_Init+0x322>
 8068b42:	683b      	ldr	r3, [r7, #0]
 8068b44:	691b      	ldr	r3, [r3, #16]
 8068b46:	2b09      	cmp	r3, #9
 8068b48:	d073      	beq.n	8068c32 <HAL_GPIO_Init+0x322>
 8068b4a:	683b      	ldr	r3, [r7, #0]
 8068b4c:	691b      	ldr	r3, [r3, #16]
 8068b4e:	2b00      	cmp	r3, #0
 8068b50:	d06f      	beq.n	8068c32 <HAL_GPIO_Init+0x322>
 8068b52:	683b      	ldr	r3, [r7, #0]
 8068b54:	691b      	ldr	r3, [r3, #16]
 8068b56:	2b00      	cmp	r3, #0
 8068b58:	d06b      	beq.n	8068c32 <HAL_GPIO_Init+0x322>
 8068b5a:	683b      	ldr	r3, [r7, #0]
 8068b5c:	691b      	ldr	r3, [r3, #16]
 8068b5e:	2b00      	cmp	r3, #0
 8068b60:	d067      	beq.n	8068c32 <HAL_GPIO_Init+0x322>
 8068b62:	683b      	ldr	r3, [r7, #0]
 8068b64:	691b      	ldr	r3, [r3, #16]
 8068b66:	2b00      	cmp	r3, #0
 8068b68:	d063      	beq.n	8068c32 <HAL_GPIO_Init+0x322>
 8068b6a:	683b      	ldr	r3, [r7, #0]
 8068b6c:	691b      	ldr	r3, [r3, #16]
 8068b6e:	2b01      	cmp	r3, #1
 8068b70:	d05f      	beq.n	8068c32 <HAL_GPIO_Init+0x322>
 8068b72:	683b      	ldr	r3, [r7, #0]
 8068b74:	691b      	ldr	r3, [r3, #16]
 8068b76:	2b01      	cmp	r3, #1
 8068b78:	d05b      	beq.n	8068c32 <HAL_GPIO_Init+0x322>
 8068b7a:	683b      	ldr	r3, [r7, #0]
 8068b7c:	691b      	ldr	r3, [r3, #16]
 8068b7e:	2b02      	cmp	r3, #2
 8068b80:	d057      	beq.n	8068c32 <HAL_GPIO_Init+0x322>
 8068b82:	683b      	ldr	r3, [r7, #0]
 8068b84:	691b      	ldr	r3, [r3, #16]
 8068b86:	2b02      	cmp	r3, #2
 8068b88:	d053      	beq.n	8068c32 <HAL_GPIO_Init+0x322>
 8068b8a:	683b      	ldr	r3, [r7, #0]
 8068b8c:	691b      	ldr	r3, [r3, #16]
 8068b8e:	2b02      	cmp	r3, #2
 8068b90:	d04f      	beq.n	8068c32 <HAL_GPIO_Init+0x322>
 8068b92:	683b      	ldr	r3, [r7, #0]
 8068b94:	691b      	ldr	r3, [r3, #16]
 8068b96:	2b04      	cmp	r3, #4
 8068b98:	d04b      	beq.n	8068c32 <HAL_GPIO_Init+0x322>
 8068b9a:	683b      	ldr	r3, [r7, #0]
 8068b9c:	691b      	ldr	r3, [r3, #16]
 8068b9e:	2b04      	cmp	r3, #4
 8068ba0:	d047      	beq.n	8068c32 <HAL_GPIO_Init+0x322>
 8068ba2:	683b      	ldr	r3, [r7, #0]
 8068ba4:	691b      	ldr	r3, [r3, #16]
 8068ba6:	2b04      	cmp	r3, #4
 8068ba8:	d043      	beq.n	8068c32 <HAL_GPIO_Init+0x322>
 8068baa:	683b      	ldr	r3, [r7, #0]
 8068bac:	691b      	ldr	r3, [r3, #16]
 8068bae:	2b05      	cmp	r3, #5
 8068bb0:	d03f      	beq.n	8068c32 <HAL_GPIO_Init+0x322>
 8068bb2:	683b      	ldr	r3, [r7, #0]
 8068bb4:	691b      	ldr	r3, [r3, #16]
 8068bb6:	2b05      	cmp	r3, #5
 8068bb8:	d03b      	beq.n	8068c32 <HAL_GPIO_Init+0x322>
 8068bba:	683b      	ldr	r3, [r7, #0]
 8068bbc:	691b      	ldr	r3, [r3, #16]
 8068bbe:	2b05      	cmp	r3, #5
 8068bc0:	d037      	beq.n	8068c32 <HAL_GPIO_Init+0x322>
 8068bc2:	683b      	ldr	r3, [r7, #0]
 8068bc4:	691b      	ldr	r3, [r3, #16]
 8068bc6:	2b06      	cmp	r3, #6
 8068bc8:	d033      	beq.n	8068c32 <HAL_GPIO_Init+0x322>
 8068bca:	683b      	ldr	r3, [r7, #0]
 8068bcc:	691b      	ldr	r3, [r3, #16]
 8068bce:	2b06      	cmp	r3, #6
 8068bd0:	d02f      	beq.n	8068c32 <HAL_GPIO_Init+0x322>
 8068bd2:	683b      	ldr	r3, [r7, #0]
 8068bd4:	691b      	ldr	r3, [r3, #16]
 8068bd6:	2b05      	cmp	r3, #5
 8068bd8:	d02b      	beq.n	8068c32 <HAL_GPIO_Init+0x322>
 8068bda:	683b      	ldr	r3, [r7, #0]
 8068bdc:	691b      	ldr	r3, [r3, #16]
 8068bde:	2b06      	cmp	r3, #6
 8068be0:	d027      	beq.n	8068c32 <HAL_GPIO_Init+0x322>
 8068be2:	683b      	ldr	r3, [r7, #0]
 8068be4:	691b      	ldr	r3, [r3, #16]
 8068be6:	2b07      	cmp	r3, #7
 8068be8:	d023      	beq.n	8068c32 <HAL_GPIO_Init+0x322>
 8068bea:	683b      	ldr	r3, [r7, #0]
 8068bec:	691b      	ldr	r3, [r3, #16]
 8068bee:	2b07      	cmp	r3, #7
 8068bf0:	d01f      	beq.n	8068c32 <HAL_GPIO_Init+0x322>
 8068bf2:	683b      	ldr	r3, [r7, #0]
 8068bf4:	691b      	ldr	r3, [r3, #16]
 8068bf6:	2b07      	cmp	r3, #7
 8068bf8:	d01b      	beq.n	8068c32 <HAL_GPIO_Init+0x322>
 8068bfa:	683b      	ldr	r3, [r7, #0]
 8068bfc:	691b      	ldr	r3, [r3, #16]
 8068bfe:	2b08      	cmp	r3, #8
 8068c00:	d017      	beq.n	8068c32 <HAL_GPIO_Init+0x322>
 8068c02:	683b      	ldr	r3, [r7, #0]
 8068c04:	691b      	ldr	r3, [r3, #16]
 8068c06:	2b0a      	cmp	r3, #10
 8068c08:	d013      	beq.n	8068c32 <HAL_GPIO_Init+0x322>
 8068c0a:	683b      	ldr	r3, [r7, #0]
 8068c0c:	691b      	ldr	r3, [r3, #16]
 8068c0e:	2b09      	cmp	r3, #9
 8068c10:	d00f      	beq.n	8068c32 <HAL_GPIO_Init+0x322>
 8068c12:	683b      	ldr	r3, [r7, #0]
 8068c14:	691b      	ldr	r3, [r3, #16]
 8068c16:	2b09      	cmp	r3, #9
 8068c18:	d00b      	beq.n	8068c32 <HAL_GPIO_Init+0x322>
 8068c1a:	683b      	ldr	r3, [r7, #0]
 8068c1c:	691b      	ldr	r3, [r3, #16]
 8068c1e:	2b0c      	cmp	r3, #12
 8068c20:	d007      	beq.n	8068c32 <HAL_GPIO_Init+0x322>
 8068c22:	683b      	ldr	r3, [r7, #0]
 8068c24:	691b      	ldr	r3, [r3, #16]
 8068c26:	2b0f      	cmp	r3, #15
 8068c28:	d003      	beq.n	8068c32 <HAL_GPIO_Init+0x322>
 8068c2a:	21de      	movs	r1, #222	@ 0xde
 8068c2c:	4813      	ldr	r0, [pc, #76]	@ (8068c7c <HAL_GPIO_Init+0x36c>)
 8068c2e:	f7fd fc0a 	bl	8066446 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8068c32:	69fb      	ldr	r3, [r7, #28]
 8068c34:	08da      	lsrs	r2, r3, #3
 8068c36:	687b      	ldr	r3, [r7, #4]
 8068c38:	3208      	adds	r2, #8
 8068c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8068c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8068c40:	69fb      	ldr	r3, [r7, #28]
 8068c42:	f003 0307 	and.w	r3, r3, #7
 8068c46:	009b      	lsls	r3, r3, #2
 8068c48:	220f      	movs	r2, #15
 8068c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8068c4e:	43db      	mvns	r3, r3
 8068c50:	69ba      	ldr	r2, [r7, #24]
 8068c52:	4013      	ands	r3, r2
 8068c54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8068c56:	683b      	ldr	r3, [r7, #0]
 8068c58:	691a      	ldr	r2, [r3, #16]
 8068c5a:	69fb      	ldr	r3, [r7, #28]
 8068c5c:	f003 0307 	and.w	r3, r3, #7
 8068c60:	009b      	lsls	r3, r3, #2
 8068c62:	fa02 f303 	lsl.w	r3, r2, r3
 8068c66:	69ba      	ldr	r2, [r7, #24]
 8068c68:	4313      	orrs	r3, r2
 8068c6a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8068c6c:	69fb      	ldr	r3, [r7, #28]
 8068c6e:	08da      	lsrs	r2, r3, #3
 8068c70:	687b      	ldr	r3, [r7, #4]
 8068c72:	3208      	adds	r2, #8
 8068c74:	69b9      	ldr	r1, [r7, #24]
 8068c76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8068c7a:	e001      	b.n	8068c80 <HAL_GPIO_Init+0x370>
 8068c7c:	08071670 	.word	0x08071670
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8068c80:	687b      	ldr	r3, [r7, #4]
 8068c82:	681b      	ldr	r3, [r3, #0]
 8068c84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8068c86:	69fb      	ldr	r3, [r7, #28]
 8068c88:	005b      	lsls	r3, r3, #1
 8068c8a:	2203      	movs	r2, #3
 8068c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8068c90:	43db      	mvns	r3, r3
 8068c92:	69ba      	ldr	r2, [r7, #24]
 8068c94:	4013      	ands	r3, r2
 8068c96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8068c98:	683b      	ldr	r3, [r7, #0]
 8068c9a:	685b      	ldr	r3, [r3, #4]
 8068c9c:	f003 0203 	and.w	r2, r3, #3
 8068ca0:	69fb      	ldr	r3, [r7, #28]
 8068ca2:	005b      	lsls	r3, r3, #1
 8068ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8068ca8:	69ba      	ldr	r2, [r7, #24]
 8068caa:	4313      	orrs	r3, r2
 8068cac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8068cae:	687b      	ldr	r3, [r7, #4]
 8068cb0:	69ba      	ldr	r2, [r7, #24]
 8068cb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8068cb4:	683b      	ldr	r3, [r7, #0]
 8068cb6:	685b      	ldr	r3, [r3, #4]
 8068cb8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8068cbc:	2b00      	cmp	r3, #0
 8068cbe:	f000 80a2 	beq.w	8068e06 <HAL_GPIO_Init+0x4f6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8068cc2:	2300      	movs	r3, #0
 8068cc4:	60fb      	str	r3, [r7, #12]
 8068cc6:	4b56      	ldr	r3, [pc, #344]	@ (8068e20 <HAL_GPIO_Init+0x510>)
 8068cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8068cca:	4a55      	ldr	r2, [pc, #340]	@ (8068e20 <HAL_GPIO_Init+0x510>)
 8068ccc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8068cd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8068cd2:	4b53      	ldr	r3, [pc, #332]	@ (8068e20 <HAL_GPIO_Init+0x510>)
 8068cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8068cd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8068cda:	60fb      	str	r3, [r7, #12]
 8068cdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8068cde:	4a51      	ldr	r2, [pc, #324]	@ (8068e24 <HAL_GPIO_Init+0x514>)
 8068ce0:	69fb      	ldr	r3, [r7, #28]
 8068ce2:	089b      	lsrs	r3, r3, #2
 8068ce4:	3302      	adds	r3, #2
 8068ce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8068cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8068cec:	69fb      	ldr	r3, [r7, #28]
 8068cee:	f003 0303 	and.w	r3, r3, #3
 8068cf2:	009b      	lsls	r3, r3, #2
 8068cf4:	220f      	movs	r2, #15
 8068cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8068cfa:	43db      	mvns	r3, r3
 8068cfc:	69ba      	ldr	r2, [r7, #24]
 8068cfe:	4013      	ands	r3, r2
 8068d00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8068d02:	687b      	ldr	r3, [r7, #4]
 8068d04:	4a48      	ldr	r2, [pc, #288]	@ (8068e28 <HAL_GPIO_Init+0x518>)
 8068d06:	4293      	cmp	r3, r2
 8068d08:	d019      	beq.n	8068d3e <HAL_GPIO_Init+0x42e>
 8068d0a:	687b      	ldr	r3, [r7, #4]
 8068d0c:	4a47      	ldr	r2, [pc, #284]	@ (8068e2c <HAL_GPIO_Init+0x51c>)
 8068d0e:	4293      	cmp	r3, r2
 8068d10:	d013      	beq.n	8068d3a <HAL_GPIO_Init+0x42a>
 8068d12:	687b      	ldr	r3, [r7, #4]
 8068d14:	4a46      	ldr	r2, [pc, #280]	@ (8068e30 <HAL_GPIO_Init+0x520>)
 8068d16:	4293      	cmp	r3, r2
 8068d18:	d00d      	beq.n	8068d36 <HAL_GPIO_Init+0x426>
 8068d1a:	687b      	ldr	r3, [r7, #4]
 8068d1c:	4a45      	ldr	r2, [pc, #276]	@ (8068e34 <HAL_GPIO_Init+0x524>)
 8068d1e:	4293      	cmp	r3, r2
 8068d20:	d007      	beq.n	8068d32 <HAL_GPIO_Init+0x422>
 8068d22:	687b      	ldr	r3, [r7, #4]
 8068d24:	4a44      	ldr	r2, [pc, #272]	@ (8068e38 <HAL_GPIO_Init+0x528>)
 8068d26:	4293      	cmp	r3, r2
 8068d28:	d101      	bne.n	8068d2e <HAL_GPIO_Init+0x41e>
 8068d2a:	2304      	movs	r3, #4
 8068d2c:	e008      	b.n	8068d40 <HAL_GPIO_Init+0x430>
 8068d2e:	2307      	movs	r3, #7
 8068d30:	e006      	b.n	8068d40 <HAL_GPIO_Init+0x430>
 8068d32:	2303      	movs	r3, #3
 8068d34:	e004      	b.n	8068d40 <HAL_GPIO_Init+0x430>
 8068d36:	2302      	movs	r3, #2
 8068d38:	e002      	b.n	8068d40 <HAL_GPIO_Init+0x430>
 8068d3a:	2301      	movs	r3, #1
 8068d3c:	e000      	b.n	8068d40 <HAL_GPIO_Init+0x430>
 8068d3e:	2300      	movs	r3, #0
 8068d40:	69fa      	ldr	r2, [r7, #28]
 8068d42:	f002 0203 	and.w	r2, r2, #3
 8068d46:	0092      	lsls	r2, r2, #2
 8068d48:	4093      	lsls	r3, r2
 8068d4a:	69ba      	ldr	r2, [r7, #24]
 8068d4c:	4313      	orrs	r3, r2
 8068d4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8068d50:	4934      	ldr	r1, [pc, #208]	@ (8068e24 <HAL_GPIO_Init+0x514>)
 8068d52:	69fb      	ldr	r3, [r7, #28]
 8068d54:	089b      	lsrs	r3, r3, #2
 8068d56:	3302      	adds	r3, #2
 8068d58:	69ba      	ldr	r2, [r7, #24]
 8068d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8068d5e:	4b37      	ldr	r3, [pc, #220]	@ (8068e3c <HAL_GPIO_Init+0x52c>)
 8068d60:	689b      	ldr	r3, [r3, #8]
 8068d62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8068d64:	693b      	ldr	r3, [r7, #16]
 8068d66:	43db      	mvns	r3, r3
 8068d68:	69ba      	ldr	r2, [r7, #24]
 8068d6a:	4013      	ands	r3, r2
 8068d6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8068d6e:	683b      	ldr	r3, [r7, #0]
 8068d70:	685b      	ldr	r3, [r3, #4]
 8068d72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8068d76:	2b00      	cmp	r3, #0
 8068d78:	d003      	beq.n	8068d82 <HAL_GPIO_Init+0x472>
        {
          temp |= iocurrent;
 8068d7a:	69ba      	ldr	r2, [r7, #24]
 8068d7c:	693b      	ldr	r3, [r7, #16]
 8068d7e:	4313      	orrs	r3, r2
 8068d80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8068d82:	4a2e      	ldr	r2, [pc, #184]	@ (8068e3c <HAL_GPIO_Init+0x52c>)
 8068d84:	69bb      	ldr	r3, [r7, #24]
 8068d86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8068d88:	4b2c      	ldr	r3, [pc, #176]	@ (8068e3c <HAL_GPIO_Init+0x52c>)
 8068d8a:	68db      	ldr	r3, [r3, #12]
 8068d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8068d8e:	693b      	ldr	r3, [r7, #16]
 8068d90:	43db      	mvns	r3, r3
 8068d92:	69ba      	ldr	r2, [r7, #24]
 8068d94:	4013      	ands	r3, r2
 8068d96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8068d98:	683b      	ldr	r3, [r7, #0]
 8068d9a:	685b      	ldr	r3, [r3, #4]
 8068d9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8068da0:	2b00      	cmp	r3, #0
 8068da2:	d003      	beq.n	8068dac <HAL_GPIO_Init+0x49c>
        {
          temp |= iocurrent;
 8068da4:	69ba      	ldr	r2, [r7, #24]
 8068da6:	693b      	ldr	r3, [r7, #16]
 8068da8:	4313      	orrs	r3, r2
 8068daa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8068dac:	4a23      	ldr	r2, [pc, #140]	@ (8068e3c <HAL_GPIO_Init+0x52c>)
 8068dae:	69bb      	ldr	r3, [r7, #24]
 8068db0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8068db2:	4b22      	ldr	r3, [pc, #136]	@ (8068e3c <HAL_GPIO_Init+0x52c>)
 8068db4:	685b      	ldr	r3, [r3, #4]
 8068db6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8068db8:	693b      	ldr	r3, [r7, #16]
 8068dba:	43db      	mvns	r3, r3
 8068dbc:	69ba      	ldr	r2, [r7, #24]
 8068dbe:	4013      	ands	r3, r2
 8068dc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8068dc2:	683b      	ldr	r3, [r7, #0]
 8068dc4:	685b      	ldr	r3, [r3, #4]
 8068dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8068dca:	2b00      	cmp	r3, #0
 8068dcc:	d003      	beq.n	8068dd6 <HAL_GPIO_Init+0x4c6>
        {
          temp |= iocurrent;
 8068dce:	69ba      	ldr	r2, [r7, #24]
 8068dd0:	693b      	ldr	r3, [r7, #16]
 8068dd2:	4313      	orrs	r3, r2
 8068dd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8068dd6:	4a19      	ldr	r2, [pc, #100]	@ (8068e3c <HAL_GPIO_Init+0x52c>)
 8068dd8:	69bb      	ldr	r3, [r7, #24]
 8068dda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8068ddc:	4b17      	ldr	r3, [pc, #92]	@ (8068e3c <HAL_GPIO_Init+0x52c>)
 8068dde:	681b      	ldr	r3, [r3, #0]
 8068de0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8068de2:	693b      	ldr	r3, [r7, #16]
 8068de4:	43db      	mvns	r3, r3
 8068de6:	69ba      	ldr	r2, [r7, #24]
 8068de8:	4013      	ands	r3, r2
 8068dea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8068dec:	683b      	ldr	r3, [r7, #0]
 8068dee:	685b      	ldr	r3, [r3, #4]
 8068df0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8068df4:	2b00      	cmp	r3, #0
 8068df6:	d003      	beq.n	8068e00 <HAL_GPIO_Init+0x4f0>
        {
          temp |= iocurrent;
 8068df8:	69ba      	ldr	r2, [r7, #24]
 8068dfa:	693b      	ldr	r3, [r7, #16]
 8068dfc:	4313      	orrs	r3, r2
 8068dfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8068e00:	4a0e      	ldr	r2, [pc, #56]	@ (8068e3c <HAL_GPIO_Init+0x52c>)
 8068e02:	69bb      	ldr	r3, [r7, #24]
 8068e04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8068e06:	69fb      	ldr	r3, [r7, #28]
 8068e08:	3301      	adds	r3, #1
 8068e0a:	61fb      	str	r3, [r7, #28]
 8068e0c:	69fb      	ldr	r3, [r7, #28]
 8068e0e:	2b0f      	cmp	r3, #15
 8068e10:	f67f adfe 	bls.w	8068a10 <HAL_GPIO_Init+0x100>
      }
    }
  }
}
 8068e14:	bf00      	nop
 8068e16:	bf00      	nop
 8068e18:	3720      	adds	r7, #32
 8068e1a:	46bd      	mov	sp, r7
 8068e1c:	bd80      	pop	{r7, pc}
 8068e1e:	bf00      	nop
 8068e20:	40023800 	.word	0x40023800
 8068e24:	40013800 	.word	0x40013800
 8068e28:	40020000 	.word	0x40020000
 8068e2c:	40020400 	.word	0x40020400
 8068e30:	40020800 	.word	0x40020800
 8068e34:	40020c00 	.word	0x40020c00
 8068e38:	40021000 	.word	0x40021000
 8068e3c:	40013c00 	.word	0x40013c00

08068e40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8068e40:	b580      	push	{r7, lr}
 8068e42:	b084      	sub	sp, #16
 8068e44:	af00      	add	r7, sp, #0
 8068e46:	6078      	str	r0, [r7, #4]
 8068e48:	460b      	mov	r3, r1
 8068e4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8068e4c:	887b      	ldrh	r3, [r7, #2]
 8068e4e:	2b00      	cmp	r3, #0
 8068e50:	d104      	bne.n	8068e5c <HAL_GPIO_ReadPin+0x1c>
 8068e52:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 8068e56:	4809      	ldr	r0, [pc, #36]	@ (8068e7c <HAL_GPIO_ReadPin+0x3c>)
 8068e58:	f7fd faf5 	bl	8066446 <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8068e5c:	687b      	ldr	r3, [r7, #4]
 8068e5e:	691a      	ldr	r2, [r3, #16]
 8068e60:	887b      	ldrh	r3, [r7, #2]
 8068e62:	4013      	ands	r3, r2
 8068e64:	2b00      	cmp	r3, #0
 8068e66:	d002      	beq.n	8068e6e <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 8068e68:	2301      	movs	r3, #1
 8068e6a:	73fb      	strb	r3, [r7, #15]
 8068e6c:	e001      	b.n	8068e72 <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8068e6e:	2300      	movs	r3, #0
 8068e70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8068e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8068e74:	4618      	mov	r0, r3
 8068e76:	3710      	adds	r7, #16
 8068e78:	46bd      	mov	sp, r7
 8068e7a:	bd80      	pop	{r7, pc}
 8068e7c:	08071670 	.word	0x08071670

08068e80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8068e80:	b580      	push	{r7, lr}
 8068e82:	b082      	sub	sp, #8
 8068e84:	af00      	add	r7, sp, #0
 8068e86:	6078      	str	r0, [r7, #4]
 8068e88:	460b      	mov	r3, r1
 8068e8a:	807b      	strh	r3, [r7, #2]
 8068e8c:	4613      	mov	r3, r2
 8068e8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8068e90:	887b      	ldrh	r3, [r7, #2]
 8068e92:	2b00      	cmp	r3, #0
 8068e94:	d104      	bne.n	8068ea0 <HAL_GPIO_WritePin+0x20>
 8068e96:	f240 119d 	movw	r1, #413	@ 0x19d
 8068e9a:	480e      	ldr	r0, [pc, #56]	@ (8068ed4 <HAL_GPIO_WritePin+0x54>)
 8068e9c:	f7fd fad3 	bl	8066446 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8068ea0:	787b      	ldrb	r3, [r7, #1]
 8068ea2:	2b00      	cmp	r3, #0
 8068ea4:	d007      	beq.n	8068eb6 <HAL_GPIO_WritePin+0x36>
 8068ea6:	787b      	ldrb	r3, [r7, #1]
 8068ea8:	2b01      	cmp	r3, #1
 8068eaa:	d004      	beq.n	8068eb6 <HAL_GPIO_WritePin+0x36>
 8068eac:	f44f 71cf 	mov.w	r1, #414	@ 0x19e
 8068eb0:	4808      	ldr	r0, [pc, #32]	@ (8068ed4 <HAL_GPIO_WritePin+0x54>)
 8068eb2:	f7fd fac8 	bl	8066446 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8068eb6:	787b      	ldrb	r3, [r7, #1]
 8068eb8:	2b00      	cmp	r3, #0
 8068eba:	d003      	beq.n	8068ec4 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8068ebc:	887a      	ldrh	r2, [r7, #2]
 8068ebe:	687b      	ldr	r3, [r7, #4]
 8068ec0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8068ec2:	e003      	b.n	8068ecc <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8068ec4:	887b      	ldrh	r3, [r7, #2]
 8068ec6:	041a      	lsls	r2, r3, #16
 8068ec8:	687b      	ldr	r3, [r7, #4]
 8068eca:	619a      	str	r2, [r3, #24]
}
 8068ecc:	bf00      	nop
 8068ece:	3708      	adds	r7, #8
 8068ed0:	46bd      	mov	sp, r7
 8068ed2:	bd80      	pop	{r7, pc}
 8068ed4:	08071670 	.word	0x08071670

08068ed8 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8068ed8:	b580      	push	{r7, lr}
 8068eda:	b082      	sub	sp, #8
 8068edc:	af00      	add	r7, sp, #0
 8068ede:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
 8068ee0:	687b      	ldr	r3, [r7, #4]
 8068ee2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8068ee6:	d004      	beq.n	8068ef2 <HAL_PWR_EnableWakeUpPin+0x1a>
 8068ee8:	f44f 71ac 	mov.w	r1, #344	@ 0x158
 8068eec:	4806      	ldr	r0, [pc, #24]	@ (8068f08 <HAL_PWR_EnableWakeUpPin+0x30>)
 8068eee:	f7fd faaa 	bl	8066446 <assert_failed>

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 8068ef2:	4b06      	ldr	r3, [pc, #24]	@ (8068f0c <HAL_PWR_EnableWakeUpPin+0x34>)
 8068ef4:	685a      	ldr	r2, [r3, #4]
 8068ef6:	4905      	ldr	r1, [pc, #20]	@ (8068f0c <HAL_PWR_EnableWakeUpPin+0x34>)
 8068ef8:	687b      	ldr	r3, [r7, #4]
 8068efa:	4313      	orrs	r3, r2
 8068efc:	604b      	str	r3, [r1, #4]
}
 8068efe:	bf00      	nop
 8068f00:	3708      	adds	r7, #8
 8068f02:	46bd      	mov	sp, r7
 8068f04:	bd80      	pop	{r7, pc}
 8068f06:	bf00      	nop
 8068f08:	080716e4 	.word	0x080716e4
 8068f0c:	40007000 	.word	0x40007000

08068f10 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8068f10:	b480      	push	{r7}
 8068f12:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8068f14:	4b08      	ldr	r3, [pc, #32]	@ (8068f38 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8068f16:	681b      	ldr	r3, [r3, #0]
 8068f18:	4a07      	ldr	r2, [pc, #28]	@ (8068f38 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8068f1a:	f043 0302 	orr.w	r3, r3, #2
 8068f1e:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8068f20:	4b06      	ldr	r3, [pc, #24]	@ (8068f3c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8068f22:	691b      	ldr	r3, [r3, #16]
 8068f24:	4a05      	ldr	r2, [pc, #20]	@ (8068f3c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8068f26:	f043 0304 	orr.w	r3, r3, #4
 8068f2a:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8068f2c:	bf30      	wfi
}
 8068f2e:	bf00      	nop
 8068f30:	46bd      	mov	sp, r7
 8068f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8068f36:	4770      	bx	lr
 8068f38:	40007000 	.word	0x40007000
 8068f3c:	e000ed00 	.word	0xe000ed00

08068f40 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8068f40:	b580      	push	{r7, lr}
 8068f42:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8068f44:	4b06      	ldr	r3, [pc, #24]	@ (8068f60 <HAL_PWR_PVD_IRQHandler+0x20>)
 8068f46:	695b      	ldr	r3, [r3, #20]
 8068f48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8068f4c:	2b00      	cmp	r3, #0
 8068f4e:	d005      	beq.n	8068f5c <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8068f50:	f000 f808 	bl	8068f64 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8068f54:	4b02      	ldr	r3, [pc, #8]	@ (8068f60 <HAL_PWR_PVD_IRQHandler+0x20>)
 8068f56:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8068f5a:	615a      	str	r2, [r3, #20]
  }
}
 8068f5c:	bf00      	nop
 8068f5e:	bd80      	pop	{r7, pc}
 8068f60:	40013c00 	.word	0x40013c00

08068f64 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8068f64:	b480      	push	{r7}
 8068f66:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8068f68:	bf00      	nop
 8068f6a:	46bd      	mov	sp, r7
 8068f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8068f70:	4770      	bx	lr
	...

08068f74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8068f74:	b580      	push	{r7, lr}
 8068f76:	b086      	sub	sp, #24
 8068f78:	af00      	add	r7, sp, #0
 8068f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8068f7c:	687b      	ldr	r3, [r7, #4]
 8068f7e:	2b00      	cmp	r3, #0
 8068f80:	d101      	bne.n	8068f86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8068f82:	2301      	movs	r3, #1
 8068f84:	e318      	b.n	80695b8 <HAL_RCC_OscConfig+0x644>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8068f86:	687b      	ldr	r3, [r7, #4]
 8068f88:	681b      	ldr	r3, [r3, #0]
 8068f8a:	2b0f      	cmp	r3, #15
 8068f8c:	d903      	bls.n	8068f96 <HAL_RCC_OscConfig+0x22>
 8068f8e:	21e6      	movs	r1, #230	@ 0xe6
 8068f90:	4897      	ldr	r0, [pc, #604]	@ (80691f0 <HAL_RCC_OscConfig+0x27c>)
 8068f92:	f7fd fa58 	bl	8066446 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8068f96:	687b      	ldr	r3, [r7, #4]
 8068f98:	681b      	ldr	r3, [r3, #0]
 8068f9a:	f003 0301 	and.w	r3, r3, #1
 8068f9e:	2b00      	cmp	r3, #0
 8068fa0:	f000 8088 	beq.w	80690b4 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8068fa4:	687b      	ldr	r3, [r7, #4]
 8068fa6:	685b      	ldr	r3, [r3, #4]
 8068fa8:	2b00      	cmp	r3, #0
 8068faa:	d00d      	beq.n	8068fc8 <HAL_RCC_OscConfig+0x54>
 8068fac:	687b      	ldr	r3, [r7, #4]
 8068fae:	685b      	ldr	r3, [r3, #4]
 8068fb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8068fb4:	d008      	beq.n	8068fc8 <HAL_RCC_OscConfig+0x54>
 8068fb6:	687b      	ldr	r3, [r7, #4]
 8068fb8:	685b      	ldr	r3, [r3, #4]
 8068fba:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8068fbe:	d003      	beq.n	8068fc8 <HAL_RCC_OscConfig+0x54>
 8068fc0:	21eb      	movs	r1, #235	@ 0xeb
 8068fc2:	488b      	ldr	r0, [pc, #556]	@ (80691f0 <HAL_RCC_OscConfig+0x27c>)
 8068fc4:	f7fd fa3f 	bl	8066446 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8068fc8:	4b8a      	ldr	r3, [pc, #552]	@ (80691f4 <HAL_RCC_OscConfig+0x280>)
 8068fca:	689b      	ldr	r3, [r3, #8]
 8068fcc:	f003 030c 	and.w	r3, r3, #12
 8068fd0:	2b04      	cmp	r3, #4
 8068fd2:	d00c      	beq.n	8068fee <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8068fd4:	4b87      	ldr	r3, [pc, #540]	@ (80691f4 <HAL_RCC_OscConfig+0x280>)
 8068fd6:	689b      	ldr	r3, [r3, #8]
 8068fd8:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8068fdc:	2b08      	cmp	r3, #8
 8068fde:	d112      	bne.n	8069006 <HAL_RCC_OscConfig+0x92>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8068fe0:	4b84      	ldr	r3, [pc, #528]	@ (80691f4 <HAL_RCC_OscConfig+0x280>)
 8068fe2:	685b      	ldr	r3, [r3, #4]
 8068fe4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8068fe8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8068fec:	d10b      	bne.n	8069006 <HAL_RCC_OscConfig+0x92>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8068fee:	4b81      	ldr	r3, [pc, #516]	@ (80691f4 <HAL_RCC_OscConfig+0x280>)
 8068ff0:	681b      	ldr	r3, [r3, #0]
 8068ff2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8068ff6:	2b00      	cmp	r3, #0
 8068ff8:	d05b      	beq.n	80690b2 <HAL_RCC_OscConfig+0x13e>
 8068ffa:	687b      	ldr	r3, [r7, #4]
 8068ffc:	685b      	ldr	r3, [r3, #4]
 8068ffe:	2b00      	cmp	r3, #0
 8069000:	d157      	bne.n	80690b2 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8069002:	2301      	movs	r3, #1
 8069004:	e2d8      	b.n	80695b8 <HAL_RCC_OscConfig+0x644>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8069006:	687b      	ldr	r3, [r7, #4]
 8069008:	685b      	ldr	r3, [r3, #4]
 806900a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 806900e:	d106      	bne.n	806901e <HAL_RCC_OscConfig+0xaa>
 8069010:	4b78      	ldr	r3, [pc, #480]	@ (80691f4 <HAL_RCC_OscConfig+0x280>)
 8069012:	681b      	ldr	r3, [r3, #0]
 8069014:	4a77      	ldr	r2, [pc, #476]	@ (80691f4 <HAL_RCC_OscConfig+0x280>)
 8069016:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 806901a:	6013      	str	r3, [r2, #0]
 806901c:	e01d      	b.n	806905a <HAL_RCC_OscConfig+0xe6>
 806901e:	687b      	ldr	r3, [r7, #4]
 8069020:	685b      	ldr	r3, [r3, #4]
 8069022:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8069026:	d10c      	bne.n	8069042 <HAL_RCC_OscConfig+0xce>
 8069028:	4b72      	ldr	r3, [pc, #456]	@ (80691f4 <HAL_RCC_OscConfig+0x280>)
 806902a:	681b      	ldr	r3, [r3, #0]
 806902c:	4a71      	ldr	r2, [pc, #452]	@ (80691f4 <HAL_RCC_OscConfig+0x280>)
 806902e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8069032:	6013      	str	r3, [r2, #0]
 8069034:	4b6f      	ldr	r3, [pc, #444]	@ (80691f4 <HAL_RCC_OscConfig+0x280>)
 8069036:	681b      	ldr	r3, [r3, #0]
 8069038:	4a6e      	ldr	r2, [pc, #440]	@ (80691f4 <HAL_RCC_OscConfig+0x280>)
 806903a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 806903e:	6013      	str	r3, [r2, #0]
 8069040:	e00b      	b.n	806905a <HAL_RCC_OscConfig+0xe6>
 8069042:	4b6c      	ldr	r3, [pc, #432]	@ (80691f4 <HAL_RCC_OscConfig+0x280>)
 8069044:	681b      	ldr	r3, [r3, #0]
 8069046:	4a6b      	ldr	r2, [pc, #428]	@ (80691f4 <HAL_RCC_OscConfig+0x280>)
 8069048:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 806904c:	6013      	str	r3, [r2, #0]
 806904e:	4b69      	ldr	r3, [pc, #420]	@ (80691f4 <HAL_RCC_OscConfig+0x280>)
 8069050:	681b      	ldr	r3, [r3, #0]
 8069052:	4a68      	ldr	r2, [pc, #416]	@ (80691f4 <HAL_RCC_OscConfig+0x280>)
 8069054:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8069058:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 806905a:	687b      	ldr	r3, [r7, #4]
 806905c:	685b      	ldr	r3, [r3, #4]
 806905e:	2b00      	cmp	r3, #0
 8069060:	d013      	beq.n	806908a <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8069062:	f7fd ff51 	bl	8066f08 <HAL_GetTick>
 8069066:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8069068:	e008      	b.n	806907c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 806906a:	f7fd ff4d 	bl	8066f08 <HAL_GetTick>
 806906e:	4602      	mov	r2, r0
 8069070:	693b      	ldr	r3, [r7, #16]
 8069072:	1ad3      	subs	r3, r2, r3
 8069074:	2b64      	cmp	r3, #100	@ 0x64
 8069076:	d901      	bls.n	806907c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8069078:	2303      	movs	r3, #3
 806907a:	e29d      	b.n	80695b8 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 806907c:	4b5d      	ldr	r3, [pc, #372]	@ (80691f4 <HAL_RCC_OscConfig+0x280>)
 806907e:	681b      	ldr	r3, [r3, #0]
 8069080:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8069084:	2b00      	cmp	r3, #0
 8069086:	d0f0      	beq.n	806906a <HAL_RCC_OscConfig+0xf6>
 8069088:	e014      	b.n	80690b4 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 806908a:	f7fd ff3d 	bl	8066f08 <HAL_GetTick>
 806908e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8069090:	e008      	b.n	80690a4 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8069092:	f7fd ff39 	bl	8066f08 <HAL_GetTick>
 8069096:	4602      	mov	r2, r0
 8069098:	693b      	ldr	r3, [r7, #16]
 806909a:	1ad3      	subs	r3, r2, r3
 806909c:	2b64      	cmp	r3, #100	@ 0x64
 806909e:	d901      	bls.n	80690a4 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 80690a0:	2303      	movs	r3, #3
 80690a2:	e289      	b.n	80695b8 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80690a4:	4b53      	ldr	r3, [pc, #332]	@ (80691f4 <HAL_RCC_OscConfig+0x280>)
 80690a6:	681b      	ldr	r3, [r3, #0]
 80690a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80690ac:	2b00      	cmp	r3, #0
 80690ae:	d1f0      	bne.n	8069092 <HAL_RCC_OscConfig+0x11e>
 80690b0:	e000      	b.n	80690b4 <HAL_RCC_OscConfig+0x140>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80690b2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80690b4:	687b      	ldr	r3, [r7, #4]
 80690b6:	681b      	ldr	r3, [r3, #0]
 80690b8:	f003 0302 	and.w	r3, r3, #2
 80690bc:	2b00      	cmp	r3, #0
 80690be:	d079      	beq.n	80691b4 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80690c0:	687b      	ldr	r3, [r7, #4]
 80690c2:	68db      	ldr	r3, [r3, #12]
 80690c4:	2b00      	cmp	r3, #0
 80690c6:	d008      	beq.n	80690da <HAL_RCC_OscConfig+0x166>
 80690c8:	687b      	ldr	r3, [r7, #4]
 80690ca:	68db      	ldr	r3, [r3, #12]
 80690cc:	2b01      	cmp	r3, #1
 80690ce:	d004      	beq.n	80690da <HAL_RCC_OscConfig+0x166>
 80690d0:	f240 111d 	movw	r1, #285	@ 0x11d
 80690d4:	4846      	ldr	r0, [pc, #280]	@ (80691f0 <HAL_RCC_OscConfig+0x27c>)
 80690d6:	f7fd f9b6 	bl	8066446 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80690da:	687b      	ldr	r3, [r7, #4]
 80690dc:	691b      	ldr	r3, [r3, #16]
 80690de:	2b1f      	cmp	r3, #31
 80690e0:	d904      	bls.n	80690ec <HAL_RCC_OscConfig+0x178>
 80690e2:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 80690e6:	4842      	ldr	r0, [pc, #264]	@ (80691f0 <HAL_RCC_OscConfig+0x27c>)
 80690e8:	f7fd f9ad 	bl	8066446 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80690ec:	4b41      	ldr	r3, [pc, #260]	@ (80691f4 <HAL_RCC_OscConfig+0x280>)
 80690ee:	689b      	ldr	r3, [r3, #8]
 80690f0:	f003 030c 	and.w	r3, r3, #12
 80690f4:	2b00      	cmp	r3, #0
 80690f6:	d00b      	beq.n	8069110 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80690f8:	4b3e      	ldr	r3, [pc, #248]	@ (80691f4 <HAL_RCC_OscConfig+0x280>)
 80690fa:	689b      	ldr	r3, [r3, #8]
 80690fc:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8069100:	2b08      	cmp	r3, #8
 8069102:	d11c      	bne.n	806913e <HAL_RCC_OscConfig+0x1ca>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8069104:	4b3b      	ldr	r3, [pc, #236]	@ (80691f4 <HAL_RCC_OscConfig+0x280>)
 8069106:	685b      	ldr	r3, [r3, #4]
 8069108:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 806910c:	2b00      	cmp	r3, #0
 806910e:	d116      	bne.n	806913e <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8069110:	4b38      	ldr	r3, [pc, #224]	@ (80691f4 <HAL_RCC_OscConfig+0x280>)
 8069112:	681b      	ldr	r3, [r3, #0]
 8069114:	f003 0302 	and.w	r3, r3, #2
 8069118:	2b00      	cmp	r3, #0
 806911a:	d005      	beq.n	8069128 <HAL_RCC_OscConfig+0x1b4>
 806911c:	687b      	ldr	r3, [r7, #4]
 806911e:	68db      	ldr	r3, [r3, #12]
 8069120:	2b01      	cmp	r3, #1
 8069122:	d001      	beq.n	8069128 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8069124:	2301      	movs	r3, #1
 8069126:	e247      	b.n	80695b8 <HAL_RCC_OscConfig+0x644>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8069128:	4b32      	ldr	r3, [pc, #200]	@ (80691f4 <HAL_RCC_OscConfig+0x280>)
 806912a:	681b      	ldr	r3, [r3, #0]
 806912c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8069130:	687b      	ldr	r3, [r7, #4]
 8069132:	691b      	ldr	r3, [r3, #16]
 8069134:	00db      	lsls	r3, r3, #3
 8069136:	492f      	ldr	r1, [pc, #188]	@ (80691f4 <HAL_RCC_OscConfig+0x280>)
 8069138:	4313      	orrs	r3, r2
 806913a:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 806913c:	e03a      	b.n	80691b4 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 806913e:	687b      	ldr	r3, [r7, #4]
 8069140:	68db      	ldr	r3, [r3, #12]
 8069142:	2b00      	cmp	r3, #0
 8069144:	d020      	beq.n	8069188 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8069146:	4b2c      	ldr	r3, [pc, #176]	@ (80691f8 <HAL_RCC_OscConfig+0x284>)
 8069148:	2201      	movs	r2, #1
 806914a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 806914c:	f7fd fedc 	bl	8066f08 <HAL_GetTick>
 8069150:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8069152:	e008      	b.n	8069166 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8069154:	f7fd fed8 	bl	8066f08 <HAL_GetTick>
 8069158:	4602      	mov	r2, r0
 806915a:	693b      	ldr	r3, [r7, #16]
 806915c:	1ad3      	subs	r3, r2, r3
 806915e:	2b02      	cmp	r3, #2
 8069160:	d901      	bls.n	8069166 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8069162:	2303      	movs	r3, #3
 8069164:	e228      	b.n	80695b8 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8069166:	4b23      	ldr	r3, [pc, #140]	@ (80691f4 <HAL_RCC_OscConfig+0x280>)
 8069168:	681b      	ldr	r3, [r3, #0]
 806916a:	f003 0302 	and.w	r3, r3, #2
 806916e:	2b00      	cmp	r3, #0
 8069170:	d0f0      	beq.n	8069154 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8069172:	4b20      	ldr	r3, [pc, #128]	@ (80691f4 <HAL_RCC_OscConfig+0x280>)
 8069174:	681b      	ldr	r3, [r3, #0]
 8069176:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 806917a:	687b      	ldr	r3, [r7, #4]
 806917c:	691b      	ldr	r3, [r3, #16]
 806917e:	00db      	lsls	r3, r3, #3
 8069180:	491c      	ldr	r1, [pc, #112]	@ (80691f4 <HAL_RCC_OscConfig+0x280>)
 8069182:	4313      	orrs	r3, r2
 8069184:	600b      	str	r3, [r1, #0]
 8069186:	e015      	b.n	80691b4 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8069188:	4b1b      	ldr	r3, [pc, #108]	@ (80691f8 <HAL_RCC_OscConfig+0x284>)
 806918a:	2200      	movs	r2, #0
 806918c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 806918e:	f7fd febb 	bl	8066f08 <HAL_GetTick>
 8069192:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8069194:	e008      	b.n	80691a8 <HAL_RCC_OscConfig+0x234>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8069196:	f7fd feb7 	bl	8066f08 <HAL_GetTick>
 806919a:	4602      	mov	r2, r0
 806919c:	693b      	ldr	r3, [r7, #16]
 806919e:	1ad3      	subs	r3, r2, r3
 80691a0:	2b02      	cmp	r3, #2
 80691a2:	d901      	bls.n	80691a8 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 80691a4:	2303      	movs	r3, #3
 80691a6:	e207      	b.n	80695b8 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80691a8:	4b12      	ldr	r3, [pc, #72]	@ (80691f4 <HAL_RCC_OscConfig+0x280>)
 80691aa:	681b      	ldr	r3, [r3, #0]
 80691ac:	f003 0302 	and.w	r3, r3, #2
 80691b0:	2b00      	cmp	r3, #0
 80691b2:	d1f0      	bne.n	8069196 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80691b4:	687b      	ldr	r3, [r7, #4]
 80691b6:	681b      	ldr	r3, [r3, #0]
 80691b8:	f003 0308 	and.w	r3, r3, #8
 80691bc:	2b00      	cmp	r3, #0
 80691be:	d045      	beq.n	806924c <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80691c0:	687b      	ldr	r3, [r7, #4]
 80691c2:	695b      	ldr	r3, [r3, #20]
 80691c4:	2b00      	cmp	r3, #0
 80691c6:	d008      	beq.n	80691da <HAL_RCC_OscConfig+0x266>
 80691c8:	687b      	ldr	r3, [r7, #4]
 80691ca:	695b      	ldr	r3, [r3, #20]
 80691cc:	2b01      	cmp	r3, #1
 80691ce:	d004      	beq.n	80691da <HAL_RCC_OscConfig+0x266>
 80691d0:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 80691d4:	4806      	ldr	r0, [pc, #24]	@ (80691f0 <HAL_RCC_OscConfig+0x27c>)
 80691d6:	f7fd f936 	bl	8066446 <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80691da:	687b      	ldr	r3, [r7, #4]
 80691dc:	695b      	ldr	r3, [r3, #20]
 80691de:	2b00      	cmp	r3, #0
 80691e0:	d01e      	beq.n	8069220 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80691e2:	4b06      	ldr	r3, [pc, #24]	@ (80691fc <HAL_RCC_OscConfig+0x288>)
 80691e4:	2201      	movs	r2, #1
 80691e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80691e8:	f7fd fe8e 	bl	8066f08 <HAL_GetTick>
 80691ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80691ee:	e010      	b.n	8069212 <HAL_RCC_OscConfig+0x29e>
 80691f0:	08071758 	.word	0x08071758
 80691f4:	40023800 	.word	0x40023800
 80691f8:	42470000 	.word	0x42470000
 80691fc:	42470e80 	.word	0x42470e80
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8069200:	f7fd fe82 	bl	8066f08 <HAL_GetTick>
 8069204:	4602      	mov	r2, r0
 8069206:	693b      	ldr	r3, [r7, #16]
 8069208:	1ad3      	subs	r3, r2, r3
 806920a:	2b02      	cmp	r3, #2
 806920c:	d901      	bls.n	8069212 <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 806920e:	2303      	movs	r3, #3
 8069210:	e1d2      	b.n	80695b8 <HAL_RCC_OscConfig+0x644>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8069212:	4b5e      	ldr	r3, [pc, #376]	@ (806938c <HAL_RCC_OscConfig+0x418>)
 8069214:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8069216:	f003 0302 	and.w	r3, r3, #2
 806921a:	2b00      	cmp	r3, #0
 806921c:	d0f0      	beq.n	8069200 <HAL_RCC_OscConfig+0x28c>
 806921e:	e015      	b.n	806924c <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8069220:	4b5b      	ldr	r3, [pc, #364]	@ (8069390 <HAL_RCC_OscConfig+0x41c>)
 8069222:	2200      	movs	r2, #0
 8069224:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8069226:	f7fd fe6f 	bl	8066f08 <HAL_GetTick>
 806922a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 806922c:	e008      	b.n	8069240 <HAL_RCC_OscConfig+0x2cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 806922e:	f7fd fe6b 	bl	8066f08 <HAL_GetTick>
 8069232:	4602      	mov	r2, r0
 8069234:	693b      	ldr	r3, [r7, #16]
 8069236:	1ad3      	subs	r3, r2, r3
 8069238:	2b02      	cmp	r3, #2
 806923a:	d901      	bls.n	8069240 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 806923c:	2303      	movs	r3, #3
 806923e:	e1bb      	b.n	80695b8 <HAL_RCC_OscConfig+0x644>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8069240:	4b52      	ldr	r3, [pc, #328]	@ (806938c <HAL_RCC_OscConfig+0x418>)
 8069242:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8069244:	f003 0302 	and.w	r3, r3, #2
 8069248:	2b00      	cmp	r3, #0
 806924a:	d1f0      	bne.n	806922e <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 806924c:	687b      	ldr	r3, [r7, #4]
 806924e:	681b      	ldr	r3, [r3, #0]
 8069250:	f003 0304 	and.w	r3, r3, #4
 8069254:	2b00      	cmp	r3, #0
 8069256:	f000 80b0 	beq.w	80693ba <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 806925a:	2300      	movs	r3, #0
 806925c:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 806925e:	687b      	ldr	r3, [r7, #4]
 8069260:	689b      	ldr	r3, [r3, #8]
 8069262:	2b00      	cmp	r3, #0
 8069264:	d00c      	beq.n	8069280 <HAL_RCC_OscConfig+0x30c>
 8069266:	687b      	ldr	r3, [r7, #4]
 8069268:	689b      	ldr	r3, [r3, #8]
 806926a:	2b01      	cmp	r3, #1
 806926c:	d008      	beq.n	8069280 <HAL_RCC_OscConfig+0x30c>
 806926e:	687b      	ldr	r3, [r7, #4]
 8069270:	689b      	ldr	r3, [r3, #8]
 8069272:	2b05      	cmp	r3, #5
 8069274:	d004      	beq.n	8069280 <HAL_RCC_OscConfig+0x30c>
 8069276:	f44f 71c5 	mov.w	r1, #394	@ 0x18a
 806927a:	4846      	ldr	r0, [pc, #280]	@ (8069394 <HAL_RCC_OscConfig+0x420>)
 806927c:	f7fd f8e3 	bl	8066446 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8069280:	4b42      	ldr	r3, [pc, #264]	@ (806938c <HAL_RCC_OscConfig+0x418>)
 8069282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8069284:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8069288:	2b00      	cmp	r3, #0
 806928a:	d10f      	bne.n	80692ac <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 806928c:	2300      	movs	r3, #0
 806928e:	60bb      	str	r3, [r7, #8]
 8069290:	4b3e      	ldr	r3, [pc, #248]	@ (806938c <HAL_RCC_OscConfig+0x418>)
 8069292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8069294:	4a3d      	ldr	r2, [pc, #244]	@ (806938c <HAL_RCC_OscConfig+0x418>)
 8069296:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 806929a:	6413      	str	r3, [r2, #64]	@ 0x40
 806929c:	4b3b      	ldr	r3, [pc, #236]	@ (806938c <HAL_RCC_OscConfig+0x418>)
 806929e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80692a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80692a4:	60bb      	str	r3, [r7, #8]
 80692a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80692a8:	2301      	movs	r3, #1
 80692aa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80692ac:	4b3a      	ldr	r3, [pc, #232]	@ (8069398 <HAL_RCC_OscConfig+0x424>)
 80692ae:	681b      	ldr	r3, [r3, #0]
 80692b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80692b4:	2b00      	cmp	r3, #0
 80692b6:	d118      	bne.n	80692ea <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80692b8:	4b37      	ldr	r3, [pc, #220]	@ (8069398 <HAL_RCC_OscConfig+0x424>)
 80692ba:	681b      	ldr	r3, [r3, #0]
 80692bc:	4a36      	ldr	r2, [pc, #216]	@ (8069398 <HAL_RCC_OscConfig+0x424>)
 80692be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80692c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80692c4:	f7fd fe20 	bl	8066f08 <HAL_GetTick>
 80692c8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80692ca:	e008      	b.n	80692de <HAL_RCC_OscConfig+0x36a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80692cc:	f7fd fe1c 	bl	8066f08 <HAL_GetTick>
 80692d0:	4602      	mov	r2, r0
 80692d2:	693b      	ldr	r3, [r7, #16]
 80692d4:	1ad3      	subs	r3, r2, r3
 80692d6:	2b02      	cmp	r3, #2
 80692d8:	d901      	bls.n	80692de <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 80692da:	2303      	movs	r3, #3
 80692dc:	e16c      	b.n	80695b8 <HAL_RCC_OscConfig+0x644>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80692de:	4b2e      	ldr	r3, [pc, #184]	@ (8069398 <HAL_RCC_OscConfig+0x424>)
 80692e0:	681b      	ldr	r3, [r3, #0]
 80692e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80692e6:	2b00      	cmp	r3, #0
 80692e8:	d0f0      	beq.n	80692cc <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80692ea:	687b      	ldr	r3, [r7, #4]
 80692ec:	689b      	ldr	r3, [r3, #8]
 80692ee:	2b01      	cmp	r3, #1
 80692f0:	d106      	bne.n	8069300 <HAL_RCC_OscConfig+0x38c>
 80692f2:	4b26      	ldr	r3, [pc, #152]	@ (806938c <HAL_RCC_OscConfig+0x418>)
 80692f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80692f6:	4a25      	ldr	r2, [pc, #148]	@ (806938c <HAL_RCC_OscConfig+0x418>)
 80692f8:	f043 0301 	orr.w	r3, r3, #1
 80692fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80692fe:	e01c      	b.n	806933a <HAL_RCC_OscConfig+0x3c6>
 8069300:	687b      	ldr	r3, [r7, #4]
 8069302:	689b      	ldr	r3, [r3, #8]
 8069304:	2b05      	cmp	r3, #5
 8069306:	d10c      	bne.n	8069322 <HAL_RCC_OscConfig+0x3ae>
 8069308:	4b20      	ldr	r3, [pc, #128]	@ (806938c <HAL_RCC_OscConfig+0x418>)
 806930a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 806930c:	4a1f      	ldr	r2, [pc, #124]	@ (806938c <HAL_RCC_OscConfig+0x418>)
 806930e:	f043 0304 	orr.w	r3, r3, #4
 8069312:	6713      	str	r3, [r2, #112]	@ 0x70
 8069314:	4b1d      	ldr	r3, [pc, #116]	@ (806938c <HAL_RCC_OscConfig+0x418>)
 8069316:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8069318:	4a1c      	ldr	r2, [pc, #112]	@ (806938c <HAL_RCC_OscConfig+0x418>)
 806931a:	f043 0301 	orr.w	r3, r3, #1
 806931e:	6713      	str	r3, [r2, #112]	@ 0x70
 8069320:	e00b      	b.n	806933a <HAL_RCC_OscConfig+0x3c6>
 8069322:	4b1a      	ldr	r3, [pc, #104]	@ (806938c <HAL_RCC_OscConfig+0x418>)
 8069324:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8069326:	4a19      	ldr	r2, [pc, #100]	@ (806938c <HAL_RCC_OscConfig+0x418>)
 8069328:	f023 0301 	bic.w	r3, r3, #1
 806932c:	6713      	str	r3, [r2, #112]	@ 0x70
 806932e:	4b17      	ldr	r3, [pc, #92]	@ (806938c <HAL_RCC_OscConfig+0x418>)
 8069330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8069332:	4a16      	ldr	r2, [pc, #88]	@ (806938c <HAL_RCC_OscConfig+0x418>)
 8069334:	f023 0304 	bic.w	r3, r3, #4
 8069338:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 806933a:	687b      	ldr	r3, [r7, #4]
 806933c:	689b      	ldr	r3, [r3, #8]
 806933e:	2b00      	cmp	r3, #0
 8069340:	d015      	beq.n	806936e <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8069342:	f7fd fde1 	bl	8066f08 <HAL_GetTick>
 8069346:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8069348:	e00a      	b.n	8069360 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 806934a:	f7fd fddd 	bl	8066f08 <HAL_GetTick>
 806934e:	4602      	mov	r2, r0
 8069350:	693b      	ldr	r3, [r7, #16]
 8069352:	1ad3      	subs	r3, r2, r3
 8069354:	f241 3288 	movw	r2, #5000	@ 0x1388
 8069358:	4293      	cmp	r3, r2
 806935a:	d901      	bls.n	8069360 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 806935c:	2303      	movs	r3, #3
 806935e:	e12b      	b.n	80695b8 <HAL_RCC_OscConfig+0x644>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8069360:	4b0a      	ldr	r3, [pc, #40]	@ (806938c <HAL_RCC_OscConfig+0x418>)
 8069362:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8069364:	f003 0302 	and.w	r3, r3, #2
 8069368:	2b00      	cmp	r3, #0
 806936a:	d0ee      	beq.n	806934a <HAL_RCC_OscConfig+0x3d6>
 806936c:	e01c      	b.n	80693a8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 806936e:	f7fd fdcb 	bl	8066f08 <HAL_GetTick>
 8069372:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8069374:	e012      	b.n	806939c <HAL_RCC_OscConfig+0x428>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8069376:	f7fd fdc7 	bl	8066f08 <HAL_GetTick>
 806937a:	4602      	mov	r2, r0
 806937c:	693b      	ldr	r3, [r7, #16]
 806937e:	1ad3      	subs	r3, r2, r3
 8069380:	f241 3288 	movw	r2, #5000	@ 0x1388
 8069384:	4293      	cmp	r3, r2
 8069386:	d909      	bls.n	806939c <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8069388:	2303      	movs	r3, #3
 806938a:	e115      	b.n	80695b8 <HAL_RCC_OscConfig+0x644>
 806938c:	40023800 	.word	0x40023800
 8069390:	42470e80 	.word	0x42470e80
 8069394:	08071758 	.word	0x08071758
 8069398:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 806939c:	4b88      	ldr	r3, [pc, #544]	@ (80695c0 <HAL_RCC_OscConfig+0x64c>)
 806939e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80693a0:	f003 0302 	and.w	r3, r3, #2
 80693a4:	2b00      	cmp	r3, #0
 80693a6:	d1e6      	bne.n	8069376 <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80693a8:	7dfb      	ldrb	r3, [r7, #23]
 80693aa:	2b01      	cmp	r3, #1
 80693ac:	d105      	bne.n	80693ba <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80693ae:	4b84      	ldr	r3, [pc, #528]	@ (80695c0 <HAL_RCC_OscConfig+0x64c>)
 80693b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80693b2:	4a83      	ldr	r2, [pc, #524]	@ (80695c0 <HAL_RCC_OscConfig+0x64c>)
 80693b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80693b8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80693ba:	687b      	ldr	r3, [r7, #4]
 80693bc:	699b      	ldr	r3, [r3, #24]
 80693be:	2b00      	cmp	r3, #0
 80693c0:	d00c      	beq.n	80693dc <HAL_RCC_OscConfig+0x468>
 80693c2:	687b      	ldr	r3, [r7, #4]
 80693c4:	699b      	ldr	r3, [r3, #24]
 80693c6:	2b01      	cmp	r3, #1
 80693c8:	d008      	beq.n	80693dc <HAL_RCC_OscConfig+0x468>
 80693ca:	687b      	ldr	r3, [r7, #4]
 80693cc:	699b      	ldr	r3, [r3, #24]
 80693ce:	2b02      	cmp	r3, #2
 80693d0:	d004      	beq.n	80693dc <HAL_RCC_OscConfig+0x468>
 80693d2:	f240 11cd 	movw	r1, #461	@ 0x1cd
 80693d6:	487b      	ldr	r0, [pc, #492]	@ (80695c4 <HAL_RCC_OscConfig+0x650>)
 80693d8:	f7fd f835 	bl	8066446 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80693dc:	687b      	ldr	r3, [r7, #4]
 80693de:	699b      	ldr	r3, [r3, #24]
 80693e0:	2b00      	cmp	r3, #0
 80693e2:	f000 80e8 	beq.w	80695b6 <HAL_RCC_OscConfig+0x642>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80693e6:	4b76      	ldr	r3, [pc, #472]	@ (80695c0 <HAL_RCC_OscConfig+0x64c>)
 80693e8:	689b      	ldr	r3, [r3, #8]
 80693ea:	f003 030c 	and.w	r3, r3, #12
 80693ee:	2b08      	cmp	r3, #8
 80693f0:	f000 80a9 	beq.w	8069546 <HAL_RCC_OscConfig+0x5d2>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80693f4:	687b      	ldr	r3, [r7, #4]
 80693f6:	699b      	ldr	r3, [r3, #24]
 80693f8:	2b02      	cmp	r3, #2
 80693fa:	f040 808d 	bne.w	8069518 <HAL_RCC_OscConfig+0x5a4>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80693fe:	687b      	ldr	r3, [r7, #4]
 8069400:	69db      	ldr	r3, [r3, #28]
 8069402:	2b00      	cmp	r3, #0
 8069404:	d009      	beq.n	806941a <HAL_RCC_OscConfig+0x4a6>
 8069406:	687b      	ldr	r3, [r7, #4]
 8069408:	69db      	ldr	r3, [r3, #28]
 806940a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 806940e:	d004      	beq.n	806941a <HAL_RCC_OscConfig+0x4a6>
 8069410:	f44f 71eb 	mov.w	r1, #470	@ 0x1d6
 8069414:	486b      	ldr	r0, [pc, #428]	@ (80695c4 <HAL_RCC_OscConfig+0x650>)
 8069416:	f7fd f816 	bl	8066446 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 806941a:	687b      	ldr	r3, [r7, #4]
 806941c:	6a1b      	ldr	r3, [r3, #32]
 806941e:	2b01      	cmp	r3, #1
 8069420:	d903      	bls.n	806942a <HAL_RCC_OscConfig+0x4b6>
 8069422:	687b      	ldr	r3, [r7, #4]
 8069424:	6a1b      	ldr	r3, [r3, #32]
 8069426:	2b3f      	cmp	r3, #63	@ 0x3f
 8069428:	d904      	bls.n	8069434 <HAL_RCC_OscConfig+0x4c0>
 806942a:	f240 11d7 	movw	r1, #471	@ 0x1d7
 806942e:	4865      	ldr	r0, [pc, #404]	@ (80695c4 <HAL_RCC_OscConfig+0x650>)
 8069430:	f7fd f809 	bl	8066446 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8069434:	687b      	ldr	r3, [r7, #4]
 8069436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8069438:	2b31      	cmp	r3, #49	@ 0x31
 806943a:	d904      	bls.n	8069446 <HAL_RCC_OscConfig+0x4d2>
 806943c:	687b      	ldr	r3, [r7, #4]
 806943e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8069440:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 8069444:	d904      	bls.n	8069450 <HAL_RCC_OscConfig+0x4dc>
 8069446:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
 806944a:	485e      	ldr	r0, [pc, #376]	@ (80695c4 <HAL_RCC_OscConfig+0x650>)
 806944c:	f7fc fffb 	bl	8066446 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8069450:	687b      	ldr	r3, [r7, #4]
 8069452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8069454:	2b02      	cmp	r3, #2
 8069456:	d010      	beq.n	806947a <HAL_RCC_OscConfig+0x506>
 8069458:	687b      	ldr	r3, [r7, #4]
 806945a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 806945c:	2b04      	cmp	r3, #4
 806945e:	d00c      	beq.n	806947a <HAL_RCC_OscConfig+0x506>
 8069460:	687b      	ldr	r3, [r7, #4]
 8069462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8069464:	2b06      	cmp	r3, #6
 8069466:	d008      	beq.n	806947a <HAL_RCC_OscConfig+0x506>
 8069468:	687b      	ldr	r3, [r7, #4]
 806946a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 806946c:	2b08      	cmp	r3, #8
 806946e:	d004      	beq.n	806947a <HAL_RCC_OscConfig+0x506>
 8069470:	f240 11d9 	movw	r1, #473	@ 0x1d9
 8069474:	4853      	ldr	r0, [pc, #332]	@ (80695c4 <HAL_RCC_OscConfig+0x650>)
 8069476:	f7fc ffe6 	bl	8066446 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 806947a:	687b      	ldr	r3, [r7, #4]
 806947c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 806947e:	2b01      	cmp	r3, #1
 8069480:	d903      	bls.n	806948a <HAL_RCC_OscConfig+0x516>
 8069482:	687b      	ldr	r3, [r7, #4]
 8069484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8069486:	2b0f      	cmp	r3, #15
 8069488:	d904      	bls.n	8069494 <HAL_RCC_OscConfig+0x520>
 806948a:	f44f 71ed 	mov.w	r1, #474	@ 0x1da
 806948e:	484d      	ldr	r0, [pc, #308]	@ (80695c4 <HAL_RCC_OscConfig+0x650>)
 8069490:	f7fc ffd9 	bl	8066446 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8069494:	4b4c      	ldr	r3, [pc, #304]	@ (80695c8 <HAL_RCC_OscConfig+0x654>)
 8069496:	2200      	movs	r2, #0
 8069498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 806949a:	f7fd fd35 	bl	8066f08 <HAL_GetTick>
 806949e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80694a0:	e008      	b.n	80694b4 <HAL_RCC_OscConfig+0x540>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80694a2:	f7fd fd31 	bl	8066f08 <HAL_GetTick>
 80694a6:	4602      	mov	r2, r0
 80694a8:	693b      	ldr	r3, [r7, #16]
 80694aa:	1ad3      	subs	r3, r2, r3
 80694ac:	2b02      	cmp	r3, #2
 80694ae:	d901      	bls.n	80694b4 <HAL_RCC_OscConfig+0x540>
          {
            return HAL_TIMEOUT;
 80694b0:	2303      	movs	r3, #3
 80694b2:	e081      	b.n	80695b8 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80694b4:	4b42      	ldr	r3, [pc, #264]	@ (80695c0 <HAL_RCC_OscConfig+0x64c>)
 80694b6:	681b      	ldr	r3, [r3, #0]
 80694b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80694bc:	2b00      	cmp	r3, #0
 80694be:	d1f0      	bne.n	80694a2 <HAL_RCC_OscConfig+0x52e>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80694c0:	687b      	ldr	r3, [r7, #4]
 80694c2:	69da      	ldr	r2, [r3, #28]
 80694c4:	687b      	ldr	r3, [r7, #4]
 80694c6:	6a1b      	ldr	r3, [r3, #32]
 80694c8:	431a      	orrs	r2, r3
 80694ca:	687b      	ldr	r3, [r7, #4]
 80694cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80694ce:	019b      	lsls	r3, r3, #6
 80694d0:	431a      	orrs	r2, r3
 80694d2:	687b      	ldr	r3, [r7, #4]
 80694d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80694d6:	085b      	lsrs	r3, r3, #1
 80694d8:	3b01      	subs	r3, #1
 80694da:	041b      	lsls	r3, r3, #16
 80694dc:	431a      	orrs	r2, r3
 80694de:	687b      	ldr	r3, [r7, #4]
 80694e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80694e2:	061b      	lsls	r3, r3, #24
 80694e4:	4936      	ldr	r1, [pc, #216]	@ (80695c0 <HAL_RCC_OscConfig+0x64c>)
 80694e6:	4313      	orrs	r3, r2
 80694e8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80694ea:	4b37      	ldr	r3, [pc, #220]	@ (80695c8 <HAL_RCC_OscConfig+0x654>)
 80694ec:	2201      	movs	r2, #1
 80694ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80694f0:	f7fd fd0a 	bl	8066f08 <HAL_GetTick>
 80694f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80694f6:	e008      	b.n	806950a <HAL_RCC_OscConfig+0x596>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80694f8:	f7fd fd06 	bl	8066f08 <HAL_GetTick>
 80694fc:	4602      	mov	r2, r0
 80694fe:	693b      	ldr	r3, [r7, #16]
 8069500:	1ad3      	subs	r3, r2, r3
 8069502:	2b02      	cmp	r3, #2
 8069504:	d901      	bls.n	806950a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8069506:	2303      	movs	r3, #3
 8069508:	e056      	b.n	80695b8 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 806950a:	4b2d      	ldr	r3, [pc, #180]	@ (80695c0 <HAL_RCC_OscConfig+0x64c>)
 806950c:	681b      	ldr	r3, [r3, #0]
 806950e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8069512:	2b00      	cmp	r3, #0
 8069514:	d0f0      	beq.n	80694f8 <HAL_RCC_OscConfig+0x584>
 8069516:	e04e      	b.n	80695b6 <HAL_RCC_OscConfig+0x642>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8069518:	4b2b      	ldr	r3, [pc, #172]	@ (80695c8 <HAL_RCC_OscConfig+0x654>)
 806951a:	2200      	movs	r2, #0
 806951c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 806951e:	f7fd fcf3 	bl	8066f08 <HAL_GetTick>
 8069522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8069524:	e008      	b.n	8069538 <HAL_RCC_OscConfig+0x5c4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8069526:	f7fd fcef 	bl	8066f08 <HAL_GetTick>
 806952a:	4602      	mov	r2, r0
 806952c:	693b      	ldr	r3, [r7, #16]
 806952e:	1ad3      	subs	r3, r2, r3
 8069530:	2b02      	cmp	r3, #2
 8069532:	d901      	bls.n	8069538 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8069534:	2303      	movs	r3, #3
 8069536:	e03f      	b.n	80695b8 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8069538:	4b21      	ldr	r3, [pc, #132]	@ (80695c0 <HAL_RCC_OscConfig+0x64c>)
 806953a:	681b      	ldr	r3, [r3, #0]
 806953c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8069540:	2b00      	cmp	r3, #0
 8069542:	d1f0      	bne.n	8069526 <HAL_RCC_OscConfig+0x5b2>
 8069544:	e037      	b.n	80695b6 <HAL_RCC_OscConfig+0x642>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8069546:	687b      	ldr	r3, [r7, #4]
 8069548:	699b      	ldr	r3, [r3, #24]
 806954a:	2b01      	cmp	r3, #1
 806954c:	d101      	bne.n	8069552 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 806954e:	2301      	movs	r3, #1
 8069550:	e032      	b.n	80695b8 <HAL_RCC_OscConfig+0x644>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8069552:	4b1b      	ldr	r3, [pc, #108]	@ (80695c0 <HAL_RCC_OscConfig+0x64c>)
 8069554:	685b      	ldr	r3, [r3, #4]
 8069556:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8069558:	687b      	ldr	r3, [r7, #4]
 806955a:	699b      	ldr	r3, [r3, #24]
 806955c:	2b01      	cmp	r3, #1
 806955e:	d028      	beq.n	80695b2 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8069560:	68fb      	ldr	r3, [r7, #12]
 8069562:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8069566:	687b      	ldr	r3, [r7, #4]
 8069568:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 806956a:	429a      	cmp	r2, r3
 806956c:	d121      	bne.n	80695b2 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 806956e:	68fb      	ldr	r3, [r7, #12]
 8069570:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8069574:	687b      	ldr	r3, [r7, #4]
 8069576:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8069578:	429a      	cmp	r2, r3
 806957a:	d11a      	bne.n	80695b2 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 806957c:	68fa      	ldr	r2, [r7, #12]
 806957e:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8069582:	4013      	ands	r3, r2
 8069584:	687a      	ldr	r2, [r7, #4]
 8069586:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8069588:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 806958a:	4293      	cmp	r3, r2
 806958c:	d111      	bne.n	80695b2 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 806958e:	68fb      	ldr	r3, [r7, #12]
 8069590:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8069594:	687b      	ldr	r3, [r7, #4]
 8069596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8069598:	085b      	lsrs	r3, r3, #1
 806959a:	3b01      	subs	r3, #1
 806959c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 806959e:	429a      	cmp	r2, r3
 80695a0:	d107      	bne.n	80695b2 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80695a2:	68fb      	ldr	r3, [r7, #12]
 80695a4:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80695a8:	687b      	ldr	r3, [r7, #4]
 80695aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80695ac:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80695ae:	429a      	cmp	r2, r3
 80695b0:	d001      	beq.n	80695b6 <HAL_RCC_OscConfig+0x642>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80695b2:	2301      	movs	r3, #1
 80695b4:	e000      	b.n	80695b8 <HAL_RCC_OscConfig+0x644>
        }
      }
    }
  }
  return HAL_OK;
 80695b6:	2300      	movs	r3, #0
}
 80695b8:	4618      	mov	r0, r3
 80695ba:	3718      	adds	r7, #24
 80695bc:	46bd      	mov	sp, r7
 80695be:	bd80      	pop	{r7, pc}
 80695c0:	40023800 	.word	0x40023800
 80695c4:	08071758 	.word	0x08071758
 80695c8:	42470060 	.word	0x42470060

080695cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80695cc:	b580      	push	{r7, lr}
 80695ce:	b084      	sub	sp, #16
 80695d0:	af00      	add	r7, sp, #0
 80695d2:	6078      	str	r0, [r7, #4]
 80695d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80695d6:	687b      	ldr	r3, [r7, #4]
 80695d8:	2b00      	cmp	r3, #0
 80695da:	d101      	bne.n	80695e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80695dc:	2301      	movs	r3, #1
 80695de:	e174      	b.n	80698ca <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80695e0:	687b      	ldr	r3, [r7, #4]
 80695e2:	681b      	ldr	r3, [r3, #0]
 80695e4:	2b00      	cmp	r3, #0
 80695e6:	d003      	beq.n	80695f0 <HAL_RCC_ClockConfig+0x24>
 80695e8:	687b      	ldr	r3, [r7, #4]
 80695ea:	681b      	ldr	r3, [r3, #0]
 80695ec:	2b0f      	cmp	r3, #15
 80695ee:	d904      	bls.n	80695fa <HAL_RCC_ClockConfig+0x2e>
 80695f0:	f240 215a 	movw	r1, #602	@ 0x25a
 80695f4:	487b      	ldr	r0, [pc, #492]	@ (80697e4 <HAL_RCC_ClockConfig+0x218>)
 80695f6:	f7fc ff26 	bl	8066446 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80695fa:	683b      	ldr	r3, [r7, #0]
 80695fc:	2b00      	cmp	r3, #0
 80695fe:	d019      	beq.n	8069634 <HAL_RCC_ClockConfig+0x68>
 8069600:	683b      	ldr	r3, [r7, #0]
 8069602:	2b01      	cmp	r3, #1
 8069604:	d016      	beq.n	8069634 <HAL_RCC_ClockConfig+0x68>
 8069606:	683b      	ldr	r3, [r7, #0]
 8069608:	2b02      	cmp	r3, #2
 806960a:	d013      	beq.n	8069634 <HAL_RCC_ClockConfig+0x68>
 806960c:	683b      	ldr	r3, [r7, #0]
 806960e:	2b03      	cmp	r3, #3
 8069610:	d010      	beq.n	8069634 <HAL_RCC_ClockConfig+0x68>
 8069612:	683b      	ldr	r3, [r7, #0]
 8069614:	2b04      	cmp	r3, #4
 8069616:	d00d      	beq.n	8069634 <HAL_RCC_ClockConfig+0x68>
 8069618:	683b      	ldr	r3, [r7, #0]
 806961a:	2b05      	cmp	r3, #5
 806961c:	d00a      	beq.n	8069634 <HAL_RCC_ClockConfig+0x68>
 806961e:	683b      	ldr	r3, [r7, #0]
 8069620:	2b06      	cmp	r3, #6
 8069622:	d007      	beq.n	8069634 <HAL_RCC_ClockConfig+0x68>
 8069624:	683b      	ldr	r3, [r7, #0]
 8069626:	2b07      	cmp	r3, #7
 8069628:	d004      	beq.n	8069634 <HAL_RCC_ClockConfig+0x68>
 806962a:	f240 215b 	movw	r1, #603	@ 0x25b
 806962e:	486d      	ldr	r0, [pc, #436]	@ (80697e4 <HAL_RCC_ClockConfig+0x218>)
 8069630:	f7fc ff09 	bl	8066446 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8069634:	4b6c      	ldr	r3, [pc, #432]	@ (80697e8 <HAL_RCC_ClockConfig+0x21c>)
 8069636:	681b      	ldr	r3, [r3, #0]
 8069638:	f003 0307 	and.w	r3, r3, #7
 806963c:	683a      	ldr	r2, [r7, #0]
 806963e:	429a      	cmp	r2, r3
 8069640:	d90c      	bls.n	806965c <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8069642:	4b69      	ldr	r3, [pc, #420]	@ (80697e8 <HAL_RCC_ClockConfig+0x21c>)
 8069644:	683a      	ldr	r2, [r7, #0]
 8069646:	b2d2      	uxtb	r2, r2
 8069648:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 806964a:	4b67      	ldr	r3, [pc, #412]	@ (80697e8 <HAL_RCC_ClockConfig+0x21c>)
 806964c:	681b      	ldr	r3, [r3, #0]
 806964e:	f003 0307 	and.w	r3, r3, #7
 8069652:	683a      	ldr	r2, [r7, #0]
 8069654:	429a      	cmp	r2, r3
 8069656:	d001      	beq.n	806965c <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8069658:	2301      	movs	r3, #1
 806965a:	e136      	b.n	80698ca <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 806965c:	687b      	ldr	r3, [r7, #4]
 806965e:	681b      	ldr	r3, [r3, #0]
 8069660:	f003 0302 	and.w	r3, r3, #2
 8069664:	2b00      	cmp	r3, #0
 8069666:	d049      	beq.n	80696fc <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8069668:	687b      	ldr	r3, [r7, #4]
 806966a:	681b      	ldr	r3, [r3, #0]
 806966c:	f003 0304 	and.w	r3, r3, #4
 8069670:	2b00      	cmp	r3, #0
 8069672:	d005      	beq.n	8069680 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8069674:	4b5d      	ldr	r3, [pc, #372]	@ (80697ec <HAL_RCC_ClockConfig+0x220>)
 8069676:	689b      	ldr	r3, [r3, #8]
 8069678:	4a5c      	ldr	r2, [pc, #368]	@ (80697ec <HAL_RCC_ClockConfig+0x220>)
 806967a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 806967e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8069680:	687b      	ldr	r3, [r7, #4]
 8069682:	681b      	ldr	r3, [r3, #0]
 8069684:	f003 0308 	and.w	r3, r3, #8
 8069688:	2b00      	cmp	r3, #0
 806968a:	d005      	beq.n	8069698 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 806968c:	4b57      	ldr	r3, [pc, #348]	@ (80697ec <HAL_RCC_ClockConfig+0x220>)
 806968e:	689b      	ldr	r3, [r3, #8]
 8069690:	4a56      	ldr	r2, [pc, #344]	@ (80697ec <HAL_RCC_ClockConfig+0x220>)
 8069692:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8069696:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8069698:	687b      	ldr	r3, [r7, #4]
 806969a:	689b      	ldr	r3, [r3, #8]
 806969c:	2b00      	cmp	r3, #0
 806969e:	d024      	beq.n	80696ea <HAL_RCC_ClockConfig+0x11e>
 80696a0:	687b      	ldr	r3, [r7, #4]
 80696a2:	689b      	ldr	r3, [r3, #8]
 80696a4:	2b80      	cmp	r3, #128	@ 0x80
 80696a6:	d020      	beq.n	80696ea <HAL_RCC_ClockConfig+0x11e>
 80696a8:	687b      	ldr	r3, [r7, #4]
 80696aa:	689b      	ldr	r3, [r3, #8]
 80696ac:	2b90      	cmp	r3, #144	@ 0x90
 80696ae:	d01c      	beq.n	80696ea <HAL_RCC_ClockConfig+0x11e>
 80696b0:	687b      	ldr	r3, [r7, #4]
 80696b2:	689b      	ldr	r3, [r3, #8]
 80696b4:	2ba0      	cmp	r3, #160	@ 0xa0
 80696b6:	d018      	beq.n	80696ea <HAL_RCC_ClockConfig+0x11e>
 80696b8:	687b      	ldr	r3, [r7, #4]
 80696ba:	689b      	ldr	r3, [r3, #8]
 80696bc:	2bb0      	cmp	r3, #176	@ 0xb0
 80696be:	d014      	beq.n	80696ea <HAL_RCC_ClockConfig+0x11e>
 80696c0:	687b      	ldr	r3, [r7, #4]
 80696c2:	689b      	ldr	r3, [r3, #8]
 80696c4:	2bc0      	cmp	r3, #192	@ 0xc0
 80696c6:	d010      	beq.n	80696ea <HAL_RCC_ClockConfig+0x11e>
 80696c8:	687b      	ldr	r3, [r7, #4]
 80696ca:	689b      	ldr	r3, [r3, #8]
 80696cc:	2bd0      	cmp	r3, #208	@ 0xd0
 80696ce:	d00c      	beq.n	80696ea <HAL_RCC_ClockConfig+0x11e>
 80696d0:	687b      	ldr	r3, [r7, #4]
 80696d2:	689b      	ldr	r3, [r3, #8]
 80696d4:	2be0      	cmp	r3, #224	@ 0xe0
 80696d6:	d008      	beq.n	80696ea <HAL_RCC_ClockConfig+0x11e>
 80696d8:	687b      	ldr	r3, [r7, #4]
 80696da:	689b      	ldr	r3, [r3, #8]
 80696dc:	2bf0      	cmp	r3, #240	@ 0xf0
 80696de:	d004      	beq.n	80696ea <HAL_RCC_ClockConfig+0x11e>
 80696e0:	f240 217e 	movw	r1, #638	@ 0x27e
 80696e4:	483f      	ldr	r0, [pc, #252]	@ (80697e4 <HAL_RCC_ClockConfig+0x218>)
 80696e6:	f7fc feae 	bl	8066446 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80696ea:	4b40      	ldr	r3, [pc, #256]	@ (80697ec <HAL_RCC_ClockConfig+0x220>)
 80696ec:	689b      	ldr	r3, [r3, #8]
 80696ee:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80696f2:	687b      	ldr	r3, [r7, #4]
 80696f4:	689b      	ldr	r3, [r3, #8]
 80696f6:	493d      	ldr	r1, [pc, #244]	@ (80697ec <HAL_RCC_ClockConfig+0x220>)
 80696f8:	4313      	orrs	r3, r2
 80696fa:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80696fc:	687b      	ldr	r3, [r7, #4]
 80696fe:	681b      	ldr	r3, [r3, #0]
 8069700:	f003 0301 	and.w	r3, r3, #1
 8069704:	2b00      	cmp	r3, #0
 8069706:	d059      	beq.n	80697bc <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8069708:	687b      	ldr	r3, [r7, #4]
 806970a:	685b      	ldr	r3, [r3, #4]
 806970c:	2b00      	cmp	r3, #0
 806970e:	d010      	beq.n	8069732 <HAL_RCC_ClockConfig+0x166>
 8069710:	687b      	ldr	r3, [r7, #4]
 8069712:	685b      	ldr	r3, [r3, #4]
 8069714:	2b01      	cmp	r3, #1
 8069716:	d00c      	beq.n	8069732 <HAL_RCC_ClockConfig+0x166>
 8069718:	687b      	ldr	r3, [r7, #4]
 806971a:	685b      	ldr	r3, [r3, #4]
 806971c:	2b02      	cmp	r3, #2
 806971e:	d008      	beq.n	8069732 <HAL_RCC_ClockConfig+0x166>
 8069720:	687b      	ldr	r3, [r7, #4]
 8069722:	685b      	ldr	r3, [r3, #4]
 8069724:	2b03      	cmp	r3, #3
 8069726:	d004      	beq.n	8069732 <HAL_RCC_ClockConfig+0x166>
 8069728:	f240 2185 	movw	r1, #645	@ 0x285
 806972c:	482d      	ldr	r0, [pc, #180]	@ (80697e4 <HAL_RCC_ClockConfig+0x218>)
 806972e:	f7fc fe8a 	bl	8066446 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8069732:	687b      	ldr	r3, [r7, #4]
 8069734:	685b      	ldr	r3, [r3, #4]
 8069736:	2b01      	cmp	r3, #1
 8069738:	d107      	bne.n	806974a <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 806973a:	4b2c      	ldr	r3, [pc, #176]	@ (80697ec <HAL_RCC_ClockConfig+0x220>)
 806973c:	681b      	ldr	r3, [r3, #0]
 806973e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8069742:	2b00      	cmp	r3, #0
 8069744:	d119      	bne.n	806977a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8069746:	2301      	movs	r3, #1
 8069748:	e0bf      	b.n	80698ca <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 806974a:	687b      	ldr	r3, [r7, #4]
 806974c:	685b      	ldr	r3, [r3, #4]
 806974e:	2b02      	cmp	r3, #2
 8069750:	d003      	beq.n	806975a <HAL_RCC_ClockConfig+0x18e>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8069752:	687b      	ldr	r3, [r7, #4]
 8069754:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8069756:	2b03      	cmp	r3, #3
 8069758:	d107      	bne.n	806976a <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 806975a:	4b24      	ldr	r3, [pc, #144]	@ (80697ec <HAL_RCC_ClockConfig+0x220>)
 806975c:	681b      	ldr	r3, [r3, #0]
 806975e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8069762:	2b00      	cmp	r3, #0
 8069764:	d109      	bne.n	806977a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8069766:	2301      	movs	r3, #1
 8069768:	e0af      	b.n	80698ca <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 806976a:	4b20      	ldr	r3, [pc, #128]	@ (80697ec <HAL_RCC_ClockConfig+0x220>)
 806976c:	681b      	ldr	r3, [r3, #0]
 806976e:	f003 0302 	and.w	r3, r3, #2
 8069772:	2b00      	cmp	r3, #0
 8069774:	d101      	bne.n	806977a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8069776:	2301      	movs	r3, #1
 8069778:	e0a7      	b.n	80698ca <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 806977a:	4b1c      	ldr	r3, [pc, #112]	@ (80697ec <HAL_RCC_ClockConfig+0x220>)
 806977c:	689b      	ldr	r3, [r3, #8]
 806977e:	f023 0203 	bic.w	r2, r3, #3
 8069782:	687b      	ldr	r3, [r7, #4]
 8069784:	685b      	ldr	r3, [r3, #4]
 8069786:	4919      	ldr	r1, [pc, #100]	@ (80697ec <HAL_RCC_ClockConfig+0x220>)
 8069788:	4313      	orrs	r3, r2
 806978a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 806978c:	f7fd fbbc 	bl	8066f08 <HAL_GetTick>
 8069790:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8069792:	e00a      	b.n	80697aa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8069794:	f7fd fbb8 	bl	8066f08 <HAL_GetTick>
 8069798:	4602      	mov	r2, r0
 806979a:	68fb      	ldr	r3, [r7, #12]
 806979c:	1ad3      	subs	r3, r2, r3
 806979e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80697a2:	4293      	cmp	r3, r2
 80697a4:	d901      	bls.n	80697aa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80697a6:	2303      	movs	r3, #3
 80697a8:	e08f      	b.n	80698ca <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80697aa:	4b10      	ldr	r3, [pc, #64]	@ (80697ec <HAL_RCC_ClockConfig+0x220>)
 80697ac:	689b      	ldr	r3, [r3, #8]
 80697ae:	f003 020c 	and.w	r2, r3, #12
 80697b2:	687b      	ldr	r3, [r7, #4]
 80697b4:	685b      	ldr	r3, [r3, #4]
 80697b6:	009b      	lsls	r3, r3, #2
 80697b8:	429a      	cmp	r2, r3
 80697ba:	d1eb      	bne.n	8069794 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80697bc:	4b0a      	ldr	r3, [pc, #40]	@ (80697e8 <HAL_RCC_ClockConfig+0x21c>)
 80697be:	681b      	ldr	r3, [r3, #0]
 80697c0:	f003 0307 	and.w	r3, r3, #7
 80697c4:	683a      	ldr	r2, [r7, #0]
 80697c6:	429a      	cmp	r2, r3
 80697c8:	d212      	bcs.n	80697f0 <HAL_RCC_ClockConfig+0x224>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80697ca:	4b07      	ldr	r3, [pc, #28]	@ (80697e8 <HAL_RCC_ClockConfig+0x21c>)
 80697cc:	683a      	ldr	r2, [r7, #0]
 80697ce:	b2d2      	uxtb	r2, r2
 80697d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80697d2:	4b05      	ldr	r3, [pc, #20]	@ (80697e8 <HAL_RCC_ClockConfig+0x21c>)
 80697d4:	681b      	ldr	r3, [r3, #0]
 80697d6:	f003 0307 	and.w	r3, r3, #7
 80697da:	683a      	ldr	r2, [r7, #0]
 80697dc:	429a      	cmp	r2, r3
 80697de:	d007      	beq.n	80697f0 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 80697e0:	2301      	movs	r3, #1
 80697e2:	e072      	b.n	80698ca <HAL_RCC_ClockConfig+0x2fe>
 80697e4:	08071758 	.word	0x08071758
 80697e8:	40023c00 	.word	0x40023c00
 80697ec:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80697f0:	687b      	ldr	r3, [r7, #4]
 80697f2:	681b      	ldr	r3, [r3, #0]
 80697f4:	f003 0304 	and.w	r3, r3, #4
 80697f8:	2b00      	cmp	r3, #0
 80697fa:	d025      	beq.n	8069848 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80697fc:	687b      	ldr	r3, [r7, #4]
 80697fe:	68db      	ldr	r3, [r3, #12]
 8069800:	2b00      	cmp	r3, #0
 8069802:	d018      	beq.n	8069836 <HAL_RCC_ClockConfig+0x26a>
 8069804:	687b      	ldr	r3, [r7, #4]
 8069806:	68db      	ldr	r3, [r3, #12]
 8069808:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 806980c:	d013      	beq.n	8069836 <HAL_RCC_ClockConfig+0x26a>
 806980e:	687b      	ldr	r3, [r7, #4]
 8069810:	68db      	ldr	r3, [r3, #12]
 8069812:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8069816:	d00e      	beq.n	8069836 <HAL_RCC_ClockConfig+0x26a>
 8069818:	687b      	ldr	r3, [r7, #4]
 806981a:	68db      	ldr	r3, [r3, #12]
 806981c:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8069820:	d009      	beq.n	8069836 <HAL_RCC_ClockConfig+0x26a>
 8069822:	687b      	ldr	r3, [r7, #4]
 8069824:	68db      	ldr	r3, [r3, #12]
 8069826:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 806982a:	d004      	beq.n	8069836 <HAL_RCC_ClockConfig+0x26a>
 806982c:	f240 21c3 	movw	r1, #707	@ 0x2c3
 8069830:	4828      	ldr	r0, [pc, #160]	@ (80698d4 <HAL_RCC_ClockConfig+0x308>)
 8069832:	f7fc fe08 	bl	8066446 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8069836:	4b28      	ldr	r3, [pc, #160]	@ (80698d8 <HAL_RCC_ClockConfig+0x30c>)
 8069838:	689b      	ldr	r3, [r3, #8]
 806983a:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 806983e:	687b      	ldr	r3, [r7, #4]
 8069840:	68db      	ldr	r3, [r3, #12]
 8069842:	4925      	ldr	r1, [pc, #148]	@ (80698d8 <HAL_RCC_ClockConfig+0x30c>)
 8069844:	4313      	orrs	r3, r2
 8069846:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8069848:	687b      	ldr	r3, [r7, #4]
 806984a:	681b      	ldr	r3, [r3, #0]
 806984c:	f003 0308 	and.w	r3, r3, #8
 8069850:	2b00      	cmp	r3, #0
 8069852:	d026      	beq.n	80698a2 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8069854:	687b      	ldr	r3, [r7, #4]
 8069856:	691b      	ldr	r3, [r3, #16]
 8069858:	2b00      	cmp	r3, #0
 806985a:	d018      	beq.n	806988e <HAL_RCC_ClockConfig+0x2c2>
 806985c:	687b      	ldr	r3, [r7, #4]
 806985e:	691b      	ldr	r3, [r3, #16]
 8069860:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8069864:	d013      	beq.n	806988e <HAL_RCC_ClockConfig+0x2c2>
 8069866:	687b      	ldr	r3, [r7, #4]
 8069868:	691b      	ldr	r3, [r3, #16]
 806986a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 806986e:	d00e      	beq.n	806988e <HAL_RCC_ClockConfig+0x2c2>
 8069870:	687b      	ldr	r3, [r7, #4]
 8069872:	691b      	ldr	r3, [r3, #16]
 8069874:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8069878:	d009      	beq.n	806988e <HAL_RCC_ClockConfig+0x2c2>
 806987a:	687b      	ldr	r3, [r7, #4]
 806987c:	691b      	ldr	r3, [r3, #16]
 806987e:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 8069882:	d004      	beq.n	806988e <HAL_RCC_ClockConfig+0x2c2>
 8069884:	f240 21ca 	movw	r1, #714	@ 0x2ca
 8069888:	4812      	ldr	r0, [pc, #72]	@ (80698d4 <HAL_RCC_ClockConfig+0x308>)
 806988a:	f7fc fddc 	bl	8066446 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 806988e:	4b12      	ldr	r3, [pc, #72]	@ (80698d8 <HAL_RCC_ClockConfig+0x30c>)
 8069890:	689b      	ldr	r3, [r3, #8]
 8069892:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8069896:	687b      	ldr	r3, [r7, #4]
 8069898:	691b      	ldr	r3, [r3, #16]
 806989a:	00db      	lsls	r3, r3, #3
 806989c:	490e      	ldr	r1, [pc, #56]	@ (80698d8 <HAL_RCC_ClockConfig+0x30c>)
 806989e:	4313      	orrs	r3, r2
 80698a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80698a2:	f000 f821 	bl	80698e8 <HAL_RCC_GetSysClockFreq>
 80698a6:	4602      	mov	r2, r0
 80698a8:	4b0b      	ldr	r3, [pc, #44]	@ (80698d8 <HAL_RCC_ClockConfig+0x30c>)
 80698aa:	689b      	ldr	r3, [r3, #8]
 80698ac:	091b      	lsrs	r3, r3, #4
 80698ae:	f003 030f 	and.w	r3, r3, #15
 80698b2:	490a      	ldr	r1, [pc, #40]	@ (80698dc <HAL_RCC_ClockConfig+0x310>)
 80698b4:	5ccb      	ldrb	r3, [r1, r3]
 80698b6:	fa22 f303 	lsr.w	r3, r2, r3
 80698ba:	4a09      	ldr	r2, [pc, #36]	@ (80698e0 <HAL_RCC_ClockConfig+0x314>)
 80698bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80698be:	4b09      	ldr	r3, [pc, #36]	@ (80698e4 <HAL_RCC_ClockConfig+0x318>)
 80698c0:	681b      	ldr	r3, [r3, #0]
 80698c2:	4618      	mov	r0, r3
 80698c4:	f7fc fe92 	bl	80665ec <HAL_InitTick>

  return HAL_OK;
 80698c8:	2300      	movs	r3, #0
}
 80698ca:	4618      	mov	r0, r3
 80698cc:	3710      	adds	r7, #16
 80698ce:	46bd      	mov	sp, r7
 80698d0:	bd80      	pop	{r7, pc}
 80698d2:	bf00      	nop
 80698d4:	08071758 	.word	0x08071758
 80698d8:	40023800 	.word	0x40023800
 80698dc:	08071ad4 	.word	0x08071ad4
 80698e0:	20010120 	.word	0x20010120
 80698e4:	20010124 	.word	0x20010124

080698e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80698e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80698ec:	b094      	sub	sp, #80	@ 0x50
 80698ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80698f0:	2300      	movs	r3, #0
 80698f2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80698f4:	2300      	movs	r3, #0
 80698f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80698f8:	2300      	movs	r3, #0
 80698fa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80698fc:	2300      	movs	r3, #0
 80698fe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8069900:	4b79      	ldr	r3, [pc, #484]	@ (8069ae8 <HAL_RCC_GetSysClockFreq+0x200>)
 8069902:	689b      	ldr	r3, [r3, #8]
 8069904:	f003 030c 	and.w	r3, r3, #12
 8069908:	2b08      	cmp	r3, #8
 806990a:	d00d      	beq.n	8069928 <HAL_RCC_GetSysClockFreq+0x40>
 806990c:	2b08      	cmp	r3, #8
 806990e:	f200 80e1 	bhi.w	8069ad4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8069912:	2b00      	cmp	r3, #0
 8069914:	d002      	beq.n	806991c <HAL_RCC_GetSysClockFreq+0x34>
 8069916:	2b04      	cmp	r3, #4
 8069918:	d003      	beq.n	8069922 <HAL_RCC_GetSysClockFreq+0x3a>
 806991a:	e0db      	b.n	8069ad4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 806991c:	4b73      	ldr	r3, [pc, #460]	@ (8069aec <HAL_RCC_GetSysClockFreq+0x204>)
 806991e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8069920:	e0db      	b.n	8069ada <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8069922:	4b73      	ldr	r3, [pc, #460]	@ (8069af0 <HAL_RCC_GetSysClockFreq+0x208>)
 8069924:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8069926:	e0d8      	b.n	8069ada <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8069928:	4b6f      	ldr	r3, [pc, #444]	@ (8069ae8 <HAL_RCC_GetSysClockFreq+0x200>)
 806992a:	685b      	ldr	r3, [r3, #4]
 806992c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8069930:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8069932:	4b6d      	ldr	r3, [pc, #436]	@ (8069ae8 <HAL_RCC_GetSysClockFreq+0x200>)
 8069934:	685b      	ldr	r3, [r3, #4]
 8069936:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 806993a:	2b00      	cmp	r3, #0
 806993c:	d063      	beq.n	8069a06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 806993e:	4b6a      	ldr	r3, [pc, #424]	@ (8069ae8 <HAL_RCC_GetSysClockFreq+0x200>)
 8069940:	685b      	ldr	r3, [r3, #4]
 8069942:	099b      	lsrs	r3, r3, #6
 8069944:	2200      	movs	r2, #0
 8069946:	63bb      	str	r3, [r7, #56]	@ 0x38
 8069948:	63fa      	str	r2, [r7, #60]	@ 0x3c
 806994a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 806994c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8069950:	633b      	str	r3, [r7, #48]	@ 0x30
 8069952:	2300      	movs	r3, #0
 8069954:	637b      	str	r3, [r7, #52]	@ 0x34
 8069956:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 806995a:	4622      	mov	r2, r4
 806995c:	462b      	mov	r3, r5
 806995e:	f04f 0000 	mov.w	r0, #0
 8069962:	f04f 0100 	mov.w	r1, #0
 8069966:	0159      	lsls	r1, r3, #5
 8069968:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 806996c:	0150      	lsls	r0, r2, #5
 806996e:	4602      	mov	r2, r0
 8069970:	460b      	mov	r3, r1
 8069972:	4621      	mov	r1, r4
 8069974:	1a51      	subs	r1, r2, r1
 8069976:	6139      	str	r1, [r7, #16]
 8069978:	4629      	mov	r1, r5
 806997a:	eb63 0301 	sbc.w	r3, r3, r1
 806997e:	617b      	str	r3, [r7, #20]
 8069980:	f04f 0200 	mov.w	r2, #0
 8069984:	f04f 0300 	mov.w	r3, #0
 8069988:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 806998c:	4659      	mov	r1, fp
 806998e:	018b      	lsls	r3, r1, #6
 8069990:	4651      	mov	r1, sl
 8069992:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8069996:	4651      	mov	r1, sl
 8069998:	018a      	lsls	r2, r1, #6
 806999a:	4651      	mov	r1, sl
 806999c:	ebb2 0801 	subs.w	r8, r2, r1
 80699a0:	4659      	mov	r1, fp
 80699a2:	eb63 0901 	sbc.w	r9, r3, r1
 80699a6:	f04f 0200 	mov.w	r2, #0
 80699aa:	f04f 0300 	mov.w	r3, #0
 80699ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80699b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80699b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80699ba:	4690      	mov	r8, r2
 80699bc:	4699      	mov	r9, r3
 80699be:	4623      	mov	r3, r4
 80699c0:	eb18 0303 	adds.w	r3, r8, r3
 80699c4:	60bb      	str	r3, [r7, #8]
 80699c6:	462b      	mov	r3, r5
 80699c8:	eb49 0303 	adc.w	r3, r9, r3
 80699cc:	60fb      	str	r3, [r7, #12]
 80699ce:	f04f 0200 	mov.w	r2, #0
 80699d2:	f04f 0300 	mov.w	r3, #0
 80699d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80699da:	4629      	mov	r1, r5
 80699dc:	024b      	lsls	r3, r1, #9
 80699de:	4621      	mov	r1, r4
 80699e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80699e4:	4621      	mov	r1, r4
 80699e6:	024a      	lsls	r2, r1, #9
 80699e8:	4610      	mov	r0, r2
 80699ea:	4619      	mov	r1, r3
 80699ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80699ee:	2200      	movs	r2, #0
 80699f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80699f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80699f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80699f8:	f7f6 fbf2 	bl	80601e0 <__aeabi_uldivmod>
 80699fc:	4602      	mov	r2, r0
 80699fe:	460b      	mov	r3, r1
 8069a00:	4613      	mov	r3, r2
 8069a02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8069a04:	e058      	b.n	8069ab8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8069a06:	4b38      	ldr	r3, [pc, #224]	@ (8069ae8 <HAL_RCC_GetSysClockFreq+0x200>)
 8069a08:	685b      	ldr	r3, [r3, #4]
 8069a0a:	099b      	lsrs	r3, r3, #6
 8069a0c:	2200      	movs	r2, #0
 8069a0e:	4618      	mov	r0, r3
 8069a10:	4611      	mov	r1, r2
 8069a12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8069a16:	623b      	str	r3, [r7, #32]
 8069a18:	2300      	movs	r3, #0
 8069a1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8069a1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8069a20:	4642      	mov	r2, r8
 8069a22:	464b      	mov	r3, r9
 8069a24:	f04f 0000 	mov.w	r0, #0
 8069a28:	f04f 0100 	mov.w	r1, #0
 8069a2c:	0159      	lsls	r1, r3, #5
 8069a2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8069a32:	0150      	lsls	r0, r2, #5
 8069a34:	4602      	mov	r2, r0
 8069a36:	460b      	mov	r3, r1
 8069a38:	4641      	mov	r1, r8
 8069a3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8069a3e:	4649      	mov	r1, r9
 8069a40:	eb63 0b01 	sbc.w	fp, r3, r1
 8069a44:	f04f 0200 	mov.w	r2, #0
 8069a48:	f04f 0300 	mov.w	r3, #0
 8069a4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8069a50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8069a54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8069a58:	ebb2 040a 	subs.w	r4, r2, sl
 8069a5c:	eb63 050b 	sbc.w	r5, r3, fp
 8069a60:	f04f 0200 	mov.w	r2, #0
 8069a64:	f04f 0300 	mov.w	r3, #0
 8069a68:	00eb      	lsls	r3, r5, #3
 8069a6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8069a6e:	00e2      	lsls	r2, r4, #3
 8069a70:	4614      	mov	r4, r2
 8069a72:	461d      	mov	r5, r3
 8069a74:	4643      	mov	r3, r8
 8069a76:	18e3      	adds	r3, r4, r3
 8069a78:	603b      	str	r3, [r7, #0]
 8069a7a:	464b      	mov	r3, r9
 8069a7c:	eb45 0303 	adc.w	r3, r5, r3
 8069a80:	607b      	str	r3, [r7, #4]
 8069a82:	f04f 0200 	mov.w	r2, #0
 8069a86:	f04f 0300 	mov.w	r3, #0
 8069a8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8069a8e:	4629      	mov	r1, r5
 8069a90:	028b      	lsls	r3, r1, #10
 8069a92:	4621      	mov	r1, r4
 8069a94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8069a98:	4621      	mov	r1, r4
 8069a9a:	028a      	lsls	r2, r1, #10
 8069a9c:	4610      	mov	r0, r2
 8069a9e:	4619      	mov	r1, r3
 8069aa0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8069aa2:	2200      	movs	r2, #0
 8069aa4:	61bb      	str	r3, [r7, #24]
 8069aa6:	61fa      	str	r2, [r7, #28]
 8069aa8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8069aac:	f7f6 fb98 	bl	80601e0 <__aeabi_uldivmod>
 8069ab0:	4602      	mov	r2, r0
 8069ab2:	460b      	mov	r3, r1
 8069ab4:	4613      	mov	r3, r2
 8069ab6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8069ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8069ae8 <HAL_RCC_GetSysClockFreq+0x200>)
 8069aba:	685b      	ldr	r3, [r3, #4]
 8069abc:	0c1b      	lsrs	r3, r3, #16
 8069abe:	f003 0303 	and.w	r3, r3, #3
 8069ac2:	3301      	adds	r3, #1
 8069ac4:	005b      	lsls	r3, r3, #1
 8069ac6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8069ac8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8069aca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8069acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8069ad0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8069ad2:	e002      	b.n	8069ada <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8069ad4:	4b05      	ldr	r3, [pc, #20]	@ (8069aec <HAL_RCC_GetSysClockFreq+0x204>)
 8069ad6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8069ad8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8069ada:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8069adc:	4618      	mov	r0, r3
 8069ade:	3750      	adds	r7, #80	@ 0x50
 8069ae0:	46bd      	mov	sp, r7
 8069ae2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8069ae6:	bf00      	nop
 8069ae8:	40023800 	.word	0x40023800
 8069aec:	00f42400 	.word	0x00f42400
 8069af0:	007a1200 	.word	0x007a1200

08069af4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8069af4:	b480      	push	{r7}
 8069af6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8069af8:	4b03      	ldr	r3, [pc, #12]	@ (8069b08 <HAL_RCC_GetHCLKFreq+0x14>)
 8069afa:	681b      	ldr	r3, [r3, #0]
}
 8069afc:	4618      	mov	r0, r3
 8069afe:	46bd      	mov	sp, r7
 8069b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8069b04:	4770      	bx	lr
 8069b06:	bf00      	nop
 8069b08:	20010120 	.word	0x20010120

08069b0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8069b0c:	b580      	push	{r7, lr}
 8069b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8069b10:	f7ff fff0 	bl	8069af4 <HAL_RCC_GetHCLKFreq>
 8069b14:	4602      	mov	r2, r0
 8069b16:	4b05      	ldr	r3, [pc, #20]	@ (8069b2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8069b18:	689b      	ldr	r3, [r3, #8]
 8069b1a:	0a9b      	lsrs	r3, r3, #10
 8069b1c:	f003 0307 	and.w	r3, r3, #7
 8069b20:	4903      	ldr	r1, [pc, #12]	@ (8069b30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8069b22:	5ccb      	ldrb	r3, [r1, r3]
 8069b24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8069b28:	4618      	mov	r0, r3
 8069b2a:	bd80      	pop	{r7, pc}
 8069b2c:	40023800 	.word	0x40023800
 8069b30:	08071ae4 	.word	0x08071ae4

08069b34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8069b34:	b580      	push	{r7, lr}
 8069b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8069b38:	f7ff ffdc 	bl	8069af4 <HAL_RCC_GetHCLKFreq>
 8069b3c:	4602      	mov	r2, r0
 8069b3e:	4b05      	ldr	r3, [pc, #20]	@ (8069b54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8069b40:	689b      	ldr	r3, [r3, #8]
 8069b42:	0b5b      	lsrs	r3, r3, #13
 8069b44:	f003 0307 	and.w	r3, r3, #7
 8069b48:	4903      	ldr	r1, [pc, #12]	@ (8069b58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8069b4a:	5ccb      	ldrb	r3, [r1, r3]
 8069b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8069b50:	4618      	mov	r0, r3
 8069b52:	bd80      	pop	{r7, pc}
 8069b54:	40023800 	.word	0x40023800
 8069b58:	08071ae4 	.word	0x08071ae4

08069b5c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8069b5c:	b480      	push	{r7}
 8069b5e:	b083      	sub	sp, #12
 8069b60:	af00      	add	r7, sp, #0
 8069b62:	6078      	str	r0, [r7, #4]
 8069b64:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8069b66:	687b      	ldr	r3, [r7, #4]
 8069b68:	220f      	movs	r2, #15
 8069b6a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8069b6c:	4b12      	ldr	r3, [pc, #72]	@ (8069bb8 <HAL_RCC_GetClockConfig+0x5c>)
 8069b6e:	689b      	ldr	r3, [r3, #8]
 8069b70:	f003 0203 	and.w	r2, r3, #3
 8069b74:	687b      	ldr	r3, [r7, #4]
 8069b76:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8069b78:	4b0f      	ldr	r3, [pc, #60]	@ (8069bb8 <HAL_RCC_GetClockConfig+0x5c>)
 8069b7a:	689b      	ldr	r3, [r3, #8]
 8069b7c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8069b80:	687b      	ldr	r3, [r7, #4]
 8069b82:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8069b84:	4b0c      	ldr	r3, [pc, #48]	@ (8069bb8 <HAL_RCC_GetClockConfig+0x5c>)
 8069b86:	689b      	ldr	r3, [r3, #8]
 8069b88:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8069b8c:	687b      	ldr	r3, [r7, #4]
 8069b8e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8069b90:	4b09      	ldr	r3, [pc, #36]	@ (8069bb8 <HAL_RCC_GetClockConfig+0x5c>)
 8069b92:	689b      	ldr	r3, [r3, #8]
 8069b94:	08db      	lsrs	r3, r3, #3
 8069b96:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8069b9a:	687b      	ldr	r3, [r7, #4]
 8069b9c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8069b9e:	4b07      	ldr	r3, [pc, #28]	@ (8069bbc <HAL_RCC_GetClockConfig+0x60>)
 8069ba0:	681b      	ldr	r3, [r3, #0]
 8069ba2:	f003 0207 	and.w	r2, r3, #7
 8069ba6:	683b      	ldr	r3, [r7, #0]
 8069ba8:	601a      	str	r2, [r3, #0]
}
 8069baa:	bf00      	nop
 8069bac:	370c      	adds	r7, #12
 8069bae:	46bd      	mov	sp, r7
 8069bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8069bb4:	4770      	bx	lr
 8069bb6:	bf00      	nop
 8069bb8:	40023800 	.word	0x40023800
 8069bbc:	40023c00 	.word	0x40023c00

08069bc0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8069bc0:	b580      	push	{r7, lr}
 8069bc2:	b082      	sub	sp, #8
 8069bc4:	af00      	add	r7, sp, #0
 8069bc6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8069bc8:	687b      	ldr	r3, [r7, #4]
 8069bca:	2b00      	cmp	r3, #0
 8069bcc:	d101      	bne.n	8069bd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8069bce:	2301      	movs	r3, #1
 8069bd0:	e1ac      	b.n	8069f2c <HAL_SPI_Init+0x36c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8069bd2:	687b      	ldr	r3, [r7, #4]
 8069bd4:	681b      	ldr	r3, [r3, #0]
 8069bd6:	4a75      	ldr	r2, [pc, #468]	@ (8069dac <HAL_SPI_Init+0x1ec>)
 8069bd8:	4293      	cmp	r3, r2
 8069bda:	d018      	beq.n	8069c0e <HAL_SPI_Init+0x4e>
 8069bdc:	687b      	ldr	r3, [r7, #4]
 8069bde:	681b      	ldr	r3, [r3, #0]
 8069be0:	4a73      	ldr	r2, [pc, #460]	@ (8069db0 <HAL_SPI_Init+0x1f0>)
 8069be2:	4293      	cmp	r3, r2
 8069be4:	d013      	beq.n	8069c0e <HAL_SPI_Init+0x4e>
 8069be6:	687b      	ldr	r3, [r7, #4]
 8069be8:	681b      	ldr	r3, [r3, #0]
 8069bea:	4a72      	ldr	r2, [pc, #456]	@ (8069db4 <HAL_SPI_Init+0x1f4>)
 8069bec:	4293      	cmp	r3, r2
 8069bee:	d00e      	beq.n	8069c0e <HAL_SPI_Init+0x4e>
 8069bf0:	687b      	ldr	r3, [r7, #4]
 8069bf2:	681b      	ldr	r3, [r3, #0]
 8069bf4:	4a70      	ldr	r2, [pc, #448]	@ (8069db8 <HAL_SPI_Init+0x1f8>)
 8069bf6:	4293      	cmp	r3, r2
 8069bf8:	d009      	beq.n	8069c0e <HAL_SPI_Init+0x4e>
 8069bfa:	687b      	ldr	r3, [r7, #4]
 8069bfc:	681b      	ldr	r3, [r3, #0]
 8069bfe:	4a6f      	ldr	r2, [pc, #444]	@ (8069dbc <HAL_SPI_Init+0x1fc>)
 8069c00:	4293      	cmp	r3, r2
 8069c02:	d004      	beq.n	8069c0e <HAL_SPI_Init+0x4e>
 8069c04:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8069c08:	486d      	ldr	r0, [pc, #436]	@ (8069dc0 <HAL_SPI_Init+0x200>)
 8069c0a:	f7fc fc1c 	bl	8066446 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8069c0e:	687b      	ldr	r3, [r7, #4]
 8069c10:	685b      	ldr	r3, [r3, #4]
 8069c12:	2b00      	cmp	r3, #0
 8069c14:	d009      	beq.n	8069c2a <HAL_SPI_Init+0x6a>
 8069c16:	687b      	ldr	r3, [r7, #4]
 8069c18:	685b      	ldr	r3, [r3, #4]
 8069c1a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8069c1e:	d004      	beq.n	8069c2a <HAL_SPI_Init+0x6a>
 8069c20:	f240 1141 	movw	r1, #321	@ 0x141
 8069c24:	4866      	ldr	r0, [pc, #408]	@ (8069dc0 <HAL_SPI_Init+0x200>)
 8069c26:	f7fc fc0e 	bl	8066446 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8069c2a:	687b      	ldr	r3, [r7, #4]
 8069c2c:	689b      	ldr	r3, [r3, #8]
 8069c2e:	2b00      	cmp	r3, #0
 8069c30:	d00e      	beq.n	8069c50 <HAL_SPI_Init+0x90>
 8069c32:	687b      	ldr	r3, [r7, #4]
 8069c34:	689b      	ldr	r3, [r3, #8]
 8069c36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8069c3a:	d009      	beq.n	8069c50 <HAL_SPI_Init+0x90>
 8069c3c:	687b      	ldr	r3, [r7, #4]
 8069c3e:	689b      	ldr	r3, [r3, #8]
 8069c40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8069c44:	d004      	beq.n	8069c50 <HAL_SPI_Init+0x90>
 8069c46:	f44f 71a1 	mov.w	r1, #322	@ 0x142
 8069c4a:	485d      	ldr	r0, [pc, #372]	@ (8069dc0 <HAL_SPI_Init+0x200>)
 8069c4c:	f7fc fbfb 	bl	8066446 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8069c50:	687b      	ldr	r3, [r7, #4]
 8069c52:	68db      	ldr	r3, [r3, #12]
 8069c54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8069c58:	d008      	beq.n	8069c6c <HAL_SPI_Init+0xac>
 8069c5a:	687b      	ldr	r3, [r7, #4]
 8069c5c:	68db      	ldr	r3, [r3, #12]
 8069c5e:	2b00      	cmp	r3, #0
 8069c60:	d004      	beq.n	8069c6c <HAL_SPI_Init+0xac>
 8069c62:	f240 1143 	movw	r1, #323	@ 0x143
 8069c66:	4856      	ldr	r0, [pc, #344]	@ (8069dc0 <HAL_SPI_Init+0x200>)
 8069c68:	f7fc fbed 	bl	8066446 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8069c6c:	687b      	ldr	r3, [r7, #4]
 8069c6e:	699b      	ldr	r3, [r3, #24]
 8069c70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8069c74:	d00d      	beq.n	8069c92 <HAL_SPI_Init+0xd2>
 8069c76:	687b      	ldr	r3, [r7, #4]
 8069c78:	699b      	ldr	r3, [r3, #24]
 8069c7a:	2b00      	cmp	r3, #0
 8069c7c:	d009      	beq.n	8069c92 <HAL_SPI_Init+0xd2>
 8069c7e:	687b      	ldr	r3, [r7, #4]
 8069c80:	699b      	ldr	r3, [r3, #24]
 8069c82:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8069c86:	d004      	beq.n	8069c92 <HAL_SPI_Init+0xd2>
 8069c88:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 8069c8c:	484c      	ldr	r0, [pc, #304]	@ (8069dc0 <HAL_SPI_Init+0x200>)
 8069c8e:	f7fc fbda 	bl	8066446 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8069c92:	687b      	ldr	r3, [r7, #4]
 8069c94:	69db      	ldr	r3, [r3, #28]
 8069c96:	2b00      	cmp	r3, #0
 8069c98:	d020      	beq.n	8069cdc <HAL_SPI_Init+0x11c>
 8069c9a:	687b      	ldr	r3, [r7, #4]
 8069c9c:	69db      	ldr	r3, [r3, #28]
 8069c9e:	2b08      	cmp	r3, #8
 8069ca0:	d01c      	beq.n	8069cdc <HAL_SPI_Init+0x11c>
 8069ca2:	687b      	ldr	r3, [r7, #4]
 8069ca4:	69db      	ldr	r3, [r3, #28]
 8069ca6:	2b10      	cmp	r3, #16
 8069ca8:	d018      	beq.n	8069cdc <HAL_SPI_Init+0x11c>
 8069caa:	687b      	ldr	r3, [r7, #4]
 8069cac:	69db      	ldr	r3, [r3, #28]
 8069cae:	2b18      	cmp	r3, #24
 8069cb0:	d014      	beq.n	8069cdc <HAL_SPI_Init+0x11c>
 8069cb2:	687b      	ldr	r3, [r7, #4]
 8069cb4:	69db      	ldr	r3, [r3, #28]
 8069cb6:	2b20      	cmp	r3, #32
 8069cb8:	d010      	beq.n	8069cdc <HAL_SPI_Init+0x11c>
 8069cba:	687b      	ldr	r3, [r7, #4]
 8069cbc:	69db      	ldr	r3, [r3, #28]
 8069cbe:	2b28      	cmp	r3, #40	@ 0x28
 8069cc0:	d00c      	beq.n	8069cdc <HAL_SPI_Init+0x11c>
 8069cc2:	687b      	ldr	r3, [r7, #4]
 8069cc4:	69db      	ldr	r3, [r3, #28]
 8069cc6:	2b30      	cmp	r3, #48	@ 0x30
 8069cc8:	d008      	beq.n	8069cdc <HAL_SPI_Init+0x11c>
 8069cca:	687b      	ldr	r3, [r7, #4]
 8069ccc:	69db      	ldr	r3, [r3, #28]
 8069cce:	2b38      	cmp	r3, #56	@ 0x38
 8069cd0:	d004      	beq.n	8069cdc <HAL_SPI_Init+0x11c>
 8069cd2:	f240 1145 	movw	r1, #325	@ 0x145
 8069cd6:	483a      	ldr	r0, [pc, #232]	@ (8069dc0 <HAL_SPI_Init+0x200>)
 8069cd8:	f7fc fbb5 	bl	8066446 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8069cdc:	687b      	ldr	r3, [r7, #4]
 8069cde:	6a1b      	ldr	r3, [r3, #32]
 8069ce0:	2b00      	cmp	r3, #0
 8069ce2:	d008      	beq.n	8069cf6 <HAL_SPI_Init+0x136>
 8069ce4:	687b      	ldr	r3, [r7, #4]
 8069ce6:	6a1b      	ldr	r3, [r3, #32]
 8069ce8:	2b80      	cmp	r3, #128	@ 0x80
 8069cea:	d004      	beq.n	8069cf6 <HAL_SPI_Init+0x136>
 8069cec:	f44f 71a3 	mov.w	r1, #326	@ 0x146
 8069cf0:	4833      	ldr	r0, [pc, #204]	@ (8069dc0 <HAL_SPI_Init+0x200>)
 8069cf2:	f7fc fba8 	bl	8066446 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8069cf6:	687b      	ldr	r3, [r7, #4]
 8069cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8069cfa:	2b00      	cmp	r3, #0
 8069cfc:	d008      	beq.n	8069d10 <HAL_SPI_Init+0x150>
 8069cfe:	687b      	ldr	r3, [r7, #4]
 8069d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8069d02:	2b10      	cmp	r3, #16
 8069d04:	d004      	beq.n	8069d10 <HAL_SPI_Init+0x150>
 8069d06:	f240 1147 	movw	r1, #327	@ 0x147
 8069d0a:	482d      	ldr	r0, [pc, #180]	@ (8069dc0 <HAL_SPI_Init+0x200>)
 8069d0c:	f7fc fb9b 	bl	8066446 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8069d10:	687b      	ldr	r3, [r7, #4]
 8069d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8069d14:	2b00      	cmp	r3, #0
 8069d16:	d155      	bne.n	8069dc4 <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8069d18:	687b      	ldr	r3, [r7, #4]
 8069d1a:	691b      	ldr	r3, [r3, #16]
 8069d1c:	2b00      	cmp	r3, #0
 8069d1e:	d008      	beq.n	8069d32 <HAL_SPI_Init+0x172>
 8069d20:	687b      	ldr	r3, [r7, #4]
 8069d22:	691b      	ldr	r3, [r3, #16]
 8069d24:	2b02      	cmp	r3, #2
 8069d26:	d004      	beq.n	8069d32 <HAL_SPI_Init+0x172>
 8069d28:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8069d2c:	4824      	ldr	r0, [pc, #144]	@ (8069dc0 <HAL_SPI_Init+0x200>)
 8069d2e:	f7fc fb8a 	bl	8066446 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8069d32:	687b      	ldr	r3, [r7, #4]
 8069d34:	695b      	ldr	r3, [r3, #20]
 8069d36:	2b00      	cmp	r3, #0
 8069d38:	d008      	beq.n	8069d4c <HAL_SPI_Init+0x18c>
 8069d3a:	687b      	ldr	r3, [r7, #4]
 8069d3c:	695b      	ldr	r3, [r3, #20]
 8069d3e:	2b01      	cmp	r3, #1
 8069d40:	d004      	beq.n	8069d4c <HAL_SPI_Init+0x18c>
 8069d42:	f240 114b 	movw	r1, #331	@ 0x14b
 8069d46:	481e      	ldr	r0, [pc, #120]	@ (8069dc0 <HAL_SPI_Init+0x200>)
 8069d48:	f7fc fb7d 	bl	8066446 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8069d4c:	687b      	ldr	r3, [r7, #4]
 8069d4e:	685b      	ldr	r3, [r3, #4]
 8069d50:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8069d54:	d125      	bne.n	8069da2 <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8069d56:	687b      	ldr	r3, [r7, #4]
 8069d58:	69db      	ldr	r3, [r3, #28]
 8069d5a:	2b00      	cmp	r3, #0
 8069d5c:	d05d      	beq.n	8069e1a <HAL_SPI_Init+0x25a>
 8069d5e:	687b      	ldr	r3, [r7, #4]
 8069d60:	69db      	ldr	r3, [r3, #28]
 8069d62:	2b08      	cmp	r3, #8
 8069d64:	d059      	beq.n	8069e1a <HAL_SPI_Init+0x25a>
 8069d66:	687b      	ldr	r3, [r7, #4]
 8069d68:	69db      	ldr	r3, [r3, #28]
 8069d6a:	2b10      	cmp	r3, #16
 8069d6c:	d055      	beq.n	8069e1a <HAL_SPI_Init+0x25a>
 8069d6e:	687b      	ldr	r3, [r7, #4]
 8069d70:	69db      	ldr	r3, [r3, #28]
 8069d72:	2b18      	cmp	r3, #24
 8069d74:	d051      	beq.n	8069e1a <HAL_SPI_Init+0x25a>
 8069d76:	687b      	ldr	r3, [r7, #4]
 8069d78:	69db      	ldr	r3, [r3, #28]
 8069d7a:	2b20      	cmp	r3, #32
 8069d7c:	d04d      	beq.n	8069e1a <HAL_SPI_Init+0x25a>
 8069d7e:	687b      	ldr	r3, [r7, #4]
 8069d80:	69db      	ldr	r3, [r3, #28]
 8069d82:	2b28      	cmp	r3, #40	@ 0x28
 8069d84:	d049      	beq.n	8069e1a <HAL_SPI_Init+0x25a>
 8069d86:	687b      	ldr	r3, [r7, #4]
 8069d88:	69db      	ldr	r3, [r3, #28]
 8069d8a:	2b30      	cmp	r3, #48	@ 0x30
 8069d8c:	d045      	beq.n	8069e1a <HAL_SPI_Init+0x25a>
 8069d8e:	687b      	ldr	r3, [r7, #4]
 8069d90:	69db      	ldr	r3, [r3, #28]
 8069d92:	2b38      	cmp	r3, #56	@ 0x38
 8069d94:	d041      	beq.n	8069e1a <HAL_SPI_Init+0x25a>
 8069d96:	f240 114f 	movw	r1, #335	@ 0x14f
 8069d9a:	4809      	ldr	r0, [pc, #36]	@ (8069dc0 <HAL_SPI_Init+0x200>)
 8069d9c:	f7fc fb53 	bl	8066446 <assert_failed>
 8069da0:	e03b      	b.n	8069e1a <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8069da2:	687b      	ldr	r3, [r7, #4]
 8069da4:	2200      	movs	r2, #0
 8069da6:	61da      	str	r2, [r3, #28]
 8069da8:	e037      	b.n	8069e1a <HAL_SPI_Init+0x25a>
 8069daa:	bf00      	nop
 8069dac:	40013000 	.word	0x40013000
 8069db0:	40003800 	.word	0x40003800
 8069db4:	40003c00 	.word	0x40003c00
 8069db8:	40013400 	.word	0x40013400
 8069dbc:	40015000 	.word	0x40015000
 8069dc0:	080717cc 	.word	0x080717cc
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8069dc4:	687b      	ldr	r3, [r7, #4]
 8069dc6:	69db      	ldr	r3, [r3, #28]
 8069dc8:	2b00      	cmp	r3, #0
 8069dca:	d020      	beq.n	8069e0e <HAL_SPI_Init+0x24e>
 8069dcc:	687b      	ldr	r3, [r7, #4]
 8069dce:	69db      	ldr	r3, [r3, #28]
 8069dd0:	2b08      	cmp	r3, #8
 8069dd2:	d01c      	beq.n	8069e0e <HAL_SPI_Init+0x24e>
 8069dd4:	687b      	ldr	r3, [r7, #4]
 8069dd6:	69db      	ldr	r3, [r3, #28]
 8069dd8:	2b10      	cmp	r3, #16
 8069dda:	d018      	beq.n	8069e0e <HAL_SPI_Init+0x24e>
 8069ddc:	687b      	ldr	r3, [r7, #4]
 8069dde:	69db      	ldr	r3, [r3, #28]
 8069de0:	2b18      	cmp	r3, #24
 8069de2:	d014      	beq.n	8069e0e <HAL_SPI_Init+0x24e>
 8069de4:	687b      	ldr	r3, [r7, #4]
 8069de6:	69db      	ldr	r3, [r3, #28]
 8069de8:	2b20      	cmp	r3, #32
 8069dea:	d010      	beq.n	8069e0e <HAL_SPI_Init+0x24e>
 8069dec:	687b      	ldr	r3, [r7, #4]
 8069dee:	69db      	ldr	r3, [r3, #28]
 8069df0:	2b28      	cmp	r3, #40	@ 0x28
 8069df2:	d00c      	beq.n	8069e0e <HAL_SPI_Init+0x24e>
 8069df4:	687b      	ldr	r3, [r7, #4]
 8069df6:	69db      	ldr	r3, [r3, #28]
 8069df8:	2b30      	cmp	r3, #48	@ 0x30
 8069dfa:	d008      	beq.n	8069e0e <HAL_SPI_Init+0x24e>
 8069dfc:	687b      	ldr	r3, [r7, #4]
 8069dfe:	69db      	ldr	r3, [r3, #28]
 8069e00:	2b38      	cmp	r3, #56	@ 0x38
 8069e02:	d004      	beq.n	8069e0e <HAL_SPI_Init+0x24e>
 8069e04:	f240 1159 	movw	r1, #345	@ 0x159
 8069e08:	484a      	ldr	r0, [pc, #296]	@ (8069f34 <HAL_SPI_Init+0x374>)
 8069e0a:	f7fc fb1c 	bl	8066446 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8069e0e:	687b      	ldr	r3, [r7, #4]
 8069e10:	2200      	movs	r2, #0
 8069e12:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8069e14:	687b      	ldr	r3, [r7, #4]
 8069e16:	2200      	movs	r2, #0
 8069e18:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8069e1a:	687b      	ldr	r3, [r7, #4]
 8069e1c:	2200      	movs	r2, #0
 8069e1e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8069e20:	687b      	ldr	r3, [r7, #4]
 8069e22:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8069e26:	b2db      	uxtb	r3, r3
 8069e28:	2b00      	cmp	r3, #0
 8069e2a:	d126      	bne.n	8069e7a <HAL_SPI_Init+0x2ba>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8069e2c:	687b      	ldr	r3, [r7, #4]
 8069e2e:	2200      	movs	r2, #0
 8069e30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 8069e34:	687b      	ldr	r3, [r7, #4]
 8069e36:	4a40      	ldr	r2, [pc, #256]	@ (8069f38 <HAL_SPI_Init+0x378>)
 8069e38:	659a      	str	r2, [r3, #88]	@ 0x58
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 8069e3a:	687b      	ldr	r3, [r7, #4]
 8069e3c:	4a3f      	ldr	r2, [pc, #252]	@ (8069f3c <HAL_SPI_Init+0x37c>)
 8069e3e:	65da      	str	r2, [r3, #92]	@ 0x5c
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 8069e40:	687b      	ldr	r3, [r7, #4]
 8069e42:	4a3f      	ldr	r2, [pc, #252]	@ (8069f40 <HAL_SPI_Init+0x380>)
 8069e44:	661a      	str	r2, [r3, #96]	@ 0x60
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 8069e46:	687b      	ldr	r3, [r7, #4]
 8069e48:	4a3e      	ldr	r2, [pc, #248]	@ (8069f44 <HAL_SPI_Init+0x384>)
 8069e4a:	665a      	str	r2, [r3, #100]	@ 0x64
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 8069e4c:	687b      	ldr	r3, [r7, #4]
 8069e4e:	4a3e      	ldr	r2, [pc, #248]	@ (8069f48 <HAL_SPI_Init+0x388>)
 8069e50:	669a      	str	r2, [r3, #104]	@ 0x68
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 8069e52:	687b      	ldr	r3, [r7, #4]
 8069e54:	4a3d      	ldr	r2, [pc, #244]	@ (8069f4c <HAL_SPI_Init+0x38c>)
 8069e56:	66da      	str	r2, [r3, #108]	@ 0x6c
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8069e58:	687b      	ldr	r3, [r7, #4]
 8069e5a:	4a3d      	ldr	r2, [pc, #244]	@ (8069f50 <HAL_SPI_Init+0x390>)
 8069e5c:	671a      	str	r2, [r3, #112]	@ 0x70
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8069e5e:	687b      	ldr	r3, [r7, #4]
 8069e60:	4a3c      	ldr	r2, [pc, #240]	@ (8069f54 <HAL_SPI_Init+0x394>)
 8069e62:	675a      	str	r2, [r3, #116]	@ 0x74

    if (hspi->MspInitCallback == NULL)
 8069e64:	687b      	ldr	r3, [r7, #4]
 8069e66:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8069e68:	2b00      	cmp	r3, #0
 8069e6a:	d102      	bne.n	8069e72 <HAL_SPI_Init+0x2b2>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 8069e6c:	687b      	ldr	r3, [r7, #4]
 8069e6e:	4a3a      	ldr	r2, [pc, #232]	@ (8069f58 <HAL_SPI_Init+0x398>)
 8069e70:	679a      	str	r2, [r3, #120]	@ 0x78
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 8069e72:	687b      	ldr	r3, [r7, #4]
 8069e74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8069e76:	6878      	ldr	r0, [r7, #4]
 8069e78:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8069e7a:	687b      	ldr	r3, [r7, #4]
 8069e7c:	2202      	movs	r2, #2
 8069e7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8069e82:	687b      	ldr	r3, [r7, #4]
 8069e84:	681b      	ldr	r3, [r3, #0]
 8069e86:	681a      	ldr	r2, [r3, #0]
 8069e88:	687b      	ldr	r3, [r7, #4]
 8069e8a:	681b      	ldr	r3, [r3, #0]
 8069e8c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8069e90:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8069e92:	687b      	ldr	r3, [r7, #4]
 8069e94:	685b      	ldr	r3, [r3, #4]
 8069e96:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8069e9a:	687b      	ldr	r3, [r7, #4]
 8069e9c:	689b      	ldr	r3, [r3, #8]
 8069e9e:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8069ea2:	431a      	orrs	r2, r3
 8069ea4:	687b      	ldr	r3, [r7, #4]
 8069ea6:	68db      	ldr	r3, [r3, #12]
 8069ea8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8069eac:	431a      	orrs	r2, r3
 8069eae:	687b      	ldr	r3, [r7, #4]
 8069eb0:	691b      	ldr	r3, [r3, #16]
 8069eb2:	f003 0302 	and.w	r3, r3, #2
 8069eb6:	431a      	orrs	r2, r3
 8069eb8:	687b      	ldr	r3, [r7, #4]
 8069eba:	695b      	ldr	r3, [r3, #20]
 8069ebc:	f003 0301 	and.w	r3, r3, #1
 8069ec0:	431a      	orrs	r2, r3
 8069ec2:	687b      	ldr	r3, [r7, #4]
 8069ec4:	699b      	ldr	r3, [r3, #24]
 8069ec6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8069eca:	431a      	orrs	r2, r3
 8069ecc:	687b      	ldr	r3, [r7, #4]
 8069ece:	69db      	ldr	r3, [r3, #28]
 8069ed0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8069ed4:	431a      	orrs	r2, r3
 8069ed6:	687b      	ldr	r3, [r7, #4]
 8069ed8:	6a1b      	ldr	r3, [r3, #32]
 8069eda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8069ede:	ea42 0103 	orr.w	r1, r2, r3
 8069ee2:	687b      	ldr	r3, [r7, #4]
 8069ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8069ee6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8069eea:	687b      	ldr	r3, [r7, #4]
 8069eec:	681b      	ldr	r3, [r3, #0]
 8069eee:	430a      	orrs	r2, r1
 8069ef0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8069ef2:	687b      	ldr	r3, [r7, #4]
 8069ef4:	699b      	ldr	r3, [r3, #24]
 8069ef6:	0c1b      	lsrs	r3, r3, #16
 8069ef8:	f003 0104 	and.w	r1, r3, #4
 8069efc:	687b      	ldr	r3, [r7, #4]
 8069efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8069f00:	f003 0210 	and.w	r2, r3, #16
 8069f04:	687b      	ldr	r3, [r7, #4]
 8069f06:	681b      	ldr	r3, [r3, #0]
 8069f08:	430a      	orrs	r2, r1
 8069f0a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8069f0c:	687b      	ldr	r3, [r7, #4]
 8069f0e:	681b      	ldr	r3, [r3, #0]
 8069f10:	69da      	ldr	r2, [r3, #28]
 8069f12:	687b      	ldr	r3, [r7, #4]
 8069f14:	681b      	ldr	r3, [r3, #0]
 8069f16:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8069f1a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8069f1c:	687b      	ldr	r3, [r7, #4]
 8069f1e:	2200      	movs	r2, #0
 8069f20:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8069f22:	687b      	ldr	r3, [r7, #4]
 8069f24:	2201      	movs	r2, #1
 8069f26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8069f2a:	2300      	movs	r3, #0
}
 8069f2c:	4618      	mov	r0, r3
 8069f2e:	3708      	adds	r7, #8
 8069f30:	46bd      	mov	sp, r7
 8069f32:	bd80      	pop	{r7, pc}
 8069f34:	080717cc 	.word	0x080717cc
 8069f38:	0806a991 	.word	0x0806a991
 8069f3c:	0806a9a5 	.word	0x0806a9a5
 8069f40:	0806a9b9 	.word	0x0806a9b9
 8069f44:	0806a9cd 	.word	0x0806a9cd
 8069f48:	0806a9e1 	.word	0x0806a9e1
 8069f4c:	0806a9f5 	.word	0x0806a9f5
 8069f50:	08061839 	.word	0x08061839
 8069f54:	0806aa09 	.word	0x0806aa09
 8069f58:	080664c9 	.word	0x080664c9

08069f5c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8069f5c:	b580      	push	{r7, lr}
 8069f5e:	b088      	sub	sp, #32
 8069f60:	af00      	add	r7, sp, #0
 8069f62:	60f8      	str	r0, [r7, #12]
 8069f64:	60b9      	str	r1, [r7, #8]
 8069f66:	603b      	str	r3, [r7, #0]
 8069f68:	4613      	mov	r3, r2
 8069f6a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8069f6c:	68fb      	ldr	r3, [r7, #12]
 8069f6e:	689b      	ldr	r3, [r3, #8]
 8069f70:	2b00      	cmp	r3, #0
 8069f72:	d009      	beq.n	8069f88 <HAL_SPI_Transmit+0x2c>
 8069f74:	68fb      	ldr	r3, [r7, #12]
 8069f76:	689b      	ldr	r3, [r3, #8]
 8069f78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8069f7c:	d004      	beq.n	8069f88 <HAL_SPI_Transmit+0x2c>
 8069f7e:	f240 3107 	movw	r1, #775	@ 0x307
 8069f82:	4886      	ldr	r0, [pc, #536]	@ (806a19c <HAL_SPI_Transmit+0x240>)
 8069f84:	f7fc fa5f 	bl	8066446 <assert_failed>

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8069f88:	f7fc ffbe 	bl	8066f08 <HAL_GetTick>
 8069f8c:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8069f8e:	88fb      	ldrh	r3, [r7, #6]
 8069f90:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8069f92:	68fb      	ldr	r3, [r7, #12]
 8069f94:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8069f98:	b2db      	uxtb	r3, r3
 8069f9a:	2b01      	cmp	r3, #1
 8069f9c:	d001      	beq.n	8069fa2 <HAL_SPI_Transmit+0x46>
  {
    return HAL_BUSY;
 8069f9e:	2302      	movs	r3, #2
 8069fa0:	e12c      	b.n	806a1fc <HAL_SPI_Transmit+0x2a0>
  }

  if ((pData == NULL) || (Size == 0U))
 8069fa2:	68bb      	ldr	r3, [r7, #8]
 8069fa4:	2b00      	cmp	r3, #0
 8069fa6:	d002      	beq.n	8069fae <HAL_SPI_Transmit+0x52>
 8069fa8:	88fb      	ldrh	r3, [r7, #6]
 8069faa:	2b00      	cmp	r3, #0
 8069fac:	d101      	bne.n	8069fb2 <HAL_SPI_Transmit+0x56>
  {
    return HAL_ERROR;
 8069fae:	2301      	movs	r3, #1
 8069fb0:	e124      	b.n	806a1fc <HAL_SPI_Transmit+0x2a0>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8069fb2:	68fb      	ldr	r3, [r7, #12]
 8069fb4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8069fb8:	2b01      	cmp	r3, #1
 8069fba:	d101      	bne.n	8069fc0 <HAL_SPI_Transmit+0x64>
 8069fbc:	2302      	movs	r3, #2
 8069fbe:	e11d      	b.n	806a1fc <HAL_SPI_Transmit+0x2a0>
 8069fc0:	68fb      	ldr	r3, [r7, #12]
 8069fc2:	2201      	movs	r2, #1
 8069fc4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8069fc8:	68fb      	ldr	r3, [r7, #12]
 8069fca:	2203      	movs	r2, #3
 8069fcc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8069fd0:	68fb      	ldr	r3, [r7, #12]
 8069fd2:	2200      	movs	r2, #0
 8069fd4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8069fd6:	68fb      	ldr	r3, [r7, #12]
 8069fd8:	68ba      	ldr	r2, [r7, #8]
 8069fda:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8069fdc:	68fb      	ldr	r3, [r7, #12]
 8069fde:	88fa      	ldrh	r2, [r7, #6]
 8069fe0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8069fe2:	68fb      	ldr	r3, [r7, #12]
 8069fe4:	88fa      	ldrh	r2, [r7, #6]
 8069fe6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8069fe8:	68fb      	ldr	r3, [r7, #12]
 8069fea:	2200      	movs	r2, #0
 8069fec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8069fee:	68fb      	ldr	r3, [r7, #12]
 8069ff0:	2200      	movs	r2, #0
 8069ff2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8069ff4:	68fb      	ldr	r3, [r7, #12]
 8069ff6:	2200      	movs	r2, #0
 8069ff8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8069ffa:	68fb      	ldr	r3, [r7, #12]
 8069ffc:	2200      	movs	r2, #0
 8069ffe:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 806a000:	68fb      	ldr	r3, [r7, #12]
 806a002:	2200      	movs	r2, #0
 806a004:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 806a006:	68fb      	ldr	r3, [r7, #12]
 806a008:	689b      	ldr	r3, [r3, #8]
 806a00a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 806a00e:	d10f      	bne.n	806a030 <HAL_SPI_Transmit+0xd4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 806a010:	68fb      	ldr	r3, [r7, #12]
 806a012:	681b      	ldr	r3, [r3, #0]
 806a014:	681a      	ldr	r2, [r3, #0]
 806a016:	68fb      	ldr	r3, [r7, #12]
 806a018:	681b      	ldr	r3, [r3, #0]
 806a01a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 806a01e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 806a020:	68fb      	ldr	r3, [r7, #12]
 806a022:	681b      	ldr	r3, [r3, #0]
 806a024:	681a      	ldr	r2, [r3, #0]
 806a026:	68fb      	ldr	r3, [r7, #12]
 806a028:	681b      	ldr	r3, [r3, #0]
 806a02a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 806a02e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 806a030:	68fb      	ldr	r3, [r7, #12]
 806a032:	681b      	ldr	r3, [r3, #0]
 806a034:	681b      	ldr	r3, [r3, #0]
 806a036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 806a03a:	2b40      	cmp	r3, #64	@ 0x40
 806a03c:	d007      	beq.n	806a04e <HAL_SPI_Transmit+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 806a03e:	68fb      	ldr	r3, [r7, #12]
 806a040:	681b      	ldr	r3, [r3, #0]
 806a042:	681a      	ldr	r2, [r3, #0]
 806a044:	68fb      	ldr	r3, [r7, #12]
 806a046:	681b      	ldr	r3, [r3, #0]
 806a048:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 806a04c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 806a04e:	68fb      	ldr	r3, [r7, #12]
 806a050:	68db      	ldr	r3, [r3, #12]
 806a052:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 806a056:	d152      	bne.n	806a0fe <HAL_SPI_Transmit+0x1a2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 806a058:	68fb      	ldr	r3, [r7, #12]
 806a05a:	685b      	ldr	r3, [r3, #4]
 806a05c:	2b00      	cmp	r3, #0
 806a05e:	d002      	beq.n	806a066 <HAL_SPI_Transmit+0x10a>
 806a060:	8b7b      	ldrh	r3, [r7, #26]
 806a062:	2b01      	cmp	r3, #1
 806a064:	d145      	bne.n	806a0f2 <HAL_SPI_Transmit+0x196>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 806a066:	68fb      	ldr	r3, [r7, #12]
 806a068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 806a06a:	881a      	ldrh	r2, [r3, #0]
 806a06c:	68fb      	ldr	r3, [r7, #12]
 806a06e:	681b      	ldr	r3, [r3, #0]
 806a070:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 806a072:	68fb      	ldr	r3, [r7, #12]
 806a074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 806a076:	1c9a      	adds	r2, r3, #2
 806a078:	68fb      	ldr	r3, [r7, #12]
 806a07a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 806a07c:	68fb      	ldr	r3, [r7, #12]
 806a07e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 806a080:	b29b      	uxth	r3, r3
 806a082:	3b01      	subs	r3, #1
 806a084:	b29a      	uxth	r2, r3
 806a086:	68fb      	ldr	r3, [r7, #12]
 806a088:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 806a08a:	e032      	b.n	806a0f2 <HAL_SPI_Transmit+0x196>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 806a08c:	68fb      	ldr	r3, [r7, #12]
 806a08e:	681b      	ldr	r3, [r3, #0]
 806a090:	689b      	ldr	r3, [r3, #8]
 806a092:	f003 0302 	and.w	r3, r3, #2
 806a096:	2b02      	cmp	r3, #2
 806a098:	d112      	bne.n	806a0c0 <HAL_SPI_Transmit+0x164>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 806a09a:	68fb      	ldr	r3, [r7, #12]
 806a09c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 806a09e:	881a      	ldrh	r2, [r3, #0]
 806a0a0:	68fb      	ldr	r3, [r7, #12]
 806a0a2:	681b      	ldr	r3, [r3, #0]
 806a0a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 806a0a6:	68fb      	ldr	r3, [r7, #12]
 806a0a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 806a0aa:	1c9a      	adds	r2, r3, #2
 806a0ac:	68fb      	ldr	r3, [r7, #12]
 806a0ae:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 806a0b0:	68fb      	ldr	r3, [r7, #12]
 806a0b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 806a0b4:	b29b      	uxth	r3, r3
 806a0b6:	3b01      	subs	r3, #1
 806a0b8:	b29a      	uxth	r2, r3
 806a0ba:	68fb      	ldr	r3, [r7, #12]
 806a0bc:	86da      	strh	r2, [r3, #54]	@ 0x36
 806a0be:	e018      	b.n	806a0f2 <HAL_SPI_Transmit+0x196>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 806a0c0:	f7fc ff22 	bl	8066f08 <HAL_GetTick>
 806a0c4:	4602      	mov	r2, r0
 806a0c6:	69fb      	ldr	r3, [r7, #28]
 806a0c8:	1ad3      	subs	r3, r2, r3
 806a0ca:	683a      	ldr	r2, [r7, #0]
 806a0cc:	429a      	cmp	r2, r3
 806a0ce:	d803      	bhi.n	806a0d8 <HAL_SPI_Transmit+0x17c>
 806a0d0:	683b      	ldr	r3, [r7, #0]
 806a0d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 806a0d6:	d102      	bne.n	806a0de <HAL_SPI_Transmit+0x182>
 806a0d8:	683b      	ldr	r3, [r7, #0]
 806a0da:	2b00      	cmp	r3, #0
 806a0dc:	d109      	bne.n	806a0f2 <HAL_SPI_Transmit+0x196>
        {
          hspi->State = HAL_SPI_STATE_READY;
 806a0de:	68fb      	ldr	r3, [r7, #12]
 806a0e0:	2201      	movs	r2, #1
 806a0e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 806a0e6:	68fb      	ldr	r3, [r7, #12]
 806a0e8:	2200      	movs	r2, #0
 806a0ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 806a0ee:	2303      	movs	r3, #3
 806a0f0:	e084      	b.n	806a1fc <HAL_SPI_Transmit+0x2a0>
    while (hspi->TxXferCount > 0U)
 806a0f2:	68fb      	ldr	r3, [r7, #12]
 806a0f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 806a0f6:	b29b      	uxth	r3, r3
 806a0f8:	2b00      	cmp	r3, #0
 806a0fa:	d1c7      	bne.n	806a08c <HAL_SPI_Transmit+0x130>
 806a0fc:	e055      	b.n	806a1aa <HAL_SPI_Transmit+0x24e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 806a0fe:	68fb      	ldr	r3, [r7, #12]
 806a100:	685b      	ldr	r3, [r3, #4]
 806a102:	2b00      	cmp	r3, #0
 806a104:	d002      	beq.n	806a10c <HAL_SPI_Transmit+0x1b0>
 806a106:	8b7b      	ldrh	r3, [r7, #26]
 806a108:	2b01      	cmp	r3, #1
 806a10a:	d149      	bne.n	806a1a0 <HAL_SPI_Transmit+0x244>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 806a10c:	68fb      	ldr	r3, [r7, #12]
 806a10e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 806a110:	68fb      	ldr	r3, [r7, #12]
 806a112:	681b      	ldr	r3, [r3, #0]
 806a114:	330c      	adds	r3, #12
 806a116:	7812      	ldrb	r2, [r2, #0]
 806a118:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 806a11a:	68fb      	ldr	r3, [r7, #12]
 806a11c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 806a11e:	1c5a      	adds	r2, r3, #1
 806a120:	68fb      	ldr	r3, [r7, #12]
 806a122:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 806a124:	68fb      	ldr	r3, [r7, #12]
 806a126:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 806a128:	b29b      	uxth	r3, r3
 806a12a:	3b01      	subs	r3, #1
 806a12c:	b29a      	uxth	r2, r3
 806a12e:	68fb      	ldr	r3, [r7, #12]
 806a130:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 806a132:	e035      	b.n	806a1a0 <HAL_SPI_Transmit+0x244>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 806a134:	68fb      	ldr	r3, [r7, #12]
 806a136:	681b      	ldr	r3, [r3, #0]
 806a138:	689b      	ldr	r3, [r3, #8]
 806a13a:	f003 0302 	and.w	r3, r3, #2
 806a13e:	2b02      	cmp	r3, #2
 806a140:	d113      	bne.n	806a16a <HAL_SPI_Transmit+0x20e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 806a142:	68fb      	ldr	r3, [r7, #12]
 806a144:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 806a146:	68fb      	ldr	r3, [r7, #12]
 806a148:	681b      	ldr	r3, [r3, #0]
 806a14a:	330c      	adds	r3, #12
 806a14c:	7812      	ldrb	r2, [r2, #0]
 806a14e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 806a150:	68fb      	ldr	r3, [r7, #12]
 806a152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 806a154:	1c5a      	adds	r2, r3, #1
 806a156:	68fb      	ldr	r3, [r7, #12]
 806a158:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 806a15a:	68fb      	ldr	r3, [r7, #12]
 806a15c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 806a15e:	b29b      	uxth	r3, r3
 806a160:	3b01      	subs	r3, #1
 806a162:	b29a      	uxth	r2, r3
 806a164:	68fb      	ldr	r3, [r7, #12]
 806a166:	86da      	strh	r2, [r3, #54]	@ 0x36
 806a168:	e01a      	b.n	806a1a0 <HAL_SPI_Transmit+0x244>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 806a16a:	f7fc fecd 	bl	8066f08 <HAL_GetTick>
 806a16e:	4602      	mov	r2, r0
 806a170:	69fb      	ldr	r3, [r7, #28]
 806a172:	1ad3      	subs	r3, r2, r3
 806a174:	683a      	ldr	r2, [r7, #0]
 806a176:	429a      	cmp	r2, r3
 806a178:	d803      	bhi.n	806a182 <HAL_SPI_Transmit+0x226>
 806a17a:	683b      	ldr	r3, [r7, #0]
 806a17c:	f1b3 3fff 	cmp.w	r3, #4294967295
 806a180:	d102      	bne.n	806a188 <HAL_SPI_Transmit+0x22c>
 806a182:	683b      	ldr	r3, [r7, #0]
 806a184:	2b00      	cmp	r3, #0
 806a186:	d10b      	bne.n	806a1a0 <HAL_SPI_Transmit+0x244>
        {
          hspi->State = HAL_SPI_STATE_READY;
 806a188:	68fb      	ldr	r3, [r7, #12]
 806a18a:	2201      	movs	r2, #1
 806a18c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 806a190:	68fb      	ldr	r3, [r7, #12]
 806a192:	2200      	movs	r2, #0
 806a194:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 806a198:	2303      	movs	r3, #3
 806a19a:	e02f      	b.n	806a1fc <HAL_SPI_Transmit+0x2a0>
 806a19c:	080717cc 	.word	0x080717cc
    while (hspi->TxXferCount > 0U)
 806a1a0:	68fb      	ldr	r3, [r7, #12]
 806a1a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 806a1a4:	b29b      	uxth	r3, r3
 806a1a6:	2b00      	cmp	r3, #0
 806a1a8:	d1c4      	bne.n	806a134 <HAL_SPI_Transmit+0x1d8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 806a1aa:	69fa      	ldr	r2, [r7, #28]
 806a1ac:	6839      	ldr	r1, [r7, #0]
 806a1ae:	68f8      	ldr	r0, [r7, #12]
 806a1b0:	f000 fd52 	bl	806ac58 <SPI_EndRxTxTransaction>
 806a1b4:	4603      	mov	r3, r0
 806a1b6:	2b00      	cmp	r3, #0
 806a1b8:	d002      	beq.n	806a1c0 <HAL_SPI_Transmit+0x264>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 806a1ba:	68fb      	ldr	r3, [r7, #12]
 806a1bc:	2220      	movs	r2, #32
 806a1be:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 806a1c0:	68fb      	ldr	r3, [r7, #12]
 806a1c2:	689b      	ldr	r3, [r3, #8]
 806a1c4:	2b00      	cmp	r3, #0
 806a1c6:	d10a      	bne.n	806a1de <HAL_SPI_Transmit+0x282>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 806a1c8:	2300      	movs	r3, #0
 806a1ca:	617b      	str	r3, [r7, #20]
 806a1cc:	68fb      	ldr	r3, [r7, #12]
 806a1ce:	681b      	ldr	r3, [r3, #0]
 806a1d0:	68db      	ldr	r3, [r3, #12]
 806a1d2:	617b      	str	r3, [r7, #20]
 806a1d4:	68fb      	ldr	r3, [r7, #12]
 806a1d6:	681b      	ldr	r3, [r3, #0]
 806a1d8:	689b      	ldr	r3, [r3, #8]
 806a1da:	617b      	str	r3, [r7, #20]
 806a1dc:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 806a1de:	68fb      	ldr	r3, [r7, #12]
 806a1e0:	2201      	movs	r2, #1
 806a1e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 806a1e6:	68fb      	ldr	r3, [r7, #12]
 806a1e8:	2200      	movs	r2, #0
 806a1ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 806a1ee:	68fb      	ldr	r3, [r7, #12]
 806a1f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 806a1f2:	2b00      	cmp	r3, #0
 806a1f4:	d001      	beq.n	806a1fa <HAL_SPI_Transmit+0x29e>
  {
    return HAL_ERROR;
 806a1f6:	2301      	movs	r3, #1
 806a1f8:	e000      	b.n	806a1fc <HAL_SPI_Transmit+0x2a0>
  }
  else
  {
    return HAL_OK;
 806a1fa:	2300      	movs	r3, #0
  }
}
 806a1fc:	4618      	mov	r0, r3
 806a1fe:	3720      	adds	r7, #32
 806a200:	46bd      	mov	sp, r7
 806a202:	bd80      	pop	{r7, pc}

0806a204 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 806a204:	b580      	push	{r7, lr}
 806a206:	b088      	sub	sp, #32
 806a208:	af02      	add	r7, sp, #8
 806a20a:	60f8      	str	r0, [r7, #12]
 806a20c:	60b9      	str	r1, [r7, #8]
 806a20e:	603b      	str	r3, [r7, #0]
 806a210:	4613      	mov	r3, r2
 806a212:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 806a214:	68fb      	ldr	r3, [r7, #12]
 806a216:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 806a21a:	b2db      	uxtb	r3, r3
 806a21c:	2b01      	cmp	r3, #1
 806a21e:	d001      	beq.n	806a224 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 806a220:	2302      	movs	r3, #2
 806a222:	e104      	b.n	806a42e <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 806a224:	68fb      	ldr	r3, [r7, #12]
 806a226:	685b      	ldr	r3, [r3, #4]
 806a228:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 806a22c:	d112      	bne.n	806a254 <HAL_SPI_Receive+0x50>
 806a22e:	68fb      	ldr	r3, [r7, #12]
 806a230:	689b      	ldr	r3, [r3, #8]
 806a232:	2b00      	cmp	r3, #0
 806a234:	d10e      	bne.n	806a254 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 806a236:	68fb      	ldr	r3, [r7, #12]
 806a238:	2204      	movs	r2, #4
 806a23a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 806a23e:	88fa      	ldrh	r2, [r7, #6]
 806a240:	683b      	ldr	r3, [r7, #0]
 806a242:	9300      	str	r3, [sp, #0]
 806a244:	4613      	mov	r3, r2
 806a246:	68ba      	ldr	r2, [r7, #8]
 806a248:	68b9      	ldr	r1, [r7, #8]
 806a24a:	68f8      	ldr	r0, [r7, #12]
 806a24c:	f000 f8f4 	bl	806a438 <HAL_SPI_TransmitReceive>
 806a250:	4603      	mov	r3, r0
 806a252:	e0ec      	b.n	806a42e <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 806a254:	f7fc fe58 	bl	8066f08 <HAL_GetTick>
 806a258:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 806a25a:	68bb      	ldr	r3, [r7, #8]
 806a25c:	2b00      	cmp	r3, #0
 806a25e:	d002      	beq.n	806a266 <HAL_SPI_Receive+0x62>
 806a260:	88fb      	ldrh	r3, [r7, #6]
 806a262:	2b00      	cmp	r3, #0
 806a264:	d101      	bne.n	806a26a <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 806a266:	2301      	movs	r3, #1
 806a268:	e0e1      	b.n	806a42e <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 806a26a:	68fb      	ldr	r3, [r7, #12]
 806a26c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 806a270:	2b01      	cmp	r3, #1
 806a272:	d101      	bne.n	806a278 <HAL_SPI_Receive+0x74>
 806a274:	2302      	movs	r3, #2
 806a276:	e0da      	b.n	806a42e <HAL_SPI_Receive+0x22a>
 806a278:	68fb      	ldr	r3, [r7, #12]
 806a27a:	2201      	movs	r2, #1
 806a27c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 806a280:	68fb      	ldr	r3, [r7, #12]
 806a282:	2204      	movs	r2, #4
 806a284:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 806a288:	68fb      	ldr	r3, [r7, #12]
 806a28a:	2200      	movs	r2, #0
 806a28c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 806a28e:	68fb      	ldr	r3, [r7, #12]
 806a290:	68ba      	ldr	r2, [r7, #8]
 806a292:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 806a294:	68fb      	ldr	r3, [r7, #12]
 806a296:	88fa      	ldrh	r2, [r7, #6]
 806a298:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 806a29a:	68fb      	ldr	r3, [r7, #12]
 806a29c:	88fa      	ldrh	r2, [r7, #6]
 806a29e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 806a2a0:	68fb      	ldr	r3, [r7, #12]
 806a2a2:	2200      	movs	r2, #0
 806a2a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 806a2a6:	68fb      	ldr	r3, [r7, #12]
 806a2a8:	2200      	movs	r2, #0
 806a2aa:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 806a2ac:	68fb      	ldr	r3, [r7, #12]
 806a2ae:	2200      	movs	r2, #0
 806a2b0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 806a2b2:	68fb      	ldr	r3, [r7, #12]
 806a2b4:	2200      	movs	r2, #0
 806a2b6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 806a2b8:	68fb      	ldr	r3, [r7, #12]
 806a2ba:	2200      	movs	r2, #0
 806a2bc:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 806a2be:	68fb      	ldr	r3, [r7, #12]
 806a2c0:	689b      	ldr	r3, [r3, #8]
 806a2c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 806a2c6:	d10f      	bne.n	806a2e8 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 806a2c8:	68fb      	ldr	r3, [r7, #12]
 806a2ca:	681b      	ldr	r3, [r3, #0]
 806a2cc:	681a      	ldr	r2, [r3, #0]
 806a2ce:	68fb      	ldr	r3, [r7, #12]
 806a2d0:	681b      	ldr	r3, [r3, #0]
 806a2d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 806a2d6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 806a2d8:	68fb      	ldr	r3, [r7, #12]
 806a2da:	681b      	ldr	r3, [r3, #0]
 806a2dc:	681a      	ldr	r2, [r3, #0]
 806a2de:	68fb      	ldr	r3, [r7, #12]
 806a2e0:	681b      	ldr	r3, [r3, #0]
 806a2e2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 806a2e6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 806a2e8:	68fb      	ldr	r3, [r7, #12]
 806a2ea:	681b      	ldr	r3, [r3, #0]
 806a2ec:	681b      	ldr	r3, [r3, #0]
 806a2ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 806a2f2:	2b40      	cmp	r3, #64	@ 0x40
 806a2f4:	d007      	beq.n	806a306 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 806a2f6:	68fb      	ldr	r3, [r7, #12]
 806a2f8:	681b      	ldr	r3, [r3, #0]
 806a2fa:	681a      	ldr	r2, [r3, #0]
 806a2fc:	68fb      	ldr	r3, [r7, #12]
 806a2fe:	681b      	ldr	r3, [r3, #0]
 806a300:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 806a304:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 806a306:	68fb      	ldr	r3, [r7, #12]
 806a308:	68db      	ldr	r3, [r3, #12]
 806a30a:	2b00      	cmp	r3, #0
 806a30c:	d170      	bne.n	806a3f0 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 806a30e:	e035      	b.n	806a37c <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 806a310:	68fb      	ldr	r3, [r7, #12]
 806a312:	681b      	ldr	r3, [r3, #0]
 806a314:	689b      	ldr	r3, [r3, #8]
 806a316:	f003 0301 	and.w	r3, r3, #1
 806a31a:	2b01      	cmp	r3, #1
 806a31c:	d115      	bne.n	806a34a <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 806a31e:	68fb      	ldr	r3, [r7, #12]
 806a320:	681b      	ldr	r3, [r3, #0]
 806a322:	f103 020c 	add.w	r2, r3, #12
 806a326:	68fb      	ldr	r3, [r7, #12]
 806a328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 806a32a:	7812      	ldrb	r2, [r2, #0]
 806a32c:	b2d2      	uxtb	r2, r2
 806a32e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 806a330:	68fb      	ldr	r3, [r7, #12]
 806a332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 806a334:	1c5a      	adds	r2, r3, #1
 806a336:	68fb      	ldr	r3, [r7, #12]
 806a338:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 806a33a:	68fb      	ldr	r3, [r7, #12]
 806a33c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 806a33e:	b29b      	uxth	r3, r3
 806a340:	3b01      	subs	r3, #1
 806a342:	b29a      	uxth	r2, r3
 806a344:	68fb      	ldr	r3, [r7, #12]
 806a346:	87da      	strh	r2, [r3, #62]	@ 0x3e
 806a348:	e018      	b.n	806a37c <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 806a34a:	f7fc fddd 	bl	8066f08 <HAL_GetTick>
 806a34e:	4602      	mov	r2, r0
 806a350:	697b      	ldr	r3, [r7, #20]
 806a352:	1ad3      	subs	r3, r2, r3
 806a354:	683a      	ldr	r2, [r7, #0]
 806a356:	429a      	cmp	r2, r3
 806a358:	d803      	bhi.n	806a362 <HAL_SPI_Receive+0x15e>
 806a35a:	683b      	ldr	r3, [r7, #0]
 806a35c:	f1b3 3fff 	cmp.w	r3, #4294967295
 806a360:	d102      	bne.n	806a368 <HAL_SPI_Receive+0x164>
 806a362:	683b      	ldr	r3, [r7, #0]
 806a364:	2b00      	cmp	r3, #0
 806a366:	d109      	bne.n	806a37c <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 806a368:	68fb      	ldr	r3, [r7, #12]
 806a36a:	2201      	movs	r2, #1
 806a36c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 806a370:	68fb      	ldr	r3, [r7, #12]
 806a372:	2200      	movs	r2, #0
 806a374:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 806a378:	2303      	movs	r3, #3
 806a37a:	e058      	b.n	806a42e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 806a37c:	68fb      	ldr	r3, [r7, #12]
 806a37e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 806a380:	b29b      	uxth	r3, r3
 806a382:	2b00      	cmp	r3, #0
 806a384:	d1c4      	bne.n	806a310 <HAL_SPI_Receive+0x10c>
 806a386:	e038      	b.n	806a3fa <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 806a388:	68fb      	ldr	r3, [r7, #12]
 806a38a:	681b      	ldr	r3, [r3, #0]
 806a38c:	689b      	ldr	r3, [r3, #8]
 806a38e:	f003 0301 	and.w	r3, r3, #1
 806a392:	2b01      	cmp	r3, #1
 806a394:	d113      	bne.n	806a3be <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 806a396:	68fb      	ldr	r3, [r7, #12]
 806a398:	681b      	ldr	r3, [r3, #0]
 806a39a:	68da      	ldr	r2, [r3, #12]
 806a39c:	68fb      	ldr	r3, [r7, #12]
 806a39e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 806a3a0:	b292      	uxth	r2, r2
 806a3a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 806a3a4:	68fb      	ldr	r3, [r7, #12]
 806a3a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 806a3a8:	1c9a      	adds	r2, r3, #2
 806a3aa:	68fb      	ldr	r3, [r7, #12]
 806a3ac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 806a3ae:	68fb      	ldr	r3, [r7, #12]
 806a3b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 806a3b2:	b29b      	uxth	r3, r3
 806a3b4:	3b01      	subs	r3, #1
 806a3b6:	b29a      	uxth	r2, r3
 806a3b8:	68fb      	ldr	r3, [r7, #12]
 806a3ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 806a3bc:	e018      	b.n	806a3f0 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 806a3be:	f7fc fda3 	bl	8066f08 <HAL_GetTick>
 806a3c2:	4602      	mov	r2, r0
 806a3c4:	697b      	ldr	r3, [r7, #20]
 806a3c6:	1ad3      	subs	r3, r2, r3
 806a3c8:	683a      	ldr	r2, [r7, #0]
 806a3ca:	429a      	cmp	r2, r3
 806a3cc:	d803      	bhi.n	806a3d6 <HAL_SPI_Receive+0x1d2>
 806a3ce:	683b      	ldr	r3, [r7, #0]
 806a3d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 806a3d4:	d102      	bne.n	806a3dc <HAL_SPI_Receive+0x1d8>
 806a3d6:	683b      	ldr	r3, [r7, #0]
 806a3d8:	2b00      	cmp	r3, #0
 806a3da:	d109      	bne.n	806a3f0 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 806a3dc:	68fb      	ldr	r3, [r7, #12]
 806a3de:	2201      	movs	r2, #1
 806a3e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 806a3e4:	68fb      	ldr	r3, [r7, #12]
 806a3e6:	2200      	movs	r2, #0
 806a3e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 806a3ec:	2303      	movs	r3, #3
 806a3ee:	e01e      	b.n	806a42e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 806a3f0:	68fb      	ldr	r3, [r7, #12]
 806a3f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 806a3f4:	b29b      	uxth	r3, r3
 806a3f6:	2b00      	cmp	r3, #0
 806a3f8:	d1c6      	bne.n	806a388 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 806a3fa:	697a      	ldr	r2, [r7, #20]
 806a3fc:	6839      	ldr	r1, [r7, #0]
 806a3fe:	68f8      	ldr	r0, [r7, #12]
 806a400:	f000 fbc4 	bl	806ab8c <SPI_EndRxTransaction>
 806a404:	4603      	mov	r3, r0
 806a406:	2b00      	cmp	r3, #0
 806a408:	d002      	beq.n	806a410 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 806a40a:	68fb      	ldr	r3, [r7, #12]
 806a40c:	2220      	movs	r2, #32
 806a40e:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 806a410:	68fb      	ldr	r3, [r7, #12]
 806a412:	2201      	movs	r2, #1
 806a414:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 806a418:	68fb      	ldr	r3, [r7, #12]
 806a41a:	2200      	movs	r2, #0
 806a41c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 806a420:	68fb      	ldr	r3, [r7, #12]
 806a422:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 806a424:	2b00      	cmp	r3, #0
 806a426:	d001      	beq.n	806a42c <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 806a428:	2301      	movs	r3, #1
 806a42a:	e000      	b.n	806a42e <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 806a42c:	2300      	movs	r3, #0
  }
}
 806a42e:	4618      	mov	r0, r3
 806a430:	3718      	adds	r7, #24
 806a432:	46bd      	mov	sp, r7
 806a434:	bd80      	pop	{r7, pc}
	...

0806a438 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 806a438:	b580      	push	{r7, lr}
 806a43a:	b08a      	sub	sp, #40	@ 0x28
 806a43c:	af00      	add	r7, sp, #0
 806a43e:	60f8      	str	r0, [r7, #12]
 806a440:	60b9      	str	r1, [r7, #8]
 806a442:	607a      	str	r2, [r7, #4]
 806a444:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 806a446:	2301      	movs	r3, #1
 806a448:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 806a44a:	68fb      	ldr	r3, [r7, #12]
 806a44c:	689b      	ldr	r3, [r3, #8]
 806a44e:	2b00      	cmp	r3, #0
 806a450:	d004      	beq.n	806a45c <HAL_SPI_TransmitReceive+0x24>
 806a452:	f240 417e 	movw	r1, #1150	@ 0x47e
 806a456:	4884      	ldr	r0, [pc, #528]	@ (806a668 <HAL_SPI_TransmitReceive+0x230>)
 806a458:	f7fb fff5 	bl	8066446 <assert_failed>

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 806a45c:	f7fc fd54 	bl	8066f08 <HAL_GetTick>
 806a460:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 806a462:	68fb      	ldr	r3, [r7, #12]
 806a464:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 806a468:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 806a46a:	68fb      	ldr	r3, [r7, #12]
 806a46c:	685b      	ldr	r3, [r3, #4]
 806a46e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 806a470:	887b      	ldrh	r3, [r7, #2]
 806a472:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 806a474:	7ffb      	ldrb	r3, [r7, #31]
 806a476:	2b01      	cmp	r3, #1
 806a478:	d00c      	beq.n	806a494 <HAL_SPI_TransmitReceive+0x5c>
 806a47a:	69bb      	ldr	r3, [r7, #24]
 806a47c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 806a480:	d106      	bne.n	806a490 <HAL_SPI_TransmitReceive+0x58>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 806a482:	68fb      	ldr	r3, [r7, #12]
 806a484:	689b      	ldr	r3, [r3, #8]
 806a486:	2b00      	cmp	r3, #0
 806a488:	d102      	bne.n	806a490 <HAL_SPI_TransmitReceive+0x58>
 806a48a:	7ffb      	ldrb	r3, [r7, #31]
 806a48c:	2b04      	cmp	r3, #4
 806a48e:	d001      	beq.n	806a494 <HAL_SPI_TransmitReceive+0x5c>
  {
    return HAL_BUSY;
 806a490:	2302      	movs	r3, #2
 806a492:	e182      	b.n	806a79a <HAL_SPI_TransmitReceive+0x362>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 806a494:	68bb      	ldr	r3, [r7, #8]
 806a496:	2b00      	cmp	r3, #0
 806a498:	d005      	beq.n	806a4a6 <HAL_SPI_TransmitReceive+0x6e>
 806a49a:	687b      	ldr	r3, [r7, #4]
 806a49c:	2b00      	cmp	r3, #0
 806a49e:	d002      	beq.n	806a4a6 <HAL_SPI_TransmitReceive+0x6e>
 806a4a0:	887b      	ldrh	r3, [r7, #2]
 806a4a2:	2b00      	cmp	r3, #0
 806a4a4:	d101      	bne.n	806a4aa <HAL_SPI_TransmitReceive+0x72>
  {
    return HAL_ERROR;
 806a4a6:	2301      	movs	r3, #1
 806a4a8:	e177      	b.n	806a79a <HAL_SPI_TransmitReceive+0x362>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 806a4aa:	68fb      	ldr	r3, [r7, #12]
 806a4ac:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 806a4b0:	2b01      	cmp	r3, #1
 806a4b2:	d101      	bne.n	806a4b8 <HAL_SPI_TransmitReceive+0x80>
 806a4b4:	2302      	movs	r3, #2
 806a4b6:	e170      	b.n	806a79a <HAL_SPI_TransmitReceive+0x362>
 806a4b8:	68fb      	ldr	r3, [r7, #12]
 806a4ba:	2201      	movs	r2, #1
 806a4bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 806a4c0:	68fb      	ldr	r3, [r7, #12]
 806a4c2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 806a4c6:	b2db      	uxtb	r3, r3
 806a4c8:	2b04      	cmp	r3, #4
 806a4ca:	d003      	beq.n	806a4d4 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 806a4cc:	68fb      	ldr	r3, [r7, #12]
 806a4ce:	2205      	movs	r2, #5
 806a4d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 806a4d4:	68fb      	ldr	r3, [r7, #12]
 806a4d6:	2200      	movs	r2, #0
 806a4d8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 806a4da:	68fb      	ldr	r3, [r7, #12]
 806a4dc:	687a      	ldr	r2, [r7, #4]
 806a4de:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 806a4e0:	68fb      	ldr	r3, [r7, #12]
 806a4e2:	887a      	ldrh	r2, [r7, #2]
 806a4e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 806a4e6:	68fb      	ldr	r3, [r7, #12]
 806a4e8:	887a      	ldrh	r2, [r7, #2]
 806a4ea:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 806a4ec:	68fb      	ldr	r3, [r7, #12]
 806a4ee:	68ba      	ldr	r2, [r7, #8]
 806a4f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 806a4f2:	68fb      	ldr	r3, [r7, #12]
 806a4f4:	887a      	ldrh	r2, [r7, #2]
 806a4f6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 806a4f8:	68fb      	ldr	r3, [r7, #12]
 806a4fa:	887a      	ldrh	r2, [r7, #2]
 806a4fc:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 806a4fe:	68fb      	ldr	r3, [r7, #12]
 806a500:	2200      	movs	r2, #0
 806a502:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 806a504:	68fb      	ldr	r3, [r7, #12]
 806a506:	2200      	movs	r2, #0
 806a508:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 806a50a:	68fb      	ldr	r3, [r7, #12]
 806a50c:	681b      	ldr	r3, [r3, #0]
 806a50e:	681b      	ldr	r3, [r3, #0]
 806a510:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 806a514:	2b40      	cmp	r3, #64	@ 0x40
 806a516:	d007      	beq.n	806a528 <HAL_SPI_TransmitReceive+0xf0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 806a518:	68fb      	ldr	r3, [r7, #12]
 806a51a:	681b      	ldr	r3, [r3, #0]
 806a51c:	681a      	ldr	r2, [r3, #0]
 806a51e:	68fb      	ldr	r3, [r7, #12]
 806a520:	681b      	ldr	r3, [r3, #0]
 806a522:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 806a526:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 806a528:	68fb      	ldr	r3, [r7, #12]
 806a52a:	68db      	ldr	r3, [r3, #12]
 806a52c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 806a530:	d17e      	bne.n	806a630 <HAL_SPI_TransmitReceive+0x1f8>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 806a532:	68fb      	ldr	r3, [r7, #12]
 806a534:	685b      	ldr	r3, [r3, #4]
 806a536:	2b00      	cmp	r3, #0
 806a538:	d002      	beq.n	806a540 <HAL_SPI_TransmitReceive+0x108>
 806a53a:	8afb      	ldrh	r3, [r7, #22]
 806a53c:	2b01      	cmp	r3, #1
 806a53e:	d16c      	bne.n	806a61a <HAL_SPI_TransmitReceive+0x1e2>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 806a540:	68fb      	ldr	r3, [r7, #12]
 806a542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 806a544:	881a      	ldrh	r2, [r3, #0]
 806a546:	68fb      	ldr	r3, [r7, #12]
 806a548:	681b      	ldr	r3, [r3, #0]
 806a54a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 806a54c:	68fb      	ldr	r3, [r7, #12]
 806a54e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 806a550:	1c9a      	adds	r2, r3, #2
 806a552:	68fb      	ldr	r3, [r7, #12]
 806a554:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 806a556:	68fb      	ldr	r3, [r7, #12]
 806a558:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 806a55a:	b29b      	uxth	r3, r3
 806a55c:	3b01      	subs	r3, #1
 806a55e:	b29a      	uxth	r2, r3
 806a560:	68fb      	ldr	r3, [r7, #12]
 806a562:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 806a564:	e059      	b.n	806a61a <HAL_SPI_TransmitReceive+0x1e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 806a566:	68fb      	ldr	r3, [r7, #12]
 806a568:	681b      	ldr	r3, [r3, #0]
 806a56a:	689b      	ldr	r3, [r3, #8]
 806a56c:	f003 0302 	and.w	r3, r3, #2
 806a570:	2b02      	cmp	r3, #2
 806a572:	d11b      	bne.n	806a5ac <HAL_SPI_TransmitReceive+0x174>
 806a574:	68fb      	ldr	r3, [r7, #12]
 806a576:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 806a578:	b29b      	uxth	r3, r3
 806a57a:	2b00      	cmp	r3, #0
 806a57c:	d016      	beq.n	806a5ac <HAL_SPI_TransmitReceive+0x174>
 806a57e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 806a580:	2b01      	cmp	r3, #1
 806a582:	d113      	bne.n	806a5ac <HAL_SPI_TransmitReceive+0x174>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 806a584:	68fb      	ldr	r3, [r7, #12]
 806a586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 806a588:	881a      	ldrh	r2, [r3, #0]
 806a58a:	68fb      	ldr	r3, [r7, #12]
 806a58c:	681b      	ldr	r3, [r3, #0]
 806a58e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 806a590:	68fb      	ldr	r3, [r7, #12]
 806a592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 806a594:	1c9a      	adds	r2, r3, #2
 806a596:	68fb      	ldr	r3, [r7, #12]
 806a598:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 806a59a:	68fb      	ldr	r3, [r7, #12]
 806a59c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 806a59e:	b29b      	uxth	r3, r3
 806a5a0:	3b01      	subs	r3, #1
 806a5a2:	b29a      	uxth	r2, r3
 806a5a4:	68fb      	ldr	r3, [r7, #12]
 806a5a6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 806a5a8:	2300      	movs	r3, #0
 806a5aa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 806a5ac:	68fb      	ldr	r3, [r7, #12]
 806a5ae:	681b      	ldr	r3, [r3, #0]
 806a5b0:	689b      	ldr	r3, [r3, #8]
 806a5b2:	f003 0301 	and.w	r3, r3, #1
 806a5b6:	2b01      	cmp	r3, #1
 806a5b8:	d119      	bne.n	806a5ee <HAL_SPI_TransmitReceive+0x1b6>
 806a5ba:	68fb      	ldr	r3, [r7, #12]
 806a5bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 806a5be:	b29b      	uxth	r3, r3
 806a5c0:	2b00      	cmp	r3, #0
 806a5c2:	d014      	beq.n	806a5ee <HAL_SPI_TransmitReceive+0x1b6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 806a5c4:	68fb      	ldr	r3, [r7, #12]
 806a5c6:	681b      	ldr	r3, [r3, #0]
 806a5c8:	68da      	ldr	r2, [r3, #12]
 806a5ca:	68fb      	ldr	r3, [r7, #12]
 806a5cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 806a5ce:	b292      	uxth	r2, r2
 806a5d0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 806a5d2:	68fb      	ldr	r3, [r7, #12]
 806a5d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 806a5d6:	1c9a      	adds	r2, r3, #2
 806a5d8:	68fb      	ldr	r3, [r7, #12]
 806a5da:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 806a5dc:	68fb      	ldr	r3, [r7, #12]
 806a5de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 806a5e0:	b29b      	uxth	r3, r3
 806a5e2:	3b01      	subs	r3, #1
 806a5e4:	b29a      	uxth	r2, r3
 806a5e6:	68fb      	ldr	r3, [r7, #12]
 806a5e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 806a5ea:	2301      	movs	r3, #1
 806a5ec:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 806a5ee:	f7fc fc8b 	bl	8066f08 <HAL_GetTick>
 806a5f2:	4602      	mov	r2, r0
 806a5f4:	6a3b      	ldr	r3, [r7, #32]
 806a5f6:	1ad3      	subs	r3, r2, r3
 806a5f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 806a5fa:	429a      	cmp	r2, r3
 806a5fc:	d80d      	bhi.n	806a61a <HAL_SPI_TransmitReceive+0x1e2>
 806a5fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 806a600:	f1b3 3fff 	cmp.w	r3, #4294967295
 806a604:	d009      	beq.n	806a61a <HAL_SPI_TransmitReceive+0x1e2>
      {
        hspi->State = HAL_SPI_STATE_READY;
 806a606:	68fb      	ldr	r3, [r7, #12]
 806a608:	2201      	movs	r2, #1
 806a60a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 806a60e:	68fb      	ldr	r3, [r7, #12]
 806a610:	2200      	movs	r2, #0
 806a612:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 806a616:	2303      	movs	r3, #3
 806a618:	e0bf      	b.n	806a79a <HAL_SPI_TransmitReceive+0x362>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 806a61a:	68fb      	ldr	r3, [r7, #12]
 806a61c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 806a61e:	b29b      	uxth	r3, r3
 806a620:	2b00      	cmp	r3, #0
 806a622:	d1a0      	bne.n	806a566 <HAL_SPI_TransmitReceive+0x12e>
 806a624:	68fb      	ldr	r3, [r7, #12]
 806a626:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 806a628:	b29b      	uxth	r3, r3
 806a62a:	2b00      	cmp	r3, #0
 806a62c:	d19b      	bne.n	806a566 <HAL_SPI_TransmitReceive+0x12e>
 806a62e:	e085      	b.n	806a73c <HAL_SPI_TransmitReceive+0x304>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 806a630:	68fb      	ldr	r3, [r7, #12]
 806a632:	685b      	ldr	r3, [r3, #4]
 806a634:	2b00      	cmp	r3, #0
 806a636:	d002      	beq.n	806a63e <HAL_SPI_TransmitReceive+0x206>
 806a638:	8afb      	ldrh	r3, [r7, #22]
 806a63a:	2b01      	cmp	r3, #1
 806a63c:	d174      	bne.n	806a728 <HAL_SPI_TransmitReceive+0x2f0>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 806a63e:	68fb      	ldr	r3, [r7, #12]
 806a640:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 806a642:	68fb      	ldr	r3, [r7, #12]
 806a644:	681b      	ldr	r3, [r3, #0]
 806a646:	330c      	adds	r3, #12
 806a648:	7812      	ldrb	r2, [r2, #0]
 806a64a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 806a64c:	68fb      	ldr	r3, [r7, #12]
 806a64e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 806a650:	1c5a      	adds	r2, r3, #1
 806a652:	68fb      	ldr	r3, [r7, #12]
 806a654:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 806a656:	68fb      	ldr	r3, [r7, #12]
 806a658:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 806a65a:	b29b      	uxth	r3, r3
 806a65c:	3b01      	subs	r3, #1
 806a65e:	b29a      	uxth	r2, r3
 806a660:	68fb      	ldr	r3, [r7, #12]
 806a662:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 806a664:	e060      	b.n	806a728 <HAL_SPI_TransmitReceive+0x2f0>
 806a666:	bf00      	nop
 806a668:	080717cc 	.word	0x080717cc
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 806a66c:	68fb      	ldr	r3, [r7, #12]
 806a66e:	681b      	ldr	r3, [r3, #0]
 806a670:	689b      	ldr	r3, [r3, #8]
 806a672:	f003 0302 	and.w	r3, r3, #2
 806a676:	2b02      	cmp	r3, #2
 806a678:	d11c      	bne.n	806a6b4 <HAL_SPI_TransmitReceive+0x27c>
 806a67a:	68fb      	ldr	r3, [r7, #12]
 806a67c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 806a67e:	b29b      	uxth	r3, r3
 806a680:	2b00      	cmp	r3, #0
 806a682:	d017      	beq.n	806a6b4 <HAL_SPI_TransmitReceive+0x27c>
 806a684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 806a686:	2b01      	cmp	r3, #1
 806a688:	d114      	bne.n	806a6b4 <HAL_SPI_TransmitReceive+0x27c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 806a68a:	68fb      	ldr	r3, [r7, #12]
 806a68c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 806a68e:	68fb      	ldr	r3, [r7, #12]
 806a690:	681b      	ldr	r3, [r3, #0]
 806a692:	330c      	adds	r3, #12
 806a694:	7812      	ldrb	r2, [r2, #0]
 806a696:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 806a698:	68fb      	ldr	r3, [r7, #12]
 806a69a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 806a69c:	1c5a      	adds	r2, r3, #1
 806a69e:	68fb      	ldr	r3, [r7, #12]
 806a6a0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 806a6a2:	68fb      	ldr	r3, [r7, #12]
 806a6a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 806a6a6:	b29b      	uxth	r3, r3
 806a6a8:	3b01      	subs	r3, #1
 806a6aa:	b29a      	uxth	r2, r3
 806a6ac:	68fb      	ldr	r3, [r7, #12]
 806a6ae:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 806a6b0:	2300      	movs	r3, #0
 806a6b2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 806a6b4:	68fb      	ldr	r3, [r7, #12]
 806a6b6:	681b      	ldr	r3, [r3, #0]
 806a6b8:	689b      	ldr	r3, [r3, #8]
 806a6ba:	f003 0301 	and.w	r3, r3, #1
 806a6be:	2b01      	cmp	r3, #1
 806a6c0:	d119      	bne.n	806a6f6 <HAL_SPI_TransmitReceive+0x2be>
 806a6c2:	68fb      	ldr	r3, [r7, #12]
 806a6c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 806a6c6:	b29b      	uxth	r3, r3
 806a6c8:	2b00      	cmp	r3, #0
 806a6ca:	d014      	beq.n	806a6f6 <HAL_SPI_TransmitReceive+0x2be>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 806a6cc:	68fb      	ldr	r3, [r7, #12]
 806a6ce:	681b      	ldr	r3, [r3, #0]
 806a6d0:	68da      	ldr	r2, [r3, #12]
 806a6d2:	68fb      	ldr	r3, [r7, #12]
 806a6d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 806a6d6:	b2d2      	uxtb	r2, r2
 806a6d8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 806a6da:	68fb      	ldr	r3, [r7, #12]
 806a6dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 806a6de:	1c5a      	adds	r2, r3, #1
 806a6e0:	68fb      	ldr	r3, [r7, #12]
 806a6e2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 806a6e4:	68fb      	ldr	r3, [r7, #12]
 806a6e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 806a6e8:	b29b      	uxth	r3, r3
 806a6ea:	3b01      	subs	r3, #1
 806a6ec:	b29a      	uxth	r2, r3
 806a6ee:	68fb      	ldr	r3, [r7, #12]
 806a6f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 806a6f2:	2301      	movs	r3, #1
 806a6f4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 806a6f6:	f7fc fc07 	bl	8066f08 <HAL_GetTick>
 806a6fa:	4602      	mov	r2, r0
 806a6fc:	6a3b      	ldr	r3, [r7, #32]
 806a6fe:	1ad3      	subs	r3, r2, r3
 806a700:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 806a702:	429a      	cmp	r2, r3
 806a704:	d803      	bhi.n	806a70e <HAL_SPI_TransmitReceive+0x2d6>
 806a706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 806a708:	f1b3 3fff 	cmp.w	r3, #4294967295
 806a70c:	d102      	bne.n	806a714 <HAL_SPI_TransmitReceive+0x2dc>
 806a70e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 806a710:	2b00      	cmp	r3, #0
 806a712:	d109      	bne.n	806a728 <HAL_SPI_TransmitReceive+0x2f0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 806a714:	68fb      	ldr	r3, [r7, #12]
 806a716:	2201      	movs	r2, #1
 806a718:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 806a71c:	68fb      	ldr	r3, [r7, #12]
 806a71e:	2200      	movs	r2, #0
 806a720:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 806a724:	2303      	movs	r3, #3
 806a726:	e038      	b.n	806a79a <HAL_SPI_TransmitReceive+0x362>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 806a728:	68fb      	ldr	r3, [r7, #12]
 806a72a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 806a72c:	b29b      	uxth	r3, r3
 806a72e:	2b00      	cmp	r3, #0
 806a730:	d19c      	bne.n	806a66c <HAL_SPI_TransmitReceive+0x234>
 806a732:	68fb      	ldr	r3, [r7, #12]
 806a734:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 806a736:	b29b      	uxth	r3, r3
 806a738:	2b00      	cmp	r3, #0
 806a73a:	d197      	bne.n	806a66c <HAL_SPI_TransmitReceive+0x234>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 806a73c:	6a3a      	ldr	r2, [r7, #32]
 806a73e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 806a740:	68f8      	ldr	r0, [r7, #12]
 806a742:	f000 fa89 	bl	806ac58 <SPI_EndRxTxTransaction>
 806a746:	4603      	mov	r3, r0
 806a748:	2b00      	cmp	r3, #0
 806a74a:	d008      	beq.n	806a75e <HAL_SPI_TransmitReceive+0x326>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 806a74c:	68fb      	ldr	r3, [r7, #12]
 806a74e:	2220      	movs	r2, #32
 806a750:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 806a752:	68fb      	ldr	r3, [r7, #12]
 806a754:	2200      	movs	r2, #0
 806a756:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 806a75a:	2301      	movs	r3, #1
 806a75c:	e01d      	b.n	806a79a <HAL_SPI_TransmitReceive+0x362>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 806a75e:	68fb      	ldr	r3, [r7, #12]
 806a760:	689b      	ldr	r3, [r3, #8]
 806a762:	2b00      	cmp	r3, #0
 806a764:	d10a      	bne.n	806a77c <HAL_SPI_TransmitReceive+0x344>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 806a766:	2300      	movs	r3, #0
 806a768:	613b      	str	r3, [r7, #16]
 806a76a:	68fb      	ldr	r3, [r7, #12]
 806a76c:	681b      	ldr	r3, [r3, #0]
 806a76e:	68db      	ldr	r3, [r3, #12]
 806a770:	613b      	str	r3, [r7, #16]
 806a772:	68fb      	ldr	r3, [r7, #12]
 806a774:	681b      	ldr	r3, [r3, #0]
 806a776:	689b      	ldr	r3, [r3, #8]
 806a778:	613b      	str	r3, [r7, #16]
 806a77a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 806a77c:	68fb      	ldr	r3, [r7, #12]
 806a77e:	2201      	movs	r2, #1
 806a780:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 806a784:	68fb      	ldr	r3, [r7, #12]
 806a786:	2200      	movs	r2, #0
 806a788:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 806a78c:	68fb      	ldr	r3, [r7, #12]
 806a78e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 806a790:	2b00      	cmp	r3, #0
 806a792:	d001      	beq.n	806a798 <HAL_SPI_TransmitReceive+0x360>
  {
    return HAL_ERROR;
 806a794:	2301      	movs	r3, #1
 806a796:	e000      	b.n	806a79a <HAL_SPI_TransmitReceive+0x362>
  }
  else
  {
    return HAL_OK;
 806a798:	2300      	movs	r3, #0
  }
}
 806a79a:	4618      	mov	r0, r3
 806a79c:	3728      	adds	r7, #40	@ 0x28
 806a79e:	46bd      	mov	sp, r7
 806a7a0:	bd80      	pop	{r7, pc}
 806a7a2:	bf00      	nop

0806a7a4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 806a7a4:	b580      	push	{r7, lr}
 806a7a6:	b088      	sub	sp, #32
 806a7a8:	af00      	add	r7, sp, #0
 806a7aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 806a7ac:	687b      	ldr	r3, [r7, #4]
 806a7ae:	681b      	ldr	r3, [r3, #0]
 806a7b0:	685b      	ldr	r3, [r3, #4]
 806a7b2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 806a7b4:	687b      	ldr	r3, [r7, #4]
 806a7b6:	681b      	ldr	r3, [r3, #0]
 806a7b8:	689b      	ldr	r3, [r3, #8]
 806a7ba:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 806a7bc:	69bb      	ldr	r3, [r7, #24]
 806a7be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 806a7c2:	2b00      	cmp	r3, #0
 806a7c4:	d10e      	bne.n	806a7e4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 806a7c6:	69bb      	ldr	r3, [r7, #24]
 806a7c8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 806a7cc:	2b00      	cmp	r3, #0
 806a7ce:	d009      	beq.n	806a7e4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 806a7d0:	69fb      	ldr	r3, [r7, #28]
 806a7d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 806a7d6:	2b00      	cmp	r3, #0
 806a7d8:	d004      	beq.n	806a7e4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 806a7da:	687b      	ldr	r3, [r7, #4]
 806a7dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 806a7de:	6878      	ldr	r0, [r7, #4]
 806a7e0:	4798      	blx	r3
    return;
 806a7e2:	e0cf      	b.n	806a984 <HAL_SPI_IRQHandler+0x1e0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 806a7e4:	69bb      	ldr	r3, [r7, #24]
 806a7e6:	f003 0302 	and.w	r3, r3, #2
 806a7ea:	2b00      	cmp	r3, #0
 806a7ec:	d009      	beq.n	806a802 <HAL_SPI_IRQHandler+0x5e>
 806a7ee:	69fb      	ldr	r3, [r7, #28]
 806a7f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 806a7f4:	2b00      	cmp	r3, #0
 806a7f6:	d004      	beq.n	806a802 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 806a7f8:	687b      	ldr	r3, [r7, #4]
 806a7fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 806a7fc:	6878      	ldr	r0, [r7, #4]
 806a7fe:	4798      	blx	r3
    return;
 806a800:	e0c0      	b.n	806a984 <HAL_SPI_IRQHandler+0x1e0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 806a802:	69bb      	ldr	r3, [r7, #24]
 806a804:	f003 0320 	and.w	r3, r3, #32
 806a808:	2b00      	cmp	r3, #0
 806a80a:	d10a      	bne.n	806a822 <HAL_SPI_IRQHandler+0x7e>
 806a80c:	69bb      	ldr	r3, [r7, #24]
 806a80e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 806a812:	2b00      	cmp	r3, #0
 806a814:	d105      	bne.n	806a822 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 806a816:	69bb      	ldr	r3, [r7, #24]
 806a818:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 806a81c:	2b00      	cmp	r3, #0
 806a81e:	f000 80b1 	beq.w	806a984 <HAL_SPI_IRQHandler+0x1e0>
 806a822:	69fb      	ldr	r3, [r7, #28]
 806a824:	f003 0320 	and.w	r3, r3, #32
 806a828:	2b00      	cmp	r3, #0
 806a82a:	f000 80ab 	beq.w	806a984 <HAL_SPI_IRQHandler+0x1e0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 806a82e:	69bb      	ldr	r3, [r7, #24]
 806a830:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 806a834:	2b00      	cmp	r3, #0
 806a836:	d023      	beq.n	806a880 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 806a838:	687b      	ldr	r3, [r7, #4]
 806a83a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 806a83e:	b2db      	uxtb	r3, r3
 806a840:	2b03      	cmp	r3, #3
 806a842:	d011      	beq.n	806a868 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 806a844:	687b      	ldr	r3, [r7, #4]
 806a846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 806a848:	f043 0204 	orr.w	r2, r3, #4
 806a84c:	687b      	ldr	r3, [r7, #4]
 806a84e:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 806a850:	2300      	movs	r3, #0
 806a852:	617b      	str	r3, [r7, #20]
 806a854:	687b      	ldr	r3, [r7, #4]
 806a856:	681b      	ldr	r3, [r3, #0]
 806a858:	68db      	ldr	r3, [r3, #12]
 806a85a:	617b      	str	r3, [r7, #20]
 806a85c:	687b      	ldr	r3, [r7, #4]
 806a85e:	681b      	ldr	r3, [r3, #0]
 806a860:	689b      	ldr	r3, [r3, #8]
 806a862:	617b      	str	r3, [r7, #20]
 806a864:	697b      	ldr	r3, [r7, #20]
 806a866:	e00b      	b.n	806a880 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 806a868:	2300      	movs	r3, #0
 806a86a:	613b      	str	r3, [r7, #16]
 806a86c:	687b      	ldr	r3, [r7, #4]
 806a86e:	681b      	ldr	r3, [r3, #0]
 806a870:	68db      	ldr	r3, [r3, #12]
 806a872:	613b      	str	r3, [r7, #16]
 806a874:	687b      	ldr	r3, [r7, #4]
 806a876:	681b      	ldr	r3, [r3, #0]
 806a878:	689b      	ldr	r3, [r3, #8]
 806a87a:	613b      	str	r3, [r7, #16]
 806a87c:	693b      	ldr	r3, [r7, #16]
        return;
 806a87e:	e081      	b.n	806a984 <HAL_SPI_IRQHandler+0x1e0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 806a880:	69bb      	ldr	r3, [r7, #24]
 806a882:	f003 0320 	and.w	r3, r3, #32
 806a886:	2b00      	cmp	r3, #0
 806a888:	d014      	beq.n	806a8b4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 806a88a:	687b      	ldr	r3, [r7, #4]
 806a88c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 806a88e:	f043 0201 	orr.w	r2, r3, #1
 806a892:	687b      	ldr	r3, [r7, #4]
 806a894:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 806a896:	2300      	movs	r3, #0
 806a898:	60fb      	str	r3, [r7, #12]
 806a89a:	687b      	ldr	r3, [r7, #4]
 806a89c:	681b      	ldr	r3, [r3, #0]
 806a89e:	689b      	ldr	r3, [r3, #8]
 806a8a0:	60fb      	str	r3, [r7, #12]
 806a8a2:	687b      	ldr	r3, [r7, #4]
 806a8a4:	681b      	ldr	r3, [r3, #0]
 806a8a6:	681a      	ldr	r2, [r3, #0]
 806a8a8:	687b      	ldr	r3, [r7, #4]
 806a8aa:	681b      	ldr	r3, [r3, #0]
 806a8ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 806a8b0:	601a      	str	r2, [r3, #0]
 806a8b2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 806a8b4:	69bb      	ldr	r3, [r7, #24]
 806a8b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 806a8ba:	2b00      	cmp	r3, #0
 806a8bc:	d00c      	beq.n	806a8d8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 806a8be:	687b      	ldr	r3, [r7, #4]
 806a8c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 806a8c2:	f043 0208 	orr.w	r2, r3, #8
 806a8c6:	687b      	ldr	r3, [r7, #4]
 806a8c8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 806a8ca:	2300      	movs	r3, #0
 806a8cc:	60bb      	str	r3, [r7, #8]
 806a8ce:	687b      	ldr	r3, [r7, #4]
 806a8d0:	681b      	ldr	r3, [r3, #0]
 806a8d2:	689b      	ldr	r3, [r3, #8]
 806a8d4:	60bb      	str	r3, [r7, #8]
 806a8d6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 806a8d8:	687b      	ldr	r3, [r7, #4]
 806a8da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 806a8dc:	2b00      	cmp	r3, #0
 806a8de:	d050      	beq.n	806a982 <HAL_SPI_IRQHandler+0x1de>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 806a8e0:	687b      	ldr	r3, [r7, #4]
 806a8e2:	681b      	ldr	r3, [r3, #0]
 806a8e4:	685a      	ldr	r2, [r3, #4]
 806a8e6:	687b      	ldr	r3, [r7, #4]
 806a8e8:	681b      	ldr	r3, [r3, #0]
 806a8ea:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 806a8ee:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 806a8f0:	687b      	ldr	r3, [r7, #4]
 806a8f2:	2201      	movs	r2, #1
 806a8f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 806a8f8:	69fb      	ldr	r3, [r7, #28]
 806a8fa:	f003 0302 	and.w	r3, r3, #2
 806a8fe:	2b00      	cmp	r3, #0
 806a900:	d104      	bne.n	806a90c <HAL_SPI_IRQHandler+0x168>
 806a902:	69fb      	ldr	r3, [r7, #28]
 806a904:	f003 0301 	and.w	r3, r3, #1
 806a908:	2b00      	cmp	r3, #0
 806a90a:	d034      	beq.n	806a976 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 806a90c:	687b      	ldr	r3, [r7, #4]
 806a90e:	681b      	ldr	r3, [r3, #0]
 806a910:	685a      	ldr	r2, [r3, #4]
 806a912:	687b      	ldr	r3, [r7, #4]
 806a914:	681b      	ldr	r3, [r3, #0]
 806a916:	f022 0203 	bic.w	r2, r2, #3
 806a91a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 806a91c:	687b      	ldr	r3, [r7, #4]
 806a91e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 806a920:	2b00      	cmp	r3, #0
 806a922:	d011      	beq.n	806a948 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 806a924:	687b      	ldr	r3, [r7, #4]
 806a926:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 806a928:	4a18      	ldr	r2, [pc, #96]	@ (806a98c <HAL_SPI_IRQHandler+0x1e8>)
 806a92a:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 806a92c:	687b      	ldr	r3, [r7, #4]
 806a92e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 806a930:	4618      	mov	r0, r3
 806a932:	f7fd fb43 	bl	8067fbc <HAL_DMA_Abort_IT>
 806a936:	4603      	mov	r3, r0
 806a938:	2b00      	cmp	r3, #0
 806a93a:	d005      	beq.n	806a948 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 806a93c:	687b      	ldr	r3, [r7, #4]
 806a93e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 806a940:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 806a944:	687b      	ldr	r3, [r7, #4]
 806a946:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 806a948:	687b      	ldr	r3, [r7, #4]
 806a94a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 806a94c:	2b00      	cmp	r3, #0
 806a94e:	d017      	beq.n	806a980 <HAL_SPI_IRQHandler+0x1dc>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 806a950:	687b      	ldr	r3, [r7, #4]
 806a952:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 806a954:	4a0d      	ldr	r2, [pc, #52]	@ (806a98c <HAL_SPI_IRQHandler+0x1e8>)
 806a956:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 806a958:	687b      	ldr	r3, [r7, #4]
 806a95a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 806a95c:	4618      	mov	r0, r3
 806a95e:	f7fd fb2d 	bl	8067fbc <HAL_DMA_Abort_IT>
 806a962:	4603      	mov	r3, r0
 806a964:	2b00      	cmp	r3, #0
 806a966:	d00b      	beq.n	806a980 <HAL_SPI_IRQHandler+0x1dc>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 806a968:	687b      	ldr	r3, [r7, #4]
 806a96a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 806a96c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 806a970:	687b      	ldr	r3, [r7, #4]
 806a972:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 806a974:	e004      	b.n	806a980 <HAL_SPI_IRQHandler+0x1dc>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 806a976:	687b      	ldr	r3, [r7, #4]
 806a978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 806a97a:	6878      	ldr	r0, [r7, #4]
 806a97c:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 806a97e:	e000      	b.n	806a982 <HAL_SPI_IRQHandler+0x1de>
        if (hspi->hdmatx != NULL)
 806a980:	bf00      	nop
    return;
 806a982:	bf00      	nop
  }
}
 806a984:	3720      	adds	r7, #32
 806a986:	46bd      	mov	sp, r7
 806a988:	bd80      	pop	{r7, pc}
 806a98a:	bf00      	nop
 806a98c:	0806aa51 	.word	0x0806aa51

0806a990 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 806a990:	b480      	push	{r7}
 806a992:	b083      	sub	sp, #12
 806a994:	af00      	add	r7, sp, #0
 806a996:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 806a998:	bf00      	nop
 806a99a:	370c      	adds	r7, #12
 806a99c:	46bd      	mov	sp, r7
 806a99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 806a9a2:	4770      	bx	lr

0806a9a4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 806a9a4:	b480      	push	{r7}
 806a9a6:	b083      	sub	sp, #12
 806a9a8:	af00      	add	r7, sp, #0
 806a9aa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 806a9ac:	bf00      	nop
 806a9ae:	370c      	adds	r7, #12
 806a9b0:	46bd      	mov	sp, r7
 806a9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 806a9b6:	4770      	bx	lr

0806a9b8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 806a9b8:	b480      	push	{r7}
 806a9ba:	b083      	sub	sp, #12
 806a9bc:	af00      	add	r7, sp, #0
 806a9be:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 806a9c0:	bf00      	nop
 806a9c2:	370c      	adds	r7, #12
 806a9c4:	46bd      	mov	sp, r7
 806a9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 806a9ca:	4770      	bx	lr

0806a9cc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 806a9cc:	b480      	push	{r7}
 806a9ce:	b083      	sub	sp, #12
 806a9d0:	af00      	add	r7, sp, #0
 806a9d2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 806a9d4:	bf00      	nop
 806a9d6:	370c      	adds	r7, #12
 806a9d8:	46bd      	mov	sp, r7
 806a9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 806a9de:	4770      	bx	lr

0806a9e0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 806a9e0:	b480      	push	{r7}
 806a9e2:	b083      	sub	sp, #12
 806a9e4:	af00      	add	r7, sp, #0
 806a9e6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 806a9e8:	bf00      	nop
 806a9ea:	370c      	adds	r7, #12
 806a9ec:	46bd      	mov	sp, r7
 806a9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 806a9f2:	4770      	bx	lr

0806a9f4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 806a9f4:	b480      	push	{r7}
 806a9f6:	b083      	sub	sp, #12
 806a9f8:	af00      	add	r7, sp, #0
 806a9fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 806a9fc:	bf00      	nop
 806a9fe:	370c      	adds	r7, #12
 806aa00:	46bd      	mov	sp, r7
 806aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 806aa06:	4770      	bx	lr

0806aa08 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 806aa08:	b480      	push	{r7}
 806aa0a:	b083      	sub	sp, #12
 806aa0c:	af00      	add	r7, sp, #0
 806aa0e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 806aa10:	bf00      	nop
 806aa12:	370c      	adds	r7, #12
 806aa14:	46bd      	mov	sp, r7
 806aa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 806aa1a:	4770      	bx	lr

0806aa1c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 806aa1c:	b480      	push	{r7}
 806aa1e:	b083      	sub	sp, #12
 806aa20:	af00      	add	r7, sp, #0
 806aa22:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 806aa24:	687b      	ldr	r3, [r7, #4]
 806aa26:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 806aa2a:	b2db      	uxtb	r3, r3
}
 806aa2c:	4618      	mov	r0, r3
 806aa2e:	370c      	adds	r7, #12
 806aa30:	46bd      	mov	sp, r7
 806aa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 806aa36:	4770      	bx	lr

0806aa38 <HAL_SPI_GetError>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI error code in bitmap format
  */
uint32_t HAL_SPI_GetError(const SPI_HandleTypeDef *hspi)
{
 806aa38:	b480      	push	{r7}
 806aa3a:	b083      	sub	sp, #12
 806aa3c:	af00      	add	r7, sp, #0
 806aa3e:	6078      	str	r0, [r7, #4]
  /* Return SPI ErrorCode */
  return hspi->ErrorCode;
 806aa40:	687b      	ldr	r3, [r7, #4]
 806aa42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 806aa44:	4618      	mov	r0, r3
 806aa46:	370c      	adds	r7, #12
 806aa48:	46bd      	mov	sp, r7
 806aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 806aa4e:	4770      	bx	lr

0806aa50 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 806aa50:	b580      	push	{r7, lr}
 806aa52:	b084      	sub	sp, #16
 806aa54:	af00      	add	r7, sp, #0
 806aa56:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 806aa58:	687b      	ldr	r3, [r7, #4]
 806aa5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 806aa5c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 806aa5e:	68fb      	ldr	r3, [r7, #12]
 806aa60:	2200      	movs	r2, #0
 806aa62:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 806aa64:	68fb      	ldr	r3, [r7, #12]
 806aa66:	2200      	movs	r2, #0
 806aa68:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 806aa6a:	68fb      	ldr	r3, [r7, #12]
 806aa6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 806aa6e:	68f8      	ldr	r0, [r7, #12]
 806aa70:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 806aa72:	bf00      	nop
 806aa74:	3710      	adds	r7, #16
 806aa76:	46bd      	mov	sp, r7
 806aa78:	bd80      	pop	{r7, pc}
	...

0806aa7c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 806aa7c:	b580      	push	{r7, lr}
 806aa7e:	b088      	sub	sp, #32
 806aa80:	af00      	add	r7, sp, #0
 806aa82:	60f8      	str	r0, [r7, #12]
 806aa84:	60b9      	str	r1, [r7, #8]
 806aa86:	603b      	str	r3, [r7, #0]
 806aa88:	4613      	mov	r3, r2
 806aa8a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 806aa8c:	f7fc fa3c 	bl	8066f08 <HAL_GetTick>
 806aa90:	4602      	mov	r2, r0
 806aa92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 806aa94:	1a9b      	subs	r3, r3, r2
 806aa96:	683a      	ldr	r2, [r7, #0]
 806aa98:	4413      	add	r3, r2
 806aa9a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 806aa9c:	f7fc fa34 	bl	8066f08 <HAL_GetTick>
 806aaa0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 806aaa2:	4b39      	ldr	r3, [pc, #228]	@ (806ab88 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 806aaa4:	681b      	ldr	r3, [r3, #0]
 806aaa6:	015b      	lsls	r3, r3, #5
 806aaa8:	0d1b      	lsrs	r3, r3, #20
 806aaaa:	69fa      	ldr	r2, [r7, #28]
 806aaac:	fb02 f303 	mul.w	r3, r2, r3
 806aab0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 806aab2:	e054      	b.n	806ab5e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 806aab4:	683b      	ldr	r3, [r7, #0]
 806aab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 806aaba:	d050      	beq.n	806ab5e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 806aabc:	f7fc fa24 	bl	8066f08 <HAL_GetTick>
 806aac0:	4602      	mov	r2, r0
 806aac2:	69bb      	ldr	r3, [r7, #24]
 806aac4:	1ad3      	subs	r3, r2, r3
 806aac6:	69fa      	ldr	r2, [r7, #28]
 806aac8:	429a      	cmp	r2, r3
 806aaca:	d902      	bls.n	806aad2 <SPI_WaitFlagStateUntilTimeout+0x56>
 806aacc:	69fb      	ldr	r3, [r7, #28]
 806aace:	2b00      	cmp	r3, #0
 806aad0:	d13d      	bne.n	806ab4e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 806aad2:	68fb      	ldr	r3, [r7, #12]
 806aad4:	681b      	ldr	r3, [r3, #0]
 806aad6:	685a      	ldr	r2, [r3, #4]
 806aad8:	68fb      	ldr	r3, [r7, #12]
 806aada:	681b      	ldr	r3, [r3, #0]
 806aadc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 806aae0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 806aae2:	68fb      	ldr	r3, [r7, #12]
 806aae4:	685b      	ldr	r3, [r3, #4]
 806aae6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 806aaea:	d111      	bne.n	806ab10 <SPI_WaitFlagStateUntilTimeout+0x94>
 806aaec:	68fb      	ldr	r3, [r7, #12]
 806aaee:	689b      	ldr	r3, [r3, #8]
 806aaf0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 806aaf4:	d004      	beq.n	806ab00 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 806aaf6:	68fb      	ldr	r3, [r7, #12]
 806aaf8:	689b      	ldr	r3, [r3, #8]
 806aafa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 806aafe:	d107      	bne.n	806ab10 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 806ab00:	68fb      	ldr	r3, [r7, #12]
 806ab02:	681b      	ldr	r3, [r3, #0]
 806ab04:	681a      	ldr	r2, [r3, #0]
 806ab06:	68fb      	ldr	r3, [r7, #12]
 806ab08:	681b      	ldr	r3, [r3, #0]
 806ab0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 806ab0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 806ab10:	68fb      	ldr	r3, [r7, #12]
 806ab12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 806ab14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 806ab18:	d10f      	bne.n	806ab3a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 806ab1a:	68fb      	ldr	r3, [r7, #12]
 806ab1c:	681b      	ldr	r3, [r3, #0]
 806ab1e:	681a      	ldr	r2, [r3, #0]
 806ab20:	68fb      	ldr	r3, [r7, #12]
 806ab22:	681b      	ldr	r3, [r3, #0]
 806ab24:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 806ab28:	601a      	str	r2, [r3, #0]
 806ab2a:	68fb      	ldr	r3, [r7, #12]
 806ab2c:	681b      	ldr	r3, [r3, #0]
 806ab2e:	681a      	ldr	r2, [r3, #0]
 806ab30:	68fb      	ldr	r3, [r7, #12]
 806ab32:	681b      	ldr	r3, [r3, #0]
 806ab34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 806ab38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 806ab3a:	68fb      	ldr	r3, [r7, #12]
 806ab3c:	2201      	movs	r2, #1
 806ab3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 806ab42:	68fb      	ldr	r3, [r7, #12]
 806ab44:	2200      	movs	r2, #0
 806ab46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 806ab4a:	2303      	movs	r3, #3
 806ab4c:	e017      	b.n	806ab7e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 806ab4e:	697b      	ldr	r3, [r7, #20]
 806ab50:	2b00      	cmp	r3, #0
 806ab52:	d101      	bne.n	806ab58 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 806ab54:	2300      	movs	r3, #0
 806ab56:	61fb      	str	r3, [r7, #28]
      }
      count--;
 806ab58:	697b      	ldr	r3, [r7, #20]
 806ab5a:	3b01      	subs	r3, #1
 806ab5c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 806ab5e:	68fb      	ldr	r3, [r7, #12]
 806ab60:	681b      	ldr	r3, [r3, #0]
 806ab62:	689a      	ldr	r2, [r3, #8]
 806ab64:	68bb      	ldr	r3, [r7, #8]
 806ab66:	4013      	ands	r3, r2
 806ab68:	68ba      	ldr	r2, [r7, #8]
 806ab6a:	429a      	cmp	r2, r3
 806ab6c:	bf0c      	ite	eq
 806ab6e:	2301      	moveq	r3, #1
 806ab70:	2300      	movne	r3, #0
 806ab72:	b2db      	uxtb	r3, r3
 806ab74:	461a      	mov	r2, r3
 806ab76:	79fb      	ldrb	r3, [r7, #7]
 806ab78:	429a      	cmp	r2, r3
 806ab7a:	d19b      	bne.n	806aab4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 806ab7c:	2300      	movs	r3, #0
}
 806ab7e:	4618      	mov	r0, r3
 806ab80:	3720      	adds	r7, #32
 806ab82:	46bd      	mov	sp, r7
 806ab84:	bd80      	pop	{r7, pc}
 806ab86:	bf00      	nop
 806ab88:	20010120 	.word	0x20010120

0806ab8c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 806ab8c:	b580      	push	{r7, lr}
 806ab8e:	b086      	sub	sp, #24
 806ab90:	af02      	add	r7, sp, #8
 806ab92:	60f8      	str	r0, [r7, #12]
 806ab94:	60b9      	str	r1, [r7, #8]
 806ab96:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 806ab98:	68fb      	ldr	r3, [r7, #12]
 806ab9a:	685b      	ldr	r3, [r3, #4]
 806ab9c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 806aba0:	d111      	bne.n	806abc6 <SPI_EndRxTransaction+0x3a>
 806aba2:	68fb      	ldr	r3, [r7, #12]
 806aba4:	689b      	ldr	r3, [r3, #8]
 806aba6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 806abaa:	d004      	beq.n	806abb6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 806abac:	68fb      	ldr	r3, [r7, #12]
 806abae:	689b      	ldr	r3, [r3, #8]
 806abb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 806abb4:	d107      	bne.n	806abc6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 806abb6:	68fb      	ldr	r3, [r7, #12]
 806abb8:	681b      	ldr	r3, [r3, #0]
 806abba:	681a      	ldr	r2, [r3, #0]
 806abbc:	68fb      	ldr	r3, [r7, #12]
 806abbe:	681b      	ldr	r3, [r3, #0]
 806abc0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 806abc4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 806abc6:	68fb      	ldr	r3, [r7, #12]
 806abc8:	685b      	ldr	r3, [r3, #4]
 806abca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 806abce:	d12a      	bne.n	806ac26 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 806abd0:	68fb      	ldr	r3, [r7, #12]
 806abd2:	689b      	ldr	r3, [r3, #8]
 806abd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 806abd8:	d012      	beq.n	806ac00 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 806abda:	687b      	ldr	r3, [r7, #4]
 806abdc:	9300      	str	r3, [sp, #0]
 806abde:	68bb      	ldr	r3, [r7, #8]
 806abe0:	2200      	movs	r2, #0
 806abe2:	2180      	movs	r1, #128	@ 0x80
 806abe4:	68f8      	ldr	r0, [r7, #12]
 806abe6:	f7ff ff49 	bl	806aa7c <SPI_WaitFlagStateUntilTimeout>
 806abea:	4603      	mov	r3, r0
 806abec:	2b00      	cmp	r3, #0
 806abee:	d02d      	beq.n	806ac4c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 806abf0:	68fb      	ldr	r3, [r7, #12]
 806abf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 806abf4:	f043 0220 	orr.w	r2, r3, #32
 806abf8:	68fb      	ldr	r3, [r7, #12]
 806abfa:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 806abfc:	2303      	movs	r3, #3
 806abfe:	e026      	b.n	806ac4e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 806ac00:	687b      	ldr	r3, [r7, #4]
 806ac02:	9300      	str	r3, [sp, #0]
 806ac04:	68bb      	ldr	r3, [r7, #8]
 806ac06:	2200      	movs	r2, #0
 806ac08:	2101      	movs	r1, #1
 806ac0a:	68f8      	ldr	r0, [r7, #12]
 806ac0c:	f7ff ff36 	bl	806aa7c <SPI_WaitFlagStateUntilTimeout>
 806ac10:	4603      	mov	r3, r0
 806ac12:	2b00      	cmp	r3, #0
 806ac14:	d01a      	beq.n	806ac4c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 806ac16:	68fb      	ldr	r3, [r7, #12]
 806ac18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 806ac1a:	f043 0220 	orr.w	r2, r3, #32
 806ac1e:	68fb      	ldr	r3, [r7, #12]
 806ac20:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 806ac22:	2303      	movs	r3, #3
 806ac24:	e013      	b.n	806ac4e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 806ac26:	687b      	ldr	r3, [r7, #4]
 806ac28:	9300      	str	r3, [sp, #0]
 806ac2a:	68bb      	ldr	r3, [r7, #8]
 806ac2c:	2200      	movs	r2, #0
 806ac2e:	2101      	movs	r1, #1
 806ac30:	68f8      	ldr	r0, [r7, #12]
 806ac32:	f7ff ff23 	bl	806aa7c <SPI_WaitFlagStateUntilTimeout>
 806ac36:	4603      	mov	r3, r0
 806ac38:	2b00      	cmp	r3, #0
 806ac3a:	d007      	beq.n	806ac4c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 806ac3c:	68fb      	ldr	r3, [r7, #12]
 806ac3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 806ac40:	f043 0220 	orr.w	r2, r3, #32
 806ac44:	68fb      	ldr	r3, [r7, #12]
 806ac46:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 806ac48:	2303      	movs	r3, #3
 806ac4a:	e000      	b.n	806ac4e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 806ac4c:	2300      	movs	r3, #0
}
 806ac4e:	4618      	mov	r0, r3
 806ac50:	3710      	adds	r7, #16
 806ac52:	46bd      	mov	sp, r7
 806ac54:	bd80      	pop	{r7, pc}
	...

0806ac58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 806ac58:	b580      	push	{r7, lr}
 806ac5a:	b088      	sub	sp, #32
 806ac5c:	af02      	add	r7, sp, #8
 806ac5e:	60f8      	str	r0, [r7, #12]
 806ac60:	60b9      	str	r1, [r7, #8]
 806ac62:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 806ac64:	687b      	ldr	r3, [r7, #4]
 806ac66:	9300      	str	r3, [sp, #0]
 806ac68:	68bb      	ldr	r3, [r7, #8]
 806ac6a:	2201      	movs	r2, #1
 806ac6c:	2102      	movs	r1, #2
 806ac6e:	68f8      	ldr	r0, [r7, #12]
 806ac70:	f7ff ff04 	bl	806aa7c <SPI_WaitFlagStateUntilTimeout>
 806ac74:	4603      	mov	r3, r0
 806ac76:	2b00      	cmp	r3, #0
 806ac78:	d007      	beq.n	806ac8a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 806ac7a:	68fb      	ldr	r3, [r7, #12]
 806ac7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 806ac7e:	f043 0220 	orr.w	r2, r3, #32
 806ac82:	68fb      	ldr	r3, [r7, #12]
 806ac84:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 806ac86:	2303      	movs	r3, #3
 806ac88:	e032      	b.n	806acf0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 806ac8a:	4b1b      	ldr	r3, [pc, #108]	@ (806acf8 <SPI_EndRxTxTransaction+0xa0>)
 806ac8c:	681b      	ldr	r3, [r3, #0]
 806ac8e:	4a1b      	ldr	r2, [pc, #108]	@ (806acfc <SPI_EndRxTxTransaction+0xa4>)
 806ac90:	fba2 2303 	umull	r2, r3, r2, r3
 806ac94:	0d5b      	lsrs	r3, r3, #21
 806ac96:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 806ac9a:	fb02 f303 	mul.w	r3, r2, r3
 806ac9e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 806aca0:	68fb      	ldr	r3, [r7, #12]
 806aca2:	685b      	ldr	r3, [r3, #4]
 806aca4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 806aca8:	d112      	bne.n	806acd0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 806acaa:	687b      	ldr	r3, [r7, #4]
 806acac:	9300      	str	r3, [sp, #0]
 806acae:	68bb      	ldr	r3, [r7, #8]
 806acb0:	2200      	movs	r2, #0
 806acb2:	2180      	movs	r1, #128	@ 0x80
 806acb4:	68f8      	ldr	r0, [r7, #12]
 806acb6:	f7ff fee1 	bl	806aa7c <SPI_WaitFlagStateUntilTimeout>
 806acba:	4603      	mov	r3, r0
 806acbc:	2b00      	cmp	r3, #0
 806acbe:	d016      	beq.n	806acee <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 806acc0:	68fb      	ldr	r3, [r7, #12]
 806acc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 806acc4:	f043 0220 	orr.w	r2, r3, #32
 806acc8:	68fb      	ldr	r3, [r7, #12]
 806acca:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 806accc:	2303      	movs	r3, #3
 806acce:	e00f      	b.n	806acf0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 806acd0:	697b      	ldr	r3, [r7, #20]
 806acd2:	2b00      	cmp	r3, #0
 806acd4:	d00a      	beq.n	806acec <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 806acd6:	697b      	ldr	r3, [r7, #20]
 806acd8:	3b01      	subs	r3, #1
 806acda:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 806acdc:	68fb      	ldr	r3, [r7, #12]
 806acde:	681b      	ldr	r3, [r3, #0]
 806ace0:	689b      	ldr	r3, [r3, #8]
 806ace2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 806ace6:	2b80      	cmp	r3, #128	@ 0x80
 806ace8:	d0f2      	beq.n	806acd0 <SPI_EndRxTxTransaction+0x78>
 806acea:	e000      	b.n	806acee <SPI_EndRxTxTransaction+0x96>
        break;
 806acec:	bf00      	nop
  }

  return HAL_OK;
 806acee:	2300      	movs	r3, #0
}
 806acf0:	4618      	mov	r0, r3
 806acf2:	3718      	adds	r7, #24
 806acf4:	46bd      	mov	sp, r7
 806acf6:	bd80      	pop	{r7, pc}
 806acf8:	20010120 	.word	0x20010120
 806acfc:	165e9f81 	.word	0x165e9f81

0806ad00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 806ad00:	b580      	push	{r7, lr}
 806ad02:	b082      	sub	sp, #8
 806ad04:	af00      	add	r7, sp, #0
 806ad06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 806ad08:	687b      	ldr	r3, [r7, #4]
 806ad0a:	2b00      	cmp	r3, #0
 806ad0c:	d101      	bne.n	806ad12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 806ad0e:	2301      	movs	r3, #1
 806ad10:	e0da      	b.n	806aec8 <HAL_TIM_Base_Init+0x1c8>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 806ad12:	687b      	ldr	r3, [r7, #4]
 806ad14:	681b      	ldr	r3, [r3, #0]
 806ad16:	4a6e      	ldr	r2, [pc, #440]	@ (806aed0 <HAL_TIM_Base_Init+0x1d0>)
 806ad18:	4293      	cmp	r3, r2
 806ad1a:	d027      	beq.n	806ad6c <HAL_TIM_Base_Init+0x6c>
 806ad1c:	687b      	ldr	r3, [r7, #4]
 806ad1e:	681b      	ldr	r3, [r3, #0]
 806ad20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 806ad24:	d022      	beq.n	806ad6c <HAL_TIM_Base_Init+0x6c>
 806ad26:	687b      	ldr	r3, [r7, #4]
 806ad28:	681b      	ldr	r3, [r3, #0]
 806ad2a:	4a6a      	ldr	r2, [pc, #424]	@ (806aed4 <HAL_TIM_Base_Init+0x1d4>)
 806ad2c:	4293      	cmp	r3, r2
 806ad2e:	d01d      	beq.n	806ad6c <HAL_TIM_Base_Init+0x6c>
 806ad30:	687b      	ldr	r3, [r7, #4]
 806ad32:	681b      	ldr	r3, [r3, #0]
 806ad34:	4a68      	ldr	r2, [pc, #416]	@ (806aed8 <HAL_TIM_Base_Init+0x1d8>)
 806ad36:	4293      	cmp	r3, r2
 806ad38:	d018      	beq.n	806ad6c <HAL_TIM_Base_Init+0x6c>
 806ad3a:	687b      	ldr	r3, [r7, #4]
 806ad3c:	681b      	ldr	r3, [r3, #0]
 806ad3e:	4a67      	ldr	r2, [pc, #412]	@ (806aedc <HAL_TIM_Base_Init+0x1dc>)
 806ad40:	4293      	cmp	r3, r2
 806ad42:	d013      	beq.n	806ad6c <HAL_TIM_Base_Init+0x6c>
 806ad44:	687b      	ldr	r3, [r7, #4]
 806ad46:	681b      	ldr	r3, [r3, #0]
 806ad48:	4a65      	ldr	r2, [pc, #404]	@ (806aee0 <HAL_TIM_Base_Init+0x1e0>)
 806ad4a:	4293      	cmp	r3, r2
 806ad4c:	d00e      	beq.n	806ad6c <HAL_TIM_Base_Init+0x6c>
 806ad4e:	687b      	ldr	r3, [r7, #4]
 806ad50:	681b      	ldr	r3, [r3, #0]
 806ad52:	4a64      	ldr	r2, [pc, #400]	@ (806aee4 <HAL_TIM_Base_Init+0x1e4>)
 806ad54:	4293      	cmp	r3, r2
 806ad56:	d009      	beq.n	806ad6c <HAL_TIM_Base_Init+0x6c>
 806ad58:	687b      	ldr	r3, [r7, #4]
 806ad5a:	681b      	ldr	r3, [r3, #0]
 806ad5c:	4a62      	ldr	r2, [pc, #392]	@ (806aee8 <HAL_TIM_Base_Init+0x1e8>)
 806ad5e:	4293      	cmp	r3, r2
 806ad60:	d004      	beq.n	806ad6c <HAL_TIM_Base_Init+0x6c>
 806ad62:	f240 1113 	movw	r1, #275	@ 0x113
 806ad66:	4861      	ldr	r0, [pc, #388]	@ (806aeec <HAL_TIM_Base_Init+0x1ec>)
 806ad68:	f7fb fb6d 	bl	8066446 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 806ad6c:	687b      	ldr	r3, [r7, #4]
 806ad6e:	689b      	ldr	r3, [r3, #8]
 806ad70:	2b00      	cmp	r3, #0
 806ad72:	d014      	beq.n	806ad9e <HAL_TIM_Base_Init+0x9e>
 806ad74:	687b      	ldr	r3, [r7, #4]
 806ad76:	689b      	ldr	r3, [r3, #8]
 806ad78:	2b10      	cmp	r3, #16
 806ad7a:	d010      	beq.n	806ad9e <HAL_TIM_Base_Init+0x9e>
 806ad7c:	687b      	ldr	r3, [r7, #4]
 806ad7e:	689b      	ldr	r3, [r3, #8]
 806ad80:	2b20      	cmp	r3, #32
 806ad82:	d00c      	beq.n	806ad9e <HAL_TIM_Base_Init+0x9e>
 806ad84:	687b      	ldr	r3, [r7, #4]
 806ad86:	689b      	ldr	r3, [r3, #8]
 806ad88:	2b40      	cmp	r3, #64	@ 0x40
 806ad8a:	d008      	beq.n	806ad9e <HAL_TIM_Base_Init+0x9e>
 806ad8c:	687b      	ldr	r3, [r7, #4]
 806ad8e:	689b      	ldr	r3, [r3, #8]
 806ad90:	2b60      	cmp	r3, #96	@ 0x60
 806ad92:	d004      	beq.n	806ad9e <HAL_TIM_Base_Init+0x9e>
 806ad94:	f44f 718a 	mov.w	r1, #276	@ 0x114
 806ad98:	4854      	ldr	r0, [pc, #336]	@ (806aeec <HAL_TIM_Base_Init+0x1ec>)
 806ad9a:	f7fb fb54 	bl	8066446 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 806ad9e:	687b      	ldr	r3, [r7, #4]
 806ada0:	691b      	ldr	r3, [r3, #16]
 806ada2:	2b00      	cmp	r3, #0
 806ada4:	d00e      	beq.n	806adc4 <HAL_TIM_Base_Init+0xc4>
 806ada6:	687b      	ldr	r3, [r7, #4]
 806ada8:	691b      	ldr	r3, [r3, #16]
 806adaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 806adae:	d009      	beq.n	806adc4 <HAL_TIM_Base_Init+0xc4>
 806adb0:	687b      	ldr	r3, [r7, #4]
 806adb2:	691b      	ldr	r3, [r3, #16]
 806adb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 806adb8:	d004      	beq.n	806adc4 <HAL_TIM_Base_Init+0xc4>
 806adba:	f240 1115 	movw	r1, #277	@ 0x115
 806adbe:	484b      	ldr	r0, [pc, #300]	@ (806aeec <HAL_TIM_Base_Init+0x1ec>)
 806adc0:	f7fb fb41 	bl	8066446 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 806adc4:	687b      	ldr	r3, [r7, #4]
 806adc6:	681b      	ldr	r3, [r3, #0]
 806adc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 806adcc:	d004      	beq.n	806add8 <HAL_TIM_Base_Init+0xd8>
 806adce:	687b      	ldr	r3, [r7, #4]
 806add0:	681b      	ldr	r3, [r3, #0]
 806add2:	4a42      	ldr	r2, [pc, #264]	@ (806aedc <HAL_TIM_Base_Init+0x1dc>)
 806add4:	4293      	cmp	r3, r2
 806add6:	d107      	bne.n	806ade8 <HAL_TIM_Base_Init+0xe8>
 806add8:	687b      	ldr	r3, [r7, #4]
 806adda:	68db      	ldr	r3, [r3, #12]
 806addc:	2b00      	cmp	r3, #0
 806adde:	bf14      	ite	ne
 806ade0:	2301      	movne	r3, #1
 806ade2:	2300      	moveq	r3, #0
 806ade4:	b2db      	uxtb	r3, r3
 806ade6:	e00e      	b.n	806ae06 <HAL_TIM_Base_Init+0x106>
 806ade8:	687b      	ldr	r3, [r7, #4]
 806adea:	68db      	ldr	r3, [r3, #12]
 806adec:	2b00      	cmp	r3, #0
 806adee:	d006      	beq.n	806adfe <HAL_TIM_Base_Init+0xfe>
 806adf0:	687b      	ldr	r3, [r7, #4]
 806adf2:	68db      	ldr	r3, [r3, #12]
 806adf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 806adf8:	d201      	bcs.n	806adfe <HAL_TIM_Base_Init+0xfe>
 806adfa:	2301      	movs	r3, #1
 806adfc:	e000      	b.n	806ae00 <HAL_TIM_Base_Init+0x100>
 806adfe:	2300      	movs	r3, #0
 806ae00:	f003 0301 	and.w	r3, r3, #1
 806ae04:	b2db      	uxtb	r3, r3
 806ae06:	2b00      	cmp	r3, #0
 806ae08:	d104      	bne.n	806ae14 <HAL_TIM_Base_Init+0x114>
 806ae0a:	f44f 718b 	mov.w	r1, #278	@ 0x116
 806ae0e:	4837      	ldr	r0, [pc, #220]	@ (806aeec <HAL_TIM_Base_Init+0x1ec>)
 806ae10:	f7fb fb19 	bl	8066446 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 806ae14:	687b      	ldr	r3, [r7, #4]
 806ae16:	699b      	ldr	r3, [r3, #24]
 806ae18:	2b00      	cmp	r3, #0
 806ae1a:	d008      	beq.n	806ae2e <HAL_TIM_Base_Init+0x12e>
 806ae1c:	687b      	ldr	r3, [r7, #4]
 806ae1e:	699b      	ldr	r3, [r3, #24]
 806ae20:	2b80      	cmp	r3, #128	@ 0x80
 806ae22:	d004      	beq.n	806ae2e <HAL_TIM_Base_Init+0x12e>
 806ae24:	f240 1117 	movw	r1, #279	@ 0x117
 806ae28:	4830      	ldr	r0, [pc, #192]	@ (806aeec <HAL_TIM_Base_Init+0x1ec>)
 806ae2a:	f7fb fb0c 	bl	8066446 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 806ae2e:	687b      	ldr	r3, [r7, #4]
 806ae30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 806ae34:	b2db      	uxtb	r3, r3
 806ae36:	2b00      	cmp	r3, #0
 806ae38:	d111      	bne.n	806ae5e <HAL_TIM_Base_Init+0x15e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 806ae3a:	687b      	ldr	r3, [r7, #4]
 806ae3c:	2200      	movs	r2, #0
 806ae3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 806ae42:	6878      	ldr	r0, [r7, #4]
 806ae44:	f001 fcee 	bl	806c824 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 806ae48:	687b      	ldr	r3, [r7, #4]
 806ae4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 806ae4c:	2b00      	cmp	r3, #0
 806ae4e:	d102      	bne.n	806ae56 <HAL_TIM_Base_Init+0x156>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 806ae50:	687b      	ldr	r3, [r7, #4]
 806ae52:	4a27      	ldr	r2, [pc, #156]	@ (806aef0 <HAL_TIM_Base_Init+0x1f0>)
 806ae54:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 806ae56:	687b      	ldr	r3, [r7, #4]
 806ae58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 806ae5a:	6878      	ldr	r0, [r7, #4]
 806ae5c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 806ae5e:	687b      	ldr	r3, [r7, #4]
 806ae60:	2202      	movs	r2, #2
 806ae62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 806ae66:	687b      	ldr	r3, [r7, #4]
 806ae68:	681a      	ldr	r2, [r3, #0]
 806ae6a:	687b      	ldr	r3, [r7, #4]
 806ae6c:	3304      	adds	r3, #4
 806ae6e:	4619      	mov	r1, r3
 806ae70:	4610      	mov	r0, r2
 806ae72:	f001 f92f 	bl	806c0d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 806ae76:	687b      	ldr	r3, [r7, #4]
 806ae78:	2201      	movs	r2, #1
 806ae7a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 806ae7e:	687b      	ldr	r3, [r7, #4]
 806ae80:	2201      	movs	r2, #1
 806ae82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 806ae86:	687b      	ldr	r3, [r7, #4]
 806ae88:	2201      	movs	r2, #1
 806ae8a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 806ae8e:	687b      	ldr	r3, [r7, #4]
 806ae90:	2201      	movs	r2, #1
 806ae92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 806ae96:	687b      	ldr	r3, [r7, #4]
 806ae98:	2201      	movs	r2, #1
 806ae9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 806ae9e:	687b      	ldr	r3, [r7, #4]
 806aea0:	2201      	movs	r2, #1
 806aea2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 806aea6:	687b      	ldr	r3, [r7, #4]
 806aea8:	2201      	movs	r2, #1
 806aeaa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 806aeae:	687b      	ldr	r3, [r7, #4]
 806aeb0:	2201      	movs	r2, #1
 806aeb2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 806aeb6:	687b      	ldr	r3, [r7, #4]
 806aeb8:	2201      	movs	r2, #1
 806aeba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 806aebe:	687b      	ldr	r3, [r7, #4]
 806aec0:	2201      	movs	r2, #1
 806aec2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 806aec6:	2300      	movs	r3, #0
}
 806aec8:	4618      	mov	r0, r3
 806aeca:	3708      	adds	r7, #8
 806aecc:	46bd      	mov	sp, r7
 806aece:	bd80      	pop	{r7, pc}
 806aed0:	40010000 	.word	0x40010000
 806aed4:	40000400 	.word	0x40000400
 806aed8:	40000800 	.word	0x40000800
 806aedc:	40000c00 	.word	0x40000c00
 806aee0:	40014000 	.word	0x40014000
 806aee4:	40014400 	.word	0x40014400
 806aee8:	40014800 	.word	0x40014800
 806aeec:	08071840 	.word	0x08071840
 806aef0:	08066abd 	.word	0x08066abd

0806aef4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 806aef4:	b580      	push	{r7, lr}
 806aef6:	b084      	sub	sp, #16
 806aef8:	af00      	add	r7, sp, #0
 806aefa:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 806aefc:	687b      	ldr	r3, [r7, #4]
 806aefe:	681b      	ldr	r3, [r3, #0]
 806af00:	4a3d      	ldr	r2, [pc, #244]	@ (806aff8 <HAL_TIM_Base_Start_IT+0x104>)
 806af02:	4293      	cmp	r3, r2
 806af04:	d027      	beq.n	806af56 <HAL_TIM_Base_Start_IT+0x62>
 806af06:	687b      	ldr	r3, [r7, #4]
 806af08:	681b      	ldr	r3, [r3, #0]
 806af0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 806af0e:	d022      	beq.n	806af56 <HAL_TIM_Base_Start_IT+0x62>
 806af10:	687b      	ldr	r3, [r7, #4]
 806af12:	681b      	ldr	r3, [r3, #0]
 806af14:	4a39      	ldr	r2, [pc, #228]	@ (806affc <HAL_TIM_Base_Start_IT+0x108>)
 806af16:	4293      	cmp	r3, r2
 806af18:	d01d      	beq.n	806af56 <HAL_TIM_Base_Start_IT+0x62>
 806af1a:	687b      	ldr	r3, [r7, #4]
 806af1c:	681b      	ldr	r3, [r3, #0]
 806af1e:	4a38      	ldr	r2, [pc, #224]	@ (806b000 <HAL_TIM_Base_Start_IT+0x10c>)
 806af20:	4293      	cmp	r3, r2
 806af22:	d018      	beq.n	806af56 <HAL_TIM_Base_Start_IT+0x62>
 806af24:	687b      	ldr	r3, [r7, #4]
 806af26:	681b      	ldr	r3, [r3, #0]
 806af28:	4a36      	ldr	r2, [pc, #216]	@ (806b004 <HAL_TIM_Base_Start_IT+0x110>)
 806af2a:	4293      	cmp	r3, r2
 806af2c:	d013      	beq.n	806af56 <HAL_TIM_Base_Start_IT+0x62>
 806af2e:	687b      	ldr	r3, [r7, #4]
 806af30:	681b      	ldr	r3, [r3, #0]
 806af32:	4a35      	ldr	r2, [pc, #212]	@ (806b008 <HAL_TIM_Base_Start_IT+0x114>)
 806af34:	4293      	cmp	r3, r2
 806af36:	d00e      	beq.n	806af56 <HAL_TIM_Base_Start_IT+0x62>
 806af38:	687b      	ldr	r3, [r7, #4]
 806af3a:	681b      	ldr	r3, [r3, #0]
 806af3c:	4a33      	ldr	r2, [pc, #204]	@ (806b00c <HAL_TIM_Base_Start_IT+0x118>)
 806af3e:	4293      	cmp	r3, r2
 806af40:	d009      	beq.n	806af56 <HAL_TIM_Base_Start_IT+0x62>
 806af42:	687b      	ldr	r3, [r7, #4]
 806af44:	681b      	ldr	r3, [r3, #0]
 806af46:	4a32      	ldr	r2, [pc, #200]	@ (806b010 <HAL_TIM_Base_Start_IT+0x11c>)
 806af48:	4293      	cmp	r3, r2
 806af4a:	d004      	beq.n	806af56 <HAL_TIM_Base_Start_IT+0x62>
 806af4c:	f44f 71e8 	mov.w	r1, #464	@ 0x1d0
 806af50:	4830      	ldr	r0, [pc, #192]	@ (806b014 <HAL_TIM_Base_Start_IT+0x120>)
 806af52:	f7fb fa78 	bl	8066446 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 806af56:	687b      	ldr	r3, [r7, #4]
 806af58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 806af5c:	b2db      	uxtb	r3, r3
 806af5e:	2b01      	cmp	r3, #1
 806af60:	d001      	beq.n	806af66 <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 806af62:	2301      	movs	r3, #1
 806af64:	e044      	b.n	806aff0 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 806af66:	687b      	ldr	r3, [r7, #4]
 806af68:	2202      	movs	r2, #2
 806af6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 806af6e:	687b      	ldr	r3, [r7, #4]
 806af70:	681b      	ldr	r3, [r3, #0]
 806af72:	68da      	ldr	r2, [r3, #12]
 806af74:	687b      	ldr	r3, [r7, #4]
 806af76:	681b      	ldr	r3, [r3, #0]
 806af78:	f042 0201 	orr.w	r2, r2, #1
 806af7c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 806af7e:	687b      	ldr	r3, [r7, #4]
 806af80:	681b      	ldr	r3, [r3, #0]
 806af82:	4a1d      	ldr	r2, [pc, #116]	@ (806aff8 <HAL_TIM_Base_Start_IT+0x104>)
 806af84:	4293      	cmp	r3, r2
 806af86:	d018      	beq.n	806afba <HAL_TIM_Base_Start_IT+0xc6>
 806af88:	687b      	ldr	r3, [r7, #4]
 806af8a:	681b      	ldr	r3, [r3, #0]
 806af8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 806af90:	d013      	beq.n	806afba <HAL_TIM_Base_Start_IT+0xc6>
 806af92:	687b      	ldr	r3, [r7, #4]
 806af94:	681b      	ldr	r3, [r3, #0]
 806af96:	4a19      	ldr	r2, [pc, #100]	@ (806affc <HAL_TIM_Base_Start_IT+0x108>)
 806af98:	4293      	cmp	r3, r2
 806af9a:	d00e      	beq.n	806afba <HAL_TIM_Base_Start_IT+0xc6>
 806af9c:	687b      	ldr	r3, [r7, #4]
 806af9e:	681b      	ldr	r3, [r3, #0]
 806afa0:	4a17      	ldr	r2, [pc, #92]	@ (806b000 <HAL_TIM_Base_Start_IT+0x10c>)
 806afa2:	4293      	cmp	r3, r2
 806afa4:	d009      	beq.n	806afba <HAL_TIM_Base_Start_IT+0xc6>
 806afa6:	687b      	ldr	r3, [r7, #4]
 806afa8:	681b      	ldr	r3, [r3, #0]
 806afaa:	4a16      	ldr	r2, [pc, #88]	@ (806b004 <HAL_TIM_Base_Start_IT+0x110>)
 806afac:	4293      	cmp	r3, r2
 806afae:	d004      	beq.n	806afba <HAL_TIM_Base_Start_IT+0xc6>
 806afb0:	687b      	ldr	r3, [r7, #4]
 806afb2:	681b      	ldr	r3, [r3, #0]
 806afb4:	4a14      	ldr	r2, [pc, #80]	@ (806b008 <HAL_TIM_Base_Start_IT+0x114>)
 806afb6:	4293      	cmp	r3, r2
 806afb8:	d111      	bne.n	806afde <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 806afba:	687b      	ldr	r3, [r7, #4]
 806afbc:	681b      	ldr	r3, [r3, #0]
 806afbe:	689b      	ldr	r3, [r3, #8]
 806afc0:	f003 0307 	and.w	r3, r3, #7
 806afc4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 806afc6:	68fb      	ldr	r3, [r7, #12]
 806afc8:	2b06      	cmp	r3, #6
 806afca:	d010      	beq.n	806afee <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 806afcc:	687b      	ldr	r3, [r7, #4]
 806afce:	681b      	ldr	r3, [r3, #0]
 806afd0:	681a      	ldr	r2, [r3, #0]
 806afd2:	687b      	ldr	r3, [r7, #4]
 806afd4:	681b      	ldr	r3, [r3, #0]
 806afd6:	f042 0201 	orr.w	r2, r2, #1
 806afda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 806afdc:	e007      	b.n	806afee <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 806afde:	687b      	ldr	r3, [r7, #4]
 806afe0:	681b      	ldr	r3, [r3, #0]
 806afe2:	681a      	ldr	r2, [r3, #0]
 806afe4:	687b      	ldr	r3, [r7, #4]
 806afe6:	681b      	ldr	r3, [r3, #0]
 806afe8:	f042 0201 	orr.w	r2, r2, #1
 806afec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 806afee:	2300      	movs	r3, #0
}
 806aff0:	4618      	mov	r0, r3
 806aff2:	3710      	adds	r7, #16
 806aff4:	46bd      	mov	sp, r7
 806aff6:	bd80      	pop	{r7, pc}
 806aff8:	40010000 	.word	0x40010000
 806affc:	40000400 	.word	0x40000400
 806b000:	40000800 	.word	0x40000800
 806b004:	40000c00 	.word	0x40000c00
 806b008:	40014000 	.word	0x40014000
 806b00c:	40014400 	.word	0x40014400
 806b010:	40014800 	.word	0x40014800
 806b014:	08071840 	.word	0x08071840

0806b018 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 806b018:	b580      	push	{r7, lr}
 806b01a:	b082      	sub	sp, #8
 806b01c:	af00      	add	r7, sp, #0
 806b01e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 806b020:	687b      	ldr	r3, [r7, #4]
 806b022:	2b00      	cmp	r3, #0
 806b024:	d101      	bne.n	806b02a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 806b026:	2301      	movs	r3, #1
 806b028:	e0da      	b.n	806b1e0 <HAL_TIM_PWM_Init+0x1c8>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 806b02a:	687b      	ldr	r3, [r7, #4]
 806b02c:	681b      	ldr	r3, [r3, #0]
 806b02e:	4a6e      	ldr	r2, [pc, #440]	@ (806b1e8 <HAL_TIM_PWM_Init+0x1d0>)
 806b030:	4293      	cmp	r3, r2
 806b032:	d027      	beq.n	806b084 <HAL_TIM_PWM_Init+0x6c>
 806b034:	687b      	ldr	r3, [r7, #4]
 806b036:	681b      	ldr	r3, [r3, #0]
 806b038:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 806b03c:	d022      	beq.n	806b084 <HAL_TIM_PWM_Init+0x6c>
 806b03e:	687b      	ldr	r3, [r7, #4]
 806b040:	681b      	ldr	r3, [r3, #0]
 806b042:	4a6a      	ldr	r2, [pc, #424]	@ (806b1ec <HAL_TIM_PWM_Init+0x1d4>)
 806b044:	4293      	cmp	r3, r2
 806b046:	d01d      	beq.n	806b084 <HAL_TIM_PWM_Init+0x6c>
 806b048:	687b      	ldr	r3, [r7, #4]
 806b04a:	681b      	ldr	r3, [r3, #0]
 806b04c:	4a68      	ldr	r2, [pc, #416]	@ (806b1f0 <HAL_TIM_PWM_Init+0x1d8>)
 806b04e:	4293      	cmp	r3, r2
 806b050:	d018      	beq.n	806b084 <HAL_TIM_PWM_Init+0x6c>
 806b052:	687b      	ldr	r3, [r7, #4]
 806b054:	681b      	ldr	r3, [r3, #0]
 806b056:	4a67      	ldr	r2, [pc, #412]	@ (806b1f4 <HAL_TIM_PWM_Init+0x1dc>)
 806b058:	4293      	cmp	r3, r2
 806b05a:	d013      	beq.n	806b084 <HAL_TIM_PWM_Init+0x6c>
 806b05c:	687b      	ldr	r3, [r7, #4]
 806b05e:	681b      	ldr	r3, [r3, #0]
 806b060:	4a65      	ldr	r2, [pc, #404]	@ (806b1f8 <HAL_TIM_PWM_Init+0x1e0>)
 806b062:	4293      	cmp	r3, r2
 806b064:	d00e      	beq.n	806b084 <HAL_TIM_PWM_Init+0x6c>
 806b066:	687b      	ldr	r3, [r7, #4]
 806b068:	681b      	ldr	r3, [r3, #0]
 806b06a:	4a64      	ldr	r2, [pc, #400]	@ (806b1fc <HAL_TIM_PWM_Init+0x1e4>)
 806b06c:	4293      	cmp	r3, r2
 806b06e:	d009      	beq.n	806b084 <HAL_TIM_PWM_Init+0x6c>
 806b070:	687b      	ldr	r3, [r7, #4]
 806b072:	681b      	ldr	r3, [r3, #0]
 806b074:	4a62      	ldr	r2, [pc, #392]	@ (806b200 <HAL_TIM_PWM_Init+0x1e8>)
 806b076:	4293      	cmp	r3, r2
 806b078:	d004      	beq.n	806b084 <HAL_TIM_PWM_Init+0x6c>
 806b07a:	f240 512c 	movw	r1, #1324	@ 0x52c
 806b07e:	4861      	ldr	r0, [pc, #388]	@ (806b204 <HAL_TIM_PWM_Init+0x1ec>)
 806b080:	f7fb f9e1 	bl	8066446 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 806b084:	687b      	ldr	r3, [r7, #4]
 806b086:	689b      	ldr	r3, [r3, #8]
 806b088:	2b00      	cmp	r3, #0
 806b08a:	d014      	beq.n	806b0b6 <HAL_TIM_PWM_Init+0x9e>
 806b08c:	687b      	ldr	r3, [r7, #4]
 806b08e:	689b      	ldr	r3, [r3, #8]
 806b090:	2b10      	cmp	r3, #16
 806b092:	d010      	beq.n	806b0b6 <HAL_TIM_PWM_Init+0x9e>
 806b094:	687b      	ldr	r3, [r7, #4]
 806b096:	689b      	ldr	r3, [r3, #8]
 806b098:	2b20      	cmp	r3, #32
 806b09a:	d00c      	beq.n	806b0b6 <HAL_TIM_PWM_Init+0x9e>
 806b09c:	687b      	ldr	r3, [r7, #4]
 806b09e:	689b      	ldr	r3, [r3, #8]
 806b0a0:	2b40      	cmp	r3, #64	@ 0x40
 806b0a2:	d008      	beq.n	806b0b6 <HAL_TIM_PWM_Init+0x9e>
 806b0a4:	687b      	ldr	r3, [r7, #4]
 806b0a6:	689b      	ldr	r3, [r3, #8]
 806b0a8:	2b60      	cmp	r3, #96	@ 0x60
 806b0aa:	d004      	beq.n	806b0b6 <HAL_TIM_PWM_Init+0x9e>
 806b0ac:	f240 512d 	movw	r1, #1325	@ 0x52d
 806b0b0:	4854      	ldr	r0, [pc, #336]	@ (806b204 <HAL_TIM_PWM_Init+0x1ec>)
 806b0b2:	f7fb f9c8 	bl	8066446 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 806b0b6:	687b      	ldr	r3, [r7, #4]
 806b0b8:	691b      	ldr	r3, [r3, #16]
 806b0ba:	2b00      	cmp	r3, #0
 806b0bc:	d00e      	beq.n	806b0dc <HAL_TIM_PWM_Init+0xc4>
 806b0be:	687b      	ldr	r3, [r7, #4]
 806b0c0:	691b      	ldr	r3, [r3, #16]
 806b0c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 806b0c6:	d009      	beq.n	806b0dc <HAL_TIM_PWM_Init+0xc4>
 806b0c8:	687b      	ldr	r3, [r7, #4]
 806b0ca:	691b      	ldr	r3, [r3, #16]
 806b0cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 806b0d0:	d004      	beq.n	806b0dc <HAL_TIM_PWM_Init+0xc4>
 806b0d2:	f240 512e 	movw	r1, #1326	@ 0x52e
 806b0d6:	484b      	ldr	r0, [pc, #300]	@ (806b204 <HAL_TIM_PWM_Init+0x1ec>)
 806b0d8:	f7fb f9b5 	bl	8066446 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 806b0dc:	687b      	ldr	r3, [r7, #4]
 806b0de:	681b      	ldr	r3, [r3, #0]
 806b0e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 806b0e4:	d004      	beq.n	806b0f0 <HAL_TIM_PWM_Init+0xd8>
 806b0e6:	687b      	ldr	r3, [r7, #4]
 806b0e8:	681b      	ldr	r3, [r3, #0]
 806b0ea:	4a42      	ldr	r2, [pc, #264]	@ (806b1f4 <HAL_TIM_PWM_Init+0x1dc>)
 806b0ec:	4293      	cmp	r3, r2
 806b0ee:	d107      	bne.n	806b100 <HAL_TIM_PWM_Init+0xe8>
 806b0f0:	687b      	ldr	r3, [r7, #4]
 806b0f2:	68db      	ldr	r3, [r3, #12]
 806b0f4:	2b00      	cmp	r3, #0
 806b0f6:	bf14      	ite	ne
 806b0f8:	2301      	movne	r3, #1
 806b0fa:	2300      	moveq	r3, #0
 806b0fc:	b2db      	uxtb	r3, r3
 806b0fe:	e00e      	b.n	806b11e <HAL_TIM_PWM_Init+0x106>
 806b100:	687b      	ldr	r3, [r7, #4]
 806b102:	68db      	ldr	r3, [r3, #12]
 806b104:	2b00      	cmp	r3, #0
 806b106:	d006      	beq.n	806b116 <HAL_TIM_PWM_Init+0xfe>
 806b108:	687b      	ldr	r3, [r7, #4]
 806b10a:	68db      	ldr	r3, [r3, #12]
 806b10c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 806b110:	d201      	bcs.n	806b116 <HAL_TIM_PWM_Init+0xfe>
 806b112:	2301      	movs	r3, #1
 806b114:	e000      	b.n	806b118 <HAL_TIM_PWM_Init+0x100>
 806b116:	2300      	movs	r3, #0
 806b118:	f003 0301 	and.w	r3, r3, #1
 806b11c:	b2db      	uxtb	r3, r3
 806b11e:	2b00      	cmp	r3, #0
 806b120:	d104      	bne.n	806b12c <HAL_TIM_PWM_Init+0x114>
 806b122:	f240 512f 	movw	r1, #1327	@ 0x52f
 806b126:	4837      	ldr	r0, [pc, #220]	@ (806b204 <HAL_TIM_PWM_Init+0x1ec>)
 806b128:	f7fb f98d 	bl	8066446 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 806b12c:	687b      	ldr	r3, [r7, #4]
 806b12e:	699b      	ldr	r3, [r3, #24]
 806b130:	2b00      	cmp	r3, #0
 806b132:	d008      	beq.n	806b146 <HAL_TIM_PWM_Init+0x12e>
 806b134:	687b      	ldr	r3, [r7, #4]
 806b136:	699b      	ldr	r3, [r3, #24]
 806b138:	2b80      	cmp	r3, #128	@ 0x80
 806b13a:	d004      	beq.n	806b146 <HAL_TIM_PWM_Init+0x12e>
 806b13c:	f44f 61a6 	mov.w	r1, #1328	@ 0x530
 806b140:	4830      	ldr	r0, [pc, #192]	@ (806b204 <HAL_TIM_PWM_Init+0x1ec>)
 806b142:	f7fb f980 	bl	8066446 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 806b146:	687b      	ldr	r3, [r7, #4]
 806b148:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 806b14c:	b2db      	uxtb	r3, r3
 806b14e:	2b00      	cmp	r3, #0
 806b150:	d111      	bne.n	806b176 <HAL_TIM_PWM_Init+0x15e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 806b152:	687b      	ldr	r3, [r7, #4]
 806b154:	2200      	movs	r2, #0
 806b156:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 806b15a:	6878      	ldr	r0, [r7, #4]
 806b15c:	f001 fb62 	bl	806c824 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 806b160:	687b      	ldr	r3, [r7, #4]
 806b162:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 806b164:	2b00      	cmp	r3, #0
 806b166:	d102      	bne.n	806b16e <HAL_TIM_PWM_Init+0x156>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 806b168:	687b      	ldr	r3, [r7, #4]
 806b16a:	4a27      	ldr	r2, [pc, #156]	@ (806b208 <HAL_TIM_PWM_Init+0x1f0>)
 806b16c:	661a      	str	r2, [r3, #96]	@ 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 806b16e:	687b      	ldr	r3, [r7, #4]
 806b170:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 806b172:	6878      	ldr	r0, [r7, #4]
 806b174:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 806b176:	687b      	ldr	r3, [r7, #4]
 806b178:	2202      	movs	r2, #2
 806b17a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 806b17e:	687b      	ldr	r3, [r7, #4]
 806b180:	681a      	ldr	r2, [r3, #0]
 806b182:	687b      	ldr	r3, [r7, #4]
 806b184:	3304      	adds	r3, #4
 806b186:	4619      	mov	r1, r3
 806b188:	4610      	mov	r0, r2
 806b18a:	f000 ffa3 	bl	806c0d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 806b18e:	687b      	ldr	r3, [r7, #4]
 806b190:	2201      	movs	r2, #1
 806b192:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 806b196:	687b      	ldr	r3, [r7, #4]
 806b198:	2201      	movs	r2, #1
 806b19a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 806b19e:	687b      	ldr	r3, [r7, #4]
 806b1a0:	2201      	movs	r2, #1
 806b1a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 806b1a6:	687b      	ldr	r3, [r7, #4]
 806b1a8:	2201      	movs	r2, #1
 806b1aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 806b1ae:	687b      	ldr	r3, [r7, #4]
 806b1b0:	2201      	movs	r2, #1
 806b1b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 806b1b6:	687b      	ldr	r3, [r7, #4]
 806b1b8:	2201      	movs	r2, #1
 806b1ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 806b1be:	687b      	ldr	r3, [r7, #4]
 806b1c0:	2201      	movs	r2, #1
 806b1c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 806b1c6:	687b      	ldr	r3, [r7, #4]
 806b1c8:	2201      	movs	r2, #1
 806b1ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 806b1ce:	687b      	ldr	r3, [r7, #4]
 806b1d0:	2201      	movs	r2, #1
 806b1d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 806b1d6:	687b      	ldr	r3, [r7, #4]
 806b1d8:	2201      	movs	r2, #1
 806b1da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 806b1de:	2300      	movs	r3, #0
}
 806b1e0:	4618      	mov	r0, r3
 806b1e2:	3708      	adds	r7, #8
 806b1e4:	46bd      	mov	sp, r7
 806b1e6:	bd80      	pop	{r7, pc}
 806b1e8:	40010000 	.word	0x40010000
 806b1ec:	40000400 	.word	0x40000400
 806b1f0:	40000800 	.word	0x40000800
 806b1f4:	40000c00 	.word	0x40000c00
 806b1f8:	40014000 	.word	0x40014000
 806b1fc:	40014400 	.word	0x40014400
 806b200:	40014800 	.word	0x40014800
 806b204:	08071840 	.word	0x08071840
 806b208:	0806b20d 	.word	0x0806b20d

0806b20c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 806b20c:	b480      	push	{r7}
 806b20e:	b083      	sub	sp, #12
 806b210:	af00      	add	r7, sp, #0
 806b212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 806b214:	bf00      	nop
 806b216:	370c      	adds	r7, #12
 806b218:	46bd      	mov	sp, r7
 806b21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 806b21e:	4770      	bx	lr

0806b220 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 806b220:	b580      	push	{r7, lr}
 806b222:	b084      	sub	sp, #16
 806b224:	af00      	add	r7, sp, #0
 806b226:	6078      	str	r0, [r7, #4]
 806b228:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 806b22a:	687b      	ldr	r3, [r7, #4]
 806b22c:	681b      	ldr	r3, [r3, #0]
 806b22e:	4a8a      	ldr	r2, [pc, #552]	@ (806b458 <HAL_TIM_PWM_Start+0x238>)
 806b230:	4293      	cmp	r3, r2
 806b232:	d10b      	bne.n	806b24c <HAL_TIM_PWM_Start+0x2c>
 806b234:	683b      	ldr	r3, [r7, #0]
 806b236:	2b00      	cmp	r3, #0
 806b238:	d06c      	beq.n	806b314 <HAL_TIM_PWM_Start+0xf4>
 806b23a:	683b      	ldr	r3, [r7, #0]
 806b23c:	2b04      	cmp	r3, #4
 806b23e:	d069      	beq.n	806b314 <HAL_TIM_PWM_Start+0xf4>
 806b240:	683b      	ldr	r3, [r7, #0]
 806b242:	2b08      	cmp	r3, #8
 806b244:	d066      	beq.n	806b314 <HAL_TIM_PWM_Start+0xf4>
 806b246:	683b      	ldr	r3, [r7, #0]
 806b248:	2b0c      	cmp	r3, #12
 806b24a:	d063      	beq.n	806b314 <HAL_TIM_PWM_Start+0xf4>
 806b24c:	687b      	ldr	r3, [r7, #4]
 806b24e:	681b      	ldr	r3, [r3, #0]
 806b250:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 806b254:	d10b      	bne.n	806b26e <HAL_TIM_PWM_Start+0x4e>
 806b256:	683b      	ldr	r3, [r7, #0]
 806b258:	2b00      	cmp	r3, #0
 806b25a:	d05b      	beq.n	806b314 <HAL_TIM_PWM_Start+0xf4>
 806b25c:	683b      	ldr	r3, [r7, #0]
 806b25e:	2b04      	cmp	r3, #4
 806b260:	d058      	beq.n	806b314 <HAL_TIM_PWM_Start+0xf4>
 806b262:	683b      	ldr	r3, [r7, #0]
 806b264:	2b08      	cmp	r3, #8
 806b266:	d055      	beq.n	806b314 <HAL_TIM_PWM_Start+0xf4>
 806b268:	683b      	ldr	r3, [r7, #0]
 806b26a:	2b0c      	cmp	r3, #12
 806b26c:	d052      	beq.n	806b314 <HAL_TIM_PWM_Start+0xf4>
 806b26e:	687b      	ldr	r3, [r7, #4]
 806b270:	681b      	ldr	r3, [r3, #0]
 806b272:	4a7a      	ldr	r2, [pc, #488]	@ (806b45c <HAL_TIM_PWM_Start+0x23c>)
 806b274:	4293      	cmp	r3, r2
 806b276:	d10b      	bne.n	806b290 <HAL_TIM_PWM_Start+0x70>
 806b278:	683b      	ldr	r3, [r7, #0]
 806b27a:	2b00      	cmp	r3, #0
 806b27c:	d04a      	beq.n	806b314 <HAL_TIM_PWM_Start+0xf4>
 806b27e:	683b      	ldr	r3, [r7, #0]
 806b280:	2b04      	cmp	r3, #4
 806b282:	d047      	beq.n	806b314 <HAL_TIM_PWM_Start+0xf4>
 806b284:	683b      	ldr	r3, [r7, #0]
 806b286:	2b08      	cmp	r3, #8
 806b288:	d044      	beq.n	806b314 <HAL_TIM_PWM_Start+0xf4>
 806b28a:	683b      	ldr	r3, [r7, #0]
 806b28c:	2b0c      	cmp	r3, #12
 806b28e:	d041      	beq.n	806b314 <HAL_TIM_PWM_Start+0xf4>
 806b290:	687b      	ldr	r3, [r7, #4]
 806b292:	681b      	ldr	r3, [r3, #0]
 806b294:	4a72      	ldr	r2, [pc, #456]	@ (806b460 <HAL_TIM_PWM_Start+0x240>)
 806b296:	4293      	cmp	r3, r2
 806b298:	d10b      	bne.n	806b2b2 <HAL_TIM_PWM_Start+0x92>
 806b29a:	683b      	ldr	r3, [r7, #0]
 806b29c:	2b00      	cmp	r3, #0
 806b29e:	d039      	beq.n	806b314 <HAL_TIM_PWM_Start+0xf4>
 806b2a0:	683b      	ldr	r3, [r7, #0]
 806b2a2:	2b04      	cmp	r3, #4
 806b2a4:	d036      	beq.n	806b314 <HAL_TIM_PWM_Start+0xf4>
 806b2a6:	683b      	ldr	r3, [r7, #0]
 806b2a8:	2b08      	cmp	r3, #8
 806b2aa:	d033      	beq.n	806b314 <HAL_TIM_PWM_Start+0xf4>
 806b2ac:	683b      	ldr	r3, [r7, #0]
 806b2ae:	2b0c      	cmp	r3, #12
 806b2b0:	d030      	beq.n	806b314 <HAL_TIM_PWM_Start+0xf4>
 806b2b2:	687b      	ldr	r3, [r7, #4]
 806b2b4:	681b      	ldr	r3, [r3, #0]
 806b2b6:	4a6b      	ldr	r2, [pc, #428]	@ (806b464 <HAL_TIM_PWM_Start+0x244>)
 806b2b8:	4293      	cmp	r3, r2
 806b2ba:	d10b      	bne.n	806b2d4 <HAL_TIM_PWM_Start+0xb4>
 806b2bc:	683b      	ldr	r3, [r7, #0]
 806b2be:	2b00      	cmp	r3, #0
 806b2c0:	d028      	beq.n	806b314 <HAL_TIM_PWM_Start+0xf4>
 806b2c2:	683b      	ldr	r3, [r7, #0]
 806b2c4:	2b04      	cmp	r3, #4
 806b2c6:	d025      	beq.n	806b314 <HAL_TIM_PWM_Start+0xf4>
 806b2c8:	683b      	ldr	r3, [r7, #0]
 806b2ca:	2b08      	cmp	r3, #8
 806b2cc:	d022      	beq.n	806b314 <HAL_TIM_PWM_Start+0xf4>
 806b2ce:	683b      	ldr	r3, [r7, #0]
 806b2d0:	2b0c      	cmp	r3, #12
 806b2d2:	d01f      	beq.n	806b314 <HAL_TIM_PWM_Start+0xf4>
 806b2d4:	687b      	ldr	r3, [r7, #4]
 806b2d6:	681b      	ldr	r3, [r3, #0]
 806b2d8:	4a63      	ldr	r2, [pc, #396]	@ (806b468 <HAL_TIM_PWM_Start+0x248>)
 806b2da:	4293      	cmp	r3, r2
 806b2dc:	d105      	bne.n	806b2ea <HAL_TIM_PWM_Start+0xca>
 806b2de:	683b      	ldr	r3, [r7, #0]
 806b2e0:	2b00      	cmp	r3, #0
 806b2e2:	d017      	beq.n	806b314 <HAL_TIM_PWM_Start+0xf4>
 806b2e4:	683b      	ldr	r3, [r7, #0]
 806b2e6:	2b04      	cmp	r3, #4
 806b2e8:	d014      	beq.n	806b314 <HAL_TIM_PWM_Start+0xf4>
 806b2ea:	687b      	ldr	r3, [r7, #4]
 806b2ec:	681b      	ldr	r3, [r3, #0]
 806b2ee:	4a5f      	ldr	r2, [pc, #380]	@ (806b46c <HAL_TIM_PWM_Start+0x24c>)
 806b2f0:	4293      	cmp	r3, r2
 806b2f2:	d102      	bne.n	806b2fa <HAL_TIM_PWM_Start+0xda>
 806b2f4:	683b      	ldr	r3, [r7, #0]
 806b2f6:	2b00      	cmp	r3, #0
 806b2f8:	d00c      	beq.n	806b314 <HAL_TIM_PWM_Start+0xf4>
 806b2fa:	687b      	ldr	r3, [r7, #4]
 806b2fc:	681b      	ldr	r3, [r3, #0]
 806b2fe:	4a5c      	ldr	r2, [pc, #368]	@ (806b470 <HAL_TIM_PWM_Start+0x250>)
 806b300:	4293      	cmp	r3, r2
 806b302:	d102      	bne.n	806b30a <HAL_TIM_PWM_Start+0xea>
 806b304:	683b      	ldr	r3, [r7, #0]
 806b306:	2b00      	cmp	r3, #0
 806b308:	d004      	beq.n	806b314 <HAL_TIM_PWM_Start+0xf4>
 806b30a:	f240 51b3 	movw	r1, #1459	@ 0x5b3
 806b30e:	4859      	ldr	r0, [pc, #356]	@ (806b474 <HAL_TIM_PWM_Start+0x254>)
 806b310:	f7fb f899 	bl	8066446 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 806b314:	683b      	ldr	r3, [r7, #0]
 806b316:	2b00      	cmp	r3, #0
 806b318:	d109      	bne.n	806b32e <HAL_TIM_PWM_Start+0x10e>
 806b31a:	687b      	ldr	r3, [r7, #4]
 806b31c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 806b320:	b2db      	uxtb	r3, r3
 806b322:	2b01      	cmp	r3, #1
 806b324:	bf14      	ite	ne
 806b326:	2301      	movne	r3, #1
 806b328:	2300      	moveq	r3, #0
 806b32a:	b2db      	uxtb	r3, r3
 806b32c:	e022      	b.n	806b374 <HAL_TIM_PWM_Start+0x154>
 806b32e:	683b      	ldr	r3, [r7, #0]
 806b330:	2b04      	cmp	r3, #4
 806b332:	d109      	bne.n	806b348 <HAL_TIM_PWM_Start+0x128>
 806b334:	687b      	ldr	r3, [r7, #4]
 806b336:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 806b33a:	b2db      	uxtb	r3, r3
 806b33c:	2b01      	cmp	r3, #1
 806b33e:	bf14      	ite	ne
 806b340:	2301      	movne	r3, #1
 806b342:	2300      	moveq	r3, #0
 806b344:	b2db      	uxtb	r3, r3
 806b346:	e015      	b.n	806b374 <HAL_TIM_PWM_Start+0x154>
 806b348:	683b      	ldr	r3, [r7, #0]
 806b34a:	2b08      	cmp	r3, #8
 806b34c:	d109      	bne.n	806b362 <HAL_TIM_PWM_Start+0x142>
 806b34e:	687b      	ldr	r3, [r7, #4]
 806b350:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 806b354:	b2db      	uxtb	r3, r3
 806b356:	2b01      	cmp	r3, #1
 806b358:	bf14      	ite	ne
 806b35a:	2301      	movne	r3, #1
 806b35c:	2300      	moveq	r3, #0
 806b35e:	b2db      	uxtb	r3, r3
 806b360:	e008      	b.n	806b374 <HAL_TIM_PWM_Start+0x154>
 806b362:	687b      	ldr	r3, [r7, #4]
 806b364:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 806b368:	b2db      	uxtb	r3, r3
 806b36a:	2b01      	cmp	r3, #1
 806b36c:	bf14      	ite	ne
 806b36e:	2301      	movne	r3, #1
 806b370:	2300      	moveq	r3, #0
 806b372:	b2db      	uxtb	r3, r3
 806b374:	2b00      	cmp	r3, #0
 806b376:	d001      	beq.n	806b37c <HAL_TIM_PWM_Start+0x15c>
  {
    return HAL_ERROR;
 806b378:	2301      	movs	r3, #1
 806b37a:	e068      	b.n	806b44e <HAL_TIM_PWM_Start+0x22e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 806b37c:	683b      	ldr	r3, [r7, #0]
 806b37e:	2b00      	cmp	r3, #0
 806b380:	d104      	bne.n	806b38c <HAL_TIM_PWM_Start+0x16c>
 806b382:	687b      	ldr	r3, [r7, #4]
 806b384:	2202      	movs	r2, #2
 806b386:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 806b38a:	e013      	b.n	806b3b4 <HAL_TIM_PWM_Start+0x194>
 806b38c:	683b      	ldr	r3, [r7, #0]
 806b38e:	2b04      	cmp	r3, #4
 806b390:	d104      	bne.n	806b39c <HAL_TIM_PWM_Start+0x17c>
 806b392:	687b      	ldr	r3, [r7, #4]
 806b394:	2202      	movs	r2, #2
 806b396:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 806b39a:	e00b      	b.n	806b3b4 <HAL_TIM_PWM_Start+0x194>
 806b39c:	683b      	ldr	r3, [r7, #0]
 806b39e:	2b08      	cmp	r3, #8
 806b3a0:	d104      	bne.n	806b3ac <HAL_TIM_PWM_Start+0x18c>
 806b3a2:	687b      	ldr	r3, [r7, #4]
 806b3a4:	2202      	movs	r2, #2
 806b3a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 806b3aa:	e003      	b.n	806b3b4 <HAL_TIM_PWM_Start+0x194>
 806b3ac:	687b      	ldr	r3, [r7, #4]
 806b3ae:	2202      	movs	r2, #2
 806b3b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 806b3b4:	687b      	ldr	r3, [r7, #4]
 806b3b6:	681b      	ldr	r3, [r3, #0]
 806b3b8:	2201      	movs	r2, #1
 806b3ba:	6839      	ldr	r1, [r7, #0]
 806b3bc:	4618      	mov	r0, r3
 806b3be:	f001 f9c5 	bl	806c74c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 806b3c2:	687b      	ldr	r3, [r7, #4]
 806b3c4:	681b      	ldr	r3, [r3, #0]
 806b3c6:	4a24      	ldr	r2, [pc, #144]	@ (806b458 <HAL_TIM_PWM_Start+0x238>)
 806b3c8:	4293      	cmp	r3, r2
 806b3ca:	d107      	bne.n	806b3dc <HAL_TIM_PWM_Start+0x1bc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 806b3cc:	687b      	ldr	r3, [r7, #4]
 806b3ce:	681b      	ldr	r3, [r3, #0]
 806b3d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 806b3d2:	687b      	ldr	r3, [r7, #4]
 806b3d4:	681b      	ldr	r3, [r3, #0]
 806b3d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 806b3da:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 806b3dc:	687b      	ldr	r3, [r7, #4]
 806b3de:	681b      	ldr	r3, [r3, #0]
 806b3e0:	4a1d      	ldr	r2, [pc, #116]	@ (806b458 <HAL_TIM_PWM_Start+0x238>)
 806b3e2:	4293      	cmp	r3, r2
 806b3e4:	d018      	beq.n	806b418 <HAL_TIM_PWM_Start+0x1f8>
 806b3e6:	687b      	ldr	r3, [r7, #4]
 806b3e8:	681b      	ldr	r3, [r3, #0]
 806b3ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 806b3ee:	d013      	beq.n	806b418 <HAL_TIM_PWM_Start+0x1f8>
 806b3f0:	687b      	ldr	r3, [r7, #4]
 806b3f2:	681b      	ldr	r3, [r3, #0]
 806b3f4:	4a19      	ldr	r2, [pc, #100]	@ (806b45c <HAL_TIM_PWM_Start+0x23c>)
 806b3f6:	4293      	cmp	r3, r2
 806b3f8:	d00e      	beq.n	806b418 <HAL_TIM_PWM_Start+0x1f8>
 806b3fa:	687b      	ldr	r3, [r7, #4]
 806b3fc:	681b      	ldr	r3, [r3, #0]
 806b3fe:	4a18      	ldr	r2, [pc, #96]	@ (806b460 <HAL_TIM_PWM_Start+0x240>)
 806b400:	4293      	cmp	r3, r2
 806b402:	d009      	beq.n	806b418 <HAL_TIM_PWM_Start+0x1f8>
 806b404:	687b      	ldr	r3, [r7, #4]
 806b406:	681b      	ldr	r3, [r3, #0]
 806b408:	4a16      	ldr	r2, [pc, #88]	@ (806b464 <HAL_TIM_PWM_Start+0x244>)
 806b40a:	4293      	cmp	r3, r2
 806b40c:	d004      	beq.n	806b418 <HAL_TIM_PWM_Start+0x1f8>
 806b40e:	687b      	ldr	r3, [r7, #4]
 806b410:	681b      	ldr	r3, [r3, #0]
 806b412:	4a15      	ldr	r2, [pc, #84]	@ (806b468 <HAL_TIM_PWM_Start+0x248>)
 806b414:	4293      	cmp	r3, r2
 806b416:	d111      	bne.n	806b43c <HAL_TIM_PWM_Start+0x21c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 806b418:	687b      	ldr	r3, [r7, #4]
 806b41a:	681b      	ldr	r3, [r3, #0]
 806b41c:	689b      	ldr	r3, [r3, #8]
 806b41e:	f003 0307 	and.w	r3, r3, #7
 806b422:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 806b424:	68fb      	ldr	r3, [r7, #12]
 806b426:	2b06      	cmp	r3, #6
 806b428:	d010      	beq.n	806b44c <HAL_TIM_PWM_Start+0x22c>
    {
      __HAL_TIM_ENABLE(htim);
 806b42a:	687b      	ldr	r3, [r7, #4]
 806b42c:	681b      	ldr	r3, [r3, #0]
 806b42e:	681a      	ldr	r2, [r3, #0]
 806b430:	687b      	ldr	r3, [r7, #4]
 806b432:	681b      	ldr	r3, [r3, #0]
 806b434:	f042 0201 	orr.w	r2, r2, #1
 806b438:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 806b43a:	e007      	b.n	806b44c <HAL_TIM_PWM_Start+0x22c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 806b43c:	687b      	ldr	r3, [r7, #4]
 806b43e:	681b      	ldr	r3, [r3, #0]
 806b440:	681a      	ldr	r2, [r3, #0]
 806b442:	687b      	ldr	r3, [r7, #4]
 806b444:	681b      	ldr	r3, [r3, #0]
 806b446:	f042 0201 	orr.w	r2, r2, #1
 806b44a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 806b44c:	2300      	movs	r3, #0
}
 806b44e:	4618      	mov	r0, r3
 806b450:	3710      	adds	r7, #16
 806b452:	46bd      	mov	sp, r7
 806b454:	bd80      	pop	{r7, pc}
 806b456:	bf00      	nop
 806b458:	40010000 	.word	0x40010000
 806b45c:	40000400 	.word	0x40000400
 806b460:	40000800 	.word	0x40000800
 806b464:	40000c00 	.word	0x40000c00
 806b468:	40014000 	.word	0x40014000
 806b46c:	40014400 	.word	0x40014400
 806b470:	40014800 	.word	0x40014800
 806b474:	08071840 	.word	0x08071840

0806b478 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 806b478:	b580      	push	{r7, lr}
 806b47a:	b084      	sub	sp, #16
 806b47c:	af00      	add	r7, sp, #0
 806b47e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 806b480:	687b      	ldr	r3, [r7, #4]
 806b482:	681b      	ldr	r3, [r3, #0]
 806b484:	68db      	ldr	r3, [r3, #12]
 806b486:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 806b488:	687b      	ldr	r3, [r7, #4]
 806b48a:	681b      	ldr	r3, [r3, #0]
 806b48c:	691b      	ldr	r3, [r3, #16]
 806b48e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 806b490:	68bb      	ldr	r3, [r7, #8]
 806b492:	f003 0302 	and.w	r3, r3, #2
 806b496:	2b00      	cmp	r3, #0
 806b498:	d026      	beq.n	806b4e8 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 806b49a:	68fb      	ldr	r3, [r7, #12]
 806b49c:	f003 0302 	and.w	r3, r3, #2
 806b4a0:	2b00      	cmp	r3, #0
 806b4a2:	d021      	beq.n	806b4e8 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 806b4a4:	687b      	ldr	r3, [r7, #4]
 806b4a6:	681b      	ldr	r3, [r3, #0]
 806b4a8:	f06f 0202 	mvn.w	r2, #2
 806b4ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 806b4ae:	687b      	ldr	r3, [r7, #4]
 806b4b0:	2201      	movs	r2, #1
 806b4b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 806b4b4:	687b      	ldr	r3, [r7, #4]
 806b4b6:	681b      	ldr	r3, [r3, #0]
 806b4b8:	699b      	ldr	r3, [r3, #24]
 806b4ba:	f003 0303 	and.w	r3, r3, #3
 806b4be:	2b00      	cmp	r3, #0
 806b4c0:	d005      	beq.n	806b4ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 806b4c2:	687b      	ldr	r3, [r7, #4]
 806b4c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 806b4c8:	6878      	ldr	r0, [r7, #4]
 806b4ca:	4798      	blx	r3
 806b4cc:	e009      	b.n	806b4e2 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 806b4ce:	687b      	ldr	r3, [r7, #4]
 806b4d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 806b4d4:	6878      	ldr	r0, [r7, #4]
 806b4d6:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 806b4d8:	687b      	ldr	r3, [r7, #4]
 806b4da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 806b4de:	6878      	ldr	r0, [r7, #4]
 806b4e0:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 806b4e2:	687b      	ldr	r3, [r7, #4]
 806b4e4:	2200      	movs	r2, #0
 806b4e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 806b4e8:	68bb      	ldr	r3, [r7, #8]
 806b4ea:	f003 0304 	and.w	r3, r3, #4
 806b4ee:	2b00      	cmp	r3, #0
 806b4f0:	d026      	beq.n	806b540 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 806b4f2:	68fb      	ldr	r3, [r7, #12]
 806b4f4:	f003 0304 	and.w	r3, r3, #4
 806b4f8:	2b00      	cmp	r3, #0
 806b4fa:	d021      	beq.n	806b540 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 806b4fc:	687b      	ldr	r3, [r7, #4]
 806b4fe:	681b      	ldr	r3, [r3, #0]
 806b500:	f06f 0204 	mvn.w	r2, #4
 806b504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 806b506:	687b      	ldr	r3, [r7, #4]
 806b508:	2202      	movs	r2, #2
 806b50a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 806b50c:	687b      	ldr	r3, [r7, #4]
 806b50e:	681b      	ldr	r3, [r3, #0]
 806b510:	699b      	ldr	r3, [r3, #24]
 806b512:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 806b516:	2b00      	cmp	r3, #0
 806b518:	d005      	beq.n	806b526 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 806b51a:	687b      	ldr	r3, [r7, #4]
 806b51c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 806b520:	6878      	ldr	r0, [r7, #4]
 806b522:	4798      	blx	r3
 806b524:	e009      	b.n	806b53a <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 806b526:	687b      	ldr	r3, [r7, #4]
 806b528:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 806b52c:	6878      	ldr	r0, [r7, #4]
 806b52e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 806b530:	687b      	ldr	r3, [r7, #4]
 806b532:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 806b536:	6878      	ldr	r0, [r7, #4]
 806b538:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 806b53a:	687b      	ldr	r3, [r7, #4]
 806b53c:	2200      	movs	r2, #0
 806b53e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 806b540:	68bb      	ldr	r3, [r7, #8]
 806b542:	f003 0308 	and.w	r3, r3, #8
 806b546:	2b00      	cmp	r3, #0
 806b548:	d026      	beq.n	806b598 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 806b54a:	68fb      	ldr	r3, [r7, #12]
 806b54c:	f003 0308 	and.w	r3, r3, #8
 806b550:	2b00      	cmp	r3, #0
 806b552:	d021      	beq.n	806b598 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 806b554:	687b      	ldr	r3, [r7, #4]
 806b556:	681b      	ldr	r3, [r3, #0]
 806b558:	f06f 0208 	mvn.w	r2, #8
 806b55c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 806b55e:	687b      	ldr	r3, [r7, #4]
 806b560:	2204      	movs	r2, #4
 806b562:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 806b564:	687b      	ldr	r3, [r7, #4]
 806b566:	681b      	ldr	r3, [r3, #0]
 806b568:	69db      	ldr	r3, [r3, #28]
 806b56a:	f003 0303 	and.w	r3, r3, #3
 806b56e:	2b00      	cmp	r3, #0
 806b570:	d005      	beq.n	806b57e <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 806b572:	687b      	ldr	r3, [r7, #4]
 806b574:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 806b578:	6878      	ldr	r0, [r7, #4]
 806b57a:	4798      	blx	r3
 806b57c:	e009      	b.n	806b592 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 806b57e:	687b      	ldr	r3, [r7, #4]
 806b580:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 806b584:	6878      	ldr	r0, [r7, #4]
 806b586:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 806b588:	687b      	ldr	r3, [r7, #4]
 806b58a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 806b58e:	6878      	ldr	r0, [r7, #4]
 806b590:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 806b592:	687b      	ldr	r3, [r7, #4]
 806b594:	2200      	movs	r2, #0
 806b596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 806b598:	68bb      	ldr	r3, [r7, #8]
 806b59a:	f003 0310 	and.w	r3, r3, #16
 806b59e:	2b00      	cmp	r3, #0
 806b5a0:	d026      	beq.n	806b5f0 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 806b5a2:	68fb      	ldr	r3, [r7, #12]
 806b5a4:	f003 0310 	and.w	r3, r3, #16
 806b5a8:	2b00      	cmp	r3, #0
 806b5aa:	d021      	beq.n	806b5f0 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 806b5ac:	687b      	ldr	r3, [r7, #4]
 806b5ae:	681b      	ldr	r3, [r3, #0]
 806b5b0:	f06f 0210 	mvn.w	r2, #16
 806b5b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 806b5b6:	687b      	ldr	r3, [r7, #4]
 806b5b8:	2208      	movs	r2, #8
 806b5ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 806b5bc:	687b      	ldr	r3, [r7, #4]
 806b5be:	681b      	ldr	r3, [r3, #0]
 806b5c0:	69db      	ldr	r3, [r3, #28]
 806b5c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 806b5c6:	2b00      	cmp	r3, #0
 806b5c8:	d005      	beq.n	806b5d6 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 806b5ca:	687b      	ldr	r3, [r7, #4]
 806b5cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 806b5d0:	6878      	ldr	r0, [r7, #4]
 806b5d2:	4798      	blx	r3
 806b5d4:	e009      	b.n	806b5ea <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 806b5d6:	687b      	ldr	r3, [r7, #4]
 806b5d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 806b5dc:	6878      	ldr	r0, [r7, #4]
 806b5de:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 806b5e0:	687b      	ldr	r3, [r7, #4]
 806b5e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 806b5e6:	6878      	ldr	r0, [r7, #4]
 806b5e8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 806b5ea:	687b      	ldr	r3, [r7, #4]
 806b5ec:	2200      	movs	r2, #0
 806b5ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 806b5f0:	68bb      	ldr	r3, [r7, #8]
 806b5f2:	f003 0301 	and.w	r3, r3, #1
 806b5f6:	2b00      	cmp	r3, #0
 806b5f8:	d00e      	beq.n	806b618 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 806b5fa:	68fb      	ldr	r3, [r7, #12]
 806b5fc:	f003 0301 	and.w	r3, r3, #1
 806b600:	2b00      	cmp	r3, #0
 806b602:	d009      	beq.n	806b618 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 806b604:	687b      	ldr	r3, [r7, #4]
 806b606:	681b      	ldr	r3, [r3, #0]
 806b608:	f06f 0201 	mvn.w	r2, #1
 806b60c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 806b60e:	687b      	ldr	r3, [r7, #4]
 806b610:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 806b614:	6878      	ldr	r0, [r7, #4]
 806b616:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 806b618:	68bb      	ldr	r3, [r7, #8]
 806b61a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 806b61e:	2b00      	cmp	r3, #0
 806b620:	d00e      	beq.n	806b640 <HAL_TIM_IRQHandler+0x1c8>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 806b622:	68fb      	ldr	r3, [r7, #12]
 806b624:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 806b628:	2b00      	cmp	r3, #0
 806b62a:	d009      	beq.n	806b640 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 806b62c:	687b      	ldr	r3, [r7, #4]
 806b62e:	681b      	ldr	r3, [r3, #0]
 806b630:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 806b634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 806b636:	687b      	ldr	r3, [r7, #4]
 806b638:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 806b63c:	6878      	ldr	r0, [r7, #4]
 806b63e:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 806b640:	68bb      	ldr	r3, [r7, #8]
 806b642:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 806b646:	2b00      	cmp	r3, #0
 806b648:	d00e      	beq.n	806b668 <HAL_TIM_IRQHandler+0x1f0>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 806b64a:	68fb      	ldr	r3, [r7, #12]
 806b64c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 806b650:	2b00      	cmp	r3, #0
 806b652:	d009      	beq.n	806b668 <HAL_TIM_IRQHandler+0x1f0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 806b654:	687b      	ldr	r3, [r7, #4]
 806b656:	681b      	ldr	r3, [r3, #0]
 806b658:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 806b65c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 806b65e:	687b      	ldr	r3, [r7, #4]
 806b660:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 806b664:	6878      	ldr	r0, [r7, #4]
 806b666:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 806b668:	68bb      	ldr	r3, [r7, #8]
 806b66a:	f003 0320 	and.w	r3, r3, #32
 806b66e:	2b00      	cmp	r3, #0
 806b670:	d00e      	beq.n	806b690 <HAL_TIM_IRQHandler+0x218>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 806b672:	68fb      	ldr	r3, [r7, #12]
 806b674:	f003 0320 	and.w	r3, r3, #32
 806b678:	2b00      	cmp	r3, #0
 806b67a:	d009      	beq.n	806b690 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 806b67c:	687b      	ldr	r3, [r7, #4]
 806b67e:	681b      	ldr	r3, [r3, #0]
 806b680:	f06f 0220 	mvn.w	r2, #32
 806b684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 806b686:	687b      	ldr	r3, [r7, #4]
 806b688:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 806b68c:	6878      	ldr	r0, [r7, #4]
 806b68e:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 806b690:	bf00      	nop
 806b692:	3710      	adds	r7, #16
 806b694:	46bd      	mov	sp, r7
 806b696:	bd80      	pop	{r7, pc}

0806b698 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 806b698:	b580      	push	{r7, lr}
 806b69a:	b086      	sub	sp, #24
 806b69c:	af00      	add	r7, sp, #0
 806b69e:	60f8      	str	r0, [r7, #12]
 806b6a0:	60b9      	str	r1, [r7, #8]
 806b6a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 806b6a4:	2300      	movs	r3, #0
 806b6a6:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 806b6a8:	687b      	ldr	r3, [r7, #4]
 806b6aa:	2b00      	cmp	r3, #0
 806b6ac:	d010      	beq.n	806b6d0 <HAL_TIM_PWM_ConfigChannel+0x38>
 806b6ae:	687b      	ldr	r3, [r7, #4]
 806b6b0:	2b04      	cmp	r3, #4
 806b6b2:	d00d      	beq.n	806b6d0 <HAL_TIM_PWM_ConfigChannel+0x38>
 806b6b4:	687b      	ldr	r3, [r7, #4]
 806b6b6:	2b08      	cmp	r3, #8
 806b6b8:	d00a      	beq.n	806b6d0 <HAL_TIM_PWM_ConfigChannel+0x38>
 806b6ba:	687b      	ldr	r3, [r7, #4]
 806b6bc:	2b0c      	cmp	r3, #12
 806b6be:	d007      	beq.n	806b6d0 <HAL_TIM_PWM_ConfigChannel+0x38>
 806b6c0:	687b      	ldr	r3, [r7, #4]
 806b6c2:	2b3c      	cmp	r3, #60	@ 0x3c
 806b6c4:	d004      	beq.n	806b6d0 <HAL_TIM_PWM_ConfigChannel+0x38>
 806b6c6:	f241 0182 	movw	r1, #4226	@ 0x1082
 806b6ca:	4893      	ldr	r0, [pc, #588]	@ (806b918 <HAL_TIM_PWM_ConfigChannel+0x280>)
 806b6cc:	f7fa febb 	bl	8066446 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 806b6d0:	68bb      	ldr	r3, [r7, #8]
 806b6d2:	681b      	ldr	r3, [r3, #0]
 806b6d4:	2b60      	cmp	r3, #96	@ 0x60
 806b6d6:	d008      	beq.n	806b6ea <HAL_TIM_PWM_ConfigChannel+0x52>
 806b6d8:	68bb      	ldr	r3, [r7, #8]
 806b6da:	681b      	ldr	r3, [r3, #0]
 806b6dc:	2b70      	cmp	r3, #112	@ 0x70
 806b6de:	d004      	beq.n	806b6ea <HAL_TIM_PWM_ConfigChannel+0x52>
 806b6e0:	f241 0183 	movw	r1, #4227	@ 0x1083
 806b6e4:	488c      	ldr	r0, [pc, #560]	@ (806b918 <HAL_TIM_PWM_ConfigChannel+0x280>)
 806b6e6:	f7fa feae 	bl	8066446 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 806b6ea:	68bb      	ldr	r3, [r7, #8]
 806b6ec:	689b      	ldr	r3, [r3, #8]
 806b6ee:	2b00      	cmp	r3, #0
 806b6f0:	d008      	beq.n	806b704 <HAL_TIM_PWM_ConfigChannel+0x6c>
 806b6f2:	68bb      	ldr	r3, [r7, #8]
 806b6f4:	689b      	ldr	r3, [r3, #8]
 806b6f6:	2b02      	cmp	r3, #2
 806b6f8:	d004      	beq.n	806b704 <HAL_TIM_PWM_ConfigChannel+0x6c>
 806b6fa:	f241 0184 	movw	r1, #4228	@ 0x1084
 806b6fe:	4886      	ldr	r0, [pc, #536]	@ (806b918 <HAL_TIM_PWM_ConfigChannel+0x280>)
 806b700:	f7fa fea1 	bl	8066446 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 806b704:	68bb      	ldr	r3, [r7, #8]
 806b706:	691b      	ldr	r3, [r3, #16]
 806b708:	2b00      	cmp	r3, #0
 806b70a:	d008      	beq.n	806b71e <HAL_TIM_PWM_ConfigChannel+0x86>
 806b70c:	68bb      	ldr	r3, [r7, #8]
 806b70e:	691b      	ldr	r3, [r3, #16]
 806b710:	2b04      	cmp	r3, #4
 806b712:	d004      	beq.n	806b71e <HAL_TIM_PWM_ConfigChannel+0x86>
 806b714:	f241 0185 	movw	r1, #4229	@ 0x1085
 806b718:	487f      	ldr	r0, [pc, #508]	@ (806b918 <HAL_TIM_PWM_ConfigChannel+0x280>)
 806b71a:	f7fa fe94 	bl	8066446 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 806b71e:	68fb      	ldr	r3, [r7, #12]
 806b720:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 806b724:	2b01      	cmp	r3, #1
 806b726:	d101      	bne.n	806b72c <HAL_TIM_PWM_ConfigChannel+0x94>
 806b728:	2302      	movs	r3, #2
 806b72a:	e14c      	b.n	806b9c6 <HAL_TIM_PWM_ConfigChannel+0x32e>
 806b72c:	68fb      	ldr	r3, [r7, #12]
 806b72e:	2201      	movs	r2, #1
 806b730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 806b734:	687b      	ldr	r3, [r7, #4]
 806b736:	2b0c      	cmp	r3, #12
 806b738:	f200 813d 	bhi.w	806b9b6 <HAL_TIM_PWM_ConfigChannel+0x31e>
 806b73c:	a201      	add	r2, pc, #4	@ (adr r2, 806b744 <HAL_TIM_PWM_ConfigChannel+0xac>)
 806b73e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 806b742:	bf00      	nop
 806b744:	0806b779 	.word	0x0806b779
 806b748:	0806b9b7 	.word	0x0806b9b7
 806b74c:	0806b9b7 	.word	0x0806b9b7
 806b750:	0806b9b7 	.word	0x0806b9b7
 806b754:	0806b813 	.word	0x0806b813
 806b758:	0806b9b7 	.word	0x0806b9b7
 806b75c:	0806b9b7 	.word	0x0806b9b7
 806b760:	0806b9b7 	.word	0x0806b9b7
 806b764:	0806b89b 	.word	0x0806b89b
 806b768:	0806b9b7 	.word	0x0806b9b7
 806b76c:	0806b9b7 	.word	0x0806b9b7
 806b770:	0806b9b7 	.word	0x0806b9b7
 806b774:	0806b939 	.word	0x0806b939
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 806b778:	68fb      	ldr	r3, [r7, #12]
 806b77a:	681b      	ldr	r3, [r3, #0]
 806b77c:	4a67      	ldr	r2, [pc, #412]	@ (806b91c <HAL_TIM_PWM_ConfigChannel+0x284>)
 806b77e:	4293      	cmp	r3, r2
 806b780:	d027      	beq.n	806b7d2 <HAL_TIM_PWM_ConfigChannel+0x13a>
 806b782:	68fb      	ldr	r3, [r7, #12]
 806b784:	681b      	ldr	r3, [r3, #0]
 806b786:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 806b78a:	d022      	beq.n	806b7d2 <HAL_TIM_PWM_ConfigChannel+0x13a>
 806b78c:	68fb      	ldr	r3, [r7, #12]
 806b78e:	681b      	ldr	r3, [r3, #0]
 806b790:	4a63      	ldr	r2, [pc, #396]	@ (806b920 <HAL_TIM_PWM_ConfigChannel+0x288>)
 806b792:	4293      	cmp	r3, r2
 806b794:	d01d      	beq.n	806b7d2 <HAL_TIM_PWM_ConfigChannel+0x13a>
 806b796:	68fb      	ldr	r3, [r7, #12]
 806b798:	681b      	ldr	r3, [r3, #0]
 806b79a:	4a62      	ldr	r2, [pc, #392]	@ (806b924 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 806b79c:	4293      	cmp	r3, r2
 806b79e:	d018      	beq.n	806b7d2 <HAL_TIM_PWM_ConfigChannel+0x13a>
 806b7a0:	68fb      	ldr	r3, [r7, #12]
 806b7a2:	681b      	ldr	r3, [r3, #0]
 806b7a4:	4a60      	ldr	r2, [pc, #384]	@ (806b928 <HAL_TIM_PWM_ConfigChannel+0x290>)
 806b7a6:	4293      	cmp	r3, r2
 806b7a8:	d013      	beq.n	806b7d2 <HAL_TIM_PWM_ConfigChannel+0x13a>
 806b7aa:	68fb      	ldr	r3, [r7, #12]
 806b7ac:	681b      	ldr	r3, [r3, #0]
 806b7ae:	4a5f      	ldr	r2, [pc, #380]	@ (806b92c <HAL_TIM_PWM_ConfigChannel+0x294>)
 806b7b0:	4293      	cmp	r3, r2
 806b7b2:	d00e      	beq.n	806b7d2 <HAL_TIM_PWM_ConfigChannel+0x13a>
 806b7b4:	68fb      	ldr	r3, [r7, #12]
 806b7b6:	681b      	ldr	r3, [r3, #0]
 806b7b8:	4a5d      	ldr	r2, [pc, #372]	@ (806b930 <HAL_TIM_PWM_ConfigChannel+0x298>)
 806b7ba:	4293      	cmp	r3, r2
 806b7bc:	d009      	beq.n	806b7d2 <HAL_TIM_PWM_ConfigChannel+0x13a>
 806b7be:	68fb      	ldr	r3, [r7, #12]
 806b7c0:	681b      	ldr	r3, [r3, #0]
 806b7c2:	4a5c      	ldr	r2, [pc, #368]	@ (806b934 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 806b7c4:	4293      	cmp	r3, r2
 806b7c6:	d004      	beq.n	806b7d2 <HAL_TIM_PWM_ConfigChannel+0x13a>
 806b7c8:	f241 018f 	movw	r1, #4239	@ 0x108f
 806b7cc:	4852      	ldr	r0, [pc, #328]	@ (806b918 <HAL_TIM_PWM_ConfigChannel+0x280>)
 806b7ce:	f7fa fe3a 	bl	8066446 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 806b7d2:	68fb      	ldr	r3, [r7, #12]
 806b7d4:	681b      	ldr	r3, [r3, #0]
 806b7d6:	68b9      	ldr	r1, [r7, #8]
 806b7d8:	4618      	mov	r0, r3
 806b7da:	f000 fd07 	bl	806c1ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 806b7de:	68fb      	ldr	r3, [r7, #12]
 806b7e0:	681b      	ldr	r3, [r3, #0]
 806b7e2:	699a      	ldr	r2, [r3, #24]
 806b7e4:	68fb      	ldr	r3, [r7, #12]
 806b7e6:	681b      	ldr	r3, [r3, #0]
 806b7e8:	f042 0208 	orr.w	r2, r2, #8
 806b7ec:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 806b7ee:	68fb      	ldr	r3, [r7, #12]
 806b7f0:	681b      	ldr	r3, [r3, #0]
 806b7f2:	699a      	ldr	r2, [r3, #24]
 806b7f4:	68fb      	ldr	r3, [r7, #12]
 806b7f6:	681b      	ldr	r3, [r3, #0]
 806b7f8:	f022 0204 	bic.w	r2, r2, #4
 806b7fc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 806b7fe:	68fb      	ldr	r3, [r7, #12]
 806b800:	681b      	ldr	r3, [r3, #0]
 806b802:	6999      	ldr	r1, [r3, #24]
 806b804:	68bb      	ldr	r3, [r7, #8]
 806b806:	691a      	ldr	r2, [r3, #16]
 806b808:	68fb      	ldr	r3, [r7, #12]
 806b80a:	681b      	ldr	r3, [r3, #0]
 806b80c:	430a      	orrs	r2, r1
 806b80e:	619a      	str	r2, [r3, #24]
      break;
 806b810:	e0d4      	b.n	806b9bc <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 806b812:	68fb      	ldr	r3, [r7, #12]
 806b814:	681b      	ldr	r3, [r3, #0]
 806b816:	4a41      	ldr	r2, [pc, #260]	@ (806b91c <HAL_TIM_PWM_ConfigChannel+0x284>)
 806b818:	4293      	cmp	r3, r2
 806b81a:	d01d      	beq.n	806b858 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 806b81c:	68fb      	ldr	r3, [r7, #12]
 806b81e:	681b      	ldr	r3, [r3, #0]
 806b820:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 806b824:	d018      	beq.n	806b858 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 806b826:	68fb      	ldr	r3, [r7, #12]
 806b828:	681b      	ldr	r3, [r3, #0]
 806b82a:	4a3d      	ldr	r2, [pc, #244]	@ (806b920 <HAL_TIM_PWM_ConfigChannel+0x288>)
 806b82c:	4293      	cmp	r3, r2
 806b82e:	d013      	beq.n	806b858 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 806b830:	68fb      	ldr	r3, [r7, #12]
 806b832:	681b      	ldr	r3, [r3, #0]
 806b834:	4a3b      	ldr	r2, [pc, #236]	@ (806b924 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 806b836:	4293      	cmp	r3, r2
 806b838:	d00e      	beq.n	806b858 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 806b83a:	68fb      	ldr	r3, [r7, #12]
 806b83c:	681b      	ldr	r3, [r3, #0]
 806b83e:	4a3a      	ldr	r2, [pc, #232]	@ (806b928 <HAL_TIM_PWM_ConfigChannel+0x290>)
 806b840:	4293      	cmp	r3, r2
 806b842:	d009      	beq.n	806b858 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 806b844:	68fb      	ldr	r3, [r7, #12]
 806b846:	681b      	ldr	r3, [r3, #0]
 806b848:	4a38      	ldr	r2, [pc, #224]	@ (806b92c <HAL_TIM_PWM_ConfigChannel+0x294>)
 806b84a:	4293      	cmp	r3, r2
 806b84c:	d004      	beq.n	806b858 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 806b84e:	f44f 5185 	mov.w	r1, #4256	@ 0x10a0
 806b852:	4831      	ldr	r0, [pc, #196]	@ (806b918 <HAL_TIM_PWM_ConfigChannel+0x280>)
 806b854:	f7fa fdf7 	bl	8066446 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 806b858:	68fb      	ldr	r3, [r7, #12]
 806b85a:	681b      	ldr	r3, [r3, #0]
 806b85c:	68b9      	ldr	r1, [r7, #8]
 806b85e:	4618      	mov	r0, r3
 806b860:	f000 fd54 	bl	806c30c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 806b864:	68fb      	ldr	r3, [r7, #12]
 806b866:	681b      	ldr	r3, [r3, #0]
 806b868:	699a      	ldr	r2, [r3, #24]
 806b86a:	68fb      	ldr	r3, [r7, #12]
 806b86c:	681b      	ldr	r3, [r3, #0]
 806b86e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 806b872:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 806b874:	68fb      	ldr	r3, [r7, #12]
 806b876:	681b      	ldr	r3, [r3, #0]
 806b878:	699a      	ldr	r2, [r3, #24]
 806b87a:	68fb      	ldr	r3, [r7, #12]
 806b87c:	681b      	ldr	r3, [r3, #0]
 806b87e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 806b882:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 806b884:	68fb      	ldr	r3, [r7, #12]
 806b886:	681b      	ldr	r3, [r3, #0]
 806b888:	6999      	ldr	r1, [r3, #24]
 806b88a:	68bb      	ldr	r3, [r7, #8]
 806b88c:	691b      	ldr	r3, [r3, #16]
 806b88e:	021a      	lsls	r2, r3, #8
 806b890:	68fb      	ldr	r3, [r7, #12]
 806b892:	681b      	ldr	r3, [r3, #0]
 806b894:	430a      	orrs	r2, r1
 806b896:	619a      	str	r2, [r3, #24]
      break;
 806b898:	e090      	b.n	806b9bc <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 806b89a:	68fb      	ldr	r3, [r7, #12]
 806b89c:	681b      	ldr	r3, [r3, #0]
 806b89e:	4a1f      	ldr	r2, [pc, #124]	@ (806b91c <HAL_TIM_PWM_ConfigChannel+0x284>)
 806b8a0:	4293      	cmp	r3, r2
 806b8a2:	d018      	beq.n	806b8d6 <HAL_TIM_PWM_ConfigChannel+0x23e>
 806b8a4:	68fb      	ldr	r3, [r7, #12]
 806b8a6:	681b      	ldr	r3, [r3, #0]
 806b8a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 806b8ac:	d013      	beq.n	806b8d6 <HAL_TIM_PWM_ConfigChannel+0x23e>
 806b8ae:	68fb      	ldr	r3, [r7, #12]
 806b8b0:	681b      	ldr	r3, [r3, #0]
 806b8b2:	4a1b      	ldr	r2, [pc, #108]	@ (806b920 <HAL_TIM_PWM_ConfigChannel+0x288>)
 806b8b4:	4293      	cmp	r3, r2
 806b8b6:	d00e      	beq.n	806b8d6 <HAL_TIM_PWM_ConfigChannel+0x23e>
 806b8b8:	68fb      	ldr	r3, [r7, #12]
 806b8ba:	681b      	ldr	r3, [r3, #0]
 806b8bc:	4a19      	ldr	r2, [pc, #100]	@ (806b924 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 806b8be:	4293      	cmp	r3, r2
 806b8c0:	d009      	beq.n	806b8d6 <HAL_TIM_PWM_ConfigChannel+0x23e>
 806b8c2:	68fb      	ldr	r3, [r7, #12]
 806b8c4:	681b      	ldr	r3, [r3, #0]
 806b8c6:	4a18      	ldr	r2, [pc, #96]	@ (806b928 <HAL_TIM_PWM_ConfigChannel+0x290>)
 806b8c8:	4293      	cmp	r3, r2
 806b8ca:	d004      	beq.n	806b8d6 <HAL_TIM_PWM_ConfigChannel+0x23e>
 806b8cc:	f241 01b1 	movw	r1, #4273	@ 0x10b1
 806b8d0:	4811      	ldr	r0, [pc, #68]	@ (806b918 <HAL_TIM_PWM_ConfigChannel+0x280>)
 806b8d2:	f7fa fdb8 	bl	8066446 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 806b8d6:	68fb      	ldr	r3, [r7, #12]
 806b8d8:	681b      	ldr	r3, [r3, #0]
 806b8da:	68b9      	ldr	r1, [r7, #8]
 806b8dc:	4618      	mov	r0, r3
 806b8de:	f000 fda9 	bl	806c434 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 806b8e2:	68fb      	ldr	r3, [r7, #12]
 806b8e4:	681b      	ldr	r3, [r3, #0]
 806b8e6:	69da      	ldr	r2, [r3, #28]
 806b8e8:	68fb      	ldr	r3, [r7, #12]
 806b8ea:	681b      	ldr	r3, [r3, #0]
 806b8ec:	f042 0208 	orr.w	r2, r2, #8
 806b8f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 806b8f2:	68fb      	ldr	r3, [r7, #12]
 806b8f4:	681b      	ldr	r3, [r3, #0]
 806b8f6:	69da      	ldr	r2, [r3, #28]
 806b8f8:	68fb      	ldr	r3, [r7, #12]
 806b8fa:	681b      	ldr	r3, [r3, #0]
 806b8fc:	f022 0204 	bic.w	r2, r2, #4
 806b900:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 806b902:	68fb      	ldr	r3, [r7, #12]
 806b904:	681b      	ldr	r3, [r3, #0]
 806b906:	69d9      	ldr	r1, [r3, #28]
 806b908:	68bb      	ldr	r3, [r7, #8]
 806b90a:	691a      	ldr	r2, [r3, #16]
 806b90c:	68fb      	ldr	r3, [r7, #12]
 806b90e:	681b      	ldr	r3, [r3, #0]
 806b910:	430a      	orrs	r2, r1
 806b912:	61da      	str	r2, [r3, #28]
      break;
 806b914:	e052      	b.n	806b9bc <HAL_TIM_PWM_ConfigChannel+0x324>
 806b916:	bf00      	nop
 806b918:	08071840 	.word	0x08071840
 806b91c:	40010000 	.word	0x40010000
 806b920:	40000400 	.word	0x40000400
 806b924:	40000800 	.word	0x40000800
 806b928:	40000c00 	.word	0x40000c00
 806b92c:	40014000 	.word	0x40014000
 806b930:	40014400 	.word	0x40014400
 806b934:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 806b938:	68fb      	ldr	r3, [r7, #12]
 806b93a:	681b      	ldr	r3, [r3, #0]
 806b93c:	4a24      	ldr	r2, [pc, #144]	@ (806b9d0 <HAL_TIM_PWM_ConfigChannel+0x338>)
 806b93e:	4293      	cmp	r3, r2
 806b940:	d018      	beq.n	806b974 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 806b942:	68fb      	ldr	r3, [r7, #12]
 806b944:	681b      	ldr	r3, [r3, #0]
 806b946:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 806b94a:	d013      	beq.n	806b974 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 806b94c:	68fb      	ldr	r3, [r7, #12]
 806b94e:	681b      	ldr	r3, [r3, #0]
 806b950:	4a20      	ldr	r2, [pc, #128]	@ (806b9d4 <HAL_TIM_PWM_ConfigChannel+0x33c>)
 806b952:	4293      	cmp	r3, r2
 806b954:	d00e      	beq.n	806b974 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 806b956:	68fb      	ldr	r3, [r7, #12]
 806b958:	681b      	ldr	r3, [r3, #0]
 806b95a:	4a1f      	ldr	r2, [pc, #124]	@ (806b9d8 <HAL_TIM_PWM_ConfigChannel+0x340>)
 806b95c:	4293      	cmp	r3, r2
 806b95e:	d009      	beq.n	806b974 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 806b960:	68fb      	ldr	r3, [r7, #12]
 806b962:	681b      	ldr	r3, [r3, #0]
 806b964:	4a1d      	ldr	r2, [pc, #116]	@ (806b9dc <HAL_TIM_PWM_ConfigChannel+0x344>)
 806b966:	4293      	cmp	r3, r2
 806b968:	d004      	beq.n	806b974 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 806b96a:	f241 01c2 	movw	r1, #4290	@ 0x10c2
 806b96e:	481c      	ldr	r0, [pc, #112]	@ (806b9e0 <HAL_TIM_PWM_ConfigChannel+0x348>)
 806b970:	f7fa fd69 	bl	8066446 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 806b974:	68fb      	ldr	r3, [r7, #12]
 806b976:	681b      	ldr	r3, [r3, #0]
 806b978:	68b9      	ldr	r1, [r7, #8]
 806b97a:	4618      	mov	r0, r3
 806b97c:	f000 fdee 	bl	806c55c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 806b980:	68fb      	ldr	r3, [r7, #12]
 806b982:	681b      	ldr	r3, [r3, #0]
 806b984:	69da      	ldr	r2, [r3, #28]
 806b986:	68fb      	ldr	r3, [r7, #12]
 806b988:	681b      	ldr	r3, [r3, #0]
 806b98a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 806b98e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 806b990:	68fb      	ldr	r3, [r7, #12]
 806b992:	681b      	ldr	r3, [r3, #0]
 806b994:	69da      	ldr	r2, [r3, #28]
 806b996:	68fb      	ldr	r3, [r7, #12]
 806b998:	681b      	ldr	r3, [r3, #0]
 806b99a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 806b99e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 806b9a0:	68fb      	ldr	r3, [r7, #12]
 806b9a2:	681b      	ldr	r3, [r3, #0]
 806b9a4:	69d9      	ldr	r1, [r3, #28]
 806b9a6:	68bb      	ldr	r3, [r7, #8]
 806b9a8:	691b      	ldr	r3, [r3, #16]
 806b9aa:	021a      	lsls	r2, r3, #8
 806b9ac:	68fb      	ldr	r3, [r7, #12]
 806b9ae:	681b      	ldr	r3, [r3, #0]
 806b9b0:	430a      	orrs	r2, r1
 806b9b2:	61da      	str	r2, [r3, #28]
      break;
 806b9b4:	e002      	b.n	806b9bc <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    default:
      status = HAL_ERROR;
 806b9b6:	2301      	movs	r3, #1
 806b9b8:	75fb      	strb	r3, [r7, #23]
      break;
 806b9ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 806b9bc:	68fb      	ldr	r3, [r7, #12]
 806b9be:	2200      	movs	r2, #0
 806b9c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 806b9c4:	7dfb      	ldrb	r3, [r7, #23]
}
 806b9c6:	4618      	mov	r0, r3
 806b9c8:	3718      	adds	r7, #24
 806b9ca:	46bd      	mov	sp, r7
 806b9cc:	bd80      	pop	{r7, pc}
 806b9ce:	bf00      	nop
 806b9d0:	40010000 	.word	0x40010000
 806b9d4:	40000400 	.word	0x40000400
 806b9d8:	40000800 	.word	0x40000800
 806b9dc:	40000c00 	.word	0x40000c00
 806b9e0:	08071840 	.word	0x08071840

0806b9e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 806b9e4:	b580      	push	{r7, lr}
 806b9e6:	b084      	sub	sp, #16
 806b9e8:	af00      	add	r7, sp, #0
 806b9ea:	6078      	str	r0, [r7, #4]
 806b9ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 806b9ee:	2300      	movs	r3, #0
 806b9f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 806b9f2:	687b      	ldr	r3, [r7, #4]
 806b9f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 806b9f8:	2b01      	cmp	r3, #1
 806b9fa:	d101      	bne.n	806ba00 <HAL_TIM_ConfigClockSource+0x1c>
 806b9fc:	2302      	movs	r3, #2
 806b9fe:	e2f0      	b.n	806bfe2 <HAL_TIM_ConfigClockSource+0x5fe>
 806ba00:	687b      	ldr	r3, [r7, #4]
 806ba02:	2201      	movs	r2, #1
 806ba04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 806ba08:	687b      	ldr	r3, [r7, #4]
 806ba0a:	2202      	movs	r2, #2
 806ba0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 806ba10:	683b      	ldr	r3, [r7, #0]
 806ba12:	681b      	ldr	r3, [r3, #0]
 806ba14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 806ba18:	d029      	beq.n	806ba6e <HAL_TIM_ConfigClockSource+0x8a>
 806ba1a:	683b      	ldr	r3, [r7, #0]
 806ba1c:	681b      	ldr	r3, [r3, #0]
 806ba1e:	2b70      	cmp	r3, #112	@ 0x70
 806ba20:	d025      	beq.n	806ba6e <HAL_TIM_ConfigClockSource+0x8a>
 806ba22:	683b      	ldr	r3, [r7, #0]
 806ba24:	681b      	ldr	r3, [r3, #0]
 806ba26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 806ba2a:	d020      	beq.n	806ba6e <HAL_TIM_ConfigClockSource+0x8a>
 806ba2c:	683b      	ldr	r3, [r7, #0]
 806ba2e:	681b      	ldr	r3, [r3, #0]
 806ba30:	2b40      	cmp	r3, #64	@ 0x40
 806ba32:	d01c      	beq.n	806ba6e <HAL_TIM_ConfigClockSource+0x8a>
 806ba34:	683b      	ldr	r3, [r7, #0]
 806ba36:	681b      	ldr	r3, [r3, #0]
 806ba38:	2b50      	cmp	r3, #80	@ 0x50
 806ba3a:	d018      	beq.n	806ba6e <HAL_TIM_ConfigClockSource+0x8a>
 806ba3c:	683b      	ldr	r3, [r7, #0]
 806ba3e:	681b      	ldr	r3, [r3, #0]
 806ba40:	2b60      	cmp	r3, #96	@ 0x60
 806ba42:	d014      	beq.n	806ba6e <HAL_TIM_ConfigClockSource+0x8a>
 806ba44:	683b      	ldr	r3, [r7, #0]
 806ba46:	681b      	ldr	r3, [r3, #0]
 806ba48:	2b00      	cmp	r3, #0
 806ba4a:	d010      	beq.n	806ba6e <HAL_TIM_ConfigClockSource+0x8a>
 806ba4c:	683b      	ldr	r3, [r7, #0]
 806ba4e:	681b      	ldr	r3, [r3, #0]
 806ba50:	2b10      	cmp	r3, #16
 806ba52:	d00c      	beq.n	806ba6e <HAL_TIM_ConfigClockSource+0x8a>
 806ba54:	683b      	ldr	r3, [r7, #0]
 806ba56:	681b      	ldr	r3, [r3, #0]
 806ba58:	2b20      	cmp	r3, #32
 806ba5a:	d008      	beq.n	806ba6e <HAL_TIM_ConfigClockSource+0x8a>
 806ba5c:	683b      	ldr	r3, [r7, #0]
 806ba5e:	681b      	ldr	r3, [r3, #0]
 806ba60:	2b30      	cmp	r3, #48	@ 0x30
 806ba62:	d004      	beq.n	806ba6e <HAL_TIM_ConfigClockSource+0x8a>
 806ba64:	f241 41c3 	movw	r1, #5315	@ 0x14c3
 806ba68:	487c      	ldr	r0, [pc, #496]	@ (806bc5c <HAL_TIM_ConfigClockSource+0x278>)
 806ba6a:	f7fa fcec 	bl	8066446 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 806ba6e:	687b      	ldr	r3, [r7, #4]
 806ba70:	681b      	ldr	r3, [r3, #0]
 806ba72:	689b      	ldr	r3, [r3, #8]
 806ba74:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 806ba76:	68bb      	ldr	r3, [r7, #8]
 806ba78:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 806ba7c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 806ba7e:	68bb      	ldr	r3, [r7, #8]
 806ba80:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 806ba84:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 806ba86:	687b      	ldr	r3, [r7, #4]
 806ba88:	681b      	ldr	r3, [r3, #0]
 806ba8a:	68ba      	ldr	r2, [r7, #8]
 806ba8c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 806ba8e:	683b      	ldr	r3, [r7, #0]
 806ba90:	681b      	ldr	r3, [r3, #0]
 806ba92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 806ba96:	f000 80f1 	beq.w	806bc7c <HAL_TIM_ConfigClockSource+0x298>
 806ba9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 806ba9e:	f200 8293 	bhi.w	806bfc8 <HAL_TIM_ConfigClockSource+0x5e4>
 806baa2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 806baa6:	d02d      	beq.n	806bb04 <HAL_TIM_ConfigClockSource+0x120>
 806baa8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 806baac:	f200 828c 	bhi.w	806bfc8 <HAL_TIM_ConfigClockSource+0x5e4>
 806bab0:	2b70      	cmp	r3, #112	@ 0x70
 806bab2:	d05d      	beq.n	806bb70 <HAL_TIM_ConfigClockSource+0x18c>
 806bab4:	2b70      	cmp	r3, #112	@ 0x70
 806bab6:	f200 8287 	bhi.w	806bfc8 <HAL_TIM_ConfigClockSource+0x5e4>
 806baba:	2b60      	cmp	r3, #96	@ 0x60
 806babc:	f000 81a0 	beq.w	806be00 <HAL_TIM_ConfigClockSource+0x41c>
 806bac0:	2b60      	cmp	r3, #96	@ 0x60
 806bac2:	f200 8281 	bhi.w	806bfc8 <HAL_TIM_ConfigClockSource+0x5e4>
 806bac6:	2b50      	cmp	r3, #80	@ 0x50
 806bac8:	f000 8144 	beq.w	806bd54 <HAL_TIM_ConfigClockSource+0x370>
 806bacc:	2b50      	cmp	r3, #80	@ 0x50
 806bace:	f200 827b 	bhi.w	806bfc8 <HAL_TIM_ConfigClockSource+0x5e4>
 806bad2:	2b40      	cmp	r3, #64	@ 0x40
 806bad4:	f000 81f6 	beq.w	806bec4 <HAL_TIM_ConfigClockSource+0x4e0>
 806bad8:	2b40      	cmp	r3, #64	@ 0x40
 806bada:	f200 8275 	bhi.w	806bfc8 <HAL_TIM_ConfigClockSource+0x5e4>
 806bade:	2b30      	cmp	r3, #48	@ 0x30
 806bae0:	f000 8246 	beq.w	806bf70 <HAL_TIM_ConfigClockSource+0x58c>
 806bae4:	2b30      	cmp	r3, #48	@ 0x30
 806bae6:	f200 826f 	bhi.w	806bfc8 <HAL_TIM_ConfigClockSource+0x5e4>
 806baea:	2b20      	cmp	r3, #32
 806baec:	f000 8240 	beq.w	806bf70 <HAL_TIM_ConfigClockSource+0x58c>
 806baf0:	2b20      	cmp	r3, #32
 806baf2:	f200 8269 	bhi.w	806bfc8 <HAL_TIM_ConfigClockSource+0x5e4>
 806baf6:	2b00      	cmp	r3, #0
 806baf8:	f000 823a 	beq.w	806bf70 <HAL_TIM_ConfigClockSource+0x58c>
 806bafc:	2b10      	cmp	r3, #16
 806bafe:	f000 8237 	beq.w	806bf70 <HAL_TIM_ConfigClockSource+0x58c>
 806bb02:	e261      	b.n	806bfc8 <HAL_TIM_ConfigClockSource+0x5e4>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 806bb04:	687b      	ldr	r3, [r7, #4]
 806bb06:	681b      	ldr	r3, [r3, #0]
 806bb08:	4a55      	ldr	r2, [pc, #340]	@ (806bc60 <HAL_TIM_ConfigClockSource+0x27c>)
 806bb0a:	4293      	cmp	r3, r2
 806bb0c:	f000 825f 	beq.w	806bfce <HAL_TIM_ConfigClockSource+0x5ea>
 806bb10:	687b      	ldr	r3, [r7, #4]
 806bb12:	681b      	ldr	r3, [r3, #0]
 806bb14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 806bb18:	f000 8259 	beq.w	806bfce <HAL_TIM_ConfigClockSource+0x5ea>
 806bb1c:	687b      	ldr	r3, [r7, #4]
 806bb1e:	681b      	ldr	r3, [r3, #0]
 806bb20:	4a50      	ldr	r2, [pc, #320]	@ (806bc64 <HAL_TIM_ConfigClockSource+0x280>)
 806bb22:	4293      	cmp	r3, r2
 806bb24:	f000 8253 	beq.w	806bfce <HAL_TIM_ConfigClockSource+0x5ea>
 806bb28:	687b      	ldr	r3, [r7, #4]
 806bb2a:	681b      	ldr	r3, [r3, #0]
 806bb2c:	4a4e      	ldr	r2, [pc, #312]	@ (806bc68 <HAL_TIM_ConfigClockSource+0x284>)
 806bb2e:	4293      	cmp	r3, r2
 806bb30:	f000 824d 	beq.w	806bfce <HAL_TIM_ConfigClockSource+0x5ea>
 806bb34:	687b      	ldr	r3, [r7, #4]
 806bb36:	681b      	ldr	r3, [r3, #0]
 806bb38:	4a4c      	ldr	r2, [pc, #304]	@ (806bc6c <HAL_TIM_ConfigClockSource+0x288>)
 806bb3a:	4293      	cmp	r3, r2
 806bb3c:	f000 8247 	beq.w	806bfce <HAL_TIM_ConfigClockSource+0x5ea>
 806bb40:	687b      	ldr	r3, [r7, #4]
 806bb42:	681b      	ldr	r3, [r3, #0]
 806bb44:	4a4a      	ldr	r2, [pc, #296]	@ (806bc70 <HAL_TIM_ConfigClockSource+0x28c>)
 806bb46:	4293      	cmp	r3, r2
 806bb48:	f000 8241 	beq.w	806bfce <HAL_TIM_ConfigClockSource+0x5ea>
 806bb4c:	687b      	ldr	r3, [r7, #4]
 806bb4e:	681b      	ldr	r3, [r3, #0]
 806bb50:	4a48      	ldr	r2, [pc, #288]	@ (806bc74 <HAL_TIM_ConfigClockSource+0x290>)
 806bb52:	4293      	cmp	r3, r2
 806bb54:	f000 823b 	beq.w	806bfce <HAL_TIM_ConfigClockSource+0x5ea>
 806bb58:	687b      	ldr	r3, [r7, #4]
 806bb5a:	681b      	ldr	r3, [r3, #0]
 806bb5c:	4a46      	ldr	r2, [pc, #280]	@ (806bc78 <HAL_TIM_ConfigClockSource+0x294>)
 806bb5e:	4293      	cmp	r3, r2
 806bb60:	f000 8235 	beq.w	806bfce <HAL_TIM_ConfigClockSource+0x5ea>
 806bb64:	f241 41cf 	movw	r1, #5327	@ 0x14cf
 806bb68:	483c      	ldr	r0, [pc, #240]	@ (806bc5c <HAL_TIM_ConfigClockSource+0x278>)
 806bb6a:	f7fa fc6c 	bl	8066446 <assert_failed>
      break;
 806bb6e:	e22e      	b.n	806bfce <HAL_TIM_ConfigClockSource+0x5ea>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 806bb70:	687b      	ldr	r3, [r7, #4]
 806bb72:	681b      	ldr	r3, [r3, #0]
 806bb74:	4a3a      	ldr	r2, [pc, #232]	@ (806bc60 <HAL_TIM_ConfigClockSource+0x27c>)
 806bb76:	4293      	cmp	r3, r2
 806bb78:	d01d      	beq.n	806bbb6 <HAL_TIM_ConfigClockSource+0x1d2>
 806bb7a:	687b      	ldr	r3, [r7, #4]
 806bb7c:	681b      	ldr	r3, [r3, #0]
 806bb7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 806bb82:	d018      	beq.n	806bbb6 <HAL_TIM_ConfigClockSource+0x1d2>
 806bb84:	687b      	ldr	r3, [r7, #4]
 806bb86:	681b      	ldr	r3, [r3, #0]
 806bb88:	4a36      	ldr	r2, [pc, #216]	@ (806bc64 <HAL_TIM_ConfigClockSource+0x280>)
 806bb8a:	4293      	cmp	r3, r2
 806bb8c:	d013      	beq.n	806bbb6 <HAL_TIM_ConfigClockSource+0x1d2>
 806bb8e:	687b      	ldr	r3, [r7, #4]
 806bb90:	681b      	ldr	r3, [r3, #0]
 806bb92:	4a35      	ldr	r2, [pc, #212]	@ (806bc68 <HAL_TIM_ConfigClockSource+0x284>)
 806bb94:	4293      	cmp	r3, r2
 806bb96:	d00e      	beq.n	806bbb6 <HAL_TIM_ConfigClockSource+0x1d2>
 806bb98:	687b      	ldr	r3, [r7, #4]
 806bb9a:	681b      	ldr	r3, [r3, #0]
 806bb9c:	4a33      	ldr	r2, [pc, #204]	@ (806bc6c <HAL_TIM_ConfigClockSource+0x288>)
 806bb9e:	4293      	cmp	r3, r2
 806bba0:	d009      	beq.n	806bbb6 <HAL_TIM_ConfigClockSource+0x1d2>
 806bba2:	687b      	ldr	r3, [r7, #4]
 806bba4:	681b      	ldr	r3, [r3, #0]
 806bba6:	4a32      	ldr	r2, [pc, #200]	@ (806bc70 <HAL_TIM_ConfigClockSource+0x28c>)
 806bba8:	4293      	cmp	r3, r2
 806bbaa:	d004      	beq.n	806bbb6 <HAL_TIM_ConfigClockSource+0x1d2>
 806bbac:	f241 41d6 	movw	r1, #5334	@ 0x14d6
 806bbb0:	482a      	ldr	r0, [pc, #168]	@ (806bc5c <HAL_TIM_ConfigClockSource+0x278>)
 806bbb2:	f7fa fc48 	bl	8066446 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 806bbb6:	683b      	ldr	r3, [r7, #0]
 806bbb8:	689b      	ldr	r3, [r3, #8]
 806bbba:	2b00      	cmp	r3, #0
 806bbbc:	d013      	beq.n	806bbe6 <HAL_TIM_ConfigClockSource+0x202>
 806bbbe:	683b      	ldr	r3, [r7, #0]
 806bbc0:	689b      	ldr	r3, [r3, #8]
 806bbc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 806bbc6:	d00e      	beq.n	806bbe6 <HAL_TIM_ConfigClockSource+0x202>
 806bbc8:	683b      	ldr	r3, [r7, #0]
 806bbca:	689b      	ldr	r3, [r3, #8]
 806bbcc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 806bbd0:	d009      	beq.n	806bbe6 <HAL_TIM_ConfigClockSource+0x202>
 806bbd2:	683b      	ldr	r3, [r7, #0]
 806bbd4:	689b      	ldr	r3, [r3, #8]
 806bbd6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 806bbda:	d004      	beq.n	806bbe6 <HAL_TIM_ConfigClockSource+0x202>
 806bbdc:	f241 41d9 	movw	r1, #5337	@ 0x14d9
 806bbe0:	481e      	ldr	r0, [pc, #120]	@ (806bc5c <HAL_TIM_ConfigClockSource+0x278>)
 806bbe2:	f7fa fc30 	bl	8066446 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 806bbe6:	683b      	ldr	r3, [r7, #0]
 806bbe8:	685b      	ldr	r3, [r3, #4]
 806bbea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 806bbee:	d014      	beq.n	806bc1a <HAL_TIM_ConfigClockSource+0x236>
 806bbf0:	683b      	ldr	r3, [r7, #0]
 806bbf2:	685b      	ldr	r3, [r3, #4]
 806bbf4:	2b00      	cmp	r3, #0
 806bbf6:	d010      	beq.n	806bc1a <HAL_TIM_ConfigClockSource+0x236>
 806bbf8:	683b      	ldr	r3, [r7, #0]
 806bbfa:	685b      	ldr	r3, [r3, #4]
 806bbfc:	2b00      	cmp	r3, #0
 806bbfe:	d00c      	beq.n	806bc1a <HAL_TIM_ConfigClockSource+0x236>
 806bc00:	683b      	ldr	r3, [r7, #0]
 806bc02:	685b      	ldr	r3, [r3, #4]
 806bc04:	2b02      	cmp	r3, #2
 806bc06:	d008      	beq.n	806bc1a <HAL_TIM_ConfigClockSource+0x236>
 806bc08:	683b      	ldr	r3, [r7, #0]
 806bc0a:	685b      	ldr	r3, [r3, #4]
 806bc0c:	2b0a      	cmp	r3, #10
 806bc0e:	d004      	beq.n	806bc1a <HAL_TIM_ConfigClockSource+0x236>
 806bc10:	f241 41da 	movw	r1, #5338	@ 0x14da
 806bc14:	4811      	ldr	r0, [pc, #68]	@ (806bc5c <HAL_TIM_ConfigClockSource+0x278>)
 806bc16:	f7fa fc16 	bl	8066446 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 806bc1a:	683b      	ldr	r3, [r7, #0]
 806bc1c:	68db      	ldr	r3, [r3, #12]
 806bc1e:	2b0f      	cmp	r3, #15
 806bc20:	d904      	bls.n	806bc2c <HAL_TIM_ConfigClockSource+0x248>
 806bc22:	f241 41db 	movw	r1, #5339	@ 0x14db
 806bc26:	480d      	ldr	r0, [pc, #52]	@ (806bc5c <HAL_TIM_ConfigClockSource+0x278>)
 806bc28:	f7fa fc0d 	bl	8066446 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 806bc2c:	687b      	ldr	r3, [r7, #4]
 806bc2e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 806bc30:	683b      	ldr	r3, [r7, #0]
 806bc32:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 806bc34:	683b      	ldr	r3, [r7, #0]
 806bc36:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 806bc38:	683b      	ldr	r3, [r7, #0]
 806bc3a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 806bc3c:	f000 fd66 	bl	806c70c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 806bc40:	687b      	ldr	r3, [r7, #4]
 806bc42:	681b      	ldr	r3, [r3, #0]
 806bc44:	689b      	ldr	r3, [r3, #8]
 806bc46:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 806bc48:	68bb      	ldr	r3, [r7, #8]
 806bc4a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 806bc4e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 806bc50:	687b      	ldr	r3, [r7, #4]
 806bc52:	681b      	ldr	r3, [r3, #0]
 806bc54:	68ba      	ldr	r2, [r7, #8]
 806bc56:	609a      	str	r2, [r3, #8]
      break;
 806bc58:	e1ba      	b.n	806bfd0 <HAL_TIM_ConfigClockSource+0x5ec>
 806bc5a:	bf00      	nop
 806bc5c:	08071840 	.word	0x08071840
 806bc60:	40010000 	.word	0x40010000
 806bc64:	40000400 	.word	0x40000400
 806bc68:	40000800 	.word	0x40000800
 806bc6c:	40000c00 	.word	0x40000c00
 806bc70:	40014000 	.word	0x40014000
 806bc74:	40014400 	.word	0x40014400
 806bc78:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 806bc7c:	687b      	ldr	r3, [r7, #4]
 806bc7e:	681b      	ldr	r3, [r3, #0]
 806bc80:	4a8a      	ldr	r2, [pc, #552]	@ (806beac <HAL_TIM_ConfigClockSource+0x4c8>)
 806bc82:	4293      	cmp	r3, r2
 806bc84:	d018      	beq.n	806bcb8 <HAL_TIM_ConfigClockSource+0x2d4>
 806bc86:	687b      	ldr	r3, [r7, #4]
 806bc88:	681b      	ldr	r3, [r3, #0]
 806bc8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 806bc8e:	d013      	beq.n	806bcb8 <HAL_TIM_ConfigClockSource+0x2d4>
 806bc90:	687b      	ldr	r3, [r7, #4]
 806bc92:	681b      	ldr	r3, [r3, #0]
 806bc94:	4a86      	ldr	r2, [pc, #536]	@ (806beb0 <HAL_TIM_ConfigClockSource+0x4cc>)
 806bc96:	4293      	cmp	r3, r2
 806bc98:	d00e      	beq.n	806bcb8 <HAL_TIM_ConfigClockSource+0x2d4>
 806bc9a:	687b      	ldr	r3, [r7, #4]
 806bc9c:	681b      	ldr	r3, [r3, #0]
 806bc9e:	4a85      	ldr	r2, [pc, #532]	@ (806beb4 <HAL_TIM_ConfigClockSource+0x4d0>)
 806bca0:	4293      	cmp	r3, r2
 806bca2:	d009      	beq.n	806bcb8 <HAL_TIM_ConfigClockSource+0x2d4>
 806bca4:	687b      	ldr	r3, [r7, #4]
 806bca6:	681b      	ldr	r3, [r3, #0]
 806bca8:	4a83      	ldr	r2, [pc, #524]	@ (806beb8 <HAL_TIM_ConfigClockSource+0x4d4>)
 806bcaa:	4293      	cmp	r3, r2
 806bcac:	d004      	beq.n	806bcb8 <HAL_TIM_ConfigClockSource+0x2d4>
 806bcae:	f241 41ee 	movw	r1, #5358	@ 0x14ee
 806bcb2:	4882      	ldr	r0, [pc, #520]	@ (806bebc <HAL_TIM_ConfigClockSource+0x4d8>)
 806bcb4:	f7fa fbc7 	bl	8066446 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 806bcb8:	683b      	ldr	r3, [r7, #0]
 806bcba:	689b      	ldr	r3, [r3, #8]
 806bcbc:	2b00      	cmp	r3, #0
 806bcbe:	d013      	beq.n	806bce8 <HAL_TIM_ConfigClockSource+0x304>
 806bcc0:	683b      	ldr	r3, [r7, #0]
 806bcc2:	689b      	ldr	r3, [r3, #8]
 806bcc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 806bcc8:	d00e      	beq.n	806bce8 <HAL_TIM_ConfigClockSource+0x304>
 806bcca:	683b      	ldr	r3, [r7, #0]
 806bccc:	689b      	ldr	r3, [r3, #8]
 806bcce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 806bcd2:	d009      	beq.n	806bce8 <HAL_TIM_ConfigClockSource+0x304>
 806bcd4:	683b      	ldr	r3, [r7, #0]
 806bcd6:	689b      	ldr	r3, [r3, #8]
 806bcd8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 806bcdc:	d004      	beq.n	806bce8 <HAL_TIM_ConfigClockSource+0x304>
 806bcde:	f241 41f1 	movw	r1, #5361	@ 0x14f1
 806bce2:	4876      	ldr	r0, [pc, #472]	@ (806bebc <HAL_TIM_ConfigClockSource+0x4d8>)
 806bce4:	f7fa fbaf 	bl	8066446 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 806bce8:	683b      	ldr	r3, [r7, #0]
 806bcea:	685b      	ldr	r3, [r3, #4]
 806bcec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 806bcf0:	d014      	beq.n	806bd1c <HAL_TIM_ConfigClockSource+0x338>
 806bcf2:	683b      	ldr	r3, [r7, #0]
 806bcf4:	685b      	ldr	r3, [r3, #4]
 806bcf6:	2b00      	cmp	r3, #0
 806bcf8:	d010      	beq.n	806bd1c <HAL_TIM_ConfigClockSource+0x338>
 806bcfa:	683b      	ldr	r3, [r7, #0]
 806bcfc:	685b      	ldr	r3, [r3, #4]
 806bcfe:	2b00      	cmp	r3, #0
 806bd00:	d00c      	beq.n	806bd1c <HAL_TIM_ConfigClockSource+0x338>
 806bd02:	683b      	ldr	r3, [r7, #0]
 806bd04:	685b      	ldr	r3, [r3, #4]
 806bd06:	2b02      	cmp	r3, #2
 806bd08:	d008      	beq.n	806bd1c <HAL_TIM_ConfigClockSource+0x338>
 806bd0a:	683b      	ldr	r3, [r7, #0]
 806bd0c:	685b      	ldr	r3, [r3, #4]
 806bd0e:	2b0a      	cmp	r3, #10
 806bd10:	d004      	beq.n	806bd1c <HAL_TIM_ConfigClockSource+0x338>
 806bd12:	f241 41f2 	movw	r1, #5362	@ 0x14f2
 806bd16:	4869      	ldr	r0, [pc, #420]	@ (806bebc <HAL_TIM_ConfigClockSource+0x4d8>)
 806bd18:	f7fa fb95 	bl	8066446 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 806bd1c:	683b      	ldr	r3, [r7, #0]
 806bd1e:	68db      	ldr	r3, [r3, #12]
 806bd20:	2b0f      	cmp	r3, #15
 806bd22:	d904      	bls.n	806bd2e <HAL_TIM_ConfigClockSource+0x34a>
 806bd24:	f241 41f3 	movw	r1, #5363	@ 0x14f3
 806bd28:	4864      	ldr	r0, [pc, #400]	@ (806bebc <HAL_TIM_ConfigClockSource+0x4d8>)
 806bd2a:	f7fa fb8c 	bl	8066446 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 806bd2e:	687b      	ldr	r3, [r7, #4]
 806bd30:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 806bd32:	683b      	ldr	r3, [r7, #0]
 806bd34:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 806bd36:	683b      	ldr	r3, [r7, #0]
 806bd38:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 806bd3a:	683b      	ldr	r3, [r7, #0]
 806bd3c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 806bd3e:	f000 fce5 	bl	806c70c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 806bd42:	687b      	ldr	r3, [r7, #4]
 806bd44:	681b      	ldr	r3, [r3, #0]
 806bd46:	689a      	ldr	r2, [r3, #8]
 806bd48:	687b      	ldr	r3, [r7, #4]
 806bd4a:	681b      	ldr	r3, [r3, #0]
 806bd4c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 806bd50:	609a      	str	r2, [r3, #8]
      break;
 806bd52:	e13d      	b.n	806bfd0 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 806bd54:	687b      	ldr	r3, [r7, #4]
 806bd56:	681b      	ldr	r3, [r3, #0]
 806bd58:	4a54      	ldr	r2, [pc, #336]	@ (806beac <HAL_TIM_ConfigClockSource+0x4c8>)
 806bd5a:	4293      	cmp	r3, r2
 806bd5c:	d01d      	beq.n	806bd9a <HAL_TIM_ConfigClockSource+0x3b6>
 806bd5e:	687b      	ldr	r3, [r7, #4]
 806bd60:	681b      	ldr	r3, [r3, #0]
 806bd62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 806bd66:	d018      	beq.n	806bd9a <HAL_TIM_ConfigClockSource+0x3b6>
 806bd68:	687b      	ldr	r3, [r7, #4]
 806bd6a:	681b      	ldr	r3, [r3, #0]
 806bd6c:	4a50      	ldr	r2, [pc, #320]	@ (806beb0 <HAL_TIM_ConfigClockSource+0x4cc>)
 806bd6e:	4293      	cmp	r3, r2
 806bd70:	d013      	beq.n	806bd9a <HAL_TIM_ConfigClockSource+0x3b6>
 806bd72:	687b      	ldr	r3, [r7, #4]
 806bd74:	681b      	ldr	r3, [r3, #0]
 806bd76:	4a4f      	ldr	r2, [pc, #316]	@ (806beb4 <HAL_TIM_ConfigClockSource+0x4d0>)
 806bd78:	4293      	cmp	r3, r2
 806bd7a:	d00e      	beq.n	806bd9a <HAL_TIM_ConfigClockSource+0x3b6>
 806bd7c:	687b      	ldr	r3, [r7, #4]
 806bd7e:	681b      	ldr	r3, [r3, #0]
 806bd80:	4a4d      	ldr	r2, [pc, #308]	@ (806beb8 <HAL_TIM_ConfigClockSource+0x4d4>)
 806bd82:	4293      	cmp	r3, r2
 806bd84:	d009      	beq.n	806bd9a <HAL_TIM_ConfigClockSource+0x3b6>
 806bd86:	687b      	ldr	r3, [r7, #4]
 806bd88:	681b      	ldr	r3, [r3, #0]
 806bd8a:	4a4d      	ldr	r2, [pc, #308]	@ (806bec0 <HAL_TIM_ConfigClockSource+0x4dc>)
 806bd8c:	4293      	cmp	r3, r2
 806bd8e:	d004      	beq.n	806bd9a <HAL_TIM_ConfigClockSource+0x3b6>
 806bd90:	f241 5102 	movw	r1, #5378	@ 0x1502
 806bd94:	4849      	ldr	r0, [pc, #292]	@ (806bebc <HAL_TIM_ConfigClockSource+0x4d8>)
 806bd96:	f7fa fb56 	bl	8066446 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 806bd9a:	683b      	ldr	r3, [r7, #0]
 806bd9c:	685b      	ldr	r3, [r3, #4]
 806bd9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 806bda2:	d014      	beq.n	806bdce <HAL_TIM_ConfigClockSource+0x3ea>
 806bda4:	683b      	ldr	r3, [r7, #0]
 806bda6:	685b      	ldr	r3, [r3, #4]
 806bda8:	2b00      	cmp	r3, #0
 806bdaa:	d010      	beq.n	806bdce <HAL_TIM_ConfigClockSource+0x3ea>
 806bdac:	683b      	ldr	r3, [r7, #0]
 806bdae:	685b      	ldr	r3, [r3, #4]
 806bdb0:	2b00      	cmp	r3, #0
 806bdb2:	d00c      	beq.n	806bdce <HAL_TIM_ConfigClockSource+0x3ea>
 806bdb4:	683b      	ldr	r3, [r7, #0]
 806bdb6:	685b      	ldr	r3, [r3, #4]
 806bdb8:	2b02      	cmp	r3, #2
 806bdba:	d008      	beq.n	806bdce <HAL_TIM_ConfigClockSource+0x3ea>
 806bdbc:	683b      	ldr	r3, [r7, #0]
 806bdbe:	685b      	ldr	r3, [r3, #4]
 806bdc0:	2b0a      	cmp	r3, #10
 806bdc2:	d004      	beq.n	806bdce <HAL_TIM_ConfigClockSource+0x3ea>
 806bdc4:	f241 5105 	movw	r1, #5381	@ 0x1505
 806bdc8:	483c      	ldr	r0, [pc, #240]	@ (806bebc <HAL_TIM_ConfigClockSource+0x4d8>)
 806bdca:	f7fa fb3c 	bl	8066446 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 806bdce:	683b      	ldr	r3, [r7, #0]
 806bdd0:	68db      	ldr	r3, [r3, #12]
 806bdd2:	2b0f      	cmp	r3, #15
 806bdd4:	d904      	bls.n	806bde0 <HAL_TIM_ConfigClockSource+0x3fc>
 806bdd6:	f241 5106 	movw	r1, #5382	@ 0x1506
 806bdda:	4838      	ldr	r0, [pc, #224]	@ (806bebc <HAL_TIM_ConfigClockSource+0x4d8>)
 806bddc:	f7fa fb33 	bl	8066446 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 806bde0:	687b      	ldr	r3, [r7, #4]
 806bde2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 806bde4:	683b      	ldr	r3, [r7, #0]
 806bde6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 806bde8:	683b      	ldr	r3, [r7, #0]
 806bdea:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 806bdec:	461a      	mov	r2, r3
 806bdee:	f000 fc13 	bl	806c618 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 806bdf2:	687b      	ldr	r3, [r7, #4]
 806bdf4:	681b      	ldr	r3, [r3, #0]
 806bdf6:	2150      	movs	r1, #80	@ 0x50
 806bdf8:	4618      	mov	r0, r3
 806bdfa:	f000 fc6c 	bl	806c6d6 <TIM_ITRx_SetConfig>
      break;
 806bdfe:	e0e7      	b.n	806bfd0 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 806be00:	687b      	ldr	r3, [r7, #4]
 806be02:	681b      	ldr	r3, [r3, #0]
 806be04:	4a29      	ldr	r2, [pc, #164]	@ (806beac <HAL_TIM_ConfigClockSource+0x4c8>)
 806be06:	4293      	cmp	r3, r2
 806be08:	d01d      	beq.n	806be46 <HAL_TIM_ConfigClockSource+0x462>
 806be0a:	687b      	ldr	r3, [r7, #4]
 806be0c:	681b      	ldr	r3, [r3, #0]
 806be0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 806be12:	d018      	beq.n	806be46 <HAL_TIM_ConfigClockSource+0x462>
 806be14:	687b      	ldr	r3, [r7, #4]
 806be16:	681b      	ldr	r3, [r3, #0]
 806be18:	4a25      	ldr	r2, [pc, #148]	@ (806beb0 <HAL_TIM_ConfigClockSource+0x4cc>)
 806be1a:	4293      	cmp	r3, r2
 806be1c:	d013      	beq.n	806be46 <HAL_TIM_ConfigClockSource+0x462>
 806be1e:	687b      	ldr	r3, [r7, #4]
 806be20:	681b      	ldr	r3, [r3, #0]
 806be22:	4a24      	ldr	r2, [pc, #144]	@ (806beb4 <HAL_TIM_ConfigClockSource+0x4d0>)
 806be24:	4293      	cmp	r3, r2
 806be26:	d00e      	beq.n	806be46 <HAL_TIM_ConfigClockSource+0x462>
 806be28:	687b      	ldr	r3, [r7, #4]
 806be2a:	681b      	ldr	r3, [r3, #0]
 806be2c:	4a22      	ldr	r2, [pc, #136]	@ (806beb8 <HAL_TIM_ConfigClockSource+0x4d4>)
 806be2e:	4293      	cmp	r3, r2
 806be30:	d009      	beq.n	806be46 <HAL_TIM_ConfigClockSource+0x462>
 806be32:	687b      	ldr	r3, [r7, #4]
 806be34:	681b      	ldr	r3, [r3, #0]
 806be36:	4a22      	ldr	r2, [pc, #136]	@ (806bec0 <HAL_TIM_ConfigClockSource+0x4dc>)
 806be38:	4293      	cmp	r3, r2
 806be3a:	d004      	beq.n	806be46 <HAL_TIM_ConfigClockSource+0x462>
 806be3c:	f241 5112 	movw	r1, #5394	@ 0x1512
 806be40:	481e      	ldr	r0, [pc, #120]	@ (806bebc <HAL_TIM_ConfigClockSource+0x4d8>)
 806be42:	f7fa fb00 	bl	8066446 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 806be46:	683b      	ldr	r3, [r7, #0]
 806be48:	685b      	ldr	r3, [r3, #4]
 806be4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 806be4e:	d014      	beq.n	806be7a <HAL_TIM_ConfigClockSource+0x496>
 806be50:	683b      	ldr	r3, [r7, #0]
 806be52:	685b      	ldr	r3, [r3, #4]
 806be54:	2b00      	cmp	r3, #0
 806be56:	d010      	beq.n	806be7a <HAL_TIM_ConfigClockSource+0x496>
 806be58:	683b      	ldr	r3, [r7, #0]
 806be5a:	685b      	ldr	r3, [r3, #4]
 806be5c:	2b00      	cmp	r3, #0
 806be5e:	d00c      	beq.n	806be7a <HAL_TIM_ConfigClockSource+0x496>
 806be60:	683b      	ldr	r3, [r7, #0]
 806be62:	685b      	ldr	r3, [r3, #4]
 806be64:	2b02      	cmp	r3, #2
 806be66:	d008      	beq.n	806be7a <HAL_TIM_ConfigClockSource+0x496>
 806be68:	683b      	ldr	r3, [r7, #0]
 806be6a:	685b      	ldr	r3, [r3, #4]
 806be6c:	2b0a      	cmp	r3, #10
 806be6e:	d004      	beq.n	806be7a <HAL_TIM_ConfigClockSource+0x496>
 806be70:	f241 5115 	movw	r1, #5397	@ 0x1515
 806be74:	4811      	ldr	r0, [pc, #68]	@ (806bebc <HAL_TIM_ConfigClockSource+0x4d8>)
 806be76:	f7fa fae6 	bl	8066446 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 806be7a:	683b      	ldr	r3, [r7, #0]
 806be7c:	68db      	ldr	r3, [r3, #12]
 806be7e:	2b0f      	cmp	r3, #15
 806be80:	d904      	bls.n	806be8c <HAL_TIM_ConfigClockSource+0x4a8>
 806be82:	f241 5116 	movw	r1, #5398	@ 0x1516
 806be86:	480d      	ldr	r0, [pc, #52]	@ (806bebc <HAL_TIM_ConfigClockSource+0x4d8>)
 806be88:	f7fa fadd 	bl	8066446 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 806be8c:	687b      	ldr	r3, [r7, #4]
 806be8e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 806be90:	683b      	ldr	r3, [r7, #0]
 806be92:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 806be94:	683b      	ldr	r3, [r7, #0]
 806be96:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 806be98:	461a      	mov	r2, r3
 806be9a:	f000 fbec 	bl	806c676 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 806be9e:	687b      	ldr	r3, [r7, #4]
 806bea0:	681b      	ldr	r3, [r3, #0]
 806bea2:	2160      	movs	r1, #96	@ 0x60
 806bea4:	4618      	mov	r0, r3
 806bea6:	f000 fc16 	bl	806c6d6 <TIM_ITRx_SetConfig>
      break;
 806beaa:	e091      	b.n	806bfd0 <HAL_TIM_ConfigClockSource+0x5ec>
 806beac:	40010000 	.word	0x40010000
 806beb0:	40000400 	.word	0x40000400
 806beb4:	40000800 	.word	0x40000800
 806beb8:	40000c00 	.word	0x40000c00
 806bebc:	08071840 	.word	0x08071840
 806bec0:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 806bec4:	687b      	ldr	r3, [r7, #4]
 806bec6:	681b      	ldr	r3, [r3, #0]
 806bec8:	4a48      	ldr	r2, [pc, #288]	@ (806bfec <HAL_TIM_ConfigClockSource+0x608>)
 806beca:	4293      	cmp	r3, r2
 806becc:	d01d      	beq.n	806bf0a <HAL_TIM_ConfigClockSource+0x526>
 806bece:	687b      	ldr	r3, [r7, #4]
 806bed0:	681b      	ldr	r3, [r3, #0]
 806bed2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 806bed6:	d018      	beq.n	806bf0a <HAL_TIM_ConfigClockSource+0x526>
 806bed8:	687b      	ldr	r3, [r7, #4]
 806beda:	681b      	ldr	r3, [r3, #0]
 806bedc:	4a44      	ldr	r2, [pc, #272]	@ (806bff0 <HAL_TIM_ConfigClockSource+0x60c>)
 806bede:	4293      	cmp	r3, r2
 806bee0:	d013      	beq.n	806bf0a <HAL_TIM_ConfigClockSource+0x526>
 806bee2:	687b      	ldr	r3, [r7, #4]
 806bee4:	681b      	ldr	r3, [r3, #0]
 806bee6:	4a43      	ldr	r2, [pc, #268]	@ (806bff4 <HAL_TIM_ConfigClockSource+0x610>)
 806bee8:	4293      	cmp	r3, r2
 806beea:	d00e      	beq.n	806bf0a <HAL_TIM_ConfigClockSource+0x526>
 806beec:	687b      	ldr	r3, [r7, #4]
 806beee:	681b      	ldr	r3, [r3, #0]
 806bef0:	4a41      	ldr	r2, [pc, #260]	@ (806bff8 <HAL_TIM_ConfigClockSource+0x614>)
 806bef2:	4293      	cmp	r3, r2
 806bef4:	d009      	beq.n	806bf0a <HAL_TIM_ConfigClockSource+0x526>
 806bef6:	687b      	ldr	r3, [r7, #4]
 806bef8:	681b      	ldr	r3, [r3, #0]
 806befa:	4a40      	ldr	r2, [pc, #256]	@ (806bffc <HAL_TIM_ConfigClockSource+0x618>)
 806befc:	4293      	cmp	r3, r2
 806befe:	d004      	beq.n	806bf0a <HAL_TIM_ConfigClockSource+0x526>
 806bf00:	f241 5122 	movw	r1, #5410	@ 0x1522
 806bf04:	483e      	ldr	r0, [pc, #248]	@ (806c000 <HAL_TIM_ConfigClockSource+0x61c>)
 806bf06:	f7fa fa9e 	bl	8066446 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 806bf0a:	683b      	ldr	r3, [r7, #0]
 806bf0c:	685b      	ldr	r3, [r3, #4]
 806bf0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 806bf12:	d014      	beq.n	806bf3e <HAL_TIM_ConfigClockSource+0x55a>
 806bf14:	683b      	ldr	r3, [r7, #0]
 806bf16:	685b      	ldr	r3, [r3, #4]
 806bf18:	2b00      	cmp	r3, #0
 806bf1a:	d010      	beq.n	806bf3e <HAL_TIM_ConfigClockSource+0x55a>
 806bf1c:	683b      	ldr	r3, [r7, #0]
 806bf1e:	685b      	ldr	r3, [r3, #4]
 806bf20:	2b00      	cmp	r3, #0
 806bf22:	d00c      	beq.n	806bf3e <HAL_TIM_ConfigClockSource+0x55a>
 806bf24:	683b      	ldr	r3, [r7, #0]
 806bf26:	685b      	ldr	r3, [r3, #4]
 806bf28:	2b02      	cmp	r3, #2
 806bf2a:	d008      	beq.n	806bf3e <HAL_TIM_ConfigClockSource+0x55a>
 806bf2c:	683b      	ldr	r3, [r7, #0]
 806bf2e:	685b      	ldr	r3, [r3, #4]
 806bf30:	2b0a      	cmp	r3, #10
 806bf32:	d004      	beq.n	806bf3e <HAL_TIM_ConfigClockSource+0x55a>
 806bf34:	f241 5125 	movw	r1, #5413	@ 0x1525
 806bf38:	4831      	ldr	r0, [pc, #196]	@ (806c000 <HAL_TIM_ConfigClockSource+0x61c>)
 806bf3a:	f7fa fa84 	bl	8066446 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 806bf3e:	683b      	ldr	r3, [r7, #0]
 806bf40:	68db      	ldr	r3, [r3, #12]
 806bf42:	2b0f      	cmp	r3, #15
 806bf44:	d904      	bls.n	806bf50 <HAL_TIM_ConfigClockSource+0x56c>
 806bf46:	f241 5126 	movw	r1, #5414	@ 0x1526
 806bf4a:	482d      	ldr	r0, [pc, #180]	@ (806c000 <HAL_TIM_ConfigClockSource+0x61c>)
 806bf4c:	f7fa fa7b 	bl	8066446 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 806bf50:	687b      	ldr	r3, [r7, #4]
 806bf52:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 806bf54:	683b      	ldr	r3, [r7, #0]
 806bf56:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 806bf58:	683b      	ldr	r3, [r7, #0]
 806bf5a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 806bf5c:	461a      	mov	r2, r3
 806bf5e:	f000 fb5b 	bl	806c618 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 806bf62:	687b      	ldr	r3, [r7, #4]
 806bf64:	681b      	ldr	r3, [r3, #0]
 806bf66:	2140      	movs	r1, #64	@ 0x40
 806bf68:	4618      	mov	r0, r3
 806bf6a:	f000 fbb4 	bl	806c6d6 <TIM_ITRx_SetConfig>
      break;
 806bf6e:	e02f      	b.n	806bfd0 <HAL_TIM_ConfigClockSource+0x5ec>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 806bf70:	687b      	ldr	r3, [r7, #4]
 806bf72:	681b      	ldr	r3, [r3, #0]
 806bf74:	4a1d      	ldr	r2, [pc, #116]	@ (806bfec <HAL_TIM_ConfigClockSource+0x608>)
 806bf76:	4293      	cmp	r3, r2
 806bf78:	d01d      	beq.n	806bfb6 <HAL_TIM_ConfigClockSource+0x5d2>
 806bf7a:	687b      	ldr	r3, [r7, #4]
 806bf7c:	681b      	ldr	r3, [r3, #0]
 806bf7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 806bf82:	d018      	beq.n	806bfb6 <HAL_TIM_ConfigClockSource+0x5d2>
 806bf84:	687b      	ldr	r3, [r7, #4]
 806bf86:	681b      	ldr	r3, [r3, #0]
 806bf88:	4a19      	ldr	r2, [pc, #100]	@ (806bff0 <HAL_TIM_ConfigClockSource+0x60c>)
 806bf8a:	4293      	cmp	r3, r2
 806bf8c:	d013      	beq.n	806bfb6 <HAL_TIM_ConfigClockSource+0x5d2>
 806bf8e:	687b      	ldr	r3, [r7, #4]
 806bf90:	681b      	ldr	r3, [r3, #0]
 806bf92:	4a18      	ldr	r2, [pc, #96]	@ (806bff4 <HAL_TIM_ConfigClockSource+0x610>)
 806bf94:	4293      	cmp	r3, r2
 806bf96:	d00e      	beq.n	806bfb6 <HAL_TIM_ConfigClockSource+0x5d2>
 806bf98:	687b      	ldr	r3, [r7, #4]
 806bf9a:	681b      	ldr	r3, [r3, #0]
 806bf9c:	4a16      	ldr	r2, [pc, #88]	@ (806bff8 <HAL_TIM_ConfigClockSource+0x614>)
 806bf9e:	4293      	cmp	r3, r2
 806bfa0:	d009      	beq.n	806bfb6 <HAL_TIM_ConfigClockSource+0x5d2>
 806bfa2:	687b      	ldr	r3, [r7, #4]
 806bfa4:	681b      	ldr	r3, [r3, #0]
 806bfa6:	4a15      	ldr	r2, [pc, #84]	@ (806bffc <HAL_TIM_ConfigClockSource+0x618>)
 806bfa8:	4293      	cmp	r3, r2
 806bfaa:	d004      	beq.n	806bfb6 <HAL_TIM_ConfigClockSource+0x5d2>
 806bfac:	f241 5135 	movw	r1, #5429	@ 0x1535
 806bfb0:	4813      	ldr	r0, [pc, #76]	@ (806c000 <HAL_TIM_ConfigClockSource+0x61c>)
 806bfb2:	f7fa fa48 	bl	8066446 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 806bfb6:	687b      	ldr	r3, [r7, #4]
 806bfb8:	681a      	ldr	r2, [r3, #0]
 806bfba:	683b      	ldr	r3, [r7, #0]
 806bfbc:	681b      	ldr	r3, [r3, #0]
 806bfbe:	4619      	mov	r1, r3
 806bfc0:	4610      	mov	r0, r2
 806bfc2:	f000 fb88 	bl	806c6d6 <TIM_ITRx_SetConfig>
      break;
 806bfc6:	e003      	b.n	806bfd0 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    default:
      status = HAL_ERROR;
 806bfc8:	2301      	movs	r3, #1
 806bfca:	73fb      	strb	r3, [r7, #15]
      break;
 806bfcc:	e000      	b.n	806bfd0 <HAL_TIM_ConfigClockSource+0x5ec>
      break;
 806bfce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 806bfd0:	687b      	ldr	r3, [r7, #4]
 806bfd2:	2201      	movs	r2, #1
 806bfd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 806bfd8:	687b      	ldr	r3, [r7, #4]
 806bfda:	2200      	movs	r2, #0
 806bfdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 806bfe0:	7bfb      	ldrb	r3, [r7, #15]
}
 806bfe2:	4618      	mov	r0, r3
 806bfe4:	3710      	adds	r7, #16
 806bfe6:	46bd      	mov	sp, r7
 806bfe8:	bd80      	pop	{r7, pc}
 806bfea:	bf00      	nop
 806bfec:	40010000 	.word	0x40010000
 806bff0:	40000400 	.word	0x40000400
 806bff4:	40000800 	.word	0x40000800
 806bff8:	40000c00 	.word	0x40000c00
 806bffc:	40014000 	.word	0x40014000
 806c000:	08071840 	.word	0x08071840

0806c004 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 806c004:	b480      	push	{r7}
 806c006:	b083      	sub	sp, #12
 806c008:	af00      	add	r7, sp, #0
 806c00a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 806c00c:	bf00      	nop
 806c00e:	370c      	adds	r7, #12
 806c010:	46bd      	mov	sp, r7
 806c012:	f85d 7b04 	ldr.w	r7, [sp], #4
 806c016:	4770      	bx	lr

0806c018 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 806c018:	b480      	push	{r7}
 806c01a:	b083      	sub	sp, #12
 806c01c:	af00      	add	r7, sp, #0
 806c01e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 806c020:	bf00      	nop
 806c022:	370c      	adds	r7, #12
 806c024:	46bd      	mov	sp, r7
 806c026:	f85d 7b04 	ldr.w	r7, [sp], #4
 806c02a:	4770      	bx	lr

0806c02c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 806c02c:	b480      	push	{r7}
 806c02e:	b083      	sub	sp, #12
 806c030:	af00      	add	r7, sp, #0
 806c032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 806c034:	bf00      	nop
 806c036:	370c      	adds	r7, #12
 806c038:	46bd      	mov	sp, r7
 806c03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 806c03e:	4770      	bx	lr

0806c040 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 806c040:	b480      	push	{r7}
 806c042:	b083      	sub	sp, #12
 806c044:	af00      	add	r7, sp, #0
 806c046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 806c048:	bf00      	nop
 806c04a:	370c      	adds	r7, #12
 806c04c:	46bd      	mov	sp, r7
 806c04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 806c052:	4770      	bx	lr

0806c054 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 806c054:	b480      	push	{r7}
 806c056:	b083      	sub	sp, #12
 806c058:	af00      	add	r7, sp, #0
 806c05a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 806c05c:	bf00      	nop
 806c05e:	370c      	adds	r7, #12
 806c060:	46bd      	mov	sp, r7
 806c062:	f85d 7b04 	ldr.w	r7, [sp], #4
 806c066:	4770      	bx	lr

0806c068 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 806c068:	b480      	push	{r7}
 806c06a:	b083      	sub	sp, #12
 806c06c:	af00      	add	r7, sp, #0
 806c06e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 806c070:	bf00      	nop
 806c072:	370c      	adds	r7, #12
 806c074:	46bd      	mov	sp, r7
 806c076:	f85d 7b04 	ldr.w	r7, [sp], #4
 806c07a:	4770      	bx	lr

0806c07c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 806c07c:	b480      	push	{r7}
 806c07e:	b083      	sub	sp, #12
 806c080:	af00      	add	r7, sp, #0
 806c082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 806c084:	bf00      	nop
 806c086:	370c      	adds	r7, #12
 806c088:	46bd      	mov	sp, r7
 806c08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 806c08e:	4770      	bx	lr

0806c090 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 806c090:	b480      	push	{r7}
 806c092:	b083      	sub	sp, #12
 806c094:	af00      	add	r7, sp, #0
 806c096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 806c098:	bf00      	nop
 806c09a:	370c      	adds	r7, #12
 806c09c:	46bd      	mov	sp, r7
 806c09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 806c0a2:	4770      	bx	lr

0806c0a4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 806c0a4:	b480      	push	{r7}
 806c0a6:	b083      	sub	sp, #12
 806c0a8:	af00      	add	r7, sp, #0
 806c0aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 806c0ac:	bf00      	nop
 806c0ae:	370c      	adds	r7, #12
 806c0b0:	46bd      	mov	sp, r7
 806c0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 806c0b6:	4770      	bx	lr

0806c0b8 <HAL_TIM_Base_GetState>:
  * @brief  Return the TIM Base handle state.
  * @param  htim TIM Base handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(const TIM_HandleTypeDef *htim)
{
 806c0b8:	b480      	push	{r7}
 806c0ba:	b083      	sub	sp, #12
 806c0bc:	af00      	add	r7, sp, #0
 806c0be:	6078      	str	r0, [r7, #4]
  return htim->State;
 806c0c0:	687b      	ldr	r3, [r7, #4]
 806c0c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 806c0c6:	b2db      	uxtb	r3, r3
}
 806c0c8:	4618      	mov	r0, r3
 806c0ca:	370c      	adds	r7, #12
 806c0cc:	46bd      	mov	sp, r7
 806c0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 806c0d2:	4770      	bx	lr

0806c0d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 806c0d4:	b480      	push	{r7}
 806c0d6:	b085      	sub	sp, #20
 806c0d8:	af00      	add	r7, sp, #0
 806c0da:	6078      	str	r0, [r7, #4]
 806c0dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 806c0de:	687b      	ldr	r3, [r7, #4]
 806c0e0:	681b      	ldr	r3, [r3, #0]
 806c0e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 806c0e4:	687b      	ldr	r3, [r7, #4]
 806c0e6:	4a3a      	ldr	r2, [pc, #232]	@ (806c1d0 <TIM_Base_SetConfig+0xfc>)
 806c0e8:	4293      	cmp	r3, r2
 806c0ea:	d00f      	beq.n	806c10c <TIM_Base_SetConfig+0x38>
 806c0ec:	687b      	ldr	r3, [r7, #4]
 806c0ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 806c0f2:	d00b      	beq.n	806c10c <TIM_Base_SetConfig+0x38>
 806c0f4:	687b      	ldr	r3, [r7, #4]
 806c0f6:	4a37      	ldr	r2, [pc, #220]	@ (806c1d4 <TIM_Base_SetConfig+0x100>)
 806c0f8:	4293      	cmp	r3, r2
 806c0fa:	d007      	beq.n	806c10c <TIM_Base_SetConfig+0x38>
 806c0fc:	687b      	ldr	r3, [r7, #4]
 806c0fe:	4a36      	ldr	r2, [pc, #216]	@ (806c1d8 <TIM_Base_SetConfig+0x104>)
 806c100:	4293      	cmp	r3, r2
 806c102:	d003      	beq.n	806c10c <TIM_Base_SetConfig+0x38>
 806c104:	687b      	ldr	r3, [r7, #4]
 806c106:	4a35      	ldr	r2, [pc, #212]	@ (806c1dc <TIM_Base_SetConfig+0x108>)
 806c108:	4293      	cmp	r3, r2
 806c10a:	d108      	bne.n	806c11e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 806c10c:	68fb      	ldr	r3, [r7, #12]
 806c10e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 806c112:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 806c114:	683b      	ldr	r3, [r7, #0]
 806c116:	685b      	ldr	r3, [r3, #4]
 806c118:	68fa      	ldr	r2, [r7, #12]
 806c11a:	4313      	orrs	r3, r2
 806c11c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 806c11e:	687b      	ldr	r3, [r7, #4]
 806c120:	4a2b      	ldr	r2, [pc, #172]	@ (806c1d0 <TIM_Base_SetConfig+0xfc>)
 806c122:	4293      	cmp	r3, r2
 806c124:	d01b      	beq.n	806c15e <TIM_Base_SetConfig+0x8a>
 806c126:	687b      	ldr	r3, [r7, #4]
 806c128:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 806c12c:	d017      	beq.n	806c15e <TIM_Base_SetConfig+0x8a>
 806c12e:	687b      	ldr	r3, [r7, #4]
 806c130:	4a28      	ldr	r2, [pc, #160]	@ (806c1d4 <TIM_Base_SetConfig+0x100>)
 806c132:	4293      	cmp	r3, r2
 806c134:	d013      	beq.n	806c15e <TIM_Base_SetConfig+0x8a>
 806c136:	687b      	ldr	r3, [r7, #4]
 806c138:	4a27      	ldr	r2, [pc, #156]	@ (806c1d8 <TIM_Base_SetConfig+0x104>)
 806c13a:	4293      	cmp	r3, r2
 806c13c:	d00f      	beq.n	806c15e <TIM_Base_SetConfig+0x8a>
 806c13e:	687b      	ldr	r3, [r7, #4]
 806c140:	4a26      	ldr	r2, [pc, #152]	@ (806c1dc <TIM_Base_SetConfig+0x108>)
 806c142:	4293      	cmp	r3, r2
 806c144:	d00b      	beq.n	806c15e <TIM_Base_SetConfig+0x8a>
 806c146:	687b      	ldr	r3, [r7, #4]
 806c148:	4a25      	ldr	r2, [pc, #148]	@ (806c1e0 <TIM_Base_SetConfig+0x10c>)
 806c14a:	4293      	cmp	r3, r2
 806c14c:	d007      	beq.n	806c15e <TIM_Base_SetConfig+0x8a>
 806c14e:	687b      	ldr	r3, [r7, #4]
 806c150:	4a24      	ldr	r2, [pc, #144]	@ (806c1e4 <TIM_Base_SetConfig+0x110>)
 806c152:	4293      	cmp	r3, r2
 806c154:	d003      	beq.n	806c15e <TIM_Base_SetConfig+0x8a>
 806c156:	687b      	ldr	r3, [r7, #4]
 806c158:	4a23      	ldr	r2, [pc, #140]	@ (806c1e8 <TIM_Base_SetConfig+0x114>)
 806c15a:	4293      	cmp	r3, r2
 806c15c:	d108      	bne.n	806c170 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 806c15e:	68fb      	ldr	r3, [r7, #12]
 806c160:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 806c164:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 806c166:	683b      	ldr	r3, [r7, #0]
 806c168:	68db      	ldr	r3, [r3, #12]
 806c16a:	68fa      	ldr	r2, [r7, #12]
 806c16c:	4313      	orrs	r3, r2
 806c16e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 806c170:	68fb      	ldr	r3, [r7, #12]
 806c172:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 806c176:	683b      	ldr	r3, [r7, #0]
 806c178:	695b      	ldr	r3, [r3, #20]
 806c17a:	4313      	orrs	r3, r2
 806c17c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 806c17e:	687b      	ldr	r3, [r7, #4]
 806c180:	68fa      	ldr	r2, [r7, #12]
 806c182:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 806c184:	683b      	ldr	r3, [r7, #0]
 806c186:	689a      	ldr	r2, [r3, #8]
 806c188:	687b      	ldr	r3, [r7, #4]
 806c18a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 806c18c:	683b      	ldr	r3, [r7, #0]
 806c18e:	681a      	ldr	r2, [r3, #0]
 806c190:	687b      	ldr	r3, [r7, #4]
 806c192:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 806c194:	687b      	ldr	r3, [r7, #4]
 806c196:	4a0e      	ldr	r2, [pc, #56]	@ (806c1d0 <TIM_Base_SetConfig+0xfc>)
 806c198:	4293      	cmp	r3, r2
 806c19a:	d103      	bne.n	806c1a4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 806c19c:	683b      	ldr	r3, [r7, #0]
 806c19e:	691a      	ldr	r2, [r3, #16]
 806c1a0:	687b      	ldr	r3, [r7, #4]
 806c1a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 806c1a4:	687b      	ldr	r3, [r7, #4]
 806c1a6:	2201      	movs	r2, #1
 806c1a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 806c1aa:	687b      	ldr	r3, [r7, #4]
 806c1ac:	691b      	ldr	r3, [r3, #16]
 806c1ae:	f003 0301 	and.w	r3, r3, #1
 806c1b2:	2b01      	cmp	r3, #1
 806c1b4:	d105      	bne.n	806c1c2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 806c1b6:	687b      	ldr	r3, [r7, #4]
 806c1b8:	691b      	ldr	r3, [r3, #16]
 806c1ba:	f023 0201 	bic.w	r2, r3, #1
 806c1be:	687b      	ldr	r3, [r7, #4]
 806c1c0:	611a      	str	r2, [r3, #16]
  }
}
 806c1c2:	bf00      	nop
 806c1c4:	3714      	adds	r7, #20
 806c1c6:	46bd      	mov	sp, r7
 806c1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 806c1cc:	4770      	bx	lr
 806c1ce:	bf00      	nop
 806c1d0:	40010000 	.word	0x40010000
 806c1d4:	40000400 	.word	0x40000400
 806c1d8:	40000800 	.word	0x40000800
 806c1dc:	40000c00 	.word	0x40000c00
 806c1e0:	40014000 	.word	0x40014000
 806c1e4:	40014400 	.word	0x40014400
 806c1e8:	40014800 	.word	0x40014800

0806c1ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 806c1ec:	b580      	push	{r7, lr}
 806c1ee:	b086      	sub	sp, #24
 806c1f0:	af00      	add	r7, sp, #0
 806c1f2:	6078      	str	r0, [r7, #4]
 806c1f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 806c1f6:	687b      	ldr	r3, [r7, #4]
 806c1f8:	6a1b      	ldr	r3, [r3, #32]
 806c1fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 806c1fc:	687b      	ldr	r3, [r7, #4]
 806c1fe:	6a1b      	ldr	r3, [r3, #32]
 806c200:	f023 0201 	bic.w	r2, r3, #1
 806c204:	687b      	ldr	r3, [r7, #4]
 806c206:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 806c208:	687b      	ldr	r3, [r7, #4]
 806c20a:	685b      	ldr	r3, [r3, #4]
 806c20c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 806c20e:	687b      	ldr	r3, [r7, #4]
 806c210:	699b      	ldr	r3, [r3, #24]
 806c212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 806c214:	68fb      	ldr	r3, [r7, #12]
 806c216:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 806c21a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 806c21c:	68fb      	ldr	r3, [r7, #12]
 806c21e:	f023 0303 	bic.w	r3, r3, #3
 806c222:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 806c224:	683b      	ldr	r3, [r7, #0]
 806c226:	681b      	ldr	r3, [r3, #0]
 806c228:	68fa      	ldr	r2, [r7, #12]
 806c22a:	4313      	orrs	r3, r2
 806c22c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 806c22e:	697b      	ldr	r3, [r7, #20]
 806c230:	f023 0302 	bic.w	r3, r3, #2
 806c234:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 806c236:	683b      	ldr	r3, [r7, #0]
 806c238:	689b      	ldr	r3, [r3, #8]
 806c23a:	697a      	ldr	r2, [r7, #20]
 806c23c:	4313      	orrs	r3, r2
 806c23e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 806c240:	687b      	ldr	r3, [r7, #4]
 806c242:	4a30      	ldr	r2, [pc, #192]	@ (806c304 <TIM_OC1_SetConfig+0x118>)
 806c244:	4293      	cmp	r3, r2
 806c246:	d119      	bne.n	806c27c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 806c248:	683b      	ldr	r3, [r7, #0]
 806c24a:	68db      	ldr	r3, [r3, #12]
 806c24c:	2b00      	cmp	r3, #0
 806c24e:	d008      	beq.n	806c262 <TIM_OC1_SetConfig+0x76>
 806c250:	683b      	ldr	r3, [r7, #0]
 806c252:	68db      	ldr	r3, [r3, #12]
 806c254:	2b08      	cmp	r3, #8
 806c256:	d004      	beq.n	806c262 <TIM_OC1_SetConfig+0x76>
 806c258:	f641 21d0 	movw	r1, #6864	@ 0x1ad0
 806c25c:	482a      	ldr	r0, [pc, #168]	@ (806c308 <TIM_OC1_SetConfig+0x11c>)
 806c25e:	f7fa f8f2 	bl	8066446 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 806c262:	697b      	ldr	r3, [r7, #20]
 806c264:	f023 0308 	bic.w	r3, r3, #8
 806c268:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 806c26a:	683b      	ldr	r3, [r7, #0]
 806c26c:	68db      	ldr	r3, [r3, #12]
 806c26e:	697a      	ldr	r2, [r7, #20]
 806c270:	4313      	orrs	r3, r2
 806c272:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 806c274:	697b      	ldr	r3, [r7, #20]
 806c276:	f023 0304 	bic.w	r3, r3, #4
 806c27a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 806c27c:	687b      	ldr	r3, [r7, #4]
 806c27e:	4a21      	ldr	r2, [pc, #132]	@ (806c304 <TIM_OC1_SetConfig+0x118>)
 806c280:	4293      	cmp	r3, r2
 806c282:	d12d      	bne.n	806c2e0 <TIM_OC1_SetConfig+0xf4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 806c284:	683b      	ldr	r3, [r7, #0]
 806c286:	699b      	ldr	r3, [r3, #24]
 806c288:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 806c28c:	d008      	beq.n	806c2a0 <TIM_OC1_SetConfig+0xb4>
 806c28e:	683b      	ldr	r3, [r7, #0]
 806c290:	699b      	ldr	r3, [r3, #24]
 806c292:	2b00      	cmp	r3, #0
 806c294:	d004      	beq.n	806c2a0 <TIM_OC1_SetConfig+0xb4>
 806c296:	f641 21dd 	movw	r1, #6877	@ 0x1add
 806c29a:	481b      	ldr	r0, [pc, #108]	@ (806c308 <TIM_OC1_SetConfig+0x11c>)
 806c29c:	f7fa f8d3 	bl	8066446 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 806c2a0:	683b      	ldr	r3, [r7, #0]
 806c2a2:	695b      	ldr	r3, [r3, #20]
 806c2a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 806c2a8:	d008      	beq.n	806c2bc <TIM_OC1_SetConfig+0xd0>
 806c2aa:	683b      	ldr	r3, [r7, #0]
 806c2ac:	695b      	ldr	r3, [r3, #20]
 806c2ae:	2b00      	cmp	r3, #0
 806c2b0:	d004      	beq.n	806c2bc <TIM_OC1_SetConfig+0xd0>
 806c2b2:	f641 21de 	movw	r1, #6878	@ 0x1ade
 806c2b6:	4814      	ldr	r0, [pc, #80]	@ (806c308 <TIM_OC1_SetConfig+0x11c>)
 806c2b8:	f7fa f8c5 	bl	8066446 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 806c2bc:	693b      	ldr	r3, [r7, #16]
 806c2be:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 806c2c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 806c2c4:	693b      	ldr	r3, [r7, #16]
 806c2c6:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 806c2ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 806c2cc:	683b      	ldr	r3, [r7, #0]
 806c2ce:	695b      	ldr	r3, [r3, #20]
 806c2d0:	693a      	ldr	r2, [r7, #16]
 806c2d2:	4313      	orrs	r3, r2
 806c2d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 806c2d6:	683b      	ldr	r3, [r7, #0]
 806c2d8:	699b      	ldr	r3, [r3, #24]
 806c2da:	693a      	ldr	r2, [r7, #16]
 806c2dc:	4313      	orrs	r3, r2
 806c2de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 806c2e0:	687b      	ldr	r3, [r7, #4]
 806c2e2:	693a      	ldr	r2, [r7, #16]
 806c2e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 806c2e6:	687b      	ldr	r3, [r7, #4]
 806c2e8:	68fa      	ldr	r2, [r7, #12]
 806c2ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 806c2ec:	683b      	ldr	r3, [r7, #0]
 806c2ee:	685a      	ldr	r2, [r3, #4]
 806c2f0:	687b      	ldr	r3, [r7, #4]
 806c2f2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 806c2f4:	687b      	ldr	r3, [r7, #4]
 806c2f6:	697a      	ldr	r2, [r7, #20]
 806c2f8:	621a      	str	r2, [r3, #32]
}
 806c2fa:	bf00      	nop
 806c2fc:	3718      	adds	r7, #24
 806c2fe:	46bd      	mov	sp, r7
 806c300:	bd80      	pop	{r7, pc}
 806c302:	bf00      	nop
 806c304:	40010000 	.word	0x40010000
 806c308:	08071840 	.word	0x08071840

0806c30c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 806c30c:	b580      	push	{r7, lr}
 806c30e:	b086      	sub	sp, #24
 806c310:	af00      	add	r7, sp, #0
 806c312:	6078      	str	r0, [r7, #4]
 806c314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 806c316:	687b      	ldr	r3, [r7, #4]
 806c318:	6a1b      	ldr	r3, [r3, #32]
 806c31a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 806c31c:	687b      	ldr	r3, [r7, #4]
 806c31e:	6a1b      	ldr	r3, [r3, #32]
 806c320:	f023 0210 	bic.w	r2, r3, #16
 806c324:	687b      	ldr	r3, [r7, #4]
 806c326:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 806c328:	687b      	ldr	r3, [r7, #4]
 806c32a:	685b      	ldr	r3, [r3, #4]
 806c32c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 806c32e:	687b      	ldr	r3, [r7, #4]
 806c330:	699b      	ldr	r3, [r3, #24]
 806c332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 806c334:	68fb      	ldr	r3, [r7, #12]
 806c336:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 806c33a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 806c33c:	68fb      	ldr	r3, [r7, #12]
 806c33e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 806c342:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 806c344:	683b      	ldr	r3, [r7, #0]
 806c346:	681b      	ldr	r3, [r3, #0]
 806c348:	021b      	lsls	r3, r3, #8
 806c34a:	68fa      	ldr	r2, [r7, #12]
 806c34c:	4313      	orrs	r3, r2
 806c34e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 806c350:	697b      	ldr	r3, [r7, #20]
 806c352:	f023 0320 	bic.w	r3, r3, #32
 806c356:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 806c358:	683b      	ldr	r3, [r7, #0]
 806c35a:	689b      	ldr	r3, [r3, #8]
 806c35c:	011b      	lsls	r3, r3, #4
 806c35e:	697a      	ldr	r2, [r7, #20]
 806c360:	4313      	orrs	r3, r2
 806c362:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 806c364:	687b      	ldr	r3, [r7, #4]
 806c366:	4a31      	ldr	r2, [pc, #196]	@ (806c42c <TIM_OC2_SetConfig+0x120>)
 806c368:	4293      	cmp	r3, r2
 806c36a:	d11a      	bne.n	806c3a2 <TIM_OC2_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 806c36c:	683b      	ldr	r3, [r7, #0]
 806c36e:	68db      	ldr	r3, [r3, #12]
 806c370:	2b00      	cmp	r3, #0
 806c372:	d008      	beq.n	806c386 <TIM_OC2_SetConfig+0x7a>
 806c374:	683b      	ldr	r3, [r7, #0]
 806c376:	68db      	ldr	r3, [r3, #12]
 806c378:	2b08      	cmp	r3, #8
 806c37a:	d004      	beq.n	806c386 <TIM_OC2_SetConfig+0x7a>
 806c37c:	f641 311c 	movw	r1, #6940	@ 0x1b1c
 806c380:	482b      	ldr	r0, [pc, #172]	@ (806c430 <TIM_OC2_SetConfig+0x124>)
 806c382:	f7fa f860 	bl	8066446 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 806c386:	697b      	ldr	r3, [r7, #20]
 806c388:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 806c38c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 806c38e:	683b      	ldr	r3, [r7, #0]
 806c390:	68db      	ldr	r3, [r3, #12]
 806c392:	011b      	lsls	r3, r3, #4
 806c394:	697a      	ldr	r2, [r7, #20]
 806c396:	4313      	orrs	r3, r2
 806c398:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 806c39a:	697b      	ldr	r3, [r7, #20]
 806c39c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 806c3a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 806c3a2:	687b      	ldr	r3, [r7, #4]
 806c3a4:	4a21      	ldr	r2, [pc, #132]	@ (806c42c <TIM_OC2_SetConfig+0x120>)
 806c3a6:	4293      	cmp	r3, r2
 806c3a8:	d12f      	bne.n	806c40a <TIM_OC2_SetConfig+0xfe>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 806c3aa:	683b      	ldr	r3, [r7, #0]
 806c3ac:	699b      	ldr	r3, [r3, #24]
 806c3ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 806c3b2:	d008      	beq.n	806c3c6 <TIM_OC2_SetConfig+0xba>
 806c3b4:	683b      	ldr	r3, [r7, #0]
 806c3b6:	699b      	ldr	r3, [r3, #24]
 806c3b8:	2b00      	cmp	r3, #0
 806c3ba:	d004      	beq.n	806c3c6 <TIM_OC2_SetConfig+0xba>
 806c3bc:	f641 3129 	movw	r1, #6953	@ 0x1b29
 806c3c0:	481b      	ldr	r0, [pc, #108]	@ (806c430 <TIM_OC2_SetConfig+0x124>)
 806c3c2:	f7fa f840 	bl	8066446 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 806c3c6:	683b      	ldr	r3, [r7, #0]
 806c3c8:	695b      	ldr	r3, [r3, #20]
 806c3ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 806c3ce:	d008      	beq.n	806c3e2 <TIM_OC2_SetConfig+0xd6>
 806c3d0:	683b      	ldr	r3, [r7, #0]
 806c3d2:	695b      	ldr	r3, [r3, #20]
 806c3d4:	2b00      	cmp	r3, #0
 806c3d6:	d004      	beq.n	806c3e2 <TIM_OC2_SetConfig+0xd6>
 806c3d8:	f641 312a 	movw	r1, #6954	@ 0x1b2a
 806c3dc:	4814      	ldr	r0, [pc, #80]	@ (806c430 <TIM_OC2_SetConfig+0x124>)
 806c3de:	f7fa f832 	bl	8066446 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 806c3e2:	693b      	ldr	r3, [r7, #16]
 806c3e4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 806c3e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 806c3ea:	693b      	ldr	r3, [r7, #16]
 806c3ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 806c3f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 806c3f2:	683b      	ldr	r3, [r7, #0]
 806c3f4:	695b      	ldr	r3, [r3, #20]
 806c3f6:	009b      	lsls	r3, r3, #2
 806c3f8:	693a      	ldr	r2, [r7, #16]
 806c3fa:	4313      	orrs	r3, r2
 806c3fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 806c3fe:	683b      	ldr	r3, [r7, #0]
 806c400:	699b      	ldr	r3, [r3, #24]
 806c402:	009b      	lsls	r3, r3, #2
 806c404:	693a      	ldr	r2, [r7, #16]
 806c406:	4313      	orrs	r3, r2
 806c408:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 806c40a:	687b      	ldr	r3, [r7, #4]
 806c40c:	693a      	ldr	r2, [r7, #16]
 806c40e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 806c410:	687b      	ldr	r3, [r7, #4]
 806c412:	68fa      	ldr	r2, [r7, #12]
 806c414:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 806c416:	683b      	ldr	r3, [r7, #0]
 806c418:	685a      	ldr	r2, [r3, #4]
 806c41a:	687b      	ldr	r3, [r7, #4]
 806c41c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 806c41e:	687b      	ldr	r3, [r7, #4]
 806c420:	697a      	ldr	r2, [r7, #20]
 806c422:	621a      	str	r2, [r3, #32]
}
 806c424:	bf00      	nop
 806c426:	3718      	adds	r7, #24
 806c428:	46bd      	mov	sp, r7
 806c42a:	bd80      	pop	{r7, pc}
 806c42c:	40010000 	.word	0x40010000
 806c430:	08071840 	.word	0x08071840

0806c434 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 806c434:	b580      	push	{r7, lr}
 806c436:	b086      	sub	sp, #24
 806c438:	af00      	add	r7, sp, #0
 806c43a:	6078      	str	r0, [r7, #4]
 806c43c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 806c43e:	687b      	ldr	r3, [r7, #4]
 806c440:	6a1b      	ldr	r3, [r3, #32]
 806c442:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 806c444:	687b      	ldr	r3, [r7, #4]
 806c446:	6a1b      	ldr	r3, [r3, #32]
 806c448:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 806c44c:	687b      	ldr	r3, [r7, #4]
 806c44e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 806c450:	687b      	ldr	r3, [r7, #4]
 806c452:	685b      	ldr	r3, [r3, #4]
 806c454:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 806c456:	687b      	ldr	r3, [r7, #4]
 806c458:	69db      	ldr	r3, [r3, #28]
 806c45a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 806c45c:	68fb      	ldr	r3, [r7, #12]
 806c45e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 806c462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 806c464:	68fb      	ldr	r3, [r7, #12]
 806c466:	f023 0303 	bic.w	r3, r3, #3
 806c46a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 806c46c:	683b      	ldr	r3, [r7, #0]
 806c46e:	681b      	ldr	r3, [r3, #0]
 806c470:	68fa      	ldr	r2, [r7, #12]
 806c472:	4313      	orrs	r3, r2
 806c474:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 806c476:	697b      	ldr	r3, [r7, #20]
 806c478:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 806c47c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 806c47e:	683b      	ldr	r3, [r7, #0]
 806c480:	689b      	ldr	r3, [r3, #8]
 806c482:	021b      	lsls	r3, r3, #8
 806c484:	697a      	ldr	r2, [r7, #20]
 806c486:	4313      	orrs	r3, r2
 806c488:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 806c48a:	687b      	ldr	r3, [r7, #4]
 806c48c:	4a31      	ldr	r2, [pc, #196]	@ (806c554 <TIM_OC3_SetConfig+0x120>)
 806c48e:	4293      	cmp	r3, r2
 806c490:	d11a      	bne.n	806c4c8 <TIM_OC3_SetConfig+0x94>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 806c492:	683b      	ldr	r3, [r7, #0]
 806c494:	68db      	ldr	r3, [r3, #12]
 806c496:	2b00      	cmp	r3, #0
 806c498:	d008      	beq.n	806c4ac <TIM_OC3_SetConfig+0x78>
 806c49a:	683b      	ldr	r3, [r7, #0]
 806c49c:	68db      	ldr	r3, [r3, #12]
 806c49e:	2b08      	cmp	r3, #8
 806c4a0:	d004      	beq.n	806c4ac <TIM_OC3_SetConfig+0x78>
 806c4a2:	f641 3167 	movw	r1, #7015	@ 0x1b67
 806c4a6:	482c      	ldr	r0, [pc, #176]	@ (806c558 <TIM_OC3_SetConfig+0x124>)
 806c4a8:	f7f9 ffcd 	bl	8066446 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 806c4ac:	697b      	ldr	r3, [r7, #20]
 806c4ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 806c4b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 806c4b4:	683b      	ldr	r3, [r7, #0]
 806c4b6:	68db      	ldr	r3, [r3, #12]
 806c4b8:	021b      	lsls	r3, r3, #8
 806c4ba:	697a      	ldr	r2, [r7, #20]
 806c4bc:	4313      	orrs	r3, r2
 806c4be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 806c4c0:	697b      	ldr	r3, [r7, #20]
 806c4c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 806c4c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 806c4c8:	687b      	ldr	r3, [r7, #4]
 806c4ca:	4a22      	ldr	r2, [pc, #136]	@ (806c554 <TIM_OC3_SetConfig+0x120>)
 806c4cc:	4293      	cmp	r3, r2
 806c4ce:	d12f      	bne.n	806c530 <TIM_OC3_SetConfig+0xfc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 806c4d0:	683b      	ldr	r3, [r7, #0]
 806c4d2:	699b      	ldr	r3, [r3, #24]
 806c4d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 806c4d8:	d008      	beq.n	806c4ec <TIM_OC3_SetConfig+0xb8>
 806c4da:	683b      	ldr	r3, [r7, #0]
 806c4dc:	699b      	ldr	r3, [r3, #24]
 806c4de:	2b00      	cmp	r3, #0
 806c4e0:	d004      	beq.n	806c4ec <TIM_OC3_SetConfig+0xb8>
 806c4e2:	f641 3174 	movw	r1, #7028	@ 0x1b74
 806c4e6:	481c      	ldr	r0, [pc, #112]	@ (806c558 <TIM_OC3_SetConfig+0x124>)
 806c4e8:	f7f9 ffad 	bl	8066446 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 806c4ec:	683b      	ldr	r3, [r7, #0]
 806c4ee:	695b      	ldr	r3, [r3, #20]
 806c4f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 806c4f4:	d008      	beq.n	806c508 <TIM_OC3_SetConfig+0xd4>
 806c4f6:	683b      	ldr	r3, [r7, #0]
 806c4f8:	695b      	ldr	r3, [r3, #20]
 806c4fa:	2b00      	cmp	r3, #0
 806c4fc:	d004      	beq.n	806c508 <TIM_OC3_SetConfig+0xd4>
 806c4fe:	f641 3175 	movw	r1, #7029	@ 0x1b75
 806c502:	4815      	ldr	r0, [pc, #84]	@ (806c558 <TIM_OC3_SetConfig+0x124>)
 806c504:	f7f9 ff9f 	bl	8066446 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 806c508:	693b      	ldr	r3, [r7, #16]
 806c50a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 806c50e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 806c510:	693b      	ldr	r3, [r7, #16]
 806c512:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 806c516:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 806c518:	683b      	ldr	r3, [r7, #0]
 806c51a:	695b      	ldr	r3, [r3, #20]
 806c51c:	011b      	lsls	r3, r3, #4
 806c51e:	693a      	ldr	r2, [r7, #16]
 806c520:	4313      	orrs	r3, r2
 806c522:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 806c524:	683b      	ldr	r3, [r7, #0]
 806c526:	699b      	ldr	r3, [r3, #24]
 806c528:	011b      	lsls	r3, r3, #4
 806c52a:	693a      	ldr	r2, [r7, #16]
 806c52c:	4313      	orrs	r3, r2
 806c52e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 806c530:	687b      	ldr	r3, [r7, #4]
 806c532:	693a      	ldr	r2, [r7, #16]
 806c534:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 806c536:	687b      	ldr	r3, [r7, #4]
 806c538:	68fa      	ldr	r2, [r7, #12]
 806c53a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 806c53c:	683b      	ldr	r3, [r7, #0]
 806c53e:	685a      	ldr	r2, [r3, #4]
 806c540:	687b      	ldr	r3, [r7, #4]
 806c542:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 806c544:	687b      	ldr	r3, [r7, #4]
 806c546:	697a      	ldr	r2, [r7, #20]
 806c548:	621a      	str	r2, [r3, #32]
}
 806c54a:	bf00      	nop
 806c54c:	3718      	adds	r7, #24
 806c54e:	46bd      	mov	sp, r7
 806c550:	bd80      	pop	{r7, pc}
 806c552:	bf00      	nop
 806c554:	40010000 	.word	0x40010000
 806c558:	08071840 	.word	0x08071840

0806c55c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 806c55c:	b580      	push	{r7, lr}
 806c55e:	b086      	sub	sp, #24
 806c560:	af00      	add	r7, sp, #0
 806c562:	6078      	str	r0, [r7, #4]
 806c564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 806c566:	687b      	ldr	r3, [r7, #4]
 806c568:	6a1b      	ldr	r3, [r3, #32]
 806c56a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 806c56c:	687b      	ldr	r3, [r7, #4]
 806c56e:	6a1b      	ldr	r3, [r3, #32]
 806c570:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 806c574:	687b      	ldr	r3, [r7, #4]
 806c576:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 806c578:	687b      	ldr	r3, [r7, #4]
 806c57a:	685b      	ldr	r3, [r3, #4]
 806c57c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 806c57e:	687b      	ldr	r3, [r7, #4]
 806c580:	69db      	ldr	r3, [r3, #28]
 806c582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 806c584:	68fb      	ldr	r3, [r7, #12]
 806c586:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 806c58a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 806c58c:	68fb      	ldr	r3, [r7, #12]
 806c58e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 806c592:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 806c594:	683b      	ldr	r3, [r7, #0]
 806c596:	681b      	ldr	r3, [r3, #0]
 806c598:	021b      	lsls	r3, r3, #8
 806c59a:	68fa      	ldr	r2, [r7, #12]
 806c59c:	4313      	orrs	r3, r2
 806c59e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 806c5a0:	693b      	ldr	r3, [r7, #16]
 806c5a2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 806c5a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 806c5a8:	683b      	ldr	r3, [r7, #0]
 806c5aa:	689b      	ldr	r3, [r3, #8]
 806c5ac:	031b      	lsls	r3, r3, #12
 806c5ae:	693a      	ldr	r2, [r7, #16]
 806c5b0:	4313      	orrs	r3, r2
 806c5b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 806c5b4:	687b      	ldr	r3, [r7, #4]
 806c5b6:	4a16      	ldr	r2, [pc, #88]	@ (806c610 <TIM_OC4_SetConfig+0xb4>)
 806c5b8:	4293      	cmp	r3, r2
 806c5ba:	d117      	bne.n	806c5ec <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 806c5bc:	683b      	ldr	r3, [r7, #0]
 806c5be:	695b      	ldr	r3, [r3, #20]
 806c5c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 806c5c4:	d008      	beq.n	806c5d8 <TIM_OC4_SetConfig+0x7c>
 806c5c6:	683b      	ldr	r3, [r7, #0]
 806c5c8:	695b      	ldr	r3, [r3, #20]
 806c5ca:	2b00      	cmp	r3, #0
 806c5cc:	d004      	beq.n	806c5d8 <TIM_OC4_SetConfig+0x7c>
 806c5ce:	f641 31b4 	movw	r1, #7092	@ 0x1bb4
 806c5d2:	4810      	ldr	r0, [pc, #64]	@ (806c614 <TIM_OC4_SetConfig+0xb8>)
 806c5d4:	f7f9 ff37 	bl	8066446 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 806c5d8:	697b      	ldr	r3, [r7, #20]
 806c5da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 806c5de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 806c5e0:	683b      	ldr	r3, [r7, #0]
 806c5e2:	695b      	ldr	r3, [r3, #20]
 806c5e4:	019b      	lsls	r3, r3, #6
 806c5e6:	697a      	ldr	r2, [r7, #20]
 806c5e8:	4313      	orrs	r3, r2
 806c5ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 806c5ec:	687b      	ldr	r3, [r7, #4]
 806c5ee:	697a      	ldr	r2, [r7, #20]
 806c5f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 806c5f2:	687b      	ldr	r3, [r7, #4]
 806c5f4:	68fa      	ldr	r2, [r7, #12]
 806c5f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 806c5f8:	683b      	ldr	r3, [r7, #0]
 806c5fa:	685a      	ldr	r2, [r3, #4]
 806c5fc:	687b      	ldr	r3, [r7, #4]
 806c5fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 806c600:	687b      	ldr	r3, [r7, #4]
 806c602:	693a      	ldr	r2, [r7, #16]
 806c604:	621a      	str	r2, [r3, #32]
}
 806c606:	bf00      	nop
 806c608:	3718      	adds	r7, #24
 806c60a:	46bd      	mov	sp, r7
 806c60c:	bd80      	pop	{r7, pc}
 806c60e:	bf00      	nop
 806c610:	40010000 	.word	0x40010000
 806c614:	08071840 	.word	0x08071840

0806c618 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 806c618:	b480      	push	{r7}
 806c61a:	b087      	sub	sp, #28
 806c61c:	af00      	add	r7, sp, #0
 806c61e:	60f8      	str	r0, [r7, #12]
 806c620:	60b9      	str	r1, [r7, #8]
 806c622:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 806c624:	68fb      	ldr	r3, [r7, #12]
 806c626:	6a1b      	ldr	r3, [r3, #32]
 806c628:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 806c62a:	68fb      	ldr	r3, [r7, #12]
 806c62c:	6a1b      	ldr	r3, [r3, #32]
 806c62e:	f023 0201 	bic.w	r2, r3, #1
 806c632:	68fb      	ldr	r3, [r7, #12]
 806c634:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 806c636:	68fb      	ldr	r3, [r7, #12]
 806c638:	699b      	ldr	r3, [r3, #24]
 806c63a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 806c63c:	693b      	ldr	r3, [r7, #16]
 806c63e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 806c642:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 806c644:	687b      	ldr	r3, [r7, #4]
 806c646:	011b      	lsls	r3, r3, #4
 806c648:	693a      	ldr	r2, [r7, #16]
 806c64a:	4313      	orrs	r3, r2
 806c64c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 806c64e:	697b      	ldr	r3, [r7, #20]
 806c650:	f023 030a 	bic.w	r3, r3, #10
 806c654:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 806c656:	697a      	ldr	r2, [r7, #20]
 806c658:	68bb      	ldr	r3, [r7, #8]
 806c65a:	4313      	orrs	r3, r2
 806c65c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 806c65e:	68fb      	ldr	r3, [r7, #12]
 806c660:	693a      	ldr	r2, [r7, #16]
 806c662:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 806c664:	68fb      	ldr	r3, [r7, #12]
 806c666:	697a      	ldr	r2, [r7, #20]
 806c668:	621a      	str	r2, [r3, #32]
}
 806c66a:	bf00      	nop
 806c66c:	371c      	adds	r7, #28
 806c66e:	46bd      	mov	sp, r7
 806c670:	f85d 7b04 	ldr.w	r7, [sp], #4
 806c674:	4770      	bx	lr

0806c676 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 806c676:	b480      	push	{r7}
 806c678:	b087      	sub	sp, #28
 806c67a:	af00      	add	r7, sp, #0
 806c67c:	60f8      	str	r0, [r7, #12]
 806c67e:	60b9      	str	r1, [r7, #8]
 806c680:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 806c682:	68fb      	ldr	r3, [r7, #12]
 806c684:	6a1b      	ldr	r3, [r3, #32]
 806c686:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 806c688:	68fb      	ldr	r3, [r7, #12]
 806c68a:	6a1b      	ldr	r3, [r3, #32]
 806c68c:	f023 0210 	bic.w	r2, r3, #16
 806c690:	68fb      	ldr	r3, [r7, #12]
 806c692:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 806c694:	68fb      	ldr	r3, [r7, #12]
 806c696:	699b      	ldr	r3, [r3, #24]
 806c698:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 806c69a:	693b      	ldr	r3, [r7, #16]
 806c69c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 806c6a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 806c6a2:	687b      	ldr	r3, [r7, #4]
 806c6a4:	031b      	lsls	r3, r3, #12
 806c6a6:	693a      	ldr	r2, [r7, #16]
 806c6a8:	4313      	orrs	r3, r2
 806c6aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 806c6ac:	697b      	ldr	r3, [r7, #20]
 806c6ae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 806c6b2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 806c6b4:	68bb      	ldr	r3, [r7, #8]
 806c6b6:	011b      	lsls	r3, r3, #4
 806c6b8:	697a      	ldr	r2, [r7, #20]
 806c6ba:	4313      	orrs	r3, r2
 806c6bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 806c6be:	68fb      	ldr	r3, [r7, #12]
 806c6c0:	693a      	ldr	r2, [r7, #16]
 806c6c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 806c6c4:	68fb      	ldr	r3, [r7, #12]
 806c6c6:	697a      	ldr	r2, [r7, #20]
 806c6c8:	621a      	str	r2, [r3, #32]
}
 806c6ca:	bf00      	nop
 806c6cc:	371c      	adds	r7, #28
 806c6ce:	46bd      	mov	sp, r7
 806c6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 806c6d4:	4770      	bx	lr

0806c6d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 806c6d6:	b480      	push	{r7}
 806c6d8:	b085      	sub	sp, #20
 806c6da:	af00      	add	r7, sp, #0
 806c6dc:	6078      	str	r0, [r7, #4]
 806c6de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 806c6e0:	687b      	ldr	r3, [r7, #4]
 806c6e2:	689b      	ldr	r3, [r3, #8]
 806c6e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 806c6e6:	68fb      	ldr	r3, [r7, #12]
 806c6e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 806c6ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 806c6ee:	683a      	ldr	r2, [r7, #0]
 806c6f0:	68fb      	ldr	r3, [r7, #12]
 806c6f2:	4313      	orrs	r3, r2
 806c6f4:	f043 0307 	orr.w	r3, r3, #7
 806c6f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 806c6fa:	687b      	ldr	r3, [r7, #4]
 806c6fc:	68fa      	ldr	r2, [r7, #12]
 806c6fe:	609a      	str	r2, [r3, #8]
}
 806c700:	bf00      	nop
 806c702:	3714      	adds	r7, #20
 806c704:	46bd      	mov	sp, r7
 806c706:	f85d 7b04 	ldr.w	r7, [sp], #4
 806c70a:	4770      	bx	lr

0806c70c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 806c70c:	b480      	push	{r7}
 806c70e:	b087      	sub	sp, #28
 806c710:	af00      	add	r7, sp, #0
 806c712:	60f8      	str	r0, [r7, #12]
 806c714:	60b9      	str	r1, [r7, #8]
 806c716:	607a      	str	r2, [r7, #4]
 806c718:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 806c71a:	68fb      	ldr	r3, [r7, #12]
 806c71c:	689b      	ldr	r3, [r3, #8]
 806c71e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 806c720:	697b      	ldr	r3, [r7, #20]
 806c722:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 806c726:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 806c728:	683b      	ldr	r3, [r7, #0]
 806c72a:	021a      	lsls	r2, r3, #8
 806c72c:	687b      	ldr	r3, [r7, #4]
 806c72e:	431a      	orrs	r2, r3
 806c730:	68bb      	ldr	r3, [r7, #8]
 806c732:	4313      	orrs	r3, r2
 806c734:	697a      	ldr	r2, [r7, #20]
 806c736:	4313      	orrs	r3, r2
 806c738:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 806c73a:	68fb      	ldr	r3, [r7, #12]
 806c73c:	697a      	ldr	r2, [r7, #20]
 806c73e:	609a      	str	r2, [r3, #8]
}
 806c740:	bf00      	nop
 806c742:	371c      	adds	r7, #28
 806c744:	46bd      	mov	sp, r7
 806c746:	f85d 7b04 	ldr.w	r7, [sp], #4
 806c74a:	4770      	bx	lr

0806c74c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 806c74c:	b580      	push	{r7, lr}
 806c74e:	b086      	sub	sp, #24
 806c750:	af00      	add	r7, sp, #0
 806c752:	60f8      	str	r0, [r7, #12]
 806c754:	60b9      	str	r1, [r7, #8]
 806c756:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 806c758:	68fb      	ldr	r3, [r7, #12]
 806c75a:	4a2a      	ldr	r2, [pc, #168]	@ (806c804 <TIM_CCxChannelCmd+0xb8>)
 806c75c:	4293      	cmp	r3, r2
 806c75e:	d020      	beq.n	806c7a2 <TIM_CCxChannelCmd+0x56>
 806c760:	68fb      	ldr	r3, [r7, #12]
 806c762:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 806c766:	d01c      	beq.n	806c7a2 <TIM_CCxChannelCmd+0x56>
 806c768:	68fb      	ldr	r3, [r7, #12]
 806c76a:	4a27      	ldr	r2, [pc, #156]	@ (806c808 <TIM_CCxChannelCmd+0xbc>)
 806c76c:	4293      	cmp	r3, r2
 806c76e:	d018      	beq.n	806c7a2 <TIM_CCxChannelCmd+0x56>
 806c770:	68fb      	ldr	r3, [r7, #12]
 806c772:	4a26      	ldr	r2, [pc, #152]	@ (806c80c <TIM_CCxChannelCmd+0xc0>)
 806c774:	4293      	cmp	r3, r2
 806c776:	d014      	beq.n	806c7a2 <TIM_CCxChannelCmd+0x56>
 806c778:	68fb      	ldr	r3, [r7, #12]
 806c77a:	4a25      	ldr	r2, [pc, #148]	@ (806c810 <TIM_CCxChannelCmd+0xc4>)
 806c77c:	4293      	cmp	r3, r2
 806c77e:	d010      	beq.n	806c7a2 <TIM_CCxChannelCmd+0x56>
 806c780:	68fb      	ldr	r3, [r7, #12]
 806c782:	4a24      	ldr	r2, [pc, #144]	@ (806c814 <TIM_CCxChannelCmd+0xc8>)
 806c784:	4293      	cmp	r3, r2
 806c786:	d00c      	beq.n	806c7a2 <TIM_CCxChannelCmd+0x56>
 806c788:	68fb      	ldr	r3, [r7, #12]
 806c78a:	4a23      	ldr	r2, [pc, #140]	@ (806c818 <TIM_CCxChannelCmd+0xcc>)
 806c78c:	4293      	cmp	r3, r2
 806c78e:	d008      	beq.n	806c7a2 <TIM_CCxChannelCmd+0x56>
 806c790:	68fb      	ldr	r3, [r7, #12]
 806c792:	4a22      	ldr	r2, [pc, #136]	@ (806c81c <TIM_CCxChannelCmd+0xd0>)
 806c794:	4293      	cmp	r3, r2
 806c796:	d004      	beq.n	806c7a2 <TIM_CCxChannelCmd+0x56>
 806c798:	f641 519f 	movw	r1, #7583	@ 0x1d9f
 806c79c:	4820      	ldr	r0, [pc, #128]	@ (806c820 <TIM_CCxChannelCmd+0xd4>)
 806c79e:	f7f9 fe52 	bl	8066446 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 806c7a2:	68bb      	ldr	r3, [r7, #8]
 806c7a4:	2b00      	cmp	r3, #0
 806c7a6:	d010      	beq.n	806c7ca <TIM_CCxChannelCmd+0x7e>
 806c7a8:	68bb      	ldr	r3, [r7, #8]
 806c7aa:	2b04      	cmp	r3, #4
 806c7ac:	d00d      	beq.n	806c7ca <TIM_CCxChannelCmd+0x7e>
 806c7ae:	68bb      	ldr	r3, [r7, #8]
 806c7b0:	2b08      	cmp	r3, #8
 806c7b2:	d00a      	beq.n	806c7ca <TIM_CCxChannelCmd+0x7e>
 806c7b4:	68bb      	ldr	r3, [r7, #8]
 806c7b6:	2b0c      	cmp	r3, #12
 806c7b8:	d007      	beq.n	806c7ca <TIM_CCxChannelCmd+0x7e>
 806c7ba:	68bb      	ldr	r3, [r7, #8]
 806c7bc:	2b3c      	cmp	r3, #60	@ 0x3c
 806c7be:	d004      	beq.n	806c7ca <TIM_CCxChannelCmd+0x7e>
 806c7c0:	f44f 51ed 	mov.w	r1, #7584	@ 0x1da0
 806c7c4:	4816      	ldr	r0, [pc, #88]	@ (806c820 <TIM_CCxChannelCmd+0xd4>)
 806c7c6:	f7f9 fe3e 	bl	8066446 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 806c7ca:	68bb      	ldr	r3, [r7, #8]
 806c7cc:	f003 031f 	and.w	r3, r3, #31
 806c7d0:	2201      	movs	r2, #1
 806c7d2:	fa02 f303 	lsl.w	r3, r2, r3
 806c7d6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 806c7d8:	68fb      	ldr	r3, [r7, #12]
 806c7da:	6a1a      	ldr	r2, [r3, #32]
 806c7dc:	697b      	ldr	r3, [r7, #20]
 806c7de:	43db      	mvns	r3, r3
 806c7e0:	401a      	ands	r2, r3
 806c7e2:	68fb      	ldr	r3, [r7, #12]
 806c7e4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 806c7e6:	68fb      	ldr	r3, [r7, #12]
 806c7e8:	6a1a      	ldr	r2, [r3, #32]
 806c7ea:	68bb      	ldr	r3, [r7, #8]
 806c7ec:	f003 031f 	and.w	r3, r3, #31
 806c7f0:	6879      	ldr	r1, [r7, #4]
 806c7f2:	fa01 f303 	lsl.w	r3, r1, r3
 806c7f6:	431a      	orrs	r2, r3
 806c7f8:	68fb      	ldr	r3, [r7, #12]
 806c7fa:	621a      	str	r2, [r3, #32]
}
 806c7fc:	bf00      	nop
 806c7fe:	3718      	adds	r7, #24
 806c800:	46bd      	mov	sp, r7
 806c802:	bd80      	pop	{r7, pc}
 806c804:	40010000 	.word	0x40010000
 806c808:	40000400 	.word	0x40000400
 806c80c:	40000800 	.word	0x40000800
 806c810:	40000c00 	.word	0x40000c00
 806c814:	40014000 	.word	0x40014000
 806c818:	40014400 	.word	0x40014400
 806c81c:	40014800 	.word	0x40014800
 806c820:	08071840 	.word	0x08071840

0806c824 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 806c824:	b480      	push	{r7}
 806c826:	b083      	sub	sp, #12
 806c828:	af00      	add	r7, sp, #0
 806c82a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 806c82c:	687b      	ldr	r3, [r7, #4]
 806c82e:	4a1c      	ldr	r2, [pc, #112]	@ (806c8a0 <TIM_ResetCallback+0x7c>)
 806c830:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 806c834:	687b      	ldr	r3, [r7, #4]
 806c836:	4a1b      	ldr	r2, [pc, #108]	@ (806c8a4 <TIM_ResetCallback+0x80>)
 806c838:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 806c83c:	687b      	ldr	r3, [r7, #4]
 806c83e:	4a1a      	ldr	r2, [pc, #104]	@ (806c8a8 <TIM_ResetCallback+0x84>)
 806c840:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 806c844:	687b      	ldr	r3, [r7, #4]
 806c846:	4a19      	ldr	r2, [pc, #100]	@ (806c8ac <TIM_ResetCallback+0x88>)
 806c848:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 806c84c:	687b      	ldr	r3, [r7, #4]
 806c84e:	4a18      	ldr	r2, [pc, #96]	@ (806c8b0 <TIM_ResetCallback+0x8c>)
 806c850:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 806c854:	687b      	ldr	r3, [r7, #4]
 806c856:	4a17      	ldr	r2, [pc, #92]	@ (806c8b4 <TIM_ResetCallback+0x90>)
 806c858:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 806c85c:	687b      	ldr	r3, [r7, #4]
 806c85e:	4a16      	ldr	r2, [pc, #88]	@ (806c8b8 <TIM_ResetCallback+0x94>)
 806c860:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 806c864:	687b      	ldr	r3, [r7, #4]
 806c866:	4a15      	ldr	r2, [pc, #84]	@ (806c8bc <TIM_ResetCallback+0x98>)
 806c868:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 806c86c:	687b      	ldr	r3, [r7, #4]
 806c86e:	4a14      	ldr	r2, [pc, #80]	@ (806c8c0 <TIM_ResetCallback+0x9c>)
 806c870:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 806c874:	687b      	ldr	r3, [r7, #4]
 806c876:	4a13      	ldr	r2, [pc, #76]	@ (806c8c4 <TIM_ResetCallback+0xa0>)
 806c878:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 806c87c:	687b      	ldr	r3, [r7, #4]
 806c87e:	4a12      	ldr	r2, [pc, #72]	@ (806c8c8 <TIM_ResetCallback+0xa4>)
 806c880:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 806c884:	687b      	ldr	r3, [r7, #4]
 806c886:	4a11      	ldr	r2, [pc, #68]	@ (806c8cc <TIM_ResetCallback+0xa8>)
 806c888:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 806c88c:	687b      	ldr	r3, [r7, #4]
 806c88e:	4a10      	ldr	r2, [pc, #64]	@ (806c8d0 <TIM_ResetCallback+0xac>)
 806c890:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 806c894:	bf00      	nop
 806c896:	370c      	adds	r7, #12
 806c898:	46bd      	mov	sp, r7
 806c89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 806c89e:	4770      	bx	lr
 806c8a0:	08066415 	.word	0x08066415
 806c8a4:	0806c005 	.word	0x0806c005
 806c8a8:	0806c07d 	.word	0x0806c07d
 806c8ac:	0806c091 	.word	0x0806c091
 806c8b0:	0806c02d 	.word	0x0806c02d
 806c8b4:	0806c041 	.word	0x0806c041
 806c8b8:	0806c019 	.word	0x0806c019
 806c8bc:	0806c055 	.word	0x0806c055
 806c8c0:	0806c069 	.word	0x0806c069
 806c8c4:	0806c0a5 	.word	0x0806c0a5
 806c8c8:	0806ca51 	.word	0x0806ca51
 806c8cc:	0806ca65 	.word	0x0806ca65
 806c8d0:	0806ca79 	.word	0x0806ca79

0806c8d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 806c8d4:	b580      	push	{r7, lr}
 806c8d6:	b084      	sub	sp, #16
 806c8d8:	af00      	add	r7, sp, #0
 806c8da:	6078      	str	r0, [r7, #4]
 806c8dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 806c8de:	687b      	ldr	r3, [r7, #4]
 806c8e0:	681b      	ldr	r3, [r3, #0]
 806c8e2:	4a55      	ldr	r2, [pc, #340]	@ (806ca38 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 806c8e4:	4293      	cmp	r3, r2
 806c8e6:	d018      	beq.n	806c91a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 806c8e8:	687b      	ldr	r3, [r7, #4]
 806c8ea:	681b      	ldr	r3, [r3, #0]
 806c8ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 806c8f0:	d013      	beq.n	806c91a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 806c8f2:	687b      	ldr	r3, [r7, #4]
 806c8f4:	681b      	ldr	r3, [r3, #0]
 806c8f6:	4a51      	ldr	r2, [pc, #324]	@ (806ca3c <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 806c8f8:	4293      	cmp	r3, r2
 806c8fa:	d00e      	beq.n	806c91a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 806c8fc:	687b      	ldr	r3, [r7, #4]
 806c8fe:	681b      	ldr	r3, [r3, #0]
 806c900:	4a4f      	ldr	r2, [pc, #316]	@ (806ca40 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 806c902:	4293      	cmp	r3, r2
 806c904:	d009      	beq.n	806c91a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 806c906:	687b      	ldr	r3, [r7, #4]
 806c908:	681b      	ldr	r3, [r3, #0]
 806c90a:	4a4e      	ldr	r2, [pc, #312]	@ (806ca44 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 806c90c:	4293      	cmp	r3, r2
 806c90e:	d004      	beq.n	806c91a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 806c910:	f240 71a9 	movw	r1, #1961	@ 0x7a9
 806c914:	484c      	ldr	r0, [pc, #304]	@ (806ca48 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 806c916:	f7f9 fd96 	bl	8066446 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 806c91a:	683b      	ldr	r3, [r7, #0]
 806c91c:	681b      	ldr	r3, [r3, #0]
 806c91e:	2b00      	cmp	r3, #0
 806c920:	d020      	beq.n	806c964 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 806c922:	683b      	ldr	r3, [r7, #0]
 806c924:	681b      	ldr	r3, [r3, #0]
 806c926:	2b10      	cmp	r3, #16
 806c928:	d01c      	beq.n	806c964 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 806c92a:	683b      	ldr	r3, [r7, #0]
 806c92c:	681b      	ldr	r3, [r3, #0]
 806c92e:	2b20      	cmp	r3, #32
 806c930:	d018      	beq.n	806c964 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 806c932:	683b      	ldr	r3, [r7, #0]
 806c934:	681b      	ldr	r3, [r3, #0]
 806c936:	2b30      	cmp	r3, #48	@ 0x30
 806c938:	d014      	beq.n	806c964 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 806c93a:	683b      	ldr	r3, [r7, #0]
 806c93c:	681b      	ldr	r3, [r3, #0]
 806c93e:	2b40      	cmp	r3, #64	@ 0x40
 806c940:	d010      	beq.n	806c964 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 806c942:	683b      	ldr	r3, [r7, #0]
 806c944:	681b      	ldr	r3, [r3, #0]
 806c946:	2b50      	cmp	r3, #80	@ 0x50
 806c948:	d00c      	beq.n	806c964 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 806c94a:	683b      	ldr	r3, [r7, #0]
 806c94c:	681b      	ldr	r3, [r3, #0]
 806c94e:	2b60      	cmp	r3, #96	@ 0x60
 806c950:	d008      	beq.n	806c964 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 806c952:	683b      	ldr	r3, [r7, #0]
 806c954:	681b      	ldr	r3, [r3, #0]
 806c956:	2b70      	cmp	r3, #112	@ 0x70
 806c958:	d004      	beq.n	806c964 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 806c95a:	f240 71aa 	movw	r1, #1962	@ 0x7aa
 806c95e:	483a      	ldr	r0, [pc, #232]	@ (806ca48 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 806c960:	f7f9 fd71 	bl	8066446 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 806c964:	683b      	ldr	r3, [r7, #0]
 806c966:	685b      	ldr	r3, [r3, #4]
 806c968:	2b80      	cmp	r3, #128	@ 0x80
 806c96a:	d008      	beq.n	806c97e <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 806c96c:	683b      	ldr	r3, [r7, #0]
 806c96e:	685b      	ldr	r3, [r3, #4]
 806c970:	2b00      	cmp	r3, #0
 806c972:	d004      	beq.n	806c97e <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 806c974:	f240 71ab 	movw	r1, #1963	@ 0x7ab
 806c978:	4833      	ldr	r0, [pc, #204]	@ (806ca48 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 806c97a:	f7f9 fd64 	bl	8066446 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 806c97e:	687b      	ldr	r3, [r7, #4]
 806c980:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 806c984:	2b01      	cmp	r3, #1
 806c986:	d101      	bne.n	806c98c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 806c988:	2302      	movs	r3, #2
 806c98a:	e050      	b.n	806ca2e <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 806c98c:	687b      	ldr	r3, [r7, #4]
 806c98e:	2201      	movs	r2, #1
 806c990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 806c994:	687b      	ldr	r3, [r7, #4]
 806c996:	2202      	movs	r2, #2
 806c998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 806c99c:	687b      	ldr	r3, [r7, #4]
 806c99e:	681b      	ldr	r3, [r3, #0]
 806c9a0:	685b      	ldr	r3, [r3, #4]
 806c9a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 806c9a4:	687b      	ldr	r3, [r7, #4]
 806c9a6:	681b      	ldr	r3, [r3, #0]
 806c9a8:	689b      	ldr	r3, [r3, #8]
 806c9aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 806c9ac:	68fb      	ldr	r3, [r7, #12]
 806c9ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 806c9b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 806c9b4:	683b      	ldr	r3, [r7, #0]
 806c9b6:	681b      	ldr	r3, [r3, #0]
 806c9b8:	68fa      	ldr	r2, [r7, #12]
 806c9ba:	4313      	orrs	r3, r2
 806c9bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 806c9be:	687b      	ldr	r3, [r7, #4]
 806c9c0:	681b      	ldr	r3, [r3, #0]
 806c9c2:	68fa      	ldr	r2, [r7, #12]
 806c9c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 806c9c6:	687b      	ldr	r3, [r7, #4]
 806c9c8:	681b      	ldr	r3, [r3, #0]
 806c9ca:	4a1b      	ldr	r2, [pc, #108]	@ (806ca38 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 806c9cc:	4293      	cmp	r3, r2
 806c9ce:	d018      	beq.n	806ca02 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 806c9d0:	687b      	ldr	r3, [r7, #4]
 806c9d2:	681b      	ldr	r3, [r3, #0]
 806c9d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 806c9d8:	d013      	beq.n	806ca02 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 806c9da:	687b      	ldr	r3, [r7, #4]
 806c9dc:	681b      	ldr	r3, [r3, #0]
 806c9de:	4a17      	ldr	r2, [pc, #92]	@ (806ca3c <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 806c9e0:	4293      	cmp	r3, r2
 806c9e2:	d00e      	beq.n	806ca02 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 806c9e4:	687b      	ldr	r3, [r7, #4]
 806c9e6:	681b      	ldr	r3, [r3, #0]
 806c9e8:	4a15      	ldr	r2, [pc, #84]	@ (806ca40 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 806c9ea:	4293      	cmp	r3, r2
 806c9ec:	d009      	beq.n	806ca02 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 806c9ee:	687b      	ldr	r3, [r7, #4]
 806c9f0:	681b      	ldr	r3, [r3, #0]
 806c9f2:	4a14      	ldr	r2, [pc, #80]	@ (806ca44 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 806c9f4:	4293      	cmp	r3, r2
 806c9f6:	d004      	beq.n	806ca02 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 806c9f8:	687b      	ldr	r3, [r7, #4]
 806c9fa:	681b      	ldr	r3, [r3, #0]
 806c9fc:	4a13      	ldr	r2, [pc, #76]	@ (806ca4c <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 806c9fe:	4293      	cmp	r3, r2
 806ca00:	d10c      	bne.n	806ca1c <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 806ca02:	68bb      	ldr	r3, [r7, #8]
 806ca04:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 806ca08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 806ca0a:	683b      	ldr	r3, [r7, #0]
 806ca0c:	685b      	ldr	r3, [r3, #4]
 806ca0e:	68ba      	ldr	r2, [r7, #8]
 806ca10:	4313      	orrs	r3, r2
 806ca12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 806ca14:	687b      	ldr	r3, [r7, #4]
 806ca16:	681b      	ldr	r3, [r3, #0]
 806ca18:	68ba      	ldr	r2, [r7, #8]
 806ca1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 806ca1c:	687b      	ldr	r3, [r7, #4]
 806ca1e:	2201      	movs	r2, #1
 806ca20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 806ca24:	687b      	ldr	r3, [r7, #4]
 806ca26:	2200      	movs	r2, #0
 806ca28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 806ca2c:	2300      	movs	r3, #0
}
 806ca2e:	4618      	mov	r0, r3
 806ca30:	3710      	adds	r7, #16
 806ca32:	46bd      	mov	sp, r7
 806ca34:	bd80      	pop	{r7, pc}
 806ca36:	bf00      	nop
 806ca38:	40010000 	.word	0x40010000
 806ca3c:	40000400 	.word	0x40000400
 806ca40:	40000800 	.word	0x40000800
 806ca44:	40000c00 	.word	0x40000c00
 806ca48:	080718b4 	.word	0x080718b4
 806ca4c:	40014000 	.word	0x40014000

0806ca50 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 806ca50:	b480      	push	{r7}
 806ca52:	b083      	sub	sp, #12
 806ca54:	af00      	add	r7, sp, #0
 806ca56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 806ca58:	bf00      	nop
 806ca5a:	370c      	adds	r7, #12
 806ca5c:	46bd      	mov	sp, r7
 806ca5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 806ca62:	4770      	bx	lr

0806ca64 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 806ca64:	b480      	push	{r7}
 806ca66:	b083      	sub	sp, #12
 806ca68:	af00      	add	r7, sp, #0
 806ca6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 806ca6c:	bf00      	nop
 806ca6e:	370c      	adds	r7, #12
 806ca70:	46bd      	mov	sp, r7
 806ca72:	f85d 7b04 	ldr.w	r7, [sp], #4
 806ca76:	4770      	bx	lr

0806ca78 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 806ca78:	b480      	push	{r7}
 806ca7a:	b083      	sub	sp, #12
 806ca7c:	af00      	add	r7, sp, #0
 806ca7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 806ca80:	bf00      	nop
 806ca82:	370c      	adds	r7, #12
 806ca84:	46bd      	mov	sp, r7
 806ca86:	f85d 7b04 	ldr.w	r7, [sp], #4
 806ca8a:	4770      	bx	lr

0806ca8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 806ca8c:	b580      	push	{r7, lr}
 806ca8e:	b082      	sub	sp, #8
 806ca90:	af00      	add	r7, sp, #0
 806ca92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 806ca94:	687b      	ldr	r3, [r7, #4]
 806ca96:	2b00      	cmp	r3, #0
 806ca98:	d101      	bne.n	806ca9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 806ca9a:	2301      	movs	r3, #1
 806ca9c:	e0ae      	b.n	806cbfc <HAL_UART_Init+0x170>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 806ca9e:	687b      	ldr	r3, [r7, #4]
 806caa0:	699b      	ldr	r3, [r3, #24]
 806caa2:	2b00      	cmp	r3, #0
 806caa4:	d02c      	beq.n	806cb00 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 806caa6:	687b      	ldr	r3, [r7, #4]
 806caa8:	681b      	ldr	r3, [r3, #0]
 806caaa:	4a56      	ldr	r2, [pc, #344]	@ (806cc04 <HAL_UART_Init+0x178>)
 806caac:	4293      	cmp	r3, r2
 806caae:	d00e      	beq.n	806cace <HAL_UART_Init+0x42>
 806cab0:	687b      	ldr	r3, [r7, #4]
 806cab2:	681b      	ldr	r3, [r3, #0]
 806cab4:	4a54      	ldr	r2, [pc, #336]	@ (806cc08 <HAL_UART_Init+0x17c>)
 806cab6:	4293      	cmp	r3, r2
 806cab8:	d009      	beq.n	806cace <HAL_UART_Init+0x42>
 806caba:	687b      	ldr	r3, [r7, #4]
 806cabc:	681b      	ldr	r3, [r3, #0]
 806cabe:	4a53      	ldr	r2, [pc, #332]	@ (806cc0c <HAL_UART_Init+0x180>)
 806cac0:	4293      	cmp	r3, r2
 806cac2:	d004      	beq.n	806cace <HAL_UART_Init+0x42>
 806cac4:	f240 1173 	movw	r1, #371	@ 0x173
 806cac8:	4851      	ldr	r0, [pc, #324]	@ (806cc10 <HAL_UART_Init+0x184>)
 806caca:	f7f9 fcbc 	bl	8066446 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 806cace:	687b      	ldr	r3, [r7, #4]
 806cad0:	699b      	ldr	r3, [r3, #24]
 806cad2:	2b00      	cmp	r3, #0
 806cad4:	d028      	beq.n	806cb28 <HAL_UART_Init+0x9c>
 806cad6:	687b      	ldr	r3, [r7, #4]
 806cad8:	699b      	ldr	r3, [r3, #24]
 806cada:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 806cade:	d023      	beq.n	806cb28 <HAL_UART_Init+0x9c>
 806cae0:	687b      	ldr	r3, [r7, #4]
 806cae2:	699b      	ldr	r3, [r3, #24]
 806cae4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 806cae8:	d01e      	beq.n	806cb28 <HAL_UART_Init+0x9c>
 806caea:	687b      	ldr	r3, [r7, #4]
 806caec:	699b      	ldr	r3, [r3, #24]
 806caee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 806caf2:	d019      	beq.n	806cb28 <HAL_UART_Init+0x9c>
 806caf4:	f44f 71ba 	mov.w	r1, #372	@ 0x174
 806caf8:	4845      	ldr	r0, [pc, #276]	@ (806cc10 <HAL_UART_Init+0x184>)
 806cafa:	f7f9 fca4 	bl	8066446 <assert_failed>
 806cafe:	e013      	b.n	806cb28 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 806cb00:	687b      	ldr	r3, [r7, #4]
 806cb02:	681b      	ldr	r3, [r3, #0]
 806cb04:	4a3f      	ldr	r2, [pc, #252]	@ (806cc04 <HAL_UART_Init+0x178>)
 806cb06:	4293      	cmp	r3, r2
 806cb08:	d00e      	beq.n	806cb28 <HAL_UART_Init+0x9c>
 806cb0a:	687b      	ldr	r3, [r7, #4]
 806cb0c:	681b      	ldr	r3, [r3, #0]
 806cb0e:	4a3e      	ldr	r2, [pc, #248]	@ (806cc08 <HAL_UART_Init+0x17c>)
 806cb10:	4293      	cmp	r3, r2
 806cb12:	d009      	beq.n	806cb28 <HAL_UART_Init+0x9c>
 806cb14:	687b      	ldr	r3, [r7, #4]
 806cb16:	681b      	ldr	r3, [r3, #0]
 806cb18:	4a3c      	ldr	r2, [pc, #240]	@ (806cc0c <HAL_UART_Init+0x180>)
 806cb1a:	4293      	cmp	r3, r2
 806cb1c:	d004      	beq.n	806cb28 <HAL_UART_Init+0x9c>
 806cb1e:	f44f 71bc 	mov.w	r1, #376	@ 0x178
 806cb22:	483b      	ldr	r0, [pc, #236]	@ (806cc10 <HAL_UART_Init+0x184>)
 806cb24:	f7f9 fc8f 	bl	8066446 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 806cb28:	687b      	ldr	r3, [r7, #4]
 806cb2a:	689b      	ldr	r3, [r3, #8]
 806cb2c:	2b00      	cmp	r3, #0
 806cb2e:	d009      	beq.n	806cb44 <HAL_UART_Init+0xb8>
 806cb30:	687b      	ldr	r3, [r7, #4]
 806cb32:	689b      	ldr	r3, [r3, #8]
 806cb34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 806cb38:	d004      	beq.n	806cb44 <HAL_UART_Init+0xb8>
 806cb3a:	f44f 71bd 	mov.w	r1, #378	@ 0x17a
 806cb3e:	4834      	ldr	r0, [pc, #208]	@ (806cc10 <HAL_UART_Init+0x184>)
 806cb40:	f7f9 fc81 	bl	8066446 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 806cb44:	687b      	ldr	r3, [r7, #4]
 806cb46:	69db      	ldr	r3, [r3, #28]
 806cb48:	2b00      	cmp	r3, #0
 806cb4a:	d009      	beq.n	806cb60 <HAL_UART_Init+0xd4>
 806cb4c:	687b      	ldr	r3, [r7, #4]
 806cb4e:	69db      	ldr	r3, [r3, #28]
 806cb50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 806cb54:	d004      	beq.n	806cb60 <HAL_UART_Init+0xd4>
 806cb56:	f240 117b 	movw	r1, #379	@ 0x17b
 806cb5a:	482d      	ldr	r0, [pc, #180]	@ (806cc10 <HAL_UART_Init+0x184>)
 806cb5c:	f7f9 fc73 	bl	8066446 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 806cb60:	687b      	ldr	r3, [r7, #4]
 806cb62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 806cb66:	b2db      	uxtb	r3, r3
 806cb68:	2b00      	cmp	r3, #0
 806cb6a:	d111      	bne.n	806cb90 <HAL_UART_Init+0x104>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 806cb6c:	687b      	ldr	r3, [r7, #4]
 806cb6e:	2200      	movs	r2, #0
 806cb70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 806cb74:	6878      	ldr	r0, [r7, #4]
 806cb76:	f000 fb7f 	bl	806d278 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 806cb7a:	687b      	ldr	r3, [r7, #4]
 806cb7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 806cb7e:	2b00      	cmp	r3, #0
 806cb80:	d102      	bne.n	806cb88 <HAL_UART_Init+0xfc>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 806cb82:	687b      	ldr	r3, [r7, #4]
 806cb84:	4a23      	ldr	r2, [pc, #140]	@ (806cc14 <HAL_UART_Init+0x188>)
 806cb86:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 806cb88:	687b      	ldr	r3, [r7, #4]
 806cb8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 806cb8c:	6878      	ldr	r0, [r7, #4]
 806cb8e:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 806cb90:	687b      	ldr	r3, [r7, #4]
 806cb92:	2224      	movs	r2, #36	@ 0x24
 806cb94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 806cb98:	687b      	ldr	r3, [r7, #4]
 806cb9a:	681b      	ldr	r3, [r3, #0]
 806cb9c:	68da      	ldr	r2, [r3, #12]
 806cb9e:	687b      	ldr	r3, [r7, #4]
 806cba0:	681b      	ldr	r3, [r3, #0]
 806cba2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 806cba6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 806cba8:	6878      	ldr	r0, [r7, #4]
 806cbaa:	f000 fd79 	bl	806d6a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 806cbae:	687b      	ldr	r3, [r7, #4]
 806cbb0:	681b      	ldr	r3, [r3, #0]
 806cbb2:	691a      	ldr	r2, [r3, #16]
 806cbb4:	687b      	ldr	r3, [r7, #4]
 806cbb6:	681b      	ldr	r3, [r3, #0]
 806cbb8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 806cbbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 806cbbe:	687b      	ldr	r3, [r7, #4]
 806cbc0:	681b      	ldr	r3, [r3, #0]
 806cbc2:	695a      	ldr	r2, [r3, #20]
 806cbc4:	687b      	ldr	r3, [r7, #4]
 806cbc6:	681b      	ldr	r3, [r3, #0]
 806cbc8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 806cbcc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 806cbce:	687b      	ldr	r3, [r7, #4]
 806cbd0:	681b      	ldr	r3, [r3, #0]
 806cbd2:	68da      	ldr	r2, [r3, #12]
 806cbd4:	687b      	ldr	r3, [r7, #4]
 806cbd6:	681b      	ldr	r3, [r3, #0]
 806cbd8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 806cbdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 806cbde:	687b      	ldr	r3, [r7, #4]
 806cbe0:	2200      	movs	r2, #0
 806cbe2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 806cbe4:	687b      	ldr	r3, [r7, #4]
 806cbe6:	2220      	movs	r2, #32
 806cbe8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 806cbec:	687b      	ldr	r3, [r7, #4]
 806cbee:	2220      	movs	r2, #32
 806cbf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 806cbf4:	687b      	ldr	r3, [r7, #4]
 806cbf6:	2200      	movs	r2, #0
 806cbf8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 806cbfa:	2300      	movs	r3, #0
}
 806cbfc:	4618      	mov	r0, r3
 806cbfe:	3708      	adds	r7, #8
 806cc00:	46bd      	mov	sp, r7
 806cc02:	bd80      	pop	{r7, pc}
 806cc04:	40011000 	.word	0x40011000
 806cc08:	40004400 	.word	0x40004400
 806cc0c:	40011400 	.word	0x40011400
 806cc10:	0807192c 	.word	0x0807192c
 806cc14:	08066ca9 	.word	0x08066ca9

0806cc18 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 806cc18:	b580      	push	{r7, lr}
 806cc1a:	b084      	sub	sp, #16
 806cc1c:	af00      	add	r7, sp, #0
 806cc1e:	60f8      	str	r0, [r7, #12]
 806cc20:	60b9      	str	r1, [r7, #8]
 806cc22:	4613      	mov	r3, r2
 806cc24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 806cc26:	68fb      	ldr	r3, [r7, #12]
 806cc28:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 806cc2c:	b2db      	uxtb	r3, r3
 806cc2e:	2b20      	cmp	r3, #32
 806cc30:	d112      	bne.n	806cc58 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 806cc32:	68bb      	ldr	r3, [r7, #8]
 806cc34:	2b00      	cmp	r3, #0
 806cc36:	d002      	beq.n	806cc3e <HAL_UART_Receive_IT+0x26>
 806cc38:	88fb      	ldrh	r3, [r7, #6]
 806cc3a:	2b00      	cmp	r3, #0
 806cc3c:	d101      	bne.n	806cc42 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 806cc3e:	2301      	movs	r3, #1
 806cc40:	e00b      	b.n	806cc5a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 806cc42:	68fb      	ldr	r3, [r7, #12]
 806cc44:	2200      	movs	r2, #0
 806cc46:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 806cc48:	88fb      	ldrh	r3, [r7, #6]
 806cc4a:	461a      	mov	r2, r3
 806cc4c:	68b9      	ldr	r1, [r7, #8]
 806cc4e:	68f8      	ldr	r0, [r7, #12]
 806cc50:	f000 fb4a 	bl	806d2e8 <UART_Start_Receive_IT>
 806cc54:	4603      	mov	r3, r0
 806cc56:	e000      	b.n	806cc5a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 806cc58:	2302      	movs	r3, #2
  }
}
 806cc5a:	4618      	mov	r0, r3
 806cc5c:	3710      	adds	r7, #16
 806cc5e:	46bd      	mov	sp, r7
 806cc60:	bd80      	pop	{r7, pc}
	...

0806cc64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 806cc64:	b580      	push	{r7, lr}
 806cc66:	b0ba      	sub	sp, #232	@ 0xe8
 806cc68:	af00      	add	r7, sp, #0
 806cc6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 806cc6c:	687b      	ldr	r3, [r7, #4]
 806cc6e:	681b      	ldr	r3, [r3, #0]
 806cc70:	681b      	ldr	r3, [r3, #0]
 806cc72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 806cc76:	687b      	ldr	r3, [r7, #4]
 806cc78:	681b      	ldr	r3, [r3, #0]
 806cc7a:	68db      	ldr	r3, [r3, #12]
 806cc7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 806cc80:	687b      	ldr	r3, [r7, #4]
 806cc82:	681b      	ldr	r3, [r3, #0]
 806cc84:	695b      	ldr	r3, [r3, #20]
 806cc86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 806cc8a:	2300      	movs	r3, #0
 806cc8c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 806cc90:	2300      	movs	r3, #0
 806cc92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 806cc96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 806cc9a:	f003 030f 	and.w	r3, r3, #15
 806cc9e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 806cca2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 806cca6:	2b00      	cmp	r3, #0
 806cca8:	d10f      	bne.n	806ccca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 806ccaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 806ccae:	f003 0320 	and.w	r3, r3, #32
 806ccb2:	2b00      	cmp	r3, #0
 806ccb4:	d009      	beq.n	806ccca <HAL_UART_IRQHandler+0x66>
 806ccb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 806ccba:	f003 0320 	and.w	r3, r3, #32
 806ccbe:	2b00      	cmp	r3, #0
 806ccc0:	d003      	beq.n	806ccca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 806ccc2:	6878      	ldr	r0, [r7, #4]
 806ccc4:	f000 fc2b 	bl	806d51e <UART_Receive_IT>
      return;
 806ccc8:	e260      	b.n	806d18c <HAL_UART_IRQHandler+0x528>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 806ccca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 806ccce:	2b00      	cmp	r3, #0
 806ccd0:	f000 80e1 	beq.w	806ce96 <HAL_UART_IRQHandler+0x232>
 806ccd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 806ccd8:	f003 0301 	and.w	r3, r3, #1
 806ccdc:	2b00      	cmp	r3, #0
 806ccde:	d106      	bne.n	806ccee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 806cce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 806cce4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 806cce8:	2b00      	cmp	r3, #0
 806ccea:	f000 80d4 	beq.w	806ce96 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 806ccee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 806ccf2:	f003 0301 	and.w	r3, r3, #1
 806ccf6:	2b00      	cmp	r3, #0
 806ccf8:	d00b      	beq.n	806cd12 <HAL_UART_IRQHandler+0xae>
 806ccfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 806ccfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 806cd02:	2b00      	cmp	r3, #0
 806cd04:	d005      	beq.n	806cd12 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 806cd06:	687b      	ldr	r3, [r7, #4]
 806cd08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 806cd0a:	f043 0201 	orr.w	r2, r3, #1
 806cd0e:	687b      	ldr	r3, [r7, #4]
 806cd10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 806cd12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 806cd16:	f003 0304 	and.w	r3, r3, #4
 806cd1a:	2b00      	cmp	r3, #0
 806cd1c:	d00b      	beq.n	806cd36 <HAL_UART_IRQHandler+0xd2>
 806cd1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 806cd22:	f003 0301 	and.w	r3, r3, #1
 806cd26:	2b00      	cmp	r3, #0
 806cd28:	d005      	beq.n	806cd36 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 806cd2a:	687b      	ldr	r3, [r7, #4]
 806cd2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 806cd2e:	f043 0202 	orr.w	r2, r3, #2
 806cd32:	687b      	ldr	r3, [r7, #4]
 806cd34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 806cd36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 806cd3a:	f003 0302 	and.w	r3, r3, #2
 806cd3e:	2b00      	cmp	r3, #0
 806cd40:	d00b      	beq.n	806cd5a <HAL_UART_IRQHandler+0xf6>
 806cd42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 806cd46:	f003 0301 	and.w	r3, r3, #1
 806cd4a:	2b00      	cmp	r3, #0
 806cd4c:	d005      	beq.n	806cd5a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 806cd4e:	687b      	ldr	r3, [r7, #4]
 806cd50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 806cd52:	f043 0204 	orr.w	r2, r3, #4
 806cd56:	687b      	ldr	r3, [r7, #4]
 806cd58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 806cd5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 806cd5e:	f003 0308 	and.w	r3, r3, #8
 806cd62:	2b00      	cmp	r3, #0
 806cd64:	d011      	beq.n	806cd8a <HAL_UART_IRQHandler+0x126>
 806cd66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 806cd6a:	f003 0320 	and.w	r3, r3, #32
 806cd6e:	2b00      	cmp	r3, #0
 806cd70:	d105      	bne.n	806cd7e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 806cd72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 806cd76:	f003 0301 	and.w	r3, r3, #1
 806cd7a:	2b00      	cmp	r3, #0
 806cd7c:	d005      	beq.n	806cd8a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 806cd7e:	687b      	ldr	r3, [r7, #4]
 806cd80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 806cd82:	f043 0208 	orr.w	r2, r3, #8
 806cd86:	687b      	ldr	r3, [r7, #4]
 806cd88:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 806cd8a:	687b      	ldr	r3, [r7, #4]
 806cd8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 806cd8e:	2b00      	cmp	r3, #0
 806cd90:	f000 81f7 	beq.w	806d182 <HAL_UART_IRQHandler+0x51e>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 806cd94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 806cd98:	f003 0320 	and.w	r3, r3, #32
 806cd9c:	2b00      	cmp	r3, #0
 806cd9e:	d008      	beq.n	806cdb2 <HAL_UART_IRQHandler+0x14e>
 806cda0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 806cda4:	f003 0320 	and.w	r3, r3, #32
 806cda8:	2b00      	cmp	r3, #0
 806cdaa:	d002      	beq.n	806cdb2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 806cdac:	6878      	ldr	r0, [r7, #4]
 806cdae:	f000 fbb6 	bl	806d51e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 806cdb2:	687b      	ldr	r3, [r7, #4]
 806cdb4:	681b      	ldr	r3, [r3, #0]
 806cdb6:	695b      	ldr	r3, [r3, #20]
 806cdb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 806cdbc:	2b40      	cmp	r3, #64	@ 0x40
 806cdbe:	bf0c      	ite	eq
 806cdc0:	2301      	moveq	r3, #1
 806cdc2:	2300      	movne	r3, #0
 806cdc4:	b2db      	uxtb	r3, r3
 806cdc6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 806cdca:	687b      	ldr	r3, [r7, #4]
 806cdcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 806cdce:	f003 0308 	and.w	r3, r3, #8
 806cdd2:	2b00      	cmp	r3, #0
 806cdd4:	d103      	bne.n	806cdde <HAL_UART_IRQHandler+0x17a>
 806cdd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 806cdda:	2b00      	cmp	r3, #0
 806cddc:	d051      	beq.n	806ce82 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 806cdde:	6878      	ldr	r0, [r7, #4]
 806cde0:	f000 fabc 	bl	806d35c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 806cde4:	687b      	ldr	r3, [r7, #4]
 806cde6:	681b      	ldr	r3, [r3, #0]
 806cde8:	695b      	ldr	r3, [r3, #20]
 806cdea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 806cdee:	2b40      	cmp	r3, #64	@ 0x40
 806cdf0:	d142      	bne.n	806ce78 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 806cdf2:	687b      	ldr	r3, [r7, #4]
 806cdf4:	681b      	ldr	r3, [r3, #0]
 806cdf6:	3314      	adds	r3, #20
 806cdf8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 806cdfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 806ce00:	e853 3f00 	ldrex	r3, [r3]
 806ce04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 806ce08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 806ce0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 806ce10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 806ce14:	687b      	ldr	r3, [r7, #4]
 806ce16:	681b      	ldr	r3, [r3, #0]
 806ce18:	3314      	adds	r3, #20
 806ce1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 806ce1e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 806ce22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 806ce26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 806ce2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 806ce2e:	e841 2300 	strex	r3, r2, [r1]
 806ce32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 806ce36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 806ce3a:	2b00      	cmp	r3, #0
 806ce3c:	d1d9      	bne.n	806cdf2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 806ce3e:	687b      	ldr	r3, [r7, #4]
 806ce40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 806ce42:	2b00      	cmp	r3, #0
 806ce44:	d013      	beq.n	806ce6e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 806ce46:	687b      	ldr	r3, [r7, #4]
 806ce48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 806ce4a:	4a80      	ldr	r2, [pc, #512]	@ (806d04c <HAL_UART_IRQHandler+0x3e8>)
 806ce4c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 806ce4e:	687b      	ldr	r3, [r7, #4]
 806ce50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 806ce52:	4618      	mov	r0, r3
 806ce54:	f7fb f8b2 	bl	8067fbc <HAL_DMA_Abort_IT>
 806ce58:	4603      	mov	r3, r0
 806ce5a:	2b00      	cmp	r3, #0
 806ce5c:	d019      	beq.n	806ce92 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 806ce5e:	687b      	ldr	r3, [r7, #4]
 806ce60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 806ce62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 806ce64:	687a      	ldr	r2, [r7, #4]
 806ce66:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 806ce68:	4610      	mov	r0, r2
 806ce6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 806ce6c:	e011      	b.n	806ce92 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 806ce6e:	687b      	ldr	r3, [r7, #4]
 806ce70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 806ce72:	6878      	ldr	r0, [r7, #4]
 806ce74:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 806ce76:	e00c      	b.n	806ce92 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 806ce78:	687b      	ldr	r3, [r7, #4]
 806ce7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 806ce7c:	6878      	ldr	r0, [r7, #4]
 806ce7e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 806ce80:	e007      	b.n	806ce92 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 806ce82:	687b      	ldr	r3, [r7, #4]
 806ce84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 806ce86:	6878      	ldr	r0, [r7, #4]
 806ce88:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 806ce8a:	687b      	ldr	r3, [r7, #4]
 806ce8c:	2200      	movs	r2, #0
 806ce8e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 806ce90:	e177      	b.n	806d182 <HAL_UART_IRQHandler+0x51e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 806ce92:	bf00      	nop
    return;
 806ce94:	e175      	b.n	806d182 <HAL_UART_IRQHandler+0x51e>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 806ce96:	687b      	ldr	r3, [r7, #4]
 806ce98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 806ce9a:	2b01      	cmp	r3, #1
 806ce9c:	f040 8151 	bne.w	806d142 <HAL_UART_IRQHandler+0x4de>
      && ((isrflags & USART_SR_IDLE) != 0U)
 806cea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 806cea4:	f003 0310 	and.w	r3, r3, #16
 806cea8:	2b00      	cmp	r3, #0
 806ceaa:	f000 814a 	beq.w	806d142 <HAL_UART_IRQHandler+0x4de>
      && ((cr1its & USART_SR_IDLE) != 0U))
 806ceae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 806ceb2:	f003 0310 	and.w	r3, r3, #16
 806ceb6:	2b00      	cmp	r3, #0
 806ceb8:	f000 8143 	beq.w	806d142 <HAL_UART_IRQHandler+0x4de>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 806cebc:	2300      	movs	r3, #0
 806cebe:	60bb      	str	r3, [r7, #8]
 806cec0:	687b      	ldr	r3, [r7, #4]
 806cec2:	681b      	ldr	r3, [r3, #0]
 806cec4:	681b      	ldr	r3, [r3, #0]
 806cec6:	60bb      	str	r3, [r7, #8]
 806cec8:	687b      	ldr	r3, [r7, #4]
 806ceca:	681b      	ldr	r3, [r3, #0]
 806cecc:	685b      	ldr	r3, [r3, #4]
 806cece:	60bb      	str	r3, [r7, #8]
 806ced0:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 806ced2:	687b      	ldr	r3, [r7, #4]
 806ced4:	681b      	ldr	r3, [r3, #0]
 806ced6:	695b      	ldr	r3, [r3, #20]
 806ced8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 806cedc:	2b40      	cmp	r3, #64	@ 0x40
 806cede:	f040 80b7 	bne.w	806d050 <HAL_UART_IRQHandler+0x3ec>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 806cee2:	687b      	ldr	r3, [r7, #4]
 806cee4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 806cee6:	681b      	ldr	r3, [r3, #0]
 806cee8:	685b      	ldr	r3, [r3, #4]
 806ceea:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 806ceee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 806cef2:	2b00      	cmp	r3, #0
 806cef4:	f000 8147 	beq.w	806d186 <HAL_UART_IRQHandler+0x522>
          && (nb_remaining_rx_data < huart->RxXferSize))
 806cef8:	687b      	ldr	r3, [r7, #4]
 806cefa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 806cefc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 806cf00:	429a      	cmp	r2, r3
 806cf02:	f080 8140 	bcs.w	806d186 <HAL_UART_IRQHandler+0x522>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 806cf06:	687b      	ldr	r3, [r7, #4]
 806cf08:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 806cf0c:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 806cf0e:	687b      	ldr	r3, [r7, #4]
 806cf10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 806cf12:	69db      	ldr	r3, [r3, #28]
 806cf14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 806cf18:	f000 8088 	beq.w	806d02c <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 806cf1c:	687b      	ldr	r3, [r7, #4]
 806cf1e:	681b      	ldr	r3, [r3, #0]
 806cf20:	330c      	adds	r3, #12
 806cf22:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 806cf26:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 806cf2a:	e853 3f00 	ldrex	r3, [r3]
 806cf2e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 806cf32:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 806cf36:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 806cf3a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 806cf3e:	687b      	ldr	r3, [r7, #4]
 806cf40:	681b      	ldr	r3, [r3, #0]
 806cf42:	330c      	adds	r3, #12
 806cf44:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 806cf48:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 806cf4c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 806cf50:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 806cf54:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 806cf58:	e841 2300 	strex	r3, r2, [r1]
 806cf5c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 806cf60:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 806cf64:	2b00      	cmp	r3, #0
 806cf66:	d1d9      	bne.n	806cf1c <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 806cf68:	687b      	ldr	r3, [r7, #4]
 806cf6a:	681b      	ldr	r3, [r3, #0]
 806cf6c:	3314      	adds	r3, #20
 806cf6e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 806cf70:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 806cf72:	e853 3f00 	ldrex	r3, [r3]
 806cf76:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 806cf78:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 806cf7a:	f023 0301 	bic.w	r3, r3, #1
 806cf7e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 806cf82:	687b      	ldr	r3, [r7, #4]
 806cf84:	681b      	ldr	r3, [r3, #0]
 806cf86:	3314      	adds	r3, #20
 806cf88:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 806cf8c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 806cf90:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 806cf92:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 806cf94:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 806cf98:	e841 2300 	strex	r3, r2, [r1]
 806cf9c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 806cf9e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 806cfa0:	2b00      	cmp	r3, #0
 806cfa2:	d1e1      	bne.n	806cf68 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 806cfa4:	687b      	ldr	r3, [r7, #4]
 806cfa6:	681b      	ldr	r3, [r3, #0]
 806cfa8:	3314      	adds	r3, #20
 806cfaa:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 806cfac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 806cfae:	e853 3f00 	ldrex	r3, [r3]
 806cfb2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 806cfb4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 806cfb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 806cfba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 806cfbe:	687b      	ldr	r3, [r7, #4]
 806cfc0:	681b      	ldr	r3, [r3, #0]
 806cfc2:	3314      	adds	r3, #20
 806cfc4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 806cfc8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 806cfca:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 806cfcc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 806cfce:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 806cfd0:	e841 2300 	strex	r3, r2, [r1]
 806cfd4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 806cfd6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 806cfd8:	2b00      	cmp	r3, #0
 806cfda:	d1e3      	bne.n	806cfa4 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 806cfdc:	687b      	ldr	r3, [r7, #4]
 806cfde:	2220      	movs	r2, #32
 806cfe0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 806cfe4:	687b      	ldr	r3, [r7, #4]
 806cfe6:	2200      	movs	r2, #0
 806cfe8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 806cfea:	687b      	ldr	r3, [r7, #4]
 806cfec:	681b      	ldr	r3, [r3, #0]
 806cfee:	330c      	adds	r3, #12
 806cff0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 806cff2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 806cff4:	e853 3f00 	ldrex	r3, [r3]
 806cff8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 806cffa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 806cffc:	f023 0310 	bic.w	r3, r3, #16
 806d000:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 806d004:	687b      	ldr	r3, [r7, #4]
 806d006:	681b      	ldr	r3, [r3, #0]
 806d008:	330c      	adds	r3, #12
 806d00a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 806d00e:	65ba      	str	r2, [r7, #88]	@ 0x58
 806d010:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 806d012:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 806d014:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 806d016:	e841 2300 	strex	r3, r2, [r1]
 806d01a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 806d01c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 806d01e:	2b00      	cmp	r3, #0
 806d020:	d1e3      	bne.n	806cfea <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 806d022:	687b      	ldr	r3, [r7, #4]
 806d024:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 806d026:	4618      	mov	r0, r3
 806d028:	f7fa ff58 	bl	8067edc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 806d02c:	687b      	ldr	r3, [r7, #4]
 806d02e:	2202      	movs	r2, #2
 806d030:	635a      	str	r2, [r3, #52]	@ 0x34

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 806d032:	687b      	ldr	r3, [r7, #4]
 806d034:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 806d036:	687a      	ldr	r2, [r7, #4]
 806d038:	8d91      	ldrh	r1, [r2, #44]	@ 0x2c
 806d03a:	687a      	ldr	r2, [r7, #4]
 806d03c:	8dd2      	ldrh	r2, [r2, #46]	@ 0x2e
 806d03e:	b292      	uxth	r2, r2
 806d040:	1a8a      	subs	r2, r1, r2
 806d042:	b292      	uxth	r2, r2
 806d044:	4611      	mov	r1, r2
 806d046:	6878      	ldr	r0, [r7, #4]
 806d048:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 806d04a:	e09c      	b.n	806d186 <HAL_UART_IRQHandler+0x522>
 806d04c:	0806d423 	.word	0x0806d423
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 806d050:	687b      	ldr	r3, [r7, #4]
 806d052:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 806d054:	687b      	ldr	r3, [r7, #4]
 806d056:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 806d058:	b29b      	uxth	r3, r3
 806d05a:	1ad3      	subs	r3, r2, r3
 806d05c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 806d060:	687b      	ldr	r3, [r7, #4]
 806d062:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 806d064:	b29b      	uxth	r3, r3
 806d066:	2b00      	cmp	r3, #0
 806d068:	f000 808f 	beq.w	806d18a <HAL_UART_IRQHandler+0x526>
          && (nb_rx_data > 0U))
 806d06c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 806d070:	2b00      	cmp	r3, #0
 806d072:	f000 808a 	beq.w	806d18a <HAL_UART_IRQHandler+0x526>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 806d076:	687b      	ldr	r3, [r7, #4]
 806d078:	681b      	ldr	r3, [r3, #0]
 806d07a:	330c      	adds	r3, #12
 806d07c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 806d07e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 806d080:	e853 3f00 	ldrex	r3, [r3]
 806d084:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 806d086:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 806d088:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 806d08c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 806d090:	687b      	ldr	r3, [r7, #4]
 806d092:	681b      	ldr	r3, [r3, #0]
 806d094:	330c      	adds	r3, #12
 806d096:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 806d09a:	647a      	str	r2, [r7, #68]	@ 0x44
 806d09c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 806d09e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 806d0a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 806d0a2:	e841 2300 	strex	r3, r2, [r1]
 806d0a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 806d0a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 806d0aa:	2b00      	cmp	r3, #0
 806d0ac:	d1e3      	bne.n	806d076 <HAL_UART_IRQHandler+0x412>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 806d0ae:	687b      	ldr	r3, [r7, #4]
 806d0b0:	681b      	ldr	r3, [r3, #0]
 806d0b2:	3314      	adds	r3, #20
 806d0b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 806d0b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 806d0b8:	e853 3f00 	ldrex	r3, [r3]
 806d0bc:	623b      	str	r3, [r7, #32]
   return(result);
 806d0be:	6a3b      	ldr	r3, [r7, #32]
 806d0c0:	f023 0301 	bic.w	r3, r3, #1
 806d0c4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 806d0c8:	687b      	ldr	r3, [r7, #4]
 806d0ca:	681b      	ldr	r3, [r3, #0]
 806d0cc:	3314      	adds	r3, #20
 806d0ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 806d0d2:	633a      	str	r2, [r7, #48]	@ 0x30
 806d0d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 806d0d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 806d0d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 806d0da:	e841 2300 	strex	r3, r2, [r1]
 806d0de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 806d0e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 806d0e2:	2b00      	cmp	r3, #0
 806d0e4:	d1e3      	bne.n	806d0ae <HAL_UART_IRQHandler+0x44a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 806d0e6:	687b      	ldr	r3, [r7, #4]
 806d0e8:	2220      	movs	r2, #32
 806d0ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 806d0ee:	687b      	ldr	r3, [r7, #4]
 806d0f0:	2200      	movs	r2, #0
 806d0f2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 806d0f4:	687b      	ldr	r3, [r7, #4]
 806d0f6:	681b      	ldr	r3, [r3, #0]
 806d0f8:	330c      	adds	r3, #12
 806d0fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 806d0fc:	693b      	ldr	r3, [r7, #16]
 806d0fe:	e853 3f00 	ldrex	r3, [r3]
 806d102:	60fb      	str	r3, [r7, #12]
   return(result);
 806d104:	68fb      	ldr	r3, [r7, #12]
 806d106:	f023 0310 	bic.w	r3, r3, #16
 806d10a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 806d10e:	687b      	ldr	r3, [r7, #4]
 806d110:	681b      	ldr	r3, [r3, #0]
 806d112:	330c      	adds	r3, #12
 806d114:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 806d118:	61fa      	str	r2, [r7, #28]
 806d11a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 806d11c:	69b9      	ldr	r1, [r7, #24]
 806d11e:	69fa      	ldr	r2, [r7, #28]
 806d120:	e841 2300 	strex	r3, r2, [r1]
 806d124:	617b      	str	r3, [r7, #20]
   return(result);
 806d126:	697b      	ldr	r3, [r7, #20]
 806d128:	2b00      	cmp	r3, #0
 806d12a:	d1e3      	bne.n	806d0f4 <HAL_UART_IRQHandler+0x490>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 806d12c:	687b      	ldr	r3, [r7, #4]
 806d12e:	2202      	movs	r2, #2
 806d130:	635a      	str	r2, [r3, #52]	@ 0x34

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 806d132:	687b      	ldr	r3, [r7, #4]
 806d134:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 806d136:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 806d13a:	4611      	mov	r1, r2
 806d13c:	6878      	ldr	r0, [r7, #4]
 806d13e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 806d140:	e023      	b.n	806d18a <HAL_UART_IRQHandler+0x526>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 806d142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 806d146:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 806d14a:	2b00      	cmp	r3, #0
 806d14c:	d009      	beq.n	806d162 <HAL_UART_IRQHandler+0x4fe>
 806d14e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 806d152:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 806d156:	2b00      	cmp	r3, #0
 806d158:	d003      	beq.n	806d162 <HAL_UART_IRQHandler+0x4fe>
  {
    UART_Transmit_IT(huart);
 806d15a:	6878      	ldr	r0, [r7, #4]
 806d15c:	f000 f976 	bl	806d44c <UART_Transmit_IT>
    return;
 806d160:	e014      	b.n	806d18c <HAL_UART_IRQHandler+0x528>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 806d162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 806d166:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 806d16a:	2b00      	cmp	r3, #0
 806d16c:	d00e      	beq.n	806d18c <HAL_UART_IRQHandler+0x528>
 806d16e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 806d172:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 806d176:	2b00      	cmp	r3, #0
 806d178:	d008      	beq.n	806d18c <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 806d17a:	6878      	ldr	r0, [r7, #4]
 806d17c:	f000 f9b6 	bl	806d4ec <UART_EndTransmit_IT>
    return;
 806d180:	e004      	b.n	806d18c <HAL_UART_IRQHandler+0x528>
    return;
 806d182:	bf00      	nop
 806d184:	e002      	b.n	806d18c <HAL_UART_IRQHandler+0x528>
      return;
 806d186:	bf00      	nop
 806d188:	e000      	b.n	806d18c <HAL_UART_IRQHandler+0x528>
      return;
 806d18a:	bf00      	nop
  }
}
 806d18c:	37e8      	adds	r7, #232	@ 0xe8
 806d18e:	46bd      	mov	sp, r7
 806d190:	bd80      	pop	{r7, pc}
 806d192:	bf00      	nop

0806d194 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 806d194:	b480      	push	{r7}
 806d196:	b083      	sub	sp, #12
 806d198:	af00      	add	r7, sp, #0
 806d19a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 806d19c:	bf00      	nop
 806d19e:	370c      	adds	r7, #12
 806d1a0:	46bd      	mov	sp, r7
 806d1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 806d1a6:	4770      	bx	lr

0806d1a8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 806d1a8:	b480      	push	{r7}
 806d1aa:	b083      	sub	sp, #12
 806d1ac:	af00      	add	r7, sp, #0
 806d1ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 806d1b0:	bf00      	nop
 806d1b2:	370c      	adds	r7, #12
 806d1b4:	46bd      	mov	sp, r7
 806d1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 806d1ba:	4770      	bx	lr

0806d1bc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 806d1bc:	b480      	push	{r7}
 806d1be:	b083      	sub	sp, #12
 806d1c0:	af00      	add	r7, sp, #0
 806d1c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 806d1c4:	bf00      	nop
 806d1c6:	370c      	adds	r7, #12
 806d1c8:	46bd      	mov	sp, r7
 806d1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 806d1ce:	4770      	bx	lr

0806d1d0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 806d1d0:	b480      	push	{r7}
 806d1d2:	b083      	sub	sp, #12
 806d1d4:	af00      	add	r7, sp, #0
 806d1d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 806d1d8:	bf00      	nop
 806d1da:	370c      	adds	r7, #12
 806d1dc:	46bd      	mov	sp, r7
 806d1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 806d1e2:	4770      	bx	lr

0806d1e4 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 806d1e4:	b480      	push	{r7}
 806d1e6:	b083      	sub	sp, #12
 806d1e8:	af00      	add	r7, sp, #0
 806d1ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 806d1ec:	bf00      	nop
 806d1ee:	370c      	adds	r7, #12
 806d1f0:	46bd      	mov	sp, r7
 806d1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 806d1f6:	4770      	bx	lr

0806d1f8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 806d1f8:	b480      	push	{r7}
 806d1fa:	b083      	sub	sp, #12
 806d1fc:	af00      	add	r7, sp, #0
 806d1fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 806d200:	bf00      	nop
 806d202:	370c      	adds	r7, #12
 806d204:	46bd      	mov	sp, r7
 806d206:	f85d 7b04 	ldr.w	r7, [sp], #4
 806d20a:	4770      	bx	lr

0806d20c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 806d20c:	b480      	push	{r7}
 806d20e:	b083      	sub	sp, #12
 806d210:	af00      	add	r7, sp, #0
 806d212:	6078      	str	r0, [r7, #4]
 806d214:	460b      	mov	r3, r1
 806d216:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 806d218:	bf00      	nop
 806d21a:	370c      	adds	r7, #12
 806d21c:	46bd      	mov	sp, r7
 806d21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 806d222:	4770      	bx	lr

0806d224 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 806d224:	b480      	push	{r7}
 806d226:	b085      	sub	sp, #20
 806d228:	af00      	add	r7, sp, #0
 806d22a:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 806d22c:	2300      	movs	r3, #0
 806d22e:	60fb      	str	r3, [r7, #12]
 806d230:	2300      	movs	r3, #0
 806d232:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 806d234:	687b      	ldr	r3, [r7, #4]
 806d236:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 806d23a:	b2db      	uxtb	r3, r3
 806d23c:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 806d23e:	687b      	ldr	r3, [r7, #4]
 806d240:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 806d244:	b2db      	uxtb	r3, r3
 806d246:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 806d248:	68fb      	ldr	r3, [r7, #12]
 806d24a:	b2da      	uxtb	r2, r3
 806d24c:	68bb      	ldr	r3, [r7, #8]
 806d24e:	b2db      	uxtb	r3, r3
 806d250:	4313      	orrs	r3, r2
 806d252:	b2db      	uxtb	r3, r3
}
 806d254:	4618      	mov	r0, r3
 806d256:	3714      	adds	r7, #20
 806d258:	46bd      	mov	sp, r7
 806d25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 806d25e:	4770      	bx	lr

0806d260 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 806d260:	b480      	push	{r7}
 806d262:	b083      	sub	sp, #12
 806d264:	af00      	add	r7, sp, #0
 806d266:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 806d268:	687b      	ldr	r3, [r7, #4]
 806d26a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 806d26c:	4618      	mov	r0, r3
 806d26e:	370c      	adds	r7, #12
 806d270:	46bd      	mov	sp, r7
 806d272:	f85d 7b04 	ldr.w	r7, [sp], #4
 806d276:	4770      	bx	lr

0806d278 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 806d278:	b480      	push	{r7}
 806d27a:	b083      	sub	sp, #12
 806d27c:	af00      	add	r7, sp, #0
 806d27e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 806d280:	687b      	ldr	r3, [r7, #4]
 806d282:	4a10      	ldr	r2, [pc, #64]	@ (806d2c4 <UART_InitCallbacksToDefault+0x4c>)
 806d284:	649a      	str	r2, [r3, #72]	@ 0x48
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 806d286:	687b      	ldr	r3, [r7, #4]
 806d288:	4a0f      	ldr	r2, [pc, #60]	@ (806d2c8 <UART_InitCallbacksToDefault+0x50>)
 806d28a:	64da      	str	r2, [r3, #76]	@ 0x4c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 806d28c:	687b      	ldr	r3, [r7, #4]
 806d28e:	4a0f      	ldr	r2, [pc, #60]	@ (806d2cc <UART_InitCallbacksToDefault+0x54>)
 806d290:	651a      	str	r2, [r3, #80]	@ 0x50
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 806d292:	687b      	ldr	r3, [r7, #4]
 806d294:	4a0e      	ldr	r2, [pc, #56]	@ (806d2d0 <UART_InitCallbacksToDefault+0x58>)
 806d296:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 806d298:	687b      	ldr	r3, [r7, #4]
 806d29a:	4a0e      	ldr	r2, [pc, #56]	@ (806d2d4 <UART_InitCallbacksToDefault+0x5c>)
 806d29c:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 806d29e:	687b      	ldr	r3, [r7, #4]
 806d2a0:	4a0d      	ldr	r2, [pc, #52]	@ (806d2d8 <UART_InitCallbacksToDefault+0x60>)
 806d2a2:	65da      	str	r2, [r3, #92]	@ 0x5c
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 806d2a4:	687b      	ldr	r3, [r7, #4]
 806d2a6:	4a0d      	ldr	r2, [pc, #52]	@ (806d2dc <UART_InitCallbacksToDefault+0x64>)
 806d2a8:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 806d2aa:	687b      	ldr	r3, [r7, #4]
 806d2ac:	4a0c      	ldr	r2, [pc, #48]	@ (806d2e0 <UART_InitCallbacksToDefault+0x68>)
 806d2ae:	665a      	str	r2, [r3, #100]	@ 0x64
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 806d2b0:	687b      	ldr	r3, [r7, #4]
 806d2b2:	4a0c      	ldr	r2, [pc, #48]	@ (806d2e4 <UART_InitCallbacksToDefault+0x6c>)
 806d2b4:	66da      	str	r2, [r3, #108]	@ 0x6c

}
 806d2b6:	bf00      	nop
 806d2b8:	370c      	adds	r7, #12
 806d2ba:	46bd      	mov	sp, r7
 806d2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 806d2c0:	4770      	bx	lr
 806d2c2:	bf00      	nop
 806d2c4:	0806d1a9 	.word	0x0806d1a9
 806d2c8:	0806d195 	.word	0x0806d195
 806d2cc:	0806d1bd 	.word	0x0806d1bd
 806d2d0:	08062561 	.word	0x08062561
 806d2d4:	080624b5 	.word	0x080624b5
 806d2d8:	0806d1d1 	.word	0x0806d1d1
 806d2dc:	0806d1e5 	.word	0x0806d1e5
 806d2e0:	0806d1f9 	.word	0x0806d1f9
 806d2e4:	0806d20d 	.word	0x0806d20d

0806d2e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 806d2e8:	b480      	push	{r7}
 806d2ea:	b085      	sub	sp, #20
 806d2ec:	af00      	add	r7, sp, #0
 806d2ee:	60f8      	str	r0, [r7, #12]
 806d2f0:	60b9      	str	r1, [r7, #8]
 806d2f2:	4613      	mov	r3, r2
 806d2f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 806d2f6:	68fb      	ldr	r3, [r7, #12]
 806d2f8:	68ba      	ldr	r2, [r7, #8]
 806d2fa:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 806d2fc:	68fb      	ldr	r3, [r7, #12]
 806d2fe:	88fa      	ldrh	r2, [r7, #6]
 806d300:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 806d302:	68fb      	ldr	r3, [r7, #12]
 806d304:	88fa      	ldrh	r2, [r7, #6]
 806d306:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 806d308:	68fb      	ldr	r3, [r7, #12]
 806d30a:	2200      	movs	r2, #0
 806d30c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 806d30e:	68fb      	ldr	r3, [r7, #12]
 806d310:	2222      	movs	r2, #34	@ 0x22
 806d312:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 806d316:	68fb      	ldr	r3, [r7, #12]
 806d318:	691b      	ldr	r3, [r3, #16]
 806d31a:	2b00      	cmp	r3, #0
 806d31c:	d007      	beq.n	806d32e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 806d31e:	68fb      	ldr	r3, [r7, #12]
 806d320:	681b      	ldr	r3, [r3, #0]
 806d322:	68da      	ldr	r2, [r3, #12]
 806d324:	68fb      	ldr	r3, [r7, #12]
 806d326:	681b      	ldr	r3, [r3, #0]
 806d328:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 806d32c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 806d32e:	68fb      	ldr	r3, [r7, #12]
 806d330:	681b      	ldr	r3, [r3, #0]
 806d332:	695a      	ldr	r2, [r3, #20]
 806d334:	68fb      	ldr	r3, [r7, #12]
 806d336:	681b      	ldr	r3, [r3, #0]
 806d338:	f042 0201 	orr.w	r2, r2, #1
 806d33c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 806d33e:	68fb      	ldr	r3, [r7, #12]
 806d340:	681b      	ldr	r3, [r3, #0]
 806d342:	68da      	ldr	r2, [r3, #12]
 806d344:	68fb      	ldr	r3, [r7, #12]
 806d346:	681b      	ldr	r3, [r3, #0]
 806d348:	f042 0220 	orr.w	r2, r2, #32
 806d34c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 806d34e:	2300      	movs	r3, #0
}
 806d350:	4618      	mov	r0, r3
 806d352:	3714      	adds	r7, #20
 806d354:	46bd      	mov	sp, r7
 806d356:	f85d 7b04 	ldr.w	r7, [sp], #4
 806d35a:	4770      	bx	lr

0806d35c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 806d35c:	b480      	push	{r7}
 806d35e:	b095      	sub	sp, #84	@ 0x54
 806d360:	af00      	add	r7, sp, #0
 806d362:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 806d364:	687b      	ldr	r3, [r7, #4]
 806d366:	681b      	ldr	r3, [r3, #0]
 806d368:	330c      	adds	r3, #12
 806d36a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 806d36c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 806d36e:	e853 3f00 	ldrex	r3, [r3]
 806d372:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 806d374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 806d376:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 806d37a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 806d37c:	687b      	ldr	r3, [r7, #4]
 806d37e:	681b      	ldr	r3, [r3, #0]
 806d380:	330c      	adds	r3, #12
 806d382:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 806d384:	643a      	str	r2, [r7, #64]	@ 0x40
 806d386:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 806d388:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 806d38a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 806d38c:	e841 2300 	strex	r3, r2, [r1]
 806d390:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 806d392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 806d394:	2b00      	cmp	r3, #0
 806d396:	d1e5      	bne.n	806d364 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 806d398:	687b      	ldr	r3, [r7, #4]
 806d39a:	681b      	ldr	r3, [r3, #0]
 806d39c:	3314      	adds	r3, #20
 806d39e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 806d3a0:	6a3b      	ldr	r3, [r7, #32]
 806d3a2:	e853 3f00 	ldrex	r3, [r3]
 806d3a6:	61fb      	str	r3, [r7, #28]
   return(result);
 806d3a8:	69fb      	ldr	r3, [r7, #28]
 806d3aa:	f023 0301 	bic.w	r3, r3, #1
 806d3ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 806d3b0:	687b      	ldr	r3, [r7, #4]
 806d3b2:	681b      	ldr	r3, [r3, #0]
 806d3b4:	3314      	adds	r3, #20
 806d3b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 806d3b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 806d3ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 806d3bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 806d3be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 806d3c0:	e841 2300 	strex	r3, r2, [r1]
 806d3c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 806d3c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 806d3c8:	2b00      	cmp	r3, #0
 806d3ca:	d1e5      	bne.n	806d398 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 806d3cc:	687b      	ldr	r3, [r7, #4]
 806d3ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 806d3d0:	2b01      	cmp	r3, #1
 806d3d2:	d119      	bne.n	806d408 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 806d3d4:	687b      	ldr	r3, [r7, #4]
 806d3d6:	681b      	ldr	r3, [r3, #0]
 806d3d8:	330c      	adds	r3, #12
 806d3da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 806d3dc:	68fb      	ldr	r3, [r7, #12]
 806d3de:	e853 3f00 	ldrex	r3, [r3]
 806d3e2:	60bb      	str	r3, [r7, #8]
   return(result);
 806d3e4:	68bb      	ldr	r3, [r7, #8]
 806d3e6:	f023 0310 	bic.w	r3, r3, #16
 806d3ea:	647b      	str	r3, [r7, #68]	@ 0x44
 806d3ec:	687b      	ldr	r3, [r7, #4]
 806d3ee:	681b      	ldr	r3, [r3, #0]
 806d3f0:	330c      	adds	r3, #12
 806d3f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 806d3f4:	61ba      	str	r2, [r7, #24]
 806d3f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 806d3f8:	6979      	ldr	r1, [r7, #20]
 806d3fa:	69ba      	ldr	r2, [r7, #24]
 806d3fc:	e841 2300 	strex	r3, r2, [r1]
 806d400:	613b      	str	r3, [r7, #16]
   return(result);
 806d402:	693b      	ldr	r3, [r7, #16]
 806d404:	2b00      	cmp	r3, #0
 806d406:	d1e5      	bne.n	806d3d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 806d408:	687b      	ldr	r3, [r7, #4]
 806d40a:	2220      	movs	r2, #32
 806d40c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 806d410:	687b      	ldr	r3, [r7, #4]
 806d412:	2200      	movs	r2, #0
 806d414:	631a      	str	r2, [r3, #48]	@ 0x30
}
 806d416:	bf00      	nop
 806d418:	3754      	adds	r7, #84	@ 0x54
 806d41a:	46bd      	mov	sp, r7
 806d41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 806d420:	4770      	bx	lr

0806d422 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 806d422:	b580      	push	{r7, lr}
 806d424:	b084      	sub	sp, #16
 806d426:	af00      	add	r7, sp, #0
 806d428:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 806d42a:	687b      	ldr	r3, [r7, #4]
 806d42c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 806d42e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 806d430:	68fb      	ldr	r3, [r7, #12]
 806d432:	2200      	movs	r2, #0
 806d434:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 806d436:	68fb      	ldr	r3, [r7, #12]
 806d438:	2200      	movs	r2, #0
 806d43a:	84da      	strh	r2, [r3, #38]	@ 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 806d43c:	68fb      	ldr	r3, [r7, #12]
 806d43e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 806d440:	68f8      	ldr	r0, [r7, #12]
 806d442:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 806d444:	bf00      	nop
 806d446:	3710      	adds	r7, #16
 806d448:	46bd      	mov	sp, r7
 806d44a:	bd80      	pop	{r7, pc}

0806d44c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 806d44c:	b480      	push	{r7}
 806d44e:	b085      	sub	sp, #20
 806d450:	af00      	add	r7, sp, #0
 806d452:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 806d454:	687b      	ldr	r3, [r7, #4]
 806d456:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 806d45a:	b2db      	uxtb	r3, r3
 806d45c:	2b21      	cmp	r3, #33	@ 0x21
 806d45e:	d13e      	bne.n	806d4de <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 806d460:	687b      	ldr	r3, [r7, #4]
 806d462:	689b      	ldr	r3, [r3, #8]
 806d464:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 806d468:	d114      	bne.n	806d494 <UART_Transmit_IT+0x48>
 806d46a:	687b      	ldr	r3, [r7, #4]
 806d46c:	691b      	ldr	r3, [r3, #16]
 806d46e:	2b00      	cmp	r3, #0
 806d470:	d110      	bne.n	806d494 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 806d472:	687b      	ldr	r3, [r7, #4]
 806d474:	6a1b      	ldr	r3, [r3, #32]
 806d476:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 806d478:	68fb      	ldr	r3, [r7, #12]
 806d47a:	881b      	ldrh	r3, [r3, #0]
 806d47c:	461a      	mov	r2, r3
 806d47e:	687b      	ldr	r3, [r7, #4]
 806d480:	681b      	ldr	r3, [r3, #0]
 806d482:	f3c2 0208 	ubfx	r2, r2, #0, #9
 806d486:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 806d488:	687b      	ldr	r3, [r7, #4]
 806d48a:	6a1b      	ldr	r3, [r3, #32]
 806d48c:	1c9a      	adds	r2, r3, #2
 806d48e:	687b      	ldr	r3, [r7, #4]
 806d490:	621a      	str	r2, [r3, #32]
 806d492:	e008      	b.n	806d4a6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 806d494:	687b      	ldr	r3, [r7, #4]
 806d496:	6a1b      	ldr	r3, [r3, #32]
 806d498:	1c59      	adds	r1, r3, #1
 806d49a:	687a      	ldr	r2, [r7, #4]
 806d49c:	6211      	str	r1, [r2, #32]
 806d49e:	781a      	ldrb	r2, [r3, #0]
 806d4a0:	687b      	ldr	r3, [r7, #4]
 806d4a2:	681b      	ldr	r3, [r3, #0]
 806d4a4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 806d4a6:	687b      	ldr	r3, [r7, #4]
 806d4a8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 806d4aa:	b29b      	uxth	r3, r3
 806d4ac:	3b01      	subs	r3, #1
 806d4ae:	b29b      	uxth	r3, r3
 806d4b0:	687a      	ldr	r2, [r7, #4]
 806d4b2:	4619      	mov	r1, r3
 806d4b4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 806d4b6:	2b00      	cmp	r3, #0
 806d4b8:	d10f      	bne.n	806d4da <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 806d4ba:	687b      	ldr	r3, [r7, #4]
 806d4bc:	681b      	ldr	r3, [r3, #0]
 806d4be:	68da      	ldr	r2, [r3, #12]
 806d4c0:	687b      	ldr	r3, [r7, #4]
 806d4c2:	681b      	ldr	r3, [r3, #0]
 806d4c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 806d4c8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 806d4ca:	687b      	ldr	r3, [r7, #4]
 806d4cc:	681b      	ldr	r3, [r3, #0]
 806d4ce:	68da      	ldr	r2, [r3, #12]
 806d4d0:	687b      	ldr	r3, [r7, #4]
 806d4d2:	681b      	ldr	r3, [r3, #0]
 806d4d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 806d4d8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 806d4da:	2300      	movs	r3, #0
 806d4dc:	e000      	b.n	806d4e0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 806d4de:	2302      	movs	r3, #2
  }
}
 806d4e0:	4618      	mov	r0, r3
 806d4e2:	3714      	adds	r7, #20
 806d4e4:	46bd      	mov	sp, r7
 806d4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 806d4ea:	4770      	bx	lr

0806d4ec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 806d4ec:	b580      	push	{r7, lr}
 806d4ee:	b082      	sub	sp, #8
 806d4f0:	af00      	add	r7, sp, #0
 806d4f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 806d4f4:	687b      	ldr	r3, [r7, #4]
 806d4f6:	681b      	ldr	r3, [r3, #0]
 806d4f8:	68da      	ldr	r2, [r3, #12]
 806d4fa:	687b      	ldr	r3, [r7, #4]
 806d4fc:	681b      	ldr	r3, [r3, #0]
 806d4fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 806d502:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 806d504:	687b      	ldr	r3, [r7, #4]
 806d506:	2220      	movs	r2, #32
 806d508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 806d50c:	687b      	ldr	r3, [r7, #4]
 806d50e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 806d510:	6878      	ldr	r0, [r7, #4]
 806d512:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 806d514:	2300      	movs	r3, #0
}
 806d516:	4618      	mov	r0, r3
 806d518:	3708      	adds	r7, #8
 806d51a:	46bd      	mov	sp, r7
 806d51c:	bd80      	pop	{r7, pc}

0806d51e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 806d51e:	b580      	push	{r7, lr}
 806d520:	b08c      	sub	sp, #48	@ 0x30
 806d522:	af00      	add	r7, sp, #0
 806d524:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 806d526:	687b      	ldr	r3, [r7, #4]
 806d528:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 806d52c:	b2db      	uxtb	r3, r3
 806d52e:	2b22      	cmp	r3, #34	@ 0x22
 806d530:	f040 80b0 	bne.w	806d694 <UART_Receive_IT+0x176>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 806d534:	687b      	ldr	r3, [r7, #4]
 806d536:	689b      	ldr	r3, [r3, #8]
 806d538:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 806d53c:	d117      	bne.n	806d56e <UART_Receive_IT+0x50>
 806d53e:	687b      	ldr	r3, [r7, #4]
 806d540:	691b      	ldr	r3, [r3, #16]
 806d542:	2b00      	cmp	r3, #0
 806d544:	d113      	bne.n	806d56e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 806d546:	2300      	movs	r3, #0
 806d548:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 806d54a:	687b      	ldr	r3, [r7, #4]
 806d54c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 806d54e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 806d550:	687b      	ldr	r3, [r7, #4]
 806d552:	681b      	ldr	r3, [r3, #0]
 806d554:	685b      	ldr	r3, [r3, #4]
 806d556:	b29b      	uxth	r3, r3
 806d558:	f3c3 0308 	ubfx	r3, r3, #0, #9
 806d55c:	b29a      	uxth	r2, r3
 806d55e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 806d560:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 806d562:	687b      	ldr	r3, [r7, #4]
 806d564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 806d566:	1c9a      	adds	r2, r3, #2
 806d568:	687b      	ldr	r3, [r7, #4]
 806d56a:	629a      	str	r2, [r3, #40]	@ 0x28
 806d56c:	e026      	b.n	806d5bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 806d56e:	687b      	ldr	r3, [r7, #4]
 806d570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 806d572:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 806d574:	2300      	movs	r3, #0
 806d576:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 806d578:	687b      	ldr	r3, [r7, #4]
 806d57a:	689b      	ldr	r3, [r3, #8]
 806d57c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 806d580:	d007      	beq.n	806d592 <UART_Receive_IT+0x74>
 806d582:	687b      	ldr	r3, [r7, #4]
 806d584:	689b      	ldr	r3, [r3, #8]
 806d586:	2b00      	cmp	r3, #0
 806d588:	d10a      	bne.n	806d5a0 <UART_Receive_IT+0x82>
 806d58a:	687b      	ldr	r3, [r7, #4]
 806d58c:	691b      	ldr	r3, [r3, #16]
 806d58e:	2b00      	cmp	r3, #0
 806d590:	d106      	bne.n	806d5a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 806d592:	687b      	ldr	r3, [r7, #4]
 806d594:	681b      	ldr	r3, [r3, #0]
 806d596:	685b      	ldr	r3, [r3, #4]
 806d598:	b2da      	uxtb	r2, r3
 806d59a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 806d59c:	701a      	strb	r2, [r3, #0]
 806d59e:	e008      	b.n	806d5b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 806d5a0:	687b      	ldr	r3, [r7, #4]
 806d5a2:	681b      	ldr	r3, [r3, #0]
 806d5a4:	685b      	ldr	r3, [r3, #4]
 806d5a6:	b2db      	uxtb	r3, r3
 806d5a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 806d5ac:	b2da      	uxtb	r2, r3
 806d5ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 806d5b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 806d5b2:	687b      	ldr	r3, [r7, #4]
 806d5b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 806d5b6:	1c5a      	adds	r2, r3, #1
 806d5b8:	687b      	ldr	r3, [r7, #4]
 806d5ba:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 806d5bc:	687b      	ldr	r3, [r7, #4]
 806d5be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 806d5c0:	b29b      	uxth	r3, r3
 806d5c2:	3b01      	subs	r3, #1
 806d5c4:	b29b      	uxth	r3, r3
 806d5c6:	687a      	ldr	r2, [r7, #4]
 806d5c8:	4619      	mov	r1, r3
 806d5ca:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 806d5cc:	2b00      	cmp	r3, #0
 806d5ce:	d15f      	bne.n	806d690 <UART_Receive_IT+0x172>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 806d5d0:	687b      	ldr	r3, [r7, #4]
 806d5d2:	681b      	ldr	r3, [r3, #0]
 806d5d4:	68da      	ldr	r2, [r3, #12]
 806d5d6:	687b      	ldr	r3, [r7, #4]
 806d5d8:	681b      	ldr	r3, [r3, #0]
 806d5da:	f022 0220 	bic.w	r2, r2, #32
 806d5de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 806d5e0:	687b      	ldr	r3, [r7, #4]
 806d5e2:	681b      	ldr	r3, [r3, #0]
 806d5e4:	68da      	ldr	r2, [r3, #12]
 806d5e6:	687b      	ldr	r3, [r7, #4]
 806d5e8:	681b      	ldr	r3, [r3, #0]
 806d5ea:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 806d5ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 806d5f0:	687b      	ldr	r3, [r7, #4]
 806d5f2:	681b      	ldr	r3, [r3, #0]
 806d5f4:	695a      	ldr	r2, [r3, #20]
 806d5f6:	687b      	ldr	r3, [r7, #4]
 806d5f8:	681b      	ldr	r3, [r3, #0]
 806d5fa:	f022 0201 	bic.w	r2, r2, #1
 806d5fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 806d600:	687b      	ldr	r3, [r7, #4]
 806d602:	2220      	movs	r2, #32
 806d604:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 806d608:	687b      	ldr	r3, [r7, #4]
 806d60a:	2200      	movs	r2, #0
 806d60c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 806d60e:	687b      	ldr	r3, [r7, #4]
 806d610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 806d612:	2b01      	cmp	r3, #1
 806d614:	d136      	bne.n	806d684 <UART_Receive_IT+0x166>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 806d616:	687b      	ldr	r3, [r7, #4]
 806d618:	2200      	movs	r2, #0
 806d61a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 806d61c:	687b      	ldr	r3, [r7, #4]
 806d61e:	681b      	ldr	r3, [r3, #0]
 806d620:	330c      	adds	r3, #12
 806d622:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 806d624:	697b      	ldr	r3, [r7, #20]
 806d626:	e853 3f00 	ldrex	r3, [r3]
 806d62a:	613b      	str	r3, [r7, #16]
   return(result);
 806d62c:	693b      	ldr	r3, [r7, #16]
 806d62e:	f023 0310 	bic.w	r3, r3, #16
 806d632:	627b      	str	r3, [r7, #36]	@ 0x24
 806d634:	687b      	ldr	r3, [r7, #4]
 806d636:	681b      	ldr	r3, [r3, #0]
 806d638:	330c      	adds	r3, #12
 806d63a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 806d63c:	623a      	str	r2, [r7, #32]
 806d63e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 806d640:	69f9      	ldr	r1, [r7, #28]
 806d642:	6a3a      	ldr	r2, [r7, #32]
 806d644:	e841 2300 	strex	r3, r2, [r1]
 806d648:	61bb      	str	r3, [r7, #24]
   return(result);
 806d64a:	69bb      	ldr	r3, [r7, #24]
 806d64c:	2b00      	cmp	r3, #0
 806d64e:	d1e5      	bne.n	806d61c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 806d650:	687b      	ldr	r3, [r7, #4]
 806d652:	681b      	ldr	r3, [r3, #0]
 806d654:	681b      	ldr	r3, [r3, #0]
 806d656:	f003 0310 	and.w	r3, r3, #16
 806d65a:	2b10      	cmp	r3, #16
 806d65c:	d10a      	bne.n	806d674 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 806d65e:	2300      	movs	r3, #0
 806d660:	60fb      	str	r3, [r7, #12]
 806d662:	687b      	ldr	r3, [r7, #4]
 806d664:	681b      	ldr	r3, [r3, #0]
 806d666:	681b      	ldr	r3, [r3, #0]
 806d668:	60fb      	str	r3, [r7, #12]
 806d66a:	687b      	ldr	r3, [r7, #4]
 806d66c:	681b      	ldr	r3, [r3, #0]
 806d66e:	685b      	ldr	r3, [r3, #4]
 806d670:	60fb      	str	r3, [r7, #12]
 806d672:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 806d674:	687b      	ldr	r3, [r7, #4]
 806d676:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 806d678:	687a      	ldr	r2, [r7, #4]
 806d67a:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 806d67c:	4611      	mov	r1, r2
 806d67e:	6878      	ldr	r0, [r7, #4]
 806d680:	4798      	blx	r3
 806d682:	e003      	b.n	806d68c <UART_Receive_IT+0x16e>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 806d684:	687b      	ldr	r3, [r7, #4]
 806d686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 806d688:	6878      	ldr	r0, [r7, #4]
 806d68a:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 806d68c:	2300      	movs	r3, #0
 806d68e:	e002      	b.n	806d696 <UART_Receive_IT+0x178>
    }
    return HAL_OK;
 806d690:	2300      	movs	r3, #0
 806d692:	e000      	b.n	806d696 <UART_Receive_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 806d694:	2302      	movs	r3, #2
  }
}
 806d696:	4618      	mov	r0, r3
 806d698:	3730      	adds	r7, #48	@ 0x30
 806d69a:	46bd      	mov	sp, r7
 806d69c:	bd80      	pop	{r7, pc}
	...

0806d6a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 806d6a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 806d6a4:	b0c0      	sub	sp, #256	@ 0x100
 806d6a6:	af00      	add	r7, sp, #0
 806d6a8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 806d6ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 806d6b0:	685a      	ldr	r2, [r3, #4]
 806d6b2:	4bcf      	ldr	r3, [pc, #828]	@ (806d9f0 <UART_SetConfig+0x350>)
 806d6b4:	429a      	cmp	r2, r3
 806d6b6:	d904      	bls.n	806d6c2 <UART_SetConfig+0x22>
 806d6b8:	f640 6175 	movw	r1, #3701	@ 0xe75
 806d6bc:	48cd      	ldr	r0, [pc, #820]	@ (806d9f4 <UART_SetConfig+0x354>)
 806d6be:	f7f8 fec2 	bl	8066446 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 806d6c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 806d6c6:	68db      	ldr	r3, [r3, #12]
 806d6c8:	2b00      	cmp	r3, #0
 806d6ca:	d00a      	beq.n	806d6e2 <UART_SetConfig+0x42>
 806d6cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 806d6d0:	68db      	ldr	r3, [r3, #12]
 806d6d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 806d6d6:	d004      	beq.n	806d6e2 <UART_SetConfig+0x42>
 806d6d8:	f640 6176 	movw	r1, #3702	@ 0xe76
 806d6dc:	48c5      	ldr	r0, [pc, #788]	@ (806d9f4 <UART_SetConfig+0x354>)
 806d6de:	f7f8 feb2 	bl	8066446 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 806d6e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 806d6e6:	691b      	ldr	r3, [r3, #16]
 806d6e8:	2b00      	cmp	r3, #0
 806d6ea:	d010      	beq.n	806d70e <UART_SetConfig+0x6e>
 806d6ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 806d6f0:	691b      	ldr	r3, [r3, #16]
 806d6f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 806d6f6:	d00a      	beq.n	806d70e <UART_SetConfig+0x6e>
 806d6f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 806d6fc:	691b      	ldr	r3, [r3, #16]
 806d6fe:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 806d702:	d004      	beq.n	806d70e <UART_SetConfig+0x6e>
 806d704:	f640 6177 	movw	r1, #3703	@ 0xe77
 806d708:	48ba      	ldr	r0, [pc, #744]	@ (806d9f4 <UART_SetConfig+0x354>)
 806d70a:	f7f8 fe9c 	bl	8066446 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 806d70e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 806d712:	695a      	ldr	r2, [r3, #20]
 806d714:	f64f 73f3 	movw	r3, #65523	@ 0xfff3
 806d718:	4013      	ands	r3, r2
 806d71a:	2b00      	cmp	r3, #0
 806d71c:	d104      	bne.n	806d728 <UART_SetConfig+0x88>
 806d71e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 806d722:	695b      	ldr	r3, [r3, #20]
 806d724:	2b00      	cmp	r3, #0
 806d726:	d104      	bne.n	806d732 <UART_SetConfig+0x92>
 806d728:	f640 6178 	movw	r1, #3704	@ 0xe78
 806d72c:	48b1      	ldr	r0, [pc, #708]	@ (806d9f4 <UART_SetConfig+0x354>)
 806d72e:	f7f8 fe8a 	bl	8066446 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 806d732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 806d736:	681b      	ldr	r3, [r3, #0]
 806d738:	691b      	ldr	r3, [r3, #16]
 806d73a:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 806d73e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 806d742:	68d9      	ldr	r1, [r3, #12]
 806d744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 806d748:	681a      	ldr	r2, [r3, #0]
 806d74a:	ea40 0301 	orr.w	r3, r0, r1
 806d74e:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 806d750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 806d754:	689a      	ldr	r2, [r3, #8]
 806d756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 806d75a:	691b      	ldr	r3, [r3, #16]
 806d75c:	431a      	orrs	r2, r3
 806d75e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 806d762:	695b      	ldr	r3, [r3, #20]
 806d764:	431a      	orrs	r2, r3
 806d766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 806d76a:	69db      	ldr	r3, [r3, #28]
 806d76c:	4313      	orrs	r3, r2
 806d76e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 806d772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 806d776:	681b      	ldr	r3, [r3, #0]
 806d778:	68db      	ldr	r3, [r3, #12]
 806d77a:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 806d77e:	f021 010c 	bic.w	r1, r1, #12
 806d782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 806d786:	681a      	ldr	r2, [r3, #0]
 806d788:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 806d78c:	430b      	orrs	r3, r1
 806d78e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 806d790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 806d794:	681b      	ldr	r3, [r3, #0]
 806d796:	695b      	ldr	r3, [r3, #20]
 806d798:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 806d79c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 806d7a0:	6999      	ldr	r1, [r3, #24]
 806d7a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 806d7a6:	681a      	ldr	r2, [r3, #0]
 806d7a8:	ea40 0301 	orr.w	r3, r0, r1
 806d7ac:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 806d7ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 806d7b2:	681a      	ldr	r2, [r3, #0]
 806d7b4:	4b90      	ldr	r3, [pc, #576]	@ (806d9f8 <UART_SetConfig+0x358>)
 806d7b6:	429a      	cmp	r2, r3
 806d7b8:	d005      	beq.n	806d7c6 <UART_SetConfig+0x126>
 806d7ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 806d7be:	681a      	ldr	r2, [r3, #0]
 806d7c0:	4b8e      	ldr	r3, [pc, #568]	@ (806d9fc <UART_SetConfig+0x35c>)
 806d7c2:	429a      	cmp	r2, r3
 806d7c4:	d104      	bne.n	806d7d0 <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 806d7c6:	f7fc f9b5 	bl	8069b34 <HAL_RCC_GetPCLK2Freq>
 806d7ca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 806d7ce:	e003      	b.n	806d7d8 <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 806d7d0:	f7fc f99c 	bl	8069b0c <HAL_RCC_GetPCLK1Freq>
 806d7d4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 806d7d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 806d7dc:	69db      	ldr	r3, [r3, #28]
 806d7de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 806d7e2:	f040 810f 	bne.w	806da04 <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 806d7e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 806d7ea:	2200      	movs	r2, #0
 806d7ec:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 806d7f0:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 806d7f4:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 806d7f8:	4622      	mov	r2, r4
 806d7fa:	462b      	mov	r3, r5
 806d7fc:	1891      	adds	r1, r2, r2
 806d7fe:	65b9      	str	r1, [r7, #88]	@ 0x58
 806d800:	415b      	adcs	r3, r3
 806d802:	65fb      	str	r3, [r7, #92]	@ 0x5c
 806d804:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 806d808:	4621      	mov	r1, r4
 806d80a:	eb12 0801 	adds.w	r8, r2, r1
 806d80e:	4629      	mov	r1, r5
 806d810:	eb43 0901 	adc.w	r9, r3, r1
 806d814:	f04f 0200 	mov.w	r2, #0
 806d818:	f04f 0300 	mov.w	r3, #0
 806d81c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 806d820:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 806d824:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 806d828:	4690      	mov	r8, r2
 806d82a:	4699      	mov	r9, r3
 806d82c:	4623      	mov	r3, r4
 806d82e:	eb18 0303 	adds.w	r3, r8, r3
 806d832:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 806d836:	462b      	mov	r3, r5
 806d838:	eb49 0303 	adc.w	r3, r9, r3
 806d83c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 806d840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 806d844:	685b      	ldr	r3, [r3, #4]
 806d846:	2200      	movs	r2, #0
 806d848:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 806d84c:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 806d850:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 806d854:	460b      	mov	r3, r1
 806d856:	18db      	adds	r3, r3, r3
 806d858:	653b      	str	r3, [r7, #80]	@ 0x50
 806d85a:	4613      	mov	r3, r2
 806d85c:	eb42 0303 	adc.w	r3, r2, r3
 806d860:	657b      	str	r3, [r7, #84]	@ 0x54
 806d862:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 806d866:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 806d86a:	f7f2 fcb9 	bl	80601e0 <__aeabi_uldivmod>
 806d86e:	4602      	mov	r2, r0
 806d870:	460b      	mov	r3, r1
 806d872:	4b63      	ldr	r3, [pc, #396]	@ (806da00 <UART_SetConfig+0x360>)
 806d874:	fba3 2302 	umull	r2, r3, r3, r2
 806d878:	095b      	lsrs	r3, r3, #5
 806d87a:	011c      	lsls	r4, r3, #4
 806d87c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 806d880:	2200      	movs	r2, #0
 806d882:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 806d886:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 806d88a:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 806d88e:	4642      	mov	r2, r8
 806d890:	464b      	mov	r3, r9
 806d892:	1891      	adds	r1, r2, r2
 806d894:	64b9      	str	r1, [r7, #72]	@ 0x48
 806d896:	415b      	adcs	r3, r3
 806d898:	64fb      	str	r3, [r7, #76]	@ 0x4c
 806d89a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 806d89e:	4641      	mov	r1, r8
 806d8a0:	eb12 0a01 	adds.w	sl, r2, r1
 806d8a4:	4649      	mov	r1, r9
 806d8a6:	eb43 0b01 	adc.w	fp, r3, r1
 806d8aa:	f04f 0200 	mov.w	r2, #0
 806d8ae:	f04f 0300 	mov.w	r3, #0
 806d8b2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 806d8b6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 806d8ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 806d8be:	4692      	mov	sl, r2
 806d8c0:	469b      	mov	fp, r3
 806d8c2:	4643      	mov	r3, r8
 806d8c4:	eb1a 0303 	adds.w	r3, sl, r3
 806d8c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 806d8cc:	464b      	mov	r3, r9
 806d8ce:	eb4b 0303 	adc.w	r3, fp, r3
 806d8d2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 806d8d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 806d8da:	685b      	ldr	r3, [r3, #4]
 806d8dc:	2200      	movs	r2, #0
 806d8de:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 806d8e2:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 806d8e6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 806d8ea:	460b      	mov	r3, r1
 806d8ec:	18db      	adds	r3, r3, r3
 806d8ee:	643b      	str	r3, [r7, #64]	@ 0x40
 806d8f0:	4613      	mov	r3, r2
 806d8f2:	eb42 0303 	adc.w	r3, r2, r3
 806d8f6:	647b      	str	r3, [r7, #68]	@ 0x44
 806d8f8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 806d8fc:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 806d900:	f7f2 fc6e 	bl	80601e0 <__aeabi_uldivmod>
 806d904:	4602      	mov	r2, r0
 806d906:	460b      	mov	r3, r1
 806d908:	4611      	mov	r1, r2
 806d90a:	4b3d      	ldr	r3, [pc, #244]	@ (806da00 <UART_SetConfig+0x360>)
 806d90c:	fba3 2301 	umull	r2, r3, r3, r1
 806d910:	095b      	lsrs	r3, r3, #5
 806d912:	2264      	movs	r2, #100	@ 0x64
 806d914:	fb02 f303 	mul.w	r3, r2, r3
 806d918:	1acb      	subs	r3, r1, r3
 806d91a:	00db      	lsls	r3, r3, #3
 806d91c:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 806d920:	4b37      	ldr	r3, [pc, #220]	@ (806da00 <UART_SetConfig+0x360>)
 806d922:	fba3 2302 	umull	r2, r3, r3, r2
 806d926:	095b      	lsrs	r3, r3, #5
 806d928:	005b      	lsls	r3, r3, #1
 806d92a:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 806d92e:	441c      	add	r4, r3
 806d930:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 806d934:	2200      	movs	r2, #0
 806d936:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 806d93a:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 806d93e:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 806d942:	4642      	mov	r2, r8
 806d944:	464b      	mov	r3, r9
 806d946:	1891      	adds	r1, r2, r2
 806d948:	63b9      	str	r1, [r7, #56]	@ 0x38
 806d94a:	415b      	adcs	r3, r3
 806d94c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 806d94e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 806d952:	4641      	mov	r1, r8
 806d954:	1851      	adds	r1, r2, r1
 806d956:	6339      	str	r1, [r7, #48]	@ 0x30
 806d958:	4649      	mov	r1, r9
 806d95a:	414b      	adcs	r3, r1
 806d95c:	637b      	str	r3, [r7, #52]	@ 0x34
 806d95e:	f04f 0200 	mov.w	r2, #0
 806d962:	f04f 0300 	mov.w	r3, #0
 806d966:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 806d96a:	4659      	mov	r1, fp
 806d96c:	00cb      	lsls	r3, r1, #3
 806d96e:	4651      	mov	r1, sl
 806d970:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 806d974:	4651      	mov	r1, sl
 806d976:	00ca      	lsls	r2, r1, #3
 806d978:	4610      	mov	r0, r2
 806d97a:	4619      	mov	r1, r3
 806d97c:	4603      	mov	r3, r0
 806d97e:	4642      	mov	r2, r8
 806d980:	189b      	adds	r3, r3, r2
 806d982:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 806d986:	464b      	mov	r3, r9
 806d988:	460a      	mov	r2, r1
 806d98a:	eb42 0303 	adc.w	r3, r2, r3
 806d98e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 806d992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 806d996:	685b      	ldr	r3, [r3, #4]
 806d998:	2200      	movs	r2, #0
 806d99a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 806d99e:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 806d9a2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 806d9a6:	460b      	mov	r3, r1
 806d9a8:	18db      	adds	r3, r3, r3
 806d9aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 806d9ac:	4613      	mov	r3, r2
 806d9ae:	eb42 0303 	adc.w	r3, r2, r3
 806d9b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 806d9b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 806d9b8:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 806d9bc:	f7f2 fc10 	bl	80601e0 <__aeabi_uldivmod>
 806d9c0:	4602      	mov	r2, r0
 806d9c2:	460b      	mov	r3, r1
 806d9c4:	4b0e      	ldr	r3, [pc, #56]	@ (806da00 <UART_SetConfig+0x360>)
 806d9c6:	fba3 1302 	umull	r1, r3, r3, r2
 806d9ca:	095b      	lsrs	r3, r3, #5
 806d9cc:	2164      	movs	r1, #100	@ 0x64
 806d9ce:	fb01 f303 	mul.w	r3, r1, r3
 806d9d2:	1ad3      	subs	r3, r2, r3
 806d9d4:	00db      	lsls	r3, r3, #3
 806d9d6:	3332      	adds	r3, #50	@ 0x32
 806d9d8:	4a09      	ldr	r2, [pc, #36]	@ (806da00 <UART_SetConfig+0x360>)
 806d9da:	fba2 2303 	umull	r2, r3, r2, r3
 806d9de:	095b      	lsrs	r3, r3, #5
 806d9e0:	f003 0207 	and.w	r2, r3, #7
 806d9e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 806d9e8:	681b      	ldr	r3, [r3, #0]
 806d9ea:	4422      	add	r2, r4
 806d9ec:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 806d9ee:	e109      	b.n	806dc04 <UART_SetConfig+0x564>
 806d9f0:	00a037a0 	.word	0x00a037a0
 806d9f4:	0807192c 	.word	0x0807192c
 806d9f8:	40011000 	.word	0x40011000
 806d9fc:	40011400 	.word	0x40011400
 806da00:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 806da04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 806da08:	2200      	movs	r2, #0
 806da0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 806da0e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 806da12:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 806da16:	4642      	mov	r2, r8
 806da18:	464b      	mov	r3, r9
 806da1a:	1891      	adds	r1, r2, r2
 806da1c:	6239      	str	r1, [r7, #32]
 806da1e:	415b      	adcs	r3, r3
 806da20:	627b      	str	r3, [r7, #36]	@ 0x24
 806da22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 806da26:	4641      	mov	r1, r8
 806da28:	1854      	adds	r4, r2, r1
 806da2a:	4649      	mov	r1, r9
 806da2c:	eb43 0501 	adc.w	r5, r3, r1
 806da30:	f04f 0200 	mov.w	r2, #0
 806da34:	f04f 0300 	mov.w	r3, #0
 806da38:	00eb      	lsls	r3, r5, #3
 806da3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 806da3e:	00e2      	lsls	r2, r4, #3
 806da40:	4614      	mov	r4, r2
 806da42:	461d      	mov	r5, r3
 806da44:	4643      	mov	r3, r8
 806da46:	18e3      	adds	r3, r4, r3
 806da48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 806da4c:	464b      	mov	r3, r9
 806da4e:	eb45 0303 	adc.w	r3, r5, r3
 806da52:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 806da56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 806da5a:	685b      	ldr	r3, [r3, #4]
 806da5c:	2200      	movs	r2, #0
 806da5e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 806da62:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 806da66:	f04f 0200 	mov.w	r2, #0
 806da6a:	f04f 0300 	mov.w	r3, #0
 806da6e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 806da72:	4629      	mov	r1, r5
 806da74:	008b      	lsls	r3, r1, #2
 806da76:	4621      	mov	r1, r4
 806da78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 806da7c:	4621      	mov	r1, r4
 806da7e:	008a      	lsls	r2, r1, #2
 806da80:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 806da84:	f7f2 fbac 	bl	80601e0 <__aeabi_uldivmod>
 806da88:	4602      	mov	r2, r0
 806da8a:	460b      	mov	r3, r1
 806da8c:	4b60      	ldr	r3, [pc, #384]	@ (806dc10 <UART_SetConfig+0x570>)
 806da8e:	fba3 2302 	umull	r2, r3, r3, r2
 806da92:	095b      	lsrs	r3, r3, #5
 806da94:	011c      	lsls	r4, r3, #4
 806da96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 806da9a:	2200      	movs	r2, #0
 806da9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 806daa0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 806daa4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 806daa8:	4642      	mov	r2, r8
 806daaa:	464b      	mov	r3, r9
 806daac:	1891      	adds	r1, r2, r2
 806daae:	61b9      	str	r1, [r7, #24]
 806dab0:	415b      	adcs	r3, r3
 806dab2:	61fb      	str	r3, [r7, #28]
 806dab4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 806dab8:	4641      	mov	r1, r8
 806daba:	1851      	adds	r1, r2, r1
 806dabc:	6139      	str	r1, [r7, #16]
 806dabe:	4649      	mov	r1, r9
 806dac0:	414b      	adcs	r3, r1
 806dac2:	617b      	str	r3, [r7, #20]
 806dac4:	f04f 0200 	mov.w	r2, #0
 806dac8:	f04f 0300 	mov.w	r3, #0
 806dacc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 806dad0:	4659      	mov	r1, fp
 806dad2:	00cb      	lsls	r3, r1, #3
 806dad4:	4651      	mov	r1, sl
 806dad6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 806dada:	4651      	mov	r1, sl
 806dadc:	00ca      	lsls	r2, r1, #3
 806dade:	4610      	mov	r0, r2
 806dae0:	4619      	mov	r1, r3
 806dae2:	4603      	mov	r3, r0
 806dae4:	4642      	mov	r2, r8
 806dae6:	189b      	adds	r3, r3, r2
 806dae8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 806daec:	464b      	mov	r3, r9
 806daee:	460a      	mov	r2, r1
 806daf0:	eb42 0303 	adc.w	r3, r2, r3
 806daf4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 806daf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 806dafc:	685b      	ldr	r3, [r3, #4]
 806dafe:	2200      	movs	r2, #0
 806db00:	67bb      	str	r3, [r7, #120]	@ 0x78
 806db02:	67fa      	str	r2, [r7, #124]	@ 0x7c
 806db04:	f04f 0200 	mov.w	r2, #0
 806db08:	f04f 0300 	mov.w	r3, #0
 806db0c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 806db10:	4649      	mov	r1, r9
 806db12:	008b      	lsls	r3, r1, #2
 806db14:	4641      	mov	r1, r8
 806db16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 806db1a:	4641      	mov	r1, r8
 806db1c:	008a      	lsls	r2, r1, #2
 806db1e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 806db22:	f7f2 fb5d 	bl	80601e0 <__aeabi_uldivmod>
 806db26:	4602      	mov	r2, r0
 806db28:	460b      	mov	r3, r1
 806db2a:	4611      	mov	r1, r2
 806db2c:	4b38      	ldr	r3, [pc, #224]	@ (806dc10 <UART_SetConfig+0x570>)
 806db2e:	fba3 2301 	umull	r2, r3, r3, r1
 806db32:	095b      	lsrs	r3, r3, #5
 806db34:	2264      	movs	r2, #100	@ 0x64
 806db36:	fb02 f303 	mul.w	r3, r2, r3
 806db3a:	1acb      	subs	r3, r1, r3
 806db3c:	011b      	lsls	r3, r3, #4
 806db3e:	3332      	adds	r3, #50	@ 0x32
 806db40:	4a33      	ldr	r2, [pc, #204]	@ (806dc10 <UART_SetConfig+0x570>)
 806db42:	fba2 2303 	umull	r2, r3, r2, r3
 806db46:	095b      	lsrs	r3, r3, #5
 806db48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 806db4c:	441c      	add	r4, r3
 806db4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 806db52:	2200      	movs	r2, #0
 806db54:	673b      	str	r3, [r7, #112]	@ 0x70
 806db56:	677a      	str	r2, [r7, #116]	@ 0x74
 806db58:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 806db5c:	4642      	mov	r2, r8
 806db5e:	464b      	mov	r3, r9
 806db60:	1891      	adds	r1, r2, r2
 806db62:	60b9      	str	r1, [r7, #8]
 806db64:	415b      	adcs	r3, r3
 806db66:	60fb      	str	r3, [r7, #12]
 806db68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 806db6c:	4641      	mov	r1, r8
 806db6e:	1851      	adds	r1, r2, r1
 806db70:	6039      	str	r1, [r7, #0]
 806db72:	4649      	mov	r1, r9
 806db74:	414b      	adcs	r3, r1
 806db76:	607b      	str	r3, [r7, #4]
 806db78:	f04f 0200 	mov.w	r2, #0
 806db7c:	f04f 0300 	mov.w	r3, #0
 806db80:	e9d7 ab00 	ldrd	sl, fp, [r7]
 806db84:	4659      	mov	r1, fp
 806db86:	00cb      	lsls	r3, r1, #3
 806db88:	4651      	mov	r1, sl
 806db8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 806db8e:	4651      	mov	r1, sl
 806db90:	00ca      	lsls	r2, r1, #3
 806db92:	4610      	mov	r0, r2
 806db94:	4619      	mov	r1, r3
 806db96:	4603      	mov	r3, r0
 806db98:	4642      	mov	r2, r8
 806db9a:	189b      	adds	r3, r3, r2
 806db9c:	66bb      	str	r3, [r7, #104]	@ 0x68
 806db9e:	464b      	mov	r3, r9
 806dba0:	460a      	mov	r2, r1
 806dba2:	eb42 0303 	adc.w	r3, r2, r3
 806dba6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 806dba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 806dbac:	685b      	ldr	r3, [r3, #4]
 806dbae:	2200      	movs	r2, #0
 806dbb0:	663b      	str	r3, [r7, #96]	@ 0x60
 806dbb2:	667a      	str	r2, [r7, #100]	@ 0x64
 806dbb4:	f04f 0200 	mov.w	r2, #0
 806dbb8:	f04f 0300 	mov.w	r3, #0
 806dbbc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 806dbc0:	4649      	mov	r1, r9
 806dbc2:	008b      	lsls	r3, r1, #2
 806dbc4:	4641      	mov	r1, r8
 806dbc6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 806dbca:	4641      	mov	r1, r8
 806dbcc:	008a      	lsls	r2, r1, #2
 806dbce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 806dbd2:	f7f2 fb05 	bl	80601e0 <__aeabi_uldivmod>
 806dbd6:	4602      	mov	r2, r0
 806dbd8:	460b      	mov	r3, r1
 806dbda:	4b0d      	ldr	r3, [pc, #52]	@ (806dc10 <UART_SetConfig+0x570>)
 806dbdc:	fba3 1302 	umull	r1, r3, r3, r2
 806dbe0:	095b      	lsrs	r3, r3, #5
 806dbe2:	2164      	movs	r1, #100	@ 0x64
 806dbe4:	fb01 f303 	mul.w	r3, r1, r3
 806dbe8:	1ad3      	subs	r3, r2, r3
 806dbea:	011b      	lsls	r3, r3, #4
 806dbec:	3332      	adds	r3, #50	@ 0x32
 806dbee:	4a08      	ldr	r2, [pc, #32]	@ (806dc10 <UART_SetConfig+0x570>)
 806dbf0:	fba2 2303 	umull	r2, r3, r2, r3
 806dbf4:	095b      	lsrs	r3, r3, #5
 806dbf6:	f003 020f 	and.w	r2, r3, #15
 806dbfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 806dbfe:	681b      	ldr	r3, [r3, #0]
 806dc00:	4422      	add	r2, r4
 806dc02:	609a      	str	r2, [r3, #8]
}
 806dc04:	bf00      	nop
 806dc06:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 806dc0a:	46bd      	mov	sp, r7
 806dc0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 806dc10:	51eb851f 	.word	0x51eb851f

0806dc14 <__NVIC_SetPriority>:
{
 806dc14:	b480      	push	{r7}
 806dc16:	b083      	sub	sp, #12
 806dc18:	af00      	add	r7, sp, #0
 806dc1a:	4603      	mov	r3, r0
 806dc1c:	6039      	str	r1, [r7, #0]
 806dc1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 806dc20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 806dc24:	2b00      	cmp	r3, #0
 806dc26:	db0a      	blt.n	806dc3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 806dc28:	683b      	ldr	r3, [r7, #0]
 806dc2a:	b2da      	uxtb	r2, r3
 806dc2c:	490c      	ldr	r1, [pc, #48]	@ (806dc60 <__NVIC_SetPriority+0x4c>)
 806dc2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 806dc32:	0112      	lsls	r2, r2, #4
 806dc34:	b2d2      	uxtb	r2, r2
 806dc36:	440b      	add	r3, r1
 806dc38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 806dc3c:	e00a      	b.n	806dc54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 806dc3e:	683b      	ldr	r3, [r7, #0]
 806dc40:	b2da      	uxtb	r2, r3
 806dc42:	4908      	ldr	r1, [pc, #32]	@ (806dc64 <__NVIC_SetPriority+0x50>)
 806dc44:	79fb      	ldrb	r3, [r7, #7]
 806dc46:	f003 030f 	and.w	r3, r3, #15
 806dc4a:	3b04      	subs	r3, #4
 806dc4c:	0112      	lsls	r2, r2, #4
 806dc4e:	b2d2      	uxtb	r2, r2
 806dc50:	440b      	add	r3, r1
 806dc52:	761a      	strb	r2, [r3, #24]
}
 806dc54:	bf00      	nop
 806dc56:	370c      	adds	r7, #12
 806dc58:	46bd      	mov	sp, r7
 806dc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 806dc5e:	4770      	bx	lr
 806dc60:	e000e100 	.word	0xe000e100
 806dc64:	e000ed00 	.word	0xe000ed00

0806dc68 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 806dc68:	b580      	push	{r7, lr}
 806dc6a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 806dc6c:	4b05      	ldr	r3, [pc, #20]	@ (806dc84 <SysTick_Handler+0x1c>)
 806dc6e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 806dc70:	f002 fd42 	bl	80706f8 <xTaskGetSchedulerState>
 806dc74:	4603      	mov	r3, r0
 806dc76:	2b01      	cmp	r3, #1
 806dc78:	d001      	beq.n	806dc7e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 806dc7a:	f000 fe45 	bl	806e908 <xPortSysTickHandler>
  }
}
 806dc7e:	bf00      	nop
 806dc80:	bd80      	pop	{r7, pc}
 806dc82:	bf00      	nop
 806dc84:	e000e010 	.word	0xe000e010

0806dc88 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 806dc88:	b580      	push	{r7, lr}
 806dc8a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 806dc8c:	2100      	movs	r1, #0
 806dc8e:	f06f 0004 	mvn.w	r0, #4
 806dc92:	f7ff ffbf 	bl	806dc14 <__NVIC_SetPriority>
#endif
}
 806dc96:	bf00      	nop
 806dc98:	bd80      	pop	{r7, pc}
	...

0806dc9c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 806dc9c:	b480      	push	{r7}
 806dc9e:	b083      	sub	sp, #12
 806dca0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806dca2:	f3ef 8305 	mrs	r3, IPSR
 806dca6:	603b      	str	r3, [r7, #0]
  return(result);
 806dca8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 806dcaa:	2b00      	cmp	r3, #0
 806dcac:	d003      	beq.n	806dcb6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 806dcae:	f06f 0305 	mvn.w	r3, #5
 806dcb2:	607b      	str	r3, [r7, #4]
 806dcb4:	e00c      	b.n	806dcd0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 806dcb6:	4b0a      	ldr	r3, [pc, #40]	@ (806dce0 <osKernelInitialize+0x44>)
 806dcb8:	681b      	ldr	r3, [r3, #0]
 806dcba:	2b00      	cmp	r3, #0
 806dcbc:	d105      	bne.n	806dcca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 806dcbe:	4b08      	ldr	r3, [pc, #32]	@ (806dce0 <osKernelInitialize+0x44>)
 806dcc0:	2201      	movs	r2, #1
 806dcc2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 806dcc4:	2300      	movs	r3, #0
 806dcc6:	607b      	str	r3, [r7, #4]
 806dcc8:	e002      	b.n	806dcd0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 806dcca:	f04f 33ff 	mov.w	r3, #4294967295
 806dcce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 806dcd0:	687b      	ldr	r3, [r7, #4]
}
 806dcd2:	4618      	mov	r0, r3
 806dcd4:	370c      	adds	r7, #12
 806dcd6:	46bd      	mov	sp, r7
 806dcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 806dcdc:	4770      	bx	lr
 806dcde:	bf00      	nop
 806dce0:	20010e34 	.word	0x20010e34

0806dce4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 806dce4:	b580      	push	{r7, lr}
 806dce6:	b082      	sub	sp, #8
 806dce8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806dcea:	f3ef 8305 	mrs	r3, IPSR
 806dcee:	603b      	str	r3, [r7, #0]
  return(result);
 806dcf0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 806dcf2:	2b00      	cmp	r3, #0
 806dcf4:	d003      	beq.n	806dcfe <osKernelStart+0x1a>
    stat = osErrorISR;
 806dcf6:	f06f 0305 	mvn.w	r3, #5
 806dcfa:	607b      	str	r3, [r7, #4]
 806dcfc:	e010      	b.n	806dd20 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 806dcfe:	4b0b      	ldr	r3, [pc, #44]	@ (806dd2c <osKernelStart+0x48>)
 806dd00:	681b      	ldr	r3, [r3, #0]
 806dd02:	2b01      	cmp	r3, #1
 806dd04:	d109      	bne.n	806dd1a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 806dd06:	f7ff ffbf 	bl	806dc88 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 806dd0a:	4b08      	ldr	r3, [pc, #32]	@ (806dd2c <osKernelStart+0x48>)
 806dd0c:	2202      	movs	r2, #2
 806dd0e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 806dd10:	f001 fecc 	bl	806faac <vTaskStartScheduler>
      stat = osOK;
 806dd14:	2300      	movs	r3, #0
 806dd16:	607b      	str	r3, [r7, #4]
 806dd18:	e002      	b.n	806dd20 <osKernelStart+0x3c>
    } else {
      stat = osError;
 806dd1a:	f04f 33ff 	mov.w	r3, #4294967295
 806dd1e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 806dd20:	687b      	ldr	r3, [r7, #4]
}
 806dd22:	4618      	mov	r0, r3
 806dd24:	3708      	adds	r7, #8
 806dd26:	46bd      	mov	sp, r7
 806dd28:	bd80      	pop	{r7, pc}
 806dd2a:	bf00      	nop
 806dd2c:	20010e34 	.word	0x20010e34

0806dd30 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 806dd30:	b580      	push	{r7, lr}
 806dd32:	b08e      	sub	sp, #56	@ 0x38
 806dd34:	af04      	add	r7, sp, #16
 806dd36:	60f8      	str	r0, [r7, #12]
 806dd38:	60b9      	str	r1, [r7, #8]
 806dd3a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 806dd3c:	2300      	movs	r3, #0
 806dd3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806dd40:	f3ef 8305 	mrs	r3, IPSR
 806dd44:	617b      	str	r3, [r7, #20]
  return(result);
 806dd46:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 806dd48:	2b00      	cmp	r3, #0
 806dd4a:	d17f      	bne.n	806de4c <osThreadNew+0x11c>
 806dd4c:	68fb      	ldr	r3, [r7, #12]
 806dd4e:	2b00      	cmp	r3, #0
 806dd50:	d07c      	beq.n	806de4c <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 806dd52:	2380      	movs	r3, #128	@ 0x80
 806dd54:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 806dd56:	2318      	movs	r3, #24
 806dd58:	61fb      	str	r3, [r7, #28]

    name = NULL;
 806dd5a:	2300      	movs	r3, #0
 806dd5c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 806dd5e:	f04f 33ff 	mov.w	r3, #4294967295
 806dd62:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 806dd64:	687b      	ldr	r3, [r7, #4]
 806dd66:	2b00      	cmp	r3, #0
 806dd68:	d046      	beq.n	806ddf8 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 806dd6a:	687b      	ldr	r3, [r7, #4]
 806dd6c:	681b      	ldr	r3, [r3, #0]
 806dd6e:	2b00      	cmp	r3, #0
 806dd70:	d002      	beq.n	806dd78 <osThreadNew+0x48>
        name = attr->name;
 806dd72:	687b      	ldr	r3, [r7, #4]
 806dd74:	681b      	ldr	r3, [r3, #0]
 806dd76:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 806dd78:	687b      	ldr	r3, [r7, #4]
 806dd7a:	699b      	ldr	r3, [r3, #24]
 806dd7c:	2b00      	cmp	r3, #0
 806dd7e:	d002      	beq.n	806dd86 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 806dd80:	687b      	ldr	r3, [r7, #4]
 806dd82:	699b      	ldr	r3, [r3, #24]
 806dd84:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 806dd86:	69fb      	ldr	r3, [r7, #28]
 806dd88:	2b00      	cmp	r3, #0
 806dd8a:	d008      	beq.n	806dd9e <osThreadNew+0x6e>
 806dd8c:	69fb      	ldr	r3, [r7, #28]
 806dd8e:	2b38      	cmp	r3, #56	@ 0x38
 806dd90:	d805      	bhi.n	806dd9e <osThreadNew+0x6e>
 806dd92:	687b      	ldr	r3, [r7, #4]
 806dd94:	685b      	ldr	r3, [r3, #4]
 806dd96:	f003 0301 	and.w	r3, r3, #1
 806dd9a:	2b00      	cmp	r3, #0
 806dd9c:	d001      	beq.n	806dda2 <osThreadNew+0x72>
        return (NULL);
 806dd9e:	2300      	movs	r3, #0
 806dda0:	e055      	b.n	806de4e <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 806dda2:	687b      	ldr	r3, [r7, #4]
 806dda4:	695b      	ldr	r3, [r3, #20]
 806dda6:	2b00      	cmp	r3, #0
 806dda8:	d003      	beq.n	806ddb2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 806ddaa:	687b      	ldr	r3, [r7, #4]
 806ddac:	695b      	ldr	r3, [r3, #20]
 806ddae:	089b      	lsrs	r3, r3, #2
 806ddb0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 806ddb2:	687b      	ldr	r3, [r7, #4]
 806ddb4:	689b      	ldr	r3, [r3, #8]
 806ddb6:	2b00      	cmp	r3, #0
 806ddb8:	d00f      	beq.n	806ddda <osThreadNew+0xaa>
 806ddba:	687b      	ldr	r3, [r7, #4]
 806ddbc:	68db      	ldr	r3, [r3, #12]
 806ddbe:	f5b3 7fd4 	cmp.w	r3, #424	@ 0x1a8
 806ddc2:	d30a      	bcc.n	806ddda <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 806ddc4:	687b      	ldr	r3, [r7, #4]
 806ddc6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 806ddc8:	2b00      	cmp	r3, #0
 806ddca:	d006      	beq.n	806ddda <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 806ddcc:	687b      	ldr	r3, [r7, #4]
 806ddce:	695b      	ldr	r3, [r3, #20]
 806ddd0:	2b00      	cmp	r3, #0
 806ddd2:	d002      	beq.n	806ddda <osThreadNew+0xaa>
        mem = 1;
 806ddd4:	2301      	movs	r3, #1
 806ddd6:	61bb      	str	r3, [r7, #24]
 806ddd8:	e010      	b.n	806ddfc <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 806ddda:	687b      	ldr	r3, [r7, #4]
 806dddc:	689b      	ldr	r3, [r3, #8]
 806ddde:	2b00      	cmp	r3, #0
 806dde0:	d10c      	bne.n	806ddfc <osThreadNew+0xcc>
 806dde2:	687b      	ldr	r3, [r7, #4]
 806dde4:	68db      	ldr	r3, [r3, #12]
 806dde6:	2b00      	cmp	r3, #0
 806dde8:	d108      	bne.n	806ddfc <osThreadNew+0xcc>
 806ddea:	687b      	ldr	r3, [r7, #4]
 806ddec:	691b      	ldr	r3, [r3, #16]
 806ddee:	2b00      	cmp	r3, #0
 806ddf0:	d104      	bne.n	806ddfc <osThreadNew+0xcc>
          mem = 0;
 806ddf2:	2300      	movs	r3, #0
 806ddf4:	61bb      	str	r3, [r7, #24]
 806ddf6:	e001      	b.n	806ddfc <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 806ddf8:	2300      	movs	r3, #0
 806ddfa:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 806ddfc:	69bb      	ldr	r3, [r7, #24]
 806ddfe:	2b01      	cmp	r3, #1
 806de00:	d110      	bne.n	806de24 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 806de02:	687b      	ldr	r3, [r7, #4]
 806de04:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 806de06:	687a      	ldr	r2, [r7, #4]
 806de08:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 806de0a:	9202      	str	r2, [sp, #8]
 806de0c:	9301      	str	r3, [sp, #4]
 806de0e:	69fb      	ldr	r3, [r7, #28]
 806de10:	9300      	str	r3, [sp, #0]
 806de12:	68bb      	ldr	r3, [r7, #8]
 806de14:	6a3a      	ldr	r2, [r7, #32]
 806de16:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 806de18:	68f8      	ldr	r0, [r7, #12]
 806de1a:	f001 fb01 	bl	806f420 <xTaskCreateStatic>
 806de1e:	4603      	mov	r3, r0
 806de20:	613b      	str	r3, [r7, #16]
 806de22:	e013      	b.n	806de4c <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 806de24:	69bb      	ldr	r3, [r7, #24]
 806de26:	2b00      	cmp	r3, #0
 806de28:	d110      	bne.n	806de4c <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 806de2a:	6a3b      	ldr	r3, [r7, #32]
 806de2c:	b29a      	uxth	r2, r3
 806de2e:	f107 0310 	add.w	r3, r7, #16
 806de32:	9301      	str	r3, [sp, #4]
 806de34:	69fb      	ldr	r3, [r7, #28]
 806de36:	9300      	str	r3, [sp, #0]
 806de38:	68bb      	ldr	r3, [r7, #8]
 806de3a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 806de3c:	68f8      	ldr	r0, [r7, #12]
 806de3e:	f001 fb51 	bl	806f4e4 <xTaskCreate>
 806de42:	4603      	mov	r3, r0
 806de44:	2b01      	cmp	r3, #1
 806de46:	d001      	beq.n	806de4c <osThreadNew+0x11c>
            hTask = NULL;
 806de48:	2300      	movs	r3, #0
 806de4a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 806de4c:	693b      	ldr	r3, [r7, #16]
}
 806de4e:	4618      	mov	r0, r3
 806de50:	3728      	adds	r7, #40	@ 0x28
 806de52:	46bd      	mov	sp, r7
 806de54:	bd80      	pop	{r7, pc}

0806de56 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 806de56:	b580      	push	{r7, lr}
 806de58:	b084      	sub	sp, #16
 806de5a:	af00      	add	r7, sp, #0
 806de5c:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 806de5e:	6878      	ldr	r0, [r7, #4]
 806de60:	f003 f930 	bl	80710c4 <pvTimerGetTimerID>
 806de64:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 806de66:	68fb      	ldr	r3, [r7, #12]
 806de68:	2b00      	cmp	r3, #0
 806de6a:	d005      	beq.n	806de78 <TimerCallback+0x22>
    callb->func (callb->arg);
 806de6c:	68fb      	ldr	r3, [r7, #12]
 806de6e:	681b      	ldr	r3, [r3, #0]
 806de70:	68fa      	ldr	r2, [r7, #12]
 806de72:	6852      	ldr	r2, [r2, #4]
 806de74:	4610      	mov	r0, r2
 806de76:	4798      	blx	r3
  }
}
 806de78:	bf00      	nop
 806de7a:	3710      	adds	r7, #16
 806de7c:	46bd      	mov	sp, r7
 806de7e:	bd80      	pop	{r7, pc}

0806de80 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 806de80:	b580      	push	{r7, lr}
 806de82:	b08c      	sub	sp, #48	@ 0x30
 806de84:	af02      	add	r7, sp, #8
 806de86:	60f8      	str	r0, [r7, #12]
 806de88:	607a      	str	r2, [r7, #4]
 806de8a:	603b      	str	r3, [r7, #0]
 806de8c:	460b      	mov	r3, r1
 806de8e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 806de90:	2300      	movs	r3, #0
 806de92:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806de94:	f3ef 8305 	mrs	r3, IPSR
 806de98:	613b      	str	r3, [r7, #16]
  return(result);
 806de9a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 806de9c:	2b00      	cmp	r3, #0
 806de9e:	d163      	bne.n	806df68 <osTimerNew+0xe8>
 806dea0:	68fb      	ldr	r3, [r7, #12]
 806dea2:	2b00      	cmp	r3, #0
 806dea4:	d060      	beq.n	806df68 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 806dea6:	2008      	movs	r0, #8
 806dea8:	f000 f8c8 	bl	806e03c <pvPortMalloc>
 806deac:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 806deae:	697b      	ldr	r3, [r7, #20]
 806deb0:	2b00      	cmp	r3, #0
 806deb2:	d059      	beq.n	806df68 <osTimerNew+0xe8>
      callb->func = func;
 806deb4:	697b      	ldr	r3, [r7, #20]
 806deb6:	68fa      	ldr	r2, [r7, #12]
 806deb8:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 806deba:	697b      	ldr	r3, [r7, #20]
 806debc:	687a      	ldr	r2, [r7, #4]
 806debe:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 806dec0:	7afb      	ldrb	r3, [r7, #11]
 806dec2:	2b00      	cmp	r3, #0
 806dec4:	d102      	bne.n	806decc <osTimerNew+0x4c>
        reload = pdFALSE;
 806dec6:	2300      	movs	r3, #0
 806dec8:	61fb      	str	r3, [r7, #28]
 806deca:	e001      	b.n	806ded0 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 806decc:	2301      	movs	r3, #1
 806dece:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 806ded0:	f04f 33ff 	mov.w	r3, #4294967295
 806ded4:	61bb      	str	r3, [r7, #24]
      name = NULL;
 806ded6:	2300      	movs	r3, #0
 806ded8:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 806deda:	683b      	ldr	r3, [r7, #0]
 806dedc:	2b00      	cmp	r3, #0
 806dede:	d01c      	beq.n	806df1a <osTimerNew+0x9a>
        if (attr->name != NULL) {
 806dee0:	683b      	ldr	r3, [r7, #0]
 806dee2:	681b      	ldr	r3, [r3, #0]
 806dee4:	2b00      	cmp	r3, #0
 806dee6:	d002      	beq.n	806deee <osTimerNew+0x6e>
          name = attr->name;
 806dee8:	683b      	ldr	r3, [r7, #0]
 806deea:	681b      	ldr	r3, [r3, #0]
 806deec:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 806deee:	683b      	ldr	r3, [r7, #0]
 806def0:	689b      	ldr	r3, [r3, #8]
 806def2:	2b00      	cmp	r3, #0
 806def4:	d006      	beq.n	806df04 <osTimerNew+0x84>
 806def6:	683b      	ldr	r3, [r7, #0]
 806def8:	68db      	ldr	r3, [r3, #12]
 806defa:	2b2b      	cmp	r3, #43	@ 0x2b
 806defc:	d902      	bls.n	806df04 <osTimerNew+0x84>
          mem = 1;
 806defe:	2301      	movs	r3, #1
 806df00:	61bb      	str	r3, [r7, #24]
 806df02:	e00c      	b.n	806df1e <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 806df04:	683b      	ldr	r3, [r7, #0]
 806df06:	689b      	ldr	r3, [r3, #8]
 806df08:	2b00      	cmp	r3, #0
 806df0a:	d108      	bne.n	806df1e <osTimerNew+0x9e>
 806df0c:	683b      	ldr	r3, [r7, #0]
 806df0e:	68db      	ldr	r3, [r3, #12]
 806df10:	2b00      	cmp	r3, #0
 806df12:	d104      	bne.n	806df1e <osTimerNew+0x9e>
            mem = 0;
 806df14:	2300      	movs	r3, #0
 806df16:	61bb      	str	r3, [r7, #24]
 806df18:	e001      	b.n	806df1e <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 806df1a:	2300      	movs	r3, #0
 806df1c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 806df1e:	69bb      	ldr	r3, [r7, #24]
 806df20:	2b01      	cmp	r3, #1
 806df22:	d10c      	bne.n	806df3e <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 806df24:	683b      	ldr	r3, [r7, #0]
 806df26:	689b      	ldr	r3, [r3, #8]
 806df28:	9301      	str	r3, [sp, #4]
 806df2a:	4b12      	ldr	r3, [pc, #72]	@ (806df74 <osTimerNew+0xf4>)
 806df2c:	9300      	str	r3, [sp, #0]
 806df2e:	697b      	ldr	r3, [r7, #20]
 806df30:	69fa      	ldr	r2, [r7, #28]
 806df32:	2101      	movs	r1, #1
 806df34:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 806df36:	f002 fd38 	bl	80709aa <xTimerCreateStatic>
 806df3a:	6238      	str	r0, [r7, #32]
 806df3c:	e00b      	b.n	806df56 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 806df3e:	69bb      	ldr	r3, [r7, #24]
 806df40:	2b00      	cmp	r3, #0
 806df42:	d108      	bne.n	806df56 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 806df44:	4b0b      	ldr	r3, [pc, #44]	@ (806df74 <osTimerNew+0xf4>)
 806df46:	9300      	str	r3, [sp, #0]
 806df48:	697b      	ldr	r3, [r7, #20]
 806df4a:	69fa      	ldr	r2, [r7, #28]
 806df4c:	2101      	movs	r1, #1
 806df4e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 806df50:	f002 fd0a 	bl	8070968 <xTimerCreate>
 806df54:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 806df56:	6a3b      	ldr	r3, [r7, #32]
 806df58:	2b00      	cmp	r3, #0
 806df5a:	d105      	bne.n	806df68 <osTimerNew+0xe8>
 806df5c:	697b      	ldr	r3, [r7, #20]
 806df5e:	2b00      	cmp	r3, #0
 806df60:	d002      	beq.n	806df68 <osTimerNew+0xe8>
        vPortFree (callb);
 806df62:	6978      	ldr	r0, [r7, #20]
 806df64:	f000 f93e 	bl	806e1e4 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 806df68:	6a3b      	ldr	r3, [r7, #32]
}
 806df6a:	4618      	mov	r0, r3
 806df6c:	3728      	adds	r7, #40	@ 0x28
 806df6e:	46bd      	mov	sp, r7
 806df70:	bd80      	pop	{r7, pc}
 806df72:	bf00      	nop
 806df74:	0806de57 	.word	0x0806de57

0806df78 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 806df78:	b580      	push	{r7, lr}
 806df7a:	b088      	sub	sp, #32
 806df7c:	af02      	add	r7, sp, #8
 806df7e:	6078      	str	r0, [r7, #4]
 806df80:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 806df82:	687b      	ldr	r3, [r7, #4]
 806df84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806df86:	f3ef 8305 	mrs	r3, IPSR
 806df8a:	60fb      	str	r3, [r7, #12]
  return(result);
 806df8c:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 806df8e:	2b00      	cmp	r3, #0
 806df90:	d003      	beq.n	806df9a <osTimerStart+0x22>
    stat = osErrorISR;
 806df92:	f06f 0305 	mvn.w	r3, #5
 806df96:	617b      	str	r3, [r7, #20]
 806df98:	e017      	b.n	806dfca <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 806df9a:	693b      	ldr	r3, [r7, #16]
 806df9c:	2b00      	cmp	r3, #0
 806df9e:	d103      	bne.n	806dfa8 <osTimerStart+0x30>
    stat = osErrorParameter;
 806dfa0:	f06f 0303 	mvn.w	r3, #3
 806dfa4:	617b      	str	r3, [r7, #20]
 806dfa6:	e010      	b.n	806dfca <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 806dfa8:	2300      	movs	r3, #0
 806dfaa:	9300      	str	r3, [sp, #0]
 806dfac:	2300      	movs	r3, #0
 806dfae:	683a      	ldr	r2, [r7, #0]
 806dfb0:	2104      	movs	r1, #4
 806dfb2:	6938      	ldr	r0, [r7, #16]
 806dfb4:	f002 fd76 	bl	8070aa4 <xTimerGenericCommand>
 806dfb8:	4603      	mov	r3, r0
 806dfba:	2b01      	cmp	r3, #1
 806dfbc:	d102      	bne.n	806dfc4 <osTimerStart+0x4c>
      stat = osOK;
 806dfbe:	2300      	movs	r3, #0
 806dfc0:	617b      	str	r3, [r7, #20]
 806dfc2:	e002      	b.n	806dfca <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 806dfc4:	f06f 0302 	mvn.w	r3, #2
 806dfc8:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 806dfca:	697b      	ldr	r3, [r7, #20]
}
 806dfcc:	4618      	mov	r0, r3
 806dfce:	3718      	adds	r7, #24
 806dfd0:	46bd      	mov	sp, r7
 806dfd2:	bd80      	pop	{r7, pc}

0806dfd4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 806dfd4:	b480      	push	{r7}
 806dfd6:	b085      	sub	sp, #20
 806dfd8:	af00      	add	r7, sp, #0
 806dfda:	60f8      	str	r0, [r7, #12]
 806dfdc:	60b9      	str	r1, [r7, #8]
 806dfde:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 806dfe0:	68fb      	ldr	r3, [r7, #12]
 806dfe2:	4a07      	ldr	r2, [pc, #28]	@ (806e000 <vApplicationGetIdleTaskMemory+0x2c>)
 806dfe4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 806dfe6:	68bb      	ldr	r3, [r7, #8]
 806dfe8:	4a06      	ldr	r2, [pc, #24]	@ (806e004 <vApplicationGetIdleTaskMemory+0x30>)
 806dfea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 806dfec:	687b      	ldr	r3, [r7, #4]
 806dfee:	2280      	movs	r2, #128	@ 0x80
 806dff0:	601a      	str	r2, [r3, #0]
}
 806dff2:	bf00      	nop
 806dff4:	3714      	adds	r7, #20
 806dff6:	46bd      	mov	sp, r7
 806dff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 806dffc:	4770      	bx	lr
 806dffe:	bf00      	nop
 806e000:	20010e38 	.word	0x20010e38
 806e004:	20010fe0 	.word	0x20010fe0

0806e008 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 806e008:	b480      	push	{r7}
 806e00a:	b085      	sub	sp, #20
 806e00c:	af00      	add	r7, sp, #0
 806e00e:	60f8      	str	r0, [r7, #12]
 806e010:	60b9      	str	r1, [r7, #8]
 806e012:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 806e014:	68fb      	ldr	r3, [r7, #12]
 806e016:	4a07      	ldr	r2, [pc, #28]	@ (806e034 <vApplicationGetTimerTaskMemory+0x2c>)
 806e018:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 806e01a:	68bb      	ldr	r3, [r7, #8]
 806e01c:	4a06      	ldr	r2, [pc, #24]	@ (806e038 <vApplicationGetTimerTaskMemory+0x30>)
 806e01e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 806e020:	687b      	ldr	r3, [r7, #4]
 806e022:	2280      	movs	r2, #128	@ 0x80
 806e024:	601a      	str	r2, [r3, #0]
}
 806e026:	bf00      	nop
 806e028:	3714      	adds	r7, #20
 806e02a:	46bd      	mov	sp, r7
 806e02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 806e030:	4770      	bx	lr
 806e032:	bf00      	nop
 806e034:	200111e0 	.word	0x200111e0
 806e038:	20011388 	.word	0x20011388

0806e03c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 806e03c:	b580      	push	{r7, lr}
 806e03e:	b08a      	sub	sp, #40	@ 0x28
 806e040:	af00      	add	r7, sp, #0
 806e042:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 806e044:	2300      	movs	r3, #0
 806e046:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 806e048:	f001 fda4 	bl	806fb94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 806e04c:	4b5f      	ldr	r3, [pc, #380]	@ (806e1cc <pvPortMalloc+0x190>)
 806e04e:	681b      	ldr	r3, [r3, #0]
 806e050:	2b00      	cmp	r3, #0
 806e052:	d101      	bne.n	806e058 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 806e054:	f000 f92a 	bl	806e2ac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 806e058:	4b5d      	ldr	r3, [pc, #372]	@ (806e1d0 <pvPortMalloc+0x194>)
 806e05a:	681a      	ldr	r2, [r3, #0]
 806e05c:	687b      	ldr	r3, [r7, #4]
 806e05e:	4013      	ands	r3, r2
 806e060:	2b00      	cmp	r3, #0
 806e062:	f040 8095 	bne.w	806e190 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 806e066:	687b      	ldr	r3, [r7, #4]
 806e068:	2b00      	cmp	r3, #0
 806e06a:	d01e      	beq.n	806e0aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 806e06c:	2208      	movs	r2, #8
 806e06e:	687b      	ldr	r3, [r7, #4]
 806e070:	4413      	add	r3, r2
 806e072:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 806e074:	687b      	ldr	r3, [r7, #4]
 806e076:	f003 0307 	and.w	r3, r3, #7
 806e07a:	2b00      	cmp	r3, #0
 806e07c:	d015      	beq.n	806e0aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 806e07e:	687b      	ldr	r3, [r7, #4]
 806e080:	f023 0307 	bic.w	r3, r3, #7
 806e084:	3308      	adds	r3, #8
 806e086:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 806e088:	687b      	ldr	r3, [r7, #4]
 806e08a:	f003 0307 	and.w	r3, r3, #7
 806e08e:	2b00      	cmp	r3, #0
 806e090:	d00b      	beq.n	806e0aa <pvPortMalloc+0x6e>
	__asm volatile
 806e092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 806e096:	f383 8811 	msr	BASEPRI, r3
 806e09a:	f3bf 8f6f 	isb	sy
 806e09e:	f3bf 8f4f 	dsb	sy
 806e0a2:	617b      	str	r3, [r7, #20]
}
 806e0a4:	bf00      	nop
 806e0a6:	bf00      	nop
 806e0a8:	e7fd      	b.n	806e0a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 806e0aa:	687b      	ldr	r3, [r7, #4]
 806e0ac:	2b00      	cmp	r3, #0
 806e0ae:	d06f      	beq.n	806e190 <pvPortMalloc+0x154>
 806e0b0:	4b48      	ldr	r3, [pc, #288]	@ (806e1d4 <pvPortMalloc+0x198>)
 806e0b2:	681b      	ldr	r3, [r3, #0]
 806e0b4:	687a      	ldr	r2, [r7, #4]
 806e0b6:	429a      	cmp	r2, r3
 806e0b8:	d86a      	bhi.n	806e190 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 806e0ba:	4b47      	ldr	r3, [pc, #284]	@ (806e1d8 <pvPortMalloc+0x19c>)
 806e0bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 806e0be:	4b46      	ldr	r3, [pc, #280]	@ (806e1d8 <pvPortMalloc+0x19c>)
 806e0c0:	681b      	ldr	r3, [r3, #0]
 806e0c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 806e0c4:	e004      	b.n	806e0d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 806e0c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 806e0c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 806e0ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 806e0cc:	681b      	ldr	r3, [r3, #0]
 806e0ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 806e0d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 806e0d2:	685b      	ldr	r3, [r3, #4]
 806e0d4:	687a      	ldr	r2, [r7, #4]
 806e0d6:	429a      	cmp	r2, r3
 806e0d8:	d903      	bls.n	806e0e2 <pvPortMalloc+0xa6>
 806e0da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 806e0dc:	681b      	ldr	r3, [r3, #0]
 806e0de:	2b00      	cmp	r3, #0
 806e0e0:	d1f1      	bne.n	806e0c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 806e0e2:	4b3a      	ldr	r3, [pc, #232]	@ (806e1cc <pvPortMalloc+0x190>)
 806e0e4:	681b      	ldr	r3, [r3, #0]
 806e0e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 806e0e8:	429a      	cmp	r2, r3
 806e0ea:	d051      	beq.n	806e190 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 806e0ec:	6a3b      	ldr	r3, [r7, #32]
 806e0ee:	681b      	ldr	r3, [r3, #0]
 806e0f0:	2208      	movs	r2, #8
 806e0f2:	4413      	add	r3, r2
 806e0f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 806e0f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 806e0f8:	681a      	ldr	r2, [r3, #0]
 806e0fa:	6a3b      	ldr	r3, [r7, #32]
 806e0fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 806e0fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 806e100:	685a      	ldr	r2, [r3, #4]
 806e102:	687b      	ldr	r3, [r7, #4]
 806e104:	1ad2      	subs	r2, r2, r3
 806e106:	2308      	movs	r3, #8
 806e108:	005b      	lsls	r3, r3, #1
 806e10a:	429a      	cmp	r2, r3
 806e10c:	d920      	bls.n	806e150 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 806e10e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 806e110:	687b      	ldr	r3, [r7, #4]
 806e112:	4413      	add	r3, r2
 806e114:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 806e116:	69bb      	ldr	r3, [r7, #24]
 806e118:	f003 0307 	and.w	r3, r3, #7
 806e11c:	2b00      	cmp	r3, #0
 806e11e:	d00b      	beq.n	806e138 <pvPortMalloc+0xfc>
	__asm volatile
 806e120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 806e124:	f383 8811 	msr	BASEPRI, r3
 806e128:	f3bf 8f6f 	isb	sy
 806e12c:	f3bf 8f4f 	dsb	sy
 806e130:	613b      	str	r3, [r7, #16]
}
 806e132:	bf00      	nop
 806e134:	bf00      	nop
 806e136:	e7fd      	b.n	806e134 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 806e138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 806e13a:	685a      	ldr	r2, [r3, #4]
 806e13c:	687b      	ldr	r3, [r7, #4]
 806e13e:	1ad2      	subs	r2, r2, r3
 806e140:	69bb      	ldr	r3, [r7, #24]
 806e142:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 806e144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 806e146:	687a      	ldr	r2, [r7, #4]
 806e148:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 806e14a:	69b8      	ldr	r0, [r7, #24]
 806e14c:	f000 f910 	bl	806e370 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 806e150:	4b20      	ldr	r3, [pc, #128]	@ (806e1d4 <pvPortMalloc+0x198>)
 806e152:	681a      	ldr	r2, [r3, #0]
 806e154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 806e156:	685b      	ldr	r3, [r3, #4]
 806e158:	1ad3      	subs	r3, r2, r3
 806e15a:	4a1e      	ldr	r2, [pc, #120]	@ (806e1d4 <pvPortMalloc+0x198>)
 806e15c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 806e15e:	4b1d      	ldr	r3, [pc, #116]	@ (806e1d4 <pvPortMalloc+0x198>)
 806e160:	681a      	ldr	r2, [r3, #0]
 806e162:	4b1e      	ldr	r3, [pc, #120]	@ (806e1dc <pvPortMalloc+0x1a0>)
 806e164:	681b      	ldr	r3, [r3, #0]
 806e166:	429a      	cmp	r2, r3
 806e168:	d203      	bcs.n	806e172 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 806e16a:	4b1a      	ldr	r3, [pc, #104]	@ (806e1d4 <pvPortMalloc+0x198>)
 806e16c:	681b      	ldr	r3, [r3, #0]
 806e16e:	4a1b      	ldr	r2, [pc, #108]	@ (806e1dc <pvPortMalloc+0x1a0>)
 806e170:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 806e172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 806e174:	685a      	ldr	r2, [r3, #4]
 806e176:	4b16      	ldr	r3, [pc, #88]	@ (806e1d0 <pvPortMalloc+0x194>)
 806e178:	681b      	ldr	r3, [r3, #0]
 806e17a:	431a      	orrs	r2, r3
 806e17c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 806e17e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 806e180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 806e182:	2200      	movs	r2, #0
 806e184:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 806e186:	4b16      	ldr	r3, [pc, #88]	@ (806e1e0 <pvPortMalloc+0x1a4>)
 806e188:	681b      	ldr	r3, [r3, #0]
 806e18a:	3301      	adds	r3, #1
 806e18c:	4a14      	ldr	r2, [pc, #80]	@ (806e1e0 <pvPortMalloc+0x1a4>)
 806e18e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 806e190:	f001 fd0e 	bl	806fbb0 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 806e194:	69fb      	ldr	r3, [r7, #28]
 806e196:	2b00      	cmp	r3, #0
 806e198:	d101      	bne.n	806e19e <pvPortMalloc+0x162>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 806e19a:	f7f7 fce7 	bl	8065b6c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 806e19e:	69fb      	ldr	r3, [r7, #28]
 806e1a0:	f003 0307 	and.w	r3, r3, #7
 806e1a4:	2b00      	cmp	r3, #0
 806e1a6:	d00b      	beq.n	806e1c0 <pvPortMalloc+0x184>
	__asm volatile
 806e1a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 806e1ac:	f383 8811 	msr	BASEPRI, r3
 806e1b0:	f3bf 8f6f 	isb	sy
 806e1b4:	f3bf 8f4f 	dsb	sy
 806e1b8:	60fb      	str	r3, [r7, #12]
}
 806e1ba:	bf00      	nop
 806e1bc:	bf00      	nop
 806e1be:	e7fd      	b.n	806e1bc <pvPortMalloc+0x180>
	return pvReturn;
 806e1c0:	69fb      	ldr	r3, [r7, #28]
}
 806e1c2:	4618      	mov	r0, r3
 806e1c4:	3728      	adds	r7, #40	@ 0x28
 806e1c6:	46bd      	mov	sp, r7
 806e1c8:	bd80      	pop	{r7, pc}
 806e1ca:	bf00      	nop
 806e1cc:	20015028 	.word	0x20015028
 806e1d0:	2001503c 	.word	0x2001503c
 806e1d4:	2001502c 	.word	0x2001502c
 806e1d8:	20015020 	.word	0x20015020
 806e1dc:	20015030 	.word	0x20015030
 806e1e0:	20015034 	.word	0x20015034

0806e1e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 806e1e4:	b580      	push	{r7, lr}
 806e1e6:	b086      	sub	sp, #24
 806e1e8:	af00      	add	r7, sp, #0
 806e1ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 806e1ec:	687b      	ldr	r3, [r7, #4]
 806e1ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 806e1f0:	687b      	ldr	r3, [r7, #4]
 806e1f2:	2b00      	cmp	r3, #0
 806e1f4:	d04f      	beq.n	806e296 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 806e1f6:	2308      	movs	r3, #8
 806e1f8:	425b      	negs	r3, r3
 806e1fa:	697a      	ldr	r2, [r7, #20]
 806e1fc:	4413      	add	r3, r2
 806e1fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 806e200:	697b      	ldr	r3, [r7, #20]
 806e202:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 806e204:	693b      	ldr	r3, [r7, #16]
 806e206:	685a      	ldr	r2, [r3, #4]
 806e208:	4b25      	ldr	r3, [pc, #148]	@ (806e2a0 <vPortFree+0xbc>)
 806e20a:	681b      	ldr	r3, [r3, #0]
 806e20c:	4013      	ands	r3, r2
 806e20e:	2b00      	cmp	r3, #0
 806e210:	d10b      	bne.n	806e22a <vPortFree+0x46>
	__asm volatile
 806e212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 806e216:	f383 8811 	msr	BASEPRI, r3
 806e21a:	f3bf 8f6f 	isb	sy
 806e21e:	f3bf 8f4f 	dsb	sy
 806e222:	60fb      	str	r3, [r7, #12]
}
 806e224:	bf00      	nop
 806e226:	bf00      	nop
 806e228:	e7fd      	b.n	806e226 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 806e22a:	693b      	ldr	r3, [r7, #16]
 806e22c:	681b      	ldr	r3, [r3, #0]
 806e22e:	2b00      	cmp	r3, #0
 806e230:	d00b      	beq.n	806e24a <vPortFree+0x66>
	__asm volatile
 806e232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 806e236:	f383 8811 	msr	BASEPRI, r3
 806e23a:	f3bf 8f6f 	isb	sy
 806e23e:	f3bf 8f4f 	dsb	sy
 806e242:	60bb      	str	r3, [r7, #8]
}
 806e244:	bf00      	nop
 806e246:	bf00      	nop
 806e248:	e7fd      	b.n	806e246 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 806e24a:	693b      	ldr	r3, [r7, #16]
 806e24c:	685a      	ldr	r2, [r3, #4]
 806e24e:	4b14      	ldr	r3, [pc, #80]	@ (806e2a0 <vPortFree+0xbc>)
 806e250:	681b      	ldr	r3, [r3, #0]
 806e252:	4013      	ands	r3, r2
 806e254:	2b00      	cmp	r3, #0
 806e256:	d01e      	beq.n	806e296 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 806e258:	693b      	ldr	r3, [r7, #16]
 806e25a:	681b      	ldr	r3, [r3, #0]
 806e25c:	2b00      	cmp	r3, #0
 806e25e:	d11a      	bne.n	806e296 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 806e260:	693b      	ldr	r3, [r7, #16]
 806e262:	685a      	ldr	r2, [r3, #4]
 806e264:	4b0e      	ldr	r3, [pc, #56]	@ (806e2a0 <vPortFree+0xbc>)
 806e266:	681b      	ldr	r3, [r3, #0]
 806e268:	43db      	mvns	r3, r3
 806e26a:	401a      	ands	r2, r3
 806e26c:	693b      	ldr	r3, [r7, #16]
 806e26e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 806e270:	f001 fc90 	bl	806fb94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 806e274:	693b      	ldr	r3, [r7, #16]
 806e276:	685a      	ldr	r2, [r3, #4]
 806e278:	4b0a      	ldr	r3, [pc, #40]	@ (806e2a4 <vPortFree+0xc0>)
 806e27a:	681b      	ldr	r3, [r3, #0]
 806e27c:	4413      	add	r3, r2
 806e27e:	4a09      	ldr	r2, [pc, #36]	@ (806e2a4 <vPortFree+0xc0>)
 806e280:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 806e282:	6938      	ldr	r0, [r7, #16]
 806e284:	f000 f874 	bl	806e370 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 806e288:	4b07      	ldr	r3, [pc, #28]	@ (806e2a8 <vPortFree+0xc4>)
 806e28a:	681b      	ldr	r3, [r3, #0]
 806e28c:	3301      	adds	r3, #1
 806e28e:	4a06      	ldr	r2, [pc, #24]	@ (806e2a8 <vPortFree+0xc4>)
 806e290:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 806e292:	f001 fc8d 	bl	806fbb0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 806e296:	bf00      	nop
 806e298:	3718      	adds	r7, #24
 806e29a:	46bd      	mov	sp, r7
 806e29c:	bd80      	pop	{r7, pc}
 806e29e:	bf00      	nop
 806e2a0:	2001503c 	.word	0x2001503c
 806e2a4:	2001502c 	.word	0x2001502c
 806e2a8:	20015038 	.word	0x20015038

0806e2ac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 806e2ac:	b480      	push	{r7}
 806e2ae:	b085      	sub	sp, #20
 806e2b0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 806e2b2:	f643 2398 	movw	r3, #15000	@ 0x3a98
 806e2b6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 806e2b8:	4b27      	ldr	r3, [pc, #156]	@ (806e358 <prvHeapInit+0xac>)
 806e2ba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 806e2bc:	68fb      	ldr	r3, [r7, #12]
 806e2be:	f003 0307 	and.w	r3, r3, #7
 806e2c2:	2b00      	cmp	r3, #0
 806e2c4:	d00c      	beq.n	806e2e0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 806e2c6:	68fb      	ldr	r3, [r7, #12]
 806e2c8:	3307      	adds	r3, #7
 806e2ca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 806e2cc:	68fb      	ldr	r3, [r7, #12]
 806e2ce:	f023 0307 	bic.w	r3, r3, #7
 806e2d2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 806e2d4:	68ba      	ldr	r2, [r7, #8]
 806e2d6:	68fb      	ldr	r3, [r7, #12]
 806e2d8:	1ad3      	subs	r3, r2, r3
 806e2da:	4a1f      	ldr	r2, [pc, #124]	@ (806e358 <prvHeapInit+0xac>)
 806e2dc:	4413      	add	r3, r2
 806e2de:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 806e2e0:	68fb      	ldr	r3, [r7, #12]
 806e2e2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 806e2e4:	4a1d      	ldr	r2, [pc, #116]	@ (806e35c <prvHeapInit+0xb0>)
 806e2e6:	687b      	ldr	r3, [r7, #4]
 806e2e8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 806e2ea:	4b1c      	ldr	r3, [pc, #112]	@ (806e35c <prvHeapInit+0xb0>)
 806e2ec:	2200      	movs	r2, #0
 806e2ee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 806e2f0:	687b      	ldr	r3, [r7, #4]
 806e2f2:	68ba      	ldr	r2, [r7, #8]
 806e2f4:	4413      	add	r3, r2
 806e2f6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 806e2f8:	2208      	movs	r2, #8
 806e2fa:	68fb      	ldr	r3, [r7, #12]
 806e2fc:	1a9b      	subs	r3, r3, r2
 806e2fe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 806e300:	68fb      	ldr	r3, [r7, #12]
 806e302:	f023 0307 	bic.w	r3, r3, #7
 806e306:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 806e308:	68fb      	ldr	r3, [r7, #12]
 806e30a:	4a15      	ldr	r2, [pc, #84]	@ (806e360 <prvHeapInit+0xb4>)
 806e30c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 806e30e:	4b14      	ldr	r3, [pc, #80]	@ (806e360 <prvHeapInit+0xb4>)
 806e310:	681b      	ldr	r3, [r3, #0]
 806e312:	2200      	movs	r2, #0
 806e314:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 806e316:	4b12      	ldr	r3, [pc, #72]	@ (806e360 <prvHeapInit+0xb4>)
 806e318:	681b      	ldr	r3, [r3, #0]
 806e31a:	2200      	movs	r2, #0
 806e31c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 806e31e:	687b      	ldr	r3, [r7, #4]
 806e320:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 806e322:	683b      	ldr	r3, [r7, #0]
 806e324:	68fa      	ldr	r2, [r7, #12]
 806e326:	1ad2      	subs	r2, r2, r3
 806e328:	683b      	ldr	r3, [r7, #0]
 806e32a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 806e32c:	4b0c      	ldr	r3, [pc, #48]	@ (806e360 <prvHeapInit+0xb4>)
 806e32e:	681a      	ldr	r2, [r3, #0]
 806e330:	683b      	ldr	r3, [r7, #0]
 806e332:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 806e334:	683b      	ldr	r3, [r7, #0]
 806e336:	685b      	ldr	r3, [r3, #4]
 806e338:	4a0a      	ldr	r2, [pc, #40]	@ (806e364 <prvHeapInit+0xb8>)
 806e33a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 806e33c:	683b      	ldr	r3, [r7, #0]
 806e33e:	685b      	ldr	r3, [r3, #4]
 806e340:	4a09      	ldr	r2, [pc, #36]	@ (806e368 <prvHeapInit+0xbc>)
 806e342:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 806e344:	4b09      	ldr	r3, [pc, #36]	@ (806e36c <prvHeapInit+0xc0>)
 806e346:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 806e34a:	601a      	str	r2, [r3, #0]
}
 806e34c:	bf00      	nop
 806e34e:	3714      	adds	r7, #20
 806e350:	46bd      	mov	sp, r7
 806e352:	f85d 7b04 	ldr.w	r7, [sp], #4
 806e356:	4770      	bx	lr
 806e358:	20011588 	.word	0x20011588
 806e35c:	20015020 	.word	0x20015020
 806e360:	20015028 	.word	0x20015028
 806e364:	20015030 	.word	0x20015030
 806e368:	2001502c 	.word	0x2001502c
 806e36c:	2001503c 	.word	0x2001503c

0806e370 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 806e370:	b480      	push	{r7}
 806e372:	b085      	sub	sp, #20
 806e374:	af00      	add	r7, sp, #0
 806e376:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 806e378:	4b28      	ldr	r3, [pc, #160]	@ (806e41c <prvInsertBlockIntoFreeList+0xac>)
 806e37a:	60fb      	str	r3, [r7, #12]
 806e37c:	e002      	b.n	806e384 <prvInsertBlockIntoFreeList+0x14>
 806e37e:	68fb      	ldr	r3, [r7, #12]
 806e380:	681b      	ldr	r3, [r3, #0]
 806e382:	60fb      	str	r3, [r7, #12]
 806e384:	68fb      	ldr	r3, [r7, #12]
 806e386:	681b      	ldr	r3, [r3, #0]
 806e388:	687a      	ldr	r2, [r7, #4]
 806e38a:	429a      	cmp	r2, r3
 806e38c:	d8f7      	bhi.n	806e37e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 806e38e:	68fb      	ldr	r3, [r7, #12]
 806e390:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 806e392:	68fb      	ldr	r3, [r7, #12]
 806e394:	685b      	ldr	r3, [r3, #4]
 806e396:	68ba      	ldr	r2, [r7, #8]
 806e398:	4413      	add	r3, r2
 806e39a:	687a      	ldr	r2, [r7, #4]
 806e39c:	429a      	cmp	r2, r3
 806e39e:	d108      	bne.n	806e3b2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 806e3a0:	68fb      	ldr	r3, [r7, #12]
 806e3a2:	685a      	ldr	r2, [r3, #4]
 806e3a4:	687b      	ldr	r3, [r7, #4]
 806e3a6:	685b      	ldr	r3, [r3, #4]
 806e3a8:	441a      	add	r2, r3
 806e3aa:	68fb      	ldr	r3, [r7, #12]
 806e3ac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 806e3ae:	68fb      	ldr	r3, [r7, #12]
 806e3b0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 806e3b2:	687b      	ldr	r3, [r7, #4]
 806e3b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 806e3b6:	687b      	ldr	r3, [r7, #4]
 806e3b8:	685b      	ldr	r3, [r3, #4]
 806e3ba:	68ba      	ldr	r2, [r7, #8]
 806e3bc:	441a      	add	r2, r3
 806e3be:	68fb      	ldr	r3, [r7, #12]
 806e3c0:	681b      	ldr	r3, [r3, #0]
 806e3c2:	429a      	cmp	r2, r3
 806e3c4:	d118      	bne.n	806e3f8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 806e3c6:	68fb      	ldr	r3, [r7, #12]
 806e3c8:	681a      	ldr	r2, [r3, #0]
 806e3ca:	4b15      	ldr	r3, [pc, #84]	@ (806e420 <prvInsertBlockIntoFreeList+0xb0>)
 806e3cc:	681b      	ldr	r3, [r3, #0]
 806e3ce:	429a      	cmp	r2, r3
 806e3d0:	d00d      	beq.n	806e3ee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 806e3d2:	687b      	ldr	r3, [r7, #4]
 806e3d4:	685a      	ldr	r2, [r3, #4]
 806e3d6:	68fb      	ldr	r3, [r7, #12]
 806e3d8:	681b      	ldr	r3, [r3, #0]
 806e3da:	685b      	ldr	r3, [r3, #4]
 806e3dc:	441a      	add	r2, r3
 806e3de:	687b      	ldr	r3, [r7, #4]
 806e3e0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 806e3e2:	68fb      	ldr	r3, [r7, #12]
 806e3e4:	681b      	ldr	r3, [r3, #0]
 806e3e6:	681a      	ldr	r2, [r3, #0]
 806e3e8:	687b      	ldr	r3, [r7, #4]
 806e3ea:	601a      	str	r2, [r3, #0]
 806e3ec:	e008      	b.n	806e400 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 806e3ee:	4b0c      	ldr	r3, [pc, #48]	@ (806e420 <prvInsertBlockIntoFreeList+0xb0>)
 806e3f0:	681a      	ldr	r2, [r3, #0]
 806e3f2:	687b      	ldr	r3, [r7, #4]
 806e3f4:	601a      	str	r2, [r3, #0]
 806e3f6:	e003      	b.n	806e400 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 806e3f8:	68fb      	ldr	r3, [r7, #12]
 806e3fa:	681a      	ldr	r2, [r3, #0]
 806e3fc:	687b      	ldr	r3, [r7, #4]
 806e3fe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 806e400:	68fa      	ldr	r2, [r7, #12]
 806e402:	687b      	ldr	r3, [r7, #4]
 806e404:	429a      	cmp	r2, r3
 806e406:	d002      	beq.n	806e40e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 806e408:	68fb      	ldr	r3, [r7, #12]
 806e40a:	687a      	ldr	r2, [r7, #4]
 806e40c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 806e40e:	bf00      	nop
 806e410:	3714      	adds	r7, #20
 806e412:	46bd      	mov	sp, r7
 806e414:	f85d 7b04 	ldr.w	r7, [sp], #4
 806e418:	4770      	bx	lr
 806e41a:	bf00      	nop
 806e41c:	20015020 	.word	0x20015020
 806e420:	20015028 	.word	0x20015028

0806e424 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 806e424:	b480      	push	{r7}
 806e426:	b083      	sub	sp, #12
 806e428:	af00      	add	r7, sp, #0
 806e42a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 806e42c:	687b      	ldr	r3, [r7, #4]
 806e42e:	f103 0208 	add.w	r2, r3, #8
 806e432:	687b      	ldr	r3, [r7, #4]
 806e434:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 806e436:	687b      	ldr	r3, [r7, #4]
 806e438:	f04f 32ff 	mov.w	r2, #4294967295
 806e43c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 806e43e:	687b      	ldr	r3, [r7, #4]
 806e440:	f103 0208 	add.w	r2, r3, #8
 806e444:	687b      	ldr	r3, [r7, #4]
 806e446:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 806e448:	687b      	ldr	r3, [r7, #4]
 806e44a:	f103 0208 	add.w	r2, r3, #8
 806e44e:	687b      	ldr	r3, [r7, #4]
 806e450:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 806e452:	687b      	ldr	r3, [r7, #4]
 806e454:	2200      	movs	r2, #0
 806e456:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 806e458:	bf00      	nop
 806e45a:	370c      	adds	r7, #12
 806e45c:	46bd      	mov	sp, r7
 806e45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 806e462:	4770      	bx	lr

0806e464 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 806e464:	b480      	push	{r7}
 806e466:	b083      	sub	sp, #12
 806e468:	af00      	add	r7, sp, #0
 806e46a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 806e46c:	687b      	ldr	r3, [r7, #4]
 806e46e:	2200      	movs	r2, #0
 806e470:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 806e472:	bf00      	nop
 806e474:	370c      	adds	r7, #12
 806e476:	46bd      	mov	sp, r7
 806e478:	f85d 7b04 	ldr.w	r7, [sp], #4
 806e47c:	4770      	bx	lr

0806e47e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 806e47e:	b480      	push	{r7}
 806e480:	b085      	sub	sp, #20
 806e482:	af00      	add	r7, sp, #0
 806e484:	6078      	str	r0, [r7, #4]
 806e486:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 806e488:	687b      	ldr	r3, [r7, #4]
 806e48a:	685b      	ldr	r3, [r3, #4]
 806e48c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 806e48e:	683b      	ldr	r3, [r7, #0]
 806e490:	68fa      	ldr	r2, [r7, #12]
 806e492:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 806e494:	68fb      	ldr	r3, [r7, #12]
 806e496:	689a      	ldr	r2, [r3, #8]
 806e498:	683b      	ldr	r3, [r7, #0]
 806e49a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 806e49c:	68fb      	ldr	r3, [r7, #12]
 806e49e:	689b      	ldr	r3, [r3, #8]
 806e4a0:	683a      	ldr	r2, [r7, #0]
 806e4a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 806e4a4:	68fb      	ldr	r3, [r7, #12]
 806e4a6:	683a      	ldr	r2, [r7, #0]
 806e4a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 806e4aa:	683b      	ldr	r3, [r7, #0]
 806e4ac:	687a      	ldr	r2, [r7, #4]
 806e4ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 806e4b0:	687b      	ldr	r3, [r7, #4]
 806e4b2:	681b      	ldr	r3, [r3, #0]
 806e4b4:	1c5a      	adds	r2, r3, #1
 806e4b6:	687b      	ldr	r3, [r7, #4]
 806e4b8:	601a      	str	r2, [r3, #0]
}
 806e4ba:	bf00      	nop
 806e4bc:	3714      	adds	r7, #20
 806e4be:	46bd      	mov	sp, r7
 806e4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 806e4c4:	4770      	bx	lr

0806e4c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 806e4c6:	b480      	push	{r7}
 806e4c8:	b085      	sub	sp, #20
 806e4ca:	af00      	add	r7, sp, #0
 806e4cc:	6078      	str	r0, [r7, #4]
 806e4ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 806e4d0:	683b      	ldr	r3, [r7, #0]
 806e4d2:	681b      	ldr	r3, [r3, #0]
 806e4d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 806e4d6:	68bb      	ldr	r3, [r7, #8]
 806e4d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 806e4dc:	d103      	bne.n	806e4e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 806e4de:	687b      	ldr	r3, [r7, #4]
 806e4e0:	691b      	ldr	r3, [r3, #16]
 806e4e2:	60fb      	str	r3, [r7, #12]
 806e4e4:	e00c      	b.n	806e500 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 806e4e6:	687b      	ldr	r3, [r7, #4]
 806e4e8:	3308      	adds	r3, #8
 806e4ea:	60fb      	str	r3, [r7, #12]
 806e4ec:	e002      	b.n	806e4f4 <vListInsert+0x2e>
 806e4ee:	68fb      	ldr	r3, [r7, #12]
 806e4f0:	685b      	ldr	r3, [r3, #4]
 806e4f2:	60fb      	str	r3, [r7, #12]
 806e4f4:	68fb      	ldr	r3, [r7, #12]
 806e4f6:	685b      	ldr	r3, [r3, #4]
 806e4f8:	681b      	ldr	r3, [r3, #0]
 806e4fa:	68ba      	ldr	r2, [r7, #8]
 806e4fc:	429a      	cmp	r2, r3
 806e4fe:	d2f6      	bcs.n	806e4ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 806e500:	68fb      	ldr	r3, [r7, #12]
 806e502:	685a      	ldr	r2, [r3, #4]
 806e504:	683b      	ldr	r3, [r7, #0]
 806e506:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 806e508:	683b      	ldr	r3, [r7, #0]
 806e50a:	685b      	ldr	r3, [r3, #4]
 806e50c:	683a      	ldr	r2, [r7, #0]
 806e50e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 806e510:	683b      	ldr	r3, [r7, #0]
 806e512:	68fa      	ldr	r2, [r7, #12]
 806e514:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 806e516:	68fb      	ldr	r3, [r7, #12]
 806e518:	683a      	ldr	r2, [r7, #0]
 806e51a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 806e51c:	683b      	ldr	r3, [r7, #0]
 806e51e:	687a      	ldr	r2, [r7, #4]
 806e520:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 806e522:	687b      	ldr	r3, [r7, #4]
 806e524:	681b      	ldr	r3, [r3, #0]
 806e526:	1c5a      	adds	r2, r3, #1
 806e528:	687b      	ldr	r3, [r7, #4]
 806e52a:	601a      	str	r2, [r3, #0]
}
 806e52c:	bf00      	nop
 806e52e:	3714      	adds	r7, #20
 806e530:	46bd      	mov	sp, r7
 806e532:	f85d 7b04 	ldr.w	r7, [sp], #4
 806e536:	4770      	bx	lr

0806e538 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 806e538:	b480      	push	{r7}
 806e53a:	b085      	sub	sp, #20
 806e53c:	af00      	add	r7, sp, #0
 806e53e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 806e540:	687b      	ldr	r3, [r7, #4]
 806e542:	691b      	ldr	r3, [r3, #16]
 806e544:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 806e546:	687b      	ldr	r3, [r7, #4]
 806e548:	685b      	ldr	r3, [r3, #4]
 806e54a:	687a      	ldr	r2, [r7, #4]
 806e54c:	6892      	ldr	r2, [r2, #8]
 806e54e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 806e550:	687b      	ldr	r3, [r7, #4]
 806e552:	689b      	ldr	r3, [r3, #8]
 806e554:	687a      	ldr	r2, [r7, #4]
 806e556:	6852      	ldr	r2, [r2, #4]
 806e558:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 806e55a:	68fb      	ldr	r3, [r7, #12]
 806e55c:	685b      	ldr	r3, [r3, #4]
 806e55e:	687a      	ldr	r2, [r7, #4]
 806e560:	429a      	cmp	r2, r3
 806e562:	d103      	bne.n	806e56c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 806e564:	687b      	ldr	r3, [r7, #4]
 806e566:	689a      	ldr	r2, [r3, #8]
 806e568:	68fb      	ldr	r3, [r7, #12]
 806e56a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 806e56c:	687b      	ldr	r3, [r7, #4]
 806e56e:	2200      	movs	r2, #0
 806e570:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 806e572:	68fb      	ldr	r3, [r7, #12]
 806e574:	681b      	ldr	r3, [r3, #0]
 806e576:	1e5a      	subs	r2, r3, #1
 806e578:	68fb      	ldr	r3, [r7, #12]
 806e57a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 806e57c:	68fb      	ldr	r3, [r7, #12]
 806e57e:	681b      	ldr	r3, [r3, #0]
}
 806e580:	4618      	mov	r0, r3
 806e582:	3714      	adds	r7, #20
 806e584:	46bd      	mov	sp, r7
 806e586:	f85d 7b04 	ldr.w	r7, [sp], #4
 806e58a:	4770      	bx	lr

0806e58c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 806e58c:	b480      	push	{r7}
 806e58e:	b085      	sub	sp, #20
 806e590:	af00      	add	r7, sp, #0
 806e592:	60f8      	str	r0, [r7, #12]
 806e594:	60b9      	str	r1, [r7, #8]
 806e596:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 806e598:	68fb      	ldr	r3, [r7, #12]
 806e59a:	3b04      	subs	r3, #4
 806e59c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 806e59e:	68fb      	ldr	r3, [r7, #12]
 806e5a0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 806e5a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 806e5a6:	68fb      	ldr	r3, [r7, #12]
 806e5a8:	3b04      	subs	r3, #4
 806e5aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 806e5ac:	68bb      	ldr	r3, [r7, #8]
 806e5ae:	f023 0201 	bic.w	r2, r3, #1
 806e5b2:	68fb      	ldr	r3, [r7, #12]
 806e5b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 806e5b6:	68fb      	ldr	r3, [r7, #12]
 806e5b8:	3b04      	subs	r3, #4
 806e5ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 806e5bc:	4a0c      	ldr	r2, [pc, #48]	@ (806e5f0 <pxPortInitialiseStack+0x64>)
 806e5be:	68fb      	ldr	r3, [r7, #12]
 806e5c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 806e5c2:	68fb      	ldr	r3, [r7, #12]
 806e5c4:	3b14      	subs	r3, #20
 806e5c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 806e5c8:	687a      	ldr	r2, [r7, #4]
 806e5ca:	68fb      	ldr	r3, [r7, #12]
 806e5cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 806e5ce:	68fb      	ldr	r3, [r7, #12]
 806e5d0:	3b04      	subs	r3, #4
 806e5d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 806e5d4:	68fb      	ldr	r3, [r7, #12]
 806e5d6:	f06f 0202 	mvn.w	r2, #2
 806e5da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 806e5dc:	68fb      	ldr	r3, [r7, #12]
 806e5de:	3b20      	subs	r3, #32
 806e5e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 806e5e2:	68fb      	ldr	r3, [r7, #12]
}
 806e5e4:	4618      	mov	r0, r3
 806e5e6:	3714      	adds	r7, #20
 806e5e8:	46bd      	mov	sp, r7
 806e5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 806e5ee:	4770      	bx	lr
 806e5f0:	0806e5f5 	.word	0x0806e5f5

0806e5f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 806e5f4:	b480      	push	{r7}
 806e5f6:	b085      	sub	sp, #20
 806e5f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 806e5fa:	2300      	movs	r3, #0
 806e5fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 806e5fe:	4b13      	ldr	r3, [pc, #76]	@ (806e64c <prvTaskExitError+0x58>)
 806e600:	681b      	ldr	r3, [r3, #0]
 806e602:	f1b3 3fff 	cmp.w	r3, #4294967295
 806e606:	d00b      	beq.n	806e620 <prvTaskExitError+0x2c>
	__asm volatile
 806e608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 806e60c:	f383 8811 	msr	BASEPRI, r3
 806e610:	f3bf 8f6f 	isb	sy
 806e614:	f3bf 8f4f 	dsb	sy
 806e618:	60fb      	str	r3, [r7, #12]
}
 806e61a:	bf00      	nop
 806e61c:	bf00      	nop
 806e61e:	e7fd      	b.n	806e61c <prvTaskExitError+0x28>
	__asm volatile
 806e620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 806e624:	f383 8811 	msr	BASEPRI, r3
 806e628:	f3bf 8f6f 	isb	sy
 806e62c:	f3bf 8f4f 	dsb	sy
 806e630:	60bb      	str	r3, [r7, #8]
}
 806e632:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 806e634:	bf00      	nop
 806e636:	687b      	ldr	r3, [r7, #4]
 806e638:	2b00      	cmp	r3, #0
 806e63a:	d0fc      	beq.n	806e636 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 806e63c:	bf00      	nop
 806e63e:	bf00      	nop
 806e640:	3714      	adds	r7, #20
 806e642:	46bd      	mov	sp, r7
 806e644:	f85d 7b04 	ldr.w	r7, [sp], #4
 806e648:	4770      	bx	lr
 806e64a:	bf00      	nop
 806e64c:	2001012c 	.word	0x2001012c

0806e650 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 806e650:	4b07      	ldr	r3, [pc, #28]	@ (806e670 <pxCurrentTCBConst2>)
 806e652:	6819      	ldr	r1, [r3, #0]
 806e654:	6808      	ldr	r0, [r1, #0]
 806e656:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 806e65a:	f380 8809 	msr	PSP, r0
 806e65e:	f3bf 8f6f 	isb	sy
 806e662:	f04f 0000 	mov.w	r0, #0
 806e666:	f380 8811 	msr	BASEPRI, r0
 806e66a:	4770      	bx	lr
 806e66c:	f3af 8000 	nop.w

0806e670 <pxCurrentTCBConst2>:
 806e670:	20015088 	.word	0x20015088
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 806e674:	bf00      	nop
 806e676:	bf00      	nop

0806e678 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 806e678:	4808      	ldr	r0, [pc, #32]	@ (806e69c <prvPortStartFirstTask+0x24>)
 806e67a:	6800      	ldr	r0, [r0, #0]
 806e67c:	6800      	ldr	r0, [r0, #0]
 806e67e:	f380 8808 	msr	MSP, r0
 806e682:	f04f 0000 	mov.w	r0, #0
 806e686:	f380 8814 	msr	CONTROL, r0
 806e68a:	b662      	cpsie	i
 806e68c:	b661      	cpsie	f
 806e68e:	f3bf 8f4f 	dsb	sy
 806e692:	f3bf 8f6f 	isb	sy
 806e696:	df00      	svc	0
 806e698:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 806e69a:	bf00      	nop
 806e69c:	e000ed08 	.word	0xe000ed08

0806e6a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 806e6a0:	b580      	push	{r7, lr}
 806e6a2:	b086      	sub	sp, #24
 806e6a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 806e6a6:	4b47      	ldr	r3, [pc, #284]	@ (806e7c4 <xPortStartScheduler+0x124>)
 806e6a8:	681b      	ldr	r3, [r3, #0]
 806e6aa:	4a47      	ldr	r2, [pc, #284]	@ (806e7c8 <xPortStartScheduler+0x128>)
 806e6ac:	4293      	cmp	r3, r2
 806e6ae:	d10b      	bne.n	806e6c8 <xPortStartScheduler+0x28>
	__asm volatile
 806e6b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 806e6b4:	f383 8811 	msr	BASEPRI, r3
 806e6b8:	f3bf 8f6f 	isb	sy
 806e6bc:	f3bf 8f4f 	dsb	sy
 806e6c0:	613b      	str	r3, [r7, #16]
}
 806e6c2:	bf00      	nop
 806e6c4:	bf00      	nop
 806e6c6:	e7fd      	b.n	806e6c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 806e6c8:	4b3e      	ldr	r3, [pc, #248]	@ (806e7c4 <xPortStartScheduler+0x124>)
 806e6ca:	681b      	ldr	r3, [r3, #0]
 806e6cc:	4a3f      	ldr	r2, [pc, #252]	@ (806e7cc <xPortStartScheduler+0x12c>)
 806e6ce:	4293      	cmp	r3, r2
 806e6d0:	d10b      	bne.n	806e6ea <xPortStartScheduler+0x4a>
	__asm volatile
 806e6d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 806e6d6:	f383 8811 	msr	BASEPRI, r3
 806e6da:	f3bf 8f6f 	isb	sy
 806e6de:	f3bf 8f4f 	dsb	sy
 806e6e2:	60fb      	str	r3, [r7, #12]
}
 806e6e4:	bf00      	nop
 806e6e6:	bf00      	nop
 806e6e8:	e7fd      	b.n	806e6e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 806e6ea:	4b39      	ldr	r3, [pc, #228]	@ (806e7d0 <xPortStartScheduler+0x130>)
 806e6ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 806e6ee:	697b      	ldr	r3, [r7, #20]
 806e6f0:	781b      	ldrb	r3, [r3, #0]
 806e6f2:	b2db      	uxtb	r3, r3
 806e6f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 806e6f6:	697b      	ldr	r3, [r7, #20]
 806e6f8:	22ff      	movs	r2, #255	@ 0xff
 806e6fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 806e6fc:	697b      	ldr	r3, [r7, #20]
 806e6fe:	781b      	ldrb	r3, [r3, #0]
 806e700:	b2db      	uxtb	r3, r3
 806e702:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 806e704:	78fb      	ldrb	r3, [r7, #3]
 806e706:	b2db      	uxtb	r3, r3
 806e708:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 806e70c:	b2da      	uxtb	r2, r3
 806e70e:	4b31      	ldr	r3, [pc, #196]	@ (806e7d4 <xPortStartScheduler+0x134>)
 806e710:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 806e712:	4b31      	ldr	r3, [pc, #196]	@ (806e7d8 <xPortStartScheduler+0x138>)
 806e714:	2207      	movs	r2, #7
 806e716:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 806e718:	e009      	b.n	806e72e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 806e71a:	4b2f      	ldr	r3, [pc, #188]	@ (806e7d8 <xPortStartScheduler+0x138>)
 806e71c:	681b      	ldr	r3, [r3, #0]
 806e71e:	3b01      	subs	r3, #1
 806e720:	4a2d      	ldr	r2, [pc, #180]	@ (806e7d8 <xPortStartScheduler+0x138>)
 806e722:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 806e724:	78fb      	ldrb	r3, [r7, #3]
 806e726:	b2db      	uxtb	r3, r3
 806e728:	005b      	lsls	r3, r3, #1
 806e72a:	b2db      	uxtb	r3, r3
 806e72c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 806e72e:	78fb      	ldrb	r3, [r7, #3]
 806e730:	b2db      	uxtb	r3, r3
 806e732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 806e736:	2b80      	cmp	r3, #128	@ 0x80
 806e738:	d0ef      	beq.n	806e71a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 806e73a:	4b27      	ldr	r3, [pc, #156]	@ (806e7d8 <xPortStartScheduler+0x138>)
 806e73c:	681b      	ldr	r3, [r3, #0]
 806e73e:	f1c3 0307 	rsb	r3, r3, #7
 806e742:	2b04      	cmp	r3, #4
 806e744:	d00b      	beq.n	806e75e <xPortStartScheduler+0xbe>
	__asm volatile
 806e746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 806e74a:	f383 8811 	msr	BASEPRI, r3
 806e74e:	f3bf 8f6f 	isb	sy
 806e752:	f3bf 8f4f 	dsb	sy
 806e756:	60bb      	str	r3, [r7, #8]
}
 806e758:	bf00      	nop
 806e75a:	bf00      	nop
 806e75c:	e7fd      	b.n	806e75a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 806e75e:	4b1e      	ldr	r3, [pc, #120]	@ (806e7d8 <xPortStartScheduler+0x138>)
 806e760:	681b      	ldr	r3, [r3, #0]
 806e762:	021b      	lsls	r3, r3, #8
 806e764:	4a1c      	ldr	r2, [pc, #112]	@ (806e7d8 <xPortStartScheduler+0x138>)
 806e766:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 806e768:	4b1b      	ldr	r3, [pc, #108]	@ (806e7d8 <xPortStartScheduler+0x138>)
 806e76a:	681b      	ldr	r3, [r3, #0]
 806e76c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 806e770:	4a19      	ldr	r2, [pc, #100]	@ (806e7d8 <xPortStartScheduler+0x138>)
 806e772:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 806e774:	687b      	ldr	r3, [r7, #4]
 806e776:	b2da      	uxtb	r2, r3
 806e778:	697b      	ldr	r3, [r7, #20]
 806e77a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 806e77c:	4b17      	ldr	r3, [pc, #92]	@ (806e7dc <xPortStartScheduler+0x13c>)
 806e77e:	681b      	ldr	r3, [r3, #0]
 806e780:	4a16      	ldr	r2, [pc, #88]	@ (806e7dc <xPortStartScheduler+0x13c>)
 806e782:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 806e786:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 806e788:	4b14      	ldr	r3, [pc, #80]	@ (806e7dc <xPortStartScheduler+0x13c>)
 806e78a:	681b      	ldr	r3, [r3, #0]
 806e78c:	4a13      	ldr	r2, [pc, #76]	@ (806e7dc <xPortStartScheduler+0x13c>)
 806e78e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 806e792:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 806e794:	f000 f8da 	bl	806e94c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 806e798:	4b11      	ldr	r3, [pc, #68]	@ (806e7e0 <xPortStartScheduler+0x140>)
 806e79a:	2200      	movs	r2, #0
 806e79c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 806e79e:	f000 f8f9 	bl	806e994 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 806e7a2:	4b10      	ldr	r3, [pc, #64]	@ (806e7e4 <xPortStartScheduler+0x144>)
 806e7a4:	681b      	ldr	r3, [r3, #0]
 806e7a6:	4a0f      	ldr	r2, [pc, #60]	@ (806e7e4 <xPortStartScheduler+0x144>)
 806e7a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 806e7ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 806e7ae:	f7ff ff63 	bl	806e678 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 806e7b2:	f001 fbfd 	bl	806ffb0 <vTaskSwitchContext>
	prvTaskExitError();
 806e7b6:	f7ff ff1d 	bl	806e5f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 806e7ba:	2300      	movs	r3, #0
}
 806e7bc:	4618      	mov	r0, r3
 806e7be:	3718      	adds	r7, #24
 806e7c0:	46bd      	mov	sp, r7
 806e7c2:	bd80      	pop	{r7, pc}
 806e7c4:	e000ed00 	.word	0xe000ed00
 806e7c8:	410fc271 	.word	0x410fc271
 806e7cc:	410fc270 	.word	0x410fc270
 806e7d0:	e000e400 	.word	0xe000e400
 806e7d4:	20015040 	.word	0x20015040
 806e7d8:	20015044 	.word	0x20015044
 806e7dc:	e000ed20 	.word	0xe000ed20
 806e7e0:	2001012c 	.word	0x2001012c
 806e7e4:	e000ef34 	.word	0xe000ef34

0806e7e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 806e7e8:	b480      	push	{r7}
 806e7ea:	b083      	sub	sp, #12
 806e7ec:	af00      	add	r7, sp, #0
	__asm volatile
 806e7ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 806e7f2:	f383 8811 	msr	BASEPRI, r3
 806e7f6:	f3bf 8f6f 	isb	sy
 806e7fa:	f3bf 8f4f 	dsb	sy
 806e7fe:	607b      	str	r3, [r7, #4]
}
 806e800:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 806e802:	4b10      	ldr	r3, [pc, #64]	@ (806e844 <vPortEnterCritical+0x5c>)
 806e804:	681b      	ldr	r3, [r3, #0]
 806e806:	3301      	adds	r3, #1
 806e808:	4a0e      	ldr	r2, [pc, #56]	@ (806e844 <vPortEnterCritical+0x5c>)
 806e80a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 806e80c:	4b0d      	ldr	r3, [pc, #52]	@ (806e844 <vPortEnterCritical+0x5c>)
 806e80e:	681b      	ldr	r3, [r3, #0]
 806e810:	2b01      	cmp	r3, #1
 806e812:	d110      	bne.n	806e836 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 806e814:	4b0c      	ldr	r3, [pc, #48]	@ (806e848 <vPortEnterCritical+0x60>)
 806e816:	681b      	ldr	r3, [r3, #0]
 806e818:	b2db      	uxtb	r3, r3
 806e81a:	2b00      	cmp	r3, #0
 806e81c:	d00b      	beq.n	806e836 <vPortEnterCritical+0x4e>
	__asm volatile
 806e81e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 806e822:	f383 8811 	msr	BASEPRI, r3
 806e826:	f3bf 8f6f 	isb	sy
 806e82a:	f3bf 8f4f 	dsb	sy
 806e82e:	603b      	str	r3, [r7, #0]
}
 806e830:	bf00      	nop
 806e832:	bf00      	nop
 806e834:	e7fd      	b.n	806e832 <vPortEnterCritical+0x4a>
	}
}
 806e836:	bf00      	nop
 806e838:	370c      	adds	r7, #12
 806e83a:	46bd      	mov	sp, r7
 806e83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 806e840:	4770      	bx	lr
 806e842:	bf00      	nop
 806e844:	2001012c 	.word	0x2001012c
 806e848:	e000ed04 	.word	0xe000ed04

0806e84c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 806e84c:	b480      	push	{r7}
 806e84e:	b083      	sub	sp, #12
 806e850:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 806e852:	4b12      	ldr	r3, [pc, #72]	@ (806e89c <vPortExitCritical+0x50>)
 806e854:	681b      	ldr	r3, [r3, #0]
 806e856:	2b00      	cmp	r3, #0
 806e858:	d10b      	bne.n	806e872 <vPortExitCritical+0x26>
	__asm volatile
 806e85a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 806e85e:	f383 8811 	msr	BASEPRI, r3
 806e862:	f3bf 8f6f 	isb	sy
 806e866:	f3bf 8f4f 	dsb	sy
 806e86a:	607b      	str	r3, [r7, #4]
}
 806e86c:	bf00      	nop
 806e86e:	bf00      	nop
 806e870:	e7fd      	b.n	806e86e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 806e872:	4b0a      	ldr	r3, [pc, #40]	@ (806e89c <vPortExitCritical+0x50>)
 806e874:	681b      	ldr	r3, [r3, #0]
 806e876:	3b01      	subs	r3, #1
 806e878:	4a08      	ldr	r2, [pc, #32]	@ (806e89c <vPortExitCritical+0x50>)
 806e87a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 806e87c:	4b07      	ldr	r3, [pc, #28]	@ (806e89c <vPortExitCritical+0x50>)
 806e87e:	681b      	ldr	r3, [r3, #0]
 806e880:	2b00      	cmp	r3, #0
 806e882:	d105      	bne.n	806e890 <vPortExitCritical+0x44>
 806e884:	2300      	movs	r3, #0
 806e886:	603b      	str	r3, [r7, #0]
	__asm volatile
 806e888:	683b      	ldr	r3, [r7, #0]
 806e88a:	f383 8811 	msr	BASEPRI, r3
}
 806e88e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 806e890:	bf00      	nop
 806e892:	370c      	adds	r7, #12
 806e894:	46bd      	mov	sp, r7
 806e896:	f85d 7b04 	ldr.w	r7, [sp], #4
 806e89a:	4770      	bx	lr
 806e89c:	2001012c 	.word	0x2001012c

0806e8a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 806e8a0:	f3ef 8009 	mrs	r0, PSP
 806e8a4:	f3bf 8f6f 	isb	sy
 806e8a8:	4b15      	ldr	r3, [pc, #84]	@ (806e900 <pxCurrentTCBConst>)
 806e8aa:	681a      	ldr	r2, [r3, #0]
 806e8ac:	f01e 0f10 	tst.w	lr, #16
 806e8b0:	bf08      	it	eq
 806e8b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 806e8b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 806e8ba:	6010      	str	r0, [r2, #0]
 806e8bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 806e8c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 806e8c4:	f380 8811 	msr	BASEPRI, r0
 806e8c8:	f3bf 8f4f 	dsb	sy
 806e8cc:	f3bf 8f6f 	isb	sy
 806e8d0:	f001 fb6e 	bl	806ffb0 <vTaskSwitchContext>
 806e8d4:	f04f 0000 	mov.w	r0, #0
 806e8d8:	f380 8811 	msr	BASEPRI, r0
 806e8dc:	bc09      	pop	{r0, r3}
 806e8de:	6819      	ldr	r1, [r3, #0]
 806e8e0:	6808      	ldr	r0, [r1, #0]
 806e8e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 806e8e6:	f01e 0f10 	tst.w	lr, #16
 806e8ea:	bf08      	it	eq
 806e8ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 806e8f0:	f380 8809 	msr	PSP, r0
 806e8f4:	f3bf 8f6f 	isb	sy
 806e8f8:	4770      	bx	lr
 806e8fa:	bf00      	nop
 806e8fc:	f3af 8000 	nop.w

0806e900 <pxCurrentTCBConst>:
 806e900:	20015088 	.word	0x20015088
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 806e904:	bf00      	nop
 806e906:	bf00      	nop

0806e908 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 806e908:	b580      	push	{r7, lr}
 806e90a:	b082      	sub	sp, #8
 806e90c:	af00      	add	r7, sp, #0
	__asm volatile
 806e90e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 806e912:	f383 8811 	msr	BASEPRI, r3
 806e916:	f3bf 8f6f 	isb	sy
 806e91a:	f3bf 8f4f 	dsb	sy
 806e91e:	607b      	str	r3, [r7, #4]
}
 806e920:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 806e922:	f001 fa83 	bl	806fe2c <xTaskIncrementTick>
 806e926:	4603      	mov	r3, r0
 806e928:	2b00      	cmp	r3, #0
 806e92a:	d003      	beq.n	806e934 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 806e92c:	4b06      	ldr	r3, [pc, #24]	@ (806e948 <xPortSysTickHandler+0x40>)
 806e92e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 806e932:	601a      	str	r2, [r3, #0]
 806e934:	2300      	movs	r3, #0
 806e936:	603b      	str	r3, [r7, #0]
	__asm volatile
 806e938:	683b      	ldr	r3, [r7, #0]
 806e93a:	f383 8811 	msr	BASEPRI, r3
}
 806e93e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 806e940:	bf00      	nop
 806e942:	3708      	adds	r7, #8
 806e944:	46bd      	mov	sp, r7
 806e946:	bd80      	pop	{r7, pc}
 806e948:	e000ed04 	.word	0xe000ed04

0806e94c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 806e94c:	b480      	push	{r7}
 806e94e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 806e950:	4b0b      	ldr	r3, [pc, #44]	@ (806e980 <vPortSetupTimerInterrupt+0x34>)
 806e952:	2200      	movs	r2, #0
 806e954:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 806e956:	4b0b      	ldr	r3, [pc, #44]	@ (806e984 <vPortSetupTimerInterrupt+0x38>)
 806e958:	2200      	movs	r2, #0
 806e95a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 806e95c:	4b0a      	ldr	r3, [pc, #40]	@ (806e988 <vPortSetupTimerInterrupt+0x3c>)
 806e95e:	681b      	ldr	r3, [r3, #0]
 806e960:	4a0a      	ldr	r2, [pc, #40]	@ (806e98c <vPortSetupTimerInterrupt+0x40>)
 806e962:	fba2 2303 	umull	r2, r3, r2, r3
 806e966:	099b      	lsrs	r3, r3, #6
 806e968:	4a09      	ldr	r2, [pc, #36]	@ (806e990 <vPortSetupTimerInterrupt+0x44>)
 806e96a:	3b01      	subs	r3, #1
 806e96c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 806e96e:	4b04      	ldr	r3, [pc, #16]	@ (806e980 <vPortSetupTimerInterrupt+0x34>)
 806e970:	2207      	movs	r2, #7
 806e972:	601a      	str	r2, [r3, #0]
}
 806e974:	bf00      	nop
 806e976:	46bd      	mov	sp, r7
 806e978:	f85d 7b04 	ldr.w	r7, [sp], #4
 806e97c:	4770      	bx	lr
 806e97e:	bf00      	nop
 806e980:	e000e010 	.word	0xe000e010
 806e984:	e000e018 	.word	0xe000e018
 806e988:	20010120 	.word	0x20010120
 806e98c:	10624dd3 	.word	0x10624dd3
 806e990:	e000e014 	.word	0xe000e014

0806e994 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 806e994:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 806e9a4 <vPortEnableVFP+0x10>
 806e998:	6801      	ldr	r1, [r0, #0]
 806e99a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 806e99e:	6001      	str	r1, [r0, #0]
 806e9a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 806e9a2:	bf00      	nop
 806e9a4:	e000ed88 	.word	0xe000ed88

0806e9a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 806e9a8:	b480      	push	{r7}
 806e9aa:	b085      	sub	sp, #20
 806e9ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 806e9ae:	f3ef 8305 	mrs	r3, IPSR
 806e9b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 806e9b4:	68fb      	ldr	r3, [r7, #12]
 806e9b6:	2b0f      	cmp	r3, #15
 806e9b8:	d915      	bls.n	806e9e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 806e9ba:	4a18      	ldr	r2, [pc, #96]	@ (806ea1c <vPortValidateInterruptPriority+0x74>)
 806e9bc:	68fb      	ldr	r3, [r7, #12]
 806e9be:	4413      	add	r3, r2
 806e9c0:	781b      	ldrb	r3, [r3, #0]
 806e9c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 806e9c4:	4b16      	ldr	r3, [pc, #88]	@ (806ea20 <vPortValidateInterruptPriority+0x78>)
 806e9c6:	781b      	ldrb	r3, [r3, #0]
 806e9c8:	7afa      	ldrb	r2, [r7, #11]
 806e9ca:	429a      	cmp	r2, r3
 806e9cc:	d20b      	bcs.n	806e9e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 806e9ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 806e9d2:	f383 8811 	msr	BASEPRI, r3
 806e9d6:	f3bf 8f6f 	isb	sy
 806e9da:	f3bf 8f4f 	dsb	sy
 806e9de:	607b      	str	r3, [r7, #4]
}
 806e9e0:	bf00      	nop
 806e9e2:	bf00      	nop
 806e9e4:	e7fd      	b.n	806e9e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 806e9e6:	4b0f      	ldr	r3, [pc, #60]	@ (806ea24 <vPortValidateInterruptPriority+0x7c>)
 806e9e8:	681b      	ldr	r3, [r3, #0]
 806e9ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 806e9ee:	4b0e      	ldr	r3, [pc, #56]	@ (806ea28 <vPortValidateInterruptPriority+0x80>)
 806e9f0:	681b      	ldr	r3, [r3, #0]
 806e9f2:	429a      	cmp	r2, r3
 806e9f4:	d90b      	bls.n	806ea0e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 806e9f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 806e9fa:	f383 8811 	msr	BASEPRI, r3
 806e9fe:	f3bf 8f6f 	isb	sy
 806ea02:	f3bf 8f4f 	dsb	sy
 806ea06:	603b      	str	r3, [r7, #0]
}
 806ea08:	bf00      	nop
 806ea0a:	bf00      	nop
 806ea0c:	e7fd      	b.n	806ea0a <vPortValidateInterruptPriority+0x62>
	}
 806ea0e:	bf00      	nop
 806ea10:	3714      	adds	r7, #20
 806ea12:	46bd      	mov	sp, r7
 806ea14:	f85d 7b04 	ldr.w	r7, [sp], #4
 806ea18:	4770      	bx	lr
 806ea1a:	bf00      	nop
 806ea1c:	e000e3f0 	.word	0xe000e3f0
 806ea20:	20015040 	.word	0x20015040
 806ea24:	e000ed0c 	.word	0xe000ed0c
 806ea28:	20015044 	.word	0x20015044

0806ea2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 806ea2c:	b580      	push	{r7, lr}
 806ea2e:	b084      	sub	sp, #16
 806ea30:	af00      	add	r7, sp, #0
 806ea32:	6078      	str	r0, [r7, #4]
 806ea34:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 806ea36:	687b      	ldr	r3, [r7, #4]
 806ea38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 806ea3a:	68fb      	ldr	r3, [r7, #12]
 806ea3c:	2b00      	cmp	r3, #0
 806ea3e:	d10b      	bne.n	806ea58 <xQueueGenericReset+0x2c>
	__asm volatile
 806ea40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 806ea44:	f383 8811 	msr	BASEPRI, r3
 806ea48:	f3bf 8f6f 	isb	sy
 806ea4c:	f3bf 8f4f 	dsb	sy
 806ea50:	60bb      	str	r3, [r7, #8]
}
 806ea52:	bf00      	nop
 806ea54:	bf00      	nop
 806ea56:	e7fd      	b.n	806ea54 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 806ea58:	f7ff fec6 	bl	806e7e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 806ea5c:	68fb      	ldr	r3, [r7, #12]
 806ea5e:	681a      	ldr	r2, [r3, #0]
 806ea60:	68fb      	ldr	r3, [r7, #12]
 806ea62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 806ea64:	68f9      	ldr	r1, [r7, #12]
 806ea66:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 806ea68:	fb01 f303 	mul.w	r3, r1, r3
 806ea6c:	441a      	add	r2, r3
 806ea6e:	68fb      	ldr	r3, [r7, #12]
 806ea70:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 806ea72:	68fb      	ldr	r3, [r7, #12]
 806ea74:	2200      	movs	r2, #0
 806ea76:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 806ea78:	68fb      	ldr	r3, [r7, #12]
 806ea7a:	681a      	ldr	r2, [r3, #0]
 806ea7c:	68fb      	ldr	r3, [r7, #12]
 806ea7e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 806ea80:	68fb      	ldr	r3, [r7, #12]
 806ea82:	681a      	ldr	r2, [r3, #0]
 806ea84:	68fb      	ldr	r3, [r7, #12]
 806ea86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 806ea88:	3b01      	subs	r3, #1
 806ea8a:	68f9      	ldr	r1, [r7, #12]
 806ea8c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 806ea8e:	fb01 f303 	mul.w	r3, r1, r3
 806ea92:	441a      	add	r2, r3
 806ea94:	68fb      	ldr	r3, [r7, #12]
 806ea96:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 806ea98:	68fb      	ldr	r3, [r7, #12]
 806ea9a:	22ff      	movs	r2, #255	@ 0xff
 806ea9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 806eaa0:	68fb      	ldr	r3, [r7, #12]
 806eaa2:	22ff      	movs	r2, #255	@ 0xff
 806eaa4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 806eaa8:	683b      	ldr	r3, [r7, #0]
 806eaaa:	2b00      	cmp	r3, #0
 806eaac:	d114      	bne.n	806ead8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 806eaae:	68fb      	ldr	r3, [r7, #12]
 806eab0:	691b      	ldr	r3, [r3, #16]
 806eab2:	2b00      	cmp	r3, #0
 806eab4:	d01a      	beq.n	806eaec <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 806eab6:	68fb      	ldr	r3, [r7, #12]
 806eab8:	3310      	adds	r3, #16
 806eaba:	4618      	mov	r0, r3
 806eabc:	f001 fb6c 	bl	8070198 <xTaskRemoveFromEventList>
 806eac0:	4603      	mov	r3, r0
 806eac2:	2b00      	cmp	r3, #0
 806eac4:	d012      	beq.n	806eaec <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 806eac6:	4b0d      	ldr	r3, [pc, #52]	@ (806eafc <xQueueGenericReset+0xd0>)
 806eac8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 806eacc:	601a      	str	r2, [r3, #0]
 806eace:	f3bf 8f4f 	dsb	sy
 806ead2:	f3bf 8f6f 	isb	sy
 806ead6:	e009      	b.n	806eaec <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 806ead8:	68fb      	ldr	r3, [r7, #12]
 806eada:	3310      	adds	r3, #16
 806eadc:	4618      	mov	r0, r3
 806eade:	f7ff fca1 	bl	806e424 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 806eae2:	68fb      	ldr	r3, [r7, #12]
 806eae4:	3324      	adds	r3, #36	@ 0x24
 806eae6:	4618      	mov	r0, r3
 806eae8:	f7ff fc9c 	bl	806e424 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 806eaec:	f7ff feae 	bl	806e84c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 806eaf0:	2301      	movs	r3, #1
}
 806eaf2:	4618      	mov	r0, r3
 806eaf4:	3710      	adds	r7, #16
 806eaf6:	46bd      	mov	sp, r7
 806eaf8:	bd80      	pop	{r7, pc}
 806eafa:	bf00      	nop
 806eafc:	e000ed04 	.word	0xe000ed04

0806eb00 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 806eb00:	b580      	push	{r7, lr}
 806eb02:	b08e      	sub	sp, #56	@ 0x38
 806eb04:	af02      	add	r7, sp, #8
 806eb06:	60f8      	str	r0, [r7, #12]
 806eb08:	60b9      	str	r1, [r7, #8]
 806eb0a:	607a      	str	r2, [r7, #4]
 806eb0c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 806eb0e:	68fb      	ldr	r3, [r7, #12]
 806eb10:	2b00      	cmp	r3, #0
 806eb12:	d10b      	bne.n	806eb2c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 806eb14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 806eb18:	f383 8811 	msr	BASEPRI, r3
 806eb1c:	f3bf 8f6f 	isb	sy
 806eb20:	f3bf 8f4f 	dsb	sy
 806eb24:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 806eb26:	bf00      	nop
 806eb28:	bf00      	nop
 806eb2a:	e7fd      	b.n	806eb28 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 806eb2c:	683b      	ldr	r3, [r7, #0]
 806eb2e:	2b00      	cmp	r3, #0
 806eb30:	d10b      	bne.n	806eb4a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 806eb32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 806eb36:	f383 8811 	msr	BASEPRI, r3
 806eb3a:	f3bf 8f6f 	isb	sy
 806eb3e:	f3bf 8f4f 	dsb	sy
 806eb42:	627b      	str	r3, [r7, #36]	@ 0x24
}
 806eb44:	bf00      	nop
 806eb46:	bf00      	nop
 806eb48:	e7fd      	b.n	806eb46 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 806eb4a:	687b      	ldr	r3, [r7, #4]
 806eb4c:	2b00      	cmp	r3, #0
 806eb4e:	d002      	beq.n	806eb56 <xQueueGenericCreateStatic+0x56>
 806eb50:	68bb      	ldr	r3, [r7, #8]
 806eb52:	2b00      	cmp	r3, #0
 806eb54:	d001      	beq.n	806eb5a <xQueueGenericCreateStatic+0x5a>
 806eb56:	2301      	movs	r3, #1
 806eb58:	e000      	b.n	806eb5c <xQueueGenericCreateStatic+0x5c>
 806eb5a:	2300      	movs	r3, #0
 806eb5c:	2b00      	cmp	r3, #0
 806eb5e:	d10b      	bne.n	806eb78 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 806eb60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 806eb64:	f383 8811 	msr	BASEPRI, r3
 806eb68:	f3bf 8f6f 	isb	sy
 806eb6c:	f3bf 8f4f 	dsb	sy
 806eb70:	623b      	str	r3, [r7, #32]
}
 806eb72:	bf00      	nop
 806eb74:	bf00      	nop
 806eb76:	e7fd      	b.n	806eb74 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 806eb78:	687b      	ldr	r3, [r7, #4]
 806eb7a:	2b00      	cmp	r3, #0
 806eb7c:	d102      	bne.n	806eb84 <xQueueGenericCreateStatic+0x84>
 806eb7e:	68bb      	ldr	r3, [r7, #8]
 806eb80:	2b00      	cmp	r3, #0
 806eb82:	d101      	bne.n	806eb88 <xQueueGenericCreateStatic+0x88>
 806eb84:	2301      	movs	r3, #1
 806eb86:	e000      	b.n	806eb8a <xQueueGenericCreateStatic+0x8a>
 806eb88:	2300      	movs	r3, #0
 806eb8a:	2b00      	cmp	r3, #0
 806eb8c:	d10b      	bne.n	806eba6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 806eb8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 806eb92:	f383 8811 	msr	BASEPRI, r3
 806eb96:	f3bf 8f6f 	isb	sy
 806eb9a:	f3bf 8f4f 	dsb	sy
 806eb9e:	61fb      	str	r3, [r7, #28]
}
 806eba0:	bf00      	nop
 806eba2:	bf00      	nop
 806eba4:	e7fd      	b.n	806eba2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 806eba6:	2350      	movs	r3, #80	@ 0x50
 806eba8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 806ebaa:	697b      	ldr	r3, [r7, #20]
 806ebac:	2b50      	cmp	r3, #80	@ 0x50
 806ebae:	d00b      	beq.n	806ebc8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 806ebb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 806ebb4:	f383 8811 	msr	BASEPRI, r3
 806ebb8:	f3bf 8f6f 	isb	sy
 806ebbc:	f3bf 8f4f 	dsb	sy
 806ebc0:	61bb      	str	r3, [r7, #24]
}
 806ebc2:	bf00      	nop
 806ebc4:	bf00      	nop
 806ebc6:	e7fd      	b.n	806ebc4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 806ebc8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 806ebca:	683b      	ldr	r3, [r7, #0]
 806ebcc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 806ebce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 806ebd0:	2b00      	cmp	r3, #0
 806ebd2:	d00d      	beq.n	806ebf0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 806ebd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 806ebd6:	2201      	movs	r2, #1
 806ebd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 806ebdc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 806ebe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 806ebe2:	9300      	str	r3, [sp, #0]
 806ebe4:	4613      	mov	r3, r2
 806ebe6:	687a      	ldr	r2, [r7, #4]
 806ebe8:	68b9      	ldr	r1, [r7, #8]
 806ebea:	68f8      	ldr	r0, [r7, #12]
 806ebec:	f000 f805 	bl	806ebfa <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 806ebf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 806ebf2:	4618      	mov	r0, r3
 806ebf4:	3730      	adds	r7, #48	@ 0x30
 806ebf6:	46bd      	mov	sp, r7
 806ebf8:	bd80      	pop	{r7, pc}

0806ebfa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 806ebfa:	b580      	push	{r7, lr}
 806ebfc:	b084      	sub	sp, #16
 806ebfe:	af00      	add	r7, sp, #0
 806ec00:	60f8      	str	r0, [r7, #12]
 806ec02:	60b9      	str	r1, [r7, #8]
 806ec04:	607a      	str	r2, [r7, #4]
 806ec06:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 806ec08:	68bb      	ldr	r3, [r7, #8]
 806ec0a:	2b00      	cmp	r3, #0
 806ec0c:	d103      	bne.n	806ec16 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 806ec0e:	69bb      	ldr	r3, [r7, #24]
 806ec10:	69ba      	ldr	r2, [r7, #24]
 806ec12:	601a      	str	r2, [r3, #0]
 806ec14:	e002      	b.n	806ec1c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 806ec16:	69bb      	ldr	r3, [r7, #24]
 806ec18:	687a      	ldr	r2, [r7, #4]
 806ec1a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 806ec1c:	69bb      	ldr	r3, [r7, #24]
 806ec1e:	68fa      	ldr	r2, [r7, #12]
 806ec20:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 806ec22:	69bb      	ldr	r3, [r7, #24]
 806ec24:	68ba      	ldr	r2, [r7, #8]
 806ec26:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 806ec28:	2101      	movs	r1, #1
 806ec2a:	69b8      	ldr	r0, [r7, #24]
 806ec2c:	f7ff fefe 	bl	806ea2c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 806ec30:	69bb      	ldr	r3, [r7, #24]
 806ec32:	78fa      	ldrb	r2, [r7, #3]
 806ec34:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 806ec38:	bf00      	nop
 806ec3a:	3710      	adds	r7, #16
 806ec3c:	46bd      	mov	sp, r7
 806ec3e:	bd80      	pop	{r7, pc}

0806ec40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 806ec40:	b580      	push	{r7, lr}
 806ec42:	b08e      	sub	sp, #56	@ 0x38
 806ec44:	af00      	add	r7, sp, #0
 806ec46:	60f8      	str	r0, [r7, #12]
 806ec48:	60b9      	str	r1, [r7, #8]
 806ec4a:	607a      	str	r2, [r7, #4]
 806ec4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 806ec4e:	2300      	movs	r3, #0
 806ec50:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 806ec52:	68fb      	ldr	r3, [r7, #12]
 806ec54:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 806ec56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 806ec58:	2b00      	cmp	r3, #0
 806ec5a:	d10b      	bne.n	806ec74 <xQueueGenericSend+0x34>
	__asm volatile
 806ec5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 806ec60:	f383 8811 	msr	BASEPRI, r3
 806ec64:	f3bf 8f6f 	isb	sy
 806ec68:	f3bf 8f4f 	dsb	sy
 806ec6c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 806ec6e:	bf00      	nop
 806ec70:	bf00      	nop
 806ec72:	e7fd      	b.n	806ec70 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 806ec74:	68bb      	ldr	r3, [r7, #8]
 806ec76:	2b00      	cmp	r3, #0
 806ec78:	d103      	bne.n	806ec82 <xQueueGenericSend+0x42>
 806ec7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 806ec7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 806ec7e:	2b00      	cmp	r3, #0
 806ec80:	d101      	bne.n	806ec86 <xQueueGenericSend+0x46>
 806ec82:	2301      	movs	r3, #1
 806ec84:	e000      	b.n	806ec88 <xQueueGenericSend+0x48>
 806ec86:	2300      	movs	r3, #0
 806ec88:	2b00      	cmp	r3, #0
 806ec8a:	d10b      	bne.n	806eca4 <xQueueGenericSend+0x64>
	__asm volatile
 806ec8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 806ec90:	f383 8811 	msr	BASEPRI, r3
 806ec94:	f3bf 8f6f 	isb	sy
 806ec98:	f3bf 8f4f 	dsb	sy
 806ec9c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 806ec9e:	bf00      	nop
 806eca0:	bf00      	nop
 806eca2:	e7fd      	b.n	806eca0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 806eca4:	683b      	ldr	r3, [r7, #0]
 806eca6:	2b02      	cmp	r3, #2
 806eca8:	d103      	bne.n	806ecb2 <xQueueGenericSend+0x72>
 806ecaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 806ecac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 806ecae:	2b01      	cmp	r3, #1
 806ecb0:	d101      	bne.n	806ecb6 <xQueueGenericSend+0x76>
 806ecb2:	2301      	movs	r3, #1
 806ecb4:	e000      	b.n	806ecb8 <xQueueGenericSend+0x78>
 806ecb6:	2300      	movs	r3, #0
 806ecb8:	2b00      	cmp	r3, #0
 806ecba:	d10b      	bne.n	806ecd4 <xQueueGenericSend+0x94>
	__asm volatile
 806ecbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 806ecc0:	f383 8811 	msr	BASEPRI, r3
 806ecc4:	f3bf 8f6f 	isb	sy
 806ecc8:	f3bf 8f4f 	dsb	sy
 806eccc:	623b      	str	r3, [r7, #32]
}
 806ecce:	bf00      	nop
 806ecd0:	bf00      	nop
 806ecd2:	e7fd      	b.n	806ecd0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 806ecd4:	f001 fd10 	bl	80706f8 <xTaskGetSchedulerState>
 806ecd8:	4603      	mov	r3, r0
 806ecda:	2b00      	cmp	r3, #0
 806ecdc:	d102      	bne.n	806ece4 <xQueueGenericSend+0xa4>
 806ecde:	687b      	ldr	r3, [r7, #4]
 806ece0:	2b00      	cmp	r3, #0
 806ece2:	d101      	bne.n	806ece8 <xQueueGenericSend+0xa8>
 806ece4:	2301      	movs	r3, #1
 806ece6:	e000      	b.n	806ecea <xQueueGenericSend+0xaa>
 806ece8:	2300      	movs	r3, #0
 806ecea:	2b00      	cmp	r3, #0
 806ecec:	d10b      	bne.n	806ed06 <xQueueGenericSend+0xc6>
	__asm volatile
 806ecee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 806ecf2:	f383 8811 	msr	BASEPRI, r3
 806ecf6:	f3bf 8f6f 	isb	sy
 806ecfa:	f3bf 8f4f 	dsb	sy
 806ecfe:	61fb      	str	r3, [r7, #28]
}
 806ed00:	bf00      	nop
 806ed02:	bf00      	nop
 806ed04:	e7fd      	b.n	806ed02 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 806ed06:	f7ff fd6f 	bl	806e7e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 806ed0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 806ed0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 806ed0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 806ed10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 806ed12:	429a      	cmp	r2, r3
 806ed14:	d302      	bcc.n	806ed1c <xQueueGenericSend+0xdc>
 806ed16:	683b      	ldr	r3, [r7, #0]
 806ed18:	2b02      	cmp	r3, #2
 806ed1a:	d129      	bne.n	806ed70 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 806ed1c:	683a      	ldr	r2, [r7, #0]
 806ed1e:	68b9      	ldr	r1, [r7, #8]
 806ed20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 806ed22:	f000 fa0f 	bl	806f144 <prvCopyDataToQueue>
 806ed26:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 806ed28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 806ed2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 806ed2c:	2b00      	cmp	r3, #0
 806ed2e:	d010      	beq.n	806ed52 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 806ed30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 806ed32:	3324      	adds	r3, #36	@ 0x24
 806ed34:	4618      	mov	r0, r3
 806ed36:	f001 fa2f 	bl	8070198 <xTaskRemoveFromEventList>
 806ed3a:	4603      	mov	r3, r0
 806ed3c:	2b00      	cmp	r3, #0
 806ed3e:	d013      	beq.n	806ed68 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 806ed40:	4b3f      	ldr	r3, [pc, #252]	@ (806ee40 <xQueueGenericSend+0x200>)
 806ed42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 806ed46:	601a      	str	r2, [r3, #0]
 806ed48:	f3bf 8f4f 	dsb	sy
 806ed4c:	f3bf 8f6f 	isb	sy
 806ed50:	e00a      	b.n	806ed68 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 806ed52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 806ed54:	2b00      	cmp	r3, #0
 806ed56:	d007      	beq.n	806ed68 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 806ed58:	4b39      	ldr	r3, [pc, #228]	@ (806ee40 <xQueueGenericSend+0x200>)
 806ed5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 806ed5e:	601a      	str	r2, [r3, #0]
 806ed60:	f3bf 8f4f 	dsb	sy
 806ed64:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 806ed68:	f7ff fd70 	bl	806e84c <vPortExitCritical>
				return pdPASS;
 806ed6c:	2301      	movs	r3, #1
 806ed6e:	e063      	b.n	806ee38 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 806ed70:	687b      	ldr	r3, [r7, #4]
 806ed72:	2b00      	cmp	r3, #0
 806ed74:	d103      	bne.n	806ed7e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 806ed76:	f7ff fd69 	bl	806e84c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 806ed7a:	2300      	movs	r3, #0
 806ed7c:	e05c      	b.n	806ee38 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 806ed7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 806ed80:	2b00      	cmp	r3, #0
 806ed82:	d106      	bne.n	806ed92 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 806ed84:	f107 0314 	add.w	r3, r7, #20
 806ed88:	4618      	mov	r0, r3
 806ed8a:	f001 fa69 	bl	8070260 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 806ed8e:	2301      	movs	r3, #1
 806ed90:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 806ed92:	f7ff fd5b 	bl	806e84c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 806ed96:	f000 fefd 	bl	806fb94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 806ed9a:	f7ff fd25 	bl	806e7e8 <vPortEnterCritical>
 806ed9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 806eda0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 806eda4:	b25b      	sxtb	r3, r3
 806eda6:	f1b3 3fff 	cmp.w	r3, #4294967295
 806edaa:	d103      	bne.n	806edb4 <xQueueGenericSend+0x174>
 806edac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 806edae:	2200      	movs	r2, #0
 806edb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 806edb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 806edb6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 806edba:	b25b      	sxtb	r3, r3
 806edbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 806edc0:	d103      	bne.n	806edca <xQueueGenericSend+0x18a>
 806edc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 806edc4:	2200      	movs	r2, #0
 806edc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 806edca:	f7ff fd3f 	bl	806e84c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 806edce:	1d3a      	adds	r2, r7, #4
 806edd0:	f107 0314 	add.w	r3, r7, #20
 806edd4:	4611      	mov	r1, r2
 806edd6:	4618      	mov	r0, r3
 806edd8:	f001 fa58 	bl	807028c <xTaskCheckForTimeOut>
 806eddc:	4603      	mov	r3, r0
 806edde:	2b00      	cmp	r3, #0
 806ede0:	d124      	bne.n	806ee2c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 806ede2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 806ede4:	f000 faa6 	bl	806f334 <prvIsQueueFull>
 806ede8:	4603      	mov	r3, r0
 806edea:	2b00      	cmp	r3, #0
 806edec:	d018      	beq.n	806ee20 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 806edee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 806edf0:	3310      	adds	r3, #16
 806edf2:	687a      	ldr	r2, [r7, #4]
 806edf4:	4611      	mov	r1, r2
 806edf6:	4618      	mov	r0, r3
 806edf8:	f001 f97c 	bl	80700f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 806edfc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 806edfe:	f000 fa31 	bl	806f264 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 806ee02:	f000 fed5 	bl	806fbb0 <xTaskResumeAll>
 806ee06:	4603      	mov	r3, r0
 806ee08:	2b00      	cmp	r3, #0
 806ee0a:	f47f af7c 	bne.w	806ed06 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 806ee0e:	4b0c      	ldr	r3, [pc, #48]	@ (806ee40 <xQueueGenericSend+0x200>)
 806ee10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 806ee14:	601a      	str	r2, [r3, #0]
 806ee16:	f3bf 8f4f 	dsb	sy
 806ee1a:	f3bf 8f6f 	isb	sy
 806ee1e:	e772      	b.n	806ed06 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 806ee20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 806ee22:	f000 fa1f 	bl	806f264 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 806ee26:	f000 fec3 	bl	806fbb0 <xTaskResumeAll>
 806ee2a:	e76c      	b.n	806ed06 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 806ee2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 806ee2e:	f000 fa19 	bl	806f264 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 806ee32:	f000 febd 	bl	806fbb0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 806ee36:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 806ee38:	4618      	mov	r0, r3
 806ee3a:	3738      	adds	r7, #56	@ 0x38
 806ee3c:	46bd      	mov	sp, r7
 806ee3e:	bd80      	pop	{r7, pc}
 806ee40:	e000ed04 	.word	0xe000ed04

0806ee44 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 806ee44:	b580      	push	{r7, lr}
 806ee46:	b090      	sub	sp, #64	@ 0x40
 806ee48:	af00      	add	r7, sp, #0
 806ee4a:	60f8      	str	r0, [r7, #12]
 806ee4c:	60b9      	str	r1, [r7, #8]
 806ee4e:	607a      	str	r2, [r7, #4]
 806ee50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 806ee52:	68fb      	ldr	r3, [r7, #12]
 806ee54:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 806ee56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 806ee58:	2b00      	cmp	r3, #0
 806ee5a:	d10b      	bne.n	806ee74 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 806ee5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 806ee60:	f383 8811 	msr	BASEPRI, r3
 806ee64:	f3bf 8f6f 	isb	sy
 806ee68:	f3bf 8f4f 	dsb	sy
 806ee6c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 806ee6e:	bf00      	nop
 806ee70:	bf00      	nop
 806ee72:	e7fd      	b.n	806ee70 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 806ee74:	68bb      	ldr	r3, [r7, #8]
 806ee76:	2b00      	cmp	r3, #0
 806ee78:	d103      	bne.n	806ee82 <xQueueGenericSendFromISR+0x3e>
 806ee7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 806ee7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 806ee7e:	2b00      	cmp	r3, #0
 806ee80:	d101      	bne.n	806ee86 <xQueueGenericSendFromISR+0x42>
 806ee82:	2301      	movs	r3, #1
 806ee84:	e000      	b.n	806ee88 <xQueueGenericSendFromISR+0x44>
 806ee86:	2300      	movs	r3, #0
 806ee88:	2b00      	cmp	r3, #0
 806ee8a:	d10b      	bne.n	806eea4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 806ee8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 806ee90:	f383 8811 	msr	BASEPRI, r3
 806ee94:	f3bf 8f6f 	isb	sy
 806ee98:	f3bf 8f4f 	dsb	sy
 806ee9c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 806ee9e:	bf00      	nop
 806eea0:	bf00      	nop
 806eea2:	e7fd      	b.n	806eea0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 806eea4:	683b      	ldr	r3, [r7, #0]
 806eea6:	2b02      	cmp	r3, #2
 806eea8:	d103      	bne.n	806eeb2 <xQueueGenericSendFromISR+0x6e>
 806eeaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 806eeac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 806eeae:	2b01      	cmp	r3, #1
 806eeb0:	d101      	bne.n	806eeb6 <xQueueGenericSendFromISR+0x72>
 806eeb2:	2301      	movs	r3, #1
 806eeb4:	e000      	b.n	806eeb8 <xQueueGenericSendFromISR+0x74>
 806eeb6:	2300      	movs	r3, #0
 806eeb8:	2b00      	cmp	r3, #0
 806eeba:	d10b      	bne.n	806eed4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 806eebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 806eec0:	f383 8811 	msr	BASEPRI, r3
 806eec4:	f3bf 8f6f 	isb	sy
 806eec8:	f3bf 8f4f 	dsb	sy
 806eecc:	623b      	str	r3, [r7, #32]
}
 806eece:	bf00      	nop
 806eed0:	bf00      	nop
 806eed2:	e7fd      	b.n	806eed0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 806eed4:	f7ff fd68 	bl	806e9a8 <vPortValidateInterruptPriority>
	__asm volatile
 806eed8:	f3ef 8211 	mrs	r2, BASEPRI
 806eedc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 806eee0:	f383 8811 	msr	BASEPRI, r3
 806eee4:	f3bf 8f6f 	isb	sy
 806eee8:	f3bf 8f4f 	dsb	sy
 806eeec:	61fa      	str	r2, [r7, #28]
 806eeee:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 806eef0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 806eef2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 806eef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 806eef6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 806eef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 806eefa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 806eefc:	429a      	cmp	r2, r3
 806eefe:	d302      	bcc.n	806ef06 <xQueueGenericSendFromISR+0xc2>
 806ef00:	683b      	ldr	r3, [r7, #0]
 806ef02:	2b02      	cmp	r3, #2
 806ef04:	d12f      	bne.n	806ef66 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 806ef06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 806ef08:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 806ef0c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 806ef10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 806ef12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 806ef14:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 806ef16:	683a      	ldr	r2, [r7, #0]
 806ef18:	68b9      	ldr	r1, [r7, #8]
 806ef1a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 806ef1c:	f000 f912 	bl	806f144 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 806ef20:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 806ef24:	f1b3 3fff 	cmp.w	r3, #4294967295
 806ef28:	d112      	bne.n	806ef50 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 806ef2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 806ef2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 806ef2e:	2b00      	cmp	r3, #0
 806ef30:	d016      	beq.n	806ef60 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 806ef32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 806ef34:	3324      	adds	r3, #36	@ 0x24
 806ef36:	4618      	mov	r0, r3
 806ef38:	f001 f92e 	bl	8070198 <xTaskRemoveFromEventList>
 806ef3c:	4603      	mov	r3, r0
 806ef3e:	2b00      	cmp	r3, #0
 806ef40:	d00e      	beq.n	806ef60 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 806ef42:	687b      	ldr	r3, [r7, #4]
 806ef44:	2b00      	cmp	r3, #0
 806ef46:	d00b      	beq.n	806ef60 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 806ef48:	687b      	ldr	r3, [r7, #4]
 806ef4a:	2201      	movs	r2, #1
 806ef4c:	601a      	str	r2, [r3, #0]
 806ef4e:	e007      	b.n	806ef60 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 806ef50:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 806ef54:	3301      	adds	r3, #1
 806ef56:	b2db      	uxtb	r3, r3
 806ef58:	b25a      	sxtb	r2, r3
 806ef5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 806ef5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 806ef60:	2301      	movs	r3, #1
 806ef62:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 806ef64:	e001      	b.n	806ef6a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 806ef66:	2300      	movs	r3, #0
 806ef68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 806ef6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 806ef6c:	617b      	str	r3, [r7, #20]
	__asm volatile
 806ef6e:	697b      	ldr	r3, [r7, #20]
 806ef70:	f383 8811 	msr	BASEPRI, r3
}
 806ef74:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 806ef76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 806ef78:	4618      	mov	r0, r3
 806ef7a:	3740      	adds	r7, #64	@ 0x40
 806ef7c:	46bd      	mov	sp, r7
 806ef7e:	bd80      	pop	{r7, pc}

0806ef80 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 806ef80:	b580      	push	{r7, lr}
 806ef82:	b08c      	sub	sp, #48	@ 0x30
 806ef84:	af00      	add	r7, sp, #0
 806ef86:	60f8      	str	r0, [r7, #12]
 806ef88:	60b9      	str	r1, [r7, #8]
 806ef8a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 806ef8c:	2300      	movs	r3, #0
 806ef8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 806ef90:	68fb      	ldr	r3, [r7, #12]
 806ef92:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 806ef94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 806ef96:	2b00      	cmp	r3, #0
 806ef98:	d10b      	bne.n	806efb2 <xQueueReceive+0x32>
	__asm volatile
 806ef9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 806ef9e:	f383 8811 	msr	BASEPRI, r3
 806efa2:	f3bf 8f6f 	isb	sy
 806efa6:	f3bf 8f4f 	dsb	sy
 806efaa:	623b      	str	r3, [r7, #32]
}
 806efac:	bf00      	nop
 806efae:	bf00      	nop
 806efb0:	e7fd      	b.n	806efae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 806efb2:	68bb      	ldr	r3, [r7, #8]
 806efb4:	2b00      	cmp	r3, #0
 806efb6:	d103      	bne.n	806efc0 <xQueueReceive+0x40>
 806efb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 806efba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 806efbc:	2b00      	cmp	r3, #0
 806efbe:	d101      	bne.n	806efc4 <xQueueReceive+0x44>
 806efc0:	2301      	movs	r3, #1
 806efc2:	e000      	b.n	806efc6 <xQueueReceive+0x46>
 806efc4:	2300      	movs	r3, #0
 806efc6:	2b00      	cmp	r3, #0
 806efc8:	d10b      	bne.n	806efe2 <xQueueReceive+0x62>
	__asm volatile
 806efca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 806efce:	f383 8811 	msr	BASEPRI, r3
 806efd2:	f3bf 8f6f 	isb	sy
 806efd6:	f3bf 8f4f 	dsb	sy
 806efda:	61fb      	str	r3, [r7, #28]
}
 806efdc:	bf00      	nop
 806efde:	bf00      	nop
 806efe0:	e7fd      	b.n	806efde <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 806efe2:	f001 fb89 	bl	80706f8 <xTaskGetSchedulerState>
 806efe6:	4603      	mov	r3, r0
 806efe8:	2b00      	cmp	r3, #0
 806efea:	d102      	bne.n	806eff2 <xQueueReceive+0x72>
 806efec:	687b      	ldr	r3, [r7, #4]
 806efee:	2b00      	cmp	r3, #0
 806eff0:	d101      	bne.n	806eff6 <xQueueReceive+0x76>
 806eff2:	2301      	movs	r3, #1
 806eff4:	e000      	b.n	806eff8 <xQueueReceive+0x78>
 806eff6:	2300      	movs	r3, #0
 806eff8:	2b00      	cmp	r3, #0
 806effa:	d10b      	bne.n	806f014 <xQueueReceive+0x94>
	__asm volatile
 806effc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 806f000:	f383 8811 	msr	BASEPRI, r3
 806f004:	f3bf 8f6f 	isb	sy
 806f008:	f3bf 8f4f 	dsb	sy
 806f00c:	61bb      	str	r3, [r7, #24]
}
 806f00e:	bf00      	nop
 806f010:	bf00      	nop
 806f012:	e7fd      	b.n	806f010 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 806f014:	f7ff fbe8 	bl	806e7e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 806f018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 806f01a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 806f01c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 806f01e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 806f020:	2b00      	cmp	r3, #0
 806f022:	d01f      	beq.n	806f064 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 806f024:	68b9      	ldr	r1, [r7, #8]
 806f026:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 806f028:	f000 f8f6 	bl	806f218 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 806f02c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 806f02e:	1e5a      	subs	r2, r3, #1
 806f030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 806f032:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 806f034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 806f036:	691b      	ldr	r3, [r3, #16]
 806f038:	2b00      	cmp	r3, #0
 806f03a:	d00f      	beq.n	806f05c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 806f03c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 806f03e:	3310      	adds	r3, #16
 806f040:	4618      	mov	r0, r3
 806f042:	f001 f8a9 	bl	8070198 <xTaskRemoveFromEventList>
 806f046:	4603      	mov	r3, r0
 806f048:	2b00      	cmp	r3, #0
 806f04a:	d007      	beq.n	806f05c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 806f04c:	4b3c      	ldr	r3, [pc, #240]	@ (806f140 <xQueueReceive+0x1c0>)
 806f04e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 806f052:	601a      	str	r2, [r3, #0]
 806f054:	f3bf 8f4f 	dsb	sy
 806f058:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 806f05c:	f7ff fbf6 	bl	806e84c <vPortExitCritical>
				return pdPASS;
 806f060:	2301      	movs	r3, #1
 806f062:	e069      	b.n	806f138 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 806f064:	687b      	ldr	r3, [r7, #4]
 806f066:	2b00      	cmp	r3, #0
 806f068:	d103      	bne.n	806f072 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 806f06a:	f7ff fbef 	bl	806e84c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 806f06e:	2300      	movs	r3, #0
 806f070:	e062      	b.n	806f138 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 806f072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 806f074:	2b00      	cmp	r3, #0
 806f076:	d106      	bne.n	806f086 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 806f078:	f107 0310 	add.w	r3, r7, #16
 806f07c:	4618      	mov	r0, r3
 806f07e:	f001 f8ef 	bl	8070260 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 806f082:	2301      	movs	r3, #1
 806f084:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 806f086:	f7ff fbe1 	bl	806e84c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 806f08a:	f000 fd83 	bl	806fb94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 806f08e:	f7ff fbab 	bl	806e7e8 <vPortEnterCritical>
 806f092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 806f094:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 806f098:	b25b      	sxtb	r3, r3
 806f09a:	f1b3 3fff 	cmp.w	r3, #4294967295
 806f09e:	d103      	bne.n	806f0a8 <xQueueReceive+0x128>
 806f0a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 806f0a2:	2200      	movs	r2, #0
 806f0a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 806f0a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 806f0aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 806f0ae:	b25b      	sxtb	r3, r3
 806f0b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 806f0b4:	d103      	bne.n	806f0be <xQueueReceive+0x13e>
 806f0b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 806f0b8:	2200      	movs	r2, #0
 806f0ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 806f0be:	f7ff fbc5 	bl	806e84c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 806f0c2:	1d3a      	adds	r2, r7, #4
 806f0c4:	f107 0310 	add.w	r3, r7, #16
 806f0c8:	4611      	mov	r1, r2
 806f0ca:	4618      	mov	r0, r3
 806f0cc:	f001 f8de 	bl	807028c <xTaskCheckForTimeOut>
 806f0d0:	4603      	mov	r3, r0
 806f0d2:	2b00      	cmp	r3, #0
 806f0d4:	d123      	bne.n	806f11e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 806f0d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 806f0d8:	f000 f916 	bl	806f308 <prvIsQueueEmpty>
 806f0dc:	4603      	mov	r3, r0
 806f0de:	2b00      	cmp	r3, #0
 806f0e0:	d017      	beq.n	806f112 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 806f0e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 806f0e4:	3324      	adds	r3, #36	@ 0x24
 806f0e6:	687a      	ldr	r2, [r7, #4]
 806f0e8:	4611      	mov	r1, r2
 806f0ea:	4618      	mov	r0, r3
 806f0ec:	f001 f802 	bl	80700f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 806f0f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 806f0f2:	f000 f8b7 	bl	806f264 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 806f0f6:	f000 fd5b 	bl	806fbb0 <xTaskResumeAll>
 806f0fa:	4603      	mov	r3, r0
 806f0fc:	2b00      	cmp	r3, #0
 806f0fe:	d189      	bne.n	806f014 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 806f100:	4b0f      	ldr	r3, [pc, #60]	@ (806f140 <xQueueReceive+0x1c0>)
 806f102:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 806f106:	601a      	str	r2, [r3, #0]
 806f108:	f3bf 8f4f 	dsb	sy
 806f10c:	f3bf 8f6f 	isb	sy
 806f110:	e780      	b.n	806f014 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 806f112:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 806f114:	f000 f8a6 	bl	806f264 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 806f118:	f000 fd4a 	bl	806fbb0 <xTaskResumeAll>
 806f11c:	e77a      	b.n	806f014 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 806f11e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 806f120:	f000 f8a0 	bl	806f264 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 806f124:	f000 fd44 	bl	806fbb0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 806f128:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 806f12a:	f000 f8ed 	bl	806f308 <prvIsQueueEmpty>
 806f12e:	4603      	mov	r3, r0
 806f130:	2b00      	cmp	r3, #0
 806f132:	f43f af6f 	beq.w	806f014 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 806f136:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 806f138:	4618      	mov	r0, r3
 806f13a:	3730      	adds	r7, #48	@ 0x30
 806f13c:	46bd      	mov	sp, r7
 806f13e:	bd80      	pop	{r7, pc}
 806f140:	e000ed04 	.word	0xe000ed04

0806f144 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 806f144:	b580      	push	{r7, lr}
 806f146:	b086      	sub	sp, #24
 806f148:	af00      	add	r7, sp, #0
 806f14a:	60f8      	str	r0, [r7, #12]
 806f14c:	60b9      	str	r1, [r7, #8]
 806f14e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 806f150:	2300      	movs	r3, #0
 806f152:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 806f154:	68fb      	ldr	r3, [r7, #12]
 806f156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 806f158:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 806f15a:	68fb      	ldr	r3, [r7, #12]
 806f15c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 806f15e:	2b00      	cmp	r3, #0
 806f160:	d10d      	bne.n	806f17e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 806f162:	68fb      	ldr	r3, [r7, #12]
 806f164:	681b      	ldr	r3, [r3, #0]
 806f166:	2b00      	cmp	r3, #0
 806f168:	d14d      	bne.n	806f206 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 806f16a:	68fb      	ldr	r3, [r7, #12]
 806f16c:	689b      	ldr	r3, [r3, #8]
 806f16e:	4618      	mov	r0, r3
 806f170:	f001 fae0 	bl	8070734 <xTaskPriorityDisinherit>
 806f174:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 806f176:	68fb      	ldr	r3, [r7, #12]
 806f178:	2200      	movs	r2, #0
 806f17a:	609a      	str	r2, [r3, #8]
 806f17c:	e043      	b.n	806f206 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 806f17e:	687b      	ldr	r3, [r7, #4]
 806f180:	2b00      	cmp	r3, #0
 806f182:	d119      	bne.n	806f1b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 806f184:	68fb      	ldr	r3, [r7, #12]
 806f186:	6858      	ldr	r0, [r3, #4]
 806f188:	68fb      	ldr	r3, [r7, #12]
 806f18a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 806f18c:	461a      	mov	r2, r3
 806f18e:	68b9      	ldr	r1, [r7, #8]
 806f190:	f002 f8d6 	bl	8071340 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 806f194:	68fb      	ldr	r3, [r7, #12]
 806f196:	685a      	ldr	r2, [r3, #4]
 806f198:	68fb      	ldr	r3, [r7, #12]
 806f19a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 806f19c:	441a      	add	r2, r3
 806f19e:	68fb      	ldr	r3, [r7, #12]
 806f1a0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 806f1a2:	68fb      	ldr	r3, [r7, #12]
 806f1a4:	685a      	ldr	r2, [r3, #4]
 806f1a6:	68fb      	ldr	r3, [r7, #12]
 806f1a8:	689b      	ldr	r3, [r3, #8]
 806f1aa:	429a      	cmp	r2, r3
 806f1ac:	d32b      	bcc.n	806f206 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 806f1ae:	68fb      	ldr	r3, [r7, #12]
 806f1b0:	681a      	ldr	r2, [r3, #0]
 806f1b2:	68fb      	ldr	r3, [r7, #12]
 806f1b4:	605a      	str	r2, [r3, #4]
 806f1b6:	e026      	b.n	806f206 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 806f1b8:	68fb      	ldr	r3, [r7, #12]
 806f1ba:	68d8      	ldr	r0, [r3, #12]
 806f1bc:	68fb      	ldr	r3, [r7, #12]
 806f1be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 806f1c0:	461a      	mov	r2, r3
 806f1c2:	68b9      	ldr	r1, [r7, #8]
 806f1c4:	f002 f8bc 	bl	8071340 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 806f1c8:	68fb      	ldr	r3, [r7, #12]
 806f1ca:	68da      	ldr	r2, [r3, #12]
 806f1cc:	68fb      	ldr	r3, [r7, #12]
 806f1ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 806f1d0:	425b      	negs	r3, r3
 806f1d2:	441a      	add	r2, r3
 806f1d4:	68fb      	ldr	r3, [r7, #12]
 806f1d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 806f1d8:	68fb      	ldr	r3, [r7, #12]
 806f1da:	68da      	ldr	r2, [r3, #12]
 806f1dc:	68fb      	ldr	r3, [r7, #12]
 806f1de:	681b      	ldr	r3, [r3, #0]
 806f1e0:	429a      	cmp	r2, r3
 806f1e2:	d207      	bcs.n	806f1f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 806f1e4:	68fb      	ldr	r3, [r7, #12]
 806f1e6:	689a      	ldr	r2, [r3, #8]
 806f1e8:	68fb      	ldr	r3, [r7, #12]
 806f1ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 806f1ec:	425b      	negs	r3, r3
 806f1ee:	441a      	add	r2, r3
 806f1f0:	68fb      	ldr	r3, [r7, #12]
 806f1f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 806f1f4:	687b      	ldr	r3, [r7, #4]
 806f1f6:	2b02      	cmp	r3, #2
 806f1f8:	d105      	bne.n	806f206 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 806f1fa:	693b      	ldr	r3, [r7, #16]
 806f1fc:	2b00      	cmp	r3, #0
 806f1fe:	d002      	beq.n	806f206 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 806f200:	693b      	ldr	r3, [r7, #16]
 806f202:	3b01      	subs	r3, #1
 806f204:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 806f206:	693b      	ldr	r3, [r7, #16]
 806f208:	1c5a      	adds	r2, r3, #1
 806f20a:	68fb      	ldr	r3, [r7, #12]
 806f20c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 806f20e:	697b      	ldr	r3, [r7, #20]
}
 806f210:	4618      	mov	r0, r3
 806f212:	3718      	adds	r7, #24
 806f214:	46bd      	mov	sp, r7
 806f216:	bd80      	pop	{r7, pc}

0806f218 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 806f218:	b580      	push	{r7, lr}
 806f21a:	b082      	sub	sp, #8
 806f21c:	af00      	add	r7, sp, #0
 806f21e:	6078      	str	r0, [r7, #4]
 806f220:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 806f222:	687b      	ldr	r3, [r7, #4]
 806f224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 806f226:	2b00      	cmp	r3, #0
 806f228:	d018      	beq.n	806f25c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 806f22a:	687b      	ldr	r3, [r7, #4]
 806f22c:	68da      	ldr	r2, [r3, #12]
 806f22e:	687b      	ldr	r3, [r7, #4]
 806f230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 806f232:	441a      	add	r2, r3
 806f234:	687b      	ldr	r3, [r7, #4]
 806f236:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 806f238:	687b      	ldr	r3, [r7, #4]
 806f23a:	68da      	ldr	r2, [r3, #12]
 806f23c:	687b      	ldr	r3, [r7, #4]
 806f23e:	689b      	ldr	r3, [r3, #8]
 806f240:	429a      	cmp	r2, r3
 806f242:	d303      	bcc.n	806f24c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 806f244:	687b      	ldr	r3, [r7, #4]
 806f246:	681a      	ldr	r2, [r3, #0]
 806f248:	687b      	ldr	r3, [r7, #4]
 806f24a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 806f24c:	687b      	ldr	r3, [r7, #4]
 806f24e:	68d9      	ldr	r1, [r3, #12]
 806f250:	687b      	ldr	r3, [r7, #4]
 806f252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 806f254:	461a      	mov	r2, r3
 806f256:	6838      	ldr	r0, [r7, #0]
 806f258:	f002 f872 	bl	8071340 <memcpy>
	}
}
 806f25c:	bf00      	nop
 806f25e:	3708      	adds	r7, #8
 806f260:	46bd      	mov	sp, r7
 806f262:	bd80      	pop	{r7, pc}

0806f264 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 806f264:	b580      	push	{r7, lr}
 806f266:	b084      	sub	sp, #16
 806f268:	af00      	add	r7, sp, #0
 806f26a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 806f26c:	f7ff fabc 	bl	806e7e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 806f270:	687b      	ldr	r3, [r7, #4]
 806f272:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 806f276:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 806f278:	e011      	b.n	806f29e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 806f27a:	687b      	ldr	r3, [r7, #4]
 806f27c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 806f27e:	2b00      	cmp	r3, #0
 806f280:	d012      	beq.n	806f2a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 806f282:	687b      	ldr	r3, [r7, #4]
 806f284:	3324      	adds	r3, #36	@ 0x24
 806f286:	4618      	mov	r0, r3
 806f288:	f000 ff86 	bl	8070198 <xTaskRemoveFromEventList>
 806f28c:	4603      	mov	r3, r0
 806f28e:	2b00      	cmp	r3, #0
 806f290:	d001      	beq.n	806f296 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 806f292:	f001 f86f 	bl	8070374 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 806f296:	7bfb      	ldrb	r3, [r7, #15]
 806f298:	3b01      	subs	r3, #1
 806f29a:	b2db      	uxtb	r3, r3
 806f29c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 806f29e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 806f2a2:	2b00      	cmp	r3, #0
 806f2a4:	dce9      	bgt.n	806f27a <prvUnlockQueue+0x16>
 806f2a6:	e000      	b.n	806f2aa <prvUnlockQueue+0x46>
					break;
 806f2a8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 806f2aa:	687b      	ldr	r3, [r7, #4]
 806f2ac:	22ff      	movs	r2, #255	@ 0xff
 806f2ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 806f2b2:	f7ff facb 	bl	806e84c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 806f2b6:	f7ff fa97 	bl	806e7e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 806f2ba:	687b      	ldr	r3, [r7, #4]
 806f2bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 806f2c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 806f2c2:	e011      	b.n	806f2e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 806f2c4:	687b      	ldr	r3, [r7, #4]
 806f2c6:	691b      	ldr	r3, [r3, #16]
 806f2c8:	2b00      	cmp	r3, #0
 806f2ca:	d012      	beq.n	806f2f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 806f2cc:	687b      	ldr	r3, [r7, #4]
 806f2ce:	3310      	adds	r3, #16
 806f2d0:	4618      	mov	r0, r3
 806f2d2:	f000 ff61 	bl	8070198 <xTaskRemoveFromEventList>
 806f2d6:	4603      	mov	r3, r0
 806f2d8:	2b00      	cmp	r3, #0
 806f2da:	d001      	beq.n	806f2e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 806f2dc:	f001 f84a 	bl	8070374 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 806f2e0:	7bbb      	ldrb	r3, [r7, #14]
 806f2e2:	3b01      	subs	r3, #1
 806f2e4:	b2db      	uxtb	r3, r3
 806f2e6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 806f2e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 806f2ec:	2b00      	cmp	r3, #0
 806f2ee:	dce9      	bgt.n	806f2c4 <prvUnlockQueue+0x60>
 806f2f0:	e000      	b.n	806f2f4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 806f2f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 806f2f4:	687b      	ldr	r3, [r7, #4]
 806f2f6:	22ff      	movs	r2, #255	@ 0xff
 806f2f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 806f2fc:	f7ff faa6 	bl	806e84c <vPortExitCritical>
}
 806f300:	bf00      	nop
 806f302:	3710      	adds	r7, #16
 806f304:	46bd      	mov	sp, r7
 806f306:	bd80      	pop	{r7, pc}

0806f308 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 806f308:	b580      	push	{r7, lr}
 806f30a:	b084      	sub	sp, #16
 806f30c:	af00      	add	r7, sp, #0
 806f30e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 806f310:	f7ff fa6a 	bl	806e7e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 806f314:	687b      	ldr	r3, [r7, #4]
 806f316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 806f318:	2b00      	cmp	r3, #0
 806f31a:	d102      	bne.n	806f322 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 806f31c:	2301      	movs	r3, #1
 806f31e:	60fb      	str	r3, [r7, #12]
 806f320:	e001      	b.n	806f326 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 806f322:	2300      	movs	r3, #0
 806f324:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 806f326:	f7ff fa91 	bl	806e84c <vPortExitCritical>

	return xReturn;
 806f32a:	68fb      	ldr	r3, [r7, #12]
}
 806f32c:	4618      	mov	r0, r3
 806f32e:	3710      	adds	r7, #16
 806f330:	46bd      	mov	sp, r7
 806f332:	bd80      	pop	{r7, pc}

0806f334 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 806f334:	b580      	push	{r7, lr}
 806f336:	b084      	sub	sp, #16
 806f338:	af00      	add	r7, sp, #0
 806f33a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 806f33c:	f7ff fa54 	bl	806e7e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 806f340:	687b      	ldr	r3, [r7, #4]
 806f342:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 806f344:	687b      	ldr	r3, [r7, #4]
 806f346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 806f348:	429a      	cmp	r2, r3
 806f34a:	d102      	bne.n	806f352 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 806f34c:	2301      	movs	r3, #1
 806f34e:	60fb      	str	r3, [r7, #12]
 806f350:	e001      	b.n	806f356 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 806f352:	2300      	movs	r3, #0
 806f354:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 806f356:	f7ff fa79 	bl	806e84c <vPortExitCritical>

	return xReturn;
 806f35a:	68fb      	ldr	r3, [r7, #12]
}
 806f35c:	4618      	mov	r0, r3
 806f35e:	3710      	adds	r7, #16
 806f360:	46bd      	mov	sp, r7
 806f362:	bd80      	pop	{r7, pc}

0806f364 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 806f364:	b480      	push	{r7}
 806f366:	b085      	sub	sp, #20
 806f368:	af00      	add	r7, sp, #0
 806f36a:	6078      	str	r0, [r7, #4]
 806f36c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 806f36e:	2300      	movs	r3, #0
 806f370:	60fb      	str	r3, [r7, #12]
 806f372:	e014      	b.n	806f39e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 806f374:	4a0f      	ldr	r2, [pc, #60]	@ (806f3b4 <vQueueAddToRegistry+0x50>)
 806f376:	68fb      	ldr	r3, [r7, #12]
 806f378:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 806f37c:	2b00      	cmp	r3, #0
 806f37e:	d10b      	bne.n	806f398 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 806f380:	490c      	ldr	r1, [pc, #48]	@ (806f3b4 <vQueueAddToRegistry+0x50>)
 806f382:	68fb      	ldr	r3, [r7, #12]
 806f384:	683a      	ldr	r2, [r7, #0]
 806f386:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 806f38a:	4a0a      	ldr	r2, [pc, #40]	@ (806f3b4 <vQueueAddToRegistry+0x50>)
 806f38c:	68fb      	ldr	r3, [r7, #12]
 806f38e:	00db      	lsls	r3, r3, #3
 806f390:	4413      	add	r3, r2
 806f392:	687a      	ldr	r2, [r7, #4]
 806f394:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 806f396:	e006      	b.n	806f3a6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 806f398:	68fb      	ldr	r3, [r7, #12]
 806f39a:	3301      	adds	r3, #1
 806f39c:	60fb      	str	r3, [r7, #12]
 806f39e:	68fb      	ldr	r3, [r7, #12]
 806f3a0:	2b07      	cmp	r3, #7
 806f3a2:	d9e7      	bls.n	806f374 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 806f3a4:	bf00      	nop
 806f3a6:	bf00      	nop
 806f3a8:	3714      	adds	r7, #20
 806f3aa:	46bd      	mov	sp, r7
 806f3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 806f3b0:	4770      	bx	lr
 806f3b2:	bf00      	nop
 806f3b4:	20015048 	.word	0x20015048

0806f3b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 806f3b8:	b580      	push	{r7, lr}
 806f3ba:	b086      	sub	sp, #24
 806f3bc:	af00      	add	r7, sp, #0
 806f3be:	60f8      	str	r0, [r7, #12]
 806f3c0:	60b9      	str	r1, [r7, #8]
 806f3c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 806f3c4:	68fb      	ldr	r3, [r7, #12]
 806f3c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 806f3c8:	f7ff fa0e 	bl	806e7e8 <vPortEnterCritical>
 806f3cc:	697b      	ldr	r3, [r7, #20]
 806f3ce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 806f3d2:	b25b      	sxtb	r3, r3
 806f3d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 806f3d8:	d103      	bne.n	806f3e2 <vQueueWaitForMessageRestricted+0x2a>
 806f3da:	697b      	ldr	r3, [r7, #20]
 806f3dc:	2200      	movs	r2, #0
 806f3de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 806f3e2:	697b      	ldr	r3, [r7, #20]
 806f3e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 806f3e8:	b25b      	sxtb	r3, r3
 806f3ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 806f3ee:	d103      	bne.n	806f3f8 <vQueueWaitForMessageRestricted+0x40>
 806f3f0:	697b      	ldr	r3, [r7, #20]
 806f3f2:	2200      	movs	r2, #0
 806f3f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 806f3f8:	f7ff fa28 	bl	806e84c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 806f3fc:	697b      	ldr	r3, [r7, #20]
 806f3fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 806f400:	2b00      	cmp	r3, #0
 806f402:	d106      	bne.n	806f412 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 806f404:	697b      	ldr	r3, [r7, #20]
 806f406:	3324      	adds	r3, #36	@ 0x24
 806f408:	687a      	ldr	r2, [r7, #4]
 806f40a:	68b9      	ldr	r1, [r7, #8]
 806f40c:	4618      	mov	r0, r3
 806f40e:	f000 fe97 	bl	8070140 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 806f412:	6978      	ldr	r0, [r7, #20]
 806f414:	f7ff ff26 	bl	806f264 <prvUnlockQueue>
	}
 806f418:	bf00      	nop
 806f41a:	3718      	adds	r7, #24
 806f41c:	46bd      	mov	sp, r7
 806f41e:	bd80      	pop	{r7, pc}

0806f420 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 806f420:	b580      	push	{r7, lr}
 806f422:	b08e      	sub	sp, #56	@ 0x38
 806f424:	af04      	add	r7, sp, #16
 806f426:	60f8      	str	r0, [r7, #12]
 806f428:	60b9      	str	r1, [r7, #8]
 806f42a:	607a      	str	r2, [r7, #4]
 806f42c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 806f42e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 806f430:	2b00      	cmp	r3, #0
 806f432:	d10b      	bne.n	806f44c <xTaskCreateStatic+0x2c>
	__asm volatile
 806f434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 806f438:	f383 8811 	msr	BASEPRI, r3
 806f43c:	f3bf 8f6f 	isb	sy
 806f440:	f3bf 8f4f 	dsb	sy
 806f444:	623b      	str	r3, [r7, #32]
}
 806f446:	bf00      	nop
 806f448:	bf00      	nop
 806f44a:	e7fd      	b.n	806f448 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 806f44c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 806f44e:	2b00      	cmp	r3, #0
 806f450:	d10b      	bne.n	806f46a <xTaskCreateStatic+0x4a>
	__asm volatile
 806f452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 806f456:	f383 8811 	msr	BASEPRI, r3
 806f45a:	f3bf 8f6f 	isb	sy
 806f45e:	f3bf 8f4f 	dsb	sy
 806f462:	61fb      	str	r3, [r7, #28]
}
 806f464:	bf00      	nop
 806f466:	bf00      	nop
 806f468:	e7fd      	b.n	806f466 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 806f46a:	f44f 73d4 	mov.w	r3, #424	@ 0x1a8
 806f46e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 806f470:	693b      	ldr	r3, [r7, #16]
 806f472:	f5b3 7fd4 	cmp.w	r3, #424	@ 0x1a8
 806f476:	d00b      	beq.n	806f490 <xTaskCreateStatic+0x70>
	__asm volatile
 806f478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 806f47c:	f383 8811 	msr	BASEPRI, r3
 806f480:	f3bf 8f6f 	isb	sy
 806f484:	f3bf 8f4f 	dsb	sy
 806f488:	61bb      	str	r3, [r7, #24]
}
 806f48a:	bf00      	nop
 806f48c:	bf00      	nop
 806f48e:	e7fd      	b.n	806f48c <xTaskCreateStatic+0x6c>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 806f490:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 806f492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 806f494:	2b00      	cmp	r3, #0
 806f496:	d01e      	beq.n	806f4d6 <xTaskCreateStatic+0xb6>
 806f498:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 806f49a:	2b00      	cmp	r3, #0
 806f49c:	d01b      	beq.n	806f4d6 <xTaskCreateStatic+0xb6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 806f49e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 806f4a0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 806f4a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 806f4a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 806f4a6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 806f4a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 806f4aa:	2202      	movs	r2, #2
 806f4ac:	f883 21a1 	strb.w	r2, [r3, #417]	@ 0x1a1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 806f4b0:	2300      	movs	r3, #0
 806f4b2:	9303      	str	r3, [sp, #12]
 806f4b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 806f4b6:	9302      	str	r3, [sp, #8]
 806f4b8:	f107 0314 	add.w	r3, r7, #20
 806f4bc:	9301      	str	r3, [sp, #4]
 806f4be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 806f4c0:	9300      	str	r3, [sp, #0]
 806f4c2:	683b      	ldr	r3, [r7, #0]
 806f4c4:	687a      	ldr	r2, [r7, #4]
 806f4c6:	68b9      	ldr	r1, [r7, #8]
 806f4c8:	68f8      	ldr	r0, [r7, #12]
 806f4ca:	f000 f851 	bl	806f570 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 806f4ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 806f4d0:	f000 f90c 	bl	806f6ec <prvAddNewTaskToReadyList>
 806f4d4:	e001      	b.n	806f4da <xTaskCreateStatic+0xba>
		}
		else
		{
			xReturn = NULL;
 806f4d6:	2300      	movs	r3, #0
 806f4d8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 806f4da:	697b      	ldr	r3, [r7, #20]
	}
 806f4dc:	4618      	mov	r0, r3
 806f4de:	3728      	adds	r7, #40	@ 0x28
 806f4e0:	46bd      	mov	sp, r7
 806f4e2:	bd80      	pop	{r7, pc}

0806f4e4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 806f4e4:	b580      	push	{r7, lr}
 806f4e6:	b08c      	sub	sp, #48	@ 0x30
 806f4e8:	af04      	add	r7, sp, #16
 806f4ea:	60f8      	str	r0, [r7, #12]
 806f4ec:	60b9      	str	r1, [r7, #8]
 806f4ee:	603b      	str	r3, [r7, #0]
 806f4f0:	4613      	mov	r3, r2
 806f4f2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 806f4f4:	88fb      	ldrh	r3, [r7, #6]
 806f4f6:	009b      	lsls	r3, r3, #2
 806f4f8:	4618      	mov	r0, r3
 806f4fa:	f7fe fd9f 	bl	806e03c <pvPortMalloc>
 806f4fe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 806f500:	697b      	ldr	r3, [r7, #20]
 806f502:	2b00      	cmp	r3, #0
 806f504:	d00f      	beq.n	806f526 <xTaskCreate+0x42>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 806f506:	f44f 70d4 	mov.w	r0, #424	@ 0x1a8
 806f50a:	f7fe fd97 	bl	806e03c <pvPortMalloc>
 806f50e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 806f510:	69fb      	ldr	r3, [r7, #28]
 806f512:	2b00      	cmp	r3, #0
 806f514:	d003      	beq.n	806f51e <xTaskCreate+0x3a>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 806f516:	69fb      	ldr	r3, [r7, #28]
 806f518:	697a      	ldr	r2, [r7, #20]
 806f51a:	631a      	str	r2, [r3, #48]	@ 0x30
 806f51c:	e005      	b.n	806f52a <xTaskCreate+0x46>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 806f51e:	6978      	ldr	r0, [r7, #20]
 806f520:	f7fe fe60 	bl	806e1e4 <vPortFree>
 806f524:	e001      	b.n	806f52a <xTaskCreate+0x46>
				}
			}
			else
			{
				pxNewTCB = NULL;
 806f526:	2300      	movs	r3, #0
 806f528:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 806f52a:	69fb      	ldr	r3, [r7, #28]
 806f52c:	2b00      	cmp	r3, #0
 806f52e:	d017      	beq.n	806f560 <xTaskCreate+0x7c>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 806f530:	69fb      	ldr	r3, [r7, #28]
 806f532:	2200      	movs	r2, #0
 806f534:	f883 21a1 	strb.w	r2, [r3, #417]	@ 0x1a1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 806f538:	88fa      	ldrh	r2, [r7, #6]
 806f53a:	2300      	movs	r3, #0
 806f53c:	9303      	str	r3, [sp, #12]
 806f53e:	69fb      	ldr	r3, [r7, #28]
 806f540:	9302      	str	r3, [sp, #8]
 806f542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 806f544:	9301      	str	r3, [sp, #4]
 806f546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 806f548:	9300      	str	r3, [sp, #0]
 806f54a:	683b      	ldr	r3, [r7, #0]
 806f54c:	68b9      	ldr	r1, [r7, #8]
 806f54e:	68f8      	ldr	r0, [r7, #12]
 806f550:	f000 f80e 	bl	806f570 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 806f554:	69f8      	ldr	r0, [r7, #28]
 806f556:	f000 f8c9 	bl	806f6ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 806f55a:	2301      	movs	r3, #1
 806f55c:	61bb      	str	r3, [r7, #24]
 806f55e:	e002      	b.n	806f566 <xTaskCreate+0x82>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 806f560:	f04f 33ff 	mov.w	r3, #4294967295
 806f564:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 806f566:	69bb      	ldr	r3, [r7, #24]
	}
 806f568:	4618      	mov	r0, r3
 806f56a:	3720      	adds	r7, #32
 806f56c:	46bd      	mov	sp, r7
 806f56e:	bd80      	pop	{r7, pc}

0806f570 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 806f570:	b580      	push	{r7, lr}
 806f572:	b088      	sub	sp, #32
 806f574:	af00      	add	r7, sp, #0
 806f576:	60f8      	str	r0, [r7, #12]
 806f578:	60b9      	str	r1, [r7, #8]
 806f57a:	607a      	str	r2, [r7, #4]
 806f57c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 806f57e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 806f580:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 806f582:	687b      	ldr	r3, [r7, #4]
 806f584:	009b      	lsls	r3, r3, #2
 806f586:	461a      	mov	r2, r3
 806f588:	21a5      	movs	r1, #165	@ 0xa5
 806f58a:	f001 fe51 	bl	8071230 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 806f58e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 806f590:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 806f592:	687b      	ldr	r3, [r7, #4]
 806f594:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 806f598:	3b01      	subs	r3, #1
 806f59a:	009b      	lsls	r3, r3, #2
 806f59c:	4413      	add	r3, r2
 806f59e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 806f5a0:	69bb      	ldr	r3, [r7, #24]
 806f5a2:	f023 0307 	bic.w	r3, r3, #7
 806f5a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 806f5a8:	69bb      	ldr	r3, [r7, #24]
 806f5aa:	f003 0307 	and.w	r3, r3, #7
 806f5ae:	2b00      	cmp	r3, #0
 806f5b0:	d00b      	beq.n	806f5ca <prvInitialiseNewTask+0x5a>
	__asm volatile
 806f5b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 806f5b6:	f383 8811 	msr	BASEPRI, r3
 806f5ba:	f3bf 8f6f 	isb	sy
 806f5be:	f3bf 8f4f 	dsb	sy
 806f5c2:	617b      	str	r3, [r7, #20]
}
 806f5c4:	bf00      	nop
 806f5c6:	bf00      	nop
 806f5c8:	e7fd      	b.n	806f5c6 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 806f5ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 806f5cc:	69ba      	ldr	r2, [r7, #24]
 806f5ce:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 806f5d2:	68bb      	ldr	r3, [r7, #8]
 806f5d4:	2b00      	cmp	r3, #0
 806f5d6:	d01f      	beq.n	806f618 <prvInitialiseNewTask+0xa8>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 806f5d8:	2300      	movs	r3, #0
 806f5da:	61fb      	str	r3, [r7, #28]
 806f5dc:	e012      	b.n	806f604 <prvInitialiseNewTask+0x94>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 806f5de:	68ba      	ldr	r2, [r7, #8]
 806f5e0:	69fb      	ldr	r3, [r7, #28]
 806f5e2:	4413      	add	r3, r2
 806f5e4:	7819      	ldrb	r1, [r3, #0]
 806f5e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 806f5e8:	69fb      	ldr	r3, [r7, #28]
 806f5ea:	4413      	add	r3, r2
 806f5ec:	3334      	adds	r3, #52	@ 0x34
 806f5ee:	460a      	mov	r2, r1
 806f5f0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 806f5f2:	68ba      	ldr	r2, [r7, #8]
 806f5f4:	69fb      	ldr	r3, [r7, #28]
 806f5f6:	4413      	add	r3, r2
 806f5f8:	781b      	ldrb	r3, [r3, #0]
 806f5fa:	2b00      	cmp	r3, #0
 806f5fc:	d006      	beq.n	806f60c <prvInitialiseNewTask+0x9c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 806f5fe:	69fb      	ldr	r3, [r7, #28]
 806f600:	3301      	adds	r3, #1
 806f602:	61fb      	str	r3, [r7, #28]
 806f604:	69fb      	ldr	r3, [r7, #28]
 806f606:	2bfe      	cmp	r3, #254	@ 0xfe
 806f608:	d9e9      	bls.n	806f5de <prvInitialiseNewTask+0x6e>
 806f60a:	e000      	b.n	806f60e <prvInitialiseNewTask+0x9e>
			{
				break;
 806f60c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 806f60e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 806f610:	2200      	movs	r2, #0
 806f612:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
 806f616:	e003      	b.n	806f620 <prvInitialiseNewTask+0xb0>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 806f618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 806f61a:	2200      	movs	r2, #0
 806f61c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 806f620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 806f622:	2b37      	cmp	r3, #55	@ 0x37
 806f624:	d901      	bls.n	806f62a <prvInitialiseNewTask+0xba>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 806f626:	2337      	movs	r3, #55	@ 0x37
 806f628:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 806f62a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 806f62c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 806f62e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 806f630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 806f632:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 806f634:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
		pxNewTCB->uxMutexesHeld = 0;
 806f638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 806f63a:	2200      	movs	r2, #0
 806f63c:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 806f640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 806f642:	3304      	adds	r3, #4
 806f644:	4618      	mov	r0, r3
 806f646:	f7fe ff0d 	bl	806e464 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 806f64a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 806f64c:	3318      	adds	r3, #24
 806f64e:	4618      	mov	r0, r3
 806f650:	f7fe ff08 	bl	806e464 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 806f654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 806f656:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 806f658:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 806f65a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 806f65c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 806f660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 806f662:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 806f664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 806f666:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 806f668:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 806f66a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 806f66c:	2200      	movs	r2, #0
 806f66e:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 806f672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 806f674:	2200      	movs	r2, #0
 806f676:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 806f67a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 806f67c:	2200      	movs	r2, #0
 806f67e:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 806f682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 806f684:	2200      	movs	r2, #0
 806f686:	f883 21a0 	strb.w	r2, [r3, #416]	@ 0x1a0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 806f68a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 806f68c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 806f690:	224c      	movs	r2, #76	@ 0x4c
 806f692:	2100      	movs	r1, #0
 806f694:	4618      	mov	r0, r3
 806f696:	f001 fdcb 	bl	8071230 <memset>
 806f69a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 806f69c:	4a10      	ldr	r2, [pc, #64]	@ (806f6e0 <prvInitialiseNewTask+0x170>)
 806f69e:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
 806f6a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 806f6a4:	4a0f      	ldr	r2, [pc, #60]	@ (806f6e4 <prvInitialiseNewTask+0x174>)
 806f6a6:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
 806f6aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 806f6ac:	4a0e      	ldr	r2, [pc, #56]	@ (806f6e8 <prvInitialiseNewTask+0x178>)
 806f6ae:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 806f6b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 806f6b4:	2200      	movs	r2, #0
 806f6b6:	f883 21a2 	strb.w	r2, [r3, #418]	@ 0x1a2
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 806f6ba:	683a      	ldr	r2, [r7, #0]
 806f6bc:	68f9      	ldr	r1, [r7, #12]
 806f6be:	69b8      	ldr	r0, [r7, #24]
 806f6c0:	f7fe ff64 	bl	806e58c <pxPortInitialiseStack>
 806f6c4:	4602      	mov	r2, r0
 806f6c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 806f6c8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 806f6ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 806f6cc:	2b00      	cmp	r3, #0
 806f6ce:	d002      	beq.n	806f6d6 <prvInitialiseNewTask+0x166>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 806f6d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 806f6d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 806f6d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 806f6d6:	bf00      	nop
 806f6d8:	3720      	adds	r7, #32
 806f6da:	46bd      	mov	sp, r7
 806f6dc:	bd80      	pop	{r7, pc}
 806f6de:	bf00      	nop
 806f6e0:	20015674 	.word	0x20015674
 806f6e4:	200156dc 	.word	0x200156dc
 806f6e8:	20015744 	.word	0x20015744

0806f6ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 806f6ec:	b580      	push	{r7, lr}
 806f6ee:	b082      	sub	sp, #8
 806f6f0:	af00      	add	r7, sp, #0
 806f6f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 806f6f4:	f7ff f878 	bl	806e7e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 806f6f8:	4b2d      	ldr	r3, [pc, #180]	@ (806f7b0 <prvAddNewTaskToReadyList+0xc4>)
 806f6fa:	681b      	ldr	r3, [r3, #0]
 806f6fc:	3301      	adds	r3, #1
 806f6fe:	4a2c      	ldr	r2, [pc, #176]	@ (806f7b0 <prvAddNewTaskToReadyList+0xc4>)
 806f700:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 806f702:	4b2c      	ldr	r3, [pc, #176]	@ (806f7b4 <prvAddNewTaskToReadyList+0xc8>)
 806f704:	681b      	ldr	r3, [r3, #0]
 806f706:	2b00      	cmp	r3, #0
 806f708:	d109      	bne.n	806f71e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 806f70a:	4a2a      	ldr	r2, [pc, #168]	@ (806f7b4 <prvAddNewTaskToReadyList+0xc8>)
 806f70c:	687b      	ldr	r3, [r7, #4]
 806f70e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 806f710:	4b27      	ldr	r3, [pc, #156]	@ (806f7b0 <prvAddNewTaskToReadyList+0xc4>)
 806f712:	681b      	ldr	r3, [r3, #0]
 806f714:	2b01      	cmp	r3, #1
 806f716:	d110      	bne.n	806f73a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 806f718:	f000 fe52 	bl	80703c0 <prvInitialiseTaskLists>
 806f71c:	e00d      	b.n	806f73a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 806f71e:	4b26      	ldr	r3, [pc, #152]	@ (806f7b8 <prvAddNewTaskToReadyList+0xcc>)
 806f720:	681b      	ldr	r3, [r3, #0]
 806f722:	2b00      	cmp	r3, #0
 806f724:	d109      	bne.n	806f73a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 806f726:	4b23      	ldr	r3, [pc, #140]	@ (806f7b4 <prvAddNewTaskToReadyList+0xc8>)
 806f728:	681b      	ldr	r3, [r3, #0]
 806f72a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 806f72c:	687b      	ldr	r3, [r7, #4]
 806f72e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 806f730:	429a      	cmp	r2, r3
 806f732:	d802      	bhi.n	806f73a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 806f734:	4a1f      	ldr	r2, [pc, #124]	@ (806f7b4 <prvAddNewTaskToReadyList+0xc8>)
 806f736:	687b      	ldr	r3, [r7, #4]
 806f738:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 806f73a:	4b20      	ldr	r3, [pc, #128]	@ (806f7bc <prvAddNewTaskToReadyList+0xd0>)
 806f73c:	681b      	ldr	r3, [r3, #0]
 806f73e:	3301      	adds	r3, #1
 806f740:	4a1e      	ldr	r2, [pc, #120]	@ (806f7bc <prvAddNewTaskToReadyList+0xd0>)
 806f742:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 806f744:	4b1d      	ldr	r3, [pc, #116]	@ (806f7bc <prvAddNewTaskToReadyList+0xd0>)
 806f746:	681a      	ldr	r2, [r3, #0]
 806f748:	687b      	ldr	r3, [r7, #4]
 806f74a:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 806f74e:	687b      	ldr	r3, [r7, #4]
 806f750:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 806f752:	4b1b      	ldr	r3, [pc, #108]	@ (806f7c0 <prvAddNewTaskToReadyList+0xd4>)
 806f754:	681b      	ldr	r3, [r3, #0]
 806f756:	429a      	cmp	r2, r3
 806f758:	d903      	bls.n	806f762 <prvAddNewTaskToReadyList+0x76>
 806f75a:	687b      	ldr	r3, [r7, #4]
 806f75c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 806f75e:	4a18      	ldr	r2, [pc, #96]	@ (806f7c0 <prvAddNewTaskToReadyList+0xd4>)
 806f760:	6013      	str	r3, [r2, #0]
 806f762:	687b      	ldr	r3, [r7, #4]
 806f764:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 806f766:	4613      	mov	r3, r2
 806f768:	009b      	lsls	r3, r3, #2
 806f76a:	4413      	add	r3, r2
 806f76c:	009b      	lsls	r3, r3, #2
 806f76e:	4a15      	ldr	r2, [pc, #84]	@ (806f7c4 <prvAddNewTaskToReadyList+0xd8>)
 806f770:	441a      	add	r2, r3
 806f772:	687b      	ldr	r3, [r7, #4]
 806f774:	3304      	adds	r3, #4
 806f776:	4619      	mov	r1, r3
 806f778:	4610      	mov	r0, r2
 806f77a:	f7fe fe80 	bl	806e47e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 806f77e:	f7ff f865 	bl	806e84c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 806f782:	4b0d      	ldr	r3, [pc, #52]	@ (806f7b8 <prvAddNewTaskToReadyList+0xcc>)
 806f784:	681b      	ldr	r3, [r3, #0]
 806f786:	2b00      	cmp	r3, #0
 806f788:	d00e      	beq.n	806f7a8 <prvAddNewTaskToReadyList+0xbc>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 806f78a:	4b0a      	ldr	r3, [pc, #40]	@ (806f7b4 <prvAddNewTaskToReadyList+0xc8>)
 806f78c:	681b      	ldr	r3, [r3, #0]
 806f78e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 806f790:	687b      	ldr	r3, [r7, #4]
 806f792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 806f794:	429a      	cmp	r2, r3
 806f796:	d207      	bcs.n	806f7a8 <prvAddNewTaskToReadyList+0xbc>
		{
			taskYIELD_IF_USING_PREEMPTION();
 806f798:	4b0b      	ldr	r3, [pc, #44]	@ (806f7c8 <prvAddNewTaskToReadyList+0xdc>)
 806f79a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 806f79e:	601a      	str	r2, [r3, #0]
 806f7a0:	f3bf 8f4f 	dsb	sy
 806f7a4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 806f7a8:	bf00      	nop
 806f7aa:	3708      	adds	r7, #8
 806f7ac:	46bd      	mov	sp, r7
 806f7ae:	bd80      	pop	{r7, pc}
 806f7b0:	20015560 	.word	0x20015560
 806f7b4:	20015088 	.word	0x20015088
 806f7b8:	2001556c 	.word	0x2001556c
 806f7bc:	2001557c 	.word	0x2001557c
 806f7c0:	20015568 	.word	0x20015568
 806f7c4:	2001508c 	.word	0x2001508c
 806f7c8:	e000ed04 	.word	0xe000ed04

0806f7cc <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 806f7cc:	b580      	push	{r7, lr}
 806f7ce:	b088      	sub	sp, #32
 806f7d0:	af00      	add	r7, sp, #0
 806f7d2:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 806f7d4:	687b      	ldr	r3, [r7, #4]
 806f7d6:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 806f7d8:	69bb      	ldr	r3, [r7, #24]
 806f7da:	2b00      	cmp	r3, #0
 806f7dc:	d10b      	bne.n	806f7f6 <eTaskGetState+0x2a>
	__asm volatile
 806f7de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 806f7e2:	f383 8811 	msr	BASEPRI, r3
 806f7e6:	f3bf 8f6f 	isb	sy
 806f7ea:	f3bf 8f4f 	dsb	sy
 806f7ee:	60bb      	str	r3, [r7, #8]
}
 806f7f0:	bf00      	nop
 806f7f2:	bf00      	nop
 806f7f4:	e7fd      	b.n	806f7f2 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 806f7f6:	4b24      	ldr	r3, [pc, #144]	@ (806f888 <eTaskGetState+0xbc>)
 806f7f8:	681b      	ldr	r3, [r3, #0]
 806f7fa:	69ba      	ldr	r2, [r7, #24]
 806f7fc:	429a      	cmp	r2, r3
 806f7fe:	d102      	bne.n	806f806 <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 806f800:	2300      	movs	r3, #0
 806f802:	77fb      	strb	r3, [r7, #31]
 806f804:	e03a      	b.n	806f87c <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 806f806:	f7fe ffef 	bl	806e7e8 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 806f80a:	69bb      	ldr	r3, [r7, #24]
 806f80c:	695b      	ldr	r3, [r3, #20]
 806f80e:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 806f810:	4b1e      	ldr	r3, [pc, #120]	@ (806f88c <eTaskGetState+0xc0>)
 806f812:	681b      	ldr	r3, [r3, #0]
 806f814:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 806f816:	4b1e      	ldr	r3, [pc, #120]	@ (806f890 <eTaskGetState+0xc4>)
 806f818:	681b      	ldr	r3, [r3, #0]
 806f81a:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 806f81c:	f7ff f816 	bl	806e84c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 806f820:	697a      	ldr	r2, [r7, #20]
 806f822:	693b      	ldr	r3, [r7, #16]
 806f824:	429a      	cmp	r2, r3
 806f826:	d003      	beq.n	806f830 <eTaskGetState+0x64>
 806f828:	697a      	ldr	r2, [r7, #20]
 806f82a:	68fb      	ldr	r3, [r7, #12]
 806f82c:	429a      	cmp	r2, r3
 806f82e:	d102      	bne.n	806f836 <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 806f830:	2302      	movs	r3, #2
 806f832:	77fb      	strb	r3, [r7, #31]
 806f834:	e022      	b.n	806f87c <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 806f836:	697b      	ldr	r3, [r7, #20]
 806f838:	4a16      	ldr	r2, [pc, #88]	@ (806f894 <eTaskGetState+0xc8>)
 806f83a:	4293      	cmp	r3, r2
 806f83c:	d112      	bne.n	806f864 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 806f83e:	69bb      	ldr	r3, [r7, #24]
 806f840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 806f842:	2b00      	cmp	r3, #0
 806f844:	d10b      	bne.n	806f85e <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 806f846:	69bb      	ldr	r3, [r7, #24]
 806f848:	f893 31a0 	ldrb.w	r3, [r3, #416]	@ 0x1a0
 806f84c:	b2db      	uxtb	r3, r3
 806f84e:	2b01      	cmp	r3, #1
 806f850:	d102      	bne.n	806f858 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 806f852:	2302      	movs	r3, #2
 806f854:	77fb      	strb	r3, [r7, #31]
 806f856:	e011      	b.n	806f87c <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 806f858:	2303      	movs	r3, #3
 806f85a:	77fb      	strb	r3, [r7, #31]
 806f85c:	e00e      	b.n	806f87c <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 806f85e:	2302      	movs	r3, #2
 806f860:	77fb      	strb	r3, [r7, #31]
 806f862:	e00b      	b.n	806f87c <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 806f864:	697b      	ldr	r3, [r7, #20]
 806f866:	4a0c      	ldr	r2, [pc, #48]	@ (806f898 <eTaskGetState+0xcc>)
 806f868:	4293      	cmp	r3, r2
 806f86a:	d002      	beq.n	806f872 <eTaskGetState+0xa6>
 806f86c:	697b      	ldr	r3, [r7, #20]
 806f86e:	2b00      	cmp	r3, #0
 806f870:	d102      	bne.n	806f878 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 806f872:	2304      	movs	r3, #4
 806f874:	77fb      	strb	r3, [r7, #31]
 806f876:	e001      	b.n	806f87c <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 806f878:	2301      	movs	r3, #1
 806f87a:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 806f87c:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 806f87e:	4618      	mov	r0, r3
 806f880:	3720      	adds	r7, #32
 806f882:	46bd      	mov	sp, r7
 806f884:	bd80      	pop	{r7, pc}
 806f886:	bf00      	nop
 806f888:	20015088 	.word	0x20015088
 806f88c:	20015514 	.word	0x20015514
 806f890:	20015518 	.word	0x20015518
 806f894:	20015548 	.word	0x20015548
 806f898:	20015530 	.word	0x20015530

0806f89c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 806f89c:	b580      	push	{r7, lr}
 806f89e:	b084      	sub	sp, #16
 806f8a0:	af00      	add	r7, sp, #0
 806f8a2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 806f8a4:	f7fe ffa0 	bl	806e7e8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 806f8a8:	687b      	ldr	r3, [r7, #4]
 806f8aa:	2b00      	cmp	r3, #0
 806f8ac:	d102      	bne.n	806f8b4 <vTaskSuspend+0x18>
 806f8ae:	4b30      	ldr	r3, [pc, #192]	@ (806f970 <vTaskSuspend+0xd4>)
 806f8b0:	681b      	ldr	r3, [r3, #0]
 806f8b2:	e000      	b.n	806f8b6 <vTaskSuspend+0x1a>
 806f8b4:	687b      	ldr	r3, [r7, #4]
 806f8b6:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 806f8b8:	68fb      	ldr	r3, [r7, #12]
 806f8ba:	3304      	adds	r3, #4
 806f8bc:	4618      	mov	r0, r3
 806f8be:	f7fe fe3b 	bl	806e538 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 806f8c2:	68fb      	ldr	r3, [r7, #12]
 806f8c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 806f8c6:	2b00      	cmp	r3, #0
 806f8c8:	d004      	beq.n	806f8d4 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 806f8ca:	68fb      	ldr	r3, [r7, #12]
 806f8cc:	3318      	adds	r3, #24
 806f8ce:	4618      	mov	r0, r3
 806f8d0:	f7fe fe32 	bl	806e538 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 806f8d4:	68fb      	ldr	r3, [r7, #12]
 806f8d6:	3304      	adds	r3, #4
 806f8d8:	4619      	mov	r1, r3
 806f8da:	4826      	ldr	r0, [pc, #152]	@ (806f974 <vTaskSuspend+0xd8>)
 806f8dc:	f7fe fdcf 	bl	806e47e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 806f8e0:	68fb      	ldr	r3, [r7, #12]
 806f8e2:	f893 31a0 	ldrb.w	r3, [r3, #416]	@ 0x1a0
 806f8e6:	b2db      	uxtb	r3, r3
 806f8e8:	2b01      	cmp	r3, #1
 806f8ea:	d103      	bne.n	806f8f4 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 806f8ec:	68fb      	ldr	r3, [r7, #12]
 806f8ee:	2200      	movs	r2, #0
 806f8f0:	f883 21a0 	strb.w	r2, [r3, #416]	@ 0x1a0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 806f8f4:	f7fe ffaa 	bl	806e84c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 806f8f8:	4b1f      	ldr	r3, [pc, #124]	@ (806f978 <vTaskSuspend+0xdc>)
 806f8fa:	681b      	ldr	r3, [r3, #0]
 806f8fc:	2b00      	cmp	r3, #0
 806f8fe:	d005      	beq.n	806f90c <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 806f900:	f7fe ff72 	bl	806e7e8 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 806f904:	f000 fed8 	bl	80706b8 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 806f908:	f7fe ffa0 	bl	806e84c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 806f90c:	4b18      	ldr	r3, [pc, #96]	@ (806f970 <vTaskSuspend+0xd4>)
 806f90e:	681b      	ldr	r3, [r3, #0]
 806f910:	68fa      	ldr	r2, [r7, #12]
 806f912:	429a      	cmp	r2, r3
 806f914:	d128      	bne.n	806f968 <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 806f916:	4b18      	ldr	r3, [pc, #96]	@ (806f978 <vTaskSuspend+0xdc>)
 806f918:	681b      	ldr	r3, [r3, #0]
 806f91a:	2b00      	cmp	r3, #0
 806f91c:	d018      	beq.n	806f950 <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 806f91e:	4b17      	ldr	r3, [pc, #92]	@ (806f97c <vTaskSuspend+0xe0>)
 806f920:	681b      	ldr	r3, [r3, #0]
 806f922:	2b00      	cmp	r3, #0
 806f924:	d00b      	beq.n	806f93e <vTaskSuspend+0xa2>
	__asm volatile
 806f926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 806f92a:	f383 8811 	msr	BASEPRI, r3
 806f92e:	f3bf 8f6f 	isb	sy
 806f932:	f3bf 8f4f 	dsb	sy
 806f936:	60bb      	str	r3, [r7, #8]
}
 806f938:	bf00      	nop
 806f93a:	bf00      	nop
 806f93c:	e7fd      	b.n	806f93a <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 806f93e:	4b10      	ldr	r3, [pc, #64]	@ (806f980 <vTaskSuspend+0xe4>)
 806f940:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 806f944:	601a      	str	r2, [r3, #0]
 806f946:	f3bf 8f4f 	dsb	sy
 806f94a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 806f94e:	e00b      	b.n	806f968 <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 806f950:	4b08      	ldr	r3, [pc, #32]	@ (806f974 <vTaskSuspend+0xd8>)
 806f952:	681a      	ldr	r2, [r3, #0]
 806f954:	4b0b      	ldr	r3, [pc, #44]	@ (806f984 <vTaskSuspend+0xe8>)
 806f956:	681b      	ldr	r3, [r3, #0]
 806f958:	429a      	cmp	r2, r3
 806f95a:	d103      	bne.n	806f964 <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 806f95c:	4b04      	ldr	r3, [pc, #16]	@ (806f970 <vTaskSuspend+0xd4>)
 806f95e:	2200      	movs	r2, #0
 806f960:	601a      	str	r2, [r3, #0]
	}
 806f962:	e001      	b.n	806f968 <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 806f964:	f000 fb24 	bl	806ffb0 <vTaskSwitchContext>
	}
 806f968:	bf00      	nop
 806f96a:	3710      	adds	r7, #16
 806f96c:	46bd      	mov	sp, r7
 806f96e:	bd80      	pop	{r7, pc}
 806f970:	20015088 	.word	0x20015088
 806f974:	20015548 	.word	0x20015548
 806f978:	2001556c 	.word	0x2001556c
 806f97c:	20015588 	.word	0x20015588
 806f980:	e000ed04 	.word	0xe000ed04
 806f984:	20015560 	.word	0x20015560

0806f988 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 806f988:	b480      	push	{r7}
 806f98a:	b087      	sub	sp, #28
 806f98c:	af00      	add	r7, sp, #0
 806f98e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 806f990:	2300      	movs	r3, #0
 806f992:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 806f994:	687b      	ldr	r3, [r7, #4]
 806f996:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 806f998:	687b      	ldr	r3, [r7, #4]
 806f99a:	2b00      	cmp	r3, #0
 806f99c:	d10b      	bne.n	806f9b6 <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 806f99e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 806f9a2:	f383 8811 	msr	BASEPRI, r3
 806f9a6:	f3bf 8f6f 	isb	sy
 806f9aa:	f3bf 8f4f 	dsb	sy
 806f9ae:	60fb      	str	r3, [r7, #12]
}
 806f9b0:	bf00      	nop
 806f9b2:	bf00      	nop
 806f9b4:	e7fd      	b.n	806f9b2 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 806f9b6:	693b      	ldr	r3, [r7, #16]
 806f9b8:	695b      	ldr	r3, [r3, #20]
 806f9ba:	4a0a      	ldr	r2, [pc, #40]	@ (806f9e4 <prvTaskIsTaskSuspended+0x5c>)
 806f9bc:	4293      	cmp	r3, r2
 806f9be:	d10a      	bne.n	806f9d6 <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 806f9c0:	693b      	ldr	r3, [r7, #16]
 806f9c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 806f9c4:	4a08      	ldr	r2, [pc, #32]	@ (806f9e8 <prvTaskIsTaskSuspended+0x60>)
 806f9c6:	4293      	cmp	r3, r2
 806f9c8:	d005      	beq.n	806f9d6 <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 806f9ca:	693b      	ldr	r3, [r7, #16]
 806f9cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 806f9ce:	2b00      	cmp	r3, #0
 806f9d0:	d101      	bne.n	806f9d6 <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 806f9d2:	2301      	movs	r3, #1
 806f9d4:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 806f9d6:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 806f9d8:	4618      	mov	r0, r3
 806f9da:	371c      	adds	r7, #28
 806f9dc:	46bd      	mov	sp, r7
 806f9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 806f9e2:	4770      	bx	lr
 806f9e4:	20015548 	.word	0x20015548
 806f9e8:	2001551c 	.word	0x2001551c

0806f9ec <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 806f9ec:	b580      	push	{r7, lr}
 806f9ee:	b084      	sub	sp, #16
 806f9f0:	af00      	add	r7, sp, #0
 806f9f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 806f9f4:	687b      	ldr	r3, [r7, #4]
 806f9f6:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 806f9f8:	687b      	ldr	r3, [r7, #4]
 806f9fa:	2b00      	cmp	r3, #0
 806f9fc:	d10b      	bne.n	806fa16 <vTaskResume+0x2a>
	__asm volatile
 806f9fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 806fa02:	f383 8811 	msr	BASEPRI, r3
 806fa06:	f3bf 8f6f 	isb	sy
 806fa0a:	f3bf 8f4f 	dsb	sy
 806fa0e:	60bb      	str	r3, [r7, #8]
}
 806fa10:	bf00      	nop
 806fa12:	bf00      	nop
 806fa14:	e7fd      	b.n	806fa12 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 806fa16:	4b21      	ldr	r3, [pc, #132]	@ (806fa9c <vTaskResume+0xb0>)
 806fa18:	681b      	ldr	r3, [r3, #0]
 806fa1a:	68fa      	ldr	r2, [r7, #12]
 806fa1c:	429a      	cmp	r2, r3
 806fa1e:	d038      	beq.n	806fa92 <vTaskResume+0xa6>
 806fa20:	68fb      	ldr	r3, [r7, #12]
 806fa22:	2b00      	cmp	r3, #0
 806fa24:	d035      	beq.n	806fa92 <vTaskResume+0xa6>
		{
			taskENTER_CRITICAL();
 806fa26:	f7fe fedf 	bl	806e7e8 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 806fa2a:	68f8      	ldr	r0, [r7, #12]
 806fa2c:	f7ff ffac 	bl	806f988 <prvTaskIsTaskSuspended>
 806fa30:	4603      	mov	r3, r0
 806fa32:	2b00      	cmp	r3, #0
 806fa34:	d02b      	beq.n	806fa8e <vTaskResume+0xa2>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 806fa36:	68fb      	ldr	r3, [r7, #12]
 806fa38:	3304      	adds	r3, #4
 806fa3a:	4618      	mov	r0, r3
 806fa3c:	f7fe fd7c 	bl	806e538 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 806fa40:	68fb      	ldr	r3, [r7, #12]
 806fa42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 806fa44:	4b16      	ldr	r3, [pc, #88]	@ (806faa0 <vTaskResume+0xb4>)
 806fa46:	681b      	ldr	r3, [r3, #0]
 806fa48:	429a      	cmp	r2, r3
 806fa4a:	d903      	bls.n	806fa54 <vTaskResume+0x68>
 806fa4c:	68fb      	ldr	r3, [r7, #12]
 806fa4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 806fa50:	4a13      	ldr	r2, [pc, #76]	@ (806faa0 <vTaskResume+0xb4>)
 806fa52:	6013      	str	r3, [r2, #0]
 806fa54:	68fb      	ldr	r3, [r7, #12]
 806fa56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 806fa58:	4613      	mov	r3, r2
 806fa5a:	009b      	lsls	r3, r3, #2
 806fa5c:	4413      	add	r3, r2
 806fa5e:	009b      	lsls	r3, r3, #2
 806fa60:	4a10      	ldr	r2, [pc, #64]	@ (806faa4 <vTaskResume+0xb8>)
 806fa62:	441a      	add	r2, r3
 806fa64:	68fb      	ldr	r3, [r7, #12]
 806fa66:	3304      	adds	r3, #4
 806fa68:	4619      	mov	r1, r3
 806fa6a:	4610      	mov	r0, r2
 806fa6c:	f7fe fd07 	bl	806e47e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 806fa70:	68fb      	ldr	r3, [r7, #12]
 806fa72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 806fa74:	4b09      	ldr	r3, [pc, #36]	@ (806fa9c <vTaskResume+0xb0>)
 806fa76:	681b      	ldr	r3, [r3, #0]
 806fa78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 806fa7a:	429a      	cmp	r2, r3
 806fa7c:	d307      	bcc.n	806fa8e <vTaskResume+0xa2>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 806fa7e:	4b0a      	ldr	r3, [pc, #40]	@ (806faa8 <vTaskResume+0xbc>)
 806fa80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 806fa84:	601a      	str	r2, [r3, #0]
 806fa86:	f3bf 8f4f 	dsb	sy
 806fa8a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 806fa8e:	f7fe fedd 	bl	806e84c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 806fa92:	bf00      	nop
 806fa94:	3710      	adds	r7, #16
 806fa96:	46bd      	mov	sp, r7
 806fa98:	bd80      	pop	{r7, pc}
 806fa9a:	bf00      	nop
 806fa9c:	20015088 	.word	0x20015088
 806faa0:	20015568 	.word	0x20015568
 806faa4:	2001508c 	.word	0x2001508c
 806faa8:	e000ed04 	.word	0xe000ed04

0806faac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 806faac:	b580      	push	{r7, lr}
 806faae:	b08a      	sub	sp, #40	@ 0x28
 806fab0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 806fab2:	2300      	movs	r3, #0
 806fab4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 806fab6:	2300      	movs	r3, #0
 806fab8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 806faba:	463a      	mov	r2, r7
 806fabc:	1d39      	adds	r1, r7, #4
 806fabe:	f107 0308 	add.w	r3, r7, #8
 806fac2:	4618      	mov	r0, r3
 806fac4:	f7fe fa86 	bl	806dfd4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 806fac8:	6839      	ldr	r1, [r7, #0]
 806faca:	687b      	ldr	r3, [r7, #4]
 806facc:	68ba      	ldr	r2, [r7, #8]
 806face:	9202      	str	r2, [sp, #8]
 806fad0:	9301      	str	r3, [sp, #4]
 806fad2:	2300      	movs	r3, #0
 806fad4:	9300      	str	r3, [sp, #0]
 806fad6:	2300      	movs	r3, #0
 806fad8:	460a      	mov	r2, r1
 806fada:	4926      	ldr	r1, [pc, #152]	@ (806fb74 <vTaskStartScheduler+0xc8>)
 806fadc:	4826      	ldr	r0, [pc, #152]	@ (806fb78 <vTaskStartScheduler+0xcc>)
 806fade:	f7ff fc9f 	bl	806f420 <xTaskCreateStatic>
 806fae2:	4603      	mov	r3, r0
 806fae4:	4a25      	ldr	r2, [pc, #148]	@ (806fb7c <vTaskStartScheduler+0xd0>)
 806fae6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 806fae8:	4b24      	ldr	r3, [pc, #144]	@ (806fb7c <vTaskStartScheduler+0xd0>)
 806faea:	681b      	ldr	r3, [r3, #0]
 806faec:	2b00      	cmp	r3, #0
 806faee:	d002      	beq.n	806faf6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 806faf0:	2301      	movs	r3, #1
 806faf2:	617b      	str	r3, [r7, #20]
 806faf4:	e001      	b.n	806fafa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 806faf6:	2300      	movs	r3, #0
 806faf8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 806fafa:	697b      	ldr	r3, [r7, #20]
 806fafc:	2b01      	cmp	r3, #1
 806fafe:	d102      	bne.n	806fb06 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 806fb00:	f000 fee8 	bl	80708d4 <xTimerCreateTimerTask>
 806fb04:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 806fb06:	697b      	ldr	r3, [r7, #20]
 806fb08:	2b01      	cmp	r3, #1
 806fb0a:	d11e      	bne.n	806fb4a <vTaskStartScheduler+0x9e>
	__asm volatile
 806fb0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 806fb10:	f383 8811 	msr	BASEPRI, r3
 806fb14:	f3bf 8f6f 	isb	sy
 806fb18:	f3bf 8f4f 	dsb	sy
 806fb1c:	613b      	str	r3, [r7, #16]
}
 806fb1e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 806fb20:	4b17      	ldr	r3, [pc, #92]	@ (806fb80 <vTaskStartScheduler+0xd4>)
 806fb22:	681b      	ldr	r3, [r3, #0]
 806fb24:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 806fb28:	4a16      	ldr	r2, [pc, #88]	@ (806fb84 <vTaskStartScheduler+0xd8>)
 806fb2a:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 806fb2c:	4b16      	ldr	r3, [pc, #88]	@ (806fb88 <vTaskStartScheduler+0xdc>)
 806fb2e:	f04f 32ff 	mov.w	r2, #4294967295
 806fb32:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 806fb34:	4b15      	ldr	r3, [pc, #84]	@ (806fb8c <vTaskStartScheduler+0xe0>)
 806fb36:	2201      	movs	r2, #1
 806fb38:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 806fb3a:	4b15      	ldr	r3, [pc, #84]	@ (806fb90 <vTaskStartScheduler+0xe4>)
 806fb3c:	2200      	movs	r2, #0
 806fb3e:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 806fb40:	f7f5 ffbe 	bl	8065ac0 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 806fb44:	f7fe fdac 	bl	806e6a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 806fb48:	e00f      	b.n	806fb6a <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 806fb4a:	697b      	ldr	r3, [r7, #20]
 806fb4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 806fb50:	d10b      	bne.n	806fb6a <vTaskStartScheduler+0xbe>
	__asm volatile
 806fb52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 806fb56:	f383 8811 	msr	BASEPRI, r3
 806fb5a:	f3bf 8f6f 	isb	sy
 806fb5e:	f3bf 8f4f 	dsb	sy
 806fb62:	60fb      	str	r3, [r7, #12]
}
 806fb64:	bf00      	nop
 806fb66:	bf00      	nop
 806fb68:	e7fd      	b.n	806fb66 <vTaskStartScheduler+0xba>
}
 806fb6a:	bf00      	nop
 806fb6c:	3718      	adds	r7, #24
 806fb6e:	46bd      	mov	sp, r7
 806fb70:	bd80      	pop	{r7, pc}
 806fb72:	bf00      	nop
 806fb74:	080719a0 	.word	0x080719a0
 806fb78:	0807038d 	.word	0x0807038d
 806fb7c:	20015584 	.word	0x20015584
 806fb80:	20015088 	.word	0x20015088
 806fb84:	20010130 	.word	0x20010130
 806fb88:	20015580 	.word	0x20015580
 806fb8c:	2001556c 	.word	0x2001556c
 806fb90:	20015564 	.word	0x20015564

0806fb94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 806fb94:	b480      	push	{r7}
 806fb96:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 806fb98:	4b04      	ldr	r3, [pc, #16]	@ (806fbac <vTaskSuspendAll+0x18>)
 806fb9a:	681b      	ldr	r3, [r3, #0]
 806fb9c:	3301      	adds	r3, #1
 806fb9e:	4a03      	ldr	r2, [pc, #12]	@ (806fbac <vTaskSuspendAll+0x18>)
 806fba0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 806fba2:	bf00      	nop
 806fba4:	46bd      	mov	sp, r7
 806fba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 806fbaa:	4770      	bx	lr
 806fbac:	20015588 	.word	0x20015588

0806fbb0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 806fbb0:	b580      	push	{r7, lr}
 806fbb2:	b084      	sub	sp, #16
 806fbb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 806fbb6:	2300      	movs	r3, #0
 806fbb8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 806fbba:	2300      	movs	r3, #0
 806fbbc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 806fbbe:	4b42      	ldr	r3, [pc, #264]	@ (806fcc8 <xTaskResumeAll+0x118>)
 806fbc0:	681b      	ldr	r3, [r3, #0]
 806fbc2:	2b00      	cmp	r3, #0
 806fbc4:	d10b      	bne.n	806fbde <xTaskResumeAll+0x2e>
	__asm volatile
 806fbc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 806fbca:	f383 8811 	msr	BASEPRI, r3
 806fbce:	f3bf 8f6f 	isb	sy
 806fbd2:	f3bf 8f4f 	dsb	sy
 806fbd6:	603b      	str	r3, [r7, #0]
}
 806fbd8:	bf00      	nop
 806fbda:	bf00      	nop
 806fbdc:	e7fd      	b.n	806fbda <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 806fbde:	f7fe fe03 	bl	806e7e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 806fbe2:	4b39      	ldr	r3, [pc, #228]	@ (806fcc8 <xTaskResumeAll+0x118>)
 806fbe4:	681b      	ldr	r3, [r3, #0]
 806fbe6:	3b01      	subs	r3, #1
 806fbe8:	4a37      	ldr	r2, [pc, #220]	@ (806fcc8 <xTaskResumeAll+0x118>)
 806fbea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 806fbec:	4b36      	ldr	r3, [pc, #216]	@ (806fcc8 <xTaskResumeAll+0x118>)
 806fbee:	681b      	ldr	r3, [r3, #0]
 806fbf0:	2b00      	cmp	r3, #0
 806fbf2:	d162      	bne.n	806fcba <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 806fbf4:	4b35      	ldr	r3, [pc, #212]	@ (806fccc <xTaskResumeAll+0x11c>)
 806fbf6:	681b      	ldr	r3, [r3, #0]
 806fbf8:	2b00      	cmp	r3, #0
 806fbfa:	d05e      	beq.n	806fcba <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 806fbfc:	e02f      	b.n	806fc5e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 806fbfe:	4b34      	ldr	r3, [pc, #208]	@ (806fcd0 <xTaskResumeAll+0x120>)
 806fc00:	68db      	ldr	r3, [r3, #12]
 806fc02:	68db      	ldr	r3, [r3, #12]
 806fc04:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 806fc06:	68fb      	ldr	r3, [r7, #12]
 806fc08:	3318      	adds	r3, #24
 806fc0a:	4618      	mov	r0, r3
 806fc0c:	f7fe fc94 	bl	806e538 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 806fc10:	68fb      	ldr	r3, [r7, #12]
 806fc12:	3304      	adds	r3, #4
 806fc14:	4618      	mov	r0, r3
 806fc16:	f7fe fc8f 	bl	806e538 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 806fc1a:	68fb      	ldr	r3, [r7, #12]
 806fc1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 806fc1e:	4b2d      	ldr	r3, [pc, #180]	@ (806fcd4 <xTaskResumeAll+0x124>)
 806fc20:	681b      	ldr	r3, [r3, #0]
 806fc22:	429a      	cmp	r2, r3
 806fc24:	d903      	bls.n	806fc2e <xTaskResumeAll+0x7e>
 806fc26:	68fb      	ldr	r3, [r7, #12]
 806fc28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 806fc2a:	4a2a      	ldr	r2, [pc, #168]	@ (806fcd4 <xTaskResumeAll+0x124>)
 806fc2c:	6013      	str	r3, [r2, #0]
 806fc2e:	68fb      	ldr	r3, [r7, #12]
 806fc30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 806fc32:	4613      	mov	r3, r2
 806fc34:	009b      	lsls	r3, r3, #2
 806fc36:	4413      	add	r3, r2
 806fc38:	009b      	lsls	r3, r3, #2
 806fc3a:	4a27      	ldr	r2, [pc, #156]	@ (806fcd8 <xTaskResumeAll+0x128>)
 806fc3c:	441a      	add	r2, r3
 806fc3e:	68fb      	ldr	r3, [r7, #12]
 806fc40:	3304      	adds	r3, #4
 806fc42:	4619      	mov	r1, r3
 806fc44:	4610      	mov	r0, r2
 806fc46:	f7fe fc1a 	bl	806e47e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 806fc4a:	68fb      	ldr	r3, [r7, #12]
 806fc4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 806fc4e:	4b23      	ldr	r3, [pc, #140]	@ (806fcdc <xTaskResumeAll+0x12c>)
 806fc50:	681b      	ldr	r3, [r3, #0]
 806fc52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 806fc54:	429a      	cmp	r2, r3
 806fc56:	d302      	bcc.n	806fc5e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 806fc58:	4b21      	ldr	r3, [pc, #132]	@ (806fce0 <xTaskResumeAll+0x130>)
 806fc5a:	2201      	movs	r2, #1
 806fc5c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 806fc5e:	4b1c      	ldr	r3, [pc, #112]	@ (806fcd0 <xTaskResumeAll+0x120>)
 806fc60:	681b      	ldr	r3, [r3, #0]
 806fc62:	2b00      	cmp	r3, #0
 806fc64:	d1cb      	bne.n	806fbfe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 806fc66:	68fb      	ldr	r3, [r7, #12]
 806fc68:	2b00      	cmp	r3, #0
 806fc6a:	d001      	beq.n	806fc70 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 806fc6c:	f000 fd24 	bl	80706b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 806fc70:	4b1c      	ldr	r3, [pc, #112]	@ (806fce4 <xTaskResumeAll+0x134>)
 806fc72:	681b      	ldr	r3, [r3, #0]
 806fc74:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 806fc76:	687b      	ldr	r3, [r7, #4]
 806fc78:	2b00      	cmp	r3, #0
 806fc7a:	d010      	beq.n	806fc9e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 806fc7c:	f000 f8d6 	bl	806fe2c <xTaskIncrementTick>
 806fc80:	4603      	mov	r3, r0
 806fc82:	2b00      	cmp	r3, #0
 806fc84:	d002      	beq.n	806fc8c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 806fc86:	4b16      	ldr	r3, [pc, #88]	@ (806fce0 <xTaskResumeAll+0x130>)
 806fc88:	2201      	movs	r2, #1
 806fc8a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 806fc8c:	687b      	ldr	r3, [r7, #4]
 806fc8e:	3b01      	subs	r3, #1
 806fc90:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 806fc92:	687b      	ldr	r3, [r7, #4]
 806fc94:	2b00      	cmp	r3, #0
 806fc96:	d1f1      	bne.n	806fc7c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 806fc98:	4b12      	ldr	r3, [pc, #72]	@ (806fce4 <xTaskResumeAll+0x134>)
 806fc9a:	2200      	movs	r2, #0
 806fc9c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 806fc9e:	4b10      	ldr	r3, [pc, #64]	@ (806fce0 <xTaskResumeAll+0x130>)
 806fca0:	681b      	ldr	r3, [r3, #0]
 806fca2:	2b00      	cmp	r3, #0
 806fca4:	d009      	beq.n	806fcba <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 806fca6:	2301      	movs	r3, #1
 806fca8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 806fcaa:	4b0f      	ldr	r3, [pc, #60]	@ (806fce8 <xTaskResumeAll+0x138>)
 806fcac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 806fcb0:	601a      	str	r2, [r3, #0]
 806fcb2:	f3bf 8f4f 	dsb	sy
 806fcb6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 806fcba:	f7fe fdc7 	bl	806e84c <vPortExitCritical>

	return xAlreadyYielded;
 806fcbe:	68bb      	ldr	r3, [r7, #8]
}
 806fcc0:	4618      	mov	r0, r3
 806fcc2:	3710      	adds	r7, #16
 806fcc4:	46bd      	mov	sp, r7
 806fcc6:	bd80      	pop	{r7, pc}
 806fcc8:	20015588 	.word	0x20015588
 806fccc:	20015560 	.word	0x20015560
 806fcd0:	2001551c 	.word	0x2001551c
 806fcd4:	20015568 	.word	0x20015568
 806fcd8:	2001508c 	.word	0x2001508c
 806fcdc:	20015088 	.word	0x20015088
 806fce0:	20015574 	.word	0x20015574
 806fce4:	20015570 	.word	0x20015570
 806fce8:	e000ed04 	.word	0xe000ed04

0806fcec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 806fcec:	b480      	push	{r7}
 806fcee:	b083      	sub	sp, #12
 806fcf0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 806fcf2:	4b05      	ldr	r3, [pc, #20]	@ (806fd08 <xTaskGetTickCount+0x1c>)
 806fcf4:	681b      	ldr	r3, [r3, #0]
 806fcf6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 806fcf8:	687b      	ldr	r3, [r7, #4]
}
 806fcfa:	4618      	mov	r0, r3
 806fcfc:	370c      	adds	r7, #12
 806fcfe:	46bd      	mov	sp, r7
 806fd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 806fd04:	4770      	bx	lr
 806fd06:	bf00      	nop
 806fd08:	20015564 	.word	0x20015564

0806fd0c <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 806fd0c:	b580      	push	{r7, lr}
 806fd0e:	b086      	sub	sp, #24
 806fd10:	af00      	add	r7, sp, #0
 806fd12:	60f8      	str	r0, [r7, #12]
 806fd14:	60b9      	str	r1, [r7, #8]
 806fd16:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 806fd18:	2300      	movs	r3, #0
 806fd1a:	617b      	str	r3, [r7, #20]
 806fd1c:	2338      	movs	r3, #56	@ 0x38
 806fd1e:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 806fd20:	f7ff ff38 	bl	806fb94 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 806fd24:	4b3b      	ldr	r3, [pc, #236]	@ (806fe14 <uxTaskGetSystemState+0x108>)
 806fd26:	681b      	ldr	r3, [r3, #0]
 806fd28:	68ba      	ldr	r2, [r7, #8]
 806fd2a:	429a      	cmp	r2, r3
 806fd2c:	d36a      	bcc.n	806fe04 <uxTaskGetSystemState+0xf8>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 806fd2e:	693b      	ldr	r3, [r7, #16]
 806fd30:	3b01      	subs	r3, #1
 806fd32:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 806fd34:	697a      	ldr	r2, [r7, #20]
 806fd36:	4613      	mov	r3, r2
 806fd38:	00db      	lsls	r3, r3, #3
 806fd3a:	4413      	add	r3, r2
 806fd3c:	009b      	lsls	r3, r3, #2
 806fd3e:	461a      	mov	r2, r3
 806fd40:	68fb      	ldr	r3, [r7, #12]
 806fd42:	1898      	adds	r0, r3, r2
 806fd44:	693a      	ldr	r2, [r7, #16]
 806fd46:	4613      	mov	r3, r2
 806fd48:	009b      	lsls	r3, r3, #2
 806fd4a:	4413      	add	r3, r2
 806fd4c:	009b      	lsls	r3, r3, #2
 806fd4e:	4a32      	ldr	r2, [pc, #200]	@ (806fe18 <uxTaskGetSystemState+0x10c>)
 806fd50:	4413      	add	r3, r2
 806fd52:	2201      	movs	r2, #1
 806fd54:	4619      	mov	r1, r3
 806fd56:	f000 fc0b 	bl	8070570 <prvListTasksWithinSingleList>
 806fd5a:	4602      	mov	r2, r0
 806fd5c:	697b      	ldr	r3, [r7, #20]
 806fd5e:	4413      	add	r3, r2
 806fd60:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 806fd62:	693b      	ldr	r3, [r7, #16]
 806fd64:	2b00      	cmp	r3, #0
 806fd66:	d1e2      	bne.n	806fd2e <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 806fd68:	697a      	ldr	r2, [r7, #20]
 806fd6a:	4613      	mov	r3, r2
 806fd6c:	00db      	lsls	r3, r3, #3
 806fd6e:	4413      	add	r3, r2
 806fd70:	009b      	lsls	r3, r3, #2
 806fd72:	461a      	mov	r2, r3
 806fd74:	68fb      	ldr	r3, [r7, #12]
 806fd76:	4413      	add	r3, r2
 806fd78:	4a28      	ldr	r2, [pc, #160]	@ (806fe1c <uxTaskGetSystemState+0x110>)
 806fd7a:	6811      	ldr	r1, [r2, #0]
 806fd7c:	2202      	movs	r2, #2
 806fd7e:	4618      	mov	r0, r3
 806fd80:	f000 fbf6 	bl	8070570 <prvListTasksWithinSingleList>
 806fd84:	4602      	mov	r2, r0
 806fd86:	697b      	ldr	r3, [r7, #20]
 806fd88:	4413      	add	r3, r2
 806fd8a:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 806fd8c:	697a      	ldr	r2, [r7, #20]
 806fd8e:	4613      	mov	r3, r2
 806fd90:	00db      	lsls	r3, r3, #3
 806fd92:	4413      	add	r3, r2
 806fd94:	009b      	lsls	r3, r3, #2
 806fd96:	461a      	mov	r2, r3
 806fd98:	68fb      	ldr	r3, [r7, #12]
 806fd9a:	4413      	add	r3, r2
 806fd9c:	4a20      	ldr	r2, [pc, #128]	@ (806fe20 <uxTaskGetSystemState+0x114>)
 806fd9e:	6811      	ldr	r1, [r2, #0]
 806fda0:	2202      	movs	r2, #2
 806fda2:	4618      	mov	r0, r3
 806fda4:	f000 fbe4 	bl	8070570 <prvListTasksWithinSingleList>
 806fda8:	4602      	mov	r2, r0
 806fdaa:	697b      	ldr	r3, [r7, #20]
 806fdac:	4413      	add	r3, r2
 806fdae:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 806fdb0:	697a      	ldr	r2, [r7, #20]
 806fdb2:	4613      	mov	r3, r2
 806fdb4:	00db      	lsls	r3, r3, #3
 806fdb6:	4413      	add	r3, r2
 806fdb8:	009b      	lsls	r3, r3, #2
 806fdba:	461a      	mov	r2, r3
 806fdbc:	68fb      	ldr	r3, [r7, #12]
 806fdbe:	4413      	add	r3, r2
 806fdc0:	2204      	movs	r2, #4
 806fdc2:	4918      	ldr	r1, [pc, #96]	@ (806fe24 <uxTaskGetSystemState+0x118>)
 806fdc4:	4618      	mov	r0, r3
 806fdc6:	f000 fbd3 	bl	8070570 <prvListTasksWithinSingleList>
 806fdca:	4602      	mov	r2, r0
 806fdcc:	697b      	ldr	r3, [r7, #20]
 806fdce:	4413      	add	r3, r2
 806fdd0:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 806fdd2:	697a      	ldr	r2, [r7, #20]
 806fdd4:	4613      	mov	r3, r2
 806fdd6:	00db      	lsls	r3, r3, #3
 806fdd8:	4413      	add	r3, r2
 806fdda:	009b      	lsls	r3, r3, #2
 806fddc:	461a      	mov	r2, r3
 806fdde:	68fb      	ldr	r3, [r7, #12]
 806fde0:	4413      	add	r3, r2
 806fde2:	2203      	movs	r2, #3
 806fde4:	4910      	ldr	r1, [pc, #64]	@ (806fe28 <uxTaskGetSystemState+0x11c>)
 806fde6:	4618      	mov	r0, r3
 806fde8:	f000 fbc2 	bl	8070570 <prvListTasksWithinSingleList>
 806fdec:	4602      	mov	r2, r0
 806fdee:	697b      	ldr	r3, [r7, #20]
 806fdf0:	4413      	add	r3, r2
 806fdf2:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 806fdf4:	687b      	ldr	r3, [r7, #4]
 806fdf6:	2b00      	cmp	r3, #0
 806fdf8:	d004      	beq.n	806fe04 <uxTaskGetSystemState+0xf8>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 806fdfa:	f7f5 fe6f 	bl	8065adc <getRunTimeCounterValue>
 806fdfe:	4602      	mov	r2, r0
 806fe00:	687b      	ldr	r3, [r7, #4]
 806fe02:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 806fe04:	f7ff fed4 	bl	806fbb0 <xTaskResumeAll>

		return uxTask;
 806fe08:	697b      	ldr	r3, [r7, #20]
	}
 806fe0a:	4618      	mov	r0, r3
 806fe0c:	3718      	adds	r7, #24
 806fe0e:	46bd      	mov	sp, r7
 806fe10:	bd80      	pop	{r7, pc}
 806fe12:	bf00      	nop
 806fe14:	20015560 	.word	0x20015560
 806fe18:	2001508c 	.word	0x2001508c
 806fe1c:	20015514 	.word	0x20015514
 806fe20:	20015518 	.word	0x20015518
 806fe24:	20015530 	.word	0x20015530
 806fe28:	20015548 	.word	0x20015548

0806fe2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 806fe2c:	b580      	push	{r7, lr}
 806fe2e:	b086      	sub	sp, #24
 806fe30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 806fe32:	2300      	movs	r3, #0
 806fe34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 806fe36:	4b53      	ldr	r3, [pc, #332]	@ (806ff84 <xTaskIncrementTick+0x158>)
 806fe38:	681b      	ldr	r3, [r3, #0]
 806fe3a:	2b00      	cmp	r3, #0
 806fe3c:	f040 8096 	bne.w	806ff6c <xTaskIncrementTick+0x140>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 806fe40:	4b51      	ldr	r3, [pc, #324]	@ (806ff88 <xTaskIncrementTick+0x15c>)
 806fe42:	681b      	ldr	r3, [r3, #0]
 806fe44:	3301      	adds	r3, #1
 806fe46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 806fe48:	4a4f      	ldr	r2, [pc, #316]	@ (806ff88 <xTaskIncrementTick+0x15c>)
 806fe4a:	693b      	ldr	r3, [r7, #16]
 806fe4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 806fe4e:	693b      	ldr	r3, [r7, #16]
 806fe50:	2b00      	cmp	r3, #0
 806fe52:	d121      	bne.n	806fe98 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 806fe54:	4b4d      	ldr	r3, [pc, #308]	@ (806ff8c <xTaskIncrementTick+0x160>)
 806fe56:	681b      	ldr	r3, [r3, #0]
 806fe58:	681b      	ldr	r3, [r3, #0]
 806fe5a:	2b00      	cmp	r3, #0
 806fe5c:	d00b      	beq.n	806fe76 <xTaskIncrementTick+0x4a>
	__asm volatile
 806fe5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 806fe62:	f383 8811 	msr	BASEPRI, r3
 806fe66:	f3bf 8f6f 	isb	sy
 806fe6a:	f3bf 8f4f 	dsb	sy
 806fe6e:	603b      	str	r3, [r7, #0]
}
 806fe70:	bf00      	nop
 806fe72:	bf00      	nop
 806fe74:	e7fd      	b.n	806fe72 <xTaskIncrementTick+0x46>
 806fe76:	4b45      	ldr	r3, [pc, #276]	@ (806ff8c <xTaskIncrementTick+0x160>)
 806fe78:	681b      	ldr	r3, [r3, #0]
 806fe7a:	60fb      	str	r3, [r7, #12]
 806fe7c:	4b44      	ldr	r3, [pc, #272]	@ (806ff90 <xTaskIncrementTick+0x164>)
 806fe7e:	681b      	ldr	r3, [r3, #0]
 806fe80:	4a42      	ldr	r2, [pc, #264]	@ (806ff8c <xTaskIncrementTick+0x160>)
 806fe82:	6013      	str	r3, [r2, #0]
 806fe84:	4a42      	ldr	r2, [pc, #264]	@ (806ff90 <xTaskIncrementTick+0x164>)
 806fe86:	68fb      	ldr	r3, [r7, #12]
 806fe88:	6013      	str	r3, [r2, #0]
 806fe8a:	4b42      	ldr	r3, [pc, #264]	@ (806ff94 <xTaskIncrementTick+0x168>)
 806fe8c:	681b      	ldr	r3, [r3, #0]
 806fe8e:	3301      	adds	r3, #1
 806fe90:	4a40      	ldr	r2, [pc, #256]	@ (806ff94 <xTaskIncrementTick+0x168>)
 806fe92:	6013      	str	r3, [r2, #0]
 806fe94:	f000 fc10 	bl	80706b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 806fe98:	4b3f      	ldr	r3, [pc, #252]	@ (806ff98 <xTaskIncrementTick+0x16c>)
 806fe9a:	681b      	ldr	r3, [r3, #0]
 806fe9c:	693a      	ldr	r2, [r7, #16]
 806fe9e:	429a      	cmp	r2, r3
 806fea0:	d349      	bcc.n	806ff36 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 806fea2:	4b3a      	ldr	r3, [pc, #232]	@ (806ff8c <xTaskIncrementTick+0x160>)
 806fea4:	681b      	ldr	r3, [r3, #0]
 806fea6:	681b      	ldr	r3, [r3, #0]
 806fea8:	2b00      	cmp	r3, #0
 806feaa:	d104      	bne.n	806feb6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 806feac:	4b3a      	ldr	r3, [pc, #232]	@ (806ff98 <xTaskIncrementTick+0x16c>)
 806feae:	f04f 32ff 	mov.w	r2, #4294967295
 806feb2:	601a      	str	r2, [r3, #0]
					break;
 806feb4:	e03f      	b.n	806ff36 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 806feb6:	4b35      	ldr	r3, [pc, #212]	@ (806ff8c <xTaskIncrementTick+0x160>)
 806feb8:	681b      	ldr	r3, [r3, #0]
 806feba:	68db      	ldr	r3, [r3, #12]
 806febc:	68db      	ldr	r3, [r3, #12]
 806febe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 806fec0:	68bb      	ldr	r3, [r7, #8]
 806fec2:	685b      	ldr	r3, [r3, #4]
 806fec4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 806fec6:	693a      	ldr	r2, [r7, #16]
 806fec8:	687b      	ldr	r3, [r7, #4]
 806feca:	429a      	cmp	r2, r3
 806fecc:	d203      	bcs.n	806fed6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 806fece:	4a32      	ldr	r2, [pc, #200]	@ (806ff98 <xTaskIncrementTick+0x16c>)
 806fed0:	687b      	ldr	r3, [r7, #4]
 806fed2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 806fed4:	e02f      	b.n	806ff36 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 806fed6:	68bb      	ldr	r3, [r7, #8]
 806fed8:	3304      	adds	r3, #4
 806feda:	4618      	mov	r0, r3
 806fedc:	f7fe fb2c 	bl	806e538 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 806fee0:	68bb      	ldr	r3, [r7, #8]
 806fee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 806fee4:	2b00      	cmp	r3, #0
 806fee6:	d004      	beq.n	806fef2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 806fee8:	68bb      	ldr	r3, [r7, #8]
 806feea:	3318      	adds	r3, #24
 806feec:	4618      	mov	r0, r3
 806feee:	f7fe fb23 	bl	806e538 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 806fef2:	68bb      	ldr	r3, [r7, #8]
 806fef4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 806fef6:	4b29      	ldr	r3, [pc, #164]	@ (806ff9c <xTaskIncrementTick+0x170>)
 806fef8:	681b      	ldr	r3, [r3, #0]
 806fefa:	429a      	cmp	r2, r3
 806fefc:	d903      	bls.n	806ff06 <xTaskIncrementTick+0xda>
 806fefe:	68bb      	ldr	r3, [r7, #8]
 806ff00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 806ff02:	4a26      	ldr	r2, [pc, #152]	@ (806ff9c <xTaskIncrementTick+0x170>)
 806ff04:	6013      	str	r3, [r2, #0]
 806ff06:	68bb      	ldr	r3, [r7, #8]
 806ff08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 806ff0a:	4613      	mov	r3, r2
 806ff0c:	009b      	lsls	r3, r3, #2
 806ff0e:	4413      	add	r3, r2
 806ff10:	009b      	lsls	r3, r3, #2
 806ff12:	4a23      	ldr	r2, [pc, #140]	@ (806ffa0 <xTaskIncrementTick+0x174>)
 806ff14:	441a      	add	r2, r3
 806ff16:	68bb      	ldr	r3, [r7, #8]
 806ff18:	3304      	adds	r3, #4
 806ff1a:	4619      	mov	r1, r3
 806ff1c:	4610      	mov	r0, r2
 806ff1e:	f7fe faae 	bl	806e47e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 806ff22:	68bb      	ldr	r3, [r7, #8]
 806ff24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 806ff26:	4b1f      	ldr	r3, [pc, #124]	@ (806ffa4 <xTaskIncrementTick+0x178>)
 806ff28:	681b      	ldr	r3, [r3, #0]
 806ff2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 806ff2c:	429a      	cmp	r2, r3
 806ff2e:	d3b8      	bcc.n	806fea2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 806ff30:	2301      	movs	r3, #1
 806ff32:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 806ff34:	e7b5      	b.n	806fea2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 806ff36:	4b1b      	ldr	r3, [pc, #108]	@ (806ffa4 <xTaskIncrementTick+0x178>)
 806ff38:	681b      	ldr	r3, [r3, #0]
 806ff3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 806ff3c:	4918      	ldr	r1, [pc, #96]	@ (806ffa0 <xTaskIncrementTick+0x174>)
 806ff3e:	4613      	mov	r3, r2
 806ff40:	009b      	lsls	r3, r3, #2
 806ff42:	4413      	add	r3, r2
 806ff44:	009b      	lsls	r3, r3, #2
 806ff46:	440b      	add	r3, r1
 806ff48:	681b      	ldr	r3, [r3, #0]
 806ff4a:	2b01      	cmp	r3, #1
 806ff4c:	d901      	bls.n	806ff52 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 806ff4e:	2301      	movs	r3, #1
 806ff50:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 806ff52:	4b15      	ldr	r3, [pc, #84]	@ (806ffa8 <xTaskIncrementTick+0x17c>)
 806ff54:	681b      	ldr	r3, [r3, #0]
 806ff56:	2b00      	cmp	r3, #0
 806ff58:	d101      	bne.n	806ff5e <xTaskIncrementTick+0x132>
			{
				vApplicationTickHook();
 806ff5a:	f7f5 fde9 	bl	8065b30 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 806ff5e:	4b13      	ldr	r3, [pc, #76]	@ (806ffac <xTaskIncrementTick+0x180>)
 806ff60:	681b      	ldr	r3, [r3, #0]
 806ff62:	2b00      	cmp	r3, #0
 806ff64:	d009      	beq.n	806ff7a <xTaskIncrementTick+0x14e>
			{
				xSwitchRequired = pdTRUE;
 806ff66:	2301      	movs	r3, #1
 806ff68:	617b      	str	r3, [r7, #20]
 806ff6a:	e006      	b.n	806ff7a <xTaskIncrementTick+0x14e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 806ff6c:	4b0e      	ldr	r3, [pc, #56]	@ (806ffa8 <xTaskIncrementTick+0x17c>)
 806ff6e:	681b      	ldr	r3, [r3, #0]
 806ff70:	3301      	adds	r3, #1
 806ff72:	4a0d      	ldr	r2, [pc, #52]	@ (806ffa8 <xTaskIncrementTick+0x17c>)
 806ff74:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 806ff76:	f7f5 fddb 	bl	8065b30 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 806ff7a:	697b      	ldr	r3, [r7, #20]
}
 806ff7c:	4618      	mov	r0, r3
 806ff7e:	3718      	adds	r7, #24
 806ff80:	46bd      	mov	sp, r7
 806ff82:	bd80      	pop	{r7, pc}
 806ff84:	20015588 	.word	0x20015588
 806ff88:	20015564 	.word	0x20015564
 806ff8c:	20015514 	.word	0x20015514
 806ff90:	20015518 	.word	0x20015518
 806ff94:	20015578 	.word	0x20015578
 806ff98:	20015580 	.word	0x20015580
 806ff9c:	20015568 	.word	0x20015568
 806ffa0:	2001508c 	.word	0x2001508c
 806ffa4:	20015088 	.word	0x20015088
 806ffa8:	20015570 	.word	0x20015570
 806ffac:	20015574 	.word	0x20015574

0806ffb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 806ffb0:	b580      	push	{r7, lr}
 806ffb2:	b084      	sub	sp, #16
 806ffb4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 806ffb6:	4b46      	ldr	r3, [pc, #280]	@ (80700d0 <vTaskSwitchContext+0x120>)
 806ffb8:	681b      	ldr	r3, [r3, #0]
 806ffba:	2b00      	cmp	r3, #0
 806ffbc:	d003      	beq.n	806ffc6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 806ffbe:	4b45      	ldr	r3, [pc, #276]	@ (80700d4 <vTaskSwitchContext+0x124>)
 806ffc0:	2201      	movs	r2, #1
 806ffc2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 806ffc4:	e080      	b.n	80700c8 <vTaskSwitchContext+0x118>
		xYieldPending = pdFALSE;
 806ffc6:	4b43      	ldr	r3, [pc, #268]	@ (80700d4 <vTaskSwitchContext+0x124>)
 806ffc8:	2200      	movs	r2, #0
 806ffca:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 806ffcc:	f7f5 fd86 	bl	8065adc <getRunTimeCounterValue>
 806ffd0:	4603      	mov	r3, r0
 806ffd2:	4a41      	ldr	r2, [pc, #260]	@ (80700d8 <vTaskSwitchContext+0x128>)
 806ffd4:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 806ffd6:	4b40      	ldr	r3, [pc, #256]	@ (80700d8 <vTaskSwitchContext+0x128>)
 806ffd8:	681a      	ldr	r2, [r3, #0]
 806ffda:	4b40      	ldr	r3, [pc, #256]	@ (80700dc <vTaskSwitchContext+0x12c>)
 806ffdc:	681b      	ldr	r3, [r3, #0]
 806ffde:	429a      	cmp	r2, r3
 806ffe0:	d90b      	bls.n	806fffa <vTaskSwitchContext+0x4a>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 806ffe2:	4b3f      	ldr	r3, [pc, #252]	@ (80700e0 <vTaskSwitchContext+0x130>)
 806ffe4:	681b      	ldr	r3, [r3, #0]
 806ffe6:	f8d3 114c 	ldr.w	r1, [r3, #332]	@ 0x14c
 806ffea:	4a3b      	ldr	r2, [pc, #236]	@ (80700d8 <vTaskSwitchContext+0x128>)
 806ffec:	6810      	ldr	r0, [r2, #0]
 806ffee:	4a3b      	ldr	r2, [pc, #236]	@ (80700dc <vTaskSwitchContext+0x12c>)
 806fff0:	6812      	ldr	r2, [r2, #0]
 806fff2:	1a82      	subs	r2, r0, r2
 806fff4:	440a      	add	r2, r1
 806fff6:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
			ulTaskSwitchedInTime = ulTotalRunTime;
 806fffa:	4b37      	ldr	r3, [pc, #220]	@ (80700d8 <vTaskSwitchContext+0x128>)
 806fffc:	681b      	ldr	r3, [r3, #0]
 806fffe:	4a37      	ldr	r2, [pc, #220]	@ (80700dc <vTaskSwitchContext+0x12c>)
 8070000:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8070002:	4b37      	ldr	r3, [pc, #220]	@ (80700e0 <vTaskSwitchContext+0x130>)
 8070004:	681b      	ldr	r3, [r3, #0]
 8070006:	681a      	ldr	r2, [r3, #0]
 8070008:	4b35      	ldr	r3, [pc, #212]	@ (80700e0 <vTaskSwitchContext+0x130>)
 807000a:	681b      	ldr	r3, [r3, #0]
 807000c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 807000e:	429a      	cmp	r2, r3
 8070010:	d808      	bhi.n	8070024 <vTaskSwitchContext+0x74>
 8070012:	4b33      	ldr	r3, [pc, #204]	@ (80700e0 <vTaskSwitchContext+0x130>)
 8070014:	681a      	ldr	r2, [r3, #0]
 8070016:	4b32      	ldr	r3, [pc, #200]	@ (80700e0 <vTaskSwitchContext+0x130>)
 8070018:	681b      	ldr	r3, [r3, #0]
 807001a:	3334      	adds	r3, #52	@ 0x34
 807001c:	4619      	mov	r1, r3
 807001e:	4610      	mov	r0, r2
 8070020:	f7f5 fd98 	bl	8065b54 <vApplicationStackOverflowHook>
			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
 8070024:	4b2e      	ldr	r3, [pc, #184]	@ (80700e0 <vTaskSwitchContext+0x130>)
 8070026:	681b      	ldr	r3, [r3, #0]
 8070028:	4a2e      	ldr	r2, [pc, #184]	@ (80700e4 <vTaskSwitchContext+0x134>)
 807002a:	6812      	ldr	r2, [r2, #0]
 807002c:	f8c3 21a4 	str.w	r2, [r3, #420]	@ 0x1a4
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8070030:	4b2d      	ldr	r3, [pc, #180]	@ (80700e8 <vTaskSwitchContext+0x138>)
 8070032:	681b      	ldr	r3, [r3, #0]
 8070034:	60fb      	str	r3, [r7, #12]
 8070036:	e011      	b.n	807005c <vTaskSwitchContext+0xac>
 8070038:	68fb      	ldr	r3, [r7, #12]
 807003a:	2b00      	cmp	r3, #0
 807003c:	d10b      	bne.n	8070056 <vTaskSwitchContext+0xa6>
	__asm volatile
 807003e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8070042:	f383 8811 	msr	BASEPRI, r3
 8070046:	f3bf 8f6f 	isb	sy
 807004a:	f3bf 8f4f 	dsb	sy
 807004e:	607b      	str	r3, [r7, #4]
}
 8070050:	bf00      	nop
 8070052:	bf00      	nop
 8070054:	e7fd      	b.n	8070052 <vTaskSwitchContext+0xa2>
 8070056:	68fb      	ldr	r3, [r7, #12]
 8070058:	3b01      	subs	r3, #1
 807005a:	60fb      	str	r3, [r7, #12]
 807005c:	4923      	ldr	r1, [pc, #140]	@ (80700ec <vTaskSwitchContext+0x13c>)
 807005e:	68fa      	ldr	r2, [r7, #12]
 8070060:	4613      	mov	r3, r2
 8070062:	009b      	lsls	r3, r3, #2
 8070064:	4413      	add	r3, r2
 8070066:	009b      	lsls	r3, r3, #2
 8070068:	440b      	add	r3, r1
 807006a:	681b      	ldr	r3, [r3, #0]
 807006c:	2b00      	cmp	r3, #0
 807006e:	d0e3      	beq.n	8070038 <vTaskSwitchContext+0x88>
 8070070:	68fa      	ldr	r2, [r7, #12]
 8070072:	4613      	mov	r3, r2
 8070074:	009b      	lsls	r3, r3, #2
 8070076:	4413      	add	r3, r2
 8070078:	009b      	lsls	r3, r3, #2
 807007a:	4a1c      	ldr	r2, [pc, #112]	@ (80700ec <vTaskSwitchContext+0x13c>)
 807007c:	4413      	add	r3, r2
 807007e:	60bb      	str	r3, [r7, #8]
 8070080:	68bb      	ldr	r3, [r7, #8]
 8070082:	685b      	ldr	r3, [r3, #4]
 8070084:	685a      	ldr	r2, [r3, #4]
 8070086:	68bb      	ldr	r3, [r7, #8]
 8070088:	605a      	str	r2, [r3, #4]
 807008a:	68bb      	ldr	r3, [r7, #8]
 807008c:	685a      	ldr	r2, [r3, #4]
 807008e:	68bb      	ldr	r3, [r7, #8]
 8070090:	3308      	adds	r3, #8
 8070092:	429a      	cmp	r2, r3
 8070094:	d104      	bne.n	80700a0 <vTaskSwitchContext+0xf0>
 8070096:	68bb      	ldr	r3, [r7, #8]
 8070098:	685b      	ldr	r3, [r3, #4]
 807009a:	685a      	ldr	r2, [r3, #4]
 807009c:	68bb      	ldr	r3, [r7, #8]
 807009e:	605a      	str	r2, [r3, #4]
 80700a0:	68bb      	ldr	r3, [r7, #8]
 80700a2:	685b      	ldr	r3, [r3, #4]
 80700a4:	68db      	ldr	r3, [r3, #12]
 80700a6:	4a0e      	ldr	r2, [pc, #56]	@ (80700e0 <vTaskSwitchContext+0x130>)
 80700a8:	6013      	str	r3, [r2, #0]
 80700aa:	4a0f      	ldr	r2, [pc, #60]	@ (80700e8 <vTaskSwitchContext+0x138>)
 80700ac:	68fb      	ldr	r3, [r7, #12]
 80700ae:	6013      	str	r3, [r2, #0]
			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
 80700b0:	4b0b      	ldr	r3, [pc, #44]	@ (80700e0 <vTaskSwitchContext+0x130>)
 80700b2:	681b      	ldr	r3, [r3, #0]
 80700b4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 80700b8:	4a0a      	ldr	r2, [pc, #40]	@ (80700e4 <vTaskSwitchContext+0x134>)
 80700ba:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80700bc:	4b08      	ldr	r3, [pc, #32]	@ (80700e0 <vTaskSwitchContext+0x130>)
 80700be:	681b      	ldr	r3, [r3, #0]
 80700c0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80700c4:	4a0a      	ldr	r2, [pc, #40]	@ (80700f0 <vTaskSwitchContext+0x140>)
 80700c6:	6013      	str	r3, [r2, #0]
}
 80700c8:	bf00      	nop
 80700ca:	3710      	adds	r7, #16
 80700cc:	46bd      	mov	sp, r7
 80700ce:	bd80      	pop	{r7, pc}
 80700d0:	20015588 	.word	0x20015588
 80700d4:	20015574 	.word	0x20015574
 80700d8:	20015590 	.word	0x20015590
 80700dc:	2001558c 	.word	0x2001558c
 80700e0:	20015088 	.word	0x20015088
 80700e4:	2001555c 	.word	0x2001555c
 80700e8:	20015568 	.word	0x20015568
 80700ec:	2001508c 	.word	0x2001508c
 80700f0:	20010130 	.word	0x20010130

080700f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80700f4:	b580      	push	{r7, lr}
 80700f6:	b084      	sub	sp, #16
 80700f8:	af00      	add	r7, sp, #0
 80700fa:	6078      	str	r0, [r7, #4]
 80700fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80700fe:	687b      	ldr	r3, [r7, #4]
 8070100:	2b00      	cmp	r3, #0
 8070102:	d10b      	bne.n	807011c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8070104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8070108:	f383 8811 	msr	BASEPRI, r3
 807010c:	f3bf 8f6f 	isb	sy
 8070110:	f3bf 8f4f 	dsb	sy
 8070114:	60fb      	str	r3, [r7, #12]
}
 8070116:	bf00      	nop
 8070118:	bf00      	nop
 807011a:	e7fd      	b.n	8070118 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 807011c:	4b07      	ldr	r3, [pc, #28]	@ (807013c <vTaskPlaceOnEventList+0x48>)
 807011e:	681b      	ldr	r3, [r3, #0]
 8070120:	3318      	adds	r3, #24
 8070122:	4619      	mov	r1, r3
 8070124:	6878      	ldr	r0, [r7, #4]
 8070126:	f7fe f9ce 	bl	806e4c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 807012a:	2101      	movs	r1, #1
 807012c:	6838      	ldr	r0, [r7, #0]
 807012e:	f000 fb77 	bl	8070820 <prvAddCurrentTaskToDelayedList>
}
 8070132:	bf00      	nop
 8070134:	3710      	adds	r7, #16
 8070136:	46bd      	mov	sp, r7
 8070138:	bd80      	pop	{r7, pc}
 807013a:	bf00      	nop
 807013c:	20015088 	.word	0x20015088

08070140 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8070140:	b580      	push	{r7, lr}
 8070142:	b086      	sub	sp, #24
 8070144:	af00      	add	r7, sp, #0
 8070146:	60f8      	str	r0, [r7, #12]
 8070148:	60b9      	str	r1, [r7, #8]
 807014a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 807014c:	68fb      	ldr	r3, [r7, #12]
 807014e:	2b00      	cmp	r3, #0
 8070150:	d10b      	bne.n	807016a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8070152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8070156:	f383 8811 	msr	BASEPRI, r3
 807015a:	f3bf 8f6f 	isb	sy
 807015e:	f3bf 8f4f 	dsb	sy
 8070162:	617b      	str	r3, [r7, #20]
}
 8070164:	bf00      	nop
 8070166:	bf00      	nop
 8070168:	e7fd      	b.n	8070166 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 807016a:	4b0a      	ldr	r3, [pc, #40]	@ (8070194 <vTaskPlaceOnEventListRestricted+0x54>)
 807016c:	681b      	ldr	r3, [r3, #0]
 807016e:	3318      	adds	r3, #24
 8070170:	4619      	mov	r1, r3
 8070172:	68f8      	ldr	r0, [r7, #12]
 8070174:	f7fe f983 	bl	806e47e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8070178:	687b      	ldr	r3, [r7, #4]
 807017a:	2b00      	cmp	r3, #0
 807017c:	d002      	beq.n	8070184 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 807017e:	f04f 33ff 	mov.w	r3, #4294967295
 8070182:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8070184:	6879      	ldr	r1, [r7, #4]
 8070186:	68b8      	ldr	r0, [r7, #8]
 8070188:	f000 fb4a 	bl	8070820 <prvAddCurrentTaskToDelayedList>
	}
 807018c:	bf00      	nop
 807018e:	3718      	adds	r7, #24
 8070190:	46bd      	mov	sp, r7
 8070192:	bd80      	pop	{r7, pc}
 8070194:	20015088 	.word	0x20015088

08070198 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8070198:	b580      	push	{r7, lr}
 807019a:	b086      	sub	sp, #24
 807019c:	af00      	add	r7, sp, #0
 807019e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80701a0:	687b      	ldr	r3, [r7, #4]
 80701a2:	68db      	ldr	r3, [r3, #12]
 80701a4:	68db      	ldr	r3, [r3, #12]
 80701a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80701a8:	693b      	ldr	r3, [r7, #16]
 80701aa:	2b00      	cmp	r3, #0
 80701ac:	d10b      	bne.n	80701c6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80701ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80701b2:	f383 8811 	msr	BASEPRI, r3
 80701b6:	f3bf 8f6f 	isb	sy
 80701ba:	f3bf 8f4f 	dsb	sy
 80701be:	60fb      	str	r3, [r7, #12]
}
 80701c0:	bf00      	nop
 80701c2:	bf00      	nop
 80701c4:	e7fd      	b.n	80701c2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80701c6:	693b      	ldr	r3, [r7, #16]
 80701c8:	3318      	adds	r3, #24
 80701ca:	4618      	mov	r0, r3
 80701cc:	f7fe f9b4 	bl	806e538 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80701d0:	4b1d      	ldr	r3, [pc, #116]	@ (8070248 <xTaskRemoveFromEventList+0xb0>)
 80701d2:	681b      	ldr	r3, [r3, #0]
 80701d4:	2b00      	cmp	r3, #0
 80701d6:	d11d      	bne.n	8070214 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80701d8:	693b      	ldr	r3, [r7, #16]
 80701da:	3304      	adds	r3, #4
 80701dc:	4618      	mov	r0, r3
 80701de:	f7fe f9ab 	bl	806e538 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80701e2:	693b      	ldr	r3, [r7, #16]
 80701e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80701e6:	4b19      	ldr	r3, [pc, #100]	@ (807024c <xTaskRemoveFromEventList+0xb4>)
 80701e8:	681b      	ldr	r3, [r3, #0]
 80701ea:	429a      	cmp	r2, r3
 80701ec:	d903      	bls.n	80701f6 <xTaskRemoveFromEventList+0x5e>
 80701ee:	693b      	ldr	r3, [r7, #16]
 80701f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80701f2:	4a16      	ldr	r2, [pc, #88]	@ (807024c <xTaskRemoveFromEventList+0xb4>)
 80701f4:	6013      	str	r3, [r2, #0]
 80701f6:	693b      	ldr	r3, [r7, #16]
 80701f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80701fa:	4613      	mov	r3, r2
 80701fc:	009b      	lsls	r3, r3, #2
 80701fe:	4413      	add	r3, r2
 8070200:	009b      	lsls	r3, r3, #2
 8070202:	4a13      	ldr	r2, [pc, #76]	@ (8070250 <xTaskRemoveFromEventList+0xb8>)
 8070204:	441a      	add	r2, r3
 8070206:	693b      	ldr	r3, [r7, #16]
 8070208:	3304      	adds	r3, #4
 807020a:	4619      	mov	r1, r3
 807020c:	4610      	mov	r0, r2
 807020e:	f7fe f936 	bl	806e47e <vListInsertEnd>
 8070212:	e005      	b.n	8070220 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8070214:	693b      	ldr	r3, [r7, #16]
 8070216:	3318      	adds	r3, #24
 8070218:	4619      	mov	r1, r3
 807021a:	480e      	ldr	r0, [pc, #56]	@ (8070254 <xTaskRemoveFromEventList+0xbc>)
 807021c:	f7fe f92f 	bl	806e47e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8070220:	693b      	ldr	r3, [r7, #16]
 8070222:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8070224:	4b0c      	ldr	r3, [pc, #48]	@ (8070258 <xTaskRemoveFromEventList+0xc0>)
 8070226:	681b      	ldr	r3, [r3, #0]
 8070228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 807022a:	429a      	cmp	r2, r3
 807022c:	d905      	bls.n	807023a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 807022e:	2301      	movs	r3, #1
 8070230:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8070232:	4b0a      	ldr	r3, [pc, #40]	@ (807025c <xTaskRemoveFromEventList+0xc4>)
 8070234:	2201      	movs	r2, #1
 8070236:	601a      	str	r2, [r3, #0]
 8070238:	e001      	b.n	807023e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 807023a:	2300      	movs	r3, #0
 807023c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 807023e:	697b      	ldr	r3, [r7, #20]
}
 8070240:	4618      	mov	r0, r3
 8070242:	3718      	adds	r7, #24
 8070244:	46bd      	mov	sp, r7
 8070246:	bd80      	pop	{r7, pc}
 8070248:	20015588 	.word	0x20015588
 807024c:	20015568 	.word	0x20015568
 8070250:	2001508c 	.word	0x2001508c
 8070254:	2001551c 	.word	0x2001551c
 8070258:	20015088 	.word	0x20015088
 807025c:	20015574 	.word	0x20015574

08070260 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8070260:	b480      	push	{r7}
 8070262:	b083      	sub	sp, #12
 8070264:	af00      	add	r7, sp, #0
 8070266:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8070268:	4b06      	ldr	r3, [pc, #24]	@ (8070284 <vTaskInternalSetTimeOutState+0x24>)
 807026a:	681a      	ldr	r2, [r3, #0]
 807026c:	687b      	ldr	r3, [r7, #4]
 807026e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8070270:	4b05      	ldr	r3, [pc, #20]	@ (8070288 <vTaskInternalSetTimeOutState+0x28>)
 8070272:	681a      	ldr	r2, [r3, #0]
 8070274:	687b      	ldr	r3, [r7, #4]
 8070276:	605a      	str	r2, [r3, #4]
}
 8070278:	bf00      	nop
 807027a:	370c      	adds	r7, #12
 807027c:	46bd      	mov	sp, r7
 807027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8070282:	4770      	bx	lr
 8070284:	20015578 	.word	0x20015578
 8070288:	20015564 	.word	0x20015564

0807028c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 807028c:	b580      	push	{r7, lr}
 807028e:	b088      	sub	sp, #32
 8070290:	af00      	add	r7, sp, #0
 8070292:	6078      	str	r0, [r7, #4]
 8070294:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8070296:	687b      	ldr	r3, [r7, #4]
 8070298:	2b00      	cmp	r3, #0
 807029a:	d10b      	bne.n	80702b4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 807029c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80702a0:	f383 8811 	msr	BASEPRI, r3
 80702a4:	f3bf 8f6f 	isb	sy
 80702a8:	f3bf 8f4f 	dsb	sy
 80702ac:	613b      	str	r3, [r7, #16]
}
 80702ae:	bf00      	nop
 80702b0:	bf00      	nop
 80702b2:	e7fd      	b.n	80702b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80702b4:	683b      	ldr	r3, [r7, #0]
 80702b6:	2b00      	cmp	r3, #0
 80702b8:	d10b      	bne.n	80702d2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80702ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80702be:	f383 8811 	msr	BASEPRI, r3
 80702c2:	f3bf 8f6f 	isb	sy
 80702c6:	f3bf 8f4f 	dsb	sy
 80702ca:	60fb      	str	r3, [r7, #12]
}
 80702cc:	bf00      	nop
 80702ce:	bf00      	nop
 80702d0:	e7fd      	b.n	80702ce <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80702d2:	f7fe fa89 	bl	806e7e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80702d6:	4b24      	ldr	r3, [pc, #144]	@ (8070368 <xTaskCheckForTimeOut+0xdc>)
 80702d8:	681b      	ldr	r3, [r3, #0]
 80702da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80702dc:	687b      	ldr	r3, [r7, #4]
 80702de:	685b      	ldr	r3, [r3, #4]
 80702e0:	69ba      	ldr	r2, [r7, #24]
 80702e2:	1ad3      	subs	r3, r2, r3
 80702e4:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 80702e6:	4b21      	ldr	r3, [pc, #132]	@ (807036c <xTaskCheckForTimeOut+0xe0>)
 80702e8:	681b      	ldr	r3, [r3, #0]
 80702ea:	f893 31a2 	ldrb.w	r3, [r3, #418]	@ 0x1a2
 80702ee:	2b00      	cmp	r3, #0
 80702f0:	d007      	beq.n	8070302 <xTaskCheckForTimeOut+0x76>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 80702f2:	4b1e      	ldr	r3, [pc, #120]	@ (807036c <xTaskCheckForTimeOut+0xe0>)
 80702f4:	681b      	ldr	r3, [r3, #0]
 80702f6:	2200      	movs	r2, #0
 80702f8:	f883 21a2 	strb.w	r2, [r3, #418]	@ 0x1a2
				xReturn = pdTRUE;
 80702fc:	2301      	movs	r3, #1
 80702fe:	61fb      	str	r3, [r7, #28]
 8070300:	e02b      	b.n	807035a <xTaskCheckForTimeOut+0xce>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8070302:	683b      	ldr	r3, [r7, #0]
 8070304:	681b      	ldr	r3, [r3, #0]
 8070306:	f1b3 3fff 	cmp.w	r3, #4294967295
 807030a:	d102      	bne.n	8070312 <xTaskCheckForTimeOut+0x86>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 807030c:	2300      	movs	r3, #0
 807030e:	61fb      	str	r3, [r7, #28]
 8070310:	e023      	b.n	807035a <xTaskCheckForTimeOut+0xce>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8070312:	687b      	ldr	r3, [r7, #4]
 8070314:	681a      	ldr	r2, [r3, #0]
 8070316:	4b16      	ldr	r3, [pc, #88]	@ (8070370 <xTaskCheckForTimeOut+0xe4>)
 8070318:	681b      	ldr	r3, [r3, #0]
 807031a:	429a      	cmp	r2, r3
 807031c:	d007      	beq.n	807032e <xTaskCheckForTimeOut+0xa2>
 807031e:	687b      	ldr	r3, [r7, #4]
 8070320:	685b      	ldr	r3, [r3, #4]
 8070322:	69ba      	ldr	r2, [r7, #24]
 8070324:	429a      	cmp	r2, r3
 8070326:	d302      	bcc.n	807032e <xTaskCheckForTimeOut+0xa2>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8070328:	2301      	movs	r3, #1
 807032a:	61fb      	str	r3, [r7, #28]
 807032c:	e015      	b.n	807035a <xTaskCheckForTimeOut+0xce>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 807032e:	683b      	ldr	r3, [r7, #0]
 8070330:	681b      	ldr	r3, [r3, #0]
 8070332:	697a      	ldr	r2, [r7, #20]
 8070334:	429a      	cmp	r2, r3
 8070336:	d20b      	bcs.n	8070350 <xTaskCheckForTimeOut+0xc4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8070338:	683b      	ldr	r3, [r7, #0]
 807033a:	681a      	ldr	r2, [r3, #0]
 807033c:	697b      	ldr	r3, [r7, #20]
 807033e:	1ad2      	subs	r2, r2, r3
 8070340:	683b      	ldr	r3, [r7, #0]
 8070342:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8070344:	6878      	ldr	r0, [r7, #4]
 8070346:	f7ff ff8b 	bl	8070260 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 807034a:	2300      	movs	r3, #0
 807034c:	61fb      	str	r3, [r7, #28]
 807034e:	e004      	b.n	807035a <xTaskCheckForTimeOut+0xce>
		}
		else
		{
			*pxTicksToWait = 0;
 8070350:	683b      	ldr	r3, [r7, #0]
 8070352:	2200      	movs	r2, #0
 8070354:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8070356:	2301      	movs	r3, #1
 8070358:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 807035a:	f7fe fa77 	bl	806e84c <vPortExitCritical>

	return xReturn;
 807035e:	69fb      	ldr	r3, [r7, #28]
}
 8070360:	4618      	mov	r0, r3
 8070362:	3720      	adds	r7, #32
 8070364:	46bd      	mov	sp, r7
 8070366:	bd80      	pop	{r7, pc}
 8070368:	20015564 	.word	0x20015564
 807036c:	20015088 	.word	0x20015088
 8070370:	20015578 	.word	0x20015578

08070374 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8070374:	b480      	push	{r7}
 8070376:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8070378:	4b03      	ldr	r3, [pc, #12]	@ (8070388 <vTaskMissedYield+0x14>)
 807037a:	2201      	movs	r2, #1
 807037c:	601a      	str	r2, [r3, #0]
}
 807037e:	bf00      	nop
 8070380:	46bd      	mov	sp, r7
 8070382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8070386:	4770      	bx	lr
 8070388:	20015574 	.word	0x20015574

0807038c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 807038c:	b580      	push	{r7, lr}
 807038e:	b082      	sub	sp, #8
 8070390:	af00      	add	r7, sp, #0
 8070392:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8070394:	f000 f854 	bl	8070440 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8070398:	4b07      	ldr	r3, [pc, #28]	@ (80703b8 <prvIdleTask+0x2c>)
 807039a:	681b      	ldr	r3, [r3, #0]
 807039c:	2b01      	cmp	r3, #1
 807039e:	d907      	bls.n	80703b0 <prvIdleTask+0x24>
			{
				taskYIELD();
 80703a0:	4b06      	ldr	r3, [pc, #24]	@ (80703bc <prvIdleTask+0x30>)
 80703a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80703a6:	601a      	str	r2, [r3, #0]
 80703a8:	f3bf 8f4f 	dsb	sy
 80703ac:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80703b0:	f7f5 fba0 	bl	8065af4 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80703b4:	e7ee      	b.n	8070394 <prvIdleTask+0x8>
 80703b6:	bf00      	nop
 80703b8:	2001508c 	.word	0x2001508c
 80703bc:	e000ed04 	.word	0xe000ed04

080703c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80703c0:	b580      	push	{r7, lr}
 80703c2:	b082      	sub	sp, #8
 80703c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80703c6:	2300      	movs	r3, #0
 80703c8:	607b      	str	r3, [r7, #4]
 80703ca:	e00c      	b.n	80703e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80703cc:	687a      	ldr	r2, [r7, #4]
 80703ce:	4613      	mov	r3, r2
 80703d0:	009b      	lsls	r3, r3, #2
 80703d2:	4413      	add	r3, r2
 80703d4:	009b      	lsls	r3, r3, #2
 80703d6:	4a12      	ldr	r2, [pc, #72]	@ (8070420 <prvInitialiseTaskLists+0x60>)
 80703d8:	4413      	add	r3, r2
 80703da:	4618      	mov	r0, r3
 80703dc:	f7fe f822 	bl	806e424 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80703e0:	687b      	ldr	r3, [r7, #4]
 80703e2:	3301      	adds	r3, #1
 80703e4:	607b      	str	r3, [r7, #4]
 80703e6:	687b      	ldr	r3, [r7, #4]
 80703e8:	2b37      	cmp	r3, #55	@ 0x37
 80703ea:	d9ef      	bls.n	80703cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80703ec:	480d      	ldr	r0, [pc, #52]	@ (8070424 <prvInitialiseTaskLists+0x64>)
 80703ee:	f7fe f819 	bl	806e424 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80703f2:	480d      	ldr	r0, [pc, #52]	@ (8070428 <prvInitialiseTaskLists+0x68>)
 80703f4:	f7fe f816 	bl	806e424 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80703f8:	480c      	ldr	r0, [pc, #48]	@ (807042c <prvInitialiseTaskLists+0x6c>)
 80703fa:	f7fe f813 	bl	806e424 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80703fe:	480c      	ldr	r0, [pc, #48]	@ (8070430 <prvInitialiseTaskLists+0x70>)
 8070400:	f7fe f810 	bl	806e424 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8070404:	480b      	ldr	r0, [pc, #44]	@ (8070434 <prvInitialiseTaskLists+0x74>)
 8070406:	f7fe f80d 	bl	806e424 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 807040a:	4b0b      	ldr	r3, [pc, #44]	@ (8070438 <prvInitialiseTaskLists+0x78>)
 807040c:	4a05      	ldr	r2, [pc, #20]	@ (8070424 <prvInitialiseTaskLists+0x64>)
 807040e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8070410:	4b0a      	ldr	r3, [pc, #40]	@ (807043c <prvInitialiseTaskLists+0x7c>)
 8070412:	4a05      	ldr	r2, [pc, #20]	@ (8070428 <prvInitialiseTaskLists+0x68>)
 8070414:	601a      	str	r2, [r3, #0]
}
 8070416:	bf00      	nop
 8070418:	3708      	adds	r7, #8
 807041a:	46bd      	mov	sp, r7
 807041c:	bd80      	pop	{r7, pc}
 807041e:	bf00      	nop
 8070420:	2001508c 	.word	0x2001508c
 8070424:	200154ec 	.word	0x200154ec
 8070428:	20015500 	.word	0x20015500
 807042c:	2001551c 	.word	0x2001551c
 8070430:	20015530 	.word	0x20015530
 8070434:	20015548 	.word	0x20015548
 8070438:	20015514 	.word	0x20015514
 807043c:	20015518 	.word	0x20015518

08070440 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8070440:	b580      	push	{r7, lr}
 8070442:	b082      	sub	sp, #8
 8070444:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8070446:	e019      	b.n	807047c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8070448:	f7fe f9ce 	bl	806e7e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 807044c:	4b10      	ldr	r3, [pc, #64]	@ (8070490 <prvCheckTasksWaitingTermination+0x50>)
 807044e:	68db      	ldr	r3, [r3, #12]
 8070450:	68db      	ldr	r3, [r3, #12]
 8070452:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8070454:	687b      	ldr	r3, [r7, #4]
 8070456:	3304      	adds	r3, #4
 8070458:	4618      	mov	r0, r3
 807045a:	f7fe f86d 	bl	806e538 <uxListRemove>
				--uxCurrentNumberOfTasks;
 807045e:	4b0d      	ldr	r3, [pc, #52]	@ (8070494 <prvCheckTasksWaitingTermination+0x54>)
 8070460:	681b      	ldr	r3, [r3, #0]
 8070462:	3b01      	subs	r3, #1
 8070464:	4a0b      	ldr	r2, [pc, #44]	@ (8070494 <prvCheckTasksWaitingTermination+0x54>)
 8070466:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8070468:	4b0b      	ldr	r3, [pc, #44]	@ (8070498 <prvCheckTasksWaitingTermination+0x58>)
 807046a:	681b      	ldr	r3, [r3, #0]
 807046c:	3b01      	subs	r3, #1
 807046e:	4a0a      	ldr	r2, [pc, #40]	@ (8070498 <prvCheckTasksWaitingTermination+0x58>)
 8070470:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8070472:	f7fe f9eb 	bl	806e84c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8070476:	6878      	ldr	r0, [r7, #4]
 8070478:	f000 f8e8 	bl	807064c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 807047c:	4b06      	ldr	r3, [pc, #24]	@ (8070498 <prvCheckTasksWaitingTermination+0x58>)
 807047e:	681b      	ldr	r3, [r3, #0]
 8070480:	2b00      	cmp	r3, #0
 8070482:	d1e1      	bne.n	8070448 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8070484:	bf00      	nop
 8070486:	bf00      	nop
 8070488:	3708      	adds	r7, #8
 807048a:	46bd      	mov	sp, r7
 807048c:	bd80      	pop	{r7, pc}
 807048e:	bf00      	nop
 8070490:	20015530 	.word	0x20015530
 8070494:	20015560 	.word	0x20015560
 8070498:	20015544 	.word	0x20015544

0807049c <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 807049c:	b580      	push	{r7, lr}
 807049e:	b086      	sub	sp, #24
 80704a0:	af00      	add	r7, sp, #0
 80704a2:	60f8      	str	r0, [r7, #12]
 80704a4:	60b9      	str	r1, [r7, #8]
 80704a6:	607a      	str	r2, [r7, #4]
 80704a8:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 80704aa:	68fb      	ldr	r3, [r7, #12]
 80704ac:	2b00      	cmp	r3, #0
 80704ae:	d102      	bne.n	80704b6 <vTaskGetInfo+0x1a>
 80704b0:	4b2e      	ldr	r3, [pc, #184]	@ (807056c <vTaskGetInfo+0xd0>)
 80704b2:	681b      	ldr	r3, [r3, #0]
 80704b4:	e000      	b.n	80704b8 <vTaskGetInfo+0x1c>
 80704b6:	68fb      	ldr	r3, [r7, #12]
 80704b8:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 80704ba:	68bb      	ldr	r3, [r7, #8]
 80704bc:	697a      	ldr	r2, [r7, #20]
 80704be:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 80704c0:	697b      	ldr	r3, [r7, #20]
 80704c2:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80704c6:	68bb      	ldr	r3, [r7, #8]
 80704c8:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 80704ca:	697b      	ldr	r3, [r7, #20]
 80704cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80704ce:	68bb      	ldr	r3, [r7, #8]
 80704d0:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 80704d2:	697b      	ldr	r3, [r7, #20]
 80704d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80704d6:	68bb      	ldr	r3, [r7, #8]
 80704d8:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 80704da:	697b      	ldr	r3, [r7, #20]
 80704dc:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
 80704e0:	68bb      	ldr	r3, [r7, #8]
 80704e2:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 80704e4:	697b      	ldr	r3, [r7, #20]
 80704e6:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 80704ea:	68bb      	ldr	r3, [r7, #8]
 80704ec:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 80704ee:	697b      	ldr	r3, [r7, #20]
 80704f0:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 80704f4:	68bb      	ldr	r3, [r7, #8]
 80704f6:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 80704f8:	78fb      	ldrb	r3, [r7, #3]
 80704fa:	2b05      	cmp	r3, #5
 80704fc:	d01a      	beq.n	8070534 <vTaskGetInfo+0x98>
		{
			if( pxTCB == pxCurrentTCB )
 80704fe:	4b1b      	ldr	r3, [pc, #108]	@ (807056c <vTaskGetInfo+0xd0>)
 8070500:	681b      	ldr	r3, [r3, #0]
 8070502:	697a      	ldr	r2, [r7, #20]
 8070504:	429a      	cmp	r2, r3
 8070506:	d103      	bne.n	8070510 <vTaskGetInfo+0x74>
			{
				pxTaskStatus->eCurrentState = eRunning;
 8070508:	68bb      	ldr	r3, [r7, #8]
 807050a:	2200      	movs	r2, #0
 807050c:	731a      	strb	r2, [r3, #12]
 807050e:	e018      	b.n	8070542 <vTaskGetInfo+0xa6>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 8070510:	68bb      	ldr	r3, [r7, #8]
 8070512:	78fa      	ldrb	r2, [r7, #3]
 8070514:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 8070516:	78fb      	ldrb	r3, [r7, #3]
 8070518:	2b03      	cmp	r3, #3
 807051a:	d112      	bne.n	8070542 <vTaskGetInfo+0xa6>
					{
						vTaskSuspendAll();
 807051c:	f7ff fb3a 	bl	806fb94 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8070520:	697b      	ldr	r3, [r7, #20]
 8070522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8070524:	2b00      	cmp	r3, #0
 8070526:	d002      	beq.n	807052e <vTaskGetInfo+0x92>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 8070528:	68bb      	ldr	r3, [r7, #8]
 807052a:	2202      	movs	r2, #2
 807052c:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 807052e:	f7ff fb3f 	bl	806fbb0 <xTaskResumeAll>
 8070532:	e006      	b.n	8070542 <vTaskGetInfo+0xa6>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8070534:	6978      	ldr	r0, [r7, #20]
 8070536:	f7ff f949 	bl	806f7cc <eTaskGetState>
 807053a:	4603      	mov	r3, r0
 807053c:	461a      	mov	r2, r3
 807053e:	68bb      	ldr	r3, [r7, #8]
 8070540:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 8070542:	687b      	ldr	r3, [r7, #4]
 8070544:	2b00      	cmp	r3, #0
 8070546:	d009      	beq.n	807055c <vTaskGetInfo+0xc0>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8070548:	697b      	ldr	r3, [r7, #20]
 807054a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 807054c:	4618      	mov	r0, r3
 807054e:	f000 f861 	bl	8070614 <prvTaskCheckFreeStackSpace>
 8070552:	4603      	mov	r3, r0
 8070554:	461a      	mov	r2, r3
 8070556:	68bb      	ldr	r3, [r7, #8]
 8070558:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 807055a:	e002      	b.n	8070562 <vTaskGetInfo+0xc6>
			pxTaskStatus->usStackHighWaterMark = 0;
 807055c:	68bb      	ldr	r3, [r7, #8]
 807055e:	2200      	movs	r2, #0
 8070560:	841a      	strh	r2, [r3, #32]
	}
 8070562:	bf00      	nop
 8070564:	3718      	adds	r7, #24
 8070566:	46bd      	mov	sp, r7
 8070568:	bd80      	pop	{r7, pc}
 807056a:	bf00      	nop
 807056c:	20015088 	.word	0x20015088

08070570 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 8070570:	b580      	push	{r7, lr}
 8070572:	b08a      	sub	sp, #40	@ 0x28
 8070574:	af00      	add	r7, sp, #0
 8070576:	60f8      	str	r0, [r7, #12]
 8070578:	60b9      	str	r1, [r7, #8]
 807057a:	4613      	mov	r3, r2
 807057c:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 807057e:	2300      	movs	r3, #0
 8070580:	627b      	str	r3, [r7, #36]	@ 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8070582:	68bb      	ldr	r3, [r7, #8]
 8070584:	681b      	ldr	r3, [r3, #0]
 8070586:	2b00      	cmp	r3, #0
 8070588:	d03f      	beq.n	807060a <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 807058a:	68bb      	ldr	r3, [r7, #8]
 807058c:	623b      	str	r3, [r7, #32]
 807058e:	6a3b      	ldr	r3, [r7, #32]
 8070590:	685b      	ldr	r3, [r3, #4]
 8070592:	685a      	ldr	r2, [r3, #4]
 8070594:	6a3b      	ldr	r3, [r7, #32]
 8070596:	605a      	str	r2, [r3, #4]
 8070598:	6a3b      	ldr	r3, [r7, #32]
 807059a:	685a      	ldr	r2, [r3, #4]
 807059c:	6a3b      	ldr	r3, [r7, #32]
 807059e:	3308      	adds	r3, #8
 80705a0:	429a      	cmp	r2, r3
 80705a2:	d104      	bne.n	80705ae <prvListTasksWithinSingleList+0x3e>
 80705a4:	6a3b      	ldr	r3, [r7, #32]
 80705a6:	685b      	ldr	r3, [r3, #4]
 80705a8:	685a      	ldr	r2, [r3, #4]
 80705aa:	6a3b      	ldr	r3, [r7, #32]
 80705ac:	605a      	str	r2, [r3, #4]
 80705ae:	6a3b      	ldr	r3, [r7, #32]
 80705b0:	685b      	ldr	r3, [r3, #4]
 80705b2:	68db      	ldr	r3, [r3, #12]
 80705b4:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80705b6:	68bb      	ldr	r3, [r7, #8]
 80705b8:	61bb      	str	r3, [r7, #24]
 80705ba:	69bb      	ldr	r3, [r7, #24]
 80705bc:	685b      	ldr	r3, [r3, #4]
 80705be:	685a      	ldr	r2, [r3, #4]
 80705c0:	69bb      	ldr	r3, [r7, #24]
 80705c2:	605a      	str	r2, [r3, #4]
 80705c4:	69bb      	ldr	r3, [r7, #24]
 80705c6:	685a      	ldr	r2, [r3, #4]
 80705c8:	69bb      	ldr	r3, [r7, #24]
 80705ca:	3308      	adds	r3, #8
 80705cc:	429a      	cmp	r2, r3
 80705ce:	d104      	bne.n	80705da <prvListTasksWithinSingleList+0x6a>
 80705d0:	69bb      	ldr	r3, [r7, #24]
 80705d2:	685b      	ldr	r3, [r3, #4]
 80705d4:	685a      	ldr	r2, [r3, #4]
 80705d6:	69bb      	ldr	r3, [r7, #24]
 80705d8:	605a      	str	r2, [r3, #4]
 80705da:	69bb      	ldr	r3, [r7, #24]
 80705dc:	685b      	ldr	r3, [r3, #4]
 80705de:	68db      	ldr	r3, [r3, #12]
 80705e0:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 80705e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80705e4:	4613      	mov	r3, r2
 80705e6:	00db      	lsls	r3, r3, #3
 80705e8:	4413      	add	r3, r2
 80705ea:	009b      	lsls	r3, r3, #2
 80705ec:	461a      	mov	r2, r3
 80705ee:	68fb      	ldr	r3, [r7, #12]
 80705f0:	1899      	adds	r1, r3, r2
 80705f2:	79fb      	ldrb	r3, [r7, #7]
 80705f4:	2201      	movs	r2, #1
 80705f6:	6978      	ldr	r0, [r7, #20]
 80705f8:	f7ff ff50 	bl	807049c <vTaskGetInfo>
				uxTask++;
 80705fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80705fe:	3301      	adds	r3, #1
 8070600:	627b      	str	r3, [r7, #36]	@ 0x24
			} while( pxNextTCB != pxFirstTCB );
 8070602:	697a      	ldr	r2, [r7, #20]
 8070604:	69fb      	ldr	r3, [r7, #28]
 8070606:	429a      	cmp	r2, r3
 8070608:	d1d5      	bne.n	80705b6 <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 807060a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 807060c:	4618      	mov	r0, r3
 807060e:	3728      	adds	r7, #40	@ 0x28
 8070610:	46bd      	mov	sp, r7
 8070612:	bd80      	pop	{r7, pc}

08070614 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8070614:	b480      	push	{r7}
 8070616:	b085      	sub	sp, #20
 8070618:	af00      	add	r7, sp, #0
 807061a:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 807061c:	2300      	movs	r3, #0
 807061e:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8070620:	e005      	b.n	807062e <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8070622:	687b      	ldr	r3, [r7, #4]
 8070624:	3301      	adds	r3, #1
 8070626:	607b      	str	r3, [r7, #4]
			ulCount++;
 8070628:	68fb      	ldr	r3, [r7, #12]
 807062a:	3301      	adds	r3, #1
 807062c:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 807062e:	687b      	ldr	r3, [r7, #4]
 8070630:	781b      	ldrb	r3, [r3, #0]
 8070632:	2ba5      	cmp	r3, #165	@ 0xa5
 8070634:	d0f5      	beq.n	8070622 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8070636:	68fb      	ldr	r3, [r7, #12]
 8070638:	089b      	lsrs	r3, r3, #2
 807063a:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 807063c:	68fb      	ldr	r3, [r7, #12]
 807063e:	b29b      	uxth	r3, r3
	}
 8070640:	4618      	mov	r0, r3
 8070642:	3714      	adds	r7, #20
 8070644:	46bd      	mov	sp, r7
 8070646:	f85d 7b04 	ldr.w	r7, [sp], #4
 807064a:	4770      	bx	lr

0807064c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 807064c:	b580      	push	{r7, lr}
 807064e:	b084      	sub	sp, #16
 8070650:	af00      	add	r7, sp, #0
 8070652:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8070654:	687b      	ldr	r3, [r7, #4]
 8070656:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 807065a:	4618      	mov	r0, r3
 807065c:	f000 fdf0 	bl	8071240 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8070660:	687b      	ldr	r3, [r7, #4]
 8070662:	f893 31a1 	ldrb.w	r3, [r3, #417]	@ 0x1a1
 8070666:	2b00      	cmp	r3, #0
 8070668:	d108      	bne.n	807067c <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 807066a:	687b      	ldr	r3, [r7, #4]
 807066c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 807066e:	4618      	mov	r0, r3
 8070670:	f7fd fdb8 	bl	806e1e4 <vPortFree>
				vPortFree( pxTCB );
 8070674:	6878      	ldr	r0, [r7, #4]
 8070676:	f7fd fdb5 	bl	806e1e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 807067a:	e019      	b.n	80706b0 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 807067c:	687b      	ldr	r3, [r7, #4]
 807067e:	f893 31a1 	ldrb.w	r3, [r3, #417]	@ 0x1a1
 8070682:	2b01      	cmp	r3, #1
 8070684:	d103      	bne.n	807068e <prvDeleteTCB+0x42>
				vPortFree( pxTCB );
 8070686:	6878      	ldr	r0, [r7, #4]
 8070688:	f7fd fdac 	bl	806e1e4 <vPortFree>
	}
 807068c:	e010      	b.n	80706b0 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 807068e:	687b      	ldr	r3, [r7, #4]
 8070690:	f893 31a1 	ldrb.w	r3, [r3, #417]	@ 0x1a1
 8070694:	2b02      	cmp	r3, #2
 8070696:	d00b      	beq.n	80706b0 <prvDeleteTCB+0x64>
	__asm volatile
 8070698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 807069c:	f383 8811 	msr	BASEPRI, r3
 80706a0:	f3bf 8f6f 	isb	sy
 80706a4:	f3bf 8f4f 	dsb	sy
 80706a8:	60fb      	str	r3, [r7, #12]
}
 80706aa:	bf00      	nop
 80706ac:	bf00      	nop
 80706ae:	e7fd      	b.n	80706ac <prvDeleteTCB+0x60>
	}
 80706b0:	bf00      	nop
 80706b2:	3710      	adds	r7, #16
 80706b4:	46bd      	mov	sp, r7
 80706b6:	bd80      	pop	{r7, pc}

080706b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80706b8:	b480      	push	{r7}
 80706ba:	b083      	sub	sp, #12
 80706bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80706be:	4b0c      	ldr	r3, [pc, #48]	@ (80706f0 <prvResetNextTaskUnblockTime+0x38>)
 80706c0:	681b      	ldr	r3, [r3, #0]
 80706c2:	681b      	ldr	r3, [r3, #0]
 80706c4:	2b00      	cmp	r3, #0
 80706c6:	d104      	bne.n	80706d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80706c8:	4b0a      	ldr	r3, [pc, #40]	@ (80706f4 <prvResetNextTaskUnblockTime+0x3c>)
 80706ca:	f04f 32ff 	mov.w	r2, #4294967295
 80706ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80706d0:	e008      	b.n	80706e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80706d2:	4b07      	ldr	r3, [pc, #28]	@ (80706f0 <prvResetNextTaskUnblockTime+0x38>)
 80706d4:	681b      	ldr	r3, [r3, #0]
 80706d6:	68db      	ldr	r3, [r3, #12]
 80706d8:	68db      	ldr	r3, [r3, #12]
 80706da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80706dc:	687b      	ldr	r3, [r7, #4]
 80706de:	685b      	ldr	r3, [r3, #4]
 80706e0:	4a04      	ldr	r2, [pc, #16]	@ (80706f4 <prvResetNextTaskUnblockTime+0x3c>)
 80706e2:	6013      	str	r3, [r2, #0]
}
 80706e4:	bf00      	nop
 80706e6:	370c      	adds	r7, #12
 80706e8:	46bd      	mov	sp, r7
 80706ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80706ee:	4770      	bx	lr
 80706f0:	20015514 	.word	0x20015514
 80706f4:	20015580 	.word	0x20015580

080706f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80706f8:	b480      	push	{r7}
 80706fa:	b083      	sub	sp, #12
 80706fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80706fe:	4b0b      	ldr	r3, [pc, #44]	@ (807072c <xTaskGetSchedulerState+0x34>)
 8070700:	681b      	ldr	r3, [r3, #0]
 8070702:	2b00      	cmp	r3, #0
 8070704:	d102      	bne.n	807070c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8070706:	2301      	movs	r3, #1
 8070708:	607b      	str	r3, [r7, #4]
 807070a:	e008      	b.n	807071e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 807070c:	4b08      	ldr	r3, [pc, #32]	@ (8070730 <xTaskGetSchedulerState+0x38>)
 807070e:	681b      	ldr	r3, [r3, #0]
 8070710:	2b00      	cmp	r3, #0
 8070712:	d102      	bne.n	807071a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8070714:	2302      	movs	r3, #2
 8070716:	607b      	str	r3, [r7, #4]
 8070718:	e001      	b.n	807071e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 807071a:	2300      	movs	r3, #0
 807071c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 807071e:	687b      	ldr	r3, [r7, #4]
	}
 8070720:	4618      	mov	r0, r3
 8070722:	370c      	adds	r7, #12
 8070724:	46bd      	mov	sp, r7
 8070726:	f85d 7b04 	ldr.w	r7, [sp], #4
 807072a:	4770      	bx	lr
 807072c:	2001556c 	.word	0x2001556c
 8070730:	20015588 	.word	0x20015588

08070734 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8070734:	b580      	push	{r7, lr}
 8070736:	b086      	sub	sp, #24
 8070738:	af00      	add	r7, sp, #0
 807073a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 807073c:	687b      	ldr	r3, [r7, #4]
 807073e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8070740:	2300      	movs	r3, #0
 8070742:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8070744:	687b      	ldr	r3, [r7, #4]
 8070746:	2b00      	cmp	r3, #0
 8070748:	d05e      	beq.n	8070808 <xTaskPriorityDisinherit+0xd4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 807074a:	4b32      	ldr	r3, [pc, #200]	@ (8070814 <xTaskPriorityDisinherit+0xe0>)
 807074c:	681b      	ldr	r3, [r3, #0]
 807074e:	693a      	ldr	r2, [r7, #16]
 8070750:	429a      	cmp	r2, r3
 8070752:	d00b      	beq.n	807076c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8070754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8070758:	f383 8811 	msr	BASEPRI, r3
 807075c:	f3bf 8f6f 	isb	sy
 8070760:	f3bf 8f4f 	dsb	sy
 8070764:	60fb      	str	r3, [r7, #12]
}
 8070766:	bf00      	nop
 8070768:	bf00      	nop
 807076a:	e7fd      	b.n	8070768 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 807076c:	693b      	ldr	r3, [r7, #16]
 807076e:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8070772:	2b00      	cmp	r3, #0
 8070774:	d10b      	bne.n	807078e <xTaskPriorityDisinherit+0x5a>
	__asm volatile
 8070776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 807077a:	f383 8811 	msr	BASEPRI, r3
 807077e:	f3bf 8f6f 	isb	sy
 8070782:	f3bf 8f4f 	dsb	sy
 8070786:	60bb      	str	r3, [r7, #8]
}
 8070788:	bf00      	nop
 807078a:	bf00      	nop
 807078c:	e7fd      	b.n	807078a <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 807078e:	693b      	ldr	r3, [r7, #16]
 8070790:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8070794:	1e5a      	subs	r2, r3, #1
 8070796:	693b      	ldr	r3, [r7, #16]
 8070798:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 807079c:	693b      	ldr	r3, [r7, #16]
 807079e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80707a0:	693b      	ldr	r3, [r7, #16]
 80707a2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80707a6:	429a      	cmp	r2, r3
 80707a8:	d02e      	beq.n	8070808 <xTaskPriorityDisinherit+0xd4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80707aa:	693b      	ldr	r3, [r7, #16]
 80707ac:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 80707b0:	2b00      	cmp	r3, #0
 80707b2:	d129      	bne.n	8070808 <xTaskPriorityDisinherit+0xd4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80707b4:	693b      	ldr	r3, [r7, #16]
 80707b6:	3304      	adds	r3, #4
 80707b8:	4618      	mov	r0, r3
 80707ba:	f7fd febd 	bl	806e538 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80707be:	693b      	ldr	r3, [r7, #16]
 80707c0:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 80707c4:	693b      	ldr	r3, [r7, #16]
 80707c6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80707c8:	693b      	ldr	r3, [r7, #16]
 80707ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80707cc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80707d0:	693b      	ldr	r3, [r7, #16]
 80707d2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80707d4:	693b      	ldr	r3, [r7, #16]
 80707d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80707d8:	4b0f      	ldr	r3, [pc, #60]	@ (8070818 <xTaskPriorityDisinherit+0xe4>)
 80707da:	681b      	ldr	r3, [r3, #0]
 80707dc:	429a      	cmp	r2, r3
 80707de:	d903      	bls.n	80707e8 <xTaskPriorityDisinherit+0xb4>
 80707e0:	693b      	ldr	r3, [r7, #16]
 80707e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80707e4:	4a0c      	ldr	r2, [pc, #48]	@ (8070818 <xTaskPriorityDisinherit+0xe4>)
 80707e6:	6013      	str	r3, [r2, #0]
 80707e8:	693b      	ldr	r3, [r7, #16]
 80707ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80707ec:	4613      	mov	r3, r2
 80707ee:	009b      	lsls	r3, r3, #2
 80707f0:	4413      	add	r3, r2
 80707f2:	009b      	lsls	r3, r3, #2
 80707f4:	4a09      	ldr	r2, [pc, #36]	@ (807081c <xTaskPriorityDisinherit+0xe8>)
 80707f6:	441a      	add	r2, r3
 80707f8:	693b      	ldr	r3, [r7, #16]
 80707fa:	3304      	adds	r3, #4
 80707fc:	4619      	mov	r1, r3
 80707fe:	4610      	mov	r0, r2
 8070800:	f7fd fe3d 	bl	806e47e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8070804:	2301      	movs	r3, #1
 8070806:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8070808:	697b      	ldr	r3, [r7, #20]
	}
 807080a:	4618      	mov	r0, r3
 807080c:	3718      	adds	r7, #24
 807080e:	46bd      	mov	sp, r7
 8070810:	bd80      	pop	{r7, pc}
 8070812:	bf00      	nop
 8070814:	20015088 	.word	0x20015088
 8070818:	20015568 	.word	0x20015568
 807081c:	2001508c 	.word	0x2001508c

08070820 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8070820:	b580      	push	{r7, lr}
 8070822:	b084      	sub	sp, #16
 8070824:	af00      	add	r7, sp, #0
 8070826:	6078      	str	r0, [r7, #4]
 8070828:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 807082a:	4b24      	ldr	r3, [pc, #144]	@ (80708bc <prvAddCurrentTaskToDelayedList+0x9c>)
 807082c:	681b      	ldr	r3, [r3, #0]
 807082e:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8070830:	4b23      	ldr	r3, [pc, #140]	@ (80708c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8070832:	681b      	ldr	r3, [r3, #0]
 8070834:	2200      	movs	r2, #0
 8070836:	f883 21a2 	strb.w	r2, [r3, #418]	@ 0x1a2
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 807083a:	4b21      	ldr	r3, [pc, #132]	@ (80708c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 807083c:	681b      	ldr	r3, [r3, #0]
 807083e:	3304      	adds	r3, #4
 8070840:	4618      	mov	r0, r3
 8070842:	f7fd fe79 	bl	806e538 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8070846:	687b      	ldr	r3, [r7, #4]
 8070848:	f1b3 3fff 	cmp.w	r3, #4294967295
 807084c:	d10a      	bne.n	8070864 <prvAddCurrentTaskToDelayedList+0x44>
 807084e:	683b      	ldr	r3, [r7, #0]
 8070850:	2b00      	cmp	r3, #0
 8070852:	d007      	beq.n	8070864 <prvAddCurrentTaskToDelayedList+0x44>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8070854:	4b1a      	ldr	r3, [pc, #104]	@ (80708c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8070856:	681b      	ldr	r3, [r3, #0]
 8070858:	3304      	adds	r3, #4
 807085a:	4619      	mov	r1, r3
 807085c:	4819      	ldr	r0, [pc, #100]	@ (80708c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 807085e:	f7fd fe0e 	bl	806e47e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8070862:	e026      	b.n	80708b2 <prvAddCurrentTaskToDelayedList+0x92>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8070864:	68fa      	ldr	r2, [r7, #12]
 8070866:	687b      	ldr	r3, [r7, #4]
 8070868:	4413      	add	r3, r2
 807086a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 807086c:	4b14      	ldr	r3, [pc, #80]	@ (80708c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 807086e:	681b      	ldr	r3, [r3, #0]
 8070870:	68ba      	ldr	r2, [r7, #8]
 8070872:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8070874:	68ba      	ldr	r2, [r7, #8]
 8070876:	68fb      	ldr	r3, [r7, #12]
 8070878:	429a      	cmp	r2, r3
 807087a:	d209      	bcs.n	8070890 <prvAddCurrentTaskToDelayedList+0x70>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 807087c:	4b12      	ldr	r3, [pc, #72]	@ (80708c8 <prvAddCurrentTaskToDelayedList+0xa8>)
 807087e:	681a      	ldr	r2, [r3, #0]
 8070880:	4b0f      	ldr	r3, [pc, #60]	@ (80708c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8070882:	681b      	ldr	r3, [r3, #0]
 8070884:	3304      	adds	r3, #4
 8070886:	4619      	mov	r1, r3
 8070888:	4610      	mov	r0, r2
 807088a:	f7fd fe1c 	bl	806e4c6 <vListInsert>
}
 807088e:	e010      	b.n	80708b2 <prvAddCurrentTaskToDelayedList+0x92>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8070890:	4b0e      	ldr	r3, [pc, #56]	@ (80708cc <prvAddCurrentTaskToDelayedList+0xac>)
 8070892:	681a      	ldr	r2, [r3, #0]
 8070894:	4b0a      	ldr	r3, [pc, #40]	@ (80708c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8070896:	681b      	ldr	r3, [r3, #0]
 8070898:	3304      	adds	r3, #4
 807089a:	4619      	mov	r1, r3
 807089c:	4610      	mov	r0, r2
 807089e:	f7fd fe12 	bl	806e4c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80708a2:	4b0b      	ldr	r3, [pc, #44]	@ (80708d0 <prvAddCurrentTaskToDelayedList+0xb0>)
 80708a4:	681b      	ldr	r3, [r3, #0]
 80708a6:	68ba      	ldr	r2, [r7, #8]
 80708a8:	429a      	cmp	r2, r3
 80708aa:	d202      	bcs.n	80708b2 <prvAddCurrentTaskToDelayedList+0x92>
					xNextTaskUnblockTime = xTimeToWake;
 80708ac:	4a08      	ldr	r2, [pc, #32]	@ (80708d0 <prvAddCurrentTaskToDelayedList+0xb0>)
 80708ae:	68bb      	ldr	r3, [r7, #8]
 80708b0:	6013      	str	r3, [r2, #0]
}
 80708b2:	bf00      	nop
 80708b4:	3710      	adds	r7, #16
 80708b6:	46bd      	mov	sp, r7
 80708b8:	bd80      	pop	{r7, pc}
 80708ba:	bf00      	nop
 80708bc:	20015564 	.word	0x20015564
 80708c0:	20015088 	.word	0x20015088
 80708c4:	20015548 	.word	0x20015548
 80708c8:	20015518 	.word	0x20015518
 80708cc:	20015514 	.word	0x20015514
 80708d0:	20015580 	.word	0x20015580

080708d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80708d4:	b580      	push	{r7, lr}
 80708d6:	b08a      	sub	sp, #40	@ 0x28
 80708d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80708da:	2300      	movs	r3, #0
 80708dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80708de:	f000 fbb1 	bl	8071044 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80708e2:	4b1d      	ldr	r3, [pc, #116]	@ (8070958 <xTimerCreateTimerTask+0x84>)
 80708e4:	681b      	ldr	r3, [r3, #0]
 80708e6:	2b00      	cmp	r3, #0
 80708e8:	d021      	beq.n	807092e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80708ea:	2300      	movs	r3, #0
 80708ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80708ee:	2300      	movs	r3, #0
 80708f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80708f2:	1d3a      	adds	r2, r7, #4
 80708f4:	f107 0108 	add.w	r1, r7, #8
 80708f8:	f107 030c 	add.w	r3, r7, #12
 80708fc:	4618      	mov	r0, r3
 80708fe:	f7fd fb83 	bl	806e008 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8070902:	6879      	ldr	r1, [r7, #4]
 8070904:	68bb      	ldr	r3, [r7, #8]
 8070906:	68fa      	ldr	r2, [r7, #12]
 8070908:	9202      	str	r2, [sp, #8]
 807090a:	9301      	str	r3, [sp, #4]
 807090c:	2337      	movs	r3, #55	@ 0x37
 807090e:	9300      	str	r3, [sp, #0]
 8070910:	2300      	movs	r3, #0
 8070912:	460a      	mov	r2, r1
 8070914:	4911      	ldr	r1, [pc, #68]	@ (807095c <xTimerCreateTimerTask+0x88>)
 8070916:	4812      	ldr	r0, [pc, #72]	@ (8070960 <xTimerCreateTimerTask+0x8c>)
 8070918:	f7fe fd82 	bl	806f420 <xTaskCreateStatic>
 807091c:	4603      	mov	r3, r0
 807091e:	4a11      	ldr	r2, [pc, #68]	@ (8070964 <xTimerCreateTimerTask+0x90>)
 8070920:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8070922:	4b10      	ldr	r3, [pc, #64]	@ (8070964 <xTimerCreateTimerTask+0x90>)
 8070924:	681b      	ldr	r3, [r3, #0]
 8070926:	2b00      	cmp	r3, #0
 8070928:	d001      	beq.n	807092e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 807092a:	2301      	movs	r3, #1
 807092c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 807092e:	697b      	ldr	r3, [r7, #20]
 8070930:	2b00      	cmp	r3, #0
 8070932:	d10b      	bne.n	807094c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8070934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8070938:	f383 8811 	msr	BASEPRI, r3
 807093c:	f3bf 8f6f 	isb	sy
 8070940:	f3bf 8f4f 	dsb	sy
 8070944:	613b      	str	r3, [r7, #16]
}
 8070946:	bf00      	nop
 8070948:	bf00      	nop
 807094a:	e7fd      	b.n	8070948 <xTimerCreateTimerTask+0x74>
	return xReturn;
 807094c:	697b      	ldr	r3, [r7, #20]
}
 807094e:	4618      	mov	r0, r3
 8070950:	3718      	adds	r7, #24
 8070952:	46bd      	mov	sp, r7
 8070954:	bd80      	pop	{r7, pc}
 8070956:	bf00      	nop
 8070958:	200155c4 	.word	0x200155c4
 807095c:	080719d0 	.word	0x080719d0
 8070960:	08070bdd 	.word	0x08070bdd
 8070964:	200155c8 	.word	0x200155c8

08070968 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8070968:	b580      	push	{r7, lr}
 807096a:	b088      	sub	sp, #32
 807096c:	af02      	add	r7, sp, #8
 807096e:	60f8      	str	r0, [r7, #12]
 8070970:	60b9      	str	r1, [r7, #8]
 8070972:	607a      	str	r2, [r7, #4]
 8070974:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8070976:	202c      	movs	r0, #44	@ 0x2c
 8070978:	f7fd fb60 	bl	806e03c <pvPortMalloc>
 807097c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 807097e:	697b      	ldr	r3, [r7, #20]
 8070980:	2b00      	cmp	r3, #0
 8070982:	d00d      	beq.n	80709a0 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8070984:	697b      	ldr	r3, [r7, #20]
 8070986:	2200      	movs	r2, #0
 8070988:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 807098c:	697b      	ldr	r3, [r7, #20]
 807098e:	9301      	str	r3, [sp, #4]
 8070990:	6a3b      	ldr	r3, [r7, #32]
 8070992:	9300      	str	r3, [sp, #0]
 8070994:	683b      	ldr	r3, [r7, #0]
 8070996:	687a      	ldr	r2, [r7, #4]
 8070998:	68b9      	ldr	r1, [r7, #8]
 807099a:	68f8      	ldr	r0, [r7, #12]
 807099c:	f000 f845 	bl	8070a2a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80709a0:	697b      	ldr	r3, [r7, #20]
	}
 80709a2:	4618      	mov	r0, r3
 80709a4:	3718      	adds	r7, #24
 80709a6:	46bd      	mov	sp, r7
 80709a8:	bd80      	pop	{r7, pc}

080709aa <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80709aa:	b580      	push	{r7, lr}
 80709ac:	b08a      	sub	sp, #40	@ 0x28
 80709ae:	af02      	add	r7, sp, #8
 80709b0:	60f8      	str	r0, [r7, #12]
 80709b2:	60b9      	str	r1, [r7, #8]
 80709b4:	607a      	str	r2, [r7, #4]
 80709b6:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80709b8:	232c      	movs	r3, #44	@ 0x2c
 80709ba:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80709bc:	693b      	ldr	r3, [r7, #16]
 80709be:	2b2c      	cmp	r3, #44	@ 0x2c
 80709c0:	d00b      	beq.n	80709da <xTimerCreateStatic+0x30>
	__asm volatile
 80709c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80709c6:	f383 8811 	msr	BASEPRI, r3
 80709ca:	f3bf 8f6f 	isb	sy
 80709ce:	f3bf 8f4f 	dsb	sy
 80709d2:	61bb      	str	r3, [r7, #24]
}
 80709d4:	bf00      	nop
 80709d6:	bf00      	nop
 80709d8:	e7fd      	b.n	80709d6 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80709da:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80709dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80709de:	2b00      	cmp	r3, #0
 80709e0:	d10b      	bne.n	80709fa <xTimerCreateStatic+0x50>
	__asm volatile
 80709e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80709e6:	f383 8811 	msr	BASEPRI, r3
 80709ea:	f3bf 8f6f 	isb	sy
 80709ee:	f3bf 8f4f 	dsb	sy
 80709f2:	617b      	str	r3, [r7, #20]
}
 80709f4:	bf00      	nop
 80709f6:	bf00      	nop
 80709f8:	e7fd      	b.n	80709f6 <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80709fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80709fc:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80709fe:	69fb      	ldr	r3, [r7, #28]
 8070a00:	2b00      	cmp	r3, #0
 8070a02:	d00d      	beq.n	8070a20 <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8070a04:	69fb      	ldr	r3, [r7, #28]
 8070a06:	2202      	movs	r2, #2
 8070a08:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8070a0c:	69fb      	ldr	r3, [r7, #28]
 8070a0e:	9301      	str	r3, [sp, #4]
 8070a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8070a12:	9300      	str	r3, [sp, #0]
 8070a14:	683b      	ldr	r3, [r7, #0]
 8070a16:	687a      	ldr	r2, [r7, #4]
 8070a18:	68b9      	ldr	r1, [r7, #8]
 8070a1a:	68f8      	ldr	r0, [r7, #12]
 8070a1c:	f000 f805 	bl	8070a2a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8070a20:	69fb      	ldr	r3, [r7, #28]
	}
 8070a22:	4618      	mov	r0, r3
 8070a24:	3720      	adds	r7, #32
 8070a26:	46bd      	mov	sp, r7
 8070a28:	bd80      	pop	{r7, pc}

08070a2a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8070a2a:	b580      	push	{r7, lr}
 8070a2c:	b086      	sub	sp, #24
 8070a2e:	af00      	add	r7, sp, #0
 8070a30:	60f8      	str	r0, [r7, #12]
 8070a32:	60b9      	str	r1, [r7, #8]
 8070a34:	607a      	str	r2, [r7, #4]
 8070a36:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8070a38:	68bb      	ldr	r3, [r7, #8]
 8070a3a:	2b00      	cmp	r3, #0
 8070a3c:	d10b      	bne.n	8070a56 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 8070a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8070a42:	f383 8811 	msr	BASEPRI, r3
 8070a46:	f3bf 8f6f 	isb	sy
 8070a4a:	f3bf 8f4f 	dsb	sy
 8070a4e:	617b      	str	r3, [r7, #20]
}
 8070a50:	bf00      	nop
 8070a52:	bf00      	nop
 8070a54:	e7fd      	b.n	8070a52 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8070a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8070a58:	2b00      	cmp	r3, #0
 8070a5a:	d01e      	beq.n	8070a9a <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8070a5c:	f000 faf2 	bl	8071044 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8070a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8070a62:	68fa      	ldr	r2, [r7, #12]
 8070a64:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8070a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8070a68:	68ba      	ldr	r2, [r7, #8]
 8070a6a:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8070a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8070a6e:	683a      	ldr	r2, [r7, #0]
 8070a70:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8070a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8070a74:	6a3a      	ldr	r2, [r7, #32]
 8070a76:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8070a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8070a7a:	3304      	adds	r3, #4
 8070a7c:	4618      	mov	r0, r3
 8070a7e:	f7fd fcf1 	bl	806e464 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8070a82:	687b      	ldr	r3, [r7, #4]
 8070a84:	2b00      	cmp	r3, #0
 8070a86:	d008      	beq.n	8070a9a <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8070a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8070a8a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8070a8e:	f043 0304 	orr.w	r3, r3, #4
 8070a92:	b2da      	uxtb	r2, r3
 8070a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8070a96:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8070a9a:	bf00      	nop
 8070a9c:	3718      	adds	r7, #24
 8070a9e:	46bd      	mov	sp, r7
 8070aa0:	bd80      	pop	{r7, pc}
	...

08070aa4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8070aa4:	b580      	push	{r7, lr}
 8070aa6:	b08a      	sub	sp, #40	@ 0x28
 8070aa8:	af00      	add	r7, sp, #0
 8070aaa:	60f8      	str	r0, [r7, #12]
 8070aac:	60b9      	str	r1, [r7, #8]
 8070aae:	607a      	str	r2, [r7, #4]
 8070ab0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8070ab2:	2300      	movs	r3, #0
 8070ab4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8070ab6:	68fb      	ldr	r3, [r7, #12]
 8070ab8:	2b00      	cmp	r3, #0
 8070aba:	d10b      	bne.n	8070ad4 <xTimerGenericCommand+0x30>
	__asm volatile
 8070abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8070ac0:	f383 8811 	msr	BASEPRI, r3
 8070ac4:	f3bf 8f6f 	isb	sy
 8070ac8:	f3bf 8f4f 	dsb	sy
 8070acc:	623b      	str	r3, [r7, #32]
}
 8070ace:	bf00      	nop
 8070ad0:	bf00      	nop
 8070ad2:	e7fd      	b.n	8070ad0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8070ad4:	4b19      	ldr	r3, [pc, #100]	@ (8070b3c <xTimerGenericCommand+0x98>)
 8070ad6:	681b      	ldr	r3, [r3, #0]
 8070ad8:	2b00      	cmp	r3, #0
 8070ada:	d02a      	beq.n	8070b32 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8070adc:	68bb      	ldr	r3, [r7, #8]
 8070ade:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8070ae0:	687b      	ldr	r3, [r7, #4]
 8070ae2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8070ae4:	68fb      	ldr	r3, [r7, #12]
 8070ae6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8070ae8:	68bb      	ldr	r3, [r7, #8]
 8070aea:	2b05      	cmp	r3, #5
 8070aec:	dc18      	bgt.n	8070b20 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8070aee:	f7ff fe03 	bl	80706f8 <xTaskGetSchedulerState>
 8070af2:	4603      	mov	r3, r0
 8070af4:	2b02      	cmp	r3, #2
 8070af6:	d109      	bne.n	8070b0c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8070af8:	4b10      	ldr	r3, [pc, #64]	@ (8070b3c <xTimerGenericCommand+0x98>)
 8070afa:	6818      	ldr	r0, [r3, #0]
 8070afc:	f107 0110 	add.w	r1, r7, #16
 8070b00:	2300      	movs	r3, #0
 8070b02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8070b04:	f7fe f89c 	bl	806ec40 <xQueueGenericSend>
 8070b08:	6278      	str	r0, [r7, #36]	@ 0x24
 8070b0a:	e012      	b.n	8070b32 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8070b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8070b3c <xTimerGenericCommand+0x98>)
 8070b0e:	6818      	ldr	r0, [r3, #0]
 8070b10:	f107 0110 	add.w	r1, r7, #16
 8070b14:	2300      	movs	r3, #0
 8070b16:	2200      	movs	r2, #0
 8070b18:	f7fe f892 	bl	806ec40 <xQueueGenericSend>
 8070b1c:	6278      	str	r0, [r7, #36]	@ 0x24
 8070b1e:	e008      	b.n	8070b32 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8070b20:	4b06      	ldr	r3, [pc, #24]	@ (8070b3c <xTimerGenericCommand+0x98>)
 8070b22:	6818      	ldr	r0, [r3, #0]
 8070b24:	f107 0110 	add.w	r1, r7, #16
 8070b28:	2300      	movs	r3, #0
 8070b2a:	683a      	ldr	r2, [r7, #0]
 8070b2c:	f7fe f98a 	bl	806ee44 <xQueueGenericSendFromISR>
 8070b30:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8070b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8070b34:	4618      	mov	r0, r3
 8070b36:	3728      	adds	r7, #40	@ 0x28
 8070b38:	46bd      	mov	sp, r7
 8070b3a:	bd80      	pop	{r7, pc}
 8070b3c:	200155c4 	.word	0x200155c4

08070b40 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8070b40:	b580      	push	{r7, lr}
 8070b42:	b088      	sub	sp, #32
 8070b44:	af02      	add	r7, sp, #8
 8070b46:	6078      	str	r0, [r7, #4]
 8070b48:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8070b4a:	4b23      	ldr	r3, [pc, #140]	@ (8070bd8 <prvProcessExpiredTimer+0x98>)
 8070b4c:	681b      	ldr	r3, [r3, #0]
 8070b4e:	68db      	ldr	r3, [r3, #12]
 8070b50:	68db      	ldr	r3, [r3, #12]
 8070b52:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8070b54:	697b      	ldr	r3, [r7, #20]
 8070b56:	3304      	adds	r3, #4
 8070b58:	4618      	mov	r0, r3
 8070b5a:	f7fd fced 	bl	806e538 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8070b5e:	697b      	ldr	r3, [r7, #20]
 8070b60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8070b64:	f003 0304 	and.w	r3, r3, #4
 8070b68:	2b00      	cmp	r3, #0
 8070b6a:	d023      	beq.n	8070bb4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8070b6c:	697b      	ldr	r3, [r7, #20]
 8070b6e:	699a      	ldr	r2, [r3, #24]
 8070b70:	687b      	ldr	r3, [r7, #4]
 8070b72:	18d1      	adds	r1, r2, r3
 8070b74:	687b      	ldr	r3, [r7, #4]
 8070b76:	683a      	ldr	r2, [r7, #0]
 8070b78:	6978      	ldr	r0, [r7, #20]
 8070b7a:	f000 f8d5 	bl	8070d28 <prvInsertTimerInActiveList>
 8070b7e:	4603      	mov	r3, r0
 8070b80:	2b00      	cmp	r3, #0
 8070b82:	d020      	beq.n	8070bc6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8070b84:	2300      	movs	r3, #0
 8070b86:	9300      	str	r3, [sp, #0]
 8070b88:	2300      	movs	r3, #0
 8070b8a:	687a      	ldr	r2, [r7, #4]
 8070b8c:	2100      	movs	r1, #0
 8070b8e:	6978      	ldr	r0, [r7, #20]
 8070b90:	f7ff ff88 	bl	8070aa4 <xTimerGenericCommand>
 8070b94:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8070b96:	693b      	ldr	r3, [r7, #16]
 8070b98:	2b00      	cmp	r3, #0
 8070b9a:	d114      	bne.n	8070bc6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8070b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8070ba0:	f383 8811 	msr	BASEPRI, r3
 8070ba4:	f3bf 8f6f 	isb	sy
 8070ba8:	f3bf 8f4f 	dsb	sy
 8070bac:	60fb      	str	r3, [r7, #12]
}
 8070bae:	bf00      	nop
 8070bb0:	bf00      	nop
 8070bb2:	e7fd      	b.n	8070bb0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8070bb4:	697b      	ldr	r3, [r7, #20]
 8070bb6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8070bba:	f023 0301 	bic.w	r3, r3, #1
 8070bbe:	b2da      	uxtb	r2, r3
 8070bc0:	697b      	ldr	r3, [r7, #20]
 8070bc2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8070bc6:	697b      	ldr	r3, [r7, #20]
 8070bc8:	6a1b      	ldr	r3, [r3, #32]
 8070bca:	6978      	ldr	r0, [r7, #20]
 8070bcc:	4798      	blx	r3
}
 8070bce:	bf00      	nop
 8070bd0:	3718      	adds	r7, #24
 8070bd2:	46bd      	mov	sp, r7
 8070bd4:	bd80      	pop	{r7, pc}
 8070bd6:	bf00      	nop
 8070bd8:	200155bc 	.word	0x200155bc

08070bdc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8070bdc:	b580      	push	{r7, lr}
 8070bde:	b084      	sub	sp, #16
 8070be0:	af00      	add	r7, sp, #0
 8070be2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8070be4:	f107 0308 	add.w	r3, r7, #8
 8070be8:	4618      	mov	r0, r3
 8070bea:	f000 f859 	bl	8070ca0 <prvGetNextExpireTime>
 8070bee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8070bf0:	68bb      	ldr	r3, [r7, #8]
 8070bf2:	4619      	mov	r1, r3
 8070bf4:	68f8      	ldr	r0, [r7, #12]
 8070bf6:	f000 f805 	bl	8070c04 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8070bfa:	f000 f8d7 	bl	8070dac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8070bfe:	bf00      	nop
 8070c00:	e7f0      	b.n	8070be4 <prvTimerTask+0x8>
	...

08070c04 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8070c04:	b580      	push	{r7, lr}
 8070c06:	b084      	sub	sp, #16
 8070c08:	af00      	add	r7, sp, #0
 8070c0a:	6078      	str	r0, [r7, #4]
 8070c0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8070c0e:	f7fe ffc1 	bl	806fb94 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8070c12:	f107 0308 	add.w	r3, r7, #8
 8070c16:	4618      	mov	r0, r3
 8070c18:	f000 f866 	bl	8070ce8 <prvSampleTimeNow>
 8070c1c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8070c1e:	68bb      	ldr	r3, [r7, #8]
 8070c20:	2b00      	cmp	r3, #0
 8070c22:	d130      	bne.n	8070c86 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8070c24:	683b      	ldr	r3, [r7, #0]
 8070c26:	2b00      	cmp	r3, #0
 8070c28:	d10a      	bne.n	8070c40 <prvProcessTimerOrBlockTask+0x3c>
 8070c2a:	687a      	ldr	r2, [r7, #4]
 8070c2c:	68fb      	ldr	r3, [r7, #12]
 8070c2e:	429a      	cmp	r2, r3
 8070c30:	d806      	bhi.n	8070c40 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8070c32:	f7fe ffbd 	bl	806fbb0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8070c36:	68f9      	ldr	r1, [r7, #12]
 8070c38:	6878      	ldr	r0, [r7, #4]
 8070c3a:	f7ff ff81 	bl	8070b40 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8070c3e:	e024      	b.n	8070c8a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8070c40:	683b      	ldr	r3, [r7, #0]
 8070c42:	2b00      	cmp	r3, #0
 8070c44:	d008      	beq.n	8070c58 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8070c46:	4b13      	ldr	r3, [pc, #76]	@ (8070c94 <prvProcessTimerOrBlockTask+0x90>)
 8070c48:	681b      	ldr	r3, [r3, #0]
 8070c4a:	681b      	ldr	r3, [r3, #0]
 8070c4c:	2b00      	cmp	r3, #0
 8070c4e:	d101      	bne.n	8070c54 <prvProcessTimerOrBlockTask+0x50>
 8070c50:	2301      	movs	r3, #1
 8070c52:	e000      	b.n	8070c56 <prvProcessTimerOrBlockTask+0x52>
 8070c54:	2300      	movs	r3, #0
 8070c56:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8070c58:	4b0f      	ldr	r3, [pc, #60]	@ (8070c98 <prvProcessTimerOrBlockTask+0x94>)
 8070c5a:	6818      	ldr	r0, [r3, #0]
 8070c5c:	687a      	ldr	r2, [r7, #4]
 8070c5e:	68fb      	ldr	r3, [r7, #12]
 8070c60:	1ad3      	subs	r3, r2, r3
 8070c62:	683a      	ldr	r2, [r7, #0]
 8070c64:	4619      	mov	r1, r3
 8070c66:	f7fe fba7 	bl	806f3b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8070c6a:	f7fe ffa1 	bl	806fbb0 <xTaskResumeAll>
 8070c6e:	4603      	mov	r3, r0
 8070c70:	2b00      	cmp	r3, #0
 8070c72:	d10a      	bne.n	8070c8a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8070c74:	4b09      	ldr	r3, [pc, #36]	@ (8070c9c <prvProcessTimerOrBlockTask+0x98>)
 8070c76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8070c7a:	601a      	str	r2, [r3, #0]
 8070c7c:	f3bf 8f4f 	dsb	sy
 8070c80:	f3bf 8f6f 	isb	sy
}
 8070c84:	e001      	b.n	8070c8a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8070c86:	f7fe ff93 	bl	806fbb0 <xTaskResumeAll>
}
 8070c8a:	bf00      	nop
 8070c8c:	3710      	adds	r7, #16
 8070c8e:	46bd      	mov	sp, r7
 8070c90:	bd80      	pop	{r7, pc}
 8070c92:	bf00      	nop
 8070c94:	200155c0 	.word	0x200155c0
 8070c98:	200155c4 	.word	0x200155c4
 8070c9c:	e000ed04 	.word	0xe000ed04

08070ca0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8070ca0:	b480      	push	{r7}
 8070ca2:	b085      	sub	sp, #20
 8070ca4:	af00      	add	r7, sp, #0
 8070ca6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8070ca8:	4b0e      	ldr	r3, [pc, #56]	@ (8070ce4 <prvGetNextExpireTime+0x44>)
 8070caa:	681b      	ldr	r3, [r3, #0]
 8070cac:	681b      	ldr	r3, [r3, #0]
 8070cae:	2b00      	cmp	r3, #0
 8070cb0:	d101      	bne.n	8070cb6 <prvGetNextExpireTime+0x16>
 8070cb2:	2201      	movs	r2, #1
 8070cb4:	e000      	b.n	8070cb8 <prvGetNextExpireTime+0x18>
 8070cb6:	2200      	movs	r2, #0
 8070cb8:	687b      	ldr	r3, [r7, #4]
 8070cba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8070cbc:	687b      	ldr	r3, [r7, #4]
 8070cbe:	681b      	ldr	r3, [r3, #0]
 8070cc0:	2b00      	cmp	r3, #0
 8070cc2:	d105      	bne.n	8070cd0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8070cc4:	4b07      	ldr	r3, [pc, #28]	@ (8070ce4 <prvGetNextExpireTime+0x44>)
 8070cc6:	681b      	ldr	r3, [r3, #0]
 8070cc8:	68db      	ldr	r3, [r3, #12]
 8070cca:	681b      	ldr	r3, [r3, #0]
 8070ccc:	60fb      	str	r3, [r7, #12]
 8070cce:	e001      	b.n	8070cd4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8070cd0:	2300      	movs	r3, #0
 8070cd2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8070cd4:	68fb      	ldr	r3, [r7, #12]
}
 8070cd6:	4618      	mov	r0, r3
 8070cd8:	3714      	adds	r7, #20
 8070cda:	46bd      	mov	sp, r7
 8070cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8070ce0:	4770      	bx	lr
 8070ce2:	bf00      	nop
 8070ce4:	200155bc 	.word	0x200155bc

08070ce8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8070ce8:	b580      	push	{r7, lr}
 8070cea:	b084      	sub	sp, #16
 8070cec:	af00      	add	r7, sp, #0
 8070cee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8070cf0:	f7fe fffc 	bl	806fcec <xTaskGetTickCount>
 8070cf4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8070cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8070d24 <prvSampleTimeNow+0x3c>)
 8070cf8:	681b      	ldr	r3, [r3, #0]
 8070cfa:	68fa      	ldr	r2, [r7, #12]
 8070cfc:	429a      	cmp	r2, r3
 8070cfe:	d205      	bcs.n	8070d0c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8070d00:	f000 f93a 	bl	8070f78 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8070d04:	687b      	ldr	r3, [r7, #4]
 8070d06:	2201      	movs	r2, #1
 8070d08:	601a      	str	r2, [r3, #0]
 8070d0a:	e002      	b.n	8070d12 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8070d0c:	687b      	ldr	r3, [r7, #4]
 8070d0e:	2200      	movs	r2, #0
 8070d10:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8070d12:	4a04      	ldr	r2, [pc, #16]	@ (8070d24 <prvSampleTimeNow+0x3c>)
 8070d14:	68fb      	ldr	r3, [r7, #12]
 8070d16:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8070d18:	68fb      	ldr	r3, [r7, #12]
}
 8070d1a:	4618      	mov	r0, r3
 8070d1c:	3710      	adds	r7, #16
 8070d1e:	46bd      	mov	sp, r7
 8070d20:	bd80      	pop	{r7, pc}
 8070d22:	bf00      	nop
 8070d24:	200155cc 	.word	0x200155cc

08070d28 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8070d28:	b580      	push	{r7, lr}
 8070d2a:	b086      	sub	sp, #24
 8070d2c:	af00      	add	r7, sp, #0
 8070d2e:	60f8      	str	r0, [r7, #12]
 8070d30:	60b9      	str	r1, [r7, #8]
 8070d32:	607a      	str	r2, [r7, #4]
 8070d34:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8070d36:	2300      	movs	r3, #0
 8070d38:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8070d3a:	68fb      	ldr	r3, [r7, #12]
 8070d3c:	68ba      	ldr	r2, [r7, #8]
 8070d3e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8070d40:	68fb      	ldr	r3, [r7, #12]
 8070d42:	68fa      	ldr	r2, [r7, #12]
 8070d44:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8070d46:	68ba      	ldr	r2, [r7, #8]
 8070d48:	687b      	ldr	r3, [r7, #4]
 8070d4a:	429a      	cmp	r2, r3
 8070d4c:	d812      	bhi.n	8070d74 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8070d4e:	687a      	ldr	r2, [r7, #4]
 8070d50:	683b      	ldr	r3, [r7, #0]
 8070d52:	1ad2      	subs	r2, r2, r3
 8070d54:	68fb      	ldr	r3, [r7, #12]
 8070d56:	699b      	ldr	r3, [r3, #24]
 8070d58:	429a      	cmp	r2, r3
 8070d5a:	d302      	bcc.n	8070d62 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8070d5c:	2301      	movs	r3, #1
 8070d5e:	617b      	str	r3, [r7, #20]
 8070d60:	e01b      	b.n	8070d9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8070d62:	4b10      	ldr	r3, [pc, #64]	@ (8070da4 <prvInsertTimerInActiveList+0x7c>)
 8070d64:	681a      	ldr	r2, [r3, #0]
 8070d66:	68fb      	ldr	r3, [r7, #12]
 8070d68:	3304      	adds	r3, #4
 8070d6a:	4619      	mov	r1, r3
 8070d6c:	4610      	mov	r0, r2
 8070d6e:	f7fd fbaa 	bl	806e4c6 <vListInsert>
 8070d72:	e012      	b.n	8070d9a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8070d74:	687a      	ldr	r2, [r7, #4]
 8070d76:	683b      	ldr	r3, [r7, #0]
 8070d78:	429a      	cmp	r2, r3
 8070d7a:	d206      	bcs.n	8070d8a <prvInsertTimerInActiveList+0x62>
 8070d7c:	68ba      	ldr	r2, [r7, #8]
 8070d7e:	683b      	ldr	r3, [r7, #0]
 8070d80:	429a      	cmp	r2, r3
 8070d82:	d302      	bcc.n	8070d8a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8070d84:	2301      	movs	r3, #1
 8070d86:	617b      	str	r3, [r7, #20]
 8070d88:	e007      	b.n	8070d9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8070d8a:	4b07      	ldr	r3, [pc, #28]	@ (8070da8 <prvInsertTimerInActiveList+0x80>)
 8070d8c:	681a      	ldr	r2, [r3, #0]
 8070d8e:	68fb      	ldr	r3, [r7, #12]
 8070d90:	3304      	adds	r3, #4
 8070d92:	4619      	mov	r1, r3
 8070d94:	4610      	mov	r0, r2
 8070d96:	f7fd fb96 	bl	806e4c6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8070d9a:	697b      	ldr	r3, [r7, #20]
}
 8070d9c:	4618      	mov	r0, r3
 8070d9e:	3718      	adds	r7, #24
 8070da0:	46bd      	mov	sp, r7
 8070da2:	bd80      	pop	{r7, pc}
 8070da4:	200155c0 	.word	0x200155c0
 8070da8:	200155bc 	.word	0x200155bc

08070dac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8070dac:	b580      	push	{r7, lr}
 8070dae:	b08e      	sub	sp, #56	@ 0x38
 8070db0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8070db2:	e0ce      	b.n	8070f52 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8070db4:	687b      	ldr	r3, [r7, #4]
 8070db6:	2b00      	cmp	r3, #0
 8070db8:	da19      	bge.n	8070dee <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8070dba:	1d3b      	adds	r3, r7, #4
 8070dbc:	3304      	adds	r3, #4
 8070dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8070dc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8070dc2:	2b00      	cmp	r3, #0
 8070dc4:	d10b      	bne.n	8070dde <prvProcessReceivedCommands+0x32>
	__asm volatile
 8070dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8070dca:	f383 8811 	msr	BASEPRI, r3
 8070dce:	f3bf 8f6f 	isb	sy
 8070dd2:	f3bf 8f4f 	dsb	sy
 8070dd6:	61fb      	str	r3, [r7, #28]
}
 8070dd8:	bf00      	nop
 8070dda:	bf00      	nop
 8070ddc:	e7fd      	b.n	8070dda <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8070dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8070de0:	681b      	ldr	r3, [r3, #0]
 8070de2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8070de4:	6850      	ldr	r0, [r2, #4]
 8070de6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8070de8:	6892      	ldr	r2, [r2, #8]
 8070dea:	4611      	mov	r1, r2
 8070dec:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8070dee:	687b      	ldr	r3, [r7, #4]
 8070df0:	2b00      	cmp	r3, #0
 8070df2:	f2c0 80ae 	blt.w	8070f52 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8070df6:	68fb      	ldr	r3, [r7, #12]
 8070df8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8070dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8070dfc:	695b      	ldr	r3, [r3, #20]
 8070dfe:	2b00      	cmp	r3, #0
 8070e00:	d004      	beq.n	8070e0c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8070e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8070e04:	3304      	adds	r3, #4
 8070e06:	4618      	mov	r0, r3
 8070e08:	f7fd fb96 	bl	806e538 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8070e0c:	463b      	mov	r3, r7
 8070e0e:	4618      	mov	r0, r3
 8070e10:	f7ff ff6a 	bl	8070ce8 <prvSampleTimeNow>
 8070e14:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8070e16:	687b      	ldr	r3, [r7, #4]
 8070e18:	2b09      	cmp	r3, #9
 8070e1a:	f200 8097 	bhi.w	8070f4c <prvProcessReceivedCommands+0x1a0>
 8070e1e:	a201      	add	r2, pc, #4	@ (adr r2, 8070e24 <prvProcessReceivedCommands+0x78>)
 8070e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8070e24:	08070e4d 	.word	0x08070e4d
 8070e28:	08070e4d 	.word	0x08070e4d
 8070e2c:	08070e4d 	.word	0x08070e4d
 8070e30:	08070ec3 	.word	0x08070ec3
 8070e34:	08070ed7 	.word	0x08070ed7
 8070e38:	08070f23 	.word	0x08070f23
 8070e3c:	08070e4d 	.word	0x08070e4d
 8070e40:	08070e4d 	.word	0x08070e4d
 8070e44:	08070ec3 	.word	0x08070ec3
 8070e48:	08070ed7 	.word	0x08070ed7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8070e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8070e4e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8070e52:	f043 0301 	orr.w	r3, r3, #1
 8070e56:	b2da      	uxtb	r2, r3
 8070e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8070e5a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8070e5e:	68ba      	ldr	r2, [r7, #8]
 8070e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8070e62:	699b      	ldr	r3, [r3, #24]
 8070e64:	18d1      	adds	r1, r2, r3
 8070e66:	68bb      	ldr	r3, [r7, #8]
 8070e68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8070e6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8070e6c:	f7ff ff5c 	bl	8070d28 <prvInsertTimerInActiveList>
 8070e70:	4603      	mov	r3, r0
 8070e72:	2b00      	cmp	r3, #0
 8070e74:	d06c      	beq.n	8070f50 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8070e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8070e78:	6a1b      	ldr	r3, [r3, #32]
 8070e7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8070e7c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8070e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8070e80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8070e84:	f003 0304 	and.w	r3, r3, #4
 8070e88:	2b00      	cmp	r3, #0
 8070e8a:	d061      	beq.n	8070f50 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8070e8c:	68ba      	ldr	r2, [r7, #8]
 8070e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8070e90:	699b      	ldr	r3, [r3, #24]
 8070e92:	441a      	add	r2, r3
 8070e94:	2300      	movs	r3, #0
 8070e96:	9300      	str	r3, [sp, #0]
 8070e98:	2300      	movs	r3, #0
 8070e9a:	2100      	movs	r1, #0
 8070e9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8070e9e:	f7ff fe01 	bl	8070aa4 <xTimerGenericCommand>
 8070ea2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8070ea4:	6a3b      	ldr	r3, [r7, #32]
 8070ea6:	2b00      	cmp	r3, #0
 8070ea8:	d152      	bne.n	8070f50 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8070eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8070eae:	f383 8811 	msr	BASEPRI, r3
 8070eb2:	f3bf 8f6f 	isb	sy
 8070eb6:	f3bf 8f4f 	dsb	sy
 8070eba:	61bb      	str	r3, [r7, #24]
}
 8070ebc:	bf00      	nop
 8070ebe:	bf00      	nop
 8070ec0:	e7fd      	b.n	8070ebe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8070ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8070ec4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8070ec8:	f023 0301 	bic.w	r3, r3, #1
 8070ecc:	b2da      	uxtb	r2, r3
 8070ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8070ed0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8070ed4:	e03d      	b.n	8070f52 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8070ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8070ed8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8070edc:	f043 0301 	orr.w	r3, r3, #1
 8070ee0:	b2da      	uxtb	r2, r3
 8070ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8070ee4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8070ee8:	68ba      	ldr	r2, [r7, #8]
 8070eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8070eec:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8070eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8070ef0:	699b      	ldr	r3, [r3, #24]
 8070ef2:	2b00      	cmp	r3, #0
 8070ef4:	d10b      	bne.n	8070f0e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8070ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8070efa:	f383 8811 	msr	BASEPRI, r3
 8070efe:	f3bf 8f6f 	isb	sy
 8070f02:	f3bf 8f4f 	dsb	sy
 8070f06:	617b      	str	r3, [r7, #20]
}
 8070f08:	bf00      	nop
 8070f0a:	bf00      	nop
 8070f0c:	e7fd      	b.n	8070f0a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8070f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8070f10:	699a      	ldr	r2, [r3, #24]
 8070f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8070f14:	18d1      	adds	r1, r2, r3
 8070f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8070f18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8070f1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8070f1c:	f7ff ff04 	bl	8070d28 <prvInsertTimerInActiveList>
					break;
 8070f20:	e017      	b.n	8070f52 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8070f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8070f24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8070f28:	f003 0302 	and.w	r3, r3, #2
 8070f2c:	2b00      	cmp	r3, #0
 8070f2e:	d103      	bne.n	8070f38 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8070f30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8070f32:	f7fd f957 	bl	806e1e4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8070f36:	e00c      	b.n	8070f52 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8070f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8070f3a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8070f3e:	f023 0301 	bic.w	r3, r3, #1
 8070f42:	b2da      	uxtb	r2, r3
 8070f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8070f46:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8070f4a:	e002      	b.n	8070f52 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8070f4c:	bf00      	nop
 8070f4e:	e000      	b.n	8070f52 <prvProcessReceivedCommands+0x1a6>
					break;
 8070f50:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8070f52:	4b08      	ldr	r3, [pc, #32]	@ (8070f74 <prvProcessReceivedCommands+0x1c8>)
 8070f54:	681b      	ldr	r3, [r3, #0]
 8070f56:	1d39      	adds	r1, r7, #4
 8070f58:	2200      	movs	r2, #0
 8070f5a:	4618      	mov	r0, r3
 8070f5c:	f7fe f810 	bl	806ef80 <xQueueReceive>
 8070f60:	4603      	mov	r3, r0
 8070f62:	2b00      	cmp	r3, #0
 8070f64:	f47f af26 	bne.w	8070db4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8070f68:	bf00      	nop
 8070f6a:	bf00      	nop
 8070f6c:	3730      	adds	r7, #48	@ 0x30
 8070f6e:	46bd      	mov	sp, r7
 8070f70:	bd80      	pop	{r7, pc}
 8070f72:	bf00      	nop
 8070f74:	200155c4 	.word	0x200155c4

08070f78 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8070f78:	b580      	push	{r7, lr}
 8070f7a:	b088      	sub	sp, #32
 8070f7c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8070f7e:	e049      	b.n	8071014 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8070f80:	4b2e      	ldr	r3, [pc, #184]	@ (807103c <prvSwitchTimerLists+0xc4>)
 8070f82:	681b      	ldr	r3, [r3, #0]
 8070f84:	68db      	ldr	r3, [r3, #12]
 8070f86:	681b      	ldr	r3, [r3, #0]
 8070f88:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8070f8a:	4b2c      	ldr	r3, [pc, #176]	@ (807103c <prvSwitchTimerLists+0xc4>)
 8070f8c:	681b      	ldr	r3, [r3, #0]
 8070f8e:	68db      	ldr	r3, [r3, #12]
 8070f90:	68db      	ldr	r3, [r3, #12]
 8070f92:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8070f94:	68fb      	ldr	r3, [r7, #12]
 8070f96:	3304      	adds	r3, #4
 8070f98:	4618      	mov	r0, r3
 8070f9a:	f7fd facd 	bl	806e538 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8070f9e:	68fb      	ldr	r3, [r7, #12]
 8070fa0:	6a1b      	ldr	r3, [r3, #32]
 8070fa2:	68f8      	ldr	r0, [r7, #12]
 8070fa4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8070fa6:	68fb      	ldr	r3, [r7, #12]
 8070fa8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8070fac:	f003 0304 	and.w	r3, r3, #4
 8070fb0:	2b00      	cmp	r3, #0
 8070fb2:	d02f      	beq.n	8071014 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8070fb4:	68fb      	ldr	r3, [r7, #12]
 8070fb6:	699b      	ldr	r3, [r3, #24]
 8070fb8:	693a      	ldr	r2, [r7, #16]
 8070fba:	4413      	add	r3, r2
 8070fbc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8070fbe:	68ba      	ldr	r2, [r7, #8]
 8070fc0:	693b      	ldr	r3, [r7, #16]
 8070fc2:	429a      	cmp	r2, r3
 8070fc4:	d90e      	bls.n	8070fe4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8070fc6:	68fb      	ldr	r3, [r7, #12]
 8070fc8:	68ba      	ldr	r2, [r7, #8]
 8070fca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8070fcc:	68fb      	ldr	r3, [r7, #12]
 8070fce:	68fa      	ldr	r2, [r7, #12]
 8070fd0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8070fd2:	4b1a      	ldr	r3, [pc, #104]	@ (807103c <prvSwitchTimerLists+0xc4>)
 8070fd4:	681a      	ldr	r2, [r3, #0]
 8070fd6:	68fb      	ldr	r3, [r7, #12]
 8070fd8:	3304      	adds	r3, #4
 8070fda:	4619      	mov	r1, r3
 8070fdc:	4610      	mov	r0, r2
 8070fde:	f7fd fa72 	bl	806e4c6 <vListInsert>
 8070fe2:	e017      	b.n	8071014 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8070fe4:	2300      	movs	r3, #0
 8070fe6:	9300      	str	r3, [sp, #0]
 8070fe8:	2300      	movs	r3, #0
 8070fea:	693a      	ldr	r2, [r7, #16]
 8070fec:	2100      	movs	r1, #0
 8070fee:	68f8      	ldr	r0, [r7, #12]
 8070ff0:	f7ff fd58 	bl	8070aa4 <xTimerGenericCommand>
 8070ff4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8070ff6:	687b      	ldr	r3, [r7, #4]
 8070ff8:	2b00      	cmp	r3, #0
 8070ffa:	d10b      	bne.n	8071014 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8070ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8071000:	f383 8811 	msr	BASEPRI, r3
 8071004:	f3bf 8f6f 	isb	sy
 8071008:	f3bf 8f4f 	dsb	sy
 807100c:	603b      	str	r3, [r7, #0]
}
 807100e:	bf00      	nop
 8071010:	bf00      	nop
 8071012:	e7fd      	b.n	8071010 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8071014:	4b09      	ldr	r3, [pc, #36]	@ (807103c <prvSwitchTimerLists+0xc4>)
 8071016:	681b      	ldr	r3, [r3, #0]
 8071018:	681b      	ldr	r3, [r3, #0]
 807101a:	2b00      	cmp	r3, #0
 807101c:	d1b0      	bne.n	8070f80 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 807101e:	4b07      	ldr	r3, [pc, #28]	@ (807103c <prvSwitchTimerLists+0xc4>)
 8071020:	681b      	ldr	r3, [r3, #0]
 8071022:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8071024:	4b06      	ldr	r3, [pc, #24]	@ (8071040 <prvSwitchTimerLists+0xc8>)
 8071026:	681b      	ldr	r3, [r3, #0]
 8071028:	4a04      	ldr	r2, [pc, #16]	@ (807103c <prvSwitchTimerLists+0xc4>)
 807102a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 807102c:	4a04      	ldr	r2, [pc, #16]	@ (8071040 <prvSwitchTimerLists+0xc8>)
 807102e:	697b      	ldr	r3, [r7, #20]
 8071030:	6013      	str	r3, [r2, #0]
}
 8071032:	bf00      	nop
 8071034:	3718      	adds	r7, #24
 8071036:	46bd      	mov	sp, r7
 8071038:	bd80      	pop	{r7, pc}
 807103a:	bf00      	nop
 807103c:	200155bc 	.word	0x200155bc
 8071040:	200155c0 	.word	0x200155c0

08071044 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8071044:	b580      	push	{r7, lr}
 8071046:	b082      	sub	sp, #8
 8071048:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 807104a:	f7fd fbcd 	bl	806e7e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 807104e:	4b15      	ldr	r3, [pc, #84]	@ (80710a4 <prvCheckForValidListAndQueue+0x60>)
 8071050:	681b      	ldr	r3, [r3, #0]
 8071052:	2b00      	cmp	r3, #0
 8071054:	d120      	bne.n	8071098 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8071056:	4814      	ldr	r0, [pc, #80]	@ (80710a8 <prvCheckForValidListAndQueue+0x64>)
 8071058:	f7fd f9e4 	bl	806e424 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 807105c:	4813      	ldr	r0, [pc, #76]	@ (80710ac <prvCheckForValidListAndQueue+0x68>)
 807105e:	f7fd f9e1 	bl	806e424 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8071062:	4b13      	ldr	r3, [pc, #76]	@ (80710b0 <prvCheckForValidListAndQueue+0x6c>)
 8071064:	4a10      	ldr	r2, [pc, #64]	@ (80710a8 <prvCheckForValidListAndQueue+0x64>)
 8071066:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8071068:	4b12      	ldr	r3, [pc, #72]	@ (80710b4 <prvCheckForValidListAndQueue+0x70>)
 807106a:	4a10      	ldr	r2, [pc, #64]	@ (80710ac <prvCheckForValidListAndQueue+0x68>)
 807106c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 807106e:	2300      	movs	r3, #0
 8071070:	9300      	str	r3, [sp, #0]
 8071072:	4b11      	ldr	r3, [pc, #68]	@ (80710b8 <prvCheckForValidListAndQueue+0x74>)
 8071074:	4a11      	ldr	r2, [pc, #68]	@ (80710bc <prvCheckForValidListAndQueue+0x78>)
 8071076:	2110      	movs	r1, #16
 8071078:	2005      	movs	r0, #5
 807107a:	f7fd fd41 	bl	806eb00 <xQueueGenericCreateStatic>
 807107e:	4603      	mov	r3, r0
 8071080:	4a08      	ldr	r2, [pc, #32]	@ (80710a4 <prvCheckForValidListAndQueue+0x60>)
 8071082:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8071084:	4b07      	ldr	r3, [pc, #28]	@ (80710a4 <prvCheckForValidListAndQueue+0x60>)
 8071086:	681b      	ldr	r3, [r3, #0]
 8071088:	2b00      	cmp	r3, #0
 807108a:	d005      	beq.n	8071098 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 807108c:	4b05      	ldr	r3, [pc, #20]	@ (80710a4 <prvCheckForValidListAndQueue+0x60>)
 807108e:	681b      	ldr	r3, [r3, #0]
 8071090:	490b      	ldr	r1, [pc, #44]	@ (80710c0 <prvCheckForValidListAndQueue+0x7c>)
 8071092:	4618      	mov	r0, r3
 8071094:	f7fe f966 	bl	806f364 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8071098:	f7fd fbd8 	bl	806e84c <vPortExitCritical>
}
 807109c:	bf00      	nop
 807109e:	46bd      	mov	sp, r7
 80710a0:	bd80      	pop	{r7, pc}
 80710a2:	bf00      	nop
 80710a4:	200155c4 	.word	0x200155c4
 80710a8:	20015594 	.word	0x20015594
 80710ac:	200155a8 	.word	0x200155a8
 80710b0:	200155bc 	.word	0x200155bc
 80710b4:	200155c0 	.word	0x200155c0
 80710b8:	20015620 	.word	0x20015620
 80710bc:	200155d0 	.word	0x200155d0
 80710c0:	080719d8 	.word	0x080719d8

080710c4 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80710c4:	b580      	push	{r7, lr}
 80710c6:	b086      	sub	sp, #24
 80710c8:	af00      	add	r7, sp, #0
 80710ca:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 80710cc:	687b      	ldr	r3, [r7, #4]
 80710ce:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80710d0:	687b      	ldr	r3, [r7, #4]
 80710d2:	2b00      	cmp	r3, #0
 80710d4:	d10b      	bne.n	80710ee <pvTimerGetTimerID+0x2a>
	__asm volatile
 80710d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80710da:	f383 8811 	msr	BASEPRI, r3
 80710de:	f3bf 8f6f 	isb	sy
 80710e2:	f3bf 8f4f 	dsb	sy
 80710e6:	60fb      	str	r3, [r7, #12]
}
 80710e8:	bf00      	nop
 80710ea:	bf00      	nop
 80710ec:	e7fd      	b.n	80710ea <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 80710ee:	f7fd fb7b 	bl	806e7e8 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80710f2:	697b      	ldr	r3, [r7, #20]
 80710f4:	69db      	ldr	r3, [r3, #28]
 80710f6:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80710f8:	f7fd fba8 	bl	806e84c <vPortExitCritical>

	return pvReturn;
 80710fc:	693b      	ldr	r3, [r7, #16]
}
 80710fe:	4618      	mov	r0, r3
 8071100:	3718      	adds	r7, #24
 8071102:	46bd      	mov	sp, r7
 8071104:	bd80      	pop	{r7, pc}

08071106 <atoi>:
 8071106:	220a      	movs	r2, #10
 8071108:	2100      	movs	r1, #0
 807110a:	f000 b887 	b.w	807121c <strtol>
	...

08071110 <__malloc_lock>:
 8071110:	4801      	ldr	r0, [pc, #4]	@ (8071118 <__malloc_lock+0x8>)
 8071112:	f7f5 be98 	b.w	8066e46 <__retarget_lock_acquire_recursive>
 8071116:	bf00      	nop
 8071118:	20010e04 	.word	0x20010e04

0807111c <__malloc_unlock>:
 807111c:	4801      	ldr	r0, [pc, #4]	@ (8071124 <__malloc_unlock+0x8>)
 807111e:	f7f5 bea7 	b.w	8066e70 <__retarget_lock_release_recursive>
 8071122:	bf00      	nop
 8071124:	20010e04 	.word	0x20010e04

08071128 <_strtol_l.constprop.0>:
 8071128:	2b24      	cmp	r3, #36	@ 0x24
 807112a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 807112e:	4686      	mov	lr, r0
 8071130:	4690      	mov	r8, r2
 8071132:	d801      	bhi.n	8071138 <_strtol_l.constprop.0+0x10>
 8071134:	2b01      	cmp	r3, #1
 8071136:	d106      	bne.n	8071146 <_strtol_l.constprop.0+0x1e>
 8071138:	f000 f8d8 	bl	80712ec <__errno>
 807113c:	2316      	movs	r3, #22
 807113e:	6003      	str	r3, [r0, #0]
 8071140:	2000      	movs	r0, #0
 8071142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8071146:	4834      	ldr	r0, [pc, #208]	@ (8071218 <_strtol_l.constprop.0+0xf0>)
 8071148:	460d      	mov	r5, r1
 807114a:	462a      	mov	r2, r5
 807114c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8071150:	5d06      	ldrb	r6, [r0, r4]
 8071152:	f016 0608 	ands.w	r6, r6, #8
 8071156:	d1f8      	bne.n	807114a <_strtol_l.constprop.0+0x22>
 8071158:	2c2d      	cmp	r4, #45	@ 0x2d
 807115a:	d12d      	bne.n	80711b8 <_strtol_l.constprop.0+0x90>
 807115c:	782c      	ldrb	r4, [r5, #0]
 807115e:	2601      	movs	r6, #1
 8071160:	1c95      	adds	r5, r2, #2
 8071162:	f033 0210 	bics.w	r2, r3, #16
 8071166:	d109      	bne.n	807117c <_strtol_l.constprop.0+0x54>
 8071168:	2c30      	cmp	r4, #48	@ 0x30
 807116a:	d12a      	bne.n	80711c2 <_strtol_l.constprop.0+0x9a>
 807116c:	782a      	ldrb	r2, [r5, #0]
 807116e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8071172:	2a58      	cmp	r2, #88	@ 0x58
 8071174:	d125      	bne.n	80711c2 <_strtol_l.constprop.0+0x9a>
 8071176:	786c      	ldrb	r4, [r5, #1]
 8071178:	2310      	movs	r3, #16
 807117a:	3502      	adds	r5, #2
 807117c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8071180:	f10c 3cff 	add.w	ip, ip, #4294967295
 8071184:	2200      	movs	r2, #0
 8071186:	fbbc f9f3 	udiv	r9, ip, r3
 807118a:	4610      	mov	r0, r2
 807118c:	fb03 ca19 	mls	sl, r3, r9, ip
 8071190:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8071194:	2f09      	cmp	r7, #9
 8071196:	d81b      	bhi.n	80711d0 <_strtol_l.constprop.0+0xa8>
 8071198:	463c      	mov	r4, r7
 807119a:	42a3      	cmp	r3, r4
 807119c:	dd27      	ble.n	80711ee <_strtol_l.constprop.0+0xc6>
 807119e:	1c57      	adds	r7, r2, #1
 80711a0:	d007      	beq.n	80711b2 <_strtol_l.constprop.0+0x8a>
 80711a2:	4581      	cmp	r9, r0
 80711a4:	d320      	bcc.n	80711e8 <_strtol_l.constprop.0+0xc0>
 80711a6:	d101      	bne.n	80711ac <_strtol_l.constprop.0+0x84>
 80711a8:	45a2      	cmp	sl, r4
 80711aa:	db1d      	blt.n	80711e8 <_strtol_l.constprop.0+0xc0>
 80711ac:	fb00 4003 	mla	r0, r0, r3, r4
 80711b0:	2201      	movs	r2, #1
 80711b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80711b6:	e7eb      	b.n	8071190 <_strtol_l.constprop.0+0x68>
 80711b8:	2c2b      	cmp	r4, #43	@ 0x2b
 80711ba:	bf04      	itt	eq
 80711bc:	782c      	ldrbeq	r4, [r5, #0]
 80711be:	1c95      	addeq	r5, r2, #2
 80711c0:	e7cf      	b.n	8071162 <_strtol_l.constprop.0+0x3a>
 80711c2:	2b00      	cmp	r3, #0
 80711c4:	d1da      	bne.n	807117c <_strtol_l.constprop.0+0x54>
 80711c6:	2c30      	cmp	r4, #48	@ 0x30
 80711c8:	bf0c      	ite	eq
 80711ca:	2308      	moveq	r3, #8
 80711cc:	230a      	movne	r3, #10
 80711ce:	e7d5      	b.n	807117c <_strtol_l.constprop.0+0x54>
 80711d0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80711d4:	2f19      	cmp	r7, #25
 80711d6:	d801      	bhi.n	80711dc <_strtol_l.constprop.0+0xb4>
 80711d8:	3c37      	subs	r4, #55	@ 0x37
 80711da:	e7de      	b.n	807119a <_strtol_l.constprop.0+0x72>
 80711dc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80711e0:	2f19      	cmp	r7, #25
 80711e2:	d804      	bhi.n	80711ee <_strtol_l.constprop.0+0xc6>
 80711e4:	3c57      	subs	r4, #87	@ 0x57
 80711e6:	e7d8      	b.n	807119a <_strtol_l.constprop.0+0x72>
 80711e8:	f04f 32ff 	mov.w	r2, #4294967295
 80711ec:	e7e1      	b.n	80711b2 <_strtol_l.constprop.0+0x8a>
 80711ee:	1c53      	adds	r3, r2, #1
 80711f0:	d108      	bne.n	8071204 <_strtol_l.constprop.0+0xdc>
 80711f2:	2322      	movs	r3, #34	@ 0x22
 80711f4:	f8ce 3000 	str.w	r3, [lr]
 80711f8:	4660      	mov	r0, ip
 80711fa:	f1b8 0f00 	cmp.w	r8, #0
 80711fe:	d0a0      	beq.n	8071142 <_strtol_l.constprop.0+0x1a>
 8071200:	1e69      	subs	r1, r5, #1
 8071202:	e006      	b.n	8071212 <_strtol_l.constprop.0+0xea>
 8071204:	b106      	cbz	r6, 8071208 <_strtol_l.constprop.0+0xe0>
 8071206:	4240      	negs	r0, r0
 8071208:	f1b8 0f00 	cmp.w	r8, #0
 807120c:	d099      	beq.n	8071142 <_strtol_l.constprop.0+0x1a>
 807120e:	2a00      	cmp	r2, #0
 8071210:	d1f6      	bne.n	8071200 <_strtol_l.constprop.0+0xd8>
 8071212:	f8c8 1000 	str.w	r1, [r8]
 8071216:	e794      	b.n	8071142 <_strtol_l.constprop.0+0x1a>
 8071218:	08071aed 	.word	0x08071aed

0807121c <strtol>:
 807121c:	4613      	mov	r3, r2
 807121e:	460a      	mov	r2, r1
 8071220:	4601      	mov	r1, r0
 8071222:	4802      	ldr	r0, [pc, #8]	@ (807122c <strtol+0x10>)
 8071224:	6800      	ldr	r0, [r0, #0]
 8071226:	f7ff bf7f 	b.w	8071128 <_strtol_l.constprop.0>
 807122a:	bf00      	nop
 807122c:	20010130 	.word	0x20010130

08071230 <memset>:
 8071230:	4402      	add	r2, r0
 8071232:	4603      	mov	r3, r0
 8071234:	4293      	cmp	r3, r2
 8071236:	d100      	bne.n	807123a <memset+0xa>
 8071238:	4770      	bx	lr
 807123a:	f803 1b01 	strb.w	r1, [r3], #1
 807123e:	e7f9      	b.n	8071234 <memset+0x4>

08071240 <_reclaim_reent>:
 8071240:	4b29      	ldr	r3, [pc, #164]	@ (80712e8 <_reclaim_reent+0xa8>)
 8071242:	681b      	ldr	r3, [r3, #0]
 8071244:	4283      	cmp	r3, r0
 8071246:	b570      	push	{r4, r5, r6, lr}
 8071248:	4604      	mov	r4, r0
 807124a:	d04b      	beq.n	80712e4 <_reclaim_reent+0xa4>
 807124c:	69c3      	ldr	r3, [r0, #28]
 807124e:	b1ab      	cbz	r3, 807127c <_reclaim_reent+0x3c>
 8071250:	68db      	ldr	r3, [r3, #12]
 8071252:	b16b      	cbz	r3, 8071270 <_reclaim_reent+0x30>
 8071254:	2500      	movs	r5, #0
 8071256:	69e3      	ldr	r3, [r4, #28]
 8071258:	68db      	ldr	r3, [r3, #12]
 807125a:	5959      	ldr	r1, [r3, r5]
 807125c:	2900      	cmp	r1, #0
 807125e:	d13b      	bne.n	80712d8 <_reclaim_reent+0x98>
 8071260:	3504      	adds	r5, #4
 8071262:	2d80      	cmp	r5, #128	@ 0x80
 8071264:	d1f7      	bne.n	8071256 <_reclaim_reent+0x16>
 8071266:	69e3      	ldr	r3, [r4, #28]
 8071268:	4620      	mov	r0, r4
 807126a:	68d9      	ldr	r1, [r3, #12]
 807126c:	f000 f876 	bl	807135c <_free_r>
 8071270:	69e3      	ldr	r3, [r4, #28]
 8071272:	6819      	ldr	r1, [r3, #0]
 8071274:	b111      	cbz	r1, 807127c <_reclaim_reent+0x3c>
 8071276:	4620      	mov	r0, r4
 8071278:	f000 f870 	bl	807135c <_free_r>
 807127c:	6961      	ldr	r1, [r4, #20]
 807127e:	b111      	cbz	r1, 8071286 <_reclaim_reent+0x46>
 8071280:	4620      	mov	r0, r4
 8071282:	f000 f86b 	bl	807135c <_free_r>
 8071286:	69e1      	ldr	r1, [r4, #28]
 8071288:	b111      	cbz	r1, 8071290 <_reclaim_reent+0x50>
 807128a:	4620      	mov	r0, r4
 807128c:	f000 f866 	bl	807135c <_free_r>
 8071290:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8071292:	b111      	cbz	r1, 807129a <_reclaim_reent+0x5a>
 8071294:	4620      	mov	r0, r4
 8071296:	f000 f861 	bl	807135c <_free_r>
 807129a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 807129c:	b111      	cbz	r1, 80712a4 <_reclaim_reent+0x64>
 807129e:	4620      	mov	r0, r4
 80712a0:	f000 f85c 	bl	807135c <_free_r>
 80712a4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80712a6:	b111      	cbz	r1, 80712ae <_reclaim_reent+0x6e>
 80712a8:	4620      	mov	r0, r4
 80712aa:	f000 f857 	bl	807135c <_free_r>
 80712ae:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80712b0:	b111      	cbz	r1, 80712b8 <_reclaim_reent+0x78>
 80712b2:	4620      	mov	r0, r4
 80712b4:	f000 f852 	bl	807135c <_free_r>
 80712b8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80712ba:	b111      	cbz	r1, 80712c2 <_reclaim_reent+0x82>
 80712bc:	4620      	mov	r0, r4
 80712be:	f000 f84d 	bl	807135c <_free_r>
 80712c2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80712c4:	b111      	cbz	r1, 80712cc <_reclaim_reent+0x8c>
 80712c6:	4620      	mov	r0, r4
 80712c8:	f000 f848 	bl	807135c <_free_r>
 80712cc:	6a23      	ldr	r3, [r4, #32]
 80712ce:	b14b      	cbz	r3, 80712e4 <_reclaim_reent+0xa4>
 80712d0:	4620      	mov	r0, r4
 80712d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80712d6:	4718      	bx	r3
 80712d8:	680e      	ldr	r6, [r1, #0]
 80712da:	4620      	mov	r0, r4
 80712dc:	f000 f83e 	bl	807135c <_free_r>
 80712e0:	4631      	mov	r1, r6
 80712e2:	e7bb      	b.n	807125c <_reclaim_reent+0x1c>
 80712e4:	bd70      	pop	{r4, r5, r6, pc}
 80712e6:	bf00      	nop
 80712e8:	20010130 	.word	0x20010130

080712ec <__errno>:
 80712ec:	4b01      	ldr	r3, [pc, #4]	@ (80712f4 <__errno+0x8>)
 80712ee:	6818      	ldr	r0, [r3, #0]
 80712f0:	4770      	bx	lr
 80712f2:	bf00      	nop
 80712f4:	20010130 	.word	0x20010130

080712f8 <__libc_init_array>:
 80712f8:	b570      	push	{r4, r5, r6, lr}
 80712fa:	4d0d      	ldr	r5, [pc, #52]	@ (8071330 <__libc_init_array+0x38>)
 80712fc:	4c0d      	ldr	r4, [pc, #52]	@ (8071334 <__libc_init_array+0x3c>)
 80712fe:	1b64      	subs	r4, r4, r5
 8071300:	10a4      	asrs	r4, r4, #2
 8071302:	2600      	movs	r6, #0
 8071304:	42a6      	cmp	r6, r4
 8071306:	d109      	bne.n	807131c <__libc_init_array+0x24>
 8071308:	4d0b      	ldr	r5, [pc, #44]	@ (8071338 <__libc_init_array+0x40>)
 807130a:	4c0c      	ldr	r4, [pc, #48]	@ (807133c <__libc_init_array+0x44>)
 807130c:	f000 f870 	bl	80713f0 <_init>
 8071310:	1b64      	subs	r4, r4, r5
 8071312:	10a4      	asrs	r4, r4, #2
 8071314:	2600      	movs	r6, #0
 8071316:	42a6      	cmp	r6, r4
 8071318:	d105      	bne.n	8071326 <__libc_init_array+0x2e>
 807131a:	bd70      	pop	{r4, r5, r6, pc}
 807131c:	f855 3b04 	ldr.w	r3, [r5], #4
 8071320:	4798      	blx	r3
 8071322:	3601      	adds	r6, #1
 8071324:	e7ee      	b.n	8071304 <__libc_init_array+0xc>
 8071326:	f855 3b04 	ldr.w	r3, [r5], #4
 807132a:	4798      	blx	r3
 807132c:	3601      	adds	r6, #1
 807132e:	e7f2      	b.n	8071316 <__libc_init_array+0x1e>
 8071330:	08071bf8 	.word	0x08071bf8
 8071334:	08071bf8 	.word	0x08071bf8
 8071338:	08071bf8 	.word	0x08071bf8
 807133c:	08071bfc 	.word	0x08071bfc

08071340 <memcpy>:
 8071340:	440a      	add	r2, r1
 8071342:	4291      	cmp	r1, r2
 8071344:	f100 33ff 	add.w	r3, r0, #4294967295
 8071348:	d100      	bne.n	807134c <memcpy+0xc>
 807134a:	4770      	bx	lr
 807134c:	b510      	push	{r4, lr}
 807134e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8071352:	f803 4f01 	strb.w	r4, [r3, #1]!
 8071356:	4291      	cmp	r1, r2
 8071358:	d1f9      	bne.n	807134e <memcpy+0xe>
 807135a:	bd10      	pop	{r4, pc}

0807135c <_free_r>:
 807135c:	b538      	push	{r3, r4, r5, lr}
 807135e:	4605      	mov	r5, r0
 8071360:	2900      	cmp	r1, #0
 8071362:	d041      	beq.n	80713e8 <_free_r+0x8c>
 8071364:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8071368:	1f0c      	subs	r4, r1, #4
 807136a:	2b00      	cmp	r3, #0
 807136c:	bfb8      	it	lt
 807136e:	18e4      	addlt	r4, r4, r3
 8071370:	f7ff fece 	bl	8071110 <__malloc_lock>
 8071374:	4a1d      	ldr	r2, [pc, #116]	@ (80713ec <_free_r+0x90>)
 8071376:	6813      	ldr	r3, [r2, #0]
 8071378:	b933      	cbnz	r3, 8071388 <_free_r+0x2c>
 807137a:	6063      	str	r3, [r4, #4]
 807137c:	6014      	str	r4, [r2, #0]
 807137e:	4628      	mov	r0, r5
 8071380:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8071384:	f7ff beca 	b.w	807111c <__malloc_unlock>
 8071388:	42a3      	cmp	r3, r4
 807138a:	d908      	bls.n	807139e <_free_r+0x42>
 807138c:	6820      	ldr	r0, [r4, #0]
 807138e:	1821      	adds	r1, r4, r0
 8071390:	428b      	cmp	r3, r1
 8071392:	bf01      	itttt	eq
 8071394:	6819      	ldreq	r1, [r3, #0]
 8071396:	685b      	ldreq	r3, [r3, #4]
 8071398:	1809      	addeq	r1, r1, r0
 807139a:	6021      	streq	r1, [r4, #0]
 807139c:	e7ed      	b.n	807137a <_free_r+0x1e>
 807139e:	461a      	mov	r2, r3
 80713a0:	685b      	ldr	r3, [r3, #4]
 80713a2:	b10b      	cbz	r3, 80713a8 <_free_r+0x4c>
 80713a4:	42a3      	cmp	r3, r4
 80713a6:	d9fa      	bls.n	807139e <_free_r+0x42>
 80713a8:	6811      	ldr	r1, [r2, #0]
 80713aa:	1850      	adds	r0, r2, r1
 80713ac:	42a0      	cmp	r0, r4
 80713ae:	d10b      	bne.n	80713c8 <_free_r+0x6c>
 80713b0:	6820      	ldr	r0, [r4, #0]
 80713b2:	4401      	add	r1, r0
 80713b4:	1850      	adds	r0, r2, r1
 80713b6:	4283      	cmp	r3, r0
 80713b8:	6011      	str	r1, [r2, #0]
 80713ba:	d1e0      	bne.n	807137e <_free_r+0x22>
 80713bc:	6818      	ldr	r0, [r3, #0]
 80713be:	685b      	ldr	r3, [r3, #4]
 80713c0:	6053      	str	r3, [r2, #4]
 80713c2:	4408      	add	r0, r1
 80713c4:	6010      	str	r0, [r2, #0]
 80713c6:	e7da      	b.n	807137e <_free_r+0x22>
 80713c8:	d902      	bls.n	80713d0 <_free_r+0x74>
 80713ca:	230c      	movs	r3, #12
 80713cc:	602b      	str	r3, [r5, #0]
 80713ce:	e7d6      	b.n	807137e <_free_r+0x22>
 80713d0:	6820      	ldr	r0, [r4, #0]
 80713d2:	1821      	adds	r1, r4, r0
 80713d4:	428b      	cmp	r3, r1
 80713d6:	bf04      	itt	eq
 80713d8:	6819      	ldreq	r1, [r3, #0]
 80713da:	685b      	ldreq	r3, [r3, #4]
 80713dc:	6063      	str	r3, [r4, #4]
 80713de:	bf04      	itt	eq
 80713e0:	1809      	addeq	r1, r1, r0
 80713e2:	6021      	streq	r1, [r4, #0]
 80713e4:	6054      	str	r4, [r2, #4]
 80713e6:	e7ca      	b.n	807137e <_free_r+0x22>
 80713e8:	bd38      	pop	{r3, r4, r5, pc}
 80713ea:	bf00      	nop
 80713ec:	20015670 	.word	0x20015670

080713f0 <_init>:
 80713f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80713f2:	bf00      	nop
 80713f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80713f6:	bc08      	pop	{r3}
 80713f8:	469e      	mov	lr, r3
 80713fa:	4770      	bx	lr

080713fc <_fini>:
 80713fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80713fe:	bf00      	nop
 8071400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8071402:	bc08      	pop	{r3}
 8071404:	469e      	mov	lr, r3
 8071406:	4770      	bx	lr
