/* START OF FILE */
/* INCLUDE START */
#include "Nvm.h"
#include "Dem.h"
#include "EcuM.h"
#include "Dcm.h"
#include "InputCtrl.h"
#include "ActCtrl.h"
#include "main.h"
#include <string.h>
/* INCLUDE END */
/* DEFINE START */
#define NVMBLOCK_DTC_START_ADDR 0x08010000
#define NVMBLOCK_DTC_END_ADDR 0x0801FFFF
#define NVMBLOCK_CALIBRATION_START_ADDR 0x08008000
#define NVMBLOCK_CALIBRATION_END_ADDR 0x0800BFFF
#define NVMBLOCK_CODING_START_ADDR 0x0800C000
#define NVMBLOCK_CODING_END_ADDR 0x0800FFFF
#define NVMBLOCK_DTC_SECTOR FLASH_SECTOR_4
#define NVMBLOCK_CALIBRATION_SECTOR FLASH_SECTOR_2
#define NVMBLOCK_CODING_SECTOR FLASH_SECTOR_3
#define NVMBLOCK_DTC_SIZE 15
/* DEFINE STOP */
/* TYPEDEF START */
typedef enum
{
	READALL,
	WRITEALL,
	PENDING,
	READY
}NvMState_t;
/* TYPEDEF END */
/* VARIABLES START */
static uint32 NvMBlockDefault_Calibration[NVMBLOCK_CALIBRATION_SIZE] =
{
		50, /* Ignition potentiometer calibration data. */
		255, /* Light sensor calibration data. */
		50, /* Gear-box potentiometer calibration data. */
		255, /* Rain sensor calibration data. */
		255, /* Param_ErrorSettingDebouceThreshold_Calibration */
		5, /* Param_UndervoltageThreshold_Calibration */
		25, /* Param_WindshieldWiperFast_Calibration */
		10, /* Param_WindshieldWiperSlow_Calibration */
		5 /* Param_DoorLockPwmIncrement */
};
static uint32 NvMBlockDefault_Coding[NVMBLOCK_CODING_SIZE] =
{
		2, /* HC-05 active */
		2, /* HC-05 ventilation */
		2, /* HC-05 light control */
		2, /* HC-05 remote start */
		2, /* Rain sensor */
		2, /* Light sensor */
		75, /* WindshieldWashing_CodingData */
		4 /* WashingWipingCounter_CodingData */
};
static uint32 NvM_MainCounter = 0;
static NvMState_t NvMState = READALL;
static uint8 NvM_ReadAll_Flag = 0;
static uint8 NvM_WriteAll_Flag = 0;
static uint32 NvMBlock_DemDTCArray[NVMBLOCK_DTC_SIZE];
uint32 NvMBlock_Calibration[NVMBLOCK_CALIBRATION_SIZE] = {0};
uint32 NvMBlock_Coding[NVMBLOCK_CODING_SIZE] = {0};
uint8 NvM_WriteFlag_Dtc = 0;
uint8 NvM_WriteFlag_Calibration = 0;
/* VARIABLES END */
/* FUNCTIONS START */
static void NvM_FlashReadData(uint32 StartSectorAddress, uint32 *RxBuf, uint16 numberofwords);
static uint32 NvM_FlashWriteData(uint32 StartSectorAddress, uint32 *Data, uint16 numberofwords, uint32 Sector);
void NvM_ReadAll(void);
void NvM_WriteAll(void);
void NvM_MainFunction(void);
/* FUNCTIONS END */
/* FUNCTIONS START */
void NvM_ReadAll(void)
{
	NvM_FlashReadData(NVMBLOCK_DTC_START_ADDR, (uint32*)NvMBlock_DemDTCArray, 13);
	NvM_FlashReadData(NVMBLOCK_CALIBRATION_START_ADDR, NvMBlock_Calibration, NVMBLOCK_CALIBRATION_SIZE);
	NvM_FlashReadData(NVMBLOCK_CODING_START_ADDR, NvMBlock_Coding, NVMBLOCK_CODING_SIZE);

	if(0xFFFFFFFF == NvMBlock_DemDTCArray[0]) memset(NvMBlock_DemDTCArray, 0, 13 * 4);
	else memcpy(Dem_DTCStoreArray, NvMBlock_DemDTCArray, 13 * 4);

	if(NvMBlock_Calibration[0] == 0xFFFFFFFF)
	{
		Param_Input_Calibration[0] = NvMBlockDefault_Calibration[0];
		Param_Input_Calibration[1] = NvMBlockDefault_Calibration[1];
		Param_Input_Calibration[2] = NvMBlockDefault_Calibration[2];
		Param_Input_Calibration[3] = NvMBlockDefault_Calibration[3];
		Param_ErrorSettingDebouceThreshold_Calibration = NvMBlockDefault_Calibration[4];
		Param_UndervoltageThreshold_Calibration = NvMBlockDefault_Calibration[5];
		Param_WindshieldWiperFast_Calibration = NvMBlockDefault_Calibration[6];
		Param_WindshieldWiperSlow_Calibration = NvMBlockDefault_Calibration[7];
		Param_DoorLockPwmIncrement = NvMBlockDefault_Calibration[8];
		for(uint8 i = 0; i < NVMBLOCK_CALIBRATION_SIZE; i++) Dcm_DiagnosticCalibrationData[i] = NvMBlockDefault_Calibration[i];
		NvM_FlashWriteData(NVMBLOCK_CALIBRATION_START_ADDR, NvMBlockDefault_Calibration, NVMBLOCK_CALIBRATION_SIZE, NVMBLOCK_CALIBRATION_SECTOR);
	}
	else
	{
		Param_Input_Calibration[0] = NvMBlock_Calibration[0];
		Param_Input_Calibration[1] = NvMBlock_Calibration[1];
		Param_Input_Calibration[2] = NvMBlock_Calibration[2];
		Param_Input_Calibration[3] = NvMBlock_Calibration[3];
		Param_Input_Calibration[4] = NvMBlock_Calibration[4];
		Param_Input_Calibration[5] = NvMBlock_Calibration[5];
		Param_Input_Calibration[6] = NvMBlock_Calibration[6];
		Param_Input_Calibration[7] = NvMBlock_Calibration[7];
		Param_Input_Calibration[8] = NvMBlock_Calibration[8];
		Param_Input_Calibration[9] = NvMBlock_Calibration[9];
		Param_DebouncePreviouState_Calibration = NvMBlock_Calibration[10];
		Param_OutofboundThreshold_Calibration = NvMBlock_Calibration[11];
		Param_ErrorSettingDebouceThreshold_Calibration = NvMBlock_Calibration[12];
		Param_UndervoltageThreshold_Calibration = NvMBlock_Calibration[13];
		Param_WindshieldWiperSlow_Calibration = NvMBlock_Calibration[14];
		Param_WindshieldWiperFast_Calibration = NvMBlock_Calibration[15];
		Param_DoorLockPwmIncrement = NvMBlock_Calibration[16];
		for(uint8 i = 0; i < NVMBLOCK_CALIBRATION_SIZE; i++) Dcm_DiagnosticCalibrationData[i] = NvMBlock_Calibration[i];
	}
	if(NvMBlock_Coding[0] == 0xFFFFFFFF)
	{
		for(uint8 i = 0; i < NVMBLOCK_CODING_SIZE - 2; i++) InputCtrl_CodingData[i] = NvMBlockDefault_Coding[i];
		WindshieldWashing_CodingData = NvMBlockDefault_Coding[8];
		WashingWipingCounter_CodingData = NvMBlockDefault_Coding[9];
		NvM_FlashWriteData(NVMBLOCK_CODING_START_ADDR, NvMBlockDefault_Coding, NVMBLOCK_CODING_SIZE, NVMBLOCK_CODING_SECTOR);
	}
	else
	{
		for(uint8 i = 0; i < NVMBLOCK_CODING_SIZE - 2; i++) InputCtrl_CodingData[i] = NvMBlock_Coding[i];
		WindshieldWashing_CodingData = NvMBlock_Coding[8];
		WashingWipingCounter_CodingData = NvMBlock_Coding[9];
	}
	NvM_ReadAll_Flag = 1;
}
void NvM_WriteAll(void)
{
	for(uint8 i = 0; i < NVMBLOCK_CALIBRATION_SIZE; i++)
	{
		if(Dcm_DiagnosticCalibrationData[i] != NvMBlock_Calibration[i])
		{
			NvM_WriteFlag_Calibration = 1;
			NvMBlock_Calibration[i] = Dcm_DiagnosticCalibrationData[i];
		}
		else
		{
			/* Do nothing. */
		}
	}

	if(NvM_WriteFlag_Calibration == 1)
	{
		NvM_WriteFlag_Calibration = 0;
		NvM_FlashWriteData(NVMBLOCK_CALIBRATION_START_ADDR, NvMBlock_Calibration, NVMBLOCK_CALIBRATION_SIZE, NVMBLOCK_CALIBRATION_SECTOR);
	}
	else
	{
		/* Do nothing. */
	}
	for(uint8 i = 0; i < NVMBLOCK_DTC_SIZE; i++)
	{
		if(NvMBlock_DemDTCArray[i] != Dem_DTCStoreArray[i])
		{
			NvM_WriteFlag_Dtc = 1;
			memcpy(NvMBlock_DemDTCArray, Dem_DTCStoreArray, 13);
		}
		else
		{
			/* Do nothing. */
		}
	}
	if(NvM_WriteFlag_Dtc == 1)
	{
		NvM_WriteFlag_Dtc = 0;
		NvM_FlashWriteData(NVMBLOCK_DTC_START_ADDR, (uint32*)NvMBlock_DemDTCArray, ((NVMBLOCK_DTC_SIZE * 28) / 4), NVMBLOCK_DTC_SECTOR);
	}
	else
	{
		/* Do nothing. */
	}
	NvM_WriteAll_Flag = 1;
}
void NvM_MainFunction(void)
{
	if(EcuM_State == POSTRUN && NvM_WriteAll_Flag == 0) NvMState = WRITEALL;
	else if(EcuM_State == RUN) NvM_WriteAll_Flag = 0;
	else
	{
		/* Do nothing. */
	}

	switch(NvMState)
	{
	case READALL:
		NvMState = PENDING;
		NvM_ReadAll();
		NvMState = READY;
		break;
	case WRITEALL:
		NvMState = PENDING;
		NvM_WriteAll();
		NvMState = READY;
		break;
	default:
		break;
	}
	NvM_MainCounter++;
}
static uint32 NvM_FlashWriteData(uint32 StartSectorAddress, uint32 *Data, uint16 numberofwords, uint32 Sector)
{
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32 SECTORError;
	uint32 sofar=0;
	uint32 StartSector = Sector;
	uint32 EndSector = Sector;
	HAL_FLASH_Unlock();
	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
	EraseInitStruct.Sector        = StartSector;
	EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
	if(HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK) return HAL_FLASH_GetError ();
	else
	{
		/* Do nothing. */
	}

	while(sofar < numberofwords)
	{
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, Data[sofar]) == HAL_OK)
		{
			StartSectorAddress += 4;
			sofar++;
		}
		else return HAL_FLASH_GetError ();
	}
	HAL_FLASH_Lock();
	return 0;
}
static void NvM_FlashReadData(uint32 StartSectorAddress, uint32 *RxBuf, uint16 numberofwords)
{
	for(uint16 i = 0; i < numberofwords; i++) RxBuf[i] = *(__IO uint32 *)(StartSectorAddress + (i * 4));
}
/* FUNCTIONS END */
/* STOP OF FILE */
