
CBM_FBL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cfc  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  08006e94  08006e94  00007e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007254  08007254  0000901c  2**0
                  CONTENTS
  4 .ARM          00000008  08007254  08007254  00008254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800725c  0800725c  0000901c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800725c  0800725c  0000825c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007260  08007260  00008260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20010000  08007264  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  2001001c  08007280  0000901c  2**2
                  ALLOC
 10 ._user_heap_stack 00000804  2001026c  08007280  0000926c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000901c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013c41  00000000  00000000  0000904c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002de9  00000000  00000000  0001cc8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  0001fa78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e7c  00000000  00000000  00020d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000174c2  00000000  00000000  00021b7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019620  00000000  00000000  0003903e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009241f  00000000  00000000  0005265e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e4a7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cd0  00000000  00000000  000e4ac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000e9790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2001001c 	.word	0x2001001c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006e7c 	.word	0x08006e7c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20010020 	.word	0x20010020
 80001d4:	08006e7c 	.word	0x08006e7c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b08a      	sub	sp, #40	@ 0x28
 80004cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ce:	f107 0314 	add.w	r3, r7, #20
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
 80004d8:	609a      	str	r2, [r3, #8]
 80004da:	60da      	str	r2, [r3, #12]
 80004dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004de:	2300      	movs	r3, #0
 80004e0:	613b      	str	r3, [r7, #16]
 80004e2:	4b47      	ldr	r3, [pc, #284]	@ (8000600 <MX_GPIO_Init+0x138>)
 80004e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004e6:	4a46      	ldr	r2, [pc, #280]	@ (8000600 <MX_GPIO_Init+0x138>)
 80004e8:	f043 0304 	orr.w	r3, r3, #4
 80004ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80004ee:	4b44      	ldr	r3, [pc, #272]	@ (8000600 <MX_GPIO_Init+0x138>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004f2:	f003 0304 	and.w	r3, r3, #4
 80004f6:	613b      	str	r3, [r7, #16]
 80004f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004fa:	2300      	movs	r3, #0
 80004fc:	60fb      	str	r3, [r7, #12]
 80004fe:	4b40      	ldr	r3, [pc, #256]	@ (8000600 <MX_GPIO_Init+0x138>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000502:	4a3f      	ldr	r2, [pc, #252]	@ (8000600 <MX_GPIO_Init+0x138>)
 8000504:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000508:	6313      	str	r3, [r2, #48]	@ 0x30
 800050a:	4b3d      	ldr	r3, [pc, #244]	@ (8000600 <MX_GPIO_Init+0x138>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800050e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000512:	60fb      	str	r3, [r7, #12]
 8000514:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000516:	2300      	movs	r3, #0
 8000518:	60bb      	str	r3, [r7, #8]
 800051a:	4b39      	ldr	r3, [pc, #228]	@ (8000600 <MX_GPIO_Init+0x138>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051e:	4a38      	ldr	r2, [pc, #224]	@ (8000600 <MX_GPIO_Init+0x138>)
 8000520:	f043 0301 	orr.w	r3, r3, #1
 8000524:	6313      	str	r3, [r2, #48]	@ 0x30
 8000526:	4b36      	ldr	r3, [pc, #216]	@ (8000600 <MX_GPIO_Init+0x138>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052a:	f003 0301 	and.w	r3, r3, #1
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000532:	2300      	movs	r3, #0
 8000534:	607b      	str	r3, [r7, #4]
 8000536:	4b32      	ldr	r3, [pc, #200]	@ (8000600 <MX_GPIO_Init+0x138>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053a:	4a31      	ldr	r2, [pc, #196]	@ (8000600 <MX_GPIO_Init+0x138>)
 800053c:	f043 0302 	orr.w	r3, r3, #2
 8000540:	6313      	str	r3, [r2, #48]	@ 0x30
 8000542:	4b2f      	ldr	r3, [pc, #188]	@ (8000600 <MX_GPIO_Init+0x138>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000546:	f003 0302 	and.w	r3, r3, #2
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800054e:	2300      	movs	r3, #0
 8000550:	603b      	str	r3, [r7, #0]
 8000552:	4b2b      	ldr	r3, [pc, #172]	@ (8000600 <MX_GPIO_Init+0x138>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000556:	4a2a      	ldr	r2, [pc, #168]	@ (8000600 <MX_GPIO_Init+0x138>)
 8000558:	f043 0308 	orr.w	r3, r3, #8
 800055c:	6313      	str	r3, [r2, #48]	@ 0x30
 800055e:	4b28      	ldr	r3, [pc, #160]	@ (8000600 <MX_GPIO_Init+0x138>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000562:	f003 0308 	and.w	r3, r3, #8
 8000566:	603b      	str	r3, [r7, #0]
 8000568:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 800056a:	2200      	movs	r2, #0
 800056c:	2110      	movs	r1, #16
 800056e:	4825      	ldr	r0, [pc, #148]	@ (8000604 <MX_GPIO_Init+0x13c>)
 8000570:	f003 f8fe 	bl	8003770 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC5
                           PC6 PC7 PC8 PC9
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8000574:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 8000578:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800057a:	2303      	movs	r3, #3
 800057c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057e:	2300      	movs	r3, #0
 8000580:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000582:	f107 0314 	add.w	r3, r7, #20
 8000586:	4619      	mov	r1, r3
 8000588:	481e      	ldr	r0, [pc, #120]	@ (8000604 <MX_GPIO_Init+0x13c>)
 800058a:	f002 fe59 	bl	8003240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA8 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800058e:	f649 131e 	movw	r3, #39198	@ 0x991e
 8000592:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000594:	2303      	movs	r3, #3
 8000596:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	2300      	movs	r3, #0
 800059a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800059c:	f107 0314 	add.w	r3, r7, #20
 80005a0:	4619      	mov	r1, r3
 80005a2:	4819      	ldr	r0, [pc, #100]	@ (8000608 <MX_GPIO_Init+0x140>)
 80005a4:	f002 fe4c 	bl	8003240 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80005a8:	2310      	movs	r3, #16
 80005aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ac:	2301      	movs	r3, #1
 80005ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b0:	2300      	movs	r3, #0
 80005b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b4:	2300      	movs	r3, #0
 80005b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005b8:	f107 0314 	add.w	r3, r7, #20
 80005bc:	4619      	mov	r1, r3
 80005be:	4811      	ldr	r0, [pc, #68]	@ (8000604 <MX_GPIO_Init+0x13c>)
 80005c0:	f002 fe3e 	bl	8003240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB12 PB13 PB14 PB15
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80005c4:	f24f 73ff 	movw	r3, #63487	@ 0xf7ff
 80005c8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005ca:	2303      	movs	r3, #3
 80005cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d2:	f107 0314 	add.w	r3, r7, #20
 80005d6:	4619      	mov	r1, r3
 80005d8:	480c      	ldr	r0, [pc, #48]	@ (800060c <MX_GPIO_Init+0x144>)
 80005da:	f002 fe31 	bl	8003240 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80005de:	2304      	movs	r3, #4
 80005e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005e2:	2303      	movs	r3, #3
 80005e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e6:	2300      	movs	r3, #0
 80005e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005ea:	f107 0314 	add.w	r3, r7, #20
 80005ee:	4619      	mov	r1, r3
 80005f0:	4807      	ldr	r0, [pc, #28]	@ (8000610 <MX_GPIO_Init+0x148>)
 80005f2:	f002 fe25 	bl	8003240 <HAL_GPIO_Init>

}
 80005f6:	bf00      	nop
 80005f8:	3728      	adds	r7, #40	@ 0x28
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40023800 	.word	0x40023800
 8000604:	40020800 	.word	0x40020800
 8000608:	40020000 	.word	0x40020000
 800060c:	40020400 	.word	0x40020400
 8000610:	40020c00 	.word	0x40020c00

08000614 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000618:	f3bf 8f4f 	dsb	sy
}
 800061c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800061e:	4b06      	ldr	r3, [pc, #24]	@ (8000638 <__NVIC_SystemReset+0x24>)
 8000620:	68db      	ldr	r3, [r3, #12]
 8000622:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000626:	4904      	ldr	r1, [pc, #16]	@ (8000638 <__NVIC_SystemReset+0x24>)
 8000628:	4b04      	ldr	r3, [pc, #16]	@ (800063c <__NVIC_SystemReset+0x28>)
 800062a:	4313      	orrs	r3, r2
 800062c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800062e:	f3bf 8f4f 	dsb	sy
}
 8000632:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000634:	bf00      	nop
 8000636:	e7fd      	b.n	8000634 <__NVIC_SystemReset+0x20>
 8000638:	e000ed00 	.word	0xe000ed00
 800063c:	05fa0004 	.word	0x05fa0004

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000646:	f001 ff8d 	bl	8002564 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064a:	f000 f8e7 	bl	800081c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064e:	f7ff ff3b 	bl	80004c8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000652:	f001 fd37 	bl	80020c4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000656:	f001 fee9 	bl	800242c <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800065a:	f000 f947 	bl	80008ec <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
	FBL_ProgrammingAddress = 0;
 800065e:	4b63      	ldr	r3, [pc, #396]	@ (80007ec <main+0x1ac>)
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
	FBL_ProgrammingIndex = 0;
 8000664:	4b62      	ldr	r3, [pc, #392]	@ (80007f0 <main+0x1b0>)
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
	FBL_CanSpi_Initialize();
 800066a:	f000 f973 	bl	8000954 <FBL_CanSpi_Initialize>
	FBL_NvM_FlashReadData(ROM_APPL_START_ADDR, &ROM_APPL_START_ADDR_storedValue, 1);
 800066e:	4b61      	ldr	r3, [pc, #388]	@ (80007f4 <main+0x1b4>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	2201      	movs	r2, #1
 8000674:	4960      	ldr	r1, [pc, #384]	@ (80007f8 <main+0x1b8>)
 8000676:	4618      	mov	r0, r3
 8000678:	f000 fe88 	bl	800138c <FBL_NvM_FlashReadData>
	if(ROM_APPL_START_ADDR_storedValue != 0xFFFFFFFF)
 800067c:	4b5e      	ldr	r3, [pc, #376]	@ (80007f8 <main+0x1b8>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000684:	d007      	beq.n	8000696 <main+0x56>
	{
		FBL_DSC_Pointer = (uint32*)(SESSIONSTATUS_ADDR);
 8000686:	4b5d      	ldr	r3, [pc, #372]	@ (80007fc <main+0x1bc>)
 8000688:	4a5d      	ldr	r2, [pc, #372]	@ (8000800 <main+0x1c0>)
 800068a:	601a      	str	r2, [r3, #0]
		FBL_DSC_Status = *FBL_DSC_Pointer;
 800068c:	4b5b      	ldr	r3, [pc, #364]	@ (80007fc <main+0x1bc>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4a5c      	ldr	r2, [pc, #368]	@ (8000804 <main+0x1c4>)
 8000694:	6013      	str	r3, [r2, #0]
	}
	else
	{
		/* Do nothing. */
	}
	if((FBL_DSC_Status == PROGRAMMING) || (FBL_DSC_Status == SOFTRESET) || (FBL_DSC_Status == HARDRESET) || (FBL_DSC_Status == CODING) || (FBL_DSC_Status == CALIBRATION)) FBL_DSC_State = FBL_DSC_Status;
 8000696:	4b5b      	ldr	r3, [pc, #364]	@ (8000804 <main+0x1c4>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	2b02      	cmp	r3, #2
 800069c:	d00f      	beq.n	80006be <main+0x7e>
 800069e:	4b59      	ldr	r3, [pc, #356]	@ (8000804 <main+0x1c4>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	2b06      	cmp	r3, #6
 80006a4:	d00b      	beq.n	80006be <main+0x7e>
 80006a6:	4b57      	ldr	r3, [pc, #348]	@ (8000804 <main+0x1c4>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	2b05      	cmp	r3, #5
 80006ac:	d007      	beq.n	80006be <main+0x7e>
 80006ae:	4b55      	ldr	r3, [pc, #340]	@ (8000804 <main+0x1c4>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	2b03      	cmp	r3, #3
 80006b4:	d003      	beq.n	80006be <main+0x7e>
 80006b6:	4b53      	ldr	r3, [pc, #332]	@ (8000804 <main+0x1c4>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	2b04      	cmp	r3, #4
 80006bc:	d105      	bne.n	80006ca <main+0x8a>
 80006be:	4b51      	ldr	r3, [pc, #324]	@ (8000804 <main+0x1c4>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	b2da      	uxtb	r2, r3
 80006c4:	4b50      	ldr	r3, [pc, #320]	@ (8000808 <main+0x1c8>)
 80006c6:	701a      	strb	r2, [r3, #0]
 80006c8:	e039      	b.n	800073e <main+0xfe>
	else
	{
		if(ROM_APPL_START_ADDR_storedValue != 0xFFFFFFFF)
 80006ca:	4b4b      	ldr	r3, [pc, #300]	@ (80007f8 <main+0x1b8>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006d2:	d034      	beq.n	800073e <main+0xfe>
		{
			if((RCC->CSR & RCC_CSR_PORRSTF) != 0)
 80006d4:	4b4d      	ldr	r3, [pc, #308]	@ (800080c <main+0x1cc>)
 80006d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80006d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d013      	beq.n	8000708 <main+0xc8>
			{
				for(uint32* addr = ((uint32_t*)0x2001FDA8); addr <= ((uint32_t*)0x2001FFFF); addr++) *addr = 0;
 80006e0:	4b47      	ldr	r3, [pc, #284]	@ (8000800 <main+0x1c0>)
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	e005      	b.n	80006f2 <main+0xb2>
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	3304      	adds	r3, #4
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4a46      	ldr	r2, [pc, #280]	@ (8000810 <main+0x1d0>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d9f5      	bls.n	80006e6 <main+0xa6>
				/* Reset the flag. */
				RCC->CSR |= RCC_CSR_PORRSTF;
 80006fa:	4b44      	ldr	r3, [pc, #272]	@ (800080c <main+0x1cc>)
 80006fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80006fe:	4a43      	ldr	r2, [pc, #268]	@ (800080c <main+0x1cc>)
 8000700:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000704:	6753      	str	r3, [r2, #116]	@ 0x74
 8000706:	e018      	b.n	800073a <main+0xfa>
			}/* Check if brown-out reset wake-up event occurred.*/
			else if((RCC->CSR & RCC_CSR_BORRSTF) != 0)
 8000708:	4b40      	ldr	r3, [pc, #256]	@ (800080c <main+0x1cc>)
 800070a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800070c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000710:	2b00      	cmp	r3, #0
 8000712:	d012      	beq.n	800073a <main+0xfa>
			{
				for(uint32* addr = ((uint32_t*)0x2001FDA8); addr <= ((uint32_t*)0x2001FFFF); addr++) *addr = 0;
 8000714:	4b3a      	ldr	r3, [pc, #232]	@ (8000800 <main+0x1c0>)
 8000716:	603b      	str	r3, [r7, #0]
 8000718:	e005      	b.n	8000726 <main+0xe6>
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	3304      	adds	r3, #4
 8000724:	603b      	str	r3, [r7, #0]
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	4a39      	ldr	r2, [pc, #228]	@ (8000810 <main+0x1d0>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d9f5      	bls.n	800071a <main+0xda>
				/* Reset the flag. */
				RCC->CSR |= RCC_CSR_BORRSTF;
 800072e:	4b37      	ldr	r3, [pc, #220]	@ (800080c <main+0x1cc>)
 8000730:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000732:	4a36      	ldr	r2, [pc, #216]	@ (800080c <main+0x1cc>)
 8000734:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000738:	6753      	str	r3, [r2, #116]	@ 0x74
			}
			else
			{
				/* Do nothing. */
			}
			FBL_JumpToAppl();
 800073a:	f001 f89d 	bl	8001878 <FBL_JumpToAppl>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		switch(FBL_DSC_State)
 800073e:	4b32      	ldr	r3, [pc, #200]	@ (8000808 <main+0x1c8>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	3b02      	subs	r3, #2
 8000744:	2b04      	cmp	r3, #4
 8000746:	d81c      	bhi.n	8000782 <main+0x142>
 8000748:	a201      	add	r2, pc, #4	@ (adr r2, 8000750 <main+0x110>)
 800074a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800074e:	bf00      	nop
 8000750:	08000771 	.word	0x08000771
 8000754:	08000765 	.word	0x08000765
 8000758:	0800076b 	.word	0x0800076b
 800075c:	08000777 	.word	0x08000777
 8000760:	0800077d 	.word	0x0800077d
		{
		case CODING:
			FBL_DiagRoutine_DSC_Coding();
 8000764:	f001 f8da 	bl	800191c <FBL_DiagRoutine_DSC_Coding>
			break;
 8000768:	e03f      	b.n	80007ea <main+0x1aa>
		case CALIBRATION:
			FBL_DiagRoutine_DSC_Calibration();
 800076a:	f001 f9f9 	bl	8001b60 <FBL_DiagRoutine_DSC_Calibration>
			break;
 800076e:	e03c      	b.n	80007ea <main+0x1aa>
		case PROGRAMMING:
			FBL_DiagRoutine_DSC_Programming();
 8000770:	f001 fb5e 	bl	8001e30 <FBL_DiagRoutine_DSC_Programming>
			break;
 8000774:	e039      	b.n	80007ea <main+0x1aa>
		case HARDRESET:
			FBL_DiagRoutine_ER_HardReset();
 8000776:	f001 f8b3 	bl	80018e0 <FBL_DiagRoutine_ER_HardReset>
			break;
 800077a:	e036      	b.n	80007ea <main+0x1aa>
		case SOFTRESET:
			FBL_DiagRoutine_ER_SoftReset();
 800077c:	f001 f8a4 	bl	80018c8 <FBL_DiagRoutine_ER_SoftReset>
			break;
 8000780:	e033      	b.n	80007ea <main+0x1aa>
		default:
			if(FBL_CanSpi_Receive(&FBL_RxFrame))
 8000782:	4824      	ldr	r0, [pc, #144]	@ (8000814 <main+0x1d4>)
 8000784:	f000 f9f8 	bl	8000b78 <FBL_CanSpi_Receive>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d02c      	beq.n	80007e8 <main+0x1a8>
			{
				if(FBL_RxFrame.frame.id == 0x700 && FBL_RxFrame.frame.data1 == 0x10 && FBL_RxFrame.frame.data2 == 0x02 && FBL_RxFrame.frame.data0 == 0x02)
 800078e:	4b21      	ldr	r3, [pc, #132]	@ (8000814 <main+0x1d4>)
 8000790:	685b      	ldr	r3, [r3, #4]
 8000792:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8000796:	d127      	bne.n	80007e8 <main+0x1a8>
 8000798:	4b1e      	ldr	r3, [pc, #120]	@ (8000814 <main+0x1d4>)
 800079a:	7a9b      	ldrb	r3, [r3, #10]
 800079c:	2b10      	cmp	r3, #16
 800079e:	d123      	bne.n	80007e8 <main+0x1a8>
 80007a0:	4b1c      	ldr	r3, [pc, #112]	@ (8000814 <main+0x1d4>)
 80007a2:	7adb      	ldrb	r3, [r3, #11]
 80007a4:	2b02      	cmp	r3, #2
 80007a6:	d11f      	bne.n	80007e8 <main+0x1a8>
 80007a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000814 <main+0x1d4>)
 80007aa:	7a5b      	ldrb	r3, [r3, #9]
 80007ac:	2b02      	cmp	r3, #2
 80007ae:	d11b      	bne.n	80007e8 <main+0x1a8>
				{
					FBL_TxFrame.frame.dlc = 3;
 80007b0:	4b19      	ldr	r3, [pc, #100]	@ (8000818 <main+0x1d8>)
 80007b2:	2203      	movs	r2, #3
 80007b4:	721a      	strb	r2, [r3, #8]
					FBL_TxFrame.frame.id = FBL_RxFrame.frame.id + 1;
 80007b6:	4b17      	ldr	r3, [pc, #92]	@ (8000814 <main+0x1d4>)
 80007b8:	685b      	ldr	r3, [r3, #4]
 80007ba:	3301      	adds	r3, #1
 80007bc:	4a16      	ldr	r2, [pc, #88]	@ (8000818 <main+0x1d8>)
 80007be:	6053      	str	r3, [r2, #4]
					FBL_TxFrame.frame.idType = 1;
 80007c0:	4b15      	ldr	r3, [pc, #84]	@ (8000818 <main+0x1d8>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	701a      	strb	r2, [r3, #0]
					FBL_TxFrame.frame.data0 = 0x02;
 80007c6:	4b14      	ldr	r3, [pc, #80]	@ (8000818 <main+0x1d8>)
 80007c8:	2202      	movs	r2, #2
 80007ca:	725a      	strb	r2, [r3, #9]
					FBL_TxFrame.frame.data1 = 0x50;
 80007cc:	4b12      	ldr	r3, [pc, #72]	@ (8000818 <main+0x1d8>)
 80007ce:	2250      	movs	r2, #80	@ 0x50
 80007d0:	729a      	strb	r2, [r3, #10]
					FBL_TxFrame.frame.data2 = 0x02;
 80007d2:	4b11      	ldr	r3, [pc, #68]	@ (8000818 <main+0x1d8>)
 80007d4:	2202      	movs	r2, #2
 80007d6:	72da      	strb	r2, [r3, #11]
					FBL_CanSpi_Transmit(&FBL_TxFrame);
 80007d8:	480f      	ldr	r0, [pc, #60]	@ (8000818 <main+0x1d8>)
 80007da:	f000 f955 	bl	8000a88 <FBL_CanSpi_Transmit>
					FBL_DSC_State = PROGRAMMING;
 80007de:	4b0a      	ldr	r3, [pc, #40]	@ (8000808 <main+0x1c8>)
 80007e0:	2202      	movs	r2, #2
 80007e2:	701a      	strb	r2, [r3, #0]
					FBL_DiagRoutine_DSC_Programming();
 80007e4:	f001 fb24 	bl	8001e30 <FBL_DiagRoutine_DSC_Programming>
			}
			else
			{
				/* Do nothing. */
			}
			break;
 80007e8:	bf00      	nop
		switch(FBL_DSC_State)
 80007ea:	e7a8      	b.n	800073e <main+0xfe>
 80007ec:	20010068 	.word	0x20010068
 80007f0:	20010064 	.word	0x20010064
 80007f4:	20010008 	.word	0x20010008
 80007f8:	2001006c 	.word	0x2001006c
 80007fc:	20010000 	.word	0x20010000
 8000800:	2001fda8 	.word	0x2001fda8
 8000804:	20010070 	.word	0x20010070
 8000808:	20010004 	.word	0x20010004
 800080c:	40023800 	.word	0x40023800
 8000810:	2001ffff 	.word	0x2001ffff
 8000814:	20010038 	.word	0x20010038
 8000818:	2001004c 	.word	0x2001004c

0800081c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b094      	sub	sp, #80	@ 0x50
 8000820:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000822:	f107 0320 	add.w	r3, r7, #32
 8000826:	2230      	movs	r2, #48	@ 0x30
 8000828:	2100      	movs	r1, #0
 800082a:	4618      	mov	r0, r3
 800082c:	f006 fafa 	bl	8006e24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000830:	f107 030c 	add.w	r3, r7, #12
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
 800083e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000840:	2300      	movs	r3, #0
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	4b27      	ldr	r3, [pc, #156]	@ (80008e4 <SystemClock_Config+0xc8>)
 8000846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000848:	4a26      	ldr	r2, [pc, #152]	@ (80008e4 <SystemClock_Config+0xc8>)
 800084a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800084e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000850:	4b24      	ldr	r3, [pc, #144]	@ (80008e4 <SystemClock_Config+0xc8>)
 8000852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000854:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800085c:	2300      	movs	r3, #0
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	4b21      	ldr	r3, [pc, #132]	@ (80008e8 <SystemClock_Config+0xcc>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a20      	ldr	r2, [pc, #128]	@ (80008e8 <SystemClock_Config+0xcc>)
 8000866:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800086a:	6013      	str	r3, [r2, #0]
 800086c:	4b1e      	ldr	r3, [pc, #120]	@ (80008e8 <SystemClock_Config+0xcc>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000878:	2301      	movs	r3, #1
 800087a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800087c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000880:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000882:	2302      	movs	r3, #2
 8000884:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000886:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800088a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800088c:	2304      	movs	r3, #4
 800088e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000890:	2364      	movs	r3, #100	@ 0x64
 8000892:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000894:	2302      	movs	r3, #2
 8000896:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000898:	2304      	movs	r3, #4
 800089a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089c:	f107 0320 	add.w	r3, r7, #32
 80008a0:	4618      	mov	r0, r3
 80008a2:	f002 ffab 	bl	80037fc <HAL_RCC_OscConfig>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008ac:	f001 fbfa 	bl	80020a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b0:	230f      	movs	r3, #15
 80008b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b4:	2302      	movs	r3, #2
 80008b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008c6:	f107 030c 	add.w	r3, r7, #12
 80008ca:	2103      	movs	r1, #3
 80008cc:	4618      	mov	r0, r3
 80008ce:	f003 fac1 	bl	8003e54 <HAL_RCC_ClockConfig>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80008d8:	f001 fbe4 	bl	80020a4 <Error_Handler>
  }
}
 80008dc:	bf00      	nop
 80008de:	3750      	adds	r7, #80	@ 0x50
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40007000 	.word	0x40007000

080008ec <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 80008f0:	2200      	movs	r2, #0
 80008f2:	2100      	movs	r1, #0
 80008f4:	2001      	movs	r0, #1
 80008f6:	f001 ff45 	bl	8002784 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 80008fa:	2001      	movs	r0, #1
 80008fc:	f001 ff6e 	bl	80027dc <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8000900:	2200      	movs	r2, #0
 8000902:	2100      	movs	r1, #0
 8000904:	2004      	movs	r0, #4
 8000906:	f001 ff3d 	bl	8002784 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 800090a:	2004      	movs	r0, #4
 800090c:	f001 ff66 	bl	80027dc <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000910:	2200      	movs	r2, #0
 8000912:	2100      	movs	r1, #0
 8000914:	2005      	movs	r0, #5
 8000916:	f001 ff35 	bl	8002784 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800091a:	2005      	movs	r0, #5
 800091c:	f001 ff5e 	bl	80027dc <HAL_NVIC_EnableIRQ>
  /* SPI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000920:	2200      	movs	r2, #0
 8000922:	2100      	movs	r1, #0
 8000924:	2023      	movs	r0, #35	@ 0x23
 8000926:	f001 ff2d 	bl	8002784 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800092a:	2023      	movs	r0, #35	@ 0x23
 800092c:	f001 ff56 	bl	80027dc <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000930:	2200      	movs	r2, #0
 8000932:	2100      	movs	r1, #0
 8000934:	2025      	movs	r0, #37	@ 0x25
 8000936:	f001 ff25 	bl	8002784 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800093a:	2025      	movs	r0, #37	@ 0x25
 800093c:	f001 ff4e 	bl	80027dc <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 8000940:	2200      	movs	r2, #0
 8000942:	2100      	movs	r1, #0
 8000944:	2051      	movs	r0, #81	@ 0x51
 8000946:	f001 ff1d 	bl	8002784 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 800094a:	2051      	movs	r0, #81	@ 0x51
 800094c:	f001 ff46 	bl	80027dc <HAL_NVIC_EnableIRQ>
}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}

08000954 <FBL_CanSpi_Initialize>:
	FBL_CanSpi_MCP2515_BitModify(FBL_CANSPI_MCP2515_CANINTF, 0x40, 0x00);
	FBL_CanSpi_MCP2515_BitModify(FBL_CANSPI_MCP2515_CANINTE, 0x40, 0x40);
	FBL_CanSpi_MCP2515_SetSleepMode();
}
uint8 FBL_CanSpi_Initialize(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b088      	sub	sp, #32
 8000958:	af00      	add	r7, sp, #0
	FBL_CanSpi_MCP2515_Reset();
 800095a:	f000 fad1 	bl	8000f00 <FBL_CanSpi_MCP2515_Reset>
	FBL_CANSPI_RXF3 FBL_RXF3reg;
	FBL_CANSPI_RXF4 FBL_RXF4reg;
	FBL_CANSPI_RXF5 FBL_RXF5reg;
	FBL_CANSPI_RXM0 FBL_RXM0reg;
	FBL_CANSPI_RXM1 FBL_RXM1reg;
	FBL_RXM0reg.RXM0SIDH = 0xFF;
 800095e:	23ff      	movs	r3, #255	@ 0xff
 8000960:	713b      	strb	r3, [r7, #4]
	FBL_RXM0reg.RXM0SIDL = 0xE0;
 8000962:	23e0      	movs	r3, #224	@ 0xe0
 8000964:	717b      	strb	r3, [r7, #5]
	FBL_RXM0reg.RXM0EID8 = 0x00;
 8000966:	2300      	movs	r3, #0
 8000968:	71bb      	strb	r3, [r7, #6]
	FBL_RXM0reg.RXM0EID0 = 0x00;
 800096a:	2300      	movs	r3, #0
 800096c:	71fb      	strb	r3, [r7, #7]
	FBL_RXM1reg.RXM1SIDH = 0x00;
 800096e:	2300      	movs	r3, #0
 8000970:	703b      	strb	r3, [r7, #0]
	FBL_RXM1reg.RXM1SIDL = 0x00;
 8000972:	2300      	movs	r3, #0
 8000974:	707b      	strb	r3, [r7, #1]
	FBL_RXM1reg.RXM1EID8 = 0x00;
 8000976:	2300      	movs	r3, #0
 8000978:	70bb      	strb	r3, [r7, #2]
	FBL_RXM1reg.RXM1EID0 = 0x00;
 800097a:	2300      	movs	r3, #0
 800097c:	70fb      	strb	r3, [r7, #3]
	FBL_RXF0reg.RXF0SIDH = (0x701 >> 3) & 0xFF;
 800097e:	23e0      	movs	r3, #224	@ 0xe0
 8000980:	773b      	strb	r3, [r7, #28]
	FBL_RXF0reg.RXF0SIDL = (0x701 << 5) & 0xE0;
 8000982:	2320      	movs	r3, #32
 8000984:	777b      	strb	r3, [r7, #29]
	FBL_RXF0reg.RXF0EID8 = 0x00;
 8000986:	2300      	movs	r3, #0
 8000988:	77bb      	strb	r3, [r7, #30]
	FBL_RXF0reg.RXF0EID0 = 0x00;
 800098a:	2300      	movs	r3, #0
 800098c:	77fb      	strb	r3, [r7, #31]
	FBL_RXF1reg.RXF1SIDH = 0x00;
 800098e:	2300      	movs	r3, #0
 8000990:	763b      	strb	r3, [r7, #24]
	FBL_RXF1reg.RXF1SIDL = 0x08;
 8000992:	2308      	movs	r3, #8
 8000994:	767b      	strb	r3, [r7, #25]
	FBL_RXF1reg.RXF1EID8 = 0x00;
 8000996:	2300      	movs	r3, #0
 8000998:	76bb      	strb	r3, [r7, #26]
	FBL_RXF1reg.RXF1EID0 = 0x00;
 800099a:	2300      	movs	r3, #0
 800099c:	76fb      	strb	r3, [r7, #27]
	FBL_RXF2reg.RXF2SIDH = 0x00;
 800099e:	2300      	movs	r3, #0
 80009a0:	753b      	strb	r3, [r7, #20]
	FBL_RXF2reg.RXF2SIDL = 0x00;
 80009a2:	2300      	movs	r3, #0
 80009a4:	757b      	strb	r3, [r7, #21]
	FBL_RXF2reg.RXF2EID8 = 0x00;
 80009a6:	2300      	movs	r3, #0
 80009a8:	75bb      	strb	r3, [r7, #22]
	FBL_RXF2reg.RXF2EID0 = 0x00;
 80009aa:	2300      	movs	r3, #0
 80009ac:	75fb      	strb	r3, [r7, #23]
	FBL_RXF3reg.RXF3SIDH = 0x00;
 80009ae:	2300      	movs	r3, #0
 80009b0:	743b      	strb	r3, [r7, #16]
	FBL_RXF3reg.RXF3SIDL = 0x00;
 80009b2:	2300      	movs	r3, #0
 80009b4:	747b      	strb	r3, [r7, #17]
	FBL_RXF3reg.RXF3EID8 = 0x00;
 80009b6:	2300      	movs	r3, #0
 80009b8:	74bb      	strb	r3, [r7, #18]
	FBL_RXF3reg.RXF3EID0 = 0x00;
 80009ba:	2300      	movs	r3, #0
 80009bc:	74fb      	strb	r3, [r7, #19]
	FBL_RXF4reg.RXF4SIDH = 0x00;
 80009be:	2300      	movs	r3, #0
 80009c0:	733b      	strb	r3, [r7, #12]
	FBL_RXF4reg.RXF4SIDL = 0x00;
 80009c2:	2300      	movs	r3, #0
 80009c4:	737b      	strb	r3, [r7, #13]
	FBL_RXF4reg.RXF4EID8 = 0x00;
 80009c6:	2300      	movs	r3, #0
 80009c8:	73bb      	strb	r3, [r7, #14]
	FBL_RXF4reg.RXF4EID0 = 0x00;
 80009ca:	2300      	movs	r3, #0
 80009cc:	73fb      	strb	r3, [r7, #15]
	FBL_RXF5reg.RXF5SIDH = 0x00;
 80009ce:	2300      	movs	r3, #0
 80009d0:	723b      	strb	r3, [r7, #8]
	FBL_RXF5reg.RXF5SIDL = 0x08;
 80009d2:	2308      	movs	r3, #8
 80009d4:	727b      	strb	r3, [r7, #9]
	FBL_RXF5reg.RXF5EID8 = 0x00;
 80009d6:	2300      	movs	r3, #0
 80009d8:	72bb      	strb	r3, [r7, #10]
	FBL_RXF5reg.RXF5EID0 = 0x00;
 80009da:	2300      	movs	r3, #0
 80009dc:	72fb      	strb	r3, [r7, #11]
	FBL_CanSpi_MCP2515_Initialize();
 80009de:	f000 fa31 	bl	8000e44 <FBL_CanSpi_MCP2515_Initialize>
	FBL_CanSpi_MCP2515_SetConfigMode();
 80009e2:	f000 fa51 	bl	8000e88 <FBL_CanSpi_MCP2515_SetConfigMode>
	FBL_CanSpi_MCP2515_WriteByteSequence(FBL_CANSPI_MCP2515_RXM0SIDH, FBL_CANSPI_MCP2515_RXM0EID0, &(FBL_RXM0reg.RXM0SIDH));
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	461a      	mov	r2, r3
 80009ea:	2123      	movs	r1, #35	@ 0x23
 80009ec:	2020      	movs	r0, #32
 80009ee:	f000 fb07 	bl	8001000 <FBL_CanSpi_MCP2515_WriteByteSequence>
	FBL_CanSpi_MCP2515_WriteByteSequence(FBL_CANSPI_MCP2515_RXM1SIDH, FBL_CANSPI_MCP2515_RXM1EID0, &(FBL_RXM1reg.RXM1SIDH));
 80009f2:	463b      	mov	r3, r7
 80009f4:	461a      	mov	r2, r3
 80009f6:	2127      	movs	r1, #39	@ 0x27
 80009f8:	2024      	movs	r0, #36	@ 0x24
 80009fa:	f000 fb01 	bl	8001000 <FBL_CanSpi_MCP2515_WriteByteSequence>
	FBL_CanSpi_MCP2515_WriteByteSequence(FBL_CANSPI_MCP2515_RXF0SIDH, FBL_CANSPI_MCP2515_RXF0EID0, &(FBL_RXF0reg.RXF0SIDH));
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	461a      	mov	r2, r3
 8000a04:	2103      	movs	r1, #3
 8000a06:	2000      	movs	r0, #0
 8000a08:	f000 fafa 	bl	8001000 <FBL_CanSpi_MCP2515_WriteByteSequence>
	FBL_CanSpi_MCP2515_WriteByteSequence(FBL_CANSPI_MCP2515_RXF1SIDH, FBL_CANSPI_MCP2515_RXF1EID0, &(FBL_RXF1reg.RXF1SIDH));
 8000a0c:	f107 0318 	add.w	r3, r7, #24
 8000a10:	461a      	mov	r2, r3
 8000a12:	2107      	movs	r1, #7
 8000a14:	2004      	movs	r0, #4
 8000a16:	f000 faf3 	bl	8001000 <FBL_CanSpi_MCP2515_WriteByteSequence>
	FBL_CanSpi_MCP2515_WriteByteSequence(FBL_CANSPI_MCP2515_RXF2SIDH, FBL_CANSPI_MCP2515_RXF2EID0, &(FBL_RXF2reg.RXF2SIDH));
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	461a      	mov	r2, r3
 8000a20:	210b      	movs	r1, #11
 8000a22:	2008      	movs	r0, #8
 8000a24:	f000 faec 	bl	8001000 <FBL_CanSpi_MCP2515_WriteByteSequence>
	FBL_CanSpi_MCP2515_WriteByteSequence(FBL_CANSPI_MCP2515_RXF3SIDH, FBL_CANSPI_MCP2515_RXF3EID0, &(FBL_RXF3reg.RXF3SIDH));
 8000a28:	f107 0310 	add.w	r3, r7, #16
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	2113      	movs	r1, #19
 8000a30:	2010      	movs	r0, #16
 8000a32:	f000 fae5 	bl	8001000 <FBL_CanSpi_MCP2515_WriteByteSequence>
	FBL_CanSpi_MCP2515_WriteByteSequence(FBL_CANSPI_MCP2515_RXF4SIDH, FBL_CANSPI_MCP2515_RXF4EID0, &(FBL_RXF4reg.RXF4SIDH));
 8000a36:	f107 030c 	add.w	r3, r7, #12
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	2117      	movs	r1, #23
 8000a3e:	2014      	movs	r0, #20
 8000a40:	f000 fade 	bl	8001000 <FBL_CanSpi_MCP2515_WriteByteSequence>
	FBL_CanSpi_MCP2515_WriteByteSequence(FBL_CANSPI_MCP2515_RXF5SIDH, FBL_CANSPI_MCP2515_RXF5EID0, &(FBL_RXF5reg.RXF5SIDH));
 8000a44:	f107 0308 	add.w	r3, r7, #8
 8000a48:	461a      	mov	r2, r3
 8000a4a:	211b      	movs	r1, #27
 8000a4c:	2018      	movs	r0, #24
 8000a4e:	f000 fad7 	bl	8001000 <FBL_CanSpi_MCP2515_WriteByteSequence>
	FBL_CanSpi_MCP2515_WriteByte(FBL_CANSPI_MCP2515_RXB0CTRL, 0x04);
 8000a52:	2104      	movs	r1, #4
 8000a54:	2060      	movs	r0, #96	@ 0x60
 8000a56:	f000 faaf 	bl	8000fb8 <FBL_CanSpi_MCP2515_WriteByte>
	FBL_CanSpi_MCP2515_WriteByte(FBL_CANSPI_MCP2515_RXB1CTRL, 0x01);
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	2070      	movs	r0, #112	@ 0x70
 8000a5e:	f000 faab 	bl	8000fb8 <FBL_CanSpi_MCP2515_WriteByte>
	FBL_CanSpi_MCP2515_WriteByte(FBL_CANSPI_MCP2515_CNF1, 0x00);
 8000a62:	2100      	movs	r1, #0
 8000a64:	202a      	movs	r0, #42	@ 0x2a
 8000a66:	f000 faa7 	bl	8000fb8 <FBL_CanSpi_MCP2515_WriteByte>
	FBL_CanSpi_MCP2515_WriteByte(FBL_CANSPI_MCP2515_CNF2, 0x90);
 8000a6a:	2190      	movs	r1, #144	@ 0x90
 8000a6c:	2029      	movs	r0, #41	@ 0x29
 8000a6e:	f000 faa3 	bl	8000fb8 <FBL_CanSpi_MCP2515_WriteByte>
	FBL_CanSpi_MCP2515_WriteByte(FBL_CANSPI_MCP2515_CNF3, 0x82);
 8000a72:	2182      	movs	r1, #130	@ 0x82
 8000a74:	2028      	movs	r0, #40	@ 0x28
 8000a76:	f000 fa9f 	bl	8000fb8 <FBL_CanSpi_MCP2515_WriteByte>
	FBL_CanSpi_MCP2515_SetNormalMode();
 8000a7a:	f000 fa23 	bl	8000ec4 <FBL_CanSpi_MCP2515_SetNormalMode>
	return 1;
 8000a7e:	2301      	movs	r3, #1
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3720      	adds	r7, #32
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <FBL_CanSpi_Transmit>:
uint8 FBL_CanSpi_Transmit(FBL_CANSPI_uCAN_MSG *tempCanMsg)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	uint8 FBL_returnValue = 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	73fb      	strb	r3, [r7, #15]
	FBL_idReg.tempSIDH = 0;
 8000a94:	4b36      	ldr	r3, [pc, #216]	@ (8000b70 <FBL_CanSpi_Transmit+0xe8>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	701a      	strb	r2, [r3, #0]
	FBL_idReg.tempSIDL = 0;
 8000a9a:	4b35      	ldr	r3, [pc, #212]	@ (8000b70 <FBL_CanSpi_Transmit+0xe8>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	705a      	strb	r2, [r3, #1]
	FBL_idReg.tempEID8 = 0;
 8000aa0:	4b33      	ldr	r3, [pc, #204]	@ (8000b70 <FBL_CanSpi_Transmit+0xe8>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	709a      	strb	r2, [r3, #2]
	FBL_idReg.tempEID0 = 0;
 8000aa6:	4b32      	ldr	r3, [pc, #200]	@ (8000b70 <FBL_CanSpi_Transmit+0xe8>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	70da      	strb	r2, [r3, #3]
	FBL_ctrlStatus.CtrlStatus = FBL_CanSpi_MCP2515_ReadStatus();
 8000aac:	f000 fb16 	bl	80010dc <FBL_CanSpi_MCP2515_ReadStatus>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	4b2f      	ldr	r3, [pc, #188]	@ (8000b74 <FBL_CanSpi_Transmit+0xec>)
 8000ab6:	701a      	strb	r2, [r3, #0]
	if (FBL_ctrlStatus.TXB0REQ != 1)
 8000ab8:	4b2e      	ldr	r3, [pc, #184]	@ (8000b74 <FBL_CanSpi_Transmit+0xec>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	f003 0304 	and.w	r3, r3, #4
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d115      	bne.n	8000af2 <FBL_CanSpi_Transmit+0x6a>
	{
		FBL_CanSpi_ConvertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &FBL_idReg);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6858      	ldr	r0, [r3, #4]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	4a28      	ldr	r2, [pc, #160]	@ (8000b70 <FBL_CanSpi_Transmit+0xe8>)
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	f000 f959 	bl	8000d88 <FBL_CanSpi_ConvertCANid2Reg>
		FBL_CanSpi_MCP2515_LoadTxSequence(FBL_CANSPI_MCP2515_LOAD_TXB0SIDH, &(FBL_idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	7a1a      	ldrb	r2, [r3, #8]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	3309      	adds	r3, #9
 8000ade:	4924      	ldr	r1, [pc, #144]	@ (8000b70 <FBL_CanSpi_Transmit+0xe8>)
 8000ae0:	2040      	movs	r0, #64	@ 0x40
 8000ae2:	f000 fab7 	bl	8001054 <FBL_CanSpi_MCP2515_LoadTxSequence>
		FBL_CanSpi_MCP2515_RequestToSend(FBL_CANSPI_MCP2515_RTS_TX0);
 8000ae6:	2081      	movs	r0, #129	@ 0x81
 8000ae8:	f000 fade 	bl	80010a8 <FBL_CanSpi_MCP2515_RequestToSend>
		FBL_returnValue = 1;
 8000aec:	2301      	movs	r3, #1
 8000aee:	73fb      	strb	r3, [r7, #15]
 8000af0:	e038      	b.n	8000b64 <FBL_CanSpi_Transmit+0xdc>
	}
	else if (FBL_ctrlStatus.TXB1REQ != 1)
 8000af2:	4b20      	ldr	r3, [pc, #128]	@ (8000b74 <FBL_CanSpi_Transmit+0xec>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	f003 0310 	and.w	r3, r3, #16
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d115      	bne.n	8000b2c <FBL_CanSpi_Transmit+0xa4>
	{
		FBL_CanSpi_ConvertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &FBL_idReg);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6858      	ldr	r0, [r3, #4]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	4a19      	ldr	r2, [pc, #100]	@ (8000b70 <FBL_CanSpi_Transmit+0xe8>)
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	f000 f93c 	bl	8000d88 <FBL_CanSpi_ConvertCANid2Reg>
		FBL_CanSpi_MCP2515_LoadTxSequence(FBL_CANSPI_MCP2515_LOAD_TXB1SIDH, &(FBL_idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	7a1a      	ldrb	r2, [r3, #8]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	3309      	adds	r3, #9
 8000b18:	4915      	ldr	r1, [pc, #84]	@ (8000b70 <FBL_CanSpi_Transmit+0xe8>)
 8000b1a:	2042      	movs	r0, #66	@ 0x42
 8000b1c:	f000 fa9a 	bl	8001054 <FBL_CanSpi_MCP2515_LoadTxSequence>
		FBL_CanSpi_MCP2515_RequestToSend(FBL_CANSPI_MCP2515_RTS_TX1);
 8000b20:	2082      	movs	r0, #130	@ 0x82
 8000b22:	f000 fac1 	bl	80010a8 <FBL_CanSpi_MCP2515_RequestToSend>
		FBL_returnValue = 1;
 8000b26:	2301      	movs	r3, #1
 8000b28:	73fb      	strb	r3, [r7, #15]
 8000b2a:	e01b      	b.n	8000b64 <FBL_CanSpi_Transmit+0xdc>
	}
	else if (FBL_ctrlStatus.TXB2REQ != 1)
 8000b2c:	4b11      	ldr	r3, [pc, #68]	@ (8000b74 <FBL_CanSpi_Transmit+0xec>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d114      	bne.n	8000b64 <FBL_CanSpi_Transmit+0xdc>
	{
		FBL_CanSpi_ConvertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &FBL_idReg);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6858      	ldr	r0, [r3, #4]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	4a0b      	ldr	r2, [pc, #44]	@ (8000b70 <FBL_CanSpi_Transmit+0xe8>)
 8000b44:	4619      	mov	r1, r3
 8000b46:	f000 f91f 	bl	8000d88 <FBL_CanSpi_ConvertCANid2Reg>
		FBL_CanSpi_MCP2515_LoadTxSequence(FBL_CANSPI_MCP2515_LOAD_TXB2SIDH, &(FBL_idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	7a1a      	ldrb	r2, [r3, #8]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	3309      	adds	r3, #9
 8000b52:	4907      	ldr	r1, [pc, #28]	@ (8000b70 <FBL_CanSpi_Transmit+0xe8>)
 8000b54:	2044      	movs	r0, #68	@ 0x44
 8000b56:	f000 fa7d 	bl	8001054 <FBL_CanSpi_MCP2515_LoadTxSequence>
		FBL_CanSpi_MCP2515_RequestToSend(FBL_CANSPI_MCP2515_RTS_TX2);
 8000b5a:	2084      	movs	r0, #132	@ 0x84
 8000b5c:	f000 faa4 	bl	80010a8 <FBL_CanSpi_MCP2515_RequestToSend>
		FBL_returnValue = 1;
 8000b60:	2301      	movs	r3, #1
 8000b62:	73fb      	strb	r3, [r7, #15]
	}
	else
	{
		/* Do nothing. */
	}
	return (FBL_returnValue);
 8000b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3710      	adds	r7, #16
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20010074 	.word	0x20010074
 8000b74:	20010078 	.word	0x20010078

08000b78 <FBL_CanSpi_Receive>:
uint8 FBL_CanSpi_Receive(FBL_CANSPI_uCAN_MSG *tempCanMsg)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b088      	sub	sp, #32
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
	uint8 FBL_returnValue = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	77fb      	strb	r3, [r7, #31]
	FBL_CANSPI_rx_reg_t FBL_rxReg ={0};
 8000b84:	f107 0310 	add.w	r3, r7, #16
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	731a      	strb	r2, [r3, #12]
	FBL_CANSPI_CtrlRxStatus_t FBL_rxStatus = {0};
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
	FBL_rxStatus.CtrlRxStatus = FBL_CanSpi_MCP2515_GetRxStatus();
 8000b96:	f000 fabf 	bl	8001118 <FBL_CanSpi_MCP2515_GetRxStatus>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	733b      	strb	r3, [r7, #12]
	if (FBL_rxStatus.rxBuffer != 0)
 8000b9e:	7b3b      	ldrb	r3, [r7, #12]
 8000ba0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d066      	beq.n	8000c78 <FBL_CanSpi_Receive+0x100>
	{
		if ((FBL_rxStatus.rxBuffer == FBL_CANSPI_MSG_IN_RXB0)|(FBL_rxStatus.rxBuffer == FBL_CANSPI_MSG_IN_BOTH_BUFFERS))
 8000baa:	7b3b      	ldrb	r3, [r7, #12]
 8000bac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	2b40      	cmp	r3, #64	@ 0x40
 8000bb4:	bf0c      	ite	eq
 8000bb6:	2301      	moveq	r3, #1
 8000bb8:	2300      	movne	r3, #0
 8000bba:	b2da      	uxtb	r2, r3
 8000bbc:	7b3b      	ldrb	r3, [r7, #12]
 8000bbe:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	2bc0      	cmp	r3, #192	@ 0xc0
 8000bc6:	bf0c      	ite	eq
 8000bc8:	2301      	moveq	r3, #1
 8000bca:	2300      	movne	r3, #0
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d007      	beq.n	8000be6 <FBL_CanSpi_Receive+0x6e>
		{
			FBL_CanSpi_MCP2515_ReadRxSequence(FBL_CANSPI_MCP2515_READ_RXB0SIDH, FBL_rxReg.rx_reg_array, sizeof(FBL_rxReg.rx_reg_array));
 8000bd6:	f107 0310 	add.w	r3, r7, #16
 8000bda:	220d      	movs	r2, #13
 8000bdc:	4619      	mov	r1, r3
 8000bde:	2090      	movs	r0, #144	@ 0x90
 8000be0:	f000 f9c8 	bl	8000f74 <FBL_CanSpi_MCP2515_ReadRxSequence>
 8000be4:	e00c      	b.n	8000c00 <FBL_CanSpi_Receive+0x88>
		}
		else if (FBL_rxStatus.rxBuffer == FBL_CANSPI_MSG_IN_RXB1)
 8000be6:	7b3b      	ldrb	r3, [r7, #12]
 8000be8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	2b80      	cmp	r3, #128	@ 0x80
 8000bf0:	d106      	bne.n	8000c00 <FBL_CanSpi_Receive+0x88>
		{
			FBL_CanSpi_MCP2515_ReadRxSequence(FBL_CANSPI_MCP2515_READ_RXB1SIDH, FBL_rxReg.rx_reg_array, sizeof(FBL_rxReg.rx_reg_array));
 8000bf2:	f107 0310 	add.w	r3, r7, #16
 8000bf6:	220d      	movs	r2, #13
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	2094      	movs	r0, #148	@ 0x94
 8000bfc:	f000 f9ba 	bl	8000f74 <FBL_CanSpi_MCP2515_ReadRxSequence>
		}
		if (FBL_rxStatus.msgType == FBL_CANSPI_dEXTENDED_CAN_MSG_ID_2_0B)
 8000c00:	7b3b      	ldrb	r3, [r7, #12]
 8000c02:	f003 0318 	and.w	r3, r3, #24
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	2b10      	cmp	r3, #16
 8000c0a:	d10c      	bne.n	8000c26 <FBL_CanSpi_Receive+0xae>
		{
			tempCanMsg->frame.idType = (uint8) FBL_CANSPI_dEXTENDED_CAN_MSG_ID_2_0B;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2202      	movs	r2, #2
 8000c10:	701a      	strb	r2, [r3, #0]
			tempCanMsg->frame.id = FBL_CanSpi_ConvertReg2ExtendedCANid(FBL_rxReg.RXBnEID8, FBL_rxReg.RXBnEID0, FBL_rxReg.RXBnSIDH, FBL_rxReg.RXBnSIDL);
 8000c12:	7cb8      	ldrb	r0, [r7, #18]
 8000c14:	7cf9      	ldrb	r1, [r7, #19]
 8000c16:	7c3a      	ldrb	r2, [r7, #16]
 8000c18:	7c7b      	ldrb	r3, [r7, #17]
 8000c1a:	f000 f833 	bl	8000c84 <FBL_CanSpi_ConvertReg2ExtendedCANid>
 8000c1e:	4602      	mov	r2, r0
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	605a      	str	r2, [r3, #4]
 8000c24:	e00b      	b.n	8000c3e <FBL_CanSpi_Receive+0xc6>
		}
		else
		{
			tempCanMsg->frame.idType = (uint8) FBL_CANSPI_dSTANDARD_CAN_MSG_ID_2_0B;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2201      	movs	r2, #1
 8000c2a:	701a      	strb	r2, [r3, #0]
			tempCanMsg->frame.id = FBL_CanSpi_ConvertReg2StandardCANid(FBL_rxReg.RXBnSIDH, FBL_rxReg.RXBnSIDL);
 8000c2c:	7c3b      	ldrb	r3, [r7, #16]
 8000c2e:	7c7a      	ldrb	r2, [r7, #17]
 8000c30:	4611      	mov	r1, r2
 8000c32:	4618      	mov	r0, r3
 8000c34:	f000 f882 	bl	8000d3c <FBL_CanSpi_ConvertReg2StandardCANid>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	605a      	str	r2, [r3, #4]
		}
		tempCanMsg->frame.dlc   = FBL_rxReg.RXBnDLC;
 8000c3e:	7d3a      	ldrb	r2, [r7, #20]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	721a      	strb	r2, [r3, #8]
		tempCanMsg->frame.data0 = FBL_rxReg.RXBnD0;
 8000c44:	7d7a      	ldrb	r2, [r7, #21]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	725a      	strb	r2, [r3, #9]
		tempCanMsg->frame.data1 = FBL_rxReg.RXBnD1;
 8000c4a:	7dba      	ldrb	r2, [r7, #22]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	729a      	strb	r2, [r3, #10]
		tempCanMsg->frame.data2 = FBL_rxReg.RXBnD2;
 8000c50:	7dfa      	ldrb	r2, [r7, #23]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	72da      	strb	r2, [r3, #11]
		tempCanMsg->frame.data3 = FBL_rxReg.RXBnD3;
 8000c56:	7e3a      	ldrb	r2, [r7, #24]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	731a      	strb	r2, [r3, #12]
		tempCanMsg->frame.data4 = FBL_rxReg.RXBnD4;
 8000c5c:	7e7a      	ldrb	r2, [r7, #25]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	735a      	strb	r2, [r3, #13]
		tempCanMsg->frame.data5 = FBL_rxReg.RXBnD5;
 8000c62:	7eba      	ldrb	r2, [r7, #26]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	739a      	strb	r2, [r3, #14]
		tempCanMsg->frame.data6 = FBL_rxReg.RXBnD6;
 8000c68:	7efa      	ldrb	r2, [r7, #27]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	73da      	strb	r2, [r3, #15]
		tempCanMsg->frame.data7 = FBL_rxReg.RXBnD7;
 8000c6e:	7f3a      	ldrb	r2, [r7, #28]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	741a      	strb	r2, [r3, #16]
		FBL_returnValue = 1;
 8000c74:	2301      	movs	r3, #1
 8000c76:	77fb      	strb	r3, [r7, #31]
	}
	else
	{
		/* Do nothing. */
	}
	return (FBL_returnValue);
 8000c78:	7ffb      	ldrb	r3, [r7, #31]
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3720      	adds	r7, #32
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
	...

08000c84 <FBL_CanSpi_ConvertReg2ExtendedCANid>:
		/* Do nothing. */
	}
	return (FBL_returnValue);
}
uint32 FBL_CanSpi_ConvertReg2ExtendedCANid(uint8 tempRXBn_EIDH, uint8 tempRXBn_EIDL, uint8 tempRXBn_SIDH, uint8 tempRXBn_SIDL)
{
 8000c84:	b490      	push	{r4, r7}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4604      	mov	r4, r0
 8000c8c:	4608      	mov	r0, r1
 8000c8e:	4611      	mov	r1, r2
 8000c90:	461a      	mov	r2, r3
 8000c92:	4623      	mov	r3, r4
 8000c94:	71fb      	strb	r3, [r7, #7]
 8000c96:	4603      	mov	r3, r0
 8000c98:	71bb      	strb	r3, [r7, #6]
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	717b      	strb	r3, [r7, #5]
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	713b      	strb	r3, [r7, #4]
	static uint32 returnValue = 0;
	static uint32 ConvertedID = 0;
	static uint8 CAN_standardLo_ID_lo2bits;
	static uint8 CAN_standardLo_ID_hi3bits;
	CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 8000ca2:	793b      	ldrb	r3, [r7, #4]
 8000ca4:	f003 0303 	and.w	r3, r3, #3
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	4b20      	ldr	r3, [pc, #128]	@ (8000d2c <FBL_CanSpi_ConvertReg2ExtendedCANid+0xa8>)
 8000cac:	701a      	strb	r2, [r3, #0]
	CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 8000cae:	793b      	ldrb	r3, [r7, #4]
 8000cb0:	095b      	lsrs	r3, r3, #5
 8000cb2:	b2da      	uxtb	r2, r3
 8000cb4:	4b1e      	ldr	r3, [pc, #120]	@ (8000d30 <FBL_CanSpi_ConvertReg2ExtendedCANid+0xac>)
 8000cb6:	701a      	strb	r2, [r3, #0]
	ConvertedID = (tempRXBn_SIDH << 3);
 8000cb8:	797b      	ldrb	r3, [r7, #5]
 8000cba:	00db      	lsls	r3, r3, #3
 8000cbc:	4a1d      	ldr	r2, [pc, #116]	@ (8000d34 <FBL_CanSpi_ConvertReg2ExtendedCANid+0xb0>)
 8000cbe:	6013      	str	r3, [r2, #0]
	ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 8000cc0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d30 <FBL_CanSpi_ConvertReg2ExtendedCANid+0xac>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4b1b      	ldr	r3, [pc, #108]	@ (8000d34 <FBL_CanSpi_ConvertReg2ExtendedCANid+0xb0>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4413      	add	r3, r2
 8000ccc:	4a19      	ldr	r2, [pc, #100]	@ (8000d34 <FBL_CanSpi_ConvertReg2ExtendedCANid+0xb0>)
 8000cce:	6013      	str	r3, [r2, #0]
	ConvertedID = (ConvertedID << 2);
 8000cd0:	4b18      	ldr	r3, [pc, #96]	@ (8000d34 <FBL_CanSpi_ConvertReg2ExtendedCANid+0xb0>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	4a17      	ldr	r2, [pc, #92]	@ (8000d34 <FBL_CanSpi_ConvertReg2ExtendedCANid+0xb0>)
 8000cd8:	6013      	str	r3, [r2, #0]
	ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 8000cda:	4b14      	ldr	r3, [pc, #80]	@ (8000d2c <FBL_CanSpi_ConvertReg2ExtendedCANid+0xa8>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	461a      	mov	r2, r3
 8000ce0:	4b14      	ldr	r3, [pc, #80]	@ (8000d34 <FBL_CanSpi_ConvertReg2ExtendedCANid+0xb0>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	4a13      	ldr	r2, [pc, #76]	@ (8000d34 <FBL_CanSpi_ConvertReg2ExtendedCANid+0xb0>)
 8000ce8:	6013      	str	r3, [r2, #0]
	ConvertedID = (ConvertedID << 8);
 8000cea:	4b12      	ldr	r3, [pc, #72]	@ (8000d34 <FBL_CanSpi_ConvertReg2ExtendedCANid+0xb0>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	021b      	lsls	r3, r3, #8
 8000cf0:	4a10      	ldr	r2, [pc, #64]	@ (8000d34 <FBL_CanSpi_ConvertReg2ExtendedCANid+0xb0>)
 8000cf2:	6013      	str	r3, [r2, #0]
	ConvertedID = ConvertedID + tempRXBn_EIDH;
 8000cf4:	79fa      	ldrb	r2, [r7, #7]
 8000cf6:	4b0f      	ldr	r3, [pc, #60]	@ (8000d34 <FBL_CanSpi_ConvertReg2ExtendedCANid+0xb0>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	4a0d      	ldr	r2, [pc, #52]	@ (8000d34 <FBL_CanSpi_ConvertReg2ExtendedCANid+0xb0>)
 8000cfe:	6013      	str	r3, [r2, #0]
	ConvertedID = (ConvertedID << 8);
 8000d00:	4b0c      	ldr	r3, [pc, #48]	@ (8000d34 <FBL_CanSpi_ConvertReg2ExtendedCANid+0xb0>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	021b      	lsls	r3, r3, #8
 8000d06:	4a0b      	ldr	r2, [pc, #44]	@ (8000d34 <FBL_CanSpi_ConvertReg2ExtendedCANid+0xb0>)
 8000d08:	6013      	str	r3, [r2, #0]
	ConvertedID = ConvertedID + tempRXBn_EIDL;
 8000d0a:	79ba      	ldrb	r2, [r7, #6]
 8000d0c:	4b09      	ldr	r3, [pc, #36]	@ (8000d34 <FBL_CanSpi_ConvertReg2ExtendedCANid+0xb0>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4413      	add	r3, r2
 8000d12:	4a08      	ldr	r2, [pc, #32]	@ (8000d34 <FBL_CanSpi_ConvertReg2ExtendedCANid+0xb0>)
 8000d14:	6013      	str	r3, [r2, #0]
	returnValue = ConvertedID;
 8000d16:	4b07      	ldr	r3, [pc, #28]	@ (8000d34 <FBL_CanSpi_ConvertReg2ExtendedCANid+0xb0>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a07      	ldr	r2, [pc, #28]	@ (8000d38 <FBL_CanSpi_ConvertReg2ExtendedCANid+0xb4>)
 8000d1c:	6013      	str	r3, [r2, #0]
	return (returnValue);
 8000d1e:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <FBL_CanSpi_ConvertReg2ExtendedCANid+0xb4>)
 8000d20:	681b      	ldr	r3, [r3, #0]
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc90      	pop	{r4, r7}
 8000d2a:	4770      	bx	lr
 8000d2c:	2001007c 	.word	0x2001007c
 8000d30:	2001007d 	.word	0x2001007d
 8000d34:	20010080 	.word	0x20010080
 8000d38:	20010084 	.word	0x20010084

08000d3c <FBL_CanSpi_ConvertReg2StandardCANid>:
uint32 FBL_CanSpi_ConvertReg2StandardCANid(uint8 tempRXBn_SIDH, uint8 tempRXBn_SIDL)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	460a      	mov	r2, r1
 8000d46:	71fb      	strb	r3, [r7, #7]
 8000d48:	4613      	mov	r3, r2
 8000d4a:	71bb      	strb	r3, [r7, #6]
	static uint32 returnValue = 0;
	static uint32 ConvertedID = 0;
	ConvertedID = (tempRXBn_SIDH << 3);
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	4a0b      	ldr	r2, [pc, #44]	@ (8000d80 <FBL_CanSpi_ConvertReg2StandardCANid+0x44>)
 8000d52:	6013      	str	r3, [r2, #0]
	ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 8000d54:	79bb      	ldrb	r3, [r7, #6]
 8000d56:	095b      	lsrs	r3, r3, #5
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	4b08      	ldr	r3, [pc, #32]	@ (8000d80 <FBL_CanSpi_ConvertReg2StandardCANid+0x44>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4413      	add	r3, r2
 8000d62:	4a07      	ldr	r2, [pc, #28]	@ (8000d80 <FBL_CanSpi_ConvertReg2StandardCANid+0x44>)
 8000d64:	6013      	str	r3, [r2, #0]
	returnValue = ConvertedID;
 8000d66:	4b06      	ldr	r3, [pc, #24]	@ (8000d80 <FBL_CanSpi_ConvertReg2StandardCANid+0x44>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a06      	ldr	r2, [pc, #24]	@ (8000d84 <FBL_CanSpi_ConvertReg2StandardCANid+0x48>)
 8000d6c:	6013      	str	r3, [r2, #0]
	return (returnValue);
 8000d6e:	4b05      	ldr	r3, [pc, #20]	@ (8000d84 <FBL_CanSpi_ConvertReg2StandardCANid+0x48>)
 8000d70:	681b      	ldr	r3, [r3, #0]
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	20010088 	.word	0x20010088
 8000d84:	2001008c 	.word	0x2001008c

08000d88 <FBL_CanSpi_ConvertCANid2Reg>:
void FBL_CanSpi_ConvertCANid2Reg(uint32 tempPassedInID, uint8 canIdType, FBL_CANSPI_id_reg_t *passedIdReg)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	460b      	mov	r3, r1
 8000d92:	607a      	str	r2, [r7, #4]
 8000d94:	72fb      	strb	r3, [r7, #11]
	static uint8 wipSIDL = 0;
	if (canIdType == FBL_CANSPI_dEXTENDED_CAN_MSG_ID_2_0B)
 8000d96:	7afb      	ldrb	r3, [r7, #11]
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	d137      	bne.n	8000e0c <FBL_CanSpi_ConvertCANid2Reg+0x84>
	{
		passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	b2da      	uxtb	r2, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	70da      	strb	r2, [r3, #3]
		tempPassedInID = tempPassedInID >> 8;
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	0a1b      	lsrs	r3, r3, #8
 8000da8:	60fb      	str	r3, [r7, #12]
		passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	b2da      	uxtb	r2, r3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	709a      	strb	r2, [r3, #2]
		tempPassedInID = tempPassedInID >> 8;
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	0a1b      	lsrs	r3, r3, #8
 8000db6:	60fb      	str	r3, [r7, #12]
		wipSIDL = 0x03 & tempPassedInID;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	f003 0303 	and.w	r3, r3, #3
 8000dc0:	b2da      	uxtb	r2, r3
 8000dc2:	4b1f      	ldr	r3, [pc, #124]	@ (8000e40 <FBL_CanSpi_ConvertCANid2Reg+0xb8>)
 8000dc4:	701a      	strb	r2, [r3, #0]
		tempPassedInID = tempPassedInID << 3;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	00db      	lsls	r3, r3, #3
 8000dca:	60fb      	str	r3, [r7, #12]
		wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	f023 031f 	bic.w	r3, r3, #31
 8000dd4:	b2da      	uxtb	r2, r3
 8000dd6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e40 <FBL_CanSpi_ConvertCANid2Reg+0xb8>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	4413      	add	r3, r2
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	4b18      	ldr	r3, [pc, #96]	@ (8000e40 <FBL_CanSpi_ConvertCANid2Reg+0xb8>)
 8000de0:	701a      	strb	r2, [r3, #0]
		wipSIDL = wipSIDL + 0x08;
 8000de2:	4b17      	ldr	r3, [pc, #92]	@ (8000e40 <FBL_CanSpi_ConvertCANid2Reg+0xb8>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	3308      	adds	r3, #8
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	4b15      	ldr	r3, [pc, #84]	@ (8000e40 <FBL_CanSpi_ConvertCANid2Reg+0xb8>)
 8000dec:	701a      	strb	r2, [r3, #0]
		passedIdReg->tempSIDL = 0xEB & wipSIDL;
 8000dee:	4b14      	ldr	r3, [pc, #80]	@ (8000e40 <FBL_CanSpi_ConvertCANid2Reg+0xb8>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	f023 0314 	bic.w	r3, r3, #20
 8000df6:	b2da      	uxtb	r2, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	705a      	strb	r2, [r3, #1]
		tempPassedInID = tempPassedInID >> 8;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	0a1b      	lsrs	r3, r3, #8
 8000e00:	60fb      	str	r3, [r7, #12]
		passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	701a      	strb	r2, [r3, #0]
		tempPassedInID = tempPassedInID << 5;
		passedIdReg->tempSIDL = 0xFF & tempPassedInID;
		tempPassedInID = tempPassedInID >> 8;
		passedIdReg->tempSIDH = 0xFF & tempPassedInID;
	}
}
 8000e0a:	e013      	b.n	8000e34 <FBL_CanSpi_ConvertCANid2Reg+0xac>
		passedIdReg->tempEID8 = 0;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	709a      	strb	r2, [r3, #2]
		passedIdReg->tempEID0 = 0;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2200      	movs	r2, #0
 8000e16:	70da      	strb	r2, [r3, #3]
		tempPassedInID = tempPassedInID << 5;
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	015b      	lsls	r3, r3, #5
 8000e1c:	60fb      	str	r3, [r7, #12]
		passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	705a      	strb	r2, [r3, #1]
		tempPassedInID = tempPassedInID >> 8;
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	0a1b      	lsrs	r3, r3, #8
 8000e2a:	60fb      	str	r3, [r7, #12]
		passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	b2da      	uxtb	r2, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	701a      	strb	r2, [r3, #0]
}
 8000e34:	bf00      	nop
 8000e36:	3714      	adds	r7, #20
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	20010090 	.word	0x20010090

08000e44 <FBL_CanSpi_MCP2515_Initialize>:
bool FBL_CanSpi_MCP2515_Initialize(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
	uint8 loop = 10;
 8000e4a:	230a      	movs	r3, #10
 8000e4c:	71fb      	strb	r3, [r7, #7]
	FBL_CANSPI_MCP2515_CS_HIGH();
 8000e4e:	2201      	movs	r2, #1
 8000e50:	2110      	movs	r1, #16
 8000e52:	480b      	ldr	r0, [pc, #44]	@ (8000e80 <FBL_CanSpi_MCP2515_Initialize+0x3c>)
 8000e54:	f002 fc8c 	bl	8003770 <HAL_GPIO_WritePin>
	do
	{
		if(HAL_SPI_GetState(FBL_CANSPI_SPI_CAN) == HAL_SPI_STATE_READY) return true;
 8000e58:	480a      	ldr	r0, [pc, #40]	@ (8000e84 <FBL_CanSpi_MCP2515_Initialize+0x40>)
 8000e5a:	f004 fa2d 	bl	80052b8 <HAL_SPI_GetState>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d101      	bne.n	8000e68 <FBL_CanSpi_MCP2515_Initialize+0x24>
 8000e64:	2301      	movs	r3, #1
 8000e66:	e006      	b.n	8000e76 <FBL_CanSpi_MCP2515_Initialize+0x32>
		else
		{
			/* Do nothing. */
		}
		loop--;
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	71fb      	strb	r3, [r7, #7]
	}while(loop > 0);
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d1f1      	bne.n	8000e58 <FBL_CanSpi_MCP2515_Initialize+0x14>
	return false;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40020800 	.word	0x40020800
 8000e84:	2001009c 	.word	0x2001009c

08000e88 <FBL_CanSpi_MCP2515_SetConfigMode>:
bool FBL_CanSpi_MCP2515_SetConfigMode(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
	uint8 loop = 10;
 8000e8e:	230a      	movs	r3, #10
 8000e90:	71fb      	strb	r3, [r7, #7]
	FBL_CanSpi_MCP2515_WriteByte(FBL_CANSPI_MCP2515_CANCTRL, 0x80);
 8000e92:	2180      	movs	r1, #128	@ 0x80
 8000e94:	200f      	movs	r0, #15
 8000e96:	f000 f88f 	bl	8000fb8 <FBL_CanSpi_MCP2515_WriteByte>
	do
	{
		if((FBL_CanSpi_MCP2515_ReadByte(FBL_CANSPI_MCP2515_CANSTAT) & 0xE0) == 0x80) return true;
 8000e9a:	200e      	movs	r0, #14
 8000e9c:	f000 f844 	bl	8000f28 <FBL_CanSpi_MCP2515_ReadByte>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8000ea6:	2b80      	cmp	r3, #128	@ 0x80
 8000ea8:	d101      	bne.n	8000eae <FBL_CanSpi_MCP2515_SetConfigMode+0x26>
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e006      	b.n	8000ebc <FBL_CanSpi_MCP2515_SetConfigMode+0x34>
		else
		{
			/* Do nothing. */
		}
		loop--;
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	3b01      	subs	r3, #1
 8000eb2:	71fb      	strb	r3, [r7, #7]
	}while(loop > 0);
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d1ef      	bne.n	8000e9a <FBL_CanSpi_MCP2515_SetConfigMode+0x12>
	return false;
 8000eba:	2300      	movs	r3, #0
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <FBL_CanSpi_MCP2515_SetNormalMode>:
bool FBL_CanSpi_MCP2515_SetNormalMode(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
	uint8 loop = 10;
 8000eca:	230a      	movs	r3, #10
 8000ecc:	71fb      	strb	r3, [r7, #7]
	FBL_CanSpi_MCP2515_WriteByte(FBL_CANSPI_MCP2515_CANCTRL, 0x00);
 8000ece:	2100      	movs	r1, #0
 8000ed0:	200f      	movs	r0, #15
 8000ed2:	f000 f871 	bl	8000fb8 <FBL_CanSpi_MCP2515_WriteByte>
	do
	{
		if((FBL_CanSpi_MCP2515_ReadByte(FBL_CANSPI_MCP2515_CANSTAT) & 0xE0) == 0x00) return true;
 8000ed6:	200e      	movs	r0, #14
 8000ed8:	f000 f826 	bl	8000f28 <FBL_CanSpi_MCP2515_ReadByte>
 8000edc:	4603      	mov	r3, r0
 8000ede:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d101      	bne.n	8000eea <FBL_CanSpi_MCP2515_SetNormalMode+0x26>
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e006      	b.n	8000ef8 <FBL_CanSpi_MCP2515_SetNormalMode+0x34>
		else
		{
			/* Do nothing. */
		}
		loop--;
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	3b01      	subs	r3, #1
 8000eee:	71fb      	strb	r3, [r7, #7]
	}while(loop > 0);
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d1ef      	bne.n	8000ed6 <FBL_CanSpi_MCP2515_SetNormalMode+0x12>
	return false;
 8000ef6:	2300      	movs	r3, #0
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <FBL_CanSpi_MCP2515_Reset>:
		loop--;
	}while(loop > 0);
	return false;
}
void FBL_CanSpi_MCP2515_Reset(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
	FBL_CANSPI_MCP2515_CS_LOW();
 8000f04:	2200      	movs	r2, #0
 8000f06:	2110      	movs	r1, #16
 8000f08:	4806      	ldr	r0, [pc, #24]	@ (8000f24 <FBL_CanSpi_MCP2515_Reset+0x24>)
 8000f0a:	f002 fc31 	bl	8003770 <HAL_GPIO_WritePin>
	FBL_CanSpi_SPI_Tx(FBL_CANSPI_MCP2515_RESET);
 8000f0e:	20c0      	movs	r0, #192	@ 0xc0
 8000f10:	f000 f920 	bl	8001154 <FBL_CanSpi_SPI_Tx>
	FBL_CANSPI_MCP2515_CS_HIGH();
 8000f14:	2201      	movs	r2, #1
 8000f16:	2110      	movs	r1, #16
 8000f18:	4802      	ldr	r0, [pc, #8]	@ (8000f24 <FBL_CanSpi_MCP2515_Reset+0x24>)
 8000f1a:	f002 fc29 	bl	8003770 <HAL_GPIO_WritePin>
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40020800 	.word	0x40020800

08000f28 <FBL_CanSpi_MCP2515_ReadByte>:
uint8 FBL_CanSpi_MCP2515_ReadByte (uint8 address)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	71fb      	strb	r3, [r7, #7]
	static uint8 FBL_retVal = 0;
	FBL_CANSPI_MCP2515_CS_LOW();
 8000f32:	2200      	movs	r2, #0
 8000f34:	2110      	movs	r1, #16
 8000f36:	480d      	ldr	r0, [pc, #52]	@ (8000f6c <FBL_CanSpi_MCP2515_ReadByte+0x44>)
 8000f38:	f002 fc1a 	bl	8003770 <HAL_GPIO_WritePin>
	FBL_CanSpi_SPI_Tx(FBL_CANSPI_MCP2515_READ);
 8000f3c:	2003      	movs	r0, #3
 8000f3e:	f000 f909 	bl	8001154 <FBL_CanSpi_SPI_Tx>
	FBL_CanSpi_SPI_Tx(address);
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f000 f905 	bl	8001154 <FBL_CanSpi_SPI_Tx>
	FBL_retVal = FBL_CanSpi_SPI_Rx();
 8000f4a:	f000 f929 	bl	80011a0 <FBL_CanSpi_SPI_Rx>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	461a      	mov	r2, r3
 8000f52:	4b07      	ldr	r3, [pc, #28]	@ (8000f70 <FBL_CanSpi_MCP2515_ReadByte+0x48>)
 8000f54:	701a      	strb	r2, [r3, #0]
	FBL_CANSPI_MCP2515_CS_HIGH();
 8000f56:	2201      	movs	r2, #1
 8000f58:	2110      	movs	r1, #16
 8000f5a:	4804      	ldr	r0, [pc, #16]	@ (8000f6c <FBL_CanSpi_MCP2515_ReadByte+0x44>)
 8000f5c:	f002 fc08 	bl	8003770 <HAL_GPIO_WritePin>
	return (FBL_retVal);
 8000f60:	4b03      	ldr	r3, [pc, #12]	@ (8000f70 <FBL_CanSpi_MCP2515_ReadByte+0x48>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40020800 	.word	0x40020800
 8000f70:	20010091 	.word	0x20010091

08000f74 <FBL_CanSpi_MCP2515_ReadRxSequence>:
void FBL_CanSpi_MCP2515_ReadRxSequence(uint8 instruction, uint8 *data, uint8 length)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	6039      	str	r1, [r7, #0]
 8000f7e:	71fb      	strb	r3, [r7, #7]
 8000f80:	4613      	mov	r3, r2
 8000f82:	71bb      	strb	r3, [r7, #6]
	FBL_CANSPI_MCP2515_CS_LOW();
 8000f84:	2200      	movs	r2, #0
 8000f86:	2110      	movs	r1, #16
 8000f88:	480a      	ldr	r0, [pc, #40]	@ (8000fb4 <FBL_CanSpi_MCP2515_ReadRxSequence+0x40>)
 8000f8a:	f002 fbf1 	bl	8003770 <HAL_GPIO_WritePin>
	FBL_CanSpi_SPI_Tx(instruction);
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f000 f8df 	bl	8001154 <FBL_CanSpi_SPI_Tx>
	FBL_CanSpi_SPI_RxBuffer(data, length);
 8000f96:	79bb      	ldrb	r3, [r7, #6]
 8000f98:	4619      	mov	r1, r3
 8000f9a:	6838      	ldr	r0, [r7, #0]
 8000f9c:	f000 f910 	bl	80011c0 <FBL_CanSpi_SPI_RxBuffer>
	FBL_CANSPI_MCP2515_CS_HIGH();
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	2110      	movs	r1, #16
 8000fa4:	4803      	ldr	r0, [pc, #12]	@ (8000fb4 <FBL_CanSpi_MCP2515_ReadRxSequence+0x40>)
 8000fa6:	f002 fbe3 	bl	8003770 <HAL_GPIO_WritePin>
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40020800 	.word	0x40020800

08000fb8 <FBL_CanSpi_MCP2515_WriteByte>:
void FBL_CanSpi_MCP2515_WriteByte(uint8 address, uint8 data)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	460a      	mov	r2, r1
 8000fc2:	71fb      	strb	r3, [r7, #7]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	71bb      	strb	r3, [r7, #6]
	FBL_CANSPI_MCP2515_CS_LOW();
 8000fc8:	2200      	movs	r2, #0
 8000fca:	2110      	movs	r1, #16
 8000fcc:	480b      	ldr	r0, [pc, #44]	@ (8000ffc <FBL_CanSpi_MCP2515_WriteByte+0x44>)
 8000fce:	f002 fbcf 	bl	8003770 <HAL_GPIO_WritePin>
	FBL_CanSpi_SPI_Tx(FBL_CANSPI_MCP2515_WRITE);
 8000fd2:	2002      	movs	r0, #2
 8000fd4:	f000 f8be 	bl	8001154 <FBL_CanSpi_SPI_Tx>
	FBL_CanSpi_SPI_Tx(address);
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f000 f8ba 	bl	8001154 <FBL_CanSpi_SPI_Tx>
	FBL_CanSpi_SPI_Tx(data);
 8000fe0:	79bb      	ldrb	r3, [r7, #6]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 f8b6 	bl	8001154 <FBL_CanSpi_SPI_Tx>
	FBL_CANSPI_MCP2515_CS_HIGH();
 8000fe8:	2201      	movs	r2, #1
 8000fea:	2110      	movs	r1, #16
 8000fec:	4803      	ldr	r0, [pc, #12]	@ (8000ffc <FBL_CanSpi_MCP2515_WriteByte+0x44>)
 8000fee:	f002 fbbf 	bl	8003770 <HAL_GPIO_WritePin>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40020800 	.word	0x40020800

08001000 <FBL_CanSpi_MCP2515_WriteByteSequence>:
void FBL_CanSpi_MCP2515_WriteByteSequence(uint8 startAddress, uint8 endAddress, uint8 *data)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	603a      	str	r2, [r7, #0]
 800100a:	71fb      	strb	r3, [r7, #7]
 800100c:	460b      	mov	r3, r1
 800100e:	71bb      	strb	r3, [r7, #6]
	FBL_CANSPI_MCP2515_CS_LOW();
 8001010:	2200      	movs	r2, #0
 8001012:	2110      	movs	r1, #16
 8001014:	480e      	ldr	r0, [pc, #56]	@ (8001050 <FBL_CanSpi_MCP2515_WriteByteSequence+0x50>)
 8001016:	f002 fbab 	bl	8003770 <HAL_GPIO_WritePin>
	FBL_CanSpi_SPI_Tx(FBL_CANSPI_MCP2515_WRITE);
 800101a:	2002      	movs	r0, #2
 800101c:	f000 f89a 	bl	8001154 <FBL_CanSpi_SPI_Tx>
	FBL_CanSpi_SPI_Tx(startAddress);
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	4618      	mov	r0, r3
 8001024:	f000 f896 	bl	8001154 <FBL_CanSpi_SPI_Tx>
	FBL_CanSpi_SPI_TxBuffer(data, (endAddress - startAddress + 1));
 8001028:	79ba      	ldrb	r2, [r7, #6]
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	b2db      	uxtb	r3, r3
 8001030:	3301      	adds	r3, #1
 8001032:	b2db      	uxtb	r3, r3
 8001034:	4619      	mov	r1, r3
 8001036:	6838      	ldr	r0, [r7, #0]
 8001038:	f000 f89e 	bl	8001178 <FBL_CanSpi_SPI_TxBuffer>
	FBL_CANSPI_MCP2515_CS_HIGH();
 800103c:	2201      	movs	r2, #1
 800103e:	2110      	movs	r1, #16
 8001040:	4803      	ldr	r0, [pc, #12]	@ (8001050 <FBL_CanSpi_MCP2515_WriteByteSequence+0x50>)
 8001042:	f002 fb95 	bl	8003770 <HAL_GPIO_WritePin>
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40020800 	.word	0x40020800

08001054 <FBL_CanSpi_MCP2515_LoadTxSequence>:
void FBL_CanSpi_MCP2515_LoadTxSequence(uint8 instruction, uint8 *idReg, uint8 dlc, uint8 *data)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	60b9      	str	r1, [r7, #8]
 800105c:	607b      	str	r3, [r7, #4]
 800105e:	4603      	mov	r3, r0
 8001060:	73fb      	strb	r3, [r7, #15]
 8001062:	4613      	mov	r3, r2
 8001064:	73bb      	strb	r3, [r7, #14]
	FBL_CANSPI_MCP2515_CS_LOW();
 8001066:	2200      	movs	r2, #0
 8001068:	2110      	movs	r1, #16
 800106a:	480e      	ldr	r0, [pc, #56]	@ (80010a4 <FBL_CanSpi_MCP2515_LoadTxSequence+0x50>)
 800106c:	f002 fb80 	bl	8003770 <HAL_GPIO_WritePin>
	FBL_CanSpi_SPI_Tx(instruction);
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	4618      	mov	r0, r3
 8001074:	f000 f86e 	bl	8001154 <FBL_CanSpi_SPI_Tx>
	FBL_CanSpi_SPI_TxBuffer(idReg, 4);
 8001078:	2104      	movs	r1, #4
 800107a:	68b8      	ldr	r0, [r7, #8]
 800107c:	f000 f87c 	bl	8001178 <FBL_CanSpi_SPI_TxBuffer>
	FBL_CanSpi_SPI_Tx(dlc);
 8001080:	7bbb      	ldrb	r3, [r7, #14]
 8001082:	4618      	mov	r0, r3
 8001084:	f000 f866 	bl	8001154 <FBL_CanSpi_SPI_Tx>
	FBL_CanSpi_SPI_TxBuffer(data, dlc);
 8001088:	7bbb      	ldrb	r3, [r7, #14]
 800108a:	4619      	mov	r1, r3
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f000 f873 	bl	8001178 <FBL_CanSpi_SPI_TxBuffer>
	FBL_CANSPI_MCP2515_CS_HIGH();
 8001092:	2201      	movs	r2, #1
 8001094:	2110      	movs	r1, #16
 8001096:	4803      	ldr	r0, [pc, #12]	@ (80010a4 <FBL_CanSpi_MCP2515_LoadTxSequence+0x50>)
 8001098:	f002 fb6a 	bl	8003770 <HAL_GPIO_WritePin>
}
 800109c:	bf00      	nop
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40020800 	.word	0x40020800

080010a8 <FBL_CanSpi_MCP2515_RequestToSend>:
void FBL_CanSpi_MCP2515_RequestToSend(uint8 instruction)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	71fb      	strb	r3, [r7, #7]
	FBL_CANSPI_MCP2515_CS_LOW();
 80010b2:	2200      	movs	r2, #0
 80010b4:	2110      	movs	r1, #16
 80010b6:	4808      	ldr	r0, [pc, #32]	@ (80010d8 <FBL_CanSpi_MCP2515_RequestToSend+0x30>)
 80010b8:	f002 fb5a 	bl	8003770 <HAL_GPIO_WritePin>
	FBL_CanSpi_SPI_Tx(instruction);
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	4618      	mov	r0, r3
 80010c0:	f000 f848 	bl	8001154 <FBL_CanSpi_SPI_Tx>
	FBL_CANSPI_MCP2515_CS_HIGH();
 80010c4:	2201      	movs	r2, #1
 80010c6:	2110      	movs	r1, #16
 80010c8:	4803      	ldr	r0, [pc, #12]	@ (80010d8 <FBL_CanSpi_MCP2515_RequestToSend+0x30>)
 80010ca:	f002 fb51 	bl	8003770 <HAL_GPIO_WritePin>
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40020800 	.word	0x40020800

080010dc <FBL_CanSpi_MCP2515_ReadStatus>:
uint8 FBL_CanSpi_MCP2515_ReadStatus(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
	static uint8 FBL_retVal = 0;
	FBL_CANSPI_MCP2515_CS_LOW();
 80010e0:	2200      	movs	r2, #0
 80010e2:	2110      	movs	r1, #16
 80010e4:	480a      	ldr	r0, [pc, #40]	@ (8001110 <FBL_CanSpi_MCP2515_ReadStatus+0x34>)
 80010e6:	f002 fb43 	bl	8003770 <HAL_GPIO_WritePin>
	FBL_CanSpi_SPI_Tx(FBL_CANSPI_MCP2515_READ_STATUS);
 80010ea:	20a0      	movs	r0, #160	@ 0xa0
 80010ec:	f000 f832 	bl	8001154 <FBL_CanSpi_SPI_Tx>
	FBL_retVal = FBL_CanSpi_SPI_Rx();
 80010f0:	f000 f856 	bl	80011a0 <FBL_CanSpi_SPI_Rx>
 80010f4:	4603      	mov	r3, r0
 80010f6:	461a      	mov	r2, r3
 80010f8:	4b06      	ldr	r3, [pc, #24]	@ (8001114 <FBL_CanSpi_MCP2515_ReadStatus+0x38>)
 80010fa:	701a      	strb	r2, [r3, #0]
	FBL_CANSPI_MCP2515_CS_HIGH();
 80010fc:	2201      	movs	r2, #1
 80010fe:	2110      	movs	r1, #16
 8001100:	4803      	ldr	r0, [pc, #12]	@ (8001110 <FBL_CanSpi_MCP2515_ReadStatus+0x34>)
 8001102:	f002 fb35 	bl	8003770 <HAL_GPIO_WritePin>
	return FBL_retVal;
 8001106:	4b03      	ldr	r3, [pc, #12]	@ (8001114 <FBL_CanSpi_MCP2515_ReadStatus+0x38>)
 8001108:	781b      	ldrb	r3, [r3, #0]
}
 800110a:	4618      	mov	r0, r3
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40020800 	.word	0x40020800
 8001114:	20010092 	.word	0x20010092

08001118 <FBL_CanSpi_MCP2515_GetRxStatus>:
uint8 FBL_CanSpi_MCP2515_GetRxStatus(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
	static uint8 FBL_retVal = 0;
	FBL_CANSPI_MCP2515_CS_LOW();
 800111c:	2200      	movs	r2, #0
 800111e:	2110      	movs	r1, #16
 8001120:	480a      	ldr	r0, [pc, #40]	@ (800114c <FBL_CanSpi_MCP2515_GetRxStatus+0x34>)
 8001122:	f002 fb25 	bl	8003770 <HAL_GPIO_WritePin>
	FBL_CanSpi_SPI_Tx(FBL_CANSPI_MCP2515_RX_STATUS);
 8001126:	20b0      	movs	r0, #176	@ 0xb0
 8001128:	f000 f814 	bl	8001154 <FBL_CanSpi_SPI_Tx>
	FBL_retVal = FBL_CanSpi_SPI_Rx();
 800112c:	f000 f838 	bl	80011a0 <FBL_CanSpi_SPI_Rx>
 8001130:	4603      	mov	r3, r0
 8001132:	461a      	mov	r2, r3
 8001134:	4b06      	ldr	r3, [pc, #24]	@ (8001150 <FBL_CanSpi_MCP2515_GetRxStatus+0x38>)
 8001136:	701a      	strb	r2, [r3, #0]
	FBL_CANSPI_MCP2515_CS_HIGH();
 8001138:	2201      	movs	r2, #1
 800113a:	2110      	movs	r1, #16
 800113c:	4803      	ldr	r0, [pc, #12]	@ (800114c <FBL_CanSpi_MCP2515_GetRxStatus+0x34>)
 800113e:	f002 fb17 	bl	8003770 <HAL_GPIO_WritePin>
	return FBL_retVal;
 8001142:	4b03      	ldr	r3, [pc, #12]	@ (8001150 <FBL_CanSpi_MCP2515_GetRxStatus+0x38>)
 8001144:	781b      	ldrb	r3, [r3, #0]
}
 8001146:	4618      	mov	r0, r3
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40020800 	.word	0x40020800
 8001150:	20010093 	.word	0x20010093

08001154 <FBL_CanSpi_SPI_Tx>:
	FBL_CanSpi_SPI_Tx(mask);
	FBL_CanSpi_SPI_Tx(data);
	FBL_CANSPI_MCP2515_CS_HIGH();
}
void FBL_CanSpi_SPI_Tx(uint8 data)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(FBL_CANSPI_SPI_CAN, &data, 1, 3);
 800115e:	1df9      	adds	r1, r7, #7
 8001160:	2303      	movs	r3, #3
 8001162:	2201      	movs	r2, #1
 8001164:	4803      	ldr	r0, [pc, #12]	@ (8001174 <FBL_CanSpi_SPI_Tx+0x20>)
 8001166:	f003 fb3d 	bl	80047e4 <HAL_SPI_Transmit>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	2001009c 	.word	0x2001009c

08001178 <FBL_CanSpi_SPI_TxBuffer>:
void FBL_CanSpi_SPI_TxBuffer(uint8 *buffer, uint8 length)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	460b      	mov	r3, r1
 8001182:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(FBL_CANSPI_SPI_CAN, buffer, length, 3);
 8001184:	78fb      	ldrb	r3, [r7, #3]
 8001186:	b29a      	uxth	r2, r3
 8001188:	2303      	movs	r3, #3
 800118a:	6879      	ldr	r1, [r7, #4]
 800118c:	4803      	ldr	r0, [pc, #12]	@ (800119c <FBL_CanSpi_SPI_TxBuffer+0x24>)
 800118e:	f003 fb29 	bl	80047e4 <HAL_SPI_Transmit>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	2001009c 	.word	0x2001009c

080011a0 <FBL_CanSpi_SPI_Rx>:
uint8 FBL_CanSpi_SPI_Rx(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
	static uint8 FBL_retVal = 0;

	HAL_SPI_Receive(FBL_CANSPI_SPI_CAN, &FBL_retVal, 1, 3);
 80011a4:	2303      	movs	r3, #3
 80011a6:	2201      	movs	r2, #1
 80011a8:	4903      	ldr	r1, [pc, #12]	@ (80011b8 <FBL_CanSpi_SPI_Rx+0x18>)
 80011aa:	4804      	ldr	r0, [pc, #16]	@ (80011bc <FBL_CanSpi_SPI_Rx+0x1c>)
 80011ac:	f003 fc6e 	bl	8004a8c <HAL_SPI_Receive>

	return FBL_retVal;
 80011b0:	4b01      	ldr	r3, [pc, #4]	@ (80011b8 <FBL_CanSpi_SPI_Rx+0x18>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20010094 	.word	0x20010094
 80011bc:	2001009c 	.word	0x2001009c

080011c0 <FBL_CanSpi_SPI_RxBuffer>:
void FBL_CanSpi_SPI_RxBuffer(uint8 *buffer, uint8 length)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	460b      	mov	r3, r1
 80011ca:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(FBL_CANSPI_SPI_CAN, buffer, length, 3);
 80011cc:	78fb      	ldrb	r3, [r7, #3]
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	2303      	movs	r3, #3
 80011d2:	6879      	ldr	r1, [r7, #4]
 80011d4:	4803      	ldr	r0, [pc, #12]	@ (80011e4 <FBL_CanSpi_SPI_RxBuffer+0x24>)
 80011d6:	f003 fc59 	bl	8004a8c <HAL_SPI_Receive>
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	2001009c 	.word	0x2001009c

080011e8 <FBL_NvM_EraseFlash_CODING>:
		/* Do nothing. */
	}
	return sector;
}
uint32 FBL_NvM_EraseFlash_CODING(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b088      	sub	sp, #32
 80011ec:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef EraseInitStruct = {0};
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
	uint32 SECTORError = 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	603b      	str	r3, [r7, #0]
	uint32 StartSector = 0;
 8001200:	2300      	movs	r3, #0
 8001202:	61fb      	str	r3, [r7, #28]
	uint32 EndSector = 0;
 8001204:	2300      	movs	r3, #0
 8001206:	61bb      	str	r3, [r7, #24]
	StartSector = FLASH_SECTOR_3;
 8001208:	2303      	movs	r3, #3
 800120a:	61fb      	str	r3, [r7, #28]
	EndSector = FLASH_SECTOR_3;
 800120c:	2303      	movs	r3, #3
 800120e:	61bb      	str	r3, [r7, #24]
	HAL_FLASH_Unlock();
 8001210:	f001 fca4 	bl	8002b5c <HAL_FLASH_Unlock>
	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8001214:	2300      	movs	r3, #0
 8001216:	607b      	str	r3, [r7, #4]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8001218:	2302      	movs	r3, #2
 800121a:	617b      	str	r3, [r7, #20]
	EraseInitStruct.Sector        = StartSector;
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	60fb      	str	r3, [r7, #12]
	EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	3301      	adds	r3, #1
 8001228:	613b      	str	r3, [r7, #16]
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK) return HAL_FLASH_GetError();
 800122a:	463a      	mov	r2, r7
 800122c:	1d3b      	adds	r3, r7, #4
 800122e:	4611      	mov	r1, r2
 8001230:	4618      	mov	r0, r3
 8001232:	f001 fe7d 	bl	8002f30 <HAL_FLASHEx_Erase>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d003      	beq.n	8001244 <FBL_NvM_EraseFlash_CODING+0x5c>
 800123c:	f001 fcc0 	bl	8002bc0 <HAL_FLASH_GetError>
 8001240:	4603      	mov	r3, r0
 8001242:	e002      	b.n	800124a <FBL_NvM_EraseFlash_CODING+0x62>
	else
	{
		/* Do nothing. */
	}
	HAL_FLASH_Lock();
 8001244:	f001 fcac 	bl	8002ba0 <HAL_FLASH_Lock>
	return 0;
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3720      	adds	r7, #32
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <FBL_NvM_EraseFlash_CALIBRATION>:
uint32 FBL_NvM_EraseFlash_CALIBRATION(void)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b088      	sub	sp, #32
 8001256:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef EraseInitStruct = {0};
 8001258:	1d3b      	adds	r3, r7, #4
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	611a      	str	r2, [r3, #16]
	uint32 SECTORError = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	603b      	str	r3, [r7, #0]
	uint32 StartSector = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
	uint32 EndSector = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	61bb      	str	r3, [r7, #24]
	StartSector = FLASH_SECTOR_2;
 8001272:	2302      	movs	r3, #2
 8001274:	61fb      	str	r3, [r7, #28]
	EndSector = FLASH_SECTOR_2;
 8001276:	2302      	movs	r3, #2
 8001278:	61bb      	str	r3, [r7, #24]
	HAL_FLASH_Unlock();
 800127a:	f001 fc6f 	bl	8002b5c <HAL_FLASH_Unlock>
	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 800127e:	2300      	movs	r3, #0
 8001280:	607b      	str	r3, [r7, #4]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8001282:	2302      	movs	r3, #2
 8001284:	617b      	str	r3, [r7, #20]
	EraseInitStruct.Sector        = StartSector;
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	60fb      	str	r3, [r7, #12]
	EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	3301      	adds	r3, #1
 8001292:	613b      	str	r3, [r7, #16]
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK) return HAL_FLASH_GetError();
 8001294:	463a      	mov	r2, r7
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	4611      	mov	r1, r2
 800129a:	4618      	mov	r0, r3
 800129c:	f001 fe48 	bl	8002f30 <HAL_FLASHEx_Erase>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <FBL_NvM_EraseFlash_CALIBRATION+0x5c>
 80012a6:	f001 fc8b 	bl	8002bc0 <HAL_FLASH_GetError>
 80012aa:	4603      	mov	r3, r0
 80012ac:	e002      	b.n	80012b4 <FBL_NvM_EraseFlash_CALIBRATION+0x62>
	else
	{
		/* Do nothing. */
	}
	HAL_FLASH_Lock();
 80012ae:	f001 fc77 	bl	8002ba0 <HAL_FLASH_Lock>
	return 0;
 80012b2:	2300      	movs	r3, #0
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3720      	adds	r7, #32
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <FBL_NvM_EraseFlash_APPL>:
uint32 FBL_NvM_EraseFlash_APPL(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b088      	sub	sp, #32
 80012c0:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef EraseInitStruct = {0};
 80012c2:	1d3b      	adds	r3, r7, #4
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]
	uint32 SECTORError = 0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	603b      	str	r3, [r7, #0]
	uint32 StartSector = 0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
	uint32 EndSector = 0;
 80012d8:	2300      	movs	r3, #0
 80012da:	61bb      	str	r3, [r7, #24]
	StartSector = FLASH_SECTOR_7;
 80012dc:	2307      	movs	r3, #7
 80012de:	61fb      	str	r3, [r7, #28]
	EndSector = FLASH_SECTOR_7;
 80012e0:	2307      	movs	r3, #7
 80012e2:	61bb      	str	r3, [r7, #24]
	HAL_FLASH_Unlock();
 80012e4:	f001 fc3a 	bl	8002b5c <HAL_FLASH_Unlock>
	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 80012e8:	2300      	movs	r3, #0
 80012ea:	607b      	str	r3, [r7, #4]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 80012ec:	2302      	movs	r3, #2
 80012ee:	617b      	str	r3, [r7, #20]
	EraseInitStruct.Sector        = StartSector;
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	60fb      	str	r3, [r7, #12]
	EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	3301      	adds	r3, #1
 80012fc:	613b      	str	r3, [r7, #16]
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK) return HAL_FLASH_GetError();
 80012fe:	463a      	mov	r2, r7
 8001300:	1d3b      	adds	r3, r7, #4
 8001302:	4611      	mov	r1, r2
 8001304:	4618      	mov	r0, r3
 8001306:	f001 fe13 	bl	8002f30 <HAL_FLASHEx_Erase>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d003      	beq.n	8001318 <FBL_NvM_EraseFlash_APPL+0x5c>
 8001310:	f001 fc56 	bl	8002bc0 <HAL_FLASH_GetError>
 8001314:	4603      	mov	r3, r0
 8001316:	e002      	b.n	800131e <FBL_NvM_EraseFlash_APPL+0x62>
	else
	{
		/* Do nothing. */
	}
	HAL_FLASH_Lock();
 8001318:	f001 fc42 	bl	8002ba0 <HAL_FLASH_Lock>
	return 0;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3720      	adds	r7, #32
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <FBL_NvM_FlashWriteData>:
uint32 FBL_NvM_FlashWriteData(uint32 StartSectorAddress, uint32 *Data, uint16 numberofwords)
{
 8001326:	b5b0      	push	{r4, r5, r7, lr}
 8001328:	b086      	sub	sp, #24
 800132a:	af00      	add	r7, sp, #0
 800132c:	60f8      	str	r0, [r7, #12]
 800132e:	60b9      	str	r1, [r7, #8]
 8001330:	4613      	mov	r3, r2
 8001332:	80fb      	strh	r3, [r7, #6]
	uint32 sofar = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]
	HAL_FLASH_Unlock();
 8001338:	f001 fc10 	bl	8002b5c <HAL_FLASH_Unlock>
	while (sofar < numberofwords)
 800133c:	e01b      	b.n	8001376 <FBL_NvM_FlashWriteData+0x50>
	{
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, Data[sofar]) == HAL_OK)
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	68ba      	ldr	r2, [r7, #8]
 8001344:	4413      	add	r3, r2
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2200      	movs	r2, #0
 800134a:	461c      	mov	r4, r3
 800134c:	4615      	mov	r5, r2
 800134e:	4622      	mov	r2, r4
 8001350:	462b      	mov	r3, r5
 8001352:	68f9      	ldr	r1, [r7, #12]
 8001354:	2002      	movs	r0, #2
 8001356:	f001 faeb 	bl	8002930 <HAL_FLASH_Program>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d106      	bne.n	800136e <FBL_NvM_FlashWriteData+0x48>
		{
			StartSectorAddress += 4;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	3304      	adds	r3, #4
 8001364:	60fb      	str	r3, [r7, #12]
			sofar++;
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	3301      	adds	r3, #1
 800136a:	617b      	str	r3, [r7, #20]
 800136c:	e003      	b.n	8001376 <FBL_NvM_FlashWriteData+0x50>
		}
		else return HAL_FLASH_GetError ();
 800136e:	f001 fc27 	bl	8002bc0 <HAL_FLASH_GetError>
 8001372:	4603      	mov	r3, r0
 8001374:	e006      	b.n	8001384 <FBL_NvM_FlashWriteData+0x5e>
	while (sofar < numberofwords)
 8001376:	88fb      	ldrh	r3, [r7, #6]
 8001378:	697a      	ldr	r2, [r7, #20]
 800137a:	429a      	cmp	r2, r3
 800137c:	d3df      	bcc.n	800133e <FBL_NvM_FlashWriteData+0x18>
	}
	HAL_FLASH_Lock();
 800137e:	f001 fc0f 	bl	8002ba0 <HAL_FLASH_Lock>
	return 0;
 8001382:	2300      	movs	r3, #0
}
 8001384:	4618      	mov	r0, r3
 8001386:	3718      	adds	r7, #24
 8001388:	46bd      	mov	sp, r7
 800138a:	bdb0      	pop	{r4, r5, r7, pc}

0800138c <FBL_NvM_FlashReadData>:
void FBL_NvM_FlashReadData(uint32 StartSectorAddress, uint32 *RxBuf, uint16 numberofwords)
{
 800138c:	b480      	push	{r7}
 800138e:	b087      	sub	sp, #28
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	4613      	mov	r3, r2
 8001398:	80fb      	strh	r3, [r7, #6]
	for (uint16_t i = 0; i < numberofwords; i++) RxBuf[i] = *(__IO uint32_t *)(StartSectorAddress + (i * 4));
 800139a:	2300      	movs	r3, #0
 800139c:	82fb      	strh	r3, [r7, #22]
 800139e:	e00e      	b.n	80013be <FBL_NvM_FlashReadData+0x32>
 80013a0:	8afb      	ldrh	r3, [r7, #22]
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	461a      	mov	r2, r3
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	4413      	add	r3, r2
 80013aa:	4619      	mov	r1, r3
 80013ac:	8afb      	ldrh	r3, [r7, #22]
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	68ba      	ldr	r2, [r7, #8]
 80013b2:	4413      	add	r3, r2
 80013b4:	680a      	ldr	r2, [r1, #0]
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	8afb      	ldrh	r3, [r7, #22]
 80013ba:	3301      	adds	r3, #1
 80013bc:	82fb      	strh	r3, [r7, #22]
 80013be:	8afa      	ldrh	r2, [r7, #22]
 80013c0:	88fb      	ldrh	r3, [r7, #6]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d3ec      	bcc.n	80013a0 <FBL_NvM_FlashReadData+0x14>
}
 80013c6:	bf00      	nop
 80013c8:	bf00      	nop
 80013ca:	371c      	adds	r7, #28
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <FBL_DiagRoutine_DSC_RequestDownload>:
void FBL_DiagRoutine_DSC_RequestDownload(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
	FBL_TxFrame.frame.dlc = 8;
 80013d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001458 <FBL_DiagRoutine_DSC_RequestDownload+0x84>)
 80013da:	2208      	movs	r2, #8
 80013dc:	721a      	strb	r2, [r3, #8]
	FBL_TxFrame.frame.id = 0x701;
 80013de:	4b1e      	ldr	r3, [pc, #120]	@ (8001458 <FBL_DiagRoutine_DSC_RequestDownload+0x84>)
 80013e0:	f240 7201 	movw	r2, #1793	@ 0x701
 80013e4:	605a      	str	r2, [r3, #4]
	FBL_TxFrame.frame.idType = 1;
 80013e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001458 <FBL_DiagRoutine_DSC_RequestDownload+0x84>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	701a      	strb	r2, [r3, #0]
	FBL_TxFrame.frame.data0 = 0x05;
 80013ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001458 <FBL_DiagRoutine_DSC_RequestDownload+0x84>)
 80013ee:	2205      	movs	r2, #5
 80013f0:	725a      	strb	r2, [r3, #9]
	FBL_TxFrame.frame.data1 = 0x74;
 80013f2:	4b19      	ldr	r3, [pc, #100]	@ (8001458 <FBL_DiagRoutine_DSC_RequestDownload+0x84>)
 80013f4:	2274      	movs	r2, #116	@ 0x74
 80013f6:	729a      	strb	r2, [r3, #10]
	FBL_TxFrame.frame.data2 = 0x20;
 80013f8:	4b17      	ldr	r3, [pc, #92]	@ (8001458 <FBL_DiagRoutine_DSC_RequestDownload+0x84>)
 80013fa:	2220      	movs	r2, #32
 80013fc:	72da      	strb	r2, [r3, #11]
	FBL_TxFrame.frame.data3 = 0x02;
 80013fe:	4b16      	ldr	r3, [pc, #88]	@ (8001458 <FBL_DiagRoutine_DSC_RequestDownload+0x84>)
 8001400:	2202      	movs	r2, #2
 8001402:	731a      	strb	r2, [r3, #12]
	FBL_TxFrame.frame.data4 = 0x02;
 8001404:	4b14      	ldr	r3, [pc, #80]	@ (8001458 <FBL_DiagRoutine_DSC_RequestDownload+0x84>)
 8001406:	2202      	movs	r2, #2
 8001408:	735a      	strb	r2, [r3, #13]
	FBL_CanSpi_Transmit(&FBL_TxFrame);
 800140a:	4813      	ldr	r0, [pc, #76]	@ (8001458 <FBL_DiagRoutine_DSC_RequestDownload+0x84>)
 800140c:	f7ff fb3c 	bl	8000a88 <FBL_CanSpi_Transmit>
	FBL_TxFrame.frame.dlc = 0;
 8001410:	4b11      	ldr	r3, [pc, #68]	@ (8001458 <FBL_DiagRoutine_DSC_RequestDownload+0x84>)
 8001412:	2200      	movs	r2, #0
 8001414:	721a      	strb	r2, [r3, #8]
	FBL_TxFrame.frame.id = 0;
 8001416:	4b10      	ldr	r3, [pc, #64]	@ (8001458 <FBL_DiagRoutine_DSC_RequestDownload+0x84>)
 8001418:	2200      	movs	r2, #0
 800141a:	605a      	str	r2, [r3, #4]
	FBL_TxFrame.frame.idType = 0;
 800141c:	4b0e      	ldr	r3, [pc, #56]	@ (8001458 <FBL_DiagRoutine_DSC_RequestDownload+0x84>)
 800141e:	2200      	movs	r2, #0
 8001420:	701a      	strb	r2, [r3, #0]
	FBL_TxFrame.frame.data0 = 0;
 8001422:	4b0d      	ldr	r3, [pc, #52]	@ (8001458 <FBL_DiagRoutine_DSC_RequestDownload+0x84>)
 8001424:	2200      	movs	r2, #0
 8001426:	725a      	strb	r2, [r3, #9]
	FBL_TxFrame.frame.data1 = 0;
 8001428:	4b0b      	ldr	r3, [pc, #44]	@ (8001458 <FBL_DiagRoutine_DSC_RequestDownload+0x84>)
 800142a:	2200      	movs	r2, #0
 800142c:	729a      	strb	r2, [r3, #10]
	FBL_TxFrame.frame.data2 = 0;
 800142e:	4b0a      	ldr	r3, [pc, #40]	@ (8001458 <FBL_DiagRoutine_DSC_RequestDownload+0x84>)
 8001430:	2200      	movs	r2, #0
 8001432:	72da      	strb	r2, [r3, #11]
	FBL_TxFrame.frame.data3 = 0;
 8001434:	4b08      	ldr	r3, [pc, #32]	@ (8001458 <FBL_DiagRoutine_DSC_RequestDownload+0x84>)
 8001436:	2200      	movs	r2, #0
 8001438:	731a      	strb	r2, [r3, #12]
	FBL_TxFrame.frame.data4 = 0;
 800143a:	4b07      	ldr	r3, [pc, #28]	@ (8001458 <FBL_DiagRoutine_DSC_RequestDownload+0x84>)
 800143c:	2200      	movs	r2, #0
 800143e:	735a      	strb	r2, [r3, #13]
	FBL_TxFrame.frame.data5 = 0;
 8001440:	4b05      	ldr	r3, [pc, #20]	@ (8001458 <FBL_DiagRoutine_DSC_RequestDownload+0x84>)
 8001442:	2200      	movs	r2, #0
 8001444:	739a      	strb	r2, [r3, #14]
	FBL_TxFrame.frame.data6 = 0;
 8001446:	4b04      	ldr	r3, [pc, #16]	@ (8001458 <FBL_DiagRoutine_DSC_RequestDownload+0x84>)
 8001448:	2200      	movs	r2, #0
 800144a:	73da      	strb	r2, [r3, #15]
	FBL_TxFrame.frame.data7 = 0;
 800144c:	4b02      	ldr	r3, [pc, #8]	@ (8001458 <FBL_DiagRoutine_DSC_RequestDownload+0x84>)
 800144e:	2200      	movs	r2, #0
 8001450:	741a      	strb	r2, [r3, #16]
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	2001004c 	.word	0x2001004c

0800145c <FBL_DiagRoutine_DSC_TransferData>:
void FBL_DiagRoutine_DSC_TransferData(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
	if(FBL_DSC_State == PROGRAMMING)
 8001460:	4b73      	ldr	r3, [pc, #460]	@ (8001630 <FBL_DiagRoutine_DSC_TransferData+0x1d4>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b02      	cmp	r3, #2
 8001466:	d13c      	bne.n	80014e2 <FBL_DiagRoutine_DSC_TransferData+0x86>
	{
		FBL_ProgrammingData = (FBL_RxFrame.frame.data6 << 24) | (FBL_RxFrame.frame.data5 << 16) | (FBL_RxFrame.frame.data4 << 8) | FBL_RxFrame.frame.data3;
 8001468:	4b72      	ldr	r3, [pc, #456]	@ (8001634 <FBL_DiagRoutine_DSC_TransferData+0x1d8>)
 800146a:	7bdb      	ldrb	r3, [r3, #15]
 800146c:	061a      	lsls	r2, r3, #24
 800146e:	4b71      	ldr	r3, [pc, #452]	@ (8001634 <FBL_DiagRoutine_DSC_TransferData+0x1d8>)
 8001470:	7b9b      	ldrb	r3, [r3, #14]
 8001472:	041b      	lsls	r3, r3, #16
 8001474:	431a      	orrs	r2, r3
 8001476:	4b6f      	ldr	r3, [pc, #444]	@ (8001634 <FBL_DiagRoutine_DSC_TransferData+0x1d8>)
 8001478:	7b5b      	ldrb	r3, [r3, #13]
 800147a:	021b      	lsls	r3, r3, #8
 800147c:	4313      	orrs	r3, r2
 800147e:	4a6d      	ldr	r2, [pc, #436]	@ (8001634 <FBL_DiagRoutine_DSC_TransferData+0x1d8>)
 8001480:	7b12      	ldrb	r2, [r2, #12]
 8001482:	4313      	orrs	r3, r2
 8001484:	461a      	mov	r2, r3
 8001486:	4b6c      	ldr	r3, [pc, #432]	@ (8001638 <FBL_DiagRoutine_DSC_TransferData+0x1dc>)
 8001488:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800148a:	b672      	cpsid	i
}
 800148c:	bf00      	nop
		__disable_irq();
		FBL_NvM_FlashWriteData(FBL_ProgrammingAddress, &FBL_ProgrammingData, 1);
 800148e:	4b6b      	ldr	r3, [pc, #428]	@ (800163c <FBL_DiagRoutine_DSC_TransferData+0x1e0>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2201      	movs	r2, #1
 8001494:	4968      	ldr	r1, [pc, #416]	@ (8001638 <FBL_DiagRoutine_DSC_TransferData+0x1dc>)
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff ff45 	bl	8001326 <FBL_NvM_FlashWriteData>
  __ASM volatile ("cpsie i" : : : "memory");
 800149c:	b662      	cpsie	i
}
 800149e:	bf00      	nop
		__enable_irq();
		FBL_ProgrammingAddress += 4;
 80014a0:	4b66      	ldr	r3, [pc, #408]	@ (800163c <FBL_DiagRoutine_DSC_TransferData+0x1e0>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	3304      	adds	r3, #4
 80014a6:	4a65      	ldr	r2, [pc, #404]	@ (800163c <FBL_DiagRoutine_DSC_TransferData+0x1e0>)
 80014a8:	6013      	str	r3, [r2, #0]
		FBL_ProgrammingIndex += 1;
 80014aa:	4b65      	ldr	r3, [pc, #404]	@ (8001640 <FBL_DiagRoutine_DSC_TransferData+0x1e4>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	3301      	adds	r3, #1
 80014b0:	4a63      	ldr	r2, [pc, #396]	@ (8001640 <FBL_DiagRoutine_DSC_TransferData+0x1e4>)
 80014b2:	6013      	str	r3, [r2, #0]
		FBL_TxFrame.frame.dlc = 3;
 80014b4:	4b63      	ldr	r3, [pc, #396]	@ (8001644 <FBL_DiagRoutine_DSC_TransferData+0x1e8>)
 80014b6:	2203      	movs	r2, #3
 80014b8:	721a      	strb	r2, [r3, #8]
		FBL_TxFrame.frame.id = 0x701;
 80014ba:	4b62      	ldr	r3, [pc, #392]	@ (8001644 <FBL_DiagRoutine_DSC_TransferData+0x1e8>)
 80014bc:	f240 7201 	movw	r2, #1793	@ 0x701
 80014c0:	605a      	str	r2, [r3, #4]
		FBL_TxFrame.frame.idType = 1;
 80014c2:	4b60      	ldr	r3, [pc, #384]	@ (8001644 <FBL_DiagRoutine_DSC_TransferData+0x1e8>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	701a      	strb	r2, [r3, #0]
		FBL_TxFrame.frame.data0 = 0x02;
 80014c8:	4b5e      	ldr	r3, [pc, #376]	@ (8001644 <FBL_DiagRoutine_DSC_TransferData+0x1e8>)
 80014ca:	2202      	movs	r2, #2
 80014cc:	725a      	strb	r2, [r3, #9]
		FBL_TxFrame.frame.data1 = 0x76;
 80014ce:	4b5d      	ldr	r3, [pc, #372]	@ (8001644 <FBL_DiagRoutine_DSC_TransferData+0x1e8>)
 80014d0:	2276      	movs	r2, #118	@ 0x76
 80014d2:	729a      	strb	r2, [r3, #10]
		FBL_TxFrame.frame.data2 = 0x01;
 80014d4:	4b5b      	ldr	r3, [pc, #364]	@ (8001644 <FBL_DiagRoutine_DSC_TransferData+0x1e8>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	72da      	strb	r2, [r3, #11]
		FBL_CanSpi_Transmit(&FBL_TxFrame);
 80014da:	485a      	ldr	r0, [pc, #360]	@ (8001644 <FBL_DiagRoutine_DSC_TransferData+0x1e8>)
 80014dc:	f7ff fad4 	bl	8000a88 <FBL_CanSpi_Transmit>
 80014e0:	e082      	b.n	80015e8 <FBL_DiagRoutine_DSC_TransferData+0x18c>
	}
	else if(FBL_DSC_State == CODING)
 80014e2:	4b53      	ldr	r3, [pc, #332]	@ (8001630 <FBL_DiagRoutine_DSC_TransferData+0x1d4>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b03      	cmp	r3, #3
 80014e8:	d13d      	bne.n	8001566 <FBL_DiagRoutine_DSC_TransferData+0x10a>
	{
		FBL_ProgrammingData = (FBL_RxFrame.frame.data6 << 0) | (FBL_RxFrame.frame.data5 << 8) | (FBL_RxFrame.frame.data4 << 16) | (FBL_RxFrame.frame.data3 << 24);
 80014ea:	4b52      	ldr	r3, [pc, #328]	@ (8001634 <FBL_DiagRoutine_DSC_TransferData+0x1d8>)
 80014ec:	7bdb      	ldrb	r3, [r3, #15]
 80014ee:	461a      	mov	r2, r3
 80014f0:	4b50      	ldr	r3, [pc, #320]	@ (8001634 <FBL_DiagRoutine_DSC_TransferData+0x1d8>)
 80014f2:	7b9b      	ldrb	r3, [r3, #14]
 80014f4:	021b      	lsls	r3, r3, #8
 80014f6:	431a      	orrs	r2, r3
 80014f8:	4b4e      	ldr	r3, [pc, #312]	@ (8001634 <FBL_DiagRoutine_DSC_TransferData+0x1d8>)
 80014fa:	7b5b      	ldrb	r3, [r3, #13]
 80014fc:	041b      	lsls	r3, r3, #16
 80014fe:	431a      	orrs	r2, r3
 8001500:	4b4c      	ldr	r3, [pc, #304]	@ (8001634 <FBL_DiagRoutine_DSC_TransferData+0x1d8>)
 8001502:	7b1b      	ldrb	r3, [r3, #12]
 8001504:	061b      	lsls	r3, r3, #24
 8001506:	4313      	orrs	r3, r2
 8001508:	461a      	mov	r2, r3
 800150a:	4b4b      	ldr	r3, [pc, #300]	@ (8001638 <FBL_DiagRoutine_DSC_TransferData+0x1dc>)
 800150c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800150e:	b672      	cpsid	i
}
 8001510:	bf00      	nop
		__disable_irq();
		FBL_NvM_FlashWriteData(FBL_ProgrammingAddress, &FBL_ProgrammingData, 1);
 8001512:	4b4a      	ldr	r3, [pc, #296]	@ (800163c <FBL_DiagRoutine_DSC_TransferData+0x1e0>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2201      	movs	r2, #1
 8001518:	4947      	ldr	r1, [pc, #284]	@ (8001638 <FBL_DiagRoutine_DSC_TransferData+0x1dc>)
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff ff03 	bl	8001326 <FBL_NvM_FlashWriteData>
  __ASM volatile ("cpsie i" : : : "memory");
 8001520:	b662      	cpsie	i
}
 8001522:	bf00      	nop
		__enable_irq();
		FBL_ProgrammingAddress += 4;
 8001524:	4b45      	ldr	r3, [pc, #276]	@ (800163c <FBL_DiagRoutine_DSC_TransferData+0x1e0>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	3304      	adds	r3, #4
 800152a:	4a44      	ldr	r2, [pc, #272]	@ (800163c <FBL_DiagRoutine_DSC_TransferData+0x1e0>)
 800152c:	6013      	str	r3, [r2, #0]
		FBL_ProgrammingIndex += 1;
 800152e:	4b44      	ldr	r3, [pc, #272]	@ (8001640 <FBL_DiagRoutine_DSC_TransferData+0x1e4>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	3301      	adds	r3, #1
 8001534:	4a42      	ldr	r2, [pc, #264]	@ (8001640 <FBL_DiagRoutine_DSC_TransferData+0x1e4>)
 8001536:	6013      	str	r3, [r2, #0]
		FBL_TxFrame.frame.dlc = 3;
 8001538:	4b42      	ldr	r3, [pc, #264]	@ (8001644 <FBL_DiagRoutine_DSC_TransferData+0x1e8>)
 800153a:	2203      	movs	r2, #3
 800153c:	721a      	strb	r2, [r3, #8]
		FBL_TxFrame.frame.id = 0x701;
 800153e:	4b41      	ldr	r3, [pc, #260]	@ (8001644 <FBL_DiagRoutine_DSC_TransferData+0x1e8>)
 8001540:	f240 7201 	movw	r2, #1793	@ 0x701
 8001544:	605a      	str	r2, [r3, #4]
		FBL_TxFrame.frame.idType = 1;
 8001546:	4b3f      	ldr	r3, [pc, #252]	@ (8001644 <FBL_DiagRoutine_DSC_TransferData+0x1e8>)
 8001548:	2201      	movs	r2, #1
 800154a:	701a      	strb	r2, [r3, #0]
		FBL_TxFrame.frame.data0 = 0x02;
 800154c:	4b3d      	ldr	r3, [pc, #244]	@ (8001644 <FBL_DiagRoutine_DSC_TransferData+0x1e8>)
 800154e:	2202      	movs	r2, #2
 8001550:	725a      	strb	r2, [r3, #9]
		FBL_TxFrame.frame.data1 = 0x76;
 8001552:	4b3c      	ldr	r3, [pc, #240]	@ (8001644 <FBL_DiagRoutine_DSC_TransferData+0x1e8>)
 8001554:	2276      	movs	r2, #118	@ 0x76
 8001556:	729a      	strb	r2, [r3, #10]
		FBL_TxFrame.frame.data2 = 0x01;
 8001558:	4b3a      	ldr	r3, [pc, #232]	@ (8001644 <FBL_DiagRoutine_DSC_TransferData+0x1e8>)
 800155a:	2201      	movs	r2, #1
 800155c:	72da      	strb	r2, [r3, #11]
		FBL_CanSpi_Transmit(&FBL_TxFrame);
 800155e:	4839      	ldr	r0, [pc, #228]	@ (8001644 <FBL_DiagRoutine_DSC_TransferData+0x1e8>)
 8001560:	f7ff fa92 	bl	8000a88 <FBL_CanSpi_Transmit>
 8001564:	e040      	b.n	80015e8 <FBL_DiagRoutine_DSC_TransferData+0x18c>
	}
	else if(FBL_DSC_State == CALIBRATION)
 8001566:	4b32      	ldr	r3, [pc, #200]	@ (8001630 <FBL_DiagRoutine_DSC_TransferData+0x1d4>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b04      	cmp	r3, #4
 800156c:	d13c      	bne.n	80015e8 <FBL_DiagRoutine_DSC_TransferData+0x18c>
	{
		FBL_ProgrammingData = (FBL_RxFrame.frame.data6 << 0) | (FBL_RxFrame.frame.data5 << 8) | (FBL_RxFrame.frame.data4 << 16) | (FBL_RxFrame.frame.data3 << 24);
 800156e:	4b31      	ldr	r3, [pc, #196]	@ (8001634 <FBL_DiagRoutine_DSC_TransferData+0x1d8>)
 8001570:	7bdb      	ldrb	r3, [r3, #15]
 8001572:	461a      	mov	r2, r3
 8001574:	4b2f      	ldr	r3, [pc, #188]	@ (8001634 <FBL_DiagRoutine_DSC_TransferData+0x1d8>)
 8001576:	7b9b      	ldrb	r3, [r3, #14]
 8001578:	021b      	lsls	r3, r3, #8
 800157a:	431a      	orrs	r2, r3
 800157c:	4b2d      	ldr	r3, [pc, #180]	@ (8001634 <FBL_DiagRoutine_DSC_TransferData+0x1d8>)
 800157e:	7b5b      	ldrb	r3, [r3, #13]
 8001580:	041b      	lsls	r3, r3, #16
 8001582:	431a      	orrs	r2, r3
 8001584:	4b2b      	ldr	r3, [pc, #172]	@ (8001634 <FBL_DiagRoutine_DSC_TransferData+0x1d8>)
 8001586:	7b1b      	ldrb	r3, [r3, #12]
 8001588:	061b      	lsls	r3, r3, #24
 800158a:	4313      	orrs	r3, r2
 800158c:	461a      	mov	r2, r3
 800158e:	4b2a      	ldr	r3, [pc, #168]	@ (8001638 <FBL_DiagRoutine_DSC_TransferData+0x1dc>)
 8001590:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001592:	b672      	cpsid	i
}
 8001594:	bf00      	nop
		__disable_irq();
		FBL_NvM_FlashWriteData(FBL_ProgrammingAddress, &FBL_ProgrammingData, 1);
 8001596:	4b29      	ldr	r3, [pc, #164]	@ (800163c <FBL_DiagRoutine_DSC_TransferData+0x1e0>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2201      	movs	r2, #1
 800159c:	4926      	ldr	r1, [pc, #152]	@ (8001638 <FBL_DiagRoutine_DSC_TransferData+0x1dc>)
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff fec1 	bl	8001326 <FBL_NvM_FlashWriteData>
  __ASM volatile ("cpsie i" : : : "memory");
 80015a4:	b662      	cpsie	i
}
 80015a6:	bf00      	nop
		__enable_irq();
		FBL_ProgrammingAddress += 4;
 80015a8:	4b24      	ldr	r3, [pc, #144]	@ (800163c <FBL_DiagRoutine_DSC_TransferData+0x1e0>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	3304      	adds	r3, #4
 80015ae:	4a23      	ldr	r2, [pc, #140]	@ (800163c <FBL_DiagRoutine_DSC_TransferData+0x1e0>)
 80015b0:	6013      	str	r3, [r2, #0]
		FBL_ProgrammingIndex += 1;
 80015b2:	4b23      	ldr	r3, [pc, #140]	@ (8001640 <FBL_DiagRoutine_DSC_TransferData+0x1e4>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	3301      	adds	r3, #1
 80015b8:	4a21      	ldr	r2, [pc, #132]	@ (8001640 <FBL_DiagRoutine_DSC_TransferData+0x1e4>)
 80015ba:	6013      	str	r3, [r2, #0]
		FBL_TxFrame.frame.dlc = 3;
 80015bc:	4b21      	ldr	r3, [pc, #132]	@ (8001644 <FBL_DiagRoutine_DSC_TransferData+0x1e8>)
 80015be:	2203      	movs	r2, #3
 80015c0:	721a      	strb	r2, [r3, #8]
		FBL_TxFrame.frame.id = 0x701;
 80015c2:	4b20      	ldr	r3, [pc, #128]	@ (8001644 <FBL_DiagRoutine_DSC_TransferData+0x1e8>)
 80015c4:	f240 7201 	movw	r2, #1793	@ 0x701
 80015c8:	605a      	str	r2, [r3, #4]
		FBL_TxFrame.frame.idType = 1;
 80015ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001644 <FBL_DiagRoutine_DSC_TransferData+0x1e8>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	701a      	strb	r2, [r3, #0]
		FBL_TxFrame.frame.data0 = 0x02;
 80015d0:	4b1c      	ldr	r3, [pc, #112]	@ (8001644 <FBL_DiagRoutine_DSC_TransferData+0x1e8>)
 80015d2:	2202      	movs	r2, #2
 80015d4:	725a      	strb	r2, [r3, #9]
		FBL_TxFrame.frame.data1 = 0x76;
 80015d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001644 <FBL_DiagRoutine_DSC_TransferData+0x1e8>)
 80015d8:	2276      	movs	r2, #118	@ 0x76
 80015da:	729a      	strb	r2, [r3, #10]
		FBL_TxFrame.frame.data2 = 0x01;
 80015dc:	4b19      	ldr	r3, [pc, #100]	@ (8001644 <FBL_DiagRoutine_DSC_TransferData+0x1e8>)
 80015de:	2201      	movs	r2, #1
 80015e0:	72da      	strb	r2, [r3, #11]
		FBL_CanSpi_Transmit(&FBL_TxFrame);
 80015e2:	4818      	ldr	r0, [pc, #96]	@ (8001644 <FBL_DiagRoutine_DSC_TransferData+0x1e8>)
 80015e4:	f7ff fa50 	bl	8000a88 <FBL_CanSpi_Transmit>
	}
	else
	{
		/* Do nothing. */
	}
	FBL_TxFrame.frame.dlc = 0;
 80015e8:	4b16      	ldr	r3, [pc, #88]	@ (8001644 <FBL_DiagRoutine_DSC_TransferData+0x1e8>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	721a      	strb	r2, [r3, #8]
	FBL_TxFrame.frame.id = 0;
 80015ee:	4b15      	ldr	r3, [pc, #84]	@ (8001644 <FBL_DiagRoutine_DSC_TransferData+0x1e8>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	605a      	str	r2, [r3, #4]
	FBL_TxFrame.frame.idType = 0;
 80015f4:	4b13      	ldr	r3, [pc, #76]	@ (8001644 <FBL_DiagRoutine_DSC_TransferData+0x1e8>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	701a      	strb	r2, [r3, #0]
	FBL_TxFrame.frame.data0 = 0;
 80015fa:	4b12      	ldr	r3, [pc, #72]	@ (8001644 <FBL_DiagRoutine_DSC_TransferData+0x1e8>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	725a      	strb	r2, [r3, #9]
	FBL_TxFrame.frame.data1 = 0;
 8001600:	4b10      	ldr	r3, [pc, #64]	@ (8001644 <FBL_DiagRoutine_DSC_TransferData+0x1e8>)
 8001602:	2200      	movs	r2, #0
 8001604:	729a      	strb	r2, [r3, #10]
	FBL_TxFrame.frame.data2 = 0;
 8001606:	4b0f      	ldr	r3, [pc, #60]	@ (8001644 <FBL_DiagRoutine_DSC_TransferData+0x1e8>)
 8001608:	2200      	movs	r2, #0
 800160a:	72da      	strb	r2, [r3, #11]
	FBL_TxFrame.frame.data3 = 0;
 800160c:	4b0d      	ldr	r3, [pc, #52]	@ (8001644 <FBL_DiagRoutine_DSC_TransferData+0x1e8>)
 800160e:	2200      	movs	r2, #0
 8001610:	731a      	strb	r2, [r3, #12]
	FBL_TxFrame.frame.data4 = 0;
 8001612:	4b0c      	ldr	r3, [pc, #48]	@ (8001644 <FBL_DiagRoutine_DSC_TransferData+0x1e8>)
 8001614:	2200      	movs	r2, #0
 8001616:	735a      	strb	r2, [r3, #13]
	FBL_TxFrame.frame.data5 = 0;
 8001618:	4b0a      	ldr	r3, [pc, #40]	@ (8001644 <FBL_DiagRoutine_DSC_TransferData+0x1e8>)
 800161a:	2200      	movs	r2, #0
 800161c:	739a      	strb	r2, [r3, #14]
	FBL_TxFrame.frame.data6 = 0;
 800161e:	4b09      	ldr	r3, [pc, #36]	@ (8001644 <FBL_DiagRoutine_DSC_TransferData+0x1e8>)
 8001620:	2200      	movs	r2, #0
 8001622:	73da      	strb	r2, [r3, #15]
	FBL_TxFrame.frame.data7 = 0;
 8001624:	4b07      	ldr	r3, [pc, #28]	@ (8001644 <FBL_DiagRoutine_DSC_TransferData+0x1e8>)
 8001626:	2200      	movs	r2, #0
 8001628:	741a      	strb	r2, [r3, #16]
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20010004 	.word	0x20010004
 8001634:	20010038 	.word	0x20010038
 8001638:	20010060 	.word	0x20010060
 800163c:	20010068 	.word	0x20010068
 8001640:	20010064 	.word	0x20010064
 8001644:	2001004c 	.word	0x2001004c

08001648 <FBL_DiagRoutine_DSC_RequestTransferExit>:
void FBL_DiagRoutine_DSC_RequestTransferExit(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
	FBL_TxFrame.frame.dlc = 2;
 800164c:	4b1a      	ldr	r3, [pc, #104]	@ (80016b8 <FBL_DiagRoutine_DSC_RequestTransferExit+0x70>)
 800164e:	2202      	movs	r2, #2
 8001650:	721a      	strb	r2, [r3, #8]
	FBL_TxFrame.frame.id = 0x701;
 8001652:	4b19      	ldr	r3, [pc, #100]	@ (80016b8 <FBL_DiagRoutine_DSC_RequestTransferExit+0x70>)
 8001654:	f240 7201 	movw	r2, #1793	@ 0x701
 8001658:	605a      	str	r2, [r3, #4]
	FBL_TxFrame.frame.idType = 1;
 800165a:	4b17      	ldr	r3, [pc, #92]	@ (80016b8 <FBL_DiagRoutine_DSC_RequestTransferExit+0x70>)
 800165c:	2201      	movs	r2, #1
 800165e:	701a      	strb	r2, [r3, #0]
	FBL_TxFrame.frame.data0 = 0x01;
 8001660:	4b15      	ldr	r3, [pc, #84]	@ (80016b8 <FBL_DiagRoutine_DSC_RequestTransferExit+0x70>)
 8001662:	2201      	movs	r2, #1
 8001664:	725a      	strb	r2, [r3, #9]
	FBL_TxFrame.frame.data1 = 0x77;
 8001666:	4b14      	ldr	r3, [pc, #80]	@ (80016b8 <FBL_DiagRoutine_DSC_RequestTransferExit+0x70>)
 8001668:	2277      	movs	r2, #119	@ 0x77
 800166a:	729a      	strb	r2, [r3, #10]
	FBL_CanSpi_Transmit(&FBL_TxFrame);
 800166c:	4812      	ldr	r0, [pc, #72]	@ (80016b8 <FBL_DiagRoutine_DSC_RequestTransferExit+0x70>)
 800166e:	f7ff fa0b 	bl	8000a88 <FBL_CanSpi_Transmit>
	FBL_TxFrame.frame.dlc = 0;
 8001672:	4b11      	ldr	r3, [pc, #68]	@ (80016b8 <FBL_DiagRoutine_DSC_RequestTransferExit+0x70>)
 8001674:	2200      	movs	r2, #0
 8001676:	721a      	strb	r2, [r3, #8]
	FBL_TxFrame.frame.id = 0;
 8001678:	4b0f      	ldr	r3, [pc, #60]	@ (80016b8 <FBL_DiagRoutine_DSC_RequestTransferExit+0x70>)
 800167a:	2200      	movs	r2, #0
 800167c:	605a      	str	r2, [r3, #4]
	FBL_TxFrame.frame.idType = 0;
 800167e:	4b0e      	ldr	r3, [pc, #56]	@ (80016b8 <FBL_DiagRoutine_DSC_RequestTransferExit+0x70>)
 8001680:	2200      	movs	r2, #0
 8001682:	701a      	strb	r2, [r3, #0]
	FBL_TxFrame.frame.data0 = 0;
 8001684:	4b0c      	ldr	r3, [pc, #48]	@ (80016b8 <FBL_DiagRoutine_DSC_RequestTransferExit+0x70>)
 8001686:	2200      	movs	r2, #0
 8001688:	725a      	strb	r2, [r3, #9]
	FBL_TxFrame.frame.data1 = 0;
 800168a:	4b0b      	ldr	r3, [pc, #44]	@ (80016b8 <FBL_DiagRoutine_DSC_RequestTransferExit+0x70>)
 800168c:	2200      	movs	r2, #0
 800168e:	729a      	strb	r2, [r3, #10]
	FBL_TxFrame.frame.data2 = 0;
 8001690:	4b09      	ldr	r3, [pc, #36]	@ (80016b8 <FBL_DiagRoutine_DSC_RequestTransferExit+0x70>)
 8001692:	2200      	movs	r2, #0
 8001694:	72da      	strb	r2, [r3, #11]
	FBL_TxFrame.frame.data3 = 0;
 8001696:	4b08      	ldr	r3, [pc, #32]	@ (80016b8 <FBL_DiagRoutine_DSC_RequestTransferExit+0x70>)
 8001698:	2200      	movs	r2, #0
 800169a:	731a      	strb	r2, [r3, #12]
	FBL_TxFrame.frame.data4 = 0;
 800169c:	4b06      	ldr	r3, [pc, #24]	@ (80016b8 <FBL_DiagRoutine_DSC_RequestTransferExit+0x70>)
 800169e:	2200      	movs	r2, #0
 80016a0:	735a      	strb	r2, [r3, #13]
	FBL_TxFrame.frame.data5 = 0;
 80016a2:	4b05      	ldr	r3, [pc, #20]	@ (80016b8 <FBL_DiagRoutine_DSC_RequestTransferExit+0x70>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	739a      	strb	r2, [r3, #14]
	FBL_TxFrame.frame.data6 = 0;
 80016a8:	4b03      	ldr	r3, [pc, #12]	@ (80016b8 <FBL_DiagRoutine_DSC_RequestTransferExit+0x70>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	73da      	strb	r2, [r3, #15]
	FBL_TxFrame.frame.data7 = 0;
 80016ae:	4b02      	ldr	r3, [pc, #8]	@ (80016b8 <FBL_DiagRoutine_DSC_RequestTransferExit+0x70>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	741a      	strb	r2, [r3, #16]
}
 80016b4:	bf00      	nop
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	2001004c 	.word	0x2001004c

080016bc <FBL_DiagRoutine_RAR_MassEraseCODING>:
void FBL_DiagRoutine_RAR_MassEraseCODING(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80016c0:	b672      	cpsid	i
}
 80016c2:	bf00      	nop
	__disable_irq();
	FBL_TxFrame.frame.dlc = 5;
 80016c4:	4b21      	ldr	r3, [pc, #132]	@ (800174c <FBL_DiagRoutine_RAR_MassEraseCODING+0x90>)
 80016c6:	2205      	movs	r2, #5
 80016c8:	721a      	strb	r2, [r3, #8]
	FBL_TxFrame.frame.id = 0x701;
 80016ca:	4b20      	ldr	r3, [pc, #128]	@ (800174c <FBL_DiagRoutine_RAR_MassEraseCODING+0x90>)
 80016cc:	f240 7201 	movw	r2, #1793	@ 0x701
 80016d0:	605a      	str	r2, [r3, #4]
	FBL_TxFrame.frame.idType = 1;
 80016d2:	4b1e      	ldr	r3, [pc, #120]	@ (800174c <FBL_DiagRoutine_RAR_MassEraseCODING+0x90>)
 80016d4:	2201      	movs	r2, #1
 80016d6:	701a      	strb	r2, [r3, #0]
	FBL_TxFrame.frame.data0 = 0x04;
 80016d8:	4b1c      	ldr	r3, [pc, #112]	@ (800174c <FBL_DiagRoutine_RAR_MassEraseCODING+0x90>)
 80016da:	2204      	movs	r2, #4
 80016dc:	725a      	strb	r2, [r3, #9]
	FBL_TxFrame.frame.data1 = 0x71;
 80016de:	4b1b      	ldr	r3, [pc, #108]	@ (800174c <FBL_DiagRoutine_RAR_MassEraseCODING+0x90>)
 80016e0:	2271      	movs	r2, #113	@ 0x71
 80016e2:	729a      	strb	r2, [r3, #10]
	FBL_TxFrame.frame.data2 = 0;
 80016e4:	4b19      	ldr	r3, [pc, #100]	@ (800174c <FBL_DiagRoutine_RAR_MassEraseCODING+0x90>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	72da      	strb	r2, [r3, #11]
	FBL_TxFrame.frame.data3 = 0;
 80016ea:	4b18      	ldr	r3, [pc, #96]	@ (800174c <FBL_DiagRoutine_RAR_MassEraseCODING+0x90>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	731a      	strb	r2, [r3, #12]
	FBL_TxFrame.frame.data4 = 0x03;
 80016f0:	4b16      	ldr	r3, [pc, #88]	@ (800174c <FBL_DiagRoutine_RAR_MassEraseCODING+0x90>)
 80016f2:	2203      	movs	r2, #3
 80016f4:	735a      	strb	r2, [r3, #13]
	FBL_CanSpi_Transmit(&FBL_TxFrame);
 80016f6:	4815      	ldr	r0, [pc, #84]	@ (800174c <FBL_DiagRoutine_RAR_MassEraseCODING+0x90>)
 80016f8:	f7ff f9c6 	bl	8000a88 <FBL_CanSpi_Transmit>
	FBL_NvM_EraseFlash_CODING();
 80016fc:	f7ff fd74 	bl	80011e8 <FBL_NvM_EraseFlash_CODING>
	FBL_TxFrame.frame.dlc = 0;
 8001700:	4b12      	ldr	r3, [pc, #72]	@ (800174c <FBL_DiagRoutine_RAR_MassEraseCODING+0x90>)
 8001702:	2200      	movs	r2, #0
 8001704:	721a      	strb	r2, [r3, #8]
	FBL_TxFrame.frame.id = 0;
 8001706:	4b11      	ldr	r3, [pc, #68]	@ (800174c <FBL_DiagRoutine_RAR_MassEraseCODING+0x90>)
 8001708:	2200      	movs	r2, #0
 800170a:	605a      	str	r2, [r3, #4]
	FBL_TxFrame.frame.idType = 0;
 800170c:	4b0f      	ldr	r3, [pc, #60]	@ (800174c <FBL_DiagRoutine_RAR_MassEraseCODING+0x90>)
 800170e:	2200      	movs	r2, #0
 8001710:	701a      	strb	r2, [r3, #0]
	FBL_TxFrame.frame.data0 = 0;
 8001712:	4b0e      	ldr	r3, [pc, #56]	@ (800174c <FBL_DiagRoutine_RAR_MassEraseCODING+0x90>)
 8001714:	2200      	movs	r2, #0
 8001716:	725a      	strb	r2, [r3, #9]
	FBL_TxFrame.frame.data1 = 0;
 8001718:	4b0c      	ldr	r3, [pc, #48]	@ (800174c <FBL_DiagRoutine_RAR_MassEraseCODING+0x90>)
 800171a:	2200      	movs	r2, #0
 800171c:	729a      	strb	r2, [r3, #10]
	FBL_TxFrame.frame.data2 = 0;
 800171e:	4b0b      	ldr	r3, [pc, #44]	@ (800174c <FBL_DiagRoutine_RAR_MassEraseCODING+0x90>)
 8001720:	2200      	movs	r2, #0
 8001722:	72da      	strb	r2, [r3, #11]
	FBL_TxFrame.frame.data3 = 0;
 8001724:	4b09      	ldr	r3, [pc, #36]	@ (800174c <FBL_DiagRoutine_RAR_MassEraseCODING+0x90>)
 8001726:	2200      	movs	r2, #0
 8001728:	731a      	strb	r2, [r3, #12]
	FBL_TxFrame.frame.data4 = 0;
 800172a:	4b08      	ldr	r3, [pc, #32]	@ (800174c <FBL_DiagRoutine_RAR_MassEraseCODING+0x90>)
 800172c:	2200      	movs	r2, #0
 800172e:	735a      	strb	r2, [r3, #13]
	FBL_TxFrame.frame.data5 = 0;
 8001730:	4b06      	ldr	r3, [pc, #24]	@ (800174c <FBL_DiagRoutine_RAR_MassEraseCODING+0x90>)
 8001732:	2200      	movs	r2, #0
 8001734:	739a      	strb	r2, [r3, #14]
	FBL_TxFrame.frame.data6 = 0;
 8001736:	4b05      	ldr	r3, [pc, #20]	@ (800174c <FBL_DiagRoutine_RAR_MassEraseCODING+0x90>)
 8001738:	2200      	movs	r2, #0
 800173a:	73da      	strb	r2, [r3, #15]
	FBL_TxFrame.frame.data7 = 0;
 800173c:	4b03      	ldr	r3, [pc, #12]	@ (800174c <FBL_DiagRoutine_RAR_MassEraseCODING+0x90>)
 800173e:	2200      	movs	r2, #0
 8001740:	741a      	strb	r2, [r3, #16]
  __ASM volatile ("cpsie i" : : : "memory");
 8001742:	b662      	cpsie	i
}
 8001744:	bf00      	nop
	__enable_irq();
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	2001004c 	.word	0x2001004c

08001750 <FBL_DiagRoutine_RAR_MassEraseCALIBRATION>:
void FBL_DiagRoutine_RAR_MassEraseCALIBRATION(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001754:	b672      	cpsid	i
}
 8001756:	bf00      	nop
	__disable_irq();
	FBL_TxFrame.frame.dlc = 5;
 8001758:	4b21      	ldr	r3, [pc, #132]	@ (80017e0 <FBL_DiagRoutine_RAR_MassEraseCALIBRATION+0x90>)
 800175a:	2205      	movs	r2, #5
 800175c:	721a      	strb	r2, [r3, #8]
	FBL_TxFrame.frame.id = 0x701;
 800175e:	4b20      	ldr	r3, [pc, #128]	@ (80017e0 <FBL_DiagRoutine_RAR_MassEraseCALIBRATION+0x90>)
 8001760:	f240 7201 	movw	r2, #1793	@ 0x701
 8001764:	605a      	str	r2, [r3, #4]
	FBL_TxFrame.frame.idType = 1;
 8001766:	4b1e      	ldr	r3, [pc, #120]	@ (80017e0 <FBL_DiagRoutine_RAR_MassEraseCALIBRATION+0x90>)
 8001768:	2201      	movs	r2, #1
 800176a:	701a      	strb	r2, [r3, #0]
	FBL_TxFrame.frame.data0 = 0x04;
 800176c:	4b1c      	ldr	r3, [pc, #112]	@ (80017e0 <FBL_DiagRoutine_RAR_MassEraseCALIBRATION+0x90>)
 800176e:	2204      	movs	r2, #4
 8001770:	725a      	strb	r2, [r3, #9]
	FBL_TxFrame.frame.data1 = 0x71;
 8001772:	4b1b      	ldr	r3, [pc, #108]	@ (80017e0 <FBL_DiagRoutine_RAR_MassEraseCALIBRATION+0x90>)
 8001774:	2271      	movs	r2, #113	@ 0x71
 8001776:	729a      	strb	r2, [r3, #10]
	FBL_TxFrame.frame.data2 = 0;
 8001778:	4b19      	ldr	r3, [pc, #100]	@ (80017e0 <FBL_DiagRoutine_RAR_MassEraseCALIBRATION+0x90>)
 800177a:	2200      	movs	r2, #0
 800177c:	72da      	strb	r2, [r3, #11]
	FBL_TxFrame.frame.data3 = 0;
 800177e:	4b18      	ldr	r3, [pc, #96]	@ (80017e0 <FBL_DiagRoutine_RAR_MassEraseCALIBRATION+0x90>)
 8001780:	2200      	movs	r2, #0
 8001782:	731a      	strb	r2, [r3, #12]
	FBL_TxFrame.frame.data4 = 0x02;
 8001784:	4b16      	ldr	r3, [pc, #88]	@ (80017e0 <FBL_DiagRoutine_RAR_MassEraseCALIBRATION+0x90>)
 8001786:	2202      	movs	r2, #2
 8001788:	735a      	strb	r2, [r3, #13]
	FBL_CanSpi_Transmit(&FBL_TxFrame);
 800178a:	4815      	ldr	r0, [pc, #84]	@ (80017e0 <FBL_DiagRoutine_RAR_MassEraseCALIBRATION+0x90>)
 800178c:	f7ff f97c 	bl	8000a88 <FBL_CanSpi_Transmit>
	FBL_NvM_EraseFlash_CALIBRATION();
 8001790:	f7ff fd5f 	bl	8001252 <FBL_NvM_EraseFlash_CALIBRATION>
	FBL_TxFrame.frame.dlc = 0;
 8001794:	4b12      	ldr	r3, [pc, #72]	@ (80017e0 <FBL_DiagRoutine_RAR_MassEraseCALIBRATION+0x90>)
 8001796:	2200      	movs	r2, #0
 8001798:	721a      	strb	r2, [r3, #8]
	FBL_TxFrame.frame.id = 0;
 800179a:	4b11      	ldr	r3, [pc, #68]	@ (80017e0 <FBL_DiagRoutine_RAR_MassEraseCALIBRATION+0x90>)
 800179c:	2200      	movs	r2, #0
 800179e:	605a      	str	r2, [r3, #4]
	FBL_TxFrame.frame.idType = 0;
 80017a0:	4b0f      	ldr	r3, [pc, #60]	@ (80017e0 <FBL_DiagRoutine_RAR_MassEraseCALIBRATION+0x90>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	701a      	strb	r2, [r3, #0]
	FBL_TxFrame.frame.data0 = 0;
 80017a6:	4b0e      	ldr	r3, [pc, #56]	@ (80017e0 <FBL_DiagRoutine_RAR_MassEraseCALIBRATION+0x90>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	725a      	strb	r2, [r3, #9]
	FBL_TxFrame.frame.data1 = 0;
 80017ac:	4b0c      	ldr	r3, [pc, #48]	@ (80017e0 <FBL_DiagRoutine_RAR_MassEraseCALIBRATION+0x90>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	729a      	strb	r2, [r3, #10]
	FBL_TxFrame.frame.data2 = 0;
 80017b2:	4b0b      	ldr	r3, [pc, #44]	@ (80017e0 <FBL_DiagRoutine_RAR_MassEraseCALIBRATION+0x90>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	72da      	strb	r2, [r3, #11]
	FBL_TxFrame.frame.data3 = 0;
 80017b8:	4b09      	ldr	r3, [pc, #36]	@ (80017e0 <FBL_DiagRoutine_RAR_MassEraseCALIBRATION+0x90>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	731a      	strb	r2, [r3, #12]
	FBL_TxFrame.frame.data4 = 0;
 80017be:	4b08      	ldr	r3, [pc, #32]	@ (80017e0 <FBL_DiagRoutine_RAR_MassEraseCALIBRATION+0x90>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	735a      	strb	r2, [r3, #13]
	FBL_TxFrame.frame.data5 = 0;
 80017c4:	4b06      	ldr	r3, [pc, #24]	@ (80017e0 <FBL_DiagRoutine_RAR_MassEraseCALIBRATION+0x90>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	739a      	strb	r2, [r3, #14]
	FBL_TxFrame.frame.data6 = 0;
 80017ca:	4b05      	ldr	r3, [pc, #20]	@ (80017e0 <FBL_DiagRoutine_RAR_MassEraseCALIBRATION+0x90>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	73da      	strb	r2, [r3, #15]
	FBL_TxFrame.frame.data7 = 0;
 80017d0:	4b03      	ldr	r3, [pc, #12]	@ (80017e0 <FBL_DiagRoutine_RAR_MassEraseCALIBRATION+0x90>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	741a      	strb	r2, [r3, #16]
  __ASM volatile ("cpsie i" : : : "memory");
 80017d6:	b662      	cpsie	i
}
 80017d8:	bf00      	nop
	__enable_irq();
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	2001004c 	.word	0x2001004c

080017e4 <FBL_DiagRoutine_RAR_MassEraseAPPL>:
void FBL_DiagRoutine_RAR_MassEraseAPPL(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80017e8:	b672      	cpsid	i
}
 80017ea:	bf00      	nop
	__disable_irq();
	FBL_TxFrame.frame.dlc = 5;
 80017ec:	4b21      	ldr	r3, [pc, #132]	@ (8001874 <FBL_DiagRoutine_RAR_MassEraseAPPL+0x90>)
 80017ee:	2205      	movs	r2, #5
 80017f0:	721a      	strb	r2, [r3, #8]
	FBL_TxFrame.frame.id = 0x701;
 80017f2:	4b20      	ldr	r3, [pc, #128]	@ (8001874 <FBL_DiagRoutine_RAR_MassEraseAPPL+0x90>)
 80017f4:	f240 7201 	movw	r2, #1793	@ 0x701
 80017f8:	605a      	str	r2, [r3, #4]
	FBL_TxFrame.frame.idType = 1;
 80017fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001874 <FBL_DiagRoutine_RAR_MassEraseAPPL+0x90>)
 80017fc:	2201      	movs	r2, #1
 80017fe:	701a      	strb	r2, [r3, #0]
	FBL_TxFrame.frame.data0 = 0x04;
 8001800:	4b1c      	ldr	r3, [pc, #112]	@ (8001874 <FBL_DiagRoutine_RAR_MassEraseAPPL+0x90>)
 8001802:	2204      	movs	r2, #4
 8001804:	725a      	strb	r2, [r3, #9]
	FBL_TxFrame.frame.data1 = 0x71;
 8001806:	4b1b      	ldr	r3, [pc, #108]	@ (8001874 <FBL_DiagRoutine_RAR_MassEraseAPPL+0x90>)
 8001808:	2271      	movs	r2, #113	@ 0x71
 800180a:	729a      	strb	r2, [r3, #10]
	FBL_TxFrame.frame.data2 = 0;
 800180c:	4b19      	ldr	r3, [pc, #100]	@ (8001874 <FBL_DiagRoutine_RAR_MassEraseAPPL+0x90>)
 800180e:	2200      	movs	r2, #0
 8001810:	72da      	strb	r2, [r3, #11]
	FBL_TxFrame.frame.data3 = 0;
 8001812:	4b18      	ldr	r3, [pc, #96]	@ (8001874 <FBL_DiagRoutine_RAR_MassEraseAPPL+0x90>)
 8001814:	2200      	movs	r2, #0
 8001816:	731a      	strb	r2, [r3, #12]
	FBL_TxFrame.frame.data4 = 0;
 8001818:	4b16      	ldr	r3, [pc, #88]	@ (8001874 <FBL_DiagRoutine_RAR_MassEraseAPPL+0x90>)
 800181a:	2200      	movs	r2, #0
 800181c:	735a      	strb	r2, [r3, #13]
	FBL_CanSpi_Transmit(&FBL_TxFrame);
 800181e:	4815      	ldr	r0, [pc, #84]	@ (8001874 <FBL_DiagRoutine_RAR_MassEraseAPPL+0x90>)
 8001820:	f7ff f932 	bl	8000a88 <FBL_CanSpi_Transmit>
	FBL_NvM_EraseFlash_APPL();
 8001824:	f7ff fd4a 	bl	80012bc <FBL_NvM_EraseFlash_APPL>
	FBL_TxFrame.frame.dlc = 0;
 8001828:	4b12      	ldr	r3, [pc, #72]	@ (8001874 <FBL_DiagRoutine_RAR_MassEraseAPPL+0x90>)
 800182a:	2200      	movs	r2, #0
 800182c:	721a      	strb	r2, [r3, #8]
	FBL_TxFrame.frame.id = 0;
 800182e:	4b11      	ldr	r3, [pc, #68]	@ (8001874 <FBL_DiagRoutine_RAR_MassEraseAPPL+0x90>)
 8001830:	2200      	movs	r2, #0
 8001832:	605a      	str	r2, [r3, #4]
	FBL_TxFrame.frame.idType = 0;
 8001834:	4b0f      	ldr	r3, [pc, #60]	@ (8001874 <FBL_DiagRoutine_RAR_MassEraseAPPL+0x90>)
 8001836:	2200      	movs	r2, #0
 8001838:	701a      	strb	r2, [r3, #0]
	FBL_TxFrame.frame.data0 = 0;
 800183a:	4b0e      	ldr	r3, [pc, #56]	@ (8001874 <FBL_DiagRoutine_RAR_MassEraseAPPL+0x90>)
 800183c:	2200      	movs	r2, #0
 800183e:	725a      	strb	r2, [r3, #9]
	FBL_TxFrame.frame.data1 = 0;
 8001840:	4b0c      	ldr	r3, [pc, #48]	@ (8001874 <FBL_DiagRoutine_RAR_MassEraseAPPL+0x90>)
 8001842:	2200      	movs	r2, #0
 8001844:	729a      	strb	r2, [r3, #10]
	FBL_TxFrame.frame.data2 = 0;
 8001846:	4b0b      	ldr	r3, [pc, #44]	@ (8001874 <FBL_DiagRoutine_RAR_MassEraseAPPL+0x90>)
 8001848:	2200      	movs	r2, #0
 800184a:	72da      	strb	r2, [r3, #11]
	FBL_TxFrame.frame.data3 = 0;
 800184c:	4b09      	ldr	r3, [pc, #36]	@ (8001874 <FBL_DiagRoutine_RAR_MassEraseAPPL+0x90>)
 800184e:	2200      	movs	r2, #0
 8001850:	731a      	strb	r2, [r3, #12]
	FBL_TxFrame.frame.data4 = 0;
 8001852:	4b08      	ldr	r3, [pc, #32]	@ (8001874 <FBL_DiagRoutine_RAR_MassEraseAPPL+0x90>)
 8001854:	2200      	movs	r2, #0
 8001856:	735a      	strb	r2, [r3, #13]
	FBL_TxFrame.frame.data5 = 0;
 8001858:	4b06      	ldr	r3, [pc, #24]	@ (8001874 <FBL_DiagRoutine_RAR_MassEraseAPPL+0x90>)
 800185a:	2200      	movs	r2, #0
 800185c:	739a      	strb	r2, [r3, #14]
	FBL_TxFrame.frame.data6 = 0;
 800185e:	4b05      	ldr	r3, [pc, #20]	@ (8001874 <FBL_DiagRoutine_RAR_MassEraseAPPL+0x90>)
 8001860:	2200      	movs	r2, #0
 8001862:	73da      	strb	r2, [r3, #15]
	FBL_TxFrame.frame.data7 = 0;
 8001864:	4b03      	ldr	r3, [pc, #12]	@ (8001874 <FBL_DiagRoutine_RAR_MassEraseAPPL+0x90>)
 8001866:	2200      	movs	r2, #0
 8001868:	741a      	strb	r2, [r3, #16]
  __ASM volatile ("cpsie i" : : : "memory");
 800186a:	b662      	cpsie	i
}
 800186c:	bf00      	nop
	__enable_irq();
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	2001004c 	.word	0x2001004c

08001878 <FBL_JumpToAppl>:
void FBL_JumpToAppl(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
	typedef void (*pFunction)(void);
	static uint32 app_address = 0x08060000;
	static pFunction app_entry;
	uint32 msp_value = *((uint32*)app_address);
 800187e:	4b0f      	ldr	r3, [pc, #60]	@ (80018bc <FBL_JumpToAppl+0x44>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8001886:	b672      	cpsid	i
}
 8001888:	bf00      	nop
	__disable_irq();
	SCB->VTOR = app_address;
 800188a:	4a0d      	ldr	r2, [pc, #52]	@ (80018c0 <FBL_JumpToAppl+0x48>)
 800188c:	4b0b      	ldr	r3, [pc, #44]	@ (80018bc <FBL_JumpToAppl+0x44>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	6093      	str	r3, [r2, #8]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	f383 8808 	msr	MSP, r3
}
 800189c:	bf00      	nop
	__set_MSP(msp_value);
	app_entry = (pFunction)(*((uint32*)(app_address + 4)));
 800189e:	4b07      	ldr	r3, [pc, #28]	@ (80018bc <FBL_JumpToAppl+0x44>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	3304      	adds	r3, #4
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	461a      	mov	r2, r3
 80018a8:	4b06      	ldr	r3, [pc, #24]	@ (80018c4 <FBL_JumpToAppl+0x4c>)
 80018aa:	601a      	str	r2, [r3, #0]
	app_entry();
 80018ac:	4b05      	ldr	r3, [pc, #20]	@ (80018c4 <FBL_JumpToAppl+0x4c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4798      	blx	r3
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	2001000c 	.word	0x2001000c
 80018c0:	e000ed00 	.word	0xe000ed00
 80018c4:	20010098 	.word	0x20010098

080018c8 <FBL_DiagRoutine_ER_SoftReset>:
void FBL_DiagRoutine_ER_SoftReset(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80018cc:	b672      	cpsid	i
}
 80018ce:	bf00      	nop
	__disable_irq();
	*FBL_DSC_Pointer = 0;
 80018d0:	4b02      	ldr	r3, [pc, #8]	@ (80018dc <FBL_DiagRoutine_ER_SoftReset+0x14>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
	__NVIC_SystemReset();
 80018d8:	f7fe fe9c 	bl	8000614 <__NVIC_SystemReset>
 80018dc:	20010000 	.word	0x20010000

080018e0 <FBL_DiagRoutine_ER_HardReset>:
}
void FBL_DiagRoutine_ER_HardReset(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80018e6:	b672      	cpsid	i
}
 80018e8:	bf00      	nop
	__disable_irq();
	*FBL_DSC_Pointer = 0;
 80018ea:	4b09      	ldr	r3, [pc, #36]	@ (8001910 <FBL_DiagRoutine_ER_HardReset+0x30>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
	for(uint32* addr = ((uint32_t*)0x2001FDA8); addr <= ((uint32_t*)0x2001FFFF); addr++) *addr = 0;
 80018f2:	4b08      	ldr	r3, [pc, #32]	@ (8001914 <FBL_DiagRoutine_ER_HardReset+0x34>)
 80018f4:	607b      	str	r3, [r7, #4]
 80018f6:	e005      	b.n	8001904 <FBL_DiagRoutine_ER_HardReset+0x24>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	3304      	adds	r3, #4
 8001902:	607b      	str	r3, [r7, #4]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4a04      	ldr	r2, [pc, #16]	@ (8001918 <FBL_DiagRoutine_ER_HardReset+0x38>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d9f5      	bls.n	80018f8 <FBL_DiagRoutine_ER_HardReset+0x18>
	__NVIC_SystemReset();
 800190c:	f7fe fe82 	bl	8000614 <__NVIC_SystemReset>
 8001910:	20010000 	.word	0x20010000
 8001914:	2001fda8 	.word	0x2001fda8
 8001918:	2001ffff 	.word	0x2001ffff

0800191c <FBL_DiagRoutine_DSC_Coding>:
}
void FBL_DiagRoutine_DSC_Coding(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
	if(FBL_CanSpi_Receive(&FBL_RxFrame) != 0)
 8001920:	488a      	ldr	r0, [pc, #552]	@ (8001b4c <FBL_DiagRoutine_DSC_Coding+0x230>)
 8001922:	f7ff f929 	bl	8000b78 <FBL_CanSpi_Receive>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	f000 810c 	beq.w	8001b46 <FBL_DiagRoutine_DSC_Coding+0x22a>
	{
		if(FBL_RxFrame.frame.id == 0x700)
 800192e:	4b87      	ldr	r3, [pc, #540]	@ (8001b4c <FBL_DiagRoutine_DSC_Coding+0x230>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001936:	f040 80e5 	bne.w	8001b04 <FBL_DiagRoutine_DSC_Coding+0x1e8>
		{
			if(FBL_RxFrame.frame.data1 == 0x22 && FBL_RxFrame.frame.data2 == 0xF1 && FBL_RxFrame.frame.data3 == 0x86) FBL_DiagRoutine_RDBI_ReadActiveDiagnosticSession();
 800193a:	4b84      	ldr	r3, [pc, #528]	@ (8001b4c <FBL_DiagRoutine_DSC_Coding+0x230>)
 800193c:	7a9b      	ldrb	r3, [r3, #10]
 800193e:	2b22      	cmp	r3, #34	@ 0x22
 8001940:	d109      	bne.n	8001956 <FBL_DiagRoutine_DSC_Coding+0x3a>
 8001942:	4b82      	ldr	r3, [pc, #520]	@ (8001b4c <FBL_DiagRoutine_DSC_Coding+0x230>)
 8001944:	7adb      	ldrb	r3, [r3, #11]
 8001946:	2bf1      	cmp	r3, #241	@ 0xf1
 8001948:	d105      	bne.n	8001956 <FBL_DiagRoutine_DSC_Coding+0x3a>
 800194a:	4b80      	ldr	r3, [pc, #512]	@ (8001b4c <FBL_DiagRoutine_DSC_Coding+0x230>)
 800194c:	7b1b      	ldrb	r3, [r3, #12]
 800194e:	2b86      	cmp	r3, #134	@ 0x86
 8001950:	d101      	bne.n	8001956 <FBL_DiagRoutine_DSC_Coding+0x3a>
 8001952:	f000 fa27 	bl	8001da4 <FBL_DiagRoutine_RDBI_ReadActiveDiagnosticSession>
			else
			{
				/* Do nothing. */
			}
			if(FBL_RxFrame.frame.data0 == 0x04 && FBL_RxFrame.frame.data1 == 0x31 && FBL_RxFrame.frame.data4 == 0x03) FBL_DiagRoutine_RAR_MassEraseCODING();
 8001956:	4b7d      	ldr	r3, [pc, #500]	@ (8001b4c <FBL_DiagRoutine_DSC_Coding+0x230>)
 8001958:	7a5b      	ldrb	r3, [r3, #9]
 800195a:	2b04      	cmp	r3, #4
 800195c:	d109      	bne.n	8001972 <FBL_DiagRoutine_DSC_Coding+0x56>
 800195e:	4b7b      	ldr	r3, [pc, #492]	@ (8001b4c <FBL_DiagRoutine_DSC_Coding+0x230>)
 8001960:	7a9b      	ldrb	r3, [r3, #10]
 8001962:	2b31      	cmp	r3, #49	@ 0x31
 8001964:	d105      	bne.n	8001972 <FBL_DiagRoutine_DSC_Coding+0x56>
 8001966:	4b79      	ldr	r3, [pc, #484]	@ (8001b4c <FBL_DiagRoutine_DSC_Coding+0x230>)
 8001968:	7b5b      	ldrb	r3, [r3, #13]
 800196a:	2b03      	cmp	r3, #3
 800196c:	d101      	bne.n	8001972 <FBL_DiagRoutine_DSC_Coding+0x56>
 800196e:	f7ff fea5 	bl	80016bc <FBL_DiagRoutine_RAR_MassEraseCODING>
			else
			{
				/* Do nothing. */
			}
			if(FBL_RxFrame.frame.data1 == 0x34)
 8001972:	4b76      	ldr	r3, [pc, #472]	@ (8001b4c <FBL_DiagRoutine_DSC_Coding+0x230>)
 8001974:	7a9b      	ldrb	r3, [r3, #10]
 8001976:	2b34      	cmp	r3, #52	@ 0x34
 8001978:	d108      	bne.n	800198c <FBL_DiagRoutine_DSC_Coding+0x70>
			{
				if(FBL_ProgrammingAddress == 0) FBL_ProgrammingAddress = 0x0800C000;
 800197a:	4b75      	ldr	r3, [pc, #468]	@ (8001b50 <FBL_DiagRoutine_DSC_Coding+0x234>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d102      	bne.n	8001988 <FBL_DiagRoutine_DSC_Coding+0x6c>
 8001982:	4b73      	ldr	r3, [pc, #460]	@ (8001b50 <FBL_DiagRoutine_DSC_Coding+0x234>)
 8001984:	4a73      	ldr	r2, [pc, #460]	@ (8001b54 <FBL_DiagRoutine_DSC_Coding+0x238>)
 8001986:	601a      	str	r2, [r3, #0]
				else
				{
					/* Do nothing. */
				}
				FBL_DiagRoutine_DSC_RequestDownload();
 8001988:	f7ff fd24 	bl	80013d4 <FBL_DiagRoutine_DSC_RequestDownload>
			}
			else
			{
				/* Do nothing. */
			}
			if(FBL_RxFrame.frame.data1 == 0x36) FBL_DiagRoutine_DSC_TransferData();
 800198c:	4b6f      	ldr	r3, [pc, #444]	@ (8001b4c <FBL_DiagRoutine_DSC_Coding+0x230>)
 800198e:	7a9b      	ldrb	r3, [r3, #10]
 8001990:	2b36      	cmp	r3, #54	@ 0x36
 8001992:	d101      	bne.n	8001998 <FBL_DiagRoutine_DSC_Coding+0x7c>
 8001994:	f7ff fd62 	bl	800145c <FBL_DiagRoutine_DSC_TransferData>
			else
			{
				/* Do nothing. */
			}
			if(FBL_RxFrame.frame.data1 == 0x10 && FBL_RxFrame.frame.data2 == 0x05)
 8001998:	4b6c      	ldr	r3, [pc, #432]	@ (8001b4c <FBL_DiagRoutine_DSC_Coding+0x230>)
 800199a:	7a9b      	ldrb	r3, [r3, #10]
 800199c:	2b10      	cmp	r3, #16
 800199e:	d13f      	bne.n	8001a20 <FBL_DiagRoutine_DSC_Coding+0x104>
 80019a0:	4b6a      	ldr	r3, [pc, #424]	@ (8001b4c <FBL_DiagRoutine_DSC_Coding+0x230>)
 80019a2:	7adb      	ldrb	r3, [r3, #11]
 80019a4:	2b05      	cmp	r3, #5
 80019a6:	d13b      	bne.n	8001a20 <FBL_DiagRoutine_DSC_Coding+0x104>
			{
				FBL_DSC_State = CALIBRATION;
 80019a8:	4b6b      	ldr	r3, [pc, #428]	@ (8001b58 <FBL_DiagRoutine_DSC_Coding+0x23c>)
 80019aa:	2204      	movs	r2, #4
 80019ac:	701a      	strb	r2, [r3, #0]
				FBL_TxFrame.frame.dlc = 3;
 80019ae:	4b6b      	ldr	r3, [pc, #428]	@ (8001b5c <FBL_DiagRoutine_DSC_Coding+0x240>)
 80019b0:	2203      	movs	r2, #3
 80019b2:	721a      	strb	r2, [r3, #8]
				FBL_TxFrame.frame.id = 0x701;
 80019b4:	4b69      	ldr	r3, [pc, #420]	@ (8001b5c <FBL_DiagRoutine_DSC_Coding+0x240>)
 80019b6:	f240 7201 	movw	r2, #1793	@ 0x701
 80019ba:	605a      	str	r2, [r3, #4]
				FBL_TxFrame.frame.idType = 1;
 80019bc:	4b67      	ldr	r3, [pc, #412]	@ (8001b5c <FBL_DiagRoutine_DSC_Coding+0x240>)
 80019be:	2201      	movs	r2, #1
 80019c0:	701a      	strb	r2, [r3, #0]
				FBL_TxFrame.frame.data0 = 0x02;
 80019c2:	4b66      	ldr	r3, [pc, #408]	@ (8001b5c <FBL_DiagRoutine_DSC_Coding+0x240>)
 80019c4:	2202      	movs	r2, #2
 80019c6:	725a      	strb	r2, [r3, #9]
				FBL_TxFrame.frame.data1 = 0x50;
 80019c8:	4b64      	ldr	r3, [pc, #400]	@ (8001b5c <FBL_DiagRoutine_DSC_Coding+0x240>)
 80019ca:	2250      	movs	r2, #80	@ 0x50
 80019cc:	729a      	strb	r2, [r3, #10]
				FBL_TxFrame.frame.data2 = 0x05;
 80019ce:	4b63      	ldr	r3, [pc, #396]	@ (8001b5c <FBL_DiagRoutine_DSC_Coding+0x240>)
 80019d0:	2205      	movs	r2, #5
 80019d2:	72da      	strb	r2, [r3, #11]
				FBL_CanSpi_Transmit(&FBL_TxFrame);
 80019d4:	4861      	ldr	r0, [pc, #388]	@ (8001b5c <FBL_DiagRoutine_DSC_Coding+0x240>)
 80019d6:	f7ff f857 	bl	8000a88 <FBL_CanSpi_Transmit>
				FBL_DiagRoutine_DSC_Calibration();
 80019da:	f000 f8c1 	bl	8001b60 <FBL_DiagRoutine_DSC_Calibration>
				FBL_TxFrame.frame.dlc = 0;
 80019de:	4b5f      	ldr	r3, [pc, #380]	@ (8001b5c <FBL_DiagRoutine_DSC_Coding+0x240>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	721a      	strb	r2, [r3, #8]
				FBL_TxFrame.frame.id = 0;
 80019e4:	4b5d      	ldr	r3, [pc, #372]	@ (8001b5c <FBL_DiagRoutine_DSC_Coding+0x240>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	605a      	str	r2, [r3, #4]
				FBL_TxFrame.frame.idType = 0;
 80019ea:	4b5c      	ldr	r3, [pc, #368]	@ (8001b5c <FBL_DiagRoutine_DSC_Coding+0x240>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	701a      	strb	r2, [r3, #0]
				FBL_TxFrame.frame.data0 = 0;
 80019f0:	4b5a      	ldr	r3, [pc, #360]	@ (8001b5c <FBL_DiagRoutine_DSC_Coding+0x240>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	725a      	strb	r2, [r3, #9]
				FBL_TxFrame.frame.data1 = 0;
 80019f6:	4b59      	ldr	r3, [pc, #356]	@ (8001b5c <FBL_DiagRoutine_DSC_Coding+0x240>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	729a      	strb	r2, [r3, #10]
				FBL_TxFrame.frame.data2 = 0;
 80019fc:	4b57      	ldr	r3, [pc, #348]	@ (8001b5c <FBL_DiagRoutine_DSC_Coding+0x240>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	72da      	strb	r2, [r3, #11]
				FBL_TxFrame.frame.data3 = 0;
 8001a02:	4b56      	ldr	r3, [pc, #344]	@ (8001b5c <FBL_DiagRoutine_DSC_Coding+0x240>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	731a      	strb	r2, [r3, #12]
				FBL_TxFrame.frame.data4 = 0;
 8001a08:	4b54      	ldr	r3, [pc, #336]	@ (8001b5c <FBL_DiagRoutine_DSC_Coding+0x240>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	735a      	strb	r2, [r3, #13]
				FBL_TxFrame.frame.data5 = 0;
 8001a0e:	4b53      	ldr	r3, [pc, #332]	@ (8001b5c <FBL_DiagRoutine_DSC_Coding+0x240>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	739a      	strb	r2, [r3, #14]
				FBL_TxFrame.frame.data6 = 0;
 8001a14:	4b51      	ldr	r3, [pc, #324]	@ (8001b5c <FBL_DiagRoutine_DSC_Coding+0x240>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	73da      	strb	r2, [r3, #15]
				FBL_TxFrame.frame.data7 = 0;
 8001a1a:	4b50      	ldr	r3, [pc, #320]	@ (8001b5c <FBL_DiagRoutine_DSC_Coding+0x240>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	741a      	strb	r2, [r3, #16]
			}
			else
			{
				/* Do nothing. */
			}
			if(FBL_RxFrame.frame.data1 == 0x10 && FBL_RxFrame.frame.data2 == 0x02)
 8001a20:	4b4a      	ldr	r3, [pc, #296]	@ (8001b4c <FBL_DiagRoutine_DSC_Coding+0x230>)
 8001a22:	7a9b      	ldrb	r3, [r3, #10]
 8001a24:	2b10      	cmp	r3, #16
 8001a26:	d13f      	bne.n	8001aa8 <FBL_DiagRoutine_DSC_Coding+0x18c>
 8001a28:	4b48      	ldr	r3, [pc, #288]	@ (8001b4c <FBL_DiagRoutine_DSC_Coding+0x230>)
 8001a2a:	7adb      	ldrb	r3, [r3, #11]
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d13b      	bne.n	8001aa8 <FBL_DiagRoutine_DSC_Coding+0x18c>
			{
				FBL_DSC_State = PROGRAMMING;
 8001a30:	4b49      	ldr	r3, [pc, #292]	@ (8001b58 <FBL_DiagRoutine_DSC_Coding+0x23c>)
 8001a32:	2202      	movs	r2, #2
 8001a34:	701a      	strb	r2, [r3, #0]
				FBL_TxFrame.frame.dlc = 3;
 8001a36:	4b49      	ldr	r3, [pc, #292]	@ (8001b5c <FBL_DiagRoutine_DSC_Coding+0x240>)
 8001a38:	2203      	movs	r2, #3
 8001a3a:	721a      	strb	r2, [r3, #8]
				FBL_TxFrame.frame.id = 0x701;
 8001a3c:	4b47      	ldr	r3, [pc, #284]	@ (8001b5c <FBL_DiagRoutine_DSC_Coding+0x240>)
 8001a3e:	f240 7201 	movw	r2, #1793	@ 0x701
 8001a42:	605a      	str	r2, [r3, #4]
				FBL_TxFrame.frame.idType = 1;
 8001a44:	4b45      	ldr	r3, [pc, #276]	@ (8001b5c <FBL_DiagRoutine_DSC_Coding+0x240>)
 8001a46:	2201      	movs	r2, #1
 8001a48:	701a      	strb	r2, [r3, #0]
				FBL_TxFrame.frame.data0 = 0x02;
 8001a4a:	4b44      	ldr	r3, [pc, #272]	@ (8001b5c <FBL_DiagRoutine_DSC_Coding+0x240>)
 8001a4c:	2202      	movs	r2, #2
 8001a4e:	725a      	strb	r2, [r3, #9]
				FBL_TxFrame.frame.data1 = 0x50;
 8001a50:	4b42      	ldr	r3, [pc, #264]	@ (8001b5c <FBL_DiagRoutine_DSC_Coding+0x240>)
 8001a52:	2250      	movs	r2, #80	@ 0x50
 8001a54:	729a      	strb	r2, [r3, #10]
				FBL_TxFrame.frame.data2 = 0x02;
 8001a56:	4b41      	ldr	r3, [pc, #260]	@ (8001b5c <FBL_DiagRoutine_DSC_Coding+0x240>)
 8001a58:	2202      	movs	r2, #2
 8001a5a:	72da      	strb	r2, [r3, #11]
				FBL_CanSpi_Transmit(&FBL_TxFrame);
 8001a5c:	483f      	ldr	r0, [pc, #252]	@ (8001b5c <FBL_DiagRoutine_DSC_Coding+0x240>)
 8001a5e:	f7ff f813 	bl	8000a88 <FBL_CanSpi_Transmit>
				FBL_DiagRoutine_DSC_Calibration();
 8001a62:	f000 f87d 	bl	8001b60 <FBL_DiagRoutine_DSC_Calibration>
				FBL_TxFrame.frame.dlc = 0;
 8001a66:	4b3d      	ldr	r3, [pc, #244]	@ (8001b5c <FBL_DiagRoutine_DSC_Coding+0x240>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	721a      	strb	r2, [r3, #8]
				FBL_TxFrame.frame.id = 0;
 8001a6c:	4b3b      	ldr	r3, [pc, #236]	@ (8001b5c <FBL_DiagRoutine_DSC_Coding+0x240>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	605a      	str	r2, [r3, #4]
				FBL_TxFrame.frame.idType = 0;
 8001a72:	4b3a      	ldr	r3, [pc, #232]	@ (8001b5c <FBL_DiagRoutine_DSC_Coding+0x240>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	701a      	strb	r2, [r3, #0]
				FBL_TxFrame.frame.data0 = 0;
 8001a78:	4b38      	ldr	r3, [pc, #224]	@ (8001b5c <FBL_DiagRoutine_DSC_Coding+0x240>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	725a      	strb	r2, [r3, #9]
				FBL_TxFrame.frame.data1 = 0;
 8001a7e:	4b37      	ldr	r3, [pc, #220]	@ (8001b5c <FBL_DiagRoutine_DSC_Coding+0x240>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	729a      	strb	r2, [r3, #10]
				FBL_TxFrame.frame.data2 = 0;
 8001a84:	4b35      	ldr	r3, [pc, #212]	@ (8001b5c <FBL_DiagRoutine_DSC_Coding+0x240>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	72da      	strb	r2, [r3, #11]
				FBL_TxFrame.frame.data3 = 0;
 8001a8a:	4b34      	ldr	r3, [pc, #208]	@ (8001b5c <FBL_DiagRoutine_DSC_Coding+0x240>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	731a      	strb	r2, [r3, #12]
				FBL_TxFrame.frame.data4 = 0;
 8001a90:	4b32      	ldr	r3, [pc, #200]	@ (8001b5c <FBL_DiagRoutine_DSC_Coding+0x240>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	735a      	strb	r2, [r3, #13]
				FBL_TxFrame.frame.data5 = 0;
 8001a96:	4b31      	ldr	r3, [pc, #196]	@ (8001b5c <FBL_DiagRoutine_DSC_Coding+0x240>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	739a      	strb	r2, [r3, #14]
				FBL_TxFrame.frame.data6 = 0;
 8001a9c:	4b2f      	ldr	r3, [pc, #188]	@ (8001b5c <FBL_DiagRoutine_DSC_Coding+0x240>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	73da      	strb	r2, [r3, #15]
				FBL_TxFrame.frame.data7 = 0;
 8001aa2:	4b2e      	ldr	r3, [pc, #184]	@ (8001b5c <FBL_DiagRoutine_DSC_Coding+0x240>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	741a      	strb	r2, [r3, #16]
			}
			else
			{
				/* Do nothing. */
			}
			if(FBL_RxFrame.frame.data1 == 0x37 && FBL_RxFrame.frame.data0 == 0x01) FBL_DiagRoutine_DSC_RequestTransferExit();
 8001aa8:	4b28      	ldr	r3, [pc, #160]	@ (8001b4c <FBL_DiagRoutine_DSC_Coding+0x230>)
 8001aaa:	7a9b      	ldrb	r3, [r3, #10]
 8001aac:	2b37      	cmp	r3, #55	@ 0x37
 8001aae:	d105      	bne.n	8001abc <FBL_DiagRoutine_DSC_Coding+0x1a0>
 8001ab0:	4b26      	ldr	r3, [pc, #152]	@ (8001b4c <FBL_DiagRoutine_DSC_Coding+0x230>)
 8001ab2:	7a5b      	ldrb	r3, [r3, #9]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d101      	bne.n	8001abc <FBL_DiagRoutine_DSC_Coding+0x1a0>
 8001ab8:	f7ff fdc6 	bl	8001648 <FBL_DiagRoutine_DSC_RequestTransferExit>
			else
			{
				/* Do nothing. */
			}
			if(FBL_RxFrame.frame.data1 == 0x11 && FBL_RxFrame.frame.data2 == 0x01 && FBL_RxFrame.frame.data0 == 0x02)
 8001abc:	4b23      	ldr	r3, [pc, #140]	@ (8001b4c <FBL_DiagRoutine_DSC_Coding+0x230>)
 8001abe:	7a9b      	ldrb	r3, [r3, #10]
 8001ac0:	2b11      	cmp	r3, #17
 8001ac2:	d11f      	bne.n	8001b04 <FBL_DiagRoutine_DSC_Coding+0x1e8>
 8001ac4:	4b21      	ldr	r3, [pc, #132]	@ (8001b4c <FBL_DiagRoutine_DSC_Coding+0x230>)
 8001ac6:	7adb      	ldrb	r3, [r3, #11]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d11b      	bne.n	8001b04 <FBL_DiagRoutine_DSC_Coding+0x1e8>
 8001acc:	4b1f      	ldr	r3, [pc, #124]	@ (8001b4c <FBL_DiagRoutine_DSC_Coding+0x230>)
 8001ace:	7a5b      	ldrb	r3, [r3, #9]
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d117      	bne.n	8001b04 <FBL_DiagRoutine_DSC_Coding+0x1e8>
			{
				FBL_TxFrame.frame.dlc = 3;
 8001ad4:	4b21      	ldr	r3, [pc, #132]	@ (8001b5c <FBL_DiagRoutine_DSC_Coding+0x240>)
 8001ad6:	2203      	movs	r2, #3
 8001ad8:	721a      	strb	r2, [r3, #8]
				FBL_TxFrame.frame.id = 0x701;
 8001ada:	4b20      	ldr	r3, [pc, #128]	@ (8001b5c <FBL_DiagRoutine_DSC_Coding+0x240>)
 8001adc:	f240 7201 	movw	r2, #1793	@ 0x701
 8001ae0:	605a      	str	r2, [r3, #4]
				FBL_TxFrame.frame.idType = 1;
 8001ae2:	4b1e      	ldr	r3, [pc, #120]	@ (8001b5c <FBL_DiagRoutine_DSC_Coding+0x240>)
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	701a      	strb	r2, [r3, #0]
				FBL_TxFrame.frame.data0 = 0x02;
 8001ae8:	4b1c      	ldr	r3, [pc, #112]	@ (8001b5c <FBL_DiagRoutine_DSC_Coding+0x240>)
 8001aea:	2202      	movs	r2, #2
 8001aec:	725a      	strb	r2, [r3, #9]
				FBL_TxFrame.frame.data1 = 0x51;
 8001aee:	4b1b      	ldr	r3, [pc, #108]	@ (8001b5c <FBL_DiagRoutine_DSC_Coding+0x240>)
 8001af0:	2251      	movs	r2, #81	@ 0x51
 8001af2:	729a      	strb	r2, [r3, #10]
				FBL_TxFrame.frame.data2 = 0x01;
 8001af4:	4b19      	ldr	r3, [pc, #100]	@ (8001b5c <FBL_DiagRoutine_DSC_Coding+0x240>)
 8001af6:	2201      	movs	r2, #1
 8001af8:	72da      	strb	r2, [r3, #11]
				FBL_CanSpi_Transmit(&FBL_TxFrame);
 8001afa:	4818      	ldr	r0, [pc, #96]	@ (8001b5c <FBL_DiagRoutine_DSC_Coding+0x240>)
 8001afc:	f7fe ffc4 	bl	8000a88 <FBL_CanSpi_Transmit>
				FBL_DiagRoutine_ER_HardReset();
 8001b00:	f7ff feee 	bl	80018e0 <FBL_DiagRoutine_ER_HardReset>
		}
		else
		{
			/* Do nothing. */
		}
		FBL_RxFrame.frame.dlc = 0;
 8001b04:	4b11      	ldr	r3, [pc, #68]	@ (8001b4c <FBL_DiagRoutine_DSC_Coding+0x230>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	721a      	strb	r2, [r3, #8]
		FBL_RxFrame.frame.id = 0;
 8001b0a:	4b10      	ldr	r3, [pc, #64]	@ (8001b4c <FBL_DiagRoutine_DSC_Coding+0x230>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	605a      	str	r2, [r3, #4]
		FBL_RxFrame.frame.idType = 0;
 8001b10:	4b0e      	ldr	r3, [pc, #56]	@ (8001b4c <FBL_DiagRoutine_DSC_Coding+0x230>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	701a      	strb	r2, [r3, #0]
		FBL_RxFrame.frame.data0 = 0;
 8001b16:	4b0d      	ldr	r3, [pc, #52]	@ (8001b4c <FBL_DiagRoutine_DSC_Coding+0x230>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	725a      	strb	r2, [r3, #9]
		FBL_RxFrame.frame.data1 = 0;
 8001b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b4c <FBL_DiagRoutine_DSC_Coding+0x230>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	729a      	strb	r2, [r3, #10]
		FBL_RxFrame.frame.data2 = 0;
 8001b22:	4b0a      	ldr	r3, [pc, #40]	@ (8001b4c <FBL_DiagRoutine_DSC_Coding+0x230>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	72da      	strb	r2, [r3, #11]
		FBL_RxFrame.frame.data3 = 0;
 8001b28:	4b08      	ldr	r3, [pc, #32]	@ (8001b4c <FBL_DiagRoutine_DSC_Coding+0x230>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	731a      	strb	r2, [r3, #12]
		FBL_RxFrame.frame.data4 = 0;
 8001b2e:	4b07      	ldr	r3, [pc, #28]	@ (8001b4c <FBL_DiagRoutine_DSC_Coding+0x230>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	735a      	strb	r2, [r3, #13]
		FBL_RxFrame.frame.data5 = 0;
 8001b34:	4b05      	ldr	r3, [pc, #20]	@ (8001b4c <FBL_DiagRoutine_DSC_Coding+0x230>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	739a      	strb	r2, [r3, #14]
		FBL_RxFrame.frame.data6 = 0;
 8001b3a:	4b04      	ldr	r3, [pc, #16]	@ (8001b4c <FBL_DiagRoutine_DSC_Coding+0x230>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	73da      	strb	r2, [r3, #15]
		FBL_RxFrame.frame.data7 = 0;
 8001b40:	4b02      	ldr	r3, [pc, #8]	@ (8001b4c <FBL_DiagRoutine_DSC_Coding+0x230>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	741a      	strb	r2, [r3, #16]
	}
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20010038 	.word	0x20010038
 8001b50:	20010068 	.word	0x20010068
 8001b54:	0800c000 	.word	0x0800c000
 8001b58:	20010004 	.word	0x20010004
 8001b5c:	2001004c 	.word	0x2001004c

08001b60 <FBL_DiagRoutine_DSC_Calibration>:
void FBL_DiagRoutine_DSC_Calibration(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
	if(FBL_CanSpi_Receive(&FBL_RxFrame) != 0)
 8001b64:	488a      	ldr	r0, [pc, #552]	@ (8001d90 <FBL_DiagRoutine_DSC_Calibration+0x230>)
 8001b66:	f7ff f807 	bl	8000b78 <FBL_CanSpi_Receive>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f000 810c 	beq.w	8001d8a <FBL_DiagRoutine_DSC_Calibration+0x22a>
	{
		if(FBL_RxFrame.frame.id == 0x700)
 8001b72:	4b87      	ldr	r3, [pc, #540]	@ (8001d90 <FBL_DiagRoutine_DSC_Calibration+0x230>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001b7a:	f040 80e5 	bne.w	8001d48 <FBL_DiagRoutine_DSC_Calibration+0x1e8>
		{
			if(FBL_RxFrame.frame.data1 == 0x22 && FBL_RxFrame.frame.data2 == 0xF1 && FBL_RxFrame.frame.data3 == 0x86) FBL_DiagRoutine_RDBI_ReadActiveDiagnosticSession();
 8001b7e:	4b84      	ldr	r3, [pc, #528]	@ (8001d90 <FBL_DiagRoutine_DSC_Calibration+0x230>)
 8001b80:	7a9b      	ldrb	r3, [r3, #10]
 8001b82:	2b22      	cmp	r3, #34	@ 0x22
 8001b84:	d109      	bne.n	8001b9a <FBL_DiagRoutine_DSC_Calibration+0x3a>
 8001b86:	4b82      	ldr	r3, [pc, #520]	@ (8001d90 <FBL_DiagRoutine_DSC_Calibration+0x230>)
 8001b88:	7adb      	ldrb	r3, [r3, #11]
 8001b8a:	2bf1      	cmp	r3, #241	@ 0xf1
 8001b8c:	d105      	bne.n	8001b9a <FBL_DiagRoutine_DSC_Calibration+0x3a>
 8001b8e:	4b80      	ldr	r3, [pc, #512]	@ (8001d90 <FBL_DiagRoutine_DSC_Calibration+0x230>)
 8001b90:	7b1b      	ldrb	r3, [r3, #12]
 8001b92:	2b86      	cmp	r3, #134	@ 0x86
 8001b94:	d101      	bne.n	8001b9a <FBL_DiagRoutine_DSC_Calibration+0x3a>
 8001b96:	f000 f905 	bl	8001da4 <FBL_DiagRoutine_RDBI_ReadActiveDiagnosticSession>
			else
			{
				/* Do nothing. */
			}
			if(FBL_RxFrame.frame.data0 == 0x04 && FBL_RxFrame.frame.data1 == 0x31 && FBL_RxFrame.frame.data4 == 0x02) FBL_DiagRoutine_RAR_MassEraseCALIBRATION();
 8001b9a:	4b7d      	ldr	r3, [pc, #500]	@ (8001d90 <FBL_DiagRoutine_DSC_Calibration+0x230>)
 8001b9c:	7a5b      	ldrb	r3, [r3, #9]
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	d109      	bne.n	8001bb6 <FBL_DiagRoutine_DSC_Calibration+0x56>
 8001ba2:	4b7b      	ldr	r3, [pc, #492]	@ (8001d90 <FBL_DiagRoutine_DSC_Calibration+0x230>)
 8001ba4:	7a9b      	ldrb	r3, [r3, #10]
 8001ba6:	2b31      	cmp	r3, #49	@ 0x31
 8001ba8:	d105      	bne.n	8001bb6 <FBL_DiagRoutine_DSC_Calibration+0x56>
 8001baa:	4b79      	ldr	r3, [pc, #484]	@ (8001d90 <FBL_DiagRoutine_DSC_Calibration+0x230>)
 8001bac:	7b5b      	ldrb	r3, [r3, #13]
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d101      	bne.n	8001bb6 <FBL_DiagRoutine_DSC_Calibration+0x56>
 8001bb2:	f7ff fdcd 	bl	8001750 <FBL_DiagRoutine_RAR_MassEraseCALIBRATION>
			else
			{
				/* Do nothing. */
			}
			if(FBL_RxFrame.frame.data1 == 0x34)
 8001bb6:	4b76      	ldr	r3, [pc, #472]	@ (8001d90 <FBL_DiagRoutine_DSC_Calibration+0x230>)
 8001bb8:	7a9b      	ldrb	r3, [r3, #10]
 8001bba:	2b34      	cmp	r3, #52	@ 0x34
 8001bbc:	d108      	bne.n	8001bd0 <FBL_DiagRoutine_DSC_Calibration+0x70>
			{
				if(FBL_ProgrammingAddress == 0) FBL_ProgrammingAddress = 0x08008000;
 8001bbe:	4b75      	ldr	r3, [pc, #468]	@ (8001d94 <FBL_DiagRoutine_DSC_Calibration+0x234>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d102      	bne.n	8001bcc <FBL_DiagRoutine_DSC_Calibration+0x6c>
 8001bc6:	4b73      	ldr	r3, [pc, #460]	@ (8001d94 <FBL_DiagRoutine_DSC_Calibration+0x234>)
 8001bc8:	4a73      	ldr	r2, [pc, #460]	@ (8001d98 <FBL_DiagRoutine_DSC_Calibration+0x238>)
 8001bca:	601a      	str	r2, [r3, #0]
				else
				{
					/* Do nothing. */
				}
				FBL_DiagRoutine_DSC_RequestDownload();
 8001bcc:	f7ff fc02 	bl	80013d4 <FBL_DiagRoutine_DSC_RequestDownload>
			}
			else
			{
				/* Do nothing. */
			}
			if(FBL_RxFrame.frame.data1 == 0x36) FBL_DiagRoutine_DSC_TransferData();
 8001bd0:	4b6f      	ldr	r3, [pc, #444]	@ (8001d90 <FBL_DiagRoutine_DSC_Calibration+0x230>)
 8001bd2:	7a9b      	ldrb	r3, [r3, #10]
 8001bd4:	2b36      	cmp	r3, #54	@ 0x36
 8001bd6:	d101      	bne.n	8001bdc <FBL_DiagRoutine_DSC_Calibration+0x7c>
 8001bd8:	f7ff fc40 	bl	800145c <FBL_DiagRoutine_DSC_TransferData>
			else
			{
				/* Do nothing. */
			}
			if(FBL_RxFrame.frame.data1 == 0x37 && FBL_RxFrame.frame.data0 == 0x01) 	FBL_DiagRoutine_DSC_RequestTransferExit();
 8001bdc:	4b6c      	ldr	r3, [pc, #432]	@ (8001d90 <FBL_DiagRoutine_DSC_Calibration+0x230>)
 8001bde:	7a9b      	ldrb	r3, [r3, #10]
 8001be0:	2b37      	cmp	r3, #55	@ 0x37
 8001be2:	d105      	bne.n	8001bf0 <FBL_DiagRoutine_DSC_Calibration+0x90>
 8001be4:	4b6a      	ldr	r3, [pc, #424]	@ (8001d90 <FBL_DiagRoutine_DSC_Calibration+0x230>)
 8001be6:	7a5b      	ldrb	r3, [r3, #9]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d101      	bne.n	8001bf0 <FBL_DiagRoutine_DSC_Calibration+0x90>
 8001bec:	f7ff fd2c 	bl	8001648 <FBL_DiagRoutine_DSC_RequestTransferExit>
			else
			{
				/* Do nothing. */
			}
			if(FBL_RxFrame.frame.data1 == 0x10 && FBL_RxFrame.frame.data2 == 0x04)
 8001bf0:	4b67      	ldr	r3, [pc, #412]	@ (8001d90 <FBL_DiagRoutine_DSC_Calibration+0x230>)
 8001bf2:	7a9b      	ldrb	r3, [r3, #10]
 8001bf4:	2b10      	cmp	r3, #16
 8001bf6:	d13f      	bne.n	8001c78 <FBL_DiagRoutine_DSC_Calibration+0x118>
 8001bf8:	4b65      	ldr	r3, [pc, #404]	@ (8001d90 <FBL_DiagRoutine_DSC_Calibration+0x230>)
 8001bfa:	7adb      	ldrb	r3, [r3, #11]
 8001bfc:	2b04      	cmp	r3, #4
 8001bfe:	d13b      	bne.n	8001c78 <FBL_DiagRoutine_DSC_Calibration+0x118>
			{
				FBL_DSC_State = CODING;
 8001c00:	4b66      	ldr	r3, [pc, #408]	@ (8001d9c <FBL_DiagRoutine_DSC_Calibration+0x23c>)
 8001c02:	2203      	movs	r2, #3
 8001c04:	701a      	strb	r2, [r3, #0]
				FBL_TxFrame.frame.dlc = 3;
 8001c06:	4b66      	ldr	r3, [pc, #408]	@ (8001da0 <FBL_DiagRoutine_DSC_Calibration+0x240>)
 8001c08:	2203      	movs	r2, #3
 8001c0a:	721a      	strb	r2, [r3, #8]
				FBL_TxFrame.frame.id = 0x701;
 8001c0c:	4b64      	ldr	r3, [pc, #400]	@ (8001da0 <FBL_DiagRoutine_DSC_Calibration+0x240>)
 8001c0e:	f240 7201 	movw	r2, #1793	@ 0x701
 8001c12:	605a      	str	r2, [r3, #4]
				FBL_TxFrame.frame.idType = 1;
 8001c14:	4b62      	ldr	r3, [pc, #392]	@ (8001da0 <FBL_DiagRoutine_DSC_Calibration+0x240>)
 8001c16:	2201      	movs	r2, #1
 8001c18:	701a      	strb	r2, [r3, #0]
				FBL_TxFrame.frame.data0 = 0x02;
 8001c1a:	4b61      	ldr	r3, [pc, #388]	@ (8001da0 <FBL_DiagRoutine_DSC_Calibration+0x240>)
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	725a      	strb	r2, [r3, #9]
				FBL_TxFrame.frame.data1 = 0x50;
 8001c20:	4b5f      	ldr	r3, [pc, #380]	@ (8001da0 <FBL_DiagRoutine_DSC_Calibration+0x240>)
 8001c22:	2250      	movs	r2, #80	@ 0x50
 8001c24:	729a      	strb	r2, [r3, #10]
				FBL_TxFrame.frame.data2 = 0x04;
 8001c26:	4b5e      	ldr	r3, [pc, #376]	@ (8001da0 <FBL_DiagRoutine_DSC_Calibration+0x240>)
 8001c28:	2204      	movs	r2, #4
 8001c2a:	72da      	strb	r2, [r3, #11]
				FBL_CanSpi_Transmit(&FBL_TxFrame);
 8001c2c:	485c      	ldr	r0, [pc, #368]	@ (8001da0 <FBL_DiagRoutine_DSC_Calibration+0x240>)
 8001c2e:	f7fe ff2b 	bl	8000a88 <FBL_CanSpi_Transmit>
				FBL_DiagRoutine_DSC_Calibration();
 8001c32:	f7ff ff95 	bl	8001b60 <FBL_DiagRoutine_DSC_Calibration>
				FBL_TxFrame.frame.dlc = 0;
 8001c36:	4b5a      	ldr	r3, [pc, #360]	@ (8001da0 <FBL_DiagRoutine_DSC_Calibration+0x240>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	721a      	strb	r2, [r3, #8]
				FBL_TxFrame.frame.id = 0;
 8001c3c:	4b58      	ldr	r3, [pc, #352]	@ (8001da0 <FBL_DiagRoutine_DSC_Calibration+0x240>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	605a      	str	r2, [r3, #4]
				FBL_TxFrame.frame.idType = 0;
 8001c42:	4b57      	ldr	r3, [pc, #348]	@ (8001da0 <FBL_DiagRoutine_DSC_Calibration+0x240>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	701a      	strb	r2, [r3, #0]
				FBL_TxFrame.frame.data0 = 0;
 8001c48:	4b55      	ldr	r3, [pc, #340]	@ (8001da0 <FBL_DiagRoutine_DSC_Calibration+0x240>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	725a      	strb	r2, [r3, #9]
				FBL_TxFrame.frame.data1 = 0;
 8001c4e:	4b54      	ldr	r3, [pc, #336]	@ (8001da0 <FBL_DiagRoutine_DSC_Calibration+0x240>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	729a      	strb	r2, [r3, #10]
				FBL_TxFrame.frame.data2 = 0;
 8001c54:	4b52      	ldr	r3, [pc, #328]	@ (8001da0 <FBL_DiagRoutine_DSC_Calibration+0x240>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	72da      	strb	r2, [r3, #11]
				FBL_TxFrame.frame.data3 = 0;
 8001c5a:	4b51      	ldr	r3, [pc, #324]	@ (8001da0 <FBL_DiagRoutine_DSC_Calibration+0x240>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	731a      	strb	r2, [r3, #12]
				FBL_TxFrame.frame.data4 = 0;
 8001c60:	4b4f      	ldr	r3, [pc, #316]	@ (8001da0 <FBL_DiagRoutine_DSC_Calibration+0x240>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	735a      	strb	r2, [r3, #13]
				FBL_TxFrame.frame.data5 = 0;
 8001c66:	4b4e      	ldr	r3, [pc, #312]	@ (8001da0 <FBL_DiagRoutine_DSC_Calibration+0x240>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	739a      	strb	r2, [r3, #14]
				FBL_TxFrame.frame.data6 = 0;
 8001c6c:	4b4c      	ldr	r3, [pc, #304]	@ (8001da0 <FBL_DiagRoutine_DSC_Calibration+0x240>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	73da      	strb	r2, [r3, #15]
				FBL_TxFrame.frame.data7 = 0;
 8001c72:	4b4b      	ldr	r3, [pc, #300]	@ (8001da0 <FBL_DiagRoutine_DSC_Calibration+0x240>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	741a      	strb	r2, [r3, #16]
			}
			else
			{
				/* Do nothing. */
			}
			if(FBL_RxFrame.frame.data1 == 0x10 && FBL_RxFrame.frame.data2 == 0x02)
 8001c78:	4b45      	ldr	r3, [pc, #276]	@ (8001d90 <FBL_DiagRoutine_DSC_Calibration+0x230>)
 8001c7a:	7a9b      	ldrb	r3, [r3, #10]
 8001c7c:	2b10      	cmp	r3, #16
 8001c7e:	d13f      	bne.n	8001d00 <FBL_DiagRoutine_DSC_Calibration+0x1a0>
 8001c80:	4b43      	ldr	r3, [pc, #268]	@ (8001d90 <FBL_DiagRoutine_DSC_Calibration+0x230>)
 8001c82:	7adb      	ldrb	r3, [r3, #11]
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d13b      	bne.n	8001d00 <FBL_DiagRoutine_DSC_Calibration+0x1a0>
			{
				FBL_DSC_State = PROGRAMMING;
 8001c88:	4b44      	ldr	r3, [pc, #272]	@ (8001d9c <FBL_DiagRoutine_DSC_Calibration+0x23c>)
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	701a      	strb	r2, [r3, #0]
				FBL_TxFrame.frame.dlc = 3;
 8001c8e:	4b44      	ldr	r3, [pc, #272]	@ (8001da0 <FBL_DiagRoutine_DSC_Calibration+0x240>)
 8001c90:	2203      	movs	r2, #3
 8001c92:	721a      	strb	r2, [r3, #8]
				FBL_TxFrame.frame.id = 0x701;
 8001c94:	4b42      	ldr	r3, [pc, #264]	@ (8001da0 <FBL_DiagRoutine_DSC_Calibration+0x240>)
 8001c96:	f240 7201 	movw	r2, #1793	@ 0x701
 8001c9a:	605a      	str	r2, [r3, #4]
				FBL_TxFrame.frame.idType = 1;
 8001c9c:	4b40      	ldr	r3, [pc, #256]	@ (8001da0 <FBL_DiagRoutine_DSC_Calibration+0x240>)
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	701a      	strb	r2, [r3, #0]
				FBL_TxFrame.frame.data0 = 0x02;
 8001ca2:	4b3f      	ldr	r3, [pc, #252]	@ (8001da0 <FBL_DiagRoutine_DSC_Calibration+0x240>)
 8001ca4:	2202      	movs	r2, #2
 8001ca6:	725a      	strb	r2, [r3, #9]
				FBL_TxFrame.frame.data1 = 0x50;
 8001ca8:	4b3d      	ldr	r3, [pc, #244]	@ (8001da0 <FBL_DiagRoutine_DSC_Calibration+0x240>)
 8001caa:	2250      	movs	r2, #80	@ 0x50
 8001cac:	729a      	strb	r2, [r3, #10]
				FBL_TxFrame.frame.data2 = 0x02;
 8001cae:	4b3c      	ldr	r3, [pc, #240]	@ (8001da0 <FBL_DiagRoutine_DSC_Calibration+0x240>)
 8001cb0:	2202      	movs	r2, #2
 8001cb2:	72da      	strb	r2, [r3, #11]
				FBL_CanSpi_Transmit(&FBL_TxFrame);
 8001cb4:	483a      	ldr	r0, [pc, #232]	@ (8001da0 <FBL_DiagRoutine_DSC_Calibration+0x240>)
 8001cb6:	f7fe fee7 	bl	8000a88 <FBL_CanSpi_Transmit>
				FBL_DiagRoutine_DSC_Calibration();
 8001cba:	f7ff ff51 	bl	8001b60 <FBL_DiagRoutine_DSC_Calibration>
				FBL_TxFrame.frame.dlc = 0;
 8001cbe:	4b38      	ldr	r3, [pc, #224]	@ (8001da0 <FBL_DiagRoutine_DSC_Calibration+0x240>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	721a      	strb	r2, [r3, #8]
				FBL_TxFrame.frame.id = 0;
 8001cc4:	4b36      	ldr	r3, [pc, #216]	@ (8001da0 <FBL_DiagRoutine_DSC_Calibration+0x240>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	605a      	str	r2, [r3, #4]
				FBL_TxFrame.frame.idType = 0;
 8001cca:	4b35      	ldr	r3, [pc, #212]	@ (8001da0 <FBL_DiagRoutine_DSC_Calibration+0x240>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	701a      	strb	r2, [r3, #0]
				FBL_TxFrame.frame.data0 = 0;
 8001cd0:	4b33      	ldr	r3, [pc, #204]	@ (8001da0 <FBL_DiagRoutine_DSC_Calibration+0x240>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	725a      	strb	r2, [r3, #9]
				FBL_TxFrame.frame.data1 = 0;
 8001cd6:	4b32      	ldr	r3, [pc, #200]	@ (8001da0 <FBL_DiagRoutine_DSC_Calibration+0x240>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	729a      	strb	r2, [r3, #10]
				FBL_TxFrame.frame.data2 = 0;
 8001cdc:	4b30      	ldr	r3, [pc, #192]	@ (8001da0 <FBL_DiagRoutine_DSC_Calibration+0x240>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	72da      	strb	r2, [r3, #11]
				FBL_TxFrame.frame.data3 = 0;
 8001ce2:	4b2f      	ldr	r3, [pc, #188]	@ (8001da0 <FBL_DiagRoutine_DSC_Calibration+0x240>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	731a      	strb	r2, [r3, #12]
				FBL_TxFrame.frame.data4 = 0;
 8001ce8:	4b2d      	ldr	r3, [pc, #180]	@ (8001da0 <FBL_DiagRoutine_DSC_Calibration+0x240>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	735a      	strb	r2, [r3, #13]
				FBL_TxFrame.frame.data5 = 0;
 8001cee:	4b2c      	ldr	r3, [pc, #176]	@ (8001da0 <FBL_DiagRoutine_DSC_Calibration+0x240>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	739a      	strb	r2, [r3, #14]
				FBL_TxFrame.frame.data6 = 0;
 8001cf4:	4b2a      	ldr	r3, [pc, #168]	@ (8001da0 <FBL_DiagRoutine_DSC_Calibration+0x240>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	73da      	strb	r2, [r3, #15]
				FBL_TxFrame.frame.data7 = 0;
 8001cfa:	4b29      	ldr	r3, [pc, #164]	@ (8001da0 <FBL_DiagRoutine_DSC_Calibration+0x240>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	741a      	strb	r2, [r3, #16]
			}
			else
			{
				/* Do nothing. */
			}
			if(FBL_RxFrame.frame.data1 == 0x11 && FBL_RxFrame.frame.data2 == 0x01 && FBL_RxFrame.frame.data0 == 0x02)
 8001d00:	4b23      	ldr	r3, [pc, #140]	@ (8001d90 <FBL_DiagRoutine_DSC_Calibration+0x230>)
 8001d02:	7a9b      	ldrb	r3, [r3, #10]
 8001d04:	2b11      	cmp	r3, #17
 8001d06:	d11f      	bne.n	8001d48 <FBL_DiagRoutine_DSC_Calibration+0x1e8>
 8001d08:	4b21      	ldr	r3, [pc, #132]	@ (8001d90 <FBL_DiagRoutine_DSC_Calibration+0x230>)
 8001d0a:	7adb      	ldrb	r3, [r3, #11]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d11b      	bne.n	8001d48 <FBL_DiagRoutine_DSC_Calibration+0x1e8>
 8001d10:	4b1f      	ldr	r3, [pc, #124]	@ (8001d90 <FBL_DiagRoutine_DSC_Calibration+0x230>)
 8001d12:	7a5b      	ldrb	r3, [r3, #9]
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d117      	bne.n	8001d48 <FBL_DiagRoutine_DSC_Calibration+0x1e8>
			{
				FBL_TxFrame.frame.dlc = 3;
 8001d18:	4b21      	ldr	r3, [pc, #132]	@ (8001da0 <FBL_DiagRoutine_DSC_Calibration+0x240>)
 8001d1a:	2203      	movs	r2, #3
 8001d1c:	721a      	strb	r2, [r3, #8]
				FBL_TxFrame.frame.id = 0x701;
 8001d1e:	4b20      	ldr	r3, [pc, #128]	@ (8001da0 <FBL_DiagRoutine_DSC_Calibration+0x240>)
 8001d20:	f240 7201 	movw	r2, #1793	@ 0x701
 8001d24:	605a      	str	r2, [r3, #4]
				FBL_TxFrame.frame.idType = 1;
 8001d26:	4b1e      	ldr	r3, [pc, #120]	@ (8001da0 <FBL_DiagRoutine_DSC_Calibration+0x240>)
 8001d28:	2201      	movs	r2, #1
 8001d2a:	701a      	strb	r2, [r3, #0]
				FBL_TxFrame.frame.data0 = 0x02;
 8001d2c:	4b1c      	ldr	r3, [pc, #112]	@ (8001da0 <FBL_DiagRoutine_DSC_Calibration+0x240>)
 8001d2e:	2202      	movs	r2, #2
 8001d30:	725a      	strb	r2, [r3, #9]
				FBL_TxFrame.frame.data1 = 0x51;
 8001d32:	4b1b      	ldr	r3, [pc, #108]	@ (8001da0 <FBL_DiagRoutine_DSC_Calibration+0x240>)
 8001d34:	2251      	movs	r2, #81	@ 0x51
 8001d36:	729a      	strb	r2, [r3, #10]
				FBL_TxFrame.frame.data2 = 0x01;
 8001d38:	4b19      	ldr	r3, [pc, #100]	@ (8001da0 <FBL_DiagRoutine_DSC_Calibration+0x240>)
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	72da      	strb	r2, [r3, #11]
				FBL_CanSpi_Transmit(&FBL_TxFrame);
 8001d3e:	4818      	ldr	r0, [pc, #96]	@ (8001da0 <FBL_DiagRoutine_DSC_Calibration+0x240>)
 8001d40:	f7fe fea2 	bl	8000a88 <FBL_CanSpi_Transmit>
				FBL_DiagRoutine_ER_HardReset();
 8001d44:	f7ff fdcc 	bl	80018e0 <FBL_DiagRoutine_ER_HardReset>
		}
		else
		{
			/* Do nothing. */
		}
		FBL_RxFrame.frame.dlc = 0;
 8001d48:	4b11      	ldr	r3, [pc, #68]	@ (8001d90 <FBL_DiagRoutine_DSC_Calibration+0x230>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	721a      	strb	r2, [r3, #8]
		FBL_RxFrame.frame.id = 0;
 8001d4e:	4b10      	ldr	r3, [pc, #64]	@ (8001d90 <FBL_DiagRoutine_DSC_Calibration+0x230>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	605a      	str	r2, [r3, #4]
		FBL_RxFrame.frame.idType = 0;
 8001d54:	4b0e      	ldr	r3, [pc, #56]	@ (8001d90 <FBL_DiagRoutine_DSC_Calibration+0x230>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	701a      	strb	r2, [r3, #0]
		FBL_RxFrame.frame.data0 = 0;
 8001d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d90 <FBL_DiagRoutine_DSC_Calibration+0x230>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	725a      	strb	r2, [r3, #9]
		FBL_RxFrame.frame.data1 = 0;
 8001d60:	4b0b      	ldr	r3, [pc, #44]	@ (8001d90 <FBL_DiagRoutine_DSC_Calibration+0x230>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	729a      	strb	r2, [r3, #10]
		FBL_RxFrame.frame.data2 = 0;
 8001d66:	4b0a      	ldr	r3, [pc, #40]	@ (8001d90 <FBL_DiagRoutine_DSC_Calibration+0x230>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	72da      	strb	r2, [r3, #11]
		FBL_RxFrame.frame.data3 = 0;
 8001d6c:	4b08      	ldr	r3, [pc, #32]	@ (8001d90 <FBL_DiagRoutine_DSC_Calibration+0x230>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	731a      	strb	r2, [r3, #12]
		FBL_RxFrame.frame.data4 = 0;
 8001d72:	4b07      	ldr	r3, [pc, #28]	@ (8001d90 <FBL_DiagRoutine_DSC_Calibration+0x230>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	735a      	strb	r2, [r3, #13]
		FBL_RxFrame.frame.data5 = 0;
 8001d78:	4b05      	ldr	r3, [pc, #20]	@ (8001d90 <FBL_DiagRoutine_DSC_Calibration+0x230>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	739a      	strb	r2, [r3, #14]
		FBL_RxFrame.frame.data6 = 0;
 8001d7e:	4b04      	ldr	r3, [pc, #16]	@ (8001d90 <FBL_DiagRoutine_DSC_Calibration+0x230>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	73da      	strb	r2, [r3, #15]
		FBL_RxFrame.frame.data7 = 0;
 8001d84:	4b02      	ldr	r3, [pc, #8]	@ (8001d90 <FBL_DiagRoutine_DSC_Calibration+0x230>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	741a      	strb	r2, [r3, #16]
	}
}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	20010038 	.word	0x20010038
 8001d94:	20010068 	.word	0x20010068
 8001d98:	08008000 	.word	0x08008000
 8001d9c:	20010004 	.word	0x20010004
 8001da0:	2001004c 	.word	0x2001004c

08001da4 <FBL_DiagRoutine_RDBI_ReadActiveDiagnosticSession>:
void FBL_DiagRoutine_RDBI_ReadActiveDiagnosticSession(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
	FBL_TxFrame.frame.dlc = 5;
 8001da8:	4b1f      	ldr	r3, [pc, #124]	@ (8001e28 <FBL_DiagRoutine_RDBI_ReadActiveDiagnosticSession+0x84>)
 8001daa:	2205      	movs	r2, #5
 8001dac:	721a      	strb	r2, [r3, #8]
	FBL_TxFrame.frame.id =0x701;
 8001dae:	4b1e      	ldr	r3, [pc, #120]	@ (8001e28 <FBL_DiagRoutine_RDBI_ReadActiveDiagnosticSession+0x84>)
 8001db0:	f240 7201 	movw	r2, #1793	@ 0x701
 8001db4:	605a      	str	r2, [r3, #4]
	FBL_TxFrame.frame.idType = 1;
 8001db6:	4b1c      	ldr	r3, [pc, #112]	@ (8001e28 <FBL_DiagRoutine_RDBI_ReadActiveDiagnosticSession+0x84>)
 8001db8:	2201      	movs	r2, #1
 8001dba:	701a      	strb	r2, [r3, #0]
	FBL_TxFrame.frame.data0 = 0x04;
 8001dbc:	4b1a      	ldr	r3, [pc, #104]	@ (8001e28 <FBL_DiagRoutine_RDBI_ReadActiveDiagnosticSession+0x84>)
 8001dbe:	2204      	movs	r2, #4
 8001dc0:	725a      	strb	r2, [r3, #9]
	FBL_TxFrame.frame.data1 = 0x62;
 8001dc2:	4b19      	ldr	r3, [pc, #100]	@ (8001e28 <FBL_DiagRoutine_RDBI_ReadActiveDiagnosticSession+0x84>)
 8001dc4:	2262      	movs	r2, #98	@ 0x62
 8001dc6:	729a      	strb	r2, [r3, #10]
	FBL_TxFrame.frame.data2 = 0xF1;
 8001dc8:	4b17      	ldr	r3, [pc, #92]	@ (8001e28 <FBL_DiagRoutine_RDBI_ReadActiveDiagnosticSession+0x84>)
 8001dca:	22f1      	movs	r2, #241	@ 0xf1
 8001dcc:	72da      	strb	r2, [r3, #11]
	FBL_TxFrame.frame.data3 = 0x86;
 8001dce:	4b16      	ldr	r3, [pc, #88]	@ (8001e28 <FBL_DiagRoutine_RDBI_ReadActiveDiagnosticSession+0x84>)
 8001dd0:	2286      	movs	r2, #134	@ 0x86
 8001dd2:	731a      	strb	r2, [r3, #12]
	FBL_TxFrame.frame.data4 = FBL_DSC_State;
 8001dd4:	4b15      	ldr	r3, [pc, #84]	@ (8001e2c <FBL_DiagRoutine_RDBI_ReadActiveDiagnosticSession+0x88>)
 8001dd6:	781a      	ldrb	r2, [r3, #0]
 8001dd8:	4b13      	ldr	r3, [pc, #76]	@ (8001e28 <FBL_DiagRoutine_RDBI_ReadActiveDiagnosticSession+0x84>)
 8001dda:	735a      	strb	r2, [r3, #13]
	FBL_CanSpi_Transmit(&FBL_TxFrame);
 8001ddc:	4812      	ldr	r0, [pc, #72]	@ (8001e28 <FBL_DiagRoutine_RDBI_ReadActiveDiagnosticSession+0x84>)
 8001dde:	f7fe fe53 	bl	8000a88 <FBL_CanSpi_Transmit>
	FBL_TxFrame.frame.idType = 0;
 8001de2:	4b11      	ldr	r3, [pc, #68]	@ (8001e28 <FBL_DiagRoutine_RDBI_ReadActiveDiagnosticSession+0x84>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	701a      	strb	r2, [r3, #0]
	FBL_TxFrame.frame.id = 0;
 8001de8:	4b0f      	ldr	r3, [pc, #60]	@ (8001e28 <FBL_DiagRoutine_RDBI_ReadActiveDiagnosticSession+0x84>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	605a      	str	r2, [r3, #4]
	FBL_TxFrame.frame.dlc = 0;
 8001dee:	4b0e      	ldr	r3, [pc, #56]	@ (8001e28 <FBL_DiagRoutine_RDBI_ReadActiveDiagnosticSession+0x84>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	721a      	strb	r2, [r3, #8]
	FBL_TxFrame.frame.data0 = 0;
 8001df4:	4b0c      	ldr	r3, [pc, #48]	@ (8001e28 <FBL_DiagRoutine_RDBI_ReadActiveDiagnosticSession+0x84>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	725a      	strb	r2, [r3, #9]
	FBL_TxFrame.frame.data1 = 0;
 8001dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8001e28 <FBL_DiagRoutine_RDBI_ReadActiveDiagnosticSession+0x84>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	729a      	strb	r2, [r3, #10]
	FBL_TxFrame.frame.data2 = 0;
 8001e00:	4b09      	ldr	r3, [pc, #36]	@ (8001e28 <FBL_DiagRoutine_RDBI_ReadActiveDiagnosticSession+0x84>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	72da      	strb	r2, [r3, #11]
	FBL_TxFrame.frame.data3 = 0;
 8001e06:	4b08      	ldr	r3, [pc, #32]	@ (8001e28 <FBL_DiagRoutine_RDBI_ReadActiveDiagnosticSession+0x84>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	731a      	strb	r2, [r3, #12]
	FBL_TxFrame.frame.data4 = 0;
 8001e0c:	4b06      	ldr	r3, [pc, #24]	@ (8001e28 <FBL_DiagRoutine_RDBI_ReadActiveDiagnosticSession+0x84>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	735a      	strb	r2, [r3, #13]
	FBL_TxFrame.frame.data5 = 0;
 8001e12:	4b05      	ldr	r3, [pc, #20]	@ (8001e28 <FBL_DiagRoutine_RDBI_ReadActiveDiagnosticSession+0x84>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	739a      	strb	r2, [r3, #14]
	FBL_TxFrame.frame.data6 = 0;
 8001e18:	4b03      	ldr	r3, [pc, #12]	@ (8001e28 <FBL_DiagRoutine_RDBI_ReadActiveDiagnosticSession+0x84>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	73da      	strb	r2, [r3, #15]
	FBL_TxFrame.frame.data7 = 0;
 8001e1e:	4b02      	ldr	r3, [pc, #8]	@ (8001e28 <FBL_DiagRoutine_RDBI_ReadActiveDiagnosticSession+0x84>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	741a      	strb	r2, [r3, #16]
}
 8001e24:	bf00      	nop
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	2001004c 	.word	0x2001004c
 8001e2c:	20010004 	.word	0x20010004

08001e30 <FBL_DiagRoutine_DSC_Programming>:
void FBL_DiagRoutine_DSC_Programming(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
	if(FBL_CanSpi_Receive(&FBL_RxFrame) != 0)
 8001e34:	488e      	ldr	r0, [pc, #568]	@ (8002070 <FBL_DiagRoutine_DSC_Programming+0x240>)
 8001e36:	f7fe fe9f 	bl	8000b78 <FBL_CanSpi_Receive>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	f000 8114 	beq.w	800206a <FBL_DiagRoutine_DSC_Programming+0x23a>
	{
		if(FBL_RxFrame.frame.id == 0x700)
 8001e42:	4b8b      	ldr	r3, [pc, #556]	@ (8002070 <FBL_DiagRoutine_DSC_Programming+0x240>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001e4a:	f040 80ed 	bne.w	8002028 <FBL_DiagRoutine_DSC_Programming+0x1f8>
		{
			if(FBL_RxFrame.frame.data1 == 0x22 && FBL_RxFrame.frame.data2 == 0xF1 && FBL_RxFrame.frame.data3 == 0x86) FBL_DiagRoutine_RDBI_ReadActiveDiagnosticSession();
 8001e4e:	4b88      	ldr	r3, [pc, #544]	@ (8002070 <FBL_DiagRoutine_DSC_Programming+0x240>)
 8001e50:	7a9b      	ldrb	r3, [r3, #10]
 8001e52:	2b22      	cmp	r3, #34	@ 0x22
 8001e54:	d109      	bne.n	8001e6a <FBL_DiagRoutine_DSC_Programming+0x3a>
 8001e56:	4b86      	ldr	r3, [pc, #536]	@ (8002070 <FBL_DiagRoutine_DSC_Programming+0x240>)
 8001e58:	7adb      	ldrb	r3, [r3, #11]
 8001e5a:	2bf1      	cmp	r3, #241	@ 0xf1
 8001e5c:	d105      	bne.n	8001e6a <FBL_DiagRoutine_DSC_Programming+0x3a>
 8001e5e:	4b84      	ldr	r3, [pc, #528]	@ (8002070 <FBL_DiagRoutine_DSC_Programming+0x240>)
 8001e60:	7b1b      	ldrb	r3, [r3, #12]
 8001e62:	2b86      	cmp	r3, #134	@ 0x86
 8001e64:	d101      	bne.n	8001e6a <FBL_DiagRoutine_DSC_Programming+0x3a>
 8001e66:	f7ff ff9d 	bl	8001da4 <FBL_DiagRoutine_RDBI_ReadActiveDiagnosticSession>
			else
			{
				/* Do nothing. */
			}
			if(FBL_RxFrame.frame.data0 == 0x04 && FBL_RxFrame.frame.data1 == 0x31 && FBL_RxFrame.frame.data4 == 0x00) FBL_DiagRoutine_RAR_MassEraseAPPL();
 8001e6a:	4b81      	ldr	r3, [pc, #516]	@ (8002070 <FBL_DiagRoutine_DSC_Programming+0x240>)
 8001e6c:	7a5b      	ldrb	r3, [r3, #9]
 8001e6e:	2b04      	cmp	r3, #4
 8001e70:	d109      	bne.n	8001e86 <FBL_DiagRoutine_DSC_Programming+0x56>
 8001e72:	4b7f      	ldr	r3, [pc, #508]	@ (8002070 <FBL_DiagRoutine_DSC_Programming+0x240>)
 8001e74:	7a9b      	ldrb	r3, [r3, #10]
 8001e76:	2b31      	cmp	r3, #49	@ 0x31
 8001e78:	d105      	bne.n	8001e86 <FBL_DiagRoutine_DSC_Programming+0x56>
 8001e7a:	4b7d      	ldr	r3, [pc, #500]	@ (8002070 <FBL_DiagRoutine_DSC_Programming+0x240>)
 8001e7c:	7b5b      	ldrb	r3, [r3, #13]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <FBL_DiagRoutine_DSC_Programming+0x56>
 8001e82:	f7ff fcaf 	bl	80017e4 <FBL_DiagRoutine_RAR_MassEraseAPPL>
			else
			{
				/* Do nothing. */
			}
			if(FBL_RxFrame.frame.data1 == 0x34)
 8001e86:	4b7a      	ldr	r3, [pc, #488]	@ (8002070 <FBL_DiagRoutine_DSC_Programming+0x240>)
 8001e88:	7a9b      	ldrb	r3, [r3, #10]
 8001e8a:	2b34      	cmp	r3, #52	@ 0x34
 8001e8c:	d110      	bne.n	8001eb0 <FBL_DiagRoutine_DSC_Programming+0x80>
			{
				FBL_ProgrammingAddress = (0x08 << 24)
				| (FBL_RxFrame.frame.data4 << 16)
 8001e8e:	4b78      	ldr	r3, [pc, #480]	@ (8002070 <FBL_DiagRoutine_DSC_Programming+0x240>)
 8001e90:	7b5b      	ldrb	r3, [r3, #13]
 8001e92:	041b      	lsls	r3, r3, #16
 8001e94:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
				| (FBL_RxFrame.frame.data5 << 8)
 8001e98:	4b75      	ldr	r3, [pc, #468]	@ (8002070 <FBL_DiagRoutine_DSC_Programming+0x240>)
 8001e9a:	7b9b      	ldrb	r3, [r3, #14]
 8001e9c:	021b      	lsls	r3, r3, #8
 8001e9e:	4313      	orrs	r3, r2
				| (FBL_RxFrame.frame.data6);
 8001ea0:	4a73      	ldr	r2, [pc, #460]	@ (8002070 <FBL_DiagRoutine_DSC_Programming+0x240>)
 8001ea2:	7bd2      	ldrb	r2, [r2, #15]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	461a      	mov	r2, r3
				FBL_ProgrammingAddress = (0x08 << 24)
 8001ea8:	4b72      	ldr	r3, [pc, #456]	@ (8002074 <FBL_DiagRoutine_DSC_Programming+0x244>)
 8001eaa:	601a      	str	r2, [r3, #0]
				FBL_DiagRoutine_DSC_RequestDownload();
 8001eac:	f7ff fa92 	bl	80013d4 <FBL_DiagRoutine_DSC_RequestDownload>
			}
			else
			{
				/* Do nothing. */
			}
			if(FBL_RxFrame.frame.data1 == 0x36) FBL_DiagRoutine_DSC_TransferData();
 8001eb0:	4b6f      	ldr	r3, [pc, #444]	@ (8002070 <FBL_DiagRoutine_DSC_Programming+0x240>)
 8001eb2:	7a9b      	ldrb	r3, [r3, #10]
 8001eb4:	2b36      	cmp	r3, #54	@ 0x36
 8001eb6:	d101      	bne.n	8001ebc <FBL_DiagRoutine_DSC_Programming+0x8c>
 8001eb8:	f7ff fad0 	bl	800145c <FBL_DiagRoutine_DSC_TransferData>
			else
			{
				/* Do nothing. */
			}
			if(FBL_RxFrame.frame.data1 == 0x37 && FBL_RxFrame.frame.data0 == 0x01) FBL_DiagRoutine_DSC_RequestTransferExit();
 8001ebc:	4b6c      	ldr	r3, [pc, #432]	@ (8002070 <FBL_DiagRoutine_DSC_Programming+0x240>)
 8001ebe:	7a9b      	ldrb	r3, [r3, #10]
 8001ec0:	2b37      	cmp	r3, #55	@ 0x37
 8001ec2:	d105      	bne.n	8001ed0 <FBL_DiagRoutine_DSC_Programming+0xa0>
 8001ec4:	4b6a      	ldr	r3, [pc, #424]	@ (8002070 <FBL_DiagRoutine_DSC_Programming+0x240>)
 8001ec6:	7a5b      	ldrb	r3, [r3, #9]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d101      	bne.n	8001ed0 <FBL_DiagRoutine_DSC_Programming+0xa0>
 8001ecc:	f7ff fbbc 	bl	8001648 <FBL_DiagRoutine_DSC_RequestTransferExit>
			else
			{
				/* Do nothing. */
			}
			if(FBL_RxFrame.frame.data1 == 0x10 && FBL_RxFrame.frame.data2 == 0x04)
 8001ed0:	4b67      	ldr	r3, [pc, #412]	@ (8002070 <FBL_DiagRoutine_DSC_Programming+0x240>)
 8001ed2:	7a9b      	ldrb	r3, [r3, #10]
 8001ed4:	2b10      	cmp	r3, #16
 8001ed6:	d13f      	bne.n	8001f58 <FBL_DiagRoutine_DSC_Programming+0x128>
 8001ed8:	4b65      	ldr	r3, [pc, #404]	@ (8002070 <FBL_DiagRoutine_DSC_Programming+0x240>)
 8001eda:	7adb      	ldrb	r3, [r3, #11]
 8001edc:	2b04      	cmp	r3, #4
 8001ede:	d13b      	bne.n	8001f58 <FBL_DiagRoutine_DSC_Programming+0x128>
			{
				FBL_DSC_State = CODING;
 8001ee0:	4b65      	ldr	r3, [pc, #404]	@ (8002078 <FBL_DiagRoutine_DSC_Programming+0x248>)
 8001ee2:	2203      	movs	r2, #3
 8001ee4:	701a      	strb	r2, [r3, #0]
				FBL_TxFrame.frame.dlc = 3;
 8001ee6:	4b65      	ldr	r3, [pc, #404]	@ (800207c <FBL_DiagRoutine_DSC_Programming+0x24c>)
 8001ee8:	2203      	movs	r2, #3
 8001eea:	721a      	strb	r2, [r3, #8]
				FBL_TxFrame.frame.id = 0x701;
 8001eec:	4b63      	ldr	r3, [pc, #396]	@ (800207c <FBL_DiagRoutine_DSC_Programming+0x24c>)
 8001eee:	f240 7201 	movw	r2, #1793	@ 0x701
 8001ef2:	605a      	str	r2, [r3, #4]
				FBL_TxFrame.frame.idType = 1;
 8001ef4:	4b61      	ldr	r3, [pc, #388]	@ (800207c <FBL_DiagRoutine_DSC_Programming+0x24c>)
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	701a      	strb	r2, [r3, #0]
				FBL_TxFrame.frame.data0 = 0x02;
 8001efa:	4b60      	ldr	r3, [pc, #384]	@ (800207c <FBL_DiagRoutine_DSC_Programming+0x24c>)
 8001efc:	2202      	movs	r2, #2
 8001efe:	725a      	strb	r2, [r3, #9]
				FBL_TxFrame.frame.data1 = 0x50;
 8001f00:	4b5e      	ldr	r3, [pc, #376]	@ (800207c <FBL_DiagRoutine_DSC_Programming+0x24c>)
 8001f02:	2250      	movs	r2, #80	@ 0x50
 8001f04:	729a      	strb	r2, [r3, #10]
				FBL_TxFrame.frame.data2 = 0x04;
 8001f06:	4b5d      	ldr	r3, [pc, #372]	@ (800207c <FBL_DiagRoutine_DSC_Programming+0x24c>)
 8001f08:	2204      	movs	r2, #4
 8001f0a:	72da      	strb	r2, [r3, #11]
				FBL_CanSpi_Transmit(&FBL_TxFrame);
 8001f0c:	485b      	ldr	r0, [pc, #364]	@ (800207c <FBL_DiagRoutine_DSC_Programming+0x24c>)
 8001f0e:	f7fe fdbb 	bl	8000a88 <FBL_CanSpi_Transmit>
				FBL_DiagRoutine_DSC_Calibration();
 8001f12:	f7ff fe25 	bl	8001b60 <FBL_DiagRoutine_DSC_Calibration>
				FBL_TxFrame.frame.dlc = 0;
 8001f16:	4b59      	ldr	r3, [pc, #356]	@ (800207c <FBL_DiagRoutine_DSC_Programming+0x24c>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	721a      	strb	r2, [r3, #8]
				FBL_TxFrame.frame.id = 0;
 8001f1c:	4b57      	ldr	r3, [pc, #348]	@ (800207c <FBL_DiagRoutine_DSC_Programming+0x24c>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	605a      	str	r2, [r3, #4]
				FBL_TxFrame.frame.idType = 0;
 8001f22:	4b56      	ldr	r3, [pc, #344]	@ (800207c <FBL_DiagRoutine_DSC_Programming+0x24c>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	701a      	strb	r2, [r3, #0]
				FBL_TxFrame.frame.data0 = 0;
 8001f28:	4b54      	ldr	r3, [pc, #336]	@ (800207c <FBL_DiagRoutine_DSC_Programming+0x24c>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	725a      	strb	r2, [r3, #9]
				FBL_TxFrame.frame.data1 = 0;
 8001f2e:	4b53      	ldr	r3, [pc, #332]	@ (800207c <FBL_DiagRoutine_DSC_Programming+0x24c>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	729a      	strb	r2, [r3, #10]
				FBL_TxFrame.frame.data2 = 0;
 8001f34:	4b51      	ldr	r3, [pc, #324]	@ (800207c <FBL_DiagRoutine_DSC_Programming+0x24c>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	72da      	strb	r2, [r3, #11]
				FBL_TxFrame.frame.data3 = 0;
 8001f3a:	4b50      	ldr	r3, [pc, #320]	@ (800207c <FBL_DiagRoutine_DSC_Programming+0x24c>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	731a      	strb	r2, [r3, #12]
				FBL_TxFrame.frame.data4 = 0;
 8001f40:	4b4e      	ldr	r3, [pc, #312]	@ (800207c <FBL_DiagRoutine_DSC_Programming+0x24c>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	735a      	strb	r2, [r3, #13]
				FBL_TxFrame.frame.data5 = 0;
 8001f46:	4b4d      	ldr	r3, [pc, #308]	@ (800207c <FBL_DiagRoutine_DSC_Programming+0x24c>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	739a      	strb	r2, [r3, #14]
				FBL_TxFrame.frame.data6 = 0;
 8001f4c:	4b4b      	ldr	r3, [pc, #300]	@ (800207c <FBL_DiagRoutine_DSC_Programming+0x24c>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	73da      	strb	r2, [r3, #15]
				FBL_TxFrame.frame.data7 = 0;
 8001f52:	4b4a      	ldr	r3, [pc, #296]	@ (800207c <FBL_DiagRoutine_DSC_Programming+0x24c>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	741a      	strb	r2, [r3, #16]
			}
			else
			{
				/* Do nothing. */
			}
			if(FBL_RxFrame.frame.data1 == 0x10 && FBL_RxFrame.frame.data2 == 0x05)
 8001f58:	4b45      	ldr	r3, [pc, #276]	@ (8002070 <FBL_DiagRoutine_DSC_Programming+0x240>)
 8001f5a:	7a9b      	ldrb	r3, [r3, #10]
 8001f5c:	2b10      	cmp	r3, #16
 8001f5e:	d13f      	bne.n	8001fe0 <FBL_DiagRoutine_DSC_Programming+0x1b0>
 8001f60:	4b43      	ldr	r3, [pc, #268]	@ (8002070 <FBL_DiagRoutine_DSC_Programming+0x240>)
 8001f62:	7adb      	ldrb	r3, [r3, #11]
 8001f64:	2b05      	cmp	r3, #5
 8001f66:	d13b      	bne.n	8001fe0 <FBL_DiagRoutine_DSC_Programming+0x1b0>
			{
				FBL_DSC_State = CALIBRATION;
 8001f68:	4b43      	ldr	r3, [pc, #268]	@ (8002078 <FBL_DiagRoutine_DSC_Programming+0x248>)
 8001f6a:	2204      	movs	r2, #4
 8001f6c:	701a      	strb	r2, [r3, #0]
				FBL_TxFrame.frame.dlc = 3;
 8001f6e:	4b43      	ldr	r3, [pc, #268]	@ (800207c <FBL_DiagRoutine_DSC_Programming+0x24c>)
 8001f70:	2203      	movs	r2, #3
 8001f72:	721a      	strb	r2, [r3, #8]
				FBL_TxFrame.frame.id =0x701;
 8001f74:	4b41      	ldr	r3, [pc, #260]	@ (800207c <FBL_DiagRoutine_DSC_Programming+0x24c>)
 8001f76:	f240 7201 	movw	r2, #1793	@ 0x701
 8001f7a:	605a      	str	r2, [r3, #4]
				FBL_TxFrame.frame.idType = 1;
 8001f7c:	4b3f      	ldr	r3, [pc, #252]	@ (800207c <FBL_DiagRoutine_DSC_Programming+0x24c>)
 8001f7e:	2201      	movs	r2, #1
 8001f80:	701a      	strb	r2, [r3, #0]
				FBL_TxFrame.frame.data0 = 0x02;
 8001f82:	4b3e      	ldr	r3, [pc, #248]	@ (800207c <FBL_DiagRoutine_DSC_Programming+0x24c>)
 8001f84:	2202      	movs	r2, #2
 8001f86:	725a      	strb	r2, [r3, #9]
				FBL_TxFrame.frame.data1 = 0x50;
 8001f88:	4b3c      	ldr	r3, [pc, #240]	@ (800207c <FBL_DiagRoutine_DSC_Programming+0x24c>)
 8001f8a:	2250      	movs	r2, #80	@ 0x50
 8001f8c:	729a      	strb	r2, [r3, #10]
				FBL_TxFrame.frame.data2 = 0x05;
 8001f8e:	4b3b      	ldr	r3, [pc, #236]	@ (800207c <FBL_DiagRoutine_DSC_Programming+0x24c>)
 8001f90:	2205      	movs	r2, #5
 8001f92:	72da      	strb	r2, [r3, #11]
				FBL_CanSpi_Transmit(&FBL_TxFrame);
 8001f94:	4839      	ldr	r0, [pc, #228]	@ (800207c <FBL_DiagRoutine_DSC_Programming+0x24c>)
 8001f96:	f7fe fd77 	bl	8000a88 <FBL_CanSpi_Transmit>
				FBL_DiagRoutine_DSC_Calibration();
 8001f9a:	f7ff fde1 	bl	8001b60 <FBL_DiagRoutine_DSC_Calibration>
				FBL_TxFrame.frame.dlc = 0;
 8001f9e:	4b37      	ldr	r3, [pc, #220]	@ (800207c <FBL_DiagRoutine_DSC_Programming+0x24c>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	721a      	strb	r2, [r3, #8]
				FBL_TxFrame.frame.id = 0;
 8001fa4:	4b35      	ldr	r3, [pc, #212]	@ (800207c <FBL_DiagRoutine_DSC_Programming+0x24c>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	605a      	str	r2, [r3, #4]
				FBL_TxFrame.frame.idType = 0;
 8001faa:	4b34      	ldr	r3, [pc, #208]	@ (800207c <FBL_DiagRoutine_DSC_Programming+0x24c>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	701a      	strb	r2, [r3, #0]
				FBL_TxFrame.frame.data0 = 0;
 8001fb0:	4b32      	ldr	r3, [pc, #200]	@ (800207c <FBL_DiagRoutine_DSC_Programming+0x24c>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	725a      	strb	r2, [r3, #9]
				FBL_TxFrame.frame.data1 = 0;
 8001fb6:	4b31      	ldr	r3, [pc, #196]	@ (800207c <FBL_DiagRoutine_DSC_Programming+0x24c>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	729a      	strb	r2, [r3, #10]
				FBL_TxFrame.frame.data2 = 0;
 8001fbc:	4b2f      	ldr	r3, [pc, #188]	@ (800207c <FBL_DiagRoutine_DSC_Programming+0x24c>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	72da      	strb	r2, [r3, #11]
				FBL_TxFrame.frame.data3 = 0;
 8001fc2:	4b2e      	ldr	r3, [pc, #184]	@ (800207c <FBL_DiagRoutine_DSC_Programming+0x24c>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	731a      	strb	r2, [r3, #12]
				FBL_TxFrame.frame.data4 = 0;
 8001fc8:	4b2c      	ldr	r3, [pc, #176]	@ (800207c <FBL_DiagRoutine_DSC_Programming+0x24c>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	735a      	strb	r2, [r3, #13]
				FBL_TxFrame.frame.data5 = 0;
 8001fce:	4b2b      	ldr	r3, [pc, #172]	@ (800207c <FBL_DiagRoutine_DSC_Programming+0x24c>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	739a      	strb	r2, [r3, #14]
				FBL_TxFrame.frame.data6 = 0;
 8001fd4:	4b29      	ldr	r3, [pc, #164]	@ (800207c <FBL_DiagRoutine_DSC_Programming+0x24c>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	73da      	strb	r2, [r3, #15]
				FBL_TxFrame.frame.data7 = 0;
 8001fda:	4b28      	ldr	r3, [pc, #160]	@ (800207c <FBL_DiagRoutine_DSC_Programming+0x24c>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	741a      	strb	r2, [r3, #16]
			}
			else
			{
				/* Do nothing. */
			}
			if(FBL_RxFrame.frame.data1 == 0x11 && FBL_RxFrame.frame.data2 == 0x01 && FBL_RxFrame.frame.data0 == 0x02)
 8001fe0:	4b23      	ldr	r3, [pc, #140]	@ (8002070 <FBL_DiagRoutine_DSC_Programming+0x240>)
 8001fe2:	7a9b      	ldrb	r3, [r3, #10]
 8001fe4:	2b11      	cmp	r3, #17
 8001fe6:	d11f      	bne.n	8002028 <FBL_DiagRoutine_DSC_Programming+0x1f8>
 8001fe8:	4b21      	ldr	r3, [pc, #132]	@ (8002070 <FBL_DiagRoutine_DSC_Programming+0x240>)
 8001fea:	7adb      	ldrb	r3, [r3, #11]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d11b      	bne.n	8002028 <FBL_DiagRoutine_DSC_Programming+0x1f8>
 8001ff0:	4b1f      	ldr	r3, [pc, #124]	@ (8002070 <FBL_DiagRoutine_DSC_Programming+0x240>)
 8001ff2:	7a5b      	ldrb	r3, [r3, #9]
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d117      	bne.n	8002028 <FBL_DiagRoutine_DSC_Programming+0x1f8>
			{
				FBL_TxFrame.frame.dlc = 3;
 8001ff8:	4b20      	ldr	r3, [pc, #128]	@ (800207c <FBL_DiagRoutine_DSC_Programming+0x24c>)
 8001ffa:	2203      	movs	r2, #3
 8001ffc:	721a      	strb	r2, [r3, #8]
				FBL_TxFrame.frame.id = 0x701;
 8001ffe:	4b1f      	ldr	r3, [pc, #124]	@ (800207c <FBL_DiagRoutine_DSC_Programming+0x24c>)
 8002000:	f240 7201 	movw	r2, #1793	@ 0x701
 8002004:	605a      	str	r2, [r3, #4]
				FBL_TxFrame.frame.idType = 1;
 8002006:	4b1d      	ldr	r3, [pc, #116]	@ (800207c <FBL_DiagRoutine_DSC_Programming+0x24c>)
 8002008:	2201      	movs	r2, #1
 800200a:	701a      	strb	r2, [r3, #0]
				FBL_TxFrame.frame.data0 = 0x02;
 800200c:	4b1b      	ldr	r3, [pc, #108]	@ (800207c <FBL_DiagRoutine_DSC_Programming+0x24c>)
 800200e:	2202      	movs	r2, #2
 8002010:	725a      	strb	r2, [r3, #9]
				FBL_TxFrame.frame.data1 = 0x51;
 8002012:	4b1a      	ldr	r3, [pc, #104]	@ (800207c <FBL_DiagRoutine_DSC_Programming+0x24c>)
 8002014:	2251      	movs	r2, #81	@ 0x51
 8002016:	729a      	strb	r2, [r3, #10]
				FBL_TxFrame.frame.data2 = 0x01;
 8002018:	4b18      	ldr	r3, [pc, #96]	@ (800207c <FBL_DiagRoutine_DSC_Programming+0x24c>)
 800201a:	2201      	movs	r2, #1
 800201c:	72da      	strb	r2, [r3, #11]
				FBL_CanSpi_Transmit(&FBL_TxFrame);
 800201e:	4817      	ldr	r0, [pc, #92]	@ (800207c <FBL_DiagRoutine_DSC_Programming+0x24c>)
 8002020:	f7fe fd32 	bl	8000a88 <FBL_CanSpi_Transmit>
				FBL_DiagRoutine_ER_HardReset();
 8002024:	f7ff fc5c 	bl	80018e0 <FBL_DiagRoutine_ER_HardReset>
		}
		else
		{
			/* Do nothing. */
		}
		FBL_RxFrame.frame.dlc = 0;
 8002028:	4b11      	ldr	r3, [pc, #68]	@ (8002070 <FBL_DiagRoutine_DSC_Programming+0x240>)
 800202a:	2200      	movs	r2, #0
 800202c:	721a      	strb	r2, [r3, #8]
		FBL_RxFrame.frame.id = 0;
 800202e:	4b10      	ldr	r3, [pc, #64]	@ (8002070 <FBL_DiagRoutine_DSC_Programming+0x240>)
 8002030:	2200      	movs	r2, #0
 8002032:	605a      	str	r2, [r3, #4]
		FBL_RxFrame.frame.idType = 0;
 8002034:	4b0e      	ldr	r3, [pc, #56]	@ (8002070 <FBL_DiagRoutine_DSC_Programming+0x240>)
 8002036:	2200      	movs	r2, #0
 8002038:	701a      	strb	r2, [r3, #0]
		FBL_RxFrame.frame.data0 = 0;
 800203a:	4b0d      	ldr	r3, [pc, #52]	@ (8002070 <FBL_DiagRoutine_DSC_Programming+0x240>)
 800203c:	2200      	movs	r2, #0
 800203e:	725a      	strb	r2, [r3, #9]
		FBL_RxFrame.frame.data1 = 0;
 8002040:	4b0b      	ldr	r3, [pc, #44]	@ (8002070 <FBL_DiagRoutine_DSC_Programming+0x240>)
 8002042:	2200      	movs	r2, #0
 8002044:	729a      	strb	r2, [r3, #10]
		FBL_RxFrame.frame.data2 = 0;
 8002046:	4b0a      	ldr	r3, [pc, #40]	@ (8002070 <FBL_DiagRoutine_DSC_Programming+0x240>)
 8002048:	2200      	movs	r2, #0
 800204a:	72da      	strb	r2, [r3, #11]
		FBL_RxFrame.frame.data3 = 0;
 800204c:	4b08      	ldr	r3, [pc, #32]	@ (8002070 <FBL_DiagRoutine_DSC_Programming+0x240>)
 800204e:	2200      	movs	r2, #0
 8002050:	731a      	strb	r2, [r3, #12]
		FBL_RxFrame.frame.data4 = 0;
 8002052:	4b07      	ldr	r3, [pc, #28]	@ (8002070 <FBL_DiagRoutine_DSC_Programming+0x240>)
 8002054:	2200      	movs	r2, #0
 8002056:	735a      	strb	r2, [r3, #13]
		FBL_RxFrame.frame.data5 = 0;
 8002058:	4b05      	ldr	r3, [pc, #20]	@ (8002070 <FBL_DiagRoutine_DSC_Programming+0x240>)
 800205a:	2200      	movs	r2, #0
 800205c:	739a      	strb	r2, [r3, #14]
		FBL_RxFrame.frame.data6 = 0;
 800205e:	4b04      	ldr	r3, [pc, #16]	@ (8002070 <FBL_DiagRoutine_DSC_Programming+0x240>)
 8002060:	2200      	movs	r2, #0
 8002062:	73da      	strb	r2, [r3, #15]
		FBL_RxFrame.frame.data7 = 0;
 8002064:	4b02      	ldr	r3, [pc, #8]	@ (8002070 <FBL_DiagRoutine_DSC_Programming+0x240>)
 8002066:	2200      	movs	r2, #0
 8002068:	741a      	strb	r2, [r3, #16]
	}
}
 800206a:	bf00      	nop
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	20010038 	.word	0x20010038
 8002074:	20010068 	.word	0x20010068
 8002078:	20010004 	.word	0x20010004
 800207c:	2001004c 	.word	0x2001004c

08002080 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a04      	ldr	r2, [pc, #16]	@ (80020a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d101      	bne.n	8002096 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002092:	f000 fa89 	bl	80025a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40000c00 	.word	0x40000c00

080020a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	__NVIC_SystemReset();
 80020a8:	f7fe fab4 	bl	8000614 <__NVIC_SystemReset>

080020ac <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* USER CODE END 6 */
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
	...

080020c4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_Init 0 */
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */
  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80020c8:	4b17      	ldr	r3, [pc, #92]	@ (8002128 <MX_SPI1_Init+0x64>)
 80020ca:	4a18      	ldr	r2, [pc, #96]	@ (800212c <MX_SPI1_Init+0x68>)
 80020cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80020ce:	4b16      	ldr	r3, [pc, #88]	@ (8002128 <MX_SPI1_Init+0x64>)
 80020d0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80020d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80020d6:	4b14      	ldr	r3, [pc, #80]	@ (8002128 <MX_SPI1_Init+0x64>)
 80020d8:	2200      	movs	r2, #0
 80020da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80020dc:	4b12      	ldr	r3, [pc, #72]	@ (8002128 <MX_SPI1_Init+0x64>)
 80020de:	2200      	movs	r2, #0
 80020e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020e2:	4b11      	ldr	r3, [pc, #68]	@ (8002128 <MX_SPI1_Init+0x64>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002128 <MX_SPI1_Init+0x64>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80020ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002128 <MX_SPI1_Init+0x64>)
 80020f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80020f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002128 <MX_SPI1_Init+0x64>)
 80020f8:	2218      	movs	r2, #24
 80020fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002128 <MX_SPI1_Init+0x64>)
 80020fe:	2200      	movs	r2, #0
 8002100:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002102:	4b09      	ldr	r3, [pc, #36]	@ (8002128 <MX_SPI1_Init+0x64>)
 8002104:	2200      	movs	r2, #0
 8002106:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002108:	4b07      	ldr	r3, [pc, #28]	@ (8002128 <MX_SPI1_Init+0x64>)
 800210a:	2200      	movs	r2, #0
 800210c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800210e:	4b06      	ldr	r3, [pc, #24]	@ (8002128 <MX_SPI1_Init+0x64>)
 8002110:	220a      	movs	r2, #10
 8002112:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002114:	4804      	ldr	r0, [pc, #16]	@ (8002128 <MX_SPI1_Init+0x64>)
 8002116:	f002 f997 	bl	8004448 <HAL_SPI_Init>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002120:	f7ff ffc0 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  /* USER CODE END SPI1_Init 2 */

}
 8002124:	bf00      	nop
 8002126:	bd80      	pop	{r7, pc}
 8002128:	2001009c 	.word	0x2001009c
 800212c:	40013000 	.word	0x40013000

08002130 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b08a      	sub	sp, #40	@ 0x28
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002138:	f107 0314 	add.w	r3, r7, #20
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	605a      	str	r2, [r3, #4]
 8002142:	609a      	str	r2, [r3, #8]
 8002144:	60da      	str	r2, [r3, #12]
 8002146:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a19      	ldr	r2, [pc, #100]	@ (80021b4 <HAL_SPI_MspInit+0x84>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d12b      	bne.n	80021aa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */
  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	613b      	str	r3, [r7, #16]
 8002156:	4b18      	ldr	r3, [pc, #96]	@ (80021b8 <HAL_SPI_MspInit+0x88>)
 8002158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800215a:	4a17      	ldr	r2, [pc, #92]	@ (80021b8 <HAL_SPI_MspInit+0x88>)
 800215c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002160:	6453      	str	r3, [r2, #68]	@ 0x44
 8002162:	4b15      	ldr	r3, [pc, #84]	@ (80021b8 <HAL_SPI_MspInit+0x88>)
 8002164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002166:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800216a:	613b      	str	r3, [r7, #16]
 800216c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	60fb      	str	r3, [r7, #12]
 8002172:	4b11      	ldr	r3, [pc, #68]	@ (80021b8 <HAL_SPI_MspInit+0x88>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002176:	4a10      	ldr	r2, [pc, #64]	@ (80021b8 <HAL_SPI_MspInit+0x88>)
 8002178:	f043 0301 	orr.w	r3, r3, #1
 800217c:	6313      	str	r3, [r2, #48]	@ 0x30
 800217e:	4b0e      	ldr	r3, [pc, #56]	@ (80021b8 <HAL_SPI_MspInit+0x88>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800218a:	23e0      	movs	r3, #224	@ 0xe0
 800218c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218e:	2302      	movs	r3, #2
 8002190:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002192:	2300      	movs	r3, #0
 8002194:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002196:	2303      	movs	r3, #3
 8002198:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800219a:	2305      	movs	r3, #5
 800219c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800219e:	f107 0314 	add.w	r3, r7, #20
 80021a2:	4619      	mov	r1, r3
 80021a4:	4805      	ldr	r0, [pc, #20]	@ (80021bc <HAL_SPI_MspInit+0x8c>)
 80021a6:	f001 f84b 	bl	8003240 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */
  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80021aa:	bf00      	nop
 80021ac:	3728      	adds	r7, #40	@ 0x28
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40013000 	.word	0x40013000
 80021b8:	40023800 	.word	0x40023800
 80021bc:	40020000 	.word	0x40020000

080021c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021c6:	2300      	movs	r3, #0
 80021c8:	607b      	str	r3, [r7, #4]
 80021ca:	4b10      	ldr	r3, [pc, #64]	@ (800220c <HAL_MspInit+0x4c>)
 80021cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ce:	4a0f      	ldr	r2, [pc, #60]	@ (800220c <HAL_MspInit+0x4c>)
 80021d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80021d6:	4b0d      	ldr	r3, [pc, #52]	@ (800220c <HAL_MspInit+0x4c>)
 80021d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021de:	607b      	str	r3, [r7, #4]
 80021e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	603b      	str	r3, [r7, #0]
 80021e6:	4b09      	ldr	r3, [pc, #36]	@ (800220c <HAL_MspInit+0x4c>)
 80021e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ea:	4a08      	ldr	r2, [pc, #32]	@ (800220c <HAL_MspInit+0x4c>)
 80021ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80021f2:	4b06      	ldr	r3, [pc, #24]	@ (800220c <HAL_MspInit+0x4c>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021fa:	603b      	str	r3, [r7, #0]
 80021fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80021fe:	2007      	movs	r0, #7
 8002200:	f000 faa0 	bl	8002744 <HAL_NVIC_SetPriorityGrouping>
  /* Peripheral interrupt init */

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002204:	bf00      	nop
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40023800 	.word	0x40023800

08002210 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b08e      	sub	sp, #56	@ 0x38
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002218:	2300      	movs	r3, #0
 800221a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800221c:	2300      	movs	r3, #0
 800221e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8002220:	2300      	movs	r3, #0
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	4b33      	ldr	r3, [pc, #204]	@ (80022f4 <HAL_InitTick+0xe4>)
 8002226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002228:	4a32      	ldr	r2, [pc, #200]	@ (80022f4 <HAL_InitTick+0xe4>)
 800222a:	f043 0308 	orr.w	r3, r3, #8
 800222e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002230:	4b30      	ldr	r3, [pc, #192]	@ (80022f4 <HAL_InitTick+0xe4>)
 8002232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002234:	f003 0308 	and.w	r3, r3, #8
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800223c:	f107 0210 	add.w	r2, r7, #16
 8002240:	f107 0314 	add.w	r3, r7, #20
 8002244:	4611      	mov	r1, r2
 8002246:	4618      	mov	r0, r3
 8002248:	f002 f8cc 	bl	80043e4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800224c:	6a3b      	ldr	r3, [r7, #32]
 800224e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002252:	2b00      	cmp	r3, #0
 8002254:	d103      	bne.n	800225e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002256:	f002 f89d 	bl	8004394 <HAL_RCC_GetPCLK1Freq>
 800225a:	6378      	str	r0, [r7, #52]	@ 0x34
 800225c:	e004      	b.n	8002268 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800225e:	f002 f899 	bl	8004394 <HAL_RCC_GetPCLK1Freq>
 8002262:	4603      	mov	r3, r0
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800226a:	4a23      	ldr	r2, [pc, #140]	@ (80022f8 <HAL_InitTick+0xe8>)
 800226c:	fba2 2303 	umull	r2, r3, r2, r3
 8002270:	0c9b      	lsrs	r3, r3, #18
 8002272:	3b01      	subs	r3, #1
 8002274:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8002276:	4b21      	ldr	r3, [pc, #132]	@ (80022fc <HAL_InitTick+0xec>)
 8002278:	4a21      	ldr	r2, [pc, #132]	@ (8002300 <HAL_InitTick+0xf0>)
 800227a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 800227c:	4b1f      	ldr	r3, [pc, #124]	@ (80022fc <HAL_InitTick+0xec>)
 800227e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002282:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8002284:	4a1d      	ldr	r2, [pc, #116]	@ (80022fc <HAL_InitTick+0xec>)
 8002286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002288:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 800228a:	4b1c      	ldr	r3, [pc, #112]	@ (80022fc <HAL_InitTick+0xec>)
 800228c:	2200      	movs	r2, #0
 800228e:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002290:	4b1a      	ldr	r3, [pc, #104]	@ (80022fc <HAL_InitTick+0xec>)
 8002292:	2200      	movs	r2, #0
 8002294:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002296:	4b19      	ldr	r3, [pc, #100]	@ (80022fc <HAL_InitTick+0xec>)
 8002298:	2200      	movs	r2, #0
 800229a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 800229c:	4817      	ldr	r0, [pc, #92]	@ (80022fc <HAL_InitTick+0xec>)
 800229e:	f003 f971 	bl	8005584 <HAL_TIM_Base_Init>
 80022a2:	4603      	mov	r3, r0
 80022a4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80022a8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d11b      	bne.n	80022e8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 80022b0:	4812      	ldr	r0, [pc, #72]	@ (80022fc <HAL_InitTick+0xec>)
 80022b2:	f003 fa6b 	bl	800578c <HAL_TIM_Base_Start_IT>
 80022b6:	4603      	mov	r3, r0
 80022b8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80022bc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d111      	bne.n	80022e8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80022c4:	2032      	movs	r0, #50	@ 0x32
 80022c6:	f000 fa89 	bl	80027dc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2b0f      	cmp	r3, #15
 80022ce:	d808      	bhi.n	80022e2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 80022d0:	2200      	movs	r2, #0
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	2032      	movs	r0, #50	@ 0x32
 80022d6:	f000 fa55 	bl	8002784 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022da:	4a0a      	ldr	r2, [pc, #40]	@ (8002304 <HAL_InitTick+0xf4>)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6013      	str	r3, [r2, #0]
 80022e0:	e002      	b.n	80022e8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80022e8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3738      	adds	r7, #56	@ 0x38
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40023800 	.word	0x40023800
 80022f8:	431bde83 	.word	0x431bde83
 80022fc:	2001011c 	.word	0x2001011c
 8002300:	40000c00 	.word	0x40000c00
 8002304:	20010014 	.word	0x20010014

08002308 <__NVIC_SystemReset>:
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800230c:	f3bf 8f4f 	dsb	sy
}
 8002310:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002312:	4b06      	ldr	r3, [pc, #24]	@ (800232c <__NVIC_SystemReset+0x24>)
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800231a:	4904      	ldr	r1, [pc, #16]	@ (800232c <__NVIC_SystemReset+0x24>)
 800231c:	4b04      	ldr	r3, [pc, #16]	@ (8002330 <__NVIC_SystemReset+0x28>)
 800231e:	4313      	orrs	r3, r2
 8002320:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002322:	f3bf 8f4f 	dsb	sy
}
 8002326:	bf00      	nop
    __NOP();
 8002328:	bf00      	nop
 800232a:	e7fd      	b.n	8002328 <__NVIC_SystemReset+0x20>
 800232c:	e000ed00 	.word	0xe000ed00
 8002330:	05fa0004 	.word	0x05fa0004

08002334 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	__NVIC_SystemReset();
 8002338:	f7ff ffe6 	bl	8002308 <__NVIC_SystemReset>

0800233c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	__NVIC_SystemReset();
 8002340:	f7ff ffe2 	bl	8002308 <__NVIC_SystemReset>

08002344 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	__NVIC_SystemReset();
 8002348:	f7ff ffde 	bl	8002308 <__NVIC_SystemReset>

0800234c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	__NVIC_SystemReset();
 8002350:	f7ff ffda 	bl	8002308 <__NVIC_SystemReset>

08002354 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	__NVIC_SystemReset();
 8002358:	f7ff ffd6 	bl	8002308 <__NVIC_SystemReset>

0800235c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */
  /* USER CODE END SVCall_IRQn 1 */
}
 8002360:	bf00      	nop
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800236a:	b480      	push	{r7}
 800236c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */
  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800236e:	bf00      	nop
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */
  /* USER CODE END PendSV_IRQn 1 */
}
 800237c:	bf00      	nop
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002386:	b480      	push	{r7}
 8002388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
}
 800238a:	bf00      	nop
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8002398:	f001 fa16 	bl	80037c8 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 800239c:	bf00      	nop
 800239e:	bd80      	pop	{r7, pc}

080023a0 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 80023a4:	f000 fb2a 	bl	80029fc <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 80023a8:	bf00      	nop
 80023aa:	bd80      	pop	{r7, pc}

080023ac <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RCC_IRQn 0 */
  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */
  /* USER CODE END RCC_IRQn 1 */
}
 80023b0:	bf00      	nop
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
	...

080023bc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80023c0:	4802      	ldr	r0, [pc, #8]	@ (80023cc <SPI1_IRQHandler+0x10>)
 80023c2:	f002 fe33 	bl	800502c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80023c6:	bf00      	nop
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	2001009c 	.word	0x2001009c

080023d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80023d4:	4802      	ldr	r0, [pc, #8]	@ (80023e0 <USART1_IRQHandler+0x10>)
 80023d6:	f003 fd9d 	bl	8005f14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80023da:	bf00      	nop
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	200101d0 	.word	0x200101d0

080023e4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80023e8:	4802      	ldr	r0, [pc, #8]	@ (80023f4 <TIM5_IRQHandler+0x10>)
 80023ea:	f003 fa61 	bl	80058b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */
  /* USER CODE END TIM5_IRQn 1 */
}
 80023ee:	bf00      	nop
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	2001011c 	.word	0x2001011c

080023f8 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 80023fc:	bf00      	nop
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
	...

08002408 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800240c:	4b06      	ldr	r3, [pc, #24]	@ (8002428 <SystemInit+0x20>)
 800240e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002412:	4a05      	ldr	r2, [pc, #20]	@ (8002428 <SystemInit+0x20>)
 8002414:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002418:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800241c:	bf00      	nop
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	e000ed00 	.word	0xe000ed00

0800242c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_Init 0 */
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */
  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002430:	4b11      	ldr	r3, [pc, #68]	@ (8002478 <MX_USART1_UART_Init+0x4c>)
 8002432:	4a12      	ldr	r2, [pc, #72]	@ (800247c <MX_USART1_UART_Init+0x50>)
 8002434:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002436:	4b10      	ldr	r3, [pc, #64]	@ (8002478 <MX_USART1_UART_Init+0x4c>)
 8002438:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800243c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800243e:	4b0e      	ldr	r3, [pc, #56]	@ (8002478 <MX_USART1_UART_Init+0x4c>)
 8002440:	2200      	movs	r2, #0
 8002442:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002444:	4b0c      	ldr	r3, [pc, #48]	@ (8002478 <MX_USART1_UART_Init+0x4c>)
 8002446:	2200      	movs	r2, #0
 8002448:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800244a:	4b0b      	ldr	r3, [pc, #44]	@ (8002478 <MX_USART1_UART_Init+0x4c>)
 800244c:	2200      	movs	r2, #0
 800244e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002450:	4b09      	ldr	r3, [pc, #36]	@ (8002478 <MX_USART1_UART_Init+0x4c>)
 8002452:	220c      	movs	r2, #12
 8002454:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002456:	4b08      	ldr	r3, [pc, #32]	@ (8002478 <MX_USART1_UART_Init+0x4c>)
 8002458:	2200      	movs	r2, #0
 800245a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800245c:	4b06      	ldr	r3, [pc, #24]	@ (8002478 <MX_USART1_UART_Init+0x4c>)
 800245e:	2200      	movs	r2, #0
 8002460:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002462:	4805      	ldr	r0, [pc, #20]	@ (8002478 <MX_USART1_UART_Init+0x4c>)
 8002464:	f003 fc90 	bl	8005d88 <HAL_UART_Init>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800246e:	f7ff fe19 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */

}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	200101d0 	.word	0x200101d0
 800247c:	40011000 	.word	0x40011000

08002480 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b08a      	sub	sp, #40	@ 0x28
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002488:	f107 0314 	add.w	r3, r7, #20
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	605a      	str	r2, [r3, #4]
 8002492:	609a      	str	r2, [r3, #8]
 8002494:	60da      	str	r2, [r3, #12]
 8002496:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a19      	ldr	r2, [pc, #100]	@ (8002504 <HAL_UART_MspInit+0x84>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d12c      	bne.n	80024fc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */
  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024a2:	2300      	movs	r3, #0
 80024a4:	613b      	str	r3, [r7, #16]
 80024a6:	4b18      	ldr	r3, [pc, #96]	@ (8002508 <HAL_UART_MspInit+0x88>)
 80024a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024aa:	4a17      	ldr	r2, [pc, #92]	@ (8002508 <HAL_UART_MspInit+0x88>)
 80024ac:	f043 0310 	orr.w	r3, r3, #16
 80024b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80024b2:	4b15      	ldr	r3, [pc, #84]	@ (8002508 <HAL_UART_MspInit+0x88>)
 80024b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024b6:	f003 0310 	and.w	r3, r3, #16
 80024ba:	613b      	str	r3, [r7, #16]
 80024bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	4b11      	ldr	r3, [pc, #68]	@ (8002508 <HAL_UART_MspInit+0x88>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c6:	4a10      	ldr	r2, [pc, #64]	@ (8002508 <HAL_UART_MspInit+0x88>)
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80024ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002508 <HAL_UART_MspInit+0x88>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80024da:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80024de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e0:	2302      	movs	r3, #2
 80024e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e4:	2300      	movs	r3, #0
 80024e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e8:	2303      	movs	r3, #3
 80024ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024ec:	2307      	movs	r3, #7
 80024ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f0:	f107 0314 	add.w	r3, r7, #20
 80024f4:	4619      	mov	r1, r3
 80024f6:	4805      	ldr	r0, [pc, #20]	@ (800250c <HAL_UART_MspInit+0x8c>)
 80024f8:	f000 fea2 	bl	8003240 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */
  /* USER CODE END USART1_MspInit 1 */
  }
}
 80024fc:	bf00      	nop
 80024fe:	3728      	adds	r7, #40	@ 0x28
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40011000 	.word	0x40011000
 8002508:	40023800 	.word	0x40023800
 800250c:	40020000 	.word	0x40020000

08002510 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002510:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002548 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002514:	f7ff ff78 	bl	8002408 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002518:	480c      	ldr	r0, [pc, #48]	@ (800254c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800251a:	490d      	ldr	r1, [pc, #52]	@ (8002550 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800251c:	4a0d      	ldr	r2, [pc, #52]	@ (8002554 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800251e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002520:	e002      	b.n	8002528 <LoopCopyDataInit>

08002522 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002522:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002524:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002526:	3304      	adds	r3, #4

08002528 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002528:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800252a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800252c:	d3f9      	bcc.n	8002522 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800252e:	4a0a      	ldr	r2, [pc, #40]	@ (8002558 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002530:	4c0a      	ldr	r4, [pc, #40]	@ (800255c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002532:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002534:	e001      	b.n	800253a <LoopFillZerobss>

08002536 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002536:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002538:	3204      	adds	r2, #4

0800253a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800253a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800253c:	d3fb      	bcc.n	8002536 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800253e:	f004 fc79 	bl	8006e34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002542:	f7fe f87d 	bl	8000640 <main>
  bx  lr    
 8002546:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002548:	20011000 	.word	0x20011000
  ldr r0, =_sdata
 800254c:	20010000 	.word	0x20010000
  ldr r1, =_edata
 8002550:	2001001c 	.word	0x2001001c
  ldr r2, =_sidata
 8002554:	08007264 	.word	0x08007264
  ldr r2, =_sbss
 8002558:	2001001c 	.word	0x2001001c
  ldr r4, =_ebss
 800255c:	2001026c 	.word	0x2001026c

08002560 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002560:	e7fe      	b.n	8002560 <ADC_IRQHandler>
	...

08002564 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002568:	4b0e      	ldr	r3, [pc, #56]	@ (80025a4 <HAL_Init+0x40>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a0d      	ldr	r2, [pc, #52]	@ (80025a4 <HAL_Init+0x40>)
 800256e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002572:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002574:	4b0b      	ldr	r3, [pc, #44]	@ (80025a4 <HAL_Init+0x40>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a0a      	ldr	r2, [pc, #40]	@ (80025a4 <HAL_Init+0x40>)
 800257a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800257e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002580:	4b08      	ldr	r3, [pc, #32]	@ (80025a4 <HAL_Init+0x40>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a07      	ldr	r2, [pc, #28]	@ (80025a4 <HAL_Init+0x40>)
 8002586:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800258a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800258c:	2003      	movs	r0, #3
 800258e:	f000 f8d9 	bl	8002744 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002592:	2000      	movs	r0, #0
 8002594:	f7ff fe3c 	bl	8002210 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002598:	f7ff fe12 	bl	80021c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40023c00 	.word	0x40023c00

080025a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025ac:	4b06      	ldr	r3, [pc, #24]	@ (80025c8 <HAL_IncTick+0x20>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	461a      	mov	r2, r3
 80025b2:	4b06      	ldr	r3, [pc, #24]	@ (80025cc <HAL_IncTick+0x24>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4413      	add	r3, r2
 80025b8:	4a04      	ldr	r2, [pc, #16]	@ (80025cc <HAL_IncTick+0x24>)
 80025ba:	6013      	str	r3, [r2, #0]
}
 80025bc:	bf00      	nop
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	20010018 	.word	0x20010018
 80025cc:	20010248 	.word	0x20010248

080025d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  return uwTick;
 80025d4:	4b03      	ldr	r3, [pc, #12]	@ (80025e4 <HAL_GetTick+0x14>)
 80025d6:	681b      	ldr	r3, [r3, #0]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	20010248 	.word	0x20010248

080025e8 <__NVIC_SetPriorityGrouping>:
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f003 0307 	and.w	r3, r3, #7
 80025f6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025f8:	4b0c      	ldr	r3, [pc, #48]	@ (800262c <__NVIC_SetPriorityGrouping+0x44>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025fe:	68ba      	ldr	r2, [r7, #8]
 8002600:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002604:	4013      	ands	r3, r2
 8002606:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002610:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002614:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002618:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800261a:	4a04      	ldr	r2, [pc, #16]	@ (800262c <__NVIC_SetPriorityGrouping+0x44>)
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	60d3      	str	r3, [r2, #12]
}
 8002620:	bf00      	nop
 8002622:	3714      	adds	r7, #20
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr
 800262c:	e000ed00 	.word	0xe000ed00

08002630 <__NVIC_GetPriorityGrouping>:
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002634:	4b04      	ldr	r3, [pc, #16]	@ (8002648 <__NVIC_GetPriorityGrouping+0x18>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	0a1b      	lsrs	r3, r3, #8
 800263a:	f003 0307 	and.w	r3, r3, #7
}
 800263e:	4618      	mov	r0, r3
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr
 8002648:	e000ed00 	.word	0xe000ed00

0800264c <__NVIC_EnableIRQ>:
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	4603      	mov	r3, r0
 8002654:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265a:	2b00      	cmp	r3, #0
 800265c:	db0b      	blt.n	8002676 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800265e:	79fb      	ldrb	r3, [r7, #7]
 8002660:	f003 021f 	and.w	r2, r3, #31
 8002664:	4907      	ldr	r1, [pc, #28]	@ (8002684 <__NVIC_EnableIRQ+0x38>)
 8002666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266a:	095b      	lsrs	r3, r3, #5
 800266c:	2001      	movs	r0, #1
 800266e:	fa00 f202 	lsl.w	r2, r0, r2
 8002672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	e000e100 	.word	0xe000e100

08002688 <__NVIC_SetPriority>:
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	4603      	mov	r3, r0
 8002690:	6039      	str	r1, [r7, #0]
 8002692:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002698:	2b00      	cmp	r3, #0
 800269a:	db0a      	blt.n	80026b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	b2da      	uxtb	r2, r3
 80026a0:	490c      	ldr	r1, [pc, #48]	@ (80026d4 <__NVIC_SetPriority+0x4c>)
 80026a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a6:	0112      	lsls	r2, r2, #4
 80026a8:	b2d2      	uxtb	r2, r2
 80026aa:	440b      	add	r3, r1
 80026ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80026b0:	e00a      	b.n	80026c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	b2da      	uxtb	r2, r3
 80026b6:	4908      	ldr	r1, [pc, #32]	@ (80026d8 <__NVIC_SetPriority+0x50>)
 80026b8:	79fb      	ldrb	r3, [r7, #7]
 80026ba:	f003 030f 	and.w	r3, r3, #15
 80026be:	3b04      	subs	r3, #4
 80026c0:	0112      	lsls	r2, r2, #4
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	440b      	add	r3, r1
 80026c6:	761a      	strb	r2, [r3, #24]
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	e000e100 	.word	0xe000e100
 80026d8:	e000ed00 	.word	0xe000ed00

080026dc <NVIC_EncodePriority>:
{
 80026dc:	b480      	push	{r7}
 80026de:	b089      	sub	sp, #36	@ 0x24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	f1c3 0307 	rsb	r3, r3, #7
 80026f6:	2b04      	cmp	r3, #4
 80026f8:	bf28      	it	cs
 80026fa:	2304      	movcs	r3, #4
 80026fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	3304      	adds	r3, #4
 8002702:	2b06      	cmp	r3, #6
 8002704:	d902      	bls.n	800270c <NVIC_EncodePriority+0x30>
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	3b03      	subs	r3, #3
 800270a:	e000      	b.n	800270e <NVIC_EncodePriority+0x32>
 800270c:	2300      	movs	r3, #0
 800270e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002710:	f04f 32ff 	mov.w	r2, #4294967295
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	43da      	mvns	r2, r3
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	401a      	ands	r2, r3
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002724:	f04f 31ff 	mov.w	r1, #4294967295
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	fa01 f303 	lsl.w	r3, r1, r3
 800272e:	43d9      	mvns	r1, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002734:	4313      	orrs	r3, r2
}
 8002736:	4618      	mov	r0, r3
 8002738:	3724      	adds	r7, #36	@ 0x24
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
	...

08002744 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b07      	cmp	r3, #7
 8002750:	d00f      	beq.n	8002772 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2b06      	cmp	r3, #6
 8002756:	d00c      	beq.n	8002772 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2b05      	cmp	r3, #5
 800275c:	d009      	beq.n	8002772 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2b04      	cmp	r3, #4
 8002762:	d006      	beq.n	8002772 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2b03      	cmp	r3, #3
 8002768:	d003      	beq.n	8002772 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800276a:	2190      	movs	r1, #144	@ 0x90
 800276c:	4804      	ldr	r0, [pc, #16]	@ (8002780 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800276e:	f7ff fc9d 	bl	80020ac <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7ff ff38 	bl	80025e8 <__NVIC_SetPriorityGrouping>
}
 8002778:	bf00      	nop
 800277a:	3708      	adds	r7, #8
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	08006e94 	.word	0x08006e94

08002784 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	4603      	mov	r3, r0
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
 8002790:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002792:	2300      	movs	r3, #0
 8002794:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b0f      	cmp	r3, #15
 800279a:	d903      	bls.n	80027a4 <HAL_NVIC_SetPriority+0x20>
 800279c:	21a8      	movs	r1, #168	@ 0xa8
 800279e:	480e      	ldr	r0, [pc, #56]	@ (80027d8 <HAL_NVIC_SetPriority+0x54>)
 80027a0:	f7ff fc84 	bl	80020ac <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	2b0f      	cmp	r3, #15
 80027a8:	d903      	bls.n	80027b2 <HAL_NVIC_SetPriority+0x2e>
 80027aa:	21a9      	movs	r1, #169	@ 0xa9
 80027ac:	480a      	ldr	r0, [pc, #40]	@ (80027d8 <HAL_NVIC_SetPriority+0x54>)
 80027ae:	f7ff fc7d 	bl	80020ac <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027b2:	f7ff ff3d 	bl	8002630 <__NVIC_GetPriorityGrouping>
 80027b6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	68b9      	ldr	r1, [r7, #8]
 80027bc:	6978      	ldr	r0, [r7, #20]
 80027be:	f7ff ff8d 	bl	80026dc <NVIC_EncodePriority>
 80027c2:	4602      	mov	r2, r0
 80027c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027c8:	4611      	mov	r1, r2
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff ff5c 	bl	8002688 <__NVIC_SetPriority>
}
 80027d0:	bf00      	nop
 80027d2:	3718      	adds	r7, #24
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	08006e94 	.word	0x08006e94

080027dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	4603      	mov	r3, r0
 80027e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80027e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	da03      	bge.n	80027f6 <HAL_NVIC_EnableIRQ+0x1a>
 80027ee:	21bc      	movs	r1, #188	@ 0xbc
 80027f0:	4805      	ldr	r0, [pc, #20]	@ (8002808 <HAL_NVIC_EnableIRQ+0x2c>)
 80027f2:	f7ff fc5b 	bl	80020ac <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7ff ff26 	bl	800264c <__NVIC_EnableIRQ>
}
 8002800:	bf00      	nop
 8002802:	3708      	adds	r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	08006e94 	.word	0x08006e94

0800280c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002818:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800281a:	f7ff fed9 	bl	80025d0 <HAL_GetTick>
 800281e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d008      	beq.n	800283e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2280      	movs	r2, #128	@ 0x80
 8002830:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e052      	b.n	80028e4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f022 0216 	bic.w	r2, r2, #22
 800284c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	695a      	ldr	r2, [r3, #20]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800285c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002862:	2b00      	cmp	r3, #0
 8002864:	d103      	bne.n	800286e <HAL_DMA_Abort+0x62>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800286a:	2b00      	cmp	r3, #0
 800286c:	d007      	beq.n	800287e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f022 0208 	bic.w	r2, r2, #8
 800287c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0201 	bic.w	r2, r2, #1
 800288c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800288e:	e013      	b.n	80028b8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002890:	f7ff fe9e 	bl	80025d0 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b05      	cmp	r3, #5
 800289c:	d90c      	bls.n	80028b8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2220      	movs	r2, #32
 80028a2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2203      	movs	r2, #3
 80028a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e015      	b.n	80028e4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1e4      	bne.n	8002890 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ca:	223f      	movs	r2, #63	@ 0x3f
 80028cc:	409a      	lsls	r2, r3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d004      	beq.n	800290a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2280      	movs	r2, #128	@ 0x80
 8002904:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e00c      	b.n	8002924 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2205      	movs	r2, #5
 800290e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f022 0201 	bic.w	r2, r2, #1
 8002920:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002942:	4b2b      	ldr	r3, [pc, #172]	@ (80029f0 <HAL_FLASH_Program+0xc0>)
 8002944:	7e1b      	ldrb	r3, [r3, #24]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d101      	bne.n	800294e <HAL_FLASH_Program+0x1e>
 800294a:	2302      	movs	r3, #2
 800294c:	e04b      	b.n	80029e6 <HAL_FLASH_Program+0xb6>
 800294e:	4b28      	ldr	r3, [pc, #160]	@ (80029f0 <HAL_FLASH_Program+0xc0>)
 8002950:	2201      	movs	r2, #1
 8002952:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00c      	beq.n	8002974 <HAL_FLASH_Program+0x44>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d009      	beq.n	8002974 <HAL_FLASH_Program+0x44>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2b02      	cmp	r3, #2
 8002964:	d006      	beq.n	8002974 <HAL_FLASH_Program+0x44>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2b03      	cmp	r3, #3
 800296a:	d003      	beq.n	8002974 <HAL_FLASH_Program+0x44>
 800296c:	21a2      	movs	r1, #162	@ 0xa2
 800296e:	4821      	ldr	r0, [pc, #132]	@ (80029f4 <HAL_FLASH_Program+0xc4>)
 8002970:	f7ff fb9c 	bl	80020ac <assert_failed>

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002974:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002978:	f000 f92e 	bl	8002bd8 <FLASH_WaitForLastOperation>
 800297c:	4603      	mov	r3, r0
 800297e:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8002980:	7dfb      	ldrb	r3, [r7, #23]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d12b      	bne.n	80029de <HAL_FLASH_Program+0xae>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d105      	bne.n	8002998 <HAL_FLASH_Program+0x68>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800298c:	783b      	ldrb	r3, [r7, #0]
 800298e:	4619      	mov	r1, r3
 8002990:	68b8      	ldr	r0, [r7, #8]
 8002992:	f000 fa2b 	bl	8002dec <FLASH_Program_Byte>
 8002996:	e016      	b.n	80029c6 <HAL_FLASH_Program+0x96>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d105      	bne.n	80029aa <HAL_FLASH_Program+0x7a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800299e:	883b      	ldrh	r3, [r7, #0]
 80029a0:	4619      	mov	r1, r3
 80029a2:	68b8      	ldr	r0, [r7, #8]
 80029a4:	f000 f9e4 	bl	8002d70 <FLASH_Program_HalfWord>
 80029a8:	e00d      	b.n	80029c6 <HAL_FLASH_Program+0x96>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d105      	bne.n	80029bc <HAL_FLASH_Program+0x8c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	4619      	mov	r1, r3
 80029b4:	68b8      	ldr	r0, [r7, #8]
 80029b6:	f000 f99d 	bl	8002cf4 <FLASH_Program_Word>
 80029ba:	e004      	b.n	80029c6 <HAL_FLASH_Program+0x96>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80029bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80029c0:	68b8      	ldr	r0, [r7, #8]
 80029c2:	f000 f949 	bl	8002c58 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80029c6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80029ca:	f000 f905 	bl	8002bd8 <FLASH_WaitForLastOperation>
 80029ce:	4603      	mov	r3, r0
 80029d0:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80029d2:	4b09      	ldr	r3, [pc, #36]	@ (80029f8 <HAL_FLASH_Program+0xc8>)
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	4a08      	ldr	r2, [pc, #32]	@ (80029f8 <HAL_FLASH_Program+0xc8>)
 80029d8:	f023 0301 	bic.w	r3, r3, #1
 80029dc:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80029de:	4b04      	ldr	r3, [pc, #16]	@ (80029f0 <HAL_FLASH_Program+0xc0>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	761a      	strb	r2, [r3, #24]

  return status;
 80029e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3718      	adds	r7, #24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	2001024c 	.word	0x2001024c
 80029f4:	08006f0c 	.word	0x08006f0c
 80029f8:	40023c00 	.word	0x40023c00

080029fc <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	607b      	str	r3, [r7, #4]

  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002a06:	4b49      	ldr	r3, [pc, #292]	@ (8002b2c <HAL_FLASH_IRQHandler+0x130>)
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d020      	beq.n	8002a54 <HAL_FLASH_IRQHandler+0x58>
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if (pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8002a12:	4b47      	ldr	r3, [pc, #284]	@ (8002b30 <HAL_FLASH_IRQHandler+0x134>)
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d107      	bne.n	8002a2c <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 8002a1c:	4b44      	ldr	r3, [pc, #272]	@ (8002b30 <HAL_FLASH_IRQHandler+0x134>)
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 8002a22:	4b43      	ldr	r3, [pc, #268]	@ (8002b30 <HAL_FLASH_IRQHandler+0x134>)
 8002a24:	f04f 32ff 	mov.w	r2, #4294967295
 8002a28:	60da      	str	r2, [r3, #12]
 8002a2a:	e00b      	b.n	8002a44 <HAL_FLASH_IRQHandler+0x48>
    }
    else if (pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8002a2c:	4b40      	ldr	r3, [pc, #256]	@ (8002b30 <HAL_FLASH_IRQHandler+0x134>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d103      	bne.n	8002a3e <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 8002a36:	4b3e      	ldr	r3, [pc, #248]	@ (8002b30 <HAL_FLASH_IRQHandler+0x134>)
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	607b      	str	r3, [r7, #4]
 8002a3c:	e002      	b.n	8002a44 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 8002a3e:	4b3c      	ldr	r3, [pc, #240]	@ (8002b30 <HAL_FLASH_IRQHandler+0x134>)
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	607b      	str	r3, [r7, #4]
    }

    /*Save the Error code*/
    FLASH_SetErrorCode();
 8002a44:	f000 fa0e 	bl	8002e64 <FLASH_SetErrorCode>

    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f000 f87d 	bl	8002b48 <HAL_FLASH_OperationErrorCallback>

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002a4e:	4b38      	ldr	r3, [pc, #224]	@ (8002b30 <HAL_FLASH_IRQHandler+0x134>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	701a      	strb	r2, [r3, #0]
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002a54:	4b35      	ldr	r3, [pc, #212]	@ (8002b2c <HAL_FLASH_IRQHandler+0x130>)
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d04a      	beq.n	8002af6 <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002a60:	4b32      	ldr	r3, [pc, #200]	@ (8002b2c <HAL_FLASH_IRQHandler+0x130>)
 8002a62:	2201      	movs	r2, #1
 8002a64:	60da      	str	r2, [r3, #12]

    if (pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8002a66:	4b32      	ldr	r3, [pc, #200]	@ (8002b30 <HAL_FLASH_IRQHandler+0x134>)
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d12d      	bne.n	8002acc <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 8002a70:	4b2f      	ldr	r3, [pc, #188]	@ (8002b30 <HAL_FLASH_IRQHandler+0x134>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	3b01      	subs	r3, #1
 8002a76:	4a2e      	ldr	r2, [pc, #184]	@ (8002b30 <HAL_FLASH_IRQHandler+0x134>)
 8002a78:	6053      	str	r3, [r2, #4]

      /* Check if there are still sectors to erase*/
      if (pFlash.NbSectorsToErase != 0U)
 8002a7a:	4b2d      	ldr	r3, [pc, #180]	@ (8002b30 <HAL_FLASH_IRQHandler+0x134>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d015      	beq.n	8002aae <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 8002a82:	4b2b      	ldr	r3, [pc, #172]	@ (8002b30 <HAL_FLASH_IRQHandler+0x134>)
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 f853 	bl	8002b34 <HAL_FLASH_EndOfOperationCallback>

        /*Increment sector number*/
        pFlash.Sector++;
 8002a8e:	4b28      	ldr	r3, [pc, #160]	@ (8002b30 <HAL_FLASH_IRQHandler+0x134>)
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	3301      	adds	r3, #1
 8002a94:	4a26      	ldr	r2, [pc, #152]	@ (8002b30 <HAL_FLASH_IRQHandler+0x134>)
 8002a96:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 8002a98:	4b25      	ldr	r3, [pc, #148]	@ (8002b30 <HAL_FLASH_IRQHandler+0x134>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8002a9e:	4b24      	ldr	r3, [pc, #144]	@ (8002b30 <HAL_FLASH_IRQHandler+0x134>)
 8002aa0:	7a1b      	ldrb	r3, [r3, #8]
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 fb0e 	bl	80030c8 <FLASH_Erase_Sector>
 8002aac:	e023      	b.n	8002af6 <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8002aae:	f04f 33ff 	mov.w	r3, #4294967295
 8002ab2:	607b      	str	r3, [r7, #4]
 8002ab4:	4a1e      	ldr	r2, [pc, #120]	@ (8002b30 <HAL_FLASH_IRQHandler+0x134>)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002aba:	4b1d      	ldr	r3, [pc, #116]	@ (8002b30 <HAL_FLASH_IRQHandler+0x134>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	701a      	strb	r2, [r3, #0]

        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches();
 8002ac0:	f000 fb78 	bl	80031b4 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 f835 	bl	8002b34 <HAL_FLASH_EndOfOperationCallback>
 8002aca:	e014      	b.n	8002af6 <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else
    {
      if (pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8002acc:	4b18      	ldr	r3, [pc, #96]	@ (8002b30 <HAL_FLASH_IRQHandler+0x134>)
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d107      	bne.n	8002ae6 <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches();
 8002ad6:	f000 fb6d 	bl	80031b4 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8002ada:	4b15      	ldr	r3, [pc, #84]	@ (8002b30 <HAL_FLASH_IRQHandler+0x134>)
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f000 f828 	bl	8002b34 <HAL_FLASH_EndOfOperationCallback>
 8002ae4:	e004      	b.n	8002af0 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8002ae6:	4b12      	ldr	r3, [pc, #72]	@ (8002b30 <HAL_FLASH_IRQHandler+0x134>)
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f000 f822 	bl	8002b34 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002af0:	4b0f      	ldr	r3, [pc, #60]	@ (8002b30 <HAL_FLASH_IRQHandler+0x134>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	701a      	strb	r2, [r3, #0]
    }
  }

  if (pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8002af6:	4b0e      	ldr	r3, [pc, #56]	@ (8002b30 <HAL_FLASH_IRQHandler+0x134>)
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d111      	bne.n	8002b24 <HAL_FLASH_IRQHandler+0x128>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8002b00:	4b0a      	ldr	r3, [pc, #40]	@ (8002b2c <HAL_FLASH_IRQHandler+0x130>)
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	4a09      	ldr	r2, [pc, #36]	@ (8002b2c <HAL_FLASH_IRQHandler+0x130>)
 8002b06:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002b0a:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8002b0c:	4b07      	ldr	r3, [pc, #28]	@ (8002b2c <HAL_FLASH_IRQHandler+0x130>)
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	4a06      	ldr	r2, [pc, #24]	@ (8002b2c <HAL_FLASH_IRQHandler+0x130>)
 8002b12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b16:	6113      	str	r3, [r2, #16]

    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8002b18:	4b04      	ldr	r3, [pc, #16]	@ (8002b2c <HAL_FLASH_IRQHandler+0x130>)
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	4a03      	ldr	r2, [pc, #12]	@ (8002b2c <HAL_FLASH_IRQHandler+0x130>)
 8002b1e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8002b22:	6113      	str	r3, [r2, #16]
  }
}
 8002b24:	bf00      	nop
 8002b26:	3708      	adds	r7, #8
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	40023c00 	.word	0x40023c00
 8002b30:	2001024c 	.word	0x2001024c

08002b34 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002b62:	2300      	movs	r3, #0
 8002b64:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002b66:	4b0b      	ldr	r3, [pc, #44]	@ (8002b94 <HAL_FLASH_Unlock+0x38>)
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	da0b      	bge.n	8002b86 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002b6e:	4b09      	ldr	r3, [pc, #36]	@ (8002b94 <HAL_FLASH_Unlock+0x38>)
 8002b70:	4a09      	ldr	r2, [pc, #36]	@ (8002b98 <HAL_FLASH_Unlock+0x3c>)
 8002b72:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002b74:	4b07      	ldr	r3, [pc, #28]	@ (8002b94 <HAL_FLASH_Unlock+0x38>)
 8002b76:	4a09      	ldr	r2, [pc, #36]	@ (8002b9c <HAL_FLASH_Unlock+0x40>)
 8002b78:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002b7a:	4b06      	ldr	r3, [pc, #24]	@ (8002b94 <HAL_FLASH_Unlock+0x38>)
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	da01      	bge.n	8002b86 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002b86:	79fb      	ldrb	r3, [r7, #7]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr
 8002b94:	40023c00 	.word	0x40023c00
 8002b98:	45670123 	.word	0x45670123
 8002b9c:	cdef89ab 	.word	0xcdef89ab

08002ba0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002ba4:	4b05      	ldr	r3, [pc, #20]	@ (8002bbc <HAL_FLASH_Lock+0x1c>)
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	4a04      	ldr	r2, [pc, #16]	@ (8002bbc <HAL_FLASH_Lock+0x1c>)
 8002baa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002bae:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	40023c00 	.word	0x40023c00

08002bc0 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag
  */
uint32_t HAL_FLASH_GetError(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  return pFlash.ErrorCode;
 8002bc4:	4b03      	ldr	r3, [pc, #12]	@ (8002bd4 <HAL_FLASH_GetError+0x14>)
 8002bc6:	69db      	ldr	r3, [r3, #28]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	2001024c 	.word	0x2001024c

08002bd8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002be0:	2300      	movs	r3, #0
 8002be2:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002be4:	4b1a      	ldr	r3, [pc, #104]	@ (8002c50 <FLASH_WaitForLastOperation+0x78>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002bea:	f7ff fcf1 	bl	80025d0 <HAL_GetTick>
 8002bee:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8002bf0:	e010      	b.n	8002c14 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf8:	d00c      	beq.n	8002c14 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d007      	beq.n	8002c10 <FLASH_WaitForLastOperation+0x38>
 8002c00:	f7ff fce6 	bl	80025d0 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d201      	bcs.n	8002c14 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e019      	b.n	8002c48 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8002c14:	4b0f      	ldr	r3, [pc, #60]	@ (8002c54 <FLASH_WaitForLastOperation+0x7c>)
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1e8      	bne.n	8002bf2 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002c20:	4b0c      	ldr	r3, [pc, #48]	@ (8002c54 <FLASH_WaitForLastOperation+0x7c>)
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d002      	beq.n	8002c32 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002c2c:	4b09      	ldr	r3, [pc, #36]	@ (8002c54 <FLASH_WaitForLastOperation+0x7c>)
 8002c2e:	2201      	movs	r2, #1
 8002c30:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002c32:	4b08      	ldr	r3, [pc, #32]	@ (8002c54 <FLASH_WaitForLastOperation+0x7c>)
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d003      	beq.n	8002c46 <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002c3e:	f000 f911 	bl	8002e64 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e000      	b.n	8002c48 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8002c46:	2300      	movs	r3, #0

}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	2001024c 	.word	0x2001024c
 8002c54:	40023c00 	.word	0x40023c00

08002c58 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c6a:	d303      	bcc.n	8002c74 <FLASH_Program_DoubleWord+0x1c>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	4a1c      	ldr	r2, [pc, #112]	@ (8002ce0 <FLASH_Program_DoubleWord+0x88>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d90c      	bls.n	8002c8e <FLASH_Program_DoubleWord+0x36>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	4a1b      	ldr	r2, [pc, #108]	@ (8002ce4 <FLASH_Program_DoubleWord+0x8c>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d903      	bls.n	8002c84 <FLASH_Program_DoubleWord+0x2c>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	4a1a      	ldr	r2, [pc, #104]	@ (8002ce8 <FLASH_Program_DoubleWord+0x90>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d904      	bls.n	8002c8e <FLASH_Program_DoubleWord+0x36>
 8002c84:	f240 215f 	movw	r1, #607	@ 0x25f
 8002c88:	4818      	ldr	r0, [pc, #96]	@ (8002cec <FLASH_Program_DoubleWord+0x94>)
 8002c8a:	f7ff fa0f 	bl	80020ac <assert_failed>

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002c8e:	4b18      	ldr	r3, [pc, #96]	@ (8002cf0 <FLASH_Program_DoubleWord+0x98>)
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	4a17      	ldr	r2, [pc, #92]	@ (8002cf0 <FLASH_Program_DoubleWord+0x98>)
 8002c94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c98:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002c9a:	4b15      	ldr	r3, [pc, #84]	@ (8002cf0 <FLASH_Program_DoubleWord+0x98>)
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	4a14      	ldr	r2, [pc, #80]	@ (8002cf0 <FLASH_Program_DoubleWord+0x98>)
 8002ca0:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002ca4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002ca6:	4b12      	ldr	r3, [pc, #72]	@ (8002cf0 <FLASH_Program_DoubleWord+0x98>)
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	4a11      	ldr	r2, [pc, #68]	@ (8002cf0 <FLASH_Program_DoubleWord+0x98>)
 8002cac:	f043 0301 	orr.w	r3, r3, #1
 8002cb0:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8002cb8:	f3bf 8f6f 	isb	sy
}
 8002cbc:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8002cbe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002cc2:	f04f 0200 	mov.w	r2, #0
 8002cc6:	f04f 0300 	mov.w	r3, #0
 8002cca:	000a      	movs	r2, r1
 8002ccc:	2300      	movs	r3, #0
 8002cce:	68f9      	ldr	r1, [r7, #12]
 8002cd0:	3104      	adds	r1, #4
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	600b      	str	r3, [r1, #0]
}
 8002cd6:	bf00      	nop
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	0807ffff 	.word	0x0807ffff
 8002ce4:	1fff77ff 	.word	0x1fff77ff
 8002ce8:	1fff7a0f 	.word	0x1fff7a0f
 8002cec:	08006f0c 	.word	0x08006f0c
 8002cf0:	40023c00 	.word	0x40023c00

08002cf4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d04:	d303      	bcc.n	8002d0e <FLASH_Program_Word+0x1a>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a14      	ldr	r2, [pc, #80]	@ (8002d5c <FLASH_Program_Word+0x68>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d90c      	bls.n	8002d28 <FLASH_Program_Word+0x34>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a13      	ldr	r2, [pc, #76]	@ (8002d60 <FLASH_Program_Word+0x6c>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d903      	bls.n	8002d1e <FLASH_Program_Word+0x2a>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a12      	ldr	r2, [pc, #72]	@ (8002d64 <FLASH_Program_Word+0x70>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d904      	bls.n	8002d28 <FLASH_Program_Word+0x34>
 8002d1e:	f240 2181 	movw	r1, #641	@ 0x281
 8002d22:	4811      	ldr	r0, [pc, #68]	@ (8002d68 <FLASH_Program_Word+0x74>)
 8002d24:	f7ff f9c2 	bl	80020ac <assert_failed>

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002d28:	4b10      	ldr	r3, [pc, #64]	@ (8002d6c <FLASH_Program_Word+0x78>)
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	4a0f      	ldr	r2, [pc, #60]	@ (8002d6c <FLASH_Program_Word+0x78>)
 8002d2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d32:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002d34:	4b0d      	ldr	r3, [pc, #52]	@ (8002d6c <FLASH_Program_Word+0x78>)
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	4a0c      	ldr	r2, [pc, #48]	@ (8002d6c <FLASH_Program_Word+0x78>)
 8002d3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d3e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002d40:	4b0a      	ldr	r3, [pc, #40]	@ (8002d6c <FLASH_Program_Word+0x78>)
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	4a09      	ldr	r2, [pc, #36]	@ (8002d6c <FLASH_Program_Word+0x78>)
 8002d46:	f043 0301 	orr.w	r3, r3, #1
 8002d4a:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	683a      	ldr	r2, [r7, #0]
 8002d50:	601a      	str	r2, [r3, #0]
}
 8002d52:	bf00      	nop
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	0807ffff 	.word	0x0807ffff
 8002d60:	1fff77ff 	.word	0x1fff77ff
 8002d64:	1fff7a0f 	.word	0x1fff7a0f
 8002d68:	08006f0c 	.word	0x08006f0c
 8002d6c:	40023c00 	.word	0x40023c00

08002d70 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	460b      	mov	r3, r1
 8002d7a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d82:	d303      	bcc.n	8002d8c <FLASH_Program_HalfWord+0x1c>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a14      	ldr	r2, [pc, #80]	@ (8002dd8 <FLASH_Program_HalfWord+0x68>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d90c      	bls.n	8002da6 <FLASH_Program_HalfWord+0x36>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a13      	ldr	r2, [pc, #76]	@ (8002ddc <FLASH_Program_HalfWord+0x6c>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d903      	bls.n	8002d9c <FLASH_Program_HalfWord+0x2c>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a12      	ldr	r2, [pc, #72]	@ (8002de0 <FLASH_Program_HalfWord+0x70>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d904      	bls.n	8002da6 <FLASH_Program_HalfWord+0x36>
 8002d9c:	f240 219a 	movw	r1, #666	@ 0x29a
 8002da0:	4810      	ldr	r0, [pc, #64]	@ (8002de4 <FLASH_Program_HalfWord+0x74>)
 8002da2:	f7ff f983 	bl	80020ac <assert_failed>

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002da6:	4b10      	ldr	r3, [pc, #64]	@ (8002de8 <FLASH_Program_HalfWord+0x78>)
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	4a0f      	ldr	r2, [pc, #60]	@ (8002de8 <FLASH_Program_HalfWord+0x78>)
 8002dac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002db0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002db2:	4b0d      	ldr	r3, [pc, #52]	@ (8002de8 <FLASH_Program_HalfWord+0x78>)
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	4a0c      	ldr	r2, [pc, #48]	@ (8002de8 <FLASH_Program_HalfWord+0x78>)
 8002db8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dbc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8002de8 <FLASH_Program_HalfWord+0x78>)
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	4a09      	ldr	r2, [pc, #36]	@ (8002de8 <FLASH_Program_HalfWord+0x78>)
 8002dc4:	f043 0301 	orr.w	r3, r3, #1
 8002dc8:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	887a      	ldrh	r2, [r7, #2]
 8002dce:	801a      	strh	r2, [r3, #0]
}
 8002dd0:	bf00      	nop
 8002dd2:	3708      	adds	r7, #8
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	0807ffff 	.word	0x0807ffff
 8002ddc:	1fff77ff 	.word	0x1fff77ff
 8002de0:	1fff7a0f 	.word	0x1fff7a0f
 8002de4:	08006f0c 	.word	0x08006f0c
 8002de8:	40023c00 	.word	0x40023c00

08002dec <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	460b      	mov	r3, r1
 8002df6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002dfe:	d303      	bcc.n	8002e08 <FLASH_Program_Byte+0x1c>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a13      	ldr	r2, [pc, #76]	@ (8002e50 <FLASH_Program_Byte+0x64>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d90c      	bls.n	8002e22 <FLASH_Program_Byte+0x36>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a12      	ldr	r2, [pc, #72]	@ (8002e54 <FLASH_Program_Byte+0x68>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d903      	bls.n	8002e18 <FLASH_Program_Byte+0x2c>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a11      	ldr	r2, [pc, #68]	@ (8002e58 <FLASH_Program_Byte+0x6c>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d904      	bls.n	8002e22 <FLASH_Program_Byte+0x36>
 8002e18:	f240 21b3 	movw	r1, #691	@ 0x2b3
 8002e1c:	480f      	ldr	r0, [pc, #60]	@ (8002e5c <FLASH_Program_Byte+0x70>)
 8002e1e:	f7ff f945 	bl	80020ac <assert_failed>

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002e22:	4b0f      	ldr	r3, [pc, #60]	@ (8002e60 <FLASH_Program_Byte+0x74>)
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	4a0e      	ldr	r2, [pc, #56]	@ (8002e60 <FLASH_Program_Byte+0x74>)
 8002e28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e2c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002e2e:	4b0c      	ldr	r3, [pc, #48]	@ (8002e60 <FLASH_Program_Byte+0x74>)
 8002e30:	4a0b      	ldr	r2, [pc, #44]	@ (8002e60 <FLASH_Program_Byte+0x74>)
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002e36:	4b0a      	ldr	r3, [pc, #40]	@ (8002e60 <FLASH_Program_Byte+0x74>)
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	4a09      	ldr	r2, [pc, #36]	@ (8002e60 <FLASH_Program_Byte+0x74>)
 8002e3c:	f043 0301 	orr.w	r3, r3, #1
 8002e40:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	78fa      	ldrb	r2, [r7, #3]
 8002e46:	701a      	strb	r2, [r3, #0]
}
 8002e48:	bf00      	nop
 8002e4a:	3708      	adds	r7, #8
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	0807ffff 	.word	0x0807ffff
 8002e54:	1fff77ff 	.word	0x1fff77ff
 8002e58:	1fff7a0f 	.word	0x1fff7a0f
 8002e5c:	08006f0c 	.word	0x08006f0c
 8002e60:	40023c00 	.word	0x40023c00

08002e64 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002e68:	4b2f      	ldr	r3, [pc, #188]	@ (8002f28 <FLASH_SetErrorCode+0xc4>)
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	f003 0310 	and.w	r3, r3, #16
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d008      	beq.n	8002e86 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002e74:	4b2d      	ldr	r3, [pc, #180]	@ (8002f2c <FLASH_SetErrorCode+0xc8>)
 8002e76:	69db      	ldr	r3, [r3, #28]
 8002e78:	f043 0310 	orr.w	r3, r3, #16
 8002e7c:	4a2b      	ldr	r2, [pc, #172]	@ (8002f2c <FLASH_SetErrorCode+0xc8>)
 8002e7e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002e80:	4b29      	ldr	r3, [pc, #164]	@ (8002f28 <FLASH_SetErrorCode+0xc4>)
 8002e82:	2210      	movs	r2, #16
 8002e84:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002e86:	4b28      	ldr	r3, [pc, #160]	@ (8002f28 <FLASH_SetErrorCode+0xc4>)
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	f003 0320 	and.w	r3, r3, #32
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d008      	beq.n	8002ea4 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002e92:	4b26      	ldr	r3, [pc, #152]	@ (8002f2c <FLASH_SetErrorCode+0xc8>)
 8002e94:	69db      	ldr	r3, [r3, #28]
 8002e96:	f043 0308 	orr.w	r3, r3, #8
 8002e9a:	4a24      	ldr	r2, [pc, #144]	@ (8002f2c <FLASH_SetErrorCode+0xc8>)
 8002e9c:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002e9e:	4b22      	ldr	r3, [pc, #136]	@ (8002f28 <FLASH_SetErrorCode+0xc4>)
 8002ea0:	2220      	movs	r2, #32
 8002ea2:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002ea4:	4b20      	ldr	r3, [pc, #128]	@ (8002f28 <FLASH_SetErrorCode+0xc4>)
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d008      	beq.n	8002ec2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002eb0:	4b1e      	ldr	r3, [pc, #120]	@ (8002f2c <FLASH_SetErrorCode+0xc8>)
 8002eb2:	69db      	ldr	r3, [r3, #28]
 8002eb4:	f043 0304 	orr.w	r3, r3, #4
 8002eb8:	4a1c      	ldr	r2, [pc, #112]	@ (8002f2c <FLASH_SetErrorCode+0xc8>)
 8002eba:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002ebc:	4b1a      	ldr	r3, [pc, #104]	@ (8002f28 <FLASH_SetErrorCode+0xc4>)
 8002ebe:	2240      	movs	r2, #64	@ 0x40
 8002ec0:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002ec2:	4b19      	ldr	r3, [pc, #100]	@ (8002f28 <FLASH_SetErrorCode+0xc4>)
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d008      	beq.n	8002ee0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002ece:	4b17      	ldr	r3, [pc, #92]	@ (8002f2c <FLASH_SetErrorCode+0xc8>)
 8002ed0:	69db      	ldr	r3, [r3, #28]
 8002ed2:	f043 0302 	orr.w	r3, r3, #2
 8002ed6:	4a15      	ldr	r2, [pc, #84]	@ (8002f2c <FLASH_SetErrorCode+0xc8>)
 8002ed8:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002eda:	4b13      	ldr	r3, [pc, #76]	@ (8002f28 <FLASH_SetErrorCode+0xc4>)
 8002edc:	2280      	movs	r2, #128	@ 0x80
 8002ede:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002ee0:	4b11      	ldr	r3, [pc, #68]	@ (8002f28 <FLASH_SetErrorCode+0xc4>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d009      	beq.n	8002f00 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002eec:	4b0f      	ldr	r3, [pc, #60]	@ (8002f2c <FLASH_SetErrorCode+0xc8>)
 8002eee:	69db      	ldr	r3, [r3, #28]
 8002ef0:	f043 0301 	orr.w	r3, r3, #1
 8002ef4:	4a0d      	ldr	r2, [pc, #52]	@ (8002f2c <FLASH_SetErrorCode+0xc8>)
 8002ef6:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8002ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8002f28 <FLASH_SetErrorCode+0xc4>)
 8002efa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002efe:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002f00:	4b09      	ldr	r3, [pc, #36]	@ (8002f28 <FLASH_SetErrorCode+0xc4>)
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d008      	beq.n	8002f1e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002f0c:	4b07      	ldr	r3, [pc, #28]	@ (8002f2c <FLASH_SetErrorCode+0xc8>)
 8002f0e:	69db      	ldr	r3, [r3, #28]
 8002f10:	f043 0320 	orr.w	r3, r3, #32
 8002f14:	4a05      	ldr	r2, [pc, #20]	@ (8002f2c <FLASH_SetErrorCode+0xc8>)
 8002f16:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002f18:	4b03      	ldr	r3, [pc, #12]	@ (8002f28 <FLASH_SetErrorCode+0xc4>)
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	60da      	str	r2, [r3, #12]
  }
}
 8002f1e:	bf00      	nop
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr
 8002f28:	40023c00 	.word	0x40023c00
 8002f2c:	2001024c 	.word	0x2001024c

08002f30 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002f42:	4b40      	ldr	r3, [pc, #256]	@ (8003044 <HAL_FLASHEx_Erase+0x114>)
 8002f44:	7e1b      	ldrb	r3, [r3, #24]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d101      	bne.n	8002f4e <HAL_FLASHEx_Erase+0x1e>
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	e076      	b.n	800303c <HAL_FLASHEx_Erase+0x10c>
 8002f4e:	4b3d      	ldr	r3, [pc, #244]	@ (8003044 <HAL_FLASHEx_Erase+0x114>)
 8002f50:	2201      	movs	r2, #1
 8002f52:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d007      	beq.n	8002f6c <HAL_FLASHEx_Erase+0x3c>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d003      	beq.n	8002f6c <HAL_FLASHEx_Erase+0x3c>
 8002f64:	21a9      	movs	r1, #169	@ 0xa9
 8002f66:	4838      	ldr	r0, [pc, #224]	@ (8003048 <HAL_FLASHEx_Erase+0x118>)
 8002f68:	f7ff f8a0 	bl	80020ac <assert_failed>

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002f6c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002f70:	f7ff fe32 	bl	8002bd8 <FLASH_WaitForLastOperation>
 8002f74:	4603      	mov	r3, r0
 8002f76:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002f78:	7bfb      	ldrb	r3, [r7, #15]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d15a      	bne.n	8003034 <HAL_FLASHEx_Erase+0x104>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	f04f 32ff 	mov.w	r2, #4294967295
 8002f84:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d115      	bne.n	8002fba <HAL_FLASHEx_Erase+0x8a>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	b2da      	uxtb	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	4619      	mov	r1, r3
 8002f9a:	4610      	mov	r0, r2
 8002f9c:	f000 f858 	bl	8003050 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002fa0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002fa4:	f7ff fe18 	bl	8002bd8 <FLASH_WaitForLastOperation>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002fac:	4b27      	ldr	r3, [pc, #156]	@ (800304c <HAL_FLASHEx_Erase+0x11c>)
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	4a26      	ldr	r2, [pc, #152]	@ (800304c <HAL_FLASHEx_Erase+0x11c>)
 8002fb2:	f023 0304 	bic.w	r3, r3, #4
 8002fb6:	6113      	str	r3, [r2, #16]
 8002fb8:	e03a      	b.n	8003030 <HAL_FLASHEx_Erase+0x100>
    }
    else
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	68da      	ldr	r2, [r3, #12]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d006      	beq.n	8002fd6 <HAL_FLASHEx_Erase+0xa6>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68da      	ldr	r2, [r3, #12]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	2b08      	cmp	r3, #8
 8002fd4:	d903      	bls.n	8002fde <HAL_FLASHEx_Erase+0xae>
 8002fd6:	21c1      	movs	r1, #193	@ 0xc1
 8002fd8:	481b      	ldr	r0, [pc, #108]	@ (8003048 <HAL_FLASHEx_Erase+0x118>)
 8002fda:	f7ff f867 	bl	80020ac <assert_failed>

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	60bb      	str	r3, [r7, #8]
 8002fe4:	e01c      	b.n	8003020 <HAL_FLASHEx_Erase+0xf0>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	4619      	mov	r1, r3
 8002fee:	68b8      	ldr	r0, [r7, #8]
 8002ff0:	f000 f86a 	bl	80030c8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002ff4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002ff8:	f7ff fdee 	bl	8002bd8 <FLASH_WaitForLastOperation>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8003000:	4b12      	ldr	r3, [pc, #72]	@ (800304c <HAL_FLASHEx_Erase+0x11c>)
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	4a11      	ldr	r2, [pc, #68]	@ (800304c <HAL_FLASHEx_Erase+0x11c>)
 8003006:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 800300a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800300c:	7bfb      	ldrb	r3, [r7, #15]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d003      	beq.n	800301a <HAL_FLASHEx_Erase+0xea>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	68ba      	ldr	r2, [r7, #8]
 8003016:	601a      	str	r2, [r3, #0]
          break;
 8003018:	e00a      	b.n	8003030 <HAL_FLASHEx_Erase+0x100>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	3301      	adds	r3, #1
 800301e:	60bb      	str	r3, [r7, #8]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	68da      	ldr	r2, [r3, #12]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	4413      	add	r3, r2
 800302a:	68ba      	ldr	r2, [r7, #8]
 800302c:	429a      	cmp	r2, r3
 800302e:	d3da      	bcc.n	8002fe6 <HAL_FLASHEx_Erase+0xb6>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003030:	f000 f8c0 	bl	80031b4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003034:	4b03      	ldr	r3, [pc, #12]	@ (8003044 <HAL_FLASHEx_Erase+0x114>)
 8003036:	2200      	movs	r2, #0
 8003038:	761a      	strb	r2, [r3, #24]

  return status;
 800303a:	7bfb      	ldrb	r3, [r7, #15]
}
 800303c:	4618      	mov	r0, r3
 800303e:	3710      	adds	r7, #16
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	2001024c 	.word	0x2001024c
 8003048:	08006f80 	.word	0x08006f80
 800304c:	40023c00 	.word	0x40023c00

08003050 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	4603      	mov	r3, r0
 8003058:	6039      	str	r1, [r7, #0]
 800305a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800305c:	79fb      	ldrb	r3, [r7, #7]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00d      	beq.n	800307e <FLASH_MassErase+0x2e>
 8003062:	79fb      	ldrb	r3, [r7, #7]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d00a      	beq.n	800307e <FLASH_MassErase+0x2e>
 8003068:	79fb      	ldrb	r3, [r7, #7]
 800306a:	2b02      	cmp	r3, #2
 800306c:	d007      	beq.n	800307e <FLASH_MassErase+0x2e>
 800306e:	79fb      	ldrb	r3, [r7, #7]
 8003070:	2b03      	cmp	r3, #3
 8003072:	d004      	beq.n	800307e <FLASH_MassErase+0x2e>
 8003074:	f240 31b7 	movw	r1, #951	@ 0x3b7
 8003078:	4811      	ldr	r0, [pc, #68]	@ (80030c0 <FLASH_MassErase+0x70>)
 800307a:	f7ff f817 	bl	80020ac <assert_failed>
  assert_param(IS_FLASH_BANK(Banks));
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d004      	beq.n	800308e <FLASH_MassErase+0x3e>
 8003084:	f44f 716e 	mov.w	r1, #952	@ 0x3b8
 8003088:	480d      	ldr	r0, [pc, #52]	@ (80030c0 <FLASH_MassErase+0x70>)
 800308a:	f7ff f80f 	bl	80020ac <assert_failed>

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800308e:	4b0d      	ldr	r3, [pc, #52]	@ (80030c4 <FLASH_MassErase+0x74>)
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	4a0c      	ldr	r2, [pc, #48]	@ (80030c4 <FLASH_MassErase+0x74>)
 8003094:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003098:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800309a:	4b0a      	ldr	r3, [pc, #40]	@ (80030c4 <FLASH_MassErase+0x74>)
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	4a09      	ldr	r2, [pc, #36]	@ (80030c4 <FLASH_MassErase+0x74>)
 80030a0:	f043 0304 	orr.w	r3, r3, #4
 80030a4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80030a6:	4b07      	ldr	r3, [pc, #28]	@ (80030c4 <FLASH_MassErase+0x74>)
 80030a8:	691a      	ldr	r2, [r3, #16]
 80030aa:	79fb      	ldrb	r3, [r7, #7]
 80030ac:	021b      	lsls	r3, r3, #8
 80030ae:	4313      	orrs	r3, r2
 80030b0:	4a04      	ldr	r2, [pc, #16]	@ (80030c4 <FLASH_MassErase+0x74>)
 80030b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030b6:	6113      	str	r3, [r2, #16]
}
 80030b8:	bf00      	nop
 80030ba:	3708      	adds	r7, #8
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	08006f80 	.word	0x08006f80
 80030c4:	40023c00 	.word	0x40023c00

080030c8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	460b      	mov	r3, r1
 80030d2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80030d4:	2300      	movs	r3, #0
 80030d6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d019      	beq.n	8003112 <FLASH_Erase_Sector+0x4a>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d016      	beq.n	8003112 <FLASH_Erase_Sector+0x4a>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d013      	beq.n	8003112 <FLASH_Erase_Sector+0x4a>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2b03      	cmp	r3, #3
 80030ee:	d010      	beq.n	8003112 <FLASH_Erase_Sector+0x4a>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	d00d      	beq.n	8003112 <FLASH_Erase_Sector+0x4a>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2b05      	cmp	r3, #5
 80030fa:	d00a      	beq.n	8003112 <FLASH_Erase_Sector+0x4a>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2b06      	cmp	r3, #6
 8003100:	d007      	beq.n	8003112 <FLASH_Erase_Sector+0x4a>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2b07      	cmp	r3, #7
 8003106:	d004      	beq.n	8003112 <FLASH_Erase_Sector+0x4a>
 8003108:	f240 31d6 	movw	r1, #982	@ 0x3d6
 800310c:	4827      	ldr	r0, [pc, #156]	@ (80031ac <FLASH_Erase_Sector+0xe4>)
 800310e:	f7fe ffcd 	bl	80020ac <assert_failed>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 8003112:	78fb      	ldrb	r3, [r7, #3]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00d      	beq.n	8003134 <FLASH_Erase_Sector+0x6c>
 8003118:	78fb      	ldrb	r3, [r7, #3]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d00a      	beq.n	8003134 <FLASH_Erase_Sector+0x6c>
 800311e:	78fb      	ldrb	r3, [r7, #3]
 8003120:	2b02      	cmp	r3, #2
 8003122:	d007      	beq.n	8003134 <FLASH_Erase_Sector+0x6c>
 8003124:	78fb      	ldrb	r3, [r7, #3]
 8003126:	2b03      	cmp	r3, #3
 8003128:	d004      	beq.n	8003134 <FLASH_Erase_Sector+0x6c>
 800312a:	f240 31d7 	movw	r1, #983	@ 0x3d7
 800312e:	481f      	ldr	r0, [pc, #124]	@ (80031ac <FLASH_Erase_Sector+0xe4>)
 8003130:	f7fe ffbc 	bl	80020ac <assert_failed>

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8003134:	78fb      	ldrb	r3, [r7, #3]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d102      	bne.n	8003140 <FLASH_Erase_Sector+0x78>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800313a:	2300      	movs	r3, #0
 800313c:	60fb      	str	r3, [r7, #12]
 800313e:	e010      	b.n	8003162 <FLASH_Erase_Sector+0x9a>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003140:	78fb      	ldrb	r3, [r7, #3]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d103      	bne.n	800314e <FLASH_Erase_Sector+0x86>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8003146:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800314a:	60fb      	str	r3, [r7, #12]
 800314c:	e009      	b.n	8003162 <FLASH_Erase_Sector+0x9a>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800314e:	78fb      	ldrb	r3, [r7, #3]
 8003150:	2b02      	cmp	r3, #2
 8003152:	d103      	bne.n	800315c <FLASH_Erase_Sector+0x94>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8003154:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003158:	60fb      	str	r3, [r7, #12]
 800315a:	e002      	b.n	8003162 <FLASH_Erase_Sector+0x9a>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800315c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003160:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003162:	4b13      	ldr	r3, [pc, #76]	@ (80031b0 <FLASH_Erase_Sector+0xe8>)
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	4a12      	ldr	r2, [pc, #72]	@ (80031b0 <FLASH_Erase_Sector+0xe8>)
 8003168:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800316c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800316e:	4b10      	ldr	r3, [pc, #64]	@ (80031b0 <FLASH_Erase_Sector+0xe8>)
 8003170:	691a      	ldr	r2, [r3, #16]
 8003172:	490f      	ldr	r1, [pc, #60]	@ (80031b0 <FLASH_Erase_Sector+0xe8>)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	4313      	orrs	r3, r2
 8003178:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800317a:	4b0d      	ldr	r3, [pc, #52]	@ (80031b0 <FLASH_Erase_Sector+0xe8>)
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	4a0c      	ldr	r2, [pc, #48]	@ (80031b0 <FLASH_Erase_Sector+0xe8>)
 8003180:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003184:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8003186:	4b0a      	ldr	r3, [pc, #40]	@ (80031b0 <FLASH_Erase_Sector+0xe8>)
 8003188:	691a      	ldr	r2, [r3, #16]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	4313      	orrs	r3, r2
 8003190:	4a07      	ldr	r2, [pc, #28]	@ (80031b0 <FLASH_Erase_Sector+0xe8>)
 8003192:	f043 0302 	orr.w	r3, r3, #2
 8003196:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8003198:	4b05      	ldr	r3, [pc, #20]	@ (80031b0 <FLASH_Erase_Sector+0xe8>)
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	4a04      	ldr	r2, [pc, #16]	@ (80031b0 <FLASH_Erase_Sector+0xe8>)
 800319e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031a2:	6113      	str	r3, [r2, #16]
}
 80031a4:	bf00      	nop
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	08006f80 	.word	0x08006f80
 80031b0:	40023c00 	.word	0x40023c00

080031b4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80031b8:	4b20      	ldr	r3, [pc, #128]	@ (800323c <FLASH_FlushCaches+0x88>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d017      	beq.n	80031f4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80031c4:	4b1d      	ldr	r3, [pc, #116]	@ (800323c <FLASH_FlushCaches+0x88>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a1c      	ldr	r2, [pc, #112]	@ (800323c <FLASH_FlushCaches+0x88>)
 80031ca:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80031ce:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80031d0:	4b1a      	ldr	r3, [pc, #104]	@ (800323c <FLASH_FlushCaches+0x88>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a19      	ldr	r2, [pc, #100]	@ (800323c <FLASH_FlushCaches+0x88>)
 80031d6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80031da:	6013      	str	r3, [r2, #0]
 80031dc:	4b17      	ldr	r3, [pc, #92]	@ (800323c <FLASH_FlushCaches+0x88>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a16      	ldr	r2, [pc, #88]	@ (800323c <FLASH_FlushCaches+0x88>)
 80031e2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80031e6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031e8:	4b14      	ldr	r3, [pc, #80]	@ (800323c <FLASH_FlushCaches+0x88>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a13      	ldr	r2, [pc, #76]	@ (800323c <FLASH_FlushCaches+0x88>)
 80031ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031f2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80031f4:	4b11      	ldr	r3, [pc, #68]	@ (800323c <FLASH_FlushCaches+0x88>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d017      	beq.n	8003230 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8003200:	4b0e      	ldr	r3, [pc, #56]	@ (800323c <FLASH_FlushCaches+0x88>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a0d      	ldr	r2, [pc, #52]	@ (800323c <FLASH_FlushCaches+0x88>)
 8003206:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800320a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800320c:	4b0b      	ldr	r3, [pc, #44]	@ (800323c <FLASH_FlushCaches+0x88>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a0a      	ldr	r2, [pc, #40]	@ (800323c <FLASH_FlushCaches+0x88>)
 8003212:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003216:	6013      	str	r3, [r2, #0]
 8003218:	4b08      	ldr	r3, [pc, #32]	@ (800323c <FLASH_FlushCaches+0x88>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a07      	ldr	r2, [pc, #28]	@ (800323c <FLASH_FlushCaches+0x88>)
 800321e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003222:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003224:	4b05      	ldr	r3, [pc, #20]	@ (800323c <FLASH_FlushCaches+0x88>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a04      	ldr	r2, [pc, #16]	@ (800323c <FLASH_FlushCaches+0x88>)
 800322a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800322e:	6013      	str	r3, [r2, #0]
  }
}
 8003230:	bf00      	nop
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	40023c00 	.word	0x40023c00

08003240 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b088      	sub	sp, #32
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800324a:	2300      	movs	r3, #0
 800324c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800324e:	2300      	movs	r3, #0
 8003250:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003252:	2300      	movs	r3, #0
 8003254:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a32      	ldr	r2, [pc, #200]	@ (8003324 <HAL_GPIO_Init+0xe4>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d017      	beq.n	800328e <HAL_GPIO_Init+0x4e>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a31      	ldr	r2, [pc, #196]	@ (8003328 <HAL_GPIO_Init+0xe8>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d013      	beq.n	800328e <HAL_GPIO_Init+0x4e>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a30      	ldr	r2, [pc, #192]	@ (800332c <HAL_GPIO_Init+0xec>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d00f      	beq.n	800328e <HAL_GPIO_Init+0x4e>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a2f      	ldr	r2, [pc, #188]	@ (8003330 <HAL_GPIO_Init+0xf0>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d00b      	beq.n	800328e <HAL_GPIO_Init+0x4e>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a2e      	ldr	r2, [pc, #184]	@ (8003334 <HAL_GPIO_Init+0xf4>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d007      	beq.n	800328e <HAL_GPIO_Init+0x4e>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a2d      	ldr	r2, [pc, #180]	@ (8003338 <HAL_GPIO_Init+0xf8>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d003      	beq.n	800328e <HAL_GPIO_Init+0x4e>
 8003286:	21ac      	movs	r1, #172	@ 0xac
 8003288:	482c      	ldr	r0, [pc, #176]	@ (800333c <HAL_GPIO_Init+0xfc>)
 800328a:	f7fe ff0f 	bl	80020ac <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	b29b      	uxth	r3, r3
 8003294:	2b00      	cmp	r3, #0
 8003296:	d004      	beq.n	80032a2 <HAL_GPIO_Init+0x62>
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032a0:	d303      	bcc.n	80032aa <HAL_GPIO_Init+0x6a>
 80032a2:	21ad      	movs	r1, #173	@ 0xad
 80032a4:	4825      	ldr	r0, [pc, #148]	@ (800333c <HAL_GPIO_Init+0xfc>)
 80032a6:	f7fe ff01 	bl	80020ac <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d035      	beq.n	800331e <HAL_GPIO_Init+0xde>
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d031      	beq.n	800331e <HAL_GPIO_Init+0xde>
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2b11      	cmp	r3, #17
 80032c0:	d02d      	beq.n	800331e <HAL_GPIO_Init+0xde>
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d029      	beq.n	800331e <HAL_GPIO_Init+0xde>
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	2b12      	cmp	r3, #18
 80032d0:	d025      	beq.n	800331e <HAL_GPIO_Init+0xde>
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 80032da:	d020      	beq.n	800331e <HAL_GPIO_Init+0xde>
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 80032e4:	d01b      	beq.n	800331e <HAL_GPIO_Init+0xde>
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 80032ee:	d016      	beq.n	800331e <HAL_GPIO_Init+0xde>
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 80032f8:	d011      	beq.n	800331e <HAL_GPIO_Init+0xde>
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 8003302:	d00c      	beq.n	800331e <HAL_GPIO_Init+0xde>
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 800330c:	d007      	beq.n	800331e <HAL_GPIO_Init+0xde>
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	2b03      	cmp	r3, #3
 8003314:	d003      	beq.n	800331e <HAL_GPIO_Init+0xde>
 8003316:	21ae      	movs	r1, #174	@ 0xae
 8003318:	4808      	ldr	r0, [pc, #32]	@ (800333c <HAL_GPIO_Init+0xfc>)
 800331a:	f7fe fec7 	bl	80020ac <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800331e:	2300      	movs	r3, #0
 8003320:	61fb      	str	r3, [r7, #28]
 8003322:	e20b      	b.n	800373c <HAL_GPIO_Init+0x4fc>
 8003324:	40020000 	.word	0x40020000
 8003328:	40020400 	.word	0x40020400
 800332c:	40020800 	.word	0x40020800
 8003330:	40020c00 	.word	0x40020c00
 8003334:	40021000 	.word	0x40021000
 8003338:	40021c00 	.word	0x40021c00
 800333c:	08006ff8 	.word	0x08006ff8
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003340:	2201      	movs	r2, #1
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	4013      	ands	r3, r2
 8003352:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	429a      	cmp	r2, r3
 800335a:	f040 81ec 	bne.w	8003736 <HAL_GPIO_Init+0x4f6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f003 0303 	and.w	r3, r3, #3
 8003366:	2b01      	cmp	r3, #1
 8003368:	d005      	beq.n	8003376 <HAL_GPIO_Init+0x136>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003372:	2b02      	cmp	r3, #2
 8003374:	d144      	bne.n	8003400 <HAL_GPIO_Init+0x1c0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00f      	beq.n	800339e <HAL_GPIO_Init+0x15e>
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d00b      	beq.n	800339e <HAL_GPIO_Init+0x15e>
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	2b02      	cmp	r3, #2
 800338c:	d007      	beq.n	800339e <HAL_GPIO_Init+0x15e>
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	2b03      	cmp	r3, #3
 8003394:	d003      	beq.n	800339e <HAL_GPIO_Init+0x15e>
 8003396:	21c0      	movs	r1, #192	@ 0xc0
 8003398:	4884      	ldr	r0, [pc, #528]	@ (80035ac <HAL_GPIO_Init+0x36c>)
 800339a:	f7fe fe87 	bl	80020ac <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	2203      	movs	r2, #3
 80033aa:	fa02 f303 	lsl.w	r3, r2, r3
 80033ae:	43db      	mvns	r3, r3
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	4013      	ands	r3, r2
 80033b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	68da      	ldr	r2, [r3, #12]
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	fa02 f303 	lsl.w	r3, r2, r3
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033d4:	2201      	movs	r2, #1
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	43db      	mvns	r3, r3
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	4013      	ands	r3, r2
 80033e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	091b      	lsrs	r3, r3, #4
 80033ea:	f003 0201 	and.w	r2, r3, #1
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f003 0303 	and.w	r3, r3, #3
 8003408:	2b03      	cmp	r3, #3
 800340a:	d027      	beq.n	800345c <HAL_GPIO_Init+0x21c>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00b      	beq.n	800342c <HAL_GPIO_Init+0x1ec>
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d007      	beq.n	800342c <HAL_GPIO_Init+0x1ec>
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	2b02      	cmp	r3, #2
 8003422:	d003      	beq.n	800342c <HAL_GPIO_Init+0x1ec>
 8003424:	21d1      	movs	r1, #209	@ 0xd1
 8003426:	4861      	ldr	r0, [pc, #388]	@ (80035ac <HAL_GPIO_Init+0x36c>)
 8003428:	f7fe fe40 	bl	80020ac <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	2203      	movs	r2, #3
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	43db      	mvns	r3, r3
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	4013      	ands	r3, r2
 8003442:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	689a      	ldr	r2, [r3, #8]
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	4313      	orrs	r3, r2
 8003454:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f003 0303 	and.w	r3, r3, #3
 8003464:	2b02      	cmp	r3, #2
 8003466:	f040 80a3 	bne.w	80035b0 <HAL_GPIO_Init+0x370>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d077      	beq.n	8003562 <HAL_GPIO_Init+0x322>
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	2b09      	cmp	r3, #9
 8003478:	d073      	beq.n	8003562 <HAL_GPIO_Init+0x322>
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d06f      	beq.n	8003562 <HAL_GPIO_Init+0x322>
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d06b      	beq.n	8003562 <HAL_GPIO_Init+0x322>
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d067      	beq.n	8003562 <HAL_GPIO_Init+0x322>
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d063      	beq.n	8003562 <HAL_GPIO_Init+0x322>
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d05f      	beq.n	8003562 <HAL_GPIO_Init+0x322>
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d05b      	beq.n	8003562 <HAL_GPIO_Init+0x322>
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d057      	beq.n	8003562 <HAL_GPIO_Init+0x322>
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d053      	beq.n	8003562 <HAL_GPIO_Init+0x322>
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d04f      	beq.n	8003562 <HAL_GPIO_Init+0x322>
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	2b04      	cmp	r3, #4
 80034c8:	d04b      	beq.n	8003562 <HAL_GPIO_Init+0x322>
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	2b04      	cmp	r3, #4
 80034d0:	d047      	beq.n	8003562 <HAL_GPIO_Init+0x322>
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	2b04      	cmp	r3, #4
 80034d8:	d043      	beq.n	8003562 <HAL_GPIO_Init+0x322>
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	2b05      	cmp	r3, #5
 80034e0:	d03f      	beq.n	8003562 <HAL_GPIO_Init+0x322>
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	2b05      	cmp	r3, #5
 80034e8:	d03b      	beq.n	8003562 <HAL_GPIO_Init+0x322>
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	2b05      	cmp	r3, #5
 80034f0:	d037      	beq.n	8003562 <HAL_GPIO_Init+0x322>
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	2b06      	cmp	r3, #6
 80034f8:	d033      	beq.n	8003562 <HAL_GPIO_Init+0x322>
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	2b06      	cmp	r3, #6
 8003500:	d02f      	beq.n	8003562 <HAL_GPIO_Init+0x322>
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	2b05      	cmp	r3, #5
 8003508:	d02b      	beq.n	8003562 <HAL_GPIO_Init+0x322>
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	2b06      	cmp	r3, #6
 8003510:	d027      	beq.n	8003562 <HAL_GPIO_Init+0x322>
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	2b07      	cmp	r3, #7
 8003518:	d023      	beq.n	8003562 <HAL_GPIO_Init+0x322>
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	2b07      	cmp	r3, #7
 8003520:	d01f      	beq.n	8003562 <HAL_GPIO_Init+0x322>
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	2b07      	cmp	r3, #7
 8003528:	d01b      	beq.n	8003562 <HAL_GPIO_Init+0x322>
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	2b08      	cmp	r3, #8
 8003530:	d017      	beq.n	8003562 <HAL_GPIO_Init+0x322>
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	2b0a      	cmp	r3, #10
 8003538:	d013      	beq.n	8003562 <HAL_GPIO_Init+0x322>
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	2b09      	cmp	r3, #9
 8003540:	d00f      	beq.n	8003562 <HAL_GPIO_Init+0x322>
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	2b09      	cmp	r3, #9
 8003548:	d00b      	beq.n	8003562 <HAL_GPIO_Init+0x322>
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	2b0c      	cmp	r3, #12
 8003550:	d007      	beq.n	8003562 <HAL_GPIO_Init+0x322>
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	2b0f      	cmp	r3, #15
 8003558:	d003      	beq.n	8003562 <HAL_GPIO_Init+0x322>
 800355a:	21de      	movs	r1, #222	@ 0xde
 800355c:	4813      	ldr	r0, [pc, #76]	@ (80035ac <HAL_GPIO_Init+0x36c>)
 800355e:	f7fe fda5 	bl	80020ac <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	08da      	lsrs	r2, r3, #3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	3208      	adds	r2, #8
 800356a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800356e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	f003 0307 	and.w	r3, r3, #7
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	220f      	movs	r2, #15
 800357a:	fa02 f303 	lsl.w	r3, r2, r3
 800357e:	43db      	mvns	r3, r3
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	4013      	ands	r3, r2
 8003584:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	691a      	ldr	r2, [r3, #16]
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	f003 0307 	and.w	r3, r3, #7
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	fa02 f303 	lsl.w	r3, r2, r3
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	4313      	orrs	r3, r2
 800359a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	08da      	lsrs	r2, r3, #3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	3208      	adds	r2, #8
 80035a4:	69b9      	ldr	r1, [r7, #24]
 80035a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80035aa:	e001      	b.n	80035b0 <HAL_GPIO_Init+0x370>
 80035ac:	08006ff8 	.word	0x08006ff8
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	2203      	movs	r2, #3
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	43db      	mvns	r3, r3
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	4013      	ands	r3, r2
 80035c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f003 0203 	and.w	r2, r3, #3
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	fa02 f303 	lsl.w	r3, r2, r3
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	4313      	orrs	r3, r2
 80035dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f000 80a2 	beq.w	8003736 <HAL_GPIO_Init+0x4f6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035f2:	2300      	movs	r3, #0
 80035f4:	60fb      	str	r3, [r7, #12]
 80035f6:	4b56      	ldr	r3, [pc, #344]	@ (8003750 <HAL_GPIO_Init+0x510>)
 80035f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035fa:	4a55      	ldr	r2, [pc, #340]	@ (8003750 <HAL_GPIO_Init+0x510>)
 80035fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003600:	6453      	str	r3, [r2, #68]	@ 0x44
 8003602:	4b53      	ldr	r3, [pc, #332]	@ (8003750 <HAL_GPIO_Init+0x510>)
 8003604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003606:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800360a:	60fb      	str	r3, [r7, #12]
 800360c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800360e:	4a51      	ldr	r2, [pc, #324]	@ (8003754 <HAL_GPIO_Init+0x514>)
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	089b      	lsrs	r3, r3, #2
 8003614:	3302      	adds	r3, #2
 8003616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800361a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	f003 0303 	and.w	r3, r3, #3
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	220f      	movs	r2, #15
 8003626:	fa02 f303 	lsl.w	r3, r2, r3
 800362a:	43db      	mvns	r3, r3
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	4013      	ands	r3, r2
 8003630:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a48      	ldr	r2, [pc, #288]	@ (8003758 <HAL_GPIO_Init+0x518>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d019      	beq.n	800366e <HAL_GPIO_Init+0x42e>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a47      	ldr	r2, [pc, #284]	@ (800375c <HAL_GPIO_Init+0x51c>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d013      	beq.n	800366a <HAL_GPIO_Init+0x42a>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a46      	ldr	r2, [pc, #280]	@ (8003760 <HAL_GPIO_Init+0x520>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d00d      	beq.n	8003666 <HAL_GPIO_Init+0x426>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a45      	ldr	r2, [pc, #276]	@ (8003764 <HAL_GPIO_Init+0x524>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d007      	beq.n	8003662 <HAL_GPIO_Init+0x422>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a44      	ldr	r2, [pc, #272]	@ (8003768 <HAL_GPIO_Init+0x528>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d101      	bne.n	800365e <HAL_GPIO_Init+0x41e>
 800365a:	2304      	movs	r3, #4
 800365c:	e008      	b.n	8003670 <HAL_GPIO_Init+0x430>
 800365e:	2307      	movs	r3, #7
 8003660:	e006      	b.n	8003670 <HAL_GPIO_Init+0x430>
 8003662:	2303      	movs	r3, #3
 8003664:	e004      	b.n	8003670 <HAL_GPIO_Init+0x430>
 8003666:	2302      	movs	r3, #2
 8003668:	e002      	b.n	8003670 <HAL_GPIO_Init+0x430>
 800366a:	2301      	movs	r3, #1
 800366c:	e000      	b.n	8003670 <HAL_GPIO_Init+0x430>
 800366e:	2300      	movs	r3, #0
 8003670:	69fa      	ldr	r2, [r7, #28]
 8003672:	f002 0203 	and.w	r2, r2, #3
 8003676:	0092      	lsls	r2, r2, #2
 8003678:	4093      	lsls	r3, r2
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	4313      	orrs	r3, r2
 800367e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003680:	4934      	ldr	r1, [pc, #208]	@ (8003754 <HAL_GPIO_Init+0x514>)
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	089b      	lsrs	r3, r3, #2
 8003686:	3302      	adds	r3, #2
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800368e:	4b37      	ldr	r3, [pc, #220]	@ (800376c <HAL_GPIO_Init+0x52c>)
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	43db      	mvns	r3, r3
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	4013      	ands	r3, r2
 800369c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d003      	beq.n	80036b2 <HAL_GPIO_Init+0x472>
        {
          temp |= iocurrent;
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036b2:	4a2e      	ldr	r2, [pc, #184]	@ (800376c <HAL_GPIO_Init+0x52c>)
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036b8:	4b2c      	ldr	r3, [pc, #176]	@ (800376c <HAL_GPIO_Init+0x52c>)
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	43db      	mvns	r3, r3
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	4013      	ands	r3, r2
 80036c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d003      	beq.n	80036dc <HAL_GPIO_Init+0x49c>
        {
          temp |= iocurrent;
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	4313      	orrs	r3, r2
 80036da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036dc:	4a23      	ldr	r2, [pc, #140]	@ (800376c <HAL_GPIO_Init+0x52c>)
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80036e2:	4b22      	ldr	r3, [pc, #136]	@ (800376c <HAL_GPIO_Init+0x52c>)
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	43db      	mvns	r3, r3
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	4013      	ands	r3, r2
 80036f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d003      	beq.n	8003706 <HAL_GPIO_Init+0x4c6>
        {
          temp |= iocurrent;
 80036fe:	69ba      	ldr	r2, [r7, #24]
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	4313      	orrs	r3, r2
 8003704:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003706:	4a19      	ldr	r2, [pc, #100]	@ (800376c <HAL_GPIO_Init+0x52c>)
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800370c:	4b17      	ldr	r3, [pc, #92]	@ (800376c <HAL_GPIO_Init+0x52c>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	43db      	mvns	r3, r3
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	4013      	ands	r3, r2
 800371a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d003      	beq.n	8003730 <HAL_GPIO_Init+0x4f0>
        {
          temp |= iocurrent;
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	4313      	orrs	r3, r2
 800372e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003730:	4a0e      	ldr	r2, [pc, #56]	@ (800376c <HAL_GPIO_Init+0x52c>)
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	3301      	adds	r3, #1
 800373a:	61fb      	str	r3, [r7, #28]
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	2b0f      	cmp	r3, #15
 8003740:	f67f adfe 	bls.w	8003340 <HAL_GPIO_Init+0x100>
      }
    }
  }
}
 8003744:	bf00      	nop
 8003746:	bf00      	nop
 8003748:	3720      	adds	r7, #32
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	40023800 	.word	0x40023800
 8003754:	40013800 	.word	0x40013800
 8003758:	40020000 	.word	0x40020000
 800375c:	40020400 	.word	0x40020400
 8003760:	40020800 	.word	0x40020800
 8003764:	40020c00 	.word	0x40020c00
 8003768:	40021000 	.word	0x40021000
 800376c:	40013c00 	.word	0x40013c00

08003770 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	460b      	mov	r3, r1
 800377a:	807b      	strh	r3, [r7, #2]
 800377c:	4613      	mov	r3, r2
 800377e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003780:	887b      	ldrh	r3, [r7, #2]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d104      	bne.n	8003790 <HAL_GPIO_WritePin+0x20>
 8003786:	f240 119d 	movw	r1, #413	@ 0x19d
 800378a:	480e      	ldr	r0, [pc, #56]	@ (80037c4 <HAL_GPIO_WritePin+0x54>)
 800378c:	f7fe fc8e 	bl	80020ac <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003790:	787b      	ldrb	r3, [r7, #1]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d007      	beq.n	80037a6 <HAL_GPIO_WritePin+0x36>
 8003796:	787b      	ldrb	r3, [r7, #1]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d004      	beq.n	80037a6 <HAL_GPIO_WritePin+0x36>
 800379c:	f44f 71cf 	mov.w	r1, #414	@ 0x19e
 80037a0:	4808      	ldr	r0, [pc, #32]	@ (80037c4 <HAL_GPIO_WritePin+0x54>)
 80037a2:	f7fe fc83 	bl	80020ac <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80037a6:	787b      	ldrb	r3, [r7, #1]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d003      	beq.n	80037b4 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037ac:	887a      	ldrh	r2, [r7, #2]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80037b2:	e003      	b.n	80037bc <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80037b4:	887b      	ldrh	r3, [r7, #2]
 80037b6:	041a      	lsls	r2, r3, #16
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	619a      	str	r2, [r3, #24]
}
 80037bc:	bf00      	nop
 80037be:	3708      	adds	r7, #8
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	08006ff8 	.word	0x08006ff8

080037c8 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 80037cc:	4b06      	ldr	r3, [pc, #24]	@ (80037e8 <HAL_PWR_PVD_IRQHandler+0x20>)
 80037ce:	695b      	ldr	r3, [r3, #20]
 80037d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d005      	beq.n	80037e4 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 80037d8:	f000 f808 	bl	80037ec <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 80037dc:	4b02      	ldr	r3, [pc, #8]	@ (80037e8 <HAL_PWR_PVD_IRQHandler+0x20>)
 80037de:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80037e2:	615a      	str	r2, [r3, #20]
  }
}
 80037e4:	bf00      	nop
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	40013c00 	.word	0x40013c00

080037ec <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 80037f0:	bf00      	nop
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
	...

080037fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e318      	b.n	8003e40 <HAL_RCC_OscConfig+0x644>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2b0f      	cmp	r3, #15
 8003814:	d903      	bls.n	800381e <HAL_RCC_OscConfig+0x22>
 8003816:	21e6      	movs	r1, #230	@ 0xe6
 8003818:	4897      	ldr	r0, [pc, #604]	@ (8003a78 <HAL_RCC_OscConfig+0x27c>)
 800381a:	f7fe fc47 	bl	80020ac <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b00      	cmp	r3, #0
 8003828:	f000 8088 	beq.w	800393c <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00d      	beq.n	8003850 <HAL_RCC_OscConfig+0x54>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800383c:	d008      	beq.n	8003850 <HAL_RCC_OscConfig+0x54>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003846:	d003      	beq.n	8003850 <HAL_RCC_OscConfig+0x54>
 8003848:	21eb      	movs	r1, #235	@ 0xeb
 800384a:	488b      	ldr	r0, [pc, #556]	@ (8003a78 <HAL_RCC_OscConfig+0x27c>)
 800384c:	f7fe fc2e 	bl	80020ac <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003850:	4b8a      	ldr	r3, [pc, #552]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f003 030c 	and.w	r3, r3, #12
 8003858:	2b04      	cmp	r3, #4
 800385a:	d00c      	beq.n	8003876 <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800385c:	4b87      	ldr	r3, [pc, #540]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003864:	2b08      	cmp	r3, #8
 8003866:	d112      	bne.n	800388e <HAL_RCC_OscConfig+0x92>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003868:	4b84      	ldr	r3, [pc, #528]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003870:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003874:	d10b      	bne.n	800388e <HAL_RCC_OscConfig+0x92>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003876:	4b81      	ldr	r3, [pc, #516]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d05b      	beq.n	800393a <HAL_RCC_OscConfig+0x13e>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d157      	bne.n	800393a <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e2d8      	b.n	8003e40 <HAL_RCC_OscConfig+0x644>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003896:	d106      	bne.n	80038a6 <HAL_RCC_OscConfig+0xaa>
 8003898:	4b78      	ldr	r3, [pc, #480]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a77      	ldr	r2, [pc, #476]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 800389e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038a2:	6013      	str	r3, [r2, #0]
 80038a4:	e01d      	b.n	80038e2 <HAL_RCC_OscConfig+0xe6>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038ae:	d10c      	bne.n	80038ca <HAL_RCC_OscConfig+0xce>
 80038b0:	4b72      	ldr	r3, [pc, #456]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a71      	ldr	r2, [pc, #452]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 80038b6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038ba:	6013      	str	r3, [r2, #0]
 80038bc:	4b6f      	ldr	r3, [pc, #444]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a6e      	ldr	r2, [pc, #440]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 80038c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038c6:	6013      	str	r3, [r2, #0]
 80038c8:	e00b      	b.n	80038e2 <HAL_RCC_OscConfig+0xe6>
 80038ca:	4b6c      	ldr	r3, [pc, #432]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a6b      	ldr	r2, [pc, #428]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 80038d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038d4:	6013      	str	r3, [r2, #0]
 80038d6:	4b69      	ldr	r3, [pc, #420]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a68      	ldr	r2, [pc, #416]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 80038dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038e0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d013      	beq.n	8003912 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ea:	f7fe fe71 	bl	80025d0 <HAL_GetTick>
 80038ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038f0:	e008      	b.n	8003904 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038f2:	f7fe fe6d 	bl	80025d0 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b64      	cmp	r3, #100	@ 0x64
 80038fe:	d901      	bls.n	8003904 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e29d      	b.n	8003e40 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003904:	4b5d      	ldr	r3, [pc, #372]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d0f0      	beq.n	80038f2 <HAL_RCC_OscConfig+0xf6>
 8003910:	e014      	b.n	800393c <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003912:	f7fe fe5d 	bl	80025d0 <HAL_GetTick>
 8003916:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003918:	e008      	b.n	800392c <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800391a:	f7fe fe59 	bl	80025d0 <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	2b64      	cmp	r3, #100	@ 0x64
 8003926:	d901      	bls.n	800392c <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e289      	b.n	8003e40 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800392c:	4b53      	ldr	r3, [pc, #332]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1f0      	bne.n	800391a <HAL_RCC_OscConfig+0x11e>
 8003938:	e000      	b.n	800393c <HAL_RCC_OscConfig+0x140>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800393a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	2b00      	cmp	r3, #0
 8003946:	d079      	beq.n	8003a3c <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d008      	beq.n	8003962 <HAL_RCC_OscConfig+0x166>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d004      	beq.n	8003962 <HAL_RCC_OscConfig+0x166>
 8003958:	f240 111d 	movw	r1, #285	@ 0x11d
 800395c:	4846      	ldr	r0, [pc, #280]	@ (8003a78 <HAL_RCC_OscConfig+0x27c>)
 800395e:	f7fe fba5 	bl	80020ac <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	2b1f      	cmp	r3, #31
 8003968:	d904      	bls.n	8003974 <HAL_RCC_OscConfig+0x178>
 800396a:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 800396e:	4842      	ldr	r0, [pc, #264]	@ (8003a78 <HAL_RCC_OscConfig+0x27c>)
 8003970:	f7fe fb9c 	bl	80020ac <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003974:	4b41      	ldr	r3, [pc, #260]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f003 030c 	and.w	r3, r3, #12
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00b      	beq.n	8003998 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003980:	4b3e      	ldr	r3, [pc, #248]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003988:	2b08      	cmp	r3, #8
 800398a:	d11c      	bne.n	80039c6 <HAL_RCC_OscConfig+0x1ca>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800398c:	4b3b      	ldr	r3, [pc, #236]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d116      	bne.n	80039c6 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003998:	4b38      	ldr	r3, [pc, #224]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d005      	beq.n	80039b0 <HAL_RCC_OscConfig+0x1b4>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d001      	beq.n	80039b0 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e247      	b.n	8003e40 <HAL_RCC_OscConfig+0x644>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039b0:	4b32      	ldr	r3, [pc, #200]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	00db      	lsls	r3, r3, #3
 80039be:	492f      	ldr	r1, [pc, #188]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039c4:	e03a      	b.n	8003a3c <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d020      	beq.n	8003a10 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039ce:	4b2c      	ldr	r3, [pc, #176]	@ (8003a80 <HAL_RCC_OscConfig+0x284>)
 80039d0:	2201      	movs	r2, #1
 80039d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d4:	f7fe fdfc 	bl	80025d0 <HAL_GetTick>
 80039d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039da:	e008      	b.n	80039ee <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039dc:	f7fe fdf8 	bl	80025d0 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e228      	b.n	8003e40 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ee:	4b23      	ldr	r3, [pc, #140]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d0f0      	beq.n	80039dc <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039fa:	4b20      	ldr	r3, [pc, #128]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	00db      	lsls	r3, r3, #3
 8003a08:	491c      	ldr	r1, [pc, #112]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	600b      	str	r3, [r1, #0]
 8003a0e:	e015      	b.n	8003a3c <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a10:	4b1b      	ldr	r3, [pc, #108]	@ (8003a80 <HAL_RCC_OscConfig+0x284>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a16:	f7fe fddb 	bl	80025d0 <HAL_GetTick>
 8003a1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a1c:	e008      	b.n	8003a30 <HAL_RCC_OscConfig+0x234>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a1e:	f7fe fdd7 	bl	80025d0 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d901      	bls.n	8003a30 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e207      	b.n	8003e40 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a30:	4b12      	ldr	r3, [pc, #72]	@ (8003a7c <HAL_RCC_OscConfig+0x280>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1f0      	bne.n	8003a1e <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0308 	and.w	r3, r3, #8
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d045      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	695b      	ldr	r3, [r3, #20]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d008      	beq.n	8003a62 <HAL_RCC_OscConfig+0x266>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	695b      	ldr	r3, [r3, #20]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d004      	beq.n	8003a62 <HAL_RCC_OscConfig+0x266>
 8003a58:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 8003a5c:	4806      	ldr	r0, [pc, #24]	@ (8003a78 <HAL_RCC_OscConfig+0x27c>)
 8003a5e:	f7fe fb25 	bl	80020ac <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d01e      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a6a:	4b06      	ldr	r3, [pc, #24]	@ (8003a84 <HAL_RCC_OscConfig+0x288>)
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a70:	f7fe fdae 	bl	80025d0 <HAL_GetTick>
 8003a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a76:	e010      	b.n	8003a9a <HAL_RCC_OscConfig+0x29e>
 8003a78:	0800706c 	.word	0x0800706c
 8003a7c:	40023800 	.word	0x40023800
 8003a80:	42470000 	.word	0x42470000
 8003a84:	42470e80 	.word	0x42470e80
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a88:	f7fe fda2 	bl	80025d0 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e1d2      	b.n	8003e40 <HAL_RCC_OscConfig+0x644>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a9a:	4b5e      	ldr	r3, [pc, #376]	@ (8003c14 <HAL_RCC_OscConfig+0x418>)
 8003a9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d0f0      	beq.n	8003a88 <HAL_RCC_OscConfig+0x28c>
 8003aa6:	e015      	b.n	8003ad4 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003aa8:	4b5b      	ldr	r3, [pc, #364]	@ (8003c18 <HAL_RCC_OscConfig+0x41c>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aae:	f7fe fd8f 	bl	80025d0 <HAL_GetTick>
 8003ab2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ab4:	e008      	b.n	8003ac8 <HAL_RCC_OscConfig+0x2cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ab6:	f7fe fd8b 	bl	80025d0 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d901      	bls.n	8003ac8 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e1bb      	b.n	8003e40 <HAL_RCC_OscConfig+0x644>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ac8:	4b52      	ldr	r3, [pc, #328]	@ (8003c14 <HAL_RCC_OscConfig+0x418>)
 8003aca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1f0      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0304 	and.w	r3, r3, #4
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f000 80b0 	beq.w	8003c42 <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00c      	beq.n	8003b08 <HAL_RCC_OscConfig+0x30c>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d008      	beq.n	8003b08 <HAL_RCC_OscConfig+0x30c>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	2b05      	cmp	r3, #5
 8003afc:	d004      	beq.n	8003b08 <HAL_RCC_OscConfig+0x30c>
 8003afe:	f44f 71c5 	mov.w	r1, #394	@ 0x18a
 8003b02:	4846      	ldr	r0, [pc, #280]	@ (8003c1c <HAL_RCC_OscConfig+0x420>)
 8003b04:	f7fe fad2 	bl	80020ac <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b08:	4b42      	ldr	r3, [pc, #264]	@ (8003c14 <HAL_RCC_OscConfig+0x418>)
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d10f      	bne.n	8003b34 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b14:	2300      	movs	r3, #0
 8003b16:	60bb      	str	r3, [r7, #8]
 8003b18:	4b3e      	ldr	r3, [pc, #248]	@ (8003c14 <HAL_RCC_OscConfig+0x418>)
 8003b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b1c:	4a3d      	ldr	r2, [pc, #244]	@ (8003c14 <HAL_RCC_OscConfig+0x418>)
 8003b1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b22:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b24:	4b3b      	ldr	r3, [pc, #236]	@ (8003c14 <HAL_RCC_OscConfig+0x418>)
 8003b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b2c:	60bb      	str	r3, [r7, #8]
 8003b2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b30:	2301      	movs	r3, #1
 8003b32:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b34:	4b3a      	ldr	r3, [pc, #232]	@ (8003c20 <HAL_RCC_OscConfig+0x424>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d118      	bne.n	8003b72 <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b40:	4b37      	ldr	r3, [pc, #220]	@ (8003c20 <HAL_RCC_OscConfig+0x424>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a36      	ldr	r2, [pc, #216]	@ (8003c20 <HAL_RCC_OscConfig+0x424>)
 8003b46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b4a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b4c:	f7fe fd40 	bl	80025d0 <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0x36a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b54:	f7fe fd3c 	bl	80025d0 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e16c      	b.n	8003e40 <HAL_RCC_OscConfig+0x644>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b66:	4b2e      	ldr	r3, [pc, #184]	@ (8003c20 <HAL_RCC_OscConfig+0x424>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d0f0      	beq.n	8003b54 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d106      	bne.n	8003b88 <HAL_RCC_OscConfig+0x38c>
 8003b7a:	4b26      	ldr	r3, [pc, #152]	@ (8003c14 <HAL_RCC_OscConfig+0x418>)
 8003b7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b7e:	4a25      	ldr	r2, [pc, #148]	@ (8003c14 <HAL_RCC_OscConfig+0x418>)
 8003b80:	f043 0301 	orr.w	r3, r3, #1
 8003b84:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b86:	e01c      	b.n	8003bc2 <HAL_RCC_OscConfig+0x3c6>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	2b05      	cmp	r3, #5
 8003b8e:	d10c      	bne.n	8003baa <HAL_RCC_OscConfig+0x3ae>
 8003b90:	4b20      	ldr	r3, [pc, #128]	@ (8003c14 <HAL_RCC_OscConfig+0x418>)
 8003b92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b94:	4a1f      	ldr	r2, [pc, #124]	@ (8003c14 <HAL_RCC_OscConfig+0x418>)
 8003b96:	f043 0304 	orr.w	r3, r3, #4
 8003b9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b9c:	4b1d      	ldr	r3, [pc, #116]	@ (8003c14 <HAL_RCC_OscConfig+0x418>)
 8003b9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ba0:	4a1c      	ldr	r2, [pc, #112]	@ (8003c14 <HAL_RCC_OscConfig+0x418>)
 8003ba2:	f043 0301 	orr.w	r3, r3, #1
 8003ba6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ba8:	e00b      	b.n	8003bc2 <HAL_RCC_OscConfig+0x3c6>
 8003baa:	4b1a      	ldr	r3, [pc, #104]	@ (8003c14 <HAL_RCC_OscConfig+0x418>)
 8003bac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bae:	4a19      	ldr	r2, [pc, #100]	@ (8003c14 <HAL_RCC_OscConfig+0x418>)
 8003bb0:	f023 0301 	bic.w	r3, r3, #1
 8003bb4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bb6:	4b17      	ldr	r3, [pc, #92]	@ (8003c14 <HAL_RCC_OscConfig+0x418>)
 8003bb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bba:	4a16      	ldr	r2, [pc, #88]	@ (8003c14 <HAL_RCC_OscConfig+0x418>)
 8003bbc:	f023 0304 	bic.w	r3, r3, #4
 8003bc0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d015      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bca:	f7fe fd01 	bl	80025d0 <HAL_GetTick>
 8003bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bd0:	e00a      	b.n	8003be8 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bd2:	f7fe fcfd 	bl	80025d0 <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d901      	bls.n	8003be8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e12b      	b.n	8003e40 <HAL_RCC_OscConfig+0x644>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003be8:	4b0a      	ldr	r3, [pc, #40]	@ (8003c14 <HAL_RCC_OscConfig+0x418>)
 8003bea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d0ee      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x3d6>
 8003bf4:	e01c      	b.n	8003c30 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bf6:	f7fe fceb 	bl	80025d0 <HAL_GetTick>
 8003bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bfc:	e012      	b.n	8003c24 <HAL_RCC_OscConfig+0x428>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bfe:	f7fe fce7 	bl	80025d0 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d909      	bls.n	8003c24 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e115      	b.n	8003e40 <HAL_RCC_OscConfig+0x644>
 8003c14:	40023800 	.word	0x40023800
 8003c18:	42470e80 	.word	0x42470e80
 8003c1c:	0800706c 	.word	0x0800706c
 8003c20:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c24:	4b88      	ldr	r3, [pc, #544]	@ (8003e48 <HAL_RCC_OscConfig+0x64c>)
 8003c26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1e6      	bne.n	8003bfe <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c30:	7dfb      	ldrb	r3, [r7, #23]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d105      	bne.n	8003c42 <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c36:	4b84      	ldr	r3, [pc, #528]	@ (8003e48 <HAL_RCC_OscConfig+0x64c>)
 8003c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c3a:	4a83      	ldr	r2, [pc, #524]	@ (8003e48 <HAL_RCC_OscConfig+0x64c>)
 8003c3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c40:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00c      	beq.n	8003c64 <HAL_RCC_OscConfig+0x468>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d008      	beq.n	8003c64 <HAL_RCC_OscConfig+0x468>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d004      	beq.n	8003c64 <HAL_RCC_OscConfig+0x468>
 8003c5a:	f240 11cd 	movw	r1, #461	@ 0x1cd
 8003c5e:	487b      	ldr	r0, [pc, #492]	@ (8003e4c <HAL_RCC_OscConfig+0x650>)
 8003c60:	f7fe fa24 	bl	80020ac <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f000 80e8 	beq.w	8003e3e <HAL_RCC_OscConfig+0x642>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c6e:	4b76      	ldr	r3, [pc, #472]	@ (8003e48 <HAL_RCC_OscConfig+0x64c>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f003 030c 	and.w	r3, r3, #12
 8003c76:	2b08      	cmp	r3, #8
 8003c78:	f000 80a9 	beq.w	8003dce <HAL_RCC_OscConfig+0x5d2>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	f040 808d 	bne.w	8003da0 <HAL_RCC_OscConfig+0x5a4>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	69db      	ldr	r3, [r3, #28]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d009      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x4a6>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	69db      	ldr	r3, [r3, #28]
 8003c92:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c96:	d004      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x4a6>
 8003c98:	f44f 71eb 	mov.w	r1, #470	@ 0x1d6
 8003c9c:	486b      	ldr	r0, [pc, #428]	@ (8003e4c <HAL_RCC_OscConfig+0x650>)
 8003c9e:	f7fe fa05 	bl	80020ac <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d903      	bls.n	8003cb2 <HAL_RCC_OscConfig+0x4b6>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	2b3f      	cmp	r3, #63	@ 0x3f
 8003cb0:	d904      	bls.n	8003cbc <HAL_RCC_OscConfig+0x4c0>
 8003cb2:	f240 11d7 	movw	r1, #471	@ 0x1d7
 8003cb6:	4865      	ldr	r0, [pc, #404]	@ (8003e4c <HAL_RCC_OscConfig+0x650>)
 8003cb8:	f7fe f9f8 	bl	80020ac <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc0:	2b31      	cmp	r3, #49	@ 0x31
 8003cc2:	d904      	bls.n	8003cce <HAL_RCC_OscConfig+0x4d2>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc8:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 8003ccc:	d904      	bls.n	8003cd8 <HAL_RCC_OscConfig+0x4dc>
 8003cce:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
 8003cd2:	485e      	ldr	r0, [pc, #376]	@ (8003e4c <HAL_RCC_OscConfig+0x650>)
 8003cd4:	f7fe f9ea 	bl	80020ac <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d010      	beq.n	8003d02 <HAL_RCC_OscConfig+0x506>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ce4:	2b04      	cmp	r3, #4
 8003ce6:	d00c      	beq.n	8003d02 <HAL_RCC_OscConfig+0x506>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cec:	2b06      	cmp	r3, #6
 8003cee:	d008      	beq.n	8003d02 <HAL_RCC_OscConfig+0x506>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cf4:	2b08      	cmp	r3, #8
 8003cf6:	d004      	beq.n	8003d02 <HAL_RCC_OscConfig+0x506>
 8003cf8:	f240 11d9 	movw	r1, #473	@ 0x1d9
 8003cfc:	4853      	ldr	r0, [pc, #332]	@ (8003e4c <HAL_RCC_OscConfig+0x650>)
 8003cfe:	f7fe f9d5 	bl	80020ac <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d903      	bls.n	8003d12 <HAL_RCC_OscConfig+0x516>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d0e:	2b0f      	cmp	r3, #15
 8003d10:	d904      	bls.n	8003d1c <HAL_RCC_OscConfig+0x520>
 8003d12:	f44f 71ed 	mov.w	r1, #474	@ 0x1da
 8003d16:	484d      	ldr	r0, [pc, #308]	@ (8003e4c <HAL_RCC_OscConfig+0x650>)
 8003d18:	f7fe f9c8 	bl	80020ac <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d1c:	4b4c      	ldr	r3, [pc, #304]	@ (8003e50 <HAL_RCC_OscConfig+0x654>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d22:	f7fe fc55 	bl	80025d0 <HAL_GetTick>
 8003d26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d28:	e008      	b.n	8003d3c <HAL_RCC_OscConfig+0x540>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d2a:	f7fe fc51 	bl	80025d0 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d901      	bls.n	8003d3c <HAL_RCC_OscConfig+0x540>
          {
            return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e081      	b.n	8003e40 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d3c:	4b42      	ldr	r3, [pc, #264]	@ (8003e48 <HAL_RCC_OscConfig+0x64c>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1f0      	bne.n	8003d2a <HAL_RCC_OscConfig+0x52e>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	69da      	ldr	r2, [r3, #28]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a1b      	ldr	r3, [r3, #32]
 8003d50:	431a      	orrs	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d56:	019b      	lsls	r3, r3, #6
 8003d58:	431a      	orrs	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d5e:	085b      	lsrs	r3, r3, #1
 8003d60:	3b01      	subs	r3, #1
 8003d62:	041b      	lsls	r3, r3, #16
 8003d64:	431a      	orrs	r2, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d6a:	061b      	lsls	r3, r3, #24
 8003d6c:	4936      	ldr	r1, [pc, #216]	@ (8003e48 <HAL_RCC_OscConfig+0x64c>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d72:	4b37      	ldr	r3, [pc, #220]	@ (8003e50 <HAL_RCC_OscConfig+0x654>)
 8003d74:	2201      	movs	r2, #1
 8003d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d78:	f7fe fc2a 	bl	80025d0 <HAL_GetTick>
 8003d7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d7e:	e008      	b.n	8003d92 <HAL_RCC_OscConfig+0x596>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d80:	f7fe fc26 	bl	80025d0 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e056      	b.n	8003e40 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d92:	4b2d      	ldr	r3, [pc, #180]	@ (8003e48 <HAL_RCC_OscConfig+0x64c>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d0f0      	beq.n	8003d80 <HAL_RCC_OscConfig+0x584>
 8003d9e:	e04e      	b.n	8003e3e <HAL_RCC_OscConfig+0x642>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003da0:	4b2b      	ldr	r3, [pc, #172]	@ (8003e50 <HAL_RCC_OscConfig+0x654>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da6:	f7fe fc13 	bl	80025d0 <HAL_GetTick>
 8003daa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dac:	e008      	b.n	8003dc0 <HAL_RCC_OscConfig+0x5c4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dae:	f7fe fc0f 	bl	80025d0 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d901      	bls.n	8003dc0 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e03f      	b.n	8003e40 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dc0:	4b21      	ldr	r3, [pc, #132]	@ (8003e48 <HAL_RCC_OscConfig+0x64c>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1f0      	bne.n	8003dae <HAL_RCC_OscConfig+0x5b2>
 8003dcc:	e037      	b.n	8003e3e <HAL_RCC_OscConfig+0x642>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d101      	bne.n	8003dda <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e032      	b.n	8003e40 <HAL_RCC_OscConfig+0x644>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003dda:	4b1b      	ldr	r3, [pc, #108]	@ (8003e48 <HAL_RCC_OscConfig+0x64c>)
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d028      	beq.n	8003e3a <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d121      	bne.n	8003e3a <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d11a      	bne.n	8003e3a <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e10:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d111      	bne.n	8003e3a <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e20:	085b      	lsrs	r3, r3, #1
 8003e22:	3b01      	subs	r3, #1
 8003e24:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d107      	bne.n	8003e3a <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e34:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d001      	beq.n	8003e3e <HAL_RCC_OscConfig+0x642>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e000      	b.n	8003e40 <HAL_RCC_OscConfig+0x644>
        }
      }
    }
  }
  return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3718      	adds	r7, #24
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	40023800 	.word	0x40023800
 8003e4c:	0800706c 	.word	0x0800706c
 8003e50:	42470060 	.word	0x42470060

08003e54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d101      	bne.n	8003e68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e174      	b.n	8004152 <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d003      	beq.n	8003e78 <HAL_RCC_ClockConfig+0x24>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2b0f      	cmp	r3, #15
 8003e76:	d904      	bls.n	8003e82 <HAL_RCC_ClockConfig+0x2e>
 8003e78:	f240 215a 	movw	r1, #602	@ 0x25a
 8003e7c:	487b      	ldr	r0, [pc, #492]	@ (800406c <HAL_RCC_ClockConfig+0x218>)
 8003e7e:	f7fe f915 	bl	80020ac <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d019      	beq.n	8003ebc <HAL_RCC_ClockConfig+0x68>
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d016      	beq.n	8003ebc <HAL_RCC_ClockConfig+0x68>
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d013      	beq.n	8003ebc <HAL_RCC_ClockConfig+0x68>
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	2b03      	cmp	r3, #3
 8003e98:	d010      	beq.n	8003ebc <HAL_RCC_ClockConfig+0x68>
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	2b04      	cmp	r3, #4
 8003e9e:	d00d      	beq.n	8003ebc <HAL_RCC_ClockConfig+0x68>
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	2b05      	cmp	r3, #5
 8003ea4:	d00a      	beq.n	8003ebc <HAL_RCC_ClockConfig+0x68>
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	2b06      	cmp	r3, #6
 8003eaa:	d007      	beq.n	8003ebc <HAL_RCC_ClockConfig+0x68>
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	2b07      	cmp	r3, #7
 8003eb0:	d004      	beq.n	8003ebc <HAL_RCC_ClockConfig+0x68>
 8003eb2:	f240 215b 	movw	r1, #603	@ 0x25b
 8003eb6:	486d      	ldr	r0, [pc, #436]	@ (800406c <HAL_RCC_ClockConfig+0x218>)
 8003eb8:	f7fe f8f8 	bl	80020ac <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ebc:	4b6c      	ldr	r3, [pc, #432]	@ (8004070 <HAL_RCC_ClockConfig+0x21c>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0307 	and.w	r3, r3, #7
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d90c      	bls.n	8003ee4 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eca:	4b69      	ldr	r3, [pc, #420]	@ (8004070 <HAL_RCC_ClockConfig+0x21c>)
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	b2d2      	uxtb	r2, r2
 8003ed0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ed2:	4b67      	ldr	r3, [pc, #412]	@ (8004070 <HAL_RCC_ClockConfig+0x21c>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0307 	and.w	r3, r3, #7
 8003eda:	683a      	ldr	r2, [r7, #0]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d001      	beq.n	8003ee4 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e136      	b.n	8004152 <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d049      	beq.n	8003f84 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0304 	and.w	r3, r3, #4
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d005      	beq.n	8003f08 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003efc:	4b5d      	ldr	r3, [pc, #372]	@ (8004074 <HAL_RCC_ClockConfig+0x220>)
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	4a5c      	ldr	r2, [pc, #368]	@ (8004074 <HAL_RCC_ClockConfig+0x220>)
 8003f02:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003f06:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0308 	and.w	r3, r3, #8
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d005      	beq.n	8003f20 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f14:	4b57      	ldr	r3, [pc, #348]	@ (8004074 <HAL_RCC_ClockConfig+0x220>)
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	4a56      	ldr	r2, [pc, #344]	@ (8004074 <HAL_RCC_ClockConfig+0x220>)
 8003f1a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003f1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d024      	beq.n	8003f72 <HAL_RCC_ClockConfig+0x11e>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	2b80      	cmp	r3, #128	@ 0x80
 8003f2e:	d020      	beq.n	8003f72 <HAL_RCC_ClockConfig+0x11e>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	2b90      	cmp	r3, #144	@ 0x90
 8003f36:	d01c      	beq.n	8003f72 <HAL_RCC_ClockConfig+0x11e>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	2ba0      	cmp	r3, #160	@ 0xa0
 8003f3e:	d018      	beq.n	8003f72 <HAL_RCC_ClockConfig+0x11e>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	2bb0      	cmp	r3, #176	@ 0xb0
 8003f46:	d014      	beq.n	8003f72 <HAL_RCC_ClockConfig+0x11e>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f4e:	d010      	beq.n	8003f72 <HAL_RCC_ClockConfig+0x11e>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	2bd0      	cmp	r3, #208	@ 0xd0
 8003f56:	d00c      	beq.n	8003f72 <HAL_RCC_ClockConfig+0x11e>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	2be0      	cmp	r3, #224	@ 0xe0
 8003f5e:	d008      	beq.n	8003f72 <HAL_RCC_ClockConfig+0x11e>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	2bf0      	cmp	r3, #240	@ 0xf0
 8003f66:	d004      	beq.n	8003f72 <HAL_RCC_ClockConfig+0x11e>
 8003f68:	f240 217e 	movw	r1, #638	@ 0x27e
 8003f6c:	483f      	ldr	r0, [pc, #252]	@ (800406c <HAL_RCC_ClockConfig+0x218>)
 8003f6e:	f7fe f89d 	bl	80020ac <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f72:	4b40      	ldr	r3, [pc, #256]	@ (8004074 <HAL_RCC_ClockConfig+0x220>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	493d      	ldr	r1, [pc, #244]	@ (8004074 <HAL_RCC_ClockConfig+0x220>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0301 	and.w	r3, r3, #1
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d059      	beq.n	8004044 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d010      	beq.n	8003fba <HAL_RCC_ClockConfig+0x166>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d00c      	beq.n	8003fba <HAL_RCC_ClockConfig+0x166>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d008      	beq.n	8003fba <HAL_RCC_ClockConfig+0x166>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	2b03      	cmp	r3, #3
 8003fae:	d004      	beq.n	8003fba <HAL_RCC_ClockConfig+0x166>
 8003fb0:	f240 2185 	movw	r1, #645	@ 0x285
 8003fb4:	482d      	ldr	r0, [pc, #180]	@ (800406c <HAL_RCC_ClockConfig+0x218>)
 8003fb6:	f7fe f879 	bl	80020ac <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d107      	bne.n	8003fd2 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fc2:	4b2c      	ldr	r3, [pc, #176]	@ (8004074 <HAL_RCC_ClockConfig+0x220>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d119      	bne.n	8004002 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e0bf      	b.n	8004152 <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d003      	beq.n	8003fe2 <HAL_RCC_ClockConfig+0x18e>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fde:	2b03      	cmp	r3, #3
 8003fe0:	d107      	bne.n	8003ff2 <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fe2:	4b24      	ldr	r3, [pc, #144]	@ (8004074 <HAL_RCC_ClockConfig+0x220>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d109      	bne.n	8004002 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e0af      	b.n	8004152 <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ff2:	4b20      	ldr	r3, [pc, #128]	@ (8004074 <HAL_RCC_ClockConfig+0x220>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d101      	bne.n	8004002 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e0a7      	b.n	8004152 <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004002:	4b1c      	ldr	r3, [pc, #112]	@ (8004074 <HAL_RCC_ClockConfig+0x220>)
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f023 0203 	bic.w	r2, r3, #3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	4919      	ldr	r1, [pc, #100]	@ (8004074 <HAL_RCC_ClockConfig+0x220>)
 8004010:	4313      	orrs	r3, r2
 8004012:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004014:	f7fe fadc 	bl	80025d0 <HAL_GetTick>
 8004018:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800401a:	e00a      	b.n	8004032 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800401c:	f7fe fad8 	bl	80025d0 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	f241 3288 	movw	r2, #5000	@ 0x1388
 800402a:	4293      	cmp	r3, r2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e08f      	b.n	8004152 <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004032:	4b10      	ldr	r3, [pc, #64]	@ (8004074 <HAL_RCC_ClockConfig+0x220>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f003 020c 	and.w	r2, r3, #12
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	429a      	cmp	r2, r3
 8004042:	d1eb      	bne.n	800401c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004044:	4b0a      	ldr	r3, [pc, #40]	@ (8004070 <HAL_RCC_ClockConfig+0x21c>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0307 	and.w	r3, r3, #7
 800404c:	683a      	ldr	r2, [r7, #0]
 800404e:	429a      	cmp	r2, r3
 8004050:	d212      	bcs.n	8004078 <HAL_RCC_ClockConfig+0x224>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004052:	4b07      	ldr	r3, [pc, #28]	@ (8004070 <HAL_RCC_ClockConfig+0x21c>)
 8004054:	683a      	ldr	r2, [r7, #0]
 8004056:	b2d2      	uxtb	r2, r2
 8004058:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800405a:	4b05      	ldr	r3, [pc, #20]	@ (8004070 <HAL_RCC_ClockConfig+0x21c>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0307 	and.w	r3, r3, #7
 8004062:	683a      	ldr	r2, [r7, #0]
 8004064:	429a      	cmp	r2, r3
 8004066:	d007      	beq.n	8004078 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e072      	b.n	8004152 <HAL_RCC_ClockConfig+0x2fe>
 800406c:	0800706c 	.word	0x0800706c
 8004070:	40023c00 	.word	0x40023c00
 8004074:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0304 	and.w	r3, r3, #4
 8004080:	2b00      	cmp	r3, #0
 8004082:	d025      	beq.n	80040d0 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d018      	beq.n	80040be <HAL_RCC_ClockConfig+0x26a>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004094:	d013      	beq.n	80040be <HAL_RCC_ClockConfig+0x26a>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800409e:	d00e      	beq.n	80040be <HAL_RCC_ClockConfig+0x26a>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 80040a8:	d009      	beq.n	80040be <HAL_RCC_ClockConfig+0x26a>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 80040b2:	d004      	beq.n	80040be <HAL_RCC_ClockConfig+0x26a>
 80040b4:	f240 21c3 	movw	r1, #707	@ 0x2c3
 80040b8:	4828      	ldr	r0, [pc, #160]	@ (800415c <HAL_RCC_ClockConfig+0x308>)
 80040ba:	f7fd fff7 	bl	80020ac <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040be:	4b28      	ldr	r3, [pc, #160]	@ (8004160 <HAL_RCC_ClockConfig+0x30c>)
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	4925      	ldr	r1, [pc, #148]	@ (8004160 <HAL_RCC_ClockConfig+0x30c>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0308 	and.w	r3, r3, #8
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d026      	beq.n	800412a <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d018      	beq.n	8004116 <HAL_RCC_ClockConfig+0x2c2>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040ec:	d013      	beq.n	8004116 <HAL_RCC_ClockConfig+0x2c2>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80040f6:	d00e      	beq.n	8004116 <HAL_RCC_ClockConfig+0x2c2>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8004100:	d009      	beq.n	8004116 <HAL_RCC_ClockConfig+0x2c2>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 800410a:	d004      	beq.n	8004116 <HAL_RCC_ClockConfig+0x2c2>
 800410c:	f240 21ca 	movw	r1, #714	@ 0x2ca
 8004110:	4812      	ldr	r0, [pc, #72]	@ (800415c <HAL_RCC_ClockConfig+0x308>)
 8004112:	f7fd ffcb 	bl	80020ac <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004116:	4b12      	ldr	r3, [pc, #72]	@ (8004160 <HAL_RCC_ClockConfig+0x30c>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	00db      	lsls	r3, r3, #3
 8004124:	490e      	ldr	r1, [pc, #56]	@ (8004160 <HAL_RCC_ClockConfig+0x30c>)
 8004126:	4313      	orrs	r3, r2
 8004128:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800412a:	f000 f821 	bl	8004170 <HAL_RCC_GetSysClockFreq>
 800412e:	4602      	mov	r2, r0
 8004130:	4b0b      	ldr	r3, [pc, #44]	@ (8004160 <HAL_RCC_ClockConfig+0x30c>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	091b      	lsrs	r3, r3, #4
 8004136:	f003 030f 	and.w	r3, r3, #15
 800413a:	490a      	ldr	r1, [pc, #40]	@ (8004164 <HAL_RCC_ClockConfig+0x310>)
 800413c:	5ccb      	ldrb	r3, [r1, r3]
 800413e:	fa22 f303 	lsr.w	r3, r2, r3
 8004142:	4a09      	ldr	r2, [pc, #36]	@ (8004168 <HAL_RCC_ClockConfig+0x314>)
 8004144:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004146:	4b09      	ldr	r3, [pc, #36]	@ (800416c <HAL_RCC_ClockConfig+0x318>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4618      	mov	r0, r3
 800414c:	f7fe f860 	bl	8002210 <HAL_InitTick>

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	0800706c 	.word	0x0800706c
 8004160:	40023800 	.word	0x40023800
 8004164:	0800723c 	.word	0x0800723c
 8004168:	20010010 	.word	0x20010010
 800416c:	20010014 	.word	0x20010014

08004170 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004170:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004174:	b094      	sub	sp, #80	@ 0x50
 8004176:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004178:	2300      	movs	r3, #0
 800417a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800417c:	2300      	movs	r3, #0
 800417e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004180:	2300      	movs	r3, #0
 8004182:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004184:	2300      	movs	r3, #0
 8004186:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004188:	4b79      	ldr	r3, [pc, #484]	@ (8004370 <HAL_RCC_GetSysClockFreq+0x200>)
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f003 030c 	and.w	r3, r3, #12
 8004190:	2b08      	cmp	r3, #8
 8004192:	d00d      	beq.n	80041b0 <HAL_RCC_GetSysClockFreq+0x40>
 8004194:	2b08      	cmp	r3, #8
 8004196:	f200 80e1 	bhi.w	800435c <HAL_RCC_GetSysClockFreq+0x1ec>
 800419a:	2b00      	cmp	r3, #0
 800419c:	d002      	beq.n	80041a4 <HAL_RCC_GetSysClockFreq+0x34>
 800419e:	2b04      	cmp	r3, #4
 80041a0:	d003      	beq.n	80041aa <HAL_RCC_GetSysClockFreq+0x3a>
 80041a2:	e0db      	b.n	800435c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041a4:	4b73      	ldr	r3, [pc, #460]	@ (8004374 <HAL_RCC_GetSysClockFreq+0x204>)
 80041a6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041a8:	e0db      	b.n	8004362 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041aa:	4b73      	ldr	r3, [pc, #460]	@ (8004378 <HAL_RCC_GetSysClockFreq+0x208>)
 80041ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041ae:	e0d8      	b.n	8004362 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041b0:	4b6f      	ldr	r3, [pc, #444]	@ (8004370 <HAL_RCC_GetSysClockFreq+0x200>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041b8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041ba:	4b6d      	ldr	r3, [pc, #436]	@ (8004370 <HAL_RCC_GetSysClockFreq+0x200>)
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d063      	beq.n	800428e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041c6:	4b6a      	ldr	r3, [pc, #424]	@ (8004370 <HAL_RCC_GetSysClockFreq+0x200>)
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	099b      	lsrs	r3, r3, #6
 80041cc:	2200      	movs	r2, #0
 80041ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80041d0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80041d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80041da:	2300      	movs	r3, #0
 80041dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80041de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80041e2:	4622      	mov	r2, r4
 80041e4:	462b      	mov	r3, r5
 80041e6:	f04f 0000 	mov.w	r0, #0
 80041ea:	f04f 0100 	mov.w	r1, #0
 80041ee:	0159      	lsls	r1, r3, #5
 80041f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041f4:	0150      	lsls	r0, r2, #5
 80041f6:	4602      	mov	r2, r0
 80041f8:	460b      	mov	r3, r1
 80041fa:	4621      	mov	r1, r4
 80041fc:	1a51      	subs	r1, r2, r1
 80041fe:	6139      	str	r1, [r7, #16]
 8004200:	4629      	mov	r1, r5
 8004202:	eb63 0301 	sbc.w	r3, r3, r1
 8004206:	617b      	str	r3, [r7, #20]
 8004208:	f04f 0200 	mov.w	r2, #0
 800420c:	f04f 0300 	mov.w	r3, #0
 8004210:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004214:	4659      	mov	r1, fp
 8004216:	018b      	lsls	r3, r1, #6
 8004218:	4651      	mov	r1, sl
 800421a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800421e:	4651      	mov	r1, sl
 8004220:	018a      	lsls	r2, r1, #6
 8004222:	4651      	mov	r1, sl
 8004224:	ebb2 0801 	subs.w	r8, r2, r1
 8004228:	4659      	mov	r1, fp
 800422a:	eb63 0901 	sbc.w	r9, r3, r1
 800422e:	f04f 0200 	mov.w	r2, #0
 8004232:	f04f 0300 	mov.w	r3, #0
 8004236:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800423a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800423e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004242:	4690      	mov	r8, r2
 8004244:	4699      	mov	r9, r3
 8004246:	4623      	mov	r3, r4
 8004248:	eb18 0303 	adds.w	r3, r8, r3
 800424c:	60bb      	str	r3, [r7, #8]
 800424e:	462b      	mov	r3, r5
 8004250:	eb49 0303 	adc.w	r3, r9, r3
 8004254:	60fb      	str	r3, [r7, #12]
 8004256:	f04f 0200 	mov.w	r2, #0
 800425a:	f04f 0300 	mov.w	r3, #0
 800425e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004262:	4629      	mov	r1, r5
 8004264:	024b      	lsls	r3, r1, #9
 8004266:	4621      	mov	r1, r4
 8004268:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800426c:	4621      	mov	r1, r4
 800426e:	024a      	lsls	r2, r1, #9
 8004270:	4610      	mov	r0, r2
 8004272:	4619      	mov	r1, r3
 8004274:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004276:	2200      	movs	r2, #0
 8004278:	62bb      	str	r3, [r7, #40]	@ 0x28
 800427a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800427c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004280:	f7fb ffaa 	bl	80001d8 <__aeabi_uldivmod>
 8004284:	4602      	mov	r2, r0
 8004286:	460b      	mov	r3, r1
 8004288:	4613      	mov	r3, r2
 800428a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800428c:	e058      	b.n	8004340 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800428e:	4b38      	ldr	r3, [pc, #224]	@ (8004370 <HAL_RCC_GetSysClockFreq+0x200>)
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	099b      	lsrs	r3, r3, #6
 8004294:	2200      	movs	r2, #0
 8004296:	4618      	mov	r0, r3
 8004298:	4611      	mov	r1, r2
 800429a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800429e:	623b      	str	r3, [r7, #32]
 80042a0:	2300      	movs	r3, #0
 80042a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80042a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80042a8:	4642      	mov	r2, r8
 80042aa:	464b      	mov	r3, r9
 80042ac:	f04f 0000 	mov.w	r0, #0
 80042b0:	f04f 0100 	mov.w	r1, #0
 80042b4:	0159      	lsls	r1, r3, #5
 80042b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042ba:	0150      	lsls	r0, r2, #5
 80042bc:	4602      	mov	r2, r0
 80042be:	460b      	mov	r3, r1
 80042c0:	4641      	mov	r1, r8
 80042c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80042c6:	4649      	mov	r1, r9
 80042c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80042cc:	f04f 0200 	mov.w	r2, #0
 80042d0:	f04f 0300 	mov.w	r3, #0
 80042d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80042d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80042dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80042e0:	ebb2 040a 	subs.w	r4, r2, sl
 80042e4:	eb63 050b 	sbc.w	r5, r3, fp
 80042e8:	f04f 0200 	mov.w	r2, #0
 80042ec:	f04f 0300 	mov.w	r3, #0
 80042f0:	00eb      	lsls	r3, r5, #3
 80042f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042f6:	00e2      	lsls	r2, r4, #3
 80042f8:	4614      	mov	r4, r2
 80042fa:	461d      	mov	r5, r3
 80042fc:	4643      	mov	r3, r8
 80042fe:	18e3      	adds	r3, r4, r3
 8004300:	603b      	str	r3, [r7, #0]
 8004302:	464b      	mov	r3, r9
 8004304:	eb45 0303 	adc.w	r3, r5, r3
 8004308:	607b      	str	r3, [r7, #4]
 800430a:	f04f 0200 	mov.w	r2, #0
 800430e:	f04f 0300 	mov.w	r3, #0
 8004312:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004316:	4629      	mov	r1, r5
 8004318:	028b      	lsls	r3, r1, #10
 800431a:	4621      	mov	r1, r4
 800431c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004320:	4621      	mov	r1, r4
 8004322:	028a      	lsls	r2, r1, #10
 8004324:	4610      	mov	r0, r2
 8004326:	4619      	mov	r1, r3
 8004328:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800432a:	2200      	movs	r2, #0
 800432c:	61bb      	str	r3, [r7, #24]
 800432e:	61fa      	str	r2, [r7, #28]
 8004330:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004334:	f7fb ff50 	bl	80001d8 <__aeabi_uldivmod>
 8004338:	4602      	mov	r2, r0
 800433a:	460b      	mov	r3, r1
 800433c:	4613      	mov	r3, r2
 800433e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004340:	4b0b      	ldr	r3, [pc, #44]	@ (8004370 <HAL_RCC_GetSysClockFreq+0x200>)
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	0c1b      	lsrs	r3, r3, #16
 8004346:	f003 0303 	and.w	r3, r3, #3
 800434a:	3301      	adds	r3, #1
 800434c:	005b      	lsls	r3, r3, #1
 800434e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004350:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004352:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004354:	fbb2 f3f3 	udiv	r3, r2, r3
 8004358:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800435a:	e002      	b.n	8004362 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800435c:	4b05      	ldr	r3, [pc, #20]	@ (8004374 <HAL_RCC_GetSysClockFreq+0x204>)
 800435e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004360:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004362:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004364:	4618      	mov	r0, r3
 8004366:	3750      	adds	r7, #80	@ 0x50
 8004368:	46bd      	mov	sp, r7
 800436a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800436e:	bf00      	nop
 8004370:	40023800 	.word	0x40023800
 8004374:	00f42400 	.word	0x00f42400
 8004378:	007a1200 	.word	0x007a1200

0800437c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800437c:	b480      	push	{r7}
 800437e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004380:	4b03      	ldr	r3, [pc, #12]	@ (8004390 <HAL_RCC_GetHCLKFreq+0x14>)
 8004382:	681b      	ldr	r3, [r3, #0]
}
 8004384:	4618      	mov	r0, r3
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	20010010 	.word	0x20010010

08004394 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004398:	f7ff fff0 	bl	800437c <HAL_RCC_GetHCLKFreq>
 800439c:	4602      	mov	r2, r0
 800439e:	4b05      	ldr	r3, [pc, #20]	@ (80043b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	0a9b      	lsrs	r3, r3, #10
 80043a4:	f003 0307 	and.w	r3, r3, #7
 80043a8:	4903      	ldr	r1, [pc, #12]	@ (80043b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043aa:	5ccb      	ldrb	r3, [r1, r3]
 80043ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	40023800 	.word	0x40023800
 80043b8:	0800724c 	.word	0x0800724c

080043bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80043c0:	f7ff ffdc 	bl	800437c <HAL_RCC_GetHCLKFreq>
 80043c4:	4602      	mov	r2, r0
 80043c6:	4b05      	ldr	r3, [pc, #20]	@ (80043dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	0b5b      	lsrs	r3, r3, #13
 80043cc:	f003 0307 	and.w	r3, r3, #7
 80043d0:	4903      	ldr	r1, [pc, #12]	@ (80043e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043d2:	5ccb      	ldrb	r3, [r1, r3]
 80043d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043d8:	4618      	mov	r0, r3
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	40023800 	.word	0x40023800
 80043e0:	0800724c 	.word	0x0800724c

080043e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	220f      	movs	r2, #15
 80043f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80043f4:	4b12      	ldr	r3, [pc, #72]	@ (8004440 <HAL_RCC_GetClockConfig+0x5c>)
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f003 0203 	and.w	r2, r3, #3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004400:	4b0f      	ldr	r3, [pc, #60]	@ (8004440 <HAL_RCC_GetClockConfig+0x5c>)
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800440c:	4b0c      	ldr	r3, [pc, #48]	@ (8004440 <HAL_RCC_GetClockConfig+0x5c>)
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004418:	4b09      	ldr	r3, [pc, #36]	@ (8004440 <HAL_RCC_GetClockConfig+0x5c>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	08db      	lsrs	r3, r3, #3
 800441e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004426:	4b07      	ldr	r3, [pc, #28]	@ (8004444 <HAL_RCC_GetClockConfig+0x60>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0207 	and.w	r2, r3, #7
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	601a      	str	r2, [r3, #0]
}
 8004432:	bf00      	nop
 8004434:	370c      	adds	r7, #12
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	40023800 	.word	0x40023800
 8004444:	40023c00 	.word	0x40023c00

08004448 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d101      	bne.n	800445a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e1ac      	b.n	80047b4 <HAL_SPI_Init+0x36c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a75      	ldr	r2, [pc, #468]	@ (8004634 <HAL_SPI_Init+0x1ec>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d018      	beq.n	8004496 <HAL_SPI_Init+0x4e>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a73      	ldr	r2, [pc, #460]	@ (8004638 <HAL_SPI_Init+0x1f0>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d013      	beq.n	8004496 <HAL_SPI_Init+0x4e>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a72      	ldr	r2, [pc, #456]	@ (800463c <HAL_SPI_Init+0x1f4>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d00e      	beq.n	8004496 <HAL_SPI_Init+0x4e>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a70      	ldr	r2, [pc, #448]	@ (8004640 <HAL_SPI_Init+0x1f8>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d009      	beq.n	8004496 <HAL_SPI_Init+0x4e>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a6f      	ldr	r2, [pc, #444]	@ (8004644 <HAL_SPI_Init+0x1fc>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d004      	beq.n	8004496 <HAL_SPI_Init+0x4e>
 800448c:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8004490:	486d      	ldr	r0, [pc, #436]	@ (8004648 <HAL_SPI_Init+0x200>)
 8004492:	f7fd fe0b 	bl	80020ac <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d009      	beq.n	80044b2 <HAL_SPI_Init+0x6a>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044a6:	d004      	beq.n	80044b2 <HAL_SPI_Init+0x6a>
 80044a8:	f240 1141 	movw	r1, #321	@ 0x141
 80044ac:	4866      	ldr	r0, [pc, #408]	@ (8004648 <HAL_SPI_Init+0x200>)
 80044ae:	f7fd fdfd 	bl	80020ac <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00e      	beq.n	80044d8 <HAL_SPI_Init+0x90>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044c2:	d009      	beq.n	80044d8 <HAL_SPI_Init+0x90>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044cc:	d004      	beq.n	80044d8 <HAL_SPI_Init+0x90>
 80044ce:	f44f 71a1 	mov.w	r1, #322	@ 0x142
 80044d2:	485d      	ldr	r0, [pc, #372]	@ (8004648 <HAL_SPI_Init+0x200>)
 80044d4:	f7fd fdea 	bl	80020ac <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044e0:	d008      	beq.n	80044f4 <HAL_SPI_Init+0xac>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d004      	beq.n	80044f4 <HAL_SPI_Init+0xac>
 80044ea:	f240 1143 	movw	r1, #323	@ 0x143
 80044ee:	4856      	ldr	r0, [pc, #344]	@ (8004648 <HAL_SPI_Init+0x200>)
 80044f0:	f7fd fddc 	bl	80020ac <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044fc:	d00d      	beq.n	800451a <HAL_SPI_Init+0xd2>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d009      	beq.n	800451a <HAL_SPI_Init+0xd2>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800450e:	d004      	beq.n	800451a <HAL_SPI_Init+0xd2>
 8004510:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 8004514:	484c      	ldr	r0, [pc, #304]	@ (8004648 <HAL_SPI_Init+0x200>)
 8004516:	f7fd fdc9 	bl	80020ac <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	69db      	ldr	r3, [r3, #28]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d020      	beq.n	8004564 <HAL_SPI_Init+0x11c>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	69db      	ldr	r3, [r3, #28]
 8004526:	2b08      	cmp	r3, #8
 8004528:	d01c      	beq.n	8004564 <HAL_SPI_Init+0x11c>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	69db      	ldr	r3, [r3, #28]
 800452e:	2b10      	cmp	r3, #16
 8004530:	d018      	beq.n	8004564 <HAL_SPI_Init+0x11c>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	2b18      	cmp	r3, #24
 8004538:	d014      	beq.n	8004564 <HAL_SPI_Init+0x11c>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	69db      	ldr	r3, [r3, #28]
 800453e:	2b20      	cmp	r3, #32
 8004540:	d010      	beq.n	8004564 <HAL_SPI_Init+0x11c>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	69db      	ldr	r3, [r3, #28]
 8004546:	2b28      	cmp	r3, #40	@ 0x28
 8004548:	d00c      	beq.n	8004564 <HAL_SPI_Init+0x11c>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	69db      	ldr	r3, [r3, #28]
 800454e:	2b30      	cmp	r3, #48	@ 0x30
 8004550:	d008      	beq.n	8004564 <HAL_SPI_Init+0x11c>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	69db      	ldr	r3, [r3, #28]
 8004556:	2b38      	cmp	r3, #56	@ 0x38
 8004558:	d004      	beq.n	8004564 <HAL_SPI_Init+0x11c>
 800455a:	f240 1145 	movw	r1, #325	@ 0x145
 800455e:	483a      	ldr	r0, [pc, #232]	@ (8004648 <HAL_SPI_Init+0x200>)
 8004560:	f7fd fda4 	bl	80020ac <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a1b      	ldr	r3, [r3, #32]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d008      	beq.n	800457e <HAL_SPI_Init+0x136>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	2b80      	cmp	r3, #128	@ 0x80
 8004572:	d004      	beq.n	800457e <HAL_SPI_Init+0x136>
 8004574:	f44f 71a3 	mov.w	r1, #326	@ 0x146
 8004578:	4833      	ldr	r0, [pc, #204]	@ (8004648 <HAL_SPI_Init+0x200>)
 800457a:	f7fd fd97 	bl	80020ac <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004582:	2b00      	cmp	r3, #0
 8004584:	d008      	beq.n	8004598 <HAL_SPI_Init+0x150>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800458a:	2b10      	cmp	r3, #16
 800458c:	d004      	beq.n	8004598 <HAL_SPI_Init+0x150>
 800458e:	f240 1147 	movw	r1, #327	@ 0x147
 8004592:	482d      	ldr	r0, [pc, #180]	@ (8004648 <HAL_SPI_Init+0x200>)
 8004594:	f7fd fd8a 	bl	80020ac <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800459c:	2b00      	cmp	r3, #0
 800459e:	d155      	bne.n	800464c <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d008      	beq.n	80045ba <HAL_SPI_Init+0x172>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d004      	beq.n	80045ba <HAL_SPI_Init+0x172>
 80045b0:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 80045b4:	4824      	ldr	r0, [pc, #144]	@ (8004648 <HAL_SPI_Init+0x200>)
 80045b6:	f7fd fd79 	bl	80020ac <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d008      	beq.n	80045d4 <HAL_SPI_Init+0x18c>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d004      	beq.n	80045d4 <HAL_SPI_Init+0x18c>
 80045ca:	f240 114b 	movw	r1, #331	@ 0x14b
 80045ce:	481e      	ldr	r0, [pc, #120]	@ (8004648 <HAL_SPI_Init+0x200>)
 80045d0:	f7fd fd6c 	bl	80020ac <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045dc:	d125      	bne.n	800462a <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	69db      	ldr	r3, [r3, #28]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d05d      	beq.n	80046a2 <HAL_SPI_Init+0x25a>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	69db      	ldr	r3, [r3, #28]
 80045ea:	2b08      	cmp	r3, #8
 80045ec:	d059      	beq.n	80046a2 <HAL_SPI_Init+0x25a>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	69db      	ldr	r3, [r3, #28]
 80045f2:	2b10      	cmp	r3, #16
 80045f4:	d055      	beq.n	80046a2 <HAL_SPI_Init+0x25a>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	69db      	ldr	r3, [r3, #28]
 80045fa:	2b18      	cmp	r3, #24
 80045fc:	d051      	beq.n	80046a2 <HAL_SPI_Init+0x25a>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	69db      	ldr	r3, [r3, #28]
 8004602:	2b20      	cmp	r3, #32
 8004604:	d04d      	beq.n	80046a2 <HAL_SPI_Init+0x25a>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	69db      	ldr	r3, [r3, #28]
 800460a:	2b28      	cmp	r3, #40	@ 0x28
 800460c:	d049      	beq.n	80046a2 <HAL_SPI_Init+0x25a>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	69db      	ldr	r3, [r3, #28]
 8004612:	2b30      	cmp	r3, #48	@ 0x30
 8004614:	d045      	beq.n	80046a2 <HAL_SPI_Init+0x25a>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	69db      	ldr	r3, [r3, #28]
 800461a:	2b38      	cmp	r3, #56	@ 0x38
 800461c:	d041      	beq.n	80046a2 <HAL_SPI_Init+0x25a>
 800461e:	f240 114f 	movw	r1, #335	@ 0x14f
 8004622:	4809      	ldr	r0, [pc, #36]	@ (8004648 <HAL_SPI_Init+0x200>)
 8004624:	f7fd fd42 	bl	80020ac <assert_failed>
 8004628:	e03b      	b.n	80046a2 <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	61da      	str	r2, [r3, #28]
 8004630:	e037      	b.n	80046a2 <HAL_SPI_Init+0x25a>
 8004632:	bf00      	nop
 8004634:	40013000 	.word	0x40013000
 8004638:	40003800 	.word	0x40003800
 800463c:	40003c00 	.word	0x40003c00
 8004640:	40013400 	.word	0x40013400
 8004644:	40015000 	.word	0x40015000
 8004648:	080070e0 	.word	0x080070e0
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	69db      	ldr	r3, [r3, #28]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d020      	beq.n	8004696 <HAL_SPI_Init+0x24e>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	69db      	ldr	r3, [r3, #28]
 8004658:	2b08      	cmp	r3, #8
 800465a:	d01c      	beq.n	8004696 <HAL_SPI_Init+0x24e>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	69db      	ldr	r3, [r3, #28]
 8004660:	2b10      	cmp	r3, #16
 8004662:	d018      	beq.n	8004696 <HAL_SPI_Init+0x24e>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	69db      	ldr	r3, [r3, #28]
 8004668:	2b18      	cmp	r3, #24
 800466a:	d014      	beq.n	8004696 <HAL_SPI_Init+0x24e>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	69db      	ldr	r3, [r3, #28]
 8004670:	2b20      	cmp	r3, #32
 8004672:	d010      	beq.n	8004696 <HAL_SPI_Init+0x24e>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	69db      	ldr	r3, [r3, #28]
 8004678:	2b28      	cmp	r3, #40	@ 0x28
 800467a:	d00c      	beq.n	8004696 <HAL_SPI_Init+0x24e>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	69db      	ldr	r3, [r3, #28]
 8004680:	2b30      	cmp	r3, #48	@ 0x30
 8004682:	d008      	beq.n	8004696 <HAL_SPI_Init+0x24e>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	69db      	ldr	r3, [r3, #28]
 8004688:	2b38      	cmp	r3, #56	@ 0x38
 800468a:	d004      	beq.n	8004696 <HAL_SPI_Init+0x24e>
 800468c:	f240 1159 	movw	r1, #345	@ 0x159
 8004690:	484a      	ldr	r0, [pc, #296]	@ (80047bc <HAL_SPI_Init+0x374>)
 8004692:	f7fd fd0b 	bl	80020ac <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d126      	bne.n	8004702 <HAL_SPI_Init+0x2ba>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a40      	ldr	r2, [pc, #256]	@ (80047c0 <HAL_SPI_Init+0x378>)
 80046c0:	659a      	str	r2, [r3, #88]	@ 0x58
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a3f      	ldr	r2, [pc, #252]	@ (80047c4 <HAL_SPI_Init+0x37c>)
 80046c6:	65da      	str	r2, [r3, #92]	@ 0x5c
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a3f      	ldr	r2, [pc, #252]	@ (80047c8 <HAL_SPI_Init+0x380>)
 80046cc:	661a      	str	r2, [r3, #96]	@ 0x60
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a3e      	ldr	r2, [pc, #248]	@ (80047cc <HAL_SPI_Init+0x384>)
 80046d2:	665a      	str	r2, [r3, #100]	@ 0x64
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a3e      	ldr	r2, [pc, #248]	@ (80047d0 <HAL_SPI_Init+0x388>)
 80046d8:	669a      	str	r2, [r3, #104]	@ 0x68
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a3d      	ldr	r2, [pc, #244]	@ (80047d4 <HAL_SPI_Init+0x38c>)
 80046de:	66da      	str	r2, [r3, #108]	@ 0x6c
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a3d      	ldr	r2, [pc, #244]	@ (80047d8 <HAL_SPI_Init+0x390>)
 80046e4:	671a      	str	r2, [r3, #112]	@ 0x70
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a3c      	ldr	r2, [pc, #240]	@ (80047dc <HAL_SPI_Init+0x394>)
 80046ea:	675a      	str	r2, [r3, #116]	@ 0x74

    if (hspi->MspInitCallback == NULL)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d102      	bne.n	80046fa <HAL_SPI_Init+0x2b2>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a3a      	ldr	r2, [pc, #232]	@ (80047e0 <HAL_SPI_Init+0x398>)
 80046f8:	679a      	str	r2, [r3, #120]	@ 0x78
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2202      	movs	r2, #2
 8004706:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004718:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800472a:	431a      	orrs	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004734:	431a      	orrs	r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	431a      	orrs	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	695b      	ldr	r3, [r3, #20]
 8004744:	f003 0301 	and.w	r3, r3, #1
 8004748:	431a      	orrs	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004752:	431a      	orrs	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	69db      	ldr	r3, [r3, #28]
 8004758:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800475c:	431a      	orrs	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004766:	ea42 0103 	orr.w	r1, r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800476e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	430a      	orrs	r2, r1
 8004778:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	0c1b      	lsrs	r3, r3, #16
 8004780:	f003 0104 	and.w	r1, r3, #4
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004788:	f003 0210 	and.w	r2, r3, #16
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	430a      	orrs	r2, r1
 8004792:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	69da      	ldr	r2, [r3, #28]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047a2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3708      	adds	r7, #8
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	080070e0 	.word	0x080070e0
 80047c0:	08005219 	.word	0x08005219
 80047c4:	0800522d 	.word	0x0800522d
 80047c8:	08005241 	.word	0x08005241
 80047cc:	08005255 	.word	0x08005255
 80047d0:	08005269 	.word	0x08005269
 80047d4:	0800527d 	.word	0x0800527d
 80047d8:	08005291 	.word	0x08005291
 80047dc:	080052a5 	.word	0x080052a5
 80047e0:	08002131 	.word	0x08002131

080047e4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b088      	sub	sp, #32
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	603b      	str	r3, [r7, #0]
 80047f0:	4613      	mov	r3, r2
 80047f2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d009      	beq.n	8004810 <HAL_SPI_Transmit+0x2c>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004804:	d004      	beq.n	8004810 <HAL_SPI_Transmit+0x2c>
 8004806:	f240 3107 	movw	r1, #775	@ 0x307
 800480a:	4886      	ldr	r0, [pc, #536]	@ (8004a24 <HAL_SPI_Transmit+0x240>)
 800480c:	f7fd fc4e 	bl	80020ac <assert_failed>

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004810:	f7fd fede 	bl	80025d0 <HAL_GetTick>
 8004814:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004816:	88fb      	ldrh	r3, [r7, #6]
 8004818:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004820:	b2db      	uxtb	r3, r3
 8004822:	2b01      	cmp	r3, #1
 8004824:	d001      	beq.n	800482a <HAL_SPI_Transmit+0x46>
  {
    return HAL_BUSY;
 8004826:	2302      	movs	r3, #2
 8004828:	e12c      	b.n	8004a84 <HAL_SPI_Transmit+0x2a0>
  }

  if ((pData == NULL) || (Size == 0U))
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d002      	beq.n	8004836 <HAL_SPI_Transmit+0x52>
 8004830:	88fb      	ldrh	r3, [r7, #6]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d101      	bne.n	800483a <HAL_SPI_Transmit+0x56>
  {
    return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e124      	b.n	8004a84 <HAL_SPI_Transmit+0x2a0>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004840:	2b01      	cmp	r3, #1
 8004842:	d101      	bne.n	8004848 <HAL_SPI_Transmit+0x64>
 8004844:	2302      	movs	r3, #2
 8004846:	e11d      	b.n	8004a84 <HAL_SPI_Transmit+0x2a0>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2203      	movs	r2, #3
 8004854:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	68ba      	ldr	r2, [r7, #8]
 8004862:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	88fa      	ldrh	r2, [r7, #6]
 8004868:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	88fa      	ldrh	r2, [r7, #6]
 800486e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004896:	d10f      	bne.n	80048b8 <HAL_SPI_Transmit+0xd4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048a6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80048b6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048c2:	2b40      	cmp	r3, #64	@ 0x40
 80048c4:	d007      	beq.n	80048d6 <HAL_SPI_Transmit+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80048d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048de:	d152      	bne.n	8004986 <HAL_SPI_Transmit+0x1a2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d002      	beq.n	80048ee <HAL_SPI_Transmit+0x10a>
 80048e8:	8b7b      	ldrh	r3, [r7, #26]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d145      	bne.n	800497a <HAL_SPI_Transmit+0x196>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048f2:	881a      	ldrh	r2, [r3, #0]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048fe:	1c9a      	adds	r2, r3, #2
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004908:	b29b      	uxth	r3, r3
 800490a:	3b01      	subs	r3, #1
 800490c:	b29a      	uxth	r2, r3
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004912:	e032      	b.n	800497a <HAL_SPI_Transmit+0x196>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f003 0302 	and.w	r3, r3, #2
 800491e:	2b02      	cmp	r3, #2
 8004920:	d112      	bne.n	8004948 <HAL_SPI_Transmit+0x164>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004926:	881a      	ldrh	r2, [r3, #0]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004932:	1c9a      	adds	r2, r3, #2
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800493c:	b29b      	uxth	r3, r3
 800493e:	3b01      	subs	r3, #1
 8004940:	b29a      	uxth	r2, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004946:	e018      	b.n	800497a <HAL_SPI_Transmit+0x196>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004948:	f7fd fe42 	bl	80025d0 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	429a      	cmp	r2, r3
 8004956:	d803      	bhi.n	8004960 <HAL_SPI_Transmit+0x17c>
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800495e:	d102      	bne.n	8004966 <HAL_SPI_Transmit+0x182>
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d109      	bne.n	800497a <HAL_SPI_Transmit+0x196>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e084      	b.n	8004a84 <HAL_SPI_Transmit+0x2a0>
    while (hspi->TxXferCount > 0U)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800497e:	b29b      	uxth	r3, r3
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1c7      	bne.n	8004914 <HAL_SPI_Transmit+0x130>
 8004984:	e055      	b.n	8004a32 <HAL_SPI_Transmit+0x24e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d002      	beq.n	8004994 <HAL_SPI_Transmit+0x1b0>
 800498e:	8b7b      	ldrh	r3, [r7, #26]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d149      	bne.n	8004a28 <HAL_SPI_Transmit+0x244>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	330c      	adds	r3, #12
 800499e:	7812      	ldrb	r2, [r2, #0]
 80049a0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049a6:	1c5a      	adds	r2, r3, #1
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	3b01      	subs	r3, #1
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80049ba:	e035      	b.n	8004a28 <HAL_SPI_Transmit+0x244>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f003 0302 	and.w	r3, r3, #2
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d113      	bne.n	80049f2 <HAL_SPI_Transmit+0x20e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	330c      	adds	r3, #12
 80049d4:	7812      	ldrb	r2, [r2, #0]
 80049d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049dc:	1c5a      	adds	r2, r3, #1
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	3b01      	subs	r3, #1
 80049ea:	b29a      	uxth	r2, r3
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	86da      	strh	r2, [r3, #54]	@ 0x36
 80049f0:	e01a      	b.n	8004a28 <HAL_SPI_Transmit+0x244>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049f2:	f7fd fded 	bl	80025d0 <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	683a      	ldr	r2, [r7, #0]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d803      	bhi.n	8004a0a <HAL_SPI_Transmit+0x226>
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a08:	d102      	bne.n	8004a10 <HAL_SPI_Transmit+0x22c>
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d10b      	bne.n	8004a28 <HAL_SPI_Transmit+0x244>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e02f      	b.n	8004a84 <HAL_SPI_Transmit+0x2a0>
 8004a24:	080070e0 	.word	0x080070e0
    while (hspi->TxXferCount > 0U)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1c4      	bne.n	80049bc <HAL_SPI_Transmit+0x1d8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a32:	69fa      	ldr	r2, [r7, #28]
 8004a34:	6839      	ldr	r1, [r7, #0]
 8004a36:	68f8      	ldr	r0, [r7, #12]
 8004a38:	f000 fd50 	bl	80054dc <SPI_EndRxTxTransaction>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d002      	beq.n	8004a48 <HAL_SPI_Transmit+0x264>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2220      	movs	r2, #32
 8004a46:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d10a      	bne.n	8004a66 <HAL_SPI_Transmit+0x282>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a50:	2300      	movs	r3, #0
 8004a52:	617b      	str	r3, [r7, #20]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	617b      	str	r3, [r7, #20]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	617b      	str	r3, [r7, #20]
 8004a64:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d001      	beq.n	8004a82 <HAL_SPI_Transmit+0x29e>
  {
    return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e000      	b.n	8004a84 <HAL_SPI_Transmit+0x2a0>
  }
  else
  {
    return HAL_OK;
 8004a82:	2300      	movs	r3, #0
  }
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3720      	adds	r7, #32
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b088      	sub	sp, #32
 8004a90:	af02      	add	r7, sp, #8
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	603b      	str	r3, [r7, #0]
 8004a98:	4613      	mov	r3, r2
 8004a9a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d001      	beq.n	8004aac <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	e104      	b.n	8004cb6 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ab4:	d112      	bne.n	8004adc <HAL_SPI_Receive+0x50>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d10e      	bne.n	8004adc <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2204      	movs	r2, #4
 8004ac2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004ac6:	88fa      	ldrh	r2, [r7, #6]
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	9300      	str	r3, [sp, #0]
 8004acc:	4613      	mov	r3, r2
 8004ace:	68ba      	ldr	r2, [r7, #8]
 8004ad0:	68b9      	ldr	r1, [r7, #8]
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f000 f8f4 	bl	8004cc0 <HAL_SPI_TransmitReceive>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	e0ec      	b.n	8004cb6 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004adc:	f7fd fd78 	bl	80025d0 <HAL_GetTick>
 8004ae0:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d002      	beq.n	8004aee <HAL_SPI_Receive+0x62>
 8004ae8:	88fb      	ldrh	r3, [r7, #6]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d101      	bne.n	8004af2 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e0e1      	b.n	8004cb6 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d101      	bne.n	8004b00 <HAL_SPI_Receive+0x74>
 8004afc:	2302      	movs	r3, #2
 8004afe:	e0da      	b.n	8004cb6 <HAL_SPI_Receive+0x22a>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2204      	movs	r2, #4
 8004b0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	68ba      	ldr	r2, [r7, #8]
 8004b1a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	88fa      	ldrh	r2, [r7, #6]
 8004b20:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	88fa      	ldrh	r2, [r7, #6]
 8004b26:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2200      	movs	r2, #0
 8004b44:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b4e:	d10f      	bne.n	8004b70 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b5e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004b6e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b7a:	2b40      	cmp	r3, #64	@ 0x40
 8004b7c:	d007      	beq.n	8004b8e <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b8c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d170      	bne.n	8004c78 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004b96:	e035      	b.n	8004c04 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d115      	bne.n	8004bd2 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f103 020c 	add.w	r2, r3, #12
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bb2:	7812      	ldrb	r2, [r2, #0]
 8004bb4:	b2d2      	uxtb	r2, r2
 8004bb6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bbc:	1c5a      	adds	r2, r3, #1
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	b29a      	uxth	r2, r3
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004bd0:	e018      	b.n	8004c04 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bd2:	f7fd fcfd 	bl	80025d0 <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	683a      	ldr	r2, [r7, #0]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d803      	bhi.n	8004bea <HAL_SPI_Receive+0x15e>
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be8:	d102      	bne.n	8004bf0 <HAL_SPI_Receive+0x164>
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d109      	bne.n	8004c04 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e058      	b.n	8004cb6 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1c4      	bne.n	8004b98 <HAL_SPI_Receive+0x10c>
 8004c0e:	e038      	b.n	8004c82 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f003 0301 	and.w	r3, r3, #1
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d113      	bne.n	8004c46 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68da      	ldr	r2, [r3, #12]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c28:	b292      	uxth	r2, r2
 8004c2a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c30:	1c9a      	adds	r2, r3, #2
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	3b01      	subs	r3, #1
 8004c3e:	b29a      	uxth	r2, r3
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004c44:	e018      	b.n	8004c78 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c46:	f7fd fcc3 	bl	80025d0 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	683a      	ldr	r2, [r7, #0]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d803      	bhi.n	8004c5e <HAL_SPI_Receive+0x1d2>
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c5c:	d102      	bne.n	8004c64 <HAL_SPI_Receive+0x1d8>
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d109      	bne.n	8004c78 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e01e      	b.n	8004cb6 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1c6      	bne.n	8004c10 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	6839      	ldr	r1, [r7, #0]
 8004c86:	68f8      	ldr	r0, [r7, #12]
 8004c88:	f000 fbc2 	bl	8005410 <SPI_EndRxTransaction>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d002      	beq.n	8004c98 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2220      	movs	r2, #32
 8004c96:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d001      	beq.n	8004cb4 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e000      	b.n	8004cb6 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
  }
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3718      	adds	r7, #24
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
	...

08004cc0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b08a      	sub	sp, #40	@ 0x28
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
 8004ccc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d004      	beq.n	8004ce4 <HAL_SPI_TransmitReceive+0x24>
 8004cda:	f240 417e 	movw	r1, #1150	@ 0x47e
 8004cde:	4884      	ldr	r0, [pc, #528]	@ (8004ef0 <HAL_SPI_TransmitReceive+0x230>)
 8004ce0:	f7fd f9e4 	bl	80020ac <assert_failed>

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ce4:	f7fd fc74 	bl	80025d0 <HAL_GetTick>
 8004ce8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004cf0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004cf8:	887b      	ldrh	r3, [r7, #2]
 8004cfa:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004cfc:	7ffb      	ldrb	r3, [r7, #31]
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d00c      	beq.n	8004d1c <HAL_SPI_TransmitReceive+0x5c>
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d08:	d106      	bne.n	8004d18 <HAL_SPI_TransmitReceive+0x58>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d102      	bne.n	8004d18 <HAL_SPI_TransmitReceive+0x58>
 8004d12:	7ffb      	ldrb	r3, [r7, #31]
 8004d14:	2b04      	cmp	r3, #4
 8004d16:	d001      	beq.n	8004d1c <HAL_SPI_TransmitReceive+0x5c>
  {
    return HAL_BUSY;
 8004d18:	2302      	movs	r3, #2
 8004d1a:	e182      	b.n	8005022 <HAL_SPI_TransmitReceive+0x362>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d005      	beq.n	8004d2e <HAL_SPI_TransmitReceive+0x6e>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d002      	beq.n	8004d2e <HAL_SPI_TransmitReceive+0x6e>
 8004d28:	887b      	ldrh	r3, [r7, #2]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d101      	bne.n	8004d32 <HAL_SPI_TransmitReceive+0x72>
  {
    return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e177      	b.n	8005022 <HAL_SPI_TransmitReceive+0x362>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d101      	bne.n	8004d40 <HAL_SPI_TransmitReceive+0x80>
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	e170      	b.n	8005022 <HAL_SPI_TransmitReceive+0x362>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	2b04      	cmp	r3, #4
 8004d52:	d003      	beq.n	8004d5c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2205      	movs	r2, #5
 8004d58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	887a      	ldrh	r2, [r7, #2]
 8004d6c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	887a      	ldrh	r2, [r7, #2]
 8004d72:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	68ba      	ldr	r2, [r7, #8]
 8004d78:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	887a      	ldrh	r2, [r7, #2]
 8004d7e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	887a      	ldrh	r2, [r7, #2]
 8004d84:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d9c:	2b40      	cmp	r3, #64	@ 0x40
 8004d9e:	d007      	beq.n	8004db0 <HAL_SPI_TransmitReceive+0xf0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004dae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004db8:	d17e      	bne.n	8004eb8 <HAL_SPI_TransmitReceive+0x1f8>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d002      	beq.n	8004dc8 <HAL_SPI_TransmitReceive+0x108>
 8004dc2:	8afb      	ldrh	r3, [r7, #22]
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d16c      	bne.n	8004ea2 <HAL_SPI_TransmitReceive+0x1e2>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dcc:	881a      	ldrh	r2, [r3, #0]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dd8:	1c9a      	adds	r2, r3, #2
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	3b01      	subs	r3, #1
 8004de6:	b29a      	uxth	r2, r3
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dec:	e059      	b.n	8004ea2 <HAL_SPI_TransmitReceive+0x1e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f003 0302 	and.w	r3, r3, #2
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d11b      	bne.n	8004e34 <HAL_SPI_TransmitReceive+0x174>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d016      	beq.n	8004e34 <HAL_SPI_TransmitReceive+0x174>
 8004e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d113      	bne.n	8004e34 <HAL_SPI_TransmitReceive+0x174>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e10:	881a      	ldrh	r2, [r3, #0]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e1c:	1c9a      	adds	r2, r3, #2
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	3b01      	subs	r3, #1
 8004e2a:	b29a      	uxth	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e30:	2300      	movs	r3, #0
 8004e32:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d119      	bne.n	8004e76 <HAL_SPI_TransmitReceive+0x1b6>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d014      	beq.n	8004e76 <HAL_SPI_TransmitReceive+0x1b6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68da      	ldr	r2, [r3, #12]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e56:	b292      	uxth	r2, r2
 8004e58:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e5e:	1c9a      	adds	r2, r3, #2
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e72:	2301      	movs	r3, #1
 8004e74:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004e76:	f7fd fbab 	bl	80025d0 <HAL_GetTick>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	6a3b      	ldr	r3, [r7, #32]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d80d      	bhi.n	8004ea2 <HAL_SPI_TransmitReceive+0x1e2>
 8004e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e8c:	d009      	beq.n	8004ea2 <HAL_SPI_TransmitReceive+0x1e2>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2201      	movs	r2, #1
 8004e92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e0bf      	b.n	8005022 <HAL_SPI_TransmitReceive+0x362>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d1a0      	bne.n	8004dee <HAL_SPI_TransmitReceive+0x12e>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d19b      	bne.n	8004dee <HAL_SPI_TransmitReceive+0x12e>
 8004eb6:	e085      	b.n	8004fc4 <HAL_SPI_TransmitReceive+0x304>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d002      	beq.n	8004ec6 <HAL_SPI_TransmitReceive+0x206>
 8004ec0:	8afb      	ldrh	r3, [r7, #22]
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d174      	bne.n	8004fb0 <HAL_SPI_TransmitReceive+0x2f0>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	330c      	adds	r3, #12
 8004ed0:	7812      	ldrb	r2, [r2, #0]
 8004ed2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ed8:	1c5a      	adds	r2, r3, #1
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004eec:	e060      	b.n	8004fb0 <HAL_SPI_TransmitReceive+0x2f0>
 8004eee:	bf00      	nop
 8004ef0:	080070e0 	.word	0x080070e0
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f003 0302 	and.w	r3, r3, #2
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d11c      	bne.n	8004f3c <HAL_SPI_TransmitReceive+0x27c>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d017      	beq.n	8004f3c <HAL_SPI_TransmitReceive+0x27c>
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d114      	bne.n	8004f3c <HAL_SPI_TransmitReceive+0x27c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	330c      	adds	r3, #12
 8004f1c:	7812      	ldrb	r2, [r2, #0]
 8004f1e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f24:	1c5a      	adds	r2, r3, #1
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	3b01      	subs	r3, #1
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d119      	bne.n	8004f7e <HAL_SPI_TransmitReceive+0x2be>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d014      	beq.n	8004f7e <HAL_SPI_TransmitReceive+0x2be>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68da      	ldr	r2, [r3, #12]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f5e:	b2d2      	uxtb	r2, r2
 8004f60:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f66:	1c5a      	adds	r2, r3, #1
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	3b01      	subs	r3, #1
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f7e:	f7fd fb27 	bl	80025d0 <HAL_GetTick>
 8004f82:	4602      	mov	r2, r0
 8004f84:	6a3b      	ldr	r3, [r7, #32]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d803      	bhi.n	8004f96 <HAL_SPI_TransmitReceive+0x2d6>
 8004f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f94:	d102      	bne.n	8004f9c <HAL_SPI_TransmitReceive+0x2dc>
 8004f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d109      	bne.n	8004fb0 <HAL_SPI_TransmitReceive+0x2f0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e038      	b.n	8005022 <HAL_SPI_TransmitReceive+0x362>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d19c      	bne.n	8004ef4 <HAL_SPI_TransmitReceive+0x234>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d197      	bne.n	8004ef4 <HAL_SPI_TransmitReceive+0x234>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fc4:	6a3a      	ldr	r2, [r7, #32]
 8004fc6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004fc8:	68f8      	ldr	r0, [r7, #12]
 8004fca:	f000 fa87 	bl	80054dc <SPI_EndRxTxTransaction>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d008      	beq.n	8004fe6 <HAL_SPI_TransmitReceive+0x326>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2220      	movs	r2, #32
 8004fd8:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e01d      	b.n	8005022 <HAL_SPI_TransmitReceive+0x362>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d10a      	bne.n	8005004 <HAL_SPI_TransmitReceive+0x344>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fee:	2300      	movs	r3, #0
 8004ff0:	613b      	str	r3, [r7, #16]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	613b      	str	r3, [r7, #16]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	613b      	str	r3, [r7, #16]
 8005002:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005018:	2b00      	cmp	r3, #0
 800501a:	d001      	beq.n	8005020 <HAL_SPI_TransmitReceive+0x360>
  {
    return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e000      	b.n	8005022 <HAL_SPI_TransmitReceive+0x362>
  }
  else
  {
    return HAL_OK;
 8005020:	2300      	movs	r3, #0
  }
}
 8005022:	4618      	mov	r0, r3
 8005024:	3728      	adds	r7, #40	@ 0x28
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop

0800502c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b088      	sub	sp, #32
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800504a:	2b00      	cmp	r3, #0
 800504c:	d10e      	bne.n	800506c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005054:	2b00      	cmp	r3, #0
 8005056:	d009      	beq.n	800506c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800505e:	2b00      	cmp	r3, #0
 8005060:	d004      	beq.n	800506c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	4798      	blx	r3
    return;
 800506a:	e0cf      	b.n	800520c <HAL_SPI_IRQHandler+0x1e0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	2b00      	cmp	r3, #0
 8005074:	d009      	beq.n	800508a <HAL_SPI_IRQHandler+0x5e>
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800507c:	2b00      	cmp	r3, #0
 800507e:	d004      	beq.n	800508a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	4798      	blx	r3
    return;
 8005088:	e0c0      	b.n	800520c <HAL_SPI_IRQHandler+0x1e0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	f003 0320 	and.w	r3, r3, #32
 8005090:	2b00      	cmp	r3, #0
 8005092:	d10a      	bne.n	80050aa <HAL_SPI_IRQHandler+0x7e>
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800509a:	2b00      	cmp	r3, #0
 800509c:	d105      	bne.n	80050aa <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	f000 80b1 	beq.w	800520c <HAL_SPI_IRQHandler+0x1e0>
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	f003 0320 	and.w	r3, r3, #32
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	f000 80ab 	beq.w	800520c <HAL_SPI_IRQHandler+0x1e0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d023      	beq.n	8005108 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	2b03      	cmp	r3, #3
 80050ca:	d011      	beq.n	80050f0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050d0:	f043 0204 	orr.w	r2, r3, #4
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050d8:	2300      	movs	r3, #0
 80050da:	617b      	str	r3, [r7, #20]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	617b      	str	r3, [r7, #20]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	617b      	str	r3, [r7, #20]
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	e00b      	b.n	8005108 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050f0:	2300      	movs	r3, #0
 80050f2:	613b      	str	r3, [r7, #16]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	613b      	str	r3, [r7, #16]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	613b      	str	r3, [r7, #16]
 8005104:	693b      	ldr	r3, [r7, #16]
        return;
 8005106:	e081      	b.n	800520c <HAL_SPI_IRQHandler+0x1e0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	f003 0320 	and.w	r3, r3, #32
 800510e:	2b00      	cmp	r3, #0
 8005110:	d014      	beq.n	800513c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005116:	f043 0201 	orr.w	r2, r3, #1
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800511e:	2300      	movs	r3, #0
 8005120:	60fb      	str	r3, [r7, #12]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	60fb      	str	r3, [r7, #12]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005138:	601a      	str	r2, [r3, #0]
 800513a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00c      	beq.n	8005160 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800514a:	f043 0208 	orr.w	r2, r3, #8
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005152:	2300      	movs	r3, #0
 8005154:	60bb      	str	r3, [r7, #8]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	60bb      	str	r3, [r7, #8]
 800515e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005164:	2b00      	cmp	r3, #0
 8005166:	d050      	beq.n	800520a <HAL_SPI_IRQHandler+0x1de>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	685a      	ldr	r2, [r3, #4]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005176:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	f003 0302 	and.w	r3, r3, #2
 8005186:	2b00      	cmp	r3, #0
 8005188:	d104      	bne.n	8005194 <HAL_SPI_IRQHandler+0x168>
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	f003 0301 	and.w	r3, r3, #1
 8005190:	2b00      	cmp	r3, #0
 8005192:	d034      	beq.n	80051fe <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	685a      	ldr	r2, [r3, #4]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f022 0203 	bic.w	r2, r2, #3
 80051a2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d011      	beq.n	80051d0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051b0:	4a18      	ldr	r2, [pc, #96]	@ (8005214 <HAL_SPI_IRQHandler+0x1e8>)
 80051b2:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051b8:	4618      	mov	r0, r3
 80051ba:	f7fd fb97 	bl	80028ec <HAL_DMA_Abort_IT>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d005      	beq.n	80051d0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051c8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d017      	beq.n	8005208 <HAL_SPI_IRQHandler+0x1dc>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051dc:	4a0d      	ldr	r2, [pc, #52]	@ (8005214 <HAL_SPI_IRQHandler+0x1e8>)
 80051de:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051e4:	4618      	mov	r0, r3
 80051e6:	f7fd fb81 	bl	80028ec <HAL_DMA_Abort_IT>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d00b      	beq.n	8005208 <HAL_SPI_IRQHandler+0x1dc>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051f4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80051fc:	e004      	b.n	8005208 <HAL_SPI_IRQHandler+0x1dc>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005206:	e000      	b.n	800520a <HAL_SPI_IRQHandler+0x1de>
        if (hspi->hdmatx != NULL)
 8005208:	bf00      	nop
    return;
 800520a:	bf00      	nop
  }
}
 800520c:	3720      	adds	r7, #32
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	080052d5 	.word	0x080052d5

08005218 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8005220:	bf00      	nop
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005234:	bf00      	nop
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8005248:	bf00      	nop
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800525c:	bf00      	nop
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8005270:	bf00      	nop
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005298:	bf00      	nop
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80052c6:	b2db      	uxtb	r3, r3
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052e0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052f2:	68f8      	ldr	r0, [r7, #12]
 80052f4:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80052f6:	bf00      	nop
 80052f8:	3710      	adds	r7, #16
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
	...

08005300 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b088      	sub	sp, #32
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	603b      	str	r3, [r7, #0]
 800530c:	4613      	mov	r3, r2
 800530e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005310:	f7fd f95e 	bl	80025d0 <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005318:	1a9b      	subs	r3, r3, r2
 800531a:	683a      	ldr	r2, [r7, #0]
 800531c:	4413      	add	r3, r2
 800531e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005320:	f7fd f956 	bl	80025d0 <HAL_GetTick>
 8005324:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005326:	4b39      	ldr	r3, [pc, #228]	@ (800540c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	015b      	lsls	r3, r3, #5
 800532c:	0d1b      	lsrs	r3, r3, #20
 800532e:	69fa      	ldr	r2, [r7, #28]
 8005330:	fb02 f303 	mul.w	r3, r2, r3
 8005334:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005336:	e054      	b.n	80053e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800533e:	d050      	beq.n	80053e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005340:	f7fd f946 	bl	80025d0 <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	69fa      	ldr	r2, [r7, #28]
 800534c:	429a      	cmp	r2, r3
 800534e:	d902      	bls.n	8005356 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d13d      	bne.n	80053d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	685a      	ldr	r2, [r3, #4]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005364:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800536e:	d111      	bne.n	8005394 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005378:	d004      	beq.n	8005384 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005382:	d107      	bne.n	8005394 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005392:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005398:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800539c:	d10f      	bne.n	80053be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80053ac:	601a      	str	r2, [r3, #0]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80053bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e017      	b.n	8005402 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d101      	bne.n	80053dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80053d8:	2300      	movs	r3, #0
 80053da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	3b01      	subs	r3, #1
 80053e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	689a      	ldr	r2, [r3, #8]
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	4013      	ands	r3, r2
 80053ec:	68ba      	ldr	r2, [r7, #8]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	bf0c      	ite	eq
 80053f2:	2301      	moveq	r3, #1
 80053f4:	2300      	movne	r3, #0
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	461a      	mov	r2, r3
 80053fa:	79fb      	ldrb	r3, [r7, #7]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d19b      	bne.n	8005338 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3720      	adds	r7, #32
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	20010010 	.word	0x20010010

08005410 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af02      	add	r7, sp, #8
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005424:	d111      	bne.n	800544a <SPI_EndRxTransaction+0x3a>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800542e:	d004      	beq.n	800543a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005438:	d107      	bne.n	800544a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005448:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005452:	d12a      	bne.n	80054aa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800545c:	d012      	beq.n	8005484 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	9300      	str	r3, [sp, #0]
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	2200      	movs	r2, #0
 8005466:	2180      	movs	r1, #128	@ 0x80
 8005468:	68f8      	ldr	r0, [r7, #12]
 800546a:	f7ff ff49 	bl	8005300 <SPI_WaitFlagStateUntilTimeout>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d02d      	beq.n	80054d0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005478:	f043 0220 	orr.w	r2, r3, #32
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005480:	2303      	movs	r3, #3
 8005482:	e026      	b.n	80054d2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	9300      	str	r3, [sp, #0]
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	2200      	movs	r2, #0
 800548c:	2101      	movs	r1, #1
 800548e:	68f8      	ldr	r0, [r7, #12]
 8005490:	f7ff ff36 	bl	8005300 <SPI_WaitFlagStateUntilTimeout>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d01a      	beq.n	80054d0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800549e:	f043 0220 	orr.w	r2, r3, #32
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e013      	b.n	80054d2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	9300      	str	r3, [sp, #0]
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	2200      	movs	r2, #0
 80054b2:	2101      	movs	r1, #1
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f7ff ff23 	bl	8005300 <SPI_WaitFlagStateUntilTimeout>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d007      	beq.n	80054d0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054c4:	f043 0220 	orr.w	r2, r3, #32
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e000      	b.n	80054d2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3710      	adds	r7, #16
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
	...

080054dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b088      	sub	sp, #32
 80054e0:	af02      	add	r7, sp, #8
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	60b9      	str	r1, [r7, #8]
 80054e6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	9300      	str	r3, [sp, #0]
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	2201      	movs	r2, #1
 80054f0:	2102      	movs	r1, #2
 80054f2:	68f8      	ldr	r0, [r7, #12]
 80054f4:	f7ff ff04 	bl	8005300 <SPI_WaitFlagStateUntilTimeout>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d007      	beq.n	800550e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005502:	f043 0220 	orr.w	r2, r3, #32
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e032      	b.n	8005574 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800550e:	4b1b      	ldr	r3, [pc, #108]	@ (800557c <SPI_EndRxTxTransaction+0xa0>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a1b      	ldr	r2, [pc, #108]	@ (8005580 <SPI_EndRxTxTransaction+0xa4>)
 8005514:	fba2 2303 	umull	r2, r3, r2, r3
 8005518:	0d5b      	lsrs	r3, r3, #21
 800551a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800551e:	fb02 f303 	mul.w	r3, r2, r3
 8005522:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800552c:	d112      	bne.n	8005554 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	9300      	str	r3, [sp, #0]
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	2200      	movs	r2, #0
 8005536:	2180      	movs	r1, #128	@ 0x80
 8005538:	68f8      	ldr	r0, [r7, #12]
 800553a:	f7ff fee1 	bl	8005300 <SPI_WaitFlagStateUntilTimeout>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d016      	beq.n	8005572 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005548:	f043 0220 	orr.w	r2, r3, #32
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	e00f      	b.n	8005574 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00a      	beq.n	8005570 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	3b01      	subs	r3, #1
 800555e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800556a:	2b80      	cmp	r3, #128	@ 0x80
 800556c:	d0f2      	beq.n	8005554 <SPI_EndRxTxTransaction+0x78>
 800556e:	e000      	b.n	8005572 <SPI_EndRxTxTransaction+0x96>
        break;
 8005570:	bf00      	nop
  }

  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3718      	adds	r7, #24
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}
 800557c:	20010010 	.word	0x20010010
 8005580:	165e9f81 	.word	0x165e9f81

08005584 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d101      	bne.n	8005596 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e0da      	b.n	800574c <HAL_TIM_Base_Init+0x1c8>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a6e      	ldr	r2, [pc, #440]	@ (8005754 <HAL_TIM_Base_Init+0x1d0>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d027      	beq.n	80055f0 <HAL_TIM_Base_Init+0x6c>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055a8:	d022      	beq.n	80055f0 <HAL_TIM_Base_Init+0x6c>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a6a      	ldr	r2, [pc, #424]	@ (8005758 <HAL_TIM_Base_Init+0x1d4>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d01d      	beq.n	80055f0 <HAL_TIM_Base_Init+0x6c>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a68      	ldr	r2, [pc, #416]	@ (800575c <HAL_TIM_Base_Init+0x1d8>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d018      	beq.n	80055f0 <HAL_TIM_Base_Init+0x6c>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a67      	ldr	r2, [pc, #412]	@ (8005760 <HAL_TIM_Base_Init+0x1dc>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d013      	beq.n	80055f0 <HAL_TIM_Base_Init+0x6c>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a65      	ldr	r2, [pc, #404]	@ (8005764 <HAL_TIM_Base_Init+0x1e0>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d00e      	beq.n	80055f0 <HAL_TIM_Base_Init+0x6c>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a64      	ldr	r2, [pc, #400]	@ (8005768 <HAL_TIM_Base_Init+0x1e4>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d009      	beq.n	80055f0 <HAL_TIM_Base_Init+0x6c>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a62      	ldr	r2, [pc, #392]	@ (800576c <HAL_TIM_Base_Init+0x1e8>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d004      	beq.n	80055f0 <HAL_TIM_Base_Init+0x6c>
 80055e6:	f240 1113 	movw	r1, #275	@ 0x113
 80055ea:	4861      	ldr	r0, [pc, #388]	@ (8005770 <HAL_TIM_Base_Init+0x1ec>)
 80055ec:	f7fc fd5e 	bl	80020ac <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d014      	beq.n	8005622 <HAL_TIM_Base_Init+0x9e>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	2b10      	cmp	r3, #16
 80055fe:	d010      	beq.n	8005622 <HAL_TIM_Base_Init+0x9e>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	2b20      	cmp	r3, #32
 8005606:	d00c      	beq.n	8005622 <HAL_TIM_Base_Init+0x9e>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	2b40      	cmp	r3, #64	@ 0x40
 800560e:	d008      	beq.n	8005622 <HAL_TIM_Base_Init+0x9e>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	2b60      	cmp	r3, #96	@ 0x60
 8005616:	d004      	beq.n	8005622 <HAL_TIM_Base_Init+0x9e>
 8005618:	f44f 718a 	mov.w	r1, #276	@ 0x114
 800561c:	4854      	ldr	r0, [pc, #336]	@ (8005770 <HAL_TIM_Base_Init+0x1ec>)
 800561e:	f7fc fd45 	bl	80020ac <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00e      	beq.n	8005648 <HAL_TIM_Base_Init+0xc4>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005632:	d009      	beq.n	8005648 <HAL_TIM_Base_Init+0xc4>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800563c:	d004      	beq.n	8005648 <HAL_TIM_Base_Init+0xc4>
 800563e:	f240 1115 	movw	r1, #277	@ 0x115
 8005642:	484b      	ldr	r0, [pc, #300]	@ (8005770 <HAL_TIM_Base_Init+0x1ec>)
 8005644:	f7fc fd32 	bl	80020ac <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005650:	d004      	beq.n	800565c <HAL_TIM_Base_Init+0xd8>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a42      	ldr	r2, [pc, #264]	@ (8005760 <HAL_TIM_Base_Init+0x1dc>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d107      	bne.n	800566c <HAL_TIM_Base_Init+0xe8>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	2b00      	cmp	r3, #0
 8005662:	bf14      	ite	ne
 8005664:	2301      	movne	r3, #1
 8005666:	2300      	moveq	r3, #0
 8005668:	b2db      	uxtb	r3, r3
 800566a:	e00e      	b.n	800568a <HAL_TIM_Base_Init+0x106>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d006      	beq.n	8005682 <HAL_TIM_Base_Init+0xfe>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800567c:	d201      	bcs.n	8005682 <HAL_TIM_Base_Init+0xfe>
 800567e:	2301      	movs	r3, #1
 8005680:	e000      	b.n	8005684 <HAL_TIM_Base_Init+0x100>
 8005682:	2300      	movs	r3, #0
 8005684:	f003 0301 	and.w	r3, r3, #1
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b00      	cmp	r3, #0
 800568c:	d104      	bne.n	8005698 <HAL_TIM_Base_Init+0x114>
 800568e:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8005692:	4837      	ldr	r0, [pc, #220]	@ (8005770 <HAL_TIM_Base_Init+0x1ec>)
 8005694:	f7fc fd0a 	bl	80020ac <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	699b      	ldr	r3, [r3, #24]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d008      	beq.n	80056b2 <HAL_TIM_Base_Init+0x12e>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	2b80      	cmp	r3, #128	@ 0x80
 80056a6:	d004      	beq.n	80056b2 <HAL_TIM_Base_Init+0x12e>
 80056a8:	f240 1117 	movw	r1, #279	@ 0x117
 80056ac:	4830      	ldr	r0, [pc, #192]	@ (8005770 <HAL_TIM_Base_Init+0x1ec>)
 80056ae:	f7fc fcfd 	bl	80020ac <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d111      	bne.n	80056e2 <HAL_TIM_Base_Init+0x15e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 fae8 	bl	8005c9c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d102      	bne.n	80056da <HAL_TIM_Base_Init+0x156>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a27      	ldr	r2, [pc, #156]	@ (8005774 <HAL_TIM_Base_Init+0x1f0>)
 80056d8:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2202      	movs	r2, #2
 80056e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	3304      	adds	r3, #4
 80056f2:	4619      	mov	r1, r3
 80056f4:	4610      	mov	r0, r2
 80056f6:	f000 fa45 	bl	8005b84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2201      	movs	r2, #1
 8005706:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2201      	movs	r2, #1
 800570e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2201      	movs	r2, #1
 8005716:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2201      	movs	r2, #1
 800572e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2201      	movs	r2, #1
 8005736:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2201      	movs	r2, #1
 800573e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2201      	movs	r2, #1
 8005746:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3708      	adds	r7, #8
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	40010000 	.word	0x40010000
 8005758:	40000400 	.word	0x40000400
 800575c:	40000800 	.word	0x40000800
 8005760:	40000c00 	.word	0x40000c00
 8005764:	40014000 	.word	0x40014000
 8005768:	40014400 	.word	0x40014400
 800576c:	40014800 	.word	0x40014800
 8005770:	08007154 	.word	0x08007154
 8005774:	08005779 	.word	0x08005779

08005778 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005780:	bf00      	nop
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a3d      	ldr	r2, [pc, #244]	@ (8005890 <HAL_TIM_Base_Start_IT+0x104>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d027      	beq.n	80057ee <HAL_TIM_Base_Start_IT+0x62>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057a6:	d022      	beq.n	80057ee <HAL_TIM_Base_Start_IT+0x62>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a39      	ldr	r2, [pc, #228]	@ (8005894 <HAL_TIM_Base_Start_IT+0x108>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d01d      	beq.n	80057ee <HAL_TIM_Base_Start_IT+0x62>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a38      	ldr	r2, [pc, #224]	@ (8005898 <HAL_TIM_Base_Start_IT+0x10c>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d018      	beq.n	80057ee <HAL_TIM_Base_Start_IT+0x62>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a36      	ldr	r2, [pc, #216]	@ (800589c <HAL_TIM_Base_Start_IT+0x110>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d013      	beq.n	80057ee <HAL_TIM_Base_Start_IT+0x62>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a35      	ldr	r2, [pc, #212]	@ (80058a0 <HAL_TIM_Base_Start_IT+0x114>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d00e      	beq.n	80057ee <HAL_TIM_Base_Start_IT+0x62>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a33      	ldr	r2, [pc, #204]	@ (80058a4 <HAL_TIM_Base_Start_IT+0x118>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d009      	beq.n	80057ee <HAL_TIM_Base_Start_IT+0x62>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a32      	ldr	r2, [pc, #200]	@ (80058a8 <HAL_TIM_Base_Start_IT+0x11c>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d004      	beq.n	80057ee <HAL_TIM_Base_Start_IT+0x62>
 80057e4:	f44f 71e8 	mov.w	r1, #464	@ 0x1d0
 80057e8:	4830      	ldr	r0, [pc, #192]	@ (80058ac <HAL_TIM_Base_Start_IT+0x120>)
 80057ea:	f7fc fc5f 	bl	80020ac <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d001      	beq.n	80057fe <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e044      	b.n	8005888 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2202      	movs	r2, #2
 8005802:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68da      	ldr	r2, [r3, #12]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f042 0201 	orr.w	r2, r2, #1
 8005814:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a1d      	ldr	r2, [pc, #116]	@ (8005890 <HAL_TIM_Base_Start_IT+0x104>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d018      	beq.n	8005852 <HAL_TIM_Base_Start_IT+0xc6>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005828:	d013      	beq.n	8005852 <HAL_TIM_Base_Start_IT+0xc6>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a19      	ldr	r2, [pc, #100]	@ (8005894 <HAL_TIM_Base_Start_IT+0x108>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d00e      	beq.n	8005852 <HAL_TIM_Base_Start_IT+0xc6>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a17      	ldr	r2, [pc, #92]	@ (8005898 <HAL_TIM_Base_Start_IT+0x10c>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d009      	beq.n	8005852 <HAL_TIM_Base_Start_IT+0xc6>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a16      	ldr	r2, [pc, #88]	@ (800589c <HAL_TIM_Base_Start_IT+0x110>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d004      	beq.n	8005852 <HAL_TIM_Base_Start_IT+0xc6>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a14      	ldr	r2, [pc, #80]	@ (80058a0 <HAL_TIM_Base_Start_IT+0x114>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d111      	bne.n	8005876 <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	f003 0307 	and.w	r3, r3, #7
 800585c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2b06      	cmp	r3, #6
 8005862:	d010      	beq.n	8005886 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f042 0201 	orr.w	r2, r2, #1
 8005872:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005874:	e007      	b.n	8005886 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f042 0201 	orr.w	r2, r2, #1
 8005884:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005886:	2300      	movs	r3, #0
}
 8005888:	4618      	mov	r0, r3
 800588a:	3710      	adds	r7, #16
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	40010000 	.word	0x40010000
 8005894:	40000400 	.word	0x40000400
 8005898:	40000800 	.word	0x40000800
 800589c:	40000c00 	.word	0x40000c00
 80058a0:	40014000 	.word	0x40014000
 80058a4:	40014400 	.word	0x40014400
 80058a8:	40014800 	.word	0x40014800
 80058ac:	08007154 	.word	0x08007154

080058b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	f003 0302 	and.w	r3, r3, #2
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d026      	beq.n	8005920 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f003 0302 	and.w	r3, r3, #2
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d021      	beq.n	8005920 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f06f 0202 	mvn.w	r2, #2
 80058e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2201      	movs	r2, #1
 80058ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	699b      	ldr	r3, [r3, #24]
 80058f2:	f003 0303 	and.w	r3, r3, #3
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d005      	beq.n	8005906 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	4798      	blx	r3
 8005904:	e009      	b.n	800591a <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	f003 0304 	and.w	r3, r3, #4
 8005926:	2b00      	cmp	r3, #0
 8005928:	d026      	beq.n	8005978 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f003 0304 	and.w	r3, r3, #4
 8005930:	2b00      	cmp	r3, #0
 8005932:	d021      	beq.n	8005978 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f06f 0204 	mvn.w	r2, #4
 800593c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2202      	movs	r2, #2
 8005942:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800594e:	2b00      	cmp	r3, #0
 8005950:	d005      	beq.n	800595e <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	4798      	blx	r3
 800595c:	e009      	b.n	8005972 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	f003 0308 	and.w	r3, r3, #8
 800597e:	2b00      	cmp	r3, #0
 8005980:	d026      	beq.n	80059d0 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f003 0308 	and.w	r3, r3, #8
 8005988:	2b00      	cmp	r3, #0
 800598a:	d021      	beq.n	80059d0 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f06f 0208 	mvn.w	r2, #8
 8005994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2204      	movs	r2, #4
 800599a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	69db      	ldr	r3, [r3, #28]
 80059a2:	f003 0303 	and.w	r3, r3, #3
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d005      	beq.n	80059b6 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	4798      	blx	r3
 80059b4:	e009      	b.n	80059ca <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	f003 0310 	and.w	r3, r3, #16
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d026      	beq.n	8005a28 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f003 0310 	and.w	r3, r3, #16
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d021      	beq.n	8005a28 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f06f 0210 	mvn.w	r2, #16
 80059ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2208      	movs	r2, #8
 80059f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	69db      	ldr	r3, [r3, #28]
 80059fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d005      	beq.n	8005a0e <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	4798      	blx	r3
 8005a0c:	e009      	b.n	8005a22 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	f003 0301 	and.w	r3, r3, #1
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00e      	beq.n	8005a50 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f003 0301 	and.w	r3, r3, #1
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d009      	beq.n	8005a50 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f06f 0201 	mvn.w	r2, #1
 8005a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00e      	beq.n	8005a78 <HAL_TIM_IRQHandler+0x1c8>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d009      	beq.n	8005a78 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005a6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00e      	beq.n	8005aa0 <HAL_TIM_IRQHandler+0x1f0>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d009      	beq.n	8005aa0 <HAL_TIM_IRQHandler+0x1f0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005a94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	f003 0320 	and.w	r3, r3, #32
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00e      	beq.n	8005ac8 <HAL_TIM_IRQHandler+0x218>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f003 0320 	and.w	r3, r3, #32
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d009      	beq.n	8005ac8 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f06f 0220 	mvn.w	r2, #32
 8005abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ac8:	bf00      	nop
 8005aca:	3710      	adds	r7, #16
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8005ad8:	bf00      	nop
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005aec:	bf00      	nop
 8005aee:	370c      	adds	r7, #12
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8005b14:	bf00      	nop
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b28:	bf00      	nop
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005b3c:	bf00      	nop
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b50:	bf00      	nop
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8005b64:	bf00      	nop
 8005b66:	370c      	adds	r7, #12
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005b78:	bf00      	nop
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b085      	sub	sp, #20
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a3a      	ldr	r2, [pc, #232]	@ (8005c80 <TIM_Base_SetConfig+0xfc>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d00f      	beq.n	8005bbc <TIM_Base_SetConfig+0x38>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ba2:	d00b      	beq.n	8005bbc <TIM_Base_SetConfig+0x38>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a37      	ldr	r2, [pc, #220]	@ (8005c84 <TIM_Base_SetConfig+0x100>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d007      	beq.n	8005bbc <TIM_Base_SetConfig+0x38>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a36      	ldr	r2, [pc, #216]	@ (8005c88 <TIM_Base_SetConfig+0x104>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d003      	beq.n	8005bbc <TIM_Base_SetConfig+0x38>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a35      	ldr	r2, [pc, #212]	@ (8005c8c <TIM_Base_SetConfig+0x108>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d108      	bne.n	8005bce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a2b      	ldr	r2, [pc, #172]	@ (8005c80 <TIM_Base_SetConfig+0xfc>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d01b      	beq.n	8005c0e <TIM_Base_SetConfig+0x8a>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bdc:	d017      	beq.n	8005c0e <TIM_Base_SetConfig+0x8a>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a28      	ldr	r2, [pc, #160]	@ (8005c84 <TIM_Base_SetConfig+0x100>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d013      	beq.n	8005c0e <TIM_Base_SetConfig+0x8a>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a27      	ldr	r2, [pc, #156]	@ (8005c88 <TIM_Base_SetConfig+0x104>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d00f      	beq.n	8005c0e <TIM_Base_SetConfig+0x8a>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a26      	ldr	r2, [pc, #152]	@ (8005c8c <TIM_Base_SetConfig+0x108>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d00b      	beq.n	8005c0e <TIM_Base_SetConfig+0x8a>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a25      	ldr	r2, [pc, #148]	@ (8005c90 <TIM_Base_SetConfig+0x10c>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d007      	beq.n	8005c0e <TIM_Base_SetConfig+0x8a>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a24      	ldr	r2, [pc, #144]	@ (8005c94 <TIM_Base_SetConfig+0x110>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d003      	beq.n	8005c0e <TIM_Base_SetConfig+0x8a>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a23      	ldr	r2, [pc, #140]	@ (8005c98 <TIM_Base_SetConfig+0x114>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d108      	bne.n	8005c20 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	689a      	ldr	r2, [r3, #8]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a0e      	ldr	r2, [pc, #56]	@ (8005c80 <TIM_Base_SetConfig+0xfc>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d103      	bne.n	8005c54 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	691a      	ldr	r2, [r3, #16]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	f003 0301 	and.w	r3, r3, #1
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d105      	bne.n	8005c72 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	f023 0201 	bic.w	r2, r3, #1
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	611a      	str	r2, [r3, #16]
  }
}
 8005c72:	bf00      	nop
 8005c74:	3714      	adds	r7, #20
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	40010000 	.word	0x40010000
 8005c84:	40000400 	.word	0x40000400
 8005c88:	40000800 	.word	0x40000800
 8005c8c:	40000c00 	.word	0x40000c00
 8005c90:	40014000 	.word	0x40014000
 8005c94:	40014400 	.word	0x40014400
 8005c98:	40014800 	.word	0x40014800

08005c9c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4a1c      	ldr	r2, [pc, #112]	@ (8005d18 <TIM_ResetCallback+0x7c>)
 8005ca8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a1b      	ldr	r2, [pc, #108]	@ (8005d1c <TIM_ResetCallback+0x80>)
 8005cb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a1a      	ldr	r2, [pc, #104]	@ (8005d20 <TIM_ResetCallback+0x84>)
 8005cb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a19      	ldr	r2, [pc, #100]	@ (8005d24 <TIM_ResetCallback+0x88>)
 8005cc0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a18      	ldr	r2, [pc, #96]	@ (8005d28 <TIM_ResetCallback+0x8c>)
 8005cc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a17      	ldr	r2, [pc, #92]	@ (8005d2c <TIM_ResetCallback+0x90>)
 8005cd0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a16      	ldr	r2, [pc, #88]	@ (8005d30 <TIM_ResetCallback+0x94>)
 8005cd8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a15      	ldr	r2, [pc, #84]	@ (8005d34 <TIM_ResetCallback+0x98>)
 8005ce0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a14      	ldr	r2, [pc, #80]	@ (8005d38 <TIM_ResetCallback+0x9c>)
 8005ce8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a13      	ldr	r2, [pc, #76]	@ (8005d3c <TIM_ResetCallback+0xa0>)
 8005cf0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a12      	ldr	r2, [pc, #72]	@ (8005d40 <TIM_ResetCallback+0xa4>)
 8005cf8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a11      	ldr	r2, [pc, #68]	@ (8005d44 <TIM_ResetCallback+0xa8>)
 8005d00:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a10      	ldr	r2, [pc, #64]	@ (8005d48 <TIM_ResetCallback+0xac>)
 8005d08:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8005d0c:	bf00      	nop
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr
 8005d18:	08002081 	.word	0x08002081
 8005d1c:	08005ad1 	.word	0x08005ad1
 8005d20:	08005b49 	.word	0x08005b49
 8005d24:	08005b5d 	.word	0x08005b5d
 8005d28:	08005af9 	.word	0x08005af9
 8005d2c:	08005b0d 	.word	0x08005b0d
 8005d30:	08005ae5 	.word	0x08005ae5
 8005d34:	08005b21 	.word	0x08005b21
 8005d38:	08005b35 	.word	0x08005b35
 8005d3c:	08005b71 	.word	0x08005b71
 8005d40:	08005d4d 	.word	0x08005d4d
 8005d44:	08005d61 	.word	0x08005d61
 8005d48:	08005d75 	.word	0x08005d75

08005d4c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d54:	bf00      	nop
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8005d68:	bf00      	nop
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d7c:	bf00      	nop
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d101      	bne.n	8005d9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e0ae      	b.n	8005ef8 <HAL_UART_Init+0x170>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d02c      	beq.n	8005dfc <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a56      	ldr	r2, [pc, #344]	@ (8005f00 <HAL_UART_Init+0x178>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d00e      	beq.n	8005dca <HAL_UART_Init+0x42>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a54      	ldr	r2, [pc, #336]	@ (8005f04 <HAL_UART_Init+0x17c>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d009      	beq.n	8005dca <HAL_UART_Init+0x42>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a53      	ldr	r2, [pc, #332]	@ (8005f08 <HAL_UART_Init+0x180>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d004      	beq.n	8005dca <HAL_UART_Init+0x42>
 8005dc0:	f240 1173 	movw	r1, #371	@ 0x173
 8005dc4:	4851      	ldr	r0, [pc, #324]	@ (8005f0c <HAL_UART_Init+0x184>)
 8005dc6:	f7fc f971 	bl	80020ac <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	699b      	ldr	r3, [r3, #24]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d028      	beq.n	8005e24 <HAL_UART_Init+0x9c>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	699b      	ldr	r3, [r3, #24]
 8005dd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dda:	d023      	beq.n	8005e24 <HAL_UART_Init+0x9c>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	699b      	ldr	r3, [r3, #24]
 8005de0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005de4:	d01e      	beq.n	8005e24 <HAL_UART_Init+0x9c>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	699b      	ldr	r3, [r3, #24]
 8005dea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005dee:	d019      	beq.n	8005e24 <HAL_UART_Init+0x9c>
 8005df0:	f44f 71ba 	mov.w	r1, #372	@ 0x174
 8005df4:	4845      	ldr	r0, [pc, #276]	@ (8005f0c <HAL_UART_Init+0x184>)
 8005df6:	f7fc f959 	bl	80020ac <assert_failed>
 8005dfa:	e013      	b.n	8005e24 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a3f      	ldr	r2, [pc, #252]	@ (8005f00 <HAL_UART_Init+0x178>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d00e      	beq.n	8005e24 <HAL_UART_Init+0x9c>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a3e      	ldr	r2, [pc, #248]	@ (8005f04 <HAL_UART_Init+0x17c>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d009      	beq.n	8005e24 <HAL_UART_Init+0x9c>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a3c      	ldr	r2, [pc, #240]	@ (8005f08 <HAL_UART_Init+0x180>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d004      	beq.n	8005e24 <HAL_UART_Init+0x9c>
 8005e1a:	f44f 71bc 	mov.w	r1, #376	@ 0x178
 8005e1e:	483b      	ldr	r0, [pc, #236]	@ (8005f0c <HAL_UART_Init+0x184>)
 8005e20:	f7fc f944 	bl	80020ac <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d009      	beq.n	8005e40 <HAL_UART_Init+0xb8>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e34:	d004      	beq.n	8005e40 <HAL_UART_Init+0xb8>
 8005e36:	f44f 71bd 	mov.w	r1, #378	@ 0x17a
 8005e3a:	4834      	ldr	r0, [pc, #208]	@ (8005f0c <HAL_UART_Init+0x184>)
 8005e3c:	f7fc f936 	bl	80020ac <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	69db      	ldr	r3, [r3, #28]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d009      	beq.n	8005e5c <HAL_UART_Init+0xd4>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	69db      	ldr	r3, [r3, #28]
 8005e4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e50:	d004      	beq.n	8005e5c <HAL_UART_Init+0xd4>
 8005e52:	f240 117b 	movw	r1, #379	@ 0x17b
 8005e56:	482d      	ldr	r0, [pc, #180]	@ (8005f0c <HAL_UART_Init+0x184>)
 8005e58:	f7fc f928 	bl	80020ac <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d111      	bne.n	8005e8c <HAL_UART_Init+0x104>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 fb43 	bl	80064fc <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d102      	bne.n	8005e84 <HAL_UART_Init+0xfc>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a23      	ldr	r2, [pc, #140]	@ (8005f10 <HAL_UART_Init+0x188>)
 8005e82:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2224      	movs	r2, #36	@ 0x24
 8005e90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68da      	ldr	r2, [r3, #12]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005ea2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 fd03 	bl	80068b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	691a      	ldr	r2, [r3, #16]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005eb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	695a      	ldr	r2, [r3, #20]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005ec8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68da      	ldr	r2, [r3, #12]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005ed8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2220      	movs	r2, #32
 8005ee4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2220      	movs	r2, #32
 8005eec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3708      	adds	r7, #8
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	40011000 	.word	0x40011000
 8005f04:	40004400 	.word	0x40004400
 8005f08:	40011400 	.word	0x40011400
 8005f0c:	080071c8 	.word	0x080071c8
 8005f10:	08002481 	.word	0x08002481

08005f14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b0ba      	sub	sp, #232	@ 0xe8
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	695b      	ldr	r3, [r3, #20]
 8005f36:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005f40:	2300      	movs	r3, #0
 8005f42:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f4a:	f003 030f 	and.w	r3, r3, #15
 8005f4e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005f52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d10f      	bne.n	8005f7a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f5e:	f003 0320 	and.w	r3, r3, #32
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d009      	beq.n	8005f7a <HAL_UART_IRQHandler+0x66>
 8005f66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f6a:	f003 0320 	and.w	r3, r3, #32
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d003      	beq.n	8005f7a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 fbdb 	bl	800672e <UART_Receive_IT>
      return;
 8005f78:	e260      	b.n	800643c <HAL_UART_IRQHandler+0x528>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005f7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	f000 80e1 	beq.w	8006146 <HAL_UART_IRQHandler+0x232>
 8005f84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f88:	f003 0301 	and.w	r3, r3, #1
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d106      	bne.n	8005f9e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f94:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	f000 80d4 	beq.w	8006146 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fa2:	f003 0301 	and.w	r3, r3, #1
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00b      	beq.n	8005fc2 <HAL_UART_IRQHandler+0xae>
 8005faa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d005      	beq.n	8005fc2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fba:	f043 0201 	orr.w	r2, r3, #1
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fc6:	f003 0304 	and.w	r3, r3, #4
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00b      	beq.n	8005fe6 <HAL_UART_IRQHandler+0xd2>
 8005fce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005fd2:	f003 0301 	and.w	r3, r3, #1
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d005      	beq.n	8005fe6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fde:	f043 0202 	orr.w	r2, r3, #2
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fea:	f003 0302 	and.w	r3, r3, #2
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d00b      	beq.n	800600a <HAL_UART_IRQHandler+0xf6>
 8005ff2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ff6:	f003 0301 	and.w	r3, r3, #1
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d005      	beq.n	800600a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006002:	f043 0204 	orr.w	r2, r3, #4
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800600a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800600e:	f003 0308 	and.w	r3, r3, #8
 8006012:	2b00      	cmp	r3, #0
 8006014:	d011      	beq.n	800603a <HAL_UART_IRQHandler+0x126>
 8006016:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800601a:	f003 0320 	and.w	r3, r3, #32
 800601e:	2b00      	cmp	r3, #0
 8006020:	d105      	bne.n	800602e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006022:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006026:	f003 0301 	and.w	r3, r3, #1
 800602a:	2b00      	cmp	r3, #0
 800602c:	d005      	beq.n	800603a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006032:	f043 0208 	orr.w	r2, r3, #8
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800603e:	2b00      	cmp	r3, #0
 8006040:	f000 81f7 	beq.w	8006432 <HAL_UART_IRQHandler+0x51e>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006048:	f003 0320 	and.w	r3, r3, #32
 800604c:	2b00      	cmp	r3, #0
 800604e:	d008      	beq.n	8006062 <HAL_UART_IRQHandler+0x14e>
 8006050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006054:	f003 0320 	and.w	r3, r3, #32
 8006058:	2b00      	cmp	r3, #0
 800605a:	d002      	beq.n	8006062 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 fb66 	bl	800672e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	695b      	ldr	r3, [r3, #20]
 8006068:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800606c:	2b40      	cmp	r3, #64	@ 0x40
 800606e:	bf0c      	ite	eq
 8006070:	2301      	moveq	r3, #1
 8006072:	2300      	movne	r3, #0
 8006074:	b2db      	uxtb	r3, r3
 8006076:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800607e:	f003 0308 	and.w	r3, r3, #8
 8006082:	2b00      	cmp	r3, #0
 8006084:	d103      	bne.n	800608e <HAL_UART_IRQHandler+0x17a>
 8006086:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800608a:	2b00      	cmp	r3, #0
 800608c:	d051      	beq.n	8006132 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 fa6c 	bl	800656c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	695b      	ldr	r3, [r3, #20]
 800609a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800609e:	2b40      	cmp	r3, #64	@ 0x40
 80060a0:	d142      	bne.n	8006128 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	3314      	adds	r3, #20
 80060a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80060b0:	e853 3f00 	ldrex	r3, [r3]
 80060b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80060b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80060bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	3314      	adds	r3, #20
 80060ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80060ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80060d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80060da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80060de:	e841 2300 	strex	r3, r2, [r1]
 80060e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80060e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d1d9      	bne.n	80060a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d013      	beq.n	800611e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060fa:	4a80      	ldr	r2, [pc, #512]	@ (80062fc <HAL_UART_IRQHandler+0x3e8>)
 80060fc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006102:	4618      	mov	r0, r3
 8006104:	f7fc fbf2 	bl	80028ec <HAL_DMA_Abort_IT>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d019      	beq.n	8006142 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006112:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006118:	4610      	mov	r0, r2
 800611a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800611c:	e011      	b.n	8006142 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006126:	e00c      	b.n	8006142 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006130:	e007      	b.n	8006142 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006140:	e177      	b.n	8006432 <HAL_UART_IRQHandler+0x51e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006142:	bf00      	nop
    return;
 8006144:	e175      	b.n	8006432 <HAL_UART_IRQHandler+0x51e>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800614a:	2b01      	cmp	r3, #1
 800614c:	f040 8151 	bne.w	80063f2 <HAL_UART_IRQHandler+0x4de>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006154:	f003 0310 	and.w	r3, r3, #16
 8006158:	2b00      	cmp	r3, #0
 800615a:	f000 814a 	beq.w	80063f2 <HAL_UART_IRQHandler+0x4de>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800615e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006162:	f003 0310 	and.w	r3, r3, #16
 8006166:	2b00      	cmp	r3, #0
 8006168:	f000 8143 	beq.w	80063f2 <HAL_UART_IRQHandler+0x4de>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800616c:	2300      	movs	r3, #0
 800616e:	60bb      	str	r3, [r7, #8]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	60bb      	str	r3, [r7, #8]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	60bb      	str	r3, [r7, #8]
 8006180:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	695b      	ldr	r3, [r3, #20]
 8006188:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800618c:	2b40      	cmp	r3, #64	@ 0x40
 800618e:	f040 80b7 	bne.w	8006300 <HAL_UART_IRQHandler+0x3ec>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800619e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	f000 8147 	beq.w	8006436 <HAL_UART_IRQHandler+0x522>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80061ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80061b0:	429a      	cmp	r2, r3
 80061b2:	f080 8140 	bcs.w	8006436 <HAL_UART_IRQHandler+0x522>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80061bc:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061c2:	69db      	ldr	r3, [r3, #28]
 80061c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061c8:	f000 8088 	beq.w	80062dc <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	330c      	adds	r3, #12
 80061d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80061da:	e853 3f00 	ldrex	r3, [r3]
 80061de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80061e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80061e6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061ea:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	330c      	adds	r3, #12
 80061f4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80061f8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80061fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006200:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006204:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006208:	e841 2300 	strex	r3, r2, [r1]
 800620c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006210:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006214:	2b00      	cmp	r3, #0
 8006216:	d1d9      	bne.n	80061cc <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	3314      	adds	r3, #20
 800621e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006220:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006222:	e853 3f00 	ldrex	r3, [r3]
 8006226:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006228:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800622a:	f023 0301 	bic.w	r3, r3, #1
 800622e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	3314      	adds	r3, #20
 8006238:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800623c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006240:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006242:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006244:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006248:	e841 2300 	strex	r3, r2, [r1]
 800624c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800624e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006250:	2b00      	cmp	r3, #0
 8006252:	d1e1      	bne.n	8006218 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	3314      	adds	r3, #20
 800625a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800625c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800625e:	e853 3f00 	ldrex	r3, [r3]
 8006262:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006264:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006266:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800626a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	3314      	adds	r3, #20
 8006274:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006278:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800627a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800627c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800627e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006280:	e841 2300 	strex	r3, r2, [r1]
 8006284:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006286:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006288:	2b00      	cmp	r3, #0
 800628a:	d1e3      	bne.n	8006254 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2220      	movs	r2, #32
 8006290:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	330c      	adds	r3, #12
 80062a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062a4:	e853 3f00 	ldrex	r3, [r3]
 80062a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80062aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062ac:	f023 0310 	bic.w	r3, r3, #16
 80062b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	330c      	adds	r3, #12
 80062ba:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80062be:	65ba      	str	r2, [r7, #88]	@ 0x58
 80062c0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80062c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80062c6:	e841 2300 	strex	r3, r2, [r1]
 80062ca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80062cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d1e3      	bne.n	800629a <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062d6:	4618      	mov	r0, r3
 80062d8:	f7fc fa98 	bl	800280c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2202      	movs	r2, #2
 80062e0:	635a      	str	r2, [r3, #52]	@ 0x34

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	8d91      	ldrh	r1, [r2, #44]	@ 0x2c
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	8dd2      	ldrh	r2, [r2, #46]	@ 0x2e
 80062ee:	b292      	uxth	r2, r2
 80062f0:	1a8a      	subs	r2, r1, r2
 80062f2:	b292      	uxth	r2, r2
 80062f4:	4611      	mov	r1, r2
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80062fa:	e09c      	b.n	8006436 <HAL_UART_IRQHandler+0x522>
 80062fc:	08006633 	.word	0x08006633
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006308:	b29b      	uxth	r3, r3
 800630a:	1ad3      	subs	r3, r2, r3
 800630c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006314:	b29b      	uxth	r3, r3
 8006316:	2b00      	cmp	r3, #0
 8006318:	f000 808f 	beq.w	800643a <HAL_UART_IRQHandler+0x526>
          && (nb_rx_data > 0U))
 800631c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006320:	2b00      	cmp	r3, #0
 8006322:	f000 808a 	beq.w	800643a <HAL_UART_IRQHandler+0x526>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	330c      	adds	r3, #12
 800632c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006330:	e853 3f00 	ldrex	r3, [r3]
 8006334:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006338:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800633c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	330c      	adds	r3, #12
 8006346:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800634a:	647a      	str	r2, [r7, #68]	@ 0x44
 800634c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006350:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006352:	e841 2300 	strex	r3, r2, [r1]
 8006356:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006358:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800635a:	2b00      	cmp	r3, #0
 800635c:	d1e3      	bne.n	8006326 <HAL_UART_IRQHandler+0x412>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	3314      	adds	r3, #20
 8006364:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006368:	e853 3f00 	ldrex	r3, [r3]
 800636c:	623b      	str	r3, [r7, #32]
   return(result);
 800636e:	6a3b      	ldr	r3, [r7, #32]
 8006370:	f023 0301 	bic.w	r3, r3, #1
 8006374:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	3314      	adds	r3, #20
 800637e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006382:	633a      	str	r2, [r7, #48]	@ 0x30
 8006384:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006386:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006388:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800638a:	e841 2300 	strex	r3, r2, [r1]
 800638e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006392:	2b00      	cmp	r3, #0
 8006394:	d1e3      	bne.n	800635e <HAL_UART_IRQHandler+0x44a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2220      	movs	r2, #32
 800639a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	330c      	adds	r3, #12
 80063aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	e853 3f00 	ldrex	r3, [r3]
 80063b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f023 0310 	bic.w	r3, r3, #16
 80063ba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	330c      	adds	r3, #12
 80063c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80063c8:	61fa      	str	r2, [r7, #28]
 80063ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063cc:	69b9      	ldr	r1, [r7, #24]
 80063ce:	69fa      	ldr	r2, [r7, #28]
 80063d0:	e841 2300 	strex	r3, r2, [r1]
 80063d4:	617b      	str	r3, [r7, #20]
   return(result);
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d1e3      	bne.n	80063a4 <HAL_UART_IRQHandler+0x490>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2202      	movs	r2, #2
 80063e0:	635a      	str	r2, [r3, #52]	@ 0x34

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063e6:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 80063ea:	4611      	mov	r1, r2
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80063f0:	e023      	b.n	800643a <HAL_UART_IRQHandler+0x526>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80063f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d009      	beq.n	8006412 <HAL_UART_IRQHandler+0x4fe>
 80063fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006402:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006406:	2b00      	cmp	r3, #0
 8006408:	d003      	beq.n	8006412 <HAL_UART_IRQHandler+0x4fe>
  {
    UART_Transmit_IT(huart);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 f926 	bl	800665c <UART_Transmit_IT>
    return;
 8006410:	e014      	b.n	800643c <HAL_UART_IRQHandler+0x528>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006416:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00e      	beq.n	800643c <HAL_UART_IRQHandler+0x528>
 800641e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006422:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006426:	2b00      	cmp	r3, #0
 8006428:	d008      	beq.n	800643c <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 f966 	bl	80066fc <UART_EndTransmit_IT>
    return;
 8006430:	e004      	b.n	800643c <HAL_UART_IRQHandler+0x528>
    return;
 8006432:	bf00      	nop
 8006434:	e002      	b.n	800643c <HAL_UART_IRQHandler+0x528>
      return;
 8006436:	bf00      	nop
 8006438:	e000      	b.n	800643c <HAL_UART_IRQHandler+0x528>
      return;
 800643a:	bf00      	nop
  }
}
 800643c:	37e8      	adds	r7, #232	@ 0xe8
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop

08006444 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800644c:	bf00      	nop
 800644e:	370c      	adds	r7, #12
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006474:	bf00      	nop
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006488:	bf00      	nop
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800649c:	bf00      	nop
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80064b0:	bf00      	nop
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80064c4:	bf00      	nop
 80064c6:	370c      	adds	r7, #12
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr

080064d0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b083      	sub	sp, #12
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80064d8:	bf00      	nop
 80064da:	370c      	adds	r7, #12
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr

080064e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	460b      	mov	r3, r1
 80064ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80064f0:	bf00      	nop
 80064f2:	370c      	adds	r7, #12
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a10      	ldr	r2, [pc, #64]	@ (8006548 <UART_InitCallbacksToDefault+0x4c>)
 8006508:	649a      	str	r2, [r3, #72]	@ 0x48
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4a0f      	ldr	r2, [pc, #60]	@ (800654c <UART_InitCallbacksToDefault+0x50>)
 800650e:	64da      	str	r2, [r3, #76]	@ 0x4c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4a0f      	ldr	r2, [pc, #60]	@ (8006550 <UART_InitCallbacksToDefault+0x54>)
 8006514:	651a      	str	r2, [r3, #80]	@ 0x50
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a0e      	ldr	r2, [pc, #56]	@ (8006554 <UART_InitCallbacksToDefault+0x58>)
 800651a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a0e      	ldr	r2, [pc, #56]	@ (8006558 <UART_InitCallbacksToDefault+0x5c>)
 8006520:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a0d      	ldr	r2, [pc, #52]	@ (800655c <UART_InitCallbacksToDefault+0x60>)
 8006526:	65da      	str	r2, [r3, #92]	@ 0x5c
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a0d      	ldr	r2, [pc, #52]	@ (8006560 <UART_InitCallbacksToDefault+0x64>)
 800652c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a0c      	ldr	r2, [pc, #48]	@ (8006564 <UART_InitCallbacksToDefault+0x68>)
 8006532:	665a      	str	r2, [r3, #100]	@ 0x64
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4a0c      	ldr	r2, [pc, #48]	@ (8006568 <UART_InitCallbacksToDefault+0x6c>)
 8006538:	66da      	str	r2, [r3, #108]	@ 0x6c

}
 800653a:	bf00      	nop
 800653c:	370c      	adds	r7, #12
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop
 8006548:	08006459 	.word	0x08006459
 800654c:	08006445 	.word	0x08006445
 8006550:	08006481 	.word	0x08006481
 8006554:	0800646d 	.word	0x0800646d
 8006558:	08006495 	.word	0x08006495
 800655c:	080064a9 	.word	0x080064a9
 8006560:	080064bd 	.word	0x080064bd
 8006564:	080064d1 	.word	0x080064d1
 8006568:	080064e5 	.word	0x080064e5

0800656c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800656c:	b480      	push	{r7}
 800656e:	b095      	sub	sp, #84	@ 0x54
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	330c      	adds	r3, #12
 800657a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800657e:	e853 3f00 	ldrex	r3, [r3]
 8006582:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006586:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800658a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	330c      	adds	r3, #12
 8006592:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006594:	643a      	str	r2, [r7, #64]	@ 0x40
 8006596:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006598:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800659a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800659c:	e841 2300 	strex	r3, r2, [r1]
 80065a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80065a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1e5      	bne.n	8006574 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	3314      	adds	r3, #20
 80065ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b0:	6a3b      	ldr	r3, [r7, #32]
 80065b2:	e853 3f00 	ldrex	r3, [r3]
 80065b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	f023 0301 	bic.w	r3, r3, #1
 80065be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	3314      	adds	r3, #20
 80065c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80065c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80065ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80065ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065d0:	e841 2300 	strex	r3, r2, [r1]
 80065d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80065d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d1e5      	bne.n	80065a8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d119      	bne.n	8006618 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	330c      	adds	r3, #12
 80065ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	e853 3f00 	ldrex	r3, [r3]
 80065f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	f023 0310 	bic.w	r3, r3, #16
 80065fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	330c      	adds	r3, #12
 8006602:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006604:	61ba      	str	r2, [r7, #24]
 8006606:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006608:	6979      	ldr	r1, [r7, #20]
 800660a:	69ba      	ldr	r2, [r7, #24]
 800660c:	e841 2300 	strex	r3, r2, [r1]
 8006610:	613b      	str	r3, [r7, #16]
   return(result);
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d1e5      	bne.n	80065e4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2220      	movs	r2, #32
 800661c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006626:	bf00      	nop
 8006628:	3754      	adds	r7, #84	@ 0x54
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr

08006632 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006632:	b580      	push	{r7, lr}
 8006634:	b084      	sub	sp, #16
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800663e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2200      	movs	r2, #0
 8006644:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2200      	movs	r2, #0
 800664a:	84da      	strh	r2, [r3, #38]	@ 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006650:	68f8      	ldr	r0, [r7, #12]
 8006652:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006654:	bf00      	nop
 8006656:	3710      	adds	r7, #16
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800665c:	b480      	push	{r7}
 800665e:	b085      	sub	sp, #20
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800666a:	b2db      	uxtb	r3, r3
 800666c:	2b21      	cmp	r3, #33	@ 0x21
 800666e:	d13e      	bne.n	80066ee <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006678:	d114      	bne.n	80066a4 <UART_Transmit_IT+0x48>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d110      	bne.n	80066a4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a1b      	ldr	r3, [r3, #32]
 8006686:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	881b      	ldrh	r3, [r3, #0]
 800668c:	461a      	mov	r2, r3
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006696:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6a1b      	ldr	r3, [r3, #32]
 800669c:	1c9a      	adds	r2, r3, #2
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	621a      	str	r2, [r3, #32]
 80066a2:	e008      	b.n	80066b6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6a1b      	ldr	r3, [r3, #32]
 80066a8:	1c59      	adds	r1, r3, #1
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	6211      	str	r1, [r2, #32]
 80066ae:	781a      	ldrb	r2, [r3, #0]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	3b01      	subs	r3, #1
 80066be:	b29b      	uxth	r3, r3
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	4619      	mov	r1, r3
 80066c4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d10f      	bne.n	80066ea <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68da      	ldr	r2, [r3, #12]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80066d8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68da      	ldr	r2, [r3, #12]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80066e8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80066ea:	2300      	movs	r3, #0
 80066ec:	e000      	b.n	80066f0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80066ee:	2302      	movs	r3, #2
  }
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3714      	adds	r7, #20
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68da      	ldr	r2, [r3, #12]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006712:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2220      	movs	r2, #32
 8006718:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3708      	adds	r7, #8
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b08c      	sub	sp, #48	@ 0x30
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800673c:	b2db      	uxtb	r3, r3
 800673e:	2b22      	cmp	r3, #34	@ 0x22
 8006740:	f040 80b0 	bne.w	80068a4 <UART_Receive_IT+0x176>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800674c:	d117      	bne.n	800677e <UART_Receive_IT+0x50>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d113      	bne.n	800677e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006756:	2300      	movs	r3, #0
 8006758:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800675e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	b29b      	uxth	r3, r3
 8006768:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800676c:	b29a      	uxth	r2, r3
 800676e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006770:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006776:	1c9a      	adds	r2, r3, #2
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	629a      	str	r2, [r3, #40]	@ 0x28
 800677c:	e026      	b.n	80067cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006782:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006784:	2300      	movs	r3, #0
 8006786:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006790:	d007      	beq.n	80067a2 <UART_Receive_IT+0x74>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d10a      	bne.n	80067b0 <UART_Receive_IT+0x82>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d106      	bne.n	80067b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	b2da      	uxtb	r2, r3
 80067aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067ac:	701a      	strb	r2, [r3, #0]
 80067ae:	e008      	b.n	80067c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067bc:	b2da      	uxtb	r2, r3
 80067be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067c6:	1c5a      	adds	r2, r3, #1
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	3b01      	subs	r3, #1
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	4619      	mov	r1, r3
 80067da:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d15f      	bne.n	80068a0 <UART_Receive_IT+0x172>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68da      	ldr	r2, [r3, #12]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f022 0220 	bic.w	r2, r2, #32
 80067ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68da      	ldr	r2, [r3, #12]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80067fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	695a      	ldr	r2, [r3, #20]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f022 0201 	bic.w	r2, r2, #1
 800680e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2220      	movs	r2, #32
 8006814:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006822:	2b01      	cmp	r3, #1
 8006824:	d136      	bne.n	8006894 <UART_Receive_IT+0x166>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	330c      	adds	r3, #12
 8006832:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	e853 3f00 	ldrex	r3, [r3]
 800683a:	613b      	str	r3, [r7, #16]
   return(result);
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	f023 0310 	bic.w	r3, r3, #16
 8006842:	627b      	str	r3, [r7, #36]	@ 0x24
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	330c      	adds	r3, #12
 800684a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800684c:	623a      	str	r2, [r7, #32]
 800684e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006850:	69f9      	ldr	r1, [r7, #28]
 8006852:	6a3a      	ldr	r2, [r7, #32]
 8006854:	e841 2300 	strex	r3, r2, [r1]
 8006858:	61bb      	str	r3, [r7, #24]
   return(result);
 800685a:	69bb      	ldr	r3, [r7, #24]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d1e5      	bne.n	800682c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 0310 	and.w	r3, r3, #16
 800686a:	2b10      	cmp	r3, #16
 800686c:	d10a      	bne.n	8006884 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800686e:	2300      	movs	r3, #0
 8006870:	60fb      	str	r3, [r7, #12]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	60fb      	str	r3, [r7, #12]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	60fb      	str	r3, [r7, #12]
 8006882:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 800688c:	4611      	mov	r1, r2
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	4798      	blx	r3
 8006892:	e003      	b.n	800689c <UART_Receive_IT+0x16e>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800689c:	2300      	movs	r3, #0
 800689e:	e002      	b.n	80068a6 <UART_Receive_IT+0x178>
    }
    return HAL_OK;
 80068a0:	2300      	movs	r3, #0
 80068a2:	e000      	b.n	80068a6 <UART_Receive_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 80068a4:	2302      	movs	r3, #2
  }
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3730      	adds	r7, #48	@ 0x30
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
	...

080068b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068b4:	b0c0      	sub	sp, #256	@ 0x100
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80068bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068c0:	685a      	ldr	r2, [r3, #4]
 80068c2:	4bcf      	ldr	r3, [pc, #828]	@ (8006c00 <UART_SetConfig+0x350>)
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d904      	bls.n	80068d2 <UART_SetConfig+0x22>
 80068c8:	f640 6175 	movw	r1, #3701	@ 0xe75
 80068cc:	48cd      	ldr	r0, [pc, #820]	@ (8006c04 <UART_SetConfig+0x354>)
 80068ce:	f7fb fbed 	bl	80020ac <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80068d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00a      	beq.n	80068f2 <UART_SetConfig+0x42>
 80068dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068e6:	d004      	beq.n	80068f2 <UART_SetConfig+0x42>
 80068e8:	f640 6176 	movw	r1, #3702	@ 0xe76
 80068ec:	48c5      	ldr	r0, [pc, #788]	@ (8006c04 <UART_SetConfig+0x354>)
 80068ee:	f7fb fbdd 	bl	80020ac <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80068f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068f6:	691b      	ldr	r3, [r3, #16]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d010      	beq.n	800691e <UART_SetConfig+0x6e>
 80068fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006906:	d00a      	beq.n	800691e <UART_SetConfig+0x6e>
 8006908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006912:	d004      	beq.n	800691e <UART_SetConfig+0x6e>
 8006914:	f640 6177 	movw	r1, #3703	@ 0xe77
 8006918:	48ba      	ldr	r0, [pc, #744]	@ (8006c04 <UART_SetConfig+0x354>)
 800691a:	f7fb fbc7 	bl	80020ac <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800691e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006922:	695a      	ldr	r2, [r3, #20]
 8006924:	f64f 73f3 	movw	r3, #65523	@ 0xfff3
 8006928:	4013      	ands	r3, r2
 800692a:	2b00      	cmp	r3, #0
 800692c:	d104      	bne.n	8006938 <UART_SetConfig+0x88>
 800692e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006932:	695b      	ldr	r3, [r3, #20]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d104      	bne.n	8006942 <UART_SetConfig+0x92>
 8006938:	f640 6178 	movw	r1, #3704	@ 0xe78
 800693c:	48b1      	ldr	r0, [pc, #708]	@ (8006c04 <UART_SetConfig+0x354>)
 800693e:	f7fb fbb5 	bl	80020ac <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800694e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006952:	68d9      	ldr	r1, [r3, #12]
 8006954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	ea40 0301 	orr.w	r3, r0, r1
 800695e:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006964:	689a      	ldr	r2, [r3, #8]
 8006966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800696a:	691b      	ldr	r3, [r3, #16]
 800696c:	431a      	orrs	r2, r3
 800696e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006972:	695b      	ldr	r3, [r3, #20]
 8006974:	431a      	orrs	r2, r3
 8006976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800697a:	69db      	ldr	r3, [r3, #28]
 800697c:	4313      	orrs	r3, r2
 800697e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800698e:	f021 010c 	bic.w	r1, r1, #12
 8006992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800699c:	430b      	orrs	r3, r1
 800699e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80069a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	695b      	ldr	r3, [r3, #20]
 80069a8:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80069ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069b0:	6999      	ldr	r1, [r3, #24]
 80069b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	ea40 0301 	orr.w	r3, r0, r1
 80069bc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80069be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	4b90      	ldr	r3, [pc, #576]	@ (8006c08 <UART_SetConfig+0x358>)
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d005      	beq.n	80069d6 <UART_SetConfig+0x126>
 80069ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	4b8e      	ldr	r3, [pc, #568]	@ (8006c0c <UART_SetConfig+0x35c>)
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d104      	bne.n	80069e0 <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80069d6:	f7fd fcf1 	bl	80043bc <HAL_RCC_GetPCLK2Freq>
 80069da:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80069de:	e003      	b.n	80069e8 <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80069e0:	f7fd fcd8 	bl	8004394 <HAL_RCC_GetPCLK1Freq>
 80069e4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069ec:	69db      	ldr	r3, [r3, #28]
 80069ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069f2:	f040 810f 	bne.w	8006c14 <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80069f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069fa:	2200      	movs	r2, #0
 80069fc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006a00:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006a04:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006a08:	4622      	mov	r2, r4
 8006a0a:	462b      	mov	r3, r5
 8006a0c:	1891      	adds	r1, r2, r2
 8006a0e:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006a10:	415b      	adcs	r3, r3
 8006a12:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a14:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006a18:	4621      	mov	r1, r4
 8006a1a:	eb12 0801 	adds.w	r8, r2, r1
 8006a1e:	4629      	mov	r1, r5
 8006a20:	eb43 0901 	adc.w	r9, r3, r1
 8006a24:	f04f 0200 	mov.w	r2, #0
 8006a28:	f04f 0300 	mov.w	r3, #0
 8006a2c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a30:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a34:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a38:	4690      	mov	r8, r2
 8006a3a:	4699      	mov	r9, r3
 8006a3c:	4623      	mov	r3, r4
 8006a3e:	eb18 0303 	adds.w	r3, r8, r3
 8006a42:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006a46:	462b      	mov	r3, r5
 8006a48:	eb49 0303 	adc.w	r3, r9, r3
 8006a4c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006a5c:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006a60:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006a64:	460b      	mov	r3, r1
 8006a66:	18db      	adds	r3, r3, r3
 8006a68:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a6a:	4613      	mov	r3, r2
 8006a6c:	eb42 0303 	adc.w	r3, r2, r3
 8006a70:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a72:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006a76:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006a7a:	f7f9 fbad 	bl	80001d8 <__aeabi_uldivmod>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	460b      	mov	r3, r1
 8006a82:	4b63      	ldr	r3, [pc, #396]	@ (8006c10 <UART_SetConfig+0x360>)
 8006a84:	fba3 2302 	umull	r2, r3, r3, r2
 8006a88:	095b      	lsrs	r3, r3, #5
 8006a8a:	011c      	lsls	r4, r3, #4
 8006a8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a90:	2200      	movs	r2, #0
 8006a92:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006a96:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006a9a:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006a9e:	4642      	mov	r2, r8
 8006aa0:	464b      	mov	r3, r9
 8006aa2:	1891      	adds	r1, r2, r2
 8006aa4:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006aa6:	415b      	adcs	r3, r3
 8006aa8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006aaa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006aae:	4641      	mov	r1, r8
 8006ab0:	eb12 0a01 	adds.w	sl, r2, r1
 8006ab4:	4649      	mov	r1, r9
 8006ab6:	eb43 0b01 	adc.w	fp, r3, r1
 8006aba:	f04f 0200 	mov.w	r2, #0
 8006abe:	f04f 0300 	mov.w	r3, #0
 8006ac2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006ac6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006aca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ace:	4692      	mov	sl, r2
 8006ad0:	469b      	mov	fp, r3
 8006ad2:	4643      	mov	r3, r8
 8006ad4:	eb1a 0303 	adds.w	r3, sl, r3
 8006ad8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006adc:	464b      	mov	r3, r9
 8006ade:	eb4b 0303 	adc.w	r3, fp, r3
 8006ae2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006af2:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006af6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006afa:	460b      	mov	r3, r1
 8006afc:	18db      	adds	r3, r3, r3
 8006afe:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b00:	4613      	mov	r3, r2
 8006b02:	eb42 0303 	adc.w	r3, r2, r3
 8006b06:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b08:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006b0c:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006b10:	f7f9 fb62 	bl	80001d8 <__aeabi_uldivmod>
 8006b14:	4602      	mov	r2, r0
 8006b16:	460b      	mov	r3, r1
 8006b18:	4611      	mov	r1, r2
 8006b1a:	4b3d      	ldr	r3, [pc, #244]	@ (8006c10 <UART_SetConfig+0x360>)
 8006b1c:	fba3 2301 	umull	r2, r3, r3, r1
 8006b20:	095b      	lsrs	r3, r3, #5
 8006b22:	2264      	movs	r2, #100	@ 0x64
 8006b24:	fb02 f303 	mul.w	r3, r2, r3
 8006b28:	1acb      	subs	r3, r1, r3
 8006b2a:	00db      	lsls	r3, r3, #3
 8006b2c:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006b30:	4b37      	ldr	r3, [pc, #220]	@ (8006c10 <UART_SetConfig+0x360>)
 8006b32:	fba3 2302 	umull	r2, r3, r3, r2
 8006b36:	095b      	lsrs	r3, r3, #5
 8006b38:	005b      	lsls	r3, r3, #1
 8006b3a:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006b3e:	441c      	add	r4, r3
 8006b40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b44:	2200      	movs	r2, #0
 8006b46:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006b4a:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006b4e:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006b52:	4642      	mov	r2, r8
 8006b54:	464b      	mov	r3, r9
 8006b56:	1891      	adds	r1, r2, r2
 8006b58:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006b5a:	415b      	adcs	r3, r3
 8006b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b5e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006b62:	4641      	mov	r1, r8
 8006b64:	1851      	adds	r1, r2, r1
 8006b66:	6339      	str	r1, [r7, #48]	@ 0x30
 8006b68:	4649      	mov	r1, r9
 8006b6a:	414b      	adcs	r3, r1
 8006b6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b6e:	f04f 0200 	mov.w	r2, #0
 8006b72:	f04f 0300 	mov.w	r3, #0
 8006b76:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006b7a:	4659      	mov	r1, fp
 8006b7c:	00cb      	lsls	r3, r1, #3
 8006b7e:	4651      	mov	r1, sl
 8006b80:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b84:	4651      	mov	r1, sl
 8006b86:	00ca      	lsls	r2, r1, #3
 8006b88:	4610      	mov	r0, r2
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	4642      	mov	r2, r8
 8006b90:	189b      	adds	r3, r3, r2
 8006b92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006b96:	464b      	mov	r3, r9
 8006b98:	460a      	mov	r2, r1
 8006b9a:	eb42 0303 	adc.w	r3, r2, r3
 8006b9e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006bae:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006bb2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	18db      	adds	r3, r3, r3
 8006bba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006bbc:	4613      	mov	r3, r2
 8006bbe:	eb42 0303 	adc.w	r3, r2, r3
 8006bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006bc4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006bc8:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006bcc:	f7f9 fb04 	bl	80001d8 <__aeabi_uldivmod>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	460b      	mov	r3, r1
 8006bd4:	4b0e      	ldr	r3, [pc, #56]	@ (8006c10 <UART_SetConfig+0x360>)
 8006bd6:	fba3 1302 	umull	r1, r3, r3, r2
 8006bda:	095b      	lsrs	r3, r3, #5
 8006bdc:	2164      	movs	r1, #100	@ 0x64
 8006bde:	fb01 f303 	mul.w	r3, r1, r3
 8006be2:	1ad3      	subs	r3, r2, r3
 8006be4:	00db      	lsls	r3, r3, #3
 8006be6:	3332      	adds	r3, #50	@ 0x32
 8006be8:	4a09      	ldr	r2, [pc, #36]	@ (8006c10 <UART_SetConfig+0x360>)
 8006bea:	fba2 2303 	umull	r2, r3, r2, r3
 8006bee:	095b      	lsrs	r3, r3, #5
 8006bf0:	f003 0207 	and.w	r2, r3, #7
 8006bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4422      	add	r2, r4
 8006bfc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006bfe:	e109      	b.n	8006e14 <UART_SetConfig+0x564>
 8006c00:	00a037a0 	.word	0x00a037a0
 8006c04:	080071c8 	.word	0x080071c8
 8006c08:	40011000 	.word	0x40011000
 8006c0c:	40011400 	.word	0x40011400
 8006c10:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006c1e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006c22:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006c26:	4642      	mov	r2, r8
 8006c28:	464b      	mov	r3, r9
 8006c2a:	1891      	adds	r1, r2, r2
 8006c2c:	6239      	str	r1, [r7, #32]
 8006c2e:	415b      	adcs	r3, r3
 8006c30:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006c36:	4641      	mov	r1, r8
 8006c38:	1854      	adds	r4, r2, r1
 8006c3a:	4649      	mov	r1, r9
 8006c3c:	eb43 0501 	adc.w	r5, r3, r1
 8006c40:	f04f 0200 	mov.w	r2, #0
 8006c44:	f04f 0300 	mov.w	r3, #0
 8006c48:	00eb      	lsls	r3, r5, #3
 8006c4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c4e:	00e2      	lsls	r2, r4, #3
 8006c50:	4614      	mov	r4, r2
 8006c52:	461d      	mov	r5, r3
 8006c54:	4643      	mov	r3, r8
 8006c56:	18e3      	adds	r3, r4, r3
 8006c58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006c5c:	464b      	mov	r3, r9
 8006c5e:	eb45 0303 	adc.w	r3, r5, r3
 8006c62:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006c72:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006c76:	f04f 0200 	mov.w	r2, #0
 8006c7a:	f04f 0300 	mov.w	r3, #0
 8006c7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006c82:	4629      	mov	r1, r5
 8006c84:	008b      	lsls	r3, r1, #2
 8006c86:	4621      	mov	r1, r4
 8006c88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c8c:	4621      	mov	r1, r4
 8006c8e:	008a      	lsls	r2, r1, #2
 8006c90:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006c94:	f7f9 faa0 	bl	80001d8 <__aeabi_uldivmod>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	460b      	mov	r3, r1
 8006c9c:	4b60      	ldr	r3, [pc, #384]	@ (8006e20 <UART_SetConfig+0x570>)
 8006c9e:	fba3 2302 	umull	r2, r3, r3, r2
 8006ca2:	095b      	lsrs	r3, r3, #5
 8006ca4:	011c      	lsls	r4, r3, #4
 8006ca6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006caa:	2200      	movs	r2, #0
 8006cac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006cb0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006cb4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006cb8:	4642      	mov	r2, r8
 8006cba:	464b      	mov	r3, r9
 8006cbc:	1891      	adds	r1, r2, r2
 8006cbe:	61b9      	str	r1, [r7, #24]
 8006cc0:	415b      	adcs	r3, r3
 8006cc2:	61fb      	str	r3, [r7, #28]
 8006cc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006cc8:	4641      	mov	r1, r8
 8006cca:	1851      	adds	r1, r2, r1
 8006ccc:	6139      	str	r1, [r7, #16]
 8006cce:	4649      	mov	r1, r9
 8006cd0:	414b      	adcs	r3, r1
 8006cd2:	617b      	str	r3, [r7, #20]
 8006cd4:	f04f 0200 	mov.w	r2, #0
 8006cd8:	f04f 0300 	mov.w	r3, #0
 8006cdc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ce0:	4659      	mov	r1, fp
 8006ce2:	00cb      	lsls	r3, r1, #3
 8006ce4:	4651      	mov	r1, sl
 8006ce6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006cea:	4651      	mov	r1, sl
 8006cec:	00ca      	lsls	r2, r1, #3
 8006cee:	4610      	mov	r0, r2
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	4642      	mov	r2, r8
 8006cf6:	189b      	adds	r3, r3, r2
 8006cf8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006cfc:	464b      	mov	r3, r9
 8006cfe:	460a      	mov	r2, r1
 8006d00:	eb42 0303 	adc.w	r3, r2, r3
 8006d04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006d12:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006d14:	f04f 0200 	mov.w	r2, #0
 8006d18:	f04f 0300 	mov.w	r3, #0
 8006d1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006d20:	4649      	mov	r1, r9
 8006d22:	008b      	lsls	r3, r1, #2
 8006d24:	4641      	mov	r1, r8
 8006d26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d2a:	4641      	mov	r1, r8
 8006d2c:	008a      	lsls	r2, r1, #2
 8006d2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006d32:	f7f9 fa51 	bl	80001d8 <__aeabi_uldivmod>
 8006d36:	4602      	mov	r2, r0
 8006d38:	460b      	mov	r3, r1
 8006d3a:	4611      	mov	r1, r2
 8006d3c:	4b38      	ldr	r3, [pc, #224]	@ (8006e20 <UART_SetConfig+0x570>)
 8006d3e:	fba3 2301 	umull	r2, r3, r3, r1
 8006d42:	095b      	lsrs	r3, r3, #5
 8006d44:	2264      	movs	r2, #100	@ 0x64
 8006d46:	fb02 f303 	mul.w	r3, r2, r3
 8006d4a:	1acb      	subs	r3, r1, r3
 8006d4c:	011b      	lsls	r3, r3, #4
 8006d4e:	3332      	adds	r3, #50	@ 0x32
 8006d50:	4a33      	ldr	r2, [pc, #204]	@ (8006e20 <UART_SetConfig+0x570>)
 8006d52:	fba2 2303 	umull	r2, r3, r2, r3
 8006d56:	095b      	lsrs	r3, r3, #5
 8006d58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006d5c:	441c      	add	r4, r3
 8006d5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d62:	2200      	movs	r2, #0
 8006d64:	673b      	str	r3, [r7, #112]	@ 0x70
 8006d66:	677a      	str	r2, [r7, #116]	@ 0x74
 8006d68:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006d6c:	4642      	mov	r2, r8
 8006d6e:	464b      	mov	r3, r9
 8006d70:	1891      	adds	r1, r2, r2
 8006d72:	60b9      	str	r1, [r7, #8]
 8006d74:	415b      	adcs	r3, r3
 8006d76:	60fb      	str	r3, [r7, #12]
 8006d78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d7c:	4641      	mov	r1, r8
 8006d7e:	1851      	adds	r1, r2, r1
 8006d80:	6039      	str	r1, [r7, #0]
 8006d82:	4649      	mov	r1, r9
 8006d84:	414b      	adcs	r3, r1
 8006d86:	607b      	str	r3, [r7, #4]
 8006d88:	f04f 0200 	mov.w	r2, #0
 8006d8c:	f04f 0300 	mov.w	r3, #0
 8006d90:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006d94:	4659      	mov	r1, fp
 8006d96:	00cb      	lsls	r3, r1, #3
 8006d98:	4651      	mov	r1, sl
 8006d9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d9e:	4651      	mov	r1, sl
 8006da0:	00ca      	lsls	r2, r1, #3
 8006da2:	4610      	mov	r0, r2
 8006da4:	4619      	mov	r1, r3
 8006da6:	4603      	mov	r3, r0
 8006da8:	4642      	mov	r2, r8
 8006daa:	189b      	adds	r3, r3, r2
 8006dac:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006dae:	464b      	mov	r3, r9
 8006db0:	460a      	mov	r2, r1
 8006db2:	eb42 0303 	adc.w	r3, r2, r3
 8006db6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	663b      	str	r3, [r7, #96]	@ 0x60
 8006dc2:	667a      	str	r2, [r7, #100]	@ 0x64
 8006dc4:	f04f 0200 	mov.w	r2, #0
 8006dc8:	f04f 0300 	mov.w	r3, #0
 8006dcc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006dd0:	4649      	mov	r1, r9
 8006dd2:	008b      	lsls	r3, r1, #2
 8006dd4:	4641      	mov	r1, r8
 8006dd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006dda:	4641      	mov	r1, r8
 8006ddc:	008a      	lsls	r2, r1, #2
 8006dde:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006de2:	f7f9 f9f9 	bl	80001d8 <__aeabi_uldivmod>
 8006de6:	4602      	mov	r2, r0
 8006de8:	460b      	mov	r3, r1
 8006dea:	4b0d      	ldr	r3, [pc, #52]	@ (8006e20 <UART_SetConfig+0x570>)
 8006dec:	fba3 1302 	umull	r1, r3, r3, r2
 8006df0:	095b      	lsrs	r3, r3, #5
 8006df2:	2164      	movs	r1, #100	@ 0x64
 8006df4:	fb01 f303 	mul.w	r3, r1, r3
 8006df8:	1ad3      	subs	r3, r2, r3
 8006dfa:	011b      	lsls	r3, r3, #4
 8006dfc:	3332      	adds	r3, #50	@ 0x32
 8006dfe:	4a08      	ldr	r2, [pc, #32]	@ (8006e20 <UART_SetConfig+0x570>)
 8006e00:	fba2 2303 	umull	r2, r3, r2, r3
 8006e04:	095b      	lsrs	r3, r3, #5
 8006e06:	f003 020f 	and.w	r2, r3, #15
 8006e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4422      	add	r2, r4
 8006e12:	609a      	str	r2, [r3, #8]
}
 8006e14:	bf00      	nop
 8006e16:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e20:	51eb851f 	.word	0x51eb851f

08006e24 <memset>:
 8006e24:	4402      	add	r2, r0
 8006e26:	4603      	mov	r3, r0
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d100      	bne.n	8006e2e <memset+0xa>
 8006e2c:	4770      	bx	lr
 8006e2e:	f803 1b01 	strb.w	r1, [r3], #1
 8006e32:	e7f9      	b.n	8006e28 <memset+0x4>

08006e34 <__libc_init_array>:
 8006e34:	b570      	push	{r4, r5, r6, lr}
 8006e36:	4d0d      	ldr	r5, [pc, #52]	@ (8006e6c <__libc_init_array+0x38>)
 8006e38:	4c0d      	ldr	r4, [pc, #52]	@ (8006e70 <__libc_init_array+0x3c>)
 8006e3a:	1b64      	subs	r4, r4, r5
 8006e3c:	10a4      	asrs	r4, r4, #2
 8006e3e:	2600      	movs	r6, #0
 8006e40:	42a6      	cmp	r6, r4
 8006e42:	d109      	bne.n	8006e58 <__libc_init_array+0x24>
 8006e44:	4d0b      	ldr	r5, [pc, #44]	@ (8006e74 <__libc_init_array+0x40>)
 8006e46:	4c0c      	ldr	r4, [pc, #48]	@ (8006e78 <__libc_init_array+0x44>)
 8006e48:	f000 f818 	bl	8006e7c <_init>
 8006e4c:	1b64      	subs	r4, r4, r5
 8006e4e:	10a4      	asrs	r4, r4, #2
 8006e50:	2600      	movs	r6, #0
 8006e52:	42a6      	cmp	r6, r4
 8006e54:	d105      	bne.n	8006e62 <__libc_init_array+0x2e>
 8006e56:	bd70      	pop	{r4, r5, r6, pc}
 8006e58:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e5c:	4798      	blx	r3
 8006e5e:	3601      	adds	r6, #1
 8006e60:	e7ee      	b.n	8006e40 <__libc_init_array+0xc>
 8006e62:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e66:	4798      	blx	r3
 8006e68:	3601      	adds	r6, #1
 8006e6a:	e7f2      	b.n	8006e52 <__libc_init_array+0x1e>
 8006e6c:	0800725c 	.word	0x0800725c
 8006e70:	0800725c 	.word	0x0800725c
 8006e74:	0800725c 	.word	0x0800725c
 8006e78:	08007260 	.word	0x08007260

08006e7c <_init>:
 8006e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e7e:	bf00      	nop
 8006e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e82:	bc08      	pop	{r3}
 8006e84:	469e      	mov	lr, r3
 8006e86:	4770      	bx	lr

08006e88 <_fini>:
 8006e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e8a:	bf00      	nop
 8006e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e8e:	bc08      	pop	{r3}
 8006e90:	469e      	mov	lr, r3
 8006e92:	4770      	bx	lr
